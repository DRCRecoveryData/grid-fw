
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e03c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000e03c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          000035fc  200005c0  0000e600  000205c0  2**4
                  ALLOC
  5 .stack        00010004  20003bbc  00011bfc  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008e290  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bd07  00000000  00000000  000ae8d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030387  00000000  00000000  000ba5da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022e0  00000000  00000000  000ea961  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003200  00000000  00000000  000ecc41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00047902  00000000  00000000  000efe41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003ecc4  00000000  00000000  00137743  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a6d3  00000000  00000000  00176407  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000067d4  00000000  00000000  00290adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 3b 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     .;. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	b5 69 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .i..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 c1 65 00 00 d5 65 00 00     .........e...e..
      bc:	f9 63 00 00 05 64 00 00 11 64 00 00 1d 64 00 00     .c...d...d...d..
      cc:	29 64 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     )d..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	e9 67 00 00 d1 74 00 00 e5 74 00 00 f9 74 00 00     .g...t...t...t..
     104:	0d 75 00 00 21 75 00 00 35 75 00 00 49 75 00 00     .u..!u..5u..Iu..
     114:	5d 75 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ]u..............
     124:	ed 02 00 00 71 75 00 00 85 75 00 00 99 75 00 00     ....qu...u...u..
     134:	ad 75 00 00 c1 75 00 00 d5 75 00 00 e9 75 00 00     .u...u...u...u..
     144:	fd 75 00 00 11 76 00 00 25 76 00 00 39 76 00 00     .u...v..%v..9v..
     154:	4d 76 00 00 61 76 00 00 75 76 00 00 89 76 00 00     Mv..av..uv...v..
     164:	9d 76 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .v..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 b9 95 00 00     ................
     184:	c5 95 00 00 d1 95 00 00 dd 95 00 00 00 00 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 c1 82 00 00 d5 82 00 00     ................
     1f4:	e9 82 00 00 fd 82 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 8d 60 00 00 a1 60 00 00 b5 60 00 00     .....`...`...`..
     224:	c9 60 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .`..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000e03c 	.word	0x0000e03c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000e03c 	.word	0x0000e03c
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000e03c 	.word	0x0000e03c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000b76d 	.word	0x0000b76d
     2e8:	0000a365 	.word	0x0000a365

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000e03c 	.word	0x0000e03c
     36c:	200005bc 	.word	0x200005bc
     370:	20003bbc 	.word	0x20003bbc
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000bf4d 	.word	0x0000bf4d
     384:	00009e7d 	.word	0x00009e7d

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20001058 	.word	0x20001058
     40c:	20001154 	.word	0x20001154
     410:	43001c00 	.word	0x43001c00
     414:	00004431 	.word	0x00004431
     418:	000044d5 	.word	0x000044d5
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	2000122c 	.word	0x2000122c
     4b0:	20000ff4 	.word	0x20000ff4
     4b4:	43002000 	.word	0x43002000
     4b8:	00004431 	.word	0x00004431
     4bc:	000044d5 	.word	0x000044d5
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000ff0 	.word	0x20000ff0
     4e8:	00004771 	.word	0x00004771

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	000047f5 	.word	0x000047f5

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fd4 	.word	0x20000fd4
     54c:	00004815 	.word	0x00004815

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001298 	.word	0x20001298
     718:	000049c1 	.word	0x000049c1
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	20001084 	.word	0x20001084
     7bc:	000052a1 	.word	0x000052a1
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	200010d8 	.word	0x200010d8
     860:	000052a1 	.word	0x000052a1
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	2000104c 	.word	0x2000104c
     8f8:	00005529 	.word	0x00005529
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f4c 	.word	0x20000f4c
     a04:	00004bb1 	.word	0x00004bb1
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	2000118c 	.word	0x2000118c
     aa8:	000052a1 	.word	0x000052a1
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	2000100c 	.word	0x2000100c
     b54:	000048f5 	.word	0x000048f5
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	200011dc 	.word	0x200011dc
     bf8:	000052a1 	.word	0x000052a1
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001128 	.word	0x20001128
     cfc:	00004e15 	.word	0x00004e15
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	000047a1 	.word	0x000047a1

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	000057f1 	.word	0x000057f1
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000d418 	.word	0x0000d418
     e14:	00005b49 	.word	0x00005b49
     e18:	200010d4 	.word	0x200010d4
     e1c:	40002000 	.word	0x40002000
     e20:	000095e9 	.word	0x000095e9

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	0000610d 	.word	0x0000610d
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	000069ad 	.word	0x000069ad
    1100:	40002400 	.word	0x40002400
    1104:	20000f94 	.word	0x20000f94
    1108:	00004fbd 	.word	0x00004fbd
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	000082b9 	.word	0x000082b9
    1134:	40003800 	.word	0x40003800
    1138:	20001278 	.word	0x20001278
    113c:	40003c00 	.word	0x40003c00
    1140:	2000116c 	.word	0x2000116c
    1144:	4101a000 	.word	0x4101a000
    1148:	20000fb4 	.word	0x20000fb4
    114c:	4101c000 	.word	0x4101c000
    1150:	20001258 	.word	0x20001258
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4604      	mov	r4, r0
    1164:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1166:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1168:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    116a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    116c:	2300      	movs	r3, #0
    116e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1170:	0048      	lsls	r0, r1, #1
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <grid_ain_channel_init+0x38>)
    1174:	4798      	blx	r3
    1176:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1178:	b14d      	cbz	r5, 118e <grid_ain_channel_init+0x2e>
    117a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    117c:	4619      	mov	r1, r3
    117e:	6822      	ldr	r2, [r4, #0]
    1180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	7922      	ldrb	r2, [r4, #4]
    118a:	429a      	cmp	r2, r3
    118c:	d8f7      	bhi.n	117e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    118e:	2000      	movs	r0, #0
    1190:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    1192:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	bf00      	nop
    1198:	0000bf95 	.word	0x0000bf95

0000119c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11a0:	4605      	mov	r5, r0
    11a2:	4689      	mov	r9, r1
    11a4:	4617      	mov	r7, r2
    11a6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11a8:	0100      	lsls	r0, r0, #4
    11aa:	4b0c      	ldr	r3, [pc, #48]	; (11dc <grid_ain_init+0x40>)
    11ac:	4798      	blx	r3
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <grid_ain_init+0x44>)
    11b0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11b2:	b185      	cbz	r5, 11d6 <grid_ain_init+0x3a>
    11b4:	3d01      	subs	r5, #1
    11b6:	b2ed      	uxtb	r5, r5
    11b8:	3501      	adds	r5, #1
    11ba:	012d      	lsls	r5, r5, #4
    11bc:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11be:	469a      	mov	sl, r3
    11c0:	4e08      	ldr	r6, [pc, #32]	; (11e4 <grid_ain_init+0x48>)
    11c2:	4643      	mov	r3, r8
    11c4:	463a      	mov	r2, r7
    11c6:	4649      	mov	r1, r9
    11c8:	f8da 0000 	ldr.w	r0, [sl]
    11cc:	4420      	add	r0, r4
    11ce:	47b0      	blx	r6
    11d0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    11d2:	42ac      	cmp	r4, r5
    11d4:	d1f5      	bne.n	11c2 <grid_ain_init+0x26>
	}

	return 0;
}
    11d6:	2000      	movs	r0, #0
    11d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11dc:	0000bf95 	.word	0x0000bf95
    11e0:	200017e8 	.word	0x200017e8
    11e4:	00001161 	.word	0x00001161

000011e8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    11e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    11ec:	0100      	lsls	r0, r0, #4
    11ee:	4b3c      	ldr	r3, [pc, #240]	; (12e0 <grid_ain_add_sample+0xf8>)
    11f0:	f8d3 a000 	ldr.w	sl, [r3]
    11f4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    11f8:	f89c 6004 	ldrb.w	r6, [ip, #4]
    11fc:	2e00      	cmp	r6, #0
    11fe:	d05b      	beq.n	12b8 <grid_ain_add_sample+0xd0>
    1200:	f85a 5000 	ldr.w	r5, [sl, r0]
    1204:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1206:	2200      	movs	r2, #0
    1208:	4690      	mov	r8, r2
    120a:	4691      	mov	r9, r2
    120c:	4696      	mov	lr, r2
    120e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1212:	4614      	mov	r4, r2
    1214:	fa5f fb82 	uxtb.w	fp, r2
    1218:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    121c:	441c      	add	r4, r3
		
		if (current > maximum){
    121e:	4573      	cmp	r3, lr
    1220:	bf84      	itt	hi
    1222:	46d8      	movhi	r8, fp
			maximum = current;
    1224:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1226:	42bb      	cmp	r3, r7
    1228:	bf3c      	itt	cc
    122a:	46d9      	movcc	r9, fp
			minimum = current;
    122c:	461f      	movcc	r7, r3
    122e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1230:	b2d3      	uxtb	r3, r2
    1232:	42b3      	cmp	r3, r6
    1234:	d3ee      	bcc.n	1214 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1236:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    123a:	b2b6      	uxth	r6, r6
    123c:	428e      	cmp	r6, r1
    123e:	d23f      	bcs.n	12c0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1240:	f85a 3000 	ldr.w	r3, [sl, r0]
    1244:	440c      	add	r4, r1
    1246:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    124a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    124c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1250:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1254:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1258:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    125c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1260:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1262:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1266:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1268:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    126a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    126c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1270:	b29b      	uxth	r3, r3
    1272:	408b      	lsls	r3, r1
    1274:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1276:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    127a:	1b92      	subs	r2, r2, r6
    127c:	2a00      	cmp	r2, #0
    127e:	bfb8      	it	lt
    1280:	4252      	neglt	r2, r2
    1282:	2601      	movs	r6, #1
    1284:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1288:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    128c:	42be      	cmp	r6, r7
    128e:	d020      	beq.n	12d2 <grid_ain_add_sample+0xea>
    1290:	4282      	cmp	r2, r0
    1292:	dc08      	bgt.n	12a6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1294:	2201      	movs	r2, #1
    1296:	fa02 f505 	lsl.w	r5, r2, r5
    129a:	fa02 f101 	lsl.w	r1, r2, r1
    129e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12a0:	428f      	cmp	r7, r1
    12a2:	d000      	beq.n	12a6 <grid_ain_add_sample+0xbe>
    12a4:	b9c7      	cbnz	r7, 12d8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12a6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12aa:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12ae:	2001      	movs	r0, #1
    12b0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12b8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12ba:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12bc:	2400      	movs	r4, #0
    12be:	e7ba      	b.n	1236 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    12c0:	f85a 3000 	ldr.w	r3, [sl, r0]
    12c4:	440c      	add	r4, r1
    12c6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    12ca:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    12cc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    12d0:	e7be      	b.n	1250 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    12d2:	2000      	movs	r0, #0
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	2000      	movs	r0, #0
	}
	
}
    12da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12de:	bf00      	nop
    12e0:	200017e8 	.word	0x200017e8

000012e4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    12e4:	4b02      	ldr	r3, [pc, #8]	; (12f0 <grid_ain_get_changed+0xc>)
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    12ec:	7b00      	ldrb	r0, [r0, #12]
    12ee:	4770      	bx	lr
    12f0:	200017e8 	.word	0x200017e8

000012f4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <grid_ain_get_average+0x28>)
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    12fc:	2300      	movs	r3, #0
    12fe:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1300:	1fcb      	subs	r3, r1, #7
    1302:	b2db      	uxtb	r3, r3
    1304:	2b07      	cmp	r3, #7
    1306:	d806      	bhi.n	1316 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1308:	8903      	ldrh	r3, [r0, #8]
    130a:	7940      	ldrb	r0, [r0, #5]
    130c:	1a40      	subs	r0, r0, r1
    130e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1312:	b280      	uxth	r0, r0
    1314:	4770      	bx	lr
    1316:	2000      	movs	r0, #0
    1318:	e7fb      	b.n	1312 <grid_ain_get_average+0x1e>
    131a:	bf00      	nop
    131c:	200017e8 	.word	0x200017e8

00001320 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4604      	mov	r4, r0
    1324:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1326:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1328:	2300      	movs	r3, #0
    132a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    132c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    132e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1330:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1332:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1334:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1336:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1338:	4608      	mov	r0, r1
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <grid_buffer_init+0x3c>)
    133c:	4798      	blx	r3
    133e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1340:	b900      	cbnz	r0, 1344 <grid_buffer_init+0x24>
    1342:	e7fe      	b.n	1342 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1344:	b145      	cbz	r5, 1358 <grid_buffer_init+0x38>
    1346:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1348:	4619      	mov	r1, r3
    134a:	6862      	ldr	r2, [r4, #4]
    134c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    134e:	3301      	adds	r3, #1
    1350:	b29b      	uxth	r3, r3
    1352:	8822      	ldrh	r2, [r4, #0]
    1354:	429a      	cmp	r2, r3
    1356:	d8f8      	bhi.n	134a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1358:	2001      	movs	r0, #1
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	0000bf95 	.word	0x0000bf95

00001360 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1360:	8903      	ldrh	r3, [r0, #8]
    1362:	8a02      	ldrh	r2, [r0, #16]
    1364:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1366:	bf8f      	iteee	hi
    1368:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    136a:	8800      	ldrhls	r0, [r0, #0]
    136c:	18c0      	addls	r0, r0, r3
    136e:	1a80      	subls	r0, r0, r2
    1370:	b280      	uxth	r0, r0

	return space;

	
	
}
    1372:	4770      	bx	lr

00001374 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    1374:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1376:	8903      	ldrh	r3, [r0, #8]
    1378:	8a02      	ldrh	r2, [r0, #16]
    137a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    137c:	bf9c      	itt	ls
    137e:	8804      	ldrhls	r4, [r0, #0]
    1380:	191b      	addls	r3, r3, r4
    1382:	1a9b      	subs	r3, r3, r2
    1384:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    1386:	428b      	cmp	r3, r1
    1388:	d90a      	bls.n	13a0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    138a:	440a      	add	r2, r1
    138c:	8804      	ldrh	r4, [r0, #0]
    138e:	fb92 f3f4 	sdiv	r3, r2, r4
    1392:	fb04 2213 	mls	r2, r4, r3, r2
    1396:	8242      	strh	r2, [r0, #18]
		
		return length;
    1398:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    139a:	f85d 4b04 	ldr.w	r4, [sp], #4
    139e:	4770      	bx	lr
		return 0; // failed
    13a0:	2000      	movs	r0, #0
    13a2:	e7fa      	b.n	139a <grid_buffer_write_init+0x26>

000013a4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    13a4:	8a83      	ldrh	r3, [r0, #20]
    13a6:	6842      	ldr	r2, [r0, #4]
    13a8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    13aa:	8a83      	ldrh	r3, [r0, #20]
    13ac:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    13ae:	b29b      	uxth	r3, r3
    13b0:	8801      	ldrh	r1, [r0, #0]
    13b2:	fbb3 f2f1 	udiv	r2, r3, r1
    13b6:	fb01 3312 	mls	r3, r1, r2, r3
    13ba:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    13bc:	2001      	movs	r0, #1
    13be:	4770      	bx	lr

000013c0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    13c0:	8a83      	ldrh	r3, [r0, #20]
    13c2:	8a42      	ldrh	r2, [r0, #18]
    13c4:	429a      	cmp	r2, r3
    13c6:	d000      	beq.n	13ca <grid_buffer_write_acknowledge+0xa>
    13c8:	e7fe      	b.n	13c8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    13ca:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    13cc:	2001      	movs	r0, #1
    13ce:	4770      	bx	lr

000013d0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    13d0:	8983      	ldrh	r3, [r0, #12]
    13d2:	8942      	ldrh	r2, [r0, #10]
    13d4:	429a      	cmp	r2, r3
    13d6:	d000      	beq.n	13da <grid_buffer_read_size+0xa>
    13d8:	e7fe      	b.n	13d8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    13da:	8902      	ldrh	r2, [r0, #8]
    13dc:	429a      	cmp	r2, r3
    13de:	d000      	beq.n	13e2 <grid_buffer_read_size+0x12>
    13e0:	e7fe      	b.n	13e0 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    13e2:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    13e4:	8a05      	ldrh	r5, [r0, #16]
    13e6:	42ab      	cmp	r3, r5
    13e8:	d025      	beq.n	1436 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    13ea:	8804      	ldrh	r4, [r0, #0]
    13ec:	b1fc      	cbz	r4, 142e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    13ee:	4626      	mov	r6, r4
    13f0:	fb93 f2f4 	sdiv	r2, r3, r4
    13f4:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    13f8:	b291      	uxth	r1, r2
    13fa:	428d      	cmp	r5, r1
    13fc:	d01d      	beq.n	143a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    13fe:	6840      	ldr	r0, [r0, #4]
    1400:	5c42      	ldrb	r2, [r0, r1]
    1402:	2a0a      	cmp	r2, #10
    1404:	d114      	bne.n	1430 <grid_buffer_read_size+0x60>
    1406:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1408:	3301      	adds	r3, #1
    140a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    140c:	bcf0      	pop	{r4, r5, r6, r7}
    140e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1410:	fb92 f1f6 	sdiv	r1, r2, r6
    1414:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1418:	b28f      	uxth	r7, r1
    141a:	42bd      	cmp	r5, r7
    141c:	d00f      	beq.n	143e <grid_buffer_read_size+0x6e>
    141e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1420:	5dc1      	ldrb	r1, [r0, r7]
    1422:	290a      	cmp	r1, #10
    1424:	d0f0      	beq.n	1408 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1426:	3301      	adds	r3, #1
    1428:	b29b      	uxth	r3, r3
    142a:	42a3      	cmp	r3, r4
    142c:	d1f0      	bne.n	1410 <grid_buffer_read_size+0x40>
    142e:	e7fe      	b.n	142e <grid_buffer_read_size+0x5e>
    1430:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1432:	2300      	movs	r3, #0
    1434:	e7f7      	b.n	1426 <grid_buffer_read_size+0x56>
		return 0;
    1436:	2000      	movs	r0, #0
    1438:	e7e8      	b.n	140c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    143a:	2000      	movs	r0, #0
    143c:	e7e6      	b.n	140c <grid_buffer_read_size+0x3c>
    143e:	2000      	movs	r0, #0
    1440:	e7e4      	b.n	140c <grid_buffer_read_size+0x3c>

00001442 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1442:	8982      	ldrh	r2, [r0, #12]
    1444:	8943      	ldrh	r3, [r0, #10]
    1446:	4293      	cmp	r3, r2
    1448:	d000      	beq.n	144c <grid_buffer_read_init+0xa>
    144a:	e7fe      	b.n	144a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    144c:	8903      	ldrh	r3, [r0, #8]
    144e:	4293      	cmp	r3, r2
    1450:	d000      	beq.n	1454 <grid_buffer_read_init+0x12>
    1452:	e7fe      	b.n	1452 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1456:	8a05      	ldrh	r5, [r0, #16]
    1458:	42aa      	cmp	r2, r5
    145a:	d031      	beq.n	14c0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    145c:	8804      	ldrh	r4, [r0, #0]
    145e:	b35c      	cbz	r4, 14b8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1460:	4626      	mov	r6, r4
    1462:	fb92 f3f4 	sdiv	r3, r2, r4
    1466:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    146a:	b299      	uxth	r1, r3
    146c:	428d      	cmp	r5, r1
    146e:	d029      	beq.n	14c4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1470:	6847      	ldr	r7, [r0, #4]
    1472:	460b      	mov	r3, r1
    1474:	5c79      	ldrb	r1, [r7, r1]
    1476:	290a      	cmp	r1, #10
    1478:	d11f      	bne.n	14ba <grid_buffer_read_init+0x78>
    147a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    147c:	3301      	adds	r3, #1
    147e:	fb93 f2f4 	sdiv	r2, r3, r4
    1482:	fb04 3312 	mls	r3, r4, r2, r3
    1486:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1488:	1c4b      	adds	r3, r1, #1
    148a:	b29b      	uxth	r3, r3
    148c:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    148e:	4618      	mov	r0, r3
    1490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1492:	fb92 f3f6 	sdiv	r3, r2, r6
    1496:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    149a:	fa1f fe83 	uxth.w	lr, r3
    149e:	4575      	cmp	r5, lr
    14a0:	d012      	beq.n	14c8 <grid_buffer_read_init+0x86>
    14a2:	4673      	mov	r3, lr
    14a4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14a6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    14aa:	f1be 0f0a 	cmp.w	lr, #10
    14ae:	d0e5      	beq.n	147c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    14b0:	3101      	adds	r1, #1
    14b2:	b289      	uxth	r1, r1
    14b4:	42a1      	cmp	r1, r4
    14b6:	d1ec      	bne.n	1492 <grid_buffer_read_init+0x50>
    14b8:	e7fe      	b.n	14b8 <grid_buffer_read_init+0x76>
    14ba:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14bc:	2100      	movs	r1, #0
    14be:	e7f7      	b.n	14b0 <grid_buffer_read_init+0x6e>
		return 0;
    14c0:	2300      	movs	r3, #0
    14c2:	e7e4      	b.n	148e <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    14c4:	2300      	movs	r3, #0
    14c6:	e7e2      	b.n	148e <grid_buffer_read_init+0x4c>
    14c8:	2300      	movs	r3, #0
    14ca:	e7e0      	b.n	148e <grid_buffer_read_init+0x4c>

000014cc <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    14cc:	8983      	ldrh	r3, [r0, #12]
    14ce:	8941      	ldrh	r1, [r0, #10]
    14d0:	4299      	cmp	r1, r3
    14d2:	d00e      	beq.n	14f2 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    14d4:	b410      	push	{r4}
    14d6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    14d8:	6841      	ldr	r1, [r0, #4]
    14da:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    14dc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    14de:	b29b      	uxth	r3, r3
    14e0:	8814      	ldrh	r4, [r2, #0]
    14e2:	fbb3 f1f4 	udiv	r1, r3, r4
    14e6:	fb04 3311 	mls	r3, r4, r1, r3
    14ea:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    14ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    14f0:	4770      	bx	lr
    14f2:	e7fe      	b.n	14f2 <grid_buffer_read_character+0x26>

000014f4 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    14f4:	8983      	ldrh	r3, [r0, #12]
    14f6:	8942      	ldrh	r2, [r0, #10]
    14f8:	429a      	cmp	r2, r3
    14fa:	d000      	beq.n	14fe <grid_buffer_read_acknowledge+0xa>
    14fc:	e7fe      	b.n	14fc <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    14fe:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1500:	2001      	movs	r0, #1
    1502:	4770      	bx	lr

00001504 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    1504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1508:	4604      	mov	r4, r0
    150a:	4690      	mov	r8, r2
    150c:	461f      	mov	r7, r3
    150e:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1512:	f200 40dc 	addw	r0, r0, #1244	; 0x4dc
    1516:	4e33      	ldr	r6, [pc, #204]	; (15e4 <grid_port_init+0xe0>)
    1518:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    151a:	4641      	mov	r1, r8
    151c:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
    1520:	47b0      	blx	r6
	
	por->cooldown = 0;
    1522:	2300      	movs	r3, #0
    1524:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1526:	f89d 2020 	ldrb.w	r2, [sp, #32]
    152a:	72a2      	strb	r2, [r4, #10]
	
	por->direction = dir;
    152c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1530:	7262      	strb	r2, [r4, #9]
	
	por->usart	= usart;
    1532:	6067      	str	r7, [r4, #4]
	por->type		= type;
    1534:	7225      	strb	r5, [r4, #8]
	
	por->tx_double_buffer_status	= 0;
    1536:	81a3      	strh	r3, [r4, #12]
	por->rx_double_buffer_status	= 0;
    1538:	6223      	str	r3, [r4, #32]
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    153a:	4619      	mov	r1, r3
    153c:	18e2      	adds	r2, r4, r3
    153e:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1542:	3301      	adds	r3, #1
    1544:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1548:	d1f8      	bne.n	153c <grid_port_init+0x38>
    154a:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    154c:	4619      	mov	r1, r3
    154e:	18e2      	adds	r2, r4, r3
    1550:	f882 1284 	strb.w	r1, [r2, #644]	; 0x284
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1554:	3301      	adds	r3, #1
    1556:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    155a:	d1f8      	bne.n	154e <grid_port_init+0x4a>
	}
	
	por->partner_fi = 0;
    155c:	2300      	movs	r3, #0
    155e:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
	
	por->partner_hwcfg = 0;
    1562:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	por->partner_status = 1;
    1566:	2301      	movs	r3, #1
    1568:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    156c:	429d      	cmp	r5, r3
    156e:	d004      	beq.n	157a <grid_port_init+0x76>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1570:	2301      	movs	r3, #1
    1572:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    1576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    157a:	2300      	movs	r3, #0
    157c:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
		por->partner_fi = 0;
    1580:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
		if (por->direction == GRID_MSG_NORTH){
    1584:	7a63      	ldrb	r3, [r4, #9]
    1586:	b2db      	uxtb	r3, r3
    1588:	2b11      	cmp	r3, #17
    158a:	d013      	beq.n	15b4 <grid_port_init+0xb0>
		else if (por->direction == GRID_MSG_EAST){
    158c:	7a63      	ldrb	r3, [r4, #9]
    158e:	b2db      	uxtb	r3, r3
    1590:	2b12      	cmp	r3, #18
    1592:	d017      	beq.n	15c4 <grid_port_init+0xc0>
		else if (por->direction == GRID_MSG_SOUTH){
    1594:	7a63      	ldrb	r3, [r4, #9]
    1596:	b2db      	uxtb	r3, r3
    1598:	2b13      	cmp	r3, #19
    159a:	d01b      	beq.n	15d4 <grid_port_init+0xd0>
		else if (por->direction == GRID_MSG_WEST){
    159c:	7a63      	ldrb	r3, [r4, #9]
    159e:	b2db      	uxtb	r3, r3
    15a0:	2b14      	cmp	r3, #20
    15a2:	d1e8      	bne.n	1576 <grid_port_init+0x72>
			por->dx = -1;
    15a4:	23ff      	movs	r3, #255	; 0xff
    15a6:	f884 3511 	strb.w	r3, [r4, #1297]	; 0x511
			por->dy = 0;
    15aa:	2300      	movs	r3, #0
    15ac:	f884 3512 	strb.w	r3, [r4, #1298]	; 0x512
    15b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15b4:	2300      	movs	r3, #0
    15b6:	f884 3511 	strb.w	r3, [r4, #1297]	; 0x511
			por->dy = 1;
    15ba:	2301      	movs	r3, #1
    15bc:	f884 3512 	strb.w	r3, [r4, #1298]	; 0x512
    15c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    15c4:	2301      	movs	r3, #1
    15c6:	f884 3511 	strb.w	r3, [r4, #1297]	; 0x511
			por->dy = 0;
    15ca:	2300      	movs	r3, #0
    15cc:	f884 3512 	strb.w	r3, [r4, #1298]	; 0x512
    15d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15d4:	2300      	movs	r3, #0
    15d6:	f884 3511 	strb.w	r3, [r4, #1297]	; 0x511
			por->dy = -1;
    15da:	23ff      	movs	r3, #255	; 0xff
    15dc:	f884 3512 	strb.w	r3, [r4, #1298]	; 0x512
    15e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15e4:	00001321 	.word	0x00001321

000015e8 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    15e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15ec:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    15ee:	2600      	movs	r6, #0
    15f0:	9602      	str	r6, [sp, #8]
    15f2:	2311      	movs	r3, #17
    15f4:	9301      	str	r3, [sp, #4]
    15f6:	2401      	movs	r4, #1
    15f8:	9400      	str	r4, [sp, #0]
    15fa:	4b25      	ldr	r3, [pc, #148]	; (1690 <grid_port_init_all+0xa8>)
    15fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1600:	4611      	mov	r1, r2
    1602:	4824      	ldr	r0, [pc, #144]	; (1694 <grid_port_init_all+0xac>)
    1604:	4d24      	ldr	r5, [pc, #144]	; (1698 <grid_port_init_all+0xb0>)
    1606:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1608:	9402      	str	r4, [sp, #8]
    160a:	2312      	movs	r3, #18
    160c:	9301      	str	r3, [sp, #4]
    160e:	9400      	str	r4, [sp, #0]
    1610:	4b22      	ldr	r3, [pc, #136]	; (169c <grid_port_init_all+0xb4>)
    1612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1616:	4611      	mov	r1, r2
    1618:	4821      	ldr	r0, [pc, #132]	; (16a0 <grid_port_init_all+0xb8>)
    161a:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    161c:	f04f 0902 	mov.w	r9, #2
    1620:	f8cd 9008 	str.w	r9, [sp, #8]
    1624:	2313      	movs	r3, #19
    1626:	9301      	str	r3, [sp, #4]
    1628:	9400      	str	r4, [sp, #0]
    162a:	4b1e      	ldr	r3, [pc, #120]	; (16a4 <grid_port_init_all+0xbc>)
    162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1630:	4611      	mov	r1, r2
    1632:	481d      	ldr	r0, [pc, #116]	; (16a8 <grid_port_init_all+0xc0>)
    1634:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    1636:	2703      	movs	r7, #3
    1638:	9702      	str	r7, [sp, #8]
    163a:	2314      	movs	r3, #20
    163c:	9301      	str	r3, [sp, #4]
    163e:	9400      	str	r4, [sp, #0]
    1640:	4b1a      	ldr	r3, [pc, #104]	; (16ac <grid_port_init_all+0xc4>)
    1642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1646:	4611      	mov	r1, r2
    1648:	4819      	ldr	r0, [pc, #100]	; (16b0 <grid_port_init_all+0xc8>)
    164a:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1);
    164c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 16b8 <grid_port_init_all+0xd0>
    1650:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1654:	f8cd a008 	str.w	sl, [sp, #8]
    1658:	9601      	str	r6, [sp, #4]
    165a:	9700      	str	r7, [sp, #0]
    165c:	4633      	mov	r3, r6
    165e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1662:	4611      	mov	r1, r2
    1664:	4640      	mov	r0, r8
    1666:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    1668:	4f12      	ldr	r7, [pc, #72]	; (16b4 <grid_port_init_all+0xcc>)
    166a:	f8cd a008 	str.w	sl, [sp, #8]
    166e:	9601      	str	r6, [sp, #4]
    1670:	f8cd 9000 	str.w	r9, [sp]
    1674:	4633      	mov	r3, r6
    1676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    167a:	4611      	mov	r1, r2
    167c:	4638      	mov	r0, r7
    167e:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    1680:	f888 4513 	strb.w	r4, [r8, #1299]	; 0x513
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    1684:	f887 4513 	strb.w	r4, [r7, #1299]	; 0x513
	
	
}
    1688:	b004      	add	sp, #16
    168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    168e:	bf00      	nop
    1690:	200010d8 	.word	0x200010d8
    1694:	200012ac 	.word	0x200012ac
    1698:	00001505 	.word	0x00001505
    169c:	20001084 	.word	0x20001084
    16a0:	20003128 	.word	0x20003128
    16a4:	200011dc 	.word	0x200011dc
    16a8:	200026fc 	.word	0x200026fc
    16ac:	2000118c 	.word	0x2000118c
    16b0:	200021d4 	.word	0x200021d4
    16b4:	20002c14 	.word	0x20002c14
    16b8:	20001800 	.word	0x20001800

000016bc <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    16bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c0:	b093      	sub	sp, #76	; 0x4c
    16c2:	af02      	add	r7, sp, #8
    16c4:	4605      	mov	r5, r0
    16c6:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    16c8:	f200 43f4 	addw	r3, r0, #1268	; 0x4f4
    16cc:	60bb      	str	r3, [r7, #8]
    16ce:	4618      	mov	r0, r3
    16d0:	4b5d      	ldr	r3, [pc, #372]	; (1848 <grid_port_process_inbound+0x18c>)
    16d2:	4798      	blx	r3
	
	if (!packet_size){
    16d4:	b920      	cbnz	r0, 16e0 <grid_port_process_inbound+0x24>
    16d6:	2000      	movs	r0, #0
		}	

		
	}
		
}
    16d8:	3744      	adds	r7, #68	; 0x44
    16da:	46bd      	mov	sp, r7
    16dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16e0:	4680      	mov	r8, r0
	}else{
    16e2:	f8c7 d004 	str.w	sp, [r7, #4]
		port_array_default[0] = &GRID_PORT_N;
    16e6:	4b59      	ldr	r3, [pc, #356]	; (184c <grid_port_process_inbound+0x190>)
    16e8:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    16ea:	4b59      	ldr	r3, [pc, #356]	; (1850 <grid_port_process_inbound+0x194>)
    16ec:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    16ee:	4b59      	ldr	r3, [pc, #356]	; (1854 <grid_port_process_inbound+0x198>)
    16f0:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    16f2:	4b59      	ldr	r3, [pc, #356]	; (1858 <grid_port_process_inbound+0x19c>)
    16f4:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    16f6:	4b59      	ldr	r3, [pc, #356]	; (185c <grid_port_process_inbound+0x1a0>)
    16f8:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    16fa:	4b59      	ldr	r3, [pc, #356]	; (1860 <grid_port_process_inbound+0x1a4>)
    16fc:	627b      	str	r3, [r7, #36]	; 0x24
    16fe:	f107 0310 	add.w	r3, r7, #16
    1702:	f107 0128 	add.w	r1, r7, #40	; 0x28
		uint8_t j=0;
    1706:	2400      	movs	r4, #0
    1708:	e001      	b.n	170e <grid_port_process_inbound+0x52>
		for(uint8_t i=0; i<port_count; i++){
    170a:	428b      	cmp	r3, r1
    170c:	d00e      	beq.n	172c <grid_port_process_inbound+0x70>
			if (port_array_default[i]->partner_status != 0){
    170e:	f853 2b04 	ldr.w	r2, [r3], #4
    1712:	f892 0513 	ldrb.w	r0, [r2, #1299]	; 0x513
    1716:	2800      	cmp	r0, #0
    1718:	d0f7      	beq.n	170a <grid_port_process_inbound+0x4e>
				port_array[j] = port_array_default[i];
    171a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    171e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1722:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    1726:	3401      	adds	r4, #1
    1728:	b2e4      	uxtb	r4, r4
    172a:	e7ee      	b.n	170a <grid_port_process_inbound+0x4e>
		for (uint8_t i=0; i<port_count; i++)
    172c:	2c00      	cmp	r4, #0
    172e:	d079      	beq.n	1824 <grid_port_process_inbound+0x168>
    1730:	f107 0928 	add.w	r9, r7, #40	; 0x28
    1734:	1e66      	subs	r6, r4, #1
    1736:	b2f6      	uxtb	r6, r6
    1738:	3601      	adds	r6, #1
    173a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    173e:	f8df b140 	ldr.w	fp, [pc, #320]	; 1880 <grid_port_process_inbound+0x1c4>
    1742:	f8c7 900c 	str.w	r9, [r7, #12]
    1746:	e007      	b.n	1758 <grid_port_process_inbound+0x9c>
    1748:	f200 40dc 	addw	r0, r0, #1244	; 0x4dc
    174c:	47d8      	blx	fp
    174e:	4580      	cmp	r8, r0
    1750:	d80c      	bhi.n	176c <grid_port_process_inbound+0xb0>
		for (uint8_t i=0; i<port_count; i++)
    1752:	68fb      	ldr	r3, [r7, #12]
    1754:	42b3      	cmp	r3, r6
    1756:	d016      	beq.n	1786 <grid_port_process_inbound+0xca>
			if (port_array[i] != por || loopback){
    1758:	68fb      	ldr	r3, [r7, #12]
    175a:	f853 0b04 	ldr.w	r0, [r3], #4
    175e:	60fb      	str	r3, [r7, #12]
    1760:	4285      	cmp	r5, r0
    1762:	d1f1      	bne.n	1748 <grid_port_process_inbound+0x8c>
    1764:	f1ba 0f00 	cmp.w	sl, #0
    1768:	d0f3      	beq.n	1752 <grid_port_process_inbound+0x96>
    176a:	e7ed      	b.n	1748 <grid_port_process_inbound+0x8c>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    176c:	23c8      	movs	r3, #200	; 0xc8
    176e:	9301      	str	r3, [sp, #4]
    1770:	2302      	movs	r3, #2
    1772:	9300      	str	r3, [sp, #0]
    1774:	2300      	movs	r3, #0
    1776:	2264      	movs	r2, #100	; 0x64
    1778:	4611      	mov	r1, r2
    177a:	483a      	ldr	r0, [pc, #232]	; (1864 <grid_port_process_inbound+0x1a8>)
    177c:	4c3a      	ldr	r4, [pc, #232]	; (1868 <grid_port_process_inbound+0x1ac>)
    177e:	47a0      	blx	r4
    1780:	f8d7 d004 	ldr.w	sp, [r7, #4]
    1784:	e7a7      	b.n	16d6 <grid_port_process_inbound+0x1a>
    1786:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1788:	68b8      	ldr	r0, [r7, #8]
    178a:	4b38      	ldr	r3, [pc, #224]	; (186c <grid_port_process_inbound+0x1b0>)
    178c:	4798      	blx	r3
    178e:	4580      	cmp	r8, r0
    1790:	d000      	beq.n	1794 <grid_port_process_inbound+0xd8>
    1792:	e7fe      	b.n	1792 <grid_port_process_inbound+0xd6>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1794:	4e36      	ldr	r6, [pc, #216]	; (1870 <grid_port_process_inbound+0x1b4>)
    1796:	e004      	b.n	17a2 <grid_port_process_inbound+0xe6>
			if (port_array[i] != por || loopback){
    1798:	f1ba 0f00 	cmp.w	sl, #0
    179c:	d105      	bne.n	17aa <grid_port_process_inbound+0xee>
		for (uint8_t i=0; i<port_count; i++)
    179e:	45d9      	cmp	r9, fp
    17a0:	d045      	beq.n	182e <grid_port_process_inbound+0x172>
			if (port_array[i] != por || loopback){
    17a2:	f859 0b04 	ldr.w	r0, [r9], #4
    17a6:	4285      	cmp	r5, r0
    17a8:	d0f6      	beq.n	1798 <grid_port_process_inbound+0xdc>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    17aa:	4641      	mov	r1, r8
    17ac:	f200 40dc 	addw	r0, r0, #1244	; 0x4dc
    17b0:	47b0      	blx	r6
    17b2:	e7f4      	b.n	179e <grid_port_process_inbound+0xe2>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    17b4:	6879      	ldr	r1, [r7, #4]
    17b6:	f200 40dc 	addw	r0, r0, #1244	; 0x4dc
    17ba:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	42b3      	cmp	r3, r6
    17c0:	d007      	beq.n	17d2 <grid_port_process_inbound+0x116>
				if (port_array[i] != por || loopback){
    17c2:	f856 0b04 	ldr.w	r0, [r6], #4
    17c6:	4285      	cmp	r5, r0
    17c8:	d1f4      	bne.n	17b4 <grid_port_process_inbound+0xf8>
    17ca:	f1ba 0f00 	cmp.w	sl, #0
    17ce:	d0f5      	beq.n	17bc <grid_port_process_inbound+0x100>
    17d0:	e7f0      	b.n	17b4 <grid_port_process_inbound+0xf8>
    17d2:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    17d6:	fa1f f38b 	uxth.w	r3, fp
    17da:	4543      	cmp	r3, r8
    17dc:	d208      	bcs.n	17f0 <grid_port_process_inbound+0x134>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    17de:	68b8      	ldr	r0, [r7, #8]
    17e0:	4b24      	ldr	r3, [pc, #144]	; (1874 <grid_port_process_inbound+0x1b8>)
    17e2:	4798      	blx	r3
    17e4:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    17e6:	2c00      	cmp	r4, #0
    17e8:	d0f3      	beq.n	17d2 <grid_port_process_inbound+0x116>
    17ea:	f107 0628 	add.w	r6, r7, #40	; 0x28
    17ee:	e7e8      	b.n	17c2 <grid_port_process_inbound+0x106>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    17f0:	68b8      	ldr	r0, [r7, #8]
    17f2:	4b21      	ldr	r3, [pc, #132]	; (1878 <grid_port_process_inbound+0x1bc>)
    17f4:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    17f6:	2c00      	cmp	r4, #0
    17f8:	f43f af6e 	beq.w	16d8 <grid_port_process_inbound+0x1c>
    17fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1800:	4e1e      	ldr	r6, [pc, #120]	; (187c <grid_port_process_inbound+0x1c0>)
    1802:	68fb      	ldr	r3, [r7, #12]
    1804:	4698      	mov	r8, r3
    1806:	e005      	b.n	1814 <grid_port_process_inbound+0x158>
			if (port_array[i] != por || loopback){
    1808:	f1ba 0f00 	cmp.w	sl, #0
    180c:	d106      	bne.n	181c <grid_port_process_inbound+0x160>
		for (uint8_t i=0; i<port_count; i++)
    180e:	45a0      	cmp	r8, r4
    1810:	f43f af62 	beq.w	16d8 <grid_port_process_inbound+0x1c>
			if (port_array[i] != por || loopback){
    1814:	f854 0b04 	ldr.w	r0, [r4], #4
    1818:	4285      	cmp	r5, r0
    181a:	d0f5      	beq.n	1808 <grid_port_process_inbound+0x14c>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    181c:	f200 40dc 	addw	r0, r0, #1244	; 0x4dc
    1820:	47b0      	blx	r6
    1822:	e7f4      	b.n	180e <grid_port_process_inbound+0x152>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1824:	68b8      	ldr	r0, [r7, #8]
    1826:	4b11      	ldr	r3, [pc, #68]	; (186c <grid_port_process_inbound+0x1b0>)
    1828:	4798      	blx	r3
    182a:	4540      	cmp	r0, r8
    182c:	d1b1      	bne.n	1792 <grid_port_process_inbound+0xd6>
    182e:	1e63      	subs	r3, r4, #1
    1830:	b2db      	uxtb	r3, r3
    1832:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    183a:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    183c:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1840:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1884 <grid_port_process_inbound+0x1c8>
    1844:	60fb      	str	r3, [r7, #12]
    1846:	e7ca      	b.n	17de <grid_port_process_inbound+0x122>
    1848:	000013d1 	.word	0x000013d1
    184c:	200012ac 	.word	0x200012ac
    1850:	20003128 	.word	0x20003128
    1854:	200026fc 	.word	0x200026fc
    1858:	200021d4 	.word	0x200021d4
    185c:	20001800 	.word	0x20001800
    1860:	20002c14 	.word	0x20002c14
    1864:	20001d24 	.word	0x20001d24
    1868:	00003955 	.word	0x00003955
    186c:	00001443 	.word	0x00001443
    1870:	00001375 	.word	0x00001375
    1874:	000014cd 	.word	0x000014cd
    1878:	000014f5 	.word	0x000014f5
    187c:	000013c1 	.word	0x000013c1
    1880:	00001361 	.word	0x00001361
    1884:	000013a5 	.word	0x000013a5

00001888 <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    188c:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    1890:	af06      	add	r7, sp, #24
    1892:	62f8      	str	r0, [r7, #44]	; 0x2c
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1894:	f200 46dc 	addw	r6, r0, #1244	; 0x4dc
    1898:	4630      	mov	r0, r6
    189a:	4b7e      	ldr	r3, [pc, #504]	; (1a94 <grid_port_process_outbound_usb+0x20c>)
    189c:	4798      	blx	r3
	
	if (!length){		
    189e:	2800      	cmp	r0, #0
    18a0:	f000 8209 	beq.w	1cb6 <grid_port_process_outbound_usb+0x42e>
    18a4:	4604      	mov	r4, r0
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4613      	mov	r3, r2
    18aa:	332b      	adds	r3, #43	; 0x2b
    18ac:	f202 2183 	addw	r1, r2, #643	; 0x283


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    18b0:	2200      	movs	r2, #0
    18b2:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    18b6:	428b      	cmp	r3, r1
    18b8:	d1fb      	bne.n	18b2 <grid_port_process_outbound_usb+0x2a>
		}
		
		
		
		uint8_t temp[500] = {0};
    18ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    18be:	2100      	movs	r1, #0
    18c0:	f107 0034 	add.w	r0, r7, #52	; 0x34
    18c4:	4b74      	ldr	r3, [pc, #464]	; (1a98 <grid_port_process_outbound_usb+0x210>)
    18c6:	4798      	blx	r3
			
		
		//uint8_t temp[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    18c8:	4630      	mov	r0, r6
    18ca:	4b74      	ldr	r3, [pc, #464]	; (1a9c <grid_port_process_outbound_usb+0x214>)
    18cc:	4798      	blx	r3
    18ce:	2500      	movs	r5, #0
		
		for (uint8_t i = 0; i<length; i++){
			
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    18d0:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 1ad0 <grid_port_process_outbound_usb+0x248>
    18d4:	f107 0834 	add.w	r8, r7, #52	; 0x34
    18d8:	4630      	mov	r0, r6
    18da:	47c8      	blx	r9
    18dc:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    18e0:	3501      	adds	r5, #1
    18e2:	b2ed      	uxtb	r5, r5
    18e4:	b2ab      	uxth	r3, r5
    18e6:	429c      	cmp	r4, r3
    18e8:	d8f6      	bhi.n	18d8 <grid_port_process_outbound_usb+0x50>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    18ea:	4630      	mov	r0, r6
    18ec:	4b6c      	ldr	r3, [pc, #432]	; (1aa0 <grid_port_process_outbound_usb+0x218>)
    18ee:	4798      	blx	r3
		

		// GRID-2-HOST TRANSLATOR
		uint8_t id = grid_msg_get_id(temp);		
    18f0:	f107 0034 	add.w	r0, r7, #52	; 0x34
    18f4:	4b6b      	ldr	r3, [pc, #428]	; (1aa4 <grid_port_process_outbound_usb+0x21c>)
    18f6:	4798      	blx	r3
    18f8:	61f8      	str	r0, [r7, #28]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    18fa:	f107 0034 	add.w	r0, r7, #52	; 0x34
    18fe:	4b6a      	ldr	r3, [pc, #424]	; (1aa8 <grid_port_process_outbound_usb+0x220>)
    1900:	4798      	blx	r3
    1902:	4606      	mov	r6, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1904:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1908:	4b68      	ldr	r3, [pc, #416]	; (1aac <grid_port_process_outbound_usb+0x224>)
    190a:	4798      	blx	r3
    190c:	4680      	mov	r8, r0
		uint8_t age = grid_msg_get_age(temp);
    190e:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1912:	4b67      	ldr	r3, [pc, #412]	; (1ab0 <grid_port_process_outbound_usb+0x228>)
    1914:	4798      	blx	r3
    1916:	61b8      	str	r0, [r7, #24]
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		uint8_t output_cursor = 0;
		
		uint8_t error_flag = 0;
    1918:	2500      	movs	r5, #0
    191a:	f887 5033 	strb.w	r5, [r7, #51]	; 0x33
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    191e:	f1a8 087f 	sub.w	r8, r8, #127	; 0x7f
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
					
					
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    1922:	fa4f f388 	sxtb.w	r3, r8
    1926:	627b      	str	r3, [r7, #36]	; 0x24
    1928:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    192c:	009b      	lsls	r3, r3, #2
    192e:	60fb      	str	r3, [r7, #12]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1930:	3e7f      	subs	r6, #127	; 0x7f
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    1932:	b273      	sxtb	r3, r6
    1934:	623b      	str	r3, [r7, #32]
    1936:	015b      	lsls	r3, r3, #5
    1938:	60bb      	str	r3, [r7, #8]
    193a:	1e63      	subs	r3, r4, #1
    193c:	b29b      	uxth	r3, r3
    193e:	f103 0901 	add.w	r9, r3, #1
    1942:	46ab      	mov	fp, r5
    1944:	46aa      	mov	sl, r5
    1946:	e006      	b.n	1956 <grid_port_process_outbound_usb+0xce>
				current_start = i;
    1948:	fa5f f58b 	uxtb.w	r5, fp
    194c:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    1950:	45cb      	cmp	fp, r9
    1952:	f000 81ab 	beq.w	1cac <grid_port_process_outbound_usb+0x424>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1956:	f107 0334 	add.w	r3, r7, #52	; 0x34
    195a:	f81b 3003 	ldrb.w	r3, [fp, r3]
    195e:	2b02      	cmp	r3, #2
    1960:	d0f2      	beq.n	1948 <grid_port_process_outbound_usb+0xc0>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1962:	2b03      	cmp	r3, #3
    1964:	d1f2      	bne.n	194c <grid_port_process_outbound_usb+0xc4>
    1966:	2d00      	cmp	r5, #0
    1968:	d0f0      	beq.n	194c <grid_port_process_outbound_usb+0xc4>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    196a:	462c      	mov	r4, r5
    196c:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1970:	2102      	movs	r1, #2
    1972:	f507 730a 	add.w	r3, r7, #552	; 0x228
    1976:	1958      	adds	r0, r3, r5
    1978:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    197c:	4b4d      	ldr	r3, [pc, #308]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    197e:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1980:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1984:	d019      	beq.n	19ba <grid_port_process_outbound_usb+0x132>
								
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
					
									
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1986:	2e01      	cmp	r6, #1
    1988:	f000 80a4 	beq.w	1ad4 <grid_port_process_outbound_usb+0x24c>
					//usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
		
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    198c:	2e04      	cmp	r6, #4
    198e:	f000 811a 	beq.w	1bc6 <grid_port_process_outbound_usb+0x33e>

					}
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    1992:	2e02      	cmp	r6, #2
    1994:	f000 8188 	beq.w	1ca8 <grid_port_process_outbound_usb+0x420>
					
					//hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
					
				}	
				else{
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1998:	f10a 042c 	add.w	r4, sl, #44	; 0x2c
    199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    199e:	441c      	add	r4, r3
    19a0:	b2c2      	uxtb	r2, r0
    19a2:	4945      	ldr	r1, [pc, #276]	; (1ab8 <grid_port_process_outbound_usb+0x230>)
    19a4:	4620      	mov	r0, r4
    19a6:	4b45      	ldr	r3, [pc, #276]	; (1abc <grid_port_process_outbound_usb+0x234>)
    19a8:	4798      	blx	r3
					
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    19aa:	4620      	mov	r0, r4
    19ac:	4b44      	ldr	r3, [pc, #272]	; (1ac0 <grid_port_process_outbound_usb+0x238>)
    19ae:	4798      	blx	r3
    19b0:	4482      	add	sl, r0
    19b2:	fa5f fa8a 	uxtb.w	sl, sl
				}
				
				current_start = 0;
    19b6:	2500      	movs	r5, #0
    19b8:	e7c8      	b.n	194c <grid_port_process_outbound_usb+0xc4>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    19ba:	1ce8      	adds	r0, r5, #3
    19bc:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19c0:	2102      	movs	r1, #2
    19c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
    19c6:	4418      	add	r0, r3
    19c8:	4b3a      	ldr	r3, [pc, #232]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    19ca:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    19cc:	1d68      	adds	r0, r5, #5
    19ce:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19d2:	2102      	movs	r1, #2
    19d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    19d8:	4418      	add	r0, r3
    19da:	4b36      	ldr	r3, [pc, #216]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    19dc:	4798      	blx	r3
    19de:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    19e2:	1de8      	adds	r0, r5, #7
    19e4:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19e8:	2102      	movs	r1, #2
    19ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
    19ee:	4418      	add	r0, r3
    19f0:	4b30      	ldr	r3, [pc, #192]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    19f2:	4798      	blx	r3
    19f4:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    19f6:	f105 0009 	add.w	r0, r5, #9
    19fa:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19fe:	2102      	movs	r1, #2
    1a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a04:	4418      	add	r0, r3
    1a06:	4b2b      	ldr	r3, [pc, #172]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    1a08:	4798      	blx	r3
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    1a0a:	4b2e      	ldr	r3, [pc, #184]	; (1ac4 <grid_port_process_outbound_usb+0x23c>)
    1a0c:	7a59      	ldrb	r1, [r3, #9]
    1a0e:	68fb      	ldr	r3, [r7, #12]
    1a10:	4419      	add	r1, r3
    1a12:	424b      	negs	r3, r1
    1a14:	f001 020f 	and.w	r2, r1, #15
    1a18:	f003 030f 	and.w	r3, r3, #15
    1a1c:	bf58      	it	pl
    1a1e:	425a      	negpl	r2, r3
    1a20:	4611      	mov	r1, r2
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1a22:	f10a 032c 	add.w	r3, sl, #44	; 0x2c
    1a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a28:	18d3      	adds	r3, r2, r3
    1a2a:	461d      	mov	r5, r3
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    1a2c:	b2e4      	uxtb	r4, r4
    1a2e:	f504 7480 	add.w	r4, r4, #256	; 0x100
    1a32:	68ba      	ldr	r2, [r7, #8]
    1a34:	4414      	add	r4, r2
    1a36:	4263      	negs	r3, r4
    1a38:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1a40:	bf58      	it	pl
    1a42:	425c      	negpl	r4, r3
    1a44:	b2e4      	uxtb	r4, r4
    1a46:	b2c3      	uxtb	r3, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1a48:	617b      	str	r3, [r7, #20]
    1a4a:	9305      	str	r3, [sp, #20]
    1a4c:	9404      	str	r4, [sp, #16]
    1a4e:	f8cd 800c 	str.w	r8, [sp, #12]
    1a52:	62b9      	str	r1, [r7, #40]	; 0x28
    1a54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1a58:	9302      	str	r3, [sp, #8]
    1a5a:	69ba      	ldr	r2, [r7, #24]
    1a5c:	9201      	str	r2, [sp, #4]
    1a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a60:	9200      	str	r2, [sp, #0]
    1a62:	6a3b      	ldr	r3, [r7, #32]
    1a64:	69fa      	ldr	r2, [r7, #28]
    1a66:	4918      	ldr	r1, [pc, #96]	; (1ac8 <grid_port_process_outbound_usb+0x240>)
    1a68:	613d      	str	r5, [r7, #16]
    1a6a:	4628      	mov	r0, r5
    1a6c:	4d13      	ldr	r5, [pc, #76]	; (1abc <grid_port_process_outbound_usb+0x234>)
    1a6e:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1a70:	6938      	ldr	r0, [r7, #16]
    1a72:	4b13      	ldr	r3, [pc, #76]	; (1ac0 <grid_port_process_outbound_usb+0x238>)
    1a74:	4798      	blx	r3
    1a76:	4482      	add	sl, r0
    1a78:	fa5f fa8a 	uxtb.w	sl, sl
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1a7e:	ea48 0101 	orr.w	r1, r8, r1
    1a82:	697b      	ldr	r3, [r7, #20]
    1a84:	4622      	mov	r2, r4
    1a86:	b2c9      	uxtb	r1, r1
    1a88:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1a8c:	4c0f      	ldr	r4, [pc, #60]	; (1acc <grid_port_process_outbound_usb+0x244>)
    1a8e:	47a0      	blx	r4
				current_start = 0;
    1a90:	4635      	mov	r5, r6
    1a92:	e75b      	b.n	194c <grid_port_process_outbound_usb+0xc4>
    1a94:	000013d1 	.word	0x000013d1
    1a98:	0000bfbb 	.word	0x0000bfbb
    1a9c:	00001443 	.word	0x00001443
    1aa0:	000014f5 	.word	0x000014f5
    1aa4:	00003cb1 	.word	0x00003cb1
    1aa8:	00003cd1 	.word	0x00003cd1
    1aac:	00003cf1 	.word	0x00003cf1
    1ab0:	00003d11 	.word	0x00003d11
    1ab4:	000039a9 	.word	0x000039a9
    1ab8:	0000d524 	.word	0x0000d524
    1abc:	0000c3a9 	.word	0x0000c3a9
    1ac0:	0000c3f1 	.word	0x0000c3f1
    1ac4:	20001d24 	.word	0x20001d24
    1ac8:	0000d434 	.word	0x0000d434
    1acc:	0000aded 	.word	0x0000aded
    1ad0:	000014cd 	.word	0x000014cd
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1ad4:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1ad8:	fa5f f38b 	uxtb.w	r3, fp
    1adc:	1b5b      	subs	r3, r3, r5
    1ade:	1eda      	subs	r2, r3, #3
    1ae0:	4b77      	ldr	r3, [pc, #476]	; (1cc0 <grid_port_process_outbound_usb+0x438>)
    1ae2:	fb83 1302 	smull	r1, r3, r3, r2
    1ae6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    1aea:	b2db      	uxtb	r3, r3
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1aec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1af0:	3207      	adds	r2, #7
    1af2:	f022 0207 	bic.w	r2, r2, #7
    1af6:	ebad 0d02 	sub.w	sp, sp, r2
    1afa:	aa06      	add	r2, sp, #24
					for(uint8_t j=0; j<key_array_length; j++){
    1afc:	2b00      	cmp	r3, #0
    1afe:	d05e      	beq.n	1bbe <grid_port_process_outbound_usb+0x336>
    1b00:	3403      	adds	r4, #3
    1b02:	f107 0134 	add.w	r1, r7, #52	; 0x34
    1b06:	440c      	add	r4, r1
    1b08:	4690      	mov	r8, r2
    1b0a:	3b01      	subs	r3, #1
    1b0c:	b2db      	uxtb	r3, r3
    1b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b12:	3509      	adds	r5, #9
    1b14:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1b18:	18cb      	adds	r3, r1, r3
    1b1a:	617b      	str	r3, [r7, #20]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b1c:	f8c7 b004 	str.w	fp, [r7, #4]
    1b20:	f8c7 9000 	str.w	r9, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1b24:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1b28:	2102      	movs	r1, #2
    1b2a:	4620      	mov	r0, r4
    1b2c:	4b65      	ldr	r3, [pc, #404]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1b2e:	4798      	blx	r3
    1b30:	4605      	mov	r5, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1b32:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1b36:	2102      	movs	r1, #2
    1b38:	1860      	adds	r0, r4, r1
    1b3a:	4b62      	ldr	r3, [pc, #392]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1b3c:	4798      	blx	r3
    1b3e:	4606      	mov	r6, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1b40:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1b44:	2102      	movs	r1, #2
    1b46:	1d20      	adds	r0, r4, #4
    1b48:	4b5e      	ldr	r3, [pc, #376]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1b4a:	4798      	blx	r3
    1b4c:	4683      	mov	fp, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b4e:	f10a 092c 	add.w	r9, sl, #44	; 0x2c
    1b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b54:	4499      	add	r9, r3
    1b56:	4b5c      	ldr	r3, [pc, #368]	; (1cc8 <grid_port_process_outbound_usb+0x440>)
    1b58:	4798      	blx	r3
    1b5a:	9005      	str	r0, [sp, #20]
    1b5c:	b2eb      	uxtb	r3, r5
    1b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    1b60:	9304      	str	r3, [sp, #16]
    1b62:	b2f6      	uxtb	r6, r6
    1b64:	9603      	str	r6, [sp, #12]
    1b66:	fa5f f38b 	uxtb.w	r3, fp
    1b6a:	9302      	str	r3, [sp, #8]
    1b6c:	69bb      	ldr	r3, [r7, #24]
    1b6e:	9301      	str	r3, [sp, #4]
    1b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b72:	9300      	str	r3, [sp, #0]
    1b74:	6a3b      	ldr	r3, [r7, #32]
    1b76:	69fa      	ldr	r2, [r7, #28]
    1b78:	4954      	ldr	r1, [pc, #336]	; (1ccc <grid_port_process_outbound_usb+0x444>)
    1b7a:	4648      	mov	r0, r9
    1b7c:	4d54      	ldr	r5, [pc, #336]	; (1cd0 <grid_port_process_outbound_usb+0x448>)
    1b7e:	47a8      	blx	r5
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1b80:	4648      	mov	r0, r9
    1b82:	4b54      	ldr	r3, [pc, #336]	; (1cd4 <grid_port_process_outbound_usb+0x44c>)
    1b84:	4798      	blx	r3
    1b86:	4482      	add	sl, r0
    1b88:	fa5f fa8a 	uxtb.w	sl, sl
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1b8c:	f888 b000 	strb.w	fp, [r8]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1b90:	2e82      	cmp	r6, #130	; 0x82
    1b92:	bf14      	ite	ne
    1b94:	2600      	movne	r6, #0
    1b96:	2601      	moveq	r6, #1
						key_array[j] = current_key;
    1b98:	f888 6001 	strb.w	r6, [r8, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b9e:	2b80      	cmp	r3, #128	; 0x80
    1ba0:	bf14      	ite	ne
    1ba2:	2500      	movne	r5, #0
    1ba4:	2501      	moveq	r5, #1
    1ba6:	f888 5002 	strb.w	r5, [r8, #2]
    1baa:	3406      	adds	r4, #6
    1bac:	f108 0803 	add.w	r8, r8, #3
					for(uint8_t j=0; j<key_array_length; j++){
    1bb0:	697b      	ldr	r3, [r7, #20]
    1bb2:	429c      	cmp	r4, r3
    1bb4:	d1b6      	bne.n	1b24 <grid_port_process_outbound_usb+0x29c>
    1bb6:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1bba:	f8d7 9000 	ldr.w	r9, [r7]
    1bbe:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1bc2:	2500      	movs	r5, #0
    1bc4:	e6c2      	b.n	194c <grid_port_process_outbound_usb+0xc4>
					uint8_t sys_command		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1bc6:	1ce8      	adds	r0, r5, #3
    1bc8:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bcc:	2102      	movs	r1, #2
    1bce:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1bd2:	4418      	add	r0, r3
    1bd4:	4b3b      	ldr	r3, [pc, #236]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1bd6:	4798      	blx	r3
    1bd8:	62b8      	str	r0, [r7, #40]	; 0x28
    1bda:	b2c5      	uxtb	r5, r0
					uint8_t sys_subcommand  = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1bdc:	1d60      	adds	r0, r4, #5
    1bde:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1be2:	2102      	movs	r1, #2
    1be4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1be8:	4418      	add	r0, r3
    1bea:	4b36      	ldr	r3, [pc, #216]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1bec:	4798      	blx	r3
    1bee:	4680      	mov	r8, r0
    1bf0:	b2c6      	uxtb	r6, r0
					uint8_t sys_value	    = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1bf2:	1de0      	adds	r0, r4, #7
    1bf4:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bf8:	2102      	movs	r1, #2
    1bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1bfe:	4418      	add	r0, r3
    1c00:	4b30      	ldr	r3, [pc, #192]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1c02:	4798      	blx	r3
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c04:	2d64      	cmp	r5, #100	; 0x64
    1c06:	d003      	beq.n	1c10 <grid_port_process_outbound_usb+0x388>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1c08:	2d66      	cmp	r5, #102	; 0x66
    1c0a:	d025      	beq.n	1c58 <grid_port_process_outbound_usb+0x3d0>
				current_start = 0;
    1c0c:	2500      	movs	r5, #0
    1c0e:	e69d      	b.n	194c <grid_port_process_outbound_usb+0xc4>
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c10:	2e65      	cmp	r6, #101	; 0x65
    1c12:	d001      	beq.n	1c18 <grid_port_process_outbound_usb+0x390>
				current_start = 0;
    1c14:	2500      	movs	r5, #0
    1c16:	e699      	b.n	194c <grid_port_process_outbound_usb+0xc4>
    1c18:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_value);		
    1c1a:	4621      	mov	r1, r4
    1c1c:	482e      	ldr	r0, [pc, #184]	; (1cd8 <grid_port_process_outbound_usb+0x450>)
    1c1e:	4b2f      	ldr	r3, [pc, #188]	; (1cdc <grid_port_process_outbound_usb+0x454>)
    1c20:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1c22:	f10a 052c 	add.w	r5, sl, #44	; 0x2c
    1c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c28:	441d      	add	r5, r3
    1c2a:	9404      	str	r4, [sp, #16]
    1c2c:	9603      	str	r6, [sp, #12]
    1c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1c32:	9302      	str	r3, [sp, #8]
    1c34:	69bb      	ldr	r3, [r7, #24]
    1c36:	9301      	str	r3, [sp, #4]
    1c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c3a:	9300      	str	r3, [sp, #0]
    1c3c:	6a3b      	ldr	r3, [r7, #32]
    1c3e:	69fa      	ldr	r2, [r7, #28]
    1c40:	4927      	ldr	r1, [pc, #156]	; (1ce0 <grid_port_process_outbound_usb+0x458>)
    1c42:	4628      	mov	r0, r5
    1c44:	4c22      	ldr	r4, [pc, #136]	; (1cd0 <grid_port_process_outbound_usb+0x448>)
    1c46:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1c48:	4628      	mov	r0, r5
    1c4a:	4b22      	ldr	r3, [pc, #136]	; (1cd4 <grid_port_process_outbound_usb+0x44c>)
    1c4c:	4798      	blx	r3
    1c4e:	4482      	add	sl, r0
    1c50:	fa5f fa8a 	uxtb.w	sl, sl
				current_start = 0;
    1c54:	2500      	movs	r5, #0
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c56:	e679      	b.n	194c <grid_port_process_outbound_usb+0xc4>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1c58:	2e67      	cmp	r6, #103	; 0x67
    1c5a:	d001      	beq.n	1c60 <grid_port_process_outbound_usb+0x3d8>
				current_start = 0;
    1c5c:	2500      	movs	r5, #0
    1c5e:	e675      	b.n	194c <grid_port_process_outbound_usb+0xc4>
    1c60:	b2c5      	uxtb	r5, r0
						printf("{\"type\":\"HEARTBEAT\", \"data\": [\"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, sys_value);		
    1c62:	462b      	mov	r3, r5
    1c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1c66:	6a39      	ldr	r1, [r7, #32]
    1c68:	481e      	ldr	r0, [pc, #120]	; (1ce4 <grid_port_process_outbound_usb+0x45c>)
    1c6a:	4c1f      	ldr	r4, [pc, #124]	; (1ce8 <grid_port_process_outbound_usb+0x460>)
    1c6c:	47a0      	blx	r4
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1c6e:	f10a 062c 	add.w	r6, sl, #44	; 0x2c
    1c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c74:	4416      	add	r6, r2
    1c76:	9504      	str	r5, [sp, #16]
    1c78:	fa5f f388 	uxtb.w	r3, r8
    1c7c:	9303      	str	r3, [sp, #12]
    1c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1c82:	9302      	str	r3, [sp, #8]
    1c84:	69ba      	ldr	r2, [r7, #24]
    1c86:	9201      	str	r2, [sp, #4]
    1c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1c8a:	9200      	str	r2, [sp, #0]
    1c8c:	6a3b      	ldr	r3, [r7, #32]
    1c8e:	69fa      	ldr	r2, [r7, #28]
    1c90:	4913      	ldr	r1, [pc, #76]	; (1ce0 <grid_port_process_outbound_usb+0x458>)
    1c92:	4630      	mov	r0, r6
    1c94:	4c0e      	ldr	r4, [pc, #56]	; (1cd0 <grid_port_process_outbound_usb+0x448>)
    1c96:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1c98:	4630      	mov	r0, r6
    1c9a:	4b0e      	ldr	r3, [pc, #56]	; (1cd4 <grid_port_process_outbound_usb+0x44c>)
    1c9c:	4798      	blx	r3
    1c9e:	4482      	add	sl, r0
    1ca0:	fa5f fa8a 	uxtb.w	sl, sl
				current_start = 0;
    1ca4:	2500      	movs	r5, #0
    1ca6:	e651      	b.n	194c <grid_port_process_outbound_usb+0xc4>
    1ca8:	2500      	movs	r5, #0
    1caa:	e64f      	b.n	194c <grid_port_process_outbound_usb+0xc4>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1cac:	4651      	mov	r1, sl
    1cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1cb0:	302c      	adds	r0, #44	; 0x2c
    1cb2:	4b0e      	ldr	r3, [pc, #56]	; (1cec <grid_port_process_outbound_usb+0x464>)
    1cb4:	4798      	blx	r3
				
		
	}
	
	
}
    1cb6:	f507 770b 	add.w	r7, r7, #556	; 0x22c
    1cba:	46bd      	mov	sp, r7
    1cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cc0:	2aaaaaab 	.word	0x2aaaaaab
    1cc4:	000039a9 	.word	0x000039a9
    1cc8:	00003a21 	.word	0x00003a21
    1ccc:	0000d47c 	.word	0x0000d47c
    1cd0:	0000c3a9 	.word	0x0000c3a9
    1cd4:	0000c3f1 	.word	0x0000c3f1
    1cd8:	20001d24 	.word	0x20001d24
    1cdc:	00003b11 	.word	0x00003b11
    1ce0:	0000d4c4 	.word	0x0000d4c4
    1ce4:	0000d4f0 	.word	0x0000d4f0
    1ce8:	0000c125 	.word	0x0000c125
    1cec:	0000a629 	.word	0x0000a629

00001cf0 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cf4:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1cf8:	f200 46dc 	addw	r6, r0, #1244	; 0x4dc
    1cfc:	4630      	mov	r0, r6
    1cfe:	4b45      	ldr	r3, [pc, #276]	; (1e14 <grid_port_process_outbound_ui+0x124>)
    1d00:	4798      	blx	r3
	
	if (!length){
    1d02:	b918      	cbnz	r0, 1d0c <grid_port_process_outbound_ui+0x1c>

		
	}
	
	
}
    1d04:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    1d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d0c:	4605      	mov	r5, r0
		grid_buffer_read_init(&por->tx_buffer);
    1d0e:	4630      	mov	r0, r6
    1d10:	4b41      	ldr	r3, [pc, #260]	; (1e18 <grid_port_process_outbound_ui+0x128>)
    1d12:	4798      	blx	r3
    1d14:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1d16:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1e38 <grid_port_process_outbound_ui+0x148>
    1d1a:	af05      	add	r7, sp, #20
    1d1c:	4630      	mov	r0, r6
    1d1e:	47c0      	blx	r8
    1d20:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<length; i++){
    1d22:	3401      	adds	r4, #1
    1d24:	b2e4      	uxtb	r4, r4
    1d26:	b2a3      	uxth	r3, r4
    1d28:	429d      	cmp	r5, r3
    1d2a:	d8f7      	bhi.n	1d1c <grid_port_process_outbound_ui+0x2c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1d2c:	4630      	mov	r0, r6
    1d2e:	4b3b      	ldr	r3, [pc, #236]	; (1e1c <grid_port_process_outbound_ui+0x12c>)
    1d30:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);
    1d32:	ac05      	add	r4, sp, #20
    1d34:	4620      	mov	r0, r4
    1d36:	4b3a      	ldr	r3, [pc, #232]	; (1e20 <grid_port_process_outbound_ui+0x130>)
    1d38:	4798      	blx	r3
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1d3a:	4620      	mov	r0, r4
    1d3c:	4b39      	ldr	r3, [pc, #228]	; (1e24 <grid_port_process_outbound_ui+0x134>)
    1d3e:	4798      	blx	r3
    1d40:	4681      	mov	r9, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;
    1d42:	4620      	mov	r0, r4
    1d44:	4b38      	ldr	r3, [pc, #224]	; (1e28 <grid_port_process_outbound_ui+0x138>)
    1d46:	4798      	blx	r3
    1d48:	4682      	mov	sl, r0
		uint8_t age = grid_msg_get_age(temp);
    1d4a:	4620      	mov	r0, r4
    1d4c:	4b37      	ldr	r3, [pc, #220]	; (1e2c <grid_port_process_outbound_ui+0x13c>)
    1d4e:	4798      	blx	r3
		uint8_t error_flag = 0;	
    1d50:	2000      	movs	r0, #0
    1d52:	f88d 0013 	strb.w	r0, [sp, #19]
    1d56:	4626      	mov	r6, r4
    1d58:	3d01      	subs	r5, #1
    1d5a:	b2ad      	uxth	r5, r5
    1d5c:	3501      	adds	r5, #1
    1d5e:	4425      	add	r5, r4
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1d60:	4f33      	ldr	r7, [pc, #204]	; (1e30 <grid_port_process_outbound_ui+0x140>)
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1d62:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1e3c <grid_port_process_outbound_ui+0x14c>
    1d66:	e004      	b.n	1d72 <grid_port_process_outbound_ui+0x82>
    1d68:	1ba0      	subs	r0, r4, r6
    1d6a:	b2c0      	uxtb	r0, r0
    1d6c:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    1d6e:	42ac      	cmp	r4, r5
    1d70:	d0c8      	beq.n	1d04 <grid_port_process_outbound_ui+0x14>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1d72:	7823      	ldrb	r3, [r4, #0]
    1d74:	2b02      	cmp	r3, #2
    1d76:	d0f7      	beq.n	1d68 <grid_port_process_outbound_ui+0x78>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1d78:	2b03      	cmp	r3, #3
    1d7a:	d1f7      	bne.n	1d6c <grid_port_process_outbound_ui+0x7c>
    1d7c:	2800      	cmp	r0, #0
    1d7e:	d0f5      	beq.n	1d6c <grid_port_process_outbound_ui+0x7c>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1d80:	4680      	mov	r8, r0
    1d82:	ab82      	add	r3, sp, #520	; 0x208
    1d84:	4418      	add	r0, r3
    1d86:	f10d 0213 	add.w	r2, sp, #19
    1d8a:	2102      	movs	r1, #2
    1d8c:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    1d90:	47b8      	blx	r7
				if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    1d92:	b2c0      	uxtb	r0, r0
    1d94:	2803      	cmp	r0, #3
    1d96:	d001      	beq.n	1d9c <grid_port_process_outbound_ui+0xac>
				current_start = 0;
    1d98:	2000      	movs	r0, #0
    1d9a:	e7e7      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
					if (dx == 0 && dy == 0){
    1d9c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    1da0:	d136      	bne.n	1e10 <grid_port_process_outbound_ui+0x120>
    1da2:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    1da6:	d001      	beq.n	1dac <grid_port_process_outbound_ui+0xbc>
				current_start = 0;
    1da8:	2000      	movs	r0, #0
    1daa:	e7df      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1dac:	f108 0003 	add.w	r0, r8, #3
    1db0:	f10d 0213 	add.w	r2, sp, #19
    1db4:	2102      	movs	r1, #2
    1db6:	ab05      	add	r3, sp, #20
    1db8:	4418      	add	r0, r3
    1dba:	47b8      	blx	r7
    1dbc:	9002      	str	r0, [sp, #8]
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1dbe:	f108 0005 	add.w	r0, r8, #5
    1dc2:	f10d 0213 	add.w	r2, sp, #19
    1dc6:	2102      	movs	r1, #2
    1dc8:	ab05      	add	r3, sp, #20
    1dca:	4418      	add	r0, r3
    1dcc:	47b8      	blx	r7
    1dce:	9001      	str	r0, [sp, #4]
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1dd0:	f108 0007 	add.w	r0, r8, #7
    1dd4:	f10d 0213 	add.w	r2, sp, #19
    1dd8:	2102      	movs	r1, #2
    1dda:	ab05      	add	r3, sp, #20
    1ddc:	4418      	add	r0, r3
    1dde:	47b8      	blx	r7
    1de0:	9003      	str	r0, [sp, #12]
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1de2:	f108 0009 	add.w	r0, r8, #9
    1de6:	f10d 0213 	add.w	r2, sp, #19
    1dea:	2102      	movs	r1, #2
    1dec:	ab05      	add	r3, sp, #20
    1dee:	4418      	add	r0, r3
    1df0:	47b8      	blx	r7
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1df2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1df6:	2a63      	cmp	r2, #99	; 0x63
    1df8:	d001      	beq.n	1dfe <grid_port_process_outbound_ui+0x10e>
				current_start = 0;
    1dfa:	2000      	movs	r0, #0
    1dfc:	e7b6      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1dfe:	b2c3      	uxtb	r3, r0
    1e00:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e04:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1e08:	480a      	ldr	r0, [pc, #40]	; (1e34 <grid_port_process_outbound_ui+0x144>)
    1e0a:	47d8      	blx	fp
				current_start = 0;
    1e0c:	2000      	movs	r0, #0
    1e0e:	e7ad      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
    1e10:	2000      	movs	r0, #0
    1e12:	e7ab      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
    1e14:	000013d1 	.word	0x000013d1
    1e18:	00001443 	.word	0x00001443
    1e1c:	000014f5 	.word	0x000014f5
    1e20:	00003cb1 	.word	0x00003cb1
    1e24:	00003cd1 	.word	0x00003cd1
    1e28:	00003cf1 	.word	0x00003cf1
    1e2c:	00003d11 	.word	0x00003d11
    1e30:	000039a9 	.word	0x000039a9
    1e34:	20003640 	.word	0x20003640
    1e38:	000014cd 	.word	0x000014cd
    1e3c:	00002049 	.word	0x00002049

00001e40 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1e40:	8983      	ldrh	r3, [r0, #12]
    1e42:	b103      	cbz	r3, 1e46 <grid_port_process_outbound_usart+0x6>
    1e44:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e4a:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1e4c:	f200 46dc 	addw	r6, r0, #1244	; 0x4dc
    1e50:	4630      	mov	r0, r6
    1e52:	4b11      	ldr	r3, [pc, #68]	; (1e98 <grid_port_process_outbound_usart+0x58>)
    1e54:	4798      	blx	r3
    1e56:	4604      	mov	r4, r0
    1e58:	4607      	mov	r7, r0
		
		if (!packet_size){
    1e5a:	b910      	cbnz	r0, 1e62 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1e5c:	2000      	movs	r0, #0
    1e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1e62:	4630      	mov	r0, r6
    1e64:	4b0d      	ldr	r3, [pc, #52]	; (1e9c <grid_port_process_outbound_usart+0x5c>)
    1e66:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1e68:	81ac      	strh	r4, [r5, #12]
    1e6a:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1e6c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1ea8 <grid_port_process_outbound_usart+0x68>
    1e70:	4630      	mov	r0, r6
    1e72:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1e74:	192b      	adds	r3, r5, r4
    1e76:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
			for (uint8_t i = 0; i<packet_size; i++){
    1e7a:	3401      	adds	r4, #1
    1e7c:	b2e4      	uxtb	r4, r4
    1e7e:	42a7      	cmp	r7, r4
    1e80:	d8f6      	bhi.n	1e70 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1e82:	4630      	mov	r0, r6
    1e84:	4b06      	ldr	r3, [pc, #24]	; (1ea0 <grid_port_process_outbound_usart+0x60>)
    1e86:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1e88:	89aa      	ldrh	r2, [r5, #12]
    1e8a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    1e8e:	6868      	ldr	r0, [r5, #4]
    1e90:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <grid_port_process_outbound_usart+0x64>)
    1e92:	4798      	blx	r3
			
		}
		
	}
	
}
    1e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e98:	000013d1 	.word	0x000013d1
    1e9c:	00001443 	.word	0x00001443
    1ea0:	000014f5 	.word	0x000014f5
    1ea4:	00004961 	.word	0x00004961
    1ea8:	000014cd 	.word	0x000014cd

00001eac <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1eac:	2201      	movs	r2, #1
    1eae:	4b01      	ldr	r3, [pc, #4]	; (1eb4 <grid_led_hardware_transfer_complete_cb+0x8>)
    1eb0:	701a      	strb	r2, [r3, #0]
    1eb2:	4770      	bx	lr
    1eb4:	200012a8 	.word	0x200012a8

00001eb8 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1eb8:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1eba:	7844      	ldrb	r4, [r0, #1]
    1ebc:	428c      	cmp	r4, r1
    1ebe:	d802      	bhi.n	1ec6 <grid_led_set_color+0xe>
		return -1;		
    1ec0:	20ff      	movs	r0, #255	; 0xff
}
    1ec2:	bc30      	pop	{r4, r5}
    1ec4:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1ec6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1eca:	0089      	lsls	r1, r1, #2
    1ecc:	4c09      	ldr	r4, [pc, #36]	; (1ef4 <grid_led_set_color+0x3c>)
    1ece:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1ed2:	68c3      	ldr	r3, [r0, #12]
    1ed4:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1ed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1eda:	68c3      	ldr	r3, [r0, #12]
    1edc:	440b      	add	r3, r1
    1ede:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1ee0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1ee4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1ee8:	68c3      	ldr	r3, [r0, #12]
    1eea:	4419      	add	r1, r3
    1eec:	608a      	str	r2, [r1, #8]
		return 0;
    1eee:	2000      	movs	r0, #0
    1ef0:	e7e7      	b.n	1ec2 <grid_led_set_color+0xa>
    1ef2:	bf00      	nop
    1ef4:	20001dc4 	.word	0x20001dc4

00001ef8 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1ef8:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1efa:	4c06      	ldr	r4, [pc, #24]	; (1f14 <grid_led_hardware_init+0x1c>)
    1efc:	f100 0114 	add.w	r1, r0, #20
    1f00:	4620      	mov	r0, r4
    1f02:	4b05      	ldr	r3, [pc, #20]	; (1f18 <grid_led_hardware_init+0x20>)
    1f04:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1f06:	4a05      	ldr	r2, [pc, #20]	; (1f1c <grid_led_hardware_init+0x24>)
    1f08:	2100      	movs	r1, #0
    1f0a:	4620      	mov	r0, r4
    1f0c:	4b04      	ldr	r3, [pc, #16]	; (1f20 <grid_led_hardware_init+0x28>)
    1f0e:	4798      	blx	r3
    1f10:	bd10      	pop	{r4, pc}
    1f12:	bf00      	nop
    1f14:	20001128 	.word	0x20001128
    1f18:	00004eb9 	.word	0x00004eb9
    1f1c:	00001ead 	.word	0x00001ead
    1f20:	00004e89 	.word	0x00004e89

00001f24 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1f24:	7840      	ldrb	r0, [r0, #1]
    1f26:	4770      	bx	lr

00001f28 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1f28:	7843      	ldrb	r3, [r0, #1]
    1f2a:	b1f3      	cbz	r3, 1f6a <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1f2c:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1f2e:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1f30:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1f34:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1f38:	6902      	ldr	r2, [r0, #16]
    1f3a:	440a      	add	r2, r1
    1f3c:	7ad1      	ldrb	r1, [r2, #11]
    1f3e:	7b14      	ldrb	r4, [r2, #12]
    1f40:	4421      	add	r1, r4
    1f42:	72d1      	strb	r1, [r2, #11]
    1f44:	7842      	ldrb	r2, [r0, #1]
    1f46:	441a      	add	r2, r3
    1f48:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1f4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1f50:	6901      	ldr	r1, [r0, #16]
    1f52:	440a      	add	r2, r1
    1f54:	7ad1      	ldrb	r1, [r2, #11]
    1f56:	7b14      	ldrb	r4, [r2, #12]
    1f58:	4421      	add	r1, r4
    1f5a:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1f5c:	3301      	adds	r3, #1
    1f5e:	b2db      	uxtb	r3, r3
    1f60:	7842      	ldrb	r2, [r0, #1]
    1f62:	429a      	cmp	r2, r3
    1f64:	d8e4      	bhi.n	1f30 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1f66:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f6a:	4770      	bx	lr

00001f6c <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1f6c:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1f6e:	7844      	ldrb	r4, [r0, #1]
    1f70:	fb02 1404 	mla	r4, r2, r4, r1
    1f74:	6905      	ldr	r5, [r0, #16]
    1f76:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1f7a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1f7e:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1f80:	7843      	ldrb	r3, [r0, #1]
    1f82:	fb02 1303 	mla	r3, r2, r3, r1
    1f86:	6904      	ldr	r4, [r0, #16]
    1f88:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1f8c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1f90:	4423      	add	r3, r4
    1f92:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1f96:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1f98:	7843      	ldrb	r3, [r0, #1]
    1f9a:	fb02 1203 	mla	r2, r2, r3, r1
    1f9e:	6903      	ldr	r3, [r0, #16]
    1fa0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1fa4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1fa8:	441a      	add	r2, r3
    1faa:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1fae:	7093      	strb	r3, [r2, #2]
}
    1fb0:	bc70      	pop	{r4, r5, r6}
    1fb2:	4770      	bx	lr

00001fb4 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1fb4:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1fb6:	7844      	ldrb	r4, [r0, #1]
    1fb8:	fb02 1404 	mla	r4, r2, r4, r1
    1fbc:	6905      	ldr	r5, [r0, #16]
    1fbe:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1fc2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1fc6:	442c      	add	r4, r5
    1fc8:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1fca:	7843      	ldrb	r3, [r0, #1]
    1fcc:	fb02 1303 	mla	r3, r2, r3, r1
    1fd0:	6904      	ldr	r4, [r0, #16]
    1fd2:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1fd6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1fda:	4423      	add	r3, r4
    1fdc:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1fe0:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1fe2:	7843      	ldrb	r3, [r0, #1]
    1fe4:	fb02 1203 	mla	r2, r2, r3, r1
    1fe8:	6903      	ldr	r3, [r0, #16]
    1fea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1fee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1ff2:	441a      	add	r2, r3
    1ff4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1ff8:	7153      	strb	r3, [r2, #5]
}
    1ffa:	bc70      	pop	{r4, r5, r6}
    1ffc:	4770      	bx	lr

00001ffe <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1ffe:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    2000:	7844      	ldrb	r4, [r0, #1]
    2002:	fb02 1404 	mla	r4, r2, r4, r1
    2006:	6905      	ldr	r5, [r0, #16]
    2008:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    200c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2010:	442c      	add	r4, r5
    2012:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    2014:	7843      	ldrb	r3, [r0, #1]
    2016:	fb02 1303 	mla	r3, r2, r3, r1
    201a:	6904      	ldr	r4, [r0, #16]
    201c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2020:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2024:	4423      	add	r3, r4
    2026:	f89d 400c 	ldrb.w	r4, [sp, #12]
    202a:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    202c:	7843      	ldrb	r3, [r0, #1]
    202e:	fb02 1203 	mla	r2, r2, r3, r1
    2032:	6903      	ldr	r3, [r0, #16]
    2034:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2038:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    203c:	441a      	add	r2, r3
    203e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2042:	7213      	strb	r3, [r2, #8]
}
    2044:	bc70      	pop	{r4, r5, r6}
    2046:	4770      	bx	lr

00002048 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    2048:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    204a:	7844      	ldrb	r4, [r0, #1]
    204c:	fb02 1204 	mla	r2, r2, r4, r1
    2050:	6901      	ldr	r1, [r0, #16]
    2052:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2056:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    205a:	440a      	add	r2, r1
    205c:	72d3      	strb	r3, [r2, #11]
}
    205e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2062:	4770      	bx	lr

00002064 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    2064:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    2066:	7844      	ldrb	r4, [r0, #1]
    2068:	fb02 1204 	mla	r2, r2, r4, r1
    206c:	6901      	ldr	r1, [r0, #16]
    206e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2072:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2076:	440a      	add	r2, r1
    2078:	7313      	strb	r3, [r2, #12]
}
    207a:	f85d 4b04 	ldr.w	r4, [sp], #4
    207e:	4770      	bx	lr

00002080 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    2080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2084:	b083      	sub	sp, #12
    2086:	4604      	mov	r4, r0
	mod->led_number = length;
    2088:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    208a:	b2cd      	uxtb	r5, r1
    208c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2090:	0080      	lsls	r0, r0, #2
    2092:	3090      	adds	r0, #144	; 0x90
    2094:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    2096:	4f3e      	ldr	r7, [pc, #248]	; (2190 <grid_led_buffer_init+0x110>)
    2098:	47b8      	blx	r7
    209a:	4606      	mov	r6, r0
    209c:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    209e:	f100 0390 	add.w	r3, r0, #144	; 0x90
    20a2:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    20a4:	201a      	movs	r0, #26
    20a6:	fb00 f005 	mul.w	r0, r0, r5
    20aa:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    20ac:	2e00      	cmp	r6, #0
    20ae:	d06e      	beq.n	218e <grid_led_buffer_init+0x10e>
    20b0:	2800      	cmp	r0, #0
    20b2:	d06c      	beq.n	218e <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    20b4:	6120      	str	r0, [r4, #16]
    20b6:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    20b8:	4619      	mov	r1, r3
    20ba:	68a2      	ldr	r2, [r4, #8]
    20bc:	54d1      	strb	r1, [r2, r3]
    20be:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    20c0:	2b90      	cmp	r3, #144	; 0x90
    20c2:	d1fa      	bne.n	20ba <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    20c4:	7863      	ldrb	r3, [r4, #1]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d05e      	beq.n	2188 <grid_led_buffer_init+0x108>
    20ca:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    20cc:	462e      	mov	r6, r5
    20ce:	4f31      	ldr	r7, [pc, #196]	; (2194 <grid_led_buffer_init+0x114>)
    20d0:	9600      	str	r6, [sp, #0]
    20d2:	4633      	mov	r3, r6
    20d4:	4632      	mov	r2, r6
    20d6:	4629      	mov	r1, r5
    20d8:	4620      	mov	r0, r4
    20da:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    20dc:	3501      	adds	r5, #1
    20de:	7863      	ldrb	r3, [r4, #1]
    20e0:	42ab      	cmp	r3, r5
    20e2:	d8f5      	bhi.n	20d0 <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    20e4:	2b00      	cmp	r3, #0
    20e6:	d04f      	beq.n	2188 <grid_led_buffer_init+0x108>
    20e8:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    20ea:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 219c <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    20ee:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 21a0 <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    20f2:	2500      	movs	r5, #0
    20f4:	9501      	str	r5, [sp, #4]
    20f6:	9500      	str	r5, [sp, #0]
    20f8:	462b      	mov	r3, r5
    20fa:	462a      	mov	r2, r5
    20fc:	4631      	mov	r1, r6
    20fe:	4620      	mov	r0, r4
    2100:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    2102:	9501      	str	r5, [sp, #4]
    2104:	237f      	movs	r3, #127	; 0x7f
    2106:	9300      	str	r3, [sp, #0]
    2108:	462b      	mov	r3, r5
    210a:	462a      	mov	r2, r5
    210c:	4631      	mov	r1, r6
    210e:	4620      	mov	r0, r4
    2110:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    2112:	9501      	str	r5, [sp, #4]
    2114:	23ff      	movs	r3, #255	; 0xff
    2116:	9300      	str	r3, [sp, #0]
    2118:	462b      	mov	r3, r5
    211a:	462a      	mov	r2, r5
    211c:	4631      	mov	r1, r6
    211e:	4620      	mov	r0, r4
    2120:	f8df 9080 	ldr.w	r9, [pc, #128]	; 21a4 <grid_led_buffer_init+0x124>
    2124:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    2126:	462b      	mov	r3, r5
    2128:	462a      	mov	r2, r5
    212a:	4631      	mov	r1, r6
    212c:	4620      	mov	r0, r4
    212e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 21a8 <grid_led_buffer_init+0x128>
    2132:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    2134:	462b      	mov	r3, r5
    2136:	462a      	mov	r2, r5
    2138:	4631      	mov	r1, r6
    213a:	4620      	mov	r0, r4
    213c:	4f16      	ldr	r7, [pc, #88]	; (2198 <grid_led_buffer_init+0x118>)
    213e:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    2140:	9501      	str	r5, [sp, #4]
    2142:	9500      	str	r5, [sp, #0]
    2144:	462b      	mov	r3, r5
    2146:	2201      	movs	r2, #1
    2148:	4631      	mov	r1, r6
    214a:	4620      	mov	r0, r4
    214c:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    214e:	9501      	str	r5, [sp, #4]
    2150:	9500      	str	r5, [sp, #0]
    2152:	462b      	mov	r3, r5
    2154:	2201      	movs	r2, #1
    2156:	4631      	mov	r1, r6
    2158:	4620      	mov	r0, r4
    215a:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    215c:	9501      	str	r5, [sp, #4]
    215e:	9500      	str	r5, [sp, #0]
    2160:	462b      	mov	r3, r5
    2162:	2201      	movs	r2, #1
    2164:	4631      	mov	r1, r6
    2166:	4620      	mov	r0, r4
    2168:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    216a:	462b      	mov	r3, r5
    216c:	2201      	movs	r2, #1
    216e:	4631      	mov	r1, r6
    2170:	4620      	mov	r0, r4
    2172:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    2174:	462b      	mov	r3, r5
    2176:	2201      	movs	r2, #1
    2178:	4631      	mov	r1, r6
    217a:	4620      	mov	r0, r4
    217c:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    217e:	3601      	adds	r6, #1
    2180:	b2f6      	uxtb	r6, r6
    2182:	7863      	ldrb	r3, [r4, #1]
    2184:	42b3      	cmp	r3, r6
    2186:	d8b4      	bhi.n	20f2 <grid_led_buffer_init+0x72>
}
    2188:	b003      	add	sp, #12
    218a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    218e:	e7fe      	b.n	218e <grid_led_buffer_init+0x10e>
    2190:	0000bf95 	.word	0x0000bf95
    2194:	00001eb9 	.word	0x00001eb9
    2198:	00002049 	.word	0x00002049
    219c:	00001f6d 	.word	0x00001f6d
    21a0:	00001fb5 	.word	0x00001fb5
    21a4:	00001fff 	.word	0x00001fff
    21a8:	00002065 	.word	0x00002065

000021ac <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    21ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b0:	b083      	sub	sp, #12
    21b2:	f890 c001 	ldrb.w	ip, [r0, #1]
    21b6:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    21ba:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    21be:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    21c2:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    21c6:	6904      	ldr	r4, [r0, #16]
    21c8:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    21ca:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    21cc:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    21d0:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    21d2:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    21d4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 225c <grid_led_render+0xb0>
    21d8:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    21da:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    21de:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    21e0:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    21e4:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    21e8:	f894 a000 	ldrb.w	sl, [r4]
    21ec:	f894 b003 	ldrb.w	fp, [r4, #3]
    21f0:	fb05 fb0b 	mul.w	fp, r5, fp
    21f4:	fb09 bb0a 	mla	fp, r9, sl, fp
    21f8:	f894 a006 	ldrb.w	sl, [r4, #6]
    21fc:	fb06 ba0a 	mla	sl, r6, sl, fp
    2200:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2202:	f894 a001 	ldrb.w	sl, [r4, #1]
    2206:	f894 b004 	ldrb.w	fp, [r4, #4]
    220a:	fb05 fb0b 	mul.w	fp, r5, fp
    220e:	fb09 bb0a 	mla	fp, r9, sl, fp
    2212:	f894 a007 	ldrb.w	sl, [r4, #7]
    2216:	fb06 ba0a 	mla	sl, r6, sl, fp
    221a:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    221c:	f894 a002 	ldrb.w	sl, [r4, #2]
    2220:	f894 b005 	ldrb.w	fp, [r4, #5]
    2224:	fb05 f50b 	mul.w	r5, r5, fp
    2228:	fb09 590a 	mla	r9, r9, sl, r5
    222c:	7a25      	ldrb	r5, [r4, #8]
    222e:	fb06 9505 	mla	r5, r6, r5, r9
    2232:	44ae      	add	lr, r5
    2234:	3f01      	subs	r7, #1
    2236:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    2238:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    223c:	d1cc      	bne.n	21d8 <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    223e:	f3ce 2447 	ubfx	r4, lr, #9, #8
    2242:	9400      	str	r4, [sp, #0]
    2244:	f3c3 2347 	ubfx	r3, r3, #9, #8
    2248:	f3c2 2247 	ubfx	r2, r2, #9, #8
    224c:	4c02      	ldr	r4, [pc, #8]	; (2258 <grid_led_render+0xac>)
    224e:	47a0      	blx	r4
	
}
    2250:	b003      	add	sp, #12
    2252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2256:	bf00      	nop
    2258:	00001eb9 	.word	0x00001eb9
    225c:	20000000 	.word	0x20000000

00002260 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2260:	7843      	ldrb	r3, [r0, #1]
    2262:	b15b      	cbz	r3, 227c <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    2264:	b570      	push	{r4, r5, r6, lr}
    2266:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    2268:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    226a:	4e05      	ldr	r6, [pc, #20]	; (2280 <grid_led_render_all+0x20>)
    226c:	4621      	mov	r1, r4
    226e:	4628      	mov	r0, r5
    2270:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    2272:	3401      	adds	r4, #1
    2274:	786b      	ldrb	r3, [r5, #1]
    2276:	42a3      	cmp	r3, r4
    2278:	d8f8      	bhi.n	226c <grid_led_render_all+0xc>
    227a:	bd70      	pop	{r4, r5, r6, pc}
    227c:	4770      	bx	lr
    227e:	bf00      	nop
    2280:	000021ad 	.word	0x000021ad

00002284 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    2284:	b510      	push	{r4, lr}
    2286:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2288:	2200      	movs	r2, #0
    228a:	4b08      	ldr	r3, [pc, #32]	; (22ac <grid_led_hardware_start_transfer_blocking+0x28>)
    228c:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    228e:	4808      	ldr	r0, [pc, #32]	; (22b0 <grid_led_hardware_start_transfer_blocking+0x2c>)
    2290:	4b08      	ldr	r3, [pc, #32]	; (22b4 <grid_led_hardware_start_transfer_blocking+0x30>)
    2292:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2294:	88a2      	ldrh	r2, [r4, #4]
    2296:	68a1      	ldr	r1, [r4, #8]
    2298:	6960      	ldr	r0, [r4, #20]
    229a:	4b07      	ldr	r3, [pc, #28]	; (22b8 <grid_led_hardware_start_transfer_blocking+0x34>)
    229c:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    229e:	4a03      	ldr	r2, [pc, #12]	; (22ac <grid_led_hardware_start_transfer_blocking+0x28>)
    22a0:	7813      	ldrb	r3, [r2, #0]
    22a2:	b2db      	uxtb	r3, r3
    22a4:	2b01      	cmp	r3, #1
    22a6:	d1fb      	bne.n	22a0 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    22a8:	bd10      	pop	{r4, pc}
    22aa:	bf00      	nop
    22ac:	200012a8 	.word	0x200012a8
    22b0:	20001128 	.word	0x20001128
    22b4:	00004e61 	.word	0x00004e61
    22b8:	00004961 	.word	0x00004961

000022bc <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    22bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22c0:	b085      	sub	sp, #20
    22c2:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    22c4:	4b20      	ldr	r3, [pc, #128]	; (2348 <grid_led_startup_animation+0x8c>)
    22c6:	781b      	ldrb	r3, [r3, #0]
    22c8:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    22ca:	2b20      	cmp	r3, #32
    22cc:	d00a      	beq.n	22e4 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    22ce:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    22d2:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    22d6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    22da:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    22de:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2354 <grid_led_startup_animation+0x98>
    22e2:	e01e      	b.n	2322 <grid_led_startup_animation+0x66>
		s= 2;
    22e4:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    22e8:	2300      	movs	r3, #0
    22ea:	9303      	str	r3, [sp, #12]
    22ec:	e7f3      	b.n	22d6 <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    22ee:	9500      	str	r5, [sp, #0]
    22f0:	462b      	mov	r3, r5
    22f2:	463a      	mov	r2, r7
    22f4:	4621      	mov	r1, r4
    22f6:	4630      	mov	r0, r6
    22f8:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    22fa:	3401      	adds	r4, #1
    22fc:	b2e4      	uxtb	r4, r4
    22fe:	7873      	ldrb	r3, [r6, #1]
    2300:	42a3      	cmp	r3, r4
    2302:	d8f4      	bhi.n	22ee <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    2304:	4630      	mov	r0, r6
    2306:	4b11      	ldr	r3, [pc, #68]	; (234c <grid_led_startup_animation+0x90>)
    2308:	4798      	blx	r3
		delay_ms(1);
    230a:	2001      	movs	r0, #1
    230c:	4b10      	ldr	r3, [pc, #64]	; (2350 <grid_led_startup_animation+0x94>)
    230e:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    2310:	f109 0901 	add.w	r9, r9, #1
    2314:	fa5f f989 	uxtb.w	r9, r9
    2318:	f10a 3aff 	add.w	sl, sl, #4294967295
    231c:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    2320:	d00f      	beq.n	2342 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    2322:	7873      	ldrb	r3, [r6, #1]
    2324:	2b00      	cmp	r3, #0
    2326:	d0ed      	beq.n	2304 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2328:	fb0b f709 	mul.w	r7, fp, r9
    232c:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    2330:	9b03      	ldr	r3, [sp, #12]
    2332:	fb09 f503 	mul.w	r5, r9, r3
    2336:	fb0b f505 	mul.w	r5, fp, r5
    233a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    233e:	2400      	movs	r4, #0
    2340:	e7d5      	b.n	22ee <grid_led_startup_animation+0x32>
}
    2342:	b005      	add	sp, #20
    2344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2348:	40000c00 	.word	0x40000c00
    234c:	00002285 	.word	0x00002285
    2350:	000047d5 	.word	0x000047d5
    2354:	00001eb9 	.word	0x00001eb9

00002358 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    2358:	b570      	push	{r4, r5, r6, lr}
    235a:	4604      	mov	r4, r0
    235c:	4e2b      	ldr	r6, [pc, #172]	; (240c <grid_led_init+0xb4>)
    235e:	2200      	movs	r2, #0
    2360:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2362:	f003 0001 	and.w	r0, r3, #1
    2366:	2800      	cmp	r0, #0
    2368:	bf14      	ite	ne
    236a:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    236e:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2372:	f3c3 0540 	ubfx	r5, r3, #1, #1
    2376:	2d00      	cmp	r5, #0
    2378:	bf14      	ite	ne
    237a:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    237e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2382:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2384:	f3c3 0080 	ubfx	r0, r3, #2, #1
    2388:	2800      	cmp	r0, #0
    238a:	bf14      	ite	ne
    238c:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2390:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2394:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2396:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    239a:	2d00      	cmp	r5, #0
    239c:	bf14      	ite	ne
    239e:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    23a2:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    23a6:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    23a8:	f3c3 1500 	ubfx	r5, r3, #4, #1
    23ac:	2d00      	cmp	r5, #0
    23ae:	bf14      	ite	ne
    23b0:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    23b4:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    23b8:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    23ba:	f3c3 1040 	ubfx	r0, r3, #5, #1
    23be:	2800      	cmp	r0, #0
    23c0:	bf14      	ite	ne
    23c2:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    23c6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    23ca:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    23cc:	f3c3 1080 	ubfx	r0, r3, #6, #1
    23d0:	2800      	cmp	r0, #0
    23d2:	bf14      	ite	ne
    23d4:	200e      	movne	r0, #14
    23d6:	2008      	moveq	r0, #8
    23d8:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    23da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    23de:	2b00      	cmp	r3, #0
    23e0:	bf14      	ite	ne
    23e2:	23e0      	movne	r3, #224	; 0xe0
    23e4:	2380      	moveq	r3, #128	; 0x80
    23e6:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    23e8:	f846 3f04 	str.w	r3, [r6, #4]!
    23ec:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    23ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    23f2:	d1b5      	bne.n	2360 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    23f4:	4620      	mov	r0, r4
    23f6:	4b06      	ldr	r3, [pc, #24]	; (2410 <grid_led_init+0xb8>)
    23f8:	4798      	blx	r3
	grid_led_hardware_init(mod);
    23fa:	4620      	mov	r0, r4
    23fc:	4b05      	ldr	r3, [pc, #20]	; (2414 <grid_led_init+0xbc>)
    23fe:	4798      	blx	r3
	grid_led_startup_animation(mod);
    2400:	4620      	mov	r0, r4
    2402:	4b05      	ldr	r3, [pc, #20]	; (2418 <grid_led_init+0xc0>)
    2404:	4798      	blx	r3
}
    2406:	2000      	movs	r0, #0
    2408:	bd70      	pop	{r4, r5, r6, pc}
    240a:	bf00      	nop
    240c:	20001dc0 	.word	0x20001dc0
    2410:	00002081 	.word	0x00002081
    2414:	00001ef9 	.word	0x00001ef9
    2418:	000022bd 	.word	0x000022bd

0000241c <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    241c:	b510      	push	{r4, lr}
    241e:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2420:	2200      	movs	r2, #0
    2422:	4b05      	ldr	r3, [pc, #20]	; (2438 <grid_led_hardware_start_transfer+0x1c>)
    2424:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2426:	4805      	ldr	r0, [pc, #20]	; (243c <grid_led_hardware_start_transfer+0x20>)
    2428:	4b05      	ldr	r3, [pc, #20]	; (2440 <grid_led_hardware_start_transfer+0x24>)
    242a:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    242c:	88a2      	ldrh	r2, [r4, #4]
    242e:	68a1      	ldr	r1, [r4, #8]
    2430:	6960      	ldr	r0, [r4, #20]
    2432:	4b04      	ldr	r3, [pc, #16]	; (2444 <grid_led_hardware_start_transfer+0x28>)
    2434:	4798      	blx	r3
    2436:	bd10      	pop	{r4, pc}
    2438:	200012a8 	.word	0x200012a8
    243c:	20001128 	.word	0x20001128
    2440:	00004e61 	.word	0x00004e61
    2444:	00004961 	.word	0x00004961

00002448 <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    2448:	4b01      	ldr	r3, [pc, #4]	; (2450 <grid_led_hardware_is_transfer_completed+0x8>)
    244a:	7818      	ldrb	r0, [r3, #0]
	
    244c:	4770      	bx	lr
    244e:	bf00      	nop
    2450:	200012a8 	.word	0x200012a8

00002454 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    2454:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    245a:	4b13      	ldr	r3, [pc, #76]	; (24a8 <grid_module_common_init+0x54>)
    245c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    2460:	4b12      	ldr	r3, [pc, #72]	; (24ac <grid_module_common_init+0x58>)
    2462:	4798      	blx	r3
    2464:	b178      	cbz	r0, 2486 <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    2466:	4b11      	ldr	r3, [pc, #68]	; (24ac <grid_module_common_init+0x58>)
    2468:	4798      	blx	r3
    246a:	2880      	cmp	r0, #128	; 0x80
    246c:	d00f      	beq.n	248e <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    246e:	4b0f      	ldr	r3, [pc, #60]	; (24ac <grid_module_common_init+0x58>)
    2470:	4798      	blx	r3
    2472:	2840      	cmp	r0, #64	; 0x40
    2474:	d00f      	beq.n	2496 <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    2476:	4b0d      	ldr	r3, [pc, #52]	; (24ac <grid_module_common_init+0x58>)
    2478:	4798      	blx	r3
    247a:	28c0      	cmp	r0, #192	; 0xc0
    247c:	d00f      	beq.n	249e <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    247e:	480c      	ldr	r0, [pc, #48]	; (24b0 <grid_module_common_init+0x5c>)
    2480:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <grid_module_common_init+0x60>)
    2482:	4798      	blx	r3
    2484:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    2486:	480c      	ldr	r0, [pc, #48]	; (24b8 <grid_module_common_init+0x64>)
    2488:	4b0c      	ldr	r3, [pc, #48]	; (24bc <grid_module_common_init+0x68>)
    248a:	4798      	blx	r3
    248c:	e7eb      	b.n	2466 <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    248e:	480a      	ldr	r0, [pc, #40]	; (24b8 <grid_module_common_init+0x64>)
    2490:	4b0b      	ldr	r3, [pc, #44]	; (24c0 <grid_module_common_init+0x6c>)
    2492:	4798      	blx	r3
    2494:	e7eb      	b.n	246e <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    2496:	4808      	ldr	r0, [pc, #32]	; (24b8 <grid_module_common_init+0x64>)
    2498:	4b0a      	ldr	r3, [pc, #40]	; (24c4 <grid_module_common_init+0x70>)
    249a:	4798      	blx	r3
    249c:	e7eb      	b.n	2476 <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    249e:	4806      	ldr	r0, [pc, #24]	; (24b8 <grid_module_common_init+0x64>)
    24a0:	4b09      	ldr	r3, [pc, #36]	; (24c8 <grid_module_common_init+0x74>)
    24a2:	4798      	blx	r3
    24a4:	e7eb      	b.n	247e <grid_module_common_init+0x2a>
    24a6:	bf00      	nop
    24a8:	41008000 	.word	0x41008000
    24ac:	00003a21 	.word	0x00003a21
    24b0:	20001d24 	.word	0x20001d24
    24b4:	000038b1 	.word	0x000038b1
    24b8:	20001d14 	.word	0x20001d14
    24bc:	00003475 	.word	0x00003475
    24c0:	00002719 	.word	0x00002719
    24c4:	0000311d 	.word	0x0000311d
    24c8:	00002c49 	.word	0x00002c49

000024cc <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    24cc:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    24ce:	4803      	ldr	r0, [pc, #12]	; (24dc <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    24d0:	4c03      	ldr	r4, [pc, #12]	; (24e0 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    24d2:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    24d4:	4803      	ldr	r0, [pc, #12]	; (24e4 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    24d6:	47a0      	blx	r4
    24d8:	bd10      	pop	{r4, pc}
    24da:	bf00      	nop
    24dc:	20001058 	.word	0x20001058
    24e0:	0000472d 	.word	0x0000472d
    24e4:	2000122c 	.word	0x2000122c

000024e8 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    24e8:	4b70      	ldr	r3, [pc, #448]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	2b00      	cmp	r3, #0
    24ee:	f000 80d6 	beq.w	269e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1b6>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    24f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24f6:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    24f8:	2300      	movs	r3, #0
    24fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    24fe:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    2502:	4b6a      	ldr	r3, [pc, #424]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2504:	785a      	ldrb	r2, [r3, #1]
    2506:	3208      	adds	r2, #8
    2508:	4969      	ldr	r1, [pc, #420]	; (26b0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c8>)
    250a:	5c8d      	ldrb	r5, [r1, r2]
    250c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    250e:	785a      	ldrb	r2, [r3, #1]
    2510:	b2d2      	uxtb	r2, r2
    2512:	5c8c      	ldrb	r4, [r1, r2]
    2514:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    2516:	785a      	ldrb	r2, [r3, #1]
    2518:	3201      	adds	r2, #1
    251a:	b2d2      	uxtb	r2, r2
    251c:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    251e:	785a      	ldrb	r2, [r3, #1]
    2520:	f002 0207 	and.w	r2, r2, #7
    2524:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    2526:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2528:	f013 0f01 	tst.w	r3, #1
    252c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2530:	4b60      	ldr	r3, [pc, #384]	; (26b4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    2532:	bf14      	ite	ne
    2534:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2538:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    253c:	4b5b      	ldr	r3, [pc, #364]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    253e:	785b      	ldrb	r3, [r3, #1]
    2540:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2544:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2548:	4b5a      	ldr	r3, [pc, #360]	; (26b4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    254a:	bf14      	ite	ne
    254c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2550:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    2554:	4b55      	ldr	r3, [pc, #340]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2556:	785b      	ldrb	r3, [r3, #1]
    2558:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    255c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2560:	4b54      	ldr	r3, [pc, #336]	; (26b4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    2562:	bf14      	ite	ne
    2564:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2568:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    256c:	2302      	movs	r3, #2
    256e:	f10d 0206 	add.w	r2, sp, #6
    2572:	2100      	movs	r1, #0
    2574:	4850      	ldr	r0, [pc, #320]	; (26b8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d0>)
    2576:	4e51      	ldr	r6, [pc, #324]	; (26bc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    2578:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    257a:	2302      	movs	r3, #2
    257c:	aa01      	add	r2, sp, #4
    257e:	2100      	movs	r1, #0
    2580:	484f      	ldr	r0, [pc, #316]	; (26c0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    2582:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    2584:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2588:	f242 7310 	movw	r3, #10000	; 0x2710
    258c:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    258e:	bf8c      	ite	hi
    2590:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    2592:	237f      	movls	r3, #127	; 0x7f
    2594:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	
	if (adcresult_1>10000){
    2598:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    259c:	f242 7310 	movw	r3, #10000	; 0x2710
    25a0:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    25a2:	bf8c      	ite	hi
    25a4:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    25a6:	237f      	movls	r3, #127	; 0x7f
    25a8:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0]){
    25ac:	012e      	lsls	r6, r5, #4
    25ae:	4b45      	ldr	r3, [pc, #276]	; (26c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    25b0:	689b      	ldr	r3, [r3, #8]
    25b2:	4433      	add	r3, r6
    25b4:	68da      	ldr	r2, [r3, #12]
    25b6:	7812      	ldrb	r2, [r2, #0]
    25b8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    25bc:	4291      	cmp	r1, r2
    25be:	d02e      	beq.n	261e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x136>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    25c0:	2a00      	cmp	r2, #0
    25c2:	bf0c      	ite	eq
    25c4:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    25c8:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    25cc:	6858      	ldr	r0, [r3, #4]
    25ce:	bf0c      	ite	eq
    25d0:	2290      	moveq	r2, #144	; 0x90
    25d2:	2280      	movne	r2, #128	; 0x80
    25d4:	2102      	movs	r1, #2
    25d6:	3005      	adds	r0, #5
    25d8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 26cc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>
    25dc:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    25de:	4f39      	ldr	r7, [pc, #228]	; (26c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    25e0:	68bb      	ldr	r3, [r7, #8]
    25e2:	4433      	add	r3, r6
    25e4:	6858      	ldr	r0, [r3, #4]
    25e6:	462a      	mov	r2, r5
    25e8:	2102      	movs	r1, #2
    25ea:	3007      	adds	r0, #7
    25ec:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    25ee:	68bb      	ldr	r3, [r7, #8]
    25f0:	4433      	add	r3, r6
    25f2:	6858      	ldr	r0, [r3, #4]
    25f4:	464a      	mov	r2, r9
    25f6:	2102      	movs	r1, #2
    25f8:	3009      	adds	r0, #9
    25fa:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    25fc:	68bb      	ldr	r3, [r7, #8]
    25fe:	4433      	add	r3, r6
    2600:	6858      	ldr	r0, [r3, #4]
    2602:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2606:	2102      	movs	r1, #2
    2608:	3015      	adds	r0, #21
    260a:	47c0      	blx	r8
		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    260c:	68bb      	ldr	r3, [r7, #8]
    260e:	441e      	add	r6, r3
    2610:	68f3      	ldr	r3, [r6, #12]
    2612:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    2616:	4629      	mov	r1, r5
    2618:	4638      	mov	r0, r7
    261a:	4b2b      	ldr	r3, [pc, #172]	; (26c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    261c:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0]){
    261e:	0125      	lsls	r5, r4, #4
    2620:	4b28      	ldr	r3, [pc, #160]	; (26c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2622:	689b      	ldr	r3, [r3, #8]
    2624:	442b      	add	r3, r5
    2626:	68da      	ldr	r2, [r3, #12]
    2628:	7812      	ldrb	r2, [r2, #0]
    262a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    262e:	4291      	cmp	r1, r2
    2630:	d02d      	beq.n	268e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1a6>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2632:	2a00      	cmp	r2, #0
    2634:	bf0c      	ite	eq
    2636:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    263a:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    263e:	6858      	ldr	r0, [r3, #4]
    2640:	bf0c      	ite	eq
    2642:	2290      	moveq	r2, #144	; 0x90
    2644:	2280      	movne	r2, #128	; 0x80
    2646:	2102      	movs	r1, #2
    2648:	3005      	adds	r0, #5
    264a:	4f20      	ldr	r7, [pc, #128]	; (26cc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>)
    264c:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    264e:	4e1d      	ldr	r6, [pc, #116]	; (26c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2650:	68b3      	ldr	r3, [r6, #8]
    2652:	442b      	add	r3, r5
    2654:	6858      	ldr	r0, [r3, #4]
    2656:	4622      	mov	r2, r4
    2658:	2102      	movs	r1, #2
    265a:	3007      	adds	r0, #7
    265c:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    265e:	68b3      	ldr	r3, [r6, #8]
    2660:	442b      	add	r3, r5
    2662:	6858      	ldr	r0, [r3, #4]
    2664:	4642      	mov	r2, r8
    2666:	2102      	movs	r1, #2
    2668:	3009      	adds	r0, #9
    266a:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    266c:	68b3      	ldr	r3, [r6, #8]
    266e:	442b      	add	r3, r5
    2670:	6858      	ldr	r0, [r3, #4]
    2672:	ea4f 0248 	mov.w	r2, r8, lsl #1
    2676:	2102      	movs	r1, #2
    2678:	3015      	adds	r0, #21
    267a:	47b8      	blx	r7
		
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    267c:	68b3      	ldr	r3, [r6, #8]
    267e:	441d      	add	r5, r3
    2680:	68eb      	ldr	r3, [r5, #12]
    2682:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    2686:	4621      	mov	r1, r4
    2688:	4630      	mov	r0, r6
    268a:	4b0f      	ldr	r3, [pc, #60]	; (26c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    268c:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    268e:	2200      	movs	r2, #0
    2690:	4b06      	ldr	r3, [pc, #24]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2692:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2694:	4b0e      	ldr	r3, [pc, #56]	; (26d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>)
    2696:	4798      	blx	r3
}
    2698:	b003      	add	sp, #12
    269a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    269e:	4a03      	ldr	r2, [pc, #12]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    26a0:	7813      	ldrb	r3, [r2, #0]
    26a2:	3301      	adds	r3, #1
    26a4:	b2db      	uxtb	r3, r3
    26a6:	7013      	strb	r3, [r2, #0]
    26a8:	4770      	bx	lr
    26aa:	bf00      	nop
    26ac:	20000644 	.word	0x20000644
    26b0:	20000300 	.word	0x20000300
    26b4:	41008000 	.word	0x41008000
    26b8:	20001058 	.word	0x20001058
    26bc:	0000464d 	.word	0x0000464d
    26c0:	2000122c 	.word	0x2000122c
    26c4:	20001d14 	.word	0x20001d14
    26c8:	0000409b 	.word	0x0000409b
    26cc:	000039e9 	.word	0x000039e9
    26d0:	000024cd 	.word	0x000024cd

000026d4 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    26d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    26d6:	4f0b      	ldr	r7, [pc, #44]	; (2704 <grid_module_bu16_revb_hardware_init+0x30>)
    26d8:	4c0b      	ldr	r4, [pc, #44]	; (2708 <grid_module_bu16_revb_hardware_init+0x34>)
    26da:	463b      	mov	r3, r7
    26dc:	2200      	movs	r2, #0
    26de:	4611      	mov	r1, r2
    26e0:	4620      	mov	r0, r4
    26e2:	4e0a      	ldr	r6, [pc, #40]	; (270c <grid_module_bu16_revb_hardware_init+0x38>)
    26e4:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    26e6:	4d0a      	ldr	r5, [pc, #40]	; (2710 <grid_module_bu16_revb_hardware_init+0x3c>)
    26e8:	463b      	mov	r3, r7
    26ea:	2200      	movs	r2, #0
    26ec:	4611      	mov	r1, r2
    26ee:	4628      	mov	r0, r5
    26f0:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    26f2:	2100      	movs	r1, #0
    26f4:	4620      	mov	r0, r4
    26f6:	4c07      	ldr	r4, [pc, #28]	; (2714 <grid_module_bu16_revb_hardware_init+0x40>)
    26f8:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    26fa:	2100      	movs	r1, #0
    26fc:	4628      	mov	r0, r5
    26fe:	47a0      	blx	r4
    2700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2702:	bf00      	nop
    2704:	000024e9 	.word	0x000024e9
    2708:	20001058 	.word	0x20001058
    270c:	000045cd 	.word	0x000045cd
    2710:	2000122c 	.word	0x2000122c
    2714:	0000458d 	.word	0x0000458d

00002718 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    2718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    271c:	b09b      	sub	sp, #108	; 0x6c
    271e:	4681      	mov	r9, r0

	grid_led_init(&grid_led_state, 16);
    2720:	2110      	movs	r1, #16
    2722:	4827      	ldr	r0, [pc, #156]	; (27c0 <grid_module_bu16_revb_init+0xa8>)
    2724:	4b27      	ldr	r3, [pc, #156]	; (27c4 <grid_module_bu16_revb_init+0xac>)
    2726:	4798      	blx	r3
	grid_ui_model_init(mod, 16);
    2728:	2110      	movs	r1, #16
    272a:	4648      	mov	r0, r9
    272c:	4b26      	ldr	r3, [pc, #152]	; (27c8 <grid_module_bu16_revb_init+0xb0>)
    272e:	4798      	blx	r3
    2730:	f10d 0837 	add.w	r8, sp, #55	; 0x37
    2734:	2500      	movs	r5, #0
		
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30] = {0};
    2736:	462c      	mov	r4, r5
    2738:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 27e8 <grid_module_bu16_revb_init+0xd0>
			
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    273c:	4f23      	ldr	r7, [pc, #140]	; (27cc <grid_module_bu16_revb_init+0xb4>)
		uint8_t payload_template[30] = {0};
    273e:	221e      	movs	r2, #30
    2740:	4621      	mov	r1, r4
    2742:	a812      	add	r0, sp, #72	; 0x48
    2744:	47d0      	blx	sl
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2746:	ae0e      	add	r6, sp, #56	; 0x38
    2748:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    274c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2750:	2303      	movs	r3, #3
    2752:	930b      	str	r3, [sp, #44]	; 0x2c
    2754:	940a      	str	r4, [sp, #40]	; 0x28
    2756:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    275a:	9209      	str	r2, [sp, #36]	; 0x24
    275c:	2263      	movs	r2, #99	; 0x63
    275e:	9208      	str	r2, [sp, #32]
    2760:	9407      	str	r4, [sp, #28]
    2762:	9306      	str	r3, [sp, #24]
    2764:	2602      	movs	r6, #2
    2766:	9605      	str	r6, [sp, #20]
    2768:	9304      	str	r3, [sp, #16]
    276a:	9403      	str	r4, [sp, #12]
    276c:	9502      	str	r5, [sp, #8]
    276e:	2390      	movs	r3, #144	; 0x90
    2770:	9301      	str	r3, [sp, #4]
    2772:	9400      	str	r4, [sp, #0]
    2774:	4623      	mov	r3, r4
    2776:	4632      	mov	r2, r6
    2778:	4915      	ldr	r1, [pc, #84]	; (27d0 <grid_module_bu16_revb_init+0xb8>)
    277a:	a812      	add	r0, sp, #72	; 0x48
    277c:	f8df b06c 	ldr.w	fp, [pc, #108]	; 27ec <grid_module_bu16_revb_init+0xd4>
    2780:	47d8      	blx	fp

		);
			
		
		
		uint8_t payload_length = strlen(payload_template);
    2782:	a812      	add	r0, sp, #72	; 0x48
    2784:	4b13      	ldr	r3, [pc, #76]	; (27d4 <grid_module_bu16_revb_init+0xbc>)
    2786:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2788:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    278c:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    2790:	9602      	str	r6, [sp, #8]
    2792:	ab0d      	add	r3, sp, #52	; 0x34
    2794:	9301      	str	r3, [sp, #4]
    2796:	b2c0      	uxtb	r0, r0
    2798:	9000      	str	r0, [sp, #0]
    279a:	ab12      	add	r3, sp, #72	; 0x48
    279c:	4632      	mov	r2, r6
    279e:	b2e9      	uxtb	r1, r5
    27a0:	4648      	mov	r0, r9
    27a2:	4e0d      	ldr	r6, [pc, #52]	; (27d8 <grid_module_bu16_revb_init+0xc0>)
    27a4:	47b0      	blx	r6
    27a6:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    27a8:	2d10      	cmp	r5, #16
    27aa:	d1c8      	bne.n	273e <grid_module_bu16_revb_init+0x26>
		

	}
	
	grid_report_sys_init(mod);
    27ac:	4648      	mov	r0, r9
    27ae:	4b0b      	ldr	r3, [pc, #44]	; (27dc <grid_module_bu16_revb_init+0xc4>)
    27b0:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    27b2:	4b0b      	ldr	r3, [pc, #44]	; (27e0 <grid_module_bu16_revb_init+0xc8>)
    27b4:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    27b6:	4b0b      	ldr	r3, [pc, #44]	; (27e4 <grid_module_bu16_revb_init+0xcc>)
    27b8:	4798      	blx	r3

};
    27ba:	b01b      	add	sp, #108	; 0x6c
    27bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27c0:	20003640 	.word	0x20003640
    27c4:	00002359 	.word	0x00002359
    27c8:	00003dc1 	.word	0x00003dc1
    27cc:	0000d540 	.word	0x0000d540
    27d0:	0000d550 	.word	0x0000d550
    27d4:	0000c3f1 	.word	0x0000c3f1
    27d8:	00003e85 	.word	0x00003e85
    27dc:	00003ea9 	.word	0x00003ea9
    27e0:	000026d5 	.word	0x000026d5
    27e4:	000024cd 	.word	0x000024cd
    27e8:	0000bfbb 	.word	0x0000bfbb
    27ec:	0000c3a9 	.word	0x0000c3a9

000027f0 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    27f0:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    27f6:	4b06      	ldr	r3, [pc, #24]	; (2810 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    27f8:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    27fa:	4c06      	ldr	r4, [pc, #24]	; (2814 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    27fc:	4620      	mov	r0, r4
    27fe:	4b06      	ldr	r3, [pc, #24]	; (2818 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    2800:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    2802:	2308      	movs	r3, #8
    2804:	4a05      	ldr	r2, [pc, #20]	; (281c <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    2806:	4906      	ldr	r1, [pc, #24]	; (2820 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    2808:	4620      	mov	r0, r4
    280a:	4c06      	ldr	r4, [pc, #24]	; (2824 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    280c:	47a0      	blx	r4
    280e:	bd10      	pop	{r4, pc}
    2810:	41008000 	.word	0x41008000
    2814:	20000f4c 	.word	0x20000f4c
    2818:	00004c35 	.word	0x00004c35
    281c:	200017f0 	.word	0x200017f0
    2820:	20000310 	.word	0x20000310
    2824:	00004cd5 	.word	0x00004cd5

00002828 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    2828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    282c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    282e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2832:	4bad      	ldr	r3, [pc, #692]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    2834:	615a      	str	r2, [r3, #20]
    2836:	2700      	movs	r7, #0
    2838:	e07b      	b.n	2932 <grid_module_en16_reva_hardware_transfer_complete_cb+0x10a>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    283a:	49ac      	ldr	r1, [pc, #688]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    283c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2840:	78c9      	ldrb	r1, [r1, #3]
    2842:	42d1      	cmn	r1, r2
    2844:	d405      	bmi.n	2852 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a>
						grid_ui_encoder_array[i].rotation_value += xi;
    2846:	4aa9      	ldr	r2, [pc, #676]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2848:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    284c:	440b      	add	r3, r1
    284e:	70d3      	strb	r3, [r2, #3]
    2850:	e00a      	b.n	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    2852:	4ba6      	ldr	r3, [pc, #664]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2854:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2858:	2200      	movs	r2, #0
    285a:	70da      	strb	r2, [r3, #3]
    285c:	e004      	b.n	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    285e:	4ba3      	ldr	r3, [pc, #652]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2860:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2864:	227f      	movs	r2, #127	; 0x7f
    2866:	70da      	strb	r2, [r3, #3]
				
				uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
				
				
				uint8_t value = 0;
				if (0 == grid_report_ui_get_changed_flag(mod, i+16)){
    2868:	f104 0810 	add.w	r8, r4, #16
    286c:	fa5f f888 	uxtb.w	r8, r8
    2870:	4641      	mov	r1, r8
    2872:	489f      	ldr	r0, [pc, #636]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2874:	4b9f      	ldr	r3, [pc, #636]	; (2af4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2876:	4798      	blx	r3
    2878:	2800      	cmp	r0, #0
    287a:	f040 8107 	bne.w	2a8c <grid_module_en16_reva_hardware_transfer_complete_cb+0x264>
					value = 64; //CENTER
					mod->report_ui_array[i+16].helper[0] = 0;
    287e:	4b9c      	ldr	r3, [pc, #624]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2880:	689b      	ldr	r3, [r3, #8]
    2882:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2886:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    288a:	2200      	movs	r2, #0
    288c:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    288e:	2340      	movs	r3, #64	; 0x40
				}
				else{
					value = mod->report_ui_array[i+16].helper[0];
				}
				
				value +=  delta*velocityfactor;
    2890:	fb06 3505 	mla	r5, r6, r5, r3
    2894:	b2ed      	uxtb	r5, r5
				
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
				
				if (value != mod->report_ui_array[i+16].helper[0]){
    2896:	f104 0610 	add.w	r6, r4, #16
    289a:	0136      	lsls	r6, r6, #4
    289c:	4b94      	ldr	r3, [pc, #592]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    289e:	689b      	ldr	r3, [r3, #8]
    28a0:	4433      	add	r3, r6
    28a2:	68da      	ldr	r2, [r3, #12]
    28a4:	7812      	ldrb	r2, [r2, #0]
    28a6:	42aa      	cmp	r2, r5
    28a8:	d03f      	beq.n	292a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
    28aa:	4a90      	ldr	r2, [pc, #576]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    28ac:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    28b0:	f892 a003 	ldrb.w	sl, [r2, #3]
    28b4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    28b8:	fa5f fa8a 	uxtb.w	sl, sl
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[5], 2, command);
    28bc:	6858      	ldr	r0, [r3, #4]
    28be:	22b0      	movs	r2, #176	; 0xb0
    28c0:	2102      	movs	r1, #2
    28c2:	3005      	adds	r0, #5
    28c4:	f8df b264 	ldr.w	fp, [pc, #612]	; 2b2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    28c8:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[7], 2, i);
    28ca:	f8df 9224 	ldr.w	r9, [pc, #548]	; 2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    28ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28d2:	4433      	add	r3, r6
    28d4:	6858      	ldr	r0, [r3, #4]
    28d6:	4622      	mov	r2, r4
    28d8:	2102      	movs	r1, #2
    28da:	3007      	adds	r0, #7
    28dc:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[9], 2, value);
    28de:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28e2:	4433      	add	r3, r6
    28e4:	6858      	ldr	r0, [r3, #4]
    28e6:	462a      	mov	r2, r5
    28e8:	2102      	movs	r1, #2
    28ea:	3009      	adds	r0, #9
    28ec:	47d8      	blx	fp
					
					mod->report_ui_array[i+16].helper[0] = value;
    28ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28f2:	4433      	add	r3, r6
    28f4:	68db      	ldr	r3, [r3, #12]
    28f6:	701d      	strb	r5, [r3, #0]
					grid_report_ui_set_changed_flag(mod, i+16);
    28f8:	4641      	mov	r1, r8
    28fa:	4648      	mov	r0, r9
    28fc:	4d7e      	ldr	r5, [pc, #504]	; (2af8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    28fe:	47a8      	blx	r5
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, actuator); // LED
    2900:	f506 7680 	add.w	r6, r6, #256	; 0x100
    2904:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2908:	4433      	add	r3, r6
    290a:	6858      	ldr	r0, [r3, #4]
    290c:	4652      	mov	r2, sl
    290e:	2102      	movs	r1, #2
    2910:	3009      	adds	r0, #9
    2912:	47d8      	blx	fp
					mod->report_ui_array[i+16+16].helper[0] = actuator;
    2914:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2918:	441e      	add	r6, r3
    291a:	68f3      	ldr	r3, [r6, #12]
    291c:	f883 a000 	strb.w	sl, [r3]
					grid_report_ui_set_changed_flag(mod, i+16+16);
    2920:	f104 0120 	add.w	r1, r4, #32
    2924:	b2c9      	uxtb	r1, r1
    2926:	4648      	mov	r0, r9
    2928:	47a8      	blx	r5
    292a:	3701      	adds	r7, #1
	for (uint8_t j=0; j<16; j++){
    292c:	2f10      	cmp	r7, #16
    292e:	f000 811e 	beq.w	2b6e <grid_module_en16_reva_hardware_transfer_complete_cb+0x346>
    2932:	b2f9      	uxtb	r1, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    2934:	084b      	lsrs	r3, r1, #1
    2936:	4a71      	ldr	r2, [pc, #452]	; (2afc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    2938:	5cd3      	ldrb	r3, [r2, r3]
    293a:	f001 0201 	and.w	r2, r1, #1
    293e:	0092      	lsls	r2, r2, #2
    2940:	4113      	asrs	r3, r2
    2942:	b2db      	uxtb	r3, r3
    2944:	f003 000f 	and.w	r0, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    2948:	4a6d      	ldr	r2, [pc, #436]	; (2b00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    294a:	5dd2      	ldrb	r2, [r2, r7]
    294c:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    294e:	4290      	cmp	r0, r2
    2950:	d0eb      	beq.n	292a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    2952:	4a6c      	ldr	r2, [pc, #432]	; (2b04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
    2954:	5cbc      	ldrb	r4, [r7, r2]
			UI_SPI_DEBUG = j;
    2956:	4a6c      	ldr	r2, [pc, #432]	; (2b08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>)
    2958:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    295a:	0882      	lsrs	r2, r0, #2
			uint8_t phase_a = (new_value>>1)&1;
    295c:	f3c0 0840 	ubfx	r8, r0, #1, #1
			uint8_t phase_b = (new_value)&1;
    2960:	f003 0501 	and.w	r5, r3, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    2964:	4b61      	ldr	r3, [pc, #388]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2966:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    296a:	785b      	ldrb	r3, [r3, #1]
    296c:	4293      	cmp	r3, r2
    296e:	d035      	beq.n	29dc <grid_module_en16_reva_hardware_transfer_complete_cb+0x1b4>
				grid_ui_encoder_array[i].button_changed = 1;
    2970:	4b5e      	ldr	r3, [pc, #376]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2972:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2976:	2101      	movs	r1, #1
    2978:	7099      	strb	r1, [r3, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    297a:	705a      	strb	r2, [r3, #1]
					velocity = 0;
    297c:	2a00      	cmp	r2, #0
    297e:	bf0c      	ite	eq
    2980:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    2984:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[5], 2, command);
    2988:	ea4f 1604 	mov.w	r6, r4, lsl #4
    298c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    2990:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2994:	4433      	add	r3, r6
    2996:	6858      	ldr	r0, [r3, #4]
    2998:	bf0c      	ite	eq
    299a:	2290      	moveq	r2, #144	; 0x90
    299c:	2280      	movne	r2, #128	; 0x80
    299e:	2102      	movs	r1, #2
    29a0:	3005      	adds	r0, #5
    29a2:	f8df b188 	ldr.w	fp, [pc, #392]	; 2b2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    29a6:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[7], 2, i);
    29a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29ac:	4433      	add	r3, r6
    29ae:	6858      	ldr	r0, [r3, #4]
    29b0:	4622      	mov	r2, r4
    29b2:	2102      	movs	r1, #2
    29b4:	3007      	adds	r0, #7
    29b6:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[9], 2, velocity);
    29b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29bc:	4433      	add	r3, r6
    29be:	6858      	ldr	r0, [r3, #4]
    29c0:	4652      	mov	r2, sl
    29c2:	2102      	movs	r1, #2
    29c4:	3009      	adds	r0, #9
    29c6:	47d8      	blx	fp
				mod->report_ui_array[i].helper[0] = velocity;
    29c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29cc:	441e      	add	r6, r3
    29ce:	68f3      	ldr	r3, [r6, #12]
    29d0:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, i);
    29d4:	4621      	mov	r1, r4
    29d6:	4648      	mov	r0, r9
    29d8:	4b47      	ldr	r3, [pc, #284]	; (2af8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    29da:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    29dc:	4b43      	ldr	r3, [pc, #268]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    29de:	eb03 1304 	add.w	r3, r3, r4, lsl #4
			if (a_now != a_prev){
    29e2:	7b5b      	ldrb	r3, [r3, #13]
    29e4:	4543      	cmp	r3, r8
    29e6:	f000 80ca 	beq.w	2b7e <grid_module_en16_reva_hardware_transfer_complete_cb+0x356>
					delta = +1;
    29ea:	45a8      	cmp	r8, r5
    29ec:	bf14      	ite	ne
    29ee:	f04f 36ff 	movne.w	r6, #4294967295
    29f2:	2601      	moveq	r6, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    29f4:	4b3d      	ldr	r3, [pc, #244]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    29f6:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    29fa:	f882 800d 	strb.w	r8, [r2, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    29fe:	7395      	strb	r5, [r2, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i+1].last_real_time);
    2a00:	6991      	ldr	r1, [r2, #24]
    2a02:	4842      	ldr	r0, [pc, #264]	; (2b0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2a04:	4b42      	ldr	r3, [pc, #264]	; (2b10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e8>)
    2a06:	4798      	blx	r3
    2a08:	9001      	str	r0, [sp, #4]
				if (elapsed_time>400){
    2a0a:	9b01      	ldr	r3, [sp, #4]
    2a0c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2a10:	bf84      	itt	hi
    2a12:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    2a16:	9301      	strhi	r3, [sp, #4]
				if (elapsed_time<20){
    2a18:	9b01      	ldr	r3, [sp, #4]
    2a1a:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    2a1c:	bf9c      	itt	ls
    2a1e:	2314      	movls	r3, #20
    2a20:	9301      	strls	r3, [sp, #4]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    2a22:	9b01      	ldr	r3, [sp, #4]
    2a24:	9801      	ldr	r0, [sp, #4]
    2a26:	fb00 f003 	mul.w	r0, r0, r3
    2a2a:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2a2e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2a32:	4b38      	ldr	r3, [pc, #224]	; (2b14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ec>)
    2a34:	4798      	blx	r3
    2a36:	a32a      	add	r3, pc, #168	; (adr r3, 2ae0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
    2a38:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a3c:	4d36      	ldr	r5, [pc, #216]	; (2b18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>)
    2a3e:	47a8      	blx	r5
    2a40:	2200      	movs	r2, #0
    2a42:	4b36      	ldr	r3, [pc, #216]	; (2b1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f4>)
    2a44:	4d36      	ldr	r5, [pc, #216]	; (2b20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>)
    2a46:	47a8      	blx	r5
    2a48:	4b36      	ldr	r3, [pc, #216]	; (2b24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    2a4a:	4798      	blx	r3
    2a4c:	b2c5      	uxtb	r5, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2a4e:	482f      	ldr	r0, [pc, #188]	; (2b0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2a50:	4b35      	ldr	r3, [pc, #212]	; (2b28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    2a52:	4798      	blx	r3
    2a54:	4b25      	ldr	r3, [pc, #148]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a56:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2a5a:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2a5c:	fb05 6306 	mla	r3, r5, r6, r6
    2a60:	b29b      	uxth	r3, r3
    2a62:	b21a      	sxth	r2, r3
				if (delta<0){
    2a64:	2e00      	cmp	r6, #0
    2a66:	f6ff aee8 	blt.w	283a <grid_module_en16_reva_hardware_transfer_complete_cb+0x12>
				else if (delta>0){
    2a6a:	2e00      	cmp	r6, #0
    2a6c:	f77f aefc 	ble.w	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    2a70:	491e      	ldr	r1, [pc, #120]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a72:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2a76:	78c9      	ldrb	r1, [r1, #3]
    2a78:	440a      	add	r2, r1
    2a7a:	2a7f      	cmp	r2, #127	; 0x7f
    2a7c:	f73f aeef 	bgt.w	285e <grid_module_en16_reva_hardware_transfer_complete_cb+0x36>
						grid_ui_encoder_array[i].rotation_value += xi;
    2a80:	4a1a      	ldr	r2, [pc, #104]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a82:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2a86:	440b      	add	r3, r1
    2a88:	70d3      	strb	r3, [r2, #3]
    2a8a:	e6ed      	b.n	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					value = mod->report_ui_array[i+16].helper[0];
    2a8c:	4b18      	ldr	r3, [pc, #96]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2a8e:	689b      	ldr	r3, [r3, #8]
    2a90:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2a94:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    2a98:	781b      	ldrb	r3, [r3, #0]
    2a9a:	e6f9      	b.n	2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x68>
			else{ //DELTA==0

				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
					if (grid_ui_encoder_array[i].rotation_value > 64){

						grid_ui_encoder_array[i].rotation_value--;
    2a9c:	3b01      	subs	r3, #1
    2a9e:	b2db      	uxtb	r3, r3
    2aa0:	4a12      	ldr	r2, [pc, #72]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2aa2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2aa6:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2aa8:	005b      	lsls	r3, r3, #1
    2aaa:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2aac:	f104 0820 	add.w	r8, r4, #32
    2ab0:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2ab4:	4e0e      	ldr	r6, [pc, #56]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2ab6:	68b3      	ldr	r3, [r6, #8]
    2ab8:	444b      	add	r3, r9
    2aba:	6858      	ldr	r0, [r3, #4]
    2abc:	462a      	mov	r2, r5
    2abe:	2102      	movs	r1, #2
    2ac0:	3009      	adds	r0, #9
    2ac2:	4b1a      	ldr	r3, [pc, #104]	; (2b2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    2ac4:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2ac6:	68b3      	ldr	r3, [r6, #8]
    2ac8:	444b      	add	r3, r9
    2aca:	68db      	ldr	r3, [r3, #12]
    2acc:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2ace:	fa5f f188 	uxtb.w	r1, r8
    2ad2:	4630      	mov	r0, r6
    2ad4:	4b08      	ldr	r3, [pc, #32]	; (2af8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2ad6:	4798      	blx	r3
    2ad8:	e063      	b.n	2ba2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x37a>
    2ada:	bf00      	nop
    2adc:	f3af 8000 	nop.w
    2ae0:	00000000 	.word	0x00000000
    2ae4:	40e38800 	.word	0x40e38800
    2ae8:	41008000 	.word	0x41008000
    2aec:	20003670 	.word	0x20003670
    2af0:	20001d14 	.word	0x20001d14
    2af4:	0000408f 	.word	0x0000408f
    2af8:	0000409b 	.word	0x0000409b
    2afc:	200017f0 	.word	0x200017f0
    2b00:	200017d8 	.word	0x200017d8
    2b04:	20000320 	.word	0x20000320
    2b08:	200017c0 	.word	0x200017c0
    2b0c:	20001d24 	.word	0x20001d24
    2b10:	000038f5 	.word	0x000038f5
    2b14:	0000b9fd 	.word	0x0000b9fd
    2b18:	0000bd3d 	.word	0x0000bd3d
    2b1c:	3ff00000 	.word	0x3ff00000
    2b20:	0000b785 	.word	0x0000b785
    2b24:	0000bf0d 	.word	0x0000bf0d
    2b28:	000038f1 	.word	0x000038f1
    2b2c:	000039e9 	.word	0x000039e9

					}
					if (grid_ui_encoder_array[i].rotation_value < 64){

						grid_ui_encoder_array[i].rotation_value++;
    2b30:	3301      	adds	r3, #1
    2b32:	b2db      	uxtb	r3, r3
    2b34:	4a22      	ldr	r2, [pc, #136]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2b36:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2b3a:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2b3c:	005b      	lsls	r3, r3, #1
    2b3e:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2b40:	f104 0820 	add.w	r8, r4, #32
    2b44:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2b48:	4e1e      	ldr	r6, [pc, #120]	; (2bc4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>)
    2b4a:	68b3      	ldr	r3, [r6, #8]
    2b4c:	444b      	add	r3, r9
    2b4e:	6858      	ldr	r0, [r3, #4]
    2b50:	462a      	mov	r2, r5
    2b52:	2102      	movs	r1, #2
    2b54:	3009      	adds	r0, #9
    2b56:	4b1c      	ldr	r3, [pc, #112]	; (2bc8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a0>)
    2b58:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2b5a:	68b3      	ldr	r3, [r6, #8]
    2b5c:	444b      	add	r3, r9
    2b5e:	68db      	ldr	r3, [r3, #12]
    2b60:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2b62:	fa5f f188 	uxtb.w	r1, r8
    2b66:	4630      	mov	r0, r6
    2b68:	4b18      	ldr	r3, [pc, #96]	; (2bcc <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a4>)
    2b6a:	4798      	blx	r3
    2b6c:	e01f      	b.n	2bae <grid_module_en16_reva_hardware_transfer_complete_cb+0x386>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    2b6e:	2200      	movs	r2, #0
    2b70:	4b17      	ldr	r3, [pc, #92]	; (2bd0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a8>)
    2b72:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2b74:	4b17      	ldr	r3, [pc, #92]	; (2bd4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ac>)
    2b76:	4798      	blx	r3
}
    2b78:	b003      	add	sp, #12
    2b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2b7e:	4b10      	ldr	r3, [pc, #64]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2b80:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2b84:	739d      	strb	r5, [r3, #14]
				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
    2b86:	6899      	ldr	r1, [r3, #8]
    2b88:	4813      	ldr	r0, [pc, #76]	; (2bd8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2b8a:	4b14      	ldr	r3, [pc, #80]	; (2bdc <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b4>)
    2b8c:	4798      	blx	r3
    2b8e:	28c8      	cmp	r0, #200	; 0xc8
    2b90:	f67f aecb 	bls.w	292a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
					if (grid_ui_encoder_array[i].rotation_value > 64){
    2b94:	4b0a      	ldr	r3, [pc, #40]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2b96:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2b9a:	78db      	ldrb	r3, [r3, #3]
    2b9c:	2b40      	cmp	r3, #64	; 0x40
    2b9e:	f63f af7d 	bhi.w	2a9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x274>
					if (grid_ui_encoder_array[i].rotation_value < 64){
    2ba2:	4b07      	ldr	r3, [pc, #28]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2ba4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2ba8:	78db      	ldrb	r3, [r3, #3]
    2baa:	2b3f      	cmp	r3, #63	; 0x3f
    2bac:	d9c0      	bls.n	2b30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>
					grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2bae:	480a      	ldr	r0, [pc, #40]	; (2bd8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2bb0:	4b0b      	ldr	r3, [pc, #44]	; (2be0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b8>)
    2bb2:	4798      	blx	r3
    2bb4:	4902      	ldr	r1, [pc, #8]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2bb6:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    2bba:	60a0      	str	r0, [r4, #8]
    2bbc:	e6b5      	b.n	292a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
    2bbe:	bf00      	nop
    2bc0:	20003670 	.word	0x20003670
    2bc4:	20001d14 	.word	0x20001d14
    2bc8:	000039e9 	.word	0x000039e9
    2bcc:	0000409b 	.word	0x0000409b
    2bd0:	2000366c 	.word	0x2000366c
    2bd4:	000027f1 	.word	0x000027f1
    2bd8:	20001d24 	.word	0x20001d24
    2bdc:	000038f5 	.word	0x000038f5
    2be0:	000038f1 	.word	0x000038f1

00002be4 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2be4:	b510      	push	{r4, lr}
    2be6:	4b0e      	ldr	r3, [pc, #56]	; (2c20 <grid_module_en16_reva_hardware_init+0x3c>)
    2be8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2bec:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2bee:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2bf4:	629a      	str	r2, [r3, #40]	; 0x28
    2bf6:	4a0b      	ldr	r2, [pc, #44]	; (2c24 <grid_module_en16_reva_hardware_init+0x40>)
    2bf8:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2bfa:	4c0b      	ldr	r4, [pc, #44]	; (2c28 <grid_module_en16_reva_hardware_init+0x44>)
    2bfc:	2103      	movs	r1, #3
    2bfe:	4620      	mov	r0, r4
    2c00:	4b0a      	ldr	r3, [pc, #40]	; (2c2c <grid_module_en16_reva_hardware_init+0x48>)
    2c02:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2c04:	490a      	ldr	r1, [pc, #40]	; (2c30 <grid_module_en16_reva_hardware_init+0x4c>)
    2c06:	4620      	mov	r0, r4
    2c08:	4b0a      	ldr	r3, [pc, #40]	; (2c34 <grid_module_en16_reva_hardware_init+0x50>)
    2c0a:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2c0c:	490a      	ldr	r1, [pc, #40]	; (2c38 <grid_module_en16_reva_hardware_init+0x54>)
    2c0e:	4620      	mov	r0, r4
    2c10:	4b0a      	ldr	r3, [pc, #40]	; (2c3c <grid_module_en16_reva_hardware_init+0x58>)
    2c12:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2c14:	4a0a      	ldr	r2, [pc, #40]	; (2c40 <grid_module_en16_reva_hardware_init+0x5c>)
    2c16:	2100      	movs	r1, #0
    2c18:	4620      	mov	r0, r4
    2c1a:	4b0a      	ldr	r3, [pc, #40]	; (2c44 <grid_module_en16_reva_hardware_init+0x60>)
    2c1c:	4798      	blx	r3
    2c1e:	bd10      	pop	{r4, pc}
    2c20:	41008000 	.word	0x41008000
    2c24:	c0000020 	.word	0xc0000020
    2c28:	20000f4c 	.word	0x20000f4c
    2c2c:	00004c99 	.word	0x00004c99
    2c30:	00061a80 	.word	0x00061a80
    2c34:	00004c5d 	.word	0x00004c5d
    2c38:	200017d4 	.word	0x200017d4
    2c3c:	00004d81 	.word	0x00004d81
    2c40:	00002829 	.word	0x00002829
    2c44:	00004d3d 	.word	0x00004d3d

00002c48 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2c4c:	b091      	sub	sp, #68	; 0x44
    2c4e:	4680      	mov	r8, r0
	
	
	grid_led_init(&grid_led_state, 16);
    2c50:	2110      	movs	r1, #16
    2c52:	4833      	ldr	r0, [pc, #204]	; (2d20 <grid_module_en16_reva_init+0xd8>)
    2c54:	4b33      	ldr	r3, [pc, #204]	; (2d24 <grid_module_en16_reva_init+0xdc>)
    2c56:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16);
    2c58:	2130      	movs	r1, #48	; 0x30
    2c5a:	4640      	mov	r0, r8
    2c5c:	4b32      	ldr	r3, [pc, #200]	; (2d28 <grid_module_en16_reva_init+0xe0>)
    2c5e:	4798      	blx	r3
    2c60:	2500      	movs	r5, #0
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<16+16+16; i++){
		
		uint8_t payload_template[30] = {0};
    2c62:	462c      	mov	r4, r5
    2c64:	4f31      	ldr	r7, [pc, #196]	; (2d2c <grid_module_en16_reva_init+0xe4>)
    2c66:	e031      	b.n	2ccc <grid_module_en16_reva_init+0x84>
		

		if (i<16){ // ROTATION
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2c68:	2303      	movs	r3, #3
    2c6a:	9304      	str	r3, [sp, #16]
    2c6c:	9403      	str	r4, [sp, #12]
    2c6e:	9502      	str	r5, [sp, #8]
    2c70:	2390      	movs	r3, #144	; 0x90
    2c72:	9301      	str	r3, [sp, #4]
    2c74:	9400      	str	r4, [sp, #0]
    2c76:	4623      	mov	r3, r4
    2c78:	2202      	movs	r2, #2
    2c7a:	492d      	ldr	r1, [pc, #180]	; (2d30 <grid_module_en16_reva_init+0xe8>)
    2c7c:	a808      	add	r0, sp, #32
    2c7e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2d4c <grid_module_en16_reva_init+0x104>
    2c82:	47c8      	blx	r9
    2c84:	e00e      	b.n	2ca4 <grid_module_en16_reva_init+0x5c>
			);
		
		}
		else{ // LED
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2c86:	2303      	movs	r3, #3
    2c88:	9304      	str	r3, [sp, #16]
    2c8a:	9403      	str	r4, [sp, #12]
    2c8c:	f1a5 0220 	sub.w	r2, r5, #32
    2c90:	9202      	str	r2, [sp, #8]
    2c92:	2263      	movs	r2, #99	; 0x63
    2c94:	9201      	str	r2, [sp, #4]
    2c96:	9400      	str	r4, [sp, #0]
    2c98:	2202      	movs	r2, #2
    2c9a:	4925      	ldr	r1, [pc, #148]	; (2d30 <grid_module_en16_reva_init+0xe8>)
    2c9c:	a808      	add	r0, sp, #32
    2c9e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2d4c <grid_module_en16_reva_init+0x104>
    2ca2:	47c8      	blx	r9
			);
				
		}

		
		uint32_t payload_length = strlen(payload_template);
    2ca4:	a808      	add	r0, sp, #32
    2ca6:	4b23      	ldr	r3, [pc, #140]	; (2d34 <grid_module_en16_reva_init+0xec>)
    2ca8:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2caa:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    2cae:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    2cb2:	2202      	movs	r2, #2
    2cb4:	9202      	str	r2, [sp, #8]
    2cb6:	ab07      	add	r3, sp, #28
    2cb8:	9301      	str	r3, [sp, #4]
    2cba:	9000      	str	r0, [sp, #0]
    2cbc:	ab08      	add	r3, sp, #32
    2cbe:	4631      	mov	r1, r6
    2cc0:	4640      	mov	r0, r8
    2cc2:	4e1d      	ldr	r6, [pc, #116]	; (2d38 <grid_module_en16_reva_init+0xf0>)
    2cc4:	47b0      	blx	r6
    2cc6:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16+16+16; i++){
    2cc8:	2d30      	cmp	r5, #48	; 0x30
    2cca:	d017      	beq.n	2cfc <grid_module_en16_reva_init+0xb4>
    2ccc:	b2ee      	uxtb	r6, r5
		uint8_t payload_template[30] = {0};
    2cce:	221e      	movs	r2, #30
    2cd0:	4621      	mov	r1, r4
    2cd2:	a808      	add	r0, sp, #32
    2cd4:	47b8      	blx	r7
		if (i<16){ // ROTATION
    2cd6:	2e0f      	cmp	r6, #15
    2cd8:	d9c6      	bls.n	2c68 <grid_module_en16_reva_init+0x20>
		else if (i<16+16){ // BUTTON
    2cda:	2e1f      	cmp	r6, #31
    2cdc:	d8d3      	bhi.n	2c86 <grid_module_en16_reva_init+0x3e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2cde:	2303      	movs	r3, #3
    2ce0:	9304      	str	r3, [sp, #16]
    2ce2:	9403      	str	r4, [sp, #12]
    2ce4:	9502      	str	r5, [sp, #8]
    2ce6:	2390      	movs	r3, #144	; 0x90
    2ce8:	9301      	str	r3, [sp, #4]
    2cea:	9400      	str	r4, [sp, #0]
    2cec:	4623      	mov	r3, r4
    2cee:	2202      	movs	r2, #2
    2cf0:	490f      	ldr	r1, [pc, #60]	; (2d30 <grid_module_en16_reva_init+0xe8>)
    2cf2:	a808      	add	r0, sp, #32
    2cf4:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2d4c <grid_module_en16_reva_init+0x104>
    2cf8:	47c8      	blx	r9
    2cfa:	e7d3      	b.n	2ca4 <grid_module_en16_reva_init+0x5c>
		
	}
	
	grid_report_sys_init(mod);
    2cfc:	4640      	mov	r0, r8
    2cfe:	4b0f      	ldr	r3, [pc, #60]	; (2d3c <grid_module_en16_reva_init+0xf4>)
    2d00:	4798      	blx	r3
    2d02:	2300      	movs	r3, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    2d04:	490e      	ldr	r1, [pc, #56]	; (2d40 <grid_module_en16_reva_init+0xf8>)
    2d06:	011a      	lsls	r2, r3, #4
    2d08:	5453      	strb	r3, [r2, r1]
    2d0a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    2d0c:	2b10      	cmp	r3, #16
    2d0e:	d1fa      	bne.n	2d06 <grid_module_en16_reva_init+0xbe>
	}
	
	
	grid_module_en16_reva_hardware_init();
    2d10:	4b0c      	ldr	r3, [pc, #48]	; (2d44 <grid_module_en16_reva_init+0xfc>)
    2d12:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2d14:	4b0c      	ldr	r3, [pc, #48]	; (2d48 <grid_module_en16_reva_init+0x100>)
    2d16:	4798      	blx	r3
	
}
    2d18:	b011      	add	sp, #68	; 0x44
    2d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2d1e:	bf00      	nop
    2d20:	20003640 	.word	0x20003640
    2d24:	00002359 	.word	0x00002359
    2d28:	00003dc1 	.word	0x00003dc1
    2d2c:	0000bfbb 	.word	0x0000bfbb
    2d30:	0000d568 	.word	0x0000d568
    2d34:	0000c3f1 	.word	0x0000c3f1
    2d38:	00003e85 	.word	0x00003e85
    2d3c:	00003ea9 	.word	0x00003ea9
    2d40:	20003670 	.word	0x20003670
    2d44:	00002be5 	.word	0x00002be5
    2d48:	000027f1 	.word	0x000027f1
    2d4c:	0000c3a9 	.word	0x0000c3a9

00002d50 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2d50:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2d52:	4803      	ldr	r0, [pc, #12]	; (2d60 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2d54:	4c03      	ldr	r4, [pc, #12]	; (2d64 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2d56:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2d58:	4803      	ldr	r0, [pc, #12]	; (2d68 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2d5a:	47a0      	blx	r4
    2d5c:	bd10      	pop	{r4, pc}
    2d5e:	bf00      	nop
    2d60:	20001058 	.word	0x20001058
    2d64:	0000472d 	.word	0x0000472d
    2d68:	2000122c 	.word	0x2000122c
    2d6c:	00000000 	.word	0x00000000

00002d70 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2d70:	4bb1      	ldr	r3, [pc, #708]	; (3038 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	2b00      	cmp	r3, #0
    2d76:	f000 810a 	beq.w	2f8e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x21e>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d7e:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2d80:	2300      	movs	r3, #0
    2d82:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2d86:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2d8a:	4bac      	ldr	r3, [pc, #688]	; (303c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2d8c:	781a      	ldrb	r2, [r3, #0]
    2d8e:	3208      	adds	r2, #8
    2d90:	49ab      	ldr	r1, [pc, #684]	; (3040 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2d92:	5c8e      	ldrb	r6, [r1, r2]
    2d94:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2d96:	781a      	ldrb	r2, [r3, #0]
    2d98:	b2d2      	uxtb	r2, r2
    2d9a:	5c8d      	ldrb	r5, [r1, r2]
    2d9c:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2d9e:	781a      	ldrb	r2, [r3, #0]
    2da0:	3201      	adds	r2, #1
    2da2:	b2d2      	uxtb	r2, r2
    2da4:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2da6:	781a      	ldrb	r2, [r3, #0]
    2da8:	f002 0207 	and.w	r2, r2, #7
    2dac:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2dae:	781b      	ldrb	r3, [r3, #0]
    2db0:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2db4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2db8:	4ba2      	ldr	r3, [pc, #648]	; (3044 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2dba:	bf14      	ite	ne
    2dbc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2dc0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2dc4:	4b9d      	ldr	r3, [pc, #628]	; (303c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2dc6:	781b      	ldrb	r3, [r3, #0]
    2dc8:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2dcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2dd0:	4b9c      	ldr	r3, [pc, #624]	; (3044 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2dd2:	bf14      	ite	ne
    2dd4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2dd8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2ddc:	4b97      	ldr	r3, [pc, #604]	; (303c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2de4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2de8:	4b96      	ldr	r3, [pc, #600]	; (3044 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2dea:	bf14      	ite	ne
    2dec:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2df0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2df4:	2302      	movs	r3, #2
    2df6:	f10d 0206 	add.w	r2, sp, #6
    2dfa:	2100      	movs	r1, #0
    2dfc:	4892      	ldr	r0, [pc, #584]	; (3048 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    2dfe:	4c93      	ldr	r4, [pc, #588]	; (304c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2e00:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2e02:	2302      	movs	r3, #2
    2e04:	aa01      	add	r2, sp, #4
    2e06:	2100      	movs	r1, #0
    2e08:	4891      	ldr	r0, [pc, #580]	; (3050 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    2e0a:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2e0c:	f8df b260 	ldr.w	fp, [pc, #608]	; 3070 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>
    2e10:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2e14:	47d8      	blx	fp
    2e16:	f8df a25c 	ldr.w	sl, [pc, #604]	; 3074 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
    2e1a:	a385      	add	r3, pc, #532	; (adr r3, 3030 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e20:	47d0      	blx	sl
    2e22:	f8df 9254 	ldr.w	r9, [pc, #596]	; 3078 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x308>
    2e26:	47c8      	blx	r9
    2e28:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2e2c:	42a0      	cmp	r0, r4
    2e2e:	bf28      	it	cs
    2e30:	4620      	movcs	r0, r4
    2e32:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2e34:	fa1f f880 	uxth.w	r8, r0
    2e38:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2e3c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2e40:	47d8      	blx	fp
    2e42:	a37b      	add	r3, pc, #492	; (adr r3, 3030 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2e44:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e48:	47d0      	blx	sl
    2e4a:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2e4c:	42a0      	cmp	r0, r4
    2e4e:	bf28      	it	cs
    2e50:	4620      	movcs	r0, r4
    2e52:	b280      	uxth	r0, r0
    2e54:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2e58:	f1a5 0308 	sub.w	r3, r5, #8
    2e5c:	b2db      	uxtb	r3, r3
    2e5e:	2b01      	cmp	r3, #1
    2e60:	f240 808d 	bls.w	2f7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2e64:	2e0d      	cmp	r6, #13
    2e66:	f240 8098 	bls.w	2f9a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x22a>
		
		if (adcresult_0>10000){
    2e6a:	f242 7310 	movw	r3, #10000	; 0x2710
    2e6e:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2e70:	bf8c      	ite	hi
    2e72:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2e74:	237f      	movls	r3, #127	; 0x7f
    2e76:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
			
		if (adcresult_1>10000){
    2e7a:	f242 7310 	movw	r3, #10000	; 0x2710
    2e7e:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2e80:	bf8c      	ite	hi
    2e82:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2e84:	237f      	movls	r3, #127	; 0x7f
    2e86:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0]){
    2e8a:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2e8e:	3c04      	subs	r4, #4
    2e90:	0124      	lsls	r4, r4, #4
    2e92:	4b70      	ldr	r3, [pc, #448]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2e94:	689b      	ldr	r3, [r3, #8]
    2e96:	4423      	add	r3, r4
    2e98:	68da      	ldr	r2, [r3, #12]
    2e9a:	7812      	ldrb	r2, [r2, #0]
    2e9c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2ea0:	4291      	cmp	r1, r2
    2ea2:	d02f      	beq.n	2f04 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x194>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2ea4:	2a00      	cmp	r2, #0
    2ea6:	bf0c      	ite	eq
    2ea8:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2eac:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    2eb0:	6858      	ldr	r0, [r3, #4]
    2eb2:	bf0c      	ite	eq
    2eb4:	2290      	moveq	r2, #144	; 0x90
    2eb6:	2280      	movne	r2, #128	; 0x80
    2eb8:	2102      	movs	r1, #2
    2eba:	3005      	adds	r0, #5
    2ebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 306c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2ec0:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    2ec2:	4f64      	ldr	r7, [pc, #400]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2ec4:	68bb      	ldr	r3, [r7, #8]
    2ec6:	4423      	add	r3, r4
    2ec8:	6858      	ldr	r0, [r3, #4]
    2eca:	4632      	mov	r2, r6
    2ecc:	2102      	movs	r1, #2
    2ece:	3007      	adds	r0, #7
    2ed0:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    2ed2:	68bb      	ldr	r3, [r7, #8]
    2ed4:	4423      	add	r3, r4
    2ed6:	6858      	ldr	r0, [r3, #4]
    2ed8:	464a      	mov	r2, r9
    2eda:	2102      	movs	r1, #2
    2edc:	3009      	adds	r0, #9
    2ede:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[21], 2, actuator);
    2ee0:	68bb      	ldr	r3, [r7, #8]
    2ee2:	4423      	add	r3, r4
    2ee4:	6858      	ldr	r0, [r3, #4]
    2ee6:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2eea:	2102      	movs	r1, #2
    2eec:	3015      	adds	r0, #21
    2eee:	47c0      	blx	r8
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    2ef0:	68bb      	ldr	r3, [r7, #8]
    2ef2:	441c      	add	r4, r3
    2ef4:	68e3      	ldr	r3, [r4, #12]
    2ef6:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    2efa:	1f31      	subs	r1, r6, #4
    2efc:	b2c9      	uxtb	r1, r1
    2efe:	4638      	mov	r0, r7
    2f00:	4b55      	ldr	r3, [pc, #340]	; (3058 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2f02:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0]){
    2f04:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2f08:	3c04      	subs	r4, #4
    2f0a:	0124      	lsls	r4, r4, #4
    2f0c:	4b51      	ldr	r3, [pc, #324]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f0e:	689b      	ldr	r3, [r3, #8]
    2f10:	4423      	add	r3, r4
    2f12:	68da      	ldr	r2, [r3, #12]
    2f14:	7812      	ldrb	r2, [r2, #0]
    2f16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2f1a:	4291      	cmp	r1, r2
    2f1c:	d02f      	beq.n	2f7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2f1e:	2a00      	cmp	r2, #0
    2f20:	bf0c      	ite	eq
    2f22:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2f26:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    2f2a:	6858      	ldr	r0, [r3, #4]
    2f2c:	bf0c      	ite	eq
    2f2e:	2290      	moveq	r2, #144	; 0x90
    2f30:	2280      	movne	r2, #128	; 0x80
    2f32:	2102      	movs	r1, #2
    2f34:	3005      	adds	r0, #5
    2f36:	f8df 8134 	ldr.w	r8, [pc, #308]	; 306c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2f3a:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_0);
    2f3c:	4f45      	ldr	r7, [pc, #276]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f3e:	68bb      	ldr	r3, [r7, #8]
    2f40:	4423      	add	r3, r4
    2f42:	6858      	ldr	r0, [r3, #4]
    2f44:	4632      	mov	r2, r6
    2f46:	2102      	movs	r1, #2
    2f48:	3007      	adds	r0, #7
    2f4a:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);
    2f4c:	68bb      	ldr	r3, [r7, #8]
    2f4e:	4423      	add	r3, r4
    2f50:	6858      	ldr	r0, [r3, #4]
    2f52:	464a      	mov	r2, r9
    2f54:	2102      	movs	r1, #2
    2f56:	3009      	adds	r0, #9
    2f58:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[21], 2, actuator);
    2f5a:	68bb      	ldr	r3, [r7, #8]
    2f5c:	4423      	add	r3, r4
    2f5e:	6858      	ldr	r0, [r3, #4]
    2f60:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2f64:	2102      	movs	r1, #2
    2f66:	3015      	adds	r0, #21
    2f68:	47c0      	blx	r8
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;
    2f6a:	68bb      	ldr	r3, [r7, #8]
    2f6c:	441c      	add	r4, r3
    2f6e:	68e3      	ldr	r3, [r4, #12]
    2f70:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    2f74:	1f29      	subs	r1, r5, #4
    2f76:	b2c9      	uxtb	r1, r1
    2f78:	4638      	mov	r0, r7
    2f7a:	4b37      	ldr	r3, [pc, #220]	; (3058 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2f7c:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    2f7e:	2200      	movs	r2, #0
    2f80:	4b2d      	ldr	r3, [pc, #180]	; (3038 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2f82:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    2f84:	4b35      	ldr	r3, [pc, #212]	; (305c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>)
    2f86:	4798      	blx	r3
}
    2f88:	b003      	add	sp, #12
    2f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_pbf4_reva_hardware_transfer_complete++;
    2f8e:	4a2a      	ldr	r2, [pc, #168]	; (3038 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2f90:	7813      	ldrb	r3, [r2, #0]
    2f92:	3301      	adds	r3, #1
    2f94:	b2db      	uxtb	r3, r3
    2f96:	7013      	strb	r3, [r2, #0]
    2f98:	4770      	bx	lr
		if (adc_index_1 == 0 || adc_index_1 == 1){
    2f9a:	2d01      	cmp	r5, #1
    2f9c:	d936      	bls.n	300c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    2f9e:	b2b9      	uxth	r1, r7
    2fa0:	4630      	mov	r0, r6
    2fa2:	4c2f      	ldr	r4, [pc, #188]	; (3060 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    2fa4:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    2fa6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2faa:	4628      	mov	r0, r5
    2fac:	47a0      	blx	r4
		if (grid_ain_get_changed(adc_index_0)){
    2fae:	4630      	mov	r0, r6
    2fb0:	4b2c      	ldr	r3, [pc, #176]	; (3064 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    2fb2:	4798      	blx	r3
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d161      	bne.n	307c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30c>
		if (grid_ain_get_changed(adc_index_1)){
    2fb8:	4628      	mov	r0, r5
    2fba:	4b2a      	ldr	r3, [pc, #168]	; (3064 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    2fbc:	4798      	blx	r3
    2fbe:	2800      	cmp	r0, #0
    2fc0:	d0dd      	beq.n	2f7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    2fc2:	2107      	movs	r1, #7
    2fc4:	4628      	mov	r0, r5
    2fc6:	4b28      	ldr	r3, [pc, #160]	; (3068 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>)
    2fc8:	4798      	blx	r3
    2fca:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    2fcc:	ea4f 1805 	mov.w	r8, r5, lsl #4
    2fd0:	4c20      	ldr	r4, [pc, #128]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2fd2:	68a3      	ldr	r3, [r4, #8]
    2fd4:	4443      	add	r3, r8
    2fd6:	6858      	ldr	r0, [r3, #4]
    2fd8:	462a      	mov	r2, r5
    2fda:	2102      	movs	r1, #2
    2fdc:	3007      	adds	r0, #7
    2fde:	4f23      	ldr	r7, [pc, #140]	; (306c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    2fe0:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    2fe2:	68a3      	ldr	r3, [r4, #8]
    2fe4:	4443      	add	r3, r8
    2fe6:	6858      	ldr	r0, [r3, #4]
    2fe8:	b2f2      	uxtb	r2, r6
    2fea:	2102      	movs	r1, #2
    2fec:	3009      	adds	r0, #9
    2fee:	47b8      	blx	r7
			uint8_t actuator = 2*value;
    2ff0:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    2ff2:	68a3      	ldr	r3, [r4, #8]
    2ff4:	4443      	add	r3, r8
    2ff6:	6858      	ldr	r0, [r3, #4]
    2ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2ffc:	2102      	movs	r1, #2
    2ffe:	3015      	adds	r0, #21
    3000:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    3002:	4629      	mov	r1, r5
    3004:	4620      	mov	r0, r4
    3006:	4b14      	ldr	r3, [pc, #80]	; (3058 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    3008:	4798      	blx	r3
    300a:	e7b8      	b.n	2f7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    300c:	b2b9      	uxth	r1, r7
    300e:	f64f 78ff 	movw	r8, #65535	; 0xffff
    3012:	eba8 0101 	sub.w	r1, r8, r1
    3016:	4630      	mov	r0, r6
    3018:	4c11      	ldr	r4, [pc, #68]	; (3060 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    301a:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    301c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3020:	eba8 0101 	sub.w	r1, r8, r1
    3024:	4628      	mov	r0, r5
    3026:	47a0      	blx	r4
    3028:	e7c1      	b.n	2fae <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x23e>
    302a:	bf00      	nop
    302c:	f3af 8000 	nop.w
    3030:	47ae147b 	.word	0x47ae147b
    3034:	3ff07ae1 	.word	0x3ff07ae1
    3038:	200017ec 	.word	0x200017ec
    303c:	2000363c 	.word	0x2000363c
    3040:	20000334 	.word	0x20000334
    3044:	41008000 	.word	0x41008000
    3048:	20001058 	.word	0x20001058
    304c:	0000464d 	.word	0x0000464d
    3050:	2000122c 	.word	0x2000122c
    3054:	20001d14 	.word	0x20001d14
    3058:	0000409b 	.word	0x0000409b
    305c:	00002d51 	.word	0x00002d51
    3060:	000011e9 	.word	0x000011e9
    3064:	000012e5 	.word	0x000012e5
    3068:	000012f5 	.word	0x000012f5
    306c:	000039e9 	.word	0x000039e9
    3070:	0000ba1d 	.word	0x0000ba1d
    3074:	0000bae9 	.word	0x0000bae9
    3078:	0000bf0d 	.word	0x0000bf0d
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    307c:	2107      	movs	r1, #7
    307e:	4630      	mov	r0, r6
    3080:	4b11      	ldr	r3, [pc, #68]	; (30c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x358>)
    3082:	4798      	blx	r3
    3084:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    3086:	ea4f 1906 	mov.w	r9, r6, lsl #4
    308a:	4c10      	ldr	r4, [pc, #64]	; (30cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35c>)
    308c:	68a3      	ldr	r3, [r4, #8]
    308e:	444b      	add	r3, r9
    3090:	6858      	ldr	r0, [r3, #4]
    3092:	4632      	mov	r2, r6
    3094:	2102      	movs	r1, #2
    3096:	3007      	adds	r0, #7
    3098:	f8df 8038 	ldr.w	r8, [pc, #56]	; 30d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x364>
    309c:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    309e:	68a3      	ldr	r3, [r4, #8]
    30a0:	444b      	add	r3, r9
    30a2:	6858      	ldr	r0, [r3, #4]
    30a4:	b2fa      	uxtb	r2, r7
    30a6:	2102      	movs	r1, #2
    30a8:	3009      	adds	r0, #9
    30aa:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    30ac:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    30ae:	68a3      	ldr	r3, [r4, #8]
    30b0:	444b      	add	r3, r9
    30b2:	6858      	ldr	r0, [r3, #4]
    30b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    30b8:	2102      	movs	r1, #2
    30ba:	3015      	adds	r0, #21
    30bc:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);
    30be:	4631      	mov	r1, r6
    30c0:	4620      	mov	r0, r4
    30c2:	4b03      	ldr	r3, [pc, #12]	; (30d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x360>)
    30c4:	4798      	blx	r3
    30c6:	e777      	b.n	2fb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x248>
    30c8:	000012f5 	.word	0x000012f5
    30cc:	20001d14 	.word	0x20001d14
    30d0:	0000409b 	.word	0x0000409b
    30d4:	000039e9 	.word	0x000039e9

000030d8 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    30d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    30da:	4f0b      	ldr	r7, [pc, #44]	; (3108 <grid_module_pbf4_reva_hardware_init+0x30>)
    30dc:	4c0b      	ldr	r4, [pc, #44]	; (310c <grid_module_pbf4_reva_hardware_init+0x34>)
    30de:	463b      	mov	r3, r7
    30e0:	2200      	movs	r2, #0
    30e2:	4611      	mov	r1, r2
    30e4:	4620      	mov	r0, r4
    30e6:	4e0a      	ldr	r6, [pc, #40]	; (3110 <grid_module_pbf4_reva_hardware_init+0x38>)
    30e8:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    30ea:	4d0a      	ldr	r5, [pc, #40]	; (3114 <grid_module_pbf4_reva_hardware_init+0x3c>)
    30ec:	463b      	mov	r3, r7
    30ee:	2200      	movs	r2, #0
    30f0:	4611      	mov	r1, r2
    30f2:	4628      	mov	r0, r5
    30f4:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    30f6:	2100      	movs	r1, #0
    30f8:	4620      	mov	r0, r4
    30fa:	4c07      	ldr	r4, [pc, #28]	; (3118 <grid_module_pbf4_reva_hardware_init+0x40>)
    30fc:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    30fe:	2100      	movs	r1, #0
    3100:	4628      	mov	r0, r5
    3102:	47a0      	blx	r4
    3104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3106:	bf00      	nop
    3108:	00002d71 	.word	0x00002d71
    310c:	20001058 	.word	0x20001058
    3110:	000045cd 	.word	0x000045cd
    3114:	2000122c 	.word	0x2000122c
    3118:	0000458d 	.word	0x0000458d

0000311c <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    311c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3120:	b097      	sub	sp, #92	; 0x5c
    3122:	4680      	mov	r8, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3124:	2307      	movs	r3, #7
    3126:	220e      	movs	r2, #14
    3128:	2105      	movs	r1, #5
    312a:	2010      	movs	r0, #16
    312c:	4c26      	ldr	r4, [pc, #152]	; (31c8 <grid_module_pbf4_reva_init+0xac>)
    312e:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    3130:	210c      	movs	r1, #12
    3132:	4826      	ldr	r0, [pc, #152]	; (31cc <grid_module_pbf4_reva_init+0xb0>)
    3134:	4b26      	ldr	r3, [pc, #152]	; (31d0 <grid_module_pbf4_reva_init+0xb4>)
    3136:	4798      	blx	r3
	
	grid_ui_model_init(mod, 12);
    3138:	210c      	movs	r1, #12
    313a:	4640      	mov	r0, r8
    313c:	4b25      	ldr	r3, [pc, #148]	; (31d4 <grid_module_pbf4_reva_init+0xb8>)
    313e:	4798      	blx	r3
    3140:	2500      	movs	r5, #0
	
	for(uint8_t i=0; i<12; i++){
		
		uint8_t payload_template[30] = {0};
    3142:	462c      	mov	r4, r5
    3144:	4f24      	ldr	r7, [pc, #144]	; (31d8 <grid_module_pbf4_reva_init+0xbc>)
    3146:	b2ee      	uxtb	r6, r5
    3148:	221e      	movs	r2, #30
    314a:	4621      	mov	r1, r4
    314c:	a80e      	add	r0, sp, #56	; 0x38
    314e:	47b8      	blx	r7
		
		if (i<8){ // PORENTIOMETERS & FADERS
    3150:	2e07      	cmp	r6, #7
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3152:	f04f 0303 	mov.w	r3, #3
    3156:	930b      	str	r3, [sp, #44]	; 0x2c
    3158:	940a      	str	r4, [sp, #40]	; 0x28
    315a:	9509      	str	r5, [sp, #36]	; 0x24
    315c:	f04f 0263 	mov.w	r2, #99	; 0x63
    3160:	9208      	str	r2, [sp, #32]
    3162:	9407      	str	r4, [sp, #28]
    3164:	9306      	str	r3, [sp, #24]
    3166:	f04f 0202 	mov.w	r2, #2
    316a:	9205      	str	r2, [sp, #20]
    316c:	9304      	str	r3, [sp, #16]
    316e:	9403      	str	r4, [sp, #12]
    3170:	9502      	str	r5, [sp, #8]
    3172:	bf94      	ite	ls
    3174:	23b0      	movls	r3, #176	; 0xb0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3176:	2390      	movhi	r3, #144	; 0x90
    3178:	9301      	str	r3, [sp, #4]
    317a:	9400      	str	r4, [sp, #0]
    317c:	4623      	mov	r3, r4
    317e:	4917      	ldr	r1, [pc, #92]	; (31dc <grid_module_pbf4_reva_init+0xc0>)
    3180:	a80e      	add	r0, sp, #56	; 0x38
    3182:	f8df 9070 	ldr.w	r9, [pc, #112]	; 31f4 <grid_module_pbf4_reva_init+0xd8>
    3186:	47c8      	blx	r9
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3188:	a80e      	add	r0, sp, #56	; 0x38
    318a:	4b15      	ldr	r3, [pc, #84]	; (31e0 <grid_module_pbf4_reva_init+0xc4>)
    318c:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    318e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    3192:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    3196:	2202      	movs	r2, #2
    3198:	9202      	str	r2, [sp, #8]
    319a:	ab0d      	add	r3, sp, #52	; 0x34
    319c:	9301      	str	r3, [sp, #4]
    319e:	b2c0      	uxtb	r0, r0
    31a0:	9000      	str	r0, [sp, #0]
    31a2:	ab0e      	add	r3, sp, #56	; 0x38
    31a4:	4631      	mov	r1, r6
    31a6:	4640      	mov	r0, r8
    31a8:	4e0e      	ldr	r6, [pc, #56]	; (31e4 <grid_module_pbf4_reva_init+0xc8>)
    31aa:	47b0      	blx	r6
    31ac:	3501      	adds	r5, #1
	for(uint8_t i=0; i<12; i++){
    31ae:	2d0c      	cmp	r5, #12
    31b0:	d1c9      	bne.n	3146 <grid_module_pbf4_reva_init+0x2a>
		
	}
	
	grid_report_sys_init(mod);
    31b2:	4640      	mov	r0, r8
    31b4:	4b0c      	ldr	r3, [pc, #48]	; (31e8 <grid_module_pbf4_reva_init+0xcc>)
    31b6:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    31b8:	4b0c      	ldr	r3, [pc, #48]	; (31ec <grid_module_pbf4_reva_init+0xd0>)
    31ba:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    31bc:	4b0c      	ldr	r3, [pc, #48]	; (31f0 <grid_module_pbf4_reva_init+0xd4>)
    31be:	4798      	blx	r3
	
    31c0:	b017      	add	sp, #92	; 0x5c
    31c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    31c6:	bf00      	nop
    31c8:	0000119d 	.word	0x0000119d
    31cc:	20003640 	.word	0x20003640
    31d0:	00002359 	.word	0x00002359
    31d4:	00003dc1 	.word	0x00003dc1
    31d8:	0000bfbb 	.word	0x0000bfbb
    31dc:	0000d550 	.word	0x0000d550
    31e0:	0000c3f1 	.word	0x0000c3f1
    31e4:	00003e85 	.word	0x00003e85
    31e8:	00003ea9 	.word	0x00003ea9
    31ec:	000030d9 	.word	0x000030d9
    31f0:	00002d51 	.word	0x00002d51
    31f4:	0000c3a9 	.word	0x0000c3a9

000031f8 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    31f8:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    31fa:	4803      	ldr	r0, [pc, #12]	; (3208 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    31fc:	4c03      	ldr	r4, [pc, #12]	; (320c <grid_module_po16_revb_hardware_start_transfer+0x14>)
    31fe:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3200:	4803      	ldr	r0, [pc, #12]	; (3210 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    3202:	47a0      	blx	r4
    3204:	bd10      	pop	{r4, pc}
    3206:	bf00      	nop
    3208:	20001058 	.word	0x20001058
    320c:	0000472d 	.word	0x0000472d
    3210:	2000122c 	.word	0x2000122c
    3214:	00000000 	.word	0x00000000

00003218 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3218:	4b75      	ldr	r3, [pc, #468]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	2b00      	cmp	r3, #0
    321e:	f000 8085 	beq.w	332c <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    3222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3226:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3228:	2300      	movs	r3, #0
    322a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    322e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    3232:	4b6f      	ldr	r3, [pc, #444]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3234:	785a      	ldrb	r2, [r3, #1]
    3236:	3208      	adds	r2, #8
    3238:	496e      	ldr	r1, [pc, #440]	; (33f4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1dc>)
    323a:	5c8d      	ldrb	r5, [r1, r2]
    323c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    323e:	785a      	ldrb	r2, [r3, #1]
    3240:	b2d2      	uxtb	r2, r2
    3242:	5c8c      	ldrb	r4, [r1, r2]
    3244:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    3246:	785a      	ldrb	r2, [r3, #1]
    3248:	3201      	adds	r2, #1
    324a:	b2d2      	uxtb	r2, r2
    324c:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    324e:	785a      	ldrb	r2, [r3, #1]
    3250:	f002 0207 	and.w	r2, r2, #7
    3254:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    3256:	785b      	ldrb	r3, [r3, #1]
    3258:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    325c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3260:	4b65      	ldr	r3, [pc, #404]	; (33f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    3262:	bf14      	ite	ne
    3264:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3268:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    326c:	4b60      	ldr	r3, [pc, #384]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    326e:	785b      	ldrb	r3, [r3, #1]
    3270:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3274:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3278:	4b5f      	ldr	r3, [pc, #380]	; (33f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    327a:	bf14      	ite	ne
    327c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3280:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    3284:	4b5a      	ldr	r3, [pc, #360]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3286:	785b      	ldrb	r3, [r3, #1]
    3288:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    328c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3290:	4b59      	ldr	r3, [pc, #356]	; (33f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    3292:	bf14      	ite	ne
    3294:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3298:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    329c:	2302      	movs	r3, #2
    329e:	f10d 0206 	add.w	r2, sp, #6
    32a2:	2100      	movs	r1, #0
    32a4:	4855      	ldr	r0, [pc, #340]	; (33fc <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e4>)
    32a6:	4e56      	ldr	r6, [pc, #344]	; (3400 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    32a8:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    32aa:	2302      	movs	r3, #2
    32ac:	aa01      	add	r2, sp, #4
    32ae:	2100      	movs	r1, #0
    32b0:	4854      	ldr	r0, [pc, #336]	; (3404 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1ec>)
    32b2:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    32b4:	f8df a168 	ldr.w	sl, [pc, #360]	; 3420 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>
    32b8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    32bc:	47d0      	blx	sl
    32be:	f8df 9164 	ldr.w	r9, [pc, #356]	; 3424 <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>
    32c2:	a349      	add	r3, pc, #292	; (adr r3, 33e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    32c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    32c8:	47c8      	blx	r9
    32ca:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3428 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>
    32ce:	47c0      	blx	r8
    32d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    32d4:	42b0      	cmp	r0, r6
    32d6:	bf28      	it	cs
    32d8:	4630      	movcs	r0, r6
    32da:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    32dc:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    32e0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    32e4:	47d0      	blx	sl
    32e6:	a340      	add	r3, pc, #256	; (adr r3, 33e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    32e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    32ec:	47c8      	blx	r9
    32ee:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    32f0:	42b0      	cmp	r0, r6
    32f2:	bf28      	it	cs
    32f4:	4630      	movcs	r0, r6
    32f6:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    32fa:	b2b9      	uxth	r1, r7
    32fc:	4628      	mov	r0, r5
    32fe:	4e42      	ldr	r6, [pc, #264]	; (3408 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3300:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    3302:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3306:	4620      	mov	r0, r4
    3308:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    330a:	4628      	mov	r0, r5
    330c:	4b3f      	ldr	r3, [pc, #252]	; (340c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    330e:	4798      	blx	r3
    3310:	b990      	cbnz	r0, 3338 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    3312:	4620      	mov	r0, r4
    3314:	4b3d      	ldr	r3, [pc, #244]	; (340c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    3316:	4798      	blx	r3
    3318:	2800      	cmp	r0, #0
    331a:	d139      	bne.n	3390 <grid_module_po16_revb_hardware_transfer_complete_cb+0x178>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    331c:	2200      	movs	r2, #0
    331e:	4b34      	ldr	r3, [pc, #208]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3320:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    3322:	4b3b      	ldr	r3, [pc, #236]	; (3410 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    3324:	4798      	blx	r3
}
    3326:	b002      	add	sp, #8
    3328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    332c:	4a30      	ldr	r2, [pc, #192]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    332e:	7813      	ldrb	r3, [r2, #0]
    3330:	3301      	adds	r3, #1
    3332:	b2db      	uxtb	r3, r3
    3334:	7013      	strb	r3, [r2, #0]
    3336:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3338:	2107      	movs	r1, #7
    333a:	4628      	mov	r0, r5
    333c:	4b35      	ldr	r3, [pc, #212]	; (3414 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    333e:	4798      	blx	r3
    3340:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    3344:	012f      	lsls	r7, r5, #4
    3346:	4e34      	ldr	r6, [pc, #208]	; (3418 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    3348:	68b3      	ldr	r3, [r6, #8]
    334a:	443b      	add	r3, r7
    334c:	6858      	ldr	r0, [r3, #4]
    334e:	462a      	mov	r2, r5
    3350:	2102      	movs	r1, #2
    3352:	3007      	adds	r0, #7
    3354:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 342c <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    3358:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    335a:	68b3      	ldr	r3, [r6, #8]
    335c:	443b      	add	r3, r7
    335e:	6858      	ldr	r0, [r3, #4]
    3360:	4642      	mov	r2, r8
    3362:	2102      	movs	r1, #2
    3364:	3009      	adds	r0, #9
    3366:	47c8      	blx	r9
		uint8_t actuator = 2*value;
    3368:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    336c:	68b3      	ldr	r3, [r6, #8]
    336e:	443b      	add	r3, r7
    3370:	6858      	ldr	r0, [r3, #4]
    3372:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3376:	2102      	movs	r1, #2
    3378:	3015      	adds	r0, #21
    337a:	47c8      	blx	r9
		mod->report_ui_array[adc_index_0].helper[0] = value;
    337c:	68b3      	ldr	r3, [r6, #8]
    337e:	441f      	add	r7, r3
    3380:	68fb      	ldr	r3, [r7, #12]
    3382:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    3386:	4629      	mov	r1, r5
    3388:	4630      	mov	r0, r6
    338a:	4b24      	ldr	r3, [pc, #144]	; (341c <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    338c:	4798      	blx	r3
    338e:	e7c0      	b.n	3312 <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3390:	2107      	movs	r1, #7
    3392:	4620      	mov	r0, r4
    3394:	4b1f      	ldr	r3, [pc, #124]	; (3414 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    3396:	4798      	blx	r3
    3398:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    339a:	0126      	lsls	r6, r4, #4
    339c:	4d1e      	ldr	r5, [pc, #120]	; (3418 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    339e:	68ab      	ldr	r3, [r5, #8]
    33a0:	4433      	add	r3, r6
    33a2:	6858      	ldr	r0, [r3, #4]
    33a4:	4622      	mov	r2, r4
    33a6:	2102      	movs	r1, #2
    33a8:	3007      	adds	r0, #7
    33aa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 342c <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    33ae:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    33b0:	68ab      	ldr	r3, [r5, #8]
    33b2:	4433      	add	r3, r6
    33b4:	6858      	ldr	r0, [r3, #4]
    33b6:	463a      	mov	r2, r7
    33b8:	2102      	movs	r1, #2
    33ba:	3009      	adds	r0, #9
    33bc:	47c0      	blx	r8
		uint8_t actuator = 2*value;
    33be:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    33c0:	68ab      	ldr	r3, [r5, #8]
    33c2:	4433      	add	r3, r6
    33c4:	6858      	ldr	r0, [r3, #4]
    33c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    33ca:	2102      	movs	r1, #2
    33cc:	3015      	adds	r0, #21
    33ce:	47c0      	blx	r8
		mod->report_ui_array[adc_index_1].helper[0] = value;
    33d0:	68ab      	ldr	r3, [r5, #8]
    33d2:	441e      	add	r6, r3
    33d4:	68f3      	ldr	r3, [r6, #12]
    33d6:	701f      	strb	r7, [r3, #0]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    33d8:	4621      	mov	r1, r4
    33da:	4628      	mov	r0, r5
    33dc:	4b0f      	ldr	r3, [pc, #60]	; (341c <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    33de:	4798      	blx	r3
    33e0:	e79c      	b.n	331c <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    33e2:	bf00      	nop
    33e4:	f3af 8000 	nop.w
    33e8:	47ae147b 	.word	0x47ae147b
    33ec:	3ff07ae1 	.word	0x3ff07ae1
    33f0:	20000646 	.word	0x20000646
    33f4:	20000344 	.word	0x20000344
    33f8:	41008000 	.word	0x41008000
    33fc:	20001058 	.word	0x20001058
    3400:	0000464d 	.word	0x0000464d
    3404:	2000122c 	.word	0x2000122c
    3408:	000011e9 	.word	0x000011e9
    340c:	000012e5 	.word	0x000012e5
    3410:	000031f9 	.word	0x000031f9
    3414:	000012f5 	.word	0x000012f5
    3418:	20001d14 	.word	0x20001d14
    341c:	0000409b 	.word	0x0000409b
    3420:	0000ba1d 	.word	0x0000ba1d
    3424:	0000bae9 	.word	0x0000bae9
    3428:	0000bf0d 	.word	0x0000bf0d
    342c:	000039e9 	.word	0x000039e9

00003430 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    3432:	4f0b      	ldr	r7, [pc, #44]	; (3460 <grid_module_po16_revb_hardware_init+0x30>)
    3434:	4c0b      	ldr	r4, [pc, #44]	; (3464 <grid_module_po16_revb_hardware_init+0x34>)
    3436:	463b      	mov	r3, r7
    3438:	2200      	movs	r2, #0
    343a:	4611      	mov	r1, r2
    343c:	4620      	mov	r0, r4
    343e:	4e0a      	ldr	r6, [pc, #40]	; (3468 <grid_module_po16_revb_hardware_init+0x38>)
    3440:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    3442:	4d0a      	ldr	r5, [pc, #40]	; (346c <grid_module_po16_revb_hardware_init+0x3c>)
    3444:	463b      	mov	r3, r7
    3446:	2200      	movs	r2, #0
    3448:	4611      	mov	r1, r2
    344a:	4628      	mov	r0, r5
    344c:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    344e:	2100      	movs	r1, #0
    3450:	4620      	mov	r0, r4
    3452:	4c07      	ldr	r4, [pc, #28]	; (3470 <grid_module_po16_revb_hardware_init+0x40>)
    3454:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3456:	2100      	movs	r1, #0
    3458:	4628      	mov	r0, r5
    345a:	47a0      	blx	r4
    345c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    345e:	bf00      	nop
    3460:	00003219 	.word	0x00003219
    3464:	20001058 	.word	0x20001058
    3468:	000045cd 	.word	0x000045cd
    346c:	2000122c 	.word	0x2000122c
    3470:	0000458d 	.word	0x0000458d

00003474 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    3474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3478:	b096      	sub	sp, #88	; 0x58
    347a:	4681      	mov	r9, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    347c:	2307      	movs	r3, #7
    347e:	220e      	movs	r2, #14
    3480:	2105      	movs	r1, #5
    3482:	2010      	movs	r0, #16
    3484:	4c24      	ldr	r4, [pc, #144]	; (3518 <grid_module_po16_revb_init+0xa4>)
    3486:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    3488:	2110      	movs	r1, #16
    348a:	4824      	ldr	r0, [pc, #144]	; (351c <grid_module_po16_revb_init+0xa8>)
    348c:	4b24      	ldr	r3, [pc, #144]	; (3520 <grid_module_po16_revb_init+0xac>)
    348e:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16);
    3490:	2110      	movs	r1, #16
    3492:	4648      	mov	r0, r9
    3494:	4b23      	ldr	r3, [pc, #140]	; (3524 <grid_module_po16_revb_init+0xb0>)
    3496:	4798      	blx	r3
    3498:	2500      	movs	r5, #0
	
	
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30] = {0};
    349a:	462c      	mov	r4, r5
    349c:	4f22      	ldr	r7, [pc, #136]	; (3528 <grid_module_po16_revb_init+0xb4>)
		

		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    349e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3540 <grid_module_po16_revb_init+0xcc>
		uint8_t payload_template[30] = {0};
    34a2:	221e      	movs	r2, #30
    34a4:	4621      	mov	r1, r4
    34a6:	a80e      	add	r0, sp, #56	; 0x38
    34a8:	47b8      	blx	r7
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    34aa:	2303      	movs	r3, #3
    34ac:	930b      	str	r3, [sp, #44]	; 0x2c
    34ae:	940a      	str	r4, [sp, #40]	; 0x28
    34b0:	9509      	str	r5, [sp, #36]	; 0x24
    34b2:	2263      	movs	r2, #99	; 0x63
    34b4:	9208      	str	r2, [sp, #32]
    34b6:	9407      	str	r4, [sp, #28]
    34b8:	9306      	str	r3, [sp, #24]
    34ba:	2602      	movs	r6, #2
    34bc:	9605      	str	r6, [sp, #20]
    34be:	9304      	str	r3, [sp, #16]
    34c0:	9403      	str	r4, [sp, #12]
    34c2:	9502      	str	r5, [sp, #8]
    34c4:	23b0      	movs	r3, #176	; 0xb0
    34c6:	9301      	str	r3, [sp, #4]
    34c8:	9400      	str	r4, [sp, #0]
    34ca:	4623      	mov	r3, r4
    34cc:	4632      	mov	r2, r6
    34ce:	4641      	mov	r1, r8
    34d0:	a80e      	add	r0, sp, #56	; 0x38
    34d2:	f8df a070 	ldr.w	sl, [pc, #112]	; 3544 <grid_module_po16_revb_init+0xd0>
    34d6:	47d0      	blx	sl
		);
			
		

		
		uint8_t payload_length = strlen(payload_template);
    34d8:	a80e      	add	r0, sp, #56	; 0x38
    34da:	4b14      	ldr	r3, [pc, #80]	; (352c <grid_module_po16_revb_init+0xb8>)
    34dc:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    34de:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    34e2:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    34e6:	9602      	str	r6, [sp, #8]
    34e8:	ab0d      	add	r3, sp, #52	; 0x34
    34ea:	9301      	str	r3, [sp, #4]
    34ec:	b2c0      	uxtb	r0, r0
    34ee:	9000      	str	r0, [sp, #0]
    34f0:	ab0e      	add	r3, sp, #56	; 0x38
    34f2:	4632      	mov	r2, r6
    34f4:	b2e9      	uxtb	r1, r5
    34f6:	4648      	mov	r0, r9
    34f8:	4e0d      	ldr	r6, [pc, #52]	; (3530 <grid_module_po16_revb_init+0xbc>)
    34fa:	47b0      	blx	r6
    34fc:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    34fe:	2d10      	cmp	r5, #16
    3500:	d1cf      	bne.n	34a2 <grid_module_po16_revb_init+0x2e>
		
	}
	
	grid_report_sys_init(mod);
    3502:	4648      	mov	r0, r9
    3504:	4b0b      	ldr	r3, [pc, #44]	; (3534 <grid_module_po16_revb_init+0xc0>)
    3506:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    3508:	4b0b      	ldr	r3, [pc, #44]	; (3538 <grid_module_po16_revb_init+0xc4>)
    350a:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    350c:	4b0b      	ldr	r3, [pc, #44]	; (353c <grid_module_po16_revb_init+0xc8>)
    350e:	4798      	blx	r3
	
    3510:	b016      	add	sp, #88	; 0x58
    3512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3516:	bf00      	nop
    3518:	0000119d 	.word	0x0000119d
    351c:	20003640 	.word	0x20003640
    3520:	00002359 	.word	0x00002359
    3524:	00003dc1 	.word	0x00003dc1
    3528:	0000bfbb 	.word	0x0000bfbb
    352c:	0000c3f1 	.word	0x0000c3f1
    3530:	00003e85 	.word	0x00003e85
    3534:	00003ea9 	.word	0x00003ea9
    3538:	00003431 	.word	0x00003431
    353c:	000031f9 	.word	0x000031f9
    3540:	0000d550 	.word	0x0000d550
    3544:	0000c3a9 	.word	0x0000c3a9

00003548 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    3548:	8982      	ldrh	r2, [r0, #12]
    354a:	b142      	cbz	r2, 355e <tx_cb_USART_GRID+0x16>
    354c:	f100 032b 	add.w	r3, r0, #43	; 0x2b
    3550:	322b      	adds	r2, #43	; 0x2b
    3552:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    3554:	2100      	movs	r1, #0
    3556:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    355a:	4293      	cmp	r3, r2
    355c:	d1fb      	bne.n	3556 <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    355e:	2300      	movs	r3, #0
    3560:	8183      	strh	r3, [r0, #12]
    3562:	4770      	bx	lr

00003564 <tx_cb_USART_GRID_W>:
{
    3564:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    3566:	4802      	ldr	r0, [pc, #8]	; (3570 <tx_cb_USART_GRID_W+0xc>)
    3568:	4b02      	ldr	r3, [pc, #8]	; (3574 <tx_cb_USART_GRID_W+0x10>)
    356a:	4798      	blx	r3
    356c:	bd08      	pop	{r3, pc}
    356e:	bf00      	nop
    3570:	200021d4 	.word	0x200021d4
    3574:	00003549 	.word	0x00003549

00003578 <tx_cb_USART_GRID_S>:
{
    3578:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    357a:	4802      	ldr	r0, [pc, #8]	; (3584 <tx_cb_USART_GRID_S+0xc>)
    357c:	4b02      	ldr	r3, [pc, #8]	; (3588 <tx_cb_USART_GRID_S+0x10>)
    357e:	4798      	blx	r3
    3580:	bd08      	pop	{r3, pc}
    3582:	bf00      	nop
    3584:	200026fc 	.word	0x200026fc
    3588:	00003549 	.word	0x00003549

0000358c <tx_cb_USART_GRID_E>:
{
    358c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    358e:	4802      	ldr	r0, [pc, #8]	; (3598 <tx_cb_USART_GRID_E+0xc>)
    3590:	4b02      	ldr	r3, [pc, #8]	; (359c <tx_cb_USART_GRID_E+0x10>)
    3592:	4798      	blx	r3
    3594:	bd08      	pop	{r3, pc}
    3596:	bf00      	nop
    3598:	20003128 	.word	0x20003128
    359c:	00003549 	.word	0x00003549

000035a0 <tx_cb_USART_GRID_N>:
{
    35a0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    35a2:	4802      	ldr	r0, [pc, #8]	; (35ac <tx_cb_USART_GRID_N+0xc>)
    35a4:	4b02      	ldr	r3, [pc, #8]	; (35b0 <tx_cb_USART_GRID_N+0x10>)
    35a6:	4798      	blx	r3
    35a8:	bd08      	pop	{r3, pc}
    35aa:	bf00      	nop
    35ac:	200012ac 	.word	0x200012ac
    35b0:	00003549 	.word	0x00003549

000035b4 <err_cb_USART_GRID>:
{
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
    35b4:	b508      	push	{r3, lr}
	por->usart_error_flag = 1;	
    35b6:	2301      	movs	r3, #1
    35b8:	7603      	strb	r3, [r0, #24]
	
	usart_async_disable(por->usart);
    35ba:	6840      	ldr	r0, [r0, #4]
    35bc:	4b01      	ldr	r3, [pc, #4]	; (35c4 <err_cb_USART_GRID+0x10>)
    35be:	4798      	blx	r3
    35c0:	bd08      	pop	{r3, pc}
    35c2:	bf00      	nop
    35c4:	0000535d 	.word	0x0000535d

000035c8 <err_cb_USART_GRID_W>:
{
    35c8:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_W);
    35ca:	4802      	ldr	r0, [pc, #8]	; (35d4 <err_cb_USART_GRID_W+0xc>)
    35cc:	4b02      	ldr	r3, [pc, #8]	; (35d8 <err_cb_USART_GRID_W+0x10>)
    35ce:	4798      	blx	r3
    35d0:	bd08      	pop	{r3, pc}
    35d2:	bf00      	nop
    35d4:	200021d4 	.word	0x200021d4
    35d8:	000035b5 	.word	0x000035b5

000035dc <err_cb_USART_GRID_S>:
{
    35dc:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_S);
    35de:	4802      	ldr	r0, [pc, #8]	; (35e8 <err_cb_USART_GRID_S+0xc>)
    35e0:	4b02      	ldr	r3, [pc, #8]	; (35ec <err_cb_USART_GRID_S+0x10>)
    35e2:	4798      	blx	r3
    35e4:	bd08      	pop	{r3, pc}
    35e6:	bf00      	nop
    35e8:	200026fc 	.word	0x200026fc
    35ec:	000035b5 	.word	0x000035b5

000035f0 <err_cb_USART_GRID_E>:
{
    35f0:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_E);
    35f2:	4802      	ldr	r0, [pc, #8]	; (35fc <err_cb_USART_GRID_E+0xc>)
    35f4:	4b02      	ldr	r3, [pc, #8]	; (3600 <err_cb_USART_GRID_E+0x10>)
    35f6:	4798      	blx	r3
    35f8:	bd08      	pop	{r3, pc}
    35fa:	bf00      	nop
    35fc:	20003128 	.word	0x20003128
    3600:	000035b5 	.word	0x000035b5

00003604 <err_cb_USART_GRID_N>:
{
    3604:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_N);
    3606:	4802      	ldr	r0, [pc, #8]	; (3610 <err_cb_USART_GRID_N+0xc>)
    3608:	4b02      	ldr	r3, [pc, #8]	; (3614 <err_cb_USART_GRID_N+0x10>)
    360a:	4798      	blx	r3
    360c:	bd08      	pop	{r3, pc}
    360e:	bf00      	nop
    3610:	200012ac 	.word	0x200012ac
    3614:	000035b5 	.word	0x000035b5

00003618 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    3618:	b508      	push	{r3, lr}
    361a:	7a83      	ldrb	r3, [r0, #10]
    361c:	011b      	lsls	r3, r3, #4
    361e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3622:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    3626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3628:	f022 0202 	bic.w	r2, r2, #2
    362c:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    362e:	2100      	movs	r1, #0
    3630:	7a80      	ldrb	r0, [r0, #10]
    3632:	4b01      	ldr	r3, [pc, #4]	; (3638 <grid_sys_port_reset_dma+0x20>)
    3634:	4798      	blx	r3
    3636:	bd08      	pop	{r3, pc}
    3638:	000063a5 	.word	0x000063a5

0000363c <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    363c:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    363e:	4802      	ldr	r0, [pc, #8]	; (3648 <dma_transfer_complete_w_cb+0xc>)
    3640:	4b02      	ldr	r3, [pc, #8]	; (364c <dma_transfer_complete_w_cb+0x10>)
    3642:	4798      	blx	r3
    3644:	bd08      	pop	{r3, pc}
    3646:	bf00      	nop
    3648:	200021d4 	.word	0x200021d4
    364c:	00003619 	.word	0x00003619

00003650 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    3650:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3652:	4802      	ldr	r0, [pc, #8]	; (365c <dma_transfer_complete_s_cb+0xc>)
    3654:	4b02      	ldr	r3, [pc, #8]	; (3660 <dma_transfer_complete_s_cb+0x10>)
    3656:	4798      	blx	r3
    3658:	bd08      	pop	{r3, pc}
    365a:	bf00      	nop
    365c:	200026fc 	.word	0x200026fc
    3660:	00003619 	.word	0x00003619

00003664 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    3664:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3666:	4802      	ldr	r0, [pc, #8]	; (3670 <dma_transfer_complete_e_cb+0xc>)
    3668:	4b02      	ldr	r3, [pc, #8]	; (3674 <dma_transfer_complete_e_cb+0x10>)
    366a:	4798      	blx	r3
    366c:	bd08      	pop	{r3, pc}
    366e:	bf00      	nop
    3670:	20003128 	.word	0x20003128
    3674:	00003619 	.word	0x00003619

00003678 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    3678:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    367a:	4802      	ldr	r0, [pc, #8]	; (3684 <dma_transfer_complete_n_cb+0xc>)
    367c:	4b02      	ldr	r3, [pc, #8]	; (3688 <dma_transfer_complete_n_cb+0x10>)
    367e:	4798      	blx	r3
    3680:	bd08      	pop	{r3, pc}
    3682:	bf00      	nop
    3684:	200012ac 	.word	0x200012ac
    3688:	00003619 	.word	0x00003619

0000368c <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3690:	4b3e      	ldr	r3, [pc, #248]	; (378c <grid_sys_uart_init+0x100>)
    3692:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3696:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    369a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    369e:	f042 0204 	orr.w	r2, r2, #4
    36a2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36a6:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    36aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    36ae:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    36b2:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    36b6:	f042 0204 	orr.w	r2, r2, #4
    36ba:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36be:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    36c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    36c6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    36ca:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    36ce:	f042 0204 	orr.w	r2, r2, #4
    36d2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36d6:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    36da:	f44f 7100 	mov.w	r1, #512	; 0x200
    36de:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    36e2:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    36e6:	f042 0204 	orr.w	r2, r2, #4
    36ea:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36ee:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    36f2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 37d8 <grid_sys_uart_init+0x14c>
    36f6:	4a26      	ldr	r2, [pc, #152]	; (3790 <grid_sys_uart_init+0x104>)
    36f8:	2101      	movs	r1, #1
    36fa:	4640      	mov	r0, r8
    36fc:	4c25      	ldr	r4, [pc, #148]	; (3794 <grid_sys_uart_init+0x108>)
    36fe:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    3700:	4f25      	ldr	r7, [pc, #148]	; (3798 <grid_sys_uart_init+0x10c>)
    3702:	4a26      	ldr	r2, [pc, #152]	; (379c <grid_sys_uart_init+0x110>)
    3704:	2101      	movs	r1, #1
    3706:	4638      	mov	r0, r7
    3708:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    370a:	4e25      	ldr	r6, [pc, #148]	; (37a0 <grid_sys_uart_init+0x114>)
    370c:	4a25      	ldr	r2, [pc, #148]	; (37a4 <grid_sys_uart_init+0x118>)
    370e:	2101      	movs	r1, #1
    3710:	4630      	mov	r0, r6
    3712:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    3714:	4d24      	ldr	r5, [pc, #144]	; (37a8 <grid_sys_uart_init+0x11c>)
    3716:	4a25      	ldr	r2, [pc, #148]	; (37ac <grid_sys_uart_init+0x120>)
    3718:	2101      	movs	r1, #1
    371a:	4628      	mov	r0, r5
    371c:	47a0      	blx	r4
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    371e:	2101      	movs	r1, #1
    3720:	4640      	mov	r0, r8
    3722:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 37dc <grid_sys_uart_init+0x150>
    3726:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    3728:	2101      	movs	r1, #1
    372a:	4638      	mov	r0, r7
    372c:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    372e:	2101      	movs	r1, #1
    3730:	4630      	mov	r0, r6
    3732:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    3734:	2101      	movs	r1, #1
    3736:	4628      	mov	r0, r5
    3738:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    373a:	4a1d      	ldr	r2, [pc, #116]	; (37b0 <grid_sys_uart_init+0x124>)
    373c:	2102      	movs	r1, #2
    373e:	4640      	mov	r0, r8
    3740:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    3742:	4a1c      	ldr	r2, [pc, #112]	; (37b4 <grid_sys_uart_init+0x128>)
    3744:	2102      	movs	r1, #2
    3746:	4638      	mov	r0, r7
    3748:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    374a:	4a1b      	ldr	r2, [pc, #108]	; (37b8 <grid_sys_uart_init+0x12c>)
    374c:	2102      	movs	r1, #2
    374e:	4630      	mov	r0, r6
    3750:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    3752:	4a1a      	ldr	r2, [pc, #104]	; (37bc <grid_sys_uart_init+0x130>)
    3754:	2102      	movs	r1, #2
    3756:	4628      	mov	r0, r5
    3758:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    375a:	4919      	ldr	r1, [pc, #100]	; (37c0 <grid_sys_uart_init+0x134>)
    375c:	4640      	mov	r0, r8
    375e:	4c19      	ldr	r4, [pc, #100]	; (37c4 <grid_sys_uart_init+0x138>)
    3760:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    3762:	4919      	ldr	r1, [pc, #100]	; (37c8 <grid_sys_uart_init+0x13c>)
    3764:	4638      	mov	r0, r7
    3766:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    3768:	4918      	ldr	r1, [pc, #96]	; (37cc <grid_sys_uart_init+0x140>)
    376a:	4630      	mov	r0, r6
    376c:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    376e:	4918      	ldr	r1, [pc, #96]	; (37d0 <grid_sys_uart_init+0x144>)
    3770:	4628      	mov	r0, r5
    3772:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    3774:	4640      	mov	r0, r8
    3776:	4c17      	ldr	r4, [pc, #92]	; (37d4 <grid_sys_uart_init+0x148>)
    3778:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    377a:	4638      	mov	r0, r7
    377c:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    377e:	4630      	mov	r0, r6
    3780:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    3782:	4628      	mov	r0, r5
    3784:	47a0      	blx	r4
    3786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    378a:	bf00      	nop
    378c:	41008000 	.word	0x41008000
    3790:	000035a1 	.word	0x000035a1
    3794:	000053b1 	.word	0x000053b1
    3798:	20001084 	.word	0x20001084
    379c:	0000358d 	.word	0x0000358d
    37a0:	200011dc 	.word	0x200011dc
    37a4:	00003579 	.word	0x00003579
    37a8:	2000118c 	.word	0x2000118c
    37ac:	00003565 	.word	0x00003565
    37b0:	00003605 	.word	0x00003605
    37b4:	000035f1 	.word	0x000035f1
    37b8:	000035dd 	.word	0x000035dd
    37bc:	000035c9 	.word	0x000035c9
    37c0:	20001d20 	.word	0x20001d20
    37c4:	00005389 	.word	0x00005389
    37c8:	200026e8 	.word	0x200026e8
    37cc:	20002c10 	.word	0x20002c10
    37d0:	20003668 	.word	0x20003668
    37d4:	00005331 	.word	0x00005331
    37d8:	200010d8 	.word	0x200010d8
    37dc:	00005425 	.word	0x00005425

000037e0 <grid_sys_dma_rx_init_one>:



}

void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    37e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37e2:	b083      	sub	sp, #12
    37e4:	4605      	mov	r5, r0
    37e6:	460f      	mov	r7, r1
    37e8:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    37ea:	7a84      	ldrb	r4, [r0, #10]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    37ec:	6843      	ldr	r3, [r0, #4]
    37ee:	6a19      	ldr	r1, [r3, #32]
    37f0:	3128      	adds	r1, #40	; 0x28
    37f2:	4620      	mov	r0, r4
    37f4:	4b0d      	ldr	r3, [pc, #52]	; (382c <grid_sys_dma_rx_init_one+0x4c>)
    37f6:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    37f8:	f505 7121 	add.w	r1, r5, #644	; 0x284
    37fc:	4620      	mov	r0, r4
    37fe:	4b0c      	ldr	r3, [pc, #48]	; (3830 <grid_sys_dma_rx_init_one+0x50>)
    3800:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    3802:	4639      	mov	r1, r7
    3804:	4620      	mov	r0, r4
    3806:	4b0b      	ldr	r3, [pc, #44]	; (3834 <grid_sys_dma_rx_init_one+0x54>)
    3808:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    380a:	4621      	mov	r1, r4
    380c:	a801      	add	r0, sp, #4
    380e:	4b0a      	ldr	r3, [pc, #40]	; (3838 <grid_sys_dma_rx_init_one+0x58>)
    3810:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    3812:	9b01      	ldr	r3, [sp, #4]
    3814:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3816:	2201      	movs	r2, #1
    3818:	2100      	movs	r1, #0
    381a:	4620      	mov	r0, r4
    381c:	4b07      	ldr	r3, [pc, #28]	; (383c <grid_sys_dma_rx_init_one+0x5c>)
    381e:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3820:	2100      	movs	r1, #0
    3822:	4620      	mov	r0, r4
    3824:	4b06      	ldr	r3, [pc, #24]	; (3840 <grid_sys_dma_rx_init_one+0x60>)
    3826:	4798      	blx	r3
	

}
    3828:	b003      	add	sp, #12
    382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    382c:	00006321 	.word	0x00006321
    3830:	00006311 	.word	0x00006311
    3834:	0000634d 	.word	0x0000634d
    3838:	000063e5 	.word	0x000063e5
    383c:	000062bd 	.word	0x000062bd
    3840:	000063a5 	.word	0x000063a5

00003844 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    3844:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3846:	4a10      	ldr	r2, [pc, #64]	; (3888 <grid_sys_dma_rx_init+0x44>)
    3848:	f44f 7116 	mov.w	r1, #600	; 0x258
    384c:	480f      	ldr	r0, [pc, #60]	; (388c <grid_sys_dma_rx_init+0x48>)
    384e:	4c10      	ldr	r4, [pc, #64]	; (3890 <grid_sys_dma_rx_init+0x4c>)
    3850:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    3852:	4a10      	ldr	r2, [pc, #64]	; (3894 <grid_sys_dma_rx_init+0x50>)
    3854:	f44f 7116 	mov.w	r1, #600	; 0x258
    3858:	480f      	ldr	r0, [pc, #60]	; (3898 <grid_sys_dma_rx_init+0x54>)
    385a:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    385c:	4a0f      	ldr	r2, [pc, #60]	; (389c <grid_sys_dma_rx_init+0x58>)
    385e:	f44f 7116 	mov.w	r1, #600	; 0x258
    3862:	480f      	ldr	r0, [pc, #60]	; (38a0 <grid_sys_dma_rx_init+0x5c>)
    3864:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    3866:	4a0f      	ldr	r2, [pc, #60]	; (38a4 <grid_sys_dma_rx_init+0x60>)
    3868:	f44f 7116 	mov.w	r1, #600	; 0x258
    386c:	480e      	ldr	r0, [pc, #56]	; (38a8 <grid_sys_dma_rx_init+0x64>)
    386e:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3870:	4b0e      	ldr	r3, [pc, #56]	; (38ac <grid_sys_dma_rx_init+0x68>)
    3872:	2200      	movs	r2, #0
    3874:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    3878:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    387c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    3880:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    3884:	bd10      	pop	{r4, pc}
    3886:	bf00      	nop
    3888:	00003679 	.word	0x00003679
    388c:	200012ac 	.word	0x200012ac
    3890:	000037e1 	.word	0x000037e1
    3894:	00003665 	.word	0x00003665
    3898:	20003128 	.word	0x20003128
    389c:	00003651 	.word	0x00003651
    38a0:	200026fc 	.word	0x200026fc
    38a4:	0000363d 	.word	0x0000363d
    38a8:	200021d4 	.word	0x200021d4
    38ac:	e000e100 	.word	0xe000e100

000038b0 <grid_sys_init>:
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}

void grid_sys_init(struct grid_sys_model* mod){
    38b0:	b510      	push	{r4, lr}
	
	mod->bank_select = 0;
    38b2:	2200      	movs	r2, #0
    38b4:	7242      	strb	r2, [r0, #9]
	
	mod->bank_color_r[0] = 200;
    38b6:	23c8      	movs	r3, #200	; 0xc8
    38b8:	7283      	strb	r3, [r0, #10]
	mod->bank_color_g[0] = 100;
    38ba:	2164      	movs	r1, #100	; 0x64
    38bc:	7381      	strb	r1, [r0, #14]
	mod->bank_color_b[0] = 0;
    38be:	7482      	strb	r2, [r0, #18]
	
	mod->bank_color_r[1] = 0;
    38c0:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[1] = 100;
    38c2:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[1] = 200;
    38c4:	74c3      	strb	r3, [r0, #19]
	
	mod->bank_color_r[2] = 50;
    38c6:	2432      	movs	r4, #50	; 0x32
    38c8:	7304      	strb	r4, [r0, #12]
	mod->bank_color_g[2] = 200;
    38ca:	7403      	strb	r3, [r0, #16]
	mod->bank_color_b[2] = 50;
    38cc:	7504      	strb	r4, [r0, #20]
	
	mod->bank_color_r[3] = 100;
    38ce:	7341      	strb	r1, [r0, #13]
	mod->bank_color_g[3] = 0;
    38d0:	7442      	strb	r2, [r0, #17]
	mod->bank_color_b[3] = 200;
    38d2:	7543      	strb	r3, [r0, #21]
	
	
	grid_port_init_all();
    38d4:	4b03      	ldr	r3, [pc, #12]	; (38e4 <grid_sys_init+0x34>)
    38d6:	4798      	blx	r3
	
	grid_sys_uart_init();
    38d8:	4b03      	ldr	r3, [pc, #12]	; (38e8 <grid_sys_init+0x38>)
    38da:	4798      	blx	r3
	grid_sys_dma_rx_init();
    38dc:	4b03      	ldr	r3, [pc, #12]	; (38ec <grid_sys_init+0x3c>)
    38de:	4798      	blx	r3
    38e0:	bd10      	pop	{r4, pc}
    38e2:	bf00      	nop
    38e4:	000015e9 	.word	0x000015e9
    38e8:	0000368d 	.word	0x0000368d
    38ec:	00003845 	.word	0x00003845

000038f0 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    38f0:	6980      	ldr	r0, [r0, #24]
    38f2:	4770      	bx	lr

000038f4 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    38f4:	6980      	ldr	r0, [r0, #24]
	
	

}
    38f6:	1a40      	subs	r0, r0, r1
    38f8:	4770      	bx	lr

000038fa <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    38fa:	6983      	ldr	r3, [r0, #24]
    38fc:	3301      	adds	r3, #1
    38fe:	6183      	str	r3, [r0, #24]
    3900:	4770      	bx	lr

00003902 <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    3902:	7a00      	ldrb	r0, [r0, #8]
    3904:	4770      	bx	lr

00003906 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    3906:	2300      	movs	r3, #0
    3908:	7203      	strb	r3, [r0, #8]
    390a:	4770      	bx	lr

0000390c <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    390c:	7983      	ldrb	r3, [r0, #6]
    390e:	b123      	cbz	r3, 391a <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3910:	2b01      	cmp	r3, #1
    3912:	d00f      	beq.n	3934 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    3914:	2b02      	cmp	r3, #2
    3916:	d015      	beq.n	3944 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3918:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    391a:	8880      	ldrh	r0, [r0, #4]
    391c:	0840      	lsrs	r0, r0, #1
    391e:	387d      	subs	r0, #125	; 0x7d
    3920:	2800      	cmp	r0, #0
    3922:	bfb8      	it	lt
    3924:	4240      	neglt	r0, r0
    3926:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    392a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    392e:	f3c0 0047 	ubfx	r0, r0, #1, #8
    3932:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    3934:	8880      	ldrh	r0, [r0, #4]
    3936:	4b06      	ldr	r3, [pc, #24]	; (3950 <grid_sys_alert_get_color_intensity+0x44>)
    3938:	fba3 3000 	umull	r3, r0, r3, r0
    393c:	f340 1000 	sbfx	r0, r0, #4, #1
    3940:	b2c0      	uxtb	r0, r0
    3942:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3944:	8880      	ldrh	r0, [r0, #4]
    3946:	2864      	cmp	r0, #100	; 0x64
    3948:	bf8c      	ite	hi
    394a:	20ff      	movhi	r0, #255	; 0xff
    394c:	2000      	movls	r0, #0
    394e:	4770      	bx	lr
    3950:	10624dd3 	.word	0x10624dd3

00003954 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    3954:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    3956:	2401      	movs	r4, #1
    3958:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    395a:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    395c:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    395e:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    3960:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3964:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    3966:	f89d 3004 	ldrb.w	r3, [sp, #4]
    396a:	7183      	strb	r3, [r0, #6]
	
}
    396c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3970:	4770      	bx	lr

00003972 <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    3972:	7840      	ldrb	r0, [r0, #1]
    3974:	4770      	bx	lr

00003976 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    3976:	7880      	ldrb	r0, [r0, #2]
    3978:	4770      	bx	lr

0000397a <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    397a:	78c0      	ldrb	r0, [r0, #3]
    397c:	4770      	bx	lr

0000397e <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    397e:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    3980:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3984:	b2d8      	uxtb	r0, r3
    3986:	2809      	cmp	r0, #9
    3988:	d90d      	bls.n	39a6 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    398a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    398e:	b2db      	uxtb	r3, r3
    3990:	2b05      	cmp	r3, #5
    3992:	d903      	bls.n	399c <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    3994:	b131      	cbz	r1, 39a4 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    3996:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    3998:	2000      	movs	r0, #0
    399a:	4770      	bx	lr
		result = ascii - 97 + 10;
    399c:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    39a0:	b2c0      	uxtb	r0, r0
    39a2:	4770      	bx	lr
	uint8_t result = 0;
    39a4:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    39a6:	4770      	bx	lr

000039a8 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    39a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    39ac:	b1c1      	cbz	r1, 39e0 <grid_sys_read_hex_string_value+0x38>
    39ae:	4690      	mov	r8, r2
    39b0:	1e45      	subs	r5, r0, #1
    39b2:	1e4b      	subs	r3, r1, #1
    39b4:	009c      	lsls	r4, r3, #2
    39b6:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    39ba:	3f02      	subs	r7, #2
    39bc:	b2db      	uxtb	r3, r3
    39be:	1aff      	subs	r7, r7, r3
    39c0:	00bf      	lsls	r7, r7, #2
    39c2:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    39c4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 39e4 <grid_sys_read_hex_string_value+0x3c>
    39c8:	4641      	mov	r1, r8
    39ca:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    39ce:	47c8      	blx	r9
    39d0:	40a0      	lsls	r0, r4
    39d2:	4406      	add	r6, r0
    39d4:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    39d6:	42bc      	cmp	r4, r7
    39d8:	d1f6      	bne.n	39c8 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    39da:	4630      	mov	r0, r6
    39dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    39e0:	2600      	movs	r6, #0
	return result;
    39e2:	e7fa      	b.n	39da <grid_sys_read_hex_string_value+0x32>
    39e4:	0000397f 	.word	0x0000397f

000039e8 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    39e8:	b530      	push	{r4, r5, lr}
    39ea:	b085      	sub	sp, #20
    39ec:	4605      	mov	r5, r0
    39ee:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    39f0:	4909      	ldr	r1, [pc, #36]	; (3a18 <grid_sys_write_hex_string_value+0x30>)
    39f2:	a801      	add	r0, sp, #4
    39f4:	4b09      	ldr	r3, [pc, #36]	; (3a1c <grid_sys_write_hex_string_value+0x34>)
    39f6:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    39f8:	b164      	cbz	r4, 3a14 <grid_sys_write_hex_string_value+0x2c>
    39fa:	ab04      	add	r3, sp, #16
    39fc:	1b1a      	subs	r2, r3, r4
    39fe:	3a05      	subs	r2, #5
    3a00:	1e6b      	subs	r3, r5, #1
    3a02:	1e60      	subs	r0, r4, #1
    3a04:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3a08:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3a0c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3a10:	4283      	cmp	r3, r0
    3a12:	d1f9      	bne.n	3a08 <grid_sys_write_hex_string_value+0x20>
	}

}
    3a14:	b005      	add	sp, #20
    3a16:	bd30      	pop	{r4, r5, pc}
    3a18:	0000d584 	.word	0x0000d584
    3a1c:	0000c3a9 	.word	0x0000c3a9

00003a20 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3a20:	4b34      	ldr	r3, [pc, #208]	; (3af4 <grid_sys_get_hwcfg+0xd4>)
    3a22:	681b      	ldr	r3, [r3, #0]
    3a24:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a28:	d002      	beq.n	3a30 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3a2a:	4b32      	ldr	r3, [pc, #200]	; (3af4 <grid_sys_get_hwcfg+0xd4>)
    3a2c:	6818      	ldr	r0, [r3, #0]
    3a2e:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a34:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3a36:	4b30      	ldr	r3, [pc, #192]	; (3af8 <grid_sys_get_hwcfg+0xd8>)
    3a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3a40:	492e      	ldr	r1, [pc, #184]	; (3afc <grid_sys_get_hwcfg+0xdc>)
    3a42:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3a46:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3a4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3a4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    3a52:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3a56:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3a5a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    3a5e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3a62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3a66:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3a6a:	4925      	ldr	r1, [pc, #148]	; (3b00 <grid_sys_get_hwcfg+0xe0>)
    3a6c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3a70:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    3a74:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    3a7c:	2001      	movs	r0, #1
    3a7e:	4b21      	ldr	r3, [pc, #132]	; (3b04 <grid_sys_get_hwcfg+0xe4>)
    3a80:	4798      	blx	r3
    3a82:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    3a84:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a86:	4d1c      	ldr	r5, [pc, #112]	; (3af8 <grid_sys_get_hwcfg+0xd8>)
    3a88:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    3a8c:	4f1d      	ldr	r7, [pc, #116]	; (3b04 <grid_sys_get_hwcfg+0xe4>)
    3a8e:	e00c      	b.n	3aaa <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    3a90:	2e07      	cmp	r6, #7
    3a92:	d027      	beq.n	3ae4 <grid_sys_get_hwcfg+0xc4>
    3a94:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    3a98:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    3a9c:	2001      	movs	r0, #1
    3a9e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3aa0:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    3aa4:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    3aa6:	2e08      	cmp	r6, #8
    3aa8:	d01c      	beq.n	3ae4 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3aaa:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    3aae:	2001      	movs	r0, #1
    3ab0:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3ab2:	a801      	add	r0, sp, #4
    3ab4:	4b14      	ldr	r3, [pc, #80]	; (3b08 <grid_sys_get_hwcfg+0xe8>)
    3ab6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3ab8:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3abc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3ac0:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3ac4:	405c      	eors	r4, r3
    3ac6:	4014      	ands	r4, r2
    3ac8:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3aca:	a801      	add	r0, sp, #4
    3acc:	4b0f      	ldr	r3, [pc, #60]	; (3b0c <grid_sys_get_hwcfg+0xec>)
    3ace:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3ad0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3ad4:	d0dc      	beq.n	3a90 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3ad6:	2301      	movs	r3, #1
    3ad8:	40b3      	lsls	r3, r6
    3ada:	ea43 0808 	orr.w	r8, r3, r8
    3ade:	fa5f f888 	uxtb.w	r8, r8
    3ae2:	e7d5      	b.n	3a90 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3ae4:	4b03      	ldr	r3, [pc, #12]	; (3af4 <grid_sys_get_hwcfg+0xd4>)
    3ae6:	f8c3 8000 	str.w	r8, [r3]
}
    3aea:	4b02      	ldr	r3, [pc, #8]	; (3af4 <grid_sys_get_hwcfg+0xd4>)
    3aec:	6818      	ldr	r0, [r3, #0]
    3aee:	b003      	add	sp, #12
    3af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3af4:	20000354 	.word	0x20000354
    3af8:	41008000 	.word	0x41008000
    3afc:	40002000 	.word	0x40002000
    3b00:	40028000 	.word	0x40028000
    3b04:	000047d5 	.word	0x000047d5
    3b08:	00004755 	.word	0x00004755
    3b0c:	00004763 	.word	0x00004763

00003b10 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b14:	b085      	sub	sp, #20
    3b16:	4681      	mov	r9, r0
    3b18:	460c      	mov	r4, r1
	uint32_t hwtype = grid_sys_get_hwcfg();
    3b1a:	4b53      	ldr	r3, [pc, #332]	; (3c68 <grid_sys_bank_select+0x158>)
    3b1c:	4798      	blx	r3
    3b1e:	4682      	mov	sl, r0
	if (banknumber == 255){
    3b20:	2cff      	cmp	r4, #255	; 0xff
    3b22:	d008      	beq.n	3b36 <grid_sys_bank_select+0x26>
		mod->bank_select = banknumber%4;
    3b24:	f004 0403 	and.w	r4, r4, #3
    3b28:	f889 4009 	strb.w	r4, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3b2c:	2500      	movs	r5, #0
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3b2e:	f8df b14c 	ldr.w	fp, [pc, #332]	; 3c7c <grid_sys_bank_select+0x16c>
    3b32:	9503      	str	r5, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3b34:	e064      	b.n	3c00 <grid_sys_bank_select+0xf0>
		mod->bank_select = 255;
    3b36:	23ff      	movs	r3, #255	; 0xff
    3b38:	f889 3009 	strb.w	r3, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3b3c:	2500      	movs	r5, #0
    3b3e:	f8df b138 	ldr.w	fp, [pc, #312]	; 3c78 <grid_sys_bank_select+0x168>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3b42:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3c7c <grid_sys_bank_select+0x16c>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3b46:	e01c      	b.n	3b82 <grid_sys_bank_select+0x72>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3b48:	f04f 09ff 	mov.w	r9, #255	; 0xff
    3b4c:	f8cd 9004 	str.w	r9, [sp, #4]
    3b50:	2600      	movs	r6, #0
    3b52:	9600      	str	r6, [sp, #0]
    3b54:	4633      	mov	r3, r6
    3b56:	4632      	mov	r2, r6
    3b58:	4621      	mov	r1, r4
    3b5a:	4658      	mov	r0, fp
    3b5c:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3b5e:	9601      	str	r6, [sp, #4]
    3b60:	2305      	movs	r3, #5
    3b62:	9300      	str	r3, [sp, #0]
    3b64:	4633      	mov	r3, r6
    3b66:	4632      	mov	r2, r6
    3b68:	4621      	mov	r1, r4
    3b6a:	4658      	mov	r0, fp
    3b6c:	4f3f      	ldr	r7, [pc, #252]	; (3c6c <grid_sys_bank_select+0x15c>)
    3b6e:	47b8      	blx	r7
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3b70:	9601      	str	r6, [sp, #4]
    3b72:	9600      	str	r6, [sp, #0]
    3b74:	464b      	mov	r3, r9
    3b76:	4632      	mov	r2, r6
    3b78:	4621      	mov	r1, r4
    3b7a:	4658      	mov	r0, fp
    3b7c:	4c3c      	ldr	r4, [pc, #240]	; (3c70 <grid_sys_bank_select+0x160>)
    3b7e:	47a0      	blx	r4
    3b80:	3501      	adds	r5, #1
    3b82:	b2ec      	uxtb	r4, r5
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3b84:	4658      	mov	r0, fp
    3b86:	4b3b      	ldr	r3, [pc, #236]	; (3c74 <grid_sys_bank_select+0x164>)
    3b88:	4798      	blx	r3
    3b8a:	42a0      	cmp	r0, r4
    3b8c:	d968      	bls.n	3c60 <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3b8e:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3b92:	d0d9      	beq.n	3b48 <grid_sys_bank_select+0x38>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3b94:	2306      	movs	r3, #6
    3b96:	9301      	str	r3, [sp, #4]
    3b98:	9300      	str	r3, [sp, #0]
    3b9a:	2200      	movs	r2, #0
    3b9c:	4621      	mov	r1, r4
    3b9e:	4658      	mov	r0, fp
    3ba0:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3ba2:	233f      	movs	r3, #63	; 0x3f
    3ba4:	9301      	str	r3, [sp, #4]
    3ba6:	9300      	str	r3, [sp, #0]
    3ba8:	2200      	movs	r2, #0
    3baa:	4621      	mov	r1, r4
    3bac:	4658      	mov	r0, fp
    3bae:	4e2f      	ldr	r6, [pc, #188]	; (3c6c <grid_sys_bank_select+0x15c>)
    3bb0:	47b0      	blx	r6
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3bb2:	237f      	movs	r3, #127	; 0x7f
    3bb4:	9301      	str	r3, [sp, #4]
    3bb6:	9300      	str	r3, [sp, #0]
    3bb8:	2200      	movs	r2, #0
    3bba:	4621      	mov	r1, r4
    3bbc:	4658      	mov	r0, fp
    3bbe:	4c2c      	ldr	r4, [pc, #176]	; (3c70 <grid_sys_bank_select+0x160>)
    3bc0:	47a0      	blx	r4
    3bc2:	e7dd      	b.n	3b80 <grid_sys_bank_select+0x70>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3bc4:	27ff      	movs	r7, #255	; 0xff
    3bc6:	9701      	str	r7, [sp, #4]
    3bc8:	2600      	movs	r6, #0
    3bca:	9600      	str	r6, [sp, #0]
    3bcc:	4633      	mov	r3, r6
    3bce:	4632      	mov	r2, r6
    3bd0:	4621      	mov	r1, r4
    3bd2:	4829      	ldr	r0, [pc, #164]	; (3c78 <grid_sys_bank_select+0x168>)
    3bd4:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3bd6:	9601      	str	r6, [sp, #4]
    3bd8:	2305      	movs	r3, #5
    3bda:	9300      	str	r3, [sp, #0]
    3bdc:	4633      	mov	r3, r6
    3bde:	4632      	mov	r2, r6
    3be0:	4621      	mov	r1, r4
    3be2:	4825      	ldr	r0, [pc, #148]	; (3c78 <grid_sys_bank_select+0x168>)
    3be4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3c6c <grid_sys_bank_select+0x15c>
    3be8:	47c0      	blx	r8
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3bea:	9601      	str	r6, [sp, #4]
    3bec:	9600      	str	r6, [sp, #0]
    3bee:	463b      	mov	r3, r7
    3bf0:	4632      	mov	r2, r6
    3bf2:	4621      	mov	r1, r4
    3bf4:	4820      	ldr	r0, [pc, #128]	; (3c78 <grid_sys_bank_select+0x168>)
    3bf6:	4c1e      	ldr	r4, [pc, #120]	; (3c70 <grid_sys_bank_select+0x160>)
    3bf8:	47a0      	blx	r4
    3bfa:	9b03      	ldr	r3, [sp, #12]
    3bfc:	3301      	adds	r3, #1
    3bfe:	9303      	str	r3, [sp, #12]
    3c00:	f89d 400c 	ldrb.w	r4, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c04:	481c      	ldr	r0, [pc, #112]	; (3c78 <grid_sys_bank_select+0x168>)
    3c06:	4b1b      	ldr	r3, [pc, #108]	; (3c74 <grid_sys_bank_select+0x164>)
    3c08:	4798      	blx	r3
    3c0a:	4284      	cmp	r4, r0
    3c0c:	d228      	bcs.n	3c60 <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3c0e:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3c12:	d0d7      	beq.n	3bc4 <grid_sys_bank_select+0xb4>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3c14:	f899 3009 	ldrb.w	r3, [r9, #9]
    3c18:	444b      	add	r3, r9
    3c1a:	7a9e      	ldrb	r6, [r3, #10]
				uint8_t g = mod->bank_color_g[mod->bank_select];
    3c1c:	7b9f      	ldrb	r7, [r3, #14]
				uint8_t b = mod->bank_color_b[mod->bank_select];
    3c1e:	f893 8012 	ldrb.w	r8, [r3, #18]
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3c22:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3c26:	9301      	str	r3, [sp, #4]
    3c28:	097b      	lsrs	r3, r7, #5
    3c2a:	9300      	str	r3, [sp, #0]
    3c2c:	0973      	lsrs	r3, r6, #5
    3c2e:	2200      	movs	r2, #0
    3c30:	4621      	mov	r1, r4
    3c32:	4811      	ldr	r0, [pc, #68]	; (3c78 <grid_sys_bank_select+0x168>)
    3c34:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3c36:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3c3a:	9301      	str	r3, [sp, #4]
    3c3c:	087b      	lsrs	r3, r7, #1
    3c3e:	9300      	str	r3, [sp, #0]
    3c40:	0873      	lsrs	r3, r6, #1
    3c42:	2200      	movs	r2, #0
    3c44:	4621      	mov	r1, r4
    3c46:	480c      	ldr	r0, [pc, #48]	; (3c78 <grid_sys_bank_select+0x168>)
    3c48:	4d08      	ldr	r5, [pc, #32]	; (3c6c <grid_sys_bank_select+0x15c>)
    3c4a:	47a8      	blx	r5
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3c4c:	f8cd 8004 	str.w	r8, [sp, #4]
    3c50:	9700      	str	r7, [sp, #0]
    3c52:	4633      	mov	r3, r6
    3c54:	2200      	movs	r2, #0
    3c56:	4621      	mov	r1, r4
    3c58:	4807      	ldr	r0, [pc, #28]	; (3c78 <grid_sys_bank_select+0x168>)
    3c5a:	4c05      	ldr	r4, [pc, #20]	; (3c70 <grid_sys_bank_select+0x160>)
    3c5c:	47a0      	blx	r4
    3c5e:	e7cc      	b.n	3bfa <grid_sys_bank_select+0xea>
}
    3c60:	b005      	add	sp, #20
    3c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c66:	bf00      	nop
    3c68:	00003a21 	.word	0x00003a21
    3c6c:	00001fb5 	.word	0x00001fb5
    3c70:	00001fff 	.word	0x00001fff
    3c74:	00001f25 	.word	0x00001f25
    3c78:	20003640 	.word	0x20003640
    3c7c:	00001f6d 	.word	0x00001f6d

00003c80 <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3c80:	2903      	cmp	r1, #3
    3c82:	d009      	beq.n	3c98 <grid_msg_get_checksum+0x18>
    3c84:	1e43      	subs	r3, r0, #1
    3c86:	3904      	subs	r1, #4
    3c88:	4401      	add	r1, r0
    3c8a:	2000      	movs	r0, #0
		checksum ^= str[i];
    3c8c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3c90:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3c92:	428b      	cmp	r3, r1
    3c94:	d1fa      	bne.n	3c8c <grid_msg_get_checksum+0xc>
    3c96:	4770      	bx	lr
	uint8_t checksum = 0;
    3c98:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3c9a:	4770      	bx	lr

00003c9c <grid_msg_set_checksum>:

void grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    3c9c:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3c9e:	1ecb      	subs	r3, r1, #3
    3ca0:	2102      	movs	r1, #2
    3ca2:	4418      	add	r0, r3
    3ca4:	4b01      	ldr	r3, [pc, #4]	; (3cac <grid_msg_set_checksum+0x10>)
    3ca6:	4798      	blx	r3
    3ca8:	bd08      	pop	{r3, pc}
    3caa:	bf00      	nop
    3cac:	000039e9 	.word	0x000039e9

00003cb0 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3cb0:	b500      	push	{lr}
    3cb2:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3cb4:	aa02      	add	r2, sp, #8
    3cb6:	2300      	movs	r3, #0
    3cb8:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3cbc:	2102      	movs	r1, #2
    3cbe:	3004      	adds	r0, #4
    3cc0:	4b02      	ldr	r3, [pc, #8]	; (3ccc <grid_msg_get_id+0x1c>)
    3cc2:	4798      	blx	r3
	
}
    3cc4:	b2c0      	uxtb	r0, r0
    3cc6:	b003      	add	sp, #12
    3cc8:	f85d fb04 	ldr.w	pc, [sp], #4
    3ccc:	000039a9 	.word	0x000039a9

00003cd0 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3cd0:	b500      	push	{lr}
    3cd2:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3cd4:	aa02      	add	r2, sp, #8
    3cd6:	2300      	movs	r3, #0
    3cd8:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3cdc:	2102      	movs	r1, #2
    3cde:	3006      	adds	r0, #6
    3ce0:	4b02      	ldr	r3, [pc, #8]	; (3cec <grid_msg_get_dx+0x1c>)
    3ce2:	4798      	blx	r3
	
}
    3ce4:	b2c0      	uxtb	r0, r0
    3ce6:	b003      	add	sp, #12
    3ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    3cec:	000039a9 	.word	0x000039a9

00003cf0 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3cf0:	b500      	push	{lr}
    3cf2:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3cf4:	aa02      	add	r2, sp, #8
    3cf6:	2300      	movs	r3, #0
    3cf8:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3cfc:	2102      	movs	r1, #2
    3cfe:	3008      	adds	r0, #8
    3d00:	4b02      	ldr	r3, [pc, #8]	; (3d0c <grid_msg_get_dy+0x1c>)
    3d02:	4798      	blx	r3

}
    3d04:	b2c0      	uxtb	r0, r0
    3d06:	b003      	add	sp, #12
    3d08:	f85d fb04 	ldr.w	pc, [sp], #4
    3d0c:	000039a9 	.word	0x000039a9

00003d10 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3d10:	b500      	push	{lr}
    3d12:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3d14:	aa02      	add	r2, sp, #8
    3d16:	2300      	movs	r3, #0
    3d18:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3d1c:	2102      	movs	r1, #2
    3d1e:	300a      	adds	r0, #10
    3d20:	4b02      	ldr	r3, [pc, #8]	; (3d2c <grid_msg_get_age+0x1c>)
    3d22:	4798      	blx	r3
	
}
    3d24:	b2c0      	uxtb	r0, r0
    3d26:	b003      	add	sp, #12
    3d28:	f85d fb04 	ldr.w	pc, [sp], #4
    3d2c:	000039a9 	.word	0x000039a9

00003d30 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3d30:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3d32:	460a      	mov	r2, r1
    3d34:	2102      	movs	r1, #2
    3d36:	3004      	adds	r0, #4
    3d38:	4b01      	ldr	r3, [pc, #4]	; (3d40 <grid_msg_set_id+0x10>)
    3d3a:	4798      	blx	r3
    3d3c:	bd08      	pop	{r3, pc}
    3d3e:	bf00      	nop
    3d40:	000039e9 	.word	0x000039e9

00003d44 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3d44:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3d46:	460a      	mov	r2, r1
    3d48:	2102      	movs	r1, #2
    3d4a:	3006      	adds	r0, #6
    3d4c:	4b01      	ldr	r3, [pc, #4]	; (3d54 <grid_msg_set_dx+0x10>)
    3d4e:	4798      	blx	r3
    3d50:	bd08      	pop	{r3, pc}
    3d52:	bf00      	nop
    3d54:	000039e9 	.word	0x000039e9

00003d58 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3d58:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3d5a:	460a      	mov	r2, r1
    3d5c:	2102      	movs	r1, #2
    3d5e:	3008      	adds	r0, #8
    3d60:	4b01      	ldr	r3, [pc, #4]	; (3d68 <grid_msg_set_dy+0x10>)
    3d62:	4798      	blx	r3
    3d64:	bd08      	pop	{r3, pc}
    3d66:	bf00      	nop
    3d68:	000039e9 	.word	0x000039e9

00003d6c <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3d6c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3d6e:	460a      	mov	r2, r1
    3d70:	2102      	movs	r1, #2
    3d72:	300a      	adds	r0, #10
    3d74:	4b01      	ldr	r3, [pc, #4]	; (3d7c <grid_msg_set_age+0x10>)
    3d76:	4798      	blx	r3
    3d78:	bd08      	pop	{r3, pc}
    3d7a:	bf00      	nop
    3d7c:	000039e9 	.word	0x000039e9

00003d80 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3d80:	69c3      	ldr	r3, [r0, #28]
    3d82:	4299      	cmp	r1, r3
    3d84:	d00d      	beq.n	3da2 <grid_msg_find_recent+0x22>
    3d86:	2301      	movs	r3, #1
    3d88:	f003 021f 	and.w	r2, r3, #31
    3d8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3d90:	69d2      	ldr	r2, [r2, #28]
    3d92:	428a      	cmp	r2, r1
    3d94:	d007      	beq.n	3da6 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    3d96:	3301      	adds	r3, #1
    3d98:	b2db      	uxtb	r3, r3
    3d9a:	2b20      	cmp	r3, #32
    3d9c:	d1f4      	bne.n	3d88 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3d9e:	2000      	movs	r0, #0
    3da0:	4770      	bx	lr
			return 1;
    3da2:	2001      	movs	r0, #1
    3da4:	4770      	bx	lr
    3da6:	2001      	movs	r0, #1
}
    3da8:	4770      	bx	lr

00003daa <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3daa:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    3dae:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3db0:	f003 031f 	and.w	r3, r3, #31
    3db4:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3db8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3dbc:	61c1      	str	r1, [r0, #28]
    3dbe:	4770      	bx	lr

00003dc0 <grid_ui_model_init>:
	
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3dc0:	b510      	push	{r4, lr}
    3dc2:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    3dc4:	2306      	movs	r3, #6
    3dc6:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    3dc8:	4419      	add	r1, r3
    3dca:	b2c8      	uxtb	r0, r1
    3dcc:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    3dce:	0100      	lsls	r0, r0, #4
    3dd0:	4b02      	ldr	r3, [pc, #8]	; (3ddc <grid_ui_model_init+0x1c>)
    3dd2:	4798      	blx	r3
    3dd4:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    3dd6:	3060      	adds	r0, #96	; 0x60
    3dd8:	60a0      	str	r0, [r4, #8]
		
}
    3dda:	bd10      	pop	{r4, pc}
    3ddc:	0000bf95 	.word	0x0000bf95

00003de0 <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3de4:	4605      	mov	r5, r0
    3de6:	4698      	mov	r8, r3
    3de8:	9808      	ldr	r0, [sp, #32]
    3dea:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    3dec:	010c      	lsls	r4, r1, #4
    3dee:	686b      	ldr	r3, [r5, #4]
    3df0:	2100      	movs	r1, #0
    3df2:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    3df4:	686b      	ldr	r3, [r5, #4]
    3df6:	4423      	add	r3, r4
    3df8:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    3dfa:	686b      	ldr	r3, [r5, #4]
    3dfc:	4423      	add	r3, r4
    3dfe:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    3e00:	686b      	ldr	r3, [r5, #4]
    3e02:	4423      	add	r3, r4
    3e04:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    3e08:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3e0a:	686b      	ldr	r3, [r5, #4]
    3e0c:	eb03 0904 	add.w	r9, r3, r4
    3e10:	4f1b      	ldr	r7, [pc, #108]	; (3e80 <grid_report_init+0xa0>)
    3e12:	47b8      	blx	r7
    3e14:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3e18:	686b      	ldr	r3, [r5, #4]
    3e1a:	eb03 0904 	add.w	r9, r3, r4
    3e1e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3e20:	47b8      	blx	r7
    3e22:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3e26:	686a      	ldr	r2, [r5, #4]
    3e28:	4422      	add	r2, r4
    3e2a:	6853      	ldr	r3, [r2, #4]
    3e2c:	b30b      	cbz	r3, 3e72 <grid_report_init+0x92>
    3e2e:	68d3      	ldr	r3, [r2, #12]
    3e30:	b313      	cbz	r3, 3e78 <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3e32:	7893      	ldrb	r3, [r2, #2]
    3e34:	b15b      	cbz	r3, 3e4e <grid_report_init+0x6e>
    3e36:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3e38:	f818 1003 	ldrb.w	r1, [r8, r3]
    3e3c:	6852      	ldr	r2, [r2, #4]
    3e3e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3e40:	3301      	adds	r3, #1
    3e42:	b2db      	uxtb	r3, r3
    3e44:	686a      	ldr	r2, [r5, #4]
    3e46:	4422      	add	r2, r4
    3e48:	7891      	ldrb	r1, [r2, #2]
    3e4a:	4299      	cmp	r1, r3
    3e4c:	d8f4      	bhi.n	3e38 <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3e4e:	686a      	ldr	r2, [r5, #4]
    3e50:	4422      	add	r2, r4
    3e52:	7a10      	ldrb	r0, [r2, #8]
    3e54:	b188      	cbz	r0, 3e7a <grid_report_init+0x9a>
    3e56:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3e58:	5cf1      	ldrb	r1, [r6, r3]
    3e5a:	68d2      	ldr	r2, [r2, #12]
    3e5c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3e5e:	3301      	adds	r3, #1
    3e60:	b2db      	uxtb	r3, r3
    3e62:	686a      	ldr	r2, [r5, #4]
    3e64:	4422      	add	r2, r4
    3e66:	7a11      	ldrb	r1, [r2, #8]
    3e68:	4299      	cmp	r1, r3
    3e6a:	d8f5      	bhi.n	3e58 <grid_report_init+0x78>
	}
	
	return 0;
    3e6c:	2000      	movs	r0, #0
    3e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    3e72:	20ff      	movs	r0, #255	; 0xff
    3e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e78:	20ff      	movs	r0, #255	; 0xff
	
}
    3e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e7e:	bf00      	nop
    3e80:	0000bf95 	.word	0x0000bf95

00003e84 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3e84:	b510      	push	{r4, lr}
    3e86:	b084      	sub	sp, #16
	
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
    3e88:	7844      	ldrb	r4, [r0, #1]
    3e8a:	4421      	add	r1, r4
    3e8c:	9c08      	ldr	r4, [sp, #32]
    3e8e:	9402      	str	r4, [sp, #8]
    3e90:	9c07      	ldr	r4, [sp, #28]
    3e92:	9401      	str	r4, [sp, #4]
    3e94:	9c06      	ldr	r4, [sp, #24]
    3e96:	9400      	str	r4, [sp, #0]
    3e98:	b2c9      	uxtb	r1, r1
    3e9a:	4c02      	ldr	r4, [pc, #8]	; (3ea4 <grid_report_ui_init+0x20>)
    3e9c:	47a0      	blx	r4
}
    3e9e:	b004      	add	sp, #16
    3ea0:	bd10      	pop	{r4, pc}
    3ea2:	bf00      	nop
    3ea4:	00003de1 	.word	0x00003de1

00003ea8 <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    3ea8:	7843      	ldrb	r3, [r0, #1]
    3eaa:	2b00      	cmp	r3, #0
    3eac:	f000 80cd 	beq.w	404a <grid_report_sys_init+0x1a2>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    3eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3eb4:	b08f      	sub	sp, #60	; 0x3c
    3eb6:	4607      	mov	r7, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    3eb8:	2400      	movs	r4, #0
			
		uint8_t payload_template[30] = {0};
    3eba:	4625      	mov	r5, r4
			
			type = GRID_REPORT_TYPE_DIRECT_WEST;
			
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
			
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3ebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 406c <grid_report_sys_init+0x1c4>
    3ec0:	e039      	b.n	3f36 <grid_report_sys_init+0x8e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_BANK,	GRID_MSG_COMMAND_SYS_BANK_SELECT, 0, GRID_MSG_END_OF_TEXT);
    3ec2:	2303      	movs	r3, #3
    3ec4:	9303      	str	r3, [sp, #12]
    3ec6:	9502      	str	r5, [sp, #8]
    3ec8:	2365      	movs	r3, #101	; 0x65
    3eca:	9301      	str	r3, [sp, #4]
    3ecc:	2364      	movs	r3, #100	; 0x64
    3ece:	9300      	str	r3, [sp, #0]
    3ed0:	2304      	movs	r3, #4
    3ed2:	2202      	movs	r2, #2
    3ed4:	495d      	ldr	r1, [pc, #372]	; (404c <grid_report_sys_init+0x1a4>)
    3ed6:	a806      	add	r0, sp, #24
    3ed8:	4e5d      	ldr	r6, [pc, #372]	; (4050 <grid_report_sys_init+0x1a8>)
    3eda:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3edc:	2602      	movs	r6, #2
    3ede:	e00f      	b.n	3f00 <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_HEARTBEAT, GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE, grid_sys_get_hwcfg(), GRID_MSG_END_OF_TEXT);
    3ee0:	4b5c      	ldr	r3, [pc, #368]	; (4054 <grid_report_sys_init+0x1ac>)
    3ee2:	4798      	blx	r3
    3ee4:	2303      	movs	r3, #3
    3ee6:	9303      	str	r3, [sp, #12]
    3ee8:	9002      	str	r0, [sp, #8]
    3eea:	2367      	movs	r3, #103	; 0x67
    3eec:	9301      	str	r3, [sp, #4]
    3eee:	2366      	movs	r3, #102	; 0x66
    3ef0:	9300      	str	r3, [sp, #0]
    3ef2:	2304      	movs	r3, #4
    3ef4:	2202      	movs	r2, #2
    3ef6:	4955      	ldr	r1, [pc, #340]	; (404c <grid_report_sys_init+0x1a4>)
    3ef8:	a806      	add	r0, sp, #24
    3efa:	4e55      	ldr	r6, [pc, #340]	; (4050 <grid_report_sys_init+0x1a8>)
    3efc:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3efe:	2602      	movs	r6, #2
		}
		
		
		
				
		uint8_t payload_length = strlen(payload_template);
    3f00:	a806      	add	r0, sp, #24
    3f02:	47c0      	blx	r8

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3f04:	f88d 5014 	strb.w	r5, [sp, #20]
		helper_template[1] = 0;
    3f08:	f88d 5015 	strb.w	r5, [sp, #21]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    3f0c:	2302      	movs	r3, #2
    3f0e:	9302      	str	r3, [sp, #8]
    3f10:	ab05      	add	r3, sp, #20
    3f12:	9301      	str	r3, [sp, #4]
    3f14:	b2c0      	uxtb	r0, r0
    3f16:	9000      	str	r0, [sp, #0]
    3f18:	ab06      	add	r3, sp, #24
    3f1a:	4632      	mov	r2, r6
    3f1c:	4621      	mov	r1, r4
    3f1e:	4638      	mov	r0, r7
    3f20:	4e4d      	ldr	r6, [pc, #308]	; (4058 <grid_report_sys_init+0x1b0>)
    3f22:	47b0      	blx	r6
		
		if (error != 0){
    3f24:	2800      	cmp	r0, #0
    3f26:	f040 808d 	bne.w	4044 <grid_report_sys_init+0x19c>
	for(uint8_t i=0; i<mod->report_offset; i++){
    3f2a:	3401      	adds	r4, #1
    3f2c:	b2e4      	uxtb	r4, r4
    3f2e:	787b      	ldrb	r3, [r7, #1]
    3f30:	42a3      	cmp	r3, r4
    3f32:	f240 8087 	bls.w	4044 <grid_report_sys_init+0x19c>
		uint8_t payload_template[30] = {0};
    3f36:	221e      	movs	r2, #30
    3f38:	4629      	mov	r1, r5
    3f3a:	a806      	add	r0, sp, #24
    3f3c:	4b47      	ldr	r3, [pc, #284]	; (405c <grid_report_sys_init+0x1b4>)
    3f3e:	4798      	blx	r3
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE
    3f40:	2c05      	cmp	r4, #5
    3f42:	d0be      	beq.n	3ec2 <grid_report_sys_init+0x1a>
		else if (i == GRID_REPORT_INDEX_HEARTBEAT){ // HEARTBEAT
    3f44:	2c00      	cmp	r4, #0
    3f46:	d0cb      	beq.n	3ee0 <grid_report_sys_init+0x38>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    3f48:	2c01      	cmp	r4, #1
    3f4a:	d007      	beq.n	3f5c <grid_report_sys_init+0xb4>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    3f4c:	2c02      	cmp	r4, #2
    3f4e:	d022      	beq.n	3f96 <grid_report_sys_init+0xee>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    3f50:	2c03      	cmp	r4, #3
    3f52:	d03d      	beq.n	3fd0 <grid_report_sys_init+0x128>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    3f54:	2c04      	cmp	r4, #4
    3f56:	d058      	beq.n	400a <grid_report_sys_init+0x162>
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    3f58:	462e      	mov	r6, r5
    3f5a:	e7d1      	b.n	3f00 <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3f5c:	4b3d      	ldr	r3, [pc, #244]	; (4054 <grid_report_sys_init+0x1ac>)
    3f5e:	4798      	blx	r3
    3f60:	2604      	movs	r6, #4
    3f62:	9603      	str	r6, [sp, #12]
    3f64:	9002      	str	r0, [sp, #8]
    3f66:	2311      	movs	r3, #17
    3f68:	9301      	str	r3, [sp, #4]
    3f6a:	2307      	movs	r3, #7
    3f6c:	9300      	str	r3, [sp, #0]
    3f6e:	230e      	movs	r3, #14
    3f70:	2201      	movs	r2, #1
    3f72:	493b      	ldr	r1, [pc, #236]	; (4060 <grid_report_sys_init+0x1b8>)
    3f74:	a806      	add	r0, sp, #24
    3f76:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 4050 <grid_report_sys_init+0x1a8>
    3f7a:	47c8      	blx	r9
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3f7c:	a806      	add	r0, sp, #24
    3f7e:	47c0      	blx	r8
    3f80:	4681      	mov	r9, r0
    3f82:	4601      	mov	r1, r0
    3f84:	a806      	add	r0, sp, #24
    3f86:	4b37      	ldr	r3, [pc, #220]	; (4064 <grid_report_sys_init+0x1bc>)
    3f88:	4798      	blx	r3
    3f8a:	4602      	mov	r2, r0
    3f8c:	4649      	mov	r1, r9
    3f8e:	a806      	add	r0, sp, #24
    3f90:	4b35      	ldr	r3, [pc, #212]	; (4068 <grid_report_sys_init+0x1c0>)
    3f92:	4798      	blx	r3
    3f94:	e7b4      	b.n	3f00 <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3f96:	4b2f      	ldr	r3, [pc, #188]	; (4054 <grid_report_sys_init+0x1ac>)
    3f98:	4798      	blx	r3
    3f9a:	2304      	movs	r3, #4
    3f9c:	9303      	str	r3, [sp, #12]
    3f9e:	9002      	str	r0, [sp, #8]
    3fa0:	2312      	movs	r3, #18
    3fa2:	9301      	str	r3, [sp, #4]
    3fa4:	2307      	movs	r3, #7
    3fa6:	9300      	str	r3, [sp, #0]
    3fa8:	230e      	movs	r3, #14
    3faa:	2201      	movs	r2, #1
    3fac:	492c      	ldr	r1, [pc, #176]	; (4060 <grid_report_sys_init+0x1b8>)
    3fae:	a806      	add	r0, sp, #24
    3fb0:	4e27      	ldr	r6, [pc, #156]	; (4050 <grid_report_sys_init+0x1a8>)
    3fb2:	47b0      	blx	r6
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3fb4:	a806      	add	r0, sp, #24
    3fb6:	47c0      	blx	r8
    3fb8:	4606      	mov	r6, r0
    3fba:	4601      	mov	r1, r0
    3fbc:	a806      	add	r0, sp, #24
    3fbe:	4b29      	ldr	r3, [pc, #164]	; (4064 <grid_report_sys_init+0x1bc>)
    3fc0:	4798      	blx	r3
    3fc2:	4602      	mov	r2, r0
    3fc4:	4631      	mov	r1, r6
    3fc6:	a806      	add	r0, sp, #24
    3fc8:	4b27      	ldr	r3, [pc, #156]	; (4068 <grid_report_sys_init+0x1c0>)
    3fca:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    3fcc:	2605      	movs	r6, #5
    3fce:	e797      	b.n	3f00 <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3fd0:	4b20      	ldr	r3, [pc, #128]	; (4054 <grid_report_sys_init+0x1ac>)
    3fd2:	4798      	blx	r3
    3fd4:	2304      	movs	r3, #4
    3fd6:	9303      	str	r3, [sp, #12]
    3fd8:	9002      	str	r0, [sp, #8]
    3fda:	2313      	movs	r3, #19
    3fdc:	9301      	str	r3, [sp, #4]
    3fde:	2307      	movs	r3, #7
    3fe0:	9300      	str	r3, [sp, #0]
    3fe2:	230e      	movs	r3, #14
    3fe4:	2201      	movs	r2, #1
    3fe6:	491e      	ldr	r1, [pc, #120]	; (4060 <grid_report_sys_init+0x1b8>)
    3fe8:	a806      	add	r0, sp, #24
    3fea:	4e19      	ldr	r6, [pc, #100]	; (4050 <grid_report_sys_init+0x1a8>)
    3fec:	47b0      	blx	r6
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3fee:	a806      	add	r0, sp, #24
    3ff0:	47c0      	blx	r8
    3ff2:	4606      	mov	r6, r0
    3ff4:	4601      	mov	r1, r0
    3ff6:	a806      	add	r0, sp, #24
    3ff8:	4b1a      	ldr	r3, [pc, #104]	; (4064 <grid_report_sys_init+0x1bc>)
    3ffa:	4798      	blx	r3
    3ffc:	4602      	mov	r2, r0
    3ffe:	4631      	mov	r1, r6
    4000:	a806      	add	r0, sp, #24
    4002:	4b19      	ldr	r3, [pc, #100]	; (4068 <grid_report_sys_init+0x1c0>)
    4004:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    4006:	2606      	movs	r6, #6
    4008:	e77a      	b.n	3f00 <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    400a:	4b12      	ldr	r3, [pc, #72]	; (4054 <grid_report_sys_init+0x1ac>)
    400c:	4798      	blx	r3
    400e:	2304      	movs	r3, #4
    4010:	9303      	str	r3, [sp, #12]
    4012:	9002      	str	r0, [sp, #8]
    4014:	2314      	movs	r3, #20
    4016:	9301      	str	r3, [sp, #4]
    4018:	2607      	movs	r6, #7
    401a:	9600      	str	r6, [sp, #0]
    401c:	230e      	movs	r3, #14
    401e:	2201      	movs	r2, #1
    4020:	490f      	ldr	r1, [pc, #60]	; (4060 <grid_report_sys_init+0x1b8>)
    4022:	a806      	add	r0, sp, #24
    4024:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4050 <grid_report_sys_init+0x1a8>
    4028:	47c8      	blx	r9
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    402a:	a806      	add	r0, sp, #24
    402c:	47c0      	blx	r8
    402e:	4681      	mov	r9, r0
    4030:	4601      	mov	r1, r0
    4032:	a806      	add	r0, sp, #24
    4034:	4b0b      	ldr	r3, [pc, #44]	; (4064 <grid_report_sys_init+0x1bc>)
    4036:	4798      	blx	r3
    4038:	4602      	mov	r2, r0
    403a:	4649      	mov	r1, r9
    403c:	a806      	add	r0, sp, #24
    403e:	4b0a      	ldr	r3, [pc, #40]	; (4068 <grid_report_sys_init+0x1c0>)
    4040:	4798      	blx	r3
    4042:	e75d      	b.n	3f00 <grid_report_sys_init+0x58>
			}
			
		}
	
	}
}
    4044:	b00f      	add	sp, #60	; 0x3c
    4046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    404a:	4770      	bx	lr
    404c:	0000d58c 	.word	0x0000d58c
    4050:	0000c3a9 	.word	0x0000c3a9
    4054:	00003a21 	.word	0x00003a21
    4058:	00003de1 	.word	0x00003de1
    405c:	0000bfbb 	.word	0x0000bfbb
    4060:	0000d5a4 	.word	0x0000d5a4
    4064:	00003c81 	.word	0x00003c81
    4068:	00003c9d 	.word	0x00003c9d
    406c:	0000c3f1 	.word	0x0000c3f1

00004070 <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    4070:	6843      	ldr	r3, [r0, #4]
    4072:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    4076:	7888      	ldrb	r0, [r1, #2]
    4078:	b140      	cbz	r0, 408c <grid_report_render+0x1c>
    407a:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    407c:	6848      	ldr	r0, [r1, #4]
    407e:	5cc0      	ldrb	r0, [r0, r3]
    4080:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    4082:	3301      	adds	r3, #1
    4084:	b2db      	uxtb	r3, r3
    4086:	7888      	ldrb	r0, [r1, #2]
    4088:	4298      	cmp	r0, r3
    408a:	d8f7      	bhi.n	407c <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    408c:	4770      	bx	lr

0000408e <grid_report_ui_get_changed_flag>:

// UI REPORT FLAGS

uint8_t grid_report_ui_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index+mod->report_offset].changed;
    408e:	7843      	ldrb	r3, [r0, #1]
    4090:	4419      	add	r1, r3
    4092:	6843      	ldr	r3, [r0, #4]
    4094:	0109      	lsls	r1, r1, #4
}
    4096:	5c58      	ldrb	r0, [r3, r1]
    4098:	4770      	bx	lr

0000409a <grid_report_ui_set_changed_flag>:

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    409a:	7843      	ldrb	r3, [r0, #1]
    409c:	4419      	add	r1, r3
    409e:	6843      	ldr	r3, [r0, #4]
    40a0:	0109      	lsls	r1, r1, #4
    40a2:	2201      	movs	r2, #1
    40a4:	545a      	strb	r2, [r3, r1]
    40a6:	4770      	bx	lr

000040a8 <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    40a8:	6843      	ldr	r3, [r0, #4]
    40aa:	0109      	lsls	r1, r1, #4
    40ac:	2201      	movs	r2, #1
    40ae:	545a      	strb	r2, [r3, r1]
    40b0:	4770      	bx	lr

000040b2 <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    40b2:	6843      	ldr	r3, [r0, #4]
    40b4:	0109      	lsls	r1, r1, #4
    40b6:	2200      	movs	r2, #0
    40b8:	545a      	strb	r2, [r3, r1]
    40ba:	4770      	bx	lr

000040bc <grid_port_process_ui>:
	if (por->cooldown > 15){
    40bc:	6803      	ldr	r3, [r0, #0]
    40be:	2b0f      	cmp	r3, #15
    40c0:	d811      	bhi.n	40e6 <grid_port_process_ui+0x2a>
	else if (por->cooldown>0){
    40c2:	b10b      	cbz	r3, 40c8 <grid_port_process_ui+0xc>
		por->cooldown--;
    40c4:	3b01      	subs	r3, #1
    40c6:	6003      	str	r3, [r0, #0]
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    40c8:	4ba4      	ldr	r3, [pc, #656]	; (435c <grid_port_process_ui+0x2a0>)
    40ca:	781b      	ldrb	r3, [r3, #0]
    40cc:	2b00      	cmp	r3, #0
    40ce:	f000 8173 	beq.w	43b8 <grid_port_process_ui+0x2fc>
void grid_port_process_ui(struct grid_port* por){
    40d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40d6:	b0cb      	sub	sp, #300	; 0x12c
	return mod->report_array[index].changed;
    40d8:	4ba0      	ldr	r3, [pc, #640]	; (435c <grid_port_process_ui+0x2a0>)
    40da:	6859      	ldr	r1, [r3, #4]
    40dc:	2300      	movs	r3, #0
    40de:	469e      	mov	lr, r3
    40e0:	461c      	mov	r4, r3
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    40e2:	4e9e      	ldr	r6, [pc, #632]	; (435c <grid_port_process_ui+0x2a0>)
    40e4:	e00c      	b.n	4100 <grid_port_process_ui+0x44>
		por->cooldown--;
    40e6:	3b01      	subs	r3, #1
    40e8:	6003      	str	r3, [r0, #0]
		return;
    40ea:	4770      	bx	lr
				message_broadcast_available++;	
    40ec:	f10e 0e01 	add.w	lr, lr, #1
    40f0:	fa5f fe8e 	uxtb.w	lr, lr
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    40f4:	3301      	adds	r3, #1
    40f6:	b2db      	uxtb	r3, r3
    40f8:	7832      	ldrb	r2, [r6, #0]
    40fa:	b2d2      	uxtb	r2, r2
    40fc:	429a      	cmp	r2, r3
    40fe:	d920      	bls.n	4142 <grid_port_process_ui+0x86>
	return mod->report_array[index].changed;
    4100:	011a      	lsls	r2, r3, #4
    4102:	188d      	adds	r5, r1, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    4104:	5c8a      	ldrb	r2, [r1, r2]
    4106:	2a00      	cmp	r2, #0
    4108:	d0f4      	beq.n	40f4 <grid_port_process_ui+0x38>
	return mod->report_array[index].type;
    410a:	786a      	ldrb	r2, [r5, #1]
			if (type == GRID_REPORT_TYPE_BROADCAST){
    410c:	2a02      	cmp	r2, #2
    410e:	d0ed      	beq.n	40ec <grid_port_process_ui+0x30>
			else if (type == GRID_REPORT_TYPE_DIRECT_ALL){	
    4110:	2a03      	cmp	r2, #3
    4112:	d00a      	beq.n	412a <grid_port_process_ui+0x6e>
			else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    4114:	2a04      	cmp	r2, #4
    4116:	d00b      	beq.n	4130 <grid_port_process_ui+0x74>
			else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    4118:	2a05      	cmp	r2, #5
    411a:	d00c      	beq.n	4136 <grid_port_process_ui+0x7a>
			else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    411c:	2a06      	cmp	r2, #6
    411e:	d00d      	beq.n	413c <grid_port_process_ui+0x80>
			else if (type == GRID_REPORT_TYPE_DIRECT_WEST){
    4120:	2a07      	cmp	r2, #7
				message_direct_available++;
    4122:	bf04      	itt	eq
    4124:	3401      	addeq	r4, #1
    4126:	b2e4      	uxtbeq	r4, r4
    4128:	e7e4      	b.n	40f4 <grid_port_process_ui+0x38>
				message_direct_available++;	
    412a:	3401      	adds	r4, #1
    412c:	b2e4      	uxtb	r4, r4
    412e:	e7e1      	b.n	40f4 <grid_port_process_ui+0x38>
				message_direct_available++;
    4130:	3401      	adds	r4, #1
    4132:	b2e4      	uxtb	r4, r4
    4134:	e7de      	b.n	40f4 <grid_port_process_ui+0x38>
				message_direct_available++;
    4136:	3401      	adds	r4, #1
    4138:	b2e4      	uxtb	r4, r4
    413a:	e7db      	b.n	40f4 <grid_port_process_ui+0x38>
				message_direct_available++;
    413c:	3401      	adds	r4, #1
    413e:	b2e4      	uxtb	r4, r4
    4140:	e7d8      	b.n	40f4 <grid_port_process_ui+0x38>
    4142:	4680      	mov	r8, r0
	if (message_direct_available){
    4144:	2c00      	cmp	r4, #0
    4146:	d069      	beq.n	421c <grid_port_process_ui+0x160>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4148:	4b84      	ldr	r3, [pc, #528]	; (435c <grid_port_process_ui+0x2a0>)
    414a:	781b      	ldrb	r3, [r3, #0]
    414c:	2b00      	cmp	r3, #0
    414e:	d068      	beq.n	4222 <grid_port_process_ui+0x166>
    4150:	2500      	movs	r5, #0
	return mod->report_array[index].changed;
    4152:	f8df 8208 	ldr.w	r8, [pc, #520]	; 435c <grid_port_process_ui+0x2a0>
				uint8_t message[256] = {0};
    4156:	f8df a228 	ldr.w	sl, [pc, #552]	; 4380 <grid_port_process_ui+0x2c4>
				CRITICAL_SECTION_ENTER()			
    415a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 43a8 <grid_port_process_ui+0x2ec>
    415e:	e00e      	b.n	417e <grid_port_process_ui+0xc2>
					target_buffer = &GRID_PORT_U.rx_buffer;
    4160:	f8df b240 	ldr.w	fp, [pc, #576]	; 43a4 <grid_port_process_ui+0x2e8>
				if (grid_buffer_write_init(target_buffer, length)){
    4164:	b2b1      	uxth	r1, r6
    4166:	4658      	mov	r0, fp
    4168:	4b7d      	ldr	r3, [pc, #500]	; (4360 <grid_port_process_ui+0x2a4>)
    416a:	4798      	blx	r3
    416c:	2800      	cmp	r0, #0
    416e:	d13f      	bne.n	41f0 <grid_port_process_ui+0x134>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4170:	3501      	adds	r5, #1
    4172:	b2ed      	uxtb	r5, r5
    4174:	f898 3000 	ldrb.w	r3, [r8]
    4178:	b2db      	uxtb	r3, r3
    417a:	42ab      	cmp	r3, r5
    417c:	d951      	bls.n	4222 <grid_port_process_ui+0x166>
	return mod->report_array[index].changed;
    417e:	012c      	lsls	r4, r5, #4
    4180:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4184:	191a      	adds	r2, r3, r4
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_ALL || type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    4186:	5d1b      	ldrb	r3, [r3, r4]
    4188:	2b00      	cmp	r3, #0
    418a:	d0f1      	beq.n	4170 <grid_port_process_ui+0xb4>
    418c:	7853      	ldrb	r3, [r2, #1]
    418e:	3b03      	subs	r3, #3
    4190:	b2db      	uxtb	r3, r3
    4192:	2b04      	cmp	r3, #4
    4194:	d8ec      	bhi.n	4170 <grid_port_process_ui+0xb4>
				uint8_t message[256] = {0};
    4196:	f44f 7280 	mov.w	r2, #256	; 0x100
    419a:	2100      	movs	r1, #0
    419c:	a80a      	add	r0, sp, #40	; 0x28
    419e:	47d0      	blx	sl
				CRITICAL_SECTION_ENTER()			
    41a0:	a808      	add	r0, sp, #32
    41a2:	47c8      	blx	r9
				grid_report_render(mod, i, &message[length]);
    41a4:	aa0a      	add	r2, sp, #40	; 0x28
    41a6:	4629      	mov	r1, r5
    41a8:	4640      	mov	r0, r8
    41aa:	4b6e      	ldr	r3, [pc, #440]	; (4364 <grid_port_process_ui+0x2a8>)
    41ac:	4798      	blx	r3
				length += strlen(&message[length]);
    41ae:	a80a      	add	r0, sp, #40	; 0x28
    41b0:	4b6d      	ldr	r3, [pc, #436]	; (4368 <grid_port_process_ui+0x2ac>)
    41b2:	4798      	blx	r3
    41b4:	4606      	mov	r6, r0
				CRITICAL_SECTION_LEAVE()			
    41b6:	a808      	add	r0, sp, #32
    41b8:	4b6c      	ldr	r3, [pc, #432]	; (436c <grid_port_process_ui+0x2b0>)
    41ba:	4798      	blx	r3
	return mod->report_array[index].type;
    41bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    41c0:	441c      	add	r4, r3
    41c2:	7863      	ldrb	r3, [r4, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_ALL){
    41c4:	2b03      	cmp	r3, #3
    41c6:	d0cb      	beq.n	4160 <grid_port_process_ui+0xa4>
				else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    41c8:	2b04      	cmp	r3, #4
    41ca:	d008      	beq.n	41de <grid_port_process_ui+0x122>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    41cc:	2b05      	cmp	r3, #5
    41ce:	d009      	beq.n	41e4 <grid_port_process_ui+0x128>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    41d0:	2b06      	cmp	r3, #6
    41d2:	d00a      	beq.n	41ea <grid_port_process_ui+0x12e>
					target_buffer = &GRID_PORT_W.tx_buffer;
    41d4:	4a66      	ldr	r2, [pc, #408]	; (4370 <grid_port_process_ui+0x2b4>)
    41d6:	2b07      	cmp	r3, #7
    41d8:	bf08      	it	eq
    41da:	4693      	moveq	fp, r2
    41dc:	e7c2      	b.n	4164 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_N.tx_buffer;
    41de:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 43ac <grid_port_process_ui+0x2f0>
    41e2:	e7bf      	b.n	4164 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_E.tx_buffer;
    41e4:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 43b0 <grid_port_process_ui+0x2f4>
    41e8:	e7bc      	b.n	4164 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_S.tx_buffer;
    41ea:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 43b4 <grid_port_process_ui+0x2f8>
    41ee:	e7b9      	b.n	4164 <grid_port_process_ui+0xa8>
					grid_report_sys_clear_changed_flag(mod, i);
    41f0:	4629      	mov	r1, r5
    41f2:	4640      	mov	r0, r8
    41f4:	4b5f      	ldr	r3, [pc, #380]	; (4374 <grid_port_process_ui+0x2b8>)
    41f6:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    41f8:	b166      	cbz	r6, 4214 <grid_port_process_ui+0x158>
    41fa:	f10d 0427 	add.w	r4, sp, #39	; 0x27
    41fe:	ab4a      	add	r3, sp, #296	; 0x128
    4200:	441e      	add	r6, r3
    4202:	f2a6 1601 	subw	r6, r6, #257	; 0x101
						grid_buffer_write_character(target_buffer, message[i]);
    4206:	4f5c      	ldr	r7, [pc, #368]	; (4378 <grid_port_process_ui+0x2bc>)
    4208:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    420c:	4658      	mov	r0, fp
    420e:	47b8      	blx	r7
					for(uint32_t i = 0; i<length; i++){
    4210:	42b4      	cmp	r4, r6
    4212:	d1f9      	bne.n	4208 <grid_port_process_ui+0x14c>
					grid_buffer_write_acknowledge(target_buffer);
    4214:	4658      	mov	r0, fp
    4216:	4b59      	ldr	r3, [pc, #356]	; (437c <grid_port_process_ui+0x2c0>)
    4218:	4798      	blx	r3
    421a:	e7a9      	b.n	4170 <grid_port_process_ui+0xb4>
	if (message_broadcast_available){
    421c:	f1be 0f00 	cmp.w	lr, #0
    4220:	d102      	bne.n	4228 <grid_port_process_ui+0x16c>
}
    4222:	b04b      	add	sp, #300	; 0x12c
    4224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t message[256] = {0};
    4228:	f44f 7280 	mov.w	r2, #256	; 0x100
    422c:	2100      	movs	r1, #0
    422e:	a80a      	add	r0, sp, #40	; 0x28
    4230:	4b53      	ldr	r3, [pc, #332]	; (4380 <grid_port_process_ui+0x2c4>)
    4232:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    4234:	4b53      	ldr	r3, [pc, #332]	; (4384 <grid_port_process_ui+0x2c8>)
    4236:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    423a:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    423c:	2117      	movs	r1, #23
    423e:	9105      	str	r1, [sp, #20]
    4240:	9304      	str	r3, [sp, #16]
    4242:	237f      	movs	r3, #127	; 0x7f
    4244:	9303      	str	r3, [sp, #12]
    4246:	9302      	str	r3, [sp, #8]
    4248:	9201      	str	r2, [sp, #4]
    424a:	2300      	movs	r3, #0
    424c:	9300      	str	r3, [sp, #0]
    424e:	230f      	movs	r3, #15
    4250:	2201      	movs	r2, #1
    4252:	494d      	ldr	r1, [pc, #308]	; (4388 <grid_port_process_ui+0x2cc>)
    4254:	a80a      	add	r0, sp, #40	; 0x28
    4256:	4d4d      	ldr	r5, [pc, #308]	; (438c <grid_port_process_ui+0x2d0>)
    4258:	47a8      	blx	r5
		length += strlen(&message[length]);
    425a:	a80a      	add	r0, sp, #40	; 0x28
    425c:	4b42      	ldr	r3, [pc, #264]	; (4368 <grid_port_process_ui+0x2ac>)
    425e:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4260:	4b3e      	ldr	r3, [pc, #248]	; (435c <grid_port_process_ui+0x2a0>)
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	2b00      	cmp	r3, #0
    4266:	d0dc      	beq.n	4222 <grid_port_process_ui+0x166>
    4268:	4625      	mov	r5, r4
    426a:	4606      	mov	r6, r0
			CRITICAL_SECTION_ENTER()
    426c:	f8df a138 	ldr.w	sl, [pc, #312]	; 43a8 <grid_port_process_ui+0x2ec>
	return mod->report_array[index].changed;
    4270:	4f3a      	ldr	r7, [pc, #232]	; (435c <grid_port_process_ui+0x2a0>)
			CRITICAL_SECTION_LEAVE()
    4272:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 436c <grid_port_process_ui+0x2b0>
    4276:	e007      	b.n	4288 <grid_port_process_ui+0x1cc>
    4278:	a807      	add	r0, sp, #28
    427a:	47c8      	blx	r9
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    427c:	3501      	adds	r5, #1
    427e:	b2ed      	uxtb	r5, r5
    4280:	783b      	ldrb	r3, [r7, #0]
    4282:	b2db      	uxtb	r3, r3
    4284:	42ab      	cmp	r3, r5
    4286:	d91b      	bls.n	42c0 <grid_port_process_ui+0x204>
			if (length>200){
    4288:	2ec8      	cmp	r6, #200	; 0xc8
    428a:	d8f7      	bhi.n	427c <grid_port_process_ui+0x1c0>
			CRITICAL_SECTION_ENTER()
    428c:	a807      	add	r0, sp, #28
    428e:	47d0      	blx	sl
	return mod->report_array[index].changed;
    4290:	687a      	ldr	r2, [r7, #4]
    4292:	012b      	lsls	r3, r5, #4
			if (grid_report_sys_get_changed_flag(mod, i)){
    4294:	5cd3      	ldrb	r3, [r2, r3]
    4296:	2b00      	cmp	r3, #0
    4298:	d0ee      	beq.n	4278 <grid_port_process_ui+0x1bc>
				packetvalid++;
    429a:	3401      	adds	r4, #1
    429c:	b2e4      	uxtb	r4, r4
				grid_report_render(mod, i, &message[length]);
    429e:	ab0a      	add	r3, sp, #40	; 0x28
    42a0:	eb03 0b06 	add.w	fp, r3, r6
    42a4:	465a      	mov	r2, fp
    42a6:	4629      	mov	r1, r5
    42a8:	4638      	mov	r0, r7
    42aa:	4b2e      	ldr	r3, [pc, #184]	; (4364 <grid_port_process_ui+0x2a8>)
    42ac:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    42ae:	4629      	mov	r1, r5
    42b0:	4638      	mov	r0, r7
    42b2:	4b30      	ldr	r3, [pc, #192]	; (4374 <grid_port_process_ui+0x2b8>)
    42b4:	4798      	blx	r3
				length += strlen(&message[length]);
    42b6:	4658      	mov	r0, fp
    42b8:	4b2b      	ldr	r3, [pc, #172]	; (4368 <grid_port_process_ui+0x2ac>)
    42ba:	4798      	blx	r3
    42bc:	4406      	add	r6, r0
    42be:	e7db      	b.n	4278 <grid_port_process_ui+0x1bc>
		if (packetvalid){
    42c0:	2c00      	cmp	r4, #0
    42c2:	d0ae      	beq.n	4222 <grid_port_process_ui+0x166>
			por->cooldown += (10+por->cooldown);
    42c4:	f8d8 3000 	ldr.w	r3, [r8]
    42c8:	005b      	lsls	r3, r3, #1
    42ca:	330a      	adds	r3, #10
    42cc:	f8c8 3000 	str.w	r3, [r8]
			grid_sys_state.next_broadcast_message_id++;
    42d0:	4a2c      	ldr	r2, [pc, #176]	; (4384 <grid_port_process_ui+0x2c8>)
    42d2:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    42d6:	3301      	adds	r3, #1
    42d8:	b2db      	uxtb	r3, r3
    42da:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    42de:	ac0a      	add	r4, sp, #40	; 0x28
    42e0:	19a5      	adds	r5, r4, r6
    42e2:	2204      	movs	r2, #4
    42e4:	492a      	ldr	r1, [pc, #168]	; (4390 <grid_port_process_ui+0x2d4>)
    42e6:	4628      	mov	r0, r5
    42e8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 438c <grid_port_process_ui+0x2d0>
    42ec:	47c0      	blx	r8
			length += strlen(&message[length]);
    42ee:	4628      	mov	r0, r5
    42f0:	4f1d      	ldr	r7, [pc, #116]	; (4368 <grid_port_process_ui+0x2ac>)
    42f2:	47b8      	blx	r7
    42f4:	1835      	adds	r5, r6, r0
			sprintf(length_string, "%02x", length);
    42f6:	462a      	mov	r2, r5
    42f8:	4926      	ldr	r1, [pc, #152]	; (4394 <grid_port_process_ui+0x2d8>)
    42fa:	a808      	add	r0, sp, #32
    42fc:	47c0      	blx	r8
			message[2] = length_string[0];
    42fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
    4302:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    4304:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    4308:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    430a:	4b23      	ldr	r3, [pc, #140]	; (4398 <grid_port_process_ui+0x2dc>)
    430c:	6818      	ldr	r0, [r3, #0]
    430e:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    4310:	1960      	adds	r0, r4, r5
    4312:	47b8      	blx	r7
    4314:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_get_checksum(message, length);
    4316:	4629      	mov	r1, r5
    4318:	4620      	mov	r0, r4
    431a:	4b20      	ldr	r3, [pc, #128]	; (439c <grid_port_process_ui+0x2e0>)
    431c:	4798      	blx	r3
			grid_msg_set_checksum(message, length, checksum);
    431e:	b2c2      	uxtb	r2, r0
    4320:	4629      	mov	r1, r5
    4322:	4620      	mov	r0, r4
    4324:	4b1e      	ldr	r3, [pc, #120]	; (43a0 <grid_port_process_ui+0x2e4>)
    4326:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    4328:	b2a9      	uxth	r1, r5
    432a:	481e      	ldr	r0, [pc, #120]	; (43a4 <grid_port_process_ui+0x2e8>)
    432c:	4b0c      	ldr	r3, [pc, #48]	; (4360 <grid_port_process_ui+0x2a4>)
    432e:	4798      	blx	r3
    4330:	2800      	cmp	r0, #0
    4332:	f43f af76 	beq.w	4222 <grid_port_process_ui+0x166>
				for(uint32_t i = 0; i<length; i++){
    4336:	b16d      	cbz	r5, 4354 <grid_port_process_ui+0x298>
    4338:	f10d 0427 	add.w	r4, sp, #39	; 0x27
    433c:	ab4a      	add	r3, sp, #296	; 0x128
    433e:	441d      	add	r5, r3
    4340:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    4344:	4f17      	ldr	r7, [pc, #92]	; (43a4 <grid_port_process_ui+0x2e8>)
    4346:	4e0c      	ldr	r6, [pc, #48]	; (4378 <grid_port_process_ui+0x2bc>)
    4348:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    434c:	4638      	mov	r0, r7
    434e:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    4350:	42a5      	cmp	r5, r4
    4352:	d1f9      	bne.n	4348 <grid_port_process_ui+0x28c>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    4354:	4813      	ldr	r0, [pc, #76]	; (43a4 <grid_port_process_ui+0x2e8>)
    4356:	4b09      	ldr	r3, [pc, #36]	; (437c <grid_port_process_ui+0x2c0>)
    4358:	4798      	blx	r3
    435a:	e762      	b.n	4222 <grid_port_process_ui+0x166>
    435c:	20001d14 	.word	0x20001d14
    4360:	00001375 	.word	0x00001375
    4364:	00004071 	.word	0x00004071
    4368:	0000c3f1 	.word	0x0000c3f1
    436c:	00004763 	.word	0x00004763
    4370:	200026b0 	.word	0x200026b0
    4374:	000040b3 	.word	0x000040b3
    4378:	000013a5 	.word	0x000013a5
    437c:	000013c1 	.word	0x000013c1
    4380:	0000bfbb 	.word	0x0000bfbb
    4384:	20001d24 	.word	0x20001d24
    4388:	0000d5b8 	.word	0x0000d5b8
    438c:	0000c3a9 	.word	0x0000c3a9
    4390:	0000d5d0 	.word	0x0000d5d0
    4394:	0000d5d4 	.word	0x0000d5d4
    4398:	0000d5dc 	.word	0x0000d5dc
    439c:	00003c81 	.word	0x00003c81
    43a0:	00003c9d 	.word	0x00003c9d
    43a4:	20001cf4 	.word	0x20001cf4
    43a8:	00004755 	.word	0x00004755
    43ac:	20001788 	.word	0x20001788
    43b0:	20003604 	.word	0x20003604
    43b4:	20002bd8 	.word	0x20002bd8
    43b8:	4770      	bx	lr
    43ba:	bf00      	nop

000043bc <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    43bc:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    43be:	6983      	ldr	r3, [r0, #24]
    43c0:	b103      	cbz	r3, 43c4 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    43c2:	4798      	blx	r3
    43c4:	bd08      	pop	{r3, pc}

000043c6 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    43c6:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    43c8:	69c3      	ldr	r3, [r0, #28]
    43ca:	b103      	cbz	r3, 43ce <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    43cc:	4798      	blx	r3
    43ce:	bd08      	pop	{r3, pc}

000043d0 <adc_async_channel_conversion_done>:
{
    43d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    43d4:	4606      	mov	r6, r0
    43d6:	460f      	mov	r7, r1
    43d8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    43da:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    43dc:	5c5c      	ldrb	r4, [r3, r1]
    43de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    43e2:	00e4      	lsls	r4, r4, #3
    43e4:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    43e8:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    43ec:	f105 0a04 	add.w	sl, r5, #4
    43f0:	b2d1      	uxtb	r1, r2
    43f2:	4650      	mov	r0, sl
    43f4:	4b0c      	ldr	r3, [pc, #48]	; (4428 <adc_async_channel_conversion_done+0x58>)
    43f6:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    43f8:	4630      	mov	r0, r6
    43fa:	4b0c      	ldr	r3, [pc, #48]	; (442c <adc_async_channel_conversion_done+0x5c>)
    43fc:	4798      	blx	r3
    43fe:	2801      	cmp	r0, #1
    4400:	d907      	bls.n	4412 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    4402:	ea4f 2119 	mov.w	r1, r9, lsr #8
    4406:	4650      	mov	r0, sl
    4408:	4b07      	ldr	r3, [pc, #28]	; (4428 <adc_async_channel_conversion_done+0x58>)
    440a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    440c:	8aab      	ldrh	r3, [r5, #20]
    440e:	3301      	adds	r3, #1
    4410:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    4412:	8aab      	ldrh	r3, [r5, #20]
    4414:	3301      	adds	r3, #1
    4416:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    4418:	f858 3004 	ldr.w	r3, [r8, r4]
    441c:	b113      	cbz	r3, 4424 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    441e:	4639      	mov	r1, r7
    4420:	4630      	mov	r0, r6
    4422:	4798      	blx	r3
    4424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4428:	00005c85 	.word	0x00005c85
    442c:	00006023 	.word	0x00006023

00004430 <adc_async_init>:
{
    4430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4434:	4689      	mov	r9, r1
    4436:	4616      	mov	r6, r2
    4438:	461c      	mov	r4, r3
    443a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    443e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    4440:	4607      	mov	r7, r0
    4442:	b140      	cbz	r0, 4456 <adc_async_init+0x26>
    4444:	b149      	cbz	r1, 445a <adc_async_init+0x2a>
    4446:	b152      	cbz	r2, 445e <adc_async_init+0x2e>
    4448:	f1b8 0f00 	cmp.w	r8, #0
    444c:	d009      	beq.n	4462 <adc_async_init+0x32>
    444e:	1c28      	adds	r0, r5, #0
    4450:	bf18      	it	ne
    4452:	2001      	movne	r0, #1
    4454:	e006      	b.n	4464 <adc_async_init+0x34>
    4456:	2000      	movs	r0, #0
    4458:	e004      	b.n	4464 <adc_async_init+0x34>
    445a:	2000      	movs	r0, #0
    445c:	e002      	b.n	4464 <adc_async_init+0x34>
    445e:	2000      	movs	r0, #0
    4460:	e000      	b.n	4464 <adc_async_init+0x34>
    4462:	2000      	movs	r0, #0
    4464:	f8df b064 	ldr.w	fp, [pc, #100]	; 44cc <adc_async_init+0x9c>
    4468:	223f      	movs	r2, #63	; 0x3f
    446a:	4659      	mov	r1, fp
    446c:	f8df a060 	ldr.w	sl, [pc, #96]	; 44d0 <adc_async_init+0xa0>
    4470:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    4472:	1c60      	adds	r0, r4, #1
    4474:	2240      	movs	r2, #64	; 0x40
    4476:	4659      	mov	r1, fp
    4478:	4580      	cmp	r8, r0
    447a:	bfcc      	ite	gt
    447c:	2000      	movgt	r0, #0
    447e:	2001      	movle	r0, #1
    4480:	47d0      	blx	sl
	device = &descr->device;
    4482:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    4484:	21ff      	movs	r1, #255	; 0xff
    4486:	b2da      	uxtb	r2, r3
    4488:	54b1      	strb	r1, [r6, r2]
    448a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    448c:	b2da      	uxtb	r2, r3
    448e:	42a2      	cmp	r2, r4
    4490:	d9f9      	bls.n	4486 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    4492:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    4494:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    4498:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    449c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    449e:	4649      	mov	r1, r9
    44a0:	4638      	mov	r0, r7
    44a2:	4b06      	ldr	r3, [pc, #24]	; (44bc <adc_async_init+0x8c>)
    44a4:	4798      	blx	r3
	if (init_status) {
    44a6:	4603      	mov	r3, r0
    44a8:	b928      	cbnz	r0, 44b6 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    44aa:	4a05      	ldr	r2, [pc, #20]	; (44c0 <adc_async_init+0x90>)
    44ac:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    44ae:	4a05      	ldr	r2, [pc, #20]	; (44c4 <adc_async_init+0x94>)
    44b0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    44b2:	4a05      	ldr	r2, [pc, #20]	; (44c8 <adc_async_init+0x98>)
    44b4:	607a      	str	r2, [r7, #4]
}
    44b6:	4618      	mov	r0, r3
    44b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44bc:	00005ef1 	.word	0x00005ef1
    44c0:	000043d1 	.word	0x000043d1
    44c4:	000043bd 	.word	0x000043bd
    44c8:	000043c7 	.word	0x000043c7
    44cc:	0000d5e0 	.word	0x0000d5e0
    44d0:	00005b49 	.word	0x00005b49

000044d4 <adc_async_register_channel_buffer>:
{
    44d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44d8:	460e      	mov	r6, r1
    44da:	4617      	mov	r7, r2
    44dc:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    44de:	4605      	mov	r5, r0
    44e0:	2800      	cmp	r0, #0
    44e2:	d040      	beq.n	4566 <adc_async_register_channel_buffer+0x92>
    44e4:	2a00      	cmp	r2, #0
    44e6:	d040      	beq.n	456a <adc_async_register_channel_buffer+0x96>
    44e8:	1c18      	adds	r0, r3, #0
    44ea:	bf18      	it	ne
    44ec:	2001      	movne	r0, #1
    44ee:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4588 <adc_async_register_channel_buffer+0xb4>
    44f2:	2266      	movs	r2, #102	; 0x66
    44f4:	4649      	mov	r1, r9
    44f6:	4c22      	ldr	r4, [pc, #136]	; (4580 <adc_async_register_channel_buffer+0xac>)
    44f8:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    44fa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    44fe:	2267      	movs	r2, #103	; 0x67
    4500:	4649      	mov	r1, r9
    4502:	42b0      	cmp	r0, r6
    4504:	bf34      	ite	cc
    4506:	2000      	movcc	r0, #0
    4508:	2001      	movcs	r0, #1
    450a:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    450c:	6a29      	ldr	r1, [r5, #32]
    450e:	5d8b      	ldrb	r3, [r1, r6]
    4510:	2bff      	cmp	r3, #255	; 0xff
    4512:	d12c      	bne.n	456e <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    4514:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4518:	2300      	movs	r3, #0
    451a:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    451c:	b2da      	uxtb	r2, r3
    451e:	5c8a      	ldrb	r2, [r1, r2]
    4520:	2aff      	cmp	r2, #255	; 0xff
			index++;
    4522:	bf1c      	itt	ne
    4524:	3401      	addne	r4, #1
    4526:	b2e4      	uxtbne	r4, r4
    4528:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    452a:	b2da      	uxtb	r2, r3
    452c:	4282      	cmp	r2, r0
    452e:	d9f5      	bls.n	451c <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    4530:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4534:	42a3      	cmp	r3, r4
    4536:	d31d      	bcc.n	4574 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    4538:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    453c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    4540:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4542:	4448      	add	r0, r9
    4544:	4642      	mov	r2, r8
    4546:	4639      	mov	r1, r7
    4548:	3004      	adds	r0, #4
    454a:	4b0e      	ldr	r3, [pc, #56]	; (4584 <adc_async_register_channel_buffer+0xb0>)
    454c:	4798      	blx	r3
    454e:	4602      	mov	r2, r0
    4550:	b998      	cbnz	r0, 457a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    4552:	6a2b      	ldr	r3, [r5, #32]
    4554:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    4556:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4558:	4499      	add	r9, r3
    455a:	2300      	movs	r3, #0
    455c:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    4560:	4610      	mov	r0, r2
    4562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    4566:	2000      	movs	r0, #0
    4568:	e7c1      	b.n	44ee <adc_async_register_channel_buffer+0x1a>
    456a:	2000      	movs	r0, #0
    456c:	e7bf      	b.n	44ee <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    456e:	f06f 020c 	mvn.w	r2, #12
    4572:	e7f5      	b.n	4560 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    4574:	f06f 021b 	mvn.w	r2, #27
    4578:	e7f2      	b.n	4560 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    457a:	f06f 020c 	mvn.w	r2, #12
    457e:	e7ef      	b.n	4560 <adc_async_register_channel_buffer+0x8c>
    4580:	00005b49 	.word	0x00005b49
    4584:	00005bf1 	.word	0x00005bf1
    4588:	0000d5e0 	.word	0x0000d5e0

0000458c <adc_async_enable_channel>:
{
    458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    458e:	460d      	mov	r5, r1
	ASSERT(descr);
    4590:	4f0b      	ldr	r7, [pc, #44]	; (45c0 <adc_async_enable_channel+0x34>)
    4592:	4604      	mov	r4, r0
    4594:	2283      	movs	r2, #131	; 0x83
    4596:	4639      	mov	r1, r7
    4598:	3000      	adds	r0, #0
    459a:	bf18      	it	ne
    459c:	2001      	movne	r0, #1
    459e:	4e09      	ldr	r6, [pc, #36]	; (45c4 <adc_async_enable_channel+0x38>)
    45a0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    45a2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    45a6:	2284      	movs	r2, #132	; 0x84
    45a8:	4639      	mov	r1, r7
    45aa:	42a8      	cmp	r0, r5
    45ac:	bf34      	ite	cc
    45ae:	2000      	movcc	r0, #0
    45b0:	2001      	movcs	r0, #1
    45b2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    45b4:	4629      	mov	r1, r5
    45b6:	4620      	mov	r0, r4
    45b8:	4b03      	ldr	r3, [pc, #12]	; (45c8 <adc_async_enable_channel+0x3c>)
    45ba:	4798      	blx	r3
}
    45bc:	2000      	movs	r0, #0
    45be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45c0:	0000d5e0 	.word	0x0000d5e0
    45c4:	00005b49 	.word	0x00005b49
    45c8:	0000600d 	.word	0x0000600d

000045cc <adc_async_register_callback>:
{
    45cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45d0:	460e      	mov	r6, r1
    45d2:	4614      	mov	r4, r2
    45d4:	4699      	mov	r9, r3
	ASSERT(descr);
    45d6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4648 <adc_async_register_callback+0x7c>
    45da:	4605      	mov	r5, r0
    45dc:	229c      	movs	r2, #156	; 0x9c
    45de:	4641      	mov	r1, r8
    45e0:	3000      	adds	r0, #0
    45e2:	bf18      	it	ne
    45e4:	2001      	movne	r0, #1
    45e6:	4f16      	ldr	r7, [pc, #88]	; (4640 <adc_async_register_callback+0x74>)
    45e8:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    45ea:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    45ee:	229d      	movs	r2, #157	; 0x9d
    45f0:	4641      	mov	r1, r8
    45f2:	42b0      	cmp	r0, r6
    45f4:	bf34      	ite	cc
    45f6:	2000      	movcc	r0, #0
    45f8:	2001      	movcs	r0, #1
    45fa:	47b8      	blx	r7
	switch (type) {
    45fc:	2c01      	cmp	r4, #1
    45fe:	d019      	beq.n	4634 <adc_async_register_callback+0x68>
    4600:	b12c      	cbz	r4, 460e <adc_async_register_callback+0x42>
    4602:	2c02      	cmp	r4, #2
    4604:	d019      	beq.n	463a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    4606:	f06f 000c 	mvn.w	r0, #12
}
    460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    460e:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4610:	5d9b      	ldrb	r3, [r3, r6]
    4612:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4614:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4618:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    461c:	f119 0300 	adds.w	r3, r9, #0
    4620:	bf18      	it	ne
    4622:	2301      	movne	r3, #1
    4624:	4622      	mov	r2, r4
    4626:	4631      	mov	r1, r6
    4628:	4628      	mov	r0, r5
    462a:	4c06      	ldr	r4, [pc, #24]	; (4644 <adc_async_register_callback+0x78>)
    462c:	47a0      	blx	r4
	return ERR_NONE;
    462e:	2000      	movs	r0, #0
    4630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    4634:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    4638:	e7f0      	b.n	461c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    463a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    463e:	e7ed      	b.n	461c <adc_async_register_callback+0x50>
    4640:	00005b49 	.word	0x00005b49
    4644:	0000604b 	.word	0x0000604b
    4648:	0000d5e0 	.word	0x0000d5e0

0000464c <adc_async_read_channel>:
{
    464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4650:	b083      	sub	sp, #12
    4652:	4688      	mov	r8, r1
    4654:	4691      	mov	r9, r2
    4656:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    4658:	4604      	mov	r4, r0
    465a:	2800      	cmp	r0, #0
    465c:	d04f      	beq.n	46fe <adc_async_read_channel+0xb2>
    465e:	2a00      	cmp	r2, #0
    4660:	d04f      	beq.n	4702 <adc_async_read_channel+0xb6>
    4662:	1c18      	adds	r0, r3, #0
    4664:	bf18      	it	ne
    4666:	2001      	movne	r0, #1
    4668:	4f29      	ldr	r7, [pc, #164]	; (4710 <adc_async_read_channel+0xc4>)
    466a:	22bc      	movs	r2, #188	; 0xbc
    466c:	4639      	mov	r1, r7
    466e:	4e29      	ldr	r6, [pc, #164]	; (4714 <adc_async_read_channel+0xc8>)
    4670:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    4672:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4676:	22bd      	movs	r2, #189	; 0xbd
    4678:	4639      	mov	r1, r7
    467a:	4540      	cmp	r0, r8
    467c:	bf34      	ite	cc
    467e:	2000      	movcc	r0, #0
    4680:	2001      	movcs	r0, #1
    4682:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    4684:	4620      	mov	r0, r4
    4686:	4b24      	ldr	r3, [pc, #144]	; (4718 <adc_async_read_channel+0xcc>)
    4688:	4798      	blx	r3
	ASSERT(!(length % data_size));
    468a:	fb95 f3f0 	sdiv	r3, r5, r0
    468e:	fb03 5010 	mls	r0, r3, r0, r5
    4692:	22bf      	movs	r2, #191	; 0xbf
    4694:	4639      	mov	r1, r7
    4696:	fab0 f080 	clz	r0, r0
    469a:	0940      	lsrs	r0, r0, #5
    469c:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    469e:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    46a0:	f813 b008 	ldrb.w	fp, [r3, r8]
    46a4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    46a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    46aa:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    46ae:	a801      	add	r0, sp, #4
    46b0:	4b1a      	ldr	r3, [pc, #104]	; (471c <adc_async_read_channel+0xd0>)
    46b2:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    46b4:	f10b 0a04 	add.w	sl, fp, #4
    46b8:	4650      	mov	r0, sl
    46ba:	4b19      	ldr	r3, [pc, #100]	; (4720 <adc_async_read_channel+0xd4>)
    46bc:	4798      	blx	r3
    46be:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    46c0:	a801      	add	r0, sp, #4
    46c2:	4b18      	ldr	r3, [pc, #96]	; (4724 <adc_async_read_channel+0xd8>)
    46c4:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    46c6:	f1b8 0f00 	cmp.w	r8, #0
    46ca:	d01c      	beq.n	4706 <adc_async_read_channel+0xba>
    46cc:	b1ed      	cbz	r5, 470a <adc_async_read_channel+0xbe>
    46ce:	3d01      	subs	r5, #1
    46d0:	b2ad      	uxth	r5, r5
    46d2:	3502      	adds	r5, #2
    46d4:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    46d6:	4f14      	ldr	r7, [pc, #80]	; (4728 <adc_async_read_channel+0xdc>)
    46d8:	b2a6      	uxth	r6, r4
    46da:	1e61      	subs	r1, r4, #1
    46dc:	4449      	add	r1, r9
    46de:	4650      	mov	r0, sl
    46e0:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    46e2:	4544      	cmp	r4, r8
    46e4:	d002      	beq.n	46ec <adc_async_read_channel+0xa0>
    46e6:	3401      	adds	r4, #1
    46e8:	42ac      	cmp	r4, r5
    46ea:	d1f5      	bne.n	46d8 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    46ec:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    46f0:	1b9b      	subs	r3, r3, r6
    46f2:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    46f6:	4630      	mov	r0, r6
    46f8:	b003      	add	sp, #12
    46fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    46fe:	2000      	movs	r0, #0
    4700:	e7b2      	b.n	4668 <adc_async_read_channel+0x1c>
    4702:	2000      	movs	r0, #0
    4704:	e7b0      	b.n	4668 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    4706:	2600      	movs	r6, #0
    4708:	e7f0      	b.n	46ec <adc_async_read_channel+0xa0>
    470a:	2600      	movs	r6, #0
    470c:	e7ee      	b.n	46ec <adc_async_read_channel+0xa0>
    470e:	bf00      	nop
    4710:	0000d5e0 	.word	0x0000d5e0
    4714:	00005b49 	.word	0x00005b49
    4718:	00006023 	.word	0x00006023
    471c:	00004755 	.word	0x00004755
    4720:	00005cc5 	.word	0x00005cc5
    4724:	00004763 	.word	0x00004763
    4728:	00005c41 	.word	0x00005c41

0000472c <adc_async_start_conversion>:
{
    472c:	b510      	push	{r4, lr}
	ASSERT(descr);
    472e:	4604      	mov	r4, r0
    4730:	22d6      	movs	r2, #214	; 0xd6
    4732:	4905      	ldr	r1, [pc, #20]	; (4748 <adc_async_start_conversion+0x1c>)
    4734:	3000      	adds	r0, #0
    4736:	bf18      	it	ne
    4738:	2001      	movne	r0, #1
    473a:	4b04      	ldr	r3, [pc, #16]	; (474c <adc_async_start_conversion+0x20>)
    473c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    473e:	4620      	mov	r0, r4
    4740:	4b03      	ldr	r3, [pc, #12]	; (4750 <adc_async_start_conversion+0x24>)
    4742:	4798      	blx	r3
}
    4744:	2000      	movs	r0, #0
    4746:	bd10      	pop	{r4, pc}
    4748:	0000d5e0 	.word	0x0000d5e0
    474c:	00005b49 	.word	0x00005b49
    4750:	00006035 	.word	0x00006035

00004754 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4754:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4758:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    475a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    475c:	f3bf 8f5f 	dmb	sy
    4760:	4770      	bx	lr

00004762 <atomic_leave_critical>:
    4762:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    4766:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4768:	f383 8810 	msr	PRIMASK, r3
    476c:	4770      	bx	lr
	...

00004770 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4770:	b538      	push	{r3, r4, r5, lr}
    4772:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    4774:	4605      	mov	r5, r0
    4776:	b158      	cbz	r0, 4790 <crc_sync_init+0x20>
    4778:	1c08      	adds	r0, r1, #0
    477a:	bf18      	it	ne
    477c:	2001      	movne	r0, #1
    477e:	222b      	movs	r2, #43	; 0x2b
    4780:	4904      	ldr	r1, [pc, #16]	; (4794 <crc_sync_init+0x24>)
    4782:	4b05      	ldr	r3, [pc, #20]	; (4798 <crc_sync_init+0x28>)
    4784:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4786:	4621      	mov	r1, r4
    4788:	4628      	mov	r0, r5
    478a:	4b04      	ldr	r3, [pc, #16]	; (479c <crc_sync_init+0x2c>)
    478c:	4798      	blx	r3
}
    478e:	bd38      	pop	{r3, r4, r5, pc}
    4790:	2000      	movs	r0, #0
    4792:	e7f4      	b.n	477e <crc_sync_init+0xe>
    4794:	0000d5fc 	.word	0x0000d5fc
    4798:	00005b49 	.word	0x00005b49
    479c:	00006435 	.word	0x00006435

000047a0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    47a0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    47a2:	4b02      	ldr	r3, [pc, #8]	; (47ac <delay_init+0xc>)
    47a4:	6018      	str	r0, [r3, #0]
    47a6:	4b02      	ldr	r3, [pc, #8]	; (47b0 <delay_init+0x10>)
    47a8:	4798      	blx	r3
    47aa:	bd08      	pop	{r3, pc}
    47ac:	20000648 	.word	0x20000648
    47b0:	00007e35 	.word	0x00007e35

000047b4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    47b4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    47b6:	4b04      	ldr	r3, [pc, #16]	; (47c8 <delay_us+0x14>)
    47b8:	681c      	ldr	r4, [r3, #0]
    47ba:	4b04      	ldr	r3, [pc, #16]	; (47cc <delay_us+0x18>)
    47bc:	4798      	blx	r3
    47be:	4601      	mov	r1, r0
    47c0:	4620      	mov	r0, r4
    47c2:	4b03      	ldr	r3, [pc, #12]	; (47d0 <delay_us+0x1c>)
    47c4:	4798      	blx	r3
    47c6:	bd10      	pop	{r4, pc}
    47c8:	20000648 	.word	0x20000648
    47cc:	000060f9 	.word	0x000060f9
    47d0:	00007e49 	.word	0x00007e49

000047d4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    47d4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    47d6:	4b04      	ldr	r3, [pc, #16]	; (47e8 <delay_ms+0x14>)
    47d8:	681c      	ldr	r4, [r3, #0]
    47da:	4b04      	ldr	r3, [pc, #16]	; (47ec <delay_ms+0x18>)
    47dc:	4798      	blx	r3
    47de:	4601      	mov	r1, r0
    47e0:	4620      	mov	r0, r4
    47e2:	4b03      	ldr	r3, [pc, #12]	; (47f0 <delay_ms+0x1c>)
    47e4:	4798      	blx	r3
    47e6:	bd10      	pop	{r4, pc}
    47e8:	20000648 	.word	0x20000648
    47ec:	00006101 	.word	0x00006101
    47f0:	00007e49 	.word	0x00007e49

000047f4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    47f4:	b508      	push	{r3, lr}
	return _event_system_init();
    47f6:	4b01      	ldr	r3, [pc, #4]	; (47fc <event_system_init+0x8>)
    47f8:	4798      	blx	r3
}
    47fa:	bd08      	pop	{r3, pc}
    47fc:	0000643d 	.word	0x0000643d

00004800 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4800:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4802:	6943      	ldr	r3, [r0, #20]
    4804:	b103      	cbz	r3, 4808 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    4806:	4798      	blx	r3
    4808:	bd08      	pop	{r3, pc}

0000480a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    480a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    480c:	6983      	ldr	r3, [r0, #24]
    480e:	b103      	cbz	r3, 4812 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4810:	4798      	blx	r3
    4812:	bd08      	pop	{r3, pc}

00004814 <flash_init>:
{
    4814:	b538      	push	{r3, r4, r5, lr}
    4816:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4818:	4604      	mov	r4, r0
    481a:	b190      	cbz	r0, 4842 <flash_init+0x2e>
    481c:	1c08      	adds	r0, r1, #0
    481e:	bf18      	it	ne
    4820:	2001      	movne	r0, #1
    4822:	2238      	movs	r2, #56	; 0x38
    4824:	4908      	ldr	r1, [pc, #32]	; (4848 <flash_init+0x34>)
    4826:	4b09      	ldr	r3, [pc, #36]	; (484c <flash_init+0x38>)
    4828:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    482a:	4629      	mov	r1, r5
    482c:	4620      	mov	r0, r4
    482e:	4b08      	ldr	r3, [pc, #32]	; (4850 <flash_init+0x3c>)
    4830:	4798      	blx	r3
	if (rc) {
    4832:	4603      	mov	r3, r0
    4834:	b918      	cbnz	r0, 483e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    4836:	4a07      	ldr	r2, [pc, #28]	; (4854 <flash_init+0x40>)
    4838:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    483a:	4a07      	ldr	r2, [pc, #28]	; (4858 <flash_init+0x44>)
    483c:	6062      	str	r2, [r4, #4]
}
    483e:	4618      	mov	r0, r3
    4840:	bd38      	pop	{r3, r4, r5, pc}
    4842:	2000      	movs	r0, #0
    4844:	e7ed      	b.n	4822 <flash_init+0xe>
    4846:	bf00      	nop
    4848:	0000d618 	.word	0x0000d618
    484c:	00005b49 	.word	0x00005b49
    4850:	00006549 	.word	0x00006549
    4854:	00004801 	.word	0x00004801
    4858:	0000480b 	.word	0x0000480b

0000485c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    485c:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    485e:	8843      	ldrh	r3, [r0, #2]
    4860:	f413 7f80 	tst.w	r3, #256	; 0x100
    4864:	d102      	bne.n	486c <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    4866:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4868:	b103      	cbz	r3, 486c <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    486a:	4798      	blx	r3
    486c:	bd08      	pop	{r3, pc}

0000486e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    486e:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4870:	8843      	ldrh	r3, [r0, #2]
    4872:	f413 7f80 	tst.w	r3, #256	; 0x100
    4876:	d102      	bne.n	487e <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    4878:	6b83      	ldr	r3, [r0, #56]	; 0x38
    487a:	b103      	cbz	r3, 487e <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    487c:	4798      	blx	r3
    487e:	bd08      	pop	{r3, pc}

00004880 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4880:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4882:	8843      	ldrh	r3, [r0, #2]
    4884:	f413 7f80 	tst.w	r3, #256	; 0x100
    4888:	d102      	bne.n	4890 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    488a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    488c:	b103      	cbz	r3, 4890 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    488e:	4798      	blx	r3
    4890:	bd08      	pop	{r3, pc}
	...

00004894 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4894:	b510      	push	{r4, lr}
    4896:	b084      	sub	sp, #16
    4898:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    489a:	8a83      	ldrh	r3, [r0, #20]
    489c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    48a0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    48a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    48a6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    48aa:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    48ac:	a901      	add	r1, sp, #4
    48ae:	3828      	subs	r0, #40	; 0x28
    48b0:	4b03      	ldr	r3, [pc, #12]	; (48c0 <i2c_m_async_write+0x2c>)
    48b2:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    48b4:	2800      	cmp	r0, #0
    48b6:	bf08      	it	eq
    48b8:	4620      	moveq	r0, r4
    48ba:	b004      	add	sp, #16
    48bc:	bd10      	pop	{r4, pc}
    48be:	bf00      	nop
    48c0:	00007385 	.word	0x00007385

000048c4 <i2c_m_async_read>:
{
    48c4:	b510      	push	{r4, lr}
    48c6:	b084      	sub	sp, #16
    48c8:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    48ca:	8a83      	ldrh	r3, [r0, #20]
    48cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    48d0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    48d2:	f248 0301 	movw	r3, #32769	; 0x8001
    48d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    48da:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    48dc:	a901      	add	r1, sp, #4
    48de:	3828      	subs	r0, #40	; 0x28
    48e0:	4b03      	ldr	r3, [pc, #12]	; (48f0 <i2c_m_async_read+0x2c>)
    48e2:	4798      	blx	r3
}
    48e4:	2800      	cmp	r0, #0
    48e6:	bf08      	it	eq
    48e8:	4620      	moveq	r0, r4
    48ea:	b004      	add	sp, #16
    48ec:	bd10      	pop	{r4, pc}
    48ee:	bf00      	nop
    48f0:	00007385 	.word	0x00007385

000048f4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    48f4:	b570      	push	{r4, r5, r6, lr}
    48f6:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    48f8:	4604      	mov	r4, r0
    48fa:	2289      	movs	r2, #137	; 0x89
    48fc:	490f      	ldr	r1, [pc, #60]	; (493c <i2c_m_async_init+0x48>)
    48fe:	3000      	adds	r0, #0
    4900:	bf18      	it	ne
    4902:	2001      	movne	r0, #1
    4904:	4b0e      	ldr	r3, [pc, #56]	; (4940 <i2c_m_async_init+0x4c>)
    4906:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4908:	4629      	mov	r1, r5
    490a:	4620      	mov	r0, r4
    490c:	4b0d      	ldr	r3, [pc, #52]	; (4944 <i2c_m_async_init+0x50>)
    490e:	4798      	blx	r3
	if (init_status) {
    4910:	4605      	mov	r5, r0
    4912:	b108      	cbz	r0, 4918 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4914:	4628      	mov	r0, r5
    4916:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4918:	4b0b      	ldr	r3, [pc, #44]	; (4948 <i2c_m_async_init+0x54>)
    491a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    491c:	4b0b      	ldr	r3, [pc, #44]	; (494c <i2c_m_async_init+0x58>)
    491e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4920:	4a0b      	ldr	r2, [pc, #44]	; (4950 <i2c_m_async_init+0x5c>)
    4922:	2101      	movs	r1, #1
    4924:	4620      	mov	r0, r4
    4926:	4e0b      	ldr	r6, [pc, #44]	; (4954 <i2c_m_async_init+0x60>)
    4928:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    492a:	4a0b      	ldr	r2, [pc, #44]	; (4958 <i2c_m_async_init+0x64>)
    492c:	2102      	movs	r1, #2
    492e:	4620      	mov	r0, r4
    4930:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4932:	4a0a      	ldr	r2, [pc, #40]	; (495c <i2c_m_async_init+0x68>)
    4934:	2100      	movs	r1, #0
    4936:	4620      	mov	r0, r4
    4938:	47b0      	blx	r6
	return ERR_NONE;
    493a:	e7eb      	b.n	4914 <i2c_m_async_init+0x20>
    493c:	0000d630 	.word	0x0000d630
    4940:	00005b49 	.word	0x00005b49
    4944:	00007305 	.word	0x00007305
    4948:	000048c5 	.word	0x000048c5
    494c:	00004895 	.word	0x00004895
    4950:	0000485d 	.word	0x0000485d
    4954:	000074b5 	.word	0x000074b5
    4958:	0000486f 	.word	0x0000486f
    495c:	00004881 	.word	0x00004881

00004960 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4960:	b570      	push	{r4, r5, r6, lr}
    4962:	460d      	mov	r5, r1
    4964:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4966:	4604      	mov	r4, r0
    4968:	b160      	cbz	r0, 4984 <io_write+0x24>
    496a:	1c08      	adds	r0, r1, #0
    496c:	bf18      	it	ne
    496e:	2001      	movne	r0, #1
    4970:	2234      	movs	r2, #52	; 0x34
    4972:	4905      	ldr	r1, [pc, #20]	; (4988 <io_write+0x28>)
    4974:	4b05      	ldr	r3, [pc, #20]	; (498c <io_write+0x2c>)
    4976:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4978:	6823      	ldr	r3, [r4, #0]
    497a:	4632      	mov	r2, r6
    497c:	4629      	mov	r1, r5
    497e:	4620      	mov	r0, r4
    4980:	4798      	blx	r3
}
    4982:	bd70      	pop	{r4, r5, r6, pc}
    4984:	2000      	movs	r0, #0
    4986:	e7f3      	b.n	4970 <io_write+0x10>
    4988:	0000d650 	.word	0x0000d650
    498c:	00005b49 	.word	0x00005b49

00004990 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4990:	b570      	push	{r4, r5, r6, lr}
    4992:	460d      	mov	r5, r1
    4994:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4996:	4604      	mov	r4, r0
    4998:	b160      	cbz	r0, 49b4 <io_read+0x24>
    499a:	1c08      	adds	r0, r1, #0
    499c:	bf18      	it	ne
    499e:	2001      	movne	r0, #1
    49a0:	223d      	movs	r2, #61	; 0x3d
    49a2:	4905      	ldr	r1, [pc, #20]	; (49b8 <io_read+0x28>)
    49a4:	4b05      	ldr	r3, [pc, #20]	; (49bc <io_read+0x2c>)
    49a6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    49a8:	6863      	ldr	r3, [r4, #4]
    49aa:	4632      	mov	r2, r6
    49ac:	4629      	mov	r1, r5
    49ae:	4620      	mov	r0, r4
    49b0:	4798      	blx	r3
}
    49b2:	bd70      	pop	{r4, r5, r6, pc}
    49b4:	2000      	movs	r0, #0
    49b6:	e7f3      	b.n	49a0 <io_read+0x10>
    49b8:	0000d650 	.word	0x0000d650
    49bc:	00005b49 	.word	0x00005b49

000049c0 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    49c0:	b538      	push	{r3, r4, r5, lr}
    49c2:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    49c4:	4605      	mov	r5, r0
    49c6:	b158      	cbz	r0, 49e0 <qspi_dma_init+0x20>
    49c8:	1c08      	adds	r0, r1, #0
    49ca:	bf18      	it	ne
    49cc:	2001      	movne	r0, #1
    49ce:	2231      	movs	r2, #49	; 0x31
    49d0:	4904      	ldr	r1, [pc, #16]	; (49e4 <qspi_dma_init+0x24>)
    49d2:	4b05      	ldr	r3, [pc, #20]	; (49e8 <qspi_dma_init+0x28>)
    49d4:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    49d6:	4621      	mov	r1, r4
    49d8:	4628      	mov	r0, r5
    49da:	4b04      	ldr	r3, [pc, #16]	; (49ec <qspi_dma_init+0x2c>)
    49dc:	4798      	blx	r3
}
    49de:	bd38      	pop	{r3, r4, r5, pc}
    49e0:	2000      	movs	r0, #0
    49e2:	e7f4      	b.n	49ce <qspi_dma_init+0xe>
    49e4:	0000d664 	.word	0x0000d664
    49e8:	00005b49 	.word	0x00005b49
    49ec:	00006769 	.word	0x00006769

000049f0 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    49f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49f2:	460f      	mov	r7, r1
    49f4:	4616      	mov	r6, r2
	ASSERT(io);
    49f6:	4604      	mov	r4, r0
    49f8:	f240 1227 	movw	r2, #295	; 0x127
    49fc:	4909      	ldr	r1, [pc, #36]	; (4a24 <_spi_m_async_io_write+0x34>)
    49fe:	3000      	adds	r0, #0
    4a00:	bf18      	it	ne
    4a02:	2001      	movne	r0, #1
    4a04:	4b08      	ldr	r3, [pc, #32]	; (4a28 <_spi_m_async_io_write+0x38>)
    4a06:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    4a08:	2500      	movs	r5, #0
    4a0a:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4a0c:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    4a0e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4a10:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4a12:	2310      	movs	r3, #16
    4a14:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    4a16:	2101      	movs	r1, #1
    4a18:	f1a4 0020 	sub.w	r0, r4, #32
    4a1c:	4b03      	ldr	r3, [pc, #12]	; (4a2c <_spi_m_async_io_write+0x3c>)
    4a1e:	4798      	blx	r3

	return ERR_NONE;
}
    4a20:	4628      	mov	r0, r5
    4a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a24:	0000d680 	.word	0x0000d680
    4a28:	00005b49 	.word	0x00005b49
    4a2c:	00007949 	.word	0x00007949

00004a30 <_spi_m_async_io_read>:
{
    4a30:	b570      	push	{r4, r5, r6, lr}
    4a32:	460d      	mov	r5, r1
    4a34:	4616      	mov	r6, r2
	ASSERT(io);
    4a36:	4604      	mov	r4, r0
    4a38:	f240 1205 	movw	r2, #261	; 0x105
    4a3c:	490c      	ldr	r1, [pc, #48]	; (4a70 <_spi_m_async_io_read+0x40>)
    4a3e:	3000      	adds	r0, #0
    4a40:	bf18      	it	ne
    4a42:	2001      	movne	r0, #1
    4a44:	4b0b      	ldr	r3, [pc, #44]	; (4a74 <_spi_m_async_io_read+0x44>)
    4a46:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    4a48:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    4a4a:	2500      	movs	r5, #0
    4a4c:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    4a4e:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4a50:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4a52:	2310      	movs	r3, #16
    4a54:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    4a56:	3c20      	subs	r4, #32
    4a58:	2101      	movs	r1, #1
    4a5a:	4620      	mov	r0, r4
    4a5c:	4b06      	ldr	r3, [pc, #24]	; (4a78 <_spi_m_async_io_read+0x48>)
    4a5e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4a60:	f240 11ff 	movw	r1, #511	; 0x1ff
    4a64:	4620      	mov	r0, r4
    4a66:	4b05      	ldr	r3, [pc, #20]	; (4a7c <_spi_m_async_io_read+0x4c>)
    4a68:	4798      	blx	r3
}
    4a6a:	4628      	mov	r0, r5
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
    4a6e:	bf00      	nop
    4a70:	0000d680 	.word	0x0000d680
    4a74:	00005b49 	.word	0x00005b49
    4a78:	0000797d 	.word	0x0000797d
    4a7c:	000079f9 	.word	0x000079f9

00004a80 <_spi_dev_error>:
{
    4a80:	b570      	push	{r4, r5, r6, lr}
    4a82:	4604      	mov	r4, r0
    4a84:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4a86:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    4a88:	2100      	movs	r1, #0
    4a8a:	4b09      	ldr	r3, [pc, #36]	; (4ab0 <_spi_dev_error+0x30>)
    4a8c:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4a8e:	2100      	movs	r1, #0
    4a90:	4620      	mov	r0, r4
    4a92:	4b08      	ldr	r3, [pc, #32]	; (4ab4 <_spi_dev_error+0x34>)
    4a94:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4a96:	2100      	movs	r1, #0
    4a98:	4620      	mov	r0, r4
    4a9a:	4b07      	ldr	r3, [pc, #28]	; (4ab8 <_spi_dev_error+0x38>)
    4a9c:	4798      	blx	r3
	spi->stat = 0;
    4a9e:	2300      	movs	r3, #0
    4aa0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    4aa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4aa6:	b113      	cbz	r3, 4aae <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    4aa8:	4631      	mov	r1, r6
    4aaa:	4628      	mov	r0, r5
    4aac:	4798      	blx	r3
    4aae:	bd70      	pop	{r4, r5, r6, pc}
    4ab0:	00007949 	.word	0x00007949
    4ab4:	0000797d 	.word	0x0000797d
    4ab8:	000079bd 	.word	0x000079bd

00004abc <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    4abc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4abe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4ac0:	429a      	cmp	r2, r3
    4ac2:	d200      	bcs.n	4ac6 <_spi_dev_complete+0xa>
    4ac4:	4770      	bx	lr
{
    4ac6:	b510      	push	{r4, lr}
    4ac8:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    4aca:	2100      	movs	r1, #0
    4acc:	4b04      	ldr	r3, [pc, #16]	; (4ae0 <_spi_dev_complete+0x24>)
    4ace:	4798      	blx	r3
		spi->stat = 0;
    4ad0:	2300      	movs	r3, #0
    4ad2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4ad6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4ad8:	b10b      	cbz	r3, 4ade <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    4ada:	1f20      	subs	r0, r4, #4
    4adc:	4798      	blx	r3
    4ade:	bd10      	pop	{r4, pc}
    4ae0:	000079bd 	.word	0x000079bd

00004ae4 <_spi_dev_tx>:
{
    4ae4:	b510      	push	{r4, lr}
    4ae6:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    4ae8:	7903      	ldrb	r3, [r0, #4]
    4aea:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4aec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4aee:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4af0:	f103 0101 	add.w	r1, r3, #1
    4af4:	6401      	str	r1, [r0, #64]	; 0x40
    4af6:	bf94      	ite	ls
    4af8:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4afa:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4afe:	4b08      	ldr	r3, [pc, #32]	; (4b20 <_spi_dev_tx+0x3c>)
    4b00:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    4b02:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4b04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4b06:	429a      	cmp	r2, r3
    4b08:	d000      	beq.n	4b0c <_spi_dev_tx+0x28>
    4b0a:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4b0c:	2100      	movs	r1, #0
    4b0e:	4620      	mov	r0, r4
    4b10:	4b04      	ldr	r3, [pc, #16]	; (4b24 <_spi_dev_tx+0x40>)
    4b12:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4b14:	2101      	movs	r1, #1
    4b16:	4620      	mov	r0, r4
    4b18:	4b03      	ldr	r3, [pc, #12]	; (4b28 <_spi_dev_tx+0x44>)
    4b1a:	4798      	blx	r3
}
    4b1c:	e7f5      	b.n	4b0a <_spi_dev_tx+0x26>
    4b1e:	bf00      	nop
    4b20:	000079f9 	.word	0x000079f9
    4b24:	00007949 	.word	0x00007949
    4b28:	000079bd 	.word	0x000079bd

00004b2c <_spi_dev_rx>:
{
    4b2c:	b570      	push	{r4, r5, r6, lr}
    4b2e:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4b30:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4b32:	b305      	cbz	r5, 4b76 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    4b34:	7903      	ldrb	r3, [r0, #4]
    4b36:	2b01      	cmp	r3, #1
    4b38:	d916      	bls.n	4b68 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4b3a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4b3c:	1c73      	adds	r3, r6, #1
    4b3e:	6403      	str	r3, [r0, #64]	; 0x40
    4b40:	4b18      	ldr	r3, [pc, #96]	; (4ba4 <_spi_dev_rx+0x78>)
    4b42:	4798      	blx	r3
    4b44:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    4b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4b4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4b4c:	4293      	cmp	r3, r2
    4b4e:	d21d      	bcs.n	4b8c <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4b50:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4b52:	b1b2      	cbz	r2, 4b82 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4b54:	7921      	ldrb	r1, [r4, #4]
    4b56:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4b58:	bf94      	ite	ls
    4b5a:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4b5c:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4b60:	4620      	mov	r0, r4
    4b62:	4b11      	ldr	r3, [pc, #68]	; (4ba8 <_spi_dev_rx+0x7c>)
    4b64:	4798      	blx	r3
    4b66:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4b68:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4b6a:	1c73      	adds	r3, r6, #1
    4b6c:	6403      	str	r3, [r0, #64]	; 0x40
    4b6e:	4b0d      	ldr	r3, [pc, #52]	; (4ba4 <_spi_dev_rx+0x78>)
    4b70:	4798      	blx	r3
    4b72:	55a8      	strb	r0, [r5, r6]
    4b74:	e7e8      	b.n	4b48 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    4b76:	4b0b      	ldr	r3, [pc, #44]	; (4ba4 <_spi_dev_rx+0x78>)
    4b78:	4798      	blx	r3
		spi->xfercnt++;
    4b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4b7c:	3301      	adds	r3, #1
    4b7e:	6423      	str	r3, [r4, #64]	; 0x40
    4b80:	e7e2      	b.n	4b48 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4b82:	88e1      	ldrh	r1, [r4, #6]
    4b84:	4620      	mov	r0, r4
    4b86:	4b08      	ldr	r3, [pc, #32]	; (4ba8 <_spi_dev_rx+0x7c>)
    4b88:	4798      	blx	r3
    4b8a:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    4b8c:	2100      	movs	r1, #0
    4b8e:	4620      	mov	r0, r4
    4b90:	4b06      	ldr	r3, [pc, #24]	; (4bac <_spi_dev_rx+0x80>)
    4b92:	4798      	blx	r3
		spi->stat = 0;
    4b94:	2300      	movs	r3, #0
    4b96:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4b9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4b9c:	b10b      	cbz	r3, 4ba2 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    4b9e:	1f20      	subs	r0, r4, #4
    4ba0:	4798      	blx	r3
    4ba2:	bd70      	pop	{r4, r5, r6, pc}
    4ba4:	00007a29 	.word	0x00007a29
    4ba8:	000079f9 	.word	0x000079f9
    4bac:	0000797d 	.word	0x0000797d

00004bb0 <spi_m_async_init>:
{
    4bb0:	b570      	push	{r4, r5, r6, lr}
    4bb2:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    4bb4:	4606      	mov	r6, r0
    4bb6:	b330      	cbz	r0, 4c06 <spi_m_async_init+0x56>
    4bb8:	1c08      	adds	r0, r1, #0
    4bba:	bf18      	it	ne
    4bbc:	2001      	movne	r0, #1
    4bbe:	22a5      	movs	r2, #165	; 0xa5
    4bc0:	4912      	ldr	r1, [pc, #72]	; (4c0c <spi_m_async_init+0x5c>)
    4bc2:	4b13      	ldr	r3, [pc, #76]	; (4c10 <spi_m_async_init+0x60>)
    4bc4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4bc6:	4634      	mov	r4, r6
    4bc8:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    4bcc:	4629      	mov	r1, r5
    4bce:	4620      	mov	r0, r4
    4bd0:	4b10      	ldr	r3, [pc, #64]	; (4c14 <spi_m_async_init+0x64>)
    4bd2:	4798      	blx	r3
	if (rc >= 0) {
    4bd4:	2800      	cmp	r0, #0
    4bd6:	db15      	blt.n	4c04 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4bd8:	4a0f      	ldr	r2, [pc, #60]	; (4c18 <spi_m_async_init+0x68>)
    4bda:	2100      	movs	r1, #0
    4bdc:	4620      	mov	r0, r4
    4bde:	4d0f      	ldr	r5, [pc, #60]	; (4c1c <spi_m_async_init+0x6c>)
    4be0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4be2:	4a0f      	ldr	r2, [pc, #60]	; (4c20 <spi_m_async_init+0x70>)
    4be4:	2101      	movs	r1, #1
    4be6:	4620      	mov	r0, r4
    4be8:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4bea:	4a0e      	ldr	r2, [pc, #56]	; (4c24 <spi_m_async_init+0x74>)
    4bec:	2102      	movs	r1, #2
    4bee:	4620      	mov	r0, r4
    4bf0:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4bf2:	4a0d      	ldr	r2, [pc, #52]	; (4c28 <spi_m_async_init+0x78>)
    4bf4:	2103      	movs	r1, #3
    4bf6:	4620      	mov	r0, r4
    4bf8:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    4bfa:	4b0c      	ldr	r3, [pc, #48]	; (4c2c <spi_m_async_init+0x7c>)
    4bfc:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4bfe:	4b0c      	ldr	r3, [pc, #48]	; (4c30 <spi_m_async_init+0x80>)
    4c00:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    4c02:	2000      	movs	r0, #0
}
    4c04:	bd70      	pop	{r4, r5, r6, pc}
    4c06:	2000      	movs	r0, #0
    4c08:	e7d9      	b.n	4bbe <spi_m_async_init+0xe>
    4c0a:	bf00      	nop
    4c0c:	0000d680 	.word	0x0000d680
    4c10:	00005b49 	.word	0x00005b49
    4c14:	00007841 	.word	0x00007841
    4c18:	00004ae5 	.word	0x00004ae5
    4c1c:	00007a55 	.word	0x00007a55
    4c20:	00004b2d 	.word	0x00004b2d
    4c24:	00004abd 	.word	0x00004abd
    4c28:	00004a81 	.word	0x00004a81
    4c2c:	00004a31 	.word	0x00004a31
    4c30:	000049f1 	.word	0x000049f1

00004c34 <spi_m_async_enable>:
{
    4c34:	b510      	push	{r4, lr}
	ASSERT(spi);
    4c36:	4604      	mov	r4, r0
    4c38:	22c1      	movs	r2, #193	; 0xc1
    4c3a:	4905      	ldr	r1, [pc, #20]	; (4c50 <spi_m_async_enable+0x1c>)
    4c3c:	3000      	adds	r0, #0
    4c3e:	bf18      	it	ne
    4c40:	2001      	movne	r0, #1
    4c42:	4b04      	ldr	r3, [pc, #16]	; (4c54 <spi_m_async_enable+0x20>)
    4c44:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    4c46:	1d20      	adds	r0, r4, #4
    4c48:	4b03      	ldr	r3, [pc, #12]	; (4c58 <spi_m_async_enable+0x24>)
    4c4a:	4798      	blx	r3
    4c4c:	bd10      	pop	{r4, pc}
    4c4e:	bf00      	nop
    4c50:	0000d680 	.word	0x0000d680
    4c54:	00005b49 	.word	0x00005b49
    4c58:	000078a9 	.word	0x000078a9

00004c5c <spi_m_async_set_baudrate>:
{
    4c5c:	b538      	push	{r3, r4, r5, lr}
    4c5e:	460d      	mov	r5, r1
	ASSERT(spi);
    4c60:	4604      	mov	r4, r0
    4c62:	22cf      	movs	r2, #207	; 0xcf
    4c64:	4909      	ldr	r1, [pc, #36]	; (4c8c <spi_m_async_set_baudrate+0x30>)
    4c66:	3000      	adds	r0, #0
    4c68:	bf18      	it	ne
    4c6a:	2001      	movne	r0, #1
    4c6c:	4b08      	ldr	r3, [pc, #32]	; (4c90 <spi_m_async_set_baudrate+0x34>)
    4c6e:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4c70:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4c74:	f013 0f10 	tst.w	r3, #16
    4c78:	d104      	bne.n	4c84 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    4c7a:	4629      	mov	r1, r5
    4c7c:	1d20      	adds	r0, r4, #4
    4c7e:	4b05      	ldr	r3, [pc, #20]	; (4c94 <spi_m_async_set_baudrate+0x38>)
    4c80:	4798      	blx	r3
    4c82:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4c84:	f06f 0003 	mvn.w	r0, #3
}
    4c88:	bd38      	pop	{r3, r4, r5, pc}
    4c8a:	bf00      	nop
    4c8c:	0000d680 	.word	0x0000d680
    4c90:	00005b49 	.word	0x00005b49
    4c94:	0000790d 	.word	0x0000790d

00004c98 <spi_m_async_set_mode>:
{
    4c98:	b538      	push	{r3, r4, r5, lr}
    4c9a:	460d      	mov	r5, r1
	ASSERT(spi);
    4c9c:	4604      	mov	r4, r0
    4c9e:	22d9      	movs	r2, #217	; 0xd9
    4ca0:	4909      	ldr	r1, [pc, #36]	; (4cc8 <spi_m_async_set_mode+0x30>)
    4ca2:	3000      	adds	r0, #0
    4ca4:	bf18      	it	ne
    4ca6:	2001      	movne	r0, #1
    4ca8:	4b08      	ldr	r3, [pc, #32]	; (4ccc <spi_m_async_set_mode+0x34>)
    4caa:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4cac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4cb0:	f013 0f10 	tst.w	r3, #16
    4cb4:	d104      	bne.n	4cc0 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    4cb6:	4629      	mov	r1, r5
    4cb8:	1d20      	adds	r0, r4, #4
    4cba:	4b05      	ldr	r3, [pc, #20]	; (4cd0 <spi_m_async_set_mode+0x38>)
    4cbc:	4798      	blx	r3
    4cbe:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4cc0:	f06f 0003 	mvn.w	r0, #3
}
    4cc4:	bd38      	pop	{r3, r4, r5, pc}
    4cc6:	bf00      	nop
    4cc8:	0000d680 	.word	0x0000d680
    4ccc:	00005b49 	.word	0x00005b49
    4cd0:	000078d9 	.word	0x000078d9

00004cd4 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    4cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cd6:	460d      	mov	r5, r1
    4cd8:	4617      	mov	r7, r2
    4cda:	461e      	mov	r6, r3
	ASSERT(spi);
    4cdc:	4604      	mov	r4, r0
    4cde:	f44f 729c 	mov.w	r2, #312	; 0x138
    4ce2:	4912      	ldr	r1, [pc, #72]	; (4d2c <spi_m_async_transfer+0x58>)
    4ce4:	3000      	adds	r0, #0
    4ce6:	bf18      	it	ne
    4ce8:	2001      	movne	r0, #1
    4cea:	4b11      	ldr	r3, [pc, #68]	; (4d30 <spi_m_async_transfer+0x5c>)
    4cec:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    4cee:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    4cf0:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    4cf2:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    4cf4:	2300      	movs	r3, #0
    4cf6:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4cf8:	2310      	movs	r3, #16
    4cfa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4cfe:	1d26      	adds	r6, r4, #4
    4d00:	2101      	movs	r1, #1
    4d02:	4630      	mov	r0, r6
    4d04:	4b0b      	ldr	r3, [pc, #44]	; (4d34 <spi_m_async_transfer+0x60>)
    4d06:	4798      	blx	r3
	if (txbuf) {
    4d08:	b15d      	cbz	r5, 4d22 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    4d0a:	7a23      	ldrb	r3, [r4, #8]
    4d0c:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    4d0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4d10:	bf94      	ite	ls
    4d12:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    4d14:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    4d18:	4630      	mov	r0, r6
    4d1a:	4b07      	ldr	r3, [pc, #28]	; (4d38 <spi_m_async_transfer+0x64>)
    4d1c:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    4d1e:	2000      	movs	r0, #0
    4d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    4d22:	8961      	ldrh	r1, [r4, #10]
    4d24:	4630      	mov	r0, r6
    4d26:	4b04      	ldr	r3, [pc, #16]	; (4d38 <spi_m_async_transfer+0x64>)
    4d28:	4798      	blx	r3
    4d2a:	e7f8      	b.n	4d1e <spi_m_async_transfer+0x4a>
    4d2c:	0000d680 	.word	0x0000d680
    4d30:	00005b49 	.word	0x00005b49
    4d34:	0000797d 	.word	0x0000797d
    4d38:	000079f9 	.word	0x000079f9

00004d3c <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    4d3c:	b570      	push	{r4, r5, r6, lr}
    4d3e:	460c      	mov	r4, r1
    4d40:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    4d42:	4605      	mov	r5, r0
    4d44:	b158      	cbz	r0, 4d5e <spi_m_async_register_callback+0x22>
    4d46:	2901      	cmp	r1, #1
    4d48:	bf8c      	ite	hi
    4d4a:	2000      	movhi	r0, #0
    4d4c:	2001      	movls	r0, #1
    4d4e:	f240 1263 	movw	r2, #355	; 0x163
    4d52:	4908      	ldr	r1, [pc, #32]	; (4d74 <spi_m_async_register_callback+0x38>)
    4d54:	4b08      	ldr	r3, [pc, #32]	; (4d78 <spi_m_async_register_callback+0x3c>)
    4d56:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4d58:	b91c      	cbnz	r4, 4d62 <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    4d5a:	632e      	str	r6, [r5, #48]	; 0x30
    4d5c:	bd70      	pop	{r4, r5, r6, pc}
    4d5e:	2000      	movs	r0, #0
    4d60:	e7f5      	b.n	4d4e <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    4d62:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    4d64:	1c32      	adds	r2, r6, #0
    4d66:	bf18      	it	ne
    4d68:	2201      	movne	r2, #1
    4d6a:	2103      	movs	r1, #3
    4d6c:	1d28      	adds	r0, r5, #4
    4d6e:	4b03      	ldr	r3, [pc, #12]	; (4d7c <spi_m_async_register_callback+0x40>)
    4d70:	4798      	blx	r3
    4d72:	bd70      	pop	{r4, r5, r6, pc}
    4d74:	0000d680 	.word	0x0000d680
    4d78:	00005b49 	.word	0x00005b49
    4d7c:	00007a89 	.word	0x00007a89

00004d80 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4d80:	b538      	push	{r3, r4, r5, lr}
    4d82:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4d84:	4604      	mov	r4, r0
    4d86:	b158      	cbz	r0, 4da0 <spi_m_async_get_io_descriptor+0x20>
    4d88:	1c08      	adds	r0, r1, #0
    4d8a:	bf18      	it	ne
    4d8c:	2001      	movne	r0, #1
    4d8e:	f240 126f 	movw	r2, #367	; 0x16f
    4d92:	4904      	ldr	r1, [pc, #16]	; (4da4 <spi_m_async_get_io_descriptor+0x24>)
    4d94:	4b04      	ldr	r3, [pc, #16]	; (4da8 <spi_m_async_get_io_descriptor+0x28>)
    4d96:	4798      	blx	r3
	*io = &spi->io;
    4d98:	3424      	adds	r4, #36	; 0x24
    4d9a:	602c      	str	r4, [r5, #0]
	return 0;
}
    4d9c:	2000      	movs	r0, #0
    4d9e:	bd38      	pop	{r3, r4, r5, pc}
    4da0:	2000      	movs	r0, #0
    4da2:	e7f4      	b.n	4d8e <spi_m_async_get_io_descriptor+0xe>
    4da4:	0000d680 	.word	0x0000d680
    4da8:	00005b49 	.word	0x00005b49

00004dac <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4dac:	b570      	push	{r4, r5, r6, lr}
    4dae:	460d      	mov	r5, r1
    4db0:	4616      	mov	r6, r2
	ASSERT(io);
    4db2:	4604      	mov	r4, r0
    4db4:	2298      	movs	r2, #152	; 0x98
    4db6:	4907      	ldr	r1, [pc, #28]	; (4dd4 <_spi_m_dma_io_write+0x28>)
    4db8:	3000      	adds	r0, #0
    4dba:	bf18      	it	ne
    4dbc:	2001      	movne	r0, #1
    4dbe:	4b06      	ldr	r3, [pc, #24]	; (4dd8 <_spi_m_dma_io_write+0x2c>)
    4dc0:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    4dc2:	4633      	mov	r3, r6
    4dc4:	2200      	movs	r2, #0
    4dc6:	4629      	mov	r1, r5
    4dc8:	f1a4 001c 	sub.w	r0, r4, #28
    4dcc:	4c03      	ldr	r4, [pc, #12]	; (4ddc <_spi_m_dma_io_write+0x30>)
    4dce:	47a0      	blx	r4
}
    4dd0:	bd70      	pop	{r4, r5, r6, pc}
    4dd2:	bf00      	nop
    4dd4:	0000d6a0 	.word	0x0000d6a0
    4dd8:	00005b49 	.word	0x00005b49
    4ddc:	00007cdd 	.word	0x00007cdd

00004de0 <_spi_m_dma_io_read>:
{
    4de0:	b570      	push	{r4, r5, r6, lr}
    4de2:	460d      	mov	r5, r1
    4de4:	4616      	mov	r6, r2
	ASSERT(io);
    4de6:	4604      	mov	r4, r0
    4de8:	2281      	movs	r2, #129	; 0x81
    4dea:	4907      	ldr	r1, [pc, #28]	; (4e08 <_spi_m_dma_io_read+0x28>)
    4dec:	3000      	adds	r0, #0
    4dee:	bf18      	it	ne
    4df0:	2001      	movne	r0, #1
    4df2:	4b06      	ldr	r3, [pc, #24]	; (4e0c <_spi_m_dma_io_read+0x2c>)
    4df4:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    4df6:	4633      	mov	r3, r6
    4df8:	462a      	mov	r2, r5
    4dfa:	2100      	movs	r1, #0
    4dfc:	f1a4 001c 	sub.w	r0, r4, #28
    4e00:	4c03      	ldr	r4, [pc, #12]	; (4e10 <_spi_m_dma_io_read+0x30>)
    4e02:	47a0      	blx	r4
}
    4e04:	bd70      	pop	{r4, r5, r6, pc}
    4e06:	bf00      	nop
    4e08:	0000d6a0 	.word	0x0000d6a0
    4e0c:	00005b49 	.word	0x00005b49
    4e10:	00007cdd 	.word	0x00007cdd

00004e14 <spi_m_dma_init>:
{
    4e14:	b538      	push	{r3, r4, r5, lr}
    4e16:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    4e18:	4605      	mov	r5, r0
    4e1a:	b1a0      	cbz	r0, 4e46 <spi_m_dma_init+0x32>
    4e1c:	1c08      	adds	r0, r1, #0
    4e1e:	bf18      	it	ne
    4e20:	2001      	movne	r0, #1
    4e22:	223b      	movs	r2, #59	; 0x3b
    4e24:	4909      	ldr	r1, [pc, #36]	; (4e4c <spi_m_dma_init+0x38>)
    4e26:	4b0a      	ldr	r3, [pc, #40]	; (4e50 <spi_m_dma_init+0x3c>)
    4e28:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4e2a:	4628      	mov	r0, r5
    4e2c:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    4e30:	4621      	mov	r1, r4
    4e32:	4b08      	ldr	r3, [pc, #32]	; (4e54 <spi_m_dma_init+0x40>)
    4e34:	4798      	blx	r3
	if (rc) {
    4e36:	4603      	mov	r3, r0
    4e38:	b918      	cbnz	r0, 4e42 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    4e3a:	4a07      	ldr	r2, [pc, #28]	; (4e58 <spi_m_dma_init+0x44>)
    4e3c:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    4e3e:	4a07      	ldr	r2, [pc, #28]	; (4e5c <spi_m_dma_init+0x48>)
    4e40:	622a      	str	r2, [r5, #32]
}
    4e42:	4618      	mov	r0, r3
    4e44:	bd38      	pop	{r3, r4, r5, pc}
    4e46:	2000      	movs	r0, #0
    4e48:	e7eb      	b.n	4e22 <spi_m_dma_init+0xe>
    4e4a:	bf00      	nop
    4e4c:	0000d6a0 	.word	0x0000d6a0
    4e50:	00005b49 	.word	0x00005b49
    4e54:	00007ac1 	.word	0x00007ac1
    4e58:	00004de1 	.word	0x00004de1
    4e5c:	00004dad 	.word	0x00004dad

00004e60 <spi_m_dma_enable>:
{
    4e60:	b510      	push	{r4, lr}
	ASSERT(spi);
    4e62:	4604      	mov	r4, r0
    4e64:	2251      	movs	r2, #81	; 0x51
    4e66:	4905      	ldr	r1, [pc, #20]	; (4e7c <spi_m_dma_enable+0x1c>)
    4e68:	3000      	adds	r0, #0
    4e6a:	bf18      	it	ne
    4e6c:	2001      	movne	r0, #1
    4e6e:	4b04      	ldr	r3, [pc, #16]	; (4e80 <spi_m_dma_enable+0x20>)
    4e70:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    4e72:	1d20      	adds	r0, r4, #4
    4e74:	4b03      	ldr	r3, [pc, #12]	; (4e84 <spi_m_dma_enable+0x24>)
    4e76:	4798      	blx	r3
    4e78:	bd10      	pop	{r4, pc}
    4e7a:	bf00      	nop
    4e7c:	0000d6a0 	.word	0x0000d6a0
    4e80:	00005b49 	.word	0x00005b49
    4e84:	00007c3d 	.word	0x00007c3d

00004e88 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4e88:	b570      	push	{r4, r5, r6, lr}
    4e8a:	460d      	mov	r5, r1
    4e8c:	4616      	mov	r6, r2
	ASSERT(spi);
    4e8e:	4604      	mov	r4, r0
    4e90:	22a8      	movs	r2, #168	; 0xa8
    4e92:	4906      	ldr	r1, [pc, #24]	; (4eac <spi_m_dma_register_callback+0x24>)
    4e94:	3000      	adds	r0, #0
    4e96:	bf18      	it	ne
    4e98:	2001      	movne	r0, #1
    4e9a:	4b05      	ldr	r3, [pc, #20]	; (4eb0 <spi_m_dma_register_callback+0x28>)
    4e9c:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    4e9e:	4632      	mov	r2, r6
    4ea0:	4629      	mov	r1, r5
    4ea2:	1d20      	adds	r0, r4, #4
    4ea4:	4b03      	ldr	r3, [pc, #12]	; (4eb4 <spi_m_dma_register_callback+0x2c>)
    4ea6:	4798      	blx	r3
    4ea8:	bd70      	pop	{r4, r5, r6, pc}
    4eaa:	bf00      	nop
    4eac:	0000d6a0 	.word	0x0000d6a0
    4eb0:	00005b49 	.word	0x00005b49
    4eb4:	00007c6d 	.word	0x00007c6d

00004eb8 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4eb8:	b538      	push	{r3, r4, r5, lr}
    4eba:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4ebc:	4604      	mov	r4, r0
    4ebe:	b150      	cbz	r0, 4ed6 <spi_m_dma_get_io_descriptor+0x1e>
    4ec0:	1c08      	adds	r0, r1, #0
    4ec2:	bf18      	it	ne
    4ec4:	2001      	movne	r0, #1
    4ec6:	22ae      	movs	r2, #174	; 0xae
    4ec8:	4904      	ldr	r1, [pc, #16]	; (4edc <spi_m_dma_get_io_descriptor+0x24>)
    4eca:	4b05      	ldr	r3, [pc, #20]	; (4ee0 <spi_m_dma_get_io_descriptor+0x28>)
    4ecc:	4798      	blx	r3
	*io = &spi->io;
    4ece:	3420      	adds	r4, #32
    4ed0:	602c      	str	r4, [r5, #0]

	return 0;
}
    4ed2:	2000      	movs	r0, #0
    4ed4:	bd38      	pop	{r3, r4, r5, pc}
    4ed6:	2000      	movs	r0, #0
    4ed8:	e7f5      	b.n	4ec6 <spi_m_dma_get_io_descriptor+0xe>
    4eda:	bf00      	nop
    4edc:	0000d6a0 	.word	0x0000d6a0
    4ee0:	00005b49 	.word	0x00005b49

00004ee4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ee6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    4ee8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    4eea:	b12f      	cbz	r7, 4ef8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    4eec:	688d      	ldr	r5, [r1, #8]
    4eee:	463c      	mov	r4, r7
    4ef0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4ef2:	f1c2 0e01 	rsb	lr, r2, #1
    4ef6:	e00b      	b.n	4f10 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    4ef8:	4b0e      	ldr	r3, [pc, #56]	; (4f34 <timer_add_timer_task+0x50>)
    4efa:	4798      	blx	r3
		return;
    4efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4efe:	4473      	add	r3, lr
    4f00:	68a0      	ldr	r0, [r4, #8]
    4f02:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    4f04:	42ab      	cmp	r3, r5
    4f06:	d20a      	bcs.n	4f1e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    4f08:	6823      	ldr	r3, [r4, #0]
    4f0a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4f0c:	b153      	cbz	r3, 4f24 <timer_add_timer_task+0x40>
    4f0e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    4f10:	6863      	ldr	r3, [r4, #4]
    4f12:	4293      	cmp	r3, r2
    4f14:	d8f3      	bhi.n	4efe <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    4f16:	68a0      	ldr	r0, [r4, #8]
    4f18:	4403      	add	r3, r0
    4f1a:	1a9b      	subs	r3, r3, r2
    4f1c:	e7f2      	b.n	4f04 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    4f1e:	42a7      	cmp	r7, r4
    4f20:	d004      	beq.n	4f2c <timer_add_timer_task+0x48>
    4f22:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    4f24:	4620      	mov	r0, r4
    4f26:	4b04      	ldr	r3, [pc, #16]	; (4f38 <timer_add_timer_task+0x54>)
    4f28:	4798      	blx	r3
    4f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    4f2c:	4660      	mov	r0, ip
    4f2e:	4b01      	ldr	r3, [pc, #4]	; (4f34 <timer_add_timer_task+0x50>)
    4f30:	4798      	blx	r3
    4f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f34:	00005b71 	.word	0x00005b71
    4f38:	00005b9d 	.word	0x00005b9d

00004f3c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    4f40:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    4f42:	6907      	ldr	r7, [r0, #16]
    4f44:	3701      	adds	r7, #1
    4f46:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4f48:	7e03      	ldrb	r3, [r0, #24]
    4f4a:	f013 0f01 	tst.w	r3, #1
    4f4e:	d113      	bne.n	4f78 <timer_process_counted+0x3c>
    4f50:	7e03      	ldrb	r3, [r0, #24]
    4f52:	f013 0f02 	tst.w	r3, #2
    4f56:	d10f      	bne.n	4f78 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4f58:	b354      	cbz	r4, 4fb0 <timer_process_counted+0x74>
    4f5a:	6863      	ldr	r3, [r4, #4]
    4f5c:	1afb      	subs	r3, r7, r3
    4f5e:	68a2      	ldr	r2, [r4, #8]
    4f60:	4293      	cmp	r3, r2
    4f62:	d307      	bcc.n	4f74 <timer_process_counted+0x38>
    4f64:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    4f66:	f100 0814 	add.w	r8, r0, #20
    4f6a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4fb4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    4f6e:	f8df a048 	ldr.w	sl, [pc, #72]	; 4fb8 <timer_process_counted+0x7c>
    4f72:	e012      	b.n	4f9a <timer_process_counted+0x5e>
    4f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4f78:	7e03      	ldrb	r3, [r0, #24]
    4f7a:	f043 0302 	orr.w	r3, r3, #2
    4f7e:	7603      	strb	r3, [r0, #24]
		return;
    4f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f84:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    4f86:	68e3      	ldr	r3, [r4, #12]
    4f88:	4620      	mov	r0, r4
    4f8a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4f8c:	b185      	cbz	r5, 4fb0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4f8e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4f90:	686b      	ldr	r3, [r5, #4]
    4f92:	1afb      	subs	r3, r7, r3
    4f94:	68aa      	ldr	r2, [r5, #8]
    4f96:	4293      	cmp	r3, r2
    4f98:	d30a      	bcc.n	4fb0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    4f9a:	4640      	mov	r0, r8
    4f9c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4f9e:	7c23      	ldrb	r3, [r4, #16]
    4fa0:	2b01      	cmp	r3, #1
    4fa2:	d1ef      	bne.n	4f84 <timer_process_counted+0x48>
			tmp->time_label = time;
    4fa4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4fa6:	463a      	mov	r2, r7
    4fa8:	4621      	mov	r1, r4
    4faa:	4640      	mov	r0, r8
    4fac:	47d0      	blx	sl
    4fae:	e7e9      	b.n	4f84 <timer_process_counted+0x48>
    4fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4fb4:	00005be5 	.word	0x00005be5
    4fb8:	00004ee5 	.word	0x00004ee5

00004fbc <timer_init>:
{
    4fbc:	b570      	push	{r4, r5, r6, lr}
    4fbe:	460e      	mov	r6, r1
    4fc0:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    4fc2:	4604      	mov	r4, r0
    4fc4:	b190      	cbz	r0, 4fec <timer_init+0x30>
    4fc6:	b199      	cbz	r1, 4ff0 <timer_init+0x34>
    4fc8:	1c10      	adds	r0, r2, #0
    4fca:	bf18      	it	ne
    4fcc:	2001      	movne	r0, #1
    4fce:	223b      	movs	r2, #59	; 0x3b
    4fd0:	4908      	ldr	r1, [pc, #32]	; (4ff4 <timer_init+0x38>)
    4fd2:	4b09      	ldr	r3, [pc, #36]	; (4ff8 <timer_init+0x3c>)
    4fd4:	4798      	blx	r3
	descr->func = func;
    4fd6:	4620      	mov	r0, r4
    4fd8:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    4fdc:	682b      	ldr	r3, [r5, #0]
    4fde:	4631      	mov	r1, r6
    4fe0:	4798      	blx	r3
	descr->time                           = 0;
    4fe2:	2000      	movs	r0, #0
    4fe4:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4fe6:	4b05      	ldr	r3, [pc, #20]	; (4ffc <timer_init+0x40>)
    4fe8:	6063      	str	r3, [r4, #4]
}
    4fea:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    4fec:	2000      	movs	r0, #0
    4fee:	e7ee      	b.n	4fce <timer_init+0x12>
    4ff0:	2000      	movs	r0, #0
    4ff2:	e7ec      	b.n	4fce <timer_init+0x12>
    4ff4:	0000d6bc 	.word	0x0000d6bc
    4ff8:	00005b49 	.word	0x00005b49
    4ffc:	00004f3d 	.word	0x00004f3d

00005000 <timer_start>:
{
    5000:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    5002:	4604      	mov	r4, r0
    5004:	b198      	cbz	r0, 502e <timer_start+0x2e>
    5006:	6800      	ldr	r0, [r0, #0]
    5008:	3000      	adds	r0, #0
    500a:	bf18      	it	ne
    500c:	2001      	movne	r0, #1
    500e:	2254      	movs	r2, #84	; 0x54
    5010:	4909      	ldr	r1, [pc, #36]	; (5038 <timer_start+0x38>)
    5012:	4b0a      	ldr	r3, [pc, #40]	; (503c <timer_start+0x3c>)
    5014:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    5016:	1d25      	adds	r5, r4, #4
    5018:	6823      	ldr	r3, [r4, #0]
    501a:	699b      	ldr	r3, [r3, #24]
    501c:	4628      	mov	r0, r5
    501e:	4798      	blx	r3
    5020:	b938      	cbnz	r0, 5032 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    5022:	6823      	ldr	r3, [r4, #0]
    5024:	689b      	ldr	r3, [r3, #8]
    5026:	4628      	mov	r0, r5
    5028:	4798      	blx	r3
	return ERR_NONE;
    502a:	2000      	movs	r0, #0
    502c:	bd38      	pop	{r3, r4, r5, pc}
    502e:	2000      	movs	r0, #0
    5030:	e7ed      	b.n	500e <timer_start+0xe>
		return ERR_DENIED;
    5032:	f06f 0010 	mvn.w	r0, #16
}
    5036:	bd38      	pop	{r3, r4, r5, pc}
    5038:	0000d6bc 	.word	0x0000d6bc
    503c:	00005b49 	.word	0x00005b49

00005040 <timer_add_task>:
{
    5040:	b570      	push	{r4, r5, r6, lr}
    5042:	b082      	sub	sp, #8
    5044:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    5046:	4604      	mov	r4, r0
    5048:	b328      	cbz	r0, 5096 <timer_add_task+0x56>
    504a:	b331      	cbz	r1, 509a <timer_add_task+0x5a>
    504c:	6800      	ldr	r0, [r0, #0]
    504e:	3000      	adds	r0, #0
    5050:	bf18      	it	ne
    5052:	2001      	movne	r0, #1
    5054:	227b      	movs	r2, #123	; 0x7b
    5056:	4920      	ldr	r1, [pc, #128]	; (50d8 <timer_add_task+0x98>)
    5058:	4b20      	ldr	r3, [pc, #128]	; (50dc <timer_add_task+0x9c>)
    505a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    505c:	7f23      	ldrb	r3, [r4, #28]
    505e:	f043 0301 	orr.w	r3, r3, #1
    5062:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    5064:	f104 0618 	add.w	r6, r4, #24
    5068:	4629      	mov	r1, r5
    506a:	4630      	mov	r0, r6
    506c:	4b1c      	ldr	r3, [pc, #112]	; (50e0 <timer_add_task+0xa0>)
    506e:	4798      	blx	r3
    5070:	b9a8      	cbnz	r0, 509e <timer_add_task+0x5e>
	task->time_label = descr->time;
    5072:	6963      	ldr	r3, [r4, #20]
    5074:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    5076:	6962      	ldr	r2, [r4, #20]
    5078:	4629      	mov	r1, r5
    507a:	4630      	mov	r0, r6
    507c:	4b19      	ldr	r3, [pc, #100]	; (50e4 <timer_add_task+0xa4>)
    507e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5080:	7f23      	ldrb	r3, [r4, #28]
    5082:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    5086:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5088:	7f23      	ldrb	r3, [r4, #28]
    508a:	f013 0f02 	tst.w	r3, #2
    508e:	d112      	bne.n	50b6 <timer_add_task+0x76>
	return ERR_NONE;
    5090:	2000      	movs	r0, #0
}
    5092:	b002      	add	sp, #8
    5094:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    5096:	2000      	movs	r0, #0
    5098:	e7dc      	b.n	5054 <timer_add_task+0x14>
    509a:	2000      	movs	r0, #0
    509c:	e7da      	b.n	5054 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    509e:	7f23      	ldrb	r3, [r4, #28]
    50a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    50a4:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    50a6:	2280      	movs	r2, #128	; 0x80
    50a8:	490b      	ldr	r1, [pc, #44]	; (50d8 <timer_add_task+0x98>)
    50aa:	2000      	movs	r0, #0
    50ac:	4b0b      	ldr	r3, [pc, #44]	; (50dc <timer_add_task+0x9c>)
    50ae:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    50b0:	f06f 0011 	mvn.w	r0, #17
    50b4:	e7ed      	b.n	5092 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    50b6:	a801      	add	r0, sp, #4
    50b8:	4b0b      	ldr	r3, [pc, #44]	; (50e8 <timer_add_task+0xa8>)
    50ba:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    50bc:	7f23      	ldrb	r3, [r4, #28]
    50be:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    50c2:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    50c4:	6823      	ldr	r3, [r4, #0]
    50c6:	69db      	ldr	r3, [r3, #28]
    50c8:	1d20      	adds	r0, r4, #4
    50ca:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    50cc:	a801      	add	r0, sp, #4
    50ce:	4b07      	ldr	r3, [pc, #28]	; (50ec <timer_add_task+0xac>)
    50d0:	4798      	blx	r3
	return ERR_NONE;
    50d2:	2000      	movs	r0, #0
    50d4:	e7dd      	b.n	5092 <timer_add_task+0x52>
    50d6:	bf00      	nop
    50d8:	0000d6bc 	.word	0x0000d6bc
    50dc:	00005b49 	.word	0x00005b49
    50e0:	00005b4f 	.word	0x00005b4f
    50e4:	00004ee5 	.word	0x00004ee5
    50e8:	00004755 	.word	0x00004755
    50ec:	00004763 	.word	0x00004763

000050f0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    50f0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    50f2:	2300      	movs	r3, #0
    50f4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    50f6:	69c3      	ldr	r3, [r0, #28]
    50f8:	b11b      	cbz	r3, 5102 <usart_transmission_complete+0x12>
    50fa:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    50fe:	4610      	mov	r0, r2
    5100:	4798      	blx	r3
    5102:	bd08      	pop	{r3, pc}

00005104 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    5104:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    5106:	2300      	movs	r3, #0
    5108:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    510a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    510c:	b11b      	cbz	r3, 5116 <usart_error+0x12>
    510e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    5112:	4610      	mov	r0, r2
    5114:	4798      	blx	r3
    5116:	bd08      	pop	{r3, pc}

00005118 <usart_fill_rx_buffer>:
{
    5118:	b538      	push	{r3, r4, r5, lr}
    511a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    511c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    5120:	302c      	adds	r0, #44	; 0x2c
    5122:	4b03      	ldr	r3, [pc, #12]	; (5130 <usart_fill_rx_buffer+0x18>)
    5124:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    5126:	6a23      	ldr	r3, [r4, #32]
    5128:	b10b      	cbz	r3, 512e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    512a:	4628      	mov	r0, r5
    512c:	4798      	blx	r3
    512e:	bd38      	pop	{r3, r4, r5, pc}
    5130:	00005c85 	.word	0x00005c85

00005134 <usart_async_write>:
{
    5134:	b570      	push	{r4, r5, r6, lr}
    5136:	460e      	mov	r6, r1
    5138:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    513a:	4604      	mov	r4, r0
    513c:	b1e0      	cbz	r0, 5178 <usart_async_write+0x44>
    513e:	b1e9      	cbz	r1, 517c <usart_async_write+0x48>
    5140:	1c10      	adds	r0, r2, #0
    5142:	bf18      	it	ne
    5144:	2001      	movne	r0, #1
    5146:	f240 123b 	movw	r2, #315	; 0x13b
    514a:	490f      	ldr	r1, [pc, #60]	; (5188 <usart_async_write+0x54>)
    514c:	4b0f      	ldr	r3, [pc, #60]	; (518c <usart_async_write+0x58>)
    514e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    5150:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    5154:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    5158:	429a      	cmp	r2, r3
    515a:	d111      	bne.n	5180 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    515c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    515e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    5162:	2300      	movs	r3, #0
    5164:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    5168:	2301      	movs	r3, #1
    516a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    516c:	f104 0008 	add.w	r0, r4, #8
    5170:	4b07      	ldr	r3, [pc, #28]	; (5190 <usart_async_write+0x5c>)
    5172:	4798      	blx	r3
	return (int32_t)length;
    5174:	4628      	mov	r0, r5
    5176:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    5178:	2000      	movs	r0, #0
    517a:	e7e4      	b.n	5146 <usart_async_write+0x12>
    517c:	2000      	movs	r0, #0
    517e:	e7e2      	b.n	5146 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    5180:	f06f 001b 	mvn.w	r0, #27
}
    5184:	bd70      	pop	{r4, r5, r6, pc}
    5186:	bf00      	nop
    5188:	0000d6d4 	.word	0x0000d6d4
    518c:	00005b49 	.word	0x00005b49
    5190:	00007287 	.word	0x00007287

00005194 <usart_process_byte_sent>:
{
    5194:	b510      	push	{r4, lr}
    5196:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    5198:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    519a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    519e:	429a      	cmp	r2, r3
    51a0:	d009      	beq.n	51b6 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    51a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    51a4:	1c59      	adds	r1, r3, #1
    51a6:	8781      	strh	r1, [r0, #60]	; 0x3c
    51a8:	5cd1      	ldrb	r1, [r2, r3]
    51aa:	4b04      	ldr	r3, [pc, #16]	; (51bc <usart_process_byte_sent+0x28>)
    51ac:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    51ae:	4620      	mov	r0, r4
    51b0:	4b03      	ldr	r3, [pc, #12]	; (51c0 <usart_process_byte_sent+0x2c>)
    51b2:	4798      	blx	r3
    51b4:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    51b6:	4b03      	ldr	r3, [pc, #12]	; (51c4 <usart_process_byte_sent+0x30>)
    51b8:	4798      	blx	r3
    51ba:	bd10      	pop	{r4, pc}
    51bc:	0000725b 	.word	0x0000725b
    51c0:	00007287 	.word	0x00007287
    51c4:	0000728f 	.word	0x0000728f

000051c8 <usart_async_read>:
{
    51c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51cc:	b082      	sub	sp, #8
    51ce:	460f      	mov	r7, r1
    51d0:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    51d2:	4606      	mov	r6, r0
    51d4:	b1a0      	cbz	r0, 5200 <usart_async_read+0x38>
    51d6:	b199      	cbz	r1, 5200 <usart_async_read+0x38>
    51d8:	2a00      	cmp	r2, #0
    51da:	d12d      	bne.n	5238 <usart_async_read+0x70>
    51dc:	f44f 72ac 	mov.w	r2, #344	; 0x158
    51e0:	4929      	ldr	r1, [pc, #164]	; (5288 <usart_async_read+0xc0>)
    51e2:	2000      	movs	r0, #0
    51e4:	4b29      	ldr	r3, [pc, #164]	; (528c <usart_async_read+0xc4>)
    51e6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    51e8:	a801      	add	r0, sp, #4
    51ea:	4b29      	ldr	r3, [pc, #164]	; (5290 <usart_async_read+0xc8>)
    51ec:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    51ee:	f106 0034 	add.w	r0, r6, #52	; 0x34
    51f2:	4b28      	ldr	r3, [pc, #160]	; (5294 <usart_async_read+0xcc>)
    51f4:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    51f6:	a801      	add	r0, sp, #4
    51f8:	4b27      	ldr	r3, [pc, #156]	; (5298 <usart_async_read+0xd0>)
    51fa:	4798      	blx	r3
	uint16_t                       was_read = 0;
    51fc:	2500      	movs	r5, #0
	return (int32_t)was_read;
    51fe:	e03e      	b.n	527e <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5200:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5204:	4920      	ldr	r1, [pc, #128]	; (5288 <usart_async_read+0xc0>)
    5206:	2000      	movs	r0, #0
    5208:	4b20      	ldr	r3, [pc, #128]	; (528c <usart_async_read+0xc4>)
    520a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    520c:	a801      	add	r0, sp, #4
    520e:	4b20      	ldr	r3, [pc, #128]	; (5290 <usart_async_read+0xc8>)
    5210:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5212:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    5216:	4650      	mov	r0, sl
    5218:	4b1e      	ldr	r3, [pc, #120]	; (5294 <usart_async_read+0xcc>)
    521a:	4798      	blx	r3
    521c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    521e:	a801      	add	r0, sp, #4
    5220:	4b1d      	ldr	r3, [pc, #116]	; (5298 <usart_async_read+0xd0>)
    5222:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    5224:	f1b9 0f00 	cmp.w	r9, #0
    5228:	d004      	beq.n	5234 <usart_async_read+0x6c>
    522a:	f1b8 0f00 	cmp.w	r8, #0
    522e:	d119      	bne.n	5264 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    5230:	2500      	movs	r5, #0
    5232:	e024      	b.n	527e <usart_async_read+0xb6>
    5234:	2500      	movs	r5, #0
    5236:	e022      	b.n	527e <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5238:	f44f 72ac 	mov.w	r2, #344	; 0x158
    523c:	4912      	ldr	r1, [pc, #72]	; (5288 <usart_async_read+0xc0>)
    523e:	2001      	movs	r0, #1
    5240:	4b12      	ldr	r3, [pc, #72]	; (528c <usart_async_read+0xc4>)
    5242:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5244:	a801      	add	r0, sp, #4
    5246:	4b12      	ldr	r3, [pc, #72]	; (5290 <usart_async_read+0xc8>)
    5248:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    524a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    524e:	4650      	mov	r0, sl
    5250:	4b10      	ldr	r3, [pc, #64]	; (5294 <usart_async_read+0xcc>)
    5252:	4798      	blx	r3
    5254:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    5256:	a801      	add	r0, sp, #4
    5258:	4b0f      	ldr	r3, [pc, #60]	; (5298 <usart_async_read+0xd0>)
    525a:	4798      	blx	r3
	uint16_t                       was_read = 0;
    525c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    525e:	f1b9 0f00 	cmp.w	r9, #0
    5262:	d00c      	beq.n	527e <usart_async_read+0xb6>
{
    5264:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    5266:	4e0d      	ldr	r6, [pc, #52]	; (529c <usart_async_read+0xd4>)
    5268:	1c60      	adds	r0, r4, #1
    526a:	b285      	uxth	r5, r0
    526c:	1939      	adds	r1, r7, r4
    526e:	4650      	mov	r0, sl
    5270:	47b0      	blx	r6
    5272:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    5274:	454c      	cmp	r4, r9
    5276:	d202      	bcs.n	527e <usart_async_read+0xb6>
    5278:	b2a3      	uxth	r3, r4
    527a:	4598      	cmp	r8, r3
    527c:	d8f4      	bhi.n	5268 <usart_async_read+0xa0>
}
    527e:	4628      	mov	r0, r5
    5280:	b002      	add	sp, #8
    5282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5286:	bf00      	nop
    5288:	0000d6d4 	.word	0x0000d6d4
    528c:	00005b49 	.word	0x00005b49
    5290:	00004755 	.word	0x00004755
    5294:	00005cc5 	.word	0x00005cc5
    5298:	00004763 	.word	0x00004763
    529c:	00005c41 	.word	0x00005c41

000052a0 <usart_async_init>:
{
    52a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52a2:	460d      	mov	r5, r1
    52a4:	4616      	mov	r6, r2
    52a6:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    52a8:	4604      	mov	r4, r0
    52aa:	b320      	cbz	r0, 52f6 <usart_async_init+0x56>
    52ac:	b329      	cbz	r1, 52fa <usart_async_init+0x5a>
    52ae:	b332      	cbz	r2, 52fe <usart_async_init+0x5e>
    52b0:	1c18      	adds	r0, r3, #0
    52b2:	bf18      	it	ne
    52b4:	2001      	movne	r0, #1
    52b6:	223a      	movs	r2, #58	; 0x3a
    52b8:	4913      	ldr	r1, [pc, #76]	; (5308 <usart_async_init+0x68>)
    52ba:	4b14      	ldr	r3, [pc, #80]	; (530c <usart_async_init+0x6c>)
    52bc:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    52be:	463a      	mov	r2, r7
    52c0:	4631      	mov	r1, r6
    52c2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    52c6:	4b12      	ldr	r3, [pc, #72]	; (5310 <usart_async_init+0x70>)
    52c8:	4798      	blx	r3
    52ca:	b9d0      	cbnz	r0, 5302 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    52cc:	4629      	mov	r1, r5
    52ce:	f104 0008 	add.w	r0, r4, #8
    52d2:	4b10      	ldr	r3, [pc, #64]	; (5314 <usart_async_init+0x74>)
    52d4:	4798      	blx	r3
	if (init_status) {
    52d6:	4603      	mov	r3, r0
    52d8:	b958      	cbnz	r0, 52f2 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    52da:	4a0f      	ldr	r2, [pc, #60]	; (5318 <usart_async_init+0x78>)
    52dc:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    52de:	4a0f      	ldr	r2, [pc, #60]	; (531c <usart_async_init+0x7c>)
    52e0:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    52e2:	4a0f      	ldr	r2, [pc, #60]	; (5320 <usart_async_init+0x80>)
    52e4:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    52e6:	4a0f      	ldr	r2, [pc, #60]	; (5324 <usart_async_init+0x84>)
    52e8:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    52ea:	4a0f      	ldr	r2, [pc, #60]	; (5328 <usart_async_init+0x88>)
    52ec:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    52ee:	4a0f      	ldr	r2, [pc, #60]	; (532c <usart_async_init+0x8c>)
    52f0:	6162      	str	r2, [r4, #20]
}
    52f2:	4618      	mov	r0, r3
    52f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    52f6:	2000      	movs	r0, #0
    52f8:	e7dd      	b.n	52b6 <usart_async_init+0x16>
    52fa:	2000      	movs	r0, #0
    52fc:	e7db      	b.n	52b6 <usart_async_init+0x16>
    52fe:	2000      	movs	r0, #0
    5300:	e7d9      	b.n	52b6 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    5302:	f06f 030c 	mvn.w	r3, #12
    5306:	e7f4      	b.n	52f2 <usart_async_init+0x52>
    5308:	0000d6d4 	.word	0x0000d6d4
    530c:	00005b49 	.word	0x00005b49
    5310:	00005bf1 	.word	0x00005bf1
    5314:	0000718d 	.word	0x0000718d
    5318:	000051c9 	.word	0x000051c9
    531c:	00005135 	.word	0x00005135
    5320:	00005195 	.word	0x00005195
    5324:	00005119 	.word	0x00005119
    5328:	000050f1 	.word	0x000050f1
    532c:	00005105 	.word	0x00005105

00005330 <usart_async_enable>:
{
    5330:	b510      	push	{r4, lr}
	ASSERT(descr);
    5332:	4604      	mov	r4, r0
    5334:	2261      	movs	r2, #97	; 0x61
    5336:	4906      	ldr	r1, [pc, #24]	; (5350 <usart_async_enable+0x20>)
    5338:	3000      	adds	r0, #0
    533a:	bf18      	it	ne
    533c:	2001      	movne	r0, #1
    533e:	4b05      	ldr	r3, [pc, #20]	; (5354 <usart_async_enable+0x24>)
    5340:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    5342:	f104 0008 	add.w	r0, r4, #8
    5346:	4b04      	ldr	r3, [pc, #16]	; (5358 <usart_async_enable+0x28>)
    5348:	4798      	blx	r3
}
    534a:	2000      	movs	r0, #0
    534c:	bd10      	pop	{r4, pc}
    534e:	bf00      	nop
    5350:	0000d6d4 	.word	0x0000d6d4
    5354:	00005b49 	.word	0x00005b49
    5358:	0000721d 	.word	0x0000721d

0000535c <usart_async_disable>:
{
    535c:	b510      	push	{r4, lr}
	ASSERT(descr);
    535e:	4604      	mov	r4, r0
    5360:	226c      	movs	r2, #108	; 0x6c
    5362:	4906      	ldr	r1, [pc, #24]	; (537c <usart_async_disable+0x20>)
    5364:	3000      	adds	r0, #0
    5366:	bf18      	it	ne
    5368:	2001      	movne	r0, #1
    536a:	4b05      	ldr	r3, [pc, #20]	; (5380 <usart_async_disable+0x24>)
    536c:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    536e:	f104 0008 	add.w	r0, r4, #8
    5372:	4b04      	ldr	r3, [pc, #16]	; (5384 <usart_async_disable+0x28>)
    5374:	4798      	blx	r3
}
    5376:	2000      	movs	r0, #0
    5378:	bd10      	pop	{r4, pc}
    537a:	bf00      	nop
    537c:	0000d6d4 	.word	0x0000d6d4
    5380:	00005b49 	.word	0x00005b49
    5384:	00007231 	.word	0x00007231

00005388 <usart_async_get_io_descriptor>:
{
    5388:	b538      	push	{r3, r4, r5, lr}
    538a:	460c      	mov	r4, r1
	ASSERT(descr && io);
    538c:	4605      	mov	r5, r0
    538e:	b148      	cbz	r0, 53a4 <usart_async_get_io_descriptor+0x1c>
    5390:	1c08      	adds	r0, r1, #0
    5392:	bf18      	it	ne
    5394:	2001      	movne	r0, #1
    5396:	2277      	movs	r2, #119	; 0x77
    5398:	4903      	ldr	r1, [pc, #12]	; (53a8 <usart_async_get_io_descriptor+0x20>)
    539a:	4b04      	ldr	r3, [pc, #16]	; (53ac <usart_async_get_io_descriptor+0x24>)
    539c:	4798      	blx	r3
	*io = &descr->io;
    539e:	6025      	str	r5, [r4, #0]
}
    53a0:	2000      	movs	r0, #0
    53a2:	bd38      	pop	{r3, r4, r5, pc}
    53a4:	2000      	movs	r0, #0
    53a6:	e7f6      	b.n	5396 <usart_async_get_io_descriptor+0xe>
    53a8:	0000d6d4 	.word	0x0000d6d4
    53ac:	00005b49 	.word	0x00005b49

000053b0 <usart_async_register_callback>:
{
    53b0:	b570      	push	{r4, r5, r6, lr}
    53b2:	460c      	mov	r4, r1
    53b4:	4616      	mov	r6, r2
	ASSERT(descr);
    53b6:	4605      	mov	r5, r0
    53b8:	2283      	movs	r2, #131	; 0x83
    53ba:	4917      	ldr	r1, [pc, #92]	; (5418 <usart_async_register_callback+0x68>)
    53bc:	3000      	adds	r0, #0
    53be:	bf18      	it	ne
    53c0:	2001      	movne	r0, #1
    53c2:	4b16      	ldr	r3, [pc, #88]	; (541c <usart_async_register_callback+0x6c>)
    53c4:	4798      	blx	r3
	switch (type) {
    53c6:	2c01      	cmp	r4, #1
    53c8:	d010      	beq.n	53ec <usart_async_register_callback+0x3c>
    53ca:	b124      	cbz	r4, 53d6 <usart_async_register_callback+0x26>
    53cc:	2c02      	cmp	r4, #2
    53ce:	d018      	beq.n	5402 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    53d0:	f06f 000c 	mvn.w	r0, #12
}
    53d4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    53d6:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    53d8:	1c32      	adds	r2, r6, #0
    53da:	bf18      	it	ne
    53dc:	2201      	movne	r2, #1
    53de:	2101      	movs	r1, #1
    53e0:	f105 0008 	add.w	r0, r5, #8
    53e4:	4b0e      	ldr	r3, [pc, #56]	; (5420 <usart_async_register_callback+0x70>)
    53e6:	4798      	blx	r3
	return ERR_NONE;
    53e8:	2000      	movs	r0, #0
		break;
    53ea:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    53ec:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    53ee:	1c32      	adds	r2, r6, #0
    53f0:	bf18      	it	ne
    53f2:	2201      	movne	r2, #1
    53f4:	2102      	movs	r1, #2
    53f6:	f105 0008 	add.w	r0, r5, #8
    53fa:	4b09      	ldr	r3, [pc, #36]	; (5420 <usart_async_register_callback+0x70>)
    53fc:	4798      	blx	r3
	return ERR_NONE;
    53fe:	2000      	movs	r0, #0
		break;
    5400:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    5402:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5404:	1c32      	adds	r2, r6, #0
    5406:	bf18      	it	ne
    5408:	2201      	movne	r2, #1
    540a:	2103      	movs	r1, #3
    540c:	f105 0008 	add.w	r0, r5, #8
    5410:	4b03      	ldr	r3, [pc, #12]	; (5420 <usart_async_register_callback+0x70>)
    5412:	4798      	blx	r3
	return ERR_NONE;
    5414:	2000      	movs	r0, #0
		break;
    5416:	bd70      	pop	{r4, r5, r6, pc}
    5418:	0000d6d4 	.word	0x0000d6d4
    541c:	00005b49 	.word	0x00005b49
    5420:	00007299 	.word	0x00007299

00005424 <usart_async_set_parity>:
{
    5424:	b538      	push	{r3, r4, r5, lr}
    5426:	460d      	mov	r5, r1
	ASSERT(descr);
    5428:	4604      	mov	r4, r0
    542a:	22cb      	movs	r2, #203	; 0xcb
    542c:	4906      	ldr	r1, [pc, #24]	; (5448 <usart_async_set_parity+0x24>)
    542e:	3000      	adds	r0, #0
    5430:	bf18      	it	ne
    5432:	2001      	movne	r0, #1
    5434:	4b05      	ldr	r3, [pc, #20]	; (544c <usart_async_set_parity+0x28>)
    5436:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    5438:	4629      	mov	r1, r5
    543a:	f104 0008 	add.w	r0, r4, #8
    543e:	4b04      	ldr	r3, [pc, #16]	; (5450 <usart_async_set_parity+0x2c>)
    5440:	4798      	blx	r3
}
    5442:	2000      	movs	r0, #0
    5444:	bd38      	pop	{r3, r4, r5, pc}
    5446:	bf00      	nop
    5448:	0000d6d4 	.word	0x0000d6d4
    544c:	00005b49 	.word	0x00005b49
    5450:	00007245 	.word	0x00007245

00005454 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5458:	460f      	mov	r7, r1
    545a:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    545c:	4604      	mov	r4, r0
    545e:	b328      	cbz	r0, 54ac <usart_sync_write+0x58>
    5460:	b331      	cbz	r1, 54b0 <usart_sync_write+0x5c>
    5462:	1c10      	adds	r0, r2, #0
    5464:	bf18      	it	ne
    5466:	2001      	movne	r0, #1
    5468:	22f1      	movs	r2, #241	; 0xf1
    546a:	4912      	ldr	r1, [pc, #72]	; (54b4 <usart_sync_write+0x60>)
    546c:	4b12      	ldr	r3, [pc, #72]	; (54b8 <usart_sync_write+0x64>)
    546e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    5470:	3408      	adds	r4, #8
    5472:	4d12      	ldr	r5, [pc, #72]	; (54bc <usart_sync_write+0x68>)
    5474:	4620      	mov	r0, r4
    5476:	47a8      	blx	r5
    5478:	2800      	cmp	r0, #0
    547a:	d0fb      	beq.n	5474 <usart_sync_write+0x20>
    547c:	3f01      	subs	r7, #1
    547e:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5480:	f8df 9040 	ldr.w	r9, [pc, #64]	; 54c4 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    5484:	4d0d      	ldr	r5, [pc, #52]	; (54bc <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5486:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    548a:	4620      	mov	r0, r4
    548c:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    548e:	4620      	mov	r0, r4
    5490:	47a8      	blx	r5
    5492:	2800      	cmp	r0, #0
    5494:	d0fb      	beq.n	548e <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    5496:	3601      	adds	r6, #1
    5498:	4546      	cmp	r6, r8
    549a:	d3f4      	bcc.n	5486 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    549c:	4d08      	ldr	r5, [pc, #32]	; (54c0 <usart_sync_write+0x6c>)
    549e:	4620      	mov	r0, r4
    54a0:	47a8      	blx	r5
    54a2:	2800      	cmp	r0, #0
    54a4:	d0fb      	beq.n	549e <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    54a6:	4630      	mov	r0, r6
    54a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    54ac:	2000      	movs	r0, #0
    54ae:	e7db      	b.n	5468 <usart_sync_write+0x14>
    54b0:	2000      	movs	r0, #0
    54b2:	e7d9      	b.n	5468 <usart_sync_write+0x14>
    54b4:	0000d6f4 	.word	0x0000d6f4
    54b8:	00005b49 	.word	0x00005b49
    54bc:	00007269 	.word	0x00007269
    54c0:	00007273 	.word	0x00007273
    54c4:	00007255 	.word	0x00007255

000054c8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    54c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    54cc:	460f      	mov	r7, r1
    54ce:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    54d0:	4604      	mov	r4, r0
    54d2:	b1e0      	cbz	r0, 550e <usart_sync_read+0x46>
    54d4:	b1e9      	cbz	r1, 5512 <usart_sync_read+0x4a>
    54d6:	1c10      	adds	r0, r2, #0
    54d8:	bf18      	it	ne
    54da:	2001      	movne	r0, #1
    54dc:	f44f 7286 	mov.w	r2, #268	; 0x10c
    54e0:	490d      	ldr	r1, [pc, #52]	; (5518 <usart_sync_read+0x50>)
    54e2:	4b0e      	ldr	r3, [pc, #56]	; (551c <usart_sync_read+0x54>)
    54e4:	4798      	blx	r3
    54e6:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    54e8:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    54ea:	3408      	adds	r4, #8
    54ec:	4d0c      	ldr	r5, [pc, #48]	; (5520 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    54ee:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5524 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    54f2:	4620      	mov	r0, r4
    54f4:	47a8      	blx	r5
    54f6:	2800      	cmp	r0, #0
    54f8:	d0fb      	beq.n	54f2 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    54fa:	4620      	mov	r0, r4
    54fc:	47c8      	blx	r9
    54fe:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    5502:	3601      	adds	r6, #1
    5504:	4546      	cmp	r6, r8
    5506:	d3f4      	bcc.n	54f2 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    5508:	4630      	mov	r0, r6
    550a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    550e:	2000      	movs	r0, #0
    5510:	e7e4      	b.n	54dc <usart_sync_read+0x14>
    5512:	2000      	movs	r0, #0
    5514:	e7e2      	b.n	54dc <usart_sync_read+0x14>
    5516:	bf00      	nop
    5518:	0000d6f4 	.word	0x0000d6f4
    551c:	00005b49 	.word	0x00005b49
    5520:	0000727d 	.word	0x0000727d
    5524:	00007261 	.word	0x00007261

00005528 <usart_sync_init>:
{
    5528:	b538      	push	{r3, r4, r5, lr}
    552a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    552c:	4604      	mov	r4, r0
    552e:	b198      	cbz	r0, 5558 <usart_sync_init+0x30>
    5530:	1c08      	adds	r0, r1, #0
    5532:	bf18      	it	ne
    5534:	2001      	movne	r0, #1
    5536:	2234      	movs	r2, #52	; 0x34
    5538:	4908      	ldr	r1, [pc, #32]	; (555c <usart_sync_init+0x34>)
    553a:	4b09      	ldr	r3, [pc, #36]	; (5560 <usart_sync_init+0x38>)
    553c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    553e:	4629      	mov	r1, r5
    5540:	f104 0008 	add.w	r0, r4, #8
    5544:	4b07      	ldr	r3, [pc, #28]	; (5564 <usart_sync_init+0x3c>)
    5546:	4798      	blx	r3
	if (init_status) {
    5548:	4603      	mov	r3, r0
    554a:	b918      	cbnz	r0, 5554 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    554c:	4a06      	ldr	r2, [pc, #24]	; (5568 <usart_sync_init+0x40>)
    554e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    5550:	4a06      	ldr	r2, [pc, #24]	; (556c <usart_sync_init+0x44>)
    5552:	6022      	str	r2, [r4, #0]
}
    5554:	4618      	mov	r0, r3
    5556:	bd38      	pop	{r3, r4, r5, pc}
    5558:	2000      	movs	r0, #0
    555a:	e7ec      	b.n	5536 <usart_sync_init+0xe>
    555c:	0000d6f4 	.word	0x0000d6f4
    5560:	00005b49 	.word	0x00005b49
    5564:	00007161 	.word	0x00007161
    5568:	000054c9 	.word	0x000054c9
    556c:	00005455 	.word	0x00005455

00005570 <usart_sync_enable>:
{
    5570:	b510      	push	{r4, lr}
	ASSERT(descr);
    5572:	4604      	mov	r4, r0
    5574:	2253      	movs	r2, #83	; 0x53
    5576:	4906      	ldr	r1, [pc, #24]	; (5590 <usart_sync_enable+0x20>)
    5578:	3000      	adds	r0, #0
    557a:	bf18      	it	ne
    557c:	2001      	movne	r0, #1
    557e:	4b05      	ldr	r3, [pc, #20]	; (5594 <usart_sync_enable+0x24>)
    5580:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    5582:	f104 0008 	add.w	r0, r4, #8
    5586:	4b04      	ldr	r3, [pc, #16]	; (5598 <usart_sync_enable+0x28>)
    5588:	4798      	blx	r3
}
    558a:	2000      	movs	r0, #0
    558c:	bd10      	pop	{r4, pc}
    558e:	bf00      	nop
    5590:	0000d6f4 	.word	0x0000d6f4
    5594:	00005b49 	.word	0x00005b49
    5598:	00007209 	.word	0x00007209

0000559c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    559c:	4b0f      	ldr	r3, [pc, #60]	; (55dc <_usb_d_find_ep+0x40>)
    559e:	7859      	ldrb	r1, [r3, #1]
    55a0:	4288      	cmp	r0, r1
    55a2:	d018      	beq.n	55d6 <_usb_d_find_ep+0x3a>
{
    55a4:	b430      	push	{r4, r5}
    55a6:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    55a8:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    55aa:	f000 050f 	and.w	r5, r0, #15
    55ae:	e007      	b.n	55c0 <_usb_d_find_ep+0x24>
    55b0:	3301      	adds	r3, #1
    55b2:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    55b4:	2b0d      	cmp	r3, #13
    55b6:	d009      	beq.n	55cc <_usb_d_find_ep+0x30>
    55b8:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    55ba:	7851      	ldrb	r1, [r2, #1]
    55bc:	4281      	cmp	r1, r0
    55be:	d007      	beq.n	55d0 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    55c0:	7814      	ldrb	r4, [r2, #0]
    55c2:	2c00      	cmp	r4, #0
    55c4:	d1f4      	bne.n	55b0 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    55c6:	428d      	cmp	r5, r1
    55c8:	d1f2      	bne.n	55b0 <_usb_d_find_ep+0x14>
    55ca:	e001      	b.n	55d0 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    55cc:	f04f 33ff 	mov.w	r3, #4294967295
}
    55d0:	4618      	mov	r0, r3
    55d2:	bc30      	pop	{r4, r5}
    55d4:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    55d6:	2300      	movs	r3, #0
}
    55d8:	4618      	mov	r0, r3
    55da:	4770      	bx	lr
    55dc:	2000064c 	.word	0x2000064c

000055e0 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    55e0:	2000      	movs	r0, #0
    55e2:	4770      	bx	lr

000055e4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    55e4:	b538      	push	{r3, r4, r5, lr}
    55e6:	4604      	mov	r4, r0
    55e8:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    55ea:	4b09      	ldr	r3, [pc, #36]	; (5610 <usb_d_cb_trans_more+0x2c>)
    55ec:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    55ee:	4b09      	ldr	r3, [pc, #36]	; (5614 <usb_d_cb_trans_more+0x30>)
    55f0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    55f4:	789b      	ldrb	r3, [r3, #2]
    55f6:	2b03      	cmp	r3, #3
    55f8:	d001      	beq.n	55fe <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    55fa:	2000      	movs	r0, #0
}
    55fc:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    55fe:	4b05      	ldr	r3, [pc, #20]	; (5614 <usb_d_cb_trans_more+0x30>)
    5600:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5604:	6983      	ldr	r3, [r0, #24]
    5606:	4629      	mov	r1, r5
    5608:	4620      	mov	r0, r4
    560a:	4798      	blx	r3
    560c:	bd38      	pop	{r3, r4, r5, pc}
    560e:	bf00      	nop
    5610:	0000559d 	.word	0x0000559d
    5614:	2000064c 	.word	0x2000064c

00005618 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5618:	b5f0      	push	{r4, r5, r6, r7, lr}
    561a:	b085      	sub	sp, #20
    561c:	4606      	mov	r6, r0
    561e:	460d      	mov	r5, r1
    5620:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5622:	4b4d      	ldr	r3, [pc, #308]	; (5758 <_usb_d_cb_trans_done+0x140>)
    5624:	4798      	blx	r3
    5626:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    5628:	2d00      	cmp	r5, #0
    562a:	d15b      	bne.n	56e4 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    562c:	4a4b      	ldr	r2, [pc, #300]	; (575c <_usb_d_cb_trans_done+0x144>)
    562e:	0143      	lsls	r3, r0, #5
    5630:	18d1      	adds	r1, r2, r3
    5632:	2000      	movs	r0, #0
    5634:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5636:	5cd3      	ldrb	r3, [r2, r3]
    5638:	b173      	cbz	r3, 5658 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    563a:	4b48      	ldr	r3, [pc, #288]	; (575c <_usb_d_cb_trans_done+0x144>)
    563c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5640:	2201      	movs	r2, #1
    5642:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5644:	4845      	ldr	r0, [pc, #276]	; (575c <_usb_d_cb_trans_done+0x144>)
    5646:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    564a:	69c3      	ldr	r3, [r0, #28]
    564c:	463a      	mov	r2, r7
    564e:	78c1      	ldrb	r1, [r0, #3]
    5650:	4630      	mov	r0, r6
    5652:	4798      	blx	r3
}
    5654:	b005      	add	sp, #20
    5656:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    5658:	788b      	ldrb	r3, [r1, #2]
    565a:	2b03      	cmp	r3, #3
    565c:	d00b      	beq.n	5676 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    565e:	483f      	ldr	r0, [pc, #252]	; (575c <_usb_d_cb_trans_done+0x144>)
    5660:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    5664:	4614      	mov	r4, r2
    5666:	69d3      	ldr	r3, [r2, #28]
    5668:	320c      	adds	r2, #12
    566a:	2100      	movs	r1, #0
    566c:	7860      	ldrb	r0, [r4, #1]
    566e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5670:	2302      	movs	r3, #2
    5672:	70a3      	strb	r3, [r4, #2]
    5674:	e7ee      	b.n	5654 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5676:	460b      	mov	r3, r1
    5678:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    567c:	460a      	mov	r2, r1
    567e:	69ce      	ldr	r6, [r1, #28]
    5680:	320c      	adds	r2, #12
    5682:	2101      	movs	r1, #1
    5684:	7858      	ldrb	r0, [r3, #1]
    5686:	47b0      	blx	r6
		if (err) {
    5688:	b1a0      	cbz	r0, 56b4 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    568a:	4b34      	ldr	r3, [pc, #208]	; (575c <_usb_d_cb_trans_done+0x144>)
    568c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5690:	2205      	movs	r2, #5
    5692:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5694:	2202      	movs	r2, #2
    5696:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5698:	2d00      	cmp	r5, #0
    569a:	db09      	blt.n	56b0 <_usb_d_cb_trans_done+0x98>
    569c:	482f      	ldr	r0, [pc, #188]	; (575c <_usb_d_cb_trans_done+0x144>)
    569e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    56a2:	7840      	ldrb	r0, [r0, #1]
    56a4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    56a8:	2101      	movs	r1, #1
    56aa:	4b2d      	ldr	r3, [pc, #180]	; (5760 <_usb_d_cb_trans_done+0x148>)
    56ac:	4798      	blx	r3
    56ae:	e7d1      	b.n	5654 <_usb_d_cb_trans_done+0x3c>
    56b0:	7858      	ldrb	r0, [r3, #1]
    56b2:	e7f9      	b.n	56a8 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    56b4:	4829      	ldr	r0, [pc, #164]	; (575c <_usb_d_cb_trans_done+0x144>)
    56b6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    56ba:	2304      	movs	r3, #4
    56bc:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    56be:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    56c0:	2200      	movs	r2, #0
    56c2:	9201      	str	r2, [sp, #4]
    56c4:	9202      	str	r2, [sp, #8]
    56c6:	4295      	cmp	r5, r2
    56c8:	bfac      	ite	ge
    56ca:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    56ce:	f003 030f 	andlt.w	r3, r3, #15
    56d2:	f88d 300c 	strb.w	r3, [sp, #12]
    56d6:	2301      	movs	r3, #1
    56d8:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    56dc:	a801      	add	r0, sp, #4
    56de:	4b21      	ldr	r3, [pc, #132]	; (5764 <_usb_d_cb_trans_done+0x14c>)
    56e0:	4798      	blx	r3
    56e2:	e7b7      	b.n	5654 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    56e4:	2d01      	cmp	r5, #1
    56e6:	d00a      	beq.n	56fe <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    56e8:	2d02      	cmp	r5, #2
    56ea:	d01c      	beq.n	5726 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    56ec:	2d03      	cmp	r5, #3
    56ee:	d02a      	beq.n	5746 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    56f0:	4b1a      	ldr	r3, [pc, #104]	; (575c <_usb_d_cb_trans_done+0x144>)
    56f2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    56f6:	2206      	movs	r2, #6
    56f8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    56fa:	70da      	strb	r2, [r3, #3]
    56fc:	e7a2      	b.n	5644 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    56fe:	4a17      	ldr	r2, [pc, #92]	; (575c <_usb_d_cb_trans_done+0x144>)
    5700:	0143      	lsls	r3, r0, #5
    5702:	18d1      	adds	r1, r2, r3
    5704:	2002      	movs	r0, #2
    5706:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5708:	5cd3      	ldrb	r3, [r2, r3]
    570a:	b12b      	cbz	r3, 5718 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    570c:	4b13      	ldr	r3, [pc, #76]	; (575c <_usb_d_cb_trans_done+0x144>)
    570e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5712:	2205      	movs	r2, #5
    5714:	709a      	strb	r2, [r3, #2]
    5716:	e795      	b.n	5644 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5718:	460b      	mov	r3, r1
    571a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    571c:	2100      	movs	r1, #0
    571e:	4630      	mov	r0, r6
    5720:	4b0f      	ldr	r3, [pc, #60]	; (5760 <_usb_d_cb_trans_done+0x148>)
    5722:	4798      	blx	r3
    5724:	e78e      	b.n	5644 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5726:	4a0d      	ldr	r2, [pc, #52]	; (575c <_usb_d_cb_trans_done+0x144>)
    5728:	0143      	lsls	r3, r0, #5
    572a:	18d1      	adds	r1, r2, r3
    572c:	2004      	movs	r0, #4
    572e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5730:	5cd3      	ldrb	r3, [r2, r3]
    5732:	b12b      	cbz	r3, 5740 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5734:	4b09      	ldr	r3, [pc, #36]	; (575c <_usb_d_cb_trans_done+0x144>)
    5736:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    573a:	2201      	movs	r2, #1
    573c:	709a      	strb	r2, [r3, #2]
    573e:	e781      	b.n	5644 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5740:	2302      	movs	r3, #2
    5742:	708b      	strb	r3, [r1, #2]
			return;
    5744:	e786      	b.n	5654 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5746:	4b05      	ldr	r3, [pc, #20]	; (575c <_usb_d_cb_trans_done+0x144>)
    5748:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    574c:	2200      	movs	r2, #0
    574e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5750:	2205      	movs	r2, #5
    5752:	70da      	strb	r2, [r3, #3]
    5754:	e776      	b.n	5644 <_usb_d_cb_trans_done+0x2c>
    5756:	bf00      	nop
    5758:	0000559d 	.word	0x0000559d
    575c:	2000064c 	.word	0x2000064c
    5760:	000091d5 	.word	0x000091d5
    5764:	0000937d 	.word	0x0000937d

00005768 <usb_d_cb_trans_setup>:
{
    5768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    576c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    576e:	4b1c      	ldr	r3, [pc, #112]	; (57e0 <usb_d_cb_trans_setup+0x78>)
    5770:	4798      	blx	r3
    5772:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    5774:	4c1b      	ldr	r4, [pc, #108]	; (57e4 <usb_d_cb_trans_setup+0x7c>)
    5776:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    577a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    577c:	4621      	mov	r1, r4
    577e:	4628      	mov	r0, r5
    5780:	4b19      	ldr	r3, [pc, #100]	; (57e8 <usb_d_cb_trans_setup+0x80>)
    5782:	4798      	blx	r3
	if (n != 8) {
    5784:	b2c0      	uxtb	r0, r0
    5786:	2808      	cmp	r0, #8
    5788:	d009      	beq.n	579e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    578a:	2101      	movs	r1, #1
    578c:	4628      	mov	r0, r5
    578e:	4c17      	ldr	r4, [pc, #92]	; (57ec <usb_d_cb_trans_setup+0x84>)
    5790:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5792:	2101      	movs	r1, #1
    5794:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    5798:	47a0      	blx	r4
		return;
    579a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    579e:	2100      	movs	r1, #0
    57a0:	4628      	mov	r0, r5
    57a2:	4f12      	ldr	r7, [pc, #72]	; (57ec <usb_d_cb_trans_setup+0x84>)
    57a4:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    57a6:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    57aa:	2100      	movs	r1, #0
    57ac:	4640      	mov	r0, r8
    57ae:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    57b0:	4b0c      	ldr	r3, [pc, #48]	; (57e4 <usb_d_cb_trans_setup+0x7c>)
    57b2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    57b6:	2201      	movs	r2, #1
    57b8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    57ba:	695b      	ldr	r3, [r3, #20]
    57bc:	4621      	mov	r1, r4
    57be:	4628      	mov	r0, r5
    57c0:	4798      	blx	r3
    57c2:	b108      	cbz	r0, 57c8 <usb_d_cb_trans_setup+0x60>
    57c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    57c8:	4b06      	ldr	r3, [pc, #24]	; (57e4 <usb_d_cb_trans_setup+0x7c>)
    57ca:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    57ce:	2305      	movs	r3, #5
    57d0:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    57d2:	2101      	movs	r1, #1
    57d4:	4628      	mov	r0, r5
    57d6:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    57d8:	2101      	movs	r1, #1
    57da:	4640      	mov	r0, r8
    57dc:	47b8      	blx	r7
    57de:	e7f1      	b.n	57c4 <usb_d_cb_trans_setup+0x5c>
    57e0:	0000559d 	.word	0x0000559d
    57e4:	2000064c 	.word	0x2000064c
    57e8:	0000931d 	.word	0x0000931d
    57ec:	000091d5 	.word	0x000091d5

000057f0 <usb_d_init>:

int32_t usb_d_init(void)
{
    57f0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    57f2:	4b11      	ldr	r3, [pc, #68]	; (5838 <usb_d_init+0x48>)
    57f4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    57f6:	2800      	cmp	r0, #0
    57f8:	db1d      	blt.n	5836 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    57fa:	4c10      	ldr	r4, [pc, #64]	; (583c <usb_d_init+0x4c>)
    57fc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    5800:	2100      	movs	r1, #0
    5802:	4620      	mov	r0, r4
    5804:	4b0e      	ldr	r3, [pc, #56]	; (5840 <usb_d_init+0x50>)
    5806:	4798      	blx	r3
    5808:	4623      	mov	r3, r4
    580a:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    580e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5810:	4a0c      	ldr	r2, [pc, #48]	; (5844 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5812:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5814:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5816:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5818:	61da      	str	r2, [r3, #28]
    581a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    581c:	4283      	cmp	r3, r0
    581e:	d1f8      	bne.n	5812 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5820:	4909      	ldr	r1, [pc, #36]	; (5848 <usb_d_init+0x58>)
    5822:	2000      	movs	r0, #0
    5824:	4c09      	ldr	r4, [pc, #36]	; (584c <usb_d_init+0x5c>)
    5826:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5828:	4909      	ldr	r1, [pc, #36]	; (5850 <usb_d_init+0x60>)
    582a:	2001      	movs	r0, #1
    582c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    582e:	4909      	ldr	r1, [pc, #36]	; (5854 <usb_d_init+0x64>)
    5830:	2002      	movs	r0, #2
    5832:	47a0      	blx	r4
	return ERR_NONE;
    5834:	2000      	movs	r0, #0
}
    5836:	bd10      	pop	{r4, pc}
    5838:	00008ba1 	.word	0x00008ba1
    583c:	2000064c 	.word	0x2000064c
    5840:	0000bfbb 	.word	0x0000bfbb
    5844:	000055e1 	.word	0x000055e1
    5848:	00005769 	.word	0x00005769
    584c:	00009585 	.word	0x00009585
    5850:	000055e5 	.word	0x000055e5
    5854:	00005619 	.word	0x00005619

00005858 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5858:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    585a:	4b01      	ldr	r3, [pc, #4]	; (5860 <usb_d_register_callback+0x8>)
    585c:	4798      	blx	r3
    585e:	bd08      	pop	{r3, pc}
    5860:	0000955d 	.word	0x0000955d

00005864 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    5864:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    5866:	4b01      	ldr	r3, [pc, #4]	; (586c <usb_d_enable+0x8>)
    5868:	4798      	blx	r3
}
    586a:	bd08      	pop	{r3, pc}
    586c:	00008ca9 	.word	0x00008ca9

00005870 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5870:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    5872:	4b01      	ldr	r3, [pc, #4]	; (5878 <usb_d_attach+0x8>)
    5874:	4798      	blx	r3
    5876:	bd08      	pop	{r3, pc}
    5878:	00008d15 	.word	0x00008d15

0000587c <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    587c:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    587e:	4b01      	ldr	r3, [pc, #4]	; (5884 <usb_d_get_frame_num+0x8>)
    5880:	4798      	blx	r3
}
    5882:	bd08      	pop	{r3, pc}
    5884:	00008d33 	.word	0x00008d33

00005888 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5888:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    588a:	4b01      	ldr	r3, [pc, #4]	; (5890 <usb_d_set_address+0x8>)
    588c:	4798      	blx	r3
    588e:	bd08      	pop	{r3, pc}
    5890:	00008d27 	.word	0x00008d27

00005894 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5896:	4606      	mov	r6, r0
    5898:	460c      	mov	r4, r1
    589a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    589c:	4b0f      	ldr	r3, [pc, #60]	; (58dc <usb_d_ep_init+0x48>)
    589e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    58a0:	2800      	cmp	r0, #0
    58a2:	da14      	bge.n	58ce <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    58a4:	20ff      	movs	r0, #255	; 0xff
    58a6:	4b0d      	ldr	r3, [pc, #52]	; (58dc <usb_d_ep_init+0x48>)
    58a8:	4798      	blx	r3
		if (ep_index < 0) {
    58aa:	1e05      	subs	r5, r0, #0
    58ac:	db12      	blt.n	58d4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    58ae:	463a      	mov	r2, r7
    58b0:	4621      	mov	r1, r4
    58b2:	4630      	mov	r0, r6
    58b4:	4b0a      	ldr	r3, [pc, #40]	; (58e0 <usb_d_ep_init+0x4c>)
    58b6:	4798      	blx	r3
	if (rc < 0) {
    58b8:	2800      	cmp	r0, #0
    58ba:	db0d      	blt.n	58d8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    58bc:	4b09      	ldr	r3, [pc, #36]	; (58e4 <usb_d_ep_init+0x50>)
    58be:	0168      	lsls	r0, r5, #5
    58c0:	181a      	adds	r2, r3, r0
    58c2:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    58c4:	f004 0403 	and.w	r4, r4, #3
    58c8:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    58ca:	2000      	movs	r0, #0
    58cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    58ce:	f06f 0013 	mvn.w	r0, #19
    58d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    58d4:	f06f 0014 	mvn.w	r0, #20
}
    58d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58da:	bf00      	nop
    58dc:	0000559d 	.word	0x0000559d
    58e0:	00008d41 	.word	0x00008d41
    58e4:	2000064c 	.word	0x2000064c

000058e8 <usb_d_ep0_init>:
{
    58e8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    58ea:	4602      	mov	r2, r0
    58ec:	2100      	movs	r1, #0
    58ee:	4608      	mov	r0, r1
    58f0:	4b01      	ldr	r3, [pc, #4]	; (58f8 <usb_d_ep0_init+0x10>)
    58f2:	4798      	blx	r3
}
    58f4:	bd08      	pop	{r3, pc}
    58f6:	bf00      	nop
    58f8:	00005895 	.word	0x00005895

000058fc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    58fc:	b538      	push	{r3, r4, r5, lr}
    58fe:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5900:	4b06      	ldr	r3, [pc, #24]	; (591c <usb_d_ep_deinit+0x20>)
    5902:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5904:	1e04      	subs	r4, r0, #0
    5906:	db07      	blt.n	5918 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5908:	4628      	mov	r0, r5
    590a:	4b05      	ldr	r3, [pc, #20]	; (5920 <usb_d_ep_deinit+0x24>)
    590c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    590e:	4805      	ldr	r0, [pc, #20]	; (5924 <usb_d_ep_deinit+0x28>)
    5910:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5914:	23ff      	movs	r3, #255	; 0xff
    5916:	7043      	strb	r3, [r0, #1]
    5918:	bd38      	pop	{r3, r4, r5, pc}
    591a:	bf00      	nop
    591c:	0000559d 	.word	0x0000559d
    5920:	00008e59 	.word	0x00008e59
    5924:	2000064c 	.word	0x2000064c

00005928 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5928:	b538      	push	{r3, r4, r5, lr}
    592a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    592c:	4b0e      	ldr	r3, [pc, #56]	; (5968 <usb_d_ep_enable+0x40>)
    592e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5930:	1e04      	subs	r4, r0, #0
    5932:	db16      	blt.n	5962 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5934:	0163      	lsls	r3, r4, #5
    5936:	4a0d      	ldr	r2, [pc, #52]	; (596c <usb_d_ep_enable+0x44>)
    5938:	5cd3      	ldrb	r3, [r2, r3]
    593a:	2b00      	cmp	r3, #0
    593c:	bf0c      	ite	eq
    593e:	2202      	moveq	r2, #2
    5940:	2201      	movne	r2, #1
    5942:	4b0a      	ldr	r3, [pc, #40]	; (596c <usb_d_ep_enable+0x44>)
    5944:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5948:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    594a:	4628      	mov	r0, r5
    594c:	4b08      	ldr	r3, [pc, #32]	; (5970 <usb_d_ep_enable+0x48>)
    594e:	4798      	blx	r3
	if (rc < 0) {
    5950:	2800      	cmp	r0, #0
    5952:	db00      	blt.n	5956 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5954:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5956:	4b05      	ldr	r3, [pc, #20]	; (596c <usb_d_ep_enable+0x44>)
    5958:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    595c:	2300      	movs	r3, #0
    595e:	70a3      	strb	r3, [r4, #2]
    5960:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    5962:	f06f 0011 	mvn.w	r0, #17
    5966:	e7f5      	b.n	5954 <usb_d_ep_enable+0x2c>
    5968:	0000559d 	.word	0x0000559d
    596c:	2000064c 	.word	0x2000064c
    5970:	00008f1d 	.word	0x00008f1d

00005974 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5978:	b086      	sub	sp, #24
    597a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    597c:	7a07      	ldrb	r7, [r0, #8]
    597e:	4638      	mov	r0, r7
    5980:	4b3f      	ldr	r3, [pc, #252]	; (5a80 <usb_d_ep_transfer+0x10c>)
    5982:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5984:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5986:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    598a:	1e06      	subs	r6, r0, #0
    598c:	db72      	blt.n	5a74 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    598e:	a804      	add	r0, sp, #16
    5990:	4b3c      	ldr	r3, [pc, #240]	; (5a84 <usb_d_ep_transfer+0x110>)
    5992:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5994:	4b3c      	ldr	r3, [pc, #240]	; (5a88 <usb_d_ep_transfer+0x114>)
    5996:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    599a:	789b      	ldrb	r3, [r3, #2]
    599c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    59a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    59a4:	b2db      	uxtb	r3, r3
    59a6:	2b01      	cmp	r3, #1
    59a8:	d011      	beq.n	59ce <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    59aa:	a804      	add	r0, sp, #16
    59ac:	4b37      	ldr	r3, [pc, #220]	; (5a8c <usb_d_ep_transfer+0x118>)
    59ae:	4798      	blx	r3
		switch (state) {
    59b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    59b4:	b2db      	uxtb	r3, r3
    59b6:	2b05      	cmp	r3, #5
    59b8:	d05f      	beq.n	5a7a <usb_d_ep_transfer+0x106>
    59ba:	2b06      	cmp	r3, #6
    59bc:	d023      	beq.n	5a06 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    59be:	2b00      	cmp	r3, #0
    59c0:	bf0c      	ite	eq
    59c2:	f06f 0012 	mvneq.w	r0, #18
    59c6:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    59c8:	b006      	add	sp, #24
    59ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    59ce:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5a88 <usb_d_ep_transfer+0x114>
    59d2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    59d6:	eb0a 0309 	add.w	r3, sl, r9
    59da:	2203      	movs	r2, #3
    59dc:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    59de:	a804      	add	r0, sp, #16
    59e0:	4b2a      	ldr	r3, [pc, #168]	; (5a8c <usb_d_ep_transfer+0x118>)
    59e2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    59e4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    59e8:	b183      	cbz	r3, 5a0c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    59ea:	7a22      	ldrb	r2, [r4, #8]
    59ec:	3500      	adds	r5, #0
    59ee:	bf18      	it	ne
    59f0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    59f2:	6823      	ldr	r3, [r4, #0]
    59f4:	9301      	str	r3, [sp, #4]
    59f6:	f8cd 8008 	str.w	r8, [sp, #8]
    59fa:	f017 0f80 	tst.w	r7, #128	; 0x80
    59fe:	d119      	bne.n	5a34 <usb_d_ep_transfer+0xc0>
    5a00:	f002 030f 	and.w	r3, r2, #15
    5a04:	e018      	b.n	5a38 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    5a06:	f06f 000f 	mvn.w	r0, #15
    5a0a:	e7dd      	b.n	59c8 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5a0c:	4b1e      	ldr	r3, [pc, #120]	; (5a88 <usb_d_ep_transfer+0x114>)
    5a0e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5a12:	7cda      	ldrb	r2, [r3, #19]
    5a14:	7c9d      	ldrb	r5, [r3, #18]
    5a16:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    5a1a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    5a1c:	b9a5      	cbnz	r5, 5a48 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5a1e:	4b1a      	ldr	r3, [pc, #104]	; (5a88 <usb_d_ep_transfer+0x114>)
    5a20:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5a24:	2304      	movs	r3, #4
    5a26:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5a28:	2300      	movs	r3, #0
			zlp                 = true;
    5a2a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5a2c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5a2e:	6821      	ldr	r1, [r4, #0]
    5a30:	9101      	str	r1, [sp, #4]
    5a32:	9302      	str	r3, [sp, #8]
    5a34:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5a38:	f88d 300c 	strb.w	r3, [sp, #12]
    5a3c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5a40:	a801      	add	r0, sp, #4
    5a42:	4b13      	ldr	r3, [pc, #76]	; (5a90 <usb_d_ep_transfer+0x11c>)
    5a44:	4798      	blx	r3
	return rc;
    5a46:	e7bf      	b.n	59c8 <usb_d_ep_transfer+0x54>
    5a48:	4643      	mov	r3, r8
    5a4a:	45a8      	cmp	r8, r5
    5a4c:	bf28      	it	cs
    5a4e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5a50:	4a0d      	ldr	r2, [pc, #52]	; (5a88 <usb_d_ep_transfer+0x114>)
    5a52:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5a56:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5a5a:	2a00      	cmp	r2, #0
    5a5c:	db05      	blt.n	5a6a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5a5e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5a60:	6821      	ldr	r1, [r4, #0]
    5a62:	9101      	str	r1, [sp, #4]
    5a64:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5a66:	2500      	movs	r5, #0
    5a68:	e7ca      	b.n	5a00 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5a6a:	429d      	cmp	r5, r3
    5a6c:	bf94      	ite	ls
    5a6e:	2500      	movls	r5, #0
    5a70:	2501      	movhi	r5, #1
    5a72:	e7db      	b.n	5a2c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5a74:	f06f 0011 	mvn.w	r0, #17
    5a78:	e7a6      	b.n	59c8 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    5a7a:	2002      	movs	r0, #2
    5a7c:	e7a4      	b.n	59c8 <usb_d_ep_transfer+0x54>
    5a7e:	bf00      	nop
    5a80:	0000559d 	.word	0x0000559d
    5a84:	00004755 	.word	0x00004755
    5a88:	2000064c 	.word	0x2000064c
    5a8c:	00004763 	.word	0x00004763
    5a90:	0000937d 	.word	0x0000937d

00005a94 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5a94:	b538      	push	{r3, r4, r5, lr}
    5a96:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5a98:	b141      	cbz	r1, 5aac <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    5a9a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a9c:	bf0c      	ite	eq
    5a9e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5aa0:	2102      	movne	r1, #2
    5aa2:	4b13      	ldr	r3, [pc, #76]	; (5af0 <usb_d_ep_halt+0x5c>)
    5aa4:	4798      	blx	r3
    5aa6:	4603      	mov	r3, r0
	}
}
    5aa8:	4618      	mov	r0, r3
    5aaa:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    5aac:	4b11      	ldr	r3, [pc, #68]	; (5af4 <usb_d_ep_halt+0x60>)
    5aae:	4798      	blx	r3
	if (ep_index < 0) {
    5ab0:	1e05      	subs	r5, r0, #0
    5ab2:	db19      	blt.n	5ae8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5ab4:	2102      	movs	r1, #2
    5ab6:	4620      	mov	r0, r4
    5ab8:	4b0d      	ldr	r3, [pc, #52]	; (5af0 <usb_d_ep_halt+0x5c>)
    5aba:	4798      	blx	r3
    5abc:	4603      	mov	r3, r0
    5abe:	2800      	cmp	r0, #0
    5ac0:	d0f2      	beq.n	5aa8 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5ac2:	2100      	movs	r1, #0
    5ac4:	4620      	mov	r0, r4
    5ac6:	4b0a      	ldr	r3, [pc, #40]	; (5af0 <usb_d_ep_halt+0x5c>)
    5ac8:	4798      	blx	r3
		if (rc < 0) {
    5aca:	1e03      	subs	r3, r0, #0
    5acc:	dbec      	blt.n	5aa8 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5ace:	4b0a      	ldr	r3, [pc, #40]	; (5af8 <usb_d_ep_halt+0x64>)
    5ad0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    5ad4:	2201      	movs	r2, #1
    5ad6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    5ad8:	2103      	movs	r1, #3
    5ada:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5adc:	69db      	ldr	r3, [r3, #28]
    5ade:	2200      	movs	r2, #0
    5ae0:	4620      	mov	r0, r4
    5ae2:	4798      	blx	r3
	return ERR_NONE;
    5ae4:	2300      	movs	r3, #0
    5ae6:	e7df      	b.n	5aa8 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    5ae8:	f06f 0311 	mvn.w	r3, #17
    5aec:	e7dc      	b.n	5aa8 <usb_d_ep_halt+0x14>
    5aee:	bf00      	nop
    5af0:	000091d5 	.word	0x000091d5
    5af4:	0000559d 	.word	0x0000559d
    5af8:	2000064c 	.word	0x2000064c

00005afc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5afc:	b538      	push	{r3, r4, r5, lr}
    5afe:	460d      	mov	r5, r1
    5b00:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5b02:	4b0e      	ldr	r3, [pc, #56]	; (5b3c <usb_d_ep_register_callback+0x40>)
    5b04:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5b06:	4b0e      	ldr	r3, [pc, #56]	; (5b40 <usb_d_ep_register_callback+0x44>)
    5b08:	2c00      	cmp	r4, #0
    5b0a:	bf08      	it	eq
    5b0c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    5b0e:	2800      	cmp	r0, #0
    5b10:	db13      	blt.n	5b3a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    5b12:	2d01      	cmp	r5, #1
    5b14:	d008      	beq.n	5b28 <usb_d_ep_register_callback+0x2c>
    5b16:	b115      	cbz	r5, 5b1e <usb_d_ep_register_callback+0x22>
    5b18:	2d02      	cmp	r5, #2
    5b1a:	d00a      	beq.n	5b32 <usb_d_ep_register_callback+0x36>
    5b1c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5b1e:	4b09      	ldr	r3, [pc, #36]	; (5b44 <usb_d_ep_register_callback+0x48>)
    5b20:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5b24:	6144      	str	r4, [r0, #20]
		break;
    5b26:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5b28:	4b06      	ldr	r3, [pc, #24]	; (5b44 <usb_d_ep_register_callback+0x48>)
    5b2a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5b2e:	6184      	str	r4, [r0, #24]
		break;
    5b30:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5b32:	4b04      	ldr	r3, [pc, #16]	; (5b44 <usb_d_ep_register_callback+0x48>)
    5b34:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5b38:	61c4      	str	r4, [r0, #28]
    5b3a:	bd38      	pop	{r3, r4, r5, pc}
    5b3c:	0000559d 	.word	0x0000559d
    5b40:	000055e1 	.word	0x000055e1
    5b44:	2000064c 	.word	0x2000064c

00005b48 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5b48:	b900      	cbnz	r0, 5b4c <assert+0x4>
		__asm("BKPT #0");
    5b4a:	be00      	bkpt	0x0000
    5b4c:	4770      	bx	lr

00005b4e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5b4e:	6803      	ldr	r3, [r0, #0]
    5b50:	b14b      	cbz	r3, 5b66 <is_list_element+0x18>
		if (it == element) {
    5b52:	428b      	cmp	r3, r1
    5b54:	d009      	beq.n	5b6a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5b56:	681b      	ldr	r3, [r3, #0]
    5b58:	b11b      	cbz	r3, 5b62 <is_list_element+0x14>
		if (it == element) {
    5b5a:	4299      	cmp	r1, r3
    5b5c:	d1fb      	bne.n	5b56 <is_list_element+0x8>
			return true;
    5b5e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5b60:	4770      	bx	lr
	return false;
    5b62:	2000      	movs	r0, #0
    5b64:	4770      	bx	lr
    5b66:	2000      	movs	r0, #0
    5b68:	4770      	bx	lr
			return true;
    5b6a:	2001      	movs	r0, #1
    5b6c:	4770      	bx	lr
	...

00005b70 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5b70:	b538      	push	{r3, r4, r5, lr}
    5b72:	4604      	mov	r4, r0
    5b74:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5b76:	4b06      	ldr	r3, [pc, #24]	; (5b90 <list_insert_as_head+0x20>)
    5b78:	4798      	blx	r3
    5b7a:	f080 0001 	eor.w	r0, r0, #1
    5b7e:	2239      	movs	r2, #57	; 0x39
    5b80:	4904      	ldr	r1, [pc, #16]	; (5b94 <list_insert_as_head+0x24>)
    5b82:	b2c0      	uxtb	r0, r0
    5b84:	4b04      	ldr	r3, [pc, #16]	; (5b98 <list_insert_as_head+0x28>)
    5b86:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5b88:	6823      	ldr	r3, [r4, #0]
    5b8a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5b8c:	6025      	str	r5, [r4, #0]
    5b8e:	bd38      	pop	{r3, r4, r5, pc}
    5b90:	00005b4f 	.word	0x00005b4f
    5b94:	0000d710 	.word	0x0000d710
    5b98:	00005b49 	.word	0x00005b49

00005b9c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5b9c:	6803      	ldr	r3, [r0, #0]
    5b9e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5ba0:	6001      	str	r1, [r0, #0]
    5ba2:	4770      	bx	lr

00005ba4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5ba4:	b570      	push	{r4, r5, r6, lr}
    5ba6:	4605      	mov	r5, r0
    5ba8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    5baa:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    5bac:	4b0a      	ldr	r3, [pc, #40]	; (5bd8 <list_insert_at_end+0x34>)
    5bae:	4798      	blx	r3
    5bb0:	f080 0001 	eor.w	r0, r0, #1
    5bb4:	224f      	movs	r2, #79	; 0x4f
    5bb6:	4909      	ldr	r1, [pc, #36]	; (5bdc <list_insert_at_end+0x38>)
    5bb8:	b2c0      	uxtb	r0, r0
    5bba:	4b09      	ldr	r3, [pc, #36]	; (5be0 <list_insert_at_end+0x3c>)
    5bbc:	4798      	blx	r3

	if (!list->head) {
    5bbe:	682b      	ldr	r3, [r5, #0]
    5bc0:	b91b      	cbnz	r3, 5bca <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    5bc2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    5bc4:	6033      	str	r3, [r6, #0]
		return;
    5bc6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    5bc8:	461c      	mov	r4, r3
	while (it->next) {
    5bca:	6823      	ldr	r3, [r4, #0]
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d1fb      	bne.n	5bc8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    5bd0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    5bd2:	6033      	str	r3, [r6, #0]
    5bd4:	bd70      	pop	{r4, r5, r6, pc}
    5bd6:	bf00      	nop
    5bd8:	00005b4f 	.word	0x00005b4f
    5bdc:	0000d710 	.word	0x0000d710
    5be0:	00005b49 	.word	0x00005b49

00005be4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    5be4:	6803      	ldr	r3, [r0, #0]
    5be6:	b10b      	cbz	r3, 5bec <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    5be8:	681a      	ldr	r2, [r3, #0]
    5bea:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    5bec:	4618      	mov	r0, r3
    5bee:	4770      	bx	lr

00005bf0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    5bf0:	b570      	push	{r4, r5, r6, lr}
    5bf2:	460e      	mov	r6, r1
    5bf4:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    5bf6:	4604      	mov	r4, r0
    5bf8:	b178      	cbz	r0, 5c1a <ringbuffer_init+0x2a>
    5bfa:	b181      	cbz	r1, 5c1e <ringbuffer_init+0x2e>
    5bfc:	b1a2      	cbz	r2, 5c28 <ringbuffer_init+0x38>
    5bfe:	2001      	movs	r0, #1
    5c00:	2228      	movs	r2, #40	; 0x28
    5c02:	490d      	ldr	r1, [pc, #52]	; (5c38 <ringbuffer_init+0x48>)
    5c04:	4b0d      	ldr	r3, [pc, #52]	; (5c3c <ringbuffer_init+0x4c>)
    5c06:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5c08:	1e6b      	subs	r3, r5, #1
    5c0a:	421d      	tst	r5, r3
    5c0c:	d109      	bne.n	5c22 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    5c0e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    5c10:	2000      	movs	r0, #0
    5c12:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    5c14:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    5c16:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5c18:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5c1a:	2000      	movs	r0, #0
    5c1c:	e7f0      	b.n	5c00 <ringbuffer_init+0x10>
    5c1e:	2000      	movs	r0, #0
    5c20:	e7ee      	b.n	5c00 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    5c22:	f06f 000c 	mvn.w	r0, #12
    5c26:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5c28:	2228      	movs	r2, #40	; 0x28
    5c2a:	4903      	ldr	r1, [pc, #12]	; (5c38 <ringbuffer_init+0x48>)
    5c2c:	2000      	movs	r0, #0
    5c2e:	4b03      	ldr	r3, [pc, #12]	; (5c3c <ringbuffer_init+0x4c>)
    5c30:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    5c32:	1e6b      	subs	r3, r5, #1
    5c34:	e7eb      	b.n	5c0e <ringbuffer_init+0x1e>
    5c36:	bf00      	nop
    5c38:	0000d730 	.word	0x0000d730
    5c3c:	00005b49 	.word	0x00005b49

00005c40 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5c40:	b538      	push	{r3, r4, r5, lr}
    5c42:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5c44:	4604      	mov	r4, r0
    5c46:	b1a0      	cbz	r0, 5c72 <ringbuffer_get+0x32>
    5c48:	1c08      	adds	r0, r1, #0
    5c4a:	bf18      	it	ne
    5c4c:	2001      	movne	r0, #1
    5c4e:	2240      	movs	r2, #64	; 0x40
    5c50:	490a      	ldr	r1, [pc, #40]	; (5c7c <ringbuffer_get+0x3c>)
    5c52:	4b0b      	ldr	r3, [pc, #44]	; (5c80 <ringbuffer_get+0x40>)
    5c54:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5c56:	68a3      	ldr	r3, [r4, #8]
    5c58:	68e2      	ldr	r2, [r4, #12]
    5c5a:	429a      	cmp	r2, r3
    5c5c:	d00b      	beq.n	5c76 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    5c5e:	6862      	ldr	r2, [r4, #4]
    5c60:	4013      	ands	r3, r2
    5c62:	6822      	ldr	r2, [r4, #0]
    5c64:	5cd3      	ldrb	r3, [r2, r3]
    5c66:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5c68:	68a3      	ldr	r3, [r4, #8]
    5c6a:	3301      	adds	r3, #1
    5c6c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    5c6e:	2000      	movs	r0, #0
    5c70:	bd38      	pop	{r3, r4, r5, pc}
    5c72:	2000      	movs	r0, #0
    5c74:	e7eb      	b.n	5c4e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5c76:	f06f 0009 	mvn.w	r0, #9
}
    5c7a:	bd38      	pop	{r3, r4, r5, pc}
    5c7c:	0000d730 	.word	0x0000d730
    5c80:	00005b49 	.word	0x00005b49

00005c84 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5c84:	b538      	push	{r3, r4, r5, lr}
    5c86:	460d      	mov	r5, r1
	ASSERT(rb);
    5c88:	4604      	mov	r4, r0
    5c8a:	2251      	movs	r2, #81	; 0x51
    5c8c:	490b      	ldr	r1, [pc, #44]	; (5cbc <ringbuffer_put+0x38>)
    5c8e:	3000      	adds	r0, #0
    5c90:	bf18      	it	ne
    5c92:	2001      	movne	r0, #1
    5c94:	4b0a      	ldr	r3, [pc, #40]	; (5cc0 <ringbuffer_put+0x3c>)
    5c96:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5c98:	68e3      	ldr	r3, [r4, #12]
    5c9a:	6862      	ldr	r2, [r4, #4]
    5c9c:	4013      	ands	r3, r2
    5c9e:	6822      	ldr	r2, [r4, #0]
    5ca0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    5ca2:	68e3      	ldr	r3, [r4, #12]
    5ca4:	6861      	ldr	r1, [r4, #4]
    5ca6:	68a2      	ldr	r2, [r4, #8]
    5ca8:	1a9a      	subs	r2, r3, r2
    5caa:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    5cac:	bf84      	itt	hi
    5cae:	1a59      	subhi	r1, r3, r1
    5cb0:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    5cb2:	3301      	adds	r3, #1
    5cb4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    5cb6:	2000      	movs	r0, #0
    5cb8:	bd38      	pop	{r3, r4, r5, pc}
    5cba:	bf00      	nop
    5cbc:	0000d730 	.word	0x0000d730
    5cc0:	00005b49 	.word	0x00005b49

00005cc4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    5cc4:	b510      	push	{r4, lr}
	ASSERT(rb);
    5cc6:	4604      	mov	r4, r0
    5cc8:	2267      	movs	r2, #103	; 0x67
    5cca:	4905      	ldr	r1, [pc, #20]	; (5ce0 <ringbuffer_num+0x1c>)
    5ccc:	3000      	adds	r0, #0
    5cce:	bf18      	it	ne
    5cd0:	2001      	movne	r0, #1
    5cd2:	4b04      	ldr	r3, [pc, #16]	; (5ce4 <ringbuffer_num+0x20>)
    5cd4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    5cd6:	68e0      	ldr	r0, [r4, #12]
    5cd8:	68a3      	ldr	r3, [r4, #8]
}
    5cda:	1ac0      	subs	r0, r0, r3
    5cdc:	bd10      	pop	{r4, pc}
    5cde:	bf00      	nop
    5ce0:	0000d730 	.word	0x0000d730
    5ce4:	00005b49 	.word	0x00005b49

00005ce8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    5ce8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    5cea:	4a06      	ldr	r2, [pc, #24]	; (5d04 <_sbrk+0x1c>)
    5cec:	6812      	ldr	r2, [r2, #0]
    5cee:	b122      	cbz	r2, 5cfa <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5cf0:	4a04      	ldr	r2, [pc, #16]	; (5d04 <_sbrk+0x1c>)
    5cf2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5cf4:	4403      	add	r3, r0
    5cf6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    5cf8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5cfa:	4903      	ldr	r1, [pc, #12]	; (5d08 <_sbrk+0x20>)
    5cfc:	4a01      	ldr	r2, [pc, #4]	; (5d04 <_sbrk+0x1c>)
    5cfe:	6011      	str	r1, [r2, #0]
    5d00:	e7f6      	b.n	5cf0 <_sbrk+0x8>
    5d02:	bf00      	nop
    5d04:	200007ec 	.word	0x200007ec
    5d08:	20013bc0 	.word	0x20013bc0

00005d0c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    5d0c:	f04f 30ff 	mov.w	r0, #4294967295
    5d10:	4770      	bx	lr

00005d12 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    5d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5d16:	604b      	str	r3, [r1, #4]

	return 0;
}
    5d18:	2000      	movs	r0, #0
    5d1a:	4770      	bx	lr

00005d1c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    5d1c:	2001      	movs	r0, #1
    5d1e:	4770      	bx	lr

00005d20 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    5d20:	2000      	movs	r0, #0
    5d22:	4770      	bx	lr

00005d24 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5d24:	6940      	ldr	r0, [r0, #20]
    5d26:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5d2a:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5d2e:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5d30:	0040      	lsls	r0, r0, #1
    5d32:	3076      	adds	r0, #118	; 0x76
}
    5d34:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5d38:	4770      	bx	lr
	...

00005d3c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    5d3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    5d3e:	f013 0f01 	tst.w	r3, #1
    5d42:	d11b      	bne.n	5d7c <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5d44:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d46:	f013 0f03 	tst.w	r3, #3
    5d4a:	d1fb      	bne.n	5d44 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    5d4c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    5d4e:	f013 0f02 	tst.w	r3, #2
    5d52:	d00d      	beq.n	5d70 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5d54:	8803      	ldrh	r3, [r0, #0]
    5d56:	f023 0302 	bic.w	r3, r3, #2
    5d5a:	041b      	lsls	r3, r3, #16
    5d5c:	0c1b      	lsrs	r3, r3, #16
    5d5e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5d60:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d62:	f013 0f03 	tst.w	r3, #3
    5d66:	d1fb      	bne.n	5d60 <_adc_init+0x24>
    5d68:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d6a:	f013 0f02 	tst.w	r3, #2
    5d6e:	d1fb      	bne.n	5d68 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5d70:	2301      	movs	r3, #1
    5d72:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5d74:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d76:	f013 0f03 	tst.w	r3, #3
    5d7a:	d1fb      	bne.n	5d74 <_adc_init+0x38>
    5d7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d7e:	f013 0f01 	tst.w	r3, #1
    5d82:	d1fb      	bne.n	5d7c <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5d84:	2316      	movs	r3, #22
    5d86:	4a37      	ldr	r2, [pc, #220]	; (5e64 <_adc_init+0x128>)
    5d88:	fb03 2301 	mla	r3, r3, r1, r2
    5d8c:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    5d8e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5d90:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5d96:	2b00      	cmp	r3, #0
    5d98:	d1fa      	bne.n	5d90 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    5d9a:	2316      	movs	r3, #22
    5d9c:	4a31      	ldr	r2, [pc, #196]	; (5e64 <_adc_init+0x128>)
    5d9e:	fb03 2301 	mla	r3, r3, r1, r2
    5da2:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    5da4:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5da6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5dac:	2b00      	cmp	r3, #0
    5dae:	d1fa      	bne.n	5da6 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    5db0:	2316      	movs	r3, #22
    5db2:	4a2c      	ldr	r2, [pc, #176]	; (5e64 <_adc_init+0x128>)
    5db4:	fb03 2301 	mla	r3, r3, r1, r2
    5db8:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    5dba:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    5dbc:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    5dbe:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5dc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d1fa      	bne.n	5dc0 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    5dca:	2316      	movs	r3, #22
    5dcc:	4a25      	ldr	r2, [pc, #148]	; (5e64 <_adc_init+0x128>)
    5dce:	fb03 2301 	mla	r3, r3, r1, r2
    5dd2:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    5dd4:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5dd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5ddc:	2b00      	cmp	r3, #0
    5dde:	d1fa      	bne.n	5dd6 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    5de0:	2316      	movs	r3, #22
    5de2:	4a20      	ldr	r2, [pc, #128]	; (5e64 <_adc_init+0x128>)
    5de4:	fb03 2301 	mla	r3, r3, r1, r2
    5de8:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    5dea:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5dec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5df2:	2b00      	cmp	r3, #0
    5df4:	d1fa      	bne.n	5dec <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    5df6:	2316      	movs	r3, #22
    5df8:	4a1a      	ldr	r2, [pc, #104]	; (5e64 <_adc_init+0x128>)
    5dfa:	fb03 2301 	mla	r3, r3, r1, r2
    5dfe:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    5e00:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5e02:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5e04:	f013 0f80 	tst.w	r3, #128	; 0x80
    5e08:	d1fb      	bne.n	5e02 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    5e0a:	2316      	movs	r3, #22
    5e0c:	4a15      	ldr	r2, [pc, #84]	; (5e64 <_adc_init+0x128>)
    5e0e:	fb03 2301 	mla	r3, r3, r1, r2
    5e12:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    5e14:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5e16:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5e18:	f413 7f80 	tst.w	r3, #256	; 0x100
    5e1c:	d1fb      	bne.n	5e16 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    5e1e:	2316      	movs	r3, #22
    5e20:	4a10      	ldr	r2, [pc, #64]	; (5e64 <_adc_init+0x128>)
    5e22:	fb03 2301 	mla	r3, r3, r1, r2
    5e26:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    5e28:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5e2a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5e2c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5e30:	d1fb      	bne.n	5e2a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    5e32:	2316      	movs	r3, #22
    5e34:	4a0b      	ldr	r2, [pc, #44]	; (5e64 <_adc_init+0x128>)
    5e36:	fb03 2301 	mla	r3, r3, r1, r2
    5e3a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    5e3c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5e3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5e40:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5e44:	d1fb      	bne.n	5e3e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    5e46:	2216      	movs	r2, #22
    5e48:	4b06      	ldr	r3, [pc, #24]	; (5e64 <_adc_init+0x128>)
    5e4a:	fb02 3101 	mla	r1, r2, r1, r3
    5e4e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5e50:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    5e52:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    5e54:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5e56:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5e58:	f013 0f03 	tst.w	r3, #3
    5e5c:	d1fb      	bne.n	5e56 <_adc_init+0x11a>

	return ERR_NONE;
}
    5e5e:	2000      	movs	r0, #0
    5e60:	4770      	bx	lr
    5e62:	bf00      	nop
    5e64:	0000d754 	.word	0x0000d754

00005e68 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    5e68:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    5e6a:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    5e6c:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5e70:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    5e74:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    5e76:	f013 0f01 	tst.w	r3, #1
    5e7a:	d106      	bne.n	5e8a <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    5e7c:	f013 0f02 	tst.w	r3, #2
    5e80:	d10d      	bne.n	5e9e <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    5e82:	f013 0f04 	tst.w	r3, #4
    5e86:	d111      	bne.n	5eac <_adc_interrupt_handler+0x44>
    5e88:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    5e8a:	2301      	movs	r3, #1
    5e8c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    5e90:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    5e94:	6883      	ldr	r3, [r0, #8]
    5e96:	b292      	uxth	r2, r2
    5e98:	2100      	movs	r1, #0
    5e9a:	4798      	blx	r3
    5e9c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    5e9e:	2302      	movs	r3, #2
    5ea0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    5ea4:	6843      	ldr	r3, [r0, #4]
    5ea6:	2100      	movs	r1, #0
    5ea8:	4798      	blx	r3
    5eaa:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    5eac:	2304      	movs	r3, #4
    5eae:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    5eb2:	6803      	ldr	r3, [r0, #0]
    5eb4:	2100      	movs	r1, #0
    5eb6:	4798      	blx	r3
	}
}
    5eb8:	e7e6      	b.n	5e88 <_adc_interrupt_handler+0x20>
	...

00005ebc <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5ebc:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5ec0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5ec4:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    5ec8:	b148      	cbz	r0, 5ede <_adc_get_regs+0x22>
    5eca:	2801      	cmp	r0, #1
    5ecc:	d009      	beq.n	5ee2 <_adc_get_regs+0x26>
{
    5ece:	b508      	push	{r3, lr}
	ASSERT(false);
    5ed0:	228c      	movs	r2, #140	; 0x8c
    5ed2:	4905      	ldr	r1, [pc, #20]	; (5ee8 <_adc_get_regs+0x2c>)
    5ed4:	2000      	movs	r0, #0
    5ed6:	4b05      	ldr	r3, [pc, #20]	; (5eec <_adc_get_regs+0x30>)
    5ed8:	4798      	blx	r3
	return 0;
    5eda:	2000      	movs	r0, #0
    5edc:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    5ede:	2000      	movs	r0, #0
    5ee0:	4770      	bx	lr
    5ee2:	2001      	movs	r0, #1
    5ee4:	4770      	bx	lr
    5ee6:	bf00      	nop
    5ee8:	0000d780 	.word	0x0000d780
    5eec:	00005b49 	.word	0x00005b49

00005ef0 <_adc_async_init>:
{
    5ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ef4:	460c      	mov	r4, r1
	ASSERT(device);
    5ef6:	4605      	mov	r5, r0
    5ef8:	22e6      	movs	r2, #230	; 0xe6
    5efa:	493b      	ldr	r1, [pc, #236]	; (5fe8 <_adc_async_init+0xf8>)
    5efc:	3000      	adds	r0, #0
    5efe:	bf18      	it	ne
    5f00:	2001      	movne	r0, #1
    5f02:	4b3a      	ldr	r3, [pc, #232]	; (5fec <_adc_async_init+0xfc>)
    5f04:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    5f06:	4620      	mov	r0, r4
    5f08:	4b39      	ldr	r3, [pc, #228]	; (5ff0 <_adc_async_init+0x100>)
    5f0a:	4798      	blx	r3
    5f0c:	4601      	mov	r1, r0
    5f0e:	4620      	mov	r0, r4
    5f10:	4b38      	ldr	r3, [pc, #224]	; (5ff4 <_adc_async_init+0x104>)
    5f12:	4798      	blx	r3
	if (init_status) {
    5f14:	4606      	mov	r6, r0
    5f16:	b110      	cbz	r0, 5f1e <_adc_async_init+0x2e>
}
    5f18:	4630      	mov	r0, r6
    5f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    5f1e:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5f20:	4b35      	ldr	r3, [pc, #212]	; (5ff8 <_adc_async_init+0x108>)
    5f22:	429c      	cmp	r4, r3
    5f24:	d05c      	beq.n	5fe0 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    5f26:	4b35      	ldr	r3, [pc, #212]	; (5ffc <_adc_async_init+0x10c>)
    5f28:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    5f2a:	bf04      	itt	eq
    5f2c:	4b34      	ldreq	r3, [pc, #208]	; (6000 <_adc_async_init+0x110>)
    5f2e:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5f30:	4628      	mov	r0, r5
    5f32:	4f34      	ldr	r7, [pc, #208]	; (6004 <_adc_async_init+0x114>)
    5f34:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f36:	0943      	lsrs	r3, r0, #5
    5f38:	f000 001f 	and.w	r0, r0, #31
    5f3c:	2401      	movs	r4, #1
    5f3e:	fa04 f000 	lsl.w	r0, r4, r0
    5f42:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6008 <_adc_async_init+0x118>
    5f46:	3320      	adds	r3, #32
    5f48:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5f4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f50:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    5f54:	4628      	mov	r0, r5
    5f56:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f58:	0943      	lsrs	r3, r0, #5
    5f5a:	f000 001f 	and.w	r0, r0, #31
    5f5e:	fa04 f000 	lsl.w	r0, r4, r0
    5f62:	3360      	adds	r3, #96	; 0x60
    5f64:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5f68:	4628      	mov	r0, r5
    5f6a:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f6c:	0943      	lsrs	r3, r0, #5
    5f6e:	f000 001f 	and.w	r0, r0, #31
    5f72:	4084      	lsls	r4, r0
    5f74:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5f78:	4628      	mov	r0, r5
    5f7a:	47b8      	blx	r7
    5f7c:	3001      	adds	r0, #1
    5f7e:	b280      	uxth	r0, r0
    5f80:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5f82:	2b00      	cmp	r3, #0
    5f84:	dbc8      	blt.n	5f18 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f86:	095b      	lsrs	r3, r3, #5
    5f88:	f000 001f 	and.w	r0, r0, #31
    5f8c:	2201      	movs	r2, #1
    5f8e:	fa02 f000 	lsl.w	r0, r2, r0
    5f92:	3320      	adds	r3, #32
    5f94:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5f98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f9c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    5fa0:	4628      	mov	r0, r5
    5fa2:	47b8      	blx	r7
    5fa4:	3001      	adds	r0, #1
    5fa6:	b280      	uxth	r0, r0
    5fa8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5faa:	2b00      	cmp	r3, #0
    5fac:	dbb4      	blt.n	5f18 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fae:	095b      	lsrs	r3, r3, #5
    5fb0:	f000 001f 	and.w	r0, r0, #31
    5fb4:	2201      	movs	r2, #1
    5fb6:	fa02 f000 	lsl.w	r0, r2, r0
    5fba:	3360      	adds	r3, #96	; 0x60
    5fbc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    5fc0:	4628      	mov	r0, r5
    5fc2:	47b8      	blx	r7
    5fc4:	3001      	adds	r0, #1
    5fc6:	b280      	uxth	r0, r0
    5fc8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5fca:	2b00      	cmp	r3, #0
    5fcc:	dba4      	blt.n	5f18 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fce:	095b      	lsrs	r3, r3, #5
    5fd0:	f000 001f 	and.w	r0, r0, #31
    5fd4:	2201      	movs	r2, #1
    5fd6:	fa02 f000 	lsl.w	r0, r2, r0
    5fda:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    5fde:	e79b      	b.n	5f18 <_adc_async_init+0x28>
		_adc0_dev = dev;
    5fe0:	4b07      	ldr	r3, [pc, #28]	; (6000 <_adc_async_init+0x110>)
    5fe2:	601d      	str	r5, [r3, #0]
    5fe4:	e7a4      	b.n	5f30 <_adc_async_init+0x40>
    5fe6:	bf00      	nop
    5fe8:	0000d780 	.word	0x0000d780
    5fec:	00005b49 	.word	0x00005b49
    5ff0:	00005ebd 	.word	0x00005ebd
    5ff4:	00005d3d 	.word	0x00005d3d
    5ff8:	43001c00 	.word	0x43001c00
    5ffc:	43002000 	.word	0x43002000
    6000:	200007f0 	.word	0x200007f0
    6004:	00005d25 	.word	0x00005d25
    6008:	e000e100 	.word	0xe000e100

0000600c <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    600c:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    600e:	8813      	ldrh	r3, [r2, #0]
    6010:	b29b      	uxth	r3, r3
    6012:	f043 0302 	orr.w	r3, r3, #2
    6016:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6018:	6b13      	ldr	r3, [r2, #48]	; 0x30
    601a:	f013 0f03 	tst.w	r3, #3
    601e:	d1fb      	bne.n	6018 <_adc_async_enable_channel+0xc>
}
    6020:	4770      	bx	lr

00006022 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    6022:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    6024:	88db      	ldrh	r3, [r3, #6]
    6026:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    602a:	2b03      	cmp	r3, #3
}
    602c:	bf0c      	ite	eq
    602e:	2001      	moveq	r0, #1
    6030:	2002      	movne	r0, #2
    6032:	4770      	bx	lr

00006034 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    6034:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    6036:	7d13      	ldrb	r3, [r2, #20]
    6038:	f043 0302 	orr.w	r3, r3, #2
    603c:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    603e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    6040:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6044:	2b00      	cmp	r3, #0
    6046:	d1fa      	bne.n	603e <_adc_async_convert+0xa>
}
    6048:	4770      	bx	lr

0000604a <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    604a:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    604c:	2a01      	cmp	r2, #1
    604e:	d007      	beq.n	6060 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    6050:	2a02      	cmp	r2, #2
    6052:	d00e      	beq.n	6072 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    6054:	b91a      	cbnz	r2, 605e <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    6056:	b1ab      	cbz	r3, 6084 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    6058:	2301      	movs	r3, #1
    605a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    605e:	4770      	bx	lr
	if (value == 0x0) {
    6060:	b91b      	cbnz	r3, 606a <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    6062:	2304      	movs	r3, #4
    6064:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    6068:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    606a:	2304      	movs	r3, #4
    606c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    6070:	4770      	bx	lr
	if (value == 0x0) {
    6072:	b91b      	cbnz	r3, 607c <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    6074:	2302      	movs	r3, #2
    6076:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    607a:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    607c:	2302      	movs	r3, #2
    607e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    6082:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    6084:	2301      	movs	r3, #1
    6086:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    608a:	4770      	bx	lr

0000608c <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    608c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    608e:	4b02      	ldr	r3, [pc, #8]	; (6098 <ADC0_0_Handler+0xc>)
    6090:	6818      	ldr	r0, [r3, #0]
    6092:	4b02      	ldr	r3, [pc, #8]	; (609c <ADC0_0_Handler+0x10>)
    6094:	4798      	blx	r3
    6096:	bd08      	pop	{r3, pc}
    6098:	200007f0 	.word	0x200007f0
    609c:	00005e69 	.word	0x00005e69

000060a0 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    60a0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    60a2:	4b02      	ldr	r3, [pc, #8]	; (60ac <ADC0_1_Handler+0xc>)
    60a4:	6818      	ldr	r0, [r3, #0]
    60a6:	4b02      	ldr	r3, [pc, #8]	; (60b0 <ADC0_1_Handler+0x10>)
    60a8:	4798      	blx	r3
    60aa:	bd08      	pop	{r3, pc}
    60ac:	200007f0 	.word	0x200007f0
    60b0:	00005e69 	.word	0x00005e69

000060b4 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    60b4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    60b6:	4b02      	ldr	r3, [pc, #8]	; (60c0 <ADC1_0_Handler+0xc>)
    60b8:	6858      	ldr	r0, [r3, #4]
    60ba:	4b02      	ldr	r3, [pc, #8]	; (60c4 <ADC1_0_Handler+0x10>)
    60bc:	4798      	blx	r3
    60be:	bd08      	pop	{r3, pc}
    60c0:	200007f0 	.word	0x200007f0
    60c4:	00005e69 	.word	0x00005e69

000060c8 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    60c8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    60ca:	4b02      	ldr	r3, [pc, #8]	; (60d4 <ADC1_1_Handler+0xc>)
    60cc:	6858      	ldr	r0, [r3, #4]
    60ce:	4b02      	ldr	r3, [pc, #8]	; (60d8 <ADC1_1_Handler+0x10>)
    60d0:	4798      	blx	r3
    60d2:	bd08      	pop	{r3, pc}
    60d4:	200007f0 	.word	0x200007f0
    60d8:	00005e69 	.word	0x00005e69

000060dc <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60dc:	0943      	lsrs	r3, r0, #5
    60de:	f000 001f 	and.w	r0, r0, #31
    60e2:	2201      	movs	r2, #1
    60e4:	fa02 f000 	lsl.w	r0, r2, r0
    60e8:	3340      	adds	r3, #64	; 0x40
    60ea:	4a02      	ldr	r2, [pc, #8]	; (60f4 <_irq_set+0x18>)
    60ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    60f0:	4770      	bx	lr
    60f2:	bf00      	nop
    60f4:	e000e100 	.word	0xe000e100

000060f8 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    60f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    60fc:	00c0      	lsls	r0, r0, #3
    60fe:	4770      	bx	lr

00006100 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6100:	4b01      	ldr	r3, [pc, #4]	; (6108 <_get_cycles_for_ms+0x8>)
    6102:	fb03 f000 	mul.w	r0, r3, r0
    6106:	4770      	bx	lr
    6108:	0001d4c0 	.word	0x0001d4c0

0000610c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    610c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    610e:	4a0e      	ldr	r2, [pc, #56]	; (6148 <_init_chip+0x3c>)
    6110:	8813      	ldrh	r3, [r2, #0]
    6112:	b29b      	uxth	r3, r3
    6114:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    6118:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    611a:	4b0c      	ldr	r3, [pc, #48]	; (614c <_init_chip+0x40>)
    611c:	4798      	blx	r3
	_oscctrl_init_sources();
    611e:	4b0c      	ldr	r3, [pc, #48]	; (6150 <_init_chip+0x44>)
    6120:	4798      	blx	r3
	_mclk_init();
    6122:	4b0c      	ldr	r3, [pc, #48]	; (6154 <_init_chip+0x48>)
    6124:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6126:	2004      	movs	r0, #4
    6128:	4c0b      	ldr	r4, [pc, #44]	; (6158 <_init_chip+0x4c>)
    612a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    612c:	4b0b      	ldr	r3, [pc, #44]	; (615c <_init_chip+0x50>)
    612e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6130:	f640 70fb 	movw	r0, #4091	; 0xffb
    6134:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    6136:	4a0a      	ldr	r2, [pc, #40]	; (6160 <_init_chip+0x54>)
    6138:	6913      	ldr	r3, [r2, #16]
    613a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    613e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    6140:	4b08      	ldr	r3, [pc, #32]	; (6164 <_init_chip+0x58>)
    6142:	4798      	blx	r3
    6144:	bd10      	pop	{r4, pc}
    6146:	bf00      	nop
    6148:	41004000 	.word	0x41004000
    614c:	000065e9 	.word	0x000065e9
    6150:	000065fd 	.word	0x000065fd
    6154:	00006511 	.word	0x00006511
    6158:	00006499 	.word	0x00006499
    615c:	00006601 	.word	0x00006601
    6160:	40000800 	.word	0x40000800
    6164:	000061dd 	.word	0x000061dd

00006168 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    6168:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    616a:	4a1a      	ldr	r2, [pc, #104]	; (61d4 <_dmac_handler+0x6c>)
    616c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    616e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    6172:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    6176:	4818      	ldr	r0, [pc, #96]	; (61d8 <_dmac_handler+0x70>)
    6178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    617c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6180:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    6184:	f012 0f01 	tst.w	r2, #1
    6188:	d10a      	bne.n	61a0 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    618a:	011a      	lsls	r2, r3, #4
    618c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6190:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6194:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    6198:	f012 0f02 	tst.w	r2, #2
    619c:	d10b      	bne.n	61b6 <_dmac_handler+0x4e>
    619e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    61a0:	011a      	lsls	r2, r3, #4
    61a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    61a6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    61aa:	2101      	movs	r1, #1
    61ac:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    61b0:	6843      	ldr	r3, [r0, #4]
    61b2:	4798      	blx	r3
    61b4:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    61b6:	011a      	lsls	r2, r3, #4
    61b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    61bc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    61c0:	2102      	movs	r1, #2
    61c2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    61c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    61ca:	4a03      	ldr	r2, [pc, #12]	; (61d8 <_dmac_handler+0x70>)
    61cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61d0:	4798      	blx	r3
	}
}
    61d2:	e7e4      	b.n	619e <_dmac_handler+0x36>
    61d4:	4100a000 	.word	0x4100a000
    61d8:	200007f8 	.word	0x200007f8

000061dc <_dma_init>:
{
    61dc:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    61de:	4a32      	ldr	r2, [pc, #200]	; (62a8 <_dma_init+0xcc>)
    61e0:	8813      	ldrh	r3, [r2, #0]
    61e2:	f023 0302 	bic.w	r3, r3, #2
    61e6:	041b      	lsls	r3, r3, #16
    61e8:	0c1b      	lsrs	r3, r3, #16
    61ea:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    61ec:	8853      	ldrh	r3, [r2, #2]
    61ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    61f2:	041b      	lsls	r3, r3, #16
    61f4:	0c1b      	lsrs	r3, r3, #16
    61f6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    61f8:	8813      	ldrh	r3, [r2, #0]
    61fa:	b29b      	uxth	r3, r3
    61fc:	f043 0301 	orr.w	r3, r3, #1
    6200:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    6202:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    6204:	f013 0f01 	tst.w	r3, #1
    6208:	d1fb      	bne.n	6202 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    620a:	4b27      	ldr	r3, [pc, #156]	; (62a8 <_dma_init+0xcc>)
    620c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6210:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    6212:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    6214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    6218:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    621c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    621e:	2100      	movs	r1, #0
    6220:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    6222:	4a22      	ldr	r2, [pc, #136]	; (62ac <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    6224:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    6226:	4a22      	ldr	r2, [pc, #136]	; (62b0 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    6228:	639a      	str	r2, [r3, #56]	; 0x38
    622a:	4b22      	ldr	r3, [pc, #136]	; (62b4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    622c:	4c1f      	ldr	r4, [pc, #124]	; (62ac <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    622e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6230:	681d      	ldr	r5, [r3, #0]
    6232:	0108      	lsls	r0, r1, #4
    6234:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    6238:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    623c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    623e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6240:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    6244:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    6246:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    624a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    624c:	1822      	adds	r2, r4, r0
    624e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6250:	60d6      	str	r6, [r2, #12]
    6252:	3101      	adds	r1, #1
    6254:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    6256:	2920      	cmp	r1, #32
    6258:	d1ea      	bne.n	6230 <_dma_init+0x54>
    625a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    625c:	2001      	movs	r0, #1
    625e:	4916      	ldr	r1, [pc, #88]	; (62b8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    6260:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    6262:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6266:	d00b      	beq.n	6280 <_dma_init+0xa4>
    6268:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    626a:	2b24      	cmp	r3, #36	; 0x24
    626c:	d1f8      	bne.n	6260 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    626e:	4a0e      	ldr	r2, [pc, #56]	; (62a8 <_dma_init+0xcc>)
    6270:	8813      	ldrh	r3, [r2, #0]
    6272:	b29b      	uxth	r3, r3
    6274:	f043 0302 	orr.w	r3, r3, #2
    6278:	8013      	strh	r3, [r2, #0]
}
    627a:	2000      	movs	r0, #0
    627c:	bc70      	pop	{r4, r5, r6}
    627e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6280:	095c      	lsrs	r4, r3, #5
    6282:	f002 021f 	and.w	r2, r2, #31
    6286:	fa00 f202 	lsl.w	r2, r0, r2
    628a:	f104 0520 	add.w	r5, r4, #32
    628e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6292:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6296:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    629a:	f104 0560 	add.w	r5, r4, #96	; 0x60
    629e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    62a2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    62a6:	e7df      	b.n	6268 <_dma_init+0x8c>
    62a8:	4100a000 	.word	0x4100a000
    62ac:	20003770 	.word	0x20003770
    62b0:	20003970 	.word	0x20003970
    62b4:	0000d798 	.word	0x0000d798
    62b8:	e000e100 	.word	0xe000e100

000062bc <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    62bc:	b991      	cbnz	r1, 62e4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    62be:	b942      	cbnz	r2, 62d2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    62c0:	0100      	lsls	r0, r0, #4
    62c2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    62c6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    62ca:	2302      	movs	r3, #2
    62cc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    62d0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    62d2:	0100      	lsls	r0, r0, #4
    62d4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    62d8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    62dc:	2302      	movs	r3, #2
    62de:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    62e2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    62e4:	2901      	cmp	r1, #1
    62e6:	d000      	beq.n	62ea <_dma_set_irq_state+0x2e>
    62e8:	4770      	bx	lr
	if (value == 0x0) {
    62ea:	b142      	cbz	r2, 62fe <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    62ec:	0100      	lsls	r0, r0, #4
    62ee:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    62f2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    62f6:	2301      	movs	r3, #1
    62f8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    62fc:	e7f4      	b.n	62e8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    62fe:	0100      	lsls	r0, r0, #4
    6300:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6304:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6308:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    630c:	4770      	bx	lr
	...

00006310 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6310:	4b02      	ldr	r3, [pc, #8]	; (631c <_dma_set_destination_address+0xc>)
    6312:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6316:	6081      	str	r1, [r0, #8]
}
    6318:	2000      	movs	r0, #0
    631a:	4770      	bx	lr
    631c:	20003770 	.word	0x20003770

00006320 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6320:	4b02      	ldr	r3, [pc, #8]	; (632c <_dma_set_source_address+0xc>)
    6322:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6326:	6041      	str	r1, [r0, #4]
}
    6328:	2000      	movs	r0, #0
    632a:	4770      	bx	lr
    632c:	20003770 	.word	0x20003770

00006330 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6330:	4a05      	ldr	r2, [pc, #20]	; (6348 <_dma_srcinc_enable+0x18>)
    6332:	0100      	lsls	r0, r0, #4
    6334:	5a13      	ldrh	r3, [r2, r0]
    6336:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    6338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    633c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6340:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    6342:	5211      	strh	r1, [r2, r0]
}
    6344:	2000      	movs	r0, #0
    6346:	4770      	bx	lr
    6348:	20003770 	.word	0x20003770

0000634c <_dma_set_data_amount>:
{
    634c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    634e:	4c14      	ldr	r4, [pc, #80]	; (63a0 <_dma_set_data_amount+0x54>)
    6350:	0102      	lsls	r2, r0, #4
    6352:	18a3      	adds	r3, r4, r2
    6354:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6356:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    6358:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    635c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    635e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    6362:	d006      	beq.n	6372 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6364:	fa01 f403 	lsl.w	r4, r1, r3
    6368:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    636a:	4a0d      	ldr	r2, [pc, #52]	; (63a0 <_dma_set_data_amount+0x54>)
    636c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    6370:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    6372:	4c0b      	ldr	r4, [pc, #44]	; (63a0 <_dma_set_data_amount+0x54>)
    6374:	0102      	lsls	r2, r0, #4
    6376:	18a5      	adds	r5, r4, r2
    6378:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    637a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    637c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    6380:	d005      	beq.n	638e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6382:	fa01 f303 	lsl.w	r3, r1, r3
    6386:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6388:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    638c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    638e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    6390:	4b03      	ldr	r3, [pc, #12]	; (63a0 <_dma_set_data_amount+0x54>)
    6392:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6396:	8041      	strh	r1, [r0, #2]
}
    6398:	2000      	movs	r0, #0
    639a:	bc30      	pop	{r4, r5}
    639c:	4770      	bx	lr
    639e:	bf00      	nop
    63a0:	20003770 	.word	0x20003770

000063a4 <_dma_enable_transaction>:
{
    63a4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    63a6:	4c0d      	ldr	r4, [pc, #52]	; (63dc <_dma_enable_transaction+0x38>)
    63a8:	0103      	lsls	r3, r0, #4
    63aa:	5ae2      	ldrh	r2, [r4, r3]
    63ac:	b292      	uxth	r2, r2
    63ae:	f042 0201 	orr.w	r2, r2, #1
    63b2:	52e2      	strh	r2, [r4, r3]
    63b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    63b8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    63bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    63be:	f042 0202 	orr.w	r2, r2, #2
    63c2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    63c4:	b131      	cbz	r1, 63d4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    63c6:	4a06      	ldr	r2, [pc, #24]	; (63e0 <_dma_enable_transaction+0x3c>)
    63c8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    63ca:	2301      	movs	r3, #1
    63cc:	fa03 f000 	lsl.w	r0, r3, r0
    63d0:	4308      	orrs	r0, r1
    63d2:	6110      	str	r0, [r2, #16]
}
    63d4:	2000      	movs	r0, #0
    63d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    63da:	4770      	bx	lr
    63dc:	20003770 	.word	0x20003770
    63e0:	4100a000 	.word	0x4100a000

000063e4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    63e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    63e8:	4b02      	ldr	r3, [pc, #8]	; (63f4 <_dma_get_channel_resource+0x10>)
    63ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    63ee:	6001      	str	r1, [r0, #0]
}
    63f0:	2000      	movs	r0, #0
    63f2:	4770      	bx	lr
    63f4:	200007f8 	.word	0x200007f8

000063f8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    63f8:	b508      	push	{r3, lr}
	_dmac_handler();
    63fa:	4b01      	ldr	r3, [pc, #4]	; (6400 <DMAC_0_Handler+0x8>)
    63fc:	4798      	blx	r3
    63fe:	bd08      	pop	{r3, pc}
    6400:	00006169 	.word	0x00006169

00006404 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6404:	b508      	push	{r3, lr}
	_dmac_handler();
    6406:	4b01      	ldr	r3, [pc, #4]	; (640c <DMAC_1_Handler+0x8>)
    6408:	4798      	blx	r3
    640a:	bd08      	pop	{r3, pc}
    640c:	00006169 	.word	0x00006169

00006410 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6410:	b508      	push	{r3, lr}
	_dmac_handler();
    6412:	4b01      	ldr	r3, [pc, #4]	; (6418 <DMAC_2_Handler+0x8>)
    6414:	4798      	blx	r3
    6416:	bd08      	pop	{r3, pc}
    6418:	00006169 	.word	0x00006169

0000641c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    641c:	b508      	push	{r3, lr}
	_dmac_handler();
    641e:	4b01      	ldr	r3, [pc, #4]	; (6424 <DMAC_3_Handler+0x8>)
    6420:	4798      	blx	r3
    6422:	bd08      	pop	{r3, pc}
    6424:	00006169 	.word	0x00006169

00006428 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6428:	b508      	push	{r3, lr}
	_dmac_handler();
    642a:	4b01      	ldr	r3, [pc, #4]	; (6430 <DMAC_4_Handler+0x8>)
    642c:	4798      	blx	r3
    642e:	bd08      	pop	{r3, pc}
    6430:	00006169 	.word	0x00006169

00006434 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6434:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    6436:	2000      	movs	r0, #0
    6438:	4770      	bx	lr
	...

0000643c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    643c:	b430      	push	{r4, r5}
    643e:	4814      	ldr	r0, [pc, #80]	; (6490 <_event_system_init+0x54>)
    6440:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6444:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6446:	4c13      	ldr	r4, [pc, #76]	; (6494 <_event_system_init+0x58>)
    6448:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    644a:	f813 1b01 	ldrb.w	r1, [r3], #1
    644e:	3248      	adds	r2, #72	; 0x48
    6450:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    6454:	42ab      	cmp	r3, r5
    6456:	d1f7      	bne.n	6448 <_event_system_init+0xc>
    6458:	480d      	ldr	r0, [pc, #52]	; (6490 <_event_system_init+0x54>)
    645a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    645e:	3080      	adds	r0, #128	; 0x80
    6460:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6462:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6466:	00ca      	lsls	r2, r1, #3
    6468:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    646c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6470:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6472:	f850 3f04 	ldr.w	r3, [r0, #4]!
    6476:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6478:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    647c:	43db      	mvns	r3, r3
    647e:	b2db      	uxtb	r3, r3
    6480:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    6484:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6486:	2920      	cmp	r1, #32
    6488:	d1eb      	bne.n	6462 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    648a:	2000      	movs	r0, #0
    648c:	bc30      	pop	{r4, r5}
    648e:	4770      	bx	lr
    6490:	0000d898 	.word	0x0000d898
    6494:	4100e000 	.word	0x4100e000

00006498 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6498:	f010 0f01 	tst.w	r0, #1
    649c:	d008      	beq.n	64b0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    649e:	4a17      	ldr	r2, [pc, #92]	; (64fc <_gclk_init_generators_by_fref+0x64>)
    64a0:	4b17      	ldr	r3, [pc, #92]	; (6500 <_gclk_init_generators_by_fref+0x68>)
    64a2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    64a4:	4619      	mov	r1, r3
    64a6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    64aa:	684b      	ldr	r3, [r1, #4]
    64ac:	4213      	tst	r3, r2
    64ae:	d1fc      	bne.n	64aa <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    64b0:	f010 0f02 	tst.w	r0, #2
    64b4:	d008      	beq.n	64c8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    64b6:	4a13      	ldr	r2, [pc, #76]	; (6504 <_gclk_init_generators_by_fref+0x6c>)
    64b8:	4b11      	ldr	r3, [pc, #68]	; (6500 <_gclk_init_generators_by_fref+0x68>)
    64ba:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    64bc:	4619      	mov	r1, r3
    64be:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    64c2:	684b      	ldr	r3, [r1, #4]
    64c4:	4213      	tst	r3, r2
    64c6:	d1fc      	bne.n	64c2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    64c8:	f010 0f04 	tst.w	r0, #4
    64cc:	d008      	beq.n	64e0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    64ce:	4a0e      	ldr	r2, [pc, #56]	; (6508 <_gclk_init_generators_by_fref+0x70>)
    64d0:	4b0b      	ldr	r3, [pc, #44]	; (6500 <_gclk_init_generators_by_fref+0x68>)
    64d2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    64d4:	4619      	mov	r1, r3
    64d6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    64da:	684b      	ldr	r3, [r1, #4]
    64dc:	4213      	tst	r3, r2
    64de:	d1fc      	bne.n	64da <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    64e0:	f010 0f08 	tst.w	r0, #8
    64e4:	d008      	beq.n	64f8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    64e6:	4a09      	ldr	r2, [pc, #36]	; (650c <_gclk_init_generators_by_fref+0x74>)
    64e8:	4b05      	ldr	r3, [pc, #20]	; (6500 <_gclk_init_generators_by_fref+0x68>)
    64ea:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    64ec:	4619      	mov	r1, r3
    64ee:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    64f2:	684b      	ldr	r3, [r1, #4]
    64f4:	4213      	tst	r3, r2
    64f6:	d1fc      	bne.n	64f2 <_gclk_init_generators_by_fref+0x5a>
    64f8:	4770      	bx	lr
    64fa:	bf00      	nop
    64fc:	00010108 	.word	0x00010108
    6500:	40001c00 	.word	0x40001c00
    6504:	00010106 	.word	0x00010106
    6508:	00100106 	.word	0x00100106
    650c:	00010104 	.word	0x00010104

00006510 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    6510:	2201      	movs	r2, #1
    6512:	4b01      	ldr	r3, [pc, #4]	; (6518 <_mclk_init+0x8>)
    6514:	715a      	strb	r2, [r3, #5]
    6516:	4770      	bx	lr
    6518:	40000800 	.word	0x40000800

0000651c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    651c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    651e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6520:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6522:	f012 0f01 	tst.w	r2, #1
    6526:	d005      	beq.n	6534 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    6528:	2201      	movs	r2, #1
    652a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    652c:	6803      	ldr	r3, [r0, #0]
    652e:	b153      	cbz	r3, 6546 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6530:	4798      	blx	r3
    6532:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6534:	8a1a      	ldrh	r2, [r3, #16]
    6536:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    6538:	b12a      	cbz	r2, 6546 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    653a:	f240 225e 	movw	r2, #606	; 0x25e
    653e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    6540:	6843      	ldr	r3, [r0, #4]
    6542:	b103      	cbz	r3, 6546 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    6544:	4798      	blx	r3
    6546:	bd08      	pop	{r3, pc}

00006548 <_flash_init>:
{
    6548:	b538      	push	{r3, r4, r5, lr}
    654a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    654c:	4605      	mov	r5, r0
    654e:	b350      	cbz	r0, 65a6 <_flash_init+0x5e>
    6550:	4816      	ldr	r0, [pc, #88]	; (65ac <_flash_init+0x64>)
    6552:	4281      	cmp	r1, r0
    6554:	bf14      	ite	ne
    6556:	2000      	movne	r0, #0
    6558:	2001      	moveq	r0, #1
    655a:	224b      	movs	r2, #75	; 0x4b
    655c:	4914      	ldr	r1, [pc, #80]	; (65b0 <_flash_init+0x68>)
    655e:	4b15      	ldr	r3, [pc, #84]	; (65b4 <_flash_init+0x6c>)
    6560:	4798      	blx	r3
	device->hw = hw;
    6562:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    6564:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    6566:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    656a:	049b      	lsls	r3, r3, #18
    656c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    656e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    6570:	4b11      	ldr	r3, [pc, #68]	; (65b8 <_flash_init+0x70>)
    6572:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6574:	4b11      	ldr	r3, [pc, #68]	; (65bc <_flash_init+0x74>)
    6576:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    657a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    657e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6582:	f3bf 8f6f 	isb	sy
    6586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    658a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    658e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6592:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6596:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    659a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    659e:	6019      	str	r1, [r3, #0]
    65a0:	601a      	str	r2, [r3, #0]
}
    65a2:	2000      	movs	r0, #0
    65a4:	bd38      	pop	{r3, r4, r5, pc}
    65a6:	2000      	movs	r0, #0
    65a8:	e7d7      	b.n	655a <_flash_init+0x12>
    65aa:	bf00      	nop
    65ac:	41004000 	.word	0x41004000
    65b0:	0000d99c 	.word	0x0000d99c
    65b4:	00005b49 	.word	0x00005b49
    65b8:	20000978 	.word	0x20000978
    65bc:	e000e100 	.word	0xe000e100

000065c0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    65c0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    65c2:	4b02      	ldr	r3, [pc, #8]	; (65cc <NVMCTRL_0_Handler+0xc>)
    65c4:	6818      	ldr	r0, [r3, #0]
    65c6:	4b02      	ldr	r3, [pc, #8]	; (65d0 <NVMCTRL_0_Handler+0x10>)
    65c8:	4798      	blx	r3
    65ca:	bd08      	pop	{r3, pc}
    65cc:	20000978 	.word	0x20000978
    65d0:	0000651d 	.word	0x0000651d

000065d4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    65d4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    65d6:	4b02      	ldr	r3, [pc, #8]	; (65e0 <NVMCTRL_1_Handler+0xc>)
    65d8:	6818      	ldr	r0, [r3, #0]
    65da:	4b02      	ldr	r3, [pc, #8]	; (65e4 <NVMCTRL_1_Handler+0x10>)
    65dc:	4798      	blx	r3
    65de:	bd08      	pop	{r3, pc}
    65e0:	20000978 	.word	0x20000978
    65e4:	0000651d 	.word	0x0000651d

000065e8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    65e8:	4b03      	ldr	r3, [pc, #12]	; (65f8 <_osc32kctrl_init_sources+0x10>)
    65ea:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    65ec:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    65f0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    65f2:	2201      	movs	r2, #1
    65f4:	741a      	strb	r2, [r3, #16]
    65f6:	4770      	bx	lr
    65f8:	40001400 	.word	0x40001400

000065fc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    65fc:	4770      	bx	lr
	...

00006600 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6600:	4a47      	ldr	r2, [pc, #284]	; (6720 <_oscctrl_init_referenced_generators+0x120>)
    6602:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6604:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6608:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    660c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    660e:	4611      	mov	r1, r2
    6610:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6614:	684b      	ldr	r3, [r1, #4]
    6616:	4213      	tst	r3, r2
    6618:	d1fc      	bne.n	6614 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    661a:	4a41      	ldr	r2, [pc, #260]	; (6720 <_oscctrl_init_referenced_generators+0x120>)
    661c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    661e:	f013 0f04 	tst.w	r3, #4
    6622:	d1fb      	bne.n	661c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6624:	4b3f      	ldr	r3, [pc, #252]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    6626:	2200      	movs	r2, #0
    6628:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    662a:	4a3f      	ldr	r2, [pc, #252]	; (6728 <_oscctrl_init_referenced_generators+0x128>)
    662c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    662e:	461a      	mov	r2, r3
    6630:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6634:	f013 0f10 	tst.w	r3, #16
    6638:	d1fa      	bne.n	6630 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    663a:	2200      	movs	r2, #0
    663c:	4b39      	ldr	r3, [pc, #228]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    663e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6642:	461a      	mov	r2, r3
    6644:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6648:	f013 0f04 	tst.w	r3, #4
    664c:	d1fa      	bne.n	6644 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    664e:	2202      	movs	r2, #2
    6650:	4b34      	ldr	r3, [pc, #208]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    6652:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6654:	461a      	mov	r2, r3
    6656:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    665a:	f013 0f02 	tst.w	r3, #2
    665e:	d1fa      	bne.n	6656 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6660:	4b30      	ldr	r3, [pc, #192]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    6662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6664:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6666:	461a      	mov	r2, r3
    6668:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    666c:	f013 0f08 	tst.w	r3, #8
    6670:	d1fa      	bne.n	6668 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6672:	2288      	movs	r2, #136	; 0x88
    6674:	4b2b      	ldr	r3, [pc, #172]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    6676:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    667a:	461a      	mov	r2, r3
    667c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6680:	f013 0f04 	tst.w	r3, #4
    6684:	d1fa      	bne.n	667c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6686:	2242      	movs	r2, #66	; 0x42
    6688:	4b25      	ldr	r3, [pc, #148]	; (6720 <_oscctrl_init_referenced_generators+0x120>)
    668a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    668e:	2227      	movs	r2, #39	; 0x27
    6690:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    6694:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6696:	461a      	mov	r2, r3
    6698:	6d13      	ldr	r3, [r2, #80]	; 0x50
    669a:	f013 0f06 	tst.w	r3, #6
    669e:	d1fb      	bne.n	6698 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    66a0:	4b20      	ldr	r3, [pc, #128]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    66a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    66a6:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    66a8:	2202      	movs	r2, #2
    66aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    66ae:	461a      	mov	r2, r3
    66b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    66b2:	f013 0f02 	tst.w	r3, #2
    66b6:	d1fb      	bne.n	66b0 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    66b8:	4b1a      	ldr	r3, [pc, #104]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    66ba:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    66be:	f013 0f01 	tst.w	r3, #1
    66c2:	d026      	beq.n	6712 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    66c4:	4a17      	ldr	r2, [pc, #92]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    66c6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    66c8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    66cc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    66d0:	d1f9      	bne.n	66c6 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    66d2:	4b14      	ldr	r3, [pc, #80]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    66d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    66d6:	f012 0f01 	tst.w	r2, #1
    66da:	d103      	bne.n	66e4 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    66dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    66de:	f012 0f02 	tst.w	r2, #2
    66e2:	d0f7      	beq.n	66d4 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    66e4:	4a0e      	ldr	r2, [pc, #56]	; (6720 <_oscctrl_init_referenced_generators+0x120>)
    66e6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    66e8:	2b00      	cmp	r3, #0
    66ea:	d1fc      	bne.n	66e6 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    66ec:	4a0c      	ldr	r2, [pc, #48]	; (6720 <_oscctrl_init_referenced_generators+0x120>)
    66ee:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    66f0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    66f4:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    66f8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    66fa:	4611      	mov	r1, r2
    66fc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6700:	684b      	ldr	r3, [r1, #4]
    6702:	4213      	tst	r3, r2
    6704:	d1fc      	bne.n	6700 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6706:	4a06      	ldr	r2, [pc, #24]	; (6720 <_oscctrl_init_referenced_generators+0x120>)
    6708:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    670a:	f013 0f04 	tst.w	r3, #4
    670e:	d1fb      	bne.n	6708 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    6710:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6712:	4a04      	ldr	r2, [pc, #16]	; (6724 <_oscctrl_init_referenced_generators+0x124>)
    6714:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6716:	f413 7f80 	tst.w	r3, #256	; 0x100
    671a:	d0fb      	beq.n	6714 <_oscctrl_init_referenced_generators+0x114>
    671c:	e7d9      	b.n	66d2 <_oscctrl_init_referenced_generators+0xd2>
    671e:	bf00      	nop
    6720:	40001c00 	.word	0x40001c00
    6724:	40001000 	.word	0x40001000
    6728:	04010000 	.word	0x04010000

0000672c <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    672c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    672e:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6730:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6732:	4903      	ldr	r1, [pc, #12]	; (6740 <_qspi_dma_rx_complete+0x14>)
    6734:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6736:	685b      	ldr	r3, [r3, #4]
    6738:	b103      	cbz	r3, 673c <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    673a:	4798      	blx	r3
    673c:	bd08      	pop	{r3, pc}
    673e:	bf00      	nop
    6740:	01000002 	.word	0x01000002

00006744 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    6744:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6746:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6748:	681a      	ldr	r2, [r3, #0]
    674a:	4903      	ldr	r1, [pc, #12]	; (6758 <_qspi_dma_tx_complete+0x14>)
    674c:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    674e:	685b      	ldr	r3, [r3, #4]
    6750:	b103      	cbz	r3, 6754 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    6752:	4798      	blx	r3
    6754:	bd08      	pop	{r3, pc}
    6756:	bf00      	nop
    6758:	01000002 	.word	0x01000002

0000675c <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    675c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    675e:	6883      	ldr	r3, [r0, #8]
    6760:	689b      	ldr	r3, [r3, #8]
    6762:	b103      	cbz	r3, 6766 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    6764:	4798      	blx	r3
    6766:	bd08      	pop	{r3, pc}

00006768 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    6768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    676a:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    676c:	4604      	mov	r4, r0
    676e:	2800      	cmp	r0, #0
    6770:	d027      	beq.n	67c2 <_qspi_dma_init+0x5a>
    6772:	1c08      	adds	r0, r1, #0
    6774:	bf18      	it	ne
    6776:	2001      	movne	r0, #1
    6778:	22cb      	movs	r2, #203	; 0xcb
    677a:	4913      	ldr	r1, [pc, #76]	; (67c8 <_qspi_dma_init+0x60>)
    677c:	4b13      	ldr	r3, [pc, #76]	; (67cc <_qspi_dma_init+0x64>)
    677e:	4798      	blx	r3
	dev->prvt = hw;
    6780:	4626      	mov	r6, r4
    6782:	f846 5b0c 	str.w	r5, [r6], #12
    6786:	2301      	movs	r3, #1
    6788:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    678a:	4b11      	ldr	r3, [pc, #68]	; (67d0 <_qspi_dma_init+0x68>)
    678c:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    678e:	4b11      	ldr	r3, [pc, #68]	; (67d4 <_qspi_dma_init+0x6c>)
    6790:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    6792:	211f      	movs	r1, #31
    6794:	4630      	mov	r0, r6
    6796:	4f10      	ldr	r7, [pc, #64]	; (67d8 <_qspi_dma_init+0x70>)
    6798:	47b8      	blx	r7
	dev->resource->back                 = dev;
    679a:	68e3      	ldr	r3, [r4, #12]
    679c:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    679e:	68e3      	ldr	r3, [r4, #12]
    67a0:	4a0e      	ldr	r2, [pc, #56]	; (67dc <_qspi_dma_init+0x74>)
    67a2:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    67a4:	68e3      	ldr	r3, [r4, #12]
    67a6:	4d0e      	ldr	r5, [pc, #56]	; (67e0 <_qspi_dma_init+0x78>)
    67a8:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    67aa:	211e      	movs	r1, #30
    67ac:	4630      	mov	r0, r6
    67ae:	47b8      	blx	r7
	dev->resource->back                 = dev;
    67b0:	68e3      	ldr	r3, [r4, #12]
    67b2:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    67b4:	68e3      	ldr	r3, [r4, #12]
    67b6:	4a0b      	ldr	r2, [pc, #44]	; (67e4 <_qspi_dma_init+0x7c>)
    67b8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    67ba:	68e3      	ldr	r3, [r4, #12]
    67bc:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    67be:	2000      	movs	r0, #0
    67c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    67c2:	2000      	movs	r0, #0
    67c4:	e7d8      	b.n	6778 <_qspi_dma_init+0x10>
    67c6:	bf00      	nop
    67c8:	0000d9bc 	.word	0x0000d9bc
    67cc:	00005b49 	.word	0x00005b49
    67d0:	06000011 	.word	0x06000011
    67d4:	00243b00 	.word	0x00243b00
    67d8:	000063e5 	.word	0x000063e5
    67dc:	0000672d 	.word	0x0000672d
    67e0:	0000675d 	.word	0x0000675d
    67e4:	00006745 	.word	0x00006745

000067e8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    67e8:	b500      	push	{lr}
    67ea:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    67ec:	4b0d      	ldr	r3, [pc, #52]	; (6824 <RAMECC_Handler+0x3c>)
    67ee:	789b      	ldrb	r3, [r3, #2]
    67f0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    67f2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    67f4:	9b01      	ldr	r3, [sp, #4]
    67f6:	f013 0f02 	tst.w	r3, #2
    67fa:	d006      	beq.n	680a <RAMECC_Handler+0x22>
    67fc:	4b0a      	ldr	r3, [pc, #40]	; (6828 <RAMECC_Handler+0x40>)
    67fe:	681b      	ldr	r3, [r3, #0]
    6800:	b11b      	cbz	r3, 680a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    6802:	4a08      	ldr	r2, [pc, #32]	; (6824 <RAMECC_Handler+0x3c>)
    6804:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6806:	4798      	blx	r3
    6808:	e009      	b.n	681e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    680a:	9b01      	ldr	r3, [sp, #4]
    680c:	f013 0f01 	tst.w	r3, #1
    6810:	d005      	beq.n	681e <RAMECC_Handler+0x36>
    6812:	4b05      	ldr	r3, [pc, #20]	; (6828 <RAMECC_Handler+0x40>)
    6814:	685b      	ldr	r3, [r3, #4]
    6816:	b113      	cbz	r3, 681e <RAMECC_Handler+0x36>
    6818:	4a02      	ldr	r2, [pc, #8]	; (6824 <RAMECC_Handler+0x3c>)
    681a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    681c:	4798      	blx	r3
	} else {
		return;
	}
}
    681e:	b003      	add	sp, #12
    6820:	f85d fb04 	ldr.w	pc, [sp], #4
    6824:	41020000 	.word	0x41020000
    6828:	20003b70 	.word	0x20003b70

0000682c <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    682c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    682e:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6830:	6913      	ldr	r3, [r2, #16]
    6832:	f013 0f60 	tst.w	r3, #96	; 0x60
    6836:	d1fb      	bne.n	6830 <_rtc_timer_set_period+0x4>
}
    6838:	4770      	bx	lr

0000683a <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    683a:	68c2      	ldr	r2, [r0, #12]
    683c:	6913      	ldr	r3, [r2, #16]
    683e:	f013 0f60 	tst.w	r3, #96	; 0x60
    6842:	d1fb      	bne.n	683c <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    6844:	6a10      	ldr	r0, [r2, #32]
}
    6846:	4770      	bx	lr

00006848 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    6848:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    684a:	f248 0103 	movw	r1, #32771	; 0x8003
    684e:	6913      	ldr	r3, [r2, #16]
    6850:	420b      	tst	r3, r1
    6852:	d1fc      	bne.n	684e <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6854:	8810      	ldrh	r0, [r2, #0]
}
    6856:	f3c0 0040 	ubfx	r0, r0, #1, #1
    685a:	4770      	bx	lr

0000685c <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    685c:	4770      	bx	lr
	...

00006860 <_rtc_timer_init>:
{
    6860:	b538      	push	{r3, r4, r5, lr}
    6862:	460c      	mov	r4, r1
	ASSERT(dev);
    6864:	4605      	mov	r5, r0
    6866:	2230      	movs	r2, #48	; 0x30
    6868:	4914      	ldr	r1, [pc, #80]	; (68bc <_rtc_timer_init+0x5c>)
    686a:	3000      	adds	r0, #0
    686c:	bf18      	it	ne
    686e:	2001      	movne	r0, #1
    6870:	4b13      	ldr	r3, [pc, #76]	; (68c0 <_rtc_timer_init+0x60>)
    6872:	4798      	blx	r3
	dev->hw = hw;
    6874:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6876:	2301      	movs	r3, #1
    6878:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    687a:	f248 0203 	movw	r2, #32771	; 0x8003
    687e:	6923      	ldr	r3, [r4, #16]
    6880:	4213      	tst	r3, r2
    6882:	d1fc      	bne.n	687e <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6884:	68eb      	ldr	r3, [r5, #12]
    6886:	691a      	ldr	r2, [r3, #16]
    6888:	f012 0f01 	tst.w	r2, #1
    688c:	d1fb      	bne.n	6886 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    688e:	f248 0280 	movw	r2, #32896	; 0x8080
    6892:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6894:	f248 0103 	movw	r1, #32771	; 0x8003
    6898:	691a      	ldr	r2, [r3, #16]
    689a:	420a      	tst	r2, r1
    689c:	d1fc      	bne.n	6898 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    689e:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    68a0:	2301      	movs	r3, #1
    68a2:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    68a4:	6913      	ldr	r3, [r2, #16]
    68a6:	f013 0f60 	tst.w	r3, #96	; 0x60
    68aa:	d1fb      	bne.n	68a4 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    68ac:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    68ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    68b2:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    68b4:	4b03      	ldr	r3, [pc, #12]	; (68c4 <_rtc_timer_init+0x64>)
    68b6:	601d      	str	r5, [r3, #0]
}
    68b8:	2000      	movs	r0, #0
    68ba:	bd38      	pop	{r3, r4, r5, pc}
    68bc:	0000d9d4 	.word	0x0000d9d4
    68c0:	00005b49 	.word	0x00005b49
    68c4:	2000097c 	.word	0x2000097c

000068c8 <_rtc_timer_deinit>:
{
    68c8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    68ca:	4604      	mov	r4, r0
    68cc:	b1c8      	cbz	r0, 6902 <_rtc_timer_deinit+0x3a>
    68ce:	68c0      	ldr	r0, [r0, #12]
    68d0:	3000      	adds	r0, #0
    68d2:	bf18      	it	ne
    68d4:	2001      	movne	r0, #1
    68d6:	2252      	movs	r2, #82	; 0x52
    68d8:	490b      	ldr	r1, [pc, #44]	; (6908 <_rtc_timer_deinit+0x40>)
    68da:	4b0c      	ldr	r3, [pc, #48]	; (690c <_rtc_timer_deinit+0x44>)
    68dc:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68de:	f44f 6200 	mov.w	r2, #2048	; 0x800
    68e2:	4b0b      	ldr	r3, [pc, #44]	; (6910 <_rtc_timer_deinit+0x48>)
    68e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    68e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68ec:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    68f0:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    68f2:	2301      	movs	r3, #1
    68f4:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    68f6:	f248 0103 	movw	r1, #32771	; 0x8003
    68fa:	6913      	ldr	r3, [r2, #16]
    68fc:	420b      	tst	r3, r1
    68fe:	d1fc      	bne.n	68fa <_rtc_timer_deinit+0x32>
}
    6900:	bd10      	pop	{r4, pc}
    6902:	2000      	movs	r0, #0
    6904:	e7e7      	b.n	68d6 <_rtc_timer_deinit+0xe>
    6906:	bf00      	nop
    6908:	0000d9d4 	.word	0x0000d9d4
    690c:	00005b49 	.word	0x00005b49
    6910:	e000e100 	.word	0xe000e100

00006914 <_rtc_timer_start>:
{
    6914:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6916:	4604      	mov	r4, r0
    6918:	b310      	cbz	r0, 6960 <_rtc_timer_start+0x4c>
    691a:	68c0      	ldr	r0, [r0, #12]
    691c:	3000      	adds	r0, #0
    691e:	bf18      	it	ne
    6920:	2001      	movne	r0, #1
    6922:	225e      	movs	r2, #94	; 0x5e
    6924:	490f      	ldr	r1, [pc, #60]	; (6964 <_rtc_timer_start+0x50>)
    6926:	4b10      	ldr	r3, [pc, #64]	; (6968 <_rtc_timer_start+0x54>)
    6928:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    692a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    692e:	4b0f      	ldr	r3, [pc, #60]	; (696c <_rtc_timer_start+0x58>)
    6930:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    6932:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    6934:	2300      	movs	r3, #0
    6936:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6938:	6913      	ldr	r3, [r2, #16]
    693a:	f013 0f08 	tst.w	r3, #8
    693e:	d1fb      	bne.n	6938 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    6940:	68e3      	ldr	r3, [r4, #12]
    6942:	691a      	ldr	r2, [r3, #16]
    6944:	f012 0f08 	tst.w	r2, #8
    6948:	d1fb      	bne.n	6942 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    694a:	881a      	ldrh	r2, [r3, #0]
    694c:	b292      	uxth	r2, r2
    694e:	f042 0202 	orr.w	r2, r2, #2
    6952:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6954:	f248 0103 	movw	r1, #32771	; 0x8003
    6958:	691a      	ldr	r2, [r3, #16]
    695a:	420a      	tst	r2, r1
    695c:	d1fc      	bne.n	6958 <_rtc_timer_start+0x44>
}
    695e:	bd10      	pop	{r4, pc}
    6960:	2000      	movs	r0, #0
    6962:	e7de      	b.n	6922 <_rtc_timer_start+0xe>
    6964:	0000d9d4 	.word	0x0000d9d4
    6968:	00005b49 	.word	0x00005b49
    696c:	e000e100 	.word	0xe000e100

00006970 <_rtc_timer_stop>:
{
    6970:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6972:	4604      	mov	r4, r0
    6974:	b1a0      	cbz	r0, 69a0 <_rtc_timer_stop+0x30>
    6976:	68c0      	ldr	r0, [r0, #12]
    6978:	3000      	adds	r0, #0
    697a:	bf18      	it	ne
    697c:	2001      	movne	r0, #1
    697e:	226b      	movs	r2, #107	; 0x6b
    6980:	4908      	ldr	r1, [pc, #32]	; (69a4 <_rtc_timer_stop+0x34>)
    6982:	4b09      	ldr	r3, [pc, #36]	; (69a8 <_rtc_timer_stop+0x38>)
    6984:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6986:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6988:	8813      	ldrh	r3, [r2, #0]
    698a:	f023 0302 	bic.w	r3, r3, #2
    698e:	041b      	lsls	r3, r3, #16
    6990:	0c1b      	lsrs	r3, r3, #16
    6992:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6994:	f248 0103 	movw	r1, #32771	; 0x8003
    6998:	6913      	ldr	r3, [r2, #16]
    699a:	420b      	tst	r3, r1
    699c:	d1fc      	bne.n	6998 <_rtc_timer_stop+0x28>
}
    699e:	bd10      	pop	{r4, pc}
    69a0:	2000      	movs	r0, #0
    69a2:	e7ec      	b.n	697e <_rtc_timer_stop+0xe>
    69a4:	0000d9d4 	.word	0x0000d9d4
    69a8:	00005b49 	.word	0x00005b49

000069ac <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    69ac:	4800      	ldr	r0, [pc, #0]	; (69b0 <_rtc_get_timer+0x4>)
    69ae:	4770      	bx	lr
    69b0:	20000358 	.word	0x20000358

000069b4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    69b4:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    69b6:	4b08      	ldr	r3, [pc, #32]	; (69d8 <RTC_Handler+0x24>)
    69b8:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    69ba:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    69bc:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    69be:	f413 7f80 	tst.w	r3, #256	; 0x100
    69c2:	d007      	beq.n	69d4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    69c4:	6823      	ldr	r3, [r4, #0]
    69c6:	b10b      	cbz	r3, 69cc <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    69c8:	4620      	mov	r0, r4
    69ca:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    69cc:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    69ce:	f44f 7280 	mov.w	r2, #256	; 0x100
    69d2:	819a      	strh	r2, [r3, #12]
    69d4:	bd10      	pop	{r4, pc}
    69d6:	bf00      	nop
    69d8:	2000097c 	.word	0x2000097c

000069dc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    69dc:	b470      	push	{r4, r5, r6}
    69de:	b089      	sub	sp, #36	; 0x24
    69e0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    69e2:	466c      	mov	r4, sp
    69e4:	4d0d      	ldr	r5, [pc, #52]	; (6a1c <_sercom_get_hardware_index+0x40>)
    69e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    69e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    69ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    69ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    69f2:	9b00      	ldr	r3, [sp, #0]
    69f4:	42b3      	cmp	r3, r6
    69f6:	d00d      	beq.n	6a14 <_sercom_get_hardware_index+0x38>
    69f8:	4631      	mov	r1, r6
    69fa:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    69fc:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    69fe:	f853 2b04 	ldr.w	r2, [r3], #4
    6a02:	428a      	cmp	r2, r1
    6a04:	d007      	beq.n	6a16 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6a06:	3001      	adds	r0, #1
    6a08:	2808      	cmp	r0, #8
    6a0a:	d1f8      	bne.n	69fe <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6a0c:	2000      	movs	r0, #0
}
    6a0e:	b009      	add	sp, #36	; 0x24
    6a10:	bc70      	pop	{r4, r5, r6}
    6a12:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6a14:	2000      	movs	r0, #0
			return i;
    6a16:	b2c0      	uxtb	r0, r0
    6a18:	e7f9      	b.n	6a0e <_sercom_get_hardware_index+0x32>
    6a1a:	bf00      	nop
    6a1c:	0000d9ec 	.word	0x0000d9ec

00006a20 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    6a20:	b510      	push	{r4, lr}
	void *hw = device->hw;
    6a22:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6a24:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6a26:	f013 0f01 	tst.w	r3, #1
    6a2a:	d003      	beq.n	6a34 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6a2c:	7da3      	ldrb	r3, [r4, #22]
    6a2e:	f013 0f01 	tst.w	r3, #1
    6a32:	d112      	bne.n	6a5a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6a34:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    6a36:	f013 0f02 	tst.w	r3, #2
    6a3a:	d003      	beq.n	6a44 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6a3c:	7da3      	ldrb	r3, [r4, #22]
    6a3e:	f013 0f02 	tst.w	r3, #2
    6a42:	d10f      	bne.n	6a64 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6a44:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    6a46:	f013 0f04 	tst.w	r3, #4
    6a4a:	d015      	beq.n	6a78 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    6a4c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    6a4e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6a52:	b163      	cbz	r3, 6a6e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6a54:	23ff      	movs	r3, #255	; 0xff
    6a56:	8363      	strh	r3, [r4, #26]
    6a58:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6a5a:	2301      	movs	r3, #1
    6a5c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    6a5e:	6803      	ldr	r3, [r0, #0]
    6a60:	4798      	blx	r3
    6a62:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6a64:	2302      	movs	r3, #2
    6a66:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    6a68:	6883      	ldr	r3, [r0, #8]
    6a6a:	4798      	blx	r3
    6a6c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    6a6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    6a70:	6843      	ldr	r3, [r0, #4]
    6a72:	b2c9      	uxtb	r1, r1
    6a74:	4798      	blx	r3
    6a76:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    6a78:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    6a7a:	09db      	lsrs	r3, r3, #7
    6a7c:	d100      	bne.n	6a80 <_sercom_usart_interrupt_handler+0x60>
    6a7e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    6a80:	2380      	movs	r3, #128	; 0x80
    6a82:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    6a84:	68c3      	ldr	r3, [r0, #12]
    6a86:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    6a88:	8b63      	ldrh	r3, [r4, #26]
    6a8a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6a8c:	8363      	strh	r3, [r4, #26]
    6a8e:	e7f6      	b.n	6a7e <_sercom_usart_interrupt_handler+0x5e>

00006a90 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    6a90:	4b11      	ldr	r3, [pc, #68]	; (6ad8 <_sercom_init_irq_param+0x48>)
    6a92:	4298      	cmp	r0, r3
    6a94:	d011      	beq.n	6aba <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    6a96:	4b11      	ldr	r3, [pc, #68]	; (6adc <_sercom_init_irq_param+0x4c>)
    6a98:	4298      	cmp	r0, r3
    6a9a:	d011      	beq.n	6ac0 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    6a9c:	4b10      	ldr	r3, [pc, #64]	; (6ae0 <_sercom_init_irq_param+0x50>)
    6a9e:	4298      	cmp	r0, r3
    6aa0:	d011      	beq.n	6ac6 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    6aa2:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    6aa6:	d011      	beq.n	6acc <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    6aa8:	4b0e      	ldr	r3, [pc, #56]	; (6ae4 <_sercom_init_irq_param+0x54>)
    6aaa:	4298      	cmp	r0, r3
    6aac:	d011      	beq.n	6ad2 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    6aae:	4b0e      	ldr	r3, [pc, #56]	; (6ae8 <_sercom_init_irq_param+0x58>)
    6ab0:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    6ab2:	bf04      	itt	eq
    6ab4:	4b0d      	ldreq	r3, [pc, #52]	; (6aec <_sercom_init_irq_param+0x5c>)
    6ab6:	6159      	streq	r1, [r3, #20]
    6ab8:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    6aba:	4b0c      	ldr	r3, [pc, #48]	; (6aec <_sercom_init_irq_param+0x5c>)
    6abc:	6019      	str	r1, [r3, #0]
    6abe:	e7f0      	b.n	6aa2 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    6ac0:	4b0a      	ldr	r3, [pc, #40]	; (6aec <_sercom_init_irq_param+0x5c>)
    6ac2:	6059      	str	r1, [r3, #4]
    6ac4:	e7f0      	b.n	6aa8 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    6ac6:	4b09      	ldr	r3, [pc, #36]	; (6aec <_sercom_init_irq_param+0x5c>)
    6ac8:	6099      	str	r1, [r3, #8]
    6aca:	e7f0      	b.n	6aae <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    6acc:	4b07      	ldr	r3, [pc, #28]	; (6aec <_sercom_init_irq_param+0x5c>)
    6ace:	60d9      	str	r1, [r3, #12]
    6ad0:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6ad2:	4b06      	ldr	r3, [pc, #24]	; (6aec <_sercom_init_irq_param+0x5c>)
    6ad4:	6119      	str	r1, [r3, #16]
    6ad6:	4770      	bx	lr
    6ad8:	40003000 	.word	0x40003000
    6adc:	40003400 	.word	0x40003400
    6ae0:	41014000 	.word	0x41014000
    6ae4:	43000400 	.word	0x43000400
    6ae8:	43000800 	.word	0x43000800
    6aec:	20000980 	.word	0x20000980

00006af0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6af0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6af2:	4b03      	ldr	r3, [pc, #12]	; (6b00 <_sercom_get_irq_num+0x10>)
    6af4:	4798      	blx	r3
    6af6:	0080      	lsls	r0, r0, #2
    6af8:	302e      	adds	r0, #46	; 0x2e
}
    6afa:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6afe:	bd08      	pop	{r3, pc}
    6b00:	000069dd 	.word	0x000069dd

00006b04 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6b04:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6b06:	f013 0f01 	tst.w	r3, #1
    6b0a:	d109      	bne.n	6b20 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6b0c:	6803      	ldr	r3, [r0, #0]
    6b0e:	f043 0302 	orr.w	r3, r3, #2
    6b12:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6b14:	69c3      	ldr	r3, [r0, #28]
    6b16:	f013 0f03 	tst.w	r3, #3
    6b1a:	d1fb      	bne.n	6b14 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6b1c:	2000      	movs	r0, #0
    6b1e:	4770      	bx	lr
		return ERR_BUSY;
    6b20:	f06f 0003 	mvn.w	r0, #3
}
    6b24:	4770      	bx	lr
	...

00006b28 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6b28:	b538      	push	{r3, r4, r5, lr}
    6b2a:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6b2c:	4b0b      	ldr	r3, [pc, #44]	; (6b5c <_spi_async_enable+0x34>)
    6b2e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6b30:	4620      	mov	r0, r4
    6b32:	4b0b      	ldr	r3, [pc, #44]	; (6b60 <_spi_async_enable+0x38>)
    6b34:	4798      	blx	r3
    6b36:	1d01      	adds	r1, r0, #4
    6b38:	b2c9      	uxtb	r1, r1
    6b3a:	2501      	movs	r5, #1
    6b3c:	4c09      	ldr	r4, [pc, #36]	; (6b64 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    6b3e:	1c43      	adds	r3, r0, #1
    6b40:	b2db      	uxtb	r3, r3
    6b42:	0942      	lsrs	r2, r0, #5
    6b44:	f000 001f 	and.w	r0, r0, #31
    6b48:	fa05 f000 	lsl.w	r0, r5, r0
    6b4c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    6b50:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    6b52:	4299      	cmp	r1, r3
    6b54:	d1f3      	bne.n	6b3e <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    6b56:	2000      	movs	r0, #0
    6b58:	bd38      	pop	{r3, r4, r5, pc}
    6b5a:	bf00      	nop
    6b5c:	00006b05 	.word	0x00006b05
    6b60:	00006af1 	.word	0x00006af1
    6b64:	e000e100 	.word	0xe000e100

00006b68 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6b68:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    6b6a:	f013 0f03 	tst.w	r3, #3
    6b6e:	d111      	bne.n	6b94 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6b70:	69c3      	ldr	r3, [r0, #28]
    6b72:	f013 0f03 	tst.w	r3, #3
    6b76:	d1fb      	bne.n	6b70 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    6b78:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    6b7a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    6b7e:	0709      	lsls	r1, r1, #28
    6b80:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    6b84:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6b86:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6b88:	69c3      	ldr	r3, [r0, #28]
    6b8a:	f013 0f03 	tst.w	r3, #3
    6b8e:	d1fb      	bne.n	6b88 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    6b90:	2000      	movs	r0, #0
    6b92:	4770      	bx	lr
		return ERR_BUSY;
    6b94:	f06f 0003 	mvn.w	r0, #3
}
    6b98:	4770      	bx	lr

00006b9a <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6b9a:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6b9c:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6b9e:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6ba0:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6ba2:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6ba4:	f013 0f01 	tst.w	r3, #1
    6ba8:	d109      	bne.n	6bbe <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6baa:	f013 0f04 	tst.w	r3, #4
    6bae:	d109      	bne.n	6bc4 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6bb0:	f013 0f02 	tst.w	r3, #2
    6bb4:	d109      	bne.n	6bca <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6bb6:	f013 0f80 	tst.w	r3, #128	; 0x80
    6bba:	d10b      	bne.n	6bd4 <_spi_handler+0x3a>
    6bbc:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    6bbe:	6883      	ldr	r3, [r0, #8]
    6bc0:	4798      	blx	r3
    6bc2:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    6bc4:	68c3      	ldr	r3, [r0, #12]
    6bc6:	4798      	blx	r3
    6bc8:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6bca:	2302      	movs	r3, #2
    6bcc:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    6bce:	6903      	ldr	r3, [r0, #16]
    6bd0:	4798      	blx	r3
    6bd2:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6bd4:	2304      	movs	r3, #4
    6bd6:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6bd8:	2380      	movs	r3, #128	; 0x80
    6bda:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6bdc:	6943      	ldr	r3, [r0, #20]
    6bde:	f06f 0112 	mvn.w	r1, #18
    6be2:	4798      	blx	r3
	}
}
    6be4:	e7ea      	b.n	6bbc <_spi_handler+0x22>
	...

00006be8 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    6be8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6bea:	4b03      	ldr	r3, [pc, #12]	; (6bf8 <_spi_get_tx_dma_channel+0x10>)
    6bec:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    6bee:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6bf0:	bf0c      	ite	eq
    6bf2:	2008      	moveq	r0, #8
    6bf4:	2000      	movne	r0, #0
    6bf6:	bd08      	pop	{r3, pc}
    6bf8:	000069dd 	.word	0x000069dd

00006bfc <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6bfc:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6bfe:	4b03      	ldr	r3, [pc, #12]	; (6c0c <_spi_get_rx_dma_channel+0x10>)
    6c00:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6c02:	2807      	cmp	r0, #7
    6c04:	bf8c      	ite	hi
    6c06:	2000      	movhi	r0, #0
    6c08:	2001      	movls	r0, #1
    6c0a:	bd08      	pop	{r3, pc}
    6c0c:	000069dd 	.word	0x000069dd

00006c10 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    6c10:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    6c12:	6883      	ldr	r3, [r0, #8]
    6c14:	689b      	ldr	r3, [r3, #8]
    6c16:	b103      	cbz	r3, 6c1a <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    6c18:	4798      	blx	r3
    6c1a:	bd08      	pop	{r3, pc}

00006c1c <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6c1c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    6c1e:	6883      	ldr	r3, [r0, #8]
    6c20:	685b      	ldr	r3, [r3, #4]
    6c22:	b103      	cbz	r3, 6c26 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6c24:	4798      	blx	r3
    6c26:	bd08      	pop	{r3, pc}

00006c28 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    6c28:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    6c2a:	6883      	ldr	r3, [r0, #8]
    6c2c:	68db      	ldr	r3, [r3, #12]
    6c2e:	b103      	cbz	r3, 6c32 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    6c30:	4798      	blx	r3
    6c32:	bd08      	pop	{r3, pc}

00006c34 <_usart_init>:
{
    6c34:	b510      	push	{r4, lr}
    6c36:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6c38:	4b48      	ldr	r3, [pc, #288]	; (6d5c <_usart_init+0x128>)
    6c3a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6c3c:	2800      	cmp	r0, #0
    6c3e:	d06a      	beq.n	6d16 <_usart_init+0xe2>
    6c40:	2801      	cmp	r0, #1
    6c42:	d062      	beq.n	6d0a <_usart_init+0xd6>
    6c44:	2802      	cmp	r0, #2
    6c46:	d062      	beq.n	6d0e <_usart_init+0xda>
    6c48:	2804      	cmp	r0, #4
    6c4a:	d062      	beq.n	6d12 <_usart_init+0xde>
    6c4c:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6c4e:	bf08      	it	eq
    6c50:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    6c52:	d006      	beq.n	6c62 <_usart_init+0x2e>
	ASSERT(false);
    6c54:	f240 2276 	movw	r2, #630	; 0x276
    6c58:	4941      	ldr	r1, [pc, #260]	; (6d60 <_usart_init+0x12c>)
    6c5a:	2000      	movs	r0, #0
    6c5c:	4b41      	ldr	r3, [pc, #260]	; (6d64 <_usart_init+0x130>)
    6c5e:	4798      	blx	r3
	return 0;
    6c60:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    6c62:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    6c64:	f013 0f01 	tst.w	r3, #1
    6c68:	d122      	bne.n	6cb0 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    6c6a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    6c6e:	4a3e      	ldr	r2, [pc, #248]	; (6d68 <_usart_init+0x134>)
    6c70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6c76:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6c7a:	69e3      	ldr	r3, [r4, #28]
    6c7c:	f013 0f03 	tst.w	r3, #3
    6c80:	d1fb      	bne.n	6c7a <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    6c82:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    6c84:	f013 0f02 	tst.w	r3, #2
    6c88:	d00b      	beq.n	6ca2 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6c8a:	6823      	ldr	r3, [r4, #0]
    6c8c:	f023 0302 	bic.w	r3, r3, #2
    6c90:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6c92:	69e3      	ldr	r3, [r4, #28]
    6c94:	f013 0f03 	tst.w	r3, #3
    6c98:	d1fb      	bne.n	6c92 <_usart_init+0x5e>
    6c9a:	69e3      	ldr	r3, [r4, #28]
    6c9c:	f013 0f02 	tst.w	r3, #2
    6ca0:	d1fb      	bne.n	6c9a <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    6ca2:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6ca6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6ca8:	69e3      	ldr	r3, [r4, #28]
    6caa:	f013 0f03 	tst.w	r3, #3
    6cae:	d1fb      	bne.n	6ca8 <_usart_init+0x74>
    6cb0:	69e3      	ldr	r3, [r4, #28]
    6cb2:	f013 0f01 	tst.w	r3, #1
    6cb6:	d1fb      	bne.n	6cb0 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    6cb8:	460a      	mov	r2, r1
    6cba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6cbe:	4b2a      	ldr	r3, [pc, #168]	; (6d68 <_usart_init+0x134>)
    6cc0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6cc4:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6cc6:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6cc8:	69e3      	ldr	r3, [r4, #28]
    6cca:	f013 0f03 	tst.w	r3, #3
    6cce:	d1fb      	bne.n	6cc8 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    6cd0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6cd4:	4924      	ldr	r1, [pc, #144]	; (6d68 <_usart_init+0x134>)
    6cd6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6cdc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6cde:	69e3      	ldr	r3, [r4, #28]
    6ce0:	f013 0f1f 	tst.w	r3, #31
    6ce4:	d1fb      	bne.n	6cde <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    6ce6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6cea:	491f      	ldr	r1, [pc, #124]	; (6d68 <_usart_init+0x134>)
    6cec:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    6cf2:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6cf4:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    6cf8:	d10f      	bne.n	6d1a <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    6cfa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6cfe:	491a      	ldr	r1, [pc, #104]	; (6d68 <_usart_init+0x134>)
    6d00:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6d04:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    6d06:	81a3      	strh	r3, [r4, #12]
    6d08:	e016      	b.n	6d38 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6d0a:	2101      	movs	r1, #1
    6d0c:	e7a9      	b.n	6c62 <_usart_init+0x2e>
    6d0e:	2102      	movs	r1, #2
    6d10:	e7a7      	b.n	6c62 <_usart_init+0x2e>
    6d12:	2103      	movs	r1, #3
    6d14:	e7a5      	b.n	6c62 <_usart_init+0x2e>
    6d16:	2100      	movs	r1, #0
    6d18:	e7a3      	b.n	6c62 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    6d1a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6d1e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6d22:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6d24:	89a1      	ldrh	r1, [r4, #12]
    6d26:	f360 010c 	bfi	r1, r0, #0, #13
    6d2a:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6d2c:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    6d30:	89a3      	ldrh	r3, [r4, #12]
    6d32:	f361 334f 	bfi	r3, r1, #13, #3
    6d36:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    6d38:	4b0b      	ldr	r3, [pc, #44]	; (6d68 <_usart_init+0x134>)
    6d3a:	0051      	lsls	r1, r2, #1
    6d3c:	1888      	adds	r0, r1, r2
    6d3e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6d42:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    6d46:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    6d48:	440a      	add	r2, r1
    6d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    6d52:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    6d56:	2000      	movs	r0, #0
    6d58:	bd10      	pop	{r4, pc}
    6d5a:	bf00      	nop
    6d5c:	000069dd 	.word	0x000069dd
    6d60:	0000dac0 	.word	0x0000dac0
    6d64:	00005b49 	.word	0x00005b49
    6d68:	0000d9ec 	.word	0x0000d9ec

00006d6c <_get_i2cm_index>:
{
    6d6c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6d6e:	4b07      	ldr	r3, [pc, #28]	; (6d8c <_get_i2cm_index+0x20>)
    6d70:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    6d72:	2805      	cmp	r0, #5
    6d74:	d008      	beq.n	6d88 <_get_i2cm_index+0x1c>
	ASSERT(false);
    6d76:	f240 32ed 	movw	r2, #1005	; 0x3ed
    6d7a:	4905      	ldr	r1, [pc, #20]	; (6d90 <_get_i2cm_index+0x24>)
    6d7c:	2000      	movs	r0, #0
    6d7e:	4b05      	ldr	r3, [pc, #20]	; (6d94 <_get_i2cm_index+0x28>)
    6d80:	4798      	blx	r3
	return -1;
    6d82:	f04f 30ff 	mov.w	r0, #4294967295
}
    6d86:	bd08      	pop	{r3, pc}
			return i;
    6d88:	2000      	movs	r0, #0
    6d8a:	bd08      	pop	{r3, pc}
    6d8c:	000069dd 	.word	0x000069dd
    6d90:	0000dac0 	.word	0x0000dac0
    6d94:	00005b49 	.word	0x00005b49

00006d98 <_i2c_m_sync_init_impl>:
{
    6d98:	b538      	push	{r3, r4, r5, lr}
    6d9a:	4605      	mov	r5, r0
    6d9c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    6d9e:	4608      	mov	r0, r1
    6da0:	4b34      	ldr	r3, [pc, #208]	; (6e74 <_i2c_m_sync_init_impl+0xdc>)
    6da2:	4798      	blx	r3
    6da4:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6da6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6da8:	f013 0f01 	tst.w	r3, #1
    6dac:	d123      	bne.n	6df6 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6dae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6db2:	4a31      	ldr	r2, [pc, #196]	; (6e78 <_i2c_m_sync_init_impl+0xe0>)
    6db4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6db8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6dbc:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6dc0:	69e3      	ldr	r3, [r4, #28]
    6dc2:	f013 0f03 	tst.w	r3, #3
    6dc6:	d1fb      	bne.n	6dc0 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6dc8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6dca:	f013 0f02 	tst.w	r3, #2
    6dce:	d00b      	beq.n	6de8 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6dd0:	6823      	ldr	r3, [r4, #0]
    6dd2:	f023 0302 	bic.w	r3, r3, #2
    6dd6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6dd8:	69e3      	ldr	r3, [r4, #28]
    6dda:	f013 0f03 	tst.w	r3, #3
    6dde:	d1fb      	bne.n	6dd8 <_i2c_m_sync_init_impl+0x40>
    6de0:	69e3      	ldr	r3, [r4, #28]
    6de2:	f013 0f02 	tst.w	r3, #2
    6de6:	d1fb      	bne.n	6de0 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6de8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6dec:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6dee:	69e3      	ldr	r3, [r4, #28]
    6df0:	f013 0f03 	tst.w	r3, #3
    6df4:	d1fb      	bne.n	6dee <_i2c_m_sync_init_impl+0x56>
    6df6:	69e3      	ldr	r3, [r4, #28]
    6df8:	f013 0f01 	tst.w	r3, #1
    6dfc:	d1fb      	bne.n	6df6 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6dfe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6e02:	4a1d      	ldr	r2, [pc, #116]	; (6e78 <_i2c_m_sync_init_impl+0xe0>)
    6e04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6e08:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6e0c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e0e:	69e3      	ldr	r3, [r4, #28]
    6e10:	f013 0f03 	tst.w	r3, #3
    6e14:	d1fb      	bne.n	6e0e <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6e16:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6e1a:	4917      	ldr	r1, [pc, #92]	; (6e78 <_i2c_m_sync_init_impl+0xe0>)
    6e1c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6e20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6e24:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e26:	69e3      	ldr	r3, [r4, #28]
    6e28:	f013 0f04 	tst.w	r3, #4
    6e2c:	d1fb      	bne.n	6e26 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6e2e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6e32:	4911      	ldr	r1, [pc, #68]	; (6e78 <_i2c_m_sync_init_impl+0xe0>)
    6e34:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6e3c:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6e3e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    6e42:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6e44:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6e46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6e4a:	2b01      	cmp	r3, #1
    6e4c:	bf94      	ite	ls
    6e4e:	2300      	movls	r3, #0
    6e50:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6e52:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6e56:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e58:	69e3      	ldr	r3, [r4, #28]
    6e5a:	f013 0f04 	tst.w	r3, #4
    6e5e:	d1fb      	bne.n	6e58 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    6e60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6e64:	4b04      	ldr	r3, [pc, #16]	; (6e78 <_i2c_m_sync_init_impl+0xe0>)
    6e66:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6e6a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    6e6e:	81eb      	strh	r3, [r5, #14]
}
    6e70:	2000      	movs	r0, #0
    6e72:	bd38      	pop	{r3, r4, r5, pc}
    6e74:	00006d6d 	.word	0x00006d6d
    6e78:	0000d9ec 	.word	0x0000d9ec

00006e7c <_sercom_i2c_m_irq_handler>:
{
    6e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e80:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    6e82:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6e84:	7e26      	ldrb	r6, [r4, #24]
    6e86:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    6e88:	f8df 8234 	ldr.w	r8, [pc, #564]	; 70c0 <_sercom_i2c_m_irq_handler+0x244>
    6e8c:	f240 425f 	movw	r2, #1119	; 0x45f
    6e90:	4641      	mov	r1, r8
    6e92:	3000      	adds	r0, #0
    6e94:	bf18      	it	ne
    6e96:	2001      	movne	r0, #1
    6e98:	4f88      	ldr	r7, [pc, #544]	; (70bc <_sercom_i2c_m_irq_handler+0x240>)
    6e9a:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    6e9c:	6928      	ldr	r0, [r5, #16]
    6e9e:	f44f 628c 	mov.w	r2, #1120	; 0x460
    6ea2:	4641      	mov	r1, r8
    6ea4:	3000      	adds	r0, #0
    6ea6:	bf18      	it	ne
    6ea8:	2001      	movne	r0, #1
    6eaa:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    6eac:	f016 0f80 	tst.w	r6, #128	; 0x80
    6eb0:	f040 80f4 	bne.w	709c <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6eb4:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6eb6:	69e3      	ldr	r3, [r4, #28]
    6eb8:	f013 0f04 	tst.w	r3, #4
    6ebc:	d1fb      	bne.n	6eb6 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6ebe:	8b63      	ldrh	r3, [r4, #26]
    6ec0:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    6ec2:	f016 0f01 	tst.w	r6, #1
    6ec6:	f000 8090 	beq.w	6fea <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6eca:	f013 0f02 	tst.w	r3, #2
    6ece:	d022      	beq.n	6f16 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6ed0:	2201      	movs	r2, #1
    6ed2:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6ed4:	886a      	ldrh	r2, [r5, #2]
    6ed6:	b292      	uxth	r2, r2
    6ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6edc:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    6ede:	886a      	ldrh	r2, [r5, #2]
    6ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6ee4:	0412      	lsls	r2, r2, #16
    6ee6:	0c12      	lsrs	r2, r2, #16
    6ee8:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6eea:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    6eee:	2b00      	cmp	r3, #0
    6ef0:	bf14      	ite	ne
    6ef2:	f06f 0104 	mvnne.w	r1, #4
    6ef6:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6efa:	886b      	ldrh	r3, [r5, #2]
    6efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f00:	041b      	lsls	r3, r3, #16
    6f02:	0c1b      	lsrs	r3, r3, #16
    6f04:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6f06:	696b      	ldr	r3, [r5, #20]
    6f08:	2b00      	cmp	r3, #0
    6f0a:	f000 80c5 	beq.w	7098 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    6f0e:	4628      	mov	r0, r5
    6f10:	4798      	blx	r3
    6f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6f16:	f013 0f04 	tst.w	r3, #4
    6f1a:	d124      	bne.n	6f66 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6f1c:	886b      	ldrh	r3, [r5, #2]
    6f1e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6f22:	d03e      	beq.n	6fa2 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6f24:	882b      	ldrh	r3, [r5, #0]
    6f26:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6f28:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f2c:	69e3      	ldr	r3, [r4, #28]
    6f2e:	f013 0f04 	tst.w	r3, #4
    6f32:	d1fb      	bne.n	6f2c <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    6f3a:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6f3e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6f40:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f42:	69e3      	ldr	r3, [r4, #28]
    6f44:	f013 0f04 	tst.w	r3, #4
    6f48:	d1fb      	bne.n	6f42 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    6f4a:	886b      	ldrh	r3, [r5, #2]
    6f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6f50:	041b      	lsls	r3, r3, #16
    6f52:	0c1b      	lsrs	r3, r3, #16
    6f54:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6f56:	69ab      	ldr	r3, [r5, #24]
    6f58:	2b00      	cmp	r3, #0
    6f5a:	f000 8088 	beq.w	706e <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    6f5e:	4628      	mov	r0, r5
    6f60:	4798      	blx	r3
    6f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    6f66:	686b      	ldr	r3, [r5, #4]
    6f68:	2b00      	cmp	r3, #0
    6f6a:	dd04      	ble.n	6f76 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    6f6c:	886b      	ldrh	r3, [r5, #2]
    6f6e:	b29b      	uxth	r3, r3
    6f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6f74:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    6f76:	886b      	ldrh	r3, [r5, #2]
    6f78:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6f7c:	d108      	bne.n	6f90 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    6f7e:	886b      	ldrh	r3, [r5, #2]
    6f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f84:	041b      	lsls	r3, r3, #16
    6f86:	0c1b      	lsrs	r3, r3, #16
    6f88:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    6f8a:	f06f 0101 	mvn.w	r1, #1
    6f8e:	e7b4      	b.n	6efa <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6f90:	6863      	ldr	r3, [r4, #4]
    6f92:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6f96:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f98:	69e3      	ldr	r3, [r4, #28]
    6f9a:	f013 0f04 	tst.w	r3, #4
    6f9e:	d1fb      	bne.n	6f98 <_sercom_i2c_m_irq_handler+0x11c>
    6fa0:	e7ed      	b.n	6f7e <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    6fa2:	686b      	ldr	r3, [r5, #4]
    6fa4:	b99b      	cbnz	r3, 6fce <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    6fa6:	886b      	ldrh	r3, [r5, #2]
    6fa8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6fac:	d106      	bne.n	6fbc <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    6fae:	886b      	ldrh	r3, [r5, #2]
    6fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6fb4:	041b      	lsls	r3, r3, #16
    6fb6:	0c1b      	lsrs	r3, r3, #16
    6fb8:	806b      	strh	r3, [r5, #2]
    6fba:	e7cc      	b.n	6f56 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6fbc:	6863      	ldr	r3, [r4, #4]
    6fbe:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6fc2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6fc4:	69e3      	ldr	r3, [r4, #28]
    6fc6:	f013 0f04 	tst.w	r3, #4
    6fca:	d1fb      	bne.n	6fc4 <_sercom_i2c_m_irq_handler+0x148>
    6fcc:	e7ef      	b.n	6fae <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6fce:	68ab      	ldr	r3, [r5, #8]
    6fd0:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6fd2:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6fd4:	69e3      	ldr	r3, [r4, #28]
    6fd6:	f013 0f04 	tst.w	r3, #4
    6fda:	d1fb      	bne.n	6fd4 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6fdc:	68ab      	ldr	r3, [r5, #8]
    6fde:	3301      	adds	r3, #1
    6fe0:	60ab      	str	r3, [r5, #8]
				msg->len--;
    6fe2:	686b      	ldr	r3, [r5, #4]
    6fe4:	3b01      	subs	r3, #1
    6fe6:	606b      	str	r3, [r5, #4]
    6fe8:	e7b5      	b.n	6f56 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    6fea:	f016 0f02 	tst.w	r6, #2
    6fee:	d041      	beq.n	7074 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6ff0:	686a      	ldr	r2, [r5, #4]
    6ff2:	2a00      	cmp	r2, #0
    6ff4:	d036      	beq.n	7064 <_sercom_i2c_m_irq_handler+0x1e8>
    6ff6:	f013 0f04 	tst.w	r3, #4
    6ffa:	d133      	bne.n	7064 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6ffc:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    7000:	3a01      	subs	r2, #1
    7002:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7004:	2a00      	cmp	r2, #0
    7006:	d137      	bne.n	7078 <_sercom_i2c_m_irq_handler+0x1fc>
    7008:	2900      	cmp	r1, #0
    700a:	d039      	beq.n	7080 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    700c:	886b      	ldrh	r3, [r5, #2]
    700e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    7012:	d116      	bne.n	7042 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    7014:	886b      	ldrh	r3, [r5, #2]
    7016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    701a:	041b      	lsls	r3, r3, #16
    701c:	0c1b      	lsrs	r3, r3, #16
    701e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7020:	68aa      	ldr	r2, [r5, #8]
    7022:	1c53      	adds	r3, r2, #1
    7024:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7026:	69e3      	ldr	r3, [r4, #28]
    7028:	f013 0f04 	tst.w	r3, #4
    702c:	d1fb      	bne.n	7026 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    702e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7030:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7032:	2302      	movs	r3, #2
    7034:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    7036:	69eb      	ldr	r3, [r5, #28]
    7038:	b1e3      	cbz	r3, 7074 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    703a:	4628      	mov	r0, r5
    703c:	4798      	blx	r3
    703e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7042:	6863      	ldr	r3, [r4, #4]
    7044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7048:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    704a:	69e3      	ldr	r3, [r4, #28]
    704c:	f013 0f04 	tst.w	r3, #4
    7050:	d1fb      	bne.n	704a <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7052:	6863      	ldr	r3, [r4, #4]
    7054:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    7058:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    705a:	69e3      	ldr	r3, [r4, #28]
    705c:	f013 0f04 	tst.w	r3, #4
    7060:	d1fb      	bne.n	705a <_sercom_i2c_m_irq_handler+0x1de>
    7062:	e7d7      	b.n	7014 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7064:	2302      	movs	r3, #2
    7066:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    7068:	f06f 0101 	mvn.w	r1, #1
    706c:	e745      	b.n	6efa <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    706e:	f016 0f02 	tst.w	r6, #2
    7072:	d1e0      	bne.n	7036 <_sercom_i2c_m_irq_handler+0x1ba>
    7074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7078:	2a01      	cmp	r2, #1
    707a:	d1d1      	bne.n	7020 <_sercom_i2c_m_irq_handler+0x1a4>
    707c:	2900      	cmp	r1, #0
    707e:	d0cf      	beq.n	7020 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7080:	6863      	ldr	r3, [r4, #4]
    7082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    7086:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7088:	69e3      	ldr	r3, [r4, #28]
    708a:	f013 0f04 	tst.w	r3, #4
    708e:	d1fb      	bne.n	7088 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    7090:	686b      	ldr	r3, [r5, #4]
    7092:	2b00      	cmp	r3, #0
    7094:	d0ba      	beq.n	700c <_sercom_i2c_m_irq_handler+0x190>
    7096:	e7c3      	b.n	7020 <_sercom_i2c_m_irq_handler+0x1a4>
    7098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    709c:	886b      	ldrh	r3, [r5, #2]
    709e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    70a2:	041b      	lsls	r3, r3, #16
    70a4:	0c1b      	lsrs	r3, r3, #16
    70a6:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    70a8:	696b      	ldr	r3, [r5, #20]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d0e2      	beq.n	7074 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    70ae:	f06f 0104 	mvn.w	r1, #4
    70b2:	4628      	mov	r0, r5
    70b4:	4798      	blx	r3
    70b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70ba:	bf00      	nop
    70bc:	00005b49 	.word	0x00005b49
    70c0:	0000dac0 	.word	0x0000dac0

000070c4 <_usart_set_parity>:
{
    70c4:	b570      	push	{r4, r5, r6, lr}
    70c6:	b082      	sub	sp, #8
    70c8:	4604      	mov	r4, r0
    70ca:	460e      	mov	r6, r1
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    70cc:	69e3      	ldr	r3, [r4, #28]
    70ce:	f013 0f03 	tst.w	r3, #3
    70d2:	d1fb      	bne.n	70cc <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    70d4:	6825      	ldr	r5, [r4, #0]
	return (bool)tmp;
    70d6:	f3c5 0540 	ubfx	r5, r5, #1, #1
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    70da:	6823      	ldr	r3, [r4, #0]
    70dc:	f023 0302 	bic.w	r3, r3, #2
    70e0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    70e2:	69e3      	ldr	r3, [r4, #28]
    70e4:	f013 0f03 	tst.w	r3, #3
    70e8:	d1fb      	bne.n	70e2 <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    70ea:	a801      	add	r0, sp, #4
    70ec:	4b1a      	ldr	r3, [pc, #104]	; (7158 <_usart_set_parity+0x94>)
    70ee:	4798      	blx	r3
    70f0:	69e3      	ldr	r3, [r4, #28]
    70f2:	f013 0f02 	tst.w	r3, #2
    70f6:	d1fb      	bne.n	70f0 <_usart_set_parity+0x2c>
	if (USART_PARITY_NONE != parity) {
    70f8:	2e02      	cmp	r6, #2
    70fa:	d023      	beq.n	7144 <_usart_set_parity+0x80>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    70fc:	6823      	ldr	r3, [r4, #0]
    70fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    7102:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7104:	69e3      	ldr	r3, [r4, #28]
    7106:	f013 0f1f 	tst.w	r3, #31
    710a:	d1fb      	bne.n	7104 <_usart_set_parity+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    710c:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    710e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    7112:	3600      	adds	r6, #0
    7114:	bf18      	it	ne
    7116:	2601      	movne	r6, #1
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    7118:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    711c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    711e:	69e3      	ldr	r3, [r4, #28]
    7120:	f013 0f1f 	tst.w	r3, #31
    7124:	d1fb      	bne.n	711e <_usart_set_parity+0x5a>
	CRITICAL_SECTION_LEAVE()
    7126:	a801      	add	r0, sp, #4
    7128:	4b0c      	ldr	r3, [pc, #48]	; (715c <_usart_set_parity+0x98>)
    712a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    712c:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    712e:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    7132:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    7136:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7138:	69e3      	ldr	r3, [r4, #28]
    713a:	f013 0f03 	tst.w	r3, #3
    713e:	d1fb      	bne.n	7138 <_usart_set_parity+0x74>
}
    7140:	b002      	add	sp, #8
    7142:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    7144:	6823      	ldr	r3, [r4, #0]
    7146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    714a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    714c:	69e3      	ldr	r3, [r4, #28]
    714e:	f013 0f1f 	tst.w	r3, #31
    7152:	d1fb      	bne.n	714c <_usart_set_parity+0x88>
    7154:	e7da      	b.n	710c <_usart_set_parity+0x48>
    7156:	bf00      	nop
    7158:	00004755 	.word	0x00004755
    715c:	00004763 	.word	0x00004763

00007160 <_usart_sync_init>:
{
    7160:	b538      	push	{r3, r4, r5, lr}
    7162:	460c      	mov	r4, r1
	ASSERT(device);
    7164:	4605      	mov	r5, r0
    7166:	22c8      	movs	r2, #200	; 0xc8
    7168:	4905      	ldr	r1, [pc, #20]	; (7180 <_usart_sync_init+0x20>)
    716a:	3000      	adds	r0, #0
    716c:	bf18      	it	ne
    716e:	2001      	movne	r0, #1
    7170:	4b04      	ldr	r3, [pc, #16]	; (7184 <_usart_sync_init+0x24>)
    7172:	4798      	blx	r3
	device->hw = hw;
    7174:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    7176:	4620      	mov	r0, r4
    7178:	4b03      	ldr	r3, [pc, #12]	; (7188 <_usart_sync_init+0x28>)
    717a:	4798      	blx	r3
}
    717c:	bd38      	pop	{r3, r4, r5, pc}
    717e:	bf00      	nop
    7180:	0000dac0 	.word	0x0000dac0
    7184:	00005b49 	.word	0x00005b49
    7188:	00006c35 	.word	0x00006c35

0000718c <_usart_async_init>:
{
    718c:	b570      	push	{r4, r5, r6, lr}
    718e:	460d      	mov	r5, r1
	ASSERT(device);
    7190:	4606      	mov	r6, r0
    7192:	22d6      	movs	r2, #214	; 0xd6
    7194:	4917      	ldr	r1, [pc, #92]	; (71f4 <_usart_async_init+0x68>)
    7196:	3000      	adds	r0, #0
    7198:	bf18      	it	ne
    719a:	2001      	movne	r0, #1
    719c:	4b16      	ldr	r3, [pc, #88]	; (71f8 <_usart_async_init+0x6c>)
    719e:	4798      	blx	r3
	init_status = _usart_init(hw);
    71a0:	4628      	mov	r0, r5
    71a2:	4b16      	ldr	r3, [pc, #88]	; (71fc <_usart_async_init+0x70>)
    71a4:	4798      	blx	r3
	if (init_status) {
    71a6:	4604      	mov	r4, r0
    71a8:	b108      	cbz	r0, 71ae <_usart_async_init+0x22>
}
    71aa:	4620      	mov	r0, r4
    71ac:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    71ae:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    71b0:	4631      	mov	r1, r6
    71b2:	4628      	mov	r0, r5
    71b4:	4b12      	ldr	r3, [pc, #72]	; (7200 <_usart_async_init+0x74>)
    71b6:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    71b8:	4628      	mov	r0, r5
    71ba:	4b12      	ldr	r3, [pc, #72]	; (7204 <_usart_async_init+0x78>)
    71bc:	4798      	blx	r3
    71be:	1d01      	adds	r1, r0, #4
    71c0:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71c2:	2501      	movs	r5, #1
    71c4:	f000 021f 	and.w	r2, r0, #31
    71c8:	fa05 f202 	lsl.w	r2, r5, r2
    71cc:	0943      	lsrs	r3, r0, #5
    71ce:	009b      	lsls	r3, r3, #2
    71d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    71d4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    71d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    71dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    71e0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71e8:	601a      	str	r2, [r3, #0]
		irq++;
    71ea:	3001      	adds	r0, #1
    71ec:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    71ee:	4281      	cmp	r1, r0
    71f0:	d1e8      	bne.n	71c4 <_usart_async_init+0x38>
    71f2:	e7da      	b.n	71aa <_usart_async_init+0x1e>
    71f4:	0000dac0 	.word	0x0000dac0
    71f8:	00005b49 	.word	0x00005b49
    71fc:	00006c35 	.word	0x00006c35
    7200:	00006a91 	.word	0x00006a91
    7204:	00006af1 	.word	0x00006af1

00007208 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    7208:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    720a:	6813      	ldr	r3, [r2, #0]
    720c:	f043 0302 	orr.w	r3, r3, #2
    7210:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7212:	69d3      	ldr	r3, [r2, #28]
    7214:	f013 0f03 	tst.w	r3, #3
    7218:	d1fb      	bne.n	7212 <_usart_sync_enable+0xa>
}
    721a:	4770      	bx	lr

0000721c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    721c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    721e:	6813      	ldr	r3, [r2, #0]
    7220:	f043 0302 	orr.w	r3, r3, #2
    7224:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7226:	69d3      	ldr	r3, [r2, #28]
    7228:	f013 0f03 	tst.w	r3, #3
    722c:	d1fb      	bne.n	7226 <_usart_async_enable+0xa>
}
    722e:	4770      	bx	lr

00007230 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    7230:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7232:	6813      	ldr	r3, [r2, #0]
    7234:	f023 0302 	bic.w	r3, r3, #2
    7238:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    723a:	69d3      	ldr	r3, [r2, #28]
    723c:	f013 0f03 	tst.w	r3, #3
    7240:	d1fb      	bne.n	723a <_usart_async_disable+0xa>
}
    7242:	4770      	bx	lr

00007244 <_usart_async_set_parity>:
{
    7244:	b508      	push	{r3, lr}
	_usart_set_parity(device->hw, parity);
    7246:	6980      	ldr	r0, [r0, #24]
    7248:	4b01      	ldr	r3, [pc, #4]	; (7250 <_usart_async_set_parity+0xc>)
    724a:	4798      	blx	r3
    724c:	bd08      	pop	{r3, pc}
    724e:	bf00      	nop
    7250:	000070c5 	.word	0x000070c5

00007254 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7254:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    7256:	6299      	str	r1, [r3, #40]	; 0x28
    7258:	4770      	bx	lr

0000725a <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    725a:	6983      	ldr	r3, [r0, #24]
    725c:	6299      	str	r1, [r3, #40]	; 0x28
    725e:	4770      	bx	lr

00007260 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    7260:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    7262:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7264:	b2c0      	uxtb	r0, r0
    7266:	4770      	bx	lr

00007268 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    7268:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    726a:	7e18      	ldrb	r0, [r3, #24]
}
    726c:	f000 0001 	and.w	r0, r0, #1
    7270:	4770      	bx	lr

00007272 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    7272:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7274:	7e18      	ldrb	r0, [r3, #24]
}
    7276:	f3c0 0040 	ubfx	r0, r0, #1, #1
    727a:	4770      	bx	lr

0000727c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    727c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    727e:	7e18      	ldrb	r0, [r3, #24]
}
    7280:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7284:	4770      	bx	lr

00007286 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    7286:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    7288:	2201      	movs	r2, #1
    728a:	759a      	strb	r2, [r3, #22]
    728c:	4770      	bx	lr

0000728e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    728e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    7290:	2202      	movs	r2, #2
    7292:	759a      	strb	r2, [r3, #22]
    7294:	4770      	bx	lr
	...

00007298 <_usart_async_set_irq_state>:
{
    7298:	b570      	push	{r4, r5, r6, lr}
    729a:	460c      	mov	r4, r1
    729c:	4616      	mov	r6, r2
	ASSERT(device);
    729e:	4605      	mov	r5, r0
    72a0:	f240 2236 	movw	r2, #566	; 0x236
    72a4:	4915      	ldr	r1, [pc, #84]	; (72fc <_usart_async_set_irq_state+0x64>)
    72a6:	3000      	adds	r0, #0
    72a8:	bf18      	it	ne
    72aa:	2001      	movne	r0, #1
    72ac:	4b14      	ldr	r3, [pc, #80]	; (7300 <_usart_async_set_irq_state+0x68>)
    72ae:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    72b0:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    72b4:	d10d      	bne.n	72d2 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    72b6:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    72b8:	b92e      	cbnz	r6, 72c6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    72ba:	2201      	movs	r2, #1
    72bc:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    72be:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    72c0:	2202      	movs	r2, #2
    72c2:	751a      	strb	r2, [r3, #20]
    72c4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    72c6:	2201      	movs	r2, #1
    72c8:	759a      	strb	r2, [r3, #22]
    72ca:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    72cc:	2202      	movs	r2, #2
    72ce:	759a      	strb	r2, [r3, #22]
    72d0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    72d2:	2c01      	cmp	r4, #1
    72d4:	d002      	beq.n	72dc <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    72d6:	2c03      	cmp	r4, #3
    72d8:	d008      	beq.n	72ec <_usart_async_set_irq_state+0x54>
    72da:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    72dc:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    72de:	b916      	cbnz	r6, 72e6 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    72e0:	2204      	movs	r2, #4
    72e2:	751a      	strb	r2, [r3, #20]
    72e4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    72e6:	2204      	movs	r2, #4
    72e8:	759a      	strb	r2, [r3, #22]
    72ea:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    72ec:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    72ee:	b116      	cbz	r6, 72f6 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    72f0:	2280      	movs	r2, #128	; 0x80
    72f2:	759a      	strb	r2, [r3, #22]
}
    72f4:	e7f1      	b.n	72da <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    72f6:	2280      	movs	r2, #128	; 0x80
    72f8:	751a      	strb	r2, [r3, #20]
    72fa:	bd70      	pop	{r4, r5, r6, pc}
    72fc:	0000dac0 	.word	0x0000dac0
    7300:	00005b49 	.word	0x00005b49

00007304 <_i2c_m_async_init>:
{
    7304:	b570      	push	{r4, r5, r6, lr}
    7306:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    7308:	4606      	mov	r6, r0
    730a:	f240 42d2 	movw	r2, #1234	; 0x4d2
    730e:	4918      	ldr	r1, [pc, #96]	; (7370 <_i2c_m_async_init+0x6c>)
    7310:	3000      	adds	r0, #0
    7312:	bf18      	it	ne
    7314:	2001      	movne	r0, #1
    7316:	4b17      	ldr	r3, [pc, #92]	; (7374 <_i2c_m_async_init+0x70>)
    7318:	4798      	blx	r3
	i2c_dev->hw = hw;
    731a:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    731c:	4629      	mov	r1, r5
    731e:	4630      	mov	r0, r6
    7320:	4b15      	ldr	r3, [pc, #84]	; (7378 <_i2c_m_async_init+0x74>)
    7322:	4798      	blx	r3
	if (init_status) {
    7324:	4604      	mov	r4, r0
    7326:	b108      	cbz	r0, 732c <_i2c_m_async_init+0x28>
}
    7328:	4620      	mov	r0, r4
    732a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    732c:	4631      	mov	r1, r6
    732e:	4628      	mov	r0, r5
    7330:	4b12      	ldr	r3, [pc, #72]	; (737c <_i2c_m_async_init+0x78>)
    7332:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7334:	4628      	mov	r0, r5
    7336:	4b12      	ldr	r3, [pc, #72]	; (7380 <_i2c_m_async_init+0x7c>)
    7338:	4798      	blx	r3
    733a:	1d01      	adds	r1, r0, #4
    733c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    733e:	2501      	movs	r5, #1
    7340:	f000 021f 	and.w	r2, r0, #31
    7344:	fa05 f202 	lsl.w	r2, r5, r2
    7348:	0943      	lsrs	r3, r0, #5
    734a:	009b      	lsls	r3, r3, #2
    734c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7350:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7358:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    735c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7360:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7364:	601a      	str	r2, [r3, #0]
		irq++;
    7366:	3001      	adds	r0, #1
    7368:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    736a:	4281      	cmp	r1, r0
    736c:	d1e8      	bne.n	7340 <_i2c_m_async_init+0x3c>
    736e:	e7db      	b.n	7328 <_i2c_m_async_init+0x24>
    7370:	0000dac0 	.word	0x0000dac0
    7374:	00005b49 	.word	0x00005b49
    7378:	00006d99 	.word	0x00006d99
    737c:	00006a91 	.word	0x00006a91
    7380:	00006af1 	.word	0x00006af1

00007384 <_i2c_m_async_transfer>:
{
    7384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7388:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    738a:	4605      	mov	r5, r0
    738c:	f110 0800 	adds.w	r8, r0, #0
    7390:	bf18      	it	ne
    7392:	f04f 0801 	movne.w	r8, #1
    7396:	4f45      	ldr	r7, [pc, #276]	; (74ac <_i2c_m_async_transfer+0x128>)
    7398:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    739c:	4639      	mov	r1, r7
    739e:	4640      	mov	r0, r8
    73a0:	4e43      	ldr	r6, [pc, #268]	; (74b0 <_i2c_m_async_transfer+0x12c>)
    73a2:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    73a4:	6928      	ldr	r0, [r5, #16]
    73a6:	f240 5229 	movw	r2, #1321	; 0x529
    73aa:	4639      	mov	r1, r7
    73ac:	3000      	adds	r0, #0
    73ae:	bf18      	it	ne
    73b0:	2001      	movne	r0, #1
    73b2:	47b0      	blx	r6
	ASSERT(msg);
    73b4:	f240 522a 	movw	r2, #1322	; 0x52a
    73b8:	4639      	mov	r1, r7
    73ba:	1c20      	adds	r0, r4, #0
    73bc:	bf18      	it	ne
    73be:	2001      	movne	r0, #1
    73c0:	47b0      	blx	r6
	if (msg->len == 0) {
    73c2:	6860      	ldr	r0, [r4, #4]
    73c4:	2800      	cmp	r0, #0
    73c6:	d06f      	beq.n	74a8 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    73c8:	886b      	ldrh	r3, [r5, #2]
    73ca:	f413 7f80 	tst.w	r3, #256	; 0x100
    73ce:	d169      	bne.n	74a4 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    73d0:	8863      	ldrh	r3, [r4, #2]
    73d2:	b29b      	uxth	r3, r3
    73d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    73d8:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    73da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    73de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    73e2:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    73e4:	6853      	ldr	r3, [r2, #4]
    73e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    73ea:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    73ec:	69d3      	ldr	r3, [r2, #28]
    73ee:	f013 0f04 	tst.w	r3, #4
    73f2:	d1fb      	bne.n	73ec <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    73f4:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    73f6:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    73f8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    73fc:	492b      	ldr	r1, [pc, #172]	; (74ac <_i2c_m_async_transfer+0x128>)
    73fe:	4640      	mov	r0, r8
    7400:	4b2b      	ldr	r3, [pc, #172]	; (74b0 <_i2c_m_async_transfer+0x12c>)
    7402:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    7404:	686b      	ldr	r3, [r5, #4]
    7406:	2b01      	cmp	r3, #1
    7408:	d02a      	beq.n	7460 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    740a:	6863      	ldr	r3, [r4, #4]
    740c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    7410:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7412:	69e3      	ldr	r3, [r4, #28]
    7414:	f013 0f04 	tst.w	r3, #4
    7418:	d1fb      	bne.n	7412 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    741a:	882b      	ldrh	r3, [r5, #0]
    741c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7420:	d02a      	beq.n	7478 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    7422:	886a      	ldrh	r2, [r5, #2]
    7424:	f012 0f01 	tst.w	r2, #1
    7428:	d004      	beq.n	7434 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    742a:	886a      	ldrh	r2, [r5, #2]
    742c:	b292      	uxth	r2, r2
    742e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7432:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7434:	f240 72fe 	movw	r2, #2046	; 0x7fe
    7438:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    743c:	69e3      	ldr	r3, [r4, #28]
    743e:	f013 0f04 	tst.w	r3, #4
    7442:	d1fb      	bne.n	743c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7444:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    744a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    744e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7450:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7452:	69e3      	ldr	r3, [r4, #28]
    7454:	f013 0f04 	tst.w	r3, #4
    7458:	d1fb      	bne.n	7452 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    745a:	2000      	movs	r0, #0
    745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    7460:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    7464:	d0d1      	beq.n	740a <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7466:	6863      	ldr	r3, [r4, #4]
    7468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    746c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    746e:	69e3      	ldr	r3, [r4, #28]
    7470:	f013 0f04 	tst.w	r3, #4
    7474:	d1fb      	bne.n	746e <_i2c_m_async_transfer+0xea>
    7476:	e7d0      	b.n	741a <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7478:	8869      	ldrh	r1, [r5, #2]
    747a:	005a      	lsls	r2, r3, #1
    747c:	b2d2      	uxtb	r2, r2
    747e:	f001 0301 	and.w	r3, r1, #1
    7482:	431a      	orrs	r2, r3
    7484:	69e3      	ldr	r3, [r4, #28]
    7486:	f013 0f04 	tst.w	r3, #4
    748a:	d1fb      	bne.n	7484 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    748c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    748e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7492:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7494:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7496:	69e3      	ldr	r3, [r4, #28]
    7498:	f013 0f04 	tst.w	r3, #4
    749c:	d1fb      	bne.n	7496 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    749e:	2000      	movs	r0, #0
    74a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    74a4:	f06f 0003 	mvn.w	r0, #3
}
    74a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74ac:	0000dac0 	.word	0x0000dac0
    74b0:	00005b49 	.word	0x00005b49

000074b4 <_i2c_m_async_register_callback>:
	switch (type) {
    74b4:	2901      	cmp	r1, #1
    74b6:	d006      	beq.n	74c6 <_i2c_m_async_register_callback+0x12>
    74b8:	b119      	cbz	r1, 74c2 <_i2c_m_async_register_callback+0xe>
    74ba:	2902      	cmp	r1, #2
    74bc:	d005      	beq.n	74ca <_i2c_m_async_register_callback+0x16>
}
    74be:	2000      	movs	r0, #0
    74c0:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    74c2:	6142      	str	r2, [r0, #20]
		break;
    74c4:	e7fb      	b.n	74be <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    74c6:	6182      	str	r2, [r0, #24]
		break;
    74c8:	e7f9      	b.n	74be <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    74ca:	61c2      	str	r2, [r0, #28]
		break;
    74cc:	e7f7      	b.n	74be <_i2c_m_async_register_callback+0xa>
	...

000074d0 <SERCOM0_0_Handler>:
{
    74d0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    74d2:	4b02      	ldr	r3, [pc, #8]	; (74dc <SERCOM0_0_Handler+0xc>)
    74d4:	6818      	ldr	r0, [r3, #0]
    74d6:	4b02      	ldr	r3, [pc, #8]	; (74e0 <SERCOM0_0_Handler+0x10>)
    74d8:	4798      	blx	r3
    74da:	bd08      	pop	{r3, pc}
    74dc:	20000980 	.word	0x20000980
    74e0:	00006a21 	.word	0x00006a21

000074e4 <SERCOM0_1_Handler>:
{
    74e4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    74e6:	4b02      	ldr	r3, [pc, #8]	; (74f0 <SERCOM0_1_Handler+0xc>)
    74e8:	6818      	ldr	r0, [r3, #0]
    74ea:	4b02      	ldr	r3, [pc, #8]	; (74f4 <SERCOM0_1_Handler+0x10>)
    74ec:	4798      	blx	r3
    74ee:	bd08      	pop	{r3, pc}
    74f0:	20000980 	.word	0x20000980
    74f4:	00006a21 	.word	0x00006a21

000074f8 <SERCOM0_2_Handler>:
{
    74f8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    74fa:	4b02      	ldr	r3, [pc, #8]	; (7504 <SERCOM0_2_Handler+0xc>)
    74fc:	6818      	ldr	r0, [r3, #0]
    74fe:	4b02      	ldr	r3, [pc, #8]	; (7508 <SERCOM0_2_Handler+0x10>)
    7500:	4798      	blx	r3
    7502:	bd08      	pop	{r3, pc}
    7504:	20000980 	.word	0x20000980
    7508:	00006a21 	.word	0x00006a21

0000750c <SERCOM0_3_Handler>:
{
    750c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    750e:	4b02      	ldr	r3, [pc, #8]	; (7518 <SERCOM0_3_Handler+0xc>)
    7510:	6818      	ldr	r0, [r3, #0]
    7512:	4b02      	ldr	r3, [pc, #8]	; (751c <SERCOM0_3_Handler+0x10>)
    7514:	4798      	blx	r3
    7516:	bd08      	pop	{r3, pc}
    7518:	20000980 	.word	0x20000980
    751c:	00006a21 	.word	0x00006a21

00007520 <SERCOM1_0_Handler>:
{
    7520:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7522:	4b02      	ldr	r3, [pc, #8]	; (752c <SERCOM1_0_Handler+0xc>)
    7524:	6858      	ldr	r0, [r3, #4]
    7526:	4b02      	ldr	r3, [pc, #8]	; (7530 <SERCOM1_0_Handler+0x10>)
    7528:	4798      	blx	r3
    752a:	bd08      	pop	{r3, pc}
    752c:	20000980 	.word	0x20000980
    7530:	00006a21 	.word	0x00006a21

00007534 <SERCOM1_1_Handler>:
{
    7534:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7536:	4b02      	ldr	r3, [pc, #8]	; (7540 <SERCOM1_1_Handler+0xc>)
    7538:	6858      	ldr	r0, [r3, #4]
    753a:	4b02      	ldr	r3, [pc, #8]	; (7544 <SERCOM1_1_Handler+0x10>)
    753c:	4798      	blx	r3
    753e:	bd08      	pop	{r3, pc}
    7540:	20000980 	.word	0x20000980
    7544:	00006a21 	.word	0x00006a21

00007548 <SERCOM1_2_Handler>:
{
    7548:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    754a:	4b02      	ldr	r3, [pc, #8]	; (7554 <SERCOM1_2_Handler+0xc>)
    754c:	6858      	ldr	r0, [r3, #4]
    754e:	4b02      	ldr	r3, [pc, #8]	; (7558 <SERCOM1_2_Handler+0x10>)
    7550:	4798      	blx	r3
    7552:	bd08      	pop	{r3, pc}
    7554:	20000980 	.word	0x20000980
    7558:	00006a21 	.word	0x00006a21

0000755c <SERCOM1_3_Handler>:
{
    755c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    755e:	4b02      	ldr	r3, [pc, #8]	; (7568 <SERCOM1_3_Handler+0xc>)
    7560:	6858      	ldr	r0, [r3, #4]
    7562:	4b02      	ldr	r3, [pc, #8]	; (756c <SERCOM1_3_Handler+0x10>)
    7564:	4798      	blx	r3
    7566:	bd08      	pop	{r3, pc}
    7568:	20000980 	.word	0x20000980
    756c:	00006a21 	.word	0x00006a21

00007570 <SERCOM3_0_Handler>:
{
    7570:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7572:	4b02      	ldr	r3, [pc, #8]	; (757c <SERCOM3_0_Handler+0xc>)
    7574:	6898      	ldr	r0, [r3, #8]
    7576:	4b02      	ldr	r3, [pc, #8]	; (7580 <SERCOM3_0_Handler+0x10>)
    7578:	4798      	blx	r3
    757a:	bd08      	pop	{r3, pc}
    757c:	20000980 	.word	0x20000980
    7580:	00006b9b 	.word	0x00006b9b

00007584 <SERCOM3_1_Handler>:
{
    7584:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7586:	4b02      	ldr	r3, [pc, #8]	; (7590 <SERCOM3_1_Handler+0xc>)
    7588:	6898      	ldr	r0, [r3, #8]
    758a:	4b02      	ldr	r3, [pc, #8]	; (7594 <SERCOM3_1_Handler+0x10>)
    758c:	4798      	blx	r3
    758e:	bd08      	pop	{r3, pc}
    7590:	20000980 	.word	0x20000980
    7594:	00006b9b 	.word	0x00006b9b

00007598 <SERCOM3_2_Handler>:
{
    7598:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    759a:	4b02      	ldr	r3, [pc, #8]	; (75a4 <SERCOM3_2_Handler+0xc>)
    759c:	6898      	ldr	r0, [r3, #8]
    759e:	4b02      	ldr	r3, [pc, #8]	; (75a8 <SERCOM3_2_Handler+0x10>)
    75a0:	4798      	blx	r3
    75a2:	bd08      	pop	{r3, pc}
    75a4:	20000980 	.word	0x20000980
    75a8:	00006b9b 	.word	0x00006b9b

000075ac <SERCOM3_3_Handler>:
{
    75ac:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    75ae:	4b02      	ldr	r3, [pc, #8]	; (75b8 <SERCOM3_3_Handler+0xc>)
    75b0:	6898      	ldr	r0, [r3, #8]
    75b2:	4b02      	ldr	r3, [pc, #8]	; (75bc <SERCOM3_3_Handler+0x10>)
    75b4:	4798      	blx	r3
    75b6:	bd08      	pop	{r3, pc}
    75b8:	20000980 	.word	0x20000980
    75bc:	00006b9b 	.word	0x00006b9b

000075c0 <SERCOM4_0_Handler>:
{
    75c0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    75c2:	4b02      	ldr	r3, [pc, #8]	; (75cc <SERCOM4_0_Handler+0xc>)
    75c4:	68d8      	ldr	r0, [r3, #12]
    75c6:	4b02      	ldr	r3, [pc, #8]	; (75d0 <SERCOM4_0_Handler+0x10>)
    75c8:	4798      	blx	r3
    75ca:	bd08      	pop	{r3, pc}
    75cc:	20000980 	.word	0x20000980
    75d0:	00006a21 	.word	0x00006a21

000075d4 <SERCOM4_1_Handler>:
{
    75d4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    75d6:	4b02      	ldr	r3, [pc, #8]	; (75e0 <SERCOM4_1_Handler+0xc>)
    75d8:	68d8      	ldr	r0, [r3, #12]
    75da:	4b02      	ldr	r3, [pc, #8]	; (75e4 <SERCOM4_1_Handler+0x10>)
    75dc:	4798      	blx	r3
    75de:	bd08      	pop	{r3, pc}
    75e0:	20000980 	.word	0x20000980
    75e4:	00006a21 	.word	0x00006a21

000075e8 <SERCOM4_2_Handler>:
{
    75e8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    75ea:	4b02      	ldr	r3, [pc, #8]	; (75f4 <SERCOM4_2_Handler+0xc>)
    75ec:	68d8      	ldr	r0, [r3, #12]
    75ee:	4b02      	ldr	r3, [pc, #8]	; (75f8 <SERCOM4_2_Handler+0x10>)
    75f0:	4798      	blx	r3
    75f2:	bd08      	pop	{r3, pc}
    75f4:	20000980 	.word	0x20000980
    75f8:	00006a21 	.word	0x00006a21

000075fc <SERCOM4_3_Handler>:
{
    75fc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    75fe:	4b02      	ldr	r3, [pc, #8]	; (7608 <SERCOM4_3_Handler+0xc>)
    7600:	68d8      	ldr	r0, [r3, #12]
    7602:	4b02      	ldr	r3, [pc, #8]	; (760c <SERCOM4_3_Handler+0x10>)
    7604:	4798      	blx	r3
    7606:	bd08      	pop	{r3, pc}
    7608:	20000980 	.word	0x20000980
    760c:	00006a21 	.word	0x00006a21

00007610 <SERCOM5_0_Handler>:
{
    7610:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7612:	4b02      	ldr	r3, [pc, #8]	; (761c <SERCOM5_0_Handler+0xc>)
    7614:	6918      	ldr	r0, [r3, #16]
    7616:	4b02      	ldr	r3, [pc, #8]	; (7620 <SERCOM5_0_Handler+0x10>)
    7618:	4798      	blx	r3
    761a:	bd08      	pop	{r3, pc}
    761c:	20000980 	.word	0x20000980
    7620:	00006e7d 	.word	0x00006e7d

00007624 <SERCOM5_1_Handler>:
{
    7624:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7626:	4b02      	ldr	r3, [pc, #8]	; (7630 <SERCOM5_1_Handler+0xc>)
    7628:	6918      	ldr	r0, [r3, #16]
    762a:	4b02      	ldr	r3, [pc, #8]	; (7634 <SERCOM5_1_Handler+0x10>)
    762c:	4798      	blx	r3
    762e:	bd08      	pop	{r3, pc}
    7630:	20000980 	.word	0x20000980
    7634:	00006e7d 	.word	0x00006e7d

00007638 <SERCOM5_2_Handler>:
{
    7638:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    763a:	4b02      	ldr	r3, [pc, #8]	; (7644 <SERCOM5_2_Handler+0xc>)
    763c:	6918      	ldr	r0, [r3, #16]
    763e:	4b02      	ldr	r3, [pc, #8]	; (7648 <SERCOM5_2_Handler+0x10>)
    7640:	4798      	blx	r3
    7642:	bd08      	pop	{r3, pc}
    7644:	20000980 	.word	0x20000980
    7648:	00006e7d 	.word	0x00006e7d

0000764c <SERCOM5_3_Handler>:
{
    764c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    764e:	4b02      	ldr	r3, [pc, #8]	; (7658 <SERCOM5_3_Handler+0xc>)
    7650:	6918      	ldr	r0, [r3, #16]
    7652:	4b02      	ldr	r3, [pc, #8]	; (765c <SERCOM5_3_Handler+0x10>)
    7654:	4798      	blx	r3
    7656:	bd08      	pop	{r3, pc}
    7658:	20000980 	.word	0x20000980
    765c:	00006e7d 	.word	0x00006e7d

00007660 <SERCOM6_0_Handler>:
{
    7660:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7662:	4b02      	ldr	r3, [pc, #8]	; (766c <SERCOM6_0_Handler+0xc>)
    7664:	6958      	ldr	r0, [r3, #20]
    7666:	4b02      	ldr	r3, [pc, #8]	; (7670 <SERCOM6_0_Handler+0x10>)
    7668:	4798      	blx	r3
    766a:	bd08      	pop	{r3, pc}
    766c:	20000980 	.word	0x20000980
    7670:	00006a21 	.word	0x00006a21

00007674 <SERCOM6_1_Handler>:
{
    7674:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7676:	4b02      	ldr	r3, [pc, #8]	; (7680 <SERCOM6_1_Handler+0xc>)
    7678:	6958      	ldr	r0, [r3, #20]
    767a:	4b02      	ldr	r3, [pc, #8]	; (7684 <SERCOM6_1_Handler+0x10>)
    767c:	4798      	blx	r3
    767e:	bd08      	pop	{r3, pc}
    7680:	20000980 	.word	0x20000980
    7684:	00006a21 	.word	0x00006a21

00007688 <SERCOM6_2_Handler>:
{
    7688:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    768a:	4b02      	ldr	r3, [pc, #8]	; (7694 <SERCOM6_2_Handler+0xc>)
    768c:	6958      	ldr	r0, [r3, #20]
    768e:	4b02      	ldr	r3, [pc, #8]	; (7698 <SERCOM6_2_Handler+0x10>)
    7690:	4798      	blx	r3
    7692:	bd08      	pop	{r3, pc}
    7694:	20000980 	.word	0x20000980
    7698:	00006a21 	.word	0x00006a21

0000769c <SERCOM6_3_Handler>:
{
    769c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    769e:	4b02      	ldr	r3, [pc, #8]	; (76a8 <SERCOM6_3_Handler+0xc>)
    76a0:	6958      	ldr	r0, [r3, #20]
    76a2:	4b02      	ldr	r3, [pc, #8]	; (76ac <SERCOM6_3_Handler+0x10>)
    76a4:	4798      	blx	r3
    76a6:	bd08      	pop	{r3, pc}
    76a8:	20000980 	.word	0x20000980
    76ac:	00006a21 	.word	0x00006a21

000076b0 <_spi_m_sync_init>:
{
    76b0:	b570      	push	{r4, r5, r6, lr}
    76b2:	4606      	mov	r6, r0
    76b4:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    76b6:	4608      	mov	r0, r1
    76b8:	4b5d      	ldr	r3, [pc, #372]	; (7830 <_spi_m_sync_init+0x180>)
    76ba:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    76bc:	2803      	cmp	r0, #3
    76be:	d00c      	beq.n	76da <_spi_m_sync_init+0x2a>
    76c0:	2807      	cmp	r0, #7
    76c2:	bf08      	it	eq
    76c4:	2301      	moveq	r3, #1
    76c6:	d009      	beq.n	76dc <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    76c8:	2e00      	cmp	r6, #0
    76ca:	f000 809f 	beq.w	780c <_spi_m_sync_init+0x15c>
    76ce:	2c00      	cmp	r4, #0
    76d0:	f040 80a5 	bne.w	781e <_spi_m_sync_init+0x16e>
	return NULL;
    76d4:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    76d6:	2000      	movs	r0, #0
    76d8:	e009      	b.n	76ee <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    76da:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    76dc:	4d55      	ldr	r5, [pc, #340]	; (7834 <_spi_m_sync_init+0x184>)
    76de:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    76e2:	441d      	add	r5, r3
	ASSERT(dev && hw);
    76e4:	2e00      	cmp	r6, #0
    76e6:	d0f6      	beq.n	76d6 <_spi_m_sync_init+0x26>
    76e8:	2001      	movs	r0, #1
    76ea:	2c00      	cmp	r4, #0
    76ec:	d0f3      	beq.n	76d6 <_spi_m_sync_init+0x26>
    76ee:	f640 226e 	movw	r2, #2670	; 0xa6e
    76f2:	4951      	ldr	r1, [pc, #324]	; (7838 <_spi_m_sync_init+0x188>)
    76f4:	4b51      	ldr	r3, [pc, #324]	; (783c <_spi_m_sync_init+0x18c>)
    76f6:	4798      	blx	r3
	if (regs == NULL) {
    76f8:	2d00      	cmp	r5, #0
    76fa:	f000 8084 	beq.w	7806 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    76fe:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7700:	f013 0f01 	tst.w	r3, #1
    7704:	d11d      	bne.n	7742 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7706:	682b      	ldr	r3, [r5, #0]
    7708:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    770c:	69e3      	ldr	r3, [r4, #28]
    770e:	f013 0f03 	tst.w	r3, #3
    7712:	d1fb      	bne.n	770c <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7714:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7716:	f013 0f02 	tst.w	r3, #2
    771a:	d00b      	beq.n	7734 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    771c:	6823      	ldr	r3, [r4, #0]
    771e:	f023 0302 	bic.w	r3, r3, #2
    7722:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7724:	69e3      	ldr	r3, [r4, #28]
    7726:	f013 0f03 	tst.w	r3, #3
    772a:	d1fb      	bne.n	7724 <_spi_m_sync_init+0x74>
    772c:	69e3      	ldr	r3, [r4, #28]
    772e:	f013 0f02 	tst.w	r3, #2
    7732:	d1fb      	bne.n	772c <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7734:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7738:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    773a:	69e3      	ldr	r3, [r4, #28]
    773c:	f013 0f03 	tst.w	r3, #3
    7740:	d1fb      	bne.n	773a <_spi_m_sync_init+0x8a>
    7742:	69e3      	ldr	r3, [r4, #28]
    7744:	f013 0f01 	tst.w	r3, #1
    7748:	d1fb      	bne.n	7742 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    774a:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    774c:	682b      	ldr	r3, [r5, #0]
    774e:	f003 031c 	and.w	r3, r3, #28
    7752:	2b08      	cmp	r3, #8
    7754:	d02e      	beq.n	77b4 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    7756:	f44f 6217 	mov.w	r2, #2416	; 0x970
    775a:	4937      	ldr	r1, [pc, #220]	; (7838 <_spi_m_sync_init+0x188>)
    775c:	1c20      	adds	r0, r4, #0
    775e:	bf18      	it	ne
    7760:	2001      	movne	r0, #1
    7762:	4b36      	ldr	r3, [pc, #216]	; (783c <_spi_m_sync_init+0x18c>)
    7764:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7766:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7768:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    776c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7770:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7772:	69e3      	ldr	r3, [r4, #28]
    7774:	f013 0f03 	tst.w	r3, #3
    7778:	d1fb      	bne.n	7772 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    777a:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    777c:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7780:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7788:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    778a:	69e3      	ldr	r3, [r4, #28]
    778c:	f013 0f17 	tst.w	r3, #23
    7790:	d1fb      	bne.n	778a <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7792:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7794:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7796:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7798:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    779c:	686b      	ldr	r3, [r5, #4]
    779e:	f003 0307 	and.w	r3, r3, #7
    77a2:	2b00      	cmp	r3, #0
    77a4:	bf0c      	ite	eq
    77a6:	2301      	moveq	r3, #1
    77a8:	2302      	movne	r3, #2
    77aa:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    77ac:	89eb      	ldrh	r3, [r5, #14]
    77ae:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    77b0:	2000      	movs	r0, #0
    77b2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    77b4:	f640 1284 	movw	r2, #2436	; 0x984
    77b8:	491f      	ldr	r1, [pc, #124]	; (7838 <_spi_m_sync_init+0x188>)
    77ba:	1c20      	adds	r0, r4, #0
    77bc:	bf18      	it	ne
    77be:	2001      	movne	r0, #1
    77c0:	4b1e      	ldr	r3, [pc, #120]	; (783c <_spi_m_sync_init+0x18c>)
    77c2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    77c4:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    77c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    77ca:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    77ce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    77d0:	69e3      	ldr	r3, [r4, #28]
    77d2:	f013 0f03 	tst.w	r3, #3
    77d6:	d1fb      	bne.n	77d0 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    77d8:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    77da:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    77de:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    77e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    77e6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    77ea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    77ec:	69e3      	ldr	r3, [r4, #28]
    77ee:	f013 0f17 	tst.w	r3, #23
    77f2:	d1fb      	bne.n	77ec <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    77f4:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    77f6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    77f8:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    77fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    77fe:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7800:	2b00      	cmp	r3, #0
    7802:	d1fc      	bne.n	77fe <_spi_m_sync_init+0x14e>
    7804:	e7ca      	b.n	779c <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    7806:	f06f 000c 	mvn.w	r0, #12
    780a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    780c:	f640 226e 	movw	r2, #2670	; 0xa6e
    7810:	4909      	ldr	r1, [pc, #36]	; (7838 <_spi_m_sync_init+0x188>)
    7812:	2000      	movs	r0, #0
    7814:	4b09      	ldr	r3, [pc, #36]	; (783c <_spi_m_sync_init+0x18c>)
    7816:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7818:	f06f 000c 	mvn.w	r0, #12
    781c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    781e:	f640 226e 	movw	r2, #2670	; 0xa6e
    7822:	4905      	ldr	r1, [pc, #20]	; (7838 <_spi_m_sync_init+0x188>)
    7824:	2001      	movs	r0, #1
    7826:	4b05      	ldr	r3, [pc, #20]	; (783c <_spi_m_sync_init+0x18c>)
    7828:	4798      	blx	r3
		return ERR_INVALID_ARG;
    782a:	f06f 000c 	mvn.w	r0, #12
    782e:	bd70      	pop	{r4, r5, r6, pc}
    7830:	000069dd 	.word	0x000069dd
    7834:	0000da9c 	.word	0x0000da9c
    7838:	0000dac0 	.word	0x0000dac0
    783c:	00005b49 	.word	0x00005b49

00007840 <_spi_m_async_init>:
{
    7840:	b538      	push	{r3, r4, r5, lr}
    7842:	4604      	mov	r4, r0
    7844:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7846:	4b15      	ldr	r3, [pc, #84]	; (789c <_spi_m_async_init+0x5c>)
    7848:	4798      	blx	r3
	if (rc < 0) {
    784a:	2800      	cmp	r0, #0
    784c:	db24      	blt.n	7898 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    784e:	4621      	mov	r1, r4
    7850:	4628      	mov	r0, r5
    7852:	4b13      	ldr	r3, [pc, #76]	; (78a0 <_spi_m_async_init+0x60>)
    7854:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    7856:	2300      	movs	r3, #0
    7858:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    785a:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    785c:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    785e:	4628      	mov	r0, r5
    7860:	4b10      	ldr	r3, [pc, #64]	; (78a4 <_spi_m_async_init+0x64>)
    7862:	4798      	blx	r3
    7864:	1d01      	adds	r1, r0, #4
    7866:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7868:	2401      	movs	r4, #1
    786a:	f000 021f 	and.w	r2, r0, #31
    786e:	fa04 f202 	lsl.w	r2, r4, r2
    7872:	0943      	lsrs	r3, r0, #5
    7874:	009b      	lsls	r3, r3, #2
    7876:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    787a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    787e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7886:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    788a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    788e:	3001      	adds	r0, #1
    7890:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7892:	4281      	cmp	r1, r0
    7894:	d1e9      	bne.n	786a <_spi_m_async_init+0x2a>
	return ERR_NONE;
    7896:	2000      	movs	r0, #0
}
    7898:	bd38      	pop	{r3, r4, r5, pc}
    789a:	bf00      	nop
    789c:	000076b1 	.word	0x000076b1
    78a0:	00006a91 	.word	0x00006a91
    78a4:	00006af1 	.word	0x00006af1

000078a8 <_spi_m_async_enable>:
{
    78a8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    78aa:	4604      	mov	r4, r0
    78ac:	b160      	cbz	r0, 78c8 <_spi_m_async_enable+0x20>
    78ae:	6800      	ldr	r0, [r0, #0]
    78b0:	3000      	adds	r0, #0
    78b2:	bf18      	it	ne
    78b4:	2001      	movne	r0, #1
    78b6:	f640 22db 	movw	r2, #2779	; 0xadb
    78ba:	4904      	ldr	r1, [pc, #16]	; (78cc <_spi_m_async_enable+0x24>)
    78bc:	4b04      	ldr	r3, [pc, #16]	; (78d0 <_spi_m_async_enable+0x28>)
    78be:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    78c0:	6820      	ldr	r0, [r4, #0]
    78c2:	4b04      	ldr	r3, [pc, #16]	; (78d4 <_spi_m_async_enable+0x2c>)
    78c4:	4798      	blx	r3
}
    78c6:	bd10      	pop	{r4, pc}
    78c8:	2000      	movs	r0, #0
    78ca:	e7f4      	b.n	78b6 <_spi_m_async_enable+0xe>
    78cc:	0000dac0 	.word	0x0000dac0
    78d0:	00005b49 	.word	0x00005b49
    78d4:	00006b29 	.word	0x00006b29

000078d8 <_spi_m_async_set_mode>:
{
    78d8:	b538      	push	{r3, r4, r5, lr}
    78da:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    78dc:	4604      	mov	r4, r0
    78de:	b168      	cbz	r0, 78fc <_spi_m_async_set_mode+0x24>
    78e0:	6800      	ldr	r0, [r0, #0]
    78e2:	3000      	adds	r0, #0
    78e4:	bf18      	it	ne
    78e6:	2001      	movne	r0, #1
    78e8:	f640 320c 	movw	r2, #2828	; 0xb0c
    78ec:	4904      	ldr	r1, [pc, #16]	; (7900 <_spi_m_async_set_mode+0x28>)
    78ee:	4b05      	ldr	r3, [pc, #20]	; (7904 <_spi_m_async_set_mode+0x2c>)
    78f0:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    78f2:	4629      	mov	r1, r5
    78f4:	6820      	ldr	r0, [r4, #0]
    78f6:	4b04      	ldr	r3, [pc, #16]	; (7908 <_spi_m_async_set_mode+0x30>)
    78f8:	4798      	blx	r3
}
    78fa:	bd38      	pop	{r3, r4, r5, pc}
    78fc:	2000      	movs	r0, #0
    78fe:	e7f3      	b.n	78e8 <_spi_m_async_set_mode+0x10>
    7900:	0000dac0 	.word	0x0000dac0
    7904:	00005b49 	.word	0x00005b49
    7908:	00006b69 	.word	0x00006b69

0000790c <_spi_m_async_set_baudrate>:
{
    790c:	b538      	push	{r3, r4, r5, lr}
    790e:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    7910:	4605      	mov	r5, r0
    7912:	b198      	cbz	r0, 793c <_spi_m_async_set_baudrate+0x30>
    7914:	6800      	ldr	r0, [r0, #0]
    7916:	3000      	adds	r0, #0
    7918:	bf18      	it	ne
    791a:	2001      	movne	r0, #1
    791c:	f640 323b 	movw	r2, #2875	; 0xb3b
    7920:	4907      	ldr	r1, [pc, #28]	; (7940 <_spi_m_async_set_baudrate+0x34>)
    7922:	4b08      	ldr	r3, [pc, #32]	; (7944 <_spi_m_async_set_baudrate+0x38>)
    7924:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    7926:	682b      	ldr	r3, [r5, #0]
    7928:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    792a:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    792e:	bf03      	ittte	eq
    7930:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7932:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    7934:	2000      	moveq	r0, #0
		return ERR_BUSY;
    7936:	f06f 0003 	mvnne.w	r0, #3
}
    793a:	bd38      	pop	{r3, r4, r5, pc}
    793c:	2000      	movs	r0, #0
    793e:	e7ed      	b.n	791c <_spi_m_async_set_baudrate+0x10>
    7940:	0000dac0 	.word	0x0000dac0
    7944:	00005b49 	.word	0x00005b49

00007948 <_spi_m_async_enable_tx>:
{
    7948:	b538      	push	{r3, r4, r5, lr}
    794a:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    794c:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    794e:	b160      	cbz	r0, 796a <_spi_m_async_enable_tx+0x22>
    7950:	1c20      	adds	r0, r4, #0
    7952:	bf18      	it	ne
    7954:	2001      	movne	r0, #1
    7956:	f640 32fe 	movw	r2, #3070	; 0xbfe
    795a:	4906      	ldr	r1, [pc, #24]	; (7974 <_spi_m_async_enable_tx+0x2c>)
    795c:	4b06      	ldr	r3, [pc, #24]	; (7978 <_spi_m_async_enable_tx+0x30>)
    795e:	4798      	blx	r3
	if (state) {
    7960:	b92d      	cbnz	r5, 796e <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7962:	2301      	movs	r3, #1
    7964:	7523      	strb	r3, [r4, #20]
}
    7966:	2000      	movs	r0, #0
    7968:	bd38      	pop	{r3, r4, r5, pc}
    796a:	2000      	movs	r0, #0
    796c:	e7f3      	b.n	7956 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    796e:	2301      	movs	r3, #1
    7970:	75a3      	strb	r3, [r4, #22]
    7972:	e7f8      	b.n	7966 <_spi_m_async_enable_tx+0x1e>
    7974:	0000dac0 	.word	0x0000dac0
    7978:	00005b49 	.word	0x00005b49

0000797c <_spi_m_async_enable_rx>:
{
    797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    797e:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    7980:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    7982:	4e0c      	ldr	r6, [pc, #48]	; (79b4 <_spi_m_async_enable_rx+0x38>)
    7984:	f640 4212 	movw	r2, #3090	; 0xc12
    7988:	4631      	mov	r1, r6
    798a:	3000      	adds	r0, #0
    798c:	bf18      	it	ne
    798e:	2001      	movne	r0, #1
    7990:	4d09      	ldr	r5, [pc, #36]	; (79b8 <_spi_m_async_enable_rx+0x3c>)
    7992:	47a8      	blx	r5
	ASSERT(hw);
    7994:	f640 4213 	movw	r2, #3091	; 0xc13
    7998:	4631      	mov	r1, r6
    799a:	1c20      	adds	r0, r4, #0
    799c:	bf18      	it	ne
    799e:	2001      	movne	r0, #1
    79a0:	47a8      	blx	r5
	if (state) {
    79a2:	b91f      	cbnz	r7, 79ac <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    79a4:	2304      	movs	r3, #4
    79a6:	7523      	strb	r3, [r4, #20]
}
    79a8:	2000      	movs	r0, #0
    79aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    79ac:	2304      	movs	r3, #4
    79ae:	75a3      	strb	r3, [r4, #22]
    79b0:	e7fa      	b.n	79a8 <_spi_m_async_enable_rx+0x2c>
    79b2:	bf00      	nop
    79b4:	0000dac0 	.word	0x0000dac0
    79b8:	00005b49 	.word	0x00005b49

000079bc <_spi_m_async_enable_tx_complete>:
{
    79bc:	b538      	push	{r3, r4, r5, lr}
    79be:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    79c0:	4604      	mov	r4, r0
    79c2:	b170      	cbz	r0, 79e2 <_spi_m_async_enable_tx_complete+0x26>
    79c4:	6800      	ldr	r0, [r0, #0]
    79c6:	3000      	adds	r0, #0
    79c8:	bf18      	it	ne
    79ca:	2001      	movne	r0, #1
    79cc:	f640 4225 	movw	r2, #3109	; 0xc25
    79d0:	4907      	ldr	r1, [pc, #28]	; (79f0 <_spi_m_async_enable_tx_complete+0x34>)
    79d2:	4b08      	ldr	r3, [pc, #32]	; (79f4 <_spi_m_async_enable_tx_complete+0x38>)
    79d4:	4798      	blx	r3
	if (state) {
    79d6:	b935      	cbnz	r5, 79e6 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    79d8:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    79da:	2202      	movs	r2, #2
    79dc:	751a      	strb	r2, [r3, #20]
}
    79de:	2000      	movs	r0, #0
    79e0:	bd38      	pop	{r3, r4, r5, pc}
    79e2:	2000      	movs	r0, #0
    79e4:	e7f2      	b.n	79cc <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    79e6:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    79e8:	2202      	movs	r2, #2
    79ea:	759a      	strb	r2, [r3, #22]
    79ec:	e7f7      	b.n	79de <_spi_m_async_enable_tx_complete+0x22>
    79ee:	bf00      	nop
    79f0:	0000dac0 	.word	0x0000dac0
    79f4:	00005b49 	.word	0x00005b49

000079f8 <_spi_m_async_write_one>:
{
    79f8:	b538      	push	{r3, r4, r5, lr}
    79fa:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    79fc:	4604      	mov	r4, r0
    79fe:	b160      	cbz	r0, 7a1a <_spi_m_async_write_one+0x22>
    7a00:	6800      	ldr	r0, [r0, #0]
    7a02:	3000      	adds	r0, #0
    7a04:	bf18      	it	ne
    7a06:	2001      	movne	r0, #1
    7a08:	f640 4237 	movw	r2, #3127	; 0xc37
    7a0c:	4904      	ldr	r1, [pc, #16]	; (7a20 <_spi_m_async_write_one+0x28>)
    7a0e:	4b05      	ldr	r3, [pc, #20]	; (7a24 <_spi_m_async_write_one+0x2c>)
    7a10:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7a12:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    7a14:	629d      	str	r5, [r3, #40]	; 0x28
}
    7a16:	2000      	movs	r0, #0
    7a18:	bd38      	pop	{r3, r4, r5, pc}
    7a1a:	2000      	movs	r0, #0
    7a1c:	e7f4      	b.n	7a08 <_spi_m_async_write_one+0x10>
    7a1e:	bf00      	nop
    7a20:	0000dac0 	.word	0x0000dac0
    7a24:	00005b49 	.word	0x00005b49

00007a28 <_spi_m_async_read_one>:
{
    7a28:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7a2a:	4604      	mov	r4, r0
    7a2c:	b160      	cbz	r0, 7a48 <_spi_m_async_read_one+0x20>
    7a2e:	6800      	ldr	r0, [r0, #0]
    7a30:	3000      	adds	r0, #0
    7a32:	bf18      	it	ne
    7a34:	2001      	movne	r0, #1
    7a36:	f640 4252 	movw	r2, #3154	; 0xc52
    7a3a:	4904      	ldr	r1, [pc, #16]	; (7a4c <_spi_m_async_read_one+0x24>)
    7a3c:	4b04      	ldr	r3, [pc, #16]	; (7a50 <_spi_m_async_read_one+0x28>)
    7a3e:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7a40:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7a42:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7a44:	b280      	uxth	r0, r0
    7a46:	bd10      	pop	{r4, pc}
    7a48:	2000      	movs	r0, #0
    7a4a:	e7f4      	b.n	7a36 <_spi_m_async_read_one+0xe>
    7a4c:	0000dac0 	.word	0x0000dac0
    7a50:	00005b49 	.word	0x00005b49

00007a54 <_spi_m_async_register_callback>:
{
    7a54:	b570      	push	{r4, r5, r6, lr}
    7a56:	460d      	mov	r5, r1
    7a58:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    7a5a:	4604      	mov	r4, r0
    7a5c:	b168      	cbz	r0, 7a7a <_spi_m_async_register_callback+0x26>
    7a5e:	2903      	cmp	r1, #3
    7a60:	bf8c      	ite	hi
    7a62:	2000      	movhi	r0, #0
    7a64:	2001      	movls	r0, #1
    7a66:	f640 426b 	movw	r2, #3179	; 0xc6b
    7a6a:	4905      	ldr	r1, [pc, #20]	; (7a80 <_spi_m_async_register_callback+0x2c>)
    7a6c:	4b05      	ldr	r3, [pc, #20]	; (7a84 <_spi_m_async_register_callback+0x30>)
    7a6e:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    7a70:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    7a74:	60a6      	str	r6, [r4, #8]
}
    7a76:	2000      	movs	r0, #0
    7a78:	bd70      	pop	{r4, r5, r6, pc}
    7a7a:	2000      	movs	r0, #0
    7a7c:	e7f3      	b.n	7a66 <_spi_m_async_register_callback+0x12>
    7a7e:	bf00      	nop
    7a80:	0000dac0 	.word	0x0000dac0
    7a84:	00005b49 	.word	0x00005b49

00007a88 <_spi_m_async_set_irq_state>:
{
    7a88:	b570      	push	{r4, r5, r6, lr}
    7a8a:	460c      	mov	r4, r1
    7a8c:	4615      	mov	r5, r2
	ASSERT(device);
    7a8e:	4606      	mov	r6, r0
    7a90:	f640 42ac 	movw	r2, #3244	; 0xcac
    7a94:	4908      	ldr	r1, [pc, #32]	; (7ab8 <_spi_m_async_set_irq_state+0x30>)
    7a96:	3000      	adds	r0, #0
    7a98:	bf18      	it	ne
    7a9a:	2001      	movne	r0, #1
    7a9c:	4b07      	ldr	r3, [pc, #28]	; (7abc <_spi_m_async_set_irq_state+0x34>)
    7a9e:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    7aa0:	2c03      	cmp	r4, #3
    7aa2:	d000      	beq.n	7aa6 <_spi_m_async_set_irq_state+0x1e>
    7aa4:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    7aa6:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    7aa8:	b115      	cbz	r5, 7ab0 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    7aaa:	2280      	movs	r2, #128	; 0x80
    7aac:	759a      	strb	r2, [r3, #22]
}
    7aae:	e7f9      	b.n	7aa4 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    7ab0:	2280      	movs	r2, #128	; 0x80
    7ab2:	751a      	strb	r2, [r3, #20]
    7ab4:	bd70      	pop	{r4, r5, r6, pc}
    7ab6:	bf00      	nop
    7ab8:	0000dac0 	.word	0x0000dac0
    7abc:	00005b49 	.word	0x00005b49

00007ac0 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    7ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ac4:	4605      	mov	r5, r0
    7ac6:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7ac8:	4608      	mov	r0, r1
    7aca:	4b52      	ldr	r3, [pc, #328]	; (7c14 <_spi_m_dma_init+0x154>)
    7acc:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7ace:	2803      	cmp	r0, #3
    7ad0:	d00c      	beq.n	7aec <_spi_m_dma_init+0x2c>
    7ad2:	2807      	cmp	r0, #7
    7ad4:	bf08      	it	eq
    7ad6:	2301      	moveq	r3, #1
    7ad8:	d009      	beq.n	7aee <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    7ada:	2d00      	cmp	r5, #0
    7adc:	f000 8086 	beq.w	7bec <_spi_m_dma_init+0x12c>
    7ae0:	2c00      	cmp	r4, #0
    7ae2:	f040 808d 	bne.w	7c00 <_spi_m_dma_init+0x140>
	return NULL;
    7ae6:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7ae8:	2000      	movs	r0, #0
    7aea:	e009      	b.n	7b00 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    7aec:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7aee:	4e4a      	ldr	r6, [pc, #296]	; (7c18 <_spi_m_dma_init+0x158>)
    7af0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7af4:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7af6:	2d00      	cmp	r5, #0
    7af8:	d0f6      	beq.n	7ae8 <_spi_m_dma_init+0x28>
    7afa:	2001      	movs	r0, #1
    7afc:	2c00      	cmp	r4, #0
    7afe:	d0f3      	beq.n	7ae8 <_spi_m_dma_init+0x28>
    7b00:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7b04:	4945      	ldr	r1, [pc, #276]	; (7c1c <_spi_m_dma_init+0x15c>)
    7b06:	4b46      	ldr	r3, [pc, #280]	; (7c20 <_spi_m_dma_init+0x160>)
    7b08:	4798      	blx	r3

	if (regs == NULL) {
    7b0a:	2e00      	cmp	r6, #0
    7b0c:	d06a      	beq.n	7be4 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7b0e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7b10:	f013 0f01 	tst.w	r3, #1
    7b14:	d11d      	bne.n	7b52 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7b16:	6833      	ldr	r3, [r6, #0]
    7b18:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b1c:	69e3      	ldr	r3, [r4, #28]
    7b1e:	f013 0f03 	tst.w	r3, #3
    7b22:	d1fb      	bne.n	7b1c <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7b24:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7b26:	f013 0f02 	tst.w	r3, #2
    7b2a:	d00b      	beq.n	7b44 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7b2c:	6823      	ldr	r3, [r4, #0]
    7b2e:	f023 0302 	bic.w	r3, r3, #2
    7b32:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b34:	69e3      	ldr	r3, [r4, #28]
    7b36:	f013 0f03 	tst.w	r3, #3
    7b3a:	d1fb      	bne.n	7b34 <_spi_m_dma_init+0x74>
    7b3c:	69e3      	ldr	r3, [r4, #28]
    7b3e:	f013 0f02 	tst.w	r3, #2
    7b42:	d1fb      	bne.n	7b3c <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7b44:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7b48:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b4a:	69e3      	ldr	r3, [r4, #28]
    7b4c:	f013 0f03 	tst.w	r3, #3
    7b50:	d1fb      	bne.n	7b4a <_spi_m_dma_init+0x8a>
    7b52:	69e3      	ldr	r3, [r4, #28]
    7b54:	f013 0f01 	tst.w	r3, #1
    7b58:	d1fb      	bne.n	7b52 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    7b5a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    7b5c:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7b60:	492e      	ldr	r1, [pc, #184]	; (7c1c <_spi_m_dma_init+0x15c>)
    7b62:	1c20      	adds	r0, r4, #0
    7b64:	bf18      	it	ne
    7b66:	2001      	movne	r0, #1
    7b68:	4b2d      	ldr	r3, [pc, #180]	; (7c20 <_spi_m_dma_init+0x160>)
    7b6a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7b6c:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    7b6e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7b72:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7b76:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b78:	69e3      	ldr	r3, [r4, #28]
    7b7a:	f013 0f03 	tst.w	r3, #3
    7b7e:	d1fb      	bne.n	7b78 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    7b80:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7b82:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7b86:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7b8e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b90:	69e3      	ldr	r3, [r4, #28]
    7b92:	f013 0f17 	tst.w	r3, #23
    7b96:	d1fb      	bne.n	7b90 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7b98:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7b9a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7b9c:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7b9e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    7ba2:	f105 0818 	add.w	r8, r5, #24
    7ba6:	4620      	mov	r0, r4
    7ba8:	4b1e      	ldr	r3, [pc, #120]	; (7c24 <_spi_m_dma_init+0x164>)
    7baa:	4798      	blx	r3
    7bac:	4601      	mov	r1, r0
    7bae:	4640      	mov	r0, r8
    7bb0:	4f1d      	ldr	r7, [pc, #116]	; (7c28 <_spi_m_dma_init+0x168>)
    7bb2:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7bb4:	69ab      	ldr	r3, [r5, #24]
    7bb6:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    7bb8:	69ab      	ldr	r3, [r5, #24]
    7bba:	4a1c      	ldr	r2, [pc, #112]	; (7c2c <_spi_m_dma_init+0x16c>)
    7bbc:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7bbe:	69ab      	ldr	r3, [r5, #24]
    7bc0:	4e1b      	ldr	r6, [pc, #108]	; (7c30 <_spi_m_dma_init+0x170>)
    7bc2:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    7bc4:	4620      	mov	r0, r4
    7bc6:	4b1b      	ldr	r3, [pc, #108]	; (7c34 <_spi_m_dma_init+0x174>)
    7bc8:	4798      	blx	r3
    7bca:	4601      	mov	r1, r0
    7bcc:	4640      	mov	r0, r8
    7bce:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7bd0:	69ab      	ldr	r3, [r5, #24]
    7bd2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7bd4:	69ab      	ldr	r3, [r5, #24]
    7bd6:	4a18      	ldr	r2, [pc, #96]	; (7c38 <_spi_m_dma_init+0x178>)
    7bd8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7bda:	69ab      	ldr	r3, [r5, #24]
    7bdc:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    7bde:	2000      	movs	r0, #0
    7be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7be4:	f06f 000c 	mvn.w	r0, #12
    7be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7bec:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7bf0:	490a      	ldr	r1, [pc, #40]	; (7c1c <_spi_m_dma_init+0x15c>)
    7bf2:	2000      	movs	r0, #0
    7bf4:	4b0a      	ldr	r3, [pc, #40]	; (7c20 <_spi_m_dma_init+0x160>)
    7bf6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7bf8:	f06f 000c 	mvn.w	r0, #12
    7bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7c00:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7c04:	4905      	ldr	r1, [pc, #20]	; (7c1c <_spi_m_dma_init+0x15c>)
    7c06:	2001      	movs	r0, #1
    7c08:	4b05      	ldr	r3, [pc, #20]	; (7c20 <_spi_m_dma_init+0x160>)
    7c0a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7c0c:	f06f 000c 	mvn.w	r0, #12
    7c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c14:	000069dd 	.word	0x000069dd
    7c18:	0000da9c 	.word	0x0000da9c
    7c1c:	0000dac0 	.word	0x0000dac0
    7c20:	00005b49 	.word	0x00005b49
    7c24:	00006bfd 	.word	0x00006bfd
    7c28:	000063e5 	.word	0x000063e5
    7c2c:	00006c11 	.word	0x00006c11
    7c30:	00006c29 	.word	0x00006c29
    7c34:	00006be9 	.word	0x00006be9
    7c38:	00006c1d 	.word	0x00006c1d

00007c3c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    7c3c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7c3e:	4604      	mov	r4, r0
    7c40:	b160      	cbz	r0, 7c5c <_spi_m_dma_enable+0x20>
    7c42:	6800      	ldr	r0, [r0, #0]
    7c44:	3000      	adds	r0, #0
    7c46:	bf18      	it	ne
    7c48:	2001      	movne	r0, #1
    7c4a:	f640 52c9 	movw	r2, #3529	; 0xdc9
    7c4e:	4904      	ldr	r1, [pc, #16]	; (7c60 <_spi_m_dma_enable+0x24>)
    7c50:	4b04      	ldr	r3, [pc, #16]	; (7c64 <_spi_m_dma_enable+0x28>)
    7c52:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    7c54:	6820      	ldr	r0, [r4, #0]
    7c56:	4b04      	ldr	r3, [pc, #16]	; (7c68 <_spi_m_dma_enable+0x2c>)
    7c58:	4798      	blx	r3
}
    7c5a:	bd10      	pop	{r4, pc}
    7c5c:	2000      	movs	r0, #0
    7c5e:	e7f4      	b.n	7c4a <_spi_m_dma_enable+0xe>
    7c60:	0000dac0 	.word	0x0000dac0
    7c64:	00005b49 	.word	0x00005b49
    7c68:	00006b05 	.word	0x00006b05

00007c6c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    7c6c:	b570      	push	{r4, r5, r6, lr}
    7c6e:	4605      	mov	r5, r0
    7c70:	4614      	mov	r4, r2
	switch (type) {
    7c72:	2901      	cmp	r1, #1
    7c74:	d00e      	beq.n	7c94 <_spi_m_dma_register_callback+0x28>
    7c76:	b111      	cbz	r1, 7c7e <_spi_m_dma_register_callback+0x12>
    7c78:	2902      	cmp	r1, #2
    7c7a:	d016      	beq.n	7caa <_spi_m_dma_register_callback+0x3e>
    7c7c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    7c7e:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7c80:	6800      	ldr	r0, [r0, #0]
    7c82:	4b13      	ldr	r3, [pc, #76]	; (7cd0 <_spi_m_dma_register_callback+0x64>)
    7c84:	4798      	blx	r3
    7c86:	1c22      	adds	r2, r4, #0
    7c88:	bf18      	it	ne
    7c8a:	2201      	movne	r2, #1
    7c8c:	2100      	movs	r1, #0
    7c8e:	4b11      	ldr	r3, [pc, #68]	; (7cd4 <_spi_m_dma_register_callback+0x68>)
    7c90:	4798      	blx	r3
		break;
    7c92:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    7c94:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7c96:	6800      	ldr	r0, [r0, #0]
    7c98:	4b0f      	ldr	r3, [pc, #60]	; (7cd8 <_spi_m_dma_register_callback+0x6c>)
    7c9a:	4798      	blx	r3
    7c9c:	1c22      	adds	r2, r4, #0
    7c9e:	bf18      	it	ne
    7ca0:	2201      	movne	r2, #1
    7ca2:	2100      	movs	r1, #0
    7ca4:	4b0b      	ldr	r3, [pc, #44]	; (7cd4 <_spi_m_dma_register_callback+0x68>)
    7ca6:	4798      	blx	r3
		break;
    7ca8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    7caa:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7cac:	6800      	ldr	r0, [r0, #0]
    7cae:	4b0a      	ldr	r3, [pc, #40]	; (7cd8 <_spi_m_dma_register_callback+0x6c>)
    7cb0:	4798      	blx	r3
    7cb2:	3400      	adds	r4, #0
    7cb4:	bf18      	it	ne
    7cb6:	2401      	movne	r4, #1
    7cb8:	4622      	mov	r2, r4
    7cba:	2101      	movs	r1, #1
    7cbc:	4e05      	ldr	r6, [pc, #20]	; (7cd4 <_spi_m_dma_register_callback+0x68>)
    7cbe:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7cc0:	6828      	ldr	r0, [r5, #0]
    7cc2:	4b03      	ldr	r3, [pc, #12]	; (7cd0 <_spi_m_dma_register_callback+0x64>)
    7cc4:	4798      	blx	r3
    7cc6:	4622      	mov	r2, r4
    7cc8:	2101      	movs	r1, #1
    7cca:	47b0      	blx	r6
    7ccc:	bd70      	pop	{r4, r5, r6, pc}
    7cce:	bf00      	nop
    7cd0:	00006be9 	.word	0x00006be9
    7cd4:	000062bd 	.word	0x000062bd
    7cd8:	00006bfd 	.word	0x00006bfd

00007cdc <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    7cdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ce0:	4605      	mov	r5, r0
    7ce2:	4689      	mov	r9, r1
    7ce4:	4617      	mov	r7, r2
    7ce6:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7ce8:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7cec:	4658      	mov	r0, fp
    7cee:	4b46      	ldr	r3, [pc, #280]	; (7e08 <_spi_m_dma_transfer+0x12c>)
    7cf0:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7cf2:	2803      	cmp	r0, #3
    7cf4:	d053      	beq.n	7d9e <_spi_m_dma_transfer+0xc2>
    7cf6:	2807      	cmp	r0, #7
    7cf8:	bf08      	it	eq
    7cfa:	2201      	moveq	r2, #1
    7cfc:	d050      	beq.n	7da0 <_spi_m_dma_transfer+0xc4>
	return NULL;
    7cfe:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    7d02:	4658      	mov	r0, fp
    7d04:	4b41      	ldr	r3, [pc, #260]	; (7e0c <_spi_m_dma_transfer+0x130>)
    7d06:	4798      	blx	r3
    7d08:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    7d0a:	4658      	mov	r0, fp
    7d0c:	4b40      	ldr	r3, [pc, #256]	; (7e10 <_spi_m_dma_transfer+0x134>)
    7d0e:	4798      	blx	r3
    7d10:	4604      	mov	r4, r0

	if (rxbuf) {
    7d12:	2f00      	cmp	r7, #0
    7d14:	d04b      	beq.n	7dae <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7d16:	2d00      	cmp	r5, #0
    7d18:	d047      	beq.n	7daa <_spi_m_dma_transfer+0xce>
    7d1a:	f11b 0000 	adds.w	r0, fp, #0
    7d1e:	bf18      	it	ne
    7d20:	2001      	movne	r0, #1
    7d22:	f640 5213 	movw	r2, #3347	; 0xd13
    7d26:	493b      	ldr	r1, [pc, #236]	; (7e14 <_spi_m_dma_transfer+0x138>)
    7d28:	4b3b      	ldr	r3, [pc, #236]	; (7e18 <_spi_m_dma_transfer+0x13c>)
    7d2a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    7d2c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7d2e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7d30:	f013 0f04 	tst.w	r3, #4
    7d34:	d107      	bne.n	7d46 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    7d36:	6853      	ldr	r3, [r2, #4]
    7d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7d3c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7d3e:	69d3      	ldr	r3, [r2, #28]
    7d40:	f013 0f17 	tst.w	r3, #23
    7d44:	d1fb      	bne.n	7d3e <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7d46:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    7d48:	3128      	adds	r1, #40	; 0x28
    7d4a:	4630      	mov	r0, r6
    7d4c:	4b33      	ldr	r3, [pc, #204]	; (7e1c <_spi_m_dma_transfer+0x140>)
    7d4e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    7d50:	4639      	mov	r1, r7
    7d52:	4630      	mov	r0, r6
    7d54:	4b32      	ldr	r3, [pc, #200]	; (7e20 <_spi_m_dma_transfer+0x144>)
    7d56:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    7d58:	4641      	mov	r1, r8
    7d5a:	4630      	mov	r0, r6
    7d5c:	4b31      	ldr	r3, [pc, #196]	; (7e24 <_spi_m_dma_transfer+0x148>)
    7d5e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    7d60:	2100      	movs	r1, #0
    7d62:	4630      	mov	r0, r6
    7d64:	4b30      	ldr	r3, [pc, #192]	; (7e28 <_spi_m_dma_transfer+0x14c>)
    7d66:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    7d68:	f1b9 0f00 	cmp.w	r9, #0
    7d6c:	d039      	beq.n	7de2 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    7d6e:	4649      	mov	r1, r9
    7d70:	4620      	mov	r0, r4
    7d72:	4b2a      	ldr	r3, [pc, #168]	; (7e1c <_spi_m_dma_transfer+0x140>)
    7d74:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7d76:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7d78:	3128      	adds	r1, #40	; 0x28
    7d7a:	4620      	mov	r0, r4
    7d7c:	4b28      	ldr	r3, [pc, #160]	; (7e20 <_spi_m_dma_transfer+0x144>)
    7d7e:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    7d80:	2101      	movs	r1, #1
    7d82:	4620      	mov	r0, r4
    7d84:	4b29      	ldr	r3, [pc, #164]	; (7e2c <_spi_m_dma_transfer+0x150>)
    7d86:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7d88:	4641      	mov	r1, r8
    7d8a:	4620      	mov	r0, r4
    7d8c:	4b25      	ldr	r3, [pc, #148]	; (7e24 <_spi_m_dma_transfer+0x148>)
    7d8e:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    7d90:	2100      	movs	r1, #0
    7d92:	4620      	mov	r0, r4
    7d94:	4b24      	ldr	r3, [pc, #144]	; (7e28 <_spi_m_dma_transfer+0x14c>)
    7d96:	4798      	blx	r3

	return ERR_NONE;
}
    7d98:	2000      	movs	r0, #0
    7d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    7d9e:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    7da0:	4b23      	ldr	r3, [pc, #140]	; (7e30 <_spi_m_dma_transfer+0x154>)
    7da2:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    7da6:	4492      	add	sl, r2
    7da8:	e7ab      	b.n	7d02 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    7daa:	2000      	movs	r0, #0
    7dac:	e7b9      	b.n	7d22 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    7dae:	b1b5      	cbz	r5, 7dde <_spi_m_dma_transfer+0x102>
    7db0:	f11b 0000 	adds.w	r0, fp, #0
    7db4:	bf18      	it	ne
    7db6:	2001      	movne	r0, #1
    7db8:	f640 521a 	movw	r2, #3354	; 0xd1a
    7dbc:	4915      	ldr	r1, [pc, #84]	; (7e14 <_spi_m_dma_transfer+0x138>)
    7dbe:	4b16      	ldr	r3, [pc, #88]	; (7e18 <_spi_m_dma_transfer+0x13c>)
    7dc0:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    7dc2:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7dc4:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7dc6:	f013 0f04 	tst.w	r3, #4
    7dca:	d1cd      	bne.n	7d68 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    7dcc:	6853      	ldr	r3, [r2, #4]
    7dce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    7dd2:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7dd4:	69d3      	ldr	r3, [r2, #28]
    7dd6:	f013 0f17 	tst.w	r3, #23
    7dda:	d1fb      	bne.n	7dd4 <_spi_m_dma_transfer+0xf8>
    7ddc:	e7c4      	b.n	7d68 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    7dde:	2000      	movs	r0, #0
    7de0:	e7ea      	b.n	7db8 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    7de2:	f10a 010e 	add.w	r1, sl, #14
    7de6:	4620      	mov	r0, r4
    7de8:	4b0c      	ldr	r3, [pc, #48]	; (7e1c <_spi_m_dma_transfer+0x140>)
    7dea:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7dec:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7dee:	3128      	adds	r1, #40	; 0x28
    7df0:	4620      	mov	r0, r4
    7df2:	4b0b      	ldr	r3, [pc, #44]	; (7e20 <_spi_m_dma_transfer+0x144>)
    7df4:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7df6:	2100      	movs	r1, #0
    7df8:	4620      	mov	r0, r4
    7dfa:	4b0c      	ldr	r3, [pc, #48]	; (7e2c <_spi_m_dma_transfer+0x150>)
    7dfc:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7dfe:	4641      	mov	r1, r8
    7e00:	4620      	mov	r0, r4
    7e02:	4b08      	ldr	r3, [pc, #32]	; (7e24 <_spi_m_dma_transfer+0x148>)
    7e04:	4798      	blx	r3
    7e06:	e7c3      	b.n	7d90 <_spi_m_dma_transfer+0xb4>
    7e08:	000069dd 	.word	0x000069dd
    7e0c:	00006bfd 	.word	0x00006bfd
    7e10:	00006be9 	.word	0x00006be9
    7e14:	0000dac0 	.word	0x0000dac0
    7e18:	00005b49 	.word	0x00005b49
    7e1c:	00006321 	.word	0x00006321
    7e20:	00006311 	.word	0x00006311
    7e24:	0000634d 	.word	0x0000634d
    7e28:	000063a5 	.word	0x000063a5
    7e2c:	00006331 	.word	0x00006331
    7e30:	0000da9c 	.word	0x0000da9c

00007e34 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    7e34:	4b03      	ldr	r3, [pc, #12]	; (7e44 <_delay_init+0x10>)
    7e36:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    7e3a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    7e3c:	2205      	movs	r2, #5
    7e3e:	601a      	str	r2, [r3, #0]
    7e40:	4770      	bx	lr
    7e42:	bf00      	nop
    7e44:	e000e010 	.word	0xe000e010

00007e48 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    7e48:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    7e4a:	b303      	cbz	r3, 7e8e <_delay_cycles+0x46>
{
    7e4c:	b430      	push	{r4, r5}
    7e4e:	1e5d      	subs	r5, r3, #1
    7e50:	b2ed      	uxtb	r5, r5
	while (n--) {
    7e52:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    7e54:	4a12      	ldr	r2, [pc, #72]	; (7ea0 <_delay_cycles+0x58>)
    7e56:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    7e5a:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    7e5c:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7e5e:	6813      	ldr	r3, [r2, #0]
    7e60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7e64:	d0fb      	beq.n	7e5e <_delay_cycles+0x16>
	while (n--) {
    7e66:	3801      	subs	r0, #1
    7e68:	b2c0      	uxtb	r0, r0
    7e6a:	28ff      	cmp	r0, #255	; 0xff
    7e6c:	d1f5      	bne.n	7e5a <_delay_cycles+0x12>
    7e6e:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    7e72:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    7e76:	3101      	adds	r1, #1
    7e78:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    7e7a:	4b09      	ldr	r3, [pc, #36]	; (7ea0 <_delay_cycles+0x58>)
    7e7c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7e7e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7e80:	461a      	mov	r2, r3
    7e82:	6813      	ldr	r3, [r2, #0]
    7e84:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7e88:	d0fb      	beq.n	7e82 <_delay_cycles+0x3a>
		;
}
    7e8a:	bc30      	pop	{r4, r5}
    7e8c:	4770      	bx	lr
	SysTick->LOAD = buf;
    7e8e:	4b04      	ldr	r3, [pc, #16]	; (7ea0 <_delay_cycles+0x58>)
    7e90:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7e92:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7e94:	461a      	mov	r2, r3
    7e96:	6813      	ldr	r3, [r2, #0]
    7e98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7e9c:	d0fb      	beq.n	7e96 <_delay_cycles+0x4e>
    7e9e:	4770      	bx	lr
    7ea0:	e000e010 	.word	0xe000e010

00007ea4 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7ea4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7ea6:	6813      	ldr	r3, [r2, #0]
    7ea8:	f043 0302 	orr.w	r3, r3, #2
    7eac:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7eae:	6913      	ldr	r3, [r2, #16]
    7eb0:	f013 0f03 	tst.w	r3, #3
    7eb4:	d1fb      	bne.n	7eae <_tc_timer_start+0xa>
}
    7eb6:	4770      	bx	lr

00007eb8 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7eb8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7eba:	6813      	ldr	r3, [r2, #0]
    7ebc:	f023 0302 	bic.w	r3, r3, #2
    7ec0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ec2:	6913      	ldr	r3, [r2, #16]
    7ec4:	f013 0f03 	tst.w	r3, #3
    7ec8:	d1fb      	bne.n	7ec2 <_tc_timer_stop+0xa>
}
    7eca:	4770      	bx	lr

00007ecc <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    7ecc:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ece:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7ed0:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7ed4:	2a02      	cmp	r2, #2
    7ed6:	d00a      	beq.n	7eee <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ed8:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7eda:	f012 0f0c 	tst.w	r2, #12
    7ede:	d10c      	bne.n	7efa <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7ee0:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7ee2:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ee4:	691a      	ldr	r2, [r3, #16]
    7ee6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7eea:	d1fb      	bne.n	7ee4 <_tc_timer_set_period+0x18>
    7eec:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7eee:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ef0:	691a      	ldr	r2, [r3, #16]
    7ef2:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7ef6:	d1fb      	bne.n	7ef0 <_tc_timer_set_period+0x24>
    7ef8:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7efa:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7efc:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f00:	2a01      	cmp	r2, #1
    7f02:	d000      	beq.n	7f06 <_tc_timer_set_period+0x3a>
    7f04:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7f06:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    7f08:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f0a:	691a      	ldr	r2, [r3, #16]
    7f0c:	f012 0f20 	tst.w	r2, #32
    7f10:	d1fb      	bne.n	7f0a <_tc_timer_set_period+0x3e>
    7f12:	e7f7      	b.n	7f04 <_tc_timer_set_period+0x38>

00007f14 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    7f14:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7f16:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7f18:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f1c:	2a02      	cmp	r2, #2
    7f1e:	d00a      	beq.n	7f36 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7f20:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f22:	f012 0f0c 	tst.w	r2, #12
    7f26:	d10c      	bne.n	7f42 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f28:	691a      	ldr	r2, [r3, #16]
    7f2a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7f2e:	d1fb      	bne.n	7f28 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7f30:	8b98      	ldrh	r0, [r3, #28]
    7f32:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    7f34:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f36:	691a      	ldr	r2, [r3, #16]
    7f38:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7f3c:	d1fb      	bne.n	7f36 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7f3e:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    7f40:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7f42:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7f44:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f48:	2a01      	cmp	r2, #1
    7f4a:	d001      	beq.n	7f50 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    7f4c:	2000      	movs	r0, #0
}
    7f4e:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f50:	691a      	ldr	r2, [r3, #16]
    7f52:	f012 0f20 	tst.w	r2, #32
    7f56:	d1fb      	bne.n	7f50 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    7f58:	7ed8      	ldrb	r0, [r3, #27]
    7f5a:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    7f5c:	4770      	bx	lr

00007f5e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7f5e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f60:	6913      	ldr	r3, [r2, #16]
    7f62:	f013 0f03 	tst.w	r3, #3
    7f66:	d1fb      	bne.n	7f60 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7f68:	6810      	ldr	r0, [r2, #0]
}
    7f6a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7f6e:	4770      	bx	lr

00007f70 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7f70:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    7f72:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7f74:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7f76:	f012 0f01 	tst.w	r2, #1
    7f7a:	d100      	bne.n	7f7e <tc_interrupt_handler+0xe>
    7f7c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7f7e:	2201      	movs	r2, #1
    7f80:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    7f82:	6803      	ldr	r3, [r0, #0]
    7f84:	4798      	blx	r3
	}
}
    7f86:	e7f9      	b.n	7f7c <tc_interrupt_handler+0xc>

00007f88 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7f88:	b570      	push	{r4, r5, r6, lr}
    7f8a:	b088      	sub	sp, #32
    7f8c:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7f8e:	466c      	mov	r4, sp
    7f90:	4d19      	ldr	r5, [pc, #100]	; (7ff8 <get_tc_index+0x70>)
    7f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7f96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7f9e:	9b00      	ldr	r3, [sp, #0]
    7fa0:	42b3      	cmp	r3, r6
    7fa2:	d00c      	beq.n	7fbe <get_tc_index+0x36>
    7fa4:	4630      	mov	r0, r6
    7fa6:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7fa8:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7faa:	f852 1b04 	ldr.w	r1, [r2], #4
    7fae:	4281      	cmp	r1, r0
    7fb0:	d006      	beq.n	7fc0 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7fb2:	3301      	adds	r3, #1
    7fb4:	2b08      	cmp	r3, #8
    7fb6:	d1f8      	bne.n	7faa <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7fb8:	2000      	movs	r0, #0
			return i;
    7fba:	b240      	sxtb	r0, r0
    7fbc:	e013      	b.n	7fe6 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7fbe:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    7fc0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7fc4:	d015      	beq.n	7ff2 <get_tc_index+0x6a>
    7fc6:	2b01      	cmp	r3, #1
    7fc8:	d00f      	beq.n	7fea <get_tc_index+0x62>
    7fca:	2b02      	cmp	r3, #2
    7fcc:	d00f      	beq.n	7fee <get_tc_index+0x66>
    7fce:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7fd0:	bf08      	it	eq
    7fd2:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    7fd4:	d0f1      	beq.n	7fba <get_tc_index+0x32>
	ASSERT(false);
    7fd6:	f240 1267 	movw	r2, #359	; 0x167
    7fda:	4908      	ldr	r1, [pc, #32]	; (7ffc <get_tc_index+0x74>)
    7fdc:	2000      	movs	r0, #0
    7fde:	4b08      	ldr	r3, [pc, #32]	; (8000 <get_tc_index+0x78>)
    7fe0:	4798      	blx	r3
	return -1;
    7fe2:	f04f 30ff 	mov.w	r0, #4294967295
}
    7fe6:	b008      	add	sp, #32
    7fe8:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7fea:	2001      	movs	r0, #1
    7fec:	e7e5      	b.n	7fba <get_tc_index+0x32>
    7fee:	2002      	movs	r0, #2
    7ff0:	e7e3      	b.n	7fba <get_tc_index+0x32>
    7ff2:	2000      	movs	r0, #0
    7ff4:	e7e1      	b.n	7fba <get_tc_index+0x32>
    7ff6:	bf00      	nop
    7ff8:	0000dadc 	.word	0x0000dadc
    7ffc:	0000db4c 	.word	0x0000db4c
    8000:	00005b49 	.word	0x00005b49

00008004 <_tc_timer_init>:
{
    8004:	b570      	push	{r4, r5, r6, lr}
    8006:	4606      	mov	r6, r0
    8008:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    800a:	4608      	mov	r0, r1
    800c:	4b71      	ldr	r3, [pc, #452]	; (81d4 <_tc_timer_init+0x1d0>)
    800e:	4798      	blx	r3
    8010:	4605      	mov	r5, r0
	device->hw = hw;
    8012:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8014:	22a0      	movs	r2, #160	; 0xa0
    8016:	4970      	ldr	r1, [pc, #448]	; (81d8 <_tc_timer_init+0x1d4>)
    8018:	2001      	movs	r0, #1
    801a:	4b70      	ldr	r3, [pc, #448]	; (81dc <_tc_timer_init+0x1d8>)
    801c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    801e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8020:	f013 0f01 	tst.w	r3, #1
    8024:	d119      	bne.n	805a <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8026:	6923      	ldr	r3, [r4, #16]
    8028:	f013 0f03 	tst.w	r3, #3
    802c:	d1fb      	bne.n	8026 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    802e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8030:	f013 0f02 	tst.w	r3, #2
    8034:	d00b      	beq.n	804e <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8036:	6823      	ldr	r3, [r4, #0]
    8038:	f023 0302 	bic.w	r3, r3, #2
    803c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    803e:	6923      	ldr	r3, [r4, #16]
    8040:	f013 0f03 	tst.w	r3, #3
    8044:	d1fb      	bne.n	803e <_tc_timer_init+0x3a>
    8046:	6923      	ldr	r3, [r4, #16]
    8048:	f013 0f02 	tst.w	r3, #2
    804c:	d1fb      	bne.n	8046 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    804e:	2301      	movs	r3, #1
    8050:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8052:	6923      	ldr	r3, [r4, #16]
    8054:	f013 0f03 	tst.w	r3, #3
    8058:	d1fb      	bne.n	8052 <_tc_timer_init+0x4e>
    805a:	6923      	ldr	r3, [r4, #16]
    805c:	f013 0f01 	tst.w	r3, #1
    8060:	d1fb      	bne.n	805a <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8062:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8066:	4a5e      	ldr	r2, [pc, #376]	; (81e0 <_tc_timer_init+0x1dc>)
    8068:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    806c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    806e:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8070:	6923      	ldr	r3, [r4, #16]
    8072:	f013 0f03 	tst.w	r3, #3
    8076:	d1fb      	bne.n	8070 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8078:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    807c:	4958      	ldr	r1, [pc, #352]	; (81e0 <_tc_timer_init+0x1dc>)
    807e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8082:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8086:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    808a:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    808c:	2301      	movs	r3, #1
    808e:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8090:	f002 020c 	and.w	r2, r2, #12
    8094:	2a08      	cmp	r2, #8
    8096:	d056      	beq.n	8146 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8098:	2a00      	cmp	r2, #0
    809a:	d16b      	bne.n	8174 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    809c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    80a0:	4a4f      	ldr	r2, [pc, #316]	; (81e0 <_tc_timer_init+0x1dc>)
    80a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    80a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    80a8:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    80aa:	6923      	ldr	r3, [r4, #16]
    80ac:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    80b0:	d1fb      	bne.n	80aa <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    80b2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    80b6:	4a4a      	ldr	r2, [pc, #296]	; (81e0 <_tc_timer_init+0x1dc>)
    80b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    80bc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    80be:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    80c0:	6923      	ldr	r3, [r4, #16]
    80c2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    80c6:	d1fb      	bne.n	80c0 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    80c8:	2301      	movs	r3, #1
    80ca:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    80cc:	4b45      	ldr	r3, [pc, #276]	; (81e4 <_tc_timer_init+0x1e0>)
    80ce:	429c      	cmp	r4, r3
    80d0:	d077      	beq.n	81c2 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    80d2:	4b45      	ldr	r3, [pc, #276]	; (81e8 <_tc_timer_init+0x1e4>)
    80d4:	429c      	cmp	r4, r3
    80d6:	d077      	beq.n	81c8 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    80d8:	4b44      	ldr	r3, [pc, #272]	; (81ec <_tc_timer_init+0x1e8>)
    80da:	429c      	cmp	r4, r3
    80dc:	d077      	beq.n	81ce <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    80de:	4b44      	ldr	r3, [pc, #272]	; (81f0 <_tc_timer_init+0x1ec>)
    80e0:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    80e2:	bf04      	itt	eq
    80e4:	4b43      	ldreq	r3, [pc, #268]	; (81f4 <_tc_timer_init+0x1f0>)
    80e6:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    80e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    80ec:	4a3c      	ldr	r2, [pc, #240]	; (81e0 <_tc_timer_init+0x1dc>)
    80ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    80f2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    80f6:	2b00      	cmp	r3, #0
    80f8:	db23      	blt.n	8142 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80fa:	095a      	lsrs	r2, r3, #5
    80fc:	f003 031f 	and.w	r3, r3, #31
    8100:	2101      	movs	r1, #1
    8102:	fa01 f303 	lsl.w	r3, r1, r3
    8106:	3220      	adds	r2, #32
    8108:	493b      	ldr	r1, [pc, #236]	; (81f8 <_tc_timer_init+0x1f4>)
    810a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    810e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8112:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8116:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    811a:	4b31      	ldr	r3, [pc, #196]	; (81e0 <_tc_timer_init+0x1dc>)
    811c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8120:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8124:	2b00      	cmp	r3, #0
    8126:	db0c      	blt.n	8142 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8128:	0959      	lsrs	r1, r3, #5
    812a:	f003 031f 	and.w	r3, r3, #31
    812e:	2201      	movs	r2, #1
    8130:	fa02 f303 	lsl.w	r3, r2, r3
    8134:	4a30      	ldr	r2, [pc, #192]	; (81f8 <_tc_timer_init+0x1f4>)
    8136:	f101 0060 	add.w	r0, r1, #96	; 0x60
    813a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    813e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    8142:	2000      	movs	r0, #0
    8144:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8146:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    814a:	4a25      	ldr	r2, [pc, #148]	; (81e0 <_tc_timer_init+0x1dc>)
    814c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8152:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8154:	6923      	ldr	r3, [r4, #16]
    8156:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    815a:	d1fb      	bne.n	8154 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    815c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8160:	4a1f      	ldr	r2, [pc, #124]	; (81e0 <_tc_timer_init+0x1dc>)
    8162:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8168:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    816a:	6923      	ldr	r3, [r4, #16]
    816c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8170:	d1fb      	bne.n	816a <_tc_timer_init+0x166>
    8172:	e7a9      	b.n	80c8 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8174:	2a04      	cmp	r2, #4
    8176:	d1a7      	bne.n	80c8 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8178:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    817c:	4a18      	ldr	r2, [pc, #96]	; (81e0 <_tc_timer_init+0x1dc>)
    817e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8182:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8186:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8188:	6923      	ldr	r3, [r4, #16]
    818a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    818e:	d1fb      	bne.n	8188 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8190:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8194:	4a12      	ldr	r2, [pc, #72]	; (81e0 <_tc_timer_init+0x1dc>)
    8196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    819a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    819e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    81a0:	6923      	ldr	r3, [r4, #16]
    81a2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    81a6:	d1fb      	bne.n	81a0 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    81a8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    81ac:	4a0c      	ldr	r2, [pc, #48]	; (81e0 <_tc_timer_init+0x1dc>)
    81ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    81b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    81b6:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    81b8:	6923      	ldr	r3, [r4, #16]
    81ba:	f013 0f20 	tst.w	r3, #32
    81be:	d1fb      	bne.n	81b8 <_tc_timer_init+0x1b4>
    81c0:	e782      	b.n	80c8 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    81c2:	4b0c      	ldr	r3, [pc, #48]	; (81f4 <_tc_timer_init+0x1f0>)
    81c4:	601e      	str	r6, [r3, #0]
    81c6:	e78a      	b.n	80de <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    81c8:	4b0a      	ldr	r3, [pc, #40]	; (81f4 <_tc_timer_init+0x1f0>)
    81ca:	605e      	str	r6, [r3, #4]
    81cc:	e78c      	b.n	80e8 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    81ce:	4b09      	ldr	r3, [pc, #36]	; (81f4 <_tc_timer_init+0x1f0>)
    81d0:	609e      	str	r6, [r3, #8]
    81d2:	e789      	b.n	80e8 <_tc_timer_init+0xe4>
    81d4:	00007f89 	.word	0x00007f89
    81d8:	0000db4c 	.word	0x0000db4c
    81dc:	00005b49 	.word	0x00005b49
    81e0:	0000dadc 	.word	0x0000dadc
    81e4:	40003800 	.word	0x40003800
    81e8:	40003c00 	.word	0x40003c00
    81ec:	4101a000 	.word	0x4101a000
    81f0:	4101c000 	.word	0x4101c000
    81f4:	20000998 	.word	0x20000998
    81f8:	e000e100 	.word	0xe000e100

000081fc <_tc_timer_deinit>:
{
    81fc:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    81fe:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    8200:	4620      	mov	r0, r4
    8202:	4b18      	ldr	r3, [pc, #96]	; (8264 <_tc_timer_deinit+0x68>)
    8204:	4798      	blx	r3
    8206:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    8208:	22cd      	movs	r2, #205	; 0xcd
    820a:	4917      	ldr	r1, [pc, #92]	; (8268 <_tc_timer_deinit+0x6c>)
    820c:	2001      	movs	r0, #1
    820e:	4b17      	ldr	r3, [pc, #92]	; (826c <_tc_timer_deinit+0x70>)
    8210:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8212:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8216:	4b16      	ldr	r3, [pc, #88]	; (8270 <_tc_timer_deinit+0x74>)
    8218:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    821c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8220:	2b00      	cmp	r3, #0
    8222:	db0d      	blt.n	8240 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8224:	095a      	lsrs	r2, r3, #5
    8226:	f003 031f 	and.w	r3, r3, #31
    822a:	2101      	movs	r1, #1
    822c:	fa01 f303 	lsl.w	r3, r1, r3
    8230:	3220      	adds	r2, #32
    8232:	4910      	ldr	r1, [pc, #64]	; (8274 <_tc_timer_deinit+0x78>)
    8234:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    823c:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8240:	6823      	ldr	r3, [r4, #0]
    8242:	f023 0302 	bic.w	r3, r3, #2
    8246:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8248:	6923      	ldr	r3, [r4, #16]
    824a:	f013 0f03 	tst.w	r3, #3
    824e:	d1fb      	bne.n	8248 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8250:	6823      	ldr	r3, [r4, #0]
    8252:	f043 0301 	orr.w	r3, r3, #1
    8256:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8258:	6923      	ldr	r3, [r4, #16]
    825a:	f013 0f01 	tst.w	r3, #1
    825e:	d1fb      	bne.n	8258 <_tc_timer_deinit+0x5c>
}
    8260:	bd38      	pop	{r3, r4, r5, pc}
    8262:	bf00      	nop
    8264:	00007f89 	.word	0x00007f89
    8268:	0000db4c 	.word	0x0000db4c
    826c:	00005b49 	.word	0x00005b49
    8270:	0000dadc 	.word	0x0000dadc
    8274:	e000e100 	.word	0xe000e100

00008278 <_tc_timer_set_irq>:
{
    8278:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    827a:	68c0      	ldr	r0, [r0, #12]
    827c:	4b09      	ldr	r3, [pc, #36]	; (82a4 <_tc_timer_set_irq+0x2c>)
    827e:	4798      	blx	r3
    8280:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    8282:	f44f 7291 	mov.w	r2, #290	; 0x122
    8286:	4908      	ldr	r1, [pc, #32]	; (82a8 <_tc_timer_set_irq+0x30>)
    8288:	2001      	movs	r0, #1
    828a:	4b08      	ldr	r3, [pc, #32]	; (82ac <_tc_timer_set_irq+0x34>)
    828c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    828e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8292:	4b07      	ldr	r3, [pc, #28]	; (82b0 <_tc_timer_set_irq+0x38>)
    8294:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    8298:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    829c:	4b05      	ldr	r3, [pc, #20]	; (82b4 <_tc_timer_set_irq+0x3c>)
    829e:	4798      	blx	r3
    82a0:	bd10      	pop	{r4, pc}
    82a2:	bf00      	nop
    82a4:	00007f89 	.word	0x00007f89
    82a8:	0000db4c 	.word	0x0000db4c
    82ac:	00005b49 	.word	0x00005b49
    82b0:	0000dadc 	.word	0x0000dadc
    82b4:	000060dd 	.word	0x000060dd

000082b8 <_tc_get_timer>:
}
    82b8:	4800      	ldr	r0, [pc, #0]	; (82bc <_tc_get_timer+0x4>)
    82ba:	4770      	bx	lr
    82bc:	20000378 	.word	0x20000378

000082c0 <TC0_Handler>:
{
    82c0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    82c2:	4b02      	ldr	r3, [pc, #8]	; (82cc <TC0_Handler+0xc>)
    82c4:	6818      	ldr	r0, [r3, #0]
    82c6:	4b02      	ldr	r3, [pc, #8]	; (82d0 <TC0_Handler+0x10>)
    82c8:	4798      	blx	r3
    82ca:	bd08      	pop	{r3, pc}
    82cc:	20000998 	.word	0x20000998
    82d0:	00007f71 	.word	0x00007f71

000082d4 <TC1_Handler>:
{
    82d4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    82d6:	4b02      	ldr	r3, [pc, #8]	; (82e0 <TC1_Handler+0xc>)
    82d8:	6858      	ldr	r0, [r3, #4]
    82da:	4b02      	ldr	r3, [pc, #8]	; (82e4 <TC1_Handler+0x10>)
    82dc:	4798      	blx	r3
    82de:	bd08      	pop	{r3, pc}
    82e0:	20000998 	.word	0x20000998
    82e4:	00007f71 	.word	0x00007f71

000082e8 <TC2_Handler>:
{
    82e8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    82ea:	4b02      	ldr	r3, [pc, #8]	; (82f4 <TC2_Handler+0xc>)
    82ec:	6898      	ldr	r0, [r3, #8]
    82ee:	4b02      	ldr	r3, [pc, #8]	; (82f8 <TC2_Handler+0x10>)
    82f0:	4798      	blx	r3
    82f2:	bd08      	pop	{r3, pc}
    82f4:	20000998 	.word	0x20000998
    82f8:	00007f71 	.word	0x00007f71

000082fc <TC3_Handler>:
{
    82fc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    82fe:	4b02      	ldr	r3, [pc, #8]	; (8308 <TC3_Handler+0xc>)
    8300:	68d8      	ldr	r0, [r3, #12]
    8302:	4b02      	ldr	r3, [pc, #8]	; (830c <TC3_Handler+0x10>)
    8304:	4798      	blx	r3
    8306:	bd08      	pop	{r3, pc}
    8308:	20000998 	.word	0x20000998
    830c:	00007f71 	.word	0x00007f71

00008310 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8310:	2000      	movs	r0, #0
    8312:	4770      	bx	lr

00008314 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8314:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8316:	7c83      	ldrb	r3, [r0, #18]
    8318:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    831c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    831e:	f002 0107 	and.w	r1, r2, #7
    8322:	2901      	cmp	r1, #1
    8324:	d00b      	beq.n	833e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8326:	015a      	lsls	r2, r3, #5
    8328:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    832c:	2110      	movs	r1, #16
    832e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8332:	015b      	lsls	r3, r3, #5
    8334:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8338:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    833c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    833e:	f012 0f40 	tst.w	r2, #64	; 0x40
    8342:	d00c      	beq.n	835e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    8344:	7cc2      	ldrb	r2, [r0, #19]
    8346:	f36f 1286 	bfc	r2, #6, #1
    834a:	74c2      	strb	r2, [r0, #19]
    834c:	015a      	lsls	r2, r3, #5
    834e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8352:	2180      	movs	r1, #128	; 0x80
    8354:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8358:	2140      	movs	r1, #64	; 0x40
    835a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    835e:	7cc2      	ldrb	r2, [r0, #19]
    8360:	f36f 02c3 	bfc	r2, #3, #1
    8364:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    8366:	490a      	ldr	r1, [pc, #40]	; (8390 <_usb_d_dev_handle_setup+0x7c>)
    8368:	015a      	lsls	r2, r3, #5
    836a:	188c      	adds	r4, r1, r2
    836c:	2500      	movs	r5, #0
    836e:	72a5      	strb	r5, [r4, #10]
    8370:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8372:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8376:	246f      	movs	r4, #111	; 0x6f
    8378:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    837c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8380:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8384:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    8388:	7c80      	ldrb	r0, [r0, #18]
    838a:	4798      	blx	r3
    838c:	bd38      	pop	{r3, r4, r5, pc}
    838e:	bf00      	nop
    8390:	200009a8 	.word	0x200009a8

00008394 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8394:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8396:	2320      	movs	r3, #32
    8398:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    839c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    839e:	7c83      	ldrb	r3, [r0, #18]
    83a0:	f003 030f 	and.w	r3, r3, #15
    83a4:	015b      	lsls	r3, r3, #5
    83a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    83aa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    83ae:	4b04      	ldr	r3, [pc, #16]	; (83c0 <_usb_d_dev_handle_stall+0x2c>)
    83b0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    83b4:	6882      	ldr	r2, [r0, #8]
    83b6:	2101      	movs	r1, #1
    83b8:	7c80      	ldrb	r0, [r0, #18]
    83ba:	4798      	blx	r3
    83bc:	bd08      	pop	{r3, pc}
    83be:	bf00      	nop
    83c0:	200009a8 	.word	0x200009a8

000083c4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    83c4:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    83c6:	7c84      	ldrb	r4, [r0, #18]
    83c8:	2cff      	cmp	r4, #255	; 0xff
    83ca:	d003      	beq.n	83d4 <_usb_d_dev_trans_done+0x10>
    83cc:	7cc3      	ldrb	r3, [r0, #19]
    83ce:	f013 0f40 	tst.w	r3, #64	; 0x40
    83d2:	d100      	bne.n	83d6 <_usb_d_dev_trans_done+0x12>
    83d4:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    83d6:	7cc2      	ldrb	r2, [r0, #19]
    83d8:	f36f 1286 	bfc	r2, #6, #1
    83dc:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    83de:	4a03      	ldr	r2, [pc, #12]	; (83ec <_usb_d_dev_trans_done+0x28>)
    83e0:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    83e4:	6882      	ldr	r2, [r0, #8]
    83e6:	4620      	mov	r0, r4
    83e8:	47a8      	blx	r5
    83ea:	e7f3      	b.n	83d4 <_usb_d_dev_trans_done+0x10>
    83ec:	200009a8 	.word	0x200009a8

000083f0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    83f0:	b530      	push	{r4, r5, lr}
    83f2:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    83f4:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    83f6:	2425      	movs	r4, #37	; 0x25
    83f8:	f88d 4004 	strb.w	r4, [sp, #4]
    83fc:	244a      	movs	r4, #74	; 0x4a
    83fe:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8402:	2bff      	cmp	r3, #255	; 0xff
    8404:	d01e      	beq.n	8444 <_usb_d_dev_trans_stop+0x54>
    8406:	7cc4      	ldrb	r4, [r0, #19]
    8408:	f014 0f40 	tst.w	r4, #64	; 0x40
    840c:	d01a      	beq.n	8444 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    840e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8412:	b1c9      	cbz	r1, 8448 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8414:	0163      	lsls	r3, r4, #5
    8416:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    841a:	2580      	movs	r5, #128	; 0x80
    841c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8420:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8422:	a902      	add	r1, sp, #8
    8424:	440b      	add	r3, r1
    8426:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    842a:	0163      	lsls	r3, r4, #5
    842c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8430:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8434:	0163      	lsls	r3, r4, #5
    8436:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    843a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    843e:	4611      	mov	r1, r2
    8440:	4b05      	ldr	r3, [pc, #20]	; (8458 <_usb_d_dev_trans_stop+0x68>)
    8442:	4798      	blx	r3
}
    8444:	b003      	add	sp, #12
    8446:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8448:	0163      	lsls	r3, r4, #5
    844a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    844e:	2540      	movs	r5, #64	; 0x40
    8450:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    8454:	e7e4      	b.n	8420 <_usb_d_dev_trans_stop+0x30>
    8456:	bf00      	nop
    8458:	000083c5 	.word	0x000083c5

0000845c <_usb_d_dev_handle_trfail>:
{
    845c:	b530      	push	{r4, r5, lr}
    845e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8460:	7c83      	ldrb	r3, [r0, #18]
    8462:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8466:	2204      	movs	r2, #4
    8468:	f88d 2004 	strb.w	r2, [sp, #4]
    846c:	2208      	movs	r2, #8
    846e:	f88d 2005 	strb.w	r2, [sp, #5]
    8472:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    8474:	460c      	mov	r4, r1
    8476:	b391      	cbz	r1, 84de <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8478:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    847c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8480:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    8484:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    8488:	4a32      	ldr	r2, [pc, #200]	; (8554 <_usb_d_dev_handle_trfail+0xf8>)
    848a:	440a      	add	r2, r1
    848c:	7a91      	ldrb	r1, [r2, #10]
    848e:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8490:	2d02      	cmp	r5, #2
    8492:	d02c      	beq.n	84ee <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    8494:	f011 0f02 	tst.w	r1, #2
    8498:	d045      	beq.n	8526 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    849a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    849c:	7a91      	ldrb	r1, [r2, #10]
    849e:	f36f 0141 	bfc	r1, #1, #1
    84a2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    84a4:	aa02      	add	r2, sp, #8
    84a6:	4422      	add	r2, r4
    84a8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    84ac:	015a      	lsls	r2, r3, #5
    84ae:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    84b2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    84b6:	015b      	lsls	r3, r3, #5
    84b8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    84bc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    84c0:	f005 0307 	and.w	r3, r5, #7
    84c4:	2b01      	cmp	r3, #1
    84c6:	d143      	bne.n	8550 <_usb_d_dev_handle_trfail+0xf4>
    84c8:	7cc3      	ldrb	r3, [r0, #19]
    84ca:	f013 0f40 	tst.w	r3, #64	; 0x40
    84ce:	d03f      	beq.n	8550 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    84d0:	09d9      	lsrs	r1, r3, #7
    84d2:	428c      	cmp	r4, r1
    84d4:	d03c      	beq.n	8550 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    84d6:	2200      	movs	r2, #0
    84d8:	4b1f      	ldr	r3, [pc, #124]	; (8558 <_usb_d_dev_handle_trfail+0xfc>)
    84da:	4798      	blx	r3
    84dc:	e038      	b.n	8550 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    84de:	0159      	lsls	r1, r3, #5
    84e0:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    84e4:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    84e8:	f005 0507 	and.w	r5, r5, #7
    84ec:	e7ca      	b.n	8484 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    84ee:	f011 0f01 	tst.w	r1, #1
    84f2:	d0cf      	beq.n	8494 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    84f4:	7a91      	ldrb	r1, [r2, #10]
    84f6:	f36f 0100 	bfc	r1, #0, #1
    84fa:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    84fc:	aa02      	add	r2, sp, #8
    84fe:	4422      	add	r2, r4
    8500:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8504:	015a      	lsls	r2, r3, #5
    8506:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    850a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    850e:	015b      	lsls	r3, r3, #5
    8510:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8514:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8518:	2204      	movs	r2, #4
    851a:	1c21      	adds	r1, r4, #0
    851c:	bf18      	it	ne
    851e:	2101      	movne	r1, #1
    8520:	4b0d      	ldr	r3, [pc, #52]	; (8558 <_usb_d_dev_handle_trfail+0xfc>)
    8522:	4798      	blx	r3
    8524:	e014      	b.n	8550 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    8526:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    852a:	4a0a      	ldr	r2, [pc, #40]	; (8554 <_usb_d_dev_handle_trfail+0xf8>)
    852c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8530:	2100      	movs	r1, #0
    8532:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8534:	aa02      	add	r2, sp, #8
    8536:	4414      	add	r4, r2
    8538:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    853c:	015a      	lsls	r2, r3, #5
    853e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8542:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8546:	015b      	lsls	r3, r3, #5
    8548:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    854c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    8550:	b003      	add	sp, #12
    8552:	bd30      	pop	{r4, r5, pc}
    8554:	200009a8 	.word	0x200009a8
    8558:	000083f1 	.word	0x000083f1

0000855c <_usb_d_dev_reset_epts>:
{
    855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8560:	4d0c      	ldr	r5, [pc, #48]	; (8594 <_usb_d_dev_reset_epts+0x38>)
    8562:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    8566:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    856a:	f04f 0803 	mov.w	r8, #3
    856e:	4f0a      	ldr	r7, [pc, #40]	; (8598 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    8570:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8572:	4641      	mov	r1, r8
    8574:	4620      	mov	r0, r4
    8576:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    8578:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    857a:	2300      	movs	r3, #0
    857c:	74e3      	strb	r3, [r4, #19]
    857e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8580:	42ac      	cmp	r4, r5
    8582:	d1f6      	bne.n	8572 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    8584:	22c0      	movs	r2, #192	; 0xc0
    8586:	4619      	mov	r1, r3
    8588:	4802      	ldr	r0, [pc, #8]	; (8594 <_usb_d_dev_reset_epts+0x38>)
    858a:	4b04      	ldr	r3, [pc, #16]	; (859c <_usb_d_dev_reset_epts+0x40>)
    858c:	4798      	blx	r3
    858e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8592:	bf00      	nop
    8594:	200009a8 	.word	0x200009a8
    8598:	000083c5 	.word	0x000083c5
    859c:	0000bfbb 	.word	0x0000bfbb

000085a0 <_usb_d_dev_in_next>:
{
    85a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85a4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    85a6:	7c84      	ldrb	r4, [r0, #18]
    85a8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    85ac:	4688      	mov	r8, r1
    85ae:	2900      	cmp	r1, #0
    85b0:	f000 80a0 	beq.w	86f4 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    85b4:	4b58      	ldr	r3, [pc, #352]	; (8718 <_usb_d_dev_in_next+0x178>)
    85b6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    85ba:	6958      	ldr	r0, [r3, #20]
    85bc:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    85c0:	8a2b      	ldrh	r3, [r5, #16]
    85c2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    85c6:	4293      	cmp	r3, r2
    85c8:	f000 808e 	beq.w	86e8 <_usb_d_dev_in_next+0x148>
    85cc:	3b01      	subs	r3, #1
    85ce:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    85d0:	7cef      	ldrb	r7, [r5, #19]
    85d2:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    85d6:	f1b8 0f00 	cmp.w	r8, #0
    85da:	d005      	beq.n	85e8 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    85dc:	0162      	lsls	r2, r4, #5
    85de:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    85e2:	2302      	movs	r3, #2
    85e4:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    85e8:	68a9      	ldr	r1, [r5, #8]
    85ea:	eb0e 0301 	add.w	r3, lr, r1
    85ee:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    85f0:	686e      	ldr	r6, [r5, #4]
    85f2:	42b3      	cmp	r3, r6
    85f4:	d23f      	bcs.n	8676 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    85f6:	1af6      	subs	r6, r6, r3
    85f8:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    85fa:	7cea      	ldrb	r2, [r5, #19]
    85fc:	f012 0f20 	tst.w	r2, #32
    8600:	d02d      	beq.n	865e <_usb_d_dev_in_next+0xbe>
    8602:	8a2a      	ldrh	r2, [r5, #16]
    8604:	4296      	cmp	r6, r2
    8606:	bf28      	it	cs
    8608:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    860a:	6829      	ldr	r1, [r5, #0]
    860c:	4632      	mov	r2, r6
    860e:	4419      	add	r1, r3
    8610:	68e8      	ldr	r0, [r5, #12]
    8612:	4b42      	ldr	r3, [pc, #264]	; (871c <_usb_d_dev_in_next+0x17c>)
    8614:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8616:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8618:	4b3f      	ldr	r3, [pc, #252]	; (8718 <_usb_d_dev_in_next+0x178>)
    861a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    861e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8620:	4b3d      	ldr	r3, [pc, #244]	; (8718 <_usb_d_dev_in_next+0x178>)
    8622:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8626:	695a      	ldr	r2, [r3, #20]
    8628:	f366 020d 	bfi	r2, r6, #0, #14
    862c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    862e:	695a      	ldr	r2, [r3, #20]
    8630:	f36f 329b 	bfc	r2, #14, #14
    8634:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8636:	f1b8 0f00 	cmp.w	r8, #0
    863a:	d108      	bne.n	864e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    863c:	2f01      	cmp	r7, #1
    863e:	bf0c      	ite	eq
    8640:	224e      	moveq	r2, #78	; 0x4e
    8642:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8644:	0163      	lsls	r3, r4, #5
    8646:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    864a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    864e:	0164      	lsls	r4, r4, #5
    8650:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8654:	2380      	movs	r3, #128	; 0x80
    8656:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    865a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    865e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8662:	bf28      	it	cs
    8664:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8668:	6829      	ldr	r1, [r5, #0]
    866a:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    866c:	4a2a      	ldr	r2, [pc, #168]	; (8718 <_usb_d_dev_in_next+0x178>)
    866e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    8672:	6113      	str	r3, [r2, #16]
    8674:	e7d4      	b.n	8620 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    8676:	7ceb      	ldrb	r3, [r5, #19]
    8678:	f013 0f10 	tst.w	r3, #16
    867c:	d00f      	beq.n	869e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    867e:	7ceb      	ldrb	r3, [r5, #19]
    8680:	f36f 1304 	bfc	r3, #4, #1
    8684:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8686:	4b24      	ldr	r3, [pc, #144]	; (8718 <_usb_d_dev_in_next+0x178>)
    8688:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    868c:	695a      	ldr	r2, [r3, #20]
    868e:	f36f 020d 	bfc	r2, #0, #14
    8692:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8694:	695a      	ldr	r2, [r3, #20]
    8696:	f36f 329b 	bfc	r2, #14, #14
    869a:	615a      	str	r2, [r3, #20]
    869c:	e7cb      	b.n	8636 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    869e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    86a0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    86a4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    86a8:	bf0c      	ite	eq
    86aa:	234b      	moveq	r3, #75	; 0x4b
    86ac:	234a      	movne	r3, #74	; 0x4a
    86ae:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    86b2:	8a2a      	ldrh	r2, [r5, #16]
    86b4:	ea00 030e 	and.w	r3, r0, lr
    86b8:	429a      	cmp	r2, r3
    86ba:	d005      	beq.n	86c8 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    86bc:	2100      	movs	r1, #0
    86be:	4628      	mov	r0, r5
    86c0:	4b17      	ldr	r3, [pc, #92]	; (8720 <_usb_d_dev_in_next+0x180>)
    86c2:	4798      	blx	r3
	return;
    86c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    86c8:	7ceb      	ldrb	r3, [r5, #19]
    86ca:	f36f 1386 	bfc	r3, #6, #1
    86ce:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    86d0:	4b11      	ldr	r3, [pc, #68]	; (8718 <_usb_d_dev_in_next+0x178>)
    86d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    86d6:	68a9      	ldr	r1, [r5, #8]
    86d8:	7ca8      	ldrb	r0, [r5, #18]
    86da:	4798      	blx	r3
    86dc:	b9d0      	cbnz	r0, 8714 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    86de:	7ceb      	ldrb	r3, [r5, #19]
    86e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    86e4:	74eb      	strb	r3, [r5, #19]
    86e6:	e7e9      	b.n	86bc <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    86e8:	7cef      	ldrb	r7, [r5, #19]
    86ea:	f007 0707 	and.w	r7, r7, #7
    86ee:	f240 30ff 	movw	r0, #1023	; 0x3ff
    86f2:	e773      	b.n	85dc <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    86f4:	8a03      	ldrh	r3, [r0, #16]
    86f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    86fa:	4293      	cmp	r3, r2
    86fc:	d107      	bne.n	870e <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    86fe:	7cef      	ldrb	r7, [r5, #19]
    8700:	f007 0707 	and.w	r7, r7, #7
    8704:	f04f 0e00 	mov.w	lr, #0
    8708:	f240 30ff 	movw	r0, #1023	; 0x3ff
    870c:	e76c      	b.n	85e8 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    870e:	f04f 0e00 	mov.w	lr, #0
    8712:	e75b      	b.n	85cc <_usb_d_dev_in_next+0x2c>
    8714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8718:	200009a8 	.word	0x200009a8
    871c:	0000bfa5 	.word	0x0000bfa5
    8720:	000083c5 	.word	0x000083c5

00008724 <_usb_d_dev_out_next>:
{
    8724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8728:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    872a:	7c85      	ldrb	r5, [r0, #18]
    872c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8730:	4689      	mov	r9, r1
    8732:	2900      	cmp	r1, #0
    8734:	d056      	beq.n	87e4 <_usb_d_dev_out_next+0xc0>
    8736:	4b74      	ldr	r3, [pc, #464]	; (8908 <_usb_d_dev_out_next+0x1e4>)
    8738:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    873c:	685a      	ldr	r2, [r3, #4]
    873e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8742:	685f      	ldr	r7, [r3, #4]
    8744:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8748:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    874a:	8a06      	ldrh	r6, [r0, #16]
    874c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8750:	429e      	cmp	r6, r3
    8752:	f000 80ba 	beq.w	88ca <_usb_d_dev_out_next+0x1a6>
    8756:	3e01      	subs	r6, #1
    8758:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    875a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    875e:	f894 8013 	ldrb.w	r8, [r4, #19]
    8762:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8766:	f1b9 0f00 	cmp.w	r9, #0
    876a:	d005      	beq.n	8778 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    876c:	016b      	lsls	r3, r5, #5
    876e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8772:	2201      	movs	r2, #1
    8774:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8778:	7ce3      	ldrb	r3, [r4, #19]
    877a:	f013 0f20 	tst.w	r3, #32
    877e:	d00d      	beq.n	879c <_usb_d_dev_out_next+0x78>
    8780:	6862      	ldr	r2, [r4, #4]
    8782:	2a00      	cmp	r2, #0
    8784:	d037      	beq.n	87f6 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8786:	68a0      	ldr	r0, [r4, #8]
    8788:	1a12      	subs	r2, r2, r0
    878a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    878c:	6823      	ldr	r3, [r4, #0]
    878e:	42ba      	cmp	r2, r7
    8790:	bf28      	it	cs
    8792:	463a      	movcs	r2, r7
    8794:	68e1      	ldr	r1, [r4, #12]
    8796:	4418      	add	r0, r3
    8798:	4b5c      	ldr	r3, [pc, #368]	; (890c <_usb_d_dev_out_next+0x1e8>)
    879a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    879c:	6863      	ldr	r3, [r4, #4]
    879e:	b353      	cbz	r3, 87f6 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    87a0:	f1b9 0f00 	cmp.w	r9, #0
    87a4:	d040      	beq.n	8828 <_usb_d_dev_out_next+0x104>
    87a6:	8a22      	ldrh	r2, [r4, #16]
    87a8:	42ba      	cmp	r2, r7
    87aa:	d93d      	bls.n	8828 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    87ac:	7ce3      	ldrb	r3, [r4, #19]
    87ae:	f36f 1304 	bfc	r3, #4, #1
    87b2:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    87b4:	68a3      	ldr	r3, [r4, #8]
    87b6:	445b      	add	r3, fp
    87b8:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    87ba:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    87be:	ea4f 1345 	mov.w	r3, r5, lsl #5
    87c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    87c6:	bf0c      	ite	eq
    87c8:	222d      	moveq	r2, #45	; 0x2d
    87ca:	2225      	movne	r2, #37	; 0x25
    87cc:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    87d0:	b915      	cbnz	r5, 87d8 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    87d2:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    87d4:	4b4c      	ldr	r3, [pc, #304]	; (8908 <_usb_d_dev_out_next+0x1e4>)
    87d6:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    87d8:	2100      	movs	r1, #0
    87da:	4620      	mov	r0, r4
    87dc:	4b4c      	ldr	r3, [pc, #304]	; (8910 <_usb_d_dev_out_next+0x1ec>)
    87de:	4798      	blx	r3
	return;
    87e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    87e4:	8a06      	ldrh	r6, [r0, #16]
    87e6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    87ea:	429e      	cmp	r6, r3
    87ec:	d07b      	beq.n	88e6 <_usb_d_dev_out_next+0x1c2>
    87ee:	f04f 0b00 	mov.w	fp, #0
    87f2:	46da      	mov	sl, fp
    87f4:	e7af      	b.n	8756 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    87f6:	7ce3      	ldrb	r3, [r4, #19]
    87f8:	f013 0f10 	tst.w	r3, #16
    87fc:	d06c      	beq.n	88d8 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    87fe:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8800:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8804:	f043 0320 	orr.w	r3, r3, #32
    8808:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    880a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    880c:	493e      	ldr	r1, [pc, #248]	; (8908 <_usb_d_dev_out_next+0x1e4>)
    880e:	016a      	lsls	r2, r5, #5
    8810:	188b      	adds	r3, r1, r2
    8812:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8814:	8a21      	ldrh	r1, [r4, #16]
    8816:	685a      	ldr	r2, [r3, #4]
    8818:	f361 329b 	bfi	r2, r1, #14, #14
    881c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    881e:	685a      	ldr	r2, [r3, #4]
    8820:	f36f 020d 	bfc	r2, #0, #14
    8824:	605a      	str	r2, [r3, #4]
    8826:	e01d      	b.n	8864 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8828:	68a2      	ldr	r2, [r4, #8]
    882a:	4452      	add	r2, sl
    882c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    882e:	4293      	cmp	r3, r2
    8830:	d9c3      	bls.n	87ba <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8832:	1a9b      	subs	r3, r3, r2
    8834:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8836:	7ce1      	ldrb	r1, [r4, #19]
    8838:	f011 0f20 	tst.w	r1, #32
    883c:	d026      	beq.n	888c <_usb_d_dev_out_next+0x168>
    883e:	8a22      	ldrh	r2, [r4, #16]
    8840:	4293      	cmp	r3, r2
    8842:	bf28      	it	cs
    8844:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8846:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8848:	016a      	lsls	r2, r5, #5
    884a:	492f      	ldr	r1, [pc, #188]	; (8908 <_usb_d_dev_out_next+0x1e4>)
    884c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    884e:	4a2e      	ldr	r2, [pc, #184]	; (8908 <_usb_d_dev_out_next+0x1e4>)
    8850:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8854:	6851      	ldr	r1, [r2, #4]
    8856:	f363 319b 	bfi	r1, r3, #14, #14
    885a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    885c:	6853      	ldr	r3, [r2, #4]
    885e:	f36f 030d 	bfc	r3, #0, #14
    8862:	6053      	str	r3, [r2, #4]
	if (!isr) {
    8864:	f1b9 0f00 	cmp.w	r9, #0
    8868:	d108      	bne.n	887c <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    886a:	f1b8 0f01 	cmp.w	r8, #1
    886e:	d025      	beq.n	88bc <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    8870:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8872:	016b      	lsls	r3, r5, #5
    8874:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8878:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    887c:	016d      	lsls	r5, r5, #5
    887e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    8882:	2340      	movs	r3, #64	; 0x40
    8884:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    8888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    888c:	8a21      	ldrh	r1, [r4, #16]
    888e:	428b      	cmp	r3, r1
    8890:	d90a      	bls.n	88a8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8896:	d80e      	bhi.n	88b6 <_usb_d_dev_out_next+0x192>
    8898:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    889c:	6821      	ldr	r1, [r4, #0]
    889e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    88a0:	0169      	lsls	r1, r5, #5
    88a2:	4819      	ldr	r0, [pc, #100]	; (8908 <_usb_d_dev_out_next+0x1e4>)
    88a4:	5042      	str	r2, [r0, r1]
    88a6:	e7d2      	b.n	884e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    88a8:	428b      	cmp	r3, r1
    88aa:	d2f7      	bcs.n	889c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    88ac:	7ce1      	ldrb	r1, [r4, #19]
    88ae:	f041 0120 	orr.w	r1, r1, #32
    88b2:	74e1      	strb	r1, [r4, #19]
    88b4:	e7f2      	b.n	889c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    88b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    88ba:	e7ef      	b.n	889c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    88bc:	4b12      	ldr	r3, [pc, #72]	; (8908 <_usb_d_dev_out_next+0x1e4>)
    88be:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    88c2:	2200      	movs	r2, #0
    88c4:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    88c6:	222d      	movs	r2, #45	; 0x2d
    88c8:	e7d3      	b.n	8872 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    88ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    88ce:	f890 8013 	ldrb.w	r8, [r0, #19]
    88d2:	f008 0807 	and.w	r8, r8, #7
    88d6:	e749      	b.n	876c <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    88d8:	f1b9 0f00 	cmp.w	r9, #0
    88dc:	d10b      	bne.n	88f6 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    88de:	68a3      	ldr	r3, [r4, #8]
    88e0:	4453      	add	r3, sl
    88e2:	60a3      	str	r3, [r4, #8]
    88e4:	e769      	b.n	87ba <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    88e6:	f890 8013 	ldrb.w	r8, [r0, #19]
    88ea:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    88ee:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    88f0:	46bb      	mov	fp, r7
    88f2:	46ba      	mov	sl, r7
    88f4:	e740      	b.n	8778 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    88f6:	8a23      	ldrh	r3, [r4, #16]
    88f8:	42bb      	cmp	r3, r7
    88fa:	f63f af57 	bhi.w	87ac <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    88fe:	68a3      	ldr	r3, [r4, #8]
    8900:	4453      	add	r3, sl
    8902:	60a3      	str	r3, [r4, #8]
    8904:	e759      	b.n	87ba <_usb_d_dev_out_next+0x96>
    8906:	bf00      	nop
    8908:	200009a8 	.word	0x200009a8
    890c:	0000bfa5 	.word	0x0000bfa5
    8910:	000083c5 	.word	0x000083c5

00008914 <_usb_d_dev_handler>:
{
    8914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8918:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    891c:	8c1e      	ldrh	r6, [r3, #32]
    891e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8920:	b146      	cbz	r6, 8934 <_usb_d_dev_handler+0x20>
    8922:	4d96      	ldr	r5, [pc, #600]	; (8b7c <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8924:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8926:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    892a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8b98 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    892e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8b9c <_usb_d_dev_handler+0x288>
    8932:	e0de      	b.n	8af2 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8934:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8936:	8b1b      	ldrh	r3, [r3, #24]
    8938:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    893a:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    893c:	f013 0f04 	tst.w	r3, #4
    8940:	d11e      	bne.n	8980 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8942:	f413 7f00 	tst.w	r3, #512	; 0x200
    8946:	d125      	bne.n	8994 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8948:	f013 0f80 	tst.w	r3, #128	; 0x80
    894c:	d14f      	bne.n	89ee <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    894e:	f013 0f70 	tst.w	r3, #112	; 0x70
    8952:	d158      	bne.n	8a06 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8954:	f013 0f08 	tst.w	r3, #8
    8958:	d178      	bne.n	8a4c <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    895a:	f013 0f01 	tst.w	r3, #1
    895e:	d0e0      	beq.n	8922 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8960:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8964:	f240 2201 	movw	r2, #513	; 0x201
    8968:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    896a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    896c:	2270      	movs	r2, #112	; 0x70
    896e:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8970:	4b83      	ldr	r3, [pc, #524]	; (8b80 <_usb_d_dev_handler+0x26c>)
    8972:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8976:	2100      	movs	r1, #0
    8978:	2004      	movs	r0, #4
    897a:	4798      	blx	r3
    897c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8980:	2204      	movs	r2, #4
    8982:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8986:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    8988:	4b7d      	ldr	r3, [pc, #500]	; (8b80 <_usb_d_dev_handler+0x26c>)
    898a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    898e:	4798      	blx	r3
    8990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8994:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8998:	f240 2201 	movw	r2, #513	; 0x201
    899c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    899e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    89a0:	2270      	movs	r2, #112	; 0x70
    89a2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    89a4:	4b76      	ldr	r3, [pc, #472]	; (8b80 <_usb_d_dev_handler+0x26c>)
    89a6:	891b      	ldrh	r3, [r3, #8]
    89a8:	f003 030f 	and.w	r3, r3, #15
    89ac:	2b03      	cmp	r3, #3
    89ae:	d014      	beq.n	89da <_usb_d_dev_handler+0xc6>
    89b0:	2301      	movs	r3, #1
    89b2:	4873      	ldr	r0, [pc, #460]	; (8b80 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    89b4:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    89b6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    89ba:	8912      	ldrh	r2, [r2, #8]
    89bc:	f002 020f 	and.w	r2, r2, #15
    89c0:	2a03      	cmp	r2, #3
    89c2:	d00b      	beq.n	89dc <_usb_d_dev_handler+0xc8>
    89c4:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    89c6:	2b05      	cmp	r3, #5
    89c8:	d1f4      	bne.n	89b4 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    89ca:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    89cc:	4b6c      	ldr	r3, [pc, #432]	; (8b80 <_usb_d_dev_handler+0x26c>)
    89ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    89d2:	2003      	movs	r0, #3
    89d4:	4798      	blx	r3
    89d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    89da:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    89dc:	4b68      	ldr	r3, [pc, #416]	; (8b80 <_usb_d_dev_handler+0x26c>)
    89de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    89e2:	8919      	ldrh	r1, [r3, #8]
    89e4:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    89e8:	2200      	movs	r2, #0
    89ea:	811a      	strh	r2, [r3, #8]
    89ec:	e7ee      	b.n	89cc <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    89ee:	2280      	movs	r2, #128	; 0x80
    89f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89f4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    89f6:	4b62      	ldr	r3, [pc, #392]	; (8b80 <_usb_d_dev_handler+0x26c>)
    89f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    89fc:	2100      	movs	r1, #0
    89fe:	2005      	movs	r0, #5
    8a00:	4798      	blx	r3
    8a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8a06:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a0a:	2270      	movs	r2, #112	; 0x70
    8a0c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8a0e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8a10:	f240 2201 	movw	r2, #513	; 0x201
    8a14:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8a16:	4b5b      	ldr	r3, [pc, #364]	; (8b84 <_usb_d_dev_handler+0x270>)
    8a18:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8a1c:	f013 0f01 	tst.w	r3, #1
    8a20:	d00e      	beq.n	8a40 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8a22:	4a58      	ldr	r2, [pc, #352]	; (8b84 <_usb_d_dev_handler+0x270>)
    8a24:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8a26:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8a2a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8a2e:	d1f9      	bne.n	8a24 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8a30:	4b53      	ldr	r3, [pc, #332]	; (8b80 <_usb_d_dev_handler+0x26c>)
    8a32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8a36:	2100      	movs	r1, #0
    8a38:	2002      	movs	r0, #2
    8a3a:	4798      	blx	r3
    8a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8a40:	4a50      	ldr	r2, [pc, #320]	; (8b84 <_usb_d_dev_handler+0x270>)
    8a42:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8a44:	f413 7f80 	tst.w	r3, #256	; 0x100
    8a48:	d0fb      	beq.n	8a42 <_usb_d_dev_handler+0x12e>
    8a4a:	e7f1      	b.n	8a30 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8a4c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a50:	2400      	movs	r4, #0
    8a52:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8a56:	2208      	movs	r2, #8
    8a58:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8a5a:	2270      	movs	r2, #112	; 0x70
    8a5c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8a5e:	f240 2201 	movw	r2, #513	; 0x201
    8a62:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    8a64:	4b48      	ldr	r3, [pc, #288]	; (8b88 <_usb_d_dev_handler+0x274>)
    8a66:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8a68:	4b45      	ldr	r3, [pc, #276]	; (8b80 <_usb_d_dev_handler+0x26c>)
    8a6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8a6e:	4621      	mov	r1, r4
    8a70:	2001      	movs	r0, #1
    8a72:	4798      	blx	r3
    8a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8a78:	f011 0f10 	tst.w	r1, #16
    8a7c:	d109      	bne.n	8a92 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8a7e:	f011 0f40 	tst.w	r1, #64	; 0x40
    8a82:	d108      	bne.n	8a96 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8a84:	f011 0f20 	tst.w	r1, #32
    8a88:	d02f      	beq.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8a8a:	2100      	movs	r1, #0
    8a8c:	4b3f      	ldr	r3, [pc, #252]	; (8b8c <_usb_d_dev_handler+0x278>)
    8a8e:	4798      	blx	r3
    8a90:	e02b      	b.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    8a92:	47c8      	blx	r9
    8a94:	e029      	b.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8a96:	2101      	movs	r1, #1
    8a98:	4b3c      	ldr	r3, [pc, #240]	; (8b8c <_usb_d_dev_handler+0x278>)
    8a9a:	4798      	blx	r3
    8a9c:	e025      	b.n	8aea <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8a9e:	f011 0f40 	tst.w	r1, #64	; 0x40
    8aa2:	d111      	bne.n	8ac8 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8aa4:	f011 0f08 	tst.w	r1, #8
    8aa8:	d112      	bne.n	8ad0 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8aaa:	f011 0f02 	tst.w	r1, #2
    8aae:	d112      	bne.n	8ad6 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8ab0:	f003 0307 	and.w	r3, r3, #7
    8ab4:	2b01      	cmp	r3, #1
    8ab6:	d118      	bne.n	8aea <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8ab8:	f011 0f04 	tst.w	r1, #4
    8abc:	d10f      	bne.n	8ade <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8abe:	f011 0f10 	tst.w	r1, #16
    8ac2:	d012      	beq.n	8aea <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8ac4:	47c8      	blx	r9
    8ac6:	e010      	b.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8ac8:	2101      	movs	r1, #1
    8aca:	4b30      	ldr	r3, [pc, #192]	; (8b8c <_usb_d_dev_handler+0x278>)
    8acc:	4798      	blx	r3
    8ace:	e00c      	b.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8ad0:	2101      	movs	r1, #1
    8ad2:	47c0      	blx	r8
    8ad4:	e009      	b.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8ad6:	2101      	movs	r1, #1
    8ad8:	4b2d      	ldr	r3, [pc, #180]	; (8b90 <_usb_d_dev_handler+0x27c>)
    8ada:	4798      	blx	r3
    8adc:	e005      	b.n	8aea <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    8ade:	2100      	movs	r1, #0
    8ae0:	47c0      	blx	r8
    8ae2:	e002      	b.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8ae4:	2100      	movs	r1, #0
    8ae6:	4b29      	ldr	r3, [pc, #164]	; (8b8c <_usb_d_dev_handler+0x278>)
    8ae8:	4798      	blx	r3
    8aea:	3401      	adds	r4, #1
    8aec:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8aee:	2c1b      	cmp	r4, #27
    8af0:	d042      	beq.n	8b78 <_usb_d_dev_handler+0x264>
    8af2:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8af4:	7cab      	ldrb	r3, [r5, #18]
    8af6:	2bff      	cmp	r3, #255	; 0xff
    8af8:	d0f7      	beq.n	8aea <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8afa:	f003 030f 	and.w	r3, r3, #15
    8afe:	2101      	movs	r1, #1
    8b00:	4099      	lsls	r1, r3
    8b02:	4231      	tst	r1, r6
    8b04:	d0f1      	beq.n	8aea <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8b06:	0159      	lsls	r1, r3, #5
    8b08:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8b0c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8b10:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8b12:	015b      	lsls	r3, r3, #5
    8b14:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8b18:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8b1c:	4019      	ands	r1, r3
    8b1e:	d0e4      	beq.n	8aea <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8b20:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8b24:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8b28:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8b2c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8b30:	2a01      	cmp	r2, #1
    8b32:	d0a1      	beq.n	8a78 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8b34:	f013 0f80 	tst.w	r3, #128	; 0x80
    8b38:	d1b1      	bne.n	8a9e <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8b3a:	f011 0f20 	tst.w	r1, #32
    8b3e:	d1d1      	bne.n	8ae4 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8b40:	f011 0f04 	tst.w	r1, #4
    8b44:	d10e      	bne.n	8b64 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8b46:	f011 0f01 	tst.w	r1, #1
    8b4a:	d10e      	bne.n	8b6a <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8b4c:	f003 0307 	and.w	r3, r3, #7
    8b50:	2b01      	cmp	r3, #1
    8b52:	d1ca      	bne.n	8aea <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8b54:	f011 0f08 	tst.w	r1, #8
    8b58:	d10b      	bne.n	8b72 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8b5a:	f011 0f10 	tst.w	r1, #16
    8b5e:	d0c4      	beq.n	8aea <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8b60:	47c8      	blx	r9
    8b62:	e7c2      	b.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    8b64:	2100      	movs	r1, #0
    8b66:	47c0      	blx	r8
    8b68:	e7bf      	b.n	8aea <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    8b6a:	2101      	movs	r1, #1
    8b6c:	4b09      	ldr	r3, [pc, #36]	; (8b94 <_usb_d_dev_handler+0x280>)
    8b6e:	4798      	blx	r3
    8b70:	e7bb      	b.n	8aea <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    8b72:	2101      	movs	r1, #1
    8b74:	47c0      	blx	r8
    8b76:	e7b8      	b.n	8aea <_usb_d_dev_handler+0x1d6>
    8b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b7c:	20000a7c 	.word	0x20000a7c
    8b80:	200009a8 	.word	0x200009a8
    8b84:	40001000 	.word	0x40001000
    8b88:	0000855d 	.word	0x0000855d
    8b8c:	00008395 	.word	0x00008395
    8b90:	000085a1 	.word	0x000085a1
    8b94:	00008725 	.word	0x00008725
    8b98:	00008315 	.word	0x00008315
    8b9c:	0000845d 	.word	0x0000845d

00008ba0 <_usb_d_dev_init>:
{
    8ba0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8ba2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ba6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    8ba8:	f013 0f01 	tst.w	r3, #1
    8bac:	d124      	bne.n	8bf8 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8bae:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8bb2:	7893      	ldrb	r3, [r2, #2]
    8bb4:	f013 0f03 	tst.w	r3, #3
    8bb8:	d1fb      	bne.n	8bb2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8bba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8bbe:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    8bc0:	f013 0f02 	tst.w	r3, #2
    8bc4:	d00f      	beq.n	8be6 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8bc6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8bca:	7813      	ldrb	r3, [r2, #0]
    8bcc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8bd0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8bd2:	7893      	ldrb	r3, [r2, #2]
    8bd4:	f013 0f03 	tst.w	r3, #3
    8bd8:	d1fb      	bne.n	8bd2 <_usb_d_dev_init+0x32>
    8bda:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8bde:	7893      	ldrb	r3, [r2, #2]
    8be0:	f013 0f02 	tst.w	r3, #2
    8be4:	d1fb      	bne.n	8bde <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8be6:	2201      	movs	r2, #1
    8be8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8bec:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8bee:	461a      	mov	r2, r3
    8bf0:	7893      	ldrb	r3, [r2, #2]
    8bf2:	f013 0f03 	tst.w	r3, #3
    8bf6:	d1fb      	bne.n	8bf0 <_usb_d_dev_init+0x50>
    8bf8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8bfc:	7893      	ldrb	r3, [r2, #2]
    8bfe:	f013 0f01 	tst.w	r3, #1
    8c02:	d1fb      	bne.n	8bfc <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8c04:	4b24      	ldr	r3, [pc, #144]	; (8c98 <_usb_d_dev_init+0xf8>)
    8c06:	4a25      	ldr	r2, [pc, #148]	; (8c9c <_usb_d_dev_init+0xfc>)
    8c08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8c0c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    8c10:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8c14:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8c18:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    8c1c:	4b20      	ldr	r3, [pc, #128]	; (8ca0 <_usb_d_dev_init+0x100>)
    8c1e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8c20:	4b20      	ldr	r3, [pc, #128]	; (8ca4 <_usb_d_dev_init+0x104>)
    8c22:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8c24:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8c28:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8c2c:	f011 011f 	ands.w	r1, r1, #31
    8c30:	d02b      	beq.n	8c8a <_usb_d_dev_init+0xea>
		pad_transn = 9;
    8c32:	291f      	cmp	r1, #31
    8c34:	bf08      	it	eq
    8c36:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8c38:	b34b      	cbz	r3, 8c8e <_usb_d_dev_init+0xee>
		pad_transp = 25;
    8c3a:	2b1f      	cmp	r3, #31
    8c3c:	bf08      	it	eq
    8c3e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    8c40:	b33a      	cbz	r2, 8c92 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    8c42:	2a07      	cmp	r2, #7
    8c44:	bf08      	it	eq
    8c46:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8c48:	f003 031f 	and.w	r3, r3, #31
    8c4c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    8c50:	0312      	lsls	r2, r2, #12
    8c52:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    8c56:	4313      	orrs	r3, r2
    8c58:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8c5c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8c5e:	78d3      	ldrb	r3, [r2, #3]
    8c60:	f043 0303 	orr.w	r3, r3, #3
    8c64:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8c66:	78d3      	ldrb	r3, [r2, #3]
    8c68:	f043 030c 	orr.w	r3, r3, #12
    8c6c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8c6e:	2304      	movs	r3, #4
    8c70:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8c72:	7893      	ldrb	r3, [r2, #2]
    8c74:	f013 0f03 	tst.w	r3, #3
    8c78:	d1fb      	bne.n	8c72 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8c7a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c7e:	4a06      	ldr	r2, [pc, #24]	; (8c98 <_usb_d_dev_init+0xf8>)
    8c80:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8c82:	2201      	movs	r2, #1
    8c84:	811a      	strh	r2, [r3, #8]
}
    8c86:	2000      	movs	r0, #0
    8c88:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    8c8a:	2109      	movs	r1, #9
    8c8c:	e7d4      	b.n	8c38 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    8c8e:	2319      	movs	r3, #25
    8c90:	e7d6      	b.n	8c40 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    8c92:	2206      	movs	r2, #6
    8c94:	e7d8      	b.n	8c48 <_usb_d_dev_init+0xa8>
    8c96:	bf00      	nop
    8c98:	200009a8 	.word	0x200009a8
    8c9c:	00008311 	.word	0x00008311
    8ca0:	0000855d 	.word	0x0000855d
    8ca4:	00800084 	.word	0x00800084

00008ca8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8ca8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8cac:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    8cae:	f013 0f03 	tst.w	r3, #3
    8cb2:	d129      	bne.n	8d08 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8cb4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8cb8:	7893      	ldrb	r3, [r2, #2]
    8cba:	f013 0f03 	tst.w	r3, #3
    8cbe:	d1fb      	bne.n	8cb8 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8cc0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8cc4:	781b      	ldrb	r3, [r3, #0]
    8cc6:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8cc8:	f013 0f02 	tst.w	r3, #2
    8ccc:	d108      	bne.n	8ce0 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    8cce:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8cd2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8cd6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8cd8:	7893      	ldrb	r3, [r2, #2]
    8cda:	f013 0f03 	tst.w	r3, #3
    8cde:	d1fb      	bne.n	8cd8 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ce0:	4b0b      	ldr	r3, [pc, #44]	; (8d10 <_usb_d_dev_enable+0x68>)
    8ce2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8ce6:	609a      	str	r2, [r3, #8]
    8ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8cec:	609a      	str	r2, [r3, #8]
    8cee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8cf2:	609a      	str	r2, [r3, #8]
    8cf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8cf8:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8cfa:	f240 228d 	movw	r2, #653	; 0x28d
    8cfe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d02:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8d04:	2000      	movs	r0, #0
    8d06:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8d08:	f06f 0010 	mvn.w	r0, #16
}
    8d0c:	4770      	bx	lr
    8d0e:	bf00      	nop
    8d10:	e000e100 	.word	0xe000e100

00008d14 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8d14:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8d18:	8913      	ldrh	r3, [r2, #8]
    8d1a:	f023 0301 	bic.w	r3, r3, #1
    8d1e:	041b      	lsls	r3, r3, #16
    8d20:	0c1b      	lsrs	r3, r3, #16
    8d22:	8113      	strh	r3, [r2, #8]
    8d24:	4770      	bx	lr

00008d26 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8d26:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8d2a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d2e:	7298      	strb	r0, [r3, #10]
    8d30:	4770      	bx	lr

00008d32 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    8d32:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d36:	8a18      	ldrh	r0, [r3, #16]
}
    8d38:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    8d3c:	4770      	bx	lr
	...

00008d40 <_usb_d_dev_ep_init>:
{
    8d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d42:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8d46:	f010 050f 	ands.w	r5, r0, #15
    8d4a:	d04d      	beq.n	8de8 <_usb_d_dev_ep_init+0xa8>
    8d4c:	f1be 0f00 	cmp.w	lr, #0
    8d50:	bfb4      	ite	lt
    8d52:	1d6c      	addlt	r4, r5, #5
    8d54:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8d56:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8d5a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    8d5c:	2d05      	cmp	r5, #5
    8d5e:	d947      	bls.n	8df0 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    8d60:	f06f 0011 	mvn.w	r0, #17
    8d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8d66:	f1be 0f00 	cmp.w	lr, #0
    8d6a:	db1b      	blt.n	8da4 <_usb_d_dev_ep_init+0x64>
    8d6c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8d70:	4e37      	ldr	r6, [pc, #220]	; (8e50 <_usb_d_dev_ep_init+0x110>)
    8d72:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8d76:	2d00      	cmp	r5, #0
    8d78:	d15e      	bne.n	8e38 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8d7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d7e:	4d34      	ldr	r5, [pc, #208]	; (8e50 <_usb_d_dev_ep_init+0x110>)
    8d80:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    8d84:	4d33      	ldr	r5, [pc, #204]	; (8e54 <_usb_d_dev_ep_init+0x114>)
    8d86:	00a6      	lsls	r6, r4, #2
    8d88:	1933      	adds	r3, r6, r4
    8d8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8d8e:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    8d92:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    8d96:	3101      	adds	r1, #1
    8d98:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    8d9c:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    8da0:	2000      	movs	r0, #0
    8da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8da4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8da8:	4e29      	ldr	r6, [pc, #164]	; (8e50 <_usb_d_dev_ep_init+0x110>)
    8daa:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8dae:	686d      	ldr	r5, [r5, #4]
    8db0:	b935      	cbnz	r5, 8dc0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8db2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8db6:	4d26      	ldr	r5, [pc, #152]	; (8e50 <_usb_d_dev_ep_init+0x110>)
    8db8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8dbc:	685f      	ldr	r7, [r3, #4]
    8dbe:	e7e1      	b.n	8d84 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8dc0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8dc4:	4e22      	ldr	r6, [pc, #136]	; (8e50 <_usb_d_dev_ep_init+0x110>)
    8dc6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8dca:	896d      	ldrh	r5, [r5, #10]
    8dcc:	4295      	cmp	r5, r2
    8dce:	daf0      	bge.n	8db2 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    8dd0:	f06f 0012 	mvn.w	r0, #18
    8dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    8dd6:	f06f 0013 	mvn.w	r0, #19
    8dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    8ddc:	f06f 0013 	mvn.w	r0, #19
    8de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    8de2:	f06f 0012 	mvn.w	r0, #18
    8de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8de8:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    8dec:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8dee:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    8df0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8df4:	4f17      	ldr	r7, [pc, #92]	; (8e54 <_usb_d_dev_ep_init+0x114>)
    8df6:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    8dfa:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    8dfe:	2eff      	cmp	r6, #255	; 0xff
    8e00:	d1e9      	bne.n	8dd6 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8e02:	2900      	cmp	r1, #0
    8e04:	d1af      	bne.n	8d66 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8e06:	b125      	cbz	r5, 8e12 <_usb_d_dev_ep_init+0xd2>
    8e08:	f1be 0f00 	cmp.w	lr, #0
    8e0c:	bfa4      	itt	ge
    8e0e:	3505      	addge	r5, #5
    8e10:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    8e12:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8e16:	4e0f      	ldr	r6, [pc, #60]	; (8e54 <_usb_d_dev_ep_init+0x114>)
    8e18:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8e1c:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    8e20:	2dff      	cmp	r5, #255	; 0xff
    8e22:	d1db      	bne.n	8ddc <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    8e24:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8e28:	4e09      	ldr	r6, [pc, #36]	; (8e50 <_usb_d_dev_ep_init+0x110>)
    8e2a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8e2e:	2d00      	cmp	r5, #0
    8e30:	d0d7      	beq.n	8de2 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8e32:	f1be 0f00 	cmp.w	lr, #0
    8e36:	dbb5      	blt.n	8da4 <_usb_d_dev_ep_init+0x64>
    8e38:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8e3c:	4e04      	ldr	r6, [pc, #16]	; (8e50 <_usb_d_dev_ep_init+0x110>)
    8e3e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8e42:	892d      	ldrh	r5, [r5, #8]
    8e44:	4295      	cmp	r5, r2
    8e46:	da98      	bge.n	8d7a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    8e48:	f06f 0012 	mvn.w	r0, #18
    8e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e4e:	bf00      	nop
    8e50:	0000db60 	.word	0x0000db60
    8e54:	200009a8 	.word	0x200009a8

00008e58 <_usb_d_dev_ep_deinit>:
{
    8e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e5a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8e5c:	f010 060f 	ands.w	r6, r0, #15
    8e60:	d00e      	beq.n	8e80 <_usb_d_dev_ep_deinit+0x28>
    8e62:	2f00      	cmp	r7, #0
    8e64:	bfb4      	ite	lt
    8e66:	1d73      	addlt	r3, r6, #5
    8e68:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8e6a:	2e05      	cmp	r6, #5
    8e6c:	d900      	bls.n	8e70 <_usb_d_dev_ep_deinit+0x18>
    8e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    8e70:	461d      	mov	r5, r3
    8e72:	3301      	adds	r3, #1
    8e74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8e78:	4a24      	ldr	r2, [pc, #144]	; (8f0c <_usb_d_dev_ep_deinit+0xb4>)
    8e7a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    8e7e:	e002      	b.n	8e86 <_usb_d_dev_ep_deinit+0x2e>
    8e80:	f8df e094 	ldr.w	lr, [pc, #148]	; 8f18 <_usb_d_dev_ep_deinit+0xc0>
    8e84:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8e86:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8e8a:	4a21      	ldr	r2, [pc, #132]	; (8f10 <_usb_d_dev_ep_deinit+0xb8>)
    8e8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8e90:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    8e94:	2aff      	cmp	r2, #255	; 0xff
    8e96:	d0ea      	beq.n	8e6e <_usb_d_dev_ep_deinit+0x16>
    8e98:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    8e9a:	2203      	movs	r2, #3
    8e9c:	0ff9      	lsrs	r1, r7, #31
    8e9e:	4670      	mov	r0, lr
    8ea0:	4b1c      	ldr	r3, [pc, #112]	; (8f14 <_usb_d_dev_ep_deinit+0xbc>)
    8ea2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8ea4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8ea8:	4a19      	ldr	r2, [pc, #100]	; (8f10 <_usb_d_dev_ep_deinit+0xb8>)
    8eaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8eae:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8eb2:	f003 0307 	and.w	r3, r3, #7
    8eb6:	2b01      	cmp	r3, #1
    8eb8:	d016      	beq.n	8ee8 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    8eba:	2f00      	cmp	r7, #0
    8ebc:	db1b      	blt.n	8ef6 <_usb_d_dev_ep_deinit+0x9e>
    8ebe:	0160      	lsls	r0, r4, #5
    8ec0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8ec4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    8ec8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8ecc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    8ed0:	4b0f      	ldr	r3, [pc, #60]	; (8f10 <_usb_d_dev_ep_deinit+0xb8>)
    8ed2:	00aa      	lsls	r2, r5, #2
    8ed4:	1951      	adds	r1, r2, r5
    8ed6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8eda:	2000      	movs	r0, #0
    8edc:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    8ee0:	22ff      	movs	r2, #255	; 0xff
    8ee2:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    8ee6:	e7c2      	b.n	8e6e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    8ee8:	0160      	lsls	r0, r4, #5
    8eea:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8eee:	2300      	movs	r3, #0
    8ef0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8ef4:	e7ec      	b.n	8ed0 <_usb_d_dev_ep_deinit+0x78>
    8ef6:	0176      	lsls	r6, r6, #5
    8ef8:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    8efc:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8f00:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8f04:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    8f08:	e7e2      	b.n	8ed0 <_usb_d_dev_ep_deinit+0x78>
    8f0a:	bf00      	nop
    8f0c:	20000a68 	.word	0x20000a68
    8f10:	200009a8 	.word	0x200009a8
    8f14:	000083f1 	.word	0x000083f1
    8f18:	20000a7c 	.word	0x20000a7c

00008f1c <_usb_d_dev_ep_enable>:
{
    8f1c:	b4f0      	push	{r4, r5, r6, r7}
    8f1e:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8f20:	f010 000f 	ands.w	r0, r0, #15
    8f24:	f000 80a7 	beq.w	9076 <_usb_d_dev_ep_enable+0x15a>
    8f28:	2e00      	cmp	r6, #0
    8f2a:	bfb4      	ite	lt
    8f2c:	1d43      	addlt	r3, r0, #5
    8f2e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8f30:	4605      	mov	r5, r0
    8f32:	0142      	lsls	r2, r0, #5
    8f34:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8f38:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    8f3c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8f3e:	2805      	cmp	r0, #5
    8f40:	f240 80a0 	bls.w	9084 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    8f44:	f06f 0011 	mvn.w	r0, #17
    8f48:	e07d      	b.n	9046 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    8f4a:	f014 0f77 	tst.w	r4, #119	; 0x77
    8f4e:	f040 8089 	bne.w	9064 <_usb_d_dev_ep_enable+0x148>
    8f52:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8f56:	2111      	movs	r1, #17
    8f58:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8f5c:	4c9b      	ldr	r4, [pc, #620]	; (91cc <_usb_d_dev_ep_enable+0x2b0>)
    8f5e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    8f62:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    8f66:	4c9a      	ldr	r4, [pc, #616]	; (91d0 <_usb_d_dev_ep_enable+0x2b4>)
    8f68:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8f6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8f70:	f200 80cd 	bhi.w	910e <_usb_d_dev_ep_enable+0x1f2>
    8f74:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8f78:	f200 8112 	bhi.w	91a0 <_usb_d_dev_ep_enable+0x284>
    8f7c:	2980      	cmp	r1, #128	; 0x80
    8f7e:	f200 8101 	bhi.w	9184 <_usb_d_dev_ep_enable+0x268>
    8f82:	2940      	cmp	r1, #64	; 0x40
    8f84:	f200 8113 	bhi.w	91ae <_usb_d_dev_ep_enable+0x292>
    8f88:	2920      	cmp	r1, #32
    8f8a:	f200 8102 	bhi.w	9192 <_usb_d_dev_ep_enable+0x276>
    8f8e:	2910      	cmp	r1, #16
    8f90:	f200 8114 	bhi.w	91bc <_usb_d_dev_ep_enable+0x2a0>
    8f94:	2908      	cmp	r1, #8
    8f96:	bf94      	ite	ls
    8f98:	2600      	movls	r6, #0
    8f9a:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8f9c:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8fa0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fa2:	f3c1 010d 	ubfx	r1, r1, #0, #14
    8fa6:	e0b8      	b.n	911a <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    8fa8:	f014 0f70 	tst.w	r4, #112	; 0x70
    8fac:	d15d      	bne.n	906a <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    8fae:	4e87      	ldr	r6, [pc, #540]	; (91cc <_usb_d_dev_ep_enable+0x2b0>)
    8fb0:	009f      	lsls	r7, r3, #2
    8fb2:	18f9      	adds	r1, r7, r3
    8fb4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8fb8:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8fbc:	0109      	lsls	r1, r1, #4
    8fbe:	f001 0170 	and.w	r1, r1, #112	; 0x70
    8fc2:	430c      	orrs	r4, r1
    8fc4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8fc8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fcc:	443b      	add	r3, r7
    8fce:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8fd2:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    8fd6:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8fde:	d80f      	bhi.n	9000 <_usb_d_dev_ep_enable+0xe4>
    8fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8fe4:	d819      	bhi.n	901a <_usb_d_dev_ep_enable+0xfe>
    8fe6:	2b80      	cmp	r3, #128	; 0x80
    8fe8:	d819      	bhi.n	901e <_usb_d_dev_ep_enable+0x102>
    8fea:	2b40      	cmp	r3, #64	; 0x40
    8fec:	d819      	bhi.n	9022 <_usb_d_dev_ep_enable+0x106>
    8fee:	2b20      	cmp	r3, #32
    8ff0:	d819      	bhi.n	9026 <_usb_d_dev_ep_enable+0x10a>
    8ff2:	2b10      	cmp	r3, #16
    8ff4:	d819      	bhi.n	902a <_usb_d_dev_ep_enable+0x10e>
    8ff6:	2b08      	cmp	r3, #8
    8ff8:	bf94      	ite	ls
    8ffa:	2300      	movls	r3, #0
    8ffc:	2301      	movhi	r3, #1
    8ffe:	e000      	b.n	9002 <_usb_d_dev_ep_enable+0xe6>
    9000:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9002:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    9006:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9008:	2380      	movs	r3, #128	; 0x80
    900a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    900e:	4b6f      	ldr	r3, [pc, #444]	; (91cc <_usb_d_dev_ep_enable+0x2b0>)
    9010:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9014:	2000      	movs	r0, #0
    9016:	76a8      	strb	r0, [r5, #26]
    9018:	e015      	b.n	9046 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    901a:	2306      	movs	r3, #6
    901c:	e7f1      	b.n	9002 <_usb_d_dev_ep_enable+0xe6>
    901e:	2305      	movs	r3, #5
    9020:	e7ef      	b.n	9002 <_usb_d_dev_ep_enable+0xe6>
    9022:	2304      	movs	r3, #4
    9024:	e7ed      	b.n	9002 <_usb_d_dev_ep_enable+0xe6>
    9026:	2303      	movs	r3, #3
    9028:	e7eb      	b.n	9002 <_usb_d_dev_ep_enable+0xe6>
    902a:	2302      	movs	r3, #2
    902c:	e7e9      	b.n	9002 <_usb_d_dev_ep_enable+0xe6>
    902e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9030:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9034:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9036:	2340      	movs	r3, #64	; 0x40
    9038:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    903c:	4b63      	ldr	r3, [pc, #396]	; (91cc <_usb_d_dev_ep_enable+0x2b0>)
    903e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9042:	2000      	movs	r0, #0
    9044:	72a8      	strb	r0, [r5, #10]
}
    9046:	bcf0      	pop	{r4, r5, r6, r7}
    9048:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    904a:	2106      	movs	r1, #6
    904c:	e7f0      	b.n	9030 <_usb_d_dev_ep_enable+0x114>
    904e:	2105      	movs	r1, #5
    9050:	e7ee      	b.n	9030 <_usb_d_dev_ep_enable+0x114>
    9052:	2104      	movs	r1, #4
    9054:	e7ec      	b.n	9030 <_usb_d_dev_ep_enable+0x114>
    9056:	2103      	movs	r1, #3
    9058:	e7ea      	b.n	9030 <_usb_d_dev_ep_enable+0x114>
    905a:	2102      	movs	r1, #2
    905c:	e7e8      	b.n	9030 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    905e:	f06f 0011 	mvn.w	r0, #17
    9062:	e7f0      	b.n	9046 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9064:	f06f 0013 	mvn.w	r0, #19
    9068:	e7ed      	b.n	9046 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    906a:	f06f 0013 	mvn.w	r0, #19
    906e:	e7ea      	b.n	9046 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9070:	f06f 0013 	mvn.w	r0, #19
    9074:	e7e7      	b.n	9046 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9076:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    907a:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    907e:	b2e4      	uxtb	r4, r4
    9080:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    9082:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9084:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9088:	4950      	ldr	r1, [pc, #320]	; (91cc <_usb_d_dev_ep_enable+0x2b0>)
    908a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    908e:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    9092:	2aff      	cmp	r2, #255	; 0xff
    9094:	d0e3      	beq.n	905e <_usb_d_dev_ep_enable+0x142>
    9096:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9098:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    909a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    909e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    90a2:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    90a6:	f001 0107 	and.w	r1, r1, #7
    90aa:	2901      	cmp	r1, #1
    90ac:	f43f af4d 	beq.w	8f4a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    90b0:	2e00      	cmp	r6, #0
    90b2:	f6ff af79 	blt.w	8fa8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    90b6:	f014 0f07 	tst.w	r4, #7
    90ba:	d1d9      	bne.n	9070 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    90bc:	4e43      	ldr	r6, [pc, #268]	; (91cc <_usb_d_dev_ep_enable+0x2b0>)
    90be:	009f      	lsls	r7, r3, #2
    90c0:	18f9      	adds	r1, r7, r3
    90c2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    90c6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    90ca:	f001 0107 	and.w	r1, r1, #7
    90ce:	430c      	orrs	r4, r1
    90d0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    90d4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    90d8:	443b      	add	r3, r7
    90da:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    90de:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    90e2:	4b3b      	ldr	r3, [pc, #236]	; (91d0 <_usb_d_dev_ep_enable+0x2b4>)
    90e4:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    90e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    90ec:	d89f      	bhi.n	902e <_usb_d_dev_ep_enable+0x112>
    90ee:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    90f2:	d8aa      	bhi.n	904a <_usb_d_dev_ep_enable+0x12e>
    90f4:	2980      	cmp	r1, #128	; 0x80
    90f6:	d8aa      	bhi.n	904e <_usb_d_dev_ep_enable+0x132>
    90f8:	2940      	cmp	r1, #64	; 0x40
    90fa:	d8aa      	bhi.n	9052 <_usb_d_dev_ep_enable+0x136>
    90fc:	2920      	cmp	r1, #32
    90fe:	d8aa      	bhi.n	9056 <_usb_d_dev_ep_enable+0x13a>
    9100:	2910      	cmp	r1, #16
    9102:	d8aa      	bhi.n	905a <_usb_d_dev_ep_enable+0x13e>
    9104:	2908      	cmp	r1, #8
    9106:	bf94      	ite	ls
    9108:	2100      	movls	r1, #0
    910a:	2101      	movhi	r1, #1
    910c:	e790      	b.n	9030 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    910e:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9112:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9114:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9118:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    911a:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    911e:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9120:	2640      	movs	r6, #64	; 0x40
    9122:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9126:	2180      	movs	r1, #128	; 0x80
    9128:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    912c:	4f27      	ldr	r7, [pc, #156]	; (91cc <_usb_d_dev_ep_enable+0x2b0>)
    912e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    9132:	2000      	movs	r0, #0
    9134:	72a8      	strb	r0, [r5, #10]
    9136:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9138:	009c      	lsls	r4, r3, #2
    913a:	18e1      	adds	r1, r4, r3
    913c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    9140:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    9144:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9148:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    914c:	0152      	lsls	r2, r2, #5
    914e:	18b9      	adds	r1, r7, r2
    9150:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9152:	4423      	add	r3, r4
    9154:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9158:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    915c:	684b      	ldr	r3, [r1, #4]
    915e:	f364 339b 	bfi	r3, r4, #14, #14
    9162:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9164:	684b      	ldr	r3, [r1, #4]
    9166:	f360 030d 	bfi	r3, r0, #0, #14
    916a:	604b      	str	r3, [r1, #4]
    916c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    9170:	21b0      	movs	r1, #176	; 0xb0
    9172:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9176:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    917a:	461a      	mov	r2, r3
    917c:	2310      	movs	r3, #16
    917e:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    9182:	e760      	b.n	9046 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9184:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9188:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    918a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    918e:	2605      	movs	r6, #5
    9190:	e7c3      	b.n	911a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9192:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9196:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9198:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    919c:	2603      	movs	r6, #3
    919e:	e7bc      	b.n	911a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    91a0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    91a4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    91a6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    91aa:	2606      	movs	r6, #6
    91ac:	e7b5      	b.n	911a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    91ae:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    91b2:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    91b4:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    91b8:	2604      	movs	r6, #4
    91ba:	e7ae      	b.n	911a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    91bc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    91c0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    91c2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    91c6:	2602      	movs	r6, #2
    91c8:	e7a7      	b.n	911a <_usb_d_dev_ep_enable+0x1fe>
    91ca:	bf00      	nop
    91cc:	200009a8 	.word	0x200009a8
    91d0:	0fffc000 	.word	0x0fffc000

000091d4 <_usb_d_dev_ep_stall>:
{
    91d4:	b470      	push	{r4, r5, r6}
    91d6:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    91d8:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    91da:	f010 000f 	ands.w	r0, r0, #15
    91de:	d008      	beq.n	91f2 <_usb_d_dev_ep_stall+0x1e>
    91e0:	2b00      	cmp	r3, #0
    91e2:	bfb4      	ite	lt
    91e4:	1d43      	addlt	r3, r0, #5
    91e6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    91e8:	2805      	cmp	r0, #5
    91ea:	d903      	bls.n	91f4 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    91ec:	f06f 0011 	mvn.w	r0, #17
    91f0:	e018      	b.n	9224 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    91f2:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    91f4:	2901      	cmp	r1, #1
    91f6:	d017      	beq.n	9228 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    91f8:	2900      	cmp	r1, #0
    91fa:	d03a      	beq.n	9272 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    91fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9200:	4a45      	ldr	r2, [pc, #276]	; (9318 <_usb_d_dev_ep_stall+0x144>)
    9202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9206:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    920a:	f003 030f 	and.w	r3, r3, #15
    920e:	015b      	lsls	r3, r3, #5
    9210:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9214:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9218:	2310      	movs	r3, #16
    921a:	40a3      	lsls	r3, r4
    921c:	421a      	tst	r2, r3
    921e:	bf14      	ite	ne
    9220:	2001      	movne	r0, #1
    9222:	2000      	moveq	r0, #0
}
    9224:	bc70      	pop	{r4, r5, r6}
    9226:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9228:	2510      	movs	r5, #16
    922a:	40a5      	lsls	r5, r4
    922c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    922e:	493a      	ldr	r1, [pc, #232]	; (9318 <_usb_d_dev_ep_stall+0x144>)
    9230:	009e      	lsls	r6, r3, #2
    9232:	18f2      	adds	r2, r6, r3
    9234:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9238:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    923c:	f002 020f 	and.w	r2, r2, #15
    9240:	0150      	lsls	r0, r2, #5
    9242:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    9246:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    924a:	2020      	movs	r0, #32
    924c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9250:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9252:	0152      	lsls	r2, r2, #5
    9254:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9258:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    925c:	4433      	add	r3, r6
    925e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9262:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9266:	f042 0208 	orr.w	r2, r2, #8
    926a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    926e:	2000      	movs	r0, #0
    9270:	e7d8      	b.n	9224 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9272:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9276:	4928      	ldr	r1, [pc, #160]	; (9318 <_usb_d_dev_ep_stall+0x144>)
    9278:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    927c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    9280:	f002 020f 	and.w	r2, r2, #15
    9284:	0151      	lsls	r1, r2, #5
    9286:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    928a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    928e:	2010      	movs	r0, #16
    9290:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    9292:	4205      	tst	r5, r0
    9294:	d03c      	beq.n	9310 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9296:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9298:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    929c:	2020      	movs	r0, #32
    929e:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    92a0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    92a2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    92a6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    92aa:	4202      	tst	r2, r0
    92ac:	d007      	beq.n	92be <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    92ae:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    92b2:	2201      	movs	r2, #1
    92b4:	fa02 f404 	lsl.w	r4, r2, r4
    92b8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    92ba:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    92be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    92c2:	4815      	ldr	r0, [pc, #84]	; (9318 <_usb_d_dev_ep_stall+0x144>)
    92c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    92c8:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    92cc:	f002 0207 	and.w	r2, r2, #7
    92d0:	2a01      	cmp	r2, #1
    92d2:	d00c      	beq.n	92ee <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    92d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    92d8:	4a0f      	ldr	r2, [pc, #60]	; (9318 <_usb_d_dev_ep_stall+0x144>)
    92da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    92de:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    92e2:	f36f 02c3 	bfc	r2, #3, #1
    92e6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    92ea:	2000      	movs	r0, #0
    92ec:	e79a      	b.n	9224 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    92ee:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    92f2:	f012 0f30 	tst.w	r2, #48	; 0x30
    92f6:	d10d      	bne.n	9314 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    92f8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    92fc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9300:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9304:	f36f 02c3 	bfc	r2, #3, #1
    9308:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    930c:	2000      	movs	r0, #0
    930e:	e789      	b.n	9224 <_usb_d_dev_ep_stall+0x50>
    9310:	2000      	movs	r0, #0
    9312:	e787      	b.n	9224 <_usb_d_dev_ep_stall+0x50>
    9314:	2000      	movs	r0, #0
    9316:	e785      	b.n	9224 <_usb_d_dev_ep_stall+0x50>
    9318:	200009a8 	.word	0x200009a8

0000931c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    931c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    931e:	f000 040f 	and.w	r4, r0, #15
    9322:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9324:	4a14      	ldr	r2, [pc, #80]	; (9378 <_usb_d_dev_ep_read_req+0x5c>)
    9326:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    9328:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    932a:	6840      	ldr	r0, [r0, #4]
    932c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9330:	2c05      	cmp	r4, #5
    9332:	d817      	bhi.n	9364 <_usb_d_dev_ep_read_req+0x48>
    9334:	b1c9      	cbz	r1, 936a <_usb_d_dev_ep_read_req+0x4e>
    9336:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    933a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    933e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9340:	2a11      	cmp	r2, #17
    9342:	d115      	bne.n	9370 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9344:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    9348:	f012 0f10 	tst.w	r2, #16
    934c:	d102      	bne.n	9354 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    934e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9350:	bc30      	pop	{r4, r5}
    9352:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    9354:	682c      	ldr	r4, [r5, #0]
    9356:	686a      	ldr	r2, [r5, #4]
    9358:	600c      	str	r4, [r1, #0]
    935a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    935c:	2210      	movs	r2, #16
    935e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    9362:	e7f5      	b.n	9350 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    9364:	f06f 0011 	mvn.w	r0, #17
    9368:	e7f2      	b.n	9350 <_usb_d_dev_ep_read_req+0x34>
    936a:	f06f 0011 	mvn.w	r0, #17
    936e:	e7ef      	b.n	9350 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    9370:	f06f 0012 	mvn.w	r0, #18
    9374:	e7ec      	b.n	9350 <_usb_d_dev_ep_read_req+0x34>
    9376:	bf00      	nop
    9378:	200009a8 	.word	0x200009a8

0000937c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9380:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9382:	7a03      	ldrb	r3, [r0, #8]
    9384:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9386:	f013 030f 	ands.w	r3, r3, #15
    938a:	f000 80c2 	beq.w	9512 <_usb_d_dev_ep_trans+0x196>
    938e:	2e00      	cmp	r6, #0
    9390:	bfb4      	ite	lt
    9392:	1d5a      	addlt	r2, r3, #5
    9394:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    9396:	4614      	mov	r4, r2
    9398:	4969      	ldr	r1, [pc, #420]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    939a:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    939e:	1c55      	adds	r5, r2, #1
    93a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    93a4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    93a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    93ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    93b0:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    93b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    93b8:	428a      	cmp	r2, r1
    93ba:	d025      	beq.n	9408 <_usb_d_dev_ep_trans+0x8c>
    93bc:	1e55      	subs	r5, r2, #1
    93be:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    93c0:	6841      	ldr	r1, [r0, #4]
    93c2:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    93c4:	2b05      	cmp	r3, #5
    93c6:	f200 8092 	bhi.w	94ee <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    93ca:	6803      	ldr	r3, [r0, #0]
    93cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    93d0:	d31c      	bcc.n	940c <_usb_d_dev_ep_trans+0x90>
    93d2:	eb03 0c01 	add.w	ip, r3, r1
    93d6:	f8df e180 	ldr.w	lr, [pc, #384]	; 9558 <_usb_d_dev_ep_trans+0x1dc>
    93da:	45f4      	cmp	ip, lr
    93dc:	d816      	bhi.n	940c <_usb_d_dev_ep_trans+0x90>
    93de:	f013 0f03 	tst.w	r3, #3
    93e2:	d113      	bne.n	940c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    93e4:	2e00      	cmp	r6, #0
    93e6:	db2a      	blt.n	943e <_usb_d_dev_ep_trans+0xc2>
    93e8:	428a      	cmp	r2, r1
    93ea:	f200 809c 	bhi.w	9526 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    93ee:	b34d      	cbz	r5, 9444 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    93f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    93f4:	4a52      	ldr	r2, [pc, #328]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    93f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    93fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    93fe:	2b00      	cmp	r3, #0
    9400:	d07b      	beq.n	94fa <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9402:	f04f 0800 	mov.w	r8, #0
    9406:	e00c      	b.n	9422 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9408:	4615      	mov	r5, r2
    940a:	e7d9      	b.n	93c0 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    940c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9410:	4a4b      	ldr	r2, [pc, #300]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    9412:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    941a:	2b00      	cmp	r3, #0
    941c:	d06a      	beq.n	94f4 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    941e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9422:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9426:	4a46      	ldr	r2, [pc, #280]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    9428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    942c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9430:	f013 0f08 	tst.w	r3, #8
    9434:	d009      	beq.n	944a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    9436:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    9438:	b003      	add	sp, #12
    943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    943e:	f04f 0800 	mov.w	r8, #0
    9442:	e7ee      	b.n	9422 <_usb_d_dev_ep_trans+0xa6>
    9444:	f04f 0800 	mov.w	r8, #0
    9448:	e7eb      	b.n	9422 <_usb_d_dev_ep_trans+0xa6>
    944a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    944c:	a801      	add	r0, sp, #4
    944e:	4b3d      	ldr	r3, [pc, #244]	; (9544 <_usb_d_dev_ep_trans+0x1c8>)
    9450:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9452:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9456:	4a3a      	ldr	r2, [pc, #232]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    9458:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    945c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9460:	f013 0f40 	tst.w	r3, #64	; 0x40
    9464:	d13c      	bne.n	94e0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    9466:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    946a:	4b35      	ldr	r3, [pc, #212]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    946c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    9470:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9478:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    947c:	a801      	add	r0, sp, #4
    947e:	4b32      	ldr	r3, [pc, #200]	; (9548 <_usb_d_dev_ep_trans+0x1cc>)
    9480:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    9482:	f8da 3000 	ldr.w	r3, [sl]
    9486:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    948a:	f8da 3004 	ldr.w	r3, [sl, #4]
    948e:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    9492:	2300      	movs	r3, #0
    9494:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    9498:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    949a:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    949e:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    94a2:	f368 1345 	bfi	r3, r8, #5, #1
    94a6:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    94aa:	f89a 3009 	ldrb.w	r3, [sl, #9]
    94ae:	b1e3      	cbz	r3, 94ea <_usb_d_dev_ep_trans+0x16e>
    94b0:	fab5 f585 	clz	r5, r5
    94b4:	096d      	lsrs	r5, r5, #5
    94b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    94ba:	4b21      	ldr	r3, [pc, #132]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    94bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    94c0:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    94c4:	f365 1304 	bfi	r3, r5, #4, #1
    94c8:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    94cc:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    94ce:	f04f 0100 	mov.w	r1, #0
    94d2:	4638      	mov	r0, r7
    94d4:	bfb4      	ite	lt
    94d6:	4b1d      	ldrlt	r3, [pc, #116]	; (954c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    94d8:	4b1d      	ldrge	r3, [pc, #116]	; (9550 <_usb_d_dev_ep_trans+0x1d4>)
    94da:	4798      	blx	r3
	return ERR_NONE;
    94dc:	2000      	movs	r0, #0
    94de:	e7ab      	b.n	9438 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    94e0:	a801      	add	r0, sp, #4
    94e2:	4b19      	ldr	r3, [pc, #100]	; (9548 <_usb_d_dev_ep_trans+0x1cc>)
    94e4:	4798      	blx	r3
		return USB_BUSY;
    94e6:	2001      	movs	r0, #1
    94e8:	e7a6      	b.n	9438 <_usb_d_dev_ep_trans+0xbc>
    94ea:	2500      	movs	r5, #0
    94ec:	e7e3      	b.n	94b6 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    94ee:	f06f 0011 	mvn.w	r0, #17
    94f2:	e7a1      	b.n	9438 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    94f4:	f06f 0012 	mvn.w	r0, #18
    94f8:	e79e      	b.n	9438 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    94fa:	f06f 0011 	mvn.w	r0, #17
    94fe:	e79b      	b.n	9438 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9500:	f06f 0012 	mvn.w	r0, #18
    9504:	e798      	b.n	9438 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    9506:	6841      	ldr	r1, [r0, #4]
    9508:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    950c:	4f11      	ldr	r7, [pc, #68]	; (9554 <_usb_d_dev_ep_trans+0x1d8>)
    950e:	2400      	movs	r4, #0
    9510:	e75b      	b.n	93ca <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9512:	4a0b      	ldr	r2, [pc, #44]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    9514:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9518:	f240 31ff 	movw	r1, #1023	; 0x3ff
    951c:	428a      	cmp	r2, r1
    951e:	d0f2      	beq.n	9506 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9520:	4f0c      	ldr	r7, [pc, #48]	; (9554 <_usb_d_dev_ep_trans+0x1d8>)
    9522:	2400      	movs	r4, #0
    9524:	e74a      	b.n	93bc <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    9526:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    952a:	4a05      	ldr	r2, [pc, #20]	; (9540 <_usb_d_dev_ep_trans+0x1c4>)
    952c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9534:	2b00      	cmp	r3, #0
    9536:	d0e3      	beq.n	9500 <_usb_d_dev_ep_trans+0x184>
    9538:	f04f 0801 	mov.w	r8, #1
    953c:	e771      	b.n	9422 <_usb_d_dev_ep_trans+0xa6>
    953e:	bf00      	nop
    9540:	200009a8 	.word	0x200009a8
    9544:	00004755 	.word	0x00004755
    9548:	00004763 	.word	0x00004763
    954c:	000085a1 	.word	0x000085a1
    9550:	00008725 	.word	0x00008725
    9554:	20000a7c 	.word	0x20000a7c
    9558:	20041fff 	.word	0x20041fff

0000955c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    955c:	4b07      	ldr	r3, [pc, #28]	; (957c <_usb_d_dev_register_callback+0x20>)
    955e:	2900      	cmp	r1, #0
    9560:	bf08      	it	eq
    9562:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    9564:	2801      	cmp	r0, #1
    9566:	d004      	beq.n	9572 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    9568:	b910      	cbnz	r0, 9570 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    956a:	4b05      	ldr	r3, [pc, #20]	; (9580 <_usb_d_dev_register_callback+0x24>)
    956c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    9570:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9572:	4b03      	ldr	r3, [pc, #12]	; (9580 <_usb_d_dev_register_callback+0x24>)
    9574:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    9578:	4770      	bx	lr
    957a:	bf00      	nop
    957c:	00008311 	.word	0x00008311
    9580:	200009a8 	.word	0x200009a8

00009584 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9584:	4b0a      	ldr	r3, [pc, #40]	; (95b0 <_usb_d_dev_register_ep_callback+0x2c>)
    9586:	2900      	cmp	r1, #0
    9588:	bf08      	it	eq
    958a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    958c:	4603      	mov	r3, r0
    958e:	b138      	cbz	r0, 95a0 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    9590:	2801      	cmp	r0, #1
    9592:	d009      	beq.n	95a8 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    9594:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    9596:	bf04      	itt	eq
    9598:	4b06      	ldreq	r3, [pc, #24]	; (95b4 <_usb_d_dev_register_ep_callback+0x30>)
    959a:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    959e:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    95a0:	4b04      	ldr	r3, [pc, #16]	; (95b4 <_usb_d_dev_register_ep_callback+0x30>)
    95a2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    95a6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    95a8:	4b02      	ldr	r3, [pc, #8]	; (95b4 <_usb_d_dev_register_ep_callback+0x30>)
    95aa:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    95ae:	4770      	bx	lr
    95b0:	00008311 	.word	0x00008311
    95b4:	200009a8 	.word	0x200009a8

000095b8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    95b8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    95ba:	4b01      	ldr	r3, [pc, #4]	; (95c0 <USB_0_Handler+0x8>)
    95bc:	4798      	blx	r3
    95be:	bd08      	pop	{r3, pc}
    95c0:	00008915 	.word	0x00008915

000095c4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    95c4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    95c6:	4b01      	ldr	r3, [pc, #4]	; (95cc <USB_1_Handler+0x8>)
    95c8:	4798      	blx	r3
    95ca:	bd08      	pop	{r3, pc}
    95cc:	00008915 	.word	0x00008915

000095d0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    95d0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    95d2:	4b01      	ldr	r3, [pc, #4]	; (95d8 <USB_2_Handler+0x8>)
    95d4:	4798      	blx	r3
    95d6:	bd08      	pop	{r3, pc}
    95d8:	00008915 	.word	0x00008915

000095dc <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    95dc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    95de:	4b01      	ldr	r3, [pc, #4]	; (95e4 <USB_3_Handler+0x8>)
    95e0:	4798      	blx	r3
    95e2:	bd08      	pop	{r3, pc}
    95e4:	00008915 	.word	0x00008915

000095e8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    95e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    95ea:	4604      	mov	r4, r0
    95ec:	b340      	cbz	r0, 9640 <_wdt_init+0x58>
    95ee:	6800      	ldr	r0, [r0, #0]
    95f0:	3000      	adds	r0, #0
    95f2:	bf18      	it	ne
    95f4:	2001      	movne	r0, #1
    95f6:	2250      	movs	r2, #80	; 0x50
    95f8:	4915      	ldr	r1, [pc, #84]	; (9650 <_wdt_init+0x68>)
    95fa:	4b16      	ldr	r3, [pc, #88]	; (9654 <_wdt_init+0x6c>)
    95fc:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    95fe:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9600:	689a      	ldr	r2, [r3, #8]
    9602:	f012 0f0e 	tst.w	r2, #14
    9606:	d1fb      	bne.n	9600 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9608:	781a      	ldrb	r2, [r3, #0]
    960a:	09d2      	lsrs	r2, r2, #7
    960c:	d11a      	bne.n	9644 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    960e:	689a      	ldr	r2, [r3, #8]
    9610:	f012 0f0e 	tst.w	r2, #14
    9614:	d1fb      	bne.n	960e <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9616:	781a      	ldrb	r2, [r3, #0]
    9618:	f012 0f02 	tst.w	r2, #2
    961c:	d115      	bne.n	964a <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    961e:	781a      	ldrb	r2, [r3, #0]
    9620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9624:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9626:	689a      	ldr	r2, [r3, #8]
    9628:	f012 0f0e 	tst.w	r2, #14
    962c:	d1fb      	bne.n	9626 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    962e:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9630:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    9636:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    963a:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    963c:	2000      	movs	r0, #0
    963e:	bd10      	pop	{r4, pc}
    9640:	2000      	movs	r0, #0
    9642:	e7d8      	b.n	95f6 <_wdt_init+0xe>
		return ERR_DENIED;
    9644:	f06f 0010 	mvn.w	r0, #16
    9648:	bd10      	pop	{r4, pc}
    964a:	f06f 0010 	mvn.w	r0, #16
}
    964e:	bd10      	pop	{r4, pc}
    9650:	0000dba8 	.word	0x0000dba8
    9654:	00005b49 	.word	0x00005b49

00009658 <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    9658:	2201      	movs	r2, #1
    965a:	4b01      	ldr	r3, [pc, #4]	; (9660 <RTC_Scheduler_report_cb+0x8>)
    965c:	701a      	strb	r2, [r3, #0]
    965e:	4770      	bx	lr
    9660:	20000d68 	.word	0x20000d68

00009664 <RTC_Scheduler_heartbeat_cb>:
{
    9664:	b508      	push	{r3, lr}
	grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_HEARTBEAT);
    9666:	2100      	movs	r1, #0
    9668:	4801      	ldr	r0, [pc, #4]	; (9670 <RTC_Scheduler_heartbeat_cb+0xc>)
    966a:	4b02      	ldr	r3, [pc, #8]	; (9674 <RTC_Scheduler_heartbeat_cb+0x10>)
    966c:	4798      	blx	r3
    966e:	bd08      	pop	{r3, pc}
    9670:	20001d14 	.word	0x20001d14
    9674:	000040a9 	.word	0x000040a9

00009678 <RTC_Scheduler_ping_cb>:
{
    9678:	b508      	push	{r3, lr}
	pingflag++;
    967a:	4a11      	ldr	r2, [pc, #68]	; (96c0 <RTC_Scheduler_ping_cb+0x48>)
    967c:	7853      	ldrb	r3, [r2, #1]
    967e:	3301      	adds	r3, #1
    9680:	b2db      	uxtb	r3, r3
    9682:	7053      	strb	r3, [r2, #1]
	switch (pingflag%4)
    9684:	7853      	ldrb	r3, [r2, #1]
    9686:	f003 0303 	and.w	r3, r3, #3
    968a:	2b03      	cmp	r3, #3
    968c:	d816      	bhi.n	96bc <RTC_Scheduler_ping_cb+0x44>
    968e:	e8df f003 	tbb	[pc, r3]
    9692:	0702      	.short	0x0702
    9694:	110c      	.short	0x110c
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_NORTH);
    9696:	2101      	movs	r1, #1
    9698:	480a      	ldr	r0, [pc, #40]	; (96c4 <RTC_Scheduler_ping_cb+0x4c>)
    969a:	4b0b      	ldr	r3, [pc, #44]	; (96c8 <RTC_Scheduler_ping_cb+0x50>)
    969c:	4798      	blx	r3
			break;
    969e:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_EAST);
    96a0:	2102      	movs	r1, #2
    96a2:	4808      	ldr	r0, [pc, #32]	; (96c4 <RTC_Scheduler_ping_cb+0x4c>)
    96a4:	4b08      	ldr	r3, [pc, #32]	; (96c8 <RTC_Scheduler_ping_cb+0x50>)
    96a6:	4798      	blx	r3
			break;
    96a8:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_SOUTH);
    96aa:	2103      	movs	r1, #3
    96ac:	4805      	ldr	r0, [pc, #20]	; (96c4 <RTC_Scheduler_ping_cb+0x4c>)
    96ae:	4b06      	ldr	r3, [pc, #24]	; (96c8 <RTC_Scheduler_ping_cb+0x50>)
    96b0:	4798      	blx	r3
			break;
    96b2:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_WEST);
    96b4:	2104      	movs	r1, #4
    96b6:	4803      	ldr	r0, [pc, #12]	; (96c4 <RTC_Scheduler_ping_cb+0x4c>)
    96b8:	4b03      	ldr	r3, [pc, #12]	; (96c8 <RTC_Scheduler_ping_cb+0x50>)
    96ba:	4798      	blx	r3
    96bc:	bd08      	pop	{r3, pc}
    96be:	bf00      	nop
    96c0:	20000d68 	.word	0x20000d68
    96c4:	20001d14 	.word	0x20001d14
    96c8:	000040a9 	.word	0x000040a9

000096cc <grid_task_timer_tick>:
void grid_task_timer_tick(struct grid_task_model* mod){
    96cc:	7843      	ldrb	r3, [r0, #1]
    96ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	mod->timer[mod->current_task]++;
    96d2:	6843      	ldr	r3, [r0, #4]
    96d4:	3301      	adds	r3, #1
    96d6:	6043      	str	r3, [r0, #4]
    96d8:	4770      	bx	lr
	...

000096dc <RTC_Scheduler_realtime_cb>:
{
    96dc:	b510      	push	{r4, lr}
    96de:	b082      	sub	sp, #8
	grid_sys_rtc_tick_time(&grid_sys_state);	
    96e0:	481f      	ldr	r0, [pc, #124]	; (9760 <RTC_Scheduler_realtime_cb+0x84>)
    96e2:	4b20      	ldr	r3, [pc, #128]	; (9764 <RTC_Scheduler_realtime_cb+0x88>)
    96e4:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    96e6:	4820      	ldr	r0, [pc, #128]	; (9768 <RTC_Scheduler_realtime_cb+0x8c>)
    96e8:	4b20      	ldr	r3, [pc, #128]	; (976c <RTC_Scheduler_realtime_cb+0x90>)
    96ea:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    96ec:	a801      	add	r0, sp, #4
    96ee:	4b20      	ldr	r3, [pc, #128]	; (9770 <RTC_Scheduler_realtime_cb+0x94>)
    96f0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    96f2:	4b20      	ldr	r3, [pc, #128]	; (9774 <RTC_Scheduler_realtime_cb+0x98>)
    96f4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    96f8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    96fc:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9700:	4054      	eors	r4, r2
    9702:	400c      	ands	r4, r1
    9704:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    9706:	a801      	add	r0, sp, #4
    9708:	4b1b      	ldr	r3, [pc, #108]	; (9778 <RTC_Scheduler_realtime_cb+0x9c>)
    970a:	4798      	blx	r3
	if (mapmode_value != mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0]){
    970c:	4b1b      	ldr	r3, [pc, #108]	; (977c <RTC_Scheduler_realtime_cb+0xa0>)
    970e:	685b      	ldr	r3, [r3, #4]
    9710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    9712:	781a      	ldrb	r2, [r3, #0]
    9714:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    9718:	4294      	cmp	r4, r2
    971a:	d002      	beq.n	9722 <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] == 0){
    971c:	b91a      	cbnz	r2, 9726 <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 1;
    971e:	2201      	movs	r2, #1
    9720:	701a      	strb	r2, [r3, #0]
}
    9722:	b002      	add	sp, #8
    9724:	bd10      	pop	{r4, pc}
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 0;
    9726:	2200      	movs	r2, #0
    9728:	701a      	strb	r2, [r3, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    972a:	4a0d      	ldr	r2, [pc, #52]	; (9760 <RTC_Scheduler_realtime_cb+0x84>)
    972c:	7a53      	ldrb	r3, [r2, #9]
    972e:	3301      	adds	r3, #1
    9730:	4259      	negs	r1, r3
    9732:	f003 0303 	and.w	r3, r3, #3
    9736:	f001 0103 	and.w	r1, r1, #3
    973a:	bf58      	it	pl
    973c:	424b      	negpl	r3, r1
    973e:	b2db      	uxtb	r3, r3
    9740:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    9742:	7a53      	ldrb	r3, [r2, #9]
 			grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    9744:	7a52      	ldrb	r2, [r2, #9]
    9746:	4c0d      	ldr	r4, [pc, #52]	; (977c <RTC_Scheduler_realtime_cb+0xa0>)
    9748:	6863      	ldr	r3, [r4, #4]
    974a:	6d58      	ldr	r0, [r3, #84]	; 0x54
    974c:	2102      	movs	r1, #2
    974e:	3007      	adds	r0, #7
    9750:	4b0b      	ldr	r3, [pc, #44]	; (9780 <RTC_Scheduler_realtime_cb+0xa4>)
    9752:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    9754:	2105      	movs	r1, #5
    9756:	4620      	mov	r0, r4
    9758:	4b0a      	ldr	r3, [pc, #40]	; (9784 <RTC_Scheduler_realtime_cb+0xa8>)
    975a:	4798      	blx	r3
}
    975c:	e7e1      	b.n	9722 <RTC_Scheduler_realtime_cb+0x46>
    975e:	bf00      	nop
    9760:	20001d24 	.word	0x20001d24
    9764:	000038fb 	.word	0x000038fb
    9768:	20003b88 	.word	0x20003b88
    976c:	000096cd 	.word	0x000096cd
    9770:	00004755 	.word	0x00004755
    9774:	41008000 	.word	0x41008000
    9778:	00004763 	.word	0x00004763
    977c:	20001d14 	.word	0x20001d14
    9780:	000039e9 	.word	0x000039e9
    9784:	000040a9 	.word	0x000040a9

00009788 <grid_task_timer_reset>:
void grid_task_timer_reset(struct grid_task_model* mod){
    9788:	1d03      	adds	r3, r0, #4
    978a:	3024      	adds	r0, #36	; 0x24
		mod->timer[i] = 0;
    978c:	2200      	movs	r2, #0
    978e:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    9792:	4283      	cmp	r3, r0
    9794:	d1fb      	bne.n	978e <grid_task_timer_reset+0x6>
}
    9796:	4770      	bx	lr

00009798 <grid_port_reset_receiver>:
void grid_port_reset_receiver(struct grid_port* por){
    9798:	b510      	push	{r4, lr}
    979a:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    979c:	6840      	ldr	r0, [r0, #4]
    979e:	4b0d      	ldr	r3, [pc, #52]	; (97d4 <grid_port_reset_receiver+0x3c>)
    97a0:	4798      	blx	r3
	por->rx_double_buffer_seek_start_index = 0;
    97a2:	2300      	movs	r3, #0
    97a4:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_read_start_index = 0;
    97a6:	62a3      	str	r3, [r4, #40]	; 0x28
	por->partner_status = 0;
    97a8:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
	por->rx_double_buffer_timeout = 0;
    97ac:	61e3      	str	r3, [r4, #28]
	grid_sys_port_reset_dma(por);
    97ae:	4620      	mov	r0, r4
    97b0:	4b09      	ldr	r3, [pc, #36]	; (97d8 <grid_port_reset_receiver+0x40>)
    97b2:	4798      	blx	r3
		por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    97b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    97b6:	f44f 7316 	mov.w	r3, #600	; 0x258
    97ba:	3b01      	subs	r3, #1
    97bc:	b29b      	uxth	r3, r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    97be:	2b00      	cmp	r3, #0
    97c0:	d1fb      	bne.n	97ba <grid_port_reset_receiver+0x22>
    97c2:	18a3      	adds	r3, r4, r2
    97c4:	2200      	movs	r2, #0
    97c6:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
	usart_async_enable(por->usart);
    97ca:	6860      	ldr	r0, [r4, #4]
    97cc:	4b03      	ldr	r3, [pc, #12]	; (97dc <grid_port_reset_receiver+0x44>)
    97ce:	4798      	blx	r3
    97d0:	bd10      	pop	{r4, pc}
    97d2:	bf00      	nop
    97d4:	0000535d 	.word	0x0000535d
    97d8:	00003619 	.word	0x00003619
    97dc:	00005331 	.word	0x00005331

000097e0 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    97e0:	6a03      	ldr	r3, [r0, #32]
    97e2:	2b00      	cmp	r3, #0
    97e4:	f040 8092 	bne.w	990c <grid_port_receive_task+0x12c>
void grid_port_receive_task(struct grid_port* por){
    97e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97ec:	b082      	sub	sp, #8
    97ee:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 1000){
    97f0:	69c3      	ldr	r3, [r0, #28]
    97f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    97f6:	d91e      	bls.n	9836 <grid_port_receive_task+0x56>
		if (por->partner_status == 1){
    97f8:	f890 3513 	ldrb.w	r3, [r0, #1299]	; 0x513
    97fc:	2b01      	cmp	r3, #1
    97fe:	d007      	beq.n	9810 <grid_port_receive_task+0x30>
			if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    9800:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9802:	b90b      	cbnz	r3, 9808 <grid_port_receive_task+0x28>
    9804:	6a43      	ldr	r3, [r0, #36]	; 0x24
    9806:	b1c3      	cbz	r3, 983a <grid_port_receive_task+0x5a>
				grid_port_reset_receiver(por);
    9808:	4620      	mov	r0, r4
    980a:	4b41      	ldr	r3, [pc, #260]	; (9910 <grid_port_receive_task+0x130>)
    980c:	4798      	blx	r3
    980e:	e014      	b.n	983a <grid_port_receive_task+0x5a>
			printf("{\"type\":\"PORT\", \"data\": [\"Timeout: Disconnect\"]}\r\n");
    9810:	4840      	ldr	r0, [pc, #256]	; (9914 <grid_port_receive_task+0x134>)
    9812:	4d41      	ldr	r5, [pc, #260]	; (9918 <grid_port_receive_task+0x138>)
    9814:	47a8      	blx	r5
			printf("{\"type\":\"ERROR\", \"data\": [\"Buffer Overrun\"]}\r\n");
    9816:	4841      	ldr	r0, [pc, #260]	; (991c <grid_port_receive_task+0x13c>)
    9818:	47a8      	blx	r5
			grid_port_reset_receiver(por);	
    981a:	4620      	mov	r0, r4
    981c:	4b3c      	ldr	r3, [pc, #240]	; (9910 <grid_port_receive_task+0x130>)
    981e:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9820:	23c8      	movs	r3, #200	; 0xc8
    9822:	9301      	str	r3, [sp, #4]
    9824:	2302      	movs	r3, #2
    9826:	9300      	str	r3, [sp, #0]
    9828:	23ff      	movs	r3, #255	; 0xff
    982a:	461a      	mov	r2, r3
    982c:	4619      	mov	r1, r3
    982e:	483c      	ldr	r0, [pc, #240]	; (9920 <grid_port_receive_task+0x140>)
    9830:	4d3c      	ldr	r5, [pc, #240]	; (9924 <grid_port_receive_task+0x144>)
    9832:	47a8      	blx	r5
    9834:	e001      	b.n	983a <grid_port_receive_task+0x5a>
		por->rx_double_buffer_timeout++;
    9836:	3301      	adds	r3, #1
    9838:	61c3      	str	r3, [r0, #28]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    983a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    983c:	18a3      	adds	r3, r4, r2
    983e:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
    9842:	2b0a      	cmp	r3, #10
    9844:	d00b      	beq.n	985e <grid_port_receive_task+0x7e>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9846:	b173      	cbz	r3, 9866 <grid_port_receive_task+0x86>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    9848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    984a:	1e59      	subs	r1, r3, #1
    984c:	428a      	cmp	r2, r1
    984e:	d00d      	beq.n	986c <grid_port_receive_task+0x8c>
    9850:	f44f 75f5 	mov.w	r5, #490	; 0x1ea
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9854:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 9934 <grid_port_receive_task+0x154>
		grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 2, 200); // red
    9858:	4f31      	ldr	r7, [pc, #196]	; (9920 <grid_port_receive_task+0x140>)
    985a:	4e32      	ldr	r6, [pc, #200]	; (9924 <grid_port_receive_task+0x144>)
    985c:	e031      	b.n	98c2 <grid_port_receive_task+0xe2>
			por->rx_double_buffer_status = 1;
    985e:	2301      	movs	r3, #1
    9860:	6223      	str	r3, [r4, #32]
			por->rx_double_buffer_timeout = 0;
    9862:	2300      	movs	r3, #0
    9864:	61e3      	str	r3, [r4, #28]
}
    9866:	b002      	add	sp, #8
    9868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    986c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9870:	4b2d      	ldr	r3, [pc, #180]	; (9928 <grid_port_receive_task+0x148>)
    9872:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			printf("{\"type\":\"TRAP\", \"data\": [\"TRAP1\"]}\r\n");
    9876:	482d      	ldr	r0, [pc, #180]	; (992c <grid_port_receive_task+0x14c>)
    9878:	4b27      	ldr	r3, [pc, #156]	; (9918 <grid_port_receive_task+0x138>)
    987a:	4798      	blx	r3
    987c:	e7fe      	b.n	987c <grid_port_receive_task+0x9c>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    987e:	bb23      	cbnz	r3, 98ca <grid_port_receive_task+0xea>
    9880:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9884:	4b28      	ldr	r3, [pc, #160]	; (9928 <grid_port_receive_task+0x148>)
    9886:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			printf("{\"type\":\"TRAP\", \"data\": [\"TRAP2\"]}\r\n");
    988a:	4829      	ldr	r0, [pc, #164]	; (9930 <grid_port_receive_task+0x150>)
    988c:	4b22      	ldr	r3, [pc, #136]	; (9918 <grid_port_receive_task+0x138>)
    988e:	4798      	blx	r3
    9890:	e7fe      	b.n	9890 <grid_port_receive_task+0xb0>
			printf("{\"type\":\"ERROR\", \"data\": [\"Buffer Overrun\"]}\r\n");
    9892:	4822      	ldr	r0, [pc, #136]	; (991c <grid_port_receive_task+0x13c>)
    9894:	4b20      	ldr	r3, [pc, #128]	; (9918 <grid_port_receive_task+0x138>)
    9896:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    9898:	4620      	mov	r0, r4
    989a:	4b1d      	ldr	r3, [pc, #116]	; (9910 <grid_port_receive_task+0x130>)
    989c:	4798      	blx	r3
			break;
    989e:	e7e2      	b.n	9866 <grid_port_receive_task+0x86>
			por->rx_double_buffer_timeout = 0;
    98a0:	2300      	movs	r3, #0
    98a2:	61e3      	str	r3, [r4, #28]
			por->rx_double_buffer_seek_start_index=0;
    98a4:	6263      	str	r3, [r4, #36]	; 0x24
	for(uint32_t i = 0; i<490; i++){
    98a6:	3d01      	subs	r5, #1
    98a8:	d0dd      	beq.n	9866 <grid_port_receive_task+0x86>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    98aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    98ac:	18a3      	adds	r3, r4, r2
    98ae:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
    98b2:	2b0a      	cmp	r3, #10
    98b4:	d0d3      	beq.n	985e <grid_port_receive_task+0x7e>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    98b6:	2b00      	cmp	r3, #0
    98b8:	d0d5      	beq.n	9866 <grid_port_receive_task+0x86>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    98ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    98bc:	1e59      	subs	r1, r3, #1
    98be:	428a      	cmp	r2, r1
    98c0:	d0d4      	beq.n	986c <grid_port_receive_task+0x8c>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    98c2:	f240 2157 	movw	r1, #599	; 0x257
    98c6:	428a      	cmp	r2, r1
    98c8:	d0d9      	beq.n	987e <grid_port_receive_task+0x9e>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    98ca:	f203 2257 	addw	r2, r3, #599	; 0x257
    98ce:	fba8 1302 	umull	r1, r3, r8, r2
    98d2:	099b      	lsrs	r3, r3, #6
    98d4:	f44f 7116 	mov.w	r1, #600	; 0x258
    98d8:	fb01 2313 	mls	r3, r1, r3, r2
    98dc:	4423      	add	r3, r4
    98de:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
    98e2:	2b00      	cmp	r3, #0
    98e4:	d1d5      	bne.n	9892 <grid_port_receive_task+0xb2>
		grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 2, 200); // red
    98e6:	23c8      	movs	r3, #200	; 0xc8
    98e8:	9301      	str	r3, [sp, #4]
    98ea:	2302      	movs	r3, #2
    98ec:	9300      	str	r3, [sp, #0]
    98ee:	2300      	movs	r3, #0
    98f0:	461a      	mov	r2, r3
    98f2:	2132      	movs	r1, #50	; 0x32
    98f4:	4638      	mov	r0, r7
    98f6:	47b0      	blx	r6
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    98f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    98fa:	f240 2256 	movw	r2, #598	; 0x256
    98fe:	4293      	cmp	r3, r2
    9900:	d8ce      	bhi.n	98a0 <grid_port_receive_task+0xc0>
			por->rx_double_buffer_timeout = 0;
    9902:	2200      	movs	r2, #0
    9904:	61e2      	str	r2, [r4, #28]
			por->rx_double_buffer_seek_start_index++;			
    9906:	3301      	adds	r3, #1
    9908:	6263      	str	r3, [r4, #36]	; 0x24
    990a:	e7cc      	b.n	98a6 <grid_port_receive_task+0xc6>
    990c:	4770      	bx	lr
    990e:	bf00      	nop
    9910:	00009799 	.word	0x00009799
    9914:	0000dbc0 	.word	0x0000dbc0
    9918:	0000c20d 	.word	0x0000c20d
    991c:	0000dbf4 	.word	0x0000dbf4
    9920:	20001d24 	.word	0x20001d24
    9924:	00003955 	.word	0x00003955
    9928:	41008000 	.word	0x41008000
    992c:	0000dc24 	.word	0x0000dc24
    9930:	0000dc48 	.word	0x0000dc48
    9934:	1b4e81b5 	.word	0x1b4e81b5

00009938 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t len){
    9938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    993c:	b089      	sub	sp, #36	; 0x24
    993e:	af02      	add	r7, sp, #8
    9940:	4604      	mov	r4, r0
    9942:	4615      	mov	r5, r2
	printf("{\"type\":\"PORT\", \"data\": [\"Decode\"]}\r\n");
    9944:	48ba      	ldr	r0, [pc, #744]	; (9c30 <grid_port_receive_decode+0x2f8>)
    9946:	4bbb      	ldr	r3, [pc, #748]	; (9c34 <grid_port_receive_decode+0x2fc>)
    9948:	4798      	blx	r3
	uint8_t error_flag = 0;
    994a:	2300      	movs	r3, #0
    994c:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[length];			
    994e:	1deb      	adds	r3, r5, #7
    9950:	f023 0307 	bic.w	r3, r3, #7
    9954:	ebad 0d03 	sub.w	sp, sp, r3
    9958:	a802      	add	r0, sp, #8
	for (uint32_t i = 0; i<length; i++){
    995a:	2d00      	cmp	r5, #0
    995c:	f000 81ed 	beq.w	9d3a <grid_port_receive_decode+0x402>
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9960:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9962:	eb00 0905 	add.w	r9, r0, r5
    9966:	4601      	mov	r1, r0
    9968:	eba2 0800 	sub.w	r8, r2, r0
    996c:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 9c38 <grid_port_receive_decode+0x300>
    9970:	f44f 7e16 	mov.w	lr, #600	; 0x258
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    9974:	2600      	movs	r6, #0
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9976:	eb08 0a01 	add.w	sl, r8, r1
    997a:	fbac b30a 	umull	fp, r3, ip, sl
    997e:	099b      	lsrs	r3, r3, #6
    9980:	fb0e a313 	mls	r3, lr, r3, sl
    9984:	4423      	add	r3, r4
    9986:	f893 a284 	ldrb.w	sl, [r3, #644]	; 0x284
    998a:	f801 ab01 	strb.w	sl, [r1], #1
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    998e:	f883 6284 	strb.w	r6, [r3, #644]	; 0x284
	for (uint32_t i = 0; i<length; i++){
    9992:	4549      	cmp	r1, r9
    9994:	d1ef      	bne.n	9976 <grid_port_receive_decode+0x3e>
	message = &buffer[0];
    9996:	4606      	mov	r6, r0
    9998:	eb05 0802 	add.w	r8, r5, r2
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    999c:	f8df c298 	ldr.w	ip, [pc, #664]	; 9c38 <grid_port_receive_decode+0x300>
    99a0:	f44f 7e16 	mov.w	lr, #600	; 0x258
    99a4:	2100      	movs	r1, #0
    99a6:	fbac 9302 	umull	r9, r3, ip, r2
    99aa:	099b      	lsrs	r3, r3, #6
    99ac:	fb0e 2313 	mls	r3, lr, r3, r2
    99b0:	4423      	add	r3, r4
    99b2:	f883 1284 	strb.w	r1, [r3, #644]	; 0x284
    99b6:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    99b8:	4542      	cmp	r2, r8
    99ba:	d1f4      	bne.n	99a6 <grid_port_receive_decode+0x6e>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    99bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    99be:	442a      	add	r2, r5
    99c0:	4b9d      	ldr	r3, [pc, #628]	; (9c38 <grid_port_receive_decode+0x300>)
    99c2:	fba3 1302 	umull	r1, r3, r3, r2
    99c6:	099b      	lsrs	r3, r3, #6
    99c8:	f44f 7116 	mov.w	r1, #600	; 0x258
    99cc:	fb01 2313 	mls	r3, r1, r3, r2
    99d0:	62a3      	str	r3, [r4, #40]	; 0x28
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    99d2:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_status = 0;
    99d4:	2300      	movs	r3, #0
    99d6:	6223      	str	r3, [r4, #32]
 	for (uint32_t i = 1; i<length; i++){
    99d8:	2d01      	cmp	r5, #1
    99da:	f240 81bd 	bls.w	9d58 <grid_port_receive_decode+0x420>
    99de:	4681      	mov	r9, r0
    99e0:	f04f 0801 	mov.w	r8, #1
			printf("{\"type\": \"WARNING\", \"data\": [\"Frame Start Offset\"]}\r\n");		
    99e4:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 9c94 <grid_port_receive_decode+0x35c>
    99e8:	f8df a248 	ldr.w	sl, [pc, #584]	; 9c34 <grid_port_receive_decode+0x2fc>
    99ec:	e004      	b.n	99f8 <grid_port_receive_decode+0xc0>
 	for (uint32_t i = 1; i<length; i++){
    99ee:	f108 0801 	add.w	r8, r8, #1
    99f2:	4545      	cmp	r5, r8
    99f4:	f240 81b0 	bls.w	9d58 <grid_port_receive_decode+0x420>
 		if (buffer[i] == GRID_MSG_START_OF_HEADING){
    99f8:	f819 3f01 	ldrb.w	r3, [r9, #1]!
    99fc:	2b01      	cmp	r3, #1
    99fe:	d1f6      	bne.n	99ee <grid_port_receive_decode+0xb6>
 			length -= i;
    9a00:	eba5 0508 	sub.w	r5, r5, r8
			printf("{\"type\": \"WARNING\", \"data\": [\"Frame Start Offset\"]}\r\n");		
    9a04:	4658      	mov	r0, fp
    9a06:	47d0      	blx	sl
 			message = &buffer[i];
    9a08:	464e      	mov	r6, r9
    9a0a:	e7f0      	b.n	99ee <grid_port_receive_decode+0xb6>
	if (message[0] == 1 && message [length-1] == 10){
    9a0c:	1973      	adds	r3, r6, r5
    9a0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9a12:	2b0a      	cmp	r3, #10
    9a14:	f040 81a4 	bne.w	9d60 <grid_port_receive_decode+0x428>
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    9a18:	1ee8      	subs	r0, r5, #3
    9a1a:	f107 0217 	add.w	r2, r7, #23
    9a1e:	2102      	movs	r1, #2
    9a20:	4430      	add	r0, r6
    9a22:	4b86      	ldr	r3, [pc, #536]	; (9c3c <grid_port_receive_decode+0x304>)
    9a24:	4798      	blx	r3
    9a26:	4680      	mov	r8, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    9a28:	4629      	mov	r1, r5
    9a2a:	4630      	mov	r0, r6
    9a2c:	4b84      	ldr	r3, [pc, #528]	; (9c40 <grid_port_receive_decode+0x308>)
    9a2e:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    9a30:	fa5f f888 	uxtb.w	r8, r8
    9a34:	b2c0      	uxtb	r0, r0
    9a36:	4580      	cmp	r8, r0
    9a38:	d00e      	beq.n	9a58 <grid_port_receive_decode+0x120>
			if (error_flag != 0){		
    9a3a:	7dfb      	ldrb	r3, [r7, #23]
    9a3c:	2b00      	cmp	r3, #0
    9a3e:	f040 8171 	bne.w	9d24 <grid_port_receive_decode+0x3ec>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    9a42:	23c8      	movs	r3, #200	; 0xc8
    9a44:	9301      	str	r3, [sp, #4]
    9a46:	2301      	movs	r3, #1
    9a48:	9300      	str	r3, [sp, #0]
    9a4a:	23ff      	movs	r3, #255	; 0xff
    9a4c:	2200      	movs	r2, #0
    9a4e:	2114      	movs	r1, #20
    9a50:	487c      	ldr	r0, [pc, #496]	; (9c44 <grid_port_receive_decode+0x30c>)
    9a52:	4c7d      	ldr	r4, [pc, #500]	; (9c48 <grid_port_receive_decode+0x310>)
    9a54:	47a0      	blx	r4
    9a56:	e190      	b.n	9d7a <grid_port_receive_decode+0x442>
		if (checksum_calculated == checksum_received && error_flag == 0){
    9a58:	f897 a017 	ldrb.w	sl, [r7, #23]
    9a5c:	f1ba 0f00 	cmp.w	sl, #0
    9a60:	f040 8160 	bne.w	9d24 <grid_port_receive_decode+0x3ec>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9a64:	7873      	ldrb	r3, [r6, #1]
    9a66:	2b0f      	cmp	r3, #15
    9a68:	d04f      	beq.n	9b0a <grid_port_receive_decode+0x1d2>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    9a6a:	2b0e      	cmp	r3, #14
    9a6c:	f040 814f 	bne.w	9d0e <grid_port_receive_decode+0x3d6>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    9a70:	78b3      	ldrb	r3, [r6, #2]
    9a72:	2b06      	cmp	r3, #6
    9a74:	f000 8181 	beq.w	9d7a <grid_port_receive_decode+0x442>
				else if (message[2] == GRID_MSG_NACKNOWLEDGE){
    9a78:	2b15      	cmp	r3, #21
    9a7a:	f000 80cf 	beq.w	9c1c <grid_port_receive_decode+0x2e4>
				else if (message[2] == GRID_MSG_BELL){
    9a7e:	2b07      	cmp	r3, #7
    9a80:	f040 817b 	bne.w	9d7a <grid_port_receive_decode+0x442>
					if (por->partner_status == 0){
    9a84:	f894 3513 	ldrb.w	r3, [r4, #1299]	; 0x513
    9a88:	2b00      	cmp	r3, #0
    9a8a:	f040 8107 	bne.w	9c9c <grid_port_receive_decode+0x364>
						printf("{\"type\":\"PORT\", \"data\": [\"Connect: Connect\"]}\r\n");
    9a8e:	486f      	ldr	r0, [pc, #444]	; (9c4c <grid_port_receive_decode+0x314>)
    9a90:	4b68      	ldr	r3, [pc, #416]	; (9c34 <grid_port_receive_decode+0x2fc>)
    9a92:	4798      	blx	r3
						por->partner_fi = (message[3] - por->direction + 6)%4;
    9a94:	78f3      	ldrb	r3, [r6, #3]
    9a96:	7a62      	ldrb	r2, [r4, #9]
    9a98:	1a9b      	subs	r3, r3, r2
    9a9a:	3306      	adds	r3, #6
    9a9c:	425a      	negs	r2, r3
    9a9e:	f003 0303 	and.w	r3, r3, #3
    9aa2:	f002 0203 	and.w	r2, r2, #3
    9aa6:	bf58      	it	pl
    9aa8:	4253      	negpl	r3, r2
    9aaa:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    9aae:	f1a5 000c 	sub.w	r0, r5, #12
    9ab2:	7dfa      	ldrb	r2, [r7, #23]
    9ab4:	2108      	movs	r1, #8
    9ab6:	4430      	add	r0, r6
    9ab8:	4b60      	ldr	r3, [pc, #384]	; (9c3c <grid_port_receive_decode+0x304>)
    9aba:	4798      	blx	r3
    9abc:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
						por->partner_status = 1;
    9ac0:	2301      	movs	r3, #1
    9ac2:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
						grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    9ac6:	4c5f      	ldr	r4, [pc, #380]	; (9c44 <grid_port_receive_decode+0x30c>)
    9ac8:	4620      	mov	r0, r4
    9aca:	4b61      	ldr	r3, [pc, #388]	; (9c50 <grid_port_receive_decode+0x318>)
    9acc:	4798      	blx	r3
    9ace:	b2c0      	uxtb	r0, r0
    9ad0:	7020      	strb	r0, [r4, #0]
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    9ad2:	23c8      	movs	r3, #200	; 0xc8
    9ad4:	9301      	str	r3, [sp, #4]
    9ad6:	2302      	movs	r3, #2
    9ad8:	9300      	str	r3, [sp, #0]
    9ada:	2300      	movs	r3, #0
    9adc:	22ff      	movs	r2, #255	; 0xff
    9ade:	4619      	mov	r1, r3
    9ae0:	4620      	mov	r0, r4
    9ae2:	4d59      	ldr	r5, [pc, #356]	; (9c48 <grid_port_receive_decode+0x310>)
    9ae4:	47a8      	blx	r5
						if (grid_sys_state.bank_select!=255){
    9ae6:	7a63      	ldrb	r3, [r4, #9]
    9ae8:	b2db      	uxtb	r3, r3
    9aea:	2bff      	cmp	r3, #255	; 0xff
    9aec:	f000 8145 	beq.w	9d7a <grid_port_receive_decode+0x442>
							grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    9af0:	7a62      	ldrb	r2, [r4, #9]
    9af2:	4c58      	ldr	r4, [pc, #352]	; (9c54 <grid_port_receive_decode+0x31c>)
    9af4:	6863      	ldr	r3, [r4, #4]
    9af6:	6d58      	ldr	r0, [r3, #84]	; 0x54
    9af8:	2102      	movs	r1, #2
    9afa:	3007      	adds	r0, #7
    9afc:	4b56      	ldr	r3, [pc, #344]	; (9c58 <grid_port_receive_decode+0x320>)
    9afe:	4798      	blx	r3
							grid_report_sys_set_changed_flag(mod, 0);												
    9b00:	2100      	movs	r1, #0
    9b02:	4620      	mov	r0, r4
    9b04:	4b55      	ldr	r3, [pc, #340]	; (9c5c <grid_port_receive_decode+0x324>)
    9b06:	4798      	blx	r3
    9b08:	e137      	b.n	9d7a <grid_port_receive_decode+0x442>
				uint8_t received_id  = grid_msg_get_id(message);;			
    9b0a:	4630      	mov	r0, r6
    9b0c:	4b54      	ldr	r3, [pc, #336]	; (9c60 <grid_port_receive_decode+0x328>)
    9b0e:	4798      	blx	r3
    9b10:	4683      	mov	fp, r0
				uint8_t received_age = grid_msg_get_age(message);
    9b12:	4630      	mov	r0, r6
    9b14:	4b53      	ldr	r3, [pc, #332]	; (9c64 <grid_port_receive_decode+0x32c>)
    9b16:	4798      	blx	r3
    9b18:	6078      	str	r0, [r7, #4]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    9b1a:	4630      	mov	r0, r6
    9b1c:	4b52      	ldr	r3, [pc, #328]	; (9c68 <grid_port_receive_decode+0x330>)
    9b1e:	4798      	blx	r3
    9b20:	4681      	mov	r9, r0
    9b22:	f1a0 087f 	sub.w	r8, r0, #127	; 0x7f
    9b26:	fa4f f888 	sxtb.w	r8, r8
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    9b2a:	4630      	mov	r0, r6
    9b2c:	4b4f      	ldr	r3, [pc, #316]	; (9c6c <grid_port_receive_decode+0x334>)
    9b2e:	4798      	blx	r3
    9b30:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    9b34:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    9b36:	f894 2510 	ldrb.w	r2, [r4, #1296]	; 0x510
    9b3a:	b182      	cbz	r2, 9b5e <grid_port_receive_decode+0x226>
				else if(por->partner_fi == 1){ // 90 deg
    9b3c:	2a01      	cmp	r2, #1
    9b3e:	d009      	beq.n	9b54 <grid_port_receive_decode+0x21c>
				else if(por->partner_fi == 2){ // 180 deg
    9b40:	2a02      	cmp	r2, #2
    9b42:	d160      	bne.n	9c06 <grid_port_receive_decode+0x2ce>
					rotated_dx  -= received_dx;
    9b44:	f1c9 087f 	rsb	r8, r9, #127	; 0x7f
    9b48:	fa4f f888 	sxtb.w	r8, r8
					rotated_dy  -= received_dy;
    9b4c:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    9b50:	b25b      	sxtb	r3, r3
    9b52:	e004      	b.n	9b5e <grid_port_receive_decode+0x226>
					rotated_dx  -= received_dy;
    9b54:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    9b58:	4643      	mov	r3, r8
					rotated_dx  -= received_dy;
    9b5a:	fa4f f880 	sxtb.w	r8, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    9b5e:	f894 9511 	ldrb.w	r9, [r4, #1297]	; 0x511
    9b62:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    9b66:	44c8      	add	r8, r9
    9b68:	fa5f f988 	uxtb.w	r9, r8
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    9b6c:	f894 8512 	ldrb.w	r8, [r4, #1298]	; 0x512
    9b70:	f108 087f 	add.w	r8, r8, #127	; 0x7f
    9b74:	4443      	add	r3, r8
    9b76:	fa5f f883 	uxtb.w	r8, r3
				grid_msg_set_id(message, updated_id);
    9b7a:	4659      	mov	r1, fp
    9b7c:	4630      	mov	r0, r6
    9b7e:	4b3c      	ldr	r3, [pc, #240]	; (9c70 <grid_port_receive_decode+0x338>)
    9b80:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    9b82:	4649      	mov	r1, r9
    9b84:	4630      	mov	r0, r6
    9b86:	4b3b      	ldr	r3, [pc, #236]	; (9c74 <grid_port_receive_decode+0x33c>)
    9b88:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    9b8a:	4641      	mov	r1, r8
    9b8c:	4630      	mov	r0, r6
    9b8e:	4b3a      	ldr	r3, [pc, #232]	; (9c78 <grid_port_receive_decode+0x340>)
    9b90:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    9b92:	6879      	ldr	r1, [r7, #4]
    9b94:	4630      	mov	r0, r6
    9b96:	4b39      	ldr	r3, [pc, #228]	; (9c7c <grid_port_receive_decode+0x344>)
    9b98:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    9b9a:	eb09 290b 	add.w	r9, r9, fp, lsl #8
    9b9e:	eb08 2809 	add.w	r8, r8, r9, lsl #8
    9ba2:	687b      	ldr	r3, [r7, #4]
    9ba4:	eb03 2808 	add.w	r8, r3, r8, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    9ba8:	4641      	mov	r1, r8
    9baa:	4826      	ldr	r0, [pc, #152]	; (9c44 <grid_port_receive_decode+0x30c>)
    9bac:	4b34      	ldr	r3, [pc, #208]	; (9c80 <grid_port_receive_decode+0x348>)
    9bae:	4798      	blx	r3
    9bb0:	2800      	cmp	r0, #0
    9bb2:	f040 80e2 	bne.w	9d7a <grid_port_receive_decode+0x442>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    9bb6:	4629      	mov	r1, r5
    9bb8:	4630      	mov	r0, r6
    9bba:	4b21      	ldr	r3, [pc, #132]	; (9c40 <grid_port_receive_decode+0x308>)
    9bbc:	4798      	blx	r3
    9bbe:	4602      	mov	r2, r0
    9bc0:	4629      	mov	r1, r5
    9bc2:	4630      	mov	r0, r6
    9bc4:	4b2f      	ldr	r3, [pc, #188]	; (9c84 <grid_port_receive_decode+0x34c>)
    9bc6:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    9bc8:	f204 44f4 	addw	r4, r4, #1268	; 0x4f4
    9bcc:	b2a9      	uxth	r1, r5
    9bce:	4620      	mov	r0, r4
    9bd0:	4b2d      	ldr	r3, [pc, #180]	; (9c88 <grid_port_receive_decode+0x350>)
    9bd2:	4798      	blx	r3
    9bd4:	2800      	cmp	r0, #0
    9bd6:	f000 80d0 	beq.w	9d7a <grid_port_receive_decode+0x442>
						for (uint8_t i=0; i<length; i++){
    9bda:	b165      	cbz	r5, 9bf6 <grid_port_receive_decode+0x2be>
    9bdc:	2300      	movs	r3, #0
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    9bde:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 9c98 <grid_port_receive_decode+0x360>
    9be2:	5cf1      	ldrb	r1, [r6, r3]
    9be4:	4620      	mov	r0, r4
    9be6:	47c8      	blx	r9
						for (uint8_t i=0; i<length; i++){
    9be8:	f10a 0a01 	add.w	sl, sl, #1
    9bec:	fa5f fa8a 	uxtb.w	sl, sl
    9bf0:	4653      	mov	r3, sl
    9bf2:	45aa      	cmp	sl, r5
    9bf4:	d3f5      	bcc.n	9be2 <grid_port_receive_decode+0x2aa>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    9bf6:	4620      	mov	r0, r4
    9bf8:	4b24      	ldr	r3, [pc, #144]	; (9c8c <grid_port_receive_decode+0x354>)
    9bfa:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);										
    9bfc:	4641      	mov	r1, r8
    9bfe:	4811      	ldr	r0, [pc, #68]	; (9c44 <grid_port_receive_decode+0x30c>)
    9c00:	4b23      	ldr	r3, [pc, #140]	; (9c90 <grid_port_receive_decode+0x358>)
    9c02:	4798      	blx	r3
    9c04:	e0b9      	b.n	9d7a <grid_port_receive_decode+0x442>
				else if(por->partner_fi == 3){ // 270 deg
    9c06:	2a03      	cmp	r2, #3
    9c08:	d105      	bne.n	9c16 <grid_port_receive_decode+0x2de>
					rotated_dy  -= received_dx;
    9c0a:	f1c9 097f 	rsb	r9, r9, #127	; 0x7f
					rotated_dx  += received_dy;
    9c0e:	4698      	mov	r8, r3
					rotated_dy  -= received_dx;
    9c10:	fa4f f389 	sxtb.w	r3, r9
    9c14:	e7a3      	b.n	9b5e <grid_port_receive_decode+0x226>
				int8_t rotated_dy = 0;
    9c16:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    9c18:	4698      	mov	r8, r3
    9c1a:	e7a0      	b.n	9b5e <grid_port_receive_decode+0x226>
					grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 0, 250); // LIGHT RED PULSE
    9c1c:	23fa      	movs	r3, #250	; 0xfa
    9c1e:	9301      	str	r3, [sp, #4]
    9c20:	2200      	movs	r2, #0
    9c22:	9200      	str	r2, [sp, #0]
    9c24:	4613      	mov	r3, r2
    9c26:	2132      	movs	r1, #50	; 0x32
    9c28:	4806      	ldr	r0, [pc, #24]	; (9c44 <grid_port_receive_decode+0x30c>)
    9c2a:	4c07      	ldr	r4, [pc, #28]	; (9c48 <grid_port_receive_decode+0x310>)
    9c2c:	47a0      	blx	r4
    9c2e:	e0a4      	b.n	9d7a <grid_port_receive_decode+0x442>
    9c30:	0000dc6c 	.word	0x0000dc6c
    9c34:	0000c20d 	.word	0x0000c20d
    9c38:	1b4e81b5 	.word	0x1b4e81b5
    9c3c:	000039a9 	.word	0x000039a9
    9c40:	00003c81 	.word	0x00003c81
    9c44:	20001d24 	.word	0x20001d24
    9c48:	00003955 	.word	0x00003955
    9c4c:	0000dccc 	.word	0x0000dccc
    9c50:	000038f1 	.word	0x000038f1
    9c54:	20001d14 	.word	0x20001d14
    9c58:	000039e9 	.word	0x000039e9
    9c5c:	000040a9 	.word	0x000040a9
    9c60:	00003cb1 	.word	0x00003cb1
    9c64:	00003d11 	.word	0x00003d11
    9c68:	00003cd1 	.word	0x00003cd1
    9c6c:	00003cf1 	.word	0x00003cf1
    9c70:	00003d31 	.word	0x00003d31
    9c74:	00003d45 	.word	0x00003d45
    9c78:	00003d59 	.word	0x00003d59
    9c7c:	00003d6d 	.word	0x00003d6d
    9c80:	00003d81 	.word	0x00003d81
    9c84:	00003c9d 	.word	0x00003c9d
    9c88:	00001375 	.word	0x00001375
    9c8c:	000013c1 	.word	0x000013c1
    9c90:	00003dab 	.word	0x00003dab
    9c94:	0000dc94 	.word	0x0000dc94
    9c98:	000013a5 	.word	0x000013a5
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    9c9c:	78f3      	ldrb	r3, [r6, #3]
    9c9e:	7a62      	ldrb	r2, [r4, #9]
    9ca0:	1a9b      	subs	r3, r3, r2
    9ca2:	3306      	adds	r3, #6
    9ca4:	425a      	negs	r2, r3
    9ca6:	f003 0303 	and.w	r3, r3, #3
    9caa:	f002 0203 	and.w	r2, r2, #3
    9cae:	bf58      	it	pl
    9cb0:	4253      	negpl	r3, r2
    9cb2:	f894 8510 	ldrb.w	r8, [r4, #1296]	; 0x510
    9cb6:	4543      	cmp	r3, r8
    9cb8:	bf14      	ite	ne
    9cba:	f04f 0800 	movne.w	r8, #0
    9cbe:	f04f 0801 	moveq.w	r8, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    9cc2:	f1a5 000c 	sub.w	r0, r5, #12
    9cc6:	2200      	movs	r2, #0
    9cc8:	2108      	movs	r1, #8
    9cca:	4430      	add	r0, r6
    9ccc:	4b2d      	ldr	r3, [pc, #180]	; (9d84 <grid_port_receive_decode+0x44c>)
    9cce:	4798      	blx	r3
    9cd0:	60f8      	str	r0, [r7, #12]
						volatile uint32_t debug2 = por->partner_hwcfg;
    9cd2:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
    9cd6:	613b      	str	r3, [r7, #16]
						validator &= (por->partner_hwcfg == debug);									
    9cd8:	68fa      	ldr	r2, [r7, #12]
						if (validator == 0){
    9cda:	4293      	cmp	r3, r2
    9cdc:	d102      	bne.n	9ce4 <grid_port_receive_decode+0x3ac>
    9cde:	f1b8 0f00 	cmp.w	r8, #0
    9ce2:	d110      	bne.n	9d06 <grid_port_receive_decode+0x3ce>
							por->partner_status = 0;	
    9ce4:	2300      	movs	r3, #0
    9ce6:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    9cea:	23c8      	movs	r3, #200	; 0xc8
    9cec:	9301      	str	r3, [sp, #4]
    9cee:	2302      	movs	r3, #2
    9cf0:	9300      	str	r3, [sp, #0]
    9cf2:	23ff      	movs	r3, #255	; 0xff
    9cf4:	461a      	mov	r2, r3
    9cf6:	4619      	mov	r1, r3
    9cf8:	4823      	ldr	r0, [pc, #140]	; (9d88 <grid_port_receive_decode+0x450>)
    9cfa:	4c24      	ldr	r4, [pc, #144]	; (9d8c <grid_port_receive_decode+0x454>)
    9cfc:	47a0      	blx	r4
							printf("{\"type\":\"PORT\", \"data\": [\"Connect: Disconnect\"]}\r\n");
    9cfe:	4824      	ldr	r0, [pc, #144]	; (9d90 <grid_port_receive_decode+0x458>)
    9d00:	4b24      	ldr	r3, [pc, #144]	; (9d94 <grid_port_receive_decode+0x45c>)
    9d02:	4798      	blx	r3
    9d04:	e039      	b.n	9d7a <grid_port_receive_decode+0x442>
							printf("{\"type\":\"PORT\", \"data\": [\"Connect: Validate\"]}\r\n");
    9d06:	4824      	ldr	r0, [pc, #144]	; (9d98 <grid_port_receive_decode+0x460>)
    9d08:	4b22      	ldr	r3, [pc, #136]	; (9d94 <grid_port_receive_decode+0x45c>)
    9d0a:	4798      	blx	r3
    9d0c:	e035      	b.n	9d7a <grid_port_receive_decode+0x442>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    9d0e:	23c8      	movs	r3, #200	; 0xc8
    9d10:	9301      	str	r3, [sp, #4]
    9d12:	2302      	movs	r3, #2
    9d14:	9300      	str	r3, [sp, #0]
    9d16:	2300      	movs	r3, #0
    9d18:	461a      	mov	r2, r3
    9d1a:	21ff      	movs	r1, #255	; 0xff
    9d1c:	481a      	ldr	r0, [pc, #104]	; (9d88 <grid_port_receive_decode+0x450>)
    9d1e:	4c1b      	ldr	r4, [pc, #108]	; (9d8c <grid_port_receive_decode+0x454>)
    9d20:	47a0      	blx	r4
    9d22:	e02a      	b.n	9d7a <grid_port_receive_decode+0x442>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 0, 1, 200); // PURPLE BLINKY
    9d24:	23c8      	movs	r3, #200	; 0xc8
    9d26:	9301      	str	r3, [sp, #4]
    9d28:	2301      	movs	r3, #1
    9d2a:	9300      	str	r3, [sp, #0]
    9d2c:	2300      	movs	r3, #0
    9d2e:	461a      	mov	r2, r3
    9d30:	2114      	movs	r1, #20
    9d32:	4815      	ldr	r0, [pc, #84]	; (9d88 <grid_port_receive_decode+0x450>)
    9d34:	4c15      	ldr	r4, [pc, #84]	; (9d8c <grid_port_receive_decode+0x454>)
    9d36:	47a0      	blx	r4
    9d38:	e01f      	b.n	9d7a <grid_port_receive_decode+0x442>
	message = &buffer[0];
    9d3a:	4606      	mov	r6, r0
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    9d3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9d3e:	442a      	add	r2, r5
    9d40:	4b16      	ldr	r3, [pc, #88]	; (9d9c <grid_port_receive_decode+0x464>)
    9d42:	fba3 1302 	umull	r1, r3, r3, r2
    9d46:	099b      	lsrs	r3, r3, #6
    9d48:	f44f 7116 	mov.w	r1, #600	; 0x258
    9d4c:	fb01 2313 	mls	r3, r1, r3, r2
    9d50:	62a3      	str	r3, [r4, #40]	; 0x28
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    9d52:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_status = 0;
    9d54:	2300      	movs	r3, #0
    9d56:	6223      	str	r3, [r4, #32]
	if (message[0] == 1 && message [length-1] == 10){
    9d58:	7833      	ldrb	r3, [r6, #0]
    9d5a:	2b01      	cmp	r3, #1
    9d5c:	f43f ae56 	beq.w	9a0c <grid_port_receive_decode+0xd4>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    9d60:	23c8      	movs	r3, #200	; 0xc8
    9d62:	9301      	str	r3, [sp, #4]
    9d64:	2302      	movs	r3, #2
    9d66:	9300      	str	r3, [sp, #0]
    9d68:	2314      	movs	r3, #20
    9d6a:	2200      	movs	r2, #0
    9d6c:	4611      	mov	r1, r2
    9d6e:	4806      	ldr	r0, [pc, #24]	; (9d88 <grid_port_receive_decode+0x450>)
    9d70:	4c06      	ldr	r4, [pc, #24]	; (9d8c <grid_port_receive_decode+0x454>)
    9d72:	47a0      	blx	r4
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    9d74:	480a      	ldr	r0, [pc, #40]	; (9da0 <grid_port_receive_decode+0x468>)
    9d76:	4b07      	ldr	r3, [pc, #28]	; (9d94 <grid_port_receive_decode+0x45c>)
    9d78:	4798      	blx	r3
}
    9d7a:	371c      	adds	r7, #28
    9d7c:	46bd      	mov	sp, r7
    9d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d82:	bf00      	nop
    9d84:	000039a9 	.word	0x000039a9
    9d88:	20001d24 	.word	0x20001d24
    9d8c:	00003955 	.word	0x00003955
    9d90:	0000dcfc 	.word	0x0000dcfc
    9d94:	0000c20d 	.word	0x0000c20d
    9d98:	0000dd30 	.word	0x0000dd30
    9d9c:	1b4e81b5 	.word	0x1b4e81b5
    9da0:	0000dd60 	.word	0x0000dd60

00009da4 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    9da4:	b510      	push	{r4, lr}
    9da6:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    9da8:	7e03      	ldrb	r3, [r0, #24]
    9daa:	2b01      	cmp	r3, #1
    9dac:	d012      	beq.n	9dd4 <grid_port_receive_complete_task+0x30>
	grid_port_receive_task(por);	
    9dae:	4620      	mov	r0, r4
    9db0:	4b0c      	ldr	r3, [pc, #48]	; (9de4 <grid_port_receive_complete_task+0x40>)
    9db2:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    9db4:	6a23      	ldr	r3, [r4, #32]
    9db6:	b163      	cbz	r3, 9dd2 <grid_port_receive_complete_task+0x2e>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    9db8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9dba:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9dbc:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9dbe:	bf34      	ite	cc
    9dc0:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9dc2:	f202 2259 	addwcs	r2, r2, #601	; 0x259
    9dc6:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    9dc8:	4620      	mov	r0, r4
    9dca:	4b07      	ldr	r3, [pc, #28]	; (9de8 <grid_port_receive_complete_task+0x44>)
    9dcc:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    9dce:	2300      	movs	r3, #0
    9dd0:	6223      	str	r3, [r4, #32]
    9dd2:	bd10      	pop	{r4, pc}
		por->usart_error_flag = 0;
    9dd4:	2300      	movs	r3, #0
    9dd6:	7603      	strb	r3, [r0, #24]
		grid_port_reset_receiver(por);			
    9dd8:	4b04      	ldr	r3, [pc, #16]	; (9dec <grid_port_receive_complete_task+0x48>)
    9dda:	4798      	blx	r3
		printf("{\"type\": \"ERROR\", \"data\": [\"Parity Error\"]}\r\n");
    9ddc:	4804      	ldr	r0, [pc, #16]	; (9df0 <grid_port_receive_complete_task+0x4c>)
    9dde:	4b05      	ldr	r3, [pc, #20]	; (9df4 <grid_port_receive_complete_task+0x50>)
    9de0:	4798      	blx	r3
    9de2:	e7e4      	b.n	9dae <grid_port_receive_complete_task+0xa>
    9de4:	000097e1 	.word	0x000097e1
    9de8:	00009939 	.word	0x00009939
    9dec:	00009799 	.word	0x00009799
    9df0:	0000dd8c 	.word	0x0000dd8c
    9df4:	0000c20d 	.word	0x0000c20d

00009df8 <init_timer>:


#define RTC1SEC 16384

void init_timer(void)
{
    9df8:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20;
    9dfa:	4c18      	ldr	r4, [pc, #96]	; (9e5c <init_timer+0x64>)
    9dfc:	f240 3333 	movw	r3, #819	; 0x333
    9e00:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    9e02:	4b17      	ldr	r3, [pc, #92]	; (9e60 <init_timer+0x68>)
    9e04:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    9e06:	2301      	movs	r3, #1
    9e08:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1SEC;
    9e0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9e0e:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    9e10:	4a14      	ldr	r2, [pc, #80]	; (9e64 <init_timer+0x6c>)
    9e12:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    9e14:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    9e18:	f240 6266 	movw	r2, #1638	; 0x666
    9e1c:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    9e1e:	4a12      	ldr	r2, [pc, #72]	; (9e68 <init_timer+0x70>)
    9e20:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    9e22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    9e26:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    9e28:	4a10      	ldr	r2, [pc, #64]	; (9e6c <init_timer+0x74>)
    9e2a:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    9e2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    9e30:	4d0f      	ldr	r5, [pc, #60]	; (9e70 <init_timer+0x78>)
    9e32:	1d21      	adds	r1, r4, #4
    9e34:	4628      	mov	r0, r5
    9e36:	4e0f      	ldr	r6, [pc, #60]	; (9e74 <init_timer+0x7c>)
    9e38:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    9e3a:	f104 0118 	add.w	r1, r4, #24
    9e3e:	4628      	mov	r0, r5
    9e40:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    9e42:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    9e46:	4628      	mov	r0, r5
    9e48:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    9e4a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    9e4e:	4628      	mov	r0, r5
    9e50:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    9e52:	4628      	mov	r0, r5
    9e54:	4b08      	ldr	r3, [pc, #32]	; (9e78 <init_timer+0x80>)
    9e56:	4798      	blx	r3
    9e58:	bd70      	pop	{r4, r5, r6, pc}
    9e5a:	bf00      	nop
    9e5c:	20000d68 	.word	0x20000d68
    9e60:	00009679 	.word	0x00009679
    9e64:	00009665 	.word	0x00009665
    9e68:	00009659 	.word	0x00009659
    9e6c:	000096dd 	.word	0x000096dd
    9e70:	20000f94 	.word	0x20000f94
    9e74:	00005041 	.word	0x00005041
    9e78:	00005001 	.word	0x00005001

00009e7c <main>:




int main(void)
{
    9e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e80:	b093      	sub	sp, #76	; 0x4c



	atmel_start_init();	
    9e82:	4b66      	ldr	r3, [pc, #408]	; (a01c <main+0x1a0>)
    9e84:	4798      	blx	r3

	
	printf("Initialization\r\n");
    9e86:	4866      	ldr	r0, [pc, #408]	; (a020 <main+0x1a4>)
    9e88:	4b66      	ldr	r3, [pc, #408]	; (a024 <main+0x1a8>)
    9e8a:	4798      	blx	r3
//	wdt_disable(&WDT_0);
	

	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    9e8c:	4b66      	ldr	r3, [pc, #408]	; (a028 <main+0x1ac>)
    9e8e:	4798      	blx	r3


	composite_device_start();
    9e90:	4b66      	ldr	r3, [pc, #408]	; (a02c <main+0x1b0>)
    9e92:	4798      	blx	r3

	grid_module_common_init();
    9e94:	4b66      	ldr	r3, [pc, #408]	; (a030 <main+0x1b4>)
    9e96:	4798      	blx	r3


	uint32_t loopstart = 0;

					
	uint32_t hwtype = grid_sys_get_hwcfg();
    9e98:	4b66      	ldr	r3, [pc, #408]	; (a034 <main+0x1b8>)
    9e9a:	4798      	blx	r3
    9e9c:	4682      	mov	sl, r0
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9e9e:	2600      	movs	r6, #0
    9ea0:	f8df 91e4 	ldr.w	r9, [pc, #484]	; a088 <main+0x20c>
	{

		if (hwtype == GRID_MODULE_EN16_RevA){	
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9ea4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; a074 <main+0x1f8>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9ea8:	e003      	b.n	9eb2 <main+0x36>
		if (hwtype == GRID_MODULE_EN16_RevA){	
    9eaa:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    9eae:	d01b      	beq.n	9ee8 <main+0x6c>
    9eb0:	3601      	adds	r6, #1
    9eb2:	b2f5      	uxtb	r5, r6
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9eb4:	4860      	ldr	r0, [pc, #384]	; (a038 <main+0x1bc>)
    9eb6:	47c8      	blx	r9
    9eb8:	42a8      	cmp	r0, r5
    9eba:	d8f6      	bhi.n	9eaa <main+0x2e>
	}
		
		
		

	grid_sys_bank_select(&grid_sys_state, 255);
    9ebc:	21ff      	movs	r1, #255	; 0xff
    9ebe:	485f      	ldr	r0, [pc, #380]	; (a03c <main+0x1c0>)
    9ec0:	4b5f      	ldr	r3, [pc, #380]	; (a040 <main+0x1c4>)
    9ec2:	4798      	blx	r3
	
	init_timer();
    9ec4:	4b5f      	ldr	r3, [pc, #380]	; (a044 <main+0x1c8>)
    9ec6:	4798      	blx	r3
	 
	 
 	//spi_nor_flash_test();
	

	printf("Entering Main Loop\r\n");
    9ec8:	485f      	ldr	r0, [pc, #380]	; (a048 <main+0x1cc>)
    9eca:	4b56      	ldr	r3, [pc, #344]	; (a024 <main+0x1a8>)
    9ecc:	4798      	blx	r3
	
	uint8_t usb_init_variable = 0;
    9ece:	2300      	movs	r3, #0
    9ed0:	9308      	str	r3, [sp, #32]
	uint32_t loopcounter = 0;
    9ed2:	9302      	str	r3, [sp, #8]
	mod->current_task = next_task;
    9ed4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; a08c <main+0x210>
    9ed8:	f04f 0301 	mov.w	r3, #1
    9edc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9ee0:	4c55      	ldr	r4, [pc, #340]	; (a038 <main+0x1bc>)
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    9ee2:	f8df b1ac 	ldr.w	fp, [pc, #428]	; a090 <main+0x214>
    9ee6:	e0e1      	b.n	a0ac <main+0x230>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9ee8:	27ff      	movs	r7, #255	; 0xff
    9eea:	9701      	str	r7, [sp, #4]
    9eec:	2400      	movs	r4, #0
    9eee:	9400      	str	r4, [sp, #0]
    9ef0:	4623      	mov	r3, r4
    9ef2:	4622      	mov	r2, r4
    9ef4:	4629      	mov	r1, r5
    9ef6:	4850      	ldr	r0, [pc, #320]	; (a038 <main+0x1bc>)
    9ef8:	47c0      	blx	r8
			grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    9efa:	9401      	str	r4, [sp, #4]
    9efc:	2305      	movs	r3, #5
    9efe:	9300      	str	r3, [sp, #0]
    9f00:	4623      	mov	r3, r4
    9f02:	4622      	mov	r2, r4
    9f04:	4629      	mov	r1, r5
    9f06:	484c      	ldr	r0, [pc, #304]	; (a038 <main+0x1bc>)
    9f08:	f8df b178 	ldr.w	fp, [pc, #376]	; a084 <main+0x208>
    9f0c:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    9f0e:	9401      	str	r4, [sp, #4]
    9f10:	9400      	str	r4, [sp, #0]
    9f12:	463b      	mov	r3, r7
    9f14:	4622      	mov	r2, r4
    9f16:	4629      	mov	r1, r5
    9f18:	4847      	ldr	r0, [pc, #284]	; (a038 <main+0x1bc>)
    9f1a:	4c4c      	ldr	r4, [pc, #304]	; (a04c <main+0x1d0>)
    9f1c:	47a0      	blx	r4
    9f1e:	e7c7      	b.n	9eb0 <main+0x34>
			if (usb_d_get_frame_num() == 0){
    9f20:	4b4b      	ldr	r3, [pc, #300]	; (a050 <main+0x1d4>)
    9f22:	4798      	blx	r3
    9f24:	2800      	cmp	r0, #0
    9f26:	f000 80c9 	beq.w	a0bc <main+0x240>
				printf("USB Connected\r\n");
    9f2a:	484a      	ldr	r0, [pc, #296]	; (a054 <main+0x1d8>)
    9f2c:	4b3d      	ldr	r3, [pc, #244]	; (a024 <main+0x1a8>)
    9f2e:	4798      	blx	r3
				grid_sys_bank_select(&grid_sys_state, 0);
    9f30:	2100      	movs	r1, #0
    9f32:	4842      	ldr	r0, [pc, #264]	; (a03c <main+0x1c0>)
    9f34:	4b42      	ldr	r3, [pc, #264]	; (a040 <main+0x1c4>)
    9f36:	4798      	blx	r3
				usb_init_variable = 1;
    9f38:	2301      	movs	r3, #1
    9f3a:	9308      	str	r3, [sp, #32]
    9f3c:	e0be      	b.n	a0bc <main+0x240>
			grid_sys_state.alert_state--;
    9f3e:	4b3f      	ldr	r3, [pc, #252]	; (a03c <main+0x1c0>)
    9f40:	889b      	ldrh	r3, [r3, #4]
    9f42:	3b01      	subs	r3, #1
    9f44:	b29b      	uxth	r3, r3
    9f46:	4a3d      	ldr	r2, [pc, #244]	; (a03c <main+0x1c0>)
    9f48:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    9f4a:	4610      	mov	r0, r2
    9f4c:	4b42      	ldr	r3, [pc, #264]	; (a058 <main+0x1dc>)
    9f4e:	4798      	blx	r3
    9f50:	b9a0      	cbnz	r0, 9f7c <main+0x100>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    9f52:	483a      	ldr	r0, [pc, #232]	; (a03c <main+0x1c0>)
    9f54:	4b41      	ldr	r3, [pc, #260]	; (a05c <main+0x1e0>)
    9f56:	4798      	blx	r3
    9f58:	4606      	mov	r6, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9f5a:	7863      	ldrb	r3, [r4, #1]
    9f5c:	2b00      	cmp	r3, #0
    9f5e:	f000 8132 	beq.w	a1c6 <main+0x34a>
    9f62:	2500      	movs	r5, #0
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    9f64:	4f3e      	ldr	r7, [pc, #248]	; (a060 <main+0x1e4>)
    9f66:	4633      	mov	r3, r6
    9f68:	2201      	movs	r2, #1
    9f6a:	4629      	mov	r1, r5
    9f6c:	4620      	mov	r0, r4
    9f6e:	47b8      	blx	r7
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9f70:	3501      	adds	r5, #1
    9f72:	b2ed      	uxtb	r5, r5
    9f74:	7863      	ldrb	r3, [r4, #1]
    9f76:	42ab      	cmp	r3, r5
    9f78:	d8f5      	bhi.n	9f66 <main+0xea>
    9f7a:	e124      	b.n	a1c6 <main+0x34a>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    9f7c:	482f      	ldr	r0, [pc, #188]	; (a03c <main+0x1c0>)
    9f7e:	4b39      	ldr	r3, [pc, #228]	; (a064 <main+0x1e8>)
    9f80:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    9f82:	482e      	ldr	r0, [pc, #184]	; (a03c <main+0x1c0>)
    9f84:	4b38      	ldr	r3, [pc, #224]	; (a068 <main+0x1ec>)
    9f86:	4798      	blx	r3
    9f88:	9004      	str	r0, [sp, #16]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    9f8a:	482c      	ldr	r0, [pc, #176]	; (a03c <main+0x1c0>)
    9f8c:	4b37      	ldr	r3, [pc, #220]	; (a06c <main+0x1f0>)
    9f8e:	4798      	blx	r3
    9f90:	9005      	str	r0, [sp, #20]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    9f92:	482a      	ldr	r0, [pc, #168]	; (a03c <main+0x1c0>)
    9f94:	4b36      	ldr	r3, [pc, #216]	; (a070 <main+0x1f4>)
    9f96:	4798      	blx	r3
    9f98:	9006      	str	r0, [sp, #24]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9f9a:	f04f 0900 	mov.w	r9, #0
    9f9e:	e033      	b.n	a008 <main+0x18c>
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    9fa0:	2300      	movs	r3, #0
    9fa2:	9301      	str	r3, [sp, #4]
    9fa4:	9300      	str	r3, [sp, #0]
    9fa6:	2201      	movs	r2, #1
    9fa8:	4629      	mov	r1, r5
    9faa:	4620      	mov	r0, r4
    9fac:	4e31      	ldr	r6, [pc, #196]	; (a074 <main+0x1f8>)
    9fae:	47b0      	blx	r6
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    9fb0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; a094 <main+0x218>
    9fb4:	9804      	ldr	r0, [sp, #16]
    9fb6:	47c0      	blx	r8
    9fb8:	4f2f      	ldr	r7, [pc, #188]	; (a078 <main+0x1fc>)
    9fba:	2200      	movs	r2, #0
    9fbc:	4b2f      	ldr	r3, [pc, #188]	; (a07c <main+0x200>)
    9fbe:	47b8      	blx	r7
    9fc0:	4e2f      	ldr	r6, [pc, #188]	; (a080 <main+0x204>)
    9fc2:	47b0      	blx	r6
    9fc4:	b2c2      	uxtb	r2, r0
    9fc6:	9207      	str	r2, [sp, #28]
    9fc8:	9806      	ldr	r0, [sp, #24]
    9fca:	47c0      	blx	r8
    9fcc:	2200      	movs	r2, #0
    9fce:	4b2b      	ldr	r3, [pc, #172]	; (a07c <main+0x200>)
    9fd0:	47b8      	blx	r7
    9fd2:	47b0      	blx	r6
    9fd4:	b2c0      	uxtb	r0, r0
    9fd6:	9001      	str	r0, [sp, #4]
    9fd8:	9805      	ldr	r0, [sp, #20]
    9fda:	47c0      	blx	r8
    9fdc:	2200      	movs	r2, #0
    9fde:	4b27      	ldr	r3, [pc, #156]	; (a07c <main+0x200>)
    9fe0:	47b8      	blx	r7
    9fe2:	47b0      	blx	r6
    9fe4:	b2c0      	uxtb	r0, r0
    9fe6:	9000      	str	r0, [sp, #0]
    9fe8:	9b07      	ldr	r3, [sp, #28]
    9fea:	2201      	movs	r2, #1
    9fec:	4629      	mov	r1, r5
    9fee:	4620      	mov	r0, r4
    9ff0:	4e24      	ldr	r6, [pc, #144]	; (a084 <main+0x208>)
    9ff2:	47b0      	blx	r6
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    9ff4:	9a06      	ldr	r2, [sp, #24]
    9ff6:	9201      	str	r2, [sp, #4]
    9ff8:	9a05      	ldr	r2, [sp, #20]
    9ffa:	9200      	str	r2, [sp, #0]
    9ffc:	9b04      	ldr	r3, [sp, #16]
    9ffe:	2201      	movs	r2, #1
    a000:	4629      	mov	r1, r5
    a002:	4620      	mov	r0, r4
    a004:	4d11      	ldr	r5, [pc, #68]	; (a04c <main+0x1d0>)
    a006:	47a8      	blx	r5
    a008:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a00c:	4620      	mov	r0, r4
    a00e:	4b1e      	ldr	r3, [pc, #120]	; (a088 <main+0x20c>)
    a010:	4798      	blx	r3
    a012:	f109 0901 	add.w	r9, r9, #1
    a016:	42a8      	cmp	r0, r5
    a018:	d8c2      	bhi.n	9fa0 <main+0x124>
    a01a:	e79a      	b.n	9f52 <main+0xd6>
    a01c:	000002d1 	.word	0x000002d1
    a020:	0000de7c 	.word	0x0000de7c
    a024:	0000c20d 	.word	0x0000c20d
    a028:	0000ada9 	.word	0x0000ada9
    a02c:	0000b751 	.word	0x0000b751
    a030:	00002455 	.word	0x00002455
    a034:	00003a21 	.word	0x00003a21
    a038:	20003640 	.word	0x20003640
    a03c:	20001d24 	.word	0x20001d24
    a040:	00003b11 	.word	0x00003b11
    a044:	00009df9 	.word	0x00009df9
    a048:	0000de8c 	.word	0x0000de8c
    a04c:	00001fff 	.word	0x00001fff
    a050:	0000587d 	.word	0x0000587d
    a054:	0000dea0 	.word	0x0000dea0
    a058:	00003903 	.word	0x00003903
    a05c:	0000390d 	.word	0x0000390d
    a060:	00002049 	.word	0x00002049
    a064:	00003907 	.word	0x00003907
    a068:	00003973 	.word	0x00003973
    a06c:	00003977 	.word	0x00003977
    a070:	0000397b 	.word	0x0000397b
    a074:	00001f6d 	.word	0x00001f6d
    a078:	0000bae9 	.word	0x0000bae9
    a07c:	3fe00000 	.word	0x3fe00000
    a080:	0000bf0d 	.word	0x0000bf0d
    a084:	00001fb5 	.word	0x00001fb5
    a088:	00001f25 	.word	0x00001f25
    a08c:	20003b88 	.word	0x20003b88
    a090:	41008000 	.word	0x41008000
    a094:	0000ba1d 	.word	0x0000ba1d
		gpio_set_pin_level(PIN_GRID_SYNC_2, true);

		// IDLETASK
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
			
			delay_us(1);
    a098:	2001      	movs	r0, #1
    a09a:	47b0      	blx	r6
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    a09c:	4639      	mov	r1, r7
    a09e:	4863      	ldr	r0, [pc, #396]	; (a22c <main+0x3b0>)
    a0a0:	47a8      	blx	r5
    a0a2:	280f      	cmp	r0, #15
    a0a4:	d9f8      	bls.n	a098 <main+0x21c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a0a6:	2380      	movs	r3, #128	; 0x80
    a0a8:	f8cb 3094 	str.w	r3, [fp, #148]	; 0x94
	mod->current_task = next_task;
    a0ac:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a0b0:	f88a 3001 	strb.w	r3, [sl, #1]
		if (usb_init_variable == 0){
    a0b4:	9b08      	ldr	r3, [sp, #32]
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	f43f af32 	beq.w	9f20 <main+0xa4>
		loopcounter++;
    a0bc:	9b02      	ldr	r3, [sp, #8]
    a0be:	3301      	adds	r3, #1
    a0c0:	9302      	str	r3, [sp, #8]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    a0c2:	485a      	ldr	r0, [pc, #360]	; (a22c <main+0x3b0>)
    a0c4:	4b5a      	ldr	r3, [pc, #360]	; (a230 <main+0x3b4>)
    a0c6:	4798      	blx	r3
    a0c8:	9003      	str	r0, [sp, #12]
		if (scheduler_report_flag){
    a0ca:	4b5a      	ldr	r3, [pc, #360]	; (a234 <main+0x3b8>)
    a0cc:	781b      	ldrb	r3, [r3, #0]
    a0ce:	2b00      	cmp	r3, #0
    a0d0:	d033      	beq.n	a13a <main+0x2be>
			scheduler_report_flag=0;
    a0d2:	4b58      	ldr	r3, [pc, #352]	; (a234 <main+0x3b8>)
    a0d4:	f04f 0200 	mov.w	r2, #0
    a0d8:	701a      	strb	r2, [r3, #0]
			uint32_t task_val[GRID_TASK_NUMBER] = {0};
    a0da:	2220      	movs	r2, #32
    a0dc:	2100      	movs	r1, #0
    a0de:	a80a      	add	r0, sp, #40	; 0x28
    a0e0:	4b55      	ldr	r3, [pc, #340]	; (a238 <main+0x3bc>)
    a0e2:	4798      	blx	r3
    a0e4:	4b55      	ldr	r3, [pc, #340]	; (a23c <main+0x3c0>)
    a0e6:	aa09      	add	r2, sp, #36	; 0x24
    a0e8:	f103 0020 	add.w	r0, r3, #32
	return 	mod->timer[task];
    a0ec:	f853 1b04 	ldr.w	r1, [r3], #4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    a0f0:	f842 1f04 	str.w	r1, [r2, #4]!
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    a0f4:	4283      	cmp	r3, r0
    a0f6:	d1f9      	bne.n	a0ec <main+0x270>
			grid_task_timer_reset(&grid_task_state);
    a0f8:	4650      	mov	r0, sl
    a0fa:	4b51      	ldr	r3, [pc, #324]	; (a240 <main+0x3c4>)
    a0fc:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [");
    a0fe:	4851      	ldr	r0, [pc, #324]	; (a244 <main+0x3c8>)
    a100:	4d51      	ldr	r5, [pc, #324]	; (a248 <main+0x3cc>)
    a102:	47a8      	blx	r5
				printf("\"%d\"", task_val[i]);
    a104:	990a      	ldr	r1, [sp, #40]	; 0x28
    a106:	4851      	ldr	r0, [pc, #324]	; (a24c <main+0x3d0>)
    a108:	47a8      	blx	r5
    a10a:	ad0b      	add	r5, sp, #44	; 0x2c
    a10c:	f10d 0948 	add.w	r9, sp, #72	; 0x48
					printf(", ");
    a110:	f8df 818c 	ldr.w	r8, [pc, #396]	; a2a0 <main+0x424>
    a114:	4e4c      	ldr	r6, [pc, #304]	; (a248 <main+0x3cc>)
				printf("\"%d\"", task_val[i]);
    a116:	4f4d      	ldr	r7, [pc, #308]	; (a24c <main+0x3d0>)
					printf(", ");
    a118:	4640      	mov	r0, r8
    a11a:	47b0      	blx	r6
				printf("\"%d\"", task_val[i]);
    a11c:	f855 1b04 	ldr.w	r1, [r5], #4
    a120:	4638      	mov	r0, r7
    a122:	47b0      	blx	r6
				if (i != GRID_TASK_NUMBER-1){
    a124:	454d      	cmp	r5, r9
    a126:	d1f7      	bne.n	a118 <main+0x29c>
			printf("]}\r\n");
    a128:	4849      	ldr	r0, [pc, #292]	; (a250 <main+0x3d4>)
    a12a:	4b4a      	ldr	r3, [pc, #296]	; (a254 <main+0x3d8>)
    a12c:	4798      	blx	r3
			printf("{\"type\":\"LOOP\", \"data\": [\"%d\"]}\r\n", loopcounter);
    a12e:	9902      	ldr	r1, [sp, #8]
    a130:	4849      	ldr	r0, [pc, #292]	; (a258 <main+0x3dc>)
    a132:	4b45      	ldr	r3, [pc, #276]	; (a248 <main+0x3cc>)
    a134:	4798      	blx	r3
			loopcounter = 0;
    a136:	2300      	movs	r3, #0
    a138:	9302      	str	r3, [sp, #8]
	mod->current_task = next_task;
    a13a:	2302      	movs	r3, #2
    a13c:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    a140:	f8df 9160 	ldr.w	r9, [pc, #352]	; a2a4 <main+0x428>
    a144:	4648      	mov	r0, r9
    a146:	4d45      	ldr	r5, [pc, #276]	; (a25c <main+0x3e0>)
    a148:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    a14a:	4845      	ldr	r0, [pc, #276]	; (a260 <main+0x3e4>)
    a14c:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    a14e:	f8df 8158 	ldr.w	r8, [pc, #344]	; a2a8 <main+0x42c>
    a152:	4640      	mov	r0, r8
    a154:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    a156:	4f43      	ldr	r7, [pc, #268]	; (a264 <main+0x3e8>)
    a158:	4638      	mov	r0, r7
    a15a:	47a8      	blx	r5
	mod->current_task = next_task;
    a15c:	2303      	movs	r3, #3
    a15e:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_ui(&GRID_PORT_U);
    a162:	4e41      	ldr	r6, [pc, #260]	; (a268 <main+0x3ec>)
    a164:	4630      	mov	r0, r6
    a166:	4b41      	ldr	r3, [pc, #260]	; (a26c <main+0x3f0>)
    a168:	4798      	blx	r3
	mod->current_task = next_task;
    a16a:	2304      	movs	r3, #4
    a16c:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    a170:	2101      	movs	r1, #1
    a172:	4630      	mov	r0, r6
    a174:	4d3e      	ldr	r5, [pc, #248]	; (a270 <main+0x3f4>)
    a176:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    a178:	2100      	movs	r1, #0
    a17a:	4648      	mov	r0, r9
    a17c:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    a17e:	2100      	movs	r1, #0
    a180:	4837      	ldr	r0, [pc, #220]	; (a260 <main+0x3e4>)
    a182:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);		
    a184:	2100      	movs	r1, #0
    a186:	4640      	mov	r0, r8
    a188:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);						
    a18a:	2100      	movs	r1, #0
    a18c:	4638      	mov	r0, r7
    a18e:	47a8      	blx	r5
	mod->current_task = next_task;
    a190:	2305      	movs	r3, #5
    a192:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_outbound_usart(&GRID_PORT_N);
    a196:	4648      	mov	r0, r9
    a198:	4d36      	ldr	r5, [pc, #216]	; (a274 <main+0x3f8>)
    a19a:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    a19c:	4830      	ldr	r0, [pc, #192]	; (a260 <main+0x3e4>)
    a19e:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    a1a0:	4640      	mov	r0, r8
    a1a2:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    a1a4:	4638      	mov	r0, r7
    a1a6:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    a1a8:	4833      	ldr	r0, [pc, #204]	; (a278 <main+0x3fc>)
    a1aa:	4b34      	ldr	r3, [pc, #208]	; (a27c <main+0x400>)
    a1ac:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    a1ae:	4630      	mov	r0, r6
    a1b0:	4b33      	ldr	r3, [pc, #204]	; (a280 <main+0x404>)
    a1b2:	4798      	blx	r3
	mod->current_task = next_task;
    a1b4:	2307      	movs	r3, #7
    a1b6:	f88a 3001 	strb.w	r3, [sl, #1]
		if (grid_sys_state.alert_state){
    a1ba:	4b1c      	ldr	r3, [pc, #112]	; (a22c <main+0x3b0>)
    a1bc:	889b      	ldrh	r3, [r3, #4]
    a1be:	b29b      	uxth	r3, r3
    a1c0:	2b00      	cmp	r3, #0
    a1c2:	f47f aebc 	bne.w	9f3e <main+0xc2>
	mod->current_task = next_task;
    a1c6:	2306      	movs	r3, #6
    a1c8:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_led_tick(&grid_led_state);
    a1cc:	4620      	mov	r0, r4
    a1ce:	4b2d      	ldr	r3, [pc, #180]	; (a284 <main+0x408>)
    a1d0:	4798      	blx	r3
			grid_led_render_all(&grid_led_state);	
    a1d2:	4620      	mov	r0, r4
    a1d4:	4b2c      	ldr	r3, [pc, #176]	; (a288 <main+0x40c>)
    a1d6:	4798      	blx	r3
	 		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
    a1d8:	4d2c      	ldr	r5, [pc, #176]	; (a28c <main+0x410>)
    a1da:	4620      	mov	r0, r4
    a1dc:	47a8      	blx	r5
    a1de:	2801      	cmp	r0, #1
    a1e0:	d1fb      	bne.n	a1da <main+0x35e>
			grid_led_hardware_start_transfer(&grid_led_state);
    a1e2:	4620      	mov	r0, r4
    a1e4:	4b2a      	ldr	r3, [pc, #168]	; (a290 <main+0x414>)
    a1e6:	4798      	blx	r3
	mod->current_task = next_task;
    a1e8:	f04f 0300 	mov.w	r3, #0
    a1ec:	f88a 3001 	strb.w	r3, [sl, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a1f0:	f89b 30c7 	ldrb.w	r3, [fp, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    a1f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a1f8:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a1fc:	f88b 30c7 	strb.w	r3, [fp, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a200:	f89b 30b3 	ldrb.w	r3, [fp, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a204:	f003 030f 	and.w	r3, r3, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a208:	f88b 30b3 	strb.w	r3, [fp, #179]	; 0xb3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a20c:	2380      	movs	r3, #128	; 0x80
    a20e:	f8cb 3088 	str.w	r3, [fp, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a212:	4a20      	ldr	r2, [pc, #128]	; (a294 <main+0x418>)
    a214:	f8cb 20a8 	str.w	r2, [fp, #168]	; 0xa8
    a218:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    a21c:	f8cb 20a8 	str.w	r2, [fp, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a220:	f8cb 3098 	str.w	r3, [fp, #152]	; 0x98
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    a224:	4d1c      	ldr	r5, [pc, #112]	; (a298 <main+0x41c>)
			delay_us(1);
    a226:	4e1d      	ldr	r6, [pc, #116]	; (a29c <main+0x420>)
    a228:	9f03      	ldr	r7, [sp, #12]
    a22a:	e737      	b.n	a09c <main+0x220>
    a22c:	20001d24 	.word	0x20001d24
    a230:	000038f1 	.word	0x000038f1
    a234:	20000d68 	.word	0x20000d68
    a238:	0000bfbb 	.word	0x0000bfbb
    a23c:	20003b8c 	.word	0x20003b8c
    a240:	00009789 	.word	0x00009789
    a244:	0000deb0 	.word	0x0000deb0
    a248:	0000c125 	.word	0x0000c125
    a24c:	0000decc 	.word	0x0000decc
    a250:	0000dc44 	.word	0x0000dc44
    a254:	0000c20d 	.word	0x0000c20d
    a258:	0000ded8 	.word	0x0000ded8
    a25c:	00009da5 	.word	0x00009da5
    a260:	20003128 	.word	0x20003128
    a264:	200021d4 	.word	0x200021d4
    a268:	20001800 	.word	0x20001800
    a26c:	000040bd 	.word	0x000040bd
    a270:	000016bd 	.word	0x000016bd
    a274:	00001e41 	.word	0x00001e41
    a278:	20002c14 	.word	0x20002c14
    a27c:	00001889 	.word	0x00001889
    a280:	00001cf1 	.word	0x00001cf1
    a284:	00001f29 	.word	0x00001f29
    a288:	00002261 	.word	0x00002261
    a28c:	00002449 	.word	0x00002449
    a290:	0000241d 	.word	0x0000241d
    a294:	40000080 	.word	0x40000080
    a298:	000038f5 	.word	0x000038f5
    a29c:	000047b5 	.word	0x000047b5
    a2a0:	0000ded4 	.word	0x0000ded4
    a2a4:	200012ac 	.word	0x200012ac
    a2a8:	200026fc 	.word	0x200026fc

0000a2ac <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    a2ac:	b940      	cbnz	r0, a2c0 <_read+0x14>
{
    a2ae:	b508      	push	{r3, lr}
    a2b0:	460b      	mov	r3, r1
    a2b2:	4611      	mov	r1, r2
    a2b4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    a2b6:	4b04      	ldr	r3, [pc, #16]	; (a2c8 <_read+0x1c>)
    a2b8:	4798      	blx	r3
    a2ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a2be:	bd08      	pop	{r3, pc}
		return -1;
    a2c0:	f04f 30ff 	mov.w	r0, #4294967295
    a2c4:	4770      	bx	lr
    a2c6:	bf00      	nop
    a2c8:	0000a31d 	.word	0x0000a31d

0000a2cc <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    a2cc:	3801      	subs	r0, #1
    a2ce:	2802      	cmp	r0, #2
    a2d0:	d808      	bhi.n	a2e4 <_write+0x18>
{
    a2d2:	b508      	push	{r3, lr}
    a2d4:	460b      	mov	r3, r1
    a2d6:	4611      	mov	r1, r2
    a2d8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    a2da:	4b04      	ldr	r3, [pc, #16]	; (a2ec <_write+0x20>)
    a2dc:	4798      	blx	r3
    a2de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a2e2:	bd08      	pop	{r3, pc}
		return -1;
    a2e4:	f04f 30ff 	mov.w	r0, #4294967295
    a2e8:	4770      	bx	lr
    a2ea:	bf00      	nop
    a2ec:	0000a341 	.word	0x0000a341

0000a2f0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    a2f0:	b570      	push	{r4, r5, r6, lr}
    a2f2:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    a2f4:	4d06      	ldr	r5, [pc, #24]	; (a310 <stdio_io_init+0x20>)
    a2f6:	682b      	ldr	r3, [r5, #0]
    a2f8:	2100      	movs	r1, #0
    a2fa:	6898      	ldr	r0, [r3, #8]
    a2fc:	4c05      	ldr	r4, [pc, #20]	; (a314 <stdio_io_init+0x24>)
    a2fe:	47a0      	blx	r4
	setbuf(stdin, NULL);
    a300:	682b      	ldr	r3, [r5, #0]
    a302:	2100      	movs	r1, #0
    a304:	6858      	ldr	r0, [r3, #4]
    a306:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    a308:	4b03      	ldr	r3, [pc, #12]	; (a318 <stdio_io_init+0x28>)
    a30a:	601e      	str	r6, [r3, #0]
    a30c:	bd70      	pop	{r4, r5, r6, pc}
    a30e:	bf00      	nop
    a310:	20000558 	.word	0x20000558
    a314:	0000c23d 	.word	0x0000c23d
    a318:	20000e50 	.word	0x20000e50

0000a31c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    a31c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a31e:	4b06      	ldr	r3, [pc, #24]	; (a338 <stdio_io_read+0x1c>)
    a320:	681b      	ldr	r3, [r3, #0]
    a322:	b133      	cbz	r3, a332 <stdio_io_read+0x16>
    a324:	460a      	mov	r2, r1
    a326:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    a328:	b292      	uxth	r2, r2
    a32a:	4618      	mov	r0, r3
    a32c:	4b03      	ldr	r3, [pc, #12]	; (a33c <stdio_io_read+0x20>)
    a32e:	4798      	blx	r3
    a330:	bd08      	pop	{r3, pc}
		return 0;
    a332:	2000      	movs	r0, #0
}
    a334:	bd08      	pop	{r3, pc}
    a336:	bf00      	nop
    a338:	20000e50 	.word	0x20000e50
    a33c:	00004991 	.word	0x00004991

0000a340 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    a340:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a342:	4b06      	ldr	r3, [pc, #24]	; (a35c <stdio_io_write+0x1c>)
    a344:	681b      	ldr	r3, [r3, #0]
    a346:	b133      	cbz	r3, a356 <stdio_io_write+0x16>
    a348:	460a      	mov	r2, r1
    a34a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    a34c:	b292      	uxth	r2, r2
    a34e:	4618      	mov	r0, r3
    a350:	4b03      	ldr	r3, [pc, #12]	; (a360 <stdio_io_write+0x20>)
    a352:	4798      	blx	r3
    a354:	bd08      	pop	{r3, pc}
		return 0;
    a356:	2000      	movs	r0, #0
}
    a358:	bd08      	pop	{r3, pc}
    a35a:	bf00      	nop
    a35c:	20000e50 	.word	0x20000e50
    a360:	00004961 	.word	0x00004961

0000a364 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    a364:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    a366:	4c04      	ldr	r4, [pc, #16]	; (a378 <stdio_redirect_init+0x14>)
    a368:	4620      	mov	r0, r4
    a36a:	4b04      	ldr	r3, [pc, #16]	; (a37c <stdio_redirect_init+0x18>)
    a36c:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    a36e:	4620      	mov	r0, r4
    a370:	4b03      	ldr	r3, [pc, #12]	; (a380 <stdio_redirect_init+0x1c>)
    a372:	4798      	blx	r3
    a374:	bd10      	pop	{r4, pc}
    a376:	bf00      	nop
    a378:	2000104c 	.word	0x2000104c
    a37c:	00005571 	.word	0x00005571
    a380:	0000a2f1 	.word	0x0000a2f1

0000a384 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a384:	b5f0      	push	{r4, r5, r6, r7, lr}
    a386:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a388:	780b      	ldrb	r3, [r1, #0]
    a38a:	f3c3 1441 	ubfx	r4, r3, #5, #2
    a38e:	2c01      	cmp	r4, #1
    a390:	d15e      	bne.n	a450 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a392:	888c      	ldrh	r4, [r1, #4]
    a394:	4d35      	ldr	r5, [pc, #212]	; (a46c <cdcdf_acm_req+0xe8>)
    a396:	782d      	ldrb	r5, [r5, #0]
    a398:	42a5      	cmp	r5, r4
    a39a:	d003      	beq.n	a3a4 <cdcdf_acm_req+0x20>
    a39c:	4d33      	ldr	r5, [pc, #204]	; (a46c <cdcdf_acm_req+0xe8>)
    a39e:	786d      	ldrb	r5, [r5, #1]
    a3a0:	42a5      	cmp	r5, r4
    a3a2:	d158      	bne.n	a456 <cdcdf_acm_req+0xd2>
    a3a4:	4616      	mov	r6, r2
    a3a6:	460c      	mov	r4, r1
    a3a8:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a3aa:	f013 0f80 	tst.w	r3, #128	; 0x80
    a3ae:	d10c      	bne.n	a3ca <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    a3b0:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a3b2:	4b2f      	ldr	r3, [pc, #188]	; (a470 <cdcdf_acm_req+0xec>)
    a3b4:	4798      	blx	r3
    a3b6:	4601      	mov	r1, r0
	switch (req->bRequest) {
    a3b8:	7863      	ldrb	r3, [r4, #1]
    a3ba:	2b20      	cmp	r3, #32
    a3bc:	d013      	beq.n	a3e6 <cdcdf_acm_req+0x62>
    a3be:	2b22      	cmp	r3, #34	; 0x22
    a3c0:	d032      	beq.n	a428 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    a3c2:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    a3c6:	b003      	add	sp, #12
    a3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    a3ca:	2a01      	cmp	r2, #1
    a3cc:	d046      	beq.n	a45c <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    a3ce:	784b      	ldrb	r3, [r1, #1]
    a3d0:	2b21      	cmp	r3, #33	; 0x21
    a3d2:	d145      	bne.n	a460 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a3d4:	88cb      	ldrh	r3, [r1, #6]
    a3d6:	2b07      	cmp	r3, #7
    a3d8:	d145      	bne.n	a466 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a3da:	2300      	movs	r3, #0
    a3dc:	2207      	movs	r2, #7
    a3de:	4925      	ldr	r1, [pc, #148]	; (a474 <cdcdf_acm_req+0xf0>)
    a3e0:	4c25      	ldr	r4, [pc, #148]	; (a478 <cdcdf_acm_req+0xf4>)
    a3e2:	47a0      	blx	r4
    a3e4:	e7ef      	b.n	a3c6 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a3e6:	2f07      	cmp	r7, #7
    a3e8:	d12b      	bne.n	a442 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    a3ea:	b1be      	cbz	r6, a41c <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a3ec:	6800      	ldr	r0, [r0, #0]
    a3ee:	9000      	str	r0, [sp, #0]
    a3f0:	888a      	ldrh	r2, [r1, #4]
    a3f2:	798b      	ldrb	r3, [r1, #6]
    a3f4:	f8ad 2004 	strh.w	r2, [sp, #4]
    a3f8:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a3fc:	4b1b      	ldr	r3, [pc, #108]	; (a46c <cdcdf_acm_req+0xe8>)
    a3fe:	691b      	ldr	r3, [r3, #16]
    a400:	b113      	cbz	r3, a408 <cdcdf_acm_req+0x84>
    a402:	4668      	mov	r0, sp
    a404:	4798      	blx	r3
    a406:	b1f8      	cbz	r0, a448 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    a408:	4b18      	ldr	r3, [pc, #96]	; (a46c <cdcdf_acm_req+0xe8>)
    a40a:	aa02      	add	r2, sp, #8
    a40c:	e912 0003 	ldmdb	r2, {r0, r1}
    a410:	6098      	str	r0, [r3, #8]
    a412:	8199      	strh	r1, [r3, #12]
    a414:	0c09      	lsrs	r1, r1, #16
    a416:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    a418:	2000      	movs	r0, #0
    a41a:	e7d4      	b.n	a3c6 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a41c:	2300      	movs	r3, #0
    a41e:	2207      	movs	r2, #7
    a420:	4628      	mov	r0, r5
    a422:	4c15      	ldr	r4, [pc, #84]	; (a478 <cdcdf_acm_req+0xf4>)
    a424:	47a0      	blx	r4
    a426:	e7ce      	b.n	a3c6 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    a428:	2300      	movs	r3, #0
    a42a:	461a      	mov	r2, r3
    a42c:	4619      	mov	r1, r3
    a42e:	4618      	mov	r0, r3
    a430:	4d11      	ldr	r5, [pc, #68]	; (a478 <cdcdf_acm_req+0xf4>)
    a432:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    a434:	4b0d      	ldr	r3, [pc, #52]	; (a46c <cdcdf_acm_req+0xe8>)
    a436:	695b      	ldr	r3, [r3, #20]
    a438:	b143      	cbz	r3, a44c <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    a43a:	8860      	ldrh	r0, [r4, #2]
    a43c:	4798      	blx	r3
		return ERR_NONE;
    a43e:	2000      	movs	r0, #0
    a440:	e7c1      	b.n	a3c6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a442:	f04f 30ff 	mov.w	r0, #4294967295
    a446:	e7be      	b.n	a3c6 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    a448:	2000      	movs	r0, #0
    a44a:	e7bc      	b.n	a3c6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a44c:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    a44e:	e7ba      	b.n	a3c6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a450:	f06f 0009 	mvn.w	r0, #9
    a454:	e7b7      	b.n	a3c6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a456:	f06f 0009 	mvn.w	r0, #9
    a45a:	e7b4      	b.n	a3c6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a45c:	2000      	movs	r0, #0
    a45e:	e7b2      	b.n	a3c6 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    a460:	f06f 000c 	mvn.w	r0, #12
    a464:	e7af      	b.n	a3c6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a466:	f04f 30ff 	mov.w	r0, #4294967295
    a46a:	e7ac      	b.n	a3c6 <cdcdf_acm_req+0x42>
    a46c:	20000e54 	.word	0x20000e54
    a470:	0000b4cd 	.word	0x0000b4cd
    a474:	20000e5c 	.word	0x20000e5c
    a478:	0000afa9 	.word	0x0000afa9

0000a47c <cdcdf_acm_ctrl>:
{
    a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a480:	b083      	sub	sp, #12
    a482:	4616      	mov	r6, r2
	switch (ctrl) {
    a484:	2901      	cmp	r1, #1
    a486:	d066      	beq.n	a556 <cdcdf_acm_ctrl+0xda>
    a488:	b141      	cbz	r1, a49c <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    a48a:	2902      	cmp	r1, #2
    a48c:	bf0c      	ite	eq
    a48e:	f06f 001a 	mvneq.w	r0, #26
    a492:	f06f 000c 	mvnne.w	r0, #12
}
    a496:	b003      	add	sp, #12
    a498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a49c:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    a4a0:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a4a2:	2800      	cmp	r0, #0
    a4a4:	f000 8085 	beq.w	a5b2 <cdcdf_acm_ctrl+0x136>
    a4a8:	f10a 3bff 	add.w	fp, sl, #4294967295
    a4ac:	f10a 0301 	add.w	r3, sl, #1
    a4b0:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a4b2:	4f46      	ldr	r7, [pc, #280]	; (a5cc <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    a4b4:	f8df 9124 	ldr.w	r9, [pc, #292]	; a5dc <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a4b8:	f8df 8124 	ldr.w	r8, [pc, #292]	; a5e0 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    a4bc:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a4be:	7943      	ldrb	r3, [r0, #5]
    a4c0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a4c4:	2b02      	cmp	r3, #2
    a4c6:	d002      	beq.n	a4ce <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    a4c8:	f06f 0009 	mvn.w	r0, #9
    a4cc:	e7e3      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
    a4ce:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a4d2:	f89b 3000 	ldrb.w	r3, [fp]
    a4d6:	429a      	cmp	r2, r3
    a4d8:	d06e      	beq.n	a5b8 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a4da:	2bff      	cmp	r3, #255	; 0xff
    a4dc:	d16f      	bne.n	a5be <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a4de:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a4e2:	2205      	movs	r2, #5
    a4e4:	6871      	ldr	r1, [r6, #4]
    a4e6:	4b3a      	ldr	r3, [pc, #232]	; (a5d0 <cdcdf_acm_ctrl+0x154>)
    a4e8:	4798      	blx	r3
		while (NULL != ep) {
    a4ea:	4604      	mov	r4, r0
    a4ec:	b1f8      	cbz	r0, a52e <cdcdf_acm_ctrl+0xb2>
    a4ee:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    a4f2:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    a4f4:	7963      	ldrb	r3, [r4, #5]
    a4f6:	7922      	ldrb	r2, [r4, #4]
    a4f8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a4fc:	b292      	uxth	r2, r2
    a4fe:	78e1      	ldrb	r1, [r4, #3]
    a500:	4628      	mov	r0, r5
    a502:	47b8      	blx	r7
    a504:	2800      	cmp	r0, #0
    a506:	d15d      	bne.n	a5c4 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a508:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a50c:	bf14      	ite	ne
    a50e:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a512:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a516:	4628      	mov	r0, r5
    a518:	47c8      	blx	r9
			desc->sod = ep;
    a51a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a51c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a51e:	6871      	ldr	r1, [r6, #4]
    a520:	4420      	add	r0, r4
    a522:	47c0      	blx	r8
		while (NULL != ep) {
    a524:	4604      	mov	r4, r0
    a526:	2800      	cmp	r0, #0
    a528:	d1e3      	bne.n	a4f2 <cdcdf_acm_ctrl+0x76>
    a52a:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a52e:	6833      	ldr	r3, [r6, #0]
    a530:	7818      	ldrb	r0, [r3, #0]
    a532:	2204      	movs	r2, #4
    a534:	6871      	ldr	r1, [r6, #4]
    a536:	4418      	add	r0, r3
    a538:	4b25      	ldr	r3, [pc, #148]	; (a5d0 <cdcdf_acm_ctrl+0x154>)
    a53a:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    a53c:	9b00      	ldr	r3, [sp, #0]
    a53e:	459b      	cmp	fp, r3
    a540:	d004      	beq.n	a54c <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    a542:	2800      	cmp	r0, #0
    a544:	d1ba      	bne.n	a4bc <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    a546:	f06f 0009 	mvn.w	r0, #9
    a54a:	e7a4      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    a54c:	2201      	movs	r2, #1
    a54e:	4b21      	ldr	r3, [pc, #132]	; (a5d4 <cdcdf_acm_ctrl+0x158>)
    a550:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a552:	2000      	movs	r0, #0
    a554:	e79f      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a556:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a558:	b142      	cbz	r2, a56c <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a55a:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a55c:	795b      	ldrb	r3, [r3, #5]
    a55e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a562:	2b02      	cmp	r3, #2
    a564:	d002      	beq.n	a56c <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    a566:	f06f 0009 	mvn.w	r0, #9
    a56a:	e794      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    a56c:	7823      	ldrb	r3, [r4, #0]
    a56e:	2bff      	cmp	r3, #255	; 0xff
    a570:	d008      	beq.n	a584 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    a572:	23ff      	movs	r3, #255	; 0xff
    a574:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    a576:	78a0      	ldrb	r0, [r4, #2]
    a578:	4298      	cmp	r0, r3
    a57a:	d003      	beq.n	a584 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a57c:	4b16      	ldr	r3, [pc, #88]	; (a5d8 <cdcdf_acm_ctrl+0x15c>)
    a57e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a580:	23ff      	movs	r3, #255	; 0xff
    a582:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    a584:	7863      	ldrb	r3, [r4, #1]
    a586:	2bff      	cmp	r3, #255	; 0xff
    a588:	d008      	beq.n	a59c <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    a58a:	23ff      	movs	r3, #255	; 0xff
    a58c:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    a58e:	78e0      	ldrb	r0, [r4, #3]
    a590:	4298      	cmp	r0, r3
    a592:	d003      	beq.n	a59c <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a594:	4b10      	ldr	r3, [pc, #64]	; (a5d8 <cdcdf_acm_ctrl+0x15c>)
    a596:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a598:	23ff      	movs	r3, #255	; 0xff
    a59a:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    a59c:	7920      	ldrb	r0, [r4, #4]
    a59e:	28ff      	cmp	r0, #255	; 0xff
    a5a0:	d003      	beq.n	a5aa <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    a5a2:	4b0d      	ldr	r3, [pc, #52]	; (a5d8 <cdcdf_acm_ctrl+0x15c>)
    a5a4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a5a6:	23ff      	movs	r3, #255	; 0xff
    a5a8:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    a5aa:	2000      	movs	r0, #0
    a5ac:	4b09      	ldr	r3, [pc, #36]	; (a5d4 <cdcdf_acm_ctrl+0x158>)
    a5ae:	7158      	strb	r0, [r3, #5]
    a5b0:	e771      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    a5b2:	f06f 0009 	mvn.w	r0, #9
    a5b6:	e76e      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    a5b8:	f06f 0011 	mvn.w	r0, #17
    a5bc:	e76b      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    a5be:	f06f 001b 	mvn.w	r0, #27
    a5c2:	e768      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    a5c4:	f06f 0013 	mvn.w	r0, #19
    a5c8:	e765      	b.n	a496 <cdcdf_acm_ctrl+0x1a>
    a5ca:	bf00      	nop
    a5cc:	00005895 	.word	0x00005895
    a5d0:	0000b4ed 	.word	0x0000b4ed
    a5d4:	20000e54 	.word	0x20000e54
    a5d8:	000058fd 	.word	0x000058fd
    a5dc:	00005929 	.word	0x00005929
    a5e0:	0000b527 	.word	0x0000b527

0000a5e4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a5e4:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a5e6:	4b0a      	ldr	r3, [pc, #40]	; (a610 <cdcdf_acm_init+0x2c>)
    a5e8:	4798      	blx	r3
    a5ea:	2801      	cmp	r0, #1
    a5ec:	d80c      	bhi.n	a608 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a5ee:	4809      	ldr	r0, [pc, #36]	; (a614 <cdcdf_acm_init+0x30>)
    a5f0:	4b09      	ldr	r3, [pc, #36]	; (a618 <cdcdf_acm_init+0x34>)
    a5f2:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a5f4:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    a5f6:	3018      	adds	r0, #24
    a5f8:	4b08      	ldr	r3, [pc, #32]	; (a61c <cdcdf_acm_init+0x38>)
    a5fa:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a5fc:	4908      	ldr	r1, [pc, #32]	; (a620 <cdcdf_acm_init+0x3c>)
    a5fe:	2001      	movs	r0, #1
    a600:	4b08      	ldr	r3, [pc, #32]	; (a624 <cdcdf_acm_init+0x40>)
    a602:	4798      	blx	r3
	return ERR_NONE;
    a604:	2000      	movs	r0, #0
    a606:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a608:	f06f 0010 	mvn.w	r0, #16
}
    a60c:	bd08      	pop	{r3, pc}
    a60e:	bf00      	nop
    a610:	0000b4d9 	.word	0x0000b4d9
    a614:	20000e54 	.word	0x20000e54
    a618:	0000a47d 	.word	0x0000a47d
    a61c:	0000b479 	.word	0x0000b479
    a620:	20000398 	.word	0x20000398
    a624:	0000b3e5 	.word	0x0000b3e5

0000a628 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    a628:	4b07      	ldr	r3, [pc, #28]	; (a648 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a62a:	795b      	ldrb	r3, [r3, #5]
    a62c:	b143      	cbz	r3, a640 <cdcdf_acm_write+0x18>
{
    a62e:	b510      	push	{r4, lr}
    a630:	460a      	mov	r2, r1
    a632:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a634:	2301      	movs	r3, #1
    a636:	4804      	ldr	r0, [pc, #16]	; (a648 <cdcdf_acm_write+0x20>)
    a638:	78c0      	ldrb	r0, [r0, #3]
    a63a:	4c04      	ldr	r4, [pc, #16]	; (a64c <cdcdf_acm_write+0x24>)
    a63c:	47a0      	blx	r4
    a63e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    a640:	f06f 0010 	mvn.w	r0, #16
    a644:	4770      	bx	lr
    a646:	bf00      	nop
    a648:	20000e54 	.word	0x20000e54
    a64c:	0000afa9 	.word	0x0000afa9

0000a650 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a650:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a652:	780b      	ldrb	r3, [r1, #0]
    a654:	2b81      	cmp	r3, #129	; 0x81
    a656:	d010      	beq.n	a67a <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a658:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a65c:	2b01      	cmp	r3, #1
    a65e:	d13f      	bne.n	a6e0 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    a660:	888a      	ldrh	r2, [r1, #4]
    a662:	4b22      	ldr	r3, [pc, #136]	; (a6ec <hid_keyboard_req+0x9c>)
    a664:	7b1b      	ldrb	r3, [r3, #12]
    a666:	429a      	cmp	r2, r3
    a668:	d13d      	bne.n	a6e6 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    a66a:	784b      	ldrb	r3, [r1, #1]
    a66c:	2b03      	cmp	r3, #3
    a66e:	d028      	beq.n	a6c2 <hid_keyboard_req+0x72>
    a670:	2b0b      	cmp	r3, #11
    a672:	d02c      	beq.n	a6ce <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a674:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a678:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a67a:	784b      	ldrb	r3, [r1, #1]
    a67c:	2b06      	cmp	r3, #6
    a67e:	d002      	beq.n	a686 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    a680:	f06f 0009 	mvn.w	r0, #9
    a684:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a686:	888a      	ldrh	r2, [r1, #4]
    a688:	4b18      	ldr	r3, [pc, #96]	; (a6ec <hid_keyboard_req+0x9c>)
    a68a:	7b1b      	ldrb	r3, [r3, #12]
    a68c:	429a      	cmp	r2, r3
    a68e:	d002      	beq.n	a696 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    a690:	f06f 0009 	mvn.w	r0, #9
    a694:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a696:	884b      	ldrh	r3, [r1, #2]
    a698:	0a1b      	lsrs	r3, r3, #8
    a69a:	2b21      	cmp	r3, #33	; 0x21
    a69c:	d004      	beq.n	a6a8 <hid_keyboard_req+0x58>
    a69e:	2b22      	cmp	r3, #34	; 0x22
    a6a0:	d009      	beq.n	a6b6 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    a6a2:	f06f 000c 	mvn.w	r0, #12
    a6a6:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    a6a8:	4b10      	ldr	r3, [pc, #64]	; (a6ec <hid_keyboard_req+0x9c>)
    a6aa:	6819      	ldr	r1, [r3, #0]
    a6ac:	2300      	movs	r3, #0
    a6ae:	780a      	ldrb	r2, [r1, #0]
    a6b0:	4c0f      	ldr	r4, [pc, #60]	; (a6f0 <hid_keyboard_req+0xa0>)
    a6b2:	47a0      	blx	r4
    a6b4:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    a6b6:	2300      	movs	r3, #0
    a6b8:	223b      	movs	r2, #59	; 0x3b
    a6ba:	490e      	ldr	r1, [pc, #56]	; (a6f4 <hid_keyboard_req+0xa4>)
    a6bc:	4c0c      	ldr	r4, [pc, #48]	; (a6f0 <hid_keyboard_req+0xa0>)
    a6be:	47a0      	blx	r4
    a6c0:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    a6c2:	2300      	movs	r3, #0
    a6c4:	2201      	movs	r2, #1
    a6c6:	490c      	ldr	r1, [pc, #48]	; (a6f8 <hid_keyboard_req+0xa8>)
    a6c8:	4c09      	ldr	r4, [pc, #36]	; (a6f0 <hid_keyboard_req+0xa0>)
    a6ca:	47a0      	blx	r4
    a6cc:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    a6ce:	884a      	ldrh	r2, [r1, #2]
    a6d0:	4b06      	ldr	r3, [pc, #24]	; (a6ec <hid_keyboard_req+0x9c>)
    a6d2:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    a6d4:	2300      	movs	r3, #0
    a6d6:	461a      	mov	r2, r3
    a6d8:	4619      	mov	r1, r3
    a6da:	4c05      	ldr	r4, [pc, #20]	; (a6f0 <hid_keyboard_req+0xa0>)
    a6dc:	47a0      	blx	r4
    a6de:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a6e0:	f06f 0009 	mvn.w	r0, #9
    a6e4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a6e6:	f06f 0009 	mvn.w	r0, #9
    a6ea:	bd10      	pop	{r4, pc}
    a6ec:	20000e78 	.word	0x20000e78
    a6f0:	0000afa9 	.word	0x0000afa9
    a6f4:	0000defc 	.word	0x0000defc
    a6f8:	20000e87 	.word	0x20000e87

0000a6fc <hid_keyboard_ctrl>:
{
    a6fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a700:	4614      	mov	r4, r2
	switch (ctrl) {
    a702:	2901      	cmp	r1, #1
    a704:	d050      	beq.n	a7a8 <hid_keyboard_ctrl+0xac>
    a706:	b141      	cbz	r1, a71a <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    a708:	2902      	cmp	r1, #2
    a70a:	bf0c      	ite	eq
    a70c:	f06f 051a 	mvneq.w	r5, #26
    a710:	f06f 050c 	mvnne.w	r5, #12
}
    a714:	4628      	mov	r0, r5
    a716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a71a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    a71e:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a720:	2b00      	cmp	r3, #0
    a722:	d05e      	beq.n	a7e2 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a724:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a726:	795b      	ldrb	r3, [r3, #5]
    a728:	2b03      	cmp	r3, #3
    a72a:	d15d      	bne.n	a7e8 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a72c:	f898 300c 	ldrb.w	r3, [r8, #12]
    a730:	429a      	cmp	r2, r3
    a732:	d05c      	beq.n	a7ee <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a734:	2bff      	cmp	r3, #255	; 0xff
    a736:	d15d      	bne.n	a7f4 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a738:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a73c:	6823      	ldr	r3, [r4, #0]
    a73e:	7818      	ldrb	r0, [r3, #0]
    a740:	2221      	movs	r2, #33	; 0x21
    a742:	6861      	ldr	r1, [r4, #4]
    a744:	4418      	add	r0, r3
    a746:	4b31      	ldr	r3, [pc, #196]	; (a80c <hid_keyboard_ctrl+0x110>)
    a748:	4798      	blx	r3
    a74a:	4b31      	ldr	r3, [pc, #196]	; (a810 <hid_keyboard_ctrl+0x114>)
    a74c:	6018      	str	r0, [r3, #0]
    a74e:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a750:	f8df 90c4 	ldr.w	r9, [pc, #196]	; a818 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a754:	f8df a0c4 	ldr.w	sl, [pc, #196]	; a81c <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    a758:	f8df b0c4 	ldr.w	fp, [pc, #196]	; a820 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a75c:	6823      	ldr	r3, [r4, #0]
    a75e:	7818      	ldrb	r0, [r3, #0]
    a760:	6861      	ldr	r1, [r4, #4]
    a762:	4418      	add	r0, r3
    a764:	47c8      	blx	r9
		desc->sod = ep;
    a766:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    a768:	2800      	cmp	r0, #0
    a76a:	d046      	beq.n	a7fa <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    a76c:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a76e:	7943      	ldrb	r3, [r0, #5]
    a770:	7902      	ldrb	r2, [r0, #4]
    a772:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a776:	b292      	uxth	r2, r2
    a778:	78c1      	ldrb	r1, [r0, #3]
    a77a:	4638      	mov	r0, r7
    a77c:	47d0      	blx	sl
    a77e:	4605      	mov	r5, r0
    a780:	2800      	cmp	r0, #0
    a782:	d13d      	bne.n	a800 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a784:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    a788:	bf14      	ite	ne
    a78a:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a78e:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    a792:	4638      	mov	r0, r7
    a794:	47d8      	blx	fp
    a796:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    a798:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a79c:	d1de      	bne.n	a75c <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    a79e:	4b1c      	ldr	r3, [pc, #112]	; (a810 <hid_keyboard_ctrl+0x114>)
    a7a0:	2201      	movs	r2, #1
    a7a2:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    a7a4:	741a      	strb	r2, [r3, #16]
    a7a6:	e7b5      	b.n	a714 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a7a8:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a7aa:	b11a      	cbz	r2, a7b4 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a7ac:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a7ae:	795b      	ldrb	r3, [r3, #5]
    a7b0:	2b03      	cmp	r3, #3
    a7b2:	d128      	bne.n	a806 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    a7b4:	7b2b      	ldrb	r3, [r5, #12]
    a7b6:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a7b8:	bf1c      	itt	ne
    a7ba:	23ff      	movne	r3, #255	; 0xff
    a7bc:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    a7be:	7b68      	ldrb	r0, [r5, #13]
    a7c0:	28ff      	cmp	r0, #255	; 0xff
    a7c2:	d003      	beq.n	a7cc <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    a7c4:	4b13      	ldr	r3, [pc, #76]	; (a814 <hid_keyboard_ctrl+0x118>)
    a7c6:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a7c8:	23ff      	movs	r3, #255	; 0xff
    a7ca:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    a7cc:	7ba8      	ldrb	r0, [r5, #14]
    a7ce:	28ff      	cmp	r0, #255	; 0xff
    a7d0:	d003      	beq.n	a7da <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    a7d2:	4b10      	ldr	r3, [pc, #64]	; (a814 <hid_keyboard_ctrl+0x118>)
    a7d4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a7d6:	23ff      	movs	r3, #255	; 0xff
    a7d8:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    a7da:	2500      	movs	r5, #0
    a7dc:	4b0c      	ldr	r3, [pc, #48]	; (a810 <hid_keyboard_ctrl+0x114>)
    a7de:	741d      	strb	r5, [r3, #16]
    a7e0:	e798      	b.n	a714 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a7e2:	f06f 0509 	mvn.w	r5, #9
    a7e6:	e795      	b.n	a714 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a7e8:	f06f 0509 	mvn.w	r5, #9
    a7ec:	e792      	b.n	a714 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    a7ee:	f06f 0511 	mvn.w	r5, #17
    a7f2:	e78f      	b.n	a714 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    a7f4:	f06f 051b 	mvn.w	r5, #27
    a7f8:	e78c      	b.n	a714 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a7fa:	f06f 0509 	mvn.w	r5, #9
    a7fe:	e789      	b.n	a714 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    a800:	f06f 0513 	mvn.w	r5, #19
    a804:	e786      	b.n	a714 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a806:	f06f 0509 	mvn.w	r5, #9
    a80a:	e783      	b.n	a714 <hid_keyboard_ctrl+0x18>
    a80c:	0000b4ed 	.word	0x0000b4ed
    a810:	20000e78 	.word	0x20000e78
    a814:	000058fd 	.word	0x000058fd
    a818:	0000b527 	.word	0x0000b527
    a81c:	00005895 	.word	0x00005895
    a820:	00005929 	.word	0x00005929

0000a824 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    a824:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a826:	4b0a      	ldr	r3, [pc, #40]	; (a850 <hiddf_keyboard_init+0x2c>)
    a828:	4798      	blx	r3
    a82a:	2801      	cmp	r0, #1
    a82c:	d80c      	bhi.n	a848 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    a82e:	4809      	ldr	r0, [pc, #36]	; (a854 <hiddf_keyboard_init+0x30>)
    a830:	4b09      	ldr	r3, [pc, #36]	; (a858 <hiddf_keyboard_init+0x34>)
    a832:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    a834:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    a836:	3014      	adds	r0, #20
    a838:	4b08      	ldr	r3, [pc, #32]	; (a85c <hiddf_keyboard_init+0x38>)
    a83a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    a83c:	4908      	ldr	r1, [pc, #32]	; (a860 <hiddf_keyboard_init+0x3c>)
    a83e:	2001      	movs	r0, #1
    a840:	4b08      	ldr	r3, [pc, #32]	; (a864 <hiddf_keyboard_init+0x40>)
    a842:	4798      	blx	r3
	return ERR_NONE;
    a844:	2000      	movs	r0, #0
    a846:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a848:	f06f 0010 	mvn.w	r0, #16
}
    a84c:	bd08      	pop	{r3, pc}
    a84e:	bf00      	nop
    a850:	0000b4d9 	.word	0x0000b4d9
    a854:	20000e78 	.word	0x20000e78
    a858:	0000a6fd 	.word	0x0000a6fd
    a85c:	0000b479 	.word	0x0000b479
    a860:	200003a0 	.word	0x200003a0
    a864:	0000b3e5 	.word	0x0000b3e5

0000a868 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    a868:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    a86a:	4b26      	ldr	r3, [pc, #152]	; (a904 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    a86c:	7c1b      	ldrb	r3, [r3, #16]
    a86e:	2b00      	cmp	r3, #0
    a870:	d045      	beq.n	a8fe <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    a872:	4a24      	ldr	r2, [pc, #144]	; (a904 <hiddf_keyboard_keys_state_change+0x9c>)
    a874:	2300      	movs	r3, #0
    a876:	6053      	str	r3, [r2, #4]
    a878:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    a87a:	b329      	cbz	r1, a8c8 <hiddf_keyboard_keys_state_change+0x60>
    a87c:	4603      	mov	r3, r0
    a87e:	1e4d      	subs	r5, r1, #1
    a880:	b2ed      	uxtb	r5, r5
    a882:	3501      	adds	r5, #1
    a884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a888:	4405      	add	r5, r0
    a88a:	2200      	movs	r2, #0
    a88c:	e002      	b.n	a894 <hiddf_keyboard_keys_state_change+0x2c>
    a88e:	3303      	adds	r3, #3
    a890:	42ab      	cmp	r3, r5
    a892:	d005      	beq.n	a8a0 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    a894:	785c      	ldrb	r4, [r3, #1]
    a896:	2c00      	cmp	r4, #0
    a898:	d0f9      	beq.n	a88e <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    a89a:	3201      	adds	r2, #1
    a89c:	b2d2      	uxtb	r2, r2
    a89e:	e7f6      	b.n	a88e <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    a8a0:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    a8a2:	b2d2      	uxtb	r2, r2
    a8a4:	2a06      	cmp	r2, #6
    a8a6:	d809      	bhi.n	a8bc <hiddf_keyboard_keys_state_change+0x54>
    a8a8:	4603      	mov	r3, r0
    a8aa:	1e4a      	subs	r2, r1, #1
    a8ac:	b2d2      	uxtb	r2, r2
    a8ae:	3201      	adds	r2, #1
    a8b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a8b4:	4410      	add	r0, r2
    a8b6:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a8b8:	4d12      	ldr	r5, [pc, #72]	; (a904 <hiddf_keyboard_keys_state_change+0x9c>)
    a8ba:	e015      	b.n	a8e8 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    a8bc:	4b11      	ldr	r3, [pc, #68]	; (a904 <hiddf_keyboard_keys_state_change+0x9c>)
    a8be:	f04f 32ff 	mov.w	r2, #4294967295
    a8c2:	f8c3 2006 	str.w	r2, [r3, #6]
    a8c6:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    a8c8:	480e      	ldr	r0, [pc, #56]	; (a904 <hiddf_keyboard_keys_state_change+0x9c>)
    a8ca:	2300      	movs	r3, #0
    a8cc:	2208      	movs	r2, #8
    a8ce:	1d01      	adds	r1, r0, #4
    a8d0:	7b40      	ldrb	r0, [r0, #13]
    a8d2:	4c0d      	ldr	r4, [pc, #52]	; (a908 <hiddf_keyboard_keys_state_change+0xa0>)
    a8d4:	47a0      	blx	r4
    a8d6:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a8d8:	1c62      	adds	r2, r4, #1
    a8da:	7819      	ldrb	r1, [r3, #0]
    a8dc:	442c      	add	r4, r5
    a8de:	7121      	strb	r1, [r4, #4]
    a8e0:	b2d4      	uxtb	r4, r2
    a8e2:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    a8e4:	4283      	cmp	r3, r0
    a8e6:	d0ef      	beq.n	a8c8 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    a8e8:	789a      	ldrb	r2, [r3, #2]
    a8ea:	2a01      	cmp	r2, #1
    a8ec:	d1f9      	bne.n	a8e2 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    a8ee:	785a      	ldrb	r2, [r3, #1]
    a8f0:	2a00      	cmp	r2, #0
    a8f2:	d0f1      	beq.n	a8d8 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    a8f4:	792a      	ldrb	r2, [r5, #4]
    a8f6:	7819      	ldrb	r1, [r3, #0]
    a8f8:	430a      	orrs	r2, r1
    a8fa:	712a      	strb	r2, [r5, #4]
    a8fc:	e7f1      	b.n	a8e2 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    a8fe:	f06f 0010 	mvn.w	r0, #16
}
    a902:	bd38      	pop	{r3, r4, r5, pc}
    a904:	20000e78 	.word	0x20000e78
    a908:	0000afa9 	.word	0x0000afa9

0000a90c <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a90c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a90e:	780b      	ldrb	r3, [r1, #0]
    a910:	2b81      	cmp	r3, #129	; 0x81
    a912:	d010      	beq.n	a936 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a914:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a918:	2b01      	cmp	r3, #1
    a91a:	d13f      	bne.n	a99c <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    a91c:	888a      	ldrh	r2, [r1, #4]
    a91e:	4b22      	ldr	r3, [pc, #136]	; (a9a8 <hid_mouse_req+0x9c>)
    a920:	7a1b      	ldrb	r3, [r3, #8]
    a922:	429a      	cmp	r2, r3
    a924:	d13d      	bne.n	a9a2 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    a926:	784b      	ldrb	r3, [r1, #1]
    a928:	2b03      	cmp	r3, #3
    a92a:	d028      	beq.n	a97e <hid_mouse_req+0x72>
    a92c:	2b0b      	cmp	r3, #11
    a92e:	d02c      	beq.n	a98a <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a930:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a934:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a936:	784b      	ldrb	r3, [r1, #1]
    a938:	2b06      	cmp	r3, #6
    a93a:	d002      	beq.n	a942 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    a93c:	f06f 0009 	mvn.w	r0, #9
    a940:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a942:	888a      	ldrh	r2, [r1, #4]
    a944:	4b18      	ldr	r3, [pc, #96]	; (a9a8 <hid_mouse_req+0x9c>)
    a946:	7a1b      	ldrb	r3, [r3, #8]
    a948:	429a      	cmp	r2, r3
    a94a:	d002      	beq.n	a952 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    a94c:	f06f 0009 	mvn.w	r0, #9
    a950:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a952:	884b      	ldrh	r3, [r1, #2]
    a954:	0a1b      	lsrs	r3, r3, #8
    a956:	2b21      	cmp	r3, #33	; 0x21
    a958:	d004      	beq.n	a964 <hid_mouse_req+0x58>
    a95a:	2b22      	cmp	r3, #34	; 0x22
    a95c:	d009      	beq.n	a972 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    a95e:	f06f 000c 	mvn.w	r0, #12
    a962:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    a964:	4b10      	ldr	r3, [pc, #64]	; (a9a8 <hid_mouse_req+0x9c>)
    a966:	6819      	ldr	r1, [r3, #0]
    a968:	2300      	movs	r3, #0
    a96a:	780a      	ldrb	r2, [r1, #0]
    a96c:	4c0f      	ldr	r4, [pc, #60]	; (a9ac <hid_mouse_req+0xa0>)
    a96e:	47a0      	blx	r4
    a970:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    a972:	2300      	movs	r3, #0
    a974:	2234      	movs	r2, #52	; 0x34
    a976:	490e      	ldr	r1, [pc, #56]	; (a9b0 <hid_mouse_req+0xa4>)
    a978:	4c0c      	ldr	r4, [pc, #48]	; (a9ac <hid_mouse_req+0xa0>)
    a97a:	47a0      	blx	r4
    a97c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    a97e:	2300      	movs	r3, #0
    a980:	2201      	movs	r2, #1
    a982:	490c      	ldr	r1, [pc, #48]	; (a9b4 <hid_mouse_req+0xa8>)
    a984:	4c09      	ldr	r4, [pc, #36]	; (a9ac <hid_mouse_req+0xa0>)
    a986:	47a0      	blx	r4
    a988:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    a98a:	884a      	ldrh	r2, [r1, #2]
    a98c:	4b06      	ldr	r3, [pc, #24]	; (a9a8 <hid_mouse_req+0x9c>)
    a98e:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    a990:	2300      	movs	r3, #0
    a992:	461a      	mov	r2, r3
    a994:	4619      	mov	r1, r3
    a996:	4c05      	ldr	r4, [pc, #20]	; (a9ac <hid_mouse_req+0xa0>)
    a998:	47a0      	blx	r4
    a99a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a99c:	f06f 0009 	mvn.w	r0, #9
    a9a0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a9a2:	f06f 0009 	mvn.w	r0, #9
    a9a6:	bd10      	pop	{r4, pc}
    a9a8:	20000e98 	.word	0x20000e98
    a9ac:	0000afa9 	.word	0x0000afa9
    a9b0:	0000df38 	.word	0x0000df38
    a9b4:	20000ea2 	.word	0x20000ea2

0000a9b8 <hid_mouse_ctrl>:
{
    a9b8:	b570      	push	{r4, r5, r6, lr}
    a9ba:	4614      	mov	r4, r2
	switch (ctrl) {
    a9bc:	2901      	cmp	r1, #1
    a9be:	d040      	beq.n	aa42 <hid_mouse_ctrl+0x8a>
    a9c0:	b139      	cbz	r1, a9d2 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    a9c2:	2902      	cmp	r1, #2
    a9c4:	bf0c      	ite	eq
    a9c6:	f06f 041a 	mvneq.w	r4, #26
    a9ca:	f06f 040c 	mvnne.w	r4, #12
}
    a9ce:	4620      	mov	r0, r4
    a9d0:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a9d2:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    a9d4:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d049      	beq.n	aa6e <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a9da:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a9dc:	795b      	ldrb	r3, [r3, #5]
    a9de:	2b03      	cmp	r3, #3
    a9e0:	d148      	bne.n	aa74 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a9e2:	7a2b      	ldrb	r3, [r5, #8]
    a9e4:	429a      	cmp	r2, r3
    a9e6:	d048      	beq.n	aa7a <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a9e8:	2bff      	cmp	r3, #255	; 0xff
    a9ea:	d149      	bne.n	aa80 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a9ec:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a9ee:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    a9f0:	7818      	ldrb	r0, [r3, #0]
    a9f2:	2221      	movs	r2, #33	; 0x21
    a9f4:	6861      	ldr	r1, [r4, #4]
    a9f6:	4418      	add	r0, r3
    a9f8:	4b29      	ldr	r3, [pc, #164]	; (aaa0 <hid_mouse_ctrl+0xe8>)
    a9fa:	4798      	blx	r3
    a9fc:	4b29      	ldr	r3, [pc, #164]	; (aaa4 <hid_mouse_ctrl+0xec>)
    a9fe:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    aa00:	6823      	ldr	r3, [r4, #0]
    aa02:	7818      	ldrb	r0, [r3, #0]
    aa04:	6861      	ldr	r1, [r4, #4]
    aa06:	4418      	add	r0, r3
    aa08:	4b27      	ldr	r3, [pc, #156]	; (aaa8 <hid_mouse_ctrl+0xf0>)
    aa0a:	4798      	blx	r3
	desc->sod = ep;
    aa0c:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    aa0e:	2800      	cmp	r0, #0
    aa10:	d039      	beq.n	aa86 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    aa12:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    aa14:	7943      	ldrb	r3, [r0, #5]
    aa16:	7902      	ldrb	r2, [r0, #4]
    aa18:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    aa1c:	b292      	uxth	r2, r2
    aa1e:	78c1      	ldrb	r1, [r0, #3]
    aa20:	4630      	mov	r0, r6
    aa22:	4b22      	ldr	r3, [pc, #136]	; (aaac <hid_mouse_ctrl+0xf4>)
    aa24:	4798      	blx	r3
    aa26:	4604      	mov	r4, r0
    aa28:	bb80      	cbnz	r0, aa8c <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    aa2a:	f016 0f80 	tst.w	r6, #128	; 0x80
    aa2e:	d030      	beq.n	aa92 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    aa30:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    aa32:	4630      	mov	r0, r6
    aa34:	4b1e      	ldr	r3, [pc, #120]	; (aab0 <hid_mouse_ctrl+0xf8>)
    aa36:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    aa38:	4b1a      	ldr	r3, [pc, #104]	; (aaa4 <hid_mouse_ctrl+0xec>)
    aa3a:	2201      	movs	r2, #1
    aa3c:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    aa3e:	72da      	strb	r2, [r3, #11]
    aa40:	e7c5      	b.n	a9ce <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    aa42:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    aa44:	b11a      	cbz	r2, aa4e <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    aa46:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    aa48:	795b      	ldrb	r3, [r3, #5]
    aa4a:	2b03      	cmp	r3, #3
    aa4c:	d124      	bne.n	aa98 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    aa4e:	7a2b      	ldrb	r3, [r5, #8]
    aa50:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    aa52:	bf1c      	itt	ne
    aa54:	23ff      	movne	r3, #255	; 0xff
    aa56:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    aa58:	7a68      	ldrb	r0, [r5, #9]
    aa5a:	28ff      	cmp	r0, #255	; 0xff
    aa5c:	d003      	beq.n	aa66 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    aa5e:	4b15      	ldr	r3, [pc, #84]	; (aab4 <hid_mouse_ctrl+0xfc>)
    aa60:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    aa62:	23ff      	movs	r3, #255	; 0xff
    aa64:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    aa66:	2400      	movs	r4, #0
    aa68:	4b0e      	ldr	r3, [pc, #56]	; (aaa4 <hid_mouse_ctrl+0xec>)
    aa6a:	72dc      	strb	r4, [r3, #11]
    aa6c:	e7af      	b.n	a9ce <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    aa6e:	f06f 0409 	mvn.w	r4, #9
    aa72:	e7ac      	b.n	a9ce <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    aa74:	f06f 0409 	mvn.w	r4, #9
    aa78:	e7a9      	b.n	a9ce <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    aa7a:	f06f 0411 	mvn.w	r4, #17
    aa7e:	e7a6      	b.n	a9ce <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    aa80:	f06f 041b 	mvn.w	r4, #27
    aa84:	e7a3      	b.n	a9ce <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    aa86:	f06f 0409 	mvn.w	r4, #9
    aa8a:	e7a0      	b.n	a9ce <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    aa8c:	f06f 0413 	mvn.w	r4, #19
    aa90:	e79d      	b.n	a9ce <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    aa92:	f04f 34ff 	mov.w	r4, #4294967295
    aa96:	e79a      	b.n	a9ce <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    aa98:	f06f 0409 	mvn.w	r4, #9
    aa9c:	e797      	b.n	a9ce <hid_mouse_ctrl+0x16>
    aa9e:	bf00      	nop
    aaa0:	0000b4ed 	.word	0x0000b4ed
    aaa4:	20000e98 	.word	0x20000e98
    aaa8:	0000b527 	.word	0x0000b527
    aaac:	00005895 	.word	0x00005895
    aab0:	00005929 	.word	0x00005929
    aab4:	000058fd 	.word	0x000058fd

0000aab8 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    aab8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    aaba:	4b0a      	ldr	r3, [pc, #40]	; (aae4 <hiddf_mouse_init+0x2c>)
    aabc:	4798      	blx	r3
    aabe:	2801      	cmp	r0, #1
    aac0:	d80c      	bhi.n	aadc <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    aac2:	4809      	ldr	r0, [pc, #36]	; (aae8 <hiddf_mouse_init+0x30>)
    aac4:	4b09      	ldr	r3, [pc, #36]	; (aaec <hiddf_mouse_init+0x34>)
    aac6:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    aac8:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    aaca:	300c      	adds	r0, #12
    aacc:	4b08      	ldr	r3, [pc, #32]	; (aaf0 <hiddf_mouse_init+0x38>)
    aace:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    aad0:	4908      	ldr	r1, [pc, #32]	; (aaf4 <hiddf_mouse_init+0x3c>)
    aad2:	2001      	movs	r0, #1
    aad4:	4b08      	ldr	r3, [pc, #32]	; (aaf8 <hiddf_mouse_init+0x40>)
    aad6:	4798      	blx	r3
	return ERR_NONE;
    aad8:	2000      	movs	r0, #0
    aada:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    aadc:	f06f 0010 	mvn.w	r0, #16
}
    aae0:	bd08      	pop	{r3, pc}
    aae2:	bf00      	nop
    aae4:	0000b4d9 	.word	0x0000b4d9
    aae8:	20000e98 	.word	0x20000e98
    aaec:	0000a9b9 	.word	0x0000a9b9
    aaf0:	0000b479 	.word	0x0000b479
    aaf4:	200003a8 	.word	0x200003a8
    aaf8:	0000b3e5 	.word	0x0000b3e5

0000aafc <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    aafc:	2200      	movs	r2, #0
    aafe:	4b0d      	ldr	r3, [pc, #52]	; (ab34 <hiddf_mouse_move+0x38>)
    ab00:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    ab02:	2901      	cmp	r1, #1
    ab04:	d00e      	beq.n	ab24 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    ab06:	2902      	cmp	r1, #2
    ab08:	d00e      	beq.n	ab28 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    ab0a:	2903      	cmp	r1, #3
    ab0c:	d10f      	bne.n	ab2e <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    ab0e:	4b09      	ldr	r3, [pc, #36]	; (ab34 <hiddf_mouse_move+0x38>)
    ab10:	71d8      	strb	r0, [r3, #7]
{
    ab12:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    ab14:	4807      	ldr	r0, [pc, #28]	; (ab34 <hiddf_mouse_move+0x38>)
    ab16:	2300      	movs	r3, #0
    ab18:	2204      	movs	r2, #4
    ab1a:	1881      	adds	r1, r0, r2
    ab1c:	7a40      	ldrb	r0, [r0, #9]
    ab1e:	4c06      	ldr	r4, [pc, #24]	; (ab38 <hiddf_mouse_move+0x3c>)
    ab20:	47a0      	blx	r4
    ab22:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    ab24:	7158      	strb	r0, [r3, #5]
    ab26:	e7f4      	b.n	ab12 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    ab28:	4b02      	ldr	r3, [pc, #8]	; (ab34 <hiddf_mouse_move+0x38>)
    ab2a:	7198      	strb	r0, [r3, #6]
    ab2c:	e7f1      	b.n	ab12 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    ab2e:	f06f 000c 	mvn.w	r0, #12
    ab32:	4770      	bx	lr
    ab34:	20000e98 	.word	0x20000e98
    ab38:	0000afa9 	.word	0x0000afa9

0000ab3c <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    ab3c:	4770      	bx	lr

0000ab3e <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ab3e:	e7fe      	b.n	ab3e <midi_cb_ep_bulk_out>

0000ab40 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ab40:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    ab42:	780b      	ldrb	r3, [r1, #0]
    ab44:	2b81      	cmp	r3, #129	; 0x81
    ab46:	d014      	beq.n	ab72 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ab48:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ab4c:	2b01      	cmp	r3, #1
    ab4e:	d132      	bne.n	abb6 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    ab50:	888b      	ldrh	r3, [r1, #4]
    ab52:	4a1c      	ldr	r2, [pc, #112]	; (abc4 <audio_midi_req+0x84>)
    ab54:	7912      	ldrb	r2, [r2, #4]
    ab56:	429a      	cmp	r2, r3
    ab58:	d003      	beq.n	ab62 <audio_midi_req+0x22>
    ab5a:	4a1a      	ldr	r2, [pc, #104]	; (abc4 <audio_midi_req+0x84>)
    ab5c:	7952      	ldrb	r2, [r2, #5]
    ab5e:	429a      	cmp	r2, r3
    ab60:	d12c      	bne.n	abbc <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    ab62:	784b      	ldrb	r3, [r1, #1]
    ab64:	2b03      	cmp	r3, #3
    ab66:	d017      	beq.n	ab98 <audio_midi_req+0x58>
    ab68:	2b0b      	cmp	r3, #11
    ab6a:	d01b      	beq.n	aba4 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    ab6c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    ab70:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    ab72:	888b      	ldrh	r3, [r1, #4]
    ab74:	4a13      	ldr	r2, [pc, #76]	; (abc4 <audio_midi_req+0x84>)
    ab76:	7912      	ldrb	r2, [r2, #4]
    ab78:	429a      	cmp	r2, r3
    ab7a:	d006      	beq.n	ab8a <audio_midi_req+0x4a>
    ab7c:	4a11      	ldr	r2, [pc, #68]	; (abc4 <audio_midi_req+0x84>)
    ab7e:	7952      	ldrb	r2, [r2, #5]
    ab80:	429a      	cmp	r2, r3
    ab82:	d002      	beq.n	ab8a <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    ab84:	f06f 0009 	mvn.w	r0, #9
    ab88:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    ab8a:	4b0e      	ldr	r3, [pc, #56]	; (abc4 <audio_midi_req+0x84>)
    ab8c:	6819      	ldr	r1, [r3, #0]
    ab8e:	2300      	movs	r3, #0
    ab90:	780a      	ldrb	r2, [r1, #0]
    ab92:	4c0d      	ldr	r4, [pc, #52]	; (abc8 <audio_midi_req+0x88>)
    ab94:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    ab96:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    ab98:	2300      	movs	r3, #0
    ab9a:	2201      	movs	r2, #1
    ab9c:	490b      	ldr	r1, [pc, #44]	; (abcc <audio_midi_req+0x8c>)
    ab9e:	4c0a      	ldr	r4, [pc, #40]	; (abc8 <audio_midi_req+0x88>)
    aba0:	47a0      	blx	r4
    aba2:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    aba4:	884a      	ldrh	r2, [r1, #2]
    aba6:	4b07      	ldr	r3, [pc, #28]	; (abc4 <audio_midi_req+0x84>)
    aba8:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    abaa:	2300      	movs	r3, #0
    abac:	461a      	mov	r2, r3
    abae:	4619      	mov	r1, r3
    abb0:	4c05      	ldr	r4, [pc, #20]	; (abc8 <audio_midi_req+0x88>)
    abb2:	47a0      	blx	r4
    abb4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    abb6:	f06f 0009 	mvn.w	r0, #9
    abba:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    abbc:	f06f 0009 	mvn.w	r0, #9
    abc0:	bd10      	pop	{r4, pc}
    abc2:	bf00      	nop
    abc4:	20000eb0 	.word	0x20000eb0
    abc8:	0000afa9 	.word	0x0000afa9
    abcc:	20000eb8 	.word	0x20000eb8

0000abd0 <audio_midi_ctrl>:
{
    abd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    abd4:	b083      	sub	sp, #12
    abd6:	4615      	mov	r5, r2
	switch (ctrl) {
    abd8:	2901      	cmp	r1, #1
    abda:	f000 8092 	beq.w	ad02 <audio_midi_ctrl+0x132>
    abde:	b141      	cbz	r1, abf2 <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    abe0:	2902      	cmp	r1, #2
    abe2:	bf0c      	ite	eq
    abe4:	f06f 001a 	mvneq.w	r0, #26
    abe8:	f06f 000c 	mvnne.w	r0, #12
}
    abec:	b003      	add	sp, #12
    abee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    abf2:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    abf6:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    abf8:	2800      	cmp	r0, #0
    abfa:	f000 80a9 	beq.w	ad50 <audio_midi_ctrl+0x180>
    abfe:	f109 0604 	add.w	r6, r9, #4
    ac02:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    ac04:	f04f 0804 	mov.w	r8, #4
    ac08:	4f5d      	ldr	r7, [pc, #372]	; (ad80 <audio_midi_ctrl+0x1b0>)
    ac0a:	e019      	b.n	ac40 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    ac0c:	f816 3b01 	ldrb.w	r3, [r6], #1
    ac10:	429a      	cmp	r2, r3
    ac12:	f000 80a3 	beq.w	ad5c <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    ac16:	2bff      	cmp	r3, #255	; 0xff
    ac18:	f040 80a3 	bne.w	ad62 <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    ac1c:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    ac20:	2c01      	cmp	r4, #1
    ac22:	d016      	beq.n	ac52 <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    ac24:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    ac26:	7818      	ldrb	r0, [r3, #0]
    ac28:	4642      	mov	r2, r8
    ac2a:	6869      	ldr	r1, [r5, #4]
    ac2c:	4418      	add	r0, r3
    ac2e:	47b8      	blx	r7
    ac30:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    ac32:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ac36:	f000 809e 	beq.w	ad76 <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    ac3a:	2800      	cmp	r0, #0
    ac3c:	f000 808b 	beq.w	ad56 <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    ac40:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    ac42:	7943      	ldrb	r3, [r0, #5]
    ac44:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ac48:	2b01      	cmp	r3, #1
    ac4a:	d0df      	beq.n	ac0c <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    ac4c:	f06f 0009 	mvn.w	r0, #9
    ac50:	e7cc      	b.n	abec <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    ac52:	2205      	movs	r2, #5
    ac54:	6869      	ldr	r1, [r5, #4]
    ac56:	4b4a      	ldr	r3, [pc, #296]	; (ad80 <audio_midi_ctrl+0x1b0>)
    ac58:	4798      	blx	r3
    ac5a:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    ac5c:	4e49      	ldr	r6, [pc, #292]	; (ad84 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ac5e:	f8df 8144 	ldr.w	r8, [pc, #324]	; ada4 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    ac62:	4f49      	ldr	r7, [pc, #292]	; (ad88 <audio_midi_ctrl+0x1b8>)
    ac64:	e01a      	b.n	ac9c <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    ac66:	4a47      	ldr	r2, [pc, #284]	; (ad84 <audio_midi_ctrl+0x1b4>)
    ac68:	7953      	ldrb	r3, [r2, #5]
    ac6a:	425b      	negs	r3, r3
    ac6c:	b2db      	uxtb	r3, r3
    ac6e:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    ac70:	f06f 0013 	mvn.w	r0, #19
    ac74:	e7ba      	b.n	abec <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    ac76:	f89d 0002 	ldrb.w	r0, [sp, #2]
    ac7a:	b2c0      	uxtb	r0, r0
    ac7c:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    ac80:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    ac82:	4a42      	ldr	r2, [pc, #264]	; (ad8c <audio_midi_ctrl+0x1bc>)
    ac84:	2102      	movs	r1, #2
    ac86:	f899 0006 	ldrb.w	r0, [r9, #6]
    ac8a:	4b41      	ldr	r3, [pc, #260]	; (ad90 <audio_midi_ctrl+0x1c0>)
    ac8c:	4798      	blx	r3
				desc->sod = ep;
    ac8e:	602c      	str	r4, [r5, #0]
    ac90:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ac92:	6869      	ldr	r1, [r5, #4]
    ac94:	4420      	add	r0, r4
    ac96:	4b3f      	ldr	r3, [pc, #252]	; (ad94 <audio_midi_ctrl+0x1c4>)
    ac98:	4798      	blx	r3
    ac9a:	4604      	mov	r4, r0
			while (NULL != ep) {
    ac9c:	2c00      	cmp	r4, #0
    ac9e:	d063      	beq.n	ad68 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    aca0:	78a3      	ldrb	r3, [r4, #2]
    aca2:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    aca6:	78e3      	ldrb	r3, [r4, #3]
    aca8:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    acac:	7962      	ldrb	r2, [r4, #5]
    acae:	7923      	ldrb	r3, [r4, #4]
    acb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    acb4:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    acb6:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    acba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    acbe:	b2db      	uxtb	r3, r3
    acc0:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    acc2:	2301      	movs	r3, #1
    acc4:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    acc6:	f89d 0002 	ldrb.w	r0, [sp, #2]
    acca:	f89d 1003 	ldrb.w	r1, [sp, #3]
    acce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    acd2:	b292      	uxth	r2, r2
    acd4:	47c0      	blx	r8
    acd6:	b2c0      	uxtb	r0, r0
    acd8:	7170      	strb	r0, [r6, #5]
    acda:	2800      	cmp	r0, #0
    acdc:	d1c3      	bne.n	ac66 <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    acde:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ace2:	f013 0f80 	tst.w	r3, #128	; 0x80
    ace6:	d1c6      	bne.n	ac76 <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    ace8:	f89d 0002 	ldrb.w	r0, [sp, #2]
    acec:	b2c0      	uxtb	r0, r0
    acee:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    acf2:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    acf4:	4a28      	ldr	r2, [pc, #160]	; (ad98 <audio_midi_ctrl+0x1c8>)
    acf6:	2102      	movs	r1, #2
    acf8:	f899 0007 	ldrb.w	r0, [r9, #7]
    acfc:	4b24      	ldr	r3, [pc, #144]	; (ad90 <audio_midi_ctrl+0x1c0>)
    acfe:	4798      	blx	r3
    ad00:	e7c5      	b.n	ac8e <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    ad02:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    ad04:	b142      	cbz	r2, ad18 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ad06:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    ad08:	795b      	ldrb	r3, [r3, #5]
    ad0a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ad0e:	2b01      	cmp	r3, #1
    ad10:	d002      	beq.n	ad18 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    ad12:	f06f 0009 	mvn.w	r0, #9
    ad16:	e769      	b.n	abec <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    ad18:	7923      	ldrb	r3, [r4, #4]
    ad1a:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    ad1c:	bf1c      	itt	ne
    ad1e:	23ff      	movne	r3, #255	; 0xff
    ad20:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    ad22:	7963      	ldrb	r3, [r4, #5]
    ad24:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    ad26:	bf1c      	itt	ne
    ad28:	23ff      	movne	r3, #255	; 0xff
    ad2a:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    ad2c:	79a0      	ldrb	r0, [r4, #6]
    ad2e:	28ff      	cmp	r0, #255	; 0xff
    ad30:	d003      	beq.n	ad3a <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    ad32:	4b1a      	ldr	r3, [pc, #104]	; (ad9c <audio_midi_ctrl+0x1cc>)
    ad34:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ad36:	23ff      	movs	r3, #255	; 0xff
    ad38:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    ad3a:	79e0      	ldrb	r0, [r4, #7]
    ad3c:	28ff      	cmp	r0, #255	; 0xff
    ad3e:	d003      	beq.n	ad48 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    ad40:	4b16      	ldr	r3, [pc, #88]	; (ad9c <audio_midi_ctrl+0x1cc>)
    ad42:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ad44:	23ff      	movs	r3, #255	; 0xff
    ad46:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    ad48:	2000      	movs	r0, #0
    ad4a:	4b15      	ldr	r3, [pc, #84]	; (ada0 <audio_midi_ctrl+0x1d0>)
    ad4c:	7358      	strb	r0, [r3, #13]
    ad4e:	e74d      	b.n	abec <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    ad50:	f06f 0009 	mvn.w	r0, #9
    ad54:	e74a      	b.n	abec <audio_midi_ctrl+0x1c>
    ad56:	f06f 0009 	mvn.w	r0, #9
    ad5a:	e747      	b.n	abec <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    ad5c:	f06f 0011 	mvn.w	r0, #17
    ad60:	e744      	b.n	abec <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    ad62:	f06f 001b 	mvn.w	r0, #27
    ad66:	e741      	b.n	abec <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    ad68:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    ad6a:	7818      	ldrb	r0, [r3, #0]
    ad6c:	2204      	movs	r2, #4
    ad6e:	6869      	ldr	r1, [r5, #4]
    ad70:	4418      	add	r0, r3
    ad72:	4b03      	ldr	r3, [pc, #12]	; (ad80 <audio_midi_ctrl+0x1b0>)
    ad74:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    ad76:	2201      	movs	r2, #1
    ad78:	4b09      	ldr	r3, [pc, #36]	; (ada0 <audio_midi_ctrl+0x1d0>)
    ad7a:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ad7c:	2000      	movs	r0, #0
    ad7e:	e735      	b.n	abec <audio_midi_ctrl+0x1c>
    ad80:	0000b4ed 	.word	0x0000b4ed
    ad84:	20003bac 	.word	0x20003bac
    ad88:	00005929 	.word	0x00005929
    ad8c:	0000ab3d 	.word	0x0000ab3d
    ad90:	00005afd 	.word	0x00005afd
    ad94:	0000b527 	.word	0x0000b527
    ad98:	0000ab3f 	.word	0x0000ab3f
    ad9c:	000058fd 	.word	0x000058fd
    ada0:	20000eb0 	.word	0x20000eb0
    ada4:	00005895 	.word	0x00005895

0000ada8 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    ada8:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    adaa:	4b0a      	ldr	r3, [pc, #40]	; (add4 <audiodf_midi_init+0x2c>)
    adac:	4798      	blx	r3
    adae:	2801      	cmp	r0, #1
    adb0:	d80c      	bhi.n	adcc <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    adb2:	4809      	ldr	r0, [pc, #36]	; (add8 <audiodf_midi_init+0x30>)
    adb4:	4b09      	ldr	r3, [pc, #36]	; (addc <audiodf_midi_init+0x34>)
    adb6:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    adb8:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    adba:	3010      	adds	r0, #16
    adbc:	4b08      	ldr	r3, [pc, #32]	; (ade0 <audiodf_midi_init+0x38>)
    adbe:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    adc0:	4908      	ldr	r1, [pc, #32]	; (ade4 <audiodf_midi_init+0x3c>)
    adc2:	2001      	movs	r0, #1
    adc4:	4b08      	ldr	r3, [pc, #32]	; (ade8 <audiodf_midi_init+0x40>)
    adc6:	4798      	blx	r3
	return ERR_NONE;
    adc8:	2000      	movs	r0, #0
    adca:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    adcc:	f06f 0010 	mvn.w	r0, #16
}
    add0:	bd08      	pop	{r3, pc}
    add2:	bf00      	nop
    add4:	0000b4d9 	.word	0x0000b4d9
    add8:	20000eb0 	.word	0x20000eb0
    addc:	0000abd1 	.word	0x0000abd1
    ade0:	0000b479 	.word	0x0000b479
    ade4:	200003b0 	.word	0x200003b0
    ade8:	0000b3e5 	.word	0x0000b3e5

0000adec <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    adec:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    adee:	4c06      	ldr	r4, [pc, #24]	; (ae08 <audiodf_midi_xfer_packet+0x1c>)
    adf0:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    adf2:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    adf4:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    adf6:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    adf8:	2300      	movs	r3, #0
    adfa:	2204      	movs	r2, #4
    adfc:	f104 0109 	add.w	r1, r4, #9
    ae00:	79a0      	ldrb	r0, [r4, #6]
    ae02:	4c02      	ldr	r4, [pc, #8]	; (ae0c <audiodf_midi_xfer_packet+0x20>)
    ae04:	47a0      	blx	r4
	
	
}
    ae06:	bd10      	pop	{r4, pc}
    ae08:	20000eb0 	.word	0x20000eb0
    ae0c:	0000afa9 	.word	0x0000afa9

0000ae10 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ae10:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ae12:	4b07      	ldr	r3, [pc, #28]	; (ae30 <usbdc_unconfig+0x20>)
    ae14:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    ae16:	b14c      	cbz	r4, ae2c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ae18:	2600      	movs	r6, #0
    ae1a:	2501      	movs	r5, #1
    ae1c:	6863      	ldr	r3, [r4, #4]
    ae1e:	4632      	mov	r2, r6
    ae20:	4629      	mov	r1, r5
    ae22:	4620      	mov	r0, r4
    ae24:	4798      	blx	r3
		func = func->next;
    ae26:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    ae28:	2c00      	cmp	r4, #0
    ae2a:	d1f7      	bne.n	ae1c <usbdc_unconfig+0xc>
    ae2c:	bd70      	pop	{r4, r5, r6, pc}
    ae2e:	bf00      	nop
    ae30:	20000ecc 	.word	0x20000ecc

0000ae34 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    ae34:	b570      	push	{r4, r5, r6, lr}
    ae36:	4606      	mov	r6, r0
    ae38:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ae3a:	4b07      	ldr	r3, [pc, #28]	; (ae58 <usbdc_change_notify+0x24>)
    ae3c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    ae3e:	b91c      	cbnz	r4, ae48 <usbdc_change_notify+0x14>
    ae40:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    ae42:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    ae44:	2c00      	cmp	r4, #0
    ae46:	d0fb      	beq.n	ae40 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    ae48:	6863      	ldr	r3, [r4, #4]
    ae4a:	2b00      	cmp	r3, #0
    ae4c:	d0f9      	beq.n	ae42 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    ae4e:	4629      	mov	r1, r5
    ae50:	4630      	mov	r0, r6
    ae52:	4798      	blx	r3
    ae54:	e7f5      	b.n	ae42 <usbdc_change_notify+0xe>
    ae56:	bf00      	nop
    ae58:	20000ecc 	.word	0x20000ecc

0000ae5c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae5e:	4607      	mov	r7, r0
    ae60:	460e      	mov	r6, r1
    ae62:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ae64:	4b0c      	ldr	r3, [pc, #48]	; (ae98 <usbdc_request_handler+0x3c>)
    ae66:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    ae68:	b91c      	cbnz	r4, ae72 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    ae6a:	2000      	movs	r0, #0
    ae6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    ae6e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    ae70:	b16c      	cbz	r4, ae8e <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    ae72:	6863      	ldr	r3, [r4, #4]
    ae74:	2b00      	cmp	r3, #0
    ae76:	d0fa      	beq.n	ae6e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    ae78:	462a      	mov	r2, r5
    ae7a:	4631      	mov	r1, r6
    ae7c:	4638      	mov	r0, r7
    ae7e:	4798      	blx	r3
			if (0 == rc) {
    ae80:	b138      	cbz	r0, ae92 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    ae82:	f110 0f0a 	cmn.w	r0, #10
    ae86:	d0f2      	beq.n	ae6e <usbdc_request_handler+0x12>
				return -1;
    ae88:	f04f 30ff 	mov.w	r0, #4294967295
}
    ae8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    ae8e:	2000      	movs	r0, #0
    ae90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    ae92:	2001      	movs	r0, #1
    ae94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae96:	bf00      	nop
    ae98:	20000ecc 	.word	0x20000ecc

0000ae9c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    ae9c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    ae9e:	4b06      	ldr	r3, [pc, #24]	; (aeb8 <usbd_sof_cb+0x1c>)
    aea0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    aea2:	b91c      	cbnz	r4, aeac <usbd_sof_cb+0x10>
    aea4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    aea6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    aea8:	2c00      	cmp	r4, #0
    aeaa:	d0fb      	beq.n	aea4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    aeac:	6863      	ldr	r3, [r4, #4]
    aeae:	2b00      	cmp	r3, #0
    aeb0:	d0f9      	beq.n	aea6 <usbd_sof_cb+0xa>
			sof->cb();
    aeb2:	4798      	blx	r3
    aeb4:	e7f7      	b.n	aea6 <usbd_sof_cb+0xa>
    aeb6:	bf00      	nop
    aeb8:	20000ecc 	.word	0x20000ecc

0000aebc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    aebc:	b510      	push	{r4, lr}
    aebe:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    aec0:	b119      	cbz	r1, aeca <usbdc_cb_ctl_done+0xe>
    aec2:	2901      	cmp	r1, #1
    aec4:	d026      	beq.n	af14 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    aec6:	2000      	movs	r0, #0
    aec8:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    aeca:	7813      	ldrb	r3, [r2, #0]
    aecc:	2b00      	cmp	r3, #0
    aece:	d1fa      	bne.n	aec6 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    aed0:	7853      	ldrb	r3, [r2, #1]
    aed2:	2b05      	cmp	r3, #5
    aed4:	d00f      	beq.n	aef6 <usbdc_cb_ctl_done+0x3a>
    aed6:	2b09      	cmp	r3, #9
    aed8:	d1f5      	bne.n	aec6 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    aeda:	8852      	ldrh	r2, [r2, #2]
    aedc:	4b10      	ldr	r3, [pc, #64]	; (af20 <usbdc_cb_ctl_done+0x64>)
    aede:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    aee0:	8863      	ldrh	r3, [r4, #2]
    aee2:	2b00      	cmp	r3, #0
    aee4:	bf14      	ite	ne
    aee6:	2104      	movne	r1, #4
    aee8:	2103      	moveq	r1, #3
    aeea:	4b0d      	ldr	r3, [pc, #52]	; (af20 <usbdc_cb_ctl_done+0x64>)
    aeec:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    aeee:	2001      	movs	r0, #1
    aef0:	4b0c      	ldr	r3, [pc, #48]	; (af24 <usbdc_cb_ctl_done+0x68>)
    aef2:	4798      	blx	r3
    aef4:	e7e7      	b.n	aec6 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    aef6:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    aef8:	b2c0      	uxtb	r0, r0
    aefa:	4b0b      	ldr	r3, [pc, #44]	; (af28 <usbdc_cb_ctl_done+0x6c>)
    aefc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    aefe:	8863      	ldrh	r3, [r4, #2]
    af00:	2b00      	cmp	r3, #0
    af02:	bf14      	ite	ne
    af04:	2103      	movne	r1, #3
    af06:	2102      	moveq	r1, #2
    af08:	4b05      	ldr	r3, [pc, #20]	; (af20 <usbdc_cb_ctl_done+0x64>)
    af0a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    af0c:	2001      	movs	r0, #1
    af0e:	4b05      	ldr	r3, [pc, #20]	; (af24 <usbdc_cb_ctl_done+0x68>)
    af10:	4798      	blx	r3
    af12:	e7d8      	b.n	aec6 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    af14:	2201      	movs	r2, #1
    af16:	4621      	mov	r1, r4
    af18:	2000      	movs	r0, #0
    af1a:	4b04      	ldr	r3, [pc, #16]	; (af2c <usbdc_cb_ctl_done+0x70>)
    af1c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    af1e:	e7d2      	b.n	aec6 <usbdc_cb_ctl_done+0xa>
    af20:	20000ecc 	.word	0x20000ecc
    af24:	0000ae35 	.word	0x0000ae35
    af28:	00005889 	.word	0x00005889
    af2c:	0000ae5d 	.word	0x0000ae5d

0000af30 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    af30:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    af32:	4b0d      	ldr	r3, [pc, #52]	; (af68 <usbdc_reset+0x38>)
    af34:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    af36:	4d0d      	ldr	r5, [pc, #52]	; (af6c <usbdc_reset+0x3c>)
    af38:	2602      	movs	r6, #2
    af3a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    af3c:	2400      	movs	r4, #0
    af3e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    af40:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    af42:	4620      	mov	r0, r4
    af44:	4b0a      	ldr	r3, [pc, #40]	; (af70 <usbdc_reset+0x40>)
    af46:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    af48:	7f28      	ldrb	r0, [r5, #28]
    af4a:	4b0a      	ldr	r3, [pc, #40]	; (af74 <usbdc_reset+0x44>)
    af4c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    af4e:	4a0a      	ldr	r2, [pc, #40]	; (af78 <usbdc_reset+0x48>)
    af50:	4621      	mov	r1, r4
    af52:	4620      	mov	r0, r4
    af54:	4d09      	ldr	r5, [pc, #36]	; (af7c <usbdc_reset+0x4c>)
    af56:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    af58:	4a09      	ldr	r2, [pc, #36]	; (af80 <usbdc_reset+0x50>)
    af5a:	4631      	mov	r1, r6
    af5c:	4620      	mov	r0, r4
    af5e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    af60:	4620      	mov	r0, r4
    af62:	4b08      	ldr	r3, [pc, #32]	; (af84 <usbdc_reset+0x54>)
    af64:	4798      	blx	r3
    af66:	bd70      	pop	{r4, r5, r6, pc}
    af68:	0000ae11 	.word	0x0000ae11
    af6c:	20000ecc 	.word	0x20000ecc
    af70:	000058fd 	.word	0x000058fd
    af74:	000058e9 	.word	0x000058e9
    af78:	0000afc9 	.word	0x0000afc9
    af7c:	00005afd 	.word	0x00005afd
    af80:	0000aebd 	.word	0x0000aebd
    af84:	00005929 	.word	0x00005929

0000af88 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    af88:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    af8a:	b110      	cbz	r0, af92 <usbd_event_cb+0xa>
    af8c:	2801      	cmp	r0, #1
    af8e:	d004      	beq.n	af9a <usbd_event_cb+0x12>
    af90:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    af92:	2000      	movs	r0, #0
    af94:	4b02      	ldr	r3, [pc, #8]	; (afa0 <usbd_event_cb+0x18>)
    af96:	4798      	blx	r3
		break;
    af98:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    af9a:	4b02      	ldr	r3, [pc, #8]	; (afa4 <usbd_event_cb+0x1c>)
    af9c:	4798      	blx	r3
    af9e:	bd08      	pop	{r3, pc}
    afa0:	0000ae35 	.word	0x0000ae35
    afa4:	0000af31 	.word	0x0000af31

0000afa8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    afa8:	b500      	push	{lr}
    afaa:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    afac:	9101      	str	r1, [sp, #4]
    afae:	9202      	str	r2, [sp, #8]
    afb0:	f88d 000c 	strb.w	r0, [sp, #12]
    afb4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    afb8:	a801      	add	r0, sp, #4
    afba:	4b02      	ldr	r3, [pc, #8]	; (afc4 <usbdc_xfer+0x1c>)
    afbc:	4798      	blx	r3
}
    afbe:	b005      	add	sp, #20
    afc0:	f85d fb04 	ldr.w	pc, [sp], #4
    afc4:	00005975 	.word	0x00005975

0000afc8 <usbdc_cb_ctl_req>:
{
    afc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    afcc:	b083      	sub	sp, #12
    afce:	4605      	mov	r5, r0
    afd0:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    afd2:	2200      	movs	r2, #0
    afd4:	4b9b      	ldr	r3, [pc, #620]	; (b244 <usbdc_cb_ctl_req+0x27c>)
    afd6:	4798      	blx	r3
    afd8:	f1b0 3fff 	cmp.w	r0, #4294967295
    afdc:	d00b      	beq.n	aff6 <usbdc_cb_ctl_req+0x2e>
    afde:	2801      	cmp	r0, #1
    afe0:	f000 81e3 	beq.w	b3aa <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    afe4:	7823      	ldrb	r3, [r4, #0]
    afe6:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    afea:	d008      	beq.n	affe <usbdc_cb_ctl_req+0x36>
    afec:	2a80      	cmp	r2, #128	; 0x80
    afee:	f000 80f4 	beq.w	b1da <usbdc_cb_ctl_req+0x212>
		return false;
    aff2:	2000      	movs	r0, #0
    aff4:	e000      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    aff6:	2000      	movs	r0, #0
}
    aff8:	b003      	add	sp, #12
    affa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    affe:	7862      	ldrb	r2, [r4, #1]
    b000:	3a01      	subs	r2, #1
    b002:	2a0a      	cmp	r2, #10
    b004:	f200 81d3 	bhi.w	b3ae <usbdc_cb_ctl_req+0x3e6>
    b008:	e8df f012 	tbh	[pc, r2, lsl #1]
    b00c:	01d10060 	.word	0x01d10060
    b010:	01d10076 	.word	0x01d10076
    b014:	01d1000b 	.word	0x01d1000b
    b018:	01d101d1 	.word	0x01d101d1
    b01c:	01d10015 	.word	0x01d10015
    b020:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b022:	2301      	movs	r3, #1
    b024:	2200      	movs	r2, #0
    b026:	4611      	mov	r1, r2
    b028:	4628      	mov	r0, r5
    b02a:	4c87      	ldr	r4, [pc, #540]	; (b248 <usbdc_cb_ctl_req+0x280>)
    b02c:	47a0      	blx	r4
    b02e:	fab0 f080 	clz	r0, r0
    b032:	0940      	lsrs	r0, r0, #5
    b034:	e7e0      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    b036:	8862      	ldrh	r2, [r4, #2]
    b038:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    b03a:	b1ca      	cbz	r2, b070 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    b03c:	4b83      	ldr	r3, [pc, #524]	; (b24c <usbdc_cb_ctl_req+0x284>)
    b03e:	681b      	ldr	r3, [r3, #0]
    b040:	6859      	ldr	r1, [r3, #4]
    b042:	6818      	ldr	r0, [r3, #0]
    b044:	4b82      	ldr	r3, [pc, #520]	; (b250 <usbdc_cb_ctl_req+0x288>)
    b046:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b048:	2800      	cmp	r0, #0
    b04a:	f000 81be 	beq.w	b3ca <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    b04e:	78c2      	ldrb	r2, [r0, #3]
    b050:	7881      	ldrb	r1, [r0, #2]
    b052:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    b056:	fa10 f181 	uxtah	r1, r0, r1
    b05a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    b05c:	2204      	movs	r2, #4
    b05e:	4b7d      	ldr	r3, [pc, #500]	; (b254 <usbdc_cb_ctl_req+0x28c>)
    b060:	4798      	blx	r3
    b062:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b064:	b130      	cbz	r0, b074 <usbdc_cb_ctl_req+0xac>
    b066:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b068:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b24c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b06c:	4f79      	ldr	r7, [pc, #484]	; (b254 <usbdc_cb_ctl_req+0x28c>)
    b06e:	e018      	b.n	b0a2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    b070:	4b79      	ldr	r3, [pc, #484]	; (b258 <usbdc_cb_ctl_req+0x290>)
    b072:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b074:	2301      	movs	r3, #1
    b076:	2200      	movs	r2, #0
    b078:	4611      	mov	r1, r2
    b07a:	4628      	mov	r0, r5
    b07c:	4c72      	ldr	r4, [pc, #456]	; (b248 <usbdc_cb_ctl_req+0x280>)
    b07e:	47a0      	blx	r4
    b080:	fab0 f080 	clz	r0, r0
    b084:	0940      	lsrs	r0, r0, #5
    b086:	e7b7      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    b088:	464c      	mov	r4, r9
    b08a:	e000      	b.n	b08e <usbdc_cb_ctl_req+0xc6>
    b08c:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    b08e:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b090:	7803      	ldrb	r3, [r0, #0]
    b092:	4418      	add	r0, r3
    b094:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b096:	2204      	movs	r2, #4
    b098:	9901      	ldr	r1, [sp, #4]
    b09a:	47b8      	blx	r7
    b09c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b09e:	2800      	cmp	r0, #0
    b0a0:	d0e8      	beq.n	b074 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    b0a2:	f890 9002 	ldrb.w	r9, [r0, #2]
    b0a6:	45a1      	cmp	r9, r4
    b0a8:	d0f1      	beq.n	b08e <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b0aa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    b0ae:	2c00      	cmp	r4, #0
    b0b0:	d0ea      	beq.n	b088 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    b0b2:	2600      	movs	r6, #0
    b0b4:	6863      	ldr	r3, [r4, #4]
    b0b6:	466a      	mov	r2, sp
    b0b8:	4631      	mov	r1, r6
    b0ba:	4620      	mov	r0, r4
    b0bc:	4798      	blx	r3
    b0be:	2800      	cmp	r0, #0
    b0c0:	d0e4      	beq.n	b08c <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    b0c2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    b0c4:	2c00      	cmp	r4, #0
    b0c6:	d1f5      	bne.n	b0b4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    b0c8:	464c      	mov	r4, r9
    b0ca:	e7e0      	b.n	b08e <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b0cc:	f003 031f 	and.w	r3, r3, #31
    b0d0:	2b02      	cmp	r3, #2
    b0d2:	f040 816e 	bne.w	b3b2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    b0d6:	88e3      	ldrh	r3, [r4, #6]
    b0d8:	b10b      	cbz	r3, b0de <usbdc_cb_ctl_req+0x116>
			return false;
    b0da:	2000      	movs	r0, #0
    b0dc:	e78c      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    b0de:	88a0      	ldrh	r0, [r4, #4]
    b0e0:	2100      	movs	r1, #0
    b0e2:	b2c0      	uxtb	r0, r0
    b0e4:	4b5d      	ldr	r3, [pc, #372]	; (b25c <usbdc_cb_ctl_req+0x294>)
    b0e6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    b0e8:	2301      	movs	r3, #1
    b0ea:	2200      	movs	r2, #0
    b0ec:	4611      	mov	r1, r2
    b0ee:	4628      	mov	r0, r5
    b0f0:	4c55      	ldr	r4, [pc, #340]	; (b248 <usbdc_cb_ctl_req+0x280>)
    b0f2:	47a0      	blx	r4
		return true;
    b0f4:	2001      	movs	r0, #1
    b0f6:	e77f      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b0f8:	f003 031f 	and.w	r3, r3, #31
    b0fc:	2b02      	cmp	r3, #2
    b0fe:	f040 815a 	bne.w	b3b6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    b102:	88e3      	ldrh	r3, [r4, #6]
    b104:	b10b      	cbz	r3, b10a <usbdc_cb_ctl_req+0x142>
			return false;
    b106:	2000      	movs	r0, #0
    b108:	e776      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    b10a:	88a0      	ldrh	r0, [r4, #4]
    b10c:	2101      	movs	r1, #1
    b10e:	b2c0      	uxtb	r0, r0
    b110:	4b52      	ldr	r3, [pc, #328]	; (b25c <usbdc_cb_ctl_req+0x294>)
    b112:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    b114:	2301      	movs	r3, #1
    b116:	2200      	movs	r2, #0
    b118:	4611      	mov	r1, r2
    b11a:	4628      	mov	r0, r5
    b11c:	4c4a      	ldr	r4, [pc, #296]	; (b248 <usbdc_cb_ctl_req+0x280>)
    b11e:	47a0      	blx	r4
		return true;
    b120:	2001      	movs	r0, #1
    b122:	e769      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    b124:	8866      	ldrh	r6, [r4, #2]
    b126:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    b128:	4a48      	ldr	r2, [pc, #288]	; (b24c <usbdc_cb_ctl_req+0x284>)
    b12a:	6813      	ldr	r3, [r2, #0]
    b12c:	7ed2      	ldrb	r2, [r2, #27]
    b12e:	6859      	ldr	r1, [r3, #4]
    b130:	6818      	ldr	r0, [r3, #0]
    b132:	4b47      	ldr	r3, [pc, #284]	; (b250 <usbdc_cb_ctl_req+0x288>)
    b134:	4798      	blx	r3
	if (NULL == ifc) {
    b136:	2800      	cmp	r0, #0
    b138:	d045      	beq.n	b1c6 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    b13a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    b13c:	78c2      	ldrb	r2, [r0, #3]
    b13e:	7881      	ldrb	r1, [r0, #2]
    b140:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    b144:	fa10 f181 	uxtah	r1, r0, r1
    b148:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    b14a:	2204      	movs	r2, #4
    b14c:	4b41      	ldr	r3, [pc, #260]	; (b254 <usbdc_cb_ctl_req+0x28c>)
    b14e:	4798      	blx	r3
    b150:	4603      	mov	r3, r0
    b152:	2800      	cmp	r0, #0
    b154:	d039      	beq.n	b1ca <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b156:	2704      	movs	r7, #4
    b158:	4d3e      	ldr	r5, [pc, #248]	; (b254 <usbdc_cb_ctl_req+0x28c>)
    b15a:	e008      	b.n	b16e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    b15c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b15e:	7803      	ldrb	r3, [r0, #0]
    b160:	4418      	add	r0, r3
    b162:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b164:	463a      	mov	r2, r7
    b166:	9901      	ldr	r1, [sp, #4]
    b168:	47a8      	blx	r5
		if (NULL == ifc) {
    b16a:	4603      	mov	r3, r0
    b16c:	b378      	cbz	r0, b1ce <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    b16e:	789a      	ldrb	r2, [r3, #2]
    b170:	42a2      	cmp	r2, r4
    b172:	d1f3      	bne.n	b15c <usbdc_cb_ctl_req+0x194>
    b174:	78da      	ldrb	r2, [r3, #3]
    b176:	42b2      	cmp	r2, r6
    b178:	d1f0      	bne.n	b15c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    b17a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    b17c:	4b33      	ldr	r3, [pc, #204]	; (b24c <usbdc_cb_ctl_req+0x284>)
    b17e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    b180:	b33d      	cbz	r5, b1d2 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    b182:	2701      	movs	r7, #1
    b184:	686b      	ldr	r3, [r5, #4]
    b186:	466a      	mov	r2, sp
    b188:	4639      	mov	r1, r7
    b18a:	4628      	mov	r0, r5
    b18c:	4798      	blx	r3
    b18e:	b120      	cbz	r0, b19a <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    b190:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b192:	2d00      	cmp	r5, #0
    b194:	d1f6      	bne.n	b184 <usbdc_cb_ctl_req+0x1bc>
	return false;
    b196:	2000      	movs	r0, #0
    b198:	e72e      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    b19a:	686b      	ldr	r3, [r5, #4]
    b19c:	466a      	mov	r2, sp
    b19e:	2100      	movs	r1, #0
    b1a0:	4628      	mov	r0, r5
    b1a2:	4798      	blx	r3
    b1a4:	b9b8      	cbnz	r0, b1d6 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    b1a6:	b136      	cbz	r6, b1b6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    b1a8:	4a28      	ldr	r2, [pc, #160]	; (b24c <usbdc_cb_ctl_req+0x284>)
    b1aa:	2301      	movs	r3, #1
    b1ac:	fa03 f404 	lsl.w	r4, r3, r4
    b1b0:	7f53      	ldrb	r3, [r2, #29]
    b1b2:	4323      	orrs	r3, r4
    b1b4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    b1b6:	2300      	movs	r3, #0
    b1b8:	461a      	mov	r2, r3
    b1ba:	4619      	mov	r1, r3
    b1bc:	4618      	mov	r0, r3
    b1be:	4c22      	ldr	r4, [pc, #136]	; (b248 <usbdc_cb_ctl_req+0x280>)
    b1c0:	47a0      	blx	r4
			return true;
    b1c2:	2001      	movs	r0, #1
    b1c4:	e718      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b1c6:	2000      	movs	r0, #0
    b1c8:	e716      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b1ca:	2000      	movs	r0, #0
    b1cc:	e714      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
			return false;
    b1ce:	2000      	movs	r0, #0
    b1d0:	e712      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
	return false;
    b1d2:	2000      	movs	r0, #0
    b1d4:	e710      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
			return false;
    b1d6:	2000      	movs	r0, #0
    b1d8:	e70e      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    b1da:	7862      	ldrb	r2, [r4, #1]
    b1dc:	2a0a      	cmp	r2, #10
    b1de:	f200 80ec 	bhi.w	b3ba <usbdc_cb_ctl_req+0x3f2>
    b1e2:	e8df f012 	tbh	[pc, r2, lsl #1]
    b1e6:	008e      	.short	0x008e
    b1e8:	00ea00ea 	.word	0x00ea00ea
    b1ec:	00ea00ea 	.word	0x00ea00ea
    b1f0:	000b00ea 	.word	0x000b00ea
    b1f4:	008200ea 	.word	0x008200ea
    b1f8:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b1fc:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    b1fe:	0a13      	lsrs	r3, r2, #8
    b200:	2b02      	cmp	r3, #2
    b202:	d02d      	beq.n	b260 <usbdc_cb_ctl_req+0x298>
    b204:	2b03      	cmp	r3, #3
    b206:	d050      	beq.n	b2aa <usbdc_cb_ctl_req+0x2e2>
    b208:	2b01      	cmp	r3, #1
    b20a:	d001      	beq.n	b210 <usbdc_cb_ctl_req+0x248>
	return false;
    b20c:	2000      	movs	r0, #0
    b20e:	e6f3      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    b210:	88e2      	ldrh	r2, [r4, #6]
    b212:	2a12      	cmp	r2, #18
    b214:	bf28      	it	cs
    b216:	2212      	movcs	r2, #18
    b218:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b21a:	4b0c      	ldr	r3, [pc, #48]	; (b24c <usbdc_cb_ctl_req+0x284>)
    b21c:	681b      	ldr	r3, [r3, #0]
    b21e:	2201      	movs	r2, #1
    b220:	6859      	ldr	r1, [r3, #4]
    b222:	6818      	ldr	r0, [r3, #0]
    b224:	4b0b      	ldr	r3, [pc, #44]	; (b254 <usbdc_cb_ctl_req+0x28c>)
    b226:	4798      	blx	r3
	if (!dev_desc) {
    b228:	4601      	mov	r1, r0
    b22a:	2800      	cmp	r0, #0
    b22c:	f000 80c7 	beq.w	b3be <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b230:	2300      	movs	r3, #0
    b232:	4622      	mov	r2, r4
    b234:	4628      	mov	r0, r5
    b236:	4c04      	ldr	r4, [pc, #16]	; (b248 <usbdc_cb_ctl_req+0x280>)
    b238:	47a0      	blx	r4
    b23a:	fab0 f080 	clz	r0, r0
    b23e:	0940      	lsrs	r0, r0, #5
    b240:	e6da      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
    b242:	bf00      	nop
    b244:	0000ae5d 	.word	0x0000ae5d
    b248:	0000afa9 	.word	0x0000afa9
    b24c:	20000ecc 	.word	0x20000ecc
    b250:	0000b56d 	.word	0x0000b56d
    b254:	0000b4ed 	.word	0x0000b4ed
    b258:	0000ae11 	.word	0x0000ae11
    b25c:	00005a95 	.word	0x00005a95
	uint16_t length   = req->wLength;
    b260:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b262:	4b5b      	ldr	r3, [pc, #364]	; (b3d0 <usbdc_cb_ctl_req+0x408>)
    b264:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b266:	681b      	ldr	r3, [r3, #0]
    b268:	3201      	adds	r2, #1
    b26a:	b2d2      	uxtb	r2, r2
    b26c:	6859      	ldr	r1, [r3, #4]
    b26e:	6818      	ldr	r0, [r3, #0]
    b270:	4b58      	ldr	r3, [pc, #352]	; (b3d4 <usbdc_cb_ctl_req+0x40c>)
    b272:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b274:	4601      	mov	r1, r0
    b276:	2800      	cmp	r0, #0
    b278:	f000 80a3 	beq.w	b3c2 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    b27c:	78c3      	ldrb	r3, [r0, #3]
    b27e:	7882      	ldrb	r2, [r0, #2]
    b280:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    b284:	b292      	uxth	r2, r2
	if (length <= total_len) {
    b286:	4294      	cmp	r4, r2
    b288:	d90d      	bls.n	b2a6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b28a:	3e01      	subs	r6, #1
    b28c:	4226      	tst	r6, r4
    b28e:	bf0c      	ite	eq
    b290:	2301      	moveq	r3, #1
    b292:	2300      	movne	r3, #0
		length = total_len;
    b294:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b296:	4622      	mov	r2, r4
    b298:	4628      	mov	r0, r5
    b29a:	4c4f      	ldr	r4, [pc, #316]	; (b3d8 <usbdc_cb_ctl_req+0x410>)
    b29c:	47a0      	blx	r4
    b29e:	fab0 f080 	clz	r0, r0
    b2a2:	0940      	lsrs	r0, r0, #5
    b2a4:	e6a8      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b2a6:	2300      	movs	r3, #0
    b2a8:	e7f5      	b.n	b296 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    b2aa:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b2ac:	4b48      	ldr	r3, [pc, #288]	; (b3d0 <usbdc_cb_ctl_req+0x408>)
    b2ae:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b2b0:	681b      	ldr	r3, [r3, #0]
    b2b2:	b2d2      	uxtb	r2, r2
    b2b4:	6859      	ldr	r1, [r3, #4]
    b2b6:	6818      	ldr	r0, [r3, #0]
    b2b8:	4b48      	ldr	r3, [pc, #288]	; (b3dc <usbdc_cb_ctl_req+0x414>)
    b2ba:	4798      	blx	r3
	if (NULL == str_desc) {
    b2bc:	4601      	mov	r1, r0
    b2be:	2800      	cmp	r0, #0
    b2c0:	f000 8081 	beq.w	b3c6 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    b2c4:	7802      	ldrb	r2, [r0, #0]
    b2c6:	4294      	cmp	r4, r2
    b2c8:	d90d      	bls.n	b2e6 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b2ca:	3e01      	subs	r6, #1
    b2cc:	4226      	tst	r6, r4
    b2ce:	bf0c      	ite	eq
    b2d0:	2301      	moveq	r3, #1
    b2d2:	2300      	movne	r3, #0
		length = str_desc[0];
    b2d4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b2d6:	4622      	mov	r2, r4
    b2d8:	4628      	mov	r0, r5
    b2da:	4c3f      	ldr	r4, [pc, #252]	; (b3d8 <usbdc_cb_ctl_req+0x410>)
    b2dc:	47a0      	blx	r4
    b2de:	fab0 f080 	clz	r0, r0
    b2e2:	0940      	lsrs	r0, r0, #5
    b2e4:	e688      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b2e6:	2300      	movs	r3, #0
    b2e8:	e7f5      	b.n	b2d6 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b2ea:	4939      	ldr	r1, [pc, #228]	; (b3d0 <usbdc_cb_ctl_req+0x408>)
    b2ec:	694b      	ldr	r3, [r1, #20]
    b2ee:	7eca      	ldrb	r2, [r1, #27]
    b2f0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    b2f2:	2300      	movs	r3, #0
    b2f4:	2201      	movs	r2, #1
    b2f6:	6949      	ldr	r1, [r1, #20]
    b2f8:	4628      	mov	r0, r5
    b2fa:	4c37      	ldr	r4, [pc, #220]	; (b3d8 <usbdc_cb_ctl_req+0x410>)
    b2fc:	47a0      	blx	r4
		return true;
    b2fe:	2001      	movs	r0, #1
    b300:	e67a      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b302:	f003 031f 	and.w	r3, r3, #31
    b306:	2b01      	cmp	r3, #1
    b308:	d903      	bls.n	b312 <usbdc_cb_ctl_req+0x34a>
    b30a:	2b02      	cmp	r3, #2
    b30c:	d010      	beq.n	b330 <usbdc_cb_ctl_req+0x368>
		return false;
    b30e:	2000      	movs	r0, #0
    b310:	e672      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		st = 0;
    b312:	2300      	movs	r3, #0
    b314:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    b316:	492e      	ldr	r1, [pc, #184]	; (b3d0 <usbdc_cb_ctl_req+0x408>)
    b318:	694b      	ldr	r3, [r1, #20]
    b31a:	f8bd 2000 	ldrh.w	r2, [sp]
    b31e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b320:	2300      	movs	r3, #0
    b322:	2202      	movs	r2, #2
    b324:	6949      	ldr	r1, [r1, #20]
    b326:	4628      	mov	r0, r5
    b328:	4c2b      	ldr	r4, [pc, #172]	; (b3d8 <usbdc_cb_ctl_req+0x410>)
    b32a:	47a0      	blx	r4
	return true;
    b32c:	2001      	movs	r0, #1
    b32e:	e663      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b330:	88a0      	ldrh	r0, [r4, #4]
    b332:	2102      	movs	r1, #2
    b334:	b2c0      	uxtb	r0, r0
    b336:	4b2a      	ldr	r3, [pc, #168]	; (b3e0 <usbdc_cb_ctl_req+0x418>)
    b338:	4798      	blx	r3
		if (st < 0) {
    b33a:	2800      	cmp	r0, #0
    b33c:	db03      	blt.n	b346 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    b33e:	f000 0001 	and.w	r0, r0, #1
    b342:	9000      	str	r0, [sp, #0]
    b344:	e7e7      	b.n	b316 <usbdc_cb_ctl_req+0x34e>
			return false;
    b346:	2000      	movs	r0, #0
    b348:	e656      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b34a:	4b21      	ldr	r3, [pc, #132]	; (b3d0 <usbdc_cb_ctl_req+0x408>)
    b34c:	7f5b      	ldrb	r3, [r3, #29]
    b34e:	88a2      	ldrh	r2, [r4, #4]
    b350:	4113      	asrs	r3, r2
    b352:	f013 0f01 	tst.w	r3, #1
    b356:	d012      	beq.n	b37e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b358:	4b1d      	ldr	r3, [pc, #116]	; (b3d0 <usbdc_cb_ctl_req+0x408>)
    b35a:	691d      	ldr	r5, [r3, #16]
	return false;
    b35c:	2000      	movs	r0, #0
	while (NULL != func) {
    b35e:	2d00      	cmp	r5, #0
    b360:	f43f ae4a 	beq.w	aff8 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b364:	2602      	movs	r6, #2
    b366:	686b      	ldr	r3, [r5, #4]
    b368:	4622      	mov	r2, r4
    b36a:	4631      	mov	r1, r6
    b36c:	4628      	mov	r0, r5
    b36e:	4798      	blx	r3
    b370:	2800      	cmp	r0, #0
    b372:	da0f      	bge.n	b394 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    b374:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b376:	2d00      	cmp	r5, #0
    b378:	d1f5      	bne.n	b366 <usbdc_cb_ctl_req+0x39e>
	return false;
    b37a:	2000      	movs	r0, #0
    b37c:	e63c      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    b37e:	4914      	ldr	r1, [pc, #80]	; (b3d0 <usbdc_cb_ctl_req+0x408>)
    b380:	694b      	ldr	r3, [r1, #20]
    b382:	2000      	movs	r0, #0
    b384:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b386:	4603      	mov	r3, r0
    b388:	2201      	movs	r2, #1
    b38a:	6949      	ldr	r1, [r1, #20]
    b38c:	4c12      	ldr	r4, [pc, #72]	; (b3d8 <usbdc_cb_ctl_req+0x410>)
    b38e:	47a0      	blx	r4
		return true;
    b390:	2001      	movs	r0, #1
    b392:	e631      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b394:	490e      	ldr	r1, [pc, #56]	; (b3d0 <usbdc_cb_ctl_req+0x408>)
    b396:	694b      	ldr	r3, [r1, #20]
    b398:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b39a:	2300      	movs	r3, #0
    b39c:	2201      	movs	r2, #1
    b39e:	6949      	ldr	r1, [r1, #20]
    b3a0:	4618      	mov	r0, r3
    b3a2:	4c0d      	ldr	r4, [pc, #52]	; (b3d8 <usbdc_cb_ctl_req+0x410>)
    b3a4:	47a0      	blx	r4
			return true;
    b3a6:	2001      	movs	r0, #1
    b3a8:	e626      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return true;
    b3aa:	2001      	movs	r0, #1
    b3ac:	e624      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b3ae:	2000      	movs	r0, #0
    b3b0:	e622      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b3b2:	2000      	movs	r0, #0
    b3b4:	e620      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b3b6:	2000      	movs	r0, #0
    b3b8:	e61e      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b3ba:	2000      	movs	r0, #0
    b3bc:	e61c      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b3be:	2000      	movs	r0, #0
    b3c0:	e61a      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b3c2:	2000      	movs	r0, #0
    b3c4:	e618      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
		return false;
    b3c6:	2000      	movs	r0, #0
    b3c8:	e616      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
			return false;
    b3ca:	2000      	movs	r0, #0
    b3cc:	e614      	b.n	aff8 <usbdc_cb_ctl_req+0x30>
    b3ce:	bf00      	nop
    b3d0:	20000ecc 	.word	0x20000ecc
    b3d4:	0000b56d 	.word	0x0000b56d
    b3d8:	0000afa9 	.word	0x0000afa9
    b3dc:	0000b5d5 	.word	0x0000b5d5
    b3e0:	00005a95 	.word	0x00005a95

0000b3e4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    b3e4:	b508      	push	{r3, lr}
	switch (type) {
    b3e6:	2801      	cmp	r0, #1
    b3e8:	d007      	beq.n	b3fa <usbdc_register_handler+0x16>
    b3ea:	b110      	cbz	r0, b3f2 <usbdc_register_handler+0xe>
    b3ec:	2802      	cmp	r0, #2
    b3ee:	d008      	beq.n	b402 <usbdc_register_handler+0x1e>
    b3f0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    b3f2:	4806      	ldr	r0, [pc, #24]	; (b40c <usbdc_register_handler+0x28>)
    b3f4:	4b06      	ldr	r3, [pc, #24]	; (b410 <usbdc_register_handler+0x2c>)
    b3f6:	4798      	blx	r3
		break;
    b3f8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    b3fa:	4806      	ldr	r0, [pc, #24]	; (b414 <usbdc_register_handler+0x30>)
    b3fc:	4b04      	ldr	r3, [pc, #16]	; (b410 <usbdc_register_handler+0x2c>)
    b3fe:	4798      	blx	r3
		break;
    b400:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    b402:	4805      	ldr	r0, [pc, #20]	; (b418 <usbdc_register_handler+0x34>)
    b404:	4b02      	ldr	r3, [pc, #8]	; (b410 <usbdc_register_handler+0x2c>)
    b406:	4798      	blx	r3
    b408:	bd08      	pop	{r3, pc}
    b40a:	bf00      	nop
    b40c:	20000ed0 	.word	0x20000ed0
    b410:	00005ba5 	.word	0x00005ba5
    b414:	20000ed4 	.word	0x20000ed4
    b418:	20000ed8 	.word	0x20000ed8

0000b41c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    b41c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    b41e:	4605      	mov	r5, r0
    b420:	f240 3255 	movw	r2, #853	; 0x355
    b424:	490c      	ldr	r1, [pc, #48]	; (b458 <usbdc_init+0x3c>)
    b426:	3000      	adds	r0, #0
    b428:	bf18      	it	ne
    b42a:	2001      	movne	r0, #1
    b42c:	4b0b      	ldr	r3, [pc, #44]	; (b45c <usbdc_init+0x40>)
    b42e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    b430:	4b0b      	ldr	r3, [pc, #44]	; (b460 <usbdc_init+0x44>)
    b432:	4798      	blx	r3
	if (rc < 0) {
    b434:	2800      	cmp	r0, #0
    b436:	db0e      	blt.n	b456 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    b438:	4c0a      	ldr	r4, [pc, #40]	; (b464 <usbdc_init+0x48>)
    b43a:	2220      	movs	r2, #32
    b43c:	2100      	movs	r1, #0
    b43e:	4620      	mov	r0, r4
    b440:	4b09      	ldr	r3, [pc, #36]	; (b468 <usbdc_init+0x4c>)
    b442:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    b444:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    b446:	4909      	ldr	r1, [pc, #36]	; (b46c <usbdc_init+0x50>)
    b448:	2000      	movs	r0, #0
    b44a:	4c09      	ldr	r4, [pc, #36]	; (b470 <usbdc_init+0x54>)
    b44c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    b44e:	4909      	ldr	r1, [pc, #36]	; (b474 <usbdc_init+0x58>)
    b450:	2001      	movs	r0, #1
    b452:	47a0      	blx	r4

	return 0;
    b454:	2000      	movs	r0, #0
}
    b456:	bd38      	pop	{r3, r4, r5, pc}
    b458:	0000df6c 	.word	0x0000df6c
    b45c:	00005b49 	.word	0x00005b49
    b460:	000057f1 	.word	0x000057f1
    b464:	20000ecc 	.word	0x20000ecc
    b468:	0000bfbb 	.word	0x0000bfbb
    b46c:	0000ae9d 	.word	0x0000ae9d
    b470:	00005859 	.word	0x00005859
    b474:	0000af89 	.word	0x0000af89

0000b478 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    b478:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    b47a:	4601      	mov	r1, r0
    b47c:	4801      	ldr	r0, [pc, #4]	; (b484 <usbdc_register_function+0xc>)
    b47e:	4b02      	ldr	r3, [pc, #8]	; (b488 <usbdc_register_function+0x10>)
    b480:	4798      	blx	r3
    b482:	bd08      	pop	{r3, pc}
    b484:	20000edc 	.word	0x20000edc
    b488:	00005ba5 	.word	0x00005ba5

0000b48c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    b48c:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    b48e:	4b0a      	ldr	r3, [pc, #40]	; (b4b8 <usbdc_start+0x2c>)
    b490:	7e9b      	ldrb	r3, [r3, #26]
    b492:	b95b      	cbnz	r3, b4ac <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    b494:	b168      	cbz	r0, b4b2 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    b496:	4b08      	ldr	r3, [pc, #32]	; (b4b8 <usbdc_start+0x2c>)
    b498:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    b49a:	6802      	ldr	r2, [r0, #0]
    b49c:	79d2      	ldrb	r2, [r2, #7]
    b49e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    b4a0:	2201      	movs	r2, #1
    b4a2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    b4a4:	4b05      	ldr	r3, [pc, #20]	; (b4bc <usbdc_start+0x30>)
    b4a6:	4798      	blx	r3
	return ERR_NONE;
    b4a8:	2000      	movs	r0, #0
    b4aa:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    b4ac:	f06f 0003 	mvn.w	r0, #3
    b4b0:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    b4b2:	f06f 0008 	mvn.w	r0, #8
}
    b4b6:	bd08      	pop	{r3, pc}
    b4b8:	20000ecc 	.word	0x20000ecc
    b4bc:	00005865 	.word	0x00005865

0000b4c0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    b4c0:	b508      	push	{r3, lr}
	usb_d_attach();
    b4c2:	4b01      	ldr	r3, [pc, #4]	; (b4c8 <usbdc_attach+0x8>)
    b4c4:	4798      	blx	r3
    b4c6:	bd08      	pop	{r3, pc}
    b4c8:	00005871 	.word	0x00005871

0000b4cc <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    b4cc:	4b01      	ldr	r3, [pc, #4]	; (b4d4 <usbdc_get_ctrl_buffer+0x8>)
    b4ce:	6958      	ldr	r0, [r3, #20]
    b4d0:	4770      	bx	lr
    b4d2:	bf00      	nop
    b4d4:	20000ecc 	.word	0x20000ecc

0000b4d8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    b4d8:	4b03      	ldr	r3, [pc, #12]	; (b4e8 <usbdc_get_state+0x10>)
    b4da:	7e98      	ldrb	r0, [r3, #26]
    b4dc:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    b4e0:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    b4e2:	bf18      	it	ne
    b4e4:	2010      	movne	r0, #16
    b4e6:	4770      	bx	lr
    b4e8:	20000ecc 	.word	0x20000ecc

0000b4ec <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b4ec:	4288      	cmp	r0, r1
    b4ee:	d214      	bcs.n	b51a <usb_find_desc+0x2e>
	return desc[0];
    b4f0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b4f2:	2b01      	cmp	r3, #1
    b4f4:	d913      	bls.n	b51e <usb_find_desc+0x32>
{
    b4f6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    b4f8:	7844      	ldrb	r4, [r0, #1]
    b4fa:	4294      	cmp	r4, r2
    b4fc:	d00a      	beq.n	b514 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    b4fe:	4418      	add	r0, r3
	while (desc < eof) {
    b500:	4281      	cmp	r1, r0
    b502:	d906      	bls.n	b512 <usb_find_desc+0x26>
	return desc[0];
    b504:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b506:	2b01      	cmp	r3, #1
    b508:	d90b      	bls.n	b522 <usb_find_desc+0x36>
	return desc[1];
    b50a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    b50c:	4294      	cmp	r4, r2
    b50e:	d1f6      	bne.n	b4fe <usb_find_desc+0x12>
    b510:	e000      	b.n	b514 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b512:	2000      	movs	r0, #0
}
    b514:	f85d 4b04 	ldr.w	r4, [sp], #4
    b518:	4770      	bx	lr
	return NULL;
    b51a:	2000      	movs	r0, #0
    b51c:	4770      	bx	lr
		_desc_len_check();
    b51e:	2000      	movs	r0, #0
    b520:	4770      	bx	lr
    b522:	2000      	movs	r0, #0
    b524:	e7f6      	b.n	b514 <usb_find_desc+0x28>

0000b526 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b526:	4288      	cmp	r0, r1
    b528:	d216      	bcs.n	b558 <usb_find_ep_desc+0x32>
	return desc[0];
    b52a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b52c:	2b01      	cmp	r3, #1
    b52e:	d915      	bls.n	b55c <usb_find_ep_desc+0x36>
	return desc[1];
    b530:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b532:	2a04      	cmp	r2, #4
    b534:	d014      	beq.n	b560 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b536:	2a05      	cmp	r2, #5
    b538:	d00b      	beq.n	b552 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    b53a:	4418      	add	r0, r3
	while (desc < eof) {
    b53c:	4281      	cmp	r1, r0
    b53e:	d909      	bls.n	b554 <usb_find_ep_desc+0x2e>
	return desc[0];
    b540:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b542:	2b01      	cmp	r3, #1
    b544:	d90e      	bls.n	b564 <usb_find_ep_desc+0x3e>
	return desc[1];
    b546:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b548:	2a04      	cmp	r2, #4
    b54a:	d00d      	beq.n	b568 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b54c:	2a05      	cmp	r2, #5
    b54e:	d1f4      	bne.n	b53a <usb_find_ep_desc+0x14>
    b550:	e00b      	b.n	b56a <usb_find_ep_desc+0x44>
    b552:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b554:	2000      	movs	r0, #0
    b556:	4770      	bx	lr
    b558:	2000      	movs	r0, #0
    b55a:	4770      	bx	lr
		_desc_len_check();
    b55c:	2000      	movs	r0, #0
    b55e:	4770      	bx	lr
	return NULL;
    b560:	2000      	movs	r0, #0
    b562:	4770      	bx	lr
		_desc_len_check();
    b564:	2000      	movs	r0, #0
    b566:	4770      	bx	lr
	return NULL;
    b568:	2000      	movs	r0, #0
}
    b56a:	4770      	bx	lr

0000b56c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b56c:	b538      	push	{r3, r4, r5, lr}
    b56e:	460c      	mov	r4, r1
    b570:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b572:	2202      	movs	r2, #2
    b574:	4b16      	ldr	r3, [pc, #88]	; (b5d0 <usb_find_cfg_desc+0x64>)
    b576:	4798      	blx	r3
	if (!desc) {
    b578:	4603      	mov	r3, r0
    b57a:	b1e8      	cbz	r0, b5b8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    b57c:	4284      	cmp	r4, r0
    b57e:	d91d      	bls.n	b5bc <usb_find_cfg_desc+0x50>
		_desc_len_check();
    b580:	7802      	ldrb	r2, [r0, #0]
    b582:	2a01      	cmp	r2, #1
    b584:	d91c      	bls.n	b5c0 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    b586:	7842      	ldrb	r2, [r0, #1]
    b588:	2a02      	cmp	r2, #2
    b58a:	d11b      	bne.n	b5c4 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    b58c:	7942      	ldrb	r2, [r0, #5]
    b58e:	42aa      	cmp	r2, r5
    b590:	d012      	beq.n	b5b8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    b592:	78d9      	ldrb	r1, [r3, #3]
    b594:	789a      	ldrb	r2, [r3, #2]
    b596:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b59a:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    b59e:	429c      	cmp	r4, r3
    b5a0:	d909      	bls.n	b5b6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    b5a2:	781a      	ldrb	r2, [r3, #0]
    b5a4:	2a01      	cmp	r2, #1
    b5a6:	d90f      	bls.n	b5c8 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    b5a8:	785a      	ldrb	r2, [r3, #1]
    b5aa:	2a02      	cmp	r2, #2
    b5ac:	d10e      	bne.n	b5cc <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    b5ae:	795a      	ldrb	r2, [r3, #5]
    b5b0:	42aa      	cmp	r2, r5
    b5b2:	d1ee      	bne.n	b592 <usb_find_cfg_desc+0x26>
    b5b4:	e000      	b.n	b5b8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    b5b6:	2300      	movs	r3, #0
}
    b5b8:	4618      	mov	r0, r3
    b5ba:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    b5bc:	2300      	movs	r3, #0
    b5be:	e7fb      	b.n	b5b8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    b5c0:	2300      	movs	r3, #0
    b5c2:	e7f9      	b.n	b5b8 <usb_find_cfg_desc+0x4c>
	return NULL;
    b5c4:	2300      	movs	r3, #0
    b5c6:	e7f7      	b.n	b5b8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    b5c8:	2300      	movs	r3, #0
    b5ca:	e7f5      	b.n	b5b8 <usb_find_cfg_desc+0x4c>
	return NULL;
    b5cc:	2300      	movs	r3, #0
    b5ce:	e7f3      	b.n	b5b8 <usb_find_cfg_desc+0x4c>
    b5d0:	0000b4ed 	.word	0x0000b4ed

0000b5d4 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    b5d4:	4288      	cmp	r0, r1
    b5d6:	d217      	bcs.n	b608 <usb_find_str_desc+0x34>
{
    b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5dc:	460d      	mov	r5, r1
    b5de:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    b5e0:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b5e2:	f04f 0803 	mov.w	r8, #3
    b5e6:	4f0c      	ldr	r7, [pc, #48]	; (b618 <usb_find_str_desc+0x44>)
    b5e8:	4642      	mov	r2, r8
    b5ea:	4629      	mov	r1, r5
    b5ec:	47b8      	blx	r7
		if (desc) {
    b5ee:	4603      	mov	r3, r0
    b5f0:	b170      	cbz	r0, b610 <usb_find_str_desc+0x3c>
	return desc[0];
    b5f2:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    b5f4:	2801      	cmp	r0, #1
    b5f6:	d90a      	bls.n	b60e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    b5f8:	42a6      	cmp	r6, r4
    b5fa:	d009      	beq.n	b610 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    b5fc:	4418      	add	r0, r3
    b5fe:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    b600:	4285      	cmp	r5, r0
    b602:	d8f1      	bhi.n	b5e8 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    b604:	2300      	movs	r3, #0
    b606:	e003      	b.n	b610 <usb_find_str_desc+0x3c>
    b608:	2300      	movs	r3, #0
}
    b60a:	4618      	mov	r0, r3
    b60c:	4770      	bx	lr
			_desc_len_check();
    b60e:	2300      	movs	r3, #0
}
    b610:	4618      	mov	r0, r3
    b612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b616:	bf00      	nop
    b618:	0000b4ed 	.word	0x0000b4ed

0000b61c <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    b61c:	4b3a      	ldr	r3, [pc, #232]	; (b708 <hiddf_demo_sof_event+0xec>)
    b61e:	791b      	ldrb	r3, [r3, #4]
    b620:	2b0a      	cmp	r3, #10
    b622:	d803      	bhi.n	b62c <hiddf_demo_sof_event+0x10>
    b624:	3301      	adds	r3, #1
    b626:	4a38      	ldr	r2, [pc, #224]	; (b708 <hiddf_demo_sof_event+0xec>)
    b628:	7113      	strb	r3, [r2, #4]
    b62a:	4770      	bx	lr
{
    b62c:	b570      	push	{r4, r5, r6, lr}
    b62e:	b084      	sub	sp, #16
		interval = 0;
    b630:	4b35      	ldr	r3, [pc, #212]	; (b708 <hiddf_demo_sof_event+0xec>)
    b632:	2200      	movs	r2, #0
    b634:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    b636:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    b638:	a801      	add	r0, sp, #4
    b63a:	4b34      	ldr	r3, [pc, #208]	; (b70c <hiddf_demo_sof_event+0xf0>)
    b63c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b63e:	096b      	lsrs	r3, r5, #5
    b640:	4933      	ldr	r1, [pc, #204]	; (b710 <hiddf_demo_sof_event+0xf4>)
    b642:	01db      	lsls	r3, r3, #7
    b644:	18ca      	adds	r2, r1, r3
    b646:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b648:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b64a:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b64c:	405c      	eors	r4, r3
    b64e:	400c      	ands	r4, r1
    b650:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b652:	a801      	add	r0, sp, #4
    b654:	4b2f      	ldr	r3, [pc, #188]	; (b714 <hiddf_demo_sof_event+0xf8>)
    b656:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    b658:	f005 051f 	and.w	r5, r5, #31
    b65c:	2301      	movs	r3, #1
    b65e:	fa03 f505 	lsl.w	r5, r3, r5
    b662:	4225      	tst	r5, r4
    b664:	d040      	beq.n	b6e8 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    b666:	4b28      	ldr	r3, [pc, #160]	; (b708 <hiddf_demo_sof_event+0xec>)
    b668:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    b66a:	a802      	add	r0, sp, #8
    b66c:	4b27      	ldr	r3, [pc, #156]	; (b70c <hiddf_demo_sof_event+0xf0>)
    b66e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b670:	096b      	lsrs	r3, r5, #5
    b672:	4927      	ldr	r1, [pc, #156]	; (b710 <hiddf_demo_sof_event+0xf4>)
    b674:	01db      	lsls	r3, r3, #7
    b676:	18ca      	adds	r2, r1, r3
    b678:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b67a:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b67c:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b67e:	405c      	eors	r4, r3
    b680:	400c      	ands	r4, r1
    b682:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b684:	a802      	add	r0, sp, #8
    b686:	4b23      	ldr	r3, [pc, #140]	; (b714 <hiddf_demo_sof_event+0xf8>)
    b688:	4798      	blx	r3
    b68a:	f005 051f 	and.w	r5, r5, #31
    b68e:	2301      	movs	r3, #1
    b690:	fa03 f505 	lsl.w	r5, r3, r5
    b694:	4225      	tst	r5, r4
    b696:	d02d      	beq.n	b6f4 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    b698:	4d1b      	ldr	r5, [pc, #108]	; (b708 <hiddf_demo_sof_event+0xec>)
    b69a:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    b69c:	a803      	add	r0, sp, #12
    b69e:	4b1b      	ldr	r3, [pc, #108]	; (b70c <hiddf_demo_sof_event+0xf0>)
    b6a0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b6a2:	0973      	lsrs	r3, r6, #5
    b6a4:	491a      	ldr	r1, [pc, #104]	; (b710 <hiddf_demo_sof_event+0xf4>)
    b6a6:	01db      	lsls	r3, r3, #7
    b6a8:	18ca      	adds	r2, r1, r3
    b6aa:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b6ac:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b6ae:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b6b0:	405c      	eors	r4, r3
    b6b2:	400c      	ands	r4, r1
    b6b4:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b6b6:	a803      	add	r0, sp, #12
    b6b8:	4b16      	ldr	r3, [pc, #88]	; (b714 <hiddf_demo_sof_event+0xf8>)
    b6ba:	4798      	blx	r3
    b6bc:	f006 061f 	and.w	r6, r6, #31
    b6c0:	2301      	movs	r3, #1
    b6c2:	40b3      	lsls	r3, r6
    b6c4:	401c      	ands	r4, r3
    b6c6:	bf0c      	ite	eq
    b6c8:	2301      	moveq	r3, #1
    b6ca:	2300      	movne	r3, #0
    b6cc:	7d2a      	ldrb	r2, [r5, #20]
    b6ce:	429a      	cmp	r2, r3
    b6d0:	d008      	beq.n	b6e4 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    b6d2:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    b6d4:	b19c      	cbz	r4, b6fe <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    b6d6:	2200      	movs	r2, #0
    b6d8:	4b0f      	ldr	r3, [pc, #60]	; (b718 <hiddf_demo_sof_event+0xfc>)
    b6da:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    b6dc:	2101      	movs	r1, #1
    b6de:	480e      	ldr	r0, [pc, #56]	; (b718 <hiddf_demo_sof_event+0xfc>)
    b6e0:	4b0e      	ldr	r3, [pc, #56]	; (b71c <hiddf_demo_sof_event+0x100>)
    b6e2:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    b6e4:	b004      	add	sp, #16
    b6e6:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    b6e8:	4619      	mov	r1, r3
    b6ea:	f06f 0004 	mvn.w	r0, #4
    b6ee:	4b0c      	ldr	r3, [pc, #48]	; (b720 <hiddf_demo_sof_event+0x104>)
    b6f0:	4798      	blx	r3
    b6f2:	e7b8      	b.n	b666 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    b6f4:	4619      	mov	r1, r3
    b6f6:	2005      	movs	r0, #5
    b6f8:	4b09      	ldr	r3, [pc, #36]	; (b720 <hiddf_demo_sof_event+0x104>)
    b6fa:	4798      	blx	r3
    b6fc:	e7cc      	b.n	b698 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    b6fe:	2201      	movs	r2, #1
    b700:	4b05      	ldr	r3, [pc, #20]	; (b718 <hiddf_demo_sof_event+0xfc>)
    b702:	709a      	strb	r2, [r3, #2]
    b704:	e7ea      	b.n	b6dc <hiddf_demo_sof_event+0xc0>
    b706:	bf00      	nop
    b708:	20000eec 	.word	0x20000eec
    b70c:	00004755 	.word	0x00004755
    b710:	41008000 	.word	0x41008000
    b714:	00004763 	.word	0x00004763
    b718:	200003b8 	.word	0x200003b8
    b71c:	0000a869 	.word	0x0000a869
    b720:	0000aafd 	.word	0x0000aafd

0000b724 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    b724:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b726:	4805      	ldr	r0, [pc, #20]	; (b73c <composite_device_init+0x18>)
    b728:	4b05      	ldr	r3, [pc, #20]	; (b740 <composite_device_init+0x1c>)
    b72a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    b72c:	4b05      	ldr	r3, [pc, #20]	; (b744 <composite_device_init+0x20>)
    b72e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    b730:	4b05      	ldr	r3, [pc, #20]	; (b748 <composite_device_init+0x24>)
    b732:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    b734:	4b05      	ldr	r3, [pc, #20]	; (b74c <composite_device_init+0x28>)
    b736:	4798      	blx	r3
    b738:	bd08      	pop	{r3, pc}
    b73a:	bf00      	nop
    b73c:	20000f04 	.word	0x20000f04
    b740:	0000b41d 	.word	0x0000b41d
    b744:	0000a5e5 	.word	0x0000a5e5
    b748:	0000aab9 	.word	0x0000aab9
    b74c:	0000a825 	.word	0x0000a825

0000b750 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    b750:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    b752:	4803      	ldr	r0, [pc, #12]	; (b760 <composite_device_start+0x10>)
    b754:	4b03      	ldr	r3, [pc, #12]	; (b764 <composite_device_start+0x14>)
    b756:	4798      	blx	r3
	usbdc_attach();
    b758:	4b03      	ldr	r3, [pc, #12]	; (b768 <composite_device_start+0x18>)
    b75a:	4798      	blx	r3
    b75c:	bd08      	pop	{r3, pc}
    b75e:	bf00      	nop
    b760:	200003c4 	.word	0x200003c4
    b764:	0000b48d 	.word	0x0000b48d
    b768:	0000b4c1 	.word	0x0000b4c1

0000b76c <usb_init>:
		}
	}
}

void usb_init(void)
{
    b76c:	b508      	push	{r3, lr}

	composite_device_init();
    b76e:	4b01      	ldr	r3, [pc, #4]	; (b774 <usb_init+0x8>)
    b770:	4798      	blx	r3
    b772:	bd08      	pop	{r3, pc}
    b774:	0000b725 	.word	0x0000b725

0000b778 <__aeabi_drsub>:
    b778:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b77c:	e002      	b.n	b784 <__adddf3>
    b77e:	bf00      	nop

0000b780 <__aeabi_dsub>:
    b780:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b784 <__adddf3>:
    b784:	b530      	push	{r4, r5, lr}
    b786:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b78a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b78e:	ea94 0f05 	teq	r4, r5
    b792:	bf08      	it	eq
    b794:	ea90 0f02 	teqeq	r0, r2
    b798:	bf1f      	itttt	ne
    b79a:	ea54 0c00 	orrsne.w	ip, r4, r0
    b79e:	ea55 0c02 	orrsne.w	ip, r5, r2
    b7a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b7a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b7aa:	f000 80e2 	beq.w	b972 <__adddf3+0x1ee>
    b7ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b7b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b7b6:	bfb8      	it	lt
    b7b8:	426d      	neglt	r5, r5
    b7ba:	dd0c      	ble.n	b7d6 <__adddf3+0x52>
    b7bc:	442c      	add	r4, r5
    b7be:	ea80 0202 	eor.w	r2, r0, r2
    b7c2:	ea81 0303 	eor.w	r3, r1, r3
    b7c6:	ea82 0000 	eor.w	r0, r2, r0
    b7ca:	ea83 0101 	eor.w	r1, r3, r1
    b7ce:	ea80 0202 	eor.w	r2, r0, r2
    b7d2:	ea81 0303 	eor.w	r3, r1, r3
    b7d6:	2d36      	cmp	r5, #54	; 0x36
    b7d8:	bf88      	it	hi
    b7da:	bd30      	pophi	{r4, r5, pc}
    b7dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b7e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b7e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b7e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b7ec:	d002      	beq.n	b7f4 <__adddf3+0x70>
    b7ee:	4240      	negs	r0, r0
    b7f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b7f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b7f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b7fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b800:	d002      	beq.n	b808 <__adddf3+0x84>
    b802:	4252      	negs	r2, r2
    b804:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b808:	ea94 0f05 	teq	r4, r5
    b80c:	f000 80a7 	beq.w	b95e <__adddf3+0x1da>
    b810:	f1a4 0401 	sub.w	r4, r4, #1
    b814:	f1d5 0e20 	rsbs	lr, r5, #32
    b818:	db0d      	blt.n	b836 <__adddf3+0xb2>
    b81a:	fa02 fc0e 	lsl.w	ip, r2, lr
    b81e:	fa22 f205 	lsr.w	r2, r2, r5
    b822:	1880      	adds	r0, r0, r2
    b824:	f141 0100 	adc.w	r1, r1, #0
    b828:	fa03 f20e 	lsl.w	r2, r3, lr
    b82c:	1880      	adds	r0, r0, r2
    b82e:	fa43 f305 	asr.w	r3, r3, r5
    b832:	4159      	adcs	r1, r3
    b834:	e00e      	b.n	b854 <__adddf3+0xd0>
    b836:	f1a5 0520 	sub.w	r5, r5, #32
    b83a:	f10e 0e20 	add.w	lr, lr, #32
    b83e:	2a01      	cmp	r2, #1
    b840:	fa03 fc0e 	lsl.w	ip, r3, lr
    b844:	bf28      	it	cs
    b846:	f04c 0c02 	orrcs.w	ip, ip, #2
    b84a:	fa43 f305 	asr.w	r3, r3, r5
    b84e:	18c0      	adds	r0, r0, r3
    b850:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b854:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b858:	d507      	bpl.n	b86a <__adddf3+0xe6>
    b85a:	f04f 0e00 	mov.w	lr, #0
    b85e:	f1dc 0c00 	rsbs	ip, ip, #0
    b862:	eb7e 0000 	sbcs.w	r0, lr, r0
    b866:	eb6e 0101 	sbc.w	r1, lr, r1
    b86a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b86e:	d31b      	bcc.n	b8a8 <__adddf3+0x124>
    b870:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b874:	d30c      	bcc.n	b890 <__adddf3+0x10c>
    b876:	0849      	lsrs	r1, r1, #1
    b878:	ea5f 0030 	movs.w	r0, r0, rrx
    b87c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b880:	f104 0401 	add.w	r4, r4, #1
    b884:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b888:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b88c:	f080 809a 	bcs.w	b9c4 <__adddf3+0x240>
    b890:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b894:	bf08      	it	eq
    b896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b89a:	f150 0000 	adcs.w	r0, r0, #0
    b89e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b8a2:	ea41 0105 	orr.w	r1, r1, r5
    b8a6:	bd30      	pop	{r4, r5, pc}
    b8a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b8ac:	4140      	adcs	r0, r0
    b8ae:	eb41 0101 	adc.w	r1, r1, r1
    b8b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b8b6:	f1a4 0401 	sub.w	r4, r4, #1
    b8ba:	d1e9      	bne.n	b890 <__adddf3+0x10c>
    b8bc:	f091 0f00 	teq	r1, #0
    b8c0:	bf04      	itt	eq
    b8c2:	4601      	moveq	r1, r0
    b8c4:	2000      	moveq	r0, #0
    b8c6:	fab1 f381 	clz	r3, r1
    b8ca:	bf08      	it	eq
    b8cc:	3320      	addeq	r3, #32
    b8ce:	f1a3 030b 	sub.w	r3, r3, #11
    b8d2:	f1b3 0220 	subs.w	r2, r3, #32
    b8d6:	da0c      	bge.n	b8f2 <__adddf3+0x16e>
    b8d8:	320c      	adds	r2, #12
    b8da:	dd08      	ble.n	b8ee <__adddf3+0x16a>
    b8dc:	f102 0c14 	add.w	ip, r2, #20
    b8e0:	f1c2 020c 	rsb	r2, r2, #12
    b8e4:	fa01 f00c 	lsl.w	r0, r1, ip
    b8e8:	fa21 f102 	lsr.w	r1, r1, r2
    b8ec:	e00c      	b.n	b908 <__adddf3+0x184>
    b8ee:	f102 0214 	add.w	r2, r2, #20
    b8f2:	bfd8      	it	le
    b8f4:	f1c2 0c20 	rsble	ip, r2, #32
    b8f8:	fa01 f102 	lsl.w	r1, r1, r2
    b8fc:	fa20 fc0c 	lsr.w	ip, r0, ip
    b900:	bfdc      	itt	le
    b902:	ea41 010c 	orrle.w	r1, r1, ip
    b906:	4090      	lslle	r0, r2
    b908:	1ae4      	subs	r4, r4, r3
    b90a:	bfa2      	ittt	ge
    b90c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b910:	4329      	orrge	r1, r5
    b912:	bd30      	popge	{r4, r5, pc}
    b914:	ea6f 0404 	mvn.w	r4, r4
    b918:	3c1f      	subs	r4, #31
    b91a:	da1c      	bge.n	b956 <__adddf3+0x1d2>
    b91c:	340c      	adds	r4, #12
    b91e:	dc0e      	bgt.n	b93e <__adddf3+0x1ba>
    b920:	f104 0414 	add.w	r4, r4, #20
    b924:	f1c4 0220 	rsb	r2, r4, #32
    b928:	fa20 f004 	lsr.w	r0, r0, r4
    b92c:	fa01 f302 	lsl.w	r3, r1, r2
    b930:	ea40 0003 	orr.w	r0, r0, r3
    b934:	fa21 f304 	lsr.w	r3, r1, r4
    b938:	ea45 0103 	orr.w	r1, r5, r3
    b93c:	bd30      	pop	{r4, r5, pc}
    b93e:	f1c4 040c 	rsb	r4, r4, #12
    b942:	f1c4 0220 	rsb	r2, r4, #32
    b946:	fa20 f002 	lsr.w	r0, r0, r2
    b94a:	fa01 f304 	lsl.w	r3, r1, r4
    b94e:	ea40 0003 	orr.w	r0, r0, r3
    b952:	4629      	mov	r1, r5
    b954:	bd30      	pop	{r4, r5, pc}
    b956:	fa21 f004 	lsr.w	r0, r1, r4
    b95a:	4629      	mov	r1, r5
    b95c:	bd30      	pop	{r4, r5, pc}
    b95e:	f094 0f00 	teq	r4, #0
    b962:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b966:	bf06      	itte	eq
    b968:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b96c:	3401      	addeq	r4, #1
    b96e:	3d01      	subne	r5, #1
    b970:	e74e      	b.n	b810 <__adddf3+0x8c>
    b972:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b976:	bf18      	it	ne
    b978:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b97c:	d029      	beq.n	b9d2 <__adddf3+0x24e>
    b97e:	ea94 0f05 	teq	r4, r5
    b982:	bf08      	it	eq
    b984:	ea90 0f02 	teqeq	r0, r2
    b988:	d005      	beq.n	b996 <__adddf3+0x212>
    b98a:	ea54 0c00 	orrs.w	ip, r4, r0
    b98e:	bf04      	itt	eq
    b990:	4619      	moveq	r1, r3
    b992:	4610      	moveq	r0, r2
    b994:	bd30      	pop	{r4, r5, pc}
    b996:	ea91 0f03 	teq	r1, r3
    b99a:	bf1e      	ittt	ne
    b99c:	2100      	movne	r1, #0
    b99e:	2000      	movne	r0, #0
    b9a0:	bd30      	popne	{r4, r5, pc}
    b9a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b9a6:	d105      	bne.n	b9b4 <__adddf3+0x230>
    b9a8:	0040      	lsls	r0, r0, #1
    b9aa:	4149      	adcs	r1, r1
    b9ac:	bf28      	it	cs
    b9ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b9b2:	bd30      	pop	{r4, r5, pc}
    b9b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b9b8:	bf3c      	itt	cc
    b9ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b9be:	bd30      	popcc	{r4, r5, pc}
    b9c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b9c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b9c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b9cc:	f04f 0000 	mov.w	r0, #0
    b9d0:	bd30      	pop	{r4, r5, pc}
    b9d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b9d6:	bf1a      	itte	ne
    b9d8:	4619      	movne	r1, r3
    b9da:	4610      	movne	r0, r2
    b9dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b9e0:	bf1c      	itt	ne
    b9e2:	460b      	movne	r3, r1
    b9e4:	4602      	movne	r2, r0
    b9e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b9ea:	bf06      	itte	eq
    b9ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b9f0:	ea91 0f03 	teqeq	r1, r3
    b9f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b9f8:	bd30      	pop	{r4, r5, pc}
    b9fa:	bf00      	nop

0000b9fc <__aeabi_ui2d>:
    b9fc:	f090 0f00 	teq	r0, #0
    ba00:	bf04      	itt	eq
    ba02:	2100      	moveq	r1, #0
    ba04:	4770      	bxeq	lr
    ba06:	b530      	push	{r4, r5, lr}
    ba08:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ba0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ba10:	f04f 0500 	mov.w	r5, #0
    ba14:	f04f 0100 	mov.w	r1, #0
    ba18:	e750      	b.n	b8bc <__adddf3+0x138>
    ba1a:	bf00      	nop

0000ba1c <__aeabi_i2d>:
    ba1c:	f090 0f00 	teq	r0, #0
    ba20:	bf04      	itt	eq
    ba22:	2100      	moveq	r1, #0
    ba24:	4770      	bxeq	lr
    ba26:	b530      	push	{r4, r5, lr}
    ba28:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ba2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ba30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    ba34:	bf48      	it	mi
    ba36:	4240      	negmi	r0, r0
    ba38:	f04f 0100 	mov.w	r1, #0
    ba3c:	e73e      	b.n	b8bc <__adddf3+0x138>
    ba3e:	bf00      	nop

0000ba40 <__aeabi_f2d>:
    ba40:	0042      	lsls	r2, r0, #1
    ba42:	ea4f 01e2 	mov.w	r1, r2, asr #3
    ba46:	ea4f 0131 	mov.w	r1, r1, rrx
    ba4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    ba4e:	bf1f      	itttt	ne
    ba50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    ba54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    ba58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    ba5c:	4770      	bxne	lr
    ba5e:	f092 0f00 	teq	r2, #0
    ba62:	bf14      	ite	ne
    ba64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    ba68:	4770      	bxeq	lr
    ba6a:	b530      	push	{r4, r5, lr}
    ba6c:	f44f 7460 	mov.w	r4, #896	; 0x380
    ba70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ba74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ba78:	e720      	b.n	b8bc <__adddf3+0x138>
    ba7a:	bf00      	nop

0000ba7c <__aeabi_ul2d>:
    ba7c:	ea50 0201 	orrs.w	r2, r0, r1
    ba80:	bf08      	it	eq
    ba82:	4770      	bxeq	lr
    ba84:	b530      	push	{r4, r5, lr}
    ba86:	f04f 0500 	mov.w	r5, #0
    ba8a:	e00a      	b.n	baa2 <__aeabi_l2d+0x16>

0000ba8c <__aeabi_l2d>:
    ba8c:	ea50 0201 	orrs.w	r2, r0, r1
    ba90:	bf08      	it	eq
    ba92:	4770      	bxeq	lr
    ba94:	b530      	push	{r4, r5, lr}
    ba96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    ba9a:	d502      	bpl.n	baa2 <__aeabi_l2d+0x16>
    ba9c:	4240      	negs	r0, r0
    ba9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    baa2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    baa6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    baaa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    baae:	f43f aedc 	beq.w	b86a <__adddf3+0xe6>
    bab2:	f04f 0203 	mov.w	r2, #3
    bab6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    baba:	bf18      	it	ne
    babc:	3203      	addne	r2, #3
    babe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bac2:	bf18      	it	ne
    bac4:	3203      	addne	r2, #3
    bac6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    baca:	f1c2 0320 	rsb	r3, r2, #32
    bace:	fa00 fc03 	lsl.w	ip, r0, r3
    bad2:	fa20 f002 	lsr.w	r0, r0, r2
    bad6:	fa01 fe03 	lsl.w	lr, r1, r3
    bada:	ea40 000e 	orr.w	r0, r0, lr
    bade:	fa21 f102 	lsr.w	r1, r1, r2
    bae2:	4414      	add	r4, r2
    bae4:	e6c1      	b.n	b86a <__adddf3+0xe6>
    bae6:	bf00      	nop

0000bae8 <__aeabi_dmul>:
    bae8:	b570      	push	{r4, r5, r6, lr}
    baea:	f04f 0cff 	mov.w	ip, #255	; 0xff
    baee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    baf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    baf6:	bf1d      	ittte	ne
    baf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bafc:	ea94 0f0c 	teqne	r4, ip
    bb00:	ea95 0f0c 	teqne	r5, ip
    bb04:	f000 f8de 	bleq	bcc4 <__aeabi_dmul+0x1dc>
    bb08:	442c      	add	r4, r5
    bb0a:	ea81 0603 	eor.w	r6, r1, r3
    bb0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    bb12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    bb16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    bb1a:	bf18      	it	ne
    bb1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    bb20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bb24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    bb28:	d038      	beq.n	bb9c <__aeabi_dmul+0xb4>
    bb2a:	fba0 ce02 	umull	ip, lr, r0, r2
    bb2e:	f04f 0500 	mov.w	r5, #0
    bb32:	fbe1 e502 	umlal	lr, r5, r1, r2
    bb36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    bb3a:	fbe0 e503 	umlal	lr, r5, r0, r3
    bb3e:	f04f 0600 	mov.w	r6, #0
    bb42:	fbe1 5603 	umlal	r5, r6, r1, r3
    bb46:	f09c 0f00 	teq	ip, #0
    bb4a:	bf18      	it	ne
    bb4c:	f04e 0e01 	orrne.w	lr, lr, #1
    bb50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    bb54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    bb58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    bb5c:	d204      	bcs.n	bb68 <__aeabi_dmul+0x80>
    bb5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    bb62:	416d      	adcs	r5, r5
    bb64:	eb46 0606 	adc.w	r6, r6, r6
    bb68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    bb6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    bb70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    bb74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    bb78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    bb7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    bb80:	bf88      	it	hi
    bb82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    bb86:	d81e      	bhi.n	bbc6 <__aeabi_dmul+0xde>
    bb88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    bb8c:	bf08      	it	eq
    bb8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    bb92:	f150 0000 	adcs.w	r0, r0, #0
    bb96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bb9a:	bd70      	pop	{r4, r5, r6, pc}
    bb9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    bba0:	ea46 0101 	orr.w	r1, r6, r1
    bba4:	ea40 0002 	orr.w	r0, r0, r2
    bba8:	ea81 0103 	eor.w	r1, r1, r3
    bbac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    bbb0:	bfc2      	ittt	gt
    bbb2:	ebd4 050c 	rsbsgt	r5, r4, ip
    bbb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    bbba:	bd70      	popgt	{r4, r5, r6, pc}
    bbbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bbc0:	f04f 0e00 	mov.w	lr, #0
    bbc4:	3c01      	subs	r4, #1
    bbc6:	f300 80ab 	bgt.w	bd20 <__aeabi_dmul+0x238>
    bbca:	f114 0f36 	cmn.w	r4, #54	; 0x36
    bbce:	bfde      	ittt	le
    bbd0:	2000      	movle	r0, #0
    bbd2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    bbd6:	bd70      	pople	{r4, r5, r6, pc}
    bbd8:	f1c4 0400 	rsb	r4, r4, #0
    bbdc:	3c20      	subs	r4, #32
    bbde:	da35      	bge.n	bc4c <__aeabi_dmul+0x164>
    bbe0:	340c      	adds	r4, #12
    bbe2:	dc1b      	bgt.n	bc1c <__aeabi_dmul+0x134>
    bbe4:	f104 0414 	add.w	r4, r4, #20
    bbe8:	f1c4 0520 	rsb	r5, r4, #32
    bbec:	fa00 f305 	lsl.w	r3, r0, r5
    bbf0:	fa20 f004 	lsr.w	r0, r0, r4
    bbf4:	fa01 f205 	lsl.w	r2, r1, r5
    bbf8:	ea40 0002 	orr.w	r0, r0, r2
    bbfc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    bc00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bc04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    bc08:	fa21 f604 	lsr.w	r6, r1, r4
    bc0c:	eb42 0106 	adc.w	r1, r2, r6
    bc10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bc14:	bf08      	it	eq
    bc16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bc1a:	bd70      	pop	{r4, r5, r6, pc}
    bc1c:	f1c4 040c 	rsb	r4, r4, #12
    bc20:	f1c4 0520 	rsb	r5, r4, #32
    bc24:	fa00 f304 	lsl.w	r3, r0, r4
    bc28:	fa20 f005 	lsr.w	r0, r0, r5
    bc2c:	fa01 f204 	lsl.w	r2, r1, r4
    bc30:	ea40 0002 	orr.w	r0, r0, r2
    bc34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bc38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    bc3c:	f141 0100 	adc.w	r1, r1, #0
    bc40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bc44:	bf08      	it	eq
    bc46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bc4a:	bd70      	pop	{r4, r5, r6, pc}
    bc4c:	f1c4 0520 	rsb	r5, r4, #32
    bc50:	fa00 f205 	lsl.w	r2, r0, r5
    bc54:	ea4e 0e02 	orr.w	lr, lr, r2
    bc58:	fa20 f304 	lsr.w	r3, r0, r4
    bc5c:	fa01 f205 	lsl.w	r2, r1, r5
    bc60:	ea43 0302 	orr.w	r3, r3, r2
    bc64:	fa21 f004 	lsr.w	r0, r1, r4
    bc68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bc6c:	fa21 f204 	lsr.w	r2, r1, r4
    bc70:	ea20 0002 	bic.w	r0, r0, r2
    bc74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    bc78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bc7c:	bf08      	it	eq
    bc7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bc82:	bd70      	pop	{r4, r5, r6, pc}
    bc84:	f094 0f00 	teq	r4, #0
    bc88:	d10f      	bne.n	bcaa <__aeabi_dmul+0x1c2>
    bc8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    bc8e:	0040      	lsls	r0, r0, #1
    bc90:	eb41 0101 	adc.w	r1, r1, r1
    bc94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bc98:	bf08      	it	eq
    bc9a:	3c01      	subeq	r4, #1
    bc9c:	d0f7      	beq.n	bc8e <__aeabi_dmul+0x1a6>
    bc9e:	ea41 0106 	orr.w	r1, r1, r6
    bca2:	f095 0f00 	teq	r5, #0
    bca6:	bf18      	it	ne
    bca8:	4770      	bxne	lr
    bcaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    bcae:	0052      	lsls	r2, r2, #1
    bcb0:	eb43 0303 	adc.w	r3, r3, r3
    bcb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    bcb8:	bf08      	it	eq
    bcba:	3d01      	subeq	r5, #1
    bcbc:	d0f7      	beq.n	bcae <__aeabi_dmul+0x1c6>
    bcbe:	ea43 0306 	orr.w	r3, r3, r6
    bcc2:	4770      	bx	lr
    bcc4:	ea94 0f0c 	teq	r4, ip
    bcc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    bccc:	bf18      	it	ne
    bcce:	ea95 0f0c 	teqne	r5, ip
    bcd2:	d00c      	beq.n	bcee <__aeabi_dmul+0x206>
    bcd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bcd8:	bf18      	it	ne
    bcda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bcde:	d1d1      	bne.n	bc84 <__aeabi_dmul+0x19c>
    bce0:	ea81 0103 	eor.w	r1, r1, r3
    bce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bce8:	f04f 0000 	mov.w	r0, #0
    bcec:	bd70      	pop	{r4, r5, r6, pc}
    bcee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bcf2:	bf06      	itte	eq
    bcf4:	4610      	moveq	r0, r2
    bcf6:	4619      	moveq	r1, r3
    bcf8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bcfc:	d019      	beq.n	bd32 <__aeabi_dmul+0x24a>
    bcfe:	ea94 0f0c 	teq	r4, ip
    bd02:	d102      	bne.n	bd0a <__aeabi_dmul+0x222>
    bd04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    bd08:	d113      	bne.n	bd32 <__aeabi_dmul+0x24a>
    bd0a:	ea95 0f0c 	teq	r5, ip
    bd0e:	d105      	bne.n	bd1c <__aeabi_dmul+0x234>
    bd10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    bd14:	bf1c      	itt	ne
    bd16:	4610      	movne	r0, r2
    bd18:	4619      	movne	r1, r3
    bd1a:	d10a      	bne.n	bd32 <__aeabi_dmul+0x24a>
    bd1c:	ea81 0103 	eor.w	r1, r1, r3
    bd20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bd24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    bd28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bd2c:	f04f 0000 	mov.w	r0, #0
    bd30:	bd70      	pop	{r4, r5, r6, pc}
    bd32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    bd36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    bd3a:	bd70      	pop	{r4, r5, r6, pc}

0000bd3c <__aeabi_ddiv>:
    bd3c:	b570      	push	{r4, r5, r6, lr}
    bd3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    bd42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    bd46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    bd4a:	bf1d      	ittte	ne
    bd4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bd50:	ea94 0f0c 	teqne	r4, ip
    bd54:	ea95 0f0c 	teqne	r5, ip
    bd58:	f000 f8a7 	bleq	beaa <__aeabi_ddiv+0x16e>
    bd5c:	eba4 0405 	sub.w	r4, r4, r5
    bd60:	ea81 0e03 	eor.w	lr, r1, r3
    bd64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    bd68:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bd6c:	f000 8088 	beq.w	be80 <__aeabi_ddiv+0x144>
    bd70:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bd74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    bd78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    bd7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    bd80:	ea4f 2202 	mov.w	r2, r2, lsl #8
    bd84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    bd88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    bd8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    bd90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    bd94:	429d      	cmp	r5, r3
    bd96:	bf08      	it	eq
    bd98:	4296      	cmpeq	r6, r2
    bd9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    bd9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    bda2:	d202      	bcs.n	bdaa <__aeabi_ddiv+0x6e>
    bda4:	085b      	lsrs	r3, r3, #1
    bda6:	ea4f 0232 	mov.w	r2, r2, rrx
    bdaa:	1ab6      	subs	r6, r6, r2
    bdac:	eb65 0503 	sbc.w	r5, r5, r3
    bdb0:	085b      	lsrs	r3, r3, #1
    bdb2:	ea4f 0232 	mov.w	r2, r2, rrx
    bdb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    bdba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    bdbe:	ebb6 0e02 	subs.w	lr, r6, r2
    bdc2:	eb75 0e03 	sbcs.w	lr, r5, r3
    bdc6:	bf22      	ittt	cs
    bdc8:	1ab6      	subcs	r6, r6, r2
    bdca:	4675      	movcs	r5, lr
    bdcc:	ea40 000c 	orrcs.w	r0, r0, ip
    bdd0:	085b      	lsrs	r3, r3, #1
    bdd2:	ea4f 0232 	mov.w	r2, r2, rrx
    bdd6:	ebb6 0e02 	subs.w	lr, r6, r2
    bdda:	eb75 0e03 	sbcs.w	lr, r5, r3
    bdde:	bf22      	ittt	cs
    bde0:	1ab6      	subcs	r6, r6, r2
    bde2:	4675      	movcs	r5, lr
    bde4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    bde8:	085b      	lsrs	r3, r3, #1
    bdea:	ea4f 0232 	mov.w	r2, r2, rrx
    bdee:	ebb6 0e02 	subs.w	lr, r6, r2
    bdf2:	eb75 0e03 	sbcs.w	lr, r5, r3
    bdf6:	bf22      	ittt	cs
    bdf8:	1ab6      	subcs	r6, r6, r2
    bdfa:	4675      	movcs	r5, lr
    bdfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    be00:	085b      	lsrs	r3, r3, #1
    be02:	ea4f 0232 	mov.w	r2, r2, rrx
    be06:	ebb6 0e02 	subs.w	lr, r6, r2
    be0a:	eb75 0e03 	sbcs.w	lr, r5, r3
    be0e:	bf22      	ittt	cs
    be10:	1ab6      	subcs	r6, r6, r2
    be12:	4675      	movcs	r5, lr
    be14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    be18:	ea55 0e06 	orrs.w	lr, r5, r6
    be1c:	d018      	beq.n	be50 <__aeabi_ddiv+0x114>
    be1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    be22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    be26:	ea4f 1606 	mov.w	r6, r6, lsl #4
    be2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    be2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    be32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    be36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    be3a:	d1c0      	bne.n	bdbe <__aeabi_ddiv+0x82>
    be3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    be40:	d10b      	bne.n	be5a <__aeabi_ddiv+0x11e>
    be42:	ea41 0100 	orr.w	r1, r1, r0
    be46:	f04f 0000 	mov.w	r0, #0
    be4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    be4e:	e7b6      	b.n	bdbe <__aeabi_ddiv+0x82>
    be50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    be54:	bf04      	itt	eq
    be56:	4301      	orreq	r1, r0
    be58:	2000      	moveq	r0, #0
    be5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    be5e:	bf88      	it	hi
    be60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    be64:	f63f aeaf 	bhi.w	bbc6 <__aeabi_dmul+0xde>
    be68:	ebb5 0c03 	subs.w	ip, r5, r3
    be6c:	bf04      	itt	eq
    be6e:	ebb6 0c02 	subseq.w	ip, r6, r2
    be72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    be76:	f150 0000 	adcs.w	r0, r0, #0
    be7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    be7e:	bd70      	pop	{r4, r5, r6, pc}
    be80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    be84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    be88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    be8c:	bfc2      	ittt	gt
    be8e:	ebd4 050c 	rsbsgt	r5, r4, ip
    be92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    be96:	bd70      	popgt	{r4, r5, r6, pc}
    be98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    be9c:	f04f 0e00 	mov.w	lr, #0
    bea0:	3c01      	subs	r4, #1
    bea2:	e690      	b.n	bbc6 <__aeabi_dmul+0xde>
    bea4:	ea45 0e06 	orr.w	lr, r5, r6
    bea8:	e68d      	b.n	bbc6 <__aeabi_dmul+0xde>
    beaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    beae:	ea94 0f0c 	teq	r4, ip
    beb2:	bf08      	it	eq
    beb4:	ea95 0f0c 	teqeq	r5, ip
    beb8:	f43f af3b 	beq.w	bd32 <__aeabi_dmul+0x24a>
    bebc:	ea94 0f0c 	teq	r4, ip
    bec0:	d10a      	bne.n	bed8 <__aeabi_ddiv+0x19c>
    bec2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bec6:	f47f af34 	bne.w	bd32 <__aeabi_dmul+0x24a>
    beca:	ea95 0f0c 	teq	r5, ip
    bece:	f47f af25 	bne.w	bd1c <__aeabi_dmul+0x234>
    bed2:	4610      	mov	r0, r2
    bed4:	4619      	mov	r1, r3
    bed6:	e72c      	b.n	bd32 <__aeabi_dmul+0x24a>
    bed8:	ea95 0f0c 	teq	r5, ip
    bedc:	d106      	bne.n	beec <__aeabi_ddiv+0x1b0>
    bede:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    bee2:	f43f aefd 	beq.w	bce0 <__aeabi_dmul+0x1f8>
    bee6:	4610      	mov	r0, r2
    bee8:	4619      	mov	r1, r3
    beea:	e722      	b.n	bd32 <__aeabi_dmul+0x24a>
    beec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bef0:	bf18      	it	ne
    bef2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bef6:	f47f aec5 	bne.w	bc84 <__aeabi_dmul+0x19c>
    befa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    befe:	f47f af0d 	bne.w	bd1c <__aeabi_dmul+0x234>
    bf02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    bf06:	f47f aeeb 	bne.w	bce0 <__aeabi_dmul+0x1f8>
    bf0a:	e712      	b.n	bd32 <__aeabi_dmul+0x24a>

0000bf0c <__aeabi_d2uiz>:
    bf0c:	004a      	lsls	r2, r1, #1
    bf0e:	d211      	bcs.n	bf34 <__aeabi_d2uiz+0x28>
    bf10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    bf14:	d211      	bcs.n	bf3a <__aeabi_d2uiz+0x2e>
    bf16:	d50d      	bpl.n	bf34 <__aeabi_d2uiz+0x28>
    bf18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    bf1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    bf20:	d40e      	bmi.n	bf40 <__aeabi_d2uiz+0x34>
    bf22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    bf26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bf2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    bf2e:	fa23 f002 	lsr.w	r0, r3, r2
    bf32:	4770      	bx	lr
    bf34:	f04f 0000 	mov.w	r0, #0
    bf38:	4770      	bx	lr
    bf3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    bf3e:	d102      	bne.n	bf46 <__aeabi_d2uiz+0x3a>
    bf40:	f04f 30ff 	mov.w	r0, #4294967295
    bf44:	4770      	bx	lr
    bf46:	f04f 0000 	mov.w	r0, #0
    bf4a:	4770      	bx	lr

0000bf4c <__libc_init_array>:
    bf4c:	b570      	push	{r4, r5, r6, lr}
    bf4e:	4e0d      	ldr	r6, [pc, #52]	; (bf84 <__libc_init_array+0x38>)
    bf50:	4c0d      	ldr	r4, [pc, #52]	; (bf88 <__libc_init_array+0x3c>)
    bf52:	1ba4      	subs	r4, r4, r6
    bf54:	10a4      	asrs	r4, r4, #2
    bf56:	2500      	movs	r5, #0
    bf58:	42a5      	cmp	r5, r4
    bf5a:	d109      	bne.n	bf70 <__libc_init_array+0x24>
    bf5c:	4e0b      	ldr	r6, [pc, #44]	; (bf8c <__libc_init_array+0x40>)
    bf5e:	4c0c      	ldr	r4, [pc, #48]	; (bf90 <__libc_init_array+0x44>)
    bf60:	f002 f85c 	bl	e01c <_init>
    bf64:	1ba4      	subs	r4, r4, r6
    bf66:	10a4      	asrs	r4, r4, #2
    bf68:	2500      	movs	r5, #0
    bf6a:	42a5      	cmp	r5, r4
    bf6c:	d105      	bne.n	bf7a <__libc_init_array+0x2e>
    bf6e:	bd70      	pop	{r4, r5, r6, pc}
    bf70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    bf74:	4798      	blx	r3
    bf76:	3501      	adds	r5, #1
    bf78:	e7ee      	b.n	bf58 <__libc_init_array+0xc>
    bf7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    bf7e:	4798      	blx	r3
    bf80:	3501      	adds	r5, #1
    bf82:	e7f2      	b.n	bf6a <__libc_init_array+0x1e>
    bf84:	0000e028 	.word	0x0000e028
    bf88:	0000e028 	.word	0x0000e028
    bf8c:	0000e028 	.word	0x0000e028
    bf90:	0000e02c 	.word	0x0000e02c

0000bf94 <malloc>:
    bf94:	4b02      	ldr	r3, [pc, #8]	; (bfa0 <malloc+0xc>)
    bf96:	4601      	mov	r1, r0
    bf98:	6818      	ldr	r0, [r3, #0]
    bf9a:	f000 b865 	b.w	c068 <_malloc_r>
    bf9e:	bf00      	nop
    bfa0:	20000558 	.word	0x20000558

0000bfa4 <memcpy>:
    bfa4:	b510      	push	{r4, lr}
    bfa6:	1e43      	subs	r3, r0, #1
    bfa8:	440a      	add	r2, r1
    bfaa:	4291      	cmp	r1, r2
    bfac:	d100      	bne.n	bfb0 <memcpy+0xc>
    bfae:	bd10      	pop	{r4, pc}
    bfb0:	f811 4b01 	ldrb.w	r4, [r1], #1
    bfb4:	f803 4f01 	strb.w	r4, [r3, #1]!
    bfb8:	e7f7      	b.n	bfaa <memcpy+0x6>

0000bfba <memset>:
    bfba:	4402      	add	r2, r0
    bfbc:	4603      	mov	r3, r0
    bfbe:	4293      	cmp	r3, r2
    bfc0:	d100      	bne.n	bfc4 <memset+0xa>
    bfc2:	4770      	bx	lr
    bfc4:	f803 1b01 	strb.w	r1, [r3], #1
    bfc8:	e7f9      	b.n	bfbe <memset+0x4>
	...

0000bfcc <_free_r>:
    bfcc:	b538      	push	{r3, r4, r5, lr}
    bfce:	4605      	mov	r5, r0
    bfd0:	2900      	cmp	r1, #0
    bfd2:	d045      	beq.n	c060 <_free_r+0x94>
    bfd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bfd8:	1f0c      	subs	r4, r1, #4
    bfda:	2b00      	cmp	r3, #0
    bfdc:	bfb8      	it	lt
    bfde:	18e4      	addlt	r4, r4, r3
    bfe0:	f000 fcae 	bl	c940 <__malloc_lock>
    bfe4:	4a1f      	ldr	r2, [pc, #124]	; (c064 <_free_r+0x98>)
    bfe6:	6813      	ldr	r3, [r2, #0]
    bfe8:	4610      	mov	r0, r2
    bfea:	b933      	cbnz	r3, bffa <_free_r+0x2e>
    bfec:	6063      	str	r3, [r4, #4]
    bfee:	6014      	str	r4, [r2, #0]
    bff0:	4628      	mov	r0, r5
    bff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bff6:	f000 bca4 	b.w	c942 <__malloc_unlock>
    bffa:	42a3      	cmp	r3, r4
    bffc:	d90c      	bls.n	c018 <_free_r+0x4c>
    bffe:	6821      	ldr	r1, [r4, #0]
    c000:	1862      	adds	r2, r4, r1
    c002:	4293      	cmp	r3, r2
    c004:	bf04      	itt	eq
    c006:	681a      	ldreq	r2, [r3, #0]
    c008:	685b      	ldreq	r3, [r3, #4]
    c00a:	6063      	str	r3, [r4, #4]
    c00c:	bf04      	itt	eq
    c00e:	1852      	addeq	r2, r2, r1
    c010:	6022      	streq	r2, [r4, #0]
    c012:	6004      	str	r4, [r0, #0]
    c014:	e7ec      	b.n	bff0 <_free_r+0x24>
    c016:	4613      	mov	r3, r2
    c018:	685a      	ldr	r2, [r3, #4]
    c01a:	b10a      	cbz	r2, c020 <_free_r+0x54>
    c01c:	42a2      	cmp	r2, r4
    c01e:	d9fa      	bls.n	c016 <_free_r+0x4a>
    c020:	6819      	ldr	r1, [r3, #0]
    c022:	1858      	adds	r0, r3, r1
    c024:	42a0      	cmp	r0, r4
    c026:	d10b      	bne.n	c040 <_free_r+0x74>
    c028:	6820      	ldr	r0, [r4, #0]
    c02a:	4401      	add	r1, r0
    c02c:	1858      	adds	r0, r3, r1
    c02e:	4282      	cmp	r2, r0
    c030:	6019      	str	r1, [r3, #0]
    c032:	d1dd      	bne.n	bff0 <_free_r+0x24>
    c034:	6810      	ldr	r0, [r2, #0]
    c036:	6852      	ldr	r2, [r2, #4]
    c038:	605a      	str	r2, [r3, #4]
    c03a:	4401      	add	r1, r0
    c03c:	6019      	str	r1, [r3, #0]
    c03e:	e7d7      	b.n	bff0 <_free_r+0x24>
    c040:	d902      	bls.n	c048 <_free_r+0x7c>
    c042:	230c      	movs	r3, #12
    c044:	602b      	str	r3, [r5, #0]
    c046:	e7d3      	b.n	bff0 <_free_r+0x24>
    c048:	6820      	ldr	r0, [r4, #0]
    c04a:	1821      	adds	r1, r4, r0
    c04c:	428a      	cmp	r2, r1
    c04e:	bf04      	itt	eq
    c050:	6811      	ldreq	r1, [r2, #0]
    c052:	6852      	ldreq	r2, [r2, #4]
    c054:	6062      	str	r2, [r4, #4]
    c056:	bf04      	itt	eq
    c058:	1809      	addeq	r1, r1, r0
    c05a:	6021      	streq	r1, [r4, #0]
    c05c:	605c      	str	r4, [r3, #4]
    c05e:	e7c7      	b.n	bff0 <_free_r+0x24>
    c060:	bd38      	pop	{r3, r4, r5, pc}
    c062:	bf00      	nop
    c064:	20000f44 	.word	0x20000f44

0000c068 <_malloc_r>:
    c068:	b570      	push	{r4, r5, r6, lr}
    c06a:	1ccd      	adds	r5, r1, #3
    c06c:	f025 0503 	bic.w	r5, r5, #3
    c070:	3508      	adds	r5, #8
    c072:	2d0c      	cmp	r5, #12
    c074:	bf38      	it	cc
    c076:	250c      	movcc	r5, #12
    c078:	2d00      	cmp	r5, #0
    c07a:	4606      	mov	r6, r0
    c07c:	db01      	blt.n	c082 <_malloc_r+0x1a>
    c07e:	42a9      	cmp	r1, r5
    c080:	d903      	bls.n	c08a <_malloc_r+0x22>
    c082:	230c      	movs	r3, #12
    c084:	6033      	str	r3, [r6, #0]
    c086:	2000      	movs	r0, #0
    c088:	bd70      	pop	{r4, r5, r6, pc}
    c08a:	f000 fc59 	bl	c940 <__malloc_lock>
    c08e:	4a23      	ldr	r2, [pc, #140]	; (c11c <_malloc_r+0xb4>)
    c090:	6814      	ldr	r4, [r2, #0]
    c092:	4621      	mov	r1, r4
    c094:	b991      	cbnz	r1, c0bc <_malloc_r+0x54>
    c096:	4c22      	ldr	r4, [pc, #136]	; (c120 <_malloc_r+0xb8>)
    c098:	6823      	ldr	r3, [r4, #0]
    c09a:	b91b      	cbnz	r3, c0a4 <_malloc_r+0x3c>
    c09c:	4630      	mov	r0, r6
    c09e:	f000 f8bd 	bl	c21c <_sbrk_r>
    c0a2:	6020      	str	r0, [r4, #0]
    c0a4:	4629      	mov	r1, r5
    c0a6:	4630      	mov	r0, r6
    c0a8:	f000 f8b8 	bl	c21c <_sbrk_r>
    c0ac:	1c43      	adds	r3, r0, #1
    c0ae:	d126      	bne.n	c0fe <_malloc_r+0x96>
    c0b0:	230c      	movs	r3, #12
    c0b2:	6033      	str	r3, [r6, #0]
    c0b4:	4630      	mov	r0, r6
    c0b6:	f000 fc44 	bl	c942 <__malloc_unlock>
    c0ba:	e7e4      	b.n	c086 <_malloc_r+0x1e>
    c0bc:	680b      	ldr	r3, [r1, #0]
    c0be:	1b5b      	subs	r3, r3, r5
    c0c0:	d41a      	bmi.n	c0f8 <_malloc_r+0x90>
    c0c2:	2b0b      	cmp	r3, #11
    c0c4:	d90f      	bls.n	c0e6 <_malloc_r+0x7e>
    c0c6:	600b      	str	r3, [r1, #0]
    c0c8:	50cd      	str	r5, [r1, r3]
    c0ca:	18cc      	adds	r4, r1, r3
    c0cc:	4630      	mov	r0, r6
    c0ce:	f000 fc38 	bl	c942 <__malloc_unlock>
    c0d2:	f104 000b 	add.w	r0, r4, #11
    c0d6:	1d23      	adds	r3, r4, #4
    c0d8:	f020 0007 	bic.w	r0, r0, #7
    c0dc:	1ac3      	subs	r3, r0, r3
    c0de:	d01b      	beq.n	c118 <_malloc_r+0xb0>
    c0e0:	425a      	negs	r2, r3
    c0e2:	50e2      	str	r2, [r4, r3]
    c0e4:	bd70      	pop	{r4, r5, r6, pc}
    c0e6:	428c      	cmp	r4, r1
    c0e8:	bf0d      	iteet	eq
    c0ea:	6863      	ldreq	r3, [r4, #4]
    c0ec:	684b      	ldrne	r3, [r1, #4]
    c0ee:	6063      	strne	r3, [r4, #4]
    c0f0:	6013      	streq	r3, [r2, #0]
    c0f2:	bf18      	it	ne
    c0f4:	460c      	movne	r4, r1
    c0f6:	e7e9      	b.n	c0cc <_malloc_r+0x64>
    c0f8:	460c      	mov	r4, r1
    c0fa:	6849      	ldr	r1, [r1, #4]
    c0fc:	e7ca      	b.n	c094 <_malloc_r+0x2c>
    c0fe:	1cc4      	adds	r4, r0, #3
    c100:	f024 0403 	bic.w	r4, r4, #3
    c104:	42a0      	cmp	r0, r4
    c106:	d005      	beq.n	c114 <_malloc_r+0xac>
    c108:	1a21      	subs	r1, r4, r0
    c10a:	4630      	mov	r0, r6
    c10c:	f000 f886 	bl	c21c <_sbrk_r>
    c110:	3001      	adds	r0, #1
    c112:	d0cd      	beq.n	c0b0 <_malloc_r+0x48>
    c114:	6025      	str	r5, [r4, #0]
    c116:	e7d9      	b.n	c0cc <_malloc_r+0x64>
    c118:	bd70      	pop	{r4, r5, r6, pc}
    c11a:	bf00      	nop
    c11c:	20000f44 	.word	0x20000f44
    c120:	20000f48 	.word	0x20000f48

0000c124 <iprintf>:
    c124:	b40f      	push	{r0, r1, r2, r3}
    c126:	4b0a      	ldr	r3, [pc, #40]	; (c150 <iprintf+0x2c>)
    c128:	b513      	push	{r0, r1, r4, lr}
    c12a:	681c      	ldr	r4, [r3, #0]
    c12c:	b124      	cbz	r4, c138 <iprintf+0x14>
    c12e:	69a3      	ldr	r3, [r4, #24]
    c130:	b913      	cbnz	r3, c138 <iprintf+0x14>
    c132:	4620      	mov	r0, r4
    c134:	f000 fb16 	bl	c764 <__sinit>
    c138:	ab05      	add	r3, sp, #20
    c13a:	9a04      	ldr	r2, [sp, #16]
    c13c:	68a1      	ldr	r1, [r4, #8]
    c13e:	9301      	str	r3, [sp, #4]
    c140:	4620      	mov	r0, r4
    c142:	f000 fd77 	bl	cc34 <_vfiprintf_r>
    c146:	b002      	add	sp, #8
    c148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c14c:	b004      	add	sp, #16
    c14e:	4770      	bx	lr
    c150:	20000558 	.word	0x20000558

0000c154 <_puts_r>:
    c154:	b570      	push	{r4, r5, r6, lr}
    c156:	460e      	mov	r6, r1
    c158:	4605      	mov	r5, r0
    c15a:	b118      	cbz	r0, c164 <_puts_r+0x10>
    c15c:	6983      	ldr	r3, [r0, #24]
    c15e:	b90b      	cbnz	r3, c164 <_puts_r+0x10>
    c160:	f000 fb00 	bl	c764 <__sinit>
    c164:	69ab      	ldr	r3, [r5, #24]
    c166:	68ac      	ldr	r4, [r5, #8]
    c168:	b913      	cbnz	r3, c170 <_puts_r+0x1c>
    c16a:	4628      	mov	r0, r5
    c16c:	f000 fafa 	bl	c764 <__sinit>
    c170:	4b23      	ldr	r3, [pc, #140]	; (c200 <_puts_r+0xac>)
    c172:	429c      	cmp	r4, r3
    c174:	d117      	bne.n	c1a6 <_puts_r+0x52>
    c176:	686c      	ldr	r4, [r5, #4]
    c178:	89a3      	ldrh	r3, [r4, #12]
    c17a:	071b      	lsls	r3, r3, #28
    c17c:	d51d      	bpl.n	c1ba <_puts_r+0x66>
    c17e:	6923      	ldr	r3, [r4, #16]
    c180:	b1db      	cbz	r3, c1ba <_puts_r+0x66>
    c182:	3e01      	subs	r6, #1
    c184:	68a3      	ldr	r3, [r4, #8]
    c186:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    c18a:	3b01      	subs	r3, #1
    c18c:	60a3      	str	r3, [r4, #8]
    c18e:	b9e9      	cbnz	r1, c1cc <_puts_r+0x78>
    c190:	2b00      	cmp	r3, #0
    c192:	da2e      	bge.n	c1f2 <_puts_r+0x9e>
    c194:	4622      	mov	r2, r4
    c196:	210a      	movs	r1, #10
    c198:	4628      	mov	r0, r5
    c19a:	f000 f931 	bl	c400 <__swbuf_r>
    c19e:	3001      	adds	r0, #1
    c1a0:	d011      	beq.n	c1c6 <_puts_r+0x72>
    c1a2:	200a      	movs	r0, #10
    c1a4:	bd70      	pop	{r4, r5, r6, pc}
    c1a6:	4b17      	ldr	r3, [pc, #92]	; (c204 <_puts_r+0xb0>)
    c1a8:	429c      	cmp	r4, r3
    c1aa:	d101      	bne.n	c1b0 <_puts_r+0x5c>
    c1ac:	68ac      	ldr	r4, [r5, #8]
    c1ae:	e7e3      	b.n	c178 <_puts_r+0x24>
    c1b0:	4b15      	ldr	r3, [pc, #84]	; (c208 <_puts_r+0xb4>)
    c1b2:	429c      	cmp	r4, r3
    c1b4:	bf08      	it	eq
    c1b6:	68ec      	ldreq	r4, [r5, #12]
    c1b8:	e7de      	b.n	c178 <_puts_r+0x24>
    c1ba:	4621      	mov	r1, r4
    c1bc:	4628      	mov	r0, r5
    c1be:	f000 f971 	bl	c4a4 <__swsetup_r>
    c1c2:	2800      	cmp	r0, #0
    c1c4:	d0dd      	beq.n	c182 <_puts_r+0x2e>
    c1c6:	f04f 30ff 	mov.w	r0, #4294967295
    c1ca:	bd70      	pop	{r4, r5, r6, pc}
    c1cc:	2b00      	cmp	r3, #0
    c1ce:	da04      	bge.n	c1da <_puts_r+0x86>
    c1d0:	69a2      	ldr	r2, [r4, #24]
    c1d2:	4293      	cmp	r3, r2
    c1d4:	db06      	blt.n	c1e4 <_puts_r+0x90>
    c1d6:	290a      	cmp	r1, #10
    c1d8:	d004      	beq.n	c1e4 <_puts_r+0x90>
    c1da:	6823      	ldr	r3, [r4, #0]
    c1dc:	1c5a      	adds	r2, r3, #1
    c1de:	6022      	str	r2, [r4, #0]
    c1e0:	7019      	strb	r1, [r3, #0]
    c1e2:	e7cf      	b.n	c184 <_puts_r+0x30>
    c1e4:	4622      	mov	r2, r4
    c1e6:	4628      	mov	r0, r5
    c1e8:	f000 f90a 	bl	c400 <__swbuf_r>
    c1ec:	3001      	adds	r0, #1
    c1ee:	d1c9      	bne.n	c184 <_puts_r+0x30>
    c1f0:	e7e9      	b.n	c1c6 <_puts_r+0x72>
    c1f2:	6823      	ldr	r3, [r4, #0]
    c1f4:	200a      	movs	r0, #10
    c1f6:	1c5a      	adds	r2, r3, #1
    c1f8:	6022      	str	r2, [r4, #0]
    c1fa:	7018      	strb	r0, [r3, #0]
    c1fc:	bd70      	pop	{r4, r5, r6, pc}
    c1fe:	bf00      	nop
    c200:	0000dfa8 	.word	0x0000dfa8
    c204:	0000dfc8 	.word	0x0000dfc8
    c208:	0000df88 	.word	0x0000df88

0000c20c <puts>:
    c20c:	4b02      	ldr	r3, [pc, #8]	; (c218 <puts+0xc>)
    c20e:	4601      	mov	r1, r0
    c210:	6818      	ldr	r0, [r3, #0]
    c212:	f7ff bf9f 	b.w	c154 <_puts_r>
    c216:	bf00      	nop
    c218:	20000558 	.word	0x20000558

0000c21c <_sbrk_r>:
    c21c:	b538      	push	{r3, r4, r5, lr}
    c21e:	4c06      	ldr	r4, [pc, #24]	; (c238 <_sbrk_r+0x1c>)
    c220:	2300      	movs	r3, #0
    c222:	4605      	mov	r5, r0
    c224:	4608      	mov	r0, r1
    c226:	6023      	str	r3, [r4, #0]
    c228:	f7f9 fd5e 	bl	5ce8 <_sbrk>
    c22c:	1c43      	adds	r3, r0, #1
    c22e:	d102      	bne.n	c236 <_sbrk_r+0x1a>
    c230:	6823      	ldr	r3, [r4, #0]
    c232:	b103      	cbz	r3, c236 <_sbrk_r+0x1a>
    c234:	602b      	str	r3, [r5, #0]
    c236:	bd38      	pop	{r3, r4, r5, pc}
    c238:	20003bb8 	.word	0x20003bb8

0000c23c <setbuf>:
    c23c:	2900      	cmp	r1, #0
    c23e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c242:	bf0c      	ite	eq
    c244:	2202      	moveq	r2, #2
    c246:	2200      	movne	r2, #0
    c248:	f000 b800 	b.w	c24c <setvbuf>

0000c24c <setvbuf>:
    c24c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c250:	461d      	mov	r5, r3
    c252:	4b51      	ldr	r3, [pc, #324]	; (c398 <setvbuf+0x14c>)
    c254:	681e      	ldr	r6, [r3, #0]
    c256:	4604      	mov	r4, r0
    c258:	460f      	mov	r7, r1
    c25a:	4690      	mov	r8, r2
    c25c:	b126      	cbz	r6, c268 <setvbuf+0x1c>
    c25e:	69b3      	ldr	r3, [r6, #24]
    c260:	b913      	cbnz	r3, c268 <setvbuf+0x1c>
    c262:	4630      	mov	r0, r6
    c264:	f000 fa7e 	bl	c764 <__sinit>
    c268:	4b4c      	ldr	r3, [pc, #304]	; (c39c <setvbuf+0x150>)
    c26a:	429c      	cmp	r4, r3
    c26c:	d152      	bne.n	c314 <setvbuf+0xc8>
    c26e:	6874      	ldr	r4, [r6, #4]
    c270:	f1b8 0f02 	cmp.w	r8, #2
    c274:	d006      	beq.n	c284 <setvbuf+0x38>
    c276:	f1b8 0f01 	cmp.w	r8, #1
    c27a:	f200 8089 	bhi.w	c390 <setvbuf+0x144>
    c27e:	2d00      	cmp	r5, #0
    c280:	f2c0 8086 	blt.w	c390 <setvbuf+0x144>
    c284:	4621      	mov	r1, r4
    c286:	4630      	mov	r0, r6
    c288:	f000 fa02 	bl	c690 <_fflush_r>
    c28c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c28e:	b141      	cbz	r1, c2a2 <setvbuf+0x56>
    c290:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c294:	4299      	cmp	r1, r3
    c296:	d002      	beq.n	c29e <setvbuf+0x52>
    c298:	4630      	mov	r0, r6
    c29a:	f7ff fe97 	bl	bfcc <_free_r>
    c29e:	2300      	movs	r3, #0
    c2a0:	6363      	str	r3, [r4, #52]	; 0x34
    c2a2:	2300      	movs	r3, #0
    c2a4:	61a3      	str	r3, [r4, #24]
    c2a6:	6063      	str	r3, [r4, #4]
    c2a8:	89a3      	ldrh	r3, [r4, #12]
    c2aa:	061b      	lsls	r3, r3, #24
    c2ac:	d503      	bpl.n	c2b6 <setvbuf+0x6a>
    c2ae:	6921      	ldr	r1, [r4, #16]
    c2b0:	4630      	mov	r0, r6
    c2b2:	f7ff fe8b 	bl	bfcc <_free_r>
    c2b6:	89a3      	ldrh	r3, [r4, #12]
    c2b8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    c2bc:	f023 0303 	bic.w	r3, r3, #3
    c2c0:	f1b8 0f02 	cmp.w	r8, #2
    c2c4:	81a3      	strh	r3, [r4, #12]
    c2c6:	d05d      	beq.n	c384 <setvbuf+0x138>
    c2c8:	ab01      	add	r3, sp, #4
    c2ca:	466a      	mov	r2, sp
    c2cc:	4621      	mov	r1, r4
    c2ce:	4630      	mov	r0, r6
    c2d0:	f000 fad2 	bl	c878 <__swhatbuf_r>
    c2d4:	89a3      	ldrh	r3, [r4, #12]
    c2d6:	4318      	orrs	r0, r3
    c2d8:	81a0      	strh	r0, [r4, #12]
    c2da:	bb2d      	cbnz	r5, c328 <setvbuf+0xdc>
    c2dc:	9d00      	ldr	r5, [sp, #0]
    c2de:	4628      	mov	r0, r5
    c2e0:	f7ff fe58 	bl	bf94 <malloc>
    c2e4:	4607      	mov	r7, r0
    c2e6:	2800      	cmp	r0, #0
    c2e8:	d14e      	bne.n	c388 <setvbuf+0x13c>
    c2ea:	f8dd 9000 	ldr.w	r9, [sp]
    c2ee:	45a9      	cmp	r9, r5
    c2f0:	d13c      	bne.n	c36c <setvbuf+0x120>
    c2f2:	f04f 30ff 	mov.w	r0, #4294967295
    c2f6:	89a3      	ldrh	r3, [r4, #12]
    c2f8:	f043 0302 	orr.w	r3, r3, #2
    c2fc:	81a3      	strh	r3, [r4, #12]
    c2fe:	2300      	movs	r3, #0
    c300:	60a3      	str	r3, [r4, #8]
    c302:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c306:	6023      	str	r3, [r4, #0]
    c308:	6123      	str	r3, [r4, #16]
    c30a:	2301      	movs	r3, #1
    c30c:	6163      	str	r3, [r4, #20]
    c30e:	b003      	add	sp, #12
    c310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c314:	4b22      	ldr	r3, [pc, #136]	; (c3a0 <setvbuf+0x154>)
    c316:	429c      	cmp	r4, r3
    c318:	d101      	bne.n	c31e <setvbuf+0xd2>
    c31a:	68b4      	ldr	r4, [r6, #8]
    c31c:	e7a8      	b.n	c270 <setvbuf+0x24>
    c31e:	4b21      	ldr	r3, [pc, #132]	; (c3a4 <setvbuf+0x158>)
    c320:	429c      	cmp	r4, r3
    c322:	bf08      	it	eq
    c324:	68f4      	ldreq	r4, [r6, #12]
    c326:	e7a3      	b.n	c270 <setvbuf+0x24>
    c328:	2f00      	cmp	r7, #0
    c32a:	d0d8      	beq.n	c2de <setvbuf+0x92>
    c32c:	69b3      	ldr	r3, [r6, #24]
    c32e:	b913      	cbnz	r3, c336 <setvbuf+0xea>
    c330:	4630      	mov	r0, r6
    c332:	f000 fa17 	bl	c764 <__sinit>
    c336:	f1b8 0f01 	cmp.w	r8, #1
    c33a:	bf08      	it	eq
    c33c:	89a3      	ldrheq	r3, [r4, #12]
    c33e:	6027      	str	r7, [r4, #0]
    c340:	bf04      	itt	eq
    c342:	f043 0301 	orreq.w	r3, r3, #1
    c346:	81a3      	strheq	r3, [r4, #12]
    c348:	89a3      	ldrh	r3, [r4, #12]
    c34a:	6127      	str	r7, [r4, #16]
    c34c:	f013 0008 	ands.w	r0, r3, #8
    c350:	6165      	str	r5, [r4, #20]
    c352:	d01b      	beq.n	c38c <setvbuf+0x140>
    c354:	f013 0001 	ands.w	r0, r3, #1
    c358:	bf18      	it	ne
    c35a:	426d      	negne	r5, r5
    c35c:	f04f 0300 	mov.w	r3, #0
    c360:	bf1d      	ittte	ne
    c362:	60a3      	strne	r3, [r4, #8]
    c364:	61a5      	strne	r5, [r4, #24]
    c366:	4618      	movne	r0, r3
    c368:	60a5      	streq	r5, [r4, #8]
    c36a:	e7d0      	b.n	c30e <setvbuf+0xc2>
    c36c:	4648      	mov	r0, r9
    c36e:	f7ff fe11 	bl	bf94 <malloc>
    c372:	4607      	mov	r7, r0
    c374:	2800      	cmp	r0, #0
    c376:	d0bc      	beq.n	c2f2 <setvbuf+0xa6>
    c378:	89a3      	ldrh	r3, [r4, #12]
    c37a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c37e:	81a3      	strh	r3, [r4, #12]
    c380:	464d      	mov	r5, r9
    c382:	e7d3      	b.n	c32c <setvbuf+0xe0>
    c384:	2000      	movs	r0, #0
    c386:	e7b6      	b.n	c2f6 <setvbuf+0xaa>
    c388:	46a9      	mov	r9, r5
    c38a:	e7f5      	b.n	c378 <setvbuf+0x12c>
    c38c:	60a0      	str	r0, [r4, #8]
    c38e:	e7be      	b.n	c30e <setvbuf+0xc2>
    c390:	f04f 30ff 	mov.w	r0, #4294967295
    c394:	e7bb      	b.n	c30e <setvbuf+0xc2>
    c396:	bf00      	nop
    c398:	20000558 	.word	0x20000558
    c39c:	0000dfa8 	.word	0x0000dfa8
    c3a0:	0000dfc8 	.word	0x0000dfc8
    c3a4:	0000df88 	.word	0x0000df88

0000c3a8 <siprintf>:
    c3a8:	b40e      	push	{r1, r2, r3}
    c3aa:	b500      	push	{lr}
    c3ac:	b09c      	sub	sp, #112	; 0x70
    c3ae:	f44f 7102 	mov.w	r1, #520	; 0x208
    c3b2:	ab1d      	add	r3, sp, #116	; 0x74
    c3b4:	f8ad 1014 	strh.w	r1, [sp, #20]
    c3b8:	9002      	str	r0, [sp, #8]
    c3ba:	9006      	str	r0, [sp, #24]
    c3bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c3c0:	480a      	ldr	r0, [pc, #40]	; (c3ec <siprintf+0x44>)
    c3c2:	9104      	str	r1, [sp, #16]
    c3c4:	9107      	str	r1, [sp, #28]
    c3c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3ca:	f853 2b04 	ldr.w	r2, [r3], #4
    c3ce:	f8ad 1016 	strh.w	r1, [sp, #22]
    c3d2:	6800      	ldr	r0, [r0, #0]
    c3d4:	9301      	str	r3, [sp, #4]
    c3d6:	a902      	add	r1, sp, #8
    c3d8:	f000 fb10 	bl	c9fc <_svfiprintf_r>
    c3dc:	9b02      	ldr	r3, [sp, #8]
    c3de:	2200      	movs	r2, #0
    c3e0:	701a      	strb	r2, [r3, #0]
    c3e2:	b01c      	add	sp, #112	; 0x70
    c3e4:	f85d eb04 	ldr.w	lr, [sp], #4
    c3e8:	b003      	add	sp, #12
    c3ea:	4770      	bx	lr
    c3ec:	20000558 	.word	0x20000558

0000c3f0 <strlen>:
    c3f0:	4603      	mov	r3, r0
    c3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
    c3f6:	2a00      	cmp	r2, #0
    c3f8:	d1fb      	bne.n	c3f2 <strlen+0x2>
    c3fa:	1a18      	subs	r0, r3, r0
    c3fc:	3801      	subs	r0, #1
    c3fe:	4770      	bx	lr

0000c400 <__swbuf_r>:
    c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c402:	460e      	mov	r6, r1
    c404:	4614      	mov	r4, r2
    c406:	4605      	mov	r5, r0
    c408:	b118      	cbz	r0, c412 <__swbuf_r+0x12>
    c40a:	6983      	ldr	r3, [r0, #24]
    c40c:	b90b      	cbnz	r3, c412 <__swbuf_r+0x12>
    c40e:	f000 f9a9 	bl	c764 <__sinit>
    c412:	4b21      	ldr	r3, [pc, #132]	; (c498 <__swbuf_r+0x98>)
    c414:	429c      	cmp	r4, r3
    c416:	d12a      	bne.n	c46e <__swbuf_r+0x6e>
    c418:	686c      	ldr	r4, [r5, #4]
    c41a:	69a3      	ldr	r3, [r4, #24]
    c41c:	60a3      	str	r3, [r4, #8]
    c41e:	89a3      	ldrh	r3, [r4, #12]
    c420:	071a      	lsls	r2, r3, #28
    c422:	d52e      	bpl.n	c482 <__swbuf_r+0x82>
    c424:	6923      	ldr	r3, [r4, #16]
    c426:	b363      	cbz	r3, c482 <__swbuf_r+0x82>
    c428:	6923      	ldr	r3, [r4, #16]
    c42a:	6820      	ldr	r0, [r4, #0]
    c42c:	1ac0      	subs	r0, r0, r3
    c42e:	6963      	ldr	r3, [r4, #20]
    c430:	b2f6      	uxtb	r6, r6
    c432:	4298      	cmp	r0, r3
    c434:	4637      	mov	r7, r6
    c436:	db04      	blt.n	c442 <__swbuf_r+0x42>
    c438:	4621      	mov	r1, r4
    c43a:	4628      	mov	r0, r5
    c43c:	f000 f928 	bl	c690 <_fflush_r>
    c440:	bb28      	cbnz	r0, c48e <__swbuf_r+0x8e>
    c442:	68a3      	ldr	r3, [r4, #8]
    c444:	3b01      	subs	r3, #1
    c446:	60a3      	str	r3, [r4, #8]
    c448:	6823      	ldr	r3, [r4, #0]
    c44a:	1c5a      	adds	r2, r3, #1
    c44c:	6022      	str	r2, [r4, #0]
    c44e:	701e      	strb	r6, [r3, #0]
    c450:	6963      	ldr	r3, [r4, #20]
    c452:	3001      	adds	r0, #1
    c454:	4298      	cmp	r0, r3
    c456:	d004      	beq.n	c462 <__swbuf_r+0x62>
    c458:	89a3      	ldrh	r3, [r4, #12]
    c45a:	07db      	lsls	r3, r3, #31
    c45c:	d519      	bpl.n	c492 <__swbuf_r+0x92>
    c45e:	2e0a      	cmp	r6, #10
    c460:	d117      	bne.n	c492 <__swbuf_r+0x92>
    c462:	4621      	mov	r1, r4
    c464:	4628      	mov	r0, r5
    c466:	f000 f913 	bl	c690 <_fflush_r>
    c46a:	b190      	cbz	r0, c492 <__swbuf_r+0x92>
    c46c:	e00f      	b.n	c48e <__swbuf_r+0x8e>
    c46e:	4b0b      	ldr	r3, [pc, #44]	; (c49c <__swbuf_r+0x9c>)
    c470:	429c      	cmp	r4, r3
    c472:	d101      	bne.n	c478 <__swbuf_r+0x78>
    c474:	68ac      	ldr	r4, [r5, #8]
    c476:	e7d0      	b.n	c41a <__swbuf_r+0x1a>
    c478:	4b09      	ldr	r3, [pc, #36]	; (c4a0 <__swbuf_r+0xa0>)
    c47a:	429c      	cmp	r4, r3
    c47c:	bf08      	it	eq
    c47e:	68ec      	ldreq	r4, [r5, #12]
    c480:	e7cb      	b.n	c41a <__swbuf_r+0x1a>
    c482:	4621      	mov	r1, r4
    c484:	4628      	mov	r0, r5
    c486:	f000 f80d 	bl	c4a4 <__swsetup_r>
    c48a:	2800      	cmp	r0, #0
    c48c:	d0cc      	beq.n	c428 <__swbuf_r+0x28>
    c48e:	f04f 37ff 	mov.w	r7, #4294967295
    c492:	4638      	mov	r0, r7
    c494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c496:	bf00      	nop
    c498:	0000dfa8 	.word	0x0000dfa8
    c49c:	0000dfc8 	.word	0x0000dfc8
    c4a0:	0000df88 	.word	0x0000df88

0000c4a4 <__swsetup_r>:
    c4a4:	4b32      	ldr	r3, [pc, #200]	; (c570 <__swsetup_r+0xcc>)
    c4a6:	b570      	push	{r4, r5, r6, lr}
    c4a8:	681d      	ldr	r5, [r3, #0]
    c4aa:	4606      	mov	r6, r0
    c4ac:	460c      	mov	r4, r1
    c4ae:	b125      	cbz	r5, c4ba <__swsetup_r+0x16>
    c4b0:	69ab      	ldr	r3, [r5, #24]
    c4b2:	b913      	cbnz	r3, c4ba <__swsetup_r+0x16>
    c4b4:	4628      	mov	r0, r5
    c4b6:	f000 f955 	bl	c764 <__sinit>
    c4ba:	4b2e      	ldr	r3, [pc, #184]	; (c574 <__swsetup_r+0xd0>)
    c4bc:	429c      	cmp	r4, r3
    c4be:	d10f      	bne.n	c4e0 <__swsetup_r+0x3c>
    c4c0:	686c      	ldr	r4, [r5, #4]
    c4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c4c6:	b29a      	uxth	r2, r3
    c4c8:	0715      	lsls	r5, r2, #28
    c4ca:	d42c      	bmi.n	c526 <__swsetup_r+0x82>
    c4cc:	06d0      	lsls	r0, r2, #27
    c4ce:	d411      	bmi.n	c4f4 <__swsetup_r+0x50>
    c4d0:	2209      	movs	r2, #9
    c4d2:	6032      	str	r2, [r6, #0]
    c4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c4d8:	81a3      	strh	r3, [r4, #12]
    c4da:	f04f 30ff 	mov.w	r0, #4294967295
    c4de:	bd70      	pop	{r4, r5, r6, pc}
    c4e0:	4b25      	ldr	r3, [pc, #148]	; (c578 <__swsetup_r+0xd4>)
    c4e2:	429c      	cmp	r4, r3
    c4e4:	d101      	bne.n	c4ea <__swsetup_r+0x46>
    c4e6:	68ac      	ldr	r4, [r5, #8]
    c4e8:	e7eb      	b.n	c4c2 <__swsetup_r+0x1e>
    c4ea:	4b24      	ldr	r3, [pc, #144]	; (c57c <__swsetup_r+0xd8>)
    c4ec:	429c      	cmp	r4, r3
    c4ee:	bf08      	it	eq
    c4f0:	68ec      	ldreq	r4, [r5, #12]
    c4f2:	e7e6      	b.n	c4c2 <__swsetup_r+0x1e>
    c4f4:	0751      	lsls	r1, r2, #29
    c4f6:	d512      	bpl.n	c51e <__swsetup_r+0x7a>
    c4f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c4fa:	b141      	cbz	r1, c50e <__swsetup_r+0x6a>
    c4fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c500:	4299      	cmp	r1, r3
    c502:	d002      	beq.n	c50a <__swsetup_r+0x66>
    c504:	4630      	mov	r0, r6
    c506:	f7ff fd61 	bl	bfcc <_free_r>
    c50a:	2300      	movs	r3, #0
    c50c:	6363      	str	r3, [r4, #52]	; 0x34
    c50e:	89a3      	ldrh	r3, [r4, #12]
    c510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c514:	81a3      	strh	r3, [r4, #12]
    c516:	2300      	movs	r3, #0
    c518:	6063      	str	r3, [r4, #4]
    c51a:	6923      	ldr	r3, [r4, #16]
    c51c:	6023      	str	r3, [r4, #0]
    c51e:	89a3      	ldrh	r3, [r4, #12]
    c520:	f043 0308 	orr.w	r3, r3, #8
    c524:	81a3      	strh	r3, [r4, #12]
    c526:	6923      	ldr	r3, [r4, #16]
    c528:	b94b      	cbnz	r3, c53e <__swsetup_r+0x9a>
    c52a:	89a3      	ldrh	r3, [r4, #12]
    c52c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c534:	d003      	beq.n	c53e <__swsetup_r+0x9a>
    c536:	4621      	mov	r1, r4
    c538:	4630      	mov	r0, r6
    c53a:	f000 f9c1 	bl	c8c0 <__smakebuf_r>
    c53e:	89a2      	ldrh	r2, [r4, #12]
    c540:	f012 0301 	ands.w	r3, r2, #1
    c544:	d00c      	beq.n	c560 <__swsetup_r+0xbc>
    c546:	2300      	movs	r3, #0
    c548:	60a3      	str	r3, [r4, #8]
    c54a:	6963      	ldr	r3, [r4, #20]
    c54c:	425b      	negs	r3, r3
    c54e:	61a3      	str	r3, [r4, #24]
    c550:	6923      	ldr	r3, [r4, #16]
    c552:	b953      	cbnz	r3, c56a <__swsetup_r+0xc6>
    c554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c558:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    c55c:	d1ba      	bne.n	c4d4 <__swsetup_r+0x30>
    c55e:	bd70      	pop	{r4, r5, r6, pc}
    c560:	0792      	lsls	r2, r2, #30
    c562:	bf58      	it	pl
    c564:	6963      	ldrpl	r3, [r4, #20]
    c566:	60a3      	str	r3, [r4, #8]
    c568:	e7f2      	b.n	c550 <__swsetup_r+0xac>
    c56a:	2000      	movs	r0, #0
    c56c:	e7f7      	b.n	c55e <__swsetup_r+0xba>
    c56e:	bf00      	nop
    c570:	20000558 	.word	0x20000558
    c574:	0000dfa8 	.word	0x0000dfa8
    c578:	0000dfc8 	.word	0x0000dfc8
    c57c:	0000df88 	.word	0x0000df88

0000c580 <__sflush_r>:
    c580:	898a      	ldrh	r2, [r1, #12]
    c582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c586:	4605      	mov	r5, r0
    c588:	0710      	lsls	r0, r2, #28
    c58a:	460c      	mov	r4, r1
    c58c:	d45a      	bmi.n	c644 <__sflush_r+0xc4>
    c58e:	684b      	ldr	r3, [r1, #4]
    c590:	2b00      	cmp	r3, #0
    c592:	dc05      	bgt.n	c5a0 <__sflush_r+0x20>
    c594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c596:	2b00      	cmp	r3, #0
    c598:	dc02      	bgt.n	c5a0 <__sflush_r+0x20>
    c59a:	2000      	movs	r0, #0
    c59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c5a2:	2e00      	cmp	r6, #0
    c5a4:	d0f9      	beq.n	c59a <__sflush_r+0x1a>
    c5a6:	2300      	movs	r3, #0
    c5a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    c5ac:	682f      	ldr	r7, [r5, #0]
    c5ae:	602b      	str	r3, [r5, #0]
    c5b0:	d033      	beq.n	c61a <__sflush_r+0x9a>
    c5b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c5b4:	89a3      	ldrh	r3, [r4, #12]
    c5b6:	075a      	lsls	r2, r3, #29
    c5b8:	d505      	bpl.n	c5c6 <__sflush_r+0x46>
    c5ba:	6863      	ldr	r3, [r4, #4]
    c5bc:	1ac0      	subs	r0, r0, r3
    c5be:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c5c0:	b10b      	cbz	r3, c5c6 <__sflush_r+0x46>
    c5c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c5c4:	1ac0      	subs	r0, r0, r3
    c5c6:	2300      	movs	r3, #0
    c5c8:	4602      	mov	r2, r0
    c5ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c5cc:	6a21      	ldr	r1, [r4, #32]
    c5ce:	4628      	mov	r0, r5
    c5d0:	47b0      	blx	r6
    c5d2:	1c43      	adds	r3, r0, #1
    c5d4:	89a3      	ldrh	r3, [r4, #12]
    c5d6:	d106      	bne.n	c5e6 <__sflush_r+0x66>
    c5d8:	6829      	ldr	r1, [r5, #0]
    c5da:	291d      	cmp	r1, #29
    c5dc:	d84b      	bhi.n	c676 <__sflush_r+0xf6>
    c5de:	4a2b      	ldr	r2, [pc, #172]	; (c68c <__sflush_r+0x10c>)
    c5e0:	40ca      	lsrs	r2, r1
    c5e2:	07d6      	lsls	r6, r2, #31
    c5e4:	d547      	bpl.n	c676 <__sflush_r+0xf6>
    c5e6:	2200      	movs	r2, #0
    c5e8:	6062      	str	r2, [r4, #4]
    c5ea:	04d9      	lsls	r1, r3, #19
    c5ec:	6922      	ldr	r2, [r4, #16]
    c5ee:	6022      	str	r2, [r4, #0]
    c5f0:	d504      	bpl.n	c5fc <__sflush_r+0x7c>
    c5f2:	1c42      	adds	r2, r0, #1
    c5f4:	d101      	bne.n	c5fa <__sflush_r+0x7a>
    c5f6:	682b      	ldr	r3, [r5, #0]
    c5f8:	b903      	cbnz	r3, c5fc <__sflush_r+0x7c>
    c5fa:	6560      	str	r0, [r4, #84]	; 0x54
    c5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c5fe:	602f      	str	r7, [r5, #0]
    c600:	2900      	cmp	r1, #0
    c602:	d0ca      	beq.n	c59a <__sflush_r+0x1a>
    c604:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c608:	4299      	cmp	r1, r3
    c60a:	d002      	beq.n	c612 <__sflush_r+0x92>
    c60c:	4628      	mov	r0, r5
    c60e:	f7ff fcdd 	bl	bfcc <_free_r>
    c612:	2000      	movs	r0, #0
    c614:	6360      	str	r0, [r4, #52]	; 0x34
    c616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c61a:	6a21      	ldr	r1, [r4, #32]
    c61c:	2301      	movs	r3, #1
    c61e:	4628      	mov	r0, r5
    c620:	47b0      	blx	r6
    c622:	1c41      	adds	r1, r0, #1
    c624:	d1c6      	bne.n	c5b4 <__sflush_r+0x34>
    c626:	682b      	ldr	r3, [r5, #0]
    c628:	2b00      	cmp	r3, #0
    c62a:	d0c3      	beq.n	c5b4 <__sflush_r+0x34>
    c62c:	2b1d      	cmp	r3, #29
    c62e:	d001      	beq.n	c634 <__sflush_r+0xb4>
    c630:	2b16      	cmp	r3, #22
    c632:	d101      	bne.n	c638 <__sflush_r+0xb8>
    c634:	602f      	str	r7, [r5, #0]
    c636:	e7b0      	b.n	c59a <__sflush_r+0x1a>
    c638:	89a3      	ldrh	r3, [r4, #12]
    c63a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c63e:	81a3      	strh	r3, [r4, #12]
    c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c644:	690f      	ldr	r7, [r1, #16]
    c646:	2f00      	cmp	r7, #0
    c648:	d0a7      	beq.n	c59a <__sflush_r+0x1a>
    c64a:	0793      	lsls	r3, r2, #30
    c64c:	680e      	ldr	r6, [r1, #0]
    c64e:	bf08      	it	eq
    c650:	694b      	ldreq	r3, [r1, #20]
    c652:	600f      	str	r7, [r1, #0]
    c654:	bf18      	it	ne
    c656:	2300      	movne	r3, #0
    c658:	eba6 0807 	sub.w	r8, r6, r7
    c65c:	608b      	str	r3, [r1, #8]
    c65e:	f1b8 0f00 	cmp.w	r8, #0
    c662:	dd9a      	ble.n	c59a <__sflush_r+0x1a>
    c664:	4643      	mov	r3, r8
    c666:	463a      	mov	r2, r7
    c668:	6a21      	ldr	r1, [r4, #32]
    c66a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c66c:	4628      	mov	r0, r5
    c66e:	47b0      	blx	r6
    c670:	2800      	cmp	r0, #0
    c672:	dc07      	bgt.n	c684 <__sflush_r+0x104>
    c674:	89a3      	ldrh	r3, [r4, #12]
    c676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c67a:	81a3      	strh	r3, [r4, #12]
    c67c:	f04f 30ff 	mov.w	r0, #4294967295
    c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c684:	4407      	add	r7, r0
    c686:	eba8 0800 	sub.w	r8, r8, r0
    c68a:	e7e8      	b.n	c65e <__sflush_r+0xde>
    c68c:	20400001 	.word	0x20400001

0000c690 <_fflush_r>:
    c690:	b538      	push	{r3, r4, r5, lr}
    c692:	690b      	ldr	r3, [r1, #16]
    c694:	4605      	mov	r5, r0
    c696:	460c      	mov	r4, r1
    c698:	b1db      	cbz	r3, c6d2 <_fflush_r+0x42>
    c69a:	b118      	cbz	r0, c6a4 <_fflush_r+0x14>
    c69c:	6983      	ldr	r3, [r0, #24]
    c69e:	b90b      	cbnz	r3, c6a4 <_fflush_r+0x14>
    c6a0:	f000 f860 	bl	c764 <__sinit>
    c6a4:	4b0c      	ldr	r3, [pc, #48]	; (c6d8 <_fflush_r+0x48>)
    c6a6:	429c      	cmp	r4, r3
    c6a8:	d109      	bne.n	c6be <_fflush_r+0x2e>
    c6aa:	686c      	ldr	r4, [r5, #4]
    c6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c6b0:	b17b      	cbz	r3, c6d2 <_fflush_r+0x42>
    c6b2:	4621      	mov	r1, r4
    c6b4:	4628      	mov	r0, r5
    c6b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c6ba:	f7ff bf61 	b.w	c580 <__sflush_r>
    c6be:	4b07      	ldr	r3, [pc, #28]	; (c6dc <_fflush_r+0x4c>)
    c6c0:	429c      	cmp	r4, r3
    c6c2:	d101      	bne.n	c6c8 <_fflush_r+0x38>
    c6c4:	68ac      	ldr	r4, [r5, #8]
    c6c6:	e7f1      	b.n	c6ac <_fflush_r+0x1c>
    c6c8:	4b05      	ldr	r3, [pc, #20]	; (c6e0 <_fflush_r+0x50>)
    c6ca:	429c      	cmp	r4, r3
    c6cc:	bf08      	it	eq
    c6ce:	68ec      	ldreq	r4, [r5, #12]
    c6d0:	e7ec      	b.n	c6ac <_fflush_r+0x1c>
    c6d2:	2000      	movs	r0, #0
    c6d4:	bd38      	pop	{r3, r4, r5, pc}
    c6d6:	bf00      	nop
    c6d8:	0000dfa8 	.word	0x0000dfa8
    c6dc:	0000dfc8 	.word	0x0000dfc8
    c6e0:	0000df88 	.word	0x0000df88

0000c6e4 <_cleanup_r>:
    c6e4:	4901      	ldr	r1, [pc, #4]	; (c6ec <_cleanup_r+0x8>)
    c6e6:	f000 b8a9 	b.w	c83c <_fwalk_reent>
    c6ea:	bf00      	nop
    c6ec:	0000c691 	.word	0x0000c691

0000c6f0 <std.isra.0>:
    c6f0:	2300      	movs	r3, #0
    c6f2:	b510      	push	{r4, lr}
    c6f4:	4604      	mov	r4, r0
    c6f6:	6003      	str	r3, [r0, #0]
    c6f8:	6043      	str	r3, [r0, #4]
    c6fa:	6083      	str	r3, [r0, #8]
    c6fc:	8181      	strh	r1, [r0, #12]
    c6fe:	6643      	str	r3, [r0, #100]	; 0x64
    c700:	81c2      	strh	r2, [r0, #14]
    c702:	6103      	str	r3, [r0, #16]
    c704:	6143      	str	r3, [r0, #20]
    c706:	6183      	str	r3, [r0, #24]
    c708:	4619      	mov	r1, r3
    c70a:	2208      	movs	r2, #8
    c70c:	305c      	adds	r0, #92	; 0x5c
    c70e:	f7ff fc54 	bl	bfba <memset>
    c712:	4b05      	ldr	r3, [pc, #20]	; (c728 <std.isra.0+0x38>)
    c714:	6263      	str	r3, [r4, #36]	; 0x24
    c716:	4b05      	ldr	r3, [pc, #20]	; (c72c <std.isra.0+0x3c>)
    c718:	62a3      	str	r3, [r4, #40]	; 0x28
    c71a:	4b05      	ldr	r3, [pc, #20]	; (c730 <std.isra.0+0x40>)
    c71c:	62e3      	str	r3, [r4, #44]	; 0x2c
    c71e:	4b05      	ldr	r3, [pc, #20]	; (c734 <std.isra.0+0x44>)
    c720:	6224      	str	r4, [r4, #32]
    c722:	6323      	str	r3, [r4, #48]	; 0x30
    c724:	bd10      	pop	{r4, pc}
    c726:	bf00      	nop
    c728:	0000d18d 	.word	0x0000d18d
    c72c:	0000d1af 	.word	0x0000d1af
    c730:	0000d1e7 	.word	0x0000d1e7
    c734:	0000d20b 	.word	0x0000d20b

0000c738 <__sfmoreglue>:
    c738:	b570      	push	{r4, r5, r6, lr}
    c73a:	1e4a      	subs	r2, r1, #1
    c73c:	2568      	movs	r5, #104	; 0x68
    c73e:	4355      	muls	r5, r2
    c740:	460e      	mov	r6, r1
    c742:	f105 0174 	add.w	r1, r5, #116	; 0x74
    c746:	f7ff fc8f 	bl	c068 <_malloc_r>
    c74a:	4604      	mov	r4, r0
    c74c:	b140      	cbz	r0, c760 <__sfmoreglue+0x28>
    c74e:	2100      	movs	r1, #0
    c750:	e880 0042 	stmia.w	r0, {r1, r6}
    c754:	300c      	adds	r0, #12
    c756:	60a0      	str	r0, [r4, #8]
    c758:	f105 0268 	add.w	r2, r5, #104	; 0x68
    c75c:	f7ff fc2d 	bl	bfba <memset>
    c760:	4620      	mov	r0, r4
    c762:	bd70      	pop	{r4, r5, r6, pc}

0000c764 <__sinit>:
    c764:	6983      	ldr	r3, [r0, #24]
    c766:	b510      	push	{r4, lr}
    c768:	4604      	mov	r4, r0
    c76a:	bb33      	cbnz	r3, c7ba <__sinit+0x56>
    c76c:	6483      	str	r3, [r0, #72]	; 0x48
    c76e:	64c3      	str	r3, [r0, #76]	; 0x4c
    c770:	6503      	str	r3, [r0, #80]	; 0x50
    c772:	4b12      	ldr	r3, [pc, #72]	; (c7bc <__sinit+0x58>)
    c774:	4a12      	ldr	r2, [pc, #72]	; (c7c0 <__sinit+0x5c>)
    c776:	681b      	ldr	r3, [r3, #0]
    c778:	6282      	str	r2, [r0, #40]	; 0x28
    c77a:	4298      	cmp	r0, r3
    c77c:	bf04      	itt	eq
    c77e:	2301      	moveq	r3, #1
    c780:	6183      	streq	r3, [r0, #24]
    c782:	f000 f81f 	bl	c7c4 <__sfp>
    c786:	6060      	str	r0, [r4, #4]
    c788:	4620      	mov	r0, r4
    c78a:	f000 f81b 	bl	c7c4 <__sfp>
    c78e:	60a0      	str	r0, [r4, #8]
    c790:	4620      	mov	r0, r4
    c792:	f000 f817 	bl	c7c4 <__sfp>
    c796:	2200      	movs	r2, #0
    c798:	60e0      	str	r0, [r4, #12]
    c79a:	2104      	movs	r1, #4
    c79c:	6860      	ldr	r0, [r4, #4]
    c79e:	f7ff ffa7 	bl	c6f0 <std.isra.0>
    c7a2:	2201      	movs	r2, #1
    c7a4:	2109      	movs	r1, #9
    c7a6:	68a0      	ldr	r0, [r4, #8]
    c7a8:	f7ff ffa2 	bl	c6f0 <std.isra.0>
    c7ac:	2202      	movs	r2, #2
    c7ae:	2112      	movs	r1, #18
    c7b0:	68e0      	ldr	r0, [r4, #12]
    c7b2:	f7ff ff9d 	bl	c6f0 <std.isra.0>
    c7b6:	2301      	movs	r3, #1
    c7b8:	61a3      	str	r3, [r4, #24]
    c7ba:	bd10      	pop	{r4, pc}
    c7bc:	0000df84 	.word	0x0000df84
    c7c0:	0000c6e5 	.word	0x0000c6e5

0000c7c4 <__sfp>:
    c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7c6:	4b1c      	ldr	r3, [pc, #112]	; (c838 <__sfp+0x74>)
    c7c8:	681e      	ldr	r6, [r3, #0]
    c7ca:	69b3      	ldr	r3, [r6, #24]
    c7cc:	4607      	mov	r7, r0
    c7ce:	b913      	cbnz	r3, c7d6 <__sfp+0x12>
    c7d0:	4630      	mov	r0, r6
    c7d2:	f7ff ffc7 	bl	c764 <__sinit>
    c7d6:	3648      	adds	r6, #72	; 0x48
    c7d8:	68b4      	ldr	r4, [r6, #8]
    c7da:	6873      	ldr	r3, [r6, #4]
    c7dc:	3b01      	subs	r3, #1
    c7de:	d503      	bpl.n	c7e8 <__sfp+0x24>
    c7e0:	6833      	ldr	r3, [r6, #0]
    c7e2:	b133      	cbz	r3, c7f2 <__sfp+0x2e>
    c7e4:	6836      	ldr	r6, [r6, #0]
    c7e6:	e7f7      	b.n	c7d8 <__sfp+0x14>
    c7e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    c7ec:	b16d      	cbz	r5, c80a <__sfp+0x46>
    c7ee:	3468      	adds	r4, #104	; 0x68
    c7f0:	e7f4      	b.n	c7dc <__sfp+0x18>
    c7f2:	2104      	movs	r1, #4
    c7f4:	4638      	mov	r0, r7
    c7f6:	f7ff ff9f 	bl	c738 <__sfmoreglue>
    c7fa:	6030      	str	r0, [r6, #0]
    c7fc:	2800      	cmp	r0, #0
    c7fe:	d1f1      	bne.n	c7e4 <__sfp+0x20>
    c800:	230c      	movs	r3, #12
    c802:	603b      	str	r3, [r7, #0]
    c804:	4604      	mov	r4, r0
    c806:	4620      	mov	r0, r4
    c808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c80a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c80e:	81e3      	strh	r3, [r4, #14]
    c810:	2301      	movs	r3, #1
    c812:	81a3      	strh	r3, [r4, #12]
    c814:	6665      	str	r5, [r4, #100]	; 0x64
    c816:	6025      	str	r5, [r4, #0]
    c818:	60a5      	str	r5, [r4, #8]
    c81a:	6065      	str	r5, [r4, #4]
    c81c:	6125      	str	r5, [r4, #16]
    c81e:	6165      	str	r5, [r4, #20]
    c820:	61a5      	str	r5, [r4, #24]
    c822:	2208      	movs	r2, #8
    c824:	4629      	mov	r1, r5
    c826:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c82a:	f7ff fbc6 	bl	bfba <memset>
    c82e:	6365      	str	r5, [r4, #52]	; 0x34
    c830:	63a5      	str	r5, [r4, #56]	; 0x38
    c832:	64a5      	str	r5, [r4, #72]	; 0x48
    c834:	64e5      	str	r5, [r4, #76]	; 0x4c
    c836:	e7e6      	b.n	c806 <__sfp+0x42>
    c838:	0000df84 	.word	0x0000df84

0000c83c <_fwalk_reent>:
    c83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c840:	4680      	mov	r8, r0
    c842:	4689      	mov	r9, r1
    c844:	f100 0448 	add.w	r4, r0, #72	; 0x48
    c848:	2600      	movs	r6, #0
    c84a:	b914      	cbnz	r4, c852 <_fwalk_reent+0x16>
    c84c:	4630      	mov	r0, r6
    c84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c852:	68a5      	ldr	r5, [r4, #8]
    c854:	6867      	ldr	r7, [r4, #4]
    c856:	3f01      	subs	r7, #1
    c858:	d501      	bpl.n	c85e <_fwalk_reent+0x22>
    c85a:	6824      	ldr	r4, [r4, #0]
    c85c:	e7f5      	b.n	c84a <_fwalk_reent+0xe>
    c85e:	89ab      	ldrh	r3, [r5, #12]
    c860:	2b01      	cmp	r3, #1
    c862:	d907      	bls.n	c874 <_fwalk_reent+0x38>
    c864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c868:	3301      	adds	r3, #1
    c86a:	d003      	beq.n	c874 <_fwalk_reent+0x38>
    c86c:	4629      	mov	r1, r5
    c86e:	4640      	mov	r0, r8
    c870:	47c8      	blx	r9
    c872:	4306      	orrs	r6, r0
    c874:	3568      	adds	r5, #104	; 0x68
    c876:	e7ee      	b.n	c856 <_fwalk_reent+0x1a>

0000c878 <__swhatbuf_r>:
    c878:	b570      	push	{r4, r5, r6, lr}
    c87a:	460e      	mov	r6, r1
    c87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c880:	2900      	cmp	r1, #0
    c882:	b090      	sub	sp, #64	; 0x40
    c884:	4614      	mov	r4, r2
    c886:	461d      	mov	r5, r3
    c888:	da07      	bge.n	c89a <__swhatbuf_r+0x22>
    c88a:	2300      	movs	r3, #0
    c88c:	602b      	str	r3, [r5, #0]
    c88e:	89b3      	ldrh	r3, [r6, #12]
    c890:	061a      	lsls	r2, r3, #24
    c892:	d410      	bmi.n	c8b6 <__swhatbuf_r+0x3e>
    c894:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c898:	e00e      	b.n	c8b8 <__swhatbuf_r+0x40>
    c89a:	aa01      	add	r2, sp, #4
    c89c:	f000 fcdc 	bl	d258 <_fstat_r>
    c8a0:	2800      	cmp	r0, #0
    c8a2:	dbf2      	blt.n	c88a <__swhatbuf_r+0x12>
    c8a4:	9a02      	ldr	r2, [sp, #8]
    c8a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    c8aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    c8ae:	425a      	negs	r2, r3
    c8b0:	415a      	adcs	r2, r3
    c8b2:	602a      	str	r2, [r5, #0]
    c8b4:	e7ee      	b.n	c894 <__swhatbuf_r+0x1c>
    c8b6:	2340      	movs	r3, #64	; 0x40
    c8b8:	2000      	movs	r0, #0
    c8ba:	6023      	str	r3, [r4, #0]
    c8bc:	b010      	add	sp, #64	; 0x40
    c8be:	bd70      	pop	{r4, r5, r6, pc}

0000c8c0 <__smakebuf_r>:
    c8c0:	898b      	ldrh	r3, [r1, #12]
    c8c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c8c4:	079d      	lsls	r5, r3, #30
    c8c6:	4606      	mov	r6, r0
    c8c8:	460c      	mov	r4, r1
    c8ca:	d507      	bpl.n	c8dc <__smakebuf_r+0x1c>
    c8cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c8d0:	6023      	str	r3, [r4, #0]
    c8d2:	6123      	str	r3, [r4, #16]
    c8d4:	2301      	movs	r3, #1
    c8d6:	6163      	str	r3, [r4, #20]
    c8d8:	b002      	add	sp, #8
    c8da:	bd70      	pop	{r4, r5, r6, pc}
    c8dc:	ab01      	add	r3, sp, #4
    c8de:	466a      	mov	r2, sp
    c8e0:	f7ff ffca 	bl	c878 <__swhatbuf_r>
    c8e4:	9900      	ldr	r1, [sp, #0]
    c8e6:	4605      	mov	r5, r0
    c8e8:	4630      	mov	r0, r6
    c8ea:	f7ff fbbd 	bl	c068 <_malloc_r>
    c8ee:	b948      	cbnz	r0, c904 <__smakebuf_r+0x44>
    c8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c8f4:	059a      	lsls	r2, r3, #22
    c8f6:	d4ef      	bmi.n	c8d8 <__smakebuf_r+0x18>
    c8f8:	f023 0303 	bic.w	r3, r3, #3
    c8fc:	f043 0302 	orr.w	r3, r3, #2
    c900:	81a3      	strh	r3, [r4, #12]
    c902:	e7e3      	b.n	c8cc <__smakebuf_r+0xc>
    c904:	4b0d      	ldr	r3, [pc, #52]	; (c93c <__smakebuf_r+0x7c>)
    c906:	62b3      	str	r3, [r6, #40]	; 0x28
    c908:	89a3      	ldrh	r3, [r4, #12]
    c90a:	6020      	str	r0, [r4, #0]
    c90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c910:	81a3      	strh	r3, [r4, #12]
    c912:	9b00      	ldr	r3, [sp, #0]
    c914:	6163      	str	r3, [r4, #20]
    c916:	9b01      	ldr	r3, [sp, #4]
    c918:	6120      	str	r0, [r4, #16]
    c91a:	b15b      	cbz	r3, c934 <__smakebuf_r+0x74>
    c91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c920:	4630      	mov	r0, r6
    c922:	f000 fcab 	bl	d27c <_isatty_r>
    c926:	b128      	cbz	r0, c934 <__smakebuf_r+0x74>
    c928:	89a3      	ldrh	r3, [r4, #12]
    c92a:	f023 0303 	bic.w	r3, r3, #3
    c92e:	f043 0301 	orr.w	r3, r3, #1
    c932:	81a3      	strh	r3, [r4, #12]
    c934:	89a3      	ldrh	r3, [r4, #12]
    c936:	431d      	orrs	r5, r3
    c938:	81a5      	strh	r5, [r4, #12]
    c93a:	e7cd      	b.n	c8d8 <__smakebuf_r+0x18>
    c93c:	0000c6e5 	.word	0x0000c6e5

0000c940 <__malloc_lock>:
    c940:	4770      	bx	lr

0000c942 <__malloc_unlock>:
    c942:	4770      	bx	lr

0000c944 <__ssputs_r>:
    c944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c948:	688e      	ldr	r6, [r1, #8]
    c94a:	429e      	cmp	r6, r3
    c94c:	4682      	mov	sl, r0
    c94e:	460c      	mov	r4, r1
    c950:	4691      	mov	r9, r2
    c952:	4698      	mov	r8, r3
    c954:	d835      	bhi.n	c9c2 <__ssputs_r+0x7e>
    c956:	898a      	ldrh	r2, [r1, #12]
    c958:	f412 6f90 	tst.w	r2, #1152	; 0x480
    c95c:	d031      	beq.n	c9c2 <__ssputs_r+0x7e>
    c95e:	6825      	ldr	r5, [r4, #0]
    c960:	6909      	ldr	r1, [r1, #16]
    c962:	1a6f      	subs	r7, r5, r1
    c964:	6965      	ldr	r5, [r4, #20]
    c966:	2302      	movs	r3, #2
    c968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c96c:	fb95 f5f3 	sdiv	r5, r5, r3
    c970:	f108 0301 	add.w	r3, r8, #1
    c974:	443b      	add	r3, r7
    c976:	429d      	cmp	r5, r3
    c978:	bf38      	it	cc
    c97a:	461d      	movcc	r5, r3
    c97c:	0553      	lsls	r3, r2, #21
    c97e:	d531      	bpl.n	c9e4 <__ssputs_r+0xa0>
    c980:	4629      	mov	r1, r5
    c982:	f7ff fb71 	bl	c068 <_malloc_r>
    c986:	4606      	mov	r6, r0
    c988:	b950      	cbnz	r0, c9a0 <__ssputs_r+0x5c>
    c98a:	230c      	movs	r3, #12
    c98c:	f8ca 3000 	str.w	r3, [sl]
    c990:	89a3      	ldrh	r3, [r4, #12]
    c992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c996:	81a3      	strh	r3, [r4, #12]
    c998:	f04f 30ff 	mov.w	r0, #4294967295
    c99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9a0:	463a      	mov	r2, r7
    c9a2:	6921      	ldr	r1, [r4, #16]
    c9a4:	f7ff fafe 	bl	bfa4 <memcpy>
    c9a8:	89a3      	ldrh	r3, [r4, #12]
    c9aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    c9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c9b2:	81a3      	strh	r3, [r4, #12]
    c9b4:	6126      	str	r6, [r4, #16]
    c9b6:	6165      	str	r5, [r4, #20]
    c9b8:	443e      	add	r6, r7
    c9ba:	1bed      	subs	r5, r5, r7
    c9bc:	6026      	str	r6, [r4, #0]
    c9be:	60a5      	str	r5, [r4, #8]
    c9c0:	4646      	mov	r6, r8
    c9c2:	4546      	cmp	r6, r8
    c9c4:	bf28      	it	cs
    c9c6:	4646      	movcs	r6, r8
    c9c8:	4632      	mov	r2, r6
    c9ca:	4649      	mov	r1, r9
    c9cc:	6820      	ldr	r0, [r4, #0]
    c9ce:	f000 fcc7 	bl	d360 <memmove>
    c9d2:	68a3      	ldr	r3, [r4, #8]
    c9d4:	1b9b      	subs	r3, r3, r6
    c9d6:	60a3      	str	r3, [r4, #8]
    c9d8:	6823      	ldr	r3, [r4, #0]
    c9da:	441e      	add	r6, r3
    c9dc:	6026      	str	r6, [r4, #0]
    c9de:	2000      	movs	r0, #0
    c9e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9e4:	462a      	mov	r2, r5
    c9e6:	f000 fcd5 	bl	d394 <_realloc_r>
    c9ea:	4606      	mov	r6, r0
    c9ec:	2800      	cmp	r0, #0
    c9ee:	d1e1      	bne.n	c9b4 <__ssputs_r+0x70>
    c9f0:	6921      	ldr	r1, [r4, #16]
    c9f2:	4650      	mov	r0, sl
    c9f4:	f7ff faea 	bl	bfcc <_free_r>
    c9f8:	e7c7      	b.n	c98a <__ssputs_r+0x46>
	...

0000c9fc <_svfiprintf_r>:
    c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca00:	b09d      	sub	sp, #116	; 0x74
    ca02:	4680      	mov	r8, r0
    ca04:	9303      	str	r3, [sp, #12]
    ca06:	898b      	ldrh	r3, [r1, #12]
    ca08:	061c      	lsls	r4, r3, #24
    ca0a:	460d      	mov	r5, r1
    ca0c:	4616      	mov	r6, r2
    ca0e:	d50f      	bpl.n	ca30 <_svfiprintf_r+0x34>
    ca10:	690b      	ldr	r3, [r1, #16]
    ca12:	b96b      	cbnz	r3, ca30 <_svfiprintf_r+0x34>
    ca14:	2140      	movs	r1, #64	; 0x40
    ca16:	f7ff fb27 	bl	c068 <_malloc_r>
    ca1a:	6028      	str	r0, [r5, #0]
    ca1c:	6128      	str	r0, [r5, #16]
    ca1e:	b928      	cbnz	r0, ca2c <_svfiprintf_r+0x30>
    ca20:	230c      	movs	r3, #12
    ca22:	f8c8 3000 	str.w	r3, [r8]
    ca26:	f04f 30ff 	mov.w	r0, #4294967295
    ca2a:	e0c5      	b.n	cbb8 <_svfiprintf_r+0x1bc>
    ca2c:	2340      	movs	r3, #64	; 0x40
    ca2e:	616b      	str	r3, [r5, #20]
    ca30:	2300      	movs	r3, #0
    ca32:	9309      	str	r3, [sp, #36]	; 0x24
    ca34:	2320      	movs	r3, #32
    ca36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    ca3a:	2330      	movs	r3, #48	; 0x30
    ca3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    ca40:	f04f 0b01 	mov.w	fp, #1
    ca44:	4637      	mov	r7, r6
    ca46:	463c      	mov	r4, r7
    ca48:	f814 3b01 	ldrb.w	r3, [r4], #1
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	d13c      	bne.n	caca <_svfiprintf_r+0xce>
    ca50:	ebb7 0a06 	subs.w	sl, r7, r6
    ca54:	d00b      	beq.n	ca6e <_svfiprintf_r+0x72>
    ca56:	4653      	mov	r3, sl
    ca58:	4632      	mov	r2, r6
    ca5a:	4629      	mov	r1, r5
    ca5c:	4640      	mov	r0, r8
    ca5e:	f7ff ff71 	bl	c944 <__ssputs_r>
    ca62:	3001      	adds	r0, #1
    ca64:	f000 80a3 	beq.w	cbae <_svfiprintf_r+0x1b2>
    ca68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca6a:	4453      	add	r3, sl
    ca6c:	9309      	str	r3, [sp, #36]	; 0x24
    ca6e:	783b      	ldrb	r3, [r7, #0]
    ca70:	2b00      	cmp	r3, #0
    ca72:	f000 809c 	beq.w	cbae <_svfiprintf_r+0x1b2>
    ca76:	2300      	movs	r3, #0
    ca78:	f04f 32ff 	mov.w	r2, #4294967295
    ca7c:	9304      	str	r3, [sp, #16]
    ca7e:	9307      	str	r3, [sp, #28]
    ca80:	9205      	str	r2, [sp, #20]
    ca82:	9306      	str	r3, [sp, #24]
    ca84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    ca88:	931a      	str	r3, [sp, #104]	; 0x68
    ca8a:	2205      	movs	r2, #5
    ca8c:	7821      	ldrb	r1, [r4, #0]
    ca8e:	4850      	ldr	r0, [pc, #320]	; (cbd0 <_svfiprintf_r+0x1d4>)
    ca90:	f000 fc16 	bl	d2c0 <memchr>
    ca94:	1c67      	adds	r7, r4, #1
    ca96:	9b04      	ldr	r3, [sp, #16]
    ca98:	b9d8      	cbnz	r0, cad2 <_svfiprintf_r+0xd6>
    ca9a:	06d9      	lsls	r1, r3, #27
    ca9c:	bf44      	itt	mi
    ca9e:	2220      	movmi	r2, #32
    caa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    caa4:	071a      	lsls	r2, r3, #28
    caa6:	bf44      	itt	mi
    caa8:	222b      	movmi	r2, #43	; 0x2b
    caaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    caae:	7822      	ldrb	r2, [r4, #0]
    cab0:	2a2a      	cmp	r2, #42	; 0x2a
    cab2:	d016      	beq.n	cae2 <_svfiprintf_r+0xe6>
    cab4:	9a07      	ldr	r2, [sp, #28]
    cab6:	2100      	movs	r1, #0
    cab8:	200a      	movs	r0, #10
    caba:	4627      	mov	r7, r4
    cabc:	3401      	adds	r4, #1
    cabe:	783b      	ldrb	r3, [r7, #0]
    cac0:	3b30      	subs	r3, #48	; 0x30
    cac2:	2b09      	cmp	r3, #9
    cac4:	d951      	bls.n	cb6a <_svfiprintf_r+0x16e>
    cac6:	b1c9      	cbz	r1, cafc <_svfiprintf_r+0x100>
    cac8:	e011      	b.n	caee <_svfiprintf_r+0xf2>
    caca:	2b25      	cmp	r3, #37	; 0x25
    cacc:	d0c0      	beq.n	ca50 <_svfiprintf_r+0x54>
    cace:	4627      	mov	r7, r4
    cad0:	e7b9      	b.n	ca46 <_svfiprintf_r+0x4a>
    cad2:	4a3f      	ldr	r2, [pc, #252]	; (cbd0 <_svfiprintf_r+0x1d4>)
    cad4:	1a80      	subs	r0, r0, r2
    cad6:	fa0b f000 	lsl.w	r0, fp, r0
    cada:	4318      	orrs	r0, r3
    cadc:	9004      	str	r0, [sp, #16]
    cade:	463c      	mov	r4, r7
    cae0:	e7d3      	b.n	ca8a <_svfiprintf_r+0x8e>
    cae2:	9a03      	ldr	r2, [sp, #12]
    cae4:	1d11      	adds	r1, r2, #4
    cae6:	6812      	ldr	r2, [r2, #0]
    cae8:	9103      	str	r1, [sp, #12]
    caea:	2a00      	cmp	r2, #0
    caec:	db01      	blt.n	caf2 <_svfiprintf_r+0xf6>
    caee:	9207      	str	r2, [sp, #28]
    caf0:	e004      	b.n	cafc <_svfiprintf_r+0x100>
    caf2:	4252      	negs	r2, r2
    caf4:	f043 0302 	orr.w	r3, r3, #2
    caf8:	9207      	str	r2, [sp, #28]
    cafa:	9304      	str	r3, [sp, #16]
    cafc:	783b      	ldrb	r3, [r7, #0]
    cafe:	2b2e      	cmp	r3, #46	; 0x2e
    cb00:	d10e      	bne.n	cb20 <_svfiprintf_r+0x124>
    cb02:	787b      	ldrb	r3, [r7, #1]
    cb04:	2b2a      	cmp	r3, #42	; 0x2a
    cb06:	f107 0101 	add.w	r1, r7, #1
    cb0a:	d132      	bne.n	cb72 <_svfiprintf_r+0x176>
    cb0c:	9b03      	ldr	r3, [sp, #12]
    cb0e:	1d1a      	adds	r2, r3, #4
    cb10:	681b      	ldr	r3, [r3, #0]
    cb12:	9203      	str	r2, [sp, #12]
    cb14:	2b00      	cmp	r3, #0
    cb16:	bfb8      	it	lt
    cb18:	f04f 33ff 	movlt.w	r3, #4294967295
    cb1c:	3702      	adds	r7, #2
    cb1e:	9305      	str	r3, [sp, #20]
    cb20:	4c2c      	ldr	r4, [pc, #176]	; (cbd4 <_svfiprintf_r+0x1d8>)
    cb22:	7839      	ldrb	r1, [r7, #0]
    cb24:	2203      	movs	r2, #3
    cb26:	4620      	mov	r0, r4
    cb28:	f000 fbca 	bl	d2c0 <memchr>
    cb2c:	b138      	cbz	r0, cb3e <_svfiprintf_r+0x142>
    cb2e:	2340      	movs	r3, #64	; 0x40
    cb30:	1b00      	subs	r0, r0, r4
    cb32:	fa03 f000 	lsl.w	r0, r3, r0
    cb36:	9b04      	ldr	r3, [sp, #16]
    cb38:	4303      	orrs	r3, r0
    cb3a:	9304      	str	r3, [sp, #16]
    cb3c:	3701      	adds	r7, #1
    cb3e:	7839      	ldrb	r1, [r7, #0]
    cb40:	4825      	ldr	r0, [pc, #148]	; (cbd8 <_svfiprintf_r+0x1dc>)
    cb42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    cb46:	2206      	movs	r2, #6
    cb48:	1c7e      	adds	r6, r7, #1
    cb4a:	f000 fbb9 	bl	d2c0 <memchr>
    cb4e:	2800      	cmp	r0, #0
    cb50:	d035      	beq.n	cbbe <_svfiprintf_r+0x1c2>
    cb52:	4b22      	ldr	r3, [pc, #136]	; (cbdc <_svfiprintf_r+0x1e0>)
    cb54:	b9fb      	cbnz	r3, cb96 <_svfiprintf_r+0x19a>
    cb56:	9b03      	ldr	r3, [sp, #12]
    cb58:	3307      	adds	r3, #7
    cb5a:	f023 0307 	bic.w	r3, r3, #7
    cb5e:	3308      	adds	r3, #8
    cb60:	9303      	str	r3, [sp, #12]
    cb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb64:	444b      	add	r3, r9
    cb66:	9309      	str	r3, [sp, #36]	; 0x24
    cb68:	e76c      	b.n	ca44 <_svfiprintf_r+0x48>
    cb6a:	fb00 3202 	mla	r2, r0, r2, r3
    cb6e:	2101      	movs	r1, #1
    cb70:	e7a3      	b.n	caba <_svfiprintf_r+0xbe>
    cb72:	2300      	movs	r3, #0
    cb74:	9305      	str	r3, [sp, #20]
    cb76:	4618      	mov	r0, r3
    cb78:	240a      	movs	r4, #10
    cb7a:	460f      	mov	r7, r1
    cb7c:	3101      	adds	r1, #1
    cb7e:	783a      	ldrb	r2, [r7, #0]
    cb80:	3a30      	subs	r2, #48	; 0x30
    cb82:	2a09      	cmp	r2, #9
    cb84:	d903      	bls.n	cb8e <_svfiprintf_r+0x192>
    cb86:	2b00      	cmp	r3, #0
    cb88:	d0ca      	beq.n	cb20 <_svfiprintf_r+0x124>
    cb8a:	9005      	str	r0, [sp, #20]
    cb8c:	e7c8      	b.n	cb20 <_svfiprintf_r+0x124>
    cb8e:	fb04 2000 	mla	r0, r4, r0, r2
    cb92:	2301      	movs	r3, #1
    cb94:	e7f1      	b.n	cb7a <_svfiprintf_r+0x17e>
    cb96:	ab03      	add	r3, sp, #12
    cb98:	9300      	str	r3, [sp, #0]
    cb9a:	462a      	mov	r2, r5
    cb9c:	4b10      	ldr	r3, [pc, #64]	; (cbe0 <_svfiprintf_r+0x1e4>)
    cb9e:	a904      	add	r1, sp, #16
    cba0:	4640      	mov	r0, r8
    cba2:	f3af 8000 	nop.w
    cba6:	f1b0 3fff 	cmp.w	r0, #4294967295
    cbaa:	4681      	mov	r9, r0
    cbac:	d1d9      	bne.n	cb62 <_svfiprintf_r+0x166>
    cbae:	89ab      	ldrh	r3, [r5, #12]
    cbb0:	065b      	lsls	r3, r3, #25
    cbb2:	f53f af38 	bmi.w	ca26 <_svfiprintf_r+0x2a>
    cbb6:	9809      	ldr	r0, [sp, #36]	; 0x24
    cbb8:	b01d      	add	sp, #116	; 0x74
    cbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbbe:	ab03      	add	r3, sp, #12
    cbc0:	9300      	str	r3, [sp, #0]
    cbc2:	462a      	mov	r2, r5
    cbc4:	4b06      	ldr	r3, [pc, #24]	; (cbe0 <_svfiprintf_r+0x1e4>)
    cbc6:	a904      	add	r1, sp, #16
    cbc8:	4640      	mov	r0, r8
    cbca:	f000 f9bf 	bl	cf4c <_printf_i>
    cbce:	e7ea      	b.n	cba6 <_svfiprintf_r+0x1aa>
    cbd0:	0000dfe8 	.word	0x0000dfe8
    cbd4:	0000dfee 	.word	0x0000dfee
    cbd8:	0000dff2 	.word	0x0000dff2
    cbdc:	00000000 	.word	0x00000000
    cbe0:	0000c945 	.word	0x0000c945

0000cbe4 <__sfputc_r>:
    cbe4:	6893      	ldr	r3, [r2, #8]
    cbe6:	3b01      	subs	r3, #1
    cbe8:	2b00      	cmp	r3, #0
    cbea:	b410      	push	{r4}
    cbec:	6093      	str	r3, [r2, #8]
    cbee:	da08      	bge.n	cc02 <__sfputc_r+0x1e>
    cbf0:	6994      	ldr	r4, [r2, #24]
    cbf2:	42a3      	cmp	r3, r4
    cbf4:	db02      	blt.n	cbfc <__sfputc_r+0x18>
    cbf6:	b2cb      	uxtb	r3, r1
    cbf8:	2b0a      	cmp	r3, #10
    cbfa:	d102      	bne.n	cc02 <__sfputc_r+0x1e>
    cbfc:	bc10      	pop	{r4}
    cbfe:	f7ff bbff 	b.w	c400 <__swbuf_r>
    cc02:	6813      	ldr	r3, [r2, #0]
    cc04:	1c58      	adds	r0, r3, #1
    cc06:	6010      	str	r0, [r2, #0]
    cc08:	7019      	strb	r1, [r3, #0]
    cc0a:	b2c8      	uxtb	r0, r1
    cc0c:	bc10      	pop	{r4}
    cc0e:	4770      	bx	lr

0000cc10 <__sfputs_r>:
    cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc12:	4606      	mov	r6, r0
    cc14:	460f      	mov	r7, r1
    cc16:	4614      	mov	r4, r2
    cc18:	18d5      	adds	r5, r2, r3
    cc1a:	42ac      	cmp	r4, r5
    cc1c:	d101      	bne.n	cc22 <__sfputs_r+0x12>
    cc1e:	2000      	movs	r0, #0
    cc20:	e007      	b.n	cc32 <__sfputs_r+0x22>
    cc22:	463a      	mov	r2, r7
    cc24:	f814 1b01 	ldrb.w	r1, [r4], #1
    cc28:	4630      	mov	r0, r6
    cc2a:	f7ff ffdb 	bl	cbe4 <__sfputc_r>
    cc2e:	1c43      	adds	r3, r0, #1
    cc30:	d1f3      	bne.n	cc1a <__sfputs_r+0xa>
    cc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cc34 <_vfiprintf_r>:
    cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc38:	b09d      	sub	sp, #116	; 0x74
    cc3a:	460c      	mov	r4, r1
    cc3c:	4617      	mov	r7, r2
    cc3e:	9303      	str	r3, [sp, #12]
    cc40:	4606      	mov	r6, r0
    cc42:	b118      	cbz	r0, cc4c <_vfiprintf_r+0x18>
    cc44:	6983      	ldr	r3, [r0, #24]
    cc46:	b90b      	cbnz	r3, cc4c <_vfiprintf_r+0x18>
    cc48:	f7ff fd8c 	bl	c764 <__sinit>
    cc4c:	4b7c      	ldr	r3, [pc, #496]	; (ce40 <_vfiprintf_r+0x20c>)
    cc4e:	429c      	cmp	r4, r3
    cc50:	d157      	bne.n	cd02 <_vfiprintf_r+0xce>
    cc52:	6874      	ldr	r4, [r6, #4]
    cc54:	89a3      	ldrh	r3, [r4, #12]
    cc56:	0718      	lsls	r0, r3, #28
    cc58:	d55d      	bpl.n	cd16 <_vfiprintf_r+0xe2>
    cc5a:	6923      	ldr	r3, [r4, #16]
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d05a      	beq.n	cd16 <_vfiprintf_r+0xe2>
    cc60:	2300      	movs	r3, #0
    cc62:	9309      	str	r3, [sp, #36]	; 0x24
    cc64:	2320      	movs	r3, #32
    cc66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    cc6a:	2330      	movs	r3, #48	; 0x30
    cc6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    cc70:	f04f 0b01 	mov.w	fp, #1
    cc74:	46b8      	mov	r8, r7
    cc76:	4645      	mov	r5, r8
    cc78:	f815 3b01 	ldrb.w	r3, [r5], #1
    cc7c:	2b00      	cmp	r3, #0
    cc7e:	d155      	bne.n	cd2c <_vfiprintf_r+0xf8>
    cc80:	ebb8 0a07 	subs.w	sl, r8, r7
    cc84:	d00b      	beq.n	cc9e <_vfiprintf_r+0x6a>
    cc86:	4653      	mov	r3, sl
    cc88:	463a      	mov	r2, r7
    cc8a:	4621      	mov	r1, r4
    cc8c:	4630      	mov	r0, r6
    cc8e:	f7ff ffbf 	bl	cc10 <__sfputs_r>
    cc92:	3001      	adds	r0, #1
    cc94:	f000 80c4 	beq.w	ce20 <_vfiprintf_r+0x1ec>
    cc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc9a:	4453      	add	r3, sl
    cc9c:	9309      	str	r3, [sp, #36]	; 0x24
    cc9e:	f898 3000 	ldrb.w	r3, [r8]
    cca2:	2b00      	cmp	r3, #0
    cca4:	f000 80bc 	beq.w	ce20 <_vfiprintf_r+0x1ec>
    cca8:	2300      	movs	r3, #0
    ccaa:	f04f 32ff 	mov.w	r2, #4294967295
    ccae:	9304      	str	r3, [sp, #16]
    ccb0:	9307      	str	r3, [sp, #28]
    ccb2:	9205      	str	r2, [sp, #20]
    ccb4:	9306      	str	r3, [sp, #24]
    ccb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    ccba:	931a      	str	r3, [sp, #104]	; 0x68
    ccbc:	2205      	movs	r2, #5
    ccbe:	7829      	ldrb	r1, [r5, #0]
    ccc0:	4860      	ldr	r0, [pc, #384]	; (ce44 <_vfiprintf_r+0x210>)
    ccc2:	f000 fafd 	bl	d2c0 <memchr>
    ccc6:	f105 0801 	add.w	r8, r5, #1
    ccca:	9b04      	ldr	r3, [sp, #16]
    cccc:	2800      	cmp	r0, #0
    ccce:	d131      	bne.n	cd34 <_vfiprintf_r+0x100>
    ccd0:	06d9      	lsls	r1, r3, #27
    ccd2:	bf44      	itt	mi
    ccd4:	2220      	movmi	r2, #32
    ccd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    ccda:	071a      	lsls	r2, r3, #28
    ccdc:	bf44      	itt	mi
    ccde:	222b      	movmi	r2, #43	; 0x2b
    cce0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cce4:	782a      	ldrb	r2, [r5, #0]
    cce6:	2a2a      	cmp	r2, #42	; 0x2a
    cce8:	d02c      	beq.n	cd44 <_vfiprintf_r+0x110>
    ccea:	9a07      	ldr	r2, [sp, #28]
    ccec:	2100      	movs	r1, #0
    ccee:	200a      	movs	r0, #10
    ccf0:	46a8      	mov	r8, r5
    ccf2:	3501      	adds	r5, #1
    ccf4:	f898 3000 	ldrb.w	r3, [r8]
    ccf8:	3b30      	subs	r3, #48	; 0x30
    ccfa:	2b09      	cmp	r3, #9
    ccfc:	d96d      	bls.n	cdda <_vfiprintf_r+0x1a6>
    ccfe:	b371      	cbz	r1, cd5e <_vfiprintf_r+0x12a>
    cd00:	e026      	b.n	cd50 <_vfiprintf_r+0x11c>
    cd02:	4b51      	ldr	r3, [pc, #324]	; (ce48 <_vfiprintf_r+0x214>)
    cd04:	429c      	cmp	r4, r3
    cd06:	d101      	bne.n	cd0c <_vfiprintf_r+0xd8>
    cd08:	68b4      	ldr	r4, [r6, #8]
    cd0a:	e7a3      	b.n	cc54 <_vfiprintf_r+0x20>
    cd0c:	4b4f      	ldr	r3, [pc, #316]	; (ce4c <_vfiprintf_r+0x218>)
    cd0e:	429c      	cmp	r4, r3
    cd10:	bf08      	it	eq
    cd12:	68f4      	ldreq	r4, [r6, #12]
    cd14:	e79e      	b.n	cc54 <_vfiprintf_r+0x20>
    cd16:	4621      	mov	r1, r4
    cd18:	4630      	mov	r0, r6
    cd1a:	f7ff fbc3 	bl	c4a4 <__swsetup_r>
    cd1e:	2800      	cmp	r0, #0
    cd20:	d09e      	beq.n	cc60 <_vfiprintf_r+0x2c>
    cd22:	f04f 30ff 	mov.w	r0, #4294967295
    cd26:	b01d      	add	sp, #116	; 0x74
    cd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd2c:	2b25      	cmp	r3, #37	; 0x25
    cd2e:	d0a7      	beq.n	cc80 <_vfiprintf_r+0x4c>
    cd30:	46a8      	mov	r8, r5
    cd32:	e7a0      	b.n	cc76 <_vfiprintf_r+0x42>
    cd34:	4a43      	ldr	r2, [pc, #268]	; (ce44 <_vfiprintf_r+0x210>)
    cd36:	1a80      	subs	r0, r0, r2
    cd38:	fa0b f000 	lsl.w	r0, fp, r0
    cd3c:	4318      	orrs	r0, r3
    cd3e:	9004      	str	r0, [sp, #16]
    cd40:	4645      	mov	r5, r8
    cd42:	e7bb      	b.n	ccbc <_vfiprintf_r+0x88>
    cd44:	9a03      	ldr	r2, [sp, #12]
    cd46:	1d11      	adds	r1, r2, #4
    cd48:	6812      	ldr	r2, [r2, #0]
    cd4a:	9103      	str	r1, [sp, #12]
    cd4c:	2a00      	cmp	r2, #0
    cd4e:	db01      	blt.n	cd54 <_vfiprintf_r+0x120>
    cd50:	9207      	str	r2, [sp, #28]
    cd52:	e004      	b.n	cd5e <_vfiprintf_r+0x12a>
    cd54:	4252      	negs	r2, r2
    cd56:	f043 0302 	orr.w	r3, r3, #2
    cd5a:	9207      	str	r2, [sp, #28]
    cd5c:	9304      	str	r3, [sp, #16]
    cd5e:	f898 3000 	ldrb.w	r3, [r8]
    cd62:	2b2e      	cmp	r3, #46	; 0x2e
    cd64:	d110      	bne.n	cd88 <_vfiprintf_r+0x154>
    cd66:	f898 3001 	ldrb.w	r3, [r8, #1]
    cd6a:	2b2a      	cmp	r3, #42	; 0x2a
    cd6c:	f108 0101 	add.w	r1, r8, #1
    cd70:	d137      	bne.n	cde2 <_vfiprintf_r+0x1ae>
    cd72:	9b03      	ldr	r3, [sp, #12]
    cd74:	1d1a      	adds	r2, r3, #4
    cd76:	681b      	ldr	r3, [r3, #0]
    cd78:	9203      	str	r2, [sp, #12]
    cd7a:	2b00      	cmp	r3, #0
    cd7c:	bfb8      	it	lt
    cd7e:	f04f 33ff 	movlt.w	r3, #4294967295
    cd82:	f108 0802 	add.w	r8, r8, #2
    cd86:	9305      	str	r3, [sp, #20]
    cd88:	4d31      	ldr	r5, [pc, #196]	; (ce50 <_vfiprintf_r+0x21c>)
    cd8a:	f898 1000 	ldrb.w	r1, [r8]
    cd8e:	2203      	movs	r2, #3
    cd90:	4628      	mov	r0, r5
    cd92:	f000 fa95 	bl	d2c0 <memchr>
    cd96:	b140      	cbz	r0, cdaa <_vfiprintf_r+0x176>
    cd98:	2340      	movs	r3, #64	; 0x40
    cd9a:	1b40      	subs	r0, r0, r5
    cd9c:	fa03 f000 	lsl.w	r0, r3, r0
    cda0:	9b04      	ldr	r3, [sp, #16]
    cda2:	4303      	orrs	r3, r0
    cda4:	9304      	str	r3, [sp, #16]
    cda6:	f108 0801 	add.w	r8, r8, #1
    cdaa:	f898 1000 	ldrb.w	r1, [r8]
    cdae:	4829      	ldr	r0, [pc, #164]	; (ce54 <_vfiprintf_r+0x220>)
    cdb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    cdb4:	2206      	movs	r2, #6
    cdb6:	f108 0701 	add.w	r7, r8, #1
    cdba:	f000 fa81 	bl	d2c0 <memchr>
    cdbe:	2800      	cmp	r0, #0
    cdc0:	d034      	beq.n	ce2c <_vfiprintf_r+0x1f8>
    cdc2:	4b25      	ldr	r3, [pc, #148]	; (ce58 <_vfiprintf_r+0x224>)
    cdc4:	bb03      	cbnz	r3, ce08 <_vfiprintf_r+0x1d4>
    cdc6:	9b03      	ldr	r3, [sp, #12]
    cdc8:	3307      	adds	r3, #7
    cdca:	f023 0307 	bic.w	r3, r3, #7
    cdce:	3308      	adds	r3, #8
    cdd0:	9303      	str	r3, [sp, #12]
    cdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdd4:	444b      	add	r3, r9
    cdd6:	9309      	str	r3, [sp, #36]	; 0x24
    cdd8:	e74c      	b.n	cc74 <_vfiprintf_r+0x40>
    cdda:	fb00 3202 	mla	r2, r0, r2, r3
    cdde:	2101      	movs	r1, #1
    cde0:	e786      	b.n	ccf0 <_vfiprintf_r+0xbc>
    cde2:	2300      	movs	r3, #0
    cde4:	9305      	str	r3, [sp, #20]
    cde6:	4618      	mov	r0, r3
    cde8:	250a      	movs	r5, #10
    cdea:	4688      	mov	r8, r1
    cdec:	3101      	adds	r1, #1
    cdee:	f898 2000 	ldrb.w	r2, [r8]
    cdf2:	3a30      	subs	r2, #48	; 0x30
    cdf4:	2a09      	cmp	r2, #9
    cdf6:	d903      	bls.n	ce00 <_vfiprintf_r+0x1cc>
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d0c5      	beq.n	cd88 <_vfiprintf_r+0x154>
    cdfc:	9005      	str	r0, [sp, #20]
    cdfe:	e7c3      	b.n	cd88 <_vfiprintf_r+0x154>
    ce00:	fb05 2000 	mla	r0, r5, r0, r2
    ce04:	2301      	movs	r3, #1
    ce06:	e7f0      	b.n	cdea <_vfiprintf_r+0x1b6>
    ce08:	ab03      	add	r3, sp, #12
    ce0a:	9300      	str	r3, [sp, #0]
    ce0c:	4622      	mov	r2, r4
    ce0e:	4b13      	ldr	r3, [pc, #76]	; (ce5c <_vfiprintf_r+0x228>)
    ce10:	a904      	add	r1, sp, #16
    ce12:	4630      	mov	r0, r6
    ce14:	f3af 8000 	nop.w
    ce18:	f1b0 3fff 	cmp.w	r0, #4294967295
    ce1c:	4681      	mov	r9, r0
    ce1e:	d1d8      	bne.n	cdd2 <_vfiprintf_r+0x19e>
    ce20:	89a3      	ldrh	r3, [r4, #12]
    ce22:	065b      	lsls	r3, r3, #25
    ce24:	f53f af7d 	bmi.w	cd22 <_vfiprintf_r+0xee>
    ce28:	9809      	ldr	r0, [sp, #36]	; 0x24
    ce2a:	e77c      	b.n	cd26 <_vfiprintf_r+0xf2>
    ce2c:	ab03      	add	r3, sp, #12
    ce2e:	9300      	str	r3, [sp, #0]
    ce30:	4622      	mov	r2, r4
    ce32:	4b0a      	ldr	r3, [pc, #40]	; (ce5c <_vfiprintf_r+0x228>)
    ce34:	a904      	add	r1, sp, #16
    ce36:	4630      	mov	r0, r6
    ce38:	f000 f888 	bl	cf4c <_printf_i>
    ce3c:	e7ec      	b.n	ce18 <_vfiprintf_r+0x1e4>
    ce3e:	bf00      	nop
    ce40:	0000dfa8 	.word	0x0000dfa8
    ce44:	0000dfe8 	.word	0x0000dfe8
    ce48:	0000dfc8 	.word	0x0000dfc8
    ce4c:	0000df88 	.word	0x0000df88
    ce50:	0000dfee 	.word	0x0000dfee
    ce54:	0000dff2 	.word	0x0000dff2
    ce58:	00000000 	.word	0x00000000
    ce5c:	0000cc11 	.word	0x0000cc11

0000ce60 <_printf_common>:
    ce60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce64:	4691      	mov	r9, r2
    ce66:	461f      	mov	r7, r3
    ce68:	688a      	ldr	r2, [r1, #8]
    ce6a:	690b      	ldr	r3, [r1, #16]
    ce6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ce70:	4293      	cmp	r3, r2
    ce72:	bfb8      	it	lt
    ce74:	4613      	movlt	r3, r2
    ce76:	f8c9 3000 	str.w	r3, [r9]
    ce7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    ce7e:	4606      	mov	r6, r0
    ce80:	460c      	mov	r4, r1
    ce82:	b112      	cbz	r2, ce8a <_printf_common+0x2a>
    ce84:	3301      	adds	r3, #1
    ce86:	f8c9 3000 	str.w	r3, [r9]
    ce8a:	6823      	ldr	r3, [r4, #0]
    ce8c:	0699      	lsls	r1, r3, #26
    ce8e:	bf42      	ittt	mi
    ce90:	f8d9 3000 	ldrmi.w	r3, [r9]
    ce94:	3302      	addmi	r3, #2
    ce96:	f8c9 3000 	strmi.w	r3, [r9]
    ce9a:	6825      	ldr	r5, [r4, #0]
    ce9c:	f015 0506 	ands.w	r5, r5, #6
    cea0:	d107      	bne.n	ceb2 <_printf_common+0x52>
    cea2:	f104 0a19 	add.w	sl, r4, #25
    cea6:	68e3      	ldr	r3, [r4, #12]
    cea8:	f8d9 2000 	ldr.w	r2, [r9]
    ceac:	1a9b      	subs	r3, r3, r2
    ceae:	429d      	cmp	r5, r3
    ceb0:	db29      	blt.n	cf06 <_printf_common+0xa6>
    ceb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    ceb6:	6822      	ldr	r2, [r4, #0]
    ceb8:	3300      	adds	r3, #0
    ceba:	bf18      	it	ne
    cebc:	2301      	movne	r3, #1
    cebe:	0692      	lsls	r2, r2, #26
    cec0:	d42e      	bmi.n	cf20 <_printf_common+0xc0>
    cec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
    cec6:	4639      	mov	r1, r7
    cec8:	4630      	mov	r0, r6
    ceca:	47c0      	blx	r8
    cecc:	3001      	adds	r0, #1
    cece:	d021      	beq.n	cf14 <_printf_common+0xb4>
    ced0:	6823      	ldr	r3, [r4, #0]
    ced2:	68e5      	ldr	r5, [r4, #12]
    ced4:	f8d9 2000 	ldr.w	r2, [r9]
    ced8:	f003 0306 	and.w	r3, r3, #6
    cedc:	2b04      	cmp	r3, #4
    cede:	bf08      	it	eq
    cee0:	1aad      	subeq	r5, r5, r2
    cee2:	68a3      	ldr	r3, [r4, #8]
    cee4:	6922      	ldr	r2, [r4, #16]
    cee6:	bf0c      	ite	eq
    cee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    ceec:	2500      	movne	r5, #0
    ceee:	4293      	cmp	r3, r2
    cef0:	bfc4      	itt	gt
    cef2:	1a9b      	subgt	r3, r3, r2
    cef4:	18ed      	addgt	r5, r5, r3
    cef6:	f04f 0900 	mov.w	r9, #0
    cefa:	341a      	adds	r4, #26
    cefc:	454d      	cmp	r5, r9
    cefe:	d11b      	bne.n	cf38 <_printf_common+0xd8>
    cf00:	2000      	movs	r0, #0
    cf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf06:	2301      	movs	r3, #1
    cf08:	4652      	mov	r2, sl
    cf0a:	4639      	mov	r1, r7
    cf0c:	4630      	mov	r0, r6
    cf0e:	47c0      	blx	r8
    cf10:	3001      	adds	r0, #1
    cf12:	d103      	bne.n	cf1c <_printf_common+0xbc>
    cf14:	f04f 30ff 	mov.w	r0, #4294967295
    cf18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf1c:	3501      	adds	r5, #1
    cf1e:	e7c2      	b.n	cea6 <_printf_common+0x46>
    cf20:	18e1      	adds	r1, r4, r3
    cf22:	1c5a      	adds	r2, r3, #1
    cf24:	2030      	movs	r0, #48	; 0x30
    cf26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    cf2a:	4422      	add	r2, r4
    cf2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    cf30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    cf34:	3302      	adds	r3, #2
    cf36:	e7c4      	b.n	cec2 <_printf_common+0x62>
    cf38:	2301      	movs	r3, #1
    cf3a:	4622      	mov	r2, r4
    cf3c:	4639      	mov	r1, r7
    cf3e:	4630      	mov	r0, r6
    cf40:	47c0      	blx	r8
    cf42:	3001      	adds	r0, #1
    cf44:	d0e6      	beq.n	cf14 <_printf_common+0xb4>
    cf46:	f109 0901 	add.w	r9, r9, #1
    cf4a:	e7d7      	b.n	cefc <_printf_common+0x9c>

0000cf4c <_printf_i>:
    cf4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf50:	4617      	mov	r7, r2
    cf52:	7e0a      	ldrb	r2, [r1, #24]
    cf54:	b085      	sub	sp, #20
    cf56:	2a6e      	cmp	r2, #110	; 0x6e
    cf58:	4698      	mov	r8, r3
    cf5a:	4606      	mov	r6, r0
    cf5c:	460c      	mov	r4, r1
    cf5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cf60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    cf64:	f000 80bc 	beq.w	d0e0 <_printf_i+0x194>
    cf68:	d81a      	bhi.n	cfa0 <_printf_i+0x54>
    cf6a:	2a63      	cmp	r2, #99	; 0x63
    cf6c:	d02e      	beq.n	cfcc <_printf_i+0x80>
    cf6e:	d80a      	bhi.n	cf86 <_printf_i+0x3a>
    cf70:	2a00      	cmp	r2, #0
    cf72:	f000 80c8 	beq.w	d106 <_printf_i+0x1ba>
    cf76:	2a58      	cmp	r2, #88	; 0x58
    cf78:	f000 808a 	beq.w	d090 <_printf_i+0x144>
    cf7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    cf80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    cf84:	e02a      	b.n	cfdc <_printf_i+0x90>
    cf86:	2a64      	cmp	r2, #100	; 0x64
    cf88:	d001      	beq.n	cf8e <_printf_i+0x42>
    cf8a:	2a69      	cmp	r2, #105	; 0x69
    cf8c:	d1f6      	bne.n	cf7c <_printf_i+0x30>
    cf8e:	6821      	ldr	r1, [r4, #0]
    cf90:	681a      	ldr	r2, [r3, #0]
    cf92:	f011 0f80 	tst.w	r1, #128	; 0x80
    cf96:	d023      	beq.n	cfe0 <_printf_i+0x94>
    cf98:	1d11      	adds	r1, r2, #4
    cf9a:	6019      	str	r1, [r3, #0]
    cf9c:	6813      	ldr	r3, [r2, #0]
    cf9e:	e027      	b.n	cff0 <_printf_i+0xa4>
    cfa0:	2a73      	cmp	r2, #115	; 0x73
    cfa2:	f000 80b4 	beq.w	d10e <_printf_i+0x1c2>
    cfa6:	d808      	bhi.n	cfba <_printf_i+0x6e>
    cfa8:	2a6f      	cmp	r2, #111	; 0x6f
    cfaa:	d02a      	beq.n	d002 <_printf_i+0xb6>
    cfac:	2a70      	cmp	r2, #112	; 0x70
    cfae:	d1e5      	bne.n	cf7c <_printf_i+0x30>
    cfb0:	680a      	ldr	r2, [r1, #0]
    cfb2:	f042 0220 	orr.w	r2, r2, #32
    cfb6:	600a      	str	r2, [r1, #0]
    cfb8:	e003      	b.n	cfc2 <_printf_i+0x76>
    cfba:	2a75      	cmp	r2, #117	; 0x75
    cfbc:	d021      	beq.n	d002 <_printf_i+0xb6>
    cfbe:	2a78      	cmp	r2, #120	; 0x78
    cfc0:	d1dc      	bne.n	cf7c <_printf_i+0x30>
    cfc2:	2278      	movs	r2, #120	; 0x78
    cfc4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    cfc8:	496e      	ldr	r1, [pc, #440]	; (d184 <_printf_i+0x238>)
    cfca:	e064      	b.n	d096 <_printf_i+0x14a>
    cfcc:	681a      	ldr	r2, [r3, #0]
    cfce:	f101 0542 	add.w	r5, r1, #66	; 0x42
    cfd2:	1d11      	adds	r1, r2, #4
    cfd4:	6019      	str	r1, [r3, #0]
    cfd6:	6813      	ldr	r3, [r2, #0]
    cfd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    cfdc:	2301      	movs	r3, #1
    cfde:	e0a3      	b.n	d128 <_printf_i+0x1dc>
    cfe0:	f011 0f40 	tst.w	r1, #64	; 0x40
    cfe4:	f102 0104 	add.w	r1, r2, #4
    cfe8:	6019      	str	r1, [r3, #0]
    cfea:	d0d7      	beq.n	cf9c <_printf_i+0x50>
    cfec:	f9b2 3000 	ldrsh.w	r3, [r2]
    cff0:	2b00      	cmp	r3, #0
    cff2:	da03      	bge.n	cffc <_printf_i+0xb0>
    cff4:	222d      	movs	r2, #45	; 0x2d
    cff6:	425b      	negs	r3, r3
    cff8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    cffc:	4962      	ldr	r1, [pc, #392]	; (d188 <_printf_i+0x23c>)
    cffe:	220a      	movs	r2, #10
    d000:	e017      	b.n	d032 <_printf_i+0xe6>
    d002:	6820      	ldr	r0, [r4, #0]
    d004:	6819      	ldr	r1, [r3, #0]
    d006:	f010 0f80 	tst.w	r0, #128	; 0x80
    d00a:	d003      	beq.n	d014 <_printf_i+0xc8>
    d00c:	1d08      	adds	r0, r1, #4
    d00e:	6018      	str	r0, [r3, #0]
    d010:	680b      	ldr	r3, [r1, #0]
    d012:	e006      	b.n	d022 <_printf_i+0xd6>
    d014:	f010 0f40 	tst.w	r0, #64	; 0x40
    d018:	f101 0004 	add.w	r0, r1, #4
    d01c:	6018      	str	r0, [r3, #0]
    d01e:	d0f7      	beq.n	d010 <_printf_i+0xc4>
    d020:	880b      	ldrh	r3, [r1, #0]
    d022:	4959      	ldr	r1, [pc, #356]	; (d188 <_printf_i+0x23c>)
    d024:	2a6f      	cmp	r2, #111	; 0x6f
    d026:	bf14      	ite	ne
    d028:	220a      	movne	r2, #10
    d02a:	2208      	moveq	r2, #8
    d02c:	2000      	movs	r0, #0
    d02e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    d032:	6865      	ldr	r5, [r4, #4]
    d034:	60a5      	str	r5, [r4, #8]
    d036:	2d00      	cmp	r5, #0
    d038:	f2c0 809c 	blt.w	d174 <_printf_i+0x228>
    d03c:	6820      	ldr	r0, [r4, #0]
    d03e:	f020 0004 	bic.w	r0, r0, #4
    d042:	6020      	str	r0, [r4, #0]
    d044:	2b00      	cmp	r3, #0
    d046:	d13f      	bne.n	d0c8 <_printf_i+0x17c>
    d048:	2d00      	cmp	r5, #0
    d04a:	f040 8095 	bne.w	d178 <_printf_i+0x22c>
    d04e:	4675      	mov	r5, lr
    d050:	2a08      	cmp	r2, #8
    d052:	d10b      	bne.n	d06c <_printf_i+0x120>
    d054:	6823      	ldr	r3, [r4, #0]
    d056:	07da      	lsls	r2, r3, #31
    d058:	d508      	bpl.n	d06c <_printf_i+0x120>
    d05a:	6923      	ldr	r3, [r4, #16]
    d05c:	6862      	ldr	r2, [r4, #4]
    d05e:	429a      	cmp	r2, r3
    d060:	bfde      	ittt	le
    d062:	2330      	movle	r3, #48	; 0x30
    d064:	f805 3c01 	strble.w	r3, [r5, #-1]
    d068:	f105 35ff 	addle.w	r5, r5, #4294967295
    d06c:	ebae 0305 	sub.w	r3, lr, r5
    d070:	6123      	str	r3, [r4, #16]
    d072:	f8cd 8000 	str.w	r8, [sp]
    d076:	463b      	mov	r3, r7
    d078:	aa03      	add	r2, sp, #12
    d07a:	4621      	mov	r1, r4
    d07c:	4630      	mov	r0, r6
    d07e:	f7ff feef 	bl	ce60 <_printf_common>
    d082:	3001      	adds	r0, #1
    d084:	d155      	bne.n	d132 <_printf_i+0x1e6>
    d086:	f04f 30ff 	mov.w	r0, #4294967295
    d08a:	b005      	add	sp, #20
    d08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d090:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    d094:	493c      	ldr	r1, [pc, #240]	; (d188 <_printf_i+0x23c>)
    d096:	6822      	ldr	r2, [r4, #0]
    d098:	6818      	ldr	r0, [r3, #0]
    d09a:	f012 0f80 	tst.w	r2, #128	; 0x80
    d09e:	f100 0504 	add.w	r5, r0, #4
    d0a2:	601d      	str	r5, [r3, #0]
    d0a4:	d001      	beq.n	d0aa <_printf_i+0x15e>
    d0a6:	6803      	ldr	r3, [r0, #0]
    d0a8:	e002      	b.n	d0b0 <_printf_i+0x164>
    d0aa:	0655      	lsls	r5, r2, #25
    d0ac:	d5fb      	bpl.n	d0a6 <_printf_i+0x15a>
    d0ae:	8803      	ldrh	r3, [r0, #0]
    d0b0:	07d0      	lsls	r0, r2, #31
    d0b2:	bf44      	itt	mi
    d0b4:	f042 0220 	orrmi.w	r2, r2, #32
    d0b8:	6022      	strmi	r2, [r4, #0]
    d0ba:	b91b      	cbnz	r3, d0c4 <_printf_i+0x178>
    d0bc:	6822      	ldr	r2, [r4, #0]
    d0be:	f022 0220 	bic.w	r2, r2, #32
    d0c2:	6022      	str	r2, [r4, #0]
    d0c4:	2210      	movs	r2, #16
    d0c6:	e7b1      	b.n	d02c <_printf_i+0xe0>
    d0c8:	4675      	mov	r5, lr
    d0ca:	fbb3 f0f2 	udiv	r0, r3, r2
    d0ce:	fb02 3310 	mls	r3, r2, r0, r3
    d0d2:	5ccb      	ldrb	r3, [r1, r3]
    d0d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    d0d8:	4603      	mov	r3, r0
    d0da:	2800      	cmp	r0, #0
    d0dc:	d1f5      	bne.n	d0ca <_printf_i+0x17e>
    d0de:	e7b7      	b.n	d050 <_printf_i+0x104>
    d0e0:	6808      	ldr	r0, [r1, #0]
    d0e2:	681a      	ldr	r2, [r3, #0]
    d0e4:	6949      	ldr	r1, [r1, #20]
    d0e6:	f010 0f80 	tst.w	r0, #128	; 0x80
    d0ea:	d004      	beq.n	d0f6 <_printf_i+0x1aa>
    d0ec:	1d10      	adds	r0, r2, #4
    d0ee:	6018      	str	r0, [r3, #0]
    d0f0:	6813      	ldr	r3, [r2, #0]
    d0f2:	6019      	str	r1, [r3, #0]
    d0f4:	e007      	b.n	d106 <_printf_i+0x1ba>
    d0f6:	f010 0f40 	tst.w	r0, #64	; 0x40
    d0fa:	f102 0004 	add.w	r0, r2, #4
    d0fe:	6018      	str	r0, [r3, #0]
    d100:	6813      	ldr	r3, [r2, #0]
    d102:	d0f6      	beq.n	d0f2 <_printf_i+0x1a6>
    d104:	8019      	strh	r1, [r3, #0]
    d106:	2300      	movs	r3, #0
    d108:	6123      	str	r3, [r4, #16]
    d10a:	4675      	mov	r5, lr
    d10c:	e7b1      	b.n	d072 <_printf_i+0x126>
    d10e:	681a      	ldr	r2, [r3, #0]
    d110:	1d11      	adds	r1, r2, #4
    d112:	6019      	str	r1, [r3, #0]
    d114:	6815      	ldr	r5, [r2, #0]
    d116:	6862      	ldr	r2, [r4, #4]
    d118:	2100      	movs	r1, #0
    d11a:	4628      	mov	r0, r5
    d11c:	f000 f8d0 	bl	d2c0 <memchr>
    d120:	b108      	cbz	r0, d126 <_printf_i+0x1da>
    d122:	1b40      	subs	r0, r0, r5
    d124:	6060      	str	r0, [r4, #4]
    d126:	6863      	ldr	r3, [r4, #4]
    d128:	6123      	str	r3, [r4, #16]
    d12a:	2300      	movs	r3, #0
    d12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d130:	e79f      	b.n	d072 <_printf_i+0x126>
    d132:	6923      	ldr	r3, [r4, #16]
    d134:	462a      	mov	r2, r5
    d136:	4639      	mov	r1, r7
    d138:	4630      	mov	r0, r6
    d13a:	47c0      	blx	r8
    d13c:	3001      	adds	r0, #1
    d13e:	d0a2      	beq.n	d086 <_printf_i+0x13a>
    d140:	6823      	ldr	r3, [r4, #0]
    d142:	079b      	lsls	r3, r3, #30
    d144:	d507      	bpl.n	d156 <_printf_i+0x20a>
    d146:	2500      	movs	r5, #0
    d148:	f104 0919 	add.w	r9, r4, #25
    d14c:	68e3      	ldr	r3, [r4, #12]
    d14e:	9a03      	ldr	r2, [sp, #12]
    d150:	1a9b      	subs	r3, r3, r2
    d152:	429d      	cmp	r5, r3
    d154:	db05      	blt.n	d162 <_printf_i+0x216>
    d156:	68e0      	ldr	r0, [r4, #12]
    d158:	9b03      	ldr	r3, [sp, #12]
    d15a:	4298      	cmp	r0, r3
    d15c:	bfb8      	it	lt
    d15e:	4618      	movlt	r0, r3
    d160:	e793      	b.n	d08a <_printf_i+0x13e>
    d162:	2301      	movs	r3, #1
    d164:	464a      	mov	r2, r9
    d166:	4639      	mov	r1, r7
    d168:	4630      	mov	r0, r6
    d16a:	47c0      	blx	r8
    d16c:	3001      	adds	r0, #1
    d16e:	d08a      	beq.n	d086 <_printf_i+0x13a>
    d170:	3501      	adds	r5, #1
    d172:	e7eb      	b.n	d14c <_printf_i+0x200>
    d174:	2b00      	cmp	r3, #0
    d176:	d1a7      	bne.n	d0c8 <_printf_i+0x17c>
    d178:	780b      	ldrb	r3, [r1, #0]
    d17a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d17e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d182:	e765      	b.n	d050 <_printf_i+0x104>
    d184:	0000e00a 	.word	0x0000e00a
    d188:	0000dff9 	.word	0x0000dff9

0000d18c <__sread>:
    d18c:	b510      	push	{r4, lr}
    d18e:	460c      	mov	r4, r1
    d190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d194:	f000 f924 	bl	d3e0 <_read_r>
    d198:	2800      	cmp	r0, #0
    d19a:	bfab      	itete	ge
    d19c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    d19e:	89a3      	ldrhlt	r3, [r4, #12]
    d1a0:	181b      	addge	r3, r3, r0
    d1a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    d1a6:	bfac      	ite	ge
    d1a8:	6563      	strge	r3, [r4, #84]	; 0x54
    d1aa:	81a3      	strhlt	r3, [r4, #12]
    d1ac:	bd10      	pop	{r4, pc}

0000d1ae <__swrite>:
    d1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1b2:	461f      	mov	r7, r3
    d1b4:	898b      	ldrh	r3, [r1, #12]
    d1b6:	05db      	lsls	r3, r3, #23
    d1b8:	4605      	mov	r5, r0
    d1ba:	460c      	mov	r4, r1
    d1bc:	4616      	mov	r6, r2
    d1be:	d505      	bpl.n	d1cc <__swrite+0x1e>
    d1c0:	2302      	movs	r3, #2
    d1c2:	2200      	movs	r2, #0
    d1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d1c8:	f000 f868 	bl	d29c <_lseek_r>
    d1cc:	89a3      	ldrh	r3, [r4, #12]
    d1ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d1d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d1d6:	81a3      	strh	r3, [r4, #12]
    d1d8:	4632      	mov	r2, r6
    d1da:	463b      	mov	r3, r7
    d1dc:	4628      	mov	r0, r5
    d1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d1e2:	f000 b817 	b.w	d214 <_write_r>

0000d1e6 <__sseek>:
    d1e6:	b510      	push	{r4, lr}
    d1e8:	460c      	mov	r4, r1
    d1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d1ee:	f000 f855 	bl	d29c <_lseek_r>
    d1f2:	1c43      	adds	r3, r0, #1
    d1f4:	89a3      	ldrh	r3, [r4, #12]
    d1f6:	bf15      	itete	ne
    d1f8:	6560      	strne	r0, [r4, #84]	; 0x54
    d1fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    d1fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    d202:	81a3      	strheq	r3, [r4, #12]
    d204:	bf18      	it	ne
    d206:	81a3      	strhne	r3, [r4, #12]
    d208:	bd10      	pop	{r4, pc}

0000d20a <__sclose>:
    d20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d20e:	f000 b813 	b.w	d238 <_close_r>
	...

0000d214 <_write_r>:
    d214:	b538      	push	{r3, r4, r5, lr}
    d216:	4c07      	ldr	r4, [pc, #28]	; (d234 <_write_r+0x20>)
    d218:	4605      	mov	r5, r0
    d21a:	4608      	mov	r0, r1
    d21c:	4611      	mov	r1, r2
    d21e:	2200      	movs	r2, #0
    d220:	6022      	str	r2, [r4, #0]
    d222:	461a      	mov	r2, r3
    d224:	f7fd f852 	bl	a2cc <_write>
    d228:	1c43      	adds	r3, r0, #1
    d22a:	d102      	bne.n	d232 <_write_r+0x1e>
    d22c:	6823      	ldr	r3, [r4, #0]
    d22e:	b103      	cbz	r3, d232 <_write_r+0x1e>
    d230:	602b      	str	r3, [r5, #0]
    d232:	bd38      	pop	{r3, r4, r5, pc}
    d234:	20003bb8 	.word	0x20003bb8

0000d238 <_close_r>:
    d238:	b538      	push	{r3, r4, r5, lr}
    d23a:	4c06      	ldr	r4, [pc, #24]	; (d254 <_close_r+0x1c>)
    d23c:	2300      	movs	r3, #0
    d23e:	4605      	mov	r5, r0
    d240:	4608      	mov	r0, r1
    d242:	6023      	str	r3, [r4, #0]
    d244:	f7f8 fd62 	bl	5d0c <_close>
    d248:	1c43      	adds	r3, r0, #1
    d24a:	d102      	bne.n	d252 <_close_r+0x1a>
    d24c:	6823      	ldr	r3, [r4, #0]
    d24e:	b103      	cbz	r3, d252 <_close_r+0x1a>
    d250:	602b      	str	r3, [r5, #0]
    d252:	bd38      	pop	{r3, r4, r5, pc}
    d254:	20003bb8 	.word	0x20003bb8

0000d258 <_fstat_r>:
    d258:	b538      	push	{r3, r4, r5, lr}
    d25a:	4c07      	ldr	r4, [pc, #28]	; (d278 <_fstat_r+0x20>)
    d25c:	2300      	movs	r3, #0
    d25e:	4605      	mov	r5, r0
    d260:	4608      	mov	r0, r1
    d262:	4611      	mov	r1, r2
    d264:	6023      	str	r3, [r4, #0]
    d266:	f7f8 fd54 	bl	5d12 <_fstat>
    d26a:	1c43      	adds	r3, r0, #1
    d26c:	d102      	bne.n	d274 <_fstat_r+0x1c>
    d26e:	6823      	ldr	r3, [r4, #0]
    d270:	b103      	cbz	r3, d274 <_fstat_r+0x1c>
    d272:	602b      	str	r3, [r5, #0]
    d274:	bd38      	pop	{r3, r4, r5, pc}
    d276:	bf00      	nop
    d278:	20003bb8 	.word	0x20003bb8

0000d27c <_isatty_r>:
    d27c:	b538      	push	{r3, r4, r5, lr}
    d27e:	4c06      	ldr	r4, [pc, #24]	; (d298 <_isatty_r+0x1c>)
    d280:	2300      	movs	r3, #0
    d282:	4605      	mov	r5, r0
    d284:	4608      	mov	r0, r1
    d286:	6023      	str	r3, [r4, #0]
    d288:	f7f8 fd48 	bl	5d1c <_isatty>
    d28c:	1c43      	adds	r3, r0, #1
    d28e:	d102      	bne.n	d296 <_isatty_r+0x1a>
    d290:	6823      	ldr	r3, [r4, #0]
    d292:	b103      	cbz	r3, d296 <_isatty_r+0x1a>
    d294:	602b      	str	r3, [r5, #0]
    d296:	bd38      	pop	{r3, r4, r5, pc}
    d298:	20003bb8 	.word	0x20003bb8

0000d29c <_lseek_r>:
    d29c:	b538      	push	{r3, r4, r5, lr}
    d29e:	4c07      	ldr	r4, [pc, #28]	; (d2bc <_lseek_r+0x20>)
    d2a0:	4605      	mov	r5, r0
    d2a2:	4608      	mov	r0, r1
    d2a4:	4611      	mov	r1, r2
    d2a6:	2200      	movs	r2, #0
    d2a8:	6022      	str	r2, [r4, #0]
    d2aa:	461a      	mov	r2, r3
    d2ac:	f7f8 fd38 	bl	5d20 <_lseek>
    d2b0:	1c43      	adds	r3, r0, #1
    d2b2:	d102      	bne.n	d2ba <_lseek_r+0x1e>
    d2b4:	6823      	ldr	r3, [r4, #0]
    d2b6:	b103      	cbz	r3, d2ba <_lseek_r+0x1e>
    d2b8:	602b      	str	r3, [r5, #0]
    d2ba:	bd38      	pop	{r3, r4, r5, pc}
    d2bc:	20003bb8 	.word	0x20003bb8

0000d2c0 <memchr>:
    d2c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d2c4:	2a10      	cmp	r2, #16
    d2c6:	db2b      	blt.n	d320 <memchr+0x60>
    d2c8:	f010 0f07 	tst.w	r0, #7
    d2cc:	d008      	beq.n	d2e0 <memchr+0x20>
    d2ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    d2d2:	3a01      	subs	r2, #1
    d2d4:	428b      	cmp	r3, r1
    d2d6:	d02d      	beq.n	d334 <memchr+0x74>
    d2d8:	f010 0f07 	tst.w	r0, #7
    d2dc:	b342      	cbz	r2, d330 <memchr+0x70>
    d2de:	d1f6      	bne.n	d2ce <memchr+0xe>
    d2e0:	b4f0      	push	{r4, r5, r6, r7}
    d2e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d2e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d2ea:	f022 0407 	bic.w	r4, r2, #7
    d2ee:	f07f 0700 	mvns.w	r7, #0
    d2f2:	2300      	movs	r3, #0
    d2f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    d2f8:	3c08      	subs	r4, #8
    d2fa:	ea85 0501 	eor.w	r5, r5, r1
    d2fe:	ea86 0601 	eor.w	r6, r6, r1
    d302:	fa85 f547 	uadd8	r5, r5, r7
    d306:	faa3 f587 	sel	r5, r3, r7
    d30a:	fa86 f647 	uadd8	r6, r6, r7
    d30e:	faa5 f687 	sel	r6, r5, r7
    d312:	b98e      	cbnz	r6, d338 <memchr+0x78>
    d314:	d1ee      	bne.n	d2f4 <memchr+0x34>
    d316:	bcf0      	pop	{r4, r5, r6, r7}
    d318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d31c:	f002 0207 	and.w	r2, r2, #7
    d320:	b132      	cbz	r2, d330 <memchr+0x70>
    d322:	f810 3b01 	ldrb.w	r3, [r0], #1
    d326:	3a01      	subs	r2, #1
    d328:	ea83 0301 	eor.w	r3, r3, r1
    d32c:	b113      	cbz	r3, d334 <memchr+0x74>
    d32e:	d1f8      	bne.n	d322 <memchr+0x62>
    d330:	2000      	movs	r0, #0
    d332:	4770      	bx	lr
    d334:	3801      	subs	r0, #1
    d336:	4770      	bx	lr
    d338:	2d00      	cmp	r5, #0
    d33a:	bf06      	itte	eq
    d33c:	4635      	moveq	r5, r6
    d33e:	3803      	subeq	r0, #3
    d340:	3807      	subne	r0, #7
    d342:	f015 0f01 	tst.w	r5, #1
    d346:	d107      	bne.n	d358 <memchr+0x98>
    d348:	3001      	adds	r0, #1
    d34a:	f415 7f80 	tst.w	r5, #256	; 0x100
    d34e:	bf02      	ittt	eq
    d350:	3001      	addeq	r0, #1
    d352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    d356:	3001      	addeq	r0, #1
    d358:	bcf0      	pop	{r4, r5, r6, r7}
    d35a:	3801      	subs	r0, #1
    d35c:	4770      	bx	lr
    d35e:	bf00      	nop

0000d360 <memmove>:
    d360:	4288      	cmp	r0, r1
    d362:	b510      	push	{r4, lr}
    d364:	eb01 0302 	add.w	r3, r1, r2
    d368:	d803      	bhi.n	d372 <memmove+0x12>
    d36a:	1e42      	subs	r2, r0, #1
    d36c:	4299      	cmp	r1, r3
    d36e:	d10c      	bne.n	d38a <memmove+0x2a>
    d370:	bd10      	pop	{r4, pc}
    d372:	4298      	cmp	r0, r3
    d374:	d2f9      	bcs.n	d36a <memmove+0xa>
    d376:	1881      	adds	r1, r0, r2
    d378:	1ad2      	subs	r2, r2, r3
    d37a:	42d3      	cmn	r3, r2
    d37c:	d100      	bne.n	d380 <memmove+0x20>
    d37e:	bd10      	pop	{r4, pc}
    d380:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    d384:	f801 4d01 	strb.w	r4, [r1, #-1]!
    d388:	e7f7      	b.n	d37a <memmove+0x1a>
    d38a:	f811 4b01 	ldrb.w	r4, [r1], #1
    d38e:	f802 4f01 	strb.w	r4, [r2, #1]!
    d392:	e7eb      	b.n	d36c <memmove+0xc>

0000d394 <_realloc_r>:
    d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d396:	4607      	mov	r7, r0
    d398:	4614      	mov	r4, r2
    d39a:	460e      	mov	r6, r1
    d39c:	b921      	cbnz	r1, d3a8 <_realloc_r+0x14>
    d39e:	4611      	mov	r1, r2
    d3a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d3a4:	f7fe be60 	b.w	c068 <_malloc_r>
    d3a8:	b922      	cbnz	r2, d3b4 <_realloc_r+0x20>
    d3aa:	f7fe fe0f 	bl	bfcc <_free_r>
    d3ae:	4625      	mov	r5, r4
    d3b0:	4628      	mov	r0, r5
    d3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3b4:	f000 f826 	bl	d404 <_malloc_usable_size_r>
    d3b8:	4284      	cmp	r4, r0
    d3ba:	d90f      	bls.n	d3dc <_realloc_r+0x48>
    d3bc:	4621      	mov	r1, r4
    d3be:	4638      	mov	r0, r7
    d3c0:	f7fe fe52 	bl	c068 <_malloc_r>
    d3c4:	4605      	mov	r5, r0
    d3c6:	2800      	cmp	r0, #0
    d3c8:	d0f2      	beq.n	d3b0 <_realloc_r+0x1c>
    d3ca:	4631      	mov	r1, r6
    d3cc:	4622      	mov	r2, r4
    d3ce:	f7fe fde9 	bl	bfa4 <memcpy>
    d3d2:	4631      	mov	r1, r6
    d3d4:	4638      	mov	r0, r7
    d3d6:	f7fe fdf9 	bl	bfcc <_free_r>
    d3da:	e7e9      	b.n	d3b0 <_realloc_r+0x1c>
    d3dc:	4635      	mov	r5, r6
    d3de:	e7e7      	b.n	d3b0 <_realloc_r+0x1c>

0000d3e0 <_read_r>:
    d3e0:	b538      	push	{r3, r4, r5, lr}
    d3e2:	4c07      	ldr	r4, [pc, #28]	; (d400 <_read_r+0x20>)
    d3e4:	4605      	mov	r5, r0
    d3e6:	4608      	mov	r0, r1
    d3e8:	4611      	mov	r1, r2
    d3ea:	2200      	movs	r2, #0
    d3ec:	6022      	str	r2, [r4, #0]
    d3ee:	461a      	mov	r2, r3
    d3f0:	f7fc ff5c 	bl	a2ac <_read>
    d3f4:	1c43      	adds	r3, r0, #1
    d3f6:	d102      	bne.n	d3fe <_read_r+0x1e>
    d3f8:	6823      	ldr	r3, [r4, #0]
    d3fa:	b103      	cbz	r3, d3fe <_read_r+0x1e>
    d3fc:	602b      	str	r3, [r5, #0]
    d3fe:	bd38      	pop	{r3, r4, r5, pc}
    d400:	20003bb8 	.word	0x20003bb8

0000d404 <_malloc_usable_size_r>:
    d404:	f851 0c04 	ldr.w	r0, [r1, #-4]
    d408:	2800      	cmp	r0, #0
    d40a:	f1a0 0004 	sub.w	r0, r0, #4
    d40e:	bfbc      	itt	lt
    d410:	580b      	ldrlt	r3, [r1, r0]
    d412:	18c0      	addlt	r0, r0, r3
    d414:	4770      	bx	lr
    d416:	0000      	movs	r0, r0
    d418:	682f2e2e 	.word	0x682f2e2e
    d41c:	692f6c61 	.word	0x692f6c61
    d420:	756c636e 	.word	0x756c636e
    d424:	682f6564 	.word	0x682f6564
    d428:	775f6c61 	.word	0x775f6c61
    d42c:	682e7464 	.word	0x682e7464
    d430:	00000000 	.word	0x00000000
    d434:	4952475b 	.word	0x4952475b
    d438:	25205d44 	.word	0x25205d44
    d43c:	25206433 	.word	0x25206433
    d440:	25206434 	.word	0x25206434
    d444:	25206434 	.word	0x25206434
    d448:	4d5b2064 	.word	0x4d5b2064
    d44c:	5d494449 	.word	0x5d494449
    d450:	3a684320 	.word	0x3a684320
    d454:	20642520 	.word	0x20642520
    d458:	646d4320 	.word	0x646d4320
    d45c:	6425203a 	.word	0x6425203a
    d460:	61502020 	.word	0x61502020
    d464:	316d6172 	.word	0x316d6172
    d468:	6425203a 	.word	0x6425203a
    d46c:	61502020 	.word	0x61502020
    d470:	326d6172 	.word	0x326d6172
    d474:	6425203a 	.word	0x6425203a
    d478:	0000000a 	.word	0x0000000a
    d47c:	4952475b 	.word	0x4952475b
    d480:	25205d44 	.word	0x25205d44
    d484:	25206433 	.word	0x25206433
    d488:	25206434 	.word	0x25206434
    d48c:	25206434 	.word	0x25206434
    d490:	4b5b2064 	.word	0x4b5b2064
    d494:	4f425945 	.word	0x4f425945
    d498:	5d445241 	.word	0x5d445241
    d49c:	79654b20 	.word	0x79654b20
    d4a0:	6425203a 	.word	0x6425203a
    d4a4:	646f4d20 	.word	0x646f4d20
    d4a8:	6425203a 	.word	0x6425203a
    d4ac:	646d4320 	.word	0x646d4320
    d4b0:	6425203a 	.word	0x6425203a
    d4b4:	4357480a 	.word	0x4357480a
    d4b8:	203a4746 	.word	0x203a4746
    d4bc:	78383025 	.word	0x78383025
    d4c0:	0000000a 	.word	0x0000000a
    d4c4:	4952475b 	.word	0x4952475b
    d4c8:	25205d44 	.word	0x25205d44
    d4cc:	25206433 	.word	0x25206433
    d4d0:	25206434 	.word	0x25206434
    d4d4:	25206434 	.word	0x25206434
    d4d8:	535b2064 	.word	0x535b2064
    d4dc:	205d5359 	.word	0x205d5359
    d4e0:	20643325 	.word	0x20643325
    d4e4:	20643325 	.word	0x20643325
    d4e8:	0a643325 	.word	0x0a643325
    d4ec:	00000000 	.word	0x00000000
    d4f0:	7974227b 	.word	0x7974227b
    d4f4:	3a226570 	.word	0x3a226570
    d4f8:	41454822 	.word	0x41454822
    d4fc:	45425452 	.word	0x45425452
    d500:	2c225441 	.word	0x2c225441
    d504:	61642220 	.word	0x61642220
    d508:	3a226174 	.word	0x3a226174
    d50c:	25225b20 	.word	0x25225b20
    d510:	202c2264 	.word	0x202c2264
    d514:	22642522 	.word	0x22642522
    d518:	2522202c 	.word	0x2522202c
    d51c:	7d5d2264 	.word	0x7d5d2264
    d520:	00000a0d 	.word	0x00000a0d
    d524:	4b4e555b 	.word	0x4b4e555b
    d528:	4e574f4e 	.word	0x4e574f4e
    d52c:	3e2d205d 	.word	0x3e2d205d
    d530:	6f725020 	.word	0x6f725020
    d534:	6f636f74 	.word	0x6f636f74
    d538:	25203a6c 	.word	0x25203a6c
    d53c:	00000a64 	.word	0x00000a64
    d540:	0f0e0d0c 	.word	0x0f0e0d0c
    d544:	0b0a0908 	.word	0x0b0a0908
    d548:	07060504 	.word	0x07060504
    d54c:	03020100 	.word	0x03020100
    d550:	30256325 	.word	0x30256325
    d554:	30257832 	.word	0x30257832
    d558:	30257832 	.word	0x30257832
    d55c:	30257832 	.word	0x30257832
    d560:	30257832 	.word	0x30257832
    d564:	63257832 	.word	0x63257832
    d568:	30256325 	.word	0x30256325
    d56c:	30257832 	.word	0x30257832
    d570:	30257832 	.word	0x30257832
    d574:	30257832 	.word	0x30257832
    d578:	30257832 	.word	0x30257832
    d57c:	63257832 	.word	0x63257832
    d580:	00000000 	.word	0x00000000
    d584:	78383025 	.word	0x78383025
    d588:	00000000 	.word	0x00000000
    d58c:	30256325 	.word	0x30256325
    d590:	30257832 	.word	0x30257832
    d594:	30257832 	.word	0x30257832
    d598:	30257832 	.word	0x30257832
    d59c:	63257832 	.word	0x63257832
    d5a0:	00000000 	.word	0x00000000
    d5a4:	63256325 	.word	0x63256325
    d5a8:	63256325 	.word	0x63256325
    d5ac:	78383025 	.word	0x78383025
    d5b0:	30306325 	.word	0x30306325
    d5b4:	0000000a 	.word	0x0000000a
    d5b8:	63256325 	.word	0x63256325
    d5bc:	78323025 	.word	0x78323025
    d5c0:	78323025 	.word	0x78323025
    d5c4:	78323025 	.word	0x78323025
    d5c8:	78323025 	.word	0x78323025
    d5cc:	78323025 	.word	0x78323025
    d5d0:	00006325 	.word	0x00006325
    d5d4:	78323025 	.word	0x78323025
    d5d8:	00000000 	.word	0x00000000
    d5dc:	000a3030 	.word	0x000a3030
    d5e0:	682f2e2e 	.word	0x682f2e2e
    d5e4:	732f6c61 	.word	0x732f6c61
    d5e8:	682f6372 	.word	0x682f6372
    d5ec:	615f6c61 	.word	0x615f6c61
    d5f0:	615f6364 	.word	0x615f6364
    d5f4:	636e7973 	.word	0x636e7973
    d5f8:	0000632e 	.word	0x0000632e
    d5fc:	682f2e2e 	.word	0x682f2e2e
    d600:	732f6c61 	.word	0x732f6c61
    d604:	682f6372 	.word	0x682f6372
    d608:	635f6c61 	.word	0x635f6c61
    d60c:	735f6372 	.word	0x735f6372
    d610:	2e636e79 	.word	0x2e636e79
    d614:	00000063 	.word	0x00000063
    d618:	682f2e2e 	.word	0x682f2e2e
    d61c:	732f6c61 	.word	0x732f6c61
    d620:	682f6372 	.word	0x682f6372
    d624:	665f6c61 	.word	0x665f6c61
    d628:	6873616c 	.word	0x6873616c
    d62c:	0000632e 	.word	0x0000632e
    d630:	682f2e2e 	.word	0x682f2e2e
    d634:	732f6c61 	.word	0x732f6c61
    d638:	682f6372 	.word	0x682f6372
    d63c:	695f6c61 	.word	0x695f6c61
    d640:	6d5f6332 	.word	0x6d5f6332
    d644:	7973615f 	.word	0x7973615f
    d648:	632e636e 	.word	0x632e636e
    d64c:	00000000 	.word	0x00000000
    d650:	682f2e2e 	.word	0x682f2e2e
    d654:	732f6c61 	.word	0x732f6c61
    d658:	682f6372 	.word	0x682f6372
    d65c:	695f6c61 	.word	0x695f6c61
    d660:	00632e6f 	.word	0x00632e6f
    d664:	682f2e2e 	.word	0x682f2e2e
    d668:	732f6c61 	.word	0x732f6c61
    d66c:	682f6372 	.word	0x682f6372
    d670:	715f6c61 	.word	0x715f6c61
    d674:	5f697073 	.word	0x5f697073
    d678:	2e616d64 	.word	0x2e616d64
    d67c:	00000063 	.word	0x00000063
    d680:	682f2e2e 	.word	0x682f2e2e
    d684:	732f6c61 	.word	0x732f6c61
    d688:	682f6372 	.word	0x682f6372
    d68c:	735f6c61 	.word	0x735f6c61
    d690:	6d5f6970 	.word	0x6d5f6970
    d694:	7973615f 	.word	0x7973615f
    d698:	632e636e 	.word	0x632e636e
    d69c:	00000000 	.word	0x00000000
    d6a0:	682f2e2e 	.word	0x682f2e2e
    d6a4:	732f6c61 	.word	0x732f6c61
    d6a8:	682f6372 	.word	0x682f6372
    d6ac:	735f6c61 	.word	0x735f6c61
    d6b0:	6d5f6970 	.word	0x6d5f6970
    d6b4:	616d645f 	.word	0x616d645f
    d6b8:	0000632e 	.word	0x0000632e
    d6bc:	682f2e2e 	.word	0x682f2e2e
    d6c0:	732f6c61 	.word	0x732f6c61
    d6c4:	682f6372 	.word	0x682f6372
    d6c8:	745f6c61 	.word	0x745f6c61
    d6cc:	72656d69 	.word	0x72656d69
    d6d0:	0000632e 	.word	0x0000632e
    d6d4:	682f2e2e 	.word	0x682f2e2e
    d6d8:	732f6c61 	.word	0x732f6c61
    d6dc:	682f6372 	.word	0x682f6372
    d6e0:	755f6c61 	.word	0x755f6c61
    d6e4:	74726173 	.word	0x74726173
    d6e8:	7973615f 	.word	0x7973615f
    d6ec:	632e636e 	.word	0x632e636e
    d6f0:	00000000 	.word	0x00000000
    d6f4:	682f2e2e 	.word	0x682f2e2e
    d6f8:	732f6c61 	.word	0x732f6c61
    d6fc:	682f6372 	.word	0x682f6372
    d700:	755f6c61 	.word	0x755f6c61
    d704:	74726173 	.word	0x74726173
    d708:	6e79735f 	.word	0x6e79735f
    d70c:	00632e63 	.word	0x00632e63
    d710:	682f2e2e 	.word	0x682f2e2e
    d714:	752f6c61 	.word	0x752f6c61
    d718:	736c6974 	.word	0x736c6974
    d71c:	6372732f 	.word	0x6372732f
    d720:	6974752f 	.word	0x6974752f
    d724:	6c5f736c 	.word	0x6c5f736c
    d728:	2e747369 	.word	0x2e747369
    d72c:	00000063 	.word	0x00000063
    d730:	682f2e2e 	.word	0x682f2e2e
    d734:	752f6c61 	.word	0x752f6c61
    d738:	736c6974 	.word	0x736c6974
    d73c:	6372732f 	.word	0x6372732f
    d740:	6974752f 	.word	0x6974752f
    d744:	725f736c 	.word	0x725f736c
    d748:	62676e69 	.word	0x62676e69
    d74c:	65666675 	.word	0x65666675
    d750:	00632e72 	.word	0x00632e72

0000d754 <_adcs>:
    d754:	01000000 0003000c 00041807 00000000     ................
    d764:	0014080b 00010000 000c0100 18040003     ................
    d774:	00000004 080b0000 00000014 682f2e2e     ............../h
    d784:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    d794:	00000000                                ....

0000d798 <_cfgs>:
    d798:	00200600 08068000 00200400 08068000     .. ....... .....
    d7a8:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    d7c8:	00200b00 14000003 00200a00 08000002     .. ....... .....
    d7d8:	00201300 14000003 00000000 00000000     .. .............
	...
    d888:	00005400 1c000000 00005300 0c000000     .T.......S......

0000d898 <user_mux_confs>:
	...
    d8c4:	04030201 04030201 00000000 00000000     ................
	...

0000d8dc <channel_confs>:
    d8dc:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000d91c <interrupt_cfg>:
    d91c:	00000002 00000002 00000002 00000002     ................
	...
    d99c:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    d9ac:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    d9bc:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    d9cc:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    d9dc:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    d9ec:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    d9fc:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000da0c <_usarts>:
    da0c:	00000000 40100004 00030000 00700002     .......@......p.
    da1c:	0000aaaa 00000000 00000001 40100004     ...............@
    da2c:	00030000 00700002 0000aaaa 00000000     ......p.........
    da3c:	00000002 40100004 00030000 00700002     .......@......p.
    da4c:	00005555 00000000 00000004 40100004     UU.............@
    da5c:	00030000 00700002 0000aaaa 00000000     ......p.........
    da6c:	00000006 40100004 00030000 00700002     .......@......p.
    da7c:	0000aaaa 00000000                       ........

0000da84 <_i2cms>:
    da84:	00000005 00200014 00000100 0000e6e5     ...... .........
    da94:	00d70000 02dc6c00                       .....l..

0000da9c <sercomspi_regs>:
    da9c:	3020000c 00020000 00000000 01ff0005     .. 0............
    daac:	20000c03 00000000 00000000 ff000600     ... ............
    dabc:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    dacc:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    dadc:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    daec:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000dafc <_tcs>:
    dafc:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    db0c:	00000000 006c0001 00000308 00000021     ......l.....!...
    db1c:	00003a98 00000000 006d0002 00000308     .:........m.....
    db2c:	00000021 00003a98 00000000 006e0003     !....:........n.
    db3c:	00000308 00000021 00003a98 00000000     ....!....:......
    db4c:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    db5c:	0000632e                                .c..

0000db60 <_usb_ep_cfgs>:
    db60:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    db78:	20000d20 00000000 00000008 20000ce0      .. ........... 
    db88:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    dba0:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    dbb0:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    dbc0:	7974227b 3a226570 524f5022 202c2254     {"type":"PORT", 
    dbd0:	74616422 203a2261 6954225b 756f656d     "data": ["Timeou
    dbe0:	44203a74 6f637369 63656e6e 7d5d2274     t: Disconnect"]}
    dbf0:	0000000d 7974227b 3a226570 52524522     ....{"type":"ERR
    dc00:	2c22524f 61642220 3a226174 42225b20     OR", "data": ["B
    dc10:	65666675 764f2072 75727265 7d5d226e     uffer Overrun"]}
    dc20:	0000000d 7974227b 3a226570 41525422     ....{"type":"TRA
    dc30:	202c2250 74616422 203a2261 5254225b     P", "data": ["TR
    dc40:	22315041 000d7d5d 7974227b 3a226570     AP1"]}..{"type":
    dc50:	41525422 202c2250 74616422 203a2261     "TRAP", "data": 
    dc60:	5254225b 22325041 000d7d5d 7974227b     ["TRAP2"]}..{"ty
    dc70:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    dc80:	203a2261 6544225b 65646f63 0d7d5d22     a": ["Decode"]}.
    dc90:	00000000 7974227b 3a226570 41572220     ....{"type": "WA
    dca0:	4e494e52 202c2247 74616422 203a2261     RNING", "data": 
    dcb0:	7246225b 20656d61 72617453 664f2074     ["Frame Start Of
    dcc0:	74657366 0d7d5d22 00000000 7974227b     fset"]}.....{"ty
    dcd0:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    dce0:	203a2261 6f43225b 63656e6e 43203a74     a": ["Connect: C
    dcf0:	656e6e6f 5d227463 00000d7d 7974227b     onnect"]}...{"ty
    dd00:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    dd10:	203a2261 6f43225b 63656e6e 44203a74     a": ["Connect: D
    dd20:	6f637369 63656e6e 7d5d2274 0000000d     isconnect"]}....
    dd30:	7974227b 3a226570 524f5022 202c2254     {"type":"PORT", 
    dd40:	74616422 203a2261 6f43225b 63656e6e     "data": ["Connec
    dd50:	56203a74 64696c61 22657461 000d7d5d     t: Validate"]}..
    dd60:	7974227b 3a226570 52452220 22524f52     {"type": "ERROR"
    dd70:	6422202c 22617461 225b203a 6d617246     , "data": ["Fram
    dd80:	72452065 22726f72 000d7d5d 7974227b     e Error"]}..{"ty
    dd90:	3a226570 52452220 22524f52 6422202c     pe": "ERROR", "d
    dda0:	22617461 225b203a 69726150 45207974     ata": ["Parity E
    ddb0:	726f7272 0d7d5d22 00000000 49505351     rror"]}.....QSPI
    ddc0:	6f725020 6d617267 61745320 64657472      Program Started
    ddd0:	00000d0a 73616c46 72652068 20657361     ....Flash erase 
    dde0:	63637573 66737365 0d0a6c75 00000000     successful......
    ddf0:	73616c46 72772068 20657469 63637573     Flash write succ
    de00:	66737365 0d0a6c75 00000000 73616c46     essful......Flas
    de10:	65722068 73206461 65636375 75667373     h read successfu
    de20:	000d0a6c 73616c46 61642068 76206174     l...Flash data v
    de30:	66697265 74616369 206e6f69 6c696166     erification fail
    de40:	0a2e6465 0000000d 74697257 202d2065     ed......Write - 
    de50:	64616552 20736920 63637573 66737365     Read is successf
    de60:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
    de70:	6d656d20 2e79726f 00000d0a 74696e49      memory.....Init
    de80:	696c6169 6974617a 000d6e6f 65746e45     ialization..Ente
    de90:	676e6972 69614d20 6f4c206e 000d706f     ring Main Loop..
    dea0:	20425355 6e6e6f43 65746365 00000d64     USB Connected...
    deb0:	7974227b 3a226570 53415422 202c224b     {"type":"TASK", 
    dec0:	74616422 203a2261 0000005b 22642522     "data": [..."%d"
    ded0:	00000000 0000202c 7974227b 3a226570     ...., ..{"type":
    dee0:	4f4f4c22 202c2250 74616422 203a2261     "LOOP", "data": 
    def0:	6425225b 0d7d5d22 0000000a              ["%d"]}.....

0000defc <keyboard_report_desc>:
    defc:	06090105 070501a1 e729e019 01250015     ..........)...%.
    df0c:	08950175 01810281 65290019 65250015     u.........)e..%e
    df1c:	06950875 08050081 05290119 01250015     u.........)...%.
    df2c:	05950175 03950291 00c00191              u...........

0000df38 <mouse_report_desc>:
    df38:	02090105 010901a1 090500a1 03290119     ..............).
    df48:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    df58:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    df68:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    df78:	73752f65 2e636462 00000063              e/usbdc.c...

0000df84 <_global_impure_ptr>:
    df84:	2000055c                                \.. 

0000df88 <__sf_fake_stderr>:
	...

0000dfa8 <__sf_fake_stdin>:
	...

0000dfc8 <__sf_fake_stdout>:
	...
    dfe8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    dff8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    e008:	31300046 35343332 39383736 64636261     F.0123456789abcd
    e018:	00006665                                ef..

0000e01c <_init>:
    e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e01e:	bf00      	nop
    e020:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e022:	bc08      	pop	{r3}
    e024:	469e      	mov	lr, r3
    e026:	4770      	bx	lr

0000e028 <__init_array_start>:
    e028:	00000289 	.word	0x00000289

0000e02c <_fini>:
    e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e02e:	bf00      	nop
    e030:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e032:	bc08      	pop	{r3}
    e034:	469e      	mov	lr, r3
    e036:	4770      	bx	lr

0000e038 <__fini_array_start>:
    e038:	00000265 	.word	0x00000265
