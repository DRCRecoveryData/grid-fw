
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d924  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000d924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          000037dc  200005c0  0000def0  000205c0  2**4
                  ALLOC
  5 .stack        00010004  20003d9c  000116cc  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008d835  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bc53  00000000  00000000  000ade78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002fda2  00000000  00000000  000b9acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022a8  00000000  00000000  000e986d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003188  00000000  00000000  000ebb15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000478ff  00000000  00000000  000eec9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003eb6b  00000000  00000000  0013659c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a5e7  00000000  00000000  00175107  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006724  00000000  00000000  0028f6f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 3d 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     .=. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	8d 67 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .g..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 99 63 00 00 ad 63 00 00     .........c...c..
      bc:	d1 61 00 00 dd 61 00 00 e9 61 00 00 f5 61 00 00     .a...a...a...a..
      cc:	01 62 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .b..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	c1 65 00 00 e9 71 00 00 fd 71 00 00 11 72 00 00     .e...q...q...r..
     104:	25 72 00 00 39 72 00 00 4d 72 00 00 61 72 00 00     %r..9r..Mr..ar..
     114:	75 72 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ur..............
     124:	ed 02 00 00 89 72 00 00 9d 72 00 00 b1 72 00 00     .....r...r...r..
     134:	c5 72 00 00 d9 72 00 00 ed 72 00 00 01 73 00 00     .r...r...r...s..
     144:	15 73 00 00 29 73 00 00 3d 73 00 00 51 73 00 00     .s..)s..=s..Qs..
     154:	65 73 00 00 79 73 00 00 8d 73 00 00 a1 73 00 00     es..ys...s...s..
     164:	b5 73 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .s..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 d1 92 00 00     ................
     184:	dd 92 00 00 e9 92 00 00 f5 92 00 00 00 00 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 d9 7f 00 00 ed 7f 00 00     ................
     1f4:	01 80 00 00 15 80 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 65 5e 00 00 79 5e 00 00 8d 5e 00 00     ....e^..y^...^..
     224:	a1 5e 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .^..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000d924 	.word	0x0000d924

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000d924 	.word	0x0000d924
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000d924 	.word	0x0000d924
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000b295 	.word	0x0000b295
     2e8:	00009e8d 	.word	0x00009e8d

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000d924 	.word	0x0000d924
     36c:	200005bc 	.word	0x200005bc
     370:	20003d9c 	.word	0x20003d9c
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000ba75 	.word	0x0000ba75
     384:	00009a21 	.word	0x00009a21

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20001044 	.word	0x20001044
     40c:	20001140 	.word	0x20001140
     410:	43001c00 	.word	0x43001c00
     414:	00004265 	.word	0x00004265
     418:	00004309 	.word	0x00004309
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	20001218 	.word	0x20001218
     4b0:	20000fe0 	.word	0x20000fe0
     4b4:	43002000 	.word	0x43002000
     4b8:	00004265 	.word	0x00004265
     4bc:	00004309 	.word	0x00004309
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000fdc 	.word	0x20000fdc
     4e8:	000045a5 	.word	0x000045a5

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00004629 	.word	0x00004629

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fc0 	.word	0x20000fc0
     54c:	00004649 	.word	0x00004649

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001284 	.word	0x20001284
     718:	000047f5 	.word	0x000047f5
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	20001070 	.word	0x20001070
     7bc:	000050d5 	.word	0x000050d5
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	200010c4 	.word	0x200010c4
     860:	000050d5 	.word	0x000050d5
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20001038 	.word	0x20001038
     8f8:	00005301 	.word	0x00005301
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f38 	.word	0x20000f38
     a04:	000049e5 	.word	0x000049e5
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	20001178 	.word	0x20001178
     aa8:	000050d5 	.word	0x000050d5
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20000ff8 	.word	0x20000ff8
     b54:	00004729 	.word	0x00004729
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	200011c8 	.word	0x200011c8
     bf8:	000050d5 	.word	0x000050d5
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001114 	.word	0x20001114
     cfc:	00004c49 	.word	0x00004c49
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	000045d5 	.word	0x000045d5

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	000055c9 	.word	0x000055c9
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000cf48 	.word	0x0000cf48
     e14:	00005921 	.word	0x00005921
     e18:	200010c0 	.word	0x200010c0
     e1c:	40002000 	.word	0x40002000
     e20:	00009301 	.word	0x00009301

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00005ee5 	.word	0x00005ee5
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	00006785 	.word	0x00006785
    1100:	40002400 	.word	0x40002400
    1104:	20000f80 	.word	0x20000f80
    1108:	00004df1 	.word	0x00004df1
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	00007fd1 	.word	0x00007fd1
    1134:	40003800 	.word	0x40003800
    1138:	20001264 	.word	0x20001264
    113c:	40003c00 	.word	0x40003c00
    1140:	20001158 	.word	0x20001158
    1144:	4101a000 	.word	0x4101a000
    1148:	20000fa0 	.word	0x20000fa0
    114c:	4101c000 	.word	0x4101c000
    1150:	20001244 	.word	0x20001244
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4604      	mov	r4, r0
    1164:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1166:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1168:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    116a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    116c:	2300      	movs	r3, #0
    116e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1170:	0048      	lsls	r0, r1, #1
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <grid_ain_channel_init+0x38>)
    1174:	4798      	blx	r3
    1176:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1178:	b14d      	cbz	r5, 118e <grid_ain_channel_init+0x2e>
    117a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    117c:	4619      	mov	r1, r3
    117e:	6822      	ldr	r2, [r4, #0]
    1180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	7922      	ldrb	r2, [r4, #4]
    118a:	429a      	cmp	r2, r3
    118c:	d8f7      	bhi.n	117e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    118e:	2000      	movs	r0, #0
    1190:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    1192:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	bf00      	nop
    1198:	0000babd 	.word	0x0000babd

0000119c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11a0:	4605      	mov	r5, r0
    11a2:	4689      	mov	r9, r1
    11a4:	4617      	mov	r7, r2
    11a6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11a8:	0100      	lsls	r0, r0, #4
    11aa:	4b0c      	ldr	r3, [pc, #48]	; (11dc <grid_ain_init+0x40>)
    11ac:	4798      	blx	r3
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <grid_ain_init+0x44>)
    11b0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11b2:	b185      	cbz	r5, 11d6 <grid_ain_init+0x3a>
    11b4:	3d01      	subs	r5, #1
    11b6:	b2ed      	uxtb	r5, r5
    11b8:	3501      	adds	r5, #1
    11ba:	012d      	lsls	r5, r5, #4
    11bc:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11be:	469a      	mov	sl, r3
    11c0:	4e08      	ldr	r6, [pc, #32]	; (11e4 <grid_ain_init+0x48>)
    11c2:	4643      	mov	r3, r8
    11c4:	463a      	mov	r2, r7
    11c6:	4649      	mov	r1, r9
    11c8:	f8da 0000 	ldr.w	r0, [sl]
    11cc:	4420      	add	r0, r4
    11ce:	47b0      	blx	r6
    11d0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    11d2:	42ac      	cmp	r4, r5
    11d4:	d1f5      	bne.n	11c2 <grid_ain_init+0x26>
	}

	return 0;
}
    11d6:	2000      	movs	r0, #0
    11d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11dc:	0000babd 	.word	0x0000babd
    11e0:	200017d0 	.word	0x200017d0
    11e4:	00001161 	.word	0x00001161

000011e8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    11e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    11ec:	0100      	lsls	r0, r0, #4
    11ee:	4b3c      	ldr	r3, [pc, #240]	; (12e0 <grid_ain_add_sample+0xf8>)
    11f0:	f8d3 a000 	ldr.w	sl, [r3]
    11f4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    11f8:	f89c 6004 	ldrb.w	r6, [ip, #4]
    11fc:	2e00      	cmp	r6, #0
    11fe:	d05b      	beq.n	12b8 <grid_ain_add_sample+0xd0>
    1200:	f85a 5000 	ldr.w	r5, [sl, r0]
    1204:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1206:	2200      	movs	r2, #0
    1208:	4690      	mov	r8, r2
    120a:	4691      	mov	r9, r2
    120c:	4696      	mov	lr, r2
    120e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1212:	4614      	mov	r4, r2
    1214:	fa5f fb82 	uxtb.w	fp, r2
    1218:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    121c:	441c      	add	r4, r3
		
		if (current > maximum){
    121e:	4573      	cmp	r3, lr
    1220:	bf84      	itt	hi
    1222:	46d8      	movhi	r8, fp
			maximum = current;
    1224:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1226:	42bb      	cmp	r3, r7
    1228:	bf3c      	itt	cc
    122a:	46d9      	movcc	r9, fp
			minimum = current;
    122c:	461f      	movcc	r7, r3
    122e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1230:	b2d3      	uxtb	r3, r2
    1232:	42b3      	cmp	r3, r6
    1234:	d3ee      	bcc.n	1214 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1236:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    123a:	b2b6      	uxth	r6, r6
    123c:	428e      	cmp	r6, r1
    123e:	d23f      	bcs.n	12c0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1240:	f85a 3000 	ldr.w	r3, [sl, r0]
    1244:	440c      	add	r4, r1
    1246:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    124a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    124c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1250:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1254:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1258:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    125c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1260:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1262:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1266:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1268:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    126a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    126c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1270:	b29b      	uxth	r3, r3
    1272:	408b      	lsls	r3, r1
    1274:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1276:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    127a:	1b92      	subs	r2, r2, r6
    127c:	2a00      	cmp	r2, #0
    127e:	bfb8      	it	lt
    1280:	4252      	neglt	r2, r2
    1282:	2601      	movs	r6, #1
    1284:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1288:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    128c:	42be      	cmp	r6, r7
    128e:	d020      	beq.n	12d2 <grid_ain_add_sample+0xea>
    1290:	4282      	cmp	r2, r0
    1292:	dc08      	bgt.n	12a6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1294:	2201      	movs	r2, #1
    1296:	fa02 f505 	lsl.w	r5, r2, r5
    129a:	fa02 f101 	lsl.w	r1, r2, r1
    129e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12a0:	428f      	cmp	r7, r1
    12a2:	d000      	beq.n	12a6 <grid_ain_add_sample+0xbe>
    12a4:	b9c7      	cbnz	r7, 12d8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12a6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12aa:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12ae:	2001      	movs	r0, #1
    12b0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12b8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12ba:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12bc:	2400      	movs	r4, #0
    12be:	e7ba      	b.n	1236 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    12c0:	f85a 3000 	ldr.w	r3, [sl, r0]
    12c4:	440c      	add	r4, r1
    12c6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    12ca:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    12cc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    12d0:	e7be      	b.n	1250 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    12d2:	2000      	movs	r0, #0
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	2000      	movs	r0, #0
	}
	
}
    12da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12de:	bf00      	nop
    12e0:	200017d0 	.word	0x200017d0

000012e4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    12e4:	4b02      	ldr	r3, [pc, #8]	; (12f0 <grid_ain_get_changed+0xc>)
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    12ec:	7b00      	ldrb	r0, [r0, #12]
    12ee:	4770      	bx	lr
    12f0:	200017d0 	.word	0x200017d0

000012f4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <grid_ain_get_average+0x28>)
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    12fc:	2300      	movs	r3, #0
    12fe:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1300:	1fcb      	subs	r3, r1, #7
    1302:	b2db      	uxtb	r3, r3
    1304:	2b07      	cmp	r3, #7
    1306:	d806      	bhi.n	1316 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1308:	8903      	ldrh	r3, [r0, #8]
    130a:	7940      	ldrb	r0, [r0, #5]
    130c:	1a40      	subs	r0, r0, r1
    130e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1312:	b280      	uxth	r0, r0
    1314:	4770      	bx	lr
    1316:	2000      	movs	r0, #0
    1318:	e7fb      	b.n	1312 <grid_ain_get_average+0x1e>
    131a:	bf00      	nop
    131c:	200017d0 	.word	0x200017d0

00001320 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4604      	mov	r4, r0
    1324:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1326:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1328:	2300      	movs	r3, #0
    132a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    132c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    132e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1330:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1332:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1334:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1336:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1338:	4608      	mov	r0, r1
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <grid_buffer_init+0x3c>)
    133c:	4798      	blx	r3
    133e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1340:	b900      	cbnz	r0, 1344 <grid_buffer_init+0x24>
    1342:	e7fe      	b.n	1342 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1344:	b145      	cbz	r5, 1358 <grid_buffer_init+0x38>
    1346:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1348:	4619      	mov	r1, r3
    134a:	6862      	ldr	r2, [r4, #4]
    134c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    134e:	3301      	adds	r3, #1
    1350:	b29b      	uxth	r3, r3
    1352:	8822      	ldrh	r2, [r4, #0]
    1354:	429a      	cmp	r2, r3
    1356:	d8f8      	bhi.n	134a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1358:	2001      	movs	r0, #1
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	0000babd 	.word	0x0000babd

00001360 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1360:	8903      	ldrh	r3, [r0, #8]
    1362:	8a02      	ldrh	r2, [r0, #16]
    1364:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1366:	bf8f      	iteee	hi
    1368:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    136a:	8800      	ldrhls	r0, [r0, #0]
    136c:	18c0      	addls	r0, r0, r3
    136e:	1a80      	subls	r0, r0, r2
    1370:	b280      	uxth	r0, r0

	return space;

	
	
}
    1372:	4770      	bx	lr

00001374 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    1374:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1376:	8903      	ldrh	r3, [r0, #8]
    1378:	8a02      	ldrh	r2, [r0, #16]
    137a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    137c:	bf9c      	itt	ls
    137e:	8804      	ldrhls	r4, [r0, #0]
    1380:	191b      	addls	r3, r3, r4
    1382:	1a9b      	subs	r3, r3, r2
    1384:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    1386:	428b      	cmp	r3, r1
    1388:	d90a      	bls.n	13a0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    138a:	440a      	add	r2, r1
    138c:	8804      	ldrh	r4, [r0, #0]
    138e:	fb92 f3f4 	sdiv	r3, r2, r4
    1392:	fb04 2213 	mls	r2, r4, r3, r2
    1396:	8242      	strh	r2, [r0, #18]
		
		return length;
    1398:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    139a:	f85d 4b04 	ldr.w	r4, [sp], #4
    139e:	4770      	bx	lr
		return 0; // failed
    13a0:	2000      	movs	r0, #0
    13a2:	e7fa      	b.n	139a <grid_buffer_write_init+0x26>

000013a4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    13a4:	8a83      	ldrh	r3, [r0, #20]
    13a6:	6842      	ldr	r2, [r0, #4]
    13a8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    13aa:	8a83      	ldrh	r3, [r0, #20]
    13ac:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    13ae:	b29b      	uxth	r3, r3
    13b0:	8801      	ldrh	r1, [r0, #0]
    13b2:	fbb3 f2f1 	udiv	r2, r3, r1
    13b6:	fb01 3312 	mls	r3, r1, r2, r3
    13ba:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    13bc:	2001      	movs	r0, #1
    13be:	4770      	bx	lr

000013c0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    13c0:	8a83      	ldrh	r3, [r0, #20]
    13c2:	8a42      	ldrh	r2, [r0, #18]
    13c4:	429a      	cmp	r2, r3
    13c6:	d000      	beq.n	13ca <grid_buffer_write_acknowledge+0xa>
    13c8:	e7fe      	b.n	13c8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    13ca:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    13cc:	2001      	movs	r0, #1
    13ce:	4770      	bx	lr

000013d0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    13d0:	8983      	ldrh	r3, [r0, #12]
    13d2:	8942      	ldrh	r2, [r0, #10]
    13d4:	429a      	cmp	r2, r3
    13d6:	d000      	beq.n	13da <grid_buffer_read_size+0xa>
    13d8:	e7fe      	b.n	13d8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    13da:	8902      	ldrh	r2, [r0, #8]
    13dc:	429a      	cmp	r2, r3
    13de:	d000      	beq.n	13e2 <grid_buffer_read_size+0x12>
    13e0:	e7fe      	b.n	13e0 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    13e2:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    13e4:	8a05      	ldrh	r5, [r0, #16]
    13e6:	42ab      	cmp	r3, r5
    13e8:	d025      	beq.n	1436 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    13ea:	8804      	ldrh	r4, [r0, #0]
    13ec:	b1fc      	cbz	r4, 142e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    13ee:	4626      	mov	r6, r4
    13f0:	fb93 f2f4 	sdiv	r2, r3, r4
    13f4:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    13f8:	b291      	uxth	r1, r2
    13fa:	428d      	cmp	r5, r1
    13fc:	d01d      	beq.n	143a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    13fe:	6840      	ldr	r0, [r0, #4]
    1400:	5c42      	ldrb	r2, [r0, r1]
    1402:	2a0a      	cmp	r2, #10
    1404:	d114      	bne.n	1430 <grid_buffer_read_size+0x60>
    1406:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1408:	3301      	adds	r3, #1
    140a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    140c:	bcf0      	pop	{r4, r5, r6, r7}
    140e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1410:	fb92 f1f6 	sdiv	r1, r2, r6
    1414:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1418:	b28f      	uxth	r7, r1
    141a:	42bd      	cmp	r5, r7
    141c:	d00f      	beq.n	143e <grid_buffer_read_size+0x6e>
    141e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1420:	5dc1      	ldrb	r1, [r0, r7]
    1422:	290a      	cmp	r1, #10
    1424:	d0f0      	beq.n	1408 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1426:	3301      	adds	r3, #1
    1428:	b29b      	uxth	r3, r3
    142a:	42a3      	cmp	r3, r4
    142c:	d1f0      	bne.n	1410 <grid_buffer_read_size+0x40>
    142e:	e7fe      	b.n	142e <grid_buffer_read_size+0x5e>
    1430:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1432:	2300      	movs	r3, #0
    1434:	e7f7      	b.n	1426 <grid_buffer_read_size+0x56>
		return 0;
    1436:	2000      	movs	r0, #0
    1438:	e7e8      	b.n	140c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    143a:	2000      	movs	r0, #0
    143c:	e7e6      	b.n	140c <grid_buffer_read_size+0x3c>
    143e:	2000      	movs	r0, #0
    1440:	e7e4      	b.n	140c <grid_buffer_read_size+0x3c>

00001442 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1442:	8982      	ldrh	r2, [r0, #12]
    1444:	8943      	ldrh	r3, [r0, #10]
    1446:	4293      	cmp	r3, r2
    1448:	d000      	beq.n	144c <grid_buffer_read_init+0xa>
    144a:	e7fe      	b.n	144a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    144c:	8903      	ldrh	r3, [r0, #8]
    144e:	4293      	cmp	r3, r2
    1450:	d000      	beq.n	1454 <grid_buffer_read_init+0x12>
    1452:	e7fe      	b.n	1452 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1456:	8a05      	ldrh	r5, [r0, #16]
    1458:	42aa      	cmp	r2, r5
    145a:	d031      	beq.n	14c0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    145c:	8804      	ldrh	r4, [r0, #0]
    145e:	b35c      	cbz	r4, 14b8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1460:	4626      	mov	r6, r4
    1462:	fb92 f3f4 	sdiv	r3, r2, r4
    1466:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    146a:	b299      	uxth	r1, r3
    146c:	428d      	cmp	r5, r1
    146e:	d029      	beq.n	14c4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1470:	6847      	ldr	r7, [r0, #4]
    1472:	460b      	mov	r3, r1
    1474:	5c79      	ldrb	r1, [r7, r1]
    1476:	290a      	cmp	r1, #10
    1478:	d11f      	bne.n	14ba <grid_buffer_read_init+0x78>
    147a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    147c:	3301      	adds	r3, #1
    147e:	fb93 f2f4 	sdiv	r2, r3, r4
    1482:	fb04 3312 	mls	r3, r4, r2, r3
    1486:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1488:	1c4b      	adds	r3, r1, #1
    148a:	b29b      	uxth	r3, r3
    148c:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    148e:	4618      	mov	r0, r3
    1490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1492:	fb92 f3f6 	sdiv	r3, r2, r6
    1496:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    149a:	fa1f fe83 	uxth.w	lr, r3
    149e:	4575      	cmp	r5, lr
    14a0:	d012      	beq.n	14c8 <grid_buffer_read_init+0x86>
    14a2:	4673      	mov	r3, lr
    14a4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14a6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    14aa:	f1be 0f0a 	cmp.w	lr, #10
    14ae:	d0e5      	beq.n	147c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    14b0:	3101      	adds	r1, #1
    14b2:	b289      	uxth	r1, r1
    14b4:	42a1      	cmp	r1, r4
    14b6:	d1ec      	bne.n	1492 <grid_buffer_read_init+0x50>
    14b8:	e7fe      	b.n	14b8 <grid_buffer_read_init+0x76>
    14ba:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14bc:	2100      	movs	r1, #0
    14be:	e7f7      	b.n	14b0 <grid_buffer_read_init+0x6e>
		return 0;
    14c0:	2300      	movs	r3, #0
    14c2:	e7e4      	b.n	148e <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    14c4:	2300      	movs	r3, #0
    14c6:	e7e2      	b.n	148e <grid_buffer_read_init+0x4c>
    14c8:	2300      	movs	r3, #0
    14ca:	e7e0      	b.n	148e <grid_buffer_read_init+0x4c>

000014cc <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    14cc:	8983      	ldrh	r3, [r0, #12]
    14ce:	8941      	ldrh	r1, [r0, #10]
    14d0:	4299      	cmp	r1, r3
    14d2:	d00e      	beq.n	14f2 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    14d4:	b410      	push	{r4}
    14d6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    14d8:	6841      	ldr	r1, [r0, #4]
    14da:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    14dc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    14de:	b29b      	uxth	r3, r3
    14e0:	8814      	ldrh	r4, [r2, #0]
    14e2:	fbb3 f1f4 	udiv	r1, r3, r4
    14e6:	fb04 3311 	mls	r3, r4, r1, r3
    14ea:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    14ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    14f0:	4770      	bx	lr
    14f2:	e7fe      	b.n	14f2 <grid_buffer_read_character+0x26>

000014f4 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    14f4:	8983      	ldrh	r3, [r0, #12]
    14f6:	8942      	ldrh	r2, [r0, #10]
    14f8:	429a      	cmp	r2, r3
    14fa:	d000      	beq.n	14fe <grid_buffer_read_acknowledge+0xa>
    14fc:	e7fe      	b.n	14fc <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    14fe:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1500:	2001      	movs	r0, #1
    1502:	4770      	bx	lr

00001504 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    1504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1508:	4604      	mov	r4, r0
    150a:	4690      	mov	r8, r2
    150c:	461f      	mov	r7, r3
    150e:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1512:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1516:	4e33      	ldr	r6, [pc, #204]	; (15e4 <grid_port_init+0xe0>)
    1518:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    151a:	4641      	mov	r1, r8
    151c:	f504 609e 	add.w	r0, r4, #1264	; 0x4f0
    1520:	47b0      	blx	r6
	
	por->cooldown = 0;
    1522:	2300      	movs	r3, #0
    1524:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1526:	f89d 2020 	ldrb.w	r2, [sp, #32]
    152a:	72a2      	strb	r2, [r4, #10]
	
	por->direction = dir;
    152c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1530:	7262      	strb	r2, [r4, #9]
	
	por->usart	= usart;
    1532:	6067      	str	r7, [r4, #4]
	por->type		= type;
    1534:	7225      	strb	r5, [r4, #8]
	
	por->tx_double_buffer_status	= 0;
    1536:	81a3      	strh	r3, [r4, #12]
	por->rx_double_buffer_status	= 0;
    1538:	61e3      	str	r3, [r4, #28]
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    153a:	4619      	mov	r1, r3
    153c:	18e2      	adds	r2, r4, r3
    153e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1542:	3301      	adds	r3, #1
    1544:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1548:	d1f8      	bne.n	153c <grid_port_init+0x38>
    154a:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    154c:	4619      	mov	r1, r3
    154e:	18e2      	adds	r2, r4, r3
    1550:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1554:	3301      	adds	r3, #1
    1556:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    155a:	d1f8      	bne.n	154e <grid_port_init+0x4a>
	}
	
	por->partner_fi = 0;
    155c:	2300      	movs	r3, #0
    155e:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
	
	por->partner_hwcfg = 0;
    1562:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	por->partner_status = 1;
    1566:	2301      	movs	r3, #1
    1568:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    156c:	429d      	cmp	r5, r3
    156e:	d004      	beq.n	157a <grid_port_init+0x76>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1570:	2301      	movs	r3, #1
    1572:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
    1576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    157a:	2300      	movs	r3, #0
    157c:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
		por->partner_fi = 0;
    1580:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
		if (por->direction == GRID_MSG_NORTH){
    1584:	7a63      	ldrb	r3, [r4, #9]
    1586:	b2db      	uxtb	r3, r3
    1588:	2b11      	cmp	r3, #17
    158a:	d013      	beq.n	15b4 <grid_port_init+0xb0>
		else if (por->direction == GRID_MSG_EAST){
    158c:	7a63      	ldrb	r3, [r4, #9]
    158e:	b2db      	uxtb	r3, r3
    1590:	2b12      	cmp	r3, #18
    1592:	d017      	beq.n	15c4 <grid_port_init+0xc0>
		else if (por->direction == GRID_MSG_SOUTH){
    1594:	7a63      	ldrb	r3, [r4, #9]
    1596:	b2db      	uxtb	r3, r3
    1598:	2b13      	cmp	r3, #19
    159a:	d01b      	beq.n	15d4 <grid_port_init+0xd0>
		else if (por->direction == GRID_MSG_WEST){
    159c:	7a63      	ldrb	r3, [r4, #9]
    159e:	b2db      	uxtb	r3, r3
    15a0:	2b14      	cmp	r3, #20
    15a2:	d1e8      	bne.n	1576 <grid_port_init+0x72>
			por->dx = -1;
    15a4:	23ff      	movs	r3, #255	; 0xff
    15a6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    15aa:	2300      	movs	r3, #0
    15ac:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15b4:	2300      	movs	r3, #0
    15b6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 1;
    15ba:	2301      	movs	r3, #1
    15bc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    15c4:	2301      	movs	r3, #1
    15c6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    15ca:	2300      	movs	r3, #0
    15cc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15d4:	2300      	movs	r3, #0
    15d6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = -1;
    15da:	23ff      	movs	r3, #255	; 0xff
    15dc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15e4:	00001321 	.word	0x00001321

000015e8 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    15e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15ec:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    15ee:	2600      	movs	r6, #0
    15f0:	9602      	str	r6, [sp, #8]
    15f2:	2311      	movs	r3, #17
    15f4:	9301      	str	r3, [sp, #4]
    15f6:	2401      	movs	r4, #1
    15f8:	9400      	str	r4, [sp, #0]
    15fa:	4b25      	ldr	r3, [pc, #148]	; (1690 <grid_port_init_all+0xa8>)
    15fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1600:	4611      	mov	r1, r2
    1602:	4824      	ldr	r0, [pc, #144]	; (1694 <grid_port_init_all+0xac>)
    1604:	4d24      	ldr	r5, [pc, #144]	; (1698 <grid_port_init_all+0xb0>)
    1606:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1608:	9402      	str	r4, [sp, #8]
    160a:	2312      	movs	r3, #18
    160c:	9301      	str	r3, [sp, #4]
    160e:	9400      	str	r4, [sp, #0]
    1610:	4b22      	ldr	r3, [pc, #136]	; (169c <grid_port_init_all+0xb4>)
    1612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1616:	4611      	mov	r1, r2
    1618:	4821      	ldr	r0, [pc, #132]	; (16a0 <grid_port_init_all+0xb8>)
    161a:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    161c:	f04f 0902 	mov.w	r9, #2
    1620:	f8cd 9008 	str.w	r9, [sp, #8]
    1624:	2313      	movs	r3, #19
    1626:	9301      	str	r3, [sp, #4]
    1628:	9400      	str	r4, [sp, #0]
    162a:	4b1e      	ldr	r3, [pc, #120]	; (16a4 <grid_port_init_all+0xbc>)
    162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1630:	4611      	mov	r1, r2
    1632:	481d      	ldr	r0, [pc, #116]	; (16a8 <grid_port_init_all+0xc0>)
    1634:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    1636:	2703      	movs	r7, #3
    1638:	9702      	str	r7, [sp, #8]
    163a:	2314      	movs	r3, #20
    163c:	9301      	str	r3, [sp, #4]
    163e:	9400      	str	r4, [sp, #0]
    1640:	4b1a      	ldr	r3, [pc, #104]	; (16ac <grid_port_init_all+0xc4>)
    1642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1646:	4611      	mov	r1, r2
    1648:	4819      	ldr	r0, [pc, #100]	; (16b0 <grid_port_init_all+0xc8>)
    164a:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1);
    164c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 16b8 <grid_port_init_all+0xd0>
    1650:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1654:	f8cd a008 	str.w	sl, [sp, #8]
    1658:	9601      	str	r6, [sp, #4]
    165a:	9700      	str	r7, [sp, #0]
    165c:	4633      	mov	r3, r6
    165e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1662:	4611      	mov	r1, r2
    1664:	4640      	mov	r0, r8
    1666:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    1668:	4f12      	ldr	r7, [pc, #72]	; (16b4 <grid_port_init_all+0xcc>)
    166a:	f8cd a008 	str.w	sl, [sp, #8]
    166e:	9601      	str	r6, [sp, #4]
    1670:	f8cd 9000 	str.w	r9, [sp]
    1674:	4633      	mov	r3, r6
    1676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    167a:	4611      	mov	r1, r2
    167c:	4638      	mov	r0, r7
    167e:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    1680:	f888 450f 	strb.w	r4, [r8, #1295]	; 0x50f
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    1684:	f887 450f 	strb.w	r4, [r7, #1295]	; 0x50f
	
	
}
    1688:	b004      	add	sp, #16
    168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    168e:	bf00      	nop
    1690:	200010c4 	.word	0x200010c4
    1694:	20001298 	.word	0x20001298
    1698:	00001505 	.word	0x00001505
    169c:	20001070 	.word	0x20001070
    16a0:	20003100 	.word	0x20003100
    16a4:	200011c8 	.word	0x200011c8
    16a8:	200026dc 	.word	0x200026dc
    16ac:	20001178 	.word	0x20001178
    16b0:	200021b8 	.word	0x200021b8
    16b4:	20002bf0 	.word	0x20002bf0
    16b8:	200017e8 	.word	0x200017e8

000016bc <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por){
    16bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c0:	b091      	sub	sp, #68	; 0x44
    16c2:	af02      	add	r7, sp, #8
    16c4:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    16c6:	f500 699e 	add.w	r9, r0, #1264	; 0x4f0
    16ca:	4648      	mov	r0, r9
    16cc:	4b54      	ldr	r3, [pc, #336]	; (1820 <grid_port_process_inbound+0x164>)
    16ce:	4798      	blx	r3
	
	if (!packet_size){
    16d0:	b920      	cbnz	r0, 16dc <grid_port_process_inbound+0x20>
    16d2:	2000      	movs	r0, #0
		}	

		
	}
		
}
    16d4:	373c      	adds	r7, #60	; 0x3c
    16d6:	46bd      	mov	sp, r7
    16d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16dc:	4680      	mov	r8, r0
	}else{
    16de:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    16e2:	4b50      	ldr	r3, [pc, #320]	; (1824 <grid_port_process_inbound+0x168>)
    16e4:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    16e6:	4b50      	ldr	r3, [pc, #320]	; (1828 <grid_port_process_inbound+0x16c>)
    16e8:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    16ea:	4b50      	ldr	r3, [pc, #320]	; (182c <grid_port_process_inbound+0x170>)
    16ec:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    16ee:	4b50      	ldr	r3, [pc, #320]	; (1830 <grid_port_process_inbound+0x174>)
    16f0:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    16f2:	4b50      	ldr	r3, [pc, #320]	; (1834 <grid_port_process_inbound+0x178>)
    16f4:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    16f6:	4b50      	ldr	r3, [pc, #320]	; (1838 <grid_port_process_inbound+0x17c>)
    16f8:	61fb      	str	r3, [r7, #28]
    16fa:	f107 0308 	add.w	r3, r7, #8
    16fe:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    1702:	2600      	movs	r6, #0
    1704:	e001      	b.n	170a <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    1706:	428b      	cmp	r3, r1
    1708:	d00e      	beq.n	1728 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    170a:	f853 2b04 	ldr.w	r2, [r3], #4
    170e:	f892 050f 	ldrb.w	r0, [r2, #1295]	; 0x50f
    1712:	2800      	cmp	r0, #0
    1714:	d0f7      	beq.n	1706 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    1716:	f107 0038 	add.w	r0, r7, #56	; 0x38
    171a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    171e:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    1722:	3601      	adds	r6, #1
    1724:	b2f6      	uxtb	r6, r6
    1726:	e7ee      	b.n	1706 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    1728:	2e00      	cmp	r6, #0
    172a:	d068      	beq.n	17fe <grid_port_process_inbound+0x142>
    172c:	f107 0a20 	add.w	sl, r7, #32
    1730:	1e74      	subs	r4, r6, #1
    1732:	b2e4      	uxtb	r4, r4
    1734:	3401      	adds	r4, #1
    1736:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    173a:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    173c:	f8df b118 	ldr.w	fp, [pc, #280]	; 1858 <grid_port_process_inbound+0x19c>
    1740:	e001      	b.n	1746 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    1742:	42a5      	cmp	r5, r4
    1744:	d016      	beq.n	1774 <grid_port_process_inbound+0xb8>
			if (port_array[i] != por){
    1746:	f855 0b04 	ldr.w	r0, [r5], #4
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	4283      	cmp	r3, r0
    174e:	d0f8      	beq.n	1742 <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1750:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1754:	47d8      	blx	fp
    1756:	4580      	cmp	r8, r0
    1758:	d9f3      	bls.n	1742 <grid_port_process_inbound+0x86>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    175a:	23c8      	movs	r3, #200	; 0xc8
    175c:	9301      	str	r3, [sp, #4]
    175e:	2302      	movs	r3, #2
    1760:	9300      	str	r3, [sp, #0]
    1762:	2300      	movs	r3, #0
    1764:	2264      	movs	r2, #100	; 0x64
    1766:	4611      	mov	r1, r2
    1768:	4834      	ldr	r0, [pc, #208]	; (183c <grid_port_process_inbound+0x180>)
    176a:	4c35      	ldr	r4, [pc, #212]	; (1840 <grid_port_process_inbound+0x184>)
    176c:	47a0      	blx	r4
    176e:	f8d7 d000 	ldr.w	sp, [r7]
    1772:	e7ae      	b.n	16d2 <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1774:	4648      	mov	r0, r9
    1776:	4b33      	ldr	r3, [pc, #204]	; (1844 <grid_port_process_inbound+0x188>)
    1778:	4798      	blx	r3
    177a:	4580      	cmp	r8, r0
    177c:	d000      	beq.n	1780 <grid_port_process_inbound+0xc4>
    177e:	e7fe      	b.n	177e <grid_port_process_inbound+0xc2>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1780:	4c31      	ldr	r4, [pc, #196]	; (1848 <grid_port_process_inbound+0x18c>)
    1782:	e001      	b.n	1788 <grid_port_process_inbound+0xcc>
		for (uint8_t i=0; i<port_count; i++)
    1784:	45aa      	cmp	sl, r5
    1786:	d03f      	beq.n	1808 <grid_port_process_inbound+0x14c>
			if (port_array[i] != por){
    1788:	f85a 0b04 	ldr.w	r0, [sl], #4
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	4283      	cmp	r3, r0
    1790:	d0f8      	beq.n	1784 <grid_port_process_inbound+0xc8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1792:	4641      	mov	r1, r8
    1794:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1798:	47a0      	blx	r4
    179a:	e7f3      	b.n	1784 <grid_port_process_inbound+0xc8>
			for (uint8_t i=0; i<port_count; i++){
    179c:	42a5      	cmp	r5, r4
    179e:	d009      	beq.n	17b4 <grid_port_process_inbound+0xf8>
				if (port_array[i] != por){
    17a0:	f854 0b04 	ldr.w	r0, [r4], #4
    17a4:	687b      	ldr	r3, [r7, #4]
    17a6:	4283      	cmp	r3, r0
    17a8:	d0f8      	beq.n	179c <grid_port_process_inbound+0xe0>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    17aa:	6839      	ldr	r1, [r7, #0]
    17ac:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    17b0:	47d8      	blx	fp
    17b2:	e7f3      	b.n	179c <grid_port_process_inbound+0xe0>
    17b4:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    17b8:	fa1f f38a 	uxth.w	r3, sl
    17bc:	4543      	cmp	r3, r8
    17be:	d208      	bcs.n	17d2 <grid_port_process_inbound+0x116>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    17c0:	4648      	mov	r0, r9
    17c2:	4b22      	ldr	r3, [pc, #136]	; (184c <grid_port_process_inbound+0x190>)
    17c4:	4798      	blx	r3
    17c6:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    17c8:	2e00      	cmp	r6, #0
    17ca:	d0f3      	beq.n	17b4 <grid_port_process_inbound+0xf8>
    17cc:	f107 0420 	add.w	r4, r7, #32
    17d0:	e7e6      	b.n	17a0 <grid_port_process_inbound+0xe4>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    17d2:	4648      	mov	r0, r9
    17d4:	4b1e      	ldr	r3, [pc, #120]	; (1850 <grid_port_process_inbound+0x194>)
    17d6:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    17d8:	2e00      	cmp	r6, #0
    17da:	f43f af7b 	beq.w	16d4 <grid_port_process_inbound+0x18>
    17de:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    17e2:	4e1c      	ldr	r6, [pc, #112]	; (1854 <grid_port_process_inbound+0x198>)
    17e4:	e002      	b.n	17ec <grid_port_process_inbound+0x130>
		for (uint8_t i=0; i<port_count; i++)
    17e6:	42a5      	cmp	r5, r4
    17e8:	f43f af74 	beq.w	16d4 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    17ec:	f854 0b04 	ldr.w	r0, [r4], #4
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	4283      	cmp	r3, r0
    17f4:	d0f7      	beq.n	17e6 <grid_port_process_inbound+0x12a>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    17f6:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    17fa:	47b0      	blx	r6
    17fc:	e7f3      	b.n	17e6 <grid_port_process_inbound+0x12a>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    17fe:	4648      	mov	r0, r9
    1800:	4b10      	ldr	r3, [pc, #64]	; (1844 <grid_port_process_inbound+0x188>)
    1802:	4798      	blx	r3
    1804:	4540      	cmp	r0, r8
    1806:	d1ba      	bne.n	177e <grid_port_process_inbound+0xc2>
    1808:	1e75      	subs	r5, r6, #1
    180a:	b2ed      	uxtb	r5, r5
    180c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1810:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1814:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    1816:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    181a:	f8df b040 	ldr.w	fp, [pc, #64]	; 185c <grid_port_process_inbound+0x1a0>
    181e:	e7cf      	b.n	17c0 <grid_port_process_inbound+0x104>
    1820:	000013d1 	.word	0x000013d1
    1824:	20001298 	.word	0x20001298
    1828:	20003100 	.word	0x20003100
    182c:	200026dc 	.word	0x200026dc
    1830:	200021b8 	.word	0x200021b8
    1834:	200017e8 	.word	0x200017e8
    1838:	20002bf0 	.word	0x20002bf0
    183c:	20001d08 	.word	0x20001d08
    1840:	00003791 	.word	0x00003791
    1844:	00001443 	.word	0x00001443
    1848:	00001375 	.word	0x00001375
    184c:	000014cd 	.word	0x000014cd
    1850:	000014f5 	.word	0x000014f5
    1854:	000013c1 	.word	0x000013c1
    1858:	00001361 	.word	0x00001361
    185c:	000013a5 	.word	0x000013a5

00001860 <grid_port_process_outbound_usb>:

volatile uint8_t temp[500];

volatile uint8_t usb_debug[10];

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1864:	b09b      	sub	sp, #108	; 0x6c
    1866:	af06      	add	r7, sp, #24
    1868:	6438      	str	r0, [r7, #64]	; 0x40
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    186a:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    186e:	4630      	mov	r0, r6
    1870:	4b8f      	ldr	r3, [pc, #572]	; (1ab0 <grid_port_process_outbound_usb+0x250>)
    1872:	4798      	blx	r3
	
	if (!length){		
    1874:	b918      	cbnz	r0, 187e <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    1876:	3754      	adds	r7, #84	; 0x54
    1878:	46bd      	mov	sp, r7
    187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    187e:	4604      	mov	r4, r0
		grid_buffer_read_init(&por->tx_buffer);
    1880:	4630      	mov	r0, r6
    1882:	4b8c      	ldr	r3, [pc, #560]	; (1ab4 <grid_port_process_outbound_usb+0x254>)
    1884:	4798      	blx	r3
    1886:	2500      	movs	r5, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1888:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1af4 <grid_port_process_outbound_usb+0x294>
    188c:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1abc <grid_port_process_outbound_usb+0x25c>
    1890:	4630      	mov	r0, r6
    1892:	47c8      	blx	r9
    1894:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1898:	3501      	adds	r5, #1
    189a:	b2ed      	uxtb	r5, r5
    189c:	b2ab      	uxth	r3, r5
    189e:	429c      	cmp	r4, r3
    18a0:	d8f6      	bhi.n	1890 <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    18a2:	4630      	mov	r0, r6
    18a4:	4b84      	ldr	r3, [pc, #528]	; (1ab8 <grid_port_process_outbound_usb+0x258>)
    18a6:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    18a8:	4d84      	ldr	r5, [pc, #528]	; (1abc <grid_port_process_outbound_usb+0x25c>)
    18aa:	4628      	mov	r0, r5
    18ac:	4b84      	ldr	r3, [pc, #528]	; (1ac0 <grid_port_process_outbound_usb+0x260>)
    18ae:	4798      	blx	r3
    18b0:	63b8      	str	r0, [r7, #56]	; 0x38
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    18b2:	4628      	mov	r0, r5
    18b4:	4b83      	ldr	r3, [pc, #524]	; (1ac4 <grid_port_process_outbound_usb+0x264>)
    18b6:	4798      	blx	r3
    18b8:	387f      	subs	r0, #127	; 0x7f
    18ba:	b243      	sxtb	r3, r0
    18bc:	461e      	mov	r6, r3
    18be:	617b      	str	r3, [r7, #20]
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    18c0:	4628      	mov	r0, r5
    18c2:	4b81      	ldr	r3, [pc, #516]	; (1ac8 <grid_port_process_outbound_usb+0x268>)
    18c4:	4798      	blx	r3
    18c6:	387f      	subs	r0, #127	; 0x7f
    18c8:	b243      	sxtb	r3, r0
    18ca:	61bb      	str	r3, [r7, #24]
		uint8_t age = grid_msg_get_age(temp);
    18cc:	4628      	mov	r0, r5
    18ce:	4b7f      	ldr	r3, [pc, #508]	; (1acc <grid_port_process_outbound_usb+0x26c>)
    18d0:	4798      	blx	r3
    18d2:	6378      	str	r0, [r7, #52]	; 0x34
		uint8_t error_flag = 0;
    18d4:	2500      	movs	r5, #0
    18d6:	f887 504f 	strb.w	r5, [r7, #79]	; 0x4f
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    18da:	69bb      	ldr	r3, [r7, #24]
    18dc:	633b      	str	r3, [r7, #48]	; 0x30
    18de:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    18e2:	009b      	lsls	r3, r3, #2
    18e4:	623b      	str	r3, [r7, #32]
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    18e6:	62fe      	str	r6, [r7, #44]	; 0x2c
    18e8:	0173      	lsls	r3, r6, #5
    18ea:	61fb      	str	r3, [r7, #28]
    18ec:	1e63      	subs	r3, r4, #1
    18ee:	b29b      	uxth	r3, r3
    18f0:	f103 0a01 	add.w	sl, r3, #1
    18f4:	46ab      	mov	fp, r5
    18f6:	647d      	str	r5, [r7, #68]	; 0x44
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    18f8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1abc <grid_port_process_outbound_usb+0x25c>
    18fc:	e006      	b.n	190c <grid_port_process_outbound_usb+0xac>
				current_start = i;
    18fe:	fa5f f58b 	uxtb.w	r5, fp
    1902:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    1906:	45d3      	cmp	fp, sl
    1908:	f000 81f1 	beq.w	1cee <grid_port_process_outbound_usb+0x48e>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    190c:	f819 300b 	ldrb.w	r3, [r9, fp]
    1910:	b2db      	uxtb	r3, r3
    1912:	2b02      	cmp	r3, #2
    1914:	d0f3      	beq.n	18fe <grid_port_process_outbound_usb+0x9e>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1916:	f819 300b 	ldrb.w	r3, [r9, fp]
    191a:	b2db      	uxtb	r3, r3
    191c:	2b03      	cmp	r3, #3
    191e:	d1f0      	bne.n	1902 <grid_port_process_outbound_usb+0xa2>
    1920:	2d00      	cmp	r5, #0
    1922:	d0ee      	beq.n	1902 <grid_port_process_outbound_usb+0xa2>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    1924:	462c      	mov	r4, r5
    1926:	1c68      	adds	r0, r5, #1
    1928:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    192c:	2102      	movs	r1, #2
    192e:	4448      	add	r0, r9
    1930:	4b67      	ldr	r3, [pc, #412]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1932:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1934:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1938:	d01f      	beq.n	197a <grid_port_process_outbound_usb+0x11a>
				else if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    193a:	2e03      	cmp	r6, #3
    193c:	f000 8082 	beq.w	1a44 <grid_port_process_outbound_usb+0x1e4>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1940:	2e01      	cmp	r6, #1
    1942:	f000 80d9 	beq.w	1af8 <grid_port_process_outbound_usb+0x298>
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    1946:	2e04      	cmp	r6, #4
    1948:	f000 8160 	beq.w	1c0c <grid_port_process_outbound_usb+0x3ac>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    194c:	2e02      	cmp	r6, #2
    194e:	f000 81cc 	beq.w	1cea <grid_port_process_outbound_usb+0x48a>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1952:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    1954:	f105 0428 	add.w	r4, r5, #40	; 0x28
    1958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    195a:	441c      	add	r4, r3
    195c:	b2c2      	uxtb	r2, r0
    195e:	495d      	ldr	r1, [pc, #372]	; (1ad4 <grid_port_process_outbound_usb+0x274>)
    1960:	4620      	mov	r0, r4
    1962:	4b5d      	ldr	r3, [pc, #372]	; (1ad8 <grid_port_process_outbound_usb+0x278>)
    1964:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1966:	4620      	mov	r0, r4
    1968:	4b5c      	ldr	r3, [pc, #368]	; (1adc <grid_port_process_outbound_usb+0x27c>)
    196a:	4798      	blx	r3
    196c:	eb05 0800 	add.w	r8, r5, r0
    1970:	fa5f f388 	uxtb.w	r3, r8
    1974:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    1976:	2500      	movs	r5, #0
    1978:	e7c3      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    197a:	1ce8      	adds	r0, r5, #3
    197c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1980:	2102      	movs	r1, #2
    1982:	4448      	add	r0, r9
    1984:	4b52      	ldr	r3, [pc, #328]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1986:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1988:	1d68      	adds	r0, r5, #5
    198a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    198e:	2102      	movs	r1, #2
    1990:	4448      	add	r0, r9
    1992:	4b4f      	ldr	r3, [pc, #316]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1994:	4798      	blx	r3
    1996:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    199a:	1de8      	adds	r0, r5, #7
    199c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    19a0:	2102      	movs	r1, #2
    19a2:	4448      	add	r0, r9
    19a4:	4b4a      	ldr	r3, [pc, #296]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    19a6:	4798      	blx	r3
    19a8:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    19aa:	f105 0009 	add.w	r0, r5, #9
    19ae:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    19b2:	2102      	movs	r1, #2
    19b4:	4448      	add	r0, r9
    19b6:	4b46      	ldr	r3, [pc, #280]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    19b8:	4798      	blx	r3
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    19ba:	4b49      	ldr	r3, [pc, #292]	; (1ae0 <grid_port_process_outbound_usb+0x280>)
    19bc:	7a59      	ldrb	r1, [r3, #9]
    19be:	6a3b      	ldr	r3, [r7, #32]
    19c0:	4419      	add	r1, r3
    19c2:	424b      	negs	r3, r1
    19c4:	f001 020f 	and.w	r2, r1, #15
    19c8:	f003 030f 	and.w	r3, r3, #15
    19cc:	bf58      	it	pl
    19ce:	425a      	negpl	r2, r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    19d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    19d2:	3328      	adds	r3, #40	; 0x28
    19d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
    19d6:	4419      	add	r1, r3
    19d8:	460d      	mov	r5, r1
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    19da:	b2e4      	uxtb	r4, r4
    19dc:	f504 7480 	add.w	r4, r4, #256	; 0x100
    19e0:	69fb      	ldr	r3, [r7, #28]
    19e2:	441c      	add	r4, r3
    19e4:	4263      	negs	r3, r4
    19e6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    19ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    19ee:	bf58      	it	pl
    19f0:	425c      	negpl	r4, r3
    19f2:	b2e4      	uxtb	r4, r4
    19f4:	b2c1      	uxtb	r1, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    19f6:	62b9      	str	r1, [r7, #40]	; 0x28
    19f8:	9105      	str	r1, [sp, #20]
    19fa:	9404      	str	r4, [sp, #16]
    19fc:	f8cd 800c 	str.w	r8, [sp, #12]
    1a00:	63fa      	str	r2, [r7, #60]	; 0x3c
    1a02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    1a06:	9302      	str	r3, [sp, #8]
    1a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
    1a0a:	9001      	str	r0, [sp, #4]
    1a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1a0e:	9000      	str	r0, [sp, #0]
    1a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1a14:	4933      	ldr	r1, [pc, #204]	; (1ae4 <grid_port_process_outbound_usb+0x284>)
    1a16:	627d      	str	r5, [r7, #36]	; 0x24
    1a18:	4628      	mov	r0, r5
    1a1a:	4d2f      	ldr	r5, [pc, #188]	; (1ad8 <grid_port_process_outbound_usb+0x278>)
    1a1c:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1a20:	4b2e      	ldr	r3, [pc, #184]	; (1adc <grid_port_process_outbound_usb+0x27c>)
    1a22:	4798      	blx	r3
    1a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1a26:	4410      	add	r0, r2
    1a28:	b2c2      	uxtb	r2, r0
    1a2a:	647a      	str	r2, [r7, #68]	; 0x44
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a2e:	ea48 0102 	orr.w	r1, r8, r2
    1a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a34:	4622      	mov	r2, r4
    1a36:	b2c9      	uxtb	r1, r1
    1a38:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1a3c:	4c2a      	ldr	r4, [pc, #168]	; (1ae8 <grid_port_process_outbound_usb+0x288>)
    1a3e:	47a0      	blx	r4
				current_start = 0;
    1a40:	4635      	mov	r5, r6
    1a42:	e75e      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					if (dx == 0 && dy == 0){
    1a44:	697b      	ldr	r3, [r7, #20]
    1a46:	2b00      	cmp	r3, #0
    1a48:	f040 814d 	bne.w	1ce6 <grid_port_process_outbound_usb+0x486>
    1a4c:	69bb      	ldr	r3, [r7, #24]
    1a4e:	b10b      	cbz	r3, 1a54 <grid_port_process_outbound_usb+0x1f4>
				current_start = 0;
    1a50:	2500      	movs	r5, #0
    1a52:	e756      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1a54:	1ce8      	adds	r0, r5, #3
    1a56:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a5a:	2102      	movs	r1, #2
    1a5c:	4448      	add	r0, r9
    1a5e:	4b1c      	ldr	r3, [pc, #112]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a60:	4798      	blx	r3
    1a62:	4606      	mov	r6, r0
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1a64:	1d68      	adds	r0, r5, #5
    1a66:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a6a:	2102      	movs	r1, #2
    1a6c:	4448      	add	r0, r9
    1a6e:	4b18      	ldr	r3, [pc, #96]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a70:	4798      	blx	r3
    1a72:	4605      	mov	r5, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1a74:	1de0      	adds	r0, r4, #7
    1a76:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a7a:	2102      	movs	r1, #2
    1a7c:	4448      	add	r0, r9
    1a7e:	4b14      	ldr	r3, [pc, #80]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a80:	4798      	blx	r3
    1a82:	4680      	mov	r8, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1a84:	f104 0009 	add.w	r0, r4, #9
    1a88:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a8c:	2102      	movs	r1, #2
    1a8e:	4448      	add	r0, r9
    1a90:	4b0f      	ldr	r3, [pc, #60]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a92:	4798      	blx	r3
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1a94:	b2ed      	uxtb	r5, r5
    1a96:	2d63      	cmp	r5, #99	; 0x63
    1a98:	d001      	beq.n	1a9e <grid_port_process_outbound_usb+0x23e>
				current_start = 0;
    1a9a:	2500      	movs	r5, #0
    1a9c:	e731      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1a9e:	b2c3      	uxtb	r3, r0
    1aa0:	b2f2      	uxtb	r2, r6
    1aa2:	fa5f f188 	uxtb.w	r1, r8
    1aa6:	4811      	ldr	r0, [pc, #68]	; (1aec <grid_port_process_outbound_usb+0x28c>)
    1aa8:	4c11      	ldr	r4, [pc, #68]	; (1af0 <grid_port_process_outbound_usb+0x290>)
    1aaa:	47a0      	blx	r4
				current_start = 0;
    1aac:	2500      	movs	r5, #0
    1aae:	e728      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1ab0:	000013d1 	.word	0x000013d1
    1ab4:	00001443 	.word	0x00001443
    1ab8:	000014f5 	.word	0x000014f5
    1abc:	20003644 	.word	0x20003644
    1ac0:	00003aed 	.word	0x00003aed
    1ac4:	00003b0d 	.word	0x00003b0d
    1ac8:	00003b2d 	.word	0x00003b2d
    1acc:	00003b4d 	.word	0x00003b4d
    1ad0:	000037e5 	.word	0x000037e5
    1ad4:	0000d020 	.word	0x0000d020
    1ad8:	0000bed1 	.word	0x0000bed1
    1adc:	0000bf19 	.word	0x0000bf19
    1ae0:	20001d08 	.word	0x20001d08
    1ae4:	0000cf64 	.word	0x0000cf64
    1ae8:	0000a915 	.word	0x0000a915
    1aec:	20003614 	.word	0x20003614
    1af0:	00001f79 	.word	0x00001f79
    1af4:	000014cd 	.word	0x000014cd
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1af8:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1afc:	fa5f f38b 	uxtb.w	r3, fp
    1b00:	1b5b      	subs	r3, r3, r5
    1b02:	3b03      	subs	r3, #3
    1b04:	4a7d      	ldr	r2, [pc, #500]	; (1cfc <grid_port_process_outbound_usb+0x49c>)
    1b06:	fb82 1203 	smull	r1, r2, r2, r3
    1b0a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	4619      	mov	r1, r3
    1b12:	613b      	str	r3, [r7, #16]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1b14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b18:	3307      	adds	r3, #7
    1b1a:	f023 0307 	bic.w	r3, r3, #7
    1b1e:	ebad 0d03 	sub.w	sp, sp, r3
    1b22:	ab06      	add	r3, sp, #24
    1b24:	461e      	mov	r6, r3
    1b26:	60fb      	str	r3, [r7, #12]
					for(uint8_t j=0; j<key_array_length; j++){
    1b28:	2900      	cmp	r1, #0
    1b2a:	d064      	beq.n	1bf6 <grid_port_process_outbound_usb+0x396>
    1b2c:	3403      	adds	r4, #3
    1b2e:	eb04 0809 	add.w	r8, r4, r9
    1b32:	1e4b      	subs	r3, r1, #1
    1b34:	b2db      	uxtb	r3, r3
    1b36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b3a:	3509      	adds	r5, #9
    1b3c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1b40:	444b      	add	r3, r9
    1b42:	62bb      	str	r3, [r7, #40]	; 0x28
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b44:	63fe      	str	r6, [r7, #60]	; 0x3c
    1b46:	f8c7 b008 	str.w	fp, [r7, #8]
    1b4a:	f8d7 b044 	ldr.w	fp, [r7, #68]	; 0x44
    1b4e:	f8c7 a004 	str.w	sl, [r7, #4]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1b52:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b56:	2102      	movs	r1, #2
    1b58:	4640      	mov	r0, r8
    1b5a:	4b69      	ldr	r3, [pc, #420]	; (1d00 <grid_port_process_outbound_usb+0x4a0>)
    1b5c:	4798      	blx	r3
    1b5e:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1b60:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b64:	2102      	movs	r1, #2
    1b66:	eb08 0001 	add.w	r0, r8, r1
    1b6a:	4b65      	ldr	r3, [pc, #404]	; (1d00 <grid_port_process_outbound_usb+0x4a0>)
    1b6c:	4798      	blx	r3
    1b6e:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1b70:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b74:	2102      	movs	r1, #2
    1b76:	f108 0004 	add.w	r0, r8, #4
    1b7a:	4b61      	ldr	r3, [pc, #388]	; (1d00 <grid_port_process_outbound_usb+0x4a0>)
    1b7c:	4798      	blx	r3
    1b7e:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b80:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
    1b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1b86:	449a      	add	sl, r3
    1b88:	4b5e      	ldr	r3, [pc, #376]	; (1d04 <grid_port_process_outbound_usb+0x4a4>)
    1b8a:	4798      	blx	r3
    1b8c:	9005      	str	r0, [sp, #20]
    1b8e:	b2e4      	uxtb	r4, r4
    1b90:	9404      	str	r4, [sp, #16]
    1b92:	b2ed      	uxtb	r5, r5
    1b94:	9503      	str	r5, [sp, #12]
    1b96:	647e      	str	r6, [r7, #68]	; 0x44
    1b98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1b9c:	9302      	str	r3, [sp, #8]
    1b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ba0:	9301      	str	r3, [sp, #4]
    1ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ba4:	9300      	str	r3, [sp, #0]
    1ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1baa:	4957      	ldr	r1, [pc, #348]	; (1d08 <grid_port_process_outbound_usb+0x4a8>)
    1bac:	4650      	mov	r0, sl
    1bae:	4e57      	ldr	r6, [pc, #348]	; (1d0c <grid_port_process_outbound_usb+0x4ac>)
    1bb0:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1bb2:	4650      	mov	r0, sl
    1bb4:	4b56      	ldr	r3, [pc, #344]	; (1d10 <grid_port_process_outbound_usb+0x4b0>)
    1bb6:	4798      	blx	r3
    1bb8:	4483      	add	fp, r0
    1bba:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1bbe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1bc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    1bc4:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1bc6:	2d82      	cmp	r5, #130	; 0x82
    1bc8:	bf14      	ite	ne
    1bca:	2500      	movne	r5, #0
    1bcc:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    1bce:	460b      	mov	r3, r1
    1bd0:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1bd2:	2c80      	cmp	r4, #128	; 0x80
    1bd4:	bf14      	ite	ne
    1bd6:	2400      	movne	r4, #0
    1bd8:	2401      	moveq	r4, #1
    1bda:	708c      	strb	r4, [r1, #2]
    1bdc:	f108 0806 	add.w	r8, r8, #6
    1be0:	3303      	adds	r3, #3
    1be2:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint8_t j=0; j<key_array_length; j++){
    1be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1be6:	4598      	cmp	r8, r3
    1be8:	d1b3      	bne.n	1b52 <grid_port_process_outbound_usb+0x2f2>
    1bea:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    1bee:	f8d7 b008 	ldr.w	fp, [r7, #8]
    1bf2:	f8d7 a004 	ldr.w	sl, [r7, #4]
					usb_debug[1] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1bf6:	6939      	ldr	r1, [r7, #16]
    1bf8:	68f8      	ldr	r0, [r7, #12]
    1bfa:	4b46      	ldr	r3, [pc, #280]	; (1d14 <grid_port_process_outbound_usb+0x4b4>)
    1bfc:	4798      	blx	r3
    1bfe:	b2c0      	uxtb	r0, r0
    1c00:	4b45      	ldr	r3, [pc, #276]	; (1d18 <grid_port_process_outbound_usb+0x4b8>)
    1c02:	7058      	strb	r0, [r3, #1]
    1c04:	f8d7 d024 	ldr.w	sp, [r7, #36]	; 0x24
				current_start = 0;
    1c08:	2500      	movs	r5, #0
    1c0a:	e67a      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					uint8_t sys_command		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1c0c:	1ce8      	adds	r0, r5, #3
    1c0e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c12:	2102      	movs	r1, #2
    1c14:	4448      	add	r0, r9
    1c16:	4b3a      	ldr	r3, [pc, #232]	; (1d00 <grid_port_process_outbound_usb+0x4a0>)
    1c18:	4798      	blx	r3
    1c1a:	4680      	mov	r8, r0
    1c1c:	b2c5      	uxtb	r5, r0
					uint8_t sys_subcommand  = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1c1e:	1d60      	adds	r0, r4, #5
    1c20:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c24:	2102      	movs	r1, #2
    1c26:	4448      	add	r0, r9
    1c28:	4b35      	ldr	r3, [pc, #212]	; (1d00 <grid_port_process_outbound_usb+0x4a0>)
    1c2a:	4798      	blx	r3
    1c2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    1c2e:	b2c6      	uxtb	r6, r0
					uint8_t sys_value	    = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1c30:	1de0      	adds	r0, r4, #7
    1c32:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c36:	2102      	movs	r1, #2
    1c38:	4448      	add	r0, r9
    1c3a:	4b31      	ldr	r3, [pc, #196]	; (1d00 <grid_port_process_outbound_usb+0x4a0>)
    1c3c:	4798      	blx	r3
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c3e:	2d64      	cmp	r5, #100	; 0x64
    1c40:	d003      	beq.n	1c4a <grid_port_process_outbound_usb+0x3ea>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1c42:	2d66      	cmp	r5, #102	; 0x66
    1c44:	d02a      	beq.n	1c9c <grid_port_process_outbound_usb+0x43c>
				current_start = 0;
    1c46:	2500      	movs	r5, #0
    1c48:	e65b      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c4a:	2e65      	cmp	r6, #101	; 0x65
    1c4c:	d001      	beq.n	1c52 <grid_port_process_outbound_usb+0x3f2>
				current_start = 0;
    1c4e:	2500      	movs	r5, #0
    1c50:	e657      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1c52:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_value);		
    1c54:	4621      	mov	r1, r4
    1c56:	4831      	ldr	r0, [pc, #196]	; (1d1c <grid_port_process_outbound_usb+0x4bc>)
    1c58:	4b31      	ldr	r3, [pc, #196]	; (1d20 <grid_port_process_outbound_usb+0x4c0>)
    1c5a:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1c5c:	6c7e      	ldr	r6, [r7, #68]	; 0x44
    1c5e:	f106 0528 	add.w	r5, r6, #40	; 0x28
    1c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c64:	441d      	add	r5, r3
    1c66:	9404      	str	r4, [sp, #16]
    1c68:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    1c6c:	9303      	str	r3, [sp, #12]
    1c6e:	fa5f f388 	uxtb.w	r3, r8
    1c72:	9302      	str	r3, [sp, #8]
    1c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1c76:	9301      	str	r3, [sp, #4]
    1c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1c7a:	9300      	str	r3, [sp, #0]
    1c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1c80:	4928      	ldr	r1, [pc, #160]	; (1d24 <grid_port_process_outbound_usb+0x4c4>)
    1c82:	4628      	mov	r0, r5
    1c84:	4c21      	ldr	r4, [pc, #132]	; (1d0c <grid_port_process_outbound_usb+0x4ac>)
    1c86:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1c88:	4628      	mov	r0, r5
    1c8a:	4b21      	ldr	r3, [pc, #132]	; (1d10 <grid_port_process_outbound_usb+0x4b0>)
    1c8c:	4798      	blx	r3
    1c8e:	eb06 0800 	add.w	r8, r6, r0
    1c92:	fa5f f388 	uxtb.w	r3, r8
    1c96:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    1c98:	2500      	movs	r5, #0
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c9a:	e632      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1c9c:	2e67      	cmp	r6, #103	; 0x67
    1c9e:	d001      	beq.n	1ca4 <grid_port_process_outbound_usb+0x444>
				current_start = 0;
    1ca0:	2500      	movs	r5, #0
    1ca2:	e62e      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1ca4:	6c7e      	ldr	r6, [r7, #68]	; 0x44
    1ca6:	f106 0528 	add.w	r5, r6, #40	; 0x28
    1caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1cac:	441d      	add	r5, r3
    1cae:	b2c0      	uxtb	r0, r0
    1cb0:	9004      	str	r0, [sp, #16]
    1cb2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    1cb6:	9303      	str	r3, [sp, #12]
    1cb8:	fa5f f388 	uxtb.w	r3, r8
    1cbc:	9302      	str	r3, [sp, #8]
    1cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1cc0:	9301      	str	r3, [sp, #4]
    1cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1cc4:	9300      	str	r3, [sp, #0]
    1cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1cca:	4916      	ldr	r1, [pc, #88]	; (1d24 <grid_port_process_outbound_usb+0x4c4>)
    1ccc:	4628      	mov	r0, r5
    1cce:	4c0f      	ldr	r4, [pc, #60]	; (1d0c <grid_port_process_outbound_usb+0x4ac>)
    1cd0:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1cd2:	4628      	mov	r0, r5
    1cd4:	4b0e      	ldr	r3, [pc, #56]	; (1d10 <grid_port_process_outbound_usb+0x4b0>)
    1cd6:	4798      	blx	r3
    1cd8:	eb06 0800 	add.w	r8, r6, r0
    1cdc:	fa5f f388 	uxtb.w	r3, r8
    1ce0:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    1ce2:	2500      	movs	r5, #0
    1ce4:	e60d      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1ce6:	2500      	movs	r5, #0
    1ce8:	e60b      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1cea:	2500      	movs	r5, #0
    1cec:	e609      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1cee:	6c79      	ldr	r1, [r7, #68]	; 0x44
    1cf0:	6c38      	ldr	r0, [r7, #64]	; 0x40
    1cf2:	3028      	adds	r0, #40	; 0x28
    1cf4:	4b0c      	ldr	r3, [pc, #48]	; (1d28 <grid_port_process_outbound_usb+0x4c8>)
    1cf6:	4798      	blx	r3
}
    1cf8:	e5bd      	b.n	1876 <grid_port_process_outbound_usb+0x16>
    1cfa:	bf00      	nop
    1cfc:	2aaaaaab 	.word	0x2aaaaaab
    1d00:	000037e5 	.word	0x000037e5
    1d04:	0000385d 	.word	0x0000385d
    1d08:	0000cfac 	.word	0x0000cfac
    1d0c:	0000bed1 	.word	0x0000bed1
    1d10:	0000bf19 	.word	0x0000bf19
    1d14:	0000a391 	.word	0x0000a391
    1d18:	20003838 	.word	0x20003838
    1d1c:	20001d08 	.word	0x20001d08
    1d20:	0000394d 	.word	0x0000394d
    1d24:	0000cff4 	.word	0x0000cff4
    1d28:	0000a151 	.word	0x0000a151

00001d2c <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1d2e:	f500 659b 	add.w	r5, r0, #1240	; 0x4d8
    1d32:	4628      	mov	r0, r5
    1d34:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <grid_port_process_outbound_ui+0x34>)
    1d36:	4798      	blx	r3
	
	if (!packet_size){
    1d38:	b900      	cbnz	r0, 1d3c <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    1d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d3c:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    1d3e:	4628      	mov	r0, r5
    1d40:	4b08      	ldr	r3, [pc, #32]	; (1d64 <grid_port_process_outbound_ui+0x38>)
    1d42:	4798      	blx	r3
    1d44:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1d46:	4f08      	ldr	r7, [pc, #32]	; (1d68 <grid_port_process_outbound_ui+0x3c>)
    1d48:	4628      	mov	r0, r5
    1d4a:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    1d4c:	3401      	adds	r4, #1
    1d4e:	b2e4      	uxtb	r4, r4
    1d50:	b2a3      	uxth	r3, r4
    1d52:	429e      	cmp	r6, r3
    1d54:	d8f8      	bhi.n	1d48 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1d56:	4628      	mov	r0, r5
    1d58:	4b04      	ldr	r3, [pc, #16]	; (1d6c <grid_port_process_outbound_ui+0x40>)
    1d5a:	4798      	blx	r3
}
    1d5c:	e7ed      	b.n	1d3a <grid_port_process_outbound_ui+0xe>
    1d5e:	bf00      	nop
    1d60:	000013d1 	.word	0x000013d1
    1d64:	00001443 	.word	0x00001443
    1d68:	000014cd 	.word	0x000014cd
    1d6c:	000014f5 	.word	0x000014f5

00001d70 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1d70:	8983      	ldrh	r3, [r0, #12]
    1d72:	b103      	cbz	r3, 1d76 <grid_port_process_outbound_usart+0x6>
    1d74:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d7a:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1d7c:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    1d80:	4630      	mov	r0, r6
    1d82:	4b11      	ldr	r3, [pc, #68]	; (1dc8 <grid_port_process_outbound_usart+0x58>)
    1d84:	4798      	blx	r3
    1d86:	4604      	mov	r4, r0
    1d88:	4607      	mov	r7, r0
		
		if (!packet_size){
    1d8a:	b910      	cbnz	r0, 1d92 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1d8c:	2000      	movs	r0, #0
    1d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1d92:	4630      	mov	r0, r6
    1d94:	4b0d      	ldr	r3, [pc, #52]	; (1dcc <grid_port_process_outbound_usart+0x5c>)
    1d96:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1d98:	81ac      	strh	r4, [r5, #12]
    1d9a:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1d9c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1dd8 <grid_port_process_outbound_usart+0x68>
    1da0:	4630      	mov	r0, r6
    1da2:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1da4:	192b      	adds	r3, r5, r4
    1da6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
			for (uint8_t i = 0; i<packet_size; i++){
    1daa:	3401      	adds	r4, #1
    1dac:	b2e4      	uxtb	r4, r4
    1dae:	42a7      	cmp	r7, r4
    1db0:	d8f6      	bhi.n	1da0 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1db2:	4630      	mov	r0, r6
    1db4:	4b06      	ldr	r3, [pc, #24]	; (1dd0 <grid_port_process_outbound_usart+0x60>)
    1db6:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1db8:	89aa      	ldrh	r2, [r5, #12]
    1dba:	f105 0128 	add.w	r1, r5, #40	; 0x28
    1dbe:	6868      	ldr	r0, [r5, #4]
    1dc0:	4b04      	ldr	r3, [pc, #16]	; (1dd4 <grid_port_process_outbound_usart+0x64>)
    1dc2:	4798      	blx	r3
			
		}
		
	}
	
}
    1dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1dc8:	000013d1 	.word	0x000013d1
    1dcc:	00001443 	.word	0x00001443
    1dd0:	000014f5 	.word	0x000014f5
    1dd4:	00004795 	.word	0x00004795
    1dd8:	000014cd 	.word	0x000014cd

00001ddc <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1ddc:	2201      	movs	r2, #1
    1dde:	4b01      	ldr	r3, [pc, #4]	; (1de4 <grid_led_hardware_transfer_complete_cb+0x8>)
    1de0:	701a      	strb	r2, [r3, #0]
    1de2:	4770      	bx	lr
    1de4:	20001294 	.word	0x20001294

00001de8 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1de8:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1dea:	7844      	ldrb	r4, [r0, #1]
    1dec:	428c      	cmp	r4, r1
    1dee:	d802      	bhi.n	1df6 <grid_led_set_color+0xe>
		return -1;		
    1df0:	20ff      	movs	r0, #255	; 0xff
}
    1df2:	bc30      	pop	{r4, r5}
    1df4:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1df6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1dfa:	0089      	lsls	r1, r1, #2
    1dfc:	4c09      	ldr	r4, [pc, #36]	; (1e24 <grid_led_set_color+0x3c>)
    1dfe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1e02:	68c3      	ldr	r3, [r0, #12]
    1e04:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1e0a:	68c3      	ldr	r3, [r0, #12]
    1e0c:	440b      	add	r3, r1
    1e0e:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1e10:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1e14:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1e18:	68c3      	ldr	r3, [r0, #12]
    1e1a:	4419      	add	r1, r3
    1e1c:	608a      	str	r2, [r1, #8]
		return 0;
    1e1e:	2000      	movs	r0, #0
    1e20:	e7e7      	b.n	1df2 <grid_led_set_color+0xa>
    1e22:	bf00      	nop
    1e24:	20001da8 	.word	0x20001da8

00001e28 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1e28:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1e2a:	4c06      	ldr	r4, [pc, #24]	; (1e44 <grid_led_hardware_init+0x1c>)
    1e2c:	f100 0114 	add.w	r1, r0, #20
    1e30:	4620      	mov	r0, r4
    1e32:	4b05      	ldr	r3, [pc, #20]	; (1e48 <grid_led_hardware_init+0x20>)
    1e34:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1e36:	4a05      	ldr	r2, [pc, #20]	; (1e4c <grid_led_hardware_init+0x24>)
    1e38:	2100      	movs	r1, #0
    1e3a:	4620      	mov	r0, r4
    1e3c:	4b04      	ldr	r3, [pc, #16]	; (1e50 <grid_led_hardware_init+0x28>)
    1e3e:	4798      	blx	r3
    1e40:	bd10      	pop	{r4, pc}
    1e42:	bf00      	nop
    1e44:	20001114 	.word	0x20001114
    1e48:	00004ced 	.word	0x00004ced
    1e4c:	00001ddd 	.word	0x00001ddd
    1e50:	00004cbd 	.word	0x00004cbd

00001e54 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1e54:	7840      	ldrb	r0, [r0, #1]
    1e56:	4770      	bx	lr

00001e58 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1e58:	7843      	ldrb	r3, [r0, #1]
    1e5a:	b1f3      	cbz	r3, 1e9a <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1e5c:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1e5e:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1e60:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1e64:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1e68:	6902      	ldr	r2, [r0, #16]
    1e6a:	440a      	add	r2, r1
    1e6c:	7ad1      	ldrb	r1, [r2, #11]
    1e6e:	7b14      	ldrb	r4, [r2, #12]
    1e70:	4421      	add	r1, r4
    1e72:	72d1      	strb	r1, [r2, #11]
    1e74:	7842      	ldrb	r2, [r0, #1]
    1e76:	441a      	add	r2, r3
    1e78:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1e7c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1e80:	6901      	ldr	r1, [r0, #16]
    1e82:	440a      	add	r2, r1
    1e84:	7ad1      	ldrb	r1, [r2, #11]
    1e86:	7b14      	ldrb	r4, [r2, #12]
    1e88:	4421      	add	r1, r4
    1e8a:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1e8c:	3301      	adds	r3, #1
    1e8e:	b2db      	uxtb	r3, r3
    1e90:	7842      	ldrb	r2, [r0, #1]
    1e92:	429a      	cmp	r2, r3
    1e94:	d8e4      	bhi.n	1e60 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1e96:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e9a:	4770      	bx	lr

00001e9c <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1e9c:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1e9e:	7844      	ldrb	r4, [r0, #1]
    1ea0:	fb02 1404 	mla	r4, r2, r4, r1
    1ea4:	6905      	ldr	r5, [r0, #16]
    1ea6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1eaa:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1eae:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1eb0:	7843      	ldrb	r3, [r0, #1]
    1eb2:	fb02 1303 	mla	r3, r2, r3, r1
    1eb6:	6904      	ldr	r4, [r0, #16]
    1eb8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1ebc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1ec0:	4423      	add	r3, r4
    1ec2:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1ec6:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1ec8:	7843      	ldrb	r3, [r0, #1]
    1eca:	fb02 1203 	mla	r2, r2, r3, r1
    1ece:	6903      	ldr	r3, [r0, #16]
    1ed0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1ed4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1ed8:	441a      	add	r2, r3
    1eda:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1ede:	7093      	strb	r3, [r2, #2]
}
    1ee0:	bc70      	pop	{r4, r5, r6}
    1ee2:	4770      	bx	lr

00001ee4 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1ee4:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1ee6:	7844      	ldrb	r4, [r0, #1]
    1ee8:	fb02 1404 	mla	r4, r2, r4, r1
    1eec:	6905      	ldr	r5, [r0, #16]
    1eee:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1ef2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1ef6:	442c      	add	r4, r5
    1ef8:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1efa:	7843      	ldrb	r3, [r0, #1]
    1efc:	fb02 1303 	mla	r3, r2, r3, r1
    1f00:	6904      	ldr	r4, [r0, #16]
    1f02:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1f06:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1f0a:	4423      	add	r3, r4
    1f0c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1f10:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1f12:	7843      	ldrb	r3, [r0, #1]
    1f14:	fb02 1203 	mla	r2, r2, r3, r1
    1f18:	6903      	ldr	r3, [r0, #16]
    1f1a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1f1e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1f22:	441a      	add	r2, r3
    1f24:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1f28:	7153      	strb	r3, [r2, #5]
}
    1f2a:	bc70      	pop	{r4, r5, r6}
    1f2c:	4770      	bx	lr

00001f2e <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1f2e:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    1f30:	7844      	ldrb	r4, [r0, #1]
    1f32:	fb02 1404 	mla	r4, r2, r4, r1
    1f36:	6905      	ldr	r5, [r0, #16]
    1f38:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1f3c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1f40:	442c      	add	r4, r5
    1f42:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    1f44:	7843      	ldrb	r3, [r0, #1]
    1f46:	fb02 1303 	mla	r3, r2, r3, r1
    1f4a:	6904      	ldr	r4, [r0, #16]
    1f4c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1f50:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1f54:	4423      	add	r3, r4
    1f56:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1f5a:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    1f5c:	7843      	ldrb	r3, [r0, #1]
    1f5e:	fb02 1203 	mla	r2, r2, r3, r1
    1f62:	6903      	ldr	r3, [r0, #16]
    1f64:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1f68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1f6c:	441a      	add	r2, r3
    1f6e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1f72:	7213      	strb	r3, [r2, #8]
}
    1f74:	bc70      	pop	{r4, r5, r6}
    1f76:	4770      	bx	lr

00001f78 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1f78:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    1f7a:	7844      	ldrb	r4, [r0, #1]
    1f7c:	fb02 1204 	mla	r2, r2, r4, r1
    1f80:	6901      	ldr	r1, [r0, #16]
    1f82:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1f86:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1f8a:	440a      	add	r2, r1
    1f8c:	72d3      	strb	r3, [r2, #11]
}
    1f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f92:	4770      	bx	lr

00001f94 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1f94:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    1f96:	7844      	ldrb	r4, [r0, #1]
    1f98:	fb02 1204 	mla	r2, r2, r4, r1
    1f9c:	6901      	ldr	r1, [r0, #16]
    1f9e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1fa2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1fa6:	440a      	add	r2, r1
    1fa8:	7313      	strb	r3, [r2, #12]
}
    1faa:	f85d 4b04 	ldr.w	r4, [sp], #4
    1fae:	4770      	bx	lr

00001fb0 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    1fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fb4:	b083      	sub	sp, #12
    1fb6:	4604      	mov	r4, r0
	mod->led_number = length;
    1fb8:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    1fba:	b2cd      	uxtb	r5, r1
    1fbc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1fc0:	0080      	lsls	r0, r0, #2
    1fc2:	3090      	adds	r0, #144	; 0x90
    1fc4:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    1fc6:	4f3e      	ldr	r7, [pc, #248]	; (20c0 <grid_led_buffer_init+0x110>)
    1fc8:	47b8      	blx	r7
    1fca:	4606      	mov	r6, r0
    1fcc:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    1fce:	f100 0390 	add.w	r3, r0, #144	; 0x90
    1fd2:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1fd4:	201a      	movs	r0, #26
    1fd6:	fb00 f005 	mul.w	r0, r0, r5
    1fda:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    1fdc:	2e00      	cmp	r6, #0
    1fde:	d06e      	beq.n	20be <grid_led_buffer_init+0x10e>
    1fe0:	2800      	cmp	r0, #0
    1fe2:	d06c      	beq.n	20be <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1fe4:	6120      	str	r0, [r4, #16]
    1fe6:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    1fe8:	4619      	mov	r1, r3
    1fea:	68a2      	ldr	r2, [r4, #8]
    1fec:	54d1      	strb	r1, [r2, r3]
    1fee:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    1ff0:	2b90      	cmp	r3, #144	; 0x90
    1ff2:	d1fa      	bne.n	1fea <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    1ff4:	7863      	ldrb	r3, [r4, #1]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d05e      	beq.n	20b8 <grid_led_buffer_init+0x108>
    1ffa:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    1ffc:	462e      	mov	r6, r5
    1ffe:	4f31      	ldr	r7, [pc, #196]	; (20c4 <grid_led_buffer_init+0x114>)
    2000:	9600      	str	r6, [sp, #0]
    2002:	4633      	mov	r3, r6
    2004:	4632      	mov	r2, r6
    2006:	4629      	mov	r1, r5
    2008:	4620      	mov	r0, r4
    200a:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    200c:	3501      	adds	r5, #1
    200e:	7863      	ldrb	r3, [r4, #1]
    2010:	42ab      	cmp	r3, r5
    2012:	d8f5      	bhi.n	2000 <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    2014:	2b00      	cmp	r3, #0
    2016:	d04f      	beq.n	20b8 <grid_led_buffer_init+0x108>
    2018:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    201a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 20cc <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    201e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 20d0 <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    2022:	2500      	movs	r5, #0
    2024:	9501      	str	r5, [sp, #4]
    2026:	9500      	str	r5, [sp, #0]
    2028:	462b      	mov	r3, r5
    202a:	462a      	mov	r2, r5
    202c:	4631      	mov	r1, r6
    202e:	4620      	mov	r0, r4
    2030:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    2032:	9501      	str	r5, [sp, #4]
    2034:	237f      	movs	r3, #127	; 0x7f
    2036:	9300      	str	r3, [sp, #0]
    2038:	462b      	mov	r3, r5
    203a:	462a      	mov	r2, r5
    203c:	4631      	mov	r1, r6
    203e:	4620      	mov	r0, r4
    2040:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    2042:	9501      	str	r5, [sp, #4]
    2044:	23ff      	movs	r3, #255	; 0xff
    2046:	9300      	str	r3, [sp, #0]
    2048:	462b      	mov	r3, r5
    204a:	462a      	mov	r2, r5
    204c:	4631      	mov	r1, r6
    204e:	4620      	mov	r0, r4
    2050:	f8df 9080 	ldr.w	r9, [pc, #128]	; 20d4 <grid_led_buffer_init+0x124>
    2054:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    2056:	462b      	mov	r3, r5
    2058:	462a      	mov	r2, r5
    205a:	4631      	mov	r1, r6
    205c:	4620      	mov	r0, r4
    205e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 20d8 <grid_led_buffer_init+0x128>
    2062:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    2064:	462b      	mov	r3, r5
    2066:	462a      	mov	r2, r5
    2068:	4631      	mov	r1, r6
    206a:	4620      	mov	r0, r4
    206c:	4f16      	ldr	r7, [pc, #88]	; (20c8 <grid_led_buffer_init+0x118>)
    206e:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    2070:	9501      	str	r5, [sp, #4]
    2072:	9500      	str	r5, [sp, #0]
    2074:	462b      	mov	r3, r5
    2076:	2201      	movs	r2, #1
    2078:	4631      	mov	r1, r6
    207a:	4620      	mov	r0, r4
    207c:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    207e:	9501      	str	r5, [sp, #4]
    2080:	9500      	str	r5, [sp, #0]
    2082:	462b      	mov	r3, r5
    2084:	2201      	movs	r2, #1
    2086:	4631      	mov	r1, r6
    2088:	4620      	mov	r0, r4
    208a:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    208c:	9501      	str	r5, [sp, #4]
    208e:	9500      	str	r5, [sp, #0]
    2090:	462b      	mov	r3, r5
    2092:	2201      	movs	r2, #1
    2094:	4631      	mov	r1, r6
    2096:	4620      	mov	r0, r4
    2098:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    209a:	462b      	mov	r3, r5
    209c:	2201      	movs	r2, #1
    209e:	4631      	mov	r1, r6
    20a0:	4620      	mov	r0, r4
    20a2:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    20a4:	462b      	mov	r3, r5
    20a6:	2201      	movs	r2, #1
    20a8:	4631      	mov	r1, r6
    20aa:	4620      	mov	r0, r4
    20ac:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    20ae:	3601      	adds	r6, #1
    20b0:	b2f6      	uxtb	r6, r6
    20b2:	7863      	ldrb	r3, [r4, #1]
    20b4:	42b3      	cmp	r3, r6
    20b6:	d8b4      	bhi.n	2022 <grid_led_buffer_init+0x72>
}
    20b8:	b003      	add	sp, #12
    20ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20be:	e7fe      	b.n	20be <grid_led_buffer_init+0x10e>
    20c0:	0000babd 	.word	0x0000babd
    20c4:	00001de9 	.word	0x00001de9
    20c8:	00001f79 	.word	0x00001f79
    20cc:	00001e9d 	.word	0x00001e9d
    20d0:	00001ee5 	.word	0x00001ee5
    20d4:	00001f2f 	.word	0x00001f2f
    20d8:	00001f95 	.word	0x00001f95

000020dc <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    20dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20e0:	b083      	sub	sp, #12
    20e2:	f890 c001 	ldrb.w	ip, [r0, #1]
    20e6:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    20ea:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    20ee:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    20f2:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    20f6:	6904      	ldr	r4, [r0, #16]
    20f8:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    20fa:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    20fc:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    2100:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    2102:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2104:	f8df 8084 	ldr.w	r8, [pc, #132]	; 218c <grid_led_render+0xb0>
    2108:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    210a:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    210e:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2110:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2114:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    2118:	f894 a000 	ldrb.w	sl, [r4]
    211c:	f894 b003 	ldrb.w	fp, [r4, #3]
    2120:	fb05 fb0b 	mul.w	fp, r5, fp
    2124:	fb09 bb0a 	mla	fp, r9, sl, fp
    2128:	f894 a006 	ldrb.w	sl, [r4, #6]
    212c:	fb06 ba0a 	mla	sl, r6, sl, fp
    2130:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2132:	f894 a001 	ldrb.w	sl, [r4, #1]
    2136:	f894 b004 	ldrb.w	fp, [r4, #4]
    213a:	fb05 fb0b 	mul.w	fp, r5, fp
    213e:	fb09 bb0a 	mla	fp, r9, sl, fp
    2142:	f894 a007 	ldrb.w	sl, [r4, #7]
    2146:	fb06 ba0a 	mla	sl, r6, sl, fp
    214a:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    214c:	f894 a002 	ldrb.w	sl, [r4, #2]
    2150:	f894 b005 	ldrb.w	fp, [r4, #5]
    2154:	fb05 f50b 	mul.w	r5, r5, fp
    2158:	fb09 590a 	mla	r9, r9, sl, r5
    215c:	7a25      	ldrb	r5, [r4, #8]
    215e:	fb06 9505 	mla	r5, r6, r5, r9
    2162:	44ae      	add	lr, r5
    2164:	3f01      	subs	r7, #1
    2166:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    2168:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    216c:	d1cc      	bne.n	2108 <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    216e:	f3ce 2447 	ubfx	r4, lr, #9, #8
    2172:	9400      	str	r4, [sp, #0]
    2174:	f3c3 2347 	ubfx	r3, r3, #9, #8
    2178:	f3c2 2247 	ubfx	r2, r2, #9, #8
    217c:	4c02      	ldr	r4, [pc, #8]	; (2188 <grid_led_render+0xac>)
    217e:	47a0      	blx	r4
	
}
    2180:	b003      	add	sp, #12
    2182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2186:	bf00      	nop
    2188:	00001de9 	.word	0x00001de9
    218c:	20000000 	.word	0x20000000

00002190 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2190:	7843      	ldrb	r3, [r0, #1]
    2192:	b15b      	cbz	r3, 21ac <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    2194:	b570      	push	{r4, r5, r6, lr}
    2196:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    2198:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    219a:	4e05      	ldr	r6, [pc, #20]	; (21b0 <grid_led_render_all+0x20>)
    219c:	4621      	mov	r1, r4
    219e:	4628      	mov	r0, r5
    21a0:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    21a2:	3401      	adds	r4, #1
    21a4:	786b      	ldrb	r3, [r5, #1]
    21a6:	42a3      	cmp	r3, r4
    21a8:	d8f8      	bhi.n	219c <grid_led_render_all+0xc>
    21aa:	bd70      	pop	{r4, r5, r6, pc}
    21ac:	4770      	bx	lr
    21ae:	bf00      	nop
    21b0:	000020dd 	.word	0x000020dd

000021b4 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    21b4:	b510      	push	{r4, lr}
    21b6:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    21b8:	2200      	movs	r2, #0
    21ba:	4b08      	ldr	r3, [pc, #32]	; (21dc <grid_led_hardware_start_transfer_blocking+0x28>)
    21bc:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    21be:	4808      	ldr	r0, [pc, #32]	; (21e0 <grid_led_hardware_start_transfer_blocking+0x2c>)
    21c0:	4b08      	ldr	r3, [pc, #32]	; (21e4 <grid_led_hardware_start_transfer_blocking+0x30>)
    21c2:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    21c4:	88a2      	ldrh	r2, [r4, #4]
    21c6:	68a1      	ldr	r1, [r4, #8]
    21c8:	6960      	ldr	r0, [r4, #20]
    21ca:	4b07      	ldr	r3, [pc, #28]	; (21e8 <grid_led_hardware_start_transfer_blocking+0x34>)
    21cc:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    21ce:	4a03      	ldr	r2, [pc, #12]	; (21dc <grid_led_hardware_start_transfer_blocking+0x28>)
    21d0:	7813      	ldrb	r3, [r2, #0]
    21d2:	b2db      	uxtb	r3, r3
    21d4:	2b01      	cmp	r3, #1
    21d6:	d1fb      	bne.n	21d0 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    21d8:	bd10      	pop	{r4, pc}
    21da:	bf00      	nop
    21dc:	20001294 	.word	0x20001294
    21e0:	20001114 	.word	0x20001114
    21e4:	00004c95 	.word	0x00004c95
    21e8:	00004795 	.word	0x00004795

000021ec <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    21ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21f0:	b085      	sub	sp, #20
    21f2:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    21f4:	4b20      	ldr	r3, [pc, #128]	; (2278 <grid_led_startup_animation+0x8c>)
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    21fa:	2b20      	cmp	r3, #32
    21fc:	d00a      	beq.n	2214 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    21fe:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    2202:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2206:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    220a:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    220e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2284 <grid_led_startup_animation+0x98>
    2212:	e01e      	b.n	2252 <grid_led_startup_animation+0x66>
		s= 2;
    2214:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    2218:	2300      	movs	r3, #0
    221a:	9303      	str	r3, [sp, #12]
    221c:	e7f3      	b.n	2206 <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    221e:	9500      	str	r5, [sp, #0]
    2220:	462b      	mov	r3, r5
    2222:	463a      	mov	r2, r7
    2224:	4621      	mov	r1, r4
    2226:	4630      	mov	r0, r6
    2228:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    222a:	3401      	adds	r4, #1
    222c:	b2e4      	uxtb	r4, r4
    222e:	7873      	ldrb	r3, [r6, #1]
    2230:	42a3      	cmp	r3, r4
    2232:	d8f4      	bhi.n	221e <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    2234:	4630      	mov	r0, r6
    2236:	4b11      	ldr	r3, [pc, #68]	; (227c <grid_led_startup_animation+0x90>)
    2238:	4798      	blx	r3
		delay_ms(1);
    223a:	2001      	movs	r0, #1
    223c:	4b10      	ldr	r3, [pc, #64]	; (2280 <grid_led_startup_animation+0x94>)
    223e:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    2240:	f109 0901 	add.w	r9, r9, #1
    2244:	fa5f f989 	uxtb.w	r9, r9
    2248:	f10a 3aff 	add.w	sl, sl, #4294967295
    224c:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    2250:	d00f      	beq.n	2272 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    2252:	7873      	ldrb	r3, [r6, #1]
    2254:	2b00      	cmp	r3, #0
    2256:	d0ed      	beq.n	2234 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2258:	fb0b f709 	mul.w	r7, fp, r9
    225c:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    2260:	9b03      	ldr	r3, [sp, #12]
    2262:	fb09 f503 	mul.w	r5, r9, r3
    2266:	fb0b f505 	mul.w	r5, fp, r5
    226a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    226e:	2400      	movs	r4, #0
    2270:	e7d5      	b.n	221e <grid_led_startup_animation+0x32>
}
    2272:	b005      	add	sp, #20
    2274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2278:	40000c00 	.word	0x40000c00
    227c:	000021b5 	.word	0x000021b5
    2280:	00004609 	.word	0x00004609
    2284:	00001de9 	.word	0x00001de9

00002288 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    2288:	b570      	push	{r4, r5, r6, lr}
    228a:	4604      	mov	r4, r0
    228c:	4e2b      	ldr	r6, [pc, #172]	; (233c <grid_led_init+0xb4>)
    228e:	2200      	movs	r2, #0
    2290:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2292:	f003 0001 	and.w	r0, r3, #1
    2296:	2800      	cmp	r0, #0
    2298:	bf14      	ite	ne
    229a:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    229e:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    22a2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    22a6:	2d00      	cmp	r5, #0
    22a8:	bf14      	ite	ne
    22aa:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    22ae:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    22b2:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    22b4:	f3c3 0080 	ubfx	r0, r3, #2, #1
    22b8:	2800      	cmp	r0, #0
    22ba:	bf14      	ite	ne
    22bc:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    22c0:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    22c4:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    22c6:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    22ca:	2d00      	cmp	r5, #0
    22cc:	bf14      	ite	ne
    22ce:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    22d2:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    22d6:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    22d8:	f3c3 1500 	ubfx	r5, r3, #4, #1
    22dc:	2d00      	cmp	r5, #0
    22de:	bf14      	ite	ne
    22e0:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    22e4:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    22e8:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    22ea:	f3c3 1040 	ubfx	r0, r3, #5, #1
    22ee:	2800      	cmp	r0, #0
    22f0:	bf14      	ite	ne
    22f2:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    22f6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    22fa:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    22fc:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2300:	2800      	cmp	r0, #0
    2302:	bf14      	ite	ne
    2304:	200e      	movne	r0, #14
    2306:	2008      	moveq	r0, #8
    2308:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    230a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    230e:	2b00      	cmp	r3, #0
    2310:	bf14      	ite	ne
    2312:	23e0      	movne	r3, #224	; 0xe0
    2314:	2380      	moveq	r3, #128	; 0x80
    2316:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    2318:	f846 3f04 	str.w	r3, [r6, #4]!
    231c:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    231e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2322:	d1b5      	bne.n	2290 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    2324:	4620      	mov	r0, r4
    2326:	4b06      	ldr	r3, [pc, #24]	; (2340 <grid_led_init+0xb8>)
    2328:	4798      	blx	r3
	grid_led_hardware_init(mod);
    232a:	4620      	mov	r0, r4
    232c:	4b05      	ldr	r3, [pc, #20]	; (2344 <grid_led_init+0xbc>)
    232e:	4798      	blx	r3
	grid_led_startup_animation(mod);
    2330:	4620      	mov	r0, r4
    2332:	4b05      	ldr	r3, [pc, #20]	; (2348 <grid_led_init+0xc0>)
    2334:	4798      	blx	r3
}
    2336:	2000      	movs	r0, #0
    2338:	bd70      	pop	{r4, r5, r6, pc}
    233a:	bf00      	nop
    233c:	20001da4 	.word	0x20001da4
    2340:	00001fb1 	.word	0x00001fb1
    2344:	00001e29 	.word	0x00001e29
    2348:	000021ed 	.word	0x000021ed

0000234c <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    234c:	b510      	push	{r4, lr}
    234e:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2350:	2200      	movs	r2, #0
    2352:	4b05      	ldr	r3, [pc, #20]	; (2368 <grid_led_hardware_start_transfer+0x1c>)
    2354:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2356:	4805      	ldr	r0, [pc, #20]	; (236c <grid_led_hardware_start_transfer+0x20>)
    2358:	4b05      	ldr	r3, [pc, #20]	; (2370 <grid_led_hardware_start_transfer+0x24>)
    235a:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    235c:	88a2      	ldrh	r2, [r4, #4]
    235e:	68a1      	ldr	r1, [r4, #8]
    2360:	6960      	ldr	r0, [r4, #20]
    2362:	4b04      	ldr	r3, [pc, #16]	; (2374 <grid_led_hardware_start_transfer+0x28>)
    2364:	4798      	blx	r3
    2366:	bd10      	pop	{r4, pc}
    2368:	20001294 	.word	0x20001294
    236c:	20001114 	.word	0x20001114
    2370:	00004c95 	.word	0x00004c95
    2374:	00004795 	.word	0x00004795

00002378 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    2378:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    237a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    237e:	4b13      	ldr	r3, [pc, #76]	; (23cc <grid_module_common_init+0x54>)
    2380:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    2384:	4b12      	ldr	r3, [pc, #72]	; (23d0 <grid_module_common_init+0x58>)
    2386:	4798      	blx	r3
    2388:	b178      	cbz	r0, 23aa <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    238a:	4b11      	ldr	r3, [pc, #68]	; (23d0 <grid_module_common_init+0x58>)
    238c:	4798      	blx	r3
    238e:	2880      	cmp	r0, #128	; 0x80
    2390:	d00f      	beq.n	23b2 <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    2392:	4b0f      	ldr	r3, [pc, #60]	; (23d0 <grid_module_common_init+0x58>)
    2394:	4798      	blx	r3
    2396:	2840      	cmp	r0, #64	; 0x40
    2398:	d00f      	beq.n	23ba <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    239a:	4b0d      	ldr	r3, [pc, #52]	; (23d0 <grid_module_common_init+0x58>)
    239c:	4798      	blx	r3
    239e:	28c0      	cmp	r0, #192	; 0xc0
    23a0:	d00f      	beq.n	23c2 <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    23a2:	480c      	ldr	r0, [pc, #48]	; (23d4 <grid_module_common_init+0x5c>)
    23a4:	4b0c      	ldr	r3, [pc, #48]	; (23d8 <grid_module_common_init+0x60>)
    23a6:	4798      	blx	r3
    23a8:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    23aa:	480c      	ldr	r0, [pc, #48]	; (23dc <grid_module_common_init+0x64>)
    23ac:	4b0c      	ldr	r3, [pc, #48]	; (23e0 <grid_module_common_init+0x68>)
    23ae:	4798      	blx	r3
    23b0:	e7eb      	b.n	238a <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    23b2:	480a      	ldr	r0, [pc, #40]	; (23dc <grid_module_common_init+0x64>)
    23b4:	4b0b      	ldr	r3, [pc, #44]	; (23e4 <grid_module_common_init+0x6c>)
    23b6:	4798      	blx	r3
    23b8:	e7eb      	b.n	2392 <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    23ba:	4808      	ldr	r0, [pc, #32]	; (23dc <grid_module_common_init+0x64>)
    23bc:	4b0a      	ldr	r3, [pc, #40]	; (23e8 <grid_module_common_init+0x70>)
    23be:	4798      	blx	r3
    23c0:	e7eb      	b.n	239a <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    23c2:	4806      	ldr	r0, [pc, #24]	; (23dc <grid_module_common_init+0x64>)
    23c4:	4b09      	ldr	r3, [pc, #36]	; (23ec <grid_module_common_init+0x74>)
    23c6:	4798      	blx	r3
    23c8:	e7eb      	b.n	23a2 <grid_module_common_init+0x2a>
    23ca:	bf00      	nop
    23cc:	41008000 	.word	0x41008000
    23d0:	0000385d 	.word	0x0000385d
    23d4:	20001d08 	.word	0x20001d08
    23d8:	000036e5 	.word	0x000036e5
    23dc:	20001cf8 	.word	0x20001cf8
    23e0:	0000336d 	.word	0x0000336d
    23e4:	0000263d 	.word	0x0000263d
    23e8:	00003025 	.word	0x00003025
    23ec:	00002b61 	.word	0x00002b61

000023f0 <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    23f0:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    23f2:	4803      	ldr	r0, [pc, #12]	; (2400 <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    23f4:	4c03      	ldr	r4, [pc, #12]	; (2404 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    23f6:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    23f8:	4803      	ldr	r0, [pc, #12]	; (2408 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    23fa:	47a0      	blx	r4
    23fc:	bd10      	pop	{r4, pc}
    23fe:	bf00      	nop
    2400:	20001044 	.word	0x20001044
    2404:	00004561 	.word	0x00004561
    2408:	20001218 	.word	0x20001218

0000240c <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    240c:	4b70      	ldr	r3, [pc, #448]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    240e:	781b      	ldrb	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	f000 80d6 	beq.w	25c2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1b6>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    2416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    241a:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    241c:	2300      	movs	r3, #0
    241e:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2422:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    2426:	4b6a      	ldr	r3, [pc, #424]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2428:	785a      	ldrb	r2, [r3, #1]
    242a:	3208      	adds	r2, #8
    242c:	4969      	ldr	r1, [pc, #420]	; (25d4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c8>)
    242e:	5c8d      	ldrb	r5, [r1, r2]
    2430:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    2432:	785a      	ldrb	r2, [r3, #1]
    2434:	b2d2      	uxtb	r2, r2
    2436:	5c8c      	ldrb	r4, [r1, r2]
    2438:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    243a:	785a      	ldrb	r2, [r3, #1]
    243c:	3201      	adds	r2, #1
    243e:	b2d2      	uxtb	r2, r2
    2440:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    2442:	785a      	ldrb	r2, [r3, #1]
    2444:	f002 0207 	and.w	r2, r2, #7
    2448:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    244a:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    244c:	f013 0f01 	tst.w	r3, #1
    2450:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2454:	4b60      	ldr	r3, [pc, #384]	; (25d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    2456:	bf14      	ite	ne
    2458:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    245c:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    2460:	4b5b      	ldr	r3, [pc, #364]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2462:	785b      	ldrb	r3, [r3, #1]
    2464:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2468:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    246c:	4b5a      	ldr	r3, [pc, #360]	; (25d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    246e:	bf14      	ite	ne
    2470:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2474:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    2478:	4b55      	ldr	r3, [pc, #340]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    247a:	785b      	ldrb	r3, [r3, #1]
    247c:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2480:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2484:	4b54      	ldr	r3, [pc, #336]	; (25d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    2486:	bf14      	ite	ne
    2488:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    248c:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2490:	2302      	movs	r3, #2
    2492:	f10d 0206 	add.w	r2, sp, #6
    2496:	2100      	movs	r1, #0
    2498:	4850      	ldr	r0, [pc, #320]	; (25dc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d0>)
    249a:	4e51      	ldr	r6, [pc, #324]	; (25e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    249c:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    249e:	2302      	movs	r3, #2
    24a0:	aa01      	add	r2, sp, #4
    24a2:	2100      	movs	r1, #0
    24a4:	484f      	ldr	r0, [pc, #316]	; (25e4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    24a6:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    24a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    24ac:	f242 7310 	movw	r3, #10000	; 0x2710
    24b0:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    24b2:	bf8c      	ite	hi
    24b4:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    24b6:	237f      	movls	r3, #127	; 0x7f
    24b8:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	
	if (adcresult_1>10000){
    24bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    24c0:	f242 7310 	movw	r3, #10000	; 0x2710
    24c4:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    24c6:	bf8c      	ite	hi
    24c8:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    24ca:	237f      	movls	r3, #127	; 0x7f
    24cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0]){
    24d0:	012e      	lsls	r6, r5, #4
    24d2:	4b45      	ldr	r3, [pc, #276]	; (25e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    24d4:	689b      	ldr	r3, [r3, #8]
    24d6:	4433      	add	r3, r6
    24d8:	68da      	ldr	r2, [r3, #12]
    24da:	7812      	ldrb	r2, [r2, #0]
    24dc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    24e0:	4291      	cmp	r1, r2
    24e2:	d02e      	beq.n	2542 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x136>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    24e4:	2a00      	cmp	r2, #0
    24e6:	bf0c      	ite	eq
    24e8:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    24ec:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    24f0:	6858      	ldr	r0, [r3, #4]
    24f2:	bf0c      	ite	eq
    24f4:	2290      	moveq	r2, #144	; 0x90
    24f6:	2280      	movne	r2, #128	; 0x80
    24f8:	2102      	movs	r1, #2
    24fa:	3005      	adds	r0, #5
    24fc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 25f0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>
    2500:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    2502:	4f39      	ldr	r7, [pc, #228]	; (25e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2504:	68bb      	ldr	r3, [r7, #8]
    2506:	4433      	add	r3, r6
    2508:	6858      	ldr	r0, [r3, #4]
    250a:	462a      	mov	r2, r5
    250c:	2102      	movs	r1, #2
    250e:	3007      	adds	r0, #7
    2510:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    2512:	68bb      	ldr	r3, [r7, #8]
    2514:	4433      	add	r3, r6
    2516:	6858      	ldr	r0, [r3, #4]
    2518:	464a      	mov	r2, r9
    251a:	2102      	movs	r1, #2
    251c:	3009      	adds	r0, #9
    251e:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    2520:	68bb      	ldr	r3, [r7, #8]
    2522:	4433      	add	r3, r6
    2524:	6858      	ldr	r0, [r3, #4]
    2526:	ea4f 0249 	mov.w	r2, r9, lsl #1
    252a:	2102      	movs	r1, #2
    252c:	3015      	adds	r0, #21
    252e:	47c0      	blx	r8
		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    2530:	68bb      	ldr	r3, [r7, #8]
    2532:	441e      	add	r6, r3
    2534:	68f3      	ldr	r3, [r6, #12]
    2536:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    253a:	4629      	mov	r1, r5
    253c:	4638      	mov	r0, r7
    253e:	4b2b      	ldr	r3, [pc, #172]	; (25ec <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    2540:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0]){
    2542:	0125      	lsls	r5, r4, #4
    2544:	4b28      	ldr	r3, [pc, #160]	; (25e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2546:	689b      	ldr	r3, [r3, #8]
    2548:	442b      	add	r3, r5
    254a:	68da      	ldr	r2, [r3, #12]
    254c:	7812      	ldrb	r2, [r2, #0]
    254e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2552:	4291      	cmp	r1, r2
    2554:	d02d      	beq.n	25b2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1a6>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2556:	2a00      	cmp	r2, #0
    2558:	bf0c      	ite	eq
    255a:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    255e:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    2562:	6858      	ldr	r0, [r3, #4]
    2564:	bf0c      	ite	eq
    2566:	2290      	moveq	r2, #144	; 0x90
    2568:	2280      	movne	r2, #128	; 0x80
    256a:	2102      	movs	r1, #2
    256c:	3005      	adds	r0, #5
    256e:	4f20      	ldr	r7, [pc, #128]	; (25f0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>)
    2570:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    2572:	4e1d      	ldr	r6, [pc, #116]	; (25e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2574:	68b3      	ldr	r3, [r6, #8]
    2576:	442b      	add	r3, r5
    2578:	6858      	ldr	r0, [r3, #4]
    257a:	4622      	mov	r2, r4
    257c:	2102      	movs	r1, #2
    257e:	3007      	adds	r0, #7
    2580:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    2582:	68b3      	ldr	r3, [r6, #8]
    2584:	442b      	add	r3, r5
    2586:	6858      	ldr	r0, [r3, #4]
    2588:	4642      	mov	r2, r8
    258a:	2102      	movs	r1, #2
    258c:	3009      	adds	r0, #9
    258e:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    2590:	68b3      	ldr	r3, [r6, #8]
    2592:	442b      	add	r3, r5
    2594:	6858      	ldr	r0, [r3, #4]
    2596:	ea4f 0248 	mov.w	r2, r8, lsl #1
    259a:	2102      	movs	r1, #2
    259c:	3015      	adds	r0, #21
    259e:	47b8      	blx	r7
		
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    25a0:	68b3      	ldr	r3, [r6, #8]
    25a2:	441d      	add	r5, r3
    25a4:	68eb      	ldr	r3, [r5, #12]
    25a6:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    25aa:	4621      	mov	r1, r4
    25ac:	4630      	mov	r0, r6
    25ae:	4b0f      	ldr	r3, [pc, #60]	; (25ec <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    25b0:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    25b2:	2200      	movs	r2, #0
    25b4:	4b06      	ldr	r3, [pc, #24]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    25b6:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    25b8:	4b0e      	ldr	r3, [pc, #56]	; (25f4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>)
    25ba:	4798      	blx	r3
}
    25bc:	b003      	add	sp, #12
    25be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    25c2:	4a03      	ldr	r2, [pc, #12]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    25c4:	7813      	ldrb	r3, [r2, #0]
    25c6:	3301      	adds	r3, #1
    25c8:	b2db      	uxtb	r3, r3
    25ca:	7013      	strb	r3, [r2, #0]
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop
    25d0:	20000644 	.word	0x20000644
    25d4:	20000300 	.word	0x20000300
    25d8:	41008000 	.word	0x41008000
    25dc:	20001044 	.word	0x20001044
    25e0:	00004481 	.word	0x00004481
    25e4:	20001218 	.word	0x20001218
    25e8:	20001cf8 	.word	0x20001cf8
    25ec:	00003ebf 	.word	0x00003ebf
    25f0:	00003825 	.word	0x00003825
    25f4:	000023f1 	.word	0x000023f1

000025f8 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    25f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    25fa:	4f0b      	ldr	r7, [pc, #44]	; (2628 <grid_module_bu16_revb_hardware_init+0x30>)
    25fc:	4c0b      	ldr	r4, [pc, #44]	; (262c <grid_module_bu16_revb_hardware_init+0x34>)
    25fe:	463b      	mov	r3, r7
    2600:	2200      	movs	r2, #0
    2602:	4611      	mov	r1, r2
    2604:	4620      	mov	r0, r4
    2606:	4e0a      	ldr	r6, [pc, #40]	; (2630 <grid_module_bu16_revb_hardware_init+0x38>)
    2608:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    260a:	4d0a      	ldr	r5, [pc, #40]	; (2634 <grid_module_bu16_revb_hardware_init+0x3c>)
    260c:	463b      	mov	r3, r7
    260e:	2200      	movs	r2, #0
    2610:	4611      	mov	r1, r2
    2612:	4628      	mov	r0, r5
    2614:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2616:	2100      	movs	r1, #0
    2618:	4620      	mov	r0, r4
    261a:	4c07      	ldr	r4, [pc, #28]	; (2638 <grid_module_bu16_revb_hardware_init+0x40>)
    261c:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    261e:	2100      	movs	r1, #0
    2620:	4628      	mov	r0, r5
    2622:	47a0      	blx	r4
    2624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2626:	bf00      	nop
    2628:	0000240d 	.word	0x0000240d
    262c:	20001044 	.word	0x20001044
    2630:	00004401 	.word	0x00004401
    2634:	20001218 	.word	0x20001218
    2638:	000043c1 	.word	0x000043c1

0000263c <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2640:	b09b      	sub	sp, #108	; 0x6c
    2642:	4681      	mov	r9, r0

	grid_led_init(&grid_led_state, 16);
    2644:	2110      	movs	r1, #16
    2646:	4825      	ldr	r0, [pc, #148]	; (26dc <grid_module_bu16_revb_init+0xa0>)
    2648:	4b25      	ldr	r3, [pc, #148]	; (26e0 <grid_module_bu16_revb_init+0xa4>)
    264a:	4798      	blx	r3
	grid_ui_model_init(mod, 16);
    264c:	2110      	movs	r1, #16
    264e:	4648      	mov	r0, r9
    2650:	4b24      	ldr	r3, [pc, #144]	; (26e4 <grid_module_bu16_revb_init+0xa8>)
    2652:	4798      	blx	r3
    2654:	f10d 0837 	add.w	r8, sp, #55	; 0x37
    2658:	2500      	movs	r5, #0
		
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30];
			
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    265a:	4f23      	ldr	r7, [pc, #140]	; (26e8 <grid_module_bu16_revb_init+0xac>)
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    265c:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 2700 <grid_module_bu16_revb_init+0xc4>
    2660:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2704 <grid_module_bu16_revb_init+0xc8>
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2664:	ac0e      	add	r4, sp, #56	; 0x38
    2666:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    266a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    266e:	2303      	movs	r3, #3
    2670:	930b      	str	r3, [sp, #44]	; 0x2c
    2672:	2400      	movs	r4, #0
    2674:	940a      	str	r4, [sp, #40]	; 0x28
    2676:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    267a:	9209      	str	r2, [sp, #36]	; 0x24
    267c:	2263      	movs	r2, #99	; 0x63
    267e:	9208      	str	r2, [sp, #32]
    2680:	9407      	str	r4, [sp, #28]
    2682:	9306      	str	r3, [sp, #24]
    2684:	2602      	movs	r6, #2
    2686:	9605      	str	r6, [sp, #20]
    2688:	9304      	str	r3, [sp, #16]
    268a:	9403      	str	r4, [sp, #12]
    268c:	9502      	str	r5, [sp, #8]
    268e:	2390      	movs	r3, #144	; 0x90
    2690:	9301      	str	r3, [sp, #4]
    2692:	9400      	str	r4, [sp, #0]
    2694:	4623      	mov	r3, r4
    2696:	4632      	mov	r2, r6
    2698:	4659      	mov	r1, fp
    269a:	a812      	add	r0, sp, #72	; 0x48
    269c:	47d0      	blx	sl

		);
			
		
		
		uint8_t payload_length = strlen(payload_template);
    269e:	a812      	add	r0, sp, #72	; 0x48
    26a0:	4b12      	ldr	r3, [pc, #72]	; (26ec <grid_module_bu16_revb_init+0xb0>)
    26a2:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    26a4:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    26a8:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    26ac:	9602      	str	r6, [sp, #8]
    26ae:	ab0d      	add	r3, sp, #52	; 0x34
    26b0:	9301      	str	r3, [sp, #4]
    26b2:	b2c0      	uxtb	r0, r0
    26b4:	9000      	str	r0, [sp, #0]
    26b6:	ab12      	add	r3, sp, #72	; 0x48
    26b8:	4632      	mov	r2, r6
    26ba:	b2e9      	uxtb	r1, r5
    26bc:	4648      	mov	r0, r9
    26be:	4c0c      	ldr	r4, [pc, #48]	; (26f0 <grid_module_bu16_revb_init+0xb4>)
    26c0:	47a0      	blx	r4
    26c2:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    26c4:	2d10      	cmp	r5, #16
    26c6:	d1cd      	bne.n	2664 <grid_module_bu16_revb_init+0x28>
		

	}
	
	grid_report_sys_init(mod);
    26c8:	4648      	mov	r0, r9
    26ca:	4b0a      	ldr	r3, [pc, #40]	; (26f4 <grid_module_bu16_revb_init+0xb8>)
    26cc:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    26ce:	4b0a      	ldr	r3, [pc, #40]	; (26f8 <grid_module_bu16_revb_init+0xbc>)
    26d0:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    26d2:	4b0a      	ldr	r3, [pc, #40]	; (26fc <grid_module_bu16_revb_init+0xc0>)
    26d4:	4798      	blx	r3

};
    26d6:	b01b      	add	sp, #108	; 0x6c
    26d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26dc:	20003614 	.word	0x20003614
    26e0:	00002289 	.word	0x00002289
    26e4:	00003bfd 	.word	0x00003bfd
    26e8:	0000d03c 	.word	0x0000d03c
    26ec:	0000bf19 	.word	0x0000bf19
    26f0:	00003cc1 	.word	0x00003cc1
    26f4:	00003ce5 	.word	0x00003ce5
    26f8:	000025f9 	.word	0x000025f9
    26fc:	000023f1 	.word	0x000023f1
    2700:	0000d04c 	.word	0x0000d04c
    2704:	0000bed1 	.word	0x0000bed1

00002708 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    2708:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    270a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    270e:	4b06      	ldr	r3, [pc, #24]	; (2728 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    2710:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    2712:	4c06      	ldr	r4, [pc, #24]	; (272c <grid_module_en16_reva_hardware_start_transfer+0x24>)
    2714:	4620      	mov	r0, r4
    2716:	4b06      	ldr	r3, [pc, #24]	; (2730 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    2718:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    271a:	2308      	movs	r3, #8
    271c:	4a05      	ldr	r2, [pc, #20]	; (2734 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    271e:	4906      	ldr	r1, [pc, #24]	; (2738 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    2720:	4620      	mov	r0, r4
    2722:	4c06      	ldr	r4, [pc, #24]	; (273c <grid_module_en16_reva_hardware_start_transfer+0x34>)
    2724:	47a0      	blx	r4
    2726:	bd10      	pop	{r4, pc}
    2728:	41008000 	.word	0x41008000
    272c:	20000f38 	.word	0x20000f38
    2730:	00004a69 	.word	0x00004a69
    2734:	200017d8 	.word	0x200017d8
    2738:	20000310 	.word	0x20000310
    273c:	00004b09 	.word	0x00004b09

00002740 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    2740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2744:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2746:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    274a:	4bad      	ldr	r3, [pc, #692]	; (2a00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    274c:	615a      	str	r2, [r3, #20]
    274e:	2700      	movs	r7, #0
    2750:	e07b      	b.n	284a <grid_module_en16_reva_hardware_transfer_complete_cb+0x10a>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    2752:	49ac      	ldr	r1, [pc, #688]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2754:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2758:	78c9      	ldrb	r1, [r1, #3]
    275a:	42d1      	cmn	r1, r2
    275c:	d405      	bmi.n	276a <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a>
						grid_ui_encoder_array[i].rotation_value += xi;
    275e:	4aa9      	ldr	r2, [pc, #676]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2760:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2764:	440b      	add	r3, r1
    2766:	70d3      	strb	r3, [r2, #3]
    2768:	e00a      	b.n	2780 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    276a:	4ba6      	ldr	r3, [pc, #664]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    276c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2770:	2200      	movs	r2, #0
    2772:	70da      	strb	r2, [r3, #3]
    2774:	e004      	b.n	2780 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    2776:	4ba3      	ldr	r3, [pc, #652]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2778:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    277c:	227f      	movs	r2, #127	; 0x7f
    277e:	70da      	strb	r2, [r3, #3]
				
				uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
				
				
				uint8_t value = 0;
				if (0 == grid_report_ui_get_changed_flag(mod, i+16)){
    2780:	f104 0810 	add.w	r8, r4, #16
    2784:	fa5f f888 	uxtb.w	r8, r8
    2788:	4641      	mov	r1, r8
    278a:	489f      	ldr	r0, [pc, #636]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    278c:	4b9f      	ldr	r3, [pc, #636]	; (2a0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    278e:	4798      	blx	r3
    2790:	2800      	cmp	r0, #0
    2792:	f040 8107 	bne.w	29a4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x264>
					value = 64; //CENTER
					mod->report_ui_array[i+16].helper[0] = 0;
    2796:	4b9c      	ldr	r3, [pc, #624]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2798:	689b      	ldr	r3, [r3, #8]
    279a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    279e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    27a2:	2200      	movs	r2, #0
    27a4:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    27a6:	2340      	movs	r3, #64	; 0x40
				}
				else{
					value = mod->report_ui_array[i+16].helper[0];
				}
				
				value +=  delta*velocityfactor;
    27a8:	fb06 3505 	mla	r5, r6, r5, r3
    27ac:	b2ed      	uxtb	r5, r5
				
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
				
				if (value != mod->report_ui_array[i+16].helper[0]){
    27ae:	f104 0610 	add.w	r6, r4, #16
    27b2:	0136      	lsls	r6, r6, #4
    27b4:	4b94      	ldr	r3, [pc, #592]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    27b6:	689b      	ldr	r3, [r3, #8]
    27b8:	4433      	add	r3, r6
    27ba:	68da      	ldr	r2, [r3, #12]
    27bc:	7812      	ldrb	r2, [r2, #0]
    27be:	42aa      	cmp	r2, r5
    27c0:	d03f      	beq.n	2842 <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
    27c2:	4a90      	ldr	r2, [pc, #576]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    27c4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    27c8:	f892 a003 	ldrb.w	sl, [r2, #3]
    27cc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    27d0:	fa5f fa8a 	uxtb.w	sl, sl
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[5], 2, command);
    27d4:	6858      	ldr	r0, [r3, #4]
    27d6:	22b0      	movs	r2, #176	; 0xb0
    27d8:	2102      	movs	r1, #2
    27da:	3005      	adds	r0, #5
    27dc:	f8df b264 	ldr.w	fp, [pc, #612]	; 2a44 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    27e0:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[7], 2, i);
    27e2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    27e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    27ea:	4433      	add	r3, r6
    27ec:	6858      	ldr	r0, [r3, #4]
    27ee:	4622      	mov	r2, r4
    27f0:	2102      	movs	r1, #2
    27f2:	3007      	adds	r0, #7
    27f4:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[9], 2, value);
    27f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    27fa:	4433      	add	r3, r6
    27fc:	6858      	ldr	r0, [r3, #4]
    27fe:	462a      	mov	r2, r5
    2800:	2102      	movs	r1, #2
    2802:	3009      	adds	r0, #9
    2804:	47d8      	blx	fp
					
					mod->report_ui_array[i+16].helper[0] = value;
    2806:	f8d9 3008 	ldr.w	r3, [r9, #8]
    280a:	4433      	add	r3, r6
    280c:	68db      	ldr	r3, [r3, #12]
    280e:	701d      	strb	r5, [r3, #0]
					grid_report_ui_set_changed_flag(mod, i+16);
    2810:	4641      	mov	r1, r8
    2812:	4648      	mov	r0, r9
    2814:	4d7e      	ldr	r5, [pc, #504]	; (2a10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2816:	47a8      	blx	r5
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, actuator); // LED
    2818:	f506 7680 	add.w	r6, r6, #256	; 0x100
    281c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2820:	4433      	add	r3, r6
    2822:	6858      	ldr	r0, [r3, #4]
    2824:	4652      	mov	r2, sl
    2826:	2102      	movs	r1, #2
    2828:	3009      	adds	r0, #9
    282a:	47d8      	blx	fp
					mod->report_ui_array[i+16+16].helper[0] = actuator;
    282c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2830:	441e      	add	r6, r3
    2832:	68f3      	ldr	r3, [r6, #12]
    2834:	f883 a000 	strb.w	sl, [r3]
					grid_report_ui_set_changed_flag(mod, i+16+16);
    2838:	f104 0120 	add.w	r1, r4, #32
    283c:	b2c9      	uxtb	r1, r1
    283e:	4648      	mov	r0, r9
    2840:	47a8      	blx	r5
    2842:	3701      	adds	r7, #1
	for (uint8_t j=0; j<16; j++){
    2844:	2f10      	cmp	r7, #16
    2846:	f000 811e 	beq.w	2a86 <grid_module_en16_reva_hardware_transfer_complete_cb+0x346>
    284a:	b2f9      	uxtb	r1, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    284c:	084b      	lsrs	r3, r1, #1
    284e:	4a71      	ldr	r2, [pc, #452]	; (2a14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    2850:	5cd3      	ldrb	r3, [r2, r3]
    2852:	f001 0201 	and.w	r2, r1, #1
    2856:	0092      	lsls	r2, r2, #2
    2858:	4113      	asrs	r3, r2
    285a:	b2db      	uxtb	r3, r3
    285c:	f003 000f 	and.w	r0, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    2860:	4a6d      	ldr	r2, [pc, #436]	; (2a18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    2862:	5dd2      	ldrb	r2, [r2, r7]
    2864:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    2866:	4290      	cmp	r0, r2
    2868:	d0eb      	beq.n	2842 <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    286a:	4a6c      	ldr	r2, [pc, #432]	; (2a1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
    286c:	5cbc      	ldrb	r4, [r7, r2]
			UI_SPI_DEBUG = j;
    286e:	4a6c      	ldr	r2, [pc, #432]	; (2a20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>)
    2870:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    2872:	0882      	lsrs	r2, r0, #2
			uint8_t phase_a = (new_value>>1)&1;
    2874:	f3c0 0840 	ubfx	r8, r0, #1, #1
			uint8_t phase_b = (new_value)&1;
    2878:	f003 0501 	and.w	r5, r3, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    287c:	4b61      	ldr	r3, [pc, #388]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    287e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2882:	785b      	ldrb	r3, [r3, #1]
    2884:	4293      	cmp	r3, r2
    2886:	d035      	beq.n	28f4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1b4>
				grid_ui_encoder_array[i].button_changed = 1;
    2888:	4b5e      	ldr	r3, [pc, #376]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    288a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    288e:	2101      	movs	r1, #1
    2890:	7099      	strb	r1, [r3, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    2892:	705a      	strb	r2, [r3, #1]
					velocity = 0;
    2894:	2a00      	cmp	r2, #0
    2896:	bf0c      	ite	eq
    2898:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    289c:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[5], 2, command);
    28a0:	ea4f 1604 	mov.w	r6, r4, lsl #4
    28a4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    28a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28ac:	4433      	add	r3, r6
    28ae:	6858      	ldr	r0, [r3, #4]
    28b0:	bf0c      	ite	eq
    28b2:	2290      	moveq	r2, #144	; 0x90
    28b4:	2280      	movne	r2, #128	; 0x80
    28b6:	2102      	movs	r1, #2
    28b8:	3005      	adds	r0, #5
    28ba:	f8df b188 	ldr.w	fp, [pc, #392]	; 2a44 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    28be:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[7], 2, i);
    28c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28c4:	4433      	add	r3, r6
    28c6:	6858      	ldr	r0, [r3, #4]
    28c8:	4622      	mov	r2, r4
    28ca:	2102      	movs	r1, #2
    28cc:	3007      	adds	r0, #7
    28ce:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[9], 2, velocity);
    28d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28d4:	4433      	add	r3, r6
    28d6:	6858      	ldr	r0, [r3, #4]
    28d8:	4652      	mov	r2, sl
    28da:	2102      	movs	r1, #2
    28dc:	3009      	adds	r0, #9
    28de:	47d8      	blx	fp
				mod->report_ui_array[i].helper[0] = velocity;
    28e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28e4:	441e      	add	r6, r3
    28e6:	68f3      	ldr	r3, [r6, #12]
    28e8:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, i);
    28ec:	4621      	mov	r1, r4
    28ee:	4648      	mov	r0, r9
    28f0:	4b47      	ldr	r3, [pc, #284]	; (2a10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    28f2:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    28f4:	4b43      	ldr	r3, [pc, #268]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    28f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
			if (a_now != a_prev){
    28fa:	7b5b      	ldrb	r3, [r3, #13]
    28fc:	4543      	cmp	r3, r8
    28fe:	f000 80ca 	beq.w	2a96 <grid_module_en16_reva_hardware_transfer_complete_cb+0x356>
					delta = +1;
    2902:	45a8      	cmp	r8, r5
    2904:	bf14      	ite	ne
    2906:	f04f 36ff 	movne.w	r6, #4294967295
    290a:	2601      	moveq	r6, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    290c:	4b3d      	ldr	r3, [pc, #244]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    290e:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    2912:	f882 800d 	strb.w	r8, [r2, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2916:	7395      	strb	r5, [r2, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i+1].last_real_time);
    2918:	6991      	ldr	r1, [r2, #24]
    291a:	4842      	ldr	r0, [pc, #264]	; (2a24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    291c:	4b42      	ldr	r3, [pc, #264]	; (2a28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e8>)
    291e:	4798      	blx	r3
    2920:	9001      	str	r0, [sp, #4]
				if (elapsed_time>400){
    2922:	9b01      	ldr	r3, [sp, #4]
    2924:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2928:	bf84      	itt	hi
    292a:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    292e:	9301      	strhi	r3, [sp, #4]
				if (elapsed_time<20){
    2930:	9b01      	ldr	r3, [sp, #4]
    2932:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    2934:	bf9c      	itt	ls
    2936:	2314      	movls	r3, #20
    2938:	9301      	strls	r3, [sp, #4]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    293a:	9b01      	ldr	r3, [sp, #4]
    293c:	9801      	ldr	r0, [sp, #4]
    293e:	fb00 f003 	mul.w	r0, r0, r3
    2942:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2946:	f500 7080 	add.w	r0, r0, #256	; 0x100
    294a:	4b38      	ldr	r3, [pc, #224]	; (2a2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ec>)
    294c:	4798      	blx	r3
    294e:	a32a      	add	r3, pc, #168	; (adr r3, 29f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
    2950:	e9d3 2300 	ldrd	r2, r3, [r3]
    2954:	4d36      	ldr	r5, [pc, #216]	; (2a30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>)
    2956:	47a8      	blx	r5
    2958:	2200      	movs	r2, #0
    295a:	4b36      	ldr	r3, [pc, #216]	; (2a34 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f4>)
    295c:	4d36      	ldr	r5, [pc, #216]	; (2a38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>)
    295e:	47a8      	blx	r5
    2960:	4b36      	ldr	r3, [pc, #216]	; (2a3c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    2962:	4798      	blx	r3
    2964:	b2c5      	uxtb	r5, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2966:	482f      	ldr	r0, [pc, #188]	; (2a24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2968:	4b35      	ldr	r3, [pc, #212]	; (2a40 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    296a:	4798      	blx	r3
    296c:	4b25      	ldr	r3, [pc, #148]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    296e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2972:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2974:	fb05 6306 	mla	r3, r5, r6, r6
    2978:	b29b      	uxth	r3, r3
    297a:	b21a      	sxth	r2, r3
				if (delta<0){
    297c:	2e00      	cmp	r6, #0
    297e:	f6ff aee8 	blt.w	2752 <grid_module_en16_reva_hardware_transfer_complete_cb+0x12>
				else if (delta>0){
    2982:	2e00      	cmp	r6, #0
    2984:	f77f aefc 	ble.w	2780 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    2988:	491e      	ldr	r1, [pc, #120]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    298a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    298e:	78c9      	ldrb	r1, [r1, #3]
    2990:	440a      	add	r2, r1
    2992:	2a7f      	cmp	r2, #127	; 0x7f
    2994:	f73f aeef 	bgt.w	2776 <grid_module_en16_reva_hardware_transfer_complete_cb+0x36>
						grid_ui_encoder_array[i].rotation_value += xi;
    2998:	4a1a      	ldr	r2, [pc, #104]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    299a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    299e:	440b      	add	r3, r1
    29a0:	70d3      	strb	r3, [r2, #3]
    29a2:	e6ed      	b.n	2780 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					value = mod->report_ui_array[i+16].helper[0];
    29a4:	4b18      	ldr	r3, [pc, #96]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    29a6:	689b      	ldr	r3, [r3, #8]
    29a8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    29ac:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    29b0:	781b      	ldrb	r3, [r3, #0]
    29b2:	e6f9      	b.n	27a8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x68>
			else{ //DELTA==0

				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
					if (grid_ui_encoder_array[i].rotation_value > 64){

						grid_ui_encoder_array[i].rotation_value--;
    29b4:	3b01      	subs	r3, #1
    29b6:	b2db      	uxtb	r3, r3
    29b8:	4a12      	ldr	r2, [pc, #72]	; (2a04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    29ba:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    29be:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    29c0:	005b      	lsls	r3, r3, #1
    29c2:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    29c4:	f104 0820 	add.w	r8, r4, #32
    29c8:	ea4f 1908 	mov.w	r9, r8, lsl #4
    29cc:	4e0e      	ldr	r6, [pc, #56]	; (2a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    29ce:	68b3      	ldr	r3, [r6, #8]
    29d0:	444b      	add	r3, r9
    29d2:	6858      	ldr	r0, [r3, #4]
    29d4:	462a      	mov	r2, r5
    29d6:	2102      	movs	r1, #2
    29d8:	3009      	adds	r0, #9
    29da:	4b1a      	ldr	r3, [pc, #104]	; (2a44 <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    29dc:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    29de:	68b3      	ldr	r3, [r6, #8]
    29e0:	444b      	add	r3, r9
    29e2:	68db      	ldr	r3, [r3, #12]
    29e4:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    29e6:	fa5f f188 	uxtb.w	r1, r8
    29ea:	4630      	mov	r0, r6
    29ec:	4b08      	ldr	r3, [pc, #32]	; (2a10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    29ee:	4798      	blx	r3
    29f0:	e063      	b.n	2aba <grid_module_en16_reva_hardware_transfer_complete_cb+0x37a>
    29f2:	bf00      	nop
    29f4:	f3af 8000 	nop.w
    29f8:	00000000 	.word	0x00000000
    29fc:	40e38800 	.word	0x40e38800
    2a00:	41008000 	.word	0x41008000
    2a04:	20003844 	.word	0x20003844
    2a08:	20001cf8 	.word	0x20001cf8
    2a0c:	00003eb3 	.word	0x00003eb3
    2a10:	00003ebf 	.word	0x00003ebf
    2a14:	200017d8 	.word	0x200017d8
    2a18:	200017c0 	.word	0x200017c0
    2a1c:	20000320 	.word	0x20000320
    2a20:	200017a8 	.word	0x200017a8
    2a24:	20001d08 	.word	0x20001d08
    2a28:	00003729 	.word	0x00003729
    2a2c:	0000b525 	.word	0x0000b525
    2a30:	0000b865 	.word	0x0000b865
    2a34:	3ff00000 	.word	0x3ff00000
    2a38:	0000b2ad 	.word	0x0000b2ad
    2a3c:	0000ba35 	.word	0x0000ba35
    2a40:	00003725 	.word	0x00003725
    2a44:	00003825 	.word	0x00003825

					}
					if (grid_ui_encoder_array[i].rotation_value < 64){

						grid_ui_encoder_array[i].rotation_value++;
    2a48:	3301      	adds	r3, #1
    2a4a:	b2db      	uxtb	r3, r3
    2a4c:	4a22      	ldr	r2, [pc, #136]	; (2ad8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2a4e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2a52:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2a54:	005b      	lsls	r3, r3, #1
    2a56:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2a58:	f104 0820 	add.w	r8, r4, #32
    2a5c:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2a60:	4e1e      	ldr	r6, [pc, #120]	; (2adc <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>)
    2a62:	68b3      	ldr	r3, [r6, #8]
    2a64:	444b      	add	r3, r9
    2a66:	6858      	ldr	r0, [r3, #4]
    2a68:	462a      	mov	r2, r5
    2a6a:	2102      	movs	r1, #2
    2a6c:	3009      	adds	r0, #9
    2a6e:	4b1c      	ldr	r3, [pc, #112]	; (2ae0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a0>)
    2a70:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2a72:	68b3      	ldr	r3, [r6, #8]
    2a74:	444b      	add	r3, r9
    2a76:	68db      	ldr	r3, [r3, #12]
    2a78:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2a7a:	fa5f f188 	uxtb.w	r1, r8
    2a7e:	4630      	mov	r0, r6
    2a80:	4b18      	ldr	r3, [pc, #96]	; (2ae4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a4>)
    2a82:	4798      	blx	r3
    2a84:	e01f      	b.n	2ac6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x386>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    2a86:	2200      	movs	r2, #0
    2a88:	4b17      	ldr	r3, [pc, #92]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a8>)
    2a8a:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2a8c:	4b17      	ldr	r3, [pc, #92]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ac>)
    2a8e:	4798      	blx	r3
}
    2a90:	b003      	add	sp, #12
    2a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2a96:	4b10      	ldr	r3, [pc, #64]	; (2ad8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2a98:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2a9c:	739d      	strb	r5, [r3, #14]
				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
    2a9e:	6899      	ldr	r1, [r3, #8]
    2aa0:	4813      	ldr	r0, [pc, #76]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2aa2:	4b14      	ldr	r3, [pc, #80]	; (2af4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b4>)
    2aa4:	4798      	blx	r3
    2aa6:	28c8      	cmp	r0, #200	; 0xc8
    2aa8:	f67f aecb 	bls.w	2842 <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
					if (grid_ui_encoder_array[i].rotation_value > 64){
    2aac:	4b0a      	ldr	r3, [pc, #40]	; (2ad8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2aae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2ab2:	78db      	ldrb	r3, [r3, #3]
    2ab4:	2b40      	cmp	r3, #64	; 0x40
    2ab6:	f63f af7d 	bhi.w	29b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x274>
					if (grid_ui_encoder_array[i].rotation_value < 64){
    2aba:	4b07      	ldr	r3, [pc, #28]	; (2ad8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2abc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2ac0:	78db      	ldrb	r3, [r3, #3]
    2ac2:	2b3f      	cmp	r3, #63	; 0x3f
    2ac4:	d9c0      	bls.n	2a48 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>
					grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2ac6:	480a      	ldr	r0, [pc, #40]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2ac8:	4b0b      	ldr	r3, [pc, #44]	; (2af8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b8>)
    2aca:	4798      	blx	r3
    2acc:	4902      	ldr	r1, [pc, #8]	; (2ad8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2ace:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    2ad2:	60a0      	str	r0, [r4, #8]
    2ad4:	e6b5      	b.n	2842 <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
    2ad6:	bf00      	nop
    2ad8:	20003844 	.word	0x20003844
    2adc:	20001cf8 	.word	0x20001cf8
    2ae0:	00003825 	.word	0x00003825
    2ae4:	00003ebf 	.word	0x00003ebf
    2ae8:	20003640 	.word	0x20003640
    2aec:	00002709 	.word	0x00002709
    2af0:	20001d08 	.word	0x20001d08
    2af4:	00003729 	.word	0x00003729
    2af8:	00003725 	.word	0x00003725

00002afc <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2afc:	b510      	push	{r4, lr}
    2afe:	4b0e      	ldr	r3, [pc, #56]	; (2b38 <grid_module_en16_reva_hardware_init+0x3c>)
    2b00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2b04:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b06:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b0c:	629a      	str	r2, [r3, #40]	; 0x28
    2b0e:	4a0b      	ldr	r2, [pc, #44]	; (2b3c <grid_module_en16_reva_hardware_init+0x40>)
    2b10:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2b12:	4c0b      	ldr	r4, [pc, #44]	; (2b40 <grid_module_en16_reva_hardware_init+0x44>)
    2b14:	2103      	movs	r1, #3
    2b16:	4620      	mov	r0, r4
    2b18:	4b0a      	ldr	r3, [pc, #40]	; (2b44 <grid_module_en16_reva_hardware_init+0x48>)
    2b1a:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2b1c:	490a      	ldr	r1, [pc, #40]	; (2b48 <grid_module_en16_reva_hardware_init+0x4c>)
    2b1e:	4620      	mov	r0, r4
    2b20:	4b0a      	ldr	r3, [pc, #40]	; (2b4c <grid_module_en16_reva_hardware_init+0x50>)
    2b22:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2b24:	490a      	ldr	r1, [pc, #40]	; (2b50 <grid_module_en16_reva_hardware_init+0x54>)
    2b26:	4620      	mov	r0, r4
    2b28:	4b0a      	ldr	r3, [pc, #40]	; (2b54 <grid_module_en16_reva_hardware_init+0x58>)
    2b2a:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2b2c:	4a0a      	ldr	r2, [pc, #40]	; (2b58 <grid_module_en16_reva_hardware_init+0x5c>)
    2b2e:	2100      	movs	r1, #0
    2b30:	4620      	mov	r0, r4
    2b32:	4b0a      	ldr	r3, [pc, #40]	; (2b5c <grid_module_en16_reva_hardware_init+0x60>)
    2b34:	4798      	blx	r3
    2b36:	bd10      	pop	{r4, pc}
    2b38:	41008000 	.word	0x41008000
    2b3c:	c0000020 	.word	0xc0000020
    2b40:	20000f38 	.word	0x20000f38
    2b44:	00004acd 	.word	0x00004acd
    2b48:	00061a80 	.word	0x00061a80
    2b4c:	00004a91 	.word	0x00004a91
    2b50:	200017bc 	.word	0x200017bc
    2b54:	00004bb5 	.word	0x00004bb5
    2b58:	00002741 	.word	0x00002741
    2b5c:	00004b71 	.word	0x00004b71

00002b60 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b64:	b091      	sub	sp, #68	; 0x44
    2b66:	4681      	mov	r9, r0
	
	
	grid_led_init(&grid_led_state, 16);
    2b68:	2110      	movs	r1, #16
    2b6a:	4830      	ldr	r0, [pc, #192]	; (2c2c <grid_module_en16_reva_init+0xcc>)
    2b6c:	4b30      	ldr	r3, [pc, #192]	; (2c30 <grid_module_en16_reva_init+0xd0>)
    2b6e:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16);
    2b70:	2130      	movs	r1, #48	; 0x30
    2b72:	4648      	mov	r0, r9
    2b74:	4b2f      	ldr	r3, [pc, #188]	; (2c34 <grid_module_en16_reva_init+0xd4>)
    2b76:	4798      	blx	r3
    2b78:	2400      	movs	r4, #0
			);
		
		}
		else{ // LED
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b7a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2c54 <grid_module_en16_reva_init+0xf4>
    2b7e:	4625      	mov	r5, r4
    2b80:	e02f      	b.n	2be2 <grid_module_en16_reva_init+0x82>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b82:	2303      	movs	r3, #3
    2b84:	9304      	str	r3, [sp, #16]
    2b86:	9503      	str	r5, [sp, #12]
    2b88:	9402      	str	r4, [sp, #8]
    2b8a:	2390      	movs	r3, #144	; 0x90
    2b8c:	9301      	str	r3, [sp, #4]
    2b8e:	9500      	str	r5, [sp, #0]
    2b90:	462b      	mov	r3, r5
    2b92:	2202      	movs	r2, #2
    2b94:	4641      	mov	r1, r8
    2b96:	a808      	add	r0, sp, #32
    2b98:	4f27      	ldr	r7, [pc, #156]	; (2c38 <grid_module_en16_reva_init+0xd8>)
    2b9a:	47b8      	blx	r7
    2b9c:	e00d      	b.n	2bba <grid_module_en16_reva_init+0x5a>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b9e:	2303      	movs	r3, #3
    2ba0:	9304      	str	r3, [sp, #16]
    2ba2:	9503      	str	r5, [sp, #12]
    2ba4:	f1a4 0220 	sub.w	r2, r4, #32
    2ba8:	9202      	str	r2, [sp, #8]
    2baa:	2263      	movs	r2, #99	; 0x63
    2bac:	9201      	str	r2, [sp, #4]
    2bae:	9500      	str	r5, [sp, #0]
    2bb0:	2202      	movs	r2, #2
    2bb2:	4641      	mov	r1, r8
    2bb4:	a808      	add	r0, sp, #32
    2bb6:	4f20      	ldr	r7, [pc, #128]	; (2c38 <grid_module_en16_reva_init+0xd8>)
    2bb8:	47b8      	blx	r7
			);
				
		}

		
		uint32_t payload_length = strlen(payload_template);
    2bba:	a808      	add	r0, sp, #32
    2bbc:	4b1f      	ldr	r3, [pc, #124]	; (2c3c <grid_module_en16_reva_init+0xdc>)
    2bbe:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2bc0:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    2bc4:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    2bc8:	2202      	movs	r2, #2
    2bca:	9202      	str	r2, [sp, #8]
    2bcc:	ab07      	add	r3, sp, #28
    2bce:	9301      	str	r3, [sp, #4]
    2bd0:	9000      	str	r0, [sp, #0]
    2bd2:	ab08      	add	r3, sp, #32
    2bd4:	4631      	mov	r1, r6
    2bd6:	4648      	mov	r0, r9
    2bd8:	4e19      	ldr	r6, [pc, #100]	; (2c40 <grid_module_en16_reva_init+0xe0>)
    2bda:	47b0      	blx	r6
    2bdc:	3401      	adds	r4, #1
	for(uint8_t i=0; i<16+16+16; i++){
    2bde:	2c30      	cmp	r4, #48	; 0x30
    2be0:	d012      	beq.n	2c08 <grid_module_en16_reva_init+0xa8>
    2be2:	b2e6      	uxtb	r6, r4
		if (i<16){ // ROTATION
    2be4:	2e0f      	cmp	r6, #15
    2be6:	d9cc      	bls.n	2b82 <grid_module_en16_reva_init+0x22>
		else if (i<16+16){ // BUTTON
    2be8:	2e1f      	cmp	r6, #31
    2bea:	d8d8      	bhi.n	2b9e <grid_module_en16_reva_init+0x3e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2bec:	2303      	movs	r3, #3
    2bee:	9304      	str	r3, [sp, #16]
    2bf0:	9503      	str	r5, [sp, #12]
    2bf2:	9402      	str	r4, [sp, #8]
    2bf4:	2390      	movs	r3, #144	; 0x90
    2bf6:	9301      	str	r3, [sp, #4]
    2bf8:	9500      	str	r5, [sp, #0]
    2bfa:	462b      	mov	r3, r5
    2bfc:	2202      	movs	r2, #2
    2bfe:	4641      	mov	r1, r8
    2c00:	a808      	add	r0, sp, #32
    2c02:	4f0d      	ldr	r7, [pc, #52]	; (2c38 <grid_module_en16_reva_init+0xd8>)
    2c04:	47b8      	blx	r7
    2c06:	e7d8      	b.n	2bba <grid_module_en16_reva_init+0x5a>
		
	}
	
	grid_report_sys_init(mod);
    2c08:	4648      	mov	r0, r9
    2c0a:	4b0e      	ldr	r3, [pc, #56]	; (2c44 <grid_module_en16_reva_init+0xe4>)
    2c0c:	4798      	blx	r3
    2c0e:	2300      	movs	r3, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    2c10:	490d      	ldr	r1, [pc, #52]	; (2c48 <grid_module_en16_reva_init+0xe8>)
    2c12:	011a      	lsls	r2, r3, #4
    2c14:	5453      	strb	r3, [r2, r1]
    2c16:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    2c18:	2b10      	cmp	r3, #16
    2c1a:	d1fa      	bne.n	2c12 <grid_module_en16_reva_init+0xb2>
	}
	
	
	grid_module_en16_reva_hardware_init();
    2c1c:	4b0b      	ldr	r3, [pc, #44]	; (2c4c <grid_module_en16_reva_init+0xec>)
    2c1e:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2c20:	4b0b      	ldr	r3, [pc, #44]	; (2c50 <grid_module_en16_reva_init+0xf0>)
    2c22:	4798      	blx	r3
	
}
    2c24:	b011      	add	sp, #68	; 0x44
    2c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2c2a:	bf00      	nop
    2c2c:	20003614 	.word	0x20003614
    2c30:	00002289 	.word	0x00002289
    2c34:	00003bfd 	.word	0x00003bfd
    2c38:	0000bed1 	.word	0x0000bed1
    2c3c:	0000bf19 	.word	0x0000bf19
    2c40:	00003cc1 	.word	0x00003cc1
    2c44:	00003ce5 	.word	0x00003ce5
    2c48:	20003844 	.word	0x20003844
    2c4c:	00002afd 	.word	0x00002afd
    2c50:	00002709 	.word	0x00002709
    2c54:	0000d064 	.word	0x0000d064

00002c58 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2c58:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2c5a:	4803      	ldr	r0, [pc, #12]	; (2c68 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2c5c:	4c03      	ldr	r4, [pc, #12]	; (2c6c <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2c5e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2c60:	4803      	ldr	r0, [pc, #12]	; (2c70 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2c62:	47a0      	blx	r4
    2c64:	bd10      	pop	{r4, pc}
    2c66:	bf00      	nop
    2c68:	20001044 	.word	0x20001044
    2c6c:	00004561 	.word	0x00004561
    2c70:	20001218 	.word	0x20001218
    2c74:	00000000 	.word	0x00000000

00002c78 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2c78:	4bb1      	ldr	r3, [pc, #708]	; (2f40 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2c7a:	781b      	ldrb	r3, [r3, #0]
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	f000 810a 	beq.w	2e96 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x21e>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c86:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2c88:	2300      	movs	r3, #0
    2c8a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2c8e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2c92:	4bac      	ldr	r3, [pc, #688]	; (2f44 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2c94:	781a      	ldrb	r2, [r3, #0]
    2c96:	3208      	adds	r2, #8
    2c98:	49ab      	ldr	r1, [pc, #684]	; (2f48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2c9a:	5c8e      	ldrb	r6, [r1, r2]
    2c9c:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2c9e:	781a      	ldrb	r2, [r3, #0]
    2ca0:	b2d2      	uxtb	r2, r2
    2ca2:	5c8d      	ldrb	r5, [r1, r2]
    2ca4:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2ca6:	781a      	ldrb	r2, [r3, #0]
    2ca8:	3201      	adds	r2, #1
    2caa:	b2d2      	uxtb	r2, r2
    2cac:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2cae:	781a      	ldrb	r2, [r3, #0]
    2cb0:	f002 0207 	and.w	r2, r2, #7
    2cb4:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2cb6:	781b      	ldrb	r3, [r3, #0]
    2cb8:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cbc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2cc0:	4ba2      	ldr	r3, [pc, #648]	; (2f4c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2cc2:	bf14      	ite	ne
    2cc4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cc8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2ccc:	4b9d      	ldr	r3, [pc, #628]	; (2f44 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2cce:	781b      	ldrb	r3, [r3, #0]
    2cd0:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2cd8:	4b9c      	ldr	r3, [pc, #624]	; (2f4c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2cda:	bf14      	ite	ne
    2cdc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ce0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2ce4:	4b97      	ldr	r3, [pc, #604]	; (2f44 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2ce6:	781b      	ldrb	r3, [r3, #0]
    2ce8:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2cf0:	4b96      	ldr	r3, [pc, #600]	; (2f4c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2cf2:	bf14      	ite	ne
    2cf4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cf8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2cfc:	2302      	movs	r3, #2
    2cfe:	f10d 0206 	add.w	r2, sp, #6
    2d02:	2100      	movs	r1, #0
    2d04:	4892      	ldr	r0, [pc, #584]	; (2f50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    2d06:	4c93      	ldr	r4, [pc, #588]	; (2f54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2d08:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2d0a:	2302      	movs	r3, #2
    2d0c:	aa01      	add	r2, sp, #4
    2d0e:	2100      	movs	r1, #0
    2d10:	4891      	ldr	r0, [pc, #580]	; (2f58 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    2d12:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2d14:	f8df b260 	ldr.w	fp, [pc, #608]	; 2f78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>
    2d18:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2d1c:	47d8      	blx	fp
    2d1e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 2f7c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
    2d22:	a385      	add	r3, pc, #532	; (adr r3, 2f38 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2d24:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d28:	47d0      	blx	sl
    2d2a:	f8df 9254 	ldr.w	r9, [pc, #596]	; 2f80 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x308>
    2d2e:	47c8      	blx	r9
    2d30:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2d34:	42a0      	cmp	r0, r4
    2d36:	bf28      	it	cs
    2d38:	4620      	movcs	r0, r4
    2d3a:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2d3c:	fa1f f880 	uxth.w	r8, r0
    2d40:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2d44:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2d48:	47d8      	blx	fp
    2d4a:	a37b      	add	r3, pc, #492	; (adr r3, 2f38 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d50:	47d0      	blx	sl
    2d52:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2d54:	42a0      	cmp	r0, r4
    2d56:	bf28      	it	cs
    2d58:	4620      	movcs	r0, r4
    2d5a:	b280      	uxth	r0, r0
    2d5c:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2d60:	f1a5 0308 	sub.w	r3, r5, #8
    2d64:	b2db      	uxtb	r3, r3
    2d66:	2b01      	cmp	r3, #1
    2d68:	f240 808d 	bls.w	2e86 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2d6c:	2e0d      	cmp	r6, #13
    2d6e:	f240 8098 	bls.w	2ea2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x22a>
		
		if (adcresult_0>10000){
    2d72:	f242 7310 	movw	r3, #10000	; 0x2710
    2d76:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2d78:	bf8c      	ite	hi
    2d7a:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2d7c:	237f      	movls	r3, #127	; 0x7f
    2d7e:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
			
		if (adcresult_1>10000){
    2d82:	f242 7310 	movw	r3, #10000	; 0x2710
    2d86:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2d88:	bf8c      	ite	hi
    2d8a:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2d8c:	237f      	movls	r3, #127	; 0x7f
    2d8e:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0]){
    2d92:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2d96:	3c04      	subs	r4, #4
    2d98:	0124      	lsls	r4, r4, #4
    2d9a:	4b70      	ldr	r3, [pc, #448]	; (2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2d9c:	689b      	ldr	r3, [r3, #8]
    2d9e:	4423      	add	r3, r4
    2da0:	68da      	ldr	r2, [r3, #12]
    2da2:	7812      	ldrb	r2, [r2, #0]
    2da4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2da8:	4291      	cmp	r1, r2
    2daa:	d02f      	beq.n	2e0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x194>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2dac:	2a00      	cmp	r2, #0
    2dae:	bf0c      	ite	eq
    2db0:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2db4:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    2db8:	6858      	ldr	r0, [r3, #4]
    2dba:	bf0c      	ite	eq
    2dbc:	2290      	moveq	r2, #144	; 0x90
    2dbe:	2280      	movne	r2, #128	; 0x80
    2dc0:	2102      	movs	r1, #2
    2dc2:	3005      	adds	r0, #5
    2dc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 2f74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2dc8:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    2dca:	4f64      	ldr	r7, [pc, #400]	; (2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2dcc:	68bb      	ldr	r3, [r7, #8]
    2dce:	4423      	add	r3, r4
    2dd0:	6858      	ldr	r0, [r3, #4]
    2dd2:	4632      	mov	r2, r6
    2dd4:	2102      	movs	r1, #2
    2dd6:	3007      	adds	r0, #7
    2dd8:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    2dda:	68bb      	ldr	r3, [r7, #8]
    2ddc:	4423      	add	r3, r4
    2dde:	6858      	ldr	r0, [r3, #4]
    2de0:	464a      	mov	r2, r9
    2de2:	2102      	movs	r1, #2
    2de4:	3009      	adds	r0, #9
    2de6:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[21], 2, actuator);
    2de8:	68bb      	ldr	r3, [r7, #8]
    2dea:	4423      	add	r3, r4
    2dec:	6858      	ldr	r0, [r3, #4]
    2dee:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2df2:	2102      	movs	r1, #2
    2df4:	3015      	adds	r0, #21
    2df6:	47c0      	blx	r8
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    2df8:	68bb      	ldr	r3, [r7, #8]
    2dfa:	441c      	add	r4, r3
    2dfc:	68e3      	ldr	r3, [r4, #12]
    2dfe:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    2e02:	1f31      	subs	r1, r6, #4
    2e04:	b2c9      	uxtb	r1, r1
    2e06:	4638      	mov	r0, r7
    2e08:	4b55      	ldr	r3, [pc, #340]	; (2f60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2e0a:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0]){
    2e0c:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2e10:	3c04      	subs	r4, #4
    2e12:	0124      	lsls	r4, r4, #4
    2e14:	4b51      	ldr	r3, [pc, #324]	; (2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2e16:	689b      	ldr	r3, [r3, #8]
    2e18:	4423      	add	r3, r4
    2e1a:	68da      	ldr	r2, [r3, #12]
    2e1c:	7812      	ldrb	r2, [r2, #0]
    2e1e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2e22:	4291      	cmp	r1, r2
    2e24:	d02f      	beq.n	2e86 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2e26:	2a00      	cmp	r2, #0
    2e28:	bf0c      	ite	eq
    2e2a:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2e2e:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    2e32:	6858      	ldr	r0, [r3, #4]
    2e34:	bf0c      	ite	eq
    2e36:	2290      	moveq	r2, #144	; 0x90
    2e38:	2280      	movne	r2, #128	; 0x80
    2e3a:	2102      	movs	r1, #2
    2e3c:	3005      	adds	r0, #5
    2e3e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 2f74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2e42:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_0);
    2e44:	4f45      	ldr	r7, [pc, #276]	; (2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2e46:	68bb      	ldr	r3, [r7, #8]
    2e48:	4423      	add	r3, r4
    2e4a:	6858      	ldr	r0, [r3, #4]
    2e4c:	4632      	mov	r2, r6
    2e4e:	2102      	movs	r1, #2
    2e50:	3007      	adds	r0, #7
    2e52:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);
    2e54:	68bb      	ldr	r3, [r7, #8]
    2e56:	4423      	add	r3, r4
    2e58:	6858      	ldr	r0, [r3, #4]
    2e5a:	464a      	mov	r2, r9
    2e5c:	2102      	movs	r1, #2
    2e5e:	3009      	adds	r0, #9
    2e60:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[21], 2, actuator);
    2e62:	68bb      	ldr	r3, [r7, #8]
    2e64:	4423      	add	r3, r4
    2e66:	6858      	ldr	r0, [r3, #4]
    2e68:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2e6c:	2102      	movs	r1, #2
    2e6e:	3015      	adds	r0, #21
    2e70:	47c0      	blx	r8
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;
    2e72:	68bb      	ldr	r3, [r7, #8]
    2e74:	441c      	add	r4, r3
    2e76:	68e3      	ldr	r3, [r4, #12]
    2e78:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    2e7c:	1f29      	subs	r1, r5, #4
    2e7e:	b2c9      	uxtb	r1, r1
    2e80:	4638      	mov	r0, r7
    2e82:	4b37      	ldr	r3, [pc, #220]	; (2f60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2e84:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    2e86:	2200      	movs	r2, #0
    2e88:	4b2d      	ldr	r3, [pc, #180]	; (2f40 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2e8a:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    2e8c:	4b35      	ldr	r3, [pc, #212]	; (2f64 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>)
    2e8e:	4798      	blx	r3
}
    2e90:	b003      	add	sp, #12
    2e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_pbf4_reva_hardware_transfer_complete++;
    2e96:	4a2a      	ldr	r2, [pc, #168]	; (2f40 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2e98:	7813      	ldrb	r3, [r2, #0]
    2e9a:	3301      	adds	r3, #1
    2e9c:	b2db      	uxtb	r3, r3
    2e9e:	7013      	strb	r3, [r2, #0]
    2ea0:	4770      	bx	lr
		if (adc_index_1 == 0 || adc_index_1 == 1){
    2ea2:	2d01      	cmp	r5, #1
    2ea4:	d936      	bls.n	2f14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    2ea6:	b2b9      	uxth	r1, r7
    2ea8:	4630      	mov	r0, r6
    2eaa:	4c2f      	ldr	r4, [pc, #188]	; (2f68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    2eac:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    2eae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2eb2:	4628      	mov	r0, r5
    2eb4:	47a0      	blx	r4
		if (grid_ain_get_changed(adc_index_0)){
    2eb6:	4630      	mov	r0, r6
    2eb8:	4b2c      	ldr	r3, [pc, #176]	; (2f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    2eba:	4798      	blx	r3
    2ebc:	2800      	cmp	r0, #0
    2ebe:	d161      	bne.n	2f84 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30c>
		if (grid_ain_get_changed(adc_index_1)){
    2ec0:	4628      	mov	r0, r5
    2ec2:	4b2a      	ldr	r3, [pc, #168]	; (2f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    2ec4:	4798      	blx	r3
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d0dd      	beq.n	2e86 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    2eca:	2107      	movs	r1, #7
    2ecc:	4628      	mov	r0, r5
    2ece:	4b28      	ldr	r3, [pc, #160]	; (2f70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>)
    2ed0:	4798      	blx	r3
    2ed2:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    2ed4:	ea4f 1805 	mov.w	r8, r5, lsl #4
    2ed8:	4c20      	ldr	r4, [pc, #128]	; (2f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2eda:	68a3      	ldr	r3, [r4, #8]
    2edc:	4443      	add	r3, r8
    2ede:	6858      	ldr	r0, [r3, #4]
    2ee0:	462a      	mov	r2, r5
    2ee2:	2102      	movs	r1, #2
    2ee4:	3007      	adds	r0, #7
    2ee6:	4f23      	ldr	r7, [pc, #140]	; (2f74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    2ee8:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    2eea:	68a3      	ldr	r3, [r4, #8]
    2eec:	4443      	add	r3, r8
    2eee:	6858      	ldr	r0, [r3, #4]
    2ef0:	b2f2      	uxtb	r2, r6
    2ef2:	2102      	movs	r1, #2
    2ef4:	3009      	adds	r0, #9
    2ef6:	47b8      	blx	r7
			uint8_t actuator = 2*value;
    2ef8:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    2efa:	68a3      	ldr	r3, [r4, #8]
    2efc:	4443      	add	r3, r8
    2efe:	6858      	ldr	r0, [r3, #4]
    2f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2f04:	2102      	movs	r1, #2
    2f06:	3015      	adds	r0, #21
    2f08:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    2f0a:	4629      	mov	r1, r5
    2f0c:	4620      	mov	r0, r4
    2f0e:	4b14      	ldr	r3, [pc, #80]	; (2f60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2f10:	4798      	blx	r3
    2f12:	e7b8      	b.n	2e86 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    2f14:	b2b9      	uxth	r1, r7
    2f16:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2f1a:	eba8 0101 	sub.w	r1, r8, r1
    2f1e:	4630      	mov	r0, r6
    2f20:	4c11      	ldr	r4, [pc, #68]	; (2f68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    2f22:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    2f24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2f28:	eba8 0101 	sub.w	r1, r8, r1
    2f2c:	4628      	mov	r0, r5
    2f2e:	47a0      	blx	r4
    2f30:	e7c1      	b.n	2eb6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x23e>
    2f32:	bf00      	nop
    2f34:	f3af 8000 	nop.w
    2f38:	47ae147b 	.word	0x47ae147b
    2f3c:	3ff07ae1 	.word	0x3ff07ae1
    2f40:	200017d4 	.word	0x200017d4
    2f44:	20003610 	.word	0x20003610
    2f48:	20000334 	.word	0x20000334
    2f4c:	41008000 	.word	0x41008000
    2f50:	20001044 	.word	0x20001044
    2f54:	00004481 	.word	0x00004481
    2f58:	20001218 	.word	0x20001218
    2f5c:	20001cf8 	.word	0x20001cf8
    2f60:	00003ebf 	.word	0x00003ebf
    2f64:	00002c59 	.word	0x00002c59
    2f68:	000011e9 	.word	0x000011e9
    2f6c:	000012e5 	.word	0x000012e5
    2f70:	000012f5 	.word	0x000012f5
    2f74:	00003825 	.word	0x00003825
    2f78:	0000b545 	.word	0x0000b545
    2f7c:	0000b611 	.word	0x0000b611
    2f80:	0000ba35 	.word	0x0000ba35
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    2f84:	2107      	movs	r1, #7
    2f86:	4630      	mov	r0, r6
    2f88:	4b11      	ldr	r3, [pc, #68]	; (2fd0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x358>)
    2f8a:	4798      	blx	r3
    2f8c:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    2f8e:	ea4f 1906 	mov.w	r9, r6, lsl #4
    2f92:	4c10      	ldr	r4, [pc, #64]	; (2fd4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35c>)
    2f94:	68a3      	ldr	r3, [r4, #8]
    2f96:	444b      	add	r3, r9
    2f98:	6858      	ldr	r0, [r3, #4]
    2f9a:	4632      	mov	r2, r6
    2f9c:	2102      	movs	r1, #2
    2f9e:	3007      	adds	r0, #7
    2fa0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2fdc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x364>
    2fa4:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    2fa6:	68a3      	ldr	r3, [r4, #8]
    2fa8:	444b      	add	r3, r9
    2faa:	6858      	ldr	r0, [r3, #4]
    2fac:	b2fa      	uxtb	r2, r7
    2fae:	2102      	movs	r1, #2
    2fb0:	3009      	adds	r0, #9
    2fb2:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    2fb4:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    2fb6:	68a3      	ldr	r3, [r4, #8]
    2fb8:	444b      	add	r3, r9
    2fba:	6858      	ldr	r0, [r3, #4]
    2fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2fc0:	2102      	movs	r1, #2
    2fc2:	3015      	adds	r0, #21
    2fc4:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);
    2fc6:	4631      	mov	r1, r6
    2fc8:	4620      	mov	r0, r4
    2fca:	4b03      	ldr	r3, [pc, #12]	; (2fd8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x360>)
    2fcc:	4798      	blx	r3
    2fce:	e777      	b.n	2ec0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x248>
    2fd0:	000012f5 	.word	0x000012f5
    2fd4:	20001cf8 	.word	0x20001cf8
    2fd8:	00003ebf 	.word	0x00003ebf
    2fdc:	00003825 	.word	0x00003825

00002fe0 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    2fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2fe2:	4f0b      	ldr	r7, [pc, #44]	; (3010 <grid_module_pbf4_reva_hardware_init+0x30>)
    2fe4:	4c0b      	ldr	r4, [pc, #44]	; (3014 <grid_module_pbf4_reva_hardware_init+0x34>)
    2fe6:	463b      	mov	r3, r7
    2fe8:	2200      	movs	r2, #0
    2fea:	4611      	mov	r1, r2
    2fec:	4620      	mov	r0, r4
    2fee:	4e0a      	ldr	r6, [pc, #40]	; (3018 <grid_module_pbf4_reva_hardware_init+0x38>)
    2ff0:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    2ff2:	4d0a      	ldr	r5, [pc, #40]	; (301c <grid_module_pbf4_reva_hardware_init+0x3c>)
    2ff4:	463b      	mov	r3, r7
    2ff6:	2200      	movs	r2, #0
    2ff8:	4611      	mov	r1, r2
    2ffa:	4628      	mov	r0, r5
    2ffc:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2ffe:	2100      	movs	r1, #0
    3000:	4620      	mov	r0, r4
    3002:	4c07      	ldr	r4, [pc, #28]	; (3020 <grid_module_pbf4_reva_hardware_init+0x40>)
    3004:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3006:	2100      	movs	r1, #0
    3008:	4628      	mov	r0, r5
    300a:	47a0      	blx	r4
    300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    300e:	bf00      	nop
    3010:	00002c79 	.word	0x00002c79
    3014:	20001044 	.word	0x20001044
    3018:	00004401 	.word	0x00004401
    301c:	20001218 	.word	0x20001218
    3020:	000043c1 	.word	0x000043c1

00003024 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    3024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3028:	b097      	sub	sp, #92	; 0x5c
    302a:	4681      	mov	r9, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    302c:	2307      	movs	r3, #7
    302e:	220e      	movs	r2, #14
    3030:	2105      	movs	r1, #5
    3032:	2010      	movs	r0, #16
    3034:	4c24      	ldr	r4, [pc, #144]	; (30c8 <grid_module_pbf4_reva_init+0xa4>)
    3036:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    3038:	210c      	movs	r1, #12
    303a:	4824      	ldr	r0, [pc, #144]	; (30cc <grid_module_pbf4_reva_init+0xa8>)
    303c:	4b24      	ldr	r3, [pc, #144]	; (30d0 <grid_module_pbf4_reva_init+0xac>)
    303e:	4798      	blx	r3
	
	grid_ui_model_init(mod, 12);
    3040:	210c      	movs	r1, #12
    3042:	4648      	mov	r0, r9
    3044:	4b23      	ldr	r3, [pc, #140]	; (30d4 <grid_module_pbf4_reva_init+0xb0>)
    3046:	4798      	blx	r3
    3048:	2500      	movs	r5, #0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    304a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 30f0 <grid_module_pbf4_reva_init+0xcc>
    304e:	462c      	mov	r4, r5
    3050:	b2ee      	uxtb	r6, r5
		if (i<8){ // PORENTIOMETERS & FADERS
    3052:	2e07      	cmp	r6, #7
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3054:	f04f 0303 	mov.w	r3, #3
    3058:	930b      	str	r3, [sp, #44]	; 0x2c
    305a:	940a      	str	r4, [sp, #40]	; 0x28
    305c:	9509      	str	r5, [sp, #36]	; 0x24
    305e:	f04f 0263 	mov.w	r2, #99	; 0x63
    3062:	9208      	str	r2, [sp, #32]
    3064:	9407      	str	r4, [sp, #28]
    3066:	9306      	str	r3, [sp, #24]
    3068:	f04f 0202 	mov.w	r2, #2
    306c:	9205      	str	r2, [sp, #20]
    306e:	9304      	str	r3, [sp, #16]
    3070:	9403      	str	r4, [sp, #12]
    3072:	9502      	str	r5, [sp, #8]
    3074:	bf94      	ite	ls
    3076:	23b0      	movls	r3, #176	; 0xb0
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3078:	2390      	movhi	r3, #144	; 0x90
    307a:	9301      	str	r3, [sp, #4]
    307c:	9400      	str	r4, [sp, #0]
    307e:	4623      	mov	r3, r4
    3080:	4641      	mov	r1, r8
    3082:	a80e      	add	r0, sp, #56	; 0x38
    3084:	4f14      	ldr	r7, [pc, #80]	; (30d8 <grid_module_pbf4_reva_init+0xb4>)
    3086:	47b8      	blx	r7
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3088:	a80e      	add	r0, sp, #56	; 0x38
    308a:	4b14      	ldr	r3, [pc, #80]	; (30dc <grid_module_pbf4_reva_init+0xb8>)
    308c:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    308e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    3092:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    3096:	2202      	movs	r2, #2
    3098:	9202      	str	r2, [sp, #8]
    309a:	ab0d      	add	r3, sp, #52	; 0x34
    309c:	9301      	str	r3, [sp, #4]
    309e:	b2c0      	uxtb	r0, r0
    30a0:	9000      	str	r0, [sp, #0]
    30a2:	ab0e      	add	r3, sp, #56	; 0x38
    30a4:	4631      	mov	r1, r6
    30a6:	4648      	mov	r0, r9
    30a8:	4e0d      	ldr	r6, [pc, #52]	; (30e0 <grid_module_pbf4_reva_init+0xbc>)
    30aa:	47b0      	blx	r6
    30ac:	3501      	adds	r5, #1
	for(uint8_t i=0; i<12; i++){
    30ae:	2d0c      	cmp	r5, #12
    30b0:	d1ce      	bne.n	3050 <grid_module_pbf4_reva_init+0x2c>
		
	}
	
	grid_report_sys_init(mod);
    30b2:	4648      	mov	r0, r9
    30b4:	4b0b      	ldr	r3, [pc, #44]	; (30e4 <grid_module_pbf4_reva_init+0xc0>)
    30b6:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    30b8:	4b0b      	ldr	r3, [pc, #44]	; (30e8 <grid_module_pbf4_reva_init+0xc4>)
    30ba:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    30bc:	4b0b      	ldr	r3, [pc, #44]	; (30ec <grid_module_pbf4_reva_init+0xc8>)
    30be:	4798      	blx	r3
	
    30c0:	b017      	add	sp, #92	; 0x5c
    30c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    30c6:	bf00      	nop
    30c8:	0000119d 	.word	0x0000119d
    30cc:	20003614 	.word	0x20003614
    30d0:	00002289 	.word	0x00002289
    30d4:	00003bfd 	.word	0x00003bfd
    30d8:	0000bed1 	.word	0x0000bed1
    30dc:	0000bf19 	.word	0x0000bf19
    30e0:	00003cc1 	.word	0x00003cc1
    30e4:	00003ce5 	.word	0x00003ce5
    30e8:	00002fe1 	.word	0x00002fe1
    30ec:	00002c59 	.word	0x00002c59
    30f0:	0000d04c 	.word	0x0000d04c

000030f4 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    30f4:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    30f6:	4803      	ldr	r0, [pc, #12]	; (3104 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    30f8:	4c03      	ldr	r4, [pc, #12]	; (3108 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    30fa:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    30fc:	4803      	ldr	r0, [pc, #12]	; (310c <grid_module_po16_revb_hardware_start_transfer+0x18>)
    30fe:	47a0      	blx	r4
    3100:	bd10      	pop	{r4, pc}
    3102:	bf00      	nop
    3104:	20001044 	.word	0x20001044
    3108:	00004561 	.word	0x00004561
    310c:	20001218 	.word	0x20001218

00003110 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3110:	4b75      	ldr	r3, [pc, #468]	; (32e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3112:	781b      	ldrb	r3, [r3, #0]
    3114:	2b00      	cmp	r3, #0
    3116:	f000 8085 	beq.w	3224 <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    311a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    311e:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3120:	2300      	movs	r3, #0
    3122:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    3126:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    312a:	4b6f      	ldr	r3, [pc, #444]	; (32e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    312c:	785a      	ldrb	r2, [r3, #1]
    312e:	3208      	adds	r2, #8
    3130:	496e      	ldr	r1, [pc, #440]	; (32ec <grid_module_po16_revb_hardware_transfer_complete_cb+0x1dc>)
    3132:	5c8d      	ldrb	r5, [r1, r2]
    3134:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    3136:	785a      	ldrb	r2, [r3, #1]
    3138:	b2d2      	uxtb	r2, r2
    313a:	5c8c      	ldrb	r4, [r1, r2]
    313c:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    313e:	785a      	ldrb	r2, [r3, #1]
    3140:	3201      	adds	r2, #1
    3142:	b2d2      	uxtb	r2, r2
    3144:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    3146:	785a      	ldrb	r2, [r3, #1]
    3148:	f002 0207 	and.w	r2, r2, #7
    314c:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    314e:	785b      	ldrb	r3, [r3, #1]
    3150:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3154:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3158:	4b65      	ldr	r3, [pc, #404]	; (32f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    315a:	bf14      	ite	ne
    315c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3160:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    3164:	4b60      	ldr	r3, [pc, #384]	; (32e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3166:	785b      	ldrb	r3, [r3, #1]
    3168:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    316c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3170:	4b5f      	ldr	r3, [pc, #380]	; (32f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    3172:	bf14      	ite	ne
    3174:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3178:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    317c:	4b5a      	ldr	r3, [pc, #360]	; (32e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    317e:	785b      	ldrb	r3, [r3, #1]
    3180:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3184:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3188:	4b59      	ldr	r3, [pc, #356]	; (32f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    318a:	bf14      	ite	ne
    318c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3190:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    3194:	2302      	movs	r3, #2
    3196:	f10d 0206 	add.w	r2, sp, #6
    319a:	2100      	movs	r1, #0
    319c:	4855      	ldr	r0, [pc, #340]	; (32f4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e4>)
    319e:	4e56      	ldr	r6, [pc, #344]	; (32f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    31a0:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    31a2:	2302      	movs	r3, #2
    31a4:	aa01      	add	r2, sp, #4
    31a6:	2100      	movs	r1, #0
    31a8:	4854      	ldr	r0, [pc, #336]	; (32fc <grid_module_po16_revb_hardware_transfer_complete_cb+0x1ec>)
    31aa:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    31ac:	f8df a168 	ldr.w	sl, [pc, #360]	; 3318 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>
    31b0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    31b4:	47d0      	blx	sl
    31b6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 331c <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>
    31ba:	a349      	add	r3, pc, #292	; (adr r3, 32e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    31bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    31c0:	47c8      	blx	r9
    31c2:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3320 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>
    31c6:	47c0      	blx	r8
    31c8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    31cc:	42b0      	cmp	r0, r6
    31ce:	bf28      	it	cs
    31d0:	4630      	movcs	r0, r6
    31d2:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    31d4:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    31d8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    31dc:	47d0      	blx	sl
    31de:	a340      	add	r3, pc, #256	; (adr r3, 32e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    31e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    31e4:	47c8      	blx	r9
    31e6:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    31e8:	42b0      	cmp	r0, r6
    31ea:	bf28      	it	cs
    31ec:	4630      	movcs	r0, r6
    31ee:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    31f2:	b2b9      	uxth	r1, r7
    31f4:	4628      	mov	r0, r5
    31f6:	4e42      	ldr	r6, [pc, #264]	; (3300 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    31f8:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    31fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    31fe:	4620      	mov	r0, r4
    3200:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    3202:	4628      	mov	r0, r5
    3204:	4b3f      	ldr	r3, [pc, #252]	; (3304 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    3206:	4798      	blx	r3
    3208:	b990      	cbnz	r0, 3230 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    320a:	4620      	mov	r0, r4
    320c:	4b3d      	ldr	r3, [pc, #244]	; (3304 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    320e:	4798      	blx	r3
    3210:	2800      	cmp	r0, #0
    3212:	d139      	bne.n	3288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x178>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    3214:	2200      	movs	r2, #0
    3216:	4b34      	ldr	r3, [pc, #208]	; (32e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3218:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    321a:	4b3b      	ldr	r3, [pc, #236]	; (3308 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    321c:	4798      	blx	r3
}
    321e:	b002      	add	sp, #8
    3220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    3224:	4a30      	ldr	r2, [pc, #192]	; (32e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3226:	7813      	ldrb	r3, [r2, #0]
    3228:	3301      	adds	r3, #1
    322a:	b2db      	uxtb	r3, r3
    322c:	7013      	strb	r3, [r2, #0]
    322e:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3230:	2107      	movs	r1, #7
    3232:	4628      	mov	r0, r5
    3234:	4b35      	ldr	r3, [pc, #212]	; (330c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    3236:	4798      	blx	r3
    3238:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    323c:	012f      	lsls	r7, r5, #4
    323e:	4e34      	ldr	r6, [pc, #208]	; (3310 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    3240:	68b3      	ldr	r3, [r6, #8]
    3242:	443b      	add	r3, r7
    3244:	6858      	ldr	r0, [r3, #4]
    3246:	462a      	mov	r2, r5
    3248:	2102      	movs	r1, #2
    324a:	3007      	adds	r0, #7
    324c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 3324 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    3250:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    3252:	68b3      	ldr	r3, [r6, #8]
    3254:	443b      	add	r3, r7
    3256:	6858      	ldr	r0, [r3, #4]
    3258:	4642      	mov	r2, r8
    325a:	2102      	movs	r1, #2
    325c:	3009      	adds	r0, #9
    325e:	47c8      	blx	r9
		uint8_t actuator = 2*value;
    3260:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    3264:	68b3      	ldr	r3, [r6, #8]
    3266:	443b      	add	r3, r7
    3268:	6858      	ldr	r0, [r3, #4]
    326a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    326e:	2102      	movs	r1, #2
    3270:	3015      	adds	r0, #21
    3272:	47c8      	blx	r9
		mod->report_ui_array[adc_index_0].helper[0] = value;
    3274:	68b3      	ldr	r3, [r6, #8]
    3276:	441f      	add	r7, r3
    3278:	68fb      	ldr	r3, [r7, #12]
    327a:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    327e:	4629      	mov	r1, r5
    3280:	4630      	mov	r0, r6
    3282:	4b24      	ldr	r3, [pc, #144]	; (3314 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    3284:	4798      	blx	r3
    3286:	e7c0      	b.n	320a <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3288:	2107      	movs	r1, #7
    328a:	4620      	mov	r0, r4
    328c:	4b1f      	ldr	r3, [pc, #124]	; (330c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    328e:	4798      	blx	r3
    3290:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    3292:	0126      	lsls	r6, r4, #4
    3294:	4d1e      	ldr	r5, [pc, #120]	; (3310 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    3296:	68ab      	ldr	r3, [r5, #8]
    3298:	4433      	add	r3, r6
    329a:	6858      	ldr	r0, [r3, #4]
    329c:	4622      	mov	r2, r4
    329e:	2102      	movs	r1, #2
    32a0:	3007      	adds	r0, #7
    32a2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3324 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    32a6:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    32a8:	68ab      	ldr	r3, [r5, #8]
    32aa:	4433      	add	r3, r6
    32ac:	6858      	ldr	r0, [r3, #4]
    32ae:	463a      	mov	r2, r7
    32b0:	2102      	movs	r1, #2
    32b2:	3009      	adds	r0, #9
    32b4:	47c0      	blx	r8
		uint8_t actuator = 2*value;
    32b6:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    32b8:	68ab      	ldr	r3, [r5, #8]
    32ba:	4433      	add	r3, r6
    32bc:	6858      	ldr	r0, [r3, #4]
    32be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    32c2:	2102      	movs	r1, #2
    32c4:	3015      	adds	r0, #21
    32c6:	47c0      	blx	r8
		mod->report_ui_array[adc_index_1].helper[0] = value;
    32c8:	68ab      	ldr	r3, [r5, #8]
    32ca:	441e      	add	r6, r3
    32cc:	68f3      	ldr	r3, [r6, #12]
    32ce:	701f      	strb	r7, [r3, #0]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    32d0:	4621      	mov	r1, r4
    32d2:	4628      	mov	r0, r5
    32d4:	4b0f      	ldr	r3, [pc, #60]	; (3314 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    32d6:	4798      	blx	r3
    32d8:	e79c      	b.n	3214 <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    32da:	bf00      	nop
    32dc:	f3af 8000 	nop.w
    32e0:	47ae147b 	.word	0x47ae147b
    32e4:	3ff07ae1 	.word	0x3ff07ae1
    32e8:	20000646 	.word	0x20000646
    32ec:	20000344 	.word	0x20000344
    32f0:	41008000 	.word	0x41008000
    32f4:	20001044 	.word	0x20001044
    32f8:	00004481 	.word	0x00004481
    32fc:	20001218 	.word	0x20001218
    3300:	000011e9 	.word	0x000011e9
    3304:	000012e5 	.word	0x000012e5
    3308:	000030f5 	.word	0x000030f5
    330c:	000012f5 	.word	0x000012f5
    3310:	20001cf8 	.word	0x20001cf8
    3314:	00003ebf 	.word	0x00003ebf
    3318:	0000b545 	.word	0x0000b545
    331c:	0000b611 	.word	0x0000b611
    3320:	0000ba35 	.word	0x0000ba35
    3324:	00003825 	.word	0x00003825

00003328 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    332a:	4f0b      	ldr	r7, [pc, #44]	; (3358 <grid_module_po16_revb_hardware_init+0x30>)
    332c:	4c0b      	ldr	r4, [pc, #44]	; (335c <grid_module_po16_revb_hardware_init+0x34>)
    332e:	463b      	mov	r3, r7
    3330:	2200      	movs	r2, #0
    3332:	4611      	mov	r1, r2
    3334:	4620      	mov	r0, r4
    3336:	4e0a      	ldr	r6, [pc, #40]	; (3360 <grid_module_po16_revb_hardware_init+0x38>)
    3338:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    333a:	4d0a      	ldr	r5, [pc, #40]	; (3364 <grid_module_po16_revb_hardware_init+0x3c>)
    333c:	463b      	mov	r3, r7
    333e:	2200      	movs	r2, #0
    3340:	4611      	mov	r1, r2
    3342:	4628      	mov	r0, r5
    3344:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    3346:	2100      	movs	r1, #0
    3348:	4620      	mov	r0, r4
    334a:	4c07      	ldr	r4, [pc, #28]	; (3368 <grid_module_po16_revb_hardware_init+0x40>)
    334c:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    334e:	2100      	movs	r1, #0
    3350:	4628      	mov	r0, r5
    3352:	47a0      	blx	r4
    3354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3356:	bf00      	nop
    3358:	00003111 	.word	0x00003111
    335c:	20001044 	.word	0x20001044
    3360:	00004401 	.word	0x00004401
    3364:	20001218 	.word	0x20001218
    3368:	000043c1 	.word	0x000043c1

0000336c <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3370:	b096      	sub	sp, #88	; 0x58
    3372:	4680      	mov	r8, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3374:	2307      	movs	r3, #7
    3376:	220e      	movs	r2, #14
    3378:	2105      	movs	r1, #5
    337a:	2010      	movs	r0, #16
    337c:	4c21      	ldr	r4, [pc, #132]	; (3404 <grid_module_po16_revb_init+0x98>)
    337e:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    3380:	2110      	movs	r1, #16
    3382:	4821      	ldr	r0, [pc, #132]	; (3408 <grid_module_po16_revb_init+0x9c>)
    3384:	4b21      	ldr	r3, [pc, #132]	; (340c <grid_module_po16_revb_init+0xa0>)
    3386:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16);
    3388:	2110      	movs	r1, #16
    338a:	4640      	mov	r0, r8
    338c:	4b20      	ldr	r3, [pc, #128]	; (3410 <grid_module_po16_revb_init+0xa4>)
    338e:	4798      	blx	r3
    3390:	2500      	movs	r5, #0
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30];
		

		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3392:	f8df a094 	ldr.w	sl, [pc, #148]	; 3428 <grid_module_po16_revb_init+0xbc>
    3396:	f8df 9094 	ldr.w	r9, [pc, #148]	; 342c <grid_module_po16_revb_init+0xc0>
		);
			
		

		
		uint8_t payload_length = strlen(payload_template);
    339a:	4f1e      	ldr	r7, [pc, #120]	; (3414 <grid_module_po16_revb_init+0xa8>)
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    339c:	2303      	movs	r3, #3
    339e:	930b      	str	r3, [sp, #44]	; 0x2c
    33a0:	2400      	movs	r4, #0
    33a2:	940a      	str	r4, [sp, #40]	; 0x28
    33a4:	9509      	str	r5, [sp, #36]	; 0x24
    33a6:	2263      	movs	r2, #99	; 0x63
    33a8:	9208      	str	r2, [sp, #32]
    33aa:	9407      	str	r4, [sp, #28]
    33ac:	9306      	str	r3, [sp, #24]
    33ae:	2602      	movs	r6, #2
    33b0:	9605      	str	r6, [sp, #20]
    33b2:	9304      	str	r3, [sp, #16]
    33b4:	9403      	str	r4, [sp, #12]
    33b6:	9502      	str	r5, [sp, #8]
    33b8:	23b0      	movs	r3, #176	; 0xb0
    33ba:	9301      	str	r3, [sp, #4]
    33bc:	9400      	str	r4, [sp, #0]
    33be:	4623      	mov	r3, r4
    33c0:	4632      	mov	r2, r6
    33c2:	4651      	mov	r1, sl
    33c4:	a80e      	add	r0, sp, #56	; 0x38
    33c6:	47c8      	blx	r9
		uint8_t payload_length = strlen(payload_template);
    33c8:	a80e      	add	r0, sp, #56	; 0x38
    33ca:	47b8      	blx	r7

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    33cc:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    33d0:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    33d4:	9602      	str	r6, [sp, #8]
    33d6:	ab0d      	add	r3, sp, #52	; 0x34
    33d8:	9301      	str	r3, [sp, #4]
    33da:	b2c0      	uxtb	r0, r0
    33dc:	9000      	str	r0, [sp, #0]
    33de:	ab0e      	add	r3, sp, #56	; 0x38
    33e0:	4632      	mov	r2, r6
    33e2:	b2e9      	uxtb	r1, r5
    33e4:	4640      	mov	r0, r8
    33e6:	4c0c      	ldr	r4, [pc, #48]	; (3418 <grid_module_po16_revb_init+0xac>)
    33e8:	47a0      	blx	r4
    33ea:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    33ec:	2d10      	cmp	r5, #16
    33ee:	d1d5      	bne.n	339c <grid_module_po16_revb_init+0x30>
		
	}
	
	grid_report_sys_init(mod);
    33f0:	4640      	mov	r0, r8
    33f2:	4b0a      	ldr	r3, [pc, #40]	; (341c <grid_module_po16_revb_init+0xb0>)
    33f4:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    33f6:	4b0a      	ldr	r3, [pc, #40]	; (3420 <grid_module_po16_revb_init+0xb4>)
    33f8:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    33fa:	4b0a      	ldr	r3, [pc, #40]	; (3424 <grid_module_po16_revb_init+0xb8>)
    33fc:	4798      	blx	r3
	
    33fe:	b016      	add	sp, #88	; 0x58
    3400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3404:	0000119d 	.word	0x0000119d
    3408:	20003614 	.word	0x20003614
    340c:	00002289 	.word	0x00002289
    3410:	00003bfd 	.word	0x00003bfd
    3414:	0000bf19 	.word	0x0000bf19
    3418:	00003cc1 	.word	0x00003cc1
    341c:	00003ce5 	.word	0x00003ce5
    3420:	00003329 	.word	0x00003329
    3424:	000030f5 	.word	0x000030f5
    3428:	0000d04c 	.word	0x0000d04c
    342c:	0000bed1 	.word	0x0000bed1

00003430 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    3430:	8982      	ldrh	r2, [r0, #12]
    3432:	b142      	cbz	r2, 3446 <tx_cb_USART_GRID+0x16>
    3434:	f100 0327 	add.w	r3, r0, #39	; 0x27
    3438:	3227      	adds	r2, #39	; 0x27
    343a:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    343c:	2100      	movs	r1, #0
    343e:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    3442:	4293      	cmp	r3, r2
    3444:	d1fb      	bne.n	343e <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    3446:	2300      	movs	r3, #0
    3448:	8183      	strh	r3, [r0, #12]
    344a:	4770      	bx	lr

0000344c <tx_cb_USART_GRID_W>:
{
    344c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    344e:	4802      	ldr	r0, [pc, #8]	; (3458 <tx_cb_USART_GRID_W+0xc>)
    3450:	4b02      	ldr	r3, [pc, #8]	; (345c <tx_cb_USART_GRID_W+0x10>)
    3452:	4798      	blx	r3
    3454:	bd08      	pop	{r3, pc}
    3456:	bf00      	nop
    3458:	200021b8 	.word	0x200021b8
    345c:	00003431 	.word	0x00003431

00003460 <tx_cb_USART_GRID_S>:
{
    3460:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    3462:	4802      	ldr	r0, [pc, #8]	; (346c <tx_cb_USART_GRID_S+0xc>)
    3464:	4b02      	ldr	r3, [pc, #8]	; (3470 <tx_cb_USART_GRID_S+0x10>)
    3466:	4798      	blx	r3
    3468:	bd08      	pop	{r3, pc}
    346a:	bf00      	nop
    346c:	200026dc 	.word	0x200026dc
    3470:	00003431 	.word	0x00003431

00003474 <tx_cb_USART_GRID_E>:
{
    3474:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    3476:	4802      	ldr	r0, [pc, #8]	; (3480 <tx_cb_USART_GRID_E+0xc>)
    3478:	4b02      	ldr	r3, [pc, #8]	; (3484 <tx_cb_USART_GRID_E+0x10>)
    347a:	4798      	blx	r3
    347c:	bd08      	pop	{r3, pc}
    347e:	bf00      	nop
    3480:	20003100 	.word	0x20003100
    3484:	00003431 	.word	0x00003431

00003488 <tx_cb_USART_GRID_N>:
{
    3488:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    348a:	4802      	ldr	r0, [pc, #8]	; (3494 <tx_cb_USART_GRID_N+0xc>)
    348c:	4b02      	ldr	r3, [pc, #8]	; (3498 <tx_cb_USART_GRID_N+0x10>)
    348e:	4798      	blx	r3
    3490:	bd08      	pop	{r3, pc}
    3492:	bf00      	nop
    3494:	20001298 	.word	0x20001298
    3498:	00003431 	.word	0x00003431

0000349c <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    349c:	b508      	push	{r3, lr}
    349e:	7a83      	ldrb	r3, [r0, #10]
    34a0:	011b      	lsls	r3, r3, #4
    34a2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    34a6:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    34aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    34ac:	f022 0202 	bic.w	r2, r2, #2
    34b0:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    34b2:	2100      	movs	r1, #0
    34b4:	7a80      	ldrb	r0, [r0, #10]
    34b6:	4b01      	ldr	r3, [pc, #4]	; (34bc <grid_sys_port_reset_dma+0x20>)
    34b8:	4798      	blx	r3
    34ba:	bd08      	pop	{r3, pc}
    34bc:	0000617d 	.word	0x0000617d

000034c0 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    34c0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34c2:	4802      	ldr	r0, [pc, #8]	; (34cc <dma_transfer_complete_w_cb+0xc>)
    34c4:	4b02      	ldr	r3, [pc, #8]	; (34d0 <dma_transfer_complete_w_cb+0x10>)
    34c6:	4798      	blx	r3
    34c8:	bd08      	pop	{r3, pc}
    34ca:	bf00      	nop
    34cc:	200021b8 	.word	0x200021b8
    34d0:	0000349d 	.word	0x0000349d

000034d4 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    34d4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34d6:	4802      	ldr	r0, [pc, #8]	; (34e0 <dma_transfer_complete_s_cb+0xc>)
    34d8:	4b02      	ldr	r3, [pc, #8]	; (34e4 <dma_transfer_complete_s_cb+0x10>)
    34da:	4798      	blx	r3
    34dc:	bd08      	pop	{r3, pc}
    34de:	bf00      	nop
    34e0:	200026dc 	.word	0x200026dc
    34e4:	0000349d 	.word	0x0000349d

000034e8 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    34e8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34ea:	4802      	ldr	r0, [pc, #8]	; (34f4 <dma_transfer_complete_e_cb+0xc>)
    34ec:	4b02      	ldr	r3, [pc, #8]	; (34f8 <dma_transfer_complete_e_cb+0x10>)
    34ee:	4798      	blx	r3
    34f0:	bd08      	pop	{r3, pc}
    34f2:	bf00      	nop
    34f4:	20003100 	.word	0x20003100
    34f8:	0000349d 	.word	0x0000349d

000034fc <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    34fc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    34fe:	4802      	ldr	r0, [pc, #8]	; (3508 <dma_transfer_complete_n_cb+0xc>)
    3500:	4b02      	ldr	r3, [pc, #8]	; (350c <dma_transfer_complete_n_cb+0x10>)
    3502:	4798      	blx	r3
    3504:	bd08      	pop	{r3, pc}
    3506:	bf00      	nop
    3508:	20001298 	.word	0x20001298
    350c:	0000349d 	.word	0x0000349d

00003510 <grid_sys_uart_init>:

}

void grid_sys_uart_init(){
    3510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3514:	4b2f      	ldr	r3, [pc, #188]	; (35d4 <grid_sys_uart_init+0xc4>)
    3516:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    351a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    351e:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    3522:	f042 0204 	orr.w	r2, r2, #4
    3526:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    352a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    352e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3532:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3536:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    353a:	f042 0204 	orr.w	r2, r2, #4
    353e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3542:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    354a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    354e:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    3552:	f042 0204 	orr.w	r2, r2, #4
    3556:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    355a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    355e:	f44f 7100 	mov.w	r1, #512	; 0x200
    3562:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3566:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    356a:	f042 0204 	orr.w	r2, r2, #4
    356e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3572:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    3576:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3610 <grid_sys_uart_init+0x100>
    357a:	4a17      	ldr	r2, [pc, #92]	; (35d8 <grid_sys_uart_init+0xc8>)
    357c:	2101      	movs	r1, #1
    357e:	4640      	mov	r0, r8
    3580:	4c16      	ldr	r4, [pc, #88]	; (35dc <grid_sys_uart_init+0xcc>)
    3582:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    3584:	4f16      	ldr	r7, [pc, #88]	; (35e0 <grid_sys_uart_init+0xd0>)
    3586:	4a17      	ldr	r2, [pc, #92]	; (35e4 <grid_sys_uart_init+0xd4>)
    3588:	2101      	movs	r1, #1
    358a:	4638      	mov	r0, r7
    358c:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    358e:	4e16      	ldr	r6, [pc, #88]	; (35e8 <grid_sys_uart_init+0xd8>)
    3590:	4a16      	ldr	r2, [pc, #88]	; (35ec <grid_sys_uart_init+0xdc>)
    3592:	2101      	movs	r1, #1
    3594:	4630      	mov	r0, r6
    3596:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    3598:	4d15      	ldr	r5, [pc, #84]	; (35f0 <grid_sys_uart_init+0xe0>)
    359a:	4a16      	ldr	r2, [pc, #88]	; (35f4 <grid_sys_uart_init+0xe4>)
    359c:	2101      	movs	r1, #1
    359e:	4628      	mov	r0, r5
    35a0:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    35a2:	4915      	ldr	r1, [pc, #84]	; (35f8 <grid_sys_uart_init+0xe8>)
    35a4:	4640      	mov	r0, r8
    35a6:	4c15      	ldr	r4, [pc, #84]	; (35fc <grid_sys_uart_init+0xec>)
    35a8:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    35aa:	4915      	ldr	r1, [pc, #84]	; (3600 <grid_sys_uart_init+0xf0>)
    35ac:	4638      	mov	r0, r7
    35ae:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    35b0:	4914      	ldr	r1, [pc, #80]	; (3604 <grid_sys_uart_init+0xf4>)
    35b2:	4630      	mov	r0, r6
    35b4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    35b6:	4914      	ldr	r1, [pc, #80]	; (3608 <grid_sys_uart_init+0xf8>)
    35b8:	4628      	mov	r0, r5
    35ba:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    35bc:	4640      	mov	r0, r8
    35be:	4c13      	ldr	r4, [pc, #76]	; (360c <grid_sys_uart_init+0xfc>)
    35c0:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    35c2:	4638      	mov	r0, r7
    35c4:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    35c6:	4630      	mov	r0, r6
    35c8:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    35ca:	4628      	mov	r0, r5
    35cc:	47a0      	blx	r4
    35ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35d2:	bf00      	nop
    35d4:	41008000 	.word	0x41008000
    35d8:	00003489 	.word	0x00003489
    35dc:	000051b9 	.word	0x000051b9
    35e0:	20001070 	.word	0x20001070
    35e4:	00003475 	.word	0x00003475
    35e8:	200011c8 	.word	0x200011c8
    35ec:	00003461 	.word	0x00003461
    35f0:	20001178 	.word	0x20001178
    35f4:	0000344d 	.word	0x0000344d
    35f8:	20001d04 	.word	0x20001d04
    35fc:	00005191 	.word	0x00005191
    3600:	200026c8 	.word	0x200026c8
    3604:	20002bec 	.word	0x20002bec
    3608:	2000363c 	.word	0x2000363c
    360c:	00005165 	.word	0x00005165
    3610:	200010c4 	.word	0x200010c4

00003614 <grid_sys_dma_rx_init_one>:



}

void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3614:	b5f0      	push	{r4, r5, r6, r7, lr}
    3616:	b083      	sub	sp, #12
    3618:	4605      	mov	r5, r0
    361a:	460f      	mov	r7, r1
    361c:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    361e:	7a84      	ldrb	r4, [r0, #10]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    3620:	6843      	ldr	r3, [r0, #4]
    3622:	6a19      	ldr	r1, [r3, #32]
    3624:	3128      	adds	r1, #40	; 0x28
    3626:	4620      	mov	r0, r4
    3628:	4b0d      	ldr	r3, [pc, #52]	; (3660 <grid_sys_dma_rx_init_one+0x4c>)
    362a:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    362c:	f505 7120 	add.w	r1, r5, #640	; 0x280
    3630:	4620      	mov	r0, r4
    3632:	4b0c      	ldr	r3, [pc, #48]	; (3664 <grid_sys_dma_rx_init_one+0x50>)
    3634:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    3636:	4639      	mov	r1, r7
    3638:	4620      	mov	r0, r4
    363a:	4b0b      	ldr	r3, [pc, #44]	; (3668 <grid_sys_dma_rx_init_one+0x54>)
    363c:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    363e:	4621      	mov	r1, r4
    3640:	a801      	add	r0, sp, #4
    3642:	4b0a      	ldr	r3, [pc, #40]	; (366c <grid_sys_dma_rx_init_one+0x58>)
    3644:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    3646:	9b01      	ldr	r3, [sp, #4]
    3648:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    364a:	2201      	movs	r2, #1
    364c:	2100      	movs	r1, #0
    364e:	4620      	mov	r0, r4
    3650:	4b07      	ldr	r3, [pc, #28]	; (3670 <grid_sys_dma_rx_init_one+0x5c>)
    3652:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3654:	2100      	movs	r1, #0
    3656:	4620      	mov	r0, r4
    3658:	4b06      	ldr	r3, [pc, #24]	; (3674 <grid_sys_dma_rx_init_one+0x60>)
    365a:	4798      	blx	r3
	

}
    365c:	b003      	add	sp, #12
    365e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3660:	000060f9 	.word	0x000060f9
    3664:	000060e9 	.word	0x000060e9
    3668:	00006125 	.word	0x00006125
    366c:	000061bd 	.word	0x000061bd
    3670:	00006095 	.word	0x00006095
    3674:	0000617d 	.word	0x0000617d

00003678 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    3678:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    367a:	4a10      	ldr	r2, [pc, #64]	; (36bc <grid_sys_dma_rx_init+0x44>)
    367c:	f44f 7116 	mov.w	r1, #600	; 0x258
    3680:	480f      	ldr	r0, [pc, #60]	; (36c0 <grid_sys_dma_rx_init+0x48>)
    3682:	4c10      	ldr	r4, [pc, #64]	; (36c4 <grid_sys_dma_rx_init+0x4c>)
    3684:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    3686:	4a10      	ldr	r2, [pc, #64]	; (36c8 <grid_sys_dma_rx_init+0x50>)
    3688:	f44f 7116 	mov.w	r1, #600	; 0x258
    368c:	480f      	ldr	r0, [pc, #60]	; (36cc <grid_sys_dma_rx_init+0x54>)
    368e:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    3690:	4a0f      	ldr	r2, [pc, #60]	; (36d0 <grid_sys_dma_rx_init+0x58>)
    3692:	f44f 7116 	mov.w	r1, #600	; 0x258
    3696:	480f      	ldr	r0, [pc, #60]	; (36d4 <grid_sys_dma_rx_init+0x5c>)
    3698:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    369a:	4a0f      	ldr	r2, [pc, #60]	; (36d8 <grid_sys_dma_rx_init+0x60>)
    369c:	f44f 7116 	mov.w	r1, #600	; 0x258
    36a0:	480e      	ldr	r0, [pc, #56]	; (36dc <grid_sys_dma_rx_init+0x64>)
    36a2:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    36a4:	4b0e      	ldr	r3, [pc, #56]	; (36e0 <grid_sys_dma_rx_init+0x68>)
    36a6:	2200      	movs	r2, #0
    36a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    36ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    36b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    36b4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    36b8:	bd10      	pop	{r4, pc}
    36ba:	bf00      	nop
    36bc:	000034fd 	.word	0x000034fd
    36c0:	20001298 	.word	0x20001298
    36c4:	00003615 	.word	0x00003615
    36c8:	000034e9 	.word	0x000034e9
    36cc:	20003100 	.word	0x20003100
    36d0:	000034d5 	.word	0x000034d5
    36d4:	200026dc 	.word	0x200026dc
    36d8:	000034c1 	.word	0x000034c1
    36dc:	200021b8 	.word	0x200021b8
    36e0:	e000e100 	.word	0xe000e100

000036e4 <grid_sys_init>:
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}

void grid_sys_init(struct grid_sys_model* mod){
    36e4:	b510      	push	{r4, lr}
	
	mod->bank_select = 0;
    36e6:	2200      	movs	r2, #0
    36e8:	7242      	strb	r2, [r0, #9]
	
	mod->bank_color_r[0] = 200;
    36ea:	23c8      	movs	r3, #200	; 0xc8
    36ec:	7283      	strb	r3, [r0, #10]
	mod->bank_color_g[0] = 100;
    36ee:	2164      	movs	r1, #100	; 0x64
    36f0:	7381      	strb	r1, [r0, #14]
	mod->bank_color_b[0] = 0;
    36f2:	7482      	strb	r2, [r0, #18]
	
	mod->bank_color_r[1] = 0;
    36f4:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[1] = 100;
    36f6:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[1] = 200;
    36f8:	74c3      	strb	r3, [r0, #19]
	
	mod->bank_color_r[2] = 50;
    36fa:	2432      	movs	r4, #50	; 0x32
    36fc:	7304      	strb	r4, [r0, #12]
	mod->bank_color_g[2] = 200;
    36fe:	7403      	strb	r3, [r0, #16]
	mod->bank_color_b[2] = 50;
    3700:	7504      	strb	r4, [r0, #20]
	
	mod->bank_color_r[3] = 100;
    3702:	7341      	strb	r1, [r0, #13]
	mod->bank_color_g[3] = 0;
    3704:	7442      	strb	r2, [r0, #17]
	mod->bank_color_b[3] = 200;
    3706:	7543      	strb	r3, [r0, #21]
	
	
	grid_port_init_all();
    3708:	4b03      	ldr	r3, [pc, #12]	; (3718 <grid_sys_init+0x34>)
    370a:	4798      	blx	r3
	
	grid_sys_uart_init();
    370c:	4b03      	ldr	r3, [pc, #12]	; (371c <grid_sys_init+0x38>)
    370e:	4798      	blx	r3
	grid_sys_dma_rx_init();
    3710:	4b03      	ldr	r3, [pc, #12]	; (3720 <grid_sys_init+0x3c>)
    3712:	4798      	blx	r3
    3714:	bd10      	pop	{r4, pc}
    3716:	bf00      	nop
    3718:	000015e9 	.word	0x000015e9
    371c:	00003511 	.word	0x00003511
    3720:	00003679 	.word	0x00003679

00003724 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3724:	6980      	ldr	r0, [r0, #24]
    3726:	4770      	bx	lr

00003728 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t told){
	
	if (mod->realtime>told){
    3728:	6980      	ldr	r0, [r0, #24]
    372a:	4288      	cmp	r0, r1
		return mod->realtime-told;
    372c:	bf8e      	itee	hi
    372e:	1a40      	subhi	r0, r0, r1
	}
	else{
		return (1<<32)-1 - told + mod->realtime;
    3730:	43c9      	mvnls	r1, r1
    3732:	1840      	addls	r0, r0, r1
	}
	

}
    3734:	4770      	bx	lr

00003736 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3736:	6983      	ldr	r3, [r0, #24]
    3738:	3301      	adds	r3, #1
    373a:	6183      	str	r3, [r0, #24]
    373c:	4770      	bx	lr

0000373e <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    373e:	7a00      	ldrb	r0, [r0, #8]
    3740:	4770      	bx	lr

00003742 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    3742:	2300      	movs	r3, #0
    3744:	7203      	strb	r3, [r0, #8]
    3746:	4770      	bx	lr

00003748 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3748:	7983      	ldrb	r3, [r0, #6]
    374a:	b123      	cbz	r3, 3756 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    374c:	2b01      	cmp	r3, #1
    374e:	d00f      	beq.n	3770 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    3750:	2b02      	cmp	r3, #2
    3752:	d015      	beq.n	3780 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3754:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3756:	8880      	ldrh	r0, [r0, #4]
    3758:	0840      	lsrs	r0, r0, #1
    375a:	387d      	subs	r0, #125	; 0x7d
    375c:	2800      	cmp	r0, #0
    375e:	bfb8      	it	lt
    3760:	4240      	neglt	r0, r0
    3762:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3766:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    376a:	f3c0 0047 	ubfx	r0, r0, #1, #8
    376e:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    3770:	8880      	ldrh	r0, [r0, #4]
    3772:	4b06      	ldr	r3, [pc, #24]	; (378c <grid_sys_alert_get_color_intensity+0x44>)
    3774:	fba3 3000 	umull	r3, r0, r3, r0
    3778:	f340 1000 	sbfx	r0, r0, #4, #1
    377c:	b2c0      	uxtb	r0, r0
    377e:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3780:	8880      	ldrh	r0, [r0, #4]
    3782:	2864      	cmp	r0, #100	; 0x64
    3784:	bf8c      	ite	hi
    3786:	20ff      	movhi	r0, #255	; 0xff
    3788:	2000      	movls	r0, #0
    378a:	4770      	bx	lr
    378c:	10624dd3 	.word	0x10624dd3

00003790 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    3790:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    3792:	2401      	movs	r4, #1
    3794:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    3796:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    3798:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    379a:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    379c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    37a0:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    37a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    37a6:	7183      	strb	r3, [r0, #6]
	
}
    37a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    37ac:	4770      	bx	lr

000037ae <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    37ae:	7840      	ldrb	r0, [r0, #1]
    37b0:	4770      	bx	lr

000037b2 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    37b2:	7880      	ldrb	r0, [r0, #2]
    37b4:	4770      	bx	lr

000037b6 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    37b6:	78c0      	ldrb	r0, [r0, #3]
    37b8:	4770      	bx	lr

000037ba <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    37ba:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    37bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    37c0:	b2d8      	uxtb	r0, r3
    37c2:	2809      	cmp	r0, #9
    37c4:	d90d      	bls.n	37e2 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    37c6:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    37ca:	b2db      	uxtb	r3, r3
    37cc:	2b05      	cmp	r3, #5
    37ce:	d903      	bls.n	37d8 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    37d0:	b131      	cbz	r1, 37e0 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    37d2:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    37d4:	2000      	movs	r0, #0
    37d6:	4770      	bx	lr
		result = ascii - 97 + 10;
    37d8:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    37dc:	b2c0      	uxtb	r0, r0
    37de:	4770      	bx	lr
	uint8_t result = 0;
    37e0:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    37e2:	4770      	bx	lr

000037e4 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    37e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    37e8:	b1c1      	cbz	r1, 381c <grid_sys_read_hex_string_value+0x38>
    37ea:	4690      	mov	r8, r2
    37ec:	1e45      	subs	r5, r0, #1
    37ee:	1e4b      	subs	r3, r1, #1
    37f0:	009c      	lsls	r4, r3, #2
    37f2:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    37f6:	3f02      	subs	r7, #2
    37f8:	b2db      	uxtb	r3, r3
    37fa:	1aff      	subs	r7, r7, r3
    37fc:	00bf      	lsls	r7, r7, #2
    37fe:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3800:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3820 <grid_sys_read_hex_string_value+0x3c>
    3804:	4641      	mov	r1, r8
    3806:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    380a:	47c8      	blx	r9
    380c:	40a0      	lsls	r0, r4
    380e:	4406      	add	r6, r0
    3810:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    3812:	42bc      	cmp	r4, r7
    3814:	d1f6      	bne.n	3804 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3816:	4630      	mov	r0, r6
    3818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    381c:	2600      	movs	r6, #0
	return result;
    381e:	e7fa      	b.n	3816 <grid_sys_read_hex_string_value+0x32>
    3820:	000037bb 	.word	0x000037bb

00003824 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3824:	b530      	push	{r4, r5, lr}
    3826:	b085      	sub	sp, #20
    3828:	4605      	mov	r5, r0
    382a:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    382c:	4909      	ldr	r1, [pc, #36]	; (3854 <grid_sys_write_hex_string_value+0x30>)
    382e:	a801      	add	r0, sp, #4
    3830:	4b09      	ldr	r3, [pc, #36]	; (3858 <grid_sys_write_hex_string_value+0x34>)
    3832:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3834:	b164      	cbz	r4, 3850 <grid_sys_write_hex_string_value+0x2c>
    3836:	ab04      	add	r3, sp, #16
    3838:	1b1a      	subs	r2, r3, r4
    383a:	3a05      	subs	r2, #5
    383c:	1e6b      	subs	r3, r5, #1
    383e:	1e60      	subs	r0, r4, #1
    3840:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3844:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3848:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    384c:	4283      	cmp	r3, r0
    384e:	d1f9      	bne.n	3844 <grid_sys_write_hex_string_value+0x20>
	}

}
    3850:	b005      	add	sp, #20
    3852:	bd30      	pop	{r4, r5, pc}
    3854:	0000d080 	.word	0x0000d080
    3858:	0000bed1 	.word	0x0000bed1

0000385c <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    385c:	4b34      	ldr	r3, [pc, #208]	; (3930 <grid_sys_get_hwcfg+0xd4>)
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	f1b3 3fff 	cmp.w	r3, #4294967295
    3864:	d002      	beq.n	386c <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3866:	4b32      	ldr	r3, [pc, #200]	; (3930 <grid_sys_get_hwcfg+0xd4>)
    3868:	6818      	ldr	r0, [r3, #0]
    386a:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    386c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3870:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3872:	4b30      	ldr	r3, [pc, #192]	; (3934 <grid_sys_get_hwcfg+0xd8>)
    3874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    387c:	492e      	ldr	r1, [pc, #184]	; (3938 <grid_sys_get_hwcfg+0xdc>)
    387e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3882:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3886:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    388a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    388e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3892:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3896:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    389a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    389e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    38a2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    38a6:	4925      	ldr	r1, [pc, #148]	; (393c <grid_sys_get_hwcfg+0xe0>)
    38a8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    38ac:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    38b0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    38b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    38b8:	2001      	movs	r0, #1
    38ba:	4b21      	ldr	r3, [pc, #132]	; (3940 <grid_sys_get_hwcfg+0xe4>)
    38bc:	4798      	blx	r3
    38be:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    38c0:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    38c2:	4d1c      	ldr	r5, [pc, #112]	; (3934 <grid_sys_get_hwcfg+0xd8>)
    38c4:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    38c8:	4f1d      	ldr	r7, [pc, #116]	; (3940 <grid_sys_get_hwcfg+0xe4>)
    38ca:	e00c      	b.n	38e6 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    38cc:	2e07      	cmp	r6, #7
    38ce:	d027      	beq.n	3920 <grid_sys_get_hwcfg+0xc4>
    38d0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    38d4:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    38d8:	2001      	movs	r0, #1
    38da:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    38dc:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    38e0:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    38e2:	2e08      	cmp	r6, #8
    38e4:	d01c      	beq.n	3920 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    38e6:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    38ea:	2001      	movs	r0, #1
    38ec:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    38ee:	a801      	add	r0, sp, #4
    38f0:	4b14      	ldr	r3, [pc, #80]	; (3944 <grid_sys_get_hwcfg+0xe8>)
    38f2:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    38f4:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    38f8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    38fc:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3900:	405c      	eors	r4, r3
    3902:	4014      	ands	r4, r2
    3904:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3906:	a801      	add	r0, sp, #4
    3908:	4b0f      	ldr	r3, [pc, #60]	; (3948 <grid_sys_get_hwcfg+0xec>)
    390a:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    390c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3910:	d0dc      	beq.n	38cc <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3912:	2301      	movs	r3, #1
    3914:	40b3      	lsls	r3, r6
    3916:	ea43 0808 	orr.w	r8, r3, r8
    391a:	fa5f f888 	uxtb.w	r8, r8
    391e:	e7d5      	b.n	38cc <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3920:	4b03      	ldr	r3, [pc, #12]	; (3930 <grid_sys_get_hwcfg+0xd4>)
    3922:	f8c3 8000 	str.w	r8, [r3]
}
    3926:	4b02      	ldr	r3, [pc, #8]	; (3930 <grid_sys_get_hwcfg+0xd4>)
    3928:	6818      	ldr	r0, [r3, #0]
    392a:	b003      	add	sp, #12
    392c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3930:	20000354 	.word	0x20000354
    3934:	41008000 	.word	0x41008000
    3938:	40002000 	.word	0x40002000
    393c:	40028000 	.word	0x40028000
    3940:	00004609 	.word	0x00004609
    3944:	00004589 	.word	0x00004589
    3948:	00004597 	.word	0x00004597

0000394c <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3950:	b085      	sub	sp, #20
    3952:	4681      	mov	r9, r0
    3954:	460c      	mov	r4, r1
	uint32_t hwtype = grid_sys_get_hwcfg();
    3956:	4b53      	ldr	r3, [pc, #332]	; (3aa4 <grid_sys_bank_select+0x158>)
    3958:	4798      	blx	r3
    395a:	4682      	mov	sl, r0
	if (banknumber == 255){
    395c:	2cff      	cmp	r4, #255	; 0xff
    395e:	d008      	beq.n	3972 <grid_sys_bank_select+0x26>
		mod->bank_select = banknumber%4;
    3960:	f004 0403 	and.w	r4, r4, #3
    3964:	f889 4009 	strb.w	r4, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3968:	2500      	movs	r5, #0
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    396a:	f8df b14c 	ldr.w	fp, [pc, #332]	; 3ab8 <grid_sys_bank_select+0x16c>
    396e:	9503      	str	r5, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3970:	e064      	b.n	3a3c <grid_sys_bank_select+0xf0>
		mod->bank_select = 255;
    3972:	23ff      	movs	r3, #255	; 0xff
    3974:	f889 3009 	strb.w	r3, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3978:	2500      	movs	r5, #0
    397a:	f8df b138 	ldr.w	fp, [pc, #312]	; 3ab4 <grid_sys_bank_select+0x168>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    397e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3ab8 <grid_sys_bank_select+0x16c>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3982:	e01c      	b.n	39be <grid_sys_bank_select+0x72>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3984:	f04f 09ff 	mov.w	r9, #255	; 0xff
    3988:	f8cd 9004 	str.w	r9, [sp, #4]
    398c:	2600      	movs	r6, #0
    398e:	9600      	str	r6, [sp, #0]
    3990:	4633      	mov	r3, r6
    3992:	4632      	mov	r2, r6
    3994:	4621      	mov	r1, r4
    3996:	4658      	mov	r0, fp
    3998:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    399a:	9601      	str	r6, [sp, #4]
    399c:	2305      	movs	r3, #5
    399e:	9300      	str	r3, [sp, #0]
    39a0:	4633      	mov	r3, r6
    39a2:	4632      	mov	r2, r6
    39a4:	4621      	mov	r1, r4
    39a6:	4658      	mov	r0, fp
    39a8:	4f3f      	ldr	r7, [pc, #252]	; (3aa8 <grid_sys_bank_select+0x15c>)
    39aa:	47b8      	blx	r7
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    39ac:	9601      	str	r6, [sp, #4]
    39ae:	9600      	str	r6, [sp, #0]
    39b0:	464b      	mov	r3, r9
    39b2:	4632      	mov	r2, r6
    39b4:	4621      	mov	r1, r4
    39b6:	4658      	mov	r0, fp
    39b8:	4c3c      	ldr	r4, [pc, #240]	; (3aac <grid_sys_bank_select+0x160>)
    39ba:	47a0      	blx	r4
    39bc:	3501      	adds	r5, #1
    39be:	b2ec      	uxtb	r4, r5
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    39c0:	4658      	mov	r0, fp
    39c2:	4b3b      	ldr	r3, [pc, #236]	; (3ab0 <grid_sys_bank_select+0x164>)
    39c4:	4798      	blx	r3
    39c6:	42a0      	cmp	r0, r4
    39c8:	d968      	bls.n	3a9c <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    39ca:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    39ce:	d0d9      	beq.n	3984 <grid_sys_bank_select+0x38>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    39d0:	2306      	movs	r3, #6
    39d2:	9301      	str	r3, [sp, #4]
    39d4:	9300      	str	r3, [sp, #0]
    39d6:	2200      	movs	r2, #0
    39d8:	4621      	mov	r1, r4
    39da:	4658      	mov	r0, fp
    39dc:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    39de:	233f      	movs	r3, #63	; 0x3f
    39e0:	9301      	str	r3, [sp, #4]
    39e2:	9300      	str	r3, [sp, #0]
    39e4:	2200      	movs	r2, #0
    39e6:	4621      	mov	r1, r4
    39e8:	4658      	mov	r0, fp
    39ea:	4e2f      	ldr	r6, [pc, #188]	; (3aa8 <grid_sys_bank_select+0x15c>)
    39ec:	47b0      	blx	r6
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    39ee:	237f      	movs	r3, #127	; 0x7f
    39f0:	9301      	str	r3, [sp, #4]
    39f2:	9300      	str	r3, [sp, #0]
    39f4:	2200      	movs	r2, #0
    39f6:	4621      	mov	r1, r4
    39f8:	4658      	mov	r0, fp
    39fa:	4c2c      	ldr	r4, [pc, #176]	; (3aac <grid_sys_bank_select+0x160>)
    39fc:	47a0      	blx	r4
    39fe:	e7dd      	b.n	39bc <grid_sys_bank_select+0x70>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3a00:	27ff      	movs	r7, #255	; 0xff
    3a02:	9701      	str	r7, [sp, #4]
    3a04:	2600      	movs	r6, #0
    3a06:	9600      	str	r6, [sp, #0]
    3a08:	4633      	mov	r3, r6
    3a0a:	4632      	mov	r2, r6
    3a0c:	4621      	mov	r1, r4
    3a0e:	4829      	ldr	r0, [pc, #164]	; (3ab4 <grid_sys_bank_select+0x168>)
    3a10:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3a12:	9601      	str	r6, [sp, #4]
    3a14:	2305      	movs	r3, #5
    3a16:	9300      	str	r3, [sp, #0]
    3a18:	4633      	mov	r3, r6
    3a1a:	4632      	mov	r2, r6
    3a1c:	4621      	mov	r1, r4
    3a1e:	4825      	ldr	r0, [pc, #148]	; (3ab4 <grid_sys_bank_select+0x168>)
    3a20:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3aa8 <grid_sys_bank_select+0x15c>
    3a24:	47c0      	blx	r8
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3a26:	9601      	str	r6, [sp, #4]
    3a28:	9600      	str	r6, [sp, #0]
    3a2a:	463b      	mov	r3, r7
    3a2c:	4632      	mov	r2, r6
    3a2e:	4621      	mov	r1, r4
    3a30:	4820      	ldr	r0, [pc, #128]	; (3ab4 <grid_sys_bank_select+0x168>)
    3a32:	4c1e      	ldr	r4, [pc, #120]	; (3aac <grid_sys_bank_select+0x160>)
    3a34:	47a0      	blx	r4
    3a36:	9b03      	ldr	r3, [sp, #12]
    3a38:	3301      	adds	r3, #1
    3a3a:	9303      	str	r3, [sp, #12]
    3a3c:	f89d 400c 	ldrb.w	r4, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3a40:	481c      	ldr	r0, [pc, #112]	; (3ab4 <grid_sys_bank_select+0x168>)
    3a42:	4b1b      	ldr	r3, [pc, #108]	; (3ab0 <grid_sys_bank_select+0x164>)
    3a44:	4798      	blx	r3
    3a46:	4284      	cmp	r4, r0
    3a48:	d228      	bcs.n	3a9c <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3a4a:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3a4e:	d0d7      	beq.n	3a00 <grid_sys_bank_select+0xb4>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3a50:	f899 3009 	ldrb.w	r3, [r9, #9]
    3a54:	444b      	add	r3, r9
    3a56:	7a9e      	ldrb	r6, [r3, #10]
				uint8_t g = mod->bank_color_g[mod->bank_select];
    3a58:	7b9f      	ldrb	r7, [r3, #14]
				uint8_t b = mod->bank_color_b[mod->bank_select];
    3a5a:	f893 8012 	ldrb.w	r8, [r3, #18]
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3a5e:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3a62:	9301      	str	r3, [sp, #4]
    3a64:	097b      	lsrs	r3, r7, #5
    3a66:	9300      	str	r3, [sp, #0]
    3a68:	0973      	lsrs	r3, r6, #5
    3a6a:	2200      	movs	r2, #0
    3a6c:	4621      	mov	r1, r4
    3a6e:	4811      	ldr	r0, [pc, #68]	; (3ab4 <grid_sys_bank_select+0x168>)
    3a70:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3a72:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3a76:	9301      	str	r3, [sp, #4]
    3a78:	087b      	lsrs	r3, r7, #1
    3a7a:	9300      	str	r3, [sp, #0]
    3a7c:	0873      	lsrs	r3, r6, #1
    3a7e:	2200      	movs	r2, #0
    3a80:	4621      	mov	r1, r4
    3a82:	480c      	ldr	r0, [pc, #48]	; (3ab4 <grid_sys_bank_select+0x168>)
    3a84:	4d08      	ldr	r5, [pc, #32]	; (3aa8 <grid_sys_bank_select+0x15c>)
    3a86:	47a8      	blx	r5
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3a88:	f8cd 8004 	str.w	r8, [sp, #4]
    3a8c:	9700      	str	r7, [sp, #0]
    3a8e:	4633      	mov	r3, r6
    3a90:	2200      	movs	r2, #0
    3a92:	4621      	mov	r1, r4
    3a94:	4807      	ldr	r0, [pc, #28]	; (3ab4 <grid_sys_bank_select+0x168>)
    3a96:	4c05      	ldr	r4, [pc, #20]	; (3aac <grid_sys_bank_select+0x160>)
    3a98:	47a0      	blx	r4
    3a9a:	e7cc      	b.n	3a36 <grid_sys_bank_select+0xea>
}
    3a9c:	b005      	add	sp, #20
    3a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3aa2:	bf00      	nop
    3aa4:	0000385d 	.word	0x0000385d
    3aa8:	00001ee5 	.word	0x00001ee5
    3aac:	00001f2f 	.word	0x00001f2f
    3ab0:	00001e55 	.word	0x00001e55
    3ab4:	20003614 	.word	0x20003614
    3ab8:	00001e9d 	.word	0x00001e9d

00003abc <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3abc:	2903      	cmp	r1, #3
    3abe:	d009      	beq.n	3ad4 <grid_msg_get_checksum+0x18>
    3ac0:	1e43      	subs	r3, r0, #1
    3ac2:	3904      	subs	r1, #4
    3ac4:	4401      	add	r1, r0
    3ac6:	2000      	movs	r0, #0
		checksum ^= str[i];
    3ac8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3acc:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3ace:	428b      	cmp	r3, r1
    3ad0:	d1fa      	bne.n	3ac8 <grid_msg_get_checksum+0xc>
    3ad2:	4770      	bx	lr
	uint8_t checksum = 0;
    3ad4:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3ad6:	4770      	bx	lr

00003ad8 <grid_msg_set_checksum>:

void grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    3ad8:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3ada:	1ecb      	subs	r3, r1, #3
    3adc:	2102      	movs	r1, #2
    3ade:	4418      	add	r0, r3
    3ae0:	4b01      	ldr	r3, [pc, #4]	; (3ae8 <grid_msg_set_checksum+0x10>)
    3ae2:	4798      	blx	r3
    3ae4:	bd08      	pop	{r3, pc}
    3ae6:	bf00      	nop
    3ae8:	00003825 	.word	0x00003825

00003aec <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3aec:	b500      	push	{lr}
    3aee:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3af0:	aa02      	add	r2, sp, #8
    3af2:	2300      	movs	r3, #0
    3af4:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3af8:	2102      	movs	r1, #2
    3afa:	3004      	adds	r0, #4
    3afc:	4b02      	ldr	r3, [pc, #8]	; (3b08 <grid_msg_get_id+0x1c>)
    3afe:	4798      	blx	r3
	
}
    3b00:	b2c0      	uxtb	r0, r0
    3b02:	b003      	add	sp, #12
    3b04:	f85d fb04 	ldr.w	pc, [sp], #4
    3b08:	000037e5 	.word	0x000037e5

00003b0c <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3b0c:	b500      	push	{lr}
    3b0e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3b10:	aa02      	add	r2, sp, #8
    3b12:	2300      	movs	r3, #0
    3b14:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3b18:	2102      	movs	r1, #2
    3b1a:	3006      	adds	r0, #6
    3b1c:	4b02      	ldr	r3, [pc, #8]	; (3b28 <grid_msg_get_dx+0x1c>)
    3b1e:	4798      	blx	r3
	
}
    3b20:	b2c0      	uxtb	r0, r0
    3b22:	b003      	add	sp, #12
    3b24:	f85d fb04 	ldr.w	pc, [sp], #4
    3b28:	000037e5 	.word	0x000037e5

00003b2c <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3b2c:	b500      	push	{lr}
    3b2e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3b30:	aa02      	add	r2, sp, #8
    3b32:	2300      	movs	r3, #0
    3b34:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3b38:	2102      	movs	r1, #2
    3b3a:	3008      	adds	r0, #8
    3b3c:	4b02      	ldr	r3, [pc, #8]	; (3b48 <grid_msg_get_dy+0x1c>)
    3b3e:	4798      	blx	r3

}
    3b40:	b2c0      	uxtb	r0, r0
    3b42:	b003      	add	sp, #12
    3b44:	f85d fb04 	ldr.w	pc, [sp], #4
    3b48:	000037e5 	.word	0x000037e5

00003b4c <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3b4c:	b500      	push	{lr}
    3b4e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3b50:	aa02      	add	r2, sp, #8
    3b52:	2300      	movs	r3, #0
    3b54:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3b58:	2102      	movs	r1, #2
    3b5a:	300a      	adds	r0, #10
    3b5c:	4b02      	ldr	r3, [pc, #8]	; (3b68 <grid_msg_get_age+0x1c>)
    3b5e:	4798      	blx	r3
	
}
    3b60:	b2c0      	uxtb	r0, r0
    3b62:	b003      	add	sp, #12
    3b64:	f85d fb04 	ldr.w	pc, [sp], #4
    3b68:	000037e5 	.word	0x000037e5

00003b6c <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3b6c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3b6e:	460a      	mov	r2, r1
    3b70:	2102      	movs	r1, #2
    3b72:	3004      	adds	r0, #4
    3b74:	4b01      	ldr	r3, [pc, #4]	; (3b7c <grid_msg_set_id+0x10>)
    3b76:	4798      	blx	r3
    3b78:	bd08      	pop	{r3, pc}
    3b7a:	bf00      	nop
    3b7c:	00003825 	.word	0x00003825

00003b80 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3b80:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3b82:	460a      	mov	r2, r1
    3b84:	2102      	movs	r1, #2
    3b86:	3006      	adds	r0, #6
    3b88:	4b01      	ldr	r3, [pc, #4]	; (3b90 <grid_msg_set_dx+0x10>)
    3b8a:	4798      	blx	r3
    3b8c:	bd08      	pop	{r3, pc}
    3b8e:	bf00      	nop
    3b90:	00003825 	.word	0x00003825

00003b94 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3b94:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3b96:	460a      	mov	r2, r1
    3b98:	2102      	movs	r1, #2
    3b9a:	3008      	adds	r0, #8
    3b9c:	4b01      	ldr	r3, [pc, #4]	; (3ba4 <grid_msg_set_dy+0x10>)
    3b9e:	4798      	blx	r3
    3ba0:	bd08      	pop	{r3, pc}
    3ba2:	bf00      	nop
    3ba4:	00003825 	.word	0x00003825

00003ba8 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3ba8:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3baa:	460a      	mov	r2, r1
    3bac:	2102      	movs	r1, #2
    3bae:	300a      	adds	r0, #10
    3bb0:	4b01      	ldr	r3, [pc, #4]	; (3bb8 <grid_msg_set_age+0x10>)
    3bb2:	4798      	blx	r3
    3bb4:	bd08      	pop	{r3, pc}
    3bb6:	bf00      	nop
    3bb8:	00003825 	.word	0x00003825

00003bbc <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3bbc:	69c3      	ldr	r3, [r0, #28]
    3bbe:	4299      	cmp	r1, r3
    3bc0:	d00d      	beq.n	3bde <grid_msg_find_recent+0x22>
    3bc2:	2301      	movs	r3, #1
    3bc4:	f003 021f 	and.w	r2, r3, #31
    3bc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3bcc:	69d2      	ldr	r2, [r2, #28]
    3bce:	428a      	cmp	r2, r1
    3bd0:	d007      	beq.n	3be2 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    3bd2:	3301      	adds	r3, #1
    3bd4:	b2db      	uxtb	r3, r3
    3bd6:	2b20      	cmp	r3, #32
    3bd8:	d1f4      	bne.n	3bc4 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3bda:	2000      	movs	r0, #0
    3bdc:	4770      	bx	lr
			return 1;
    3bde:	2001      	movs	r0, #1
    3be0:	4770      	bx	lr
    3be2:	2001      	movs	r0, #1
}
    3be4:	4770      	bx	lr

00003be6 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3be6:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    3bea:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3bec:	f003 031f 	and.w	r3, r3, #31
    3bf0:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3bf4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3bf8:	61c1      	str	r1, [r0, #28]
    3bfa:	4770      	bx	lr

00003bfc <grid_ui_model_init>:
	
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3bfc:	b510      	push	{r4, lr}
    3bfe:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    3c00:	2306      	movs	r3, #6
    3c02:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    3c04:	4419      	add	r1, r3
    3c06:	b2c8      	uxtb	r0, r1
    3c08:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    3c0a:	0100      	lsls	r0, r0, #4
    3c0c:	4b02      	ldr	r3, [pc, #8]	; (3c18 <grid_ui_model_init+0x1c>)
    3c0e:	4798      	blx	r3
    3c10:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    3c12:	3060      	adds	r0, #96	; 0x60
    3c14:	60a0      	str	r0, [r4, #8]
		
}
    3c16:	bd10      	pop	{r4, pc}
    3c18:	0000babd 	.word	0x0000babd

00003c1c <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c20:	4605      	mov	r5, r0
    3c22:	4698      	mov	r8, r3
    3c24:	9808      	ldr	r0, [sp, #32]
    3c26:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    3c28:	010c      	lsls	r4, r1, #4
    3c2a:	686b      	ldr	r3, [r5, #4]
    3c2c:	2100      	movs	r1, #0
    3c2e:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    3c30:	686b      	ldr	r3, [r5, #4]
    3c32:	4423      	add	r3, r4
    3c34:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    3c36:	686b      	ldr	r3, [r5, #4]
    3c38:	4423      	add	r3, r4
    3c3a:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    3c3c:	686b      	ldr	r3, [r5, #4]
    3c3e:	4423      	add	r3, r4
    3c40:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    3c44:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3c46:	686b      	ldr	r3, [r5, #4]
    3c48:	eb03 0904 	add.w	r9, r3, r4
    3c4c:	4f1b      	ldr	r7, [pc, #108]	; (3cbc <grid_report_init+0xa0>)
    3c4e:	47b8      	blx	r7
    3c50:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3c54:	686b      	ldr	r3, [r5, #4]
    3c56:	eb03 0904 	add.w	r9, r3, r4
    3c5a:	980a      	ldr	r0, [sp, #40]	; 0x28
    3c5c:	47b8      	blx	r7
    3c5e:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3c62:	686a      	ldr	r2, [r5, #4]
    3c64:	4422      	add	r2, r4
    3c66:	6853      	ldr	r3, [r2, #4]
    3c68:	b30b      	cbz	r3, 3cae <grid_report_init+0x92>
    3c6a:	68d3      	ldr	r3, [r2, #12]
    3c6c:	b313      	cbz	r3, 3cb4 <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3c6e:	7893      	ldrb	r3, [r2, #2]
    3c70:	b15b      	cbz	r3, 3c8a <grid_report_init+0x6e>
    3c72:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3c74:	f818 1003 	ldrb.w	r1, [r8, r3]
    3c78:	6852      	ldr	r2, [r2, #4]
    3c7a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3c7c:	3301      	adds	r3, #1
    3c7e:	b2db      	uxtb	r3, r3
    3c80:	686a      	ldr	r2, [r5, #4]
    3c82:	4422      	add	r2, r4
    3c84:	7891      	ldrb	r1, [r2, #2]
    3c86:	4299      	cmp	r1, r3
    3c88:	d8f4      	bhi.n	3c74 <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3c8a:	686a      	ldr	r2, [r5, #4]
    3c8c:	4422      	add	r2, r4
    3c8e:	7a10      	ldrb	r0, [r2, #8]
    3c90:	b188      	cbz	r0, 3cb6 <grid_report_init+0x9a>
    3c92:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3c94:	5cf1      	ldrb	r1, [r6, r3]
    3c96:	68d2      	ldr	r2, [r2, #12]
    3c98:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3c9a:	3301      	adds	r3, #1
    3c9c:	b2db      	uxtb	r3, r3
    3c9e:	686a      	ldr	r2, [r5, #4]
    3ca0:	4422      	add	r2, r4
    3ca2:	7a11      	ldrb	r1, [r2, #8]
    3ca4:	4299      	cmp	r1, r3
    3ca6:	d8f5      	bhi.n	3c94 <grid_report_init+0x78>
	}
	
	return 0;
    3ca8:	2000      	movs	r0, #0
    3caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    3cae:	20ff      	movs	r0, #255	; 0xff
    3cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3cb4:	20ff      	movs	r0, #255	; 0xff
	
}
    3cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3cba:	bf00      	nop
    3cbc:	0000babd 	.word	0x0000babd

00003cc0 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3cc0:	b510      	push	{r4, lr}
    3cc2:	b084      	sub	sp, #16
	
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
    3cc4:	7844      	ldrb	r4, [r0, #1]
    3cc6:	4421      	add	r1, r4
    3cc8:	9c08      	ldr	r4, [sp, #32]
    3cca:	9402      	str	r4, [sp, #8]
    3ccc:	9c07      	ldr	r4, [sp, #28]
    3cce:	9401      	str	r4, [sp, #4]
    3cd0:	9c06      	ldr	r4, [sp, #24]
    3cd2:	9400      	str	r4, [sp, #0]
    3cd4:	b2c9      	uxtb	r1, r1
    3cd6:	4c02      	ldr	r4, [pc, #8]	; (3ce0 <grid_report_ui_init+0x20>)
    3cd8:	47a0      	blx	r4
}
    3cda:	b004      	add	sp, #16
    3cdc:	bd10      	pop	{r4, pc}
    3cde:	bf00      	nop
    3ce0:	00003c1d 	.word	0x00003c1d

00003ce4 <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    3ce4:	7843      	ldrb	r3, [r0, #1]
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	f000 80c3 	beq.w	3e72 <grid_report_sys_init+0x18e>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    3cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cf0:	b08e      	sub	sp, #56	; 0x38
    3cf2:	4607      	mov	r7, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    3cf4:	2400      	movs	r4, #0
			
		uint8_t payload_template[30];
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    3cf6:	4625      	mov	r5, r4
			
			uint8_t direction = GRID_MSG_WEST;
			
			type = GRID_REPORT_TYPE_DIRECT_WEST;
			
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3cf8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 3e8c <grid_report_sys_init+0x1a8>
			
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3cfc:	f8df 8190 	ldr.w	r8, [pc, #400]	; 3e90 <grid_report_sys_init+0x1ac>
    3d00:	e036      	b.n	3d70 <grid_report_sys_init+0x8c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_BANK,	GRID_MSG_COMMAND_SYS_BANK_SELECT, 0, GRID_MSG_END_OF_TEXT);
    3d02:	2303      	movs	r3, #3
    3d04:	9303      	str	r3, [sp, #12]
    3d06:	9502      	str	r5, [sp, #8]
    3d08:	2365      	movs	r3, #101	; 0x65
    3d0a:	9301      	str	r3, [sp, #4]
    3d0c:	2364      	movs	r3, #100	; 0x64
    3d0e:	9300      	str	r3, [sp, #0]
    3d10:	2304      	movs	r3, #4
    3d12:	2202      	movs	r2, #2
    3d14:	4957      	ldr	r1, [pc, #348]	; (3e74 <grid_report_sys_init+0x190>)
    3d16:	a806      	add	r0, sp, #24
    3d18:	4e57      	ldr	r6, [pc, #348]	; (3e78 <grid_report_sys_init+0x194>)
    3d1a:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3d1c:	2602      	movs	r6, #2
    3d1e:	e00d      	b.n	3d3c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_HEARTBEAT, GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE, 0,	GRID_MSG_END_OF_TEXT);
    3d20:	2303      	movs	r3, #3
    3d22:	9303      	str	r3, [sp, #12]
    3d24:	9502      	str	r5, [sp, #8]
    3d26:	2367      	movs	r3, #103	; 0x67
    3d28:	9301      	str	r3, [sp, #4]
    3d2a:	2366      	movs	r3, #102	; 0x66
    3d2c:	9300      	str	r3, [sp, #0]
    3d2e:	2304      	movs	r3, #4
    3d30:	2202      	movs	r2, #2
    3d32:	4950      	ldr	r1, [pc, #320]	; (3e74 <grid_report_sys_init+0x190>)
    3d34:	a806      	add	r0, sp, #24
    3d36:	4e50      	ldr	r6, [pc, #320]	; (3e78 <grid_report_sys_init+0x194>)
    3d38:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3d3a:	2602      	movs	r6, #2
		}
		
		
		
				
		uint8_t payload_length = strlen(payload_template);
    3d3c:	a806      	add	r0, sp, #24
    3d3e:	47c0      	blx	r8

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3d40:	f88d 5014 	strb.w	r5, [sp, #20]
		helper_template[1] = 0;
    3d44:	f88d 5015 	strb.w	r5, [sp, #21]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    3d48:	2302      	movs	r3, #2
    3d4a:	9302      	str	r3, [sp, #8]
    3d4c:	ab05      	add	r3, sp, #20
    3d4e:	9301      	str	r3, [sp, #4]
    3d50:	b2c0      	uxtb	r0, r0
    3d52:	9000      	str	r0, [sp, #0]
    3d54:	ab06      	add	r3, sp, #24
    3d56:	4632      	mov	r2, r6
    3d58:	4621      	mov	r1, r4
    3d5a:	4638      	mov	r0, r7
    3d5c:	4e47      	ldr	r6, [pc, #284]	; (3e7c <grid_report_sys_init+0x198>)
    3d5e:	47b0      	blx	r6
		
		if (error != 0){
    3d60:	2800      	cmp	r0, #0
    3d62:	f040 8083 	bne.w	3e6c <grid_report_sys_init+0x188>
	for(uint8_t i=0; i<mod->report_offset; i++){
    3d66:	3401      	adds	r4, #1
    3d68:	b2e4      	uxtb	r4, r4
    3d6a:	787b      	ldrb	r3, [r7, #1]
    3d6c:	42a3      	cmp	r3, r4
    3d6e:	d97d      	bls.n	3e6c <grid_report_sys_init+0x188>
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE
    3d70:	2c05      	cmp	r4, #5
    3d72:	d0c6      	beq.n	3d02 <grid_report_sys_init+0x1e>
		else if (i == GRID_REPORT_INDEX_HEARTBEAT){ // HEARTBEAT
    3d74:	2c00      	cmp	r4, #0
    3d76:	d0d3      	beq.n	3d20 <grid_report_sys_init+0x3c>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    3d78:	2c01      	cmp	r4, #1
    3d7a:	d007      	beq.n	3d8c <grid_report_sys_init+0xa8>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    3d7c:	2c02      	cmp	r4, #2
    3d7e:	d021      	beq.n	3dc4 <grid_report_sys_init+0xe0>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    3d80:	2c03      	cmp	r4, #3
    3d82:	d03b      	beq.n	3dfc <grid_report_sys_init+0x118>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    3d84:	2c04      	cmp	r4, #4
    3d86:	d055      	beq.n	3e34 <grid_report_sys_init+0x150>
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    3d88:	462e      	mov	r6, r5
    3d8a:	e7d7      	b.n	3d3c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3d8c:	47c8      	blx	r9
    3d8e:	2604      	movs	r6, #4
    3d90:	9603      	str	r6, [sp, #12]
    3d92:	9002      	str	r0, [sp, #8]
    3d94:	2311      	movs	r3, #17
    3d96:	9301      	str	r3, [sp, #4]
    3d98:	2307      	movs	r3, #7
    3d9a:	9300      	str	r3, [sp, #0]
    3d9c:	230e      	movs	r3, #14
    3d9e:	2201      	movs	r2, #1
    3da0:	4937      	ldr	r1, [pc, #220]	; (3e80 <grid_report_sys_init+0x19c>)
    3da2:	a806      	add	r0, sp, #24
    3da4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 3e78 <grid_report_sys_init+0x194>
    3da8:	47d0      	blx	sl
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3daa:	a806      	add	r0, sp, #24
    3dac:	47c0      	blx	r8
    3dae:	4682      	mov	sl, r0
    3db0:	4601      	mov	r1, r0
    3db2:	a806      	add	r0, sp, #24
    3db4:	4b33      	ldr	r3, [pc, #204]	; (3e84 <grid_report_sys_init+0x1a0>)
    3db6:	4798      	blx	r3
    3db8:	4602      	mov	r2, r0
    3dba:	4651      	mov	r1, sl
    3dbc:	a806      	add	r0, sp, #24
    3dbe:	4b32      	ldr	r3, [pc, #200]	; (3e88 <grid_report_sys_init+0x1a4>)
    3dc0:	4798      	blx	r3
    3dc2:	e7bb      	b.n	3d3c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3dc4:	47c8      	blx	r9
    3dc6:	2304      	movs	r3, #4
    3dc8:	9303      	str	r3, [sp, #12]
    3dca:	9002      	str	r0, [sp, #8]
    3dcc:	2312      	movs	r3, #18
    3dce:	9301      	str	r3, [sp, #4]
    3dd0:	2307      	movs	r3, #7
    3dd2:	9300      	str	r3, [sp, #0]
    3dd4:	230e      	movs	r3, #14
    3dd6:	2201      	movs	r2, #1
    3dd8:	4929      	ldr	r1, [pc, #164]	; (3e80 <grid_report_sys_init+0x19c>)
    3dda:	a806      	add	r0, sp, #24
    3ddc:	4e26      	ldr	r6, [pc, #152]	; (3e78 <grid_report_sys_init+0x194>)
    3dde:	47b0      	blx	r6
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3de0:	a806      	add	r0, sp, #24
    3de2:	47c0      	blx	r8
    3de4:	4606      	mov	r6, r0
    3de6:	4601      	mov	r1, r0
    3de8:	a806      	add	r0, sp, #24
    3dea:	4b26      	ldr	r3, [pc, #152]	; (3e84 <grid_report_sys_init+0x1a0>)
    3dec:	4798      	blx	r3
    3dee:	4602      	mov	r2, r0
    3df0:	4631      	mov	r1, r6
    3df2:	a806      	add	r0, sp, #24
    3df4:	4b24      	ldr	r3, [pc, #144]	; (3e88 <grid_report_sys_init+0x1a4>)
    3df6:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    3df8:	2605      	movs	r6, #5
    3dfa:	e79f      	b.n	3d3c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3dfc:	47c8      	blx	r9
    3dfe:	2304      	movs	r3, #4
    3e00:	9303      	str	r3, [sp, #12]
    3e02:	9002      	str	r0, [sp, #8]
    3e04:	2313      	movs	r3, #19
    3e06:	9301      	str	r3, [sp, #4]
    3e08:	2307      	movs	r3, #7
    3e0a:	9300      	str	r3, [sp, #0]
    3e0c:	230e      	movs	r3, #14
    3e0e:	2201      	movs	r2, #1
    3e10:	491b      	ldr	r1, [pc, #108]	; (3e80 <grid_report_sys_init+0x19c>)
    3e12:	a806      	add	r0, sp, #24
    3e14:	4e18      	ldr	r6, [pc, #96]	; (3e78 <grid_report_sys_init+0x194>)
    3e16:	47b0      	blx	r6
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3e18:	a806      	add	r0, sp, #24
    3e1a:	47c0      	blx	r8
    3e1c:	4606      	mov	r6, r0
    3e1e:	4601      	mov	r1, r0
    3e20:	a806      	add	r0, sp, #24
    3e22:	4b18      	ldr	r3, [pc, #96]	; (3e84 <grid_report_sys_init+0x1a0>)
    3e24:	4798      	blx	r3
    3e26:	4602      	mov	r2, r0
    3e28:	4631      	mov	r1, r6
    3e2a:	a806      	add	r0, sp, #24
    3e2c:	4b16      	ldr	r3, [pc, #88]	; (3e88 <grid_report_sys_init+0x1a4>)
    3e2e:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    3e30:	2606      	movs	r6, #6
    3e32:	e783      	b.n	3d3c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3e34:	47c8      	blx	r9
    3e36:	2304      	movs	r3, #4
    3e38:	9303      	str	r3, [sp, #12]
    3e3a:	9002      	str	r0, [sp, #8]
    3e3c:	2314      	movs	r3, #20
    3e3e:	9301      	str	r3, [sp, #4]
    3e40:	2607      	movs	r6, #7
    3e42:	9600      	str	r6, [sp, #0]
    3e44:	230e      	movs	r3, #14
    3e46:	2201      	movs	r2, #1
    3e48:	490d      	ldr	r1, [pc, #52]	; (3e80 <grid_report_sys_init+0x19c>)
    3e4a:	a806      	add	r0, sp, #24
    3e4c:	f8df a028 	ldr.w	sl, [pc, #40]	; 3e78 <grid_report_sys_init+0x194>
    3e50:	47d0      	blx	sl
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3e52:	a806      	add	r0, sp, #24
    3e54:	47c0      	blx	r8
    3e56:	4682      	mov	sl, r0
    3e58:	4601      	mov	r1, r0
    3e5a:	a806      	add	r0, sp, #24
    3e5c:	4b09      	ldr	r3, [pc, #36]	; (3e84 <grid_report_sys_init+0x1a0>)
    3e5e:	4798      	blx	r3
    3e60:	4602      	mov	r2, r0
    3e62:	4651      	mov	r1, sl
    3e64:	a806      	add	r0, sp, #24
    3e66:	4b08      	ldr	r3, [pc, #32]	; (3e88 <grid_report_sys_init+0x1a4>)
    3e68:	4798      	blx	r3
    3e6a:	e767      	b.n	3d3c <grid_report_sys_init+0x58>
			}
			
		}
	
	}
}
    3e6c:	b00e      	add	sp, #56	; 0x38
    3e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e72:	4770      	bx	lr
    3e74:	0000d088 	.word	0x0000d088
    3e78:	0000bed1 	.word	0x0000bed1
    3e7c:	00003c1d 	.word	0x00003c1d
    3e80:	0000d0a0 	.word	0x0000d0a0
    3e84:	00003abd 	.word	0x00003abd
    3e88:	00003ad9 	.word	0x00003ad9
    3e8c:	0000385d 	.word	0x0000385d
    3e90:	0000bf19 	.word	0x0000bf19

00003e94 <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    3e94:	6843      	ldr	r3, [r0, #4]
    3e96:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    3e9a:	7888      	ldrb	r0, [r1, #2]
    3e9c:	b140      	cbz	r0, 3eb0 <grid_report_render+0x1c>
    3e9e:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    3ea0:	6848      	ldr	r0, [r1, #4]
    3ea2:	5cc0      	ldrb	r0, [r0, r3]
    3ea4:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    3ea6:	3301      	adds	r3, #1
    3ea8:	b2db      	uxtb	r3, r3
    3eaa:	7888      	ldrb	r0, [r1, #2]
    3eac:	4298      	cmp	r0, r3
    3eae:	d8f7      	bhi.n	3ea0 <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    3eb0:	4770      	bx	lr

00003eb2 <grid_report_ui_get_changed_flag>:

// UI REPORT FLAGS

uint8_t grid_report_ui_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index+mod->report_offset].changed;
    3eb2:	7843      	ldrb	r3, [r0, #1]
    3eb4:	4419      	add	r1, r3
    3eb6:	6843      	ldr	r3, [r0, #4]
    3eb8:	0109      	lsls	r1, r1, #4
}
    3eba:	5c58      	ldrb	r0, [r3, r1]
    3ebc:	4770      	bx	lr

00003ebe <grid_report_ui_set_changed_flag>:

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    3ebe:	7843      	ldrb	r3, [r0, #1]
    3ec0:	4419      	add	r1, r3
    3ec2:	6843      	ldr	r3, [r0, #4]
    3ec4:	0109      	lsls	r1, r1, #4
    3ec6:	2201      	movs	r2, #1
    3ec8:	545a      	strb	r2, [r3, r1]
    3eca:	4770      	bx	lr

00003ecc <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    3ecc:	6843      	ldr	r3, [r0, #4]
    3ece:	0109      	lsls	r1, r1, #4
    3ed0:	2201      	movs	r2, #1
    3ed2:	545a      	strb	r2, [r3, r1]
    3ed4:	4770      	bx	lr

00003ed6 <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    3ed6:	6843      	ldr	r3, [r0, #4]
    3ed8:	0109      	lsls	r1, r1, #4
    3eda:	2200      	movs	r2, #0
    3edc:	545a      	strb	r2, [r3, r1]
    3ede:	4770      	bx	lr

00003ee0 <grid_port_process_ui>:
	if (por->cooldown > 15){
    3ee0:	6803      	ldr	r3, [r0, #0]
    3ee2:	2b0f      	cmp	r3, #15
    3ee4:	d811      	bhi.n	3f0a <grid_port_process_ui+0x2a>
	else if (por->cooldown>0){
    3ee6:	b10b      	cbz	r3, 3eec <grid_port_process_ui+0xc>
		por->cooldown--;
    3ee8:	3b01      	subs	r3, #1
    3eea:	6003      	str	r3, [r0, #0]
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    3eec:	4b7b      	ldr	r3, [pc, #492]	; (40dc <grid_port_process_ui+0x1fc>)
    3eee:	781b      	ldrb	r3, [r3, #0]
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	f000 8163 	beq.w	41bc <grid_port_process_ui+0x2dc>
void grid_port_process_ui(struct grid_port* por){
    3ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3efa:	b0cd      	sub	sp, #308	; 0x134
	return mod->report_array[index].changed;
    3efc:	4b77      	ldr	r3, [pc, #476]	; (40dc <grid_port_process_ui+0x1fc>)
    3efe:	6859      	ldr	r1, [r3, #4]
    3f00:	2300      	movs	r3, #0
    3f02:	469e      	mov	lr, r3
    3f04:	461c      	mov	r4, r3
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    3f06:	4e75      	ldr	r6, [pc, #468]	; (40dc <grid_port_process_ui+0x1fc>)
    3f08:	e00c      	b.n	3f24 <grid_port_process_ui+0x44>
		por->cooldown--;
    3f0a:	3b01      	subs	r3, #1
    3f0c:	6003      	str	r3, [r0, #0]
		return;
    3f0e:	4770      	bx	lr
				message_broadcast_available++;	
    3f10:	f10e 0e01 	add.w	lr, lr, #1
    3f14:	fa5f fe8e 	uxtb.w	lr, lr
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    3f18:	3301      	adds	r3, #1
    3f1a:	b2db      	uxtb	r3, r3
    3f1c:	7832      	ldrb	r2, [r6, #0]
    3f1e:	b2d2      	uxtb	r2, r2
    3f20:	429a      	cmp	r2, r3
    3f22:	d920      	bls.n	3f66 <grid_port_process_ui+0x86>
	return mod->report_array[index].changed;
    3f24:	011a      	lsls	r2, r3, #4
    3f26:	188d      	adds	r5, r1, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    3f28:	5c8a      	ldrb	r2, [r1, r2]
    3f2a:	2a00      	cmp	r2, #0
    3f2c:	d0f4      	beq.n	3f18 <grid_port_process_ui+0x38>
	return mod->report_array[index].type;
    3f2e:	786a      	ldrb	r2, [r5, #1]
			if (type == GRID_REPORT_TYPE_BROADCAST){
    3f30:	2a02      	cmp	r2, #2
    3f32:	d0ed      	beq.n	3f10 <grid_port_process_ui+0x30>
			else if (type == GRID_REPORT_TYPE_DIRECT_ALL){	
    3f34:	2a03      	cmp	r2, #3
    3f36:	d00a      	beq.n	3f4e <grid_port_process_ui+0x6e>
			else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    3f38:	2a04      	cmp	r2, #4
    3f3a:	d00b      	beq.n	3f54 <grid_port_process_ui+0x74>
			else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    3f3c:	2a05      	cmp	r2, #5
    3f3e:	d00c      	beq.n	3f5a <grid_port_process_ui+0x7a>
			else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    3f40:	2a06      	cmp	r2, #6
    3f42:	d00d      	beq.n	3f60 <grid_port_process_ui+0x80>
			else if (type == GRID_REPORT_TYPE_DIRECT_WEST){
    3f44:	2a07      	cmp	r2, #7
				message_direct_available++;
    3f46:	bf04      	itt	eq
    3f48:	3401      	addeq	r4, #1
    3f4a:	b2e4      	uxtbeq	r4, r4
    3f4c:	e7e4      	b.n	3f18 <grid_port_process_ui+0x38>
				message_direct_available++;	
    3f4e:	3401      	adds	r4, #1
    3f50:	b2e4      	uxtb	r4, r4
    3f52:	e7e1      	b.n	3f18 <grid_port_process_ui+0x38>
				message_direct_available++;
    3f54:	3401      	adds	r4, #1
    3f56:	b2e4      	uxtb	r4, r4
    3f58:	e7de      	b.n	3f18 <grid_port_process_ui+0x38>
				message_direct_available++;
    3f5a:	3401      	adds	r4, #1
    3f5c:	b2e4      	uxtb	r4, r4
    3f5e:	e7db      	b.n	3f18 <grid_port_process_ui+0x38>
				message_direct_available++;
    3f60:	3401      	adds	r4, #1
    3f62:	b2e4      	uxtb	r4, r4
    3f64:	e7d8      	b.n	3f18 <grid_port_process_ui+0x38>
    3f66:	4680      	mov	r8, r0
	if (message_direct_available){
    3f68:	2c00      	cmp	r4, #0
    3f6a:	d06b      	beq.n	4044 <grid_port_process_ui+0x164>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    3f6c:	4b5b      	ldr	r3, [pc, #364]	; (40dc <grid_port_process_ui+0x1fc>)
    3f6e:	781b      	ldrb	r3, [r3, #0]
    3f70:	2b00      	cmp	r3, #0
    3f72:	d06a      	beq.n	404a <grid_port_process_ui+0x16a>
    3f74:	2500      	movs	r5, #0
	return mod->report_array[index].changed;
    3f76:	f8df 8164 	ldr.w	r8, [pc, #356]	; 40dc <grid_port_process_ui+0x1fc>
				length += strlen(&message[length]);
    3f7a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 4118 <grid_port_process_ui+0x238>
				CRITICAL_SECTION_ENTER()			
    3f7e:	f8df a19c 	ldr.w	sl, [pc, #412]	; 411c <grid_port_process_ui+0x23c>
    3f82:	e00e      	b.n	3fa2 <grid_port_process_ui+0xc2>
					target_buffer = &GRID_PORT_U.rx_buffer;
    3f84:	4b56      	ldr	r3, [pc, #344]	; (40e0 <grid_port_process_ui+0x200>)
    3f86:	9307      	str	r3, [sp, #28]
				if (grid_buffer_write_init(target_buffer, length)){
    3f88:	b2b1      	uxth	r1, r6
    3f8a:	9807      	ldr	r0, [sp, #28]
    3f8c:	4b55      	ldr	r3, [pc, #340]	; (40e4 <grid_port_process_ui+0x204>)
    3f8e:	4798      	blx	r3
    3f90:	2800      	cmp	r0, #0
    3f92:	d141      	bne.n	4018 <grid_port_process_ui+0x138>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    3f94:	3501      	adds	r5, #1
    3f96:	b2ed      	uxtb	r5, r5
    3f98:	f898 3000 	ldrb.w	r3, [r8]
    3f9c:	b2db      	uxtb	r3, r3
    3f9e:	42ab      	cmp	r3, r5
    3fa0:	d953      	bls.n	404a <grid_port_process_ui+0x16a>
	return mod->report_array[index].changed;
    3fa2:	012c      	lsls	r4, r5, #4
    3fa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3fa8:	191a      	adds	r2, r3, r4
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_ALL || type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    3faa:	5d1b      	ldrb	r3, [r3, r4]
    3fac:	2b00      	cmp	r3, #0
    3fae:	d0f1      	beq.n	3f94 <grid_port_process_ui+0xb4>
    3fb0:	7853      	ldrb	r3, [r2, #1]
    3fb2:	3b03      	subs	r3, #3
    3fb4:	b2db      	uxtb	r3, r3
    3fb6:	2b04      	cmp	r3, #4
    3fb8:	d8ec      	bhi.n	3f94 <grid_port_process_ui+0xb4>
				length += strlen(&message[length]);
    3fba:	a80c      	add	r0, sp, #48	; 0x30
    3fbc:	47c8      	blx	r9
    3fbe:	4606      	mov	r6, r0
				CRITICAL_SECTION_ENTER()			
    3fc0:	a80a      	add	r0, sp, #40	; 0x28
    3fc2:	47d0      	blx	sl
				grid_report_render(mod, i, &message[length]);
    3fc4:	ab0c      	add	r3, sp, #48	; 0x30
    3fc6:	eb03 0b06 	add.w	fp, r3, r6
    3fca:	465a      	mov	r2, fp
    3fcc:	4629      	mov	r1, r5
    3fce:	4640      	mov	r0, r8
    3fd0:	4b45      	ldr	r3, [pc, #276]	; (40e8 <grid_port_process_ui+0x208>)
    3fd2:	4798      	blx	r3
				length += strlen(&message[length]);
    3fd4:	4658      	mov	r0, fp
    3fd6:	47c8      	blx	r9
    3fd8:	4406      	add	r6, r0
				CRITICAL_SECTION_LEAVE()			
    3fda:	a80a      	add	r0, sp, #40	; 0x28
    3fdc:	4b43      	ldr	r3, [pc, #268]	; (40ec <grid_port_process_ui+0x20c>)
    3fde:	4798      	blx	r3
	return mod->report_array[index].type;
    3fe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3fe4:	441c      	add	r4, r3
    3fe6:	7863      	ldrb	r3, [r4, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_ALL){
    3fe8:	2b03      	cmp	r3, #3
    3fea:	d0cb      	beq.n	3f84 <grid_port_process_ui+0xa4>
				else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    3fec:	2b04      	cmp	r3, #4
    3fee:	d00a      	beq.n	4006 <grid_port_process_ui+0x126>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    3ff0:	2b05      	cmp	r3, #5
    3ff2:	d00b      	beq.n	400c <grid_port_process_ui+0x12c>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    3ff4:	2b06      	cmp	r3, #6
    3ff6:	d00c      	beq.n	4012 <grid_port_process_ui+0x132>
					target_buffer = &GRID_PORT_W.tx_buffer;
    3ff8:	4a3d      	ldr	r2, [pc, #244]	; (40f0 <grid_port_process_ui+0x210>)
    3ffa:	9907      	ldr	r1, [sp, #28]
    3ffc:	2b07      	cmp	r3, #7
    3ffe:	bf08      	it	eq
    4000:	4611      	moveq	r1, r2
    4002:	9107      	str	r1, [sp, #28]
    4004:	e7c0      	b.n	3f88 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_N.tx_buffer;
    4006:	4b3b      	ldr	r3, [pc, #236]	; (40f4 <grid_port_process_ui+0x214>)
    4008:	9307      	str	r3, [sp, #28]
    400a:	e7bd      	b.n	3f88 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_E.tx_buffer;
    400c:	4b3a      	ldr	r3, [pc, #232]	; (40f8 <grid_port_process_ui+0x218>)
    400e:	9307      	str	r3, [sp, #28]
    4010:	e7ba      	b.n	3f88 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_S.tx_buffer;
    4012:	4b3a      	ldr	r3, [pc, #232]	; (40fc <grid_port_process_ui+0x21c>)
    4014:	9307      	str	r3, [sp, #28]
    4016:	e7b7      	b.n	3f88 <grid_port_process_ui+0xa8>
					grid_report_sys_clear_changed_flag(mod, i);
    4018:	4629      	mov	r1, r5
    401a:	4640      	mov	r0, r8
    401c:	4b38      	ldr	r3, [pc, #224]	; (4100 <grid_port_process_ui+0x220>)
    401e:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    4020:	b166      	cbz	r6, 403c <grid_port_process_ui+0x15c>
    4022:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
    4026:	ab4c      	add	r3, sp, #304	; 0x130
    4028:	441e      	add	r6, r3
    402a:	f2a6 1601 	subw	r6, r6, #257	; 0x101
						grid_buffer_write_character(target_buffer, message[i]);
    402e:	4f35      	ldr	r7, [pc, #212]	; (4104 <grid_port_process_ui+0x224>)
    4030:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4034:	9807      	ldr	r0, [sp, #28]
    4036:	47b8      	blx	r7
					for(uint32_t i = 0; i<length; i++){
    4038:	42b4      	cmp	r4, r6
    403a:	d1f9      	bne.n	4030 <grid_port_process_ui+0x150>
					grid_buffer_write_acknowledge(target_buffer);
    403c:	9807      	ldr	r0, [sp, #28]
    403e:	4b32      	ldr	r3, [pc, #200]	; (4108 <grid_port_process_ui+0x228>)
    4040:	4798      	blx	r3
    4042:	e7a7      	b.n	3f94 <grid_port_process_ui+0xb4>
	if (message_broadcast_available){
    4044:	f1be 0f00 	cmp.w	lr, #0
    4048:	d102      	bne.n	4050 <grid_port_process_ui+0x170>
}
    404a:	b04d      	add	sp, #308	; 0x134
    404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    4050:	4b2e      	ldr	r3, [pc, #184]	; (410c <grid_port_process_ui+0x22c>)
    4052:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    4056:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    4058:	2117      	movs	r1, #23
    405a:	9105      	str	r1, [sp, #20]
    405c:	9304      	str	r3, [sp, #16]
    405e:	237f      	movs	r3, #127	; 0x7f
    4060:	9303      	str	r3, [sp, #12]
    4062:	9302      	str	r3, [sp, #8]
    4064:	9201      	str	r2, [sp, #4]
    4066:	2300      	movs	r3, #0
    4068:	9300      	str	r3, [sp, #0]
    406a:	230f      	movs	r3, #15
    406c:	2201      	movs	r2, #1
    406e:	4928      	ldr	r1, [pc, #160]	; (4110 <grid_port_process_ui+0x230>)
    4070:	a80c      	add	r0, sp, #48	; 0x30
    4072:	4d28      	ldr	r5, [pc, #160]	; (4114 <grid_port_process_ui+0x234>)
    4074:	47a8      	blx	r5
		length += strlen(&message[length]);
    4076:	a80c      	add	r0, sp, #48	; 0x30
    4078:	4b27      	ldr	r3, [pc, #156]	; (4118 <grid_port_process_ui+0x238>)
    407a:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    407c:	4b17      	ldr	r3, [pc, #92]	; (40dc <grid_port_process_ui+0x1fc>)
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	2b00      	cmp	r3, #0
    4082:	d0e2      	beq.n	404a <grid_port_process_ui+0x16a>
    4084:	4625      	mov	r5, r4
    4086:	4606      	mov	r6, r0
			CRITICAL_SECTION_ENTER()
    4088:	f8df a090 	ldr.w	sl, [pc, #144]	; 411c <grid_port_process_ui+0x23c>
	return mod->report_array[index].changed;
    408c:	4f13      	ldr	r7, [pc, #76]	; (40dc <grid_port_process_ui+0x1fc>)
			CRITICAL_SECTION_LEAVE()
    408e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 40ec <grid_port_process_ui+0x20c>
    4092:	e007      	b.n	40a4 <grid_port_process_ui+0x1c4>
    4094:	a809      	add	r0, sp, #36	; 0x24
    4096:	47c8      	blx	r9
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4098:	3501      	adds	r5, #1
    409a:	b2ed      	uxtb	r5, r5
    409c:	783b      	ldrb	r3, [r7, #0]
    409e:	b2db      	uxtb	r3, r3
    40a0:	42ab      	cmp	r3, r5
    40a2:	d93d      	bls.n	4120 <grid_port_process_ui+0x240>
			if (length>200){
    40a4:	2ec8      	cmp	r6, #200	; 0xc8
    40a6:	d8f7      	bhi.n	4098 <grid_port_process_ui+0x1b8>
			CRITICAL_SECTION_ENTER()
    40a8:	a809      	add	r0, sp, #36	; 0x24
    40aa:	47d0      	blx	sl
	return mod->report_array[index].changed;
    40ac:	687a      	ldr	r2, [r7, #4]
    40ae:	012b      	lsls	r3, r5, #4
			if (grid_report_sys_get_changed_flag(mod, i)){
    40b0:	5cd3      	ldrb	r3, [r2, r3]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d0ee      	beq.n	4094 <grid_port_process_ui+0x1b4>
				packetvalid++;
    40b6:	3401      	adds	r4, #1
    40b8:	b2e4      	uxtb	r4, r4
				grid_report_render(mod, i, &message[length]);
    40ba:	ab0c      	add	r3, sp, #48	; 0x30
    40bc:	eb03 0b06 	add.w	fp, r3, r6
    40c0:	465a      	mov	r2, fp
    40c2:	4629      	mov	r1, r5
    40c4:	4638      	mov	r0, r7
    40c6:	4b08      	ldr	r3, [pc, #32]	; (40e8 <grid_port_process_ui+0x208>)
    40c8:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    40ca:	4629      	mov	r1, r5
    40cc:	4638      	mov	r0, r7
    40ce:	4b0c      	ldr	r3, [pc, #48]	; (4100 <grid_port_process_ui+0x220>)
    40d0:	4798      	blx	r3
				length += strlen(&message[length]);
    40d2:	4658      	mov	r0, fp
    40d4:	4b10      	ldr	r3, [pc, #64]	; (4118 <grid_port_process_ui+0x238>)
    40d6:	4798      	blx	r3
    40d8:	4406      	add	r6, r0
    40da:	e7db      	b.n	4094 <grid_port_process_ui+0x1b4>
    40dc:	20001cf8 	.word	0x20001cf8
    40e0:	20001cd8 	.word	0x20001cd8
    40e4:	00001375 	.word	0x00001375
    40e8:	00003e95 	.word	0x00003e95
    40ec:	00004597 	.word	0x00004597
    40f0:	20002690 	.word	0x20002690
    40f4:	20001770 	.word	0x20001770
    40f8:	200035d8 	.word	0x200035d8
    40fc:	20002bb4 	.word	0x20002bb4
    4100:	00003ed7 	.word	0x00003ed7
    4104:	000013a5 	.word	0x000013a5
    4108:	000013c1 	.word	0x000013c1
    410c:	20001d08 	.word	0x20001d08
    4110:	0000d0b4 	.word	0x0000d0b4
    4114:	0000bed1 	.word	0x0000bed1
    4118:	0000bf19 	.word	0x0000bf19
    411c:	00004589 	.word	0x00004589
		if (packetvalid){
    4120:	2c00      	cmp	r4, #0
    4122:	d092      	beq.n	404a <grid_port_process_ui+0x16a>
			por->cooldown += (10+por->cooldown);
    4124:	f8d8 3000 	ldr.w	r3, [r8]
    4128:	005b      	lsls	r3, r3, #1
    412a:	330a      	adds	r3, #10
    412c:	f8c8 3000 	str.w	r3, [r8]
			grid_sys_state.next_broadcast_message_id++;
    4130:	4a23      	ldr	r2, [pc, #140]	; (41c0 <grid_port_process_ui+0x2e0>)
    4132:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    4136:	3301      	adds	r3, #1
    4138:	b2db      	uxtb	r3, r3
    413a:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    413e:	ac0c      	add	r4, sp, #48	; 0x30
    4140:	19a5      	adds	r5, r4, r6
    4142:	2204      	movs	r2, #4
    4144:	491f      	ldr	r1, [pc, #124]	; (41c4 <grid_port_process_ui+0x2e4>)
    4146:	4628      	mov	r0, r5
    4148:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 41ec <grid_port_process_ui+0x30c>
    414c:	47c0      	blx	r8
			length += strlen(&message[length]);
    414e:	4628      	mov	r0, r5
    4150:	4f1d      	ldr	r7, [pc, #116]	; (41c8 <grid_port_process_ui+0x2e8>)
    4152:	47b8      	blx	r7
    4154:	1835      	adds	r5, r6, r0
			sprintf(length_string, "%02x", length);
    4156:	462a      	mov	r2, r5
    4158:	491c      	ldr	r1, [pc, #112]	; (41cc <grid_port_process_ui+0x2ec>)
    415a:	a80a      	add	r0, sp, #40	; 0x28
    415c:	47c0      	blx	r8
			message[2] = length_string[0];
    415e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4162:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    4164:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    4168:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    416a:	4b19      	ldr	r3, [pc, #100]	; (41d0 <grid_port_process_ui+0x2f0>)
    416c:	6818      	ldr	r0, [r3, #0]
    416e:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    4170:	1960      	adds	r0, r4, r5
    4172:	47b8      	blx	r7
    4174:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_get_checksum(message, length);
    4176:	4629      	mov	r1, r5
    4178:	4620      	mov	r0, r4
    417a:	4b16      	ldr	r3, [pc, #88]	; (41d4 <grid_port_process_ui+0x2f4>)
    417c:	4798      	blx	r3
			grid_msg_set_checksum(message, length, checksum);
    417e:	b2c2      	uxtb	r2, r0
    4180:	4629      	mov	r1, r5
    4182:	4620      	mov	r0, r4
    4184:	4b14      	ldr	r3, [pc, #80]	; (41d8 <grid_port_process_ui+0x2f8>)
    4186:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    4188:	b2a9      	uxth	r1, r5
    418a:	4814      	ldr	r0, [pc, #80]	; (41dc <grid_port_process_ui+0x2fc>)
    418c:	4b14      	ldr	r3, [pc, #80]	; (41e0 <grid_port_process_ui+0x300>)
    418e:	4798      	blx	r3
    4190:	2800      	cmp	r0, #0
    4192:	f43f af5a 	beq.w	404a <grid_port_process_ui+0x16a>
				for(uint32_t i = 0; i<length; i++){
    4196:	b16d      	cbz	r5, 41b4 <grid_port_process_ui+0x2d4>
    4198:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
    419c:	ab4c      	add	r3, sp, #304	; 0x130
    419e:	441d      	add	r5, r3
    41a0:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    41a4:	4f0d      	ldr	r7, [pc, #52]	; (41dc <grid_port_process_ui+0x2fc>)
    41a6:	4e0f      	ldr	r6, [pc, #60]	; (41e4 <grid_port_process_ui+0x304>)
    41a8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    41ac:	4638      	mov	r0, r7
    41ae:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    41b0:	42a5      	cmp	r5, r4
    41b2:	d1f9      	bne.n	41a8 <grid_port_process_ui+0x2c8>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    41b4:	4809      	ldr	r0, [pc, #36]	; (41dc <grid_port_process_ui+0x2fc>)
    41b6:	4b0c      	ldr	r3, [pc, #48]	; (41e8 <grid_port_process_ui+0x308>)
    41b8:	4798      	blx	r3
    41ba:	e746      	b.n	404a <grid_port_process_ui+0x16a>
    41bc:	4770      	bx	lr
    41be:	bf00      	nop
    41c0:	20001d08 	.word	0x20001d08
    41c4:	0000d0cc 	.word	0x0000d0cc
    41c8:	0000bf19 	.word	0x0000bf19
    41cc:	0000d0d0 	.word	0x0000d0d0
    41d0:	0000d0d8 	.word	0x0000d0d8
    41d4:	00003abd 	.word	0x00003abd
    41d8:	00003ad9 	.word	0x00003ad9
    41dc:	20001cd8 	.word	0x20001cd8
    41e0:	00001375 	.word	0x00001375
    41e4:	000013a5 	.word	0x000013a5
    41e8:	000013c1 	.word	0x000013c1
    41ec:	0000bed1 	.word	0x0000bed1

000041f0 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    41f0:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    41f2:	6983      	ldr	r3, [r0, #24]
    41f4:	b103      	cbz	r3, 41f8 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    41f6:	4798      	blx	r3
    41f8:	bd08      	pop	{r3, pc}

000041fa <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    41fa:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    41fc:	69c3      	ldr	r3, [r0, #28]
    41fe:	b103      	cbz	r3, 4202 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    4200:	4798      	blx	r3
    4202:	bd08      	pop	{r3, pc}

00004204 <adc_async_channel_conversion_done>:
{
    4204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4208:	4606      	mov	r6, r0
    420a:	460f      	mov	r7, r1
    420c:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    420e:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4210:	5c5c      	ldrb	r4, [r3, r1]
    4212:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4216:	00e4      	lsls	r4, r4, #3
    4218:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    421c:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    4220:	f105 0a04 	add.w	sl, r5, #4
    4224:	b2d1      	uxtb	r1, r2
    4226:	4650      	mov	r0, sl
    4228:	4b0c      	ldr	r3, [pc, #48]	; (425c <adc_async_channel_conversion_done+0x58>)
    422a:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    422c:	4630      	mov	r0, r6
    422e:	4b0c      	ldr	r3, [pc, #48]	; (4260 <adc_async_channel_conversion_done+0x5c>)
    4230:	4798      	blx	r3
    4232:	2801      	cmp	r0, #1
    4234:	d907      	bls.n	4246 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    4236:	ea4f 2119 	mov.w	r1, r9, lsr #8
    423a:	4650      	mov	r0, sl
    423c:	4b07      	ldr	r3, [pc, #28]	; (425c <adc_async_channel_conversion_done+0x58>)
    423e:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    4240:	8aab      	ldrh	r3, [r5, #20]
    4242:	3301      	adds	r3, #1
    4244:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    4246:	8aab      	ldrh	r3, [r5, #20]
    4248:	3301      	adds	r3, #1
    424a:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    424c:	f858 3004 	ldr.w	r3, [r8, r4]
    4250:	b113      	cbz	r3, 4258 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    4252:	4639      	mov	r1, r7
    4254:	4630      	mov	r0, r6
    4256:	4798      	blx	r3
    4258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    425c:	00005a5d 	.word	0x00005a5d
    4260:	00005dfb 	.word	0x00005dfb

00004264 <adc_async_init>:
{
    4264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4268:	4689      	mov	r9, r1
    426a:	4616      	mov	r6, r2
    426c:	461c      	mov	r4, r3
    426e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    4272:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    4274:	4607      	mov	r7, r0
    4276:	b140      	cbz	r0, 428a <adc_async_init+0x26>
    4278:	b149      	cbz	r1, 428e <adc_async_init+0x2a>
    427a:	b152      	cbz	r2, 4292 <adc_async_init+0x2e>
    427c:	f1b8 0f00 	cmp.w	r8, #0
    4280:	d009      	beq.n	4296 <adc_async_init+0x32>
    4282:	1c28      	adds	r0, r5, #0
    4284:	bf18      	it	ne
    4286:	2001      	movne	r0, #1
    4288:	e006      	b.n	4298 <adc_async_init+0x34>
    428a:	2000      	movs	r0, #0
    428c:	e004      	b.n	4298 <adc_async_init+0x34>
    428e:	2000      	movs	r0, #0
    4290:	e002      	b.n	4298 <adc_async_init+0x34>
    4292:	2000      	movs	r0, #0
    4294:	e000      	b.n	4298 <adc_async_init+0x34>
    4296:	2000      	movs	r0, #0
    4298:	f8df b064 	ldr.w	fp, [pc, #100]	; 4300 <adc_async_init+0x9c>
    429c:	223f      	movs	r2, #63	; 0x3f
    429e:	4659      	mov	r1, fp
    42a0:	f8df a060 	ldr.w	sl, [pc, #96]	; 4304 <adc_async_init+0xa0>
    42a4:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    42a6:	1c60      	adds	r0, r4, #1
    42a8:	2240      	movs	r2, #64	; 0x40
    42aa:	4659      	mov	r1, fp
    42ac:	4580      	cmp	r8, r0
    42ae:	bfcc      	ite	gt
    42b0:	2000      	movgt	r0, #0
    42b2:	2001      	movle	r0, #1
    42b4:	47d0      	blx	sl
	device = &descr->device;
    42b6:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    42b8:	21ff      	movs	r1, #255	; 0xff
    42ba:	b2da      	uxtb	r2, r3
    42bc:	54b1      	strb	r1, [r6, r2]
    42be:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    42c0:	b2da      	uxtb	r2, r3
    42c2:	42a2      	cmp	r2, r4
    42c4:	d9f9      	bls.n	42ba <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    42c6:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    42c8:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    42cc:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    42d0:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    42d2:	4649      	mov	r1, r9
    42d4:	4638      	mov	r0, r7
    42d6:	4b06      	ldr	r3, [pc, #24]	; (42f0 <adc_async_init+0x8c>)
    42d8:	4798      	blx	r3
	if (init_status) {
    42da:	4603      	mov	r3, r0
    42dc:	b928      	cbnz	r0, 42ea <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    42de:	4a05      	ldr	r2, [pc, #20]	; (42f4 <adc_async_init+0x90>)
    42e0:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    42e2:	4a05      	ldr	r2, [pc, #20]	; (42f8 <adc_async_init+0x94>)
    42e4:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    42e6:	4a05      	ldr	r2, [pc, #20]	; (42fc <adc_async_init+0x98>)
    42e8:	607a      	str	r2, [r7, #4]
}
    42ea:	4618      	mov	r0, r3
    42ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42f0:	00005cc9 	.word	0x00005cc9
    42f4:	00004205 	.word	0x00004205
    42f8:	000041f1 	.word	0x000041f1
    42fc:	000041fb 	.word	0x000041fb
    4300:	0000d0dc 	.word	0x0000d0dc
    4304:	00005921 	.word	0x00005921

00004308 <adc_async_register_channel_buffer>:
{
    4308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    430c:	460e      	mov	r6, r1
    430e:	4617      	mov	r7, r2
    4310:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    4312:	4605      	mov	r5, r0
    4314:	2800      	cmp	r0, #0
    4316:	d040      	beq.n	439a <adc_async_register_channel_buffer+0x92>
    4318:	2a00      	cmp	r2, #0
    431a:	d040      	beq.n	439e <adc_async_register_channel_buffer+0x96>
    431c:	1c18      	adds	r0, r3, #0
    431e:	bf18      	it	ne
    4320:	2001      	movne	r0, #1
    4322:	f8df 9098 	ldr.w	r9, [pc, #152]	; 43bc <adc_async_register_channel_buffer+0xb4>
    4326:	2266      	movs	r2, #102	; 0x66
    4328:	4649      	mov	r1, r9
    432a:	4c22      	ldr	r4, [pc, #136]	; (43b4 <adc_async_register_channel_buffer+0xac>)
    432c:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    432e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4332:	2267      	movs	r2, #103	; 0x67
    4334:	4649      	mov	r1, r9
    4336:	42b0      	cmp	r0, r6
    4338:	bf34      	ite	cc
    433a:	2000      	movcc	r0, #0
    433c:	2001      	movcs	r0, #1
    433e:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    4340:	6a29      	ldr	r1, [r5, #32]
    4342:	5d8b      	ldrb	r3, [r1, r6]
    4344:	2bff      	cmp	r3, #255	; 0xff
    4346:	d12c      	bne.n	43a2 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    4348:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    434c:	2300      	movs	r3, #0
    434e:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    4350:	b2da      	uxtb	r2, r3
    4352:	5c8a      	ldrb	r2, [r1, r2]
    4354:	2aff      	cmp	r2, #255	; 0xff
			index++;
    4356:	bf1c      	itt	ne
    4358:	3401      	addne	r4, #1
    435a:	b2e4      	uxtbne	r4, r4
    435c:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    435e:	b2da      	uxtb	r2, r3
    4360:	4282      	cmp	r2, r0
    4362:	d9f5      	bls.n	4350 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    4364:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4368:	42a3      	cmp	r3, r4
    436a:	d31d      	bcc.n	43a8 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    436c:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    4370:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    4374:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4376:	4448      	add	r0, r9
    4378:	4642      	mov	r2, r8
    437a:	4639      	mov	r1, r7
    437c:	3004      	adds	r0, #4
    437e:	4b0e      	ldr	r3, [pc, #56]	; (43b8 <adc_async_register_channel_buffer+0xb0>)
    4380:	4798      	blx	r3
    4382:	4602      	mov	r2, r0
    4384:	b998      	cbnz	r0, 43ae <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    4386:	6a2b      	ldr	r3, [r5, #32]
    4388:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    438a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    438c:	4499      	add	r9, r3
    438e:	2300      	movs	r3, #0
    4390:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    4394:	4610      	mov	r0, r2
    4396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    439a:	2000      	movs	r0, #0
    439c:	e7c1      	b.n	4322 <adc_async_register_channel_buffer+0x1a>
    439e:	2000      	movs	r0, #0
    43a0:	e7bf      	b.n	4322 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    43a2:	f06f 020c 	mvn.w	r2, #12
    43a6:	e7f5      	b.n	4394 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    43a8:	f06f 021b 	mvn.w	r2, #27
    43ac:	e7f2      	b.n	4394 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    43ae:	f06f 020c 	mvn.w	r2, #12
    43b2:	e7ef      	b.n	4394 <adc_async_register_channel_buffer+0x8c>
    43b4:	00005921 	.word	0x00005921
    43b8:	000059c9 	.word	0x000059c9
    43bc:	0000d0dc 	.word	0x0000d0dc

000043c0 <adc_async_enable_channel>:
{
    43c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43c2:	460d      	mov	r5, r1
	ASSERT(descr);
    43c4:	4f0b      	ldr	r7, [pc, #44]	; (43f4 <adc_async_enable_channel+0x34>)
    43c6:	4604      	mov	r4, r0
    43c8:	2283      	movs	r2, #131	; 0x83
    43ca:	4639      	mov	r1, r7
    43cc:	3000      	adds	r0, #0
    43ce:	bf18      	it	ne
    43d0:	2001      	movne	r0, #1
    43d2:	4e09      	ldr	r6, [pc, #36]	; (43f8 <adc_async_enable_channel+0x38>)
    43d4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    43d6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    43da:	2284      	movs	r2, #132	; 0x84
    43dc:	4639      	mov	r1, r7
    43de:	42a8      	cmp	r0, r5
    43e0:	bf34      	ite	cc
    43e2:	2000      	movcc	r0, #0
    43e4:	2001      	movcs	r0, #1
    43e6:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    43e8:	4629      	mov	r1, r5
    43ea:	4620      	mov	r0, r4
    43ec:	4b03      	ldr	r3, [pc, #12]	; (43fc <adc_async_enable_channel+0x3c>)
    43ee:	4798      	blx	r3
}
    43f0:	2000      	movs	r0, #0
    43f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43f4:	0000d0dc 	.word	0x0000d0dc
    43f8:	00005921 	.word	0x00005921
    43fc:	00005de5 	.word	0x00005de5

00004400 <adc_async_register_callback>:
{
    4400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4404:	460e      	mov	r6, r1
    4406:	4614      	mov	r4, r2
    4408:	4699      	mov	r9, r3
	ASSERT(descr);
    440a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 447c <adc_async_register_callback+0x7c>
    440e:	4605      	mov	r5, r0
    4410:	229c      	movs	r2, #156	; 0x9c
    4412:	4641      	mov	r1, r8
    4414:	3000      	adds	r0, #0
    4416:	bf18      	it	ne
    4418:	2001      	movne	r0, #1
    441a:	4f16      	ldr	r7, [pc, #88]	; (4474 <adc_async_register_callback+0x74>)
    441c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    441e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4422:	229d      	movs	r2, #157	; 0x9d
    4424:	4641      	mov	r1, r8
    4426:	42b0      	cmp	r0, r6
    4428:	bf34      	ite	cc
    442a:	2000      	movcc	r0, #0
    442c:	2001      	movcs	r0, #1
    442e:	47b8      	blx	r7
	switch (type) {
    4430:	2c01      	cmp	r4, #1
    4432:	d019      	beq.n	4468 <adc_async_register_callback+0x68>
    4434:	b12c      	cbz	r4, 4442 <adc_async_register_callback+0x42>
    4436:	2c02      	cmp	r4, #2
    4438:	d019      	beq.n	446e <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    443a:	f06f 000c 	mvn.w	r0, #12
}
    443e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    4442:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4444:	5d9b      	ldrb	r3, [r3, r6]
    4446:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4448:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    444c:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    4450:	f119 0300 	adds.w	r3, r9, #0
    4454:	bf18      	it	ne
    4456:	2301      	movne	r3, #1
    4458:	4622      	mov	r2, r4
    445a:	4631      	mov	r1, r6
    445c:	4628      	mov	r0, r5
    445e:	4c06      	ldr	r4, [pc, #24]	; (4478 <adc_async_register_callback+0x78>)
    4460:	47a0      	blx	r4
	return ERR_NONE;
    4462:	2000      	movs	r0, #0
    4464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    4468:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    446c:	e7f0      	b.n	4450 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    446e:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    4472:	e7ed      	b.n	4450 <adc_async_register_callback+0x50>
    4474:	00005921 	.word	0x00005921
    4478:	00005e23 	.word	0x00005e23
    447c:	0000d0dc 	.word	0x0000d0dc

00004480 <adc_async_read_channel>:
{
    4480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4484:	b083      	sub	sp, #12
    4486:	4688      	mov	r8, r1
    4488:	4691      	mov	r9, r2
    448a:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    448c:	4604      	mov	r4, r0
    448e:	2800      	cmp	r0, #0
    4490:	d04f      	beq.n	4532 <adc_async_read_channel+0xb2>
    4492:	2a00      	cmp	r2, #0
    4494:	d04f      	beq.n	4536 <adc_async_read_channel+0xb6>
    4496:	1c18      	adds	r0, r3, #0
    4498:	bf18      	it	ne
    449a:	2001      	movne	r0, #1
    449c:	4f29      	ldr	r7, [pc, #164]	; (4544 <adc_async_read_channel+0xc4>)
    449e:	22bc      	movs	r2, #188	; 0xbc
    44a0:	4639      	mov	r1, r7
    44a2:	4e29      	ldr	r6, [pc, #164]	; (4548 <adc_async_read_channel+0xc8>)
    44a4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    44a6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    44aa:	22bd      	movs	r2, #189	; 0xbd
    44ac:	4639      	mov	r1, r7
    44ae:	4540      	cmp	r0, r8
    44b0:	bf34      	ite	cc
    44b2:	2000      	movcc	r0, #0
    44b4:	2001      	movcs	r0, #1
    44b6:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    44b8:	4620      	mov	r0, r4
    44ba:	4b24      	ldr	r3, [pc, #144]	; (454c <adc_async_read_channel+0xcc>)
    44bc:	4798      	blx	r3
	ASSERT(!(length % data_size));
    44be:	fb95 f3f0 	sdiv	r3, r5, r0
    44c2:	fb03 5010 	mls	r0, r3, r0, r5
    44c6:	22bf      	movs	r2, #191	; 0xbf
    44c8:	4639      	mov	r1, r7
    44ca:	fab0 f080 	clz	r0, r0
    44ce:	0940      	lsrs	r0, r0, #5
    44d0:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    44d2:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    44d4:	f813 b008 	ldrb.w	fp, [r3, r8]
    44d8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    44dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    44de:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    44e2:	a801      	add	r0, sp, #4
    44e4:	4b1a      	ldr	r3, [pc, #104]	; (4550 <adc_async_read_channel+0xd0>)
    44e6:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    44e8:	f10b 0a04 	add.w	sl, fp, #4
    44ec:	4650      	mov	r0, sl
    44ee:	4b19      	ldr	r3, [pc, #100]	; (4554 <adc_async_read_channel+0xd4>)
    44f0:	4798      	blx	r3
    44f2:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    44f4:	a801      	add	r0, sp, #4
    44f6:	4b18      	ldr	r3, [pc, #96]	; (4558 <adc_async_read_channel+0xd8>)
    44f8:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    44fa:	f1b8 0f00 	cmp.w	r8, #0
    44fe:	d01c      	beq.n	453a <adc_async_read_channel+0xba>
    4500:	b1ed      	cbz	r5, 453e <adc_async_read_channel+0xbe>
    4502:	3d01      	subs	r5, #1
    4504:	b2ad      	uxth	r5, r5
    4506:	3502      	adds	r5, #2
    4508:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    450a:	4f14      	ldr	r7, [pc, #80]	; (455c <adc_async_read_channel+0xdc>)
    450c:	b2a6      	uxth	r6, r4
    450e:	1e61      	subs	r1, r4, #1
    4510:	4449      	add	r1, r9
    4512:	4650      	mov	r0, sl
    4514:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    4516:	4544      	cmp	r4, r8
    4518:	d002      	beq.n	4520 <adc_async_read_channel+0xa0>
    451a:	3401      	adds	r4, #1
    451c:	42ac      	cmp	r4, r5
    451e:	d1f5      	bne.n	450c <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4520:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4524:	1b9b      	subs	r3, r3, r6
    4526:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    452a:	4630      	mov	r0, r6
    452c:	b003      	add	sp, #12
    452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4532:	2000      	movs	r0, #0
    4534:	e7b2      	b.n	449c <adc_async_read_channel+0x1c>
    4536:	2000      	movs	r0, #0
    4538:	e7b0      	b.n	449c <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    453a:	2600      	movs	r6, #0
    453c:	e7f0      	b.n	4520 <adc_async_read_channel+0xa0>
    453e:	2600      	movs	r6, #0
    4540:	e7ee      	b.n	4520 <adc_async_read_channel+0xa0>
    4542:	bf00      	nop
    4544:	0000d0dc 	.word	0x0000d0dc
    4548:	00005921 	.word	0x00005921
    454c:	00005dfb 	.word	0x00005dfb
    4550:	00004589 	.word	0x00004589
    4554:	00005a9d 	.word	0x00005a9d
    4558:	00004597 	.word	0x00004597
    455c:	00005a19 	.word	0x00005a19

00004560 <adc_async_start_conversion>:
{
    4560:	b510      	push	{r4, lr}
	ASSERT(descr);
    4562:	4604      	mov	r4, r0
    4564:	22d6      	movs	r2, #214	; 0xd6
    4566:	4905      	ldr	r1, [pc, #20]	; (457c <adc_async_start_conversion+0x1c>)
    4568:	3000      	adds	r0, #0
    456a:	bf18      	it	ne
    456c:	2001      	movne	r0, #1
    456e:	4b04      	ldr	r3, [pc, #16]	; (4580 <adc_async_start_conversion+0x20>)
    4570:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    4572:	4620      	mov	r0, r4
    4574:	4b03      	ldr	r3, [pc, #12]	; (4584 <adc_async_start_conversion+0x24>)
    4576:	4798      	blx	r3
}
    4578:	2000      	movs	r0, #0
    457a:	bd10      	pop	{r4, pc}
    457c:	0000d0dc 	.word	0x0000d0dc
    4580:	00005921 	.word	0x00005921
    4584:	00005e0d 	.word	0x00005e0d

00004588 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4588:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    458c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    458e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4590:	f3bf 8f5f 	dmb	sy
    4594:	4770      	bx	lr

00004596 <atomic_leave_critical>:
    4596:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    459a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    459c:	f383 8810 	msr	PRIMASK, r3
    45a0:	4770      	bx	lr
	...

000045a4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    45a4:	b538      	push	{r3, r4, r5, lr}
    45a6:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    45a8:	4605      	mov	r5, r0
    45aa:	b158      	cbz	r0, 45c4 <crc_sync_init+0x20>
    45ac:	1c08      	adds	r0, r1, #0
    45ae:	bf18      	it	ne
    45b0:	2001      	movne	r0, #1
    45b2:	222b      	movs	r2, #43	; 0x2b
    45b4:	4904      	ldr	r1, [pc, #16]	; (45c8 <crc_sync_init+0x24>)
    45b6:	4b05      	ldr	r3, [pc, #20]	; (45cc <crc_sync_init+0x28>)
    45b8:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    45ba:	4621      	mov	r1, r4
    45bc:	4628      	mov	r0, r5
    45be:	4b04      	ldr	r3, [pc, #16]	; (45d0 <crc_sync_init+0x2c>)
    45c0:	4798      	blx	r3
}
    45c2:	bd38      	pop	{r3, r4, r5, pc}
    45c4:	2000      	movs	r0, #0
    45c6:	e7f4      	b.n	45b2 <crc_sync_init+0xe>
    45c8:	0000d0f8 	.word	0x0000d0f8
    45cc:	00005921 	.word	0x00005921
    45d0:	0000620d 	.word	0x0000620d

000045d4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    45d4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    45d6:	4b02      	ldr	r3, [pc, #8]	; (45e0 <delay_init+0xc>)
    45d8:	6018      	str	r0, [r3, #0]
    45da:	4b02      	ldr	r3, [pc, #8]	; (45e4 <delay_init+0x10>)
    45dc:	4798      	blx	r3
    45de:	bd08      	pop	{r3, pc}
    45e0:	20000648 	.word	0x20000648
    45e4:	00007b4d 	.word	0x00007b4d

000045e8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    45e8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    45ea:	4b04      	ldr	r3, [pc, #16]	; (45fc <delay_us+0x14>)
    45ec:	681c      	ldr	r4, [r3, #0]
    45ee:	4b04      	ldr	r3, [pc, #16]	; (4600 <delay_us+0x18>)
    45f0:	4798      	blx	r3
    45f2:	4601      	mov	r1, r0
    45f4:	4620      	mov	r0, r4
    45f6:	4b03      	ldr	r3, [pc, #12]	; (4604 <delay_us+0x1c>)
    45f8:	4798      	blx	r3
    45fa:	bd10      	pop	{r4, pc}
    45fc:	20000648 	.word	0x20000648
    4600:	00005ed1 	.word	0x00005ed1
    4604:	00007b61 	.word	0x00007b61

00004608 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4608:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    460a:	4b04      	ldr	r3, [pc, #16]	; (461c <delay_ms+0x14>)
    460c:	681c      	ldr	r4, [r3, #0]
    460e:	4b04      	ldr	r3, [pc, #16]	; (4620 <delay_ms+0x18>)
    4610:	4798      	blx	r3
    4612:	4601      	mov	r1, r0
    4614:	4620      	mov	r0, r4
    4616:	4b03      	ldr	r3, [pc, #12]	; (4624 <delay_ms+0x1c>)
    4618:	4798      	blx	r3
    461a:	bd10      	pop	{r4, pc}
    461c:	20000648 	.word	0x20000648
    4620:	00005ed9 	.word	0x00005ed9
    4624:	00007b61 	.word	0x00007b61

00004628 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4628:	b508      	push	{r3, lr}
	return _event_system_init();
    462a:	4b01      	ldr	r3, [pc, #4]	; (4630 <event_system_init+0x8>)
    462c:	4798      	blx	r3
}
    462e:	bd08      	pop	{r3, pc}
    4630:	00006215 	.word	0x00006215

00004634 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4634:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4636:	6943      	ldr	r3, [r0, #20]
    4638:	b103      	cbz	r3, 463c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    463a:	4798      	blx	r3
    463c:	bd08      	pop	{r3, pc}

0000463e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    463e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4640:	6983      	ldr	r3, [r0, #24]
    4642:	b103      	cbz	r3, 4646 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4644:	4798      	blx	r3
    4646:	bd08      	pop	{r3, pc}

00004648 <flash_init>:
{
    4648:	b538      	push	{r3, r4, r5, lr}
    464a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    464c:	4604      	mov	r4, r0
    464e:	b190      	cbz	r0, 4676 <flash_init+0x2e>
    4650:	1c08      	adds	r0, r1, #0
    4652:	bf18      	it	ne
    4654:	2001      	movne	r0, #1
    4656:	2238      	movs	r2, #56	; 0x38
    4658:	4908      	ldr	r1, [pc, #32]	; (467c <flash_init+0x34>)
    465a:	4b09      	ldr	r3, [pc, #36]	; (4680 <flash_init+0x38>)
    465c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    465e:	4629      	mov	r1, r5
    4660:	4620      	mov	r0, r4
    4662:	4b08      	ldr	r3, [pc, #32]	; (4684 <flash_init+0x3c>)
    4664:	4798      	blx	r3
	if (rc) {
    4666:	4603      	mov	r3, r0
    4668:	b918      	cbnz	r0, 4672 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    466a:	4a07      	ldr	r2, [pc, #28]	; (4688 <flash_init+0x40>)
    466c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    466e:	4a07      	ldr	r2, [pc, #28]	; (468c <flash_init+0x44>)
    4670:	6062      	str	r2, [r4, #4]
}
    4672:	4618      	mov	r0, r3
    4674:	bd38      	pop	{r3, r4, r5, pc}
    4676:	2000      	movs	r0, #0
    4678:	e7ed      	b.n	4656 <flash_init+0xe>
    467a:	bf00      	nop
    467c:	0000d114 	.word	0x0000d114
    4680:	00005921 	.word	0x00005921
    4684:	00006321 	.word	0x00006321
    4688:	00004635 	.word	0x00004635
    468c:	0000463f 	.word	0x0000463f

00004690 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4690:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4692:	8843      	ldrh	r3, [r0, #2]
    4694:	f413 7f80 	tst.w	r3, #256	; 0x100
    4698:	d102      	bne.n	46a0 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    469a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    469c:	b103      	cbz	r3, 46a0 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    469e:	4798      	blx	r3
    46a0:	bd08      	pop	{r3, pc}

000046a2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    46a2:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    46a4:	8843      	ldrh	r3, [r0, #2]
    46a6:	f413 7f80 	tst.w	r3, #256	; 0x100
    46aa:	d102      	bne.n	46b2 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    46ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    46ae:	b103      	cbz	r3, 46b2 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    46b0:	4798      	blx	r3
    46b2:	bd08      	pop	{r3, pc}

000046b4 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    46b4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    46b6:	8843      	ldrh	r3, [r0, #2]
    46b8:	f413 7f80 	tst.w	r3, #256	; 0x100
    46bc:	d102      	bne.n	46c4 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    46be:	6b03      	ldr	r3, [r0, #48]	; 0x30
    46c0:	b103      	cbz	r3, 46c4 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    46c2:	4798      	blx	r3
    46c4:	bd08      	pop	{r3, pc}
	...

000046c8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    46c8:	b510      	push	{r4, lr}
    46ca:	b084      	sub	sp, #16
    46cc:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    46ce:	8a83      	ldrh	r3, [r0, #20]
    46d0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    46d4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    46d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    46da:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    46de:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    46e0:	a901      	add	r1, sp, #4
    46e2:	3828      	subs	r0, #40	; 0x28
    46e4:	4b03      	ldr	r3, [pc, #12]	; (46f4 <i2c_m_async_write+0x2c>)
    46e6:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    46e8:	2800      	cmp	r0, #0
    46ea:	bf08      	it	eq
    46ec:	4620      	moveq	r0, r4
    46ee:	b004      	add	sp, #16
    46f0:	bd10      	pop	{r4, pc}
    46f2:	bf00      	nop
    46f4:	0000709d 	.word	0x0000709d

000046f8 <i2c_m_async_read>:
{
    46f8:	b510      	push	{r4, lr}
    46fa:	b084      	sub	sp, #16
    46fc:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    46fe:	8a83      	ldrh	r3, [r0, #20]
    4700:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4704:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4706:	f248 0301 	movw	r3, #32769	; 0x8001
    470a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    470e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4710:	a901      	add	r1, sp, #4
    4712:	3828      	subs	r0, #40	; 0x28
    4714:	4b03      	ldr	r3, [pc, #12]	; (4724 <i2c_m_async_read+0x2c>)
    4716:	4798      	blx	r3
}
    4718:	2800      	cmp	r0, #0
    471a:	bf08      	it	eq
    471c:	4620      	moveq	r0, r4
    471e:	b004      	add	sp, #16
    4720:	bd10      	pop	{r4, pc}
    4722:	bf00      	nop
    4724:	0000709d 	.word	0x0000709d

00004728 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4728:	b570      	push	{r4, r5, r6, lr}
    472a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    472c:	4604      	mov	r4, r0
    472e:	2289      	movs	r2, #137	; 0x89
    4730:	490f      	ldr	r1, [pc, #60]	; (4770 <i2c_m_async_init+0x48>)
    4732:	3000      	adds	r0, #0
    4734:	bf18      	it	ne
    4736:	2001      	movne	r0, #1
    4738:	4b0e      	ldr	r3, [pc, #56]	; (4774 <i2c_m_async_init+0x4c>)
    473a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    473c:	4629      	mov	r1, r5
    473e:	4620      	mov	r0, r4
    4740:	4b0d      	ldr	r3, [pc, #52]	; (4778 <i2c_m_async_init+0x50>)
    4742:	4798      	blx	r3
	if (init_status) {
    4744:	4605      	mov	r5, r0
    4746:	b108      	cbz	r0, 474c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4748:	4628      	mov	r0, r5
    474a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    474c:	4b0b      	ldr	r3, [pc, #44]	; (477c <i2c_m_async_init+0x54>)
    474e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4750:	4b0b      	ldr	r3, [pc, #44]	; (4780 <i2c_m_async_init+0x58>)
    4752:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4754:	4a0b      	ldr	r2, [pc, #44]	; (4784 <i2c_m_async_init+0x5c>)
    4756:	2101      	movs	r1, #1
    4758:	4620      	mov	r0, r4
    475a:	4e0b      	ldr	r6, [pc, #44]	; (4788 <i2c_m_async_init+0x60>)
    475c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    475e:	4a0b      	ldr	r2, [pc, #44]	; (478c <i2c_m_async_init+0x64>)
    4760:	2102      	movs	r1, #2
    4762:	4620      	mov	r0, r4
    4764:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4766:	4a0a      	ldr	r2, [pc, #40]	; (4790 <i2c_m_async_init+0x68>)
    4768:	2100      	movs	r1, #0
    476a:	4620      	mov	r0, r4
    476c:	47b0      	blx	r6
	return ERR_NONE;
    476e:	e7eb      	b.n	4748 <i2c_m_async_init+0x20>
    4770:	0000d12c 	.word	0x0000d12c
    4774:	00005921 	.word	0x00005921
    4778:	0000701d 	.word	0x0000701d
    477c:	000046f9 	.word	0x000046f9
    4780:	000046c9 	.word	0x000046c9
    4784:	00004691 	.word	0x00004691
    4788:	000071cd 	.word	0x000071cd
    478c:	000046a3 	.word	0x000046a3
    4790:	000046b5 	.word	0x000046b5

00004794 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4794:	b570      	push	{r4, r5, r6, lr}
    4796:	460d      	mov	r5, r1
    4798:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    479a:	4604      	mov	r4, r0
    479c:	b160      	cbz	r0, 47b8 <io_write+0x24>
    479e:	1c08      	adds	r0, r1, #0
    47a0:	bf18      	it	ne
    47a2:	2001      	movne	r0, #1
    47a4:	2234      	movs	r2, #52	; 0x34
    47a6:	4905      	ldr	r1, [pc, #20]	; (47bc <io_write+0x28>)
    47a8:	4b05      	ldr	r3, [pc, #20]	; (47c0 <io_write+0x2c>)
    47aa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    47ac:	6823      	ldr	r3, [r4, #0]
    47ae:	4632      	mov	r2, r6
    47b0:	4629      	mov	r1, r5
    47b2:	4620      	mov	r0, r4
    47b4:	4798      	blx	r3
}
    47b6:	bd70      	pop	{r4, r5, r6, pc}
    47b8:	2000      	movs	r0, #0
    47ba:	e7f3      	b.n	47a4 <io_write+0x10>
    47bc:	0000d14c 	.word	0x0000d14c
    47c0:	00005921 	.word	0x00005921

000047c4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    47c4:	b570      	push	{r4, r5, r6, lr}
    47c6:	460d      	mov	r5, r1
    47c8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    47ca:	4604      	mov	r4, r0
    47cc:	b160      	cbz	r0, 47e8 <io_read+0x24>
    47ce:	1c08      	adds	r0, r1, #0
    47d0:	bf18      	it	ne
    47d2:	2001      	movne	r0, #1
    47d4:	223d      	movs	r2, #61	; 0x3d
    47d6:	4905      	ldr	r1, [pc, #20]	; (47ec <io_read+0x28>)
    47d8:	4b05      	ldr	r3, [pc, #20]	; (47f0 <io_read+0x2c>)
    47da:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    47dc:	6863      	ldr	r3, [r4, #4]
    47de:	4632      	mov	r2, r6
    47e0:	4629      	mov	r1, r5
    47e2:	4620      	mov	r0, r4
    47e4:	4798      	blx	r3
}
    47e6:	bd70      	pop	{r4, r5, r6, pc}
    47e8:	2000      	movs	r0, #0
    47ea:	e7f3      	b.n	47d4 <io_read+0x10>
    47ec:	0000d14c 	.word	0x0000d14c
    47f0:	00005921 	.word	0x00005921

000047f4 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    47f4:	b538      	push	{r3, r4, r5, lr}
    47f6:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    47f8:	4605      	mov	r5, r0
    47fa:	b158      	cbz	r0, 4814 <qspi_dma_init+0x20>
    47fc:	1c08      	adds	r0, r1, #0
    47fe:	bf18      	it	ne
    4800:	2001      	movne	r0, #1
    4802:	2231      	movs	r2, #49	; 0x31
    4804:	4904      	ldr	r1, [pc, #16]	; (4818 <qspi_dma_init+0x24>)
    4806:	4b05      	ldr	r3, [pc, #20]	; (481c <qspi_dma_init+0x28>)
    4808:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    480a:	4621      	mov	r1, r4
    480c:	4628      	mov	r0, r5
    480e:	4b04      	ldr	r3, [pc, #16]	; (4820 <qspi_dma_init+0x2c>)
    4810:	4798      	blx	r3
}
    4812:	bd38      	pop	{r3, r4, r5, pc}
    4814:	2000      	movs	r0, #0
    4816:	e7f4      	b.n	4802 <qspi_dma_init+0xe>
    4818:	0000d160 	.word	0x0000d160
    481c:	00005921 	.word	0x00005921
    4820:	00006541 	.word	0x00006541

00004824 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4826:	460f      	mov	r7, r1
    4828:	4616      	mov	r6, r2
	ASSERT(io);
    482a:	4604      	mov	r4, r0
    482c:	f240 1227 	movw	r2, #295	; 0x127
    4830:	4909      	ldr	r1, [pc, #36]	; (4858 <_spi_m_async_io_write+0x34>)
    4832:	3000      	adds	r0, #0
    4834:	bf18      	it	ne
    4836:	2001      	movne	r0, #1
    4838:	4b08      	ldr	r3, [pc, #32]	; (485c <_spi_m_async_io_write+0x38>)
    483a:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    483c:	2500      	movs	r5, #0
    483e:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4840:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    4842:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4844:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4846:	2310      	movs	r3, #16
    4848:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    484a:	2101      	movs	r1, #1
    484c:	f1a4 0020 	sub.w	r0, r4, #32
    4850:	4b03      	ldr	r3, [pc, #12]	; (4860 <_spi_m_async_io_write+0x3c>)
    4852:	4798      	blx	r3

	return ERR_NONE;
}
    4854:	4628      	mov	r0, r5
    4856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4858:	0000d17c 	.word	0x0000d17c
    485c:	00005921 	.word	0x00005921
    4860:	00007661 	.word	0x00007661

00004864 <_spi_m_async_io_read>:
{
    4864:	b570      	push	{r4, r5, r6, lr}
    4866:	460d      	mov	r5, r1
    4868:	4616      	mov	r6, r2
	ASSERT(io);
    486a:	4604      	mov	r4, r0
    486c:	f240 1205 	movw	r2, #261	; 0x105
    4870:	490c      	ldr	r1, [pc, #48]	; (48a4 <_spi_m_async_io_read+0x40>)
    4872:	3000      	adds	r0, #0
    4874:	bf18      	it	ne
    4876:	2001      	movne	r0, #1
    4878:	4b0b      	ldr	r3, [pc, #44]	; (48a8 <_spi_m_async_io_read+0x44>)
    487a:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    487c:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    487e:	2500      	movs	r5, #0
    4880:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    4882:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4884:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4886:	2310      	movs	r3, #16
    4888:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    488a:	3c20      	subs	r4, #32
    488c:	2101      	movs	r1, #1
    488e:	4620      	mov	r0, r4
    4890:	4b06      	ldr	r3, [pc, #24]	; (48ac <_spi_m_async_io_read+0x48>)
    4892:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4894:	f240 11ff 	movw	r1, #511	; 0x1ff
    4898:	4620      	mov	r0, r4
    489a:	4b05      	ldr	r3, [pc, #20]	; (48b0 <_spi_m_async_io_read+0x4c>)
    489c:	4798      	blx	r3
}
    489e:	4628      	mov	r0, r5
    48a0:	bd70      	pop	{r4, r5, r6, pc}
    48a2:	bf00      	nop
    48a4:	0000d17c 	.word	0x0000d17c
    48a8:	00005921 	.word	0x00005921
    48ac:	00007695 	.word	0x00007695
    48b0:	00007711 	.word	0x00007711

000048b4 <_spi_dev_error>:
{
    48b4:	b570      	push	{r4, r5, r6, lr}
    48b6:	4604      	mov	r4, r0
    48b8:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    48ba:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    48bc:	2100      	movs	r1, #0
    48be:	4b09      	ldr	r3, [pc, #36]	; (48e4 <_spi_dev_error+0x30>)
    48c0:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    48c2:	2100      	movs	r1, #0
    48c4:	4620      	mov	r0, r4
    48c6:	4b08      	ldr	r3, [pc, #32]	; (48e8 <_spi_dev_error+0x34>)
    48c8:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    48ca:	2100      	movs	r1, #0
    48cc:	4620      	mov	r0, r4
    48ce:	4b07      	ldr	r3, [pc, #28]	; (48ec <_spi_dev_error+0x38>)
    48d0:	4798      	blx	r3
	spi->stat = 0;
    48d2:	2300      	movs	r3, #0
    48d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    48d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    48da:	b113      	cbz	r3, 48e2 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    48dc:	4631      	mov	r1, r6
    48de:	4628      	mov	r0, r5
    48e0:	4798      	blx	r3
    48e2:	bd70      	pop	{r4, r5, r6, pc}
    48e4:	00007661 	.word	0x00007661
    48e8:	00007695 	.word	0x00007695
    48ec:	000076d5 	.word	0x000076d5

000048f0 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    48f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    48f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    48f4:	429a      	cmp	r2, r3
    48f6:	d200      	bcs.n	48fa <_spi_dev_complete+0xa>
    48f8:	4770      	bx	lr
{
    48fa:	b510      	push	{r4, lr}
    48fc:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    48fe:	2100      	movs	r1, #0
    4900:	4b04      	ldr	r3, [pc, #16]	; (4914 <_spi_dev_complete+0x24>)
    4902:	4798      	blx	r3
		spi->stat = 0;
    4904:	2300      	movs	r3, #0
    4906:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    490a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    490c:	b10b      	cbz	r3, 4912 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    490e:	1f20      	subs	r0, r4, #4
    4910:	4798      	blx	r3
    4912:	bd10      	pop	{r4, pc}
    4914:	000076d5 	.word	0x000076d5

00004918 <_spi_dev_tx>:
{
    4918:	b510      	push	{r4, lr}
    491a:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    491c:	7903      	ldrb	r3, [r0, #4]
    491e:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4920:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4922:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4924:	f103 0101 	add.w	r1, r3, #1
    4928:	6401      	str	r1, [r0, #64]	; 0x40
    492a:	bf94      	ite	ls
    492c:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    492e:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4932:	4b08      	ldr	r3, [pc, #32]	; (4954 <_spi_dev_tx+0x3c>)
    4934:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    4936:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    493a:	429a      	cmp	r2, r3
    493c:	d000      	beq.n	4940 <_spi_dev_tx+0x28>
    493e:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4940:	2100      	movs	r1, #0
    4942:	4620      	mov	r0, r4
    4944:	4b04      	ldr	r3, [pc, #16]	; (4958 <_spi_dev_tx+0x40>)
    4946:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4948:	2101      	movs	r1, #1
    494a:	4620      	mov	r0, r4
    494c:	4b03      	ldr	r3, [pc, #12]	; (495c <_spi_dev_tx+0x44>)
    494e:	4798      	blx	r3
}
    4950:	e7f5      	b.n	493e <_spi_dev_tx+0x26>
    4952:	bf00      	nop
    4954:	00007711 	.word	0x00007711
    4958:	00007661 	.word	0x00007661
    495c:	000076d5 	.word	0x000076d5

00004960 <_spi_dev_rx>:
{
    4960:	b570      	push	{r4, r5, r6, lr}
    4962:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4964:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4966:	b305      	cbz	r5, 49aa <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    4968:	7903      	ldrb	r3, [r0, #4]
    496a:	2b01      	cmp	r3, #1
    496c:	d916      	bls.n	499c <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    496e:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4970:	1c73      	adds	r3, r6, #1
    4972:	6403      	str	r3, [r0, #64]	; 0x40
    4974:	4b18      	ldr	r3, [pc, #96]	; (49d8 <_spi_dev_rx+0x78>)
    4976:	4798      	blx	r3
    4978:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    497c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    497e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4980:	4293      	cmp	r3, r2
    4982:	d21d      	bcs.n	49c0 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4984:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4986:	b1b2      	cbz	r2, 49b6 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4988:	7921      	ldrb	r1, [r4, #4]
    498a:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    498c:	bf94      	ite	ls
    498e:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4990:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4994:	4620      	mov	r0, r4
    4996:	4b11      	ldr	r3, [pc, #68]	; (49dc <_spi_dev_rx+0x7c>)
    4998:	4798      	blx	r3
    499a:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    499c:	6c06      	ldr	r6, [r0, #64]	; 0x40
    499e:	1c73      	adds	r3, r6, #1
    49a0:	6403      	str	r3, [r0, #64]	; 0x40
    49a2:	4b0d      	ldr	r3, [pc, #52]	; (49d8 <_spi_dev_rx+0x78>)
    49a4:	4798      	blx	r3
    49a6:	55a8      	strb	r0, [r5, r6]
    49a8:	e7e8      	b.n	497c <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    49aa:	4b0b      	ldr	r3, [pc, #44]	; (49d8 <_spi_dev_rx+0x78>)
    49ac:	4798      	blx	r3
		spi->xfercnt++;
    49ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    49b0:	3301      	adds	r3, #1
    49b2:	6423      	str	r3, [r4, #64]	; 0x40
    49b4:	e7e2      	b.n	497c <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    49b6:	88e1      	ldrh	r1, [r4, #6]
    49b8:	4620      	mov	r0, r4
    49ba:	4b08      	ldr	r3, [pc, #32]	; (49dc <_spi_dev_rx+0x7c>)
    49bc:	4798      	blx	r3
    49be:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    49c0:	2100      	movs	r1, #0
    49c2:	4620      	mov	r0, r4
    49c4:	4b06      	ldr	r3, [pc, #24]	; (49e0 <_spi_dev_rx+0x80>)
    49c6:	4798      	blx	r3
		spi->stat = 0;
    49c8:	2300      	movs	r3, #0
    49ca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    49ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    49d0:	b10b      	cbz	r3, 49d6 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    49d2:	1f20      	subs	r0, r4, #4
    49d4:	4798      	blx	r3
    49d6:	bd70      	pop	{r4, r5, r6, pc}
    49d8:	00007741 	.word	0x00007741
    49dc:	00007711 	.word	0x00007711
    49e0:	00007695 	.word	0x00007695

000049e4 <spi_m_async_init>:
{
    49e4:	b570      	push	{r4, r5, r6, lr}
    49e6:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    49e8:	4606      	mov	r6, r0
    49ea:	b330      	cbz	r0, 4a3a <spi_m_async_init+0x56>
    49ec:	1c08      	adds	r0, r1, #0
    49ee:	bf18      	it	ne
    49f0:	2001      	movne	r0, #1
    49f2:	22a5      	movs	r2, #165	; 0xa5
    49f4:	4912      	ldr	r1, [pc, #72]	; (4a40 <spi_m_async_init+0x5c>)
    49f6:	4b13      	ldr	r3, [pc, #76]	; (4a44 <spi_m_async_init+0x60>)
    49f8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    49fa:	4634      	mov	r4, r6
    49fc:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    4a00:	4629      	mov	r1, r5
    4a02:	4620      	mov	r0, r4
    4a04:	4b10      	ldr	r3, [pc, #64]	; (4a48 <spi_m_async_init+0x64>)
    4a06:	4798      	blx	r3
	if (rc >= 0) {
    4a08:	2800      	cmp	r0, #0
    4a0a:	db15      	blt.n	4a38 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4a0c:	4a0f      	ldr	r2, [pc, #60]	; (4a4c <spi_m_async_init+0x68>)
    4a0e:	2100      	movs	r1, #0
    4a10:	4620      	mov	r0, r4
    4a12:	4d0f      	ldr	r5, [pc, #60]	; (4a50 <spi_m_async_init+0x6c>)
    4a14:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4a16:	4a0f      	ldr	r2, [pc, #60]	; (4a54 <spi_m_async_init+0x70>)
    4a18:	2101      	movs	r1, #1
    4a1a:	4620      	mov	r0, r4
    4a1c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4a1e:	4a0e      	ldr	r2, [pc, #56]	; (4a58 <spi_m_async_init+0x74>)
    4a20:	2102      	movs	r1, #2
    4a22:	4620      	mov	r0, r4
    4a24:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4a26:	4a0d      	ldr	r2, [pc, #52]	; (4a5c <spi_m_async_init+0x78>)
    4a28:	2103      	movs	r1, #3
    4a2a:	4620      	mov	r0, r4
    4a2c:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    4a2e:	4b0c      	ldr	r3, [pc, #48]	; (4a60 <spi_m_async_init+0x7c>)
    4a30:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4a32:	4b0c      	ldr	r3, [pc, #48]	; (4a64 <spi_m_async_init+0x80>)
    4a34:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    4a36:	2000      	movs	r0, #0
}
    4a38:	bd70      	pop	{r4, r5, r6, pc}
    4a3a:	2000      	movs	r0, #0
    4a3c:	e7d9      	b.n	49f2 <spi_m_async_init+0xe>
    4a3e:	bf00      	nop
    4a40:	0000d17c 	.word	0x0000d17c
    4a44:	00005921 	.word	0x00005921
    4a48:	00007559 	.word	0x00007559
    4a4c:	00004919 	.word	0x00004919
    4a50:	0000776d 	.word	0x0000776d
    4a54:	00004961 	.word	0x00004961
    4a58:	000048f1 	.word	0x000048f1
    4a5c:	000048b5 	.word	0x000048b5
    4a60:	00004865 	.word	0x00004865
    4a64:	00004825 	.word	0x00004825

00004a68 <spi_m_async_enable>:
{
    4a68:	b510      	push	{r4, lr}
	ASSERT(spi);
    4a6a:	4604      	mov	r4, r0
    4a6c:	22c1      	movs	r2, #193	; 0xc1
    4a6e:	4905      	ldr	r1, [pc, #20]	; (4a84 <spi_m_async_enable+0x1c>)
    4a70:	3000      	adds	r0, #0
    4a72:	bf18      	it	ne
    4a74:	2001      	movne	r0, #1
    4a76:	4b04      	ldr	r3, [pc, #16]	; (4a88 <spi_m_async_enable+0x20>)
    4a78:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    4a7a:	1d20      	adds	r0, r4, #4
    4a7c:	4b03      	ldr	r3, [pc, #12]	; (4a8c <spi_m_async_enable+0x24>)
    4a7e:	4798      	blx	r3
    4a80:	bd10      	pop	{r4, pc}
    4a82:	bf00      	nop
    4a84:	0000d17c 	.word	0x0000d17c
    4a88:	00005921 	.word	0x00005921
    4a8c:	000075c1 	.word	0x000075c1

00004a90 <spi_m_async_set_baudrate>:
{
    4a90:	b538      	push	{r3, r4, r5, lr}
    4a92:	460d      	mov	r5, r1
	ASSERT(spi);
    4a94:	4604      	mov	r4, r0
    4a96:	22cf      	movs	r2, #207	; 0xcf
    4a98:	4909      	ldr	r1, [pc, #36]	; (4ac0 <spi_m_async_set_baudrate+0x30>)
    4a9a:	3000      	adds	r0, #0
    4a9c:	bf18      	it	ne
    4a9e:	2001      	movne	r0, #1
    4aa0:	4b08      	ldr	r3, [pc, #32]	; (4ac4 <spi_m_async_set_baudrate+0x34>)
    4aa2:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4aa4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4aa8:	f013 0f10 	tst.w	r3, #16
    4aac:	d104      	bne.n	4ab8 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    4aae:	4629      	mov	r1, r5
    4ab0:	1d20      	adds	r0, r4, #4
    4ab2:	4b05      	ldr	r3, [pc, #20]	; (4ac8 <spi_m_async_set_baudrate+0x38>)
    4ab4:	4798      	blx	r3
    4ab6:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4ab8:	f06f 0003 	mvn.w	r0, #3
}
    4abc:	bd38      	pop	{r3, r4, r5, pc}
    4abe:	bf00      	nop
    4ac0:	0000d17c 	.word	0x0000d17c
    4ac4:	00005921 	.word	0x00005921
    4ac8:	00007625 	.word	0x00007625

00004acc <spi_m_async_set_mode>:
{
    4acc:	b538      	push	{r3, r4, r5, lr}
    4ace:	460d      	mov	r5, r1
	ASSERT(spi);
    4ad0:	4604      	mov	r4, r0
    4ad2:	22d9      	movs	r2, #217	; 0xd9
    4ad4:	4909      	ldr	r1, [pc, #36]	; (4afc <spi_m_async_set_mode+0x30>)
    4ad6:	3000      	adds	r0, #0
    4ad8:	bf18      	it	ne
    4ada:	2001      	movne	r0, #1
    4adc:	4b08      	ldr	r3, [pc, #32]	; (4b00 <spi_m_async_set_mode+0x34>)
    4ade:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4ae0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4ae4:	f013 0f10 	tst.w	r3, #16
    4ae8:	d104      	bne.n	4af4 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    4aea:	4629      	mov	r1, r5
    4aec:	1d20      	adds	r0, r4, #4
    4aee:	4b05      	ldr	r3, [pc, #20]	; (4b04 <spi_m_async_set_mode+0x38>)
    4af0:	4798      	blx	r3
    4af2:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4af4:	f06f 0003 	mvn.w	r0, #3
}
    4af8:	bd38      	pop	{r3, r4, r5, pc}
    4afa:	bf00      	nop
    4afc:	0000d17c 	.word	0x0000d17c
    4b00:	00005921 	.word	0x00005921
    4b04:	000075f1 	.word	0x000075f1

00004b08 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    4b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b0a:	460d      	mov	r5, r1
    4b0c:	4617      	mov	r7, r2
    4b0e:	461e      	mov	r6, r3
	ASSERT(spi);
    4b10:	4604      	mov	r4, r0
    4b12:	f44f 729c 	mov.w	r2, #312	; 0x138
    4b16:	4912      	ldr	r1, [pc, #72]	; (4b60 <spi_m_async_transfer+0x58>)
    4b18:	3000      	adds	r0, #0
    4b1a:	bf18      	it	ne
    4b1c:	2001      	movne	r0, #1
    4b1e:	4b11      	ldr	r3, [pc, #68]	; (4b64 <spi_m_async_transfer+0x5c>)
    4b20:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    4b22:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    4b24:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    4b26:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    4b28:	2300      	movs	r3, #0
    4b2a:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4b2c:	2310      	movs	r3, #16
    4b2e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4b32:	1d26      	adds	r6, r4, #4
    4b34:	2101      	movs	r1, #1
    4b36:	4630      	mov	r0, r6
    4b38:	4b0b      	ldr	r3, [pc, #44]	; (4b68 <spi_m_async_transfer+0x60>)
    4b3a:	4798      	blx	r3
	if (txbuf) {
    4b3c:	b15d      	cbz	r5, 4b56 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    4b3e:	7a23      	ldrb	r3, [r4, #8]
    4b40:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    4b42:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4b44:	bf94      	ite	ls
    4b46:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    4b48:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    4b4c:	4630      	mov	r0, r6
    4b4e:	4b07      	ldr	r3, [pc, #28]	; (4b6c <spi_m_async_transfer+0x64>)
    4b50:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    4b52:	2000      	movs	r0, #0
    4b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    4b56:	8961      	ldrh	r1, [r4, #10]
    4b58:	4630      	mov	r0, r6
    4b5a:	4b04      	ldr	r3, [pc, #16]	; (4b6c <spi_m_async_transfer+0x64>)
    4b5c:	4798      	blx	r3
    4b5e:	e7f8      	b.n	4b52 <spi_m_async_transfer+0x4a>
    4b60:	0000d17c 	.word	0x0000d17c
    4b64:	00005921 	.word	0x00005921
    4b68:	00007695 	.word	0x00007695
    4b6c:	00007711 	.word	0x00007711

00004b70 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    4b70:	b570      	push	{r4, r5, r6, lr}
    4b72:	460c      	mov	r4, r1
    4b74:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    4b76:	4605      	mov	r5, r0
    4b78:	b158      	cbz	r0, 4b92 <spi_m_async_register_callback+0x22>
    4b7a:	2901      	cmp	r1, #1
    4b7c:	bf8c      	ite	hi
    4b7e:	2000      	movhi	r0, #0
    4b80:	2001      	movls	r0, #1
    4b82:	f240 1263 	movw	r2, #355	; 0x163
    4b86:	4908      	ldr	r1, [pc, #32]	; (4ba8 <spi_m_async_register_callback+0x38>)
    4b88:	4b08      	ldr	r3, [pc, #32]	; (4bac <spi_m_async_register_callback+0x3c>)
    4b8a:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4b8c:	b91c      	cbnz	r4, 4b96 <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    4b8e:	632e      	str	r6, [r5, #48]	; 0x30
    4b90:	bd70      	pop	{r4, r5, r6, pc}
    4b92:	2000      	movs	r0, #0
    4b94:	e7f5      	b.n	4b82 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    4b96:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    4b98:	1c32      	adds	r2, r6, #0
    4b9a:	bf18      	it	ne
    4b9c:	2201      	movne	r2, #1
    4b9e:	2103      	movs	r1, #3
    4ba0:	1d28      	adds	r0, r5, #4
    4ba2:	4b03      	ldr	r3, [pc, #12]	; (4bb0 <spi_m_async_register_callback+0x40>)
    4ba4:	4798      	blx	r3
    4ba6:	bd70      	pop	{r4, r5, r6, pc}
    4ba8:	0000d17c 	.word	0x0000d17c
    4bac:	00005921 	.word	0x00005921
    4bb0:	000077a1 	.word	0x000077a1

00004bb4 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4bb4:	b538      	push	{r3, r4, r5, lr}
    4bb6:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4bb8:	4604      	mov	r4, r0
    4bba:	b158      	cbz	r0, 4bd4 <spi_m_async_get_io_descriptor+0x20>
    4bbc:	1c08      	adds	r0, r1, #0
    4bbe:	bf18      	it	ne
    4bc0:	2001      	movne	r0, #1
    4bc2:	f240 126f 	movw	r2, #367	; 0x16f
    4bc6:	4904      	ldr	r1, [pc, #16]	; (4bd8 <spi_m_async_get_io_descriptor+0x24>)
    4bc8:	4b04      	ldr	r3, [pc, #16]	; (4bdc <spi_m_async_get_io_descriptor+0x28>)
    4bca:	4798      	blx	r3
	*io = &spi->io;
    4bcc:	3424      	adds	r4, #36	; 0x24
    4bce:	602c      	str	r4, [r5, #0]
	return 0;
}
    4bd0:	2000      	movs	r0, #0
    4bd2:	bd38      	pop	{r3, r4, r5, pc}
    4bd4:	2000      	movs	r0, #0
    4bd6:	e7f4      	b.n	4bc2 <spi_m_async_get_io_descriptor+0xe>
    4bd8:	0000d17c 	.word	0x0000d17c
    4bdc:	00005921 	.word	0x00005921

00004be0 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4be0:	b570      	push	{r4, r5, r6, lr}
    4be2:	460d      	mov	r5, r1
    4be4:	4616      	mov	r6, r2
	ASSERT(io);
    4be6:	4604      	mov	r4, r0
    4be8:	2298      	movs	r2, #152	; 0x98
    4bea:	4907      	ldr	r1, [pc, #28]	; (4c08 <_spi_m_dma_io_write+0x28>)
    4bec:	3000      	adds	r0, #0
    4bee:	bf18      	it	ne
    4bf0:	2001      	movne	r0, #1
    4bf2:	4b06      	ldr	r3, [pc, #24]	; (4c0c <_spi_m_dma_io_write+0x2c>)
    4bf4:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    4bf6:	4633      	mov	r3, r6
    4bf8:	2200      	movs	r2, #0
    4bfa:	4629      	mov	r1, r5
    4bfc:	f1a4 001c 	sub.w	r0, r4, #28
    4c00:	4c03      	ldr	r4, [pc, #12]	; (4c10 <_spi_m_dma_io_write+0x30>)
    4c02:	47a0      	blx	r4
}
    4c04:	bd70      	pop	{r4, r5, r6, pc}
    4c06:	bf00      	nop
    4c08:	0000d19c 	.word	0x0000d19c
    4c0c:	00005921 	.word	0x00005921
    4c10:	000079f5 	.word	0x000079f5

00004c14 <_spi_m_dma_io_read>:
{
    4c14:	b570      	push	{r4, r5, r6, lr}
    4c16:	460d      	mov	r5, r1
    4c18:	4616      	mov	r6, r2
	ASSERT(io);
    4c1a:	4604      	mov	r4, r0
    4c1c:	2281      	movs	r2, #129	; 0x81
    4c1e:	4907      	ldr	r1, [pc, #28]	; (4c3c <_spi_m_dma_io_read+0x28>)
    4c20:	3000      	adds	r0, #0
    4c22:	bf18      	it	ne
    4c24:	2001      	movne	r0, #1
    4c26:	4b06      	ldr	r3, [pc, #24]	; (4c40 <_spi_m_dma_io_read+0x2c>)
    4c28:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    4c2a:	4633      	mov	r3, r6
    4c2c:	462a      	mov	r2, r5
    4c2e:	2100      	movs	r1, #0
    4c30:	f1a4 001c 	sub.w	r0, r4, #28
    4c34:	4c03      	ldr	r4, [pc, #12]	; (4c44 <_spi_m_dma_io_read+0x30>)
    4c36:	47a0      	blx	r4
}
    4c38:	bd70      	pop	{r4, r5, r6, pc}
    4c3a:	bf00      	nop
    4c3c:	0000d19c 	.word	0x0000d19c
    4c40:	00005921 	.word	0x00005921
    4c44:	000079f5 	.word	0x000079f5

00004c48 <spi_m_dma_init>:
{
    4c48:	b538      	push	{r3, r4, r5, lr}
    4c4a:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    4c4c:	4605      	mov	r5, r0
    4c4e:	b1a0      	cbz	r0, 4c7a <spi_m_dma_init+0x32>
    4c50:	1c08      	adds	r0, r1, #0
    4c52:	bf18      	it	ne
    4c54:	2001      	movne	r0, #1
    4c56:	223b      	movs	r2, #59	; 0x3b
    4c58:	4909      	ldr	r1, [pc, #36]	; (4c80 <spi_m_dma_init+0x38>)
    4c5a:	4b0a      	ldr	r3, [pc, #40]	; (4c84 <spi_m_dma_init+0x3c>)
    4c5c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4c5e:	4628      	mov	r0, r5
    4c60:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    4c64:	4621      	mov	r1, r4
    4c66:	4b08      	ldr	r3, [pc, #32]	; (4c88 <spi_m_dma_init+0x40>)
    4c68:	4798      	blx	r3
	if (rc) {
    4c6a:	4603      	mov	r3, r0
    4c6c:	b918      	cbnz	r0, 4c76 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    4c6e:	4a07      	ldr	r2, [pc, #28]	; (4c8c <spi_m_dma_init+0x44>)
    4c70:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    4c72:	4a07      	ldr	r2, [pc, #28]	; (4c90 <spi_m_dma_init+0x48>)
    4c74:	622a      	str	r2, [r5, #32]
}
    4c76:	4618      	mov	r0, r3
    4c78:	bd38      	pop	{r3, r4, r5, pc}
    4c7a:	2000      	movs	r0, #0
    4c7c:	e7eb      	b.n	4c56 <spi_m_dma_init+0xe>
    4c7e:	bf00      	nop
    4c80:	0000d19c 	.word	0x0000d19c
    4c84:	00005921 	.word	0x00005921
    4c88:	000077d9 	.word	0x000077d9
    4c8c:	00004c15 	.word	0x00004c15
    4c90:	00004be1 	.word	0x00004be1

00004c94 <spi_m_dma_enable>:
{
    4c94:	b510      	push	{r4, lr}
	ASSERT(spi);
    4c96:	4604      	mov	r4, r0
    4c98:	2251      	movs	r2, #81	; 0x51
    4c9a:	4905      	ldr	r1, [pc, #20]	; (4cb0 <spi_m_dma_enable+0x1c>)
    4c9c:	3000      	adds	r0, #0
    4c9e:	bf18      	it	ne
    4ca0:	2001      	movne	r0, #1
    4ca2:	4b04      	ldr	r3, [pc, #16]	; (4cb4 <spi_m_dma_enable+0x20>)
    4ca4:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    4ca6:	1d20      	adds	r0, r4, #4
    4ca8:	4b03      	ldr	r3, [pc, #12]	; (4cb8 <spi_m_dma_enable+0x24>)
    4caa:	4798      	blx	r3
    4cac:	bd10      	pop	{r4, pc}
    4cae:	bf00      	nop
    4cb0:	0000d19c 	.word	0x0000d19c
    4cb4:	00005921 	.word	0x00005921
    4cb8:	00007955 	.word	0x00007955

00004cbc <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4cbc:	b570      	push	{r4, r5, r6, lr}
    4cbe:	460d      	mov	r5, r1
    4cc0:	4616      	mov	r6, r2
	ASSERT(spi);
    4cc2:	4604      	mov	r4, r0
    4cc4:	22a8      	movs	r2, #168	; 0xa8
    4cc6:	4906      	ldr	r1, [pc, #24]	; (4ce0 <spi_m_dma_register_callback+0x24>)
    4cc8:	3000      	adds	r0, #0
    4cca:	bf18      	it	ne
    4ccc:	2001      	movne	r0, #1
    4cce:	4b05      	ldr	r3, [pc, #20]	; (4ce4 <spi_m_dma_register_callback+0x28>)
    4cd0:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    4cd2:	4632      	mov	r2, r6
    4cd4:	4629      	mov	r1, r5
    4cd6:	1d20      	adds	r0, r4, #4
    4cd8:	4b03      	ldr	r3, [pc, #12]	; (4ce8 <spi_m_dma_register_callback+0x2c>)
    4cda:	4798      	blx	r3
    4cdc:	bd70      	pop	{r4, r5, r6, pc}
    4cde:	bf00      	nop
    4ce0:	0000d19c 	.word	0x0000d19c
    4ce4:	00005921 	.word	0x00005921
    4ce8:	00007985 	.word	0x00007985

00004cec <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4cec:	b538      	push	{r3, r4, r5, lr}
    4cee:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4cf0:	4604      	mov	r4, r0
    4cf2:	b150      	cbz	r0, 4d0a <spi_m_dma_get_io_descriptor+0x1e>
    4cf4:	1c08      	adds	r0, r1, #0
    4cf6:	bf18      	it	ne
    4cf8:	2001      	movne	r0, #1
    4cfa:	22ae      	movs	r2, #174	; 0xae
    4cfc:	4904      	ldr	r1, [pc, #16]	; (4d10 <spi_m_dma_get_io_descriptor+0x24>)
    4cfe:	4b05      	ldr	r3, [pc, #20]	; (4d14 <spi_m_dma_get_io_descriptor+0x28>)
    4d00:	4798      	blx	r3
	*io = &spi->io;
    4d02:	3420      	adds	r4, #32
    4d04:	602c      	str	r4, [r5, #0]

	return 0;
}
    4d06:	2000      	movs	r0, #0
    4d08:	bd38      	pop	{r3, r4, r5, pc}
    4d0a:	2000      	movs	r0, #0
    4d0c:	e7f5      	b.n	4cfa <spi_m_dma_get_io_descriptor+0xe>
    4d0e:	bf00      	nop
    4d10:	0000d19c 	.word	0x0000d19c
    4d14:	00005921 	.word	0x00005921

00004d18 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d1a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    4d1c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    4d1e:	b12f      	cbz	r7, 4d2c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    4d20:	688d      	ldr	r5, [r1, #8]
    4d22:	463c      	mov	r4, r7
    4d24:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4d26:	f1c2 0e01 	rsb	lr, r2, #1
    4d2a:	e00b      	b.n	4d44 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    4d2c:	4b0e      	ldr	r3, [pc, #56]	; (4d68 <timer_add_timer_task+0x50>)
    4d2e:	4798      	blx	r3
		return;
    4d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4d32:	4473      	add	r3, lr
    4d34:	68a0      	ldr	r0, [r4, #8]
    4d36:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    4d38:	42ab      	cmp	r3, r5
    4d3a:	d20a      	bcs.n	4d52 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    4d3c:	6823      	ldr	r3, [r4, #0]
    4d3e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4d40:	b153      	cbz	r3, 4d58 <timer_add_timer_task+0x40>
    4d42:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    4d44:	6863      	ldr	r3, [r4, #4]
    4d46:	4293      	cmp	r3, r2
    4d48:	d8f3      	bhi.n	4d32 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    4d4a:	68a0      	ldr	r0, [r4, #8]
    4d4c:	4403      	add	r3, r0
    4d4e:	1a9b      	subs	r3, r3, r2
    4d50:	e7f2      	b.n	4d38 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    4d52:	42a7      	cmp	r7, r4
    4d54:	d004      	beq.n	4d60 <timer_add_timer_task+0x48>
    4d56:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    4d58:	4620      	mov	r0, r4
    4d5a:	4b04      	ldr	r3, [pc, #16]	; (4d6c <timer_add_timer_task+0x54>)
    4d5c:	4798      	blx	r3
    4d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    4d60:	4660      	mov	r0, ip
    4d62:	4b01      	ldr	r3, [pc, #4]	; (4d68 <timer_add_timer_task+0x50>)
    4d64:	4798      	blx	r3
    4d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d68:	00005949 	.word	0x00005949
    4d6c:	00005975 	.word	0x00005975

00004d70 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    4d74:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    4d76:	6907      	ldr	r7, [r0, #16]
    4d78:	3701      	adds	r7, #1
    4d7a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4d7c:	7e03      	ldrb	r3, [r0, #24]
    4d7e:	f013 0f01 	tst.w	r3, #1
    4d82:	d113      	bne.n	4dac <timer_process_counted+0x3c>
    4d84:	7e03      	ldrb	r3, [r0, #24]
    4d86:	f013 0f02 	tst.w	r3, #2
    4d8a:	d10f      	bne.n	4dac <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4d8c:	b354      	cbz	r4, 4de4 <timer_process_counted+0x74>
    4d8e:	6863      	ldr	r3, [r4, #4]
    4d90:	1afb      	subs	r3, r7, r3
    4d92:	68a2      	ldr	r2, [r4, #8]
    4d94:	4293      	cmp	r3, r2
    4d96:	d307      	bcc.n	4da8 <timer_process_counted+0x38>
    4d98:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    4d9a:	f100 0814 	add.w	r8, r0, #20
    4d9e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4de8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    4da2:	f8df a048 	ldr.w	sl, [pc, #72]	; 4dec <timer_process_counted+0x7c>
    4da6:	e012      	b.n	4dce <timer_process_counted+0x5e>
    4da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4dac:	7e03      	ldrb	r3, [r0, #24]
    4dae:	f043 0302 	orr.w	r3, r3, #2
    4db2:	7603      	strb	r3, [r0, #24]
		return;
    4db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4db8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    4dba:	68e3      	ldr	r3, [r4, #12]
    4dbc:	4620      	mov	r0, r4
    4dbe:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4dc0:	b185      	cbz	r5, 4de4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4dc2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4dc4:	686b      	ldr	r3, [r5, #4]
    4dc6:	1afb      	subs	r3, r7, r3
    4dc8:	68aa      	ldr	r2, [r5, #8]
    4dca:	4293      	cmp	r3, r2
    4dcc:	d30a      	bcc.n	4de4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    4dce:	4640      	mov	r0, r8
    4dd0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4dd2:	7c23      	ldrb	r3, [r4, #16]
    4dd4:	2b01      	cmp	r3, #1
    4dd6:	d1ef      	bne.n	4db8 <timer_process_counted+0x48>
			tmp->time_label = time;
    4dd8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4dda:	463a      	mov	r2, r7
    4ddc:	4621      	mov	r1, r4
    4dde:	4640      	mov	r0, r8
    4de0:	47d0      	blx	sl
    4de2:	e7e9      	b.n	4db8 <timer_process_counted+0x48>
    4de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4de8:	000059bd 	.word	0x000059bd
    4dec:	00004d19 	.word	0x00004d19

00004df0 <timer_init>:
{
    4df0:	b570      	push	{r4, r5, r6, lr}
    4df2:	460e      	mov	r6, r1
    4df4:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    4df6:	4604      	mov	r4, r0
    4df8:	b190      	cbz	r0, 4e20 <timer_init+0x30>
    4dfa:	b199      	cbz	r1, 4e24 <timer_init+0x34>
    4dfc:	1c10      	adds	r0, r2, #0
    4dfe:	bf18      	it	ne
    4e00:	2001      	movne	r0, #1
    4e02:	223b      	movs	r2, #59	; 0x3b
    4e04:	4908      	ldr	r1, [pc, #32]	; (4e28 <timer_init+0x38>)
    4e06:	4b09      	ldr	r3, [pc, #36]	; (4e2c <timer_init+0x3c>)
    4e08:	4798      	blx	r3
	descr->func = func;
    4e0a:	4620      	mov	r0, r4
    4e0c:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    4e10:	682b      	ldr	r3, [r5, #0]
    4e12:	4631      	mov	r1, r6
    4e14:	4798      	blx	r3
	descr->time                           = 0;
    4e16:	2000      	movs	r0, #0
    4e18:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4e1a:	4b05      	ldr	r3, [pc, #20]	; (4e30 <timer_init+0x40>)
    4e1c:	6063      	str	r3, [r4, #4]
}
    4e1e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    4e20:	2000      	movs	r0, #0
    4e22:	e7ee      	b.n	4e02 <timer_init+0x12>
    4e24:	2000      	movs	r0, #0
    4e26:	e7ec      	b.n	4e02 <timer_init+0x12>
    4e28:	0000d1b8 	.word	0x0000d1b8
    4e2c:	00005921 	.word	0x00005921
    4e30:	00004d71 	.word	0x00004d71

00004e34 <timer_start>:
{
    4e34:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    4e36:	4604      	mov	r4, r0
    4e38:	b198      	cbz	r0, 4e62 <timer_start+0x2e>
    4e3a:	6800      	ldr	r0, [r0, #0]
    4e3c:	3000      	adds	r0, #0
    4e3e:	bf18      	it	ne
    4e40:	2001      	movne	r0, #1
    4e42:	2254      	movs	r2, #84	; 0x54
    4e44:	4909      	ldr	r1, [pc, #36]	; (4e6c <timer_start+0x38>)
    4e46:	4b0a      	ldr	r3, [pc, #40]	; (4e70 <timer_start+0x3c>)
    4e48:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    4e4a:	1d25      	adds	r5, r4, #4
    4e4c:	6823      	ldr	r3, [r4, #0]
    4e4e:	699b      	ldr	r3, [r3, #24]
    4e50:	4628      	mov	r0, r5
    4e52:	4798      	blx	r3
    4e54:	b938      	cbnz	r0, 4e66 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    4e56:	6823      	ldr	r3, [r4, #0]
    4e58:	689b      	ldr	r3, [r3, #8]
    4e5a:	4628      	mov	r0, r5
    4e5c:	4798      	blx	r3
	return ERR_NONE;
    4e5e:	2000      	movs	r0, #0
    4e60:	bd38      	pop	{r3, r4, r5, pc}
    4e62:	2000      	movs	r0, #0
    4e64:	e7ed      	b.n	4e42 <timer_start+0xe>
		return ERR_DENIED;
    4e66:	f06f 0010 	mvn.w	r0, #16
}
    4e6a:	bd38      	pop	{r3, r4, r5, pc}
    4e6c:	0000d1b8 	.word	0x0000d1b8
    4e70:	00005921 	.word	0x00005921

00004e74 <timer_add_task>:
{
    4e74:	b570      	push	{r4, r5, r6, lr}
    4e76:	b082      	sub	sp, #8
    4e78:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    4e7a:	4604      	mov	r4, r0
    4e7c:	b328      	cbz	r0, 4eca <timer_add_task+0x56>
    4e7e:	b331      	cbz	r1, 4ece <timer_add_task+0x5a>
    4e80:	6800      	ldr	r0, [r0, #0]
    4e82:	3000      	adds	r0, #0
    4e84:	bf18      	it	ne
    4e86:	2001      	movne	r0, #1
    4e88:	227b      	movs	r2, #123	; 0x7b
    4e8a:	4920      	ldr	r1, [pc, #128]	; (4f0c <timer_add_task+0x98>)
    4e8c:	4b20      	ldr	r3, [pc, #128]	; (4f10 <timer_add_task+0x9c>)
    4e8e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4e90:	7f23      	ldrb	r3, [r4, #28]
    4e92:	f043 0301 	orr.w	r3, r3, #1
    4e96:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    4e98:	f104 0618 	add.w	r6, r4, #24
    4e9c:	4629      	mov	r1, r5
    4e9e:	4630      	mov	r0, r6
    4ea0:	4b1c      	ldr	r3, [pc, #112]	; (4f14 <timer_add_task+0xa0>)
    4ea2:	4798      	blx	r3
    4ea4:	b9a8      	cbnz	r0, 4ed2 <timer_add_task+0x5e>
	task->time_label = descr->time;
    4ea6:	6963      	ldr	r3, [r4, #20]
    4ea8:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4eaa:	6962      	ldr	r2, [r4, #20]
    4eac:	4629      	mov	r1, r5
    4eae:	4630      	mov	r0, r6
    4eb0:	4b19      	ldr	r3, [pc, #100]	; (4f18 <timer_add_task+0xa4>)
    4eb2:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4eb4:	7f23      	ldrb	r3, [r4, #28]
    4eb6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4eba:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4ebc:	7f23      	ldrb	r3, [r4, #28]
    4ebe:	f013 0f02 	tst.w	r3, #2
    4ec2:	d112      	bne.n	4eea <timer_add_task+0x76>
	return ERR_NONE;
    4ec4:	2000      	movs	r0, #0
}
    4ec6:	b002      	add	sp, #8
    4ec8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    4eca:	2000      	movs	r0, #0
    4ecc:	e7dc      	b.n	4e88 <timer_add_task+0x14>
    4ece:	2000      	movs	r0, #0
    4ed0:	e7da      	b.n	4e88 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4ed2:	7f23      	ldrb	r3, [r4, #28]
    4ed4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4ed8:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    4eda:	2280      	movs	r2, #128	; 0x80
    4edc:	490b      	ldr	r1, [pc, #44]	; (4f0c <timer_add_task+0x98>)
    4ede:	2000      	movs	r0, #0
    4ee0:	4b0b      	ldr	r3, [pc, #44]	; (4f10 <timer_add_task+0x9c>)
    4ee2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4ee4:	f06f 0011 	mvn.w	r0, #17
    4ee8:	e7ed      	b.n	4ec6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    4eea:	a801      	add	r0, sp, #4
    4eec:	4b0b      	ldr	r3, [pc, #44]	; (4f1c <timer_add_task+0xa8>)
    4eee:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4ef0:	7f23      	ldrb	r3, [r4, #28]
    4ef2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ef6:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    4ef8:	6823      	ldr	r3, [r4, #0]
    4efa:	69db      	ldr	r3, [r3, #28]
    4efc:	1d20      	adds	r0, r4, #4
    4efe:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4f00:	a801      	add	r0, sp, #4
    4f02:	4b07      	ldr	r3, [pc, #28]	; (4f20 <timer_add_task+0xac>)
    4f04:	4798      	blx	r3
	return ERR_NONE;
    4f06:	2000      	movs	r0, #0
    4f08:	e7dd      	b.n	4ec6 <timer_add_task+0x52>
    4f0a:	bf00      	nop
    4f0c:	0000d1b8 	.word	0x0000d1b8
    4f10:	00005921 	.word	0x00005921
    4f14:	00005927 	.word	0x00005927
    4f18:	00004d19 	.word	0x00004d19
    4f1c:	00004589 	.word	0x00004589
    4f20:	00004597 	.word	0x00004597

00004f24 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    4f24:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    4f26:	2300      	movs	r3, #0
    4f28:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    4f2a:	69c3      	ldr	r3, [r0, #28]
    4f2c:	b11b      	cbz	r3, 4f36 <usart_transmission_complete+0x12>
    4f2e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    4f32:	4610      	mov	r0, r2
    4f34:	4798      	blx	r3
    4f36:	bd08      	pop	{r3, pc}

00004f38 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    4f38:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    4f3a:	2300      	movs	r3, #0
    4f3c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    4f3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4f40:	b11b      	cbz	r3, 4f4a <usart_error+0x12>
    4f42:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    4f46:	4610      	mov	r0, r2
    4f48:	4798      	blx	r3
    4f4a:	bd08      	pop	{r3, pc}

00004f4c <usart_fill_rx_buffer>:
{
    4f4c:	b538      	push	{r3, r4, r5, lr}
    4f4e:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    4f50:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    4f54:	302c      	adds	r0, #44	; 0x2c
    4f56:	4b03      	ldr	r3, [pc, #12]	; (4f64 <usart_fill_rx_buffer+0x18>)
    4f58:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    4f5a:	6a23      	ldr	r3, [r4, #32]
    4f5c:	b10b      	cbz	r3, 4f62 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    4f5e:	4628      	mov	r0, r5
    4f60:	4798      	blx	r3
    4f62:	bd38      	pop	{r3, r4, r5, pc}
    4f64:	00005a5d 	.word	0x00005a5d

00004f68 <usart_async_write>:
{
    4f68:	b570      	push	{r4, r5, r6, lr}
    4f6a:	460e      	mov	r6, r1
    4f6c:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    4f6e:	4604      	mov	r4, r0
    4f70:	b1e0      	cbz	r0, 4fac <usart_async_write+0x44>
    4f72:	b1e9      	cbz	r1, 4fb0 <usart_async_write+0x48>
    4f74:	1c10      	adds	r0, r2, #0
    4f76:	bf18      	it	ne
    4f78:	2001      	movne	r0, #1
    4f7a:	f240 123b 	movw	r2, #315	; 0x13b
    4f7e:	490f      	ldr	r1, [pc, #60]	; (4fbc <usart_async_write+0x54>)
    4f80:	4b0f      	ldr	r3, [pc, #60]	; (4fc0 <usart_async_write+0x58>)
    4f82:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    4f84:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    4f88:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    4f8c:	429a      	cmp	r2, r3
    4f8e:	d111      	bne.n	4fb4 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    4f90:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    4f92:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    4f96:	2300      	movs	r3, #0
    4f98:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    4f9c:	2301      	movs	r3, #1
    4f9e:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    4fa0:	f104 0008 	add.w	r0, r4, #8
    4fa4:	4b07      	ldr	r3, [pc, #28]	; (4fc4 <usart_async_write+0x5c>)
    4fa6:	4798      	blx	r3
	return (int32_t)length;
    4fa8:	4628      	mov	r0, r5
    4faa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    4fac:	2000      	movs	r0, #0
    4fae:	e7e4      	b.n	4f7a <usart_async_write+0x12>
    4fb0:	2000      	movs	r0, #0
    4fb2:	e7e2      	b.n	4f7a <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    4fb4:	f06f 001b 	mvn.w	r0, #27
}
    4fb8:	bd70      	pop	{r4, r5, r6, pc}
    4fba:	bf00      	nop
    4fbc:	0000d1d0 	.word	0x0000d1d0
    4fc0:	00005921 	.word	0x00005921
    4fc4:	00006f9f 	.word	0x00006f9f

00004fc8 <usart_process_byte_sent>:
{
    4fc8:	b510      	push	{r4, lr}
    4fca:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    4fcc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    4fce:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    4fd2:	429a      	cmp	r2, r3
    4fd4:	d009      	beq.n	4fea <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    4fd6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4fd8:	1c59      	adds	r1, r3, #1
    4fda:	8781      	strh	r1, [r0, #60]	; 0x3c
    4fdc:	5cd1      	ldrb	r1, [r2, r3]
    4fde:	4b04      	ldr	r3, [pc, #16]	; (4ff0 <usart_process_byte_sent+0x28>)
    4fe0:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    4fe2:	4620      	mov	r0, r4
    4fe4:	4b03      	ldr	r3, [pc, #12]	; (4ff4 <usart_process_byte_sent+0x2c>)
    4fe6:	4798      	blx	r3
    4fe8:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    4fea:	4b03      	ldr	r3, [pc, #12]	; (4ff8 <usart_process_byte_sent+0x30>)
    4fec:	4798      	blx	r3
    4fee:	bd10      	pop	{r4, pc}
    4ff0:	00006f73 	.word	0x00006f73
    4ff4:	00006f9f 	.word	0x00006f9f
    4ff8:	00006fa7 	.word	0x00006fa7

00004ffc <usart_async_read>:
{
    4ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5000:	b082      	sub	sp, #8
    5002:	460f      	mov	r7, r1
    5004:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    5006:	4606      	mov	r6, r0
    5008:	b1a0      	cbz	r0, 5034 <usart_async_read+0x38>
    500a:	b199      	cbz	r1, 5034 <usart_async_read+0x38>
    500c:	2a00      	cmp	r2, #0
    500e:	d12d      	bne.n	506c <usart_async_read+0x70>
    5010:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5014:	4929      	ldr	r1, [pc, #164]	; (50bc <usart_async_read+0xc0>)
    5016:	2000      	movs	r0, #0
    5018:	4b29      	ldr	r3, [pc, #164]	; (50c0 <usart_async_read+0xc4>)
    501a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    501c:	a801      	add	r0, sp, #4
    501e:	4b29      	ldr	r3, [pc, #164]	; (50c4 <usart_async_read+0xc8>)
    5020:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5022:	f106 0034 	add.w	r0, r6, #52	; 0x34
    5026:	4b28      	ldr	r3, [pc, #160]	; (50c8 <usart_async_read+0xcc>)
    5028:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    502a:	a801      	add	r0, sp, #4
    502c:	4b27      	ldr	r3, [pc, #156]	; (50cc <usart_async_read+0xd0>)
    502e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5030:	2500      	movs	r5, #0
	return (int32_t)was_read;
    5032:	e03e      	b.n	50b2 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5034:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5038:	4920      	ldr	r1, [pc, #128]	; (50bc <usart_async_read+0xc0>)
    503a:	2000      	movs	r0, #0
    503c:	4b20      	ldr	r3, [pc, #128]	; (50c0 <usart_async_read+0xc4>)
    503e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5040:	a801      	add	r0, sp, #4
    5042:	4b20      	ldr	r3, [pc, #128]	; (50c4 <usart_async_read+0xc8>)
    5044:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5046:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    504a:	4650      	mov	r0, sl
    504c:	4b1e      	ldr	r3, [pc, #120]	; (50c8 <usart_async_read+0xcc>)
    504e:	4798      	blx	r3
    5050:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    5052:	a801      	add	r0, sp, #4
    5054:	4b1d      	ldr	r3, [pc, #116]	; (50cc <usart_async_read+0xd0>)
    5056:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    5058:	f1b9 0f00 	cmp.w	r9, #0
    505c:	d004      	beq.n	5068 <usart_async_read+0x6c>
    505e:	f1b8 0f00 	cmp.w	r8, #0
    5062:	d119      	bne.n	5098 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    5064:	2500      	movs	r5, #0
    5066:	e024      	b.n	50b2 <usart_async_read+0xb6>
    5068:	2500      	movs	r5, #0
    506a:	e022      	b.n	50b2 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    506c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5070:	4912      	ldr	r1, [pc, #72]	; (50bc <usart_async_read+0xc0>)
    5072:	2001      	movs	r0, #1
    5074:	4b12      	ldr	r3, [pc, #72]	; (50c0 <usart_async_read+0xc4>)
    5076:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5078:	a801      	add	r0, sp, #4
    507a:	4b12      	ldr	r3, [pc, #72]	; (50c4 <usart_async_read+0xc8>)
    507c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    507e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    5082:	4650      	mov	r0, sl
    5084:	4b10      	ldr	r3, [pc, #64]	; (50c8 <usart_async_read+0xcc>)
    5086:	4798      	blx	r3
    5088:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    508a:	a801      	add	r0, sp, #4
    508c:	4b0f      	ldr	r3, [pc, #60]	; (50cc <usart_async_read+0xd0>)
    508e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5090:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    5092:	f1b9 0f00 	cmp.w	r9, #0
    5096:	d00c      	beq.n	50b2 <usart_async_read+0xb6>
{
    5098:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    509a:	4e0d      	ldr	r6, [pc, #52]	; (50d0 <usart_async_read+0xd4>)
    509c:	1c60      	adds	r0, r4, #1
    509e:	b285      	uxth	r5, r0
    50a0:	1939      	adds	r1, r7, r4
    50a2:	4650      	mov	r0, sl
    50a4:	47b0      	blx	r6
    50a6:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    50a8:	454c      	cmp	r4, r9
    50aa:	d202      	bcs.n	50b2 <usart_async_read+0xb6>
    50ac:	b2a3      	uxth	r3, r4
    50ae:	4598      	cmp	r8, r3
    50b0:	d8f4      	bhi.n	509c <usart_async_read+0xa0>
}
    50b2:	4628      	mov	r0, r5
    50b4:	b002      	add	sp, #8
    50b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    50ba:	bf00      	nop
    50bc:	0000d1d0 	.word	0x0000d1d0
    50c0:	00005921 	.word	0x00005921
    50c4:	00004589 	.word	0x00004589
    50c8:	00005a9d 	.word	0x00005a9d
    50cc:	00004597 	.word	0x00004597
    50d0:	00005a19 	.word	0x00005a19

000050d4 <usart_async_init>:
{
    50d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50d6:	460d      	mov	r5, r1
    50d8:	4616      	mov	r6, r2
    50da:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    50dc:	4604      	mov	r4, r0
    50de:	b320      	cbz	r0, 512a <usart_async_init+0x56>
    50e0:	b329      	cbz	r1, 512e <usart_async_init+0x5a>
    50e2:	b332      	cbz	r2, 5132 <usart_async_init+0x5e>
    50e4:	1c18      	adds	r0, r3, #0
    50e6:	bf18      	it	ne
    50e8:	2001      	movne	r0, #1
    50ea:	223a      	movs	r2, #58	; 0x3a
    50ec:	4913      	ldr	r1, [pc, #76]	; (513c <usart_async_init+0x68>)
    50ee:	4b14      	ldr	r3, [pc, #80]	; (5140 <usart_async_init+0x6c>)
    50f0:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    50f2:	463a      	mov	r2, r7
    50f4:	4631      	mov	r1, r6
    50f6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    50fa:	4b12      	ldr	r3, [pc, #72]	; (5144 <usart_async_init+0x70>)
    50fc:	4798      	blx	r3
    50fe:	b9d0      	cbnz	r0, 5136 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    5100:	4629      	mov	r1, r5
    5102:	f104 0008 	add.w	r0, r4, #8
    5106:	4b10      	ldr	r3, [pc, #64]	; (5148 <usart_async_init+0x74>)
    5108:	4798      	blx	r3
	if (init_status) {
    510a:	4603      	mov	r3, r0
    510c:	b958      	cbnz	r0, 5126 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    510e:	4a0f      	ldr	r2, [pc, #60]	; (514c <usart_async_init+0x78>)
    5110:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    5112:	4a0f      	ldr	r2, [pc, #60]	; (5150 <usart_async_init+0x7c>)
    5114:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    5116:	4a0f      	ldr	r2, [pc, #60]	; (5154 <usart_async_init+0x80>)
    5118:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    511a:	4a0f      	ldr	r2, [pc, #60]	; (5158 <usart_async_init+0x84>)
    511c:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    511e:	4a0f      	ldr	r2, [pc, #60]	; (515c <usart_async_init+0x88>)
    5120:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    5122:	4a0f      	ldr	r2, [pc, #60]	; (5160 <usart_async_init+0x8c>)
    5124:	6162      	str	r2, [r4, #20]
}
    5126:	4618      	mov	r0, r3
    5128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    512a:	2000      	movs	r0, #0
    512c:	e7dd      	b.n	50ea <usart_async_init+0x16>
    512e:	2000      	movs	r0, #0
    5130:	e7db      	b.n	50ea <usart_async_init+0x16>
    5132:	2000      	movs	r0, #0
    5134:	e7d9      	b.n	50ea <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    5136:	f06f 030c 	mvn.w	r3, #12
    513a:	e7f4      	b.n	5126 <usart_async_init+0x52>
    513c:	0000d1d0 	.word	0x0000d1d0
    5140:	00005921 	.word	0x00005921
    5144:	000059c9 	.word	0x000059c9
    5148:	00006ec9 	.word	0x00006ec9
    514c:	00004ffd 	.word	0x00004ffd
    5150:	00004f69 	.word	0x00004f69
    5154:	00004fc9 	.word	0x00004fc9
    5158:	00004f4d 	.word	0x00004f4d
    515c:	00004f25 	.word	0x00004f25
    5160:	00004f39 	.word	0x00004f39

00005164 <usart_async_enable>:
{
    5164:	b510      	push	{r4, lr}
	ASSERT(descr);
    5166:	4604      	mov	r4, r0
    5168:	2261      	movs	r2, #97	; 0x61
    516a:	4906      	ldr	r1, [pc, #24]	; (5184 <usart_async_enable+0x20>)
    516c:	3000      	adds	r0, #0
    516e:	bf18      	it	ne
    5170:	2001      	movne	r0, #1
    5172:	4b05      	ldr	r3, [pc, #20]	; (5188 <usart_async_enable+0x24>)
    5174:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    5176:	f104 0008 	add.w	r0, r4, #8
    517a:	4b04      	ldr	r3, [pc, #16]	; (518c <usart_async_enable+0x28>)
    517c:	4798      	blx	r3
}
    517e:	2000      	movs	r0, #0
    5180:	bd10      	pop	{r4, pc}
    5182:	bf00      	nop
    5184:	0000d1d0 	.word	0x0000d1d0
    5188:	00005921 	.word	0x00005921
    518c:	00006f59 	.word	0x00006f59

00005190 <usart_async_get_io_descriptor>:
{
    5190:	b538      	push	{r3, r4, r5, lr}
    5192:	460c      	mov	r4, r1
	ASSERT(descr && io);
    5194:	4605      	mov	r5, r0
    5196:	b148      	cbz	r0, 51ac <usart_async_get_io_descriptor+0x1c>
    5198:	1c08      	adds	r0, r1, #0
    519a:	bf18      	it	ne
    519c:	2001      	movne	r0, #1
    519e:	2277      	movs	r2, #119	; 0x77
    51a0:	4903      	ldr	r1, [pc, #12]	; (51b0 <usart_async_get_io_descriptor+0x20>)
    51a2:	4b04      	ldr	r3, [pc, #16]	; (51b4 <usart_async_get_io_descriptor+0x24>)
    51a4:	4798      	blx	r3
	*io = &descr->io;
    51a6:	6025      	str	r5, [r4, #0]
}
    51a8:	2000      	movs	r0, #0
    51aa:	bd38      	pop	{r3, r4, r5, pc}
    51ac:	2000      	movs	r0, #0
    51ae:	e7f6      	b.n	519e <usart_async_get_io_descriptor+0xe>
    51b0:	0000d1d0 	.word	0x0000d1d0
    51b4:	00005921 	.word	0x00005921

000051b8 <usart_async_register_callback>:
{
    51b8:	b570      	push	{r4, r5, r6, lr}
    51ba:	460c      	mov	r4, r1
    51bc:	4616      	mov	r6, r2
	ASSERT(descr);
    51be:	4605      	mov	r5, r0
    51c0:	2283      	movs	r2, #131	; 0x83
    51c2:	4917      	ldr	r1, [pc, #92]	; (5220 <usart_async_register_callback+0x68>)
    51c4:	3000      	adds	r0, #0
    51c6:	bf18      	it	ne
    51c8:	2001      	movne	r0, #1
    51ca:	4b16      	ldr	r3, [pc, #88]	; (5224 <usart_async_register_callback+0x6c>)
    51cc:	4798      	blx	r3
	switch (type) {
    51ce:	2c01      	cmp	r4, #1
    51d0:	d010      	beq.n	51f4 <usart_async_register_callback+0x3c>
    51d2:	b124      	cbz	r4, 51de <usart_async_register_callback+0x26>
    51d4:	2c02      	cmp	r4, #2
    51d6:	d018      	beq.n	520a <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    51d8:	f06f 000c 	mvn.w	r0, #12
}
    51dc:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    51de:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    51e0:	1c32      	adds	r2, r6, #0
    51e2:	bf18      	it	ne
    51e4:	2201      	movne	r2, #1
    51e6:	2101      	movs	r1, #1
    51e8:	f105 0008 	add.w	r0, r5, #8
    51ec:	4b0e      	ldr	r3, [pc, #56]	; (5228 <usart_async_register_callback+0x70>)
    51ee:	4798      	blx	r3
	return ERR_NONE;
    51f0:	2000      	movs	r0, #0
		break;
    51f2:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    51f4:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    51f6:	1c32      	adds	r2, r6, #0
    51f8:	bf18      	it	ne
    51fa:	2201      	movne	r2, #1
    51fc:	2102      	movs	r1, #2
    51fe:	f105 0008 	add.w	r0, r5, #8
    5202:	4b09      	ldr	r3, [pc, #36]	; (5228 <usart_async_register_callback+0x70>)
    5204:	4798      	blx	r3
	return ERR_NONE;
    5206:	2000      	movs	r0, #0
		break;
    5208:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    520a:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    520c:	1c32      	adds	r2, r6, #0
    520e:	bf18      	it	ne
    5210:	2201      	movne	r2, #1
    5212:	2103      	movs	r1, #3
    5214:	f105 0008 	add.w	r0, r5, #8
    5218:	4b03      	ldr	r3, [pc, #12]	; (5228 <usart_async_register_callback+0x70>)
    521a:	4798      	blx	r3
	return ERR_NONE;
    521c:	2000      	movs	r0, #0
		break;
    521e:	bd70      	pop	{r4, r5, r6, pc}
    5220:	0000d1d0 	.word	0x0000d1d0
    5224:	00005921 	.word	0x00005921
    5228:	00006fb1 	.word	0x00006fb1

0000522c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5230:	460f      	mov	r7, r1
    5232:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    5234:	4604      	mov	r4, r0
    5236:	b328      	cbz	r0, 5284 <usart_sync_write+0x58>
    5238:	b331      	cbz	r1, 5288 <usart_sync_write+0x5c>
    523a:	1c10      	adds	r0, r2, #0
    523c:	bf18      	it	ne
    523e:	2001      	movne	r0, #1
    5240:	22f1      	movs	r2, #241	; 0xf1
    5242:	4912      	ldr	r1, [pc, #72]	; (528c <usart_sync_write+0x60>)
    5244:	4b12      	ldr	r3, [pc, #72]	; (5290 <usart_sync_write+0x64>)
    5246:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    5248:	3408      	adds	r4, #8
    524a:	4d12      	ldr	r5, [pc, #72]	; (5294 <usart_sync_write+0x68>)
    524c:	4620      	mov	r0, r4
    524e:	47a8      	blx	r5
    5250:	2800      	cmp	r0, #0
    5252:	d0fb      	beq.n	524c <usart_sync_write+0x20>
    5254:	3f01      	subs	r7, #1
    5256:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5258:	f8df 9040 	ldr.w	r9, [pc, #64]	; 529c <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    525c:	4d0d      	ldr	r5, [pc, #52]	; (5294 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    525e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5262:	4620      	mov	r0, r4
    5264:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    5266:	4620      	mov	r0, r4
    5268:	47a8      	blx	r5
    526a:	2800      	cmp	r0, #0
    526c:	d0fb      	beq.n	5266 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    526e:	3601      	adds	r6, #1
    5270:	4546      	cmp	r6, r8
    5272:	d3f4      	bcc.n	525e <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    5274:	4d08      	ldr	r5, [pc, #32]	; (5298 <usart_sync_write+0x6c>)
    5276:	4620      	mov	r0, r4
    5278:	47a8      	blx	r5
    527a:	2800      	cmp	r0, #0
    527c:	d0fb      	beq.n	5276 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    527e:	4630      	mov	r0, r6
    5280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    5284:	2000      	movs	r0, #0
    5286:	e7db      	b.n	5240 <usart_sync_write+0x14>
    5288:	2000      	movs	r0, #0
    528a:	e7d9      	b.n	5240 <usart_sync_write+0x14>
    528c:	0000d1f0 	.word	0x0000d1f0
    5290:	00005921 	.word	0x00005921
    5294:	00006f81 	.word	0x00006f81
    5298:	00006f8b 	.word	0x00006f8b
    529c:	00006f6d 	.word	0x00006f6d

000052a0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    52a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52a4:	460f      	mov	r7, r1
    52a6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    52a8:	4604      	mov	r4, r0
    52aa:	b1e0      	cbz	r0, 52e6 <usart_sync_read+0x46>
    52ac:	b1e9      	cbz	r1, 52ea <usart_sync_read+0x4a>
    52ae:	1c10      	adds	r0, r2, #0
    52b0:	bf18      	it	ne
    52b2:	2001      	movne	r0, #1
    52b4:	f44f 7286 	mov.w	r2, #268	; 0x10c
    52b8:	490d      	ldr	r1, [pc, #52]	; (52f0 <usart_sync_read+0x50>)
    52ba:	4b0e      	ldr	r3, [pc, #56]	; (52f4 <usart_sync_read+0x54>)
    52bc:	4798      	blx	r3
    52be:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    52c0:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    52c2:	3408      	adds	r4, #8
    52c4:	4d0c      	ldr	r5, [pc, #48]	; (52f8 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    52c6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 52fc <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    52ca:	4620      	mov	r0, r4
    52cc:	47a8      	blx	r5
    52ce:	2800      	cmp	r0, #0
    52d0:	d0fb      	beq.n	52ca <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    52d2:	4620      	mov	r0, r4
    52d4:	47c8      	blx	r9
    52d6:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    52da:	3601      	adds	r6, #1
    52dc:	4546      	cmp	r6, r8
    52de:	d3f4      	bcc.n	52ca <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    52e0:	4630      	mov	r0, r6
    52e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    52e6:	2000      	movs	r0, #0
    52e8:	e7e4      	b.n	52b4 <usart_sync_read+0x14>
    52ea:	2000      	movs	r0, #0
    52ec:	e7e2      	b.n	52b4 <usart_sync_read+0x14>
    52ee:	bf00      	nop
    52f0:	0000d1f0 	.word	0x0000d1f0
    52f4:	00005921 	.word	0x00005921
    52f8:	00006f95 	.word	0x00006f95
    52fc:	00006f79 	.word	0x00006f79

00005300 <usart_sync_init>:
{
    5300:	b538      	push	{r3, r4, r5, lr}
    5302:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    5304:	4604      	mov	r4, r0
    5306:	b198      	cbz	r0, 5330 <usart_sync_init+0x30>
    5308:	1c08      	adds	r0, r1, #0
    530a:	bf18      	it	ne
    530c:	2001      	movne	r0, #1
    530e:	2234      	movs	r2, #52	; 0x34
    5310:	4908      	ldr	r1, [pc, #32]	; (5334 <usart_sync_init+0x34>)
    5312:	4b09      	ldr	r3, [pc, #36]	; (5338 <usart_sync_init+0x38>)
    5314:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    5316:	4629      	mov	r1, r5
    5318:	f104 0008 	add.w	r0, r4, #8
    531c:	4b07      	ldr	r3, [pc, #28]	; (533c <usart_sync_init+0x3c>)
    531e:	4798      	blx	r3
	if (init_status) {
    5320:	4603      	mov	r3, r0
    5322:	b918      	cbnz	r0, 532c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    5324:	4a06      	ldr	r2, [pc, #24]	; (5340 <usart_sync_init+0x40>)
    5326:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    5328:	4a06      	ldr	r2, [pc, #24]	; (5344 <usart_sync_init+0x44>)
    532a:	6022      	str	r2, [r4, #0]
}
    532c:	4618      	mov	r0, r3
    532e:	bd38      	pop	{r3, r4, r5, pc}
    5330:	2000      	movs	r0, #0
    5332:	e7ec      	b.n	530e <usart_sync_init+0xe>
    5334:	0000d1f0 	.word	0x0000d1f0
    5338:	00005921 	.word	0x00005921
    533c:	00006e9d 	.word	0x00006e9d
    5340:	000052a1 	.word	0x000052a1
    5344:	0000522d 	.word	0x0000522d

00005348 <usart_sync_enable>:
{
    5348:	b510      	push	{r4, lr}
	ASSERT(descr);
    534a:	4604      	mov	r4, r0
    534c:	2253      	movs	r2, #83	; 0x53
    534e:	4906      	ldr	r1, [pc, #24]	; (5368 <usart_sync_enable+0x20>)
    5350:	3000      	adds	r0, #0
    5352:	bf18      	it	ne
    5354:	2001      	movne	r0, #1
    5356:	4b05      	ldr	r3, [pc, #20]	; (536c <usart_sync_enable+0x24>)
    5358:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    535a:	f104 0008 	add.w	r0, r4, #8
    535e:	4b04      	ldr	r3, [pc, #16]	; (5370 <usart_sync_enable+0x28>)
    5360:	4798      	blx	r3
}
    5362:	2000      	movs	r0, #0
    5364:	bd10      	pop	{r4, pc}
    5366:	bf00      	nop
    5368:	0000d1f0 	.word	0x0000d1f0
    536c:	00005921 	.word	0x00005921
    5370:	00006f45 	.word	0x00006f45

00005374 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5374:	4b0f      	ldr	r3, [pc, #60]	; (53b4 <_usb_d_find_ep+0x40>)
    5376:	7859      	ldrb	r1, [r3, #1]
    5378:	4288      	cmp	r0, r1
    537a:	d018      	beq.n	53ae <_usb_d_find_ep+0x3a>
{
    537c:	b430      	push	{r4, r5}
    537e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5380:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    5382:	f000 050f 	and.w	r5, r0, #15
    5386:	e007      	b.n	5398 <_usb_d_find_ep+0x24>
    5388:	3301      	adds	r3, #1
    538a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    538c:	2b0d      	cmp	r3, #13
    538e:	d009      	beq.n	53a4 <_usb_d_find_ep+0x30>
    5390:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5392:	7851      	ldrb	r1, [r2, #1]
    5394:	4281      	cmp	r1, r0
    5396:	d007      	beq.n	53a8 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    5398:	7814      	ldrb	r4, [r2, #0]
    539a:	2c00      	cmp	r4, #0
    539c:	d1f4      	bne.n	5388 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    539e:	428d      	cmp	r5, r1
    53a0:	d1f2      	bne.n	5388 <_usb_d_find_ep+0x14>
    53a2:	e001      	b.n	53a8 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    53a4:	f04f 33ff 	mov.w	r3, #4294967295
}
    53a8:	4618      	mov	r0, r3
    53aa:	bc30      	pop	{r4, r5}
    53ac:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    53ae:	2300      	movs	r3, #0
}
    53b0:	4618      	mov	r0, r3
    53b2:	4770      	bx	lr
    53b4:	2000064c 	.word	0x2000064c

000053b8 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    53b8:	2000      	movs	r0, #0
    53ba:	4770      	bx	lr

000053bc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    53bc:	b538      	push	{r3, r4, r5, lr}
    53be:	4604      	mov	r4, r0
    53c0:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    53c2:	4b09      	ldr	r3, [pc, #36]	; (53e8 <usb_d_cb_trans_more+0x2c>)
    53c4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    53c6:	4b09      	ldr	r3, [pc, #36]	; (53ec <usb_d_cb_trans_more+0x30>)
    53c8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    53cc:	789b      	ldrb	r3, [r3, #2]
    53ce:	2b03      	cmp	r3, #3
    53d0:	d001      	beq.n	53d6 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    53d2:	2000      	movs	r0, #0
}
    53d4:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    53d6:	4b05      	ldr	r3, [pc, #20]	; (53ec <usb_d_cb_trans_more+0x30>)
    53d8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    53dc:	6983      	ldr	r3, [r0, #24]
    53de:	4629      	mov	r1, r5
    53e0:	4620      	mov	r0, r4
    53e2:	4798      	blx	r3
    53e4:	bd38      	pop	{r3, r4, r5, pc}
    53e6:	bf00      	nop
    53e8:	00005375 	.word	0x00005375
    53ec:	2000064c 	.word	0x2000064c

000053f0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    53f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53f2:	b085      	sub	sp, #20
    53f4:	4606      	mov	r6, r0
    53f6:	460d      	mov	r5, r1
    53f8:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    53fa:	4b4d      	ldr	r3, [pc, #308]	; (5530 <_usb_d_cb_trans_done+0x140>)
    53fc:	4798      	blx	r3
    53fe:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    5400:	2d00      	cmp	r5, #0
    5402:	d15b      	bne.n	54bc <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5404:	4a4b      	ldr	r2, [pc, #300]	; (5534 <_usb_d_cb_trans_done+0x144>)
    5406:	0143      	lsls	r3, r0, #5
    5408:	18d1      	adds	r1, r2, r3
    540a:	2000      	movs	r0, #0
    540c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    540e:	5cd3      	ldrb	r3, [r2, r3]
    5410:	b173      	cbz	r3, 5430 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5412:	4b48      	ldr	r3, [pc, #288]	; (5534 <_usb_d_cb_trans_done+0x144>)
    5414:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5418:	2201      	movs	r2, #1
    541a:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    541c:	4845      	ldr	r0, [pc, #276]	; (5534 <_usb_d_cb_trans_done+0x144>)
    541e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5422:	69c3      	ldr	r3, [r0, #28]
    5424:	463a      	mov	r2, r7
    5426:	78c1      	ldrb	r1, [r0, #3]
    5428:	4630      	mov	r0, r6
    542a:	4798      	blx	r3
}
    542c:	b005      	add	sp, #20
    542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    5430:	788b      	ldrb	r3, [r1, #2]
    5432:	2b03      	cmp	r3, #3
    5434:	d00b      	beq.n	544e <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5436:	483f      	ldr	r0, [pc, #252]	; (5534 <_usb_d_cb_trans_done+0x144>)
    5438:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    543c:	4614      	mov	r4, r2
    543e:	69d3      	ldr	r3, [r2, #28]
    5440:	320c      	adds	r2, #12
    5442:	2100      	movs	r1, #0
    5444:	7860      	ldrb	r0, [r4, #1]
    5446:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5448:	2302      	movs	r3, #2
    544a:	70a3      	strb	r3, [r4, #2]
    544c:	e7ee      	b.n	542c <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    544e:	460b      	mov	r3, r1
    5450:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5454:	460a      	mov	r2, r1
    5456:	69ce      	ldr	r6, [r1, #28]
    5458:	320c      	adds	r2, #12
    545a:	2101      	movs	r1, #1
    545c:	7858      	ldrb	r0, [r3, #1]
    545e:	47b0      	blx	r6
		if (err) {
    5460:	b1a0      	cbz	r0, 548c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5462:	4b34      	ldr	r3, [pc, #208]	; (5534 <_usb_d_cb_trans_done+0x144>)
    5464:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5468:	2205      	movs	r2, #5
    546a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    546c:	2202      	movs	r2, #2
    546e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5470:	2d00      	cmp	r5, #0
    5472:	db09      	blt.n	5488 <_usb_d_cb_trans_done+0x98>
    5474:	482f      	ldr	r0, [pc, #188]	; (5534 <_usb_d_cb_trans_done+0x144>)
    5476:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    547a:	7840      	ldrb	r0, [r0, #1]
    547c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    5480:	2101      	movs	r1, #1
    5482:	4b2d      	ldr	r3, [pc, #180]	; (5538 <_usb_d_cb_trans_done+0x148>)
    5484:	4798      	blx	r3
    5486:	e7d1      	b.n	542c <_usb_d_cb_trans_done+0x3c>
    5488:	7858      	ldrb	r0, [r3, #1]
    548a:	e7f9      	b.n	5480 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    548c:	4829      	ldr	r0, [pc, #164]	; (5534 <_usb_d_cb_trans_done+0x144>)
    548e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5492:	2304      	movs	r3, #4
    5494:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    5496:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    5498:	2200      	movs	r2, #0
    549a:	9201      	str	r2, [sp, #4]
    549c:	9202      	str	r2, [sp, #8]
    549e:	4295      	cmp	r5, r2
    54a0:	bfac      	ite	ge
    54a2:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    54a6:	f003 030f 	andlt.w	r3, r3, #15
    54aa:	f88d 300c 	strb.w	r3, [sp, #12]
    54ae:	2301      	movs	r3, #1
    54b0:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    54b4:	a801      	add	r0, sp, #4
    54b6:	4b21      	ldr	r3, [pc, #132]	; (553c <_usb_d_cb_trans_done+0x14c>)
    54b8:	4798      	blx	r3
    54ba:	e7b7      	b.n	542c <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    54bc:	2d01      	cmp	r5, #1
    54be:	d00a      	beq.n	54d6 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    54c0:	2d02      	cmp	r5, #2
    54c2:	d01c      	beq.n	54fe <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    54c4:	2d03      	cmp	r5, #3
    54c6:	d02a      	beq.n	551e <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    54c8:	4b1a      	ldr	r3, [pc, #104]	; (5534 <_usb_d_cb_trans_done+0x144>)
    54ca:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    54ce:	2206      	movs	r2, #6
    54d0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    54d2:	70da      	strb	r2, [r3, #3]
    54d4:	e7a2      	b.n	541c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    54d6:	4a17      	ldr	r2, [pc, #92]	; (5534 <_usb_d_cb_trans_done+0x144>)
    54d8:	0143      	lsls	r3, r0, #5
    54da:	18d1      	adds	r1, r2, r3
    54dc:	2002      	movs	r0, #2
    54de:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    54e0:	5cd3      	ldrb	r3, [r2, r3]
    54e2:	b12b      	cbz	r3, 54f0 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    54e4:	4b13      	ldr	r3, [pc, #76]	; (5534 <_usb_d_cb_trans_done+0x144>)
    54e6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    54ea:	2205      	movs	r2, #5
    54ec:	709a      	strb	r2, [r3, #2]
    54ee:	e795      	b.n	541c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    54f0:	460b      	mov	r3, r1
    54f2:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    54f4:	2100      	movs	r1, #0
    54f6:	4630      	mov	r0, r6
    54f8:	4b0f      	ldr	r3, [pc, #60]	; (5538 <_usb_d_cb_trans_done+0x148>)
    54fa:	4798      	blx	r3
    54fc:	e78e      	b.n	541c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    54fe:	4a0d      	ldr	r2, [pc, #52]	; (5534 <_usb_d_cb_trans_done+0x144>)
    5500:	0143      	lsls	r3, r0, #5
    5502:	18d1      	adds	r1, r2, r3
    5504:	2004      	movs	r0, #4
    5506:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5508:	5cd3      	ldrb	r3, [r2, r3]
    550a:	b12b      	cbz	r3, 5518 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    550c:	4b09      	ldr	r3, [pc, #36]	; (5534 <_usb_d_cb_trans_done+0x144>)
    550e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5512:	2201      	movs	r2, #1
    5514:	709a      	strb	r2, [r3, #2]
    5516:	e781      	b.n	541c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5518:	2302      	movs	r3, #2
    551a:	708b      	strb	r3, [r1, #2]
			return;
    551c:	e786      	b.n	542c <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    551e:	4b05      	ldr	r3, [pc, #20]	; (5534 <_usb_d_cb_trans_done+0x144>)
    5520:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5524:	2200      	movs	r2, #0
    5526:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5528:	2205      	movs	r2, #5
    552a:	70da      	strb	r2, [r3, #3]
    552c:	e776      	b.n	541c <_usb_d_cb_trans_done+0x2c>
    552e:	bf00      	nop
    5530:	00005375 	.word	0x00005375
    5534:	2000064c 	.word	0x2000064c
    5538:	00008eed 	.word	0x00008eed
    553c:	00009095 	.word	0x00009095

00005540 <usb_d_cb_trans_setup>:
{
    5540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5544:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5546:	4b1c      	ldr	r3, [pc, #112]	; (55b8 <usb_d_cb_trans_setup+0x78>)
    5548:	4798      	blx	r3
    554a:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    554c:	4c1b      	ldr	r4, [pc, #108]	; (55bc <usb_d_cb_trans_setup+0x7c>)
    554e:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    5552:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5554:	4621      	mov	r1, r4
    5556:	4628      	mov	r0, r5
    5558:	4b19      	ldr	r3, [pc, #100]	; (55c0 <usb_d_cb_trans_setup+0x80>)
    555a:	4798      	blx	r3
	if (n != 8) {
    555c:	b2c0      	uxtb	r0, r0
    555e:	2808      	cmp	r0, #8
    5560:	d009      	beq.n	5576 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5562:	2101      	movs	r1, #1
    5564:	4628      	mov	r0, r5
    5566:	4c17      	ldr	r4, [pc, #92]	; (55c4 <usb_d_cb_trans_setup+0x84>)
    5568:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    556a:	2101      	movs	r1, #1
    556c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    5570:	47a0      	blx	r4
		return;
    5572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5576:	2100      	movs	r1, #0
    5578:	4628      	mov	r0, r5
    557a:	4f12      	ldr	r7, [pc, #72]	; (55c4 <usb_d_cb_trans_setup+0x84>)
    557c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    557e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    5582:	2100      	movs	r1, #0
    5584:	4640      	mov	r0, r8
    5586:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5588:	4b0c      	ldr	r3, [pc, #48]	; (55bc <usb_d_cb_trans_setup+0x7c>)
    558a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    558e:	2201      	movs	r2, #1
    5590:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5592:	695b      	ldr	r3, [r3, #20]
    5594:	4621      	mov	r1, r4
    5596:	4628      	mov	r0, r5
    5598:	4798      	blx	r3
    559a:	b108      	cbz	r0, 55a0 <usb_d_cb_trans_setup+0x60>
    559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    55a0:	4b06      	ldr	r3, [pc, #24]	; (55bc <usb_d_cb_trans_setup+0x7c>)
    55a2:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    55a6:	2305      	movs	r3, #5
    55a8:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    55aa:	2101      	movs	r1, #1
    55ac:	4628      	mov	r0, r5
    55ae:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    55b0:	2101      	movs	r1, #1
    55b2:	4640      	mov	r0, r8
    55b4:	47b8      	blx	r7
    55b6:	e7f1      	b.n	559c <usb_d_cb_trans_setup+0x5c>
    55b8:	00005375 	.word	0x00005375
    55bc:	2000064c 	.word	0x2000064c
    55c0:	00009035 	.word	0x00009035
    55c4:	00008eed 	.word	0x00008eed

000055c8 <usb_d_init>:

int32_t usb_d_init(void)
{
    55c8:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    55ca:	4b11      	ldr	r3, [pc, #68]	; (5610 <usb_d_init+0x48>)
    55cc:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    55ce:	2800      	cmp	r0, #0
    55d0:	db1d      	blt.n	560e <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    55d2:	4c10      	ldr	r4, [pc, #64]	; (5614 <usb_d_init+0x4c>)
    55d4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    55d8:	2100      	movs	r1, #0
    55da:	4620      	mov	r0, r4
    55dc:	4b0e      	ldr	r3, [pc, #56]	; (5618 <usb_d_init+0x50>)
    55de:	4798      	blx	r3
    55e0:	4623      	mov	r3, r4
    55e2:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    55e6:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    55e8:	4a0c      	ldr	r2, [pc, #48]	; (561c <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    55ea:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    55ec:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    55ee:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    55f0:	61da      	str	r2, [r3, #28]
    55f2:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    55f4:	4283      	cmp	r3, r0
    55f6:	d1f8      	bne.n	55ea <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    55f8:	4909      	ldr	r1, [pc, #36]	; (5620 <usb_d_init+0x58>)
    55fa:	2000      	movs	r0, #0
    55fc:	4c09      	ldr	r4, [pc, #36]	; (5624 <usb_d_init+0x5c>)
    55fe:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5600:	4909      	ldr	r1, [pc, #36]	; (5628 <usb_d_init+0x60>)
    5602:	2001      	movs	r0, #1
    5604:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5606:	4909      	ldr	r1, [pc, #36]	; (562c <usb_d_init+0x64>)
    5608:	2002      	movs	r0, #2
    560a:	47a0      	blx	r4
	return ERR_NONE;
    560c:	2000      	movs	r0, #0
}
    560e:	bd10      	pop	{r4, pc}
    5610:	000088b9 	.word	0x000088b9
    5614:	2000064c 	.word	0x2000064c
    5618:	0000bae3 	.word	0x0000bae3
    561c:	000053b9 	.word	0x000053b9
    5620:	00005541 	.word	0x00005541
    5624:	0000929d 	.word	0x0000929d
    5628:	000053bd 	.word	0x000053bd
    562c:	000053f1 	.word	0x000053f1

00005630 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5630:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5632:	4b01      	ldr	r3, [pc, #4]	; (5638 <usb_d_register_callback+0x8>)
    5634:	4798      	blx	r3
    5636:	bd08      	pop	{r3, pc}
    5638:	00009275 	.word	0x00009275

0000563c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    563c:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    563e:	4b01      	ldr	r3, [pc, #4]	; (5644 <usb_d_enable+0x8>)
    5640:	4798      	blx	r3
}
    5642:	bd08      	pop	{r3, pc}
    5644:	000089c1 	.word	0x000089c1

00005648 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5648:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    564a:	4b01      	ldr	r3, [pc, #4]	; (5650 <usb_d_attach+0x8>)
    564c:	4798      	blx	r3
    564e:	bd08      	pop	{r3, pc}
    5650:	00008a2d 	.word	0x00008a2d

00005654 <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    5654:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    5656:	4b01      	ldr	r3, [pc, #4]	; (565c <usb_d_get_frame_num+0x8>)
    5658:	4798      	blx	r3
}
    565a:	bd08      	pop	{r3, pc}
    565c:	00008a4b 	.word	0x00008a4b

00005660 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5660:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    5662:	4b01      	ldr	r3, [pc, #4]	; (5668 <usb_d_set_address+0x8>)
    5664:	4798      	blx	r3
    5666:	bd08      	pop	{r3, pc}
    5668:	00008a3f 	.word	0x00008a3f

0000566c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    566e:	4606      	mov	r6, r0
    5670:	460c      	mov	r4, r1
    5672:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5674:	4b0f      	ldr	r3, [pc, #60]	; (56b4 <usb_d_ep_init+0x48>)
    5676:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    5678:	2800      	cmp	r0, #0
    567a:	da14      	bge.n	56a6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    567c:	20ff      	movs	r0, #255	; 0xff
    567e:	4b0d      	ldr	r3, [pc, #52]	; (56b4 <usb_d_ep_init+0x48>)
    5680:	4798      	blx	r3
		if (ep_index < 0) {
    5682:	1e05      	subs	r5, r0, #0
    5684:	db12      	blt.n	56ac <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5686:	463a      	mov	r2, r7
    5688:	4621      	mov	r1, r4
    568a:	4630      	mov	r0, r6
    568c:	4b0a      	ldr	r3, [pc, #40]	; (56b8 <usb_d_ep_init+0x4c>)
    568e:	4798      	blx	r3
	if (rc < 0) {
    5690:	2800      	cmp	r0, #0
    5692:	db0d      	blt.n	56b0 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    5694:	4b09      	ldr	r3, [pc, #36]	; (56bc <usb_d_ep_init+0x50>)
    5696:	0168      	lsls	r0, r5, #5
    5698:	181a      	adds	r2, r3, r0
    569a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    569c:	f004 0403 	and.w	r4, r4, #3
    56a0:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    56a2:	2000      	movs	r0, #0
    56a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    56a6:	f06f 0013 	mvn.w	r0, #19
    56aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    56ac:	f06f 0014 	mvn.w	r0, #20
}
    56b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56b2:	bf00      	nop
    56b4:	00005375 	.word	0x00005375
    56b8:	00008a59 	.word	0x00008a59
    56bc:	2000064c 	.word	0x2000064c

000056c0 <usb_d_ep0_init>:
{
    56c0:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    56c2:	4602      	mov	r2, r0
    56c4:	2100      	movs	r1, #0
    56c6:	4608      	mov	r0, r1
    56c8:	4b01      	ldr	r3, [pc, #4]	; (56d0 <usb_d_ep0_init+0x10>)
    56ca:	4798      	blx	r3
}
    56cc:	bd08      	pop	{r3, pc}
    56ce:	bf00      	nop
    56d0:	0000566d 	.word	0x0000566d

000056d4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    56d4:	b538      	push	{r3, r4, r5, lr}
    56d6:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    56d8:	4b06      	ldr	r3, [pc, #24]	; (56f4 <usb_d_ep_deinit+0x20>)
    56da:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    56dc:	1e04      	subs	r4, r0, #0
    56de:	db07      	blt.n	56f0 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    56e0:	4628      	mov	r0, r5
    56e2:	4b05      	ldr	r3, [pc, #20]	; (56f8 <usb_d_ep_deinit+0x24>)
    56e4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    56e6:	4805      	ldr	r0, [pc, #20]	; (56fc <usb_d_ep_deinit+0x28>)
    56e8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    56ec:	23ff      	movs	r3, #255	; 0xff
    56ee:	7043      	strb	r3, [r0, #1]
    56f0:	bd38      	pop	{r3, r4, r5, pc}
    56f2:	bf00      	nop
    56f4:	00005375 	.word	0x00005375
    56f8:	00008b71 	.word	0x00008b71
    56fc:	2000064c 	.word	0x2000064c

00005700 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5700:	b538      	push	{r3, r4, r5, lr}
    5702:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5704:	4b0e      	ldr	r3, [pc, #56]	; (5740 <usb_d_ep_enable+0x40>)
    5706:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5708:	1e04      	subs	r4, r0, #0
    570a:	db16      	blt.n	573a <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    570c:	0163      	lsls	r3, r4, #5
    570e:	4a0d      	ldr	r2, [pc, #52]	; (5744 <usb_d_ep_enable+0x44>)
    5710:	5cd3      	ldrb	r3, [r2, r3]
    5712:	2b00      	cmp	r3, #0
    5714:	bf0c      	ite	eq
    5716:	2202      	moveq	r2, #2
    5718:	2201      	movne	r2, #1
    571a:	4b0a      	ldr	r3, [pc, #40]	; (5744 <usb_d_ep_enable+0x44>)
    571c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5720:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5722:	4628      	mov	r0, r5
    5724:	4b08      	ldr	r3, [pc, #32]	; (5748 <usb_d_ep_enable+0x48>)
    5726:	4798      	blx	r3
	if (rc < 0) {
    5728:	2800      	cmp	r0, #0
    572a:	db00      	blt.n	572e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    572c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    572e:	4b05      	ldr	r3, [pc, #20]	; (5744 <usb_d_ep_enable+0x44>)
    5730:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5734:	2300      	movs	r3, #0
    5736:	70a3      	strb	r3, [r4, #2]
    5738:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    573a:	f06f 0011 	mvn.w	r0, #17
    573e:	e7f5      	b.n	572c <usb_d_ep_enable+0x2c>
    5740:	00005375 	.word	0x00005375
    5744:	2000064c 	.word	0x2000064c
    5748:	00008c35 	.word	0x00008c35

0000574c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5750:	b086      	sub	sp, #24
    5752:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5754:	7a07      	ldrb	r7, [r0, #8]
    5756:	4638      	mov	r0, r7
    5758:	4b3f      	ldr	r3, [pc, #252]	; (5858 <usb_d_ep_transfer+0x10c>)
    575a:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    575c:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    575e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5762:	1e06      	subs	r6, r0, #0
    5764:	db72      	blt.n	584c <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    5766:	a804      	add	r0, sp, #16
    5768:	4b3c      	ldr	r3, [pc, #240]	; (585c <usb_d_ep_transfer+0x110>)
    576a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    576c:	4b3c      	ldr	r3, [pc, #240]	; (5860 <usb_d_ep_transfer+0x114>)
    576e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5772:	789b      	ldrb	r3, [r3, #2]
    5774:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    5778:	f89d 3017 	ldrb.w	r3, [sp, #23]
    577c:	b2db      	uxtb	r3, r3
    577e:	2b01      	cmp	r3, #1
    5780:	d011      	beq.n	57a6 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    5782:	a804      	add	r0, sp, #16
    5784:	4b37      	ldr	r3, [pc, #220]	; (5864 <usb_d_ep_transfer+0x118>)
    5786:	4798      	blx	r3
		switch (state) {
    5788:	f89d 3017 	ldrb.w	r3, [sp, #23]
    578c:	b2db      	uxtb	r3, r3
    578e:	2b05      	cmp	r3, #5
    5790:	d05f      	beq.n	5852 <usb_d_ep_transfer+0x106>
    5792:	2b06      	cmp	r3, #6
    5794:	d023      	beq.n	57de <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    5796:	2b00      	cmp	r3, #0
    5798:	bf0c      	ite	eq
    579a:	f06f 0012 	mvneq.w	r0, #18
    579e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    57a0:	b006      	add	sp, #24
    57a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    57a6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5860 <usb_d_ep_transfer+0x114>
    57aa:	ea4f 1946 	mov.w	r9, r6, lsl #5
    57ae:	eb0a 0309 	add.w	r3, sl, r9
    57b2:	2203      	movs	r2, #3
    57b4:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    57b6:	a804      	add	r0, sp, #16
    57b8:	4b2a      	ldr	r3, [pc, #168]	; (5864 <usb_d_ep_transfer+0x118>)
    57ba:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    57bc:	f81a 3009 	ldrb.w	r3, [sl, r9]
    57c0:	b183      	cbz	r3, 57e4 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    57c2:	7a22      	ldrb	r2, [r4, #8]
    57c4:	3500      	adds	r5, #0
    57c6:	bf18      	it	ne
    57c8:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    57ca:	6823      	ldr	r3, [r4, #0]
    57cc:	9301      	str	r3, [sp, #4]
    57ce:	f8cd 8008 	str.w	r8, [sp, #8]
    57d2:	f017 0f80 	tst.w	r7, #128	; 0x80
    57d6:	d119      	bne.n	580c <usb_d_ep_transfer+0xc0>
    57d8:	f002 030f 	and.w	r3, r2, #15
    57dc:	e018      	b.n	5810 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    57de:	f06f 000f 	mvn.w	r0, #15
    57e2:	e7dd      	b.n	57a0 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    57e4:	4b1e      	ldr	r3, [pc, #120]	; (5860 <usb_d_ep_transfer+0x114>)
    57e6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    57ea:	7cda      	ldrb	r2, [r3, #19]
    57ec:	7c9d      	ldrb	r5, [r3, #18]
    57ee:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    57f2:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    57f4:	b9a5      	cbnz	r5, 5820 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    57f6:	4b1a      	ldr	r3, [pc, #104]	; (5860 <usb_d_ep_transfer+0x114>)
    57f8:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    57fc:	2304      	movs	r3, #4
    57fe:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5800:	2300      	movs	r3, #0
			zlp                 = true;
    5802:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5804:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5806:	6821      	ldr	r1, [r4, #0]
    5808:	9101      	str	r1, [sp, #4]
    580a:	9302      	str	r3, [sp, #8]
    580c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5810:	f88d 300c 	strb.w	r3, [sp, #12]
    5814:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5818:	a801      	add	r0, sp, #4
    581a:	4b13      	ldr	r3, [pc, #76]	; (5868 <usb_d_ep_transfer+0x11c>)
    581c:	4798      	blx	r3
	return rc;
    581e:	e7bf      	b.n	57a0 <usb_d_ep_transfer+0x54>
    5820:	4643      	mov	r3, r8
    5822:	45a8      	cmp	r8, r5
    5824:	bf28      	it	cs
    5826:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5828:	4a0d      	ldr	r2, [pc, #52]	; (5860 <usb_d_ep_transfer+0x114>)
    582a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    582e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5832:	2a00      	cmp	r2, #0
    5834:	db05      	blt.n	5842 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5836:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5838:	6821      	ldr	r1, [r4, #0]
    583a:	9101      	str	r1, [sp, #4]
    583c:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    583e:	2500      	movs	r5, #0
    5840:	e7ca      	b.n	57d8 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5842:	429d      	cmp	r5, r3
    5844:	bf94      	ite	ls
    5846:	2500      	movls	r5, #0
    5848:	2501      	movhi	r5, #1
    584a:	e7db      	b.n	5804 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    584c:	f06f 0011 	mvn.w	r0, #17
    5850:	e7a6      	b.n	57a0 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    5852:	2002      	movs	r0, #2
    5854:	e7a4      	b.n	57a0 <usb_d_ep_transfer+0x54>
    5856:	bf00      	nop
    5858:	00005375 	.word	0x00005375
    585c:	00004589 	.word	0x00004589
    5860:	2000064c 	.word	0x2000064c
    5864:	00004597 	.word	0x00004597
    5868:	00009095 	.word	0x00009095

0000586c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    586c:	b538      	push	{r3, r4, r5, lr}
    586e:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5870:	b141      	cbz	r1, 5884 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    5872:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5874:	bf0c      	ite	eq
    5876:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5878:	2102      	movne	r1, #2
    587a:	4b13      	ldr	r3, [pc, #76]	; (58c8 <usb_d_ep_halt+0x5c>)
    587c:	4798      	blx	r3
    587e:	4603      	mov	r3, r0
	}
}
    5880:	4618      	mov	r0, r3
    5882:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    5884:	4b11      	ldr	r3, [pc, #68]	; (58cc <usb_d_ep_halt+0x60>)
    5886:	4798      	blx	r3
	if (ep_index < 0) {
    5888:	1e05      	subs	r5, r0, #0
    588a:	db19      	blt.n	58c0 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    588c:	2102      	movs	r1, #2
    588e:	4620      	mov	r0, r4
    5890:	4b0d      	ldr	r3, [pc, #52]	; (58c8 <usb_d_ep_halt+0x5c>)
    5892:	4798      	blx	r3
    5894:	4603      	mov	r3, r0
    5896:	2800      	cmp	r0, #0
    5898:	d0f2      	beq.n	5880 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    589a:	2100      	movs	r1, #0
    589c:	4620      	mov	r0, r4
    589e:	4b0a      	ldr	r3, [pc, #40]	; (58c8 <usb_d_ep_halt+0x5c>)
    58a0:	4798      	blx	r3
		if (rc < 0) {
    58a2:	1e03      	subs	r3, r0, #0
    58a4:	dbec      	blt.n	5880 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    58a6:	4b0a      	ldr	r3, [pc, #40]	; (58d0 <usb_d_ep_halt+0x64>)
    58a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    58ac:	2201      	movs	r2, #1
    58ae:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    58b0:	2103      	movs	r1, #3
    58b2:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    58b4:	69db      	ldr	r3, [r3, #28]
    58b6:	2200      	movs	r2, #0
    58b8:	4620      	mov	r0, r4
    58ba:	4798      	blx	r3
	return ERR_NONE;
    58bc:	2300      	movs	r3, #0
    58be:	e7df      	b.n	5880 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    58c0:	f06f 0311 	mvn.w	r3, #17
    58c4:	e7dc      	b.n	5880 <usb_d_ep_halt+0x14>
    58c6:	bf00      	nop
    58c8:	00008eed 	.word	0x00008eed
    58cc:	00005375 	.word	0x00005375
    58d0:	2000064c 	.word	0x2000064c

000058d4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    58d4:	b538      	push	{r3, r4, r5, lr}
    58d6:	460d      	mov	r5, r1
    58d8:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    58da:	4b0e      	ldr	r3, [pc, #56]	; (5914 <usb_d_ep_register_callback+0x40>)
    58dc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    58de:	4b0e      	ldr	r3, [pc, #56]	; (5918 <usb_d_ep_register_callback+0x44>)
    58e0:	2c00      	cmp	r4, #0
    58e2:	bf08      	it	eq
    58e4:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    58e6:	2800      	cmp	r0, #0
    58e8:	db13      	blt.n	5912 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    58ea:	2d01      	cmp	r5, #1
    58ec:	d008      	beq.n	5900 <usb_d_ep_register_callback+0x2c>
    58ee:	b115      	cbz	r5, 58f6 <usb_d_ep_register_callback+0x22>
    58f0:	2d02      	cmp	r5, #2
    58f2:	d00a      	beq.n	590a <usb_d_ep_register_callback+0x36>
    58f4:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    58f6:	4b09      	ldr	r3, [pc, #36]	; (591c <usb_d_ep_register_callback+0x48>)
    58f8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    58fc:	6144      	str	r4, [r0, #20]
		break;
    58fe:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5900:	4b06      	ldr	r3, [pc, #24]	; (591c <usb_d_ep_register_callback+0x48>)
    5902:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5906:	6184      	str	r4, [r0, #24]
		break;
    5908:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    590a:	4b04      	ldr	r3, [pc, #16]	; (591c <usb_d_ep_register_callback+0x48>)
    590c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5910:	61c4      	str	r4, [r0, #28]
    5912:	bd38      	pop	{r3, r4, r5, pc}
    5914:	00005375 	.word	0x00005375
    5918:	000053b9 	.word	0x000053b9
    591c:	2000064c 	.word	0x2000064c

00005920 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5920:	b900      	cbnz	r0, 5924 <assert+0x4>
		__asm("BKPT #0");
    5922:	be00      	bkpt	0x0000
    5924:	4770      	bx	lr

00005926 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5926:	6803      	ldr	r3, [r0, #0]
    5928:	b14b      	cbz	r3, 593e <is_list_element+0x18>
		if (it == element) {
    592a:	428b      	cmp	r3, r1
    592c:	d009      	beq.n	5942 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	b11b      	cbz	r3, 593a <is_list_element+0x14>
		if (it == element) {
    5932:	4299      	cmp	r1, r3
    5934:	d1fb      	bne.n	592e <is_list_element+0x8>
			return true;
    5936:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5938:	4770      	bx	lr
	return false;
    593a:	2000      	movs	r0, #0
    593c:	4770      	bx	lr
    593e:	2000      	movs	r0, #0
    5940:	4770      	bx	lr
			return true;
    5942:	2001      	movs	r0, #1
    5944:	4770      	bx	lr
	...

00005948 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5948:	b538      	push	{r3, r4, r5, lr}
    594a:	4604      	mov	r4, r0
    594c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    594e:	4b06      	ldr	r3, [pc, #24]	; (5968 <list_insert_as_head+0x20>)
    5950:	4798      	blx	r3
    5952:	f080 0001 	eor.w	r0, r0, #1
    5956:	2239      	movs	r2, #57	; 0x39
    5958:	4904      	ldr	r1, [pc, #16]	; (596c <list_insert_as_head+0x24>)
    595a:	b2c0      	uxtb	r0, r0
    595c:	4b04      	ldr	r3, [pc, #16]	; (5970 <list_insert_as_head+0x28>)
    595e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5960:	6823      	ldr	r3, [r4, #0]
    5962:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5964:	6025      	str	r5, [r4, #0]
    5966:	bd38      	pop	{r3, r4, r5, pc}
    5968:	00005927 	.word	0x00005927
    596c:	0000d20c 	.word	0x0000d20c
    5970:	00005921 	.word	0x00005921

00005974 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5974:	6803      	ldr	r3, [r0, #0]
    5976:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5978:	6001      	str	r1, [r0, #0]
    597a:	4770      	bx	lr

0000597c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    597c:	b570      	push	{r4, r5, r6, lr}
    597e:	4605      	mov	r5, r0
    5980:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    5982:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    5984:	4b0a      	ldr	r3, [pc, #40]	; (59b0 <list_insert_at_end+0x34>)
    5986:	4798      	blx	r3
    5988:	f080 0001 	eor.w	r0, r0, #1
    598c:	224f      	movs	r2, #79	; 0x4f
    598e:	4909      	ldr	r1, [pc, #36]	; (59b4 <list_insert_at_end+0x38>)
    5990:	b2c0      	uxtb	r0, r0
    5992:	4b09      	ldr	r3, [pc, #36]	; (59b8 <list_insert_at_end+0x3c>)
    5994:	4798      	blx	r3

	if (!list->head) {
    5996:	682b      	ldr	r3, [r5, #0]
    5998:	b91b      	cbnz	r3, 59a2 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    599a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    599c:	6033      	str	r3, [r6, #0]
		return;
    599e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    59a0:	461c      	mov	r4, r3
	while (it->next) {
    59a2:	6823      	ldr	r3, [r4, #0]
    59a4:	2b00      	cmp	r3, #0
    59a6:	d1fb      	bne.n	59a0 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    59a8:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    59aa:	6033      	str	r3, [r6, #0]
    59ac:	bd70      	pop	{r4, r5, r6, pc}
    59ae:	bf00      	nop
    59b0:	00005927 	.word	0x00005927
    59b4:	0000d20c 	.word	0x0000d20c
    59b8:	00005921 	.word	0x00005921

000059bc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    59bc:	6803      	ldr	r3, [r0, #0]
    59be:	b10b      	cbz	r3, 59c4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    59c0:	681a      	ldr	r2, [r3, #0]
    59c2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    59c4:	4618      	mov	r0, r3
    59c6:	4770      	bx	lr

000059c8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    59c8:	b570      	push	{r4, r5, r6, lr}
    59ca:	460e      	mov	r6, r1
    59cc:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    59ce:	4604      	mov	r4, r0
    59d0:	b178      	cbz	r0, 59f2 <ringbuffer_init+0x2a>
    59d2:	b181      	cbz	r1, 59f6 <ringbuffer_init+0x2e>
    59d4:	b1a2      	cbz	r2, 5a00 <ringbuffer_init+0x38>
    59d6:	2001      	movs	r0, #1
    59d8:	2228      	movs	r2, #40	; 0x28
    59da:	490d      	ldr	r1, [pc, #52]	; (5a10 <ringbuffer_init+0x48>)
    59dc:	4b0d      	ldr	r3, [pc, #52]	; (5a14 <ringbuffer_init+0x4c>)
    59de:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    59e0:	1e6b      	subs	r3, r5, #1
    59e2:	421d      	tst	r5, r3
    59e4:	d109      	bne.n	59fa <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    59e6:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    59e8:	2000      	movs	r0, #0
    59ea:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    59ec:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    59ee:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    59f0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    59f2:	2000      	movs	r0, #0
    59f4:	e7f0      	b.n	59d8 <ringbuffer_init+0x10>
    59f6:	2000      	movs	r0, #0
    59f8:	e7ee      	b.n	59d8 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    59fa:	f06f 000c 	mvn.w	r0, #12
    59fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5a00:	2228      	movs	r2, #40	; 0x28
    5a02:	4903      	ldr	r1, [pc, #12]	; (5a10 <ringbuffer_init+0x48>)
    5a04:	2000      	movs	r0, #0
    5a06:	4b03      	ldr	r3, [pc, #12]	; (5a14 <ringbuffer_init+0x4c>)
    5a08:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    5a0a:	1e6b      	subs	r3, r5, #1
    5a0c:	e7eb      	b.n	59e6 <ringbuffer_init+0x1e>
    5a0e:	bf00      	nop
    5a10:	0000d22c 	.word	0x0000d22c
    5a14:	00005921 	.word	0x00005921

00005a18 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5a18:	b538      	push	{r3, r4, r5, lr}
    5a1a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5a1c:	4604      	mov	r4, r0
    5a1e:	b1a0      	cbz	r0, 5a4a <ringbuffer_get+0x32>
    5a20:	1c08      	adds	r0, r1, #0
    5a22:	bf18      	it	ne
    5a24:	2001      	movne	r0, #1
    5a26:	2240      	movs	r2, #64	; 0x40
    5a28:	490a      	ldr	r1, [pc, #40]	; (5a54 <ringbuffer_get+0x3c>)
    5a2a:	4b0b      	ldr	r3, [pc, #44]	; (5a58 <ringbuffer_get+0x40>)
    5a2c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5a2e:	68a3      	ldr	r3, [r4, #8]
    5a30:	68e2      	ldr	r2, [r4, #12]
    5a32:	429a      	cmp	r2, r3
    5a34:	d00b      	beq.n	5a4e <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    5a36:	6862      	ldr	r2, [r4, #4]
    5a38:	4013      	ands	r3, r2
    5a3a:	6822      	ldr	r2, [r4, #0]
    5a3c:	5cd3      	ldrb	r3, [r2, r3]
    5a3e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5a40:	68a3      	ldr	r3, [r4, #8]
    5a42:	3301      	adds	r3, #1
    5a44:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    5a46:	2000      	movs	r0, #0
    5a48:	bd38      	pop	{r3, r4, r5, pc}
    5a4a:	2000      	movs	r0, #0
    5a4c:	e7eb      	b.n	5a26 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5a4e:	f06f 0009 	mvn.w	r0, #9
}
    5a52:	bd38      	pop	{r3, r4, r5, pc}
    5a54:	0000d22c 	.word	0x0000d22c
    5a58:	00005921 	.word	0x00005921

00005a5c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5a5c:	b538      	push	{r3, r4, r5, lr}
    5a5e:	460d      	mov	r5, r1
	ASSERT(rb);
    5a60:	4604      	mov	r4, r0
    5a62:	2251      	movs	r2, #81	; 0x51
    5a64:	490b      	ldr	r1, [pc, #44]	; (5a94 <ringbuffer_put+0x38>)
    5a66:	3000      	adds	r0, #0
    5a68:	bf18      	it	ne
    5a6a:	2001      	movne	r0, #1
    5a6c:	4b0a      	ldr	r3, [pc, #40]	; (5a98 <ringbuffer_put+0x3c>)
    5a6e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5a70:	68e3      	ldr	r3, [r4, #12]
    5a72:	6862      	ldr	r2, [r4, #4]
    5a74:	4013      	ands	r3, r2
    5a76:	6822      	ldr	r2, [r4, #0]
    5a78:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    5a7a:	68e3      	ldr	r3, [r4, #12]
    5a7c:	6861      	ldr	r1, [r4, #4]
    5a7e:	68a2      	ldr	r2, [r4, #8]
    5a80:	1a9a      	subs	r2, r3, r2
    5a82:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    5a84:	bf84      	itt	hi
    5a86:	1a59      	subhi	r1, r3, r1
    5a88:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    5a8a:	3301      	adds	r3, #1
    5a8c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    5a8e:	2000      	movs	r0, #0
    5a90:	bd38      	pop	{r3, r4, r5, pc}
    5a92:	bf00      	nop
    5a94:	0000d22c 	.word	0x0000d22c
    5a98:	00005921 	.word	0x00005921

00005a9c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    5a9c:	b510      	push	{r4, lr}
	ASSERT(rb);
    5a9e:	4604      	mov	r4, r0
    5aa0:	2267      	movs	r2, #103	; 0x67
    5aa2:	4905      	ldr	r1, [pc, #20]	; (5ab8 <ringbuffer_num+0x1c>)
    5aa4:	3000      	adds	r0, #0
    5aa6:	bf18      	it	ne
    5aa8:	2001      	movne	r0, #1
    5aaa:	4b04      	ldr	r3, [pc, #16]	; (5abc <ringbuffer_num+0x20>)
    5aac:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    5aae:	68e0      	ldr	r0, [r4, #12]
    5ab0:	68a3      	ldr	r3, [r4, #8]
}
    5ab2:	1ac0      	subs	r0, r0, r3
    5ab4:	bd10      	pop	{r4, pc}
    5ab6:	bf00      	nop
    5ab8:	0000d22c 	.word	0x0000d22c
    5abc:	00005921 	.word	0x00005921

00005ac0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    5ac0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    5ac2:	4a06      	ldr	r2, [pc, #24]	; (5adc <_sbrk+0x1c>)
    5ac4:	6812      	ldr	r2, [r2, #0]
    5ac6:	b122      	cbz	r2, 5ad2 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5ac8:	4a04      	ldr	r2, [pc, #16]	; (5adc <_sbrk+0x1c>)
    5aca:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5acc:	4403      	add	r3, r0
    5ace:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    5ad0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5ad2:	4903      	ldr	r1, [pc, #12]	; (5ae0 <_sbrk+0x20>)
    5ad4:	4a01      	ldr	r2, [pc, #4]	; (5adc <_sbrk+0x1c>)
    5ad6:	6011      	str	r1, [r2, #0]
    5ad8:	e7f6      	b.n	5ac8 <_sbrk+0x8>
    5ada:	bf00      	nop
    5adc:	200007ec 	.word	0x200007ec
    5ae0:	20013da0 	.word	0x20013da0

00005ae4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    5ae4:	f04f 30ff 	mov.w	r0, #4294967295
    5ae8:	4770      	bx	lr

00005aea <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    5aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5aee:	604b      	str	r3, [r1, #4]

	return 0;
}
    5af0:	2000      	movs	r0, #0
    5af2:	4770      	bx	lr

00005af4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    5af4:	2001      	movs	r0, #1
    5af6:	4770      	bx	lr

00005af8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    5af8:	2000      	movs	r0, #0
    5afa:	4770      	bx	lr

00005afc <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5afc:	6940      	ldr	r0, [r0, #20]
    5afe:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5b02:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5b06:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5b08:	0040      	lsls	r0, r0, #1
    5b0a:	3076      	adds	r0, #118	; 0x76
}
    5b0c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5b10:	4770      	bx	lr
	...

00005b14 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    5b14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    5b16:	f013 0f01 	tst.w	r3, #1
    5b1a:	d11b      	bne.n	5b54 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b1e:	f013 0f03 	tst.w	r3, #3
    5b22:	d1fb      	bne.n	5b1c <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    5b24:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    5b26:	f013 0f02 	tst.w	r3, #2
    5b2a:	d00d      	beq.n	5b48 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5b2c:	8803      	ldrh	r3, [r0, #0]
    5b2e:	f023 0302 	bic.w	r3, r3, #2
    5b32:	041b      	lsls	r3, r3, #16
    5b34:	0c1b      	lsrs	r3, r3, #16
    5b36:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b38:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b3a:	f013 0f03 	tst.w	r3, #3
    5b3e:	d1fb      	bne.n	5b38 <_adc_init+0x24>
    5b40:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b42:	f013 0f02 	tst.w	r3, #2
    5b46:	d1fb      	bne.n	5b40 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5b48:	2301      	movs	r3, #1
    5b4a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b4e:	f013 0f03 	tst.w	r3, #3
    5b52:	d1fb      	bne.n	5b4c <_adc_init+0x38>
    5b54:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b56:	f013 0f01 	tst.w	r3, #1
    5b5a:	d1fb      	bne.n	5b54 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5b5c:	2316      	movs	r3, #22
    5b5e:	4a37      	ldr	r2, [pc, #220]	; (5c3c <_adc_init+0x128>)
    5b60:	fb03 2301 	mla	r3, r3, r1, r2
    5b64:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    5b66:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b68:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5b6e:	2b00      	cmp	r3, #0
    5b70:	d1fa      	bne.n	5b68 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    5b72:	2316      	movs	r3, #22
    5b74:	4a31      	ldr	r2, [pc, #196]	; (5c3c <_adc_init+0x128>)
    5b76:	fb03 2301 	mla	r3, r3, r1, r2
    5b7a:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    5b7c:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5b84:	2b00      	cmp	r3, #0
    5b86:	d1fa      	bne.n	5b7e <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    5b88:	2316      	movs	r3, #22
    5b8a:	4a2c      	ldr	r2, [pc, #176]	; (5c3c <_adc_init+0x128>)
    5b8c:	fb03 2301 	mla	r3, r3, r1, r2
    5b90:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    5b92:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    5b94:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    5b96:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b98:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d1fa      	bne.n	5b98 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    5ba2:	2316      	movs	r3, #22
    5ba4:	4a25      	ldr	r2, [pc, #148]	; (5c3c <_adc_init+0x128>)
    5ba6:	fb03 2301 	mla	r3, r3, r1, r2
    5baa:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    5bac:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5bae:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d1fa      	bne.n	5bae <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    5bb8:	2316      	movs	r3, #22
    5bba:	4a20      	ldr	r2, [pc, #128]	; (5c3c <_adc_init+0x128>)
    5bbc:	fb03 2301 	mla	r3, r3, r1, r2
    5bc0:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    5bc2:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5bc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d1fa      	bne.n	5bc4 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    5bce:	2316      	movs	r3, #22
    5bd0:	4a1a      	ldr	r2, [pc, #104]	; (5c3c <_adc_init+0x128>)
    5bd2:	fb03 2301 	mla	r3, r3, r1, r2
    5bd6:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    5bd8:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5bda:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5bdc:	f013 0f80 	tst.w	r3, #128	; 0x80
    5be0:	d1fb      	bne.n	5bda <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    5be2:	2316      	movs	r3, #22
    5be4:	4a15      	ldr	r2, [pc, #84]	; (5c3c <_adc_init+0x128>)
    5be6:	fb03 2301 	mla	r3, r3, r1, r2
    5bea:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    5bec:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5bee:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5bf0:	f413 7f80 	tst.w	r3, #256	; 0x100
    5bf4:	d1fb      	bne.n	5bee <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    5bf6:	2316      	movs	r3, #22
    5bf8:	4a10      	ldr	r2, [pc, #64]	; (5c3c <_adc_init+0x128>)
    5bfa:	fb03 2301 	mla	r3, r3, r1, r2
    5bfe:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    5c00:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c02:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c04:	f413 7f00 	tst.w	r3, #512	; 0x200
    5c08:	d1fb      	bne.n	5c02 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    5c0a:	2316      	movs	r3, #22
    5c0c:	4a0b      	ldr	r2, [pc, #44]	; (5c3c <_adc_init+0x128>)
    5c0e:	fb03 2301 	mla	r3, r3, r1, r2
    5c12:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    5c14:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c16:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c18:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5c1c:	d1fb      	bne.n	5c16 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    5c1e:	2216      	movs	r2, #22
    5c20:	4b06      	ldr	r3, [pc, #24]	; (5c3c <_adc_init+0x128>)
    5c22:	fb02 3101 	mla	r1, r2, r1, r3
    5c26:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5c28:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    5c2a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    5c2c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c30:	f013 0f03 	tst.w	r3, #3
    5c34:	d1fb      	bne.n	5c2e <_adc_init+0x11a>

	return ERR_NONE;
}
    5c36:	2000      	movs	r0, #0
    5c38:	4770      	bx	lr
    5c3a:	bf00      	nop
    5c3c:	0000d250 	.word	0x0000d250

00005c40 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    5c40:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    5c42:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    5c44:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5c48:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    5c4c:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    5c4e:	f013 0f01 	tst.w	r3, #1
    5c52:	d106      	bne.n	5c62 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    5c54:	f013 0f02 	tst.w	r3, #2
    5c58:	d10d      	bne.n	5c76 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    5c5a:	f013 0f04 	tst.w	r3, #4
    5c5e:	d111      	bne.n	5c84 <_adc_interrupt_handler+0x44>
    5c60:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    5c62:	2301      	movs	r3, #1
    5c64:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    5c68:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    5c6c:	6883      	ldr	r3, [r0, #8]
    5c6e:	b292      	uxth	r2, r2
    5c70:	2100      	movs	r1, #0
    5c72:	4798      	blx	r3
    5c74:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    5c76:	2302      	movs	r3, #2
    5c78:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    5c7c:	6843      	ldr	r3, [r0, #4]
    5c7e:	2100      	movs	r1, #0
    5c80:	4798      	blx	r3
    5c82:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    5c84:	2304      	movs	r3, #4
    5c86:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    5c8a:	6803      	ldr	r3, [r0, #0]
    5c8c:	2100      	movs	r1, #0
    5c8e:	4798      	blx	r3
	}
}
    5c90:	e7e6      	b.n	5c60 <_adc_interrupt_handler+0x20>
	...

00005c94 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5c94:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5c98:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5c9c:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    5ca0:	b148      	cbz	r0, 5cb6 <_adc_get_regs+0x22>
    5ca2:	2801      	cmp	r0, #1
    5ca4:	d009      	beq.n	5cba <_adc_get_regs+0x26>
{
    5ca6:	b508      	push	{r3, lr}
	ASSERT(false);
    5ca8:	228c      	movs	r2, #140	; 0x8c
    5caa:	4905      	ldr	r1, [pc, #20]	; (5cc0 <_adc_get_regs+0x2c>)
    5cac:	2000      	movs	r0, #0
    5cae:	4b05      	ldr	r3, [pc, #20]	; (5cc4 <_adc_get_regs+0x30>)
    5cb0:	4798      	blx	r3
	return 0;
    5cb2:	2000      	movs	r0, #0
    5cb4:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    5cb6:	2000      	movs	r0, #0
    5cb8:	4770      	bx	lr
    5cba:	2001      	movs	r0, #1
    5cbc:	4770      	bx	lr
    5cbe:	bf00      	nop
    5cc0:	0000d27c 	.word	0x0000d27c
    5cc4:	00005921 	.word	0x00005921

00005cc8 <_adc_async_init>:
{
    5cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ccc:	460c      	mov	r4, r1
	ASSERT(device);
    5cce:	4605      	mov	r5, r0
    5cd0:	22e6      	movs	r2, #230	; 0xe6
    5cd2:	493b      	ldr	r1, [pc, #236]	; (5dc0 <_adc_async_init+0xf8>)
    5cd4:	3000      	adds	r0, #0
    5cd6:	bf18      	it	ne
    5cd8:	2001      	movne	r0, #1
    5cda:	4b3a      	ldr	r3, [pc, #232]	; (5dc4 <_adc_async_init+0xfc>)
    5cdc:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    5cde:	4620      	mov	r0, r4
    5ce0:	4b39      	ldr	r3, [pc, #228]	; (5dc8 <_adc_async_init+0x100>)
    5ce2:	4798      	blx	r3
    5ce4:	4601      	mov	r1, r0
    5ce6:	4620      	mov	r0, r4
    5ce8:	4b38      	ldr	r3, [pc, #224]	; (5dcc <_adc_async_init+0x104>)
    5cea:	4798      	blx	r3
	if (init_status) {
    5cec:	4606      	mov	r6, r0
    5cee:	b110      	cbz	r0, 5cf6 <_adc_async_init+0x2e>
}
    5cf0:	4630      	mov	r0, r6
    5cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    5cf6:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5cf8:	4b35      	ldr	r3, [pc, #212]	; (5dd0 <_adc_async_init+0x108>)
    5cfa:	429c      	cmp	r4, r3
    5cfc:	d05c      	beq.n	5db8 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    5cfe:	4b35      	ldr	r3, [pc, #212]	; (5dd4 <_adc_async_init+0x10c>)
    5d00:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    5d02:	bf04      	itt	eq
    5d04:	4b34      	ldreq	r3, [pc, #208]	; (5dd8 <_adc_async_init+0x110>)
    5d06:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5d08:	4628      	mov	r0, r5
    5d0a:	4f34      	ldr	r7, [pc, #208]	; (5ddc <_adc_async_init+0x114>)
    5d0c:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d0e:	0943      	lsrs	r3, r0, #5
    5d10:	f000 001f 	and.w	r0, r0, #31
    5d14:	2401      	movs	r4, #1
    5d16:	fa04 f000 	lsl.w	r0, r4, r0
    5d1a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5de0 <_adc_async_init+0x118>
    5d1e:	3320      	adds	r3, #32
    5d20:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5d24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d28:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    5d2c:	4628      	mov	r0, r5
    5d2e:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d30:	0943      	lsrs	r3, r0, #5
    5d32:	f000 001f 	and.w	r0, r0, #31
    5d36:	fa04 f000 	lsl.w	r0, r4, r0
    5d3a:	3360      	adds	r3, #96	; 0x60
    5d3c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5d40:	4628      	mov	r0, r5
    5d42:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d44:	0943      	lsrs	r3, r0, #5
    5d46:	f000 001f 	and.w	r0, r0, #31
    5d4a:	4084      	lsls	r4, r0
    5d4c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5d50:	4628      	mov	r0, r5
    5d52:	47b8      	blx	r7
    5d54:	3001      	adds	r0, #1
    5d56:	b280      	uxth	r0, r0
    5d58:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	dbc8      	blt.n	5cf0 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d5e:	095b      	lsrs	r3, r3, #5
    5d60:	f000 001f 	and.w	r0, r0, #31
    5d64:	2201      	movs	r2, #1
    5d66:	fa02 f000 	lsl.w	r0, r2, r0
    5d6a:	3320      	adds	r3, #32
    5d6c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5d70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d74:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    5d78:	4628      	mov	r0, r5
    5d7a:	47b8      	blx	r7
    5d7c:	3001      	adds	r0, #1
    5d7e:	b280      	uxth	r0, r0
    5d80:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5d82:	2b00      	cmp	r3, #0
    5d84:	dbb4      	blt.n	5cf0 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d86:	095b      	lsrs	r3, r3, #5
    5d88:	f000 001f 	and.w	r0, r0, #31
    5d8c:	2201      	movs	r2, #1
    5d8e:	fa02 f000 	lsl.w	r0, r2, r0
    5d92:	3360      	adds	r3, #96	; 0x60
    5d94:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    5d98:	4628      	mov	r0, r5
    5d9a:	47b8      	blx	r7
    5d9c:	3001      	adds	r0, #1
    5d9e:	b280      	uxth	r0, r0
    5da0:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5da2:	2b00      	cmp	r3, #0
    5da4:	dba4      	blt.n	5cf0 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5da6:	095b      	lsrs	r3, r3, #5
    5da8:	f000 001f 	and.w	r0, r0, #31
    5dac:	2201      	movs	r2, #1
    5dae:	fa02 f000 	lsl.w	r0, r2, r0
    5db2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    5db6:	e79b      	b.n	5cf0 <_adc_async_init+0x28>
		_adc0_dev = dev;
    5db8:	4b07      	ldr	r3, [pc, #28]	; (5dd8 <_adc_async_init+0x110>)
    5dba:	601d      	str	r5, [r3, #0]
    5dbc:	e7a4      	b.n	5d08 <_adc_async_init+0x40>
    5dbe:	bf00      	nop
    5dc0:	0000d27c 	.word	0x0000d27c
    5dc4:	00005921 	.word	0x00005921
    5dc8:	00005c95 	.word	0x00005c95
    5dcc:	00005b15 	.word	0x00005b15
    5dd0:	43001c00 	.word	0x43001c00
    5dd4:	43002000 	.word	0x43002000
    5dd8:	200007f0 	.word	0x200007f0
    5ddc:	00005afd 	.word	0x00005afd
    5de0:	e000e100 	.word	0xe000e100

00005de4 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    5de4:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5de6:	8813      	ldrh	r3, [r2, #0]
    5de8:	b29b      	uxth	r3, r3
    5dea:	f043 0302 	orr.w	r3, r3, #2
    5dee:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5df0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5df2:	f013 0f03 	tst.w	r3, #3
    5df6:	d1fb      	bne.n	5df0 <_adc_async_enable_channel+0xc>
}
    5df8:	4770      	bx	lr

00005dfa <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    5dfa:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    5dfc:	88db      	ldrh	r3, [r3, #6]
    5dfe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    5e02:	2b03      	cmp	r3, #3
}
    5e04:	bf0c      	ite	eq
    5e06:	2001      	moveq	r0, #1
    5e08:	2002      	movne	r0, #2
    5e0a:	4770      	bx	lr

00005e0c <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    5e0c:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    5e0e:	7d13      	ldrb	r3, [r2, #20]
    5e10:	f043 0302 	orr.w	r3, r3, #2
    5e14:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5e16:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5e1c:	2b00      	cmp	r3, #0
    5e1e:	d1fa      	bne.n	5e16 <_adc_async_convert+0xa>
}
    5e20:	4770      	bx	lr

00005e22 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    5e22:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    5e24:	2a01      	cmp	r2, #1
    5e26:	d007      	beq.n	5e38 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    5e28:	2a02      	cmp	r2, #2
    5e2a:	d00e      	beq.n	5e4a <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    5e2c:	b91a      	cbnz	r2, 5e36 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    5e2e:	b1ab      	cbz	r3, 5e5c <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    5e30:	2301      	movs	r3, #1
    5e32:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5e36:	4770      	bx	lr
	if (value == 0x0) {
    5e38:	b91b      	cbnz	r3, 5e42 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    5e3a:	2304      	movs	r3, #4
    5e3c:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5e40:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    5e42:	2304      	movs	r3, #4
    5e44:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5e48:	4770      	bx	lr
	if (value == 0x0) {
    5e4a:	b91b      	cbnz	r3, 5e54 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    5e4c:	2302      	movs	r3, #2
    5e4e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5e52:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    5e54:	2302      	movs	r3, #2
    5e56:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5e5a:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    5e5c:	2301      	movs	r3, #1
    5e5e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5e62:	4770      	bx	lr

00005e64 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    5e64:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5e66:	4b02      	ldr	r3, [pc, #8]	; (5e70 <ADC0_0_Handler+0xc>)
    5e68:	6818      	ldr	r0, [r3, #0]
    5e6a:	4b02      	ldr	r3, [pc, #8]	; (5e74 <ADC0_0_Handler+0x10>)
    5e6c:	4798      	blx	r3
    5e6e:	bd08      	pop	{r3, pc}
    5e70:	200007f0 	.word	0x200007f0
    5e74:	00005c41 	.word	0x00005c41

00005e78 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    5e78:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5e7a:	4b02      	ldr	r3, [pc, #8]	; (5e84 <ADC0_1_Handler+0xc>)
    5e7c:	6818      	ldr	r0, [r3, #0]
    5e7e:	4b02      	ldr	r3, [pc, #8]	; (5e88 <ADC0_1_Handler+0x10>)
    5e80:	4798      	blx	r3
    5e82:	bd08      	pop	{r3, pc}
    5e84:	200007f0 	.word	0x200007f0
    5e88:	00005c41 	.word	0x00005c41

00005e8c <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    5e8c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5e8e:	4b02      	ldr	r3, [pc, #8]	; (5e98 <ADC1_0_Handler+0xc>)
    5e90:	6858      	ldr	r0, [r3, #4]
    5e92:	4b02      	ldr	r3, [pc, #8]	; (5e9c <ADC1_0_Handler+0x10>)
    5e94:	4798      	blx	r3
    5e96:	bd08      	pop	{r3, pc}
    5e98:	200007f0 	.word	0x200007f0
    5e9c:	00005c41 	.word	0x00005c41

00005ea0 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    5ea0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5ea2:	4b02      	ldr	r3, [pc, #8]	; (5eac <ADC1_1_Handler+0xc>)
    5ea4:	6858      	ldr	r0, [r3, #4]
    5ea6:	4b02      	ldr	r3, [pc, #8]	; (5eb0 <ADC1_1_Handler+0x10>)
    5ea8:	4798      	blx	r3
    5eaa:	bd08      	pop	{r3, pc}
    5eac:	200007f0 	.word	0x200007f0
    5eb0:	00005c41 	.word	0x00005c41

00005eb4 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5eb4:	0943      	lsrs	r3, r0, #5
    5eb6:	f000 001f 	and.w	r0, r0, #31
    5eba:	2201      	movs	r2, #1
    5ebc:	fa02 f000 	lsl.w	r0, r2, r0
    5ec0:	3340      	adds	r3, #64	; 0x40
    5ec2:	4a02      	ldr	r2, [pc, #8]	; (5ecc <_irq_set+0x18>)
    5ec4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5ec8:	4770      	bx	lr
    5eca:	bf00      	nop
    5ecc:	e000e100 	.word	0xe000e100

00005ed0 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    5ed0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5ed4:	00c0      	lsls	r0, r0, #3
    5ed6:	4770      	bx	lr

00005ed8 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5ed8:	4b01      	ldr	r3, [pc, #4]	; (5ee0 <_get_cycles_for_ms+0x8>)
    5eda:	fb03 f000 	mul.w	r0, r3, r0
    5ede:	4770      	bx	lr
    5ee0:	0001d4c0 	.word	0x0001d4c0

00005ee4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5ee4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5ee6:	4a0e      	ldr	r2, [pc, #56]	; (5f20 <_init_chip+0x3c>)
    5ee8:	8813      	ldrh	r3, [r2, #0]
    5eea:	b29b      	uxth	r3, r3
    5eec:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    5ef0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    5ef2:	4b0c      	ldr	r3, [pc, #48]	; (5f24 <_init_chip+0x40>)
    5ef4:	4798      	blx	r3
	_oscctrl_init_sources();
    5ef6:	4b0c      	ldr	r3, [pc, #48]	; (5f28 <_init_chip+0x44>)
    5ef8:	4798      	blx	r3
	_mclk_init();
    5efa:	4b0c      	ldr	r3, [pc, #48]	; (5f2c <_init_chip+0x48>)
    5efc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5efe:	2004      	movs	r0, #4
    5f00:	4c0b      	ldr	r4, [pc, #44]	; (5f30 <_init_chip+0x4c>)
    5f02:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    5f04:	4b0b      	ldr	r3, [pc, #44]	; (5f34 <_init_chip+0x50>)
    5f06:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5f08:	f640 70fb 	movw	r0, #4091	; 0xffb
    5f0c:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    5f0e:	4a0a      	ldr	r2, [pc, #40]	; (5f38 <_init_chip+0x54>)
    5f10:	6913      	ldr	r3, [r2, #16]
    5f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5f16:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    5f18:	4b08      	ldr	r3, [pc, #32]	; (5f3c <_init_chip+0x58>)
    5f1a:	4798      	blx	r3
    5f1c:	bd10      	pop	{r4, pc}
    5f1e:	bf00      	nop
    5f20:	41004000 	.word	0x41004000
    5f24:	000063c1 	.word	0x000063c1
    5f28:	000063d5 	.word	0x000063d5
    5f2c:	000062e9 	.word	0x000062e9
    5f30:	00006271 	.word	0x00006271
    5f34:	000063d9 	.word	0x000063d9
    5f38:	40000800 	.word	0x40000800
    5f3c:	00005fb5 	.word	0x00005fb5

00005f40 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    5f40:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    5f42:	4a1a      	ldr	r2, [pc, #104]	; (5fac <_dmac_handler+0x6c>)
    5f44:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    5f46:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    5f4a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5f4e:	4818      	ldr	r0, [pc, #96]	; (5fb0 <_dmac_handler+0x70>)
    5f50:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    5f54:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5f58:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    5f5c:	f012 0f01 	tst.w	r2, #1
    5f60:	d10a      	bne.n	5f78 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    5f62:	011a      	lsls	r2, r3, #4
    5f64:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5f68:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5f6c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    5f70:	f012 0f02 	tst.w	r2, #2
    5f74:	d10b      	bne.n	5f8e <_dmac_handler+0x4e>
    5f76:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    5f78:	011a      	lsls	r2, r3, #4
    5f7a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5f7e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5f82:	2101      	movs	r1, #1
    5f84:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    5f88:	6843      	ldr	r3, [r0, #4]
    5f8a:	4798      	blx	r3
    5f8c:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    5f8e:	011a      	lsls	r2, r3, #4
    5f90:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5f94:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5f98:	2102      	movs	r1, #2
    5f9a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    5f9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5fa2:	4a03      	ldr	r2, [pc, #12]	; (5fb0 <_dmac_handler+0x70>)
    5fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fa8:	4798      	blx	r3
	}
}
    5faa:	e7e4      	b.n	5f76 <_dmac_handler+0x36>
    5fac:	4100a000 	.word	0x4100a000
    5fb0:	200007f8 	.word	0x200007f8

00005fb4 <_dma_init>:
{
    5fb4:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    5fb6:	4a32      	ldr	r2, [pc, #200]	; (6080 <_dma_init+0xcc>)
    5fb8:	8813      	ldrh	r3, [r2, #0]
    5fba:	f023 0302 	bic.w	r3, r3, #2
    5fbe:	041b      	lsls	r3, r3, #16
    5fc0:	0c1b      	lsrs	r3, r3, #16
    5fc2:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    5fc4:	8853      	ldrh	r3, [r2, #2]
    5fc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    5fca:	041b      	lsls	r3, r3, #16
    5fcc:	0c1b      	lsrs	r3, r3, #16
    5fce:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    5fd0:	8813      	ldrh	r3, [r2, #0]
    5fd2:	b29b      	uxth	r3, r3
    5fd4:	f043 0301 	orr.w	r3, r3, #1
    5fd8:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    5fda:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    5fdc:	f013 0f01 	tst.w	r3, #1
    5fe0:	d1fb      	bne.n	5fda <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    5fe2:	4b27      	ldr	r3, [pc, #156]	; (6080 <_dma_init+0xcc>)
    5fe4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    5fe8:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    5fea:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    5fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    5ff0:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    5ff4:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    5ff6:	2100      	movs	r1, #0
    5ff8:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    5ffa:	4a22      	ldr	r2, [pc, #136]	; (6084 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    5ffc:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    5ffe:	4a22      	ldr	r2, [pc, #136]	; (6088 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    6000:	639a      	str	r2, [r3, #56]	; 0x38
    6002:	4b22      	ldr	r3, [pc, #136]	; (608c <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6004:	4c1f      	ldr	r4, [pc, #124]	; (6084 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6006:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6008:	681d      	ldr	r5, [r3, #0]
    600a:	0108      	lsls	r0, r1, #4
    600c:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    6010:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    6014:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    6016:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6018:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    601c:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    601e:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    6022:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6024:	1822      	adds	r2, r4, r0
    6026:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6028:	60d6      	str	r6, [r2, #12]
    602a:	3101      	adds	r1, #1
    602c:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    602e:	2920      	cmp	r1, #32
    6030:	d1ea      	bne.n	6008 <_dma_init+0x54>
    6032:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6034:	2001      	movs	r0, #1
    6036:	4916      	ldr	r1, [pc, #88]	; (6090 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    6038:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    603a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    603e:	d00b      	beq.n	6058 <_dma_init+0xa4>
    6040:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    6042:	2b24      	cmp	r3, #36	; 0x24
    6044:	d1f8      	bne.n	6038 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    6046:	4a0e      	ldr	r2, [pc, #56]	; (6080 <_dma_init+0xcc>)
    6048:	8813      	ldrh	r3, [r2, #0]
    604a:	b29b      	uxth	r3, r3
    604c:	f043 0302 	orr.w	r3, r3, #2
    6050:	8013      	strh	r3, [r2, #0]
}
    6052:	2000      	movs	r0, #0
    6054:	bc70      	pop	{r4, r5, r6}
    6056:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6058:	095c      	lsrs	r4, r3, #5
    605a:	f002 021f 	and.w	r2, r2, #31
    605e:	fa00 f202 	lsl.w	r2, r0, r2
    6062:	f104 0520 	add.w	r5, r4, #32
    6066:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    606a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    606e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6072:	f104 0560 	add.w	r5, r4, #96	; 0x60
    6076:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    607a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    607e:	e7df      	b.n	6040 <_dma_init+0x8c>
    6080:	4100a000 	.word	0x4100a000
    6084:	20003950 	.word	0x20003950
    6088:	20003b50 	.word	0x20003b50
    608c:	0000d294 	.word	0x0000d294
    6090:	e000e100 	.word	0xe000e100

00006094 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    6094:	b991      	cbnz	r1, 60bc <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    6096:	b942      	cbnz	r2, 60aa <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    6098:	0100      	lsls	r0, r0, #4
    609a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    609e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    60a2:	2302      	movs	r3, #2
    60a4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    60a8:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    60aa:	0100      	lsls	r0, r0, #4
    60ac:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    60b0:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    60b4:	2302      	movs	r3, #2
    60b6:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    60ba:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    60bc:	2901      	cmp	r1, #1
    60be:	d000      	beq.n	60c2 <_dma_set_irq_state+0x2e>
    60c0:	4770      	bx	lr
	if (value == 0x0) {
    60c2:	b142      	cbz	r2, 60d6 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    60c4:	0100      	lsls	r0, r0, #4
    60c6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    60ca:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    60ce:	2301      	movs	r3, #1
    60d0:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    60d4:	e7f4      	b.n	60c0 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    60d6:	0100      	lsls	r0, r0, #4
    60d8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    60dc:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    60e0:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    60e4:	4770      	bx	lr
	...

000060e8 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    60e8:	4b02      	ldr	r3, [pc, #8]	; (60f4 <_dma_set_destination_address+0xc>)
    60ea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    60ee:	6081      	str	r1, [r0, #8]
}
    60f0:	2000      	movs	r0, #0
    60f2:	4770      	bx	lr
    60f4:	20003950 	.word	0x20003950

000060f8 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    60f8:	4b02      	ldr	r3, [pc, #8]	; (6104 <_dma_set_source_address+0xc>)
    60fa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    60fe:	6041      	str	r1, [r0, #4]
}
    6100:	2000      	movs	r0, #0
    6102:	4770      	bx	lr
    6104:	20003950 	.word	0x20003950

00006108 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6108:	4a05      	ldr	r2, [pc, #20]	; (6120 <_dma_srcinc_enable+0x18>)
    610a:	0100      	lsls	r0, r0, #4
    610c:	5a13      	ldrh	r3, [r2, r0]
    610e:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    6110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    6114:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6118:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    611a:	5211      	strh	r1, [r2, r0]
}
    611c:	2000      	movs	r0, #0
    611e:	4770      	bx	lr
    6120:	20003950 	.word	0x20003950

00006124 <_dma_set_data_amount>:
{
    6124:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    6126:	4c14      	ldr	r4, [pc, #80]	; (6178 <_dma_set_data_amount+0x54>)
    6128:	0102      	lsls	r2, r0, #4
    612a:	18a3      	adds	r3, r4, r2
    612c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    612e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    6130:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6134:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    6136:	f412 6f00 	tst.w	r2, #2048	; 0x800
    613a:	d006      	beq.n	614a <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    613c:	fa01 f403 	lsl.w	r4, r1, r3
    6140:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6142:	4a0d      	ldr	r2, [pc, #52]	; (6178 <_dma_set_data_amount+0x54>)
    6144:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    6148:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    614a:	4c0b      	ldr	r4, [pc, #44]	; (6178 <_dma_set_data_amount+0x54>)
    614c:	0102      	lsls	r2, r0, #4
    614e:	18a5      	adds	r5, r4, r2
    6150:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6152:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    6154:	f412 6f80 	tst.w	r2, #1024	; 0x400
    6158:	d005      	beq.n	6166 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    615a:	fa01 f303 	lsl.w	r3, r1, r3
    615e:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6160:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    6164:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    6166:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    6168:	4b03      	ldr	r3, [pc, #12]	; (6178 <_dma_set_data_amount+0x54>)
    616a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    616e:	8041      	strh	r1, [r0, #2]
}
    6170:	2000      	movs	r0, #0
    6172:	bc30      	pop	{r4, r5}
    6174:	4770      	bx	lr
    6176:	bf00      	nop
    6178:	20003950 	.word	0x20003950

0000617c <_dma_enable_transaction>:
{
    617c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    617e:	4c0d      	ldr	r4, [pc, #52]	; (61b4 <_dma_enable_transaction+0x38>)
    6180:	0103      	lsls	r3, r0, #4
    6182:	5ae2      	ldrh	r2, [r4, r3]
    6184:	b292      	uxth	r2, r2
    6186:	f042 0201 	orr.w	r2, r2, #1
    618a:	52e2      	strh	r2, [r4, r3]
    618c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6190:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    6194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6196:	f042 0202 	orr.w	r2, r2, #2
    619a:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    619c:	b131      	cbz	r1, 61ac <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    619e:	4a06      	ldr	r2, [pc, #24]	; (61b8 <_dma_enable_transaction+0x3c>)
    61a0:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    61a2:	2301      	movs	r3, #1
    61a4:	fa03 f000 	lsl.w	r0, r3, r0
    61a8:	4308      	orrs	r0, r1
    61aa:	6110      	str	r0, [r2, #16]
}
    61ac:	2000      	movs	r0, #0
    61ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    61b2:	4770      	bx	lr
    61b4:	20003950 	.word	0x20003950
    61b8:	4100a000 	.word	0x4100a000

000061bc <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    61bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    61c0:	4b02      	ldr	r3, [pc, #8]	; (61cc <_dma_get_channel_resource+0x10>)
    61c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    61c6:	6001      	str	r1, [r0, #0]
}
    61c8:	2000      	movs	r0, #0
    61ca:	4770      	bx	lr
    61cc:	200007f8 	.word	0x200007f8

000061d0 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    61d0:	b508      	push	{r3, lr}
	_dmac_handler();
    61d2:	4b01      	ldr	r3, [pc, #4]	; (61d8 <DMAC_0_Handler+0x8>)
    61d4:	4798      	blx	r3
    61d6:	bd08      	pop	{r3, pc}
    61d8:	00005f41 	.word	0x00005f41

000061dc <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    61dc:	b508      	push	{r3, lr}
	_dmac_handler();
    61de:	4b01      	ldr	r3, [pc, #4]	; (61e4 <DMAC_1_Handler+0x8>)
    61e0:	4798      	blx	r3
    61e2:	bd08      	pop	{r3, pc}
    61e4:	00005f41 	.word	0x00005f41

000061e8 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    61e8:	b508      	push	{r3, lr}
	_dmac_handler();
    61ea:	4b01      	ldr	r3, [pc, #4]	; (61f0 <DMAC_2_Handler+0x8>)
    61ec:	4798      	blx	r3
    61ee:	bd08      	pop	{r3, pc}
    61f0:	00005f41 	.word	0x00005f41

000061f4 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    61f4:	b508      	push	{r3, lr}
	_dmac_handler();
    61f6:	4b01      	ldr	r3, [pc, #4]	; (61fc <DMAC_3_Handler+0x8>)
    61f8:	4798      	blx	r3
    61fa:	bd08      	pop	{r3, pc}
    61fc:	00005f41 	.word	0x00005f41

00006200 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6200:	b508      	push	{r3, lr}
	_dmac_handler();
    6202:	4b01      	ldr	r3, [pc, #4]	; (6208 <DMAC_4_Handler+0x8>)
    6204:	4798      	blx	r3
    6206:	bd08      	pop	{r3, pc}
    6208:	00005f41 	.word	0x00005f41

0000620c <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    620c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    620e:	2000      	movs	r0, #0
    6210:	4770      	bx	lr
	...

00006214 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6214:	b430      	push	{r4, r5}
    6216:	4814      	ldr	r0, [pc, #80]	; (6268 <_event_system_init+0x54>)
    6218:	f100 0543 	add.w	r5, r0, #67	; 0x43
    621c:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    621e:	4c13      	ldr	r4, [pc, #76]	; (626c <_event_system_init+0x58>)
    6220:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6222:	f813 1b01 	ldrb.w	r1, [r3], #1
    6226:	3248      	adds	r2, #72	; 0x48
    6228:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    622c:	42ab      	cmp	r3, r5
    622e:	d1f7      	bne.n	6220 <_event_system_init+0xc>
    6230:	480d      	ldr	r0, [pc, #52]	; (6268 <_event_system_init+0x54>)
    6232:	f100 0442 	add.w	r4, r0, #66	; 0x42
    6236:	3080      	adds	r0, #128	; 0x80
    6238:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    623a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    623e:	00ca      	lsls	r2, r1, #3
    6240:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6244:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6248:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    624a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    624e:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6250:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6254:	43db      	mvns	r3, r3
    6256:	b2db      	uxtb	r3, r3
    6258:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    625c:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    625e:	2920      	cmp	r1, #32
    6260:	d1eb      	bne.n	623a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    6262:	2000      	movs	r0, #0
    6264:	bc30      	pop	{r4, r5}
    6266:	4770      	bx	lr
    6268:	0000d394 	.word	0x0000d394
    626c:	4100e000 	.word	0x4100e000

00006270 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6270:	f010 0f01 	tst.w	r0, #1
    6274:	d008      	beq.n	6288 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6276:	4a17      	ldr	r2, [pc, #92]	; (62d4 <_gclk_init_generators_by_fref+0x64>)
    6278:	4b17      	ldr	r3, [pc, #92]	; (62d8 <_gclk_init_generators_by_fref+0x68>)
    627a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    627c:	4619      	mov	r1, r3
    627e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6282:	684b      	ldr	r3, [r1, #4]
    6284:	4213      	tst	r3, r2
    6286:	d1fc      	bne.n	6282 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6288:	f010 0f02 	tst.w	r0, #2
    628c:	d008      	beq.n	62a0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    628e:	4a13      	ldr	r2, [pc, #76]	; (62dc <_gclk_init_generators_by_fref+0x6c>)
    6290:	4b11      	ldr	r3, [pc, #68]	; (62d8 <_gclk_init_generators_by_fref+0x68>)
    6292:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6294:	4619      	mov	r1, r3
    6296:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    629a:	684b      	ldr	r3, [r1, #4]
    629c:	4213      	tst	r3, r2
    629e:	d1fc      	bne.n	629a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    62a0:	f010 0f04 	tst.w	r0, #4
    62a4:	d008      	beq.n	62b8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    62a6:	4a0e      	ldr	r2, [pc, #56]	; (62e0 <_gclk_init_generators_by_fref+0x70>)
    62a8:	4b0b      	ldr	r3, [pc, #44]	; (62d8 <_gclk_init_generators_by_fref+0x68>)
    62aa:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    62ac:	4619      	mov	r1, r3
    62ae:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    62b2:	684b      	ldr	r3, [r1, #4]
    62b4:	4213      	tst	r3, r2
    62b6:	d1fc      	bne.n	62b2 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    62b8:	f010 0f08 	tst.w	r0, #8
    62bc:	d008      	beq.n	62d0 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    62be:	4a09      	ldr	r2, [pc, #36]	; (62e4 <_gclk_init_generators_by_fref+0x74>)
    62c0:	4b05      	ldr	r3, [pc, #20]	; (62d8 <_gclk_init_generators_by_fref+0x68>)
    62c2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    62c4:	4619      	mov	r1, r3
    62c6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    62ca:	684b      	ldr	r3, [r1, #4]
    62cc:	4213      	tst	r3, r2
    62ce:	d1fc      	bne.n	62ca <_gclk_init_generators_by_fref+0x5a>
    62d0:	4770      	bx	lr
    62d2:	bf00      	nop
    62d4:	00010108 	.word	0x00010108
    62d8:	40001c00 	.word	0x40001c00
    62dc:	00010106 	.word	0x00010106
    62e0:	00100106 	.word	0x00100106
    62e4:	00010104 	.word	0x00010104

000062e8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    62e8:	2201      	movs	r2, #1
    62ea:	4b01      	ldr	r3, [pc, #4]	; (62f0 <_mclk_init+0x8>)
    62ec:	715a      	strb	r2, [r3, #5]
    62ee:	4770      	bx	lr
    62f0:	40000800 	.word	0x40000800

000062f4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    62f4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    62f6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    62f8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    62fa:	f012 0f01 	tst.w	r2, #1
    62fe:	d005      	beq.n	630c <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    6300:	2201      	movs	r2, #1
    6302:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    6304:	6803      	ldr	r3, [r0, #0]
    6306:	b153      	cbz	r3, 631e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6308:	4798      	blx	r3
    630a:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    630c:	8a1a      	ldrh	r2, [r3, #16]
    630e:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    6310:	b12a      	cbz	r2, 631e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    6312:	f240 225e 	movw	r2, #606	; 0x25e
    6316:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    6318:	6843      	ldr	r3, [r0, #4]
    631a:	b103      	cbz	r3, 631e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    631c:	4798      	blx	r3
    631e:	bd08      	pop	{r3, pc}

00006320 <_flash_init>:
{
    6320:	b538      	push	{r3, r4, r5, lr}
    6322:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    6324:	4605      	mov	r5, r0
    6326:	b350      	cbz	r0, 637e <_flash_init+0x5e>
    6328:	4816      	ldr	r0, [pc, #88]	; (6384 <_flash_init+0x64>)
    632a:	4281      	cmp	r1, r0
    632c:	bf14      	ite	ne
    632e:	2000      	movne	r0, #0
    6330:	2001      	moveq	r0, #1
    6332:	224b      	movs	r2, #75	; 0x4b
    6334:	4914      	ldr	r1, [pc, #80]	; (6388 <_flash_init+0x68>)
    6336:	4b15      	ldr	r3, [pc, #84]	; (638c <_flash_init+0x6c>)
    6338:	4798      	blx	r3
	device->hw = hw;
    633a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    633c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    633e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    6342:	049b      	lsls	r3, r3, #18
    6344:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    6346:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    6348:	4b11      	ldr	r3, [pc, #68]	; (6390 <_flash_init+0x70>)
    634a:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    634c:	4b11      	ldr	r3, [pc, #68]	; (6394 <_flash_init+0x74>)
    634e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    6352:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    635a:	f3bf 8f6f 	isb	sy
    635e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6366:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    636a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    636e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    6372:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6376:	6019      	str	r1, [r3, #0]
    6378:	601a      	str	r2, [r3, #0]
}
    637a:	2000      	movs	r0, #0
    637c:	bd38      	pop	{r3, r4, r5, pc}
    637e:	2000      	movs	r0, #0
    6380:	e7d7      	b.n	6332 <_flash_init+0x12>
    6382:	bf00      	nop
    6384:	41004000 	.word	0x41004000
    6388:	0000d498 	.word	0x0000d498
    638c:	00005921 	.word	0x00005921
    6390:	20000978 	.word	0x20000978
    6394:	e000e100 	.word	0xe000e100

00006398 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    6398:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    639a:	4b02      	ldr	r3, [pc, #8]	; (63a4 <NVMCTRL_0_Handler+0xc>)
    639c:	6818      	ldr	r0, [r3, #0]
    639e:	4b02      	ldr	r3, [pc, #8]	; (63a8 <NVMCTRL_0_Handler+0x10>)
    63a0:	4798      	blx	r3
    63a2:	bd08      	pop	{r3, pc}
    63a4:	20000978 	.word	0x20000978
    63a8:	000062f5 	.word	0x000062f5

000063ac <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    63ac:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    63ae:	4b02      	ldr	r3, [pc, #8]	; (63b8 <NVMCTRL_1_Handler+0xc>)
    63b0:	6818      	ldr	r0, [r3, #0]
    63b2:	4b02      	ldr	r3, [pc, #8]	; (63bc <NVMCTRL_1_Handler+0x10>)
    63b4:	4798      	blx	r3
    63b6:	bd08      	pop	{r3, pc}
    63b8:	20000978 	.word	0x20000978
    63bc:	000062f5 	.word	0x000062f5

000063c0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    63c0:	4b03      	ldr	r3, [pc, #12]	; (63d0 <_osc32kctrl_init_sources+0x10>)
    63c2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    63c4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    63c8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    63ca:	2201      	movs	r2, #1
    63cc:	741a      	strb	r2, [r3, #16]
    63ce:	4770      	bx	lr
    63d0:	40001400 	.word	0x40001400

000063d4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    63d4:	4770      	bx	lr
	...

000063d8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    63d8:	4a47      	ldr	r2, [pc, #284]	; (64f8 <_oscctrl_init_referenced_generators+0x120>)
    63da:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    63dc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    63e0:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    63e4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    63e6:	4611      	mov	r1, r2
    63e8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    63ec:	684b      	ldr	r3, [r1, #4]
    63ee:	4213      	tst	r3, r2
    63f0:	d1fc      	bne.n	63ec <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    63f2:	4a41      	ldr	r2, [pc, #260]	; (64f8 <_oscctrl_init_referenced_generators+0x120>)
    63f4:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    63f6:	f013 0f04 	tst.w	r3, #4
    63fa:	d1fb      	bne.n	63f4 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    63fc:	4b3f      	ldr	r3, [pc, #252]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    63fe:	2200      	movs	r2, #0
    6400:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6402:	4a3f      	ldr	r2, [pc, #252]	; (6500 <_oscctrl_init_referenced_generators+0x128>)
    6404:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6406:	461a      	mov	r2, r3
    6408:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    640c:	f013 0f10 	tst.w	r3, #16
    6410:	d1fa      	bne.n	6408 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6412:	2200      	movs	r2, #0
    6414:	4b39      	ldr	r3, [pc, #228]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    6416:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    641a:	461a      	mov	r2, r3
    641c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6420:	f013 0f04 	tst.w	r3, #4
    6424:	d1fa      	bne.n	641c <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6426:	2202      	movs	r2, #2
    6428:	4b34      	ldr	r3, [pc, #208]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    642a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    642c:	461a      	mov	r2, r3
    642e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6432:	f013 0f02 	tst.w	r3, #2
    6436:	d1fa      	bne.n	642e <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6438:	4b30      	ldr	r3, [pc, #192]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    643a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    643c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    643e:	461a      	mov	r2, r3
    6440:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6444:	f013 0f08 	tst.w	r3, #8
    6448:	d1fa      	bne.n	6440 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    644a:	2288      	movs	r2, #136	; 0x88
    644c:	4b2b      	ldr	r3, [pc, #172]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    644e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6452:	461a      	mov	r2, r3
    6454:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6458:	f013 0f04 	tst.w	r3, #4
    645c:	d1fa      	bne.n	6454 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    645e:	2242      	movs	r2, #66	; 0x42
    6460:	4b25      	ldr	r3, [pc, #148]	; (64f8 <_oscctrl_init_referenced_generators+0x120>)
    6462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6466:	2227      	movs	r2, #39	; 0x27
    6468:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    646c:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    646e:	461a      	mov	r2, r3
    6470:	6d13      	ldr	r3, [r2, #80]	; 0x50
    6472:	f013 0f06 	tst.w	r3, #6
    6476:	d1fb      	bne.n	6470 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6478:	4b20      	ldr	r3, [pc, #128]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    647a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    647e:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6480:	2202      	movs	r2, #2
    6482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6486:	461a      	mov	r2, r3
    6488:	6d13      	ldr	r3, [r2, #80]	; 0x50
    648a:	f013 0f02 	tst.w	r3, #2
    648e:	d1fb      	bne.n	6488 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6490:	4b1a      	ldr	r3, [pc, #104]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    6492:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    6496:	f013 0f01 	tst.w	r3, #1
    649a:	d026      	beq.n	64ea <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    649c:	4a17      	ldr	r2, [pc, #92]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    649e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    64a0:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    64a4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    64a8:	d1f9      	bne.n	649e <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    64aa:	4b14      	ldr	r3, [pc, #80]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    64ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    64ae:	f012 0f01 	tst.w	r2, #1
    64b2:	d103      	bne.n	64bc <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    64b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64b6:	f012 0f02 	tst.w	r2, #2
    64ba:	d0f7      	beq.n	64ac <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    64bc:	4a0e      	ldr	r2, [pc, #56]	; (64f8 <_oscctrl_init_referenced_generators+0x120>)
    64be:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    64c0:	2b00      	cmp	r3, #0
    64c2:	d1fc      	bne.n	64be <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    64c4:	4a0c      	ldr	r2, [pc, #48]	; (64f8 <_oscctrl_init_referenced_generators+0x120>)
    64c6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    64c8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    64cc:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    64d0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    64d2:	4611      	mov	r1, r2
    64d4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    64d8:	684b      	ldr	r3, [r1, #4]
    64da:	4213      	tst	r3, r2
    64dc:	d1fc      	bne.n	64d8 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    64de:	4a06      	ldr	r2, [pc, #24]	; (64f8 <_oscctrl_init_referenced_generators+0x120>)
    64e0:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    64e2:	f013 0f04 	tst.w	r3, #4
    64e6:	d1fb      	bne.n	64e0 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    64e8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    64ea:	4a04      	ldr	r2, [pc, #16]	; (64fc <_oscctrl_init_referenced_generators+0x124>)
    64ec:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    64ee:	f413 7f80 	tst.w	r3, #256	; 0x100
    64f2:	d0fb      	beq.n	64ec <_oscctrl_init_referenced_generators+0x114>
    64f4:	e7d9      	b.n	64aa <_oscctrl_init_referenced_generators+0xd2>
    64f6:	bf00      	nop
    64f8:	40001c00 	.word	0x40001c00
    64fc:	40001000 	.word	0x40001000
    6500:	04010000 	.word	0x04010000

00006504 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    6504:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6506:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6508:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    650a:	4903      	ldr	r1, [pc, #12]	; (6518 <_qspi_dma_rx_complete+0x14>)
    650c:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    650e:	685b      	ldr	r3, [r3, #4]
    6510:	b103      	cbz	r3, 6514 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    6512:	4798      	blx	r3
    6514:	bd08      	pop	{r3, pc}
    6516:	bf00      	nop
    6518:	01000002 	.word	0x01000002

0000651c <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    651c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    651e:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6520:	681a      	ldr	r2, [r3, #0]
    6522:	4903      	ldr	r1, [pc, #12]	; (6530 <_qspi_dma_tx_complete+0x14>)
    6524:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6526:	685b      	ldr	r3, [r3, #4]
    6528:	b103      	cbz	r3, 652c <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    652a:	4798      	blx	r3
    652c:	bd08      	pop	{r3, pc}
    652e:	bf00      	nop
    6530:	01000002 	.word	0x01000002

00006534 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    6534:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    6536:	6883      	ldr	r3, [r0, #8]
    6538:	689b      	ldr	r3, [r3, #8]
    653a:	b103      	cbz	r3, 653e <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    653c:	4798      	blx	r3
    653e:	bd08      	pop	{r3, pc}

00006540 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    6540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6542:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    6544:	4604      	mov	r4, r0
    6546:	2800      	cmp	r0, #0
    6548:	d027      	beq.n	659a <_qspi_dma_init+0x5a>
    654a:	1c08      	adds	r0, r1, #0
    654c:	bf18      	it	ne
    654e:	2001      	movne	r0, #1
    6550:	22cb      	movs	r2, #203	; 0xcb
    6552:	4913      	ldr	r1, [pc, #76]	; (65a0 <_qspi_dma_init+0x60>)
    6554:	4b13      	ldr	r3, [pc, #76]	; (65a4 <_qspi_dma_init+0x64>)
    6556:	4798      	blx	r3
	dev->prvt = hw;
    6558:	4626      	mov	r6, r4
    655a:	f846 5b0c 	str.w	r5, [r6], #12
    655e:	2301      	movs	r3, #1
    6560:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    6562:	4b11      	ldr	r3, [pc, #68]	; (65a8 <_qspi_dma_init+0x68>)
    6564:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    6566:	4b11      	ldr	r3, [pc, #68]	; (65ac <_qspi_dma_init+0x6c>)
    6568:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    656a:	211f      	movs	r1, #31
    656c:	4630      	mov	r0, r6
    656e:	4f10      	ldr	r7, [pc, #64]	; (65b0 <_qspi_dma_init+0x70>)
    6570:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6572:	68e3      	ldr	r3, [r4, #12]
    6574:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    6576:	68e3      	ldr	r3, [r4, #12]
    6578:	4a0e      	ldr	r2, [pc, #56]	; (65b4 <_qspi_dma_init+0x74>)
    657a:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    657c:	68e3      	ldr	r3, [r4, #12]
    657e:	4d0e      	ldr	r5, [pc, #56]	; (65b8 <_qspi_dma_init+0x78>)
    6580:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    6582:	211e      	movs	r1, #30
    6584:	4630      	mov	r0, r6
    6586:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6588:	68e3      	ldr	r3, [r4, #12]
    658a:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    658c:	68e3      	ldr	r3, [r4, #12]
    658e:	4a0b      	ldr	r2, [pc, #44]	; (65bc <_qspi_dma_init+0x7c>)
    6590:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6592:	68e3      	ldr	r3, [r4, #12]
    6594:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    6596:	2000      	movs	r0, #0
    6598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    659a:	2000      	movs	r0, #0
    659c:	e7d8      	b.n	6550 <_qspi_dma_init+0x10>
    659e:	bf00      	nop
    65a0:	0000d4b8 	.word	0x0000d4b8
    65a4:	00005921 	.word	0x00005921
    65a8:	06000011 	.word	0x06000011
    65ac:	00243b00 	.word	0x00243b00
    65b0:	000061bd 	.word	0x000061bd
    65b4:	00006505 	.word	0x00006505
    65b8:	00006535 	.word	0x00006535
    65bc:	0000651d 	.word	0x0000651d

000065c0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    65c0:	b500      	push	{lr}
    65c2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    65c4:	4b0d      	ldr	r3, [pc, #52]	; (65fc <RAMECC_Handler+0x3c>)
    65c6:	789b      	ldrb	r3, [r3, #2]
    65c8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    65ca:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    65cc:	9b01      	ldr	r3, [sp, #4]
    65ce:	f013 0f02 	tst.w	r3, #2
    65d2:	d006      	beq.n	65e2 <RAMECC_Handler+0x22>
    65d4:	4b0a      	ldr	r3, [pc, #40]	; (6600 <RAMECC_Handler+0x40>)
    65d6:	681b      	ldr	r3, [r3, #0]
    65d8:	b11b      	cbz	r3, 65e2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    65da:	4a08      	ldr	r2, [pc, #32]	; (65fc <RAMECC_Handler+0x3c>)
    65dc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    65de:	4798      	blx	r3
    65e0:	e009      	b.n	65f6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    65e2:	9b01      	ldr	r3, [sp, #4]
    65e4:	f013 0f01 	tst.w	r3, #1
    65e8:	d005      	beq.n	65f6 <RAMECC_Handler+0x36>
    65ea:	4b05      	ldr	r3, [pc, #20]	; (6600 <RAMECC_Handler+0x40>)
    65ec:	685b      	ldr	r3, [r3, #4]
    65ee:	b113      	cbz	r3, 65f6 <RAMECC_Handler+0x36>
    65f0:	4a02      	ldr	r2, [pc, #8]	; (65fc <RAMECC_Handler+0x3c>)
    65f2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    65f4:	4798      	blx	r3
	} else {
		return;
	}
}
    65f6:	b003      	add	sp, #12
    65f8:	f85d fb04 	ldr.w	pc, [sp], #4
    65fc:	41020000 	.word	0x41020000
    6600:	20003d50 	.word	0x20003d50

00006604 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    6604:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6606:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6608:	6913      	ldr	r3, [r2, #16]
    660a:	f013 0f60 	tst.w	r3, #96	; 0x60
    660e:	d1fb      	bne.n	6608 <_rtc_timer_set_period+0x4>
}
    6610:	4770      	bx	lr

00006612 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    6612:	68c2      	ldr	r2, [r0, #12]
    6614:	6913      	ldr	r3, [r2, #16]
    6616:	f013 0f60 	tst.w	r3, #96	; 0x60
    661a:	d1fb      	bne.n	6614 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    661c:	6a10      	ldr	r0, [r2, #32]
}
    661e:	4770      	bx	lr

00006620 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    6620:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6622:	f248 0103 	movw	r1, #32771	; 0x8003
    6626:	6913      	ldr	r3, [r2, #16]
    6628:	420b      	tst	r3, r1
    662a:	d1fc      	bne.n	6626 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    662c:	8810      	ldrh	r0, [r2, #0]
}
    662e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6632:	4770      	bx	lr

00006634 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    6634:	4770      	bx	lr
	...

00006638 <_rtc_timer_init>:
{
    6638:	b538      	push	{r3, r4, r5, lr}
    663a:	460c      	mov	r4, r1
	ASSERT(dev);
    663c:	4605      	mov	r5, r0
    663e:	2230      	movs	r2, #48	; 0x30
    6640:	4914      	ldr	r1, [pc, #80]	; (6694 <_rtc_timer_init+0x5c>)
    6642:	3000      	adds	r0, #0
    6644:	bf18      	it	ne
    6646:	2001      	movne	r0, #1
    6648:	4b13      	ldr	r3, [pc, #76]	; (6698 <_rtc_timer_init+0x60>)
    664a:	4798      	blx	r3
	dev->hw = hw;
    664c:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    664e:	2301      	movs	r3, #1
    6650:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6652:	f248 0203 	movw	r2, #32771	; 0x8003
    6656:	6923      	ldr	r3, [r4, #16]
    6658:	4213      	tst	r3, r2
    665a:	d1fc      	bne.n	6656 <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    665c:	68eb      	ldr	r3, [r5, #12]
    665e:	691a      	ldr	r2, [r3, #16]
    6660:	f012 0f01 	tst.w	r2, #1
    6664:	d1fb      	bne.n	665e <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6666:	f248 0280 	movw	r2, #32896	; 0x8080
    666a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    666c:	f248 0103 	movw	r1, #32771	; 0x8003
    6670:	691a      	ldr	r2, [r3, #16]
    6672:	420a      	tst	r2, r1
    6674:	d1fc      	bne.n	6670 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    6676:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6678:	2301      	movs	r3, #1
    667a:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    667c:	6913      	ldr	r3, [r2, #16]
    667e:	f013 0f60 	tst.w	r3, #96	; 0x60
    6682:	d1fb      	bne.n	667c <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    6684:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    6686:	f44f 7280 	mov.w	r2, #256	; 0x100
    668a:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    668c:	4b03      	ldr	r3, [pc, #12]	; (669c <_rtc_timer_init+0x64>)
    668e:	601d      	str	r5, [r3, #0]
}
    6690:	2000      	movs	r0, #0
    6692:	bd38      	pop	{r3, r4, r5, pc}
    6694:	0000d4d0 	.word	0x0000d4d0
    6698:	00005921 	.word	0x00005921
    669c:	2000097c 	.word	0x2000097c

000066a0 <_rtc_timer_deinit>:
{
    66a0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    66a2:	4604      	mov	r4, r0
    66a4:	b1c8      	cbz	r0, 66da <_rtc_timer_deinit+0x3a>
    66a6:	68c0      	ldr	r0, [r0, #12]
    66a8:	3000      	adds	r0, #0
    66aa:	bf18      	it	ne
    66ac:	2001      	movne	r0, #1
    66ae:	2252      	movs	r2, #82	; 0x52
    66b0:	490b      	ldr	r1, [pc, #44]	; (66e0 <_rtc_timer_deinit+0x40>)
    66b2:	4b0c      	ldr	r3, [pc, #48]	; (66e4 <_rtc_timer_deinit+0x44>)
    66b4:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    66ba:	4b0b      	ldr	r3, [pc, #44]	; (66e8 <_rtc_timer_deinit+0x48>)
    66bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    66c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    66c4:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    66c8:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    66ca:	2301      	movs	r3, #1
    66cc:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    66ce:	f248 0103 	movw	r1, #32771	; 0x8003
    66d2:	6913      	ldr	r3, [r2, #16]
    66d4:	420b      	tst	r3, r1
    66d6:	d1fc      	bne.n	66d2 <_rtc_timer_deinit+0x32>
}
    66d8:	bd10      	pop	{r4, pc}
    66da:	2000      	movs	r0, #0
    66dc:	e7e7      	b.n	66ae <_rtc_timer_deinit+0xe>
    66de:	bf00      	nop
    66e0:	0000d4d0 	.word	0x0000d4d0
    66e4:	00005921 	.word	0x00005921
    66e8:	e000e100 	.word	0xe000e100

000066ec <_rtc_timer_start>:
{
    66ec:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    66ee:	4604      	mov	r4, r0
    66f0:	b310      	cbz	r0, 6738 <_rtc_timer_start+0x4c>
    66f2:	68c0      	ldr	r0, [r0, #12]
    66f4:	3000      	adds	r0, #0
    66f6:	bf18      	it	ne
    66f8:	2001      	movne	r0, #1
    66fa:	225e      	movs	r2, #94	; 0x5e
    66fc:	490f      	ldr	r1, [pc, #60]	; (673c <_rtc_timer_start+0x50>)
    66fe:	4b10      	ldr	r3, [pc, #64]	; (6740 <_rtc_timer_start+0x54>)
    6700:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6702:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6706:	4b0f      	ldr	r3, [pc, #60]	; (6744 <_rtc_timer_start+0x58>)
    6708:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    670a:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    670c:	2300      	movs	r3, #0
    670e:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6710:	6913      	ldr	r3, [r2, #16]
    6712:	f013 0f08 	tst.w	r3, #8
    6716:	d1fb      	bne.n	6710 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    6718:	68e3      	ldr	r3, [r4, #12]
    671a:	691a      	ldr	r2, [r3, #16]
    671c:	f012 0f08 	tst.w	r2, #8
    6720:	d1fb      	bne.n	671a <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    6722:	881a      	ldrh	r2, [r3, #0]
    6724:	b292      	uxth	r2, r2
    6726:	f042 0202 	orr.w	r2, r2, #2
    672a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    672c:	f248 0103 	movw	r1, #32771	; 0x8003
    6730:	691a      	ldr	r2, [r3, #16]
    6732:	420a      	tst	r2, r1
    6734:	d1fc      	bne.n	6730 <_rtc_timer_start+0x44>
}
    6736:	bd10      	pop	{r4, pc}
    6738:	2000      	movs	r0, #0
    673a:	e7de      	b.n	66fa <_rtc_timer_start+0xe>
    673c:	0000d4d0 	.word	0x0000d4d0
    6740:	00005921 	.word	0x00005921
    6744:	e000e100 	.word	0xe000e100

00006748 <_rtc_timer_stop>:
{
    6748:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    674a:	4604      	mov	r4, r0
    674c:	b1a0      	cbz	r0, 6778 <_rtc_timer_stop+0x30>
    674e:	68c0      	ldr	r0, [r0, #12]
    6750:	3000      	adds	r0, #0
    6752:	bf18      	it	ne
    6754:	2001      	movne	r0, #1
    6756:	226b      	movs	r2, #107	; 0x6b
    6758:	4908      	ldr	r1, [pc, #32]	; (677c <_rtc_timer_stop+0x34>)
    675a:	4b09      	ldr	r3, [pc, #36]	; (6780 <_rtc_timer_stop+0x38>)
    675c:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    675e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6760:	8813      	ldrh	r3, [r2, #0]
    6762:	f023 0302 	bic.w	r3, r3, #2
    6766:	041b      	lsls	r3, r3, #16
    6768:	0c1b      	lsrs	r3, r3, #16
    676a:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    676c:	f248 0103 	movw	r1, #32771	; 0x8003
    6770:	6913      	ldr	r3, [r2, #16]
    6772:	420b      	tst	r3, r1
    6774:	d1fc      	bne.n	6770 <_rtc_timer_stop+0x28>
}
    6776:	bd10      	pop	{r4, pc}
    6778:	2000      	movs	r0, #0
    677a:	e7ec      	b.n	6756 <_rtc_timer_stop+0xe>
    677c:	0000d4d0 	.word	0x0000d4d0
    6780:	00005921 	.word	0x00005921

00006784 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    6784:	4800      	ldr	r0, [pc, #0]	; (6788 <_rtc_get_timer+0x4>)
    6786:	4770      	bx	lr
    6788:	20000358 	.word	0x20000358

0000678c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    678c:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    678e:	4b08      	ldr	r3, [pc, #32]	; (67b0 <RTC_Handler+0x24>)
    6790:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6792:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6794:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    6796:	f413 7f80 	tst.w	r3, #256	; 0x100
    679a:	d007      	beq.n	67ac <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    679c:	6823      	ldr	r3, [r4, #0]
    679e:	b10b      	cbz	r3, 67a4 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    67a0:	4620      	mov	r0, r4
    67a2:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    67a4:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    67a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    67aa:	819a      	strh	r2, [r3, #12]
    67ac:	bd10      	pop	{r4, pc}
    67ae:	bf00      	nop
    67b0:	2000097c 	.word	0x2000097c

000067b4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    67b4:	b470      	push	{r4, r5, r6}
    67b6:	b089      	sub	sp, #36	; 0x24
    67b8:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    67ba:	466c      	mov	r4, sp
    67bc:	4d0d      	ldr	r5, [pc, #52]	; (67f4 <_sercom_get_hardware_index+0x40>)
    67be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    67c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    67c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    67c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    67ca:	9b00      	ldr	r3, [sp, #0]
    67cc:	42b3      	cmp	r3, r6
    67ce:	d00d      	beq.n	67ec <_sercom_get_hardware_index+0x38>
    67d0:	4631      	mov	r1, r6
    67d2:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    67d4:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    67d6:	f853 2b04 	ldr.w	r2, [r3], #4
    67da:	428a      	cmp	r2, r1
    67dc:	d007      	beq.n	67ee <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    67de:	3001      	adds	r0, #1
    67e0:	2808      	cmp	r0, #8
    67e2:	d1f8      	bne.n	67d6 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    67e4:	2000      	movs	r0, #0
}
    67e6:	b009      	add	sp, #36	; 0x24
    67e8:	bc70      	pop	{r4, r5, r6}
    67ea:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    67ec:	2000      	movs	r0, #0
			return i;
    67ee:	b2c0      	uxtb	r0, r0
    67f0:	e7f9      	b.n	67e6 <_sercom_get_hardware_index+0x32>
    67f2:	bf00      	nop
    67f4:	0000d4e8 	.word	0x0000d4e8

000067f8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    67f8:	b510      	push	{r4, lr}
	void *hw = device->hw;
    67fa:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    67fc:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    67fe:	f013 0f01 	tst.w	r3, #1
    6802:	d003      	beq.n	680c <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6804:	7da3      	ldrb	r3, [r4, #22]
    6806:	f013 0f01 	tst.w	r3, #1
    680a:	d112      	bne.n	6832 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    680c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    680e:	f013 0f02 	tst.w	r3, #2
    6812:	d003      	beq.n	681c <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6814:	7da3      	ldrb	r3, [r4, #22]
    6816:	f013 0f02 	tst.w	r3, #2
    681a:	d10f      	bne.n	683c <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    681c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    681e:	f013 0f04 	tst.w	r3, #4
    6822:	d015      	beq.n	6850 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    6824:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    6826:	f003 0337 	and.w	r3, r3, #55	; 0x37
    682a:	b163      	cbz	r3, 6846 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    682c:	23ff      	movs	r3, #255	; 0xff
    682e:	8363      	strh	r3, [r4, #26]
    6830:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6832:	2301      	movs	r3, #1
    6834:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    6836:	6803      	ldr	r3, [r0, #0]
    6838:	4798      	blx	r3
    683a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    683c:	2302      	movs	r3, #2
    683e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    6840:	6883      	ldr	r3, [r0, #8]
    6842:	4798      	blx	r3
    6844:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    6846:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    6848:	6843      	ldr	r3, [r0, #4]
    684a:	b2c9      	uxtb	r1, r1
    684c:	4798      	blx	r3
    684e:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    6850:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    6852:	09db      	lsrs	r3, r3, #7
    6854:	d100      	bne.n	6858 <_sercom_usart_interrupt_handler+0x60>
    6856:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    6858:	2380      	movs	r3, #128	; 0x80
    685a:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    685c:	68c3      	ldr	r3, [r0, #12]
    685e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    6860:	8b63      	ldrh	r3, [r4, #26]
    6862:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6864:	8363      	strh	r3, [r4, #26]
    6866:	e7f6      	b.n	6856 <_sercom_usart_interrupt_handler+0x5e>

00006868 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    6868:	4b11      	ldr	r3, [pc, #68]	; (68b0 <_sercom_init_irq_param+0x48>)
    686a:	4298      	cmp	r0, r3
    686c:	d011      	beq.n	6892 <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    686e:	4b11      	ldr	r3, [pc, #68]	; (68b4 <_sercom_init_irq_param+0x4c>)
    6870:	4298      	cmp	r0, r3
    6872:	d011      	beq.n	6898 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    6874:	4b10      	ldr	r3, [pc, #64]	; (68b8 <_sercom_init_irq_param+0x50>)
    6876:	4298      	cmp	r0, r3
    6878:	d011      	beq.n	689e <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    687a:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    687e:	d011      	beq.n	68a4 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    6880:	4b0e      	ldr	r3, [pc, #56]	; (68bc <_sercom_init_irq_param+0x54>)
    6882:	4298      	cmp	r0, r3
    6884:	d011      	beq.n	68aa <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    6886:	4b0e      	ldr	r3, [pc, #56]	; (68c0 <_sercom_init_irq_param+0x58>)
    6888:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    688a:	bf04      	itt	eq
    688c:	4b0d      	ldreq	r3, [pc, #52]	; (68c4 <_sercom_init_irq_param+0x5c>)
    688e:	6159      	streq	r1, [r3, #20]
    6890:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    6892:	4b0c      	ldr	r3, [pc, #48]	; (68c4 <_sercom_init_irq_param+0x5c>)
    6894:	6019      	str	r1, [r3, #0]
    6896:	e7f0      	b.n	687a <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    6898:	4b0a      	ldr	r3, [pc, #40]	; (68c4 <_sercom_init_irq_param+0x5c>)
    689a:	6059      	str	r1, [r3, #4]
    689c:	e7f0      	b.n	6880 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    689e:	4b09      	ldr	r3, [pc, #36]	; (68c4 <_sercom_init_irq_param+0x5c>)
    68a0:	6099      	str	r1, [r3, #8]
    68a2:	e7f0      	b.n	6886 <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    68a4:	4b07      	ldr	r3, [pc, #28]	; (68c4 <_sercom_init_irq_param+0x5c>)
    68a6:	60d9      	str	r1, [r3, #12]
    68a8:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    68aa:	4b06      	ldr	r3, [pc, #24]	; (68c4 <_sercom_init_irq_param+0x5c>)
    68ac:	6119      	str	r1, [r3, #16]
    68ae:	4770      	bx	lr
    68b0:	40003000 	.word	0x40003000
    68b4:	40003400 	.word	0x40003400
    68b8:	41014000 	.word	0x41014000
    68bc:	43000400 	.word	0x43000400
    68c0:	43000800 	.word	0x43000800
    68c4:	20000980 	.word	0x20000980

000068c8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    68c8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    68ca:	4b03      	ldr	r3, [pc, #12]	; (68d8 <_sercom_get_irq_num+0x10>)
    68cc:	4798      	blx	r3
    68ce:	0080      	lsls	r0, r0, #2
    68d0:	302e      	adds	r0, #46	; 0x2e
}
    68d2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    68d6:	bd08      	pop	{r3, pc}
    68d8:	000067b5 	.word	0x000067b5

000068dc <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    68dc:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    68de:	f013 0f01 	tst.w	r3, #1
    68e2:	d109      	bne.n	68f8 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    68e4:	6803      	ldr	r3, [r0, #0]
    68e6:	f043 0302 	orr.w	r3, r3, #2
    68ea:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    68ec:	69c3      	ldr	r3, [r0, #28]
    68ee:	f013 0f03 	tst.w	r3, #3
    68f2:	d1fb      	bne.n	68ec <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    68f4:	2000      	movs	r0, #0
    68f6:	4770      	bx	lr
		return ERR_BUSY;
    68f8:	f06f 0003 	mvn.w	r0, #3
}
    68fc:	4770      	bx	lr
	...

00006900 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6900:	b538      	push	{r3, r4, r5, lr}
    6902:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6904:	4b0b      	ldr	r3, [pc, #44]	; (6934 <_spi_async_enable+0x34>)
    6906:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6908:	4620      	mov	r0, r4
    690a:	4b0b      	ldr	r3, [pc, #44]	; (6938 <_spi_async_enable+0x38>)
    690c:	4798      	blx	r3
    690e:	1d01      	adds	r1, r0, #4
    6910:	b2c9      	uxtb	r1, r1
    6912:	2501      	movs	r5, #1
    6914:	4c09      	ldr	r4, [pc, #36]	; (693c <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    6916:	1c43      	adds	r3, r0, #1
    6918:	b2db      	uxtb	r3, r3
    691a:	0942      	lsrs	r2, r0, #5
    691c:	f000 001f 	and.w	r0, r0, #31
    6920:	fa05 f000 	lsl.w	r0, r5, r0
    6924:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    6928:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    692a:	4299      	cmp	r1, r3
    692c:	d1f3      	bne.n	6916 <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    692e:	2000      	movs	r0, #0
    6930:	bd38      	pop	{r3, r4, r5, pc}
    6932:	bf00      	nop
    6934:	000068dd 	.word	0x000068dd
    6938:	000068c9 	.word	0x000068c9
    693c:	e000e100 	.word	0xe000e100

00006940 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6940:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    6942:	f013 0f03 	tst.w	r3, #3
    6946:	d111      	bne.n	696c <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6948:	69c3      	ldr	r3, [r0, #28]
    694a:	f013 0f03 	tst.w	r3, #3
    694e:	d1fb      	bne.n	6948 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    6950:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    6952:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    6956:	0709      	lsls	r1, r1, #28
    6958:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    695c:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    695e:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6960:	69c3      	ldr	r3, [r0, #28]
    6962:	f013 0f03 	tst.w	r3, #3
    6966:	d1fb      	bne.n	6960 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    6968:	2000      	movs	r0, #0
    696a:	4770      	bx	lr
		return ERR_BUSY;
    696c:	f06f 0003 	mvn.w	r0, #3
}
    6970:	4770      	bx	lr

00006972 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6972:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6974:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6976:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6978:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    697a:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    697c:	f013 0f01 	tst.w	r3, #1
    6980:	d109      	bne.n	6996 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6982:	f013 0f04 	tst.w	r3, #4
    6986:	d109      	bne.n	699c <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6988:	f013 0f02 	tst.w	r3, #2
    698c:	d109      	bne.n	69a2 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    698e:	f013 0f80 	tst.w	r3, #128	; 0x80
    6992:	d10b      	bne.n	69ac <_spi_handler+0x3a>
    6994:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    6996:	6883      	ldr	r3, [r0, #8]
    6998:	4798      	blx	r3
    699a:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    699c:	68c3      	ldr	r3, [r0, #12]
    699e:	4798      	blx	r3
    69a0:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    69a2:	2302      	movs	r3, #2
    69a4:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    69a6:	6903      	ldr	r3, [r0, #16]
    69a8:	4798      	blx	r3
    69aa:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    69ac:	2304      	movs	r3, #4
    69ae:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    69b0:	2380      	movs	r3, #128	; 0x80
    69b2:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    69b4:	6943      	ldr	r3, [r0, #20]
    69b6:	f06f 0112 	mvn.w	r1, #18
    69ba:	4798      	blx	r3
	}
}
    69bc:	e7ea      	b.n	6994 <_spi_handler+0x22>
	...

000069c0 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    69c0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    69c2:	4b03      	ldr	r3, [pc, #12]	; (69d0 <_spi_get_tx_dma_channel+0x10>)
    69c4:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    69c6:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    69c8:	bf0c      	ite	eq
    69ca:	2008      	moveq	r0, #8
    69cc:	2000      	movne	r0, #0
    69ce:	bd08      	pop	{r3, pc}
    69d0:	000067b5 	.word	0x000067b5

000069d4 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    69d4:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    69d6:	4b03      	ldr	r3, [pc, #12]	; (69e4 <_spi_get_rx_dma_channel+0x10>)
    69d8:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    69da:	2807      	cmp	r0, #7
    69dc:	bf8c      	ite	hi
    69de:	2000      	movhi	r0, #0
    69e0:	2001      	movls	r0, #1
    69e2:	bd08      	pop	{r3, pc}
    69e4:	000067b5 	.word	0x000067b5

000069e8 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    69e8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    69ea:	6883      	ldr	r3, [r0, #8]
    69ec:	689b      	ldr	r3, [r3, #8]
    69ee:	b103      	cbz	r3, 69f2 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    69f0:	4798      	blx	r3
    69f2:	bd08      	pop	{r3, pc}

000069f4 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    69f4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    69f6:	6883      	ldr	r3, [r0, #8]
    69f8:	685b      	ldr	r3, [r3, #4]
    69fa:	b103      	cbz	r3, 69fe <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    69fc:	4798      	blx	r3
    69fe:	bd08      	pop	{r3, pc}

00006a00 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    6a00:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    6a02:	6883      	ldr	r3, [r0, #8]
    6a04:	68db      	ldr	r3, [r3, #12]
    6a06:	b103      	cbz	r3, 6a0a <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    6a08:	4798      	blx	r3
    6a0a:	bd08      	pop	{r3, pc}

00006a0c <_usart_init>:
{
    6a0c:	b510      	push	{r4, lr}
    6a0e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6a10:	4b48      	ldr	r3, [pc, #288]	; (6b34 <_usart_init+0x128>)
    6a12:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6a14:	2800      	cmp	r0, #0
    6a16:	d06a      	beq.n	6aee <_usart_init+0xe2>
    6a18:	2801      	cmp	r0, #1
    6a1a:	d062      	beq.n	6ae2 <_usart_init+0xd6>
    6a1c:	2802      	cmp	r0, #2
    6a1e:	d062      	beq.n	6ae6 <_usart_init+0xda>
    6a20:	2804      	cmp	r0, #4
    6a22:	d062      	beq.n	6aea <_usart_init+0xde>
    6a24:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6a26:	bf08      	it	eq
    6a28:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    6a2a:	d006      	beq.n	6a3a <_usart_init+0x2e>
	ASSERT(false);
    6a2c:	f240 2276 	movw	r2, #630	; 0x276
    6a30:	4941      	ldr	r1, [pc, #260]	; (6b38 <_usart_init+0x12c>)
    6a32:	2000      	movs	r0, #0
    6a34:	4b41      	ldr	r3, [pc, #260]	; (6b3c <_usart_init+0x130>)
    6a36:	4798      	blx	r3
	return 0;
    6a38:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    6a3a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    6a3c:	f013 0f01 	tst.w	r3, #1
    6a40:	d122      	bne.n	6a88 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    6a42:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    6a46:	4a3e      	ldr	r2, [pc, #248]	; (6b40 <_usart_init+0x134>)
    6a48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6a4e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6a52:	69e3      	ldr	r3, [r4, #28]
    6a54:	f013 0f03 	tst.w	r3, #3
    6a58:	d1fb      	bne.n	6a52 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    6a5a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    6a5c:	f013 0f02 	tst.w	r3, #2
    6a60:	d00b      	beq.n	6a7a <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6a62:	6823      	ldr	r3, [r4, #0]
    6a64:	f023 0302 	bic.w	r3, r3, #2
    6a68:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6a6a:	69e3      	ldr	r3, [r4, #28]
    6a6c:	f013 0f03 	tst.w	r3, #3
    6a70:	d1fb      	bne.n	6a6a <_usart_init+0x5e>
    6a72:	69e3      	ldr	r3, [r4, #28]
    6a74:	f013 0f02 	tst.w	r3, #2
    6a78:	d1fb      	bne.n	6a72 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    6a7a:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6a7e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6a80:	69e3      	ldr	r3, [r4, #28]
    6a82:	f013 0f03 	tst.w	r3, #3
    6a86:	d1fb      	bne.n	6a80 <_usart_init+0x74>
    6a88:	69e3      	ldr	r3, [r4, #28]
    6a8a:	f013 0f01 	tst.w	r3, #1
    6a8e:	d1fb      	bne.n	6a88 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    6a90:	460a      	mov	r2, r1
    6a92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6a96:	4b2a      	ldr	r3, [pc, #168]	; (6b40 <_usart_init+0x134>)
    6a98:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6a9c:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6a9e:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6aa0:	69e3      	ldr	r3, [r4, #28]
    6aa2:	f013 0f03 	tst.w	r3, #3
    6aa6:	d1fb      	bne.n	6aa0 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    6aa8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6aac:	4924      	ldr	r1, [pc, #144]	; (6b40 <_usart_init+0x134>)
    6aae:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6ab4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6ab6:	69e3      	ldr	r3, [r4, #28]
    6ab8:	f013 0f1f 	tst.w	r3, #31
    6abc:	d1fb      	bne.n	6ab6 <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    6abe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6ac2:	491f      	ldr	r1, [pc, #124]	; (6b40 <_usart_init+0x134>)
    6ac4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    6aca:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6acc:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    6ad0:	d10f      	bne.n	6af2 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    6ad2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6ad6:	491a      	ldr	r1, [pc, #104]	; (6b40 <_usart_init+0x134>)
    6ad8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6adc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    6ade:	81a3      	strh	r3, [r4, #12]
    6ae0:	e016      	b.n	6b10 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6ae2:	2101      	movs	r1, #1
    6ae4:	e7a9      	b.n	6a3a <_usart_init+0x2e>
    6ae6:	2102      	movs	r1, #2
    6ae8:	e7a7      	b.n	6a3a <_usart_init+0x2e>
    6aea:	2103      	movs	r1, #3
    6aec:	e7a5      	b.n	6a3a <_usart_init+0x2e>
    6aee:	2100      	movs	r1, #0
    6af0:	e7a3      	b.n	6a3a <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    6af2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6af6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6afa:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6afc:	89a1      	ldrh	r1, [r4, #12]
    6afe:	f360 010c 	bfi	r1, r0, #0, #13
    6b02:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6b04:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    6b08:	89a3      	ldrh	r3, [r4, #12]
    6b0a:	f361 334f 	bfi	r3, r1, #13, #3
    6b0e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    6b10:	4b0b      	ldr	r3, [pc, #44]	; (6b40 <_usart_init+0x134>)
    6b12:	0051      	lsls	r1, r2, #1
    6b14:	1888      	adds	r0, r1, r2
    6b16:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6b1a:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    6b1e:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    6b20:	440a      	add	r2, r1
    6b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    6b2a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    6b2e:	2000      	movs	r0, #0
    6b30:	bd10      	pop	{r4, pc}
    6b32:	bf00      	nop
    6b34:	000067b5 	.word	0x000067b5
    6b38:	0000d5bc 	.word	0x0000d5bc
    6b3c:	00005921 	.word	0x00005921
    6b40:	0000d4e8 	.word	0x0000d4e8

00006b44 <_get_i2cm_index>:
{
    6b44:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6b46:	4b07      	ldr	r3, [pc, #28]	; (6b64 <_get_i2cm_index+0x20>)
    6b48:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    6b4a:	2805      	cmp	r0, #5
    6b4c:	d008      	beq.n	6b60 <_get_i2cm_index+0x1c>
	ASSERT(false);
    6b4e:	f240 32ed 	movw	r2, #1005	; 0x3ed
    6b52:	4905      	ldr	r1, [pc, #20]	; (6b68 <_get_i2cm_index+0x24>)
    6b54:	2000      	movs	r0, #0
    6b56:	4b05      	ldr	r3, [pc, #20]	; (6b6c <_get_i2cm_index+0x28>)
    6b58:	4798      	blx	r3
	return -1;
    6b5a:	f04f 30ff 	mov.w	r0, #4294967295
}
    6b5e:	bd08      	pop	{r3, pc}
			return i;
    6b60:	2000      	movs	r0, #0
    6b62:	bd08      	pop	{r3, pc}
    6b64:	000067b5 	.word	0x000067b5
    6b68:	0000d5bc 	.word	0x0000d5bc
    6b6c:	00005921 	.word	0x00005921

00006b70 <_i2c_m_sync_init_impl>:
{
    6b70:	b538      	push	{r3, r4, r5, lr}
    6b72:	4605      	mov	r5, r0
    6b74:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    6b76:	4608      	mov	r0, r1
    6b78:	4b34      	ldr	r3, [pc, #208]	; (6c4c <_i2c_m_sync_init_impl+0xdc>)
    6b7a:	4798      	blx	r3
    6b7c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6b7e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6b80:	f013 0f01 	tst.w	r3, #1
    6b84:	d123      	bne.n	6bce <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6b86:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6b8a:	4a31      	ldr	r2, [pc, #196]	; (6c50 <_i2c_m_sync_init_impl+0xe0>)
    6b8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6b90:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6b94:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6b98:	69e3      	ldr	r3, [r4, #28]
    6b9a:	f013 0f03 	tst.w	r3, #3
    6b9e:	d1fb      	bne.n	6b98 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6ba0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6ba2:	f013 0f02 	tst.w	r3, #2
    6ba6:	d00b      	beq.n	6bc0 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6ba8:	6823      	ldr	r3, [r4, #0]
    6baa:	f023 0302 	bic.w	r3, r3, #2
    6bae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6bb0:	69e3      	ldr	r3, [r4, #28]
    6bb2:	f013 0f03 	tst.w	r3, #3
    6bb6:	d1fb      	bne.n	6bb0 <_i2c_m_sync_init_impl+0x40>
    6bb8:	69e3      	ldr	r3, [r4, #28]
    6bba:	f013 0f02 	tst.w	r3, #2
    6bbe:	d1fb      	bne.n	6bb8 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6bc0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6bc4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6bc6:	69e3      	ldr	r3, [r4, #28]
    6bc8:	f013 0f03 	tst.w	r3, #3
    6bcc:	d1fb      	bne.n	6bc6 <_i2c_m_sync_init_impl+0x56>
    6bce:	69e3      	ldr	r3, [r4, #28]
    6bd0:	f013 0f01 	tst.w	r3, #1
    6bd4:	d1fb      	bne.n	6bce <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6bd6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6bda:	4a1d      	ldr	r2, [pc, #116]	; (6c50 <_i2c_m_sync_init_impl+0xe0>)
    6bdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6be0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6be4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6be6:	69e3      	ldr	r3, [r4, #28]
    6be8:	f013 0f03 	tst.w	r3, #3
    6bec:	d1fb      	bne.n	6be6 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6bee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6bf2:	4917      	ldr	r1, [pc, #92]	; (6c50 <_i2c_m_sync_init_impl+0xe0>)
    6bf4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6bf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6bfc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6bfe:	69e3      	ldr	r3, [r4, #28]
    6c00:	f013 0f04 	tst.w	r3, #4
    6c04:	d1fb      	bne.n	6bfe <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6c06:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6c0a:	4911      	ldr	r1, [pc, #68]	; (6c50 <_i2c_m_sync_init_impl+0xe0>)
    6c0c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6c10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6c14:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6c16:	f3c2 6301 	ubfx	r3, r2, #24, #2
    6c1a:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6c1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6c1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6c22:	2b01      	cmp	r3, #1
    6c24:	bf94      	ite	ls
    6c26:	2300      	movls	r3, #0
    6c28:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6c2a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6c2e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c30:	69e3      	ldr	r3, [r4, #28]
    6c32:	f013 0f04 	tst.w	r3, #4
    6c36:	d1fb      	bne.n	6c30 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    6c38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6c3c:	4b04      	ldr	r3, [pc, #16]	; (6c50 <_i2c_m_sync_init_impl+0xe0>)
    6c3e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6c42:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    6c46:	81eb      	strh	r3, [r5, #14]
}
    6c48:	2000      	movs	r0, #0
    6c4a:	bd38      	pop	{r3, r4, r5, pc}
    6c4c:	00006b45 	.word	0x00006b45
    6c50:	0000d4e8 	.word	0x0000d4e8

00006c54 <_sercom_i2c_m_irq_handler>:
{
    6c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c58:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    6c5a:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6c5c:	7e26      	ldrb	r6, [r4, #24]
    6c5e:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    6c60:	f8df 8234 	ldr.w	r8, [pc, #564]	; 6e98 <_sercom_i2c_m_irq_handler+0x244>
    6c64:	f240 425f 	movw	r2, #1119	; 0x45f
    6c68:	4641      	mov	r1, r8
    6c6a:	3000      	adds	r0, #0
    6c6c:	bf18      	it	ne
    6c6e:	2001      	movne	r0, #1
    6c70:	4f88      	ldr	r7, [pc, #544]	; (6e94 <_sercom_i2c_m_irq_handler+0x240>)
    6c72:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    6c74:	6928      	ldr	r0, [r5, #16]
    6c76:	f44f 628c 	mov.w	r2, #1120	; 0x460
    6c7a:	4641      	mov	r1, r8
    6c7c:	3000      	adds	r0, #0
    6c7e:	bf18      	it	ne
    6c80:	2001      	movne	r0, #1
    6c82:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    6c84:	f016 0f80 	tst.w	r6, #128	; 0x80
    6c88:	f040 80f4 	bne.w	6e74 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6c8c:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c8e:	69e3      	ldr	r3, [r4, #28]
    6c90:	f013 0f04 	tst.w	r3, #4
    6c94:	d1fb      	bne.n	6c8e <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6c96:	8b63      	ldrh	r3, [r4, #26]
    6c98:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    6c9a:	f016 0f01 	tst.w	r6, #1
    6c9e:	f000 8090 	beq.w	6dc2 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6ca2:	f013 0f02 	tst.w	r3, #2
    6ca6:	d022      	beq.n	6cee <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6ca8:	2201      	movs	r2, #1
    6caa:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6cac:	886a      	ldrh	r2, [r5, #2]
    6cae:	b292      	uxth	r2, r2
    6cb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6cb4:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    6cb6:	886a      	ldrh	r2, [r5, #2]
    6cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6cbc:	0412      	lsls	r2, r2, #16
    6cbe:	0c12      	lsrs	r2, r2, #16
    6cc0:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6cc2:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	bf14      	ite	ne
    6cca:	f06f 0104 	mvnne.w	r1, #4
    6cce:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6cd2:	886b      	ldrh	r3, [r5, #2]
    6cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6cd8:	041b      	lsls	r3, r3, #16
    6cda:	0c1b      	lsrs	r3, r3, #16
    6cdc:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6cde:	696b      	ldr	r3, [r5, #20]
    6ce0:	2b00      	cmp	r3, #0
    6ce2:	f000 80c5 	beq.w	6e70 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    6ce6:	4628      	mov	r0, r5
    6ce8:	4798      	blx	r3
    6cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6cee:	f013 0f04 	tst.w	r3, #4
    6cf2:	d124      	bne.n	6d3e <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6cf4:	886b      	ldrh	r3, [r5, #2]
    6cf6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6cfa:	d03e      	beq.n	6d7a <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6cfc:	882b      	ldrh	r3, [r5, #0]
    6cfe:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d00:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d04:	69e3      	ldr	r3, [r4, #28]
    6d06:	f013 0f04 	tst.w	r3, #4
    6d0a:	d1fb      	bne.n	6d04 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    6d12:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6d16:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6d18:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d1a:	69e3      	ldr	r3, [r4, #28]
    6d1c:	f013 0f04 	tst.w	r3, #4
    6d20:	d1fb      	bne.n	6d1a <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    6d22:	886b      	ldrh	r3, [r5, #2]
    6d24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6d28:	041b      	lsls	r3, r3, #16
    6d2a:	0c1b      	lsrs	r3, r3, #16
    6d2c:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6d2e:	69ab      	ldr	r3, [r5, #24]
    6d30:	2b00      	cmp	r3, #0
    6d32:	f000 8088 	beq.w	6e46 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    6d36:	4628      	mov	r0, r5
    6d38:	4798      	blx	r3
    6d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    6d3e:	686b      	ldr	r3, [r5, #4]
    6d40:	2b00      	cmp	r3, #0
    6d42:	dd04      	ble.n	6d4e <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    6d44:	886b      	ldrh	r3, [r5, #2]
    6d46:	b29b      	uxth	r3, r3
    6d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d4c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    6d4e:	886b      	ldrh	r3, [r5, #2]
    6d50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6d54:	d108      	bne.n	6d68 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    6d56:	886b      	ldrh	r3, [r5, #2]
    6d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d5c:	041b      	lsls	r3, r3, #16
    6d5e:	0c1b      	lsrs	r3, r3, #16
    6d60:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    6d62:	f06f 0101 	mvn.w	r1, #1
    6d66:	e7b4      	b.n	6cd2 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6d68:	6863      	ldr	r3, [r4, #4]
    6d6a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6d6e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d70:	69e3      	ldr	r3, [r4, #28]
    6d72:	f013 0f04 	tst.w	r3, #4
    6d76:	d1fb      	bne.n	6d70 <_sercom_i2c_m_irq_handler+0x11c>
    6d78:	e7ed      	b.n	6d56 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    6d7a:	686b      	ldr	r3, [r5, #4]
    6d7c:	b99b      	cbnz	r3, 6da6 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    6d7e:	886b      	ldrh	r3, [r5, #2]
    6d80:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6d84:	d106      	bne.n	6d94 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    6d86:	886b      	ldrh	r3, [r5, #2]
    6d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d8c:	041b      	lsls	r3, r3, #16
    6d8e:	0c1b      	lsrs	r3, r3, #16
    6d90:	806b      	strh	r3, [r5, #2]
    6d92:	e7cc      	b.n	6d2e <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6d94:	6863      	ldr	r3, [r4, #4]
    6d96:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6d9a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d9c:	69e3      	ldr	r3, [r4, #28]
    6d9e:	f013 0f04 	tst.w	r3, #4
    6da2:	d1fb      	bne.n	6d9c <_sercom_i2c_m_irq_handler+0x148>
    6da4:	e7ef      	b.n	6d86 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6da6:	68ab      	ldr	r3, [r5, #8]
    6da8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6daa:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6dac:	69e3      	ldr	r3, [r4, #28]
    6dae:	f013 0f04 	tst.w	r3, #4
    6db2:	d1fb      	bne.n	6dac <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6db4:	68ab      	ldr	r3, [r5, #8]
    6db6:	3301      	adds	r3, #1
    6db8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    6dba:	686b      	ldr	r3, [r5, #4]
    6dbc:	3b01      	subs	r3, #1
    6dbe:	606b      	str	r3, [r5, #4]
    6dc0:	e7b5      	b.n	6d2e <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    6dc2:	f016 0f02 	tst.w	r6, #2
    6dc6:	d041      	beq.n	6e4c <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6dc8:	686a      	ldr	r2, [r5, #4]
    6dca:	2a00      	cmp	r2, #0
    6dcc:	d036      	beq.n	6e3c <_sercom_i2c_m_irq_handler+0x1e8>
    6dce:	f013 0f04 	tst.w	r3, #4
    6dd2:	d133      	bne.n	6e3c <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6dd4:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    6dd8:	3a01      	subs	r2, #1
    6dda:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6ddc:	2a00      	cmp	r2, #0
    6dde:	d137      	bne.n	6e50 <_sercom_i2c_m_irq_handler+0x1fc>
    6de0:	2900      	cmp	r1, #0
    6de2:	d039      	beq.n	6e58 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    6de4:	886b      	ldrh	r3, [r5, #2]
    6de6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6dea:	d116      	bne.n	6e1a <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    6dec:	886b      	ldrh	r3, [r5, #2]
    6dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6df2:	041b      	lsls	r3, r3, #16
    6df4:	0c1b      	lsrs	r3, r3, #16
    6df6:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6df8:	68aa      	ldr	r2, [r5, #8]
    6dfa:	1c53      	adds	r3, r2, #1
    6dfc:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6dfe:	69e3      	ldr	r3, [r4, #28]
    6e00:	f013 0f04 	tst.w	r3, #4
    6e04:	d1fb      	bne.n	6dfe <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6e08:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6e0a:	2302      	movs	r3, #2
    6e0c:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6e0e:	69eb      	ldr	r3, [r5, #28]
    6e10:	b1e3      	cbz	r3, 6e4c <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6e12:	4628      	mov	r0, r5
    6e14:	4798      	blx	r3
    6e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6e1a:	6863      	ldr	r3, [r4, #4]
    6e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e20:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e22:	69e3      	ldr	r3, [r4, #28]
    6e24:	f013 0f04 	tst.w	r3, #4
    6e28:	d1fb      	bne.n	6e22 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6e2a:	6863      	ldr	r3, [r4, #4]
    6e2c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6e30:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e32:	69e3      	ldr	r3, [r4, #28]
    6e34:	f013 0f04 	tst.w	r3, #4
    6e38:	d1fb      	bne.n	6e32 <_sercom_i2c_m_irq_handler+0x1de>
    6e3a:	e7d7      	b.n	6dec <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6e3c:	2302      	movs	r3, #2
    6e3e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    6e40:	f06f 0101 	mvn.w	r1, #1
    6e44:	e745      	b.n	6cd2 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6e46:	f016 0f02 	tst.w	r6, #2
    6e4a:	d1e0      	bne.n	6e0e <_sercom_i2c_m_irq_handler+0x1ba>
    6e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6e50:	2a01      	cmp	r2, #1
    6e52:	d1d1      	bne.n	6df8 <_sercom_i2c_m_irq_handler+0x1a4>
    6e54:	2900      	cmp	r1, #0
    6e56:	d0cf      	beq.n	6df8 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6e58:	6863      	ldr	r3, [r4, #4]
    6e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    6e5e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e60:	69e3      	ldr	r3, [r4, #28]
    6e62:	f013 0f04 	tst.w	r3, #4
    6e66:	d1fb      	bne.n	6e60 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    6e68:	686b      	ldr	r3, [r5, #4]
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d0ba      	beq.n	6de4 <_sercom_i2c_m_irq_handler+0x190>
    6e6e:	e7c3      	b.n	6df8 <_sercom_i2c_m_irq_handler+0x1a4>
    6e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6e74:	886b      	ldrh	r3, [r5, #2]
    6e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e7a:	041b      	lsls	r3, r3, #16
    6e7c:	0c1b      	lsrs	r3, r3, #16
    6e7e:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6e80:	696b      	ldr	r3, [r5, #20]
    6e82:	2b00      	cmp	r3, #0
    6e84:	d0e2      	beq.n	6e4c <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6e86:	f06f 0104 	mvn.w	r1, #4
    6e8a:	4628      	mov	r0, r5
    6e8c:	4798      	blx	r3
    6e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e92:	bf00      	nop
    6e94:	00005921 	.word	0x00005921
    6e98:	0000d5bc 	.word	0x0000d5bc

00006e9c <_usart_sync_init>:
{
    6e9c:	b538      	push	{r3, r4, r5, lr}
    6e9e:	460c      	mov	r4, r1
	ASSERT(device);
    6ea0:	4605      	mov	r5, r0
    6ea2:	22c8      	movs	r2, #200	; 0xc8
    6ea4:	4905      	ldr	r1, [pc, #20]	; (6ebc <_usart_sync_init+0x20>)
    6ea6:	3000      	adds	r0, #0
    6ea8:	bf18      	it	ne
    6eaa:	2001      	movne	r0, #1
    6eac:	4b04      	ldr	r3, [pc, #16]	; (6ec0 <_usart_sync_init+0x24>)
    6eae:	4798      	blx	r3
	device->hw = hw;
    6eb0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    6eb2:	4620      	mov	r0, r4
    6eb4:	4b03      	ldr	r3, [pc, #12]	; (6ec4 <_usart_sync_init+0x28>)
    6eb6:	4798      	blx	r3
}
    6eb8:	bd38      	pop	{r3, r4, r5, pc}
    6eba:	bf00      	nop
    6ebc:	0000d5bc 	.word	0x0000d5bc
    6ec0:	00005921 	.word	0x00005921
    6ec4:	00006a0d 	.word	0x00006a0d

00006ec8 <_usart_async_init>:
{
    6ec8:	b570      	push	{r4, r5, r6, lr}
    6eca:	460d      	mov	r5, r1
	ASSERT(device);
    6ecc:	4606      	mov	r6, r0
    6ece:	22d6      	movs	r2, #214	; 0xd6
    6ed0:	4917      	ldr	r1, [pc, #92]	; (6f30 <_usart_async_init+0x68>)
    6ed2:	3000      	adds	r0, #0
    6ed4:	bf18      	it	ne
    6ed6:	2001      	movne	r0, #1
    6ed8:	4b16      	ldr	r3, [pc, #88]	; (6f34 <_usart_async_init+0x6c>)
    6eda:	4798      	blx	r3
	init_status = _usart_init(hw);
    6edc:	4628      	mov	r0, r5
    6ede:	4b16      	ldr	r3, [pc, #88]	; (6f38 <_usart_async_init+0x70>)
    6ee0:	4798      	blx	r3
	if (init_status) {
    6ee2:	4604      	mov	r4, r0
    6ee4:	b108      	cbz	r0, 6eea <_usart_async_init+0x22>
}
    6ee6:	4620      	mov	r0, r4
    6ee8:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    6eea:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    6eec:	4631      	mov	r1, r6
    6eee:	4628      	mov	r0, r5
    6ef0:	4b12      	ldr	r3, [pc, #72]	; (6f3c <_usart_async_init+0x74>)
    6ef2:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6ef4:	4628      	mov	r0, r5
    6ef6:	4b12      	ldr	r3, [pc, #72]	; (6f40 <_usart_async_init+0x78>)
    6ef8:	4798      	blx	r3
    6efa:	1d01      	adds	r1, r0, #4
    6efc:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6efe:	2501      	movs	r5, #1
    6f00:	f000 021f 	and.w	r2, r0, #31
    6f04:	fa05 f202 	lsl.w	r2, r5, r2
    6f08:	0943      	lsrs	r3, r0, #5
    6f0a:	009b      	lsls	r3, r3, #2
    6f0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6f10:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6f18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6f1c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f20:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f24:	601a      	str	r2, [r3, #0]
		irq++;
    6f26:	3001      	adds	r0, #1
    6f28:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6f2a:	4281      	cmp	r1, r0
    6f2c:	d1e8      	bne.n	6f00 <_usart_async_init+0x38>
    6f2e:	e7da      	b.n	6ee6 <_usart_async_init+0x1e>
    6f30:	0000d5bc 	.word	0x0000d5bc
    6f34:	00005921 	.word	0x00005921
    6f38:	00006a0d 	.word	0x00006a0d
    6f3c:	00006869 	.word	0x00006869
    6f40:	000068c9 	.word	0x000068c9

00006f44 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    6f44:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6f46:	6813      	ldr	r3, [r2, #0]
    6f48:	f043 0302 	orr.w	r3, r3, #2
    6f4c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6f4e:	69d3      	ldr	r3, [r2, #28]
    6f50:	f013 0f03 	tst.w	r3, #3
    6f54:	d1fb      	bne.n	6f4e <_usart_sync_enable+0xa>
}
    6f56:	4770      	bx	lr

00006f58 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    6f58:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6f5a:	6813      	ldr	r3, [r2, #0]
    6f5c:	f043 0302 	orr.w	r3, r3, #2
    6f60:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6f62:	69d3      	ldr	r3, [r2, #28]
    6f64:	f013 0f03 	tst.w	r3, #3
    6f68:	d1fb      	bne.n	6f62 <_usart_async_enable+0xa>
}
    6f6a:	4770      	bx	lr

00006f6c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    6f6c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    6f6e:	6299      	str	r1, [r3, #40]	; 0x28
    6f70:	4770      	bx	lr

00006f72 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    6f72:	6983      	ldr	r3, [r0, #24]
    6f74:	6299      	str	r1, [r3, #40]	; 0x28
    6f76:	4770      	bx	lr

00006f78 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    6f78:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    6f7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    6f7c:	b2c0      	uxtb	r0, r0
    6f7e:	4770      	bx	lr

00006f80 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    6f80:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6f82:	7e18      	ldrb	r0, [r3, #24]
}
    6f84:	f000 0001 	and.w	r0, r0, #1
    6f88:	4770      	bx	lr

00006f8a <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    6f8a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6f8c:	7e18      	ldrb	r0, [r3, #24]
}
    6f8e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6f92:	4770      	bx	lr

00006f94 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    6f94:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6f96:	7e18      	ldrb	r0, [r3, #24]
}
    6f98:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6f9c:	4770      	bx	lr

00006f9e <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    6f9e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6fa0:	2201      	movs	r2, #1
    6fa2:	759a      	strb	r2, [r3, #22]
    6fa4:	4770      	bx	lr

00006fa6 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    6fa6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6fa8:	2202      	movs	r2, #2
    6faa:	759a      	strb	r2, [r3, #22]
    6fac:	4770      	bx	lr
	...

00006fb0 <_usart_async_set_irq_state>:
{
    6fb0:	b570      	push	{r4, r5, r6, lr}
    6fb2:	460c      	mov	r4, r1
    6fb4:	4616      	mov	r6, r2
	ASSERT(device);
    6fb6:	4605      	mov	r5, r0
    6fb8:	f240 2236 	movw	r2, #566	; 0x236
    6fbc:	4915      	ldr	r1, [pc, #84]	; (7014 <_usart_async_set_irq_state+0x64>)
    6fbe:	3000      	adds	r0, #0
    6fc0:	bf18      	it	ne
    6fc2:	2001      	movne	r0, #1
    6fc4:	4b14      	ldr	r3, [pc, #80]	; (7018 <_usart_async_set_irq_state+0x68>)
    6fc6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    6fc8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    6fcc:	d10d      	bne.n	6fea <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    6fce:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6fd0:	b92e      	cbnz	r6, 6fde <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6fd2:	2201      	movs	r2, #1
    6fd4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    6fd6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6fd8:	2202      	movs	r2, #2
    6fda:	751a      	strb	r2, [r3, #20]
    6fdc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6fde:	2201      	movs	r2, #1
    6fe0:	759a      	strb	r2, [r3, #22]
    6fe2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6fe4:	2202      	movs	r2, #2
    6fe6:	759a      	strb	r2, [r3, #22]
    6fe8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    6fea:	2c01      	cmp	r4, #1
    6fec:	d002      	beq.n	6ff4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    6fee:	2c03      	cmp	r4, #3
    6ff0:	d008      	beq.n	7004 <_usart_async_set_irq_state+0x54>
    6ff2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    6ff4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    6ff6:	b916      	cbnz	r6, 6ffe <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    6ff8:	2204      	movs	r2, #4
    6ffa:	751a      	strb	r2, [r3, #20]
    6ffc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    6ffe:	2204      	movs	r2, #4
    7000:	759a      	strb	r2, [r3, #22]
    7002:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    7004:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7006:	b116      	cbz	r6, 700e <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    7008:	2280      	movs	r2, #128	; 0x80
    700a:	759a      	strb	r2, [r3, #22]
}
    700c:	e7f1      	b.n	6ff2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    700e:	2280      	movs	r2, #128	; 0x80
    7010:	751a      	strb	r2, [r3, #20]
    7012:	bd70      	pop	{r4, r5, r6, pc}
    7014:	0000d5bc 	.word	0x0000d5bc
    7018:	00005921 	.word	0x00005921

0000701c <_i2c_m_async_init>:
{
    701c:	b570      	push	{r4, r5, r6, lr}
    701e:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    7020:	4606      	mov	r6, r0
    7022:	f240 42d2 	movw	r2, #1234	; 0x4d2
    7026:	4918      	ldr	r1, [pc, #96]	; (7088 <_i2c_m_async_init+0x6c>)
    7028:	3000      	adds	r0, #0
    702a:	bf18      	it	ne
    702c:	2001      	movne	r0, #1
    702e:	4b17      	ldr	r3, [pc, #92]	; (708c <_i2c_m_async_init+0x70>)
    7030:	4798      	blx	r3
	i2c_dev->hw = hw;
    7032:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7034:	4629      	mov	r1, r5
    7036:	4630      	mov	r0, r6
    7038:	4b15      	ldr	r3, [pc, #84]	; (7090 <_i2c_m_async_init+0x74>)
    703a:	4798      	blx	r3
	if (init_status) {
    703c:	4604      	mov	r4, r0
    703e:	b108      	cbz	r0, 7044 <_i2c_m_async_init+0x28>
}
    7040:	4620      	mov	r0, r4
    7042:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7044:	4631      	mov	r1, r6
    7046:	4628      	mov	r0, r5
    7048:	4b12      	ldr	r3, [pc, #72]	; (7094 <_i2c_m_async_init+0x78>)
    704a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    704c:	4628      	mov	r0, r5
    704e:	4b12      	ldr	r3, [pc, #72]	; (7098 <_i2c_m_async_init+0x7c>)
    7050:	4798      	blx	r3
    7052:	1d01      	adds	r1, r0, #4
    7054:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7056:	2501      	movs	r5, #1
    7058:	f000 021f 	and.w	r2, r0, #31
    705c:	fa05 f202 	lsl.w	r2, r5, r2
    7060:	0943      	lsrs	r3, r0, #5
    7062:	009b      	lsls	r3, r3, #2
    7064:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7068:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    706c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7070:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7074:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7078:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    707c:	601a      	str	r2, [r3, #0]
		irq++;
    707e:	3001      	adds	r0, #1
    7080:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7082:	4281      	cmp	r1, r0
    7084:	d1e8      	bne.n	7058 <_i2c_m_async_init+0x3c>
    7086:	e7db      	b.n	7040 <_i2c_m_async_init+0x24>
    7088:	0000d5bc 	.word	0x0000d5bc
    708c:	00005921 	.word	0x00005921
    7090:	00006b71 	.word	0x00006b71
    7094:	00006869 	.word	0x00006869
    7098:	000068c9 	.word	0x000068c9

0000709c <_i2c_m_async_transfer>:
{
    709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70a0:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    70a2:	4605      	mov	r5, r0
    70a4:	f110 0800 	adds.w	r8, r0, #0
    70a8:	bf18      	it	ne
    70aa:	f04f 0801 	movne.w	r8, #1
    70ae:	4f45      	ldr	r7, [pc, #276]	; (71c4 <_i2c_m_async_transfer+0x128>)
    70b0:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    70b4:	4639      	mov	r1, r7
    70b6:	4640      	mov	r0, r8
    70b8:	4e43      	ldr	r6, [pc, #268]	; (71c8 <_i2c_m_async_transfer+0x12c>)
    70ba:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    70bc:	6928      	ldr	r0, [r5, #16]
    70be:	f240 5229 	movw	r2, #1321	; 0x529
    70c2:	4639      	mov	r1, r7
    70c4:	3000      	adds	r0, #0
    70c6:	bf18      	it	ne
    70c8:	2001      	movne	r0, #1
    70ca:	47b0      	blx	r6
	ASSERT(msg);
    70cc:	f240 522a 	movw	r2, #1322	; 0x52a
    70d0:	4639      	mov	r1, r7
    70d2:	1c20      	adds	r0, r4, #0
    70d4:	bf18      	it	ne
    70d6:	2001      	movne	r0, #1
    70d8:	47b0      	blx	r6
	if (msg->len == 0) {
    70da:	6860      	ldr	r0, [r4, #4]
    70dc:	2800      	cmp	r0, #0
    70de:	d06f      	beq.n	71c0 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    70e0:	886b      	ldrh	r3, [r5, #2]
    70e2:	f413 7f80 	tst.w	r3, #256	; 0x100
    70e6:	d169      	bne.n	71bc <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    70e8:	8863      	ldrh	r3, [r4, #2]
    70ea:	b29b      	uxth	r3, r3
    70ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    70f0:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    70f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    70f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    70fa:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    70fc:	6853      	ldr	r3, [r2, #4]
    70fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7102:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7104:	69d3      	ldr	r3, [r2, #28]
    7106:	f013 0f04 	tst.w	r3, #4
    710a:	d1fb      	bne.n	7104 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    710c:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    710e:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    7110:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    7114:	492b      	ldr	r1, [pc, #172]	; (71c4 <_i2c_m_async_transfer+0x128>)
    7116:	4640      	mov	r0, r8
    7118:	4b2b      	ldr	r3, [pc, #172]	; (71c8 <_i2c_m_async_transfer+0x12c>)
    711a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    711c:	686b      	ldr	r3, [r5, #4]
    711e:	2b01      	cmp	r3, #1
    7120:	d02a      	beq.n	7178 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7122:	6863      	ldr	r3, [r4, #4]
    7124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    7128:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    712a:	69e3      	ldr	r3, [r4, #28]
    712c:	f013 0f04 	tst.w	r3, #4
    7130:	d1fb      	bne.n	712a <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    7132:	882b      	ldrh	r3, [r5, #0]
    7134:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7138:	d02a      	beq.n	7190 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    713a:	886a      	ldrh	r2, [r5, #2]
    713c:	f012 0f01 	tst.w	r2, #1
    7140:	d004      	beq.n	714c <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    7142:	886a      	ldrh	r2, [r5, #2]
    7144:	b292      	uxth	r2, r2
    7146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    714a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    714c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    7150:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    7154:	69e3      	ldr	r3, [r4, #28]
    7156:	f013 0f04 	tst.w	r3, #4
    715a:	d1fb      	bne.n	7154 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    715c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    715e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7166:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7168:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    716a:	69e3      	ldr	r3, [r4, #28]
    716c:	f013 0f04 	tst.w	r3, #4
    7170:	d1fb      	bne.n	716a <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    7172:	2000      	movs	r0, #0
    7174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    7178:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    717c:	d0d1      	beq.n	7122 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    717e:	6863      	ldr	r3, [r4, #4]
    7180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    7184:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7186:	69e3      	ldr	r3, [r4, #28]
    7188:	f013 0f04 	tst.w	r3, #4
    718c:	d1fb      	bne.n	7186 <_i2c_m_async_transfer+0xea>
    718e:	e7d0      	b.n	7132 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7190:	8869      	ldrh	r1, [r5, #2]
    7192:	005a      	lsls	r2, r3, #1
    7194:	b2d2      	uxtb	r2, r2
    7196:	f001 0301 	and.w	r3, r1, #1
    719a:	431a      	orrs	r2, r3
    719c:	69e3      	ldr	r3, [r4, #28]
    719e:	f013 0f04 	tst.w	r3, #4
    71a2:	d1fb      	bne.n	719c <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    71a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    71a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    71aa:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    71ac:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    71ae:	69e3      	ldr	r3, [r4, #28]
    71b0:	f013 0f04 	tst.w	r3, #4
    71b4:	d1fb      	bne.n	71ae <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    71b6:	2000      	movs	r0, #0
    71b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    71bc:	f06f 0003 	mvn.w	r0, #3
}
    71c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71c4:	0000d5bc 	.word	0x0000d5bc
    71c8:	00005921 	.word	0x00005921

000071cc <_i2c_m_async_register_callback>:
	switch (type) {
    71cc:	2901      	cmp	r1, #1
    71ce:	d006      	beq.n	71de <_i2c_m_async_register_callback+0x12>
    71d0:	b119      	cbz	r1, 71da <_i2c_m_async_register_callback+0xe>
    71d2:	2902      	cmp	r1, #2
    71d4:	d005      	beq.n	71e2 <_i2c_m_async_register_callback+0x16>
}
    71d6:	2000      	movs	r0, #0
    71d8:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    71da:	6142      	str	r2, [r0, #20]
		break;
    71dc:	e7fb      	b.n	71d6 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    71de:	6182      	str	r2, [r0, #24]
		break;
    71e0:	e7f9      	b.n	71d6 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    71e2:	61c2      	str	r2, [r0, #28]
		break;
    71e4:	e7f7      	b.n	71d6 <_i2c_m_async_register_callback+0xa>
	...

000071e8 <SERCOM0_0_Handler>:
{
    71e8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    71ea:	4b02      	ldr	r3, [pc, #8]	; (71f4 <SERCOM0_0_Handler+0xc>)
    71ec:	6818      	ldr	r0, [r3, #0]
    71ee:	4b02      	ldr	r3, [pc, #8]	; (71f8 <SERCOM0_0_Handler+0x10>)
    71f0:	4798      	blx	r3
    71f2:	bd08      	pop	{r3, pc}
    71f4:	20000980 	.word	0x20000980
    71f8:	000067f9 	.word	0x000067f9

000071fc <SERCOM0_1_Handler>:
{
    71fc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    71fe:	4b02      	ldr	r3, [pc, #8]	; (7208 <SERCOM0_1_Handler+0xc>)
    7200:	6818      	ldr	r0, [r3, #0]
    7202:	4b02      	ldr	r3, [pc, #8]	; (720c <SERCOM0_1_Handler+0x10>)
    7204:	4798      	blx	r3
    7206:	bd08      	pop	{r3, pc}
    7208:	20000980 	.word	0x20000980
    720c:	000067f9 	.word	0x000067f9

00007210 <SERCOM0_2_Handler>:
{
    7210:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7212:	4b02      	ldr	r3, [pc, #8]	; (721c <SERCOM0_2_Handler+0xc>)
    7214:	6818      	ldr	r0, [r3, #0]
    7216:	4b02      	ldr	r3, [pc, #8]	; (7220 <SERCOM0_2_Handler+0x10>)
    7218:	4798      	blx	r3
    721a:	bd08      	pop	{r3, pc}
    721c:	20000980 	.word	0x20000980
    7220:	000067f9 	.word	0x000067f9

00007224 <SERCOM0_3_Handler>:
{
    7224:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7226:	4b02      	ldr	r3, [pc, #8]	; (7230 <SERCOM0_3_Handler+0xc>)
    7228:	6818      	ldr	r0, [r3, #0]
    722a:	4b02      	ldr	r3, [pc, #8]	; (7234 <SERCOM0_3_Handler+0x10>)
    722c:	4798      	blx	r3
    722e:	bd08      	pop	{r3, pc}
    7230:	20000980 	.word	0x20000980
    7234:	000067f9 	.word	0x000067f9

00007238 <SERCOM1_0_Handler>:
{
    7238:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    723a:	4b02      	ldr	r3, [pc, #8]	; (7244 <SERCOM1_0_Handler+0xc>)
    723c:	6858      	ldr	r0, [r3, #4]
    723e:	4b02      	ldr	r3, [pc, #8]	; (7248 <SERCOM1_0_Handler+0x10>)
    7240:	4798      	blx	r3
    7242:	bd08      	pop	{r3, pc}
    7244:	20000980 	.word	0x20000980
    7248:	000067f9 	.word	0x000067f9

0000724c <SERCOM1_1_Handler>:
{
    724c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    724e:	4b02      	ldr	r3, [pc, #8]	; (7258 <SERCOM1_1_Handler+0xc>)
    7250:	6858      	ldr	r0, [r3, #4]
    7252:	4b02      	ldr	r3, [pc, #8]	; (725c <SERCOM1_1_Handler+0x10>)
    7254:	4798      	blx	r3
    7256:	bd08      	pop	{r3, pc}
    7258:	20000980 	.word	0x20000980
    725c:	000067f9 	.word	0x000067f9

00007260 <SERCOM1_2_Handler>:
{
    7260:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7262:	4b02      	ldr	r3, [pc, #8]	; (726c <SERCOM1_2_Handler+0xc>)
    7264:	6858      	ldr	r0, [r3, #4]
    7266:	4b02      	ldr	r3, [pc, #8]	; (7270 <SERCOM1_2_Handler+0x10>)
    7268:	4798      	blx	r3
    726a:	bd08      	pop	{r3, pc}
    726c:	20000980 	.word	0x20000980
    7270:	000067f9 	.word	0x000067f9

00007274 <SERCOM1_3_Handler>:
{
    7274:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7276:	4b02      	ldr	r3, [pc, #8]	; (7280 <SERCOM1_3_Handler+0xc>)
    7278:	6858      	ldr	r0, [r3, #4]
    727a:	4b02      	ldr	r3, [pc, #8]	; (7284 <SERCOM1_3_Handler+0x10>)
    727c:	4798      	blx	r3
    727e:	bd08      	pop	{r3, pc}
    7280:	20000980 	.word	0x20000980
    7284:	000067f9 	.word	0x000067f9

00007288 <SERCOM3_0_Handler>:
{
    7288:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    728a:	4b02      	ldr	r3, [pc, #8]	; (7294 <SERCOM3_0_Handler+0xc>)
    728c:	6898      	ldr	r0, [r3, #8]
    728e:	4b02      	ldr	r3, [pc, #8]	; (7298 <SERCOM3_0_Handler+0x10>)
    7290:	4798      	blx	r3
    7292:	bd08      	pop	{r3, pc}
    7294:	20000980 	.word	0x20000980
    7298:	00006973 	.word	0x00006973

0000729c <SERCOM3_1_Handler>:
{
    729c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    729e:	4b02      	ldr	r3, [pc, #8]	; (72a8 <SERCOM3_1_Handler+0xc>)
    72a0:	6898      	ldr	r0, [r3, #8]
    72a2:	4b02      	ldr	r3, [pc, #8]	; (72ac <SERCOM3_1_Handler+0x10>)
    72a4:	4798      	blx	r3
    72a6:	bd08      	pop	{r3, pc}
    72a8:	20000980 	.word	0x20000980
    72ac:	00006973 	.word	0x00006973

000072b0 <SERCOM3_2_Handler>:
{
    72b0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    72b2:	4b02      	ldr	r3, [pc, #8]	; (72bc <SERCOM3_2_Handler+0xc>)
    72b4:	6898      	ldr	r0, [r3, #8]
    72b6:	4b02      	ldr	r3, [pc, #8]	; (72c0 <SERCOM3_2_Handler+0x10>)
    72b8:	4798      	blx	r3
    72ba:	bd08      	pop	{r3, pc}
    72bc:	20000980 	.word	0x20000980
    72c0:	00006973 	.word	0x00006973

000072c4 <SERCOM3_3_Handler>:
{
    72c4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    72c6:	4b02      	ldr	r3, [pc, #8]	; (72d0 <SERCOM3_3_Handler+0xc>)
    72c8:	6898      	ldr	r0, [r3, #8]
    72ca:	4b02      	ldr	r3, [pc, #8]	; (72d4 <SERCOM3_3_Handler+0x10>)
    72cc:	4798      	blx	r3
    72ce:	bd08      	pop	{r3, pc}
    72d0:	20000980 	.word	0x20000980
    72d4:	00006973 	.word	0x00006973

000072d8 <SERCOM4_0_Handler>:
{
    72d8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    72da:	4b02      	ldr	r3, [pc, #8]	; (72e4 <SERCOM4_0_Handler+0xc>)
    72dc:	68d8      	ldr	r0, [r3, #12]
    72de:	4b02      	ldr	r3, [pc, #8]	; (72e8 <SERCOM4_0_Handler+0x10>)
    72e0:	4798      	blx	r3
    72e2:	bd08      	pop	{r3, pc}
    72e4:	20000980 	.word	0x20000980
    72e8:	000067f9 	.word	0x000067f9

000072ec <SERCOM4_1_Handler>:
{
    72ec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    72ee:	4b02      	ldr	r3, [pc, #8]	; (72f8 <SERCOM4_1_Handler+0xc>)
    72f0:	68d8      	ldr	r0, [r3, #12]
    72f2:	4b02      	ldr	r3, [pc, #8]	; (72fc <SERCOM4_1_Handler+0x10>)
    72f4:	4798      	blx	r3
    72f6:	bd08      	pop	{r3, pc}
    72f8:	20000980 	.word	0x20000980
    72fc:	000067f9 	.word	0x000067f9

00007300 <SERCOM4_2_Handler>:
{
    7300:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7302:	4b02      	ldr	r3, [pc, #8]	; (730c <SERCOM4_2_Handler+0xc>)
    7304:	68d8      	ldr	r0, [r3, #12]
    7306:	4b02      	ldr	r3, [pc, #8]	; (7310 <SERCOM4_2_Handler+0x10>)
    7308:	4798      	blx	r3
    730a:	bd08      	pop	{r3, pc}
    730c:	20000980 	.word	0x20000980
    7310:	000067f9 	.word	0x000067f9

00007314 <SERCOM4_3_Handler>:
{
    7314:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7316:	4b02      	ldr	r3, [pc, #8]	; (7320 <SERCOM4_3_Handler+0xc>)
    7318:	68d8      	ldr	r0, [r3, #12]
    731a:	4b02      	ldr	r3, [pc, #8]	; (7324 <SERCOM4_3_Handler+0x10>)
    731c:	4798      	blx	r3
    731e:	bd08      	pop	{r3, pc}
    7320:	20000980 	.word	0x20000980
    7324:	000067f9 	.word	0x000067f9

00007328 <SERCOM5_0_Handler>:
{
    7328:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    732a:	4b02      	ldr	r3, [pc, #8]	; (7334 <SERCOM5_0_Handler+0xc>)
    732c:	6918      	ldr	r0, [r3, #16]
    732e:	4b02      	ldr	r3, [pc, #8]	; (7338 <SERCOM5_0_Handler+0x10>)
    7330:	4798      	blx	r3
    7332:	bd08      	pop	{r3, pc}
    7334:	20000980 	.word	0x20000980
    7338:	00006c55 	.word	0x00006c55

0000733c <SERCOM5_1_Handler>:
{
    733c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    733e:	4b02      	ldr	r3, [pc, #8]	; (7348 <SERCOM5_1_Handler+0xc>)
    7340:	6918      	ldr	r0, [r3, #16]
    7342:	4b02      	ldr	r3, [pc, #8]	; (734c <SERCOM5_1_Handler+0x10>)
    7344:	4798      	blx	r3
    7346:	bd08      	pop	{r3, pc}
    7348:	20000980 	.word	0x20000980
    734c:	00006c55 	.word	0x00006c55

00007350 <SERCOM5_2_Handler>:
{
    7350:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7352:	4b02      	ldr	r3, [pc, #8]	; (735c <SERCOM5_2_Handler+0xc>)
    7354:	6918      	ldr	r0, [r3, #16]
    7356:	4b02      	ldr	r3, [pc, #8]	; (7360 <SERCOM5_2_Handler+0x10>)
    7358:	4798      	blx	r3
    735a:	bd08      	pop	{r3, pc}
    735c:	20000980 	.word	0x20000980
    7360:	00006c55 	.word	0x00006c55

00007364 <SERCOM5_3_Handler>:
{
    7364:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7366:	4b02      	ldr	r3, [pc, #8]	; (7370 <SERCOM5_3_Handler+0xc>)
    7368:	6918      	ldr	r0, [r3, #16]
    736a:	4b02      	ldr	r3, [pc, #8]	; (7374 <SERCOM5_3_Handler+0x10>)
    736c:	4798      	blx	r3
    736e:	bd08      	pop	{r3, pc}
    7370:	20000980 	.word	0x20000980
    7374:	00006c55 	.word	0x00006c55

00007378 <SERCOM6_0_Handler>:
{
    7378:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    737a:	4b02      	ldr	r3, [pc, #8]	; (7384 <SERCOM6_0_Handler+0xc>)
    737c:	6958      	ldr	r0, [r3, #20]
    737e:	4b02      	ldr	r3, [pc, #8]	; (7388 <SERCOM6_0_Handler+0x10>)
    7380:	4798      	blx	r3
    7382:	bd08      	pop	{r3, pc}
    7384:	20000980 	.word	0x20000980
    7388:	000067f9 	.word	0x000067f9

0000738c <SERCOM6_1_Handler>:
{
    738c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    738e:	4b02      	ldr	r3, [pc, #8]	; (7398 <SERCOM6_1_Handler+0xc>)
    7390:	6958      	ldr	r0, [r3, #20]
    7392:	4b02      	ldr	r3, [pc, #8]	; (739c <SERCOM6_1_Handler+0x10>)
    7394:	4798      	blx	r3
    7396:	bd08      	pop	{r3, pc}
    7398:	20000980 	.word	0x20000980
    739c:	000067f9 	.word	0x000067f9

000073a0 <SERCOM6_2_Handler>:
{
    73a0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    73a2:	4b02      	ldr	r3, [pc, #8]	; (73ac <SERCOM6_2_Handler+0xc>)
    73a4:	6958      	ldr	r0, [r3, #20]
    73a6:	4b02      	ldr	r3, [pc, #8]	; (73b0 <SERCOM6_2_Handler+0x10>)
    73a8:	4798      	blx	r3
    73aa:	bd08      	pop	{r3, pc}
    73ac:	20000980 	.word	0x20000980
    73b0:	000067f9 	.word	0x000067f9

000073b4 <SERCOM6_3_Handler>:
{
    73b4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    73b6:	4b02      	ldr	r3, [pc, #8]	; (73c0 <SERCOM6_3_Handler+0xc>)
    73b8:	6958      	ldr	r0, [r3, #20]
    73ba:	4b02      	ldr	r3, [pc, #8]	; (73c4 <SERCOM6_3_Handler+0x10>)
    73bc:	4798      	blx	r3
    73be:	bd08      	pop	{r3, pc}
    73c0:	20000980 	.word	0x20000980
    73c4:	000067f9 	.word	0x000067f9

000073c8 <_spi_m_sync_init>:
{
    73c8:	b570      	push	{r4, r5, r6, lr}
    73ca:	4606      	mov	r6, r0
    73cc:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    73ce:	4608      	mov	r0, r1
    73d0:	4b5d      	ldr	r3, [pc, #372]	; (7548 <_spi_m_sync_init+0x180>)
    73d2:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    73d4:	2803      	cmp	r0, #3
    73d6:	d00c      	beq.n	73f2 <_spi_m_sync_init+0x2a>
    73d8:	2807      	cmp	r0, #7
    73da:	bf08      	it	eq
    73dc:	2301      	moveq	r3, #1
    73de:	d009      	beq.n	73f4 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    73e0:	2e00      	cmp	r6, #0
    73e2:	f000 809f 	beq.w	7524 <_spi_m_sync_init+0x15c>
    73e6:	2c00      	cmp	r4, #0
    73e8:	f040 80a5 	bne.w	7536 <_spi_m_sync_init+0x16e>
	return NULL;
    73ec:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    73ee:	2000      	movs	r0, #0
    73f0:	e009      	b.n	7406 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    73f2:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    73f4:	4d55      	ldr	r5, [pc, #340]	; (754c <_spi_m_sync_init+0x184>)
    73f6:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    73fa:	441d      	add	r5, r3
	ASSERT(dev && hw);
    73fc:	2e00      	cmp	r6, #0
    73fe:	d0f6      	beq.n	73ee <_spi_m_sync_init+0x26>
    7400:	2001      	movs	r0, #1
    7402:	2c00      	cmp	r4, #0
    7404:	d0f3      	beq.n	73ee <_spi_m_sync_init+0x26>
    7406:	f640 226e 	movw	r2, #2670	; 0xa6e
    740a:	4951      	ldr	r1, [pc, #324]	; (7550 <_spi_m_sync_init+0x188>)
    740c:	4b51      	ldr	r3, [pc, #324]	; (7554 <_spi_m_sync_init+0x18c>)
    740e:	4798      	blx	r3
	if (regs == NULL) {
    7410:	2d00      	cmp	r5, #0
    7412:	f000 8084 	beq.w	751e <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7416:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7418:	f013 0f01 	tst.w	r3, #1
    741c:	d11d      	bne.n	745a <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    741e:	682b      	ldr	r3, [r5, #0]
    7420:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7424:	69e3      	ldr	r3, [r4, #28]
    7426:	f013 0f03 	tst.w	r3, #3
    742a:	d1fb      	bne.n	7424 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    742c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    742e:	f013 0f02 	tst.w	r3, #2
    7432:	d00b      	beq.n	744c <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7434:	6823      	ldr	r3, [r4, #0]
    7436:	f023 0302 	bic.w	r3, r3, #2
    743a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    743c:	69e3      	ldr	r3, [r4, #28]
    743e:	f013 0f03 	tst.w	r3, #3
    7442:	d1fb      	bne.n	743c <_spi_m_sync_init+0x74>
    7444:	69e3      	ldr	r3, [r4, #28]
    7446:	f013 0f02 	tst.w	r3, #2
    744a:	d1fb      	bne.n	7444 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    744c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7450:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7452:	69e3      	ldr	r3, [r4, #28]
    7454:	f013 0f03 	tst.w	r3, #3
    7458:	d1fb      	bne.n	7452 <_spi_m_sync_init+0x8a>
    745a:	69e3      	ldr	r3, [r4, #28]
    745c:	f013 0f01 	tst.w	r3, #1
    7460:	d1fb      	bne.n	745a <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    7462:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7464:	682b      	ldr	r3, [r5, #0]
    7466:	f003 031c 	and.w	r3, r3, #28
    746a:	2b08      	cmp	r3, #8
    746c:	d02e      	beq.n	74cc <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    746e:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7472:	4937      	ldr	r1, [pc, #220]	; (7550 <_spi_m_sync_init+0x188>)
    7474:	1c20      	adds	r0, r4, #0
    7476:	bf18      	it	ne
    7478:	2001      	movne	r0, #1
    747a:	4b36      	ldr	r3, [pc, #216]	; (7554 <_spi_m_sync_init+0x18c>)
    747c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    747e:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7480:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7484:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7488:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    748a:	69e3      	ldr	r3, [r4, #28]
    748c:	f013 0f03 	tst.w	r3, #3
    7490:	d1fb      	bne.n	748a <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    7492:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7494:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7498:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    749c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    74a0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    74a2:	69e3      	ldr	r3, [r4, #28]
    74a4:	f013 0f17 	tst.w	r3, #23
    74a8:	d1fb      	bne.n	74a2 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    74aa:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    74ac:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    74ae:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    74b0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    74b4:	686b      	ldr	r3, [r5, #4]
    74b6:	f003 0307 	and.w	r3, r3, #7
    74ba:	2b00      	cmp	r3, #0
    74bc:	bf0c      	ite	eq
    74be:	2301      	moveq	r3, #1
    74c0:	2302      	movne	r3, #2
    74c2:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    74c4:	89eb      	ldrh	r3, [r5, #14]
    74c6:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    74c8:	2000      	movs	r0, #0
    74ca:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    74cc:	f640 1284 	movw	r2, #2436	; 0x984
    74d0:	491f      	ldr	r1, [pc, #124]	; (7550 <_spi_m_sync_init+0x188>)
    74d2:	1c20      	adds	r0, r4, #0
    74d4:	bf18      	it	ne
    74d6:	2001      	movne	r0, #1
    74d8:	4b1e      	ldr	r3, [pc, #120]	; (7554 <_spi_m_sync_init+0x18c>)
    74da:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    74dc:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    74de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    74e2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    74e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    74e8:	69e3      	ldr	r3, [r4, #28]
    74ea:	f013 0f03 	tst.w	r3, #3
    74ee:	d1fb      	bne.n	74e8 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    74f0:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    74f2:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    74f6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    74fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    74fe:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7502:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7504:	69e3      	ldr	r3, [r4, #28]
    7506:	f013 0f17 	tst.w	r3, #23
    750a:	d1fb      	bne.n	7504 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    750c:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    750e:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7510:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7512:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7516:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7518:	2b00      	cmp	r3, #0
    751a:	d1fc      	bne.n	7516 <_spi_m_sync_init+0x14e>
    751c:	e7ca      	b.n	74b4 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    751e:	f06f 000c 	mvn.w	r0, #12
    7522:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7524:	f640 226e 	movw	r2, #2670	; 0xa6e
    7528:	4909      	ldr	r1, [pc, #36]	; (7550 <_spi_m_sync_init+0x188>)
    752a:	2000      	movs	r0, #0
    752c:	4b09      	ldr	r3, [pc, #36]	; (7554 <_spi_m_sync_init+0x18c>)
    752e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7530:	f06f 000c 	mvn.w	r0, #12
    7534:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7536:	f640 226e 	movw	r2, #2670	; 0xa6e
    753a:	4905      	ldr	r1, [pc, #20]	; (7550 <_spi_m_sync_init+0x188>)
    753c:	2001      	movs	r0, #1
    753e:	4b05      	ldr	r3, [pc, #20]	; (7554 <_spi_m_sync_init+0x18c>)
    7540:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7542:	f06f 000c 	mvn.w	r0, #12
    7546:	bd70      	pop	{r4, r5, r6, pc}
    7548:	000067b5 	.word	0x000067b5
    754c:	0000d598 	.word	0x0000d598
    7550:	0000d5bc 	.word	0x0000d5bc
    7554:	00005921 	.word	0x00005921

00007558 <_spi_m_async_init>:
{
    7558:	b538      	push	{r3, r4, r5, lr}
    755a:	4604      	mov	r4, r0
    755c:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    755e:	4b15      	ldr	r3, [pc, #84]	; (75b4 <_spi_m_async_init+0x5c>)
    7560:	4798      	blx	r3
	if (rc < 0) {
    7562:	2800      	cmp	r0, #0
    7564:	db24      	blt.n	75b0 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    7566:	4621      	mov	r1, r4
    7568:	4628      	mov	r0, r5
    756a:	4b13      	ldr	r3, [pc, #76]	; (75b8 <_spi_m_async_init+0x60>)
    756c:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    756e:	2300      	movs	r3, #0
    7570:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    7572:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    7574:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    7576:	4628      	mov	r0, r5
    7578:	4b10      	ldr	r3, [pc, #64]	; (75bc <_spi_m_async_init+0x64>)
    757a:	4798      	blx	r3
    757c:	1d01      	adds	r1, r0, #4
    757e:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7580:	2401      	movs	r4, #1
    7582:	f000 021f 	and.w	r2, r0, #31
    7586:	fa04 f202 	lsl.w	r2, r4, r2
    758a:	0943      	lsrs	r3, r0, #5
    758c:	009b      	lsls	r3, r3, #2
    758e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7592:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    759a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    759e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    75a6:	3001      	adds	r0, #1
    75a8:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    75aa:	4281      	cmp	r1, r0
    75ac:	d1e9      	bne.n	7582 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    75ae:	2000      	movs	r0, #0
}
    75b0:	bd38      	pop	{r3, r4, r5, pc}
    75b2:	bf00      	nop
    75b4:	000073c9 	.word	0x000073c9
    75b8:	00006869 	.word	0x00006869
    75bc:	000068c9 	.word	0x000068c9

000075c0 <_spi_m_async_enable>:
{
    75c0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    75c2:	4604      	mov	r4, r0
    75c4:	b160      	cbz	r0, 75e0 <_spi_m_async_enable+0x20>
    75c6:	6800      	ldr	r0, [r0, #0]
    75c8:	3000      	adds	r0, #0
    75ca:	bf18      	it	ne
    75cc:	2001      	movne	r0, #1
    75ce:	f640 22db 	movw	r2, #2779	; 0xadb
    75d2:	4904      	ldr	r1, [pc, #16]	; (75e4 <_spi_m_async_enable+0x24>)
    75d4:	4b04      	ldr	r3, [pc, #16]	; (75e8 <_spi_m_async_enable+0x28>)
    75d6:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    75d8:	6820      	ldr	r0, [r4, #0]
    75da:	4b04      	ldr	r3, [pc, #16]	; (75ec <_spi_m_async_enable+0x2c>)
    75dc:	4798      	blx	r3
}
    75de:	bd10      	pop	{r4, pc}
    75e0:	2000      	movs	r0, #0
    75e2:	e7f4      	b.n	75ce <_spi_m_async_enable+0xe>
    75e4:	0000d5bc 	.word	0x0000d5bc
    75e8:	00005921 	.word	0x00005921
    75ec:	00006901 	.word	0x00006901

000075f0 <_spi_m_async_set_mode>:
{
    75f0:	b538      	push	{r3, r4, r5, lr}
    75f2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    75f4:	4604      	mov	r4, r0
    75f6:	b168      	cbz	r0, 7614 <_spi_m_async_set_mode+0x24>
    75f8:	6800      	ldr	r0, [r0, #0]
    75fa:	3000      	adds	r0, #0
    75fc:	bf18      	it	ne
    75fe:	2001      	movne	r0, #1
    7600:	f640 320c 	movw	r2, #2828	; 0xb0c
    7604:	4904      	ldr	r1, [pc, #16]	; (7618 <_spi_m_async_set_mode+0x28>)
    7606:	4b05      	ldr	r3, [pc, #20]	; (761c <_spi_m_async_set_mode+0x2c>)
    7608:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    760a:	4629      	mov	r1, r5
    760c:	6820      	ldr	r0, [r4, #0]
    760e:	4b04      	ldr	r3, [pc, #16]	; (7620 <_spi_m_async_set_mode+0x30>)
    7610:	4798      	blx	r3
}
    7612:	bd38      	pop	{r3, r4, r5, pc}
    7614:	2000      	movs	r0, #0
    7616:	e7f3      	b.n	7600 <_spi_m_async_set_mode+0x10>
    7618:	0000d5bc 	.word	0x0000d5bc
    761c:	00005921 	.word	0x00005921
    7620:	00006941 	.word	0x00006941

00007624 <_spi_m_async_set_baudrate>:
{
    7624:	b538      	push	{r3, r4, r5, lr}
    7626:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    7628:	4605      	mov	r5, r0
    762a:	b198      	cbz	r0, 7654 <_spi_m_async_set_baudrate+0x30>
    762c:	6800      	ldr	r0, [r0, #0]
    762e:	3000      	adds	r0, #0
    7630:	bf18      	it	ne
    7632:	2001      	movne	r0, #1
    7634:	f640 323b 	movw	r2, #2875	; 0xb3b
    7638:	4907      	ldr	r1, [pc, #28]	; (7658 <_spi_m_async_set_baudrate+0x34>)
    763a:	4b08      	ldr	r3, [pc, #32]	; (765c <_spi_m_async_set_baudrate+0x38>)
    763c:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    763e:	682b      	ldr	r3, [r5, #0]
    7640:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7642:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    7646:	bf03      	ittte	eq
    7648:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    764a:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    764c:	2000      	moveq	r0, #0
		return ERR_BUSY;
    764e:	f06f 0003 	mvnne.w	r0, #3
}
    7652:	bd38      	pop	{r3, r4, r5, pc}
    7654:	2000      	movs	r0, #0
    7656:	e7ed      	b.n	7634 <_spi_m_async_set_baudrate+0x10>
    7658:	0000d5bc 	.word	0x0000d5bc
    765c:	00005921 	.word	0x00005921

00007660 <_spi_m_async_enable_tx>:
{
    7660:	b538      	push	{r3, r4, r5, lr}
    7662:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    7664:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    7666:	b160      	cbz	r0, 7682 <_spi_m_async_enable_tx+0x22>
    7668:	1c20      	adds	r0, r4, #0
    766a:	bf18      	it	ne
    766c:	2001      	movne	r0, #1
    766e:	f640 32fe 	movw	r2, #3070	; 0xbfe
    7672:	4906      	ldr	r1, [pc, #24]	; (768c <_spi_m_async_enable_tx+0x2c>)
    7674:	4b06      	ldr	r3, [pc, #24]	; (7690 <_spi_m_async_enable_tx+0x30>)
    7676:	4798      	blx	r3
	if (state) {
    7678:	b92d      	cbnz	r5, 7686 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    767a:	2301      	movs	r3, #1
    767c:	7523      	strb	r3, [r4, #20]
}
    767e:	2000      	movs	r0, #0
    7680:	bd38      	pop	{r3, r4, r5, pc}
    7682:	2000      	movs	r0, #0
    7684:	e7f3      	b.n	766e <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    7686:	2301      	movs	r3, #1
    7688:	75a3      	strb	r3, [r4, #22]
    768a:	e7f8      	b.n	767e <_spi_m_async_enable_tx+0x1e>
    768c:	0000d5bc 	.word	0x0000d5bc
    7690:	00005921 	.word	0x00005921

00007694 <_spi_m_async_enable_rx>:
{
    7694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7696:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    7698:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    769a:	4e0c      	ldr	r6, [pc, #48]	; (76cc <_spi_m_async_enable_rx+0x38>)
    769c:	f640 4212 	movw	r2, #3090	; 0xc12
    76a0:	4631      	mov	r1, r6
    76a2:	3000      	adds	r0, #0
    76a4:	bf18      	it	ne
    76a6:	2001      	movne	r0, #1
    76a8:	4d09      	ldr	r5, [pc, #36]	; (76d0 <_spi_m_async_enable_rx+0x3c>)
    76aa:	47a8      	blx	r5
	ASSERT(hw);
    76ac:	f640 4213 	movw	r2, #3091	; 0xc13
    76b0:	4631      	mov	r1, r6
    76b2:	1c20      	adds	r0, r4, #0
    76b4:	bf18      	it	ne
    76b6:	2001      	movne	r0, #1
    76b8:	47a8      	blx	r5
	if (state) {
    76ba:	b91f      	cbnz	r7, 76c4 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    76bc:	2304      	movs	r3, #4
    76be:	7523      	strb	r3, [r4, #20]
}
    76c0:	2000      	movs	r0, #0
    76c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    76c4:	2304      	movs	r3, #4
    76c6:	75a3      	strb	r3, [r4, #22]
    76c8:	e7fa      	b.n	76c0 <_spi_m_async_enable_rx+0x2c>
    76ca:	bf00      	nop
    76cc:	0000d5bc 	.word	0x0000d5bc
    76d0:	00005921 	.word	0x00005921

000076d4 <_spi_m_async_enable_tx_complete>:
{
    76d4:	b538      	push	{r3, r4, r5, lr}
    76d6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    76d8:	4604      	mov	r4, r0
    76da:	b170      	cbz	r0, 76fa <_spi_m_async_enable_tx_complete+0x26>
    76dc:	6800      	ldr	r0, [r0, #0]
    76de:	3000      	adds	r0, #0
    76e0:	bf18      	it	ne
    76e2:	2001      	movne	r0, #1
    76e4:	f640 4225 	movw	r2, #3109	; 0xc25
    76e8:	4907      	ldr	r1, [pc, #28]	; (7708 <_spi_m_async_enable_tx_complete+0x34>)
    76ea:	4b08      	ldr	r3, [pc, #32]	; (770c <_spi_m_async_enable_tx_complete+0x38>)
    76ec:	4798      	blx	r3
	if (state) {
    76ee:	b935      	cbnz	r5, 76fe <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    76f0:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    76f2:	2202      	movs	r2, #2
    76f4:	751a      	strb	r2, [r3, #20]
}
    76f6:	2000      	movs	r0, #0
    76f8:	bd38      	pop	{r3, r4, r5, pc}
    76fa:	2000      	movs	r0, #0
    76fc:	e7f2      	b.n	76e4 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    76fe:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7700:	2202      	movs	r2, #2
    7702:	759a      	strb	r2, [r3, #22]
    7704:	e7f7      	b.n	76f6 <_spi_m_async_enable_tx_complete+0x22>
    7706:	bf00      	nop
    7708:	0000d5bc 	.word	0x0000d5bc
    770c:	00005921 	.word	0x00005921

00007710 <_spi_m_async_write_one>:
{
    7710:	b538      	push	{r3, r4, r5, lr}
    7712:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7714:	4604      	mov	r4, r0
    7716:	b160      	cbz	r0, 7732 <_spi_m_async_write_one+0x22>
    7718:	6800      	ldr	r0, [r0, #0]
    771a:	3000      	adds	r0, #0
    771c:	bf18      	it	ne
    771e:	2001      	movne	r0, #1
    7720:	f640 4237 	movw	r2, #3127	; 0xc37
    7724:	4904      	ldr	r1, [pc, #16]	; (7738 <_spi_m_async_write_one+0x28>)
    7726:	4b05      	ldr	r3, [pc, #20]	; (773c <_spi_m_async_write_one+0x2c>)
    7728:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    772a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    772c:	629d      	str	r5, [r3, #40]	; 0x28
}
    772e:	2000      	movs	r0, #0
    7730:	bd38      	pop	{r3, r4, r5, pc}
    7732:	2000      	movs	r0, #0
    7734:	e7f4      	b.n	7720 <_spi_m_async_write_one+0x10>
    7736:	bf00      	nop
    7738:	0000d5bc 	.word	0x0000d5bc
    773c:	00005921 	.word	0x00005921

00007740 <_spi_m_async_read_one>:
{
    7740:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7742:	4604      	mov	r4, r0
    7744:	b160      	cbz	r0, 7760 <_spi_m_async_read_one+0x20>
    7746:	6800      	ldr	r0, [r0, #0]
    7748:	3000      	adds	r0, #0
    774a:	bf18      	it	ne
    774c:	2001      	movne	r0, #1
    774e:	f640 4252 	movw	r2, #3154	; 0xc52
    7752:	4904      	ldr	r1, [pc, #16]	; (7764 <_spi_m_async_read_one+0x24>)
    7754:	4b04      	ldr	r3, [pc, #16]	; (7768 <_spi_m_async_read_one+0x28>)
    7756:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7758:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    775a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    775c:	b280      	uxth	r0, r0
    775e:	bd10      	pop	{r4, pc}
    7760:	2000      	movs	r0, #0
    7762:	e7f4      	b.n	774e <_spi_m_async_read_one+0xe>
    7764:	0000d5bc 	.word	0x0000d5bc
    7768:	00005921 	.word	0x00005921

0000776c <_spi_m_async_register_callback>:
{
    776c:	b570      	push	{r4, r5, r6, lr}
    776e:	460d      	mov	r5, r1
    7770:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    7772:	4604      	mov	r4, r0
    7774:	b168      	cbz	r0, 7792 <_spi_m_async_register_callback+0x26>
    7776:	2903      	cmp	r1, #3
    7778:	bf8c      	ite	hi
    777a:	2000      	movhi	r0, #0
    777c:	2001      	movls	r0, #1
    777e:	f640 426b 	movw	r2, #3179	; 0xc6b
    7782:	4905      	ldr	r1, [pc, #20]	; (7798 <_spi_m_async_register_callback+0x2c>)
    7784:	4b05      	ldr	r3, [pc, #20]	; (779c <_spi_m_async_register_callback+0x30>)
    7786:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    7788:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    778c:	60a6      	str	r6, [r4, #8]
}
    778e:	2000      	movs	r0, #0
    7790:	bd70      	pop	{r4, r5, r6, pc}
    7792:	2000      	movs	r0, #0
    7794:	e7f3      	b.n	777e <_spi_m_async_register_callback+0x12>
    7796:	bf00      	nop
    7798:	0000d5bc 	.word	0x0000d5bc
    779c:	00005921 	.word	0x00005921

000077a0 <_spi_m_async_set_irq_state>:
{
    77a0:	b570      	push	{r4, r5, r6, lr}
    77a2:	460c      	mov	r4, r1
    77a4:	4615      	mov	r5, r2
	ASSERT(device);
    77a6:	4606      	mov	r6, r0
    77a8:	f640 42ac 	movw	r2, #3244	; 0xcac
    77ac:	4908      	ldr	r1, [pc, #32]	; (77d0 <_spi_m_async_set_irq_state+0x30>)
    77ae:	3000      	adds	r0, #0
    77b0:	bf18      	it	ne
    77b2:	2001      	movne	r0, #1
    77b4:	4b07      	ldr	r3, [pc, #28]	; (77d4 <_spi_m_async_set_irq_state+0x34>)
    77b6:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    77b8:	2c03      	cmp	r4, #3
    77ba:	d000      	beq.n	77be <_spi_m_async_set_irq_state+0x1e>
    77bc:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    77be:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    77c0:	b115      	cbz	r5, 77c8 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    77c2:	2280      	movs	r2, #128	; 0x80
    77c4:	759a      	strb	r2, [r3, #22]
}
    77c6:	e7f9      	b.n	77bc <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    77c8:	2280      	movs	r2, #128	; 0x80
    77ca:	751a      	strb	r2, [r3, #20]
    77cc:	bd70      	pop	{r4, r5, r6, pc}
    77ce:	bf00      	nop
    77d0:	0000d5bc 	.word	0x0000d5bc
    77d4:	00005921 	.word	0x00005921

000077d8 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    77d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77dc:	4605      	mov	r5, r0
    77de:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    77e0:	4608      	mov	r0, r1
    77e2:	4b52      	ldr	r3, [pc, #328]	; (792c <_spi_m_dma_init+0x154>)
    77e4:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    77e6:	2803      	cmp	r0, #3
    77e8:	d00c      	beq.n	7804 <_spi_m_dma_init+0x2c>
    77ea:	2807      	cmp	r0, #7
    77ec:	bf08      	it	eq
    77ee:	2301      	moveq	r3, #1
    77f0:	d009      	beq.n	7806 <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    77f2:	2d00      	cmp	r5, #0
    77f4:	f000 8086 	beq.w	7904 <_spi_m_dma_init+0x12c>
    77f8:	2c00      	cmp	r4, #0
    77fa:	f040 808d 	bne.w	7918 <_spi_m_dma_init+0x140>
	return NULL;
    77fe:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7800:	2000      	movs	r0, #0
    7802:	e009      	b.n	7818 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    7804:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7806:	4e4a      	ldr	r6, [pc, #296]	; (7930 <_spi_m_dma_init+0x158>)
    7808:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    780c:	441e      	add	r6, r3
	ASSERT(dev && hw);
    780e:	2d00      	cmp	r5, #0
    7810:	d0f6      	beq.n	7800 <_spi_m_dma_init+0x28>
    7812:	2001      	movs	r0, #1
    7814:	2c00      	cmp	r4, #0
    7816:	d0f3      	beq.n	7800 <_spi_m_dma_init+0x28>
    7818:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    781c:	4945      	ldr	r1, [pc, #276]	; (7934 <_spi_m_dma_init+0x15c>)
    781e:	4b46      	ldr	r3, [pc, #280]	; (7938 <_spi_m_dma_init+0x160>)
    7820:	4798      	blx	r3

	if (regs == NULL) {
    7822:	2e00      	cmp	r6, #0
    7824:	d06a      	beq.n	78fc <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7826:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7828:	f013 0f01 	tst.w	r3, #1
    782c:	d11d      	bne.n	786a <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    782e:	6833      	ldr	r3, [r6, #0]
    7830:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7834:	69e3      	ldr	r3, [r4, #28]
    7836:	f013 0f03 	tst.w	r3, #3
    783a:	d1fb      	bne.n	7834 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    783c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    783e:	f013 0f02 	tst.w	r3, #2
    7842:	d00b      	beq.n	785c <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7844:	6823      	ldr	r3, [r4, #0]
    7846:	f023 0302 	bic.w	r3, r3, #2
    784a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    784c:	69e3      	ldr	r3, [r4, #28]
    784e:	f013 0f03 	tst.w	r3, #3
    7852:	d1fb      	bne.n	784c <_spi_m_dma_init+0x74>
    7854:	69e3      	ldr	r3, [r4, #28]
    7856:	f013 0f02 	tst.w	r3, #2
    785a:	d1fb      	bne.n	7854 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    785c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7860:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7862:	69e3      	ldr	r3, [r4, #28]
    7864:	f013 0f03 	tst.w	r3, #3
    7868:	d1fb      	bne.n	7862 <_spi_m_dma_init+0x8a>
    786a:	69e3      	ldr	r3, [r4, #28]
    786c:	f013 0f01 	tst.w	r3, #1
    7870:	d1fb      	bne.n	786a <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    7872:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    7874:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7878:	492e      	ldr	r1, [pc, #184]	; (7934 <_spi_m_dma_init+0x15c>)
    787a:	1c20      	adds	r0, r4, #0
    787c:	bf18      	it	ne
    787e:	2001      	movne	r0, #1
    7880:	4b2d      	ldr	r3, [pc, #180]	; (7938 <_spi_m_dma_init+0x160>)
    7882:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7884:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    7886:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    788a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    788e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7890:	69e3      	ldr	r3, [r4, #28]
    7892:	f013 0f03 	tst.w	r3, #3
    7896:	d1fb      	bne.n	7890 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    7898:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    789a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    789e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    78a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    78a6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    78a8:	69e3      	ldr	r3, [r4, #28]
    78aa:	f013 0f17 	tst.w	r3, #23
    78ae:	d1fb      	bne.n	78a8 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    78b0:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    78b2:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    78b4:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    78b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    78ba:	f105 0818 	add.w	r8, r5, #24
    78be:	4620      	mov	r0, r4
    78c0:	4b1e      	ldr	r3, [pc, #120]	; (793c <_spi_m_dma_init+0x164>)
    78c2:	4798      	blx	r3
    78c4:	4601      	mov	r1, r0
    78c6:	4640      	mov	r0, r8
    78c8:	4f1d      	ldr	r7, [pc, #116]	; (7940 <_spi_m_dma_init+0x168>)
    78ca:	47b8      	blx	r7
	dev->resource->back                 = dev;
    78cc:	69ab      	ldr	r3, [r5, #24]
    78ce:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    78d0:	69ab      	ldr	r3, [r5, #24]
    78d2:	4a1c      	ldr	r2, [pc, #112]	; (7944 <_spi_m_dma_init+0x16c>)
    78d4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    78d6:	69ab      	ldr	r3, [r5, #24]
    78d8:	4e1b      	ldr	r6, [pc, #108]	; (7948 <_spi_m_dma_init+0x170>)
    78da:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    78dc:	4620      	mov	r0, r4
    78de:	4b1b      	ldr	r3, [pc, #108]	; (794c <_spi_m_dma_init+0x174>)
    78e0:	4798      	blx	r3
    78e2:	4601      	mov	r1, r0
    78e4:	4640      	mov	r0, r8
    78e6:	47b8      	blx	r7
	dev->resource->back                 = dev;
    78e8:	69ab      	ldr	r3, [r5, #24]
    78ea:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    78ec:	69ab      	ldr	r3, [r5, #24]
    78ee:	4a18      	ldr	r2, [pc, #96]	; (7950 <_spi_m_dma_init+0x178>)
    78f0:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    78f2:	69ab      	ldr	r3, [r5, #24]
    78f4:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    78f6:	2000      	movs	r0, #0
    78f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    78fc:	f06f 000c 	mvn.w	r0, #12
    7900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7904:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7908:	490a      	ldr	r1, [pc, #40]	; (7934 <_spi_m_dma_init+0x15c>)
    790a:	2000      	movs	r0, #0
    790c:	4b0a      	ldr	r3, [pc, #40]	; (7938 <_spi_m_dma_init+0x160>)
    790e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7910:	f06f 000c 	mvn.w	r0, #12
    7914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7918:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    791c:	4905      	ldr	r1, [pc, #20]	; (7934 <_spi_m_dma_init+0x15c>)
    791e:	2001      	movs	r0, #1
    7920:	4b05      	ldr	r3, [pc, #20]	; (7938 <_spi_m_dma_init+0x160>)
    7922:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7924:	f06f 000c 	mvn.w	r0, #12
    7928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    792c:	000067b5 	.word	0x000067b5
    7930:	0000d598 	.word	0x0000d598
    7934:	0000d5bc 	.word	0x0000d5bc
    7938:	00005921 	.word	0x00005921
    793c:	000069d5 	.word	0x000069d5
    7940:	000061bd 	.word	0x000061bd
    7944:	000069e9 	.word	0x000069e9
    7948:	00006a01 	.word	0x00006a01
    794c:	000069c1 	.word	0x000069c1
    7950:	000069f5 	.word	0x000069f5

00007954 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    7954:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7956:	4604      	mov	r4, r0
    7958:	b160      	cbz	r0, 7974 <_spi_m_dma_enable+0x20>
    795a:	6800      	ldr	r0, [r0, #0]
    795c:	3000      	adds	r0, #0
    795e:	bf18      	it	ne
    7960:	2001      	movne	r0, #1
    7962:	f640 52c9 	movw	r2, #3529	; 0xdc9
    7966:	4904      	ldr	r1, [pc, #16]	; (7978 <_spi_m_dma_enable+0x24>)
    7968:	4b04      	ldr	r3, [pc, #16]	; (797c <_spi_m_dma_enable+0x28>)
    796a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    796c:	6820      	ldr	r0, [r4, #0]
    796e:	4b04      	ldr	r3, [pc, #16]	; (7980 <_spi_m_dma_enable+0x2c>)
    7970:	4798      	blx	r3
}
    7972:	bd10      	pop	{r4, pc}
    7974:	2000      	movs	r0, #0
    7976:	e7f4      	b.n	7962 <_spi_m_dma_enable+0xe>
    7978:	0000d5bc 	.word	0x0000d5bc
    797c:	00005921 	.word	0x00005921
    7980:	000068dd 	.word	0x000068dd

00007984 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    7984:	b570      	push	{r4, r5, r6, lr}
    7986:	4605      	mov	r5, r0
    7988:	4614      	mov	r4, r2
	switch (type) {
    798a:	2901      	cmp	r1, #1
    798c:	d00e      	beq.n	79ac <_spi_m_dma_register_callback+0x28>
    798e:	b111      	cbz	r1, 7996 <_spi_m_dma_register_callback+0x12>
    7990:	2902      	cmp	r1, #2
    7992:	d016      	beq.n	79c2 <_spi_m_dma_register_callback+0x3e>
    7994:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    7996:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7998:	6800      	ldr	r0, [r0, #0]
    799a:	4b13      	ldr	r3, [pc, #76]	; (79e8 <_spi_m_dma_register_callback+0x64>)
    799c:	4798      	blx	r3
    799e:	1c22      	adds	r2, r4, #0
    79a0:	bf18      	it	ne
    79a2:	2201      	movne	r2, #1
    79a4:	2100      	movs	r1, #0
    79a6:	4b11      	ldr	r3, [pc, #68]	; (79ec <_spi_m_dma_register_callback+0x68>)
    79a8:	4798      	blx	r3
		break;
    79aa:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    79ac:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    79ae:	6800      	ldr	r0, [r0, #0]
    79b0:	4b0f      	ldr	r3, [pc, #60]	; (79f0 <_spi_m_dma_register_callback+0x6c>)
    79b2:	4798      	blx	r3
    79b4:	1c22      	adds	r2, r4, #0
    79b6:	bf18      	it	ne
    79b8:	2201      	movne	r2, #1
    79ba:	2100      	movs	r1, #0
    79bc:	4b0b      	ldr	r3, [pc, #44]	; (79ec <_spi_m_dma_register_callback+0x68>)
    79be:	4798      	blx	r3
		break;
    79c0:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    79c2:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    79c4:	6800      	ldr	r0, [r0, #0]
    79c6:	4b0a      	ldr	r3, [pc, #40]	; (79f0 <_spi_m_dma_register_callback+0x6c>)
    79c8:	4798      	blx	r3
    79ca:	3400      	adds	r4, #0
    79cc:	bf18      	it	ne
    79ce:	2401      	movne	r4, #1
    79d0:	4622      	mov	r2, r4
    79d2:	2101      	movs	r1, #1
    79d4:	4e05      	ldr	r6, [pc, #20]	; (79ec <_spi_m_dma_register_callback+0x68>)
    79d6:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    79d8:	6828      	ldr	r0, [r5, #0]
    79da:	4b03      	ldr	r3, [pc, #12]	; (79e8 <_spi_m_dma_register_callback+0x64>)
    79dc:	4798      	blx	r3
    79de:	4622      	mov	r2, r4
    79e0:	2101      	movs	r1, #1
    79e2:	47b0      	blx	r6
    79e4:	bd70      	pop	{r4, r5, r6, pc}
    79e6:	bf00      	nop
    79e8:	000069c1 	.word	0x000069c1
    79ec:	00006095 	.word	0x00006095
    79f0:	000069d5 	.word	0x000069d5

000079f4 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    79f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79f8:	4605      	mov	r5, r0
    79fa:	4689      	mov	r9, r1
    79fc:	4617      	mov	r7, r2
    79fe:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7a00:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7a04:	4658      	mov	r0, fp
    7a06:	4b46      	ldr	r3, [pc, #280]	; (7b20 <_spi_m_dma_transfer+0x12c>)
    7a08:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7a0a:	2803      	cmp	r0, #3
    7a0c:	d053      	beq.n	7ab6 <_spi_m_dma_transfer+0xc2>
    7a0e:	2807      	cmp	r0, #7
    7a10:	bf08      	it	eq
    7a12:	2201      	moveq	r2, #1
    7a14:	d050      	beq.n	7ab8 <_spi_m_dma_transfer+0xc4>
	return NULL;
    7a16:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    7a1a:	4658      	mov	r0, fp
    7a1c:	4b41      	ldr	r3, [pc, #260]	; (7b24 <_spi_m_dma_transfer+0x130>)
    7a1e:	4798      	blx	r3
    7a20:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    7a22:	4658      	mov	r0, fp
    7a24:	4b40      	ldr	r3, [pc, #256]	; (7b28 <_spi_m_dma_transfer+0x134>)
    7a26:	4798      	blx	r3
    7a28:	4604      	mov	r4, r0

	if (rxbuf) {
    7a2a:	2f00      	cmp	r7, #0
    7a2c:	d04b      	beq.n	7ac6 <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7a2e:	2d00      	cmp	r5, #0
    7a30:	d047      	beq.n	7ac2 <_spi_m_dma_transfer+0xce>
    7a32:	f11b 0000 	adds.w	r0, fp, #0
    7a36:	bf18      	it	ne
    7a38:	2001      	movne	r0, #1
    7a3a:	f640 5213 	movw	r2, #3347	; 0xd13
    7a3e:	493b      	ldr	r1, [pc, #236]	; (7b2c <_spi_m_dma_transfer+0x138>)
    7a40:	4b3b      	ldr	r3, [pc, #236]	; (7b30 <_spi_m_dma_transfer+0x13c>)
    7a42:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    7a44:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7a46:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7a48:	f013 0f04 	tst.w	r3, #4
    7a4c:	d107      	bne.n	7a5e <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    7a4e:	6853      	ldr	r3, [r2, #4]
    7a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7a54:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a56:	69d3      	ldr	r3, [r2, #28]
    7a58:	f013 0f17 	tst.w	r3, #23
    7a5c:	d1fb      	bne.n	7a56 <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7a5e:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    7a60:	3128      	adds	r1, #40	; 0x28
    7a62:	4630      	mov	r0, r6
    7a64:	4b33      	ldr	r3, [pc, #204]	; (7b34 <_spi_m_dma_transfer+0x140>)
    7a66:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    7a68:	4639      	mov	r1, r7
    7a6a:	4630      	mov	r0, r6
    7a6c:	4b32      	ldr	r3, [pc, #200]	; (7b38 <_spi_m_dma_transfer+0x144>)
    7a6e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    7a70:	4641      	mov	r1, r8
    7a72:	4630      	mov	r0, r6
    7a74:	4b31      	ldr	r3, [pc, #196]	; (7b3c <_spi_m_dma_transfer+0x148>)
    7a76:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    7a78:	2100      	movs	r1, #0
    7a7a:	4630      	mov	r0, r6
    7a7c:	4b30      	ldr	r3, [pc, #192]	; (7b40 <_spi_m_dma_transfer+0x14c>)
    7a7e:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    7a80:	f1b9 0f00 	cmp.w	r9, #0
    7a84:	d039      	beq.n	7afa <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    7a86:	4649      	mov	r1, r9
    7a88:	4620      	mov	r0, r4
    7a8a:	4b2a      	ldr	r3, [pc, #168]	; (7b34 <_spi_m_dma_transfer+0x140>)
    7a8c:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7a8e:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7a90:	3128      	adds	r1, #40	; 0x28
    7a92:	4620      	mov	r0, r4
    7a94:	4b28      	ldr	r3, [pc, #160]	; (7b38 <_spi_m_dma_transfer+0x144>)
    7a96:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    7a98:	2101      	movs	r1, #1
    7a9a:	4620      	mov	r0, r4
    7a9c:	4b29      	ldr	r3, [pc, #164]	; (7b44 <_spi_m_dma_transfer+0x150>)
    7a9e:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7aa0:	4641      	mov	r1, r8
    7aa2:	4620      	mov	r0, r4
    7aa4:	4b25      	ldr	r3, [pc, #148]	; (7b3c <_spi_m_dma_transfer+0x148>)
    7aa6:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    7aa8:	2100      	movs	r1, #0
    7aaa:	4620      	mov	r0, r4
    7aac:	4b24      	ldr	r3, [pc, #144]	; (7b40 <_spi_m_dma_transfer+0x14c>)
    7aae:	4798      	blx	r3

	return ERR_NONE;
}
    7ab0:	2000      	movs	r0, #0
    7ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    7ab6:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    7ab8:	4b23      	ldr	r3, [pc, #140]	; (7b48 <_spi_m_dma_transfer+0x154>)
    7aba:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    7abe:	4492      	add	sl, r2
    7ac0:	e7ab      	b.n	7a1a <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    7ac2:	2000      	movs	r0, #0
    7ac4:	e7b9      	b.n	7a3a <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    7ac6:	b1b5      	cbz	r5, 7af6 <_spi_m_dma_transfer+0x102>
    7ac8:	f11b 0000 	adds.w	r0, fp, #0
    7acc:	bf18      	it	ne
    7ace:	2001      	movne	r0, #1
    7ad0:	f640 521a 	movw	r2, #3354	; 0xd1a
    7ad4:	4915      	ldr	r1, [pc, #84]	; (7b2c <_spi_m_dma_transfer+0x138>)
    7ad6:	4b16      	ldr	r3, [pc, #88]	; (7b30 <_spi_m_dma_transfer+0x13c>)
    7ad8:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    7ada:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7adc:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7ade:	f013 0f04 	tst.w	r3, #4
    7ae2:	d1cd      	bne.n	7a80 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    7ae4:	6853      	ldr	r3, [r2, #4]
    7ae6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    7aea:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7aec:	69d3      	ldr	r3, [r2, #28]
    7aee:	f013 0f17 	tst.w	r3, #23
    7af2:	d1fb      	bne.n	7aec <_spi_m_dma_transfer+0xf8>
    7af4:	e7c4      	b.n	7a80 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    7af6:	2000      	movs	r0, #0
    7af8:	e7ea      	b.n	7ad0 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    7afa:	f10a 010e 	add.w	r1, sl, #14
    7afe:	4620      	mov	r0, r4
    7b00:	4b0c      	ldr	r3, [pc, #48]	; (7b34 <_spi_m_dma_transfer+0x140>)
    7b02:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7b04:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7b06:	3128      	adds	r1, #40	; 0x28
    7b08:	4620      	mov	r0, r4
    7b0a:	4b0b      	ldr	r3, [pc, #44]	; (7b38 <_spi_m_dma_transfer+0x144>)
    7b0c:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7b0e:	2100      	movs	r1, #0
    7b10:	4620      	mov	r0, r4
    7b12:	4b0c      	ldr	r3, [pc, #48]	; (7b44 <_spi_m_dma_transfer+0x150>)
    7b14:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7b16:	4641      	mov	r1, r8
    7b18:	4620      	mov	r0, r4
    7b1a:	4b08      	ldr	r3, [pc, #32]	; (7b3c <_spi_m_dma_transfer+0x148>)
    7b1c:	4798      	blx	r3
    7b1e:	e7c3      	b.n	7aa8 <_spi_m_dma_transfer+0xb4>
    7b20:	000067b5 	.word	0x000067b5
    7b24:	000069d5 	.word	0x000069d5
    7b28:	000069c1 	.word	0x000069c1
    7b2c:	0000d5bc 	.word	0x0000d5bc
    7b30:	00005921 	.word	0x00005921
    7b34:	000060f9 	.word	0x000060f9
    7b38:	000060e9 	.word	0x000060e9
    7b3c:	00006125 	.word	0x00006125
    7b40:	0000617d 	.word	0x0000617d
    7b44:	00006109 	.word	0x00006109
    7b48:	0000d598 	.word	0x0000d598

00007b4c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    7b4c:	4b03      	ldr	r3, [pc, #12]	; (7b5c <_delay_init+0x10>)
    7b4e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    7b52:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    7b54:	2205      	movs	r2, #5
    7b56:	601a      	str	r2, [r3, #0]
    7b58:	4770      	bx	lr
    7b5a:	bf00      	nop
    7b5c:	e000e010 	.word	0xe000e010

00007b60 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    7b60:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    7b62:	b303      	cbz	r3, 7ba6 <_delay_cycles+0x46>
{
    7b64:	b430      	push	{r4, r5}
    7b66:	1e5d      	subs	r5, r3, #1
    7b68:	b2ed      	uxtb	r5, r5
	while (n--) {
    7b6a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    7b6c:	4a12      	ldr	r2, [pc, #72]	; (7bb8 <_delay_cycles+0x58>)
    7b6e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    7b72:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    7b74:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7b76:	6813      	ldr	r3, [r2, #0]
    7b78:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7b7c:	d0fb      	beq.n	7b76 <_delay_cycles+0x16>
	while (n--) {
    7b7e:	3801      	subs	r0, #1
    7b80:	b2c0      	uxtb	r0, r0
    7b82:	28ff      	cmp	r0, #255	; 0xff
    7b84:	d1f5      	bne.n	7b72 <_delay_cycles+0x12>
    7b86:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    7b8a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    7b8e:	3101      	adds	r1, #1
    7b90:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    7b92:	4b09      	ldr	r3, [pc, #36]	; (7bb8 <_delay_cycles+0x58>)
    7b94:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7b96:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7b98:	461a      	mov	r2, r3
    7b9a:	6813      	ldr	r3, [r2, #0]
    7b9c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7ba0:	d0fb      	beq.n	7b9a <_delay_cycles+0x3a>
		;
}
    7ba2:	bc30      	pop	{r4, r5}
    7ba4:	4770      	bx	lr
	SysTick->LOAD = buf;
    7ba6:	4b04      	ldr	r3, [pc, #16]	; (7bb8 <_delay_cycles+0x58>)
    7ba8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7baa:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7bac:	461a      	mov	r2, r3
    7bae:	6813      	ldr	r3, [r2, #0]
    7bb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7bb4:	d0fb      	beq.n	7bae <_delay_cycles+0x4e>
    7bb6:	4770      	bx	lr
    7bb8:	e000e010 	.word	0xe000e010

00007bbc <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7bbc:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7bbe:	6813      	ldr	r3, [r2, #0]
    7bc0:	f043 0302 	orr.w	r3, r3, #2
    7bc4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7bc6:	6913      	ldr	r3, [r2, #16]
    7bc8:	f013 0f03 	tst.w	r3, #3
    7bcc:	d1fb      	bne.n	7bc6 <_tc_timer_start+0xa>
}
    7bce:	4770      	bx	lr

00007bd0 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7bd0:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7bd2:	6813      	ldr	r3, [r2, #0]
    7bd4:	f023 0302 	bic.w	r3, r3, #2
    7bd8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7bda:	6913      	ldr	r3, [r2, #16]
    7bdc:	f013 0f03 	tst.w	r3, #3
    7be0:	d1fb      	bne.n	7bda <_tc_timer_stop+0xa>
}
    7be2:	4770      	bx	lr

00007be4 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    7be4:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7be6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7be8:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7bec:	2a02      	cmp	r2, #2
    7bee:	d00a      	beq.n	7c06 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7bf0:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7bf2:	f012 0f0c 	tst.w	r2, #12
    7bf6:	d10c      	bne.n	7c12 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7bf8:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7bfa:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7bfc:	691a      	ldr	r2, [r3, #16]
    7bfe:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7c02:	d1fb      	bne.n	7bfc <_tc_timer_set_period+0x18>
    7c04:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7c06:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c08:	691a      	ldr	r2, [r3, #16]
    7c0a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7c0e:	d1fb      	bne.n	7c08 <_tc_timer_set_period+0x24>
    7c10:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c12:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7c14:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c18:	2a01      	cmp	r2, #1
    7c1a:	d000      	beq.n	7c1e <_tc_timer_set_period+0x3a>
    7c1c:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7c1e:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    7c20:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c22:	691a      	ldr	r2, [r3, #16]
    7c24:	f012 0f20 	tst.w	r2, #32
    7c28:	d1fb      	bne.n	7c22 <_tc_timer_set_period+0x3e>
    7c2a:	e7f7      	b.n	7c1c <_tc_timer_set_period+0x38>

00007c2c <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    7c2c:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c2e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7c30:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c34:	2a02      	cmp	r2, #2
    7c36:	d00a      	beq.n	7c4e <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c38:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c3a:	f012 0f0c 	tst.w	r2, #12
    7c3e:	d10c      	bne.n	7c5a <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c40:	691a      	ldr	r2, [r3, #16]
    7c42:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7c46:	d1fb      	bne.n	7c40 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7c48:	8b98      	ldrh	r0, [r3, #28]
    7c4a:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    7c4c:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c4e:	691a      	ldr	r2, [r3, #16]
    7c50:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7c54:	d1fb      	bne.n	7c4e <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7c56:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    7c58:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c5a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7c5c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c60:	2a01      	cmp	r2, #1
    7c62:	d001      	beq.n	7c68 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    7c64:	2000      	movs	r0, #0
}
    7c66:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c68:	691a      	ldr	r2, [r3, #16]
    7c6a:	f012 0f20 	tst.w	r2, #32
    7c6e:	d1fb      	bne.n	7c68 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    7c70:	7ed8      	ldrb	r0, [r3, #27]
    7c72:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    7c74:	4770      	bx	lr

00007c76 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7c76:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c78:	6913      	ldr	r3, [r2, #16]
    7c7a:	f013 0f03 	tst.w	r3, #3
    7c7e:	d1fb      	bne.n	7c78 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c80:	6810      	ldr	r0, [r2, #0]
}
    7c82:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7c86:	4770      	bx	lr

00007c88 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7c88:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    7c8a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7c8c:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7c8e:	f012 0f01 	tst.w	r2, #1
    7c92:	d100      	bne.n	7c96 <tc_interrupt_handler+0xe>
    7c94:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7c96:	2201      	movs	r2, #1
    7c98:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    7c9a:	6803      	ldr	r3, [r0, #0]
    7c9c:	4798      	blx	r3
	}
}
    7c9e:	e7f9      	b.n	7c94 <tc_interrupt_handler+0xc>

00007ca0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7ca0:	b570      	push	{r4, r5, r6, lr}
    7ca2:	b088      	sub	sp, #32
    7ca4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7ca6:	466c      	mov	r4, sp
    7ca8:	4d19      	ldr	r5, [pc, #100]	; (7d10 <get_tc_index+0x70>)
    7caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7cae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7cb6:	9b00      	ldr	r3, [sp, #0]
    7cb8:	42b3      	cmp	r3, r6
    7cba:	d00c      	beq.n	7cd6 <get_tc_index+0x36>
    7cbc:	4630      	mov	r0, r6
    7cbe:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7cc0:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7cc2:	f852 1b04 	ldr.w	r1, [r2], #4
    7cc6:	4281      	cmp	r1, r0
    7cc8:	d006      	beq.n	7cd8 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7cca:	3301      	adds	r3, #1
    7ccc:	2b08      	cmp	r3, #8
    7cce:	d1f8      	bne.n	7cc2 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7cd0:	2000      	movs	r0, #0
			return i;
    7cd2:	b240      	sxtb	r0, r0
    7cd4:	e013      	b.n	7cfe <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7cd6:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    7cd8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7cdc:	d015      	beq.n	7d0a <get_tc_index+0x6a>
    7cde:	2b01      	cmp	r3, #1
    7ce0:	d00f      	beq.n	7d02 <get_tc_index+0x62>
    7ce2:	2b02      	cmp	r3, #2
    7ce4:	d00f      	beq.n	7d06 <get_tc_index+0x66>
    7ce6:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7ce8:	bf08      	it	eq
    7cea:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    7cec:	d0f1      	beq.n	7cd2 <get_tc_index+0x32>
	ASSERT(false);
    7cee:	f240 1267 	movw	r2, #359	; 0x167
    7cf2:	4908      	ldr	r1, [pc, #32]	; (7d14 <get_tc_index+0x74>)
    7cf4:	2000      	movs	r0, #0
    7cf6:	4b08      	ldr	r3, [pc, #32]	; (7d18 <get_tc_index+0x78>)
    7cf8:	4798      	blx	r3
	return -1;
    7cfa:	f04f 30ff 	mov.w	r0, #4294967295
}
    7cfe:	b008      	add	sp, #32
    7d00:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7d02:	2001      	movs	r0, #1
    7d04:	e7e5      	b.n	7cd2 <get_tc_index+0x32>
    7d06:	2002      	movs	r0, #2
    7d08:	e7e3      	b.n	7cd2 <get_tc_index+0x32>
    7d0a:	2000      	movs	r0, #0
    7d0c:	e7e1      	b.n	7cd2 <get_tc_index+0x32>
    7d0e:	bf00      	nop
    7d10:	0000d5d8 	.word	0x0000d5d8
    7d14:	0000d648 	.word	0x0000d648
    7d18:	00005921 	.word	0x00005921

00007d1c <_tc_timer_init>:
{
    7d1c:	b570      	push	{r4, r5, r6, lr}
    7d1e:	4606      	mov	r6, r0
    7d20:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    7d22:	4608      	mov	r0, r1
    7d24:	4b71      	ldr	r3, [pc, #452]	; (7eec <_tc_timer_init+0x1d0>)
    7d26:	4798      	blx	r3
    7d28:	4605      	mov	r5, r0
	device->hw = hw;
    7d2a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7d2c:	22a0      	movs	r2, #160	; 0xa0
    7d2e:	4970      	ldr	r1, [pc, #448]	; (7ef0 <_tc_timer_init+0x1d4>)
    7d30:	2001      	movs	r0, #1
    7d32:	4b70      	ldr	r3, [pc, #448]	; (7ef4 <_tc_timer_init+0x1d8>)
    7d34:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7d36:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7d38:	f013 0f01 	tst.w	r3, #1
    7d3c:	d119      	bne.n	7d72 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d3e:	6923      	ldr	r3, [r4, #16]
    7d40:	f013 0f03 	tst.w	r3, #3
    7d44:	d1fb      	bne.n	7d3e <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d46:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7d48:	f013 0f02 	tst.w	r3, #2
    7d4c:	d00b      	beq.n	7d66 <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7d4e:	6823      	ldr	r3, [r4, #0]
    7d50:	f023 0302 	bic.w	r3, r3, #2
    7d54:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d56:	6923      	ldr	r3, [r4, #16]
    7d58:	f013 0f03 	tst.w	r3, #3
    7d5c:	d1fb      	bne.n	7d56 <_tc_timer_init+0x3a>
    7d5e:	6923      	ldr	r3, [r4, #16]
    7d60:	f013 0f02 	tst.w	r3, #2
    7d64:	d1fb      	bne.n	7d5e <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7d66:	2301      	movs	r3, #1
    7d68:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d6a:	6923      	ldr	r3, [r4, #16]
    7d6c:	f013 0f03 	tst.w	r3, #3
    7d70:	d1fb      	bne.n	7d6a <_tc_timer_init+0x4e>
    7d72:	6923      	ldr	r3, [r4, #16]
    7d74:	f013 0f01 	tst.w	r3, #1
    7d78:	d1fb      	bne.n	7d72 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7d7a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7d7e:	4a5e      	ldr	r2, [pc, #376]	; (7ef8 <_tc_timer_init+0x1dc>)
    7d80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7d86:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d88:	6923      	ldr	r3, [r4, #16]
    7d8a:	f013 0f03 	tst.w	r3, #3
    7d8e:	d1fb      	bne.n	7d88 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7d90:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7d94:	4958      	ldr	r1, [pc, #352]	; (7ef8 <_tc_timer_init+0x1dc>)
    7d96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7d9a:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7d9e:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7da2:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7da4:	2301      	movs	r3, #1
    7da6:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7da8:	f002 020c 	and.w	r2, r2, #12
    7dac:	2a08      	cmp	r2, #8
    7dae:	d056      	beq.n	7e5e <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7db0:	2a00      	cmp	r2, #0
    7db2:	d16b      	bne.n	7e8c <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7db4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7db8:	4a4f      	ldr	r2, [pc, #316]	; (7ef8 <_tc_timer_init+0x1dc>)
    7dba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7dbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7dc0:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7dc2:	6923      	ldr	r3, [r4, #16]
    7dc4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7dc8:	d1fb      	bne.n	7dc2 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7dca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7dce:	4a4a      	ldr	r2, [pc, #296]	; (7ef8 <_tc_timer_init+0x1dc>)
    7dd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7dd4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7dd6:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7dd8:	6923      	ldr	r3, [r4, #16]
    7dda:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7dde:	d1fb      	bne.n	7dd8 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7de0:	2301      	movs	r3, #1
    7de2:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    7de4:	4b45      	ldr	r3, [pc, #276]	; (7efc <_tc_timer_init+0x1e0>)
    7de6:	429c      	cmp	r4, r3
    7de8:	d077      	beq.n	7eda <_tc_timer_init+0x1be>
	if (hw == TC1) {
    7dea:	4b45      	ldr	r3, [pc, #276]	; (7f00 <_tc_timer_init+0x1e4>)
    7dec:	429c      	cmp	r4, r3
    7dee:	d077      	beq.n	7ee0 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    7df0:	4b44      	ldr	r3, [pc, #272]	; (7f04 <_tc_timer_init+0x1e8>)
    7df2:	429c      	cmp	r4, r3
    7df4:	d077      	beq.n	7ee6 <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    7df6:	4b44      	ldr	r3, [pc, #272]	; (7f08 <_tc_timer_init+0x1ec>)
    7df8:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    7dfa:	bf04      	itt	eq
    7dfc:	4b43      	ldreq	r3, [pc, #268]	; (7f0c <_tc_timer_init+0x1f0>)
    7dfe:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    7e00:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7e04:	4a3c      	ldr	r2, [pc, #240]	; (7ef8 <_tc_timer_init+0x1dc>)
    7e06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7e0a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7e0e:	2b00      	cmp	r3, #0
    7e10:	db23      	blt.n	7e5a <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e12:	095a      	lsrs	r2, r3, #5
    7e14:	f003 031f 	and.w	r3, r3, #31
    7e18:	2101      	movs	r1, #1
    7e1a:	fa01 f303 	lsl.w	r3, r1, r3
    7e1e:	3220      	adds	r2, #32
    7e20:	493b      	ldr	r1, [pc, #236]	; (7f10 <_tc_timer_init+0x1f4>)
    7e22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7e26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e2a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7e2e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7e32:	4b31      	ldr	r3, [pc, #196]	; (7ef8 <_tc_timer_init+0x1dc>)
    7e34:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7e38:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	db0c      	blt.n	7e5a <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e40:	0959      	lsrs	r1, r3, #5
    7e42:	f003 031f 	and.w	r3, r3, #31
    7e46:	2201      	movs	r2, #1
    7e48:	fa02 f303 	lsl.w	r3, r2, r3
    7e4c:	4a30      	ldr	r2, [pc, #192]	; (7f10 <_tc_timer_init+0x1f4>)
    7e4e:	f101 0060 	add.w	r0, r1, #96	; 0x60
    7e52:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    7e5a:	2000      	movs	r0, #0
    7e5c:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7e5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7e62:	4a25      	ldr	r2, [pc, #148]	; (7ef8 <_tc_timer_init+0x1dc>)
    7e64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7e6a:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e6c:	6923      	ldr	r3, [r4, #16]
    7e6e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7e72:	d1fb      	bne.n	7e6c <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7e74:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7e78:	4a1f      	ldr	r2, [pc, #124]	; (7ef8 <_tc_timer_init+0x1dc>)
    7e7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7e80:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e82:	6923      	ldr	r3, [r4, #16]
    7e84:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7e88:	d1fb      	bne.n	7e82 <_tc_timer_init+0x166>
    7e8a:	e7a9      	b.n	7de0 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7e8c:	2a04      	cmp	r2, #4
    7e8e:	d1a7      	bne.n	7de0 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7e90:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7e94:	4a18      	ldr	r2, [pc, #96]	; (7ef8 <_tc_timer_init+0x1dc>)
    7e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7e9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7e9e:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ea0:	6923      	ldr	r3, [r4, #16]
    7ea2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ea6:	d1fb      	bne.n	7ea0 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7ea8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7eac:	4a12      	ldr	r2, [pc, #72]	; (7ef8 <_tc_timer_init+0x1dc>)
    7eae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7eb6:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7eb8:	6923      	ldr	r3, [r4, #16]
    7eba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ebe:	d1fb      	bne.n	7eb8 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7ec0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7ec4:	4a0c      	ldr	r2, [pc, #48]	; (7ef8 <_tc_timer_init+0x1dc>)
    7ec6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7eca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    7ece:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ed0:	6923      	ldr	r3, [r4, #16]
    7ed2:	f013 0f20 	tst.w	r3, #32
    7ed6:	d1fb      	bne.n	7ed0 <_tc_timer_init+0x1b4>
    7ed8:	e782      	b.n	7de0 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    7eda:	4b0c      	ldr	r3, [pc, #48]	; (7f0c <_tc_timer_init+0x1f0>)
    7edc:	601e      	str	r6, [r3, #0]
    7ede:	e78a      	b.n	7df6 <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    7ee0:	4b0a      	ldr	r3, [pc, #40]	; (7f0c <_tc_timer_init+0x1f0>)
    7ee2:	605e      	str	r6, [r3, #4]
    7ee4:	e78c      	b.n	7e00 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    7ee6:	4b09      	ldr	r3, [pc, #36]	; (7f0c <_tc_timer_init+0x1f0>)
    7ee8:	609e      	str	r6, [r3, #8]
    7eea:	e789      	b.n	7e00 <_tc_timer_init+0xe4>
    7eec:	00007ca1 	.word	0x00007ca1
    7ef0:	0000d648 	.word	0x0000d648
    7ef4:	00005921 	.word	0x00005921
    7ef8:	0000d5d8 	.word	0x0000d5d8
    7efc:	40003800 	.word	0x40003800
    7f00:	40003c00 	.word	0x40003c00
    7f04:	4101a000 	.word	0x4101a000
    7f08:	4101c000 	.word	0x4101c000
    7f0c:	20000998 	.word	0x20000998
    7f10:	e000e100 	.word	0xe000e100

00007f14 <_tc_timer_deinit>:
{
    7f14:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    7f16:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    7f18:	4620      	mov	r0, r4
    7f1a:	4b18      	ldr	r3, [pc, #96]	; (7f7c <_tc_timer_deinit+0x68>)
    7f1c:	4798      	blx	r3
    7f1e:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7f20:	22cd      	movs	r2, #205	; 0xcd
    7f22:	4917      	ldr	r1, [pc, #92]	; (7f80 <_tc_timer_deinit+0x6c>)
    7f24:	2001      	movs	r0, #1
    7f26:	4b17      	ldr	r3, [pc, #92]	; (7f84 <_tc_timer_deinit+0x70>)
    7f28:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7f2a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7f2e:	4b16      	ldr	r3, [pc, #88]	; (7f88 <_tc_timer_deinit+0x74>)
    7f30:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7f34:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7f38:	2b00      	cmp	r3, #0
    7f3a:	db0d      	blt.n	7f58 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f3c:	095a      	lsrs	r2, r3, #5
    7f3e:	f003 031f 	and.w	r3, r3, #31
    7f42:	2101      	movs	r1, #1
    7f44:	fa01 f303 	lsl.w	r3, r1, r3
    7f48:	3220      	adds	r2, #32
    7f4a:	4910      	ldr	r1, [pc, #64]	; (7f8c <_tc_timer_deinit+0x78>)
    7f4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7f50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7f54:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7f58:	6823      	ldr	r3, [r4, #0]
    7f5a:	f023 0302 	bic.w	r3, r3, #2
    7f5e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f60:	6923      	ldr	r3, [r4, #16]
    7f62:	f013 0f03 	tst.w	r3, #3
    7f66:	d1fb      	bne.n	7f60 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7f68:	6823      	ldr	r3, [r4, #0]
    7f6a:	f043 0301 	orr.w	r3, r3, #1
    7f6e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f70:	6923      	ldr	r3, [r4, #16]
    7f72:	f013 0f01 	tst.w	r3, #1
    7f76:	d1fb      	bne.n	7f70 <_tc_timer_deinit+0x5c>
}
    7f78:	bd38      	pop	{r3, r4, r5, pc}
    7f7a:	bf00      	nop
    7f7c:	00007ca1 	.word	0x00007ca1
    7f80:	0000d648 	.word	0x0000d648
    7f84:	00005921 	.word	0x00005921
    7f88:	0000d5d8 	.word	0x0000d5d8
    7f8c:	e000e100 	.word	0xe000e100

00007f90 <_tc_timer_set_irq>:
{
    7f90:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    7f92:	68c0      	ldr	r0, [r0, #12]
    7f94:	4b09      	ldr	r3, [pc, #36]	; (7fbc <_tc_timer_set_irq+0x2c>)
    7f96:	4798      	blx	r3
    7f98:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7f9a:	f44f 7291 	mov.w	r2, #290	; 0x122
    7f9e:	4908      	ldr	r1, [pc, #32]	; (7fc0 <_tc_timer_set_irq+0x30>)
    7fa0:	2001      	movs	r0, #1
    7fa2:	4b08      	ldr	r3, [pc, #32]	; (7fc4 <_tc_timer_set_irq+0x34>)
    7fa4:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    7fa6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7faa:	4b07      	ldr	r3, [pc, #28]	; (7fc8 <_tc_timer_set_irq+0x38>)
    7fac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    7fb0:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    7fb4:	4b05      	ldr	r3, [pc, #20]	; (7fcc <_tc_timer_set_irq+0x3c>)
    7fb6:	4798      	blx	r3
    7fb8:	bd10      	pop	{r4, pc}
    7fba:	bf00      	nop
    7fbc:	00007ca1 	.word	0x00007ca1
    7fc0:	0000d648 	.word	0x0000d648
    7fc4:	00005921 	.word	0x00005921
    7fc8:	0000d5d8 	.word	0x0000d5d8
    7fcc:	00005eb5 	.word	0x00005eb5

00007fd0 <_tc_get_timer>:
}
    7fd0:	4800      	ldr	r0, [pc, #0]	; (7fd4 <_tc_get_timer+0x4>)
    7fd2:	4770      	bx	lr
    7fd4:	20000378 	.word	0x20000378

00007fd8 <TC0_Handler>:
{
    7fd8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    7fda:	4b02      	ldr	r3, [pc, #8]	; (7fe4 <TC0_Handler+0xc>)
    7fdc:	6818      	ldr	r0, [r3, #0]
    7fde:	4b02      	ldr	r3, [pc, #8]	; (7fe8 <TC0_Handler+0x10>)
    7fe0:	4798      	blx	r3
    7fe2:	bd08      	pop	{r3, pc}
    7fe4:	20000998 	.word	0x20000998
    7fe8:	00007c89 	.word	0x00007c89

00007fec <TC1_Handler>:
{
    7fec:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    7fee:	4b02      	ldr	r3, [pc, #8]	; (7ff8 <TC1_Handler+0xc>)
    7ff0:	6858      	ldr	r0, [r3, #4]
    7ff2:	4b02      	ldr	r3, [pc, #8]	; (7ffc <TC1_Handler+0x10>)
    7ff4:	4798      	blx	r3
    7ff6:	bd08      	pop	{r3, pc}
    7ff8:	20000998 	.word	0x20000998
    7ffc:	00007c89 	.word	0x00007c89

00008000 <TC2_Handler>:
{
    8000:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    8002:	4b02      	ldr	r3, [pc, #8]	; (800c <TC2_Handler+0xc>)
    8004:	6898      	ldr	r0, [r3, #8]
    8006:	4b02      	ldr	r3, [pc, #8]	; (8010 <TC2_Handler+0x10>)
    8008:	4798      	blx	r3
    800a:	bd08      	pop	{r3, pc}
    800c:	20000998 	.word	0x20000998
    8010:	00007c89 	.word	0x00007c89

00008014 <TC3_Handler>:
{
    8014:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    8016:	4b02      	ldr	r3, [pc, #8]	; (8020 <TC3_Handler+0xc>)
    8018:	68d8      	ldr	r0, [r3, #12]
    801a:	4b02      	ldr	r3, [pc, #8]	; (8024 <TC3_Handler+0x10>)
    801c:	4798      	blx	r3
    801e:	bd08      	pop	{r3, pc}
    8020:	20000998 	.word	0x20000998
    8024:	00007c89 	.word	0x00007c89

00008028 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8028:	2000      	movs	r0, #0
    802a:	4770      	bx	lr

0000802c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    802c:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    802e:	7c83      	ldrb	r3, [r0, #18]
    8030:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8034:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    8036:	f002 0107 	and.w	r1, r2, #7
    803a:	2901      	cmp	r1, #1
    803c:	d00b      	beq.n	8056 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    803e:	015a      	lsls	r2, r3, #5
    8040:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8044:	2110      	movs	r1, #16
    8046:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    804a:	015b      	lsls	r3, r3, #5
    804c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8050:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    8054:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8056:	f012 0f40 	tst.w	r2, #64	; 0x40
    805a:	d00c      	beq.n	8076 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    805c:	7cc2      	ldrb	r2, [r0, #19]
    805e:	f36f 1286 	bfc	r2, #6, #1
    8062:	74c2      	strb	r2, [r0, #19]
    8064:	015a      	lsls	r2, r3, #5
    8066:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    806a:	2180      	movs	r1, #128	; 0x80
    806c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8070:	2140      	movs	r1, #64	; 0x40
    8072:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    8076:	7cc2      	ldrb	r2, [r0, #19]
    8078:	f36f 02c3 	bfc	r2, #3, #1
    807c:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    807e:	490a      	ldr	r1, [pc, #40]	; (80a8 <_usb_d_dev_handle_setup+0x7c>)
    8080:	015a      	lsls	r2, r3, #5
    8082:	188c      	adds	r4, r1, r2
    8084:	2500      	movs	r5, #0
    8086:	72a5      	strb	r5, [r4, #10]
    8088:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    808a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    808e:	246f      	movs	r4, #111	; 0x6f
    8090:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8094:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8098:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    809c:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    80a0:	7c80      	ldrb	r0, [r0, #18]
    80a2:	4798      	blx	r3
    80a4:	bd38      	pop	{r3, r4, r5, pc}
    80a6:	bf00      	nop
    80a8:	200009a8 	.word	0x200009a8

000080ac <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    80ac:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    80ae:	2320      	movs	r3, #32
    80b0:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    80b4:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    80b6:	7c83      	ldrb	r3, [r0, #18]
    80b8:	f003 030f 	and.w	r3, r3, #15
    80bc:	015b      	lsls	r3, r3, #5
    80be:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    80c2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    80c6:	4b04      	ldr	r3, [pc, #16]	; (80d8 <_usb_d_dev_handle_stall+0x2c>)
    80c8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    80cc:	6882      	ldr	r2, [r0, #8]
    80ce:	2101      	movs	r1, #1
    80d0:	7c80      	ldrb	r0, [r0, #18]
    80d2:	4798      	blx	r3
    80d4:	bd08      	pop	{r3, pc}
    80d6:	bf00      	nop
    80d8:	200009a8 	.word	0x200009a8

000080dc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    80dc:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    80de:	7c84      	ldrb	r4, [r0, #18]
    80e0:	2cff      	cmp	r4, #255	; 0xff
    80e2:	d003      	beq.n	80ec <_usb_d_dev_trans_done+0x10>
    80e4:	7cc3      	ldrb	r3, [r0, #19]
    80e6:	f013 0f40 	tst.w	r3, #64	; 0x40
    80ea:	d100      	bne.n	80ee <_usb_d_dev_trans_done+0x12>
    80ec:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    80ee:	7cc2      	ldrb	r2, [r0, #19]
    80f0:	f36f 1286 	bfc	r2, #6, #1
    80f4:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    80f6:	4a03      	ldr	r2, [pc, #12]	; (8104 <_usb_d_dev_trans_done+0x28>)
    80f8:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    80fc:	6882      	ldr	r2, [r0, #8]
    80fe:	4620      	mov	r0, r4
    8100:	47a8      	blx	r5
    8102:	e7f3      	b.n	80ec <_usb_d_dev_trans_done+0x10>
    8104:	200009a8 	.word	0x200009a8

00008108 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8108:	b530      	push	{r4, r5, lr}
    810a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    810c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    810e:	2425      	movs	r4, #37	; 0x25
    8110:	f88d 4004 	strb.w	r4, [sp, #4]
    8114:	244a      	movs	r4, #74	; 0x4a
    8116:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    811a:	2bff      	cmp	r3, #255	; 0xff
    811c:	d01e      	beq.n	815c <_usb_d_dev_trans_stop+0x54>
    811e:	7cc4      	ldrb	r4, [r0, #19]
    8120:	f014 0f40 	tst.w	r4, #64	; 0x40
    8124:	d01a      	beq.n	815c <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8126:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    812a:	b1c9      	cbz	r1, 8160 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    812c:	0163      	lsls	r3, r4, #5
    812e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8132:	2580      	movs	r5, #128	; 0x80
    8134:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8138:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    813a:	a902      	add	r1, sp, #8
    813c:	440b      	add	r3, r1
    813e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8142:	0163      	lsls	r3, r4, #5
    8144:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8148:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    814c:	0163      	lsls	r3, r4, #5
    814e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8152:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    8156:	4611      	mov	r1, r2
    8158:	4b05      	ldr	r3, [pc, #20]	; (8170 <_usb_d_dev_trans_stop+0x68>)
    815a:	4798      	blx	r3
}
    815c:	b003      	add	sp, #12
    815e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8160:	0163      	lsls	r3, r4, #5
    8162:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8166:	2540      	movs	r5, #64	; 0x40
    8168:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    816c:	e7e4      	b.n	8138 <_usb_d_dev_trans_stop+0x30>
    816e:	bf00      	nop
    8170:	000080dd 	.word	0x000080dd

00008174 <_usb_d_dev_handle_trfail>:
{
    8174:	b530      	push	{r4, r5, lr}
    8176:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8178:	7c83      	ldrb	r3, [r0, #18]
    817a:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    817e:	2204      	movs	r2, #4
    8180:	f88d 2004 	strb.w	r2, [sp, #4]
    8184:	2208      	movs	r2, #8
    8186:	f88d 2005 	strb.w	r2, [sp, #5]
    818a:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    818c:	460c      	mov	r4, r1
    818e:	b391      	cbz	r1, 81f6 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8190:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    8194:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8198:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    819c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    81a0:	4a32      	ldr	r2, [pc, #200]	; (826c <_usb_d_dev_handle_trfail+0xf8>)
    81a2:	440a      	add	r2, r1
    81a4:	7a91      	ldrb	r1, [r2, #10]
    81a6:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    81a8:	2d02      	cmp	r5, #2
    81aa:	d02c      	beq.n	8206 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    81ac:	f011 0f02 	tst.w	r1, #2
    81b0:	d045      	beq.n	823e <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    81b2:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    81b4:	7a91      	ldrb	r1, [r2, #10]
    81b6:	f36f 0141 	bfc	r1, #1, #1
    81ba:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    81bc:	aa02      	add	r2, sp, #8
    81be:	4422      	add	r2, r4
    81c0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    81c4:	015a      	lsls	r2, r3, #5
    81c6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    81ca:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    81ce:	015b      	lsls	r3, r3, #5
    81d0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    81d4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    81d8:	f005 0307 	and.w	r3, r5, #7
    81dc:	2b01      	cmp	r3, #1
    81de:	d143      	bne.n	8268 <_usb_d_dev_handle_trfail+0xf4>
    81e0:	7cc3      	ldrb	r3, [r0, #19]
    81e2:	f013 0f40 	tst.w	r3, #64	; 0x40
    81e6:	d03f      	beq.n	8268 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    81e8:	09d9      	lsrs	r1, r3, #7
    81ea:	428c      	cmp	r4, r1
    81ec:	d03c      	beq.n	8268 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    81ee:	2200      	movs	r2, #0
    81f0:	4b1f      	ldr	r3, [pc, #124]	; (8270 <_usb_d_dev_handle_trfail+0xfc>)
    81f2:	4798      	blx	r3
    81f4:	e038      	b.n	8268 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    81f6:	0159      	lsls	r1, r3, #5
    81f8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    81fc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8200:	f005 0507 	and.w	r5, r5, #7
    8204:	e7ca      	b.n	819c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8206:	f011 0f01 	tst.w	r1, #1
    820a:	d0cf      	beq.n	81ac <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    820c:	7a91      	ldrb	r1, [r2, #10]
    820e:	f36f 0100 	bfc	r1, #0, #1
    8212:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8214:	aa02      	add	r2, sp, #8
    8216:	4422      	add	r2, r4
    8218:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    821c:	015a      	lsls	r2, r3, #5
    821e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8222:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8226:	015b      	lsls	r3, r3, #5
    8228:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    822c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8230:	2204      	movs	r2, #4
    8232:	1c21      	adds	r1, r4, #0
    8234:	bf18      	it	ne
    8236:	2101      	movne	r1, #1
    8238:	4b0d      	ldr	r3, [pc, #52]	; (8270 <_usb_d_dev_handle_trfail+0xfc>)
    823a:	4798      	blx	r3
    823c:	e014      	b.n	8268 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    823e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    8242:	4a0a      	ldr	r2, [pc, #40]	; (826c <_usb_d_dev_handle_trfail+0xf8>)
    8244:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8248:	2100      	movs	r1, #0
    824a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    824c:	aa02      	add	r2, sp, #8
    824e:	4414      	add	r4, r2
    8250:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8254:	015a      	lsls	r2, r3, #5
    8256:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    825a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    825e:	015b      	lsls	r3, r3, #5
    8260:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8264:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    8268:	b003      	add	sp, #12
    826a:	bd30      	pop	{r4, r5, pc}
    826c:	200009a8 	.word	0x200009a8
    8270:	00008109 	.word	0x00008109

00008274 <_usb_d_dev_reset_epts>:
{
    8274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8278:	4d0c      	ldr	r5, [pc, #48]	; (82ac <_usb_d_dev_reset_epts+0x38>)
    827a:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    827e:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8282:	f04f 0803 	mov.w	r8, #3
    8286:	4f0a      	ldr	r7, [pc, #40]	; (82b0 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    8288:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    828a:	4641      	mov	r1, r8
    828c:	4620      	mov	r0, r4
    828e:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    8290:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    8292:	2300      	movs	r3, #0
    8294:	74e3      	strb	r3, [r4, #19]
    8296:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8298:	42ac      	cmp	r4, r5
    829a:	d1f6      	bne.n	828a <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    829c:	22c0      	movs	r2, #192	; 0xc0
    829e:	4619      	mov	r1, r3
    82a0:	4802      	ldr	r0, [pc, #8]	; (82ac <_usb_d_dev_reset_epts+0x38>)
    82a2:	4b04      	ldr	r3, [pc, #16]	; (82b4 <_usb_d_dev_reset_epts+0x40>)
    82a4:	4798      	blx	r3
    82a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82aa:	bf00      	nop
    82ac:	200009a8 	.word	0x200009a8
    82b0:	000080dd 	.word	0x000080dd
    82b4:	0000bae3 	.word	0x0000bae3

000082b8 <_usb_d_dev_in_next>:
{
    82b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82bc:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    82be:	7c84      	ldrb	r4, [r0, #18]
    82c0:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    82c4:	4688      	mov	r8, r1
    82c6:	2900      	cmp	r1, #0
    82c8:	f000 80a0 	beq.w	840c <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    82cc:	4b58      	ldr	r3, [pc, #352]	; (8430 <_usb_d_dev_in_next+0x178>)
    82ce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    82d2:	6958      	ldr	r0, [r3, #20]
    82d4:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    82d8:	8a2b      	ldrh	r3, [r5, #16]
    82da:	f240 32ff 	movw	r2, #1023	; 0x3ff
    82de:	4293      	cmp	r3, r2
    82e0:	f000 808e 	beq.w	8400 <_usb_d_dev_in_next+0x148>
    82e4:	3b01      	subs	r3, #1
    82e6:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    82e8:	7cef      	ldrb	r7, [r5, #19]
    82ea:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    82ee:	f1b8 0f00 	cmp.w	r8, #0
    82f2:	d005      	beq.n	8300 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    82f4:	0162      	lsls	r2, r4, #5
    82f6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    82fa:	2302      	movs	r3, #2
    82fc:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8300:	68a9      	ldr	r1, [r5, #8]
    8302:	eb0e 0301 	add.w	r3, lr, r1
    8306:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8308:	686e      	ldr	r6, [r5, #4]
    830a:	42b3      	cmp	r3, r6
    830c:	d23f      	bcs.n	838e <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    830e:	1af6      	subs	r6, r6, r3
    8310:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    8312:	7cea      	ldrb	r2, [r5, #19]
    8314:	f012 0f20 	tst.w	r2, #32
    8318:	d02d      	beq.n	8376 <_usb_d_dev_in_next+0xbe>
    831a:	8a2a      	ldrh	r2, [r5, #16]
    831c:	4296      	cmp	r6, r2
    831e:	bf28      	it	cs
    8320:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8322:	6829      	ldr	r1, [r5, #0]
    8324:	4632      	mov	r2, r6
    8326:	4419      	add	r1, r3
    8328:	68e8      	ldr	r0, [r5, #12]
    832a:	4b42      	ldr	r3, [pc, #264]	; (8434 <_usb_d_dev_in_next+0x17c>)
    832c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    832e:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8330:	4b3f      	ldr	r3, [pc, #252]	; (8430 <_usb_d_dev_in_next+0x178>)
    8332:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8336:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8338:	4b3d      	ldr	r3, [pc, #244]	; (8430 <_usb_d_dev_in_next+0x178>)
    833a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    833e:	695a      	ldr	r2, [r3, #20]
    8340:	f366 020d 	bfi	r2, r6, #0, #14
    8344:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8346:	695a      	ldr	r2, [r3, #20]
    8348:	f36f 329b 	bfc	r2, #14, #14
    834c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    834e:	f1b8 0f00 	cmp.w	r8, #0
    8352:	d108      	bne.n	8366 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    8354:	2f01      	cmp	r7, #1
    8356:	bf0c      	ite	eq
    8358:	224e      	moveq	r2, #78	; 0x4e
    835a:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    835c:	0163      	lsls	r3, r4, #5
    835e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8362:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8366:	0164      	lsls	r4, r4, #5
    8368:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    836c:	2380      	movs	r3, #128	; 0x80
    836e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    8372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8376:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    837a:	bf28      	it	cs
    837c:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8380:	6829      	ldr	r1, [r5, #0]
    8382:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    8384:	4a2a      	ldr	r2, [pc, #168]	; (8430 <_usb_d_dev_in_next+0x178>)
    8386:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    838a:	6113      	str	r3, [r2, #16]
    838c:	e7d4      	b.n	8338 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    838e:	7ceb      	ldrb	r3, [r5, #19]
    8390:	f013 0f10 	tst.w	r3, #16
    8394:	d00f      	beq.n	83b6 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    8396:	7ceb      	ldrb	r3, [r5, #19]
    8398:	f36f 1304 	bfc	r3, #4, #1
    839c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    839e:	4b24      	ldr	r3, [pc, #144]	; (8430 <_usb_d_dev_in_next+0x178>)
    83a0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    83a4:	695a      	ldr	r2, [r3, #20]
    83a6:	f36f 020d 	bfc	r2, #0, #14
    83aa:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    83ac:	695a      	ldr	r2, [r3, #20]
    83ae:	f36f 329b 	bfc	r2, #14, #14
    83b2:	615a      	str	r2, [r3, #20]
    83b4:	e7cb      	b.n	834e <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    83b6:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    83b8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    83bc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    83c0:	bf0c      	ite	eq
    83c2:	234b      	moveq	r3, #75	; 0x4b
    83c4:	234a      	movne	r3, #74	; 0x4a
    83c6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    83ca:	8a2a      	ldrh	r2, [r5, #16]
    83cc:	ea00 030e 	and.w	r3, r0, lr
    83d0:	429a      	cmp	r2, r3
    83d2:	d005      	beq.n	83e0 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    83d4:	2100      	movs	r1, #0
    83d6:	4628      	mov	r0, r5
    83d8:	4b17      	ldr	r3, [pc, #92]	; (8438 <_usb_d_dev_in_next+0x180>)
    83da:	4798      	blx	r3
	return;
    83dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    83e0:	7ceb      	ldrb	r3, [r5, #19]
    83e2:	f36f 1386 	bfc	r3, #6, #1
    83e6:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    83e8:	4b11      	ldr	r3, [pc, #68]	; (8430 <_usb_d_dev_in_next+0x178>)
    83ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    83ee:	68a9      	ldr	r1, [r5, #8]
    83f0:	7ca8      	ldrb	r0, [r5, #18]
    83f2:	4798      	blx	r3
    83f4:	b9d0      	cbnz	r0, 842c <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    83f6:	7ceb      	ldrb	r3, [r5, #19]
    83f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    83fc:	74eb      	strb	r3, [r5, #19]
    83fe:	e7e9      	b.n	83d4 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8400:	7cef      	ldrb	r7, [r5, #19]
    8402:	f007 0707 	and.w	r7, r7, #7
    8406:	f240 30ff 	movw	r0, #1023	; 0x3ff
    840a:	e773      	b.n	82f4 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    840c:	8a03      	ldrh	r3, [r0, #16]
    840e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8412:	4293      	cmp	r3, r2
    8414:	d107      	bne.n	8426 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8416:	7cef      	ldrb	r7, [r5, #19]
    8418:	f007 0707 	and.w	r7, r7, #7
    841c:	f04f 0e00 	mov.w	lr, #0
    8420:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8424:	e76c      	b.n	8300 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8426:	f04f 0e00 	mov.w	lr, #0
    842a:	e75b      	b.n	82e4 <_usb_d_dev_in_next+0x2c>
    842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8430:	200009a8 	.word	0x200009a8
    8434:	0000bacd 	.word	0x0000bacd
    8438:	000080dd 	.word	0x000080dd

0000843c <_usb_d_dev_out_next>:
{
    843c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8440:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8442:	7c85      	ldrb	r5, [r0, #18]
    8444:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8448:	4689      	mov	r9, r1
    844a:	2900      	cmp	r1, #0
    844c:	d056      	beq.n	84fc <_usb_d_dev_out_next+0xc0>
    844e:	4b74      	ldr	r3, [pc, #464]	; (8620 <_usb_d_dev_out_next+0x1e4>)
    8450:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8454:	685a      	ldr	r2, [r3, #4]
    8456:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    845a:	685f      	ldr	r7, [r3, #4]
    845c:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8460:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8462:	8a06      	ldrh	r6, [r0, #16]
    8464:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8468:	429e      	cmp	r6, r3
    846a:	f000 80ba 	beq.w	85e2 <_usb_d_dev_out_next+0x1a6>
    846e:	3e01      	subs	r6, #1
    8470:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    8472:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8476:	f894 8013 	ldrb.w	r8, [r4, #19]
    847a:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    847e:	f1b9 0f00 	cmp.w	r9, #0
    8482:	d005      	beq.n	8490 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8484:	016b      	lsls	r3, r5, #5
    8486:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    848a:	2201      	movs	r2, #1
    848c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8490:	7ce3      	ldrb	r3, [r4, #19]
    8492:	f013 0f20 	tst.w	r3, #32
    8496:	d00d      	beq.n	84b4 <_usb_d_dev_out_next+0x78>
    8498:	6862      	ldr	r2, [r4, #4]
    849a:	2a00      	cmp	r2, #0
    849c:	d037      	beq.n	850e <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    849e:	68a0      	ldr	r0, [r4, #8]
    84a0:	1a12      	subs	r2, r2, r0
    84a2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    84a4:	6823      	ldr	r3, [r4, #0]
    84a6:	42ba      	cmp	r2, r7
    84a8:	bf28      	it	cs
    84aa:	463a      	movcs	r2, r7
    84ac:	68e1      	ldr	r1, [r4, #12]
    84ae:	4418      	add	r0, r3
    84b0:	4b5c      	ldr	r3, [pc, #368]	; (8624 <_usb_d_dev_out_next+0x1e8>)
    84b2:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    84b4:	6863      	ldr	r3, [r4, #4]
    84b6:	b353      	cbz	r3, 850e <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    84b8:	f1b9 0f00 	cmp.w	r9, #0
    84bc:	d040      	beq.n	8540 <_usb_d_dev_out_next+0x104>
    84be:	8a22      	ldrh	r2, [r4, #16]
    84c0:	42ba      	cmp	r2, r7
    84c2:	d93d      	bls.n	8540 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    84c4:	7ce3      	ldrb	r3, [r4, #19]
    84c6:	f36f 1304 	bfc	r3, #4, #1
    84ca:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    84cc:	68a3      	ldr	r3, [r4, #8]
    84ce:	445b      	add	r3, fp
    84d0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    84d2:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    84d6:	ea4f 1345 	mov.w	r3, r5, lsl #5
    84da:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    84de:	bf0c      	ite	eq
    84e0:	222d      	moveq	r2, #45	; 0x2d
    84e2:	2225      	movne	r2, #37	; 0x25
    84e4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    84e8:	b915      	cbnz	r5, 84f0 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    84ea:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    84ec:	4b4c      	ldr	r3, [pc, #304]	; (8620 <_usb_d_dev_out_next+0x1e4>)
    84ee:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    84f0:	2100      	movs	r1, #0
    84f2:	4620      	mov	r0, r4
    84f4:	4b4c      	ldr	r3, [pc, #304]	; (8628 <_usb_d_dev_out_next+0x1ec>)
    84f6:	4798      	blx	r3
	return;
    84f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    84fc:	8a06      	ldrh	r6, [r0, #16]
    84fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8502:	429e      	cmp	r6, r3
    8504:	d07b      	beq.n	85fe <_usb_d_dev_out_next+0x1c2>
    8506:	f04f 0b00 	mov.w	fp, #0
    850a:	46da      	mov	sl, fp
    850c:	e7af      	b.n	846e <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    850e:	7ce3      	ldrb	r3, [r4, #19]
    8510:	f013 0f10 	tst.w	r3, #16
    8514:	d06c      	beq.n	85f0 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    8516:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8518:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    851c:	f043 0320 	orr.w	r3, r3, #32
    8520:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8522:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8524:	493e      	ldr	r1, [pc, #248]	; (8620 <_usb_d_dev_out_next+0x1e4>)
    8526:	016a      	lsls	r2, r5, #5
    8528:	188b      	adds	r3, r1, r2
    852a:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    852c:	8a21      	ldrh	r1, [r4, #16]
    852e:	685a      	ldr	r2, [r3, #4]
    8530:	f361 329b 	bfi	r2, r1, #14, #14
    8534:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8536:	685a      	ldr	r2, [r3, #4]
    8538:	f36f 020d 	bfc	r2, #0, #14
    853c:	605a      	str	r2, [r3, #4]
    853e:	e01d      	b.n	857c <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8540:	68a2      	ldr	r2, [r4, #8]
    8542:	4452      	add	r2, sl
    8544:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    8546:	4293      	cmp	r3, r2
    8548:	d9c3      	bls.n	84d2 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    854a:	1a9b      	subs	r3, r3, r2
    854c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    854e:	7ce1      	ldrb	r1, [r4, #19]
    8550:	f011 0f20 	tst.w	r1, #32
    8554:	d026      	beq.n	85a4 <_usb_d_dev_out_next+0x168>
    8556:	8a22      	ldrh	r2, [r4, #16]
    8558:	4293      	cmp	r3, r2
    855a:	bf28      	it	cs
    855c:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    855e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8560:	016a      	lsls	r2, r5, #5
    8562:	492f      	ldr	r1, [pc, #188]	; (8620 <_usb_d_dev_out_next+0x1e4>)
    8564:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8566:	4a2e      	ldr	r2, [pc, #184]	; (8620 <_usb_d_dev_out_next+0x1e4>)
    8568:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    856c:	6851      	ldr	r1, [r2, #4]
    856e:	f363 319b 	bfi	r1, r3, #14, #14
    8572:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8574:	6853      	ldr	r3, [r2, #4]
    8576:	f36f 030d 	bfc	r3, #0, #14
    857a:	6053      	str	r3, [r2, #4]
	if (!isr) {
    857c:	f1b9 0f00 	cmp.w	r9, #0
    8580:	d108      	bne.n	8594 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    8582:	f1b8 0f01 	cmp.w	r8, #1
    8586:	d025      	beq.n	85d4 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    8588:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    858a:	016b      	lsls	r3, r5, #5
    858c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8590:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8594:	016d      	lsls	r5, r5, #5
    8596:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    859a:	2340      	movs	r3, #64	; 0x40
    859c:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    85a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    85a4:	8a21      	ldrh	r1, [r4, #16]
    85a6:	428b      	cmp	r3, r1
    85a8:	d90a      	bls.n	85c0 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    85aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    85ae:	d80e      	bhi.n	85ce <_usb_d_dev_out_next+0x192>
    85b0:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    85b4:	6821      	ldr	r1, [r4, #0]
    85b6:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    85b8:	0169      	lsls	r1, r5, #5
    85ba:	4819      	ldr	r0, [pc, #100]	; (8620 <_usb_d_dev_out_next+0x1e4>)
    85bc:	5042      	str	r2, [r0, r1]
    85be:	e7d2      	b.n	8566 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    85c0:	428b      	cmp	r3, r1
    85c2:	d2f7      	bcs.n	85b4 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    85c4:	7ce1      	ldrb	r1, [r4, #19]
    85c6:	f041 0120 	orr.w	r1, r1, #32
    85ca:	74e1      	strb	r1, [r4, #19]
    85cc:	e7f2      	b.n	85b4 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    85ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    85d2:	e7ef      	b.n	85b4 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    85d4:	4b12      	ldr	r3, [pc, #72]	; (8620 <_usb_d_dev_out_next+0x1e4>)
    85d6:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    85da:	2200      	movs	r2, #0
    85dc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    85de:	222d      	movs	r2, #45	; 0x2d
    85e0:	e7d3      	b.n	858a <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    85e2:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    85e6:	f890 8013 	ldrb.w	r8, [r0, #19]
    85ea:	f008 0807 	and.w	r8, r8, #7
    85ee:	e749      	b.n	8484 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    85f0:	f1b9 0f00 	cmp.w	r9, #0
    85f4:	d10b      	bne.n	860e <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    85f6:	68a3      	ldr	r3, [r4, #8]
    85f8:	4453      	add	r3, sl
    85fa:	60a3      	str	r3, [r4, #8]
    85fc:	e769      	b.n	84d2 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    85fe:	f890 8013 	ldrb.w	r8, [r0, #19]
    8602:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    8606:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8608:	46bb      	mov	fp, r7
    860a:	46ba      	mov	sl, r7
    860c:	e740      	b.n	8490 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    860e:	8a23      	ldrh	r3, [r4, #16]
    8610:	42bb      	cmp	r3, r7
    8612:	f63f af57 	bhi.w	84c4 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    8616:	68a3      	ldr	r3, [r4, #8]
    8618:	4453      	add	r3, sl
    861a:	60a3      	str	r3, [r4, #8]
    861c:	e759      	b.n	84d2 <_usb_d_dev_out_next+0x96>
    861e:	bf00      	nop
    8620:	200009a8 	.word	0x200009a8
    8624:	0000bacd 	.word	0x0000bacd
    8628:	000080dd 	.word	0x000080dd

0000862c <_usb_d_dev_handler>:
{
    862c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8630:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8634:	8c1e      	ldrh	r6, [r3, #32]
    8636:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8638:	b146      	cbz	r6, 864c <_usb_d_dev_handler+0x20>
    863a:	4d96      	ldr	r5, [pc, #600]	; (8894 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    863c:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    863e:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    8642:	f8df 926c 	ldr.w	r9, [pc, #620]	; 88b0 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    8646:	f8df 826c 	ldr.w	r8, [pc, #620]	; 88b4 <_usb_d_dev_handler+0x288>
    864a:	e0de      	b.n	880a <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    864c:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    864e:	8b1b      	ldrh	r3, [r3, #24]
    8650:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8652:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8654:	f013 0f04 	tst.w	r3, #4
    8658:	d11e      	bne.n	8698 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    865a:	f413 7f00 	tst.w	r3, #512	; 0x200
    865e:	d125      	bne.n	86ac <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8660:	f013 0f80 	tst.w	r3, #128	; 0x80
    8664:	d14f      	bne.n	8706 <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8666:	f013 0f70 	tst.w	r3, #112	; 0x70
    866a:	d158      	bne.n	871e <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    866c:	f013 0f08 	tst.w	r3, #8
    8670:	d178      	bne.n	8764 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8672:	f013 0f01 	tst.w	r3, #1
    8676:	d0e0      	beq.n	863a <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8678:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    867c:	f240 2201 	movw	r2, #513	; 0x201
    8680:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8682:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8684:	2270      	movs	r2, #112	; 0x70
    8686:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8688:	4b83      	ldr	r3, [pc, #524]	; (8898 <_usb_d_dev_handler+0x26c>)
    868a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    868e:	2100      	movs	r1, #0
    8690:	2004      	movs	r0, #4
    8692:	4798      	blx	r3
    8694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8698:	2204      	movs	r2, #4
    869a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    869e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    86a0:	4b7d      	ldr	r3, [pc, #500]	; (8898 <_usb_d_dev_handler+0x26c>)
    86a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    86a6:	4798      	blx	r3
    86a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    86ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86b0:	f240 2201 	movw	r2, #513	; 0x201
    86b4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    86b6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    86b8:	2270      	movs	r2, #112	; 0x70
    86ba:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    86bc:	4b76      	ldr	r3, [pc, #472]	; (8898 <_usb_d_dev_handler+0x26c>)
    86be:	891b      	ldrh	r3, [r3, #8]
    86c0:	f003 030f 	and.w	r3, r3, #15
    86c4:	2b03      	cmp	r3, #3
    86c6:	d014      	beq.n	86f2 <_usb_d_dev_handler+0xc6>
    86c8:	2301      	movs	r3, #1
    86ca:	4873      	ldr	r0, [pc, #460]	; (8898 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    86cc:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    86ce:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    86d2:	8912      	ldrh	r2, [r2, #8]
    86d4:	f002 020f 	and.w	r2, r2, #15
    86d8:	2a03      	cmp	r2, #3
    86da:	d00b      	beq.n	86f4 <_usb_d_dev_handler+0xc8>
    86dc:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    86de:	2b05      	cmp	r3, #5
    86e0:	d1f4      	bne.n	86cc <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    86e2:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    86e4:	4b6c      	ldr	r3, [pc, #432]	; (8898 <_usb_d_dev_handler+0x26c>)
    86e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    86ea:	2003      	movs	r0, #3
    86ec:	4798      	blx	r3
    86ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    86f2:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    86f4:	4b68      	ldr	r3, [pc, #416]	; (8898 <_usb_d_dev_handler+0x26c>)
    86f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    86fa:	8919      	ldrh	r1, [r3, #8]
    86fc:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8700:	2200      	movs	r2, #0
    8702:	811a      	strh	r2, [r3, #8]
    8704:	e7ee      	b.n	86e4 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8706:	2280      	movs	r2, #128	; 0x80
    8708:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    870c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    870e:	4b62      	ldr	r3, [pc, #392]	; (8898 <_usb_d_dev_handler+0x26c>)
    8710:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8714:	2100      	movs	r1, #0
    8716:	2005      	movs	r0, #5
    8718:	4798      	blx	r3
    871a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    871e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8722:	2270      	movs	r2, #112	; 0x70
    8724:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8726:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8728:	f240 2201 	movw	r2, #513	; 0x201
    872c:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    872e:	4b5b      	ldr	r3, [pc, #364]	; (889c <_usb_d_dev_handler+0x270>)
    8730:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8734:	f013 0f01 	tst.w	r3, #1
    8738:	d00e      	beq.n	8758 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    873a:	4a58      	ldr	r2, [pc, #352]	; (889c <_usb_d_dev_handler+0x270>)
    873c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    873e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8742:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8746:	d1f9      	bne.n	873c <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8748:	4b53      	ldr	r3, [pc, #332]	; (8898 <_usb_d_dev_handler+0x26c>)
    874a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    874e:	2100      	movs	r1, #0
    8750:	2002      	movs	r0, #2
    8752:	4798      	blx	r3
    8754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8758:	4a50      	ldr	r2, [pc, #320]	; (889c <_usb_d_dev_handler+0x270>)
    875a:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    875c:	f413 7f80 	tst.w	r3, #256	; 0x100
    8760:	d0fb      	beq.n	875a <_usb_d_dev_handler+0x12e>
    8762:	e7f1      	b.n	8748 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8764:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8768:	2400      	movs	r4, #0
    876a:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    876e:	2208      	movs	r2, #8
    8770:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8772:	2270      	movs	r2, #112	; 0x70
    8774:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8776:	f240 2201 	movw	r2, #513	; 0x201
    877a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    877c:	4b48      	ldr	r3, [pc, #288]	; (88a0 <_usb_d_dev_handler+0x274>)
    877e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8780:	4b45      	ldr	r3, [pc, #276]	; (8898 <_usb_d_dev_handler+0x26c>)
    8782:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8786:	4621      	mov	r1, r4
    8788:	2001      	movs	r0, #1
    878a:	4798      	blx	r3
    878c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8790:	f011 0f10 	tst.w	r1, #16
    8794:	d109      	bne.n	87aa <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8796:	f011 0f40 	tst.w	r1, #64	; 0x40
    879a:	d108      	bne.n	87ae <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    879c:	f011 0f20 	tst.w	r1, #32
    87a0:	d02f      	beq.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    87a2:	2100      	movs	r1, #0
    87a4:	4b3f      	ldr	r3, [pc, #252]	; (88a4 <_usb_d_dev_handler+0x278>)
    87a6:	4798      	blx	r3
    87a8:	e02b      	b.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    87aa:	47c8      	blx	r9
    87ac:	e029      	b.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    87ae:	2101      	movs	r1, #1
    87b0:	4b3c      	ldr	r3, [pc, #240]	; (88a4 <_usb_d_dev_handler+0x278>)
    87b2:	4798      	blx	r3
    87b4:	e025      	b.n	8802 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    87b6:	f011 0f40 	tst.w	r1, #64	; 0x40
    87ba:	d111      	bne.n	87e0 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    87bc:	f011 0f08 	tst.w	r1, #8
    87c0:	d112      	bne.n	87e8 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    87c2:	f011 0f02 	tst.w	r1, #2
    87c6:	d112      	bne.n	87ee <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    87c8:	f003 0307 	and.w	r3, r3, #7
    87cc:	2b01      	cmp	r3, #1
    87ce:	d118      	bne.n	8802 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    87d0:	f011 0f04 	tst.w	r1, #4
    87d4:	d10f      	bne.n	87f6 <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    87d6:	f011 0f10 	tst.w	r1, #16
    87da:	d012      	beq.n	8802 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    87dc:	47c8      	blx	r9
    87de:	e010      	b.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    87e0:	2101      	movs	r1, #1
    87e2:	4b30      	ldr	r3, [pc, #192]	; (88a4 <_usb_d_dev_handler+0x278>)
    87e4:	4798      	blx	r3
    87e6:	e00c      	b.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    87e8:	2101      	movs	r1, #1
    87ea:	47c0      	blx	r8
    87ec:	e009      	b.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    87ee:	2101      	movs	r1, #1
    87f0:	4b2d      	ldr	r3, [pc, #180]	; (88a8 <_usb_d_dev_handler+0x27c>)
    87f2:	4798      	blx	r3
    87f4:	e005      	b.n	8802 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    87f6:	2100      	movs	r1, #0
    87f8:	47c0      	blx	r8
    87fa:	e002      	b.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    87fc:	2100      	movs	r1, #0
    87fe:	4b29      	ldr	r3, [pc, #164]	; (88a4 <_usb_d_dev_handler+0x278>)
    8800:	4798      	blx	r3
    8802:	3401      	adds	r4, #1
    8804:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8806:	2c1b      	cmp	r4, #27
    8808:	d042      	beq.n	8890 <_usb_d_dev_handler+0x264>
    880a:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    880c:	7cab      	ldrb	r3, [r5, #18]
    880e:	2bff      	cmp	r3, #255	; 0xff
    8810:	d0f7      	beq.n	8802 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8812:	f003 030f 	and.w	r3, r3, #15
    8816:	2101      	movs	r1, #1
    8818:	4099      	lsls	r1, r3
    881a:	4231      	tst	r1, r6
    881c:	d0f1      	beq.n	8802 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    881e:	0159      	lsls	r1, r3, #5
    8820:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8824:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8828:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    882a:	015b      	lsls	r3, r3, #5
    882c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8830:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8834:	4019      	ands	r1, r3
    8836:	d0e4      	beq.n	8802 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8838:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    883c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8840:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8844:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8848:	2a01      	cmp	r2, #1
    884a:	d0a1      	beq.n	8790 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    884c:	f013 0f80 	tst.w	r3, #128	; 0x80
    8850:	d1b1      	bne.n	87b6 <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8852:	f011 0f20 	tst.w	r1, #32
    8856:	d1d1      	bne.n	87fc <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8858:	f011 0f04 	tst.w	r1, #4
    885c:	d10e      	bne.n	887c <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    885e:	f011 0f01 	tst.w	r1, #1
    8862:	d10e      	bne.n	8882 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8864:	f003 0307 	and.w	r3, r3, #7
    8868:	2b01      	cmp	r3, #1
    886a:	d1ca      	bne.n	8802 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    886c:	f011 0f08 	tst.w	r1, #8
    8870:	d10b      	bne.n	888a <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8872:	f011 0f10 	tst.w	r1, #16
    8876:	d0c4      	beq.n	8802 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8878:	47c8      	blx	r9
    887a:	e7c2      	b.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    887c:	2100      	movs	r1, #0
    887e:	47c0      	blx	r8
    8880:	e7bf      	b.n	8802 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    8882:	2101      	movs	r1, #1
    8884:	4b09      	ldr	r3, [pc, #36]	; (88ac <_usb_d_dev_handler+0x280>)
    8886:	4798      	blx	r3
    8888:	e7bb      	b.n	8802 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    888a:	2101      	movs	r1, #1
    888c:	47c0      	blx	r8
    888e:	e7b8      	b.n	8802 <_usb_d_dev_handler+0x1d6>
    8890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8894:	20000a7c 	.word	0x20000a7c
    8898:	200009a8 	.word	0x200009a8
    889c:	40001000 	.word	0x40001000
    88a0:	00008275 	.word	0x00008275
    88a4:	000080ad 	.word	0x000080ad
    88a8:	000082b9 	.word	0x000082b9
    88ac:	0000843d 	.word	0x0000843d
    88b0:	0000802d 	.word	0x0000802d
    88b4:	00008175 	.word	0x00008175

000088b8 <_usb_d_dev_init>:
{
    88b8:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    88ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    88be:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    88c0:	f013 0f01 	tst.w	r3, #1
    88c4:	d124      	bne.n	8910 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    88c6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    88ca:	7893      	ldrb	r3, [r2, #2]
    88cc:	f013 0f03 	tst.w	r3, #3
    88d0:	d1fb      	bne.n	88ca <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    88d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    88d6:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    88d8:	f013 0f02 	tst.w	r3, #2
    88dc:	d00f      	beq.n	88fe <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    88de:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    88e2:	7813      	ldrb	r3, [r2, #0]
    88e4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    88e8:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    88ea:	7893      	ldrb	r3, [r2, #2]
    88ec:	f013 0f03 	tst.w	r3, #3
    88f0:	d1fb      	bne.n	88ea <_usb_d_dev_init+0x32>
    88f2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    88f6:	7893      	ldrb	r3, [r2, #2]
    88f8:	f013 0f02 	tst.w	r3, #2
    88fc:	d1fb      	bne.n	88f6 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    88fe:	2201      	movs	r2, #1
    8900:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8904:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8906:	461a      	mov	r2, r3
    8908:	7893      	ldrb	r3, [r2, #2]
    890a:	f013 0f03 	tst.w	r3, #3
    890e:	d1fb      	bne.n	8908 <_usb_d_dev_init+0x50>
    8910:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8914:	7893      	ldrb	r3, [r2, #2]
    8916:	f013 0f01 	tst.w	r3, #1
    891a:	d1fb      	bne.n	8914 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    891c:	4b24      	ldr	r3, [pc, #144]	; (89b0 <_usb_d_dev_init+0xf8>)
    891e:	4a25      	ldr	r2, [pc, #148]	; (89b4 <_usb_d_dev_init+0xfc>)
    8920:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8924:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    8928:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    892c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8930:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    8934:	4b20      	ldr	r3, [pc, #128]	; (89b8 <_usb_d_dev_init+0x100>)
    8936:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8938:	4b20      	ldr	r3, [pc, #128]	; (89bc <_usb_d_dev_init+0x104>)
    893a:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    893c:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8940:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8944:	f011 011f 	ands.w	r1, r1, #31
    8948:	d02b      	beq.n	89a2 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    894a:	291f      	cmp	r1, #31
    894c:	bf08      	it	eq
    894e:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8950:	b34b      	cbz	r3, 89a6 <_usb_d_dev_init+0xee>
		pad_transp = 25;
    8952:	2b1f      	cmp	r3, #31
    8954:	bf08      	it	eq
    8956:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    8958:	b33a      	cbz	r2, 89aa <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    895a:	2a07      	cmp	r2, #7
    895c:	bf08      	it	eq
    895e:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8960:	f003 031f 	and.w	r3, r3, #31
    8964:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    8968:	0312      	lsls	r2, r2, #12
    896a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    896e:	4313      	orrs	r3, r2
    8970:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8974:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8976:	78d3      	ldrb	r3, [r2, #3]
    8978:	f043 0303 	orr.w	r3, r3, #3
    897c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    897e:	78d3      	ldrb	r3, [r2, #3]
    8980:	f043 030c 	orr.w	r3, r3, #12
    8984:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8986:	2304      	movs	r3, #4
    8988:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    898a:	7893      	ldrb	r3, [r2, #2]
    898c:	f013 0f03 	tst.w	r3, #3
    8990:	d1fb      	bne.n	898a <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8992:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8996:	4a06      	ldr	r2, [pc, #24]	; (89b0 <_usb_d_dev_init+0xf8>)
    8998:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    899a:	2201      	movs	r2, #1
    899c:	811a      	strh	r2, [r3, #8]
}
    899e:	2000      	movs	r0, #0
    89a0:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    89a2:	2109      	movs	r1, #9
    89a4:	e7d4      	b.n	8950 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    89a6:	2319      	movs	r3, #25
    89a8:	e7d6      	b.n	8958 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    89aa:	2206      	movs	r2, #6
    89ac:	e7d8      	b.n	8960 <_usb_d_dev_init+0xa8>
    89ae:	bf00      	nop
    89b0:	200009a8 	.word	0x200009a8
    89b4:	00008029 	.word	0x00008029
    89b8:	00008275 	.word	0x00008275
    89bc:	00800084 	.word	0x00800084

000089c0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    89c0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89c4:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    89c6:	f013 0f03 	tst.w	r3, #3
    89ca:	d129      	bne.n	8a20 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    89cc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    89d0:	7893      	ldrb	r3, [r2, #2]
    89d2:	f013 0f03 	tst.w	r3, #3
    89d6:	d1fb      	bne.n	89d0 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    89d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89dc:	781b      	ldrb	r3, [r3, #0]
    89de:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    89e0:	f013 0f02 	tst.w	r3, #2
    89e4:	d108      	bne.n	89f8 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    89e6:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    89ea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    89ee:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    89f0:	7893      	ldrb	r3, [r2, #2]
    89f2:	f013 0f03 	tst.w	r3, #3
    89f6:	d1fb      	bne.n	89f0 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    89f8:	4b0b      	ldr	r3, [pc, #44]	; (8a28 <_usb_d_dev_enable+0x68>)
    89fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    89fe:	609a      	str	r2, [r3, #8]
    8a00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8a04:	609a      	str	r2, [r3, #8]
    8a06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8a0a:	609a      	str	r2, [r3, #8]
    8a0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8a10:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8a12:	f240 228d 	movw	r2, #653	; 0x28d
    8a16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a1a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8a1c:	2000      	movs	r0, #0
    8a1e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8a20:	f06f 0010 	mvn.w	r0, #16
}
    8a24:	4770      	bx	lr
    8a26:	bf00      	nop
    8a28:	e000e100 	.word	0xe000e100

00008a2c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8a2c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8a30:	8913      	ldrh	r3, [r2, #8]
    8a32:	f023 0301 	bic.w	r3, r3, #1
    8a36:	041b      	lsls	r3, r3, #16
    8a38:	0c1b      	lsrs	r3, r3, #16
    8a3a:	8113      	strh	r3, [r2, #8]
    8a3c:	4770      	bx	lr

00008a3e <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8a3e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8a42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a46:	7298      	strb	r0, [r3, #10]
    8a48:	4770      	bx	lr

00008a4a <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    8a4a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a4e:	8a18      	ldrh	r0, [r3, #16]
}
    8a50:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    8a54:	4770      	bx	lr
	...

00008a58 <_usb_d_dev_ep_init>:
{
    8a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a5a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8a5e:	f010 050f 	ands.w	r5, r0, #15
    8a62:	d04d      	beq.n	8b00 <_usb_d_dev_ep_init+0xa8>
    8a64:	f1be 0f00 	cmp.w	lr, #0
    8a68:	bfb4      	ite	lt
    8a6a:	1d6c      	addlt	r4, r5, #5
    8a6c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8a6e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8a72:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    8a74:	2d05      	cmp	r5, #5
    8a76:	d947      	bls.n	8b08 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    8a78:	f06f 0011 	mvn.w	r0, #17
    8a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8a7e:	f1be 0f00 	cmp.w	lr, #0
    8a82:	db1b      	blt.n	8abc <_usb_d_dev_ep_init+0x64>
    8a84:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8a88:	4e37      	ldr	r6, [pc, #220]	; (8b68 <_usb_d_dev_ep_init+0x110>)
    8a8a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8a8e:	2d00      	cmp	r5, #0
    8a90:	d15e      	bne.n	8b50 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8a92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8a96:	4d34      	ldr	r5, [pc, #208]	; (8b68 <_usb_d_dev_ep_init+0x110>)
    8a98:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    8a9c:	4d33      	ldr	r5, [pc, #204]	; (8b6c <_usb_d_dev_ep_init+0x114>)
    8a9e:	00a6      	lsls	r6, r4, #2
    8aa0:	1933      	adds	r3, r6, r4
    8aa2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8aa6:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    8aaa:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    8aae:	3101      	adds	r1, #1
    8ab0:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    8ab4:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    8ab8:	2000      	movs	r0, #0
    8aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8abc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8ac0:	4e29      	ldr	r6, [pc, #164]	; (8b68 <_usb_d_dev_ep_init+0x110>)
    8ac2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8ac6:	686d      	ldr	r5, [r5, #4]
    8ac8:	b935      	cbnz	r5, 8ad8 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8aca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8ace:	4d26      	ldr	r5, [pc, #152]	; (8b68 <_usb_d_dev_ep_init+0x110>)
    8ad0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8ad4:	685f      	ldr	r7, [r3, #4]
    8ad6:	e7e1      	b.n	8a9c <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8ad8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8adc:	4e22      	ldr	r6, [pc, #136]	; (8b68 <_usb_d_dev_ep_init+0x110>)
    8ade:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8ae2:	896d      	ldrh	r5, [r5, #10]
    8ae4:	4295      	cmp	r5, r2
    8ae6:	daf0      	bge.n	8aca <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    8ae8:	f06f 0012 	mvn.w	r0, #18
    8aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    8aee:	f06f 0013 	mvn.w	r0, #19
    8af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    8af4:	f06f 0013 	mvn.w	r0, #19
    8af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    8afa:	f06f 0012 	mvn.w	r0, #18
    8afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8b00:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    8b04:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8b06:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    8b08:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8b0c:	4f17      	ldr	r7, [pc, #92]	; (8b6c <_usb_d_dev_ep_init+0x114>)
    8b0e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    8b12:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    8b16:	2eff      	cmp	r6, #255	; 0xff
    8b18:	d1e9      	bne.n	8aee <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8b1a:	2900      	cmp	r1, #0
    8b1c:	d1af      	bne.n	8a7e <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8b1e:	b125      	cbz	r5, 8b2a <_usb_d_dev_ep_init+0xd2>
    8b20:	f1be 0f00 	cmp.w	lr, #0
    8b24:	bfa4      	itt	ge
    8b26:	3505      	addge	r5, #5
    8b28:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    8b2a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8b2e:	4e0f      	ldr	r6, [pc, #60]	; (8b6c <_usb_d_dev_ep_init+0x114>)
    8b30:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8b34:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    8b38:	2dff      	cmp	r5, #255	; 0xff
    8b3a:	d1db      	bne.n	8af4 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    8b3c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8b40:	4e09      	ldr	r6, [pc, #36]	; (8b68 <_usb_d_dev_ep_init+0x110>)
    8b42:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8b46:	2d00      	cmp	r5, #0
    8b48:	d0d7      	beq.n	8afa <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8b4a:	f1be 0f00 	cmp.w	lr, #0
    8b4e:	dbb5      	blt.n	8abc <_usb_d_dev_ep_init+0x64>
    8b50:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8b54:	4e04      	ldr	r6, [pc, #16]	; (8b68 <_usb_d_dev_ep_init+0x110>)
    8b56:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8b5a:	892d      	ldrh	r5, [r5, #8]
    8b5c:	4295      	cmp	r5, r2
    8b5e:	da98      	bge.n	8a92 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    8b60:	f06f 0012 	mvn.w	r0, #18
    8b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b66:	bf00      	nop
    8b68:	0000d65c 	.word	0x0000d65c
    8b6c:	200009a8 	.word	0x200009a8

00008b70 <_usb_d_dev_ep_deinit>:
{
    8b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b72:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8b74:	f010 060f 	ands.w	r6, r0, #15
    8b78:	d00e      	beq.n	8b98 <_usb_d_dev_ep_deinit+0x28>
    8b7a:	2f00      	cmp	r7, #0
    8b7c:	bfb4      	ite	lt
    8b7e:	1d73      	addlt	r3, r6, #5
    8b80:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8b82:	2e05      	cmp	r6, #5
    8b84:	d900      	bls.n	8b88 <_usb_d_dev_ep_deinit+0x18>
    8b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    8b88:	461d      	mov	r5, r3
    8b8a:	3301      	adds	r3, #1
    8b8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8b90:	4a24      	ldr	r2, [pc, #144]	; (8c24 <_usb_d_dev_ep_deinit+0xb4>)
    8b92:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    8b96:	e002      	b.n	8b9e <_usb_d_dev_ep_deinit+0x2e>
    8b98:	f8df e094 	ldr.w	lr, [pc, #148]	; 8c30 <_usb_d_dev_ep_deinit+0xc0>
    8b9c:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8b9e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8ba2:	4a21      	ldr	r2, [pc, #132]	; (8c28 <_usb_d_dev_ep_deinit+0xb8>)
    8ba4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8ba8:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    8bac:	2aff      	cmp	r2, #255	; 0xff
    8bae:	d0ea      	beq.n	8b86 <_usb_d_dev_ep_deinit+0x16>
    8bb0:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    8bb2:	2203      	movs	r2, #3
    8bb4:	0ff9      	lsrs	r1, r7, #31
    8bb6:	4670      	mov	r0, lr
    8bb8:	4b1c      	ldr	r3, [pc, #112]	; (8c2c <_usb_d_dev_ep_deinit+0xbc>)
    8bba:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8bbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8bc0:	4a19      	ldr	r2, [pc, #100]	; (8c28 <_usb_d_dev_ep_deinit+0xb8>)
    8bc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8bc6:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8bca:	f003 0307 	and.w	r3, r3, #7
    8bce:	2b01      	cmp	r3, #1
    8bd0:	d016      	beq.n	8c00 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    8bd2:	2f00      	cmp	r7, #0
    8bd4:	db1b      	blt.n	8c0e <_usb_d_dev_ep_deinit+0x9e>
    8bd6:	0160      	lsls	r0, r4, #5
    8bd8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8bdc:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    8be0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8be4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    8be8:	4b0f      	ldr	r3, [pc, #60]	; (8c28 <_usb_d_dev_ep_deinit+0xb8>)
    8bea:	00aa      	lsls	r2, r5, #2
    8bec:	1951      	adds	r1, r2, r5
    8bee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8bf2:	2000      	movs	r0, #0
    8bf4:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    8bf8:	22ff      	movs	r2, #255	; 0xff
    8bfa:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    8bfe:	e7c2      	b.n	8b86 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    8c00:	0160      	lsls	r0, r4, #5
    8c02:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8c06:	2300      	movs	r3, #0
    8c08:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8c0c:	e7ec      	b.n	8be8 <_usb_d_dev_ep_deinit+0x78>
    8c0e:	0176      	lsls	r6, r6, #5
    8c10:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    8c14:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8c18:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8c1c:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    8c20:	e7e2      	b.n	8be8 <_usb_d_dev_ep_deinit+0x78>
    8c22:	bf00      	nop
    8c24:	20000a68 	.word	0x20000a68
    8c28:	200009a8 	.word	0x200009a8
    8c2c:	00008109 	.word	0x00008109
    8c30:	20000a7c 	.word	0x20000a7c

00008c34 <_usb_d_dev_ep_enable>:
{
    8c34:	b4f0      	push	{r4, r5, r6, r7}
    8c36:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8c38:	f010 000f 	ands.w	r0, r0, #15
    8c3c:	f000 80a7 	beq.w	8d8e <_usb_d_dev_ep_enable+0x15a>
    8c40:	2e00      	cmp	r6, #0
    8c42:	bfb4      	ite	lt
    8c44:	1d43      	addlt	r3, r0, #5
    8c46:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8c48:	4605      	mov	r5, r0
    8c4a:	0142      	lsls	r2, r0, #5
    8c4c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8c50:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    8c54:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8c56:	2805      	cmp	r0, #5
    8c58:	f240 80a0 	bls.w	8d9c <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    8c5c:	f06f 0011 	mvn.w	r0, #17
    8c60:	e07d      	b.n	8d5e <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    8c62:	f014 0f77 	tst.w	r4, #119	; 0x77
    8c66:	f040 8089 	bne.w	8d7c <_usb_d_dev_ep_enable+0x148>
    8c6a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8c6e:	2111      	movs	r1, #17
    8c70:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8c74:	4c9b      	ldr	r4, [pc, #620]	; (8ee4 <_usb_d_dev_ep_enable+0x2b0>)
    8c76:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    8c7a:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    8c7e:	4c9a      	ldr	r4, [pc, #616]	; (8ee8 <_usb_d_dev_ep_enable+0x2b4>)
    8c80:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8c84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8c88:	f200 80cd 	bhi.w	8e26 <_usb_d_dev_ep_enable+0x1f2>
    8c8c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8c90:	f200 8112 	bhi.w	8eb8 <_usb_d_dev_ep_enable+0x284>
    8c94:	2980      	cmp	r1, #128	; 0x80
    8c96:	f200 8101 	bhi.w	8e9c <_usb_d_dev_ep_enable+0x268>
    8c9a:	2940      	cmp	r1, #64	; 0x40
    8c9c:	f200 8113 	bhi.w	8ec6 <_usb_d_dev_ep_enable+0x292>
    8ca0:	2920      	cmp	r1, #32
    8ca2:	f200 8102 	bhi.w	8eaa <_usb_d_dev_ep_enable+0x276>
    8ca6:	2910      	cmp	r1, #16
    8ca8:	f200 8114 	bhi.w	8ed4 <_usb_d_dev_ep_enable+0x2a0>
    8cac:	2908      	cmp	r1, #8
    8cae:	bf94      	ite	ls
    8cb0:	2600      	movls	r6, #0
    8cb2:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cb4:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8cb8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8cba:	f3c1 010d 	ubfx	r1, r1, #0, #14
    8cbe:	e0b8      	b.n	8e32 <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    8cc0:	f014 0f70 	tst.w	r4, #112	; 0x70
    8cc4:	d15d      	bne.n	8d82 <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    8cc6:	4e87      	ldr	r6, [pc, #540]	; (8ee4 <_usb_d_dev_ep_enable+0x2b0>)
    8cc8:	009f      	lsls	r7, r3, #2
    8cca:	18f9      	adds	r1, r7, r3
    8ccc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8cd0:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8cd4:	0109      	lsls	r1, r1, #4
    8cd6:	f001 0170 	and.w	r1, r1, #112	; 0x70
    8cda:	430c      	orrs	r4, r1
    8cdc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8ce0:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ce4:	443b      	add	r3, r7
    8ce6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8cea:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    8cee:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8cf6:	d80f      	bhi.n	8d18 <_usb_d_dev_ep_enable+0xe4>
    8cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8cfc:	d819      	bhi.n	8d32 <_usb_d_dev_ep_enable+0xfe>
    8cfe:	2b80      	cmp	r3, #128	; 0x80
    8d00:	d819      	bhi.n	8d36 <_usb_d_dev_ep_enable+0x102>
    8d02:	2b40      	cmp	r3, #64	; 0x40
    8d04:	d819      	bhi.n	8d3a <_usb_d_dev_ep_enable+0x106>
    8d06:	2b20      	cmp	r3, #32
    8d08:	d819      	bhi.n	8d3e <_usb_d_dev_ep_enable+0x10a>
    8d0a:	2b10      	cmp	r3, #16
    8d0c:	d819      	bhi.n	8d42 <_usb_d_dev_ep_enable+0x10e>
    8d0e:	2b08      	cmp	r3, #8
    8d10:	bf94      	ite	ls
    8d12:	2300      	movls	r3, #0
    8d14:	2301      	movhi	r3, #1
    8d16:	e000      	b.n	8d1a <_usb_d_dev_ep_enable+0xe6>
    8d18:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8d1a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    8d1e:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8d20:	2380      	movs	r3, #128	; 0x80
    8d22:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8d26:	4b6f      	ldr	r3, [pc, #444]	; (8ee4 <_usb_d_dev_ep_enable+0x2b0>)
    8d28:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8d2c:	2000      	movs	r0, #0
    8d2e:	76a8      	strb	r0, [r5, #26]
    8d30:	e015      	b.n	8d5e <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8d32:	2306      	movs	r3, #6
    8d34:	e7f1      	b.n	8d1a <_usb_d_dev_ep_enable+0xe6>
    8d36:	2305      	movs	r3, #5
    8d38:	e7ef      	b.n	8d1a <_usb_d_dev_ep_enable+0xe6>
    8d3a:	2304      	movs	r3, #4
    8d3c:	e7ed      	b.n	8d1a <_usb_d_dev_ep_enable+0xe6>
    8d3e:	2303      	movs	r3, #3
    8d40:	e7eb      	b.n	8d1a <_usb_d_dev_ep_enable+0xe6>
    8d42:	2302      	movs	r3, #2
    8d44:	e7e9      	b.n	8d1a <_usb_d_dev_ep_enable+0xe6>
    8d46:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8d48:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8d4c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8d4e:	2340      	movs	r3, #64	; 0x40
    8d50:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    8d54:	4b63      	ldr	r3, [pc, #396]	; (8ee4 <_usb_d_dev_ep_enable+0x2b0>)
    8d56:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8d5a:	2000      	movs	r0, #0
    8d5c:	72a8      	strb	r0, [r5, #10]
}
    8d5e:	bcf0      	pop	{r4, r5, r6, r7}
    8d60:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8d62:	2106      	movs	r1, #6
    8d64:	e7f0      	b.n	8d48 <_usb_d_dev_ep_enable+0x114>
    8d66:	2105      	movs	r1, #5
    8d68:	e7ee      	b.n	8d48 <_usb_d_dev_ep_enable+0x114>
    8d6a:	2104      	movs	r1, #4
    8d6c:	e7ec      	b.n	8d48 <_usb_d_dev_ep_enable+0x114>
    8d6e:	2103      	movs	r1, #3
    8d70:	e7ea      	b.n	8d48 <_usb_d_dev_ep_enable+0x114>
    8d72:	2102      	movs	r1, #2
    8d74:	e7e8      	b.n	8d48 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    8d76:	f06f 0011 	mvn.w	r0, #17
    8d7a:	e7f0      	b.n	8d5e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8d7c:	f06f 0013 	mvn.w	r0, #19
    8d80:	e7ed      	b.n	8d5e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8d82:	f06f 0013 	mvn.w	r0, #19
    8d86:	e7ea      	b.n	8d5e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8d88:	f06f 0013 	mvn.w	r0, #19
    8d8c:	e7e7      	b.n	8d5e <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8d8e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d92:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    8d96:	b2e4      	uxtb	r4, r4
    8d98:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    8d9a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8d9c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8da0:	4950      	ldr	r1, [pc, #320]	; (8ee4 <_usb_d_dev_ep_enable+0x2b0>)
    8da2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8da6:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8daa:	2aff      	cmp	r2, #255	; 0xff
    8dac:	d0e3      	beq.n	8d76 <_usb_d_dev_ep_enable+0x142>
    8dae:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    8db0:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    8db2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    8db6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    8dba:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8dbe:	f001 0107 	and.w	r1, r1, #7
    8dc2:	2901      	cmp	r1, #1
    8dc4:	f43f af4d 	beq.w	8c62 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    8dc8:	2e00      	cmp	r6, #0
    8dca:	f6ff af79 	blt.w	8cc0 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    8dce:	f014 0f07 	tst.w	r4, #7
    8dd2:	d1d9      	bne.n	8d88 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    8dd4:	4e43      	ldr	r6, [pc, #268]	; (8ee4 <_usb_d_dev_ep_enable+0x2b0>)
    8dd6:	009f      	lsls	r7, r3, #2
    8dd8:	18f9      	adds	r1, r7, r3
    8dda:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8dde:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8de2:	f001 0107 	and.w	r1, r1, #7
    8de6:	430c      	orrs	r4, r1
    8de8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8dec:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8df0:	443b      	add	r3, r7
    8df2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8df6:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    8dfa:	4b3b      	ldr	r3, [pc, #236]	; (8ee8 <_usb_d_dev_ep_enable+0x2b4>)
    8dfc:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8e00:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8e04:	d89f      	bhi.n	8d46 <_usb_d_dev_ep_enable+0x112>
    8e06:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8e0a:	d8aa      	bhi.n	8d62 <_usb_d_dev_ep_enable+0x12e>
    8e0c:	2980      	cmp	r1, #128	; 0x80
    8e0e:	d8aa      	bhi.n	8d66 <_usb_d_dev_ep_enable+0x132>
    8e10:	2940      	cmp	r1, #64	; 0x40
    8e12:	d8aa      	bhi.n	8d6a <_usb_d_dev_ep_enable+0x136>
    8e14:	2920      	cmp	r1, #32
    8e16:	d8aa      	bhi.n	8d6e <_usb_d_dev_ep_enable+0x13a>
    8e18:	2910      	cmp	r1, #16
    8e1a:	d8aa      	bhi.n	8d72 <_usb_d_dev_ep_enable+0x13e>
    8e1c:	2908      	cmp	r1, #8
    8e1e:	bf94      	ite	ls
    8e20:	2100      	movls	r1, #0
    8e22:	2101      	movhi	r1, #1
    8e24:	e790      	b.n	8d48 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e26:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8e2a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e2c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8e30:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e32:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    8e36:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8e38:	2640      	movs	r6, #64	; 0x40
    8e3a:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8e3e:	2180      	movs	r1, #128	; 0x80
    8e40:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8e44:	4f27      	ldr	r7, [pc, #156]	; (8ee4 <_usb_d_dev_ep_enable+0x2b0>)
    8e46:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    8e4a:	2000      	movs	r0, #0
    8e4c:	72a8      	strb	r0, [r5, #10]
    8e4e:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8e50:	009c      	lsls	r4, r3, #2
    8e52:	18e1      	adds	r1, r4, r3
    8e54:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    8e58:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    8e5c:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8e60:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    8e64:	0152      	lsls	r2, r2, #5
    8e66:	18b9      	adds	r1, r7, r2
    8e68:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8e6a:	4423      	add	r3, r4
    8e6c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8e70:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    8e74:	684b      	ldr	r3, [r1, #4]
    8e76:	f364 339b 	bfi	r3, r4, #14, #14
    8e7a:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8e7c:	684b      	ldr	r3, [r1, #4]
    8e7e:	f360 030d 	bfi	r3, r0, #0, #14
    8e82:	604b      	str	r3, [r1, #4]
    8e84:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8e88:	21b0      	movs	r1, #176	; 0xb0
    8e8a:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8e8e:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8e92:	461a      	mov	r2, r3
    8e94:	2310      	movs	r3, #16
    8e96:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    8e9a:	e760      	b.n	8d5e <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e9c:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ea0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ea2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ea6:	2605      	movs	r6, #5
    8ea8:	e7c3      	b.n	8e32 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8eaa:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8eae:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8eb0:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8eb4:	2603      	movs	r6, #3
    8eb6:	e7bc      	b.n	8e32 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8eb8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ebc:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ebe:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ec2:	2606      	movs	r6, #6
    8ec4:	e7b5      	b.n	8e32 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ec6:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8eca:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ecc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ed0:	2604      	movs	r6, #4
    8ed2:	e7ae      	b.n	8e32 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ed4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ed8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8eda:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ede:	2602      	movs	r6, #2
    8ee0:	e7a7      	b.n	8e32 <_usb_d_dev_ep_enable+0x1fe>
    8ee2:	bf00      	nop
    8ee4:	200009a8 	.word	0x200009a8
    8ee8:	0fffc000 	.word	0x0fffc000

00008eec <_usb_d_dev_ep_stall>:
{
    8eec:	b470      	push	{r4, r5, r6}
    8eee:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    8ef0:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8ef2:	f010 000f 	ands.w	r0, r0, #15
    8ef6:	d008      	beq.n	8f0a <_usb_d_dev_ep_stall+0x1e>
    8ef8:	2b00      	cmp	r3, #0
    8efa:	bfb4      	ite	lt
    8efc:	1d43      	addlt	r3, r0, #5
    8efe:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    8f00:	2805      	cmp	r0, #5
    8f02:	d903      	bls.n	8f0c <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    8f04:	f06f 0011 	mvn.w	r0, #17
    8f08:	e018      	b.n	8f3c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    8f0a:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    8f0c:	2901      	cmp	r1, #1
    8f0e:	d017      	beq.n	8f40 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    8f10:	2900      	cmp	r1, #0
    8f12:	d03a      	beq.n	8f8a <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8f14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8f18:	4a45      	ldr	r2, [pc, #276]	; (9030 <_usb_d_dev_ep_stall+0x144>)
    8f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8f1e:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8f22:	f003 030f 	and.w	r3, r3, #15
    8f26:	015b      	lsls	r3, r3, #5
    8f28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f2c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8f30:	2310      	movs	r3, #16
    8f32:	40a3      	lsls	r3, r4
    8f34:	421a      	tst	r2, r3
    8f36:	bf14      	ite	ne
    8f38:	2001      	movne	r0, #1
    8f3a:	2000      	moveq	r0, #0
}
    8f3c:	bc70      	pop	{r4, r5, r6}
    8f3e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8f40:	2510      	movs	r5, #16
    8f42:	40a5      	lsls	r5, r4
    8f44:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8f46:	493a      	ldr	r1, [pc, #232]	; (9030 <_usb_d_dev_ep_stall+0x144>)
    8f48:	009e      	lsls	r6, r3, #2
    8f4a:	18f2      	adds	r2, r6, r3
    8f4c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8f50:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8f54:	f002 020f 	and.w	r2, r2, #15
    8f58:	0150      	lsls	r0, r2, #5
    8f5a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8f5e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8f62:	2020      	movs	r0, #32
    8f64:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8f68:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8f6a:	0152      	lsls	r2, r2, #5
    8f6c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8f70:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    8f74:	4433      	add	r3, r6
    8f76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8f7a:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8f7e:	f042 0208 	orr.w	r2, r2, #8
    8f82:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    8f86:	2000      	movs	r0, #0
    8f88:	e7d8      	b.n	8f3c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    8f8a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8f8e:	4928      	ldr	r1, [pc, #160]	; (9030 <_usb_d_dev_ep_stall+0x144>)
    8f90:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8f94:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8f98:	f002 020f 	and.w	r2, r2, #15
    8f9c:	0151      	lsls	r1, r2, #5
    8f9e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8fa2:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8fa6:	2010      	movs	r0, #16
    8fa8:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    8faa:	4205      	tst	r5, r0
    8fac:	d03c      	beq.n	9028 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8fae:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8fb0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8fb4:	2020      	movs	r0, #32
    8fb6:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8fb8:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8fba:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8fbe:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    8fc2:	4202      	tst	r2, r0
    8fc4:	d007      	beq.n	8fd6 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8fc6:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8fca:	2201      	movs	r2, #1
    8fcc:	fa02 f404 	lsl.w	r4, r2, r4
    8fd0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8fd2:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8fd6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8fda:	4815      	ldr	r0, [pc, #84]	; (9030 <_usb_d_dev_ep_stall+0x144>)
    8fdc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8fe0:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    8fe4:	f002 0207 	and.w	r2, r2, #7
    8fe8:	2a01      	cmp	r2, #1
    8fea:	d00c      	beq.n	9006 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    8fec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8ff0:	4a0f      	ldr	r2, [pc, #60]	; (9030 <_usb_d_dev_ep_stall+0x144>)
    8ff2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8ff6:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8ffa:	f36f 02c3 	bfc	r2, #3, #1
    8ffe:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9002:	2000      	movs	r0, #0
    9004:	e79a      	b.n	8f3c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9006:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    900a:	f012 0f30 	tst.w	r2, #48	; 0x30
    900e:	d10d      	bne.n	902c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    9010:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9014:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9018:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    901c:	f36f 02c3 	bfc	r2, #3, #1
    9020:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9024:	2000      	movs	r0, #0
    9026:	e789      	b.n	8f3c <_usb_d_dev_ep_stall+0x50>
    9028:	2000      	movs	r0, #0
    902a:	e787      	b.n	8f3c <_usb_d_dev_ep_stall+0x50>
    902c:	2000      	movs	r0, #0
    902e:	e785      	b.n	8f3c <_usb_d_dev_ep_stall+0x50>
    9030:	200009a8 	.word	0x200009a8

00009034 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9034:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    9036:	f000 040f 	and.w	r4, r0, #15
    903a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    903c:	4a14      	ldr	r2, [pc, #80]	; (9090 <_usb_d_dev_ep_read_req+0x5c>)
    903e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    9040:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9042:	6840      	ldr	r0, [r0, #4]
    9044:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9048:	2c05      	cmp	r4, #5
    904a:	d817      	bhi.n	907c <_usb_d_dev_ep_read_req+0x48>
    904c:	b1c9      	cbz	r1, 9082 <_usb_d_dev_ep_read_req+0x4e>
    904e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9052:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    9056:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9058:	2a11      	cmp	r2, #17
    905a:	d115      	bne.n	9088 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    905c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    9060:	f012 0f10 	tst.w	r2, #16
    9064:	d102      	bne.n	906c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    9066:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9068:	bc30      	pop	{r4, r5}
    906a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    906c:	682c      	ldr	r4, [r5, #0]
    906e:	686a      	ldr	r2, [r5, #4]
    9070:	600c      	str	r4, [r1, #0]
    9072:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9074:	2210      	movs	r2, #16
    9076:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    907a:	e7f5      	b.n	9068 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    907c:	f06f 0011 	mvn.w	r0, #17
    9080:	e7f2      	b.n	9068 <_usb_d_dev_ep_read_req+0x34>
    9082:	f06f 0011 	mvn.w	r0, #17
    9086:	e7ef      	b.n	9068 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    9088:	f06f 0012 	mvn.w	r0, #18
    908c:	e7ec      	b.n	9068 <_usb_d_dev_ep_read_req+0x34>
    908e:	bf00      	nop
    9090:	200009a8 	.word	0x200009a8

00009094 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9098:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    909a:	7a03      	ldrb	r3, [r0, #8]
    909c:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    909e:	f013 030f 	ands.w	r3, r3, #15
    90a2:	f000 80c2 	beq.w	922a <_usb_d_dev_ep_trans+0x196>
    90a6:	2e00      	cmp	r6, #0
    90a8:	bfb4      	ite	lt
    90aa:	1d5a      	addlt	r2, r3, #5
    90ac:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    90ae:	4614      	mov	r4, r2
    90b0:	4969      	ldr	r1, [pc, #420]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    90b2:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    90b6:	1c55      	adds	r5, r2, #1
    90b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    90bc:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    90c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    90c4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    90c8:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    90cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    90d0:	428a      	cmp	r2, r1
    90d2:	d025      	beq.n	9120 <_usb_d_dev_ep_trans+0x8c>
    90d4:	1e55      	subs	r5, r2, #1
    90d6:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    90d8:	6841      	ldr	r1, [r0, #4]
    90da:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    90dc:	2b05      	cmp	r3, #5
    90de:	f200 8092 	bhi.w	9206 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    90e2:	6803      	ldr	r3, [r0, #0]
    90e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    90e8:	d31c      	bcc.n	9124 <_usb_d_dev_ep_trans+0x90>
    90ea:	eb03 0c01 	add.w	ip, r3, r1
    90ee:	f8df e180 	ldr.w	lr, [pc, #384]	; 9270 <_usb_d_dev_ep_trans+0x1dc>
    90f2:	45f4      	cmp	ip, lr
    90f4:	d816      	bhi.n	9124 <_usb_d_dev_ep_trans+0x90>
    90f6:	f013 0f03 	tst.w	r3, #3
    90fa:	d113      	bne.n	9124 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    90fc:	2e00      	cmp	r6, #0
    90fe:	db2a      	blt.n	9156 <_usb_d_dev_ep_trans+0xc2>
    9100:	428a      	cmp	r2, r1
    9102:	f200 809c 	bhi.w	923e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    9106:	b34d      	cbz	r5, 915c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9108:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    910c:	4a52      	ldr	r2, [pc, #328]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    910e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9116:	2b00      	cmp	r3, #0
    9118:	d07b      	beq.n	9212 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    911a:	f04f 0800 	mov.w	r8, #0
    911e:	e00c      	b.n	913a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9120:	4615      	mov	r5, r2
    9122:	e7d9      	b.n	90d8 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    9124:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9128:	4a4b      	ldr	r2, [pc, #300]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    912a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    912e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9132:	2b00      	cmp	r3, #0
    9134:	d06a      	beq.n	920c <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    9136:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    913a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    913e:	4a46      	ldr	r2, [pc, #280]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    9140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9144:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9148:	f013 0f08 	tst.w	r3, #8
    914c:	d009      	beq.n	9162 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    914e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    9150:	b003      	add	sp, #12
    9152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    9156:	f04f 0800 	mov.w	r8, #0
    915a:	e7ee      	b.n	913a <_usb_d_dev_ep_trans+0xa6>
    915c:	f04f 0800 	mov.w	r8, #0
    9160:	e7eb      	b.n	913a <_usb_d_dev_ep_trans+0xa6>
    9162:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    9164:	a801      	add	r0, sp, #4
    9166:	4b3d      	ldr	r3, [pc, #244]	; (925c <_usb_d_dev_ep_trans+0x1c8>)
    9168:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    916a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    916e:	4a3a      	ldr	r2, [pc, #232]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    9170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9174:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9178:	f013 0f40 	tst.w	r3, #64	; 0x40
    917c:	d13c      	bne.n	91f8 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    917e:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    9182:	4b35      	ldr	r3, [pc, #212]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    9184:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    9188:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    918c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9190:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    9194:	a801      	add	r0, sp, #4
    9196:	4b32      	ldr	r3, [pc, #200]	; (9260 <_usb_d_dev_ep_trans+0x1cc>)
    9198:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    919a:	f8da 3000 	ldr.w	r3, [sl]
    919e:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    91a2:	f8da 3004 	ldr.w	r3, [sl, #4]
    91a6:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    91aa:	2300      	movs	r3, #0
    91ac:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    91b0:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    91b2:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    91b6:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    91ba:	f368 1345 	bfi	r3, r8, #5, #1
    91be:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    91c2:	f89a 3009 	ldrb.w	r3, [sl, #9]
    91c6:	b1e3      	cbz	r3, 9202 <_usb_d_dev_ep_trans+0x16e>
    91c8:	fab5 f585 	clz	r5, r5
    91cc:	096d      	lsrs	r5, r5, #5
    91ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    91d2:	4b21      	ldr	r3, [pc, #132]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    91d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    91d8:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    91dc:	f365 1304 	bfi	r3, r5, #4, #1
    91e0:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    91e4:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    91e6:	f04f 0100 	mov.w	r1, #0
    91ea:	4638      	mov	r0, r7
    91ec:	bfb4      	ite	lt
    91ee:	4b1d      	ldrlt	r3, [pc, #116]	; (9264 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    91f0:	4b1d      	ldrge	r3, [pc, #116]	; (9268 <_usb_d_dev_ep_trans+0x1d4>)
    91f2:	4798      	blx	r3
	return ERR_NONE;
    91f4:	2000      	movs	r0, #0
    91f6:	e7ab      	b.n	9150 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    91f8:	a801      	add	r0, sp, #4
    91fa:	4b19      	ldr	r3, [pc, #100]	; (9260 <_usb_d_dev_ep_trans+0x1cc>)
    91fc:	4798      	blx	r3
		return USB_BUSY;
    91fe:	2001      	movs	r0, #1
    9200:	e7a6      	b.n	9150 <_usb_d_dev_ep_trans+0xbc>
    9202:	2500      	movs	r5, #0
    9204:	e7e3      	b.n	91ce <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    9206:	f06f 0011 	mvn.w	r0, #17
    920a:	e7a1      	b.n	9150 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    920c:	f06f 0012 	mvn.w	r0, #18
    9210:	e79e      	b.n	9150 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    9212:	f06f 0011 	mvn.w	r0, #17
    9216:	e79b      	b.n	9150 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9218:	f06f 0012 	mvn.w	r0, #18
    921c:	e798      	b.n	9150 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    921e:	6841      	ldr	r1, [r0, #4]
    9220:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    9224:	4f11      	ldr	r7, [pc, #68]	; (926c <_usb_d_dev_ep_trans+0x1d8>)
    9226:	2400      	movs	r4, #0
    9228:	e75b      	b.n	90e2 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    922a:	4a0b      	ldr	r2, [pc, #44]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    922c:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9230:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9234:	428a      	cmp	r2, r1
    9236:	d0f2      	beq.n	921e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9238:	4f0c      	ldr	r7, [pc, #48]	; (926c <_usb_d_dev_ep_trans+0x1d8>)
    923a:	2400      	movs	r4, #0
    923c:	e74a      	b.n	90d4 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    923e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9242:	4a05      	ldr	r2, [pc, #20]	; (9258 <_usb_d_dev_ep_trans+0x1c4>)
    9244:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    924c:	2b00      	cmp	r3, #0
    924e:	d0e3      	beq.n	9218 <_usb_d_dev_ep_trans+0x184>
    9250:	f04f 0801 	mov.w	r8, #1
    9254:	e771      	b.n	913a <_usb_d_dev_ep_trans+0xa6>
    9256:	bf00      	nop
    9258:	200009a8 	.word	0x200009a8
    925c:	00004589 	.word	0x00004589
    9260:	00004597 	.word	0x00004597
    9264:	000082b9 	.word	0x000082b9
    9268:	0000843d 	.word	0x0000843d
    926c:	20000a7c 	.word	0x20000a7c
    9270:	20041fff 	.word	0x20041fff

00009274 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9274:	4b07      	ldr	r3, [pc, #28]	; (9294 <_usb_d_dev_register_callback+0x20>)
    9276:	2900      	cmp	r1, #0
    9278:	bf08      	it	eq
    927a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    927c:	2801      	cmp	r0, #1
    927e:	d004      	beq.n	928a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    9280:	b910      	cbnz	r0, 9288 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    9282:	4b05      	ldr	r3, [pc, #20]	; (9298 <_usb_d_dev_register_callback+0x24>)
    9284:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    9288:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    928a:	4b03      	ldr	r3, [pc, #12]	; (9298 <_usb_d_dev_register_callback+0x24>)
    928c:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    9290:	4770      	bx	lr
    9292:	bf00      	nop
    9294:	00008029 	.word	0x00008029
    9298:	200009a8 	.word	0x200009a8

0000929c <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    929c:	4b0a      	ldr	r3, [pc, #40]	; (92c8 <_usb_d_dev_register_ep_callback+0x2c>)
    929e:	2900      	cmp	r1, #0
    92a0:	bf08      	it	eq
    92a2:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    92a4:	4603      	mov	r3, r0
    92a6:	b138      	cbz	r0, 92b8 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    92a8:	2801      	cmp	r0, #1
    92aa:	d009      	beq.n	92c0 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    92ac:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    92ae:	bf04      	itt	eq
    92b0:	4b06      	ldreq	r3, [pc, #24]	; (92cc <_usb_d_dev_register_ep_callback+0x30>)
    92b2:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    92b6:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    92b8:	4b04      	ldr	r3, [pc, #16]	; (92cc <_usb_d_dev_register_ep_callback+0x30>)
    92ba:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    92be:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    92c0:	4b02      	ldr	r3, [pc, #8]	; (92cc <_usb_d_dev_register_ep_callback+0x30>)
    92c2:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    92c6:	4770      	bx	lr
    92c8:	00008029 	.word	0x00008029
    92cc:	200009a8 	.word	0x200009a8

000092d0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    92d0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    92d2:	4b01      	ldr	r3, [pc, #4]	; (92d8 <USB_0_Handler+0x8>)
    92d4:	4798      	blx	r3
    92d6:	bd08      	pop	{r3, pc}
    92d8:	0000862d 	.word	0x0000862d

000092dc <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    92dc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    92de:	4b01      	ldr	r3, [pc, #4]	; (92e4 <USB_1_Handler+0x8>)
    92e0:	4798      	blx	r3
    92e2:	bd08      	pop	{r3, pc}
    92e4:	0000862d 	.word	0x0000862d

000092e8 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    92e8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    92ea:	4b01      	ldr	r3, [pc, #4]	; (92f0 <USB_2_Handler+0x8>)
    92ec:	4798      	blx	r3
    92ee:	bd08      	pop	{r3, pc}
    92f0:	0000862d 	.word	0x0000862d

000092f4 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    92f4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    92f6:	4b01      	ldr	r3, [pc, #4]	; (92fc <USB_3_Handler+0x8>)
    92f8:	4798      	blx	r3
    92fa:	bd08      	pop	{r3, pc}
    92fc:	0000862d 	.word	0x0000862d

00009300 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    9300:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    9302:	4604      	mov	r4, r0
    9304:	b340      	cbz	r0, 9358 <_wdt_init+0x58>
    9306:	6800      	ldr	r0, [r0, #0]
    9308:	3000      	adds	r0, #0
    930a:	bf18      	it	ne
    930c:	2001      	movne	r0, #1
    930e:	2250      	movs	r2, #80	; 0x50
    9310:	4915      	ldr	r1, [pc, #84]	; (9368 <_wdt_init+0x68>)
    9312:	4b16      	ldr	r3, [pc, #88]	; (936c <_wdt_init+0x6c>)
    9314:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    9316:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9318:	689a      	ldr	r2, [r3, #8]
    931a:	f012 0f0e 	tst.w	r2, #14
    931e:	d1fb      	bne.n	9318 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9320:	781a      	ldrb	r2, [r3, #0]
    9322:	09d2      	lsrs	r2, r2, #7
    9324:	d11a      	bne.n	935c <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9326:	689a      	ldr	r2, [r3, #8]
    9328:	f012 0f0e 	tst.w	r2, #14
    932c:	d1fb      	bne.n	9326 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    932e:	781a      	ldrb	r2, [r3, #0]
    9330:	f012 0f02 	tst.w	r2, #2
    9334:	d115      	bne.n	9362 <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9336:	781a      	ldrb	r2, [r3, #0]
    9338:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    933c:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    933e:	689a      	ldr	r2, [r3, #8]
    9340:	f012 0f0e 	tst.w	r2, #14
    9344:	d1fb      	bne.n	933e <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    9346:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9348:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    934a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    934e:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    9352:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    9354:	2000      	movs	r0, #0
    9356:	bd10      	pop	{r4, pc}
    9358:	2000      	movs	r0, #0
    935a:	e7d8      	b.n	930e <_wdt_init+0xe>
		return ERR_DENIED;
    935c:	f06f 0010 	mvn.w	r0, #16
    9360:	bd10      	pop	{r4, pc}
    9362:	f06f 0010 	mvn.w	r0, #16
}
    9366:	bd10      	pop	{r4, pc}
    9368:	0000d6a4 	.word	0x0000d6a4
    936c:	00005921 	.word	0x00005921

00009370 <RTC_Scheduler_ping_cb>:
static struct timer_task RTC_Scheduler_ping;
static struct timer_task RTC_Scheduler_realtime;
static struct timer_task RTC_Scheduler_heartbeat;

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
    9370:	b508      	push	{r3, lr}
	// [2...5] is ping report descriptor
	pingflag++;
    9372:	4a06      	ldr	r2, [pc, #24]	; (938c <RTC_Scheduler_ping_cb+0x1c>)
    9374:	7813      	ldrb	r3, [r2, #0]
    9376:	3301      	adds	r3, #1
    9378:	b2db      	uxtb	r3, r3
    937a:	7013      	strb	r3, [r2, #0]
	grid_report_sys_set_changed_flag(&grid_ui_state, 2+pingflag%4);
    937c:	7811      	ldrb	r1, [r2, #0]
    937e:	f001 0103 	and.w	r1, r1, #3
    9382:	3102      	adds	r1, #2
    9384:	4802      	ldr	r0, [pc, #8]	; (9390 <RTC_Scheduler_ping_cb+0x20>)
    9386:	4b03      	ldr	r3, [pc, #12]	; (9394 <RTC_Scheduler_ping_cb+0x24>)
    9388:	4798      	blx	r3
    938a:	bd08      	pop	{r3, pc}
    938c:	20000d68 	.word	0x20000d68
    9390:	20001cf8 	.word	0x20001cf8
    9394:	00003ecd 	.word	0x00003ecd

00009398 <RTC_Scheduler_heartbeat_cb>:
	}

}

static void RTC_Scheduler_heartbeat_cb(const struct timer_task *const timer_task)
{
    9398:	b538      	push	{r3, r4, r5, lr}
	
	struct grid_ui_model* mod = &grid_ui_state;
	uint8_t report_index = 1;
						
	grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_get_hwcfg());
    939a:	4d08      	ldr	r5, [pc, #32]	; (93bc <RTC_Scheduler_heartbeat_cb+0x24>)
    939c:	686b      	ldr	r3, [r5, #4]
    939e:	695c      	ldr	r4, [r3, #20]
    93a0:	3407      	adds	r4, #7
    93a2:	4b07      	ldr	r3, [pc, #28]	; (93c0 <RTC_Scheduler_heartbeat_cb+0x28>)
    93a4:	4798      	blx	r3
    93a6:	4602      	mov	r2, r0
    93a8:	2102      	movs	r1, #2
    93aa:	4620      	mov	r0, r4
    93ac:	4b05      	ldr	r3, [pc, #20]	; (93c4 <RTC_Scheduler_heartbeat_cb+0x2c>)
    93ae:	4798      	blx	r3
	grid_report_sys_set_changed_flag(mod, report_index);
    93b0:	2101      	movs	r1, #1
    93b2:	4628      	mov	r0, r5
    93b4:	4b04      	ldr	r3, [pc, #16]	; (93c8 <RTC_Scheduler_heartbeat_cb+0x30>)
    93b6:	4798      	blx	r3
    93b8:	bd38      	pop	{r3, r4, r5, pc}
    93ba:	bf00      	nop
    93bc:	20001cf8 	.word	0x20001cf8
    93c0:	0000385d 	.word	0x0000385d
    93c4:	00003825 	.word	0x00003825
    93c8:	00003ecd 	.word	0x00003ecd

000093cc <grid_task_timer_tick>:
void grid_task_timer_tick(struct grid_task_model* mod){
    93cc:	7843      	ldrb	r3, [r0, #1]
    93ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	mod->timer[mod->current_task]++;
    93d2:	6843      	ldr	r3, [r0, #4]
    93d4:	3301      	adds	r3, #1
    93d6:	6043      	str	r3, [r0, #4]
    93d8:	4770      	bx	lr
	...

000093dc <RTC_Scheduler_realtime_cb>:
{
    93dc:	b530      	push	{r4, r5, lr}
    93de:	b083      	sub	sp, #12
	grid_sys_rtc_tick_time(&grid_sys_state);	
    93e0:	481f      	ldr	r0, [pc, #124]	; (9460 <RTC_Scheduler_realtime_cb+0x84>)
    93e2:	4b20      	ldr	r3, [pc, #128]	; (9464 <RTC_Scheduler_realtime_cb+0x88>)
    93e4:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    93e6:	4820      	ldr	r0, [pc, #128]	; (9468 <RTC_Scheduler_realtime_cb+0x8c>)
    93e8:	4b20      	ldr	r3, [pc, #128]	; (946c <RTC_Scheduler_realtime_cb+0x90>)
    93ea:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    93ec:	a801      	add	r0, sp, #4
    93ee:	4b20      	ldr	r3, [pc, #128]	; (9470 <RTC_Scheduler_realtime_cb+0x94>)
    93f0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    93f2:	4b20      	ldr	r3, [pc, #128]	; (9474 <RTC_Scheduler_realtime_cb+0x98>)
    93f4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    93f8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    93fc:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9400:	4054      	eors	r4, r2
    9402:	400c      	ands	r4, r1
    9404:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    9406:	a801      	add	r0, sp, #4
    9408:	4b1b      	ldr	r3, [pc, #108]	; (9478 <RTC_Scheduler_realtime_cb+0x9c>)
    940a:	4798      	blx	r3
	if (mapmode_value != mod->report_array[report_index].helper[0]){
    940c:	4b1b      	ldr	r3, [pc, #108]	; (947c <RTC_Scheduler_realtime_cb+0xa0>)
    940e:	685b      	ldr	r3, [r3, #4]
    9410:	68db      	ldr	r3, [r3, #12]
    9412:	781a      	ldrb	r2, [r3, #0]
    9414:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    9418:	4294      	cmp	r4, r2
    941a:	d002      	beq.n	9422 <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[report_index].helper[0] == 0){
    941c:	b91a      	cbnz	r2, 9426 <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[report_index].helper[0] = 1;
    941e:	2201      	movs	r2, #1
    9420:	701a      	strb	r2, [r3, #0]
}
    9422:	b003      	add	sp, #12
    9424:	bd30      	pop	{r4, r5, pc}
			mod->report_array[report_index].helper[0] = 0;
    9426:	2400      	movs	r4, #0
    9428:	701c      	strb	r4, [r3, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    942a:	4a0d      	ldr	r2, [pc, #52]	; (9460 <RTC_Scheduler_realtime_cb+0x84>)
    942c:	7a53      	ldrb	r3, [r2, #9]
    942e:	3301      	adds	r3, #1
    9430:	1ae1      	subs	r1, r4, r3
    9432:	f003 0303 	and.w	r3, r3, #3
    9436:	f001 0103 	and.w	r1, r1, #3
    943a:	bf58      	it	pl
    943c:	424b      	negpl	r3, r1
    943e:	b2db      	uxtb	r3, r3
    9440:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    9442:	7a53      	ldrb	r3, [r2, #9]
 			grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_state.bank_select);
    9444:	7a52      	ldrb	r2, [r2, #9]
    9446:	4d0d      	ldr	r5, [pc, #52]	; (947c <RTC_Scheduler_realtime_cb+0xa0>)
    9448:	686b      	ldr	r3, [r5, #4]
    944a:	6858      	ldr	r0, [r3, #4]
    944c:	2102      	movs	r1, #2
    944e:	3007      	adds	r0, #7
    9450:	4b0b      	ldr	r3, [pc, #44]	; (9480 <RTC_Scheduler_realtime_cb+0xa4>)
    9452:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, report_index);
    9454:	4621      	mov	r1, r4
    9456:	4628      	mov	r0, r5
    9458:	4b0a      	ldr	r3, [pc, #40]	; (9484 <RTC_Scheduler_realtime_cb+0xa8>)
    945a:	4798      	blx	r3
}
    945c:	e7e1      	b.n	9422 <RTC_Scheduler_realtime_cb+0x46>
    945e:	bf00      	nop
    9460:	20001d08 	.word	0x20001d08
    9464:	00003737 	.word	0x00003737
    9468:	20003d68 	.word	0x20003d68
    946c:	000093cd 	.word	0x000093cd
    9470:	00004589 	.word	0x00004589
    9474:	41008000 	.word	0x41008000
    9478:	00004597 	.word	0x00004597
    947c:	20001cf8 	.word	0x20001cf8
    9480:	00003825 	.word	0x00003825
    9484:	00003ecd 	.word	0x00003ecd

00009488 <grid_task_timer_reset>:
void grid_task_timer_reset(struct grid_task_model* mod){
    9488:	1d03      	adds	r3, r0, #4
    948a:	3024      	adds	r0, #36	; 0x24
		mod->timer[i] = 0;
    948c:	2200      	movs	r2, #0
    948e:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    9492:	4283      	cmp	r3, r0
    9494:	d1fb      	bne.n	948e <grid_task_timer_reset+0x6>
}
    9496:	4770      	bx	lr

00009498 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    9498:	69c3      	ldr	r3, [r0, #28]
    949a:	2b00      	cmp	r3, #0
    949c:	d147      	bne.n	952e <grid_port_receive_task+0x96>
void grid_port_receive_task(struct grid_port* por){
    949e:	b530      	push	{r4, r5, lr}
    94a0:	b083      	sub	sp, #12
    94a2:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 2000){
    94a4:	6983      	ldr	r3, [r0, #24]
    94a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    94aa:	d91c      	bls.n	94e6 <grid_port_receive_task+0x4e>
		if (por->partner_status == 1){
    94ac:	f890 350f 	ldrb.w	r3, [r0, #1295]	; 0x50f
    94b0:	2b01      	cmp	r3, #1
    94b2:	d005      	beq.n	94c0 <grid_port_receive_task+0x28>
			por->rx_double_buffer_seek_start_index = 0;
    94b4:	2300      	movs	r3, #0
    94b6:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    94b8:	6243      	str	r3, [r0, #36]	; 0x24
			grid_sys_port_reset_dma(por);
    94ba:	4b1d      	ldr	r3, [pc, #116]	; (9530 <grid_port_receive_task+0x98>)
    94bc:	4798      	blx	r3
    94be:	e014      	b.n	94ea <grid_port_receive_task+0x52>
			por->rx_double_buffer_seek_start_index = 0;
    94c0:	2300      	movs	r3, #0
    94c2:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    94c4:	6243      	str	r3, [r0, #36]	; 0x24
			por->partner_status = 0;
    94c6:	f880 350f 	strb.w	r3, [r0, #1295]	; 0x50f
			por->rx_double_buffer_timeout =0;
    94ca:	6183      	str	r3, [r0, #24]
			grid_sys_port_reset_dma(por);
    94cc:	4b18      	ldr	r3, [pc, #96]	; (9530 <grid_port_receive_task+0x98>)
    94ce:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    94d0:	23c8      	movs	r3, #200	; 0xc8
    94d2:	9301      	str	r3, [sp, #4]
    94d4:	2302      	movs	r3, #2
    94d6:	9300      	str	r3, [sp, #0]
    94d8:	23ff      	movs	r3, #255	; 0xff
    94da:	461a      	mov	r2, r3
    94dc:	4619      	mov	r1, r3
    94de:	4815      	ldr	r0, [pc, #84]	; (9534 <grid_port_receive_task+0x9c>)
    94e0:	4d15      	ldr	r5, [pc, #84]	; (9538 <grid_port_receive_task+0xa0>)
    94e2:	47a8      	blx	r5
    94e4:	e001      	b.n	94ea <grid_port_receive_task+0x52>
		por->rx_double_buffer_timeout++;
    94e6:	3301      	adds	r3, #1
    94e8:	6183      	str	r3, [r0, #24]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    94ea:	6a23      	ldr	r3, [r4, #32]
    94ec:	18e2      	adds	r2, r4, r3
    94ee:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
    94f2:	2a0a      	cmp	r2, #10
    94f4:	d015      	beq.n	9522 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    94f6:	b1c2      	cbz	r2, 952a <grid_port_receive_task+0x92>
    94f8:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    94fc:	f240 2056 	movw	r0, #598	; 0x256
			por->rx_double_buffer_seek_start_index=0;
    9500:	2500      	movs	r5, #0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9502:	4283      	cmp	r3, r0
			por->rx_double_buffer_seek_start_index++;			
    9504:	bf9a      	itte	ls
    9506:	3301      	addls	r3, #1
    9508:	6223      	strls	r3, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    950a:	6225      	strhi	r5, [r4, #32]
	for(uint32_t i = 0; i<490; i++){
    950c:	3a01      	subs	r2, #1
    950e:	d00c      	beq.n	952a <grid_port_receive_task+0x92>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    9510:	6a23      	ldr	r3, [r4, #32]
    9512:	18e1      	adds	r1, r4, r3
    9514:	f891 1280 	ldrb.w	r1, [r1, #640]	; 0x280
    9518:	290a      	cmp	r1, #10
    951a:	d002      	beq.n	9522 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    951c:	2900      	cmp	r1, #0
    951e:	d1f0      	bne.n	9502 <grid_port_receive_task+0x6a>
    9520:	e003      	b.n	952a <grid_port_receive_task+0x92>
			por->rx_double_buffer_status = 1;
    9522:	2301      	movs	r3, #1
    9524:	61e3      	str	r3, [r4, #28]
			por->rx_double_buffer_timeout = 0;
    9526:	2300      	movs	r3, #0
    9528:	61a3      	str	r3, [r4, #24]
}
    952a:	b003      	add	sp, #12
    952c:	bd30      	pop	{r4, r5, pc}
    952e:	4770      	bx	lr
    9530:	0000349d 	.word	0x0000349d
    9534:	20001d08 	.word	0x20001d08
    9538:	00003791 	.word	0x00003791

0000953c <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t length){
    953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9540:	b08b      	sub	sp, #44	; 0x2c
    9542:	af02      	add	r7, sp, #8
    9544:	4604      	mov	r4, r0
    9546:	4615      	mov	r5, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    9548:	2301      	movs	r3, #1
    954a:	753b      	strb	r3, [r7, #20]
	response[1] = GRID_MSG_DIRECT;
    954c:	230e      	movs	r3, #14
    954e:	757b      	strb	r3, [r7, #21]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    9550:	2315      	movs	r3, #21
    9552:	75bb      	strb	r3, [r7, #22]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    9554:	2304      	movs	r3, #4
    9556:	75fb      	strb	r3, [r7, #23]
	response[4] = '0'; //checksum
    9558:	2330      	movs	r3, #48	; 0x30
    955a:	763b      	strb	r3, [r7, #24]
	response[5] = '0'; //checksum
    955c:	767b      	strb	r3, [r7, #25]
	response[6] = '\n';
    955e:	230a      	movs	r3, #10
    9560:	76bb      	strb	r3, [r7, #26]
	response[7] = 0;
    9562:	2300      	movs	r3, #0
    9564:	76fb      	strb	r3, [r7, #27]
	response[8] = 0;
    9566:	773b      	strb	r3, [r7, #28]
	response[9] = 0;
    9568:	777b      	strb	r3, [r7, #29]
	uint8_t error_flag = 0;
    956a:	74fb      	strb	r3, [r7, #19]
	uint8_t message[length];
    956c:	1dd3      	adds	r3, r2, #7
    956e:	f023 0307 	bic.w	r3, r3, #7
    9572:	ebad 0d03 	sub.w	sp, sp, r3
    9576:	ae02      	add	r6, sp, #8
    9578:	46b0      	mov	r8, r6
	for (uint32_t i = 0; i<length; i++){
    957a:	b1b2      	cbz	r2, 95aa <grid_port_receive_decode+0x6e>
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    957c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    957e:	eb06 0c02 	add.w	ip, r6, r2
    9582:	4632      	mov	r2, r6
    9584:	1b89      	subs	r1, r1, r6
    9586:	f8df e308 	ldr.w	lr, [pc, #776]	; 9890 <grid_port_receive_decode+0x354>
    958a:	f44f 7016 	mov.w	r0, #600	; 0x258
    958e:	eb01 0902 	add.w	r9, r1, r2
    9592:	fbae a309 	umull	sl, r3, lr, r9
    9596:	099b      	lsrs	r3, r3, #6
    9598:	fb00 9313 	mls	r3, r0, r3, r9
    959c:	4423      	add	r3, r4
    959e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
    95a2:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i = 0; i<length; i++){
    95a6:	4594      	cmp	ip, r2
    95a8:	d1f1      	bne.n	958e <grid_port_receive_decode+0x52>
	if (message[0] == 1 && message [length-1] == 10){
    95aa:	7833      	ldrb	r3, [r6, #0]
    95ac:	2b01      	cmp	r3, #1
    95ae:	d02e      	beq.n	960e <grid_port_receive_decode+0xd2>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    95b0:	23c8      	movs	r3, #200	; 0xc8
    95b2:	9301      	str	r3, [sp, #4]
    95b4:	2302      	movs	r3, #2
    95b6:	9300      	str	r3, [sp, #0]
    95b8:	2314      	movs	r3, #20
    95ba:	2200      	movs	r2, #0
    95bc:	4611      	mov	r1, r2
    95be:	48b2      	ldr	r0, [pc, #712]	; (9888 <grid_port_receive_decode+0x34c>)
    95c0:	4eb2      	ldr	r6, [pc, #712]	; (988c <grid_port_receive_decode+0x350>)
    95c2:	47b0      	blx	r6
	for (uint32_t i = 0; i<length; i++){
    95c4:	b18d      	cbz	r5, 95ea <grid_port_receive_decode+0xae>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    95c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    95c8:	eb05 0e02 	add.w	lr, r5, r2
    95cc:	4eb0      	ldr	r6, [pc, #704]	; (9890 <grid_port_receive_decode+0x354>)
    95ce:	f44f 7016 	mov.w	r0, #600	; 0x258
    95d2:	2100      	movs	r1, #0
    95d4:	fba6 c302 	umull	ip, r3, r6, r2
    95d8:	099b      	lsrs	r3, r3, #6
    95da:	fb00 2313 	mls	r3, r0, r3, r2
    95de:	4423      	add	r3, r4
    95e0:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
    95e4:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    95e6:	4596      	cmp	lr, r2
    95e8:	d1f4      	bne.n	95d4 <grid_port_receive_decode+0x98>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    95ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    95ec:	441d      	add	r5, r3
    95ee:	4ba8      	ldr	r3, [pc, #672]	; (9890 <grid_port_receive_decode+0x354>)
    95f0:	fba3 2305 	umull	r2, r3, r3, r5
    95f4:	099b      	lsrs	r3, r3, #6
    95f6:	f44f 7216 	mov.w	r2, #600	; 0x258
    95fa:	fb02 5313 	mls	r3, r2, r3, r5
    95fe:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    9600:	6223      	str	r3, [r4, #32]
	por->rx_double_buffer_status = 0;
    9602:	2300      	movs	r3, #0
    9604:	61e3      	str	r3, [r4, #28]
}
    9606:	3724      	adds	r7, #36	; 0x24
    9608:	46bd      	mov	sp, r7
    960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (message[0] == 1 && message [length-1] == 10){
    960e:	1973      	adds	r3, r6, r5
    9610:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9614:	2b0a      	cmp	r3, #10
    9616:	d1cb      	bne.n	95b0 <grid_port_receive_decode+0x74>
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    9618:	1ee8      	subs	r0, r5, #3
    961a:	f107 0213 	add.w	r2, r7, #19
    961e:	2102      	movs	r1, #2
    9620:	4430      	add	r0, r6
    9622:	4b9c      	ldr	r3, [pc, #624]	; (9894 <grid_port_receive_decode+0x358>)
    9624:	4798      	blx	r3
    9626:	4681      	mov	r9, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    9628:	4629      	mov	r1, r5
    962a:	4630      	mov	r0, r6
    962c:	4b9a      	ldr	r3, [pc, #616]	; (9898 <grid_port_receive_decode+0x35c>)
    962e:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    9630:	fa5f f989 	uxtb.w	r9, r9
    9634:	b2c0      	uxtb	r0, r0
    9636:	4581      	cmp	r9, r0
    9638:	d00e      	beq.n	9658 <grid_port_receive_decode+0x11c>
			if (error_flag != 0){		
    963a:	7cfb      	ldrb	r3, [r7, #19]
    963c:	2b00      	cmp	r3, #0
    963e:	f040 8192 	bne.w	9966 <grid_port_receive_decode+0x42a>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // PURPLE BLINKY
    9642:	23c8      	movs	r3, #200	; 0xc8
    9644:	9301      	str	r3, [sp, #4]
    9646:	2301      	movs	r3, #1
    9648:	9300      	str	r3, [sp, #0]
    964a:	23ff      	movs	r3, #255	; 0xff
    964c:	2200      	movs	r2, #0
    964e:	2114      	movs	r1, #20
    9650:	488d      	ldr	r0, [pc, #564]	; (9888 <grid_port_receive_decode+0x34c>)
    9652:	4e8e      	ldr	r6, [pc, #568]	; (988c <grid_port_receive_decode+0x350>)
    9654:	47b0      	blx	r6
    9656:	e7b5      	b.n	95c4 <grid_port_receive_decode+0x88>
		if (checksum_calculated == checksum_received && error_flag == 0){
    9658:	f897 b013 	ldrb.w	fp, [r7, #19]
    965c:	f1bb 0f00 	cmp.w	fp, #0
    9660:	f040 8181 	bne.w	9966 <grid_port_receive_decode+0x42a>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9664:	7873      	ldrb	r3, [r6, #1]
    9666:	2b0f      	cmp	r3, #15
    9668:	d00d      	beq.n	9686 <grid_port_receive_decode+0x14a>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    966a:	2b0e      	cmp	r3, #14
    966c:	f000 80c2 	beq.w	97f4 <grid_port_receive_decode+0x2b8>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    9670:	23c8      	movs	r3, #200	; 0xc8
    9672:	9301      	str	r3, [sp, #4]
    9674:	2302      	movs	r3, #2
    9676:	9300      	str	r3, [sp, #0]
    9678:	2300      	movs	r3, #0
    967a:	461a      	mov	r2, r3
    967c:	21ff      	movs	r1, #255	; 0xff
    967e:	4882      	ldr	r0, [pc, #520]	; (9888 <grid_port_receive_decode+0x34c>)
    9680:	4e82      	ldr	r6, [pc, #520]	; (988c <grid_port_receive_decode+0x350>)
    9682:	47b0      	blx	r6
    9684:	e79e      	b.n	95c4 <grid_port_receive_decode+0x88>
				uint8_t received_id  = grid_msg_get_id(message);;			
    9686:	4630      	mov	r0, r6
    9688:	4b84      	ldr	r3, [pc, #528]	; (989c <grid_port_receive_decode+0x360>)
    968a:	4798      	blx	r3
    968c:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_age(message);
    968e:	4630      	mov	r0, r6
    9690:	4b83      	ldr	r3, [pc, #524]	; (98a0 <grid_port_receive_decode+0x364>)
    9692:	4798      	blx	r3
    9694:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    9696:	4630      	mov	r0, r6
    9698:	4b82      	ldr	r3, [pc, #520]	; (98a4 <grid_port_receive_decode+0x368>)
    969a:	4798      	blx	r3
    969c:	4682      	mov	sl, r0
    969e:	f1a0 097f 	sub.w	r9, r0, #127	; 0x7f
    96a2:	fa4f f989 	sxtb.w	r9, r9
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    96a6:	4630      	mov	r0, r6
    96a8:	4b7f      	ldr	r3, [pc, #508]	; (98a8 <grid_port_receive_decode+0x36c>)
    96aa:	4798      	blx	r3
    96ac:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    96b0:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    96b2:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
    96b6:	b182      	cbz	r2, 96da <grid_port_receive_decode+0x19e>
				else if(por->partner_fi == 1){ // 90 deg
    96b8:	2a01      	cmp	r2, #1
    96ba:	d009      	beq.n	96d0 <grid_port_receive_decode+0x194>
				else if(por->partner_fi == 2){ // 180 deg
    96bc:	2a02      	cmp	r2, #2
    96be:	d163      	bne.n	9788 <grid_port_receive_decode+0x24c>
					rotated_dx  -= received_dx;
    96c0:	f1ca 097f 	rsb	r9, sl, #127	; 0x7f
    96c4:	fa4f f989 	sxtb.w	r9, r9
					rotated_dy  -= received_dy;
    96c8:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    96cc:	b25b      	sxtb	r3, r3
    96ce:	e004      	b.n	96da <grid_port_receive_decode+0x19e>
					rotated_dx  -= received_dy;
    96d0:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    96d4:	464b      	mov	r3, r9
					rotated_dx  -= received_dy;
    96d6:	fa4f f980 	sxtb.w	r9, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    96da:	f894 a50d 	ldrb.w	sl, [r4, #1293]	; 0x50d
    96de:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    96e2:	44d1      	add	r9, sl
    96e4:	fa5f fa89 	uxtb.w	sl, r9
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    96e8:	f894 950e 	ldrb.w	r9, [r4, #1294]	; 0x50e
    96ec:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    96f0:	444b      	add	r3, r9
    96f2:	fa5f f983 	uxtb.w	r9, r3
				grid_msg_set_id(message, updated_id);
    96f6:	6879      	ldr	r1, [r7, #4]
    96f8:	4630      	mov	r0, r6
    96fa:	4b6c      	ldr	r3, [pc, #432]	; (98ac <grid_port_receive_decode+0x370>)
    96fc:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    96fe:	4651      	mov	r1, sl
    9700:	4630      	mov	r0, r6
    9702:	4b6b      	ldr	r3, [pc, #428]	; (98b0 <grid_port_receive_decode+0x374>)
    9704:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    9706:	4649      	mov	r1, r9
    9708:	4630      	mov	r0, r6
    970a:	4b6a      	ldr	r3, [pc, #424]	; (98b4 <grid_port_receive_decode+0x378>)
    970c:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    970e:	6839      	ldr	r1, [r7, #0]
    9710:	4630      	mov	r0, r6
    9712:	4b69      	ldr	r3, [pc, #420]	; (98b8 <grid_port_receive_decode+0x37c>)
    9714:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
    971c:	eb09 290a 	add.w	r9, r9, sl, lsl #8
    9720:	683b      	ldr	r3, [r7, #0]
    9722:	eb03 2909 	add.w	r9, r3, r9, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    9726:	4649      	mov	r1, r9
    9728:	4857      	ldr	r0, [pc, #348]	; (9888 <grid_port_receive_decode+0x34c>)
    972a:	4b64      	ldr	r3, [pc, #400]	; (98bc <grid_port_receive_decode+0x380>)
    972c:	4798      	blx	r3
    972e:	2800      	cmp	r0, #0
    9730:	d035      	beq.n	979e <grid_port_receive_decode+0x262>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    9732:	2306      	movs	r3, #6
    9734:	75bb      	strb	r3, [r7, #22]
				uint32_t response_length = strlen(response);
    9736:	f107 0014 	add.w	r0, r7, #20
    973a:	4b61      	ldr	r3, [pc, #388]	; (98c0 <grid_port_receive_decode+0x384>)
    973c:	4798      	blx	r3
    973e:	4606      	mov	r6, r0
				if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    9740:	f504 699b 	add.w	r9, r4, #1240	; 0x4d8
    9744:	b281      	uxth	r1, r0
    9746:	4648      	mov	r0, r9
    9748:	4b5e      	ldr	r3, [pc, #376]	; (98c4 <grid_port_receive_decode+0x388>)
    974a:	4798      	blx	r3
    974c:	2800      	cmp	r0, #0
    974e:	f43f af39 	beq.w	95c4 <grid_port_receive_decode+0x88>
					uint8_t checksum = grid_msg_get_checksum(response, response_length);
    9752:	4631      	mov	r1, r6
    9754:	f107 0014 	add.w	r0, r7, #20
    9758:	4b4f      	ldr	r3, [pc, #316]	; (9898 <grid_port_receive_decode+0x35c>)
    975a:	4798      	blx	r3
					grid_msg_set_checksum(response, response_length, checksum);
    975c:	b2c2      	uxtb	r2, r0
    975e:	4631      	mov	r1, r6
    9760:	f107 0014 	add.w	r0, r7, #20
    9764:	4b58      	ldr	r3, [pc, #352]	; (98c8 <grid_port_receive_decode+0x38c>)
    9766:	4798      	blx	r3
					for (uint32_t i=0; i<response_length; i++)
    9768:	b156      	cbz	r6, 9780 <grid_port_receive_decode+0x244>
    976a:	f107 0814 	add.w	r8, r7, #20
    976e:	4446      	add	r6, r8
						grid_buffer_write_character(&por->tx_buffer, response[i]);
    9770:	f8df a174 	ldr.w	sl, [pc, #372]	; 98e8 <grid_port_receive_decode+0x3ac>
    9774:	f818 1b01 	ldrb.w	r1, [r8], #1
    9778:	4648      	mov	r0, r9
    977a:	47d0      	blx	sl
					for (uint32_t i=0; i<response_length; i++)
    977c:	4546      	cmp	r6, r8
    977e:	d1f9      	bne.n	9774 <grid_port_receive_decode+0x238>
					grid_buffer_write_acknowledge(&por->tx_buffer);
    9780:	4648      	mov	r0, r9
    9782:	4b52      	ldr	r3, [pc, #328]	; (98cc <grid_port_receive_decode+0x390>)
    9784:	4798      	blx	r3
    9786:	e71d      	b.n	95c4 <grid_port_receive_decode+0x88>
				else if(por->partner_fi == 3){ // 270 deg
    9788:	2a03      	cmp	r2, #3
    978a:	d105      	bne.n	9798 <grid_port_receive_decode+0x25c>
					rotated_dy  -= received_dx;
    978c:	f1ca 0a7f 	rsb	sl, sl, #127	; 0x7f
					rotated_dx  += received_dy;
    9790:	4699      	mov	r9, r3
					rotated_dy  -= received_dx;
    9792:	fa4f f38a 	sxtb.w	r3, sl
    9796:	e7a0      	b.n	96da <grid_port_receive_decode+0x19e>
				int8_t rotated_dy = 0;
    9798:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    979a:	4699      	mov	r9, r3
    979c:	e79d      	b.n	96da <grid_port_receive_decode+0x19e>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    979e:	4629      	mov	r1, r5
    97a0:	4630      	mov	r0, r6
    97a2:	4b3d      	ldr	r3, [pc, #244]	; (9898 <grid_port_receive_decode+0x35c>)
    97a4:	4798      	blx	r3
    97a6:	4602      	mov	r2, r0
    97a8:	4629      	mov	r1, r5
    97aa:	4630      	mov	r0, r6
    97ac:	4b46      	ldr	r3, [pc, #280]	; (98c8 <grid_port_receive_decode+0x38c>)
    97ae:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    97b0:	f504 669e 	add.w	r6, r4, #1264	; 0x4f0
    97b4:	b2a9      	uxth	r1, r5
    97b6:	4630      	mov	r0, r6
    97b8:	4b42      	ldr	r3, [pc, #264]	; (98c4 <grid_port_receive_decode+0x388>)
    97ba:	4798      	blx	r3
    97bc:	2800      	cmp	r0, #0
    97be:	d0ba      	beq.n	9736 <grid_port_receive_decode+0x1fa>
						for (uint8_t i=0; i<length; i++){
    97c0:	b15d      	cbz	r5, 97da <grid_port_receive_decode+0x29e>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    97c2:	f8df a124 	ldr.w	sl, [pc, #292]	; 98e8 <grid_port_receive_decode+0x3ac>
    97c6:	f818 100b 	ldrb.w	r1, [r8, fp]
    97ca:	4630      	mov	r0, r6
    97cc:	47d0      	blx	sl
						for (uint8_t i=0; i<length; i++){
    97ce:	f10b 0b01 	add.w	fp, fp, #1
    97d2:	fa5f fb8b 	uxtb.w	fp, fp
    97d6:	455d      	cmp	r5, fp
    97d8:	d8f5      	bhi.n	97c6 <grid_port_receive_decode+0x28a>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    97da:	4630      	mov	r0, r6
    97dc:	4b3b      	ldr	r3, [pc, #236]	; (98cc <grid_port_receive_decode+0x390>)
    97de:	4798      	blx	r3
						grid_port_process_inbound(por);
    97e0:	4620      	mov	r0, r4
    97e2:	4b3b      	ldr	r3, [pc, #236]	; (98d0 <grid_port_receive_decode+0x394>)
    97e4:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    97e6:	4649      	mov	r1, r9
    97e8:	4827      	ldr	r0, [pc, #156]	; (9888 <grid_port_receive_decode+0x34c>)
    97ea:	4b3a      	ldr	r3, [pc, #232]	; (98d4 <grid_port_receive_decode+0x398>)
    97ec:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    97ee:	2306      	movs	r3, #6
    97f0:	75bb      	strb	r3, [r7, #22]
    97f2:	e7a0      	b.n	9736 <grid_port_receive_decode+0x1fa>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    97f4:	78b3      	ldrb	r3, [r6, #2]
    97f6:	2b06      	cmp	r3, #6
    97f8:	f43f aee4 	beq.w	95c4 <grid_port_receive_decode+0x88>
				else if (message[2] == GRID_MSG_NACKNOWLEDGE){
    97fc:	2b15      	cmp	r3, #21
    97fe:	d075      	beq.n	98ec <grid_port_receive_decode+0x3b0>
				else if (message[2] == GRID_MSG_BELL){
    9800:	2b07      	cmp	r3, #7
    9802:	f47f aedf 	bne.w	95c4 <grid_port_receive_decode+0x88>
					if (por->partner_status == 0){
    9806:	f894 350f 	ldrb.w	r3, [r4, #1295]	; 0x50f
    980a:	2b00      	cmp	r3, #0
    980c:	d178      	bne.n	9900 <grid_port_receive_decode+0x3c4>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    980e:	78f3      	ldrb	r3, [r6, #3]
    9810:	7a62      	ldrb	r2, [r4, #9]
    9812:	1a9b      	subs	r3, r3, r2
    9814:	3306      	adds	r3, #6
    9816:	425a      	negs	r2, r3
    9818:	f003 0303 	and.w	r3, r3, #3
    981c:	f002 0203 	and.w	r2, r2, #3
    9820:	bf58      	it	pl
    9822:	4253      	negpl	r3, r2
    9824:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    9828:	f1a5 000c 	sub.w	r0, r5, #12
    982c:	2200      	movs	r2, #0
    982e:	2108      	movs	r1, #8
    9830:	4430      	add	r0, r6
    9832:	4b18      	ldr	r3, [pc, #96]	; (9894 <grid_port_receive_decode+0x358>)
    9834:	4798      	blx	r3
    9836:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
						por->partner_status = 1;
    983a:	2301      	movs	r3, #1
    983c:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
						grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    9840:	4e11      	ldr	r6, [pc, #68]	; (9888 <grid_port_receive_decode+0x34c>)
    9842:	4630      	mov	r0, r6
    9844:	4b24      	ldr	r3, [pc, #144]	; (98d8 <grid_port_receive_decode+0x39c>)
    9846:	4798      	blx	r3
    9848:	b2c0      	uxtb	r0, r0
    984a:	7030      	strb	r0, [r6, #0]
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    984c:	23c8      	movs	r3, #200	; 0xc8
    984e:	9301      	str	r3, [sp, #4]
    9850:	2302      	movs	r3, #2
    9852:	9300      	str	r3, [sp, #0]
    9854:	2300      	movs	r3, #0
    9856:	22ff      	movs	r2, #255	; 0xff
    9858:	4619      	mov	r1, r3
    985a:	4630      	mov	r0, r6
    985c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 988c <grid_port_receive_decode+0x350>
    9860:	47c0      	blx	r8
						if (grid_sys_state.bank_select!=255){
    9862:	7a73      	ldrb	r3, [r6, #9]
    9864:	b2db      	uxtb	r3, r3
    9866:	2bff      	cmp	r3, #255	; 0xff
    9868:	f43f aeac 	beq.w	95c4 <grid_port_receive_decode+0x88>
							grid_sys_write_hex_string_value(&mod->report_array[0].payload[7], 2, grid_sys_state.bank_select);
    986c:	7a72      	ldrb	r2, [r6, #9]
    986e:	4e1b      	ldr	r6, [pc, #108]	; (98dc <grid_port_receive_decode+0x3a0>)
    9870:	6873      	ldr	r3, [r6, #4]
    9872:	6858      	ldr	r0, [r3, #4]
    9874:	2102      	movs	r1, #2
    9876:	3007      	adds	r0, #7
    9878:	4b19      	ldr	r3, [pc, #100]	; (98e0 <grid_port_receive_decode+0x3a4>)
    987a:	4798      	blx	r3
							grid_report_sys_set_changed_flag(mod, 0);												
    987c:	2100      	movs	r1, #0
    987e:	4630      	mov	r0, r6
    9880:	4b18      	ldr	r3, [pc, #96]	; (98e4 <grid_port_receive_decode+0x3a8>)
    9882:	4798      	blx	r3
    9884:	e69e      	b.n	95c4 <grid_port_receive_decode+0x88>
    9886:	bf00      	nop
    9888:	20001d08 	.word	0x20001d08
    988c:	00003791 	.word	0x00003791
    9890:	1b4e81b5 	.word	0x1b4e81b5
    9894:	000037e5 	.word	0x000037e5
    9898:	00003abd 	.word	0x00003abd
    989c:	00003aed 	.word	0x00003aed
    98a0:	00003b4d 	.word	0x00003b4d
    98a4:	00003b0d 	.word	0x00003b0d
    98a8:	00003b2d 	.word	0x00003b2d
    98ac:	00003b6d 	.word	0x00003b6d
    98b0:	00003b81 	.word	0x00003b81
    98b4:	00003b95 	.word	0x00003b95
    98b8:	00003ba9 	.word	0x00003ba9
    98bc:	00003bbd 	.word	0x00003bbd
    98c0:	0000bf19 	.word	0x0000bf19
    98c4:	00001375 	.word	0x00001375
    98c8:	00003ad9 	.word	0x00003ad9
    98cc:	000013c1 	.word	0x000013c1
    98d0:	000016bd 	.word	0x000016bd
    98d4:	00003be7 	.word	0x00003be7
    98d8:	00003725 	.word	0x00003725
    98dc:	20001cf8 	.word	0x20001cf8
    98e0:	00003825 	.word	0x00003825
    98e4:	00003ecd 	.word	0x00003ecd
    98e8:	000013a5 	.word	0x000013a5
					grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 0, 250); // LIGHT RED PULSE
    98ec:	23fa      	movs	r3, #250	; 0xfa
    98ee:	9301      	str	r3, [sp, #4]
    98f0:	2200      	movs	r2, #0
    98f2:	9200      	str	r2, [sp, #0]
    98f4:	4613      	mov	r3, r2
    98f6:	2132      	movs	r1, #50	; 0x32
    98f8:	4820      	ldr	r0, [pc, #128]	; (997c <grid_port_receive_decode+0x440>)
    98fa:	4e21      	ldr	r6, [pc, #132]	; (9980 <grid_port_receive_decode+0x444>)
    98fc:	47b0      	blx	r6
    98fe:	e661      	b.n	95c4 <grid_port_receive_decode+0x88>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    9900:	78f3      	ldrb	r3, [r6, #3]
    9902:	7a62      	ldrb	r2, [r4, #9]
    9904:	1a9b      	subs	r3, r3, r2
    9906:	3306      	adds	r3, #6
    9908:	425a      	negs	r2, r3
    990a:	f003 0303 	and.w	r3, r3, #3
    990e:	f002 0203 	and.w	r2, r2, #3
    9912:	bf58      	it	pl
    9914:	4253      	negpl	r3, r2
    9916:	f894 850c 	ldrb.w	r8, [r4, #1292]	; 0x50c
    991a:	4543      	cmp	r3, r8
    991c:	bf14      	ite	ne
    991e:	f04f 0800 	movne.w	r8, #0
    9922:	f04f 0801 	moveq.w	r8, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    9926:	f1a5 000c 	sub.w	r0, r5, #12
    992a:	2200      	movs	r2, #0
    992c:	2108      	movs	r1, #8
    992e:	4430      	add	r0, r6
    9930:	4b14      	ldr	r3, [pc, #80]	; (9984 <grid_port_receive_decode+0x448>)
    9932:	4798      	blx	r3
    9934:	60b8      	str	r0, [r7, #8]
						volatile uint32_t debug2 = por->partner_hwcfg;
    9936:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    993a:	60fb      	str	r3, [r7, #12]
						validator &= (por->partner_hwcfg == debug);									
    993c:	68ba      	ldr	r2, [r7, #8]
						if (validator == 0){
    993e:	4293      	cmp	r3, r2
    9940:	d103      	bne.n	994a <grid_port_receive_decode+0x40e>
    9942:	f1b8 0f00 	cmp.w	r8, #0
    9946:	f47f ae3d 	bne.w	95c4 <grid_port_receive_decode+0x88>
							por->partner_status = 0;	
    994a:	2300      	movs	r3, #0
    994c:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    9950:	23c8      	movs	r3, #200	; 0xc8
    9952:	9301      	str	r3, [sp, #4]
    9954:	2302      	movs	r3, #2
    9956:	9300      	str	r3, [sp, #0]
    9958:	23ff      	movs	r3, #255	; 0xff
    995a:	461a      	mov	r2, r3
    995c:	4619      	mov	r1, r3
    995e:	4807      	ldr	r0, [pc, #28]	; (997c <grid_port_receive_decode+0x440>)
    9960:	4e07      	ldr	r6, [pc, #28]	; (9980 <grid_port_receive_decode+0x444>)
    9962:	47b0      	blx	r6
    9964:	e62e      	b.n	95c4 <grid_port_receive_decode+0x88>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 0, 1, 200); // PURPLE BLINKY
    9966:	23c8      	movs	r3, #200	; 0xc8
    9968:	9301      	str	r3, [sp, #4]
    996a:	2301      	movs	r3, #1
    996c:	9300      	str	r3, [sp, #0]
    996e:	2300      	movs	r3, #0
    9970:	461a      	mov	r2, r3
    9972:	2114      	movs	r1, #20
    9974:	4801      	ldr	r0, [pc, #4]	; (997c <grid_port_receive_decode+0x440>)
    9976:	4e02      	ldr	r6, [pc, #8]	; (9980 <grid_port_receive_decode+0x444>)
    9978:	47b0      	blx	r6
    997a:	e623      	b.n	95c4 <grid_port_receive_decode+0x88>
    997c:	20001d08 	.word	0x20001d08
    9980:	00003791 	.word	0x00003791
    9984:	000037e5 	.word	0x000037e5

00009988 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    9988:	b510      	push	{r4, lr}
    998a:	4604      	mov	r4, r0
	grid_port_receive_task(por);	
    998c:	4b08      	ldr	r3, [pc, #32]	; (99b0 <grid_port_receive_complete_task+0x28>)
    998e:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    9990:	69e3      	ldr	r3, [r4, #28]
    9992:	b163      	cbz	r3, 99ae <grid_port_receive_complete_task+0x26>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    9994:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9996:	6a22      	ldr	r2, [r4, #32]
    9998:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    999a:	bf34      	ite	cc
    999c:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    999e:	f202 2259 	addwcs	r2, r2, #601	; 0x259
    99a2:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    99a4:	4620      	mov	r0, r4
    99a6:	4b03      	ldr	r3, [pc, #12]	; (99b4 <grid_port_receive_complete_task+0x2c>)
    99a8:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    99aa:	2300      	movs	r3, #0
    99ac:	61e3      	str	r3, [r4, #28]
    99ae:	bd10      	pop	{r4, pc}
    99b0:	00009499 	.word	0x00009499
    99b4:	0000953d 	.word	0x0000953d

000099b8 <init_timer>:


#define RTC1SEC 16384

void init_timer(void)
{
    99b8:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20; //was /5: 200ms
    99ba:	4c12      	ldr	r4, [pc, #72]	; (9a04 <init_timer+0x4c>)
    99bc:	f240 3333 	movw	r3, #819	; 0x333
    99c0:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    99c2:	4b11      	ldr	r3, [pc, #68]	; (9a08 <init_timer+0x50>)
    99c4:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    99c6:	2301      	movs	r3, #1
    99c8:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1SEC*2;
    99ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    99ce:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    99d0:	4a0e      	ldr	r2, [pc, #56]	; (9a0c <init_timer+0x54>)
    99d2:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    99d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_realtime.interval = 1;
    99d8:	6363      	str	r3, [r4, #52]	; 0x34
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    99da:	4a0d      	ldr	r2, [pc, #52]	; (9a10 <init_timer+0x58>)
    99dc:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    99de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    99e2:	4d0c      	ldr	r5, [pc, #48]	; (9a14 <init_timer+0x5c>)
    99e4:	1d21      	adds	r1, r4, #4
    99e6:	4628      	mov	r0, r5
    99e8:	4e0b      	ldr	r6, [pc, #44]	; (9a18 <init_timer+0x60>)
    99ea:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    99ec:	f104 0118 	add.w	r1, r4, #24
    99f0:	4628      	mov	r0, r5
    99f2:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    99f4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    99f8:	4628      	mov	r0, r5
    99fa:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    99fc:	4628      	mov	r0, r5
    99fe:	4b07      	ldr	r3, [pc, #28]	; (9a1c <init_timer+0x64>)
    9a00:	4798      	blx	r3
    9a02:	bd70      	pop	{r4, r5, r6, pc}
    9a04:	20000d68 	.word	0x20000d68
    9a08:	00009371 	.word	0x00009371
    9a0c:	00009399 	.word	0x00009399
    9a10:	000093dd 	.word	0x000093dd
    9a14:	20000f80 	.word	0x20000f80
    9a18:	00004e75 	.word	0x00004e75
    9a1c:	00004e35 	.word	0x00004e35

00009a20 <main>:




int main(void)
{
    9a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a24:	b08b      	sub	sp, #44	; 0x2c

	atmel_start_init();	
    9a26:	4b73      	ldr	r3, [pc, #460]	; (9bf4 <main+0x1d4>)
    9a28:	4798      	blx	r3

	
	printf("Initialization\r\n");
    9a2a:	4873      	ldr	r0, [pc, #460]	; (9bf8 <main+0x1d8>)
    9a2c:	4b73      	ldr	r3, [pc, #460]	; (9bfc <main+0x1dc>)
    9a2e:	4798      	blx	r3
//	wdt_disable(&WDT_0);
	

	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    9a30:	4b73      	ldr	r3, [pc, #460]	; (9c00 <main+0x1e0>)
    9a32:	4798      	blx	r3


	composite_device_start();
    9a34:	4b73      	ldr	r3, [pc, #460]	; (9c04 <main+0x1e4>)
    9a36:	4798      	blx	r3

	grid_module_common_init();
    9a38:	4b73      	ldr	r3, [pc, #460]	; (9c08 <main+0x1e8>)
    9a3a:	4798      	blx	r3


	uint32_t loopstart = 0;

					
	uint32_t hwtype = grid_sys_get_hwcfg();
    9a3c:	4b73      	ldr	r3, [pc, #460]	; (9c0c <main+0x1ec>)
    9a3e:	4798      	blx	r3
    9a40:	4682      	mov	sl, r0
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9a42:	2600      	movs	r6, #0
    9a44:	f8df 9218 	ldr.w	r9, [pc, #536]	; 9c60 <main+0x240>
	{

		if (hwtype == GRID_MODULE_EN16_RevA){	
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9a48:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 9c48 <main+0x228>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9a4c:	e003      	b.n	9a56 <main+0x36>
		if (hwtype == GRID_MODULE_EN16_RevA){	
    9a4e:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    9a52:	d025      	beq.n	9aa0 <main+0x80>
    9a54:	3601      	adds	r6, #1
    9a56:	b2f5      	uxtb	r5, r6
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9a58:	486d      	ldr	r0, [pc, #436]	; (9c10 <main+0x1f0>)
    9a5a:	47c8      	blx	r9
    9a5c:	42a8      	cmp	r0, r5
    9a5e:	d8f6      	bhi.n	9a4e <main+0x2e>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    9a60:	4b6c      	ldr	r3, [pc, #432]	; (9c14 <main+0x1f4>)
    9a62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9a66:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    9a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9a6e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    9a72:	4969      	ldr	r1, [pc, #420]	; (9c18 <main+0x1f8>)
    9a74:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9a78:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		
		
	gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(PIN_GRID_SYNC_1, false);	

	grid_sys_bank_select(&grid_sys_state, 255);
    9a7c:	21ff      	movs	r1, #255	; 0xff
    9a7e:	4867      	ldr	r0, [pc, #412]	; (9c1c <main+0x1fc>)
    9a80:	4b67      	ldr	r3, [pc, #412]	; (9c20 <main+0x200>)
    9a82:	4798      	blx	r3
	
	init_timer();
    9a84:	4b67      	ldr	r3, [pc, #412]	; (9c24 <main+0x204>)
    9a86:	4798      	blx	r3
	 
	 
 	//spi_nor_flash_test();
	

	printf("Entering Main Loop\r\n");
    9a88:	4867      	ldr	r0, [pc, #412]	; (9c28 <main+0x208>)
    9a8a:	4b5c      	ldr	r3, [pc, #368]	; (9bfc <main+0x1dc>)
    9a8c:	4798      	blx	r3
	
	uint8_t usb_init_variable = 0;
    9a8e:	2300      	movs	r3, #0
    9a90:	9308      	str	r3, [sp, #32]
	uint32_t loopcounter = 0;
    9a92:	9306      	str	r3, [sp, #24]
	mod->current_task = next_task;
    9a94:	4699      	mov	r9, r3
    9a96:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9a9a:	f8df a174 	ldr.w	sl, [pc, #372]	; 9c10 <main+0x1f0>
    9a9e:	e0f6      	b.n	9c8e <main+0x26e>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9aa0:	27ff      	movs	r7, #255	; 0xff
    9aa2:	9701      	str	r7, [sp, #4]
    9aa4:	2400      	movs	r4, #0
    9aa6:	9400      	str	r4, [sp, #0]
    9aa8:	4623      	mov	r3, r4
    9aaa:	4622      	mov	r2, r4
    9aac:	4629      	mov	r1, r5
    9aae:	4858      	ldr	r0, [pc, #352]	; (9c10 <main+0x1f0>)
    9ab0:	47c0      	blx	r8
			grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    9ab2:	9401      	str	r4, [sp, #4]
    9ab4:	2305      	movs	r3, #5
    9ab6:	9300      	str	r3, [sp, #0]
    9ab8:	4623      	mov	r3, r4
    9aba:	4622      	mov	r2, r4
    9abc:	4629      	mov	r1, r5
    9abe:	4854      	ldr	r0, [pc, #336]	; (9c10 <main+0x1f0>)
    9ac0:	f8df b198 	ldr.w	fp, [pc, #408]	; 9c5c <main+0x23c>
    9ac4:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    9ac6:	9401      	str	r4, [sp, #4]
    9ac8:	9400      	str	r4, [sp, #0]
    9aca:	463b      	mov	r3, r7
    9acc:	4622      	mov	r2, r4
    9ace:	4629      	mov	r1, r5
    9ad0:	484f      	ldr	r0, [pc, #316]	; (9c10 <main+0x1f0>)
    9ad2:	4c56      	ldr	r4, [pc, #344]	; (9c2c <main+0x20c>)
    9ad4:	47a0      	blx	r4
    9ad6:	e7bd      	b.n	9a54 <main+0x34>
			if (usb_d_get_frame_num() == 0){
    9ad8:	4b55      	ldr	r3, [pc, #340]	; (9c30 <main+0x210>)
    9ada:	4798      	blx	r3
    9adc:	2800      	cmp	r0, #0
    9ade:	f000 80de 	beq.w	9c9e <main+0x27e>
				printf("USB Connected\r\n");
    9ae2:	4854      	ldr	r0, [pc, #336]	; (9c34 <main+0x214>)
    9ae4:	4b45      	ldr	r3, [pc, #276]	; (9bfc <main+0x1dc>)
    9ae6:	4798      	blx	r3
				grid_sys_bank_select(&grid_sys_state, 0);
    9ae8:	4649      	mov	r1, r9
    9aea:	484c      	ldr	r0, [pc, #304]	; (9c1c <main+0x1fc>)
    9aec:	4b4c      	ldr	r3, [pc, #304]	; (9c20 <main+0x200>)
    9aee:	4798      	blx	r3
				usb_init_variable = 1;
    9af0:	2301      	movs	r3, #1
    9af2:	9308      	str	r3, [sp, #32]
    9af4:	e0d3      	b.n	9c9e <main+0x27e>
	return 	mod->timer[task];
    9af6:	4b50      	ldr	r3, [pc, #320]	; (9c38 <main+0x218>)
    9af8:	685d      	ldr	r5, [r3, #4]
    9afa:	689e      	ldr	r6, [r3, #8]
    9afc:	68df      	ldr	r7, [r3, #12]
    9afe:	695c      	ldr	r4, [r3, #20]
			grid_task_timer_reset(&grid_task_state);
    9b00:	4618      	mov	r0, r3
    9b02:	4b4e      	ldr	r3, [pc, #312]	; (9c3c <main+0x21c>)
    9b04:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", undef*10, idle*10, led*10, move*10);
    9b06:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    9b0a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    9b0e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9b12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9b16:	0064      	lsls	r4, r4, #1
    9b18:	9400      	str	r4, [sp, #0]
    9b1a:	007b      	lsls	r3, r7, #1
    9b1c:	0072      	lsls	r2, r6, #1
    9b1e:	0069      	lsls	r1, r5, #1
    9b20:	4847      	ldr	r0, [pc, #284]	; (9c40 <main+0x220>)
    9b22:	4c48      	ldr	r4, [pc, #288]	; (9c44 <main+0x224>)
    9b24:	47a0      	blx	r4
    9b26:	e0cd      	b.n	9cc4 <main+0x2a4>
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    9b28:	f8cd 9004 	str.w	r9, [sp, #4]
    9b2c:	f8cd 9000 	str.w	r9, [sp]
    9b30:	464b      	mov	r3, r9
    9b32:	2201      	movs	r2, #1
    9b34:	4621      	mov	r1, r4
    9b36:	4650      	mov	r0, sl
    9b38:	4d43      	ldr	r5, [pc, #268]	; (9c48 <main+0x228>)
    9b3a:	47a8      	blx	r5
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    9b3c:	4f43      	ldr	r7, [pc, #268]	; (9c4c <main+0x22c>)
    9b3e:	9803      	ldr	r0, [sp, #12]
    9b40:	47b8      	blx	r7
    9b42:	4e43      	ldr	r6, [pc, #268]	; (9c50 <main+0x230>)
    9b44:	2200      	movs	r2, #0
    9b46:	4b43      	ldr	r3, [pc, #268]	; (9c54 <main+0x234>)
    9b48:	47b0      	blx	r6
    9b4a:	4d43      	ldr	r5, [pc, #268]	; (9c58 <main+0x238>)
    9b4c:	47a8      	blx	r5
    9b4e:	fa5f fb80 	uxtb.w	fp, r0
    9b52:	9805      	ldr	r0, [sp, #20]
    9b54:	47b8      	blx	r7
    9b56:	2200      	movs	r2, #0
    9b58:	4b3e      	ldr	r3, [pc, #248]	; (9c54 <main+0x234>)
    9b5a:	47b0      	blx	r6
    9b5c:	47a8      	blx	r5
    9b5e:	b2c0      	uxtb	r0, r0
    9b60:	9001      	str	r0, [sp, #4]
    9b62:	9804      	ldr	r0, [sp, #16]
    9b64:	47b8      	blx	r7
    9b66:	2200      	movs	r2, #0
    9b68:	4b3a      	ldr	r3, [pc, #232]	; (9c54 <main+0x234>)
    9b6a:	47b0      	blx	r6
    9b6c:	47a8      	blx	r5
    9b6e:	b2c0      	uxtb	r0, r0
    9b70:	9000      	str	r0, [sp, #0]
    9b72:	465b      	mov	r3, fp
    9b74:	2201      	movs	r2, #1
    9b76:	4621      	mov	r1, r4
    9b78:	4650      	mov	r0, sl
    9b7a:	4d38      	ldr	r5, [pc, #224]	; (9c5c <main+0x23c>)
    9b7c:	47a8      	blx	r5
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    9b7e:	9a05      	ldr	r2, [sp, #20]
    9b80:	9201      	str	r2, [sp, #4]
    9b82:	9a04      	ldr	r2, [sp, #16]
    9b84:	9200      	str	r2, [sp, #0]
    9b86:	9b03      	ldr	r3, [sp, #12]
    9b88:	2201      	movs	r2, #1
    9b8a:	4621      	mov	r1, r4
    9b8c:	4650      	mov	r0, sl
    9b8e:	4c27      	ldr	r4, [pc, #156]	; (9c2c <main+0x20c>)
    9b90:	47a0      	blx	r4
    9b92:	fa5f f488 	uxtb.w	r4, r8
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9b96:	4650      	mov	r0, sl
    9b98:	4b31      	ldr	r3, [pc, #196]	; (9c60 <main+0x240>)
    9b9a:	4798      	blx	r3
    9b9c:	f108 0801 	add.w	r8, r8, #1
    9ba0:	4284      	cmp	r4, r0
    9ba2:	d3c1      	bcc.n	9b28 <main+0x108>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    9ba4:	481d      	ldr	r0, [pc, #116]	; (9c1c <main+0x1fc>)
    9ba6:	4b2f      	ldr	r3, [pc, #188]	; (9c64 <main+0x244>)
    9ba8:	4798      	blx	r3
    9baa:	4605      	mov	r5, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9bac:	f89a 3001 	ldrb.w	r3, [sl, #1]
    9bb0:	b16b      	cbz	r3, 9bce <main+0x1ae>
    9bb2:	464c      	mov	r4, r9
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    9bb4:	2701      	movs	r7, #1
    9bb6:	4e2c      	ldr	r6, [pc, #176]	; (9c68 <main+0x248>)
    9bb8:	462b      	mov	r3, r5
    9bba:	463a      	mov	r2, r7
    9bbc:	4621      	mov	r1, r4
    9bbe:	4650      	mov	r0, sl
    9bc0:	47b0      	blx	r6
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9bc2:	3401      	adds	r4, #1
    9bc4:	b2e4      	uxtb	r4, r4
    9bc6:	f89a 3001 	ldrb.w	r3, [sl, #1]
    9bca:	42a3      	cmp	r3, r4
    9bcc:	d8f4      	bhi.n	9bb8 <main+0x198>
	mod->current_task = next_task;
    9bce:	2302      	movs	r3, #2
    9bd0:	4a19      	ldr	r2, [pc, #100]	; (9c38 <main+0x218>)
    9bd2:	7053      	strb	r3, [r2, #1]


		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);

	
		grid_led_tick(&grid_led_state);
    9bd4:	4650      	mov	r0, sl
    9bd6:	4b25      	ldr	r3, [pc, #148]	; (9c6c <main+0x24c>)
    9bd8:	4798      	blx	r3
			
// 		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
// 			
// 		}
		
		grid_led_render_all(&grid_led_state);
    9bda:	4650      	mov	r0, sl
    9bdc:	4b24      	ldr	r3, [pc, #144]	; (9c70 <main+0x250>)
    9bde:	4798      	blx	r3
				

					
		grid_led_hardware_start_transfer(&grid_led_state);
    9be0:	4650      	mov	r0, sl
    9be2:	4b24      	ldr	r3, [pc, #144]	; (9c74 <main+0x254>)
    9be4:	4798      	blx	r3
	mod->current_task = next_task;
    9be6:	2301      	movs	r3, #1
    9be8:	4a13      	ldr	r2, [pc, #76]	; (9c38 <main+0x218>)
    9bea:	7053      	strb	r3, [r2, #1]
	
	
		grid_task_enter_task(&grid_task_state, GRID_TASK_IDLE);

		// IDLETASK
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9bec:	4c22      	ldr	r4, [pc, #136]	; (9c78 <main+0x258>)
			
			delay_us(10);
    9bee:	4d23      	ldr	r5, [pc, #140]	; (9c7c <main+0x25c>)
    9bf0:	9e07      	ldr	r6, [sp, #28]
    9bf2:	e047      	b.n	9c84 <main+0x264>
    9bf4:	000002d1 	.word	0x000002d1
    9bf8:	0000d77c 	.word	0x0000d77c
    9bfc:	0000bd35 	.word	0x0000bd35
    9c00:	0000a8d1 	.word	0x0000a8d1
    9c04:	0000b279 	.word	0x0000b279
    9c08:	00002379 	.word	0x00002379
    9c0c:	0000385d 	.word	0x0000385d
    9c10:	20003614 	.word	0x20003614
    9c14:	41008000 	.word	0x41008000
    9c18:	c0000004 	.word	0xc0000004
    9c1c:	20001d08 	.word	0x20001d08
    9c20:	0000394d 	.word	0x0000394d
    9c24:	000099b9 	.word	0x000099b9
    9c28:	0000d78c 	.word	0x0000d78c
    9c2c:	00001f2f 	.word	0x00001f2f
    9c30:	00005655 	.word	0x00005655
    9c34:	0000d7a0 	.word	0x0000d7a0
    9c38:	20003d68 	.word	0x20003d68
    9c3c:	00009489 	.word	0x00009489
    9c40:	0000d7b0 	.word	0x0000d7b0
    9c44:	0000bc4d 	.word	0x0000bc4d
    9c48:	00001e9d 	.word	0x00001e9d
    9c4c:	0000b545 	.word	0x0000b545
    9c50:	0000b611 	.word	0x0000b611
    9c54:	3fe00000 	.word	0x3fe00000
    9c58:	0000ba35 	.word	0x0000ba35
    9c5c:	00001ee5 	.word	0x00001ee5
    9c60:	00001e55 	.word	0x00001e55
    9c64:	00003749 	.word	0x00003749
    9c68:	00001f79 	.word	0x00001f79
    9c6c:	00001e59 	.word	0x00001e59
    9c70:	00002191 	.word	0x00002191
    9c74:	0000234d 	.word	0x0000234d
    9c78:	00003729 	.word	0x00003729
    9c7c:	000045e9 	.word	0x000045e9
    9c80:	200a      	movs	r0, #10
    9c82:	47a8      	blx	r5
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9c84:	4631      	mov	r1, r6
    9c86:	483e      	ldr	r0, [pc, #248]	; (9d80 <main+0x360>)
    9c88:	47a0      	blx	r4
    9c8a:	280f      	cmp	r0, #15
    9c8c:	d9f8      	bls.n	9c80 <main+0x260>
	mod->current_task = next_task;
    9c8e:	4b3d      	ldr	r3, [pc, #244]	; (9d84 <main+0x364>)
    9c90:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9c94:	705a      	strb	r2, [r3, #1]
		if (usb_init_variable == 0){
    9c96:	9b08      	ldr	r3, [sp, #32]
    9c98:	2b00      	cmp	r3, #0
    9c9a:	f43f af1d 	beq.w	9ad8 <main+0xb8>
		loopcounter++;
    9c9e:	9b06      	ldr	r3, [sp, #24]
    9ca0:	3301      	adds	r3, #1
    9ca2:	461c      	mov	r4, r3
    9ca4:	9306      	str	r3, [sp, #24]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    9ca6:	4836      	ldr	r0, [pc, #216]	; (9d80 <main+0x360>)
    9ca8:	4b37      	ldr	r3, [pc, #220]	; (9d88 <main+0x368>)
    9caa:	4798      	blx	r3
    9cac:	9007      	str	r0, [sp, #28]
		if (loopcounter%100 == 0){
    9cae:	4622      	mov	r2, r4
    9cb0:	4836      	ldr	r0, [pc, #216]	; (9d8c <main+0x36c>)
    9cb2:	fba0 2302 	umull	r2, r3, r0, r2
    9cb6:	095b      	lsrs	r3, r3, #5
    9cb8:	2264      	movs	r2, #100	; 0x64
    9cba:	fb02 4313 	mls	r3, r2, r3, r4
    9cbe:	2b00      	cmp	r3, #0
    9cc0:	f43f af19 	beq.w	9af6 <main+0xd6>
	mod->current_task = next_task;
    9cc4:	2303      	movs	r3, #3
    9cc6:	4a2f      	ldr	r2, [pc, #188]	; (9d84 <main+0x364>)
    9cc8:	7053      	strb	r3, [r2, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    9cca:	f8df b100 	ldr.w	fp, [pc, #256]	; 9dcc <main+0x3ac>
    9cce:	4658      	mov	r0, fp
    9cd0:	4c2f      	ldr	r4, [pc, #188]	; (9d90 <main+0x370>)
    9cd2:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    9cd4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 9dd0 <main+0x3b0>
    9cd8:	4640      	mov	r0, r8
    9cda:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    9cdc:	4f2d      	ldr	r7, [pc, #180]	; (9d94 <main+0x374>)
    9cde:	4638      	mov	r0, r7
    9ce0:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    9ce2:	4e2d      	ldr	r6, [pc, #180]	; (9d98 <main+0x378>)
    9ce4:	4630      	mov	r0, r6
    9ce6:	47a0      	blx	r4
	mod->current_task = next_task;
    9ce8:	4b26      	ldr	r3, [pc, #152]	; (9d84 <main+0x364>)
    9cea:	f883 9001 	strb.w	r9, [r3, #1]
		grid_port_process_ui(&GRID_PORT_U);
    9cee:	4d2b      	ldr	r5, [pc, #172]	; (9d9c <main+0x37c>)
    9cf0:	4628      	mov	r0, r5
    9cf2:	4b2b      	ldr	r3, [pc, #172]	; (9da0 <main+0x380>)
    9cf4:	4798      	blx	r3
	mod->current_task = next_task;
    9cf6:	2304      	movs	r3, #4
    9cf8:	4a22      	ldr	r2, [pc, #136]	; (9d84 <main+0x364>)
    9cfa:	7053      	strb	r3, [r2, #1]
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    9cfc:	4628      	mov	r0, r5
    9cfe:	4c29      	ldr	r4, [pc, #164]	; (9da4 <main+0x384>)
    9d00:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    9d02:	4658      	mov	r0, fp
    9d04:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    9d06:	4640      	mov	r0, r8
    9d08:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    9d0a:	4638      	mov	r0, r7
    9d0c:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);						
    9d0e:	4630      	mov	r0, r6
    9d10:	47a0      	blx	r4
	mod->current_task = next_task;
    9d12:	4b1c      	ldr	r3, [pc, #112]	; (9d84 <main+0x364>)
    9d14:	f883 9001 	strb.w	r9, [r3, #1]
		grid_port_process_outbound_usart(&GRID_PORT_N);
    9d18:	4658      	mov	r0, fp
    9d1a:	4c23      	ldr	r4, [pc, #140]	; (9da8 <main+0x388>)
    9d1c:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    9d1e:	4640      	mov	r0, r8
    9d20:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    9d22:	4638      	mov	r0, r7
    9d24:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    9d26:	4630      	mov	r0, r6
    9d28:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    9d2a:	4820      	ldr	r0, [pc, #128]	; (9dac <main+0x38c>)
    9d2c:	4b20      	ldr	r3, [pc, #128]	; (9db0 <main+0x390>)
    9d2e:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    9d30:	4628      	mov	r0, r5
    9d32:	4b20      	ldr	r3, [pc, #128]	; (9db4 <main+0x394>)
    9d34:	4798      	blx	r3
		if (grid_sys_state.alert_state){
    9d36:	4b12      	ldr	r3, [pc, #72]	; (9d80 <main+0x360>)
    9d38:	889b      	ldrh	r3, [r3, #4]
    9d3a:	b29b      	uxth	r3, r3
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	f43f af46 	beq.w	9bce <main+0x1ae>
			grid_sys_state.alert_state--;
    9d42:	4b0f      	ldr	r3, [pc, #60]	; (9d80 <main+0x360>)
    9d44:	889b      	ldrh	r3, [r3, #4]
    9d46:	3b01      	subs	r3, #1
    9d48:	b29b      	uxth	r3, r3
    9d4a:	4a0d      	ldr	r2, [pc, #52]	; (9d80 <main+0x360>)
    9d4c:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    9d4e:	4610      	mov	r0, r2
    9d50:	4b19      	ldr	r3, [pc, #100]	; (9db8 <main+0x398>)
    9d52:	4798      	blx	r3
    9d54:	2800      	cmp	r0, #0
    9d56:	f43f af25 	beq.w	9ba4 <main+0x184>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    9d5a:	4809      	ldr	r0, [pc, #36]	; (9d80 <main+0x360>)
    9d5c:	4b17      	ldr	r3, [pc, #92]	; (9dbc <main+0x39c>)
    9d5e:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    9d60:	4807      	ldr	r0, [pc, #28]	; (9d80 <main+0x360>)
    9d62:	4b17      	ldr	r3, [pc, #92]	; (9dc0 <main+0x3a0>)
    9d64:	4798      	blx	r3
    9d66:	9003      	str	r0, [sp, #12]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    9d68:	4805      	ldr	r0, [pc, #20]	; (9d80 <main+0x360>)
    9d6a:	4b16      	ldr	r3, [pc, #88]	; (9dc4 <main+0x3a4>)
    9d6c:	4798      	blx	r3
    9d6e:	9004      	str	r0, [sp, #16]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    9d70:	4803      	ldr	r0, [pc, #12]	; (9d80 <main+0x360>)
    9d72:	4b15      	ldr	r3, [pc, #84]	; (9dc8 <main+0x3a8>)
    9d74:	4798      	blx	r3
    9d76:	9005      	str	r0, [sp, #20]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9d78:	f04f 0800 	mov.w	r8, #0
    9d7c:	e709      	b.n	9b92 <main+0x172>
    9d7e:	bf00      	nop
    9d80:	20001d08 	.word	0x20001d08
    9d84:	20003d68 	.word	0x20003d68
    9d88:	00003725 	.word	0x00003725
    9d8c:	51eb851f 	.word	0x51eb851f
    9d90:	00009989 	.word	0x00009989
    9d94:	200026dc 	.word	0x200026dc
    9d98:	200021b8 	.word	0x200021b8
    9d9c:	200017e8 	.word	0x200017e8
    9da0:	00003ee1 	.word	0x00003ee1
    9da4:	000016bd 	.word	0x000016bd
    9da8:	00001d71 	.word	0x00001d71
    9dac:	20002bf0 	.word	0x20002bf0
    9db0:	00001861 	.word	0x00001861
    9db4:	00001d2d 	.word	0x00001d2d
    9db8:	0000373f 	.word	0x0000373f
    9dbc:	00003743 	.word	0x00003743
    9dc0:	000037af 	.word	0x000037af
    9dc4:	000037b3 	.word	0x000037b3
    9dc8:	000037b7 	.word	0x000037b7
    9dcc:	20001298 	.word	0x20001298
    9dd0:	20003100 	.word	0x20003100

00009dd4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    9dd4:	b940      	cbnz	r0, 9de8 <_read+0x14>
{
    9dd6:	b508      	push	{r3, lr}
    9dd8:	460b      	mov	r3, r1
    9dda:	4611      	mov	r1, r2
    9ddc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    9dde:	4b04      	ldr	r3, [pc, #16]	; (9df0 <_read+0x1c>)
    9de0:	4798      	blx	r3
    9de2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9de6:	bd08      	pop	{r3, pc}
		return -1;
    9de8:	f04f 30ff 	mov.w	r0, #4294967295
    9dec:	4770      	bx	lr
    9dee:	bf00      	nop
    9df0:	00009e45 	.word	0x00009e45

00009df4 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    9df4:	3801      	subs	r0, #1
    9df6:	2802      	cmp	r0, #2
    9df8:	d808      	bhi.n	9e0c <_write+0x18>
{
    9dfa:	b508      	push	{r3, lr}
    9dfc:	460b      	mov	r3, r1
    9dfe:	4611      	mov	r1, r2
    9e00:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    9e02:	4b04      	ldr	r3, [pc, #16]	; (9e14 <_write+0x20>)
    9e04:	4798      	blx	r3
    9e06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9e0a:	bd08      	pop	{r3, pc}
		return -1;
    9e0c:	f04f 30ff 	mov.w	r0, #4294967295
    9e10:	4770      	bx	lr
    9e12:	bf00      	nop
    9e14:	00009e69 	.word	0x00009e69

00009e18 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    9e18:	b570      	push	{r4, r5, r6, lr}
    9e1a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    9e1c:	4d06      	ldr	r5, [pc, #24]	; (9e38 <stdio_io_init+0x20>)
    9e1e:	682b      	ldr	r3, [r5, #0]
    9e20:	2100      	movs	r1, #0
    9e22:	6898      	ldr	r0, [r3, #8]
    9e24:	4c05      	ldr	r4, [pc, #20]	; (9e3c <stdio_io_init+0x24>)
    9e26:	47a0      	blx	r4
	setbuf(stdin, NULL);
    9e28:	682b      	ldr	r3, [r5, #0]
    9e2a:	2100      	movs	r1, #0
    9e2c:	6858      	ldr	r0, [r3, #4]
    9e2e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    9e30:	4b03      	ldr	r3, [pc, #12]	; (9e40 <stdio_io_init+0x28>)
    9e32:	601e      	str	r6, [r3, #0]
    9e34:	bd70      	pop	{r4, r5, r6, pc}
    9e36:	bf00      	nop
    9e38:	20000558 	.word	0x20000558
    9e3c:	0000bd65 	.word	0x0000bd65
    9e40:	20000e3c 	.word	0x20000e3c

00009e44 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    9e44:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9e46:	4b06      	ldr	r3, [pc, #24]	; (9e60 <stdio_io_read+0x1c>)
    9e48:	681b      	ldr	r3, [r3, #0]
    9e4a:	b133      	cbz	r3, 9e5a <stdio_io_read+0x16>
    9e4c:	460a      	mov	r2, r1
    9e4e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    9e50:	b292      	uxth	r2, r2
    9e52:	4618      	mov	r0, r3
    9e54:	4b03      	ldr	r3, [pc, #12]	; (9e64 <stdio_io_read+0x20>)
    9e56:	4798      	blx	r3
    9e58:	bd08      	pop	{r3, pc}
		return 0;
    9e5a:	2000      	movs	r0, #0
}
    9e5c:	bd08      	pop	{r3, pc}
    9e5e:	bf00      	nop
    9e60:	20000e3c 	.word	0x20000e3c
    9e64:	000047c5 	.word	0x000047c5

00009e68 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    9e68:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9e6a:	4b06      	ldr	r3, [pc, #24]	; (9e84 <stdio_io_write+0x1c>)
    9e6c:	681b      	ldr	r3, [r3, #0]
    9e6e:	b133      	cbz	r3, 9e7e <stdio_io_write+0x16>
    9e70:	460a      	mov	r2, r1
    9e72:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    9e74:	b292      	uxth	r2, r2
    9e76:	4618      	mov	r0, r3
    9e78:	4b03      	ldr	r3, [pc, #12]	; (9e88 <stdio_io_write+0x20>)
    9e7a:	4798      	blx	r3
    9e7c:	bd08      	pop	{r3, pc}
		return 0;
    9e7e:	2000      	movs	r0, #0
}
    9e80:	bd08      	pop	{r3, pc}
    9e82:	bf00      	nop
    9e84:	20000e3c 	.word	0x20000e3c
    9e88:	00004795 	.word	0x00004795

00009e8c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    9e8c:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    9e8e:	4c04      	ldr	r4, [pc, #16]	; (9ea0 <stdio_redirect_init+0x14>)
    9e90:	4620      	mov	r0, r4
    9e92:	4b04      	ldr	r3, [pc, #16]	; (9ea4 <stdio_redirect_init+0x18>)
    9e94:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    9e96:	4620      	mov	r0, r4
    9e98:	4b03      	ldr	r3, [pc, #12]	; (9ea8 <stdio_redirect_init+0x1c>)
    9e9a:	4798      	blx	r3
    9e9c:	bd10      	pop	{r4, pc}
    9e9e:	bf00      	nop
    9ea0:	20001038 	.word	0x20001038
    9ea4:	00005349 	.word	0x00005349
    9ea8:	00009e19 	.word	0x00009e19

00009eac <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9eae:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9eb0:	780b      	ldrb	r3, [r1, #0]
    9eb2:	f3c3 1441 	ubfx	r4, r3, #5, #2
    9eb6:	2c01      	cmp	r4, #1
    9eb8:	d15e      	bne.n	9f78 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    9eba:	888c      	ldrh	r4, [r1, #4]
    9ebc:	4d35      	ldr	r5, [pc, #212]	; (9f94 <cdcdf_acm_req+0xe8>)
    9ebe:	782d      	ldrb	r5, [r5, #0]
    9ec0:	42a5      	cmp	r5, r4
    9ec2:	d003      	beq.n	9ecc <cdcdf_acm_req+0x20>
    9ec4:	4d33      	ldr	r5, [pc, #204]	; (9f94 <cdcdf_acm_req+0xe8>)
    9ec6:	786d      	ldrb	r5, [r5, #1]
    9ec8:	42a5      	cmp	r5, r4
    9eca:	d158      	bne.n	9f7e <cdcdf_acm_req+0xd2>
    9ecc:	4616      	mov	r6, r2
    9ece:	460c      	mov	r4, r1
    9ed0:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    9ed2:	f013 0f80 	tst.w	r3, #128	; 0x80
    9ed6:	d10c      	bne.n	9ef2 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    9ed8:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    9eda:	4b2f      	ldr	r3, [pc, #188]	; (9f98 <cdcdf_acm_req+0xec>)
    9edc:	4798      	blx	r3
    9ede:	4601      	mov	r1, r0
	switch (req->bRequest) {
    9ee0:	7863      	ldrb	r3, [r4, #1]
    9ee2:	2b20      	cmp	r3, #32
    9ee4:	d013      	beq.n	9f0e <cdcdf_acm_req+0x62>
    9ee6:	2b22      	cmp	r3, #34	; 0x22
    9ee8:	d032      	beq.n	9f50 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    9eea:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    9eee:	b003      	add	sp, #12
    9ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    9ef2:	2a01      	cmp	r2, #1
    9ef4:	d046      	beq.n	9f84 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    9ef6:	784b      	ldrb	r3, [r1, #1]
    9ef8:	2b21      	cmp	r3, #33	; 0x21
    9efa:	d145      	bne.n	9f88 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9efc:	88cb      	ldrh	r3, [r1, #6]
    9efe:	2b07      	cmp	r3, #7
    9f00:	d145      	bne.n	9f8e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    9f02:	2300      	movs	r3, #0
    9f04:	2207      	movs	r2, #7
    9f06:	4925      	ldr	r1, [pc, #148]	; (9f9c <cdcdf_acm_req+0xf0>)
    9f08:	4c25      	ldr	r4, [pc, #148]	; (9fa0 <cdcdf_acm_req+0xf4>)
    9f0a:	47a0      	blx	r4
    9f0c:	e7ef      	b.n	9eee <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9f0e:	2f07      	cmp	r7, #7
    9f10:	d12b      	bne.n	9f6a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    9f12:	b1be      	cbz	r6, 9f44 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    9f14:	6800      	ldr	r0, [r0, #0]
    9f16:	9000      	str	r0, [sp, #0]
    9f18:	888a      	ldrh	r2, [r1, #4]
    9f1a:	798b      	ldrb	r3, [r1, #6]
    9f1c:	f8ad 2004 	strh.w	r2, [sp, #4]
    9f20:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    9f24:	4b1b      	ldr	r3, [pc, #108]	; (9f94 <cdcdf_acm_req+0xe8>)
    9f26:	691b      	ldr	r3, [r3, #16]
    9f28:	b113      	cbz	r3, 9f30 <cdcdf_acm_req+0x84>
    9f2a:	4668      	mov	r0, sp
    9f2c:	4798      	blx	r3
    9f2e:	b1f8      	cbz	r0, 9f70 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    9f30:	4b18      	ldr	r3, [pc, #96]	; (9f94 <cdcdf_acm_req+0xe8>)
    9f32:	aa02      	add	r2, sp, #8
    9f34:	e912 0003 	ldmdb	r2, {r0, r1}
    9f38:	6098      	str	r0, [r3, #8]
    9f3a:	8199      	strh	r1, [r3, #12]
    9f3c:	0c09      	lsrs	r1, r1, #16
    9f3e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    9f40:	2000      	movs	r0, #0
    9f42:	e7d4      	b.n	9eee <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9f44:	2300      	movs	r3, #0
    9f46:	2207      	movs	r2, #7
    9f48:	4628      	mov	r0, r5
    9f4a:	4c15      	ldr	r4, [pc, #84]	; (9fa0 <cdcdf_acm_req+0xf4>)
    9f4c:	47a0      	blx	r4
    9f4e:	e7ce      	b.n	9eee <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9f50:	2300      	movs	r3, #0
    9f52:	461a      	mov	r2, r3
    9f54:	4619      	mov	r1, r3
    9f56:	4618      	mov	r0, r3
    9f58:	4d11      	ldr	r5, [pc, #68]	; (9fa0 <cdcdf_acm_req+0xf4>)
    9f5a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9f5c:	4b0d      	ldr	r3, [pc, #52]	; (9f94 <cdcdf_acm_req+0xe8>)
    9f5e:	695b      	ldr	r3, [r3, #20]
    9f60:	b143      	cbz	r3, 9f74 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    9f62:	8860      	ldrh	r0, [r4, #2]
    9f64:	4798      	blx	r3
		return ERR_NONE;
    9f66:	2000      	movs	r0, #0
    9f68:	e7c1      	b.n	9eee <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9f6a:	f04f 30ff 	mov.w	r0, #4294967295
    9f6e:	e7be      	b.n	9eee <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9f70:	2000      	movs	r0, #0
    9f72:	e7bc      	b.n	9eee <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9f74:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    9f76:	e7ba      	b.n	9eee <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9f78:	f06f 0009 	mvn.w	r0, #9
    9f7c:	e7b7      	b.n	9eee <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9f7e:	f06f 0009 	mvn.w	r0, #9
    9f82:	e7b4      	b.n	9eee <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9f84:	2000      	movs	r0, #0
    9f86:	e7b2      	b.n	9eee <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    9f88:	f06f 000c 	mvn.w	r0, #12
    9f8c:	e7af      	b.n	9eee <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9f8e:	f04f 30ff 	mov.w	r0, #4294967295
    9f92:	e7ac      	b.n	9eee <cdcdf_acm_req+0x42>
    9f94:	20000e40 	.word	0x20000e40
    9f98:	0000aff5 	.word	0x0000aff5
    9f9c:	20000e48 	.word	0x20000e48
    9fa0:	0000aad1 	.word	0x0000aad1

00009fa4 <cdcdf_acm_ctrl>:
{
    9fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fa8:	b083      	sub	sp, #12
    9faa:	4616      	mov	r6, r2
	switch (ctrl) {
    9fac:	2901      	cmp	r1, #1
    9fae:	d066      	beq.n	a07e <cdcdf_acm_ctrl+0xda>
    9fb0:	b141      	cbz	r1, 9fc4 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    9fb2:	2902      	cmp	r1, #2
    9fb4:	bf0c      	ite	eq
    9fb6:	f06f 001a 	mvneq.w	r0, #26
    9fba:	f06f 000c 	mvnne.w	r0, #12
}
    9fbe:	b003      	add	sp, #12
    9fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9fc4:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    9fc8:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9fca:	2800      	cmp	r0, #0
    9fcc:	f000 8085 	beq.w	a0da <cdcdf_acm_ctrl+0x136>
    9fd0:	f10a 3bff 	add.w	fp, sl, #4294967295
    9fd4:	f10a 0301 	add.w	r3, sl, #1
    9fd8:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9fda:	4f46      	ldr	r7, [pc, #280]	; (a0f4 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    9fdc:	f8df 9124 	ldr.w	r9, [pc, #292]	; a104 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9fe0:	f8df 8124 	ldr.w	r8, [pc, #292]	; a108 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    9fe4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    9fe6:	7943      	ldrb	r3, [r0, #5]
    9fe8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9fec:	2b02      	cmp	r3, #2
    9fee:	d002      	beq.n	9ff6 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    9ff0:	f06f 0009 	mvn.w	r0, #9
    9ff4:	e7e3      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
    9ff6:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9ffa:	f89b 3000 	ldrb.w	r3, [fp]
    9ffe:	429a      	cmp	r2, r3
    a000:	d06e      	beq.n	a0e0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a002:	2bff      	cmp	r3, #255	; 0xff
    a004:	d16f      	bne.n	a0e6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a006:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a00a:	2205      	movs	r2, #5
    a00c:	6871      	ldr	r1, [r6, #4]
    a00e:	4b3a      	ldr	r3, [pc, #232]	; (a0f8 <cdcdf_acm_ctrl+0x154>)
    a010:	4798      	blx	r3
		while (NULL != ep) {
    a012:	4604      	mov	r4, r0
    a014:	b1f8      	cbz	r0, a056 <cdcdf_acm_ctrl+0xb2>
    a016:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    a01a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    a01c:	7963      	ldrb	r3, [r4, #5]
    a01e:	7922      	ldrb	r2, [r4, #4]
    a020:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a024:	b292      	uxth	r2, r2
    a026:	78e1      	ldrb	r1, [r4, #3]
    a028:	4628      	mov	r0, r5
    a02a:	47b8      	blx	r7
    a02c:	2800      	cmp	r0, #0
    a02e:	d15d      	bne.n	a0ec <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a030:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a034:	bf14      	ite	ne
    a036:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a03a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a03e:	4628      	mov	r0, r5
    a040:	47c8      	blx	r9
			desc->sod = ep;
    a042:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a044:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a046:	6871      	ldr	r1, [r6, #4]
    a048:	4420      	add	r0, r4
    a04a:	47c0      	blx	r8
		while (NULL != ep) {
    a04c:	4604      	mov	r4, r0
    a04e:	2800      	cmp	r0, #0
    a050:	d1e3      	bne.n	a01a <cdcdf_acm_ctrl+0x76>
    a052:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a056:	6833      	ldr	r3, [r6, #0]
    a058:	7818      	ldrb	r0, [r3, #0]
    a05a:	2204      	movs	r2, #4
    a05c:	6871      	ldr	r1, [r6, #4]
    a05e:	4418      	add	r0, r3
    a060:	4b25      	ldr	r3, [pc, #148]	; (a0f8 <cdcdf_acm_ctrl+0x154>)
    a062:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    a064:	9b00      	ldr	r3, [sp, #0]
    a066:	459b      	cmp	fp, r3
    a068:	d004      	beq.n	a074 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    a06a:	2800      	cmp	r0, #0
    a06c:	d1ba      	bne.n	9fe4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    a06e:	f06f 0009 	mvn.w	r0, #9
    a072:	e7a4      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    a074:	2201      	movs	r2, #1
    a076:	4b21      	ldr	r3, [pc, #132]	; (a0fc <cdcdf_acm_ctrl+0x158>)
    a078:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a07a:	2000      	movs	r0, #0
    a07c:	e79f      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a07e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a080:	b142      	cbz	r2, a094 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a082:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a084:	795b      	ldrb	r3, [r3, #5]
    a086:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a08a:	2b02      	cmp	r3, #2
    a08c:	d002      	beq.n	a094 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    a08e:	f06f 0009 	mvn.w	r0, #9
    a092:	e794      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    a094:	7823      	ldrb	r3, [r4, #0]
    a096:	2bff      	cmp	r3, #255	; 0xff
    a098:	d008      	beq.n	a0ac <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    a09a:	23ff      	movs	r3, #255	; 0xff
    a09c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    a09e:	78a0      	ldrb	r0, [r4, #2]
    a0a0:	4298      	cmp	r0, r3
    a0a2:	d003      	beq.n	a0ac <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a0a4:	4b16      	ldr	r3, [pc, #88]	; (a100 <cdcdf_acm_ctrl+0x15c>)
    a0a6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a0a8:	23ff      	movs	r3, #255	; 0xff
    a0aa:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    a0ac:	7863      	ldrb	r3, [r4, #1]
    a0ae:	2bff      	cmp	r3, #255	; 0xff
    a0b0:	d008      	beq.n	a0c4 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    a0b2:	23ff      	movs	r3, #255	; 0xff
    a0b4:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    a0b6:	78e0      	ldrb	r0, [r4, #3]
    a0b8:	4298      	cmp	r0, r3
    a0ba:	d003      	beq.n	a0c4 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a0bc:	4b10      	ldr	r3, [pc, #64]	; (a100 <cdcdf_acm_ctrl+0x15c>)
    a0be:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a0c0:	23ff      	movs	r3, #255	; 0xff
    a0c2:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    a0c4:	7920      	ldrb	r0, [r4, #4]
    a0c6:	28ff      	cmp	r0, #255	; 0xff
    a0c8:	d003      	beq.n	a0d2 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    a0ca:	4b0d      	ldr	r3, [pc, #52]	; (a100 <cdcdf_acm_ctrl+0x15c>)
    a0cc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a0ce:	23ff      	movs	r3, #255	; 0xff
    a0d0:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    a0d2:	2000      	movs	r0, #0
    a0d4:	4b09      	ldr	r3, [pc, #36]	; (a0fc <cdcdf_acm_ctrl+0x158>)
    a0d6:	7158      	strb	r0, [r3, #5]
    a0d8:	e771      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    a0da:	f06f 0009 	mvn.w	r0, #9
    a0de:	e76e      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    a0e0:	f06f 0011 	mvn.w	r0, #17
    a0e4:	e76b      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    a0e6:	f06f 001b 	mvn.w	r0, #27
    a0ea:	e768      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    a0ec:	f06f 0013 	mvn.w	r0, #19
    a0f0:	e765      	b.n	9fbe <cdcdf_acm_ctrl+0x1a>
    a0f2:	bf00      	nop
    a0f4:	0000566d 	.word	0x0000566d
    a0f8:	0000b015 	.word	0x0000b015
    a0fc:	20000e40 	.word	0x20000e40
    a100:	000056d5 	.word	0x000056d5
    a104:	00005701 	.word	0x00005701
    a108:	0000b04f 	.word	0x0000b04f

0000a10c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a10c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a10e:	4b0a      	ldr	r3, [pc, #40]	; (a138 <cdcdf_acm_init+0x2c>)
    a110:	4798      	blx	r3
    a112:	2801      	cmp	r0, #1
    a114:	d80c      	bhi.n	a130 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a116:	4809      	ldr	r0, [pc, #36]	; (a13c <cdcdf_acm_init+0x30>)
    a118:	4b09      	ldr	r3, [pc, #36]	; (a140 <cdcdf_acm_init+0x34>)
    a11a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a11c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    a11e:	3018      	adds	r0, #24
    a120:	4b08      	ldr	r3, [pc, #32]	; (a144 <cdcdf_acm_init+0x38>)
    a122:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a124:	4908      	ldr	r1, [pc, #32]	; (a148 <cdcdf_acm_init+0x3c>)
    a126:	2001      	movs	r0, #1
    a128:	4b08      	ldr	r3, [pc, #32]	; (a14c <cdcdf_acm_init+0x40>)
    a12a:	4798      	blx	r3
	return ERR_NONE;
    a12c:	2000      	movs	r0, #0
    a12e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a130:	f06f 0010 	mvn.w	r0, #16
}
    a134:	bd08      	pop	{r3, pc}
    a136:	bf00      	nop
    a138:	0000b001 	.word	0x0000b001
    a13c:	20000e40 	.word	0x20000e40
    a140:	00009fa5 	.word	0x00009fa5
    a144:	0000afa1 	.word	0x0000afa1
    a148:	20000398 	.word	0x20000398
    a14c:	0000af0d 	.word	0x0000af0d

0000a150 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    a150:	4b07      	ldr	r3, [pc, #28]	; (a170 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a152:	795b      	ldrb	r3, [r3, #5]
    a154:	b143      	cbz	r3, a168 <cdcdf_acm_write+0x18>
{
    a156:	b510      	push	{r4, lr}
    a158:	460a      	mov	r2, r1
    a15a:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a15c:	2301      	movs	r3, #1
    a15e:	4804      	ldr	r0, [pc, #16]	; (a170 <cdcdf_acm_write+0x20>)
    a160:	78c0      	ldrb	r0, [r0, #3]
    a162:	4c04      	ldr	r4, [pc, #16]	; (a174 <cdcdf_acm_write+0x24>)
    a164:	47a0      	blx	r4
    a166:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    a168:	f06f 0010 	mvn.w	r0, #16
    a16c:	4770      	bx	lr
    a16e:	bf00      	nop
    a170:	20000e40 	.word	0x20000e40
    a174:	0000aad1 	.word	0x0000aad1

0000a178 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a178:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a17a:	780b      	ldrb	r3, [r1, #0]
    a17c:	2b81      	cmp	r3, #129	; 0x81
    a17e:	d010      	beq.n	a1a2 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a180:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a184:	2b01      	cmp	r3, #1
    a186:	d13f      	bne.n	a208 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    a188:	888a      	ldrh	r2, [r1, #4]
    a18a:	4b22      	ldr	r3, [pc, #136]	; (a214 <hid_keyboard_req+0x9c>)
    a18c:	7b1b      	ldrb	r3, [r3, #12]
    a18e:	429a      	cmp	r2, r3
    a190:	d13d      	bne.n	a20e <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    a192:	784b      	ldrb	r3, [r1, #1]
    a194:	2b03      	cmp	r3, #3
    a196:	d028      	beq.n	a1ea <hid_keyboard_req+0x72>
    a198:	2b0b      	cmp	r3, #11
    a19a:	d02c      	beq.n	a1f6 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a19c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a1a0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a1a2:	784b      	ldrb	r3, [r1, #1]
    a1a4:	2b06      	cmp	r3, #6
    a1a6:	d002      	beq.n	a1ae <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    a1a8:	f06f 0009 	mvn.w	r0, #9
    a1ac:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a1ae:	888a      	ldrh	r2, [r1, #4]
    a1b0:	4b18      	ldr	r3, [pc, #96]	; (a214 <hid_keyboard_req+0x9c>)
    a1b2:	7b1b      	ldrb	r3, [r3, #12]
    a1b4:	429a      	cmp	r2, r3
    a1b6:	d002      	beq.n	a1be <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    a1b8:	f06f 0009 	mvn.w	r0, #9
    a1bc:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a1be:	884b      	ldrh	r3, [r1, #2]
    a1c0:	0a1b      	lsrs	r3, r3, #8
    a1c2:	2b21      	cmp	r3, #33	; 0x21
    a1c4:	d004      	beq.n	a1d0 <hid_keyboard_req+0x58>
    a1c6:	2b22      	cmp	r3, #34	; 0x22
    a1c8:	d009      	beq.n	a1de <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    a1ca:	f06f 000c 	mvn.w	r0, #12
    a1ce:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    a1d0:	4b10      	ldr	r3, [pc, #64]	; (a214 <hid_keyboard_req+0x9c>)
    a1d2:	6819      	ldr	r1, [r3, #0]
    a1d4:	2300      	movs	r3, #0
    a1d6:	780a      	ldrb	r2, [r1, #0]
    a1d8:	4c0f      	ldr	r4, [pc, #60]	; (a218 <hid_keyboard_req+0xa0>)
    a1da:	47a0      	blx	r4
    a1dc:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    a1de:	2300      	movs	r3, #0
    a1e0:	223b      	movs	r2, #59	; 0x3b
    a1e2:	490e      	ldr	r1, [pc, #56]	; (a21c <hid_keyboard_req+0xa4>)
    a1e4:	4c0c      	ldr	r4, [pc, #48]	; (a218 <hid_keyboard_req+0xa0>)
    a1e6:	47a0      	blx	r4
    a1e8:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    a1ea:	2300      	movs	r3, #0
    a1ec:	2201      	movs	r2, #1
    a1ee:	490c      	ldr	r1, [pc, #48]	; (a220 <hid_keyboard_req+0xa8>)
    a1f0:	4c09      	ldr	r4, [pc, #36]	; (a218 <hid_keyboard_req+0xa0>)
    a1f2:	47a0      	blx	r4
    a1f4:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    a1f6:	884a      	ldrh	r2, [r1, #2]
    a1f8:	4b06      	ldr	r3, [pc, #24]	; (a214 <hid_keyboard_req+0x9c>)
    a1fa:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    a1fc:	2300      	movs	r3, #0
    a1fe:	461a      	mov	r2, r3
    a200:	4619      	mov	r1, r3
    a202:	4c05      	ldr	r4, [pc, #20]	; (a218 <hid_keyboard_req+0xa0>)
    a204:	47a0      	blx	r4
    a206:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a208:	f06f 0009 	mvn.w	r0, #9
    a20c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a20e:	f06f 0009 	mvn.w	r0, #9
    a212:	bd10      	pop	{r4, pc}
    a214:	20000e64 	.word	0x20000e64
    a218:	0000aad1 	.word	0x0000aad1
    a21c:	0000d7e4 	.word	0x0000d7e4
    a220:	20000e73 	.word	0x20000e73

0000a224 <hid_keyboard_ctrl>:
{
    a224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a228:	4614      	mov	r4, r2
	switch (ctrl) {
    a22a:	2901      	cmp	r1, #1
    a22c:	d050      	beq.n	a2d0 <hid_keyboard_ctrl+0xac>
    a22e:	b141      	cbz	r1, a242 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    a230:	2902      	cmp	r1, #2
    a232:	bf0c      	ite	eq
    a234:	f06f 051a 	mvneq.w	r5, #26
    a238:	f06f 050c 	mvnne.w	r5, #12
}
    a23c:	4628      	mov	r0, r5
    a23e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a242:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    a246:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a248:	2b00      	cmp	r3, #0
    a24a:	d05e      	beq.n	a30a <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a24c:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a24e:	795b      	ldrb	r3, [r3, #5]
    a250:	2b03      	cmp	r3, #3
    a252:	d15d      	bne.n	a310 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a254:	f898 300c 	ldrb.w	r3, [r8, #12]
    a258:	429a      	cmp	r2, r3
    a25a:	d05c      	beq.n	a316 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a25c:	2bff      	cmp	r3, #255	; 0xff
    a25e:	d15d      	bne.n	a31c <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a260:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a264:	6823      	ldr	r3, [r4, #0]
    a266:	7818      	ldrb	r0, [r3, #0]
    a268:	2221      	movs	r2, #33	; 0x21
    a26a:	6861      	ldr	r1, [r4, #4]
    a26c:	4418      	add	r0, r3
    a26e:	4b31      	ldr	r3, [pc, #196]	; (a334 <hid_keyboard_ctrl+0x110>)
    a270:	4798      	blx	r3
    a272:	4b31      	ldr	r3, [pc, #196]	; (a338 <hid_keyboard_ctrl+0x114>)
    a274:	6018      	str	r0, [r3, #0]
    a276:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a278:	f8df 90c4 	ldr.w	r9, [pc, #196]	; a340 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a27c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; a344 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    a280:	f8df b0c4 	ldr.w	fp, [pc, #196]	; a348 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a284:	6823      	ldr	r3, [r4, #0]
    a286:	7818      	ldrb	r0, [r3, #0]
    a288:	6861      	ldr	r1, [r4, #4]
    a28a:	4418      	add	r0, r3
    a28c:	47c8      	blx	r9
		desc->sod = ep;
    a28e:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    a290:	2800      	cmp	r0, #0
    a292:	d046      	beq.n	a322 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    a294:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a296:	7943      	ldrb	r3, [r0, #5]
    a298:	7902      	ldrb	r2, [r0, #4]
    a29a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a29e:	b292      	uxth	r2, r2
    a2a0:	78c1      	ldrb	r1, [r0, #3]
    a2a2:	4638      	mov	r0, r7
    a2a4:	47d0      	blx	sl
    a2a6:	4605      	mov	r5, r0
    a2a8:	2800      	cmp	r0, #0
    a2aa:	d13d      	bne.n	a328 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a2ac:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    a2b0:	bf14      	ite	ne
    a2b2:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a2b6:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    a2ba:	4638      	mov	r0, r7
    a2bc:	47d8      	blx	fp
    a2be:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    a2c0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a2c4:	d1de      	bne.n	a284 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    a2c6:	4b1c      	ldr	r3, [pc, #112]	; (a338 <hid_keyboard_ctrl+0x114>)
    a2c8:	2201      	movs	r2, #1
    a2ca:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    a2cc:	741a      	strb	r2, [r3, #16]
    a2ce:	e7b5      	b.n	a23c <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a2d0:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a2d2:	b11a      	cbz	r2, a2dc <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a2d4:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a2d6:	795b      	ldrb	r3, [r3, #5]
    a2d8:	2b03      	cmp	r3, #3
    a2da:	d128      	bne.n	a32e <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    a2dc:	7b2b      	ldrb	r3, [r5, #12]
    a2de:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a2e0:	bf1c      	itt	ne
    a2e2:	23ff      	movne	r3, #255	; 0xff
    a2e4:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    a2e6:	7b68      	ldrb	r0, [r5, #13]
    a2e8:	28ff      	cmp	r0, #255	; 0xff
    a2ea:	d003      	beq.n	a2f4 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    a2ec:	4b13      	ldr	r3, [pc, #76]	; (a33c <hid_keyboard_ctrl+0x118>)
    a2ee:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a2f0:	23ff      	movs	r3, #255	; 0xff
    a2f2:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    a2f4:	7ba8      	ldrb	r0, [r5, #14]
    a2f6:	28ff      	cmp	r0, #255	; 0xff
    a2f8:	d003      	beq.n	a302 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    a2fa:	4b10      	ldr	r3, [pc, #64]	; (a33c <hid_keyboard_ctrl+0x118>)
    a2fc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a2fe:	23ff      	movs	r3, #255	; 0xff
    a300:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    a302:	2500      	movs	r5, #0
    a304:	4b0c      	ldr	r3, [pc, #48]	; (a338 <hid_keyboard_ctrl+0x114>)
    a306:	741d      	strb	r5, [r3, #16]
    a308:	e798      	b.n	a23c <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a30a:	f06f 0509 	mvn.w	r5, #9
    a30e:	e795      	b.n	a23c <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a310:	f06f 0509 	mvn.w	r5, #9
    a314:	e792      	b.n	a23c <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    a316:	f06f 0511 	mvn.w	r5, #17
    a31a:	e78f      	b.n	a23c <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    a31c:	f06f 051b 	mvn.w	r5, #27
    a320:	e78c      	b.n	a23c <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a322:	f06f 0509 	mvn.w	r5, #9
    a326:	e789      	b.n	a23c <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    a328:	f06f 0513 	mvn.w	r5, #19
    a32c:	e786      	b.n	a23c <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a32e:	f06f 0509 	mvn.w	r5, #9
    a332:	e783      	b.n	a23c <hid_keyboard_ctrl+0x18>
    a334:	0000b015 	.word	0x0000b015
    a338:	20000e64 	.word	0x20000e64
    a33c:	000056d5 	.word	0x000056d5
    a340:	0000b04f 	.word	0x0000b04f
    a344:	0000566d 	.word	0x0000566d
    a348:	00005701 	.word	0x00005701

0000a34c <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    a34c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a34e:	4b0a      	ldr	r3, [pc, #40]	; (a378 <hiddf_keyboard_init+0x2c>)
    a350:	4798      	blx	r3
    a352:	2801      	cmp	r0, #1
    a354:	d80c      	bhi.n	a370 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    a356:	4809      	ldr	r0, [pc, #36]	; (a37c <hiddf_keyboard_init+0x30>)
    a358:	4b09      	ldr	r3, [pc, #36]	; (a380 <hiddf_keyboard_init+0x34>)
    a35a:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    a35c:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    a35e:	3014      	adds	r0, #20
    a360:	4b08      	ldr	r3, [pc, #32]	; (a384 <hiddf_keyboard_init+0x38>)
    a362:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    a364:	4908      	ldr	r1, [pc, #32]	; (a388 <hiddf_keyboard_init+0x3c>)
    a366:	2001      	movs	r0, #1
    a368:	4b08      	ldr	r3, [pc, #32]	; (a38c <hiddf_keyboard_init+0x40>)
    a36a:	4798      	blx	r3
	return ERR_NONE;
    a36c:	2000      	movs	r0, #0
    a36e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a370:	f06f 0010 	mvn.w	r0, #16
}
    a374:	bd08      	pop	{r3, pc}
    a376:	bf00      	nop
    a378:	0000b001 	.word	0x0000b001
    a37c:	20000e64 	.word	0x20000e64
    a380:	0000a225 	.word	0x0000a225
    a384:	0000afa1 	.word	0x0000afa1
    a388:	200003a0 	.word	0x200003a0
    a38c:	0000af0d 	.word	0x0000af0d

0000a390 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    a390:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    a392:	4b26      	ldr	r3, [pc, #152]	; (a42c <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    a394:	7c1b      	ldrb	r3, [r3, #16]
    a396:	2b00      	cmp	r3, #0
    a398:	d045      	beq.n	a426 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    a39a:	4a24      	ldr	r2, [pc, #144]	; (a42c <hiddf_keyboard_keys_state_change+0x9c>)
    a39c:	2300      	movs	r3, #0
    a39e:	6053      	str	r3, [r2, #4]
    a3a0:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    a3a2:	b329      	cbz	r1, a3f0 <hiddf_keyboard_keys_state_change+0x60>
    a3a4:	4603      	mov	r3, r0
    a3a6:	1e4d      	subs	r5, r1, #1
    a3a8:	b2ed      	uxtb	r5, r5
    a3aa:	3501      	adds	r5, #1
    a3ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a3b0:	4405      	add	r5, r0
    a3b2:	2200      	movs	r2, #0
    a3b4:	e002      	b.n	a3bc <hiddf_keyboard_keys_state_change+0x2c>
    a3b6:	3303      	adds	r3, #3
    a3b8:	42ab      	cmp	r3, r5
    a3ba:	d005      	beq.n	a3c8 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    a3bc:	785c      	ldrb	r4, [r3, #1]
    a3be:	2c00      	cmp	r4, #0
    a3c0:	d0f9      	beq.n	a3b6 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    a3c2:	3201      	adds	r2, #1
    a3c4:	b2d2      	uxtb	r2, r2
    a3c6:	e7f6      	b.n	a3b6 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    a3c8:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    a3ca:	b2d2      	uxtb	r2, r2
    a3cc:	2a06      	cmp	r2, #6
    a3ce:	d809      	bhi.n	a3e4 <hiddf_keyboard_keys_state_change+0x54>
    a3d0:	4603      	mov	r3, r0
    a3d2:	1e4a      	subs	r2, r1, #1
    a3d4:	b2d2      	uxtb	r2, r2
    a3d6:	3201      	adds	r2, #1
    a3d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a3dc:	4410      	add	r0, r2
    a3de:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a3e0:	4d12      	ldr	r5, [pc, #72]	; (a42c <hiddf_keyboard_keys_state_change+0x9c>)
    a3e2:	e015      	b.n	a410 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    a3e4:	4b11      	ldr	r3, [pc, #68]	; (a42c <hiddf_keyboard_keys_state_change+0x9c>)
    a3e6:	f04f 32ff 	mov.w	r2, #4294967295
    a3ea:	f8c3 2006 	str.w	r2, [r3, #6]
    a3ee:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    a3f0:	480e      	ldr	r0, [pc, #56]	; (a42c <hiddf_keyboard_keys_state_change+0x9c>)
    a3f2:	2300      	movs	r3, #0
    a3f4:	2208      	movs	r2, #8
    a3f6:	1d01      	adds	r1, r0, #4
    a3f8:	7b40      	ldrb	r0, [r0, #13]
    a3fa:	4c0d      	ldr	r4, [pc, #52]	; (a430 <hiddf_keyboard_keys_state_change+0xa0>)
    a3fc:	47a0      	blx	r4
    a3fe:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a400:	1c62      	adds	r2, r4, #1
    a402:	7819      	ldrb	r1, [r3, #0]
    a404:	442c      	add	r4, r5
    a406:	7121      	strb	r1, [r4, #4]
    a408:	b2d4      	uxtb	r4, r2
    a40a:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    a40c:	4283      	cmp	r3, r0
    a40e:	d0ef      	beq.n	a3f0 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    a410:	789a      	ldrb	r2, [r3, #2]
    a412:	2a01      	cmp	r2, #1
    a414:	d1f9      	bne.n	a40a <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    a416:	785a      	ldrb	r2, [r3, #1]
    a418:	2a00      	cmp	r2, #0
    a41a:	d0f1      	beq.n	a400 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    a41c:	792a      	ldrb	r2, [r5, #4]
    a41e:	7819      	ldrb	r1, [r3, #0]
    a420:	430a      	orrs	r2, r1
    a422:	712a      	strb	r2, [r5, #4]
    a424:	e7f1      	b.n	a40a <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    a426:	f06f 0010 	mvn.w	r0, #16
}
    a42a:	bd38      	pop	{r3, r4, r5, pc}
    a42c:	20000e64 	.word	0x20000e64
    a430:	0000aad1 	.word	0x0000aad1

0000a434 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a434:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a436:	780b      	ldrb	r3, [r1, #0]
    a438:	2b81      	cmp	r3, #129	; 0x81
    a43a:	d010      	beq.n	a45e <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a43c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a440:	2b01      	cmp	r3, #1
    a442:	d13f      	bne.n	a4c4 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    a444:	888a      	ldrh	r2, [r1, #4]
    a446:	4b22      	ldr	r3, [pc, #136]	; (a4d0 <hid_mouse_req+0x9c>)
    a448:	7a1b      	ldrb	r3, [r3, #8]
    a44a:	429a      	cmp	r2, r3
    a44c:	d13d      	bne.n	a4ca <hid_mouse_req+0x96>
			switch (req->bRequest) {
    a44e:	784b      	ldrb	r3, [r1, #1]
    a450:	2b03      	cmp	r3, #3
    a452:	d028      	beq.n	a4a6 <hid_mouse_req+0x72>
    a454:	2b0b      	cmp	r3, #11
    a456:	d02c      	beq.n	a4b2 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a458:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a45c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a45e:	784b      	ldrb	r3, [r1, #1]
    a460:	2b06      	cmp	r3, #6
    a462:	d002      	beq.n	a46a <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    a464:	f06f 0009 	mvn.w	r0, #9
    a468:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a46a:	888a      	ldrh	r2, [r1, #4]
    a46c:	4b18      	ldr	r3, [pc, #96]	; (a4d0 <hid_mouse_req+0x9c>)
    a46e:	7a1b      	ldrb	r3, [r3, #8]
    a470:	429a      	cmp	r2, r3
    a472:	d002      	beq.n	a47a <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    a474:	f06f 0009 	mvn.w	r0, #9
    a478:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a47a:	884b      	ldrh	r3, [r1, #2]
    a47c:	0a1b      	lsrs	r3, r3, #8
    a47e:	2b21      	cmp	r3, #33	; 0x21
    a480:	d004      	beq.n	a48c <hid_mouse_req+0x58>
    a482:	2b22      	cmp	r3, #34	; 0x22
    a484:	d009      	beq.n	a49a <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    a486:	f06f 000c 	mvn.w	r0, #12
    a48a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    a48c:	4b10      	ldr	r3, [pc, #64]	; (a4d0 <hid_mouse_req+0x9c>)
    a48e:	6819      	ldr	r1, [r3, #0]
    a490:	2300      	movs	r3, #0
    a492:	780a      	ldrb	r2, [r1, #0]
    a494:	4c0f      	ldr	r4, [pc, #60]	; (a4d4 <hid_mouse_req+0xa0>)
    a496:	47a0      	blx	r4
    a498:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    a49a:	2300      	movs	r3, #0
    a49c:	2234      	movs	r2, #52	; 0x34
    a49e:	490e      	ldr	r1, [pc, #56]	; (a4d8 <hid_mouse_req+0xa4>)
    a4a0:	4c0c      	ldr	r4, [pc, #48]	; (a4d4 <hid_mouse_req+0xa0>)
    a4a2:	47a0      	blx	r4
    a4a4:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    a4a6:	2300      	movs	r3, #0
    a4a8:	2201      	movs	r2, #1
    a4aa:	490c      	ldr	r1, [pc, #48]	; (a4dc <hid_mouse_req+0xa8>)
    a4ac:	4c09      	ldr	r4, [pc, #36]	; (a4d4 <hid_mouse_req+0xa0>)
    a4ae:	47a0      	blx	r4
    a4b0:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    a4b2:	884a      	ldrh	r2, [r1, #2]
    a4b4:	4b06      	ldr	r3, [pc, #24]	; (a4d0 <hid_mouse_req+0x9c>)
    a4b6:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    a4b8:	2300      	movs	r3, #0
    a4ba:	461a      	mov	r2, r3
    a4bc:	4619      	mov	r1, r3
    a4be:	4c05      	ldr	r4, [pc, #20]	; (a4d4 <hid_mouse_req+0xa0>)
    a4c0:	47a0      	blx	r4
    a4c2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a4c4:	f06f 0009 	mvn.w	r0, #9
    a4c8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a4ca:	f06f 0009 	mvn.w	r0, #9
    a4ce:	bd10      	pop	{r4, pc}
    a4d0:	20000e84 	.word	0x20000e84
    a4d4:	0000aad1 	.word	0x0000aad1
    a4d8:	0000d820 	.word	0x0000d820
    a4dc:	20000e8e 	.word	0x20000e8e

0000a4e0 <hid_mouse_ctrl>:
{
    a4e0:	b570      	push	{r4, r5, r6, lr}
    a4e2:	4614      	mov	r4, r2
	switch (ctrl) {
    a4e4:	2901      	cmp	r1, #1
    a4e6:	d040      	beq.n	a56a <hid_mouse_ctrl+0x8a>
    a4e8:	b139      	cbz	r1, a4fa <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    a4ea:	2902      	cmp	r1, #2
    a4ec:	bf0c      	ite	eq
    a4ee:	f06f 041a 	mvneq.w	r4, #26
    a4f2:	f06f 040c 	mvnne.w	r4, #12
}
    a4f6:	4620      	mov	r0, r4
    a4f8:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a4fa:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    a4fc:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a4fe:	2b00      	cmp	r3, #0
    a500:	d049      	beq.n	a596 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a502:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a504:	795b      	ldrb	r3, [r3, #5]
    a506:	2b03      	cmp	r3, #3
    a508:	d148      	bne.n	a59c <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a50a:	7a2b      	ldrb	r3, [r5, #8]
    a50c:	429a      	cmp	r2, r3
    a50e:	d048      	beq.n	a5a2 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a510:	2bff      	cmp	r3, #255	; 0xff
    a512:	d149      	bne.n	a5a8 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a514:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a516:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    a518:	7818      	ldrb	r0, [r3, #0]
    a51a:	2221      	movs	r2, #33	; 0x21
    a51c:	6861      	ldr	r1, [r4, #4]
    a51e:	4418      	add	r0, r3
    a520:	4b29      	ldr	r3, [pc, #164]	; (a5c8 <hid_mouse_ctrl+0xe8>)
    a522:	4798      	blx	r3
    a524:	4b29      	ldr	r3, [pc, #164]	; (a5cc <hid_mouse_ctrl+0xec>)
    a526:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a528:	6823      	ldr	r3, [r4, #0]
    a52a:	7818      	ldrb	r0, [r3, #0]
    a52c:	6861      	ldr	r1, [r4, #4]
    a52e:	4418      	add	r0, r3
    a530:	4b27      	ldr	r3, [pc, #156]	; (a5d0 <hid_mouse_ctrl+0xf0>)
    a532:	4798      	blx	r3
	desc->sod = ep;
    a534:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    a536:	2800      	cmp	r0, #0
    a538:	d039      	beq.n	a5ae <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    a53a:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a53c:	7943      	ldrb	r3, [r0, #5]
    a53e:	7902      	ldrb	r2, [r0, #4]
    a540:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a544:	b292      	uxth	r2, r2
    a546:	78c1      	ldrb	r1, [r0, #3]
    a548:	4630      	mov	r0, r6
    a54a:	4b22      	ldr	r3, [pc, #136]	; (a5d4 <hid_mouse_ctrl+0xf4>)
    a54c:	4798      	blx	r3
    a54e:	4604      	mov	r4, r0
    a550:	bb80      	cbnz	r0, a5b4 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a552:	f016 0f80 	tst.w	r6, #128	; 0x80
    a556:	d030      	beq.n	a5ba <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    a558:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    a55a:	4630      	mov	r0, r6
    a55c:	4b1e      	ldr	r3, [pc, #120]	; (a5d8 <hid_mouse_ctrl+0xf8>)
    a55e:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    a560:	4b1a      	ldr	r3, [pc, #104]	; (a5cc <hid_mouse_ctrl+0xec>)
    a562:	2201      	movs	r2, #1
    a564:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    a566:	72da      	strb	r2, [r3, #11]
    a568:	e7c5      	b.n	a4f6 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a56a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a56c:	b11a      	cbz	r2, a576 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a56e:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a570:	795b      	ldrb	r3, [r3, #5]
    a572:	2b03      	cmp	r3, #3
    a574:	d124      	bne.n	a5c0 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    a576:	7a2b      	ldrb	r3, [r5, #8]
    a578:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a57a:	bf1c      	itt	ne
    a57c:	23ff      	movne	r3, #255	; 0xff
    a57e:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    a580:	7a68      	ldrb	r0, [r5, #9]
    a582:	28ff      	cmp	r0, #255	; 0xff
    a584:	d003      	beq.n	a58e <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    a586:	4b15      	ldr	r3, [pc, #84]	; (a5dc <hid_mouse_ctrl+0xfc>)
    a588:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a58a:	23ff      	movs	r3, #255	; 0xff
    a58c:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    a58e:	2400      	movs	r4, #0
    a590:	4b0e      	ldr	r3, [pc, #56]	; (a5cc <hid_mouse_ctrl+0xec>)
    a592:	72dc      	strb	r4, [r3, #11]
    a594:	e7af      	b.n	a4f6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a596:	f06f 0409 	mvn.w	r4, #9
    a59a:	e7ac      	b.n	a4f6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a59c:	f06f 0409 	mvn.w	r4, #9
    a5a0:	e7a9      	b.n	a4f6 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    a5a2:	f06f 0411 	mvn.w	r4, #17
    a5a6:	e7a6      	b.n	a4f6 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    a5a8:	f06f 041b 	mvn.w	r4, #27
    a5ac:	e7a3      	b.n	a4f6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a5ae:	f06f 0409 	mvn.w	r4, #9
    a5b2:	e7a0      	b.n	a4f6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    a5b4:	f06f 0413 	mvn.w	r4, #19
    a5b8:	e79d      	b.n	a4f6 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    a5ba:	f04f 34ff 	mov.w	r4, #4294967295
    a5be:	e79a      	b.n	a4f6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    a5c0:	f06f 0409 	mvn.w	r4, #9
    a5c4:	e797      	b.n	a4f6 <hid_mouse_ctrl+0x16>
    a5c6:	bf00      	nop
    a5c8:	0000b015 	.word	0x0000b015
    a5cc:	20000e84 	.word	0x20000e84
    a5d0:	0000b04f 	.word	0x0000b04f
    a5d4:	0000566d 	.word	0x0000566d
    a5d8:	00005701 	.word	0x00005701
    a5dc:	000056d5 	.word	0x000056d5

0000a5e0 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    a5e0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a5e2:	4b0a      	ldr	r3, [pc, #40]	; (a60c <hiddf_mouse_init+0x2c>)
    a5e4:	4798      	blx	r3
    a5e6:	2801      	cmp	r0, #1
    a5e8:	d80c      	bhi.n	a604 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    a5ea:	4809      	ldr	r0, [pc, #36]	; (a610 <hiddf_mouse_init+0x30>)
    a5ec:	4b09      	ldr	r3, [pc, #36]	; (a614 <hiddf_mouse_init+0x34>)
    a5ee:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    a5f0:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    a5f2:	300c      	adds	r0, #12
    a5f4:	4b08      	ldr	r3, [pc, #32]	; (a618 <hiddf_mouse_init+0x38>)
    a5f6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    a5f8:	4908      	ldr	r1, [pc, #32]	; (a61c <hiddf_mouse_init+0x3c>)
    a5fa:	2001      	movs	r0, #1
    a5fc:	4b08      	ldr	r3, [pc, #32]	; (a620 <hiddf_mouse_init+0x40>)
    a5fe:	4798      	blx	r3
	return ERR_NONE;
    a600:	2000      	movs	r0, #0
    a602:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a604:	f06f 0010 	mvn.w	r0, #16
}
    a608:	bd08      	pop	{r3, pc}
    a60a:	bf00      	nop
    a60c:	0000b001 	.word	0x0000b001
    a610:	20000e84 	.word	0x20000e84
    a614:	0000a4e1 	.word	0x0000a4e1
    a618:	0000afa1 	.word	0x0000afa1
    a61c:	200003a8 	.word	0x200003a8
    a620:	0000af0d 	.word	0x0000af0d

0000a624 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    a624:	2200      	movs	r2, #0
    a626:	4b0d      	ldr	r3, [pc, #52]	; (a65c <hiddf_mouse_move+0x38>)
    a628:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    a62a:	2901      	cmp	r1, #1
    a62c:	d00e      	beq.n	a64c <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    a62e:	2902      	cmp	r1, #2
    a630:	d00e      	beq.n	a650 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    a632:	2903      	cmp	r1, #3
    a634:	d10f      	bne.n	a656 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    a636:	4b09      	ldr	r3, [pc, #36]	; (a65c <hiddf_mouse_move+0x38>)
    a638:	71d8      	strb	r0, [r3, #7]
{
    a63a:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    a63c:	4807      	ldr	r0, [pc, #28]	; (a65c <hiddf_mouse_move+0x38>)
    a63e:	2300      	movs	r3, #0
    a640:	2204      	movs	r2, #4
    a642:	1881      	adds	r1, r0, r2
    a644:	7a40      	ldrb	r0, [r0, #9]
    a646:	4c06      	ldr	r4, [pc, #24]	; (a660 <hiddf_mouse_move+0x3c>)
    a648:	47a0      	blx	r4
    a64a:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    a64c:	7158      	strb	r0, [r3, #5]
    a64e:	e7f4      	b.n	a63a <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    a650:	4b02      	ldr	r3, [pc, #8]	; (a65c <hiddf_mouse_move+0x38>)
    a652:	7198      	strb	r0, [r3, #6]
    a654:	e7f1      	b.n	a63a <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    a656:	f06f 000c 	mvn.w	r0, #12
    a65a:	4770      	bx	lr
    a65c:	20000e84 	.word	0x20000e84
    a660:	0000aad1 	.word	0x0000aad1

0000a664 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    a664:	4770      	bx	lr

0000a666 <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    a666:	e7fe      	b.n	a666 <midi_cb_ep_bulk_out>

0000a668 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a668:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a66a:	780b      	ldrb	r3, [r1, #0]
    a66c:	2b81      	cmp	r3, #129	; 0x81
    a66e:	d014      	beq.n	a69a <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a670:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a674:	2b01      	cmp	r3, #1
    a676:	d132      	bne.n	a6de <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    a678:	888b      	ldrh	r3, [r1, #4]
    a67a:	4a1c      	ldr	r2, [pc, #112]	; (a6ec <audio_midi_req+0x84>)
    a67c:	7912      	ldrb	r2, [r2, #4]
    a67e:	429a      	cmp	r2, r3
    a680:	d003      	beq.n	a68a <audio_midi_req+0x22>
    a682:	4a1a      	ldr	r2, [pc, #104]	; (a6ec <audio_midi_req+0x84>)
    a684:	7952      	ldrb	r2, [r2, #5]
    a686:	429a      	cmp	r2, r3
    a688:	d12c      	bne.n	a6e4 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    a68a:	784b      	ldrb	r3, [r1, #1]
    a68c:	2b03      	cmp	r3, #3
    a68e:	d017      	beq.n	a6c0 <audio_midi_req+0x58>
    a690:	2b0b      	cmp	r3, #11
    a692:	d01b      	beq.n	a6cc <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    a694:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a698:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a69a:	888b      	ldrh	r3, [r1, #4]
    a69c:	4a13      	ldr	r2, [pc, #76]	; (a6ec <audio_midi_req+0x84>)
    a69e:	7912      	ldrb	r2, [r2, #4]
    a6a0:	429a      	cmp	r2, r3
    a6a2:	d006      	beq.n	a6b2 <audio_midi_req+0x4a>
    a6a4:	4a11      	ldr	r2, [pc, #68]	; (a6ec <audio_midi_req+0x84>)
    a6a6:	7952      	ldrb	r2, [r2, #5]
    a6a8:	429a      	cmp	r2, r3
    a6aa:	d002      	beq.n	a6b2 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a6ac:	f06f 0009 	mvn.w	r0, #9
    a6b0:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    a6b2:	4b0e      	ldr	r3, [pc, #56]	; (a6ec <audio_midi_req+0x84>)
    a6b4:	6819      	ldr	r1, [r3, #0]
    a6b6:	2300      	movs	r3, #0
    a6b8:	780a      	ldrb	r2, [r1, #0]
    a6ba:	4c0d      	ldr	r4, [pc, #52]	; (a6f0 <audio_midi_req+0x88>)
    a6bc:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    a6be:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    a6c0:	2300      	movs	r3, #0
    a6c2:	2201      	movs	r2, #1
    a6c4:	490b      	ldr	r1, [pc, #44]	; (a6f4 <audio_midi_req+0x8c>)
    a6c6:	4c0a      	ldr	r4, [pc, #40]	; (a6f0 <audio_midi_req+0x88>)
    a6c8:	47a0      	blx	r4
    a6ca:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    a6cc:	884a      	ldrh	r2, [r1, #2]
    a6ce:	4b07      	ldr	r3, [pc, #28]	; (a6ec <audio_midi_req+0x84>)
    a6d0:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    a6d2:	2300      	movs	r3, #0
    a6d4:	461a      	mov	r2, r3
    a6d6:	4619      	mov	r1, r3
    a6d8:	4c05      	ldr	r4, [pc, #20]	; (a6f0 <audio_midi_req+0x88>)
    a6da:	47a0      	blx	r4
    a6dc:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a6de:	f06f 0009 	mvn.w	r0, #9
    a6e2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a6e4:	f06f 0009 	mvn.w	r0, #9
    a6e8:	bd10      	pop	{r4, pc}
    a6ea:	bf00      	nop
    a6ec:	20000e9c 	.word	0x20000e9c
    a6f0:	0000aad1 	.word	0x0000aad1
    a6f4:	20000ea4 	.word	0x20000ea4

0000a6f8 <audio_midi_ctrl>:
{
    a6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a6fc:	b083      	sub	sp, #12
    a6fe:	4615      	mov	r5, r2
	switch (ctrl) {
    a700:	2901      	cmp	r1, #1
    a702:	f000 8092 	beq.w	a82a <audio_midi_ctrl+0x132>
    a706:	b141      	cbz	r1, a71a <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    a708:	2902      	cmp	r1, #2
    a70a:	bf0c      	ite	eq
    a70c:	f06f 001a 	mvneq.w	r0, #26
    a710:	f06f 000c 	mvnne.w	r0, #12
}
    a714:	b003      	add	sp, #12
    a716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a71a:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    a71e:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a720:	2800      	cmp	r0, #0
    a722:	f000 80a9 	beq.w	a878 <audio_midi_ctrl+0x180>
    a726:	f109 0604 	add.w	r6, r9, #4
    a72a:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a72c:	f04f 0804 	mov.w	r8, #4
    a730:	4f5d      	ldr	r7, [pc, #372]	; (a8a8 <audio_midi_ctrl+0x1b0>)
    a732:	e019      	b.n	a768 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a734:	f816 3b01 	ldrb.w	r3, [r6], #1
    a738:	429a      	cmp	r2, r3
    a73a:	f000 80a3 	beq.w	a884 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a73e:	2bff      	cmp	r3, #255	; 0xff
    a740:	f040 80a3 	bne.w	a88a <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a744:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    a748:	2c01      	cmp	r4, #1
    a74a:	d016      	beq.n	a77a <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a74c:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a74e:	7818      	ldrb	r0, [r3, #0]
    a750:	4642      	mov	r2, r8
    a752:	6869      	ldr	r1, [r5, #4]
    a754:	4418      	add	r0, r3
    a756:	47b8      	blx	r7
    a758:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    a75a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    a75e:	f000 809e 	beq.w	a89e <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    a762:	2800      	cmp	r0, #0
    a764:	f000 808b 	beq.w	a87e <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    a768:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    a76a:	7943      	ldrb	r3, [r0, #5]
    a76c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a770:	2b01      	cmp	r3, #1
    a772:	d0df      	beq.n	a734 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    a774:	f06f 0009 	mvn.w	r0, #9
    a778:	e7cc      	b.n	a714 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a77a:	2205      	movs	r2, #5
    a77c:	6869      	ldr	r1, [r5, #4]
    a77e:	4b4a      	ldr	r3, [pc, #296]	; (a8a8 <audio_midi_ctrl+0x1b0>)
    a780:	4798      	blx	r3
    a782:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    a784:	4e49      	ldr	r6, [pc, #292]	; (a8ac <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a786:	f8df 8144 	ldr.w	r8, [pc, #324]	; a8cc <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    a78a:	4f49      	ldr	r7, [pc, #292]	; (a8b0 <audio_midi_ctrl+0x1b8>)
    a78c:	e01a      	b.n	a7c4 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    a78e:	4a47      	ldr	r2, [pc, #284]	; (a8ac <audio_midi_ctrl+0x1b4>)
    a790:	7953      	ldrb	r3, [r2, #5]
    a792:	425b      	negs	r3, r3
    a794:	b2db      	uxtb	r3, r3
    a796:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    a798:	f06f 0013 	mvn.w	r0, #19
    a79c:	e7ba      	b.n	a714 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    a79e:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a7a2:	b2c0      	uxtb	r0, r0
    a7a4:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    a7a8:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    a7aa:	4a42      	ldr	r2, [pc, #264]	; (a8b4 <audio_midi_ctrl+0x1bc>)
    a7ac:	2102      	movs	r1, #2
    a7ae:	f899 0006 	ldrb.w	r0, [r9, #6]
    a7b2:	4b41      	ldr	r3, [pc, #260]	; (a8b8 <audio_midi_ctrl+0x1c0>)
    a7b4:	4798      	blx	r3
				desc->sod = ep;
    a7b6:	602c      	str	r4, [r5, #0]
    a7b8:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a7ba:	6869      	ldr	r1, [r5, #4]
    a7bc:	4420      	add	r0, r4
    a7be:	4b3f      	ldr	r3, [pc, #252]	; (a8bc <audio_midi_ctrl+0x1c4>)
    a7c0:	4798      	blx	r3
    a7c2:	4604      	mov	r4, r0
			while (NULL != ep) {
    a7c4:	2c00      	cmp	r4, #0
    a7c6:	d063      	beq.n	a890 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    a7c8:	78a3      	ldrb	r3, [r4, #2]
    a7ca:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    a7ce:	78e3      	ldrb	r3, [r4, #3]
    a7d0:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    a7d4:	7962      	ldrb	r2, [r4, #5]
    a7d6:	7923      	ldrb	r3, [r4, #4]
    a7d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    a7dc:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    a7de:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    a7e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a7e6:	b2db      	uxtb	r3, r3
    a7e8:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    a7ea:	2301      	movs	r3, #1
    a7ec:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a7ee:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a7f2:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a7f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a7fa:	b292      	uxth	r2, r2
    a7fc:	47c0      	blx	r8
    a7fe:	b2c0      	uxtb	r0, r0
    a800:	7170      	strb	r0, [r6, #5]
    a802:	2800      	cmp	r0, #0
    a804:	d1c3      	bne.n	a78e <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a806:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a80a:	f013 0f80 	tst.w	r3, #128	; 0x80
    a80e:	d1c6      	bne.n	a79e <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    a810:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a814:	b2c0      	uxtb	r0, r0
    a816:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    a81a:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    a81c:	4a28      	ldr	r2, [pc, #160]	; (a8c0 <audio_midi_ctrl+0x1c8>)
    a81e:	2102      	movs	r1, #2
    a820:	f899 0007 	ldrb.w	r0, [r9, #7]
    a824:	4b24      	ldr	r3, [pc, #144]	; (a8b8 <audio_midi_ctrl+0x1c0>)
    a826:	4798      	blx	r3
    a828:	e7c5      	b.n	a7b6 <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a82a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a82c:	b142      	cbz	r2, a840 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a82e:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    a830:	795b      	ldrb	r3, [r3, #5]
    a832:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a836:	2b01      	cmp	r3, #1
    a838:	d002      	beq.n	a840 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    a83a:	f06f 0009 	mvn.w	r0, #9
    a83e:	e769      	b.n	a714 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    a840:	7923      	ldrb	r3, [r4, #4]
    a842:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    a844:	bf1c      	itt	ne
    a846:	23ff      	movne	r3, #255	; 0xff
    a848:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    a84a:	7963      	ldrb	r3, [r4, #5]
    a84c:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    a84e:	bf1c      	itt	ne
    a850:	23ff      	movne	r3, #255	; 0xff
    a852:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    a854:	79a0      	ldrb	r0, [r4, #6]
    a856:	28ff      	cmp	r0, #255	; 0xff
    a858:	d003      	beq.n	a862 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    a85a:	4b1a      	ldr	r3, [pc, #104]	; (a8c4 <audio_midi_ctrl+0x1cc>)
    a85c:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a85e:	23ff      	movs	r3, #255	; 0xff
    a860:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    a862:	79e0      	ldrb	r0, [r4, #7]
    a864:	28ff      	cmp	r0, #255	; 0xff
    a866:	d003      	beq.n	a870 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    a868:	4b16      	ldr	r3, [pc, #88]	; (a8c4 <audio_midi_ctrl+0x1cc>)
    a86a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a86c:	23ff      	movs	r3, #255	; 0xff
    a86e:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    a870:	2000      	movs	r0, #0
    a872:	4b15      	ldr	r3, [pc, #84]	; (a8c8 <audio_midi_ctrl+0x1d0>)
    a874:	7358      	strb	r0, [r3, #13]
    a876:	e74d      	b.n	a714 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    a878:	f06f 0009 	mvn.w	r0, #9
    a87c:	e74a      	b.n	a714 <audio_midi_ctrl+0x1c>
    a87e:	f06f 0009 	mvn.w	r0, #9
    a882:	e747      	b.n	a714 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    a884:	f06f 0011 	mvn.w	r0, #17
    a888:	e744      	b.n	a714 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    a88a:	f06f 001b 	mvn.w	r0, #27
    a88e:	e741      	b.n	a714 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a890:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a892:	7818      	ldrb	r0, [r3, #0]
    a894:	2204      	movs	r2, #4
    a896:	6869      	ldr	r1, [r5, #4]
    a898:	4418      	add	r0, r3
    a89a:	4b03      	ldr	r3, [pc, #12]	; (a8a8 <audio_midi_ctrl+0x1b0>)
    a89c:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    a89e:	2201      	movs	r2, #1
    a8a0:	4b09      	ldr	r3, [pc, #36]	; (a8c8 <audio_midi_ctrl+0x1d0>)
    a8a2:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a8a4:	2000      	movs	r0, #0
    a8a6:	e735      	b.n	a714 <audio_midi_ctrl+0x1c>
    a8a8:	0000b015 	.word	0x0000b015
    a8ac:	20003d8c 	.word	0x20003d8c
    a8b0:	00005701 	.word	0x00005701
    a8b4:	0000a665 	.word	0x0000a665
    a8b8:	000058d5 	.word	0x000058d5
    a8bc:	0000b04f 	.word	0x0000b04f
    a8c0:	0000a667 	.word	0x0000a667
    a8c4:	000056d5 	.word	0x000056d5
    a8c8:	20000e9c 	.word	0x20000e9c
    a8cc:	0000566d 	.word	0x0000566d

0000a8d0 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    a8d0:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    a8d2:	4b0a      	ldr	r3, [pc, #40]	; (a8fc <audiodf_midi_init+0x2c>)
    a8d4:	4798      	blx	r3
    a8d6:	2801      	cmp	r0, #1
    a8d8:	d80c      	bhi.n	a8f4 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    a8da:	4809      	ldr	r0, [pc, #36]	; (a900 <audiodf_midi_init+0x30>)
    a8dc:	4b09      	ldr	r3, [pc, #36]	; (a904 <audiodf_midi_init+0x34>)
    a8de:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    a8e0:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    a8e2:	3010      	adds	r0, #16
    a8e4:	4b08      	ldr	r3, [pc, #32]	; (a908 <audiodf_midi_init+0x38>)
    a8e6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    a8e8:	4908      	ldr	r1, [pc, #32]	; (a90c <audiodf_midi_init+0x3c>)
    a8ea:	2001      	movs	r0, #1
    a8ec:	4b08      	ldr	r3, [pc, #32]	; (a910 <audiodf_midi_init+0x40>)
    a8ee:	4798      	blx	r3
	return ERR_NONE;
    a8f0:	2000      	movs	r0, #0
    a8f2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a8f4:	f06f 0010 	mvn.w	r0, #16
}
    a8f8:	bd08      	pop	{r3, pc}
    a8fa:	bf00      	nop
    a8fc:	0000b001 	.word	0x0000b001
    a900:	20000e9c 	.word	0x20000e9c
    a904:	0000a6f9 	.word	0x0000a6f9
    a908:	0000afa1 	.word	0x0000afa1
    a90c:	200003b0 	.word	0x200003b0
    a910:	0000af0d 	.word	0x0000af0d

0000a914 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    a914:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    a916:	4c06      	ldr	r4, [pc, #24]	; (a930 <audiodf_midi_xfer_packet+0x1c>)
    a918:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    a91a:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    a91c:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    a91e:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    a920:	2300      	movs	r3, #0
    a922:	2204      	movs	r2, #4
    a924:	f104 0109 	add.w	r1, r4, #9
    a928:	79a0      	ldrb	r0, [r4, #6]
    a92a:	4c02      	ldr	r4, [pc, #8]	; (a934 <audiodf_midi_xfer_packet+0x20>)
    a92c:	47a0      	blx	r4
	
	
}
    a92e:	bd10      	pop	{r4, pc}
    a930:	20000e9c 	.word	0x20000e9c
    a934:	0000aad1 	.word	0x0000aad1

0000a938 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a938:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a93a:	4b07      	ldr	r3, [pc, #28]	; (a958 <usbdc_unconfig+0x20>)
    a93c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a93e:	b14c      	cbz	r4, a954 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a940:	2600      	movs	r6, #0
    a942:	2501      	movs	r5, #1
    a944:	6863      	ldr	r3, [r4, #4]
    a946:	4632      	mov	r2, r6
    a948:	4629      	mov	r1, r5
    a94a:	4620      	mov	r0, r4
    a94c:	4798      	blx	r3
		func = func->next;
    a94e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a950:	2c00      	cmp	r4, #0
    a952:	d1f7      	bne.n	a944 <usbdc_unconfig+0xc>
    a954:	bd70      	pop	{r4, r5, r6, pc}
    a956:	bf00      	nop
    a958:	20000eb8 	.word	0x20000eb8

0000a95c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a95c:	b570      	push	{r4, r5, r6, lr}
    a95e:	4606      	mov	r6, r0
    a960:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a962:	4b07      	ldr	r3, [pc, #28]	; (a980 <usbdc_change_notify+0x24>)
    a964:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a966:	b91c      	cbnz	r4, a970 <usbdc_change_notify+0x14>
    a968:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a96a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a96c:	2c00      	cmp	r4, #0
    a96e:	d0fb      	beq.n	a968 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a970:	6863      	ldr	r3, [r4, #4]
    a972:	2b00      	cmp	r3, #0
    a974:	d0f9      	beq.n	a96a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a976:	4629      	mov	r1, r5
    a978:	4630      	mov	r0, r6
    a97a:	4798      	blx	r3
    a97c:	e7f5      	b.n	a96a <usbdc_change_notify+0xe>
    a97e:	bf00      	nop
    a980:	20000eb8 	.word	0x20000eb8

0000a984 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a986:	4607      	mov	r7, r0
    a988:	460e      	mov	r6, r1
    a98a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a98c:	4b0c      	ldr	r3, [pc, #48]	; (a9c0 <usbdc_request_handler+0x3c>)
    a98e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a990:	b91c      	cbnz	r4, a99a <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a992:	2000      	movs	r0, #0
    a994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a996:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a998:	b16c      	cbz	r4, a9b6 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a99a:	6863      	ldr	r3, [r4, #4]
    a99c:	2b00      	cmp	r3, #0
    a99e:	d0fa      	beq.n	a996 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a9a0:	462a      	mov	r2, r5
    a9a2:	4631      	mov	r1, r6
    a9a4:	4638      	mov	r0, r7
    a9a6:	4798      	blx	r3
			if (0 == rc) {
    a9a8:	b138      	cbz	r0, a9ba <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a9aa:	f110 0f0a 	cmn.w	r0, #10
    a9ae:	d0f2      	beq.n	a996 <usbdc_request_handler+0x12>
				return -1;
    a9b0:	f04f 30ff 	mov.w	r0, #4294967295
}
    a9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a9b6:	2000      	movs	r0, #0
    a9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a9ba:	2001      	movs	r0, #1
    a9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9be:	bf00      	nop
    a9c0:	20000eb8 	.word	0x20000eb8

0000a9c4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a9c4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a9c6:	4b06      	ldr	r3, [pc, #24]	; (a9e0 <usbd_sof_cb+0x1c>)
    a9c8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a9ca:	b91c      	cbnz	r4, a9d4 <usbd_sof_cb+0x10>
    a9cc:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a9ce:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a9d0:	2c00      	cmp	r4, #0
    a9d2:	d0fb      	beq.n	a9cc <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a9d4:	6863      	ldr	r3, [r4, #4]
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d0f9      	beq.n	a9ce <usbd_sof_cb+0xa>
			sof->cb();
    a9da:	4798      	blx	r3
    a9dc:	e7f7      	b.n	a9ce <usbd_sof_cb+0xa>
    a9de:	bf00      	nop
    a9e0:	20000eb8 	.word	0x20000eb8

0000a9e4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a9e4:	b510      	push	{r4, lr}
    a9e6:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a9e8:	b119      	cbz	r1, a9f2 <usbdc_cb_ctl_done+0xe>
    a9ea:	2901      	cmp	r1, #1
    a9ec:	d026      	beq.n	aa3c <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a9ee:	2000      	movs	r0, #0
    a9f0:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a9f2:	7813      	ldrb	r3, [r2, #0]
    a9f4:	2b00      	cmp	r3, #0
    a9f6:	d1fa      	bne.n	a9ee <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a9f8:	7853      	ldrb	r3, [r2, #1]
    a9fa:	2b05      	cmp	r3, #5
    a9fc:	d00f      	beq.n	aa1e <usbdc_cb_ctl_done+0x3a>
    a9fe:	2b09      	cmp	r3, #9
    aa00:	d1f5      	bne.n	a9ee <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    aa02:	8852      	ldrh	r2, [r2, #2]
    aa04:	4b10      	ldr	r3, [pc, #64]	; (aa48 <usbdc_cb_ctl_done+0x64>)
    aa06:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    aa08:	8863      	ldrh	r3, [r4, #2]
    aa0a:	2b00      	cmp	r3, #0
    aa0c:	bf14      	ite	ne
    aa0e:	2104      	movne	r1, #4
    aa10:	2103      	moveq	r1, #3
    aa12:	4b0d      	ldr	r3, [pc, #52]	; (aa48 <usbdc_cb_ctl_done+0x64>)
    aa14:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    aa16:	2001      	movs	r0, #1
    aa18:	4b0c      	ldr	r3, [pc, #48]	; (aa4c <usbdc_cb_ctl_done+0x68>)
    aa1a:	4798      	blx	r3
    aa1c:	e7e7      	b.n	a9ee <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    aa1e:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    aa20:	b2c0      	uxtb	r0, r0
    aa22:	4b0b      	ldr	r3, [pc, #44]	; (aa50 <usbdc_cb_ctl_done+0x6c>)
    aa24:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    aa26:	8863      	ldrh	r3, [r4, #2]
    aa28:	2b00      	cmp	r3, #0
    aa2a:	bf14      	ite	ne
    aa2c:	2103      	movne	r1, #3
    aa2e:	2102      	moveq	r1, #2
    aa30:	4b05      	ldr	r3, [pc, #20]	; (aa48 <usbdc_cb_ctl_done+0x64>)
    aa32:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    aa34:	2001      	movs	r0, #1
    aa36:	4b05      	ldr	r3, [pc, #20]	; (aa4c <usbdc_cb_ctl_done+0x68>)
    aa38:	4798      	blx	r3
    aa3a:	e7d8      	b.n	a9ee <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    aa3c:	2201      	movs	r2, #1
    aa3e:	4621      	mov	r1, r4
    aa40:	2000      	movs	r0, #0
    aa42:	4b04      	ldr	r3, [pc, #16]	; (aa54 <usbdc_cb_ctl_done+0x70>)
    aa44:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    aa46:	e7d2      	b.n	a9ee <usbdc_cb_ctl_done+0xa>
    aa48:	20000eb8 	.word	0x20000eb8
    aa4c:	0000a95d 	.word	0x0000a95d
    aa50:	00005661 	.word	0x00005661
    aa54:	0000a985 	.word	0x0000a985

0000aa58 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    aa58:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    aa5a:	4b0d      	ldr	r3, [pc, #52]	; (aa90 <usbdc_reset+0x38>)
    aa5c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    aa5e:	4d0d      	ldr	r5, [pc, #52]	; (aa94 <usbdc_reset+0x3c>)
    aa60:	2602      	movs	r6, #2
    aa62:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    aa64:	2400      	movs	r4, #0
    aa66:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    aa68:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    aa6a:	4620      	mov	r0, r4
    aa6c:	4b0a      	ldr	r3, [pc, #40]	; (aa98 <usbdc_reset+0x40>)
    aa6e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    aa70:	7f28      	ldrb	r0, [r5, #28]
    aa72:	4b0a      	ldr	r3, [pc, #40]	; (aa9c <usbdc_reset+0x44>)
    aa74:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    aa76:	4a0a      	ldr	r2, [pc, #40]	; (aaa0 <usbdc_reset+0x48>)
    aa78:	4621      	mov	r1, r4
    aa7a:	4620      	mov	r0, r4
    aa7c:	4d09      	ldr	r5, [pc, #36]	; (aaa4 <usbdc_reset+0x4c>)
    aa7e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    aa80:	4a09      	ldr	r2, [pc, #36]	; (aaa8 <usbdc_reset+0x50>)
    aa82:	4631      	mov	r1, r6
    aa84:	4620      	mov	r0, r4
    aa86:	47a8      	blx	r5
	usb_d_ep_enable(0);
    aa88:	4620      	mov	r0, r4
    aa8a:	4b08      	ldr	r3, [pc, #32]	; (aaac <usbdc_reset+0x54>)
    aa8c:	4798      	blx	r3
    aa8e:	bd70      	pop	{r4, r5, r6, pc}
    aa90:	0000a939 	.word	0x0000a939
    aa94:	20000eb8 	.word	0x20000eb8
    aa98:	000056d5 	.word	0x000056d5
    aa9c:	000056c1 	.word	0x000056c1
    aaa0:	0000aaf1 	.word	0x0000aaf1
    aaa4:	000058d5 	.word	0x000058d5
    aaa8:	0000a9e5 	.word	0x0000a9e5
    aaac:	00005701 	.word	0x00005701

0000aab0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    aab0:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    aab2:	b110      	cbz	r0, aaba <usbd_event_cb+0xa>
    aab4:	2801      	cmp	r0, #1
    aab6:	d004      	beq.n	aac2 <usbd_event_cb+0x12>
    aab8:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    aaba:	2000      	movs	r0, #0
    aabc:	4b02      	ldr	r3, [pc, #8]	; (aac8 <usbd_event_cb+0x18>)
    aabe:	4798      	blx	r3
		break;
    aac0:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    aac2:	4b02      	ldr	r3, [pc, #8]	; (aacc <usbd_event_cb+0x1c>)
    aac4:	4798      	blx	r3
    aac6:	bd08      	pop	{r3, pc}
    aac8:	0000a95d 	.word	0x0000a95d
    aacc:	0000aa59 	.word	0x0000aa59

0000aad0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    aad0:	b500      	push	{lr}
    aad2:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    aad4:	9101      	str	r1, [sp, #4]
    aad6:	9202      	str	r2, [sp, #8]
    aad8:	f88d 000c 	strb.w	r0, [sp, #12]
    aadc:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    aae0:	a801      	add	r0, sp, #4
    aae2:	4b02      	ldr	r3, [pc, #8]	; (aaec <usbdc_xfer+0x1c>)
    aae4:	4798      	blx	r3
}
    aae6:	b005      	add	sp, #20
    aae8:	f85d fb04 	ldr.w	pc, [sp], #4
    aaec:	0000574d 	.word	0x0000574d

0000aaf0 <usbdc_cb_ctl_req>:
{
    aaf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aaf4:	b083      	sub	sp, #12
    aaf6:	4605      	mov	r5, r0
    aaf8:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    aafa:	2200      	movs	r2, #0
    aafc:	4b9b      	ldr	r3, [pc, #620]	; (ad6c <usbdc_cb_ctl_req+0x27c>)
    aafe:	4798      	blx	r3
    ab00:	f1b0 3fff 	cmp.w	r0, #4294967295
    ab04:	d00b      	beq.n	ab1e <usbdc_cb_ctl_req+0x2e>
    ab06:	2801      	cmp	r0, #1
    ab08:	f000 81e3 	beq.w	aed2 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ab0c:	7823      	ldrb	r3, [r4, #0]
    ab0e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    ab12:	d008      	beq.n	ab26 <usbdc_cb_ctl_req+0x36>
    ab14:	2a80      	cmp	r2, #128	; 0x80
    ab16:	f000 80f4 	beq.w	ad02 <usbdc_cb_ctl_req+0x212>
		return false;
    ab1a:	2000      	movs	r0, #0
    ab1c:	e000      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    ab1e:	2000      	movs	r0, #0
}
    ab20:	b003      	add	sp, #12
    ab22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    ab26:	7862      	ldrb	r2, [r4, #1]
    ab28:	3a01      	subs	r2, #1
    ab2a:	2a0a      	cmp	r2, #10
    ab2c:	f200 81d3 	bhi.w	aed6 <usbdc_cb_ctl_req+0x3e6>
    ab30:	e8df f012 	tbh	[pc, r2, lsl #1]
    ab34:	01d10060 	.word	0x01d10060
    ab38:	01d10076 	.word	0x01d10076
    ab3c:	01d1000b 	.word	0x01d1000b
    ab40:	01d101d1 	.word	0x01d101d1
    ab44:	01d10015 	.word	0x01d10015
    ab48:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ab4a:	2301      	movs	r3, #1
    ab4c:	2200      	movs	r2, #0
    ab4e:	4611      	mov	r1, r2
    ab50:	4628      	mov	r0, r5
    ab52:	4c87      	ldr	r4, [pc, #540]	; (ad70 <usbdc_cb_ctl_req+0x280>)
    ab54:	47a0      	blx	r4
    ab56:	fab0 f080 	clz	r0, r0
    ab5a:	0940      	lsrs	r0, r0, #5
    ab5c:	e7e0      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    ab5e:	8862      	ldrh	r2, [r4, #2]
    ab60:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    ab62:	b1ca      	cbz	r2, ab98 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ab64:	4b83      	ldr	r3, [pc, #524]	; (ad74 <usbdc_cb_ctl_req+0x284>)
    ab66:	681b      	ldr	r3, [r3, #0]
    ab68:	6859      	ldr	r1, [r3, #4]
    ab6a:	6818      	ldr	r0, [r3, #0]
    ab6c:	4b82      	ldr	r3, [pc, #520]	; (ad78 <usbdc_cb_ctl_req+0x288>)
    ab6e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    ab70:	2800      	cmp	r0, #0
    ab72:	f000 81be 	beq.w	aef2 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    ab76:	78c2      	ldrb	r2, [r0, #3]
    ab78:	7881      	ldrb	r1, [r0, #2]
    ab7a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    ab7e:	fa10 f181 	uxtah	r1, r0, r1
    ab82:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ab84:	2204      	movs	r2, #4
    ab86:	4b7d      	ldr	r3, [pc, #500]	; (ad7c <usbdc_cb_ctl_req+0x28c>)
    ab88:	4798      	blx	r3
    ab8a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    ab8c:	b130      	cbz	r0, ab9c <usbdc_cb_ctl_req+0xac>
    ab8e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ab90:	f8df 81e0 	ldr.w	r8, [pc, #480]	; ad74 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ab94:	4f79      	ldr	r7, [pc, #484]	; (ad7c <usbdc_cb_ctl_req+0x28c>)
    ab96:	e018      	b.n	abca <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    ab98:	4b79      	ldr	r3, [pc, #484]	; (ad80 <usbdc_cb_ctl_req+0x290>)
    ab9a:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ab9c:	2301      	movs	r3, #1
    ab9e:	2200      	movs	r2, #0
    aba0:	4611      	mov	r1, r2
    aba2:	4628      	mov	r0, r5
    aba4:	4c72      	ldr	r4, [pc, #456]	; (ad70 <usbdc_cb_ctl_req+0x280>)
    aba6:	47a0      	blx	r4
    aba8:	fab0 f080 	clz	r0, r0
    abac:	0940      	lsrs	r0, r0, #5
    abae:	e7b7      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    abb0:	464c      	mov	r4, r9
    abb2:	e000      	b.n	abb6 <usbdc_cb_ctl_req+0xc6>
    abb4:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    abb6:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    abb8:	7803      	ldrb	r3, [r0, #0]
    abba:	4418      	add	r0, r3
    abbc:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    abbe:	2204      	movs	r2, #4
    abc0:	9901      	ldr	r1, [sp, #4]
    abc2:	47b8      	blx	r7
    abc4:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    abc6:	2800      	cmp	r0, #0
    abc8:	d0e8      	beq.n	ab9c <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    abca:	f890 9002 	ldrb.w	r9, [r0, #2]
    abce:	45a1      	cmp	r9, r4
    abd0:	d0f1      	beq.n	abb6 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    abd2:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    abd6:	2c00      	cmp	r4, #0
    abd8:	d0ea      	beq.n	abb0 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    abda:	2600      	movs	r6, #0
    abdc:	6863      	ldr	r3, [r4, #4]
    abde:	466a      	mov	r2, sp
    abe0:	4631      	mov	r1, r6
    abe2:	4620      	mov	r0, r4
    abe4:	4798      	blx	r3
    abe6:	2800      	cmp	r0, #0
    abe8:	d0e4      	beq.n	abb4 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    abea:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    abec:	2c00      	cmp	r4, #0
    abee:	d1f5      	bne.n	abdc <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    abf0:	464c      	mov	r4, r9
    abf2:	e7e0      	b.n	abb6 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    abf4:	f003 031f 	and.w	r3, r3, #31
    abf8:	2b02      	cmp	r3, #2
    abfa:	f040 816e 	bne.w	aeda <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    abfe:	88e3      	ldrh	r3, [r4, #6]
    ac00:	b10b      	cbz	r3, ac06 <usbdc_cb_ctl_req+0x116>
			return false;
    ac02:	2000      	movs	r0, #0
    ac04:	e78c      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    ac06:	88a0      	ldrh	r0, [r4, #4]
    ac08:	2100      	movs	r1, #0
    ac0a:	b2c0      	uxtb	r0, r0
    ac0c:	4b5d      	ldr	r3, [pc, #372]	; (ad84 <usbdc_cb_ctl_req+0x294>)
    ac0e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ac10:	2301      	movs	r3, #1
    ac12:	2200      	movs	r2, #0
    ac14:	4611      	mov	r1, r2
    ac16:	4628      	mov	r0, r5
    ac18:	4c55      	ldr	r4, [pc, #340]	; (ad70 <usbdc_cb_ctl_req+0x280>)
    ac1a:	47a0      	blx	r4
		return true;
    ac1c:	2001      	movs	r0, #1
    ac1e:	e77f      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ac20:	f003 031f 	and.w	r3, r3, #31
    ac24:	2b02      	cmp	r3, #2
    ac26:	f040 815a 	bne.w	aede <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    ac2a:	88e3      	ldrh	r3, [r4, #6]
    ac2c:	b10b      	cbz	r3, ac32 <usbdc_cb_ctl_req+0x142>
			return false;
    ac2e:	2000      	movs	r0, #0
    ac30:	e776      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ac32:	88a0      	ldrh	r0, [r4, #4]
    ac34:	2101      	movs	r1, #1
    ac36:	b2c0      	uxtb	r0, r0
    ac38:	4b52      	ldr	r3, [pc, #328]	; (ad84 <usbdc_cb_ctl_req+0x294>)
    ac3a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ac3c:	2301      	movs	r3, #1
    ac3e:	2200      	movs	r2, #0
    ac40:	4611      	mov	r1, r2
    ac42:	4628      	mov	r0, r5
    ac44:	4c4a      	ldr	r4, [pc, #296]	; (ad70 <usbdc_cb_ctl_req+0x280>)
    ac46:	47a0      	blx	r4
		return true;
    ac48:	2001      	movs	r0, #1
    ac4a:	e769      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    ac4c:	8866      	ldrh	r6, [r4, #2]
    ac4e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ac50:	4a48      	ldr	r2, [pc, #288]	; (ad74 <usbdc_cb_ctl_req+0x284>)
    ac52:	6813      	ldr	r3, [r2, #0]
    ac54:	7ed2      	ldrb	r2, [r2, #27]
    ac56:	6859      	ldr	r1, [r3, #4]
    ac58:	6818      	ldr	r0, [r3, #0]
    ac5a:	4b47      	ldr	r3, [pc, #284]	; (ad78 <usbdc_cb_ctl_req+0x288>)
    ac5c:	4798      	blx	r3
	if (NULL == ifc) {
    ac5e:	2800      	cmp	r0, #0
    ac60:	d045      	beq.n	acee <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    ac62:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    ac64:	78c2      	ldrb	r2, [r0, #3]
    ac66:	7881      	ldrb	r1, [r0, #2]
    ac68:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ac6c:	fa10 f181 	uxtah	r1, r0, r1
    ac70:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ac72:	2204      	movs	r2, #4
    ac74:	4b41      	ldr	r3, [pc, #260]	; (ad7c <usbdc_cb_ctl_req+0x28c>)
    ac76:	4798      	blx	r3
    ac78:	4603      	mov	r3, r0
    ac7a:	2800      	cmp	r0, #0
    ac7c:	d039      	beq.n	acf2 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ac7e:	2704      	movs	r7, #4
    ac80:	4d3e      	ldr	r5, [pc, #248]	; (ad7c <usbdc_cb_ctl_req+0x28c>)
    ac82:	e008      	b.n	ac96 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    ac84:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    ac86:	7803      	ldrb	r3, [r0, #0]
    ac88:	4418      	add	r0, r3
    ac8a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ac8c:	463a      	mov	r2, r7
    ac8e:	9901      	ldr	r1, [sp, #4]
    ac90:	47a8      	blx	r5
		if (NULL == ifc) {
    ac92:	4603      	mov	r3, r0
    ac94:	b378      	cbz	r0, acf6 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    ac96:	789a      	ldrb	r2, [r3, #2]
    ac98:	42a2      	cmp	r2, r4
    ac9a:	d1f3      	bne.n	ac84 <usbdc_cb_ctl_req+0x194>
    ac9c:	78da      	ldrb	r2, [r3, #3]
    ac9e:	42b2      	cmp	r2, r6
    aca0:	d1f0      	bne.n	ac84 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    aca2:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    aca4:	4b33      	ldr	r3, [pc, #204]	; (ad74 <usbdc_cb_ctl_req+0x284>)
    aca6:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    aca8:	b33d      	cbz	r5, acfa <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    acaa:	2701      	movs	r7, #1
    acac:	686b      	ldr	r3, [r5, #4]
    acae:	466a      	mov	r2, sp
    acb0:	4639      	mov	r1, r7
    acb2:	4628      	mov	r0, r5
    acb4:	4798      	blx	r3
    acb6:	b120      	cbz	r0, acc2 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    acb8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    acba:	2d00      	cmp	r5, #0
    acbc:	d1f6      	bne.n	acac <usbdc_cb_ctl_req+0x1bc>
	return false;
    acbe:	2000      	movs	r0, #0
    acc0:	e72e      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    acc2:	686b      	ldr	r3, [r5, #4]
    acc4:	466a      	mov	r2, sp
    acc6:	2100      	movs	r1, #0
    acc8:	4628      	mov	r0, r5
    acca:	4798      	blx	r3
    accc:	b9b8      	cbnz	r0, acfe <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    acce:	b136      	cbz	r6, acde <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    acd0:	4a28      	ldr	r2, [pc, #160]	; (ad74 <usbdc_cb_ctl_req+0x284>)
    acd2:	2301      	movs	r3, #1
    acd4:	fa03 f404 	lsl.w	r4, r3, r4
    acd8:	7f53      	ldrb	r3, [r2, #29]
    acda:	4323      	orrs	r3, r4
    acdc:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    acde:	2300      	movs	r3, #0
    ace0:	461a      	mov	r2, r3
    ace2:	4619      	mov	r1, r3
    ace4:	4618      	mov	r0, r3
    ace6:	4c22      	ldr	r4, [pc, #136]	; (ad70 <usbdc_cb_ctl_req+0x280>)
    ace8:	47a0      	blx	r4
			return true;
    acea:	2001      	movs	r0, #1
    acec:	e718      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    acee:	2000      	movs	r0, #0
    acf0:	e716      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    acf2:	2000      	movs	r0, #0
    acf4:	e714      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
			return false;
    acf6:	2000      	movs	r0, #0
    acf8:	e712      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
	return false;
    acfa:	2000      	movs	r0, #0
    acfc:	e710      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
			return false;
    acfe:	2000      	movs	r0, #0
    ad00:	e70e      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    ad02:	7862      	ldrb	r2, [r4, #1]
    ad04:	2a0a      	cmp	r2, #10
    ad06:	f200 80ec 	bhi.w	aee2 <usbdc_cb_ctl_req+0x3f2>
    ad0a:	e8df f012 	tbh	[pc, r2, lsl #1]
    ad0e:	008e      	.short	0x008e
    ad10:	00ea00ea 	.word	0x00ea00ea
    ad14:	00ea00ea 	.word	0x00ea00ea
    ad18:	000b00ea 	.word	0x000b00ea
    ad1c:	008200ea 	.word	0x008200ea
    ad20:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ad24:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    ad26:	0a13      	lsrs	r3, r2, #8
    ad28:	2b02      	cmp	r3, #2
    ad2a:	d02d      	beq.n	ad88 <usbdc_cb_ctl_req+0x298>
    ad2c:	2b03      	cmp	r3, #3
    ad2e:	d050      	beq.n	add2 <usbdc_cb_ctl_req+0x2e2>
    ad30:	2b01      	cmp	r3, #1
    ad32:	d001      	beq.n	ad38 <usbdc_cb_ctl_req+0x248>
	return false;
    ad34:	2000      	movs	r0, #0
    ad36:	e6f3      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    ad38:	88e2      	ldrh	r2, [r4, #6]
    ad3a:	2a12      	cmp	r2, #18
    ad3c:	bf28      	it	cs
    ad3e:	2212      	movcs	r2, #18
    ad40:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ad42:	4b0c      	ldr	r3, [pc, #48]	; (ad74 <usbdc_cb_ctl_req+0x284>)
    ad44:	681b      	ldr	r3, [r3, #0]
    ad46:	2201      	movs	r2, #1
    ad48:	6859      	ldr	r1, [r3, #4]
    ad4a:	6818      	ldr	r0, [r3, #0]
    ad4c:	4b0b      	ldr	r3, [pc, #44]	; (ad7c <usbdc_cb_ctl_req+0x28c>)
    ad4e:	4798      	blx	r3
	if (!dev_desc) {
    ad50:	4601      	mov	r1, r0
    ad52:	2800      	cmp	r0, #0
    ad54:	f000 80c7 	beq.w	aee6 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ad58:	2300      	movs	r3, #0
    ad5a:	4622      	mov	r2, r4
    ad5c:	4628      	mov	r0, r5
    ad5e:	4c04      	ldr	r4, [pc, #16]	; (ad70 <usbdc_cb_ctl_req+0x280>)
    ad60:	47a0      	blx	r4
    ad62:	fab0 f080 	clz	r0, r0
    ad66:	0940      	lsrs	r0, r0, #5
    ad68:	e6da      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
    ad6a:	bf00      	nop
    ad6c:	0000a985 	.word	0x0000a985
    ad70:	0000aad1 	.word	0x0000aad1
    ad74:	20000eb8 	.word	0x20000eb8
    ad78:	0000b095 	.word	0x0000b095
    ad7c:	0000b015 	.word	0x0000b015
    ad80:	0000a939 	.word	0x0000a939
    ad84:	0000586d 	.word	0x0000586d
	uint16_t length   = req->wLength;
    ad88:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ad8a:	4b5b      	ldr	r3, [pc, #364]	; (aef8 <usbdc_cb_ctl_req+0x408>)
    ad8c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ad8e:	681b      	ldr	r3, [r3, #0]
    ad90:	3201      	adds	r2, #1
    ad92:	b2d2      	uxtb	r2, r2
    ad94:	6859      	ldr	r1, [r3, #4]
    ad96:	6818      	ldr	r0, [r3, #0]
    ad98:	4b58      	ldr	r3, [pc, #352]	; (aefc <usbdc_cb_ctl_req+0x40c>)
    ad9a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    ad9c:	4601      	mov	r1, r0
    ad9e:	2800      	cmp	r0, #0
    ada0:	f000 80a3 	beq.w	aeea <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    ada4:	78c3      	ldrb	r3, [r0, #3]
    ada6:	7882      	ldrb	r2, [r0, #2]
    ada8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    adac:	b292      	uxth	r2, r2
	if (length <= total_len) {
    adae:	4294      	cmp	r4, r2
    adb0:	d90d      	bls.n	adce <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    adb2:	3e01      	subs	r6, #1
    adb4:	4226      	tst	r6, r4
    adb6:	bf0c      	ite	eq
    adb8:	2301      	moveq	r3, #1
    adba:	2300      	movne	r3, #0
		length = total_len;
    adbc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    adbe:	4622      	mov	r2, r4
    adc0:	4628      	mov	r0, r5
    adc2:	4c4f      	ldr	r4, [pc, #316]	; (af00 <usbdc_cb_ctl_req+0x410>)
    adc4:	47a0      	blx	r4
    adc6:	fab0 f080 	clz	r0, r0
    adca:	0940      	lsrs	r0, r0, #5
    adcc:	e6a8      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    adce:	2300      	movs	r3, #0
    add0:	e7f5      	b.n	adbe <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    add2:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    add4:	4b48      	ldr	r3, [pc, #288]	; (aef8 <usbdc_cb_ctl_req+0x408>)
    add6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    add8:	681b      	ldr	r3, [r3, #0]
    adda:	b2d2      	uxtb	r2, r2
    addc:	6859      	ldr	r1, [r3, #4]
    adde:	6818      	ldr	r0, [r3, #0]
    ade0:	4b48      	ldr	r3, [pc, #288]	; (af04 <usbdc_cb_ctl_req+0x414>)
    ade2:	4798      	blx	r3
	if (NULL == str_desc) {
    ade4:	4601      	mov	r1, r0
    ade6:	2800      	cmp	r0, #0
    ade8:	f000 8081 	beq.w	aeee <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    adec:	7802      	ldrb	r2, [r0, #0]
    adee:	4294      	cmp	r4, r2
    adf0:	d90d      	bls.n	ae0e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    adf2:	3e01      	subs	r6, #1
    adf4:	4226      	tst	r6, r4
    adf6:	bf0c      	ite	eq
    adf8:	2301      	moveq	r3, #1
    adfa:	2300      	movne	r3, #0
		length = str_desc[0];
    adfc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    adfe:	4622      	mov	r2, r4
    ae00:	4628      	mov	r0, r5
    ae02:	4c3f      	ldr	r4, [pc, #252]	; (af00 <usbdc_cb_ctl_req+0x410>)
    ae04:	47a0      	blx	r4
    ae06:	fab0 f080 	clz	r0, r0
    ae0a:	0940      	lsrs	r0, r0, #5
    ae0c:	e688      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    ae0e:	2300      	movs	r3, #0
    ae10:	e7f5      	b.n	adfe <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ae12:	4939      	ldr	r1, [pc, #228]	; (aef8 <usbdc_cb_ctl_req+0x408>)
    ae14:	694b      	ldr	r3, [r1, #20]
    ae16:	7eca      	ldrb	r2, [r1, #27]
    ae18:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ae1a:	2300      	movs	r3, #0
    ae1c:	2201      	movs	r2, #1
    ae1e:	6949      	ldr	r1, [r1, #20]
    ae20:	4628      	mov	r0, r5
    ae22:	4c37      	ldr	r4, [pc, #220]	; (af00 <usbdc_cb_ctl_req+0x410>)
    ae24:	47a0      	blx	r4
		return true;
    ae26:	2001      	movs	r0, #1
    ae28:	e67a      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ae2a:	f003 031f 	and.w	r3, r3, #31
    ae2e:	2b01      	cmp	r3, #1
    ae30:	d903      	bls.n	ae3a <usbdc_cb_ctl_req+0x34a>
    ae32:	2b02      	cmp	r3, #2
    ae34:	d010      	beq.n	ae58 <usbdc_cb_ctl_req+0x368>
		return false;
    ae36:	2000      	movs	r0, #0
    ae38:	e672      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		st = 0;
    ae3a:	2300      	movs	r3, #0
    ae3c:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    ae3e:	492e      	ldr	r1, [pc, #184]	; (aef8 <usbdc_cb_ctl_req+0x408>)
    ae40:	694b      	ldr	r3, [r1, #20]
    ae42:	f8bd 2000 	ldrh.w	r2, [sp]
    ae46:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ae48:	2300      	movs	r3, #0
    ae4a:	2202      	movs	r2, #2
    ae4c:	6949      	ldr	r1, [r1, #20]
    ae4e:	4628      	mov	r0, r5
    ae50:	4c2b      	ldr	r4, [pc, #172]	; (af00 <usbdc_cb_ctl_req+0x410>)
    ae52:	47a0      	blx	r4
	return true;
    ae54:	2001      	movs	r0, #1
    ae56:	e663      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ae58:	88a0      	ldrh	r0, [r4, #4]
    ae5a:	2102      	movs	r1, #2
    ae5c:	b2c0      	uxtb	r0, r0
    ae5e:	4b2a      	ldr	r3, [pc, #168]	; (af08 <usbdc_cb_ctl_req+0x418>)
    ae60:	4798      	blx	r3
		if (st < 0) {
    ae62:	2800      	cmp	r0, #0
    ae64:	db03      	blt.n	ae6e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    ae66:	f000 0001 	and.w	r0, r0, #1
    ae6a:	9000      	str	r0, [sp, #0]
    ae6c:	e7e7      	b.n	ae3e <usbdc_cb_ctl_req+0x34e>
			return false;
    ae6e:	2000      	movs	r0, #0
    ae70:	e656      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ae72:	4b21      	ldr	r3, [pc, #132]	; (aef8 <usbdc_cb_ctl_req+0x408>)
    ae74:	7f5b      	ldrb	r3, [r3, #29]
    ae76:	88a2      	ldrh	r2, [r4, #4]
    ae78:	4113      	asrs	r3, r2
    ae7a:	f013 0f01 	tst.w	r3, #1
    ae7e:	d012      	beq.n	aea6 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ae80:	4b1d      	ldr	r3, [pc, #116]	; (aef8 <usbdc_cb_ctl_req+0x408>)
    ae82:	691d      	ldr	r5, [r3, #16]
	return false;
    ae84:	2000      	movs	r0, #0
	while (NULL != func) {
    ae86:	2d00      	cmp	r5, #0
    ae88:	f43f ae4a 	beq.w	ab20 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ae8c:	2602      	movs	r6, #2
    ae8e:	686b      	ldr	r3, [r5, #4]
    ae90:	4622      	mov	r2, r4
    ae92:	4631      	mov	r1, r6
    ae94:	4628      	mov	r0, r5
    ae96:	4798      	blx	r3
    ae98:	2800      	cmp	r0, #0
    ae9a:	da0f      	bge.n	aebc <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    ae9c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    ae9e:	2d00      	cmp	r5, #0
    aea0:	d1f5      	bne.n	ae8e <usbdc_cb_ctl_req+0x39e>
	return false;
    aea2:	2000      	movs	r0, #0
    aea4:	e63c      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    aea6:	4914      	ldr	r1, [pc, #80]	; (aef8 <usbdc_cb_ctl_req+0x408>)
    aea8:	694b      	ldr	r3, [r1, #20]
    aeaa:	2000      	movs	r0, #0
    aeac:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aeae:	4603      	mov	r3, r0
    aeb0:	2201      	movs	r2, #1
    aeb2:	6949      	ldr	r1, [r1, #20]
    aeb4:	4c12      	ldr	r4, [pc, #72]	; (af00 <usbdc_cb_ctl_req+0x410>)
    aeb6:	47a0      	blx	r4
		return true;
    aeb8:	2001      	movs	r0, #1
    aeba:	e631      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    aebc:	490e      	ldr	r1, [pc, #56]	; (aef8 <usbdc_cb_ctl_req+0x408>)
    aebe:	694b      	ldr	r3, [r1, #20]
    aec0:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aec2:	2300      	movs	r3, #0
    aec4:	2201      	movs	r2, #1
    aec6:	6949      	ldr	r1, [r1, #20]
    aec8:	4618      	mov	r0, r3
    aeca:	4c0d      	ldr	r4, [pc, #52]	; (af00 <usbdc_cb_ctl_req+0x410>)
    aecc:	47a0      	blx	r4
			return true;
    aece:	2001      	movs	r0, #1
    aed0:	e626      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return true;
    aed2:	2001      	movs	r0, #1
    aed4:	e624      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    aed6:	2000      	movs	r0, #0
    aed8:	e622      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    aeda:	2000      	movs	r0, #0
    aedc:	e620      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    aede:	2000      	movs	r0, #0
    aee0:	e61e      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    aee2:	2000      	movs	r0, #0
    aee4:	e61c      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    aee6:	2000      	movs	r0, #0
    aee8:	e61a      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    aeea:	2000      	movs	r0, #0
    aeec:	e618      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
		return false;
    aeee:	2000      	movs	r0, #0
    aef0:	e616      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
			return false;
    aef2:	2000      	movs	r0, #0
    aef4:	e614      	b.n	ab20 <usbdc_cb_ctl_req+0x30>
    aef6:	bf00      	nop
    aef8:	20000eb8 	.word	0x20000eb8
    aefc:	0000b095 	.word	0x0000b095
    af00:	0000aad1 	.word	0x0000aad1
    af04:	0000b0fd 	.word	0x0000b0fd
    af08:	0000586d 	.word	0x0000586d

0000af0c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    af0c:	b508      	push	{r3, lr}
	switch (type) {
    af0e:	2801      	cmp	r0, #1
    af10:	d007      	beq.n	af22 <usbdc_register_handler+0x16>
    af12:	b110      	cbz	r0, af1a <usbdc_register_handler+0xe>
    af14:	2802      	cmp	r0, #2
    af16:	d008      	beq.n	af2a <usbdc_register_handler+0x1e>
    af18:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    af1a:	4806      	ldr	r0, [pc, #24]	; (af34 <usbdc_register_handler+0x28>)
    af1c:	4b06      	ldr	r3, [pc, #24]	; (af38 <usbdc_register_handler+0x2c>)
    af1e:	4798      	blx	r3
		break;
    af20:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    af22:	4806      	ldr	r0, [pc, #24]	; (af3c <usbdc_register_handler+0x30>)
    af24:	4b04      	ldr	r3, [pc, #16]	; (af38 <usbdc_register_handler+0x2c>)
    af26:	4798      	blx	r3
		break;
    af28:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    af2a:	4805      	ldr	r0, [pc, #20]	; (af40 <usbdc_register_handler+0x34>)
    af2c:	4b02      	ldr	r3, [pc, #8]	; (af38 <usbdc_register_handler+0x2c>)
    af2e:	4798      	blx	r3
    af30:	bd08      	pop	{r3, pc}
    af32:	bf00      	nop
    af34:	20000ebc 	.word	0x20000ebc
    af38:	0000597d 	.word	0x0000597d
    af3c:	20000ec0 	.word	0x20000ec0
    af40:	20000ec4 	.word	0x20000ec4

0000af44 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    af44:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    af46:	4605      	mov	r5, r0
    af48:	f240 3255 	movw	r2, #853	; 0x355
    af4c:	490c      	ldr	r1, [pc, #48]	; (af80 <usbdc_init+0x3c>)
    af4e:	3000      	adds	r0, #0
    af50:	bf18      	it	ne
    af52:	2001      	movne	r0, #1
    af54:	4b0b      	ldr	r3, [pc, #44]	; (af84 <usbdc_init+0x40>)
    af56:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    af58:	4b0b      	ldr	r3, [pc, #44]	; (af88 <usbdc_init+0x44>)
    af5a:	4798      	blx	r3
	if (rc < 0) {
    af5c:	2800      	cmp	r0, #0
    af5e:	db0e      	blt.n	af7e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    af60:	4c0a      	ldr	r4, [pc, #40]	; (af8c <usbdc_init+0x48>)
    af62:	2220      	movs	r2, #32
    af64:	2100      	movs	r1, #0
    af66:	4620      	mov	r0, r4
    af68:	4b09      	ldr	r3, [pc, #36]	; (af90 <usbdc_init+0x4c>)
    af6a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    af6c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    af6e:	4909      	ldr	r1, [pc, #36]	; (af94 <usbdc_init+0x50>)
    af70:	2000      	movs	r0, #0
    af72:	4c09      	ldr	r4, [pc, #36]	; (af98 <usbdc_init+0x54>)
    af74:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    af76:	4909      	ldr	r1, [pc, #36]	; (af9c <usbdc_init+0x58>)
    af78:	2001      	movs	r0, #1
    af7a:	47a0      	blx	r4

	return 0;
    af7c:	2000      	movs	r0, #0
}
    af7e:	bd38      	pop	{r3, r4, r5, pc}
    af80:	0000d854 	.word	0x0000d854
    af84:	00005921 	.word	0x00005921
    af88:	000055c9 	.word	0x000055c9
    af8c:	20000eb8 	.word	0x20000eb8
    af90:	0000bae3 	.word	0x0000bae3
    af94:	0000a9c5 	.word	0x0000a9c5
    af98:	00005631 	.word	0x00005631
    af9c:	0000aab1 	.word	0x0000aab1

0000afa0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    afa0:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    afa2:	4601      	mov	r1, r0
    afa4:	4801      	ldr	r0, [pc, #4]	; (afac <usbdc_register_function+0xc>)
    afa6:	4b02      	ldr	r3, [pc, #8]	; (afb0 <usbdc_register_function+0x10>)
    afa8:	4798      	blx	r3
    afaa:	bd08      	pop	{r3, pc}
    afac:	20000ec8 	.word	0x20000ec8
    afb0:	0000597d 	.word	0x0000597d

0000afb4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    afb4:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    afb6:	4b0a      	ldr	r3, [pc, #40]	; (afe0 <usbdc_start+0x2c>)
    afb8:	7e9b      	ldrb	r3, [r3, #26]
    afba:	b95b      	cbnz	r3, afd4 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    afbc:	b168      	cbz	r0, afda <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    afbe:	4b08      	ldr	r3, [pc, #32]	; (afe0 <usbdc_start+0x2c>)
    afc0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    afc2:	6802      	ldr	r2, [r0, #0]
    afc4:	79d2      	ldrb	r2, [r2, #7]
    afc6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    afc8:	2201      	movs	r2, #1
    afca:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    afcc:	4b05      	ldr	r3, [pc, #20]	; (afe4 <usbdc_start+0x30>)
    afce:	4798      	blx	r3
	return ERR_NONE;
    afd0:	2000      	movs	r0, #0
    afd2:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    afd4:	f06f 0003 	mvn.w	r0, #3
    afd8:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    afda:	f06f 0008 	mvn.w	r0, #8
}
    afde:	bd08      	pop	{r3, pc}
    afe0:	20000eb8 	.word	0x20000eb8
    afe4:	0000563d 	.word	0x0000563d

0000afe8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    afe8:	b508      	push	{r3, lr}
	usb_d_attach();
    afea:	4b01      	ldr	r3, [pc, #4]	; (aff0 <usbdc_attach+0x8>)
    afec:	4798      	blx	r3
    afee:	bd08      	pop	{r3, pc}
    aff0:	00005649 	.word	0x00005649

0000aff4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    aff4:	4b01      	ldr	r3, [pc, #4]	; (affc <usbdc_get_ctrl_buffer+0x8>)
    aff6:	6958      	ldr	r0, [r3, #20]
    aff8:	4770      	bx	lr
    affa:	bf00      	nop
    affc:	20000eb8 	.word	0x20000eb8

0000b000 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    b000:	4b03      	ldr	r3, [pc, #12]	; (b010 <usbdc_get_state+0x10>)
    b002:	7e98      	ldrb	r0, [r3, #26]
    b004:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    b008:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    b00a:	bf18      	it	ne
    b00c:	2010      	movne	r0, #16
    b00e:	4770      	bx	lr
    b010:	20000eb8 	.word	0x20000eb8

0000b014 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b014:	4288      	cmp	r0, r1
    b016:	d214      	bcs.n	b042 <usb_find_desc+0x2e>
	return desc[0];
    b018:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b01a:	2b01      	cmp	r3, #1
    b01c:	d913      	bls.n	b046 <usb_find_desc+0x32>
{
    b01e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    b020:	7844      	ldrb	r4, [r0, #1]
    b022:	4294      	cmp	r4, r2
    b024:	d00a      	beq.n	b03c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    b026:	4418      	add	r0, r3
	while (desc < eof) {
    b028:	4281      	cmp	r1, r0
    b02a:	d906      	bls.n	b03a <usb_find_desc+0x26>
	return desc[0];
    b02c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b02e:	2b01      	cmp	r3, #1
    b030:	d90b      	bls.n	b04a <usb_find_desc+0x36>
	return desc[1];
    b032:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    b034:	4294      	cmp	r4, r2
    b036:	d1f6      	bne.n	b026 <usb_find_desc+0x12>
    b038:	e000      	b.n	b03c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b03a:	2000      	movs	r0, #0
}
    b03c:	f85d 4b04 	ldr.w	r4, [sp], #4
    b040:	4770      	bx	lr
	return NULL;
    b042:	2000      	movs	r0, #0
    b044:	4770      	bx	lr
		_desc_len_check();
    b046:	2000      	movs	r0, #0
    b048:	4770      	bx	lr
    b04a:	2000      	movs	r0, #0
    b04c:	e7f6      	b.n	b03c <usb_find_desc+0x28>

0000b04e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b04e:	4288      	cmp	r0, r1
    b050:	d216      	bcs.n	b080 <usb_find_ep_desc+0x32>
	return desc[0];
    b052:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b054:	2b01      	cmp	r3, #1
    b056:	d915      	bls.n	b084 <usb_find_ep_desc+0x36>
	return desc[1];
    b058:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b05a:	2a04      	cmp	r2, #4
    b05c:	d014      	beq.n	b088 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b05e:	2a05      	cmp	r2, #5
    b060:	d00b      	beq.n	b07a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    b062:	4418      	add	r0, r3
	while (desc < eof) {
    b064:	4281      	cmp	r1, r0
    b066:	d909      	bls.n	b07c <usb_find_ep_desc+0x2e>
	return desc[0];
    b068:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b06a:	2b01      	cmp	r3, #1
    b06c:	d90e      	bls.n	b08c <usb_find_ep_desc+0x3e>
	return desc[1];
    b06e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b070:	2a04      	cmp	r2, #4
    b072:	d00d      	beq.n	b090 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b074:	2a05      	cmp	r2, #5
    b076:	d1f4      	bne.n	b062 <usb_find_ep_desc+0x14>
    b078:	e00b      	b.n	b092 <usb_find_ep_desc+0x44>
    b07a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b07c:	2000      	movs	r0, #0
    b07e:	4770      	bx	lr
    b080:	2000      	movs	r0, #0
    b082:	4770      	bx	lr
		_desc_len_check();
    b084:	2000      	movs	r0, #0
    b086:	4770      	bx	lr
	return NULL;
    b088:	2000      	movs	r0, #0
    b08a:	4770      	bx	lr
		_desc_len_check();
    b08c:	2000      	movs	r0, #0
    b08e:	4770      	bx	lr
	return NULL;
    b090:	2000      	movs	r0, #0
}
    b092:	4770      	bx	lr

0000b094 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b094:	b538      	push	{r3, r4, r5, lr}
    b096:	460c      	mov	r4, r1
    b098:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b09a:	2202      	movs	r2, #2
    b09c:	4b16      	ldr	r3, [pc, #88]	; (b0f8 <usb_find_cfg_desc+0x64>)
    b09e:	4798      	blx	r3
	if (!desc) {
    b0a0:	4603      	mov	r3, r0
    b0a2:	b1e8      	cbz	r0, b0e0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    b0a4:	4284      	cmp	r4, r0
    b0a6:	d91d      	bls.n	b0e4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    b0a8:	7802      	ldrb	r2, [r0, #0]
    b0aa:	2a01      	cmp	r2, #1
    b0ac:	d91c      	bls.n	b0e8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    b0ae:	7842      	ldrb	r2, [r0, #1]
    b0b0:	2a02      	cmp	r2, #2
    b0b2:	d11b      	bne.n	b0ec <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    b0b4:	7942      	ldrb	r2, [r0, #5]
    b0b6:	42aa      	cmp	r2, r5
    b0b8:	d012      	beq.n	b0e0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    b0ba:	78d9      	ldrb	r1, [r3, #3]
    b0bc:	789a      	ldrb	r2, [r3, #2]
    b0be:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b0c2:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    b0c6:	429c      	cmp	r4, r3
    b0c8:	d909      	bls.n	b0de <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    b0ca:	781a      	ldrb	r2, [r3, #0]
    b0cc:	2a01      	cmp	r2, #1
    b0ce:	d90f      	bls.n	b0f0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    b0d0:	785a      	ldrb	r2, [r3, #1]
    b0d2:	2a02      	cmp	r2, #2
    b0d4:	d10e      	bne.n	b0f4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    b0d6:	795a      	ldrb	r2, [r3, #5]
    b0d8:	42aa      	cmp	r2, r5
    b0da:	d1ee      	bne.n	b0ba <usb_find_cfg_desc+0x26>
    b0dc:	e000      	b.n	b0e0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    b0de:	2300      	movs	r3, #0
}
    b0e0:	4618      	mov	r0, r3
    b0e2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    b0e4:	2300      	movs	r3, #0
    b0e6:	e7fb      	b.n	b0e0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    b0e8:	2300      	movs	r3, #0
    b0ea:	e7f9      	b.n	b0e0 <usb_find_cfg_desc+0x4c>
	return NULL;
    b0ec:	2300      	movs	r3, #0
    b0ee:	e7f7      	b.n	b0e0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    b0f0:	2300      	movs	r3, #0
    b0f2:	e7f5      	b.n	b0e0 <usb_find_cfg_desc+0x4c>
	return NULL;
    b0f4:	2300      	movs	r3, #0
    b0f6:	e7f3      	b.n	b0e0 <usb_find_cfg_desc+0x4c>
    b0f8:	0000b015 	.word	0x0000b015

0000b0fc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    b0fc:	4288      	cmp	r0, r1
    b0fe:	d217      	bcs.n	b130 <usb_find_str_desc+0x34>
{
    b100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b104:	460d      	mov	r5, r1
    b106:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    b108:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b10a:	f04f 0803 	mov.w	r8, #3
    b10e:	4f0c      	ldr	r7, [pc, #48]	; (b140 <usb_find_str_desc+0x44>)
    b110:	4642      	mov	r2, r8
    b112:	4629      	mov	r1, r5
    b114:	47b8      	blx	r7
		if (desc) {
    b116:	4603      	mov	r3, r0
    b118:	b170      	cbz	r0, b138 <usb_find_str_desc+0x3c>
	return desc[0];
    b11a:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    b11c:	2801      	cmp	r0, #1
    b11e:	d90a      	bls.n	b136 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    b120:	42a6      	cmp	r6, r4
    b122:	d009      	beq.n	b138 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    b124:	4418      	add	r0, r3
    b126:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    b128:	4285      	cmp	r5, r0
    b12a:	d8f1      	bhi.n	b110 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    b12c:	2300      	movs	r3, #0
    b12e:	e003      	b.n	b138 <usb_find_str_desc+0x3c>
    b130:	2300      	movs	r3, #0
}
    b132:	4618      	mov	r0, r3
    b134:	4770      	bx	lr
			_desc_len_check();
    b136:	2300      	movs	r3, #0
}
    b138:	4618      	mov	r0, r3
    b13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b13e:	bf00      	nop
    b140:	0000b015 	.word	0x0000b015

0000b144 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    b144:	4b3a      	ldr	r3, [pc, #232]	; (b230 <hiddf_demo_sof_event+0xec>)
    b146:	791b      	ldrb	r3, [r3, #4]
    b148:	2b0a      	cmp	r3, #10
    b14a:	d803      	bhi.n	b154 <hiddf_demo_sof_event+0x10>
    b14c:	3301      	adds	r3, #1
    b14e:	4a38      	ldr	r2, [pc, #224]	; (b230 <hiddf_demo_sof_event+0xec>)
    b150:	7113      	strb	r3, [r2, #4]
    b152:	4770      	bx	lr
{
    b154:	b570      	push	{r4, r5, r6, lr}
    b156:	b084      	sub	sp, #16
		interval = 0;
    b158:	4b35      	ldr	r3, [pc, #212]	; (b230 <hiddf_demo_sof_event+0xec>)
    b15a:	2200      	movs	r2, #0
    b15c:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    b15e:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    b160:	a801      	add	r0, sp, #4
    b162:	4b34      	ldr	r3, [pc, #208]	; (b234 <hiddf_demo_sof_event+0xf0>)
    b164:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b166:	096b      	lsrs	r3, r5, #5
    b168:	4933      	ldr	r1, [pc, #204]	; (b238 <hiddf_demo_sof_event+0xf4>)
    b16a:	01db      	lsls	r3, r3, #7
    b16c:	18ca      	adds	r2, r1, r3
    b16e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b170:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b172:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b174:	405c      	eors	r4, r3
    b176:	400c      	ands	r4, r1
    b178:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b17a:	a801      	add	r0, sp, #4
    b17c:	4b2f      	ldr	r3, [pc, #188]	; (b23c <hiddf_demo_sof_event+0xf8>)
    b17e:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    b180:	f005 051f 	and.w	r5, r5, #31
    b184:	2301      	movs	r3, #1
    b186:	fa03 f505 	lsl.w	r5, r3, r5
    b18a:	4225      	tst	r5, r4
    b18c:	d040      	beq.n	b210 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    b18e:	4b28      	ldr	r3, [pc, #160]	; (b230 <hiddf_demo_sof_event+0xec>)
    b190:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    b192:	a802      	add	r0, sp, #8
    b194:	4b27      	ldr	r3, [pc, #156]	; (b234 <hiddf_demo_sof_event+0xf0>)
    b196:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b198:	096b      	lsrs	r3, r5, #5
    b19a:	4927      	ldr	r1, [pc, #156]	; (b238 <hiddf_demo_sof_event+0xf4>)
    b19c:	01db      	lsls	r3, r3, #7
    b19e:	18ca      	adds	r2, r1, r3
    b1a0:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b1a2:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b1a4:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b1a6:	405c      	eors	r4, r3
    b1a8:	400c      	ands	r4, r1
    b1aa:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b1ac:	a802      	add	r0, sp, #8
    b1ae:	4b23      	ldr	r3, [pc, #140]	; (b23c <hiddf_demo_sof_event+0xf8>)
    b1b0:	4798      	blx	r3
    b1b2:	f005 051f 	and.w	r5, r5, #31
    b1b6:	2301      	movs	r3, #1
    b1b8:	fa03 f505 	lsl.w	r5, r3, r5
    b1bc:	4225      	tst	r5, r4
    b1be:	d02d      	beq.n	b21c <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    b1c0:	4d1b      	ldr	r5, [pc, #108]	; (b230 <hiddf_demo_sof_event+0xec>)
    b1c2:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    b1c4:	a803      	add	r0, sp, #12
    b1c6:	4b1b      	ldr	r3, [pc, #108]	; (b234 <hiddf_demo_sof_event+0xf0>)
    b1c8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b1ca:	0973      	lsrs	r3, r6, #5
    b1cc:	491a      	ldr	r1, [pc, #104]	; (b238 <hiddf_demo_sof_event+0xf4>)
    b1ce:	01db      	lsls	r3, r3, #7
    b1d0:	18ca      	adds	r2, r1, r3
    b1d2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b1d4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b1d6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b1d8:	405c      	eors	r4, r3
    b1da:	400c      	ands	r4, r1
    b1dc:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b1de:	a803      	add	r0, sp, #12
    b1e0:	4b16      	ldr	r3, [pc, #88]	; (b23c <hiddf_demo_sof_event+0xf8>)
    b1e2:	4798      	blx	r3
    b1e4:	f006 061f 	and.w	r6, r6, #31
    b1e8:	2301      	movs	r3, #1
    b1ea:	40b3      	lsls	r3, r6
    b1ec:	401c      	ands	r4, r3
    b1ee:	bf0c      	ite	eq
    b1f0:	2301      	moveq	r3, #1
    b1f2:	2300      	movne	r3, #0
    b1f4:	7d2a      	ldrb	r2, [r5, #20]
    b1f6:	429a      	cmp	r2, r3
    b1f8:	d008      	beq.n	b20c <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    b1fa:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    b1fc:	b19c      	cbz	r4, b226 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    b1fe:	2200      	movs	r2, #0
    b200:	4b0f      	ldr	r3, [pc, #60]	; (b240 <hiddf_demo_sof_event+0xfc>)
    b202:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    b204:	2101      	movs	r1, #1
    b206:	480e      	ldr	r0, [pc, #56]	; (b240 <hiddf_demo_sof_event+0xfc>)
    b208:	4b0e      	ldr	r3, [pc, #56]	; (b244 <hiddf_demo_sof_event+0x100>)
    b20a:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    b20c:	b004      	add	sp, #16
    b20e:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    b210:	4619      	mov	r1, r3
    b212:	f06f 0004 	mvn.w	r0, #4
    b216:	4b0c      	ldr	r3, [pc, #48]	; (b248 <hiddf_demo_sof_event+0x104>)
    b218:	4798      	blx	r3
    b21a:	e7b8      	b.n	b18e <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    b21c:	4619      	mov	r1, r3
    b21e:	2005      	movs	r0, #5
    b220:	4b09      	ldr	r3, [pc, #36]	; (b248 <hiddf_demo_sof_event+0x104>)
    b222:	4798      	blx	r3
    b224:	e7cc      	b.n	b1c0 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    b226:	2201      	movs	r2, #1
    b228:	4b05      	ldr	r3, [pc, #20]	; (b240 <hiddf_demo_sof_event+0xfc>)
    b22a:	709a      	strb	r2, [r3, #2]
    b22c:	e7ea      	b.n	b204 <hiddf_demo_sof_event+0xc0>
    b22e:	bf00      	nop
    b230:	20000ed8 	.word	0x20000ed8
    b234:	00004589 	.word	0x00004589
    b238:	41008000 	.word	0x41008000
    b23c:	00004597 	.word	0x00004597
    b240:	200003b8 	.word	0x200003b8
    b244:	0000a391 	.word	0x0000a391
    b248:	0000a625 	.word	0x0000a625

0000b24c <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    b24c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b24e:	4805      	ldr	r0, [pc, #20]	; (b264 <composite_device_init+0x18>)
    b250:	4b05      	ldr	r3, [pc, #20]	; (b268 <composite_device_init+0x1c>)
    b252:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    b254:	4b05      	ldr	r3, [pc, #20]	; (b26c <composite_device_init+0x20>)
    b256:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    b258:	4b05      	ldr	r3, [pc, #20]	; (b270 <composite_device_init+0x24>)
    b25a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    b25c:	4b05      	ldr	r3, [pc, #20]	; (b274 <composite_device_init+0x28>)
    b25e:	4798      	blx	r3
    b260:	bd08      	pop	{r3, pc}
    b262:	bf00      	nop
    b264:	20000ef0 	.word	0x20000ef0
    b268:	0000af45 	.word	0x0000af45
    b26c:	0000a10d 	.word	0x0000a10d
    b270:	0000a5e1 	.word	0x0000a5e1
    b274:	0000a34d 	.word	0x0000a34d

0000b278 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    b278:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    b27a:	4803      	ldr	r0, [pc, #12]	; (b288 <composite_device_start+0x10>)
    b27c:	4b03      	ldr	r3, [pc, #12]	; (b28c <composite_device_start+0x14>)
    b27e:	4798      	blx	r3
	usbdc_attach();
    b280:	4b03      	ldr	r3, [pc, #12]	; (b290 <composite_device_start+0x18>)
    b282:	4798      	blx	r3
    b284:	bd08      	pop	{r3, pc}
    b286:	bf00      	nop
    b288:	200003c4 	.word	0x200003c4
    b28c:	0000afb5 	.word	0x0000afb5
    b290:	0000afe9 	.word	0x0000afe9

0000b294 <usb_init>:
		}
	}
}

void usb_init(void)
{
    b294:	b508      	push	{r3, lr}

	composite_device_init();
    b296:	4b01      	ldr	r3, [pc, #4]	; (b29c <usb_init+0x8>)
    b298:	4798      	blx	r3
    b29a:	bd08      	pop	{r3, pc}
    b29c:	0000b24d 	.word	0x0000b24d

0000b2a0 <__aeabi_drsub>:
    b2a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b2a4:	e002      	b.n	b2ac <__adddf3>
    b2a6:	bf00      	nop

0000b2a8 <__aeabi_dsub>:
    b2a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b2ac <__adddf3>:
    b2ac:	b530      	push	{r4, r5, lr}
    b2ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b2b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b2b6:	ea94 0f05 	teq	r4, r5
    b2ba:	bf08      	it	eq
    b2bc:	ea90 0f02 	teqeq	r0, r2
    b2c0:	bf1f      	itttt	ne
    b2c2:	ea54 0c00 	orrsne.w	ip, r4, r0
    b2c6:	ea55 0c02 	orrsne.w	ip, r5, r2
    b2ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b2ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b2d2:	f000 80e2 	beq.w	b49a <__adddf3+0x1ee>
    b2d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b2da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b2de:	bfb8      	it	lt
    b2e0:	426d      	neglt	r5, r5
    b2e2:	dd0c      	ble.n	b2fe <__adddf3+0x52>
    b2e4:	442c      	add	r4, r5
    b2e6:	ea80 0202 	eor.w	r2, r0, r2
    b2ea:	ea81 0303 	eor.w	r3, r1, r3
    b2ee:	ea82 0000 	eor.w	r0, r2, r0
    b2f2:	ea83 0101 	eor.w	r1, r3, r1
    b2f6:	ea80 0202 	eor.w	r2, r0, r2
    b2fa:	ea81 0303 	eor.w	r3, r1, r3
    b2fe:	2d36      	cmp	r5, #54	; 0x36
    b300:	bf88      	it	hi
    b302:	bd30      	pophi	{r4, r5, pc}
    b304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b308:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b30c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b314:	d002      	beq.n	b31c <__adddf3+0x70>
    b316:	4240      	negs	r0, r0
    b318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b31c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b320:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b328:	d002      	beq.n	b330 <__adddf3+0x84>
    b32a:	4252      	negs	r2, r2
    b32c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b330:	ea94 0f05 	teq	r4, r5
    b334:	f000 80a7 	beq.w	b486 <__adddf3+0x1da>
    b338:	f1a4 0401 	sub.w	r4, r4, #1
    b33c:	f1d5 0e20 	rsbs	lr, r5, #32
    b340:	db0d      	blt.n	b35e <__adddf3+0xb2>
    b342:	fa02 fc0e 	lsl.w	ip, r2, lr
    b346:	fa22 f205 	lsr.w	r2, r2, r5
    b34a:	1880      	adds	r0, r0, r2
    b34c:	f141 0100 	adc.w	r1, r1, #0
    b350:	fa03 f20e 	lsl.w	r2, r3, lr
    b354:	1880      	adds	r0, r0, r2
    b356:	fa43 f305 	asr.w	r3, r3, r5
    b35a:	4159      	adcs	r1, r3
    b35c:	e00e      	b.n	b37c <__adddf3+0xd0>
    b35e:	f1a5 0520 	sub.w	r5, r5, #32
    b362:	f10e 0e20 	add.w	lr, lr, #32
    b366:	2a01      	cmp	r2, #1
    b368:	fa03 fc0e 	lsl.w	ip, r3, lr
    b36c:	bf28      	it	cs
    b36e:	f04c 0c02 	orrcs.w	ip, ip, #2
    b372:	fa43 f305 	asr.w	r3, r3, r5
    b376:	18c0      	adds	r0, r0, r3
    b378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b37c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b380:	d507      	bpl.n	b392 <__adddf3+0xe6>
    b382:	f04f 0e00 	mov.w	lr, #0
    b386:	f1dc 0c00 	rsbs	ip, ip, #0
    b38a:	eb7e 0000 	sbcs.w	r0, lr, r0
    b38e:	eb6e 0101 	sbc.w	r1, lr, r1
    b392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b396:	d31b      	bcc.n	b3d0 <__adddf3+0x124>
    b398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b39c:	d30c      	bcc.n	b3b8 <__adddf3+0x10c>
    b39e:	0849      	lsrs	r1, r1, #1
    b3a0:	ea5f 0030 	movs.w	r0, r0, rrx
    b3a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b3a8:	f104 0401 	add.w	r4, r4, #1
    b3ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b3b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b3b4:	f080 809a 	bcs.w	b4ec <__adddf3+0x240>
    b3b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b3bc:	bf08      	it	eq
    b3be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b3c2:	f150 0000 	adcs.w	r0, r0, #0
    b3c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b3ca:	ea41 0105 	orr.w	r1, r1, r5
    b3ce:	bd30      	pop	{r4, r5, pc}
    b3d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b3d4:	4140      	adcs	r0, r0
    b3d6:	eb41 0101 	adc.w	r1, r1, r1
    b3da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b3de:	f1a4 0401 	sub.w	r4, r4, #1
    b3e2:	d1e9      	bne.n	b3b8 <__adddf3+0x10c>
    b3e4:	f091 0f00 	teq	r1, #0
    b3e8:	bf04      	itt	eq
    b3ea:	4601      	moveq	r1, r0
    b3ec:	2000      	moveq	r0, #0
    b3ee:	fab1 f381 	clz	r3, r1
    b3f2:	bf08      	it	eq
    b3f4:	3320      	addeq	r3, #32
    b3f6:	f1a3 030b 	sub.w	r3, r3, #11
    b3fa:	f1b3 0220 	subs.w	r2, r3, #32
    b3fe:	da0c      	bge.n	b41a <__adddf3+0x16e>
    b400:	320c      	adds	r2, #12
    b402:	dd08      	ble.n	b416 <__adddf3+0x16a>
    b404:	f102 0c14 	add.w	ip, r2, #20
    b408:	f1c2 020c 	rsb	r2, r2, #12
    b40c:	fa01 f00c 	lsl.w	r0, r1, ip
    b410:	fa21 f102 	lsr.w	r1, r1, r2
    b414:	e00c      	b.n	b430 <__adddf3+0x184>
    b416:	f102 0214 	add.w	r2, r2, #20
    b41a:	bfd8      	it	le
    b41c:	f1c2 0c20 	rsble	ip, r2, #32
    b420:	fa01 f102 	lsl.w	r1, r1, r2
    b424:	fa20 fc0c 	lsr.w	ip, r0, ip
    b428:	bfdc      	itt	le
    b42a:	ea41 010c 	orrle.w	r1, r1, ip
    b42e:	4090      	lslle	r0, r2
    b430:	1ae4      	subs	r4, r4, r3
    b432:	bfa2      	ittt	ge
    b434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b438:	4329      	orrge	r1, r5
    b43a:	bd30      	popge	{r4, r5, pc}
    b43c:	ea6f 0404 	mvn.w	r4, r4
    b440:	3c1f      	subs	r4, #31
    b442:	da1c      	bge.n	b47e <__adddf3+0x1d2>
    b444:	340c      	adds	r4, #12
    b446:	dc0e      	bgt.n	b466 <__adddf3+0x1ba>
    b448:	f104 0414 	add.w	r4, r4, #20
    b44c:	f1c4 0220 	rsb	r2, r4, #32
    b450:	fa20 f004 	lsr.w	r0, r0, r4
    b454:	fa01 f302 	lsl.w	r3, r1, r2
    b458:	ea40 0003 	orr.w	r0, r0, r3
    b45c:	fa21 f304 	lsr.w	r3, r1, r4
    b460:	ea45 0103 	orr.w	r1, r5, r3
    b464:	bd30      	pop	{r4, r5, pc}
    b466:	f1c4 040c 	rsb	r4, r4, #12
    b46a:	f1c4 0220 	rsb	r2, r4, #32
    b46e:	fa20 f002 	lsr.w	r0, r0, r2
    b472:	fa01 f304 	lsl.w	r3, r1, r4
    b476:	ea40 0003 	orr.w	r0, r0, r3
    b47a:	4629      	mov	r1, r5
    b47c:	bd30      	pop	{r4, r5, pc}
    b47e:	fa21 f004 	lsr.w	r0, r1, r4
    b482:	4629      	mov	r1, r5
    b484:	bd30      	pop	{r4, r5, pc}
    b486:	f094 0f00 	teq	r4, #0
    b48a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b48e:	bf06      	itte	eq
    b490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b494:	3401      	addeq	r4, #1
    b496:	3d01      	subne	r5, #1
    b498:	e74e      	b.n	b338 <__adddf3+0x8c>
    b49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b49e:	bf18      	it	ne
    b4a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b4a4:	d029      	beq.n	b4fa <__adddf3+0x24e>
    b4a6:	ea94 0f05 	teq	r4, r5
    b4aa:	bf08      	it	eq
    b4ac:	ea90 0f02 	teqeq	r0, r2
    b4b0:	d005      	beq.n	b4be <__adddf3+0x212>
    b4b2:	ea54 0c00 	orrs.w	ip, r4, r0
    b4b6:	bf04      	itt	eq
    b4b8:	4619      	moveq	r1, r3
    b4ba:	4610      	moveq	r0, r2
    b4bc:	bd30      	pop	{r4, r5, pc}
    b4be:	ea91 0f03 	teq	r1, r3
    b4c2:	bf1e      	ittt	ne
    b4c4:	2100      	movne	r1, #0
    b4c6:	2000      	movne	r0, #0
    b4c8:	bd30      	popne	{r4, r5, pc}
    b4ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b4ce:	d105      	bne.n	b4dc <__adddf3+0x230>
    b4d0:	0040      	lsls	r0, r0, #1
    b4d2:	4149      	adcs	r1, r1
    b4d4:	bf28      	it	cs
    b4d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b4da:	bd30      	pop	{r4, r5, pc}
    b4dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b4e0:	bf3c      	itt	cc
    b4e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b4e6:	bd30      	popcc	{r4, r5, pc}
    b4e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b4ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b4f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b4f4:	f04f 0000 	mov.w	r0, #0
    b4f8:	bd30      	pop	{r4, r5, pc}
    b4fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b4fe:	bf1a      	itte	ne
    b500:	4619      	movne	r1, r3
    b502:	4610      	movne	r0, r2
    b504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b508:	bf1c      	itt	ne
    b50a:	460b      	movne	r3, r1
    b50c:	4602      	movne	r2, r0
    b50e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b512:	bf06      	itte	eq
    b514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b518:	ea91 0f03 	teqeq	r1, r3
    b51c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b520:	bd30      	pop	{r4, r5, pc}
    b522:	bf00      	nop

0000b524 <__aeabi_ui2d>:
    b524:	f090 0f00 	teq	r0, #0
    b528:	bf04      	itt	eq
    b52a:	2100      	moveq	r1, #0
    b52c:	4770      	bxeq	lr
    b52e:	b530      	push	{r4, r5, lr}
    b530:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b534:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b538:	f04f 0500 	mov.w	r5, #0
    b53c:	f04f 0100 	mov.w	r1, #0
    b540:	e750      	b.n	b3e4 <__adddf3+0x138>
    b542:	bf00      	nop

0000b544 <__aeabi_i2d>:
    b544:	f090 0f00 	teq	r0, #0
    b548:	bf04      	itt	eq
    b54a:	2100      	moveq	r1, #0
    b54c:	4770      	bxeq	lr
    b54e:	b530      	push	{r4, r5, lr}
    b550:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b554:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b55c:	bf48      	it	mi
    b55e:	4240      	negmi	r0, r0
    b560:	f04f 0100 	mov.w	r1, #0
    b564:	e73e      	b.n	b3e4 <__adddf3+0x138>
    b566:	bf00      	nop

0000b568 <__aeabi_f2d>:
    b568:	0042      	lsls	r2, r0, #1
    b56a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b56e:	ea4f 0131 	mov.w	r1, r1, rrx
    b572:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b576:	bf1f      	itttt	ne
    b578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b57c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b584:	4770      	bxne	lr
    b586:	f092 0f00 	teq	r2, #0
    b58a:	bf14      	ite	ne
    b58c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b590:	4770      	bxeq	lr
    b592:	b530      	push	{r4, r5, lr}
    b594:	f44f 7460 	mov.w	r4, #896	; 0x380
    b598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b59c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b5a0:	e720      	b.n	b3e4 <__adddf3+0x138>
    b5a2:	bf00      	nop

0000b5a4 <__aeabi_ul2d>:
    b5a4:	ea50 0201 	orrs.w	r2, r0, r1
    b5a8:	bf08      	it	eq
    b5aa:	4770      	bxeq	lr
    b5ac:	b530      	push	{r4, r5, lr}
    b5ae:	f04f 0500 	mov.w	r5, #0
    b5b2:	e00a      	b.n	b5ca <__aeabi_l2d+0x16>

0000b5b4 <__aeabi_l2d>:
    b5b4:	ea50 0201 	orrs.w	r2, r0, r1
    b5b8:	bf08      	it	eq
    b5ba:	4770      	bxeq	lr
    b5bc:	b530      	push	{r4, r5, lr}
    b5be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b5c2:	d502      	bpl.n	b5ca <__aeabi_l2d+0x16>
    b5c4:	4240      	negs	r0, r0
    b5c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b5ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b5ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b5d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b5d6:	f43f aedc 	beq.w	b392 <__adddf3+0xe6>
    b5da:	f04f 0203 	mov.w	r2, #3
    b5de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b5e2:	bf18      	it	ne
    b5e4:	3203      	addne	r2, #3
    b5e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b5ea:	bf18      	it	ne
    b5ec:	3203      	addne	r2, #3
    b5ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b5f2:	f1c2 0320 	rsb	r3, r2, #32
    b5f6:	fa00 fc03 	lsl.w	ip, r0, r3
    b5fa:	fa20 f002 	lsr.w	r0, r0, r2
    b5fe:	fa01 fe03 	lsl.w	lr, r1, r3
    b602:	ea40 000e 	orr.w	r0, r0, lr
    b606:	fa21 f102 	lsr.w	r1, r1, r2
    b60a:	4414      	add	r4, r2
    b60c:	e6c1      	b.n	b392 <__adddf3+0xe6>
    b60e:	bf00      	nop

0000b610 <__aeabi_dmul>:
    b610:	b570      	push	{r4, r5, r6, lr}
    b612:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b61a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b61e:	bf1d      	ittte	ne
    b620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b624:	ea94 0f0c 	teqne	r4, ip
    b628:	ea95 0f0c 	teqne	r5, ip
    b62c:	f000 f8de 	bleq	b7ec <__aeabi_dmul+0x1dc>
    b630:	442c      	add	r4, r5
    b632:	ea81 0603 	eor.w	r6, r1, r3
    b636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b63a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b63e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b642:	bf18      	it	ne
    b644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b64c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b650:	d038      	beq.n	b6c4 <__aeabi_dmul+0xb4>
    b652:	fba0 ce02 	umull	ip, lr, r0, r2
    b656:	f04f 0500 	mov.w	r5, #0
    b65a:	fbe1 e502 	umlal	lr, r5, r1, r2
    b65e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b662:	fbe0 e503 	umlal	lr, r5, r0, r3
    b666:	f04f 0600 	mov.w	r6, #0
    b66a:	fbe1 5603 	umlal	r5, r6, r1, r3
    b66e:	f09c 0f00 	teq	ip, #0
    b672:	bf18      	it	ne
    b674:	f04e 0e01 	orrne.w	lr, lr, #1
    b678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b67c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b684:	d204      	bcs.n	b690 <__aeabi_dmul+0x80>
    b686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b68a:	416d      	adcs	r5, r5
    b68c:	eb46 0606 	adc.w	r6, r6, r6
    b690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b69c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b6a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b6a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b6a8:	bf88      	it	hi
    b6aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b6ae:	d81e      	bhi.n	b6ee <__aeabi_dmul+0xde>
    b6b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b6b4:	bf08      	it	eq
    b6b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b6ba:	f150 0000 	adcs.w	r0, r0, #0
    b6be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b6c2:	bd70      	pop	{r4, r5, r6, pc}
    b6c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b6c8:	ea46 0101 	orr.w	r1, r6, r1
    b6cc:	ea40 0002 	orr.w	r0, r0, r2
    b6d0:	ea81 0103 	eor.w	r1, r1, r3
    b6d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b6d8:	bfc2      	ittt	gt
    b6da:	ebd4 050c 	rsbsgt	r5, r4, ip
    b6de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b6e2:	bd70      	popgt	{r4, r5, r6, pc}
    b6e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b6e8:	f04f 0e00 	mov.w	lr, #0
    b6ec:	3c01      	subs	r4, #1
    b6ee:	f300 80ab 	bgt.w	b848 <__aeabi_dmul+0x238>
    b6f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b6f6:	bfde      	ittt	le
    b6f8:	2000      	movle	r0, #0
    b6fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b6fe:	bd70      	pople	{r4, r5, r6, pc}
    b700:	f1c4 0400 	rsb	r4, r4, #0
    b704:	3c20      	subs	r4, #32
    b706:	da35      	bge.n	b774 <__aeabi_dmul+0x164>
    b708:	340c      	adds	r4, #12
    b70a:	dc1b      	bgt.n	b744 <__aeabi_dmul+0x134>
    b70c:	f104 0414 	add.w	r4, r4, #20
    b710:	f1c4 0520 	rsb	r5, r4, #32
    b714:	fa00 f305 	lsl.w	r3, r0, r5
    b718:	fa20 f004 	lsr.w	r0, r0, r4
    b71c:	fa01 f205 	lsl.w	r2, r1, r5
    b720:	ea40 0002 	orr.w	r0, r0, r2
    b724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b72c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b730:	fa21 f604 	lsr.w	r6, r1, r4
    b734:	eb42 0106 	adc.w	r1, r2, r6
    b738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b73c:	bf08      	it	eq
    b73e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b742:	bd70      	pop	{r4, r5, r6, pc}
    b744:	f1c4 040c 	rsb	r4, r4, #12
    b748:	f1c4 0520 	rsb	r5, r4, #32
    b74c:	fa00 f304 	lsl.w	r3, r0, r4
    b750:	fa20 f005 	lsr.w	r0, r0, r5
    b754:	fa01 f204 	lsl.w	r2, r1, r4
    b758:	ea40 0002 	orr.w	r0, r0, r2
    b75c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b764:	f141 0100 	adc.w	r1, r1, #0
    b768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b76c:	bf08      	it	eq
    b76e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b772:	bd70      	pop	{r4, r5, r6, pc}
    b774:	f1c4 0520 	rsb	r5, r4, #32
    b778:	fa00 f205 	lsl.w	r2, r0, r5
    b77c:	ea4e 0e02 	orr.w	lr, lr, r2
    b780:	fa20 f304 	lsr.w	r3, r0, r4
    b784:	fa01 f205 	lsl.w	r2, r1, r5
    b788:	ea43 0302 	orr.w	r3, r3, r2
    b78c:	fa21 f004 	lsr.w	r0, r1, r4
    b790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b794:	fa21 f204 	lsr.w	r2, r1, r4
    b798:	ea20 0002 	bic.w	r0, r0, r2
    b79c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b7a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b7a4:	bf08      	it	eq
    b7a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b7aa:	bd70      	pop	{r4, r5, r6, pc}
    b7ac:	f094 0f00 	teq	r4, #0
    b7b0:	d10f      	bne.n	b7d2 <__aeabi_dmul+0x1c2>
    b7b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b7b6:	0040      	lsls	r0, r0, #1
    b7b8:	eb41 0101 	adc.w	r1, r1, r1
    b7bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b7c0:	bf08      	it	eq
    b7c2:	3c01      	subeq	r4, #1
    b7c4:	d0f7      	beq.n	b7b6 <__aeabi_dmul+0x1a6>
    b7c6:	ea41 0106 	orr.w	r1, r1, r6
    b7ca:	f095 0f00 	teq	r5, #0
    b7ce:	bf18      	it	ne
    b7d0:	4770      	bxne	lr
    b7d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b7d6:	0052      	lsls	r2, r2, #1
    b7d8:	eb43 0303 	adc.w	r3, r3, r3
    b7dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b7e0:	bf08      	it	eq
    b7e2:	3d01      	subeq	r5, #1
    b7e4:	d0f7      	beq.n	b7d6 <__aeabi_dmul+0x1c6>
    b7e6:	ea43 0306 	orr.w	r3, r3, r6
    b7ea:	4770      	bx	lr
    b7ec:	ea94 0f0c 	teq	r4, ip
    b7f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b7f4:	bf18      	it	ne
    b7f6:	ea95 0f0c 	teqne	r5, ip
    b7fa:	d00c      	beq.n	b816 <__aeabi_dmul+0x206>
    b7fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b800:	bf18      	it	ne
    b802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b806:	d1d1      	bne.n	b7ac <__aeabi_dmul+0x19c>
    b808:	ea81 0103 	eor.w	r1, r1, r3
    b80c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b810:	f04f 0000 	mov.w	r0, #0
    b814:	bd70      	pop	{r4, r5, r6, pc}
    b816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b81a:	bf06      	itte	eq
    b81c:	4610      	moveq	r0, r2
    b81e:	4619      	moveq	r1, r3
    b820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b824:	d019      	beq.n	b85a <__aeabi_dmul+0x24a>
    b826:	ea94 0f0c 	teq	r4, ip
    b82a:	d102      	bne.n	b832 <__aeabi_dmul+0x222>
    b82c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b830:	d113      	bne.n	b85a <__aeabi_dmul+0x24a>
    b832:	ea95 0f0c 	teq	r5, ip
    b836:	d105      	bne.n	b844 <__aeabi_dmul+0x234>
    b838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b83c:	bf1c      	itt	ne
    b83e:	4610      	movne	r0, r2
    b840:	4619      	movne	r1, r3
    b842:	d10a      	bne.n	b85a <__aeabi_dmul+0x24a>
    b844:	ea81 0103 	eor.w	r1, r1, r3
    b848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b84c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b854:	f04f 0000 	mov.w	r0, #0
    b858:	bd70      	pop	{r4, r5, r6, pc}
    b85a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b85e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b862:	bd70      	pop	{r4, r5, r6, pc}

0000b864 <__aeabi_ddiv>:
    b864:	b570      	push	{r4, r5, r6, lr}
    b866:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b86a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b86e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b872:	bf1d      	ittte	ne
    b874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b878:	ea94 0f0c 	teqne	r4, ip
    b87c:	ea95 0f0c 	teqne	r5, ip
    b880:	f000 f8a7 	bleq	b9d2 <__aeabi_ddiv+0x16e>
    b884:	eba4 0405 	sub.w	r4, r4, r5
    b888:	ea81 0e03 	eor.w	lr, r1, r3
    b88c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b890:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b894:	f000 8088 	beq.w	b9a8 <__aeabi_ddiv+0x144>
    b898:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b89c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b8a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b8a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b8a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b8ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b8b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b8b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b8b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b8bc:	429d      	cmp	r5, r3
    b8be:	bf08      	it	eq
    b8c0:	4296      	cmpeq	r6, r2
    b8c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b8c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b8ca:	d202      	bcs.n	b8d2 <__aeabi_ddiv+0x6e>
    b8cc:	085b      	lsrs	r3, r3, #1
    b8ce:	ea4f 0232 	mov.w	r2, r2, rrx
    b8d2:	1ab6      	subs	r6, r6, r2
    b8d4:	eb65 0503 	sbc.w	r5, r5, r3
    b8d8:	085b      	lsrs	r3, r3, #1
    b8da:	ea4f 0232 	mov.w	r2, r2, rrx
    b8de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b8e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b8e6:	ebb6 0e02 	subs.w	lr, r6, r2
    b8ea:	eb75 0e03 	sbcs.w	lr, r5, r3
    b8ee:	bf22      	ittt	cs
    b8f0:	1ab6      	subcs	r6, r6, r2
    b8f2:	4675      	movcs	r5, lr
    b8f4:	ea40 000c 	orrcs.w	r0, r0, ip
    b8f8:	085b      	lsrs	r3, r3, #1
    b8fa:	ea4f 0232 	mov.w	r2, r2, rrx
    b8fe:	ebb6 0e02 	subs.w	lr, r6, r2
    b902:	eb75 0e03 	sbcs.w	lr, r5, r3
    b906:	bf22      	ittt	cs
    b908:	1ab6      	subcs	r6, r6, r2
    b90a:	4675      	movcs	r5, lr
    b90c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b910:	085b      	lsrs	r3, r3, #1
    b912:	ea4f 0232 	mov.w	r2, r2, rrx
    b916:	ebb6 0e02 	subs.w	lr, r6, r2
    b91a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b91e:	bf22      	ittt	cs
    b920:	1ab6      	subcs	r6, r6, r2
    b922:	4675      	movcs	r5, lr
    b924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b928:	085b      	lsrs	r3, r3, #1
    b92a:	ea4f 0232 	mov.w	r2, r2, rrx
    b92e:	ebb6 0e02 	subs.w	lr, r6, r2
    b932:	eb75 0e03 	sbcs.w	lr, r5, r3
    b936:	bf22      	ittt	cs
    b938:	1ab6      	subcs	r6, r6, r2
    b93a:	4675      	movcs	r5, lr
    b93c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b940:	ea55 0e06 	orrs.w	lr, r5, r6
    b944:	d018      	beq.n	b978 <__aeabi_ddiv+0x114>
    b946:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b94a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b94e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b95a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b95e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b962:	d1c0      	bne.n	b8e6 <__aeabi_ddiv+0x82>
    b964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b968:	d10b      	bne.n	b982 <__aeabi_ddiv+0x11e>
    b96a:	ea41 0100 	orr.w	r1, r1, r0
    b96e:	f04f 0000 	mov.w	r0, #0
    b972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b976:	e7b6      	b.n	b8e6 <__aeabi_ddiv+0x82>
    b978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b97c:	bf04      	itt	eq
    b97e:	4301      	orreq	r1, r0
    b980:	2000      	moveq	r0, #0
    b982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b986:	bf88      	it	hi
    b988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b98c:	f63f aeaf 	bhi.w	b6ee <__aeabi_dmul+0xde>
    b990:	ebb5 0c03 	subs.w	ip, r5, r3
    b994:	bf04      	itt	eq
    b996:	ebb6 0c02 	subseq.w	ip, r6, r2
    b99a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b99e:	f150 0000 	adcs.w	r0, r0, #0
    b9a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b9a6:	bd70      	pop	{r4, r5, r6, pc}
    b9a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b9ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b9b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b9b4:	bfc2      	ittt	gt
    b9b6:	ebd4 050c 	rsbsgt	r5, r4, ip
    b9ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b9be:	bd70      	popgt	{r4, r5, r6, pc}
    b9c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b9c4:	f04f 0e00 	mov.w	lr, #0
    b9c8:	3c01      	subs	r4, #1
    b9ca:	e690      	b.n	b6ee <__aeabi_dmul+0xde>
    b9cc:	ea45 0e06 	orr.w	lr, r5, r6
    b9d0:	e68d      	b.n	b6ee <__aeabi_dmul+0xde>
    b9d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b9d6:	ea94 0f0c 	teq	r4, ip
    b9da:	bf08      	it	eq
    b9dc:	ea95 0f0c 	teqeq	r5, ip
    b9e0:	f43f af3b 	beq.w	b85a <__aeabi_dmul+0x24a>
    b9e4:	ea94 0f0c 	teq	r4, ip
    b9e8:	d10a      	bne.n	ba00 <__aeabi_ddiv+0x19c>
    b9ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b9ee:	f47f af34 	bne.w	b85a <__aeabi_dmul+0x24a>
    b9f2:	ea95 0f0c 	teq	r5, ip
    b9f6:	f47f af25 	bne.w	b844 <__aeabi_dmul+0x234>
    b9fa:	4610      	mov	r0, r2
    b9fc:	4619      	mov	r1, r3
    b9fe:	e72c      	b.n	b85a <__aeabi_dmul+0x24a>
    ba00:	ea95 0f0c 	teq	r5, ip
    ba04:	d106      	bne.n	ba14 <__aeabi_ddiv+0x1b0>
    ba06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ba0a:	f43f aefd 	beq.w	b808 <__aeabi_dmul+0x1f8>
    ba0e:	4610      	mov	r0, r2
    ba10:	4619      	mov	r1, r3
    ba12:	e722      	b.n	b85a <__aeabi_dmul+0x24a>
    ba14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ba18:	bf18      	it	ne
    ba1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ba1e:	f47f aec5 	bne.w	b7ac <__aeabi_dmul+0x19c>
    ba22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ba26:	f47f af0d 	bne.w	b844 <__aeabi_dmul+0x234>
    ba2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ba2e:	f47f aeeb 	bne.w	b808 <__aeabi_dmul+0x1f8>
    ba32:	e712      	b.n	b85a <__aeabi_dmul+0x24a>

0000ba34 <__aeabi_d2uiz>:
    ba34:	004a      	lsls	r2, r1, #1
    ba36:	d211      	bcs.n	ba5c <__aeabi_d2uiz+0x28>
    ba38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    ba3c:	d211      	bcs.n	ba62 <__aeabi_d2uiz+0x2e>
    ba3e:	d50d      	bpl.n	ba5c <__aeabi_d2uiz+0x28>
    ba40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ba44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ba48:	d40e      	bmi.n	ba68 <__aeabi_d2uiz+0x34>
    ba4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ba4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ba52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ba56:	fa23 f002 	lsr.w	r0, r3, r2
    ba5a:	4770      	bx	lr
    ba5c:	f04f 0000 	mov.w	r0, #0
    ba60:	4770      	bx	lr
    ba62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    ba66:	d102      	bne.n	ba6e <__aeabi_d2uiz+0x3a>
    ba68:	f04f 30ff 	mov.w	r0, #4294967295
    ba6c:	4770      	bx	lr
    ba6e:	f04f 0000 	mov.w	r0, #0
    ba72:	4770      	bx	lr

0000ba74 <__libc_init_array>:
    ba74:	b570      	push	{r4, r5, r6, lr}
    ba76:	4e0d      	ldr	r6, [pc, #52]	; (baac <__libc_init_array+0x38>)
    ba78:	4c0d      	ldr	r4, [pc, #52]	; (bab0 <__libc_init_array+0x3c>)
    ba7a:	1ba4      	subs	r4, r4, r6
    ba7c:	10a4      	asrs	r4, r4, #2
    ba7e:	2500      	movs	r5, #0
    ba80:	42a5      	cmp	r5, r4
    ba82:	d109      	bne.n	ba98 <__libc_init_array+0x24>
    ba84:	4e0b      	ldr	r6, [pc, #44]	; (bab4 <__libc_init_array+0x40>)
    ba86:	4c0c      	ldr	r4, [pc, #48]	; (bab8 <__libc_init_array+0x44>)
    ba88:	f001 ff3c 	bl	d904 <_init>
    ba8c:	1ba4      	subs	r4, r4, r6
    ba8e:	10a4      	asrs	r4, r4, #2
    ba90:	2500      	movs	r5, #0
    ba92:	42a5      	cmp	r5, r4
    ba94:	d105      	bne.n	baa2 <__libc_init_array+0x2e>
    ba96:	bd70      	pop	{r4, r5, r6, pc}
    ba98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    ba9c:	4798      	blx	r3
    ba9e:	3501      	adds	r5, #1
    baa0:	e7ee      	b.n	ba80 <__libc_init_array+0xc>
    baa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    baa6:	4798      	blx	r3
    baa8:	3501      	adds	r5, #1
    baaa:	e7f2      	b.n	ba92 <__libc_init_array+0x1e>
    baac:	0000d910 	.word	0x0000d910
    bab0:	0000d910 	.word	0x0000d910
    bab4:	0000d910 	.word	0x0000d910
    bab8:	0000d914 	.word	0x0000d914

0000babc <malloc>:
    babc:	4b02      	ldr	r3, [pc, #8]	; (bac8 <malloc+0xc>)
    babe:	4601      	mov	r1, r0
    bac0:	6818      	ldr	r0, [r3, #0]
    bac2:	f000 b865 	b.w	bb90 <_malloc_r>
    bac6:	bf00      	nop
    bac8:	20000558 	.word	0x20000558

0000bacc <memcpy>:
    bacc:	b510      	push	{r4, lr}
    bace:	1e43      	subs	r3, r0, #1
    bad0:	440a      	add	r2, r1
    bad2:	4291      	cmp	r1, r2
    bad4:	d100      	bne.n	bad8 <memcpy+0xc>
    bad6:	bd10      	pop	{r4, pc}
    bad8:	f811 4b01 	ldrb.w	r4, [r1], #1
    badc:	f803 4f01 	strb.w	r4, [r3, #1]!
    bae0:	e7f7      	b.n	bad2 <memcpy+0x6>

0000bae2 <memset>:
    bae2:	4402      	add	r2, r0
    bae4:	4603      	mov	r3, r0
    bae6:	4293      	cmp	r3, r2
    bae8:	d100      	bne.n	baec <memset+0xa>
    baea:	4770      	bx	lr
    baec:	f803 1b01 	strb.w	r1, [r3], #1
    baf0:	e7f9      	b.n	bae6 <memset+0x4>
	...

0000baf4 <_free_r>:
    baf4:	b538      	push	{r3, r4, r5, lr}
    baf6:	4605      	mov	r5, r0
    baf8:	2900      	cmp	r1, #0
    bafa:	d045      	beq.n	bb88 <_free_r+0x94>
    bafc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bb00:	1f0c      	subs	r4, r1, #4
    bb02:	2b00      	cmp	r3, #0
    bb04:	bfb8      	it	lt
    bb06:	18e4      	addlt	r4, r4, r3
    bb08:	f000 fcae 	bl	c468 <__malloc_lock>
    bb0c:	4a1f      	ldr	r2, [pc, #124]	; (bb8c <_free_r+0x98>)
    bb0e:	6813      	ldr	r3, [r2, #0]
    bb10:	4610      	mov	r0, r2
    bb12:	b933      	cbnz	r3, bb22 <_free_r+0x2e>
    bb14:	6063      	str	r3, [r4, #4]
    bb16:	6014      	str	r4, [r2, #0]
    bb18:	4628      	mov	r0, r5
    bb1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bb1e:	f000 bca4 	b.w	c46a <__malloc_unlock>
    bb22:	42a3      	cmp	r3, r4
    bb24:	d90c      	bls.n	bb40 <_free_r+0x4c>
    bb26:	6821      	ldr	r1, [r4, #0]
    bb28:	1862      	adds	r2, r4, r1
    bb2a:	4293      	cmp	r3, r2
    bb2c:	bf04      	itt	eq
    bb2e:	681a      	ldreq	r2, [r3, #0]
    bb30:	685b      	ldreq	r3, [r3, #4]
    bb32:	6063      	str	r3, [r4, #4]
    bb34:	bf04      	itt	eq
    bb36:	1852      	addeq	r2, r2, r1
    bb38:	6022      	streq	r2, [r4, #0]
    bb3a:	6004      	str	r4, [r0, #0]
    bb3c:	e7ec      	b.n	bb18 <_free_r+0x24>
    bb3e:	4613      	mov	r3, r2
    bb40:	685a      	ldr	r2, [r3, #4]
    bb42:	b10a      	cbz	r2, bb48 <_free_r+0x54>
    bb44:	42a2      	cmp	r2, r4
    bb46:	d9fa      	bls.n	bb3e <_free_r+0x4a>
    bb48:	6819      	ldr	r1, [r3, #0]
    bb4a:	1858      	adds	r0, r3, r1
    bb4c:	42a0      	cmp	r0, r4
    bb4e:	d10b      	bne.n	bb68 <_free_r+0x74>
    bb50:	6820      	ldr	r0, [r4, #0]
    bb52:	4401      	add	r1, r0
    bb54:	1858      	adds	r0, r3, r1
    bb56:	4282      	cmp	r2, r0
    bb58:	6019      	str	r1, [r3, #0]
    bb5a:	d1dd      	bne.n	bb18 <_free_r+0x24>
    bb5c:	6810      	ldr	r0, [r2, #0]
    bb5e:	6852      	ldr	r2, [r2, #4]
    bb60:	605a      	str	r2, [r3, #4]
    bb62:	4401      	add	r1, r0
    bb64:	6019      	str	r1, [r3, #0]
    bb66:	e7d7      	b.n	bb18 <_free_r+0x24>
    bb68:	d902      	bls.n	bb70 <_free_r+0x7c>
    bb6a:	230c      	movs	r3, #12
    bb6c:	602b      	str	r3, [r5, #0]
    bb6e:	e7d3      	b.n	bb18 <_free_r+0x24>
    bb70:	6820      	ldr	r0, [r4, #0]
    bb72:	1821      	adds	r1, r4, r0
    bb74:	428a      	cmp	r2, r1
    bb76:	bf04      	itt	eq
    bb78:	6811      	ldreq	r1, [r2, #0]
    bb7a:	6852      	ldreq	r2, [r2, #4]
    bb7c:	6062      	str	r2, [r4, #4]
    bb7e:	bf04      	itt	eq
    bb80:	1809      	addeq	r1, r1, r0
    bb82:	6021      	streq	r1, [r4, #0]
    bb84:	605c      	str	r4, [r3, #4]
    bb86:	e7c7      	b.n	bb18 <_free_r+0x24>
    bb88:	bd38      	pop	{r3, r4, r5, pc}
    bb8a:	bf00      	nop
    bb8c:	20000f30 	.word	0x20000f30

0000bb90 <_malloc_r>:
    bb90:	b570      	push	{r4, r5, r6, lr}
    bb92:	1ccd      	adds	r5, r1, #3
    bb94:	f025 0503 	bic.w	r5, r5, #3
    bb98:	3508      	adds	r5, #8
    bb9a:	2d0c      	cmp	r5, #12
    bb9c:	bf38      	it	cc
    bb9e:	250c      	movcc	r5, #12
    bba0:	2d00      	cmp	r5, #0
    bba2:	4606      	mov	r6, r0
    bba4:	db01      	blt.n	bbaa <_malloc_r+0x1a>
    bba6:	42a9      	cmp	r1, r5
    bba8:	d903      	bls.n	bbb2 <_malloc_r+0x22>
    bbaa:	230c      	movs	r3, #12
    bbac:	6033      	str	r3, [r6, #0]
    bbae:	2000      	movs	r0, #0
    bbb0:	bd70      	pop	{r4, r5, r6, pc}
    bbb2:	f000 fc59 	bl	c468 <__malloc_lock>
    bbb6:	4a23      	ldr	r2, [pc, #140]	; (bc44 <_malloc_r+0xb4>)
    bbb8:	6814      	ldr	r4, [r2, #0]
    bbba:	4621      	mov	r1, r4
    bbbc:	b991      	cbnz	r1, bbe4 <_malloc_r+0x54>
    bbbe:	4c22      	ldr	r4, [pc, #136]	; (bc48 <_malloc_r+0xb8>)
    bbc0:	6823      	ldr	r3, [r4, #0]
    bbc2:	b91b      	cbnz	r3, bbcc <_malloc_r+0x3c>
    bbc4:	4630      	mov	r0, r6
    bbc6:	f000 f8bd 	bl	bd44 <_sbrk_r>
    bbca:	6020      	str	r0, [r4, #0]
    bbcc:	4629      	mov	r1, r5
    bbce:	4630      	mov	r0, r6
    bbd0:	f000 f8b8 	bl	bd44 <_sbrk_r>
    bbd4:	1c43      	adds	r3, r0, #1
    bbd6:	d126      	bne.n	bc26 <_malloc_r+0x96>
    bbd8:	230c      	movs	r3, #12
    bbda:	6033      	str	r3, [r6, #0]
    bbdc:	4630      	mov	r0, r6
    bbde:	f000 fc44 	bl	c46a <__malloc_unlock>
    bbe2:	e7e4      	b.n	bbae <_malloc_r+0x1e>
    bbe4:	680b      	ldr	r3, [r1, #0]
    bbe6:	1b5b      	subs	r3, r3, r5
    bbe8:	d41a      	bmi.n	bc20 <_malloc_r+0x90>
    bbea:	2b0b      	cmp	r3, #11
    bbec:	d90f      	bls.n	bc0e <_malloc_r+0x7e>
    bbee:	600b      	str	r3, [r1, #0]
    bbf0:	50cd      	str	r5, [r1, r3]
    bbf2:	18cc      	adds	r4, r1, r3
    bbf4:	4630      	mov	r0, r6
    bbf6:	f000 fc38 	bl	c46a <__malloc_unlock>
    bbfa:	f104 000b 	add.w	r0, r4, #11
    bbfe:	1d23      	adds	r3, r4, #4
    bc00:	f020 0007 	bic.w	r0, r0, #7
    bc04:	1ac3      	subs	r3, r0, r3
    bc06:	d01b      	beq.n	bc40 <_malloc_r+0xb0>
    bc08:	425a      	negs	r2, r3
    bc0a:	50e2      	str	r2, [r4, r3]
    bc0c:	bd70      	pop	{r4, r5, r6, pc}
    bc0e:	428c      	cmp	r4, r1
    bc10:	bf0d      	iteet	eq
    bc12:	6863      	ldreq	r3, [r4, #4]
    bc14:	684b      	ldrne	r3, [r1, #4]
    bc16:	6063      	strne	r3, [r4, #4]
    bc18:	6013      	streq	r3, [r2, #0]
    bc1a:	bf18      	it	ne
    bc1c:	460c      	movne	r4, r1
    bc1e:	e7e9      	b.n	bbf4 <_malloc_r+0x64>
    bc20:	460c      	mov	r4, r1
    bc22:	6849      	ldr	r1, [r1, #4]
    bc24:	e7ca      	b.n	bbbc <_malloc_r+0x2c>
    bc26:	1cc4      	adds	r4, r0, #3
    bc28:	f024 0403 	bic.w	r4, r4, #3
    bc2c:	42a0      	cmp	r0, r4
    bc2e:	d005      	beq.n	bc3c <_malloc_r+0xac>
    bc30:	1a21      	subs	r1, r4, r0
    bc32:	4630      	mov	r0, r6
    bc34:	f000 f886 	bl	bd44 <_sbrk_r>
    bc38:	3001      	adds	r0, #1
    bc3a:	d0cd      	beq.n	bbd8 <_malloc_r+0x48>
    bc3c:	6025      	str	r5, [r4, #0]
    bc3e:	e7d9      	b.n	bbf4 <_malloc_r+0x64>
    bc40:	bd70      	pop	{r4, r5, r6, pc}
    bc42:	bf00      	nop
    bc44:	20000f30 	.word	0x20000f30
    bc48:	20000f34 	.word	0x20000f34

0000bc4c <iprintf>:
    bc4c:	b40f      	push	{r0, r1, r2, r3}
    bc4e:	4b0a      	ldr	r3, [pc, #40]	; (bc78 <iprintf+0x2c>)
    bc50:	b513      	push	{r0, r1, r4, lr}
    bc52:	681c      	ldr	r4, [r3, #0]
    bc54:	b124      	cbz	r4, bc60 <iprintf+0x14>
    bc56:	69a3      	ldr	r3, [r4, #24]
    bc58:	b913      	cbnz	r3, bc60 <iprintf+0x14>
    bc5a:	4620      	mov	r0, r4
    bc5c:	f000 fb16 	bl	c28c <__sinit>
    bc60:	ab05      	add	r3, sp, #20
    bc62:	9a04      	ldr	r2, [sp, #16]
    bc64:	68a1      	ldr	r1, [r4, #8]
    bc66:	9301      	str	r3, [sp, #4]
    bc68:	4620      	mov	r0, r4
    bc6a:	f000 fd77 	bl	c75c <_vfiprintf_r>
    bc6e:	b002      	add	sp, #8
    bc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc74:	b004      	add	sp, #16
    bc76:	4770      	bx	lr
    bc78:	20000558 	.word	0x20000558

0000bc7c <_puts_r>:
    bc7c:	b570      	push	{r4, r5, r6, lr}
    bc7e:	460e      	mov	r6, r1
    bc80:	4605      	mov	r5, r0
    bc82:	b118      	cbz	r0, bc8c <_puts_r+0x10>
    bc84:	6983      	ldr	r3, [r0, #24]
    bc86:	b90b      	cbnz	r3, bc8c <_puts_r+0x10>
    bc88:	f000 fb00 	bl	c28c <__sinit>
    bc8c:	69ab      	ldr	r3, [r5, #24]
    bc8e:	68ac      	ldr	r4, [r5, #8]
    bc90:	b913      	cbnz	r3, bc98 <_puts_r+0x1c>
    bc92:	4628      	mov	r0, r5
    bc94:	f000 fafa 	bl	c28c <__sinit>
    bc98:	4b23      	ldr	r3, [pc, #140]	; (bd28 <_puts_r+0xac>)
    bc9a:	429c      	cmp	r4, r3
    bc9c:	d117      	bne.n	bcce <_puts_r+0x52>
    bc9e:	686c      	ldr	r4, [r5, #4]
    bca0:	89a3      	ldrh	r3, [r4, #12]
    bca2:	071b      	lsls	r3, r3, #28
    bca4:	d51d      	bpl.n	bce2 <_puts_r+0x66>
    bca6:	6923      	ldr	r3, [r4, #16]
    bca8:	b1db      	cbz	r3, bce2 <_puts_r+0x66>
    bcaa:	3e01      	subs	r6, #1
    bcac:	68a3      	ldr	r3, [r4, #8]
    bcae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    bcb2:	3b01      	subs	r3, #1
    bcb4:	60a3      	str	r3, [r4, #8]
    bcb6:	b9e9      	cbnz	r1, bcf4 <_puts_r+0x78>
    bcb8:	2b00      	cmp	r3, #0
    bcba:	da2e      	bge.n	bd1a <_puts_r+0x9e>
    bcbc:	4622      	mov	r2, r4
    bcbe:	210a      	movs	r1, #10
    bcc0:	4628      	mov	r0, r5
    bcc2:	f000 f931 	bl	bf28 <__swbuf_r>
    bcc6:	3001      	adds	r0, #1
    bcc8:	d011      	beq.n	bcee <_puts_r+0x72>
    bcca:	200a      	movs	r0, #10
    bccc:	bd70      	pop	{r4, r5, r6, pc}
    bcce:	4b17      	ldr	r3, [pc, #92]	; (bd2c <_puts_r+0xb0>)
    bcd0:	429c      	cmp	r4, r3
    bcd2:	d101      	bne.n	bcd8 <_puts_r+0x5c>
    bcd4:	68ac      	ldr	r4, [r5, #8]
    bcd6:	e7e3      	b.n	bca0 <_puts_r+0x24>
    bcd8:	4b15      	ldr	r3, [pc, #84]	; (bd30 <_puts_r+0xb4>)
    bcda:	429c      	cmp	r4, r3
    bcdc:	bf08      	it	eq
    bcde:	68ec      	ldreq	r4, [r5, #12]
    bce0:	e7de      	b.n	bca0 <_puts_r+0x24>
    bce2:	4621      	mov	r1, r4
    bce4:	4628      	mov	r0, r5
    bce6:	f000 f971 	bl	bfcc <__swsetup_r>
    bcea:	2800      	cmp	r0, #0
    bcec:	d0dd      	beq.n	bcaa <_puts_r+0x2e>
    bcee:	f04f 30ff 	mov.w	r0, #4294967295
    bcf2:	bd70      	pop	{r4, r5, r6, pc}
    bcf4:	2b00      	cmp	r3, #0
    bcf6:	da04      	bge.n	bd02 <_puts_r+0x86>
    bcf8:	69a2      	ldr	r2, [r4, #24]
    bcfa:	4293      	cmp	r3, r2
    bcfc:	db06      	blt.n	bd0c <_puts_r+0x90>
    bcfe:	290a      	cmp	r1, #10
    bd00:	d004      	beq.n	bd0c <_puts_r+0x90>
    bd02:	6823      	ldr	r3, [r4, #0]
    bd04:	1c5a      	adds	r2, r3, #1
    bd06:	6022      	str	r2, [r4, #0]
    bd08:	7019      	strb	r1, [r3, #0]
    bd0a:	e7cf      	b.n	bcac <_puts_r+0x30>
    bd0c:	4622      	mov	r2, r4
    bd0e:	4628      	mov	r0, r5
    bd10:	f000 f90a 	bl	bf28 <__swbuf_r>
    bd14:	3001      	adds	r0, #1
    bd16:	d1c9      	bne.n	bcac <_puts_r+0x30>
    bd18:	e7e9      	b.n	bcee <_puts_r+0x72>
    bd1a:	6823      	ldr	r3, [r4, #0]
    bd1c:	200a      	movs	r0, #10
    bd1e:	1c5a      	adds	r2, r3, #1
    bd20:	6022      	str	r2, [r4, #0]
    bd22:	7018      	strb	r0, [r3, #0]
    bd24:	bd70      	pop	{r4, r5, r6, pc}
    bd26:	bf00      	nop
    bd28:	0000d890 	.word	0x0000d890
    bd2c:	0000d8b0 	.word	0x0000d8b0
    bd30:	0000d870 	.word	0x0000d870

0000bd34 <puts>:
    bd34:	4b02      	ldr	r3, [pc, #8]	; (bd40 <puts+0xc>)
    bd36:	4601      	mov	r1, r0
    bd38:	6818      	ldr	r0, [r3, #0]
    bd3a:	f7ff bf9f 	b.w	bc7c <_puts_r>
    bd3e:	bf00      	nop
    bd40:	20000558 	.word	0x20000558

0000bd44 <_sbrk_r>:
    bd44:	b538      	push	{r3, r4, r5, lr}
    bd46:	4c06      	ldr	r4, [pc, #24]	; (bd60 <_sbrk_r+0x1c>)
    bd48:	2300      	movs	r3, #0
    bd4a:	4605      	mov	r5, r0
    bd4c:	4608      	mov	r0, r1
    bd4e:	6023      	str	r3, [r4, #0]
    bd50:	f7f9 feb6 	bl	5ac0 <_sbrk>
    bd54:	1c43      	adds	r3, r0, #1
    bd56:	d102      	bne.n	bd5e <_sbrk_r+0x1a>
    bd58:	6823      	ldr	r3, [r4, #0]
    bd5a:	b103      	cbz	r3, bd5e <_sbrk_r+0x1a>
    bd5c:	602b      	str	r3, [r5, #0]
    bd5e:	bd38      	pop	{r3, r4, r5, pc}
    bd60:	20003d98 	.word	0x20003d98

0000bd64 <setbuf>:
    bd64:	2900      	cmp	r1, #0
    bd66:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bd6a:	bf0c      	ite	eq
    bd6c:	2202      	moveq	r2, #2
    bd6e:	2200      	movne	r2, #0
    bd70:	f000 b800 	b.w	bd74 <setvbuf>

0000bd74 <setvbuf>:
    bd74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bd78:	461d      	mov	r5, r3
    bd7a:	4b51      	ldr	r3, [pc, #324]	; (bec0 <setvbuf+0x14c>)
    bd7c:	681e      	ldr	r6, [r3, #0]
    bd7e:	4604      	mov	r4, r0
    bd80:	460f      	mov	r7, r1
    bd82:	4690      	mov	r8, r2
    bd84:	b126      	cbz	r6, bd90 <setvbuf+0x1c>
    bd86:	69b3      	ldr	r3, [r6, #24]
    bd88:	b913      	cbnz	r3, bd90 <setvbuf+0x1c>
    bd8a:	4630      	mov	r0, r6
    bd8c:	f000 fa7e 	bl	c28c <__sinit>
    bd90:	4b4c      	ldr	r3, [pc, #304]	; (bec4 <setvbuf+0x150>)
    bd92:	429c      	cmp	r4, r3
    bd94:	d152      	bne.n	be3c <setvbuf+0xc8>
    bd96:	6874      	ldr	r4, [r6, #4]
    bd98:	f1b8 0f02 	cmp.w	r8, #2
    bd9c:	d006      	beq.n	bdac <setvbuf+0x38>
    bd9e:	f1b8 0f01 	cmp.w	r8, #1
    bda2:	f200 8089 	bhi.w	beb8 <setvbuf+0x144>
    bda6:	2d00      	cmp	r5, #0
    bda8:	f2c0 8086 	blt.w	beb8 <setvbuf+0x144>
    bdac:	4621      	mov	r1, r4
    bdae:	4630      	mov	r0, r6
    bdb0:	f000 fa02 	bl	c1b8 <_fflush_r>
    bdb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bdb6:	b141      	cbz	r1, bdca <setvbuf+0x56>
    bdb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bdbc:	4299      	cmp	r1, r3
    bdbe:	d002      	beq.n	bdc6 <setvbuf+0x52>
    bdc0:	4630      	mov	r0, r6
    bdc2:	f7ff fe97 	bl	baf4 <_free_r>
    bdc6:	2300      	movs	r3, #0
    bdc8:	6363      	str	r3, [r4, #52]	; 0x34
    bdca:	2300      	movs	r3, #0
    bdcc:	61a3      	str	r3, [r4, #24]
    bdce:	6063      	str	r3, [r4, #4]
    bdd0:	89a3      	ldrh	r3, [r4, #12]
    bdd2:	061b      	lsls	r3, r3, #24
    bdd4:	d503      	bpl.n	bdde <setvbuf+0x6a>
    bdd6:	6921      	ldr	r1, [r4, #16]
    bdd8:	4630      	mov	r0, r6
    bdda:	f7ff fe8b 	bl	baf4 <_free_r>
    bdde:	89a3      	ldrh	r3, [r4, #12]
    bde0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    bde4:	f023 0303 	bic.w	r3, r3, #3
    bde8:	f1b8 0f02 	cmp.w	r8, #2
    bdec:	81a3      	strh	r3, [r4, #12]
    bdee:	d05d      	beq.n	beac <setvbuf+0x138>
    bdf0:	ab01      	add	r3, sp, #4
    bdf2:	466a      	mov	r2, sp
    bdf4:	4621      	mov	r1, r4
    bdf6:	4630      	mov	r0, r6
    bdf8:	f000 fad2 	bl	c3a0 <__swhatbuf_r>
    bdfc:	89a3      	ldrh	r3, [r4, #12]
    bdfe:	4318      	orrs	r0, r3
    be00:	81a0      	strh	r0, [r4, #12]
    be02:	bb2d      	cbnz	r5, be50 <setvbuf+0xdc>
    be04:	9d00      	ldr	r5, [sp, #0]
    be06:	4628      	mov	r0, r5
    be08:	f7ff fe58 	bl	babc <malloc>
    be0c:	4607      	mov	r7, r0
    be0e:	2800      	cmp	r0, #0
    be10:	d14e      	bne.n	beb0 <setvbuf+0x13c>
    be12:	f8dd 9000 	ldr.w	r9, [sp]
    be16:	45a9      	cmp	r9, r5
    be18:	d13c      	bne.n	be94 <setvbuf+0x120>
    be1a:	f04f 30ff 	mov.w	r0, #4294967295
    be1e:	89a3      	ldrh	r3, [r4, #12]
    be20:	f043 0302 	orr.w	r3, r3, #2
    be24:	81a3      	strh	r3, [r4, #12]
    be26:	2300      	movs	r3, #0
    be28:	60a3      	str	r3, [r4, #8]
    be2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
    be2e:	6023      	str	r3, [r4, #0]
    be30:	6123      	str	r3, [r4, #16]
    be32:	2301      	movs	r3, #1
    be34:	6163      	str	r3, [r4, #20]
    be36:	b003      	add	sp, #12
    be38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    be3c:	4b22      	ldr	r3, [pc, #136]	; (bec8 <setvbuf+0x154>)
    be3e:	429c      	cmp	r4, r3
    be40:	d101      	bne.n	be46 <setvbuf+0xd2>
    be42:	68b4      	ldr	r4, [r6, #8]
    be44:	e7a8      	b.n	bd98 <setvbuf+0x24>
    be46:	4b21      	ldr	r3, [pc, #132]	; (becc <setvbuf+0x158>)
    be48:	429c      	cmp	r4, r3
    be4a:	bf08      	it	eq
    be4c:	68f4      	ldreq	r4, [r6, #12]
    be4e:	e7a3      	b.n	bd98 <setvbuf+0x24>
    be50:	2f00      	cmp	r7, #0
    be52:	d0d8      	beq.n	be06 <setvbuf+0x92>
    be54:	69b3      	ldr	r3, [r6, #24]
    be56:	b913      	cbnz	r3, be5e <setvbuf+0xea>
    be58:	4630      	mov	r0, r6
    be5a:	f000 fa17 	bl	c28c <__sinit>
    be5e:	f1b8 0f01 	cmp.w	r8, #1
    be62:	bf08      	it	eq
    be64:	89a3      	ldrheq	r3, [r4, #12]
    be66:	6027      	str	r7, [r4, #0]
    be68:	bf04      	itt	eq
    be6a:	f043 0301 	orreq.w	r3, r3, #1
    be6e:	81a3      	strheq	r3, [r4, #12]
    be70:	89a3      	ldrh	r3, [r4, #12]
    be72:	6127      	str	r7, [r4, #16]
    be74:	f013 0008 	ands.w	r0, r3, #8
    be78:	6165      	str	r5, [r4, #20]
    be7a:	d01b      	beq.n	beb4 <setvbuf+0x140>
    be7c:	f013 0001 	ands.w	r0, r3, #1
    be80:	bf18      	it	ne
    be82:	426d      	negne	r5, r5
    be84:	f04f 0300 	mov.w	r3, #0
    be88:	bf1d      	ittte	ne
    be8a:	60a3      	strne	r3, [r4, #8]
    be8c:	61a5      	strne	r5, [r4, #24]
    be8e:	4618      	movne	r0, r3
    be90:	60a5      	streq	r5, [r4, #8]
    be92:	e7d0      	b.n	be36 <setvbuf+0xc2>
    be94:	4648      	mov	r0, r9
    be96:	f7ff fe11 	bl	babc <malloc>
    be9a:	4607      	mov	r7, r0
    be9c:	2800      	cmp	r0, #0
    be9e:	d0bc      	beq.n	be1a <setvbuf+0xa6>
    bea0:	89a3      	ldrh	r3, [r4, #12]
    bea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bea6:	81a3      	strh	r3, [r4, #12]
    bea8:	464d      	mov	r5, r9
    beaa:	e7d3      	b.n	be54 <setvbuf+0xe0>
    beac:	2000      	movs	r0, #0
    beae:	e7b6      	b.n	be1e <setvbuf+0xaa>
    beb0:	46a9      	mov	r9, r5
    beb2:	e7f5      	b.n	bea0 <setvbuf+0x12c>
    beb4:	60a0      	str	r0, [r4, #8]
    beb6:	e7be      	b.n	be36 <setvbuf+0xc2>
    beb8:	f04f 30ff 	mov.w	r0, #4294967295
    bebc:	e7bb      	b.n	be36 <setvbuf+0xc2>
    bebe:	bf00      	nop
    bec0:	20000558 	.word	0x20000558
    bec4:	0000d890 	.word	0x0000d890
    bec8:	0000d8b0 	.word	0x0000d8b0
    becc:	0000d870 	.word	0x0000d870

0000bed0 <siprintf>:
    bed0:	b40e      	push	{r1, r2, r3}
    bed2:	b500      	push	{lr}
    bed4:	b09c      	sub	sp, #112	; 0x70
    bed6:	f44f 7102 	mov.w	r1, #520	; 0x208
    beda:	ab1d      	add	r3, sp, #116	; 0x74
    bedc:	f8ad 1014 	strh.w	r1, [sp, #20]
    bee0:	9002      	str	r0, [sp, #8]
    bee2:	9006      	str	r0, [sp, #24]
    bee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bee8:	480a      	ldr	r0, [pc, #40]	; (bf14 <siprintf+0x44>)
    beea:	9104      	str	r1, [sp, #16]
    beec:	9107      	str	r1, [sp, #28]
    beee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bef2:	f853 2b04 	ldr.w	r2, [r3], #4
    bef6:	f8ad 1016 	strh.w	r1, [sp, #22]
    befa:	6800      	ldr	r0, [r0, #0]
    befc:	9301      	str	r3, [sp, #4]
    befe:	a902      	add	r1, sp, #8
    bf00:	f000 fb10 	bl	c524 <_svfiprintf_r>
    bf04:	9b02      	ldr	r3, [sp, #8]
    bf06:	2200      	movs	r2, #0
    bf08:	701a      	strb	r2, [r3, #0]
    bf0a:	b01c      	add	sp, #112	; 0x70
    bf0c:	f85d eb04 	ldr.w	lr, [sp], #4
    bf10:	b003      	add	sp, #12
    bf12:	4770      	bx	lr
    bf14:	20000558 	.word	0x20000558

0000bf18 <strlen>:
    bf18:	4603      	mov	r3, r0
    bf1a:	f813 2b01 	ldrb.w	r2, [r3], #1
    bf1e:	2a00      	cmp	r2, #0
    bf20:	d1fb      	bne.n	bf1a <strlen+0x2>
    bf22:	1a18      	subs	r0, r3, r0
    bf24:	3801      	subs	r0, #1
    bf26:	4770      	bx	lr

0000bf28 <__swbuf_r>:
    bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf2a:	460e      	mov	r6, r1
    bf2c:	4614      	mov	r4, r2
    bf2e:	4605      	mov	r5, r0
    bf30:	b118      	cbz	r0, bf3a <__swbuf_r+0x12>
    bf32:	6983      	ldr	r3, [r0, #24]
    bf34:	b90b      	cbnz	r3, bf3a <__swbuf_r+0x12>
    bf36:	f000 f9a9 	bl	c28c <__sinit>
    bf3a:	4b21      	ldr	r3, [pc, #132]	; (bfc0 <__swbuf_r+0x98>)
    bf3c:	429c      	cmp	r4, r3
    bf3e:	d12a      	bne.n	bf96 <__swbuf_r+0x6e>
    bf40:	686c      	ldr	r4, [r5, #4]
    bf42:	69a3      	ldr	r3, [r4, #24]
    bf44:	60a3      	str	r3, [r4, #8]
    bf46:	89a3      	ldrh	r3, [r4, #12]
    bf48:	071a      	lsls	r2, r3, #28
    bf4a:	d52e      	bpl.n	bfaa <__swbuf_r+0x82>
    bf4c:	6923      	ldr	r3, [r4, #16]
    bf4e:	b363      	cbz	r3, bfaa <__swbuf_r+0x82>
    bf50:	6923      	ldr	r3, [r4, #16]
    bf52:	6820      	ldr	r0, [r4, #0]
    bf54:	1ac0      	subs	r0, r0, r3
    bf56:	6963      	ldr	r3, [r4, #20]
    bf58:	b2f6      	uxtb	r6, r6
    bf5a:	4298      	cmp	r0, r3
    bf5c:	4637      	mov	r7, r6
    bf5e:	db04      	blt.n	bf6a <__swbuf_r+0x42>
    bf60:	4621      	mov	r1, r4
    bf62:	4628      	mov	r0, r5
    bf64:	f000 f928 	bl	c1b8 <_fflush_r>
    bf68:	bb28      	cbnz	r0, bfb6 <__swbuf_r+0x8e>
    bf6a:	68a3      	ldr	r3, [r4, #8]
    bf6c:	3b01      	subs	r3, #1
    bf6e:	60a3      	str	r3, [r4, #8]
    bf70:	6823      	ldr	r3, [r4, #0]
    bf72:	1c5a      	adds	r2, r3, #1
    bf74:	6022      	str	r2, [r4, #0]
    bf76:	701e      	strb	r6, [r3, #0]
    bf78:	6963      	ldr	r3, [r4, #20]
    bf7a:	3001      	adds	r0, #1
    bf7c:	4298      	cmp	r0, r3
    bf7e:	d004      	beq.n	bf8a <__swbuf_r+0x62>
    bf80:	89a3      	ldrh	r3, [r4, #12]
    bf82:	07db      	lsls	r3, r3, #31
    bf84:	d519      	bpl.n	bfba <__swbuf_r+0x92>
    bf86:	2e0a      	cmp	r6, #10
    bf88:	d117      	bne.n	bfba <__swbuf_r+0x92>
    bf8a:	4621      	mov	r1, r4
    bf8c:	4628      	mov	r0, r5
    bf8e:	f000 f913 	bl	c1b8 <_fflush_r>
    bf92:	b190      	cbz	r0, bfba <__swbuf_r+0x92>
    bf94:	e00f      	b.n	bfb6 <__swbuf_r+0x8e>
    bf96:	4b0b      	ldr	r3, [pc, #44]	; (bfc4 <__swbuf_r+0x9c>)
    bf98:	429c      	cmp	r4, r3
    bf9a:	d101      	bne.n	bfa0 <__swbuf_r+0x78>
    bf9c:	68ac      	ldr	r4, [r5, #8]
    bf9e:	e7d0      	b.n	bf42 <__swbuf_r+0x1a>
    bfa0:	4b09      	ldr	r3, [pc, #36]	; (bfc8 <__swbuf_r+0xa0>)
    bfa2:	429c      	cmp	r4, r3
    bfa4:	bf08      	it	eq
    bfa6:	68ec      	ldreq	r4, [r5, #12]
    bfa8:	e7cb      	b.n	bf42 <__swbuf_r+0x1a>
    bfaa:	4621      	mov	r1, r4
    bfac:	4628      	mov	r0, r5
    bfae:	f000 f80d 	bl	bfcc <__swsetup_r>
    bfb2:	2800      	cmp	r0, #0
    bfb4:	d0cc      	beq.n	bf50 <__swbuf_r+0x28>
    bfb6:	f04f 37ff 	mov.w	r7, #4294967295
    bfba:	4638      	mov	r0, r7
    bfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfbe:	bf00      	nop
    bfc0:	0000d890 	.word	0x0000d890
    bfc4:	0000d8b0 	.word	0x0000d8b0
    bfc8:	0000d870 	.word	0x0000d870

0000bfcc <__swsetup_r>:
    bfcc:	4b32      	ldr	r3, [pc, #200]	; (c098 <__swsetup_r+0xcc>)
    bfce:	b570      	push	{r4, r5, r6, lr}
    bfd0:	681d      	ldr	r5, [r3, #0]
    bfd2:	4606      	mov	r6, r0
    bfd4:	460c      	mov	r4, r1
    bfd6:	b125      	cbz	r5, bfe2 <__swsetup_r+0x16>
    bfd8:	69ab      	ldr	r3, [r5, #24]
    bfda:	b913      	cbnz	r3, bfe2 <__swsetup_r+0x16>
    bfdc:	4628      	mov	r0, r5
    bfde:	f000 f955 	bl	c28c <__sinit>
    bfe2:	4b2e      	ldr	r3, [pc, #184]	; (c09c <__swsetup_r+0xd0>)
    bfe4:	429c      	cmp	r4, r3
    bfe6:	d10f      	bne.n	c008 <__swsetup_r+0x3c>
    bfe8:	686c      	ldr	r4, [r5, #4]
    bfea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bfee:	b29a      	uxth	r2, r3
    bff0:	0715      	lsls	r5, r2, #28
    bff2:	d42c      	bmi.n	c04e <__swsetup_r+0x82>
    bff4:	06d0      	lsls	r0, r2, #27
    bff6:	d411      	bmi.n	c01c <__swsetup_r+0x50>
    bff8:	2209      	movs	r2, #9
    bffa:	6032      	str	r2, [r6, #0]
    bffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c000:	81a3      	strh	r3, [r4, #12]
    c002:	f04f 30ff 	mov.w	r0, #4294967295
    c006:	bd70      	pop	{r4, r5, r6, pc}
    c008:	4b25      	ldr	r3, [pc, #148]	; (c0a0 <__swsetup_r+0xd4>)
    c00a:	429c      	cmp	r4, r3
    c00c:	d101      	bne.n	c012 <__swsetup_r+0x46>
    c00e:	68ac      	ldr	r4, [r5, #8]
    c010:	e7eb      	b.n	bfea <__swsetup_r+0x1e>
    c012:	4b24      	ldr	r3, [pc, #144]	; (c0a4 <__swsetup_r+0xd8>)
    c014:	429c      	cmp	r4, r3
    c016:	bf08      	it	eq
    c018:	68ec      	ldreq	r4, [r5, #12]
    c01a:	e7e6      	b.n	bfea <__swsetup_r+0x1e>
    c01c:	0751      	lsls	r1, r2, #29
    c01e:	d512      	bpl.n	c046 <__swsetup_r+0x7a>
    c020:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c022:	b141      	cbz	r1, c036 <__swsetup_r+0x6a>
    c024:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c028:	4299      	cmp	r1, r3
    c02a:	d002      	beq.n	c032 <__swsetup_r+0x66>
    c02c:	4630      	mov	r0, r6
    c02e:	f7ff fd61 	bl	baf4 <_free_r>
    c032:	2300      	movs	r3, #0
    c034:	6363      	str	r3, [r4, #52]	; 0x34
    c036:	89a3      	ldrh	r3, [r4, #12]
    c038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c03c:	81a3      	strh	r3, [r4, #12]
    c03e:	2300      	movs	r3, #0
    c040:	6063      	str	r3, [r4, #4]
    c042:	6923      	ldr	r3, [r4, #16]
    c044:	6023      	str	r3, [r4, #0]
    c046:	89a3      	ldrh	r3, [r4, #12]
    c048:	f043 0308 	orr.w	r3, r3, #8
    c04c:	81a3      	strh	r3, [r4, #12]
    c04e:	6923      	ldr	r3, [r4, #16]
    c050:	b94b      	cbnz	r3, c066 <__swsetup_r+0x9a>
    c052:	89a3      	ldrh	r3, [r4, #12]
    c054:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c05c:	d003      	beq.n	c066 <__swsetup_r+0x9a>
    c05e:	4621      	mov	r1, r4
    c060:	4630      	mov	r0, r6
    c062:	f000 f9c1 	bl	c3e8 <__smakebuf_r>
    c066:	89a2      	ldrh	r2, [r4, #12]
    c068:	f012 0301 	ands.w	r3, r2, #1
    c06c:	d00c      	beq.n	c088 <__swsetup_r+0xbc>
    c06e:	2300      	movs	r3, #0
    c070:	60a3      	str	r3, [r4, #8]
    c072:	6963      	ldr	r3, [r4, #20]
    c074:	425b      	negs	r3, r3
    c076:	61a3      	str	r3, [r4, #24]
    c078:	6923      	ldr	r3, [r4, #16]
    c07a:	b953      	cbnz	r3, c092 <__swsetup_r+0xc6>
    c07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c080:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    c084:	d1ba      	bne.n	bffc <__swsetup_r+0x30>
    c086:	bd70      	pop	{r4, r5, r6, pc}
    c088:	0792      	lsls	r2, r2, #30
    c08a:	bf58      	it	pl
    c08c:	6963      	ldrpl	r3, [r4, #20]
    c08e:	60a3      	str	r3, [r4, #8]
    c090:	e7f2      	b.n	c078 <__swsetup_r+0xac>
    c092:	2000      	movs	r0, #0
    c094:	e7f7      	b.n	c086 <__swsetup_r+0xba>
    c096:	bf00      	nop
    c098:	20000558 	.word	0x20000558
    c09c:	0000d890 	.word	0x0000d890
    c0a0:	0000d8b0 	.word	0x0000d8b0
    c0a4:	0000d870 	.word	0x0000d870

0000c0a8 <__sflush_r>:
    c0a8:	898a      	ldrh	r2, [r1, #12]
    c0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0ae:	4605      	mov	r5, r0
    c0b0:	0710      	lsls	r0, r2, #28
    c0b2:	460c      	mov	r4, r1
    c0b4:	d45a      	bmi.n	c16c <__sflush_r+0xc4>
    c0b6:	684b      	ldr	r3, [r1, #4]
    c0b8:	2b00      	cmp	r3, #0
    c0ba:	dc05      	bgt.n	c0c8 <__sflush_r+0x20>
    c0bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c0be:	2b00      	cmp	r3, #0
    c0c0:	dc02      	bgt.n	c0c8 <__sflush_r+0x20>
    c0c2:	2000      	movs	r0, #0
    c0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c0ca:	2e00      	cmp	r6, #0
    c0cc:	d0f9      	beq.n	c0c2 <__sflush_r+0x1a>
    c0ce:	2300      	movs	r3, #0
    c0d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    c0d4:	682f      	ldr	r7, [r5, #0]
    c0d6:	602b      	str	r3, [r5, #0]
    c0d8:	d033      	beq.n	c142 <__sflush_r+0x9a>
    c0da:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c0dc:	89a3      	ldrh	r3, [r4, #12]
    c0de:	075a      	lsls	r2, r3, #29
    c0e0:	d505      	bpl.n	c0ee <__sflush_r+0x46>
    c0e2:	6863      	ldr	r3, [r4, #4]
    c0e4:	1ac0      	subs	r0, r0, r3
    c0e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c0e8:	b10b      	cbz	r3, c0ee <__sflush_r+0x46>
    c0ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c0ec:	1ac0      	subs	r0, r0, r3
    c0ee:	2300      	movs	r3, #0
    c0f0:	4602      	mov	r2, r0
    c0f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c0f4:	6a21      	ldr	r1, [r4, #32]
    c0f6:	4628      	mov	r0, r5
    c0f8:	47b0      	blx	r6
    c0fa:	1c43      	adds	r3, r0, #1
    c0fc:	89a3      	ldrh	r3, [r4, #12]
    c0fe:	d106      	bne.n	c10e <__sflush_r+0x66>
    c100:	6829      	ldr	r1, [r5, #0]
    c102:	291d      	cmp	r1, #29
    c104:	d84b      	bhi.n	c19e <__sflush_r+0xf6>
    c106:	4a2b      	ldr	r2, [pc, #172]	; (c1b4 <__sflush_r+0x10c>)
    c108:	40ca      	lsrs	r2, r1
    c10a:	07d6      	lsls	r6, r2, #31
    c10c:	d547      	bpl.n	c19e <__sflush_r+0xf6>
    c10e:	2200      	movs	r2, #0
    c110:	6062      	str	r2, [r4, #4]
    c112:	04d9      	lsls	r1, r3, #19
    c114:	6922      	ldr	r2, [r4, #16]
    c116:	6022      	str	r2, [r4, #0]
    c118:	d504      	bpl.n	c124 <__sflush_r+0x7c>
    c11a:	1c42      	adds	r2, r0, #1
    c11c:	d101      	bne.n	c122 <__sflush_r+0x7a>
    c11e:	682b      	ldr	r3, [r5, #0]
    c120:	b903      	cbnz	r3, c124 <__sflush_r+0x7c>
    c122:	6560      	str	r0, [r4, #84]	; 0x54
    c124:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c126:	602f      	str	r7, [r5, #0]
    c128:	2900      	cmp	r1, #0
    c12a:	d0ca      	beq.n	c0c2 <__sflush_r+0x1a>
    c12c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c130:	4299      	cmp	r1, r3
    c132:	d002      	beq.n	c13a <__sflush_r+0x92>
    c134:	4628      	mov	r0, r5
    c136:	f7ff fcdd 	bl	baf4 <_free_r>
    c13a:	2000      	movs	r0, #0
    c13c:	6360      	str	r0, [r4, #52]	; 0x34
    c13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c142:	6a21      	ldr	r1, [r4, #32]
    c144:	2301      	movs	r3, #1
    c146:	4628      	mov	r0, r5
    c148:	47b0      	blx	r6
    c14a:	1c41      	adds	r1, r0, #1
    c14c:	d1c6      	bne.n	c0dc <__sflush_r+0x34>
    c14e:	682b      	ldr	r3, [r5, #0]
    c150:	2b00      	cmp	r3, #0
    c152:	d0c3      	beq.n	c0dc <__sflush_r+0x34>
    c154:	2b1d      	cmp	r3, #29
    c156:	d001      	beq.n	c15c <__sflush_r+0xb4>
    c158:	2b16      	cmp	r3, #22
    c15a:	d101      	bne.n	c160 <__sflush_r+0xb8>
    c15c:	602f      	str	r7, [r5, #0]
    c15e:	e7b0      	b.n	c0c2 <__sflush_r+0x1a>
    c160:	89a3      	ldrh	r3, [r4, #12]
    c162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c166:	81a3      	strh	r3, [r4, #12]
    c168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c16c:	690f      	ldr	r7, [r1, #16]
    c16e:	2f00      	cmp	r7, #0
    c170:	d0a7      	beq.n	c0c2 <__sflush_r+0x1a>
    c172:	0793      	lsls	r3, r2, #30
    c174:	680e      	ldr	r6, [r1, #0]
    c176:	bf08      	it	eq
    c178:	694b      	ldreq	r3, [r1, #20]
    c17a:	600f      	str	r7, [r1, #0]
    c17c:	bf18      	it	ne
    c17e:	2300      	movne	r3, #0
    c180:	eba6 0807 	sub.w	r8, r6, r7
    c184:	608b      	str	r3, [r1, #8]
    c186:	f1b8 0f00 	cmp.w	r8, #0
    c18a:	dd9a      	ble.n	c0c2 <__sflush_r+0x1a>
    c18c:	4643      	mov	r3, r8
    c18e:	463a      	mov	r2, r7
    c190:	6a21      	ldr	r1, [r4, #32]
    c192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c194:	4628      	mov	r0, r5
    c196:	47b0      	blx	r6
    c198:	2800      	cmp	r0, #0
    c19a:	dc07      	bgt.n	c1ac <__sflush_r+0x104>
    c19c:	89a3      	ldrh	r3, [r4, #12]
    c19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c1a2:	81a3      	strh	r3, [r4, #12]
    c1a4:	f04f 30ff 	mov.w	r0, #4294967295
    c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1ac:	4407      	add	r7, r0
    c1ae:	eba8 0800 	sub.w	r8, r8, r0
    c1b2:	e7e8      	b.n	c186 <__sflush_r+0xde>
    c1b4:	20400001 	.word	0x20400001

0000c1b8 <_fflush_r>:
    c1b8:	b538      	push	{r3, r4, r5, lr}
    c1ba:	690b      	ldr	r3, [r1, #16]
    c1bc:	4605      	mov	r5, r0
    c1be:	460c      	mov	r4, r1
    c1c0:	b1db      	cbz	r3, c1fa <_fflush_r+0x42>
    c1c2:	b118      	cbz	r0, c1cc <_fflush_r+0x14>
    c1c4:	6983      	ldr	r3, [r0, #24]
    c1c6:	b90b      	cbnz	r3, c1cc <_fflush_r+0x14>
    c1c8:	f000 f860 	bl	c28c <__sinit>
    c1cc:	4b0c      	ldr	r3, [pc, #48]	; (c200 <_fflush_r+0x48>)
    c1ce:	429c      	cmp	r4, r3
    c1d0:	d109      	bne.n	c1e6 <_fflush_r+0x2e>
    c1d2:	686c      	ldr	r4, [r5, #4]
    c1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c1d8:	b17b      	cbz	r3, c1fa <_fflush_r+0x42>
    c1da:	4621      	mov	r1, r4
    c1dc:	4628      	mov	r0, r5
    c1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c1e2:	f7ff bf61 	b.w	c0a8 <__sflush_r>
    c1e6:	4b07      	ldr	r3, [pc, #28]	; (c204 <_fflush_r+0x4c>)
    c1e8:	429c      	cmp	r4, r3
    c1ea:	d101      	bne.n	c1f0 <_fflush_r+0x38>
    c1ec:	68ac      	ldr	r4, [r5, #8]
    c1ee:	e7f1      	b.n	c1d4 <_fflush_r+0x1c>
    c1f0:	4b05      	ldr	r3, [pc, #20]	; (c208 <_fflush_r+0x50>)
    c1f2:	429c      	cmp	r4, r3
    c1f4:	bf08      	it	eq
    c1f6:	68ec      	ldreq	r4, [r5, #12]
    c1f8:	e7ec      	b.n	c1d4 <_fflush_r+0x1c>
    c1fa:	2000      	movs	r0, #0
    c1fc:	bd38      	pop	{r3, r4, r5, pc}
    c1fe:	bf00      	nop
    c200:	0000d890 	.word	0x0000d890
    c204:	0000d8b0 	.word	0x0000d8b0
    c208:	0000d870 	.word	0x0000d870

0000c20c <_cleanup_r>:
    c20c:	4901      	ldr	r1, [pc, #4]	; (c214 <_cleanup_r+0x8>)
    c20e:	f000 b8a9 	b.w	c364 <_fwalk_reent>
    c212:	bf00      	nop
    c214:	0000c1b9 	.word	0x0000c1b9

0000c218 <std.isra.0>:
    c218:	2300      	movs	r3, #0
    c21a:	b510      	push	{r4, lr}
    c21c:	4604      	mov	r4, r0
    c21e:	6003      	str	r3, [r0, #0]
    c220:	6043      	str	r3, [r0, #4]
    c222:	6083      	str	r3, [r0, #8]
    c224:	8181      	strh	r1, [r0, #12]
    c226:	6643      	str	r3, [r0, #100]	; 0x64
    c228:	81c2      	strh	r2, [r0, #14]
    c22a:	6103      	str	r3, [r0, #16]
    c22c:	6143      	str	r3, [r0, #20]
    c22e:	6183      	str	r3, [r0, #24]
    c230:	4619      	mov	r1, r3
    c232:	2208      	movs	r2, #8
    c234:	305c      	adds	r0, #92	; 0x5c
    c236:	f7ff fc54 	bl	bae2 <memset>
    c23a:	4b05      	ldr	r3, [pc, #20]	; (c250 <std.isra.0+0x38>)
    c23c:	6263      	str	r3, [r4, #36]	; 0x24
    c23e:	4b05      	ldr	r3, [pc, #20]	; (c254 <std.isra.0+0x3c>)
    c240:	62a3      	str	r3, [r4, #40]	; 0x28
    c242:	4b05      	ldr	r3, [pc, #20]	; (c258 <std.isra.0+0x40>)
    c244:	62e3      	str	r3, [r4, #44]	; 0x2c
    c246:	4b05      	ldr	r3, [pc, #20]	; (c25c <std.isra.0+0x44>)
    c248:	6224      	str	r4, [r4, #32]
    c24a:	6323      	str	r3, [r4, #48]	; 0x30
    c24c:	bd10      	pop	{r4, pc}
    c24e:	bf00      	nop
    c250:	0000ccb5 	.word	0x0000ccb5
    c254:	0000ccd7 	.word	0x0000ccd7
    c258:	0000cd0f 	.word	0x0000cd0f
    c25c:	0000cd33 	.word	0x0000cd33

0000c260 <__sfmoreglue>:
    c260:	b570      	push	{r4, r5, r6, lr}
    c262:	1e4a      	subs	r2, r1, #1
    c264:	2568      	movs	r5, #104	; 0x68
    c266:	4355      	muls	r5, r2
    c268:	460e      	mov	r6, r1
    c26a:	f105 0174 	add.w	r1, r5, #116	; 0x74
    c26e:	f7ff fc8f 	bl	bb90 <_malloc_r>
    c272:	4604      	mov	r4, r0
    c274:	b140      	cbz	r0, c288 <__sfmoreglue+0x28>
    c276:	2100      	movs	r1, #0
    c278:	e880 0042 	stmia.w	r0, {r1, r6}
    c27c:	300c      	adds	r0, #12
    c27e:	60a0      	str	r0, [r4, #8]
    c280:	f105 0268 	add.w	r2, r5, #104	; 0x68
    c284:	f7ff fc2d 	bl	bae2 <memset>
    c288:	4620      	mov	r0, r4
    c28a:	bd70      	pop	{r4, r5, r6, pc}

0000c28c <__sinit>:
    c28c:	6983      	ldr	r3, [r0, #24]
    c28e:	b510      	push	{r4, lr}
    c290:	4604      	mov	r4, r0
    c292:	bb33      	cbnz	r3, c2e2 <__sinit+0x56>
    c294:	6483      	str	r3, [r0, #72]	; 0x48
    c296:	64c3      	str	r3, [r0, #76]	; 0x4c
    c298:	6503      	str	r3, [r0, #80]	; 0x50
    c29a:	4b12      	ldr	r3, [pc, #72]	; (c2e4 <__sinit+0x58>)
    c29c:	4a12      	ldr	r2, [pc, #72]	; (c2e8 <__sinit+0x5c>)
    c29e:	681b      	ldr	r3, [r3, #0]
    c2a0:	6282      	str	r2, [r0, #40]	; 0x28
    c2a2:	4298      	cmp	r0, r3
    c2a4:	bf04      	itt	eq
    c2a6:	2301      	moveq	r3, #1
    c2a8:	6183      	streq	r3, [r0, #24]
    c2aa:	f000 f81f 	bl	c2ec <__sfp>
    c2ae:	6060      	str	r0, [r4, #4]
    c2b0:	4620      	mov	r0, r4
    c2b2:	f000 f81b 	bl	c2ec <__sfp>
    c2b6:	60a0      	str	r0, [r4, #8]
    c2b8:	4620      	mov	r0, r4
    c2ba:	f000 f817 	bl	c2ec <__sfp>
    c2be:	2200      	movs	r2, #0
    c2c0:	60e0      	str	r0, [r4, #12]
    c2c2:	2104      	movs	r1, #4
    c2c4:	6860      	ldr	r0, [r4, #4]
    c2c6:	f7ff ffa7 	bl	c218 <std.isra.0>
    c2ca:	2201      	movs	r2, #1
    c2cc:	2109      	movs	r1, #9
    c2ce:	68a0      	ldr	r0, [r4, #8]
    c2d0:	f7ff ffa2 	bl	c218 <std.isra.0>
    c2d4:	2202      	movs	r2, #2
    c2d6:	2112      	movs	r1, #18
    c2d8:	68e0      	ldr	r0, [r4, #12]
    c2da:	f7ff ff9d 	bl	c218 <std.isra.0>
    c2de:	2301      	movs	r3, #1
    c2e0:	61a3      	str	r3, [r4, #24]
    c2e2:	bd10      	pop	{r4, pc}
    c2e4:	0000d86c 	.word	0x0000d86c
    c2e8:	0000c20d 	.word	0x0000c20d

0000c2ec <__sfp>:
    c2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2ee:	4b1c      	ldr	r3, [pc, #112]	; (c360 <__sfp+0x74>)
    c2f0:	681e      	ldr	r6, [r3, #0]
    c2f2:	69b3      	ldr	r3, [r6, #24]
    c2f4:	4607      	mov	r7, r0
    c2f6:	b913      	cbnz	r3, c2fe <__sfp+0x12>
    c2f8:	4630      	mov	r0, r6
    c2fa:	f7ff ffc7 	bl	c28c <__sinit>
    c2fe:	3648      	adds	r6, #72	; 0x48
    c300:	68b4      	ldr	r4, [r6, #8]
    c302:	6873      	ldr	r3, [r6, #4]
    c304:	3b01      	subs	r3, #1
    c306:	d503      	bpl.n	c310 <__sfp+0x24>
    c308:	6833      	ldr	r3, [r6, #0]
    c30a:	b133      	cbz	r3, c31a <__sfp+0x2e>
    c30c:	6836      	ldr	r6, [r6, #0]
    c30e:	e7f7      	b.n	c300 <__sfp+0x14>
    c310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    c314:	b16d      	cbz	r5, c332 <__sfp+0x46>
    c316:	3468      	adds	r4, #104	; 0x68
    c318:	e7f4      	b.n	c304 <__sfp+0x18>
    c31a:	2104      	movs	r1, #4
    c31c:	4638      	mov	r0, r7
    c31e:	f7ff ff9f 	bl	c260 <__sfmoreglue>
    c322:	6030      	str	r0, [r6, #0]
    c324:	2800      	cmp	r0, #0
    c326:	d1f1      	bne.n	c30c <__sfp+0x20>
    c328:	230c      	movs	r3, #12
    c32a:	603b      	str	r3, [r7, #0]
    c32c:	4604      	mov	r4, r0
    c32e:	4620      	mov	r0, r4
    c330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c332:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c336:	81e3      	strh	r3, [r4, #14]
    c338:	2301      	movs	r3, #1
    c33a:	81a3      	strh	r3, [r4, #12]
    c33c:	6665      	str	r5, [r4, #100]	; 0x64
    c33e:	6025      	str	r5, [r4, #0]
    c340:	60a5      	str	r5, [r4, #8]
    c342:	6065      	str	r5, [r4, #4]
    c344:	6125      	str	r5, [r4, #16]
    c346:	6165      	str	r5, [r4, #20]
    c348:	61a5      	str	r5, [r4, #24]
    c34a:	2208      	movs	r2, #8
    c34c:	4629      	mov	r1, r5
    c34e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c352:	f7ff fbc6 	bl	bae2 <memset>
    c356:	6365      	str	r5, [r4, #52]	; 0x34
    c358:	63a5      	str	r5, [r4, #56]	; 0x38
    c35a:	64a5      	str	r5, [r4, #72]	; 0x48
    c35c:	64e5      	str	r5, [r4, #76]	; 0x4c
    c35e:	e7e6      	b.n	c32e <__sfp+0x42>
    c360:	0000d86c 	.word	0x0000d86c

0000c364 <_fwalk_reent>:
    c364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c368:	4680      	mov	r8, r0
    c36a:	4689      	mov	r9, r1
    c36c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    c370:	2600      	movs	r6, #0
    c372:	b914      	cbnz	r4, c37a <_fwalk_reent+0x16>
    c374:	4630      	mov	r0, r6
    c376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c37a:	68a5      	ldr	r5, [r4, #8]
    c37c:	6867      	ldr	r7, [r4, #4]
    c37e:	3f01      	subs	r7, #1
    c380:	d501      	bpl.n	c386 <_fwalk_reent+0x22>
    c382:	6824      	ldr	r4, [r4, #0]
    c384:	e7f5      	b.n	c372 <_fwalk_reent+0xe>
    c386:	89ab      	ldrh	r3, [r5, #12]
    c388:	2b01      	cmp	r3, #1
    c38a:	d907      	bls.n	c39c <_fwalk_reent+0x38>
    c38c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c390:	3301      	adds	r3, #1
    c392:	d003      	beq.n	c39c <_fwalk_reent+0x38>
    c394:	4629      	mov	r1, r5
    c396:	4640      	mov	r0, r8
    c398:	47c8      	blx	r9
    c39a:	4306      	orrs	r6, r0
    c39c:	3568      	adds	r5, #104	; 0x68
    c39e:	e7ee      	b.n	c37e <_fwalk_reent+0x1a>

0000c3a0 <__swhatbuf_r>:
    c3a0:	b570      	push	{r4, r5, r6, lr}
    c3a2:	460e      	mov	r6, r1
    c3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c3a8:	2900      	cmp	r1, #0
    c3aa:	b090      	sub	sp, #64	; 0x40
    c3ac:	4614      	mov	r4, r2
    c3ae:	461d      	mov	r5, r3
    c3b0:	da07      	bge.n	c3c2 <__swhatbuf_r+0x22>
    c3b2:	2300      	movs	r3, #0
    c3b4:	602b      	str	r3, [r5, #0]
    c3b6:	89b3      	ldrh	r3, [r6, #12]
    c3b8:	061a      	lsls	r2, r3, #24
    c3ba:	d410      	bmi.n	c3de <__swhatbuf_r+0x3e>
    c3bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c3c0:	e00e      	b.n	c3e0 <__swhatbuf_r+0x40>
    c3c2:	aa01      	add	r2, sp, #4
    c3c4:	f000 fcdc 	bl	cd80 <_fstat_r>
    c3c8:	2800      	cmp	r0, #0
    c3ca:	dbf2      	blt.n	c3b2 <__swhatbuf_r+0x12>
    c3cc:	9a02      	ldr	r2, [sp, #8]
    c3ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    c3d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    c3d6:	425a      	negs	r2, r3
    c3d8:	415a      	adcs	r2, r3
    c3da:	602a      	str	r2, [r5, #0]
    c3dc:	e7ee      	b.n	c3bc <__swhatbuf_r+0x1c>
    c3de:	2340      	movs	r3, #64	; 0x40
    c3e0:	2000      	movs	r0, #0
    c3e2:	6023      	str	r3, [r4, #0]
    c3e4:	b010      	add	sp, #64	; 0x40
    c3e6:	bd70      	pop	{r4, r5, r6, pc}

0000c3e8 <__smakebuf_r>:
    c3e8:	898b      	ldrh	r3, [r1, #12]
    c3ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c3ec:	079d      	lsls	r5, r3, #30
    c3ee:	4606      	mov	r6, r0
    c3f0:	460c      	mov	r4, r1
    c3f2:	d507      	bpl.n	c404 <__smakebuf_r+0x1c>
    c3f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c3f8:	6023      	str	r3, [r4, #0]
    c3fa:	6123      	str	r3, [r4, #16]
    c3fc:	2301      	movs	r3, #1
    c3fe:	6163      	str	r3, [r4, #20]
    c400:	b002      	add	sp, #8
    c402:	bd70      	pop	{r4, r5, r6, pc}
    c404:	ab01      	add	r3, sp, #4
    c406:	466a      	mov	r2, sp
    c408:	f7ff ffca 	bl	c3a0 <__swhatbuf_r>
    c40c:	9900      	ldr	r1, [sp, #0]
    c40e:	4605      	mov	r5, r0
    c410:	4630      	mov	r0, r6
    c412:	f7ff fbbd 	bl	bb90 <_malloc_r>
    c416:	b948      	cbnz	r0, c42c <__smakebuf_r+0x44>
    c418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c41c:	059a      	lsls	r2, r3, #22
    c41e:	d4ef      	bmi.n	c400 <__smakebuf_r+0x18>
    c420:	f023 0303 	bic.w	r3, r3, #3
    c424:	f043 0302 	orr.w	r3, r3, #2
    c428:	81a3      	strh	r3, [r4, #12]
    c42a:	e7e3      	b.n	c3f4 <__smakebuf_r+0xc>
    c42c:	4b0d      	ldr	r3, [pc, #52]	; (c464 <__smakebuf_r+0x7c>)
    c42e:	62b3      	str	r3, [r6, #40]	; 0x28
    c430:	89a3      	ldrh	r3, [r4, #12]
    c432:	6020      	str	r0, [r4, #0]
    c434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c438:	81a3      	strh	r3, [r4, #12]
    c43a:	9b00      	ldr	r3, [sp, #0]
    c43c:	6163      	str	r3, [r4, #20]
    c43e:	9b01      	ldr	r3, [sp, #4]
    c440:	6120      	str	r0, [r4, #16]
    c442:	b15b      	cbz	r3, c45c <__smakebuf_r+0x74>
    c444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c448:	4630      	mov	r0, r6
    c44a:	f000 fcab 	bl	cda4 <_isatty_r>
    c44e:	b128      	cbz	r0, c45c <__smakebuf_r+0x74>
    c450:	89a3      	ldrh	r3, [r4, #12]
    c452:	f023 0303 	bic.w	r3, r3, #3
    c456:	f043 0301 	orr.w	r3, r3, #1
    c45a:	81a3      	strh	r3, [r4, #12]
    c45c:	89a3      	ldrh	r3, [r4, #12]
    c45e:	431d      	orrs	r5, r3
    c460:	81a5      	strh	r5, [r4, #12]
    c462:	e7cd      	b.n	c400 <__smakebuf_r+0x18>
    c464:	0000c20d 	.word	0x0000c20d

0000c468 <__malloc_lock>:
    c468:	4770      	bx	lr

0000c46a <__malloc_unlock>:
    c46a:	4770      	bx	lr

0000c46c <__ssputs_r>:
    c46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c470:	688e      	ldr	r6, [r1, #8]
    c472:	429e      	cmp	r6, r3
    c474:	4682      	mov	sl, r0
    c476:	460c      	mov	r4, r1
    c478:	4691      	mov	r9, r2
    c47a:	4698      	mov	r8, r3
    c47c:	d835      	bhi.n	c4ea <__ssputs_r+0x7e>
    c47e:	898a      	ldrh	r2, [r1, #12]
    c480:	f412 6f90 	tst.w	r2, #1152	; 0x480
    c484:	d031      	beq.n	c4ea <__ssputs_r+0x7e>
    c486:	6825      	ldr	r5, [r4, #0]
    c488:	6909      	ldr	r1, [r1, #16]
    c48a:	1a6f      	subs	r7, r5, r1
    c48c:	6965      	ldr	r5, [r4, #20]
    c48e:	2302      	movs	r3, #2
    c490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c494:	fb95 f5f3 	sdiv	r5, r5, r3
    c498:	f108 0301 	add.w	r3, r8, #1
    c49c:	443b      	add	r3, r7
    c49e:	429d      	cmp	r5, r3
    c4a0:	bf38      	it	cc
    c4a2:	461d      	movcc	r5, r3
    c4a4:	0553      	lsls	r3, r2, #21
    c4a6:	d531      	bpl.n	c50c <__ssputs_r+0xa0>
    c4a8:	4629      	mov	r1, r5
    c4aa:	f7ff fb71 	bl	bb90 <_malloc_r>
    c4ae:	4606      	mov	r6, r0
    c4b0:	b950      	cbnz	r0, c4c8 <__ssputs_r+0x5c>
    c4b2:	230c      	movs	r3, #12
    c4b4:	f8ca 3000 	str.w	r3, [sl]
    c4b8:	89a3      	ldrh	r3, [r4, #12]
    c4ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c4be:	81a3      	strh	r3, [r4, #12]
    c4c0:	f04f 30ff 	mov.w	r0, #4294967295
    c4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4c8:	463a      	mov	r2, r7
    c4ca:	6921      	ldr	r1, [r4, #16]
    c4cc:	f7ff fafe 	bl	bacc <memcpy>
    c4d0:	89a3      	ldrh	r3, [r4, #12]
    c4d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    c4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c4da:	81a3      	strh	r3, [r4, #12]
    c4dc:	6126      	str	r6, [r4, #16]
    c4de:	6165      	str	r5, [r4, #20]
    c4e0:	443e      	add	r6, r7
    c4e2:	1bed      	subs	r5, r5, r7
    c4e4:	6026      	str	r6, [r4, #0]
    c4e6:	60a5      	str	r5, [r4, #8]
    c4e8:	4646      	mov	r6, r8
    c4ea:	4546      	cmp	r6, r8
    c4ec:	bf28      	it	cs
    c4ee:	4646      	movcs	r6, r8
    c4f0:	4632      	mov	r2, r6
    c4f2:	4649      	mov	r1, r9
    c4f4:	6820      	ldr	r0, [r4, #0]
    c4f6:	f000 fccb 	bl	ce90 <memmove>
    c4fa:	68a3      	ldr	r3, [r4, #8]
    c4fc:	1b9b      	subs	r3, r3, r6
    c4fe:	60a3      	str	r3, [r4, #8]
    c500:	6823      	ldr	r3, [r4, #0]
    c502:	441e      	add	r6, r3
    c504:	6026      	str	r6, [r4, #0]
    c506:	2000      	movs	r0, #0
    c508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c50c:	462a      	mov	r2, r5
    c50e:	f000 fcd9 	bl	cec4 <_realloc_r>
    c512:	4606      	mov	r6, r0
    c514:	2800      	cmp	r0, #0
    c516:	d1e1      	bne.n	c4dc <__ssputs_r+0x70>
    c518:	6921      	ldr	r1, [r4, #16]
    c51a:	4650      	mov	r0, sl
    c51c:	f7ff faea 	bl	baf4 <_free_r>
    c520:	e7c7      	b.n	c4b2 <__ssputs_r+0x46>
	...

0000c524 <_svfiprintf_r>:
    c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c528:	b09d      	sub	sp, #116	; 0x74
    c52a:	4680      	mov	r8, r0
    c52c:	9303      	str	r3, [sp, #12]
    c52e:	898b      	ldrh	r3, [r1, #12]
    c530:	061c      	lsls	r4, r3, #24
    c532:	460d      	mov	r5, r1
    c534:	4616      	mov	r6, r2
    c536:	d50f      	bpl.n	c558 <_svfiprintf_r+0x34>
    c538:	690b      	ldr	r3, [r1, #16]
    c53a:	b96b      	cbnz	r3, c558 <_svfiprintf_r+0x34>
    c53c:	2140      	movs	r1, #64	; 0x40
    c53e:	f7ff fb27 	bl	bb90 <_malloc_r>
    c542:	6028      	str	r0, [r5, #0]
    c544:	6128      	str	r0, [r5, #16]
    c546:	b928      	cbnz	r0, c554 <_svfiprintf_r+0x30>
    c548:	230c      	movs	r3, #12
    c54a:	f8c8 3000 	str.w	r3, [r8]
    c54e:	f04f 30ff 	mov.w	r0, #4294967295
    c552:	e0c5      	b.n	c6e0 <_svfiprintf_r+0x1bc>
    c554:	2340      	movs	r3, #64	; 0x40
    c556:	616b      	str	r3, [r5, #20]
    c558:	2300      	movs	r3, #0
    c55a:	9309      	str	r3, [sp, #36]	; 0x24
    c55c:	2320      	movs	r3, #32
    c55e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c562:	2330      	movs	r3, #48	; 0x30
    c564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c568:	f04f 0b01 	mov.w	fp, #1
    c56c:	4637      	mov	r7, r6
    c56e:	463c      	mov	r4, r7
    c570:	f814 3b01 	ldrb.w	r3, [r4], #1
    c574:	2b00      	cmp	r3, #0
    c576:	d13c      	bne.n	c5f2 <_svfiprintf_r+0xce>
    c578:	ebb7 0a06 	subs.w	sl, r7, r6
    c57c:	d00b      	beq.n	c596 <_svfiprintf_r+0x72>
    c57e:	4653      	mov	r3, sl
    c580:	4632      	mov	r2, r6
    c582:	4629      	mov	r1, r5
    c584:	4640      	mov	r0, r8
    c586:	f7ff ff71 	bl	c46c <__ssputs_r>
    c58a:	3001      	adds	r0, #1
    c58c:	f000 80a3 	beq.w	c6d6 <_svfiprintf_r+0x1b2>
    c590:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c592:	4453      	add	r3, sl
    c594:	9309      	str	r3, [sp, #36]	; 0x24
    c596:	783b      	ldrb	r3, [r7, #0]
    c598:	2b00      	cmp	r3, #0
    c59a:	f000 809c 	beq.w	c6d6 <_svfiprintf_r+0x1b2>
    c59e:	2300      	movs	r3, #0
    c5a0:	f04f 32ff 	mov.w	r2, #4294967295
    c5a4:	9304      	str	r3, [sp, #16]
    c5a6:	9307      	str	r3, [sp, #28]
    c5a8:	9205      	str	r2, [sp, #20]
    c5aa:	9306      	str	r3, [sp, #24]
    c5ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c5b0:	931a      	str	r3, [sp, #104]	; 0x68
    c5b2:	2205      	movs	r2, #5
    c5b4:	7821      	ldrb	r1, [r4, #0]
    c5b6:	4850      	ldr	r0, [pc, #320]	; (c6f8 <_svfiprintf_r+0x1d4>)
    c5b8:	f000 fc1a 	bl	cdf0 <memchr>
    c5bc:	1c67      	adds	r7, r4, #1
    c5be:	9b04      	ldr	r3, [sp, #16]
    c5c0:	b9d8      	cbnz	r0, c5fa <_svfiprintf_r+0xd6>
    c5c2:	06d9      	lsls	r1, r3, #27
    c5c4:	bf44      	itt	mi
    c5c6:	2220      	movmi	r2, #32
    c5c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c5cc:	071a      	lsls	r2, r3, #28
    c5ce:	bf44      	itt	mi
    c5d0:	222b      	movmi	r2, #43	; 0x2b
    c5d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c5d6:	7822      	ldrb	r2, [r4, #0]
    c5d8:	2a2a      	cmp	r2, #42	; 0x2a
    c5da:	d016      	beq.n	c60a <_svfiprintf_r+0xe6>
    c5dc:	9a07      	ldr	r2, [sp, #28]
    c5de:	2100      	movs	r1, #0
    c5e0:	200a      	movs	r0, #10
    c5e2:	4627      	mov	r7, r4
    c5e4:	3401      	adds	r4, #1
    c5e6:	783b      	ldrb	r3, [r7, #0]
    c5e8:	3b30      	subs	r3, #48	; 0x30
    c5ea:	2b09      	cmp	r3, #9
    c5ec:	d951      	bls.n	c692 <_svfiprintf_r+0x16e>
    c5ee:	b1c9      	cbz	r1, c624 <_svfiprintf_r+0x100>
    c5f0:	e011      	b.n	c616 <_svfiprintf_r+0xf2>
    c5f2:	2b25      	cmp	r3, #37	; 0x25
    c5f4:	d0c0      	beq.n	c578 <_svfiprintf_r+0x54>
    c5f6:	4627      	mov	r7, r4
    c5f8:	e7b9      	b.n	c56e <_svfiprintf_r+0x4a>
    c5fa:	4a3f      	ldr	r2, [pc, #252]	; (c6f8 <_svfiprintf_r+0x1d4>)
    c5fc:	1a80      	subs	r0, r0, r2
    c5fe:	fa0b f000 	lsl.w	r0, fp, r0
    c602:	4318      	orrs	r0, r3
    c604:	9004      	str	r0, [sp, #16]
    c606:	463c      	mov	r4, r7
    c608:	e7d3      	b.n	c5b2 <_svfiprintf_r+0x8e>
    c60a:	9a03      	ldr	r2, [sp, #12]
    c60c:	1d11      	adds	r1, r2, #4
    c60e:	6812      	ldr	r2, [r2, #0]
    c610:	9103      	str	r1, [sp, #12]
    c612:	2a00      	cmp	r2, #0
    c614:	db01      	blt.n	c61a <_svfiprintf_r+0xf6>
    c616:	9207      	str	r2, [sp, #28]
    c618:	e004      	b.n	c624 <_svfiprintf_r+0x100>
    c61a:	4252      	negs	r2, r2
    c61c:	f043 0302 	orr.w	r3, r3, #2
    c620:	9207      	str	r2, [sp, #28]
    c622:	9304      	str	r3, [sp, #16]
    c624:	783b      	ldrb	r3, [r7, #0]
    c626:	2b2e      	cmp	r3, #46	; 0x2e
    c628:	d10e      	bne.n	c648 <_svfiprintf_r+0x124>
    c62a:	787b      	ldrb	r3, [r7, #1]
    c62c:	2b2a      	cmp	r3, #42	; 0x2a
    c62e:	f107 0101 	add.w	r1, r7, #1
    c632:	d132      	bne.n	c69a <_svfiprintf_r+0x176>
    c634:	9b03      	ldr	r3, [sp, #12]
    c636:	1d1a      	adds	r2, r3, #4
    c638:	681b      	ldr	r3, [r3, #0]
    c63a:	9203      	str	r2, [sp, #12]
    c63c:	2b00      	cmp	r3, #0
    c63e:	bfb8      	it	lt
    c640:	f04f 33ff 	movlt.w	r3, #4294967295
    c644:	3702      	adds	r7, #2
    c646:	9305      	str	r3, [sp, #20]
    c648:	4c2c      	ldr	r4, [pc, #176]	; (c6fc <_svfiprintf_r+0x1d8>)
    c64a:	7839      	ldrb	r1, [r7, #0]
    c64c:	2203      	movs	r2, #3
    c64e:	4620      	mov	r0, r4
    c650:	f000 fbce 	bl	cdf0 <memchr>
    c654:	b138      	cbz	r0, c666 <_svfiprintf_r+0x142>
    c656:	2340      	movs	r3, #64	; 0x40
    c658:	1b00      	subs	r0, r0, r4
    c65a:	fa03 f000 	lsl.w	r0, r3, r0
    c65e:	9b04      	ldr	r3, [sp, #16]
    c660:	4303      	orrs	r3, r0
    c662:	9304      	str	r3, [sp, #16]
    c664:	3701      	adds	r7, #1
    c666:	7839      	ldrb	r1, [r7, #0]
    c668:	4825      	ldr	r0, [pc, #148]	; (c700 <_svfiprintf_r+0x1dc>)
    c66a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c66e:	2206      	movs	r2, #6
    c670:	1c7e      	adds	r6, r7, #1
    c672:	f000 fbbd 	bl	cdf0 <memchr>
    c676:	2800      	cmp	r0, #0
    c678:	d035      	beq.n	c6e6 <_svfiprintf_r+0x1c2>
    c67a:	4b22      	ldr	r3, [pc, #136]	; (c704 <_svfiprintf_r+0x1e0>)
    c67c:	b9fb      	cbnz	r3, c6be <_svfiprintf_r+0x19a>
    c67e:	9b03      	ldr	r3, [sp, #12]
    c680:	3307      	adds	r3, #7
    c682:	f023 0307 	bic.w	r3, r3, #7
    c686:	3308      	adds	r3, #8
    c688:	9303      	str	r3, [sp, #12]
    c68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c68c:	444b      	add	r3, r9
    c68e:	9309      	str	r3, [sp, #36]	; 0x24
    c690:	e76c      	b.n	c56c <_svfiprintf_r+0x48>
    c692:	fb00 3202 	mla	r2, r0, r2, r3
    c696:	2101      	movs	r1, #1
    c698:	e7a3      	b.n	c5e2 <_svfiprintf_r+0xbe>
    c69a:	2300      	movs	r3, #0
    c69c:	9305      	str	r3, [sp, #20]
    c69e:	4618      	mov	r0, r3
    c6a0:	240a      	movs	r4, #10
    c6a2:	460f      	mov	r7, r1
    c6a4:	3101      	adds	r1, #1
    c6a6:	783a      	ldrb	r2, [r7, #0]
    c6a8:	3a30      	subs	r2, #48	; 0x30
    c6aa:	2a09      	cmp	r2, #9
    c6ac:	d903      	bls.n	c6b6 <_svfiprintf_r+0x192>
    c6ae:	2b00      	cmp	r3, #0
    c6b0:	d0ca      	beq.n	c648 <_svfiprintf_r+0x124>
    c6b2:	9005      	str	r0, [sp, #20]
    c6b4:	e7c8      	b.n	c648 <_svfiprintf_r+0x124>
    c6b6:	fb04 2000 	mla	r0, r4, r0, r2
    c6ba:	2301      	movs	r3, #1
    c6bc:	e7f1      	b.n	c6a2 <_svfiprintf_r+0x17e>
    c6be:	ab03      	add	r3, sp, #12
    c6c0:	9300      	str	r3, [sp, #0]
    c6c2:	462a      	mov	r2, r5
    c6c4:	4b10      	ldr	r3, [pc, #64]	; (c708 <_svfiprintf_r+0x1e4>)
    c6c6:	a904      	add	r1, sp, #16
    c6c8:	4640      	mov	r0, r8
    c6ca:	f3af 8000 	nop.w
    c6ce:	f1b0 3fff 	cmp.w	r0, #4294967295
    c6d2:	4681      	mov	r9, r0
    c6d4:	d1d9      	bne.n	c68a <_svfiprintf_r+0x166>
    c6d6:	89ab      	ldrh	r3, [r5, #12]
    c6d8:	065b      	lsls	r3, r3, #25
    c6da:	f53f af38 	bmi.w	c54e <_svfiprintf_r+0x2a>
    c6de:	9809      	ldr	r0, [sp, #36]	; 0x24
    c6e0:	b01d      	add	sp, #116	; 0x74
    c6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6e6:	ab03      	add	r3, sp, #12
    c6e8:	9300      	str	r3, [sp, #0]
    c6ea:	462a      	mov	r2, r5
    c6ec:	4b06      	ldr	r3, [pc, #24]	; (c708 <_svfiprintf_r+0x1e4>)
    c6ee:	a904      	add	r1, sp, #16
    c6f0:	4640      	mov	r0, r8
    c6f2:	f000 f9bf 	bl	ca74 <_printf_i>
    c6f6:	e7ea      	b.n	c6ce <_svfiprintf_r+0x1aa>
    c6f8:	0000d8d0 	.word	0x0000d8d0
    c6fc:	0000d8d6 	.word	0x0000d8d6
    c700:	0000d8da 	.word	0x0000d8da
    c704:	00000000 	.word	0x00000000
    c708:	0000c46d 	.word	0x0000c46d

0000c70c <__sfputc_r>:
    c70c:	6893      	ldr	r3, [r2, #8]
    c70e:	3b01      	subs	r3, #1
    c710:	2b00      	cmp	r3, #0
    c712:	b410      	push	{r4}
    c714:	6093      	str	r3, [r2, #8]
    c716:	da08      	bge.n	c72a <__sfputc_r+0x1e>
    c718:	6994      	ldr	r4, [r2, #24]
    c71a:	42a3      	cmp	r3, r4
    c71c:	db02      	blt.n	c724 <__sfputc_r+0x18>
    c71e:	b2cb      	uxtb	r3, r1
    c720:	2b0a      	cmp	r3, #10
    c722:	d102      	bne.n	c72a <__sfputc_r+0x1e>
    c724:	bc10      	pop	{r4}
    c726:	f7ff bbff 	b.w	bf28 <__swbuf_r>
    c72a:	6813      	ldr	r3, [r2, #0]
    c72c:	1c58      	adds	r0, r3, #1
    c72e:	6010      	str	r0, [r2, #0]
    c730:	7019      	strb	r1, [r3, #0]
    c732:	b2c8      	uxtb	r0, r1
    c734:	bc10      	pop	{r4}
    c736:	4770      	bx	lr

0000c738 <__sfputs_r>:
    c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c73a:	4606      	mov	r6, r0
    c73c:	460f      	mov	r7, r1
    c73e:	4614      	mov	r4, r2
    c740:	18d5      	adds	r5, r2, r3
    c742:	42ac      	cmp	r4, r5
    c744:	d101      	bne.n	c74a <__sfputs_r+0x12>
    c746:	2000      	movs	r0, #0
    c748:	e007      	b.n	c75a <__sfputs_r+0x22>
    c74a:	463a      	mov	r2, r7
    c74c:	f814 1b01 	ldrb.w	r1, [r4], #1
    c750:	4630      	mov	r0, r6
    c752:	f7ff ffdb 	bl	c70c <__sfputc_r>
    c756:	1c43      	adds	r3, r0, #1
    c758:	d1f3      	bne.n	c742 <__sfputs_r+0xa>
    c75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c75c <_vfiprintf_r>:
    c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c760:	b09d      	sub	sp, #116	; 0x74
    c762:	460c      	mov	r4, r1
    c764:	4617      	mov	r7, r2
    c766:	9303      	str	r3, [sp, #12]
    c768:	4606      	mov	r6, r0
    c76a:	b118      	cbz	r0, c774 <_vfiprintf_r+0x18>
    c76c:	6983      	ldr	r3, [r0, #24]
    c76e:	b90b      	cbnz	r3, c774 <_vfiprintf_r+0x18>
    c770:	f7ff fd8c 	bl	c28c <__sinit>
    c774:	4b7c      	ldr	r3, [pc, #496]	; (c968 <_vfiprintf_r+0x20c>)
    c776:	429c      	cmp	r4, r3
    c778:	d157      	bne.n	c82a <_vfiprintf_r+0xce>
    c77a:	6874      	ldr	r4, [r6, #4]
    c77c:	89a3      	ldrh	r3, [r4, #12]
    c77e:	0718      	lsls	r0, r3, #28
    c780:	d55d      	bpl.n	c83e <_vfiprintf_r+0xe2>
    c782:	6923      	ldr	r3, [r4, #16]
    c784:	2b00      	cmp	r3, #0
    c786:	d05a      	beq.n	c83e <_vfiprintf_r+0xe2>
    c788:	2300      	movs	r3, #0
    c78a:	9309      	str	r3, [sp, #36]	; 0x24
    c78c:	2320      	movs	r3, #32
    c78e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c792:	2330      	movs	r3, #48	; 0x30
    c794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c798:	f04f 0b01 	mov.w	fp, #1
    c79c:	46b8      	mov	r8, r7
    c79e:	4645      	mov	r5, r8
    c7a0:	f815 3b01 	ldrb.w	r3, [r5], #1
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	d155      	bne.n	c854 <_vfiprintf_r+0xf8>
    c7a8:	ebb8 0a07 	subs.w	sl, r8, r7
    c7ac:	d00b      	beq.n	c7c6 <_vfiprintf_r+0x6a>
    c7ae:	4653      	mov	r3, sl
    c7b0:	463a      	mov	r2, r7
    c7b2:	4621      	mov	r1, r4
    c7b4:	4630      	mov	r0, r6
    c7b6:	f7ff ffbf 	bl	c738 <__sfputs_r>
    c7ba:	3001      	adds	r0, #1
    c7bc:	f000 80c4 	beq.w	c948 <_vfiprintf_r+0x1ec>
    c7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7c2:	4453      	add	r3, sl
    c7c4:	9309      	str	r3, [sp, #36]	; 0x24
    c7c6:	f898 3000 	ldrb.w	r3, [r8]
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	f000 80bc 	beq.w	c948 <_vfiprintf_r+0x1ec>
    c7d0:	2300      	movs	r3, #0
    c7d2:	f04f 32ff 	mov.w	r2, #4294967295
    c7d6:	9304      	str	r3, [sp, #16]
    c7d8:	9307      	str	r3, [sp, #28]
    c7da:	9205      	str	r2, [sp, #20]
    c7dc:	9306      	str	r3, [sp, #24]
    c7de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c7e2:	931a      	str	r3, [sp, #104]	; 0x68
    c7e4:	2205      	movs	r2, #5
    c7e6:	7829      	ldrb	r1, [r5, #0]
    c7e8:	4860      	ldr	r0, [pc, #384]	; (c96c <_vfiprintf_r+0x210>)
    c7ea:	f000 fb01 	bl	cdf0 <memchr>
    c7ee:	f105 0801 	add.w	r8, r5, #1
    c7f2:	9b04      	ldr	r3, [sp, #16]
    c7f4:	2800      	cmp	r0, #0
    c7f6:	d131      	bne.n	c85c <_vfiprintf_r+0x100>
    c7f8:	06d9      	lsls	r1, r3, #27
    c7fa:	bf44      	itt	mi
    c7fc:	2220      	movmi	r2, #32
    c7fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c802:	071a      	lsls	r2, r3, #28
    c804:	bf44      	itt	mi
    c806:	222b      	movmi	r2, #43	; 0x2b
    c808:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c80c:	782a      	ldrb	r2, [r5, #0]
    c80e:	2a2a      	cmp	r2, #42	; 0x2a
    c810:	d02c      	beq.n	c86c <_vfiprintf_r+0x110>
    c812:	9a07      	ldr	r2, [sp, #28]
    c814:	2100      	movs	r1, #0
    c816:	200a      	movs	r0, #10
    c818:	46a8      	mov	r8, r5
    c81a:	3501      	adds	r5, #1
    c81c:	f898 3000 	ldrb.w	r3, [r8]
    c820:	3b30      	subs	r3, #48	; 0x30
    c822:	2b09      	cmp	r3, #9
    c824:	d96d      	bls.n	c902 <_vfiprintf_r+0x1a6>
    c826:	b371      	cbz	r1, c886 <_vfiprintf_r+0x12a>
    c828:	e026      	b.n	c878 <_vfiprintf_r+0x11c>
    c82a:	4b51      	ldr	r3, [pc, #324]	; (c970 <_vfiprintf_r+0x214>)
    c82c:	429c      	cmp	r4, r3
    c82e:	d101      	bne.n	c834 <_vfiprintf_r+0xd8>
    c830:	68b4      	ldr	r4, [r6, #8]
    c832:	e7a3      	b.n	c77c <_vfiprintf_r+0x20>
    c834:	4b4f      	ldr	r3, [pc, #316]	; (c974 <_vfiprintf_r+0x218>)
    c836:	429c      	cmp	r4, r3
    c838:	bf08      	it	eq
    c83a:	68f4      	ldreq	r4, [r6, #12]
    c83c:	e79e      	b.n	c77c <_vfiprintf_r+0x20>
    c83e:	4621      	mov	r1, r4
    c840:	4630      	mov	r0, r6
    c842:	f7ff fbc3 	bl	bfcc <__swsetup_r>
    c846:	2800      	cmp	r0, #0
    c848:	d09e      	beq.n	c788 <_vfiprintf_r+0x2c>
    c84a:	f04f 30ff 	mov.w	r0, #4294967295
    c84e:	b01d      	add	sp, #116	; 0x74
    c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c854:	2b25      	cmp	r3, #37	; 0x25
    c856:	d0a7      	beq.n	c7a8 <_vfiprintf_r+0x4c>
    c858:	46a8      	mov	r8, r5
    c85a:	e7a0      	b.n	c79e <_vfiprintf_r+0x42>
    c85c:	4a43      	ldr	r2, [pc, #268]	; (c96c <_vfiprintf_r+0x210>)
    c85e:	1a80      	subs	r0, r0, r2
    c860:	fa0b f000 	lsl.w	r0, fp, r0
    c864:	4318      	orrs	r0, r3
    c866:	9004      	str	r0, [sp, #16]
    c868:	4645      	mov	r5, r8
    c86a:	e7bb      	b.n	c7e4 <_vfiprintf_r+0x88>
    c86c:	9a03      	ldr	r2, [sp, #12]
    c86e:	1d11      	adds	r1, r2, #4
    c870:	6812      	ldr	r2, [r2, #0]
    c872:	9103      	str	r1, [sp, #12]
    c874:	2a00      	cmp	r2, #0
    c876:	db01      	blt.n	c87c <_vfiprintf_r+0x120>
    c878:	9207      	str	r2, [sp, #28]
    c87a:	e004      	b.n	c886 <_vfiprintf_r+0x12a>
    c87c:	4252      	negs	r2, r2
    c87e:	f043 0302 	orr.w	r3, r3, #2
    c882:	9207      	str	r2, [sp, #28]
    c884:	9304      	str	r3, [sp, #16]
    c886:	f898 3000 	ldrb.w	r3, [r8]
    c88a:	2b2e      	cmp	r3, #46	; 0x2e
    c88c:	d110      	bne.n	c8b0 <_vfiprintf_r+0x154>
    c88e:	f898 3001 	ldrb.w	r3, [r8, #1]
    c892:	2b2a      	cmp	r3, #42	; 0x2a
    c894:	f108 0101 	add.w	r1, r8, #1
    c898:	d137      	bne.n	c90a <_vfiprintf_r+0x1ae>
    c89a:	9b03      	ldr	r3, [sp, #12]
    c89c:	1d1a      	adds	r2, r3, #4
    c89e:	681b      	ldr	r3, [r3, #0]
    c8a0:	9203      	str	r2, [sp, #12]
    c8a2:	2b00      	cmp	r3, #0
    c8a4:	bfb8      	it	lt
    c8a6:	f04f 33ff 	movlt.w	r3, #4294967295
    c8aa:	f108 0802 	add.w	r8, r8, #2
    c8ae:	9305      	str	r3, [sp, #20]
    c8b0:	4d31      	ldr	r5, [pc, #196]	; (c978 <_vfiprintf_r+0x21c>)
    c8b2:	f898 1000 	ldrb.w	r1, [r8]
    c8b6:	2203      	movs	r2, #3
    c8b8:	4628      	mov	r0, r5
    c8ba:	f000 fa99 	bl	cdf0 <memchr>
    c8be:	b140      	cbz	r0, c8d2 <_vfiprintf_r+0x176>
    c8c0:	2340      	movs	r3, #64	; 0x40
    c8c2:	1b40      	subs	r0, r0, r5
    c8c4:	fa03 f000 	lsl.w	r0, r3, r0
    c8c8:	9b04      	ldr	r3, [sp, #16]
    c8ca:	4303      	orrs	r3, r0
    c8cc:	9304      	str	r3, [sp, #16]
    c8ce:	f108 0801 	add.w	r8, r8, #1
    c8d2:	f898 1000 	ldrb.w	r1, [r8]
    c8d6:	4829      	ldr	r0, [pc, #164]	; (c97c <_vfiprintf_r+0x220>)
    c8d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c8dc:	2206      	movs	r2, #6
    c8de:	f108 0701 	add.w	r7, r8, #1
    c8e2:	f000 fa85 	bl	cdf0 <memchr>
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d034      	beq.n	c954 <_vfiprintf_r+0x1f8>
    c8ea:	4b25      	ldr	r3, [pc, #148]	; (c980 <_vfiprintf_r+0x224>)
    c8ec:	bb03      	cbnz	r3, c930 <_vfiprintf_r+0x1d4>
    c8ee:	9b03      	ldr	r3, [sp, #12]
    c8f0:	3307      	adds	r3, #7
    c8f2:	f023 0307 	bic.w	r3, r3, #7
    c8f6:	3308      	adds	r3, #8
    c8f8:	9303      	str	r3, [sp, #12]
    c8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8fc:	444b      	add	r3, r9
    c8fe:	9309      	str	r3, [sp, #36]	; 0x24
    c900:	e74c      	b.n	c79c <_vfiprintf_r+0x40>
    c902:	fb00 3202 	mla	r2, r0, r2, r3
    c906:	2101      	movs	r1, #1
    c908:	e786      	b.n	c818 <_vfiprintf_r+0xbc>
    c90a:	2300      	movs	r3, #0
    c90c:	9305      	str	r3, [sp, #20]
    c90e:	4618      	mov	r0, r3
    c910:	250a      	movs	r5, #10
    c912:	4688      	mov	r8, r1
    c914:	3101      	adds	r1, #1
    c916:	f898 2000 	ldrb.w	r2, [r8]
    c91a:	3a30      	subs	r2, #48	; 0x30
    c91c:	2a09      	cmp	r2, #9
    c91e:	d903      	bls.n	c928 <_vfiprintf_r+0x1cc>
    c920:	2b00      	cmp	r3, #0
    c922:	d0c5      	beq.n	c8b0 <_vfiprintf_r+0x154>
    c924:	9005      	str	r0, [sp, #20]
    c926:	e7c3      	b.n	c8b0 <_vfiprintf_r+0x154>
    c928:	fb05 2000 	mla	r0, r5, r0, r2
    c92c:	2301      	movs	r3, #1
    c92e:	e7f0      	b.n	c912 <_vfiprintf_r+0x1b6>
    c930:	ab03      	add	r3, sp, #12
    c932:	9300      	str	r3, [sp, #0]
    c934:	4622      	mov	r2, r4
    c936:	4b13      	ldr	r3, [pc, #76]	; (c984 <_vfiprintf_r+0x228>)
    c938:	a904      	add	r1, sp, #16
    c93a:	4630      	mov	r0, r6
    c93c:	f3af 8000 	nop.w
    c940:	f1b0 3fff 	cmp.w	r0, #4294967295
    c944:	4681      	mov	r9, r0
    c946:	d1d8      	bne.n	c8fa <_vfiprintf_r+0x19e>
    c948:	89a3      	ldrh	r3, [r4, #12]
    c94a:	065b      	lsls	r3, r3, #25
    c94c:	f53f af7d 	bmi.w	c84a <_vfiprintf_r+0xee>
    c950:	9809      	ldr	r0, [sp, #36]	; 0x24
    c952:	e77c      	b.n	c84e <_vfiprintf_r+0xf2>
    c954:	ab03      	add	r3, sp, #12
    c956:	9300      	str	r3, [sp, #0]
    c958:	4622      	mov	r2, r4
    c95a:	4b0a      	ldr	r3, [pc, #40]	; (c984 <_vfiprintf_r+0x228>)
    c95c:	a904      	add	r1, sp, #16
    c95e:	4630      	mov	r0, r6
    c960:	f000 f888 	bl	ca74 <_printf_i>
    c964:	e7ec      	b.n	c940 <_vfiprintf_r+0x1e4>
    c966:	bf00      	nop
    c968:	0000d890 	.word	0x0000d890
    c96c:	0000d8d0 	.word	0x0000d8d0
    c970:	0000d8b0 	.word	0x0000d8b0
    c974:	0000d870 	.word	0x0000d870
    c978:	0000d8d6 	.word	0x0000d8d6
    c97c:	0000d8da 	.word	0x0000d8da
    c980:	00000000 	.word	0x00000000
    c984:	0000c739 	.word	0x0000c739

0000c988 <_printf_common>:
    c988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c98c:	4691      	mov	r9, r2
    c98e:	461f      	mov	r7, r3
    c990:	688a      	ldr	r2, [r1, #8]
    c992:	690b      	ldr	r3, [r1, #16]
    c994:	f8dd 8020 	ldr.w	r8, [sp, #32]
    c998:	4293      	cmp	r3, r2
    c99a:	bfb8      	it	lt
    c99c:	4613      	movlt	r3, r2
    c99e:	f8c9 3000 	str.w	r3, [r9]
    c9a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c9a6:	4606      	mov	r6, r0
    c9a8:	460c      	mov	r4, r1
    c9aa:	b112      	cbz	r2, c9b2 <_printf_common+0x2a>
    c9ac:	3301      	adds	r3, #1
    c9ae:	f8c9 3000 	str.w	r3, [r9]
    c9b2:	6823      	ldr	r3, [r4, #0]
    c9b4:	0699      	lsls	r1, r3, #26
    c9b6:	bf42      	ittt	mi
    c9b8:	f8d9 3000 	ldrmi.w	r3, [r9]
    c9bc:	3302      	addmi	r3, #2
    c9be:	f8c9 3000 	strmi.w	r3, [r9]
    c9c2:	6825      	ldr	r5, [r4, #0]
    c9c4:	f015 0506 	ands.w	r5, r5, #6
    c9c8:	d107      	bne.n	c9da <_printf_common+0x52>
    c9ca:	f104 0a19 	add.w	sl, r4, #25
    c9ce:	68e3      	ldr	r3, [r4, #12]
    c9d0:	f8d9 2000 	ldr.w	r2, [r9]
    c9d4:	1a9b      	subs	r3, r3, r2
    c9d6:	429d      	cmp	r5, r3
    c9d8:	db29      	blt.n	ca2e <_printf_common+0xa6>
    c9da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    c9de:	6822      	ldr	r2, [r4, #0]
    c9e0:	3300      	adds	r3, #0
    c9e2:	bf18      	it	ne
    c9e4:	2301      	movne	r3, #1
    c9e6:	0692      	lsls	r2, r2, #26
    c9e8:	d42e      	bmi.n	ca48 <_printf_common+0xc0>
    c9ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c9ee:	4639      	mov	r1, r7
    c9f0:	4630      	mov	r0, r6
    c9f2:	47c0      	blx	r8
    c9f4:	3001      	adds	r0, #1
    c9f6:	d021      	beq.n	ca3c <_printf_common+0xb4>
    c9f8:	6823      	ldr	r3, [r4, #0]
    c9fa:	68e5      	ldr	r5, [r4, #12]
    c9fc:	f8d9 2000 	ldr.w	r2, [r9]
    ca00:	f003 0306 	and.w	r3, r3, #6
    ca04:	2b04      	cmp	r3, #4
    ca06:	bf08      	it	eq
    ca08:	1aad      	subeq	r5, r5, r2
    ca0a:	68a3      	ldr	r3, [r4, #8]
    ca0c:	6922      	ldr	r2, [r4, #16]
    ca0e:	bf0c      	ite	eq
    ca10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    ca14:	2500      	movne	r5, #0
    ca16:	4293      	cmp	r3, r2
    ca18:	bfc4      	itt	gt
    ca1a:	1a9b      	subgt	r3, r3, r2
    ca1c:	18ed      	addgt	r5, r5, r3
    ca1e:	f04f 0900 	mov.w	r9, #0
    ca22:	341a      	adds	r4, #26
    ca24:	454d      	cmp	r5, r9
    ca26:	d11b      	bne.n	ca60 <_printf_common+0xd8>
    ca28:	2000      	movs	r0, #0
    ca2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca2e:	2301      	movs	r3, #1
    ca30:	4652      	mov	r2, sl
    ca32:	4639      	mov	r1, r7
    ca34:	4630      	mov	r0, r6
    ca36:	47c0      	blx	r8
    ca38:	3001      	adds	r0, #1
    ca3a:	d103      	bne.n	ca44 <_printf_common+0xbc>
    ca3c:	f04f 30ff 	mov.w	r0, #4294967295
    ca40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca44:	3501      	adds	r5, #1
    ca46:	e7c2      	b.n	c9ce <_printf_common+0x46>
    ca48:	18e1      	adds	r1, r4, r3
    ca4a:	1c5a      	adds	r2, r3, #1
    ca4c:	2030      	movs	r0, #48	; 0x30
    ca4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    ca52:	4422      	add	r2, r4
    ca54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ca58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    ca5c:	3302      	adds	r3, #2
    ca5e:	e7c4      	b.n	c9ea <_printf_common+0x62>
    ca60:	2301      	movs	r3, #1
    ca62:	4622      	mov	r2, r4
    ca64:	4639      	mov	r1, r7
    ca66:	4630      	mov	r0, r6
    ca68:	47c0      	blx	r8
    ca6a:	3001      	adds	r0, #1
    ca6c:	d0e6      	beq.n	ca3c <_printf_common+0xb4>
    ca6e:	f109 0901 	add.w	r9, r9, #1
    ca72:	e7d7      	b.n	ca24 <_printf_common+0x9c>

0000ca74 <_printf_i>:
    ca74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca78:	4617      	mov	r7, r2
    ca7a:	7e0a      	ldrb	r2, [r1, #24]
    ca7c:	b085      	sub	sp, #20
    ca7e:	2a6e      	cmp	r2, #110	; 0x6e
    ca80:	4698      	mov	r8, r3
    ca82:	4606      	mov	r6, r0
    ca84:	460c      	mov	r4, r1
    ca86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca88:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    ca8c:	f000 80bc 	beq.w	cc08 <_printf_i+0x194>
    ca90:	d81a      	bhi.n	cac8 <_printf_i+0x54>
    ca92:	2a63      	cmp	r2, #99	; 0x63
    ca94:	d02e      	beq.n	caf4 <_printf_i+0x80>
    ca96:	d80a      	bhi.n	caae <_printf_i+0x3a>
    ca98:	2a00      	cmp	r2, #0
    ca9a:	f000 80c8 	beq.w	cc2e <_printf_i+0x1ba>
    ca9e:	2a58      	cmp	r2, #88	; 0x58
    caa0:	f000 808a 	beq.w	cbb8 <_printf_i+0x144>
    caa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    caa8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    caac:	e02a      	b.n	cb04 <_printf_i+0x90>
    caae:	2a64      	cmp	r2, #100	; 0x64
    cab0:	d001      	beq.n	cab6 <_printf_i+0x42>
    cab2:	2a69      	cmp	r2, #105	; 0x69
    cab4:	d1f6      	bne.n	caa4 <_printf_i+0x30>
    cab6:	6821      	ldr	r1, [r4, #0]
    cab8:	681a      	ldr	r2, [r3, #0]
    caba:	f011 0f80 	tst.w	r1, #128	; 0x80
    cabe:	d023      	beq.n	cb08 <_printf_i+0x94>
    cac0:	1d11      	adds	r1, r2, #4
    cac2:	6019      	str	r1, [r3, #0]
    cac4:	6813      	ldr	r3, [r2, #0]
    cac6:	e027      	b.n	cb18 <_printf_i+0xa4>
    cac8:	2a73      	cmp	r2, #115	; 0x73
    caca:	f000 80b4 	beq.w	cc36 <_printf_i+0x1c2>
    cace:	d808      	bhi.n	cae2 <_printf_i+0x6e>
    cad0:	2a6f      	cmp	r2, #111	; 0x6f
    cad2:	d02a      	beq.n	cb2a <_printf_i+0xb6>
    cad4:	2a70      	cmp	r2, #112	; 0x70
    cad6:	d1e5      	bne.n	caa4 <_printf_i+0x30>
    cad8:	680a      	ldr	r2, [r1, #0]
    cada:	f042 0220 	orr.w	r2, r2, #32
    cade:	600a      	str	r2, [r1, #0]
    cae0:	e003      	b.n	caea <_printf_i+0x76>
    cae2:	2a75      	cmp	r2, #117	; 0x75
    cae4:	d021      	beq.n	cb2a <_printf_i+0xb6>
    cae6:	2a78      	cmp	r2, #120	; 0x78
    cae8:	d1dc      	bne.n	caa4 <_printf_i+0x30>
    caea:	2278      	movs	r2, #120	; 0x78
    caec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    caf0:	496e      	ldr	r1, [pc, #440]	; (ccac <_printf_i+0x238>)
    caf2:	e064      	b.n	cbbe <_printf_i+0x14a>
    caf4:	681a      	ldr	r2, [r3, #0]
    caf6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    cafa:	1d11      	adds	r1, r2, #4
    cafc:	6019      	str	r1, [r3, #0]
    cafe:	6813      	ldr	r3, [r2, #0]
    cb00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    cb04:	2301      	movs	r3, #1
    cb06:	e0a3      	b.n	cc50 <_printf_i+0x1dc>
    cb08:	f011 0f40 	tst.w	r1, #64	; 0x40
    cb0c:	f102 0104 	add.w	r1, r2, #4
    cb10:	6019      	str	r1, [r3, #0]
    cb12:	d0d7      	beq.n	cac4 <_printf_i+0x50>
    cb14:	f9b2 3000 	ldrsh.w	r3, [r2]
    cb18:	2b00      	cmp	r3, #0
    cb1a:	da03      	bge.n	cb24 <_printf_i+0xb0>
    cb1c:	222d      	movs	r2, #45	; 0x2d
    cb1e:	425b      	negs	r3, r3
    cb20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    cb24:	4962      	ldr	r1, [pc, #392]	; (ccb0 <_printf_i+0x23c>)
    cb26:	220a      	movs	r2, #10
    cb28:	e017      	b.n	cb5a <_printf_i+0xe6>
    cb2a:	6820      	ldr	r0, [r4, #0]
    cb2c:	6819      	ldr	r1, [r3, #0]
    cb2e:	f010 0f80 	tst.w	r0, #128	; 0x80
    cb32:	d003      	beq.n	cb3c <_printf_i+0xc8>
    cb34:	1d08      	adds	r0, r1, #4
    cb36:	6018      	str	r0, [r3, #0]
    cb38:	680b      	ldr	r3, [r1, #0]
    cb3a:	e006      	b.n	cb4a <_printf_i+0xd6>
    cb3c:	f010 0f40 	tst.w	r0, #64	; 0x40
    cb40:	f101 0004 	add.w	r0, r1, #4
    cb44:	6018      	str	r0, [r3, #0]
    cb46:	d0f7      	beq.n	cb38 <_printf_i+0xc4>
    cb48:	880b      	ldrh	r3, [r1, #0]
    cb4a:	4959      	ldr	r1, [pc, #356]	; (ccb0 <_printf_i+0x23c>)
    cb4c:	2a6f      	cmp	r2, #111	; 0x6f
    cb4e:	bf14      	ite	ne
    cb50:	220a      	movne	r2, #10
    cb52:	2208      	moveq	r2, #8
    cb54:	2000      	movs	r0, #0
    cb56:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    cb5a:	6865      	ldr	r5, [r4, #4]
    cb5c:	60a5      	str	r5, [r4, #8]
    cb5e:	2d00      	cmp	r5, #0
    cb60:	f2c0 809c 	blt.w	cc9c <_printf_i+0x228>
    cb64:	6820      	ldr	r0, [r4, #0]
    cb66:	f020 0004 	bic.w	r0, r0, #4
    cb6a:	6020      	str	r0, [r4, #0]
    cb6c:	2b00      	cmp	r3, #0
    cb6e:	d13f      	bne.n	cbf0 <_printf_i+0x17c>
    cb70:	2d00      	cmp	r5, #0
    cb72:	f040 8095 	bne.w	cca0 <_printf_i+0x22c>
    cb76:	4675      	mov	r5, lr
    cb78:	2a08      	cmp	r2, #8
    cb7a:	d10b      	bne.n	cb94 <_printf_i+0x120>
    cb7c:	6823      	ldr	r3, [r4, #0]
    cb7e:	07da      	lsls	r2, r3, #31
    cb80:	d508      	bpl.n	cb94 <_printf_i+0x120>
    cb82:	6923      	ldr	r3, [r4, #16]
    cb84:	6862      	ldr	r2, [r4, #4]
    cb86:	429a      	cmp	r2, r3
    cb88:	bfde      	ittt	le
    cb8a:	2330      	movle	r3, #48	; 0x30
    cb8c:	f805 3c01 	strble.w	r3, [r5, #-1]
    cb90:	f105 35ff 	addle.w	r5, r5, #4294967295
    cb94:	ebae 0305 	sub.w	r3, lr, r5
    cb98:	6123      	str	r3, [r4, #16]
    cb9a:	f8cd 8000 	str.w	r8, [sp]
    cb9e:	463b      	mov	r3, r7
    cba0:	aa03      	add	r2, sp, #12
    cba2:	4621      	mov	r1, r4
    cba4:	4630      	mov	r0, r6
    cba6:	f7ff feef 	bl	c988 <_printf_common>
    cbaa:	3001      	adds	r0, #1
    cbac:	d155      	bne.n	cc5a <_printf_i+0x1e6>
    cbae:	f04f 30ff 	mov.w	r0, #4294967295
    cbb2:	b005      	add	sp, #20
    cbb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cbb8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    cbbc:	493c      	ldr	r1, [pc, #240]	; (ccb0 <_printf_i+0x23c>)
    cbbe:	6822      	ldr	r2, [r4, #0]
    cbc0:	6818      	ldr	r0, [r3, #0]
    cbc2:	f012 0f80 	tst.w	r2, #128	; 0x80
    cbc6:	f100 0504 	add.w	r5, r0, #4
    cbca:	601d      	str	r5, [r3, #0]
    cbcc:	d001      	beq.n	cbd2 <_printf_i+0x15e>
    cbce:	6803      	ldr	r3, [r0, #0]
    cbd0:	e002      	b.n	cbd8 <_printf_i+0x164>
    cbd2:	0655      	lsls	r5, r2, #25
    cbd4:	d5fb      	bpl.n	cbce <_printf_i+0x15a>
    cbd6:	8803      	ldrh	r3, [r0, #0]
    cbd8:	07d0      	lsls	r0, r2, #31
    cbda:	bf44      	itt	mi
    cbdc:	f042 0220 	orrmi.w	r2, r2, #32
    cbe0:	6022      	strmi	r2, [r4, #0]
    cbe2:	b91b      	cbnz	r3, cbec <_printf_i+0x178>
    cbe4:	6822      	ldr	r2, [r4, #0]
    cbe6:	f022 0220 	bic.w	r2, r2, #32
    cbea:	6022      	str	r2, [r4, #0]
    cbec:	2210      	movs	r2, #16
    cbee:	e7b1      	b.n	cb54 <_printf_i+0xe0>
    cbf0:	4675      	mov	r5, lr
    cbf2:	fbb3 f0f2 	udiv	r0, r3, r2
    cbf6:	fb02 3310 	mls	r3, r2, r0, r3
    cbfa:	5ccb      	ldrb	r3, [r1, r3]
    cbfc:	f805 3d01 	strb.w	r3, [r5, #-1]!
    cc00:	4603      	mov	r3, r0
    cc02:	2800      	cmp	r0, #0
    cc04:	d1f5      	bne.n	cbf2 <_printf_i+0x17e>
    cc06:	e7b7      	b.n	cb78 <_printf_i+0x104>
    cc08:	6808      	ldr	r0, [r1, #0]
    cc0a:	681a      	ldr	r2, [r3, #0]
    cc0c:	6949      	ldr	r1, [r1, #20]
    cc0e:	f010 0f80 	tst.w	r0, #128	; 0x80
    cc12:	d004      	beq.n	cc1e <_printf_i+0x1aa>
    cc14:	1d10      	adds	r0, r2, #4
    cc16:	6018      	str	r0, [r3, #0]
    cc18:	6813      	ldr	r3, [r2, #0]
    cc1a:	6019      	str	r1, [r3, #0]
    cc1c:	e007      	b.n	cc2e <_printf_i+0x1ba>
    cc1e:	f010 0f40 	tst.w	r0, #64	; 0x40
    cc22:	f102 0004 	add.w	r0, r2, #4
    cc26:	6018      	str	r0, [r3, #0]
    cc28:	6813      	ldr	r3, [r2, #0]
    cc2a:	d0f6      	beq.n	cc1a <_printf_i+0x1a6>
    cc2c:	8019      	strh	r1, [r3, #0]
    cc2e:	2300      	movs	r3, #0
    cc30:	6123      	str	r3, [r4, #16]
    cc32:	4675      	mov	r5, lr
    cc34:	e7b1      	b.n	cb9a <_printf_i+0x126>
    cc36:	681a      	ldr	r2, [r3, #0]
    cc38:	1d11      	adds	r1, r2, #4
    cc3a:	6019      	str	r1, [r3, #0]
    cc3c:	6815      	ldr	r5, [r2, #0]
    cc3e:	6862      	ldr	r2, [r4, #4]
    cc40:	2100      	movs	r1, #0
    cc42:	4628      	mov	r0, r5
    cc44:	f000 f8d4 	bl	cdf0 <memchr>
    cc48:	b108      	cbz	r0, cc4e <_printf_i+0x1da>
    cc4a:	1b40      	subs	r0, r0, r5
    cc4c:	6060      	str	r0, [r4, #4]
    cc4e:	6863      	ldr	r3, [r4, #4]
    cc50:	6123      	str	r3, [r4, #16]
    cc52:	2300      	movs	r3, #0
    cc54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    cc58:	e79f      	b.n	cb9a <_printf_i+0x126>
    cc5a:	6923      	ldr	r3, [r4, #16]
    cc5c:	462a      	mov	r2, r5
    cc5e:	4639      	mov	r1, r7
    cc60:	4630      	mov	r0, r6
    cc62:	47c0      	blx	r8
    cc64:	3001      	adds	r0, #1
    cc66:	d0a2      	beq.n	cbae <_printf_i+0x13a>
    cc68:	6823      	ldr	r3, [r4, #0]
    cc6a:	079b      	lsls	r3, r3, #30
    cc6c:	d507      	bpl.n	cc7e <_printf_i+0x20a>
    cc6e:	2500      	movs	r5, #0
    cc70:	f104 0919 	add.w	r9, r4, #25
    cc74:	68e3      	ldr	r3, [r4, #12]
    cc76:	9a03      	ldr	r2, [sp, #12]
    cc78:	1a9b      	subs	r3, r3, r2
    cc7a:	429d      	cmp	r5, r3
    cc7c:	db05      	blt.n	cc8a <_printf_i+0x216>
    cc7e:	68e0      	ldr	r0, [r4, #12]
    cc80:	9b03      	ldr	r3, [sp, #12]
    cc82:	4298      	cmp	r0, r3
    cc84:	bfb8      	it	lt
    cc86:	4618      	movlt	r0, r3
    cc88:	e793      	b.n	cbb2 <_printf_i+0x13e>
    cc8a:	2301      	movs	r3, #1
    cc8c:	464a      	mov	r2, r9
    cc8e:	4639      	mov	r1, r7
    cc90:	4630      	mov	r0, r6
    cc92:	47c0      	blx	r8
    cc94:	3001      	adds	r0, #1
    cc96:	d08a      	beq.n	cbae <_printf_i+0x13a>
    cc98:	3501      	adds	r5, #1
    cc9a:	e7eb      	b.n	cc74 <_printf_i+0x200>
    cc9c:	2b00      	cmp	r3, #0
    cc9e:	d1a7      	bne.n	cbf0 <_printf_i+0x17c>
    cca0:	780b      	ldrb	r3, [r1, #0]
    cca2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    cca6:	f104 0542 	add.w	r5, r4, #66	; 0x42
    ccaa:	e765      	b.n	cb78 <_printf_i+0x104>
    ccac:	0000d8f2 	.word	0x0000d8f2
    ccb0:	0000d8e1 	.word	0x0000d8e1

0000ccb4 <__sread>:
    ccb4:	b510      	push	{r4, lr}
    ccb6:	460c      	mov	r4, r1
    ccb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ccbc:	f000 f928 	bl	cf10 <_read_r>
    ccc0:	2800      	cmp	r0, #0
    ccc2:	bfab      	itete	ge
    ccc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    ccc6:	89a3      	ldrhlt	r3, [r4, #12]
    ccc8:	181b      	addge	r3, r3, r0
    ccca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    ccce:	bfac      	ite	ge
    ccd0:	6563      	strge	r3, [r4, #84]	; 0x54
    ccd2:	81a3      	strhlt	r3, [r4, #12]
    ccd4:	bd10      	pop	{r4, pc}

0000ccd6 <__swrite>:
    ccd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccda:	461f      	mov	r7, r3
    ccdc:	898b      	ldrh	r3, [r1, #12]
    ccde:	05db      	lsls	r3, r3, #23
    cce0:	4605      	mov	r5, r0
    cce2:	460c      	mov	r4, r1
    cce4:	4616      	mov	r6, r2
    cce6:	d505      	bpl.n	ccf4 <__swrite+0x1e>
    cce8:	2302      	movs	r3, #2
    ccea:	2200      	movs	r2, #0
    ccec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ccf0:	f000 f868 	bl	cdc4 <_lseek_r>
    ccf4:	89a3      	ldrh	r3, [r4, #12]
    ccf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ccfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    ccfe:	81a3      	strh	r3, [r4, #12]
    cd00:	4632      	mov	r2, r6
    cd02:	463b      	mov	r3, r7
    cd04:	4628      	mov	r0, r5
    cd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd0a:	f000 b817 	b.w	cd3c <_write_r>

0000cd0e <__sseek>:
    cd0e:	b510      	push	{r4, lr}
    cd10:	460c      	mov	r4, r1
    cd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cd16:	f000 f855 	bl	cdc4 <_lseek_r>
    cd1a:	1c43      	adds	r3, r0, #1
    cd1c:	89a3      	ldrh	r3, [r4, #12]
    cd1e:	bf15      	itete	ne
    cd20:	6560      	strne	r0, [r4, #84]	; 0x54
    cd22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    cd26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    cd2a:	81a3      	strheq	r3, [r4, #12]
    cd2c:	bf18      	it	ne
    cd2e:	81a3      	strhne	r3, [r4, #12]
    cd30:	bd10      	pop	{r4, pc}

0000cd32 <__sclose>:
    cd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cd36:	f000 b813 	b.w	cd60 <_close_r>
	...

0000cd3c <_write_r>:
    cd3c:	b538      	push	{r3, r4, r5, lr}
    cd3e:	4c07      	ldr	r4, [pc, #28]	; (cd5c <_write_r+0x20>)
    cd40:	4605      	mov	r5, r0
    cd42:	4608      	mov	r0, r1
    cd44:	4611      	mov	r1, r2
    cd46:	2200      	movs	r2, #0
    cd48:	6022      	str	r2, [r4, #0]
    cd4a:	461a      	mov	r2, r3
    cd4c:	f7fd f852 	bl	9df4 <_write>
    cd50:	1c43      	adds	r3, r0, #1
    cd52:	d102      	bne.n	cd5a <_write_r+0x1e>
    cd54:	6823      	ldr	r3, [r4, #0]
    cd56:	b103      	cbz	r3, cd5a <_write_r+0x1e>
    cd58:	602b      	str	r3, [r5, #0]
    cd5a:	bd38      	pop	{r3, r4, r5, pc}
    cd5c:	20003d98 	.word	0x20003d98

0000cd60 <_close_r>:
    cd60:	b538      	push	{r3, r4, r5, lr}
    cd62:	4c06      	ldr	r4, [pc, #24]	; (cd7c <_close_r+0x1c>)
    cd64:	2300      	movs	r3, #0
    cd66:	4605      	mov	r5, r0
    cd68:	4608      	mov	r0, r1
    cd6a:	6023      	str	r3, [r4, #0]
    cd6c:	f7f8 feba 	bl	5ae4 <_close>
    cd70:	1c43      	adds	r3, r0, #1
    cd72:	d102      	bne.n	cd7a <_close_r+0x1a>
    cd74:	6823      	ldr	r3, [r4, #0]
    cd76:	b103      	cbz	r3, cd7a <_close_r+0x1a>
    cd78:	602b      	str	r3, [r5, #0]
    cd7a:	bd38      	pop	{r3, r4, r5, pc}
    cd7c:	20003d98 	.word	0x20003d98

0000cd80 <_fstat_r>:
    cd80:	b538      	push	{r3, r4, r5, lr}
    cd82:	4c07      	ldr	r4, [pc, #28]	; (cda0 <_fstat_r+0x20>)
    cd84:	2300      	movs	r3, #0
    cd86:	4605      	mov	r5, r0
    cd88:	4608      	mov	r0, r1
    cd8a:	4611      	mov	r1, r2
    cd8c:	6023      	str	r3, [r4, #0]
    cd8e:	f7f8 feac 	bl	5aea <_fstat>
    cd92:	1c43      	adds	r3, r0, #1
    cd94:	d102      	bne.n	cd9c <_fstat_r+0x1c>
    cd96:	6823      	ldr	r3, [r4, #0]
    cd98:	b103      	cbz	r3, cd9c <_fstat_r+0x1c>
    cd9a:	602b      	str	r3, [r5, #0]
    cd9c:	bd38      	pop	{r3, r4, r5, pc}
    cd9e:	bf00      	nop
    cda0:	20003d98 	.word	0x20003d98

0000cda4 <_isatty_r>:
    cda4:	b538      	push	{r3, r4, r5, lr}
    cda6:	4c06      	ldr	r4, [pc, #24]	; (cdc0 <_isatty_r+0x1c>)
    cda8:	2300      	movs	r3, #0
    cdaa:	4605      	mov	r5, r0
    cdac:	4608      	mov	r0, r1
    cdae:	6023      	str	r3, [r4, #0]
    cdb0:	f7f8 fea0 	bl	5af4 <_isatty>
    cdb4:	1c43      	adds	r3, r0, #1
    cdb6:	d102      	bne.n	cdbe <_isatty_r+0x1a>
    cdb8:	6823      	ldr	r3, [r4, #0]
    cdba:	b103      	cbz	r3, cdbe <_isatty_r+0x1a>
    cdbc:	602b      	str	r3, [r5, #0]
    cdbe:	bd38      	pop	{r3, r4, r5, pc}
    cdc0:	20003d98 	.word	0x20003d98

0000cdc4 <_lseek_r>:
    cdc4:	b538      	push	{r3, r4, r5, lr}
    cdc6:	4c07      	ldr	r4, [pc, #28]	; (cde4 <_lseek_r+0x20>)
    cdc8:	4605      	mov	r5, r0
    cdca:	4608      	mov	r0, r1
    cdcc:	4611      	mov	r1, r2
    cdce:	2200      	movs	r2, #0
    cdd0:	6022      	str	r2, [r4, #0]
    cdd2:	461a      	mov	r2, r3
    cdd4:	f7f8 fe90 	bl	5af8 <_lseek>
    cdd8:	1c43      	adds	r3, r0, #1
    cdda:	d102      	bne.n	cde2 <_lseek_r+0x1e>
    cddc:	6823      	ldr	r3, [r4, #0]
    cdde:	b103      	cbz	r3, cde2 <_lseek_r+0x1e>
    cde0:	602b      	str	r3, [r5, #0]
    cde2:	bd38      	pop	{r3, r4, r5, pc}
    cde4:	20003d98 	.word	0x20003d98
	...

0000cdf0 <memchr>:
    cdf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cdf4:	2a10      	cmp	r2, #16
    cdf6:	db2b      	blt.n	ce50 <memchr+0x60>
    cdf8:	f010 0f07 	tst.w	r0, #7
    cdfc:	d008      	beq.n	ce10 <memchr+0x20>
    cdfe:	f810 3b01 	ldrb.w	r3, [r0], #1
    ce02:	3a01      	subs	r2, #1
    ce04:	428b      	cmp	r3, r1
    ce06:	d02d      	beq.n	ce64 <memchr+0x74>
    ce08:	f010 0f07 	tst.w	r0, #7
    ce0c:	b342      	cbz	r2, ce60 <memchr+0x70>
    ce0e:	d1f6      	bne.n	cdfe <memchr+0xe>
    ce10:	b4f0      	push	{r4, r5, r6, r7}
    ce12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ce16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ce1a:	f022 0407 	bic.w	r4, r2, #7
    ce1e:	f07f 0700 	mvns.w	r7, #0
    ce22:	2300      	movs	r3, #0
    ce24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ce28:	3c08      	subs	r4, #8
    ce2a:	ea85 0501 	eor.w	r5, r5, r1
    ce2e:	ea86 0601 	eor.w	r6, r6, r1
    ce32:	fa85 f547 	uadd8	r5, r5, r7
    ce36:	faa3 f587 	sel	r5, r3, r7
    ce3a:	fa86 f647 	uadd8	r6, r6, r7
    ce3e:	faa5 f687 	sel	r6, r5, r7
    ce42:	b98e      	cbnz	r6, ce68 <memchr+0x78>
    ce44:	d1ee      	bne.n	ce24 <memchr+0x34>
    ce46:	bcf0      	pop	{r4, r5, r6, r7}
    ce48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ce4c:	f002 0207 	and.w	r2, r2, #7
    ce50:	b132      	cbz	r2, ce60 <memchr+0x70>
    ce52:	f810 3b01 	ldrb.w	r3, [r0], #1
    ce56:	3a01      	subs	r2, #1
    ce58:	ea83 0301 	eor.w	r3, r3, r1
    ce5c:	b113      	cbz	r3, ce64 <memchr+0x74>
    ce5e:	d1f8      	bne.n	ce52 <memchr+0x62>
    ce60:	2000      	movs	r0, #0
    ce62:	4770      	bx	lr
    ce64:	3801      	subs	r0, #1
    ce66:	4770      	bx	lr
    ce68:	2d00      	cmp	r5, #0
    ce6a:	bf06      	itte	eq
    ce6c:	4635      	moveq	r5, r6
    ce6e:	3803      	subeq	r0, #3
    ce70:	3807      	subne	r0, #7
    ce72:	f015 0f01 	tst.w	r5, #1
    ce76:	d107      	bne.n	ce88 <memchr+0x98>
    ce78:	3001      	adds	r0, #1
    ce7a:	f415 7f80 	tst.w	r5, #256	; 0x100
    ce7e:	bf02      	ittt	eq
    ce80:	3001      	addeq	r0, #1
    ce82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ce86:	3001      	addeq	r0, #1
    ce88:	bcf0      	pop	{r4, r5, r6, r7}
    ce8a:	3801      	subs	r0, #1
    ce8c:	4770      	bx	lr
    ce8e:	bf00      	nop

0000ce90 <memmove>:
    ce90:	4288      	cmp	r0, r1
    ce92:	b510      	push	{r4, lr}
    ce94:	eb01 0302 	add.w	r3, r1, r2
    ce98:	d803      	bhi.n	cea2 <memmove+0x12>
    ce9a:	1e42      	subs	r2, r0, #1
    ce9c:	4299      	cmp	r1, r3
    ce9e:	d10c      	bne.n	ceba <memmove+0x2a>
    cea0:	bd10      	pop	{r4, pc}
    cea2:	4298      	cmp	r0, r3
    cea4:	d2f9      	bcs.n	ce9a <memmove+0xa>
    cea6:	1881      	adds	r1, r0, r2
    cea8:	1ad2      	subs	r2, r2, r3
    ceaa:	42d3      	cmn	r3, r2
    ceac:	d100      	bne.n	ceb0 <memmove+0x20>
    ceae:	bd10      	pop	{r4, pc}
    ceb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    ceb4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    ceb8:	e7f7      	b.n	ceaa <memmove+0x1a>
    ceba:	f811 4b01 	ldrb.w	r4, [r1], #1
    cebe:	f802 4f01 	strb.w	r4, [r2, #1]!
    cec2:	e7eb      	b.n	ce9c <memmove+0xc>

0000cec4 <_realloc_r>:
    cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cec6:	4607      	mov	r7, r0
    cec8:	4614      	mov	r4, r2
    ceca:	460e      	mov	r6, r1
    cecc:	b921      	cbnz	r1, ced8 <_realloc_r+0x14>
    cece:	4611      	mov	r1, r2
    ced0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ced4:	f7fe be5c 	b.w	bb90 <_malloc_r>
    ced8:	b922      	cbnz	r2, cee4 <_realloc_r+0x20>
    ceda:	f7fe fe0b 	bl	baf4 <_free_r>
    cede:	4625      	mov	r5, r4
    cee0:	4628      	mov	r0, r5
    cee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cee4:	f000 f826 	bl	cf34 <_malloc_usable_size_r>
    cee8:	4284      	cmp	r4, r0
    ceea:	d90f      	bls.n	cf0c <_realloc_r+0x48>
    ceec:	4621      	mov	r1, r4
    ceee:	4638      	mov	r0, r7
    cef0:	f7fe fe4e 	bl	bb90 <_malloc_r>
    cef4:	4605      	mov	r5, r0
    cef6:	2800      	cmp	r0, #0
    cef8:	d0f2      	beq.n	cee0 <_realloc_r+0x1c>
    cefa:	4631      	mov	r1, r6
    cefc:	4622      	mov	r2, r4
    cefe:	f7fe fde5 	bl	bacc <memcpy>
    cf02:	4631      	mov	r1, r6
    cf04:	4638      	mov	r0, r7
    cf06:	f7fe fdf5 	bl	baf4 <_free_r>
    cf0a:	e7e9      	b.n	cee0 <_realloc_r+0x1c>
    cf0c:	4635      	mov	r5, r6
    cf0e:	e7e7      	b.n	cee0 <_realloc_r+0x1c>

0000cf10 <_read_r>:
    cf10:	b538      	push	{r3, r4, r5, lr}
    cf12:	4c07      	ldr	r4, [pc, #28]	; (cf30 <_read_r+0x20>)
    cf14:	4605      	mov	r5, r0
    cf16:	4608      	mov	r0, r1
    cf18:	4611      	mov	r1, r2
    cf1a:	2200      	movs	r2, #0
    cf1c:	6022      	str	r2, [r4, #0]
    cf1e:	461a      	mov	r2, r3
    cf20:	f7fc ff58 	bl	9dd4 <_read>
    cf24:	1c43      	adds	r3, r0, #1
    cf26:	d102      	bne.n	cf2e <_read_r+0x1e>
    cf28:	6823      	ldr	r3, [r4, #0]
    cf2a:	b103      	cbz	r3, cf2e <_read_r+0x1e>
    cf2c:	602b      	str	r3, [r5, #0]
    cf2e:	bd38      	pop	{r3, r4, r5, pc}
    cf30:	20003d98 	.word	0x20003d98

0000cf34 <_malloc_usable_size_r>:
    cf34:	f851 0c04 	ldr.w	r0, [r1, #-4]
    cf38:	2800      	cmp	r0, #0
    cf3a:	f1a0 0004 	sub.w	r0, r0, #4
    cf3e:	bfbc      	itt	lt
    cf40:	580b      	ldrlt	r3, [r1, r0]
    cf42:	18c0      	addlt	r0, r0, r3
    cf44:	4770      	bx	lr
    cf46:	0000      	movs	r0, r0
    cf48:	682f2e2e 	.word	0x682f2e2e
    cf4c:	692f6c61 	.word	0x692f6c61
    cf50:	756c636e 	.word	0x756c636e
    cf54:	682f6564 	.word	0x682f6564
    cf58:	775f6c61 	.word	0x775f6c61
    cf5c:	682e7464 	.word	0x682e7464
    cf60:	00000000 	.word	0x00000000
    cf64:	4952475b 	.word	0x4952475b
    cf68:	25205d44 	.word	0x25205d44
    cf6c:	25206433 	.word	0x25206433
    cf70:	25206434 	.word	0x25206434
    cf74:	25206434 	.word	0x25206434
    cf78:	4d5b2064 	.word	0x4d5b2064
    cf7c:	5d494449 	.word	0x5d494449
    cf80:	3a684320 	.word	0x3a684320
    cf84:	20642520 	.word	0x20642520
    cf88:	646d4320 	.word	0x646d4320
    cf8c:	6425203a 	.word	0x6425203a
    cf90:	61502020 	.word	0x61502020
    cf94:	316d6172 	.word	0x316d6172
    cf98:	6425203a 	.word	0x6425203a
    cf9c:	61502020 	.word	0x61502020
    cfa0:	326d6172 	.word	0x326d6172
    cfa4:	6425203a 	.word	0x6425203a
    cfa8:	0000000a 	.word	0x0000000a
    cfac:	4952475b 	.word	0x4952475b
    cfb0:	25205d44 	.word	0x25205d44
    cfb4:	25206433 	.word	0x25206433
    cfb8:	25206434 	.word	0x25206434
    cfbc:	25206434 	.word	0x25206434
    cfc0:	4b5b2064 	.word	0x4b5b2064
    cfc4:	4f425945 	.word	0x4f425945
    cfc8:	5d445241 	.word	0x5d445241
    cfcc:	79654b20 	.word	0x79654b20
    cfd0:	6425203a 	.word	0x6425203a
    cfd4:	646f4d20 	.word	0x646f4d20
    cfd8:	6425203a 	.word	0x6425203a
    cfdc:	646d4320 	.word	0x646d4320
    cfe0:	6425203a 	.word	0x6425203a
    cfe4:	4357480a 	.word	0x4357480a
    cfe8:	203a4746 	.word	0x203a4746
    cfec:	78383025 	.word	0x78383025
    cff0:	0000000a 	.word	0x0000000a
    cff4:	4952475b 	.word	0x4952475b
    cff8:	25205d44 	.word	0x25205d44
    cffc:	25206433 	.word	0x25206433
    d000:	25206434 	.word	0x25206434
    d004:	25206434 	.word	0x25206434
    d008:	535b2064 	.word	0x535b2064
    d00c:	205d5359 	.word	0x205d5359
    d010:	20643325 	.word	0x20643325
    d014:	20643325 	.word	0x20643325
    d018:	0a643325 	.word	0x0a643325
    d01c:	00000000 	.word	0x00000000
    d020:	4b4e555b 	.word	0x4b4e555b
    d024:	4e574f4e 	.word	0x4e574f4e
    d028:	3e2d205d 	.word	0x3e2d205d
    d02c:	6f725020 	.word	0x6f725020
    d030:	6f636f74 	.word	0x6f636f74
    d034:	25203a6c 	.word	0x25203a6c
    d038:	00000a64 	.word	0x00000a64
    d03c:	0f0e0d0c 	.word	0x0f0e0d0c
    d040:	0b0a0908 	.word	0x0b0a0908
    d044:	07060504 	.word	0x07060504
    d048:	03020100 	.word	0x03020100
    d04c:	30256325 	.word	0x30256325
    d050:	30257832 	.word	0x30257832
    d054:	30257832 	.word	0x30257832
    d058:	30257832 	.word	0x30257832
    d05c:	30257832 	.word	0x30257832
    d060:	63257832 	.word	0x63257832
    d064:	30256325 	.word	0x30256325
    d068:	30257832 	.word	0x30257832
    d06c:	30257832 	.word	0x30257832
    d070:	30257832 	.word	0x30257832
    d074:	30257832 	.word	0x30257832
    d078:	63257832 	.word	0x63257832
    d07c:	00000000 	.word	0x00000000
    d080:	78383025 	.word	0x78383025
    d084:	00000000 	.word	0x00000000
    d088:	30256325 	.word	0x30256325
    d08c:	30257832 	.word	0x30257832
    d090:	30257832 	.word	0x30257832
    d094:	30257832 	.word	0x30257832
    d098:	63257832 	.word	0x63257832
    d09c:	00000000 	.word	0x00000000
    d0a0:	63256325 	.word	0x63256325
    d0a4:	63256325 	.word	0x63256325
    d0a8:	78383025 	.word	0x78383025
    d0ac:	30306325 	.word	0x30306325
    d0b0:	0000000a 	.word	0x0000000a
    d0b4:	63256325 	.word	0x63256325
    d0b8:	78323025 	.word	0x78323025
    d0bc:	78323025 	.word	0x78323025
    d0c0:	78323025 	.word	0x78323025
    d0c4:	78323025 	.word	0x78323025
    d0c8:	78323025 	.word	0x78323025
    d0cc:	00006325 	.word	0x00006325
    d0d0:	78323025 	.word	0x78323025
    d0d4:	00000000 	.word	0x00000000
    d0d8:	000a3030 	.word	0x000a3030
    d0dc:	682f2e2e 	.word	0x682f2e2e
    d0e0:	732f6c61 	.word	0x732f6c61
    d0e4:	682f6372 	.word	0x682f6372
    d0e8:	615f6c61 	.word	0x615f6c61
    d0ec:	615f6364 	.word	0x615f6364
    d0f0:	636e7973 	.word	0x636e7973
    d0f4:	0000632e 	.word	0x0000632e
    d0f8:	682f2e2e 	.word	0x682f2e2e
    d0fc:	732f6c61 	.word	0x732f6c61
    d100:	682f6372 	.word	0x682f6372
    d104:	635f6c61 	.word	0x635f6c61
    d108:	735f6372 	.word	0x735f6372
    d10c:	2e636e79 	.word	0x2e636e79
    d110:	00000063 	.word	0x00000063
    d114:	682f2e2e 	.word	0x682f2e2e
    d118:	732f6c61 	.word	0x732f6c61
    d11c:	682f6372 	.word	0x682f6372
    d120:	665f6c61 	.word	0x665f6c61
    d124:	6873616c 	.word	0x6873616c
    d128:	0000632e 	.word	0x0000632e
    d12c:	682f2e2e 	.word	0x682f2e2e
    d130:	732f6c61 	.word	0x732f6c61
    d134:	682f6372 	.word	0x682f6372
    d138:	695f6c61 	.word	0x695f6c61
    d13c:	6d5f6332 	.word	0x6d5f6332
    d140:	7973615f 	.word	0x7973615f
    d144:	632e636e 	.word	0x632e636e
    d148:	00000000 	.word	0x00000000
    d14c:	682f2e2e 	.word	0x682f2e2e
    d150:	732f6c61 	.word	0x732f6c61
    d154:	682f6372 	.word	0x682f6372
    d158:	695f6c61 	.word	0x695f6c61
    d15c:	00632e6f 	.word	0x00632e6f
    d160:	682f2e2e 	.word	0x682f2e2e
    d164:	732f6c61 	.word	0x732f6c61
    d168:	682f6372 	.word	0x682f6372
    d16c:	715f6c61 	.word	0x715f6c61
    d170:	5f697073 	.word	0x5f697073
    d174:	2e616d64 	.word	0x2e616d64
    d178:	00000063 	.word	0x00000063
    d17c:	682f2e2e 	.word	0x682f2e2e
    d180:	732f6c61 	.word	0x732f6c61
    d184:	682f6372 	.word	0x682f6372
    d188:	735f6c61 	.word	0x735f6c61
    d18c:	6d5f6970 	.word	0x6d5f6970
    d190:	7973615f 	.word	0x7973615f
    d194:	632e636e 	.word	0x632e636e
    d198:	00000000 	.word	0x00000000
    d19c:	682f2e2e 	.word	0x682f2e2e
    d1a0:	732f6c61 	.word	0x732f6c61
    d1a4:	682f6372 	.word	0x682f6372
    d1a8:	735f6c61 	.word	0x735f6c61
    d1ac:	6d5f6970 	.word	0x6d5f6970
    d1b0:	616d645f 	.word	0x616d645f
    d1b4:	0000632e 	.word	0x0000632e
    d1b8:	682f2e2e 	.word	0x682f2e2e
    d1bc:	732f6c61 	.word	0x732f6c61
    d1c0:	682f6372 	.word	0x682f6372
    d1c4:	745f6c61 	.word	0x745f6c61
    d1c8:	72656d69 	.word	0x72656d69
    d1cc:	0000632e 	.word	0x0000632e
    d1d0:	682f2e2e 	.word	0x682f2e2e
    d1d4:	732f6c61 	.word	0x732f6c61
    d1d8:	682f6372 	.word	0x682f6372
    d1dc:	755f6c61 	.word	0x755f6c61
    d1e0:	74726173 	.word	0x74726173
    d1e4:	7973615f 	.word	0x7973615f
    d1e8:	632e636e 	.word	0x632e636e
    d1ec:	00000000 	.word	0x00000000
    d1f0:	682f2e2e 	.word	0x682f2e2e
    d1f4:	732f6c61 	.word	0x732f6c61
    d1f8:	682f6372 	.word	0x682f6372
    d1fc:	755f6c61 	.word	0x755f6c61
    d200:	74726173 	.word	0x74726173
    d204:	6e79735f 	.word	0x6e79735f
    d208:	00632e63 	.word	0x00632e63
    d20c:	682f2e2e 	.word	0x682f2e2e
    d210:	752f6c61 	.word	0x752f6c61
    d214:	736c6974 	.word	0x736c6974
    d218:	6372732f 	.word	0x6372732f
    d21c:	6974752f 	.word	0x6974752f
    d220:	6c5f736c 	.word	0x6c5f736c
    d224:	2e747369 	.word	0x2e747369
    d228:	00000063 	.word	0x00000063
    d22c:	682f2e2e 	.word	0x682f2e2e
    d230:	752f6c61 	.word	0x752f6c61
    d234:	736c6974 	.word	0x736c6974
    d238:	6372732f 	.word	0x6372732f
    d23c:	6974752f 	.word	0x6974752f
    d240:	725f736c 	.word	0x725f736c
    d244:	62676e69 	.word	0x62676e69
    d248:	65666675 	.word	0x65666675
    d24c:	00632e72 	.word	0x00632e72

0000d250 <_adcs>:
    d250:	01000000 0003000c 00041807 00000000     ................
    d260:	0014080b 00010000 000c0100 18040003     ................
    d270:	00000004 080b0000 00000014 682f2e2e     ............../h
    d280:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    d290:	00000000                                ....

0000d294 <_cfgs>:
    d294:	00200600 08068000 00200400 08068000     .. ....... .....
    d2a4:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    d2c4:	00200b00 14000003 00200a00 08000002     .. ....... .....
    d2d4:	00201300 14000003 00000000 00000000     .. .............
	...
    d384:	00005400 1c000000 00005300 0c000000     .T.......S......

0000d394 <user_mux_confs>:
	...
    d3c0:	04030201 04030201 00000000 00000000     ................
	...

0000d3d8 <channel_confs>:
    d3d8:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000d418 <interrupt_cfg>:
    d418:	00000002 00000002 00000002 00000002     ................
	...
    d498:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    d4a8:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    d4b8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    d4c8:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    d4d8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    d4e8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    d4f8:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000d508 <_usarts>:
    d508:	00000000 40100004 00030000 00700002     .......@......p.
    d518:	0000aaaa 00000000 00000001 40100004     ...............@
    d528:	00030000 00700002 0000aaaa 00000000     ......p.........
    d538:	00000002 40100004 00030000 00700002     .......@......p.
    d548:	00005555 00000000 00000004 40100004     UU.............@
    d558:	00030000 00700002 0000aaaa 00000000     ......p.........
    d568:	00000006 40100004 00030000 00700002     .......@......p.
    d578:	0000aaaa 00000000                       ........

0000d580 <_i2cms>:
    d580:	00000005 00200014 00000100 0000e6e5     ...... .........
    d590:	00d70000 02dc6c00                       .....l..

0000d598 <sercomspi_regs>:
    d598:	3020000c 00020000 00000000 01ff0005     .. 0............
    d5a8:	20000c03 00000000 00000000 ff000600     ... ............
    d5b8:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    d5c8:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    d5d8:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    d5e8:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000d5f8 <_tcs>:
    d5f8:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    d608:	00000000 006c0001 00000308 00000021     ......l.....!...
    d618:	00003a98 00000000 006d0002 00000308     .:........m.....
    d628:	00000021 00003a98 00000000 006e0003     !....:........n.
    d638:	00000308 00000021 00003a98 00000000     ....!....:......
    d648:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    d658:	0000632e                                .c..

0000d65c <_usb_ep_cfgs>:
    d65c:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    d674:	20000d20 00000000 00000008 20000ce0      .. ........... 
    d684:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    d69c:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    d6ac:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    d6bc:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
    d6cc:	64657472 00000d0a 73616c46 72652068     rted....Flash er
    d6dc:	20657361 63637573 66737365 0d0a6c75     ase successful..
    d6ec:	00000000 73616c46 72772068 20657469     ....Flash write 
    d6fc:	63637573 66737365 0d0a6c75 00000000     successful......
    d70c:	73616c46 65722068 73206461 65636375     Flash read succe
    d71c:	75667373 000d0a6c 73616c46 61642068     ssful...Flash da
    d72c:	76206174 66697265 74616369 206e6f69     ta verification 
    d73c:	6c696166 0a2e6465 0000000d 74697257     failed......Writ
    d74c:	202d2065 64616552 20736920 63637573     e - Read is succ
    d75c:	66737365 69206c75 5351206e 46204950     essful in QSPI F
    d76c:	6873616c 6d656d20 2e79726f 00000d0a     lash memory.....
    d77c:	74696e49 696c6169 6974617a 000d6e6f     Initialization..
    d78c:	65746e45 676e6972 69614d20 6f4c206e     Entering Main Lo
    d79c:	000d706f 20425355 6e6e6f43 65746365     op..USB Connecte
    d7ac:	00000d64 7974227b 3a226570 53415422     d...{"type":"TAS
    d7bc:	202c224b 74616422 203a2261 6425225b     K", "data": ["%d
    d7cc:	22202c22 2c226425 64252220 22202c22     ", "%d", "%d", "
    d7dc:	5d226425 000a0d7d                       %d"]}...

0000d7e4 <keyboard_report_desc>:
    d7e4:	06090105 070501a1 e729e019 01250015     ..........)...%.
    d7f4:	08950175 01810281 65290019 65250015     u.........)e..%e
    d804:	06950875 08050081 05290119 01250015     u.........)...%.
    d814:	05950175 03950291 00c00191              u...........

0000d820 <mouse_report_desc>:
    d820:	02090105 010901a1 090500a1 03290119     ..............).
    d830:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    d840:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    d850:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    d860:	73752f65 2e636462 00000063              e/usbdc.c...

0000d86c <_global_impure_ptr>:
    d86c:	2000055c                                \.. 

0000d870 <__sf_fake_stderr>:
	...

0000d890 <__sf_fake_stdin>:
	...

0000d8b0 <__sf_fake_stdout>:
	...
    d8d0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    d8e0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    d8f0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    d900:	00006665                                ef..

0000d904 <_init>:
    d904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d906:	bf00      	nop
    d908:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d90a:	bc08      	pop	{r3}
    d90c:	469e      	mov	lr, r3
    d90e:	4770      	bx	lr

0000d910 <__init_array_start>:
    d910:	00000289 	.word	0x00000289

0000d914 <_fini>:
    d914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d916:	bf00      	nop
    d918:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d91a:	bc08      	pop	{r3}
    d91c:	469e      	mov	lr, r3
    d91e:	4770      	bx	lr

0000d920 <__fini_array_start>:
    d920:	00000265 	.word	0x00000265
