
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a50  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000368  20000000  00003a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020368  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020368  2**0
                  CONTENTS
  4 .bss          00000c04  20000370  00003dc0  00020368  2**4
                  ALLOC
  5 .stack        00010004  20000f74  000049c4  00020368  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020396  2**0
                  CONTENTS, READONLY
  8 .debug_info   00031355  00000000  00000000  000203ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004398  00000000  00000000  00051744  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014403  00000000  00000000  00055adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001128  00000000  00000000  00069edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001590  00000000  00000000  0006b007  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030c80  00000000  00000000  0006c597  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018e76  00000000  00000000  0009d217  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105422  00000000  00000000  000b608d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031b8  00000000  00000000  001bb4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 0f 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     x.. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 b5 1a 00 00 c9 1a 00 00     ................
      bc:	6d 19 00 00 79 19 00 00 85 19 00 00 91 19 00 00     m...y...........
      cc:	9d 19 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	f5 1b 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 e5 23 00 00 f9 23 00 00 0d 24 00 00     .....#...#...$..
     124:	21 24 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     !$..............
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 35 24 00 00 49 24 00 00 5d 24 00 00     ....5$..I$..]$..
     154:	71 24 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     q$..............
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 2d 16 00 00 41 16 00 00 55 16 00 00     ....-...A...U...
     224:	69 16 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     i...............
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000370 	.word	0x20000370
     280:	00000000 	.word	0x00000000
     284:	00003a50 	.word	0x00003a50

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003a50 	.word	0x00003a50
     2c4:	20000374 	.word	0x20000374
     2c8:	00003a50 	.word	0x00003a50
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	0000075d 	.word	0x0000075d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	00003a50 	.word	0x00003a50
     35c:	20000368 	.word	0x20000368
     360:	20000f74 	.word	0x20000f74
     364:	20000370 	.word	0x20000370
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00002dc1 	.word	0x00002dc1
     374:	00002be9 	.word	0x00002be9

00000378 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     37c:	4a1b      	ldr	r2, [pc, #108]	; (3ec <ADC_0_init+0x74>)
     37e:	6a13      	ldr	r3, [r2, #32]
     380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     384:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     386:	2240      	movs	r2, #64	; 0x40
     388:	4b19      	ldr	r3, [pc, #100]	; (3f0 <ADC_0_init+0x78>)
     38a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     38e:	4e19      	ldr	r6, [pc, #100]	; (3f4 <ADC_0_init+0x7c>)
     390:	4d19      	ldr	r5, [pc, #100]	; (3f8 <ADC_0_init+0x80>)
     392:	2400      	movs	r4, #0
     394:	9402      	str	r4, [sp, #8]
     396:	4b19      	ldr	r3, [pc, #100]	; (3fc <ADC_0_init+0x84>)
     398:	9301      	str	r3, [sp, #4]
     39a:	2301      	movs	r3, #1
     39c:	9300      	str	r3, [sp, #0]
     39e:	4623      	mov	r3, r4
     3a0:	4632      	mov	r2, r6
     3a2:	4917      	ldr	r1, [pc, #92]	; (400 <ADC_0_init+0x88>)
     3a4:	4628      	mov	r0, r5
     3a6:	4f17      	ldr	r7, [pc, #92]	; (404 <ADC_0_init+0x8c>)
     3a8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3aa:	2310      	movs	r3, #16
     3ac:	1d32      	adds	r2, r6, #4
     3ae:	4621      	mov	r1, r4
     3b0:	4628      	mov	r0, r5
     3b2:	4c15      	ldr	r4, [pc, #84]	; (408 <ADC_0_init+0x90>)
     3b4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b6:	4b15      	ldr	r3, [pc, #84]	; (40c <ADC_0_init+0x94>)
     3b8:	2280      	movs	r2, #128	; 0x80
     3ba:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c0:	629a      	str	r2, [r3, #40]	; 0x28
     3c2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3c6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3dc:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3e8:	b005      	add	sp, #20
     3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00
     3f4:	2000038c 	.word	0x2000038c
     3f8:	20000a54 	.word	0x20000a54
     3fc:	20000aac 	.word	0x20000aac
     400:	43001c00 	.word	0x43001c00
     404:	000008d1 	.word	0x000008d1
     408:	00000975 	.word	0x00000975
     40c:	41008000 	.word	0x41008000

00000410 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     410:	b5f0      	push	{r4, r5, r6, r7, lr}
     412:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     414:	4a1e      	ldr	r2, [pc, #120]	; (490 <ADC_1_init+0x80>)
     416:	6a13      	ldr	r3, [r2, #32]
     418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     41c:	6213      	str	r3, [r2, #32]
     41e:	2240      	movs	r2, #64	; 0x40
     420:	4b1c      	ldr	r3, [pc, #112]	; (494 <ADC_1_init+0x84>)
     422:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     426:	4e1c      	ldr	r6, [pc, #112]	; (498 <ADC_1_init+0x88>)
     428:	4d1c      	ldr	r5, [pc, #112]	; (49c <ADC_1_init+0x8c>)
     42a:	2400      	movs	r4, #0
     42c:	9402      	str	r4, [sp, #8]
     42e:	4b1c      	ldr	r3, [pc, #112]	; (4a0 <ADC_1_init+0x90>)
     430:	9301      	str	r3, [sp, #4]
     432:	2301      	movs	r3, #1
     434:	9300      	str	r3, [sp, #0]
     436:	4623      	mov	r3, r4
     438:	f106 0214 	add.w	r2, r6, #20
     43c:	4919      	ldr	r1, [pc, #100]	; (4a4 <ADC_1_init+0x94>)
     43e:	4628      	mov	r0, r5
     440:	4f19      	ldr	r7, [pc, #100]	; (4a8 <ADC_1_init+0x98>)
     442:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     444:	2310      	movs	r3, #16
     446:	f106 0218 	add.w	r2, r6, #24
     44a:	4621      	mov	r1, r4
     44c:	4628      	mov	r0, r5
     44e:	4c17      	ldr	r4, [pc, #92]	; (4ac <ADC_1_init+0x9c>)
     450:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     452:	4b17      	ldr	r3, [pc, #92]	; (4b0 <ADC_1_init+0xa0>)
     454:	2204      	movs	r2, #4
     456:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     45a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     45e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     462:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     472:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     476:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     47a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     47e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     486:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     48a:	b005      	add	sp, #20
     48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48e:	bf00      	nop
     490:	40000800 	.word	0x40000800
     494:	40001c00 	.word	0x40001c00
     498:	2000038c 	.word	0x2000038c
     49c:	20000ac4 	.word	0x20000ac4
     4a0:	200009ac 	.word	0x200009ac
     4a4:	43002000 	.word	0x43002000
     4a8:	000008d1 	.word	0x000008d1
     4ac:	00000975 	.word	0x00000975
     4b0:	41008000 	.word	0x41008000

000004b4 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     4b4:	4a02      	ldr	r2, [pc, #8]	; (4c0 <FLASH_0_CLOCK_init+0xc>)
     4b6:	6913      	ldr	r3, [r2, #16]
     4b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     4bc:	6113      	str	r3, [r2, #16]
     4be:	4770      	bx	lr
     4c0:	40000800 	.word	0x40000800

000004c4 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     4c6:	4b03      	ldr	r3, [pc, #12]	; (4d4 <FLASH_0_init+0x10>)
     4c8:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     4ca:	4903      	ldr	r1, [pc, #12]	; (4d8 <FLASH_0_init+0x14>)
     4cc:	4803      	ldr	r0, [pc, #12]	; (4dc <FLASH_0_init+0x18>)
     4ce:	4b04      	ldr	r3, [pc, #16]	; (4e0 <FLASH_0_init+0x1c>)
     4d0:	4798      	blx	r3
     4d2:	bd08      	pop	{r3, pc}
     4d4:	000004b5 	.word	0x000004b5
     4d8:	41004000 	.word	0x41004000
     4dc:	20000990 	.word	0x20000990
     4e0:	00000c59 	.word	0x00000c59

000004e4 <GRID_AUX_CLOCK_init>:
     4e4:	4b06      	ldr	r3, [pc, #24]	; (500 <GRID_AUX_CLOCK_init+0x1c>)
     4e6:	2240      	movs	r2, #64	; 0x40
     4e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     4ec:	2243      	movs	r2, #67	; 0x43
     4ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     4f2:	4a04      	ldr	r2, [pc, #16]	; (504 <GRID_AUX_CLOCK_init+0x20>)
     4f4:	6993      	ldr	r3, [r2, #24]
     4f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     4fa:	6193      	str	r3, [r2, #24]
     4fc:	4770      	bx	lr
     4fe:	bf00      	nop
     500:	40001c00 	.word	0x40001c00
     504:	40000800 	.word	0x40000800

00000508 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     508:	4b10      	ldr	r3, [pc, #64]	; (54c <GRID_AUX_PORT_init+0x44>)
     50a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     50e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     512:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     516:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     51a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     51e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     522:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     526:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     52e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     532:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     53e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     542:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     546:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     54a:	4770      	bx	lr
     54c:	41008000 	.word	0x41008000

00000550 <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     550:	b510      	push	{r4, lr}
     552:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     554:	4b06      	ldr	r3, [pc, #24]	; (570 <GRID_AUX_init+0x20>)
     556:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     558:	2300      	movs	r3, #0
     55a:	9300      	str	r3, [sp, #0]
     55c:	2310      	movs	r3, #16
     55e:	4a05      	ldr	r2, [pc, #20]	; (574 <GRID_AUX_init+0x24>)
     560:	4905      	ldr	r1, [pc, #20]	; (578 <GRID_AUX_init+0x28>)
     562:	4806      	ldr	r0, [pc, #24]	; (57c <GRID_AUX_init+0x2c>)
     564:	4c06      	ldr	r4, [pc, #24]	; (580 <GRID_AUX_init+0x30>)
     566:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     568:	4b06      	ldr	r3, [pc, #24]	; (584 <GRID_AUX_init+0x34>)
     56a:	4798      	blx	r3
}
     56c:	b002      	add	sp, #8
     56e:	bd10      	pop	{r4, pc}
     570:	000004e5 	.word	0x000004e5
     574:	200003b4 	.word	0x200003b4
     578:	41012000 	.word	0x41012000
     57c:	20000a04 	.word	0x20000a04
     580:	000010bd 	.word	0x000010bd
     584:	00000509 	.word	0x00000509

00000588 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     588:	4b16      	ldr	r3, [pc, #88]	; (5e4 <SYS_I2C_PORT_init+0x5c>)
     58a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     58e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     592:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     596:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     59a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ae:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5b6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     5ba:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5be:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     5c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5d6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5da:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5de:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     5e2:	4770      	bx	lr
     5e4:	41008000 	.word	0x41008000

000005e8 <SYS_I2C_CLOCK_init>:
     5e8:	4b06      	ldr	r3, [pc, #24]	; (604 <SYS_I2C_CLOCK_init+0x1c>)
     5ea:	2240      	movs	r2, #64	; 0x40
     5ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     5f0:	2243      	movs	r2, #67	; 0x43
     5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     5f6:	4a04      	ldr	r2, [pc, #16]	; (608 <SYS_I2C_CLOCK_init+0x20>)
     5f8:	6a13      	ldr	r3, [r2, #32]
     5fa:	f043 0302 	orr.w	r3, r3, #2
     5fe:	6213      	str	r3, [r2, #32]
     600:	4770      	bx	lr
     602:	bf00      	nop
     604:	40001c00 	.word	0x40001c00
     608:	40000800 	.word	0x40000800

0000060c <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     60c:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     60e:	4b04      	ldr	r3, [pc, #16]	; (620 <SYS_I2C_init+0x14>)
     610:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     612:	4904      	ldr	r1, [pc, #16]	; (624 <SYS_I2C_init+0x18>)
     614:	4804      	ldr	r0, [pc, #16]	; (628 <SYS_I2C_init+0x1c>)
     616:	4b05      	ldr	r3, [pc, #20]	; (62c <SYS_I2C_init+0x20>)
     618:	4798      	blx	r3
	SYS_I2C_PORT_init();
     61a:	4b05      	ldr	r3, [pc, #20]	; (630 <SYS_I2C_init+0x24>)
     61c:	4798      	blx	r3
     61e:	bd08      	pop	{r3, pc}
     620:	000005e9 	.word	0x000005e9
     624:	43000400 	.word	0x43000400
     628:	200009c4 	.word	0x200009c4
     62c:	00000d39 	.word	0x00000d39
     630:	00000589 	.word	0x00000589

00000634 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     634:	4b2d      	ldr	r3, [pc, #180]	; (6ec <GRID_LED_PORT_init+0xb8>)
     636:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     63a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     63e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     642:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     646:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     64a:	4a29      	ldr	r2, [pc, #164]	; (6f0 <GRID_LED_PORT_init+0xbc>)
     64c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     650:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     658:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     660:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     664:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     668:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     674:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     680:	4a1c      	ldr	r2, [pc, #112]	; (6f4 <GRID_LED_PORT_init+0xc0>)
     682:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     686:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     68a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     692:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     69e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     6aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ae:	4a12      	ldr	r2, [pc, #72]	; (6f8 <GRID_LED_PORT_init+0xc4>)
     6b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6b4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     6b8:	3204      	adds	r2, #4
     6ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6be:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
     6c2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6c6:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ca:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6d6:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6da:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6de:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6e2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
     6ea:	4770      	bx	lr
     6ec:	41008000 	.word	0x41008000
     6f0:	c0000020 	.word	0xc0000020
     6f4:	c0000010 	.word	0xc0000010
     6f8:	40020000 	.word	0x40020000

000006fc <GRID_LED_CLOCK_init>:
     6fc:	4b06      	ldr	r3, [pc, #24]	; (718 <GRID_LED_CLOCK_init+0x1c>)
     6fe:	2240      	movs	r2, #64	; 0x40
     700:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     704:	2243      	movs	r2, #67	; 0x43
     706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     70a:	4a04      	ldr	r2, [pc, #16]	; (71c <GRID_LED_CLOCK_init+0x20>)
     70c:	6a13      	ldr	r3, [r2, #32]
     70e:	f043 0308 	orr.w	r3, r3, #8
     712:	6213      	str	r3, [r2, #32]
     714:	4770      	bx	lr
     716:	bf00      	nop
     718:	40001c00 	.word	0x40001c00
     71c:	40000800 	.word	0x40000800

00000720 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     720:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     722:	4b04      	ldr	r3, [pc, #16]	; (734 <GRID_LED_init+0x14>)
     724:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     726:	4904      	ldr	r1, [pc, #16]	; (738 <GRID_LED_init+0x18>)
     728:	4804      	ldr	r0, [pc, #16]	; (73c <GRID_LED_init+0x1c>)
     72a:	4b05      	ldr	r3, [pc, #20]	; (740 <GRID_LED_init+0x20>)
     72c:	4798      	blx	r3
	GRID_LED_PORT_init();
     72e:	4b05      	ldr	r3, [pc, #20]	; (744 <GRID_LED_init+0x24>)
     730:	4798      	blx	r3
     732:	bd08      	pop	{r3, pc}
     734:	000006fd 	.word	0x000006fd
     738:	43000c00 	.word	0x43000c00
     73c:	20000a80 	.word	0x20000a80
     740:	00000e3d 	.word	0x00000e3d
     744:	00000635 	.word	0x00000635

00000748 <delay_driver_init>:
}

void delay_driver_init(void)
{
     748:	b508      	push	{r3, lr}
	delay_init(SysTick);
     74a:	4802      	ldr	r0, [pc, #8]	; (754 <delay_driver_init+0xc>)
     74c:	4b02      	ldr	r3, [pc, #8]	; (758 <delay_driver_init+0x10>)
     74e:	4798      	blx	r3
     750:	bd08      	pop	{r3, pc}
     752:	bf00      	nop
     754:	e000e010 	.word	0xe000e010
     758:	00000c11 	.word	0x00000c11

0000075c <system_init>:
}

void system_init(void)
{
     75c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     75e:	4b34      	ldr	r3, [pc, #208]	; (830 <system_init+0xd4>)
     760:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     762:	4b34      	ldr	r3, [pc, #208]	; (834 <system_init+0xd8>)
     764:	2220      	movs	r2, #32
     766:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     768:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     76a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     76e:	629a      	str	r2, [r3, #40]	; 0x28
     770:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     774:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     776:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     77a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     77e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     786:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     78a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     78e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     792:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     796:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79a:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     79e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7a2:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     7aa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     7b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     7ba:	3108      	adds	r1, #8
     7bc:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c8:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7cc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     7d0:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7d4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7d8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     7dc:	4916      	ldr	r1, [pc, #88]	; (838 <system_init+0xdc>)
     7de:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e2:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     7e6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ea:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     7f2:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7f6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7fa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     7fe:	4a0f      	ldr	r2, [pc, #60]	; (83c <system_init+0xe0>)
     800:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     804:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     80c:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     810:	4b0b      	ldr	r3, [pc, #44]	; (840 <system_init+0xe4>)
     812:	4798      	blx	r3
	ADC_1_init();
     814:	4b0b      	ldr	r3, [pc, #44]	; (844 <system_init+0xe8>)
     816:	4798      	blx	r3

	FLASH_0_init();
     818:	4b0b      	ldr	r3, [pc, #44]	; (848 <system_init+0xec>)
     81a:	4798      	blx	r3

	GRID_AUX_init();
     81c:	4b0b      	ldr	r3, [pc, #44]	; (84c <system_init+0xf0>)
     81e:	4798      	blx	r3

	SYS_I2C_init();
     820:	4b0b      	ldr	r3, [pc, #44]	; (850 <system_init+0xf4>)
     822:	4798      	blx	r3

	GRID_LED_init();
     824:	4b0b      	ldr	r3, [pc, #44]	; (854 <system_init+0xf8>)
     826:	4798      	blx	r3

	delay_driver_init();
     828:	4b0b      	ldr	r3, [pc, #44]	; (858 <system_init+0xfc>)
     82a:	4798      	blx	r3
     82c:	bd08      	pop	{r3, pc}
     82e:	bf00      	nop
     830:	00001689 	.word	0x00001689
     834:	41008000 	.word	0x41008000
     838:	c0000010 	.word	0xc0000010
     83c:	c0000020 	.word	0xc0000020
     840:	00000379 	.word	0x00000379
     844:	00000411 	.word	0x00000411
     848:	000004c5 	.word	0x000004c5
     84c:	00000551 	.word	0x00000551
     850:	0000060d 	.word	0x0000060d
     854:	00000721 	.word	0x00000721
     858:	00000749 	.word	0x00000749

0000085c <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     85c:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     85e:	6983      	ldr	r3, [r0, #24]
     860:	b103      	cbz	r3, 864 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     862:	4798      	blx	r3
     864:	bd08      	pop	{r3, pc}

00000866 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     866:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     868:	69c3      	ldr	r3, [r0, #28]
     86a:	b103      	cbz	r3, 86e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     86c:	4798      	blx	r3
     86e:	bd08      	pop	{r3, pc}

00000870 <adc_async_channel_conversion_done>:
{
     870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     874:	4606      	mov	r6, r0
     876:	460f      	mov	r7, r1
     878:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     87a:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     87c:	5c5c      	ldrb	r4, [r3, r1]
     87e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     882:	00e4      	lsls	r4, r4, #3
     884:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     888:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     88c:	f105 0a04 	add.w	sl, r5, #4
     890:	b2d1      	uxtb	r1, r2
     892:	4650      	mov	r0, sl
     894:	4b0c      	ldr	r3, [pc, #48]	; (8c8 <adc_async_channel_conversion_done+0x58>)
     896:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     898:	4630      	mov	r0, r6
     89a:	4b0c      	ldr	r3, [pc, #48]	; (8cc <adc_async_channel_conversion_done+0x5c>)
     89c:	4798      	blx	r3
     89e:	2801      	cmp	r0, #1
     8a0:	d907      	bls.n	8b2 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     8a2:	ea4f 2119 	mov.w	r1, r9, lsr #8
     8a6:	4650      	mov	r0, sl
     8a8:	4b07      	ldr	r3, [pc, #28]	; (8c8 <adc_async_channel_conversion_done+0x58>)
     8aa:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     8ac:	8aab      	ldrh	r3, [r5, #20]
     8ae:	3301      	adds	r3, #1
     8b0:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     8b2:	8aab      	ldrh	r3, [r5, #20]
     8b4:	3301      	adds	r3, #1
     8b6:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     8b8:	f858 3004 	ldr.w	r3, [r8, r4]
     8bc:	b113      	cbz	r3, 8c4 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     8be:	4639      	mov	r1, r7
     8c0:	4630      	mov	r0, r6
     8c2:	4798      	blx	r3
     8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8c8:	0000123d 	.word	0x0000123d
     8cc:	000015c3 	.word	0x000015c3

000008d0 <adc_async_init>:
{
     8d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8d4:	4689      	mov	r9, r1
     8d6:	4616      	mov	r6, r2
     8d8:	461c      	mov	r4, r3
     8da:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     8de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     8e0:	4607      	mov	r7, r0
     8e2:	b140      	cbz	r0, 8f6 <adc_async_init+0x26>
     8e4:	b149      	cbz	r1, 8fa <adc_async_init+0x2a>
     8e6:	b152      	cbz	r2, 8fe <adc_async_init+0x2e>
     8e8:	f1b8 0f00 	cmp.w	r8, #0
     8ec:	d009      	beq.n	902 <adc_async_init+0x32>
     8ee:	1c28      	adds	r0, r5, #0
     8f0:	bf18      	it	ne
     8f2:	2001      	movne	r0, #1
     8f4:	e006      	b.n	904 <adc_async_init+0x34>
     8f6:	2000      	movs	r0, #0
     8f8:	e004      	b.n	904 <adc_async_init+0x34>
     8fa:	2000      	movs	r0, #0
     8fc:	e002      	b.n	904 <adc_async_init+0x34>
     8fe:	2000      	movs	r0, #0
     900:	e000      	b.n	904 <adc_async_init+0x34>
     902:	2000      	movs	r0, #0
     904:	f8df b064 	ldr.w	fp, [pc, #100]	; 96c <adc_async_init+0x9c>
     908:	223f      	movs	r2, #63	; 0x3f
     90a:	4659      	mov	r1, fp
     90c:	f8df a060 	ldr.w	sl, [pc, #96]	; 970 <adc_async_init+0xa0>
     910:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     912:	1c60      	adds	r0, r4, #1
     914:	2240      	movs	r2, #64	; 0x40
     916:	4659      	mov	r1, fp
     918:	4580      	cmp	r8, r0
     91a:	bfcc      	ite	gt
     91c:	2000      	movgt	r0, #0
     91e:	2001      	movle	r0, #1
     920:	47d0      	blx	sl
	device = &descr->device;
     922:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     924:	21ff      	movs	r1, #255	; 0xff
     926:	b2da      	uxtb	r2, r3
     928:	54b1      	strb	r1, [r6, r2]
     92a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     92c:	b2da      	uxtb	r2, r3
     92e:	42a2      	cmp	r2, r4
     930:	d9f9      	bls.n	926 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     932:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     934:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     938:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     93c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     93e:	4649      	mov	r1, r9
     940:	4638      	mov	r0, r7
     942:	4b06      	ldr	r3, [pc, #24]	; (95c <adc_async_init+0x8c>)
     944:	4798      	blx	r3
	if (init_status) {
     946:	4603      	mov	r3, r0
     948:	b928      	cbnz	r0, 956 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     94a:	4a05      	ldr	r2, [pc, #20]	; (960 <adc_async_init+0x90>)
     94c:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     94e:	4a05      	ldr	r2, [pc, #20]	; (964 <adc_async_init+0x94>)
     950:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     952:	4a05      	ldr	r2, [pc, #20]	; (968 <adc_async_init+0x98>)
     954:	607a      	str	r2, [r7, #4]
}
     956:	4618      	mov	r0, r3
     958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     95c:	00001491 	.word	0x00001491
     960:	00000871 	.word	0x00000871
     964:	0000085d 	.word	0x0000085d
     968:	00000867 	.word	0x00000867
     96c:	000036f4 	.word	0x000036f4
     970:	000011a1 	.word	0x000011a1

00000974 <adc_async_register_channel_buffer>:
{
     974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     978:	460e      	mov	r6, r1
     97a:	4617      	mov	r7, r2
     97c:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
     97e:	4605      	mov	r5, r0
     980:	2800      	cmp	r0, #0
     982:	d040      	beq.n	a06 <adc_async_register_channel_buffer+0x92>
     984:	2a00      	cmp	r2, #0
     986:	d040      	beq.n	a0a <adc_async_register_channel_buffer+0x96>
     988:	1c18      	adds	r0, r3, #0
     98a:	bf18      	it	ne
     98c:	2001      	movne	r0, #1
     98e:	f8df 9098 	ldr.w	r9, [pc, #152]	; a28 <adc_async_register_channel_buffer+0xb4>
     992:	2266      	movs	r2, #102	; 0x66
     994:	4649      	mov	r1, r9
     996:	4c22      	ldr	r4, [pc, #136]	; (a20 <adc_async_register_channel_buffer+0xac>)
     998:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     99a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     99e:	2267      	movs	r2, #103	; 0x67
     9a0:	4649      	mov	r1, r9
     9a2:	42b0      	cmp	r0, r6
     9a4:	bf34      	ite	cc
     9a6:	2000      	movcc	r0, #0
     9a8:	2001      	movcs	r0, #1
     9aa:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
     9ac:	6a29      	ldr	r1, [r5, #32]
     9ae:	5d8b      	ldrb	r3, [r1, r6]
     9b0:	2bff      	cmp	r3, #255	; 0xff
     9b2:	d12c      	bne.n	a0e <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
     9b4:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     9b8:	2300      	movs	r3, #0
     9ba:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
     9bc:	b2da      	uxtb	r2, r3
     9be:	5c8a      	ldrb	r2, [r1, r2]
     9c0:	2aff      	cmp	r2, #255	; 0xff
			index++;
     9c2:	bf1c      	itt	ne
     9c4:	3401      	addne	r4, #1
     9c6:	b2e4      	uxtbne	r4, r4
     9c8:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
     9ca:	b2da      	uxtb	r2, r3
     9cc:	4282      	cmp	r2, r0
     9ce:	d9f5      	bls.n	9bc <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
     9d0:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     9d4:	42a3      	cmp	r3, r4
     9d6:	d31d      	bcc.n	a14 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     9d8:	eb04 0944 	add.w	r9, r4, r4, lsl #1
     9dc:	ea4f 09c9 	mov.w	r9, r9, lsl #3
     9e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     9e2:	4448      	add	r0, r9
     9e4:	4642      	mov	r2, r8
     9e6:	4639      	mov	r1, r7
     9e8:	3004      	adds	r0, #4
     9ea:	4b0e      	ldr	r3, [pc, #56]	; (a24 <adc_async_register_channel_buffer+0xb0>)
     9ec:	4798      	blx	r3
     9ee:	4602      	mov	r2, r0
     9f0:	b998      	cbnz	r0, a1a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
     9f2:	6a2b      	ldr	r3, [r5, #32]
     9f4:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
     9f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
     9f8:	4499      	add	r9, r3
     9fa:	2300      	movs	r3, #0
     9fc:	f8a9 3014 	strh.w	r3, [r9, #20]
}
     a00:	4610      	mov	r0, r2
     a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
     a06:	2000      	movs	r0, #0
     a08:	e7c1      	b.n	98e <adc_async_register_channel_buffer+0x1a>
     a0a:	2000      	movs	r0, #0
     a0c:	e7bf      	b.n	98e <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
     a0e:	f06f 020c 	mvn.w	r2, #12
     a12:	e7f5      	b.n	a00 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
     a14:	f06f 021b 	mvn.w	r2, #27
     a18:	e7f2      	b.n	a00 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
     a1a:	f06f 020c 	mvn.w	r2, #12
     a1e:	e7ef      	b.n	a00 <adc_async_register_channel_buffer+0x8c>
     a20:	000011a1 	.word	0x000011a1
     a24:	000011a9 	.word	0x000011a9
     a28:	000036f4 	.word	0x000036f4

00000a2c <adc_async_enable_channel>:
{
     a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a2e:	460d      	mov	r5, r1
	ASSERT(descr);
     a30:	4f0b      	ldr	r7, [pc, #44]	; (a60 <adc_async_enable_channel+0x34>)
     a32:	4604      	mov	r4, r0
     a34:	2283      	movs	r2, #131	; 0x83
     a36:	4639      	mov	r1, r7
     a38:	3000      	adds	r0, #0
     a3a:	bf18      	it	ne
     a3c:	2001      	movne	r0, #1
     a3e:	4e09      	ldr	r6, [pc, #36]	; (a64 <adc_async_enable_channel+0x38>)
     a40:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     a42:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     a46:	2284      	movs	r2, #132	; 0x84
     a48:	4639      	mov	r1, r7
     a4a:	42a8      	cmp	r0, r5
     a4c:	bf34      	ite	cc
     a4e:	2000      	movcc	r0, #0
     a50:	2001      	movcs	r0, #1
     a52:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
     a54:	4629      	mov	r1, r5
     a56:	4620      	mov	r0, r4
     a58:	4b03      	ldr	r3, [pc, #12]	; (a68 <adc_async_enable_channel+0x3c>)
     a5a:	4798      	blx	r3
}
     a5c:	2000      	movs	r0, #0
     a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a60:	000036f4 	.word	0x000036f4
     a64:	000011a1 	.word	0x000011a1
     a68:	000015ad 	.word	0x000015ad

00000a6c <adc_async_register_callback>:
{
     a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a70:	460e      	mov	r6, r1
     a72:	4614      	mov	r4, r2
     a74:	4699      	mov	r9, r3
	ASSERT(descr);
     a76:	f8df 8070 	ldr.w	r8, [pc, #112]	; ae8 <adc_async_register_callback+0x7c>
     a7a:	4605      	mov	r5, r0
     a7c:	229c      	movs	r2, #156	; 0x9c
     a7e:	4641      	mov	r1, r8
     a80:	3000      	adds	r0, #0
     a82:	bf18      	it	ne
     a84:	2001      	movne	r0, #1
     a86:	4f16      	ldr	r7, [pc, #88]	; (ae0 <adc_async_register_callback+0x74>)
     a88:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     a8a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     a8e:	229d      	movs	r2, #157	; 0x9d
     a90:	4641      	mov	r1, r8
     a92:	42b0      	cmp	r0, r6
     a94:	bf34      	ite	cc
     a96:	2000      	movcc	r0, #0
     a98:	2001      	movcs	r0, #1
     a9a:	47b8      	blx	r7
	switch (type) {
     a9c:	2c01      	cmp	r4, #1
     a9e:	d019      	beq.n	ad4 <adc_async_register_callback+0x68>
     aa0:	b12c      	cbz	r4, aae <adc_async_register_callback+0x42>
     aa2:	2c02      	cmp	r4, #2
     aa4:	d019      	beq.n	ada <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
     aa6:	f06f 000c 	mvn.w	r0, #12
}
     aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
     aae:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     ab0:	5d9b      	ldrb	r3, [r3, r6]
     ab2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ab8:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     abc:	f119 0300 	adds.w	r3, r9, #0
     ac0:	bf18      	it	ne
     ac2:	2301      	movne	r3, #1
     ac4:	4622      	mov	r2, r4
     ac6:	4631      	mov	r1, r6
     ac8:	4628      	mov	r0, r5
     aca:	4c06      	ldr	r4, [pc, #24]	; (ae4 <adc_async_register_callback+0x78>)
     acc:	47a0      	blx	r4
	return ERR_NONE;
     ace:	2000      	movs	r0, #0
     ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
     ad4:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
     ad8:	e7f0      	b.n	abc <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     ada:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
     ade:	e7ed      	b.n	abc <adc_async_register_callback+0x50>
     ae0:	000011a1 	.word	0x000011a1
     ae4:	000015eb 	.word	0x000015eb
     ae8:	000036f4 	.word	0x000036f4

00000aec <adc_async_read_channel>:
{
     aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     af0:	b083      	sub	sp, #12
     af2:	4688      	mov	r8, r1
     af4:	4691      	mov	r9, r2
     af6:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
     af8:	4604      	mov	r4, r0
     afa:	2800      	cmp	r0, #0
     afc:	d04f      	beq.n	b9e <adc_async_read_channel+0xb2>
     afe:	2a00      	cmp	r2, #0
     b00:	d04f      	beq.n	ba2 <adc_async_read_channel+0xb6>
     b02:	1c18      	adds	r0, r3, #0
     b04:	bf18      	it	ne
     b06:	2001      	movne	r0, #1
     b08:	4f29      	ldr	r7, [pc, #164]	; (bb0 <adc_async_read_channel+0xc4>)
     b0a:	22bc      	movs	r2, #188	; 0xbc
     b0c:	4639      	mov	r1, r7
     b0e:	4e29      	ldr	r6, [pc, #164]	; (bb4 <adc_async_read_channel+0xc8>)
     b10:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     b12:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     b16:	22bd      	movs	r2, #189	; 0xbd
     b18:	4639      	mov	r1, r7
     b1a:	4540      	cmp	r0, r8
     b1c:	bf34      	ite	cc
     b1e:	2000      	movcc	r0, #0
     b20:	2001      	movcs	r0, #1
     b22:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
     b24:	4620      	mov	r0, r4
     b26:	4b24      	ldr	r3, [pc, #144]	; (bb8 <adc_async_read_channel+0xcc>)
     b28:	4798      	blx	r3
	ASSERT(!(length % data_size));
     b2a:	fb95 f3f0 	sdiv	r3, r5, r0
     b2e:	fb03 5010 	mls	r0, r3, r0, r5
     b32:	22bf      	movs	r2, #191	; 0xbf
     b34:	4639      	mov	r1, r7
     b36:	fab0 f080 	clz	r0, r0
     b3a:	0940      	lsrs	r0, r0, #5
     b3c:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
     b3e:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     b40:	f813 b008 	ldrb.w	fp, [r3, r8]
     b44:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
     b48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b4a:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
     b4e:	a801      	add	r0, sp, #4
     b50:	4b1a      	ldr	r3, [pc, #104]	; (bbc <adc_async_read_channel+0xd0>)
     b52:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     b54:	f10b 0a04 	add.w	sl, fp, #4
     b58:	4650      	mov	r0, sl
     b5a:	4b19      	ldr	r3, [pc, #100]	; (bc0 <adc_async_read_channel+0xd4>)
     b5c:	4798      	blx	r3
     b5e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     b60:	a801      	add	r0, sp, #4
     b62:	4b18      	ldr	r3, [pc, #96]	; (bc4 <adc_async_read_channel+0xd8>)
     b64:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     b66:	f1b8 0f00 	cmp.w	r8, #0
     b6a:	d01c      	beq.n	ba6 <adc_async_read_channel+0xba>
     b6c:	b1ed      	cbz	r5, baa <adc_async_read_channel+0xbe>
     b6e:	3d01      	subs	r5, #1
     b70:	b2ad      	uxth	r5, r5
     b72:	3502      	adds	r5, #2
     b74:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     b76:	4f14      	ldr	r7, [pc, #80]	; (bc8 <adc_async_read_channel+0xdc>)
     b78:	b2a6      	uxth	r6, r4
     b7a:	1e61      	subs	r1, r4, #1
     b7c:	4449      	add	r1, r9
     b7e:	4650      	mov	r0, sl
     b80:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
     b82:	4544      	cmp	r4, r8
     b84:	d002      	beq.n	b8c <adc_async_read_channel+0xa0>
     b86:	3401      	adds	r4, #1
     b88:	42ac      	cmp	r4, r5
     b8a:	d1f5      	bne.n	b78 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
     b8c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
     b90:	1b9b      	subs	r3, r3, r6
     b92:	f8ab 3014 	strh.w	r3, [fp, #20]
}
     b96:	4630      	mov	r0, r6
     b98:	b003      	add	sp, #12
     b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
     b9e:	2000      	movs	r0, #0
     ba0:	e7b2      	b.n	b08 <adc_async_read_channel+0x1c>
     ba2:	2000      	movs	r0, #0
     ba4:	e7b0      	b.n	b08 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
     ba6:	2600      	movs	r6, #0
     ba8:	e7f0      	b.n	b8c <adc_async_read_channel+0xa0>
     baa:	2600      	movs	r6, #0
     bac:	e7ee      	b.n	b8c <adc_async_read_channel+0xa0>
     bae:	bf00      	nop
     bb0:	000036f4 	.word	0x000036f4
     bb4:	000011a1 	.word	0x000011a1
     bb8:	000015c3 	.word	0x000015c3
     bbc:	00000bf5 	.word	0x00000bf5
     bc0:	0000127d 	.word	0x0000127d
     bc4:	00000c03 	.word	0x00000c03
     bc8:	000011f9 	.word	0x000011f9

00000bcc <adc_async_start_conversion>:
{
     bcc:	b510      	push	{r4, lr}
	ASSERT(descr);
     bce:	4604      	mov	r4, r0
     bd0:	22d6      	movs	r2, #214	; 0xd6
     bd2:	4905      	ldr	r1, [pc, #20]	; (be8 <adc_async_start_conversion+0x1c>)
     bd4:	3000      	adds	r0, #0
     bd6:	bf18      	it	ne
     bd8:	2001      	movne	r0, #1
     bda:	4b04      	ldr	r3, [pc, #16]	; (bec <adc_async_start_conversion+0x20>)
     bdc:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     bde:	4620      	mov	r0, r4
     be0:	4b03      	ldr	r3, [pc, #12]	; (bf0 <adc_async_start_conversion+0x24>)
     be2:	4798      	blx	r3
}
     be4:	2000      	movs	r0, #0
     be6:	bd10      	pop	{r4, pc}
     be8:	000036f4 	.word	0x000036f4
     bec:	000011a1 	.word	0x000011a1
     bf0:	000015d5 	.word	0x000015d5

00000bf4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     bf4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     bf8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     bfa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     bfc:	f3bf 8f5f 	dmb	sy
     c00:	4770      	bx	lr

00000c02 <atomic_leave_critical>:
     c02:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     c06:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     c08:	f383 8810 	msr	PRIMASK, r3
     c0c:	4770      	bx	lr
	...

00000c10 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     c10:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     c12:	4b02      	ldr	r3, [pc, #8]	; (c1c <delay_init+0xc>)
     c14:	6018      	str	r0, [r3, #0]
     c16:	4b02      	ldr	r3, [pc, #8]	; (c20 <delay_init+0x10>)
     c18:	4798      	blx	r3
     c1a:	bd08      	pop	{r3, pc}
     c1c:	200003c4 	.word	0x200003c4
     c20:	0000278d 	.word	0x0000278d

00000c24 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     c24:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     c26:	4b04      	ldr	r3, [pc, #16]	; (c38 <delay_ms+0x14>)
     c28:	681c      	ldr	r4, [r3, #0]
     c2a:	4b04      	ldr	r3, [pc, #16]	; (c3c <delay_ms+0x18>)
     c2c:	4798      	blx	r3
     c2e:	4601      	mov	r1, r0
     c30:	4620      	mov	r0, r4
     c32:	4b03      	ldr	r3, [pc, #12]	; (c40 <delay_ms+0x1c>)
     c34:	4798      	blx	r3
     c36:	bd10      	pop	{r4, pc}
     c38:	200003c4 	.word	0x200003c4
     c3c:	0000167d 	.word	0x0000167d
     c40:	000027a1 	.word	0x000027a1

00000c44 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     c44:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     c46:	6943      	ldr	r3, [r0, #20]
     c48:	b103      	cbz	r3, c4c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     c4a:	4798      	blx	r3
     c4c:	bd08      	pop	{r3, pc}

00000c4e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     c4e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     c50:	6983      	ldr	r3, [r0, #24]
     c52:	b103      	cbz	r3, c56 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     c54:	4798      	blx	r3
     c56:	bd08      	pop	{r3, pc}

00000c58 <flash_init>:
{
     c58:	b538      	push	{r3, r4, r5, lr}
     c5a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     c5c:	4604      	mov	r4, r0
     c5e:	b190      	cbz	r0, c86 <flash_init+0x2e>
     c60:	1c08      	adds	r0, r1, #0
     c62:	bf18      	it	ne
     c64:	2001      	movne	r0, #1
     c66:	2238      	movs	r2, #56	; 0x38
     c68:	4908      	ldr	r1, [pc, #32]	; (c8c <flash_init+0x34>)
     c6a:	4b09      	ldr	r3, [pc, #36]	; (c90 <flash_init+0x38>)
     c6c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     c6e:	4629      	mov	r1, r5
     c70:	4620      	mov	r0, r4
     c72:	4b08      	ldr	r3, [pc, #32]	; (c94 <flash_init+0x3c>)
     c74:	4798      	blx	r3
	if (rc) {
     c76:	4603      	mov	r3, r0
     c78:	b918      	cbnz	r0, c82 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     c7a:	4a07      	ldr	r2, [pc, #28]	; (c98 <flash_init+0x40>)
     c7c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     c7e:	4a07      	ldr	r2, [pc, #28]	; (c9c <flash_init+0x44>)
     c80:	6062      	str	r2, [r4, #4]
}
     c82:	4618      	mov	r0, r3
     c84:	bd38      	pop	{r3, r4, r5, pc}
     c86:	2000      	movs	r0, #0
     c88:	e7ed      	b.n	c66 <flash_init+0xe>
     c8a:	bf00      	nop
     c8c:	00003710 	.word	0x00003710
     c90:	000011a1 	.word	0x000011a1
     c94:	00001a3d 	.word	0x00001a3d
     c98:	00000c45 	.word	0x00000c45
     c9c:	00000c4f 	.word	0x00000c4f

00000ca0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     ca0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     ca2:	8843      	ldrh	r3, [r0, #2]
     ca4:	f413 7f80 	tst.w	r3, #256	; 0x100
     ca8:	d102      	bne.n	cb0 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
     caa:	6b43      	ldr	r3, [r0, #52]	; 0x34
     cac:	b103      	cbz	r3, cb0 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
     cae:	4798      	blx	r3
     cb0:	bd08      	pop	{r3, pc}

00000cb2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
     cb2:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     cb4:	8843      	ldrh	r3, [r0, #2]
     cb6:	f413 7f80 	tst.w	r3, #256	; 0x100
     cba:	d102      	bne.n	cc2 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
     cbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
     cbe:	b103      	cbz	r3, cc2 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
     cc0:	4798      	blx	r3
     cc2:	bd08      	pop	{r3, pc}

00000cc4 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
     cc4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
     cc6:	8843      	ldrh	r3, [r0, #2]
     cc8:	f413 7f80 	tst.w	r3, #256	; 0x100
     ccc:	d102      	bne.n	cd4 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
     cce:	6b03      	ldr	r3, [r0, #48]	; 0x30
     cd0:	b103      	cbz	r3, cd4 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
     cd2:	4798      	blx	r3
     cd4:	bd08      	pop	{r3, pc}
	...

00000cd8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
     cd8:	b510      	push	{r4, lr}
     cda:	b084      	sub	sp, #16
     cdc:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
     cde:	8a83      	ldrh	r3, [r0, #20]
     ce0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     ce4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     cea:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     cee:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     cf0:	a901      	add	r1, sp, #4
     cf2:	3828      	subs	r0, #40	; 0x28
     cf4:	4b03      	ldr	r3, [pc, #12]	; (d04 <i2c_m_async_write+0x2c>)
     cf6:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
     cf8:	2800      	cmp	r0, #0
     cfa:	bf08      	it	eq
     cfc:	4620      	moveq	r0, r4
     cfe:	b004      	add	sp, #16
     d00:	bd10      	pop	{r4, pc}
     d02:	bf00      	nop
     d04:	00002299 	.word	0x00002299

00000d08 <i2c_m_async_read>:
{
     d08:	b510      	push	{r4, lr}
     d0a:	b084      	sub	sp, #16
     d0c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
     d0e:	8a83      	ldrh	r3, [r0, #20]
     d10:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     d14:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     d16:	f248 0301 	movw	r3, #32769	; 0x8001
     d1a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     d1e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
     d20:	a901      	add	r1, sp, #4
     d22:	3828      	subs	r0, #40	; 0x28
     d24:	4b03      	ldr	r3, [pc, #12]	; (d34 <i2c_m_async_read+0x2c>)
     d26:	4798      	blx	r3
}
     d28:	2800      	cmp	r0, #0
     d2a:	bf08      	it	eq
     d2c:	4620      	moveq	r0, r4
     d2e:	b004      	add	sp, #16
     d30:	bd10      	pop	{r4, pc}
     d32:	bf00      	nop
     d34:	00002299 	.word	0x00002299

00000d38 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     d3c:	4604      	mov	r4, r0
     d3e:	2289      	movs	r2, #137	; 0x89
     d40:	490f      	ldr	r1, [pc, #60]	; (d80 <i2c_m_async_init+0x48>)
     d42:	3000      	adds	r0, #0
     d44:	bf18      	it	ne
     d46:	2001      	movne	r0, #1
     d48:	4b0e      	ldr	r3, [pc, #56]	; (d84 <i2c_m_async_init+0x4c>)
     d4a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
     d4c:	4629      	mov	r1, r5
     d4e:	4620      	mov	r0, r4
     d50:	4b0d      	ldr	r3, [pc, #52]	; (d88 <i2c_m_async_init+0x50>)
     d52:	4798      	blx	r3
	if (init_status) {
     d54:	4605      	mov	r5, r0
     d56:	b108      	cbz	r0, d5c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
     d58:	4628      	mov	r0, r5
     d5a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
     d5c:	4b0b      	ldr	r3, [pc, #44]	; (d8c <i2c_m_async_init+0x54>)
     d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
     d60:	4b0b      	ldr	r3, [pc, #44]	; (d90 <i2c_m_async_init+0x58>)
     d62:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
     d64:	4a0b      	ldr	r2, [pc, #44]	; (d94 <i2c_m_async_init+0x5c>)
     d66:	2101      	movs	r1, #1
     d68:	4620      	mov	r0, r4
     d6a:	4e0b      	ldr	r6, [pc, #44]	; (d98 <i2c_m_async_init+0x60>)
     d6c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
     d6e:	4a0b      	ldr	r2, [pc, #44]	; (d9c <i2c_m_async_init+0x64>)
     d70:	2102      	movs	r1, #2
     d72:	4620      	mov	r0, r4
     d74:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
     d76:	4a0a      	ldr	r2, [pc, #40]	; (da0 <i2c_m_async_init+0x68>)
     d78:	2100      	movs	r1, #0
     d7a:	4620      	mov	r0, r4
     d7c:	47b0      	blx	r6
	return ERR_NONE;
     d7e:	e7eb      	b.n	d58 <i2c_m_async_init+0x20>
     d80:	00003728 	.word	0x00003728
     d84:	000011a1 	.word	0x000011a1
     d88:	00002219 	.word	0x00002219
     d8c:	00000d09 	.word	0x00000d09
     d90:	00000cd9 	.word	0x00000cd9
     d94:	00000ca1 	.word	0x00000ca1
     d98:	000023c9 	.word	0x000023c9
     d9c:	00000cb3 	.word	0x00000cb3
     da0:	00000cc5 	.word	0x00000cc5

00000da4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     da4:	b570      	push	{r4, r5, r6, lr}
     da6:	460d      	mov	r5, r1
     da8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     daa:	4604      	mov	r4, r0
     dac:	b160      	cbz	r0, dc8 <io_write+0x24>
     dae:	1c08      	adds	r0, r1, #0
     db0:	bf18      	it	ne
     db2:	2001      	movne	r0, #1
     db4:	2234      	movs	r2, #52	; 0x34
     db6:	4905      	ldr	r1, [pc, #20]	; (dcc <io_write+0x28>)
     db8:	4b05      	ldr	r3, [pc, #20]	; (dd0 <io_write+0x2c>)
     dba:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     dbc:	6823      	ldr	r3, [r4, #0]
     dbe:	4632      	mov	r2, r6
     dc0:	4629      	mov	r1, r5
     dc2:	4620      	mov	r0, r4
     dc4:	4798      	blx	r3
}
     dc6:	bd70      	pop	{r4, r5, r6, pc}
     dc8:	2000      	movs	r0, #0
     dca:	e7f3      	b.n	db4 <io_write+0x10>
     dcc:	00003748 	.word	0x00003748
     dd0:	000011a1 	.word	0x000011a1

00000dd4 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     dd4:	b570      	push	{r4, r5, r6, lr}
     dd6:	460d      	mov	r5, r1
     dd8:	4616      	mov	r6, r2
	ASSERT(io);
     dda:	4604      	mov	r4, r0
     ddc:	2298      	movs	r2, #152	; 0x98
     dde:	4907      	ldr	r1, [pc, #28]	; (dfc <_spi_m_dma_io_write+0x28>)
     de0:	3000      	adds	r0, #0
     de2:	bf18      	it	ne
     de4:	2001      	movne	r0, #1
     de6:	4b06      	ldr	r3, [pc, #24]	; (e00 <_spi_m_dma_io_write+0x2c>)
     de8:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
     dea:	4633      	mov	r3, r6
     dec:	2200      	movs	r2, #0
     dee:	4629      	mov	r1, r5
     df0:	f1a4 001c 	sub.w	r0, r4, #28
     df4:	4c03      	ldr	r4, [pc, #12]	; (e04 <_spi_m_dma_io_write+0x30>)
     df6:	47a0      	blx	r4
}
     df8:	bd70      	pop	{r4, r5, r6, pc}
     dfa:	bf00      	nop
     dfc:	0000375c 	.word	0x0000375c
     e00:	000011a1 	.word	0x000011a1
     e04:	00002655 	.word	0x00002655

00000e08 <_spi_m_dma_io_read>:
{
     e08:	b570      	push	{r4, r5, r6, lr}
     e0a:	460d      	mov	r5, r1
     e0c:	4616      	mov	r6, r2
	ASSERT(io);
     e0e:	4604      	mov	r4, r0
     e10:	2281      	movs	r2, #129	; 0x81
     e12:	4907      	ldr	r1, [pc, #28]	; (e30 <_spi_m_dma_io_read+0x28>)
     e14:	3000      	adds	r0, #0
     e16:	bf18      	it	ne
     e18:	2001      	movne	r0, #1
     e1a:	4b06      	ldr	r3, [pc, #24]	; (e34 <_spi_m_dma_io_read+0x2c>)
     e1c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
     e1e:	4633      	mov	r3, r6
     e20:	462a      	mov	r2, r5
     e22:	2100      	movs	r1, #0
     e24:	f1a4 001c 	sub.w	r0, r4, #28
     e28:	4c03      	ldr	r4, [pc, #12]	; (e38 <_spi_m_dma_io_read+0x30>)
     e2a:	47a0      	blx	r4
}
     e2c:	bd70      	pop	{r4, r5, r6, pc}
     e2e:	bf00      	nop
     e30:	0000375c 	.word	0x0000375c
     e34:	000011a1 	.word	0x000011a1
     e38:	00002655 	.word	0x00002655

00000e3c <spi_m_dma_init>:
{
     e3c:	b538      	push	{r3, r4, r5, lr}
     e3e:	460c      	mov	r4, r1
	ASSERT(spi && hw);
     e40:	4605      	mov	r5, r0
     e42:	b1a0      	cbz	r0, e6e <spi_m_dma_init+0x32>
     e44:	1c08      	adds	r0, r1, #0
     e46:	bf18      	it	ne
     e48:	2001      	movne	r0, #1
     e4a:	223b      	movs	r2, #59	; 0x3b
     e4c:	4909      	ldr	r1, [pc, #36]	; (e74 <spi_m_dma_init+0x38>)
     e4e:	4b0a      	ldr	r3, [pc, #40]	; (e78 <spi_m_dma_init+0x3c>)
     e50:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     e52:	4628      	mov	r0, r5
     e54:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
     e58:	4621      	mov	r1, r4
     e5a:	4b08      	ldr	r3, [pc, #32]	; (e7c <spi_m_dma_init+0x40>)
     e5c:	4798      	blx	r3
	if (rc) {
     e5e:	4603      	mov	r3, r0
     e60:	b918      	cbnz	r0, e6a <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
     e62:	4a07      	ldr	r2, [pc, #28]	; (e80 <spi_m_dma_init+0x44>)
     e64:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
     e66:	4a07      	ldr	r2, [pc, #28]	; (e84 <spi_m_dma_init+0x48>)
     e68:	622a      	str	r2, [r5, #32]
}
     e6a:	4618      	mov	r0, r3
     e6c:	bd38      	pop	{r3, r4, r5, pc}
     e6e:	2000      	movs	r0, #0
     e70:	e7eb      	b.n	e4a <spi_m_dma_init+0xe>
     e72:	bf00      	nop
     e74:	0000375c 	.word	0x0000375c
     e78:	000011a1 	.word	0x000011a1
     e7c:	00002485 	.word	0x00002485
     e80:	00000e09 	.word	0x00000e09
     e84:	00000dd5 	.word	0x00000dd5

00000e88 <spi_m_dma_enable>:
{
     e88:	b510      	push	{r4, lr}
	ASSERT(spi);
     e8a:	4604      	mov	r4, r0
     e8c:	2251      	movs	r2, #81	; 0x51
     e8e:	4905      	ldr	r1, [pc, #20]	; (ea4 <spi_m_dma_enable+0x1c>)
     e90:	3000      	adds	r0, #0
     e92:	bf18      	it	ne
     e94:	2001      	movne	r0, #1
     e96:	4b04      	ldr	r3, [pc, #16]	; (ea8 <spi_m_dma_enable+0x20>)
     e98:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
     e9a:	1d20      	adds	r0, r4, #4
     e9c:	4b03      	ldr	r3, [pc, #12]	; (eac <spi_m_dma_enable+0x24>)
     e9e:	4798      	blx	r3
     ea0:	bd10      	pop	{r4, pc}
     ea2:	bf00      	nop
     ea4:	0000375c 	.word	0x0000375c
     ea8:	000011a1 	.word	0x000011a1
     eac:	000025c5 	.word	0x000025c5

00000eb0 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
     eb0:	b570      	push	{r4, r5, r6, lr}
     eb2:	460d      	mov	r5, r1
     eb4:	4616      	mov	r6, r2
	ASSERT(spi);
     eb6:	4604      	mov	r4, r0
     eb8:	22a8      	movs	r2, #168	; 0xa8
     eba:	4906      	ldr	r1, [pc, #24]	; (ed4 <spi_m_dma_register_callback+0x24>)
     ebc:	3000      	adds	r0, #0
     ebe:	bf18      	it	ne
     ec0:	2001      	movne	r0, #1
     ec2:	4b05      	ldr	r3, [pc, #20]	; (ed8 <spi_m_dma_register_callback+0x28>)
     ec4:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
     ec6:	4632      	mov	r2, r6
     ec8:	4629      	mov	r1, r5
     eca:	1d20      	adds	r0, r4, #4
     ecc:	4b03      	ldr	r3, [pc, #12]	; (edc <spi_m_dma_register_callback+0x2c>)
     ece:	4798      	blx	r3
     ed0:	bd70      	pop	{r4, r5, r6, pc}
     ed2:	bf00      	nop
     ed4:	0000375c 	.word	0x0000375c
     ed8:	000011a1 	.word	0x000011a1
     edc:	000025f5 	.word	0x000025f5

00000ee0 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
     ee0:	b538      	push	{r3, r4, r5, lr}
     ee2:	460d      	mov	r5, r1
	ASSERT(spi && io);
     ee4:	4604      	mov	r4, r0
     ee6:	b150      	cbz	r0, efe <spi_m_dma_get_io_descriptor+0x1e>
     ee8:	1c08      	adds	r0, r1, #0
     eea:	bf18      	it	ne
     eec:	2001      	movne	r0, #1
     eee:	22ae      	movs	r2, #174	; 0xae
     ef0:	4904      	ldr	r1, [pc, #16]	; (f04 <spi_m_dma_get_io_descriptor+0x24>)
     ef2:	4b05      	ldr	r3, [pc, #20]	; (f08 <spi_m_dma_get_io_descriptor+0x28>)
     ef4:	4798      	blx	r3
	*io = &spi->io;
     ef6:	3420      	adds	r4, #32
     ef8:	602c      	str	r4, [r5, #0]

	return 0;
}
     efa:	2000      	movs	r0, #0
     efc:	bd38      	pop	{r3, r4, r5, pc}
     efe:	2000      	movs	r0, #0
     f00:	e7f5      	b.n	eee <spi_m_dma_get_io_descriptor+0xe>
     f02:	bf00      	nop
     f04:	0000375c 	.word	0x0000375c
     f08:	000011a1 	.word	0x000011a1

00000f0c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     f0c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     f0e:	2300      	movs	r3, #0
     f10:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
     f12:	69c3      	ldr	r3, [r0, #28]
     f14:	b11b      	cbz	r3, f1e <usart_transmission_complete+0x12>
     f16:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
     f1a:	4610      	mov	r0, r2
     f1c:	4798      	blx	r3
     f1e:	bd08      	pop	{r3, pc}

00000f20 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     f20:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     f22:	2300      	movs	r3, #0
     f24:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
     f26:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f28:	b11b      	cbz	r3, f32 <usart_error+0x12>
     f2a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
     f2e:	4610      	mov	r0, r2
     f30:	4798      	blx	r3
     f32:	bd08      	pop	{r3, pc}

00000f34 <usart_fill_rx_buffer>:
{
     f34:	b538      	push	{r3, r4, r5, lr}
     f36:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     f38:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
     f3c:	302c      	adds	r0, #44	; 0x2c
     f3e:	4b03      	ldr	r3, [pc, #12]	; (f4c <usart_fill_rx_buffer+0x18>)
     f40:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     f42:	6a23      	ldr	r3, [r4, #32]
     f44:	b10b      	cbz	r3, f4a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     f46:	4628      	mov	r0, r5
     f48:	4798      	blx	r3
     f4a:	bd38      	pop	{r3, r4, r5, pc}
     f4c:	0000123d 	.word	0x0000123d

00000f50 <usart_async_write>:
{
     f50:	b570      	push	{r4, r5, r6, lr}
     f52:	460e      	mov	r6, r1
     f54:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
     f56:	4604      	mov	r4, r0
     f58:	b1e0      	cbz	r0, f94 <usart_async_write+0x44>
     f5a:	b1e9      	cbz	r1, f98 <usart_async_write+0x48>
     f5c:	1c10      	adds	r0, r2, #0
     f5e:	bf18      	it	ne
     f60:	2001      	movne	r0, #1
     f62:	f240 123b 	movw	r2, #315	; 0x13b
     f66:	490f      	ldr	r1, [pc, #60]	; (fa4 <usart_async_write+0x54>)
     f68:	4b0f      	ldr	r3, [pc, #60]	; (fa8 <usart_async_write+0x58>)
     f6a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     f6c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
     f70:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     f74:	429a      	cmp	r2, r3
     f76:	d111      	bne.n	f9c <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
     f78:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     f7a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
     f7e:	2300      	movs	r3, #0
     f80:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     f84:	2301      	movs	r3, #1
     f86:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     f88:	f104 0008 	add.w	r0, r4, #8
     f8c:	4b07      	ldr	r3, [pc, #28]	; (fac <usart_async_write+0x5c>)
     f8e:	4798      	blx	r3
	return (int32_t)length;
     f90:	4628      	mov	r0, r5
     f92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     f94:	2000      	movs	r0, #0
     f96:	e7e4      	b.n	f62 <usart_async_write+0x12>
     f98:	2000      	movs	r0, #0
     f9a:	e7e2      	b.n	f62 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
     f9c:	f06f 001b 	mvn.w	r0, #27
}
     fa0:	bd70      	pop	{r4, r5, r6, pc}
     fa2:	bf00      	nop
     fa4:	00003778 	.word	0x00003778
     fa8:	000011a1 	.word	0x000011a1
     fac:	00002207 	.word	0x00002207

00000fb0 <usart_process_byte_sent>:
{
     fb0:	b510      	push	{r4, lr}
     fb2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     fb4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     fb6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
     fba:	429a      	cmp	r2, r3
     fbc:	d009      	beq.n	fd2 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     fbe:	6c02      	ldr	r2, [r0, #64]	; 0x40
     fc0:	1c59      	adds	r1, r3, #1
     fc2:	8781      	strh	r1, [r0, #60]	; 0x3c
     fc4:	5cd1      	ldrb	r1, [r2, r3]
     fc6:	4b04      	ldr	r3, [pc, #16]	; (fd8 <usart_process_byte_sent+0x28>)
     fc8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     fca:	4620      	mov	r0, r4
     fcc:	4b03      	ldr	r3, [pc, #12]	; (fdc <usart_process_byte_sent+0x2c>)
     fce:	4798      	blx	r3
     fd0:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     fd2:	4b03      	ldr	r3, [pc, #12]	; (fe0 <usart_process_byte_sent+0x30>)
     fd4:	4798      	blx	r3
     fd6:	bd10      	pop	{r4, pc}
     fd8:	00002201 	.word	0x00002201
     fdc:	00002207 	.word	0x00002207
     fe0:	0000220f 	.word	0x0000220f

00000fe4 <usart_async_read>:
{
     fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fe8:	b082      	sub	sp, #8
     fea:	460f      	mov	r7, r1
     fec:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
     fee:	4606      	mov	r6, r0
     ff0:	b1a0      	cbz	r0, 101c <usart_async_read+0x38>
     ff2:	b199      	cbz	r1, 101c <usart_async_read+0x38>
     ff4:	2a00      	cmp	r2, #0
     ff6:	d12d      	bne.n	1054 <usart_async_read+0x70>
     ff8:	f44f 72ac 	mov.w	r2, #344	; 0x158
     ffc:	4929      	ldr	r1, [pc, #164]	; (10a4 <usart_async_read+0xc0>)
     ffe:	2000      	movs	r0, #0
    1000:	4b29      	ldr	r3, [pc, #164]	; (10a8 <usart_async_read+0xc4>)
    1002:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1004:	a801      	add	r0, sp, #4
    1006:	4b29      	ldr	r3, [pc, #164]	; (10ac <usart_async_read+0xc8>)
    1008:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    100a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    100e:	4b28      	ldr	r3, [pc, #160]	; (10b0 <usart_async_read+0xcc>)
    1010:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1012:	a801      	add	r0, sp, #4
    1014:	4b27      	ldr	r3, [pc, #156]	; (10b4 <usart_async_read+0xd0>)
    1016:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1018:	2500      	movs	r5, #0
	return (int32_t)was_read;
    101a:	e03e      	b.n	109a <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    101c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1020:	4920      	ldr	r1, [pc, #128]	; (10a4 <usart_async_read+0xc0>)
    1022:	2000      	movs	r0, #0
    1024:	4b20      	ldr	r3, [pc, #128]	; (10a8 <usart_async_read+0xc4>)
    1026:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1028:	a801      	add	r0, sp, #4
    102a:	4b20      	ldr	r3, [pc, #128]	; (10ac <usart_async_read+0xc8>)
    102c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    102e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1032:	4650      	mov	r0, sl
    1034:	4b1e      	ldr	r3, [pc, #120]	; (10b0 <usart_async_read+0xcc>)
    1036:	4798      	blx	r3
    1038:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    103a:	a801      	add	r0, sp, #4
    103c:	4b1d      	ldr	r3, [pc, #116]	; (10b4 <usart_async_read+0xd0>)
    103e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1040:	f1b9 0f00 	cmp.w	r9, #0
    1044:	d004      	beq.n	1050 <usart_async_read+0x6c>
    1046:	f1b8 0f00 	cmp.w	r8, #0
    104a:	d119      	bne.n	1080 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    104c:	2500      	movs	r5, #0
    104e:	e024      	b.n	109a <usart_async_read+0xb6>
    1050:	2500      	movs	r5, #0
    1052:	e022      	b.n	109a <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1054:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1058:	4912      	ldr	r1, [pc, #72]	; (10a4 <usart_async_read+0xc0>)
    105a:	2001      	movs	r0, #1
    105c:	4b12      	ldr	r3, [pc, #72]	; (10a8 <usart_async_read+0xc4>)
    105e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1060:	a801      	add	r0, sp, #4
    1062:	4b12      	ldr	r3, [pc, #72]	; (10ac <usart_async_read+0xc8>)
    1064:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1066:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    106a:	4650      	mov	r0, sl
    106c:	4b10      	ldr	r3, [pc, #64]	; (10b0 <usart_async_read+0xcc>)
    106e:	4798      	blx	r3
    1070:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1072:	a801      	add	r0, sp, #4
    1074:	4b0f      	ldr	r3, [pc, #60]	; (10b4 <usart_async_read+0xd0>)
    1076:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1078:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    107a:	f1b9 0f00 	cmp.w	r9, #0
    107e:	d00c      	beq.n	109a <usart_async_read+0xb6>
{
    1080:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1082:	4e0d      	ldr	r6, [pc, #52]	; (10b8 <usart_async_read+0xd4>)
    1084:	1c60      	adds	r0, r4, #1
    1086:	b285      	uxth	r5, r0
    1088:	1939      	adds	r1, r7, r4
    108a:	4650      	mov	r0, sl
    108c:	47b0      	blx	r6
    108e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1090:	454c      	cmp	r4, r9
    1092:	d202      	bcs.n	109a <usart_async_read+0xb6>
    1094:	b2a3      	uxth	r3, r4
    1096:	4598      	cmp	r8, r3
    1098:	d8f4      	bhi.n	1084 <usart_async_read+0xa0>
}
    109a:	4628      	mov	r0, r5
    109c:	b002      	add	sp, #8
    109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10a2:	bf00      	nop
    10a4:	00003778 	.word	0x00003778
    10a8:	000011a1 	.word	0x000011a1
    10ac:	00000bf5 	.word	0x00000bf5
    10b0:	0000127d 	.word	0x0000127d
    10b4:	00000c03 	.word	0x00000c03
    10b8:	000011f9 	.word	0x000011f9

000010bc <usart_async_init>:
{
    10bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10be:	460d      	mov	r5, r1
    10c0:	4616      	mov	r6, r2
    10c2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    10c4:	4604      	mov	r4, r0
    10c6:	b320      	cbz	r0, 1112 <usart_async_init+0x56>
    10c8:	b329      	cbz	r1, 1116 <usart_async_init+0x5a>
    10ca:	b332      	cbz	r2, 111a <usart_async_init+0x5e>
    10cc:	1c18      	adds	r0, r3, #0
    10ce:	bf18      	it	ne
    10d0:	2001      	movne	r0, #1
    10d2:	223a      	movs	r2, #58	; 0x3a
    10d4:	4913      	ldr	r1, [pc, #76]	; (1124 <usart_async_init+0x68>)
    10d6:	4b14      	ldr	r3, [pc, #80]	; (1128 <usart_async_init+0x6c>)
    10d8:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    10da:	463a      	mov	r2, r7
    10dc:	4631      	mov	r1, r6
    10de:	f104 0034 	add.w	r0, r4, #52	; 0x34
    10e2:	4b12      	ldr	r3, [pc, #72]	; (112c <usart_async_init+0x70>)
    10e4:	4798      	blx	r3
    10e6:	b9d0      	cbnz	r0, 111e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    10e8:	4629      	mov	r1, r5
    10ea:	f104 0008 	add.w	r0, r4, #8
    10ee:	4b10      	ldr	r3, [pc, #64]	; (1130 <usart_async_init+0x74>)
    10f0:	4798      	blx	r3
	if (init_status) {
    10f2:	4603      	mov	r3, r0
    10f4:	b958      	cbnz	r0, 110e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    10f6:	4a0f      	ldr	r2, [pc, #60]	; (1134 <usart_async_init+0x78>)
    10f8:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    10fa:	4a0f      	ldr	r2, [pc, #60]	; (1138 <usart_async_init+0x7c>)
    10fc:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    10fe:	4a0f      	ldr	r2, [pc, #60]	; (113c <usart_async_init+0x80>)
    1100:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1102:	4a0f      	ldr	r2, [pc, #60]	; (1140 <usart_async_init+0x84>)
    1104:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1106:	4a0f      	ldr	r2, [pc, #60]	; (1144 <usart_async_init+0x88>)
    1108:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    110a:	4a0f      	ldr	r2, [pc, #60]	; (1148 <usart_async_init+0x8c>)
    110c:	6162      	str	r2, [r4, #20]
}
    110e:	4618      	mov	r0, r3
    1110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1112:	2000      	movs	r0, #0
    1114:	e7dd      	b.n	10d2 <usart_async_init+0x16>
    1116:	2000      	movs	r0, #0
    1118:	e7db      	b.n	10d2 <usart_async_init+0x16>
    111a:	2000      	movs	r0, #0
    111c:	e7d9      	b.n	10d2 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    111e:	f06f 030c 	mvn.w	r3, #12
    1122:	e7f4      	b.n	110e <usart_async_init+0x52>
    1124:	00003778 	.word	0x00003778
    1128:	000011a1 	.word	0x000011a1
    112c:	000011a9 	.word	0x000011a9
    1130:	00002171 	.word	0x00002171
    1134:	00000fe5 	.word	0x00000fe5
    1138:	00000f51 	.word	0x00000f51
    113c:	00000fb1 	.word	0x00000fb1
    1140:	00000f35 	.word	0x00000f35
    1144:	00000f0d 	.word	0x00000f0d
    1148:	00000f21 	.word	0x00000f21

0000114c <usart_async_enable>:
{
    114c:	b510      	push	{r4, lr}
	ASSERT(descr);
    114e:	4604      	mov	r4, r0
    1150:	2261      	movs	r2, #97	; 0x61
    1152:	4906      	ldr	r1, [pc, #24]	; (116c <usart_async_enable+0x20>)
    1154:	3000      	adds	r0, #0
    1156:	bf18      	it	ne
    1158:	2001      	movne	r0, #1
    115a:	4b05      	ldr	r3, [pc, #20]	; (1170 <usart_async_enable+0x24>)
    115c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    115e:	f104 0008 	add.w	r0, r4, #8
    1162:	4b04      	ldr	r3, [pc, #16]	; (1174 <usart_async_enable+0x28>)
    1164:	4798      	blx	r3
}
    1166:	2000      	movs	r0, #0
    1168:	bd10      	pop	{r4, pc}
    116a:	bf00      	nop
    116c:	00003778 	.word	0x00003778
    1170:	000011a1 	.word	0x000011a1
    1174:	000021ed 	.word	0x000021ed

00001178 <usart_async_get_io_descriptor>:
{
    1178:	b538      	push	{r3, r4, r5, lr}
    117a:	460c      	mov	r4, r1
	ASSERT(descr && io);
    117c:	4605      	mov	r5, r0
    117e:	b148      	cbz	r0, 1194 <usart_async_get_io_descriptor+0x1c>
    1180:	1c08      	adds	r0, r1, #0
    1182:	bf18      	it	ne
    1184:	2001      	movne	r0, #1
    1186:	2277      	movs	r2, #119	; 0x77
    1188:	4903      	ldr	r1, [pc, #12]	; (1198 <usart_async_get_io_descriptor+0x20>)
    118a:	4b04      	ldr	r3, [pc, #16]	; (119c <usart_async_get_io_descriptor+0x24>)
    118c:	4798      	blx	r3
	*io = &descr->io;
    118e:	6025      	str	r5, [r4, #0]
}
    1190:	2000      	movs	r0, #0
    1192:	bd38      	pop	{r3, r4, r5, pc}
    1194:	2000      	movs	r0, #0
    1196:	e7f6      	b.n	1186 <usart_async_get_io_descriptor+0xe>
    1198:	00003778 	.word	0x00003778
    119c:	000011a1 	.word	0x000011a1

000011a0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    11a0:	b900      	cbnz	r0, 11a4 <assert+0x4>
		__asm("BKPT #0");
    11a2:	be00      	bkpt	0x0000
    11a4:	4770      	bx	lr
	...

000011a8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	460e      	mov	r6, r1
    11ac:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    11ae:	4604      	mov	r4, r0
    11b0:	b178      	cbz	r0, 11d2 <ringbuffer_init+0x2a>
    11b2:	b181      	cbz	r1, 11d6 <ringbuffer_init+0x2e>
    11b4:	b1a2      	cbz	r2, 11e0 <ringbuffer_init+0x38>
    11b6:	2001      	movs	r0, #1
    11b8:	2228      	movs	r2, #40	; 0x28
    11ba:	490d      	ldr	r1, [pc, #52]	; (11f0 <ringbuffer_init+0x48>)
    11bc:	4b0d      	ldr	r3, [pc, #52]	; (11f4 <ringbuffer_init+0x4c>)
    11be:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    11c0:	1e6b      	subs	r3, r5, #1
    11c2:	421d      	tst	r5, r3
    11c4:	d109      	bne.n	11da <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    11c6:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    11c8:	2000      	movs	r0, #0
    11ca:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    11cc:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    11ce:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    11d0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    11d2:	2000      	movs	r0, #0
    11d4:	e7f0      	b.n	11b8 <ringbuffer_init+0x10>
    11d6:	2000      	movs	r0, #0
    11d8:	e7ee      	b.n	11b8 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    11da:	f06f 000c 	mvn.w	r0, #12
    11de:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    11e0:	2228      	movs	r2, #40	; 0x28
    11e2:	4903      	ldr	r1, [pc, #12]	; (11f0 <ringbuffer_init+0x48>)
    11e4:	2000      	movs	r0, #0
    11e6:	4b03      	ldr	r3, [pc, #12]	; (11f4 <ringbuffer_init+0x4c>)
    11e8:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    11ea:	1e6b      	subs	r3, r5, #1
    11ec:	e7eb      	b.n	11c6 <ringbuffer_init+0x1e>
    11ee:	bf00      	nop
    11f0:	00003798 	.word	0x00003798
    11f4:	000011a1 	.word	0x000011a1

000011f8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    11f8:	b538      	push	{r3, r4, r5, lr}
    11fa:	460d      	mov	r5, r1
	ASSERT(rb && data);
    11fc:	4604      	mov	r4, r0
    11fe:	b1a0      	cbz	r0, 122a <ringbuffer_get+0x32>
    1200:	1c08      	adds	r0, r1, #0
    1202:	bf18      	it	ne
    1204:	2001      	movne	r0, #1
    1206:	2240      	movs	r2, #64	; 0x40
    1208:	490a      	ldr	r1, [pc, #40]	; (1234 <ringbuffer_get+0x3c>)
    120a:	4b0b      	ldr	r3, [pc, #44]	; (1238 <ringbuffer_get+0x40>)
    120c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    120e:	68a3      	ldr	r3, [r4, #8]
    1210:	68e2      	ldr	r2, [r4, #12]
    1212:	429a      	cmp	r2, r3
    1214:	d00b      	beq.n	122e <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1216:	6862      	ldr	r2, [r4, #4]
    1218:	4013      	ands	r3, r2
    121a:	6822      	ldr	r2, [r4, #0]
    121c:	5cd3      	ldrb	r3, [r2, r3]
    121e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1220:	68a3      	ldr	r3, [r4, #8]
    1222:	3301      	adds	r3, #1
    1224:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1226:	2000      	movs	r0, #0
    1228:	bd38      	pop	{r3, r4, r5, pc}
    122a:	2000      	movs	r0, #0
    122c:	e7eb      	b.n	1206 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    122e:	f06f 0009 	mvn.w	r0, #9
}
    1232:	bd38      	pop	{r3, r4, r5, pc}
    1234:	00003798 	.word	0x00003798
    1238:	000011a1 	.word	0x000011a1

0000123c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    123c:	b538      	push	{r3, r4, r5, lr}
    123e:	460d      	mov	r5, r1
	ASSERT(rb);
    1240:	4604      	mov	r4, r0
    1242:	2251      	movs	r2, #81	; 0x51
    1244:	490b      	ldr	r1, [pc, #44]	; (1274 <ringbuffer_put+0x38>)
    1246:	3000      	adds	r0, #0
    1248:	bf18      	it	ne
    124a:	2001      	movne	r0, #1
    124c:	4b0a      	ldr	r3, [pc, #40]	; (1278 <ringbuffer_put+0x3c>)
    124e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1250:	68e3      	ldr	r3, [r4, #12]
    1252:	6862      	ldr	r2, [r4, #4]
    1254:	4013      	ands	r3, r2
    1256:	6822      	ldr	r2, [r4, #0]
    1258:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    125a:	68e3      	ldr	r3, [r4, #12]
    125c:	6861      	ldr	r1, [r4, #4]
    125e:	68a2      	ldr	r2, [r4, #8]
    1260:	1a9a      	subs	r2, r3, r2
    1262:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1264:	bf84      	itt	hi
    1266:	1a59      	subhi	r1, r3, r1
    1268:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    126a:	3301      	adds	r3, #1
    126c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    126e:	2000      	movs	r0, #0
    1270:	bd38      	pop	{r3, r4, r5, pc}
    1272:	bf00      	nop
    1274:	00003798 	.word	0x00003798
    1278:	000011a1 	.word	0x000011a1

0000127c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    127c:	b510      	push	{r4, lr}
	ASSERT(rb);
    127e:	4604      	mov	r4, r0
    1280:	2267      	movs	r2, #103	; 0x67
    1282:	4905      	ldr	r1, [pc, #20]	; (1298 <ringbuffer_num+0x1c>)
    1284:	3000      	adds	r0, #0
    1286:	bf18      	it	ne
    1288:	2001      	movne	r0, #1
    128a:	4b04      	ldr	r3, [pc, #16]	; (129c <ringbuffer_num+0x20>)
    128c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    128e:	68e0      	ldr	r0, [r4, #12]
    1290:	68a3      	ldr	r3, [r4, #8]
}
    1292:	1ac0      	subs	r0, r0, r3
    1294:	bd10      	pop	{r4, pc}
    1296:	bf00      	nop
    1298:	00003798 	.word	0x00003798
    129c:	000011a1 	.word	0x000011a1

000012a0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    12a0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    12a2:	4a06      	ldr	r2, [pc, #24]	; (12bc <_sbrk+0x1c>)
    12a4:	6812      	ldr	r2, [r2, #0]
    12a6:	b122      	cbz	r2, 12b2 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    12a8:	4a04      	ldr	r2, [pc, #16]	; (12bc <_sbrk+0x1c>)
    12aa:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    12ac:	4403      	add	r3, r0
    12ae:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    12b0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    12b2:	4903      	ldr	r1, [pc, #12]	; (12c0 <_sbrk+0x20>)
    12b4:	4a01      	ldr	r2, [pc, #4]	; (12bc <_sbrk+0x1c>)
    12b6:	6011      	str	r1, [r2, #0]
    12b8:	e7f6      	b.n	12a8 <_sbrk+0x8>
    12ba:	bf00      	nop
    12bc:	200003c8 	.word	0x200003c8
    12c0:	20010f78 	.word	0x20010f78

000012c4 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    12c4:	6940      	ldr	r0, [r0, #20]
    12c6:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    12ca:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    12ce:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    12d0:	0040      	lsls	r0, r0, #1
    12d2:	3076      	adds	r0, #118	; 0x76
}
    12d4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    12d8:	4770      	bx	lr
	...

000012dc <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    12dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    12de:	f013 0f01 	tst.w	r3, #1
    12e2:	d11b      	bne.n	131c <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12e6:	f013 0f03 	tst.w	r3, #3
    12ea:	d1fb      	bne.n	12e4 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    12ec:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    12ee:	f013 0f02 	tst.w	r3, #2
    12f2:	d00d      	beq.n	1310 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    12f4:	8803      	ldrh	r3, [r0, #0]
    12f6:	f023 0302 	bic.w	r3, r3, #2
    12fa:	041b      	lsls	r3, r3, #16
    12fc:	0c1b      	lsrs	r3, r3, #16
    12fe:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1300:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1302:	f013 0f03 	tst.w	r3, #3
    1306:	d1fb      	bne.n	1300 <_adc_init+0x24>
    1308:	6b03      	ldr	r3, [r0, #48]	; 0x30
    130a:	f013 0f02 	tst.w	r3, #2
    130e:	d1fb      	bne.n	1308 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1310:	2301      	movs	r3, #1
    1312:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1314:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1316:	f013 0f03 	tst.w	r3, #3
    131a:	d1fb      	bne.n	1314 <_adc_init+0x38>
    131c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    131e:	f013 0f01 	tst.w	r3, #1
    1322:	d1fb      	bne.n	131c <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1324:	2316      	movs	r3, #22
    1326:	4a37      	ldr	r2, [pc, #220]	; (1404 <_adc_init+0x128>)
    1328:	fb03 2301 	mla	r3, r3, r1, r2
    132c:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    132e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1330:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1332:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1336:	2b00      	cmp	r3, #0
    1338:	d1fa      	bne.n	1330 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    133a:	2316      	movs	r3, #22
    133c:	4a31      	ldr	r2, [pc, #196]	; (1404 <_adc_init+0x128>)
    133e:	fb03 2301 	mla	r3, r3, r1, r2
    1342:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1344:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1346:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1348:	f3c3 030b 	ubfx	r3, r3, #0, #12
    134c:	2b00      	cmp	r3, #0
    134e:	d1fa      	bne.n	1346 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1350:	2316      	movs	r3, #22
    1352:	4a2c      	ldr	r2, [pc, #176]	; (1404 <_adc_init+0x128>)
    1354:	fb03 2301 	mla	r3, r3, r1, r2
    1358:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    135a:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    135c:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    135e:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1360:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1362:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1366:	2b00      	cmp	r3, #0
    1368:	d1fa      	bne.n	1360 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    136a:	2316      	movs	r3, #22
    136c:	4a25      	ldr	r2, [pc, #148]	; (1404 <_adc_init+0x128>)
    136e:	fb03 2301 	mla	r3, r3, r1, r2
    1372:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1374:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1376:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1378:	f3c3 030b 	ubfx	r3, r3, #0, #12
    137c:	2b00      	cmp	r3, #0
    137e:	d1fa      	bne.n	1376 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1380:	2316      	movs	r3, #22
    1382:	4a20      	ldr	r2, [pc, #128]	; (1404 <_adc_init+0x128>)
    1384:	fb03 2301 	mla	r3, r3, r1, r2
    1388:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    138a:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    138c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    138e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1392:	2b00      	cmp	r3, #0
    1394:	d1fa      	bne.n	138c <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1396:	2316      	movs	r3, #22
    1398:	4a1a      	ldr	r2, [pc, #104]	; (1404 <_adc_init+0x128>)
    139a:	fb03 2301 	mla	r3, r3, r1, r2
    139e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    13a0:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13a4:	f013 0f80 	tst.w	r3, #128	; 0x80
    13a8:	d1fb      	bne.n	13a2 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    13aa:	2316      	movs	r3, #22
    13ac:	4a15      	ldr	r2, [pc, #84]	; (1404 <_adc_init+0x128>)
    13ae:	fb03 2301 	mla	r3, r3, r1, r2
    13b2:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    13b4:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13b8:	f413 7f80 	tst.w	r3, #256	; 0x100
    13bc:	d1fb      	bne.n	13b6 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    13be:	2316      	movs	r3, #22
    13c0:	4a10      	ldr	r2, [pc, #64]	; (1404 <_adc_init+0x128>)
    13c2:	fb03 2301 	mla	r3, r3, r1, r2
    13c6:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    13c8:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13cc:	f413 7f00 	tst.w	r3, #512	; 0x200
    13d0:	d1fb      	bne.n	13ca <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    13d2:	2316      	movs	r3, #22
    13d4:	4a0b      	ldr	r2, [pc, #44]	; (1404 <_adc_init+0x128>)
    13d6:	fb03 2301 	mla	r3, r3, r1, r2
    13da:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    13dc:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13de:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    13e4:	d1fb      	bne.n	13de <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    13e6:	2216      	movs	r2, #22
    13e8:	4b06      	ldr	r3, [pc, #24]	; (1404 <_adc_init+0x128>)
    13ea:	fb02 3101 	mla	r1, r2, r1, r3
    13ee:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    13f0:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    13f2:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    13f4:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13f8:	f013 0f03 	tst.w	r3, #3
    13fc:	d1fb      	bne.n	13f6 <_adc_init+0x11a>

	return ERR_NONE;
}
    13fe:	2000      	movs	r0, #0
    1400:	4770      	bx	lr
    1402:	bf00      	nop
    1404:	000037bc 	.word	0x000037bc

00001408 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    1408:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    140a:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    140c:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    1410:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    1414:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    1416:	f013 0f01 	tst.w	r3, #1
    141a:	d106      	bne.n	142a <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    141c:	f013 0f02 	tst.w	r3, #2
    1420:	d10d      	bne.n	143e <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    1422:	f013 0f04 	tst.w	r3, #4
    1426:	d111      	bne.n	144c <_adc_interrupt_handler+0x44>
    1428:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    142a:	2301      	movs	r3, #1
    142c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    1430:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    1434:	6883      	ldr	r3, [r0, #8]
    1436:	b292      	uxth	r2, r2
    1438:	2100      	movs	r1, #0
    143a:	4798      	blx	r3
    143c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    143e:	2302      	movs	r3, #2
    1440:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    1444:	6843      	ldr	r3, [r0, #4]
    1446:	2100      	movs	r1, #0
    1448:	4798      	blx	r3
    144a:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    144c:	2304      	movs	r3, #4
    144e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    1452:	6803      	ldr	r3, [r0, #0]
    1454:	2100      	movs	r1, #0
    1456:	4798      	blx	r3
	}
}
    1458:	e7e6      	b.n	1428 <_adc_interrupt_handler+0x20>
	...

0000145c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    145c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1460:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1464:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1468:	b148      	cbz	r0, 147e <_adc_get_regs+0x22>
    146a:	2801      	cmp	r0, #1
    146c:	d009      	beq.n	1482 <_adc_get_regs+0x26>
{
    146e:	b508      	push	{r3, lr}
	ASSERT(false);
    1470:	228c      	movs	r2, #140	; 0x8c
    1472:	4905      	ldr	r1, [pc, #20]	; (1488 <_adc_get_regs+0x2c>)
    1474:	2000      	movs	r0, #0
    1476:	4b05      	ldr	r3, [pc, #20]	; (148c <_adc_get_regs+0x30>)
    1478:	4798      	blx	r3
	return 0;
    147a:	2000      	movs	r0, #0
    147c:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    147e:	2000      	movs	r0, #0
    1480:	4770      	bx	lr
    1482:	2001      	movs	r0, #1
    1484:	4770      	bx	lr
    1486:	bf00      	nop
    1488:	000037e8 	.word	0x000037e8
    148c:	000011a1 	.word	0x000011a1

00001490 <_adc_async_init>:
{
    1490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1494:	460c      	mov	r4, r1
	ASSERT(device);
    1496:	4605      	mov	r5, r0
    1498:	22e6      	movs	r2, #230	; 0xe6
    149a:	493b      	ldr	r1, [pc, #236]	; (1588 <_adc_async_init+0xf8>)
    149c:	3000      	adds	r0, #0
    149e:	bf18      	it	ne
    14a0:	2001      	movne	r0, #1
    14a2:	4b3a      	ldr	r3, [pc, #232]	; (158c <_adc_async_init+0xfc>)
    14a4:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    14a6:	4620      	mov	r0, r4
    14a8:	4b39      	ldr	r3, [pc, #228]	; (1590 <_adc_async_init+0x100>)
    14aa:	4798      	blx	r3
    14ac:	4601      	mov	r1, r0
    14ae:	4620      	mov	r0, r4
    14b0:	4b38      	ldr	r3, [pc, #224]	; (1594 <_adc_async_init+0x104>)
    14b2:	4798      	blx	r3
	if (init_status) {
    14b4:	4606      	mov	r6, r0
    14b6:	b110      	cbz	r0, 14be <_adc_async_init+0x2e>
}
    14b8:	4630      	mov	r0, r6
    14ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    14be:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    14c0:	4b35      	ldr	r3, [pc, #212]	; (1598 <_adc_async_init+0x108>)
    14c2:	429c      	cmp	r4, r3
    14c4:	d05c      	beq.n	1580 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    14c6:	4b35      	ldr	r3, [pc, #212]	; (159c <_adc_async_init+0x10c>)
    14c8:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    14ca:	bf04      	itt	eq
    14cc:	4b34      	ldreq	r3, [pc, #208]	; (15a0 <_adc_async_init+0x110>)
    14ce:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    14d0:	4628      	mov	r0, r5
    14d2:	4f34      	ldr	r7, [pc, #208]	; (15a4 <_adc_async_init+0x114>)
    14d4:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14d6:	0943      	lsrs	r3, r0, #5
    14d8:	f000 001f 	and.w	r0, r0, #31
    14dc:	2401      	movs	r4, #1
    14de:	fa04 f000 	lsl.w	r0, r4, r0
    14e2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 15a8 <_adc_async_init+0x118>
    14e6:	3320      	adds	r3, #32
    14e8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    14ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14f0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    14f4:	4628      	mov	r0, r5
    14f6:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14f8:	0943      	lsrs	r3, r0, #5
    14fa:	f000 001f 	and.w	r0, r0, #31
    14fe:	fa04 f000 	lsl.w	r0, r4, r0
    1502:	3360      	adds	r3, #96	; 0x60
    1504:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    1508:	4628      	mov	r0, r5
    150a:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    150c:	0943      	lsrs	r3, r0, #5
    150e:	f000 001f 	and.w	r0, r0, #31
    1512:	4084      	lsls	r4, r0
    1514:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    1518:	4628      	mov	r0, r5
    151a:	47b8      	blx	r7
    151c:	3001      	adds	r0, #1
    151e:	b280      	uxth	r0, r0
    1520:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1522:	2b00      	cmp	r3, #0
    1524:	dbc8      	blt.n	14b8 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1526:	095b      	lsrs	r3, r3, #5
    1528:	f000 001f 	and.w	r0, r0, #31
    152c:	2201      	movs	r2, #1
    152e:	fa02 f000 	lsl.w	r0, r2, r0
    1532:	3320      	adds	r3, #32
    1534:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    153c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    1540:	4628      	mov	r0, r5
    1542:	47b8      	blx	r7
    1544:	3001      	adds	r0, #1
    1546:	b280      	uxth	r0, r0
    1548:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    154a:	2b00      	cmp	r3, #0
    154c:	dbb4      	blt.n	14b8 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    154e:	095b      	lsrs	r3, r3, #5
    1550:	f000 001f 	and.w	r0, r0, #31
    1554:	2201      	movs	r2, #1
    1556:	fa02 f000 	lsl.w	r0, r2, r0
    155a:	3360      	adds	r3, #96	; 0x60
    155c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    1560:	4628      	mov	r0, r5
    1562:	47b8      	blx	r7
    1564:	3001      	adds	r0, #1
    1566:	b280      	uxth	r0, r0
    1568:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    156a:	2b00      	cmp	r3, #0
    156c:	dba4      	blt.n	14b8 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    156e:	095b      	lsrs	r3, r3, #5
    1570:	f000 001f 	and.w	r0, r0, #31
    1574:	2201      	movs	r2, #1
    1576:	fa02 f000 	lsl.w	r0, r2, r0
    157a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    157e:	e79b      	b.n	14b8 <_adc_async_init+0x28>
		_adc0_dev = dev;
    1580:	4b07      	ldr	r3, [pc, #28]	; (15a0 <_adc_async_init+0x110>)
    1582:	601d      	str	r5, [r3, #0]
    1584:	e7a4      	b.n	14d0 <_adc_async_init+0x40>
    1586:	bf00      	nop
    1588:	000037e8 	.word	0x000037e8
    158c:	000011a1 	.word	0x000011a1
    1590:	0000145d 	.word	0x0000145d
    1594:	000012dd 	.word	0x000012dd
    1598:	43001c00 	.word	0x43001c00
    159c:	43002000 	.word	0x43002000
    15a0:	200003cc 	.word	0x200003cc
    15a4:	000012c5 	.word	0x000012c5
    15a8:	e000e100 	.word	0xe000e100

000015ac <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    15ac:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    15ae:	8813      	ldrh	r3, [r2, #0]
    15b0:	b29b      	uxth	r3, r3
    15b2:	f043 0302 	orr.w	r3, r3, #2
    15b6:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    15ba:	f013 0f03 	tst.w	r3, #3
    15be:	d1fb      	bne.n	15b8 <_adc_async_enable_channel+0xc>
}
    15c0:	4770      	bx	lr

000015c2 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    15c2:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    15c4:	88db      	ldrh	r3, [r3, #6]
    15c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    15ca:	2b03      	cmp	r3, #3
}
    15cc:	bf0c      	ite	eq
    15ce:	2001      	moveq	r0, #1
    15d0:	2002      	movne	r0, #2
    15d2:	4770      	bx	lr

000015d4 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    15d4:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    15d6:	7d13      	ldrb	r3, [r2, #20]
    15d8:	f043 0302 	orr.w	r3, r3, #2
    15dc:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15de:	6b13      	ldr	r3, [r2, #48]	; 0x30
    15e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    15e4:	2b00      	cmp	r3, #0
    15e6:	d1fa      	bne.n	15de <_adc_async_convert+0xa>
}
    15e8:	4770      	bx	lr

000015ea <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    15ea:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    15ec:	2a01      	cmp	r2, #1
    15ee:	d007      	beq.n	1600 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    15f0:	2a02      	cmp	r2, #2
    15f2:	d00e      	beq.n	1612 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    15f4:	b91a      	cbnz	r2, 15fe <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    15f6:	b1ab      	cbz	r3, 1624 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    15f8:	2301      	movs	r3, #1
    15fa:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    15fe:	4770      	bx	lr
	if (value == 0x0) {
    1600:	b91b      	cbnz	r3, 160a <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    1602:	2304      	movs	r3, #4
    1604:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    1608:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    160a:	2304      	movs	r3, #4
    160c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    1610:	4770      	bx	lr
	if (value == 0x0) {
    1612:	b91b      	cbnz	r3, 161c <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    1614:	2302      	movs	r3, #2
    1616:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    161a:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    161c:	2302      	movs	r3, #2
    161e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    1622:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    1624:	2301      	movs	r3, #1
    1626:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    162a:	4770      	bx	lr

0000162c <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    162c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    162e:	4b02      	ldr	r3, [pc, #8]	; (1638 <ADC0_0_Handler+0xc>)
    1630:	6818      	ldr	r0, [r3, #0]
    1632:	4b02      	ldr	r3, [pc, #8]	; (163c <ADC0_0_Handler+0x10>)
    1634:	4798      	blx	r3
    1636:	bd08      	pop	{r3, pc}
    1638:	200003cc 	.word	0x200003cc
    163c:	00001409 	.word	0x00001409

00001640 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    1640:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    1642:	4b02      	ldr	r3, [pc, #8]	; (164c <ADC0_1_Handler+0xc>)
    1644:	6818      	ldr	r0, [r3, #0]
    1646:	4b02      	ldr	r3, [pc, #8]	; (1650 <ADC0_1_Handler+0x10>)
    1648:	4798      	blx	r3
    164a:	bd08      	pop	{r3, pc}
    164c:	200003cc 	.word	0x200003cc
    1650:	00001409 	.word	0x00001409

00001654 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    1654:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    1656:	4b02      	ldr	r3, [pc, #8]	; (1660 <ADC1_0_Handler+0xc>)
    1658:	6858      	ldr	r0, [r3, #4]
    165a:	4b02      	ldr	r3, [pc, #8]	; (1664 <ADC1_0_Handler+0x10>)
    165c:	4798      	blx	r3
    165e:	bd08      	pop	{r3, pc}
    1660:	200003cc 	.word	0x200003cc
    1664:	00001409 	.word	0x00001409

00001668 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    1668:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    166a:	4b02      	ldr	r3, [pc, #8]	; (1674 <ADC1_1_Handler+0xc>)
    166c:	6858      	ldr	r0, [r3, #4]
    166e:	4b02      	ldr	r3, [pc, #8]	; (1678 <ADC1_1_Handler+0x10>)
    1670:	4798      	blx	r3
    1672:	bd08      	pop	{r3, pc}
    1674:	200003cc 	.word	0x200003cc
    1678:	00001409 	.word	0x00001409

0000167c <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    167c:	f64b 3380 	movw	r3, #48000	; 0xbb80
    1680:	fb03 f000 	mul.w	r0, r3, r0
    1684:	4770      	bx	lr
	...

00001688 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1688:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    168a:	4a0d      	ldr	r2, [pc, #52]	; (16c0 <_init_chip+0x38>)
    168c:	8813      	ldrh	r3, [r2, #0]
    168e:	b29b      	uxth	r3, r3
    1690:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1692:	4b0c      	ldr	r3, [pc, #48]	; (16c4 <_init_chip+0x3c>)
    1694:	4798      	blx	r3
	_oscctrl_init_sources();
    1696:	4b0c      	ldr	r3, [pc, #48]	; (16c8 <_init_chip+0x40>)
    1698:	4798      	blx	r3
	_mclk_init();
    169a:	4b0c      	ldr	r3, [pc, #48]	; (16cc <_init_chip+0x44>)
    169c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    169e:	2008      	movs	r0, #8
    16a0:	4c0b      	ldr	r4, [pc, #44]	; (16d0 <_init_chip+0x48>)
    16a2:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    16a4:	4b0b      	ldr	r3, [pc, #44]	; (16d4 <_init_chip+0x4c>)
    16a6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    16a8:	f640 70f7 	movw	r0, #4087	; 0xff7
    16ac:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    16ae:	4a0a      	ldr	r2, [pc, #40]	; (16d8 <_init_chip+0x50>)
    16b0:	6913      	ldr	r3, [r2, #16]
    16b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    16b6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    16b8:	4b08      	ldr	r3, [pc, #32]	; (16dc <_init_chip+0x54>)
    16ba:	4798      	blx	r3
    16bc:	bd10      	pop	{r4, pc}
    16be:	bf00      	nop
    16c0:	41004000 	.word	0x41004000
    16c4:	00001add 	.word	0x00001add
    16c8:	00001af1 	.word	0x00001af1
    16cc:	00001a05 	.word	0x00001a05
    16d0:	000019a9 	.word	0x000019a9
    16d4:	00001b0d 	.word	0x00001b0d
    16d8:	40000800 	.word	0x40000800
    16dc:	00001755 	.word	0x00001755

000016e0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    16e0:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    16e2:	4a1a      	ldr	r2, [pc, #104]	; (174c <_dmac_handler+0x6c>)
    16e4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    16e6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    16ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    16ee:	4818      	ldr	r0, [pc, #96]	; (1750 <_dmac_handler+0x70>)
    16f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    16f4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    16f8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    16fc:	f012 0f01 	tst.w	r2, #1
    1700:	d10a      	bne.n	1718 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    1702:	011a      	lsls	r2, r3, #4
    1704:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1708:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    170c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    1710:	f012 0f02 	tst.w	r2, #2
    1714:	d10b      	bne.n	172e <_dmac_handler+0x4e>
    1716:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1718:	011a      	lsls	r2, r3, #4
    171a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    171e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1722:	2101      	movs	r1, #1
    1724:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1728:	6843      	ldr	r3, [r0, #4]
    172a:	4798      	blx	r3
    172c:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    172e:	011a      	lsls	r2, r3, #4
    1730:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1734:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1738:	2102      	movs	r1, #2
    173a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    173e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1742:	4a03      	ldr	r2, [pc, #12]	; (1750 <_dmac_handler+0x70>)
    1744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1748:	4798      	blx	r3
	}
}
    174a:	e7e4      	b.n	1716 <_dmac_handler+0x36>
    174c:	4100a000 	.word	0x4100a000
    1750:	200003d4 	.word	0x200003d4

00001754 <_dma_init>:
{
    1754:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1756:	4a31      	ldr	r2, [pc, #196]	; (181c <_dma_init+0xc8>)
    1758:	8813      	ldrh	r3, [r2, #0]
    175a:	f023 0302 	bic.w	r3, r3, #2
    175e:	041b      	lsls	r3, r3, #16
    1760:	0c1b      	lsrs	r3, r3, #16
    1762:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1764:	8853      	ldrh	r3, [r2, #2]
    1766:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    176a:	041b      	lsls	r3, r3, #16
    176c:	0c1b      	lsrs	r3, r3, #16
    176e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1770:	8813      	ldrh	r3, [r2, #0]
    1772:	b29b      	uxth	r3, r3
    1774:	f043 0301 	orr.w	r3, r3, #1
    1778:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    177a:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    177c:	f013 0f01 	tst.w	r3, #1
    1780:	d1fb      	bne.n	177a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1782:	4b26      	ldr	r3, [pc, #152]	; (181c <_dma_init+0xc8>)
    1784:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1788:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    178a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    178c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1790:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1792:	2100      	movs	r1, #0
    1794:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1796:	4a22      	ldr	r2, [pc, #136]	; (1820 <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1798:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    179a:	4a22      	ldr	r2, [pc, #136]	; (1824 <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
    179c:	639a      	str	r2, [r3, #56]	; 0x38
    179e:	4b22      	ldr	r3, [pc, #136]	; (1828 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    17a0:	4c1f      	ldr	r4, [pc, #124]	; (1820 <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    17a2:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    17a4:	681d      	ldr	r5, [r3, #0]
    17a6:	0108      	lsls	r0, r1, #4
    17a8:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    17ac:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    17b0:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    17b2:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    17b4:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    17b8:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    17ba:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    17be:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    17c0:	1822      	adds	r2, r4, r0
    17c2:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    17c4:	60d6      	str	r6, [r2, #12]
    17c6:	3101      	adds	r1, #1
    17c8:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    17ca:	2920      	cmp	r1, #32
    17cc:	d1ea      	bne.n	17a4 <_dma_init+0x50>
    17ce:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17d0:	2001      	movs	r0, #1
    17d2:	4916      	ldr	r1, [pc, #88]	; (182c <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    17d4:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    17d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    17da:	d00b      	beq.n	17f4 <_dma_init+0xa0>
    17dc:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    17de:	2b24      	cmp	r3, #36	; 0x24
    17e0:	d1f8      	bne.n	17d4 <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    17e2:	4a0e      	ldr	r2, [pc, #56]	; (181c <_dma_init+0xc8>)
    17e4:	8813      	ldrh	r3, [r2, #0]
    17e6:	b29b      	uxth	r3, r3
    17e8:	f043 0302 	orr.w	r3, r3, #2
    17ec:	8013      	strh	r3, [r2, #0]
}
    17ee:	2000      	movs	r0, #0
    17f0:	bc70      	pop	{r4, r5, r6}
    17f2:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17f4:	095c      	lsrs	r4, r3, #5
    17f6:	f002 021f 	and.w	r2, r2, #31
    17fa:	fa00 f202 	lsl.w	r2, r0, r2
    17fe:	f104 0520 	add.w	r5, r4, #32
    1802:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    180a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    180e:	f104 0560 	add.w	r5, r4, #96	; 0x60
    1812:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1816:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    181a:	e7df      	b.n	17dc <_dma_init+0x88>
    181c:	4100a000 	.word	0x4100a000
    1820:	20000af0 	.word	0x20000af0
    1824:	20000cf0 	.word	0x20000cf0
    1828:	00003800 	.word	0x00003800
    182c:	e000e100 	.word	0xe000e100

00001830 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    1830:	b991      	cbnz	r1, 1858 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    1832:	b942      	cbnz	r2, 1846 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    1834:	0100      	lsls	r0, r0, #4
    1836:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    183a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    183e:	2302      	movs	r3, #2
    1840:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1844:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    1846:	0100      	lsls	r0, r0, #4
    1848:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    184c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1850:	2302      	movs	r3, #2
    1852:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    1856:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    1858:	2901      	cmp	r1, #1
    185a:	d000      	beq.n	185e <_dma_set_irq_state+0x2e>
    185c:	4770      	bx	lr
	if (value == 0x0) {
    185e:	b142      	cbz	r2, 1872 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    1860:	0100      	lsls	r0, r0, #4
    1862:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1866:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    186a:	2301      	movs	r3, #1
    186c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    1870:	e7f4      	b.n	185c <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    1872:	0100      	lsls	r0, r0, #4
    1874:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1878:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    187c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    1880:	4770      	bx	lr
	...

00001884 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1884:	4b02      	ldr	r3, [pc, #8]	; (1890 <_dma_set_destination_address+0xc>)
    1886:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    188a:	6081      	str	r1, [r0, #8]
}
    188c:	2000      	movs	r0, #0
    188e:	4770      	bx	lr
    1890:	20000af0 	.word	0x20000af0

00001894 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1894:	4b02      	ldr	r3, [pc, #8]	; (18a0 <_dma_set_source_address+0xc>)
    1896:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    189a:	6041      	str	r1, [r0, #4]
}
    189c:	2000      	movs	r0, #0
    189e:	4770      	bx	lr
    18a0:	20000af0 	.word	0x20000af0

000018a4 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    18a4:	4a05      	ldr	r2, [pc, #20]	; (18bc <_dma_srcinc_enable+0x18>)
    18a6:	0100      	lsls	r0, r0, #4
    18a8:	5a13      	ldrh	r3, [r2, r0]
    18aa:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    18ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    18b0:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    18b4:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    18b6:	5211      	strh	r1, [r2, r0]
}
    18b8:	2000      	movs	r0, #0
    18ba:	4770      	bx	lr
    18bc:	20000af0 	.word	0x20000af0

000018c0 <_dma_set_data_amount>:
{
    18c0:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    18c2:	4c14      	ldr	r4, [pc, #80]	; (1914 <_dma_set_data_amount+0x54>)
    18c4:	0102      	lsls	r2, r0, #4
    18c6:	18a3      	adds	r3, r4, r2
    18c8:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    18ca:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    18cc:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    18d0:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    18d2:	f412 6f00 	tst.w	r2, #2048	; 0x800
    18d6:	d006      	beq.n	18e6 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    18d8:	fa01 f403 	lsl.w	r4, r1, r3
    18dc:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    18de:	4a0d      	ldr	r2, [pc, #52]	; (1914 <_dma_set_data_amount+0x54>)
    18e0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    18e4:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    18e6:	4c0b      	ldr	r4, [pc, #44]	; (1914 <_dma_set_data_amount+0x54>)
    18e8:	0102      	lsls	r2, r0, #4
    18ea:	18a5      	adds	r5, r4, r2
    18ec:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    18ee:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    18f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
    18f4:	d005      	beq.n	1902 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    18f6:	fa01 f303 	lsl.w	r3, r1, r3
    18fa:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    18fc:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    1900:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    1902:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1904:	4b03      	ldr	r3, [pc, #12]	; (1914 <_dma_set_data_amount+0x54>)
    1906:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    190a:	8041      	strh	r1, [r0, #2]
}
    190c:	2000      	movs	r0, #0
    190e:	bc30      	pop	{r4, r5}
    1910:	4770      	bx	lr
    1912:	bf00      	nop
    1914:	20000af0 	.word	0x20000af0

00001918 <_dma_enable_transaction>:
{
    1918:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    191a:	4c0d      	ldr	r4, [pc, #52]	; (1950 <_dma_enable_transaction+0x38>)
    191c:	0103      	lsls	r3, r0, #4
    191e:	5ae2      	ldrh	r2, [r4, r3]
    1920:	b292      	uxth	r2, r2
    1922:	f042 0201 	orr.w	r2, r2, #1
    1926:	52e2      	strh	r2, [r4, r3]
    1928:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    192c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1932:	f042 0202 	orr.w	r2, r2, #2
    1936:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    1938:	b131      	cbz	r1, 1948 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    193a:	4a06      	ldr	r2, [pc, #24]	; (1954 <_dma_enable_transaction+0x3c>)
    193c:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    193e:	2301      	movs	r3, #1
    1940:	fa03 f000 	lsl.w	r0, r3, r0
    1944:	4308      	orrs	r0, r1
    1946:	6110      	str	r0, [r2, #16]
}
    1948:	2000      	movs	r0, #0
    194a:	f85d 4b04 	ldr.w	r4, [sp], #4
    194e:	4770      	bx	lr
    1950:	20000af0 	.word	0x20000af0
    1954:	4100a000 	.word	0x4100a000

00001958 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1958:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    195c:	4b02      	ldr	r3, [pc, #8]	; (1968 <_dma_get_channel_resource+0x10>)
    195e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1962:	6001      	str	r1, [r0, #0]
}
    1964:	2000      	movs	r0, #0
    1966:	4770      	bx	lr
    1968:	200003d4 	.word	0x200003d4

0000196c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    196c:	b508      	push	{r3, lr}
	_dmac_handler();
    196e:	4b01      	ldr	r3, [pc, #4]	; (1974 <DMAC_0_Handler+0x8>)
    1970:	4798      	blx	r3
    1972:	bd08      	pop	{r3, pc}
    1974:	000016e1 	.word	0x000016e1

00001978 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1978:	b508      	push	{r3, lr}
	_dmac_handler();
    197a:	4b01      	ldr	r3, [pc, #4]	; (1980 <DMAC_1_Handler+0x8>)
    197c:	4798      	blx	r3
    197e:	bd08      	pop	{r3, pc}
    1980:	000016e1 	.word	0x000016e1

00001984 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1984:	b508      	push	{r3, lr}
	_dmac_handler();
    1986:	4b01      	ldr	r3, [pc, #4]	; (198c <DMAC_2_Handler+0x8>)
    1988:	4798      	blx	r3
    198a:	bd08      	pop	{r3, pc}
    198c:	000016e1 	.word	0x000016e1

00001990 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1990:	b508      	push	{r3, lr}
	_dmac_handler();
    1992:	4b01      	ldr	r3, [pc, #4]	; (1998 <DMAC_3_Handler+0x8>)
    1994:	4798      	blx	r3
    1996:	bd08      	pop	{r3, pc}
    1998:	000016e1 	.word	0x000016e1

0000199c <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    199c:	b508      	push	{r3, lr}
	_dmac_handler();
    199e:	4b01      	ldr	r3, [pc, #4]	; (19a4 <DMAC_4_Handler+0x8>)
    19a0:	4798      	blx	r3
    19a2:	bd08      	pop	{r3, pc}
    19a4:	000016e1 	.word	0x000016e1

000019a8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    19a8:	f010 0f01 	tst.w	r0, #1
    19ac:	d008      	beq.n	19c0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    19ae:	4a11      	ldr	r2, [pc, #68]	; (19f4 <_gclk_init_generators_by_fref+0x4c>)
    19b0:	4b11      	ldr	r3, [pc, #68]	; (19f8 <_gclk_init_generators_by_fref+0x50>)
    19b2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    19b4:	4619      	mov	r1, r3
    19b6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    19ba:	684b      	ldr	r3, [r1, #4]
    19bc:	4213      	tst	r3, r2
    19be:	d1fc      	bne.n	19ba <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    19c0:	f010 0f04 	tst.w	r0, #4
    19c4:	d008      	beq.n	19d8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    19c6:	4a0d      	ldr	r2, [pc, #52]	; (19fc <_gclk_init_generators_by_fref+0x54>)
    19c8:	4b0b      	ldr	r3, [pc, #44]	; (19f8 <_gclk_init_generators_by_fref+0x50>)
    19ca:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    19cc:	4619      	mov	r1, r3
    19ce:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    19d2:	684b      	ldr	r3, [r1, #4]
    19d4:	4213      	tst	r3, r2
    19d6:	d1fc      	bne.n	19d2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    19d8:	f010 0f08 	tst.w	r0, #8
    19dc:	d008      	beq.n	19f0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    19de:	4a08      	ldr	r2, [pc, #32]	; (1a00 <_gclk_init_generators_by_fref+0x58>)
    19e0:	4b05      	ldr	r3, [pc, #20]	; (19f8 <_gclk_init_generators_by_fref+0x50>)
    19e2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    19e4:	4619      	mov	r1, r3
    19e6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    19ea:	684b      	ldr	r3, [r1, #4]
    19ec:	4213      	tst	r3, r2
    19ee:	d1fc      	bne.n	19ea <_gclk_init_generators_by_fref+0x42>
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	00010106 	.word	0x00010106
    19f8:	40001c00 	.word	0x40001c00
    19fc:	00011901 	.word	0x00011901
    1a00:	00010904 	.word	0x00010904

00001a04 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1a04:	2201      	movs	r2, #1
    1a06:	4b01      	ldr	r3, [pc, #4]	; (1a0c <_mclk_init+0x8>)
    1a08:	715a      	strb	r2, [r3, #5]
    1a0a:	4770      	bx	lr
    1a0c:	40000800 	.word	0x40000800

00001a10 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1a10:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1a12:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1a14:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1a16:	f012 0f01 	tst.w	r2, #1
    1a1a:	d005      	beq.n	1a28 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1a1c:	2201      	movs	r2, #1
    1a1e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    1a20:	6803      	ldr	r3, [r0, #0]
    1a22:	b153      	cbz	r3, 1a3a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1a24:	4798      	blx	r3
    1a26:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1a28:	8a1a      	ldrh	r2, [r3, #16]
    1a2a:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1a2c:	b12a      	cbz	r2, 1a3a <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1a2e:	f240 225e 	movw	r2, #606	; 0x25e
    1a32:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1a34:	6843      	ldr	r3, [r0, #4]
    1a36:	b103      	cbz	r3, 1a3a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1a38:	4798      	blx	r3
    1a3a:	bd08      	pop	{r3, pc}

00001a3c <_flash_init>:
{
    1a3c:	b538      	push	{r3, r4, r5, lr}
    1a3e:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1a40:	4605      	mov	r5, r0
    1a42:	b350      	cbz	r0, 1a9a <_flash_init+0x5e>
    1a44:	4816      	ldr	r0, [pc, #88]	; (1aa0 <_flash_init+0x64>)
    1a46:	4281      	cmp	r1, r0
    1a48:	bf14      	ite	ne
    1a4a:	2000      	movne	r0, #0
    1a4c:	2001      	moveq	r0, #1
    1a4e:	224b      	movs	r2, #75	; 0x4b
    1a50:	4914      	ldr	r1, [pc, #80]	; (1aa4 <_flash_init+0x68>)
    1a52:	4b15      	ldr	r3, [pc, #84]	; (1aa8 <_flash_init+0x6c>)
    1a54:	4798      	blx	r3
	device->hw = hw;
    1a56:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1a58:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1a5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    1a5e:	049b      	lsls	r3, r3, #18
    1a60:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1a62:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1a64:	4b11      	ldr	r3, [pc, #68]	; (1aac <_flash_init+0x70>)
    1a66:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a68:	4b11      	ldr	r3, [pc, #68]	; (1ab0 <_flash_init+0x74>)
    1a6a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1a6e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a76:	f3bf 8f6f 	isb	sy
    1a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a86:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a8a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1a8e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a92:	6019      	str	r1, [r3, #0]
    1a94:	601a      	str	r2, [r3, #0]
}
    1a96:	2000      	movs	r0, #0
    1a98:	bd38      	pop	{r3, r4, r5, pc}
    1a9a:	2000      	movs	r0, #0
    1a9c:	e7d7      	b.n	1a4e <_flash_init+0x12>
    1a9e:	bf00      	nop
    1aa0:	41004000 	.word	0x41004000
    1aa4:	00003900 	.word	0x00003900
    1aa8:	000011a1 	.word	0x000011a1
    1aac:	20000554 	.word	0x20000554
    1ab0:	e000e100 	.word	0xe000e100

00001ab4 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1ab4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1ab6:	4b02      	ldr	r3, [pc, #8]	; (1ac0 <NVMCTRL_0_Handler+0xc>)
    1ab8:	6818      	ldr	r0, [r3, #0]
    1aba:	4b02      	ldr	r3, [pc, #8]	; (1ac4 <NVMCTRL_0_Handler+0x10>)
    1abc:	4798      	blx	r3
    1abe:	bd08      	pop	{r3, pc}
    1ac0:	20000554 	.word	0x20000554
    1ac4:	00001a11 	.word	0x00001a11

00001ac8 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1ac8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1aca:	4b02      	ldr	r3, [pc, #8]	; (1ad4 <NVMCTRL_1_Handler+0xc>)
    1acc:	6818      	ldr	r0, [r3, #0]
    1ace:	4b02      	ldr	r3, [pc, #8]	; (1ad8 <NVMCTRL_1_Handler+0x10>)
    1ad0:	4798      	blx	r3
    1ad2:	bd08      	pop	{r3, pc}
    1ad4:	20000554 	.word	0x20000554
    1ad8:	00001a11 	.word	0x00001a11

00001adc <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1adc:	4b03      	ldr	r3, [pc, #12]	; (1aec <_osc32kctrl_init_sources+0x10>)
    1ade:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1ae0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1ae4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1ae6:	2201      	movs	r2, #1
    1ae8:	741a      	strb	r2, [r3, #16]
    1aea:	4770      	bx	lr
    1aec:	40001400 	.word	0x40001400

00001af0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1af0:	4a04      	ldr	r2, [pc, #16]	; (1b04 <_oscctrl_init_sources+0x14>)
    1af2:	4b05      	ldr	r3, [pc, #20]	; (1b08 <_oscctrl_init_sources+0x18>)
    1af4:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1af6:	461a      	mov	r2, r3
    1af8:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1afa:	f013 0f02 	tst.w	r3, #2
    1afe:	d0fb      	beq.n	1af8 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1b00:	4770      	bx	lr
    1b02:	bf00      	nop
    1b04:	03002606 	.word	0x03002606
    1b08:	40001000 	.word	0x40001000

00001b0c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1b0c:	4a36      	ldr	r2, [pc, #216]	; (1be8 <_oscctrl_init_referenced_generators+0xdc>)
    1b0e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1b10:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1b14:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1b18:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b1a:	4611      	mov	r1, r2
    1b1c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b20:	684b      	ldr	r3, [r1, #4]
    1b22:	4213      	tst	r3, r2
    1b24:	d1fc      	bne.n	1b20 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1b26:	4a30      	ldr	r2, [pc, #192]	; (1be8 <_oscctrl_init_referenced_generators+0xdc>)
    1b28:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1b2a:	f013 0f04 	tst.w	r3, #4
    1b2e:	d1fb      	bne.n	1b28 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b30:	4b2e      	ldr	r3, [pc, #184]	; (1bec <_oscctrl_init_referenced_generators+0xe0>)
    1b32:	2200      	movs	r2, #0
    1b34:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1b36:	4a2e      	ldr	r2, [pc, #184]	; (1bf0 <_oscctrl_init_referenced_generators+0xe4>)
    1b38:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b3a:	461a      	mov	r2, r3
    1b3c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1b40:	f013 0f10 	tst.w	r3, #16
    1b44:	d1fa      	bne.n	1b3c <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1b46:	2200      	movs	r2, #0
    1b48:	4b28      	ldr	r3, [pc, #160]	; (1bec <_oscctrl_init_referenced_generators+0xe0>)
    1b4a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b4e:	461a      	mov	r2, r3
    1b50:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1b54:	f013 0f04 	tst.w	r3, #4
    1b58:	d1fa      	bne.n	1b50 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b5a:	2202      	movs	r2, #2
    1b5c:	4b23      	ldr	r3, [pc, #140]	; (1bec <_oscctrl_init_referenced_generators+0xe0>)
    1b5e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b60:	461a      	mov	r2, r3
    1b62:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1b66:	f013 0f02 	tst.w	r3, #2
    1b6a:	d1fa      	bne.n	1b62 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1b6c:	4b1f      	ldr	r3, [pc, #124]	; (1bec <_oscctrl_init_referenced_generators+0xe0>)
    1b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1b70:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b72:	461a      	mov	r2, r3
    1b74:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1b78:	f013 0f08 	tst.w	r3, #8
    1b7c:	d1fa      	bne.n	1b74 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1b7e:	2280      	movs	r2, #128	; 0x80
    1b80:	4b1a      	ldr	r3, [pc, #104]	; (1bec <_oscctrl_init_referenced_generators+0xe0>)
    1b82:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b86:	461a      	mov	r2, r3
    1b88:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1b8c:	f013 0f04 	tst.w	r3, #4
    1b90:	d1fa      	bne.n	1b88 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1b92:	4b16      	ldr	r3, [pc, #88]	; (1bec <_oscctrl_init_referenced_generators+0xe0>)
    1b94:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1b98:	f013 0f01 	tst.w	r3, #1
    1b9c:	d01d      	beq.n	1bda <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1b9e:	4a13      	ldr	r2, [pc, #76]	; (1bec <_oscctrl_init_referenced_generators+0xe0>)
    1ba0:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1ba2:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1ba6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1baa:	d1f9      	bne.n	1ba0 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1bac:	4a0e      	ldr	r2, [pc, #56]	; (1be8 <_oscctrl_init_referenced_generators+0xdc>)
    1bae:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d1fc      	bne.n	1bae <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1bb4:	4a0c      	ldr	r2, [pc, #48]	; (1be8 <_oscctrl_init_referenced_generators+0xdc>)
    1bb6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1bb8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1bbc:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1bc0:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bc2:	4611      	mov	r1, r2
    1bc4:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bc8:	684b      	ldr	r3, [r1, #4]
    1bca:	4213      	tst	r3, r2
    1bcc:	d1fc      	bne.n	1bc8 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1bce:	4a06      	ldr	r2, [pc, #24]	; (1be8 <_oscctrl_init_referenced_generators+0xdc>)
    1bd0:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1bd2:	f013 0f04 	tst.w	r3, #4
    1bd6:	d1fb      	bne.n	1bd0 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1bd8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1bda:	4a04      	ldr	r2, [pc, #16]	; (1bec <_oscctrl_init_referenced_generators+0xe0>)
    1bdc:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1bde:	f413 7f80 	tst.w	r3, #256	; 0x100
    1be2:	d0fb      	beq.n	1bdc <_oscctrl_init_referenced_generators+0xd0>
    1be4:	e7e2      	b.n	1bac <_oscctrl_init_referenced_generators+0xa0>
    1be6:	bf00      	nop
    1be8:	40001c00 	.word	0x40001c00
    1bec:	40001000 	.word	0x40001000
    1bf0:	04010000 	.word	0x04010000

00001bf4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1bf4:	b500      	push	{lr}
    1bf6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1bf8:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <RAMECC_Handler+0x3c>)
    1bfa:	789b      	ldrb	r3, [r3, #2]
    1bfc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1bfe:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1c00:	9b01      	ldr	r3, [sp, #4]
    1c02:	f013 0f02 	tst.w	r3, #2
    1c06:	d006      	beq.n	1c16 <RAMECC_Handler+0x22>
    1c08:	4b0a      	ldr	r3, [pc, #40]	; (1c34 <RAMECC_Handler+0x40>)
    1c0a:	681b      	ldr	r3, [r3, #0]
    1c0c:	b11b      	cbz	r3, 1c16 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1c0e:	4a08      	ldr	r2, [pc, #32]	; (1c30 <RAMECC_Handler+0x3c>)
    1c10:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c12:	4798      	blx	r3
    1c14:	e009      	b.n	1c2a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1c16:	9b01      	ldr	r3, [sp, #4]
    1c18:	f013 0f01 	tst.w	r3, #1
    1c1c:	d005      	beq.n	1c2a <RAMECC_Handler+0x36>
    1c1e:	4b05      	ldr	r3, [pc, #20]	; (1c34 <RAMECC_Handler+0x40>)
    1c20:	685b      	ldr	r3, [r3, #4]
    1c22:	b113      	cbz	r3, 1c2a <RAMECC_Handler+0x36>
    1c24:	4a02      	ldr	r2, [pc, #8]	; (1c30 <RAMECC_Handler+0x3c>)
    1c26:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c28:	4798      	blx	r3
	} else {
		return;
	}
}
    1c2a:	b003      	add	sp, #12
    1c2c:	f85d fb04 	ldr.w	pc, [sp], #4
    1c30:	41020000 	.word	0x41020000
    1c34:	20000ef0 	.word	0x20000ef0

00001c38 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1c38:	b470      	push	{r4, r5, r6}
    1c3a:	b089      	sub	sp, #36	; 0x24
    1c3c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1c3e:	466c      	mov	r4, sp
    1c40:	4d0d      	ldr	r5, [pc, #52]	; (1c78 <_sercom_get_hardware_index+0x40>)
    1c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c4e:	9b00      	ldr	r3, [sp, #0]
    1c50:	42b3      	cmp	r3, r6
    1c52:	d00d      	beq.n	1c70 <_sercom_get_hardware_index+0x38>
    1c54:	4631      	mov	r1, r6
    1c56:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c58:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c5a:	f853 2b04 	ldr.w	r2, [r3], #4
    1c5e:	428a      	cmp	r2, r1
    1c60:	d007      	beq.n	1c72 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c62:	3001      	adds	r0, #1
    1c64:	2808      	cmp	r0, #8
    1c66:	d1f8      	bne.n	1c5a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1c68:	2000      	movs	r0, #0
}
    1c6a:	b009      	add	sp, #36	; 0x24
    1c6c:	bc70      	pop	{r4, r5, r6}
    1c6e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c70:	2000      	movs	r0, #0
			return i;
    1c72:	b2c0      	uxtb	r0, r0
    1c74:	e7f9      	b.n	1c6a <_sercom_get_hardware_index+0x32>
    1c76:	bf00      	nop
    1c78:	00003920 	.word	0x00003920

00001c7c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1c7c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1c7e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1c80:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1c82:	f013 0f01 	tst.w	r3, #1
    1c86:	d003      	beq.n	1c90 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1c88:	7da3      	ldrb	r3, [r4, #22]
    1c8a:	f013 0f01 	tst.w	r3, #1
    1c8e:	d112      	bne.n	1cb6 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1c90:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1c92:	f013 0f02 	tst.w	r3, #2
    1c96:	d003      	beq.n	1ca0 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1c98:	7da3      	ldrb	r3, [r4, #22]
    1c9a:	f013 0f02 	tst.w	r3, #2
    1c9e:	d10f      	bne.n	1cc0 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1ca0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1ca2:	f013 0f04 	tst.w	r3, #4
    1ca6:	d015      	beq.n	1cd4 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1ca8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1caa:	f003 0337 	and.w	r3, r3, #55	; 0x37
    1cae:	b163      	cbz	r3, 1cca <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1cb0:	23ff      	movs	r3, #255	; 0xff
    1cb2:	8363      	strh	r3, [r4, #26]
    1cb4:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1cb6:	2301      	movs	r3, #1
    1cb8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1cba:	6803      	ldr	r3, [r0, #0]
    1cbc:	4798      	blx	r3
    1cbe:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1cc0:	2302      	movs	r3, #2
    1cc2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1cc4:	6883      	ldr	r3, [r0, #8]
    1cc6:	4798      	blx	r3
    1cc8:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    1cca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1ccc:	6843      	ldr	r3, [r0, #4]
    1cce:	b2c9      	uxtb	r1, r1
    1cd0:	4798      	blx	r3
    1cd2:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1cd4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1cd6:	09db      	lsrs	r3, r3, #7
    1cd8:	d100      	bne.n	1cdc <_sercom_usart_interrupt_handler+0x60>
    1cda:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1cdc:	2380      	movs	r3, #128	; 0x80
    1cde:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1ce0:	68c3      	ldr	r3, [r0, #12]
    1ce2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1ce4:	8b63      	ldrh	r3, [r4, #26]
    1ce6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1ce8:	8363      	strh	r3, [r4, #26]
    1cea:	e7f6      	b.n	1cda <_sercom_usart_interrupt_handler+0x5e>

00001cec <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM2) {
    1cec:	4b05      	ldr	r3, [pc, #20]	; (1d04 <_sercom_init_irq_param+0x18>)
    1cee:	4298      	cmp	r0, r3
    1cf0:	d005      	beq.n	1cfe <_sercom_init_irq_param+0x12>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    1cf2:	4b05      	ldr	r3, [pc, #20]	; (1d08 <_sercom_init_irq_param+0x1c>)
    1cf4:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    1cf6:	bf04      	itt	eq
    1cf8:	4b04      	ldreq	r3, [pc, #16]	; (1d0c <_sercom_init_irq_param+0x20>)
    1cfa:	6059      	streq	r1, [r3, #4]
    1cfc:	4770      	bx	lr
		_sercom2_dev = (struct _usart_async_device *)dev;
    1cfe:	4b03      	ldr	r3, [pc, #12]	; (1d0c <_sercom_init_irq_param+0x20>)
    1d00:	6019      	str	r1, [r3, #0]
    1d02:	4770      	bx	lr
    1d04:	41012000 	.word	0x41012000
    1d08:	43000400 	.word	0x43000400
    1d0c:	20000558 	.word	0x20000558

00001d10 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1d10:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1d12:	4b03      	ldr	r3, [pc, #12]	; (1d20 <_sercom_get_irq_num+0x10>)
    1d14:	4798      	blx	r3
    1d16:	0080      	lsls	r0, r0, #2
    1d18:	302e      	adds	r0, #46	; 0x2e
}
    1d1a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1d1e:	bd08      	pop	{r3, pc}
    1d20:	00001c39 	.word	0x00001c39

00001d24 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1d24:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1d26:	f013 0f01 	tst.w	r3, #1
    1d2a:	d109      	bne.n	1d40 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1d2c:	6803      	ldr	r3, [r0, #0]
    1d2e:	f043 0302 	orr.w	r3, r3, #2
    1d32:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1d34:	69c3      	ldr	r3, [r0, #28]
    1d36:	f013 0f03 	tst.w	r3, #3
    1d3a:	d1fb      	bne.n	1d34 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1d3c:	2000      	movs	r0, #0
    1d3e:	4770      	bx	lr
		return ERR_BUSY;
    1d40:	f06f 0003 	mvn.w	r0, #3
}
    1d44:	4770      	bx	lr
	...

00001d48 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    1d48:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    1d4a:	4b03      	ldr	r3, [pc, #12]	; (1d58 <_spi_get_rx_dma_channel+0x10>)
    1d4c:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    1d4e:	2807      	cmp	r0, #7
    1d50:	bf8c      	ite	hi
    1d52:	2000      	movhi	r0, #0
    1d54:	2001      	movls	r0, #1
    1d56:	bd08      	pop	{r3, pc}
    1d58:	00001c39 	.word	0x00001c39

00001d5c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    1d5c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    1d5e:	6883      	ldr	r3, [r0, #8]
    1d60:	689b      	ldr	r3, [r3, #8]
    1d62:	b103      	cbz	r3, 1d66 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    1d64:	4798      	blx	r3
    1d66:	bd08      	pop	{r3, pc}

00001d68 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    1d68:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    1d6a:	6883      	ldr	r3, [r0, #8]
    1d6c:	685b      	ldr	r3, [r3, #4]
    1d6e:	b103      	cbz	r3, 1d72 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    1d70:	4798      	blx	r3
    1d72:	bd08      	pop	{r3, pc}

00001d74 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    1d74:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    1d76:	6883      	ldr	r3, [r0, #8]
    1d78:	68db      	ldr	r3, [r3, #12]
    1d7a:	b103      	cbz	r3, 1d7e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    1d7c:	4798      	blx	r3
    1d7e:	bd08      	pop	{r3, pc}

00001d80 <_usart_init>:
{
    1d80:	b510      	push	{r4, lr}
    1d82:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1d84:	4b21      	ldr	r3, [pc, #132]	; (1e0c <_usart_init+0x8c>)
    1d86:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1d88:	2802      	cmp	r0, #2
    1d8a:	d005      	beq.n	1d98 <_usart_init+0x18>
	ASSERT(false);
    1d8c:	f240 226e 	movw	r2, #622	; 0x26e
    1d90:	491f      	ldr	r1, [pc, #124]	; (1e10 <_usart_init+0x90>)
    1d92:	2000      	movs	r0, #0
    1d94:	4b1f      	ldr	r3, [pc, #124]	; (1e14 <_usart_init+0x94>)
    1d96:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1d98:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1d9a:	f013 0f01 	tst.w	r3, #1
    1d9e:	d119      	bne.n	1dd4 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1da0:	69e3      	ldr	r3, [r4, #28]
    1da2:	f013 0f03 	tst.w	r3, #3
    1da6:	d1fb      	bne.n	1da0 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1da8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1daa:	f013 0f02 	tst.w	r3, #2
    1dae:	d00b      	beq.n	1dc8 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1db0:	6823      	ldr	r3, [r4, #0]
    1db2:	f023 0302 	bic.w	r3, r3, #2
    1db6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1db8:	69e3      	ldr	r3, [r4, #28]
    1dba:	f013 0f03 	tst.w	r3, #3
    1dbe:	d1fb      	bne.n	1db8 <_usart_init+0x38>
    1dc0:	69e3      	ldr	r3, [r4, #28]
    1dc2:	f013 0f02 	tst.w	r3, #2
    1dc6:	d1fb      	bne.n	1dc0 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1dc8:	2305      	movs	r3, #5
    1dca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1dcc:	69e3      	ldr	r3, [r4, #28]
    1dce:	f013 0f03 	tst.w	r3, #3
    1dd2:	d1fb      	bne.n	1dcc <_usart_init+0x4c>
    1dd4:	69e3      	ldr	r3, [r4, #28]
    1dd6:	f013 0f01 	tst.w	r3, #1
    1dda:	d1fb      	bne.n	1dd4 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1ddc:	4b0e      	ldr	r3, [pc, #56]	; (1e18 <_usart_init+0x98>)
    1dde:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1de0:	69e3      	ldr	r3, [r4, #28]
    1de2:	f013 0f03 	tst.w	r3, #3
    1de6:	d1fb      	bne.n	1de0 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1de8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1dec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1dee:	69e3      	ldr	r3, [r4, #28]
    1df0:	f013 0f1f 	tst.w	r3, #31
    1df4:	d1fb      	bne.n	1dee <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1df6:	4b09      	ldr	r3, [pc, #36]	; (1e1c <_usart_init+0x9c>)
    1df8:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1dfa:	f24f 632b 	movw	r3, #63019	; 0xf62b
    1dfe:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1e00:	2000      	movs	r0, #0
    1e02:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1e04:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    1e08:	bd10      	pop	{r4, pc}
    1e0a:	bf00      	nop
    1e0c:	00001c39 	.word	0x00001c39
    1e10:	0000396c 	.word	0x0000396c
    1e14:	000011a1 	.word	0x000011a1
    1e18:	40100004 	.word	0x40100004
    1e1c:	00700002 	.word	0x00700002

00001e20 <_get_i2cm_index>:
{
    1e20:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e22:	4b07      	ldr	r3, [pc, #28]	; (1e40 <_get_i2cm_index+0x20>)
    1e24:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    1e26:	2805      	cmp	r0, #5
    1e28:	d008      	beq.n	1e3c <_get_i2cm_index+0x1c>
	ASSERT(false);
    1e2a:	f240 32d5 	movw	r2, #981	; 0x3d5
    1e2e:	4905      	ldr	r1, [pc, #20]	; (1e44 <_get_i2cm_index+0x24>)
    1e30:	2000      	movs	r0, #0
    1e32:	4b05      	ldr	r3, [pc, #20]	; (1e48 <_get_i2cm_index+0x28>)
    1e34:	4798      	blx	r3
	return -1;
    1e36:	f04f 30ff 	mov.w	r0, #4294967295
}
    1e3a:	bd08      	pop	{r3, pc}
			return i;
    1e3c:	2000      	movs	r0, #0
    1e3e:	bd08      	pop	{r3, pc}
    1e40:	00001c39 	.word	0x00001c39
    1e44:	0000396c 	.word	0x0000396c
    1e48:	000011a1 	.word	0x000011a1

00001e4c <_i2c_m_sync_init_impl>:
{
    1e4c:	b538      	push	{r3, r4, r5, lr}
    1e4e:	4605      	mov	r5, r0
    1e50:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1e52:	4608      	mov	r0, r1
    1e54:	4b32      	ldr	r3, [pc, #200]	; (1f20 <_i2c_m_sync_init_impl+0xd4>)
    1e56:	4798      	blx	r3
    1e58:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1e5a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1e5c:	f013 0f01 	tst.w	r3, #1
    1e60:	d122      	bne.n	1ea8 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1e62:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1e66:	4a2f      	ldr	r2, [pc, #188]	; (1f24 <_i2c_m_sync_init_impl+0xd8>)
    1e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1e6e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e72:	69e3      	ldr	r3, [r4, #28]
    1e74:	f013 0f03 	tst.w	r3, #3
    1e78:	d1fb      	bne.n	1e72 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1e7a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1e7c:	f013 0f02 	tst.w	r3, #2
    1e80:	d00b      	beq.n	1e9a <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1e82:	6823      	ldr	r3, [r4, #0]
    1e84:	f023 0302 	bic.w	r3, r3, #2
    1e88:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e8a:	69e3      	ldr	r3, [r4, #28]
    1e8c:	f013 0f03 	tst.w	r3, #3
    1e90:	d1fb      	bne.n	1e8a <_i2c_m_sync_init_impl+0x3e>
    1e92:	69e3      	ldr	r3, [r4, #28]
    1e94:	f013 0f02 	tst.w	r3, #2
    1e98:	d1fb      	bne.n	1e92 <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1e9a:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1e9e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ea0:	69e3      	ldr	r3, [r4, #28]
    1ea2:	f013 0f03 	tst.w	r3, #3
    1ea6:	d1fb      	bne.n	1ea0 <_i2c_m_sync_init_impl+0x54>
    1ea8:	69e3      	ldr	r3, [r4, #28]
    1eaa:	f013 0f01 	tst.w	r3, #1
    1eae:	d1fb      	bne.n	1ea8 <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1eb0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1eb4:	4a1b      	ldr	r2, [pc, #108]	; (1f24 <_i2c_m_sync_init_impl+0xd8>)
    1eb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1ebc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ebe:	69e3      	ldr	r3, [r4, #28]
    1ec0:	f013 0f03 	tst.w	r3, #3
    1ec4:	d1fb      	bne.n	1ebe <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1ec6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1eca:	4916      	ldr	r1, [pc, #88]	; (1f24 <_i2c_m_sync_init_impl+0xd8>)
    1ecc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1ed2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ed4:	69e3      	ldr	r3, [r4, #28]
    1ed6:	f013 0f17 	tst.w	r3, #23
    1eda:	d1fb      	bne.n	1ed4 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1edc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ee0:	4910      	ldr	r1, [pc, #64]	; (1f24 <_i2c_m_sync_init_impl+0xd8>)
    1ee2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1ee8:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1eea:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1eee:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1ef0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1ef2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1ef6:	2b01      	cmp	r3, #1
    1ef8:	bf94      	ite	ls
    1efa:	2300      	movls	r3, #0
    1efc:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1efe:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1f02:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f04:	69e3      	ldr	r3, [r4, #28]
    1f06:	f013 0f04 	tst.w	r3, #4
    1f0a:	d1fb      	bne.n	1f04 <_i2c_m_sync_init_impl+0xb8>
	service->trise = _i2cms[i].trise;
    1f0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f10:	4b04      	ldr	r3, [pc, #16]	; (1f24 <_i2c_m_sync_init_impl+0xd8>)
    1f12:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1f16:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1f18:	81eb      	strh	r3, [r5, #14]
}
    1f1a:	2000      	movs	r0, #0
    1f1c:	bd38      	pop	{r3, r4, r5, pc}
    1f1e:	bf00      	nop
    1f20:	00001e21 	.word	0x00001e21
    1f24:	00003920 	.word	0x00003920

00001f28 <_sercom_i2c_m_irq_handler>:
{
    1f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f2c:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    1f2e:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1f30:	7e26      	ldrb	r6, [r4, #24]
    1f32:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    1f34:	f8df 8234 	ldr.w	r8, [pc, #564]	; 216c <_sercom_i2c_m_irq_handler+0x244>
    1f38:	f240 4247 	movw	r2, #1095	; 0x447
    1f3c:	4641      	mov	r1, r8
    1f3e:	3000      	adds	r0, #0
    1f40:	bf18      	it	ne
    1f42:	2001      	movne	r0, #1
    1f44:	4f88      	ldr	r7, [pc, #544]	; (2168 <_sercom_i2c_m_irq_handler+0x240>)
    1f46:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1f48:	6928      	ldr	r0, [r5, #16]
    1f4a:	f44f 6289 	mov.w	r2, #1096	; 0x448
    1f4e:	4641      	mov	r1, r8
    1f50:	3000      	adds	r0, #0
    1f52:	bf18      	it	ne
    1f54:	2001      	movne	r0, #1
    1f56:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    1f58:	f016 0f80 	tst.w	r6, #128	; 0x80
    1f5c:	f040 80f4 	bne.w	2148 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1f60:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f62:	69e3      	ldr	r3, [r4, #28]
    1f64:	f013 0f04 	tst.w	r3, #4
    1f68:	d1fb      	bne.n	1f62 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1f6a:	8b63      	ldrh	r3, [r4, #26]
    1f6c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1f6e:	f016 0f01 	tst.w	r6, #1
    1f72:	f000 8090 	beq.w	2096 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1f76:	f013 0f02 	tst.w	r3, #2
    1f7a:	d022      	beq.n	1fc2 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1f7c:	2201      	movs	r2, #1
    1f7e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1f80:	886a      	ldrh	r2, [r5, #2]
    1f82:	b292      	uxth	r2, r2
    1f84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1f88:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1f8a:	886a      	ldrh	r2, [r5, #2]
    1f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1f90:	0412      	lsls	r2, r2, #16
    1f92:	0c12      	lsrs	r2, r2, #16
    1f94:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1f96:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	bf14      	ite	ne
    1f9e:	f06f 0104 	mvnne.w	r1, #4
    1fa2:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1fa6:	886b      	ldrh	r3, [r5, #2]
    1fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1fac:	041b      	lsls	r3, r3, #16
    1fae:	0c1b      	lsrs	r3, r3, #16
    1fb0:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    1fb2:	696b      	ldr	r3, [r5, #20]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	f000 80c5 	beq.w	2144 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    1fba:	4628      	mov	r0, r5
    1fbc:	4798      	blx	r3
    1fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1fc2:	f013 0f04 	tst.w	r3, #4
    1fc6:	d124      	bne.n	2012 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    1fc8:	886b      	ldrh	r3, [r5, #2]
    1fca:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1fce:	d03e      	beq.n	204e <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1fd0:	882b      	ldrh	r3, [r5, #0]
    1fd2:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1fd4:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fd8:	69e3      	ldr	r3, [r4, #28]
    1fda:	f013 0f04 	tst.w	r3, #4
    1fde:	d1fb      	bne.n	1fd8 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    1fe6:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    1fea:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1fec:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fee:	69e3      	ldr	r3, [r4, #28]
    1ff0:	f013 0f04 	tst.w	r3, #4
    1ff4:	d1fb      	bne.n	1fee <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    1ff6:	886b      	ldrh	r3, [r5, #2]
    1ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1ffc:	041b      	lsls	r3, r3, #16
    1ffe:	0c1b      	lsrs	r3, r3, #16
    2000:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    2002:	69ab      	ldr	r3, [r5, #24]
    2004:	2b00      	cmp	r3, #0
    2006:	f000 8088 	beq.w	211a <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    200a:	4628      	mov	r0, r5
    200c:	4798      	blx	r3
    200e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    2012:	686b      	ldr	r3, [r5, #4]
    2014:	2b00      	cmp	r3, #0
    2016:	dd04      	ble.n	2022 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    2018:	886b      	ldrh	r3, [r5, #2]
    201a:	b29b      	uxth	r3, r3
    201c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2020:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    2022:	886b      	ldrh	r3, [r5, #2]
    2024:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2028:	d108      	bne.n	203c <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    202a:	886b      	ldrh	r3, [r5, #2]
    202c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2030:	041b      	lsls	r3, r3, #16
    2032:	0c1b      	lsrs	r3, r3, #16
    2034:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    2036:	f06f 0101 	mvn.w	r1, #1
    203a:	e7b4      	b.n	1fa6 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    203c:	6863      	ldr	r3, [r4, #4]
    203e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2042:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2044:	69e3      	ldr	r3, [r4, #28]
    2046:	f013 0f04 	tst.w	r3, #4
    204a:	d1fb      	bne.n	2044 <_sercom_i2c_m_irq_handler+0x11c>
    204c:	e7ed      	b.n	202a <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    204e:	686b      	ldr	r3, [r5, #4]
    2050:	b99b      	cbnz	r3, 207a <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    2052:	886b      	ldrh	r3, [r5, #2]
    2054:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2058:	d106      	bne.n	2068 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    205a:	886b      	ldrh	r3, [r5, #2]
    205c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2060:	041b      	lsls	r3, r3, #16
    2062:	0c1b      	lsrs	r3, r3, #16
    2064:	806b      	strh	r3, [r5, #2]
    2066:	e7cc      	b.n	2002 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2068:	6863      	ldr	r3, [r4, #4]
    206a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    206e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2070:	69e3      	ldr	r3, [r4, #28]
    2072:	f013 0f04 	tst.w	r3, #4
    2076:	d1fb      	bne.n	2070 <_sercom_i2c_m_irq_handler+0x148>
    2078:	e7ef      	b.n	205a <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    207a:	68ab      	ldr	r3, [r5, #8]
    207c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    207e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2080:	69e3      	ldr	r3, [r4, #28]
    2082:	f013 0f04 	tst.w	r3, #4
    2086:	d1fb      	bne.n	2080 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    2088:	68ab      	ldr	r3, [r5, #8]
    208a:	3301      	adds	r3, #1
    208c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    208e:	686b      	ldr	r3, [r5, #4]
    2090:	3b01      	subs	r3, #1
    2092:	606b      	str	r3, [r5, #4]
    2094:	e7b5      	b.n	2002 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    2096:	f016 0f02 	tst.w	r6, #2
    209a:	d041      	beq.n	2120 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    209c:	686a      	ldr	r2, [r5, #4]
    209e:	2a00      	cmp	r2, #0
    20a0:	d036      	beq.n	2110 <_sercom_i2c_m_irq_handler+0x1e8>
    20a2:	f013 0f04 	tst.w	r3, #4
    20a6:	d133      	bne.n	2110 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    20a8:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    20ac:	3a01      	subs	r2, #1
    20ae:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    20b0:	2a00      	cmp	r2, #0
    20b2:	d137      	bne.n	2124 <_sercom_i2c_m_irq_handler+0x1fc>
    20b4:	2900      	cmp	r1, #0
    20b6:	d039      	beq.n	212c <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    20b8:	886b      	ldrh	r3, [r5, #2]
    20ba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    20be:	d116      	bne.n	20ee <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    20c0:	886b      	ldrh	r3, [r5, #2]
    20c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    20c6:	041b      	lsls	r3, r3, #16
    20c8:	0c1b      	lsrs	r3, r3, #16
    20ca:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    20cc:	68aa      	ldr	r2, [r5, #8]
    20ce:	1c53      	adds	r3, r2, #1
    20d0:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20d2:	69e3      	ldr	r3, [r4, #28]
    20d4:	f013 0f04 	tst.w	r3, #4
    20d8:	d1fb      	bne.n	20d2 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    20da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20dc:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    20de:	2302      	movs	r3, #2
    20e0:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    20e2:	69eb      	ldr	r3, [r5, #28]
    20e4:	b1e3      	cbz	r3, 2120 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    20e6:	4628      	mov	r0, r5
    20e8:	4798      	blx	r3
    20ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    20ee:	6863      	ldr	r3, [r4, #4]
    20f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    20f4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20f6:	69e3      	ldr	r3, [r4, #28]
    20f8:	f013 0f17 	tst.w	r3, #23
    20fc:	d1fb      	bne.n	20f6 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    20fe:	6863      	ldr	r3, [r4, #4]
    2100:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2104:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2106:	69e3      	ldr	r3, [r4, #28]
    2108:	f013 0f04 	tst.w	r3, #4
    210c:	d1fb      	bne.n	2106 <_sercom_i2c_m_irq_handler+0x1de>
    210e:	e7d7      	b.n	20c0 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2110:	2302      	movs	r3, #2
    2112:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    2114:	f06f 0101 	mvn.w	r1, #1
    2118:	e745      	b.n	1fa6 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    211a:	f016 0f02 	tst.w	r6, #2
    211e:	d1e0      	bne.n	20e2 <_sercom_i2c_m_irq_handler+0x1ba>
    2120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2124:	2a01      	cmp	r2, #1
    2126:	d1d1      	bne.n	20cc <_sercom_i2c_m_irq_handler+0x1a4>
    2128:	2900      	cmp	r1, #0
    212a:	d0cf      	beq.n	20cc <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    212c:	6863      	ldr	r3, [r4, #4]
    212e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2132:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2134:	69e3      	ldr	r3, [r4, #28]
    2136:	f013 0f17 	tst.w	r3, #23
    213a:	d1fb      	bne.n	2134 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    213c:	686b      	ldr	r3, [r5, #4]
    213e:	2b00      	cmp	r3, #0
    2140:	d0ba      	beq.n	20b8 <_sercom_i2c_m_irq_handler+0x190>
    2142:	e7c3      	b.n	20cc <_sercom_i2c_m_irq_handler+0x1a4>
    2144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2148:	886b      	ldrh	r3, [r5, #2]
    214a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    214e:	041b      	lsls	r3, r3, #16
    2150:	0c1b      	lsrs	r3, r3, #16
    2152:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    2154:	696b      	ldr	r3, [r5, #20]
    2156:	2b00      	cmp	r3, #0
    2158:	d0e2      	beq.n	2120 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    215a:	f06f 0104 	mvn.w	r1, #4
    215e:	4628      	mov	r0, r5
    2160:	4798      	blx	r3
    2162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2166:	bf00      	nop
    2168:	000011a1 	.word	0x000011a1
    216c:	0000396c 	.word	0x0000396c

00002170 <_usart_async_init>:
{
    2170:	b570      	push	{r4, r5, r6, lr}
    2172:	460d      	mov	r5, r1
	ASSERT(device);
    2174:	4606      	mov	r6, r0
    2176:	22ce      	movs	r2, #206	; 0xce
    2178:	4917      	ldr	r1, [pc, #92]	; (21d8 <_usart_async_init+0x68>)
    217a:	3000      	adds	r0, #0
    217c:	bf18      	it	ne
    217e:	2001      	movne	r0, #1
    2180:	4b16      	ldr	r3, [pc, #88]	; (21dc <_usart_async_init+0x6c>)
    2182:	4798      	blx	r3
	init_status = _usart_init(hw);
    2184:	4628      	mov	r0, r5
    2186:	4b16      	ldr	r3, [pc, #88]	; (21e0 <_usart_async_init+0x70>)
    2188:	4798      	blx	r3
	if (init_status) {
    218a:	4604      	mov	r4, r0
    218c:	b108      	cbz	r0, 2192 <_usart_async_init+0x22>
}
    218e:	4620      	mov	r0, r4
    2190:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2192:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2194:	4631      	mov	r1, r6
    2196:	4628      	mov	r0, r5
    2198:	4b12      	ldr	r3, [pc, #72]	; (21e4 <_usart_async_init+0x74>)
    219a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    219c:	4628      	mov	r0, r5
    219e:	4b12      	ldr	r3, [pc, #72]	; (21e8 <_usart_async_init+0x78>)
    21a0:	4798      	blx	r3
    21a2:	1d01      	adds	r1, r0, #4
    21a4:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21a6:	2501      	movs	r5, #1
    21a8:	f000 021f 	and.w	r2, r0, #31
    21ac:	fa05 f202 	lsl.w	r2, r5, r2
    21b0:	0943      	lsrs	r3, r0, #5
    21b2:	009b      	lsls	r3, r3, #2
    21b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    21b8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    21bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    21c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21c4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21cc:	601a      	str	r2, [r3, #0]
		irq++;
    21ce:	3001      	adds	r0, #1
    21d0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    21d2:	4281      	cmp	r1, r0
    21d4:	d1e8      	bne.n	21a8 <_usart_async_init+0x38>
    21d6:	e7da      	b.n	218e <_usart_async_init+0x1e>
    21d8:	0000396c 	.word	0x0000396c
    21dc:	000011a1 	.word	0x000011a1
    21e0:	00001d81 	.word	0x00001d81
    21e4:	00001ced 	.word	0x00001ced
    21e8:	00001d11 	.word	0x00001d11

000021ec <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    21ec:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    21ee:	6813      	ldr	r3, [r2, #0]
    21f0:	f043 0302 	orr.w	r3, r3, #2
    21f4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    21f6:	69d3      	ldr	r3, [r2, #28]
    21f8:	f013 0f03 	tst.w	r3, #3
    21fc:	d1fb      	bne.n	21f6 <_usart_async_enable+0xa>
}
    21fe:	4770      	bx	lr

00002200 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2200:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2202:	6299      	str	r1, [r3, #40]	; 0x28
    2204:	4770      	bx	lr

00002206 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2206:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2208:	2201      	movs	r2, #1
    220a:	759a      	strb	r2, [r3, #22]
    220c:	4770      	bx	lr

0000220e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    220e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2210:	2202      	movs	r2, #2
    2212:	759a      	strb	r2, [r3, #22]
    2214:	4770      	bx	lr
	...

00002218 <_i2c_m_async_init>:
{
    2218:	b570      	push	{r4, r5, r6, lr}
    221a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    221c:	4606      	mov	r6, r0
    221e:	f240 42bc 	movw	r2, #1212	; 0x4bc
    2222:	4918      	ldr	r1, [pc, #96]	; (2284 <_i2c_m_async_init+0x6c>)
    2224:	3000      	adds	r0, #0
    2226:	bf18      	it	ne
    2228:	2001      	movne	r0, #1
    222a:	4b17      	ldr	r3, [pc, #92]	; (2288 <_i2c_m_async_init+0x70>)
    222c:	4798      	blx	r3
	i2c_dev->hw = hw;
    222e:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2230:	4629      	mov	r1, r5
    2232:	4630      	mov	r0, r6
    2234:	4b15      	ldr	r3, [pc, #84]	; (228c <_i2c_m_async_init+0x74>)
    2236:	4798      	blx	r3
	if (init_status) {
    2238:	4604      	mov	r4, r0
    223a:	b108      	cbz	r0, 2240 <_i2c_m_async_init+0x28>
}
    223c:	4620      	mov	r0, r4
    223e:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    2240:	4631      	mov	r1, r6
    2242:	4628      	mov	r0, r5
    2244:	4b12      	ldr	r3, [pc, #72]	; (2290 <_i2c_m_async_init+0x78>)
    2246:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2248:	4628      	mov	r0, r5
    224a:	4b12      	ldr	r3, [pc, #72]	; (2294 <_i2c_m_async_init+0x7c>)
    224c:	4798      	blx	r3
    224e:	1d01      	adds	r1, r0, #4
    2250:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2252:	2501      	movs	r5, #1
    2254:	f000 021f 	and.w	r2, r0, #31
    2258:	fa05 f202 	lsl.w	r2, r5, r2
    225c:	0943      	lsrs	r3, r0, #5
    225e:	009b      	lsls	r3, r3, #2
    2260:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2264:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    226c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2270:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2274:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2278:	601a      	str	r2, [r3, #0]
		irq++;
    227a:	3001      	adds	r0, #1
    227c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    227e:	4281      	cmp	r1, r0
    2280:	d1e8      	bne.n	2254 <_i2c_m_async_init+0x3c>
    2282:	e7db      	b.n	223c <_i2c_m_async_init+0x24>
    2284:	0000396c 	.word	0x0000396c
    2288:	000011a1 	.word	0x000011a1
    228c:	00001e4d 	.word	0x00001e4d
    2290:	00001ced 	.word	0x00001ced
    2294:	00001d11 	.word	0x00001d11

00002298 <_i2c_m_async_transfer>:
{
    2298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    229c:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    229e:	4605      	mov	r5, r0
    22a0:	f110 0800 	adds.w	r8, r0, #0
    22a4:	bf18      	it	ne
    22a6:	f04f 0801 	movne.w	r8, #1
    22aa:	4f45      	ldr	r7, [pc, #276]	; (23c0 <_i2c_m_async_transfer+0x128>)
    22ac:	f240 5212 	movw	r2, #1298	; 0x512
    22b0:	4639      	mov	r1, r7
    22b2:	4640      	mov	r0, r8
    22b4:	4e43      	ldr	r6, [pc, #268]	; (23c4 <_i2c_m_async_transfer+0x12c>)
    22b6:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    22b8:	6928      	ldr	r0, [r5, #16]
    22ba:	f240 5213 	movw	r2, #1299	; 0x513
    22be:	4639      	mov	r1, r7
    22c0:	3000      	adds	r0, #0
    22c2:	bf18      	it	ne
    22c4:	2001      	movne	r0, #1
    22c6:	47b0      	blx	r6
	ASSERT(msg);
    22c8:	f240 5214 	movw	r2, #1300	; 0x514
    22cc:	4639      	mov	r1, r7
    22ce:	1c20      	adds	r0, r4, #0
    22d0:	bf18      	it	ne
    22d2:	2001      	movne	r0, #1
    22d4:	47b0      	blx	r6
	if (msg->len == 0) {
    22d6:	6860      	ldr	r0, [r4, #4]
    22d8:	2800      	cmp	r0, #0
    22da:	d06f      	beq.n	23bc <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    22dc:	886b      	ldrh	r3, [r5, #2]
    22de:	f413 7f80 	tst.w	r3, #256	; 0x100
    22e2:	d169      	bne.n	23b8 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    22e4:	8863      	ldrh	r3, [r4, #2]
    22e6:	b29b      	uxth	r3, r3
    22e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    22ec:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    22ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    22f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    22f6:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    22f8:	6853      	ldr	r3, [r2, #4]
    22fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    22fe:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2300:	69d3      	ldr	r3, [r2, #28]
    2302:	f013 0f17 	tst.w	r3, #23
    2306:	d1fb      	bne.n	2300 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    2308:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    230a:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    230c:	f240 42ea 	movw	r2, #1258	; 0x4ea
    2310:	492b      	ldr	r1, [pc, #172]	; (23c0 <_i2c_m_async_transfer+0x128>)
    2312:	4640      	mov	r0, r8
    2314:	4b2b      	ldr	r3, [pc, #172]	; (23c4 <_i2c_m_async_transfer+0x12c>)
    2316:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2318:	686b      	ldr	r3, [r5, #4]
    231a:	2b01      	cmp	r3, #1
    231c:	d02a      	beq.n	2374 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    231e:	6863      	ldr	r3, [r4, #4]
    2320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2324:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2326:	69e3      	ldr	r3, [r4, #28]
    2328:	f013 0f17 	tst.w	r3, #23
    232c:	d1fb      	bne.n	2326 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    232e:	882b      	ldrh	r3, [r5, #0]
    2330:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2334:	d02a      	beq.n	238c <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    2336:	886a      	ldrh	r2, [r5, #2]
    2338:	f012 0f01 	tst.w	r2, #1
    233c:	d004      	beq.n	2348 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    233e:	886a      	ldrh	r2, [r5, #2]
    2340:	b292      	uxth	r2, r2
    2342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2346:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2348:	f240 72fe 	movw	r2, #2046	; 0x7fe
    234c:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    2350:	69e3      	ldr	r3, [r4, #28]
    2352:	f013 0f04 	tst.w	r3, #4
    2356:	d1fb      	bne.n	2350 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2358:	6a63      	ldr	r3, [r4, #36]	; 0x24
    235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    235e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2362:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2364:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2366:	69e3      	ldr	r3, [r4, #28]
    2368:	f013 0f04 	tst.w	r3, #4
    236c:	d1fb      	bne.n	2366 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    236e:	2000      	movs	r0, #0
    2370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    2374:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2378:	d0d1      	beq.n	231e <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    237a:	6863      	ldr	r3, [r4, #4]
    237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2380:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2382:	69e3      	ldr	r3, [r4, #28]
    2384:	f013 0f17 	tst.w	r3, #23
    2388:	d1fb      	bne.n	2382 <_i2c_m_async_transfer+0xea>
    238a:	e7d0      	b.n	232e <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    238c:	8869      	ldrh	r1, [r5, #2]
    238e:	005a      	lsls	r2, r3, #1
    2390:	b2d2      	uxtb	r2, r2
    2392:	f001 0301 	and.w	r3, r1, #1
    2396:	431a      	orrs	r2, r3
    2398:	69e3      	ldr	r3, [r4, #28]
    239a:	f013 0f04 	tst.w	r3, #4
    239e:	d1fb      	bne.n	2398 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    23a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    23a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    23a6:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    23a8:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23aa:	69e3      	ldr	r3, [r4, #28]
    23ac:	f013 0f04 	tst.w	r3, #4
    23b0:	d1fb      	bne.n	23aa <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    23b2:	2000      	movs	r0, #0
    23b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    23b8:	f06f 0003 	mvn.w	r0, #3
}
    23bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23c0:	0000396c 	.word	0x0000396c
    23c4:	000011a1 	.word	0x000011a1

000023c8 <_i2c_m_async_register_callback>:
	switch (type) {
    23c8:	2901      	cmp	r1, #1
    23ca:	d006      	beq.n	23da <_i2c_m_async_register_callback+0x12>
    23cc:	b119      	cbz	r1, 23d6 <_i2c_m_async_register_callback+0xe>
    23ce:	2902      	cmp	r1, #2
    23d0:	d005      	beq.n	23de <_i2c_m_async_register_callback+0x16>
}
    23d2:	2000      	movs	r0, #0
    23d4:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    23d6:	6142      	str	r2, [r0, #20]
		break;
    23d8:	e7fb      	b.n	23d2 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    23da:	6182      	str	r2, [r0, #24]
		break;
    23dc:	e7f9      	b.n	23d2 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    23de:	61c2      	str	r2, [r0, #28]
		break;
    23e0:	e7f7      	b.n	23d2 <_i2c_m_async_register_callback+0xa>
	...

000023e4 <SERCOM2_0_Handler>:
{
    23e4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    23e6:	4b02      	ldr	r3, [pc, #8]	; (23f0 <SERCOM2_0_Handler+0xc>)
    23e8:	6818      	ldr	r0, [r3, #0]
    23ea:	4b02      	ldr	r3, [pc, #8]	; (23f4 <SERCOM2_0_Handler+0x10>)
    23ec:	4798      	blx	r3
    23ee:	bd08      	pop	{r3, pc}
    23f0:	20000558 	.word	0x20000558
    23f4:	00001c7d 	.word	0x00001c7d

000023f8 <SERCOM2_1_Handler>:
{
    23f8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    23fa:	4b02      	ldr	r3, [pc, #8]	; (2404 <SERCOM2_1_Handler+0xc>)
    23fc:	6818      	ldr	r0, [r3, #0]
    23fe:	4b02      	ldr	r3, [pc, #8]	; (2408 <SERCOM2_1_Handler+0x10>)
    2400:	4798      	blx	r3
    2402:	bd08      	pop	{r3, pc}
    2404:	20000558 	.word	0x20000558
    2408:	00001c7d 	.word	0x00001c7d

0000240c <SERCOM2_2_Handler>:
{
    240c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    240e:	4b02      	ldr	r3, [pc, #8]	; (2418 <SERCOM2_2_Handler+0xc>)
    2410:	6818      	ldr	r0, [r3, #0]
    2412:	4b02      	ldr	r3, [pc, #8]	; (241c <SERCOM2_2_Handler+0x10>)
    2414:	4798      	blx	r3
    2416:	bd08      	pop	{r3, pc}
    2418:	20000558 	.word	0x20000558
    241c:	00001c7d 	.word	0x00001c7d

00002420 <SERCOM2_3_Handler>:
{
    2420:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    2422:	4b02      	ldr	r3, [pc, #8]	; (242c <SERCOM2_3_Handler+0xc>)
    2424:	6818      	ldr	r0, [r3, #0]
    2426:	4b02      	ldr	r3, [pc, #8]	; (2430 <SERCOM2_3_Handler+0x10>)
    2428:	4798      	blx	r3
    242a:	bd08      	pop	{r3, pc}
    242c:	20000558 	.word	0x20000558
    2430:	00001c7d 	.word	0x00001c7d

00002434 <SERCOM5_0_Handler>:
{
    2434:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2436:	4b02      	ldr	r3, [pc, #8]	; (2440 <SERCOM5_0_Handler+0xc>)
    2438:	6858      	ldr	r0, [r3, #4]
    243a:	4b02      	ldr	r3, [pc, #8]	; (2444 <SERCOM5_0_Handler+0x10>)
    243c:	4798      	blx	r3
    243e:	bd08      	pop	{r3, pc}
    2440:	20000558 	.word	0x20000558
    2444:	00001f29 	.word	0x00001f29

00002448 <SERCOM5_1_Handler>:
{
    2448:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    244a:	4b02      	ldr	r3, [pc, #8]	; (2454 <SERCOM5_1_Handler+0xc>)
    244c:	6858      	ldr	r0, [r3, #4]
    244e:	4b02      	ldr	r3, [pc, #8]	; (2458 <SERCOM5_1_Handler+0x10>)
    2450:	4798      	blx	r3
    2452:	bd08      	pop	{r3, pc}
    2454:	20000558 	.word	0x20000558
    2458:	00001f29 	.word	0x00001f29

0000245c <SERCOM5_2_Handler>:
{
    245c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    245e:	4b02      	ldr	r3, [pc, #8]	; (2468 <SERCOM5_2_Handler+0xc>)
    2460:	6858      	ldr	r0, [r3, #4]
    2462:	4b02      	ldr	r3, [pc, #8]	; (246c <SERCOM5_2_Handler+0x10>)
    2464:	4798      	blx	r3
    2466:	bd08      	pop	{r3, pc}
    2468:	20000558 	.word	0x20000558
    246c:	00001f29 	.word	0x00001f29

00002470 <SERCOM5_3_Handler>:
{
    2470:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2472:	4b02      	ldr	r3, [pc, #8]	; (247c <SERCOM5_3_Handler+0xc>)
    2474:	6858      	ldr	r0, [r3, #4]
    2476:	4b02      	ldr	r3, [pc, #8]	; (2480 <SERCOM5_3_Handler+0x10>)
    2478:	4798      	blx	r3
    247a:	bd08      	pop	{r3, pc}
    247c:	20000558 	.word	0x20000558
    2480:	00001f29 	.word	0x00001f29

00002484 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    2484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2488:	4605      	mov	r5, r0
    248a:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    248c:	4608      	mov	r0, r1
    248e:	4b44      	ldr	r3, [pc, #272]	; (25a0 <_spi_m_dma_init+0x11c>)
    2490:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2492:	2807      	cmp	r0, #7
    2494:	d00d      	beq.n	24b2 <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2496:	2d00      	cmp	r5, #0
    2498:	d06e      	beq.n	2578 <_spi_m_dma_init+0xf4>
    249a:	f640 42f8 	movw	r2, #3320	; 0xcf8
    249e:	4941      	ldr	r1, [pc, #260]	; (25a4 <_spi_m_dma_init+0x120>)
    24a0:	1c20      	adds	r0, r4, #0
    24a2:	bf18      	it	ne
    24a4:	2001      	movne	r0, #1
    24a6:	4b40      	ldr	r3, [pc, #256]	; (25a8 <_spi_m_dma_init+0x124>)
    24a8:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    24aa:	f06f 000c 	mvn.w	r0, #12
    24ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    24b2:	2d00      	cmp	r5, #0
    24b4:	d16a      	bne.n	258c <_spi_m_dma_init+0x108>
    24b6:	f640 42f8 	movw	r2, #3320	; 0xcf8
    24ba:	493a      	ldr	r1, [pc, #232]	; (25a4 <_spi_m_dma_init+0x120>)
    24bc:	2000      	movs	r0, #0
    24be:	4b3a      	ldr	r3, [pc, #232]	; (25a8 <_spi_m_dma_init+0x124>)
    24c0:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    24c2:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    24c4:	f013 0f01 	tst.w	r3, #1
    24c8:	d119      	bne.n	24fe <_spi_m_dma_init+0x7a>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24ca:	69e3      	ldr	r3, [r4, #28]
    24cc:	f013 0f03 	tst.w	r3, #3
    24d0:	d1fb      	bne.n	24ca <_spi_m_dma_init+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    24d2:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    24d4:	f013 0f02 	tst.w	r3, #2
    24d8:	d00b      	beq.n	24f2 <_spi_m_dma_init+0x6e>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    24da:	6823      	ldr	r3, [r4, #0]
    24dc:	f023 0302 	bic.w	r3, r3, #2
    24e0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24e2:	69e3      	ldr	r3, [r4, #28]
    24e4:	f013 0f03 	tst.w	r3, #3
    24e8:	d1fb      	bne.n	24e2 <_spi_m_dma_init+0x5e>
    24ea:	69e3      	ldr	r3, [r4, #28]
    24ec:	f013 0f02 	tst.w	r3, #2
    24f0:	d1fb      	bne.n	24ea <_spi_m_dma_init+0x66>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    24f2:	230d      	movs	r3, #13
    24f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24f6:	69e3      	ldr	r3, [r4, #28]
    24f8:	f013 0f03 	tst.w	r3, #3
    24fc:	d1fb      	bne.n	24f6 <_spi_m_dma_init+0x72>
    24fe:	69e3      	ldr	r3, [r4, #28]
    2500:	f013 0f01 	tst.w	r3, #1
    2504:	d1fb      	bne.n	24fe <_spi_m_dma_init+0x7a>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2506:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    2508:	f640 1256 	movw	r2, #2390	; 0x956
    250c:	4925      	ldr	r1, [pc, #148]	; (25a4 <_spi_m_dma_init+0x120>)
    250e:	1c20      	adds	r0, r4, #0
    2510:	bf18      	it	ne
    2512:	2001      	movne	r0, #1
    2514:	4b24      	ldr	r3, [pc, #144]	; (25a8 <_spi_m_dma_init+0x124>)
    2516:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2518:	4b24      	ldr	r3, [pc, #144]	; (25ac <_spi_m_dma_init+0x128>)
    251a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    251c:	69e3      	ldr	r3, [r4, #28]
    251e:	f013 0f03 	tst.w	r3, #3
    2522:	d1fb      	bne.n	251c <_spi_m_dma_init+0x98>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2528:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    252a:	69e3      	ldr	r3, [r4, #28]
    252c:	f013 0f17 	tst.w	r3, #23
    2530:	d1fb      	bne.n	252a <_spi_m_dma_init+0xa6>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2532:	2306      	movs	r3, #6
    2534:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2536:	2600      	movs	r6, #0
    2538:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    253c:	f105 0818 	add.w	r8, r5, #24
    2540:	4620      	mov	r0, r4
    2542:	4b1b      	ldr	r3, [pc, #108]	; (25b0 <_spi_m_dma_init+0x12c>)
    2544:	4798      	blx	r3
    2546:	4601      	mov	r1, r0
    2548:	4640      	mov	r0, r8
    254a:	4f1a      	ldr	r7, [pc, #104]	; (25b4 <_spi_m_dma_init+0x130>)
    254c:	47b8      	blx	r7
	dev->resource->back                 = dev;
    254e:	69ab      	ldr	r3, [r5, #24]
    2550:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    2552:	69ab      	ldr	r3, [r5, #24]
    2554:	4a18      	ldr	r2, [pc, #96]	; (25b8 <_spi_m_dma_init+0x134>)
    2556:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    2558:	69ab      	ldr	r3, [r5, #24]
    255a:	4c18      	ldr	r4, [pc, #96]	; (25bc <_spi_m_dma_init+0x138>)
    255c:	605c      	str	r4, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    255e:	4631      	mov	r1, r6
    2560:	4640      	mov	r0, r8
    2562:	47b8      	blx	r7
	dev->resource->back                 = dev;
    2564:	69ab      	ldr	r3, [r5, #24]
    2566:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    2568:	69ab      	ldr	r3, [r5, #24]
    256a:	4a15      	ldr	r2, [pc, #84]	; (25c0 <_spi_m_dma_init+0x13c>)
    256c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    256e:	69ab      	ldr	r3, [r5, #24]
    2570:	605c      	str	r4, [r3, #4]

	return ERR_NONE;
    2572:	4630      	mov	r0, r6
    2574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    2578:	f640 42f8 	movw	r2, #3320	; 0xcf8
    257c:	4909      	ldr	r1, [pc, #36]	; (25a4 <_spi_m_dma_init+0x120>)
    257e:	2000      	movs	r0, #0
    2580:	4b09      	ldr	r3, [pc, #36]	; (25a8 <_spi_m_dma_init+0x124>)
    2582:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2584:	f06f 000c 	mvn.w	r0, #12
    2588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    258c:	f640 42f8 	movw	r2, #3320	; 0xcf8
    2590:	4904      	ldr	r1, [pc, #16]	; (25a4 <_spi_m_dma_init+0x120>)
    2592:	1c20      	adds	r0, r4, #0
    2594:	bf18      	it	ne
    2596:	2001      	movne	r0, #1
    2598:	4b03      	ldr	r3, [pc, #12]	; (25a8 <_spi_m_dma_init+0x124>)
    259a:	4798      	blx	r3
    259c:	e791      	b.n	24c2 <_spi_m_dma_init+0x3e>
    259e:	bf00      	nop
    25a0:	00001c39 	.word	0x00001c39
    25a4:	0000396c 	.word	0x0000396c
    25a8:	000011a1 	.word	0x000011a1
    25ac:	0020000c 	.word	0x0020000c
    25b0:	00001d49 	.word	0x00001d49
    25b4:	00001959 	.word	0x00001959
    25b8:	00001d5d 	.word	0x00001d5d
    25bc:	00001d75 	.word	0x00001d75
    25c0:	00001d69 	.word	0x00001d69

000025c4 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    25c4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    25c6:	4604      	mov	r4, r0
    25c8:	b160      	cbz	r0, 25e4 <_spi_m_dma_enable+0x20>
    25ca:	6800      	ldr	r0, [r0, #0]
    25cc:	3000      	adds	r0, #0
    25ce:	bf18      	it	ne
    25d0:	2001      	movne	r0, #1
    25d2:	f640 5221 	movw	r2, #3361	; 0xd21
    25d6:	4904      	ldr	r1, [pc, #16]	; (25e8 <_spi_m_dma_enable+0x24>)
    25d8:	4b04      	ldr	r3, [pc, #16]	; (25ec <_spi_m_dma_enable+0x28>)
    25da:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    25dc:	6820      	ldr	r0, [r4, #0]
    25de:	4b04      	ldr	r3, [pc, #16]	; (25f0 <_spi_m_dma_enable+0x2c>)
    25e0:	4798      	blx	r3
}
    25e2:	bd10      	pop	{r4, pc}
    25e4:	2000      	movs	r0, #0
    25e6:	e7f4      	b.n	25d2 <_spi_m_dma_enable+0xe>
    25e8:	0000396c 	.word	0x0000396c
    25ec:	000011a1 	.word	0x000011a1
    25f0:	00001d25 	.word	0x00001d25

000025f4 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    25f4:	b538      	push	{r3, r4, r5, lr}
    25f6:	4614      	mov	r4, r2
	switch (type) {
    25f8:	2901      	cmp	r1, #1
    25fa:	d00c      	beq.n	2616 <_spi_m_dma_register_callback+0x22>
    25fc:	b111      	cbz	r1, 2604 <_spi_m_dma_register_callback+0x10>
    25fe:	2902      	cmp	r1, #2
    2600:	d014      	beq.n	262c <_spi_m_dma_register_callback+0x38>
    2602:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    2604:	6042      	str	r2, [r0, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    2606:	3200      	adds	r2, #0
    2608:	bf18      	it	ne
    260a:	2201      	movne	r2, #1
    260c:	2100      	movs	r1, #0
    260e:	4608      	mov	r0, r1
    2610:	4b0e      	ldr	r3, [pc, #56]	; (264c <_spi_m_dma_register_callback+0x58>)
    2612:	4798      	blx	r3
		break;
    2614:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    2616:	6082      	str	r2, [r0, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    2618:	6800      	ldr	r0, [r0, #0]
    261a:	4b0d      	ldr	r3, [pc, #52]	; (2650 <_spi_m_dma_register_callback+0x5c>)
    261c:	4798      	blx	r3
    261e:	1c22      	adds	r2, r4, #0
    2620:	bf18      	it	ne
    2622:	2201      	movne	r2, #1
    2624:	2100      	movs	r1, #0
    2626:	4b09      	ldr	r3, [pc, #36]	; (264c <_spi_m_dma_register_callback+0x58>)
    2628:	4798      	blx	r3
		break;
    262a:	bd38      	pop	{r3, r4, r5, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    262c:	60c2      	str	r2, [r0, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    262e:	6800      	ldr	r0, [r0, #0]
    2630:	4b07      	ldr	r3, [pc, #28]	; (2650 <_spi_m_dma_register_callback+0x5c>)
    2632:	4798      	blx	r3
    2634:	3400      	adds	r4, #0
    2636:	bf18      	it	ne
    2638:	2401      	movne	r4, #1
    263a:	4622      	mov	r2, r4
    263c:	2101      	movs	r1, #1
    263e:	4d03      	ldr	r5, [pc, #12]	; (264c <_spi_m_dma_register_callback+0x58>)
    2640:	47a8      	blx	r5
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    2642:	4622      	mov	r2, r4
    2644:	2101      	movs	r1, #1
    2646:	2000      	movs	r0, #0
    2648:	47a8      	blx	r5
    264a:	bd38      	pop	{r3, r4, r5, pc}
    264c:	00001831 	.word	0x00001831
    2650:	00001d49 	.word	0x00001d49

00002654 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    2654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2658:	4604      	mov	r4, r0
    265a:	4689      	mov	r9, r1
    265c:	4617      	mov	r7, r2
    265e:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    2660:	f8d0 a000 	ldr.w	sl, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2664:	4650      	mov	r0, sl
    2666:	4b3f      	ldr	r3, [pc, #252]	; (2764 <_spi_m_dma_transfer+0x110>)
    2668:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    266a:	2807      	cmp	r0, #7
			return &sercomspi_regs[i];
    266c:	4e3e      	ldr	r6, [pc, #248]	; (2768 <_spi_m_dma_transfer+0x114>)
    266e:	bf18      	it	ne
    2670:	2600      	movne	r6, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    2672:	4650      	mov	r0, sl
    2674:	4b3d      	ldr	r3, [pc, #244]	; (276c <_spi_m_dma_transfer+0x118>)
    2676:	4798      	blx	r3
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
    2678:	2f00      	cmp	r7, #0
    267a:	d046      	beq.n	270a <_spi_m_dma_transfer+0xb6>
    267c:	4605      	mov	r5, r0
	ASSERT(dev && dev->prvt);
    267e:	2c00      	cmp	r4, #0
    2680:	d041      	beq.n	2706 <_spi_m_dma_transfer+0xb2>
    2682:	f11a 0000 	adds.w	r0, sl, #0
    2686:	bf18      	it	ne
    2688:	2001      	movne	r0, #1
    268a:	f640 426b 	movw	r2, #3179	; 0xc6b
    268e:	4938      	ldr	r1, [pc, #224]	; (2770 <_spi_m_dma_transfer+0x11c>)
    2690:	4b38      	ldr	r3, [pc, #224]	; (2774 <_spi_m_dma_transfer+0x120>)
    2692:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    2694:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2696:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    2698:	f013 0f04 	tst.w	r3, #4
    269c:	d107      	bne.n	26ae <_spi_m_dma_transfer+0x5a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    269e:	6853      	ldr	r3, [r2, #4]
    26a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    26a4:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26a6:	69d3      	ldr	r3, [r2, #28]
    26a8:	f013 0f17 	tst.w	r3, #23
    26ac:	d1fb      	bne.n	26a6 <_spi_m_dma_transfer+0x52>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    26ae:	6821      	ldr	r1, [r4, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    26b0:	3128      	adds	r1, #40	; 0x28
    26b2:	4628      	mov	r0, r5
    26b4:	4b30      	ldr	r3, [pc, #192]	; (2778 <_spi_m_dma_transfer+0x124>)
    26b6:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    26b8:	4639      	mov	r1, r7
    26ba:	4628      	mov	r0, r5
    26bc:	4b2f      	ldr	r3, [pc, #188]	; (277c <_spi_m_dma_transfer+0x128>)
    26be:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    26c0:	4641      	mov	r1, r8
    26c2:	4628      	mov	r0, r5
    26c4:	4b2e      	ldr	r3, [pc, #184]	; (2780 <_spi_m_dma_transfer+0x12c>)
    26c6:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    26c8:	2100      	movs	r1, #0
    26ca:	4628      	mov	r0, r5
    26cc:	4b2d      	ldr	r3, [pc, #180]	; (2784 <_spi_m_dma_transfer+0x130>)
    26ce:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    26d0:	f1b9 0f00 	cmp.w	r9, #0
    26d4:	d033      	beq.n	273e <_spi_m_dma_transfer+0xea>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    26d6:	4649      	mov	r1, r9
    26d8:	2000      	movs	r0, #0
    26da:	4b27      	ldr	r3, [pc, #156]	; (2778 <_spi_m_dma_transfer+0x124>)
    26dc:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    26de:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    26e0:	3128      	adds	r1, #40	; 0x28
    26e2:	2000      	movs	r0, #0
    26e4:	4b25      	ldr	r3, [pc, #148]	; (277c <_spi_m_dma_transfer+0x128>)
    26e6:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    26e8:	2101      	movs	r1, #1
    26ea:	2000      	movs	r0, #0
    26ec:	4b26      	ldr	r3, [pc, #152]	; (2788 <_spi_m_dma_transfer+0x134>)
    26ee:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    26f0:	4641      	mov	r1, r8
    26f2:	2000      	movs	r0, #0
    26f4:	4b22      	ldr	r3, [pc, #136]	; (2780 <_spi_m_dma_transfer+0x12c>)
    26f6:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    26f8:	2100      	movs	r1, #0
    26fa:	4608      	mov	r0, r1
    26fc:	4b21      	ldr	r3, [pc, #132]	; (2784 <_spi_m_dma_transfer+0x130>)
    26fe:	4798      	blx	r3

	return ERR_NONE;
}
    2700:	2000      	movs	r0, #0
    2702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(dev && dev->prvt);
    2706:	2000      	movs	r0, #0
    2708:	e7bf      	b.n	268a <_spi_m_dma_transfer+0x36>
	ASSERT(dev && dev->prvt);
    270a:	b1b4      	cbz	r4, 273a <_spi_m_dma_transfer+0xe6>
    270c:	f11a 0000 	adds.w	r0, sl, #0
    2710:	bf18      	it	ne
    2712:	2001      	movne	r0, #1
    2714:	f640 4272 	movw	r2, #3186	; 0xc72
    2718:	4915      	ldr	r1, [pc, #84]	; (2770 <_spi_m_dma_transfer+0x11c>)
    271a:	4b16      	ldr	r3, [pc, #88]	; (2774 <_spi_m_dma_transfer+0x120>)
    271c:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    271e:	6822      	ldr	r2, [r4, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2720:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    2722:	f013 0f04 	tst.w	r3, #4
    2726:	d1d3      	bne.n	26d0 <_spi_m_dma_transfer+0x7c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    2728:	6853      	ldr	r3, [r2, #4]
    272a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    272e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2730:	69d3      	ldr	r3, [r2, #28]
    2732:	f013 0f17 	tst.w	r3, #23
    2736:	d1fb      	bne.n	2730 <_spi_m_dma_transfer+0xdc>
    2738:	e7ca      	b.n	26d0 <_spi_m_dma_transfer+0x7c>
	ASSERT(dev && dev->prvt);
    273a:	2000      	movs	r0, #0
    273c:	e7ea      	b.n	2714 <_spi_m_dma_transfer+0xc0>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    273e:	f106 010e 	add.w	r1, r6, #14
    2742:	2000      	movs	r0, #0
    2744:	4b0c      	ldr	r3, [pc, #48]	; (2778 <_spi_m_dma_transfer+0x124>)
    2746:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    2748:	6821      	ldr	r1, [r4, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    274a:	3128      	adds	r1, #40	; 0x28
    274c:	2000      	movs	r0, #0
    274e:	4b0b      	ldr	r3, [pc, #44]	; (277c <_spi_m_dma_transfer+0x128>)
    2750:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    2752:	2100      	movs	r1, #0
    2754:	4608      	mov	r0, r1
    2756:	4b0c      	ldr	r3, [pc, #48]	; (2788 <_spi_m_dma_transfer+0x134>)
    2758:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    275a:	4641      	mov	r1, r8
    275c:	2000      	movs	r0, #0
    275e:	4b08      	ldr	r3, [pc, #32]	; (2780 <_spi_m_dma_transfer+0x12c>)
    2760:	4798      	blx	r3
    2762:	e7c9      	b.n	26f8 <_spi_m_dma_transfer+0xa4>
    2764:	00001c39 	.word	0x00001c39
    2768:	00003958 	.word	0x00003958
    276c:	00001d49 	.word	0x00001d49
    2770:	0000396c 	.word	0x0000396c
    2774:	000011a1 	.word	0x000011a1
    2778:	00001895 	.word	0x00001895
    277c:	00001885 	.word	0x00001885
    2780:	000018c1 	.word	0x000018c1
    2784:	00001919 	.word	0x00001919
    2788:	000018a5 	.word	0x000018a5

0000278c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    278c:	4b03      	ldr	r3, [pc, #12]	; (279c <_delay_init+0x10>)
    278e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2792:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2794:	2205      	movs	r2, #5
    2796:	601a      	str	r2, [r3, #0]
    2798:	4770      	bx	lr
    279a:	bf00      	nop
    279c:	e000e010 	.word	0xe000e010

000027a0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    27a0:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    27a2:	b303      	cbz	r3, 27e6 <_delay_cycles+0x46>
{
    27a4:	b430      	push	{r4, r5}
    27a6:	1e5d      	subs	r5, r3, #1
    27a8:	b2ed      	uxtb	r5, r5
	while (n--) {
    27aa:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    27ac:	4a12      	ldr	r2, [pc, #72]	; (27f8 <_delay_cycles+0x58>)
    27ae:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    27b2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    27b4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    27b6:	6813      	ldr	r3, [r2, #0]
    27b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    27bc:	d0fb      	beq.n	27b6 <_delay_cycles+0x16>
	while (n--) {
    27be:	3801      	subs	r0, #1
    27c0:	b2c0      	uxtb	r0, r0
    27c2:	28ff      	cmp	r0, #255	; 0xff
    27c4:	d1f5      	bne.n	27b2 <_delay_cycles+0x12>
    27c6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    27ca:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    27ce:	3101      	adds	r1, #1
    27d0:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    27d2:	4b09      	ldr	r3, [pc, #36]	; (27f8 <_delay_cycles+0x58>)
    27d4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    27d6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    27d8:	461a      	mov	r2, r3
    27da:	6813      	ldr	r3, [r2, #0]
    27dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    27e0:	d0fb      	beq.n	27da <_delay_cycles+0x3a>
		;
}
    27e2:	bc30      	pop	{r4, r5}
    27e4:	4770      	bx	lr
	SysTick->LOAD = buf;
    27e6:	4b04      	ldr	r3, [pc, #16]	; (27f8 <_delay_cycles+0x58>)
    27e8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    27ea:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    27ec:	461a      	mov	r2, r3
    27ee:	6813      	ldr	r3, [r2, #0]
    27f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    27f4:	d0fb      	beq.n	27ee <_delay_cycles+0x4e>
    27f6:	4770      	bx	lr
    27f8:	e000e010 	.word	0xe000e010

000027fc <convert_cb_ADC_1>:


static void convert_cb_ADC_1(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	
	conversion_ready = 1;
    27fc:	2201      	movs	r2, #1
    27fe:	4b01      	ldr	r3, [pc, #4]	; (2804 <convert_cb_ADC_1+0x8>)
    2800:	601a      	str	r2, [r3, #0]
    2802:	4770      	bx	lr
    2804:	20000560 	.word	0x20000560

00002808 <tx_complete_cb_GRID_LED>:


// DMA SPI CALLBACK
static void tx_complete_cb_GRID_LED(struct _dma_resource *resource)
{
	dma_spi_done = 1;
    2808:	2201      	movs	r2, #1
    280a:	4b01      	ldr	r3, [pc, #4]	; (2810 <tx_complete_cb_GRID_LED+0x8>)
    280c:	605a      	str	r2, [r3, #4]
    280e:	4770      	bx	lr
    2810:	20000560 	.word	0x20000560

00002814 <grid_led_set_color>:
	
	return led_frame_buffer_size;
}

/** Set color of a particular LED in the frame buffer */
uint8_t grid_led_set_color(uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    2814:	b430      	push	{r4, r5}
	
	//if index is valid
	if (led_index<led_number){
    2816:	4d0d      	ldr	r5, [pc, #52]	; (284c <grid_led_set_color+0x38>)
    2818:	692d      	ldr	r5, [r5, #16]
    281a:	4285      	cmp	r5, r0
    281c:	d802      	bhi.n	2824 <grid_led_set_color+0x10>
		return 0;
		
	}
	else{
		
		return -1;		
    281e:	20ff      	movs	r0, #255	; 0xff
		
	}
}
    2820:	bc30      	pop	{r4, r5}
    2822:	4770      	bx	lr
		led_frame_buffer_usable[led_index*3 + 0] = led_color_code[led_g];
    2824:	4c09      	ldr	r4, [pc, #36]	; (284c <grid_led_set_color+0x38>)
    2826:	6965      	ldr	r5, [r4, #20]
    2828:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    282c:	0080      	lsls	r0, r0, #2
    282e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    2832:	6992      	ldr	r2, [r2, #24]
    2834:	502a      	str	r2, [r5, r0]
		led_frame_buffer_usable[led_index*3 + 1] = led_color_code[led_r];
    2836:	4428      	add	r0, r5
    2838:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    283c:	698a      	ldr	r2, [r1, #24]
    283e:	6042      	str	r2, [r0, #4]
		led_frame_buffer_usable[led_index*3 + 2] = led_color_code[led_b];
    2840:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    2844:	69a3      	ldr	r3, [r4, #24]
    2846:	6083      	str	r3, [r0, #8]
		return 0;
    2848:	2000      	movs	r0, #0
    284a:	e7e9      	b.n	2820 <grid_led_set_color+0xc>
    284c:	20000560 	.word	0x20000560

00002850 <grid_led_init>:

/** Initialize led buffer for a given number of LEDs */
uint8_t grid_led_init(uint8_t num){
    2850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2852:	4606      	mov	r6, r0
	
	led_number = num;	
    2854:	4c3a      	ldr	r4, [pc, #232]	; (2940 <grid_led_init+0xf0>)
    2856:	6120      	str	r0, [r4, #16]
	
	// Allocating memory for the frame buffer
	led_frame_buffer_size = (24 + num*3*4);
    2858:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    285c:	0080      	lsls	r0, r0, #2
    285e:	3018      	adds	r0, #24
    2860:	60e0      	str	r0, [r4, #12]
	led_frame_buffer = (uint8_t*) malloc(led_frame_buffer_size * sizeof(uint8_t));
    2862:	4f38      	ldr	r7, [pc, #224]	; (2944 <grid_led_init+0xf4>)
    2864:	47b8      	blx	r7
    2866:	4605      	mov	r5, r0
    2868:	60a0      	str	r0, [r4, #8]
	led_frame_buffer_usable = (uint32_t*) &led_frame_buffer[24];
    286a:	f100 0318 	add.w	r3, r0, #24
    286e:	f844 3f14 	str.w	r3, [r4, #20]!
	
	// Allocating memory for the smart buffer (2D array)
	#define led_smart_buffer_layer_number 2
	led_smart_buffer = (struct LED_layer*) malloc(led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    2872:	201a      	movs	r0, #26
    2874:	fb00 f006 	mul.w	r0, r0, r6
    2878:	47b8      	blx	r7
    287a:	4b33      	ldr	r3, [pc, #204]	; (2948 <grid_led_init+0xf8>)
    287c:	6018      	str	r0, [r3, #0]
    287e:	2200      	movs	r2, #0
    2880:	b293      	uxth	r3, r2
	
	for(uint16_t i=0; i<256; i++){
		
		uint32_t temp = 0;
		
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2882:	f003 0101 	and.w	r1, r3, #1
    2886:	2900      	cmp	r1, #0
    2888:	bf14      	ite	ne
    288a:	f04f 6160 	movne.w	r1, #234881024	; 0xe000000
    288e:	f04f 6100 	moveq.w	r1, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2892:	f3c3 0040 	ubfx	r0, r3, #1, #1
    2896:	2800      	cmp	r0, #0
    2898:	bf14      	ite	ne
    289a:	f04f 4060 	movne.w	r0, #3758096384	; 0xe0000000
    289e:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
    28a2:	4308      	orrs	r0, r1
		
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    28a4:	f3c3 0180 	ubfx	r1, r3, #2, #1
    28a8:	2900      	cmp	r1, #0
    28aa:	bf14      	ite	ne
    28ac:	f44f 2160 	movne.w	r1, #917504	; 0xe0000
    28b0:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    28b4:	4301      	orrs	r1, r0
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    28b6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    28ba:	2800      	cmp	r0, #0
    28bc:	bf14      	ite	ne
    28be:	f44f 0060 	movne.w	r0, #14680064	; 0xe00000
    28c2:	f44f 0000 	moveq.w	r0, #8388608	; 0x800000
    28c6:	4301      	orrs	r1, r0
		
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    28c8:	f3c3 1000 	ubfx	r0, r3, #4, #1
    28cc:	2800      	cmp	r0, #0
    28ce:	bf14      	ite	ne
    28d0:	f44f 6060 	movne.w	r0, #3584	; 0xe00
    28d4:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    28d8:	4308      	orrs	r0, r1
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    28da:	f3c3 1140 	ubfx	r1, r3, #5, #1
    28de:	2900      	cmp	r1, #0
    28e0:	bf14      	ite	ne
    28e2:	f44f 4160 	movne.w	r1, #57344	; 0xe000
    28e6:	f44f 4100 	moveq.w	r1, #32768	; 0x8000
    28ea:	4308      	orrs	r0, r1
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    28ec:	f3c3 1180 	ubfx	r1, r3, #6, #1
    28f0:	2900      	cmp	r1, #0
    28f2:	bf14      	ite	ne
    28f4:	210e      	movne	r1, #14
    28f6:	2108      	moveq	r1, #8
    28f8:	4301      	orrs	r1, r0
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    28fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    28fe:	2b00      	cmp	r3, #0
    2900:	bf14      	ite	ne
    2902:	23e0      	movne	r3, #224	; 0xe0
    2904:	2380      	moveq	r3, #128	; 0x80
    2906:	430b      	orrs	r3, r1
		
		led_color_code[i] = temp;
    2908:	f844 3f04 	str.w	r3, [r4, #4]!
    290c:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    290e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2912:	d1b5      	bne.n	2880 <grid_led_init+0x30>
    2914:	1e6b      	subs	r3, r5, #1
    2916:	3517      	adds	r5, #23

	// Fill the first 24 bytes with the rr_code (reset)
	// This memory is essentially wasted but allows the entire frame to be sent out using DMA

	for (uint8_t i = 0; i<24; i++){
		led_frame_buffer[i] = LED_CODE_R;
    2918:	2200      	movs	r2, #0
    291a:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i<24; i++){
    291e:	429d      	cmp	r5, r3
    2920:	d1fb      	bne.n	291a <grid_led_init+0xca>
	}
	
	
	// Fill the rest of the buffer with rgb=(0,0,0);
	for (uint32_t i = 0; i<led_number; i++){
    2922:	b156      	cbz	r6, 293a <grid_led_init+0xea>
    2924:	2400      	movs	r4, #0
		grid_led_set_color(i, 0,0,0);
    2926:	4627      	mov	r7, r4
    2928:	4d08      	ldr	r5, [pc, #32]	; (294c <grid_led_init+0xfc>)
    292a:	463b      	mov	r3, r7
    292c:	463a      	mov	r2, r7
    292e:	4639      	mov	r1, r7
    2930:	4620      	mov	r0, r4
    2932:	47a8      	blx	r5
	for (uint32_t i = 0; i<led_number; i++){
    2934:	3401      	adds	r4, #1
    2936:	42a6      	cmp	r6, r4
    2938:	d1f7      	bne.n	292a <grid_led_init+0xda>
	}


	return 0;
}
    293a:	2000      	movs	r0, #0
    293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    293e:	bf00      	nop
    2940:	20000560 	.word	0x20000560
    2944:	00002e09 	.word	0x00002e09
    2948:	20000f00 	.word	0x20000f00
    294c:	00002815 	.word	0x00002815

00002950 <grid_led_tick>:

void grid_led_tick(void){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint32_t j=0; j<led_number; j++){
    2950:	4b09      	ldr	r3, [pc, #36]	; (2978 <grid_led_tick+0x28>)
    2952:	6918      	ldr	r0, [r3, #16]
    2954:	b170      	cbz	r0, 2974 <grid_led_tick+0x24>
    2956:	4b09      	ldr	r3, [pc, #36]	; (297c <grid_led_tick+0x2c>)
    2958:	221a      	movs	r2, #26
    295a:	fb02 3000 	mla	r0, r2, r0, r3
					
		for(uint8_t i=0; i<2; i++){
			l_buffer[j][i].pha += l_buffer[j][i].fre; //PHASE + = FREQUENCY		
    295e:	7ada      	ldrb	r2, [r3, #11]
    2960:	7b19      	ldrb	r1, [r3, #12]
    2962:	440a      	add	r2, r1
    2964:	72da      	strb	r2, [r3, #11]
    2966:	7e1a      	ldrb	r2, [r3, #24]
    2968:	7e59      	ldrb	r1, [r3, #25]
    296a:	440a      	add	r2, r1
    296c:	761a      	strb	r2, [r3, #24]
    296e:	331a      	adds	r3, #26
	for (uint32_t j=0; j<led_number; j++){
    2970:	4298      	cmp	r0, r3
    2972:	d1f4      	bne.n	295e <grid_led_tick+0xe>
    2974:	4770      	bx	lr
    2976:	bf00      	nop
    2978:	20000560 	.word	0x20000560
    297c:	20000f04 	.word	0x20000f04

00002980 <grid_led_render>:
}




void grid_led_render(uint32_t num){
    2980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2984:	4b23      	ldr	r3, [pc, #140]	; (2a14 <grid_led_render+0x94>)
    2986:	241a      	movs	r4, #26
    2988:	fb04 3400 	mla	r4, r4, r0, r3
    298c:	2700      	movs	r7, #0
	
	
	uint32_t mix_r = 0;
	uint32_t mix_g = 0;
	uint32_t mix_b = 0;
    298e:	463b      	mov	r3, r7
	uint32_t mix_g = 0;
    2990:	463a      	mov	r2, r7
	uint32_t mix_r = 0;
    2992:	4639      	mov	r1, r7
	for (uint8_t i = 0; i<2; i++){
				
		uint8_t min_r = l_buffer[num][i].color_min.r;
		uint8_t min_g = l_buffer[num][i].color_min.g;
		uint8_t min_b = l_buffer[num][i].color_min.b;
		uint8_t min_a = min_lookup[l_buffer[num][i].pha];
    2994:	f8df e088 	ldr.w	lr, [pc, #136]	; 2a20 <grid_led_render+0xa0>
    2998:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = l_buffer[num][i].color_max.r;
		uint8_t max_g = l_buffer[num][i].color_max.g;
		uint8_t max_b = l_buffer[num][i].color_max.b;
		uint8_t max_a = max_lookup[l_buffer[num][i].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    299a:	f81e 8006 	ldrb.w	r8, [lr, r6]
		uint8_t mid_a = mid_lookup[l_buffer[num][i].pha];
    299e:	4476      	add	r6, lr
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    29a0:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    29a4:	f896 c200 	ldrb.w	ip, [r6, #512]	; 0x200
    29a8:	7826      	ldrb	r6, [r4, #0]
    29aa:	f894 9003 	ldrb.w	r9, [r4, #3]
    29ae:	fb05 f909 	mul.w	r9, r5, r9
    29b2:	fb08 9906 	mla	r9, r8, r6, r9
    29b6:	79a6      	ldrb	r6, [r4, #6]
    29b8:	fb0c 9606 	mla	r6, ip, r6, r9
    29bc:	4431      	add	r1, r6
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    29be:	7866      	ldrb	r6, [r4, #1]
    29c0:	f894 9004 	ldrb.w	r9, [r4, #4]
    29c4:	fb05 f909 	mul.w	r9, r5, r9
    29c8:	fb08 9906 	mla	r9, r8, r6, r9
    29cc:	79e6      	ldrb	r6, [r4, #7]
    29ce:	fb0c 9606 	mla	r6, ip, r6, r9
    29d2:	4432      	add	r2, r6
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    29d4:	78a6      	ldrb	r6, [r4, #2]
    29d6:	f894 9005 	ldrb.w	r9, [r4, #5]
    29da:	fb05 f509 	mul.w	r5, r5, r9
    29de:	fb08 5606 	mla	r6, r8, r6, r5
    29e2:	7a25      	ldrb	r5, [r4, #8]
    29e4:	fb0c 6505 	mla	r5, ip, r5, r6
    29e8:	442b      	add	r3, r5
    29ea:	3701      	adds	r7, #1
    29ec:	340d      	adds	r4, #13
	for (uint8_t i = 0; i<2; i++){
    29ee:	2f02      	cmp	r7, #2
    29f0:	d1d2      	bne.n	2998 <grid_led_render+0x18>
	}
	

	mix_r = (mix_r)/2/3/256;
	mix_g = (mix_g)/2/3/256;
	mix_b = (mix_b)/2/3/256;
    29f2:	4c09      	ldr	r4, [pc, #36]	; (2a18 <grid_led_render+0x98>)
    29f4:	fba4 5303 	umull	r5, r3, r4, r3
	mix_g = (mix_g)/2/3/256;
    29f8:	fba4 5202 	umull	r5, r2, r4, r2
	mix_r = (mix_r)/2/3/256;
    29fc:	fba4 4101 	umull	r4, r1, r4, r1
				
	grid_led_set_color(num, mix_r, mix_g, mix_b);
    2a00:	f3c3 2387 	ubfx	r3, r3, #10, #8
    2a04:	f3c2 2287 	ubfx	r2, r2, #10, #8
    2a08:	f3c1 2187 	ubfx	r1, r1, #10, #8
    2a0c:	4c03      	ldr	r4, [pc, #12]	; (2a1c <grid_led_render+0x9c>)
    2a0e:	47a0      	blx	r4
    2a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a14:	20000f04 	.word	0x20000f04
    2a18:	aaaaaaab 	.word	0xaaaaaaab
    2a1c:	00002815 	.word	0x00002815
    2a20:	20000000 	.word	0x20000000

00002a24 <grid_led_render_all>:
	
}


void grid_led_render_all(void){
    2a24:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<led_number; i++){
    2a26:	4b05      	ldr	r3, [pc, #20]	; (2a3c <grid_led_render_all+0x18>)
    2a28:	691d      	ldr	r5, [r3, #16]
    2a2a:	b135      	cbz	r5, 2a3a <grid_led_render_all+0x16>
    2a2c:	2400      	movs	r4, #0
		
		grid_led_render(i);
    2a2e:	4e04      	ldr	r6, [pc, #16]	; (2a40 <grid_led_render_all+0x1c>)
    2a30:	4620      	mov	r0, r4
    2a32:	47b0      	blx	r6
	for (uint32_t i=0; i<led_number; i++){
    2a34:	3401      	adds	r4, #1
    2a36:	42ac      	cmp	r4, r5
    2a38:	d1fa      	bne.n	2a30 <grid_led_render_all+0xc>
    2a3a:	bd70      	pop	{r4, r5, r6, pc}
    2a3c:	20000560 	.word	0x20000560
    2a40:	00002981 	.word	0x00002981

00002a44 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    2a44:	b538      	push	{r3, r4, r5, lr}
    2a46:	4604      	mov	r4, r0
    2a48:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    2a4a:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    2a4c:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    2a4e:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    2a50:	2300      	movs	r3, #0
    2a52:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    2a54:	0048      	lsls	r0, r1, #1
    2a56:	4b09      	ldr	r3, [pc, #36]	; (2a7c <grid_ain_channel_init+0x38>)
    2a58:	4798      	blx	r3
    2a5a:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    2a5c:	b14d      	cbz	r5, 2a72 <grid_ain_channel_init+0x2e>
    2a5e:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    2a60:	4619      	mov	r1, r3
    2a62:	6822      	ldr	r2, [r4, #0]
    2a64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    2a68:	3301      	adds	r3, #1
    2a6a:	b2db      	uxtb	r3, r3
    2a6c:	7922      	ldrb	r2, [r4, #4]
    2a6e:	429a      	cmp	r2, r3
    2a70:	d8f7      	bhi.n	2a62 <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    2a72:	2000      	movs	r0, #0
    2a74:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    2a76:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    2a78:	bd38      	pop	{r3, r4, r5, pc}
    2a7a:	bf00      	nop
    2a7c:	00002e09 	.word	0x00002e09

00002a80 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    2a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2a84:	4605      	mov	r5, r0
    2a86:	460e      	mov	r6, r1
    2a88:	4691      	mov	r9, r2
    2a8a:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    2a8c:	4c0e      	ldr	r4, [pc, #56]	; (2ac8 <grid_ain_init+0x48>)
    2a8e:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
	ain_channel_buffer_depth = depth;
    2a92:	f884 1419 	strb.w	r1, [r4, #1049]	; 0x419
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    2a96:	0100      	lsls	r0, r0, #4
    2a98:	4b0c      	ldr	r3, [pc, #48]	; (2acc <grid_ain_init+0x4c>)
    2a9a:	4798      	blx	r3
    2a9c:	f8c4 041c 	str.w	r0, [r4, #1052]	; 0x41c

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    2aa0:	b175      	cbz	r5, 2ac0 <grid_ain_init+0x40>
    2aa2:	4604      	mov	r4, r0
    2aa4:	3d01      	subs	r5, #1
    2aa6:	b2ed      	uxtb	r5, r5
    2aa8:	3501      	adds	r5, #1
    2aaa:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    2aae:	4f08      	ldr	r7, [pc, #32]	; (2ad0 <grid_ain_init+0x50>)
    2ab0:	4643      	mov	r3, r8
    2ab2:	464a      	mov	r2, r9
    2ab4:	4631      	mov	r1, r6
    2ab6:	4620      	mov	r0, r4
    2ab8:	47b8      	blx	r7
    2aba:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    2abc:	42ac      	cmp	r4, r5
    2abe:	d1f7      	bne.n	2ab0 <grid_ain_init+0x30>
	}

	return 0;
}
    2ac0:	2000      	movs	r0, #0
    2ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ac6:	bf00      	nop
    2ac8:	20000560 	.word	0x20000560
    2acc:	00002e09 	.word	0x00002e09
    2ad0:	00002a45 	.word	0x00002a45

00002ad4 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    2ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    2ad8:	0100      	lsls	r0, r0, #4
    2ada:	4b3c      	ldr	r3, [pc, #240]	; (2bcc <grid_ain_add_sample+0xf8>)
    2adc:	f8d3 a41c 	ldr.w	sl, [r3, #1052]	; 0x41c
    2ae0:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    2ae4:	f89c 6004 	ldrb.w	r6, [ip, #4]
    2ae8:	2e00      	cmp	r6, #0
    2aea:	d05b      	beq.n	2ba4 <grid_ain_add_sample+0xd0>
    2aec:	f85a 5000 	ldr.w	r5, [sl, r0]
    2af0:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    2af2:	2200      	movs	r2, #0
    2af4:	4690      	mov	r8, r2
    2af6:	4691      	mov	r9, r2
    2af8:	4696      	mov	lr, r2
    2afa:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2afe:	4614      	mov	r4, r2
    2b00:	fa5f fb82 	uxtb.w	fp, r2
    2b04:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    2b08:	441c      	add	r4, r3
		
		if (current > maximum){
    2b0a:	4573      	cmp	r3, lr
    2b0c:	bf84      	itt	hi
    2b0e:	46d8      	movhi	r8, fp
			maximum = current;
    2b10:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    2b12:	42bb      	cmp	r3, r7
    2b14:	bf3c      	itt	cc
    2b16:	46d9      	movcc	r9, fp
			minimum = current;
    2b18:	461f      	movcc	r7, r3
    2b1a:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    2b1c:	b2d3      	uxtb	r3, r2
    2b1e:	42b3      	cmp	r3, r6
    2b20:	d3ee      	bcc.n	2b00 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    2b22:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    2b26:	b2b6      	uxth	r6, r6
    2b28:	428e      	cmp	r6, r1
    2b2a:	d23f      	bcs.n	2bac <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    2b2c:	f85a 3000 	ldr.w	r3, [sl, r0]
    2b30:	440c      	add	r4, r1
    2b32:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    2b36:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    2b38:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    2b3c:	f89c 3004 	ldrb.w	r3, [ip, #4]
    2b40:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    2b44:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    2b48:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    2b4c:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    2b4e:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    2b52:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    2b54:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    2b56:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    2b58:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    2b5c:	b29b      	uxth	r3, r3
    2b5e:	408b      	lsls	r3, r1
    2b60:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    2b62:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    2b66:	1b92      	subs	r2, r2, r6
    2b68:	2a00      	cmp	r2, #0
    2b6a:	bfb8      	it	lt
    2b6c:	4252      	neglt	r2, r2
    2b6e:	2601      	movs	r6, #1
    2b70:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    2b74:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    2b78:	42be      	cmp	r6, r7
    2b7a:	d020      	beq.n	2bbe <grid_ain_add_sample+0xea>
    2b7c:	4282      	cmp	r2, r0
    2b7e:	dc08      	bgt.n	2b92 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    2b80:	2201      	movs	r2, #1
    2b82:	fa02 f505 	lsl.w	r5, r2, r5
    2b86:	fa02 f101 	lsl.w	r1, r2, r1
    2b8a:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    2b8c:	428f      	cmp	r7, r1
    2b8e:	d000      	beq.n	2b92 <grid_ain_add_sample+0xbe>
    2b90:	b9c7      	cbnz	r7, 2bc4 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    2b92:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    2b96:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    2b9a:	2001      	movs	r0, #1
    2b9c:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    2ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    2ba4:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    2ba6:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    2ba8:	2400      	movs	r4, #0
    2baa:	e7ba      	b.n	2b22 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    2bac:	f85a 3000 	ldr.w	r3, [sl, r0]
    2bb0:	440c      	add	r4, r1
    2bb2:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    2bb6:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    2bb8:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    2bbc:	e7be      	b.n	2b3c <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    2bbe:	2000      	movs	r0, #0
    2bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bc4:	2000      	movs	r0, #0
	}
	
}
    2bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bca:	bf00      	nop
    2bcc:	20000560 	.word	0x20000560

00002bd0 <grid_ain_get_average>:
	return instance->result_changed;
}
	
uint16_t grid_ain_get_average(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    2bd0:	4b04      	ldr	r3, [pc, #16]	; (2be4 <grid_ain_get_average+0x14>)
    2bd2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2bd6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    2bda:	2300      	movs	r3, #0
    2bdc:	8183      	strh	r3, [r0, #12]
	return instance->result_value;
}
    2bde:	8900      	ldrh	r0, [r0, #8]
    2be0:	4770      	bx	lr
    2be2:	bf00      	nop
    2be4:	20000560 	.word	0x20000560

00002be8 <main>:
}


int main(void)
{
    2be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bec:	b08f      	sub	sp, #60	; 0x3c
	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
    2bee:	4b57      	ldr	r3, [pc, #348]	; (2d4c <main+0x164>)
    2bf0:	4798      	blx	r3
	
	
	struct io_descriptor *io2;
	spi_m_dma_get_io_descriptor(&GRID_LED, &io2);
    2bf2:	4c57      	ldr	r4, [pc, #348]	; (2d50 <main+0x168>)
    2bf4:	a90d      	add	r1, sp, #52	; 0x34
    2bf6:	4620      	mov	r0, r4
    2bf8:	4b56      	ldr	r3, [pc, #344]	; (2d54 <main+0x16c>)
    2bfa:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_GRID_LED);
    2bfc:	4a56      	ldr	r2, [pc, #344]	; (2d58 <main+0x170>)
    2bfe:	2100      	movs	r1, #0
    2c00:	4620      	mov	r0, r4
    2c02:	4b56      	ldr	r3, [pc, #344]	; (2d5c <main+0x174>)
    2c04:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2c0a:	4b55      	ldr	r3, [pc, #340]	; (2d60 <main+0x178>)
    2c0c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	

	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);
	adc_buffer[0] = 0;
    2c10:	4b54      	ldr	r3, [pc, #336]	; (2d64 <main+0x17c>)
    2c12:	2400      	movs	r4, #0
    2c14:	701c      	strb	r4, [r3, #0]
	adc_buffer[1] = 0;
    2c16:	705c      	strb	r4, [r3, #1]


	// ADC SETUP	
	
			
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    2c18:	4d53      	ldr	r5, [pc, #332]	; (2d68 <main+0x180>)
    2c1a:	4b54      	ldr	r3, [pc, #336]	; (2d6c <main+0x184>)
    2c1c:	4622      	mov	r2, r4
    2c1e:	4621      	mov	r1, r4
    2c20:	4628      	mov	r0, r5
    2c22:	4e53      	ldr	r6, [pc, #332]	; (2d70 <main+0x188>)
    2c24:	47b0      	blx	r6
	adc_async_enable_channel(&ADC_1, 0);
    2c26:	4621      	mov	r1, r4
    2c28:	4628      	mov	r0, r5
    2c2a:	4b52      	ldr	r3, [pc, #328]	; (2d74 <main+0x18c>)
    2c2c:	4798      	blx	r3

	adc_async_start_conversion(&ADC_1);
    2c2e:	4628      	mov	r0, r5
    2c30:	4b51      	ldr	r3, [pc, #324]	; (2d78 <main+0x190>)
    2c32:	4798      	blx	r3
	struct io_descriptor *io;
	//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
	/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
	usart_async_get_io_descriptor(&GRID_AUX, &io);
    2c34:	4c51      	ldr	r4, [pc, #324]	; (2d7c <main+0x194>)
    2c36:	a90c      	add	r1, sp, #48	; 0x30
    2c38:	4620      	mov	r0, r4
    2c3a:	4b51      	ldr	r3, [pc, #324]	; (2d80 <main+0x198>)
    2c3c:	4798      	blx	r3
	usart_async_enable(&GRID_AUX);
    2c3e:	4620      	mov	r0, r4
    2c40:	4b50      	ldr	r3, [pc, #320]	; (2d84 <main+0x19c>)
    2c42:	4798      	blx	r3
	// GRID_LED Library NEW NEW NEW NEW
	
	

	// Allocate memory for 4 leds and initialize the structure!
	grid_led_init(4);
    2c44:	2004      	movs	r0, #4
    2c46:	4b50      	ldr	r3, [pc, #320]	; (2d88 <main+0x1a0>)
    2c48:	4798      	blx	r3
	
	// Allocate memory for 1 analog input with the filter depth of 8 samples, 14 bit format, 10bit result resolution
	grid_ain_init(1, 3, 14, 10);
    2c4a:	230a      	movs	r3, #10
    2c4c:	220e      	movs	r2, #14
    2c4e:	2103      	movs	r1, #3
    2c50:	2001      	movs	r0, #1
    2c52:	4c4e      	ldr	r4, [pc, #312]	; (2d8c <main+0x1a4>)
    2c54:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2c56:	4f42      	ldr	r7, [pc, #264]	; (2d60 <main+0x178>)
    2c58:	f04f 0a20 	mov.w	sl, #32
    2c5c:	f8cd a008 	str.w	sl, [sp, #8]
				
		gpio_toggle_pin_level(LED0);
		
		
		uint8_t adc_result_buffer[2];
		conversion_ready = 0;
    2c60:	4c4b      	ldr	r4, [pc, #300]	; (2d90 <main+0x1a8>)
    2c62:	2500      	movs	r5, #0
    2c64:	9503      	str	r5, [sp, #12]
		adc_async_start_conversion(&ADC_1);
    2c66:	f8df b110 	ldr.w	fp, [pc, #272]	; 2d78 <main+0x190>
			
		grid_ain_add_sample(0,adcresult);
		
		
		if (grid_ain_get_changed(0)){
			uint16_t average = grid_ain_get_average(0);
    2c6a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2db8 <main+0x1d0>
			// PREPARE DEBUG CONSOLE DATA
			char str[26];
			sprintf(str, "ADC: %5d %5d %5d\n", average, average/128, grid_tel_system_uptime);

			//USART
			io_write(io, str, 26);	
    2c6e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 2dbc <main+0x1d4>
    2c72:	e03b      	b.n	2cec <main+0x104>
    2c74:	f8c7 a01c 	str.w	sl, [r7, #28]
		gpio_toggle_pin_level(LED0);

		
		// ================ WS2812B VIA DMA SPI ================== //
					
		uint16_t average = grid_ain_get_average(0);
    2c78:	4628      	mov	r0, r5
    2c7a:	47c8      	blx	r9
    2c7c:	4606      	mov	r6, r0
	
		grid_tel_tick();
	
	
		delay_ms(1);
    2c7e:	2001      	movs	r0, #1
    2c80:	4b44      	ldr	r3, [pc, #272]	; (2d94 <main+0x1ac>)
    2c82:	4798      	blx	r3
	l_buffer[num][layer].color_min.r = r;
    2c84:	4b44      	ldr	r3, [pc, #272]	; (2d98 <main+0x1b0>)
    2c86:	701d      	strb	r5, [r3, #0]
	l_buffer[num][layer].color_min.g = g;
    2c88:	705d      	strb	r5, [r3, #1]
	l_buffer[num][layer].color_min.b = b;	
    2c8a:	709d      	strb	r5, [r3, #2]
	l_buffer[num][layer].color_mid.r = r;
    2c8c:	70dd      	strb	r5, [r3, #3]
	l_buffer[num][layer].color_mid.g = g;
    2c8e:	711d      	strb	r5, [r3, #4]
	l_buffer[num][layer].color_mid.b = b;	
    2c90:	2260      	movs	r2, #96	; 0x60
    2c92:	715a      	strb	r2, [r3, #5]
	l_buffer[num][layer].color_max.r = r;
    2c94:	719d      	strb	r5, [r3, #6]
	l_buffer[num][layer].color_max.g = g;
    2c96:	71dd      	strb	r5, [r3, #7]
	l_buffer[num][layer].color_max.b = b;	
    2c98:	22e0      	movs	r2, #224	; 0xe0
    2c9a:	721a      	strb	r2, [r3, #8]
		
		grid_led_set_min(0, 0, 0x00, 0x00, 0x00);	
		grid_led_set_mid(0, 0, 0x00, 0x00, 0x60);	
		grid_led_set_max(0, 0, 0x00, 0x00, 0xE0);
		
		grid_led_set_phase(0, 0, average/16/4/4);
    2c9c:	0a36      	lsrs	r6, r6, #8
    2c9e:	72de      	strb	r6, [r3, #11]
	l_buffer[num][layer].fre = val;
    2ca0:	731d      	strb	r5, [r3, #12]
	l_buffer[num][layer].color_min.r = r;
    2ca2:	f883 5027 	strb.w	r5, [r3, #39]	; 0x27
	l_buffer[num][layer].color_min.g = g;
    2ca6:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
	l_buffer[num][layer].color_min.b = b;	
    2caa:	2230      	movs	r2, #48	; 0x30
    2cac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	l_buffer[num][layer].color_mid.r = r;
    2cb0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	l_buffer[num][layer].color_mid.g = g;
    2cb4:	f883 502b 	strb.w	r5, [r3, #43]	; 0x2b
	l_buffer[num][layer].color_mid.b = b;	
    2cb8:	f883 502c 	strb.w	r5, [r3, #44]	; 0x2c
	l_buffer[num][layer].color_max.r = r;
    2cbc:	f883 502d 	strb.w	r5, [r3, #45]	; 0x2d
	l_buffer[num][layer].color_max.g = g;
    2cc0:	f883 502e 	strb.w	r5, [r3, #46]	; 0x2e
	l_buffer[num][layer].color_max.b = b;	
    2cc4:	f883 502f 	strb.w	r5, [r3, #47]	; 0x2f
	l_buffer[num][layer].fre = val;
    2cc8:	2204      	movs	r2, #4
    2cca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		grid_led_set_mid(1, 1, 0x30, 0x00, 0x00);	
		grid_led_set_max(1, 1, 0x00, 0x00, 0x00);
		
		grid_led_set_frequency(1, 1, 4);
				
		grid_led_tick();
    2cce:	4b33      	ldr	r3, [pc, #204]	; (2d9c <main+0x1b4>)
    2cd0:	4798      	blx	r3
		
		// RENDER ALL OF THE LEDs
		grid_led_render_all();
    2cd2:	4b33      	ldr	r3, [pc, #204]	; (2da0 <main+0x1b8>)
    2cd4:	4798      	blx	r3
			
		// SEND DATA TO LEDs 		
		dma_spi_done = 0;
    2cd6:	6065      	str	r5, [r4, #4]
		spi_m_dma_enable(&GRID_LED);
    2cd8:	481d      	ldr	r0, [pc, #116]	; (2d50 <main+0x168>)
    2cda:	4b32      	ldr	r3, [pc, #200]	; (2da4 <main+0x1bc>)
    2cdc:	4798      	blx	r3
		
		io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    2cde:	7b22      	ldrb	r2, [r4, #12]
    2ce0:	68a1      	ldr	r1, [r4, #8]
    2ce2:	980d      	ldr	r0, [sp, #52]	; 0x34
    2ce4:	47c0      	blx	r8
		
 		while (dma_spi_done == 0)
    2ce6:	6863      	ldr	r3, [r4, #4]
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d0fc      	beq.n	2ce6 <main+0xfe>
    2cec:	9b02      	ldr	r3, [sp, #8]
    2cee:	61fb      	str	r3, [r7, #28]
		conversion_ready = 0;
    2cf0:	9b03      	ldr	r3, [sp, #12]
    2cf2:	6023      	str	r3, [r4, #0]
		adc_async_start_conversion(&ADC_1);
    2cf4:	481c      	ldr	r0, [pc, #112]	; (2d68 <main+0x180>)
    2cf6:	47d8      	blx	fp
		while(conversion_ready==0){}
    2cf8:	6823      	ldr	r3, [r4, #0]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d0fc      	beq.n	2cf8 <main+0x110>
		adc_async_read_channel(&ADC_1, 0, adc_result_buffer, 2);
    2cfe:	2302      	movs	r3, #2
    2d00:	aa04      	add	r2, sp, #16
    2d02:	4629      	mov	r1, r5
    2d04:	4818      	ldr	r0, [pc, #96]	; (2d68 <main+0x180>)
    2d06:	4e28      	ldr	r6, [pc, #160]	; (2da8 <main+0x1c0>)
    2d08:	47b0      	blx	r6
		uint16_t adcresult = 256*adc_result_buffer[1] + adc_result_buffer[0];	
    2d0a:	f89d 3011 	ldrb.w	r3, [sp, #17]
    2d0e:	f89d 1010 	ldrb.w	r1, [sp, #16]
    2d12:	eb01 2103 	add.w	r1, r1, r3, lsl #8
		grid_ain_add_sample(0,adcresult);
    2d16:	b289      	uxth	r1, r1
    2d18:	4628      	mov	r0, r5
    2d1a:	4b24      	ldr	r3, [pc, #144]	; (2dac <main+0x1c4>)
    2d1c:	4798      	blx	r3
	return instance->result_changed;
    2d1e:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
		if (grid_ain_get_changed(0)){
    2d22:	7b1b      	ldrb	r3, [r3, #12]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d0a5      	beq.n	2c74 <main+0x8c>
			uint16_t average = grid_ain_get_average(0);
    2d28:	4628      	mov	r0, r5
    2d2a:	47c8      	blx	r9
    2d2c:	4602      	mov	r2, r0
			sprintf(str, "ADC: %5d %5d %5d\n", average, average/128, grid_tel_system_uptime);
    2d2e:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
    2d32:	9300      	str	r3, [sp, #0]
    2d34:	f3c0 13cf 	ubfx	r3, r0, #7, #16
    2d38:	491d      	ldr	r1, [pc, #116]	; (2db0 <main+0x1c8>)
    2d3a:	a805      	add	r0, sp, #20
    2d3c:	4e1d      	ldr	r6, [pc, #116]	; (2db4 <main+0x1cc>)
    2d3e:	47b0      	blx	r6
			io_write(io, str, 26);	
    2d40:	221a      	movs	r2, #26
    2d42:	a905      	add	r1, sp, #20
    2d44:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d46:	47c0      	blx	r8
    2d48:	e794      	b.n	2c74 <main+0x8c>
    2d4a:	bf00      	nop
    2d4c:	000002d1 	.word	0x000002d1
    2d50:	20000a80 	.word	0x20000a80
    2d54:	00000ee1 	.word	0x00000ee1
    2d58:	00002809 	.word	0x00002809
    2d5c:	00000eb1 	.word	0x00000eb1
    2d60:	41008000 	.word	0x41008000
    2d64:	20000f6c 	.word	0x20000f6c
    2d68:	20000ac4 	.word	0x20000ac4
    2d6c:	000027fd 	.word	0x000027fd
    2d70:	00000a6d 	.word	0x00000a6d
    2d74:	00000a2d 	.word	0x00000a2d
    2d78:	00000bcd 	.word	0x00000bcd
    2d7c:	20000a04 	.word	0x20000a04
    2d80:	00001179 	.word	0x00001179
    2d84:	0000114d 	.word	0x0000114d
    2d88:	00002851 	.word	0x00002851
    2d8c:	00002a81 	.word	0x00002a81
    2d90:	20000560 	.word	0x20000560
    2d94:	00000c25 	.word	0x00000c25
    2d98:	20000f04 	.word	0x20000f04
    2d9c:	00002951 	.word	0x00002951
    2da0:	00002a25 	.word	0x00002a25
    2da4:	00000e89 	.word	0x00000e89
    2da8:	00000aed 	.word	0x00000aed
    2dac:	00002ad5 	.word	0x00002ad5
    2db0:	00003988 	.word	0x00003988
    2db4:	00002fa9 	.word	0x00002fa9
    2db8:	00002bd1 	.word	0x00002bd1
    2dbc:	00000da5 	.word	0x00000da5

00002dc0 <__libc_init_array>:
    2dc0:	b570      	push	{r4, r5, r6, lr}
    2dc2:	4e0d      	ldr	r6, [pc, #52]	; (2df8 <__libc_init_array+0x38>)
    2dc4:	4c0d      	ldr	r4, [pc, #52]	; (2dfc <__libc_init_array+0x3c>)
    2dc6:	1ba4      	subs	r4, r4, r6
    2dc8:	10a4      	asrs	r4, r4, #2
    2dca:	2500      	movs	r5, #0
    2dcc:	42a5      	cmp	r5, r4
    2dce:	d109      	bne.n	2de4 <__libc_init_array+0x24>
    2dd0:	4e0b      	ldr	r6, [pc, #44]	; (2e00 <__libc_init_array+0x40>)
    2dd2:	4c0c      	ldr	r4, [pc, #48]	; (2e04 <__libc_init_array+0x44>)
    2dd4:	f000 fe2c 	bl	3a30 <_init>
    2dd8:	1ba4      	subs	r4, r4, r6
    2dda:	10a4      	asrs	r4, r4, #2
    2ddc:	2500      	movs	r5, #0
    2dde:	42a5      	cmp	r5, r4
    2de0:	d105      	bne.n	2dee <__libc_init_array+0x2e>
    2de2:	bd70      	pop	{r4, r5, r6, pc}
    2de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2de8:	4798      	blx	r3
    2dea:	3501      	adds	r5, #1
    2dec:	e7ee      	b.n	2dcc <__libc_init_array+0xc>
    2dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2df2:	4798      	blx	r3
    2df4:	3501      	adds	r5, #1
    2df6:	e7f2      	b.n	2dde <__libc_init_array+0x1e>
    2df8:	00003a3c 	.word	0x00003a3c
    2dfc:	00003a3c 	.word	0x00003a3c
    2e00:	00003a3c 	.word	0x00003a3c
    2e04:	00003a40 	.word	0x00003a40

00002e08 <malloc>:
    2e08:	4b02      	ldr	r3, [pc, #8]	; (2e14 <malloc+0xc>)
    2e0a:	4601      	mov	r1, r0
    2e0c:	6818      	ldr	r0, [r3, #0]
    2e0e:	f000 b85d 	b.w	2ecc <_malloc_r>
    2e12:	bf00      	nop
    2e14:	20000304 	.word	0x20000304

00002e18 <memcpy>:
    2e18:	b510      	push	{r4, lr}
    2e1a:	1e43      	subs	r3, r0, #1
    2e1c:	440a      	add	r2, r1
    2e1e:	4291      	cmp	r1, r2
    2e20:	d100      	bne.n	2e24 <memcpy+0xc>
    2e22:	bd10      	pop	{r4, pc}
    2e24:	f811 4b01 	ldrb.w	r4, [r1], #1
    2e28:	f803 4f01 	strb.w	r4, [r3, #1]!
    2e2c:	e7f7      	b.n	2e1e <memcpy+0x6>
	...

00002e30 <_free_r>:
    2e30:	b538      	push	{r3, r4, r5, lr}
    2e32:	4605      	mov	r5, r0
    2e34:	2900      	cmp	r1, #0
    2e36:	d045      	beq.n	2ec4 <_free_r+0x94>
    2e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2e3c:	1f0c      	subs	r4, r1, #4
    2e3e:	2b00      	cmp	r3, #0
    2e40:	bfb8      	it	lt
    2e42:	18e4      	addlt	r4, r4, r3
    2e44:	f000 f8d4 	bl	2ff0 <__malloc_lock>
    2e48:	4a1f      	ldr	r2, [pc, #124]	; (2ec8 <_free_r+0x98>)
    2e4a:	6813      	ldr	r3, [r2, #0]
    2e4c:	4610      	mov	r0, r2
    2e4e:	b933      	cbnz	r3, 2e5e <_free_r+0x2e>
    2e50:	6063      	str	r3, [r4, #4]
    2e52:	6014      	str	r4, [r2, #0]
    2e54:	4628      	mov	r0, r5
    2e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2e5a:	f000 b8ca 	b.w	2ff2 <__malloc_unlock>
    2e5e:	42a3      	cmp	r3, r4
    2e60:	d90c      	bls.n	2e7c <_free_r+0x4c>
    2e62:	6821      	ldr	r1, [r4, #0]
    2e64:	1862      	adds	r2, r4, r1
    2e66:	4293      	cmp	r3, r2
    2e68:	bf04      	itt	eq
    2e6a:	681a      	ldreq	r2, [r3, #0]
    2e6c:	685b      	ldreq	r3, [r3, #4]
    2e6e:	6063      	str	r3, [r4, #4]
    2e70:	bf04      	itt	eq
    2e72:	1852      	addeq	r2, r2, r1
    2e74:	6022      	streq	r2, [r4, #0]
    2e76:	6004      	str	r4, [r0, #0]
    2e78:	e7ec      	b.n	2e54 <_free_r+0x24>
    2e7a:	4613      	mov	r3, r2
    2e7c:	685a      	ldr	r2, [r3, #4]
    2e7e:	b10a      	cbz	r2, 2e84 <_free_r+0x54>
    2e80:	42a2      	cmp	r2, r4
    2e82:	d9fa      	bls.n	2e7a <_free_r+0x4a>
    2e84:	6819      	ldr	r1, [r3, #0]
    2e86:	1858      	adds	r0, r3, r1
    2e88:	42a0      	cmp	r0, r4
    2e8a:	d10b      	bne.n	2ea4 <_free_r+0x74>
    2e8c:	6820      	ldr	r0, [r4, #0]
    2e8e:	4401      	add	r1, r0
    2e90:	1858      	adds	r0, r3, r1
    2e92:	4282      	cmp	r2, r0
    2e94:	6019      	str	r1, [r3, #0]
    2e96:	d1dd      	bne.n	2e54 <_free_r+0x24>
    2e98:	6810      	ldr	r0, [r2, #0]
    2e9a:	6852      	ldr	r2, [r2, #4]
    2e9c:	605a      	str	r2, [r3, #4]
    2e9e:	4401      	add	r1, r0
    2ea0:	6019      	str	r1, [r3, #0]
    2ea2:	e7d7      	b.n	2e54 <_free_r+0x24>
    2ea4:	d902      	bls.n	2eac <_free_r+0x7c>
    2ea6:	230c      	movs	r3, #12
    2ea8:	602b      	str	r3, [r5, #0]
    2eaa:	e7d3      	b.n	2e54 <_free_r+0x24>
    2eac:	6820      	ldr	r0, [r4, #0]
    2eae:	1821      	adds	r1, r4, r0
    2eb0:	428a      	cmp	r2, r1
    2eb2:	bf04      	itt	eq
    2eb4:	6811      	ldreq	r1, [r2, #0]
    2eb6:	6852      	ldreq	r2, [r2, #4]
    2eb8:	6062      	str	r2, [r4, #4]
    2eba:	bf04      	itt	eq
    2ebc:	1809      	addeq	r1, r1, r0
    2ebe:	6021      	streq	r1, [r4, #0]
    2ec0:	605c      	str	r4, [r3, #4]
    2ec2:	e7c7      	b.n	2e54 <_free_r+0x24>
    2ec4:	bd38      	pop	{r3, r4, r5, pc}
    2ec6:	bf00      	nop
    2ec8:	20000988 	.word	0x20000988

00002ecc <_malloc_r>:
    2ecc:	b570      	push	{r4, r5, r6, lr}
    2ece:	1ccd      	adds	r5, r1, #3
    2ed0:	f025 0503 	bic.w	r5, r5, #3
    2ed4:	3508      	adds	r5, #8
    2ed6:	2d0c      	cmp	r5, #12
    2ed8:	bf38      	it	cc
    2eda:	250c      	movcc	r5, #12
    2edc:	2d00      	cmp	r5, #0
    2ede:	4606      	mov	r6, r0
    2ee0:	db01      	blt.n	2ee6 <_malloc_r+0x1a>
    2ee2:	42a9      	cmp	r1, r5
    2ee4:	d903      	bls.n	2eee <_malloc_r+0x22>
    2ee6:	230c      	movs	r3, #12
    2ee8:	6033      	str	r3, [r6, #0]
    2eea:	2000      	movs	r0, #0
    2eec:	bd70      	pop	{r4, r5, r6, pc}
    2eee:	f000 f87f 	bl	2ff0 <__malloc_lock>
    2ef2:	4a23      	ldr	r2, [pc, #140]	; (2f80 <_malloc_r+0xb4>)
    2ef4:	6814      	ldr	r4, [r2, #0]
    2ef6:	4621      	mov	r1, r4
    2ef8:	b991      	cbnz	r1, 2f20 <_malloc_r+0x54>
    2efa:	4c22      	ldr	r4, [pc, #136]	; (2f84 <_malloc_r+0xb8>)
    2efc:	6823      	ldr	r3, [r4, #0]
    2efe:	b91b      	cbnz	r3, 2f08 <_malloc_r+0x3c>
    2f00:	4630      	mov	r0, r6
    2f02:	f000 f841 	bl	2f88 <_sbrk_r>
    2f06:	6020      	str	r0, [r4, #0]
    2f08:	4629      	mov	r1, r5
    2f0a:	4630      	mov	r0, r6
    2f0c:	f000 f83c 	bl	2f88 <_sbrk_r>
    2f10:	1c43      	adds	r3, r0, #1
    2f12:	d126      	bne.n	2f62 <_malloc_r+0x96>
    2f14:	230c      	movs	r3, #12
    2f16:	6033      	str	r3, [r6, #0]
    2f18:	4630      	mov	r0, r6
    2f1a:	f000 f86a 	bl	2ff2 <__malloc_unlock>
    2f1e:	e7e4      	b.n	2eea <_malloc_r+0x1e>
    2f20:	680b      	ldr	r3, [r1, #0]
    2f22:	1b5b      	subs	r3, r3, r5
    2f24:	d41a      	bmi.n	2f5c <_malloc_r+0x90>
    2f26:	2b0b      	cmp	r3, #11
    2f28:	d90f      	bls.n	2f4a <_malloc_r+0x7e>
    2f2a:	600b      	str	r3, [r1, #0]
    2f2c:	50cd      	str	r5, [r1, r3]
    2f2e:	18cc      	adds	r4, r1, r3
    2f30:	4630      	mov	r0, r6
    2f32:	f000 f85e 	bl	2ff2 <__malloc_unlock>
    2f36:	f104 000b 	add.w	r0, r4, #11
    2f3a:	1d23      	adds	r3, r4, #4
    2f3c:	f020 0007 	bic.w	r0, r0, #7
    2f40:	1ac3      	subs	r3, r0, r3
    2f42:	d01b      	beq.n	2f7c <_malloc_r+0xb0>
    2f44:	425a      	negs	r2, r3
    2f46:	50e2      	str	r2, [r4, r3]
    2f48:	bd70      	pop	{r4, r5, r6, pc}
    2f4a:	428c      	cmp	r4, r1
    2f4c:	bf0d      	iteet	eq
    2f4e:	6863      	ldreq	r3, [r4, #4]
    2f50:	684b      	ldrne	r3, [r1, #4]
    2f52:	6063      	strne	r3, [r4, #4]
    2f54:	6013      	streq	r3, [r2, #0]
    2f56:	bf18      	it	ne
    2f58:	460c      	movne	r4, r1
    2f5a:	e7e9      	b.n	2f30 <_malloc_r+0x64>
    2f5c:	460c      	mov	r4, r1
    2f5e:	6849      	ldr	r1, [r1, #4]
    2f60:	e7ca      	b.n	2ef8 <_malloc_r+0x2c>
    2f62:	1cc4      	adds	r4, r0, #3
    2f64:	f024 0403 	bic.w	r4, r4, #3
    2f68:	42a0      	cmp	r0, r4
    2f6a:	d005      	beq.n	2f78 <_malloc_r+0xac>
    2f6c:	1a21      	subs	r1, r4, r0
    2f6e:	4630      	mov	r0, r6
    2f70:	f000 f80a 	bl	2f88 <_sbrk_r>
    2f74:	3001      	adds	r0, #1
    2f76:	d0cd      	beq.n	2f14 <_malloc_r+0x48>
    2f78:	6025      	str	r5, [r4, #0]
    2f7a:	e7d9      	b.n	2f30 <_malloc_r+0x64>
    2f7c:	bd70      	pop	{r4, r5, r6, pc}
    2f7e:	bf00      	nop
    2f80:	20000988 	.word	0x20000988
    2f84:	2000098c 	.word	0x2000098c

00002f88 <_sbrk_r>:
    2f88:	b538      	push	{r3, r4, r5, lr}
    2f8a:	4c06      	ldr	r4, [pc, #24]	; (2fa4 <_sbrk_r+0x1c>)
    2f8c:	2300      	movs	r3, #0
    2f8e:	4605      	mov	r5, r0
    2f90:	4608      	mov	r0, r1
    2f92:	6023      	str	r3, [r4, #0]
    2f94:	f7fe f984 	bl	12a0 <_sbrk>
    2f98:	1c43      	adds	r3, r0, #1
    2f9a:	d102      	bne.n	2fa2 <_sbrk_r+0x1a>
    2f9c:	6823      	ldr	r3, [r4, #0]
    2f9e:	b103      	cbz	r3, 2fa2 <_sbrk_r+0x1a>
    2fa0:	602b      	str	r3, [r5, #0]
    2fa2:	bd38      	pop	{r3, r4, r5, pc}
    2fa4:	20000f70 	.word	0x20000f70

00002fa8 <siprintf>:
    2fa8:	b40e      	push	{r1, r2, r3}
    2faa:	b500      	push	{lr}
    2fac:	b09c      	sub	sp, #112	; 0x70
    2fae:	f44f 7102 	mov.w	r1, #520	; 0x208
    2fb2:	ab1d      	add	r3, sp, #116	; 0x74
    2fb4:	f8ad 1014 	strh.w	r1, [sp, #20]
    2fb8:	9002      	str	r0, [sp, #8]
    2fba:	9006      	str	r0, [sp, #24]
    2fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2fc0:	480a      	ldr	r0, [pc, #40]	; (2fec <siprintf+0x44>)
    2fc2:	9104      	str	r1, [sp, #16]
    2fc4:	9107      	str	r1, [sp, #28]
    2fc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2fca:	f853 2b04 	ldr.w	r2, [r3], #4
    2fce:	f8ad 1016 	strh.w	r1, [sp, #22]
    2fd2:	6800      	ldr	r0, [r0, #0]
    2fd4:	9301      	str	r3, [sp, #4]
    2fd6:	a902      	add	r1, sp, #8
    2fd8:	f000 f868 	bl	30ac <_svfiprintf_r>
    2fdc:	9b02      	ldr	r3, [sp, #8]
    2fde:	2200      	movs	r2, #0
    2fe0:	701a      	strb	r2, [r3, #0]
    2fe2:	b01c      	add	sp, #112	; 0x70
    2fe4:	f85d eb04 	ldr.w	lr, [sp], #4
    2fe8:	b003      	add	sp, #12
    2fea:	4770      	bx	lr
    2fec:	20000304 	.word	0x20000304

00002ff0 <__malloc_lock>:
    2ff0:	4770      	bx	lr

00002ff2 <__malloc_unlock>:
    2ff2:	4770      	bx	lr

00002ff4 <__ssputs_r>:
    2ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ff8:	688e      	ldr	r6, [r1, #8]
    2ffa:	429e      	cmp	r6, r3
    2ffc:	4682      	mov	sl, r0
    2ffe:	460c      	mov	r4, r1
    3000:	4691      	mov	r9, r2
    3002:	4698      	mov	r8, r3
    3004:	d835      	bhi.n	3072 <__ssputs_r+0x7e>
    3006:	898a      	ldrh	r2, [r1, #12]
    3008:	f412 6f90 	tst.w	r2, #1152	; 0x480
    300c:	d031      	beq.n	3072 <__ssputs_r+0x7e>
    300e:	6825      	ldr	r5, [r4, #0]
    3010:	6909      	ldr	r1, [r1, #16]
    3012:	1a6f      	subs	r7, r5, r1
    3014:	6965      	ldr	r5, [r4, #20]
    3016:	2302      	movs	r3, #2
    3018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    301c:	fb95 f5f3 	sdiv	r5, r5, r3
    3020:	f108 0301 	add.w	r3, r8, #1
    3024:	443b      	add	r3, r7
    3026:	429d      	cmp	r5, r3
    3028:	bf38      	it	cc
    302a:	461d      	movcc	r5, r3
    302c:	0553      	lsls	r3, r2, #21
    302e:	d531      	bpl.n	3094 <__ssputs_r+0xa0>
    3030:	4629      	mov	r1, r5
    3032:	f7ff ff4b 	bl	2ecc <_malloc_r>
    3036:	4606      	mov	r6, r0
    3038:	b950      	cbnz	r0, 3050 <__ssputs_r+0x5c>
    303a:	230c      	movs	r3, #12
    303c:	f8ca 3000 	str.w	r3, [sl]
    3040:	89a3      	ldrh	r3, [r4, #12]
    3042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3046:	81a3      	strh	r3, [r4, #12]
    3048:	f04f 30ff 	mov.w	r0, #4294967295
    304c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3050:	463a      	mov	r2, r7
    3052:	6921      	ldr	r1, [r4, #16]
    3054:	f7ff fee0 	bl	2e18 <memcpy>
    3058:	89a3      	ldrh	r3, [r4, #12]
    305a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    305e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3062:	81a3      	strh	r3, [r4, #12]
    3064:	6126      	str	r6, [r4, #16]
    3066:	6165      	str	r5, [r4, #20]
    3068:	443e      	add	r6, r7
    306a:	1bed      	subs	r5, r5, r7
    306c:	6026      	str	r6, [r4, #0]
    306e:	60a5      	str	r5, [r4, #8]
    3070:	4646      	mov	r6, r8
    3072:	4546      	cmp	r6, r8
    3074:	bf28      	it	cs
    3076:	4646      	movcs	r6, r8
    3078:	4632      	mov	r2, r6
    307a:	4649      	mov	r1, r9
    307c:	6820      	ldr	r0, [r4, #0]
    307e:	f000 faef 	bl	3660 <memmove>
    3082:	68a3      	ldr	r3, [r4, #8]
    3084:	1b9b      	subs	r3, r3, r6
    3086:	60a3      	str	r3, [r4, #8]
    3088:	6823      	ldr	r3, [r4, #0]
    308a:	441e      	add	r6, r3
    308c:	6026      	str	r6, [r4, #0]
    308e:	2000      	movs	r0, #0
    3090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3094:	462a      	mov	r2, r5
    3096:	f000 fafd 	bl	3694 <_realloc_r>
    309a:	4606      	mov	r6, r0
    309c:	2800      	cmp	r0, #0
    309e:	d1e1      	bne.n	3064 <__ssputs_r+0x70>
    30a0:	6921      	ldr	r1, [r4, #16]
    30a2:	4650      	mov	r0, sl
    30a4:	f7ff fec4 	bl	2e30 <_free_r>
    30a8:	e7c7      	b.n	303a <__ssputs_r+0x46>
	...

000030ac <_svfiprintf_r>:
    30ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30b0:	b09d      	sub	sp, #116	; 0x74
    30b2:	4680      	mov	r8, r0
    30b4:	9303      	str	r3, [sp, #12]
    30b6:	898b      	ldrh	r3, [r1, #12]
    30b8:	061c      	lsls	r4, r3, #24
    30ba:	460d      	mov	r5, r1
    30bc:	4616      	mov	r6, r2
    30be:	d50f      	bpl.n	30e0 <_svfiprintf_r+0x34>
    30c0:	690b      	ldr	r3, [r1, #16]
    30c2:	b96b      	cbnz	r3, 30e0 <_svfiprintf_r+0x34>
    30c4:	2140      	movs	r1, #64	; 0x40
    30c6:	f7ff ff01 	bl	2ecc <_malloc_r>
    30ca:	6028      	str	r0, [r5, #0]
    30cc:	6128      	str	r0, [r5, #16]
    30ce:	b928      	cbnz	r0, 30dc <_svfiprintf_r+0x30>
    30d0:	230c      	movs	r3, #12
    30d2:	f8c8 3000 	str.w	r3, [r8]
    30d6:	f04f 30ff 	mov.w	r0, #4294967295
    30da:	e0c5      	b.n	3268 <_svfiprintf_r+0x1bc>
    30dc:	2340      	movs	r3, #64	; 0x40
    30de:	616b      	str	r3, [r5, #20]
    30e0:	2300      	movs	r3, #0
    30e2:	9309      	str	r3, [sp, #36]	; 0x24
    30e4:	2320      	movs	r3, #32
    30e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    30ea:	2330      	movs	r3, #48	; 0x30
    30ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    30f0:	f04f 0b01 	mov.w	fp, #1
    30f4:	4637      	mov	r7, r6
    30f6:	463c      	mov	r4, r7
    30f8:	f814 3b01 	ldrb.w	r3, [r4], #1
    30fc:	2b00      	cmp	r3, #0
    30fe:	d13c      	bne.n	317a <_svfiprintf_r+0xce>
    3100:	ebb7 0a06 	subs.w	sl, r7, r6
    3104:	d00b      	beq.n	311e <_svfiprintf_r+0x72>
    3106:	4653      	mov	r3, sl
    3108:	4632      	mov	r2, r6
    310a:	4629      	mov	r1, r5
    310c:	4640      	mov	r0, r8
    310e:	f7ff ff71 	bl	2ff4 <__ssputs_r>
    3112:	3001      	adds	r0, #1
    3114:	f000 80a3 	beq.w	325e <_svfiprintf_r+0x1b2>
    3118:	9b09      	ldr	r3, [sp, #36]	; 0x24
    311a:	4453      	add	r3, sl
    311c:	9309      	str	r3, [sp, #36]	; 0x24
    311e:	783b      	ldrb	r3, [r7, #0]
    3120:	2b00      	cmp	r3, #0
    3122:	f000 809c 	beq.w	325e <_svfiprintf_r+0x1b2>
    3126:	2300      	movs	r3, #0
    3128:	f04f 32ff 	mov.w	r2, #4294967295
    312c:	9304      	str	r3, [sp, #16]
    312e:	9307      	str	r3, [sp, #28]
    3130:	9205      	str	r2, [sp, #20]
    3132:	9306      	str	r3, [sp, #24]
    3134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3138:	931a      	str	r3, [sp, #104]	; 0x68
    313a:	2205      	movs	r2, #5
    313c:	7821      	ldrb	r1, [r4, #0]
    313e:	4850      	ldr	r0, [pc, #320]	; (3280 <_svfiprintf_r+0x1d4>)
    3140:	f000 fa3e 	bl	35c0 <memchr>
    3144:	1c67      	adds	r7, r4, #1
    3146:	9b04      	ldr	r3, [sp, #16]
    3148:	b9d8      	cbnz	r0, 3182 <_svfiprintf_r+0xd6>
    314a:	06d9      	lsls	r1, r3, #27
    314c:	bf44      	itt	mi
    314e:	2220      	movmi	r2, #32
    3150:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3154:	071a      	lsls	r2, r3, #28
    3156:	bf44      	itt	mi
    3158:	222b      	movmi	r2, #43	; 0x2b
    315a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    315e:	7822      	ldrb	r2, [r4, #0]
    3160:	2a2a      	cmp	r2, #42	; 0x2a
    3162:	d016      	beq.n	3192 <_svfiprintf_r+0xe6>
    3164:	9a07      	ldr	r2, [sp, #28]
    3166:	2100      	movs	r1, #0
    3168:	200a      	movs	r0, #10
    316a:	4627      	mov	r7, r4
    316c:	3401      	adds	r4, #1
    316e:	783b      	ldrb	r3, [r7, #0]
    3170:	3b30      	subs	r3, #48	; 0x30
    3172:	2b09      	cmp	r3, #9
    3174:	d951      	bls.n	321a <_svfiprintf_r+0x16e>
    3176:	b1c9      	cbz	r1, 31ac <_svfiprintf_r+0x100>
    3178:	e011      	b.n	319e <_svfiprintf_r+0xf2>
    317a:	2b25      	cmp	r3, #37	; 0x25
    317c:	d0c0      	beq.n	3100 <_svfiprintf_r+0x54>
    317e:	4627      	mov	r7, r4
    3180:	e7b9      	b.n	30f6 <_svfiprintf_r+0x4a>
    3182:	4a3f      	ldr	r2, [pc, #252]	; (3280 <_svfiprintf_r+0x1d4>)
    3184:	1a80      	subs	r0, r0, r2
    3186:	fa0b f000 	lsl.w	r0, fp, r0
    318a:	4318      	orrs	r0, r3
    318c:	9004      	str	r0, [sp, #16]
    318e:	463c      	mov	r4, r7
    3190:	e7d3      	b.n	313a <_svfiprintf_r+0x8e>
    3192:	9a03      	ldr	r2, [sp, #12]
    3194:	1d11      	adds	r1, r2, #4
    3196:	6812      	ldr	r2, [r2, #0]
    3198:	9103      	str	r1, [sp, #12]
    319a:	2a00      	cmp	r2, #0
    319c:	db01      	blt.n	31a2 <_svfiprintf_r+0xf6>
    319e:	9207      	str	r2, [sp, #28]
    31a0:	e004      	b.n	31ac <_svfiprintf_r+0x100>
    31a2:	4252      	negs	r2, r2
    31a4:	f043 0302 	orr.w	r3, r3, #2
    31a8:	9207      	str	r2, [sp, #28]
    31aa:	9304      	str	r3, [sp, #16]
    31ac:	783b      	ldrb	r3, [r7, #0]
    31ae:	2b2e      	cmp	r3, #46	; 0x2e
    31b0:	d10e      	bne.n	31d0 <_svfiprintf_r+0x124>
    31b2:	787b      	ldrb	r3, [r7, #1]
    31b4:	2b2a      	cmp	r3, #42	; 0x2a
    31b6:	f107 0101 	add.w	r1, r7, #1
    31ba:	d132      	bne.n	3222 <_svfiprintf_r+0x176>
    31bc:	9b03      	ldr	r3, [sp, #12]
    31be:	1d1a      	adds	r2, r3, #4
    31c0:	681b      	ldr	r3, [r3, #0]
    31c2:	9203      	str	r2, [sp, #12]
    31c4:	2b00      	cmp	r3, #0
    31c6:	bfb8      	it	lt
    31c8:	f04f 33ff 	movlt.w	r3, #4294967295
    31cc:	3702      	adds	r7, #2
    31ce:	9305      	str	r3, [sp, #20]
    31d0:	4c2c      	ldr	r4, [pc, #176]	; (3284 <_svfiprintf_r+0x1d8>)
    31d2:	7839      	ldrb	r1, [r7, #0]
    31d4:	2203      	movs	r2, #3
    31d6:	4620      	mov	r0, r4
    31d8:	f000 f9f2 	bl	35c0 <memchr>
    31dc:	b138      	cbz	r0, 31ee <_svfiprintf_r+0x142>
    31de:	2340      	movs	r3, #64	; 0x40
    31e0:	1b00      	subs	r0, r0, r4
    31e2:	fa03 f000 	lsl.w	r0, r3, r0
    31e6:	9b04      	ldr	r3, [sp, #16]
    31e8:	4303      	orrs	r3, r0
    31ea:	9304      	str	r3, [sp, #16]
    31ec:	3701      	adds	r7, #1
    31ee:	7839      	ldrb	r1, [r7, #0]
    31f0:	4825      	ldr	r0, [pc, #148]	; (3288 <_svfiprintf_r+0x1dc>)
    31f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    31f6:	2206      	movs	r2, #6
    31f8:	1c7e      	adds	r6, r7, #1
    31fa:	f000 f9e1 	bl	35c0 <memchr>
    31fe:	2800      	cmp	r0, #0
    3200:	d035      	beq.n	326e <_svfiprintf_r+0x1c2>
    3202:	4b22      	ldr	r3, [pc, #136]	; (328c <_svfiprintf_r+0x1e0>)
    3204:	b9fb      	cbnz	r3, 3246 <_svfiprintf_r+0x19a>
    3206:	9b03      	ldr	r3, [sp, #12]
    3208:	3307      	adds	r3, #7
    320a:	f023 0307 	bic.w	r3, r3, #7
    320e:	3308      	adds	r3, #8
    3210:	9303      	str	r3, [sp, #12]
    3212:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3214:	444b      	add	r3, r9
    3216:	9309      	str	r3, [sp, #36]	; 0x24
    3218:	e76c      	b.n	30f4 <_svfiprintf_r+0x48>
    321a:	fb00 3202 	mla	r2, r0, r2, r3
    321e:	2101      	movs	r1, #1
    3220:	e7a3      	b.n	316a <_svfiprintf_r+0xbe>
    3222:	2300      	movs	r3, #0
    3224:	9305      	str	r3, [sp, #20]
    3226:	4618      	mov	r0, r3
    3228:	240a      	movs	r4, #10
    322a:	460f      	mov	r7, r1
    322c:	3101      	adds	r1, #1
    322e:	783a      	ldrb	r2, [r7, #0]
    3230:	3a30      	subs	r2, #48	; 0x30
    3232:	2a09      	cmp	r2, #9
    3234:	d903      	bls.n	323e <_svfiprintf_r+0x192>
    3236:	2b00      	cmp	r3, #0
    3238:	d0ca      	beq.n	31d0 <_svfiprintf_r+0x124>
    323a:	9005      	str	r0, [sp, #20]
    323c:	e7c8      	b.n	31d0 <_svfiprintf_r+0x124>
    323e:	fb04 2000 	mla	r0, r4, r0, r2
    3242:	2301      	movs	r3, #1
    3244:	e7f1      	b.n	322a <_svfiprintf_r+0x17e>
    3246:	ab03      	add	r3, sp, #12
    3248:	9300      	str	r3, [sp, #0]
    324a:	462a      	mov	r2, r5
    324c:	4b10      	ldr	r3, [pc, #64]	; (3290 <_svfiprintf_r+0x1e4>)
    324e:	a904      	add	r1, sp, #16
    3250:	4640      	mov	r0, r8
    3252:	f3af 8000 	nop.w
    3256:	f1b0 3fff 	cmp.w	r0, #4294967295
    325a:	4681      	mov	r9, r0
    325c:	d1d9      	bne.n	3212 <_svfiprintf_r+0x166>
    325e:	89ab      	ldrh	r3, [r5, #12]
    3260:	065b      	lsls	r3, r3, #25
    3262:	f53f af38 	bmi.w	30d6 <_svfiprintf_r+0x2a>
    3266:	9809      	ldr	r0, [sp, #36]	; 0x24
    3268:	b01d      	add	sp, #116	; 0x74
    326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    326e:	ab03      	add	r3, sp, #12
    3270:	9300      	str	r3, [sp, #0]
    3272:	462a      	mov	r2, r5
    3274:	4b06      	ldr	r3, [pc, #24]	; (3290 <_svfiprintf_r+0x1e4>)
    3276:	a904      	add	r1, sp, #16
    3278:	4640      	mov	r0, r8
    327a:	f000 f881 	bl	3380 <_printf_i>
    327e:	e7ea      	b.n	3256 <_svfiprintf_r+0x1aa>
    3280:	000039fc 	.word	0x000039fc
    3284:	00003a02 	.word	0x00003a02
    3288:	00003a06 	.word	0x00003a06
    328c:	00000000 	.word	0x00000000
    3290:	00002ff5 	.word	0x00002ff5

00003294 <_printf_common>:
    3294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3298:	4691      	mov	r9, r2
    329a:	461f      	mov	r7, r3
    329c:	688a      	ldr	r2, [r1, #8]
    329e:	690b      	ldr	r3, [r1, #16]
    32a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    32a4:	4293      	cmp	r3, r2
    32a6:	bfb8      	it	lt
    32a8:	4613      	movlt	r3, r2
    32aa:	f8c9 3000 	str.w	r3, [r9]
    32ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    32b2:	4606      	mov	r6, r0
    32b4:	460c      	mov	r4, r1
    32b6:	b112      	cbz	r2, 32be <_printf_common+0x2a>
    32b8:	3301      	adds	r3, #1
    32ba:	f8c9 3000 	str.w	r3, [r9]
    32be:	6823      	ldr	r3, [r4, #0]
    32c0:	0699      	lsls	r1, r3, #26
    32c2:	bf42      	ittt	mi
    32c4:	f8d9 3000 	ldrmi.w	r3, [r9]
    32c8:	3302      	addmi	r3, #2
    32ca:	f8c9 3000 	strmi.w	r3, [r9]
    32ce:	6825      	ldr	r5, [r4, #0]
    32d0:	f015 0506 	ands.w	r5, r5, #6
    32d4:	d107      	bne.n	32e6 <_printf_common+0x52>
    32d6:	f104 0a19 	add.w	sl, r4, #25
    32da:	68e3      	ldr	r3, [r4, #12]
    32dc:	f8d9 2000 	ldr.w	r2, [r9]
    32e0:	1a9b      	subs	r3, r3, r2
    32e2:	429d      	cmp	r5, r3
    32e4:	db29      	blt.n	333a <_printf_common+0xa6>
    32e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    32ea:	6822      	ldr	r2, [r4, #0]
    32ec:	3300      	adds	r3, #0
    32ee:	bf18      	it	ne
    32f0:	2301      	movne	r3, #1
    32f2:	0692      	lsls	r2, r2, #26
    32f4:	d42e      	bmi.n	3354 <_printf_common+0xc0>
    32f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    32fa:	4639      	mov	r1, r7
    32fc:	4630      	mov	r0, r6
    32fe:	47c0      	blx	r8
    3300:	3001      	adds	r0, #1
    3302:	d021      	beq.n	3348 <_printf_common+0xb4>
    3304:	6823      	ldr	r3, [r4, #0]
    3306:	68e5      	ldr	r5, [r4, #12]
    3308:	f8d9 2000 	ldr.w	r2, [r9]
    330c:	f003 0306 	and.w	r3, r3, #6
    3310:	2b04      	cmp	r3, #4
    3312:	bf08      	it	eq
    3314:	1aad      	subeq	r5, r5, r2
    3316:	68a3      	ldr	r3, [r4, #8]
    3318:	6922      	ldr	r2, [r4, #16]
    331a:	bf0c      	ite	eq
    331c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3320:	2500      	movne	r5, #0
    3322:	4293      	cmp	r3, r2
    3324:	bfc4      	itt	gt
    3326:	1a9b      	subgt	r3, r3, r2
    3328:	18ed      	addgt	r5, r5, r3
    332a:	f04f 0900 	mov.w	r9, #0
    332e:	341a      	adds	r4, #26
    3330:	454d      	cmp	r5, r9
    3332:	d11b      	bne.n	336c <_printf_common+0xd8>
    3334:	2000      	movs	r0, #0
    3336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    333a:	2301      	movs	r3, #1
    333c:	4652      	mov	r2, sl
    333e:	4639      	mov	r1, r7
    3340:	4630      	mov	r0, r6
    3342:	47c0      	blx	r8
    3344:	3001      	adds	r0, #1
    3346:	d103      	bne.n	3350 <_printf_common+0xbc>
    3348:	f04f 30ff 	mov.w	r0, #4294967295
    334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3350:	3501      	adds	r5, #1
    3352:	e7c2      	b.n	32da <_printf_common+0x46>
    3354:	18e1      	adds	r1, r4, r3
    3356:	1c5a      	adds	r2, r3, #1
    3358:	2030      	movs	r0, #48	; 0x30
    335a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    335e:	4422      	add	r2, r4
    3360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3368:	3302      	adds	r3, #2
    336a:	e7c4      	b.n	32f6 <_printf_common+0x62>
    336c:	2301      	movs	r3, #1
    336e:	4622      	mov	r2, r4
    3370:	4639      	mov	r1, r7
    3372:	4630      	mov	r0, r6
    3374:	47c0      	blx	r8
    3376:	3001      	adds	r0, #1
    3378:	d0e6      	beq.n	3348 <_printf_common+0xb4>
    337a:	f109 0901 	add.w	r9, r9, #1
    337e:	e7d7      	b.n	3330 <_printf_common+0x9c>

00003380 <_printf_i>:
    3380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3384:	4617      	mov	r7, r2
    3386:	7e0a      	ldrb	r2, [r1, #24]
    3388:	b085      	sub	sp, #20
    338a:	2a6e      	cmp	r2, #110	; 0x6e
    338c:	4698      	mov	r8, r3
    338e:	4606      	mov	r6, r0
    3390:	460c      	mov	r4, r1
    3392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3394:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    3398:	f000 80bc 	beq.w	3514 <_printf_i+0x194>
    339c:	d81a      	bhi.n	33d4 <_printf_i+0x54>
    339e:	2a63      	cmp	r2, #99	; 0x63
    33a0:	d02e      	beq.n	3400 <_printf_i+0x80>
    33a2:	d80a      	bhi.n	33ba <_printf_i+0x3a>
    33a4:	2a00      	cmp	r2, #0
    33a6:	f000 80c8 	beq.w	353a <_printf_i+0x1ba>
    33aa:	2a58      	cmp	r2, #88	; 0x58
    33ac:	f000 808a 	beq.w	34c4 <_printf_i+0x144>
    33b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    33b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    33b8:	e02a      	b.n	3410 <_printf_i+0x90>
    33ba:	2a64      	cmp	r2, #100	; 0x64
    33bc:	d001      	beq.n	33c2 <_printf_i+0x42>
    33be:	2a69      	cmp	r2, #105	; 0x69
    33c0:	d1f6      	bne.n	33b0 <_printf_i+0x30>
    33c2:	6821      	ldr	r1, [r4, #0]
    33c4:	681a      	ldr	r2, [r3, #0]
    33c6:	f011 0f80 	tst.w	r1, #128	; 0x80
    33ca:	d023      	beq.n	3414 <_printf_i+0x94>
    33cc:	1d11      	adds	r1, r2, #4
    33ce:	6019      	str	r1, [r3, #0]
    33d0:	6813      	ldr	r3, [r2, #0]
    33d2:	e027      	b.n	3424 <_printf_i+0xa4>
    33d4:	2a73      	cmp	r2, #115	; 0x73
    33d6:	f000 80b4 	beq.w	3542 <_printf_i+0x1c2>
    33da:	d808      	bhi.n	33ee <_printf_i+0x6e>
    33dc:	2a6f      	cmp	r2, #111	; 0x6f
    33de:	d02a      	beq.n	3436 <_printf_i+0xb6>
    33e0:	2a70      	cmp	r2, #112	; 0x70
    33e2:	d1e5      	bne.n	33b0 <_printf_i+0x30>
    33e4:	680a      	ldr	r2, [r1, #0]
    33e6:	f042 0220 	orr.w	r2, r2, #32
    33ea:	600a      	str	r2, [r1, #0]
    33ec:	e003      	b.n	33f6 <_printf_i+0x76>
    33ee:	2a75      	cmp	r2, #117	; 0x75
    33f0:	d021      	beq.n	3436 <_printf_i+0xb6>
    33f2:	2a78      	cmp	r2, #120	; 0x78
    33f4:	d1dc      	bne.n	33b0 <_printf_i+0x30>
    33f6:	2278      	movs	r2, #120	; 0x78
    33f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    33fc:	496e      	ldr	r1, [pc, #440]	; (35b8 <_printf_i+0x238>)
    33fe:	e064      	b.n	34ca <_printf_i+0x14a>
    3400:	681a      	ldr	r2, [r3, #0]
    3402:	f101 0542 	add.w	r5, r1, #66	; 0x42
    3406:	1d11      	adds	r1, r2, #4
    3408:	6019      	str	r1, [r3, #0]
    340a:	6813      	ldr	r3, [r2, #0]
    340c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3410:	2301      	movs	r3, #1
    3412:	e0a3      	b.n	355c <_printf_i+0x1dc>
    3414:	f011 0f40 	tst.w	r1, #64	; 0x40
    3418:	f102 0104 	add.w	r1, r2, #4
    341c:	6019      	str	r1, [r3, #0]
    341e:	d0d7      	beq.n	33d0 <_printf_i+0x50>
    3420:	f9b2 3000 	ldrsh.w	r3, [r2]
    3424:	2b00      	cmp	r3, #0
    3426:	da03      	bge.n	3430 <_printf_i+0xb0>
    3428:	222d      	movs	r2, #45	; 0x2d
    342a:	425b      	negs	r3, r3
    342c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3430:	4962      	ldr	r1, [pc, #392]	; (35bc <_printf_i+0x23c>)
    3432:	220a      	movs	r2, #10
    3434:	e017      	b.n	3466 <_printf_i+0xe6>
    3436:	6820      	ldr	r0, [r4, #0]
    3438:	6819      	ldr	r1, [r3, #0]
    343a:	f010 0f80 	tst.w	r0, #128	; 0x80
    343e:	d003      	beq.n	3448 <_printf_i+0xc8>
    3440:	1d08      	adds	r0, r1, #4
    3442:	6018      	str	r0, [r3, #0]
    3444:	680b      	ldr	r3, [r1, #0]
    3446:	e006      	b.n	3456 <_printf_i+0xd6>
    3448:	f010 0f40 	tst.w	r0, #64	; 0x40
    344c:	f101 0004 	add.w	r0, r1, #4
    3450:	6018      	str	r0, [r3, #0]
    3452:	d0f7      	beq.n	3444 <_printf_i+0xc4>
    3454:	880b      	ldrh	r3, [r1, #0]
    3456:	4959      	ldr	r1, [pc, #356]	; (35bc <_printf_i+0x23c>)
    3458:	2a6f      	cmp	r2, #111	; 0x6f
    345a:	bf14      	ite	ne
    345c:	220a      	movne	r2, #10
    345e:	2208      	moveq	r2, #8
    3460:	2000      	movs	r0, #0
    3462:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3466:	6865      	ldr	r5, [r4, #4]
    3468:	60a5      	str	r5, [r4, #8]
    346a:	2d00      	cmp	r5, #0
    346c:	f2c0 809c 	blt.w	35a8 <_printf_i+0x228>
    3470:	6820      	ldr	r0, [r4, #0]
    3472:	f020 0004 	bic.w	r0, r0, #4
    3476:	6020      	str	r0, [r4, #0]
    3478:	2b00      	cmp	r3, #0
    347a:	d13f      	bne.n	34fc <_printf_i+0x17c>
    347c:	2d00      	cmp	r5, #0
    347e:	f040 8095 	bne.w	35ac <_printf_i+0x22c>
    3482:	4675      	mov	r5, lr
    3484:	2a08      	cmp	r2, #8
    3486:	d10b      	bne.n	34a0 <_printf_i+0x120>
    3488:	6823      	ldr	r3, [r4, #0]
    348a:	07da      	lsls	r2, r3, #31
    348c:	d508      	bpl.n	34a0 <_printf_i+0x120>
    348e:	6923      	ldr	r3, [r4, #16]
    3490:	6862      	ldr	r2, [r4, #4]
    3492:	429a      	cmp	r2, r3
    3494:	bfde      	ittt	le
    3496:	2330      	movle	r3, #48	; 0x30
    3498:	f805 3c01 	strble.w	r3, [r5, #-1]
    349c:	f105 35ff 	addle.w	r5, r5, #4294967295
    34a0:	ebae 0305 	sub.w	r3, lr, r5
    34a4:	6123      	str	r3, [r4, #16]
    34a6:	f8cd 8000 	str.w	r8, [sp]
    34aa:	463b      	mov	r3, r7
    34ac:	aa03      	add	r2, sp, #12
    34ae:	4621      	mov	r1, r4
    34b0:	4630      	mov	r0, r6
    34b2:	f7ff feef 	bl	3294 <_printf_common>
    34b6:	3001      	adds	r0, #1
    34b8:	d155      	bne.n	3566 <_printf_i+0x1e6>
    34ba:	f04f 30ff 	mov.w	r0, #4294967295
    34be:	b005      	add	sp, #20
    34c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    34c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    34c8:	493c      	ldr	r1, [pc, #240]	; (35bc <_printf_i+0x23c>)
    34ca:	6822      	ldr	r2, [r4, #0]
    34cc:	6818      	ldr	r0, [r3, #0]
    34ce:	f012 0f80 	tst.w	r2, #128	; 0x80
    34d2:	f100 0504 	add.w	r5, r0, #4
    34d6:	601d      	str	r5, [r3, #0]
    34d8:	d001      	beq.n	34de <_printf_i+0x15e>
    34da:	6803      	ldr	r3, [r0, #0]
    34dc:	e002      	b.n	34e4 <_printf_i+0x164>
    34de:	0655      	lsls	r5, r2, #25
    34e0:	d5fb      	bpl.n	34da <_printf_i+0x15a>
    34e2:	8803      	ldrh	r3, [r0, #0]
    34e4:	07d0      	lsls	r0, r2, #31
    34e6:	bf44      	itt	mi
    34e8:	f042 0220 	orrmi.w	r2, r2, #32
    34ec:	6022      	strmi	r2, [r4, #0]
    34ee:	b91b      	cbnz	r3, 34f8 <_printf_i+0x178>
    34f0:	6822      	ldr	r2, [r4, #0]
    34f2:	f022 0220 	bic.w	r2, r2, #32
    34f6:	6022      	str	r2, [r4, #0]
    34f8:	2210      	movs	r2, #16
    34fa:	e7b1      	b.n	3460 <_printf_i+0xe0>
    34fc:	4675      	mov	r5, lr
    34fe:	fbb3 f0f2 	udiv	r0, r3, r2
    3502:	fb02 3310 	mls	r3, r2, r0, r3
    3506:	5ccb      	ldrb	r3, [r1, r3]
    3508:	f805 3d01 	strb.w	r3, [r5, #-1]!
    350c:	4603      	mov	r3, r0
    350e:	2800      	cmp	r0, #0
    3510:	d1f5      	bne.n	34fe <_printf_i+0x17e>
    3512:	e7b7      	b.n	3484 <_printf_i+0x104>
    3514:	6808      	ldr	r0, [r1, #0]
    3516:	681a      	ldr	r2, [r3, #0]
    3518:	6949      	ldr	r1, [r1, #20]
    351a:	f010 0f80 	tst.w	r0, #128	; 0x80
    351e:	d004      	beq.n	352a <_printf_i+0x1aa>
    3520:	1d10      	adds	r0, r2, #4
    3522:	6018      	str	r0, [r3, #0]
    3524:	6813      	ldr	r3, [r2, #0]
    3526:	6019      	str	r1, [r3, #0]
    3528:	e007      	b.n	353a <_printf_i+0x1ba>
    352a:	f010 0f40 	tst.w	r0, #64	; 0x40
    352e:	f102 0004 	add.w	r0, r2, #4
    3532:	6018      	str	r0, [r3, #0]
    3534:	6813      	ldr	r3, [r2, #0]
    3536:	d0f6      	beq.n	3526 <_printf_i+0x1a6>
    3538:	8019      	strh	r1, [r3, #0]
    353a:	2300      	movs	r3, #0
    353c:	6123      	str	r3, [r4, #16]
    353e:	4675      	mov	r5, lr
    3540:	e7b1      	b.n	34a6 <_printf_i+0x126>
    3542:	681a      	ldr	r2, [r3, #0]
    3544:	1d11      	adds	r1, r2, #4
    3546:	6019      	str	r1, [r3, #0]
    3548:	6815      	ldr	r5, [r2, #0]
    354a:	6862      	ldr	r2, [r4, #4]
    354c:	2100      	movs	r1, #0
    354e:	4628      	mov	r0, r5
    3550:	f000 f836 	bl	35c0 <memchr>
    3554:	b108      	cbz	r0, 355a <_printf_i+0x1da>
    3556:	1b40      	subs	r0, r0, r5
    3558:	6060      	str	r0, [r4, #4]
    355a:	6863      	ldr	r3, [r4, #4]
    355c:	6123      	str	r3, [r4, #16]
    355e:	2300      	movs	r3, #0
    3560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3564:	e79f      	b.n	34a6 <_printf_i+0x126>
    3566:	6923      	ldr	r3, [r4, #16]
    3568:	462a      	mov	r2, r5
    356a:	4639      	mov	r1, r7
    356c:	4630      	mov	r0, r6
    356e:	47c0      	blx	r8
    3570:	3001      	adds	r0, #1
    3572:	d0a2      	beq.n	34ba <_printf_i+0x13a>
    3574:	6823      	ldr	r3, [r4, #0]
    3576:	079b      	lsls	r3, r3, #30
    3578:	d507      	bpl.n	358a <_printf_i+0x20a>
    357a:	2500      	movs	r5, #0
    357c:	f104 0919 	add.w	r9, r4, #25
    3580:	68e3      	ldr	r3, [r4, #12]
    3582:	9a03      	ldr	r2, [sp, #12]
    3584:	1a9b      	subs	r3, r3, r2
    3586:	429d      	cmp	r5, r3
    3588:	db05      	blt.n	3596 <_printf_i+0x216>
    358a:	68e0      	ldr	r0, [r4, #12]
    358c:	9b03      	ldr	r3, [sp, #12]
    358e:	4298      	cmp	r0, r3
    3590:	bfb8      	it	lt
    3592:	4618      	movlt	r0, r3
    3594:	e793      	b.n	34be <_printf_i+0x13e>
    3596:	2301      	movs	r3, #1
    3598:	464a      	mov	r2, r9
    359a:	4639      	mov	r1, r7
    359c:	4630      	mov	r0, r6
    359e:	47c0      	blx	r8
    35a0:	3001      	adds	r0, #1
    35a2:	d08a      	beq.n	34ba <_printf_i+0x13a>
    35a4:	3501      	adds	r5, #1
    35a6:	e7eb      	b.n	3580 <_printf_i+0x200>
    35a8:	2b00      	cmp	r3, #0
    35aa:	d1a7      	bne.n	34fc <_printf_i+0x17c>
    35ac:	780b      	ldrb	r3, [r1, #0]
    35ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    35b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    35b6:	e765      	b.n	3484 <_printf_i+0x104>
    35b8:	00003a1e 	.word	0x00003a1e
    35bc:	00003a0d 	.word	0x00003a0d

000035c0 <memchr>:
    35c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    35c4:	2a10      	cmp	r2, #16
    35c6:	db2b      	blt.n	3620 <memchr+0x60>
    35c8:	f010 0f07 	tst.w	r0, #7
    35cc:	d008      	beq.n	35e0 <memchr+0x20>
    35ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    35d2:	3a01      	subs	r2, #1
    35d4:	428b      	cmp	r3, r1
    35d6:	d02d      	beq.n	3634 <memchr+0x74>
    35d8:	f010 0f07 	tst.w	r0, #7
    35dc:	b342      	cbz	r2, 3630 <memchr+0x70>
    35de:	d1f6      	bne.n	35ce <memchr+0xe>
    35e0:	b4f0      	push	{r4, r5, r6, r7}
    35e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    35e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    35ea:	f022 0407 	bic.w	r4, r2, #7
    35ee:	f07f 0700 	mvns.w	r7, #0
    35f2:	2300      	movs	r3, #0
    35f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    35f8:	3c08      	subs	r4, #8
    35fa:	ea85 0501 	eor.w	r5, r5, r1
    35fe:	ea86 0601 	eor.w	r6, r6, r1
    3602:	fa85 f547 	uadd8	r5, r5, r7
    3606:	faa3 f587 	sel	r5, r3, r7
    360a:	fa86 f647 	uadd8	r6, r6, r7
    360e:	faa5 f687 	sel	r6, r5, r7
    3612:	b98e      	cbnz	r6, 3638 <memchr+0x78>
    3614:	d1ee      	bne.n	35f4 <memchr+0x34>
    3616:	bcf0      	pop	{r4, r5, r6, r7}
    3618:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    361c:	f002 0207 	and.w	r2, r2, #7
    3620:	b132      	cbz	r2, 3630 <memchr+0x70>
    3622:	f810 3b01 	ldrb.w	r3, [r0], #1
    3626:	3a01      	subs	r2, #1
    3628:	ea83 0301 	eor.w	r3, r3, r1
    362c:	b113      	cbz	r3, 3634 <memchr+0x74>
    362e:	d1f8      	bne.n	3622 <memchr+0x62>
    3630:	2000      	movs	r0, #0
    3632:	4770      	bx	lr
    3634:	3801      	subs	r0, #1
    3636:	4770      	bx	lr
    3638:	2d00      	cmp	r5, #0
    363a:	bf06      	itte	eq
    363c:	4635      	moveq	r5, r6
    363e:	3803      	subeq	r0, #3
    3640:	3807      	subne	r0, #7
    3642:	f015 0f01 	tst.w	r5, #1
    3646:	d107      	bne.n	3658 <memchr+0x98>
    3648:	3001      	adds	r0, #1
    364a:	f415 7f80 	tst.w	r5, #256	; 0x100
    364e:	bf02      	ittt	eq
    3650:	3001      	addeq	r0, #1
    3652:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3656:	3001      	addeq	r0, #1
    3658:	bcf0      	pop	{r4, r5, r6, r7}
    365a:	3801      	subs	r0, #1
    365c:	4770      	bx	lr
    365e:	bf00      	nop

00003660 <memmove>:
    3660:	4288      	cmp	r0, r1
    3662:	b510      	push	{r4, lr}
    3664:	eb01 0302 	add.w	r3, r1, r2
    3668:	d803      	bhi.n	3672 <memmove+0x12>
    366a:	1e42      	subs	r2, r0, #1
    366c:	4299      	cmp	r1, r3
    366e:	d10c      	bne.n	368a <memmove+0x2a>
    3670:	bd10      	pop	{r4, pc}
    3672:	4298      	cmp	r0, r3
    3674:	d2f9      	bcs.n	366a <memmove+0xa>
    3676:	1881      	adds	r1, r0, r2
    3678:	1ad2      	subs	r2, r2, r3
    367a:	42d3      	cmn	r3, r2
    367c:	d100      	bne.n	3680 <memmove+0x20>
    367e:	bd10      	pop	{r4, pc}
    3680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    3684:	f801 4d01 	strb.w	r4, [r1, #-1]!
    3688:	e7f7      	b.n	367a <memmove+0x1a>
    368a:	f811 4b01 	ldrb.w	r4, [r1], #1
    368e:	f802 4f01 	strb.w	r4, [r2, #1]!
    3692:	e7eb      	b.n	366c <memmove+0xc>

00003694 <_realloc_r>:
    3694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3696:	4607      	mov	r7, r0
    3698:	4614      	mov	r4, r2
    369a:	460e      	mov	r6, r1
    369c:	b921      	cbnz	r1, 36a8 <_realloc_r+0x14>
    369e:	4611      	mov	r1, r2
    36a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    36a4:	f7ff bc12 	b.w	2ecc <_malloc_r>
    36a8:	b922      	cbnz	r2, 36b4 <_realloc_r+0x20>
    36aa:	f7ff fbc1 	bl	2e30 <_free_r>
    36ae:	4625      	mov	r5, r4
    36b0:	4628      	mov	r0, r5
    36b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36b4:	f000 f814 	bl	36e0 <_malloc_usable_size_r>
    36b8:	4284      	cmp	r4, r0
    36ba:	d90f      	bls.n	36dc <_realloc_r+0x48>
    36bc:	4621      	mov	r1, r4
    36be:	4638      	mov	r0, r7
    36c0:	f7ff fc04 	bl	2ecc <_malloc_r>
    36c4:	4605      	mov	r5, r0
    36c6:	2800      	cmp	r0, #0
    36c8:	d0f2      	beq.n	36b0 <_realloc_r+0x1c>
    36ca:	4631      	mov	r1, r6
    36cc:	4622      	mov	r2, r4
    36ce:	f7ff fba3 	bl	2e18 <memcpy>
    36d2:	4631      	mov	r1, r6
    36d4:	4638      	mov	r0, r7
    36d6:	f7ff fbab 	bl	2e30 <_free_r>
    36da:	e7e9      	b.n	36b0 <_realloc_r+0x1c>
    36dc:	4635      	mov	r5, r6
    36de:	e7e7      	b.n	36b0 <_realloc_r+0x1c>

000036e0 <_malloc_usable_size_r>:
    36e0:	f851 0c04 	ldr.w	r0, [r1, #-4]
    36e4:	2800      	cmp	r0, #0
    36e6:	f1a0 0004 	sub.w	r0, r0, #4
    36ea:	bfbc      	itt	lt
    36ec:	580b      	ldrlt	r3, [r1, r0]
    36ee:	18c0      	addlt	r0, r0, r3
    36f0:	4770      	bx	lr
    36f2:	0000      	movs	r0, r0
    36f4:	682f2e2e 	.word	0x682f2e2e
    36f8:	732f6c61 	.word	0x732f6c61
    36fc:	682f6372 	.word	0x682f6372
    3700:	615f6c61 	.word	0x615f6c61
    3704:	615f6364 	.word	0x615f6364
    3708:	636e7973 	.word	0x636e7973
    370c:	0000632e 	.word	0x0000632e
    3710:	682f2e2e 	.word	0x682f2e2e
    3714:	732f6c61 	.word	0x732f6c61
    3718:	682f6372 	.word	0x682f6372
    371c:	665f6c61 	.word	0x665f6c61
    3720:	6873616c 	.word	0x6873616c
    3724:	0000632e 	.word	0x0000632e
    3728:	682f2e2e 	.word	0x682f2e2e
    372c:	732f6c61 	.word	0x732f6c61
    3730:	682f6372 	.word	0x682f6372
    3734:	695f6c61 	.word	0x695f6c61
    3738:	6d5f6332 	.word	0x6d5f6332
    373c:	7973615f 	.word	0x7973615f
    3740:	632e636e 	.word	0x632e636e
    3744:	00000000 	.word	0x00000000
    3748:	682f2e2e 	.word	0x682f2e2e
    374c:	732f6c61 	.word	0x732f6c61
    3750:	682f6372 	.word	0x682f6372
    3754:	695f6c61 	.word	0x695f6c61
    3758:	00632e6f 	.word	0x00632e6f
    375c:	682f2e2e 	.word	0x682f2e2e
    3760:	732f6c61 	.word	0x732f6c61
    3764:	682f6372 	.word	0x682f6372
    3768:	735f6c61 	.word	0x735f6c61
    376c:	6d5f6970 	.word	0x6d5f6970
    3770:	616d645f 	.word	0x616d645f
    3774:	0000632e 	.word	0x0000632e
    3778:	682f2e2e 	.word	0x682f2e2e
    377c:	732f6c61 	.word	0x732f6c61
    3780:	682f6372 	.word	0x682f6372
    3784:	755f6c61 	.word	0x755f6c61
    3788:	74726173 	.word	0x74726173
    378c:	7973615f 	.word	0x7973615f
    3790:	632e636e 	.word	0x632e636e
    3794:	00000000 	.word	0x00000000
    3798:	682f2e2e 	.word	0x682f2e2e
    379c:	752f6c61 	.word	0x752f6c61
    37a0:	736c6974 	.word	0x736c6974
    37a4:	6372732f 	.word	0x6372732f
    37a8:	6974752f 	.word	0x6974752f
    37ac:	725f736c 	.word	0x725f736c
    37b0:	62676e69 	.word	0x62676e69
    37b4:	65666675 	.word	0x65666675
    37b8:	00632e72 	.word	0x00632e72

000037bc <_adcs>:
    37bc:	00000000 0003000c 00041807 00000000     ................
    37cc:	0014080b 00010000 000c0100 18040003     ................
    37dc:	00000004 080b0000 00000014 682f2e2e     ............../h
    37ec:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    37fc:	00000000                                ....

00003800 <_cfgs>:
    3800:	00201300 14000000 00000000 00000000     .. .............
	...
    3900:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    3910:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    3920:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    3930:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00003940 <_i2cms>:
    3940:	00000005 00200014 00000100 0000e6e5     ...... .........
    3950:	00d70000 02dc6c00                       .....l..

00003958 <sercomspi_regs>:
    3958:	0020000c 00000000 00000000 01ff0006     .. .............
    3968:	00000007 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    3978:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    3988:	3a434441 64352520 64352520 64352520     ADC: %5d %5d %5d
    3998:	0000000a                                ....

0000399c <__sf_fake_stderr>:
	...

000039bc <__sf_fake_stdin>:
	...

000039dc <__sf_fake_stdout>:
	...
    39fc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3a0c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3a1c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3a2c:	00006665                                ef..

00003a30 <_init>:
    3a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a32:	bf00      	nop
    3a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a36:	bc08      	pop	{r3}
    3a38:	469e      	mov	lr, r3
    3a3a:	4770      	bx	lr

00003a3c <__init_array_start>:
    3a3c:	00000289 	.word	0x00000289

00003a40 <_fini>:
    3a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a42:	bf00      	nop
    3a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a46:	bc08      	pop	{r3}
    3a48:	469e      	mov	lr, r3
    3a4a:	4770      	bx	lr

00003a4c <__fini_array_start>:
    3a4c:	00000265 	.word	0x00000265
