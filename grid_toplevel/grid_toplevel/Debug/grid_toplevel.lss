
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ea3c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000ea3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          00007794  200005c0  0000f000  000205c0  2**4
                  ALLOC
  5 .stack        00010004  20007d54  00016794  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008f1cb  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bf95  00000000  00000000  000af80e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002e312  00000000  00000000  000bb7a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002300  00000000  00000000  000e9ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003258  00000000  00000000  000ebdb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00048786  00000000  00000000  000ef00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040406  00000000  00000000  00137793  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011ab86  00000000  00000000  00177b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006850  00000000  00000000  00292720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 7d 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     X}. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	95 71 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .q..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 8d 6c 00 00 a1 6c 00 00     .........l...l..
      bc:	31 6a 00 00 3d 6a 00 00 49 6a 00 00 55 6a 00 00     1j..=j..Ij..Uj..
      cc:	61 6a 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     aj..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	c9 6f 00 00 b1 7c 00 00 c5 7c 00 00 d9 7c 00 00     .o...|...|...|..
     104:	ed 7c 00 00 01 7d 00 00 15 7d 00 00 29 7d 00 00     .|...}...}..)}..
     114:	3d 7d 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     =}..............
     124:	ed 02 00 00 51 7d 00 00 65 7d 00 00 79 7d 00 00     ....Q}..e}..y}..
     134:	8d 7d 00 00 a1 7d 00 00 b5 7d 00 00 c9 7d 00 00     .}...}...}...}..
     144:	dd 7d 00 00 f1 7d 00 00 05 7e 00 00 19 7e 00 00     .}...}...~...~..
     154:	2d 7e 00 00 41 7e 00 00 55 7e 00 00 69 7e 00 00     -~..A~..U~..i~..
     164:	7d 7e 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     }~..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 99 9d 00 00     ................
     184:	a5 9d 00 00 b1 9d 00 00 bd 9d 00 00 00 00 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 a1 8a 00 00 b5 8a 00 00     ................
     1f4:	c9 8a 00 00 dd 8a 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 c5 66 00 00 d9 66 00 00 ed 66 00 00     .....f...f...f..
     224:	01 67 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .g..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000ea3c 	.word	0x0000ea3c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000ea3c 	.word	0x0000ea3c
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000ea3c 	.word	0x0000ea3c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000c089 	.word	0x0000c089
     2e8:	0000ac81 	.word	0x0000ac81

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000ea3c 	.word	0x0000ea3c
     36c:	200005bc 	.word	0x200005bc
     370:	20007d54 	.word	0x20007d54
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000c869 	.word	0x0000c869
     384:	0000a7a1 	.word	0x0000a7a1

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20000fc8 	.word	0x20000fc8
     40c:	200010c4 	.word	0x200010c4
     410:	43001c00 	.word	0x43001c00
     414:	00004a69 	.word	0x00004a69
     418:	00004b0d 	.word	0x00004b0d
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	2000119c 	.word	0x2000119c
     4b0:	20000f64 	.word	0x20000f64
     4b4:	43002000 	.word	0x43002000
     4b8:	00004a69 	.word	0x00004a69
     4bc:	00004b0d 	.word	0x00004b0d
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000f60 	.word	0x20000f60
     4e8:	00004da9 	.word	0x00004da9

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00004e2d 	.word	0x00004e2d

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000f44 	.word	0x20000f44
     54c:	00004e4d 	.word	0x00004e4d

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001208 	.word	0x20001208
     718:	00004ff9 	.word	0x00004ff9
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	20000ff4 	.word	0x20000ff4
     7bc:	000058d9 	.word	0x000058d9
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	20001048 	.word	0x20001048
     860:	000058d9 	.word	0x000058d9
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20000fbc 	.word	0x20000fbc
     8f8:	00005b61 	.word	0x00005b61
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000ebc 	.word	0x20000ebc
     a04:	000051e9 	.word	0x000051e9
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	200010fc 	.word	0x200010fc
     aa8:	000058d9 	.word	0x000058d9
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20000f7c 	.word	0x20000f7c
     b54:	00004f2d 	.word	0x00004f2d
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	2000114c 	.word	0x2000114c
     bf8:	000058d9 	.word	0x000058d9
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001098 	.word	0x20001098
     cfc:	0000544d 	.word	0x0000544d
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00004dd9 	.word	0x00004dd9

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00005e29 	.word	0x00005e29
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000dd38 	.word	0x0000dd38
     e14:	00006181 	.word	0x00006181
     e18:	20001044 	.word	0x20001044
     e1c:	40002000 	.word	0x40002000
     e20:	00009dc9 	.word	0x00009dc9

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00006745 	.word	0x00006745
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	0000718d 	.word	0x0000718d
    1100:	40002400 	.word	0x40002400
    1104:	20000f04 	.word	0x20000f04
    1108:	000055f5 	.word	0x000055f5
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	00008a99 	.word	0x00008a99
    1134:	40003800 	.word	0x40003800
    1138:	200011e8 	.word	0x200011e8
    113c:	40003c00 	.word	0x40003c00
    1140:	200010dc 	.word	0x200010dc
    1144:	4101a000 	.word	0x4101a000
    1148:	20000f24 	.word	0x20000f24
    114c:	4101c000 	.word	0x4101c000
    1150:	200011c8 	.word	0x200011c8
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_d51_bitmap_write_bit>:
 */ 

#include "grid_d51.h"


void grid_d51_bitmap_write_bit(uint8_t* buffer, uint8_t offset, uint8_t value, uint8_t* changed){
    1160:	b430      	push	{r4, r5}
	
	uint8_t index = offset/8;
    1162:	08cc      	lsrs	r4, r1, #3
	uint8_t bit = offset%8;
    1164:	f001 0107 	and.w	r1, r1, #7
	
	if (value){ // SET BIT
    1168:	b162      	cbz	r2, 1184 <grid_d51_bitmap_write_bit+0x24>

		if ((buffer[index] & (1<<bit)) == 0){
    116a:	5d02      	ldrb	r2, [r0, r4]
    116c:	fa42 f501 	asr.w	r5, r2, r1
    1170:	f015 0f01 	tst.w	r5, #1
    1174:	d10d      	bne.n	1192 <grid_d51_bitmap_write_bit+0x32>
			
			buffer[index] |= (1<<bit);
    1176:	2501      	movs	r5, #1
    1178:	fa05 f101 	lsl.w	r1, r5, r1
    117c:	4311      	orrs	r1, r2
    117e:	5501      	strb	r1, [r0, r4]
			*changed = 1;
    1180:	701d      	strb	r5, [r3, #0]
    1182:	e006      	b.n	1192 <grid_d51_bitmap_write_bit+0x32>
		}
		
		
		}else{ // CLEAR BIT
		
		if ((buffer[index] & (1<<bit)) == (1<<bit)){
    1184:	5d05      	ldrb	r5, [r0, r4]
    1186:	2201      	movs	r2, #1
    1188:	fa02 f101 	lsl.w	r1, r2, r1
    118c:	ea31 0205 	bics.w	r2, r1, r5
    1190:	d001      	beq.n	1196 <grid_d51_bitmap_write_bit+0x36>
		
		
	}
	
	
}
    1192:	bc30      	pop	{r4, r5}
    1194:	4770      	bx	lr
			buffer[index] &= ~(1<<bit);
    1196:	ea25 0101 	bic.w	r1, r5, r1
    119a:	5501      	strb	r1, [r0, r4]
			*changed = 1;
    119c:	2201      	movs	r2, #1
    119e:	701a      	strb	r2, [r3, #0]
}
    11a0:	e7f7      	b.n	1192 <grid_d51_bitmap_write_bit+0x32>
	...

000011a4 <grid_d51_verify_user_row>:
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
	#endif
		
}

void grid_d51_verify_user_row(){
    11a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11a8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	
	
	uint8_t user_area_buffer[512];
	uint8_t user_area_changed_flag = 0;
    11ac:	2500      	movs	r5, #0
    11ae:	f88d 5007 	strb.w	r5, [sp, #7]
		
		
	_user_area_read(GRID_D51_USER_ROW_BASE, 0, user_area_buffer, 512);
    11b2:	f8df 8194 	ldr.w	r8, [pc, #404]	; 1348 <grid_d51_verify_user_row+0x1a4>
    11b6:	f44f 7300 	mov.w	r3, #512	; 0x200
    11ba:	aa02      	add	r2, sp, #8
    11bc:	4629      	mov	r1, r5
    11be:	4640      	mov	r0, r8
    11c0:	4f55      	ldr	r7, [pc, #340]	; (1318 <grid_d51_verify_user_row+0x174>)
    11c2:	47b8      	blx	r7
		


	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Reading User Row");
    11c4:	4e55      	ldr	r6, [pc, #340]	; (131c <grid_d51_verify_user_row+0x178>)
    11c6:	4956      	ldr	r1, [pc, #344]	; (1320 <grid_d51_verify_user_row+0x17c>)
    11c8:	4630      	mov	r0, r6
    11ca:	4c56      	ldr	r4, [pc, #344]	; (1324 <grid_d51_verify_user_row+0x180>)
    11cc:	47a0      	blx	r4
	_user_area_read(GRID_D51_USER_ROW_BASE, 0, user_area_buffer, 512);
    11ce:	f44f 7300 	mov.w	r3, #512	; 0x200
    11d2:	aa02      	add	r2, sp, #8
    11d4:	4629      	mov	r1, r5
    11d6:	4640      	mov	r0, r8
    11d8:	47b8      	blx	r7


	//BOD33 characteristics datasheet page 1796

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Verifying User Row");
    11da:	4953      	ldr	r1, [pc, #332]	; (1328 <grid_d51_verify_user_row+0x184>)
    11dc:	4630      	mov	r0, r6
    11de:	47a0      	blx	r4
		
	// BOD33 Disable Bit => Set 0
	grid_d51_bitmap_write_bit(user_area_buffer, 0, 0, &user_area_changed_flag);
    11e0:	f10d 0307 	add.w	r3, sp, #7
    11e4:	462a      	mov	r2, r5
    11e6:	4629      	mov	r1, r5
    11e8:	a802      	add	r0, sp, #8
    11ea:	4c50      	ldr	r4, [pc, #320]	; (132c <grid_d51_verify_user_row+0x188>)
    11ec:	47a0      	blx	r4
		
	// BOD33 Level => Set 225 = b11100001
	grid_d51_bitmap_write_bit(user_area_buffer, 1, 1, &user_area_changed_flag);
    11ee:	f10d 0307 	add.w	r3, sp, #7
    11f2:	2201      	movs	r2, #1
    11f4:	4611      	mov	r1, r2
    11f6:	a802      	add	r0, sp, #8
    11f8:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 2, 0, &user_area_changed_flag);
    11fa:	f10d 0307 	add.w	r3, sp, #7
    11fe:	462a      	mov	r2, r5
    1200:	2102      	movs	r1, #2
    1202:	a802      	add	r0, sp, #8
    1204:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 3, 0, &user_area_changed_flag);
    1206:	f10d 0307 	add.w	r3, sp, #7
    120a:	462a      	mov	r2, r5
    120c:	2103      	movs	r1, #3
    120e:	a802      	add	r0, sp, #8
    1210:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 4, 0, &user_area_changed_flag);
    1212:	f10d 0307 	add.w	r3, sp, #7
    1216:	462a      	mov	r2, r5
    1218:	2104      	movs	r1, #4
    121a:	a802      	add	r0, sp, #8
    121c:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 5, 0, &user_area_changed_flag);
    121e:	f10d 0307 	add.w	r3, sp, #7
    1222:	462a      	mov	r2, r5
    1224:	2105      	movs	r1, #5
    1226:	a802      	add	r0, sp, #8
    1228:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 6, 1, &user_area_changed_flag);
    122a:	f10d 0307 	add.w	r3, sp, #7
    122e:	2201      	movs	r2, #1
    1230:	2106      	movs	r1, #6
    1232:	a802      	add	r0, sp, #8
    1234:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 7, 1, &user_area_changed_flag);
    1236:	f10d 0307 	add.w	r3, sp, #7
    123a:	2201      	movs	r2, #1
    123c:	2107      	movs	r1, #7
    123e:	a802      	add	r0, sp, #8
    1240:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 8, 1, &user_area_changed_flag);
    1242:	f10d 0307 	add.w	r3, sp, #7
    1246:	2201      	movs	r2, #1
    1248:	2108      	movs	r1, #8
    124a:	eb0d 0001 	add.w	r0, sp, r1
    124e:	47a0      	blx	r4
		
	// BOD33 Action => Reset = b01
	grid_d51_bitmap_write_bit(user_area_buffer, 9, 1, &user_area_changed_flag);
    1250:	f10d 0307 	add.w	r3, sp, #7
    1254:	2201      	movs	r2, #1
    1256:	2109      	movs	r1, #9
    1258:	a802      	add	r0, sp, #8
    125a:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 10, 0, &user_area_changed_flag);
    125c:	f10d 0307 	add.w	r3, sp, #7
    1260:	462a      	mov	r2, r5
    1262:	210a      	movs	r1, #10
    1264:	a802      	add	r0, sp, #8
    1266:	47a0      	blx	r4

	// BOD33 Hysteresis => Set 15 = b1111
	grid_d51_bitmap_write_bit(user_area_buffer, 11, 1, &user_area_changed_flag);
    1268:	f10d 0307 	add.w	r3, sp, #7
    126c:	2201      	movs	r2, #1
    126e:	210b      	movs	r1, #11
    1270:	a802      	add	r0, sp, #8
    1272:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 12, 1, &user_area_changed_flag);
    1274:	f10d 0307 	add.w	r3, sp, #7
    1278:	2201      	movs	r2, #1
    127a:	210c      	movs	r1, #12
    127c:	a802      	add	r0, sp, #8
    127e:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 13, 1, &user_area_changed_flag);
    1280:	f10d 0307 	add.w	r3, sp, #7
    1284:	2201      	movs	r2, #1
    1286:	210d      	movs	r1, #13
    1288:	a802      	add	r0, sp, #8
    128a:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 14, 1, &user_area_changed_flag);
    128c:	f10d 0307 	add.w	r3, sp, #7
    1290:	2201      	movs	r2, #1
    1292:	210e      	movs	r1, #14
    1294:	a802      	add	r0, sp, #8
    1296:	47a0      	blx	r4
		
	// BOOTPROTECT 16kB
	grid_d51_bitmap_write_bit(user_area_buffer, 26, 1, &user_area_changed_flag);
    1298:	f10d 0307 	add.w	r3, sp, #7
    129c:	2201      	movs	r2, #1
    129e:	211a      	movs	r1, #26
    12a0:	a802      	add	r0, sp, #8
    12a2:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 27, 0, &user_area_changed_flag);
    12a4:	f10d 0307 	add.w	r3, sp, #7
    12a8:	462a      	mov	r2, r5
    12aa:	211b      	movs	r1, #27
    12ac:	a802      	add	r0, sp, #8
    12ae:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 28, 1, &user_area_changed_flag);
    12b0:	f10d 0307 	add.w	r3, sp, #7
    12b4:	2201      	movs	r2, #1
    12b6:	211c      	movs	r1, #28
    12b8:	a802      	add	r0, sp, #8
    12ba:	47a0      	blx	r4
	grid_d51_bitmap_write_bit(user_area_buffer, 29, 1, &user_area_changed_flag);
    12bc:	f10d 0307 	add.w	r3, sp, #7
    12c0:	2201      	movs	r2, #1
    12c2:	211d      	movs	r1, #29
    12c4:	a802      	add	r0, sp, #8
    12c6:	47a0      	blx	r4
		
		
		
	if (user_area_changed_flag == 1){
    12c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12cc:	2b01      	cmp	r3, #1
    12ce:	d007      	beq.n	12e0 <grid_d51_verify_user_row+0x13c>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "System Reset");
		NVIC_SystemReset();
			
	}else{
			
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Unchanged User Row");
    12d0:	4917      	ldr	r1, [pc, #92]	; (1330 <grid_d51_verify_user_row+0x18c>)
    12d2:	4812      	ldr	r0, [pc, #72]	; (131c <grid_d51_verify_user_row+0x178>)
    12d4:	4b13      	ldr	r3, [pc, #76]	; (1324 <grid_d51_verify_user_row+0x180>)
    12d6:	4798      	blx	r3
	}
	
    12d8:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    12dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Updating User Row");
    12e0:	4635      	mov	r5, r6
    12e2:	4914      	ldr	r1, [pc, #80]	; (1334 <grid_d51_verify_user_row+0x190>)
    12e4:	4630      	mov	r0, r6
    12e6:	4c0f      	ldr	r4, [pc, #60]	; (1324 <grid_d51_verify_user_row+0x180>)
    12e8:	47a0      	blx	r4
		_user_area_write(GRID_D51_USER_ROW_BASE, 0, user_area_buffer, 512);
    12ea:	f44f 7300 	mov.w	r3, #512	; 0x200
    12ee:	aa02      	add	r2, sp, #8
    12f0:	2100      	movs	r1, #0
    12f2:	4640      	mov	r0, r8
    12f4:	4e10      	ldr	r6, [pc, #64]	; (1338 <grid_d51_verify_user_row+0x194>)
    12f6:	47b0      	blx	r6
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "System Reset");
    12f8:	4910      	ldr	r1, [pc, #64]	; (133c <grid_d51_verify_user_row+0x198>)
    12fa:	4628      	mov	r0, r5
    12fc:	47a0      	blx	r4
  __ASM volatile ("dsb 0xF":::"memory");
    12fe:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1302:	490f      	ldr	r1, [pc, #60]	; (1340 <grid_d51_verify_user_row+0x19c>)
    1304:	68ca      	ldr	r2, [r1, #12]
    1306:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    130a:	4b0e      	ldr	r3, [pc, #56]	; (1344 <grid_d51_verify_user_row+0x1a0>)
    130c:	4313      	orrs	r3, r2
    130e:	60cb      	str	r3, [r1, #12]
    1310:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1314:	bf00      	nop
    1316:	e7fd      	b.n	1314 <grid_d51_verify_user_row+0x170>
    1318:	00006cb5 	.word	0x00006cb5
    131c:	0000dd68 	.word	0x0000dd68
    1320:	0000dd54 	.word	0x0000dd54
    1324:	0000ca41 	.word	0x0000ca41
    1328:	0000dd8c 	.word	0x0000dd8c
    132c:	00001161 	.word	0x00001161
    1330:	0000ddc4 	.word	0x0000ddc4
    1334:	0000dda0 	.word	0x0000dda0
    1338:	00006d4d 	.word	0x00006d4d
    133c:	0000ddb4 	.word	0x0000ddb4
    1340:	e000ed00 	.word	0xe000ed00
    1344:	05fa0004 	.word	0x05fa0004
    1348:	00804000 	.word	0x00804000

0000134c <grid_d51_init>:
void grid_d51_init(){
    134c:	b538      	push	{r3, r4, r5, lr}
	grid_d51_verify_user_row();
    134e:	4b05      	ldr	r3, [pc, #20]	; (1364 <grid_d51_init+0x18>)
    1350:	4798      	blx	r3
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    1352:	4d05      	ldr	r5, [pc, #20]	; (1368 <grid_d51_init+0x1c>)
    1354:	4905      	ldr	r1, [pc, #20]	; (136c <grid_d51_init+0x20>)
    1356:	4628      	mov	r0, r5
    1358:	4c05      	ldr	r4, [pc, #20]	; (1370 <grid_d51_init+0x24>)
    135a:	47a0      	blx	r4
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    135c:	4905      	ldr	r1, [pc, #20]	; (1374 <grid_d51_init+0x28>)
    135e:	4628      	mov	r0, r5
    1360:	47a0      	blx	r4
    1362:	bd38      	pop	{r3, r4, r5, pc}
    1364:	000011a5 	.word	0x000011a5
    1368:	0000dde8 	.word	0x0000dde8
    136c:	0000ddd8 	.word	0x0000ddd8
    1370:	0000ca41 	.word	0x0000ca41
    1374:	0000de10 	.word	0x0000de10

00001378 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1378:	b538      	push	{r3, r4, r5, lr}
    137a:	4604      	mov	r4, r0
    137c:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    137e:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1380:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    1382:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    1384:	2300      	movs	r3, #0
    1386:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1388:	0048      	lsls	r0, r1, #1
    138a:	4b09      	ldr	r3, [pc, #36]	; (13b0 <grid_ain_channel_init+0x38>)
    138c:	4798      	blx	r3
    138e:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1390:	b14d      	cbz	r5, 13a6 <grid_ain_channel_init+0x2e>
    1392:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    1394:	4619      	mov	r1, r3
    1396:	6822      	ldr	r2, [r4, #0]
    1398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    139c:	3301      	adds	r3, #1
    139e:	b2db      	uxtb	r3, r3
    13a0:	7922      	ldrb	r2, [r4, #4]
    13a2:	429a      	cmp	r2, r3
    13a4:	d8f7      	bhi.n	1396 <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    13a6:	2000      	movs	r0, #0
    13a8:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    13aa:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    13ac:	bd38      	pop	{r3, r4, r5, pc}
    13ae:	bf00      	nop
    13b0:	0000c8b1 	.word	0x0000c8b1

000013b4 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    13b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13b8:	4605      	mov	r5, r0
    13ba:	4689      	mov	r9, r1
    13bc:	4617      	mov	r7, r2
    13be:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    13c0:	0100      	lsls	r0, r0, #4
    13c2:	4b0c      	ldr	r3, [pc, #48]	; (13f4 <grid_ain_init+0x40>)
    13c4:	4798      	blx	r3
    13c6:	4b0c      	ldr	r3, [pc, #48]	; (13f8 <grid_ain_init+0x44>)
    13c8:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    13ca:	b185      	cbz	r5, 13ee <grid_ain_init+0x3a>
    13cc:	3d01      	subs	r5, #1
    13ce:	b2ed      	uxtb	r5, r5
    13d0:	3501      	adds	r5, #1
    13d2:	012d      	lsls	r5, r5, #4
    13d4:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    13d6:	469a      	mov	sl, r3
    13d8:	4e08      	ldr	r6, [pc, #32]	; (13fc <grid_ain_init+0x48>)
    13da:	4643      	mov	r3, r8
    13dc:	463a      	mov	r2, r7
    13de:	4649      	mov	r1, r9
    13e0:	f8da 0000 	ldr.w	r0, [sl]
    13e4:	4420      	add	r0, r4
    13e6:	47b0      	blx	r6
    13e8:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    13ea:	42ac      	cmp	r4, r5
    13ec:	d1f5      	bne.n	13da <grid_ain_init+0x26>
	}

	return 0;
}
    13ee:	2000      	movs	r0, #0
    13f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f4:	0000c8b1 	.word	0x0000c8b1
    13f8:	20002250 	.word	0x20002250
    13fc:	00001379 	.word	0x00001379

00001400 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    1400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    1404:	0100      	lsls	r0, r0, #4
    1406:	4b3c      	ldr	r3, [pc, #240]	; (14f8 <grid_ain_add_sample+0xf8>)
    1408:	f8d3 a000 	ldr.w	sl, [r3]
    140c:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1410:	f89c 6004 	ldrb.w	r6, [ip, #4]
    1414:	2e00      	cmp	r6, #0
    1416:	d05b      	beq.n	14d0 <grid_ain_add_sample+0xd0>
    1418:	f85a 5000 	ldr.w	r5, [sl, r0]
    141c:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    141e:	2200      	movs	r2, #0
    1420:	4690      	mov	r8, r2
    1422:	4691      	mov	r9, r2
    1424:	4696      	mov	lr, r2
    1426:	f64f 77ff 	movw	r7, #65535	; 0xffff
    142a:	4614      	mov	r4, r2
    142c:	fa5f fb82 	uxtb.w	fp, r2
    1430:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    1434:	441c      	add	r4, r3
		
		if (current > maximum){
    1436:	4573      	cmp	r3, lr
    1438:	bf84      	itt	hi
    143a:	46d8      	movhi	r8, fp
			maximum = current;
    143c:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    143e:	42bb      	cmp	r3, r7
    1440:	bf3c      	itt	cc
    1442:	46d9      	movcc	r9, fp
			minimum = current;
    1444:	461f      	movcc	r7, r3
    1446:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1448:	b2d3      	uxtb	r3, r2
    144a:	42b3      	cmp	r3, r6
    144c:	d3ee      	bcc.n	142c <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    144e:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    1452:	b2b6      	uxth	r6, r6
    1454:	428e      	cmp	r6, r1
    1456:	d23f      	bcs.n	14d8 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1458:	f85a 3000 	ldr.w	r3, [sl, r0]
    145c:	440c      	add	r4, r1
    145e:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    1462:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    1464:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1468:	f89c 3004 	ldrb.w	r3, [ip, #4]
    146c:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1470:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1474:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1478:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    147a:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    147e:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1480:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    1482:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    1484:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1488:	b29b      	uxth	r3, r3
    148a:	408b      	lsls	r3, r1
    148c:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    148e:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    1492:	1b92      	subs	r2, r2, r6
    1494:	2a00      	cmp	r2, #0
    1496:	bfb8      	it	lt
    1498:	4252      	neglt	r2, r2
    149a:	2601      	movs	r6, #1
    149c:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    14a0:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    14a4:	42be      	cmp	r6, r7
    14a6:	d020      	beq.n	14ea <grid_ain_add_sample+0xea>
    14a8:	4282      	cmp	r2, r0
    14aa:	dc08      	bgt.n	14be <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    14ac:	2201      	movs	r2, #1
    14ae:	fa02 f505 	lsl.w	r5, r2, r5
    14b2:	fa02 f101 	lsl.w	r1, r2, r1
    14b6:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    14b8:	428f      	cmp	r7, r1
    14ba:	d000      	beq.n	14be <grid_ain_add_sample+0xbe>
    14bc:	b9c7      	cbnz	r7, 14f0 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    14be:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    14c2:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    14c6:	2001      	movs	r0, #1
    14c8:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    14cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    14d0:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    14d2:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    14d4:	2400      	movs	r4, #0
    14d6:	e7ba      	b.n	144e <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    14d8:	f85a 3000 	ldr.w	r3, [sl, r0]
    14dc:	440c      	add	r4, r1
    14de:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    14e2:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    14e4:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    14e8:	e7be      	b.n	1468 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    14ea:	2000      	movs	r0, #0
    14ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14f0:	2000      	movs	r0, #0
	}
	
}
    14f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14f6:	bf00      	nop
    14f8:	20002250 	.word	0x20002250

000014fc <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    14fc:	4b02      	ldr	r3, [pc, #8]	; (1508 <grid_ain_get_changed+0xc>)
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    1504:	7b00      	ldrb	r0, [r0, #12]
    1506:	4770      	bx	lr
    1508:	20002250 	.word	0x20002250

0000150c <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    150c:	4b09      	ldr	r3, [pc, #36]	; (1534 <grid_ain_get_average+0x28>)
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    1514:	2300      	movs	r3, #0
    1516:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1518:	1fcb      	subs	r3, r1, #7
    151a:	b2db      	uxtb	r3, r3
    151c:	2b07      	cmp	r3, #7
    151e:	d806      	bhi.n	152e <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1520:	8903      	ldrh	r3, [r0, #8]
    1522:	7940      	ldrb	r0, [r0, #5]
    1524:	1a40      	subs	r0, r0, r1
    1526:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    152a:	b280      	uxth	r0, r0
    152c:	4770      	bx	lr
    152e:	2000      	movs	r0, #0
    1530:	e7fb      	b.n	152a <grid_ain_get_average+0x1e>
    1532:	bf00      	nop
    1534:	20002250 	.word	0x20002250

00001538 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1538:	b538      	push	{r3, r4, r5, lr}
    153a:	4604      	mov	r4, r0
    153c:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    153e:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1540:	2300      	movs	r3, #0
    1542:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    1544:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    1546:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1548:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    154a:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    154c:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    154e:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1550:	4608      	mov	r0, r1
    1552:	4b08      	ldr	r3, [pc, #32]	; (1574 <grid_buffer_init+0x3c>)
    1554:	4798      	blx	r3
    1556:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1558:	b900      	cbnz	r0, 155c <grid_buffer_init+0x24>
    155a:	e7fe      	b.n	155a <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    155c:	b145      	cbz	r5, 1570 <grid_buffer_init+0x38>
    155e:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1560:	4619      	mov	r1, r3
    1562:	6862      	ldr	r2, [r4, #4]
    1564:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1566:	3301      	adds	r3, #1
    1568:	b29b      	uxth	r3, r3
    156a:	8822      	ldrh	r2, [r4, #0]
    156c:	429a      	cmp	r2, r3
    156e:	d8f8      	bhi.n	1562 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1570:	2001      	movs	r0, #1
    1572:	bd38      	pop	{r3, r4, r5, pc}
    1574:	0000c8b1 	.word	0x0000c8b1

00001578 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1578:	8903      	ldrh	r3, [r0, #8]
    157a:	8a02      	ldrh	r2, [r0, #16]
    157c:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    157e:	bf8f      	iteee	hi
    1580:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1582:	8800      	ldrhls	r0, [r0, #0]
    1584:	18c0      	addls	r0, r0, r3
    1586:	1a80      	subls	r0, r0, r2
    1588:	b280      	uxth	r0, r0

	return space;

	
	
}
    158a:	4770      	bx	lr

0000158c <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    158c:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    158e:	8903      	ldrh	r3, [r0, #8]
    1590:	8a02      	ldrh	r2, [r0, #16]
    1592:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    1594:	bf9c      	itt	ls
    1596:	8804      	ldrhls	r4, [r0, #0]
    1598:	191b      	addls	r3, r3, r4
    159a:	1a9b      	subs	r3, r3, r2
    159c:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    159e:	428b      	cmp	r3, r1
    15a0:	d90a      	bls.n	15b8 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    15a2:	440a      	add	r2, r1
    15a4:	8804      	ldrh	r4, [r0, #0]
    15a6:	fb92 f3f4 	sdiv	r3, r2, r4
    15aa:	fb04 2213 	mls	r2, r4, r3, r2
    15ae:	8242      	strh	r2, [r0, #18]
		
		return length;
    15b0:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    15b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    15b6:	4770      	bx	lr
		return 0; // failed
    15b8:	2000      	movs	r0, #0
    15ba:	e7fa      	b.n	15b2 <grid_buffer_write_init+0x26>

000015bc <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    15bc:	8a83      	ldrh	r3, [r0, #20]
    15be:	6842      	ldr	r2, [r0, #4]
    15c0:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    15c2:	8a83      	ldrh	r3, [r0, #20]
    15c4:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    15c6:	b29b      	uxth	r3, r3
    15c8:	8801      	ldrh	r1, [r0, #0]
    15ca:	fbb3 f2f1 	udiv	r2, r3, r1
    15ce:	fb01 3312 	mls	r3, r1, r2, r3
    15d2:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    15d4:	2001      	movs	r0, #1
    15d6:	4770      	bx	lr

000015d8 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    15d8:	8a83      	ldrh	r3, [r0, #20]
    15da:	8a42      	ldrh	r2, [r0, #18]
    15dc:	429a      	cmp	r2, r3
    15de:	d000      	beq.n	15e2 <grid_buffer_write_acknowledge+0xa>
    15e0:	e7fe      	b.n	15e0 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    15e2:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    15e4:	2001      	movs	r0, #1
    15e6:	4770      	bx	lr

000015e8 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    15e8:	8983      	ldrh	r3, [r0, #12]
    15ea:	8942      	ldrh	r2, [r0, #10]
    15ec:	429a      	cmp	r2, r3
    15ee:	d000      	beq.n	15f2 <grid_buffer_read_size+0xa>
    15f0:	e7fe      	b.n	15f0 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    15f2:	8902      	ldrh	r2, [r0, #8]
    15f4:	429a      	cmp	r2, r3
    15f6:	d000      	beq.n	15fa <grid_buffer_read_size+0x12>
    15f8:	e7fe      	b.n	15f8 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    15fa:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    15fc:	8a05      	ldrh	r5, [r0, #16]
    15fe:	42ab      	cmp	r3, r5
    1600:	d025      	beq.n	164e <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1602:	8804      	ldrh	r4, [r0, #0]
    1604:	b1fc      	cbz	r4, 1646 <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1606:	4626      	mov	r6, r4
    1608:	fb93 f2f4 	sdiv	r2, r3, r4
    160c:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    1610:	b291      	uxth	r1, r2
    1612:	428d      	cmp	r5, r1
    1614:	d01d      	beq.n	1652 <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    1616:	6840      	ldr	r0, [r0, #4]
    1618:	5c42      	ldrb	r2, [r0, r1]
    161a:	2a0a      	cmp	r2, #10
    161c:	d114      	bne.n	1648 <grid_buffer_read_size+0x60>
    161e:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1620:	3301      	adds	r3, #1
    1622:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    1624:	bcf0      	pop	{r4, r5, r6, r7}
    1626:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1628:	fb92 f1f6 	sdiv	r1, r2, r6
    162c:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1630:	b28f      	uxth	r7, r1
    1632:	42bd      	cmp	r5, r7
    1634:	d00f      	beq.n	1656 <grid_buffer_read_size+0x6e>
    1636:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1638:	5dc1      	ldrb	r1, [r0, r7]
    163a:	290a      	cmp	r1, #10
    163c:	d0f0      	beq.n	1620 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    163e:	3301      	adds	r3, #1
    1640:	b29b      	uxth	r3, r3
    1642:	42a3      	cmp	r3, r4
    1644:	d1f0      	bne.n	1628 <grid_buffer_read_size+0x40>
    1646:	e7fe      	b.n	1646 <grid_buffer_read_size+0x5e>
    1648:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    164a:	2300      	movs	r3, #0
    164c:	e7f7      	b.n	163e <grid_buffer_read_size+0x56>
		return 0;
    164e:	2000      	movs	r0, #0
    1650:	e7e8      	b.n	1624 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    1652:	2000      	movs	r0, #0
    1654:	e7e6      	b.n	1624 <grid_buffer_read_size+0x3c>
    1656:	2000      	movs	r0, #0
    1658:	e7e4      	b.n	1624 <grid_buffer_read_size+0x3c>

0000165a <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    165a:	8982      	ldrh	r2, [r0, #12]
    165c:	8943      	ldrh	r3, [r0, #10]
    165e:	4293      	cmp	r3, r2
    1660:	d000      	beq.n	1664 <grid_buffer_read_init+0xa>
    1662:	e7fe      	b.n	1662 <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    1664:	8903      	ldrh	r3, [r0, #8]
    1666:	4293      	cmp	r3, r2
    1668:	d000      	beq.n	166c <grid_buffer_read_init+0x12>
    166a:	e7fe      	b.n	166a <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    166c:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    166e:	8a05      	ldrh	r5, [r0, #16]
    1670:	42aa      	cmp	r2, r5
    1672:	d031      	beq.n	16d8 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1674:	8804      	ldrh	r4, [r0, #0]
    1676:	b35c      	cbz	r4, 16d0 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1678:	4626      	mov	r6, r4
    167a:	fb92 f3f4 	sdiv	r3, r2, r4
    167e:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    1682:	b299      	uxth	r1, r3
    1684:	428d      	cmp	r5, r1
    1686:	d029      	beq.n	16dc <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1688:	6847      	ldr	r7, [r0, #4]
    168a:	460b      	mov	r3, r1
    168c:	5c79      	ldrb	r1, [r7, r1]
    168e:	290a      	cmp	r1, #10
    1690:	d11f      	bne.n	16d2 <grid_buffer_read_init+0x78>
    1692:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    1694:	3301      	adds	r3, #1
    1696:	fb93 f2f4 	sdiv	r2, r3, r4
    169a:	fb04 3312 	mls	r3, r4, r2, r3
    169e:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    16a0:	1c4b      	adds	r3, r1, #1
    16a2:	b29b      	uxth	r3, r3
    16a4:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    16a6:	4618      	mov	r0, r3
    16a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    16aa:	fb92 f3f6 	sdiv	r3, r2, r6
    16ae:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    16b2:	fa1f fe83 	uxth.w	lr, r3
    16b6:	4575      	cmp	r5, lr
    16b8:	d012      	beq.n	16e0 <grid_buffer_read_init+0x86>
    16ba:	4673      	mov	r3, lr
    16bc:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    16be:	f817 e00e 	ldrb.w	lr, [r7, lr]
    16c2:	f1be 0f0a 	cmp.w	lr, #10
    16c6:	d0e5      	beq.n	1694 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    16c8:	3101      	adds	r1, #1
    16ca:	b289      	uxth	r1, r1
    16cc:	42a1      	cmp	r1, r4
    16ce:	d1ec      	bne.n	16aa <grid_buffer_read_init+0x50>
    16d0:	e7fe      	b.n	16d0 <grid_buffer_read_init+0x76>
    16d2:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    16d4:	2100      	movs	r1, #0
    16d6:	e7f7      	b.n	16c8 <grid_buffer_read_init+0x6e>
		return 0;
    16d8:	2300      	movs	r3, #0
    16da:	e7e4      	b.n	16a6 <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    16dc:	2300      	movs	r3, #0
    16de:	e7e2      	b.n	16a6 <grid_buffer_read_init+0x4c>
    16e0:	2300      	movs	r3, #0
    16e2:	e7e0      	b.n	16a6 <grid_buffer_read_init+0x4c>

000016e4 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    16e4:	8983      	ldrh	r3, [r0, #12]
    16e6:	8941      	ldrh	r1, [r0, #10]
    16e8:	4299      	cmp	r1, r3
    16ea:	d00e      	beq.n	170a <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    16ec:	b410      	push	{r4}
    16ee:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    16f0:	6841      	ldr	r1, [r0, #4]
    16f2:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    16f4:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    16f6:	b29b      	uxth	r3, r3
    16f8:	8814      	ldrh	r4, [r2, #0]
    16fa:	fbb3 f1f4 	udiv	r1, r3, r4
    16fe:	fb04 3311 	mls	r3, r4, r1, r3
    1702:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    1704:	f85d 4b04 	ldr.w	r4, [sp], #4
    1708:	4770      	bx	lr
    170a:	e7fe      	b.n	170a <grid_buffer_read_character+0x26>

0000170c <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    170c:	8983      	ldrh	r3, [r0, #12]
    170e:	8942      	ldrh	r2, [r0, #10]
    1710:	429a      	cmp	r2, r3
    1712:	d000      	beq.n	1716 <grid_buffer_read_acknowledge+0xa>
    1714:	e7fe      	b.n	1714 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    1716:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1718:	2001      	movs	r0, #1
    171a:	4770      	bx	lr

0000171c <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma, struct grid_ui_report* p_report){
    171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1720:	4604      	mov	r4, r0
    1722:	4690      	mov	r8, r2
    1724:	461f      	mov	r7, r3
    1726:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    172a:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    172e:	4e3b      	ldr	r6, [pc, #236]	; (181c <grid_port_init+0x100>)
    1730:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    1732:	4641      	mov	r1, r8
    1734:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
    1738:	47b0      	blx	r6
	
	por->ping_report = p_report;
    173a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    173c:	6063      	str	r3, [r4, #4]
	
	por->cooldown = 0;
    173e:	2300      	movs	r3, #0
    1740:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1742:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1746:	73a2      	strb	r2, [r4, #14]
	
	por->direction = dir;
    1748:	f89d 201c 	ldrb.w	r2, [sp, #28]
    174c:	7362      	strb	r2, [r4, #13]
	
	por->usart	= usart;
    174e:	60a7      	str	r7, [r4, #8]
	por->type		= type;
    1750:	7325      	strb	r5, [r4, #12]
	
	por->tx_double_buffer_status	= 0;
    1752:	8223      	strh	r3, [r4, #16]
	por->rx_double_buffer_status	= 0;
    1754:	6263      	str	r3, [r4, #36]	; 0x24
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    1756:	4619      	mov	r1, r3
    1758:	18e2      	adds	r2, r4, r3
    175a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    175e:	3301      	adds	r3, #1
    1760:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1764:	d1f8      	bne.n	1758 <grid_port_init+0x3c>
    1766:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    1768:	4619      	mov	r1, r3
    176a:	18e2      	adds	r2, r4, r3
    176c:	f882 1800 	strb.w	r1, [r2, #2048]	; 0x800
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1770:	3301      	adds	r3, #1
    1772:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1776:	d1f8      	bne.n	176a <grid_port_init+0x4e>
	}
	
	por->partner_fi = 0;
    1778:	2300      	movs	r3, #0
    177a:	f241 0204 	movw	r2, #4100	; 0x1004
    177e:	54a3      	strb	r3, [r4, r2]
	
	por->partner_hwcfg = 0;
    1780:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    1784:	6013      	str	r3, [r2, #0]
	por->partner_status = 1;
    1786:	2201      	movs	r2, #1
    1788:	f241 0307 	movw	r3, #4103	; 0x1007
    178c:	54e2      	strb	r2, [r4, r3]
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    178e:	4295      	cmp	r5, r2
    1790:	d005      	beq.n	179e <grid_port_init+0x82>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1792:	2201      	movs	r2, #1
    1794:	f241 0307 	movw	r3, #4103	; 0x1007
    1798:	54e2      	strb	r2, [r4, r3]
    179a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    179e:	2300      	movs	r3, #0
    17a0:	f241 0207 	movw	r2, #4103	; 0x1007
    17a4:	54a3      	strb	r3, [r4, r2]
		por->partner_fi = 0;
    17a6:	f241 0204 	movw	r2, #4100	; 0x1004
    17aa:	54a3      	strb	r3, [r4, r2]
		if (por->direction == GRID_MSG_NORTH){
    17ac:	7b63      	ldrb	r3, [r4, #13]
    17ae:	b2db      	uxtb	r3, r3
    17b0:	2b11      	cmp	r3, #17
    17b2:	d015      	beq.n	17e0 <grid_port_init+0xc4>
		else if (por->direction == GRID_MSG_EAST){
    17b4:	7b63      	ldrb	r3, [r4, #13]
    17b6:	b2db      	uxtb	r3, r3
    17b8:	2b12      	cmp	r3, #18
    17ba:	d01b      	beq.n	17f4 <grid_port_init+0xd8>
		else if (por->direction == GRID_MSG_SOUTH){
    17bc:	7b63      	ldrb	r3, [r4, #13]
    17be:	b2db      	uxtb	r3, r3
    17c0:	2b13      	cmp	r3, #19
    17c2:	d021      	beq.n	1808 <grid_port_init+0xec>
		else if (por->direction == GRID_MSG_WEST){
    17c4:	7b63      	ldrb	r3, [r4, #13]
    17c6:	b2db      	uxtb	r3, r3
    17c8:	2b14      	cmp	r3, #20
    17ca:	d1e6      	bne.n	179a <grid_port_init+0x7e>
			por->dx = -1;
    17cc:	22ff      	movs	r2, #255	; 0xff
    17ce:	f241 0305 	movw	r3, #4101	; 0x1005
    17d2:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    17d4:	2200      	movs	r2, #0
    17d6:	f241 0306 	movw	r3, #4102	; 0x1006
    17da:	54e2      	strb	r2, [r4, r3]
    17dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    17e0:	2200      	movs	r2, #0
    17e2:	f241 0305 	movw	r3, #4101	; 0x1005
    17e6:	54e2      	strb	r2, [r4, r3]
			por->dy = 1;
    17e8:	2201      	movs	r2, #1
    17ea:	f241 0306 	movw	r3, #4102	; 0x1006
    17ee:	54e2      	strb	r2, [r4, r3]
    17f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    17f4:	2201      	movs	r2, #1
    17f6:	f241 0305 	movw	r3, #4101	; 0x1005
    17fa:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    17fc:	2200      	movs	r2, #0
    17fe:	f241 0306 	movw	r3, #4102	; 0x1006
    1802:	54e2      	strb	r2, [r4, r3]
    1804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    1808:	2200      	movs	r2, #0
    180a:	f241 0305 	movw	r3, #4101	; 0x1005
    180e:	54e2      	strb	r2, [r4, r3]
			por->dy = -1;
    1810:	22ff      	movs	r2, #255	; 0xff
    1812:	f241 0306 	movw	r3, #4102	; 0x1006
    1816:	54e2      	strb	r2, [r4, r3]
    1818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    181c:	00001539 	.word	0x00001539

00001820 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    1820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1824:	b084      	sub	sp, #16
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0, &mod->report_array[GRID_REPORT_INDEX_PING_NORTH]);
    1826:	4f30      	ldr	r7, [pc, #192]	; (18e8 <grid_port_init_all+0xc8>)
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	3310      	adds	r3, #16
    182c:	9303      	str	r3, [sp, #12]
    182e:	2500      	movs	r5, #0
    1830:	9502      	str	r5, [sp, #8]
    1832:	2311      	movs	r3, #17
    1834:	9301      	str	r3, [sp, #4]
    1836:	2401      	movs	r4, #1
    1838:	9400      	str	r4, [sp, #0]
    183a:	4b2c      	ldr	r3, [pc, #176]	; (18ec <grid_port_init_all+0xcc>)
    183c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1840:	4611      	mov	r1, r2
    1842:	482b      	ldr	r0, [pc, #172]	; (18f0 <grid_port_init_all+0xd0>)
    1844:	4e2b      	ldr	r6, [pc, #172]	; (18f4 <grid_port_init_all+0xd4>)
    1846:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1, &mod->report_array[GRID_REPORT_INDEX_PING_EAST]);
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	3320      	adds	r3, #32
    184c:	9303      	str	r3, [sp, #12]
    184e:	9402      	str	r4, [sp, #8]
    1850:	2312      	movs	r3, #18
    1852:	9301      	str	r3, [sp, #4]
    1854:	9400      	str	r4, [sp, #0]
    1856:	4b28      	ldr	r3, [pc, #160]	; (18f8 <grid_port_init_all+0xd8>)
    1858:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    185c:	4611      	mov	r1, r2
    185e:	4827      	ldr	r0, [pc, #156]	; (18fc <grid_port_init_all+0xdc>)
    1860:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2, &mod->report_array[GRID_REPORT_INDEX_PING_SOUTH]);
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	3330      	adds	r3, #48	; 0x30
    1866:	9303      	str	r3, [sp, #12]
    1868:	f04f 0802 	mov.w	r8, #2
    186c:	f8cd 8008 	str.w	r8, [sp, #8]
    1870:	2313      	movs	r3, #19
    1872:	9301      	str	r3, [sp, #4]
    1874:	9400      	str	r4, [sp, #0]
    1876:	4b22      	ldr	r3, [pc, #136]	; (1900 <grid_port_init_all+0xe0>)
    1878:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    187c:	4611      	mov	r1, r2
    187e:	4821      	ldr	r0, [pc, #132]	; (1904 <grid_port_init_all+0xe4>)
    1880:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3, &mod->report_array[GRID_REPORT_INDEX_PING_WEST]);
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	3340      	adds	r3, #64	; 0x40
    1886:	9303      	str	r3, [sp, #12]
    1888:	2703      	movs	r7, #3
    188a:	9702      	str	r7, [sp, #8]
    188c:	2314      	movs	r3, #20
    188e:	9301      	str	r3, [sp, #4]
    1890:	9400      	str	r4, [sp, #0]
    1892:	4b1d      	ldr	r3, [pc, #116]	; (1908 <grid_port_init_all+0xe8>)
    1894:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1898:	4611      	mov	r1, r2
    189a:	481c      	ldr	r0, [pc, #112]	; (190c <grid_port_init_all+0xec>)
    189c:	47b0      	blx	r6
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1, NULL);
    189e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1914 <grid_port_init_all+0xf4>
    18a2:	9503      	str	r5, [sp, #12]
    18a4:	f04f 0aff 	mov.w	sl, #255	; 0xff
    18a8:	f8cd a008 	str.w	sl, [sp, #8]
    18ac:	9501      	str	r5, [sp, #4]
    18ae:	9700      	str	r7, [sp, #0]
    18b0:	462b      	mov	r3, r5
    18b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    18b6:	4611      	mov	r1, r2
    18b8:	4648      	mov	r0, r9
    18ba:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1, NULL);	
    18bc:	4f14      	ldr	r7, [pc, #80]	; (1910 <grid_port_init_all+0xf0>)
    18be:	9503      	str	r5, [sp, #12]
    18c0:	f8cd a008 	str.w	sl, [sp, #8]
    18c4:	9501      	str	r5, [sp, #4]
    18c6:	f8cd 8000 	str.w	r8, [sp]
    18ca:	462b      	mov	r3, r5
    18cc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    18d0:	4611      	mov	r1, r2
    18d2:	4638      	mov	r0, r7
    18d4:	47b0      	blx	r6
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    18d6:	f241 0307 	movw	r3, #4103	; 0x1007
    18da:	f809 4003 	strb.w	r4, [r9, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    18de:	54fc      	strb	r4, [r7, r3]
	
	
}
    18e0:	b004      	add	sp, #16
    18e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    18e6:	bf00      	nop
    18e8:	20003270 	.word	0x20003270
    18ec:	20001048 	.word	0x20001048
    18f0:	2000121c 	.word	0x2000121c
    18f4:	0000171d 	.word	0x0000171d
    18f8:	20000ff4 	.word	0x20000ff4
    18fc:	20006760 	.word	0x20006760
    1900:	2000114c 	.word	0x2000114c
    1904:	2000474c 	.word	0x2000474c
    1908:	200010fc 	.word	0x200010fc
    190c:	20003730 	.word	0x20003730
    1910:	20005758 	.word	0x20005758
    1914:	20002268 	.word	0x20002268

00001918 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    1918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    191c:	b093      	sub	sp, #76	; 0x4c
    191e:	af02      	add	r7, sp, #8
    1920:	4605      	mov	r5, r0
    1922:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    1924:	f600 73e8 	addw	r3, r0, #4072	; 0xfe8
    1928:	60bb      	str	r3, [r7, #8]
    192a:	4618      	mov	r0, r3
    192c:	4b5e      	ldr	r3, [pc, #376]	; (1aa8 <grid_port_process_inbound+0x190>)
    192e:	4798      	blx	r3
	
	if (!packet_size){
    1930:	b920      	cbnz	r0, 193c <grid_port_process_inbound+0x24>
    1932:	2000      	movs	r0, #0
		}	

		
	}
		
}
    1934:	3744      	adds	r7, #68	; 0x44
    1936:	46bd      	mov	sp, r7
    1938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    193c:	4680      	mov	r8, r0
	}else{
    193e:	f8c7 d004 	str.w	sp, [r7, #4]
		port_array_default[0] = &GRID_PORT_N;
    1942:	4b5a      	ldr	r3, [pc, #360]	; (1aac <grid_port_process_inbound+0x194>)
    1944:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    1946:	4b5a      	ldr	r3, [pc, #360]	; (1ab0 <grid_port_process_inbound+0x198>)
    1948:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    194a:	4b5a      	ldr	r3, [pc, #360]	; (1ab4 <grid_port_process_inbound+0x19c>)
    194c:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    194e:	4b5a      	ldr	r3, [pc, #360]	; (1ab8 <grid_port_process_inbound+0x1a0>)
    1950:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    1952:	4b5a      	ldr	r3, [pc, #360]	; (1abc <grid_port_process_inbound+0x1a4>)
    1954:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    1956:	4b5a      	ldr	r3, [pc, #360]	; (1ac0 <grid_port_process_inbound+0x1a8>)
    1958:	627b      	str	r3, [r7, #36]	; 0x24
    195a:	f107 0310 	add.w	r3, r7, #16
    195e:	f107 0028 	add.w	r0, r7, #40	; 0x28
		uint8_t j=0;
    1962:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    1964:	f241 0107 	movw	r1, #4103	; 0x1007
    1968:	e001      	b.n	196e <grid_port_process_inbound+0x56>
		for(uint8_t i=0; i<port_count; i++){
    196a:	4283      	cmp	r3, r0
    196c:	d00d      	beq.n	198a <grid_port_process_inbound+0x72>
			if (port_array_default[i]->partner_status != 0){
    196e:	f853 2b04 	ldr.w	r2, [r3], #4
    1972:	5c56      	ldrb	r6, [r2, r1]
    1974:	2e00      	cmp	r6, #0
    1976:	d0f8      	beq.n	196a <grid_port_process_inbound+0x52>
				port_array[j] = port_array_default[i];
    1978:	f107 0640 	add.w	r6, r7, #64	; 0x40
    197c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    1980:	f846 2c18 	str.w	r2, [r6, #-24]
				j++;
    1984:	3401      	adds	r4, #1
    1986:	b2e4      	uxtb	r4, r4
    1988:	e7ef      	b.n	196a <grid_port_process_inbound+0x52>
		for (uint8_t i=0; i<port_count; i++)
    198a:	2c00      	cmp	r4, #0
    198c:	d079      	beq.n	1a82 <grid_port_process_inbound+0x16a>
    198e:	f107 0928 	add.w	r9, r7, #40	; 0x28
    1992:	1e66      	subs	r6, r4, #1
    1994:	b2f6      	uxtb	r6, r6
    1996:	3601      	adds	r6, #1
    1998:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    199c:	f8df b140 	ldr.w	fp, [pc, #320]	; 1ae0 <grid_port_process_inbound+0x1c8>
    19a0:	f8c7 900c 	str.w	r9, [r7, #12]
    19a4:	e007      	b.n	19b6 <grid_port_process_inbound+0x9e>
    19a6:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    19aa:	47d8      	blx	fp
    19ac:	4580      	cmp	r8, r0
    19ae:	d80c      	bhi.n	19ca <grid_port_process_inbound+0xb2>
		for (uint8_t i=0; i<port_count; i++)
    19b0:	68fb      	ldr	r3, [r7, #12]
    19b2:	42b3      	cmp	r3, r6
    19b4:	d016      	beq.n	19e4 <grid_port_process_inbound+0xcc>
			if (port_array[i] != por || loopback){
    19b6:	68fb      	ldr	r3, [r7, #12]
    19b8:	f853 0b04 	ldr.w	r0, [r3], #4
    19bc:	60fb      	str	r3, [r7, #12]
    19be:	4285      	cmp	r5, r0
    19c0:	d1f1      	bne.n	19a6 <grid_port_process_inbound+0x8e>
    19c2:	f1ba 0f00 	cmp.w	sl, #0
    19c6:	d0f3      	beq.n	19b0 <grid_port_process_inbound+0x98>
    19c8:	e7ed      	b.n	19a6 <grid_port_process_inbound+0x8e>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    19ca:	23c8      	movs	r3, #200	; 0xc8
    19cc:	9301      	str	r3, [sp, #4]
    19ce:	2302      	movs	r3, #2
    19d0:	9300      	str	r3, [sp, #0]
    19d2:	2300      	movs	r3, #0
    19d4:	2264      	movs	r2, #100	; 0x64
    19d6:	4611      	mov	r1, r2
    19d8:	483a      	ldr	r0, [pc, #232]	; (1ac4 <grid_port_process_inbound+0x1ac>)
    19da:	4c3b      	ldr	r4, [pc, #236]	; (1ac8 <grid_port_process_inbound+0x1b0>)
    19dc:	47a0      	blx	r4
    19de:	f8d7 d004 	ldr.w	sp, [r7, #4]
    19e2:	e7a6      	b.n	1932 <grid_port_process_inbound+0x1a>
    19e4:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    19e6:	68b8      	ldr	r0, [r7, #8]
    19e8:	4b38      	ldr	r3, [pc, #224]	; (1acc <grid_port_process_inbound+0x1b4>)
    19ea:	4798      	blx	r3
    19ec:	4580      	cmp	r8, r0
    19ee:	d000      	beq.n	19f2 <grid_port_process_inbound+0xda>
    19f0:	e7fe      	b.n	19f0 <grid_port_process_inbound+0xd8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    19f2:	4e37      	ldr	r6, [pc, #220]	; (1ad0 <grid_port_process_inbound+0x1b8>)
    19f4:	e004      	b.n	1a00 <grid_port_process_inbound+0xe8>
			if (port_array[i] != por || loopback){
    19f6:	f1ba 0f00 	cmp.w	sl, #0
    19fa:	d105      	bne.n	1a08 <grid_port_process_inbound+0xf0>
		for (uint8_t i=0; i<port_count; i++)
    19fc:	45d9      	cmp	r9, fp
    19fe:	d045      	beq.n	1a8c <grid_port_process_inbound+0x174>
			if (port_array[i] != por || loopback){
    1a00:	f859 0b04 	ldr.w	r0, [r9], #4
    1a04:	4285      	cmp	r5, r0
    1a06:	d0f6      	beq.n	19f6 <grid_port_process_inbound+0xde>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1a08:	4641      	mov	r1, r8
    1a0a:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1a0e:	47b0      	blx	r6
    1a10:	e7f4      	b.n	19fc <grid_port_process_inbound+0xe4>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1a12:	6879      	ldr	r1, [r7, #4]
    1a14:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1a18:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    1a1a:	68fb      	ldr	r3, [r7, #12]
    1a1c:	42b3      	cmp	r3, r6
    1a1e:	d007      	beq.n	1a30 <grid_port_process_inbound+0x118>
				if (port_array[i] != por || loopback){
    1a20:	f856 0b04 	ldr.w	r0, [r6], #4
    1a24:	4285      	cmp	r5, r0
    1a26:	d1f4      	bne.n	1a12 <grid_port_process_inbound+0xfa>
    1a28:	f1ba 0f00 	cmp.w	sl, #0
    1a2c:	d0f5      	beq.n	1a1a <grid_port_process_inbound+0x102>
    1a2e:	e7f0      	b.n	1a12 <grid_port_process_inbound+0xfa>
    1a30:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    1a34:	fa1f f38b 	uxth.w	r3, fp
    1a38:	4543      	cmp	r3, r8
    1a3a:	d208      	bcs.n	1a4e <grid_port_process_inbound+0x136>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    1a3c:	68b8      	ldr	r0, [r7, #8]
    1a3e:	4b25      	ldr	r3, [pc, #148]	; (1ad4 <grid_port_process_inbound+0x1bc>)
    1a40:	4798      	blx	r3
    1a42:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    1a44:	2c00      	cmp	r4, #0
    1a46:	d0f3      	beq.n	1a30 <grid_port_process_inbound+0x118>
    1a48:	f107 0628 	add.w	r6, r7, #40	; 0x28
    1a4c:	e7e8      	b.n	1a20 <grid_port_process_inbound+0x108>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    1a4e:	68b8      	ldr	r0, [r7, #8]
    1a50:	4b21      	ldr	r3, [pc, #132]	; (1ad8 <grid_port_process_inbound+0x1c0>)
    1a52:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    1a54:	2c00      	cmp	r4, #0
    1a56:	f43f af6d 	beq.w	1934 <grid_port_process_inbound+0x1c>
    1a5a:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1a5e:	4e1f      	ldr	r6, [pc, #124]	; (1adc <grid_port_process_inbound+0x1c4>)
    1a60:	68fb      	ldr	r3, [r7, #12]
    1a62:	4698      	mov	r8, r3
    1a64:	e005      	b.n	1a72 <grid_port_process_inbound+0x15a>
			if (port_array[i] != por || loopback){
    1a66:	f1ba 0f00 	cmp.w	sl, #0
    1a6a:	d106      	bne.n	1a7a <grid_port_process_inbound+0x162>
		for (uint8_t i=0; i<port_count; i++)
    1a6c:	45a0      	cmp	r8, r4
    1a6e:	f43f af61 	beq.w	1934 <grid_port_process_inbound+0x1c>
			if (port_array[i] != por || loopback){
    1a72:	f854 0b04 	ldr.w	r0, [r4], #4
    1a76:	4285      	cmp	r5, r0
    1a78:	d0f5      	beq.n	1a66 <grid_port_process_inbound+0x14e>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1a7a:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1a7e:	47b0      	blx	r6
    1a80:	e7f4      	b.n	1a6c <grid_port_process_inbound+0x154>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1a82:	68b8      	ldr	r0, [r7, #8]
    1a84:	4b11      	ldr	r3, [pc, #68]	; (1acc <grid_port_process_inbound+0x1b4>)
    1a86:	4798      	blx	r3
    1a88:	4540      	cmp	r0, r8
    1a8a:	d1b1      	bne.n	19f0 <grid_port_process_inbound+0xd8>
    1a8c:	1e63      	subs	r3, r4, #1
    1a8e:	b2db      	uxtb	r3, r3
    1a90:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1a94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1a98:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    1a9a:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1a9e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1ae4 <grid_port_process_inbound+0x1cc>
    1aa2:	60fb      	str	r3, [r7, #12]
    1aa4:	e7ca      	b.n	1a3c <grid_port_process_inbound+0x124>
    1aa6:	bf00      	nop
    1aa8:	000015e9 	.word	0x000015e9
    1aac:	2000121c 	.word	0x2000121c
    1ab0:	20006760 	.word	0x20006760
    1ab4:	2000474c 	.word	0x2000474c
    1ab8:	20003730 	.word	0x20003730
    1abc:	20002268 	.word	0x20002268
    1ac0:	20005758 	.word	0x20005758
    1ac4:	20003280 	.word	0x20003280
    1ac8:	00003d7d 	.word	0x00003d7d
    1acc:	0000165b 	.word	0x0000165b
    1ad0:	0000158d 	.word	0x0000158d
    1ad4:	000016e5 	.word	0x000016e5
    1ad8:	0000170d 	.word	0x0000170d
    1adc:	000015d9 	.word	0x000015d9
    1ae0:	00001579 	.word	0x00001579
    1ae4:	000015bd 	.word	0x000015bd

00001ae8 <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1aec:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    1af0:	af06      	add	r7, sp, #24
    1af2:	62f8      	str	r0, [r7, #44]	; 0x2c
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1af4:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    1af8:	4630      	mov	r0, r6
    1afa:	4b8a      	ldr	r3, [pc, #552]	; (1d24 <grid_port_process_outbound_usb+0x23c>)
    1afc:	4798      	blx	r3
	
	if (!length){		
    1afe:	2800      	cmp	r0, #0
    1b00:	f000 8227 	beq.w	1f52 <grid_port_process_outbound_usb+0x46a>
    1b04:	4604      	mov	r4, r0
    1b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1b08:	4613      	mov	r3, r2
    1b0a:	332f      	adds	r3, #47	; 0x2f
    1b0c:	f202 71ff 	addw	r1, r2, #2047	; 0x7ff


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    1b10:	2200      	movs	r2, #0
    1b12:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1b16:	428b      	cmp	r3, r1
    1b18:	d1fb      	bne.n	1b12 <grid_port_process_outbound_usb+0x2a>
		}
		
		
		
		uint8_t temp[500] = {0};
    1b1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1b1e:	2100      	movs	r1, #0
    1b20:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1b24:	4b80      	ldr	r3, [pc, #512]	; (1d28 <grid_port_process_outbound_usb+0x240>)
    1b26:	4798      	blx	r3
			
		
		//uint8_t temp[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    1b28:	4630      	mov	r0, r6
    1b2a:	4b80      	ldr	r3, [pc, #512]	; (1d2c <grid_port_process_outbound_usb+0x244>)
    1b2c:	4798      	blx	r3
    1b2e:	2500      	movs	r5, #0
		
		for (uint8_t i = 0; i<length; i++){
			
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1b30:	f8df 9238 	ldr.w	r9, [pc, #568]	; 1d6c <grid_port_process_outbound_usb+0x284>
    1b34:	f107 0834 	add.w	r8, r7, #52	; 0x34
    1b38:	4630      	mov	r0, r6
    1b3a:	47c8      	blx	r9
    1b3c:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1b40:	3501      	adds	r5, #1
    1b42:	b2ed      	uxtb	r5, r5
    1b44:	b2ab      	uxth	r3, r5
    1b46:	429c      	cmp	r4, r3
    1b48:	d8f6      	bhi.n	1b38 <grid_port_process_outbound_usb+0x50>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1b4a:	4630      	mov	r0, r6
    1b4c:	4b78      	ldr	r3, [pc, #480]	; (1d30 <grid_port_process_outbound_usb+0x248>)
    1b4e:	4798      	blx	r3
		

		// GRID-2-HOST TRANSLATOR
		uint8_t id = grid_msg_get_id(temp);		
    1b50:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1b54:	4b77      	ldr	r3, [pc, #476]	; (1d34 <grid_port_process_outbound_usb+0x24c>)
    1b56:	4798      	blx	r3
    1b58:	61f8      	str	r0, [r7, #28]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1b5a:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1b5e:	4b76      	ldr	r3, [pc, #472]	; (1d38 <grid_port_process_outbound_usb+0x250>)
    1b60:	4798      	blx	r3
    1b62:	4606      	mov	r6, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1b64:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1b68:	4b74      	ldr	r3, [pc, #464]	; (1d3c <grid_port_process_outbound_usb+0x254>)
    1b6a:	4798      	blx	r3
    1b6c:	4680      	mov	r8, r0
		uint8_t age = grid_msg_get_age(temp);
    1b6e:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1b72:	4b73      	ldr	r3, [pc, #460]	; (1d40 <grid_port_process_outbound_usb+0x258>)
    1b74:	4798      	blx	r3
    1b76:	61b8      	str	r0, [r7, #24]
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		uint8_t output_cursor = 0;
		
		uint8_t error_flag = 0;
    1b78:	2500      	movs	r5, #0
    1b7a:	f887 5033 	strb.w	r5, [r7, #51]	; 0x33
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1b7e:	f1a8 087f 	sub.w	r8, r8, #127	; 0x7f
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
					
					
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    1b82:	fa4f f388 	sxtb.w	r3, r8
    1b86:	627b      	str	r3, [r7, #36]	; 0x24
    1b88:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    1b8c:	005b      	lsls	r3, r3, #1
    1b8e:	1aea      	subs	r2, r5, r3
    1b90:	f003 0307 	and.w	r3, r3, #7
    1b94:	4619      	mov	r1, r3
    1b96:	f002 0307 	and.w	r3, r2, #7
    1b9a:	460a      	mov	r2, r1
    1b9c:	bf58      	it	pl
    1b9e:	425a      	negpl	r2, r3
    1ba0:	60fa      	str	r2, [r7, #12]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1ba2:	3e7f      	subs	r6, #127	; 0x7f
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    1ba4:	b273      	sxtb	r3, r6
    1ba6:	623b      	str	r3, [r7, #32]
    1ba8:	011b      	lsls	r3, r3, #4
    1baa:	60bb      	str	r3, [r7, #8]
    1bac:	1e63      	subs	r3, r4, #1
    1bae:	b29b      	uxth	r3, r3
    1bb0:	f103 0901 	add.w	r9, r3, #1
    1bb4:	46ab      	mov	fp, r5
					
									
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
		
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1bb6:	464b      	mov	r3, r9
    1bb8:	46d9      	mov	r9, fp
    1bba:	469a      	mov	sl, r3
    1bbc:	e006      	b.n	1bcc <grid_port_process_outbound_usb+0xe4>
				current_start = i;
    1bbe:	fa5f f58b 	uxtb.w	r5, fp
    1bc2:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    1bc6:	45d3      	cmp	fp, sl
    1bc8:	f000 81be 	beq.w	1f48 <grid_port_process_outbound_usb+0x460>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1bcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1bd0:	f81b 3003 	ldrb.w	r3, [fp, r3]
    1bd4:	2b02      	cmp	r3, #2
    1bd6:	d0f2      	beq.n	1bbe <grid_port_process_outbound_usb+0xd6>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1bd8:	2b03      	cmp	r3, #3
    1bda:	d1f2      	bne.n	1bc2 <grid_port_process_outbound_usb+0xda>
    1bdc:	2d00      	cmp	r5, #0
    1bde:	d0f0      	beq.n	1bc2 <grid_port_process_outbound_usb+0xda>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    1be0:	462c      	mov	r4, r5
    1be2:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1be6:	2102      	movs	r1, #2
    1be8:	f507 730a 	add.w	r3, r7, #552	; 0x228
    1bec:	1958      	adds	r0, r3, r5
    1bee:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    1bf2:	4b54      	ldr	r3, [pc, #336]	; (1d44 <grid_port_process_outbound_usb+0x25c>)
    1bf4:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1bf6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1bfa:	d019      	beq.n	1c30 <grid_port_process_outbound_usb+0x148>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1bfc:	2e01      	cmp	r6, #1
    1bfe:	f000 80b7 	beq.w	1d70 <grid_port_process_outbound_usb+0x288>
					//usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
		
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    1c02:	2e04      	cmp	r6, #4
    1c04:	f000 812d 	beq.w	1e62 <grid_port_process_outbound_usb+0x37a>

					}
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    1c08:	2e02      	cmp	r6, #2
    1c0a:	f000 819b 	beq.w	1f44 <grid_port_process_outbound_usb+0x45c>
					
					//hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
					
				}	
				else{
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1c0e:	f109 0430 	add.w	r4, r9, #48	; 0x30
    1c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c14:	441c      	add	r4, r3
    1c16:	b2c2      	uxtb	r2, r0
    1c18:	494b      	ldr	r1, [pc, #300]	; (1d48 <grid_port_process_outbound_usb+0x260>)
    1c1a:	4620      	mov	r0, r4
    1c1c:	4b4b      	ldr	r3, [pc, #300]	; (1d4c <grid_port_process_outbound_usb+0x264>)
    1c1e:	4798      	blx	r3
					
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1c20:	4620      	mov	r0, r4
    1c22:	4b4b      	ldr	r3, [pc, #300]	; (1d50 <grid_port_process_outbound_usb+0x268>)
    1c24:	4798      	blx	r3
    1c26:	4481      	add	r9, r0
    1c28:	fa5f f989 	uxtb.w	r9, r9
				}
				
				current_start = 0;
    1c2c:	2500      	movs	r5, #0
    1c2e:	e7c8      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1c30:	1ce8      	adds	r0, r5, #3
    1c32:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c36:	2102      	movs	r1, #2
    1c38:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c3c:	4418      	add	r0, r3
    1c3e:	4b41      	ldr	r3, [pc, #260]	; (1d44 <grid_port_process_outbound_usb+0x25c>)
    1c40:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1c42:	1d68      	adds	r0, r5, #5
    1c44:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c48:	2102      	movs	r1, #2
    1c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c4e:	4418      	add	r0, r3
    1c50:	4b3c      	ldr	r3, [pc, #240]	; (1d44 <grid_port_process_outbound_usb+0x25c>)
    1c52:	4798      	blx	r3
    1c54:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1c58:	1de8      	adds	r0, r5, #7
    1c5a:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c5e:	2102      	movs	r1, #2
    1c60:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c64:	4418      	add	r0, r3
    1c66:	4b37      	ldr	r3, [pc, #220]	; (1d44 <grid_port_process_outbound_usb+0x25c>)
    1c68:	4798      	blx	r3
    1c6a:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1c6c:	f105 0009 	add.w	r0, r5, #9
    1c70:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c74:	2102      	movs	r1, #2
    1c76:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c7a:	4418      	add	r0, r3
    1c7c:	4b31      	ldr	r3, [pc, #196]	; (1d44 <grid_port_process_outbound_usb+0x25c>)
    1c7e:	4798      	blx	r3
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    1c80:	4b34      	ldr	r3, [pc, #208]	; (1d54 <grid_port_process_outbound_usb+0x26c>)
    1c82:	7a59      	ldrb	r1, [r3, #9]
    1c84:	68fb      	ldr	r3, [r7, #12]
    1c86:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1c8a:	424b      	negs	r3, r1
    1c8c:	f001 020f 	and.w	r2, r1, #15
    1c90:	f003 030f 	and.w	r3, r3, #15
    1c94:	bf58      	it	pl
    1c96:	425a      	negpl	r2, r3
    1c98:	617a      	str	r2, [r7, #20]
    1c9a:	7d3b      	ldrb	r3, [r7, #20]
    1c9c:	4619      	mov	r1, r3
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    1c9e:	b2e4      	uxtb	r4, r4
    1ca0:	34e0      	adds	r4, #224	; 0xe0
    1ca2:	68bb      	ldr	r3, [r7, #8]
    1ca4:	441c      	add	r4, r3
    1ca6:	4b2c      	ldr	r3, [pc, #176]	; (1d58 <grid_port_process_outbound_usb+0x270>)
    1ca8:	fb83 3204 	smull	r3, r2, r3, r4
    1cac:	17e3      	asrs	r3, r4, #31
    1cae:	ebc3 1322 	rsb	r3, r3, r2, asr #4
    1cb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1cb6:	eba4 1443 	sub.w	r4, r4, r3, lsl #5
    1cba:	b2e4      	uxtb	r4, r4
    1cbc:	b2c3      	uxtb	r3, r0
					printf("{\"type\":\"MIDI\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, midi_channel,	midi_command, midi_param1, midi_param2);
    1cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    1cc0:	9302      	str	r3, [sp, #8]
    1cc2:	9401      	str	r4, [sp, #4]
    1cc4:	f8cd 8000 	str.w	r8, [sp]
    1cc8:	6139      	str	r1, [r7, #16]
    1cca:	460b      	mov	r3, r1
    1ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cce:	6a39      	ldr	r1, [r7, #32]
    1cd0:	4822      	ldr	r0, [pc, #136]	; (1d5c <grid_port_process_outbound_usb+0x274>)
    1cd2:	4d23      	ldr	r5, [pc, #140]	; (1d60 <grid_port_process_outbound_usb+0x278>)
    1cd4:	47a8      	blx	r5
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1cd6:	f109 0530 	add.w	r5, r9, #48	; 0x30
    1cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1cdc:	4428      	add	r0, r5
    1cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1ce0:	9205      	str	r2, [sp, #20]
    1ce2:	9404      	str	r4, [sp, #16]
    1ce4:	f8cd 800c 	str.w	r8, [sp, #12]
    1ce8:	6939      	ldr	r1, [r7, #16]
    1cea:	9102      	str	r1, [sp, #8]
    1cec:	69b9      	ldr	r1, [r7, #24]
    1cee:	9101      	str	r1, [sp, #4]
    1cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1cf2:	9100      	str	r1, [sp, #0]
    1cf4:	6a3b      	ldr	r3, [r7, #32]
    1cf6:	69fa      	ldr	r2, [r7, #28]
    1cf8:	491a      	ldr	r1, [pc, #104]	; (1d64 <grid_port_process_outbound_usb+0x27c>)
    1cfa:	6138      	str	r0, [r7, #16]
    1cfc:	4d13      	ldr	r5, [pc, #76]	; (1d4c <grid_port_process_outbound_usb+0x264>)
    1cfe:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1d00:	6938      	ldr	r0, [r7, #16]
    1d02:	4b13      	ldr	r3, [pc, #76]	; (1d50 <grid_port_process_outbound_usb+0x268>)
    1d04:	4798      	blx	r3
    1d06:	4481      	add	r9, r0
    1d08:	fa5f f989 	uxtb.w	r9, r9
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1d0c:	6979      	ldr	r1, [r7, #20]
    1d0e:	ea48 0101 	orr.w	r1, r8, r1
    1d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1d14:	4622      	mov	r2, r4
    1d16:	b2c9      	uxtb	r1, r1
    1d18:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1d1c:	4c12      	ldr	r4, [pc, #72]	; (1d68 <grid_port_process_outbound_usb+0x280>)
    1d1e:	47a0      	blx	r4
				current_start = 0;
    1d20:	4635      	mov	r5, r6
    1d22:	e74e      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
    1d24:	000015e9 	.word	0x000015e9
    1d28:	0000c8d7 	.word	0x0000c8d7
    1d2c:	0000165b 	.word	0x0000165b
    1d30:	0000170d 	.word	0x0000170d
    1d34:	00004135 	.word	0x00004135
    1d38:	00004155 	.word	0x00004155
    1d3c:	00004175 	.word	0x00004175
    1d40:	00004195 	.word	0x00004195
    1d44:	00003dd1 	.word	0x00003dd1
    1d48:	0000df54 	.word	0x0000df54
    1d4c:	0000ccc5 	.word	0x0000ccc5
    1d50:	0000cd0d 	.word	0x0000cd0d
    1d54:	20003280 	.word	0x20003280
    1d58:	2aaaaaab 	.word	0x2aaaaaab
    1d5c:	0000de24 	.word	0x0000de24
    1d60:	0000ca41 	.word	0x0000ca41
    1d64:	0000de64 	.word	0x0000de64
    1d68:	0000b709 	.word	0x0000b709
    1d6c:	000016e5 	.word	0x000016e5
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1d70:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1d74:	fa5f f38b 	uxtb.w	r3, fp
    1d78:	1b5b      	subs	r3, r3, r5
    1d7a:	1eda      	subs	r2, r3, #3
    1d7c:	4b77      	ldr	r3, [pc, #476]	; (1f5c <grid_port_process_outbound_usb+0x474>)
    1d7e:	fb83 1302 	smull	r1, r3, r3, r2
    1d82:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    1d86:	b2db      	uxtb	r3, r3
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1d88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1d8c:	3207      	adds	r2, #7
    1d8e:	f022 0207 	bic.w	r2, r2, #7
    1d92:	ebad 0d02 	sub.w	sp, sp, r2
    1d96:	aa06      	add	r2, sp, #24
					for(uint8_t j=0; j<key_array_length; j++){
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d05e      	beq.n	1e5a <grid_port_process_outbound_usb+0x372>
    1d9c:	3403      	adds	r4, #3
    1d9e:	f107 0134 	add.w	r1, r7, #52	; 0x34
    1da2:	440c      	add	r4, r1
    1da4:	4690      	mov	r8, r2
    1da6:	3b01      	subs	r3, #1
    1da8:	b2db      	uxtb	r3, r3
    1daa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1dae:	3509      	adds	r5, #9
    1db0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1db4:	18cb      	adds	r3, r1, r3
    1db6:	617b      	str	r3, [r7, #20]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1db8:	f8c7 b004 	str.w	fp, [r7, #4]
    1dbc:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1dc0:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1dc4:	2102      	movs	r1, #2
    1dc6:	4620      	mov	r0, r4
    1dc8:	4b65      	ldr	r3, [pc, #404]	; (1f60 <grid_port_process_outbound_usb+0x478>)
    1dca:	4798      	blx	r3
    1dcc:	4605      	mov	r5, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1dce:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1dd2:	2102      	movs	r1, #2
    1dd4:	1860      	adds	r0, r4, r1
    1dd6:	4b62      	ldr	r3, [pc, #392]	; (1f60 <grid_port_process_outbound_usb+0x478>)
    1dd8:	4798      	blx	r3
    1dda:	4606      	mov	r6, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1ddc:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1de0:	2102      	movs	r1, #2
    1de2:	1d20      	adds	r0, r4, #4
    1de4:	4b5e      	ldr	r3, [pc, #376]	; (1f60 <grid_port_process_outbound_usb+0x478>)
    1de6:	4798      	blx	r3
    1de8:	4683      	mov	fp, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1dea:	f109 0a30 	add.w	sl, r9, #48	; 0x30
    1dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1df0:	449a      	add	sl, r3
    1df2:	4b5c      	ldr	r3, [pc, #368]	; (1f64 <grid_port_process_outbound_usb+0x47c>)
    1df4:	4798      	blx	r3
    1df6:	9005      	str	r0, [sp, #20]
    1df8:	b2eb      	uxtb	r3, r5
    1dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    1dfc:	9304      	str	r3, [sp, #16]
    1dfe:	b2f6      	uxtb	r6, r6
    1e00:	9603      	str	r6, [sp, #12]
    1e02:	fa5f f38b 	uxtb.w	r3, fp
    1e06:	9302      	str	r3, [sp, #8]
    1e08:	69bb      	ldr	r3, [r7, #24]
    1e0a:	9301      	str	r3, [sp, #4]
    1e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e0e:	9300      	str	r3, [sp, #0]
    1e10:	6a3b      	ldr	r3, [r7, #32]
    1e12:	69fa      	ldr	r2, [r7, #28]
    1e14:	4954      	ldr	r1, [pc, #336]	; (1f68 <grid_port_process_outbound_usb+0x480>)
    1e16:	4650      	mov	r0, sl
    1e18:	4d54      	ldr	r5, [pc, #336]	; (1f6c <grid_port_process_outbound_usb+0x484>)
    1e1a:	47a8      	blx	r5
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1e1c:	4650      	mov	r0, sl
    1e1e:	4b54      	ldr	r3, [pc, #336]	; (1f70 <grid_port_process_outbound_usb+0x488>)
    1e20:	4798      	blx	r3
    1e22:	4481      	add	r9, r0
    1e24:	fa5f f989 	uxtb.w	r9, r9
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1e28:	f888 b000 	strb.w	fp, [r8]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1e2c:	2e82      	cmp	r6, #130	; 0x82
    1e2e:	bf14      	ite	ne
    1e30:	2600      	movne	r6, #0
    1e32:	2601      	moveq	r6, #1
						key_array[j] = current_key;
    1e34:	f888 6001 	strb.w	r6, [r8, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e3a:	2b80      	cmp	r3, #128	; 0x80
    1e3c:	bf14      	ite	ne
    1e3e:	2500      	movne	r5, #0
    1e40:	2501      	moveq	r5, #1
    1e42:	f888 5002 	strb.w	r5, [r8, #2]
    1e46:	3406      	adds	r4, #6
    1e48:	f108 0803 	add.w	r8, r8, #3
					for(uint8_t j=0; j<key_array_length; j++){
    1e4c:	697b      	ldr	r3, [r7, #20]
    1e4e:	429c      	cmp	r4, r3
    1e50:	d1b6      	bne.n	1dc0 <grid_port_process_outbound_usb+0x2d8>
    1e52:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1e56:	f8d7 a000 	ldr.w	sl, [r7]
    1e5a:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1e5e:	2500      	movs	r5, #0
    1e60:	e6af      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
					uint8_t sys_command		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1e62:	1ce8      	adds	r0, r5, #3
    1e64:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1e68:	2102      	movs	r1, #2
    1e6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1e6e:	4418      	add	r0, r3
    1e70:	4b3b      	ldr	r3, [pc, #236]	; (1f60 <grid_port_process_outbound_usb+0x478>)
    1e72:	4798      	blx	r3
    1e74:	62b8      	str	r0, [r7, #40]	; 0x28
    1e76:	b2c5      	uxtb	r5, r0
					uint8_t sys_subcommand  = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1e78:	1d60      	adds	r0, r4, #5
    1e7a:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1e7e:	2102      	movs	r1, #2
    1e80:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1e84:	4418      	add	r0, r3
    1e86:	4b36      	ldr	r3, [pc, #216]	; (1f60 <grid_port_process_outbound_usb+0x478>)
    1e88:	4798      	blx	r3
    1e8a:	4680      	mov	r8, r0
    1e8c:	b2c6      	uxtb	r6, r0
					uint8_t sys_value	    = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1e8e:	1de0      	adds	r0, r4, #7
    1e90:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1e94:	2102      	movs	r1, #2
    1e96:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1e9a:	4418      	add	r0, r3
    1e9c:	4b30      	ldr	r3, [pc, #192]	; (1f60 <grid_port_process_outbound_usb+0x478>)
    1e9e:	4798      	blx	r3
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1ea0:	2d64      	cmp	r5, #100	; 0x64
    1ea2:	d003      	beq.n	1eac <grid_port_process_outbound_usb+0x3c4>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1ea4:	2d66      	cmp	r5, #102	; 0x66
    1ea6:	d025      	beq.n	1ef4 <grid_port_process_outbound_usb+0x40c>
				current_start = 0;
    1ea8:	2500      	movs	r5, #0
    1eaa:	e68a      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1eac:	2e65      	cmp	r6, #101	; 0x65
    1eae:	d001      	beq.n	1eb4 <grid_port_process_outbound_usb+0x3cc>
				current_start = 0;
    1eb0:	2500      	movs	r5, #0
    1eb2:	e686      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
    1eb4:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_value);		
    1eb6:	4621      	mov	r1, r4
    1eb8:	482e      	ldr	r0, [pc, #184]	; (1f74 <grid_port_process_outbound_usb+0x48c>)
    1eba:	4b2f      	ldr	r3, [pc, #188]	; (1f78 <grid_port_process_outbound_usb+0x490>)
    1ebc:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1ebe:	f109 0530 	add.w	r5, r9, #48	; 0x30
    1ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ec4:	441d      	add	r5, r3
    1ec6:	9404      	str	r4, [sp, #16]
    1ec8:	9603      	str	r6, [sp, #12]
    1eca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1ece:	9302      	str	r3, [sp, #8]
    1ed0:	69bb      	ldr	r3, [r7, #24]
    1ed2:	9301      	str	r3, [sp, #4]
    1ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ed6:	9300      	str	r3, [sp, #0]
    1ed8:	6a3b      	ldr	r3, [r7, #32]
    1eda:	69fa      	ldr	r2, [r7, #28]
    1edc:	4927      	ldr	r1, [pc, #156]	; (1f7c <grid_port_process_outbound_usb+0x494>)
    1ede:	4628      	mov	r0, r5
    1ee0:	4c22      	ldr	r4, [pc, #136]	; (1f6c <grid_port_process_outbound_usb+0x484>)
    1ee2:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1ee4:	4628      	mov	r0, r5
    1ee6:	4b22      	ldr	r3, [pc, #136]	; (1f70 <grid_port_process_outbound_usb+0x488>)
    1ee8:	4798      	blx	r3
    1eea:	4481      	add	r9, r0
    1eec:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    1ef0:	2500      	movs	r5, #0
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1ef2:	e666      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1ef4:	2e67      	cmp	r6, #103	; 0x67
    1ef6:	d001      	beq.n	1efc <grid_port_process_outbound_usb+0x414>
				current_start = 0;
    1ef8:	2500      	movs	r5, #0
    1efa:	e662      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
    1efc:	b2c5      	uxtb	r5, r0
						printf("{\"type\":\"HEARTBEAT\", \"data\": [\"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, sys_value);		
    1efe:	462b      	mov	r3, r5
    1f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f02:	6a39      	ldr	r1, [r7, #32]
    1f04:	481e      	ldr	r0, [pc, #120]	; (1f80 <grid_port_process_outbound_usb+0x498>)
    1f06:	4c1f      	ldr	r4, [pc, #124]	; (1f84 <grid_port_process_outbound_usb+0x49c>)
    1f08:	47a0      	blx	r4
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1f0a:	f109 0630 	add.w	r6, r9, #48	; 0x30
    1f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1f10:	4416      	add	r6, r2
    1f12:	9504      	str	r5, [sp, #16]
    1f14:	fa5f f388 	uxtb.w	r3, r8
    1f18:	9303      	str	r3, [sp, #12]
    1f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1f1e:	9302      	str	r3, [sp, #8]
    1f20:	69ba      	ldr	r2, [r7, #24]
    1f22:	9201      	str	r2, [sp, #4]
    1f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f26:	9200      	str	r2, [sp, #0]
    1f28:	6a3b      	ldr	r3, [r7, #32]
    1f2a:	69fa      	ldr	r2, [r7, #28]
    1f2c:	4913      	ldr	r1, [pc, #76]	; (1f7c <grid_port_process_outbound_usb+0x494>)
    1f2e:	4630      	mov	r0, r6
    1f30:	4c0e      	ldr	r4, [pc, #56]	; (1f6c <grid_port_process_outbound_usb+0x484>)
    1f32:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1f34:	4630      	mov	r0, r6
    1f36:	4b0e      	ldr	r3, [pc, #56]	; (1f70 <grid_port_process_outbound_usb+0x488>)
    1f38:	4798      	blx	r3
    1f3a:	4481      	add	r9, r0
    1f3c:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    1f40:	2500      	movs	r5, #0
    1f42:	e63e      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
    1f44:	2500      	movs	r5, #0
    1f46:	e63c      	b.n	1bc2 <grid_port_process_outbound_usb+0xda>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1f48:	4649      	mov	r1, r9
    1f4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1f4c:	3030      	adds	r0, #48	; 0x30
    1f4e:	4b0e      	ldr	r3, [pc, #56]	; (1f88 <grid_port_process_outbound_usb+0x4a0>)
    1f50:	4798      	blx	r3
				
		
	}
	
	
}
    1f52:	f507 770b 	add.w	r7, r7, #556	; 0x22c
    1f56:	46bd      	mov	sp, r7
    1f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f5c:	2aaaaaab 	.word	0x2aaaaaab
    1f60:	00003dd1 	.word	0x00003dd1
    1f64:	00003e49 	.word	0x00003e49
    1f68:	0000deac 	.word	0x0000deac
    1f6c:	0000ccc5 	.word	0x0000ccc5
    1f70:	0000cd0d 	.word	0x0000cd0d
    1f74:	20003280 	.word	0x20003280
    1f78:	00003f39 	.word	0x00003f39
    1f7c:	0000def4 	.word	0x0000def4
    1f80:	0000df20 	.word	0x0000df20
    1f84:	0000ca41 	.word	0x0000ca41
    1f88:	0000af45 	.word	0x0000af45

00001f8c <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f90:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1f94:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    1f98:	4630      	mov	r0, r6
    1f9a:	4b48      	ldr	r3, [pc, #288]	; (20bc <grid_port_process_outbound_ui+0x130>)
    1f9c:	4798      	blx	r3
	
	if (!length){
    1f9e:	b918      	cbnz	r0, 1fa8 <grid_port_process_outbound_ui+0x1c>

		
	}
	
	
}
    1fa0:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    1fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fa8:	4605      	mov	r5, r0
		uint8_t temp[500] = {0};
    1faa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1fae:	2100      	movs	r1, #0
    1fb0:	a805      	add	r0, sp, #20
    1fb2:	4b43      	ldr	r3, [pc, #268]	; (20c0 <grid_port_process_outbound_ui+0x134>)
    1fb4:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    1fb6:	4630      	mov	r0, r6
    1fb8:	4b42      	ldr	r3, [pc, #264]	; (20c4 <grid_port_process_outbound_ui+0x138>)
    1fba:	4798      	blx	r3
    1fbc:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1fbe:	f8df 8124 	ldr.w	r8, [pc, #292]	; 20e4 <grid_port_process_outbound_ui+0x158>
    1fc2:	af05      	add	r7, sp, #20
    1fc4:	4630      	mov	r0, r6
    1fc6:	47c0      	blx	r8
    1fc8:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<length; i++){
    1fca:	3401      	adds	r4, #1
    1fcc:	b2e4      	uxtb	r4, r4
    1fce:	b2a3      	uxth	r3, r4
    1fd0:	429d      	cmp	r5, r3
    1fd2:	d8f7      	bhi.n	1fc4 <grid_port_process_outbound_ui+0x38>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1fd4:	4630      	mov	r0, r6
    1fd6:	4b3c      	ldr	r3, [pc, #240]	; (20c8 <grid_port_process_outbound_ui+0x13c>)
    1fd8:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);
    1fda:	ac05      	add	r4, sp, #20
    1fdc:	4620      	mov	r0, r4
    1fde:	4b3b      	ldr	r3, [pc, #236]	; (20cc <grid_port_process_outbound_ui+0x140>)
    1fe0:	4798      	blx	r3
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1fe2:	4620      	mov	r0, r4
    1fe4:	4b3a      	ldr	r3, [pc, #232]	; (20d0 <grid_port_process_outbound_ui+0x144>)
    1fe6:	4798      	blx	r3
    1fe8:	4681      	mov	r9, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;
    1fea:	4620      	mov	r0, r4
    1fec:	4b39      	ldr	r3, [pc, #228]	; (20d4 <grid_port_process_outbound_ui+0x148>)
    1fee:	4798      	blx	r3
    1ff0:	4682      	mov	sl, r0
		uint8_t age = grid_msg_get_age(temp);
    1ff2:	4620      	mov	r0, r4
    1ff4:	4b38      	ldr	r3, [pc, #224]	; (20d8 <grid_port_process_outbound_ui+0x14c>)
    1ff6:	4798      	blx	r3
		uint8_t error_flag = 0;	
    1ff8:	2000      	movs	r0, #0
    1ffa:	f88d 0013 	strb.w	r0, [sp, #19]
    1ffe:	4626      	mov	r6, r4
    2000:	3d01      	subs	r5, #1
    2002:	b2ad      	uxth	r5, r5
    2004:	3501      	adds	r5, #1
    2006:	4425      	add	r5, r4
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    2008:	4f34      	ldr	r7, [pc, #208]	; (20dc <grid_port_process_outbound_ui+0x150>)
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    200a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 20e8 <grid_port_process_outbound_ui+0x15c>
    200e:	e004      	b.n	201a <grid_port_process_outbound_ui+0x8e>
    2010:	1ba0      	subs	r0, r4, r6
    2012:	b2c0      	uxtb	r0, r0
    2014:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    2016:	42ac      	cmp	r4, r5
    2018:	d0c2      	beq.n	1fa0 <grid_port_process_outbound_ui+0x14>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    201a:	7823      	ldrb	r3, [r4, #0]
    201c:	2b02      	cmp	r3, #2
    201e:	d0f7      	beq.n	2010 <grid_port_process_outbound_ui+0x84>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    2020:	2b03      	cmp	r3, #3
    2022:	d1f7      	bne.n	2014 <grid_port_process_outbound_ui+0x88>
    2024:	2800      	cmp	r0, #0
    2026:	d0f5      	beq.n	2014 <grid_port_process_outbound_ui+0x88>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    2028:	4680      	mov	r8, r0
    202a:	ab82      	add	r3, sp, #520	; 0x208
    202c:	4418      	add	r0, r3
    202e:	f10d 0213 	add.w	r2, sp, #19
    2032:	2102      	movs	r1, #2
    2034:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    2038:	47b8      	blx	r7
				if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    203a:	b2c0      	uxtb	r0, r0
    203c:	2803      	cmp	r0, #3
    203e:	d001      	beq.n	2044 <grid_port_process_outbound_ui+0xb8>
				current_start = 0;
    2040:	2000      	movs	r0, #0
    2042:	e7e7      	b.n	2014 <grid_port_process_outbound_ui+0x88>
					if (dx == 0 && dy == 0){
    2044:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    2048:	d136      	bne.n	20b8 <grid_port_process_outbound_ui+0x12c>
    204a:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    204e:	d001      	beq.n	2054 <grid_port_process_outbound_ui+0xc8>
				current_start = 0;
    2050:	2000      	movs	r0, #0
    2052:	e7df      	b.n	2014 <grid_port_process_outbound_ui+0x88>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    2054:	f108 0003 	add.w	r0, r8, #3
    2058:	f10d 0213 	add.w	r2, sp, #19
    205c:	2102      	movs	r1, #2
    205e:	ab05      	add	r3, sp, #20
    2060:	4418      	add	r0, r3
    2062:	47b8      	blx	r7
    2064:	9002      	str	r0, [sp, #8]
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    2066:	f108 0005 	add.w	r0, r8, #5
    206a:	f10d 0213 	add.w	r2, sp, #19
    206e:	2102      	movs	r1, #2
    2070:	ab05      	add	r3, sp, #20
    2072:	4418      	add	r0, r3
    2074:	47b8      	blx	r7
    2076:	9001      	str	r0, [sp, #4]
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    2078:	f108 0007 	add.w	r0, r8, #7
    207c:	f10d 0213 	add.w	r2, sp, #19
    2080:	2102      	movs	r1, #2
    2082:	ab05      	add	r3, sp, #20
    2084:	4418      	add	r0, r3
    2086:	47b8      	blx	r7
    2088:	9003      	str	r0, [sp, #12]
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    208a:	f108 0009 	add.w	r0, r8, #9
    208e:	f10d 0213 	add.w	r2, sp, #19
    2092:	2102      	movs	r1, #2
    2094:	ab05      	add	r3, sp, #20
    2096:	4418      	add	r0, r3
    2098:	47b8      	blx	r7
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    209a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    209e:	2a63      	cmp	r2, #99	; 0x63
    20a0:	d001      	beq.n	20a6 <grid_port_process_outbound_ui+0x11a>
				current_start = 0;
    20a2:	2000      	movs	r0, #0
    20a4:	e7b6      	b.n	2014 <grid_port_process_outbound_ui+0x88>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    20a6:	b2c3      	uxtb	r3, r0
    20a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    20ac:	f89d 100c 	ldrb.w	r1, [sp, #12]
    20b0:	480b      	ldr	r0, [pc, #44]	; (20e0 <grid_port_process_outbound_ui+0x154>)
    20b2:	47d8      	blx	fp
				current_start = 0;
    20b4:	2000      	movs	r0, #0
    20b6:	e7ad      	b.n	2014 <grid_port_process_outbound_ui+0x88>
    20b8:	2000      	movs	r0, #0
    20ba:	e7ab      	b.n	2014 <grid_port_process_outbound_ui+0x88>
    20bc:	000015e9 	.word	0x000015e9
    20c0:	0000c8d7 	.word	0x0000c8d7
    20c4:	0000165b 	.word	0x0000165b
    20c8:	0000170d 	.word	0x0000170d
    20cc:	00004135 	.word	0x00004135
    20d0:	00004155 	.word	0x00004155
    20d4:	00004175 	.word	0x00004175
    20d8:	00004195 	.word	0x00004195
    20dc:	00003dd1 	.word	0x00003dd1
    20e0:	200077d4 	.word	0x200077d4
    20e4:	000016e5 	.word	0x000016e5
    20e8:	000022ff 	.word	0x000022ff

000020ec <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    20ec:	8a03      	ldrh	r3, [r0, #16]
    20ee:	b103      	cbz	r3, 20f2 <grid_port_process_outbound_usart+0x6>
    20f0:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    20f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20f6:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    20f8:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    20fc:	4630      	mov	r0, r6
    20fe:	4b11      	ldr	r3, [pc, #68]	; (2144 <grid_port_process_outbound_usart+0x58>)
    2100:	4798      	blx	r3
    2102:	4604      	mov	r4, r0
    2104:	4607      	mov	r7, r0
		
		if (!packet_size){
    2106:	b910      	cbnz	r0, 210e <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    2108:	2000      	movs	r0, #0
    210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    210e:	4630      	mov	r0, r6
    2110:	4b0d      	ldr	r3, [pc, #52]	; (2148 <grid_port_process_outbound_usart+0x5c>)
    2112:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    2114:	822c      	strh	r4, [r5, #16]
    2116:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    2118:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2154 <grid_port_process_outbound_usart+0x68>
    211c:	4630      	mov	r0, r6
    211e:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    2120:	192b      	adds	r3, r5, r4
    2122:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
			for (uint8_t i = 0; i<packet_size; i++){
    2126:	3401      	adds	r4, #1
    2128:	b2e4      	uxtb	r4, r4
    212a:	42a7      	cmp	r7, r4
    212c:	d8f6      	bhi.n	211c <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    212e:	4630      	mov	r0, r6
    2130:	4b06      	ldr	r3, [pc, #24]	; (214c <grid_port_process_outbound_usart+0x60>)
    2132:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    2134:	8a2a      	ldrh	r2, [r5, #16]
    2136:	f105 0130 	add.w	r1, r5, #48	; 0x30
    213a:	68a8      	ldr	r0, [r5, #8]
    213c:	4b04      	ldr	r3, [pc, #16]	; (2150 <grid_port_process_outbound_usart+0x64>)
    213e:	4798      	blx	r3
			
		}
		
	}
	
}
    2140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2144:	000015e9 	.word	0x000015e9
    2148:	0000165b 	.word	0x0000165b
    214c:	0000170d 	.word	0x0000170d
    2150:	00004f99 	.word	0x00004f99
    2154:	000016e5 	.word	0x000016e5

00002158 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    2158:	2201      	movs	r2, #1
    215a:	4b01      	ldr	r3, [pc, #4]	; (2160 <grid_led_hardware_transfer_complete_cb+0x8>)
    215c:	701a      	strb	r2, [r3, #0]
    215e:	4770      	bx	lr
    2160:	20001218 	.word	0x20001218

00002164 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    2164:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    2166:	7844      	ldrb	r4, [r0, #1]
    2168:	428c      	cmp	r4, r1
    216a:	d802      	bhi.n	2172 <grid_led_set_color+0xe>
		return -1;		
    216c:	20ff      	movs	r0, #255	; 0xff
}
    216e:	bc30      	pop	{r4, r5}
    2170:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    2172:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2176:	0089      	lsls	r1, r1, #2
    2178:	4c0d      	ldr	r4, [pc, #52]	; (21b0 <grid_led_set_color+0x4c>)
    217a:	2bff      	cmp	r3, #255	; 0xff
    217c:	bf28      	it	cs
    217e:	23ff      	movcs	r3, #255	; 0xff
    2180:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    2184:	68c3      	ldr	r3, [r0, #12]
    2186:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    2188:	2aff      	cmp	r2, #255	; 0xff
    218a:	bf28      	it	cs
    218c:	22ff      	movcs	r2, #255	; 0xff
    218e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    2192:	68c3      	ldr	r3, [r0, #12]
    2194:	440b      	add	r3, r1
    2196:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    2198:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    219c:	2bff      	cmp	r3, #255	; 0xff
    219e:	bf28      	it	cs
    21a0:	23ff      	movcs	r3, #255	; 0xff
    21a2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    21a6:	68c3      	ldr	r3, [r0, #12]
    21a8:	4419      	add	r1, r3
    21aa:	608a      	str	r2, [r1, #8]
		return 0;
    21ac:	2000      	movs	r0, #0
    21ae:	e7de      	b.n	216e <grid_led_set_color+0xa>
    21b0:	20003320 	.word	0x20003320

000021b4 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    21b4:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    21b6:	4c06      	ldr	r4, [pc, #24]	; (21d0 <grid_led_hardware_init+0x1c>)
    21b8:	f100 0114 	add.w	r1, r0, #20
    21bc:	4620      	mov	r0, r4
    21be:	4b05      	ldr	r3, [pc, #20]	; (21d4 <grid_led_hardware_init+0x20>)
    21c0:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    21c2:	4a05      	ldr	r2, [pc, #20]	; (21d8 <grid_led_hardware_init+0x24>)
    21c4:	2100      	movs	r1, #0
    21c6:	4620      	mov	r0, r4
    21c8:	4b04      	ldr	r3, [pc, #16]	; (21dc <grid_led_hardware_init+0x28>)
    21ca:	4798      	blx	r3
    21cc:	bd10      	pop	{r4, pc}
    21ce:	bf00      	nop
    21d0:	20001098 	.word	0x20001098
    21d4:	000054f1 	.word	0x000054f1
    21d8:	00002159 	.word	0x00002159
    21dc:	000054c1 	.word	0x000054c1

000021e0 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    21e0:	7840      	ldrb	r0, [r0, #1]
    21e2:	4770      	bx	lr

000021e4 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    21e4:	7843      	ldrb	r3, [r0, #1]
    21e6:	b113      	cbz	r3, 21ee <grid_led_tick+0xa>
void grid_led_tick(struct grid_led_model* mod){
    21e8:	b430      	push	{r4, r5}
	for (uint8_t j=0; j<mod->led_number; j++){
    21ea:	2400      	movs	r4, #0
    21ec:	e005      	b.n	21fa <grid_led_tick+0x16>
    21ee:	4770      	bx	lr
    21f0:	3401      	adds	r4, #1
    21f2:	b2e4      	uxtb	r4, r4
    21f4:	7843      	ldrb	r3, [r0, #1]
    21f6:	42a3      	cmp	r3, r4
    21f8:	d911      	bls.n	221e <grid_led_tick+0x3a>
void grid_led_tick(struct grid_led_model* mod){
    21fa:	2100      	movs	r1, #0
					
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    21fc:	7843      	ldrb	r3, [r0, #1]
    21fe:	fb01 4303 	mla	r3, r1, r3, r4
    2202:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2206:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    220a:	6902      	ldr	r2, [r0, #16]
    220c:	4413      	add	r3, r2
    220e:	7ada      	ldrb	r2, [r3, #11]
    2210:	7b1d      	ldrb	r5, [r3, #12]
    2212:	442a      	add	r2, r5
    2214:	72da      	strb	r2, [r3, #11]
    2216:	3101      	adds	r1, #1
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    2218:	2903      	cmp	r1, #3
    221a:	d1ef      	bne.n	21fc <grid_led_tick+0x18>
    221c:	e7e8      	b.n	21f0 <grid_led_tick+0xc>
		}	
	}
	/** END */
	
}
    221e:	bc30      	pop	{r4, r5}
    2220:	4770      	bx	lr

00002222 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2222:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    2224:	7844      	ldrb	r4, [r0, #1]
    2226:	fb02 1404 	mla	r4, r2, r4, r1
    222a:	6905      	ldr	r5, [r0, #16]
    222c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2230:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2234:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    2236:	7843      	ldrb	r3, [r0, #1]
    2238:	fb02 1303 	mla	r3, r2, r3, r1
    223c:	6904      	ldr	r4, [r0, #16]
    223e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2242:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2246:	4423      	add	r3, r4
    2248:	f89d 400c 	ldrb.w	r4, [sp, #12]
    224c:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    224e:	7843      	ldrb	r3, [r0, #1]
    2250:	fb02 1203 	mla	r2, r2, r3, r1
    2254:	6903      	ldr	r3, [r0, #16]
    2256:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    225a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    225e:	441a      	add	r2, r3
    2260:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2264:	7093      	strb	r3, [r2, #2]
}
    2266:	bc70      	pop	{r4, r5, r6}
    2268:	4770      	bx	lr

0000226a <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    226a:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    226c:	7844      	ldrb	r4, [r0, #1]
    226e:	fb02 1404 	mla	r4, r2, r4, r1
    2272:	6905      	ldr	r5, [r0, #16]
    2274:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2278:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    227c:	442c      	add	r4, r5
    227e:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    2280:	7843      	ldrb	r3, [r0, #1]
    2282:	fb02 1303 	mla	r3, r2, r3, r1
    2286:	6904      	ldr	r4, [r0, #16]
    2288:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    228c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2290:	4423      	add	r3, r4
    2292:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2296:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    2298:	7843      	ldrb	r3, [r0, #1]
    229a:	fb02 1203 	mla	r2, r2, r3, r1
    229e:	6903      	ldr	r3, [r0, #16]
    22a0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    22a4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    22a8:	441a      	add	r2, r3
    22aa:	f89d 3010 	ldrb.w	r3, [sp, #16]
    22ae:	7153      	strb	r3, [r2, #5]
}
    22b0:	bc70      	pop	{r4, r5, r6}
    22b2:	4770      	bx	lr

000022b4 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    22b4:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    22b6:	7844      	ldrb	r4, [r0, #1]
    22b8:	fb02 1404 	mla	r4, r2, r4, r1
    22bc:	6905      	ldr	r5, [r0, #16]
    22be:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    22c2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    22c6:	442c      	add	r4, r5
    22c8:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    22ca:	7843      	ldrb	r3, [r0, #1]
    22cc:	fb02 1303 	mla	r3, r2, r3, r1
    22d0:	6904      	ldr	r4, [r0, #16]
    22d2:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    22d6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    22da:	4423      	add	r3, r4
    22dc:	f89d 400c 	ldrb.w	r4, [sp, #12]
    22e0:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    22e2:	7843      	ldrb	r3, [r0, #1]
    22e4:	fb02 1203 	mla	r2, r2, r3, r1
    22e8:	6903      	ldr	r3, [r0, #16]
    22ea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    22ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    22f2:	441a      	add	r2, r3
    22f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    22f8:	7213      	strb	r3, [r2, #8]
}
    22fa:	bc70      	pop	{r4, r5, r6}
    22fc:	4770      	bx	lr

000022fe <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    22fe:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    2300:	7844      	ldrb	r4, [r0, #1]
    2302:	fb02 1204 	mla	r2, r2, r4, r1
    2306:	6901      	ldr	r1, [r0, #16]
    2308:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    230c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2310:	440a      	add	r2, r1
    2312:	72d3      	strb	r3, [r2, #11]
}
    2314:	f85d 4b04 	ldr.w	r4, [sp], #4
    2318:	4770      	bx	lr

0000231a <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    231a:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    231c:	7844      	ldrb	r4, [r0, #1]
    231e:	fb02 1204 	mla	r2, r2, r4, r1
    2322:	6901      	ldr	r1, [r0, #16]
    2324:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2328:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    232c:	440a      	add	r2, r1
    232e:	7313      	strb	r3, [r2, #12]
}
    2330:	f85d 4b04 	ldr.w	r4, [sp], #4
    2334:	4770      	bx	lr
	...

00002338 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    2338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    233c:	b083      	sub	sp, #12
    233e:	4605      	mov	r5, r0
	mod->led_number = length;
    2340:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    2342:	b2cc      	uxtb	r4, r1
    2344:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    2348:	0080      	lsls	r0, r0, #2
    234a:	3090      	adds	r0, #144	; 0x90
    234c:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    234e:	4f52      	ldr	r7, [pc, #328]	; (2498 <grid_led_buffer_init+0x160>)
    2350:	47b8      	blx	r7
    2352:	4606      	mov	r6, r0
    2354:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    2356:	f100 0390 	add.w	r3, r0, #144	; 0x90
    235a:	60eb      	str	r3, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    235c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2360:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
    2364:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    2366:	2e00      	cmp	r6, #0
    2368:	f000 8094 	beq.w	2494 <grid_led_buffer_init+0x15c>
    236c:	2800      	cmp	r0, #0
    236e:	f000 8091 	beq.w	2494 <grid_led_buffer_init+0x15c>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    2372:	6128      	str	r0, [r5, #16]
    2374:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    2376:	4619      	mov	r1, r3
    2378:	68aa      	ldr	r2, [r5, #8]
    237a:	54d1      	strb	r1, [r2, r3]
    237c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    237e:	2b90      	cmp	r3, #144	; 0x90
    2380:	d1fa      	bne.n	2378 <grid_led_buffer_init+0x40>
	for (uint32_t i = 0; i<mod->led_number; i++){
    2382:	786b      	ldrb	r3, [r5, #1]
    2384:	2b00      	cmp	r3, #0
    2386:	f000 8082 	beq.w	248e <grid_led_buffer_init+0x156>
    238a:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    238c:	4626      	mov	r6, r4
    238e:	4f43      	ldr	r7, [pc, #268]	; (249c <grid_led_buffer_init+0x164>)
    2390:	9600      	str	r6, [sp, #0]
    2392:	4633      	mov	r3, r6
    2394:	4632      	mov	r2, r6
    2396:	4621      	mov	r1, r4
    2398:	4628      	mov	r0, r5
    239a:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    239c:	3401      	adds	r4, #1
    239e:	786b      	ldrb	r3, [r5, #1]
    23a0:	42a3      	cmp	r3, r4
    23a2:	d8f5      	bhi.n	2390 <grid_led_buffer_init+0x58>
	for(uint8_t i = 0; i<mod->led_number; i++){
    23a4:	2b00      	cmp	r3, #0
    23a6:	d072      	beq.n	248e <grid_led_buffer_init+0x156>
    23a8:	f04f 0b00 	mov.w	fp, #0
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    23ac:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 24a8 <grid_led_buffer_init+0x170>
    23b0:	2400      	movs	r4, #0
    23b2:	9401      	str	r4, [sp, #4]
    23b4:	9400      	str	r4, [sp, #0]
    23b6:	4623      	mov	r3, r4
    23b8:	2201      	movs	r2, #1
    23ba:	4659      	mov	r1, fp
    23bc:	4628      	mov	r0, r5
    23be:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    23c0:	9401      	str	r4, [sp, #4]
    23c2:	237f      	movs	r3, #127	; 0x7f
    23c4:	9300      	str	r3, [sp, #0]
    23c6:	4623      	mov	r3, r4
    23c8:	2201      	movs	r2, #1
    23ca:	4659      	mov	r1, fp
    23cc:	4628      	mov	r0, r5
    23ce:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 24ac <grid_led_buffer_init+0x174>
    23d2:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    23d4:	9401      	str	r4, [sp, #4]
    23d6:	23ff      	movs	r3, #255	; 0xff
    23d8:	9300      	str	r3, [sp, #0]
    23da:	4623      	mov	r3, r4
    23dc:	2201      	movs	r2, #1
    23de:	4659      	mov	r1, fp
    23e0:	4628      	mov	r0, r5
    23e2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 24b0 <grid_led_buffer_init+0x178>
    23e6:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    23e8:	4623      	mov	r3, r4
    23ea:	2201      	movs	r2, #1
    23ec:	4659      	mov	r1, fp
    23ee:	4628      	mov	r0, r5
    23f0:	4f2b      	ldr	r7, [pc, #172]	; (24a0 <grid_led_buffer_init+0x168>)
    23f2:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    23f4:	4623      	mov	r3, r4
    23f6:	2201      	movs	r2, #1
    23f8:	4659      	mov	r1, fp
    23fa:	4628      	mov	r0, r5
    23fc:	4e29      	ldr	r6, [pc, #164]	; (24a4 <grid_led_buffer_init+0x16c>)
    23fe:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    2400:	9401      	str	r4, [sp, #4]
    2402:	9400      	str	r4, [sp, #0]
    2404:	4623      	mov	r3, r4
    2406:	2202      	movs	r2, #2
    2408:	4659      	mov	r1, fp
    240a:	4628      	mov	r0, r5
    240c:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    240e:	9401      	str	r4, [sp, #4]
    2410:	237f      	movs	r3, #127	; 0x7f
    2412:	9300      	str	r3, [sp, #0]
    2414:	4623      	mov	r3, r4
    2416:	2202      	movs	r2, #2
    2418:	4659      	mov	r1, fp
    241a:	4628      	mov	r0, r5
    241c:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    241e:	9401      	str	r4, [sp, #4]
    2420:	23ff      	movs	r3, #255	; 0xff
    2422:	9300      	str	r3, [sp, #0]
    2424:	4623      	mov	r3, r4
    2426:	2202      	movs	r2, #2
    2428:	4659      	mov	r1, fp
    242a:	4628      	mov	r0, r5
    242c:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    242e:	4623      	mov	r3, r4
    2430:	2202      	movs	r2, #2
    2432:	4659      	mov	r1, fp
    2434:	4628      	mov	r0, r5
    2436:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    2438:	4623      	mov	r3, r4
    243a:	2202      	movs	r2, #2
    243c:	4659      	mov	r1, fp
    243e:	4628      	mov	r0, r5
    2440:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    2442:	9401      	str	r4, [sp, #4]
    2444:	9400      	str	r4, [sp, #0]
    2446:	4623      	mov	r3, r4
    2448:	4622      	mov	r2, r4
    244a:	4659      	mov	r1, fp
    244c:	4628      	mov	r0, r5
    244e:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    2450:	9401      	str	r4, [sp, #4]
    2452:	9400      	str	r4, [sp, #0]
    2454:	4623      	mov	r3, r4
    2456:	4622      	mov	r2, r4
    2458:	4659      	mov	r1, fp
    245a:	4628      	mov	r0, r5
    245c:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    245e:	9401      	str	r4, [sp, #4]
    2460:	9400      	str	r4, [sp, #0]
    2462:	4623      	mov	r3, r4
    2464:	4622      	mov	r2, r4
    2466:	4659      	mov	r1, fp
    2468:	4628      	mov	r0, r5
    246a:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    246c:	4623      	mov	r3, r4
    246e:	4622      	mov	r2, r4
    2470:	4659      	mov	r1, fp
    2472:	4628      	mov	r0, r5
    2474:	47b8      	blx	r7
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    2476:	4623      	mov	r3, r4
    2478:	4622      	mov	r2, r4
    247a:	4659      	mov	r1, fp
    247c:	4628      	mov	r0, r5
    247e:	47b0      	blx	r6
	for(uint8_t i = 0; i<mod->led_number; i++){
    2480:	f10b 0b01 	add.w	fp, fp, #1
    2484:	fa5f fb8b 	uxtb.w	fp, fp
    2488:	786b      	ldrb	r3, [r5, #1]
    248a:	455b      	cmp	r3, fp
    248c:	d890      	bhi.n	23b0 <grid_led_buffer_init+0x78>
}
    248e:	b003      	add	sp, #12
    2490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2494:	e7fe      	b.n	2494 <grid_led_buffer_init+0x15c>
    2496:	bf00      	nop
    2498:	0000c8b1 	.word	0x0000c8b1
    249c:	00002165 	.word	0x00002165
    24a0:	0000231b 	.word	0x0000231b
    24a4:	000022ff 	.word	0x000022ff
    24a8:	00002223 	.word	0x00002223
    24ac:	0000226b 	.word	0x0000226b
    24b0:	000022b5 	.word	0x000022b5

000024b4 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    24b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24b8:	b083      	sub	sp, #12
    24ba:	f890 c001 	ldrb.w	ip, [r0, #1]
    24be:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    24c2:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    24c6:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    24ca:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    24ce:	6904      	ldr	r4, [r0, #16]
    24d0:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    24d2:	2703      	movs	r7, #3
	uint32_t mix_b = 0;
    24d4:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    24d8:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    24da:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    24dc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2564 <grid_led_render+0xb0>
    24e0:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    24e2:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    24e6:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    24e8:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    24ec:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    24f0:	f894 a000 	ldrb.w	sl, [r4]
    24f4:	f894 b003 	ldrb.w	fp, [r4, #3]
    24f8:	fb05 fb0b 	mul.w	fp, r5, fp
    24fc:	fb09 bb0a 	mla	fp, r9, sl, fp
    2500:	f894 a006 	ldrb.w	sl, [r4, #6]
    2504:	fb06 ba0a 	mla	sl, r6, sl, fp
    2508:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    250a:	f894 a001 	ldrb.w	sl, [r4, #1]
    250e:	f894 b004 	ldrb.w	fp, [r4, #4]
    2512:	fb05 fb0b 	mul.w	fp, r5, fp
    2516:	fb09 bb0a 	mla	fp, r9, sl, fp
    251a:	f894 a007 	ldrb.w	sl, [r4, #7]
    251e:	fb06 ba0a 	mla	sl, r6, sl, fp
    2522:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    2524:	f894 a002 	ldrb.w	sl, [r4, #2]
    2528:	f894 b005 	ldrb.w	fp, [r4, #5]
    252c:	fb05 f50b 	mul.w	r5, r5, fp
    2530:	fb09 590a 	mla	r9, r9, sl, r5
    2534:	7a25      	ldrb	r5, [r4, #8]
    2536:	fb06 9505 	mla	r5, r6, r5, r9
    253a:	44ae      	add	lr, r5
    253c:	3f01      	subs	r7, #1
    253e:	4464      	add	r4, ip
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    2540:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    2544:	d1cc      	bne.n	24e0 <grid_led_render+0x2c>

	mix_r = (mix_r)/2/256;
	mix_g = (mix_g)/2/256;
	mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    2546:	f3ce 244f 	ubfx	r4, lr, #9, #16
    254a:	9400      	str	r4, [sp, #0]
    254c:	f3c3 234f 	ubfx	r3, r3, #9, #16
    2550:	f3c2 224f 	ubfx	r2, r2, #9, #16
    2554:	4c02      	ldr	r4, [pc, #8]	; (2560 <grid_led_render+0xac>)
    2556:	47a0      	blx	r4
	
}
    2558:	b003      	add	sp, #12
    255a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    255e:	bf00      	nop
    2560:	00002165 	.word	0x00002165
    2564:	20000000 	.word	0x20000000

00002568 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2568:	7843      	ldrb	r3, [r0, #1]
    256a:	b15b      	cbz	r3, 2584 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    256c:	b570      	push	{r4, r5, r6, lr}
    256e:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    2570:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    2572:	4e05      	ldr	r6, [pc, #20]	; (2588 <grid_led_render_all+0x20>)
    2574:	4621      	mov	r1, r4
    2576:	4628      	mov	r0, r5
    2578:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    257a:	3401      	adds	r4, #1
    257c:	786b      	ldrb	r3, [r5, #1]
    257e:	42a3      	cmp	r3, r4
    2580:	d8f8      	bhi.n	2574 <grid_led_render_all+0xc>
    2582:	bd70      	pop	{r4, r5, r6, pc}
    2584:	4770      	bx	lr
    2586:	bf00      	nop
    2588:	000024b5 	.word	0x000024b5

0000258c <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    258c:	b510      	push	{r4, lr}
    258e:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2590:	2200      	movs	r2, #0
    2592:	4b08      	ldr	r3, [pc, #32]	; (25b4 <grid_led_hardware_start_transfer_blocking+0x28>)
    2594:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2596:	4808      	ldr	r0, [pc, #32]	; (25b8 <grid_led_hardware_start_transfer_blocking+0x2c>)
    2598:	4b08      	ldr	r3, [pc, #32]	; (25bc <grid_led_hardware_start_transfer_blocking+0x30>)
    259a:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    259c:	88a2      	ldrh	r2, [r4, #4]
    259e:	68a1      	ldr	r1, [r4, #8]
    25a0:	6960      	ldr	r0, [r4, #20]
    25a2:	4b07      	ldr	r3, [pc, #28]	; (25c0 <grid_led_hardware_start_transfer_blocking+0x34>)
    25a4:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    25a6:	4a03      	ldr	r2, [pc, #12]	; (25b4 <grid_led_hardware_start_transfer_blocking+0x28>)
    25a8:	7813      	ldrb	r3, [r2, #0]
    25aa:	b2db      	uxtb	r3, r3
    25ac:	2b01      	cmp	r3, #1
    25ae:	d1fb      	bne.n	25a8 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    25b0:	bd10      	pop	{r4, pc}
    25b2:	bf00      	nop
    25b4:	20001218 	.word	0x20001218
    25b8:	20001098 	.word	0x20001098
    25bc:	00005499 	.word	0x00005499
    25c0:	00004f99 	.word	0x00004f99

000025c4 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    25c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25c8:	b089      	sub	sp, #36	; 0x24
    25ca:	4605      	mov	r5, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    25cc:	4b31      	ldr	r3, [pc, #196]	; (2694 <grid_led_startup_animation+0xd0>)
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    25d2:	2b20      	cmp	r3, #32
    25d4:	d01c      	beq.n	2610 <grid_led_startup_animation+0x4c>
	}else if (grid_module_reset_cause == RESET_REASON_SYST){
    25d6:	2b40      	cmp	r3, #64	; 0x40
    25d8:	d015      	beq.n	2606 <grid_led_startup_animation+0x42>
	uint8_t s		  = 1;
    25da:	2301      	movs	r3, #1
	uint8_t color_b   = 1;
    25dc:	461a      	mov	r2, r3
	uint8_t color_g   = 1;
    25de:	4619      	mov	r1, r3
	uint8_t color_r   = 1;
    25e0:	4618      	mov	r0, r3
    25e2:	fb03 f000 	mul.w	r0, r3, r0
    25e6:	9005      	str	r0, [sp, #20]
    25e8:	fb03 f101 	mul.w	r1, r3, r1
    25ec:	9106      	str	r1, [sp, #24]
    25ee:	fb03 f302 	mul.w	r3, r3, r2
    25f2:	9307      	str	r3, [sp, #28]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    25f4:	f04f 0a00 	mov.w	sl, #0
    25f8:	46d3      	mov	fp, sl
    25fa:	46d0      	mov	r8, sl
    25fc:	23ff      	movs	r3, #255	; 0xff
    25fe:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 26a0 <grid_led_startup_animation+0xdc>
    2602:	461f      	mov	r7, r3
    2604:	e024      	b.n	2650 <grid_led_startup_animation+0x8c>
		s= 2;
    2606:	2302      	movs	r3, #2
		color_b = 1;
    2608:	2201      	movs	r2, #1
		color_g = 0;
    260a:	2100      	movs	r1, #0
		color_r = 0;
    260c:	4608      	mov	r0, r1
    260e:	e7e8      	b.n	25e2 <grid_led_startup_animation+0x1e>
		s= 2;
    2610:	2302      	movs	r3, #2
		color_b = 0;
    2612:	2200      	movs	r2, #0
		color_g = 0;
    2614:	4611      	mov	r1, r2
		color_r = 1;
    2616:	2001      	movs	r0, #1
    2618:	e7e3      	b.n	25e2 <grid_led_startup_animation+0x1e>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    261a:	9600      	str	r6, [sp, #0]
    261c:	9b04      	ldr	r3, [sp, #16]
    261e:	9a03      	ldr	r2, [sp, #12]
    2620:	4621      	mov	r1, r4
    2622:	4628      	mov	r0, r5
    2624:	47c8      	blx	r9
		for (uint8_t j=0; j<mod->led_number; j++){
    2626:	3401      	adds	r4, #1
    2628:	b2e4      	uxtb	r4, r4
    262a:	786b      	ldrb	r3, [r5, #1]
    262c:	42a3      	cmp	r3, r4
    262e:	d8f4      	bhi.n	261a <grid_led_startup_animation+0x56>
		grid_led_hardware_start_transfer_blocking(mod);
    2630:	4628      	mov	r0, r5
    2632:	4b19      	ldr	r3, [pc, #100]	; (2698 <grid_led_startup_animation+0xd4>)
    2634:	4798      	blx	r3
		delay_ms(1);
    2636:	2001      	movs	r0, #1
    2638:	4b18      	ldr	r3, [pc, #96]	; (269c <grid_led_startup_animation+0xd8>)
    263a:	4798      	blx	r3
    263c:	3f01      	subs	r7, #1
    263e:	9b05      	ldr	r3, [sp, #20]
    2640:	4498      	add	r8, r3
    2642:	9b06      	ldr	r3, [sp, #24]
    2644:	449b      	add	fp, r3
    2646:	9b07      	ldr	r3, [sp, #28]
    2648:	449a      	add	sl, r3
	for (uint8_t i = 0; i<255; i++){
    264a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    264e:	d01e      	beq.n	268e <grid_led_startup_animation+0xca>
		for (uint8_t j=0; j<mod->led_number; j++){
    2650:	786b      	ldrb	r3, [r5, #1]
    2652:	2b00      	cmp	r3, #0
    2654:	d0ec      	beq.n	2630 <grid_led_startup_animation+0x6c>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    2656:	f1d8 0200 	rsbs	r2, r8, #0
    265a:	fa5f f388 	uxtb.w	r3, r8
    265e:	b2d2      	uxtb	r2, r2
    2660:	bf58      	it	pl
    2662:	4253      	negpl	r3, r2
    2664:	b29b      	uxth	r3, r3
    2666:	9303      	str	r3, [sp, #12]
    2668:	f1db 0200 	rsbs	r2, fp, #0
    266c:	fa5f f38b 	uxtb.w	r3, fp
    2670:	b2d2      	uxtb	r2, r2
    2672:	bf58      	it	pl
    2674:	4253      	negpl	r3, r2
    2676:	b29b      	uxth	r3, r3
    2678:	9304      	str	r3, [sp, #16]
    267a:	f1da 0300 	rsbs	r3, sl, #0
    267e:	fa5f f68a 	uxtb.w	r6, sl
    2682:	b2db      	uxtb	r3, r3
    2684:	bf58      	it	pl
    2686:	425e      	negpl	r6, r3
    2688:	b2b6      	uxth	r6, r6
    268a:	2400      	movs	r4, #0
    268c:	e7c5      	b.n	261a <grid_led_startup_animation+0x56>
}
    268e:	b009      	add	sp, #36	; 0x24
    2690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2694:	40000c00 	.word	0x40000c00
    2698:	0000258d 	.word	0x0000258d
    269c:	00004e0d 	.word	0x00004e0d
    26a0:	00002165 	.word	0x00002165

000026a4 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	4604      	mov	r4, r0
    26a8:	4e2b      	ldr	r6, [pc, #172]	; (2758 <grid_led_init+0xb4>)
    26aa:	2200      	movs	r2, #0
    26ac:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    26ae:	f003 0001 	and.w	r0, r3, #1
    26b2:	2800      	cmp	r0, #0
    26b4:	bf14      	ite	ne
    26b6:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    26ba:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    26be:	f3c3 0540 	ubfx	r5, r3, #1, #1
    26c2:	2d00      	cmp	r5, #0
    26c4:	bf14      	ite	ne
    26c6:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    26ca:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    26ce:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    26d0:	f3c3 0080 	ubfx	r0, r3, #2, #1
    26d4:	2800      	cmp	r0, #0
    26d6:	bf14      	ite	ne
    26d8:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    26dc:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    26e0:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    26e2:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    26e6:	2d00      	cmp	r5, #0
    26e8:	bf14      	ite	ne
    26ea:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    26ee:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    26f2:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    26f4:	f3c3 1500 	ubfx	r5, r3, #4, #1
    26f8:	2d00      	cmp	r5, #0
    26fa:	bf14      	ite	ne
    26fc:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2700:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    2704:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    2706:	f3c3 1040 	ubfx	r0, r3, #5, #1
    270a:	2800      	cmp	r0, #0
    270c:	bf14      	ite	ne
    270e:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    2712:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    2716:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    2718:	f3c3 1080 	ubfx	r0, r3, #6, #1
    271c:	2800      	cmp	r0, #0
    271e:	bf14      	ite	ne
    2720:	200e      	movne	r0, #14
    2722:	2008      	moveq	r0, #8
    2724:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    2726:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    272a:	2b00      	cmp	r3, #0
    272c:	bf14      	ite	ne
    272e:	23e0      	movne	r3, #224	; 0xe0
    2730:	2380      	moveq	r3, #128	; 0x80
    2732:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    2734:	f846 3f04 	str.w	r3, [r6, #4]!
    2738:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    273a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    273e:	d1b5      	bne.n	26ac <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    2740:	4620      	mov	r0, r4
    2742:	4b06      	ldr	r3, [pc, #24]	; (275c <grid_led_init+0xb8>)
    2744:	4798      	blx	r3
	grid_led_hardware_init(mod);
    2746:	4620      	mov	r0, r4
    2748:	4b05      	ldr	r3, [pc, #20]	; (2760 <grid_led_init+0xbc>)
    274a:	4798      	blx	r3
	grid_led_startup_animation(mod);
    274c:	4620      	mov	r0, r4
    274e:	4b05      	ldr	r3, [pc, #20]	; (2764 <grid_led_init+0xc0>)
    2750:	4798      	blx	r3
}
    2752:	2000      	movs	r0, #0
    2754:	bd70      	pop	{r4, r5, r6, pc}
    2756:	bf00      	nop
    2758:	2000331c 	.word	0x2000331c
    275c:	00002339 	.word	0x00002339
    2760:	000021b5 	.word	0x000021b5
    2764:	000025c5 	.word	0x000025c5

00002768 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    2768:	b510      	push	{r4, lr}
    276a:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    276c:	2200      	movs	r2, #0
    276e:	4b05      	ldr	r3, [pc, #20]	; (2784 <grid_led_hardware_start_transfer+0x1c>)
    2770:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2772:	4805      	ldr	r0, [pc, #20]	; (2788 <grid_led_hardware_start_transfer+0x20>)
    2774:	4b05      	ldr	r3, [pc, #20]	; (278c <grid_led_hardware_start_transfer+0x24>)
    2776:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2778:	88a2      	ldrh	r2, [r4, #4]
    277a:	68a1      	ldr	r1, [r4, #8]
    277c:	6960      	ldr	r0, [r4, #20]
    277e:	4b04      	ldr	r3, [pc, #16]	; (2790 <grid_led_hardware_start_transfer+0x28>)
    2780:	4798      	blx	r3
    2782:	bd10      	pop	{r4, pc}
    2784:	20001218 	.word	0x20001218
    2788:	20001098 	.word	0x20001098
    278c:	00005499 	.word	0x00005499
    2790:	00004f99 	.word	0x00004f99

00002794 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    2794:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    279a:	4b13      	ldr	r3, [pc, #76]	; (27e8 <grid_module_common_init+0x54>)
    279c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    27a0:	4b12      	ldr	r3, [pc, #72]	; (27ec <grid_module_common_init+0x58>)
    27a2:	4798      	blx	r3
    27a4:	b178      	cbz	r0, 27c6 <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    27a6:	4b11      	ldr	r3, [pc, #68]	; (27ec <grid_module_common_init+0x58>)
    27a8:	4798      	blx	r3
    27aa:	2880      	cmp	r0, #128	; 0x80
    27ac:	d00f      	beq.n	27ce <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    27ae:	4b0f      	ldr	r3, [pc, #60]	; (27ec <grid_module_common_init+0x58>)
    27b0:	4798      	blx	r3
    27b2:	2840      	cmp	r0, #64	; 0x40
    27b4:	d00f      	beq.n	27d6 <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    27b6:	4b0d      	ldr	r3, [pc, #52]	; (27ec <grid_module_common_init+0x58>)
    27b8:	4798      	blx	r3
    27ba:	28c0      	cmp	r0, #192	; 0xc0
    27bc:	d00f      	beq.n	27de <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    27be:	480c      	ldr	r0, [pc, #48]	; (27f0 <grid_module_common_init+0x5c>)
    27c0:	4b0c      	ldr	r3, [pc, #48]	; (27f4 <grid_module_common_init+0x60>)
    27c2:	4798      	blx	r3
    27c4:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    27c6:	480c      	ldr	r0, [pc, #48]	; (27f8 <grid_module_common_init+0x64>)
    27c8:	4b0c      	ldr	r3, [pc, #48]	; (27fc <grid_module_common_init+0x68>)
    27ca:	4798      	blx	r3
    27cc:	e7eb      	b.n	27a6 <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    27ce:	480a      	ldr	r0, [pc, #40]	; (27f8 <grid_module_common_init+0x64>)
    27d0:	4b0b      	ldr	r3, [pc, #44]	; (2800 <grid_module_common_init+0x6c>)
    27d2:	4798      	blx	r3
    27d4:	e7eb      	b.n	27ae <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    27d6:	4808      	ldr	r0, [pc, #32]	; (27f8 <grid_module_common_init+0x64>)
    27d8:	4b0a      	ldr	r3, [pc, #40]	; (2804 <grid_module_common_init+0x70>)
    27da:	4798      	blx	r3
    27dc:	e7eb      	b.n	27b6 <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    27de:	4806      	ldr	r0, [pc, #24]	; (27f8 <grid_module_common_init+0x64>)
    27e0:	4b09      	ldr	r3, [pc, #36]	; (2808 <grid_module_common_init+0x74>)
    27e2:	4798      	blx	r3
    27e4:	e7eb      	b.n	27be <grid_module_common_init+0x2a>
    27e6:	bf00      	nop
    27e8:	41008000 	.word	0x41008000
    27ec:	00003e49 	.word	0x00003e49
    27f0:	20003280 	.word	0x20003280
    27f4:	00004095 	.word	0x00004095
    27f8:	20003270 	.word	0x20003270
    27fc:	000038c5 	.word	0x000038c5
    2800:	00002aa9 	.word	0x00002aa9
    2804:	00003521 	.word	0x00003521
    2808:	00002f99 	.word	0x00002f99

0000280c <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    280c:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    280e:	4803      	ldr	r0, [pc, #12]	; (281c <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    2810:	4c03      	ldr	r4, [pc, #12]	; (2820 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    2812:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2814:	4803      	ldr	r0, [pc, #12]	; (2824 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    2816:	47a0      	blx	r4
    2818:	bd10      	pop	{r4, pc}
    281a:	bf00      	nop
    281c:	20000fc8 	.word	0x20000fc8
    2820:	00004d65 	.word	0x00004d65
    2824:	2000119c 	.word	0x2000119c

00002828 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    2828:	4b84      	ldr	r3, [pc, #528]	; (2a3c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	2b00      	cmp	r3, #0
    282e:	f000 80ef 	beq.w	2a10 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    2832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2836:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2838:	2300      	movs	r3, #0
    283a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    283e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    2842:	4b7e      	ldr	r3, [pc, #504]	; (2a3c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    2844:	785a      	ldrb	r2, [r3, #1]
    2846:	3208      	adds	r2, #8
    2848:	487d      	ldr	r0, [pc, #500]	; (2a40 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x218>)
    284a:	5c85      	ldrb	r5, [r0, r2]
    284c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    284e:	785a      	ldrb	r2, [r3, #1]
    2850:	b2d2      	uxtb	r2, r2
    2852:	5c84      	ldrb	r4, [r0, r2]
    2854:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    2856:	785a      	ldrb	r2, [r3, #1]
    2858:	3201      	adds	r2, #1
    285a:	b2d2      	uxtb	r2, r2
    285c:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    285e:	785a      	ldrb	r2, [r3, #1]
    2860:	f002 0207 	and.w	r2, r2, #7
    2864:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    2866:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2868:	f013 0f01 	tst.w	r3, #1
    286c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2870:	4b74      	ldr	r3, [pc, #464]	; (2a44 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    2872:	bf14      	ite	ne
    2874:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2878:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    287c:	4b6f      	ldr	r3, [pc, #444]	; (2a3c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    287e:	785b      	ldrb	r3, [r3, #1]
    2880:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2884:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2888:	4b6e      	ldr	r3, [pc, #440]	; (2a44 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    288a:	bf14      	ite	ne
    288c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2890:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    2894:	4b69      	ldr	r3, [pc, #420]	; (2a3c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    2896:	785b      	ldrb	r3, [r3, #1]
    2898:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    289c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    28a0:	4b68      	ldr	r3, [pc, #416]	; (2a44 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    28a2:	bf14      	ite	ne
    28a4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    28a8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    28ac:	2302      	movs	r3, #2
    28ae:	f10d 0206 	add.w	r2, sp, #6
    28b2:	2100      	movs	r1, #0
    28b4:	4864      	ldr	r0, [pc, #400]	; (2a48 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    28b6:	4e65      	ldr	r6, [pc, #404]	; (2a4c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x224>)
    28b8:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    28ba:	2302      	movs	r3, #2
    28bc:	aa01      	add	r2, sp, #4
    28be:	2100      	movs	r1, #0
    28c0:	4863      	ldr	r0, [pc, #396]	; (2a50 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x228>)
    28c2:	47b0      	blx	r6
	
	uint8_t adcresult_0_valid = 0;
	
	if (adcresult_0>60000){
    28c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    28c8:	f64e 2260 	movw	r2, #60000	; 0xea60
    28cc:	4293      	cmp	r3, r2
    28ce:	f240 80a5 	bls.w	2a1c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f4>
		adcresult_0 = 0;
    28d2:	2300      	movs	r3, #0
    28d4:	f8ad 3006 	strh.w	r3, [sp, #6]
		adcresult_0_valid = 1;
    28d8:	2001      	movs	r0, #1
		adcresult_0_valid = 1;
	}
		
	uint8_t adcresult_1_valid = 0;
	
	if (adcresult_1>60000){
    28da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    28de:	f64e 2260 	movw	r2, #60000	; 0xea60
    28e2:	4293      	cmp	r3, r2
    28e4:	f240 80a2 	bls.w	2a2c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x204>
		adcresult_1 = 0;
    28e8:	2300      	movs	r3, #0
    28ea:	f8ad 3004 	strh.w	r3, [sp, #4]
		adcresult_1_valid = 1;
    28ee:	2601      	movs	r6, #1
		adcresult_1_valid = 1;
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0] && adcresult_0_valid){
    28f0:	012f      	lsls	r7, r5, #4
    28f2:	4b58      	ldr	r3, [pc, #352]	; (2a54 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    28f4:	689b      	ldr	r3, [r3, #8]
    28f6:	443b      	add	r3, r7
    28f8:	68da      	ldr	r2, [r3, #12]
    28fa:	7812      	ldrb	r2, [r2, #0]
    28fc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2900:	4291      	cmp	r1, r2
    2902:	d03c      	beq.n	297e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
    2904:	2800      	cmp	r0, #0
    2906:	d03a      	beq.n	297e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2908:	2a00      	cmp	r2, #0
    290a:	bf0c      	ite	eq
    290c:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2910:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    2914:	6858      	ldr	r0, [r3, #4]
    2916:	bf0c      	ite	eq
    2918:	2290      	moveq	r2, #144	; 0x90
    291a:	2280      	movne	r2, #128	; 0x80
    291c:	2102      	movs	r1, #2
    291e:	3005      	adds	r0, #5
    2920:	f8df b134 	ldr.w	fp, [pc, #308]	; 2a58 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>
    2924:	47d8      	blx	fp
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    2926:	f8df 812c 	ldr.w	r8, [pc, #300]	; 2a54 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>
    292a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    292e:	443b      	add	r3, r7
    2930:	6858      	ldr	r0, [r3, #4]
    2932:	462a      	mov	r2, r5
    2934:	2102      	movs	r1, #2
    2936:	3007      	adds	r0, #7
    2938:	47d8      	blx	fp
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    293a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    293e:	443b      	add	r3, r7
    2940:	6858      	ldr	r0, [r3, #4]
    2942:	464a      	mov	r2, r9
    2944:	2102      	movs	r1, #2
    2946:	3009      	adds	r0, #9
    2948:	47d8      	blx	fp

		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    294a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    294e:	443b      	add	r3, r7
    2950:	68db      	ldr	r3, [r3, #12]
    2952:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    2956:	4629      	mov	r1, r5
    2958:	4640      	mov	r0, r8
    295a:	f8df a104 	ldr.w	sl, [pc, #260]	; 2a60 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>
    295e:	47d0      	blx	sl
		
		
				
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0 + 16].payload[9], 2, actuator); // LED
    2960:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2964:	441f      	add	r7, r3
    2966:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
    296a:	ea4f 0249 	mov.w	r2, r9, lsl #1
    296e:	2102      	movs	r1, #2
    2970:	3009      	adds	r0, #9
    2972:	47d8      	blx	fp

		grid_report_ui_set_changed_flag(mod, adc_index_0 + 16);
    2974:	f105 0110 	add.w	r1, r5, #16
    2978:	b2c9      	uxtb	r1, r1
    297a:	4640      	mov	r0, r8
    297c:	47d0      	blx	sl
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0] && adcresult_1_valid){
    297e:	0125      	lsls	r5, r4, #4
    2980:	4b34      	ldr	r3, [pc, #208]	; (2a54 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    2982:	689b      	ldr	r3, [r3, #8]
    2984:	442b      	add	r3, r5
    2986:	68da      	ldr	r2, [r3, #12]
    2988:	7812      	ldrb	r2, [r2, #0]
    298a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    298e:	4291      	cmp	r1, r2
    2990:	d036      	beq.n	2a00 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>
    2992:	2e00      	cmp	r6, #0
    2994:	d034      	beq.n	2a00 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2996:	2a00      	cmp	r2, #0
    2998:	bf0c      	ite	eq
    299a:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    299e:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    29a2:	6858      	ldr	r0, [r3, #4]
    29a4:	bf0c      	ite	eq
    29a6:	2290      	moveq	r2, #144	; 0x90
    29a8:	2280      	movne	r2, #128	; 0x80
    29aa:	2102      	movs	r1, #2
    29ac:	3005      	adds	r0, #5
    29ae:	4f2a      	ldr	r7, [pc, #168]	; (2a58 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    29b0:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    29b2:	4e28      	ldr	r6, [pc, #160]	; (2a54 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    29b4:	68b3      	ldr	r3, [r6, #8]
    29b6:	442b      	add	r3, r5
    29b8:	6858      	ldr	r0, [r3, #4]
    29ba:	4622      	mov	r2, r4
    29bc:	2102      	movs	r1, #2
    29be:	3007      	adds	r0, #7
    29c0:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    29c2:	68b3      	ldr	r3, [r6, #8]
    29c4:	442b      	add	r3, r5
    29c6:	6858      	ldr	r0, [r3, #4]
    29c8:	4642      	mov	r2, r8
    29ca:	2102      	movs	r1, #2
    29cc:	3009      	adds	r0, #9
    29ce:	47b8      	blx	r7
			
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    29d0:	68b3      	ldr	r3, [r6, #8]
    29d2:	442b      	add	r3, r5
    29d4:	68db      	ldr	r3, [r3, #12]
    29d6:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    29da:	4621      	mov	r1, r4
    29dc:	4630      	mov	r0, r6
    29de:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2a60 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>
    29e2:	47c8      	blx	r9
		
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1 + 16].payload[9], 2, actuator); // LED
    29e4:	68b3      	ldr	r3, [r6, #8]
    29e6:	441d      	add	r5, r3
    29e8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    29ec:	ea4f 0248 	mov.w	r2, r8, lsl #1
    29f0:	2102      	movs	r1, #2
    29f2:	3009      	adds	r0, #9
    29f4:	47b8      	blx	r7

		grid_report_ui_set_changed_flag(mod, adc_index_1 + 16);
    29f6:	f104 0110 	add.w	r1, r4, #16
    29fa:	b2c9      	uxtb	r1, r1
    29fc:	4630      	mov	r0, r6
    29fe:	47c8      	blx	r9
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    2a00:	2200      	movs	r2, #0
    2a02:	4b0e      	ldr	r3, [pc, #56]	; (2a3c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    2a04:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2a06:	4b15      	ldr	r3, [pc, #84]	; (2a5c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x234>)
    2a08:	4798      	blx	r3
}
    2a0a:	b003      	add	sp, #12
    2a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    2a10:	4a0a      	ldr	r2, [pc, #40]	; (2a3c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    2a12:	7813      	ldrb	r3, [r2, #0]
    2a14:	3301      	adds	r3, #1
    2a16:	b2db      	uxtb	r3, r3
    2a18:	7013      	strb	r3, [r2, #0]
    2a1a:	4770      	bx	lr
	else if (adcresult_0<200){
    2a1c:	2bc7      	cmp	r3, #199	; 0xc7
		adcresult_0 = 127;
    2a1e:	bf9d      	ittte	ls
    2a20:	237f      	movls	r3, #127	; 0x7f
    2a22:	f8ad 3006 	strhls.w	r3, [sp, #6]
		adcresult_0_valid = 1;
    2a26:	2001      	movls	r0, #1
	uint8_t adcresult_0_valid = 0;
    2a28:	2000      	movhi	r0, #0
    2a2a:	e756      	b.n	28da <grid_module_bu16_revb_hardware_transfer_complete_cb+0xb2>
	else if (adcresult_1<200){
    2a2c:	2bc7      	cmp	r3, #199	; 0xc7
		adcresult_1 = 127;
    2a2e:	bf9d      	ittte	ls
    2a30:	237f      	movls	r3, #127	; 0x7f
    2a32:	f8ad 3004 	strhls.w	r3, [sp, #4]
		adcresult_1_valid = 1;
    2a36:	2601      	movls	r6, #1
	uint8_t adcresult_1_valid = 0;
    2a38:	2600      	movhi	r6, #0
    2a3a:	e759      	b.n	28f0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xc8>
    2a3c:	20000644 	.word	0x20000644
    2a40:	20000300 	.word	0x20000300
    2a44:	41008000 	.word	0x41008000
    2a48:	20000fc8 	.word	0x20000fc8
    2a4c:	00004c85 	.word	0x00004c85
    2a50:	2000119c 	.word	0x2000119c
    2a54:	20003270 	.word	0x20003270
    2a58:	00003e11 	.word	0x00003e11
    2a5c:	0000280d 	.word	0x0000280d
    2a60:	0000454f 	.word	0x0000454f

00002a64 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    2a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    2a66:	4f0b      	ldr	r7, [pc, #44]	; (2a94 <grid_module_bu16_revb_hardware_init+0x30>)
    2a68:	4c0b      	ldr	r4, [pc, #44]	; (2a98 <grid_module_bu16_revb_hardware_init+0x34>)
    2a6a:	463b      	mov	r3, r7
    2a6c:	2200      	movs	r2, #0
    2a6e:	4611      	mov	r1, r2
    2a70:	4620      	mov	r0, r4
    2a72:	4e0a      	ldr	r6, [pc, #40]	; (2a9c <grid_module_bu16_revb_hardware_init+0x38>)
    2a74:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    2a76:	4d0a      	ldr	r5, [pc, #40]	; (2aa0 <grid_module_bu16_revb_hardware_init+0x3c>)
    2a78:	463b      	mov	r3, r7
    2a7a:	2200      	movs	r2, #0
    2a7c:	4611      	mov	r1, r2
    2a7e:	4628      	mov	r0, r5
    2a80:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2a82:	2100      	movs	r1, #0
    2a84:	4620      	mov	r0, r4
    2a86:	4c07      	ldr	r4, [pc, #28]	; (2aa4 <grid_module_bu16_revb_hardware_init+0x40>)
    2a88:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    2a8a:	2100      	movs	r1, #0
    2a8c:	4628      	mov	r0, r5
    2a8e:	47a0      	blx	r4
    2a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a92:	bf00      	nop
    2a94:	00002829 	.word	0x00002829
    2a98:	20000fc8 	.word	0x20000fc8
    2a9c:	00004c05 	.word	0x00004c05
    2aa0:	2000119c 	.word	0x2000119c
    2aa4:	00004bc5 	.word	0x00004bc5

00002aa8 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    2aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2aac:	b095      	sub	sp, #84	; 0x54
    2aae:	4681      	mov	r9, r0

	grid_led_init(&grid_led_state, 16);
    2ab0:	2110      	movs	r1, #16
    2ab2:	482d      	ldr	r0, [pc, #180]	; (2b68 <grid_module_bu16_revb_init+0xc0>)
    2ab4:	4b2d      	ldr	r3, [pc, #180]	; (2b6c <grid_module_bu16_revb_init+0xc4>)
    2ab6:	4798      	blx	r3
	grid_ui_model_init(mod, 32);
    2ab8:	2120      	movs	r1, #32
    2aba:	4648      	mov	r0, r9
    2abc:	4b2c      	ldr	r3, [pc, #176]	; (2b70 <grid_module_bu16_revb_init+0xc8>)
    2abe:	4798      	blx	r3
    2ac0:	f10d 0810 	add.w	r8, sp, #16
    2ac4:	2600      	movs	r6, #0
		
	for(uint8_t i=0; i<32; i++){
				
		uint8_t payload_template[30] = {0};
    2ac6:	4634      	mov	r4, r6
    2ac8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2b94 <grid_module_bu16_revb_init+0xec>
    2acc:	e027      	b.n	2b1e <grid_module_bu16_revb_init+0x76>
		}
		else{ // LED
	
			type = GRID_REPORT_TYPE_LOCAL;

			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2ace:	2303      	movs	r3, #3
    2ad0:	9304      	str	r3, [sp, #16]
    2ad2:	9403      	str	r4, [sp, #12]
    2ad4:	f898 2000 	ldrb.w	r2, [r8]
    2ad8:	9202      	str	r2, [sp, #8]
    2ada:	2263      	movs	r2, #99	; 0x63
    2adc:	9201      	str	r2, [sp, #4]
    2ade:	2501      	movs	r5, #1
    2ae0:	9500      	str	r5, [sp, #0]
    2ae2:	2202      	movs	r2, #2
    2ae4:	4923      	ldr	r1, [pc, #140]	; (2b74 <grid_module_bu16_revb_init+0xcc>)
    2ae6:	a80c      	add	r0, sp, #48	; 0x30
    2ae8:	f8df b098 	ldr.w	fp, [pc, #152]	; 2b84 <grid_module_bu16_revb_init+0xdc>
    2aec:	47d8      	blx	fp
			
			
			
		}
		
		uint8_t payload_length = strlen(payload_template);
    2aee:	a80c      	add	r0, sp, #48	; 0x30
    2af0:	4b21      	ldr	r3, [pc, #132]	; (2b78 <grid_module_bu16_revb_init+0xd0>)
    2af2:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2af4:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    2af8:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    2afc:	2302      	movs	r3, #2
    2afe:	9302      	str	r3, [sp, #8]
    2b00:	ab07      	add	r3, sp, #28
    2b02:	9301      	str	r3, [sp, #4]
    2b04:	b2c0      	uxtb	r0, r0
    2b06:	9000      	str	r0, [sp, #0]
    2b08:	ab0c      	add	r3, sp, #48	; 0x30
    2b0a:	462a      	mov	r2, r5
    2b0c:	4639      	mov	r1, r7
    2b0e:	4648      	mov	r0, r9
    2b10:	4d1a      	ldr	r5, [pc, #104]	; (2b7c <grid_module_bu16_revb_init+0xd4>)
    2b12:	47a8      	blx	r5
    2b14:	3601      	adds	r6, #1
    2b16:	f108 0801 	add.w	r8, r8, #1
	for(uint8_t i=0; i<32; i++){
    2b1a:	2e20      	cmp	r6, #32
    2b1c:	d01a      	beq.n	2b54 <grid_module_bu16_revb_init+0xac>
    2b1e:	b2f7      	uxtb	r7, r6
		uint8_t payload_template[30] = {0};
    2b20:	221e      	movs	r2, #30
    2b22:	4621      	mov	r1, r4
    2b24:	a80c      	add	r0, sp, #48	; 0x30
    2b26:	47d0      	blx	sl
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2b28:	4b15      	ldr	r3, [pc, #84]	; (2b80 <grid_module_bu16_revb_init+0xd8>)
    2b2a:	ad08      	add	r5, sp, #32
    2b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (i<16){ //BUTTON
    2b32:	2f0f      	cmp	r7, #15
    2b34:	d8cb      	bhi.n	2ace <grid_module_bu16_revb_init+0x26>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2b36:	2303      	movs	r3, #3
    2b38:	9304      	str	r3, [sp, #16]
    2b3a:	9403      	str	r4, [sp, #12]
    2b3c:	9602      	str	r6, [sp, #8]
    2b3e:	2390      	movs	r3, #144	; 0x90
    2b40:	9301      	str	r3, [sp, #4]
    2b42:	9400      	str	r4, [sp, #0]
    2b44:	4623      	mov	r3, r4
    2b46:	2202      	movs	r2, #2
    2b48:	490a      	ldr	r1, [pc, #40]	; (2b74 <grid_module_bu16_revb_init+0xcc>)
    2b4a:	a80c      	add	r0, sp, #48	; 0x30
    2b4c:	4d0d      	ldr	r5, [pc, #52]	; (2b84 <grid_module_bu16_revb_init+0xdc>)
    2b4e:	47a8      	blx	r5
			type = GRID_REPORT_TYPE_BROADCAST;
    2b50:	2502      	movs	r5, #2
    2b52:	e7cc      	b.n	2aee <grid_module_bu16_revb_init+0x46>
		

	}
	
	grid_report_sys_init(mod);
    2b54:	4648      	mov	r0, r9
    2b56:	4b0c      	ldr	r3, [pc, #48]	; (2b88 <grid_module_bu16_revb_init+0xe0>)
    2b58:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    2b5a:	4b0c      	ldr	r3, [pc, #48]	; (2b8c <grid_module_bu16_revb_init+0xe4>)
    2b5c:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    2b5e:	4b0c      	ldr	r3, [pc, #48]	; (2b90 <grid_module_bu16_revb_init+0xe8>)
    2b60:	4798      	blx	r3

};
    2b62:	b015      	add	sp, #84	; 0x54
    2b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b68:	200077d4 	.word	0x200077d4
    2b6c:	000026a5 	.word	0x000026a5
    2b70:	00004245 	.word	0x00004245
    2b74:	0000df80 	.word	0x0000df80
    2b78:	0000cd0d 	.word	0x0000cd0d
    2b7c:	00004309 	.word	0x00004309
    2b80:	0000df70 	.word	0x0000df70
    2b84:	0000ccc5 	.word	0x0000ccc5
    2b88:	0000432d 	.word	0x0000432d
    2b8c:	00002a65 	.word	0x00002a65
    2b90:	0000280d 	.word	0x0000280d
    2b94:	0000c8d7 	.word	0x0000c8d7

00002b98 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    2b98:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2b9e:	4b06      	ldr	r3, [pc, #24]	; (2bb8 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    2ba0:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    2ba2:	4c06      	ldr	r4, [pc, #24]	; (2bbc <grid_module_en16_reva_hardware_start_transfer+0x24>)
    2ba4:	4620      	mov	r0, r4
    2ba6:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    2ba8:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    2baa:	2308      	movs	r3, #8
    2bac:	4a05      	ldr	r2, [pc, #20]	; (2bc4 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    2bae:	4906      	ldr	r1, [pc, #24]	; (2bc8 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    2bb0:	4620      	mov	r0, r4
    2bb2:	4c06      	ldr	r4, [pc, #24]	; (2bcc <grid_module_en16_reva_hardware_start_transfer+0x34>)
    2bb4:	47a0      	blx	r4
    2bb6:	bd10      	pop	{r4, pc}
    2bb8:	41008000 	.word	0x41008000
    2bbc:	20000ebc 	.word	0x20000ebc
    2bc0:	0000526d 	.word	0x0000526d
    2bc4:	20002258 	.word	0x20002258
    2bc8:	20000310 	.word	0x20000310
    2bcc:	0000530d 	.word	0x0000530d

00002bd0 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    2bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bd4:	ed2d 8b04 	vpush	{d8-d9}
    2bd8:	b085      	sub	sp, #20
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2bda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2bde:	4b4c      	ldr	r3, [pc, #304]	; (2d10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x140>)
    2be0:	615a      	str	r2, [r3, #20]
	// Set the shift registers to continuously load data until new transaction is issued
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);


	uint8_t bank = 0;
	if (grid_sys_state.bank_select == 1){
    2be2:	4b4c      	ldr	r3, [pc, #304]	; (2d14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x144>)
    2be4:	7a5a      	ldrb	r2, [r3, #9]
    2be6:	b2d2      	uxtb	r2, r2
    2be8:	2a01      	cmp	r2, #1
    2bea:	bf14      	ite	ne
    2bec:	2200      	movne	r2, #0
    2bee:	2201      	moveq	r2, #1
    2bf0:	4611      	mov	r1, r2
    2bf2:	9201      	str	r2, [sp, #4]
		bank = 1;
	}

	uint8_t bank_changed = 0;
	
	grid_sys_state.bank_changed;
    2bf4:	7a9a      	ldrb	r2, [r3, #10]
	
	if (grid_sys_state.bank_changed){
    2bf6:	7a9b      	ldrb	r3, [r3, #10]
    2bf8:	b1e3      	cbz	r3, 2c34 <grid_module_en16_reva_hardware_transfer_complete_cb+0x64>
		grid_sys_state.bank_changed = 0;
    2bfa:	2200      	movs	r2, #0
    2bfc:	4b45      	ldr	r3, [pc, #276]	; (2d14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x144>)
    2bfe:	729a      	strb	r2, [r3, #10]
    2c00:	2420      	movs	r4, #32
    2c02:	f44f 7500 	mov.w	r5, #512	; 0x200
		bank_changed = 1;			
		
		for (uint8_t i = 0; i<16; i++)
		{
			grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, mod->report_ui_array[i+16+16].helper[bank]); // LED
    2c06:	4e44      	ldr	r6, [pc, #272]	; (2d18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x148>)
    2c08:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2d2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x15c>
			grid_report_ui_set_changed_flag(mod, i+16+16);
    2c0c:	4f43      	ldr	r7, [pc, #268]	; (2d1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x14c>)
    2c0e:	4689      	mov	r9, r1
			grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, mod->report_ui_array[i+16+16].helper[bank]); // LED
    2c10:	68b3      	ldr	r3, [r6, #8]
    2c12:	442b      	add	r3, r5
    2c14:	68da      	ldr	r2, [r3, #12]
    2c16:	6858      	ldr	r0, [r3, #4]
    2c18:	f812 2009 	ldrb.w	r2, [r2, r9]
    2c1c:	2102      	movs	r1, #2
    2c1e:	3009      	adds	r0, #9
    2c20:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, i+16+16);
    2c22:	4621      	mov	r1, r4
    2c24:	4630      	mov	r0, r6
    2c26:	47b8      	blx	r7
    2c28:	3510      	adds	r5, #16
    2c2a:	3401      	adds	r4, #1
    2c2c:	b2e4      	uxtb	r4, r4
		for (uint8_t i = 0; i<16; i++)
    2c2e:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    2c32:	d1ed      	bne.n	2c10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
		grid_sys_state.bank_changed = 0;
    2c34:	f04f 0b00 	mov.w	fp, #0
				if (elapsed_time<20){
					elapsed_time = 20;
				}
			
				
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    2c38:	ed9f 9b31 	vldr	d9, [pc, #196]	; 2d00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x130>
    2c3c:	ed9f 8b32 	vldr	d8, [pc, #200]	; 2d08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x138>
    2c40:	e07f      	b.n	2d42 <grid_module_en16_reva_hardware_transfer_complete_cb+0x172>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    2c42:	4937      	ldr	r1, [pc, #220]	; (2d20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    2c44:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    2c48:	78c9      	ldrb	r1, [r1, #3]
    2c4a:	42d1      	cmn	r1, r2
    2c4c:	d405      	bmi.n	2c5a <grid_module_en16_reva_hardware_transfer_complete_cb+0x8a>
						grid_ui_encoder_array[i].rotation_value += xi;
    2c4e:	4a34      	ldr	r2, [pc, #208]	; (2d20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    2c50:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    2c54:	440b      	add	r3, r1
    2c56:	70d3      	strb	r3, [r2, #3]
    2c58:	e13a      	b.n	2ed0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    2c5a:	4b31      	ldr	r3, [pc, #196]	; (2d20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    2c5c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2c60:	2200      	movs	r2, #0
    2c62:	70da      	strb	r2, [r3, #3]
    2c64:	e134      	b.n	2ed0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    2c66:	4b2e      	ldr	r3, [pc, #184]	; (2d20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    2c68:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2c6c:	227f      	movs	r2, #127	; 0x7f
    2c6e:	70da      	strb	r2, [r3, #3]
    2c70:	e12e      	b.n	2ed0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
								
					
				value = mod->report_ui_array[i+16].helper[bank];
				
				if (value + delta*velocityfactor < 0){
					value = 0;
    2c72:	2400      	movs	r4, #0
    2c74:	e000      	b.n	2c78 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa8>
				}
				else if (value + delta*velocityfactor > 127){
					value = 127;
    2c76:	247f      	movs	r4, #127	; 0x7f
				else{
					value += delta*velocityfactor;
				}
								

				if (value != mod->report_ui_array[i+16].helper[bank]){
    2c78:	4294      	cmp	r4, r2
    2c7a:	d05d      	beq.n	2d38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[5], 2, command);
    2c7c:	6858      	ldr	r0, [r3, #4]
    2c7e:	22b0      	movs	r2, #176	; 0xb0
    2c80:	2102      	movs	r1, #2
    2c82:	3005      	adds	r0, #5
    2c84:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2d2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x15c>
    2c88:	47c0      	blx	r8
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[7], 2, i);
    2c8a:	4f23      	ldr	r7, [pc, #140]	; (2d18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x148>)
    2c8c:	68bb      	ldr	r3, [r7, #8]
    2c8e:	4433      	add	r3, r6
    2c90:	6858      	ldr	r0, [r3, #4]
    2c92:	462a      	mov	r2, r5
    2c94:	2102      	movs	r1, #2
    2c96:	3007      	adds	r0, #7
    2c98:	47c0      	blx	r8
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[9], 2, value);
    2c9a:	68bb      	ldr	r3, [r7, #8]
    2c9c:	4433      	add	r3, r6
    2c9e:	6858      	ldr	r0, [r3, #4]
    2ca0:	4622      	mov	r2, r4
    2ca2:	2102      	movs	r1, #2
    2ca4:	3009      	adds	r0, #9
    2ca6:	47c0      	blx	r8
					
					mod->report_ui_array[i+16].helper[bank] = value;
    2ca8:	68bb      	ldr	r3, [r7, #8]
    2caa:	4433      	add	r3, r6
    2cac:	68db      	ldr	r3, [r3, #12]
    2cae:	9a01      	ldr	r2, [sp, #4]
    2cb0:	549c      	strb	r4, [r3, r2]
					grid_report_ui_set_changed_flag(mod, i+16);
    2cb2:	f105 0110 	add.w	r1, r5, #16
    2cb6:	b2c9      	uxtb	r1, r1
    2cb8:	4638      	mov	r0, r7
    2cba:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2d1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x14c>
    2cbe:	47c8      	blx	r9
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, value*2); // LED
    2cc0:	f506 7680 	add.w	r6, r6, #256	; 0x100
    2cc4:	0064      	lsls	r4, r4, #1
    2cc6:	68bb      	ldr	r3, [r7, #8]
    2cc8:	4433      	add	r3, r6
    2cca:	6858      	ldr	r0, [r3, #4]
    2ccc:	4622      	mov	r2, r4
    2cce:	2102      	movs	r1, #2
    2cd0:	3009      	adds	r0, #9
    2cd2:	47c0      	blx	r8
					mod->report_ui_array[i+16+16].helper[bank] = value*2;
    2cd4:	68bb      	ldr	r3, [r7, #8]
    2cd6:	441e      	add	r6, r3
    2cd8:	68f3      	ldr	r3, [r6, #12]
    2cda:	9a01      	ldr	r2, [sp, #4]
    2cdc:	549c      	strb	r4, [r3, r2]
					grid_report_ui_set_changed_flag(mod, i+16+16);
    2cde:	f105 0120 	add.w	r1, r5, #32
    2ce2:	b2c9      	uxtb	r1, r1
    2ce4:	4638      	mov	r0, r7
    2ce6:	47c8      	blx	r9
    2ce8:	e026      	b.n	2d38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    2cea:	2200      	movs	r2, #0
    2cec:	4b0d      	ldr	r3, [pc, #52]	; (2d24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>)
    2cee:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2cf0:	4b0d      	ldr	r3, [pc, #52]	; (2d28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x158>)
    2cf2:	4798      	blx	r3
}
    2cf4:	b005      	add	sp, #20
    2cf6:	ecbd 8b04 	vpop	{d8-d9}
    2cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cfe:	bf00      	nop
    2d00:	00000000 	.word	0x00000000
    2d04:	40ed4c00 	.word	0x40ed4c00
    2d08:	00000000 	.word	0x00000000
    2d0c:	3ff00000 	.word	0x3ff00000
    2d10:	41008000 	.word	0x41008000
    2d14:	20003280 	.word	0x20003280
    2d18:	20003270 	.word	0x20003270
    2d1c:	0000454f 	.word	0x0000454f
    2d20:	20007804 	.word	0x20007804
    2d24:	20007800 	.word	0x20007800
    2d28:	00002b99 	.word	0x00002b99
    2d2c:	00003e11 	.word	0x00003e11
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2d30:	4971      	ldr	r1, [pc, #452]	; (2ef8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2d32:	eb01 1505 	add.w	r5, r1, r5, lsl #4
    2d36:	73ac      	strb	r4, [r5, #14]
    2d38:	f10b 0b01 	add.w	fp, fp, #1
	for (uint8_t j=0; j<16; j++){
    2d3c:	f1bb 0f10 	cmp.w	fp, #16
    2d40:	d0d3      	beq.n	2cea <grid_module_en16_reva_hardware_transfer_complete_cb+0x11a>
    2d42:	fa5f f28b 	uxtb.w	r2, fp
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    2d46:	0853      	lsrs	r3, r2, #1
    2d48:	496c      	ldr	r1, [pc, #432]	; (2efc <grid_module_en16_reva_hardware_transfer_complete_cb+0x32c>)
    2d4a:	5ccc      	ldrb	r4, [r1, r3]
    2d4c:	f002 0301 	and.w	r3, r2, #1
    2d50:	009b      	lsls	r3, r3, #2
    2d52:	411c      	asrs	r4, r3
    2d54:	b2e4      	uxtb	r4, r4
    2d56:	f004 060f 	and.w	r6, r4, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    2d5a:	4b69      	ldr	r3, [pc, #420]	; (2f00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x330>)
    2d5c:	f813 300b 	ldrb.w	r3, [r3, fp]
    2d60:	b2db      	uxtb	r3, r3
		if (old_value != new_value){
    2d62:	429e      	cmp	r6, r3
    2d64:	d0e8      	beq.n	2d38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    2d66:	4b67      	ldr	r3, [pc, #412]	; (2f04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x334>)
    2d68:	f81b 5003 	ldrb.w	r5, [fp, r3]
			UI_SPI_DEBUG = j;
    2d6c:	4b66      	ldr	r3, [pc, #408]	; (2f08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x338>)
    2d6e:	701a      	strb	r2, [r3, #0]
			uint8_t button_value = new_value>>2;
    2d70:	08b3      	lsrs	r3, r6, #2
			uint8_t phase_a = (new_value>>1)&1;
    2d72:	f3c6 0640 	ubfx	r6, r6, #1, #1
			uint8_t phase_b = (new_value)&1;
    2d76:	f004 0401 	and.w	r4, r4, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    2d7a:	4a5f      	ldr	r2, [pc, #380]	; (2ef8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2d7c:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    2d80:	7852      	ldrb	r2, [r2, #1]
    2d82:	429a      	cmp	r2, r3
    2d84:	d04f      	beq.n	2e26 <grid_module_en16_reva_hardware_transfer_complete_cb+0x256>
				grid_ui_encoder_array[i].button_changed = 1;
    2d86:	4a5c      	ldr	r2, [pc, #368]	; (2ef8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2d88:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    2d8c:	2101      	movs	r1, #1
    2d8e:	7091      	strb	r1, [r2, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    2d90:	7053      	strb	r3, [r2, #1]
					velocity = 0;
    2d92:	2b00      	cmp	r3, #0
    2d94:	bf0c      	ite	eq
    2d96:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    2d9a:	f04f 0a00 	movne.w	sl, #0
				uint8_t actuator = 2*velocity;
    2d9e:	fa0a f301 	lsl.w	r3, sl, r1
    2da2:	9300      	str	r3, [sp, #0]
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[5], 2, command);
    2da4:	ea4f 1705 	mov.w	r7, r5, lsl #4
    2da8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 2f28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>
    2dac:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2db0:	443b      	add	r3, r7
    2db2:	6858      	ldr	r0, [r3, #4]
    2db4:	bf0c      	ite	eq
    2db6:	2290      	moveq	r2, #144	; 0x90
    2db8:	2280      	movne	r2, #128	; 0x80
    2dba:	2102      	movs	r1, #2
    2dbc:	3005      	adds	r0, #5
    2dbe:	f8df 916c 	ldr.w	r9, [pc, #364]	; 2f2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x35c>
    2dc2:	47c8      	blx	r9
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[7], 2, i);
    2dc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2dc8:	443b      	add	r3, r7
    2dca:	6858      	ldr	r0, [r3, #4]
    2dcc:	462a      	mov	r2, r5
    2dce:	2102      	movs	r1, #2
    2dd0:	3007      	adds	r0, #7
    2dd2:	47c8      	blx	r9
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[9], 2, velocity);
    2dd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2dd8:	443b      	add	r3, r7
    2dda:	6858      	ldr	r0, [r3, #4]
    2ddc:	4652      	mov	r2, sl
    2dde:	2102      	movs	r1, #2
    2de0:	3009      	adds	r0, #9
    2de2:	47c8      	blx	r9
				mod->report_ui_array[i].helper[0] = velocity;
    2de4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2de8:	443b      	add	r3, r7
    2dea:	68db      	ldr	r3, [r3, #12]
    2dec:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, i);
    2df0:	4629      	mov	r1, r5
    2df2:	4640      	mov	r0, r8
    2df4:	f8df a138 	ldr.w	sl, [pc, #312]	; 2f30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x360>
    2df8:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16+16].payload[9], 2, actuator); // BUTTONLED
    2dfa:	f507 7740 	add.w	r7, r7, #768	; 0x300
    2dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2e02:	443b      	add	r3, r7
    2e04:	6858      	ldr	r0, [r3, #4]
    2e06:	9a00      	ldr	r2, [sp, #0]
    2e08:	2102      	movs	r1, #2
    2e0a:	3009      	adds	r0, #9
    2e0c:	47c8      	blx	r9
				mod->report_ui_array[i+16+16+16].helper[0] = actuator;
    2e0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2e12:	441f      	add	r7, r3
    2e14:	68fb      	ldr	r3, [r7, #12]
    2e16:	f89d 2000 	ldrb.w	r2, [sp]
    2e1a:	701a      	strb	r2, [r3, #0]
				grid_report_ui_set_changed_flag(mod, i+16+16+16);
    2e1c:	f105 0130 	add.w	r1, r5, #48	; 0x30
    2e20:	b2c9      	uxtb	r1, r1
    2e22:	4640      	mov	r0, r8
    2e24:	47d0      	blx	sl
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    2e26:	4b34      	ldr	r3, [pc, #208]	; (2ef8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2e28:	eb03 1305 	add.w	r3, r3, r5, lsl #4
			if (a_now != a_prev){
    2e2c:	7b5b      	ldrb	r3, [r3, #13]
    2e2e:	42b3      	cmp	r3, r6
    2e30:	f43f af7e 	beq.w	2d30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x160>
					delta = +1;
    2e34:	42a6      	cmp	r6, r4
    2e36:	bf14      	ite	ne
    2e38:	f04f 37ff 	movne.w	r7, #4294967295
    2e3c:	2701      	moveq	r7, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    2e3e:	4b2e      	ldr	r3, [pc, #184]	; (2ef8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2e40:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2e44:	735e      	strb	r6, [r3, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2e46:	739c      	strb	r4, [r3, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time);
    2e48:	6899      	ldr	r1, [r3, #8]
    2e4a:	4830      	ldr	r0, [pc, #192]	; (2f0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x33c>)
    2e4c:	4b30      	ldr	r3, [pc, #192]	; (2f10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x340>)
    2e4e:	4798      	blx	r3
    2e50:	9003      	str	r0, [sp, #12]
				if (elapsed_time>400){
    2e52:	9b03      	ldr	r3, [sp, #12]
    2e54:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2e58:	bf84      	itt	hi
    2e5a:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    2e5e:	9303      	strhi	r3, [sp, #12]
				if (elapsed_time<20){
    2e60:	9b03      	ldr	r3, [sp, #12]
    2e62:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    2e64:	bf9c      	itt	ls
    2e66:	2314      	movls	r3, #20
    2e68:	9303      	strls	r3, [sp, #12]
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    2e6a:	9b03      	ldr	r3, [sp, #12]
    2e6c:	9803      	ldr	r0, [sp, #12]
    2e6e:	fb00 f003 	mul.w	r0, r0, r3
    2e72:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2e76:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2e7a:	4b26      	ldr	r3, [pc, #152]	; (2f14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x344>)
    2e7c:	4798      	blx	r3
    2e7e:	ec53 2b19 	vmov	r2, r3, d9
    2e82:	4c25      	ldr	r4, [pc, #148]	; (2f18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    2e84:	47a0      	blx	r4
    2e86:	ec53 2b18 	vmov	r2, r3, d8
    2e8a:	4c24      	ldr	r4, [pc, #144]	; (2f1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x34c>)
    2e8c:	47a0      	blx	r4
    2e8e:	4b24      	ldr	r3, [pc, #144]	; (2f20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x350>)
    2e90:	4798      	blx	r3
    2e92:	b284      	uxth	r4, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2e94:	481d      	ldr	r0, [pc, #116]	; (2f0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x33c>)
    2e96:	4b23      	ldr	r3, [pc, #140]	; (2f24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x354>)
    2e98:	4798      	blx	r3
    2e9a:	4b17      	ldr	r3, [pc, #92]	; (2ef8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2e9c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2ea0:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2ea2:	1c63      	adds	r3, r4, #1
    2ea4:	fb13 f307 	smulbb	r3, r3, r7
    2ea8:	b29b      	uxth	r3, r3
    2eaa:	b21a      	sxth	r2, r3
				if (delta<0){
    2eac:	2f00      	cmp	r7, #0
    2eae:	f6ff aec8 	blt.w	2c42 <grid_module_en16_reva_hardware_transfer_complete_cb+0x72>
				else if (delta>0){
    2eb2:	2f00      	cmp	r7, #0
    2eb4:	dd0c      	ble.n	2ed0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    2eb6:	4910      	ldr	r1, [pc, #64]	; (2ef8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2eb8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    2ebc:	78c9      	ldrb	r1, [r1, #3]
    2ebe:	440a      	add	r2, r1
    2ec0:	2a7f      	cmp	r2, #127	; 0x7f
    2ec2:	f73f aed0 	bgt.w	2c66 <grid_module_en16_reva_hardware_transfer_complete_cb+0x96>
						grid_ui_encoder_array[i].rotation_value += xi;
    2ec6:	4a0c      	ldr	r2, [pc, #48]	; (2ef8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    2ec8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    2ecc:	440b      	add	r3, r1
    2ece:	70d3      	strb	r3, [r2, #3]
				value = mod->report_ui_array[i+16].helper[bank];
    2ed0:	f105 0610 	add.w	r6, r5, #16
    2ed4:	0136      	lsls	r6, r6, #4
    2ed6:	4b14      	ldr	r3, [pc, #80]	; (2f28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>)
    2ed8:	689b      	ldr	r3, [r3, #8]
    2eda:	4433      	add	r3, r6
    2edc:	68da      	ldr	r2, [r3, #12]
    2ede:	9901      	ldr	r1, [sp, #4]
    2ee0:	5c52      	ldrb	r2, [r2, r1]
				if (value + delta*velocityfactor < 0){
    2ee2:	fb04 2107 	mla	r1, r4, r7, r2
    2ee6:	2900      	cmp	r1, #0
    2ee8:	f6ff aec3 	blt.w	2c72 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa2>
				else if (value + delta*velocityfactor > 127){
    2eec:	297f      	cmp	r1, #127	; 0x7f
    2eee:	f73f aec2 	bgt.w	2c76 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa6>
					value += delta*velocityfactor;
    2ef2:	f001 04ff 	and.w	r4, r1, #255	; 0xff
    2ef6:	e6bf      	b.n	2c78 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa8>
    2ef8:	20007804 	.word	0x20007804
    2efc:	20002258 	.word	0x20002258
    2f00:	20002240 	.word	0x20002240
    2f04:	20000320 	.word	0x20000320
    2f08:	20002224 	.word	0x20002224
    2f0c:	20003280 	.word	0x20003280
    2f10:	00003d1d 	.word	0x00003d1d
    2f14:	0000c319 	.word	0x0000c319
    2f18:	0000c659 	.word	0x0000c659
    2f1c:	0000c0a1 	.word	0x0000c0a1
    2f20:	0000c829 	.word	0x0000c829
    2f24:	00003d19 	.word	0x00003d19
    2f28:	20003270 	.word	0x20003270
    2f2c:	00003e11 	.word	0x00003e11
    2f30:	0000454f 	.word	0x0000454f

00002f34 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2f34:	b510      	push	{r4, lr}
    2f36:	4b0e      	ldr	r3, [pc, #56]	; (2f70 <grid_module_en16_reva_hardware_init+0x3c>)
    2f38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2f3c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f3e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2f44:	629a      	str	r2, [r3, #40]	; 0x28
    2f46:	4a0b      	ldr	r2, [pc, #44]	; (2f74 <grid_module_en16_reva_hardware_init+0x40>)
    2f48:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2f4a:	4c0b      	ldr	r4, [pc, #44]	; (2f78 <grid_module_en16_reva_hardware_init+0x44>)
    2f4c:	2103      	movs	r1, #3
    2f4e:	4620      	mov	r0, r4
    2f50:	4b0a      	ldr	r3, [pc, #40]	; (2f7c <grid_module_en16_reva_hardware_init+0x48>)
    2f52:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2f54:	490a      	ldr	r1, [pc, #40]	; (2f80 <grid_module_en16_reva_hardware_init+0x4c>)
    2f56:	4620      	mov	r0, r4
    2f58:	4b0a      	ldr	r3, [pc, #40]	; (2f84 <grid_module_en16_reva_hardware_init+0x50>)
    2f5a:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2f5c:	490a      	ldr	r1, [pc, #40]	; (2f88 <grid_module_en16_reva_hardware_init+0x54>)
    2f5e:	4620      	mov	r0, r4
    2f60:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <grid_module_en16_reva_hardware_init+0x58>)
    2f62:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2f64:	4a0a      	ldr	r2, [pc, #40]	; (2f90 <grid_module_en16_reva_hardware_init+0x5c>)
    2f66:	2100      	movs	r1, #0
    2f68:	4620      	mov	r0, r4
    2f6a:	4b0a      	ldr	r3, [pc, #40]	; (2f94 <grid_module_en16_reva_hardware_init+0x60>)
    2f6c:	4798      	blx	r3
    2f6e:	bd10      	pop	{r4, pc}
    2f70:	41008000 	.word	0x41008000
    2f74:	c0000020 	.word	0xc0000020
    2f78:	20000ebc 	.word	0x20000ebc
    2f7c:	000052d1 	.word	0x000052d1
    2f80:	00061a80 	.word	0x00061a80
    2f84:	00005295 	.word	0x00005295
    2f88:	2000223c 	.word	0x2000223c
    2f8c:	000053b9 	.word	0x000053b9
    2f90:	00002bd1 	.word	0x00002bd1
    2f94:	00005375 	.word	0x00005375

00002f98 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f9c:	b090      	sub	sp, #64	; 0x40
    2f9e:	4680      	mov	r8, r0
	
	
	grid_led_init(&grid_led_state, 16);
    2fa0:	2110      	movs	r1, #16
    2fa2:	4844      	ldr	r0, [pc, #272]	; (30b4 <grid_module_en16_reva_init+0x11c>)
    2fa4:	4b44      	ldr	r3, [pc, #272]	; (30b8 <grid_module_en16_reva_init+0x120>)
    2fa6:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16+16);
    2fa8:	2140      	movs	r1, #64	; 0x40
    2faa:	4640      	mov	r0, r8
    2fac:	4b43      	ldr	r3, [pc, #268]	; (30bc <grid_module_en16_reva_init+0x124>)
    2fae:	4798      	blx	r3
    2fb0:	2400      	movs	r4, #0
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<16+16+16+16; i++){
		
		uint8_t payload_template[30] = {0};
    2fb2:	4625      	mov	r5, r4
    2fb4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 30e0 <grid_module_en16_reva_init+0x148>
    2fb8:	e031      	b.n	301e <grid_module_en16_reva_init+0x86>
		

		if (i<16){ // ROTATION
			type = GRID_REPORT_TYPE_BROADCAST;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2fba:	2303      	movs	r3, #3
    2fbc:	9304      	str	r3, [sp, #16]
    2fbe:	9503      	str	r5, [sp, #12]
    2fc0:	9402      	str	r4, [sp, #8]
    2fc2:	2390      	movs	r3, #144	; 0x90
    2fc4:	9301      	str	r3, [sp, #4]
    2fc6:	9500      	str	r5, [sp, #0]
    2fc8:	462b      	mov	r3, r5
    2fca:	2202      	movs	r2, #2
    2fcc:	493c      	ldr	r1, [pc, #240]	; (30c0 <grid_module_en16_reva_init+0x128>)
    2fce:	a808      	add	r0, sp, #32
    2fd0:	4f3c      	ldr	r7, [pc, #240]	; (30c4 <grid_module_en16_reva_init+0x12c>)
    2fd2:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    2fd4:	2702      	movs	r7, #2
    2fd6:	e00d      	b.n	2ff4 <grid_module_en16_reva_init+0x5c>
			
		}		
		else if (i<16+16){ // BUTTON
			type = GRID_REPORT_TYPE_BROADCAST;
		
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2fd8:	2303      	movs	r3, #3
    2fda:	9304      	str	r3, [sp, #16]
    2fdc:	9503      	str	r5, [sp, #12]
    2fde:	9402      	str	r4, [sp, #8]
    2fe0:	2390      	movs	r3, #144	; 0x90
    2fe2:	9301      	str	r3, [sp, #4]
    2fe4:	9500      	str	r5, [sp, #0]
    2fe6:	462b      	mov	r3, r5
    2fe8:	2202      	movs	r2, #2
    2fea:	4935      	ldr	r1, [pc, #212]	; (30c0 <grid_module_en16_reva_init+0x128>)
    2fec:	a808      	add	r0, sp, #32
    2fee:	4f35      	ldr	r7, [pc, #212]	; (30c4 <grid_module_en16_reva_init+0x12c>)
    2ff0:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    2ff2:	2702      	movs	r7, #2
			);
	
		}

		
		uint32_t payload_length = strlen(payload_template);
    2ff4:	a808      	add	r0, sp, #32
    2ff6:	4b34      	ldr	r3, [pc, #208]	; (30c8 <grid_module_en16_reva_init+0x130>)
    2ff8:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2ffa:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    2ffe:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    3002:	2302      	movs	r3, #2
    3004:	9302      	str	r3, [sp, #8]
    3006:	ab07      	add	r3, sp, #28
    3008:	9301      	str	r3, [sp, #4]
    300a:	9000      	str	r0, [sp, #0]
    300c:	ab08      	add	r3, sp, #32
    300e:	463a      	mov	r2, r7
    3010:	4631      	mov	r1, r6
    3012:	4640      	mov	r0, r8
    3014:	4e2d      	ldr	r6, [pc, #180]	; (30cc <grid_module_en16_reva_init+0x134>)
    3016:	47b0      	blx	r6
    3018:	3401      	adds	r4, #1
	for(uint8_t i=0; i<16+16+16+16; i++){
    301a:	2c40      	cmp	r4, #64	; 0x40
    301c:	d02b      	beq.n	3076 <grid_module_en16_reva_init+0xde>
    301e:	b2e6      	uxtb	r6, r4
		uint8_t payload_template[30] = {0};
    3020:	221e      	movs	r2, #30
    3022:	4629      	mov	r1, r5
    3024:	a808      	add	r0, sp, #32
    3026:	47c8      	blx	r9
		if (i<16){ // ROTATION
    3028:	2e0f      	cmp	r6, #15
    302a:	d9c6      	bls.n	2fba <grid_module_en16_reva_init+0x22>
		else if (i<16+16){ // BUTTON
    302c:	2e1f      	cmp	r6, #31
    302e:	d9d3      	bls.n	2fd8 <grid_module_en16_reva_init+0x40>
		else if(i<16+16+16){ // LED (Rotation)
    3030:	2e2f      	cmp	r6, #47	; 0x2f
    3032:	d810      	bhi.n	3056 <grid_module_en16_reva_init+0xbe>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    3034:	2303      	movs	r3, #3
    3036:	9304      	str	r3, [sp, #16]
    3038:	9503      	str	r5, [sp, #12]
    303a:	f1a4 0220 	sub.w	r2, r4, #32
    303e:	9202      	str	r2, [sp, #8]
    3040:	2263      	movs	r2, #99	; 0x63
    3042:	9201      	str	r2, [sp, #4]
    3044:	2701      	movs	r7, #1
    3046:	9700      	str	r7, [sp, #0]
    3048:	2202      	movs	r2, #2
    304a:	491d      	ldr	r1, [pc, #116]	; (30c0 <grid_module_en16_reva_init+0x128>)
    304c:	a808      	add	r0, sp, #32
    304e:	f8df a074 	ldr.w	sl, [pc, #116]	; 30c4 <grid_module_en16_reva_init+0x12c>
    3052:	47d0      	blx	sl
    3054:	e7ce      	b.n	2ff4 <grid_module_en16_reva_init+0x5c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    3056:	2303      	movs	r3, #3
    3058:	9304      	str	r3, [sp, #16]
    305a:	9503      	str	r5, [sp, #12]
    305c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    3060:	9202      	str	r2, [sp, #8]
    3062:	2263      	movs	r2, #99	; 0x63
    3064:	9201      	str	r2, [sp, #4]
    3066:	2202      	movs	r2, #2
    3068:	9200      	str	r2, [sp, #0]
    306a:	4915      	ldr	r1, [pc, #84]	; (30c0 <grid_module_en16_reva_init+0x128>)
    306c:	a808      	add	r0, sp, #32
    306e:	4f15      	ldr	r7, [pc, #84]	; (30c4 <grid_module_en16_reva_init+0x12c>)
    3070:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_LOCAL;
    3072:	2701      	movs	r7, #1
    3074:	e7be      	b.n	2ff4 <grid_module_en16_reva_init+0x5c>
		
	}
	
	grid_report_sys_init(mod);
    3076:	4640      	mov	r0, r8
    3078:	4b15      	ldr	r3, [pc, #84]	; (30d0 <grid_module_en16_reva_init+0x138>)
    307a:	4798      	blx	r3
    307c:	4b15      	ldr	r3, [pc, #84]	; (30d4 <grid_module_en16_reva_init+0x13c>)
    307e:	2100      	movs	r1, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
		
		grid_ui_encoder_array[i].button_value = 0;
    3080:	460a      	mov	r2, r1
		grid_ui_encoder_array[i].button_changed = 0; 
		grid_ui_encoder_array[i].rotation_value = 0;
		grid_ui_encoder_array[i].rotation_changed = 1;
    3082:	2001      	movs	r0, #1
		grid_ui_encoder_array[i].rotation_direction = 0;
		grid_ui_encoder_array[i].last_real_time = -1;
    3084:	f04f 34ff 	mov.w	r4, #4294967295
		grid_ui_encoder_array[i].controller_number = i;
    3088:	7019      	strb	r1, [r3, #0]
		grid_ui_encoder_array[i].button_value = 0;
    308a:	705a      	strb	r2, [r3, #1]
		grid_ui_encoder_array[i].button_changed = 0; 
    308c:	709a      	strb	r2, [r3, #2]
		grid_ui_encoder_array[i].rotation_value = 0;
    308e:	70da      	strb	r2, [r3, #3]
		grid_ui_encoder_array[i].rotation_changed = 1;
    3090:	7118      	strb	r0, [r3, #4]
		grid_ui_encoder_array[i].rotation_direction = 0;
    3092:	715a      	strb	r2, [r3, #5]
		grid_ui_encoder_array[i].last_real_time = -1;
    3094:	609c      	str	r4, [r3, #8]
		grid_ui_encoder_array[i].velocity = 0;
    3096:	731a      	strb	r2, [r3, #12]
		grid_ui_encoder_array[i].phase_a_previous = 1;
    3098:	7358      	strb	r0, [r3, #13]
		grid_ui_encoder_array[i].phase_b_previous = 1;	
    309a:	7398      	strb	r0, [r3, #14]
    309c:	3101      	adds	r1, #1
    309e:	3310      	adds	r3, #16
	for (uint8_t i = 0; i<16; i++)
    30a0:	2910      	cmp	r1, #16
    30a2:	d1f1      	bne.n	3088 <grid_module_en16_reva_init+0xf0>
		
	}
	
	
	grid_module_en16_reva_hardware_init();
    30a4:	4b0c      	ldr	r3, [pc, #48]	; (30d8 <grid_module_en16_reva_init+0x140>)
    30a6:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    30a8:	4b0c      	ldr	r3, [pc, #48]	; (30dc <grid_module_en16_reva_init+0x144>)
    30aa:	4798      	blx	r3
	
}
    30ac:	b010      	add	sp, #64	; 0x40
    30ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30b2:	bf00      	nop
    30b4:	200077d4 	.word	0x200077d4
    30b8:	000026a5 	.word	0x000026a5
    30bc:	00004245 	.word	0x00004245
    30c0:	0000df80 	.word	0x0000df80
    30c4:	0000ccc5 	.word	0x0000ccc5
    30c8:	0000cd0d 	.word	0x0000cd0d
    30cc:	00004309 	.word	0x00004309
    30d0:	0000432d 	.word	0x0000432d
    30d4:	20007804 	.word	0x20007804
    30d8:	00002f35 	.word	0x00002f35
    30dc:	00002b99 	.word	0x00002b99
    30e0:	0000c8d7 	.word	0x0000c8d7

000030e4 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    30e4:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    30e6:	4803      	ldr	r0, [pc, #12]	; (30f4 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    30e8:	4c03      	ldr	r4, [pc, #12]	; (30f8 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    30ea:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    30ec:	4803      	ldr	r0, [pc, #12]	; (30fc <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    30ee:	47a0      	blx	r4
    30f0:	bd10      	pop	{r4, pc}
    30f2:	bf00      	nop
    30f4:	20000fc8 	.word	0x20000fc8
    30f8:	00004d65 	.word	0x00004d65
    30fc:	2000119c 	.word	0x2000119c

00003100 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    3100:	4bb5      	ldr	r3, [pc, #724]	; (33d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    3102:	781b      	ldrb	r3, [r3, #0]
    3104:	2b00      	cmp	r3, #0
    3106:	f000 811d 	beq.w	3344 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    310a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    310e:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3110:	2300      	movs	r3, #0
    3112:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    3116:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    311a:	4bb0      	ldr	r3, [pc, #704]	; (33dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    311c:	781a      	ldrb	r2, [r3, #0]
    311e:	3208      	adds	r2, #8
    3120:	48af      	ldr	r0, [pc, #700]	; (33e0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    3122:	5c86      	ldrb	r6, [r0, r2]
    3124:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    3126:	781a      	ldrb	r2, [r3, #0]
    3128:	b2d2      	uxtb	r2, r2
    312a:	5c85      	ldrb	r5, [r0, r2]
    312c:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    312e:	781a      	ldrb	r2, [r3, #0]
    3130:	3201      	adds	r2, #1
    3132:	b2d2      	uxtb	r2, r2
    3134:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    3136:	781a      	ldrb	r2, [r3, #0]
    3138:	f002 0207 	and.w	r2, r2, #7
    313c:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    313e:	781b      	ldrb	r3, [r3, #0]
    3140:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3144:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3148:	4ba6      	ldr	r3, [pc, #664]	; (33e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    314a:	bf14      	ite	ne
    314c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3150:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    3154:	4ba1      	ldr	r3, [pc, #644]	; (33dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    3156:	781b      	ldrb	r3, [r3, #0]
    3158:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    315c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3160:	4ba0      	ldr	r3, [pc, #640]	; (33e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    3162:	bf14      	ite	ne
    3164:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3168:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    316c:	4b9b      	ldr	r3, [pc, #620]	; (33dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    316e:	781b      	ldrb	r3, [r3, #0]
    3170:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3174:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3178:	4b9a      	ldr	r3, [pc, #616]	; (33e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    317a:	bf14      	ite	ne
    317c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3180:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    3184:	2302      	movs	r3, #2
    3186:	f10d 0206 	add.w	r2, sp, #6
    318a:	2100      	movs	r1, #0
    318c:	4896      	ldr	r0, [pc, #600]	; (33e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    318e:	4c97      	ldr	r4, [pc, #604]	; (33ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>)
    3190:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    3192:	2302      	movs	r3, #2
    3194:	aa01      	add	r2, sp, #4
    3196:	2100      	movs	r1, #0
    3198:	4895      	ldr	r0, [pc, #596]	; (33f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    319a:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    319c:	f8df b268 	ldr.w	fp, [pc, #616]	; 3408 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x308>
    31a0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    31a4:	47d8      	blx	fp
    31a6:	f8df a264 	ldr.w	sl, [pc, #612]	; 340c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30c>
    31aa:	a389      	add	r3, pc, #548	; (adr r3, 33d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    31ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    31b0:	47d0      	blx	sl
    31b2:	f8df 925c 	ldr.w	r9, [pc, #604]	; 3410 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x310>
    31b6:	47c8      	blx	r9
    31b8:	f64f 74ff 	movw	r4, #65535	; 0xffff
    31bc:	42a0      	cmp	r0, r4
    31be:	bf28      	it	cs
    31c0:	4620      	movcs	r0, r4
    31c2:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    31c4:	fa1f f880 	uxth.w	r8, r0
    31c8:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    31cc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    31d0:	47d8      	blx	fp
    31d2:	a37f      	add	r3, pc, #508	; (adr r3, 33d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    31d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    31d8:	47d0      	blx	sl
    31da:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    31dc:	42a0      	cmp	r0, r4
    31de:	bf28      	it	cs
    31e0:	4620      	movcs	r0, r4
    31e2:	b280      	uxth	r0, r0
    31e4:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    31e8:	f1a5 0308 	sub.w	r3, r5, #8
    31ec:	b2db      	uxtb	r3, r3
    31ee:	2b01      	cmp	r3, #1
    31f0:	f240 80d5 	bls.w	339e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    31f4:	2e0d      	cmp	r6, #13
    31f6:	f240 80be 	bls.w	3376 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x276>
		
		uint8_t adcresult_0_valid = 0;
	
		if (adcresult_0>60000){
    31fa:	f64e 2360 	movw	r3, #60000	; 0xea60
    31fe:	4598      	cmp	r8, r3
    3200:	f240 80a6 	bls.w	3350 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x250>
			adcresult_0 = 0;
    3204:	2300      	movs	r3, #0
    3206:	f8ad 3006 	strh.w	r3, [sp, #6]
			adcresult_0_valid = 1;
    320a:	f04f 0e01 	mov.w	lr, #1
			adcresult_0_valid = 1;
		}
		
		uint8_t adcresult_1_valid = 0;
	
		if (adcresult_1>60000){
    320e:	f64e 2360 	movw	r3, #60000	; 0xea60
    3212:	4298      	cmp	r0, r3
    3214:	f240 80a7 	bls.w	3366 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x266>
			adcresult_1 = 0;
    3218:	2300      	movs	r3, #0
    321a:	f8ad 3004 	strh.w	r3, [sp, #4]
			adcresult_1_valid = 1;
    321e:	2401      	movs	r4, #1
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0] && adcresult_0_valid){
    3220:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
    3224:	3b04      	subs	r3, #4
    3226:	011f      	lsls	r7, r3, #4
    3228:	4b72      	ldr	r3, [pc, #456]	; (33f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    322a:	689b      	ldr	r3, [r3, #8]
    322c:	443b      	add	r3, r7
    322e:	68da      	ldr	r2, [r3, #12]
    3230:	7812      	ldrb	r2, [r2, #0]
    3232:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    3236:	4291      	cmp	r1, r2
    3238:	d03e      	beq.n	32b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b8>
    323a:	f1be 0f00 	cmp.w	lr, #0
    323e:	d03b      	beq.n	32b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b8>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    3240:	2a00      	cmp	r2, #0
    3242:	bf0c      	ite	eq
    3244:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    3248:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    324c:	6858      	ldr	r0, [r3, #4]
    324e:	bf0c      	ite	eq
    3250:	2290      	moveq	r2, #144	; 0x90
    3252:	2280      	movne	r2, #128	; 0x80
    3254:	2102      	movs	r1, #2
    3256:	3005      	adds	r0, #5
    3258:	f8df a19c 	ldr.w	sl, [pc, #412]	; 33f8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>
    325c:	47d0      	blx	sl
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    325e:	f8df 8194 	ldr.w	r8, [pc, #404]	; 33f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>
    3262:	f8d8 3008 	ldr.w	r3, [r8, #8]
    3266:	443b      	add	r3, r7
    3268:	6858      	ldr	r0, [r3, #4]
    326a:	4632      	mov	r2, r6
    326c:	2102      	movs	r1, #2
    326e:	3007      	adds	r0, #7
    3270:	47d0      	blx	sl
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    3272:	f8d8 3008 	ldr.w	r3, [r8, #8]
    3276:	443b      	add	r3, r7
    3278:	6858      	ldr	r0, [r3, #4]
    327a:	464a      	mov	r2, r9
    327c:	2102      	movs	r1, #2
    327e:	3009      	adds	r0, #9
    3280:	47d0      	blx	sl
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    3282:	f8d8 3008 	ldr.w	r3, [r8, #8]
    3286:	443b      	add	r3, r7
    3288:	68db      	ldr	r3, [r3, #12]
    328a:	f883 9000 	strb.w	r9, [r3]
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    328e:	1f31      	subs	r1, r6, #4
    3290:	b2c9      	uxtb	r1, r1
    3292:	4640      	mov	r0, r8
    3294:	f8df b17c 	ldr.w	fp, [pc, #380]	; 3414 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
    3298:	47d8      	blx	fp
				
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4+12].payload[9], 2, actuator);
    329a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    329e:	443b      	add	r3, r7
    32a0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    32a4:	ea4f 0249 	mov.w	r2, r9, lsl #1
    32a8:	2102      	movs	r1, #2
    32aa:	3009      	adds	r0, #9
    32ac:	47d0      	blx	sl
			grid_report_ui_set_changed_flag(mod, adc_index_0-4+12);
    32ae:	f106 0108 	add.w	r1, r6, #8
    32b2:	b2c9      	uxtb	r1, r1
    32b4:	4640      	mov	r0, r8
    32b6:	47d8      	blx	fp
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0] && adcresult_1_valid){
    32b8:	f105 5380 	add.w	r3, r5, #268435456	; 0x10000000
    32bc:	3b04      	subs	r3, #4
    32be:	011e      	lsls	r6, r3, #4
    32c0:	4b4c      	ldr	r3, [pc, #304]	; (33f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    32c2:	689b      	ldr	r3, [r3, #8]
    32c4:	4433      	add	r3, r6
    32c6:	68da      	ldr	r2, [r3, #12]
    32c8:	7812      	ldrb	r2, [r2, #0]
    32ca:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    32ce:	4291      	cmp	r1, r2
    32d0:	d065      	beq.n	339e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
    32d2:	2c00      	cmp	r4, #0
    32d4:	d063      	beq.n	339e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    32d6:	2a00      	cmp	r2, #0
    32d8:	bf0c      	ite	eq
    32da:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    32de:	f04f 0800 	movne.w	r8, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    32e2:	6858      	ldr	r0, [r3, #4]
    32e4:	bf0c      	ite	eq
    32e6:	2290      	moveq	r2, #144	; 0x90
    32e8:	2280      	movne	r2, #128	; 0x80
    32ea:	2102      	movs	r1, #2
    32ec:	3005      	adds	r0, #5
    32ee:	4f42      	ldr	r7, [pc, #264]	; (33f8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>)
    32f0:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_1);
    32f2:	4c40      	ldr	r4, [pc, #256]	; (33f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    32f4:	68a3      	ldr	r3, [r4, #8]
    32f6:	4433      	add	r3, r6
    32f8:	6858      	ldr	r0, [r3, #4]
    32fa:	462a      	mov	r2, r5
    32fc:	2102      	movs	r1, #2
    32fe:	3007      	adds	r0, #7
    3300:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);		
    3302:	68a3      	ldr	r3, [r4, #8]
    3304:	4433      	add	r3, r6
    3306:	6858      	ldr	r0, [r3, #4]
    3308:	4642      	mov	r2, r8
    330a:	2102      	movs	r1, #2
    330c:	3009      	adds	r0, #9
    330e:	47b8      	blx	r7
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;		
    3310:	68a3      	ldr	r3, [r4, #8]
    3312:	4433      	add	r3, r6
    3314:	68db      	ldr	r3, [r3, #12]
    3316:	f883 8000 	strb.w	r8, [r3]
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    331a:	1f29      	subs	r1, r5, #4
    331c:	b2c9      	uxtb	r1, r1
    331e:	4620      	mov	r0, r4
    3320:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 3414 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
    3324:	47c8      	blx	r9
				
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4+12].payload[9], 2, actuator);		
    3326:	68a3      	ldr	r3, [r4, #8]
    3328:	4433      	add	r3, r6
    332a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    332e:	ea4f 0248 	mov.w	r2, r8, lsl #1
    3332:	2102      	movs	r1, #2
    3334:	3009      	adds	r0, #9
    3336:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1-4+12);
    3338:	f105 0108 	add.w	r1, r5, #8
    333c:	b2c9      	uxtb	r1, r1
    333e:	4620      	mov	r0, r4
    3340:	47c8      	blx	r9
    3342:	e02c      	b.n	339e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    3344:	4a24      	ldr	r2, [pc, #144]	; (33d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    3346:	7813      	ldrb	r3, [r2, #0]
    3348:	3301      	adds	r3, #1
    334a:	b2db      	uxtb	r3, r3
    334c:	7013      	strb	r3, [r2, #0]
    334e:	4770      	bx	lr
		else if (adcresult_0<200){
    3350:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
			adcresult_0 = 127;
    3354:	bf9d      	ittte	ls
    3356:	237f      	movls	r3, #127	; 0x7f
    3358:	f8ad 3006 	strhls.w	r3, [sp, #6]
			adcresult_0_valid = 1;
    335c:	f04f 0e01 	movls.w	lr, #1
		uint8_t adcresult_0_valid = 0;
    3360:	f04f 0e00 	movhi.w	lr, #0
    3364:	e753      	b.n	320e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x10e>
		else if (adcresult_1<200){
    3366:	28c7      	cmp	r0, #199	; 0xc7
			adcresult_1 = 127;
    3368:	bf9d      	ittte	ls
    336a:	237f      	movls	r3, #127	; 0x7f
    336c:	f8ad 3004 	strhls.w	r3, [sp, #4]
			adcresult_1_valid = 1;
    3370:	2401      	movls	r4, #1
		uint8_t adcresult_1_valid = 0;
    3372:	2400      	movhi	r4, #0
    3374:	e754      	b.n	3220 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x120>
		//CRITICAL_SECTION_LEAVE()

	}
	else{ // POTENTIOMETER OR FADER
		
		if (adc_index_1 == 0 || adc_index_1 == 1){
    3376:	2d01      	cmp	r5, #1
    3378:	d919      	bls.n	33ae <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ae>
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
			
		}
		else{
						
			grid_ain_add_sample(adc_index_0, adcresult_0);
    337a:	b2b9      	uxth	r1, r7
    337c:	4630      	mov	r0, r6
    337e:	4c1f      	ldr	r4, [pc, #124]	; (33fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    3380:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    3382:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3386:	4628      	mov	r0, r5
    3388:	47a0      	blx	r4
			
		
		
		//CRITICAL_SECTION_ENTER()

		if (grid_ain_get_changed(adc_index_0)){
    338a:	4630      	mov	r0, r6
    338c:	4b1c      	ldr	r3, [pc, #112]	; (3400 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>)
    338e:	4798      	blx	r3
    3390:	2800      	cmp	r0, #0
    3392:	d141      	bne.n	3418 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x318>
		//CRITICAL_SECTION_LEAVE()
	
	
		//CRITICAL_SECTION_ENTER()

		if (grid_ain_get_changed(adc_index_1)){
    3394:	4628      	mov	r0, r5
    3396:	4b1a      	ldr	r3, [pc, #104]	; (3400 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>)
    3398:	4798      	blx	r3
    339a:	2800      	cmp	r0, #0
    339c:	d169      	bne.n	3472 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x372>
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    339e:	2200      	movs	r2, #0
    33a0:	4b0d      	ldr	r3, [pc, #52]	; (33d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    33a2:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    33a4:	4b17      	ldr	r3, [pc, #92]	; (3404 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>)
    33a6:	4798      	blx	r3
}
    33a8:	b003      	add	sp, #12
    33aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    33ae:	b2b9      	uxth	r1, r7
    33b0:	f64f 78ff 	movw	r8, #65535	; 0xffff
    33b4:	eba8 0101 	sub.w	r1, r8, r1
    33b8:	4630      	mov	r0, r6
    33ba:	4c10      	ldr	r4, [pc, #64]	; (33fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    33bc:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    33be:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    33c2:	eba8 0101 	sub.w	r1, r8, r1
    33c6:	4628      	mov	r0, r5
    33c8:	47a0      	blx	r4
    33ca:	e7de      	b.n	338a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x28a>
    33cc:	f3af 8000 	nop.w
    33d0:	47ae147b 	.word	0x47ae147b
    33d4:	3ff07ae1 	.word	0x3ff07ae1
    33d8:	20002254 	.word	0x20002254
    33dc:	20007769 	.word	0x20007769
    33e0:	20000334 	.word	0x20000334
    33e4:	41008000 	.word	0x41008000
    33e8:	20000fc8 	.word	0x20000fc8
    33ec:	00004c85 	.word	0x00004c85
    33f0:	2000119c 	.word	0x2000119c
    33f4:	20003270 	.word	0x20003270
    33f8:	00003e11 	.word	0x00003e11
    33fc:	00001401 	.word	0x00001401
    3400:	000014fd 	.word	0x000014fd
    3404:	000030e5 	.word	0x000030e5
    3408:	0000c339 	.word	0x0000c339
    340c:	0000c405 	.word	0x0000c405
    3410:	0000c829 	.word	0x0000c829
    3414:	0000454f 	.word	0x0000454f
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    3418:	2107      	movs	r1, #7
    341a:	4630      	mov	r0, r6
    341c:	4b2b      	ldr	r3, [pc, #172]	; (34cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    341e:	4798      	blx	r3
    3420:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    3422:	ea4f 1a06 	mov.w	sl, r6, lsl #4
    3426:	4c2a      	ldr	r4, [pc, #168]	; (34d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    3428:	68a3      	ldr	r3, [r4, #8]
    342a:	4453      	add	r3, sl
    342c:	6858      	ldr	r0, [r3, #4]
    342e:	4632      	mov	r2, r6
    3430:	2102      	movs	r1, #2
    3432:	3007      	adds	r0, #7
    3434:	f8df 809c 	ldr.w	r8, [pc, #156]	; 34d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>
    3438:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    343a:	68a3      	ldr	r3, [r4, #8]
    343c:	4453      	add	r3, sl
    343e:	6858      	ldr	r0, [r3, #4]
    3440:	b2fa      	uxtb	r2, r7
    3442:	2102      	movs	r1, #2
    3444:	3009      	adds	r0, #9
    3446:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);	
    3448:	4631      	mov	r1, r6
    344a:	4620      	mov	r0, r4
    344c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 34d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d8>
    3450:	47c8      	blx	r9
			uint8_t actuator = 2*value;
    3452:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0 + 12].payload[9], 2, actuator);			
    3454:	68a3      	ldr	r3, [r4, #8]
    3456:	4453      	add	r3, sl
    3458:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    345c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3460:	2102      	movs	r1, #2
    3462:	3009      	adds	r0, #9
    3464:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0 + 12);
    3466:	f106 010c 	add.w	r1, r6, #12
    346a:	b2c9      	uxtb	r1, r1
    346c:	4620      	mov	r0, r4
    346e:	47c8      	blx	r9
    3470:	e790      	b.n	3394 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x294>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3472:	2107      	movs	r1, #7
    3474:	4628      	mov	r0, r5
    3476:	4b15      	ldr	r3, [pc, #84]	; (34cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    3478:	4798      	blx	r3
    347a:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    347c:	ea4f 1905 	mov.w	r9, r5, lsl #4
    3480:	4c13      	ldr	r4, [pc, #76]	; (34d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    3482:	68a3      	ldr	r3, [r4, #8]
    3484:	444b      	add	r3, r9
    3486:	6858      	ldr	r0, [r3, #4]
    3488:	462a      	mov	r2, r5
    348a:	2102      	movs	r1, #2
    348c:	3007      	adds	r0, #7
    348e:	4f11      	ldr	r7, [pc, #68]	; (34d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>)
    3490:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    3492:	68a3      	ldr	r3, [r4, #8]
    3494:	444b      	add	r3, r9
    3496:	6858      	ldr	r0, [r3, #4]
    3498:	b2f2      	uxtb	r2, r6
    349a:	2102      	movs	r1, #2
    349c:	3009      	adds	r0, #9
    349e:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    34a0:	4629      	mov	r1, r5
    34a2:	4620      	mov	r0, r4
    34a4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 34d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d8>
    34a8:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    34aa:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1 + 12].payload[9], 2, actuator);		
    34ac:	68a3      	ldr	r3, [r4, #8]
    34ae:	444b      	add	r3, r9
    34b0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    34b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    34b8:	2102      	movs	r1, #2
    34ba:	3009      	adds	r0, #9
    34bc:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1 + 12);
    34be:	f105 010c 	add.w	r1, r5, #12
    34c2:	b2c9      	uxtb	r1, r1
    34c4:	4620      	mov	r0, r4
    34c6:	47c0      	blx	r8
    34c8:	e769      	b.n	339e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
    34ca:	bf00      	nop
    34cc:	0000150d 	.word	0x0000150d
    34d0:	20003270 	.word	0x20003270
    34d4:	00003e11 	.word	0x00003e11
    34d8:	0000454f 	.word	0x0000454f

000034dc <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    34dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    34de:	4f0b      	ldr	r7, [pc, #44]	; (350c <grid_module_pbf4_reva_hardware_init+0x30>)
    34e0:	4c0b      	ldr	r4, [pc, #44]	; (3510 <grid_module_pbf4_reva_hardware_init+0x34>)
    34e2:	463b      	mov	r3, r7
    34e4:	2200      	movs	r2, #0
    34e6:	4611      	mov	r1, r2
    34e8:	4620      	mov	r0, r4
    34ea:	4e0a      	ldr	r6, [pc, #40]	; (3514 <grid_module_pbf4_reva_hardware_init+0x38>)
    34ec:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    34ee:	4d0a      	ldr	r5, [pc, #40]	; (3518 <grid_module_pbf4_reva_hardware_init+0x3c>)
    34f0:	463b      	mov	r3, r7
    34f2:	2200      	movs	r2, #0
    34f4:	4611      	mov	r1, r2
    34f6:	4628      	mov	r0, r5
    34f8:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    34fa:	2100      	movs	r1, #0
    34fc:	4620      	mov	r0, r4
    34fe:	4c07      	ldr	r4, [pc, #28]	; (351c <grid_module_pbf4_reva_hardware_init+0x40>)
    3500:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3502:	2100      	movs	r1, #0
    3504:	4628      	mov	r0, r5
    3506:	47a0      	blx	r4
    3508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    350a:	bf00      	nop
    350c:	00003101 	.word	0x00003101
    3510:	20000fc8 	.word	0x20000fc8
    3514:	00004c05 	.word	0x00004c05
    3518:	2000119c 	.word	0x2000119c
    351c:	00004bc5 	.word	0x00004bc5

00003520 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    3520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3524:	b090      	sub	sp, #64	; 0x40
    3526:	4680      	mov	r8, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3528:	2307      	movs	r3, #7
    352a:	220e      	movs	r2, #14
    352c:	2105      	movs	r1, #5
    352e:	2010      	movs	r0, #16
    3530:	4c33      	ldr	r4, [pc, #204]	; (3600 <grid_module_pbf4_reva_init+0xe0>)
    3532:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    3534:	210c      	movs	r1, #12
    3536:	4833      	ldr	r0, [pc, #204]	; (3604 <grid_module_pbf4_reva_init+0xe4>)
    3538:	4b33      	ldr	r3, [pc, #204]	; (3608 <grid_module_pbf4_reva_init+0xe8>)
    353a:	4798      	blx	r3
	
	grid_ui_model_init(mod, 24);
    353c:	2118      	movs	r1, #24
    353e:	4640      	mov	r0, r8
    3540:	4b32      	ldr	r3, [pc, #200]	; (360c <grid_module_pbf4_reva_init+0xec>)
    3542:	4798      	blx	r3
    3544:	2500      	movs	r5, #0
	
	for(uint8_t i=0; i<24; i++){
		
		uint8_t payload_template[30] = {0};
    3546:	462c      	mov	r4, r5
    3548:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 362c <grid_module_pbf4_reva_init+0x10c>
    354c:	e034      	b.n	35b8 <grid_module_pbf4_reva_init+0x98>
		
		if (i<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
			
			type = GRID_REPORT_TYPE_BROADCAST;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    354e:	2303      	movs	r3, #3
    3550:	9304      	str	r3, [sp, #16]
    3552:	9403      	str	r4, [sp, #12]
    3554:	9502      	str	r5, [sp, #8]
    3556:	23b0      	movs	r3, #176	; 0xb0
    3558:	9301      	str	r3, [sp, #4]
    355a:	9400      	str	r4, [sp, #0]
    355c:	4623      	mov	r3, r4
    355e:	2202      	movs	r2, #2
    3560:	492b      	ldr	r1, [pc, #172]	; (3610 <grid_module_pbf4_reva_init+0xf0>)
    3562:	a808      	add	r0, sp, #32
    3564:	4f2b      	ldr	r7, [pc, #172]	; (3614 <grid_module_pbf4_reva_init+0xf4>)
    3566:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    3568:	2702      	movs	r7, #2
    356a:	e00f      	b.n	358c <grid_module_pbf4_reva_init+0x6c>
		}
		else{ // LED -> Grid LED
			
			type = GRID_REPORT_TYPE_LOCAL;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    356c:	2303      	movs	r3, #3
    356e:	9304      	str	r3, [sp, #16]
    3570:	9403      	str	r4, [sp, #12]
    3572:	f1a5 020c 	sub.w	r2, r5, #12
    3576:	9202      	str	r2, [sp, #8]
    3578:	2263      	movs	r2, #99	; 0x63
    357a:	9201      	str	r2, [sp, #4]
    357c:	2701      	movs	r7, #1
    357e:	9700      	str	r7, [sp, #0]
    3580:	2202      	movs	r2, #2
    3582:	4923      	ldr	r1, [pc, #140]	; (3610 <grid_module_pbf4_reva_init+0xf0>)
    3584:	a808      	add	r0, sp, #32
    3586:	f8df a08c 	ldr.w	sl, [pc, #140]	; 3614 <grid_module_pbf4_reva_init+0xf4>
    358a:	47d0      	blx	sl

			);			
		}

		
		uint8_t payload_length = strlen(payload_template);
    358c:	a808      	add	r0, sp, #32
    358e:	4b22      	ldr	r3, [pc, #136]	; (3618 <grid_module_pbf4_reva_init+0xf8>)
    3590:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3592:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    3596:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    359a:	2302      	movs	r3, #2
    359c:	9302      	str	r3, [sp, #8]
    359e:	ab07      	add	r3, sp, #28
    35a0:	9301      	str	r3, [sp, #4]
    35a2:	b2c0      	uxtb	r0, r0
    35a4:	9000      	str	r0, [sp, #0]
    35a6:	ab08      	add	r3, sp, #32
    35a8:	463a      	mov	r2, r7
    35aa:	4631      	mov	r1, r6
    35ac:	4640      	mov	r0, r8
    35ae:	4e1b      	ldr	r6, [pc, #108]	; (361c <grid_module_pbf4_reva_init+0xfc>)
    35b0:	47b0      	blx	r6
    35b2:	3501      	adds	r5, #1
	for(uint8_t i=0; i<24; i++){
    35b4:	2d18      	cmp	r5, #24
    35b6:	d018      	beq.n	35ea <grid_module_pbf4_reva_init+0xca>
    35b8:	b2ee      	uxtb	r6, r5
		uint8_t payload_template[30] = {0};
    35ba:	221e      	movs	r2, #30
    35bc:	4621      	mov	r1, r4
    35be:	a808      	add	r0, sp, #32
    35c0:	47c8      	blx	r9
		if (i<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
    35c2:	2e07      	cmp	r6, #7
    35c4:	d9c3      	bls.n	354e <grid_module_pbf4_reva_init+0x2e>
		else if (i<12){ // BUTTONS -> MIDI Note On/Off
    35c6:	2e0b      	cmp	r6, #11
    35c8:	d8d0      	bhi.n	356c <grid_module_pbf4_reva_init+0x4c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    35ca:	2303      	movs	r3, #3
    35cc:	9304      	str	r3, [sp, #16]
    35ce:	9403      	str	r4, [sp, #12]
    35d0:	1d2b      	adds	r3, r5, #4
    35d2:	9302      	str	r3, [sp, #8]
    35d4:	2390      	movs	r3, #144	; 0x90
    35d6:	9301      	str	r3, [sp, #4]
    35d8:	9400      	str	r4, [sp, #0]
    35da:	4623      	mov	r3, r4
    35dc:	2202      	movs	r2, #2
    35de:	490c      	ldr	r1, [pc, #48]	; (3610 <grid_module_pbf4_reva_init+0xf0>)
    35e0:	a808      	add	r0, sp, #32
    35e2:	4f0c      	ldr	r7, [pc, #48]	; (3614 <grid_module_pbf4_reva_init+0xf4>)
    35e4:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    35e6:	2702      	movs	r7, #2
    35e8:	e7d0      	b.n	358c <grid_module_pbf4_reva_init+0x6c>
		
	}
	
	grid_report_sys_init(mod);
    35ea:	4640      	mov	r0, r8
    35ec:	4b0c      	ldr	r3, [pc, #48]	; (3620 <grid_module_pbf4_reva_init+0x100>)
    35ee:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    35f0:	4b0c      	ldr	r3, [pc, #48]	; (3624 <grid_module_pbf4_reva_init+0x104>)
    35f2:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    35f4:	4b0c      	ldr	r3, [pc, #48]	; (3628 <grid_module_pbf4_reva_init+0x108>)
    35f6:	4798      	blx	r3
	
    35f8:	b010      	add	sp, #64	; 0x40
    35fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35fe:	bf00      	nop
    3600:	000013b5 	.word	0x000013b5
    3604:	200077d4 	.word	0x200077d4
    3608:	000026a5 	.word	0x000026a5
    360c:	00004245 	.word	0x00004245
    3610:	0000df80 	.word	0x0000df80
    3614:	0000ccc5 	.word	0x0000ccc5
    3618:	0000cd0d 	.word	0x0000cd0d
    361c:	00004309 	.word	0x00004309
    3620:	0000432d 	.word	0x0000432d
    3624:	000034dd 	.word	0x000034dd
    3628:	000030e5 	.word	0x000030e5
    362c:	0000c8d7 	.word	0x0000c8d7

00003630 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    3630:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    3632:	4803      	ldr	r0, [pc, #12]	; (3640 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    3634:	4c03      	ldr	r4, [pc, #12]	; (3644 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    3636:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3638:	4803      	ldr	r0, [pc, #12]	; (3648 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    363a:	47a0      	blx	r4
    363c:	bd10      	pop	{r4, pc}
    363e:	bf00      	nop
    3640:	20000fc8 	.word	0x20000fc8
    3644:	00004d65 	.word	0x00004d65
    3648:	2000119c 	.word	0x2000119c
    364c:	00000000 	.word	0x00000000

00003650 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3650:	4b7b      	ldr	r3, [pc, #492]	; (3840 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3652:	781b      	ldrb	r3, [r3, #0]
    3654:	2b00      	cmp	r3, #0
    3656:	f000 8085 	beq.w	3764 <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    365a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    365e:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3660:	2300      	movs	r3, #0
    3662:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    3666:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    366a:	4b75      	ldr	r3, [pc, #468]	; (3840 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    366c:	785a      	ldrb	r2, [r3, #1]
    366e:	3208      	adds	r2, #8
    3670:	4874      	ldr	r0, [pc, #464]	; (3844 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    3672:	5c85      	ldrb	r5, [r0, r2]
    3674:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    3676:	785a      	ldrb	r2, [r3, #1]
    3678:	b2d2      	uxtb	r2, r2
    367a:	5c84      	ldrb	r4, [r0, r2]
    367c:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    367e:	785a      	ldrb	r2, [r3, #1]
    3680:	3201      	adds	r2, #1
    3682:	b2d2      	uxtb	r2, r2
    3684:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    3686:	785a      	ldrb	r2, [r3, #1]
    3688:	f002 0207 	and.w	r2, r2, #7
    368c:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    368e:	785b      	ldrb	r3, [r3, #1]
    3690:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3694:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3698:	4b6b      	ldr	r3, [pc, #428]	; (3848 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    369a:	bf14      	ite	ne
    369c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36a0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    36a4:	4b66      	ldr	r3, [pc, #408]	; (3840 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    36a6:	785b      	ldrb	r3, [r3, #1]
    36a8:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    36b0:	4b65      	ldr	r3, [pc, #404]	; (3848 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    36b2:	bf14      	ite	ne
    36b4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36b8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    36bc:	4b60      	ldr	r3, [pc, #384]	; (3840 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    36be:	785b      	ldrb	r3, [r3, #1]
    36c0:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    36c8:	4b5f      	ldr	r3, [pc, #380]	; (3848 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    36ca:	bf14      	ite	ne
    36cc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36d0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    36d4:	2302      	movs	r3, #2
    36d6:	f10d 0206 	add.w	r2, sp, #6
    36da:	2100      	movs	r1, #0
    36dc:	485b      	ldr	r0, [pc, #364]	; (384c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    36de:	4e5c      	ldr	r6, [pc, #368]	; (3850 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    36e0:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    36e2:	2302      	movs	r3, #2
    36e4:	aa01      	add	r2, sp, #4
    36e6:	2100      	movs	r1, #0
    36e8:	485a      	ldr	r0, [pc, #360]	; (3854 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    36ea:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    36ec:	f8df a180 	ldr.w	sl, [pc, #384]	; 3870 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>
    36f0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    36f4:	47d0      	blx	sl
    36f6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3874 <grid_module_po16_revb_hardware_transfer_complete_cb+0x224>
    36fa:	a34f      	add	r3, pc, #316	; (adr r3, 3838 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    36fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3700:	47c8      	blx	r9
    3702:	f8df 8174 	ldr.w	r8, [pc, #372]	; 3878 <grid_module_po16_revb_hardware_transfer_complete_cb+0x228>
    3706:	47c0      	blx	r8
    3708:	f64f 76ff 	movw	r6, #65535	; 0xffff
    370c:	42b0      	cmp	r0, r6
    370e:	bf28      	it	cs
    3710:	4630      	movcs	r0, r6
    3712:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    3714:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    3718:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    371c:	47d0      	blx	sl
    371e:	a346      	add	r3, pc, #280	; (adr r3, 3838 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    3720:	e9d3 2300 	ldrd	r2, r3, [r3]
    3724:	47c8      	blx	r9
    3726:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3728:	42b0      	cmp	r0, r6
    372a:	bf28      	it	cs
    372c:	4630      	movcs	r0, r6
    372e:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    3732:	b2b9      	uxth	r1, r7
    3734:	4628      	mov	r0, r5
    3736:	4e48      	ldr	r6, [pc, #288]	; (3858 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>)
    3738:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    373a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    373e:	4620      	mov	r0, r4
    3740:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    3742:	4628      	mov	r0, r5
    3744:	4b45      	ldr	r3, [pc, #276]	; (385c <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>)
    3746:	4798      	blx	r3
    3748:	b990      	cbnz	r0, 3770 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    374a:	4620      	mov	r0, r4
    374c:	4b43      	ldr	r3, [pc, #268]	; (385c <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>)
    374e:	4798      	blx	r3
    3750:	2800      	cmp	r0, #0
    3752:	d13f      	bne.n	37d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x184>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    3754:	2200      	movs	r2, #0
    3756:	4b3a      	ldr	r3, [pc, #232]	; (3840 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3758:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    375a:	4b41      	ldr	r3, [pc, #260]	; (3860 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>)
    375c:	4798      	blx	r3
}
    375e:	b002      	add	sp, #8
    3760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    3764:	4a36      	ldr	r2, [pc, #216]	; (3840 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3766:	7813      	ldrb	r3, [r2, #0]
    3768:	3301      	adds	r3, #1
    376a:	b2db      	uxtb	r3, r3
    376c:	7013      	strb	r3, [r2, #0]
    376e:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3770:	2107      	movs	r1, #7
    3772:	4628      	mov	r0, r5
    3774:	4b3b      	ldr	r3, [pc, #236]	; (3864 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>)
    3776:	4798      	blx	r3
    3778:	4681      	mov	r9, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    377a:	012f      	lsls	r7, r5, #4
    377c:	4e3a      	ldr	r6, [pc, #232]	; (3868 <grid_module_po16_revb_hardware_transfer_complete_cb+0x218>)
    377e:	68b3      	ldr	r3, [r6, #8]
    3780:	443b      	add	r3, r7
    3782:	6858      	ldr	r0, [r3, #4]
    3784:	462a      	mov	r2, r5
    3786:	2102      	movs	r1, #2
    3788:	3007      	adds	r0, #7
    378a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 386c <grid_module_po16_revb_hardware_transfer_complete_cb+0x21c>
    378e:	47c0      	blx	r8
    3790:	fa5f fa89 	uxtb.w	sl, r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    3794:	68b3      	ldr	r3, [r6, #8]
    3796:	443b      	add	r3, r7
    3798:	6858      	ldr	r0, [r3, #4]
    379a:	4652      	mov	r2, sl
    379c:	2102      	movs	r1, #2
    379e:	3009      	adds	r0, #9
    37a0:	47c0      	blx	r8
		mod->report_ui_array[adc_index_0].helper[0] = value;
    37a2:	68b3      	ldr	r3, [r6, #8]
    37a4:	443b      	add	r3, r7
    37a6:	68db      	ldr	r3, [r3, #12]
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    37a8:	f883 9000 	strb.w	r9, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    37ac:	4629      	mov	r1, r5
    37ae:	4630      	mov	r0, r6
    37b0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 387c <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>
    37b4:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0+16].payload[9], 2, value*2);
    37b6:	68b3      	ldr	r3, [r6, #8]
    37b8:	441f      	add	r7, r3
    37ba:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
    37be:	ea4f 024a 	mov.w	r2, sl, lsl #1
    37c2:	2102      	movs	r1, #2
    37c4:	3009      	adds	r0, #9
    37c6:	47c0      	blx	r8
		grid_report_ui_set_changed_flag(mod, adc_index_0+16);
    37c8:	f105 0110 	add.w	r1, r5, #16
    37cc:	b2c9      	uxtb	r1, r1
    37ce:	4630      	mov	r0, r6
    37d0:	47c8      	blx	r9
    37d2:	e7ba      	b.n	374a <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    37d4:	2107      	movs	r1, #7
    37d6:	4620      	mov	r0, r4
    37d8:	4b22      	ldr	r3, [pc, #136]	; (3864 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>)
    37da:	4798      	blx	r3
    37dc:	4680      	mov	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    37de:	0126      	lsls	r6, r4, #4
    37e0:	4d21      	ldr	r5, [pc, #132]	; (3868 <grid_module_po16_revb_hardware_transfer_complete_cb+0x218>)
    37e2:	68ab      	ldr	r3, [r5, #8]
    37e4:	4433      	add	r3, r6
    37e6:	6858      	ldr	r0, [r3, #4]
    37e8:	4622      	mov	r2, r4
    37ea:	2102      	movs	r1, #2
    37ec:	3007      	adds	r0, #7
    37ee:	4f1f      	ldr	r7, [pc, #124]	; (386c <grid_module_po16_revb_hardware_transfer_complete_cb+0x21c>)
    37f0:	47b8      	blx	r7
    37f2:	fa5f f988 	uxtb.w	r9, r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    37f6:	68ab      	ldr	r3, [r5, #8]
    37f8:	4433      	add	r3, r6
    37fa:	6858      	ldr	r0, [r3, #4]
    37fc:	464a      	mov	r2, r9
    37fe:	2102      	movs	r1, #2
    3800:	3009      	adds	r0, #9
    3802:	47b8      	blx	r7
		mod->report_ui_array[adc_index_1].helper[0] = value;
    3804:	68ab      	ldr	r3, [r5, #8]
    3806:	4433      	add	r3, r6
    3808:	68db      	ldr	r3, [r3, #12]
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    380a:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    380e:	4621      	mov	r1, r4
    3810:	4628      	mov	r0, r5
    3812:	f8df 8068 	ldr.w	r8, [pc, #104]	; 387c <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>
    3816:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1+16].payload[9], 2, value*2);
    3818:	68ab      	ldr	r3, [r5, #8]
    381a:	441e      	add	r6, r3
    381c:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
    3820:	ea4f 0249 	mov.w	r2, r9, lsl #1
    3824:	2102      	movs	r1, #2
    3826:	3009      	adds	r0, #9
    3828:	47b8      	blx	r7
		grid_report_ui_set_changed_flag(mod, adc_index_1+16);
    382a:	f104 0110 	add.w	r1, r4, #16
    382e:	b2c9      	uxtb	r1, r1
    3830:	4628      	mov	r0, r5
    3832:	47c0      	blx	r8
    3834:	e78e      	b.n	3754 <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    3836:	bf00      	nop
    3838:	47ae147b 	.word	0x47ae147b
    383c:	3ff07ae1 	.word	0x3ff07ae1
    3840:	20000646 	.word	0x20000646
    3844:	20000344 	.word	0x20000344
    3848:	41008000 	.word	0x41008000
    384c:	20000fc8 	.word	0x20000fc8
    3850:	00004c85 	.word	0x00004c85
    3854:	2000119c 	.word	0x2000119c
    3858:	00001401 	.word	0x00001401
    385c:	000014fd 	.word	0x000014fd
    3860:	00003631 	.word	0x00003631
    3864:	0000150d 	.word	0x0000150d
    3868:	20003270 	.word	0x20003270
    386c:	00003e11 	.word	0x00003e11
    3870:	0000c339 	.word	0x0000c339
    3874:	0000c405 	.word	0x0000c405
    3878:	0000c829 	.word	0x0000c829
    387c:	0000454f 	.word	0x0000454f

00003880 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    3882:	4f0b      	ldr	r7, [pc, #44]	; (38b0 <grid_module_po16_revb_hardware_init+0x30>)
    3884:	4c0b      	ldr	r4, [pc, #44]	; (38b4 <grid_module_po16_revb_hardware_init+0x34>)
    3886:	463b      	mov	r3, r7
    3888:	2200      	movs	r2, #0
    388a:	4611      	mov	r1, r2
    388c:	4620      	mov	r0, r4
    388e:	4e0a      	ldr	r6, [pc, #40]	; (38b8 <grid_module_po16_revb_hardware_init+0x38>)
    3890:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    3892:	4d0a      	ldr	r5, [pc, #40]	; (38bc <grid_module_po16_revb_hardware_init+0x3c>)
    3894:	463b      	mov	r3, r7
    3896:	2200      	movs	r2, #0
    3898:	4611      	mov	r1, r2
    389a:	4628      	mov	r0, r5
    389c:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    389e:	2100      	movs	r1, #0
    38a0:	4620      	mov	r0, r4
    38a2:	4c07      	ldr	r4, [pc, #28]	; (38c0 <grid_module_po16_revb_hardware_init+0x40>)
    38a4:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    38a6:	2100      	movs	r1, #0
    38a8:	4628      	mov	r0, r5
    38aa:	47a0      	blx	r4
    38ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38ae:	bf00      	nop
    38b0:	00003651 	.word	0x00003651
    38b4:	20000fc8 	.word	0x20000fc8
    38b8:	00004c05 	.word	0x00004c05
    38bc:	2000119c 	.word	0x2000119c
    38c0:	00004bc5 	.word	0x00004bc5

000038c4 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    38c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38c8:	b090      	sub	sp, #64	; 0x40
    38ca:	4680      	mov	r8, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    38cc:	2307      	movs	r3, #7
    38ce:	220e      	movs	r2, #14
    38d0:	2105      	movs	r1, #5
    38d2:	2010      	movs	r0, #16
    38d4:	4c2a      	ldr	r4, [pc, #168]	; (3980 <grid_module_po16_revb_init+0xbc>)
    38d6:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    38d8:	2110      	movs	r1, #16
    38da:	482a      	ldr	r0, [pc, #168]	; (3984 <grid_module_po16_revb_init+0xc0>)
    38dc:	4b2a      	ldr	r3, [pc, #168]	; (3988 <grid_module_po16_revb_init+0xc4>)
    38de:	4798      	blx	r3
	
	grid_ui_model_init(mod, 32);
    38e0:	2120      	movs	r1, #32
    38e2:	4640      	mov	r0, r8
    38e4:	4b29      	ldr	r3, [pc, #164]	; (398c <grid_module_po16_revb_init+0xc8>)
    38e6:	4798      	blx	r3
    38e8:	2400      	movs	r4, #0
	
	
	for(uint8_t i=0; i<32; i++){
			
		uint8_t payload_template[30] = {0};
    38ea:	4625      	mov	r5, r4
    38ec:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 39ac <grid_module_po16_revb_init+0xe8>
    38f0:	e025      	b.n	393e <grid_module_po16_revb_init+0x7a>
		}
		else{ // LED
			
			type = GRID_REPORT_TYPE_LOCAL;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    38f2:	2303      	movs	r3, #3
    38f4:	9304      	str	r3, [sp, #16]
    38f6:	9503      	str	r5, [sp, #12]
    38f8:	f1a4 0210 	sub.w	r2, r4, #16
    38fc:	9202      	str	r2, [sp, #8]
    38fe:	2263      	movs	r2, #99	; 0x63
    3900:	9201      	str	r2, [sp, #4]
    3902:	2601      	movs	r6, #1
    3904:	9600      	str	r6, [sp, #0]
    3906:	2202      	movs	r2, #2
    3908:	4921      	ldr	r1, [pc, #132]	; (3990 <grid_module_po16_revb_init+0xcc>)
    390a:	a808      	add	r0, sp, #32
    390c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 399c <grid_module_po16_revb_init+0xd8>
    3910:	47d0      	blx	sl

			
		

		
		uint8_t payload_length = strlen(payload_template);
    3912:	a808      	add	r0, sp, #32
    3914:	4b1f      	ldr	r3, [pc, #124]	; (3994 <grid_module_po16_revb_init+0xd0>)
    3916:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3918:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    391c:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    3920:	2302      	movs	r3, #2
    3922:	9302      	str	r3, [sp, #8]
    3924:	ab07      	add	r3, sp, #28
    3926:	9301      	str	r3, [sp, #4]
    3928:	b2c0      	uxtb	r0, r0
    392a:	9000      	str	r0, [sp, #0]
    392c:	ab08      	add	r3, sp, #32
    392e:	4632      	mov	r2, r6
    3930:	4639      	mov	r1, r7
    3932:	4640      	mov	r0, r8
    3934:	4e18      	ldr	r6, [pc, #96]	; (3998 <grid_module_po16_revb_init+0xd4>)
    3936:	47b0      	blx	r6
    3938:	3401      	adds	r4, #1
	for(uint8_t i=0; i<32; i++){
    393a:	2c20      	cmp	r4, #32
    393c:	d015      	beq.n	396a <grid_module_po16_revb_init+0xa6>
    393e:	b2e7      	uxtb	r7, r4
		uint8_t payload_template[30] = {0};
    3940:	221e      	movs	r2, #30
    3942:	4629      	mov	r1, r5
    3944:	a808      	add	r0, sp, #32
    3946:	47c8      	blx	r9
		if (i<16){ // Control Change
    3948:	2f0f      	cmp	r7, #15
    394a:	d8d2      	bhi.n	38f2 <grid_module_po16_revb_init+0x2e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    394c:	2303      	movs	r3, #3
    394e:	9304      	str	r3, [sp, #16]
    3950:	9503      	str	r5, [sp, #12]
    3952:	9402      	str	r4, [sp, #8]
    3954:	23b0      	movs	r3, #176	; 0xb0
    3956:	9301      	str	r3, [sp, #4]
    3958:	9500      	str	r5, [sp, #0]
    395a:	462b      	mov	r3, r5
    395c:	2202      	movs	r2, #2
    395e:	490c      	ldr	r1, [pc, #48]	; (3990 <grid_module_po16_revb_init+0xcc>)
    3960:	a808      	add	r0, sp, #32
    3962:	4e0e      	ldr	r6, [pc, #56]	; (399c <grid_module_po16_revb_init+0xd8>)
    3964:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3966:	2602      	movs	r6, #2
    3968:	e7d3      	b.n	3912 <grid_module_po16_revb_init+0x4e>
		
	}
	
	grid_report_sys_init(mod);
    396a:	4640      	mov	r0, r8
    396c:	4b0c      	ldr	r3, [pc, #48]	; (39a0 <grid_module_po16_revb_init+0xdc>)
    396e:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    3970:	4b0c      	ldr	r3, [pc, #48]	; (39a4 <grid_module_po16_revb_init+0xe0>)
    3972:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    3974:	4b0c      	ldr	r3, [pc, #48]	; (39a8 <grid_module_po16_revb_init+0xe4>)
    3976:	4798      	blx	r3
	
    3978:	b010      	add	sp, #64	; 0x40
    397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    397e:	bf00      	nop
    3980:	000013b5 	.word	0x000013b5
    3984:	200077d4 	.word	0x200077d4
    3988:	000026a5 	.word	0x000026a5
    398c:	00004245 	.word	0x00004245
    3990:	0000df80 	.word	0x0000df80
    3994:	0000cd0d 	.word	0x0000cd0d
    3998:	00004309 	.word	0x00004309
    399c:	0000ccc5 	.word	0x0000ccc5
    39a0:	0000432d 	.word	0x0000432d
    39a4:	00003881 	.word	0x00003881
    39a8:	00003631 	.word	0x00003631
    39ac:	0000c8d7 	.word	0x0000c8d7

000039b0 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    39b0:	8a02      	ldrh	r2, [r0, #16]
    39b2:	b142      	cbz	r2, 39c6 <tx_cb_USART_GRID+0x16>
    39b4:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    39b8:	322f      	adds	r2, #47	; 0x2f
    39ba:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    39bc:	2100      	movs	r1, #0
    39be:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    39c2:	4293      	cmp	r3, r2
    39c4:	d1fb      	bne.n	39be <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    39c6:	2300      	movs	r3, #0
    39c8:	8203      	strh	r3, [r0, #16]
    39ca:	4770      	bx	lr

000039cc <tx_cb_USART_GRID_W>:
{
    39cc:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    39ce:	4802      	ldr	r0, [pc, #8]	; (39d8 <tx_cb_USART_GRID_W+0xc>)
    39d0:	4b02      	ldr	r3, [pc, #8]	; (39dc <tx_cb_USART_GRID_W+0x10>)
    39d2:	4798      	blx	r3
    39d4:	bd08      	pop	{r3, pc}
    39d6:	bf00      	nop
    39d8:	20003730 	.word	0x20003730
    39dc:	000039b1 	.word	0x000039b1

000039e0 <tx_cb_USART_GRID_S>:
{
    39e0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    39e2:	4802      	ldr	r0, [pc, #8]	; (39ec <tx_cb_USART_GRID_S+0xc>)
    39e4:	4b02      	ldr	r3, [pc, #8]	; (39f0 <tx_cb_USART_GRID_S+0x10>)
    39e6:	4798      	blx	r3
    39e8:	bd08      	pop	{r3, pc}
    39ea:	bf00      	nop
    39ec:	2000474c 	.word	0x2000474c
    39f0:	000039b1 	.word	0x000039b1

000039f4 <tx_cb_USART_GRID_E>:
{
    39f4:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    39f6:	4802      	ldr	r0, [pc, #8]	; (3a00 <tx_cb_USART_GRID_E+0xc>)
    39f8:	4b02      	ldr	r3, [pc, #8]	; (3a04 <tx_cb_USART_GRID_E+0x10>)
    39fa:	4798      	blx	r3
    39fc:	bd08      	pop	{r3, pc}
    39fe:	bf00      	nop
    3a00:	20006760 	.word	0x20006760
    3a04:	000039b1 	.word	0x000039b1

00003a08 <tx_cb_USART_GRID_N>:
{
    3a08:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    3a0a:	4802      	ldr	r0, [pc, #8]	; (3a14 <tx_cb_USART_GRID_N+0xc>)
    3a0c:	4b02      	ldr	r3, [pc, #8]	; (3a18 <tx_cb_USART_GRID_N+0x10>)
    3a0e:	4798      	blx	r3
    3a10:	bd08      	pop	{r3, pc}
    3a12:	bf00      	nop
    3a14:	2000121c 	.word	0x2000121c
    3a18:	000039b1 	.word	0x000039b1

00003a1c <err_cb_USART_GRID>:
{
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
    3a1c:	b508      	push	{r3, lr}
	por->usart_error_flag = 1;	
    3a1e:	2301      	movs	r3, #1
    3a20:	7703      	strb	r3, [r0, #28]
	
	usart_async_disable(por->usart);
    3a22:	6880      	ldr	r0, [r0, #8]
    3a24:	4b01      	ldr	r3, [pc, #4]	; (3a2c <err_cb_USART_GRID+0x10>)
    3a26:	4798      	blx	r3
    3a28:	bd08      	pop	{r3, pc}
    3a2a:	bf00      	nop
    3a2c:	00005995 	.word	0x00005995

00003a30 <err_cb_USART_GRID_W>:
{
    3a30:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_W);
    3a32:	4802      	ldr	r0, [pc, #8]	; (3a3c <err_cb_USART_GRID_W+0xc>)
    3a34:	4b02      	ldr	r3, [pc, #8]	; (3a40 <err_cb_USART_GRID_W+0x10>)
    3a36:	4798      	blx	r3
    3a38:	bd08      	pop	{r3, pc}
    3a3a:	bf00      	nop
    3a3c:	20003730 	.word	0x20003730
    3a40:	00003a1d 	.word	0x00003a1d

00003a44 <err_cb_USART_GRID_S>:
{
    3a44:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_S);
    3a46:	4802      	ldr	r0, [pc, #8]	; (3a50 <err_cb_USART_GRID_S+0xc>)
    3a48:	4b02      	ldr	r3, [pc, #8]	; (3a54 <err_cb_USART_GRID_S+0x10>)
    3a4a:	4798      	blx	r3
    3a4c:	bd08      	pop	{r3, pc}
    3a4e:	bf00      	nop
    3a50:	2000474c 	.word	0x2000474c
    3a54:	00003a1d 	.word	0x00003a1d

00003a58 <err_cb_USART_GRID_E>:
{
    3a58:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_E);
    3a5a:	4802      	ldr	r0, [pc, #8]	; (3a64 <err_cb_USART_GRID_E+0xc>)
    3a5c:	4b02      	ldr	r3, [pc, #8]	; (3a68 <err_cb_USART_GRID_E+0x10>)
    3a5e:	4798      	blx	r3
    3a60:	bd08      	pop	{r3, pc}
    3a62:	bf00      	nop
    3a64:	20006760 	.word	0x20006760
    3a68:	00003a1d 	.word	0x00003a1d

00003a6c <err_cb_USART_GRID_N>:
{
    3a6c:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_N);
    3a6e:	4802      	ldr	r0, [pc, #8]	; (3a78 <err_cb_USART_GRID_N+0xc>)
    3a70:	4b02      	ldr	r3, [pc, #8]	; (3a7c <err_cb_USART_GRID_N+0x10>)
    3a72:	4798      	blx	r3
    3a74:	bd08      	pop	{r3, pc}
    3a76:	bf00      	nop
    3a78:	2000121c 	.word	0x2000121c
    3a7c:	00003a1d 	.word	0x00003a1d

00003a80 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    3a80:	b508      	push	{r3, lr}
    3a82:	7b83      	ldrb	r3, [r0, #14]
    3a84:	011b      	lsls	r3, r3, #4
    3a86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3a8a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    3a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3a90:	f022 0202 	bic.w	r2, r2, #2
    3a94:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    3a96:	2100      	movs	r1, #0
    3a98:	7b80      	ldrb	r0, [r0, #14]
    3a9a:	4b01      	ldr	r3, [pc, #4]	; (3aa0 <grid_sys_port_reset_dma+0x20>)
    3a9c:	4798      	blx	r3
    3a9e:	bd08      	pop	{r3, pc}
    3aa0:	000069dd 	.word	0x000069dd

00003aa4 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    3aa4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3aa6:	4802      	ldr	r0, [pc, #8]	; (3ab0 <dma_transfer_complete_w_cb+0xc>)
    3aa8:	4b02      	ldr	r3, [pc, #8]	; (3ab4 <dma_transfer_complete_w_cb+0x10>)
    3aaa:	4798      	blx	r3
    3aac:	bd08      	pop	{r3, pc}
    3aae:	bf00      	nop
    3ab0:	20003730 	.word	0x20003730
    3ab4:	00003a81 	.word	0x00003a81

00003ab8 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    3ab8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3aba:	4802      	ldr	r0, [pc, #8]	; (3ac4 <dma_transfer_complete_s_cb+0xc>)
    3abc:	4b02      	ldr	r3, [pc, #8]	; (3ac8 <dma_transfer_complete_s_cb+0x10>)
    3abe:	4798      	blx	r3
    3ac0:	bd08      	pop	{r3, pc}
    3ac2:	bf00      	nop
    3ac4:	2000474c 	.word	0x2000474c
    3ac8:	00003a81 	.word	0x00003a81

00003acc <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    3acc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3ace:	4802      	ldr	r0, [pc, #8]	; (3ad8 <dma_transfer_complete_e_cb+0xc>)
    3ad0:	4b02      	ldr	r3, [pc, #8]	; (3adc <dma_transfer_complete_e_cb+0x10>)
    3ad2:	4798      	blx	r3
    3ad4:	bd08      	pop	{r3, pc}
    3ad6:	bf00      	nop
    3ad8:	20006760 	.word	0x20006760
    3adc:	00003a81 	.word	0x00003a81

00003ae0 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    3ae0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3ae2:	4802      	ldr	r0, [pc, #8]	; (3aec <dma_transfer_complete_n_cb+0xc>)
    3ae4:	4b02      	ldr	r3, [pc, #8]	; (3af0 <dma_transfer_complete_n_cb+0x10>)
    3ae6:	4798      	blx	r3
    3ae8:	bd08      	pop	{r3, pc}
    3aea:	bf00      	nop
    3aec:	2000121c 	.word	0x2000121c
    3af0:	00003a81 	.word	0x00003a81

00003af4 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    3af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3af8:	4b3e      	ldr	r3, [pc, #248]	; (3bf4 <grid_sys_uart_init+0x100>)
    3afa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3afe:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3b02:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    3b06:	f042 0204 	orr.w	r2, r2, #4
    3b0a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b0e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3b12:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3b16:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3b1a:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3b1e:	f042 0204 	orr.w	r2, r2, #4
    3b22:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b26:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3b2e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3b32:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    3b36:	f042 0204 	orr.w	r2, r2, #4
    3b3a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b3e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3b42:	f44f 7100 	mov.w	r1, #512	; 0x200
    3b46:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3b4a:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3b4e:	f042 0204 	orr.w	r2, r2, #4
    3b52:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b56:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    3b5a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3c40 <grid_sys_uart_init+0x14c>
    3b5e:	4a26      	ldr	r2, [pc, #152]	; (3bf8 <grid_sys_uart_init+0x104>)
    3b60:	2101      	movs	r1, #1
    3b62:	4640      	mov	r0, r8
    3b64:	4c25      	ldr	r4, [pc, #148]	; (3bfc <grid_sys_uart_init+0x108>)
    3b66:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    3b68:	4f25      	ldr	r7, [pc, #148]	; (3c00 <grid_sys_uart_init+0x10c>)
    3b6a:	4a26      	ldr	r2, [pc, #152]	; (3c04 <grid_sys_uart_init+0x110>)
    3b6c:	2101      	movs	r1, #1
    3b6e:	4638      	mov	r0, r7
    3b70:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    3b72:	4e25      	ldr	r6, [pc, #148]	; (3c08 <grid_sys_uart_init+0x114>)
    3b74:	4a25      	ldr	r2, [pc, #148]	; (3c0c <grid_sys_uart_init+0x118>)
    3b76:	2101      	movs	r1, #1
    3b78:	4630      	mov	r0, r6
    3b7a:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    3b7c:	4d24      	ldr	r5, [pc, #144]	; (3c10 <grid_sys_uart_init+0x11c>)
    3b7e:	4a25      	ldr	r2, [pc, #148]	; (3c14 <grid_sys_uart_init+0x120>)
    3b80:	2101      	movs	r1, #1
    3b82:	4628      	mov	r0, r5
    3b84:	47a0      	blx	r4
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    3b86:	2101      	movs	r1, #1
    3b88:	4640      	mov	r0, r8
    3b8a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3c44 <grid_sys_uart_init+0x150>
    3b8e:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    3b90:	2101      	movs	r1, #1
    3b92:	4638      	mov	r0, r7
    3b94:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    3b96:	2101      	movs	r1, #1
    3b98:	4630      	mov	r0, r6
    3b9a:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    3b9c:	2101      	movs	r1, #1
    3b9e:	4628      	mov	r0, r5
    3ba0:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    3ba2:	4a1d      	ldr	r2, [pc, #116]	; (3c18 <grid_sys_uart_init+0x124>)
    3ba4:	2102      	movs	r1, #2
    3ba6:	4640      	mov	r0, r8
    3ba8:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    3baa:	4a1c      	ldr	r2, [pc, #112]	; (3c1c <grid_sys_uart_init+0x128>)
    3bac:	2102      	movs	r1, #2
    3bae:	4638      	mov	r0, r7
    3bb0:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    3bb2:	4a1b      	ldr	r2, [pc, #108]	; (3c20 <grid_sys_uart_init+0x12c>)
    3bb4:	2102      	movs	r1, #2
    3bb6:	4630      	mov	r0, r6
    3bb8:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    3bba:	4a1a      	ldr	r2, [pc, #104]	; (3c24 <grid_sys_uart_init+0x130>)
    3bbc:	2102      	movs	r1, #2
    3bbe:	4628      	mov	r0, r5
    3bc0:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    3bc2:	4919      	ldr	r1, [pc, #100]	; (3c28 <grid_sys_uart_init+0x134>)
    3bc4:	4640      	mov	r0, r8
    3bc6:	4c19      	ldr	r4, [pc, #100]	; (3c2c <grid_sys_uart_init+0x138>)
    3bc8:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    3bca:	4919      	ldr	r1, [pc, #100]	; (3c30 <grid_sys_uart_init+0x13c>)
    3bcc:	4638      	mov	r0, r7
    3bce:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    3bd0:	4918      	ldr	r1, [pc, #96]	; (3c34 <grid_sys_uart_init+0x140>)
    3bd2:	4630      	mov	r0, r6
    3bd4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    3bd6:	4918      	ldr	r1, [pc, #96]	; (3c38 <grid_sys_uart_init+0x144>)
    3bd8:	4628      	mov	r0, r5
    3bda:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    3bdc:	4640      	mov	r0, r8
    3bde:	4c17      	ldr	r4, [pc, #92]	; (3c3c <grid_sys_uart_init+0x148>)
    3be0:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    3be2:	4638      	mov	r0, r7
    3be4:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    3be6:	4630      	mov	r0, r6
    3be8:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    3bea:	4628      	mov	r0, r5
    3bec:	47a0      	blx	r4
    3bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3bf2:	bf00      	nop
    3bf4:	41008000 	.word	0x41008000
    3bf8:	00003a09 	.word	0x00003a09
    3bfc:	000059e9 	.word	0x000059e9
    3c00:	20000ff4 	.word	0x20000ff4
    3c04:	000039f5 	.word	0x000039f5
    3c08:	2000114c 	.word	0x2000114c
    3c0c:	000039e1 	.word	0x000039e1
    3c10:	200010fc 	.word	0x200010fc
    3c14:	000039cd 	.word	0x000039cd
    3c18:	00003a6d 	.word	0x00003a6d
    3c1c:	00003a59 	.word	0x00003a59
    3c20:	00003a45 	.word	0x00003a45
    3c24:	00003a31 	.word	0x00003a31
    3c28:	2000327c 	.word	0x2000327c
    3c2c:	000059c1 	.word	0x000059c1
    3c30:	20004738 	.word	0x20004738
    3c34:	20005754 	.word	0x20005754
    3c38:	200077fc 	.word	0x200077fc
    3c3c:	00005969 	.word	0x00005969
    3c40:	20001048 	.word	0x20001048
    3c44:	00005a5d 	.word	0x00005a5d

00003c48 <grid_sys_dma_rx_init_one>:

}



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c4a:	b083      	sub	sp, #12
    3c4c:	4605      	mov	r5, r0
    3c4e:	460f      	mov	r7, r1
    3c50:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    3c52:	7b84      	ldrb	r4, [r0, #14]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    3c54:	6883      	ldr	r3, [r0, #8]
    3c56:	6a19      	ldr	r1, [r3, #32]
    3c58:	3128      	adds	r1, #40	; 0x28
    3c5a:	4620      	mov	r0, r4
    3c5c:	4b0d      	ldr	r3, [pc, #52]	; (3c94 <grid_sys_dma_rx_init_one+0x4c>)
    3c5e:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3c60:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    3c64:	4620      	mov	r0, r4
    3c66:	4b0c      	ldr	r3, [pc, #48]	; (3c98 <grid_sys_dma_rx_init_one+0x50>)
    3c68:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    3c6a:	4639      	mov	r1, r7
    3c6c:	4620      	mov	r0, r4
    3c6e:	4b0b      	ldr	r3, [pc, #44]	; (3c9c <grid_sys_dma_rx_init_one+0x54>)
    3c70:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    3c72:	4621      	mov	r1, r4
    3c74:	a801      	add	r0, sp, #4
    3c76:	4b0a      	ldr	r3, [pc, #40]	; (3ca0 <grid_sys_dma_rx_init_one+0x58>)
    3c78:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    3c7a:	9b01      	ldr	r3, [sp, #4]
    3c7c:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3c7e:	2201      	movs	r2, #1
    3c80:	2100      	movs	r1, #0
    3c82:	4620      	mov	r0, r4
    3c84:	4b07      	ldr	r3, [pc, #28]	; (3ca4 <grid_sys_dma_rx_init_one+0x5c>)
    3c86:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3c88:	2100      	movs	r1, #0
    3c8a:	4620      	mov	r0, r4
    3c8c:	4b06      	ldr	r3, [pc, #24]	; (3ca8 <grid_sys_dma_rx_init_one+0x60>)
    3c8e:	4798      	blx	r3
	

}
    3c90:	b003      	add	sp, #12
    3c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c94:	00006959 	.word	0x00006959
    3c98:	00006949 	.word	0x00006949
    3c9c:	00006985 	.word	0x00006985
    3ca0:	00006a1d 	.word	0x00006a1d
    3ca4:	000068f5 	.word	0x000068f5
    3ca8:	000069dd 	.word	0x000069dd

00003cac <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    3cac:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3cae:	4a10      	ldr	r2, [pc, #64]	; (3cf0 <grid_sys_dma_rx_init+0x44>)
    3cb0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3cb4:	480f      	ldr	r0, [pc, #60]	; (3cf4 <grid_sys_dma_rx_init+0x48>)
    3cb6:	4c10      	ldr	r4, [pc, #64]	; (3cf8 <grid_sys_dma_rx_init+0x4c>)
    3cb8:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    3cba:	4a10      	ldr	r2, [pc, #64]	; (3cfc <grid_sys_dma_rx_init+0x50>)
    3cbc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3cc0:	480f      	ldr	r0, [pc, #60]	; (3d00 <grid_sys_dma_rx_init+0x54>)
    3cc2:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    3cc4:	4a0f      	ldr	r2, [pc, #60]	; (3d04 <grid_sys_dma_rx_init+0x58>)
    3cc6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3cca:	480f      	ldr	r0, [pc, #60]	; (3d08 <grid_sys_dma_rx_init+0x5c>)
    3ccc:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    3cce:	4a0f      	ldr	r2, [pc, #60]	; (3d0c <grid_sys_dma_rx_init+0x60>)
    3cd0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3cd4:	480e      	ldr	r0, [pc, #56]	; (3d10 <grid_sys_dma_rx_init+0x64>)
    3cd6:	47a0      	blx	r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cd8:	4b0e      	ldr	r3, [pc, #56]	; (3d14 <grid_sys_dma_rx_init+0x68>)
    3cda:	2200      	movs	r2, #0
    3cdc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    3ce0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    3ce4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    3ce8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    3cec:	bd10      	pop	{r4, pc}
    3cee:	bf00      	nop
    3cf0:	00003ae1 	.word	0x00003ae1
    3cf4:	2000121c 	.word	0x2000121c
    3cf8:	00003c49 	.word	0x00003c49
    3cfc:	00003acd 	.word	0x00003acd
    3d00:	20006760 	.word	0x20006760
    3d04:	00003ab9 	.word	0x00003ab9
    3d08:	2000474c 	.word	0x2000474c
    3d0c:	00003aa5 	.word	0x00003aa5
    3d10:	20003730 	.word	0x20003730
    3d14:	e000e100 	.word	0xe000e100

00003d18 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3d18:	6980      	ldr	r0, [r0, #24]
    3d1a:	4770      	bx	lr

00003d1c <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    3d1c:	6980      	ldr	r0, [r0, #24]
	
	

}
    3d1e:	1a40      	subs	r0, r0, r1
    3d20:	4770      	bx	lr

00003d22 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3d22:	6983      	ldr	r3, [r0, #24]
    3d24:	3301      	adds	r3, #1
    3d26:	6183      	str	r3, [r0, #24]
    3d28:	4770      	bx	lr

00003d2a <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    3d2a:	7a00      	ldrb	r0, [r0, #8]
    3d2c:	4770      	bx	lr

00003d2e <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    3d2e:	2300      	movs	r3, #0
    3d30:	7203      	strb	r3, [r0, #8]
    3d32:	4770      	bx	lr

00003d34 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3d34:	7983      	ldrb	r3, [r0, #6]
    3d36:	b123      	cbz	r3, 3d42 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3d38:	2b01      	cmp	r3, #1
    3d3a:	d00f      	beq.n	3d5c <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    3d3c:	2b02      	cmp	r3, #2
    3d3e:	d015      	beq.n	3d6c <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3d40:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3d42:	8880      	ldrh	r0, [r0, #4]
    3d44:	0840      	lsrs	r0, r0, #1
    3d46:	387d      	subs	r0, #125	; 0x7d
    3d48:	2800      	cmp	r0, #0
    3d4a:	bfb8      	it	lt
    3d4c:	4240      	neglt	r0, r0
    3d4e:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3d52:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3d56:	f3c0 0047 	ubfx	r0, r0, #1, #8
    3d5a:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    3d5c:	8880      	ldrh	r0, [r0, #4]
    3d5e:	4b06      	ldr	r3, [pc, #24]	; (3d78 <grid_sys_alert_get_color_intensity+0x44>)
    3d60:	fba3 3000 	umull	r3, r0, r3, r0
    3d64:	f340 1000 	sbfx	r0, r0, #4, #1
    3d68:	b2c0      	uxtb	r0, r0
    3d6a:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3d6c:	8880      	ldrh	r0, [r0, #4]
    3d6e:	2864      	cmp	r0, #100	; 0x64
    3d70:	bf8c      	ite	hi
    3d72:	20ff      	movhi	r0, #255	; 0xff
    3d74:	2000      	movls	r0, #0
    3d76:	4770      	bx	lr
    3d78:	10624dd3 	.word	0x10624dd3

00003d7c <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    3d7c:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    3d7e:	2401      	movs	r4, #1
    3d80:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    3d82:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    3d84:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    3d86:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    3d88:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3d8c:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    3d8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3d92:	7183      	strb	r3, [r0, #6]
	
}
    3d94:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d98:	4770      	bx	lr

00003d9a <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    3d9a:	7840      	ldrb	r0, [r0, #1]
    3d9c:	4770      	bx	lr

00003d9e <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    3d9e:	7880      	ldrb	r0, [r0, #2]
    3da0:	4770      	bx	lr

00003da2 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    3da2:	78c0      	ldrb	r0, [r0, #3]
    3da4:	4770      	bx	lr

00003da6 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    3da6:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    3da8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3dac:	b2d8      	uxtb	r0, r3
    3dae:	2809      	cmp	r0, #9
    3db0:	d90d      	bls.n	3dce <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    3db2:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    3db6:	b2db      	uxtb	r3, r3
    3db8:	2b05      	cmp	r3, #5
    3dba:	d903      	bls.n	3dc4 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    3dbc:	b131      	cbz	r1, 3dcc <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    3dbe:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    3dc0:	2000      	movs	r0, #0
    3dc2:	4770      	bx	lr
		result = ascii - 97 + 10;
    3dc4:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    3dc8:	b2c0      	uxtb	r0, r0
    3dca:	4770      	bx	lr
	uint8_t result = 0;
    3dcc:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    3dce:	4770      	bx	lr

00003dd0 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    3dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    3dd4:	b1c1      	cbz	r1, 3e08 <grid_sys_read_hex_string_value+0x38>
    3dd6:	4690      	mov	r8, r2
    3dd8:	1e45      	subs	r5, r0, #1
    3dda:	1e4b      	subs	r3, r1, #1
    3ddc:	009c      	lsls	r4, r3, #2
    3dde:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3de2:	3f02      	subs	r7, #2
    3de4:	b2db      	uxtb	r3, r3
    3de6:	1aff      	subs	r7, r7, r3
    3de8:	00bf      	lsls	r7, r7, #2
    3dea:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3dec:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3e0c <grid_sys_read_hex_string_value+0x3c>
    3df0:	4641      	mov	r1, r8
    3df2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3df6:	47c8      	blx	r9
    3df8:	40a0      	lsls	r0, r4
    3dfa:	4406      	add	r6, r0
    3dfc:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    3dfe:	42bc      	cmp	r4, r7
    3e00:	d1f6      	bne.n	3df0 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3e02:	4630      	mov	r0, r6
    3e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    3e08:	2600      	movs	r6, #0
	return result;
    3e0a:	e7fa      	b.n	3e02 <grid_sys_read_hex_string_value+0x32>
    3e0c:	00003da7 	.word	0x00003da7

00003e10 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3e10:	b530      	push	{r4, r5, lr}
    3e12:	b085      	sub	sp, #20
    3e14:	4605      	mov	r5, r0
    3e16:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    3e18:	4909      	ldr	r1, [pc, #36]	; (3e40 <grid_sys_write_hex_string_value+0x30>)
    3e1a:	a801      	add	r0, sp, #4
    3e1c:	4b09      	ldr	r3, [pc, #36]	; (3e44 <grid_sys_write_hex_string_value+0x34>)
    3e1e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3e20:	b164      	cbz	r4, 3e3c <grid_sys_write_hex_string_value+0x2c>
    3e22:	ab04      	add	r3, sp, #16
    3e24:	1b1a      	subs	r2, r3, r4
    3e26:	3a05      	subs	r2, #5
    3e28:	1e6b      	subs	r3, r5, #1
    3e2a:	1e60      	subs	r0, r4, #1
    3e2c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3e30:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3e34:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3e38:	4283      	cmp	r3, r0
    3e3a:	d1f9      	bne.n	3e30 <grid_sys_write_hex_string_value+0x20>
	}

}
    3e3c:	b005      	add	sp, #20
    3e3e:	bd30      	pop	{r4, r5, pc}
    3e40:	0000df9c 	.word	0x0000df9c
    3e44:	0000ccc5 	.word	0x0000ccc5

00003e48 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3e48:	4b34      	ldr	r3, [pc, #208]	; (3f1c <grid_sys_get_hwcfg+0xd4>)
    3e4a:	681b      	ldr	r3, [r3, #0]
    3e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e50:	d002      	beq.n	3e58 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3e52:	4b32      	ldr	r3, [pc, #200]	; (3f1c <grid_sys_get_hwcfg+0xd4>)
    3e54:	6818      	ldr	r0, [r3, #0]
    3e56:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e5c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3e5e:	4b30      	ldr	r3, [pc, #192]	; (3f20 <grid_sys_get_hwcfg+0xd8>)
    3e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3e68:	492e      	ldr	r1, [pc, #184]	; (3f24 <grid_sys_get_hwcfg+0xdc>)
    3e6a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3e6e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3e72:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3e76:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    3e7a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3e7e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3e82:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    3e86:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3e8e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3e92:	4925      	ldr	r1, [pc, #148]	; (3f28 <grid_sys_get_hwcfg+0xe0>)
    3e94:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3e98:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    3e9c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ea0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    3ea4:	2001      	movs	r0, #1
    3ea6:	4b21      	ldr	r3, [pc, #132]	; (3f2c <grid_sys_get_hwcfg+0xe4>)
    3ea8:	4798      	blx	r3
    3eaa:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    3eac:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3eae:	4d1c      	ldr	r5, [pc, #112]	; (3f20 <grid_sys_get_hwcfg+0xd8>)
    3eb0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    3eb4:	4f1d      	ldr	r7, [pc, #116]	; (3f2c <grid_sys_get_hwcfg+0xe4>)
    3eb6:	e00c      	b.n	3ed2 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    3eb8:	2e07      	cmp	r6, #7
    3eba:	d027      	beq.n	3f0c <grid_sys_get_hwcfg+0xc4>
    3ebc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    3ec0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    3ec4:	2001      	movs	r0, #1
    3ec6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ec8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    3ecc:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    3ece:	2e08      	cmp	r6, #8
    3ed0:	d01c      	beq.n	3f0c <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3ed2:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    3ed6:	2001      	movs	r0, #1
    3ed8:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3eda:	a801      	add	r0, sp, #4
    3edc:	4b14      	ldr	r3, [pc, #80]	; (3f30 <grid_sys_get_hwcfg+0xe8>)
    3ede:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3ee0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3ee4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3ee8:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3eec:	405c      	eors	r4, r3
    3eee:	4014      	ands	r4, r2
    3ef0:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3ef2:	a801      	add	r0, sp, #4
    3ef4:	4b0f      	ldr	r3, [pc, #60]	; (3f34 <grid_sys_get_hwcfg+0xec>)
    3ef6:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3ef8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3efc:	d0dc      	beq.n	3eb8 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3efe:	2301      	movs	r3, #1
    3f00:	40b3      	lsls	r3, r6
    3f02:	ea43 0808 	orr.w	r8, r3, r8
    3f06:	fa5f f888 	uxtb.w	r8, r8
    3f0a:	e7d5      	b.n	3eb8 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3f0c:	4b03      	ldr	r3, [pc, #12]	; (3f1c <grid_sys_get_hwcfg+0xd4>)
    3f0e:	f8c3 8000 	str.w	r8, [r3]
}
    3f12:	4b02      	ldr	r3, [pc, #8]	; (3f1c <grid_sys_get_hwcfg+0xd4>)
    3f14:	6818      	ldr	r0, [r3, #0]
    3f16:	b003      	add	sp, #12
    3f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f1c:	20000354 	.word	0x20000354
    3f20:	41008000 	.word	0x41008000
    3f24:	40002000 	.word	0x40002000
    3f28:	40028000 	.word	0x40028000
    3f2c:	00004e0d 	.word	0x00004e0d
    3f30:	00004d8d 	.word	0x00004d8d
    3f34:	00004d9b 	.word	0x00004d9b

00003f38 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f3c:	b085      	sub	sp, #20
    3f3e:	9003      	str	r0, [sp, #12]
    3f40:	460c      	mov	r4, r1
	mod->bank_changed = 1;
    3f42:	2301      	movs	r3, #1
    3f44:	7283      	strb	r3, [r0, #10]
	uint32_t hwtype = grid_sys_get_hwcfg();
    3f46:	4b4d      	ldr	r3, [pc, #308]	; (407c <grid_sys_bank_select+0x144>)
    3f48:	4798      	blx	r3
	if (banknumber == 255){
    3f4a:	2cff      	cmp	r4, #255	; 0xff
    3f4c:	d006      	beq.n	3f5c <grid_sys_bank_select+0x24>
		mod->bank_select = banknumber%4;
    3f4e:	f004 0403 	and.w	r4, r4, #3
    3f52:	9b03      	ldr	r3, [sp, #12]
    3f54:	725c      	strb	r4, [r3, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3f56:	f04f 0900 	mov.w	r9, #0
    3f5a:	e083      	b.n	4064 <grid_sys_bank_select+0x12c>
		mod->bank_select = 255;
    3f5c:	23ff      	movs	r3, #255	; 0xff
    3f5e:	9a03      	ldr	r2, [sp, #12]
    3f60:	7253      	strb	r3, [r2, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3f62:	2700      	movs	r7, #0
    3f64:	f8df b128 	ldr.w	fp, [pc, #296]	; 4090 <grid_sys_bank_select+0x158>
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/20, g/20, b/20);
    3f68:	f8df a118 	ldr.w	sl, [pc, #280]	; 4084 <grid_sys_bank_select+0x14c>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3f6c:	e02f      	b.n	3fce <grid_sys_bank_select+0x96>
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/20, g/20, b/20);
    3f6e:	2306      	movs	r3, #6
    3f70:	9301      	str	r3, [sp, #4]
    3f72:	9300      	str	r3, [sp, #0]
    3f74:	2201      	movs	r2, #1
    3f76:	4621      	mov	r1, r4
    3f78:	4841      	ldr	r0, [pc, #260]	; (4080 <grid_sys_bank_select+0x148>)
    3f7a:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/2, g/2, b/2);
    3f7c:	263f      	movs	r6, #63	; 0x3f
    3f7e:	9601      	str	r6, [sp, #4]
    3f80:	9600      	str	r6, [sp, #0]
    3f82:	4633      	mov	r3, r6
    3f84:	2201      	movs	r2, #1
    3f86:	4621      	mov	r1, r4
    3f88:	483d      	ldr	r0, [pc, #244]	; (4080 <grid_sys_bank_select+0x148>)
    3f8a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4088 <grid_sys_bank_select+0x150>
    3f8e:	47c8      	blx	r9
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_A, r, g, b);
    3f90:	257f      	movs	r5, #127	; 0x7f
    3f92:	9501      	str	r5, [sp, #4]
    3f94:	9500      	str	r5, [sp, #0]
    3f96:	462b      	mov	r3, r5
    3f98:	2201      	movs	r2, #1
    3f9a:	4621      	mov	r1, r4
    3f9c:	4838      	ldr	r0, [pc, #224]	; (4080 <grid_sys_bank_select+0x148>)
    3f9e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 408c <grid_sys_bank_select+0x154>
    3fa2:	47c0      	blx	r8
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_B, 0, 0, 0);
    3fa4:	2300      	movs	r3, #0
    3fa6:	9301      	str	r3, [sp, #4]
    3fa8:	9300      	str	r3, [sp, #0]
    3faa:	2202      	movs	r2, #2
    3fac:	4621      	mov	r1, r4
    3fae:	4834      	ldr	r0, [pc, #208]	; (4080 <grid_sys_bank_select+0x148>)
    3fb0:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_B, r/2, g/2, b/2);
    3fb2:	9601      	str	r6, [sp, #4]
    3fb4:	9600      	str	r6, [sp, #0]
    3fb6:	4633      	mov	r3, r6
    3fb8:	2202      	movs	r2, #2
    3fba:	4621      	mov	r1, r4
    3fbc:	4830      	ldr	r0, [pc, #192]	; (4080 <grid_sys_bank_select+0x148>)
    3fbe:	47c8      	blx	r9
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_B, r, g, b);
    3fc0:	9501      	str	r5, [sp, #4]
    3fc2:	9500      	str	r5, [sp, #0]
    3fc4:	462b      	mov	r3, r5
    3fc6:	2202      	movs	r2, #2
    3fc8:	4621      	mov	r1, r4
    3fca:	482d      	ldr	r0, [pc, #180]	; (4080 <grid_sys_bank_select+0x148>)
    3fcc:	47c0      	blx	r8
    3fce:	b2fc      	uxtb	r4, r7
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3fd0:	482b      	ldr	r0, [pc, #172]	; (4080 <grid_sys_bank_select+0x148>)
    3fd2:	47d8      	blx	fp
    3fd4:	3701      	adds	r7, #1
    3fd6:	42a0      	cmp	r0, r4
    3fd8:	d8c9      	bhi.n	3f6e <grid_sys_bank_select+0x36>
    3fda:	e04c      	b.n	4076 <grid_sys_bank_select+0x13e>
			uint8_t r = mod->bank_color_r[mod->bank_select];
    3fdc:	9a03      	ldr	r2, [sp, #12]
    3fde:	7a53      	ldrb	r3, [r2, #9]
    3fe0:	4413      	add	r3, r2
    3fe2:	f893 800b 	ldrb.w	r8, [r3, #11]
			uint8_t g = mod->bank_color_g[mod->bank_select];
    3fe6:	7bdd      	ldrb	r5, [r3, #15]
			uint8_t b = mod->bank_color_b[mod->bank_select];
    3fe8:	7cde      	ldrb	r6, [r3, #19]
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/32, g/32, b/32);
    3fea:	0973      	lsrs	r3, r6, #5
    3fec:	9301      	str	r3, [sp, #4]
    3fee:	096b      	lsrs	r3, r5, #5
    3ff0:	9300      	str	r3, [sp, #0]
    3ff2:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3ff6:	2201      	movs	r2, #1
    3ff8:	4621      	mov	r1, r4
    3ffa:	4821      	ldr	r0, [pc, #132]	; (4080 <grid_sys_bank_select+0x148>)
    3ffc:	4f21      	ldr	r7, [pc, #132]	; (4084 <grid_sys_bank_select+0x14c>)
    3ffe:	47b8      	blx	r7
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/2, g/2, b/2);
    4000:	ea4f 0358 	mov.w	r3, r8, lsr #1
    4004:	ea4f 0a55 	mov.w	sl, r5, lsr #1
    4008:	ea4f 0b56 	mov.w	fp, r6, lsr #1
    400c:	f8cd b004 	str.w	fp, [sp, #4]
    4010:	f8cd a000 	str.w	sl, [sp]
    4014:	9302      	str	r3, [sp, #8]
    4016:	2201      	movs	r2, #1
    4018:	4621      	mov	r1, r4
    401a:	4819      	ldr	r0, [pc, #100]	; (4080 <grid_sys_bank_select+0x148>)
    401c:	4f1a      	ldr	r7, [pc, #104]	; (4088 <grid_sys_bank_select+0x150>)
    401e:	47b8      	blx	r7
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_A, r, g, b);
    4020:	9601      	str	r6, [sp, #4]
    4022:	9500      	str	r5, [sp, #0]
    4024:	4643      	mov	r3, r8
    4026:	2201      	movs	r2, #1
    4028:	4621      	mov	r1, r4
    402a:	4815      	ldr	r0, [pc, #84]	; (4080 <grid_sys_bank_select+0x148>)
    402c:	4f17      	ldr	r7, [pc, #92]	; (408c <grid_sys_bank_select+0x154>)
    402e:	47b8      	blx	r7
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_B, 0, 0, 0);
    4030:	2300      	movs	r3, #0
    4032:	9301      	str	r3, [sp, #4]
    4034:	9300      	str	r3, [sp, #0]
    4036:	2202      	movs	r2, #2
    4038:	4621      	mov	r1, r4
    403a:	4811      	ldr	r0, [pc, #68]	; (4080 <grid_sys_bank_select+0x148>)
    403c:	4f11      	ldr	r7, [pc, #68]	; (4084 <grid_sys_bank_select+0x14c>)
    403e:	47b8      	blx	r7
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_B, r/2, g/2, b/2);
    4040:	f8cd b004 	str.w	fp, [sp, #4]
    4044:	f8cd a000 	str.w	sl, [sp]
    4048:	9b02      	ldr	r3, [sp, #8]
    404a:	2202      	movs	r2, #2
    404c:	4621      	mov	r1, r4
    404e:	480c      	ldr	r0, [pc, #48]	; (4080 <grid_sys_bank_select+0x148>)
    4050:	4f0d      	ldr	r7, [pc, #52]	; (4088 <grid_sys_bank_select+0x150>)
    4052:	47b8      	blx	r7
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_B, r, g, b);
    4054:	9601      	str	r6, [sp, #4]
    4056:	9500      	str	r5, [sp, #0]
    4058:	4643      	mov	r3, r8
    405a:	2202      	movs	r2, #2
    405c:	4621      	mov	r1, r4
    405e:	4808      	ldr	r0, [pc, #32]	; (4080 <grid_sys_bank_select+0x148>)
    4060:	4c0a      	ldr	r4, [pc, #40]	; (408c <grid_sys_bank_select+0x154>)
    4062:	47a0      	blx	r4
    4064:	fa5f f489 	uxtb.w	r4, r9
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    4068:	4805      	ldr	r0, [pc, #20]	; (4080 <grid_sys_bank_select+0x148>)
    406a:	4b09      	ldr	r3, [pc, #36]	; (4090 <grid_sys_bank_select+0x158>)
    406c:	4798      	blx	r3
    406e:	f109 0901 	add.w	r9, r9, #1
    4072:	4284      	cmp	r4, r0
    4074:	d3b2      	bcc.n	3fdc <grid_sys_bank_select+0xa4>
}
    4076:	b005      	add	sp, #20
    4078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    407c:	00003e49 	.word	0x00003e49
    4080:	200077d4 	.word	0x200077d4
    4084:	00002223 	.word	0x00002223
    4088:	0000226b 	.word	0x0000226b
    408c:	000022b5 	.word	0x000022b5
    4090:	000021e1 	.word	0x000021e1

00004094 <grid_sys_init>:
void grid_sys_init(struct grid_sys_model* mod){
    4094:	b510      	push	{r4, lr}
	mod->bank_select = 0;
    4096:	2200      	movs	r2, #0
    4098:	7242      	strb	r2, [r0, #9]
	mod->bank_color_r[0] = 0;
    409a:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[0] = 100;
    409c:	2164      	movs	r1, #100	; 0x64
    409e:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[0] = 200;
    40a0:	23c8      	movs	r3, #200	; 0xc8
    40a2:	74c3      	strb	r3, [r0, #19]
	mod->bank_color_r[1] = 200;
    40a4:	7303      	strb	r3, [r0, #12]
	mod->bank_color_g[1] = 100;
    40a6:	7401      	strb	r1, [r0, #16]
	mod->bank_color_b[1] = 0;
    40a8:	7502      	strb	r2, [r0, #20]
	mod->bank_color_r[2] = 50;
    40aa:	2432      	movs	r4, #50	; 0x32
    40ac:	7344      	strb	r4, [r0, #13]
	mod->bank_color_g[2] = 200;
    40ae:	7443      	strb	r3, [r0, #17]
	mod->bank_color_b[2] = 50;
    40b0:	7544      	strb	r4, [r0, #21]
	mod->bank_color_r[3] = 100;
    40b2:	7381      	strb	r1, [r0, #14]
	mod->bank_color_g[3] = 0;
    40b4:	7482      	strb	r2, [r0, #18]
	mod->bank_color_b[3] = 200;
    40b6:	7583      	strb	r3, [r0, #22]
	grid_sys_bank_select(&grid_sys_state, 255);
    40b8:	21ff      	movs	r1, #255	; 0xff
    40ba:	4805      	ldr	r0, [pc, #20]	; (40d0 <grid_sys_init+0x3c>)
    40bc:	4b05      	ldr	r3, [pc, #20]	; (40d4 <grid_sys_init+0x40>)
    40be:	4798      	blx	r3
	grid_port_init_all();
    40c0:	4b05      	ldr	r3, [pc, #20]	; (40d8 <grid_sys_init+0x44>)
    40c2:	4798      	blx	r3
	grid_sys_uart_init();
    40c4:	4b05      	ldr	r3, [pc, #20]	; (40dc <grid_sys_init+0x48>)
    40c6:	4798      	blx	r3
	grid_sys_dma_rx_init();
    40c8:	4b05      	ldr	r3, [pc, #20]	; (40e0 <grid_sys_init+0x4c>)
    40ca:	4798      	blx	r3
    40cc:	bd10      	pop	{r4, pc}
    40ce:	bf00      	nop
    40d0:	20003280 	.word	0x20003280
    40d4:	00003f39 	.word	0x00003f39
    40d8:	00001821 	.word	0x00001821
    40dc:	00003af5 	.word	0x00003af5
    40e0:	00003cad 	.word	0x00003cad

000040e4 <grid_msg_checksum_calculate>:
}

uint8_t grid_msg_checksum_calculate(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    40e4:	2903      	cmp	r1, #3
    40e6:	d009      	beq.n	40fc <grid_msg_checksum_calculate+0x18>
    40e8:	1e43      	subs	r3, r0, #1
    40ea:	3904      	subs	r1, #4
    40ec:	4401      	add	r1, r0
    40ee:	2000      	movs	r0, #0
		checksum ^= str[i];
    40f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    40f4:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    40f6:	428b      	cmp	r3, r1
    40f8:	d1fa      	bne.n	40f0 <grid_msg_checksum_calculate+0xc>
    40fa:	4770      	bx	lr
	uint8_t checksum = 0;
    40fc:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    40fe:	4770      	bx	lr

00004100 <grid_msg_checksum_read>:

uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    4100:	b500      	push	{lr}
    4102:	b083      	sub	sp, #12
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    4104:	1ecb      	subs	r3, r1, #3
    4106:	f10d 0207 	add.w	r2, sp, #7
    410a:	2102      	movs	r1, #2
    410c:	4418      	add	r0, r3
    410e:	4b03      	ldr	r3, [pc, #12]	; (411c <grid_msg_checksum_read+0x1c>)
    4110:	4798      	blx	r3
}
    4112:	b2c0      	uxtb	r0, r0
    4114:	b003      	add	sp, #12
    4116:	f85d fb04 	ldr.w	pc, [sp], #4
    411a:	bf00      	nop
    411c:	00003dd1 	.word	0x00003dd1

00004120 <grid_msg_checksum_write>:

void grid_msg_checksum_write(uint8_t* message, uint32_t length, uint8_t checksum){
    4120:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    4122:	1ecb      	subs	r3, r1, #3
    4124:	2102      	movs	r1, #2
    4126:	4418      	add	r0, r3
    4128:	4b01      	ldr	r3, [pc, #4]	; (4130 <grid_msg_checksum_write+0x10>)
    412a:	4798      	blx	r3
    412c:	bd08      	pop	{r3, pc}
    412e:	bf00      	nop
    4130:	00003e11 	.word	0x00003e11

00004134 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    4134:	b500      	push	{lr}
    4136:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    4138:	aa02      	add	r2, sp, #8
    413a:	2300      	movs	r3, #0
    413c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    4140:	2102      	movs	r1, #2
    4142:	3004      	adds	r0, #4
    4144:	4b02      	ldr	r3, [pc, #8]	; (4150 <grid_msg_get_id+0x1c>)
    4146:	4798      	blx	r3
	
}
    4148:	b2c0      	uxtb	r0, r0
    414a:	b003      	add	sp, #12
    414c:	f85d fb04 	ldr.w	pc, [sp], #4
    4150:	00003dd1 	.word	0x00003dd1

00004154 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    4154:	b500      	push	{lr}
    4156:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    4158:	aa02      	add	r2, sp, #8
    415a:	2300      	movs	r3, #0
    415c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    4160:	2102      	movs	r1, #2
    4162:	3006      	adds	r0, #6
    4164:	4b02      	ldr	r3, [pc, #8]	; (4170 <grid_msg_get_dx+0x1c>)
    4166:	4798      	blx	r3
	
}
    4168:	b2c0      	uxtb	r0, r0
    416a:	b003      	add	sp, #12
    416c:	f85d fb04 	ldr.w	pc, [sp], #4
    4170:	00003dd1 	.word	0x00003dd1

00004174 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    4174:	b500      	push	{lr}
    4176:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    4178:	aa02      	add	r2, sp, #8
    417a:	2300      	movs	r3, #0
    417c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    4180:	2102      	movs	r1, #2
    4182:	3008      	adds	r0, #8
    4184:	4b02      	ldr	r3, [pc, #8]	; (4190 <grid_msg_get_dy+0x1c>)
    4186:	4798      	blx	r3

}
    4188:	b2c0      	uxtb	r0, r0
    418a:	b003      	add	sp, #12
    418c:	f85d fb04 	ldr.w	pc, [sp], #4
    4190:	00003dd1 	.word	0x00003dd1

00004194 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    4194:	b500      	push	{lr}
    4196:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    4198:	aa02      	add	r2, sp, #8
    419a:	2300      	movs	r3, #0
    419c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    41a0:	2102      	movs	r1, #2
    41a2:	300a      	adds	r0, #10
    41a4:	4b02      	ldr	r3, [pc, #8]	; (41b0 <grid_msg_get_age+0x1c>)
    41a6:	4798      	blx	r3
	
}
    41a8:	b2c0      	uxtb	r0, r0
    41aa:	b003      	add	sp, #12
    41ac:	f85d fb04 	ldr.w	pc, [sp], #4
    41b0:	00003dd1 	.word	0x00003dd1

000041b4 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    41b4:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    41b6:	460a      	mov	r2, r1
    41b8:	2102      	movs	r1, #2
    41ba:	3004      	adds	r0, #4
    41bc:	4b01      	ldr	r3, [pc, #4]	; (41c4 <grid_msg_set_id+0x10>)
    41be:	4798      	blx	r3
    41c0:	bd08      	pop	{r3, pc}
    41c2:	bf00      	nop
    41c4:	00003e11 	.word	0x00003e11

000041c8 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    41c8:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    41ca:	460a      	mov	r2, r1
    41cc:	2102      	movs	r1, #2
    41ce:	3006      	adds	r0, #6
    41d0:	4b01      	ldr	r3, [pc, #4]	; (41d8 <grid_msg_set_dx+0x10>)
    41d2:	4798      	blx	r3
    41d4:	bd08      	pop	{r3, pc}
    41d6:	bf00      	nop
    41d8:	00003e11 	.word	0x00003e11

000041dc <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    41dc:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    41de:	460a      	mov	r2, r1
    41e0:	2102      	movs	r1, #2
    41e2:	3008      	adds	r0, #8
    41e4:	4b01      	ldr	r3, [pc, #4]	; (41ec <grid_msg_set_dy+0x10>)
    41e6:	4798      	blx	r3
    41e8:	bd08      	pop	{r3, pc}
    41ea:	bf00      	nop
    41ec:	00003e11 	.word	0x00003e11

000041f0 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    41f0:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    41f2:	460a      	mov	r2, r1
    41f4:	2102      	movs	r1, #2
    41f6:	300a      	adds	r0, #10
    41f8:	4b01      	ldr	r3, [pc, #4]	; (4200 <grid_msg_set_age+0x10>)
    41fa:	4798      	blx	r3
    41fc:	bd08      	pop	{r3, pc}
    41fe:	bf00      	nop
    4200:	00003e11 	.word	0x00003e11

00004204 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    4204:	69c3      	ldr	r3, [r0, #28]
    4206:	4299      	cmp	r1, r3
    4208:	d00d      	beq.n	4226 <grid_msg_find_recent+0x22>
    420a:	2301      	movs	r3, #1
    420c:	f003 021f 	and.w	r2, r3, #31
    4210:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4214:	69d2      	ldr	r2, [r2, #28]
    4216:	428a      	cmp	r2, r1
    4218:	d007      	beq.n	422a <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    421a:	3301      	adds	r3, #1
    421c:	b2db      	uxtb	r3, r3
    421e:	2b20      	cmp	r3, #32
    4220:	d1f4      	bne.n	420c <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    4222:	2000      	movs	r0, #0
    4224:	4770      	bx	lr
			return 1;
    4226:	2001      	movs	r0, #1
    4228:	4770      	bx	lr
    422a:	2001      	movs	r0, #1
}
    422c:	4770      	bx	lr

0000422e <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    422e:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    4232:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    4234:	f003 031f 	and.w	r3, r3, #31
    4238:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    423c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4240:	61c1      	str	r1, [r0, #28]
    4242:	4770      	bx	lr

00004244 <grid_ui_model_init>:

	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    4244:	b510      	push	{r4, lr}
    4246:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    4248:	2307      	movs	r3, #7
    424a:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    424c:	4419      	add	r1, r3
    424e:	b2c8      	uxtb	r0, r1
    4250:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    4252:	0100      	lsls	r0, r0, #4
    4254:	4b02      	ldr	r3, [pc, #8]	; (4260 <grid_ui_model_init+0x1c>)
    4256:	4798      	blx	r3
    4258:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    425a:	3070      	adds	r0, #112	; 0x70
    425c:	60a0      	str	r0, [r4, #8]
		
}
    425e:	bd10      	pop	{r4, pc}
    4260:	0000c8b1 	.word	0x0000c8b1

00004264 <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    4264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4268:	4605      	mov	r5, r0
    426a:	4698      	mov	r8, r3
    426c:	9808      	ldr	r0, [sp, #32]
    426e:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    4270:	010c      	lsls	r4, r1, #4
    4272:	686b      	ldr	r3, [r5, #4]
    4274:	2100      	movs	r1, #0
    4276:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    4278:	686b      	ldr	r3, [r5, #4]
    427a:	4423      	add	r3, r4
    427c:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    427e:	686b      	ldr	r3, [r5, #4]
    4280:	4423      	add	r3, r4
    4282:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    4284:	686b      	ldr	r3, [r5, #4]
    4286:	4423      	add	r3, r4
    4288:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    428c:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    428e:	686b      	ldr	r3, [r5, #4]
    4290:	eb03 0904 	add.w	r9, r3, r4
    4294:	4f1b      	ldr	r7, [pc, #108]	; (4304 <grid_report_init+0xa0>)
    4296:	47b8      	blx	r7
    4298:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    429c:	686b      	ldr	r3, [r5, #4]
    429e:	eb03 0904 	add.w	r9, r3, r4
    42a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    42a4:	47b8      	blx	r7
    42a6:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    42aa:	686a      	ldr	r2, [r5, #4]
    42ac:	4422      	add	r2, r4
    42ae:	6853      	ldr	r3, [r2, #4]
    42b0:	b30b      	cbz	r3, 42f6 <grid_report_init+0x92>
    42b2:	68d3      	ldr	r3, [r2, #12]
    42b4:	b313      	cbz	r3, 42fc <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    42b6:	7893      	ldrb	r3, [r2, #2]
    42b8:	b15b      	cbz	r3, 42d2 <grid_report_init+0x6e>
    42ba:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    42bc:	f818 1003 	ldrb.w	r1, [r8, r3]
    42c0:	6852      	ldr	r2, [r2, #4]
    42c2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    42c4:	3301      	adds	r3, #1
    42c6:	b2db      	uxtb	r3, r3
    42c8:	686a      	ldr	r2, [r5, #4]
    42ca:	4422      	add	r2, r4
    42cc:	7891      	ldrb	r1, [r2, #2]
    42ce:	4299      	cmp	r1, r3
    42d0:	d8f4      	bhi.n	42bc <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    42d2:	686a      	ldr	r2, [r5, #4]
    42d4:	4422      	add	r2, r4
    42d6:	7a10      	ldrb	r0, [r2, #8]
    42d8:	b188      	cbz	r0, 42fe <grid_report_init+0x9a>
    42da:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    42dc:	5cf1      	ldrb	r1, [r6, r3]
    42de:	68d2      	ldr	r2, [r2, #12]
    42e0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    42e2:	3301      	adds	r3, #1
    42e4:	b2db      	uxtb	r3, r3
    42e6:	686a      	ldr	r2, [r5, #4]
    42e8:	4422      	add	r2, r4
    42ea:	7a11      	ldrb	r1, [r2, #8]
    42ec:	4299      	cmp	r1, r3
    42ee:	d8f5      	bhi.n	42dc <grid_report_init+0x78>
	}
	
	return 0;
    42f0:	2000      	movs	r0, #0
    42f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    42f6:	20ff      	movs	r0, #255	; 0xff
    42f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    42fc:	20ff      	movs	r0, #255	; 0xff
	
}
    42fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4302:	bf00      	nop
    4304:	0000c8b1 	.word	0x0000c8b1

00004308 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    4308:	b510      	push	{r4, lr}
    430a:	b084      	sub	sp, #16
	
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
    430c:	7844      	ldrb	r4, [r0, #1]
    430e:	4421      	add	r1, r4
    4310:	9c08      	ldr	r4, [sp, #32]
    4312:	9402      	str	r4, [sp, #8]
    4314:	9c07      	ldr	r4, [sp, #28]
    4316:	9401      	str	r4, [sp, #4]
    4318:	9c06      	ldr	r4, [sp, #24]
    431a:	9400      	str	r4, [sp, #0]
    431c:	b2c9      	uxtb	r1, r1
    431e:	4c02      	ldr	r4, [pc, #8]	; (4328 <grid_report_ui_init+0x20>)
    4320:	47a0      	blx	r4
}
    4322:	b004      	add	sp, #16
    4324:	bd10      	pop	{r4, pc}
    4326:	bf00      	nop
    4328:	00004265 	.word	0x00004265

0000432c <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    432c:	7843      	ldrb	r3, [r0, #1]
    432e:	2b00      	cmp	r3, #0
    4330:	f000 80e9 	beq.w	4506 <grid_report_sys_init+0x1da>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    4334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4338:	b091      	sub	sp, #68	; 0x44
    433a:	4607      	mov	r7, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    433c:	2400      	movs	r4, #0
			
		uint8_t payload_template[30] = {0};
    433e:	4625      	mov	r5, r4
			
			type = GRID_REPORT_TYPE_DIRECT_WEST;
			
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
			
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4340:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 452c <grid_report_sys_init+0x200>
    4344:	e047      	b.n	43d6 <grid_report_sys_init+0xaa>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_BANK,	GRID_MSG_COMMAND_SYS_BANK_SELECT, 0, GRID_MSG_END_OF_TEXT);
    4346:	2303      	movs	r3, #3
    4348:	9303      	str	r3, [sp, #12]
    434a:	9502      	str	r5, [sp, #8]
    434c:	2365      	movs	r3, #101	; 0x65
    434e:	9301      	str	r3, [sp, #4]
    4350:	2364      	movs	r3, #100	; 0x64
    4352:	9300      	str	r3, [sp, #0]
    4354:	2304      	movs	r3, #4
    4356:	2202      	movs	r2, #2
    4358:	496b      	ldr	r1, [pc, #428]	; (4508 <grid_report_sys_init+0x1dc>)
    435a:	a808      	add	r0, sp, #32
    435c:	4e6b      	ldr	r6, [pc, #428]	; (450c <grid_report_sys_init+0x1e0>)
    435e:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    4360:	2602      	movs	r6, #2
    4362:	e01d      	b.n	43a0 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_CFG, GRID_MSG_COMMAND_SYS_CFG_REQUEST, GRID_MSG_END_OF_TEXT);
    4364:	2603      	movs	r6, #3
    4366:	9602      	str	r6, [sp, #8]
    4368:	2369      	movs	r3, #105	; 0x69
    436a:	9301      	str	r3, [sp, #4]
    436c:	2368      	movs	r3, #104	; 0x68
    436e:	9300      	str	r3, [sp, #0]
    4370:	2304      	movs	r3, #4
    4372:	2202      	movs	r2, #2
    4374:	4966      	ldr	r1, [pc, #408]	; (4510 <grid_report_sys_init+0x1e4>)
    4376:	a808      	add	r0, sp, #32
    4378:	f8df 9190 	ldr.w	r9, [pc, #400]	; 450c <grid_report_sys_init+0x1e0>
    437c:	47c8      	blx	r9
    437e:	e00f      	b.n	43a0 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_HEARTBEAT, GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE, grid_sys_get_hwcfg(), GRID_MSG_END_OF_TEXT);
    4380:	4b64      	ldr	r3, [pc, #400]	; (4514 <grid_report_sys_init+0x1e8>)
    4382:	4798      	blx	r3
    4384:	2303      	movs	r3, #3
    4386:	9303      	str	r3, [sp, #12]
    4388:	9002      	str	r0, [sp, #8]
    438a:	2367      	movs	r3, #103	; 0x67
    438c:	9301      	str	r3, [sp, #4]
    438e:	2366      	movs	r3, #102	; 0x66
    4390:	9300      	str	r3, [sp, #0]
    4392:	2304      	movs	r3, #4
    4394:	2202      	movs	r2, #2
    4396:	495c      	ldr	r1, [pc, #368]	; (4508 <grid_report_sys_init+0x1dc>)
    4398:	a808      	add	r0, sp, #32
    439a:	4e5c      	ldr	r6, [pc, #368]	; (450c <grid_report_sys_init+0x1e0>)
    439c:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    439e:	2602      	movs	r6, #2
		}
		
		
		
				
		uint8_t payload_length = strlen(payload_template);
    43a0:	a808      	add	r0, sp, #32
    43a2:	47c0      	blx	r8

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    43a4:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    43a8:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    43ac:	2302      	movs	r3, #2
    43ae:	9302      	str	r3, [sp, #8]
    43b0:	ab07      	add	r3, sp, #28
    43b2:	9301      	str	r3, [sp, #4]
    43b4:	b2c0      	uxtb	r0, r0
    43b6:	9000      	str	r0, [sp, #0]
    43b8:	ab08      	add	r3, sp, #32
    43ba:	4632      	mov	r2, r6
    43bc:	4621      	mov	r1, r4
    43be:	4638      	mov	r0, r7
    43c0:	4e55      	ldr	r6, [pc, #340]	; (4518 <grid_report_sys_init+0x1ec>)
    43c2:	47b0      	blx	r6
		
		if (error != 0){
    43c4:	2800      	cmp	r0, #0
    43c6:	f040 809b 	bne.w	4500 <grid_report_sys_init+0x1d4>
	for(uint8_t i=0; i<mod->report_offset; i++){
    43ca:	3401      	adds	r4, #1
    43cc:	b2e4      	uxtb	r4, r4
    43ce:	787b      	ldrb	r3, [r7, #1]
    43d0:	42a3      	cmp	r3, r4
    43d2:	f240 8095 	bls.w	4500 <grid_report_sys_init+0x1d4>
		uint8_t payload_template[30] = {0};
    43d6:	221e      	movs	r2, #30
    43d8:	4629      	mov	r1, r5
    43da:	a808      	add	r0, sp, #32
    43dc:	4b4f      	ldr	r3, [pc, #316]	; (451c <grid_report_sys_init+0x1f0>)
    43de:	4798      	blx	r3
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE
    43e0:	2c05      	cmp	r4, #5
    43e2:	d0b0      	beq.n	4346 <grid_report_sys_init+0x1a>
		else if (i == GRID_REPORT_INDEX_CFG_REQUEST){ // CONFIGURATION REQUEST
    43e4:	2c06      	cmp	r4, #6
    43e6:	d0bd      	beq.n	4364 <grid_report_sys_init+0x38>
		else if (i == GRID_REPORT_INDEX_HEARTBEAT){ // HEARTBEAT
    43e8:	2c00      	cmp	r4, #0
    43ea:	d0c9      	beq.n	4380 <grid_report_sys_init+0x54>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    43ec:	2c01      	cmp	r4, #1
    43ee:	d007      	beq.n	4400 <grid_report_sys_init+0xd4>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    43f0:	2c02      	cmp	r4, #2
    43f2:	d025      	beq.n	4440 <grid_report_sys_init+0x114>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    43f4:	2c03      	cmp	r4, #3
    43f6:	d043      	beq.n	4480 <grid_report_sys_init+0x154>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    43f8:	2c04      	cmp	r4, #4
    43fa:	d061      	beq.n	44c0 <grid_report_sys_init+0x194>
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    43fc:	462e      	mov	r6, r5
    43fe:	e7cf      	b.n	43a0 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    4400:	4b44      	ldr	r3, [pc, #272]	; (4514 <grid_report_sys_init+0x1e8>)
    4402:	4798      	blx	r3
    4404:	2604      	movs	r6, #4
    4406:	9605      	str	r6, [sp, #20]
    4408:	23ff      	movs	r3, #255	; 0xff
    440a:	9304      	str	r3, [sp, #16]
    440c:	9303      	str	r3, [sp, #12]
    440e:	9002      	str	r0, [sp, #8]
    4410:	2311      	movs	r3, #17
    4412:	9301      	str	r3, [sp, #4]
    4414:	2307      	movs	r3, #7
    4416:	9300      	str	r3, [sp, #0]
    4418:	230e      	movs	r3, #14
    441a:	2201      	movs	r2, #1
    441c:	4940      	ldr	r1, [pc, #256]	; (4520 <grid_report_sys_init+0x1f4>)
    441e:	a808      	add	r0, sp, #32
    4420:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 450c <grid_report_sys_init+0x1e0>
    4424:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4426:	a808      	add	r0, sp, #32
    4428:	47c0      	blx	r8
    442a:	4681      	mov	r9, r0
    442c:	4601      	mov	r1, r0
    442e:	a808      	add	r0, sp, #32
    4430:	4b3c      	ldr	r3, [pc, #240]	; (4524 <grid_report_sys_init+0x1f8>)
    4432:	4798      	blx	r3
    4434:	4602      	mov	r2, r0
    4436:	4649      	mov	r1, r9
    4438:	a808      	add	r0, sp, #32
    443a:	4b3b      	ldr	r3, [pc, #236]	; (4528 <grid_report_sys_init+0x1fc>)
    443c:	4798      	blx	r3
    443e:	e7af      	b.n	43a0 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    4440:	4b34      	ldr	r3, [pc, #208]	; (4514 <grid_report_sys_init+0x1e8>)
    4442:	4798      	blx	r3
    4444:	2304      	movs	r3, #4
    4446:	9305      	str	r3, [sp, #20]
    4448:	23ff      	movs	r3, #255	; 0xff
    444a:	9304      	str	r3, [sp, #16]
    444c:	9303      	str	r3, [sp, #12]
    444e:	9002      	str	r0, [sp, #8]
    4450:	2312      	movs	r3, #18
    4452:	9301      	str	r3, [sp, #4]
    4454:	2307      	movs	r3, #7
    4456:	9300      	str	r3, [sp, #0]
    4458:	230e      	movs	r3, #14
    445a:	2201      	movs	r2, #1
    445c:	4930      	ldr	r1, [pc, #192]	; (4520 <grid_report_sys_init+0x1f4>)
    445e:	a808      	add	r0, sp, #32
    4460:	4e2a      	ldr	r6, [pc, #168]	; (450c <grid_report_sys_init+0x1e0>)
    4462:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4464:	a808      	add	r0, sp, #32
    4466:	47c0      	blx	r8
    4468:	4606      	mov	r6, r0
    446a:	4601      	mov	r1, r0
    446c:	a808      	add	r0, sp, #32
    446e:	4b2d      	ldr	r3, [pc, #180]	; (4524 <grid_report_sys_init+0x1f8>)
    4470:	4798      	blx	r3
    4472:	4602      	mov	r2, r0
    4474:	4631      	mov	r1, r6
    4476:	a808      	add	r0, sp, #32
    4478:	4b2b      	ldr	r3, [pc, #172]	; (4528 <grid_report_sys_init+0x1fc>)
    447a:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    447c:	2605      	movs	r6, #5
    447e:	e78f      	b.n	43a0 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    4480:	4b24      	ldr	r3, [pc, #144]	; (4514 <grid_report_sys_init+0x1e8>)
    4482:	4798      	blx	r3
    4484:	2304      	movs	r3, #4
    4486:	9305      	str	r3, [sp, #20]
    4488:	23ff      	movs	r3, #255	; 0xff
    448a:	9304      	str	r3, [sp, #16]
    448c:	9303      	str	r3, [sp, #12]
    448e:	9002      	str	r0, [sp, #8]
    4490:	2313      	movs	r3, #19
    4492:	9301      	str	r3, [sp, #4]
    4494:	2307      	movs	r3, #7
    4496:	9300      	str	r3, [sp, #0]
    4498:	230e      	movs	r3, #14
    449a:	2201      	movs	r2, #1
    449c:	4920      	ldr	r1, [pc, #128]	; (4520 <grid_report_sys_init+0x1f4>)
    449e:	a808      	add	r0, sp, #32
    44a0:	4e1a      	ldr	r6, [pc, #104]	; (450c <grid_report_sys_init+0x1e0>)
    44a2:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    44a4:	a808      	add	r0, sp, #32
    44a6:	47c0      	blx	r8
    44a8:	4606      	mov	r6, r0
    44aa:	4601      	mov	r1, r0
    44ac:	a808      	add	r0, sp, #32
    44ae:	4b1d      	ldr	r3, [pc, #116]	; (4524 <grid_report_sys_init+0x1f8>)
    44b0:	4798      	blx	r3
    44b2:	4602      	mov	r2, r0
    44b4:	4631      	mov	r1, r6
    44b6:	a808      	add	r0, sp, #32
    44b8:	4b1b      	ldr	r3, [pc, #108]	; (4528 <grid_report_sys_init+0x1fc>)
    44ba:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    44bc:	2606      	movs	r6, #6
    44be:	e76f      	b.n	43a0 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    44c0:	4b14      	ldr	r3, [pc, #80]	; (4514 <grid_report_sys_init+0x1e8>)
    44c2:	4798      	blx	r3
    44c4:	2304      	movs	r3, #4
    44c6:	9305      	str	r3, [sp, #20]
    44c8:	23ff      	movs	r3, #255	; 0xff
    44ca:	9304      	str	r3, [sp, #16]
    44cc:	9303      	str	r3, [sp, #12]
    44ce:	9002      	str	r0, [sp, #8]
    44d0:	2314      	movs	r3, #20
    44d2:	9301      	str	r3, [sp, #4]
    44d4:	2607      	movs	r6, #7
    44d6:	9600      	str	r6, [sp, #0]
    44d8:	230e      	movs	r3, #14
    44da:	2201      	movs	r2, #1
    44dc:	4910      	ldr	r1, [pc, #64]	; (4520 <grid_report_sys_init+0x1f4>)
    44de:	a808      	add	r0, sp, #32
    44e0:	f8df 9028 	ldr.w	r9, [pc, #40]	; 450c <grid_report_sys_init+0x1e0>
    44e4:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    44e6:	a808      	add	r0, sp, #32
    44e8:	47c0      	blx	r8
    44ea:	4681      	mov	r9, r0
    44ec:	4601      	mov	r1, r0
    44ee:	a808      	add	r0, sp, #32
    44f0:	4b0c      	ldr	r3, [pc, #48]	; (4524 <grid_report_sys_init+0x1f8>)
    44f2:	4798      	blx	r3
    44f4:	4602      	mov	r2, r0
    44f6:	4649      	mov	r1, r9
    44f8:	a808      	add	r0, sp, #32
    44fa:	4b0b      	ldr	r3, [pc, #44]	; (4528 <grid_report_sys_init+0x1fc>)
    44fc:	4798      	blx	r3
    44fe:	e74f      	b.n	43a0 <grid_report_sys_init+0x74>
			}
			
		}
	
	}
}
    4500:	b011      	add	sp, #68	; 0x44
    4502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4506:	4770      	bx	lr
    4508:	0000e050 	.word	0x0000e050
    450c:	0000ccc5 	.word	0x0000ccc5
    4510:	0000e068 	.word	0x0000e068
    4514:	00003e49 	.word	0x00003e49
    4518:	00004265 	.word	0x00004265
    451c:	0000c8d7 	.word	0x0000c8d7
    4520:	0000e07c 	.word	0x0000e07c
    4524:	000040e5 	.word	0x000040e5
    4528:	00004121 	.word	0x00004121
    452c:	0000cd0d 	.word	0x0000cd0d

00004530 <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    4530:	6843      	ldr	r3, [r0, #4]
    4532:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    4536:	7888      	ldrb	r0, [r1, #2]
    4538:	b140      	cbz	r0, 454c <grid_report_render+0x1c>
    453a:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    453c:	6848      	ldr	r0, [r1, #4]
    453e:	5cc0      	ldrb	r0, [r0, r3]
    4540:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    4542:	3301      	adds	r3, #1
    4544:	b2db      	uxtb	r3, r3
    4546:	7888      	ldrb	r0, [r1, #2]
    4548:	4298      	cmp	r0, r3
    454a:	d8f7      	bhi.n	453c <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    454c:	4770      	bx	lr

0000454e <grid_report_ui_set_changed_flag>:
	return mod->report_array[index+mod->report_offset].changed;
}

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    454e:	7843      	ldrb	r3, [r0, #1]
    4550:	4419      	add	r1, r3
    4552:	6843      	ldr	r3, [r0, #4]
    4554:	0109      	lsls	r1, r1, #4
    4556:	2201      	movs	r2, #1
    4558:	545a      	strb	r2, [r3, r1]
    455a:	4770      	bx	lr

0000455c <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    455c:	6843      	ldr	r3, [r0, #4]
    455e:	0109      	lsls	r1, r1, #4
    4560:	2201      	movs	r2, #1
    4562:	545a      	strb	r2, [r3, r1]
    4564:	4770      	bx	lr

00004566 <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    4566:	6843      	ldr	r3, [r0, #4]
    4568:	0109      	lsls	r1, r1, #4
    456a:	2200      	movs	r2, #0
    456c:	545a      	strb	r2, [r3, r1]
    456e:	4770      	bx	lr

00004570 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    4570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4574:	b0cf      	sub	sp, #316	; 0x13c
    4576:	9007      	str	r0, [sp, #28]
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4578:	4b9a      	ldr	r3, [pc, #616]	; (47e4 <grid_port_process_ui+0x274>)
    457a:	781b      	ldrb	r3, [r3, #0]
    457c:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    4580:	2b00      	cmp	r3, #0
    4582:	f000 80a7 	beq.w	46d4 <grid_port_process_ui+0x164>
	return mod->report_array[index].changed;
    4586:	4b97      	ldr	r3, [pc, #604]	; (47e4 <grid_port_process_ui+0x274>)
    4588:	6858      	ldr	r0, [r3, #4]
    458a:	2300      	movs	r3, #0
    458c:	469a      	mov	sl, r3
    458e:	4619      	mov	r1, r3
    4590:	469b      	mov	fp, r3
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4592:	4c94      	ldr	r4, [pc, #592]	; (47e4 <grid_port_process_ui+0x274>)
    4594:	e013      	b.n	45be <grid_port_process_ui+0x4e>
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    4596:	f10a 0a01 	add.w	sl, sl, #1
    459a:	fa5f fa8a 	uxtb.w	sl, sl
			(type == GRID_REPORT_TYPE_DIRECT_EAST)?message_direct_available++:1;
    459e:	2a05      	cmp	r2, #5
    45a0:	d122      	bne.n	45e8 <grid_port_process_ui+0x78>
    45a2:	3101      	adds	r1, #1
    45a4:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_LOCAL)?message_local_available++:1;
    45a6:	2a01      	cmp	r2, #1
    45a8:	bf04      	itt	eq
    45aa:	f10b 0b01 	addeq.w	fp, fp, #1
    45ae:	fa5f fb8b 	uxtbeq.w	fp, fp
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    45b2:	3301      	adds	r3, #1
    45b4:	b2db      	uxtb	r3, r3
    45b6:	7822      	ldrb	r2, [r4, #0]
    45b8:	b2d2      	uxtb	r2, r2
    45ba:	429a      	cmp	r2, r3
    45bc:	d919      	bls.n	45f2 <grid_port_process_ui+0x82>
	return mod->report_array[index].changed;
    45be:	011a      	lsls	r2, r3, #4
    45c0:	1885      	adds	r5, r0, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    45c2:	5c82      	ldrb	r2, [r0, r2]
    45c4:	2a00      	cmp	r2, #0
    45c6:	d0f4      	beq.n	45b2 <grid_port_process_ui+0x42>
	return mod->report_array[index].type;
    45c8:	786a      	ldrb	r2, [r5, #1]
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    45ca:	2a02      	cmp	r2, #2
    45cc:	d0e3      	beq.n	4596 <grid_port_process_ui+0x26>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    45ce:	2a03      	cmp	r2, #3
    45d0:	d008      	beq.n	45e4 <grid_port_process_ui+0x74>
			(type == GRID_REPORT_TYPE_DIRECT_NORTH)?message_direct_available++:1;
    45d2:	2a04      	cmp	r2, #4
    45d4:	d1e3      	bne.n	459e <grid_port_process_ui+0x2e>
    45d6:	3101      	adds	r1, #1
    45d8:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_DIRECT_WEST)?message_direct_available++:1;
    45da:	2a07      	cmp	r2, #7
    45dc:	d1e3      	bne.n	45a6 <grid_port_process_ui+0x36>
    45de:	3101      	adds	r1, #1
    45e0:	b2c9      	uxtb	r1, r1
    45e2:	e7e6      	b.n	45b2 <grid_port_process_ui+0x42>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    45e4:	3101      	adds	r1, #1
    45e6:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_DIRECT_SOUTH)?message_direct_available++:1;
    45e8:	2a06      	cmp	r2, #6
    45ea:	d1f6      	bne.n	45da <grid_port_process_ui+0x6a>
    45ec:	3101      	adds	r1, #1
    45ee:	b2c9      	uxtb	r1, r1
    45f0:	e7df      	b.n	45b2 <grid_port_process_ui+0x42>
	if (message_direct_available){
    45f2:	2900      	cmp	r1, #0
    45f4:	d067      	beq.n	46c6 <grid_port_process_ui+0x156>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    45f6:	4b7b      	ldr	r3, [pc, #492]	; (47e4 <grid_port_process_ui+0x274>)
    45f8:	781b      	ldrb	r3, [r3, #0]
    45fa:	2b00      	cmp	r3, #0
    45fc:	d063      	beq.n	46c6 <grid_port_process_ui+0x156>
    45fe:	2500      	movs	r5, #0
	return mod->report_array[index].changed;
    4600:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 47e4 <grid_port_process_ui+0x274>
    4604:	e00e      	b.n	4624 <grid_port_process_ui+0xb4>
					target_buffer = &GRID_PORT_U.rx_buffer;
    4606:	f8df 8214 	ldr.w	r8, [pc, #532]	; 481c <grid_port_process_ui+0x2ac>
				if (grid_buffer_write_init(target_buffer, length)){
    460a:	b2b1      	uxth	r1, r6
    460c:	4640      	mov	r0, r8
    460e:	4b76      	ldr	r3, [pc, #472]	; (47e8 <grid_port_process_ui+0x278>)
    4610:	4798      	blx	r3
    4612:	2800      	cmp	r0, #0
    4614:	d141      	bne.n	469a <grid_port_process_ui+0x12a>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4616:	3501      	adds	r5, #1
    4618:	b2ed      	uxtb	r5, r5
    461a:	f899 3000 	ldrb.w	r3, [r9]
    461e:	b2db      	uxtb	r3, r3
    4620:	42ab      	cmp	r3, r5
    4622:	d950      	bls.n	46c6 <grid_port_process_ui+0x156>
	return mod->report_array[index].changed;
    4624:	012c      	lsls	r4, r5, #4
    4626:	f8d9 3004 	ldr.w	r3, [r9, #4]
    462a:	191a      	adds	r2, r3, r4
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_ALL || type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    462c:	5d1b      	ldrb	r3, [r3, r4]
    462e:	2b00      	cmp	r3, #0
    4630:	d0f1      	beq.n	4616 <grid_port_process_ui+0xa6>
    4632:	7853      	ldrb	r3, [r2, #1]
    4634:	3b03      	subs	r3, #3
    4636:	b2db      	uxtb	r3, r3
    4638:	2b04      	cmp	r3, #4
    463a:	d8ec      	bhi.n	4616 <grid_port_process_ui+0xa6>
				uint8_t message[256] = {0};
    463c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4640:	2100      	movs	r1, #0
    4642:	a80e      	add	r0, sp, #56	; 0x38
    4644:	4b69      	ldr	r3, [pc, #420]	; (47ec <grid_port_process_ui+0x27c>)
    4646:	4798      	blx	r3
				CRITICAL_SECTION_ENTER()			
    4648:	a809      	add	r0, sp, #36	; 0x24
    464a:	4b69      	ldr	r3, [pc, #420]	; (47f0 <grid_port_process_ui+0x280>)
    464c:	4798      	blx	r3
				grid_report_render(mod, i, &message[length]);
    464e:	aa0e      	add	r2, sp, #56	; 0x38
    4650:	4629      	mov	r1, r5
    4652:	4648      	mov	r0, r9
    4654:	4b67      	ldr	r3, [pc, #412]	; (47f4 <grid_port_process_ui+0x284>)
    4656:	4798      	blx	r3
				length += strlen(&message[length]);
    4658:	a80e      	add	r0, sp, #56	; 0x38
    465a:	4b67      	ldr	r3, [pc, #412]	; (47f8 <grid_port_process_ui+0x288>)
    465c:	4798      	blx	r3
    465e:	4606      	mov	r6, r0
				CRITICAL_SECTION_LEAVE()			
    4660:	a809      	add	r0, sp, #36	; 0x24
    4662:	4b66      	ldr	r3, [pc, #408]	; (47fc <grid_port_process_ui+0x28c>)
    4664:	4798      	blx	r3
	return mod->report_array[index].type;
    4666:	f8d9 3004 	ldr.w	r3, [r9, #4]
    466a:	441c      	add	r4, r3
    466c:	7863      	ldrb	r3, [r4, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_ALL){
    466e:	2b03      	cmp	r3, #3
    4670:	d0c9      	beq.n	4606 <grid_port_process_ui+0x96>
				else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    4672:	2b04      	cmp	r3, #4
    4674:	d008      	beq.n	4688 <grid_port_process_ui+0x118>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    4676:	2b05      	cmp	r3, #5
    4678:	d009      	beq.n	468e <grid_port_process_ui+0x11e>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    467a:	2b06      	cmp	r3, #6
    467c:	d00a      	beq.n	4694 <grid_port_process_ui+0x124>
					target_buffer = &GRID_PORT_W.tx_buffer;
    467e:	4a60      	ldr	r2, [pc, #384]	; (4800 <grid_port_process_ui+0x290>)
    4680:	2b07      	cmp	r3, #7
    4682:	bf08      	it	eq
    4684:	4690      	moveq	r8, r2
    4686:	e7c0      	b.n	460a <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_N.tx_buffer;
    4688:	f8df 8194 	ldr.w	r8, [pc, #404]	; 4820 <grid_port_process_ui+0x2b0>
    468c:	e7bd      	b.n	460a <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_E.tx_buffer;
    468e:	f8df 8194 	ldr.w	r8, [pc, #404]	; 4824 <grid_port_process_ui+0x2b4>
    4692:	e7ba      	b.n	460a <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_S.tx_buffer;
    4694:	f8df 8190 	ldr.w	r8, [pc, #400]	; 4828 <grid_port_process_ui+0x2b8>
    4698:	e7b7      	b.n	460a <grid_port_process_ui+0x9a>
					grid_report_sys_clear_changed_flag(mod, i);
    469a:	4629      	mov	r1, r5
    469c:	4648      	mov	r0, r9
    469e:	4b59      	ldr	r3, [pc, #356]	; (4804 <grid_port_process_ui+0x294>)
    46a0:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    46a2:	b166      	cbz	r6, 46be <grid_port_process_ui+0x14e>
    46a4:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    46a8:	ab4e      	add	r3, sp, #312	; 0x138
    46aa:	441e      	add	r6, r3
    46ac:	f2a6 1601 	subw	r6, r6, #257	; 0x101
						grid_buffer_write_character(target_buffer, message[i]);
    46b0:	4f55      	ldr	r7, [pc, #340]	; (4808 <grid_port_process_ui+0x298>)
    46b2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    46b6:	4640      	mov	r0, r8
    46b8:	47b8      	blx	r7
					for(uint32_t i = 0; i<length; i++){
    46ba:	42b4      	cmp	r4, r6
    46bc:	d1f9      	bne.n	46b2 <grid_port_process_ui+0x142>
					grid_buffer_write_acknowledge(target_buffer);
    46be:	4640      	mov	r0, r8
    46c0:	4b52      	ldr	r3, [pc, #328]	; (480c <grid_port_process_ui+0x29c>)
    46c2:	4798      	blx	r3
    46c4:	e7a7      	b.n	4616 <grid_port_process_ui+0xa6>
	if (message_local_available && por->cooldown<20){
    46c6:	f1bb 0f00 	cmp.w	fp, #0
    46ca:	d003      	beq.n	46d4 <grid_port_process_ui+0x164>
    46cc:	9b07      	ldr	r3, [sp, #28]
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	2b13      	cmp	r3, #19
    46d2:	d935      	bls.n	4740 <grid_port_process_ui+0x1d0>
	if (por->cooldown > 15){
    46d4:	9b07      	ldr	r3, [sp, #28]
    46d6:	681b      	ldr	r3, [r3, #0]
    46d8:	2b0f      	cmp	r3, #15
    46da:	f200 80f0 	bhi.w	48be <grid_port_process_ui+0x34e>
	else if (por->cooldown>0){
    46de:	b113      	cbz	r3, 46e6 <grid_port_process_ui+0x176>
		por->cooldown--;
    46e0:	3b01      	subs	r3, #1
    46e2:	9a07      	ldr	r2, [sp, #28]
    46e4:	6013      	str	r3, [r2, #0]
	if (message_broadcast_available){
    46e6:	f1ba 0f00 	cmp.w	sl, #0
    46ea:	f000 80eb 	beq.w	48c4 <grid_port_process_ui+0x354>
		uint8_t message[256] = {0};
    46ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    46f2:	2100      	movs	r1, #0
    46f4:	a80e      	add	r0, sp, #56	; 0x38
    46f6:	4b3d      	ldr	r3, [pc, #244]	; (47ec <grid_port_process_ui+0x27c>)
    46f8:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    46fa:	4b45      	ldr	r3, [pc, #276]	; (4810 <grid_port_process_ui+0x2a0>)
    46fc:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    4700:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    4702:	2117      	movs	r1, #23
    4704:	9105      	str	r1, [sp, #20]
    4706:	9304      	str	r3, [sp, #16]
    4708:	237f      	movs	r3, #127	; 0x7f
    470a:	9303      	str	r3, [sp, #12]
    470c:	9302      	str	r3, [sp, #8]
    470e:	9201      	str	r2, [sp, #4]
    4710:	2300      	movs	r3, #0
    4712:	9300      	str	r3, [sp, #0]
    4714:	230f      	movs	r3, #15
    4716:	2201      	movs	r2, #1
    4718:	493e      	ldr	r1, [pc, #248]	; (4814 <grid_port_process_ui+0x2a4>)
    471a:	a80e      	add	r0, sp, #56	; 0x38
    471c:	4c3e      	ldr	r4, [pc, #248]	; (4818 <grid_port_process_ui+0x2a8>)
    471e:	47a0      	blx	r4
		length += strlen(&message[length]);
    4720:	a80e      	add	r0, sp, #56	; 0x38
    4722:	4b35      	ldr	r3, [pc, #212]	; (47f8 <grid_port_process_ui+0x288>)
    4724:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4726:	4b2f      	ldr	r3, [pc, #188]	; (47e4 <grid_port_process_ui+0x274>)
    4728:	781b      	ldrb	r3, [r3, #0]
    472a:	2b00      	cmp	r3, #0
    472c:	f000 80ca 	beq.w	48c4 <grid_port_process_ui+0x354>
    4730:	4605      	mov	r5, r0
    4732:	2400      	movs	r4, #0
    4734:	46a1      	mov	r9, r4
			CRITICAL_SECTION_ENTER()
    4736:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 47f0 <grid_port_process_ui+0x280>
	return mod->report_array[index].changed;
    473a:	4e2a      	ldr	r6, [pc, #168]	; (47e4 <grid_port_process_ui+0x274>)
			CRITICAL_SECTION_LEAVE()
    473c:	4f2f      	ldr	r7, [pc, #188]	; (47fc <grid_port_process_ui+0x28c>)
    473e:	e0cc      	b.n	48da <grid_port_process_ui+0x36a>
		uint8_t message[256] = {0};
    4740:	f44f 7280 	mov.w	r2, #256	; 0x100
    4744:	2100      	movs	r1, #0
    4746:	a80e      	add	r0, sp, #56	; 0x38
    4748:	4b28      	ldr	r3, [pc, #160]	; (47ec <grid_port_process_ui+0x27c>)
    474a:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    474c:	4b30      	ldr	r3, [pc, #192]	; (4810 <grid_port_process_ui+0x2a0>)
    474e:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    4752:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    4754:	2117      	movs	r1, #23
    4756:	9105      	str	r1, [sp, #20]
    4758:	9304      	str	r3, [sp, #16]
    475a:	237f      	movs	r3, #127	; 0x7f
    475c:	9303      	str	r3, [sp, #12]
    475e:	9302      	str	r3, [sp, #8]
    4760:	9201      	str	r2, [sp, #4]
    4762:	2300      	movs	r3, #0
    4764:	9300      	str	r3, [sp, #0]
    4766:	230f      	movs	r3, #15
    4768:	2201      	movs	r2, #1
    476a:	492a      	ldr	r1, [pc, #168]	; (4814 <grid_port_process_ui+0x2a4>)
    476c:	a80e      	add	r0, sp, #56	; 0x38
    476e:	4c2a      	ldr	r4, [pc, #168]	; (4818 <grid_port_process_ui+0x2a8>)
    4770:	47a0      	blx	r4
		length += strlen(&message[length]);
    4772:	a80e      	add	r0, sp, #56	; 0x38
    4774:	4b20      	ldr	r3, [pc, #128]	; (47f8 <grid_port_process_ui+0x288>)
    4776:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4778:	4b1a      	ldr	r3, [pc, #104]	; (47e4 <grid_port_process_ui+0x274>)
    477a:	781b      	ldrb	r3, [r3, #0]
    477c:	2b00      	cmp	r3, #0
    477e:	d0a9      	beq.n	46d4 <grid_port_process_ui+0x164>
    4780:	4605      	mov	r5, r0
    4782:	2400      	movs	r4, #0
    4784:	46a1      	mov	r9, r4
			CRITICAL_SECTION_ENTER()
    4786:	f8df 8068 	ldr.w	r8, [pc, #104]	; 47f0 <grid_port_process_ui+0x280>
	return mod->report_array[index].changed;
    478a:	4e16      	ldr	r6, [pc, #88]	; (47e4 <grid_port_process_ui+0x274>)
			CRITICAL_SECTION_LEAVE()
    478c:	4f1b      	ldr	r7, [pc, #108]	; (47fc <grid_port_process_ui+0x28c>)
    478e:	e007      	b.n	47a0 <grid_port_process_ui+0x230>
    4790:	a80a      	add	r0, sp, #40	; 0x28
    4792:	47b8      	blx	r7
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4794:	3401      	adds	r4, #1
    4796:	b2e4      	uxtb	r4, r4
    4798:	7833      	ldrb	r3, [r6, #0]
    479a:	b2db      	uxtb	r3, r3
    479c:	42a3      	cmp	r3, r4
    479e:	d945      	bls.n	482c <grid_port_process_ui+0x2bc>
			if (length>200){
    47a0:	2dc8      	cmp	r5, #200	; 0xc8
    47a2:	d8f7      	bhi.n	4794 <grid_port_process_ui+0x224>
			CRITICAL_SECTION_ENTER()
    47a4:	a80a      	add	r0, sp, #40	; 0x28
    47a6:	47c0      	blx	r8
	return mod->report_array[index].changed;
    47a8:	0123      	lsls	r3, r4, #4
    47aa:	6872      	ldr	r2, [r6, #4]
    47ac:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_LOCAL){
    47ae:	5cd3      	ldrb	r3, [r2, r3]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d0ed      	beq.n	4790 <grid_port_process_ui+0x220>
    47b4:	784b      	ldrb	r3, [r1, #1]
    47b6:	2b01      	cmp	r3, #1
    47b8:	d1ea      	bne.n	4790 <grid_port_process_ui+0x220>
				packetvalid++;
    47ba:	f109 0901 	add.w	r9, r9, #1
    47be:	fa5f f989 	uxtb.w	r9, r9
				grid_report_render(mod, i, &message[length]);
    47c2:	ab0e      	add	r3, sp, #56	; 0x38
    47c4:	eb03 0b05 	add.w	fp, r3, r5
    47c8:	465a      	mov	r2, fp
    47ca:	4621      	mov	r1, r4
    47cc:	4630      	mov	r0, r6
    47ce:	4b09      	ldr	r3, [pc, #36]	; (47f4 <grid_port_process_ui+0x284>)
    47d0:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    47d2:	4621      	mov	r1, r4
    47d4:	4630      	mov	r0, r6
    47d6:	4b0b      	ldr	r3, [pc, #44]	; (4804 <grid_port_process_ui+0x294>)
    47d8:	4798      	blx	r3
				length += strlen(&message[length]);
    47da:	4658      	mov	r0, fp
    47dc:	4b06      	ldr	r3, [pc, #24]	; (47f8 <grid_port_process_ui+0x288>)
    47de:	4798      	blx	r3
    47e0:	4405      	add	r5, r0
    47e2:	e7d5      	b.n	4790 <grid_port_process_ui+0x220>
    47e4:	20003270 	.word	0x20003270
    47e8:	0000158d 	.word	0x0000158d
    47ec:	0000c8d7 	.word	0x0000c8d7
    47f0:	00004d8d 	.word	0x00004d8d
    47f4:	00004531 	.word	0x00004531
    47f8:	0000cd0d 	.word	0x0000cd0d
    47fc:	00004d9b 	.word	0x00004d9b
    4800:	20004700 	.word	0x20004700
    4804:	00004567 	.word	0x00004567
    4808:	000015bd 	.word	0x000015bd
    480c:	000015d9 	.word	0x000015d9
    4810:	20003280 	.word	0x20003280
    4814:	0000e098 	.word	0x0000e098
    4818:	0000ccc5 	.word	0x0000ccc5
    481c:	20003250 	.word	0x20003250
    4820:	200021ec 	.word	0x200021ec
    4824:	20007730 	.word	0x20007730
    4828:	2000571c 	.word	0x2000571c
		if (packetvalid){
    482c:	f1b9 0f00 	cmp.w	r9, #0
    4830:	f43f af50 	beq.w	46d4 <grid_port_process_ui+0x164>
			grid_sys_state.next_broadcast_message_id++;
    4834:	4a60      	ldr	r2, [pc, #384]	; (49b8 <grid_port_process_ui+0x448>)
    4836:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    483a:	3301      	adds	r3, #1
    483c:	b2db      	uxtb	r3, r3
    483e:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    4842:	ac0e      	add	r4, sp, #56	; 0x38
    4844:	1966      	adds	r6, r4, r5
    4846:	2204      	movs	r2, #4
    4848:	495c      	ldr	r1, [pc, #368]	; (49bc <grid_port_process_ui+0x44c>)
    484a:	4630      	mov	r0, r6
    484c:	4f5c      	ldr	r7, [pc, #368]	; (49c0 <grid_port_process_ui+0x450>)
    484e:	47b8      	blx	r7
			length += strlen(&message[length]);
    4850:	4630      	mov	r0, r6
    4852:	4e5c      	ldr	r6, [pc, #368]	; (49c4 <grid_port_process_ui+0x454>)
    4854:	47b0      	blx	r6
    4856:	4405      	add	r5, r0
			sprintf(length_string, "%02x", length);
    4858:	462a      	mov	r2, r5
    485a:	495b      	ldr	r1, [pc, #364]	; (49c8 <grid_port_process_ui+0x458>)
    485c:	a80c      	add	r0, sp, #48	; 0x30
    485e:	47b8      	blx	r7
			message[2] = length_string[0];
    4860:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    4864:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    4866:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    486a:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    486c:	4b57      	ldr	r3, [pc, #348]	; (49cc <grid_port_process_ui+0x45c>)
    486e:	6818      	ldr	r0, [r3, #0]
    4870:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    4872:	1960      	adds	r0, r4, r5
    4874:	47b0      	blx	r6
    4876:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    4878:	4629      	mov	r1, r5
    487a:	4620      	mov	r0, r4
    487c:	4b54      	ldr	r3, [pc, #336]	; (49d0 <grid_port_process_ui+0x460>)
    487e:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    4880:	4602      	mov	r2, r0
    4882:	4629      	mov	r1, r5
    4884:	4620      	mov	r0, r4
    4886:	4b53      	ldr	r3, [pc, #332]	; (49d4 <grid_port_process_ui+0x464>)
    4888:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, length)){
    488a:	b2a9      	uxth	r1, r5
    488c:	4852      	ldr	r0, [pc, #328]	; (49d8 <grid_port_process_ui+0x468>)
    488e:	4b53      	ldr	r3, [pc, #332]	; (49dc <grid_port_process_ui+0x46c>)
    4890:	4798      	blx	r3
    4892:	2800      	cmp	r0, #0
    4894:	f43f af1e 	beq.w	46d4 <grid_port_process_ui+0x164>
				for(uint32_t i = 0; i<length; i++){
    4898:	b16d      	cbz	r5, 48b6 <grid_port_process_ui+0x346>
    489a:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    489e:	ab4e      	add	r3, sp, #312	; 0x138
    48a0:	441d      	add	r5, r3
    48a2:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.tx_buffer, message[i]);
    48a6:	4f4c      	ldr	r7, [pc, #304]	; (49d8 <grid_port_process_ui+0x468>)
    48a8:	4e4d      	ldr	r6, [pc, #308]	; (49e0 <grid_port_process_ui+0x470>)
    48aa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    48ae:	4638      	mov	r0, r7
    48b0:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    48b2:	42a5      	cmp	r5, r4
    48b4:	d1f9      	bne.n	48aa <grid_port_process_ui+0x33a>
				grid_buffer_write_acknowledge(&GRID_PORT_U.tx_buffer);
    48b6:	4848      	ldr	r0, [pc, #288]	; (49d8 <grid_port_process_ui+0x468>)
    48b8:	4b4a      	ldr	r3, [pc, #296]	; (49e4 <grid_port_process_ui+0x474>)
    48ba:	4798      	blx	r3
    48bc:	e70a      	b.n	46d4 <grid_port_process_ui+0x164>
		por->cooldown--;
    48be:	3b01      	subs	r3, #1
    48c0:	9a07      	ldr	r2, [sp, #28]
    48c2:	6013      	str	r3, [r2, #0]
}
    48c4:	b04f      	add	sp, #316	; 0x13c
    48c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			CRITICAL_SECTION_LEAVE()
    48ca:	a80b      	add	r0, sp, #44	; 0x2c
    48cc:	47b8      	blx	r7
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    48ce:	3401      	adds	r4, #1
    48d0:	b2e4      	uxtb	r4, r4
    48d2:	7833      	ldrb	r3, [r6, #0]
    48d4:	b2db      	uxtb	r3, r3
    48d6:	42a3      	cmp	r3, r4
    48d8:	d921      	bls.n	491e <grid_port_process_ui+0x3ae>
			if (length>200){
    48da:	2dc8      	cmp	r5, #200	; 0xc8
    48dc:	d8f7      	bhi.n	48ce <grid_port_process_ui+0x35e>
			CRITICAL_SECTION_ENTER()
    48de:	a80b      	add	r0, sp, #44	; 0x2c
    48e0:	47c0      	blx	r8
	return mod->report_array[index].changed;
    48e2:	0123      	lsls	r3, r4, #4
    48e4:	6872      	ldr	r2, [r6, #4]
    48e6:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_BROADCAST){
    48e8:	5cd3      	ldrb	r3, [r2, r3]
    48ea:	2b00      	cmp	r3, #0
    48ec:	d0ed      	beq.n	48ca <grid_port_process_ui+0x35a>
    48ee:	784b      	ldrb	r3, [r1, #1]
    48f0:	2b02      	cmp	r3, #2
    48f2:	d1ea      	bne.n	48ca <grid_port_process_ui+0x35a>
				packetvalid++;
    48f4:	f109 0901 	add.w	r9, r9, #1
    48f8:	fa5f f989 	uxtb.w	r9, r9
				grid_report_render(mod, i, &message[length]);
    48fc:	ab0e      	add	r3, sp, #56	; 0x38
    48fe:	eb03 0a05 	add.w	sl, r3, r5
    4902:	4652      	mov	r2, sl
    4904:	4621      	mov	r1, r4
    4906:	4630      	mov	r0, r6
    4908:	4b37      	ldr	r3, [pc, #220]	; (49e8 <grid_port_process_ui+0x478>)
    490a:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    490c:	4621      	mov	r1, r4
    490e:	4630      	mov	r0, r6
    4910:	4b36      	ldr	r3, [pc, #216]	; (49ec <grid_port_process_ui+0x47c>)
    4912:	4798      	blx	r3
				length += strlen(&message[length]);
    4914:	4650      	mov	r0, sl
    4916:	4b2b      	ldr	r3, [pc, #172]	; (49c4 <grid_port_process_ui+0x454>)
    4918:	4798      	blx	r3
    491a:	4405      	add	r5, r0
    491c:	e7d5      	b.n	48ca <grid_port_process_ui+0x35a>
		if (packetvalid){
    491e:	f1b9 0f00 	cmp.w	r9, #0
    4922:	d0cf      	beq.n	48c4 <grid_port_process_ui+0x354>
			por->cooldown += (10+por->cooldown);
    4924:	9a07      	ldr	r2, [sp, #28]
    4926:	6813      	ldr	r3, [r2, #0]
    4928:	005b      	lsls	r3, r3, #1
    492a:	330a      	adds	r3, #10
    492c:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    492e:	4a22      	ldr	r2, [pc, #136]	; (49b8 <grid_port_process_ui+0x448>)
    4930:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    4934:	3301      	adds	r3, #1
    4936:	b2db      	uxtb	r3, r3
    4938:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    493c:	ac0e      	add	r4, sp, #56	; 0x38
    493e:	1966      	adds	r6, r4, r5
    4940:	2204      	movs	r2, #4
    4942:	491e      	ldr	r1, [pc, #120]	; (49bc <grid_port_process_ui+0x44c>)
    4944:	4630      	mov	r0, r6
    4946:	4f1e      	ldr	r7, [pc, #120]	; (49c0 <grid_port_process_ui+0x450>)
    4948:	47b8      	blx	r7
			length += strlen(&message[length]);
    494a:	4630      	mov	r0, r6
    494c:	4e1d      	ldr	r6, [pc, #116]	; (49c4 <grid_port_process_ui+0x454>)
    494e:	47b0      	blx	r6
    4950:	4405      	add	r5, r0
			sprintf(length_string, "%02x", length);
    4952:	462a      	mov	r2, r5
    4954:	491c      	ldr	r1, [pc, #112]	; (49c8 <grid_port_process_ui+0x458>)
    4956:	a80c      	add	r0, sp, #48	; 0x30
    4958:	47b8      	blx	r7
			message[2] = length_string[0];
    495a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    495e:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    4960:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    4964:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    4966:	4b19      	ldr	r3, [pc, #100]	; (49cc <grid_port_process_ui+0x45c>)
    4968:	6818      	ldr	r0, [r3, #0]
    496a:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    496c:	1960      	adds	r0, r4, r5
    496e:	47b0      	blx	r6
    4970:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    4972:	4629      	mov	r1, r5
    4974:	4620      	mov	r0, r4
    4976:	4b16      	ldr	r3, [pc, #88]	; (49d0 <grid_port_process_ui+0x460>)
    4978:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    497a:	4602      	mov	r2, r0
    497c:	4629      	mov	r1, r5
    497e:	4620      	mov	r0, r4
    4980:	4b14      	ldr	r3, [pc, #80]	; (49d4 <grid_port_process_ui+0x464>)
    4982:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    4984:	b2a9      	uxth	r1, r5
    4986:	481a      	ldr	r0, [pc, #104]	; (49f0 <grid_port_process_ui+0x480>)
    4988:	4b14      	ldr	r3, [pc, #80]	; (49dc <grid_port_process_ui+0x46c>)
    498a:	4798      	blx	r3
    498c:	2800      	cmp	r0, #0
    498e:	d099      	beq.n	48c4 <grid_port_process_ui+0x354>
				for(uint32_t i = 0; i<length; i++){
    4990:	b16d      	cbz	r5, 49ae <grid_port_process_ui+0x43e>
    4992:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    4996:	ab4e      	add	r3, sp, #312	; 0x138
    4998:	441d      	add	r5, r3
    499a:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    499e:	4f14      	ldr	r7, [pc, #80]	; (49f0 <grid_port_process_ui+0x480>)
    49a0:	4e0f      	ldr	r6, [pc, #60]	; (49e0 <grid_port_process_ui+0x470>)
    49a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    49a6:	4638      	mov	r0, r7
    49a8:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    49aa:	42ac      	cmp	r4, r5
    49ac:	d1f9      	bne.n	49a2 <grid_port_process_ui+0x432>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    49ae:	4810      	ldr	r0, [pc, #64]	; (49f0 <grid_port_process_ui+0x480>)
    49b0:	4b0c      	ldr	r3, [pc, #48]	; (49e4 <grid_port_process_ui+0x474>)
    49b2:	4798      	blx	r3
    49b4:	e786      	b.n	48c4 <grid_port_process_ui+0x354>
    49b6:	bf00      	nop
    49b8:	20003280 	.word	0x20003280
    49bc:	0000e0b0 	.word	0x0000e0b0
    49c0:	0000ccc5 	.word	0x0000ccc5
    49c4:	0000cd0d 	.word	0x0000cd0d
    49c8:	0000e0b4 	.word	0x0000e0b4
    49cc:	0000e0bc 	.word	0x0000e0bc
    49d0:	000040e5 	.word	0x000040e5
    49d4:	00004121 	.word	0x00004121
    49d8:	20003238 	.word	0x20003238
    49dc:	0000158d 	.word	0x0000158d
    49e0:	000015bd 	.word	0x000015bd
    49e4:	000015d9 	.word	0x000015d9
    49e8:	00004531 	.word	0x00004531
    49ec:	00004567 	.word	0x00004567
    49f0:	20003250 	.word	0x20003250

000049f4 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    49f4:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    49f6:	6983      	ldr	r3, [r0, #24]
    49f8:	b103      	cbz	r3, 49fc <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    49fa:	4798      	blx	r3
    49fc:	bd08      	pop	{r3, pc}

000049fe <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    49fe:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    4a00:	69c3      	ldr	r3, [r0, #28]
    4a02:	b103      	cbz	r3, 4a06 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    4a04:	4798      	blx	r3
    4a06:	bd08      	pop	{r3, pc}

00004a08 <adc_async_channel_conversion_done>:
{
    4a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a0c:	4606      	mov	r6, r0
    4a0e:	460f      	mov	r7, r1
    4a10:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    4a12:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4a14:	5c5c      	ldrb	r4, [r3, r1]
    4a16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4a1a:	00e4      	lsls	r4, r4, #3
    4a1c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    4a20:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    4a24:	f105 0a04 	add.w	sl, r5, #4
    4a28:	b2d1      	uxtb	r1, r2
    4a2a:	4650      	mov	r0, sl
    4a2c:	4b0c      	ldr	r3, [pc, #48]	; (4a60 <adc_async_channel_conversion_done+0x58>)
    4a2e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    4a30:	4630      	mov	r0, r6
    4a32:	4b0c      	ldr	r3, [pc, #48]	; (4a64 <adc_async_channel_conversion_done+0x5c>)
    4a34:	4798      	blx	r3
    4a36:	2801      	cmp	r0, #1
    4a38:	d907      	bls.n	4a4a <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    4a3a:	ea4f 2119 	mov.w	r1, r9, lsr #8
    4a3e:	4650      	mov	r0, sl
    4a40:	4b07      	ldr	r3, [pc, #28]	; (4a60 <adc_async_channel_conversion_done+0x58>)
    4a42:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    4a44:	8aab      	ldrh	r3, [r5, #20]
    4a46:	3301      	adds	r3, #1
    4a48:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    4a4a:	8aab      	ldrh	r3, [r5, #20]
    4a4c:	3301      	adds	r3, #1
    4a4e:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    4a50:	f858 3004 	ldr.w	r3, [r8, r4]
    4a54:	b113      	cbz	r3, 4a5c <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    4a56:	4639      	mov	r1, r7
    4a58:	4630      	mov	r0, r6
    4a5a:	4798      	blx	r3
    4a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a60:	000062bd 	.word	0x000062bd
    4a64:	0000665b 	.word	0x0000665b

00004a68 <adc_async_init>:
{
    4a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a6c:	4689      	mov	r9, r1
    4a6e:	4616      	mov	r6, r2
    4a70:	461c      	mov	r4, r3
    4a72:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    4a76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    4a78:	4607      	mov	r7, r0
    4a7a:	b140      	cbz	r0, 4a8e <adc_async_init+0x26>
    4a7c:	b149      	cbz	r1, 4a92 <adc_async_init+0x2a>
    4a7e:	b152      	cbz	r2, 4a96 <adc_async_init+0x2e>
    4a80:	f1b8 0f00 	cmp.w	r8, #0
    4a84:	d009      	beq.n	4a9a <adc_async_init+0x32>
    4a86:	1c28      	adds	r0, r5, #0
    4a88:	bf18      	it	ne
    4a8a:	2001      	movne	r0, #1
    4a8c:	e006      	b.n	4a9c <adc_async_init+0x34>
    4a8e:	2000      	movs	r0, #0
    4a90:	e004      	b.n	4a9c <adc_async_init+0x34>
    4a92:	2000      	movs	r0, #0
    4a94:	e002      	b.n	4a9c <adc_async_init+0x34>
    4a96:	2000      	movs	r0, #0
    4a98:	e000      	b.n	4a9c <adc_async_init+0x34>
    4a9a:	2000      	movs	r0, #0
    4a9c:	f8df b064 	ldr.w	fp, [pc, #100]	; 4b04 <adc_async_init+0x9c>
    4aa0:	223f      	movs	r2, #63	; 0x3f
    4aa2:	4659      	mov	r1, fp
    4aa4:	f8df a060 	ldr.w	sl, [pc, #96]	; 4b08 <adc_async_init+0xa0>
    4aa8:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    4aaa:	1c60      	adds	r0, r4, #1
    4aac:	2240      	movs	r2, #64	; 0x40
    4aae:	4659      	mov	r1, fp
    4ab0:	4580      	cmp	r8, r0
    4ab2:	bfcc      	ite	gt
    4ab4:	2000      	movgt	r0, #0
    4ab6:	2001      	movle	r0, #1
    4ab8:	47d0      	blx	sl
	device = &descr->device;
    4aba:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    4abc:	21ff      	movs	r1, #255	; 0xff
    4abe:	b2da      	uxtb	r2, r3
    4ac0:	54b1      	strb	r1, [r6, r2]
    4ac2:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    4ac4:	b2da      	uxtb	r2, r3
    4ac6:	42a2      	cmp	r2, r4
    4ac8:	d9f9      	bls.n	4abe <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    4aca:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    4acc:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    4ad0:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    4ad4:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    4ad6:	4649      	mov	r1, r9
    4ad8:	4638      	mov	r0, r7
    4ada:	4b06      	ldr	r3, [pc, #24]	; (4af4 <adc_async_init+0x8c>)
    4adc:	4798      	blx	r3
	if (init_status) {
    4ade:	4603      	mov	r3, r0
    4ae0:	b928      	cbnz	r0, 4aee <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    4ae2:	4a05      	ldr	r2, [pc, #20]	; (4af8 <adc_async_init+0x90>)
    4ae4:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    4ae6:	4a05      	ldr	r2, [pc, #20]	; (4afc <adc_async_init+0x94>)
    4ae8:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    4aea:	4a05      	ldr	r2, [pc, #20]	; (4b00 <adc_async_init+0x98>)
    4aec:	607a      	str	r2, [r7, #4]
}
    4aee:	4618      	mov	r0, r3
    4af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4af4:	00006529 	.word	0x00006529
    4af8:	00004a09 	.word	0x00004a09
    4afc:	000049f5 	.word	0x000049f5
    4b00:	000049ff 	.word	0x000049ff
    4b04:	0000e0c0 	.word	0x0000e0c0
    4b08:	00006181 	.word	0x00006181

00004b0c <adc_async_register_channel_buffer>:
{
    4b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b10:	460e      	mov	r6, r1
    4b12:	4617      	mov	r7, r2
    4b14:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    4b16:	4605      	mov	r5, r0
    4b18:	2800      	cmp	r0, #0
    4b1a:	d040      	beq.n	4b9e <adc_async_register_channel_buffer+0x92>
    4b1c:	2a00      	cmp	r2, #0
    4b1e:	d040      	beq.n	4ba2 <adc_async_register_channel_buffer+0x96>
    4b20:	1c18      	adds	r0, r3, #0
    4b22:	bf18      	it	ne
    4b24:	2001      	movne	r0, #1
    4b26:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4bc0 <adc_async_register_channel_buffer+0xb4>
    4b2a:	2266      	movs	r2, #102	; 0x66
    4b2c:	4649      	mov	r1, r9
    4b2e:	4c22      	ldr	r4, [pc, #136]	; (4bb8 <adc_async_register_channel_buffer+0xac>)
    4b30:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    4b32:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4b36:	2267      	movs	r2, #103	; 0x67
    4b38:	4649      	mov	r1, r9
    4b3a:	42b0      	cmp	r0, r6
    4b3c:	bf34      	ite	cc
    4b3e:	2000      	movcc	r0, #0
    4b40:	2001      	movcs	r0, #1
    4b42:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    4b44:	6a29      	ldr	r1, [r5, #32]
    4b46:	5d8b      	ldrb	r3, [r1, r6]
    4b48:	2bff      	cmp	r3, #255	; 0xff
    4b4a:	d12c      	bne.n	4ba6 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    4b4c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4b50:	2300      	movs	r3, #0
    4b52:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    4b54:	b2da      	uxtb	r2, r3
    4b56:	5c8a      	ldrb	r2, [r1, r2]
    4b58:	2aff      	cmp	r2, #255	; 0xff
			index++;
    4b5a:	bf1c      	itt	ne
    4b5c:	3401      	addne	r4, #1
    4b5e:	b2e4      	uxtbne	r4, r4
    4b60:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    4b62:	b2da      	uxtb	r2, r3
    4b64:	4282      	cmp	r2, r0
    4b66:	d9f5      	bls.n	4b54 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    4b68:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4b6c:	42a3      	cmp	r3, r4
    4b6e:	d31d      	bcc.n	4bac <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    4b70:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    4b74:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    4b78:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4b7a:	4448      	add	r0, r9
    4b7c:	4642      	mov	r2, r8
    4b7e:	4639      	mov	r1, r7
    4b80:	3004      	adds	r0, #4
    4b82:	4b0e      	ldr	r3, [pc, #56]	; (4bbc <adc_async_register_channel_buffer+0xb0>)
    4b84:	4798      	blx	r3
    4b86:	4602      	mov	r2, r0
    4b88:	b998      	cbnz	r0, 4bb2 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    4b8a:	6a2b      	ldr	r3, [r5, #32]
    4b8c:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    4b8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4b90:	4499      	add	r9, r3
    4b92:	2300      	movs	r3, #0
    4b94:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    4b98:	4610      	mov	r0, r2
    4b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    4b9e:	2000      	movs	r0, #0
    4ba0:	e7c1      	b.n	4b26 <adc_async_register_channel_buffer+0x1a>
    4ba2:	2000      	movs	r0, #0
    4ba4:	e7bf      	b.n	4b26 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    4ba6:	f06f 020c 	mvn.w	r2, #12
    4baa:	e7f5      	b.n	4b98 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    4bac:	f06f 021b 	mvn.w	r2, #27
    4bb0:	e7f2      	b.n	4b98 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    4bb2:	f06f 020c 	mvn.w	r2, #12
    4bb6:	e7ef      	b.n	4b98 <adc_async_register_channel_buffer+0x8c>
    4bb8:	00006181 	.word	0x00006181
    4bbc:	00006229 	.word	0x00006229
    4bc0:	0000e0c0 	.word	0x0000e0c0

00004bc4 <adc_async_enable_channel>:
{
    4bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bc6:	460d      	mov	r5, r1
	ASSERT(descr);
    4bc8:	4f0b      	ldr	r7, [pc, #44]	; (4bf8 <adc_async_enable_channel+0x34>)
    4bca:	4604      	mov	r4, r0
    4bcc:	2283      	movs	r2, #131	; 0x83
    4bce:	4639      	mov	r1, r7
    4bd0:	3000      	adds	r0, #0
    4bd2:	bf18      	it	ne
    4bd4:	2001      	movne	r0, #1
    4bd6:	4e09      	ldr	r6, [pc, #36]	; (4bfc <adc_async_enable_channel+0x38>)
    4bd8:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    4bda:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4bde:	2284      	movs	r2, #132	; 0x84
    4be0:	4639      	mov	r1, r7
    4be2:	42a8      	cmp	r0, r5
    4be4:	bf34      	ite	cc
    4be6:	2000      	movcc	r0, #0
    4be8:	2001      	movcs	r0, #1
    4bea:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    4bec:	4629      	mov	r1, r5
    4bee:	4620      	mov	r0, r4
    4bf0:	4b03      	ldr	r3, [pc, #12]	; (4c00 <adc_async_enable_channel+0x3c>)
    4bf2:	4798      	blx	r3
}
    4bf4:	2000      	movs	r0, #0
    4bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bf8:	0000e0c0 	.word	0x0000e0c0
    4bfc:	00006181 	.word	0x00006181
    4c00:	00006645 	.word	0x00006645

00004c04 <adc_async_register_callback>:
{
    4c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c08:	460e      	mov	r6, r1
    4c0a:	4614      	mov	r4, r2
    4c0c:	4699      	mov	r9, r3
	ASSERT(descr);
    4c0e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4c80 <adc_async_register_callback+0x7c>
    4c12:	4605      	mov	r5, r0
    4c14:	229c      	movs	r2, #156	; 0x9c
    4c16:	4641      	mov	r1, r8
    4c18:	3000      	adds	r0, #0
    4c1a:	bf18      	it	ne
    4c1c:	2001      	movne	r0, #1
    4c1e:	4f16      	ldr	r7, [pc, #88]	; (4c78 <adc_async_register_callback+0x74>)
    4c20:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    4c22:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4c26:	229d      	movs	r2, #157	; 0x9d
    4c28:	4641      	mov	r1, r8
    4c2a:	42b0      	cmp	r0, r6
    4c2c:	bf34      	ite	cc
    4c2e:	2000      	movcc	r0, #0
    4c30:	2001      	movcs	r0, #1
    4c32:	47b8      	blx	r7
	switch (type) {
    4c34:	2c01      	cmp	r4, #1
    4c36:	d019      	beq.n	4c6c <adc_async_register_callback+0x68>
    4c38:	b12c      	cbz	r4, 4c46 <adc_async_register_callback+0x42>
    4c3a:	2c02      	cmp	r4, #2
    4c3c:	d019      	beq.n	4c72 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    4c3e:	f06f 000c 	mvn.w	r0, #12
}
    4c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    4c46:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4c48:	5d9b      	ldrb	r3, [r3, r6]
    4c4a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4c4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4c50:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    4c54:	f119 0300 	adds.w	r3, r9, #0
    4c58:	bf18      	it	ne
    4c5a:	2301      	movne	r3, #1
    4c5c:	4622      	mov	r2, r4
    4c5e:	4631      	mov	r1, r6
    4c60:	4628      	mov	r0, r5
    4c62:	4c06      	ldr	r4, [pc, #24]	; (4c7c <adc_async_register_callback+0x78>)
    4c64:	47a0      	blx	r4
	return ERR_NONE;
    4c66:	2000      	movs	r0, #0
    4c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    4c6c:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    4c70:	e7f0      	b.n	4c54 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    4c72:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    4c76:	e7ed      	b.n	4c54 <adc_async_register_callback+0x50>
    4c78:	00006181 	.word	0x00006181
    4c7c:	00006683 	.word	0x00006683
    4c80:	0000e0c0 	.word	0x0000e0c0

00004c84 <adc_async_read_channel>:
{
    4c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c88:	b083      	sub	sp, #12
    4c8a:	4688      	mov	r8, r1
    4c8c:	4691      	mov	r9, r2
    4c8e:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    4c90:	4604      	mov	r4, r0
    4c92:	2800      	cmp	r0, #0
    4c94:	d04f      	beq.n	4d36 <adc_async_read_channel+0xb2>
    4c96:	2a00      	cmp	r2, #0
    4c98:	d04f      	beq.n	4d3a <adc_async_read_channel+0xb6>
    4c9a:	1c18      	adds	r0, r3, #0
    4c9c:	bf18      	it	ne
    4c9e:	2001      	movne	r0, #1
    4ca0:	4f29      	ldr	r7, [pc, #164]	; (4d48 <adc_async_read_channel+0xc4>)
    4ca2:	22bc      	movs	r2, #188	; 0xbc
    4ca4:	4639      	mov	r1, r7
    4ca6:	4e29      	ldr	r6, [pc, #164]	; (4d4c <adc_async_read_channel+0xc8>)
    4ca8:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    4caa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4cae:	22bd      	movs	r2, #189	; 0xbd
    4cb0:	4639      	mov	r1, r7
    4cb2:	4540      	cmp	r0, r8
    4cb4:	bf34      	ite	cc
    4cb6:	2000      	movcc	r0, #0
    4cb8:	2001      	movcs	r0, #1
    4cba:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    4cbc:	4620      	mov	r0, r4
    4cbe:	4b24      	ldr	r3, [pc, #144]	; (4d50 <adc_async_read_channel+0xcc>)
    4cc0:	4798      	blx	r3
	ASSERT(!(length % data_size));
    4cc2:	fb95 f3f0 	sdiv	r3, r5, r0
    4cc6:	fb03 5010 	mls	r0, r3, r0, r5
    4cca:	22bf      	movs	r2, #191	; 0xbf
    4ccc:	4639      	mov	r1, r7
    4cce:	fab0 f080 	clz	r0, r0
    4cd2:	0940      	lsrs	r0, r0, #5
    4cd4:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    4cd6:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4cd8:	f813 b008 	ldrb.w	fp, [r3, r8]
    4cdc:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    4ce0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4ce2:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    4ce6:	a801      	add	r0, sp, #4
    4ce8:	4b1a      	ldr	r3, [pc, #104]	; (4d54 <adc_async_read_channel+0xd0>)
    4cea:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    4cec:	f10b 0a04 	add.w	sl, fp, #4
    4cf0:	4650      	mov	r0, sl
    4cf2:	4b19      	ldr	r3, [pc, #100]	; (4d58 <adc_async_read_channel+0xd4>)
    4cf4:	4798      	blx	r3
    4cf6:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    4cf8:	a801      	add	r0, sp, #4
    4cfa:	4b18      	ldr	r3, [pc, #96]	; (4d5c <adc_async_read_channel+0xd8>)
    4cfc:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    4cfe:	f1b8 0f00 	cmp.w	r8, #0
    4d02:	d01c      	beq.n	4d3e <adc_async_read_channel+0xba>
    4d04:	b1ed      	cbz	r5, 4d42 <adc_async_read_channel+0xbe>
    4d06:	3d01      	subs	r5, #1
    4d08:	b2ad      	uxth	r5, r5
    4d0a:	3502      	adds	r5, #2
    4d0c:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    4d0e:	4f14      	ldr	r7, [pc, #80]	; (4d60 <adc_async_read_channel+0xdc>)
    4d10:	b2a6      	uxth	r6, r4
    4d12:	1e61      	subs	r1, r4, #1
    4d14:	4449      	add	r1, r9
    4d16:	4650      	mov	r0, sl
    4d18:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    4d1a:	4544      	cmp	r4, r8
    4d1c:	d002      	beq.n	4d24 <adc_async_read_channel+0xa0>
    4d1e:	3401      	adds	r4, #1
    4d20:	42ac      	cmp	r4, r5
    4d22:	d1f5      	bne.n	4d10 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4d24:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4d28:	1b9b      	subs	r3, r3, r6
    4d2a:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    4d2e:	4630      	mov	r0, r6
    4d30:	b003      	add	sp, #12
    4d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4d36:	2000      	movs	r0, #0
    4d38:	e7b2      	b.n	4ca0 <adc_async_read_channel+0x1c>
    4d3a:	2000      	movs	r0, #0
    4d3c:	e7b0      	b.n	4ca0 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    4d3e:	2600      	movs	r6, #0
    4d40:	e7f0      	b.n	4d24 <adc_async_read_channel+0xa0>
    4d42:	2600      	movs	r6, #0
    4d44:	e7ee      	b.n	4d24 <adc_async_read_channel+0xa0>
    4d46:	bf00      	nop
    4d48:	0000e0c0 	.word	0x0000e0c0
    4d4c:	00006181 	.word	0x00006181
    4d50:	0000665b 	.word	0x0000665b
    4d54:	00004d8d 	.word	0x00004d8d
    4d58:	000062fd 	.word	0x000062fd
    4d5c:	00004d9b 	.word	0x00004d9b
    4d60:	00006279 	.word	0x00006279

00004d64 <adc_async_start_conversion>:
{
    4d64:	b510      	push	{r4, lr}
	ASSERT(descr);
    4d66:	4604      	mov	r4, r0
    4d68:	22d6      	movs	r2, #214	; 0xd6
    4d6a:	4905      	ldr	r1, [pc, #20]	; (4d80 <adc_async_start_conversion+0x1c>)
    4d6c:	3000      	adds	r0, #0
    4d6e:	bf18      	it	ne
    4d70:	2001      	movne	r0, #1
    4d72:	4b04      	ldr	r3, [pc, #16]	; (4d84 <adc_async_start_conversion+0x20>)
    4d74:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    4d76:	4620      	mov	r0, r4
    4d78:	4b03      	ldr	r3, [pc, #12]	; (4d88 <adc_async_start_conversion+0x24>)
    4d7a:	4798      	blx	r3
}
    4d7c:	2000      	movs	r0, #0
    4d7e:	bd10      	pop	{r4, pc}
    4d80:	0000e0c0 	.word	0x0000e0c0
    4d84:	00006181 	.word	0x00006181
    4d88:	0000666d 	.word	0x0000666d

00004d8c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4d8c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4d90:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4d92:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4d94:	f3bf 8f5f 	dmb	sy
    4d98:	4770      	bx	lr

00004d9a <atomic_leave_critical>:
    4d9a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    4d9e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4da0:	f383 8810 	msr	PRIMASK, r3
    4da4:	4770      	bx	lr
	...

00004da8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4da8:	b538      	push	{r3, r4, r5, lr}
    4daa:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    4dac:	4605      	mov	r5, r0
    4dae:	b158      	cbz	r0, 4dc8 <crc_sync_init+0x20>
    4db0:	1c08      	adds	r0, r1, #0
    4db2:	bf18      	it	ne
    4db4:	2001      	movne	r0, #1
    4db6:	222b      	movs	r2, #43	; 0x2b
    4db8:	4904      	ldr	r1, [pc, #16]	; (4dcc <crc_sync_init+0x24>)
    4dba:	4b05      	ldr	r3, [pc, #20]	; (4dd0 <crc_sync_init+0x28>)
    4dbc:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4dbe:	4621      	mov	r1, r4
    4dc0:	4628      	mov	r0, r5
    4dc2:	4b04      	ldr	r3, [pc, #16]	; (4dd4 <crc_sync_init+0x2c>)
    4dc4:	4798      	blx	r3
}
    4dc6:	bd38      	pop	{r3, r4, r5, pc}
    4dc8:	2000      	movs	r0, #0
    4dca:	e7f4      	b.n	4db6 <crc_sync_init+0xe>
    4dcc:	0000e0dc 	.word	0x0000e0dc
    4dd0:	00006181 	.word	0x00006181
    4dd4:	00006a6d 	.word	0x00006a6d

00004dd8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    4dd8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    4dda:	4b02      	ldr	r3, [pc, #8]	; (4de4 <delay_init+0xc>)
    4ddc:	6018      	str	r0, [r3, #0]
    4dde:	4b02      	ldr	r3, [pc, #8]	; (4de8 <delay_init+0x10>)
    4de0:	4798      	blx	r3
    4de2:	bd08      	pop	{r3, pc}
    4de4:	20000648 	.word	0x20000648
    4de8:	00008615 	.word	0x00008615

00004dec <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4dec:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4dee:	4b04      	ldr	r3, [pc, #16]	; (4e00 <delay_us+0x14>)
    4df0:	681c      	ldr	r4, [r3, #0]
    4df2:	4b04      	ldr	r3, [pc, #16]	; (4e04 <delay_us+0x18>)
    4df4:	4798      	blx	r3
    4df6:	4601      	mov	r1, r0
    4df8:	4620      	mov	r0, r4
    4dfa:	4b03      	ldr	r3, [pc, #12]	; (4e08 <delay_us+0x1c>)
    4dfc:	4798      	blx	r3
    4dfe:	bd10      	pop	{r4, pc}
    4e00:	20000648 	.word	0x20000648
    4e04:	00006731 	.word	0x00006731
    4e08:	00008629 	.word	0x00008629

00004e0c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4e0c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4e0e:	4b04      	ldr	r3, [pc, #16]	; (4e20 <delay_ms+0x14>)
    4e10:	681c      	ldr	r4, [r3, #0]
    4e12:	4b04      	ldr	r3, [pc, #16]	; (4e24 <delay_ms+0x18>)
    4e14:	4798      	blx	r3
    4e16:	4601      	mov	r1, r0
    4e18:	4620      	mov	r0, r4
    4e1a:	4b03      	ldr	r3, [pc, #12]	; (4e28 <delay_ms+0x1c>)
    4e1c:	4798      	blx	r3
    4e1e:	bd10      	pop	{r4, pc}
    4e20:	20000648 	.word	0x20000648
    4e24:	00006739 	.word	0x00006739
    4e28:	00008629 	.word	0x00008629

00004e2c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4e2c:	b508      	push	{r3, lr}
	return _event_system_init();
    4e2e:	4b01      	ldr	r3, [pc, #4]	; (4e34 <event_system_init+0x8>)
    4e30:	4798      	blx	r3
}
    4e32:	bd08      	pop	{r3, pc}
    4e34:	00006a75 	.word	0x00006a75

00004e38 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4e38:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4e3a:	6943      	ldr	r3, [r0, #20]
    4e3c:	b103      	cbz	r3, 4e40 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    4e3e:	4798      	blx	r3
    4e40:	bd08      	pop	{r3, pc}

00004e42 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    4e42:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4e44:	6983      	ldr	r3, [r0, #24]
    4e46:	b103      	cbz	r3, 4e4a <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4e48:	4798      	blx	r3
    4e4a:	bd08      	pop	{r3, pc}

00004e4c <flash_init>:
{
    4e4c:	b538      	push	{r3, r4, r5, lr}
    4e4e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4e50:	4604      	mov	r4, r0
    4e52:	b190      	cbz	r0, 4e7a <flash_init+0x2e>
    4e54:	1c08      	adds	r0, r1, #0
    4e56:	bf18      	it	ne
    4e58:	2001      	movne	r0, #1
    4e5a:	2238      	movs	r2, #56	; 0x38
    4e5c:	4908      	ldr	r1, [pc, #32]	; (4e80 <flash_init+0x34>)
    4e5e:	4b09      	ldr	r3, [pc, #36]	; (4e84 <flash_init+0x38>)
    4e60:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    4e62:	4629      	mov	r1, r5
    4e64:	4620      	mov	r0, r4
    4e66:	4b08      	ldr	r3, [pc, #32]	; (4e88 <flash_init+0x3c>)
    4e68:	4798      	blx	r3
	if (rc) {
    4e6a:	4603      	mov	r3, r0
    4e6c:	b918      	cbnz	r0, 4e76 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    4e6e:	4a07      	ldr	r2, [pc, #28]	; (4e8c <flash_init+0x40>)
    4e70:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    4e72:	4a07      	ldr	r2, [pc, #28]	; (4e90 <flash_init+0x44>)
    4e74:	6062      	str	r2, [r4, #4]
}
    4e76:	4618      	mov	r0, r3
    4e78:	bd38      	pop	{r3, r4, r5, pc}
    4e7a:	2000      	movs	r0, #0
    4e7c:	e7ed      	b.n	4e5a <flash_init+0xe>
    4e7e:	bf00      	nop
    4e80:	0000e0f8 	.word	0x0000e0f8
    4e84:	00006181 	.word	0x00006181
    4e88:	00006c15 	.word	0x00006c15
    4e8c:	00004e39 	.word	0x00004e39
    4e90:	00004e43 	.word	0x00004e43

00004e94 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4e94:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4e96:	8843      	ldrh	r3, [r0, #2]
    4e98:	f413 7f80 	tst.w	r3, #256	; 0x100
    4e9c:	d102      	bne.n	4ea4 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    4e9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4ea0:	b103      	cbz	r3, 4ea4 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    4ea2:	4798      	blx	r3
    4ea4:	bd08      	pop	{r3, pc}

00004ea6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4ea6:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4ea8:	8843      	ldrh	r3, [r0, #2]
    4eaa:	f413 7f80 	tst.w	r3, #256	; 0x100
    4eae:	d102      	bne.n	4eb6 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    4eb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4eb2:	b103      	cbz	r3, 4eb6 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    4eb4:	4798      	blx	r3
    4eb6:	bd08      	pop	{r3, pc}

00004eb8 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4eb8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4eba:	8843      	ldrh	r3, [r0, #2]
    4ebc:	f413 7f80 	tst.w	r3, #256	; 0x100
    4ec0:	d102      	bne.n	4ec8 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    4ec2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4ec4:	b103      	cbz	r3, 4ec8 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    4ec6:	4798      	blx	r3
    4ec8:	bd08      	pop	{r3, pc}
	...

00004ecc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4ecc:	b510      	push	{r4, lr}
    4ece:	b084      	sub	sp, #16
    4ed0:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4ed2:	8a83      	ldrh	r3, [r0, #20]
    4ed4:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4ed8:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    4eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4ede:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    4ee2:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4ee4:	a901      	add	r1, sp, #4
    4ee6:	3828      	subs	r0, #40	; 0x28
    4ee8:	4b03      	ldr	r3, [pc, #12]	; (4ef8 <i2c_m_async_write+0x2c>)
    4eea:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    4eec:	2800      	cmp	r0, #0
    4eee:	bf08      	it	eq
    4ef0:	4620      	moveq	r0, r4
    4ef2:	b004      	add	sp, #16
    4ef4:	bd10      	pop	{r4, pc}
    4ef6:	bf00      	nop
    4ef8:	00007b65 	.word	0x00007b65

00004efc <i2c_m_async_read>:
{
    4efc:	b510      	push	{r4, lr}
    4efe:	b084      	sub	sp, #16
    4f00:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    4f02:	8a83      	ldrh	r3, [r0, #20]
    4f04:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4f08:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4f0a:	f248 0301 	movw	r3, #32769	; 0x8001
    4f0e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    4f12:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4f14:	a901      	add	r1, sp, #4
    4f16:	3828      	subs	r0, #40	; 0x28
    4f18:	4b03      	ldr	r3, [pc, #12]	; (4f28 <i2c_m_async_read+0x2c>)
    4f1a:	4798      	blx	r3
}
    4f1c:	2800      	cmp	r0, #0
    4f1e:	bf08      	it	eq
    4f20:	4620      	moveq	r0, r4
    4f22:	b004      	add	sp, #16
    4f24:	bd10      	pop	{r4, pc}
    4f26:	bf00      	nop
    4f28:	00007b65 	.word	0x00007b65

00004f2c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4f2c:	b570      	push	{r4, r5, r6, lr}
    4f2e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4f30:	4604      	mov	r4, r0
    4f32:	2289      	movs	r2, #137	; 0x89
    4f34:	490f      	ldr	r1, [pc, #60]	; (4f74 <i2c_m_async_init+0x48>)
    4f36:	3000      	adds	r0, #0
    4f38:	bf18      	it	ne
    4f3a:	2001      	movne	r0, #1
    4f3c:	4b0e      	ldr	r3, [pc, #56]	; (4f78 <i2c_m_async_init+0x4c>)
    4f3e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4f40:	4629      	mov	r1, r5
    4f42:	4620      	mov	r0, r4
    4f44:	4b0d      	ldr	r3, [pc, #52]	; (4f7c <i2c_m_async_init+0x50>)
    4f46:	4798      	blx	r3
	if (init_status) {
    4f48:	4605      	mov	r5, r0
    4f4a:	b108      	cbz	r0, 4f50 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4f4c:	4628      	mov	r0, r5
    4f4e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4f50:	4b0b      	ldr	r3, [pc, #44]	; (4f80 <i2c_m_async_init+0x54>)
    4f52:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4f54:	4b0b      	ldr	r3, [pc, #44]	; (4f84 <i2c_m_async_init+0x58>)
    4f56:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4f58:	4a0b      	ldr	r2, [pc, #44]	; (4f88 <i2c_m_async_init+0x5c>)
    4f5a:	2101      	movs	r1, #1
    4f5c:	4620      	mov	r0, r4
    4f5e:	4e0b      	ldr	r6, [pc, #44]	; (4f8c <i2c_m_async_init+0x60>)
    4f60:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4f62:	4a0b      	ldr	r2, [pc, #44]	; (4f90 <i2c_m_async_init+0x64>)
    4f64:	2102      	movs	r1, #2
    4f66:	4620      	mov	r0, r4
    4f68:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4f6a:	4a0a      	ldr	r2, [pc, #40]	; (4f94 <i2c_m_async_init+0x68>)
    4f6c:	2100      	movs	r1, #0
    4f6e:	4620      	mov	r0, r4
    4f70:	47b0      	blx	r6
	return ERR_NONE;
    4f72:	e7eb      	b.n	4f4c <i2c_m_async_init+0x20>
    4f74:	0000e110 	.word	0x0000e110
    4f78:	00006181 	.word	0x00006181
    4f7c:	00007ae5 	.word	0x00007ae5
    4f80:	00004efd 	.word	0x00004efd
    4f84:	00004ecd 	.word	0x00004ecd
    4f88:	00004e95 	.word	0x00004e95
    4f8c:	00007c95 	.word	0x00007c95
    4f90:	00004ea7 	.word	0x00004ea7
    4f94:	00004eb9 	.word	0x00004eb9

00004f98 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4f98:	b570      	push	{r4, r5, r6, lr}
    4f9a:	460d      	mov	r5, r1
    4f9c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4f9e:	4604      	mov	r4, r0
    4fa0:	b160      	cbz	r0, 4fbc <io_write+0x24>
    4fa2:	1c08      	adds	r0, r1, #0
    4fa4:	bf18      	it	ne
    4fa6:	2001      	movne	r0, #1
    4fa8:	2234      	movs	r2, #52	; 0x34
    4faa:	4905      	ldr	r1, [pc, #20]	; (4fc0 <io_write+0x28>)
    4fac:	4b05      	ldr	r3, [pc, #20]	; (4fc4 <io_write+0x2c>)
    4fae:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4fb0:	6823      	ldr	r3, [r4, #0]
    4fb2:	4632      	mov	r2, r6
    4fb4:	4629      	mov	r1, r5
    4fb6:	4620      	mov	r0, r4
    4fb8:	4798      	blx	r3
}
    4fba:	bd70      	pop	{r4, r5, r6, pc}
    4fbc:	2000      	movs	r0, #0
    4fbe:	e7f3      	b.n	4fa8 <io_write+0x10>
    4fc0:	0000e130 	.word	0x0000e130
    4fc4:	00006181 	.word	0x00006181

00004fc8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4fc8:	b570      	push	{r4, r5, r6, lr}
    4fca:	460d      	mov	r5, r1
    4fcc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4fce:	4604      	mov	r4, r0
    4fd0:	b160      	cbz	r0, 4fec <io_read+0x24>
    4fd2:	1c08      	adds	r0, r1, #0
    4fd4:	bf18      	it	ne
    4fd6:	2001      	movne	r0, #1
    4fd8:	223d      	movs	r2, #61	; 0x3d
    4fda:	4905      	ldr	r1, [pc, #20]	; (4ff0 <io_read+0x28>)
    4fdc:	4b05      	ldr	r3, [pc, #20]	; (4ff4 <io_read+0x2c>)
    4fde:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4fe0:	6863      	ldr	r3, [r4, #4]
    4fe2:	4632      	mov	r2, r6
    4fe4:	4629      	mov	r1, r5
    4fe6:	4620      	mov	r0, r4
    4fe8:	4798      	blx	r3
}
    4fea:	bd70      	pop	{r4, r5, r6, pc}
    4fec:	2000      	movs	r0, #0
    4fee:	e7f3      	b.n	4fd8 <io_read+0x10>
    4ff0:	0000e130 	.word	0x0000e130
    4ff4:	00006181 	.word	0x00006181

00004ff8 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    4ff8:	b538      	push	{r3, r4, r5, lr}
    4ffa:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    4ffc:	4605      	mov	r5, r0
    4ffe:	b158      	cbz	r0, 5018 <qspi_dma_init+0x20>
    5000:	1c08      	adds	r0, r1, #0
    5002:	bf18      	it	ne
    5004:	2001      	movne	r0, #1
    5006:	2231      	movs	r2, #49	; 0x31
    5008:	4904      	ldr	r1, [pc, #16]	; (501c <qspi_dma_init+0x24>)
    500a:	4b05      	ldr	r3, [pc, #20]	; (5020 <qspi_dma_init+0x28>)
    500c:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    500e:	4621      	mov	r1, r4
    5010:	4628      	mov	r0, r5
    5012:	4b04      	ldr	r3, [pc, #16]	; (5024 <qspi_dma_init+0x2c>)
    5014:	4798      	blx	r3
}
    5016:	bd38      	pop	{r3, r4, r5, pc}
    5018:	2000      	movs	r0, #0
    501a:	e7f4      	b.n	5006 <qspi_dma_init+0xe>
    501c:	0000e144 	.word	0x0000e144
    5020:	00006181 	.word	0x00006181
    5024:	00006f49 	.word	0x00006f49

00005028 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    502a:	460f      	mov	r7, r1
    502c:	4616      	mov	r6, r2
	ASSERT(io);
    502e:	4604      	mov	r4, r0
    5030:	f240 1227 	movw	r2, #295	; 0x127
    5034:	4909      	ldr	r1, [pc, #36]	; (505c <_spi_m_async_io_write+0x34>)
    5036:	3000      	adds	r0, #0
    5038:	bf18      	it	ne
    503a:	2001      	movne	r0, #1
    503c:	4b08      	ldr	r3, [pc, #32]	; (5060 <_spi_m_async_io_write+0x38>)
    503e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    5040:	2500      	movs	r5, #0
    5042:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    5044:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    5046:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    5048:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    504a:	2310      	movs	r3, #16
    504c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    504e:	2101      	movs	r1, #1
    5050:	f1a4 0020 	sub.w	r0, r4, #32
    5054:	4b03      	ldr	r3, [pc, #12]	; (5064 <_spi_m_async_io_write+0x3c>)
    5056:	4798      	blx	r3

	return ERR_NONE;
}
    5058:	4628      	mov	r0, r5
    505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    505c:	0000e160 	.word	0x0000e160
    5060:	00006181 	.word	0x00006181
    5064:	00008129 	.word	0x00008129

00005068 <_spi_m_async_io_read>:
{
    5068:	b570      	push	{r4, r5, r6, lr}
    506a:	460d      	mov	r5, r1
    506c:	4616      	mov	r6, r2
	ASSERT(io);
    506e:	4604      	mov	r4, r0
    5070:	f240 1205 	movw	r2, #261	; 0x105
    5074:	490c      	ldr	r1, [pc, #48]	; (50a8 <_spi_m_async_io_read+0x40>)
    5076:	3000      	adds	r0, #0
    5078:	bf18      	it	ne
    507a:	2001      	movne	r0, #1
    507c:	4b0b      	ldr	r3, [pc, #44]	; (50ac <_spi_m_async_io_read+0x44>)
    507e:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    5080:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    5082:	2500      	movs	r5, #0
    5084:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    5086:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    5088:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    508a:	2310      	movs	r3, #16
    508c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    508e:	3c20      	subs	r4, #32
    5090:	2101      	movs	r1, #1
    5092:	4620      	mov	r0, r4
    5094:	4b06      	ldr	r3, [pc, #24]	; (50b0 <_spi_m_async_io_read+0x48>)
    5096:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    5098:	f240 11ff 	movw	r1, #511	; 0x1ff
    509c:	4620      	mov	r0, r4
    509e:	4b05      	ldr	r3, [pc, #20]	; (50b4 <_spi_m_async_io_read+0x4c>)
    50a0:	4798      	blx	r3
}
    50a2:	4628      	mov	r0, r5
    50a4:	bd70      	pop	{r4, r5, r6, pc}
    50a6:	bf00      	nop
    50a8:	0000e160 	.word	0x0000e160
    50ac:	00006181 	.word	0x00006181
    50b0:	0000815d 	.word	0x0000815d
    50b4:	000081d9 	.word	0x000081d9

000050b8 <_spi_dev_error>:
{
    50b8:	b570      	push	{r4, r5, r6, lr}
    50ba:	4604      	mov	r4, r0
    50bc:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    50be:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    50c0:	2100      	movs	r1, #0
    50c2:	4b09      	ldr	r3, [pc, #36]	; (50e8 <_spi_dev_error+0x30>)
    50c4:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    50c6:	2100      	movs	r1, #0
    50c8:	4620      	mov	r0, r4
    50ca:	4b08      	ldr	r3, [pc, #32]	; (50ec <_spi_dev_error+0x34>)
    50cc:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    50ce:	2100      	movs	r1, #0
    50d0:	4620      	mov	r0, r4
    50d2:	4b07      	ldr	r3, [pc, #28]	; (50f0 <_spi_dev_error+0x38>)
    50d4:	4798      	blx	r3
	spi->stat = 0;
    50d6:	2300      	movs	r3, #0
    50d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    50dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    50de:	b113      	cbz	r3, 50e6 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    50e0:	4631      	mov	r1, r6
    50e2:	4628      	mov	r0, r5
    50e4:	4798      	blx	r3
    50e6:	bd70      	pop	{r4, r5, r6, pc}
    50e8:	00008129 	.word	0x00008129
    50ec:	0000815d 	.word	0x0000815d
    50f0:	0000819d 	.word	0x0000819d

000050f4 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    50f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    50f6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    50f8:	429a      	cmp	r2, r3
    50fa:	d200      	bcs.n	50fe <_spi_dev_complete+0xa>
    50fc:	4770      	bx	lr
{
    50fe:	b510      	push	{r4, lr}
    5100:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    5102:	2100      	movs	r1, #0
    5104:	4b04      	ldr	r3, [pc, #16]	; (5118 <_spi_dev_complete+0x24>)
    5106:	4798      	blx	r3
		spi->stat = 0;
    5108:	2300      	movs	r3, #0
    510a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    510e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5110:	b10b      	cbz	r3, 5116 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    5112:	1f20      	subs	r0, r4, #4
    5114:	4798      	blx	r3
    5116:	bd10      	pop	{r4, pc}
    5118:	0000819d 	.word	0x0000819d

0000511c <_spi_dev_tx>:
{
    511c:	b510      	push	{r4, lr}
    511e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    5120:	7903      	ldrb	r3, [r0, #4]
    5122:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    5124:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5126:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5128:	f103 0101 	add.w	r1, r3, #1
    512c:	6401      	str	r1, [r0, #64]	; 0x40
    512e:	bf94      	ite	ls
    5130:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    5132:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    5136:	4b08      	ldr	r3, [pc, #32]	; (5158 <_spi_dev_tx+0x3c>)
    5138:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    513a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    513c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    513e:	429a      	cmp	r2, r3
    5140:	d000      	beq.n	5144 <_spi_dev_tx+0x28>
    5142:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    5144:	2100      	movs	r1, #0
    5146:	4620      	mov	r0, r4
    5148:	4b04      	ldr	r3, [pc, #16]	; (515c <_spi_dev_tx+0x40>)
    514a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    514c:	2101      	movs	r1, #1
    514e:	4620      	mov	r0, r4
    5150:	4b03      	ldr	r3, [pc, #12]	; (5160 <_spi_dev_tx+0x44>)
    5152:	4798      	blx	r3
}
    5154:	e7f5      	b.n	5142 <_spi_dev_tx+0x26>
    5156:	bf00      	nop
    5158:	000081d9 	.word	0x000081d9
    515c:	00008129 	.word	0x00008129
    5160:	0000819d 	.word	0x0000819d

00005164 <_spi_dev_rx>:
{
    5164:	b570      	push	{r4, r5, r6, lr}
    5166:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    5168:	6b85      	ldr	r5, [r0, #56]	; 0x38
    516a:	b305      	cbz	r5, 51ae <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    516c:	7903      	ldrb	r3, [r0, #4]
    516e:	2b01      	cmp	r3, #1
    5170:	d916      	bls.n	51a0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    5172:	6c06      	ldr	r6, [r0, #64]	; 0x40
    5174:	1c73      	adds	r3, r6, #1
    5176:	6403      	str	r3, [r0, #64]	; 0x40
    5178:	4b18      	ldr	r3, [pc, #96]	; (51dc <_spi_dev_rx+0x78>)
    517a:	4798      	blx	r3
    517c:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    5180:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5182:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5184:	4293      	cmp	r3, r2
    5186:	d21d      	bcs.n	51c4 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    5188:	6b62      	ldr	r2, [r4, #52]	; 0x34
    518a:	b1b2      	cbz	r2, 51ba <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    518c:	7921      	ldrb	r1, [r4, #4]
    518e:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    5190:	bf94      	ite	ls
    5192:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    5194:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    5198:	4620      	mov	r0, r4
    519a:	4b11      	ldr	r3, [pc, #68]	; (51e0 <_spi_dev_rx+0x7c>)
    519c:	4798      	blx	r3
    519e:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    51a0:	6c06      	ldr	r6, [r0, #64]	; 0x40
    51a2:	1c73      	adds	r3, r6, #1
    51a4:	6403      	str	r3, [r0, #64]	; 0x40
    51a6:	4b0d      	ldr	r3, [pc, #52]	; (51dc <_spi_dev_rx+0x78>)
    51a8:	4798      	blx	r3
    51aa:	55a8      	strb	r0, [r5, r6]
    51ac:	e7e8      	b.n	5180 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    51ae:	4b0b      	ldr	r3, [pc, #44]	; (51dc <_spi_dev_rx+0x78>)
    51b0:	4798      	blx	r3
		spi->xfercnt++;
    51b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    51b4:	3301      	adds	r3, #1
    51b6:	6423      	str	r3, [r4, #64]	; 0x40
    51b8:	e7e2      	b.n	5180 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    51ba:	88e1      	ldrh	r1, [r4, #6]
    51bc:	4620      	mov	r0, r4
    51be:	4b08      	ldr	r3, [pc, #32]	; (51e0 <_spi_dev_rx+0x7c>)
    51c0:	4798      	blx	r3
    51c2:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    51c4:	2100      	movs	r1, #0
    51c6:	4620      	mov	r0, r4
    51c8:	4b06      	ldr	r3, [pc, #24]	; (51e4 <_spi_dev_rx+0x80>)
    51ca:	4798      	blx	r3
		spi->stat = 0;
    51cc:	2300      	movs	r3, #0
    51ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    51d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    51d4:	b10b      	cbz	r3, 51da <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    51d6:	1f20      	subs	r0, r4, #4
    51d8:	4798      	blx	r3
    51da:	bd70      	pop	{r4, r5, r6, pc}
    51dc:	00008209 	.word	0x00008209
    51e0:	000081d9 	.word	0x000081d9
    51e4:	0000815d 	.word	0x0000815d

000051e8 <spi_m_async_init>:
{
    51e8:	b570      	push	{r4, r5, r6, lr}
    51ea:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    51ec:	4606      	mov	r6, r0
    51ee:	b330      	cbz	r0, 523e <spi_m_async_init+0x56>
    51f0:	1c08      	adds	r0, r1, #0
    51f2:	bf18      	it	ne
    51f4:	2001      	movne	r0, #1
    51f6:	22a5      	movs	r2, #165	; 0xa5
    51f8:	4912      	ldr	r1, [pc, #72]	; (5244 <spi_m_async_init+0x5c>)
    51fa:	4b13      	ldr	r3, [pc, #76]	; (5248 <spi_m_async_init+0x60>)
    51fc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    51fe:	4634      	mov	r4, r6
    5200:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    5204:	4629      	mov	r1, r5
    5206:	4620      	mov	r0, r4
    5208:	4b10      	ldr	r3, [pc, #64]	; (524c <spi_m_async_init+0x64>)
    520a:	4798      	blx	r3
	if (rc >= 0) {
    520c:	2800      	cmp	r0, #0
    520e:	db15      	blt.n	523c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    5210:	4a0f      	ldr	r2, [pc, #60]	; (5250 <spi_m_async_init+0x68>)
    5212:	2100      	movs	r1, #0
    5214:	4620      	mov	r0, r4
    5216:	4d0f      	ldr	r5, [pc, #60]	; (5254 <spi_m_async_init+0x6c>)
    5218:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    521a:	4a0f      	ldr	r2, [pc, #60]	; (5258 <spi_m_async_init+0x70>)
    521c:	2101      	movs	r1, #1
    521e:	4620      	mov	r0, r4
    5220:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    5222:	4a0e      	ldr	r2, [pc, #56]	; (525c <spi_m_async_init+0x74>)
    5224:	2102      	movs	r1, #2
    5226:	4620      	mov	r0, r4
    5228:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    522a:	4a0d      	ldr	r2, [pc, #52]	; (5260 <spi_m_async_init+0x78>)
    522c:	2103      	movs	r1, #3
    522e:	4620      	mov	r0, r4
    5230:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    5232:	4b0c      	ldr	r3, [pc, #48]	; (5264 <spi_m_async_init+0x7c>)
    5234:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    5236:	4b0c      	ldr	r3, [pc, #48]	; (5268 <spi_m_async_init+0x80>)
    5238:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    523a:	2000      	movs	r0, #0
}
    523c:	bd70      	pop	{r4, r5, r6, pc}
    523e:	2000      	movs	r0, #0
    5240:	e7d9      	b.n	51f6 <spi_m_async_init+0xe>
    5242:	bf00      	nop
    5244:	0000e160 	.word	0x0000e160
    5248:	00006181 	.word	0x00006181
    524c:	00008021 	.word	0x00008021
    5250:	0000511d 	.word	0x0000511d
    5254:	00008235 	.word	0x00008235
    5258:	00005165 	.word	0x00005165
    525c:	000050f5 	.word	0x000050f5
    5260:	000050b9 	.word	0x000050b9
    5264:	00005069 	.word	0x00005069
    5268:	00005029 	.word	0x00005029

0000526c <spi_m_async_enable>:
{
    526c:	b510      	push	{r4, lr}
	ASSERT(spi);
    526e:	4604      	mov	r4, r0
    5270:	22c1      	movs	r2, #193	; 0xc1
    5272:	4905      	ldr	r1, [pc, #20]	; (5288 <spi_m_async_enable+0x1c>)
    5274:	3000      	adds	r0, #0
    5276:	bf18      	it	ne
    5278:	2001      	movne	r0, #1
    527a:	4b04      	ldr	r3, [pc, #16]	; (528c <spi_m_async_enable+0x20>)
    527c:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    527e:	1d20      	adds	r0, r4, #4
    5280:	4b03      	ldr	r3, [pc, #12]	; (5290 <spi_m_async_enable+0x24>)
    5282:	4798      	blx	r3
    5284:	bd10      	pop	{r4, pc}
    5286:	bf00      	nop
    5288:	0000e160 	.word	0x0000e160
    528c:	00006181 	.word	0x00006181
    5290:	00008089 	.word	0x00008089

00005294 <spi_m_async_set_baudrate>:
{
    5294:	b538      	push	{r3, r4, r5, lr}
    5296:	460d      	mov	r5, r1
	ASSERT(spi);
    5298:	4604      	mov	r4, r0
    529a:	22cf      	movs	r2, #207	; 0xcf
    529c:	4909      	ldr	r1, [pc, #36]	; (52c4 <spi_m_async_set_baudrate+0x30>)
    529e:	3000      	adds	r0, #0
    52a0:	bf18      	it	ne
    52a2:	2001      	movne	r0, #1
    52a4:	4b08      	ldr	r3, [pc, #32]	; (52c8 <spi_m_async_set_baudrate+0x34>)
    52a6:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    52a8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    52ac:	f013 0f10 	tst.w	r3, #16
    52b0:	d104      	bne.n	52bc <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    52b2:	4629      	mov	r1, r5
    52b4:	1d20      	adds	r0, r4, #4
    52b6:	4b05      	ldr	r3, [pc, #20]	; (52cc <spi_m_async_set_baudrate+0x38>)
    52b8:	4798      	blx	r3
    52ba:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    52bc:	f06f 0003 	mvn.w	r0, #3
}
    52c0:	bd38      	pop	{r3, r4, r5, pc}
    52c2:	bf00      	nop
    52c4:	0000e160 	.word	0x0000e160
    52c8:	00006181 	.word	0x00006181
    52cc:	000080ed 	.word	0x000080ed

000052d0 <spi_m_async_set_mode>:
{
    52d0:	b538      	push	{r3, r4, r5, lr}
    52d2:	460d      	mov	r5, r1
	ASSERT(spi);
    52d4:	4604      	mov	r4, r0
    52d6:	22d9      	movs	r2, #217	; 0xd9
    52d8:	4909      	ldr	r1, [pc, #36]	; (5300 <spi_m_async_set_mode+0x30>)
    52da:	3000      	adds	r0, #0
    52dc:	bf18      	it	ne
    52de:	2001      	movne	r0, #1
    52e0:	4b08      	ldr	r3, [pc, #32]	; (5304 <spi_m_async_set_mode+0x34>)
    52e2:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    52e4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    52e8:	f013 0f10 	tst.w	r3, #16
    52ec:	d104      	bne.n	52f8 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    52ee:	4629      	mov	r1, r5
    52f0:	1d20      	adds	r0, r4, #4
    52f2:	4b05      	ldr	r3, [pc, #20]	; (5308 <spi_m_async_set_mode+0x38>)
    52f4:	4798      	blx	r3
    52f6:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    52f8:	f06f 0003 	mvn.w	r0, #3
}
    52fc:	bd38      	pop	{r3, r4, r5, pc}
    52fe:	bf00      	nop
    5300:	0000e160 	.word	0x0000e160
    5304:	00006181 	.word	0x00006181
    5308:	000080b9 	.word	0x000080b9

0000530c <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    530e:	460d      	mov	r5, r1
    5310:	4617      	mov	r7, r2
    5312:	461e      	mov	r6, r3
	ASSERT(spi);
    5314:	4604      	mov	r4, r0
    5316:	f44f 729c 	mov.w	r2, #312	; 0x138
    531a:	4912      	ldr	r1, [pc, #72]	; (5364 <spi_m_async_transfer+0x58>)
    531c:	3000      	adds	r0, #0
    531e:	bf18      	it	ne
    5320:	2001      	movne	r0, #1
    5322:	4b11      	ldr	r3, [pc, #68]	; (5368 <spi_m_async_transfer+0x5c>)
    5324:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    5326:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    5328:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    532a:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    532c:	2300      	movs	r3, #0
    532e:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    5330:	2310      	movs	r3, #16
    5332:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    5336:	1d26      	adds	r6, r4, #4
    5338:	2101      	movs	r1, #1
    533a:	4630      	mov	r0, r6
    533c:	4b0b      	ldr	r3, [pc, #44]	; (536c <spi_m_async_transfer+0x60>)
    533e:	4798      	blx	r3
	if (txbuf) {
    5340:	b15d      	cbz	r5, 535a <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    5342:	7a23      	ldrb	r3, [r4, #8]
    5344:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    5346:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5348:	bf94      	ite	ls
    534a:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    534c:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    5350:	4630      	mov	r0, r6
    5352:	4b07      	ldr	r3, [pc, #28]	; (5370 <spi_m_async_transfer+0x64>)
    5354:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    5356:	2000      	movs	r0, #0
    5358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    535a:	8961      	ldrh	r1, [r4, #10]
    535c:	4630      	mov	r0, r6
    535e:	4b04      	ldr	r3, [pc, #16]	; (5370 <spi_m_async_transfer+0x64>)
    5360:	4798      	blx	r3
    5362:	e7f8      	b.n	5356 <spi_m_async_transfer+0x4a>
    5364:	0000e160 	.word	0x0000e160
    5368:	00006181 	.word	0x00006181
    536c:	0000815d 	.word	0x0000815d
    5370:	000081d9 	.word	0x000081d9

00005374 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    5374:	b570      	push	{r4, r5, r6, lr}
    5376:	460c      	mov	r4, r1
    5378:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    537a:	4605      	mov	r5, r0
    537c:	b158      	cbz	r0, 5396 <spi_m_async_register_callback+0x22>
    537e:	2901      	cmp	r1, #1
    5380:	bf8c      	ite	hi
    5382:	2000      	movhi	r0, #0
    5384:	2001      	movls	r0, #1
    5386:	f240 1263 	movw	r2, #355	; 0x163
    538a:	4908      	ldr	r1, [pc, #32]	; (53ac <spi_m_async_register_callback+0x38>)
    538c:	4b08      	ldr	r3, [pc, #32]	; (53b0 <spi_m_async_register_callback+0x3c>)
    538e:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    5390:	b91c      	cbnz	r4, 539a <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    5392:	632e      	str	r6, [r5, #48]	; 0x30
    5394:	bd70      	pop	{r4, r5, r6, pc}
    5396:	2000      	movs	r0, #0
    5398:	e7f5      	b.n	5386 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    539a:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    539c:	1c32      	adds	r2, r6, #0
    539e:	bf18      	it	ne
    53a0:	2201      	movne	r2, #1
    53a2:	2103      	movs	r1, #3
    53a4:	1d28      	adds	r0, r5, #4
    53a6:	4b03      	ldr	r3, [pc, #12]	; (53b4 <spi_m_async_register_callback+0x40>)
    53a8:	4798      	blx	r3
    53aa:	bd70      	pop	{r4, r5, r6, pc}
    53ac:	0000e160 	.word	0x0000e160
    53b0:	00006181 	.word	0x00006181
    53b4:	00008269 	.word	0x00008269

000053b8 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    53b8:	b538      	push	{r3, r4, r5, lr}
    53ba:	460d      	mov	r5, r1
	ASSERT(spi && io);
    53bc:	4604      	mov	r4, r0
    53be:	b158      	cbz	r0, 53d8 <spi_m_async_get_io_descriptor+0x20>
    53c0:	1c08      	adds	r0, r1, #0
    53c2:	bf18      	it	ne
    53c4:	2001      	movne	r0, #1
    53c6:	f240 126f 	movw	r2, #367	; 0x16f
    53ca:	4904      	ldr	r1, [pc, #16]	; (53dc <spi_m_async_get_io_descriptor+0x24>)
    53cc:	4b04      	ldr	r3, [pc, #16]	; (53e0 <spi_m_async_get_io_descriptor+0x28>)
    53ce:	4798      	blx	r3
	*io = &spi->io;
    53d0:	3424      	adds	r4, #36	; 0x24
    53d2:	602c      	str	r4, [r5, #0]
	return 0;
}
    53d4:	2000      	movs	r0, #0
    53d6:	bd38      	pop	{r3, r4, r5, pc}
    53d8:	2000      	movs	r0, #0
    53da:	e7f4      	b.n	53c6 <spi_m_async_get_io_descriptor+0xe>
    53dc:	0000e160 	.word	0x0000e160
    53e0:	00006181 	.word	0x00006181

000053e4 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    53e4:	b570      	push	{r4, r5, r6, lr}
    53e6:	460d      	mov	r5, r1
    53e8:	4616      	mov	r6, r2
	ASSERT(io);
    53ea:	4604      	mov	r4, r0
    53ec:	2298      	movs	r2, #152	; 0x98
    53ee:	4907      	ldr	r1, [pc, #28]	; (540c <_spi_m_dma_io_write+0x28>)
    53f0:	3000      	adds	r0, #0
    53f2:	bf18      	it	ne
    53f4:	2001      	movne	r0, #1
    53f6:	4b06      	ldr	r3, [pc, #24]	; (5410 <_spi_m_dma_io_write+0x2c>)
    53f8:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    53fa:	4633      	mov	r3, r6
    53fc:	2200      	movs	r2, #0
    53fe:	4629      	mov	r1, r5
    5400:	f1a4 001c 	sub.w	r0, r4, #28
    5404:	4c03      	ldr	r4, [pc, #12]	; (5414 <_spi_m_dma_io_write+0x30>)
    5406:	47a0      	blx	r4
}
    5408:	bd70      	pop	{r4, r5, r6, pc}
    540a:	bf00      	nop
    540c:	0000e180 	.word	0x0000e180
    5410:	00006181 	.word	0x00006181
    5414:	000084bd 	.word	0x000084bd

00005418 <_spi_m_dma_io_read>:
{
    5418:	b570      	push	{r4, r5, r6, lr}
    541a:	460d      	mov	r5, r1
    541c:	4616      	mov	r6, r2
	ASSERT(io);
    541e:	4604      	mov	r4, r0
    5420:	2281      	movs	r2, #129	; 0x81
    5422:	4907      	ldr	r1, [pc, #28]	; (5440 <_spi_m_dma_io_read+0x28>)
    5424:	3000      	adds	r0, #0
    5426:	bf18      	it	ne
    5428:	2001      	movne	r0, #1
    542a:	4b06      	ldr	r3, [pc, #24]	; (5444 <_spi_m_dma_io_read+0x2c>)
    542c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    542e:	4633      	mov	r3, r6
    5430:	462a      	mov	r2, r5
    5432:	2100      	movs	r1, #0
    5434:	f1a4 001c 	sub.w	r0, r4, #28
    5438:	4c03      	ldr	r4, [pc, #12]	; (5448 <_spi_m_dma_io_read+0x30>)
    543a:	47a0      	blx	r4
}
    543c:	bd70      	pop	{r4, r5, r6, pc}
    543e:	bf00      	nop
    5440:	0000e180 	.word	0x0000e180
    5444:	00006181 	.word	0x00006181
    5448:	000084bd 	.word	0x000084bd

0000544c <spi_m_dma_init>:
{
    544c:	b538      	push	{r3, r4, r5, lr}
    544e:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    5450:	4605      	mov	r5, r0
    5452:	b1a0      	cbz	r0, 547e <spi_m_dma_init+0x32>
    5454:	1c08      	adds	r0, r1, #0
    5456:	bf18      	it	ne
    5458:	2001      	movne	r0, #1
    545a:	223b      	movs	r2, #59	; 0x3b
    545c:	4909      	ldr	r1, [pc, #36]	; (5484 <spi_m_dma_init+0x38>)
    545e:	4b0a      	ldr	r3, [pc, #40]	; (5488 <spi_m_dma_init+0x3c>)
    5460:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    5462:	4628      	mov	r0, r5
    5464:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    5468:	4621      	mov	r1, r4
    546a:	4b08      	ldr	r3, [pc, #32]	; (548c <spi_m_dma_init+0x40>)
    546c:	4798      	blx	r3
	if (rc) {
    546e:	4603      	mov	r3, r0
    5470:	b918      	cbnz	r0, 547a <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    5472:	4a07      	ldr	r2, [pc, #28]	; (5490 <spi_m_dma_init+0x44>)
    5474:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    5476:	4a07      	ldr	r2, [pc, #28]	; (5494 <spi_m_dma_init+0x48>)
    5478:	622a      	str	r2, [r5, #32]
}
    547a:	4618      	mov	r0, r3
    547c:	bd38      	pop	{r3, r4, r5, pc}
    547e:	2000      	movs	r0, #0
    5480:	e7eb      	b.n	545a <spi_m_dma_init+0xe>
    5482:	bf00      	nop
    5484:	0000e180 	.word	0x0000e180
    5488:	00006181 	.word	0x00006181
    548c:	000082a1 	.word	0x000082a1
    5490:	00005419 	.word	0x00005419
    5494:	000053e5 	.word	0x000053e5

00005498 <spi_m_dma_enable>:
{
    5498:	b510      	push	{r4, lr}
	ASSERT(spi);
    549a:	4604      	mov	r4, r0
    549c:	2251      	movs	r2, #81	; 0x51
    549e:	4905      	ldr	r1, [pc, #20]	; (54b4 <spi_m_dma_enable+0x1c>)
    54a0:	3000      	adds	r0, #0
    54a2:	bf18      	it	ne
    54a4:	2001      	movne	r0, #1
    54a6:	4b04      	ldr	r3, [pc, #16]	; (54b8 <spi_m_dma_enable+0x20>)
    54a8:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    54aa:	1d20      	adds	r0, r4, #4
    54ac:	4b03      	ldr	r3, [pc, #12]	; (54bc <spi_m_dma_enable+0x24>)
    54ae:	4798      	blx	r3
    54b0:	bd10      	pop	{r4, pc}
    54b2:	bf00      	nop
    54b4:	0000e180 	.word	0x0000e180
    54b8:	00006181 	.word	0x00006181
    54bc:	0000841d 	.word	0x0000841d

000054c0 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    54c0:	b570      	push	{r4, r5, r6, lr}
    54c2:	460d      	mov	r5, r1
    54c4:	4616      	mov	r6, r2
	ASSERT(spi);
    54c6:	4604      	mov	r4, r0
    54c8:	22a8      	movs	r2, #168	; 0xa8
    54ca:	4906      	ldr	r1, [pc, #24]	; (54e4 <spi_m_dma_register_callback+0x24>)
    54cc:	3000      	adds	r0, #0
    54ce:	bf18      	it	ne
    54d0:	2001      	movne	r0, #1
    54d2:	4b05      	ldr	r3, [pc, #20]	; (54e8 <spi_m_dma_register_callback+0x28>)
    54d4:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    54d6:	4632      	mov	r2, r6
    54d8:	4629      	mov	r1, r5
    54da:	1d20      	adds	r0, r4, #4
    54dc:	4b03      	ldr	r3, [pc, #12]	; (54ec <spi_m_dma_register_callback+0x2c>)
    54de:	4798      	blx	r3
    54e0:	bd70      	pop	{r4, r5, r6, pc}
    54e2:	bf00      	nop
    54e4:	0000e180 	.word	0x0000e180
    54e8:	00006181 	.word	0x00006181
    54ec:	0000844d 	.word	0x0000844d

000054f0 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    54f0:	b538      	push	{r3, r4, r5, lr}
    54f2:	460d      	mov	r5, r1
	ASSERT(spi && io);
    54f4:	4604      	mov	r4, r0
    54f6:	b150      	cbz	r0, 550e <spi_m_dma_get_io_descriptor+0x1e>
    54f8:	1c08      	adds	r0, r1, #0
    54fa:	bf18      	it	ne
    54fc:	2001      	movne	r0, #1
    54fe:	22ae      	movs	r2, #174	; 0xae
    5500:	4904      	ldr	r1, [pc, #16]	; (5514 <spi_m_dma_get_io_descriptor+0x24>)
    5502:	4b05      	ldr	r3, [pc, #20]	; (5518 <spi_m_dma_get_io_descriptor+0x28>)
    5504:	4798      	blx	r3
	*io = &spi->io;
    5506:	3420      	adds	r4, #32
    5508:	602c      	str	r4, [r5, #0]

	return 0;
}
    550a:	2000      	movs	r0, #0
    550c:	bd38      	pop	{r3, r4, r5, pc}
    550e:	2000      	movs	r0, #0
    5510:	e7f5      	b.n	54fe <spi_m_dma_get_io_descriptor+0xe>
    5512:	bf00      	nop
    5514:	0000e180 	.word	0x0000e180
    5518:	00006181 	.word	0x00006181

0000551c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    551e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    5520:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    5522:	b12f      	cbz	r7, 5530 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    5524:	688d      	ldr	r5, [r1, #8]
    5526:	463c      	mov	r4, r7
    5528:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    552a:	f1c2 0e01 	rsb	lr, r2, #1
    552e:	e00b      	b.n	5548 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    5530:	4b0e      	ldr	r3, [pc, #56]	; (556c <timer_add_timer_task+0x50>)
    5532:	4798      	blx	r3
		return;
    5534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5536:	4473      	add	r3, lr
    5538:	68a0      	ldr	r0, [r4, #8]
    553a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    553c:	42ab      	cmp	r3, r5
    553e:	d20a      	bcs.n	5556 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    5540:	6823      	ldr	r3, [r4, #0]
    5542:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5544:	b153      	cbz	r3, 555c <timer_add_timer_task+0x40>
    5546:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    5548:	6863      	ldr	r3, [r4, #4]
    554a:	4293      	cmp	r3, r2
    554c:	d8f3      	bhi.n	5536 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    554e:	68a0      	ldr	r0, [r4, #8]
    5550:	4403      	add	r3, r0
    5552:	1a9b      	subs	r3, r3, r2
    5554:	e7f2      	b.n	553c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    5556:	42a7      	cmp	r7, r4
    5558:	d004      	beq.n	5564 <timer_add_timer_task+0x48>
    555a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    555c:	4620      	mov	r0, r4
    555e:	4b04      	ldr	r3, [pc, #16]	; (5570 <timer_add_timer_task+0x54>)
    5560:	4798      	blx	r3
    5562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    5564:	4660      	mov	r0, ip
    5566:	4b01      	ldr	r3, [pc, #4]	; (556c <timer_add_timer_task+0x50>)
    5568:	4798      	blx	r3
    556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    556c:	000061a9 	.word	0x000061a9
    5570:	000061d5 	.word	0x000061d5

00005574 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    5578:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    557a:	6907      	ldr	r7, [r0, #16]
    557c:	3701      	adds	r7, #1
    557e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    5580:	7e03      	ldrb	r3, [r0, #24]
    5582:	f013 0f01 	tst.w	r3, #1
    5586:	d113      	bne.n	55b0 <timer_process_counted+0x3c>
    5588:	7e03      	ldrb	r3, [r0, #24]
    558a:	f013 0f02 	tst.w	r3, #2
    558e:	d10f      	bne.n	55b0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    5590:	b354      	cbz	r4, 55e8 <timer_process_counted+0x74>
    5592:	6863      	ldr	r3, [r4, #4]
    5594:	1afb      	subs	r3, r7, r3
    5596:	68a2      	ldr	r2, [r4, #8]
    5598:	4293      	cmp	r3, r2
    559a:	d307      	bcc.n	55ac <timer_process_counted+0x38>
    559c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    559e:	f100 0814 	add.w	r8, r0, #20
    55a2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 55ec <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    55a6:	f8df a048 	ldr.w	sl, [pc, #72]	; 55f0 <timer_process_counted+0x7c>
    55aa:	e012      	b.n	55d2 <timer_process_counted+0x5e>
    55ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    55b0:	7e03      	ldrb	r3, [r0, #24]
    55b2:	f043 0302 	orr.w	r3, r3, #2
    55b6:	7603      	strb	r3, [r0, #24]
		return;
    55b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55bc:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    55be:	68e3      	ldr	r3, [r4, #12]
    55c0:	4620      	mov	r0, r4
    55c2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    55c4:	b185      	cbz	r5, 55e8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    55c6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    55c8:	686b      	ldr	r3, [r5, #4]
    55ca:	1afb      	subs	r3, r7, r3
    55cc:	68aa      	ldr	r2, [r5, #8]
    55ce:	4293      	cmp	r3, r2
    55d0:	d30a      	bcc.n	55e8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    55d2:	4640      	mov	r0, r8
    55d4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    55d6:	7c23      	ldrb	r3, [r4, #16]
    55d8:	2b01      	cmp	r3, #1
    55da:	d1ef      	bne.n	55bc <timer_process_counted+0x48>
			tmp->time_label = time;
    55dc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    55de:	463a      	mov	r2, r7
    55e0:	4621      	mov	r1, r4
    55e2:	4640      	mov	r0, r8
    55e4:	47d0      	blx	sl
    55e6:	e7e9      	b.n	55bc <timer_process_counted+0x48>
    55e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55ec:	0000621d 	.word	0x0000621d
    55f0:	0000551d 	.word	0x0000551d

000055f4 <timer_init>:
{
    55f4:	b570      	push	{r4, r5, r6, lr}
    55f6:	460e      	mov	r6, r1
    55f8:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    55fa:	4604      	mov	r4, r0
    55fc:	b190      	cbz	r0, 5624 <timer_init+0x30>
    55fe:	b199      	cbz	r1, 5628 <timer_init+0x34>
    5600:	1c10      	adds	r0, r2, #0
    5602:	bf18      	it	ne
    5604:	2001      	movne	r0, #1
    5606:	223b      	movs	r2, #59	; 0x3b
    5608:	4908      	ldr	r1, [pc, #32]	; (562c <timer_init+0x38>)
    560a:	4b09      	ldr	r3, [pc, #36]	; (5630 <timer_init+0x3c>)
    560c:	4798      	blx	r3
	descr->func = func;
    560e:	4620      	mov	r0, r4
    5610:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    5614:	682b      	ldr	r3, [r5, #0]
    5616:	4631      	mov	r1, r6
    5618:	4798      	blx	r3
	descr->time                           = 0;
    561a:	2000      	movs	r0, #0
    561c:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    561e:	4b05      	ldr	r3, [pc, #20]	; (5634 <timer_init+0x40>)
    5620:	6063      	str	r3, [r4, #4]
}
    5622:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    5624:	2000      	movs	r0, #0
    5626:	e7ee      	b.n	5606 <timer_init+0x12>
    5628:	2000      	movs	r0, #0
    562a:	e7ec      	b.n	5606 <timer_init+0x12>
    562c:	0000e19c 	.word	0x0000e19c
    5630:	00006181 	.word	0x00006181
    5634:	00005575 	.word	0x00005575

00005638 <timer_start>:
{
    5638:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    563a:	4604      	mov	r4, r0
    563c:	b198      	cbz	r0, 5666 <timer_start+0x2e>
    563e:	6800      	ldr	r0, [r0, #0]
    5640:	3000      	adds	r0, #0
    5642:	bf18      	it	ne
    5644:	2001      	movne	r0, #1
    5646:	2254      	movs	r2, #84	; 0x54
    5648:	4909      	ldr	r1, [pc, #36]	; (5670 <timer_start+0x38>)
    564a:	4b0a      	ldr	r3, [pc, #40]	; (5674 <timer_start+0x3c>)
    564c:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    564e:	1d25      	adds	r5, r4, #4
    5650:	6823      	ldr	r3, [r4, #0]
    5652:	699b      	ldr	r3, [r3, #24]
    5654:	4628      	mov	r0, r5
    5656:	4798      	blx	r3
    5658:	b938      	cbnz	r0, 566a <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    565a:	6823      	ldr	r3, [r4, #0]
    565c:	689b      	ldr	r3, [r3, #8]
    565e:	4628      	mov	r0, r5
    5660:	4798      	blx	r3
	return ERR_NONE;
    5662:	2000      	movs	r0, #0
    5664:	bd38      	pop	{r3, r4, r5, pc}
    5666:	2000      	movs	r0, #0
    5668:	e7ed      	b.n	5646 <timer_start+0xe>
		return ERR_DENIED;
    566a:	f06f 0010 	mvn.w	r0, #16
}
    566e:	bd38      	pop	{r3, r4, r5, pc}
    5670:	0000e19c 	.word	0x0000e19c
    5674:	00006181 	.word	0x00006181

00005678 <timer_add_task>:
{
    5678:	b570      	push	{r4, r5, r6, lr}
    567a:	b082      	sub	sp, #8
    567c:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    567e:	4604      	mov	r4, r0
    5680:	b328      	cbz	r0, 56ce <timer_add_task+0x56>
    5682:	b331      	cbz	r1, 56d2 <timer_add_task+0x5a>
    5684:	6800      	ldr	r0, [r0, #0]
    5686:	3000      	adds	r0, #0
    5688:	bf18      	it	ne
    568a:	2001      	movne	r0, #1
    568c:	227b      	movs	r2, #123	; 0x7b
    568e:	4920      	ldr	r1, [pc, #128]	; (5710 <timer_add_task+0x98>)
    5690:	4b20      	ldr	r3, [pc, #128]	; (5714 <timer_add_task+0x9c>)
    5692:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5694:	7f23      	ldrb	r3, [r4, #28]
    5696:	f043 0301 	orr.w	r3, r3, #1
    569a:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    569c:	f104 0618 	add.w	r6, r4, #24
    56a0:	4629      	mov	r1, r5
    56a2:	4630      	mov	r0, r6
    56a4:	4b1c      	ldr	r3, [pc, #112]	; (5718 <timer_add_task+0xa0>)
    56a6:	4798      	blx	r3
    56a8:	b9a8      	cbnz	r0, 56d6 <timer_add_task+0x5e>
	task->time_label = descr->time;
    56aa:	6963      	ldr	r3, [r4, #20]
    56ac:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    56ae:	6962      	ldr	r2, [r4, #20]
    56b0:	4629      	mov	r1, r5
    56b2:	4630      	mov	r0, r6
    56b4:	4b19      	ldr	r3, [pc, #100]	; (571c <timer_add_task+0xa4>)
    56b6:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    56b8:	7f23      	ldrb	r3, [r4, #28]
    56ba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    56be:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    56c0:	7f23      	ldrb	r3, [r4, #28]
    56c2:	f013 0f02 	tst.w	r3, #2
    56c6:	d112      	bne.n	56ee <timer_add_task+0x76>
	return ERR_NONE;
    56c8:	2000      	movs	r0, #0
}
    56ca:	b002      	add	sp, #8
    56cc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    56ce:	2000      	movs	r0, #0
    56d0:	e7dc      	b.n	568c <timer_add_task+0x14>
    56d2:	2000      	movs	r0, #0
    56d4:	e7da      	b.n	568c <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    56d6:	7f23      	ldrb	r3, [r4, #28]
    56d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    56dc:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    56de:	2280      	movs	r2, #128	; 0x80
    56e0:	490b      	ldr	r1, [pc, #44]	; (5710 <timer_add_task+0x98>)
    56e2:	2000      	movs	r0, #0
    56e4:	4b0b      	ldr	r3, [pc, #44]	; (5714 <timer_add_task+0x9c>)
    56e6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    56e8:	f06f 0011 	mvn.w	r0, #17
    56ec:	e7ed      	b.n	56ca <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    56ee:	a801      	add	r0, sp, #4
    56f0:	4b0b      	ldr	r3, [pc, #44]	; (5720 <timer_add_task+0xa8>)
    56f2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    56f4:	7f23      	ldrb	r3, [r4, #28]
    56f6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    56fa:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    56fc:	6823      	ldr	r3, [r4, #0]
    56fe:	69db      	ldr	r3, [r3, #28]
    5700:	1d20      	adds	r0, r4, #4
    5702:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5704:	a801      	add	r0, sp, #4
    5706:	4b07      	ldr	r3, [pc, #28]	; (5724 <timer_add_task+0xac>)
    5708:	4798      	blx	r3
	return ERR_NONE;
    570a:	2000      	movs	r0, #0
    570c:	e7dd      	b.n	56ca <timer_add_task+0x52>
    570e:	bf00      	nop
    5710:	0000e19c 	.word	0x0000e19c
    5714:	00006181 	.word	0x00006181
    5718:	00006187 	.word	0x00006187
    571c:	0000551d 	.word	0x0000551d
    5720:	00004d8d 	.word	0x00004d8d
    5724:	00004d9b 	.word	0x00004d9b

00005728 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    5728:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    572a:	2300      	movs	r3, #0
    572c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    572e:	69c3      	ldr	r3, [r0, #28]
    5730:	b11b      	cbz	r3, 573a <usart_transmission_complete+0x12>
    5732:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    5736:	4610      	mov	r0, r2
    5738:	4798      	blx	r3
    573a:	bd08      	pop	{r3, pc}

0000573c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    573c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    573e:	2300      	movs	r3, #0
    5740:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    5742:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5744:	b11b      	cbz	r3, 574e <usart_error+0x12>
    5746:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    574a:	4610      	mov	r0, r2
    574c:	4798      	blx	r3
    574e:	bd08      	pop	{r3, pc}

00005750 <usart_fill_rx_buffer>:
{
    5750:	b538      	push	{r3, r4, r5, lr}
    5752:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    5754:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    5758:	302c      	adds	r0, #44	; 0x2c
    575a:	4b03      	ldr	r3, [pc, #12]	; (5768 <usart_fill_rx_buffer+0x18>)
    575c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    575e:	6a23      	ldr	r3, [r4, #32]
    5760:	b10b      	cbz	r3, 5766 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    5762:	4628      	mov	r0, r5
    5764:	4798      	blx	r3
    5766:	bd38      	pop	{r3, r4, r5, pc}
    5768:	000062bd 	.word	0x000062bd

0000576c <usart_async_write>:
{
    576c:	b570      	push	{r4, r5, r6, lr}
    576e:	460e      	mov	r6, r1
    5770:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    5772:	4604      	mov	r4, r0
    5774:	b1e0      	cbz	r0, 57b0 <usart_async_write+0x44>
    5776:	b1e9      	cbz	r1, 57b4 <usart_async_write+0x48>
    5778:	1c10      	adds	r0, r2, #0
    577a:	bf18      	it	ne
    577c:	2001      	movne	r0, #1
    577e:	f240 123b 	movw	r2, #315	; 0x13b
    5782:	490f      	ldr	r1, [pc, #60]	; (57c0 <usart_async_write+0x54>)
    5784:	4b0f      	ldr	r3, [pc, #60]	; (57c4 <usart_async_write+0x58>)
    5786:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    5788:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    578c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    5790:	429a      	cmp	r2, r3
    5792:	d111      	bne.n	57b8 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    5794:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    5796:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    579a:	2300      	movs	r3, #0
    579c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    57a0:	2301      	movs	r3, #1
    57a2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    57a4:	f104 0008 	add.w	r0, r4, #8
    57a8:	4b07      	ldr	r3, [pc, #28]	; (57c8 <usart_async_write+0x5c>)
    57aa:	4798      	blx	r3
	return (int32_t)length;
    57ac:	4628      	mov	r0, r5
    57ae:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    57b0:	2000      	movs	r0, #0
    57b2:	e7e4      	b.n	577e <usart_async_write+0x12>
    57b4:	2000      	movs	r0, #0
    57b6:	e7e2      	b.n	577e <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    57b8:	f06f 001b 	mvn.w	r0, #27
}
    57bc:	bd70      	pop	{r4, r5, r6, pc}
    57be:	bf00      	nop
    57c0:	0000e1b4 	.word	0x0000e1b4
    57c4:	00006181 	.word	0x00006181
    57c8:	00007a67 	.word	0x00007a67

000057cc <usart_process_byte_sent>:
{
    57cc:	b510      	push	{r4, lr}
    57ce:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    57d0:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    57d2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    57d6:	429a      	cmp	r2, r3
    57d8:	d009      	beq.n	57ee <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    57da:	6c02      	ldr	r2, [r0, #64]	; 0x40
    57dc:	1c59      	adds	r1, r3, #1
    57de:	8781      	strh	r1, [r0, #60]	; 0x3c
    57e0:	5cd1      	ldrb	r1, [r2, r3]
    57e2:	4b04      	ldr	r3, [pc, #16]	; (57f4 <usart_process_byte_sent+0x28>)
    57e4:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    57e6:	4620      	mov	r0, r4
    57e8:	4b03      	ldr	r3, [pc, #12]	; (57f8 <usart_process_byte_sent+0x2c>)
    57ea:	4798      	blx	r3
    57ec:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    57ee:	4b03      	ldr	r3, [pc, #12]	; (57fc <usart_process_byte_sent+0x30>)
    57f0:	4798      	blx	r3
    57f2:	bd10      	pop	{r4, pc}
    57f4:	00007a3b 	.word	0x00007a3b
    57f8:	00007a67 	.word	0x00007a67
    57fc:	00007a6f 	.word	0x00007a6f

00005800 <usart_async_read>:
{
    5800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5804:	b082      	sub	sp, #8
    5806:	460f      	mov	r7, r1
    5808:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    580a:	4606      	mov	r6, r0
    580c:	b1a0      	cbz	r0, 5838 <usart_async_read+0x38>
    580e:	b199      	cbz	r1, 5838 <usart_async_read+0x38>
    5810:	2a00      	cmp	r2, #0
    5812:	d12d      	bne.n	5870 <usart_async_read+0x70>
    5814:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5818:	4929      	ldr	r1, [pc, #164]	; (58c0 <usart_async_read+0xc0>)
    581a:	2000      	movs	r0, #0
    581c:	4b29      	ldr	r3, [pc, #164]	; (58c4 <usart_async_read+0xc4>)
    581e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5820:	a801      	add	r0, sp, #4
    5822:	4b29      	ldr	r3, [pc, #164]	; (58c8 <usart_async_read+0xc8>)
    5824:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5826:	f106 0034 	add.w	r0, r6, #52	; 0x34
    582a:	4b28      	ldr	r3, [pc, #160]	; (58cc <usart_async_read+0xcc>)
    582c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    582e:	a801      	add	r0, sp, #4
    5830:	4b27      	ldr	r3, [pc, #156]	; (58d0 <usart_async_read+0xd0>)
    5832:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5834:	2500      	movs	r5, #0
	return (int32_t)was_read;
    5836:	e03e      	b.n	58b6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5838:	f44f 72ac 	mov.w	r2, #344	; 0x158
    583c:	4920      	ldr	r1, [pc, #128]	; (58c0 <usart_async_read+0xc0>)
    583e:	2000      	movs	r0, #0
    5840:	4b20      	ldr	r3, [pc, #128]	; (58c4 <usart_async_read+0xc4>)
    5842:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5844:	a801      	add	r0, sp, #4
    5846:	4b20      	ldr	r3, [pc, #128]	; (58c8 <usart_async_read+0xc8>)
    5848:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    584a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    584e:	4650      	mov	r0, sl
    5850:	4b1e      	ldr	r3, [pc, #120]	; (58cc <usart_async_read+0xcc>)
    5852:	4798      	blx	r3
    5854:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    5856:	a801      	add	r0, sp, #4
    5858:	4b1d      	ldr	r3, [pc, #116]	; (58d0 <usart_async_read+0xd0>)
    585a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    585c:	f1b9 0f00 	cmp.w	r9, #0
    5860:	d004      	beq.n	586c <usart_async_read+0x6c>
    5862:	f1b8 0f00 	cmp.w	r8, #0
    5866:	d119      	bne.n	589c <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    5868:	2500      	movs	r5, #0
    586a:	e024      	b.n	58b6 <usart_async_read+0xb6>
    586c:	2500      	movs	r5, #0
    586e:	e022      	b.n	58b6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5870:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5874:	4912      	ldr	r1, [pc, #72]	; (58c0 <usart_async_read+0xc0>)
    5876:	2001      	movs	r0, #1
    5878:	4b12      	ldr	r3, [pc, #72]	; (58c4 <usart_async_read+0xc4>)
    587a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    587c:	a801      	add	r0, sp, #4
    587e:	4b12      	ldr	r3, [pc, #72]	; (58c8 <usart_async_read+0xc8>)
    5880:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5882:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    5886:	4650      	mov	r0, sl
    5888:	4b10      	ldr	r3, [pc, #64]	; (58cc <usart_async_read+0xcc>)
    588a:	4798      	blx	r3
    588c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    588e:	a801      	add	r0, sp, #4
    5890:	4b0f      	ldr	r3, [pc, #60]	; (58d0 <usart_async_read+0xd0>)
    5892:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5894:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    5896:	f1b9 0f00 	cmp.w	r9, #0
    589a:	d00c      	beq.n	58b6 <usart_async_read+0xb6>
{
    589c:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    589e:	4e0d      	ldr	r6, [pc, #52]	; (58d4 <usart_async_read+0xd4>)
    58a0:	1c60      	adds	r0, r4, #1
    58a2:	b285      	uxth	r5, r0
    58a4:	1939      	adds	r1, r7, r4
    58a6:	4650      	mov	r0, sl
    58a8:	47b0      	blx	r6
    58aa:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    58ac:	454c      	cmp	r4, r9
    58ae:	d202      	bcs.n	58b6 <usart_async_read+0xb6>
    58b0:	b2a3      	uxth	r3, r4
    58b2:	4598      	cmp	r8, r3
    58b4:	d8f4      	bhi.n	58a0 <usart_async_read+0xa0>
}
    58b6:	4628      	mov	r0, r5
    58b8:	b002      	add	sp, #8
    58ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58be:	bf00      	nop
    58c0:	0000e1b4 	.word	0x0000e1b4
    58c4:	00006181 	.word	0x00006181
    58c8:	00004d8d 	.word	0x00004d8d
    58cc:	000062fd 	.word	0x000062fd
    58d0:	00004d9b 	.word	0x00004d9b
    58d4:	00006279 	.word	0x00006279

000058d8 <usart_async_init>:
{
    58d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58da:	460d      	mov	r5, r1
    58dc:	4616      	mov	r6, r2
    58de:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    58e0:	4604      	mov	r4, r0
    58e2:	b320      	cbz	r0, 592e <usart_async_init+0x56>
    58e4:	b329      	cbz	r1, 5932 <usart_async_init+0x5a>
    58e6:	b332      	cbz	r2, 5936 <usart_async_init+0x5e>
    58e8:	1c18      	adds	r0, r3, #0
    58ea:	bf18      	it	ne
    58ec:	2001      	movne	r0, #1
    58ee:	223a      	movs	r2, #58	; 0x3a
    58f0:	4913      	ldr	r1, [pc, #76]	; (5940 <usart_async_init+0x68>)
    58f2:	4b14      	ldr	r3, [pc, #80]	; (5944 <usart_async_init+0x6c>)
    58f4:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    58f6:	463a      	mov	r2, r7
    58f8:	4631      	mov	r1, r6
    58fa:	f104 0034 	add.w	r0, r4, #52	; 0x34
    58fe:	4b12      	ldr	r3, [pc, #72]	; (5948 <usart_async_init+0x70>)
    5900:	4798      	blx	r3
    5902:	b9d0      	cbnz	r0, 593a <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    5904:	4629      	mov	r1, r5
    5906:	f104 0008 	add.w	r0, r4, #8
    590a:	4b10      	ldr	r3, [pc, #64]	; (594c <usart_async_init+0x74>)
    590c:	4798      	blx	r3
	if (init_status) {
    590e:	4603      	mov	r3, r0
    5910:	b958      	cbnz	r0, 592a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    5912:	4a0f      	ldr	r2, [pc, #60]	; (5950 <usart_async_init+0x78>)
    5914:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    5916:	4a0f      	ldr	r2, [pc, #60]	; (5954 <usart_async_init+0x7c>)
    5918:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    591a:	4a0f      	ldr	r2, [pc, #60]	; (5958 <usart_async_init+0x80>)
    591c:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    591e:	4a0f      	ldr	r2, [pc, #60]	; (595c <usart_async_init+0x84>)
    5920:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    5922:	4a0f      	ldr	r2, [pc, #60]	; (5960 <usart_async_init+0x88>)
    5924:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    5926:	4a0f      	ldr	r2, [pc, #60]	; (5964 <usart_async_init+0x8c>)
    5928:	6162      	str	r2, [r4, #20]
}
    592a:	4618      	mov	r0, r3
    592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    592e:	2000      	movs	r0, #0
    5930:	e7dd      	b.n	58ee <usart_async_init+0x16>
    5932:	2000      	movs	r0, #0
    5934:	e7db      	b.n	58ee <usart_async_init+0x16>
    5936:	2000      	movs	r0, #0
    5938:	e7d9      	b.n	58ee <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    593a:	f06f 030c 	mvn.w	r3, #12
    593e:	e7f4      	b.n	592a <usart_async_init+0x52>
    5940:	0000e1b4 	.word	0x0000e1b4
    5944:	00006181 	.word	0x00006181
    5948:	00006229 	.word	0x00006229
    594c:	0000796d 	.word	0x0000796d
    5950:	00005801 	.word	0x00005801
    5954:	0000576d 	.word	0x0000576d
    5958:	000057cd 	.word	0x000057cd
    595c:	00005751 	.word	0x00005751
    5960:	00005729 	.word	0x00005729
    5964:	0000573d 	.word	0x0000573d

00005968 <usart_async_enable>:
{
    5968:	b510      	push	{r4, lr}
	ASSERT(descr);
    596a:	4604      	mov	r4, r0
    596c:	2261      	movs	r2, #97	; 0x61
    596e:	4906      	ldr	r1, [pc, #24]	; (5988 <usart_async_enable+0x20>)
    5970:	3000      	adds	r0, #0
    5972:	bf18      	it	ne
    5974:	2001      	movne	r0, #1
    5976:	4b05      	ldr	r3, [pc, #20]	; (598c <usart_async_enable+0x24>)
    5978:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    597a:	f104 0008 	add.w	r0, r4, #8
    597e:	4b04      	ldr	r3, [pc, #16]	; (5990 <usart_async_enable+0x28>)
    5980:	4798      	blx	r3
}
    5982:	2000      	movs	r0, #0
    5984:	bd10      	pop	{r4, pc}
    5986:	bf00      	nop
    5988:	0000e1b4 	.word	0x0000e1b4
    598c:	00006181 	.word	0x00006181
    5990:	000079fd 	.word	0x000079fd

00005994 <usart_async_disable>:
{
    5994:	b510      	push	{r4, lr}
	ASSERT(descr);
    5996:	4604      	mov	r4, r0
    5998:	226c      	movs	r2, #108	; 0x6c
    599a:	4906      	ldr	r1, [pc, #24]	; (59b4 <usart_async_disable+0x20>)
    599c:	3000      	adds	r0, #0
    599e:	bf18      	it	ne
    59a0:	2001      	movne	r0, #1
    59a2:	4b05      	ldr	r3, [pc, #20]	; (59b8 <usart_async_disable+0x24>)
    59a4:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    59a6:	f104 0008 	add.w	r0, r4, #8
    59aa:	4b04      	ldr	r3, [pc, #16]	; (59bc <usart_async_disable+0x28>)
    59ac:	4798      	blx	r3
}
    59ae:	2000      	movs	r0, #0
    59b0:	bd10      	pop	{r4, pc}
    59b2:	bf00      	nop
    59b4:	0000e1b4 	.word	0x0000e1b4
    59b8:	00006181 	.word	0x00006181
    59bc:	00007a11 	.word	0x00007a11

000059c0 <usart_async_get_io_descriptor>:
{
    59c0:	b538      	push	{r3, r4, r5, lr}
    59c2:	460c      	mov	r4, r1
	ASSERT(descr && io);
    59c4:	4605      	mov	r5, r0
    59c6:	b148      	cbz	r0, 59dc <usart_async_get_io_descriptor+0x1c>
    59c8:	1c08      	adds	r0, r1, #0
    59ca:	bf18      	it	ne
    59cc:	2001      	movne	r0, #1
    59ce:	2277      	movs	r2, #119	; 0x77
    59d0:	4903      	ldr	r1, [pc, #12]	; (59e0 <usart_async_get_io_descriptor+0x20>)
    59d2:	4b04      	ldr	r3, [pc, #16]	; (59e4 <usart_async_get_io_descriptor+0x24>)
    59d4:	4798      	blx	r3
	*io = &descr->io;
    59d6:	6025      	str	r5, [r4, #0]
}
    59d8:	2000      	movs	r0, #0
    59da:	bd38      	pop	{r3, r4, r5, pc}
    59dc:	2000      	movs	r0, #0
    59de:	e7f6      	b.n	59ce <usart_async_get_io_descriptor+0xe>
    59e0:	0000e1b4 	.word	0x0000e1b4
    59e4:	00006181 	.word	0x00006181

000059e8 <usart_async_register_callback>:
{
    59e8:	b570      	push	{r4, r5, r6, lr}
    59ea:	460c      	mov	r4, r1
    59ec:	4616      	mov	r6, r2
	ASSERT(descr);
    59ee:	4605      	mov	r5, r0
    59f0:	2283      	movs	r2, #131	; 0x83
    59f2:	4917      	ldr	r1, [pc, #92]	; (5a50 <usart_async_register_callback+0x68>)
    59f4:	3000      	adds	r0, #0
    59f6:	bf18      	it	ne
    59f8:	2001      	movne	r0, #1
    59fa:	4b16      	ldr	r3, [pc, #88]	; (5a54 <usart_async_register_callback+0x6c>)
    59fc:	4798      	blx	r3
	switch (type) {
    59fe:	2c01      	cmp	r4, #1
    5a00:	d010      	beq.n	5a24 <usart_async_register_callback+0x3c>
    5a02:	b124      	cbz	r4, 5a0e <usart_async_register_callback+0x26>
    5a04:	2c02      	cmp	r4, #2
    5a06:	d018      	beq.n	5a3a <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    5a08:	f06f 000c 	mvn.w	r0, #12
}
    5a0c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    5a0e:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    5a10:	1c32      	adds	r2, r6, #0
    5a12:	bf18      	it	ne
    5a14:	2201      	movne	r2, #1
    5a16:	2101      	movs	r1, #1
    5a18:	f105 0008 	add.w	r0, r5, #8
    5a1c:	4b0e      	ldr	r3, [pc, #56]	; (5a58 <usart_async_register_callback+0x70>)
    5a1e:	4798      	blx	r3
	return ERR_NONE;
    5a20:	2000      	movs	r0, #0
		break;
    5a22:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    5a24:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    5a26:	1c32      	adds	r2, r6, #0
    5a28:	bf18      	it	ne
    5a2a:	2201      	movne	r2, #1
    5a2c:	2102      	movs	r1, #2
    5a2e:	f105 0008 	add.w	r0, r5, #8
    5a32:	4b09      	ldr	r3, [pc, #36]	; (5a58 <usart_async_register_callback+0x70>)
    5a34:	4798      	blx	r3
	return ERR_NONE;
    5a36:	2000      	movs	r0, #0
		break;
    5a38:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    5a3a:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5a3c:	1c32      	adds	r2, r6, #0
    5a3e:	bf18      	it	ne
    5a40:	2201      	movne	r2, #1
    5a42:	2103      	movs	r1, #3
    5a44:	f105 0008 	add.w	r0, r5, #8
    5a48:	4b03      	ldr	r3, [pc, #12]	; (5a58 <usart_async_register_callback+0x70>)
    5a4a:	4798      	blx	r3
	return ERR_NONE;
    5a4c:	2000      	movs	r0, #0
		break;
    5a4e:	bd70      	pop	{r4, r5, r6, pc}
    5a50:	0000e1b4 	.word	0x0000e1b4
    5a54:	00006181 	.word	0x00006181
    5a58:	00007a79 	.word	0x00007a79

00005a5c <usart_async_set_parity>:
{
    5a5c:	b538      	push	{r3, r4, r5, lr}
    5a5e:	460d      	mov	r5, r1
	ASSERT(descr);
    5a60:	4604      	mov	r4, r0
    5a62:	22cb      	movs	r2, #203	; 0xcb
    5a64:	4906      	ldr	r1, [pc, #24]	; (5a80 <usart_async_set_parity+0x24>)
    5a66:	3000      	adds	r0, #0
    5a68:	bf18      	it	ne
    5a6a:	2001      	movne	r0, #1
    5a6c:	4b05      	ldr	r3, [pc, #20]	; (5a84 <usart_async_set_parity+0x28>)
    5a6e:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    5a70:	4629      	mov	r1, r5
    5a72:	f104 0008 	add.w	r0, r4, #8
    5a76:	4b04      	ldr	r3, [pc, #16]	; (5a88 <usart_async_set_parity+0x2c>)
    5a78:	4798      	blx	r3
}
    5a7a:	2000      	movs	r0, #0
    5a7c:	bd38      	pop	{r3, r4, r5, pc}
    5a7e:	bf00      	nop
    5a80:	0000e1b4 	.word	0x0000e1b4
    5a84:	00006181 	.word	0x00006181
    5a88:	00007a25 	.word	0x00007a25

00005a8c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a90:	460f      	mov	r7, r1
    5a92:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    5a94:	4604      	mov	r4, r0
    5a96:	b328      	cbz	r0, 5ae4 <usart_sync_write+0x58>
    5a98:	b331      	cbz	r1, 5ae8 <usart_sync_write+0x5c>
    5a9a:	1c10      	adds	r0, r2, #0
    5a9c:	bf18      	it	ne
    5a9e:	2001      	movne	r0, #1
    5aa0:	22f1      	movs	r2, #241	; 0xf1
    5aa2:	4912      	ldr	r1, [pc, #72]	; (5aec <usart_sync_write+0x60>)
    5aa4:	4b12      	ldr	r3, [pc, #72]	; (5af0 <usart_sync_write+0x64>)
    5aa6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    5aa8:	3408      	adds	r4, #8
    5aaa:	4d12      	ldr	r5, [pc, #72]	; (5af4 <usart_sync_write+0x68>)
    5aac:	4620      	mov	r0, r4
    5aae:	47a8      	blx	r5
    5ab0:	2800      	cmp	r0, #0
    5ab2:	d0fb      	beq.n	5aac <usart_sync_write+0x20>
    5ab4:	3f01      	subs	r7, #1
    5ab6:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5ab8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 5afc <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    5abc:	4d0d      	ldr	r5, [pc, #52]	; (5af4 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5abe:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5ac2:	4620      	mov	r0, r4
    5ac4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    5ac6:	4620      	mov	r0, r4
    5ac8:	47a8      	blx	r5
    5aca:	2800      	cmp	r0, #0
    5acc:	d0fb      	beq.n	5ac6 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    5ace:	3601      	adds	r6, #1
    5ad0:	4546      	cmp	r6, r8
    5ad2:	d3f4      	bcc.n	5abe <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    5ad4:	4d08      	ldr	r5, [pc, #32]	; (5af8 <usart_sync_write+0x6c>)
    5ad6:	4620      	mov	r0, r4
    5ad8:	47a8      	blx	r5
    5ada:	2800      	cmp	r0, #0
    5adc:	d0fb      	beq.n	5ad6 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    5ade:	4630      	mov	r0, r6
    5ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    5ae4:	2000      	movs	r0, #0
    5ae6:	e7db      	b.n	5aa0 <usart_sync_write+0x14>
    5ae8:	2000      	movs	r0, #0
    5aea:	e7d9      	b.n	5aa0 <usart_sync_write+0x14>
    5aec:	0000e1d4 	.word	0x0000e1d4
    5af0:	00006181 	.word	0x00006181
    5af4:	00007a49 	.word	0x00007a49
    5af8:	00007a53 	.word	0x00007a53
    5afc:	00007a35 	.word	0x00007a35

00005b00 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    5b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b04:	460f      	mov	r7, r1
    5b06:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    5b08:	4604      	mov	r4, r0
    5b0a:	b1e0      	cbz	r0, 5b46 <usart_sync_read+0x46>
    5b0c:	b1e9      	cbz	r1, 5b4a <usart_sync_read+0x4a>
    5b0e:	1c10      	adds	r0, r2, #0
    5b10:	bf18      	it	ne
    5b12:	2001      	movne	r0, #1
    5b14:	f44f 7286 	mov.w	r2, #268	; 0x10c
    5b18:	490d      	ldr	r1, [pc, #52]	; (5b50 <usart_sync_read+0x50>)
    5b1a:	4b0e      	ldr	r3, [pc, #56]	; (5b54 <usart_sync_read+0x54>)
    5b1c:	4798      	blx	r3
    5b1e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    5b20:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    5b22:	3408      	adds	r4, #8
    5b24:	4d0c      	ldr	r5, [pc, #48]	; (5b58 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    5b26:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5b5c <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    5b2a:	4620      	mov	r0, r4
    5b2c:	47a8      	blx	r5
    5b2e:	2800      	cmp	r0, #0
    5b30:	d0fb      	beq.n	5b2a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    5b32:	4620      	mov	r0, r4
    5b34:	47c8      	blx	r9
    5b36:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    5b3a:	3601      	adds	r6, #1
    5b3c:	4546      	cmp	r6, r8
    5b3e:	d3f4      	bcc.n	5b2a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    5b40:	4630      	mov	r0, r6
    5b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    5b46:	2000      	movs	r0, #0
    5b48:	e7e4      	b.n	5b14 <usart_sync_read+0x14>
    5b4a:	2000      	movs	r0, #0
    5b4c:	e7e2      	b.n	5b14 <usart_sync_read+0x14>
    5b4e:	bf00      	nop
    5b50:	0000e1d4 	.word	0x0000e1d4
    5b54:	00006181 	.word	0x00006181
    5b58:	00007a5d 	.word	0x00007a5d
    5b5c:	00007a41 	.word	0x00007a41

00005b60 <usart_sync_init>:
{
    5b60:	b538      	push	{r3, r4, r5, lr}
    5b62:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    5b64:	4604      	mov	r4, r0
    5b66:	b198      	cbz	r0, 5b90 <usart_sync_init+0x30>
    5b68:	1c08      	adds	r0, r1, #0
    5b6a:	bf18      	it	ne
    5b6c:	2001      	movne	r0, #1
    5b6e:	2234      	movs	r2, #52	; 0x34
    5b70:	4908      	ldr	r1, [pc, #32]	; (5b94 <usart_sync_init+0x34>)
    5b72:	4b09      	ldr	r3, [pc, #36]	; (5b98 <usart_sync_init+0x38>)
    5b74:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    5b76:	4629      	mov	r1, r5
    5b78:	f104 0008 	add.w	r0, r4, #8
    5b7c:	4b07      	ldr	r3, [pc, #28]	; (5b9c <usart_sync_init+0x3c>)
    5b7e:	4798      	blx	r3
	if (init_status) {
    5b80:	4603      	mov	r3, r0
    5b82:	b918      	cbnz	r0, 5b8c <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    5b84:	4a06      	ldr	r2, [pc, #24]	; (5ba0 <usart_sync_init+0x40>)
    5b86:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    5b88:	4a06      	ldr	r2, [pc, #24]	; (5ba4 <usart_sync_init+0x44>)
    5b8a:	6022      	str	r2, [r4, #0]
}
    5b8c:	4618      	mov	r0, r3
    5b8e:	bd38      	pop	{r3, r4, r5, pc}
    5b90:	2000      	movs	r0, #0
    5b92:	e7ec      	b.n	5b6e <usart_sync_init+0xe>
    5b94:	0000e1d4 	.word	0x0000e1d4
    5b98:	00006181 	.word	0x00006181
    5b9c:	00007941 	.word	0x00007941
    5ba0:	00005b01 	.word	0x00005b01
    5ba4:	00005a8d 	.word	0x00005a8d

00005ba8 <usart_sync_enable>:
{
    5ba8:	b510      	push	{r4, lr}
	ASSERT(descr);
    5baa:	4604      	mov	r4, r0
    5bac:	2253      	movs	r2, #83	; 0x53
    5bae:	4906      	ldr	r1, [pc, #24]	; (5bc8 <usart_sync_enable+0x20>)
    5bb0:	3000      	adds	r0, #0
    5bb2:	bf18      	it	ne
    5bb4:	2001      	movne	r0, #1
    5bb6:	4b05      	ldr	r3, [pc, #20]	; (5bcc <usart_sync_enable+0x24>)
    5bb8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    5bba:	f104 0008 	add.w	r0, r4, #8
    5bbe:	4b04      	ldr	r3, [pc, #16]	; (5bd0 <usart_sync_enable+0x28>)
    5bc0:	4798      	blx	r3
}
    5bc2:	2000      	movs	r0, #0
    5bc4:	bd10      	pop	{r4, pc}
    5bc6:	bf00      	nop
    5bc8:	0000e1d4 	.word	0x0000e1d4
    5bcc:	00006181 	.word	0x00006181
    5bd0:	000079e9 	.word	0x000079e9

00005bd4 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5bd4:	4b0f      	ldr	r3, [pc, #60]	; (5c14 <_usb_d_find_ep+0x40>)
    5bd6:	7859      	ldrb	r1, [r3, #1]
    5bd8:	4288      	cmp	r0, r1
    5bda:	d018      	beq.n	5c0e <_usb_d_find_ep+0x3a>
{
    5bdc:	b430      	push	{r4, r5}
    5bde:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5be0:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    5be2:	f000 050f 	and.w	r5, r0, #15
    5be6:	e007      	b.n	5bf8 <_usb_d_find_ep+0x24>
    5be8:	3301      	adds	r3, #1
    5bea:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5bec:	2b0d      	cmp	r3, #13
    5bee:	d009      	beq.n	5c04 <_usb_d_find_ep+0x30>
    5bf0:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5bf2:	7851      	ldrb	r1, [r2, #1]
    5bf4:	4281      	cmp	r1, r0
    5bf6:	d007      	beq.n	5c08 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    5bf8:	7814      	ldrb	r4, [r2, #0]
    5bfa:	2c00      	cmp	r4, #0
    5bfc:	d1f4      	bne.n	5be8 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    5bfe:	428d      	cmp	r5, r1
    5c00:	d1f2      	bne.n	5be8 <_usb_d_find_ep+0x14>
    5c02:	e001      	b.n	5c08 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    5c04:	f04f 33ff 	mov.w	r3, #4294967295
}
    5c08:	4618      	mov	r0, r3
    5c0a:	bc30      	pop	{r4, r5}
    5c0c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5c0e:	2300      	movs	r3, #0
}
    5c10:	4618      	mov	r0, r3
    5c12:	4770      	bx	lr
    5c14:	2000064c 	.word	0x2000064c

00005c18 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    5c18:	2000      	movs	r0, #0
    5c1a:	4770      	bx	lr

00005c1c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5c1c:	b538      	push	{r3, r4, r5, lr}
    5c1e:	4604      	mov	r4, r0
    5c20:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    5c22:	4b09      	ldr	r3, [pc, #36]	; (5c48 <usb_d_cb_trans_more+0x2c>)
    5c24:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5c26:	4b09      	ldr	r3, [pc, #36]	; (5c4c <usb_d_cb_trans_more+0x30>)
    5c28:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5c2c:	789b      	ldrb	r3, [r3, #2]
    5c2e:	2b03      	cmp	r3, #3
    5c30:	d001      	beq.n	5c36 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    5c32:	2000      	movs	r0, #0
}
    5c34:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    5c36:	4b05      	ldr	r3, [pc, #20]	; (5c4c <usb_d_cb_trans_more+0x30>)
    5c38:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5c3c:	6983      	ldr	r3, [r0, #24]
    5c3e:	4629      	mov	r1, r5
    5c40:	4620      	mov	r0, r4
    5c42:	4798      	blx	r3
    5c44:	bd38      	pop	{r3, r4, r5, pc}
    5c46:	bf00      	nop
    5c48:	00005bd5 	.word	0x00005bd5
    5c4c:	2000064c 	.word	0x2000064c

00005c50 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c52:	b085      	sub	sp, #20
    5c54:	4606      	mov	r6, r0
    5c56:	460d      	mov	r5, r1
    5c58:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5c5a:	4b4d      	ldr	r3, [pc, #308]	; (5d90 <_usb_d_cb_trans_done+0x140>)
    5c5c:	4798      	blx	r3
    5c5e:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    5c60:	2d00      	cmp	r5, #0
    5c62:	d15b      	bne.n	5d1c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5c64:	4a4b      	ldr	r2, [pc, #300]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5c66:	0143      	lsls	r3, r0, #5
    5c68:	18d1      	adds	r1, r2, r3
    5c6a:	2000      	movs	r0, #0
    5c6c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c6e:	5cd3      	ldrb	r3, [r2, r3]
    5c70:	b173      	cbz	r3, 5c90 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5c72:	4b48      	ldr	r3, [pc, #288]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5c74:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5c78:	2201      	movs	r2, #1
    5c7a:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5c7c:	4845      	ldr	r0, [pc, #276]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5c7e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5c82:	69c3      	ldr	r3, [r0, #28]
    5c84:	463a      	mov	r2, r7
    5c86:	78c1      	ldrb	r1, [r0, #3]
    5c88:	4630      	mov	r0, r6
    5c8a:	4798      	blx	r3
}
    5c8c:	b005      	add	sp, #20
    5c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    5c90:	788b      	ldrb	r3, [r1, #2]
    5c92:	2b03      	cmp	r3, #3
    5c94:	d00b      	beq.n	5cae <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5c96:	483f      	ldr	r0, [pc, #252]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5c98:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    5c9c:	4614      	mov	r4, r2
    5c9e:	69d3      	ldr	r3, [r2, #28]
    5ca0:	320c      	adds	r2, #12
    5ca2:	2100      	movs	r1, #0
    5ca4:	7860      	ldrb	r0, [r4, #1]
    5ca6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5ca8:	2302      	movs	r3, #2
    5caa:	70a3      	strb	r3, [r4, #2]
    5cac:	e7ee      	b.n	5c8c <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5cae:	460b      	mov	r3, r1
    5cb0:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5cb4:	460a      	mov	r2, r1
    5cb6:	69ce      	ldr	r6, [r1, #28]
    5cb8:	320c      	adds	r2, #12
    5cba:	2101      	movs	r1, #1
    5cbc:	7858      	ldrb	r0, [r3, #1]
    5cbe:	47b0      	blx	r6
		if (err) {
    5cc0:	b1a0      	cbz	r0, 5cec <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5cc2:	4b34      	ldr	r3, [pc, #208]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5cc4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5cc8:	2205      	movs	r2, #5
    5cca:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5ccc:	2202      	movs	r2, #2
    5cce:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5cd0:	2d00      	cmp	r5, #0
    5cd2:	db09      	blt.n	5ce8 <_usb_d_cb_trans_done+0x98>
    5cd4:	482f      	ldr	r0, [pc, #188]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5cd6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5cda:	7840      	ldrb	r0, [r0, #1]
    5cdc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    5ce0:	2101      	movs	r1, #1
    5ce2:	4b2d      	ldr	r3, [pc, #180]	; (5d98 <_usb_d_cb_trans_done+0x148>)
    5ce4:	4798      	blx	r3
    5ce6:	e7d1      	b.n	5c8c <_usb_d_cb_trans_done+0x3c>
    5ce8:	7858      	ldrb	r0, [r3, #1]
    5cea:	e7f9      	b.n	5ce0 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5cec:	4829      	ldr	r0, [pc, #164]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5cee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5cf2:	2304      	movs	r3, #4
    5cf4:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    5cf6:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    5cf8:	2200      	movs	r2, #0
    5cfa:	9201      	str	r2, [sp, #4]
    5cfc:	9202      	str	r2, [sp, #8]
    5cfe:	4295      	cmp	r5, r2
    5d00:	bfac      	ite	ge
    5d02:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    5d06:	f003 030f 	andlt.w	r3, r3, #15
    5d0a:	f88d 300c 	strb.w	r3, [sp, #12]
    5d0e:	2301      	movs	r3, #1
    5d10:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5d14:	a801      	add	r0, sp, #4
    5d16:	4b21      	ldr	r3, [pc, #132]	; (5d9c <_usb_d_cb_trans_done+0x14c>)
    5d18:	4798      	blx	r3
    5d1a:	e7b7      	b.n	5c8c <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    5d1c:	2d01      	cmp	r5, #1
    5d1e:	d00a      	beq.n	5d36 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    5d20:	2d02      	cmp	r5, #2
    5d22:	d01c      	beq.n	5d5e <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    5d24:	2d03      	cmp	r5, #3
    5d26:	d02a      	beq.n	5d7e <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    5d28:	4b1a      	ldr	r3, [pc, #104]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5d2a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5d2e:	2206      	movs	r2, #6
    5d30:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5d32:	70da      	strb	r2, [r3, #3]
    5d34:	e7a2      	b.n	5c7c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5d36:	4a17      	ldr	r2, [pc, #92]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5d38:	0143      	lsls	r3, r0, #5
    5d3a:	18d1      	adds	r1, r2, r3
    5d3c:	2002      	movs	r0, #2
    5d3e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5d40:	5cd3      	ldrb	r3, [r2, r3]
    5d42:	b12b      	cbz	r3, 5d50 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5d44:	4b13      	ldr	r3, [pc, #76]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5d46:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5d4a:	2205      	movs	r2, #5
    5d4c:	709a      	strb	r2, [r3, #2]
    5d4e:	e795      	b.n	5c7c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5d50:	460b      	mov	r3, r1
    5d52:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5d54:	2100      	movs	r1, #0
    5d56:	4630      	mov	r0, r6
    5d58:	4b0f      	ldr	r3, [pc, #60]	; (5d98 <_usb_d_cb_trans_done+0x148>)
    5d5a:	4798      	blx	r3
    5d5c:	e78e      	b.n	5c7c <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5d5e:	4a0d      	ldr	r2, [pc, #52]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5d60:	0143      	lsls	r3, r0, #5
    5d62:	18d1      	adds	r1, r2, r3
    5d64:	2004      	movs	r0, #4
    5d66:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5d68:	5cd3      	ldrb	r3, [r2, r3]
    5d6a:	b12b      	cbz	r3, 5d78 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5d6c:	4b09      	ldr	r3, [pc, #36]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5d6e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5d72:	2201      	movs	r2, #1
    5d74:	709a      	strb	r2, [r3, #2]
    5d76:	e781      	b.n	5c7c <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5d78:	2302      	movs	r3, #2
    5d7a:	708b      	strb	r3, [r1, #2]
			return;
    5d7c:	e786      	b.n	5c8c <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5d7e:	4b05      	ldr	r3, [pc, #20]	; (5d94 <_usb_d_cb_trans_done+0x144>)
    5d80:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5d84:	2200      	movs	r2, #0
    5d86:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5d88:	2205      	movs	r2, #5
    5d8a:	70da      	strb	r2, [r3, #3]
    5d8c:	e776      	b.n	5c7c <_usb_d_cb_trans_done+0x2c>
    5d8e:	bf00      	nop
    5d90:	00005bd5 	.word	0x00005bd5
    5d94:	2000064c 	.word	0x2000064c
    5d98:	000099b5 	.word	0x000099b5
    5d9c:	00009b5d 	.word	0x00009b5d

00005da0 <usb_d_cb_trans_setup>:
{
    5da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5da4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5da6:	4b1c      	ldr	r3, [pc, #112]	; (5e18 <usb_d_cb_trans_setup+0x78>)
    5da8:	4798      	blx	r3
    5daa:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    5dac:	4c1b      	ldr	r4, [pc, #108]	; (5e1c <usb_d_cb_trans_setup+0x7c>)
    5dae:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    5db2:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5db4:	4621      	mov	r1, r4
    5db6:	4628      	mov	r0, r5
    5db8:	4b19      	ldr	r3, [pc, #100]	; (5e20 <usb_d_cb_trans_setup+0x80>)
    5dba:	4798      	blx	r3
	if (n != 8) {
    5dbc:	b2c0      	uxtb	r0, r0
    5dbe:	2808      	cmp	r0, #8
    5dc0:	d009      	beq.n	5dd6 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5dc2:	2101      	movs	r1, #1
    5dc4:	4628      	mov	r0, r5
    5dc6:	4c17      	ldr	r4, [pc, #92]	; (5e24 <usb_d_cb_trans_setup+0x84>)
    5dc8:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5dca:	2101      	movs	r1, #1
    5dcc:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    5dd0:	47a0      	blx	r4
		return;
    5dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5dd6:	2100      	movs	r1, #0
    5dd8:	4628      	mov	r0, r5
    5dda:	4f12      	ldr	r7, [pc, #72]	; (5e24 <usb_d_cb_trans_setup+0x84>)
    5ddc:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5dde:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    5de2:	2100      	movs	r1, #0
    5de4:	4640      	mov	r0, r8
    5de6:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5de8:	4b0c      	ldr	r3, [pc, #48]	; (5e1c <usb_d_cb_trans_setup+0x7c>)
    5dea:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5dee:	2201      	movs	r2, #1
    5df0:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5df2:	695b      	ldr	r3, [r3, #20]
    5df4:	4621      	mov	r1, r4
    5df6:	4628      	mov	r0, r5
    5df8:	4798      	blx	r3
    5dfa:	b108      	cbz	r0, 5e00 <usb_d_cb_trans_setup+0x60>
    5dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5e00:	4b06      	ldr	r3, [pc, #24]	; (5e1c <usb_d_cb_trans_setup+0x7c>)
    5e02:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5e06:	2305      	movs	r3, #5
    5e08:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5e0a:	2101      	movs	r1, #1
    5e0c:	4628      	mov	r0, r5
    5e0e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5e10:	2101      	movs	r1, #1
    5e12:	4640      	mov	r0, r8
    5e14:	47b8      	blx	r7
    5e16:	e7f1      	b.n	5dfc <usb_d_cb_trans_setup+0x5c>
    5e18:	00005bd5 	.word	0x00005bd5
    5e1c:	2000064c 	.word	0x2000064c
    5e20:	00009afd 	.word	0x00009afd
    5e24:	000099b5 	.word	0x000099b5

00005e28 <usb_d_init>:

int32_t usb_d_init(void)
{
    5e28:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    5e2a:	4b11      	ldr	r3, [pc, #68]	; (5e70 <usb_d_init+0x48>)
    5e2c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    5e2e:	2800      	cmp	r0, #0
    5e30:	db1d      	blt.n	5e6e <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5e32:	4c10      	ldr	r4, [pc, #64]	; (5e74 <usb_d_init+0x4c>)
    5e34:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    5e38:	2100      	movs	r1, #0
    5e3a:	4620      	mov	r0, r4
    5e3c:	4b0e      	ldr	r3, [pc, #56]	; (5e78 <usb_d_init+0x50>)
    5e3e:	4798      	blx	r3
    5e40:	4623      	mov	r3, r4
    5e42:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5e46:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5e48:	4a0c      	ldr	r2, [pc, #48]	; (5e7c <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5e4a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5e4c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5e4e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5e50:	61da      	str	r2, [r3, #28]
    5e52:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5e54:	4283      	cmp	r3, r0
    5e56:	d1f8      	bne.n	5e4a <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5e58:	4909      	ldr	r1, [pc, #36]	; (5e80 <usb_d_init+0x58>)
    5e5a:	2000      	movs	r0, #0
    5e5c:	4c09      	ldr	r4, [pc, #36]	; (5e84 <usb_d_init+0x5c>)
    5e5e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5e60:	4909      	ldr	r1, [pc, #36]	; (5e88 <usb_d_init+0x60>)
    5e62:	2001      	movs	r0, #1
    5e64:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5e66:	4909      	ldr	r1, [pc, #36]	; (5e8c <usb_d_init+0x64>)
    5e68:	2002      	movs	r0, #2
    5e6a:	47a0      	blx	r4
	return ERR_NONE;
    5e6c:	2000      	movs	r0, #0
}
    5e6e:	bd10      	pop	{r4, pc}
    5e70:	00009381 	.word	0x00009381
    5e74:	2000064c 	.word	0x2000064c
    5e78:	0000c8d7 	.word	0x0000c8d7
    5e7c:	00005c19 	.word	0x00005c19
    5e80:	00005da1 	.word	0x00005da1
    5e84:	00009d65 	.word	0x00009d65
    5e88:	00005c1d 	.word	0x00005c1d
    5e8c:	00005c51 	.word	0x00005c51

00005e90 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5e90:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5e92:	4b01      	ldr	r3, [pc, #4]	; (5e98 <usb_d_register_callback+0x8>)
    5e94:	4798      	blx	r3
    5e96:	bd08      	pop	{r3, pc}
    5e98:	00009d3d 	.word	0x00009d3d

00005e9c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    5e9c:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    5e9e:	4b01      	ldr	r3, [pc, #4]	; (5ea4 <usb_d_enable+0x8>)
    5ea0:	4798      	blx	r3
}
    5ea2:	bd08      	pop	{r3, pc}
    5ea4:	00009489 	.word	0x00009489

00005ea8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5ea8:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    5eaa:	4b01      	ldr	r3, [pc, #4]	; (5eb0 <usb_d_attach+0x8>)
    5eac:	4798      	blx	r3
    5eae:	bd08      	pop	{r3, pc}
    5eb0:	000094f5 	.word	0x000094f5

00005eb4 <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    5eb4:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    5eb6:	4b01      	ldr	r3, [pc, #4]	; (5ebc <usb_d_get_frame_num+0x8>)
    5eb8:	4798      	blx	r3
}
    5eba:	bd08      	pop	{r3, pc}
    5ebc:	00009513 	.word	0x00009513

00005ec0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5ec0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    5ec2:	4b01      	ldr	r3, [pc, #4]	; (5ec8 <usb_d_set_address+0x8>)
    5ec4:	4798      	blx	r3
    5ec6:	bd08      	pop	{r3, pc}
    5ec8:	00009507 	.word	0x00009507

00005ecc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ece:	4606      	mov	r6, r0
    5ed0:	460c      	mov	r4, r1
    5ed2:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5ed4:	4b0f      	ldr	r3, [pc, #60]	; (5f14 <usb_d_ep_init+0x48>)
    5ed6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    5ed8:	2800      	cmp	r0, #0
    5eda:	da14      	bge.n	5f06 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5edc:	20ff      	movs	r0, #255	; 0xff
    5ede:	4b0d      	ldr	r3, [pc, #52]	; (5f14 <usb_d_ep_init+0x48>)
    5ee0:	4798      	blx	r3
		if (ep_index < 0) {
    5ee2:	1e05      	subs	r5, r0, #0
    5ee4:	db12      	blt.n	5f0c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5ee6:	463a      	mov	r2, r7
    5ee8:	4621      	mov	r1, r4
    5eea:	4630      	mov	r0, r6
    5eec:	4b0a      	ldr	r3, [pc, #40]	; (5f18 <usb_d_ep_init+0x4c>)
    5eee:	4798      	blx	r3
	if (rc < 0) {
    5ef0:	2800      	cmp	r0, #0
    5ef2:	db0d      	blt.n	5f10 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    5ef4:	4b09      	ldr	r3, [pc, #36]	; (5f1c <usb_d_ep_init+0x50>)
    5ef6:	0168      	lsls	r0, r5, #5
    5ef8:	181a      	adds	r2, r3, r0
    5efa:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5efc:	f004 0403 	and.w	r4, r4, #3
    5f00:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    5f02:	2000      	movs	r0, #0
    5f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    5f06:	f06f 0013 	mvn.w	r0, #19
    5f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    5f0c:	f06f 0014 	mvn.w	r0, #20
}
    5f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f12:	bf00      	nop
    5f14:	00005bd5 	.word	0x00005bd5
    5f18:	00009521 	.word	0x00009521
    5f1c:	2000064c 	.word	0x2000064c

00005f20 <usb_d_ep0_init>:
{
    5f20:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5f22:	4602      	mov	r2, r0
    5f24:	2100      	movs	r1, #0
    5f26:	4608      	mov	r0, r1
    5f28:	4b01      	ldr	r3, [pc, #4]	; (5f30 <usb_d_ep0_init+0x10>)
    5f2a:	4798      	blx	r3
}
    5f2c:	bd08      	pop	{r3, pc}
    5f2e:	bf00      	nop
    5f30:	00005ecd 	.word	0x00005ecd

00005f34 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5f34:	b538      	push	{r3, r4, r5, lr}
    5f36:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5f38:	4b06      	ldr	r3, [pc, #24]	; (5f54 <usb_d_ep_deinit+0x20>)
    5f3a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5f3c:	1e04      	subs	r4, r0, #0
    5f3e:	db07      	blt.n	5f50 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5f40:	4628      	mov	r0, r5
    5f42:	4b05      	ldr	r3, [pc, #20]	; (5f58 <usb_d_ep_deinit+0x24>)
    5f44:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5f46:	4805      	ldr	r0, [pc, #20]	; (5f5c <usb_d_ep_deinit+0x28>)
    5f48:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5f4c:	23ff      	movs	r3, #255	; 0xff
    5f4e:	7043      	strb	r3, [r0, #1]
    5f50:	bd38      	pop	{r3, r4, r5, pc}
    5f52:	bf00      	nop
    5f54:	00005bd5 	.word	0x00005bd5
    5f58:	00009639 	.word	0x00009639
    5f5c:	2000064c 	.word	0x2000064c

00005f60 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5f60:	b538      	push	{r3, r4, r5, lr}
    5f62:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5f64:	4b0e      	ldr	r3, [pc, #56]	; (5fa0 <usb_d_ep_enable+0x40>)
    5f66:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5f68:	1e04      	subs	r4, r0, #0
    5f6a:	db16      	blt.n	5f9a <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5f6c:	0163      	lsls	r3, r4, #5
    5f6e:	4a0d      	ldr	r2, [pc, #52]	; (5fa4 <usb_d_ep_enable+0x44>)
    5f70:	5cd3      	ldrb	r3, [r2, r3]
    5f72:	2b00      	cmp	r3, #0
    5f74:	bf0c      	ite	eq
    5f76:	2202      	moveq	r2, #2
    5f78:	2201      	movne	r2, #1
    5f7a:	4b0a      	ldr	r3, [pc, #40]	; (5fa4 <usb_d_ep_enable+0x44>)
    5f7c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5f80:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5f82:	4628      	mov	r0, r5
    5f84:	4b08      	ldr	r3, [pc, #32]	; (5fa8 <usb_d_ep_enable+0x48>)
    5f86:	4798      	blx	r3
	if (rc < 0) {
    5f88:	2800      	cmp	r0, #0
    5f8a:	db00      	blt.n	5f8e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5f8c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5f8e:	4b05      	ldr	r3, [pc, #20]	; (5fa4 <usb_d_ep_enable+0x44>)
    5f90:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5f94:	2300      	movs	r3, #0
    5f96:	70a3      	strb	r3, [r4, #2]
    5f98:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    5f9a:	f06f 0011 	mvn.w	r0, #17
    5f9e:	e7f5      	b.n	5f8c <usb_d_ep_enable+0x2c>
    5fa0:	00005bd5 	.word	0x00005bd5
    5fa4:	2000064c 	.word	0x2000064c
    5fa8:	000096fd 	.word	0x000096fd

00005fac <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5fb0:	b086      	sub	sp, #24
    5fb2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5fb4:	7a07      	ldrb	r7, [r0, #8]
    5fb6:	4638      	mov	r0, r7
    5fb8:	4b3f      	ldr	r3, [pc, #252]	; (60b8 <usb_d_ep_transfer+0x10c>)
    5fba:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5fbc:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5fbe:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5fc2:	1e06      	subs	r6, r0, #0
    5fc4:	db72      	blt.n	60ac <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    5fc6:	a804      	add	r0, sp, #16
    5fc8:	4b3c      	ldr	r3, [pc, #240]	; (60bc <usb_d_ep_transfer+0x110>)
    5fca:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5fcc:	4b3c      	ldr	r3, [pc, #240]	; (60c0 <usb_d_ep_transfer+0x114>)
    5fce:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5fd2:	789b      	ldrb	r3, [r3, #2]
    5fd4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    5fd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5fdc:	b2db      	uxtb	r3, r3
    5fde:	2b01      	cmp	r3, #1
    5fe0:	d011      	beq.n	6006 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    5fe2:	a804      	add	r0, sp, #16
    5fe4:	4b37      	ldr	r3, [pc, #220]	; (60c4 <usb_d_ep_transfer+0x118>)
    5fe6:	4798      	blx	r3
		switch (state) {
    5fe8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5fec:	b2db      	uxtb	r3, r3
    5fee:	2b05      	cmp	r3, #5
    5ff0:	d05f      	beq.n	60b2 <usb_d_ep_transfer+0x106>
    5ff2:	2b06      	cmp	r3, #6
    5ff4:	d023      	beq.n	603e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	bf0c      	ite	eq
    5ffa:	f06f 0012 	mvneq.w	r0, #18
    5ffe:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    6000:	b006      	add	sp, #24
    6002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    6006:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 60c0 <usb_d_ep_transfer+0x114>
    600a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    600e:	eb0a 0309 	add.w	r3, sl, r9
    6012:	2203      	movs	r2, #3
    6014:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    6016:	a804      	add	r0, sp, #16
    6018:	4b2a      	ldr	r3, [pc, #168]	; (60c4 <usb_d_ep_transfer+0x118>)
    601a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    601c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    6020:	b183      	cbz	r3, 6044 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6022:	7a22      	ldrb	r2, [r4, #8]
    6024:	3500      	adds	r5, #0
    6026:	bf18      	it	ne
    6028:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    602a:	6823      	ldr	r3, [r4, #0]
    602c:	9301      	str	r3, [sp, #4]
    602e:	f8cd 8008 	str.w	r8, [sp, #8]
    6032:	f017 0f80 	tst.w	r7, #128	; 0x80
    6036:	d119      	bne.n	606c <usb_d_ep_transfer+0xc0>
    6038:	f002 030f 	and.w	r3, r2, #15
    603c:	e018      	b.n	6070 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    603e:	f06f 000f 	mvn.w	r0, #15
    6042:	e7dd      	b.n	6000 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    6044:	4b1e      	ldr	r3, [pc, #120]	; (60c0 <usb_d_ep_transfer+0x114>)
    6046:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    604a:	7cda      	ldrb	r2, [r3, #19]
    604c:	7c9d      	ldrb	r5, [r3, #18]
    604e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    6052:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    6054:	b9a5      	cbnz	r5, 6080 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6056:	4b1a      	ldr	r3, [pc, #104]	; (60c0 <usb_d_ep_transfer+0x114>)
    6058:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    605c:	2304      	movs	r3, #4
    605e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    6060:	2300      	movs	r3, #0
			zlp                 = true;
    6062:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6064:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    6066:	6821      	ldr	r1, [r4, #0]
    6068:	9101      	str	r1, [sp, #4]
    606a:	9302      	str	r3, [sp, #8]
    606c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    6070:	f88d 300c 	strb.w	r3, [sp, #12]
    6074:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    6078:	a801      	add	r0, sp, #4
    607a:	4b13      	ldr	r3, [pc, #76]	; (60c8 <usb_d_ep_transfer+0x11c>)
    607c:	4798      	blx	r3
	return rc;
    607e:	e7bf      	b.n	6000 <usb_d_ep_transfer+0x54>
    6080:	4643      	mov	r3, r8
    6082:	45a8      	cmp	r8, r5
    6084:	bf28      	it	cs
    6086:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    6088:	4a0d      	ldr	r2, [pc, #52]	; (60c0 <usb_d_ep_transfer+0x114>)
    608a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    608e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    6092:	2a00      	cmp	r2, #0
    6094:	db05      	blt.n	60a2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    6096:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    6098:	6821      	ldr	r1, [r4, #0]
    609a:	9101      	str	r1, [sp, #4]
    609c:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    609e:	2500      	movs	r5, #0
    60a0:	e7ca      	b.n	6038 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    60a2:	429d      	cmp	r5, r3
    60a4:	bf94      	ite	ls
    60a6:	2500      	movls	r5, #0
    60a8:	2501      	movhi	r5, #1
    60aa:	e7db      	b.n	6064 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    60ac:	f06f 0011 	mvn.w	r0, #17
    60b0:	e7a6      	b.n	6000 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    60b2:	2002      	movs	r0, #2
    60b4:	e7a4      	b.n	6000 <usb_d_ep_transfer+0x54>
    60b6:	bf00      	nop
    60b8:	00005bd5 	.word	0x00005bd5
    60bc:	00004d8d 	.word	0x00004d8d
    60c0:	2000064c 	.word	0x2000064c
    60c4:	00004d9b 	.word	0x00004d9b
    60c8:	00009b5d 	.word	0x00009b5d

000060cc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    60cc:	b538      	push	{r3, r4, r5, lr}
    60ce:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    60d0:	b141      	cbz	r1, 60e4 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    60d2:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    60d4:	bf0c      	ite	eq
    60d6:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    60d8:	2102      	movne	r1, #2
    60da:	4b13      	ldr	r3, [pc, #76]	; (6128 <usb_d_ep_halt+0x5c>)
    60dc:	4798      	blx	r3
    60de:	4603      	mov	r3, r0
	}
}
    60e0:	4618      	mov	r0, r3
    60e2:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    60e4:	4b11      	ldr	r3, [pc, #68]	; (612c <usb_d_ep_halt+0x60>)
    60e6:	4798      	blx	r3
	if (ep_index < 0) {
    60e8:	1e05      	subs	r5, r0, #0
    60ea:	db19      	blt.n	6120 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    60ec:	2102      	movs	r1, #2
    60ee:	4620      	mov	r0, r4
    60f0:	4b0d      	ldr	r3, [pc, #52]	; (6128 <usb_d_ep_halt+0x5c>)
    60f2:	4798      	blx	r3
    60f4:	4603      	mov	r3, r0
    60f6:	2800      	cmp	r0, #0
    60f8:	d0f2      	beq.n	60e0 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    60fa:	2100      	movs	r1, #0
    60fc:	4620      	mov	r0, r4
    60fe:	4b0a      	ldr	r3, [pc, #40]	; (6128 <usb_d_ep_halt+0x5c>)
    6100:	4798      	blx	r3
		if (rc < 0) {
    6102:	1e03      	subs	r3, r0, #0
    6104:	dbec      	blt.n	60e0 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6106:	4b0a      	ldr	r3, [pc, #40]	; (6130 <usb_d_ep_halt+0x64>)
    6108:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    610c:	2201      	movs	r2, #1
    610e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6110:	2103      	movs	r1, #3
    6112:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    6114:	69db      	ldr	r3, [r3, #28]
    6116:	2200      	movs	r2, #0
    6118:	4620      	mov	r0, r4
    611a:	4798      	blx	r3
	return ERR_NONE;
    611c:	2300      	movs	r3, #0
    611e:	e7df      	b.n	60e0 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    6120:	f06f 0311 	mvn.w	r3, #17
    6124:	e7dc      	b.n	60e0 <usb_d_ep_halt+0x14>
    6126:	bf00      	nop
    6128:	000099b5 	.word	0x000099b5
    612c:	00005bd5 	.word	0x00005bd5
    6130:	2000064c 	.word	0x2000064c

00006134 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    6134:	b538      	push	{r3, r4, r5, lr}
    6136:	460d      	mov	r5, r1
    6138:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    613a:	4b0e      	ldr	r3, [pc, #56]	; (6174 <usb_d_ep_register_callback+0x40>)
    613c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    613e:	4b0e      	ldr	r3, [pc, #56]	; (6178 <usb_d_ep_register_callback+0x44>)
    6140:	2c00      	cmp	r4, #0
    6142:	bf08      	it	eq
    6144:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    6146:	2800      	cmp	r0, #0
    6148:	db13      	blt.n	6172 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    614a:	2d01      	cmp	r5, #1
    614c:	d008      	beq.n	6160 <usb_d_ep_register_callback+0x2c>
    614e:	b115      	cbz	r5, 6156 <usb_d_ep_register_callback+0x22>
    6150:	2d02      	cmp	r5, #2
    6152:	d00a      	beq.n	616a <usb_d_ep_register_callback+0x36>
    6154:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    6156:	4b09      	ldr	r3, [pc, #36]	; (617c <usb_d_ep_register_callback+0x48>)
    6158:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    615c:	6144      	str	r4, [r0, #20]
		break;
    615e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    6160:	4b06      	ldr	r3, [pc, #24]	; (617c <usb_d_ep_register_callback+0x48>)
    6162:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6166:	6184      	str	r4, [r0, #24]
		break;
    6168:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    616a:	4b04      	ldr	r3, [pc, #16]	; (617c <usb_d_ep_register_callback+0x48>)
    616c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6170:	61c4      	str	r4, [r0, #28]
    6172:	bd38      	pop	{r3, r4, r5, pc}
    6174:	00005bd5 	.word	0x00005bd5
    6178:	00005c19 	.word	0x00005c19
    617c:	2000064c 	.word	0x2000064c

00006180 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    6180:	b900      	cbnz	r0, 6184 <assert+0x4>
		__asm("BKPT #0");
    6182:	be00      	bkpt	0x0000
    6184:	4770      	bx	lr

00006186 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    6186:	6803      	ldr	r3, [r0, #0]
    6188:	b14b      	cbz	r3, 619e <is_list_element+0x18>
		if (it == element) {
    618a:	428b      	cmp	r3, r1
    618c:	d009      	beq.n	61a2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    618e:	681b      	ldr	r3, [r3, #0]
    6190:	b11b      	cbz	r3, 619a <is_list_element+0x14>
		if (it == element) {
    6192:	4299      	cmp	r1, r3
    6194:	d1fb      	bne.n	618e <is_list_element+0x8>
			return true;
    6196:	2001      	movs	r0, #1
		}
	}

	return false;
}
    6198:	4770      	bx	lr
	return false;
    619a:	2000      	movs	r0, #0
    619c:	4770      	bx	lr
    619e:	2000      	movs	r0, #0
    61a0:	4770      	bx	lr
			return true;
    61a2:	2001      	movs	r0, #1
    61a4:	4770      	bx	lr
	...

000061a8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    61a8:	b538      	push	{r3, r4, r5, lr}
    61aa:	4604      	mov	r4, r0
    61ac:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    61ae:	4b06      	ldr	r3, [pc, #24]	; (61c8 <list_insert_as_head+0x20>)
    61b0:	4798      	blx	r3
    61b2:	f080 0001 	eor.w	r0, r0, #1
    61b6:	2239      	movs	r2, #57	; 0x39
    61b8:	4904      	ldr	r1, [pc, #16]	; (61cc <list_insert_as_head+0x24>)
    61ba:	b2c0      	uxtb	r0, r0
    61bc:	4b04      	ldr	r3, [pc, #16]	; (61d0 <list_insert_as_head+0x28>)
    61be:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    61c0:	6823      	ldr	r3, [r4, #0]
    61c2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    61c4:	6025      	str	r5, [r4, #0]
    61c6:	bd38      	pop	{r3, r4, r5, pc}
    61c8:	00006187 	.word	0x00006187
    61cc:	0000e1f0 	.word	0x0000e1f0
    61d0:	00006181 	.word	0x00006181

000061d4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    61d4:	6803      	ldr	r3, [r0, #0]
    61d6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    61d8:	6001      	str	r1, [r0, #0]
    61da:	4770      	bx	lr

000061dc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    61dc:	b570      	push	{r4, r5, r6, lr}
    61de:	4605      	mov	r5, r0
    61e0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    61e2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    61e4:	4b0a      	ldr	r3, [pc, #40]	; (6210 <list_insert_at_end+0x34>)
    61e6:	4798      	blx	r3
    61e8:	f080 0001 	eor.w	r0, r0, #1
    61ec:	224f      	movs	r2, #79	; 0x4f
    61ee:	4909      	ldr	r1, [pc, #36]	; (6214 <list_insert_at_end+0x38>)
    61f0:	b2c0      	uxtb	r0, r0
    61f2:	4b09      	ldr	r3, [pc, #36]	; (6218 <list_insert_at_end+0x3c>)
    61f4:	4798      	blx	r3

	if (!list->head) {
    61f6:	682b      	ldr	r3, [r5, #0]
    61f8:	b91b      	cbnz	r3, 6202 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    61fa:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    61fc:	6033      	str	r3, [r6, #0]
		return;
    61fe:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    6200:	461c      	mov	r4, r3
	while (it->next) {
    6202:	6823      	ldr	r3, [r4, #0]
    6204:	2b00      	cmp	r3, #0
    6206:	d1fb      	bne.n	6200 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    6208:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    620a:	6033      	str	r3, [r6, #0]
    620c:	bd70      	pop	{r4, r5, r6, pc}
    620e:	bf00      	nop
    6210:	00006187 	.word	0x00006187
    6214:	0000e1f0 	.word	0x0000e1f0
    6218:	00006181 	.word	0x00006181

0000621c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    621c:	6803      	ldr	r3, [r0, #0]
    621e:	b10b      	cbz	r3, 6224 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    6220:	681a      	ldr	r2, [r3, #0]
    6222:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    6224:	4618      	mov	r0, r3
    6226:	4770      	bx	lr

00006228 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    6228:	b570      	push	{r4, r5, r6, lr}
    622a:	460e      	mov	r6, r1
    622c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    622e:	4604      	mov	r4, r0
    6230:	b178      	cbz	r0, 6252 <ringbuffer_init+0x2a>
    6232:	b181      	cbz	r1, 6256 <ringbuffer_init+0x2e>
    6234:	b1a2      	cbz	r2, 6260 <ringbuffer_init+0x38>
    6236:	2001      	movs	r0, #1
    6238:	2228      	movs	r2, #40	; 0x28
    623a:	490d      	ldr	r1, [pc, #52]	; (6270 <ringbuffer_init+0x48>)
    623c:	4b0d      	ldr	r3, [pc, #52]	; (6274 <ringbuffer_init+0x4c>)
    623e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    6240:	1e6b      	subs	r3, r5, #1
    6242:	421d      	tst	r5, r3
    6244:	d109      	bne.n	625a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    6246:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    6248:	2000      	movs	r0, #0
    624a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    624c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    624e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    6250:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    6252:	2000      	movs	r0, #0
    6254:	e7f0      	b.n	6238 <ringbuffer_init+0x10>
    6256:	2000      	movs	r0, #0
    6258:	e7ee      	b.n	6238 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    625a:	f06f 000c 	mvn.w	r0, #12
    625e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    6260:	2228      	movs	r2, #40	; 0x28
    6262:	4903      	ldr	r1, [pc, #12]	; (6270 <ringbuffer_init+0x48>)
    6264:	2000      	movs	r0, #0
    6266:	4b03      	ldr	r3, [pc, #12]	; (6274 <ringbuffer_init+0x4c>)
    6268:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    626a:	1e6b      	subs	r3, r5, #1
    626c:	e7eb      	b.n	6246 <ringbuffer_init+0x1e>
    626e:	bf00      	nop
    6270:	0000e210 	.word	0x0000e210
    6274:	00006181 	.word	0x00006181

00006278 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    6278:	b538      	push	{r3, r4, r5, lr}
    627a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    627c:	4604      	mov	r4, r0
    627e:	b1a0      	cbz	r0, 62aa <ringbuffer_get+0x32>
    6280:	1c08      	adds	r0, r1, #0
    6282:	bf18      	it	ne
    6284:	2001      	movne	r0, #1
    6286:	2240      	movs	r2, #64	; 0x40
    6288:	490a      	ldr	r1, [pc, #40]	; (62b4 <ringbuffer_get+0x3c>)
    628a:	4b0b      	ldr	r3, [pc, #44]	; (62b8 <ringbuffer_get+0x40>)
    628c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    628e:	68a3      	ldr	r3, [r4, #8]
    6290:	68e2      	ldr	r2, [r4, #12]
    6292:	429a      	cmp	r2, r3
    6294:	d00b      	beq.n	62ae <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    6296:	6862      	ldr	r2, [r4, #4]
    6298:	4013      	ands	r3, r2
    629a:	6822      	ldr	r2, [r4, #0]
    629c:	5cd3      	ldrb	r3, [r2, r3]
    629e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    62a0:	68a3      	ldr	r3, [r4, #8]
    62a2:	3301      	adds	r3, #1
    62a4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    62a6:	2000      	movs	r0, #0
    62a8:	bd38      	pop	{r3, r4, r5, pc}
    62aa:	2000      	movs	r0, #0
    62ac:	e7eb      	b.n	6286 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    62ae:	f06f 0009 	mvn.w	r0, #9
}
    62b2:	bd38      	pop	{r3, r4, r5, pc}
    62b4:	0000e210 	.word	0x0000e210
    62b8:	00006181 	.word	0x00006181

000062bc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    62bc:	b538      	push	{r3, r4, r5, lr}
    62be:	460d      	mov	r5, r1
	ASSERT(rb);
    62c0:	4604      	mov	r4, r0
    62c2:	2251      	movs	r2, #81	; 0x51
    62c4:	490b      	ldr	r1, [pc, #44]	; (62f4 <ringbuffer_put+0x38>)
    62c6:	3000      	adds	r0, #0
    62c8:	bf18      	it	ne
    62ca:	2001      	movne	r0, #1
    62cc:	4b0a      	ldr	r3, [pc, #40]	; (62f8 <ringbuffer_put+0x3c>)
    62ce:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    62d0:	68e3      	ldr	r3, [r4, #12]
    62d2:	6862      	ldr	r2, [r4, #4]
    62d4:	4013      	ands	r3, r2
    62d6:	6822      	ldr	r2, [r4, #0]
    62d8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    62da:	68e3      	ldr	r3, [r4, #12]
    62dc:	6861      	ldr	r1, [r4, #4]
    62de:	68a2      	ldr	r2, [r4, #8]
    62e0:	1a9a      	subs	r2, r3, r2
    62e2:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    62e4:	bf84      	itt	hi
    62e6:	1a59      	subhi	r1, r3, r1
    62e8:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    62ea:	3301      	adds	r3, #1
    62ec:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    62ee:	2000      	movs	r0, #0
    62f0:	bd38      	pop	{r3, r4, r5, pc}
    62f2:	bf00      	nop
    62f4:	0000e210 	.word	0x0000e210
    62f8:	00006181 	.word	0x00006181

000062fc <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    62fc:	b510      	push	{r4, lr}
	ASSERT(rb);
    62fe:	4604      	mov	r4, r0
    6300:	2267      	movs	r2, #103	; 0x67
    6302:	4905      	ldr	r1, [pc, #20]	; (6318 <ringbuffer_num+0x1c>)
    6304:	3000      	adds	r0, #0
    6306:	bf18      	it	ne
    6308:	2001      	movne	r0, #1
    630a:	4b04      	ldr	r3, [pc, #16]	; (631c <ringbuffer_num+0x20>)
    630c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    630e:	68e0      	ldr	r0, [r4, #12]
    6310:	68a3      	ldr	r3, [r4, #8]
}
    6312:	1ac0      	subs	r0, r0, r3
    6314:	bd10      	pop	{r4, pc}
    6316:	bf00      	nop
    6318:	0000e210 	.word	0x0000e210
    631c:	00006181 	.word	0x00006181

00006320 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    6320:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    6322:	4a06      	ldr	r2, [pc, #24]	; (633c <_sbrk+0x1c>)
    6324:	6812      	ldr	r2, [r2, #0]
    6326:	b122      	cbz	r2, 6332 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6328:	4a04      	ldr	r2, [pc, #16]	; (633c <_sbrk+0x1c>)
    632a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    632c:	4403      	add	r3, r0
    632e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    6330:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6332:	4903      	ldr	r1, [pc, #12]	; (6340 <_sbrk+0x20>)
    6334:	4a01      	ldr	r2, [pc, #4]	; (633c <_sbrk+0x1c>)
    6336:	6011      	str	r1, [r2, #0]
    6338:	e7f6      	b.n	6328 <_sbrk+0x8>
    633a:	bf00      	nop
    633c:	200007ec 	.word	0x200007ec
    6340:	20017d58 	.word	0x20017d58

00006344 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    6344:	f04f 30ff 	mov.w	r0, #4294967295
    6348:	4770      	bx	lr

0000634a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    634a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    634e:	604b      	str	r3, [r1, #4]

	return 0;
}
    6350:	2000      	movs	r0, #0
    6352:	4770      	bx	lr

00006354 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    6354:	2001      	movs	r0, #1
    6356:	4770      	bx	lr

00006358 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    6358:	2000      	movs	r0, #0
    635a:	4770      	bx	lr

0000635c <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    635c:	6940      	ldr	r0, [r0, #20]
    635e:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    6362:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    6366:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    6368:	0040      	lsls	r0, r0, #1
    636a:	3076      	adds	r0, #118	; 0x76
}
    636c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6370:	4770      	bx	lr
	...

00006374 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    6374:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    6376:	f013 0f01 	tst.w	r3, #1
    637a:	d11b      	bne.n	63b4 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    637c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    637e:	f013 0f03 	tst.w	r3, #3
    6382:	d1fb      	bne.n	637c <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    6384:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    6386:	f013 0f02 	tst.w	r3, #2
    638a:	d00d      	beq.n	63a8 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    638c:	8803      	ldrh	r3, [r0, #0]
    638e:	f023 0302 	bic.w	r3, r3, #2
    6392:	041b      	lsls	r3, r3, #16
    6394:	0c1b      	lsrs	r3, r3, #16
    6396:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6398:	6b03      	ldr	r3, [r0, #48]	; 0x30
    639a:	f013 0f03 	tst.w	r3, #3
    639e:	d1fb      	bne.n	6398 <_adc_init+0x24>
    63a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    63a2:	f013 0f02 	tst.w	r3, #2
    63a6:	d1fb      	bne.n	63a0 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    63a8:	2301      	movs	r3, #1
    63aa:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    63ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    63ae:	f013 0f03 	tst.w	r3, #3
    63b2:	d1fb      	bne.n	63ac <_adc_init+0x38>
    63b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    63b6:	f013 0f01 	tst.w	r3, #1
    63ba:	d1fb      	bne.n	63b4 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    63bc:	2316      	movs	r3, #22
    63be:	4a37      	ldr	r2, [pc, #220]	; (649c <_adc_init+0x128>)
    63c0:	fb03 2301 	mla	r3, r3, r1, r2
    63c4:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    63c6:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    63c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    63ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    63ce:	2b00      	cmp	r3, #0
    63d0:	d1fa      	bne.n	63c8 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    63d2:	2316      	movs	r3, #22
    63d4:	4a31      	ldr	r2, [pc, #196]	; (649c <_adc_init+0x128>)
    63d6:	fb03 2301 	mla	r3, r3, r1, r2
    63da:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    63dc:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    63de:	6b03      	ldr	r3, [r0, #48]	; 0x30
    63e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    63e4:	2b00      	cmp	r3, #0
    63e6:	d1fa      	bne.n	63de <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    63e8:	2316      	movs	r3, #22
    63ea:	4a2c      	ldr	r2, [pc, #176]	; (649c <_adc_init+0x128>)
    63ec:	fb03 2301 	mla	r3, r3, r1, r2
    63f0:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    63f2:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    63f4:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    63f6:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    63f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    63fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    63fe:	2b00      	cmp	r3, #0
    6400:	d1fa      	bne.n	63f8 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    6402:	2316      	movs	r3, #22
    6404:	4a25      	ldr	r2, [pc, #148]	; (649c <_adc_init+0x128>)
    6406:	fb03 2301 	mla	r3, r3, r1, r2
    640a:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    640c:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    640e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6410:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6414:	2b00      	cmp	r3, #0
    6416:	d1fa      	bne.n	640e <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    6418:	2316      	movs	r3, #22
    641a:	4a20      	ldr	r2, [pc, #128]	; (649c <_adc_init+0x128>)
    641c:	fb03 2301 	mla	r3, r3, r1, r2
    6420:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    6422:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6424:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6426:	f3c3 030b 	ubfx	r3, r3, #0, #12
    642a:	2b00      	cmp	r3, #0
    642c:	d1fa      	bne.n	6424 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    642e:	2316      	movs	r3, #22
    6430:	4a1a      	ldr	r2, [pc, #104]	; (649c <_adc_init+0x128>)
    6432:	fb03 2301 	mla	r3, r3, r1, r2
    6436:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    6438:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    643a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    643c:	f013 0f80 	tst.w	r3, #128	; 0x80
    6440:	d1fb      	bne.n	643a <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    6442:	2316      	movs	r3, #22
    6444:	4a15      	ldr	r2, [pc, #84]	; (649c <_adc_init+0x128>)
    6446:	fb03 2301 	mla	r3, r3, r1, r2
    644a:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    644c:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    644e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6450:	f413 7f80 	tst.w	r3, #256	; 0x100
    6454:	d1fb      	bne.n	644e <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    6456:	2316      	movs	r3, #22
    6458:	4a10      	ldr	r2, [pc, #64]	; (649c <_adc_init+0x128>)
    645a:	fb03 2301 	mla	r3, r3, r1, r2
    645e:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    6460:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6462:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6464:	f413 7f00 	tst.w	r3, #512	; 0x200
    6468:	d1fb      	bne.n	6462 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    646a:	2316      	movs	r3, #22
    646c:	4a0b      	ldr	r2, [pc, #44]	; (649c <_adc_init+0x128>)
    646e:	fb03 2301 	mla	r3, r3, r1, r2
    6472:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    6474:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6476:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6478:	f413 6f80 	tst.w	r3, #1024	; 0x400
    647c:	d1fb      	bne.n	6476 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    647e:	2216      	movs	r2, #22
    6480:	4b06      	ldr	r3, [pc, #24]	; (649c <_adc_init+0x128>)
    6482:	fb02 3101 	mla	r1, r2, r1, r3
    6486:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    6488:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    648a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    648c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    648e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6490:	f013 0f03 	tst.w	r3, #3
    6494:	d1fb      	bne.n	648e <_adc_init+0x11a>

	return ERR_NONE;
}
    6496:	2000      	movs	r0, #0
    6498:	4770      	bx	lr
    649a:	bf00      	nop
    649c:	0000e234 	.word	0x0000e234

000064a0 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    64a0:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    64a2:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    64a4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    64a8:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    64ac:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    64ae:	f013 0f01 	tst.w	r3, #1
    64b2:	d106      	bne.n	64c2 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    64b4:	f013 0f02 	tst.w	r3, #2
    64b8:	d10d      	bne.n	64d6 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    64ba:	f013 0f04 	tst.w	r3, #4
    64be:	d111      	bne.n	64e4 <_adc_interrupt_handler+0x44>
    64c0:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    64c2:	2301      	movs	r3, #1
    64c4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    64c8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    64cc:	6883      	ldr	r3, [r0, #8]
    64ce:	b292      	uxth	r2, r2
    64d0:	2100      	movs	r1, #0
    64d2:	4798      	blx	r3
    64d4:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    64d6:	2302      	movs	r3, #2
    64d8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    64dc:	6843      	ldr	r3, [r0, #4]
    64de:	2100      	movs	r1, #0
    64e0:	4798      	blx	r3
    64e2:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    64e4:	2304      	movs	r3, #4
    64e6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    64ea:	6803      	ldr	r3, [r0, #0]
    64ec:	2100      	movs	r1, #0
    64ee:	4798      	blx	r3
	}
}
    64f0:	e7e6      	b.n	64c0 <_adc_interrupt_handler+0x20>
	...

000064f4 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    64f4:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    64f8:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    64fc:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    6500:	b148      	cbz	r0, 6516 <_adc_get_regs+0x22>
    6502:	2801      	cmp	r0, #1
    6504:	d009      	beq.n	651a <_adc_get_regs+0x26>
{
    6506:	b508      	push	{r3, lr}
	ASSERT(false);
    6508:	228c      	movs	r2, #140	; 0x8c
    650a:	4905      	ldr	r1, [pc, #20]	; (6520 <_adc_get_regs+0x2c>)
    650c:	2000      	movs	r0, #0
    650e:	4b05      	ldr	r3, [pc, #20]	; (6524 <_adc_get_regs+0x30>)
    6510:	4798      	blx	r3
	return 0;
    6512:	2000      	movs	r0, #0
    6514:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    6516:	2000      	movs	r0, #0
    6518:	4770      	bx	lr
    651a:	2001      	movs	r0, #1
    651c:	4770      	bx	lr
    651e:	bf00      	nop
    6520:	0000e260 	.word	0x0000e260
    6524:	00006181 	.word	0x00006181

00006528 <_adc_async_init>:
{
    6528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    652c:	460c      	mov	r4, r1
	ASSERT(device);
    652e:	4605      	mov	r5, r0
    6530:	22e6      	movs	r2, #230	; 0xe6
    6532:	493b      	ldr	r1, [pc, #236]	; (6620 <_adc_async_init+0xf8>)
    6534:	3000      	adds	r0, #0
    6536:	bf18      	it	ne
    6538:	2001      	movne	r0, #1
    653a:	4b3a      	ldr	r3, [pc, #232]	; (6624 <_adc_async_init+0xfc>)
    653c:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    653e:	4620      	mov	r0, r4
    6540:	4b39      	ldr	r3, [pc, #228]	; (6628 <_adc_async_init+0x100>)
    6542:	4798      	blx	r3
    6544:	4601      	mov	r1, r0
    6546:	4620      	mov	r0, r4
    6548:	4b38      	ldr	r3, [pc, #224]	; (662c <_adc_async_init+0x104>)
    654a:	4798      	blx	r3
	if (init_status) {
    654c:	4606      	mov	r6, r0
    654e:	b110      	cbz	r0, 6556 <_adc_async_init+0x2e>
}
    6550:	4630      	mov	r0, r6
    6552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    6556:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    6558:	4b35      	ldr	r3, [pc, #212]	; (6630 <_adc_async_init+0x108>)
    655a:	429c      	cmp	r4, r3
    655c:	d05c      	beq.n	6618 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    655e:	4b35      	ldr	r3, [pc, #212]	; (6634 <_adc_async_init+0x10c>)
    6560:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    6562:	bf04      	itt	eq
    6564:	4b34      	ldreq	r3, [pc, #208]	; (6638 <_adc_async_init+0x110>)
    6566:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    6568:	4628      	mov	r0, r5
    656a:	4f34      	ldr	r7, [pc, #208]	; (663c <_adc_async_init+0x114>)
    656c:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    656e:	0943      	lsrs	r3, r0, #5
    6570:	f000 001f 	and.w	r0, r0, #31
    6574:	2401      	movs	r4, #1
    6576:	fa04 f000 	lsl.w	r0, r4, r0
    657a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6640 <_adc_async_init+0x118>
    657e:	3320      	adds	r3, #32
    6580:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6588:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    658c:	4628      	mov	r0, r5
    658e:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6590:	0943      	lsrs	r3, r0, #5
    6592:	f000 001f 	and.w	r0, r0, #31
    6596:	fa04 f000 	lsl.w	r0, r4, r0
    659a:	3360      	adds	r3, #96	; 0x60
    659c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    65a0:	4628      	mov	r0, r5
    65a2:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65a4:	0943      	lsrs	r3, r0, #5
    65a6:	f000 001f 	and.w	r0, r0, #31
    65aa:	4084      	lsls	r4, r0
    65ac:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    65b0:	4628      	mov	r0, r5
    65b2:	47b8      	blx	r7
    65b4:	3001      	adds	r0, #1
    65b6:	b280      	uxth	r0, r0
    65b8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    65ba:	2b00      	cmp	r3, #0
    65bc:	dbc8      	blt.n	6550 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65be:	095b      	lsrs	r3, r3, #5
    65c0:	f000 001f 	and.w	r0, r0, #31
    65c4:	2201      	movs	r2, #1
    65c6:	fa02 f000 	lsl.w	r0, r2, r0
    65ca:	3320      	adds	r3, #32
    65cc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    65d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    65d4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    65d8:	4628      	mov	r0, r5
    65da:	47b8      	blx	r7
    65dc:	3001      	adds	r0, #1
    65de:	b280      	uxth	r0, r0
    65e0:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    65e2:	2b00      	cmp	r3, #0
    65e4:	dbb4      	blt.n	6550 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65e6:	095b      	lsrs	r3, r3, #5
    65e8:	f000 001f 	and.w	r0, r0, #31
    65ec:	2201      	movs	r2, #1
    65ee:	fa02 f000 	lsl.w	r0, r2, r0
    65f2:	3360      	adds	r3, #96	; 0x60
    65f4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    65f8:	4628      	mov	r0, r5
    65fa:	47b8      	blx	r7
    65fc:	3001      	adds	r0, #1
    65fe:	b280      	uxth	r0, r0
    6600:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6602:	2b00      	cmp	r3, #0
    6604:	dba4      	blt.n	6550 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6606:	095b      	lsrs	r3, r3, #5
    6608:	f000 001f 	and.w	r0, r0, #31
    660c:	2201      	movs	r2, #1
    660e:	fa02 f000 	lsl.w	r0, r2, r0
    6612:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    6616:	e79b      	b.n	6550 <_adc_async_init+0x28>
		_adc0_dev = dev;
    6618:	4b07      	ldr	r3, [pc, #28]	; (6638 <_adc_async_init+0x110>)
    661a:	601d      	str	r5, [r3, #0]
    661c:	e7a4      	b.n	6568 <_adc_async_init+0x40>
    661e:	bf00      	nop
    6620:	0000e260 	.word	0x0000e260
    6624:	00006181 	.word	0x00006181
    6628:	000064f5 	.word	0x000064f5
    662c:	00006375 	.word	0x00006375
    6630:	43001c00 	.word	0x43001c00
    6634:	43002000 	.word	0x43002000
    6638:	200007f0 	.word	0x200007f0
    663c:	0000635d 	.word	0x0000635d
    6640:	e000e100 	.word	0xe000e100

00006644 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    6644:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6646:	8813      	ldrh	r3, [r2, #0]
    6648:	b29b      	uxth	r3, r3
    664a:	f043 0302 	orr.w	r3, r3, #2
    664e:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6650:	6b13      	ldr	r3, [r2, #48]	; 0x30
    6652:	f013 0f03 	tst.w	r3, #3
    6656:	d1fb      	bne.n	6650 <_adc_async_enable_channel+0xc>
}
    6658:	4770      	bx	lr

0000665a <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    665a:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    665c:	88db      	ldrh	r3, [r3, #6]
    665e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    6662:	2b03      	cmp	r3, #3
}
    6664:	bf0c      	ite	eq
    6666:	2001      	moveq	r0, #1
    6668:	2002      	movne	r0, #2
    666a:	4770      	bx	lr

0000666c <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    666c:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    666e:	7d13      	ldrb	r3, [r2, #20]
    6670:	f043 0302 	orr.w	r3, r3, #2
    6674:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6676:	6b13      	ldr	r3, [r2, #48]	; 0x30
    6678:	f3c3 030b 	ubfx	r3, r3, #0, #12
    667c:	2b00      	cmp	r3, #0
    667e:	d1fa      	bne.n	6676 <_adc_async_convert+0xa>
}
    6680:	4770      	bx	lr

00006682 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    6682:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    6684:	2a01      	cmp	r2, #1
    6686:	d007      	beq.n	6698 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    6688:	2a02      	cmp	r2, #2
    668a:	d00e      	beq.n	66aa <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    668c:	b91a      	cbnz	r2, 6696 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    668e:	b1ab      	cbz	r3, 66bc <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    6690:	2301      	movs	r3, #1
    6692:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    6696:	4770      	bx	lr
	if (value == 0x0) {
    6698:	b91b      	cbnz	r3, 66a2 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    669a:	2304      	movs	r3, #4
    669c:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    66a0:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    66a2:	2304      	movs	r3, #4
    66a4:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    66a8:	4770      	bx	lr
	if (value == 0x0) {
    66aa:	b91b      	cbnz	r3, 66b4 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    66ac:	2302      	movs	r3, #2
    66ae:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    66b2:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    66b4:	2302      	movs	r3, #2
    66b6:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    66ba:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    66bc:	2301      	movs	r3, #1
    66be:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    66c2:	4770      	bx	lr

000066c4 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    66c4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    66c6:	4b02      	ldr	r3, [pc, #8]	; (66d0 <ADC0_0_Handler+0xc>)
    66c8:	6818      	ldr	r0, [r3, #0]
    66ca:	4b02      	ldr	r3, [pc, #8]	; (66d4 <ADC0_0_Handler+0x10>)
    66cc:	4798      	blx	r3
    66ce:	bd08      	pop	{r3, pc}
    66d0:	200007f0 	.word	0x200007f0
    66d4:	000064a1 	.word	0x000064a1

000066d8 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    66d8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    66da:	4b02      	ldr	r3, [pc, #8]	; (66e4 <ADC0_1_Handler+0xc>)
    66dc:	6818      	ldr	r0, [r3, #0]
    66de:	4b02      	ldr	r3, [pc, #8]	; (66e8 <ADC0_1_Handler+0x10>)
    66e0:	4798      	blx	r3
    66e2:	bd08      	pop	{r3, pc}
    66e4:	200007f0 	.word	0x200007f0
    66e8:	000064a1 	.word	0x000064a1

000066ec <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    66ec:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    66ee:	4b02      	ldr	r3, [pc, #8]	; (66f8 <ADC1_0_Handler+0xc>)
    66f0:	6858      	ldr	r0, [r3, #4]
    66f2:	4b02      	ldr	r3, [pc, #8]	; (66fc <ADC1_0_Handler+0x10>)
    66f4:	4798      	blx	r3
    66f6:	bd08      	pop	{r3, pc}
    66f8:	200007f0 	.word	0x200007f0
    66fc:	000064a1 	.word	0x000064a1

00006700 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    6700:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    6702:	4b02      	ldr	r3, [pc, #8]	; (670c <ADC1_1_Handler+0xc>)
    6704:	6858      	ldr	r0, [r3, #4]
    6706:	4b02      	ldr	r3, [pc, #8]	; (6710 <ADC1_1_Handler+0x10>)
    6708:	4798      	blx	r3
    670a:	bd08      	pop	{r3, pc}
    670c:	200007f0 	.word	0x200007f0
    6710:	000064a1 	.word	0x000064a1

00006714 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6714:	0943      	lsrs	r3, r0, #5
    6716:	f000 001f 	and.w	r0, r0, #31
    671a:	2201      	movs	r2, #1
    671c:	fa02 f000 	lsl.w	r0, r2, r0
    6720:	3340      	adds	r3, #64	; 0x40
    6722:	4a02      	ldr	r2, [pc, #8]	; (672c <_irq_set+0x18>)
    6724:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6728:	4770      	bx	lr
    672a:	bf00      	nop
    672c:	e000e100 	.word	0xe000e100

00006730 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    6730:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6734:	00c0      	lsls	r0, r0, #3
    6736:	4770      	bx	lr

00006738 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6738:	4b01      	ldr	r3, [pc, #4]	; (6740 <_get_cycles_for_ms+0x8>)
    673a:	fb03 f000 	mul.w	r0, r3, r0
    673e:	4770      	bx	lr
    6740:	0001d4c0 	.word	0x0001d4c0

00006744 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6744:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6746:	4a0e      	ldr	r2, [pc, #56]	; (6780 <_init_chip+0x3c>)
    6748:	8813      	ldrh	r3, [r2, #0]
    674a:	b29b      	uxth	r3, r3
    674c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    6750:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    6752:	4b0c      	ldr	r3, [pc, #48]	; (6784 <_init_chip+0x40>)
    6754:	4798      	blx	r3
	_oscctrl_init_sources();
    6756:	4b0c      	ldr	r3, [pc, #48]	; (6788 <_init_chip+0x44>)
    6758:	4798      	blx	r3
	_mclk_init();
    675a:	4b0c      	ldr	r3, [pc, #48]	; (678c <_init_chip+0x48>)
    675c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    675e:	2004      	movs	r0, #4
    6760:	4c0b      	ldr	r4, [pc, #44]	; (6790 <_init_chip+0x4c>)
    6762:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    6764:	4b0b      	ldr	r3, [pc, #44]	; (6794 <_init_chip+0x50>)
    6766:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6768:	f640 70fb 	movw	r0, #4091	; 0xffb
    676c:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    676e:	4a0a      	ldr	r2, [pc, #40]	; (6798 <_init_chip+0x54>)
    6770:	6913      	ldr	r3, [r2, #16]
    6772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6776:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    6778:	4b08      	ldr	r3, [pc, #32]	; (679c <_init_chip+0x58>)
    677a:	4798      	blx	r3
    677c:	bd10      	pop	{r4, pc}
    677e:	bf00      	nop
    6780:	41004000 	.word	0x41004000
    6784:	00006dc9 	.word	0x00006dc9
    6788:	00006ddd 	.word	0x00006ddd
    678c:	00006b49 	.word	0x00006b49
    6790:	00006ad1 	.word	0x00006ad1
    6794:	00006de1 	.word	0x00006de1
    6798:	40000800 	.word	0x40000800
    679c:	00006815 	.word	0x00006815

000067a0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    67a0:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    67a2:	4a1a      	ldr	r2, [pc, #104]	; (680c <_dmac_handler+0x6c>)
    67a4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    67a6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    67aa:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    67ae:	4818      	ldr	r0, [pc, #96]	; (6810 <_dmac_handler+0x70>)
    67b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    67b4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    67b8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    67bc:	f012 0f01 	tst.w	r2, #1
    67c0:	d10a      	bne.n	67d8 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    67c2:	011a      	lsls	r2, r3, #4
    67c4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    67c8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    67cc:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    67d0:	f012 0f02 	tst.w	r2, #2
    67d4:	d10b      	bne.n	67ee <_dmac_handler+0x4e>
    67d6:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    67d8:	011a      	lsls	r2, r3, #4
    67da:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    67de:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    67e2:	2101      	movs	r1, #1
    67e4:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    67e8:	6843      	ldr	r3, [r0, #4]
    67ea:	4798      	blx	r3
    67ec:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    67ee:	011a      	lsls	r2, r3, #4
    67f0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    67f4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    67f8:	2102      	movs	r1, #2
    67fa:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    67fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6802:	4a03      	ldr	r2, [pc, #12]	; (6810 <_dmac_handler+0x70>)
    6804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6808:	4798      	blx	r3
	}
}
    680a:	e7e4      	b.n	67d6 <_dmac_handler+0x36>
    680c:	4100a000 	.word	0x4100a000
    6810:	200007f8 	.word	0x200007f8

00006814 <_dma_init>:
{
    6814:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    6816:	4a32      	ldr	r2, [pc, #200]	; (68e0 <_dma_init+0xcc>)
    6818:	8813      	ldrh	r3, [r2, #0]
    681a:	f023 0302 	bic.w	r3, r3, #2
    681e:	041b      	lsls	r3, r3, #16
    6820:	0c1b      	lsrs	r3, r3, #16
    6822:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    6824:	8853      	ldrh	r3, [r2, #2]
    6826:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    682a:	041b      	lsls	r3, r3, #16
    682c:	0c1b      	lsrs	r3, r3, #16
    682e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    6830:	8813      	ldrh	r3, [r2, #0]
    6832:	b29b      	uxth	r3, r3
    6834:	f043 0301 	orr.w	r3, r3, #1
    6838:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    683a:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    683c:	f013 0f01 	tst.w	r3, #1
    6840:	d1fb      	bne.n	683a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    6842:	4b27      	ldr	r3, [pc, #156]	; (68e0 <_dma_init+0xcc>)
    6844:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6848:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    684a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    684c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    6850:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    6854:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    6856:	2100      	movs	r1, #0
    6858:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    685a:	4a22      	ldr	r2, [pc, #136]	; (68e4 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    685c:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    685e:	4a22      	ldr	r2, [pc, #136]	; (68e8 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    6860:	639a      	str	r2, [r3, #56]	; 0x38
    6862:	4b22      	ldr	r3, [pc, #136]	; (68ec <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6864:	4c1f      	ldr	r4, [pc, #124]	; (68e4 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6866:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6868:	681d      	ldr	r5, [r3, #0]
    686a:	0108      	lsls	r0, r1, #4
    686c:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    6870:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    6874:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    6876:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6878:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    687c:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    687e:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    6882:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6884:	1822      	adds	r2, r4, r0
    6886:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6888:	60d6      	str	r6, [r2, #12]
    688a:	3101      	adds	r1, #1
    688c:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    688e:	2920      	cmp	r1, #32
    6890:	d1ea      	bne.n	6868 <_dma_init+0x54>
    6892:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6894:	2001      	movs	r0, #1
    6896:	4916      	ldr	r1, [pc, #88]	; (68f0 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    6898:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    689a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    689e:	d00b      	beq.n	68b8 <_dma_init+0xa4>
    68a0:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    68a2:	2b24      	cmp	r3, #36	; 0x24
    68a4:	d1f8      	bne.n	6898 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    68a6:	4a0e      	ldr	r2, [pc, #56]	; (68e0 <_dma_init+0xcc>)
    68a8:	8813      	ldrh	r3, [r2, #0]
    68aa:	b29b      	uxth	r3, r3
    68ac:	f043 0302 	orr.w	r3, r3, #2
    68b0:	8013      	strh	r3, [r2, #0]
}
    68b2:	2000      	movs	r0, #0
    68b4:	bc70      	pop	{r4, r5, r6}
    68b6:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68b8:	095c      	lsrs	r4, r3, #5
    68ba:	f002 021f 	and.w	r2, r2, #31
    68be:	fa00 f202 	lsl.w	r2, r0, r2
    68c2:	f104 0520 	add.w	r5, r4, #32
    68c6:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    68ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68ce:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68d2:	f104 0560 	add.w	r5, r4, #96	; 0x60
    68d6:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68da:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    68de:	e7df      	b.n	68a0 <_dma_init+0x8c>
    68e0:	4100a000 	.word	0x4100a000
    68e4:	20007910 	.word	0x20007910
    68e8:	20007b10 	.word	0x20007b10
    68ec:	0000e278 	.word	0x0000e278
    68f0:	e000e100 	.word	0xe000e100

000068f4 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    68f4:	b991      	cbnz	r1, 691c <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    68f6:	b942      	cbnz	r2, 690a <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    68f8:	0100      	lsls	r0, r0, #4
    68fa:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    68fe:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6902:	2302      	movs	r3, #2
    6904:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    6908:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    690a:	0100      	lsls	r0, r0, #4
    690c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6910:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6914:	2302      	movs	r3, #2
    6916:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    691a:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    691c:	2901      	cmp	r1, #1
    691e:	d000      	beq.n	6922 <_dma_set_irq_state+0x2e>
    6920:	4770      	bx	lr
	if (value == 0x0) {
    6922:	b142      	cbz	r2, 6936 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    6924:	0100      	lsls	r0, r0, #4
    6926:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    692a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    692e:	2301      	movs	r3, #1
    6930:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    6934:	e7f4      	b.n	6920 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    6936:	0100      	lsls	r0, r0, #4
    6938:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    693c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6940:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    6944:	4770      	bx	lr
	...

00006948 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6948:	4b02      	ldr	r3, [pc, #8]	; (6954 <_dma_set_destination_address+0xc>)
    694a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    694e:	6081      	str	r1, [r0, #8]
}
    6950:	2000      	movs	r0, #0
    6952:	4770      	bx	lr
    6954:	20007910 	.word	0x20007910

00006958 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6958:	4b02      	ldr	r3, [pc, #8]	; (6964 <_dma_set_source_address+0xc>)
    695a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    695e:	6041      	str	r1, [r0, #4]
}
    6960:	2000      	movs	r0, #0
    6962:	4770      	bx	lr
    6964:	20007910 	.word	0x20007910

00006968 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6968:	4a05      	ldr	r2, [pc, #20]	; (6980 <_dma_srcinc_enable+0x18>)
    696a:	0100      	lsls	r0, r0, #4
    696c:	5a13      	ldrh	r3, [r2, r0]
    696e:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    6970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    6974:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6978:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    697a:	5211      	strh	r1, [r2, r0]
}
    697c:	2000      	movs	r0, #0
    697e:	4770      	bx	lr
    6980:	20007910 	.word	0x20007910

00006984 <_dma_set_data_amount>:
{
    6984:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    6986:	4c14      	ldr	r4, [pc, #80]	; (69d8 <_dma_set_data_amount+0x54>)
    6988:	0102      	lsls	r2, r0, #4
    698a:	18a3      	adds	r3, r4, r2
    698c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    698e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    6990:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6994:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    6996:	f412 6f00 	tst.w	r2, #2048	; 0x800
    699a:	d006      	beq.n	69aa <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    699c:	fa01 f403 	lsl.w	r4, r1, r3
    69a0:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    69a2:	4a0d      	ldr	r2, [pc, #52]	; (69d8 <_dma_set_data_amount+0x54>)
    69a4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    69a8:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    69aa:	4c0b      	ldr	r4, [pc, #44]	; (69d8 <_dma_set_data_amount+0x54>)
    69ac:	0102      	lsls	r2, r0, #4
    69ae:	18a5      	adds	r5, r4, r2
    69b0:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    69b2:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    69b4:	f412 6f80 	tst.w	r2, #1024	; 0x400
    69b8:	d005      	beq.n	69c6 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    69ba:	fa01 f303 	lsl.w	r3, r1, r3
    69be:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    69c0:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    69c4:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    69c6:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    69c8:	4b03      	ldr	r3, [pc, #12]	; (69d8 <_dma_set_data_amount+0x54>)
    69ca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    69ce:	8041      	strh	r1, [r0, #2]
}
    69d0:	2000      	movs	r0, #0
    69d2:	bc30      	pop	{r4, r5}
    69d4:	4770      	bx	lr
    69d6:	bf00      	nop
    69d8:	20007910 	.word	0x20007910

000069dc <_dma_enable_transaction>:
{
    69dc:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    69de:	4c0d      	ldr	r4, [pc, #52]	; (6a14 <_dma_enable_transaction+0x38>)
    69e0:	0103      	lsls	r3, r0, #4
    69e2:	5ae2      	ldrh	r2, [r4, r3]
    69e4:	b292      	uxth	r2, r2
    69e6:	f042 0201 	orr.w	r2, r2, #1
    69ea:	52e2      	strh	r2, [r4, r3]
    69ec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    69f0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    69f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    69f6:	f042 0202 	orr.w	r2, r2, #2
    69fa:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    69fc:	b131      	cbz	r1, 6a0c <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    69fe:	4a06      	ldr	r2, [pc, #24]	; (6a18 <_dma_enable_transaction+0x3c>)
    6a00:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    6a02:	2301      	movs	r3, #1
    6a04:	fa03 f000 	lsl.w	r0, r3, r0
    6a08:	4308      	orrs	r0, r1
    6a0a:	6110      	str	r0, [r2, #16]
}
    6a0c:	2000      	movs	r0, #0
    6a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6a12:	4770      	bx	lr
    6a14:	20007910 	.word	0x20007910
    6a18:	4100a000 	.word	0x4100a000

00006a1c <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    6a1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6a20:	4b02      	ldr	r3, [pc, #8]	; (6a2c <_dma_get_channel_resource+0x10>)
    6a22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6a26:	6001      	str	r1, [r0, #0]
}
    6a28:	2000      	movs	r0, #0
    6a2a:	4770      	bx	lr
    6a2c:	200007f8 	.word	0x200007f8

00006a30 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    6a30:	b508      	push	{r3, lr}
	_dmac_handler();
    6a32:	4b01      	ldr	r3, [pc, #4]	; (6a38 <DMAC_0_Handler+0x8>)
    6a34:	4798      	blx	r3
    6a36:	bd08      	pop	{r3, pc}
    6a38:	000067a1 	.word	0x000067a1

00006a3c <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6a3c:	b508      	push	{r3, lr}
	_dmac_handler();
    6a3e:	4b01      	ldr	r3, [pc, #4]	; (6a44 <DMAC_1_Handler+0x8>)
    6a40:	4798      	blx	r3
    6a42:	bd08      	pop	{r3, pc}
    6a44:	000067a1 	.word	0x000067a1

00006a48 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6a48:	b508      	push	{r3, lr}
	_dmac_handler();
    6a4a:	4b01      	ldr	r3, [pc, #4]	; (6a50 <DMAC_2_Handler+0x8>)
    6a4c:	4798      	blx	r3
    6a4e:	bd08      	pop	{r3, pc}
    6a50:	000067a1 	.word	0x000067a1

00006a54 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    6a54:	b508      	push	{r3, lr}
	_dmac_handler();
    6a56:	4b01      	ldr	r3, [pc, #4]	; (6a5c <DMAC_3_Handler+0x8>)
    6a58:	4798      	blx	r3
    6a5a:	bd08      	pop	{r3, pc}
    6a5c:	000067a1 	.word	0x000067a1

00006a60 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6a60:	b508      	push	{r3, lr}
	_dmac_handler();
    6a62:	4b01      	ldr	r3, [pc, #4]	; (6a68 <DMAC_4_Handler+0x8>)
    6a64:	4798      	blx	r3
    6a66:	bd08      	pop	{r3, pc}
    6a68:	000067a1 	.word	0x000067a1

00006a6c <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6a6c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    6a6e:	2000      	movs	r0, #0
    6a70:	4770      	bx	lr
	...

00006a74 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6a74:	b430      	push	{r4, r5}
    6a76:	4814      	ldr	r0, [pc, #80]	; (6ac8 <_event_system_init+0x54>)
    6a78:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6a7c:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6a7e:	4c13      	ldr	r4, [pc, #76]	; (6acc <_event_system_init+0x58>)
    6a80:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6a82:	f813 1b01 	ldrb.w	r1, [r3], #1
    6a86:	3248      	adds	r2, #72	; 0x48
    6a88:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    6a8c:	42ab      	cmp	r3, r5
    6a8e:	d1f7      	bne.n	6a80 <_event_system_init+0xc>
    6a90:	480d      	ldr	r0, [pc, #52]	; (6ac8 <_event_system_init+0x54>)
    6a92:	f100 0442 	add.w	r4, r0, #66	; 0x42
    6a96:	3080      	adds	r0, #128	; 0x80
    6a98:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6a9a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6a9e:	00ca      	lsls	r2, r1, #3
    6aa0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6aa4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6aa8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6aaa:	f850 3f04 	ldr.w	r3, [r0, #4]!
    6aae:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6ab0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6ab4:	43db      	mvns	r3, r3
    6ab6:	b2db      	uxtb	r3, r3
    6ab8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    6abc:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6abe:	2920      	cmp	r1, #32
    6ac0:	d1eb      	bne.n	6a9a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    6ac2:	2000      	movs	r0, #0
    6ac4:	bc30      	pop	{r4, r5}
    6ac6:	4770      	bx	lr
    6ac8:	0000e378 	.word	0x0000e378
    6acc:	4100e000 	.word	0x4100e000

00006ad0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6ad0:	f010 0f01 	tst.w	r0, #1
    6ad4:	d008      	beq.n	6ae8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6ad6:	4a17      	ldr	r2, [pc, #92]	; (6b34 <_gclk_init_generators_by_fref+0x64>)
    6ad8:	4b17      	ldr	r3, [pc, #92]	; (6b38 <_gclk_init_generators_by_fref+0x68>)
    6ada:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6adc:	4619      	mov	r1, r3
    6ade:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6ae2:	684b      	ldr	r3, [r1, #4]
    6ae4:	4213      	tst	r3, r2
    6ae6:	d1fc      	bne.n	6ae2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6ae8:	f010 0f02 	tst.w	r0, #2
    6aec:	d008      	beq.n	6b00 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6aee:	4a13      	ldr	r2, [pc, #76]	; (6b3c <_gclk_init_generators_by_fref+0x6c>)
    6af0:	4b11      	ldr	r3, [pc, #68]	; (6b38 <_gclk_init_generators_by_fref+0x68>)
    6af2:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6af4:	4619      	mov	r1, r3
    6af6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6afa:	684b      	ldr	r3, [r1, #4]
    6afc:	4213      	tst	r3, r2
    6afe:	d1fc      	bne.n	6afa <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6b00:	f010 0f04 	tst.w	r0, #4
    6b04:	d008      	beq.n	6b18 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6b06:	4a0e      	ldr	r2, [pc, #56]	; (6b40 <_gclk_init_generators_by_fref+0x70>)
    6b08:	4b0b      	ldr	r3, [pc, #44]	; (6b38 <_gclk_init_generators_by_fref+0x68>)
    6b0a:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6b0c:	4619      	mov	r1, r3
    6b0e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6b12:	684b      	ldr	r3, [r1, #4]
    6b14:	4213      	tst	r3, r2
    6b16:	d1fc      	bne.n	6b12 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6b18:	f010 0f08 	tst.w	r0, #8
    6b1c:	d008      	beq.n	6b30 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6b1e:	4a09      	ldr	r2, [pc, #36]	; (6b44 <_gclk_init_generators_by_fref+0x74>)
    6b20:	4b05      	ldr	r3, [pc, #20]	; (6b38 <_gclk_init_generators_by_fref+0x68>)
    6b22:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6b24:	4619      	mov	r1, r3
    6b26:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6b2a:	684b      	ldr	r3, [r1, #4]
    6b2c:	4213      	tst	r3, r2
    6b2e:	d1fc      	bne.n	6b2a <_gclk_init_generators_by_fref+0x5a>
    6b30:	4770      	bx	lr
    6b32:	bf00      	nop
    6b34:	00010108 	.word	0x00010108
    6b38:	40001c00 	.word	0x40001c00
    6b3c:	00010106 	.word	0x00010106
    6b40:	00100106 	.word	0x00100106
    6b44:	00010104 	.word	0x00010104

00006b48 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    6b48:	2201      	movs	r2, #1
    6b4a:	4b01      	ldr	r3, [pc, #4]	; (6b50 <_mclk_init+0x8>)
    6b4c:	715a      	strb	r2, [r3, #5]
    6b4e:	4770      	bx	lr
    6b50:	40000800 	.word	0x40000800

00006b54 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    6b54:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    6b56:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6b58:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6b5a:	f012 0f01 	tst.w	r2, #1
    6b5e:	d005      	beq.n	6b6c <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    6b60:	2201      	movs	r2, #1
    6b62:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    6b64:	6803      	ldr	r3, [r0, #0]
    6b66:	b153      	cbz	r3, 6b7e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6b68:	4798      	blx	r3
    6b6a:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6b6c:	8a1a      	ldrh	r2, [r3, #16]
    6b6e:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    6b70:	b12a      	cbz	r2, 6b7e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    6b72:	f240 225e 	movw	r2, #606	; 0x25e
    6b76:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    6b78:	6843      	ldr	r3, [r0, #4]
    6b7a:	b103      	cbz	r3, 6b7e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    6b7c:	4798      	blx	r3
    6b7e:	bd08      	pop	{r3, pc}

00006b80 <_user_row_write_exec>:

/** \internal Write 4096-bit user row
 *  \param[in] _row Pointer to 4096-bit user row data.
 */
static int32_t _user_row_write_exec(const uint32_t *_row)
{
    6b80:	b4f0      	push	{r4, r5, r6, r7}
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    6b82:	4b21      	ldr	r3, [pc, #132]	; (6c08 <_user_row_write_exec+0x88>)
    6b84:	881f      	ldrh	r7, [r3, #0]
	Nvmctrl *hw    = NVMCTRL;
	uint32_t ctrla = hri_nvmctrl_read_CTRLA_reg(NVMCTRL);
	uint32_t i;

	/* Denied if Security Bit is set */
	if (DSU->STATUSB.bit.PROT) {
    6b86:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    6b8a:	789b      	ldrb	r3, [r3, #2]
    6b8c:	f013 0f01 	tst.w	r3, #1
    6b90:	d136      	bne.n	6c00 <_user_row_write_exec+0x80>
    6b92:	b2bf      	uxth	r7, r7
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    6b94:	4a1c      	ldr	r2, [pc, #112]	; (6c08 <_user_row_write_exec+0x88>)
    6b96:	8a53      	ldrh	r3, [r2, #18]
	}

	/* Do Save */

	/* - Prepare. */
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    6b98:	f013 0f01 	tst.w	r3, #1
    6b9c:	d0fb      	beq.n	6b96 <_user_row_write_exec+0x16>
	((Nvmctrl *)hw)->CTRLA.reg &= ~NVMCTRL_CTRLA_WMODE(mask);
    6b9e:	4b1a      	ldr	r3, [pc, #104]	; (6c08 <_user_row_write_exec+0x88>)
    6ba0:	881a      	ldrh	r2, [r3, #0]
    6ba2:	b292      	uxth	r2, r2
    6ba4:	801a      	strh	r2, [r3, #0]
}

static inline void hri_nvmctrl_write_ADDR_reg(const void *const hw, hri_nvmctrl_addr_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->ADDR.reg = data;
    6ba6:	4a19      	ldr	r2, [pc, #100]	; (6c0c <_user_row_write_exec+0x8c>)
    6ba8:	615a      	str	r2, [r3, #20]
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    6baa:	f44f 4225 	mov.w	r2, #42240	; 0xa500
    6bae:	809a      	strh	r2, [r3, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    6bb0:	461a      	mov	r2, r3
    6bb2:	8a53      	ldrh	r3, [r2, #18]
	hri_nvmctrl_clear_CTRLA_WMODE_bf(NVMCTRL, NVMCTRL_CTRLA_WMODE_Msk);

	/* - Erase AUX row. */
	hri_nvmctrl_write_ADDR_reg(hw, (hri_nvmctrl_addr_reg_t)_NVM_USER_ROW_BASE);
	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_EP | NVMCTRL_CTRLB_CMDEX_KEY);
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    6bb4:	f013 0f01 	tst.w	r3, #1
    6bb8:	d0fb      	beq.n	6bb2 <_user_row_write_exec+0x32>
    6bba:	4914      	ldr	r1, [pc, #80]	; (6c0c <_user_row_write_exec+0x8c>)
	((Nvmctrl *)hw)->CTRLB.reg = data;
    6bbc:	4b12      	ldr	r3, [pc, #72]	; (6c08 <_user_row_write_exec+0x88>)
    6bbe:	f24a 5615 	movw	r6, #42261	; 0xa515
    6bc2:	f24a 5504 	movw	r5, #42244	; 0xa504
		/* Wait until this module isn't busy */
	}

	for (i = 0; i < 32; i++) { /* 32 Quad words for User row: 32 * (4 bytes * 4) = 512 bytes */
    6bc6:	4c12      	ldr	r4, [pc, #72]	; (6c10 <_user_row_write_exec+0x90>)
    6bc8:	809e      	strh	r6, [r3, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    6bca:	8a5a      	ldrh	r2, [r3, #18]
		/* - Page buffer clear & write. */
		hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);
		while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    6bcc:	f012 0f01 	tst.w	r2, #1
    6bd0:	d0fb      	beq.n	6bca <_user_row_write_exec+0x4a>
			/* Wait until this module isn't busy */
		}
		*(((uint32_t *)NVMCTRL_USER) + i * 4)     = _row[i * 4];
    6bd2:	6802      	ldr	r2, [r0, #0]
    6bd4:	600a      	str	r2, [r1, #0]
		*(((uint32_t *)NVMCTRL_USER) + i * 4 + 1) = _row[i * 4 + 1];
    6bd6:	6842      	ldr	r2, [r0, #4]
    6bd8:	604a      	str	r2, [r1, #4]
		*(((uint32_t *)NVMCTRL_USER) + i * 4 + 2) = _row[i * 4 + 2];
    6bda:	6882      	ldr	r2, [r0, #8]
    6bdc:	608a      	str	r2, [r1, #8]
		*(((uint32_t *)NVMCTRL_USER) + i * 4 + 3) = _row[i * 4 + 3];
    6bde:	68c2      	ldr	r2, [r0, #12]
    6be0:	60ca      	str	r2, [r1, #12]
	((Nvmctrl *)hw)->ADDR.reg = data;
    6be2:	6159      	str	r1, [r3, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    6be4:	809d      	strh	r5, [r3, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    6be6:	8a5a      	ldrh	r2, [r3, #18]

		/* - Write AUX row. */
		hri_nvmctrl_write_ADDR_reg(hw, (hri_nvmctrl_addr_reg_t)(_NVM_USER_ROW_BASE + i * 16));
		hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_WQW | NVMCTRL_CTRLB_CMDEX_KEY);
		while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    6be8:	f012 0f01 	tst.w	r2, #1
    6bec:	d0fb      	beq.n	6be6 <_user_row_write_exec+0x66>
    6bee:	3010      	adds	r0, #16
    6bf0:	3110      	adds	r1, #16
	for (i = 0; i < 32; i++) { /* 32 Quad words for User row: 32 * (4 bytes * 4) = 512 bytes */
    6bf2:	42a1      	cmp	r1, r4
    6bf4:	d1e8      	bne.n	6bc8 <_user_row_write_exec+0x48>
	((Nvmctrl *)hw)->CTRLA.reg = data;
    6bf6:	4b04      	ldr	r3, [pc, #16]	; (6c08 <_user_row_write_exec+0x88>)
    6bf8:	801f      	strh	r7, [r3, #0]
	}

	/* Restore CTRLA */
	hri_nvmctrl_write_CTRLA_reg(NVMCTRL, ctrla);

	return ERR_NONE;
    6bfa:	2000      	movs	r0, #0
}
    6bfc:	bcf0      	pop	{r4, r5, r6, r7}
    6bfe:	4770      	bx	lr
		return ERR_DENIED;
    6c00:	f06f 0010 	mvn.w	r0, #16
    6c04:	e7fa      	b.n	6bfc <_user_row_write_exec+0x7c>
    6c06:	bf00      	nop
    6c08:	41004000 	.word	0x41004000
    6c0c:	00804000 	.word	0x00804000
    6c10:	00804200 	.word	0x00804200

00006c14 <_flash_init>:
{
    6c14:	b538      	push	{r3, r4, r5, lr}
    6c16:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    6c18:	4605      	mov	r5, r0
    6c1a:	b350      	cbz	r0, 6c72 <_flash_init+0x5e>
    6c1c:	4816      	ldr	r0, [pc, #88]	; (6c78 <_flash_init+0x64>)
    6c1e:	4281      	cmp	r1, r0
    6c20:	bf14      	ite	ne
    6c22:	2000      	movne	r0, #0
    6c24:	2001      	moveq	r0, #1
    6c26:	224b      	movs	r2, #75	; 0x4b
    6c28:	4914      	ldr	r1, [pc, #80]	; (6c7c <_flash_init+0x68>)
    6c2a:	4b15      	ldr	r3, [pc, #84]	; (6c80 <_flash_init+0x6c>)
    6c2c:	4798      	blx	r3
	device->hw = hw;
    6c2e:	612c      	str	r4, [r5, #16]
	return ((Nvmctrl *)hw)->CTRLA.reg;
    6c30:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    6c32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    6c36:	049b      	lsls	r3, r3, #18
    6c38:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    6c3a:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    6c3c:	4b11      	ldr	r3, [pc, #68]	; (6c84 <_flash_init+0x70>)
    6c3e:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c40:	4b11      	ldr	r3, [pc, #68]	; (6c88 <_flash_init+0x74>)
    6c42:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    6c46:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c4e:	f3bf 8f6f 	isb	sy
    6c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c5e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c62:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    6c66:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c6a:	6019      	str	r1, [r3, #0]
    6c6c:	601a      	str	r2, [r3, #0]
}
    6c6e:	2000      	movs	r0, #0
    6c70:	bd38      	pop	{r3, r4, r5, pc}
    6c72:	2000      	movs	r0, #0
    6c74:	e7d7      	b.n	6c26 <_flash_init+0x12>
    6c76:	bf00      	nop
    6c78:	41004000 	.word	0x41004000
    6c7c:	0000e47c 	.word	0x0000e47c
    6c80:	00006181 	.word	0x00006181
    6c84:	20000978 	.word	0x20000978
    6c88:	e000e100 	.word	0xe000e100

00006c8c <NVMCTRL_0_Handler>:
{
    6c8c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    6c8e:	4b02      	ldr	r3, [pc, #8]	; (6c98 <NVMCTRL_0_Handler+0xc>)
    6c90:	6818      	ldr	r0, [r3, #0]
    6c92:	4b02      	ldr	r3, [pc, #8]	; (6c9c <NVMCTRL_0_Handler+0x10>)
    6c94:	4798      	blx	r3
    6c96:	bd08      	pop	{r3, pc}
    6c98:	20000978 	.word	0x20000978
    6c9c:	00006b55 	.word	0x00006b55

00006ca0 <NVMCTRL_1_Handler>:
{
    6ca0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    6ca2:	4b02      	ldr	r3, [pc, #8]	; (6cac <NVMCTRL_1_Handler+0xc>)
    6ca4:	6818      	ldr	r0, [r3, #0]
    6ca6:	4b02      	ldr	r3, [pc, #8]	; (6cb0 <NVMCTRL_1_Handler+0x10>)
    6ca8:	4798      	blx	r3
    6caa:	bd08      	pop	{r3, pc}
    6cac:	20000978 	.word	0x20000978
    6cb0:	00006b55 	.word	0x00006b55

00006cb4 <_user_area_read>:
{
    6cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cb6:	4604      	mov	r4, r0
    6cb8:	460d      	mov	r5, r1
    6cba:	461e      	mov	r6, r3
	ASSERT(buf);
    6cbc:	4617      	mov	r7, r2
    6cbe:	1c10      	adds	r0, r2, #0
    6cc0:	bf18      	it	ne
    6cc2:	2001      	movne	r0, #1
    6cc4:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
    6cc8:	491b      	ldr	r1, [pc, #108]	; (6d38 <_user_area_read+0x84>)
    6cca:	4b1c      	ldr	r3, [pc, #112]	; (6d3c <_user_area_read+0x88>)
    6ccc:	4798      	blx	r3
	if (_IS_NVM_USER_ROW(base)) {
    6cce:	f5a4 0300 	sub.w	r3, r4, #8388608	; 0x800000
    6cd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    6cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6cda:	d210      	bcs.n	6cfe <_user_area_read+0x4a>
		if (!_IN_NVM_USER_ROW(base, offset)) {
    6cdc:	1962      	adds	r2, r4, r5
    6cde:	4b18      	ldr	r3, [pc, #96]	; (6d40 <_user_area_read+0x8c>)
    6ce0:	429a      	cmp	r2, r3
    6ce2:	d81d      	bhi.n	6d20 <_user_area_read+0x6c>
		if (!_IN_NVM_USER_ROW(base, offset + size - 1)) {
    6ce4:	1e73      	subs	r3, r6, #1
    6ce6:	442b      	add	r3, r5
    6ce8:	4423      	add	r3, r4
    6cea:	4a15      	ldr	r2, [pc, #84]	; (6d40 <_user_area_read+0x8c>)
    6cec:	4293      	cmp	r3, r2
    6cee:	d81a      	bhi.n	6d26 <_user_area_read+0x72>
	memcpy(buf, ((uint8_t *)base) + offset, size);
    6cf0:	4632      	mov	r2, r6
    6cf2:	1961      	adds	r1, r4, r5
    6cf4:	4638      	mov	r0, r7
    6cf6:	4b13      	ldr	r3, [pc, #76]	; (6d44 <_user_area_read+0x90>)
    6cf8:	4798      	blx	r3
	return ERR_NONE;
    6cfa:	2000      	movs	r0, #0
    6cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (_IS_NVM_SW_CALIB_AREA(base)) {
    6cfe:	f1a4 1380 	sub.w	r3, r4, #8388736	; 0x800080
    6d02:	2b04      	cmp	r3, #4
    6d04:	d812      	bhi.n	6d2c <_user_area_read+0x78>
		if (!_IN_NVM_SW_CALIB_AREA(base, offset)) {
    6d06:	1962      	adds	r2, r4, r5
    6d08:	4b0f      	ldr	r3, [pc, #60]	; (6d48 <_user_area_read+0x94>)
    6d0a:	429a      	cmp	r2, r3
    6d0c:	d811      	bhi.n	6d32 <_user_area_read+0x7e>
		if (!_IN_NVM_SW_CALIB_AREA(base, offset + size - 1)) {
    6d0e:	1e73      	subs	r3, r6, #1
    6d10:	442b      	add	r3, r5
    6d12:	4423      	add	r3, r4
    6d14:	4a0c      	ldr	r2, [pc, #48]	; (6d48 <_user_area_read+0x94>)
    6d16:	4293      	cmp	r3, r2
    6d18:	d9ea      	bls.n	6cf0 <_user_area_read+0x3c>
			return ERR_INVALID_ARG;
    6d1a:	f06f 000c 	mvn.w	r0, #12
}
    6d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_BAD_ADDRESS;
    6d20:	f06f 000d 	mvn.w	r0, #13
    6d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    6d26:	f06f 000c 	mvn.w	r0, #12
    6d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_UNSUPPORTED_OP;
    6d2c:	f06f 001a 	mvn.w	r0, #26
    6d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_BAD_ADDRESS;
    6d32:	f06f 000d 	mvn.w	r0, #13
    6d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d38:	0000e47c 	.word	0x0000e47c
    6d3c:	00006181 	.word	0x00006181
    6d40:	008041ff 	.word	0x008041ff
    6d44:	0000c8c1 	.word	0x0000c8c1
    6d48:	00800084 	.word	0x00800084

00006d4c <_user_area_write>:

int32_t _user_area_write(void *base, const uint32_t offset, const uint8_t *buf, const uint32_t size)
{
    6d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d4e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	uint32_t _row[NVMCTRL_PAGE_SIZE / 4]; /* Copy of user row. */

	/** Parameter check. */
	if (_IS_NVM_USER_ROW(base)) {
    6d52:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
    6d56:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
    6d5a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    6d5e:	d21b      	bcs.n	6d98 <_user_area_write+0x4c>
		if (!_IN_NVM_USER_ROW(base, offset)) {
    6d60:	1845      	adds	r5, r0, r1
    6d62:	4c16      	ldr	r4, [pc, #88]	; (6dbc <_user_area_write+0x70>)
    6d64:	42a5      	cmp	r5, r4
    6d66:	d822      	bhi.n	6dae <_user_area_write+0x62>
			return ERR_BAD_ADDRESS;
		} else if (!_IN_NVM_USER_ROW(base, offset + size - 1)) {
    6d68:	1e5c      	subs	r4, r3, #1
    6d6a:	440c      	add	r4, r1
    6d6c:	4404      	add	r4, r0
    6d6e:	4d13      	ldr	r5, [pc, #76]	; (6dbc <_user_area_write+0x70>)
    6d70:	42ac      	cmp	r4, r5
    6d72:	d81f      	bhi.n	6db4 <_user_area_write+0x68>
    6d74:	461d      	mov	r5, r3
    6d76:	4616      	mov	r6, r2
    6d78:	460c      	mov	r4, r1
    6d7a:	4601      	mov	r1, r0
		return ERR_DENIED;
	} else {
		return ERR_UNSUPPORTED_OP;
	}

	memcpy(_row, base, NVMCTRL_PAGE_SIZE);       /* Store previous data. */
    6d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d80:	4668      	mov	r0, sp
    6d82:	4f0f      	ldr	r7, [pc, #60]	; (6dc0 <_user_area_write+0x74>)
    6d84:	47b8      	blx	r7
	memcpy((uint8_t *)_row + offset, buf, size); /* Modify with buf data. */
    6d86:	462a      	mov	r2, r5
    6d88:	4631      	mov	r1, r6
    6d8a:	eb0d 0004 	add.w	r0, sp, r4
    6d8e:	47b8      	blx	r7

	return _user_row_write_exec(_row);
    6d90:	4668      	mov	r0, sp
    6d92:	4b0c      	ldr	r3, [pc, #48]	; (6dc4 <_user_area_write+0x78>)
    6d94:	4798      	blx	r3
    6d96:	e007      	b.n	6da8 <_user_area_write+0x5c>
	} else if (_IS_NVM_SW_CALIB_AREA(base)) {
    6d98:	f1a0 1080 	sub.w	r0, r0, #8388736	; 0x800080
		return ERR_UNSUPPORTED_OP;
    6d9c:	2805      	cmp	r0, #5
    6d9e:	bf34      	ite	cc
    6da0:	f06f 0010 	mvncc.w	r0, #16
    6da4:	f06f 001a 	mvncs.w	r0, #26
}
    6da8:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_BAD_ADDRESS;
    6dae:	f06f 000d 	mvn.w	r0, #13
    6db2:	e7f9      	b.n	6da8 <_user_area_write+0x5c>
			return ERR_INVALID_ARG;
    6db4:	f06f 000c 	mvn.w	r0, #12
    6db8:	e7f6      	b.n	6da8 <_user_area_write+0x5c>
    6dba:	bf00      	nop
    6dbc:	008041ff 	.word	0x008041ff
    6dc0:	0000c8c1 	.word	0x0000c8c1
    6dc4:	00006b81 	.word	0x00006b81

00006dc8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6dc8:	4b03      	ldr	r3, [pc, #12]	; (6dd8 <_osc32kctrl_init_sources+0x10>)
    6dca:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6dcc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6dd0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6dd2:	2201      	movs	r2, #1
    6dd4:	741a      	strb	r2, [r3, #16]
    6dd6:	4770      	bx	lr
    6dd8:	40001400 	.word	0x40001400

00006ddc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6ddc:	4770      	bx	lr
	...

00006de0 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6de0:	4a47      	ldr	r2, [pc, #284]	; (6f00 <_oscctrl_init_referenced_generators+0x120>)
    6de2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6de4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6de8:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6dec:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6dee:	4611      	mov	r1, r2
    6df0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6df4:	684b      	ldr	r3, [r1, #4]
    6df6:	4213      	tst	r3, r2
    6df8:	d1fc      	bne.n	6df4 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6dfa:	4a41      	ldr	r2, [pc, #260]	; (6f00 <_oscctrl_init_referenced_generators+0x120>)
    6dfc:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6dfe:	f013 0f04 	tst.w	r3, #4
    6e02:	d1fb      	bne.n	6dfc <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6e04:	4b3f      	ldr	r3, [pc, #252]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6e06:	2200      	movs	r2, #0
    6e08:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6e0a:	4a3f      	ldr	r2, [pc, #252]	; (6f08 <_oscctrl_init_referenced_generators+0x128>)
    6e0c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e0e:	461a      	mov	r2, r3
    6e10:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6e14:	f013 0f10 	tst.w	r3, #16
    6e18:	d1fa      	bne.n	6e10 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6e1a:	2200      	movs	r2, #0
    6e1c:	4b39      	ldr	r3, [pc, #228]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6e1e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e22:	461a      	mov	r2, r3
    6e24:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6e28:	f013 0f04 	tst.w	r3, #4
    6e2c:	d1fa      	bne.n	6e24 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6e2e:	2202      	movs	r2, #2
    6e30:	4b34      	ldr	r3, [pc, #208]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6e32:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e34:	461a      	mov	r2, r3
    6e36:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6e3a:	f013 0f02 	tst.w	r3, #2
    6e3e:	d1fa      	bne.n	6e36 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6e40:	4b30      	ldr	r3, [pc, #192]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6e44:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e46:	461a      	mov	r2, r3
    6e48:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6e4c:	f013 0f08 	tst.w	r3, #8
    6e50:	d1fa      	bne.n	6e48 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6e52:	2288      	movs	r2, #136	; 0x88
    6e54:	4b2b      	ldr	r3, [pc, #172]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6e56:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e5a:	461a      	mov	r2, r3
    6e5c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6e60:	f013 0f04 	tst.w	r3, #4
    6e64:	d1fa      	bne.n	6e5c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6e66:	2242      	movs	r2, #66	; 0x42
    6e68:	4b25      	ldr	r3, [pc, #148]	; (6f00 <_oscctrl_init_referenced_generators+0x120>)
    6e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6e6e:	2227      	movs	r2, #39	; 0x27
    6e70:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    6e74:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6e76:	461a      	mov	r2, r3
    6e78:	6d13      	ldr	r3, [r2, #80]	; 0x50
    6e7a:	f013 0f06 	tst.w	r3, #6
    6e7e:	d1fb      	bne.n	6e78 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6e80:	4b20      	ldr	r3, [pc, #128]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6e86:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6e88:	2202      	movs	r2, #2
    6e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6e8e:	461a      	mov	r2, r3
    6e90:	6d13      	ldr	r3, [r2, #80]	; 0x50
    6e92:	f013 0f02 	tst.w	r3, #2
    6e96:	d1fb      	bne.n	6e90 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6e98:	4b1a      	ldr	r3, [pc, #104]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    6e9e:	f013 0f01 	tst.w	r3, #1
    6ea2:	d026      	beq.n	6ef2 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6ea4:	4a17      	ldr	r2, [pc, #92]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6ea6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    6ea8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    6eac:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6eb0:	d1f9      	bne.n	6ea6 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6eb2:	4b14      	ldr	r3, [pc, #80]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    6eb6:	f012 0f01 	tst.w	r2, #1
    6eba:	d103      	bne.n	6ec4 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    6ebe:	f012 0f02 	tst.w	r2, #2
    6ec2:	d0f7      	beq.n	6eb4 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6ec4:	4a0e      	ldr	r2, [pc, #56]	; (6f00 <_oscctrl_init_referenced_generators+0x120>)
    6ec6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d1fc      	bne.n	6ec6 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6ecc:	4a0c      	ldr	r2, [pc, #48]	; (6f00 <_oscctrl_init_referenced_generators+0x120>)
    6ece:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6ed0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6ed4:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6ed8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6eda:	4611      	mov	r1, r2
    6edc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6ee0:	684b      	ldr	r3, [r1, #4]
    6ee2:	4213      	tst	r3, r2
    6ee4:	d1fc      	bne.n	6ee0 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6ee6:	4a06      	ldr	r2, [pc, #24]	; (6f00 <_oscctrl_init_referenced_generators+0x120>)
    6ee8:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6eea:	f013 0f04 	tst.w	r3, #4
    6eee:	d1fb      	bne.n	6ee8 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    6ef0:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6ef2:	4a04      	ldr	r2, [pc, #16]	; (6f04 <_oscctrl_init_referenced_generators+0x124>)
    6ef4:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6ef6:	f413 7f80 	tst.w	r3, #256	; 0x100
    6efa:	d0fb      	beq.n	6ef4 <_oscctrl_init_referenced_generators+0x114>
    6efc:	e7d9      	b.n	6eb2 <_oscctrl_init_referenced_generators+0xd2>
    6efe:	bf00      	nop
    6f00:	40001c00 	.word	0x40001c00
    6f04:	40001000 	.word	0x40001000
    6f08:	04010000 	.word	0x04010000

00006f0c <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    6f0c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6f0e:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6f10:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6f12:	4903      	ldr	r1, [pc, #12]	; (6f20 <_qspi_dma_rx_complete+0x14>)
    6f14:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6f16:	685b      	ldr	r3, [r3, #4]
    6f18:	b103      	cbz	r3, 6f1c <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    6f1a:	4798      	blx	r3
    6f1c:	bd08      	pop	{r3, pc}
    6f1e:	bf00      	nop
    6f20:	01000002 	.word	0x01000002

00006f24 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    6f24:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6f26:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6f28:	681a      	ldr	r2, [r3, #0]
    6f2a:	4903      	ldr	r1, [pc, #12]	; (6f38 <_qspi_dma_tx_complete+0x14>)
    6f2c:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6f2e:	685b      	ldr	r3, [r3, #4]
    6f30:	b103      	cbz	r3, 6f34 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    6f32:	4798      	blx	r3
    6f34:	bd08      	pop	{r3, pc}
    6f36:	bf00      	nop
    6f38:	01000002 	.word	0x01000002

00006f3c <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    6f3c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    6f3e:	6883      	ldr	r3, [r0, #8]
    6f40:	689b      	ldr	r3, [r3, #8]
    6f42:	b103      	cbz	r3, 6f46 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    6f44:	4798      	blx	r3
    6f46:	bd08      	pop	{r3, pc}

00006f48 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    6f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f4a:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    6f4c:	4604      	mov	r4, r0
    6f4e:	2800      	cmp	r0, #0
    6f50:	d027      	beq.n	6fa2 <_qspi_dma_init+0x5a>
    6f52:	1c08      	adds	r0, r1, #0
    6f54:	bf18      	it	ne
    6f56:	2001      	movne	r0, #1
    6f58:	22cb      	movs	r2, #203	; 0xcb
    6f5a:	4913      	ldr	r1, [pc, #76]	; (6fa8 <_qspi_dma_init+0x60>)
    6f5c:	4b13      	ldr	r3, [pc, #76]	; (6fac <_qspi_dma_init+0x64>)
    6f5e:	4798      	blx	r3
	dev->prvt = hw;
    6f60:	4626      	mov	r6, r4
    6f62:	f846 5b0c 	str.w	r5, [r6], #12
    6f66:	2301      	movs	r3, #1
    6f68:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    6f6a:	4b11      	ldr	r3, [pc, #68]	; (6fb0 <_qspi_dma_init+0x68>)
    6f6c:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    6f6e:	4b11      	ldr	r3, [pc, #68]	; (6fb4 <_qspi_dma_init+0x6c>)
    6f70:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    6f72:	211f      	movs	r1, #31
    6f74:	4630      	mov	r0, r6
    6f76:	4f10      	ldr	r7, [pc, #64]	; (6fb8 <_qspi_dma_init+0x70>)
    6f78:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6f7a:	68e3      	ldr	r3, [r4, #12]
    6f7c:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    6f7e:	68e3      	ldr	r3, [r4, #12]
    6f80:	4a0e      	ldr	r2, [pc, #56]	; (6fbc <_qspi_dma_init+0x74>)
    6f82:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6f84:	68e3      	ldr	r3, [r4, #12]
    6f86:	4d0e      	ldr	r5, [pc, #56]	; (6fc0 <_qspi_dma_init+0x78>)
    6f88:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    6f8a:	211e      	movs	r1, #30
    6f8c:	4630      	mov	r0, r6
    6f8e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6f90:	68e3      	ldr	r3, [r4, #12]
    6f92:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    6f94:	68e3      	ldr	r3, [r4, #12]
    6f96:	4a0b      	ldr	r2, [pc, #44]	; (6fc4 <_qspi_dma_init+0x7c>)
    6f98:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6f9a:	68e3      	ldr	r3, [r4, #12]
    6f9c:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    6f9e:	2000      	movs	r0, #0
    6fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fa2:	2000      	movs	r0, #0
    6fa4:	e7d8      	b.n	6f58 <_qspi_dma_init+0x10>
    6fa6:	bf00      	nop
    6fa8:	0000e49c 	.word	0x0000e49c
    6fac:	00006181 	.word	0x00006181
    6fb0:	06000011 	.word	0x06000011
    6fb4:	00243b00 	.word	0x00243b00
    6fb8:	00006a1d 	.word	0x00006a1d
    6fbc:	00006f0d 	.word	0x00006f0d
    6fc0:	00006f3d 	.word	0x00006f3d
    6fc4:	00006f25 	.word	0x00006f25

00006fc8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    6fc8:	b500      	push	{lr}
    6fca:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    6fcc:	4b0d      	ldr	r3, [pc, #52]	; (7004 <RAMECC_Handler+0x3c>)
    6fce:	789b      	ldrb	r3, [r3, #2]
    6fd0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    6fd2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    6fd4:	9b01      	ldr	r3, [sp, #4]
    6fd6:	f013 0f02 	tst.w	r3, #2
    6fda:	d006      	beq.n	6fea <RAMECC_Handler+0x22>
    6fdc:	4b0a      	ldr	r3, [pc, #40]	; (7008 <RAMECC_Handler+0x40>)
    6fde:	681b      	ldr	r3, [r3, #0]
    6fe0:	b11b      	cbz	r3, 6fea <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    6fe2:	4a08      	ldr	r2, [pc, #32]	; (7004 <RAMECC_Handler+0x3c>)
    6fe4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6fe6:	4798      	blx	r3
    6fe8:	e009      	b.n	6ffe <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    6fea:	9b01      	ldr	r3, [sp, #4]
    6fec:	f013 0f01 	tst.w	r3, #1
    6ff0:	d005      	beq.n	6ffe <RAMECC_Handler+0x36>
    6ff2:	4b05      	ldr	r3, [pc, #20]	; (7008 <RAMECC_Handler+0x40>)
    6ff4:	685b      	ldr	r3, [r3, #4]
    6ff6:	b113      	cbz	r3, 6ffe <RAMECC_Handler+0x36>
    6ff8:	4a02      	ldr	r2, [pc, #8]	; (7004 <RAMECC_Handler+0x3c>)
    6ffa:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6ffc:	4798      	blx	r3
	} else {
		return;
	}
}
    6ffe:	b003      	add	sp, #12
    7000:	f85d fb04 	ldr.w	pc, [sp], #4
    7004:	41020000 	.word	0x41020000
    7008:	20007d10 	.word	0x20007d10

0000700c <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    700c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    700e:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7010:	6913      	ldr	r3, [r2, #16]
    7012:	f013 0f60 	tst.w	r3, #96	; 0x60
    7016:	d1fb      	bne.n	7010 <_rtc_timer_set_period+0x4>
}
    7018:	4770      	bx	lr

0000701a <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    701a:	68c2      	ldr	r2, [r0, #12]
    701c:	6913      	ldr	r3, [r2, #16]
    701e:	f013 0f60 	tst.w	r3, #96	; 0x60
    7022:	d1fb      	bne.n	701c <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    7024:	6a10      	ldr	r0, [r2, #32]
}
    7026:	4770      	bx	lr

00007028 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    7028:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    702a:	f248 0103 	movw	r1, #32771	; 0x8003
    702e:	6913      	ldr	r3, [r2, #16]
    7030:	420b      	tst	r3, r1
    7032:	d1fc      	bne.n	702e <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7034:	8810      	ldrh	r0, [r2, #0]
}
    7036:	f3c0 0040 	ubfx	r0, r0, #1, #1
    703a:	4770      	bx	lr

0000703c <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    703c:	4770      	bx	lr
	...

00007040 <_rtc_timer_init>:
{
    7040:	b538      	push	{r3, r4, r5, lr}
    7042:	460c      	mov	r4, r1
	ASSERT(dev);
    7044:	4605      	mov	r5, r0
    7046:	2230      	movs	r2, #48	; 0x30
    7048:	4914      	ldr	r1, [pc, #80]	; (709c <_rtc_timer_init+0x5c>)
    704a:	3000      	adds	r0, #0
    704c:	bf18      	it	ne
    704e:	2001      	movne	r0, #1
    7050:	4b13      	ldr	r3, [pc, #76]	; (70a0 <_rtc_timer_init+0x60>)
    7052:	4798      	blx	r3
	dev->hw = hw;
    7054:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7056:	2301      	movs	r3, #1
    7058:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    705a:	f248 0203 	movw	r2, #32771	; 0x8003
    705e:	6923      	ldr	r3, [r4, #16]
    7060:	4213      	tst	r3, r2
    7062:	d1fc      	bne.n	705e <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7064:	68eb      	ldr	r3, [r5, #12]
    7066:	691a      	ldr	r2, [r3, #16]
    7068:	f012 0f01 	tst.w	r2, #1
    706c:	d1fb      	bne.n	7066 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    706e:	f248 0280 	movw	r2, #32896	; 0x8080
    7072:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7074:	f248 0103 	movw	r1, #32771	; 0x8003
    7078:	691a      	ldr	r2, [r3, #16]
    707a:	420a      	tst	r2, r1
    707c:	d1fc      	bne.n	7078 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    707e:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    7080:	2301      	movs	r3, #1
    7082:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7084:	6913      	ldr	r3, [r2, #16]
    7086:	f013 0f60 	tst.w	r3, #96	; 0x60
    708a:	d1fb      	bne.n	7084 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    708c:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    708e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7092:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    7094:	4b03      	ldr	r3, [pc, #12]	; (70a4 <_rtc_timer_init+0x64>)
    7096:	601d      	str	r5, [r3, #0]
}
    7098:	2000      	movs	r0, #0
    709a:	bd38      	pop	{r3, r4, r5, pc}
    709c:	0000e4b4 	.word	0x0000e4b4
    70a0:	00006181 	.word	0x00006181
    70a4:	2000097c 	.word	0x2000097c

000070a8 <_rtc_timer_deinit>:
{
    70a8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    70aa:	4604      	mov	r4, r0
    70ac:	b1c8      	cbz	r0, 70e2 <_rtc_timer_deinit+0x3a>
    70ae:	68c0      	ldr	r0, [r0, #12]
    70b0:	3000      	adds	r0, #0
    70b2:	bf18      	it	ne
    70b4:	2001      	movne	r0, #1
    70b6:	2252      	movs	r2, #82	; 0x52
    70b8:	490b      	ldr	r1, [pc, #44]	; (70e8 <_rtc_timer_deinit+0x40>)
    70ba:	4b0c      	ldr	r3, [pc, #48]	; (70ec <_rtc_timer_deinit+0x44>)
    70bc:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70be:	f44f 6200 	mov.w	r2, #2048	; 0x800
    70c2:	4b0b      	ldr	r3, [pc, #44]	; (70f0 <_rtc_timer_deinit+0x48>)
    70c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    70c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70cc:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    70d0:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    70d2:	2301      	movs	r3, #1
    70d4:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    70d6:	f248 0103 	movw	r1, #32771	; 0x8003
    70da:	6913      	ldr	r3, [r2, #16]
    70dc:	420b      	tst	r3, r1
    70de:	d1fc      	bne.n	70da <_rtc_timer_deinit+0x32>
}
    70e0:	bd10      	pop	{r4, pc}
    70e2:	2000      	movs	r0, #0
    70e4:	e7e7      	b.n	70b6 <_rtc_timer_deinit+0xe>
    70e6:	bf00      	nop
    70e8:	0000e4b4 	.word	0x0000e4b4
    70ec:	00006181 	.word	0x00006181
    70f0:	e000e100 	.word	0xe000e100

000070f4 <_rtc_timer_start>:
{
    70f4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    70f6:	4604      	mov	r4, r0
    70f8:	b310      	cbz	r0, 7140 <_rtc_timer_start+0x4c>
    70fa:	68c0      	ldr	r0, [r0, #12]
    70fc:	3000      	adds	r0, #0
    70fe:	bf18      	it	ne
    7100:	2001      	movne	r0, #1
    7102:	225e      	movs	r2, #94	; 0x5e
    7104:	490f      	ldr	r1, [pc, #60]	; (7144 <_rtc_timer_start+0x50>)
    7106:	4b10      	ldr	r3, [pc, #64]	; (7148 <_rtc_timer_start+0x54>)
    7108:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    710a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    710e:	4b0f      	ldr	r3, [pc, #60]	; (714c <_rtc_timer_start+0x58>)
    7110:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    7112:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    7114:	2300      	movs	r3, #0
    7116:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7118:	6913      	ldr	r3, [r2, #16]
    711a:	f013 0f08 	tst.w	r3, #8
    711e:	d1fb      	bne.n	7118 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    7120:	68e3      	ldr	r3, [r4, #12]
    7122:	691a      	ldr	r2, [r3, #16]
    7124:	f012 0f08 	tst.w	r2, #8
    7128:	d1fb      	bne.n	7122 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    712a:	881a      	ldrh	r2, [r3, #0]
    712c:	b292      	uxth	r2, r2
    712e:	f042 0202 	orr.w	r2, r2, #2
    7132:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7134:	f248 0103 	movw	r1, #32771	; 0x8003
    7138:	691a      	ldr	r2, [r3, #16]
    713a:	420a      	tst	r2, r1
    713c:	d1fc      	bne.n	7138 <_rtc_timer_start+0x44>
}
    713e:	bd10      	pop	{r4, pc}
    7140:	2000      	movs	r0, #0
    7142:	e7de      	b.n	7102 <_rtc_timer_start+0xe>
    7144:	0000e4b4 	.word	0x0000e4b4
    7148:	00006181 	.word	0x00006181
    714c:	e000e100 	.word	0xe000e100

00007150 <_rtc_timer_stop>:
{
    7150:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    7152:	4604      	mov	r4, r0
    7154:	b1a0      	cbz	r0, 7180 <_rtc_timer_stop+0x30>
    7156:	68c0      	ldr	r0, [r0, #12]
    7158:	3000      	adds	r0, #0
    715a:	bf18      	it	ne
    715c:	2001      	movne	r0, #1
    715e:	226b      	movs	r2, #107	; 0x6b
    7160:	4908      	ldr	r1, [pc, #32]	; (7184 <_rtc_timer_stop+0x34>)
    7162:	4b09      	ldr	r3, [pc, #36]	; (7188 <_rtc_timer_stop+0x38>)
    7164:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    7166:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    7168:	8813      	ldrh	r3, [r2, #0]
    716a:	f023 0302 	bic.w	r3, r3, #2
    716e:	041b      	lsls	r3, r3, #16
    7170:	0c1b      	lsrs	r3, r3, #16
    7172:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7174:	f248 0103 	movw	r1, #32771	; 0x8003
    7178:	6913      	ldr	r3, [r2, #16]
    717a:	420b      	tst	r3, r1
    717c:	d1fc      	bne.n	7178 <_rtc_timer_stop+0x28>
}
    717e:	bd10      	pop	{r4, pc}
    7180:	2000      	movs	r0, #0
    7182:	e7ec      	b.n	715e <_rtc_timer_stop+0xe>
    7184:	0000e4b4 	.word	0x0000e4b4
    7188:	00006181 	.word	0x00006181

0000718c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    718c:	4800      	ldr	r0, [pc, #0]	; (7190 <_rtc_get_timer+0x4>)
    718e:	4770      	bx	lr
    7190:	20000358 	.word	0x20000358

00007194 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    7194:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    7196:	4b08      	ldr	r3, [pc, #32]	; (71b8 <RTC_Handler+0x24>)
    7198:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    719a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    719c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    719e:	f413 7f80 	tst.w	r3, #256	; 0x100
    71a2:	d007      	beq.n	71b4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    71a4:	6823      	ldr	r3, [r4, #0]
    71a6:	b10b      	cbz	r3, 71ac <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    71a8:	4620      	mov	r0, r4
    71aa:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    71ac:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    71ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    71b2:	819a      	strh	r2, [r3, #12]
    71b4:	bd10      	pop	{r4, pc}
    71b6:	bf00      	nop
    71b8:	2000097c 	.word	0x2000097c

000071bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    71bc:	b470      	push	{r4, r5, r6}
    71be:	b089      	sub	sp, #36	; 0x24
    71c0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    71c2:	466c      	mov	r4, sp
    71c4:	4d0d      	ldr	r5, [pc, #52]	; (71fc <_sercom_get_hardware_index+0x40>)
    71c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    71c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    71ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    71ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    71d2:	9b00      	ldr	r3, [sp, #0]
    71d4:	42b3      	cmp	r3, r6
    71d6:	d00d      	beq.n	71f4 <_sercom_get_hardware_index+0x38>
    71d8:	4631      	mov	r1, r6
    71da:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    71dc:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    71de:	f853 2b04 	ldr.w	r2, [r3], #4
    71e2:	428a      	cmp	r2, r1
    71e4:	d007      	beq.n	71f6 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    71e6:	3001      	adds	r0, #1
    71e8:	2808      	cmp	r0, #8
    71ea:	d1f8      	bne.n	71de <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    71ec:	2000      	movs	r0, #0
}
    71ee:	b009      	add	sp, #36	; 0x24
    71f0:	bc70      	pop	{r4, r5, r6}
    71f2:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    71f4:	2000      	movs	r0, #0
			return i;
    71f6:	b2c0      	uxtb	r0, r0
    71f8:	e7f9      	b.n	71ee <_sercom_get_hardware_index+0x32>
    71fa:	bf00      	nop
    71fc:	0000e4cc 	.word	0x0000e4cc

00007200 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    7200:	b510      	push	{r4, lr}
	void *hw = device->hw;
    7202:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7204:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    7206:	f013 0f01 	tst.w	r3, #1
    720a:	d003      	beq.n	7214 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    720c:	7da3      	ldrb	r3, [r4, #22]
    720e:	f013 0f01 	tst.w	r3, #1
    7212:	d112      	bne.n	723a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7214:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    7216:	f013 0f02 	tst.w	r3, #2
    721a:	d003      	beq.n	7224 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    721c:	7da3      	ldrb	r3, [r4, #22]
    721e:	f013 0f02 	tst.w	r3, #2
    7222:	d10f      	bne.n	7244 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7224:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    7226:	f013 0f04 	tst.w	r3, #4
    722a:	d015      	beq.n	7258 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    722c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    722e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    7232:	b163      	cbz	r3, 724e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    7234:	23ff      	movs	r3, #255	; 0xff
    7236:	8363      	strh	r3, [r4, #26]
    7238:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    723a:	2301      	movs	r3, #1
    723c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    723e:	6803      	ldr	r3, [r0, #0]
    7240:	4798      	blx	r3
    7242:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    7244:	2302      	movs	r3, #2
    7246:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    7248:	6883      	ldr	r3, [r0, #8]
    724a:	4798      	blx	r3
    724c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    724e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    7250:	6843      	ldr	r3, [r0, #4]
    7252:	b2c9      	uxtb	r1, r1
    7254:	4798      	blx	r3
    7256:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    7258:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    725a:	09db      	lsrs	r3, r3, #7
    725c:	d100      	bne.n	7260 <_sercom_usart_interrupt_handler+0x60>
    725e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    7260:	2380      	movs	r3, #128	; 0x80
    7262:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    7264:	68c3      	ldr	r3, [r0, #12]
    7266:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    7268:	8b63      	ldrh	r3, [r4, #26]
    726a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    726c:	8363      	strh	r3, [r4, #26]
    726e:	e7f6      	b.n	725e <_sercom_usart_interrupt_handler+0x5e>

00007270 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    7270:	4b11      	ldr	r3, [pc, #68]	; (72b8 <_sercom_init_irq_param+0x48>)
    7272:	4298      	cmp	r0, r3
    7274:	d011      	beq.n	729a <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    7276:	4b11      	ldr	r3, [pc, #68]	; (72bc <_sercom_init_irq_param+0x4c>)
    7278:	4298      	cmp	r0, r3
    727a:	d011      	beq.n	72a0 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    727c:	4b10      	ldr	r3, [pc, #64]	; (72c0 <_sercom_init_irq_param+0x50>)
    727e:	4298      	cmp	r0, r3
    7280:	d011      	beq.n	72a6 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    7282:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    7286:	d011      	beq.n	72ac <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    7288:	4b0e      	ldr	r3, [pc, #56]	; (72c4 <_sercom_init_irq_param+0x54>)
    728a:	4298      	cmp	r0, r3
    728c:	d011      	beq.n	72b2 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    728e:	4b0e      	ldr	r3, [pc, #56]	; (72c8 <_sercom_init_irq_param+0x58>)
    7290:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    7292:	bf04      	itt	eq
    7294:	4b0d      	ldreq	r3, [pc, #52]	; (72cc <_sercom_init_irq_param+0x5c>)
    7296:	6159      	streq	r1, [r3, #20]
    7298:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    729a:	4b0c      	ldr	r3, [pc, #48]	; (72cc <_sercom_init_irq_param+0x5c>)
    729c:	6019      	str	r1, [r3, #0]
    729e:	e7f0      	b.n	7282 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    72a0:	4b0a      	ldr	r3, [pc, #40]	; (72cc <_sercom_init_irq_param+0x5c>)
    72a2:	6059      	str	r1, [r3, #4]
    72a4:	e7f0      	b.n	7288 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    72a6:	4b09      	ldr	r3, [pc, #36]	; (72cc <_sercom_init_irq_param+0x5c>)
    72a8:	6099      	str	r1, [r3, #8]
    72aa:	e7f0      	b.n	728e <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    72ac:	4b07      	ldr	r3, [pc, #28]	; (72cc <_sercom_init_irq_param+0x5c>)
    72ae:	60d9      	str	r1, [r3, #12]
    72b0:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    72b2:	4b06      	ldr	r3, [pc, #24]	; (72cc <_sercom_init_irq_param+0x5c>)
    72b4:	6119      	str	r1, [r3, #16]
    72b6:	4770      	bx	lr
    72b8:	40003000 	.word	0x40003000
    72bc:	40003400 	.word	0x40003400
    72c0:	41014000 	.word	0x41014000
    72c4:	43000400 	.word	0x43000400
    72c8:	43000800 	.word	0x43000800
    72cc:	20000980 	.word	0x20000980

000072d0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    72d0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    72d2:	4b03      	ldr	r3, [pc, #12]	; (72e0 <_sercom_get_irq_num+0x10>)
    72d4:	4798      	blx	r3
    72d6:	0080      	lsls	r0, r0, #2
    72d8:	302e      	adds	r0, #46	; 0x2e
}
    72da:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    72de:	bd08      	pop	{r3, pc}
    72e0:	000071bd 	.word	0x000071bd

000072e4 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    72e4:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    72e6:	f013 0f01 	tst.w	r3, #1
    72ea:	d109      	bne.n	7300 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    72ec:	6803      	ldr	r3, [r0, #0]
    72ee:	f043 0302 	orr.w	r3, r3, #2
    72f2:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    72f4:	69c3      	ldr	r3, [r0, #28]
    72f6:	f013 0f03 	tst.w	r3, #3
    72fa:	d1fb      	bne.n	72f4 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    72fc:	2000      	movs	r0, #0
    72fe:	4770      	bx	lr
		return ERR_BUSY;
    7300:	f06f 0003 	mvn.w	r0, #3
}
    7304:	4770      	bx	lr
	...

00007308 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    7308:	b538      	push	{r3, r4, r5, lr}
    730a:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    730c:	4b0b      	ldr	r3, [pc, #44]	; (733c <_spi_async_enable+0x34>)
    730e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7310:	4620      	mov	r0, r4
    7312:	4b0b      	ldr	r3, [pc, #44]	; (7340 <_spi_async_enable+0x38>)
    7314:	4798      	blx	r3
    7316:	1d01      	adds	r1, r0, #4
    7318:	b2c9      	uxtb	r1, r1
    731a:	2501      	movs	r5, #1
    731c:	4c09      	ldr	r4, [pc, #36]	; (7344 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    731e:	1c43      	adds	r3, r0, #1
    7320:	b2db      	uxtb	r3, r3
    7322:	0942      	lsrs	r2, r0, #5
    7324:	f000 001f 	and.w	r0, r0, #31
    7328:	fa05 f000 	lsl.w	r0, r5, r0
    732c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    7330:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    7332:	4299      	cmp	r1, r3
    7334:	d1f3      	bne.n	731e <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    7336:	2000      	movs	r0, #0
    7338:	bd38      	pop	{r3, r4, r5, pc}
    733a:	bf00      	nop
    733c:	000072e5 	.word	0x000072e5
    7340:	000072d1 	.word	0x000072d1
    7344:	e000e100 	.word	0xe000e100

00007348 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7348:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    734a:	f013 0f03 	tst.w	r3, #3
    734e:	d111      	bne.n	7374 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7350:	69c3      	ldr	r3, [r0, #28]
    7352:	f013 0f03 	tst.w	r3, #3
    7356:	d1fb      	bne.n	7350 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    7358:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    735a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    735e:	0709      	lsls	r1, r1, #28
    7360:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    7364:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7366:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7368:	69c3      	ldr	r3, [r0, #28]
    736a:	f013 0f03 	tst.w	r3, #3
    736e:	d1fb      	bne.n	7368 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    7370:	2000      	movs	r0, #0
    7372:	4770      	bx	lr
		return ERR_BUSY;
    7374:	f06f 0003 	mvn.w	r0, #3
}
    7378:	4770      	bx	lr

0000737a <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    737a:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    737c:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    737e:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    7380:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    7382:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    7384:	f013 0f01 	tst.w	r3, #1
    7388:	d109      	bne.n	739e <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    738a:	f013 0f04 	tst.w	r3, #4
    738e:	d109      	bne.n	73a4 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    7390:	f013 0f02 	tst.w	r3, #2
    7394:	d109      	bne.n	73aa <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    7396:	f013 0f80 	tst.w	r3, #128	; 0x80
    739a:	d10b      	bne.n	73b4 <_spi_handler+0x3a>
    739c:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    739e:	6883      	ldr	r3, [r0, #8]
    73a0:	4798      	blx	r3
    73a2:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    73a4:	68c3      	ldr	r3, [r0, #12]
    73a6:	4798      	blx	r3
    73a8:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    73aa:	2302      	movs	r3, #2
    73ac:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    73ae:	6903      	ldr	r3, [r0, #16]
    73b0:	4798      	blx	r3
    73b2:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    73b4:	2304      	movs	r3, #4
    73b6:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    73b8:	2380      	movs	r3, #128	; 0x80
    73ba:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    73bc:	6943      	ldr	r3, [r0, #20]
    73be:	f06f 0112 	mvn.w	r1, #18
    73c2:	4798      	blx	r3
	}
}
    73c4:	e7ea      	b.n	739c <_spi_handler+0x22>
	...

000073c8 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    73c8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    73ca:	4b03      	ldr	r3, [pc, #12]	; (73d8 <_spi_get_tx_dma_channel+0x10>)
    73cc:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    73ce:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    73d0:	bf0c      	ite	eq
    73d2:	2008      	moveq	r0, #8
    73d4:	2000      	movne	r0, #0
    73d6:	bd08      	pop	{r3, pc}
    73d8:	000071bd 	.word	0x000071bd

000073dc <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    73dc:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    73de:	4b03      	ldr	r3, [pc, #12]	; (73ec <_spi_get_rx_dma_channel+0x10>)
    73e0:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    73e2:	2807      	cmp	r0, #7
    73e4:	bf8c      	ite	hi
    73e6:	2000      	movhi	r0, #0
    73e8:	2001      	movls	r0, #1
    73ea:	bd08      	pop	{r3, pc}
    73ec:	000071bd 	.word	0x000071bd

000073f0 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    73f0:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    73f2:	6883      	ldr	r3, [r0, #8]
    73f4:	689b      	ldr	r3, [r3, #8]
    73f6:	b103      	cbz	r3, 73fa <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    73f8:	4798      	blx	r3
    73fa:	bd08      	pop	{r3, pc}

000073fc <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    73fc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    73fe:	6883      	ldr	r3, [r0, #8]
    7400:	685b      	ldr	r3, [r3, #4]
    7402:	b103      	cbz	r3, 7406 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    7404:	4798      	blx	r3
    7406:	bd08      	pop	{r3, pc}

00007408 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    7408:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    740a:	6883      	ldr	r3, [r0, #8]
    740c:	68db      	ldr	r3, [r3, #12]
    740e:	b103      	cbz	r3, 7412 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    7410:	4798      	blx	r3
    7412:	bd08      	pop	{r3, pc}

00007414 <_usart_init>:
{
    7414:	b510      	push	{r4, lr}
    7416:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7418:	4b48      	ldr	r3, [pc, #288]	; (753c <_usart_init+0x128>)
    741a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    741c:	2800      	cmp	r0, #0
    741e:	d06a      	beq.n	74f6 <_usart_init+0xe2>
    7420:	2801      	cmp	r0, #1
    7422:	d062      	beq.n	74ea <_usart_init+0xd6>
    7424:	2802      	cmp	r0, #2
    7426:	d062      	beq.n	74ee <_usart_init+0xda>
    7428:	2804      	cmp	r0, #4
    742a:	d062      	beq.n	74f2 <_usart_init+0xde>
    742c:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    742e:	bf08      	it	eq
    7430:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    7432:	d006      	beq.n	7442 <_usart_init+0x2e>
	ASSERT(false);
    7434:	f240 2276 	movw	r2, #630	; 0x276
    7438:	4941      	ldr	r1, [pc, #260]	; (7540 <_usart_init+0x12c>)
    743a:	2000      	movs	r0, #0
    743c:	4b41      	ldr	r3, [pc, #260]	; (7544 <_usart_init+0x130>)
    743e:	4798      	blx	r3
	return 0;
    7440:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    7442:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    7444:	f013 0f01 	tst.w	r3, #1
    7448:	d122      	bne.n	7490 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    744a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    744e:	4a3e      	ldr	r2, [pc, #248]	; (7548 <_usart_init+0x134>)
    7450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7456:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    745a:	69e3      	ldr	r3, [r4, #28]
    745c:	f013 0f03 	tst.w	r3, #3
    7460:	d1fb      	bne.n	745a <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    7462:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    7464:	f013 0f02 	tst.w	r3, #2
    7468:	d00b      	beq.n	7482 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    746a:	6823      	ldr	r3, [r4, #0]
    746c:	f023 0302 	bic.w	r3, r3, #2
    7470:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7472:	69e3      	ldr	r3, [r4, #28]
    7474:	f013 0f03 	tst.w	r3, #3
    7478:	d1fb      	bne.n	7472 <_usart_init+0x5e>
    747a:	69e3      	ldr	r3, [r4, #28]
    747c:	f013 0f02 	tst.w	r3, #2
    7480:	d1fb      	bne.n	747a <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    7482:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    7486:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7488:	69e3      	ldr	r3, [r4, #28]
    748a:	f013 0f03 	tst.w	r3, #3
    748e:	d1fb      	bne.n	7488 <_usart_init+0x74>
    7490:	69e3      	ldr	r3, [r4, #28]
    7492:	f013 0f01 	tst.w	r3, #1
    7496:	d1fb      	bne.n	7490 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    7498:	460a      	mov	r2, r1
    749a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    749e:	4b2a      	ldr	r3, [pc, #168]	; (7548 <_usart_init+0x134>)
    74a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    74a4:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    74a6:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    74a8:	69e3      	ldr	r3, [r4, #28]
    74aa:	f013 0f03 	tst.w	r3, #3
    74ae:	d1fb      	bne.n	74a8 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    74b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    74b4:	4924      	ldr	r1, [pc, #144]	; (7548 <_usart_init+0x134>)
    74b6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    74ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    74bc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    74be:	69e3      	ldr	r3, [r4, #28]
    74c0:	f013 0f1f 	tst.w	r3, #31
    74c4:	d1fb      	bne.n	74be <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    74c6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    74ca:	491f      	ldr	r1, [pc, #124]	; (7548 <_usart_init+0x134>)
    74cc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    74d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    74d2:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    74d4:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    74d8:	d10f      	bne.n	74fa <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    74da:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    74de:	491a      	ldr	r1, [pc, #104]	; (7548 <_usart_init+0x134>)
    74e0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    74e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    74e6:	81a3      	strh	r3, [r4, #12]
    74e8:	e016      	b.n	7518 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    74ea:	2101      	movs	r1, #1
    74ec:	e7a9      	b.n	7442 <_usart_init+0x2e>
    74ee:	2102      	movs	r1, #2
    74f0:	e7a7      	b.n	7442 <_usart_init+0x2e>
    74f2:	2103      	movs	r1, #3
    74f4:	e7a5      	b.n	7442 <_usart_init+0x2e>
    74f6:	2100      	movs	r1, #0
    74f8:	e7a3      	b.n	7442 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    74fa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    74fe:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7502:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    7504:	89a1      	ldrh	r1, [r4, #12]
    7506:	f360 010c 	bfi	r1, r0, #0, #13
    750a:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    750c:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    7510:	89a3      	ldrh	r3, [r4, #12]
    7512:	f361 334f 	bfi	r3, r1, #13, #3
    7516:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    7518:	4b0b      	ldr	r3, [pc, #44]	; (7548 <_usart_init+0x134>)
    751a:	0051      	lsls	r1, r2, #1
    751c:	1888      	adds	r0, r1, r2
    751e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7522:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    7526:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    7528:	440a      	add	r2, r1
    752a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    752e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    7532:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    7536:	2000      	movs	r0, #0
    7538:	bd10      	pop	{r4, pc}
    753a:	bf00      	nop
    753c:	000071bd 	.word	0x000071bd
    7540:	0000e5a0 	.word	0x0000e5a0
    7544:	00006181 	.word	0x00006181
    7548:	0000e4cc 	.word	0x0000e4cc

0000754c <_get_i2cm_index>:
{
    754c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    754e:	4b07      	ldr	r3, [pc, #28]	; (756c <_get_i2cm_index+0x20>)
    7550:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    7552:	2805      	cmp	r0, #5
    7554:	d008      	beq.n	7568 <_get_i2cm_index+0x1c>
	ASSERT(false);
    7556:	f240 32ed 	movw	r2, #1005	; 0x3ed
    755a:	4905      	ldr	r1, [pc, #20]	; (7570 <_get_i2cm_index+0x24>)
    755c:	2000      	movs	r0, #0
    755e:	4b05      	ldr	r3, [pc, #20]	; (7574 <_get_i2cm_index+0x28>)
    7560:	4798      	blx	r3
	return -1;
    7562:	f04f 30ff 	mov.w	r0, #4294967295
}
    7566:	bd08      	pop	{r3, pc}
			return i;
    7568:	2000      	movs	r0, #0
    756a:	bd08      	pop	{r3, pc}
    756c:	000071bd 	.word	0x000071bd
    7570:	0000e5a0 	.word	0x0000e5a0
    7574:	00006181 	.word	0x00006181

00007578 <_i2c_m_sync_init_impl>:
{
    7578:	b538      	push	{r3, r4, r5, lr}
    757a:	4605      	mov	r5, r0
    757c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    757e:	4608      	mov	r0, r1
    7580:	4b34      	ldr	r3, [pc, #208]	; (7654 <_i2c_m_sync_init_impl+0xdc>)
    7582:	4798      	blx	r3
    7584:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    7586:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7588:	f013 0f01 	tst.w	r3, #1
    758c:	d123      	bne.n	75d6 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    758e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7592:	4a31      	ldr	r2, [pc, #196]	; (7658 <_i2c_m_sync_init_impl+0xe0>)
    7594:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7598:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    759c:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    75a0:	69e3      	ldr	r3, [r4, #28]
    75a2:	f013 0f03 	tst.w	r3, #3
    75a6:	d1fb      	bne.n	75a0 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    75a8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    75aa:	f013 0f02 	tst.w	r3, #2
    75ae:	d00b      	beq.n	75c8 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    75b0:	6823      	ldr	r3, [r4, #0]
    75b2:	f023 0302 	bic.w	r3, r3, #2
    75b6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    75b8:	69e3      	ldr	r3, [r4, #28]
    75ba:	f013 0f03 	tst.w	r3, #3
    75be:	d1fb      	bne.n	75b8 <_i2c_m_sync_init_impl+0x40>
    75c0:	69e3      	ldr	r3, [r4, #28]
    75c2:	f013 0f02 	tst.w	r3, #2
    75c6:	d1fb      	bne.n	75c0 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    75c8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    75cc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    75ce:	69e3      	ldr	r3, [r4, #28]
    75d0:	f013 0f03 	tst.w	r3, #3
    75d4:	d1fb      	bne.n	75ce <_i2c_m_sync_init_impl+0x56>
    75d6:	69e3      	ldr	r3, [r4, #28]
    75d8:	f013 0f01 	tst.w	r3, #1
    75dc:	d1fb      	bne.n	75d6 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    75de:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    75e2:	4a1d      	ldr	r2, [pc, #116]	; (7658 <_i2c_m_sync_init_impl+0xe0>)
    75e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    75e8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    75ec:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    75ee:	69e3      	ldr	r3, [r4, #28]
    75f0:	f013 0f03 	tst.w	r3, #3
    75f4:	d1fb      	bne.n	75ee <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    75f6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    75fa:	4917      	ldr	r1, [pc, #92]	; (7658 <_i2c_m_sync_init_impl+0xe0>)
    75fc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7600:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7604:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7606:	69e3      	ldr	r3, [r4, #28]
    7608:	f013 0f04 	tst.w	r3, #4
    760c:	d1fb      	bne.n	7606 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    760e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7612:	4911      	ldr	r1, [pc, #68]	; (7658 <_i2c_m_sync_init_impl+0xe0>)
    7614:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    761c:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    761e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    7622:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7624:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7626:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    762a:	2b01      	cmp	r3, #1
    762c:	bf94      	ite	ls
    762e:	2300      	movls	r3, #0
    7630:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7632:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7636:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7638:	69e3      	ldr	r3, [r4, #28]
    763a:	f013 0f04 	tst.w	r3, #4
    763e:	d1fb      	bne.n	7638 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    7640:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7644:	4b04      	ldr	r3, [pc, #16]	; (7658 <_i2c_m_sync_init_impl+0xe0>)
    7646:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    764a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    764e:	81eb      	strh	r3, [r5, #14]
}
    7650:	2000      	movs	r0, #0
    7652:	bd38      	pop	{r3, r4, r5, pc}
    7654:	0000754d 	.word	0x0000754d
    7658:	0000e4cc 	.word	0x0000e4cc

0000765c <_sercom_i2c_m_irq_handler>:
{
    765c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7660:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    7662:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7664:	7e26      	ldrb	r6, [r4, #24]
    7666:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    7668:	f8df 8234 	ldr.w	r8, [pc, #564]	; 78a0 <_sercom_i2c_m_irq_handler+0x244>
    766c:	f240 425f 	movw	r2, #1119	; 0x45f
    7670:	4641      	mov	r1, r8
    7672:	3000      	adds	r0, #0
    7674:	bf18      	it	ne
    7676:	2001      	movne	r0, #1
    7678:	4f88      	ldr	r7, [pc, #544]	; (789c <_sercom_i2c_m_irq_handler+0x240>)
    767a:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    767c:	6928      	ldr	r0, [r5, #16]
    767e:	f44f 628c 	mov.w	r2, #1120	; 0x460
    7682:	4641      	mov	r1, r8
    7684:	3000      	adds	r0, #0
    7686:	bf18      	it	ne
    7688:	2001      	movne	r0, #1
    768a:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    768c:	f016 0f80 	tst.w	r6, #128	; 0x80
    7690:	f040 80f4 	bne.w	787c <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7694:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7696:	69e3      	ldr	r3, [r4, #28]
    7698:	f013 0f04 	tst.w	r3, #4
    769c:	d1fb      	bne.n	7696 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    769e:	8b63      	ldrh	r3, [r4, #26]
    76a0:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    76a2:	f016 0f01 	tst.w	r6, #1
    76a6:	f000 8090 	beq.w	77ca <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    76aa:	f013 0f02 	tst.w	r3, #2
    76ae:	d022      	beq.n	76f6 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    76b0:	2201      	movs	r2, #1
    76b2:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    76b4:	886a      	ldrh	r2, [r5, #2]
    76b6:	b292      	uxth	r2, r2
    76b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    76bc:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    76be:	886a      	ldrh	r2, [r5, #2]
    76c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    76c4:	0412      	lsls	r2, r2, #16
    76c6:	0c12      	lsrs	r2, r2, #16
    76c8:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    76ca:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    76ce:	2b00      	cmp	r3, #0
    76d0:	bf14      	ite	ne
    76d2:	f06f 0104 	mvnne.w	r1, #4
    76d6:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    76da:	886b      	ldrh	r3, [r5, #2]
    76dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    76e0:	041b      	lsls	r3, r3, #16
    76e2:	0c1b      	lsrs	r3, r3, #16
    76e4:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    76e6:	696b      	ldr	r3, [r5, #20]
    76e8:	2b00      	cmp	r3, #0
    76ea:	f000 80c5 	beq.w	7878 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    76ee:	4628      	mov	r0, r5
    76f0:	4798      	blx	r3
    76f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    76f6:	f013 0f04 	tst.w	r3, #4
    76fa:	d124      	bne.n	7746 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    76fc:	886b      	ldrh	r3, [r5, #2]
    76fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7702:	d03e      	beq.n	7782 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    7704:	882b      	ldrh	r3, [r5, #0]
    7706:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7708:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    770c:	69e3      	ldr	r3, [r4, #28]
    770e:	f013 0f04 	tst.w	r3, #4
    7712:	d1fb      	bne.n	770c <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7714:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    771a:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    771e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7720:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7722:	69e3      	ldr	r3, [r4, #28]
    7724:	f013 0f04 	tst.w	r3, #4
    7728:	d1fb      	bne.n	7722 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    772a:	886b      	ldrh	r3, [r5, #2]
    772c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    7730:	041b      	lsls	r3, r3, #16
    7732:	0c1b      	lsrs	r3, r3, #16
    7734:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    7736:	69ab      	ldr	r3, [r5, #24]
    7738:	2b00      	cmp	r3, #0
    773a:	f000 8088 	beq.w	784e <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    773e:	4628      	mov	r0, r5
    7740:	4798      	blx	r3
    7742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    7746:	686b      	ldr	r3, [r5, #4]
    7748:	2b00      	cmp	r3, #0
    774a:	dd04      	ble.n	7756 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    774c:	886b      	ldrh	r3, [r5, #2]
    774e:	b29b      	uxth	r3, r3
    7750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7754:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    7756:	886b      	ldrh	r3, [r5, #2]
    7758:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    775c:	d108      	bne.n	7770 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    775e:	886b      	ldrh	r3, [r5, #2]
    7760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7764:	041b      	lsls	r3, r3, #16
    7766:	0c1b      	lsrs	r3, r3, #16
    7768:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    776a:	f06f 0101 	mvn.w	r1, #1
    776e:	e7b4      	b.n	76da <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7770:	6863      	ldr	r3, [r4, #4]
    7772:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    7776:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7778:	69e3      	ldr	r3, [r4, #28]
    777a:	f013 0f04 	tst.w	r3, #4
    777e:	d1fb      	bne.n	7778 <_sercom_i2c_m_irq_handler+0x11c>
    7780:	e7ed      	b.n	775e <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    7782:	686b      	ldr	r3, [r5, #4]
    7784:	b99b      	cbnz	r3, 77ae <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    7786:	886b      	ldrh	r3, [r5, #2]
    7788:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    778c:	d106      	bne.n	779c <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    778e:	886b      	ldrh	r3, [r5, #2]
    7790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7794:	041b      	lsls	r3, r3, #16
    7796:	0c1b      	lsrs	r3, r3, #16
    7798:	806b      	strh	r3, [r5, #2]
    779a:	e7cc      	b.n	7736 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    779c:	6863      	ldr	r3, [r4, #4]
    779e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    77a2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    77a4:	69e3      	ldr	r3, [r4, #28]
    77a6:	f013 0f04 	tst.w	r3, #4
    77aa:	d1fb      	bne.n	77a4 <_sercom_i2c_m_irq_handler+0x148>
    77ac:	e7ef      	b.n	778e <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    77ae:	68ab      	ldr	r3, [r5, #8]
    77b0:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    77b2:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    77b4:	69e3      	ldr	r3, [r4, #28]
    77b6:	f013 0f04 	tst.w	r3, #4
    77ba:	d1fb      	bne.n	77b4 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    77bc:	68ab      	ldr	r3, [r5, #8]
    77be:	3301      	adds	r3, #1
    77c0:	60ab      	str	r3, [r5, #8]
				msg->len--;
    77c2:	686b      	ldr	r3, [r5, #4]
    77c4:	3b01      	subs	r3, #1
    77c6:	606b      	str	r3, [r5, #4]
    77c8:	e7b5      	b.n	7736 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    77ca:	f016 0f02 	tst.w	r6, #2
    77ce:	d041      	beq.n	7854 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    77d0:	686a      	ldr	r2, [r5, #4]
    77d2:	2a00      	cmp	r2, #0
    77d4:	d036      	beq.n	7844 <_sercom_i2c_m_irq_handler+0x1e8>
    77d6:	f013 0f04 	tst.w	r3, #4
    77da:	d133      	bne.n	7844 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    77dc:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    77e0:	3a01      	subs	r2, #1
    77e2:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    77e4:	2a00      	cmp	r2, #0
    77e6:	d137      	bne.n	7858 <_sercom_i2c_m_irq_handler+0x1fc>
    77e8:	2900      	cmp	r1, #0
    77ea:	d039      	beq.n	7860 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    77ec:	886b      	ldrh	r3, [r5, #2]
    77ee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    77f2:	d116      	bne.n	7822 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    77f4:	886b      	ldrh	r3, [r5, #2]
    77f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    77fa:	041b      	lsls	r3, r3, #16
    77fc:	0c1b      	lsrs	r3, r3, #16
    77fe:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7800:	68aa      	ldr	r2, [r5, #8]
    7802:	1c53      	adds	r3, r2, #1
    7804:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7806:	69e3      	ldr	r3, [r4, #28]
    7808:	f013 0f04 	tst.w	r3, #4
    780c:	d1fb      	bne.n	7806 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    780e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7810:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7812:	2302      	movs	r3, #2
    7814:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    7816:	69eb      	ldr	r3, [r5, #28]
    7818:	b1e3      	cbz	r3, 7854 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    781a:	4628      	mov	r0, r5
    781c:	4798      	blx	r3
    781e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7822:	6863      	ldr	r3, [r4, #4]
    7824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7828:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    782a:	69e3      	ldr	r3, [r4, #28]
    782c:	f013 0f04 	tst.w	r3, #4
    7830:	d1fb      	bne.n	782a <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7832:	6863      	ldr	r3, [r4, #4]
    7834:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    7838:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    783a:	69e3      	ldr	r3, [r4, #28]
    783c:	f013 0f04 	tst.w	r3, #4
    7840:	d1fb      	bne.n	783a <_sercom_i2c_m_irq_handler+0x1de>
    7842:	e7d7      	b.n	77f4 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7844:	2302      	movs	r3, #2
    7846:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    7848:	f06f 0101 	mvn.w	r1, #1
    784c:	e745      	b.n	76da <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    784e:	f016 0f02 	tst.w	r6, #2
    7852:	d1e0      	bne.n	7816 <_sercom_i2c_m_irq_handler+0x1ba>
    7854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7858:	2a01      	cmp	r2, #1
    785a:	d1d1      	bne.n	7800 <_sercom_i2c_m_irq_handler+0x1a4>
    785c:	2900      	cmp	r1, #0
    785e:	d0cf      	beq.n	7800 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7860:	6863      	ldr	r3, [r4, #4]
    7862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    7866:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7868:	69e3      	ldr	r3, [r4, #28]
    786a:	f013 0f04 	tst.w	r3, #4
    786e:	d1fb      	bne.n	7868 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    7870:	686b      	ldr	r3, [r5, #4]
    7872:	2b00      	cmp	r3, #0
    7874:	d0ba      	beq.n	77ec <_sercom_i2c_m_irq_handler+0x190>
    7876:	e7c3      	b.n	7800 <_sercom_i2c_m_irq_handler+0x1a4>
    7878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    787c:	886b      	ldrh	r3, [r5, #2]
    787e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7882:	041b      	lsls	r3, r3, #16
    7884:	0c1b      	lsrs	r3, r3, #16
    7886:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    7888:	696b      	ldr	r3, [r5, #20]
    788a:	2b00      	cmp	r3, #0
    788c:	d0e2      	beq.n	7854 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    788e:	f06f 0104 	mvn.w	r1, #4
    7892:	4628      	mov	r0, r5
    7894:	4798      	blx	r3
    7896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    789a:	bf00      	nop
    789c:	00006181 	.word	0x00006181
    78a0:	0000e5a0 	.word	0x0000e5a0

000078a4 <_usart_set_parity>:
{
    78a4:	b570      	push	{r4, r5, r6, lr}
    78a6:	b082      	sub	sp, #8
    78a8:	4604      	mov	r4, r0
    78aa:	460e      	mov	r6, r1
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    78ac:	69e3      	ldr	r3, [r4, #28]
    78ae:	f013 0f03 	tst.w	r3, #3
    78b2:	d1fb      	bne.n	78ac <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    78b4:	6825      	ldr	r5, [r4, #0]
	return (bool)tmp;
    78b6:	f3c5 0540 	ubfx	r5, r5, #1, #1
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    78ba:	6823      	ldr	r3, [r4, #0]
    78bc:	f023 0302 	bic.w	r3, r3, #2
    78c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    78c2:	69e3      	ldr	r3, [r4, #28]
    78c4:	f013 0f03 	tst.w	r3, #3
    78c8:	d1fb      	bne.n	78c2 <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    78ca:	a801      	add	r0, sp, #4
    78cc:	4b1a      	ldr	r3, [pc, #104]	; (7938 <_usart_set_parity+0x94>)
    78ce:	4798      	blx	r3
    78d0:	69e3      	ldr	r3, [r4, #28]
    78d2:	f013 0f02 	tst.w	r3, #2
    78d6:	d1fb      	bne.n	78d0 <_usart_set_parity+0x2c>
	if (USART_PARITY_NONE != parity) {
    78d8:	2e02      	cmp	r6, #2
    78da:	d023      	beq.n	7924 <_usart_set_parity+0x80>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    78dc:	6823      	ldr	r3, [r4, #0]
    78de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    78e2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    78e4:	69e3      	ldr	r3, [r4, #28]
    78e6:	f013 0f1f 	tst.w	r3, #31
    78ea:	d1fb      	bne.n	78e4 <_usart_set_parity+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    78ec:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    78ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    78f2:	3600      	adds	r6, #0
    78f4:	bf18      	it	ne
    78f6:	2601      	movne	r6, #1
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    78f8:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    78fc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    78fe:	69e3      	ldr	r3, [r4, #28]
    7900:	f013 0f1f 	tst.w	r3, #31
    7904:	d1fb      	bne.n	78fe <_usart_set_parity+0x5a>
	CRITICAL_SECTION_LEAVE()
    7906:	a801      	add	r0, sp, #4
    7908:	4b0c      	ldr	r3, [pc, #48]	; (793c <_usart_set_parity+0x98>)
    790a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    790c:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    790e:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    7912:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    7916:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7918:	69e3      	ldr	r3, [r4, #28]
    791a:	f013 0f03 	tst.w	r3, #3
    791e:	d1fb      	bne.n	7918 <_usart_set_parity+0x74>
}
    7920:	b002      	add	sp, #8
    7922:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    7924:	6823      	ldr	r3, [r4, #0]
    7926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    792a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    792c:	69e3      	ldr	r3, [r4, #28]
    792e:	f013 0f1f 	tst.w	r3, #31
    7932:	d1fb      	bne.n	792c <_usart_set_parity+0x88>
    7934:	e7da      	b.n	78ec <_usart_set_parity+0x48>
    7936:	bf00      	nop
    7938:	00004d8d 	.word	0x00004d8d
    793c:	00004d9b 	.word	0x00004d9b

00007940 <_usart_sync_init>:
{
    7940:	b538      	push	{r3, r4, r5, lr}
    7942:	460c      	mov	r4, r1
	ASSERT(device);
    7944:	4605      	mov	r5, r0
    7946:	22c8      	movs	r2, #200	; 0xc8
    7948:	4905      	ldr	r1, [pc, #20]	; (7960 <_usart_sync_init+0x20>)
    794a:	3000      	adds	r0, #0
    794c:	bf18      	it	ne
    794e:	2001      	movne	r0, #1
    7950:	4b04      	ldr	r3, [pc, #16]	; (7964 <_usart_sync_init+0x24>)
    7952:	4798      	blx	r3
	device->hw = hw;
    7954:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    7956:	4620      	mov	r0, r4
    7958:	4b03      	ldr	r3, [pc, #12]	; (7968 <_usart_sync_init+0x28>)
    795a:	4798      	blx	r3
}
    795c:	bd38      	pop	{r3, r4, r5, pc}
    795e:	bf00      	nop
    7960:	0000e5a0 	.word	0x0000e5a0
    7964:	00006181 	.word	0x00006181
    7968:	00007415 	.word	0x00007415

0000796c <_usart_async_init>:
{
    796c:	b570      	push	{r4, r5, r6, lr}
    796e:	460d      	mov	r5, r1
	ASSERT(device);
    7970:	4606      	mov	r6, r0
    7972:	22d6      	movs	r2, #214	; 0xd6
    7974:	4917      	ldr	r1, [pc, #92]	; (79d4 <_usart_async_init+0x68>)
    7976:	3000      	adds	r0, #0
    7978:	bf18      	it	ne
    797a:	2001      	movne	r0, #1
    797c:	4b16      	ldr	r3, [pc, #88]	; (79d8 <_usart_async_init+0x6c>)
    797e:	4798      	blx	r3
	init_status = _usart_init(hw);
    7980:	4628      	mov	r0, r5
    7982:	4b16      	ldr	r3, [pc, #88]	; (79dc <_usart_async_init+0x70>)
    7984:	4798      	blx	r3
	if (init_status) {
    7986:	4604      	mov	r4, r0
    7988:	b108      	cbz	r0, 798e <_usart_async_init+0x22>
}
    798a:	4620      	mov	r0, r4
    798c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    798e:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    7990:	4631      	mov	r1, r6
    7992:	4628      	mov	r0, r5
    7994:	4b12      	ldr	r3, [pc, #72]	; (79e0 <_usart_async_init+0x74>)
    7996:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7998:	4628      	mov	r0, r5
    799a:	4b12      	ldr	r3, [pc, #72]	; (79e4 <_usart_async_init+0x78>)
    799c:	4798      	blx	r3
    799e:	1d01      	adds	r1, r0, #4
    79a0:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79a2:	2501      	movs	r5, #1
    79a4:	f000 021f 	and.w	r2, r0, #31
    79a8:	fa05 f202 	lsl.w	r2, r5, r2
    79ac:	0943      	lsrs	r3, r0, #5
    79ae:	009b      	lsls	r3, r3, #2
    79b0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    79b4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    79b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    79bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    79c0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79c8:	601a      	str	r2, [r3, #0]
		irq++;
    79ca:	3001      	adds	r0, #1
    79cc:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    79ce:	4281      	cmp	r1, r0
    79d0:	d1e8      	bne.n	79a4 <_usart_async_init+0x38>
    79d2:	e7da      	b.n	798a <_usart_async_init+0x1e>
    79d4:	0000e5a0 	.word	0x0000e5a0
    79d8:	00006181 	.word	0x00006181
    79dc:	00007415 	.word	0x00007415
    79e0:	00007271 	.word	0x00007271
    79e4:	000072d1 	.word	0x000072d1

000079e8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    79e8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    79ea:	6813      	ldr	r3, [r2, #0]
    79ec:	f043 0302 	orr.w	r3, r3, #2
    79f0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    79f2:	69d3      	ldr	r3, [r2, #28]
    79f4:	f013 0f03 	tst.w	r3, #3
    79f8:	d1fb      	bne.n	79f2 <_usart_sync_enable+0xa>
}
    79fa:	4770      	bx	lr

000079fc <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    79fc:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    79fe:	6813      	ldr	r3, [r2, #0]
    7a00:	f043 0302 	orr.w	r3, r3, #2
    7a04:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7a06:	69d3      	ldr	r3, [r2, #28]
    7a08:	f013 0f03 	tst.w	r3, #3
    7a0c:	d1fb      	bne.n	7a06 <_usart_async_enable+0xa>
}
    7a0e:	4770      	bx	lr

00007a10 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    7a10:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7a12:	6813      	ldr	r3, [r2, #0]
    7a14:	f023 0302 	bic.w	r3, r3, #2
    7a18:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7a1a:	69d3      	ldr	r3, [r2, #28]
    7a1c:	f013 0f03 	tst.w	r3, #3
    7a20:	d1fb      	bne.n	7a1a <_usart_async_disable+0xa>
}
    7a22:	4770      	bx	lr

00007a24 <_usart_async_set_parity>:
{
    7a24:	b508      	push	{r3, lr}
	_usart_set_parity(device->hw, parity);
    7a26:	6980      	ldr	r0, [r0, #24]
    7a28:	4b01      	ldr	r3, [pc, #4]	; (7a30 <_usart_async_set_parity+0xc>)
    7a2a:	4798      	blx	r3
    7a2c:	bd08      	pop	{r3, pc}
    7a2e:	bf00      	nop
    7a30:	000078a5 	.word	0x000078a5

00007a34 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7a34:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    7a36:	6299      	str	r1, [r3, #40]	; 0x28
    7a38:	4770      	bx	lr

00007a3a <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7a3a:	6983      	ldr	r3, [r0, #24]
    7a3c:	6299      	str	r1, [r3, #40]	; 0x28
    7a3e:	4770      	bx	lr

00007a40 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    7a40:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    7a42:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7a44:	b2c0      	uxtb	r0, r0
    7a46:	4770      	bx	lr

00007a48 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    7a48:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    7a4a:	7e18      	ldrb	r0, [r3, #24]
}
    7a4c:	f000 0001 	and.w	r0, r0, #1
    7a50:	4770      	bx	lr

00007a52 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    7a52:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7a54:	7e18      	ldrb	r0, [r3, #24]
}
    7a56:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7a5a:	4770      	bx	lr

00007a5c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    7a5c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7a5e:	7e18      	ldrb	r0, [r3, #24]
}
    7a60:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7a64:	4770      	bx	lr

00007a66 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    7a66:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    7a68:	2201      	movs	r2, #1
    7a6a:	759a      	strb	r2, [r3, #22]
    7a6c:	4770      	bx	lr

00007a6e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    7a6e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    7a70:	2202      	movs	r2, #2
    7a72:	759a      	strb	r2, [r3, #22]
    7a74:	4770      	bx	lr
	...

00007a78 <_usart_async_set_irq_state>:
{
    7a78:	b570      	push	{r4, r5, r6, lr}
    7a7a:	460c      	mov	r4, r1
    7a7c:	4616      	mov	r6, r2
	ASSERT(device);
    7a7e:	4605      	mov	r5, r0
    7a80:	f240 2236 	movw	r2, #566	; 0x236
    7a84:	4915      	ldr	r1, [pc, #84]	; (7adc <_usart_async_set_irq_state+0x64>)
    7a86:	3000      	adds	r0, #0
    7a88:	bf18      	it	ne
    7a8a:	2001      	movne	r0, #1
    7a8c:	4b14      	ldr	r3, [pc, #80]	; (7ae0 <_usart_async_set_irq_state+0x68>)
    7a8e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    7a90:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    7a94:	d10d      	bne.n	7ab2 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    7a96:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7a98:	b92e      	cbnz	r6, 7aa6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    7a9a:	2201      	movs	r2, #1
    7a9c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    7a9e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    7aa0:	2202      	movs	r2, #2
    7aa2:	751a      	strb	r2, [r3, #20]
    7aa4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    7aa6:	2201      	movs	r2, #1
    7aa8:	759a      	strb	r2, [r3, #22]
    7aaa:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    7aac:	2202      	movs	r2, #2
    7aae:	759a      	strb	r2, [r3, #22]
    7ab0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    7ab2:	2c01      	cmp	r4, #1
    7ab4:	d002      	beq.n	7abc <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    7ab6:	2c03      	cmp	r4, #3
    7ab8:	d008      	beq.n	7acc <_usart_async_set_irq_state+0x54>
    7aba:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    7abc:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7abe:	b916      	cbnz	r6, 7ac6 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    7ac0:	2204      	movs	r2, #4
    7ac2:	751a      	strb	r2, [r3, #20]
    7ac4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    7ac6:	2204      	movs	r2, #4
    7ac8:	759a      	strb	r2, [r3, #22]
    7aca:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    7acc:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7ace:	b116      	cbz	r6, 7ad6 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    7ad0:	2280      	movs	r2, #128	; 0x80
    7ad2:	759a      	strb	r2, [r3, #22]
}
    7ad4:	e7f1      	b.n	7aba <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    7ad6:	2280      	movs	r2, #128	; 0x80
    7ad8:	751a      	strb	r2, [r3, #20]
    7ada:	bd70      	pop	{r4, r5, r6, pc}
    7adc:	0000e5a0 	.word	0x0000e5a0
    7ae0:	00006181 	.word	0x00006181

00007ae4 <_i2c_m_async_init>:
{
    7ae4:	b570      	push	{r4, r5, r6, lr}
    7ae6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    7ae8:	4606      	mov	r6, r0
    7aea:	f240 42d2 	movw	r2, #1234	; 0x4d2
    7aee:	4918      	ldr	r1, [pc, #96]	; (7b50 <_i2c_m_async_init+0x6c>)
    7af0:	3000      	adds	r0, #0
    7af2:	bf18      	it	ne
    7af4:	2001      	movne	r0, #1
    7af6:	4b17      	ldr	r3, [pc, #92]	; (7b54 <_i2c_m_async_init+0x70>)
    7af8:	4798      	blx	r3
	i2c_dev->hw = hw;
    7afa:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7afc:	4629      	mov	r1, r5
    7afe:	4630      	mov	r0, r6
    7b00:	4b15      	ldr	r3, [pc, #84]	; (7b58 <_i2c_m_async_init+0x74>)
    7b02:	4798      	blx	r3
	if (init_status) {
    7b04:	4604      	mov	r4, r0
    7b06:	b108      	cbz	r0, 7b0c <_i2c_m_async_init+0x28>
}
    7b08:	4620      	mov	r0, r4
    7b0a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7b0c:	4631      	mov	r1, r6
    7b0e:	4628      	mov	r0, r5
    7b10:	4b12      	ldr	r3, [pc, #72]	; (7b5c <_i2c_m_async_init+0x78>)
    7b12:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7b14:	4628      	mov	r0, r5
    7b16:	4b12      	ldr	r3, [pc, #72]	; (7b60 <_i2c_m_async_init+0x7c>)
    7b18:	4798      	blx	r3
    7b1a:	1d01      	adds	r1, r0, #4
    7b1c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b1e:	2501      	movs	r5, #1
    7b20:	f000 021f 	and.w	r2, r0, #31
    7b24:	fa05 f202 	lsl.w	r2, r5, r2
    7b28:	0943      	lsrs	r3, r0, #5
    7b2a:	009b      	lsls	r3, r3, #2
    7b2c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7b30:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7b3c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b44:	601a      	str	r2, [r3, #0]
		irq++;
    7b46:	3001      	adds	r0, #1
    7b48:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7b4a:	4281      	cmp	r1, r0
    7b4c:	d1e8      	bne.n	7b20 <_i2c_m_async_init+0x3c>
    7b4e:	e7db      	b.n	7b08 <_i2c_m_async_init+0x24>
    7b50:	0000e5a0 	.word	0x0000e5a0
    7b54:	00006181 	.word	0x00006181
    7b58:	00007579 	.word	0x00007579
    7b5c:	00007271 	.word	0x00007271
    7b60:	000072d1 	.word	0x000072d1

00007b64 <_i2c_m_async_transfer>:
{
    7b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b68:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    7b6a:	4605      	mov	r5, r0
    7b6c:	f110 0800 	adds.w	r8, r0, #0
    7b70:	bf18      	it	ne
    7b72:	f04f 0801 	movne.w	r8, #1
    7b76:	4f45      	ldr	r7, [pc, #276]	; (7c8c <_i2c_m_async_transfer+0x128>)
    7b78:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    7b7c:	4639      	mov	r1, r7
    7b7e:	4640      	mov	r0, r8
    7b80:	4e43      	ldr	r6, [pc, #268]	; (7c90 <_i2c_m_async_transfer+0x12c>)
    7b82:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    7b84:	6928      	ldr	r0, [r5, #16]
    7b86:	f240 5229 	movw	r2, #1321	; 0x529
    7b8a:	4639      	mov	r1, r7
    7b8c:	3000      	adds	r0, #0
    7b8e:	bf18      	it	ne
    7b90:	2001      	movne	r0, #1
    7b92:	47b0      	blx	r6
	ASSERT(msg);
    7b94:	f240 522a 	movw	r2, #1322	; 0x52a
    7b98:	4639      	mov	r1, r7
    7b9a:	1c20      	adds	r0, r4, #0
    7b9c:	bf18      	it	ne
    7b9e:	2001      	movne	r0, #1
    7ba0:	47b0      	blx	r6
	if (msg->len == 0) {
    7ba2:	6860      	ldr	r0, [r4, #4]
    7ba4:	2800      	cmp	r0, #0
    7ba6:	d06f      	beq.n	7c88 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7ba8:	886b      	ldrh	r3, [r5, #2]
    7baa:	f413 7f80 	tst.w	r3, #256	; 0x100
    7bae:	d169      	bne.n	7c84 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    7bb0:	8863      	ldrh	r3, [r4, #2]
    7bb2:	b29b      	uxth	r3, r3
    7bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7bb8:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    7bba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    7bbe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7bc2:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7bc4:	6853      	ldr	r3, [r2, #4]
    7bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7bca:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bcc:	69d3      	ldr	r3, [r2, #28]
    7bce:	f013 0f04 	tst.w	r3, #4
    7bd2:	d1fb      	bne.n	7bcc <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    7bd4:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7bd6:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    7bd8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    7bdc:	492b      	ldr	r1, [pc, #172]	; (7c8c <_i2c_m_async_transfer+0x128>)
    7bde:	4640      	mov	r0, r8
    7be0:	4b2b      	ldr	r3, [pc, #172]	; (7c90 <_i2c_m_async_transfer+0x12c>)
    7be2:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    7be4:	686b      	ldr	r3, [r5, #4]
    7be6:	2b01      	cmp	r3, #1
    7be8:	d02a      	beq.n	7c40 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7bea:	6863      	ldr	r3, [r4, #4]
    7bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    7bf0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bf2:	69e3      	ldr	r3, [r4, #28]
    7bf4:	f013 0f04 	tst.w	r3, #4
    7bf8:	d1fb      	bne.n	7bf2 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    7bfa:	882b      	ldrh	r3, [r5, #0]
    7bfc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7c00:	d02a      	beq.n	7c58 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    7c02:	886a      	ldrh	r2, [r5, #2]
    7c04:	f012 0f01 	tst.w	r2, #1
    7c08:	d004      	beq.n	7c14 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    7c0a:	886a      	ldrh	r2, [r5, #2]
    7c0c:	b292      	uxth	r2, r2
    7c0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7c12:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7c14:	f240 72fe 	movw	r2, #2046	; 0x7fe
    7c18:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    7c1c:	69e3      	ldr	r3, [r4, #28]
    7c1e:	f013 0f04 	tst.w	r3, #4
    7c22:	d1fb      	bne.n	7c1c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7c2e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7c30:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7c32:	69e3      	ldr	r3, [r4, #28]
    7c34:	f013 0f04 	tst.w	r3, #4
    7c38:	d1fb      	bne.n	7c32 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    7c3a:	2000      	movs	r0, #0
    7c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    7c40:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    7c44:	d0d1      	beq.n	7bea <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7c46:	6863      	ldr	r3, [r4, #4]
    7c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    7c4c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7c4e:	69e3      	ldr	r3, [r4, #28]
    7c50:	f013 0f04 	tst.w	r3, #4
    7c54:	d1fb      	bne.n	7c4e <_i2c_m_async_transfer+0xea>
    7c56:	e7d0      	b.n	7bfa <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7c58:	8869      	ldrh	r1, [r5, #2]
    7c5a:	005a      	lsls	r2, r3, #1
    7c5c:	b2d2      	uxtb	r2, r2
    7c5e:	f001 0301 	and.w	r3, r1, #1
    7c62:	431a      	orrs	r2, r3
    7c64:	69e3      	ldr	r3, [r4, #28]
    7c66:	f013 0f04 	tst.w	r3, #4
    7c6a:	d1fb      	bne.n	7c64 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7c72:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7c74:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7c76:	69e3      	ldr	r3, [r4, #28]
    7c78:	f013 0f04 	tst.w	r3, #4
    7c7c:	d1fb      	bne.n	7c76 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    7c7e:	2000      	movs	r0, #0
    7c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    7c84:	f06f 0003 	mvn.w	r0, #3
}
    7c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c8c:	0000e5a0 	.word	0x0000e5a0
    7c90:	00006181 	.word	0x00006181

00007c94 <_i2c_m_async_register_callback>:
	switch (type) {
    7c94:	2901      	cmp	r1, #1
    7c96:	d006      	beq.n	7ca6 <_i2c_m_async_register_callback+0x12>
    7c98:	b119      	cbz	r1, 7ca2 <_i2c_m_async_register_callback+0xe>
    7c9a:	2902      	cmp	r1, #2
    7c9c:	d005      	beq.n	7caa <_i2c_m_async_register_callback+0x16>
}
    7c9e:	2000      	movs	r0, #0
    7ca0:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    7ca2:	6142      	str	r2, [r0, #20]
		break;
    7ca4:	e7fb      	b.n	7c9e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7ca6:	6182      	str	r2, [r0, #24]
		break;
    7ca8:	e7f9      	b.n	7c9e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    7caa:	61c2      	str	r2, [r0, #28]
		break;
    7cac:	e7f7      	b.n	7c9e <_i2c_m_async_register_callback+0xa>
	...

00007cb0 <SERCOM0_0_Handler>:
{
    7cb0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7cb2:	4b02      	ldr	r3, [pc, #8]	; (7cbc <SERCOM0_0_Handler+0xc>)
    7cb4:	6818      	ldr	r0, [r3, #0]
    7cb6:	4b02      	ldr	r3, [pc, #8]	; (7cc0 <SERCOM0_0_Handler+0x10>)
    7cb8:	4798      	blx	r3
    7cba:	bd08      	pop	{r3, pc}
    7cbc:	20000980 	.word	0x20000980
    7cc0:	00007201 	.word	0x00007201

00007cc4 <SERCOM0_1_Handler>:
{
    7cc4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7cc6:	4b02      	ldr	r3, [pc, #8]	; (7cd0 <SERCOM0_1_Handler+0xc>)
    7cc8:	6818      	ldr	r0, [r3, #0]
    7cca:	4b02      	ldr	r3, [pc, #8]	; (7cd4 <SERCOM0_1_Handler+0x10>)
    7ccc:	4798      	blx	r3
    7cce:	bd08      	pop	{r3, pc}
    7cd0:	20000980 	.word	0x20000980
    7cd4:	00007201 	.word	0x00007201

00007cd8 <SERCOM0_2_Handler>:
{
    7cd8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7cda:	4b02      	ldr	r3, [pc, #8]	; (7ce4 <SERCOM0_2_Handler+0xc>)
    7cdc:	6818      	ldr	r0, [r3, #0]
    7cde:	4b02      	ldr	r3, [pc, #8]	; (7ce8 <SERCOM0_2_Handler+0x10>)
    7ce0:	4798      	blx	r3
    7ce2:	bd08      	pop	{r3, pc}
    7ce4:	20000980 	.word	0x20000980
    7ce8:	00007201 	.word	0x00007201

00007cec <SERCOM0_3_Handler>:
{
    7cec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7cee:	4b02      	ldr	r3, [pc, #8]	; (7cf8 <SERCOM0_3_Handler+0xc>)
    7cf0:	6818      	ldr	r0, [r3, #0]
    7cf2:	4b02      	ldr	r3, [pc, #8]	; (7cfc <SERCOM0_3_Handler+0x10>)
    7cf4:	4798      	blx	r3
    7cf6:	bd08      	pop	{r3, pc}
    7cf8:	20000980 	.word	0x20000980
    7cfc:	00007201 	.word	0x00007201

00007d00 <SERCOM1_0_Handler>:
{
    7d00:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7d02:	4b02      	ldr	r3, [pc, #8]	; (7d0c <SERCOM1_0_Handler+0xc>)
    7d04:	6858      	ldr	r0, [r3, #4]
    7d06:	4b02      	ldr	r3, [pc, #8]	; (7d10 <SERCOM1_0_Handler+0x10>)
    7d08:	4798      	blx	r3
    7d0a:	bd08      	pop	{r3, pc}
    7d0c:	20000980 	.word	0x20000980
    7d10:	00007201 	.word	0x00007201

00007d14 <SERCOM1_1_Handler>:
{
    7d14:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7d16:	4b02      	ldr	r3, [pc, #8]	; (7d20 <SERCOM1_1_Handler+0xc>)
    7d18:	6858      	ldr	r0, [r3, #4]
    7d1a:	4b02      	ldr	r3, [pc, #8]	; (7d24 <SERCOM1_1_Handler+0x10>)
    7d1c:	4798      	blx	r3
    7d1e:	bd08      	pop	{r3, pc}
    7d20:	20000980 	.word	0x20000980
    7d24:	00007201 	.word	0x00007201

00007d28 <SERCOM1_2_Handler>:
{
    7d28:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7d2a:	4b02      	ldr	r3, [pc, #8]	; (7d34 <SERCOM1_2_Handler+0xc>)
    7d2c:	6858      	ldr	r0, [r3, #4]
    7d2e:	4b02      	ldr	r3, [pc, #8]	; (7d38 <SERCOM1_2_Handler+0x10>)
    7d30:	4798      	blx	r3
    7d32:	bd08      	pop	{r3, pc}
    7d34:	20000980 	.word	0x20000980
    7d38:	00007201 	.word	0x00007201

00007d3c <SERCOM1_3_Handler>:
{
    7d3c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7d3e:	4b02      	ldr	r3, [pc, #8]	; (7d48 <SERCOM1_3_Handler+0xc>)
    7d40:	6858      	ldr	r0, [r3, #4]
    7d42:	4b02      	ldr	r3, [pc, #8]	; (7d4c <SERCOM1_3_Handler+0x10>)
    7d44:	4798      	blx	r3
    7d46:	bd08      	pop	{r3, pc}
    7d48:	20000980 	.word	0x20000980
    7d4c:	00007201 	.word	0x00007201

00007d50 <SERCOM3_0_Handler>:
{
    7d50:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7d52:	4b02      	ldr	r3, [pc, #8]	; (7d5c <SERCOM3_0_Handler+0xc>)
    7d54:	6898      	ldr	r0, [r3, #8]
    7d56:	4b02      	ldr	r3, [pc, #8]	; (7d60 <SERCOM3_0_Handler+0x10>)
    7d58:	4798      	blx	r3
    7d5a:	bd08      	pop	{r3, pc}
    7d5c:	20000980 	.word	0x20000980
    7d60:	0000737b 	.word	0x0000737b

00007d64 <SERCOM3_1_Handler>:
{
    7d64:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7d66:	4b02      	ldr	r3, [pc, #8]	; (7d70 <SERCOM3_1_Handler+0xc>)
    7d68:	6898      	ldr	r0, [r3, #8]
    7d6a:	4b02      	ldr	r3, [pc, #8]	; (7d74 <SERCOM3_1_Handler+0x10>)
    7d6c:	4798      	blx	r3
    7d6e:	bd08      	pop	{r3, pc}
    7d70:	20000980 	.word	0x20000980
    7d74:	0000737b 	.word	0x0000737b

00007d78 <SERCOM3_2_Handler>:
{
    7d78:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7d7a:	4b02      	ldr	r3, [pc, #8]	; (7d84 <SERCOM3_2_Handler+0xc>)
    7d7c:	6898      	ldr	r0, [r3, #8]
    7d7e:	4b02      	ldr	r3, [pc, #8]	; (7d88 <SERCOM3_2_Handler+0x10>)
    7d80:	4798      	blx	r3
    7d82:	bd08      	pop	{r3, pc}
    7d84:	20000980 	.word	0x20000980
    7d88:	0000737b 	.word	0x0000737b

00007d8c <SERCOM3_3_Handler>:
{
    7d8c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7d8e:	4b02      	ldr	r3, [pc, #8]	; (7d98 <SERCOM3_3_Handler+0xc>)
    7d90:	6898      	ldr	r0, [r3, #8]
    7d92:	4b02      	ldr	r3, [pc, #8]	; (7d9c <SERCOM3_3_Handler+0x10>)
    7d94:	4798      	blx	r3
    7d96:	bd08      	pop	{r3, pc}
    7d98:	20000980 	.word	0x20000980
    7d9c:	0000737b 	.word	0x0000737b

00007da0 <SERCOM4_0_Handler>:
{
    7da0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7da2:	4b02      	ldr	r3, [pc, #8]	; (7dac <SERCOM4_0_Handler+0xc>)
    7da4:	68d8      	ldr	r0, [r3, #12]
    7da6:	4b02      	ldr	r3, [pc, #8]	; (7db0 <SERCOM4_0_Handler+0x10>)
    7da8:	4798      	blx	r3
    7daa:	bd08      	pop	{r3, pc}
    7dac:	20000980 	.word	0x20000980
    7db0:	00007201 	.word	0x00007201

00007db4 <SERCOM4_1_Handler>:
{
    7db4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7db6:	4b02      	ldr	r3, [pc, #8]	; (7dc0 <SERCOM4_1_Handler+0xc>)
    7db8:	68d8      	ldr	r0, [r3, #12]
    7dba:	4b02      	ldr	r3, [pc, #8]	; (7dc4 <SERCOM4_1_Handler+0x10>)
    7dbc:	4798      	blx	r3
    7dbe:	bd08      	pop	{r3, pc}
    7dc0:	20000980 	.word	0x20000980
    7dc4:	00007201 	.word	0x00007201

00007dc8 <SERCOM4_2_Handler>:
{
    7dc8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7dca:	4b02      	ldr	r3, [pc, #8]	; (7dd4 <SERCOM4_2_Handler+0xc>)
    7dcc:	68d8      	ldr	r0, [r3, #12]
    7dce:	4b02      	ldr	r3, [pc, #8]	; (7dd8 <SERCOM4_2_Handler+0x10>)
    7dd0:	4798      	blx	r3
    7dd2:	bd08      	pop	{r3, pc}
    7dd4:	20000980 	.word	0x20000980
    7dd8:	00007201 	.word	0x00007201

00007ddc <SERCOM4_3_Handler>:
{
    7ddc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7dde:	4b02      	ldr	r3, [pc, #8]	; (7de8 <SERCOM4_3_Handler+0xc>)
    7de0:	68d8      	ldr	r0, [r3, #12]
    7de2:	4b02      	ldr	r3, [pc, #8]	; (7dec <SERCOM4_3_Handler+0x10>)
    7de4:	4798      	blx	r3
    7de6:	bd08      	pop	{r3, pc}
    7de8:	20000980 	.word	0x20000980
    7dec:	00007201 	.word	0x00007201

00007df0 <SERCOM5_0_Handler>:
{
    7df0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7df2:	4b02      	ldr	r3, [pc, #8]	; (7dfc <SERCOM5_0_Handler+0xc>)
    7df4:	6918      	ldr	r0, [r3, #16]
    7df6:	4b02      	ldr	r3, [pc, #8]	; (7e00 <SERCOM5_0_Handler+0x10>)
    7df8:	4798      	blx	r3
    7dfa:	bd08      	pop	{r3, pc}
    7dfc:	20000980 	.word	0x20000980
    7e00:	0000765d 	.word	0x0000765d

00007e04 <SERCOM5_1_Handler>:
{
    7e04:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7e06:	4b02      	ldr	r3, [pc, #8]	; (7e10 <SERCOM5_1_Handler+0xc>)
    7e08:	6918      	ldr	r0, [r3, #16]
    7e0a:	4b02      	ldr	r3, [pc, #8]	; (7e14 <SERCOM5_1_Handler+0x10>)
    7e0c:	4798      	blx	r3
    7e0e:	bd08      	pop	{r3, pc}
    7e10:	20000980 	.word	0x20000980
    7e14:	0000765d 	.word	0x0000765d

00007e18 <SERCOM5_2_Handler>:
{
    7e18:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7e1a:	4b02      	ldr	r3, [pc, #8]	; (7e24 <SERCOM5_2_Handler+0xc>)
    7e1c:	6918      	ldr	r0, [r3, #16]
    7e1e:	4b02      	ldr	r3, [pc, #8]	; (7e28 <SERCOM5_2_Handler+0x10>)
    7e20:	4798      	blx	r3
    7e22:	bd08      	pop	{r3, pc}
    7e24:	20000980 	.word	0x20000980
    7e28:	0000765d 	.word	0x0000765d

00007e2c <SERCOM5_3_Handler>:
{
    7e2c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7e2e:	4b02      	ldr	r3, [pc, #8]	; (7e38 <SERCOM5_3_Handler+0xc>)
    7e30:	6918      	ldr	r0, [r3, #16]
    7e32:	4b02      	ldr	r3, [pc, #8]	; (7e3c <SERCOM5_3_Handler+0x10>)
    7e34:	4798      	blx	r3
    7e36:	bd08      	pop	{r3, pc}
    7e38:	20000980 	.word	0x20000980
    7e3c:	0000765d 	.word	0x0000765d

00007e40 <SERCOM6_0_Handler>:
{
    7e40:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7e42:	4b02      	ldr	r3, [pc, #8]	; (7e4c <SERCOM6_0_Handler+0xc>)
    7e44:	6958      	ldr	r0, [r3, #20]
    7e46:	4b02      	ldr	r3, [pc, #8]	; (7e50 <SERCOM6_0_Handler+0x10>)
    7e48:	4798      	blx	r3
    7e4a:	bd08      	pop	{r3, pc}
    7e4c:	20000980 	.word	0x20000980
    7e50:	00007201 	.word	0x00007201

00007e54 <SERCOM6_1_Handler>:
{
    7e54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7e56:	4b02      	ldr	r3, [pc, #8]	; (7e60 <SERCOM6_1_Handler+0xc>)
    7e58:	6958      	ldr	r0, [r3, #20]
    7e5a:	4b02      	ldr	r3, [pc, #8]	; (7e64 <SERCOM6_1_Handler+0x10>)
    7e5c:	4798      	blx	r3
    7e5e:	bd08      	pop	{r3, pc}
    7e60:	20000980 	.word	0x20000980
    7e64:	00007201 	.word	0x00007201

00007e68 <SERCOM6_2_Handler>:
{
    7e68:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7e6a:	4b02      	ldr	r3, [pc, #8]	; (7e74 <SERCOM6_2_Handler+0xc>)
    7e6c:	6958      	ldr	r0, [r3, #20]
    7e6e:	4b02      	ldr	r3, [pc, #8]	; (7e78 <SERCOM6_2_Handler+0x10>)
    7e70:	4798      	blx	r3
    7e72:	bd08      	pop	{r3, pc}
    7e74:	20000980 	.word	0x20000980
    7e78:	00007201 	.word	0x00007201

00007e7c <SERCOM6_3_Handler>:
{
    7e7c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7e7e:	4b02      	ldr	r3, [pc, #8]	; (7e88 <SERCOM6_3_Handler+0xc>)
    7e80:	6958      	ldr	r0, [r3, #20]
    7e82:	4b02      	ldr	r3, [pc, #8]	; (7e8c <SERCOM6_3_Handler+0x10>)
    7e84:	4798      	blx	r3
    7e86:	bd08      	pop	{r3, pc}
    7e88:	20000980 	.word	0x20000980
    7e8c:	00007201 	.word	0x00007201

00007e90 <_spi_m_sync_init>:
{
    7e90:	b570      	push	{r4, r5, r6, lr}
    7e92:	4606      	mov	r6, r0
    7e94:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7e96:	4608      	mov	r0, r1
    7e98:	4b5d      	ldr	r3, [pc, #372]	; (8010 <_spi_m_sync_init+0x180>)
    7e9a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7e9c:	2803      	cmp	r0, #3
    7e9e:	d00c      	beq.n	7eba <_spi_m_sync_init+0x2a>
    7ea0:	2807      	cmp	r0, #7
    7ea2:	bf08      	it	eq
    7ea4:	2301      	moveq	r3, #1
    7ea6:	d009      	beq.n	7ebc <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    7ea8:	2e00      	cmp	r6, #0
    7eaa:	f000 809f 	beq.w	7fec <_spi_m_sync_init+0x15c>
    7eae:	2c00      	cmp	r4, #0
    7eb0:	f040 80a5 	bne.w	7ffe <_spi_m_sync_init+0x16e>
	return NULL;
    7eb4:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    7eb6:	2000      	movs	r0, #0
    7eb8:	e009      	b.n	7ece <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    7eba:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7ebc:	4d55      	ldr	r5, [pc, #340]	; (8014 <_spi_m_sync_init+0x184>)
    7ebe:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    7ec2:	441d      	add	r5, r3
	ASSERT(dev && hw);
    7ec4:	2e00      	cmp	r6, #0
    7ec6:	d0f6      	beq.n	7eb6 <_spi_m_sync_init+0x26>
    7ec8:	2001      	movs	r0, #1
    7eca:	2c00      	cmp	r4, #0
    7ecc:	d0f3      	beq.n	7eb6 <_spi_m_sync_init+0x26>
    7ece:	f640 226e 	movw	r2, #2670	; 0xa6e
    7ed2:	4951      	ldr	r1, [pc, #324]	; (8018 <_spi_m_sync_init+0x188>)
    7ed4:	4b51      	ldr	r3, [pc, #324]	; (801c <_spi_m_sync_init+0x18c>)
    7ed6:	4798      	blx	r3
	if (regs == NULL) {
    7ed8:	2d00      	cmp	r5, #0
    7eda:	f000 8084 	beq.w	7fe6 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7ede:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7ee0:	f013 0f01 	tst.w	r3, #1
    7ee4:	d11d      	bne.n	7f22 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7ee6:	682b      	ldr	r3, [r5, #0]
    7ee8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7eec:	69e3      	ldr	r3, [r4, #28]
    7eee:	f013 0f03 	tst.w	r3, #3
    7ef2:	d1fb      	bne.n	7eec <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7ef4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7ef6:	f013 0f02 	tst.w	r3, #2
    7efa:	d00b      	beq.n	7f14 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7efc:	6823      	ldr	r3, [r4, #0]
    7efe:	f023 0302 	bic.w	r3, r3, #2
    7f02:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f04:	69e3      	ldr	r3, [r4, #28]
    7f06:	f013 0f03 	tst.w	r3, #3
    7f0a:	d1fb      	bne.n	7f04 <_spi_m_sync_init+0x74>
    7f0c:	69e3      	ldr	r3, [r4, #28]
    7f0e:	f013 0f02 	tst.w	r3, #2
    7f12:	d1fb      	bne.n	7f0c <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7f14:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7f18:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f1a:	69e3      	ldr	r3, [r4, #28]
    7f1c:	f013 0f03 	tst.w	r3, #3
    7f20:	d1fb      	bne.n	7f1a <_spi_m_sync_init+0x8a>
    7f22:	69e3      	ldr	r3, [r4, #28]
    7f24:	f013 0f01 	tst.w	r3, #1
    7f28:	d1fb      	bne.n	7f22 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    7f2a:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7f2c:	682b      	ldr	r3, [r5, #0]
    7f2e:	f003 031c 	and.w	r3, r3, #28
    7f32:	2b08      	cmp	r3, #8
    7f34:	d02e      	beq.n	7f94 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    7f36:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7f3a:	4937      	ldr	r1, [pc, #220]	; (8018 <_spi_m_sync_init+0x188>)
    7f3c:	1c20      	adds	r0, r4, #0
    7f3e:	bf18      	it	ne
    7f40:	2001      	movne	r0, #1
    7f42:	4b36      	ldr	r3, [pc, #216]	; (801c <_spi_m_sync_init+0x18c>)
    7f44:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7f46:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7f48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7f4c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7f50:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f52:	69e3      	ldr	r3, [r4, #28]
    7f54:	f013 0f03 	tst.w	r3, #3
    7f58:	d1fb      	bne.n	7f52 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    7f5a:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7f5c:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7f60:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7f68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7f6a:	69e3      	ldr	r3, [r4, #28]
    7f6c:	f013 0f17 	tst.w	r3, #23
    7f70:	d1fb      	bne.n	7f6a <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7f72:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7f74:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7f76:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7f78:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7f7c:	686b      	ldr	r3, [r5, #4]
    7f7e:	f003 0307 	and.w	r3, r3, #7
    7f82:	2b00      	cmp	r3, #0
    7f84:	bf0c      	ite	eq
    7f86:	2301      	moveq	r3, #1
    7f88:	2302      	movne	r3, #2
    7f8a:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    7f8c:	89eb      	ldrh	r3, [r5, #14]
    7f8e:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    7f90:	2000      	movs	r0, #0
    7f92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    7f94:	f640 1284 	movw	r2, #2436	; 0x984
    7f98:	491f      	ldr	r1, [pc, #124]	; (8018 <_spi_m_sync_init+0x188>)
    7f9a:	1c20      	adds	r0, r4, #0
    7f9c:	bf18      	it	ne
    7f9e:	2001      	movne	r0, #1
    7fa0:	4b1e      	ldr	r3, [pc, #120]	; (801c <_spi_m_sync_init+0x18c>)
    7fa2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7fa4:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7fa6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7faa:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7fae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7fb0:	69e3      	ldr	r3, [r4, #28]
    7fb2:	f013 0f03 	tst.w	r3, #3
    7fb6:	d1fb      	bne.n	7fb0 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7fb8:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7fba:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7fbe:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7fc6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7fca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7fcc:	69e3      	ldr	r3, [r4, #28]
    7fce:	f013 0f17 	tst.w	r3, #23
    7fd2:	d1fb      	bne.n	7fcc <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7fd4:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7fd6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7fd8:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7fda:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7fde:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7fe0:	2b00      	cmp	r3, #0
    7fe2:	d1fc      	bne.n	7fde <_spi_m_sync_init+0x14e>
    7fe4:	e7ca      	b.n	7f7c <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    7fe6:	f06f 000c 	mvn.w	r0, #12
    7fea:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7fec:	f640 226e 	movw	r2, #2670	; 0xa6e
    7ff0:	4909      	ldr	r1, [pc, #36]	; (8018 <_spi_m_sync_init+0x188>)
    7ff2:	2000      	movs	r0, #0
    7ff4:	4b09      	ldr	r3, [pc, #36]	; (801c <_spi_m_sync_init+0x18c>)
    7ff6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7ff8:	f06f 000c 	mvn.w	r0, #12
    7ffc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7ffe:	f640 226e 	movw	r2, #2670	; 0xa6e
    8002:	4905      	ldr	r1, [pc, #20]	; (8018 <_spi_m_sync_init+0x188>)
    8004:	2001      	movs	r0, #1
    8006:	4b05      	ldr	r3, [pc, #20]	; (801c <_spi_m_sync_init+0x18c>)
    8008:	4798      	blx	r3
		return ERR_INVALID_ARG;
    800a:	f06f 000c 	mvn.w	r0, #12
    800e:	bd70      	pop	{r4, r5, r6, pc}
    8010:	000071bd 	.word	0x000071bd
    8014:	0000e57c 	.word	0x0000e57c
    8018:	0000e5a0 	.word	0x0000e5a0
    801c:	00006181 	.word	0x00006181

00008020 <_spi_m_async_init>:
{
    8020:	b538      	push	{r3, r4, r5, lr}
    8022:	4604      	mov	r4, r0
    8024:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    8026:	4b15      	ldr	r3, [pc, #84]	; (807c <_spi_m_async_init+0x5c>)
    8028:	4798      	blx	r3
	if (rc < 0) {
    802a:	2800      	cmp	r0, #0
    802c:	db24      	blt.n	8078 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    802e:	4621      	mov	r1, r4
    8030:	4628      	mov	r0, r5
    8032:	4b13      	ldr	r3, [pc, #76]	; (8080 <_spi_m_async_init+0x60>)
    8034:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    8036:	2300      	movs	r3, #0
    8038:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    803a:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    803c:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    803e:	4628      	mov	r0, r5
    8040:	4b10      	ldr	r3, [pc, #64]	; (8084 <_spi_m_async_init+0x64>)
    8042:	4798      	blx	r3
    8044:	1d01      	adds	r1, r0, #4
    8046:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8048:	2401      	movs	r4, #1
    804a:	f000 021f 	and.w	r2, r0, #31
    804e:	fa04 f202 	lsl.w	r2, r4, r2
    8052:	0943      	lsrs	r3, r0, #5
    8054:	009b      	lsls	r3, r3, #2
    8056:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    805a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    805e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    8062:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8066:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    806a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    806e:	3001      	adds	r0, #1
    8070:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    8072:	4281      	cmp	r1, r0
    8074:	d1e9      	bne.n	804a <_spi_m_async_init+0x2a>
	return ERR_NONE;
    8076:	2000      	movs	r0, #0
}
    8078:	bd38      	pop	{r3, r4, r5, pc}
    807a:	bf00      	nop
    807c:	00007e91 	.word	0x00007e91
    8080:	00007271 	.word	0x00007271
    8084:	000072d1 	.word	0x000072d1

00008088 <_spi_m_async_enable>:
{
    8088:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    808a:	4604      	mov	r4, r0
    808c:	b160      	cbz	r0, 80a8 <_spi_m_async_enable+0x20>
    808e:	6800      	ldr	r0, [r0, #0]
    8090:	3000      	adds	r0, #0
    8092:	bf18      	it	ne
    8094:	2001      	movne	r0, #1
    8096:	f640 22db 	movw	r2, #2779	; 0xadb
    809a:	4904      	ldr	r1, [pc, #16]	; (80ac <_spi_m_async_enable+0x24>)
    809c:	4b04      	ldr	r3, [pc, #16]	; (80b0 <_spi_m_async_enable+0x28>)
    809e:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    80a0:	6820      	ldr	r0, [r4, #0]
    80a2:	4b04      	ldr	r3, [pc, #16]	; (80b4 <_spi_m_async_enable+0x2c>)
    80a4:	4798      	blx	r3
}
    80a6:	bd10      	pop	{r4, pc}
    80a8:	2000      	movs	r0, #0
    80aa:	e7f4      	b.n	8096 <_spi_m_async_enable+0xe>
    80ac:	0000e5a0 	.word	0x0000e5a0
    80b0:	00006181 	.word	0x00006181
    80b4:	00007309 	.word	0x00007309

000080b8 <_spi_m_async_set_mode>:
{
    80b8:	b538      	push	{r3, r4, r5, lr}
    80ba:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    80bc:	4604      	mov	r4, r0
    80be:	b168      	cbz	r0, 80dc <_spi_m_async_set_mode+0x24>
    80c0:	6800      	ldr	r0, [r0, #0]
    80c2:	3000      	adds	r0, #0
    80c4:	bf18      	it	ne
    80c6:	2001      	movne	r0, #1
    80c8:	f640 320c 	movw	r2, #2828	; 0xb0c
    80cc:	4904      	ldr	r1, [pc, #16]	; (80e0 <_spi_m_async_set_mode+0x28>)
    80ce:	4b05      	ldr	r3, [pc, #20]	; (80e4 <_spi_m_async_set_mode+0x2c>)
    80d0:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    80d2:	4629      	mov	r1, r5
    80d4:	6820      	ldr	r0, [r4, #0]
    80d6:	4b04      	ldr	r3, [pc, #16]	; (80e8 <_spi_m_async_set_mode+0x30>)
    80d8:	4798      	blx	r3
}
    80da:	bd38      	pop	{r3, r4, r5, pc}
    80dc:	2000      	movs	r0, #0
    80de:	e7f3      	b.n	80c8 <_spi_m_async_set_mode+0x10>
    80e0:	0000e5a0 	.word	0x0000e5a0
    80e4:	00006181 	.word	0x00006181
    80e8:	00007349 	.word	0x00007349

000080ec <_spi_m_async_set_baudrate>:
{
    80ec:	b538      	push	{r3, r4, r5, lr}
    80ee:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    80f0:	4605      	mov	r5, r0
    80f2:	b198      	cbz	r0, 811c <_spi_m_async_set_baudrate+0x30>
    80f4:	6800      	ldr	r0, [r0, #0]
    80f6:	3000      	adds	r0, #0
    80f8:	bf18      	it	ne
    80fa:	2001      	movne	r0, #1
    80fc:	f640 323b 	movw	r2, #2875	; 0xb3b
    8100:	4907      	ldr	r1, [pc, #28]	; (8120 <_spi_m_async_set_baudrate+0x34>)
    8102:	4b08      	ldr	r3, [pc, #32]	; (8124 <_spi_m_async_set_baudrate+0x38>)
    8104:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    8106:	682b      	ldr	r3, [r5, #0]
    8108:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    810a:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    810e:	bf03      	ittte	eq
    8110:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8112:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    8114:	2000      	moveq	r0, #0
		return ERR_BUSY;
    8116:	f06f 0003 	mvnne.w	r0, #3
}
    811a:	bd38      	pop	{r3, r4, r5, pc}
    811c:	2000      	movs	r0, #0
    811e:	e7ed      	b.n	80fc <_spi_m_async_set_baudrate+0x10>
    8120:	0000e5a0 	.word	0x0000e5a0
    8124:	00006181 	.word	0x00006181

00008128 <_spi_m_async_enable_tx>:
{
    8128:	b538      	push	{r3, r4, r5, lr}
    812a:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    812c:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    812e:	b160      	cbz	r0, 814a <_spi_m_async_enable_tx+0x22>
    8130:	1c20      	adds	r0, r4, #0
    8132:	bf18      	it	ne
    8134:	2001      	movne	r0, #1
    8136:	f640 32fe 	movw	r2, #3070	; 0xbfe
    813a:	4906      	ldr	r1, [pc, #24]	; (8154 <_spi_m_async_enable_tx+0x2c>)
    813c:	4b06      	ldr	r3, [pc, #24]	; (8158 <_spi_m_async_enable_tx+0x30>)
    813e:	4798      	blx	r3
	if (state) {
    8140:	b92d      	cbnz	r5, 814e <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    8142:	2301      	movs	r3, #1
    8144:	7523      	strb	r3, [r4, #20]
}
    8146:	2000      	movs	r0, #0
    8148:	bd38      	pop	{r3, r4, r5, pc}
    814a:	2000      	movs	r0, #0
    814c:	e7f3      	b.n	8136 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    814e:	2301      	movs	r3, #1
    8150:	75a3      	strb	r3, [r4, #22]
    8152:	e7f8      	b.n	8146 <_spi_m_async_enable_tx+0x1e>
    8154:	0000e5a0 	.word	0x0000e5a0
    8158:	00006181 	.word	0x00006181

0000815c <_spi_m_async_enable_rx>:
{
    815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    815e:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    8160:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    8162:	4e0c      	ldr	r6, [pc, #48]	; (8194 <_spi_m_async_enable_rx+0x38>)
    8164:	f640 4212 	movw	r2, #3090	; 0xc12
    8168:	4631      	mov	r1, r6
    816a:	3000      	adds	r0, #0
    816c:	bf18      	it	ne
    816e:	2001      	movne	r0, #1
    8170:	4d09      	ldr	r5, [pc, #36]	; (8198 <_spi_m_async_enable_rx+0x3c>)
    8172:	47a8      	blx	r5
	ASSERT(hw);
    8174:	f640 4213 	movw	r2, #3091	; 0xc13
    8178:	4631      	mov	r1, r6
    817a:	1c20      	adds	r0, r4, #0
    817c:	bf18      	it	ne
    817e:	2001      	movne	r0, #1
    8180:	47a8      	blx	r5
	if (state) {
    8182:	b91f      	cbnz	r7, 818c <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    8184:	2304      	movs	r3, #4
    8186:	7523      	strb	r3, [r4, #20]
}
    8188:	2000      	movs	r0, #0
    818a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    818c:	2304      	movs	r3, #4
    818e:	75a3      	strb	r3, [r4, #22]
    8190:	e7fa      	b.n	8188 <_spi_m_async_enable_rx+0x2c>
    8192:	bf00      	nop
    8194:	0000e5a0 	.word	0x0000e5a0
    8198:	00006181 	.word	0x00006181

0000819c <_spi_m_async_enable_tx_complete>:
{
    819c:	b538      	push	{r3, r4, r5, lr}
    819e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    81a0:	4604      	mov	r4, r0
    81a2:	b170      	cbz	r0, 81c2 <_spi_m_async_enable_tx_complete+0x26>
    81a4:	6800      	ldr	r0, [r0, #0]
    81a6:	3000      	adds	r0, #0
    81a8:	bf18      	it	ne
    81aa:	2001      	movne	r0, #1
    81ac:	f640 4225 	movw	r2, #3109	; 0xc25
    81b0:	4907      	ldr	r1, [pc, #28]	; (81d0 <_spi_m_async_enable_tx_complete+0x34>)
    81b2:	4b08      	ldr	r3, [pc, #32]	; (81d4 <_spi_m_async_enable_tx_complete+0x38>)
    81b4:	4798      	blx	r3
	if (state) {
    81b6:	b935      	cbnz	r5, 81c6 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    81b8:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    81ba:	2202      	movs	r2, #2
    81bc:	751a      	strb	r2, [r3, #20]
}
    81be:	2000      	movs	r0, #0
    81c0:	bd38      	pop	{r3, r4, r5, pc}
    81c2:	2000      	movs	r0, #0
    81c4:	e7f2      	b.n	81ac <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    81c6:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    81c8:	2202      	movs	r2, #2
    81ca:	759a      	strb	r2, [r3, #22]
    81cc:	e7f7      	b.n	81be <_spi_m_async_enable_tx_complete+0x22>
    81ce:	bf00      	nop
    81d0:	0000e5a0 	.word	0x0000e5a0
    81d4:	00006181 	.word	0x00006181

000081d8 <_spi_m_async_write_one>:
{
    81d8:	b538      	push	{r3, r4, r5, lr}
    81da:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    81dc:	4604      	mov	r4, r0
    81de:	b160      	cbz	r0, 81fa <_spi_m_async_write_one+0x22>
    81e0:	6800      	ldr	r0, [r0, #0]
    81e2:	3000      	adds	r0, #0
    81e4:	bf18      	it	ne
    81e6:	2001      	movne	r0, #1
    81e8:	f640 4237 	movw	r2, #3127	; 0xc37
    81ec:	4904      	ldr	r1, [pc, #16]	; (8200 <_spi_m_async_write_one+0x28>)
    81ee:	4b05      	ldr	r3, [pc, #20]	; (8204 <_spi_m_async_write_one+0x2c>)
    81f0:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    81f2:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    81f4:	629d      	str	r5, [r3, #40]	; 0x28
}
    81f6:	2000      	movs	r0, #0
    81f8:	bd38      	pop	{r3, r4, r5, pc}
    81fa:	2000      	movs	r0, #0
    81fc:	e7f4      	b.n	81e8 <_spi_m_async_write_one+0x10>
    81fe:	bf00      	nop
    8200:	0000e5a0 	.word	0x0000e5a0
    8204:	00006181 	.word	0x00006181

00008208 <_spi_m_async_read_one>:
{
    8208:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    820a:	4604      	mov	r4, r0
    820c:	b160      	cbz	r0, 8228 <_spi_m_async_read_one+0x20>
    820e:	6800      	ldr	r0, [r0, #0]
    8210:	3000      	adds	r0, #0
    8212:	bf18      	it	ne
    8214:	2001      	movne	r0, #1
    8216:	f640 4252 	movw	r2, #3154	; 0xc52
    821a:	4904      	ldr	r1, [pc, #16]	; (822c <_spi_m_async_read_one+0x24>)
    821c:	4b04      	ldr	r3, [pc, #16]	; (8230 <_spi_m_async_read_one+0x28>)
    821e:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    8220:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    8222:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    8224:	b280      	uxth	r0, r0
    8226:	bd10      	pop	{r4, pc}
    8228:	2000      	movs	r0, #0
    822a:	e7f4      	b.n	8216 <_spi_m_async_read_one+0xe>
    822c:	0000e5a0 	.word	0x0000e5a0
    8230:	00006181 	.word	0x00006181

00008234 <_spi_m_async_register_callback>:
{
    8234:	b570      	push	{r4, r5, r6, lr}
    8236:	460d      	mov	r5, r1
    8238:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    823a:	4604      	mov	r4, r0
    823c:	b168      	cbz	r0, 825a <_spi_m_async_register_callback+0x26>
    823e:	2903      	cmp	r1, #3
    8240:	bf8c      	ite	hi
    8242:	2000      	movhi	r0, #0
    8244:	2001      	movls	r0, #1
    8246:	f640 426b 	movw	r2, #3179	; 0xc6b
    824a:	4905      	ldr	r1, [pc, #20]	; (8260 <_spi_m_async_register_callback+0x2c>)
    824c:	4b05      	ldr	r3, [pc, #20]	; (8264 <_spi_m_async_register_callback+0x30>)
    824e:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    8250:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    8254:	60a6      	str	r6, [r4, #8]
}
    8256:	2000      	movs	r0, #0
    8258:	bd70      	pop	{r4, r5, r6, pc}
    825a:	2000      	movs	r0, #0
    825c:	e7f3      	b.n	8246 <_spi_m_async_register_callback+0x12>
    825e:	bf00      	nop
    8260:	0000e5a0 	.word	0x0000e5a0
    8264:	00006181 	.word	0x00006181

00008268 <_spi_m_async_set_irq_state>:
{
    8268:	b570      	push	{r4, r5, r6, lr}
    826a:	460c      	mov	r4, r1
    826c:	4615      	mov	r5, r2
	ASSERT(device);
    826e:	4606      	mov	r6, r0
    8270:	f640 42ac 	movw	r2, #3244	; 0xcac
    8274:	4908      	ldr	r1, [pc, #32]	; (8298 <_spi_m_async_set_irq_state+0x30>)
    8276:	3000      	adds	r0, #0
    8278:	bf18      	it	ne
    827a:	2001      	movne	r0, #1
    827c:	4b07      	ldr	r3, [pc, #28]	; (829c <_spi_m_async_set_irq_state+0x34>)
    827e:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    8280:	2c03      	cmp	r4, #3
    8282:	d000      	beq.n	8286 <_spi_m_async_set_irq_state+0x1e>
    8284:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    8286:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    8288:	b115      	cbz	r5, 8290 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    828a:	2280      	movs	r2, #128	; 0x80
    828c:	759a      	strb	r2, [r3, #22]
}
    828e:	e7f9      	b.n	8284 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    8290:	2280      	movs	r2, #128	; 0x80
    8292:	751a      	strb	r2, [r3, #20]
    8294:	bd70      	pop	{r4, r5, r6, pc}
    8296:	bf00      	nop
    8298:	0000e5a0 	.word	0x0000e5a0
    829c:	00006181 	.word	0x00006181

000082a0 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    82a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82a4:	4605      	mov	r5, r0
    82a6:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    82a8:	4608      	mov	r0, r1
    82aa:	4b52      	ldr	r3, [pc, #328]	; (83f4 <_spi_m_dma_init+0x154>)
    82ac:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    82ae:	2803      	cmp	r0, #3
    82b0:	d00c      	beq.n	82cc <_spi_m_dma_init+0x2c>
    82b2:	2807      	cmp	r0, #7
    82b4:	bf08      	it	eq
    82b6:	2301      	moveq	r3, #1
    82b8:	d009      	beq.n	82ce <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    82ba:	2d00      	cmp	r5, #0
    82bc:	f000 8086 	beq.w	83cc <_spi_m_dma_init+0x12c>
    82c0:	2c00      	cmp	r4, #0
    82c2:	f040 808d 	bne.w	83e0 <_spi_m_dma_init+0x140>
	return NULL;
    82c6:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    82c8:	2000      	movs	r0, #0
    82ca:	e009      	b.n	82e0 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    82cc:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    82ce:	4e4a      	ldr	r6, [pc, #296]	; (83f8 <_spi_m_dma_init+0x158>)
    82d0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    82d4:	441e      	add	r6, r3
	ASSERT(dev && hw);
    82d6:	2d00      	cmp	r5, #0
    82d8:	d0f6      	beq.n	82c8 <_spi_m_dma_init+0x28>
    82da:	2001      	movs	r0, #1
    82dc:	2c00      	cmp	r4, #0
    82de:	d0f3      	beq.n	82c8 <_spi_m_dma_init+0x28>
    82e0:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    82e4:	4945      	ldr	r1, [pc, #276]	; (83fc <_spi_m_dma_init+0x15c>)
    82e6:	4b46      	ldr	r3, [pc, #280]	; (8400 <_spi_m_dma_init+0x160>)
    82e8:	4798      	blx	r3

	if (regs == NULL) {
    82ea:	2e00      	cmp	r6, #0
    82ec:	d06a      	beq.n	83c4 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    82ee:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    82f0:	f013 0f01 	tst.w	r3, #1
    82f4:	d11d      	bne.n	8332 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    82f6:	6833      	ldr	r3, [r6, #0]
    82f8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    82fc:	69e3      	ldr	r3, [r4, #28]
    82fe:	f013 0f03 	tst.w	r3, #3
    8302:	d1fb      	bne.n	82fc <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    8304:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8306:	f013 0f02 	tst.w	r3, #2
    830a:	d00b      	beq.n	8324 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    830c:	6823      	ldr	r3, [r4, #0]
    830e:	f023 0302 	bic.w	r3, r3, #2
    8312:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8314:	69e3      	ldr	r3, [r4, #28]
    8316:	f013 0f03 	tst.w	r3, #3
    831a:	d1fb      	bne.n	8314 <_spi_m_dma_init+0x74>
    831c:	69e3      	ldr	r3, [r4, #28]
    831e:	f013 0f02 	tst.w	r3, #2
    8322:	d1fb      	bne.n	831c <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8324:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8328:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    832a:	69e3      	ldr	r3, [r4, #28]
    832c:	f013 0f03 	tst.w	r3, #3
    8330:	d1fb      	bne.n	832a <_spi_m_dma_init+0x8a>
    8332:	69e3      	ldr	r3, [r4, #28]
    8334:	f013 0f01 	tst.w	r3, #1
    8338:	d1fb      	bne.n	8332 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    833a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    833c:	f44f 6217 	mov.w	r2, #2416	; 0x970
    8340:	492e      	ldr	r1, [pc, #184]	; (83fc <_spi_m_dma_init+0x15c>)
    8342:	1c20      	adds	r0, r4, #0
    8344:	bf18      	it	ne
    8346:	2001      	movne	r0, #1
    8348:	4b2d      	ldr	r3, [pc, #180]	; (8400 <_spi_m_dma_init+0x160>)
    834a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    834c:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    834e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8352:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8356:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8358:	69e3      	ldr	r3, [r4, #28]
    835a:	f013 0f03 	tst.w	r3, #3
    835e:	d1fb      	bne.n	8358 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    8360:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    8362:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    8366:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    836a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    836e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8370:	69e3      	ldr	r3, [r4, #28]
    8372:	f013 0f17 	tst.w	r3, #23
    8376:	d1fb      	bne.n	8370 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8378:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    837a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    837c:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    837e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    8382:	f105 0818 	add.w	r8, r5, #24
    8386:	4620      	mov	r0, r4
    8388:	4b1e      	ldr	r3, [pc, #120]	; (8404 <_spi_m_dma_init+0x164>)
    838a:	4798      	blx	r3
    838c:	4601      	mov	r1, r0
    838e:	4640      	mov	r0, r8
    8390:	4f1d      	ldr	r7, [pc, #116]	; (8408 <_spi_m_dma_init+0x168>)
    8392:	47b8      	blx	r7
	dev->resource->back                 = dev;
    8394:	69ab      	ldr	r3, [r5, #24]
    8396:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    8398:	69ab      	ldr	r3, [r5, #24]
    839a:	4a1c      	ldr	r2, [pc, #112]	; (840c <_spi_m_dma_init+0x16c>)
    839c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    839e:	69ab      	ldr	r3, [r5, #24]
    83a0:	4e1b      	ldr	r6, [pc, #108]	; (8410 <_spi_m_dma_init+0x170>)
    83a2:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    83a4:	4620      	mov	r0, r4
    83a6:	4b1b      	ldr	r3, [pc, #108]	; (8414 <_spi_m_dma_init+0x174>)
    83a8:	4798      	blx	r3
    83aa:	4601      	mov	r1, r0
    83ac:	4640      	mov	r0, r8
    83ae:	47b8      	blx	r7
	dev->resource->back                 = dev;
    83b0:	69ab      	ldr	r3, [r5, #24]
    83b2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    83b4:	69ab      	ldr	r3, [r5, #24]
    83b6:	4a18      	ldr	r2, [pc, #96]	; (8418 <_spi_m_dma_init+0x178>)
    83b8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    83ba:	69ab      	ldr	r3, [r5, #24]
    83bc:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    83be:	2000      	movs	r0, #0
    83c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    83c4:	f06f 000c 	mvn.w	r0, #12
    83c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    83cc:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    83d0:	490a      	ldr	r1, [pc, #40]	; (83fc <_spi_m_dma_init+0x15c>)
    83d2:	2000      	movs	r0, #0
    83d4:	4b0a      	ldr	r3, [pc, #40]	; (8400 <_spi_m_dma_init+0x160>)
    83d6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    83d8:	f06f 000c 	mvn.w	r0, #12
    83dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    83e0:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    83e4:	4905      	ldr	r1, [pc, #20]	; (83fc <_spi_m_dma_init+0x15c>)
    83e6:	2001      	movs	r0, #1
    83e8:	4b05      	ldr	r3, [pc, #20]	; (8400 <_spi_m_dma_init+0x160>)
    83ea:	4798      	blx	r3
		return ERR_INVALID_ARG;
    83ec:	f06f 000c 	mvn.w	r0, #12
    83f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83f4:	000071bd 	.word	0x000071bd
    83f8:	0000e57c 	.word	0x0000e57c
    83fc:	0000e5a0 	.word	0x0000e5a0
    8400:	00006181 	.word	0x00006181
    8404:	000073dd 	.word	0x000073dd
    8408:	00006a1d 	.word	0x00006a1d
    840c:	000073f1 	.word	0x000073f1
    8410:	00007409 	.word	0x00007409
    8414:	000073c9 	.word	0x000073c9
    8418:	000073fd 	.word	0x000073fd

0000841c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    841c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    841e:	4604      	mov	r4, r0
    8420:	b160      	cbz	r0, 843c <_spi_m_dma_enable+0x20>
    8422:	6800      	ldr	r0, [r0, #0]
    8424:	3000      	adds	r0, #0
    8426:	bf18      	it	ne
    8428:	2001      	movne	r0, #1
    842a:	f640 52c9 	movw	r2, #3529	; 0xdc9
    842e:	4904      	ldr	r1, [pc, #16]	; (8440 <_spi_m_dma_enable+0x24>)
    8430:	4b04      	ldr	r3, [pc, #16]	; (8444 <_spi_m_dma_enable+0x28>)
    8432:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    8434:	6820      	ldr	r0, [r4, #0]
    8436:	4b04      	ldr	r3, [pc, #16]	; (8448 <_spi_m_dma_enable+0x2c>)
    8438:	4798      	blx	r3
}
    843a:	bd10      	pop	{r4, pc}
    843c:	2000      	movs	r0, #0
    843e:	e7f4      	b.n	842a <_spi_m_dma_enable+0xe>
    8440:	0000e5a0 	.word	0x0000e5a0
    8444:	00006181 	.word	0x00006181
    8448:	000072e5 	.word	0x000072e5

0000844c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    844c:	b570      	push	{r4, r5, r6, lr}
    844e:	4605      	mov	r5, r0
    8450:	4614      	mov	r4, r2
	switch (type) {
    8452:	2901      	cmp	r1, #1
    8454:	d00e      	beq.n	8474 <_spi_m_dma_register_callback+0x28>
    8456:	b111      	cbz	r1, 845e <_spi_m_dma_register_callback+0x12>
    8458:	2902      	cmp	r1, #2
    845a:	d016      	beq.n	848a <_spi_m_dma_register_callback+0x3e>
    845c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    845e:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    8460:	6800      	ldr	r0, [r0, #0]
    8462:	4b13      	ldr	r3, [pc, #76]	; (84b0 <_spi_m_dma_register_callback+0x64>)
    8464:	4798      	blx	r3
    8466:	1c22      	adds	r2, r4, #0
    8468:	bf18      	it	ne
    846a:	2201      	movne	r2, #1
    846c:	2100      	movs	r1, #0
    846e:	4b11      	ldr	r3, [pc, #68]	; (84b4 <_spi_m_dma_register_callback+0x68>)
    8470:	4798      	blx	r3
		break;
    8472:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    8474:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    8476:	6800      	ldr	r0, [r0, #0]
    8478:	4b0f      	ldr	r3, [pc, #60]	; (84b8 <_spi_m_dma_register_callback+0x6c>)
    847a:	4798      	blx	r3
    847c:	1c22      	adds	r2, r4, #0
    847e:	bf18      	it	ne
    8480:	2201      	movne	r2, #1
    8482:	2100      	movs	r1, #0
    8484:	4b0b      	ldr	r3, [pc, #44]	; (84b4 <_spi_m_dma_register_callback+0x68>)
    8486:	4798      	blx	r3
		break;
    8488:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    848a:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    848c:	6800      	ldr	r0, [r0, #0]
    848e:	4b0a      	ldr	r3, [pc, #40]	; (84b8 <_spi_m_dma_register_callback+0x6c>)
    8490:	4798      	blx	r3
    8492:	3400      	adds	r4, #0
    8494:	bf18      	it	ne
    8496:	2401      	movne	r4, #1
    8498:	4622      	mov	r2, r4
    849a:	2101      	movs	r1, #1
    849c:	4e05      	ldr	r6, [pc, #20]	; (84b4 <_spi_m_dma_register_callback+0x68>)
    849e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    84a0:	6828      	ldr	r0, [r5, #0]
    84a2:	4b03      	ldr	r3, [pc, #12]	; (84b0 <_spi_m_dma_register_callback+0x64>)
    84a4:	4798      	blx	r3
    84a6:	4622      	mov	r2, r4
    84a8:	2101      	movs	r1, #1
    84aa:	47b0      	blx	r6
    84ac:	bd70      	pop	{r4, r5, r6, pc}
    84ae:	bf00      	nop
    84b0:	000073c9 	.word	0x000073c9
    84b4:	000068f5 	.word	0x000068f5
    84b8:	000073dd 	.word	0x000073dd

000084bc <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    84bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84c0:	4605      	mov	r5, r0
    84c2:	4689      	mov	r9, r1
    84c4:	4617      	mov	r7, r2
    84c6:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    84c8:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    84cc:	4658      	mov	r0, fp
    84ce:	4b46      	ldr	r3, [pc, #280]	; (85e8 <_spi_m_dma_transfer+0x12c>)
    84d0:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    84d2:	2803      	cmp	r0, #3
    84d4:	d053      	beq.n	857e <_spi_m_dma_transfer+0xc2>
    84d6:	2807      	cmp	r0, #7
    84d8:	bf08      	it	eq
    84da:	2201      	moveq	r2, #1
    84dc:	d050      	beq.n	8580 <_spi_m_dma_transfer+0xc4>
	return NULL;
    84de:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    84e2:	4658      	mov	r0, fp
    84e4:	4b41      	ldr	r3, [pc, #260]	; (85ec <_spi_m_dma_transfer+0x130>)
    84e6:	4798      	blx	r3
    84e8:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    84ea:	4658      	mov	r0, fp
    84ec:	4b40      	ldr	r3, [pc, #256]	; (85f0 <_spi_m_dma_transfer+0x134>)
    84ee:	4798      	blx	r3
    84f0:	4604      	mov	r4, r0

	if (rxbuf) {
    84f2:	2f00      	cmp	r7, #0
    84f4:	d04b      	beq.n	858e <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    84f6:	2d00      	cmp	r5, #0
    84f8:	d047      	beq.n	858a <_spi_m_dma_transfer+0xce>
    84fa:	f11b 0000 	adds.w	r0, fp, #0
    84fe:	bf18      	it	ne
    8500:	2001      	movne	r0, #1
    8502:	f640 5213 	movw	r2, #3347	; 0xd13
    8506:	493b      	ldr	r1, [pc, #236]	; (85f4 <_spi_m_dma_transfer+0x138>)
    8508:	4b3b      	ldr	r3, [pc, #236]	; (85f8 <_spi_m_dma_transfer+0x13c>)
    850a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    850c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    850e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    8510:	f013 0f04 	tst.w	r3, #4
    8514:	d107      	bne.n	8526 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    8516:	6853      	ldr	r3, [r2, #4]
    8518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    851c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    851e:	69d3      	ldr	r3, [r2, #28]
    8520:	f013 0f17 	tst.w	r3, #23
    8524:	d1fb      	bne.n	851e <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    8526:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    8528:	3128      	adds	r1, #40	; 0x28
    852a:	4630      	mov	r0, r6
    852c:	4b33      	ldr	r3, [pc, #204]	; (85fc <_spi_m_dma_transfer+0x140>)
    852e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    8530:	4639      	mov	r1, r7
    8532:	4630      	mov	r0, r6
    8534:	4b32      	ldr	r3, [pc, #200]	; (8600 <_spi_m_dma_transfer+0x144>)
    8536:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    8538:	4641      	mov	r1, r8
    853a:	4630      	mov	r0, r6
    853c:	4b31      	ldr	r3, [pc, #196]	; (8604 <_spi_m_dma_transfer+0x148>)
    853e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    8540:	2100      	movs	r1, #0
    8542:	4630      	mov	r0, r6
    8544:	4b30      	ldr	r3, [pc, #192]	; (8608 <_spi_m_dma_transfer+0x14c>)
    8546:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    8548:	f1b9 0f00 	cmp.w	r9, #0
    854c:	d039      	beq.n	85c2 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    854e:	4649      	mov	r1, r9
    8550:	4620      	mov	r0, r4
    8552:	4b2a      	ldr	r3, [pc, #168]	; (85fc <_spi_m_dma_transfer+0x140>)
    8554:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    8556:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    8558:	3128      	adds	r1, #40	; 0x28
    855a:	4620      	mov	r0, r4
    855c:	4b28      	ldr	r3, [pc, #160]	; (8600 <_spi_m_dma_transfer+0x144>)
    855e:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    8560:	2101      	movs	r1, #1
    8562:	4620      	mov	r0, r4
    8564:	4b29      	ldr	r3, [pc, #164]	; (860c <_spi_m_dma_transfer+0x150>)
    8566:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    8568:	4641      	mov	r1, r8
    856a:	4620      	mov	r0, r4
    856c:	4b25      	ldr	r3, [pc, #148]	; (8604 <_spi_m_dma_transfer+0x148>)
    856e:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    8570:	2100      	movs	r1, #0
    8572:	4620      	mov	r0, r4
    8574:	4b24      	ldr	r3, [pc, #144]	; (8608 <_spi_m_dma_transfer+0x14c>)
    8576:	4798      	blx	r3

	return ERR_NONE;
}
    8578:	2000      	movs	r0, #0
    857a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    857e:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    8580:	4b23      	ldr	r3, [pc, #140]	; (8610 <_spi_m_dma_transfer+0x154>)
    8582:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    8586:	4492      	add	sl, r2
    8588:	e7ab      	b.n	84e2 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    858a:	2000      	movs	r0, #0
    858c:	e7b9      	b.n	8502 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    858e:	b1b5      	cbz	r5, 85be <_spi_m_dma_transfer+0x102>
    8590:	f11b 0000 	adds.w	r0, fp, #0
    8594:	bf18      	it	ne
    8596:	2001      	movne	r0, #1
    8598:	f640 521a 	movw	r2, #3354	; 0xd1a
    859c:	4915      	ldr	r1, [pc, #84]	; (85f4 <_spi_m_dma_transfer+0x138>)
    859e:	4b16      	ldr	r3, [pc, #88]	; (85f8 <_spi_m_dma_transfer+0x13c>)
    85a0:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    85a2:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    85a4:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    85a6:	f013 0f04 	tst.w	r3, #4
    85aa:	d1cd      	bne.n	8548 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    85ac:	6853      	ldr	r3, [r2, #4]
    85ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    85b2:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    85b4:	69d3      	ldr	r3, [r2, #28]
    85b6:	f013 0f17 	tst.w	r3, #23
    85ba:	d1fb      	bne.n	85b4 <_spi_m_dma_transfer+0xf8>
    85bc:	e7c4      	b.n	8548 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    85be:	2000      	movs	r0, #0
    85c0:	e7ea      	b.n	8598 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    85c2:	f10a 010e 	add.w	r1, sl, #14
    85c6:	4620      	mov	r0, r4
    85c8:	4b0c      	ldr	r3, [pc, #48]	; (85fc <_spi_m_dma_transfer+0x140>)
    85ca:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    85cc:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    85ce:	3128      	adds	r1, #40	; 0x28
    85d0:	4620      	mov	r0, r4
    85d2:	4b0b      	ldr	r3, [pc, #44]	; (8600 <_spi_m_dma_transfer+0x144>)
    85d4:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    85d6:	2100      	movs	r1, #0
    85d8:	4620      	mov	r0, r4
    85da:	4b0c      	ldr	r3, [pc, #48]	; (860c <_spi_m_dma_transfer+0x150>)
    85dc:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    85de:	4641      	mov	r1, r8
    85e0:	4620      	mov	r0, r4
    85e2:	4b08      	ldr	r3, [pc, #32]	; (8604 <_spi_m_dma_transfer+0x148>)
    85e4:	4798      	blx	r3
    85e6:	e7c3      	b.n	8570 <_spi_m_dma_transfer+0xb4>
    85e8:	000071bd 	.word	0x000071bd
    85ec:	000073dd 	.word	0x000073dd
    85f0:	000073c9 	.word	0x000073c9
    85f4:	0000e5a0 	.word	0x0000e5a0
    85f8:	00006181 	.word	0x00006181
    85fc:	00006959 	.word	0x00006959
    8600:	00006949 	.word	0x00006949
    8604:	00006985 	.word	0x00006985
    8608:	000069dd 	.word	0x000069dd
    860c:	00006969 	.word	0x00006969
    8610:	0000e57c 	.word	0x0000e57c

00008614 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    8614:	4b03      	ldr	r3, [pc, #12]	; (8624 <_delay_init+0x10>)
    8616:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    861a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    861c:	2205      	movs	r2, #5
    861e:	601a      	str	r2, [r3, #0]
    8620:	4770      	bx	lr
    8622:	bf00      	nop
    8624:	e000e010 	.word	0xe000e010

00008628 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    8628:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    862a:	b303      	cbz	r3, 866e <_delay_cycles+0x46>
{
    862c:	b430      	push	{r4, r5}
    862e:	1e5d      	subs	r5, r3, #1
    8630:	b2ed      	uxtb	r5, r5
	while (n--) {
    8632:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    8634:	4a12      	ldr	r2, [pc, #72]	; (8680 <_delay_cycles+0x58>)
    8636:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    863a:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    863c:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    863e:	6813      	ldr	r3, [r2, #0]
    8640:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8644:	d0fb      	beq.n	863e <_delay_cycles+0x16>
	while (n--) {
    8646:	3801      	subs	r0, #1
    8648:	b2c0      	uxtb	r0, r0
    864a:	28ff      	cmp	r0, #255	; 0xff
    864c:	d1f5      	bne.n	863a <_delay_cycles+0x12>
    864e:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    8652:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    8656:	3101      	adds	r1, #1
    8658:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    865a:	4b09      	ldr	r3, [pc, #36]	; (8680 <_delay_cycles+0x58>)
    865c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    865e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8660:	461a      	mov	r2, r3
    8662:	6813      	ldr	r3, [r2, #0]
    8664:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8668:	d0fb      	beq.n	8662 <_delay_cycles+0x3a>
		;
}
    866a:	bc30      	pop	{r4, r5}
    866c:	4770      	bx	lr
	SysTick->LOAD = buf;
    866e:	4b04      	ldr	r3, [pc, #16]	; (8680 <_delay_cycles+0x58>)
    8670:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    8672:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8674:	461a      	mov	r2, r3
    8676:	6813      	ldr	r3, [r2, #0]
    8678:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    867c:	d0fb      	beq.n	8676 <_delay_cycles+0x4e>
    867e:	4770      	bx	lr
    8680:	e000e010 	.word	0xe000e010

00008684 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8684:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8686:	6813      	ldr	r3, [r2, #0]
    8688:	f043 0302 	orr.w	r3, r3, #2
    868c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    868e:	6913      	ldr	r3, [r2, #16]
    8690:	f013 0f03 	tst.w	r3, #3
    8694:	d1fb      	bne.n	868e <_tc_timer_start+0xa>
}
    8696:	4770      	bx	lr

00008698 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8698:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    869a:	6813      	ldr	r3, [r2, #0]
    869c:	f023 0302 	bic.w	r3, r3, #2
    86a0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86a2:	6913      	ldr	r3, [r2, #16]
    86a4:	f013 0f03 	tst.w	r3, #3
    86a8:	d1fb      	bne.n	86a2 <_tc_timer_stop+0xa>
}
    86aa:	4770      	bx	lr

000086ac <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    86ac:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    86ae:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    86b0:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86b4:	2a02      	cmp	r2, #2
    86b6:	d00a      	beq.n	86ce <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    86b8:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86ba:	f012 0f0c 	tst.w	r2, #12
    86be:	d10c      	bne.n	86da <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    86c0:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    86c2:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86c4:	691a      	ldr	r2, [r3, #16]
    86c6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    86ca:	d1fb      	bne.n	86c4 <_tc_timer_set_period+0x18>
    86cc:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    86ce:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86d0:	691a      	ldr	r2, [r3, #16]
    86d2:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    86d6:	d1fb      	bne.n	86d0 <_tc_timer_set_period+0x24>
    86d8:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    86da:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    86dc:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86e0:	2a01      	cmp	r2, #1
    86e2:	d000      	beq.n	86e6 <_tc_timer_set_period+0x3a>
    86e4:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    86e6:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    86e8:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    86ea:	691a      	ldr	r2, [r3, #16]
    86ec:	f012 0f20 	tst.w	r2, #32
    86f0:	d1fb      	bne.n	86ea <_tc_timer_set_period+0x3e>
    86f2:	e7f7      	b.n	86e4 <_tc_timer_set_period+0x38>

000086f4 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    86f4:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    86f6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    86f8:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    86fc:	2a02      	cmp	r2, #2
    86fe:	d00a      	beq.n	8716 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8700:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8702:	f012 0f0c 	tst.w	r2, #12
    8706:	d10c      	bne.n	8722 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8708:	691a      	ldr	r2, [r3, #16]
    870a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    870e:	d1fb      	bne.n	8708 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8710:	8b98      	ldrh	r0, [r3, #28]
    8712:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    8714:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8716:	691a      	ldr	r2, [r3, #16]
    8718:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    871c:	d1fb      	bne.n	8716 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    871e:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    8720:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8722:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8724:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8728:	2a01      	cmp	r2, #1
    872a:	d001      	beq.n	8730 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    872c:	2000      	movs	r0, #0
}
    872e:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8730:	691a      	ldr	r2, [r3, #16]
    8732:	f012 0f20 	tst.w	r2, #32
    8736:	d1fb      	bne.n	8730 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    8738:	7ed8      	ldrb	r0, [r3, #27]
    873a:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    873c:	4770      	bx	lr

0000873e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    873e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8740:	6913      	ldr	r3, [r2, #16]
    8742:	f013 0f03 	tst.w	r3, #3
    8746:	d1fb      	bne.n	8740 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8748:	6810      	ldr	r0, [r2, #0]
}
    874a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    874e:	4770      	bx	lr

00008750 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8750:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    8752:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8754:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8756:	f012 0f01 	tst.w	r2, #1
    875a:	d100      	bne.n	875e <tc_interrupt_handler+0xe>
    875c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    875e:	2201      	movs	r2, #1
    8760:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    8762:	6803      	ldr	r3, [r0, #0]
    8764:	4798      	blx	r3
	}
}
    8766:	e7f9      	b.n	875c <tc_interrupt_handler+0xc>

00008768 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8768:	b570      	push	{r4, r5, r6, lr}
    876a:	b088      	sub	sp, #32
    876c:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    876e:	466c      	mov	r4, sp
    8770:	4d19      	ldr	r5, [pc, #100]	; (87d8 <get_tc_index+0x70>)
    8772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8776:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    877a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    877e:	9b00      	ldr	r3, [sp, #0]
    8780:	42b3      	cmp	r3, r6
    8782:	d00c      	beq.n	879e <get_tc_index+0x36>
    8784:	4630      	mov	r0, r6
    8786:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8788:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    878a:	f852 1b04 	ldr.w	r1, [r2], #4
    878e:	4281      	cmp	r1, r0
    8790:	d006      	beq.n	87a0 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8792:	3301      	adds	r3, #1
    8794:	2b08      	cmp	r3, #8
    8796:	d1f8      	bne.n	878a <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8798:	2000      	movs	r0, #0
			return i;
    879a:	b240      	sxtb	r0, r0
    879c:	e013      	b.n	87c6 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    879e:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    87a0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    87a4:	d015      	beq.n	87d2 <get_tc_index+0x6a>
    87a6:	2b01      	cmp	r3, #1
    87a8:	d00f      	beq.n	87ca <get_tc_index+0x62>
    87aa:	2b02      	cmp	r3, #2
    87ac:	d00f      	beq.n	87ce <get_tc_index+0x66>
    87ae:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    87b0:	bf08      	it	eq
    87b2:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    87b4:	d0f1      	beq.n	879a <get_tc_index+0x32>
	ASSERT(false);
    87b6:	f240 1267 	movw	r2, #359	; 0x167
    87ba:	4908      	ldr	r1, [pc, #32]	; (87dc <get_tc_index+0x74>)
    87bc:	2000      	movs	r0, #0
    87be:	4b08      	ldr	r3, [pc, #32]	; (87e0 <get_tc_index+0x78>)
    87c0:	4798      	blx	r3
	return -1;
    87c2:	f04f 30ff 	mov.w	r0, #4294967295
}
    87c6:	b008      	add	sp, #32
    87c8:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    87ca:	2001      	movs	r0, #1
    87cc:	e7e5      	b.n	879a <get_tc_index+0x32>
    87ce:	2002      	movs	r0, #2
    87d0:	e7e3      	b.n	879a <get_tc_index+0x32>
    87d2:	2000      	movs	r0, #0
    87d4:	e7e1      	b.n	879a <get_tc_index+0x32>
    87d6:	bf00      	nop
    87d8:	0000e5bc 	.word	0x0000e5bc
    87dc:	0000e62c 	.word	0x0000e62c
    87e0:	00006181 	.word	0x00006181

000087e4 <_tc_timer_init>:
{
    87e4:	b570      	push	{r4, r5, r6, lr}
    87e6:	4606      	mov	r6, r0
    87e8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    87ea:	4608      	mov	r0, r1
    87ec:	4b71      	ldr	r3, [pc, #452]	; (89b4 <_tc_timer_init+0x1d0>)
    87ee:	4798      	blx	r3
    87f0:	4605      	mov	r5, r0
	device->hw = hw;
    87f2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    87f4:	22a0      	movs	r2, #160	; 0xa0
    87f6:	4970      	ldr	r1, [pc, #448]	; (89b8 <_tc_timer_init+0x1d4>)
    87f8:	2001      	movs	r0, #1
    87fa:	4b70      	ldr	r3, [pc, #448]	; (89bc <_tc_timer_init+0x1d8>)
    87fc:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    87fe:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8800:	f013 0f01 	tst.w	r3, #1
    8804:	d119      	bne.n	883a <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8806:	6923      	ldr	r3, [r4, #16]
    8808:	f013 0f03 	tst.w	r3, #3
    880c:	d1fb      	bne.n	8806 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    880e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8810:	f013 0f02 	tst.w	r3, #2
    8814:	d00b      	beq.n	882e <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8816:	6823      	ldr	r3, [r4, #0]
    8818:	f023 0302 	bic.w	r3, r3, #2
    881c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    881e:	6923      	ldr	r3, [r4, #16]
    8820:	f013 0f03 	tst.w	r3, #3
    8824:	d1fb      	bne.n	881e <_tc_timer_init+0x3a>
    8826:	6923      	ldr	r3, [r4, #16]
    8828:	f013 0f02 	tst.w	r3, #2
    882c:	d1fb      	bne.n	8826 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    882e:	2301      	movs	r3, #1
    8830:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8832:	6923      	ldr	r3, [r4, #16]
    8834:	f013 0f03 	tst.w	r3, #3
    8838:	d1fb      	bne.n	8832 <_tc_timer_init+0x4e>
    883a:	6923      	ldr	r3, [r4, #16]
    883c:	f013 0f01 	tst.w	r3, #1
    8840:	d1fb      	bne.n	883a <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8842:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8846:	4a5e      	ldr	r2, [pc, #376]	; (89c0 <_tc_timer_init+0x1dc>)
    8848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    884c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    884e:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8850:	6923      	ldr	r3, [r4, #16]
    8852:	f013 0f03 	tst.w	r3, #3
    8856:	d1fb      	bne.n	8850 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8858:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    885c:	4958      	ldr	r1, [pc, #352]	; (89c0 <_tc_timer_init+0x1dc>)
    885e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8862:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8866:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    886a:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    886c:	2301      	movs	r3, #1
    886e:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8870:	f002 020c 	and.w	r2, r2, #12
    8874:	2a08      	cmp	r2, #8
    8876:	d056      	beq.n	8926 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8878:	2a00      	cmp	r2, #0
    887a:	d16b      	bne.n	8954 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    887c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8880:	4a4f      	ldr	r2, [pc, #316]	; (89c0 <_tc_timer_init+0x1dc>)
    8882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8886:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8888:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    888a:	6923      	ldr	r3, [r4, #16]
    888c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8890:	d1fb      	bne.n	888a <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8892:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8896:	4a4a      	ldr	r2, [pc, #296]	; (89c0 <_tc_timer_init+0x1dc>)
    8898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    889c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    889e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    88a0:	6923      	ldr	r3, [r4, #16]
    88a2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    88a6:	d1fb      	bne.n	88a0 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    88a8:	2301      	movs	r3, #1
    88aa:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    88ac:	4b45      	ldr	r3, [pc, #276]	; (89c4 <_tc_timer_init+0x1e0>)
    88ae:	429c      	cmp	r4, r3
    88b0:	d077      	beq.n	89a2 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    88b2:	4b45      	ldr	r3, [pc, #276]	; (89c8 <_tc_timer_init+0x1e4>)
    88b4:	429c      	cmp	r4, r3
    88b6:	d077      	beq.n	89a8 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    88b8:	4b44      	ldr	r3, [pc, #272]	; (89cc <_tc_timer_init+0x1e8>)
    88ba:	429c      	cmp	r4, r3
    88bc:	d077      	beq.n	89ae <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    88be:	4b44      	ldr	r3, [pc, #272]	; (89d0 <_tc_timer_init+0x1ec>)
    88c0:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    88c2:	bf04      	itt	eq
    88c4:	4b43      	ldreq	r3, [pc, #268]	; (89d4 <_tc_timer_init+0x1f0>)
    88c6:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    88c8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    88cc:	4a3c      	ldr	r2, [pc, #240]	; (89c0 <_tc_timer_init+0x1dc>)
    88ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    88d2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    88d6:	2b00      	cmp	r3, #0
    88d8:	db23      	blt.n	8922 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    88da:	095a      	lsrs	r2, r3, #5
    88dc:	f003 031f 	and.w	r3, r3, #31
    88e0:	2101      	movs	r1, #1
    88e2:	fa01 f303 	lsl.w	r3, r1, r3
    88e6:	3220      	adds	r2, #32
    88e8:	493b      	ldr	r1, [pc, #236]	; (89d8 <_tc_timer_init+0x1f4>)
    88ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    88ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    88f2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    88f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    88fa:	4b31      	ldr	r3, [pc, #196]	; (89c0 <_tc_timer_init+0x1dc>)
    88fc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8900:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8904:	2b00      	cmp	r3, #0
    8906:	db0c      	blt.n	8922 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8908:	0959      	lsrs	r1, r3, #5
    890a:	f003 031f 	and.w	r3, r3, #31
    890e:	2201      	movs	r2, #1
    8910:	fa02 f303 	lsl.w	r3, r2, r3
    8914:	4a30      	ldr	r2, [pc, #192]	; (89d8 <_tc_timer_init+0x1f4>)
    8916:	f101 0060 	add.w	r0, r1, #96	; 0x60
    891a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    891e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    8922:	2000      	movs	r0, #0
    8924:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8926:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    892a:	4a25      	ldr	r2, [pc, #148]	; (89c0 <_tc_timer_init+0x1dc>)
    892c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8932:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8934:	6923      	ldr	r3, [r4, #16]
    8936:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    893a:	d1fb      	bne.n	8934 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    893c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8940:	4a1f      	ldr	r2, [pc, #124]	; (89c0 <_tc_timer_init+0x1dc>)
    8942:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8948:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    894a:	6923      	ldr	r3, [r4, #16]
    894c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8950:	d1fb      	bne.n	894a <_tc_timer_init+0x166>
    8952:	e7a9      	b.n	88a8 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8954:	2a04      	cmp	r2, #4
    8956:	d1a7      	bne.n	88a8 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8958:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    895c:	4a18      	ldr	r2, [pc, #96]	; (89c0 <_tc_timer_init+0x1dc>)
    895e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8962:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8966:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8968:	6923      	ldr	r3, [r4, #16]
    896a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    896e:	d1fb      	bne.n	8968 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8970:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8974:	4a12      	ldr	r2, [pc, #72]	; (89c0 <_tc_timer_init+0x1dc>)
    8976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    897a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    897e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8980:	6923      	ldr	r3, [r4, #16]
    8982:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8986:	d1fb      	bne.n	8980 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8988:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    898c:	4a0c      	ldr	r2, [pc, #48]	; (89c0 <_tc_timer_init+0x1dc>)
    898e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8992:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    8996:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8998:	6923      	ldr	r3, [r4, #16]
    899a:	f013 0f20 	tst.w	r3, #32
    899e:	d1fb      	bne.n	8998 <_tc_timer_init+0x1b4>
    89a0:	e782      	b.n	88a8 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    89a2:	4b0c      	ldr	r3, [pc, #48]	; (89d4 <_tc_timer_init+0x1f0>)
    89a4:	601e      	str	r6, [r3, #0]
    89a6:	e78a      	b.n	88be <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    89a8:	4b0a      	ldr	r3, [pc, #40]	; (89d4 <_tc_timer_init+0x1f0>)
    89aa:	605e      	str	r6, [r3, #4]
    89ac:	e78c      	b.n	88c8 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    89ae:	4b09      	ldr	r3, [pc, #36]	; (89d4 <_tc_timer_init+0x1f0>)
    89b0:	609e      	str	r6, [r3, #8]
    89b2:	e789      	b.n	88c8 <_tc_timer_init+0xe4>
    89b4:	00008769 	.word	0x00008769
    89b8:	0000e62c 	.word	0x0000e62c
    89bc:	00006181 	.word	0x00006181
    89c0:	0000e5bc 	.word	0x0000e5bc
    89c4:	40003800 	.word	0x40003800
    89c8:	40003c00 	.word	0x40003c00
    89cc:	4101a000 	.word	0x4101a000
    89d0:	4101c000 	.word	0x4101c000
    89d4:	20000998 	.word	0x20000998
    89d8:	e000e100 	.word	0xe000e100

000089dc <_tc_timer_deinit>:
{
    89dc:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    89de:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    89e0:	4620      	mov	r0, r4
    89e2:	4b18      	ldr	r3, [pc, #96]	; (8a44 <_tc_timer_deinit+0x68>)
    89e4:	4798      	blx	r3
    89e6:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    89e8:	22cd      	movs	r2, #205	; 0xcd
    89ea:	4917      	ldr	r1, [pc, #92]	; (8a48 <_tc_timer_deinit+0x6c>)
    89ec:	2001      	movs	r0, #1
    89ee:	4b17      	ldr	r3, [pc, #92]	; (8a4c <_tc_timer_deinit+0x70>)
    89f0:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    89f2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    89f6:	4b16      	ldr	r3, [pc, #88]	; (8a50 <_tc_timer_deinit+0x74>)
    89f8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    89fc:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8a00:	2b00      	cmp	r3, #0
    8a02:	db0d      	blt.n	8a20 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8a04:	095a      	lsrs	r2, r3, #5
    8a06:	f003 031f 	and.w	r3, r3, #31
    8a0a:	2101      	movs	r1, #1
    8a0c:	fa01 f303 	lsl.w	r3, r1, r3
    8a10:	3220      	adds	r2, #32
    8a12:	4910      	ldr	r1, [pc, #64]	; (8a54 <_tc_timer_deinit+0x78>)
    8a14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8a18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8a1c:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8a20:	6823      	ldr	r3, [r4, #0]
    8a22:	f023 0302 	bic.w	r3, r3, #2
    8a26:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8a28:	6923      	ldr	r3, [r4, #16]
    8a2a:	f013 0f03 	tst.w	r3, #3
    8a2e:	d1fb      	bne.n	8a28 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8a30:	6823      	ldr	r3, [r4, #0]
    8a32:	f043 0301 	orr.w	r3, r3, #1
    8a36:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8a38:	6923      	ldr	r3, [r4, #16]
    8a3a:	f013 0f01 	tst.w	r3, #1
    8a3e:	d1fb      	bne.n	8a38 <_tc_timer_deinit+0x5c>
}
    8a40:	bd38      	pop	{r3, r4, r5, pc}
    8a42:	bf00      	nop
    8a44:	00008769 	.word	0x00008769
    8a48:	0000e62c 	.word	0x0000e62c
    8a4c:	00006181 	.word	0x00006181
    8a50:	0000e5bc 	.word	0x0000e5bc
    8a54:	e000e100 	.word	0xe000e100

00008a58 <_tc_timer_set_irq>:
{
    8a58:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    8a5a:	68c0      	ldr	r0, [r0, #12]
    8a5c:	4b09      	ldr	r3, [pc, #36]	; (8a84 <_tc_timer_set_irq+0x2c>)
    8a5e:	4798      	blx	r3
    8a60:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    8a62:	f44f 7291 	mov.w	r2, #290	; 0x122
    8a66:	4908      	ldr	r1, [pc, #32]	; (8a88 <_tc_timer_set_irq+0x30>)
    8a68:	2001      	movs	r0, #1
    8a6a:	4b08      	ldr	r3, [pc, #32]	; (8a8c <_tc_timer_set_irq+0x34>)
    8a6c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    8a6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8a72:	4b07      	ldr	r3, [pc, #28]	; (8a90 <_tc_timer_set_irq+0x38>)
    8a74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    8a78:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    8a7c:	4b05      	ldr	r3, [pc, #20]	; (8a94 <_tc_timer_set_irq+0x3c>)
    8a7e:	4798      	blx	r3
    8a80:	bd10      	pop	{r4, pc}
    8a82:	bf00      	nop
    8a84:	00008769 	.word	0x00008769
    8a88:	0000e62c 	.word	0x0000e62c
    8a8c:	00006181 	.word	0x00006181
    8a90:	0000e5bc 	.word	0x0000e5bc
    8a94:	00006715 	.word	0x00006715

00008a98 <_tc_get_timer>:
}
    8a98:	4800      	ldr	r0, [pc, #0]	; (8a9c <_tc_get_timer+0x4>)
    8a9a:	4770      	bx	lr
    8a9c:	20000378 	.word	0x20000378

00008aa0 <TC0_Handler>:
{
    8aa0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    8aa2:	4b02      	ldr	r3, [pc, #8]	; (8aac <TC0_Handler+0xc>)
    8aa4:	6818      	ldr	r0, [r3, #0]
    8aa6:	4b02      	ldr	r3, [pc, #8]	; (8ab0 <TC0_Handler+0x10>)
    8aa8:	4798      	blx	r3
    8aaa:	bd08      	pop	{r3, pc}
    8aac:	20000998 	.word	0x20000998
    8ab0:	00008751 	.word	0x00008751

00008ab4 <TC1_Handler>:
{
    8ab4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    8ab6:	4b02      	ldr	r3, [pc, #8]	; (8ac0 <TC1_Handler+0xc>)
    8ab8:	6858      	ldr	r0, [r3, #4]
    8aba:	4b02      	ldr	r3, [pc, #8]	; (8ac4 <TC1_Handler+0x10>)
    8abc:	4798      	blx	r3
    8abe:	bd08      	pop	{r3, pc}
    8ac0:	20000998 	.word	0x20000998
    8ac4:	00008751 	.word	0x00008751

00008ac8 <TC2_Handler>:
{
    8ac8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    8aca:	4b02      	ldr	r3, [pc, #8]	; (8ad4 <TC2_Handler+0xc>)
    8acc:	6898      	ldr	r0, [r3, #8]
    8ace:	4b02      	ldr	r3, [pc, #8]	; (8ad8 <TC2_Handler+0x10>)
    8ad0:	4798      	blx	r3
    8ad2:	bd08      	pop	{r3, pc}
    8ad4:	20000998 	.word	0x20000998
    8ad8:	00008751 	.word	0x00008751

00008adc <TC3_Handler>:
{
    8adc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    8ade:	4b02      	ldr	r3, [pc, #8]	; (8ae8 <TC3_Handler+0xc>)
    8ae0:	68d8      	ldr	r0, [r3, #12]
    8ae2:	4b02      	ldr	r3, [pc, #8]	; (8aec <TC3_Handler+0x10>)
    8ae4:	4798      	blx	r3
    8ae6:	bd08      	pop	{r3, pc}
    8ae8:	20000998 	.word	0x20000998
    8aec:	00008751 	.word	0x00008751

00008af0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8af0:	2000      	movs	r0, #0
    8af2:	4770      	bx	lr

00008af4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8af4:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8af6:	7c83      	ldrb	r3, [r0, #18]
    8af8:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8afc:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    8afe:	f002 0107 	and.w	r1, r2, #7
    8b02:	2901      	cmp	r1, #1
    8b04:	d00b      	beq.n	8b1e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8b06:	015a      	lsls	r2, r3, #5
    8b08:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8b0c:	2110      	movs	r1, #16
    8b0e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8b12:	015b      	lsls	r3, r3, #5
    8b14:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8b18:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    8b1c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8b1e:	f012 0f40 	tst.w	r2, #64	; 0x40
    8b22:	d00c      	beq.n	8b3e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    8b24:	7cc2      	ldrb	r2, [r0, #19]
    8b26:	f36f 1286 	bfc	r2, #6, #1
    8b2a:	74c2      	strb	r2, [r0, #19]
    8b2c:	015a      	lsls	r2, r3, #5
    8b2e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8b32:	2180      	movs	r1, #128	; 0x80
    8b34:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8b38:	2140      	movs	r1, #64	; 0x40
    8b3a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    8b3e:	7cc2      	ldrb	r2, [r0, #19]
    8b40:	f36f 02c3 	bfc	r2, #3, #1
    8b44:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    8b46:	490a      	ldr	r1, [pc, #40]	; (8b70 <_usb_d_dev_handle_setup+0x7c>)
    8b48:	015a      	lsls	r2, r3, #5
    8b4a:	188c      	adds	r4, r1, r2
    8b4c:	2500      	movs	r5, #0
    8b4e:	72a5      	strb	r5, [r4, #10]
    8b50:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8b52:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8b56:	246f      	movs	r4, #111	; 0x6f
    8b58:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8b5c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8b60:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8b64:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    8b68:	7c80      	ldrb	r0, [r0, #18]
    8b6a:	4798      	blx	r3
    8b6c:	bd38      	pop	{r3, r4, r5, pc}
    8b6e:	bf00      	nop
    8b70:	200009a8 	.word	0x200009a8

00008b74 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8b74:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8b76:	2320      	movs	r3, #32
    8b78:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8b7c:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8b7e:	7c83      	ldrb	r3, [r0, #18]
    8b80:	f003 030f 	and.w	r3, r3, #15
    8b84:	015b      	lsls	r3, r3, #5
    8b86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8b8a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    8b8e:	4b04      	ldr	r3, [pc, #16]	; (8ba0 <_usb_d_dev_handle_stall+0x2c>)
    8b90:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8b94:	6882      	ldr	r2, [r0, #8]
    8b96:	2101      	movs	r1, #1
    8b98:	7c80      	ldrb	r0, [r0, #18]
    8b9a:	4798      	blx	r3
    8b9c:	bd08      	pop	{r3, pc}
    8b9e:	bf00      	nop
    8ba0:	200009a8 	.word	0x200009a8

00008ba4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    8ba4:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8ba6:	7c84      	ldrb	r4, [r0, #18]
    8ba8:	2cff      	cmp	r4, #255	; 0xff
    8baa:	d003      	beq.n	8bb4 <_usb_d_dev_trans_done+0x10>
    8bac:	7cc3      	ldrb	r3, [r0, #19]
    8bae:	f013 0f40 	tst.w	r3, #64	; 0x40
    8bb2:	d100      	bne.n	8bb6 <_usb_d_dev_trans_done+0x12>
    8bb4:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    8bb6:	7cc2      	ldrb	r2, [r0, #19]
    8bb8:	f36f 1286 	bfc	r2, #6, #1
    8bbc:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    8bbe:	4a03      	ldr	r2, [pc, #12]	; (8bcc <_usb_d_dev_trans_done+0x28>)
    8bc0:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    8bc4:	6882      	ldr	r2, [r0, #8]
    8bc6:	4620      	mov	r0, r4
    8bc8:	47a8      	blx	r5
    8bca:	e7f3      	b.n	8bb4 <_usb_d_dev_trans_done+0x10>
    8bcc:	200009a8 	.word	0x200009a8

00008bd0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8bd0:	b530      	push	{r4, r5, lr}
    8bd2:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8bd4:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    8bd6:	2425      	movs	r4, #37	; 0x25
    8bd8:	f88d 4004 	strb.w	r4, [sp, #4]
    8bdc:	244a      	movs	r4, #74	; 0x4a
    8bde:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8be2:	2bff      	cmp	r3, #255	; 0xff
    8be4:	d01e      	beq.n	8c24 <_usb_d_dev_trans_stop+0x54>
    8be6:	7cc4      	ldrb	r4, [r0, #19]
    8be8:	f014 0f40 	tst.w	r4, #64	; 0x40
    8bec:	d01a      	beq.n	8c24 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8bee:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8bf2:	b1c9      	cbz	r1, 8c28 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8bf4:	0163      	lsls	r3, r4, #5
    8bf6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8bfa:	2580      	movs	r5, #128	; 0x80
    8bfc:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8c00:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8c02:	a902      	add	r1, sp, #8
    8c04:	440b      	add	r3, r1
    8c06:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8c0a:	0163      	lsls	r3, r4, #5
    8c0c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c10:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8c14:	0163      	lsls	r3, r4, #5
    8c16:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c1a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    8c1e:	4611      	mov	r1, r2
    8c20:	4b05      	ldr	r3, [pc, #20]	; (8c38 <_usb_d_dev_trans_stop+0x68>)
    8c22:	4798      	blx	r3
}
    8c24:	b003      	add	sp, #12
    8c26:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8c28:	0163      	lsls	r3, r4, #5
    8c2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c2e:	2540      	movs	r5, #64	; 0x40
    8c30:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    8c34:	e7e4      	b.n	8c00 <_usb_d_dev_trans_stop+0x30>
    8c36:	bf00      	nop
    8c38:	00008ba5 	.word	0x00008ba5

00008c3c <_usb_d_dev_handle_trfail>:
{
    8c3c:	b530      	push	{r4, r5, lr}
    8c3e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8c40:	7c83      	ldrb	r3, [r0, #18]
    8c42:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8c46:	2204      	movs	r2, #4
    8c48:	f88d 2004 	strb.w	r2, [sp, #4]
    8c4c:	2208      	movs	r2, #8
    8c4e:	f88d 2005 	strb.w	r2, [sp, #5]
    8c52:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    8c54:	460c      	mov	r4, r1
    8c56:	b391      	cbz	r1, 8cbe <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8c58:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    8c5c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8c60:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    8c64:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    8c68:	4a32      	ldr	r2, [pc, #200]	; (8d34 <_usb_d_dev_handle_trfail+0xf8>)
    8c6a:	440a      	add	r2, r1
    8c6c:	7a91      	ldrb	r1, [r2, #10]
    8c6e:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8c70:	2d02      	cmp	r5, #2
    8c72:	d02c      	beq.n	8cce <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    8c74:	f011 0f02 	tst.w	r1, #2
    8c78:	d045      	beq.n	8d06 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8c7a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    8c7c:	7a91      	ldrb	r1, [r2, #10]
    8c7e:	f36f 0141 	bfc	r1, #1, #1
    8c82:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8c84:	aa02      	add	r2, sp, #8
    8c86:	4422      	add	r2, r4
    8c88:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8c8c:	015a      	lsls	r2, r3, #5
    8c8e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8c92:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8c96:	015b      	lsls	r3, r3, #5
    8c98:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c9c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8ca0:	f005 0307 	and.w	r3, r5, #7
    8ca4:	2b01      	cmp	r3, #1
    8ca6:	d143      	bne.n	8d30 <_usb_d_dev_handle_trfail+0xf4>
    8ca8:	7cc3      	ldrb	r3, [r0, #19]
    8caa:	f013 0f40 	tst.w	r3, #64	; 0x40
    8cae:	d03f      	beq.n	8d30 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8cb0:	09d9      	lsrs	r1, r3, #7
    8cb2:	428c      	cmp	r4, r1
    8cb4:	d03c      	beq.n	8d30 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8cb6:	2200      	movs	r2, #0
    8cb8:	4b1f      	ldr	r3, [pc, #124]	; (8d38 <_usb_d_dev_handle_trfail+0xfc>)
    8cba:	4798      	blx	r3
    8cbc:	e038      	b.n	8d30 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8cbe:	0159      	lsls	r1, r3, #5
    8cc0:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8cc4:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8cc8:	f005 0507 	and.w	r5, r5, #7
    8ccc:	e7ca      	b.n	8c64 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8cce:	f011 0f01 	tst.w	r1, #1
    8cd2:	d0cf      	beq.n	8c74 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8cd4:	7a91      	ldrb	r1, [r2, #10]
    8cd6:	f36f 0100 	bfc	r1, #0, #1
    8cda:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8cdc:	aa02      	add	r2, sp, #8
    8cde:	4422      	add	r2, r4
    8ce0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8ce4:	015a      	lsls	r2, r3, #5
    8ce6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8cea:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8cee:	015b      	lsls	r3, r3, #5
    8cf0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8cf4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8cf8:	2204      	movs	r2, #4
    8cfa:	1c21      	adds	r1, r4, #0
    8cfc:	bf18      	it	ne
    8cfe:	2101      	movne	r1, #1
    8d00:	4b0d      	ldr	r3, [pc, #52]	; (8d38 <_usb_d_dev_handle_trfail+0xfc>)
    8d02:	4798      	blx	r3
    8d04:	e014      	b.n	8d30 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    8d06:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    8d0a:	4a0a      	ldr	r2, [pc, #40]	; (8d34 <_usb_d_dev_handle_trfail+0xf8>)
    8d0c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8d10:	2100      	movs	r1, #0
    8d12:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8d14:	aa02      	add	r2, sp, #8
    8d16:	4414      	add	r4, r2
    8d18:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8d1c:	015a      	lsls	r2, r3, #5
    8d1e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8d22:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8d26:	015b      	lsls	r3, r3, #5
    8d28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8d2c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    8d30:	b003      	add	sp, #12
    8d32:	bd30      	pop	{r4, r5, pc}
    8d34:	200009a8 	.word	0x200009a8
    8d38:	00008bd1 	.word	0x00008bd1

00008d3c <_usb_d_dev_reset_epts>:
{
    8d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d40:	4d0c      	ldr	r5, [pc, #48]	; (8d74 <_usb_d_dev_reset_epts+0x38>)
    8d42:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    8d46:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8d4a:	f04f 0803 	mov.w	r8, #3
    8d4e:	4f0a      	ldr	r7, [pc, #40]	; (8d78 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    8d50:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8d52:	4641      	mov	r1, r8
    8d54:	4620      	mov	r0, r4
    8d56:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    8d58:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    8d5a:	2300      	movs	r3, #0
    8d5c:	74e3      	strb	r3, [r4, #19]
    8d5e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8d60:	42ac      	cmp	r4, r5
    8d62:	d1f6      	bne.n	8d52 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    8d64:	22c0      	movs	r2, #192	; 0xc0
    8d66:	4619      	mov	r1, r3
    8d68:	4802      	ldr	r0, [pc, #8]	; (8d74 <_usb_d_dev_reset_epts+0x38>)
    8d6a:	4b04      	ldr	r3, [pc, #16]	; (8d7c <_usb_d_dev_reset_epts+0x40>)
    8d6c:	4798      	blx	r3
    8d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d72:	bf00      	nop
    8d74:	200009a8 	.word	0x200009a8
    8d78:	00008ba5 	.word	0x00008ba5
    8d7c:	0000c8d7 	.word	0x0000c8d7

00008d80 <_usb_d_dev_in_next>:
{
    8d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d84:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8d86:	7c84      	ldrb	r4, [r0, #18]
    8d88:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8d8c:	4688      	mov	r8, r1
    8d8e:	2900      	cmp	r1, #0
    8d90:	f000 80a0 	beq.w	8ed4 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8d94:	4b58      	ldr	r3, [pc, #352]	; (8ef8 <_usb_d_dev_in_next+0x178>)
    8d96:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8d9a:	6958      	ldr	r0, [r3, #20]
    8d9c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8da0:	8a2b      	ldrh	r3, [r5, #16]
    8da2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8da6:	4293      	cmp	r3, r2
    8da8:	f000 808e 	beq.w	8ec8 <_usb_d_dev_in_next+0x148>
    8dac:	3b01      	subs	r3, #1
    8dae:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8db0:	7cef      	ldrb	r7, [r5, #19]
    8db2:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    8db6:	f1b8 0f00 	cmp.w	r8, #0
    8dba:	d005      	beq.n	8dc8 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8dbc:	0162      	lsls	r2, r4, #5
    8dbe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8dc2:	2302      	movs	r3, #2
    8dc4:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8dc8:	68a9      	ldr	r1, [r5, #8]
    8dca:	eb0e 0301 	add.w	r3, lr, r1
    8dce:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8dd0:	686e      	ldr	r6, [r5, #4]
    8dd2:	42b3      	cmp	r3, r6
    8dd4:	d23f      	bcs.n	8e56 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    8dd6:	1af6      	subs	r6, r6, r3
    8dd8:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    8dda:	7cea      	ldrb	r2, [r5, #19]
    8ddc:	f012 0f20 	tst.w	r2, #32
    8de0:	d02d      	beq.n	8e3e <_usb_d_dev_in_next+0xbe>
    8de2:	8a2a      	ldrh	r2, [r5, #16]
    8de4:	4296      	cmp	r6, r2
    8de6:	bf28      	it	cs
    8de8:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8dea:	6829      	ldr	r1, [r5, #0]
    8dec:	4632      	mov	r2, r6
    8dee:	4419      	add	r1, r3
    8df0:	68e8      	ldr	r0, [r5, #12]
    8df2:	4b42      	ldr	r3, [pc, #264]	; (8efc <_usb_d_dev_in_next+0x17c>)
    8df4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8df6:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8df8:	4b3f      	ldr	r3, [pc, #252]	; (8ef8 <_usb_d_dev_in_next+0x178>)
    8dfa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8dfe:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8e00:	4b3d      	ldr	r3, [pc, #244]	; (8ef8 <_usb_d_dev_in_next+0x178>)
    8e02:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8e06:	695a      	ldr	r2, [r3, #20]
    8e08:	f366 020d 	bfi	r2, r6, #0, #14
    8e0c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8e0e:	695a      	ldr	r2, [r3, #20]
    8e10:	f36f 329b 	bfc	r2, #14, #14
    8e14:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8e16:	f1b8 0f00 	cmp.w	r8, #0
    8e1a:	d108      	bne.n	8e2e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    8e1c:	2f01      	cmp	r7, #1
    8e1e:	bf0c      	ite	eq
    8e20:	224e      	moveq	r2, #78	; 0x4e
    8e22:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8e24:	0163      	lsls	r3, r4, #5
    8e26:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8e2a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8e2e:	0164      	lsls	r4, r4, #5
    8e30:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8e34:	2380      	movs	r3, #128	; 0x80
    8e36:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    8e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e3e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8e42:	bf28      	it	cs
    8e44:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8e48:	6829      	ldr	r1, [r5, #0]
    8e4a:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    8e4c:	4a2a      	ldr	r2, [pc, #168]	; (8ef8 <_usb_d_dev_in_next+0x178>)
    8e4e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    8e52:	6113      	str	r3, [r2, #16]
    8e54:	e7d4      	b.n	8e00 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    8e56:	7ceb      	ldrb	r3, [r5, #19]
    8e58:	f013 0f10 	tst.w	r3, #16
    8e5c:	d00f      	beq.n	8e7e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    8e5e:	7ceb      	ldrb	r3, [r5, #19]
    8e60:	f36f 1304 	bfc	r3, #4, #1
    8e64:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8e66:	4b24      	ldr	r3, [pc, #144]	; (8ef8 <_usb_d_dev_in_next+0x178>)
    8e68:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8e6c:	695a      	ldr	r2, [r3, #20]
    8e6e:	f36f 020d 	bfc	r2, #0, #14
    8e72:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8e74:	695a      	ldr	r2, [r3, #20]
    8e76:	f36f 329b 	bfc	r2, #14, #14
    8e7a:	615a      	str	r2, [r3, #20]
    8e7c:	e7cb      	b.n	8e16 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    8e7e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8e80:	ea4f 1444 	mov.w	r4, r4, lsl #5
    8e84:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8e88:	bf0c      	ite	eq
    8e8a:	234b      	moveq	r3, #75	; 0x4b
    8e8c:	234a      	movne	r3, #74	; 0x4a
    8e8e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    8e92:	8a2a      	ldrh	r2, [r5, #16]
    8e94:	ea00 030e 	and.w	r3, r0, lr
    8e98:	429a      	cmp	r2, r3
    8e9a:	d005      	beq.n	8ea8 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8e9c:	2100      	movs	r1, #0
    8e9e:	4628      	mov	r0, r5
    8ea0:	4b17      	ldr	r3, [pc, #92]	; (8f00 <_usb_d_dev_in_next+0x180>)
    8ea2:	4798      	blx	r3
	return;
    8ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    8ea8:	7ceb      	ldrb	r3, [r5, #19]
    8eaa:	f36f 1386 	bfc	r3, #6, #1
    8eae:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8eb0:	4b11      	ldr	r3, [pc, #68]	; (8ef8 <_usb_d_dev_in_next+0x178>)
    8eb2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8eb6:	68a9      	ldr	r1, [r5, #8]
    8eb8:	7ca8      	ldrb	r0, [r5, #18]
    8eba:	4798      	blx	r3
    8ebc:	b9d0      	cbnz	r0, 8ef4 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    8ebe:	7ceb      	ldrb	r3, [r5, #19]
    8ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8ec4:	74eb      	strb	r3, [r5, #19]
    8ec6:	e7e9      	b.n	8e9c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8ec8:	7cef      	ldrb	r7, [r5, #19]
    8eca:	f007 0707 	and.w	r7, r7, #7
    8ece:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8ed2:	e773      	b.n	8dbc <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8ed4:	8a03      	ldrh	r3, [r0, #16]
    8ed6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8eda:	4293      	cmp	r3, r2
    8edc:	d107      	bne.n	8eee <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8ede:	7cef      	ldrb	r7, [r5, #19]
    8ee0:	f007 0707 	and.w	r7, r7, #7
    8ee4:	f04f 0e00 	mov.w	lr, #0
    8ee8:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8eec:	e76c      	b.n	8dc8 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8eee:	f04f 0e00 	mov.w	lr, #0
    8ef2:	e75b      	b.n	8dac <_usb_d_dev_in_next+0x2c>
    8ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ef8:	200009a8 	.word	0x200009a8
    8efc:	0000c8c1 	.word	0x0000c8c1
    8f00:	00008ba5 	.word	0x00008ba5

00008f04 <_usb_d_dev_out_next>:
{
    8f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f08:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8f0a:	7c85      	ldrb	r5, [r0, #18]
    8f0c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8f10:	4689      	mov	r9, r1
    8f12:	2900      	cmp	r1, #0
    8f14:	d056      	beq.n	8fc4 <_usb_d_dev_out_next+0xc0>
    8f16:	4b74      	ldr	r3, [pc, #464]	; (90e8 <_usb_d_dev_out_next+0x1e4>)
    8f18:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8f1c:	685a      	ldr	r2, [r3, #4]
    8f1e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8f22:	685f      	ldr	r7, [r3, #4]
    8f24:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8f28:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8f2a:	8a06      	ldrh	r6, [r0, #16]
    8f2c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8f30:	429e      	cmp	r6, r3
    8f32:	f000 80ba 	beq.w	90aa <_usb_d_dev_out_next+0x1a6>
    8f36:	3e01      	subs	r6, #1
    8f38:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    8f3a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8f3e:	f894 8013 	ldrb.w	r8, [r4, #19]
    8f42:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8f46:	f1b9 0f00 	cmp.w	r9, #0
    8f4a:	d005      	beq.n	8f58 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8f4c:	016b      	lsls	r3, r5, #5
    8f4e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f52:	2201      	movs	r2, #1
    8f54:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8f58:	7ce3      	ldrb	r3, [r4, #19]
    8f5a:	f013 0f20 	tst.w	r3, #32
    8f5e:	d00d      	beq.n	8f7c <_usb_d_dev_out_next+0x78>
    8f60:	6862      	ldr	r2, [r4, #4]
    8f62:	2a00      	cmp	r2, #0
    8f64:	d037      	beq.n	8fd6 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8f66:	68a0      	ldr	r0, [r4, #8]
    8f68:	1a12      	subs	r2, r2, r0
    8f6a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8f6c:	6823      	ldr	r3, [r4, #0]
    8f6e:	42ba      	cmp	r2, r7
    8f70:	bf28      	it	cs
    8f72:	463a      	movcs	r2, r7
    8f74:	68e1      	ldr	r1, [r4, #12]
    8f76:	4418      	add	r0, r3
    8f78:	4b5c      	ldr	r3, [pc, #368]	; (90ec <_usb_d_dev_out_next+0x1e8>)
    8f7a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8f7c:	6863      	ldr	r3, [r4, #4]
    8f7e:	b353      	cbz	r3, 8fd6 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    8f80:	f1b9 0f00 	cmp.w	r9, #0
    8f84:	d040      	beq.n	9008 <_usb_d_dev_out_next+0x104>
    8f86:	8a22      	ldrh	r2, [r4, #16]
    8f88:	42ba      	cmp	r2, r7
    8f8a:	d93d      	bls.n	9008 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    8f8c:	7ce3      	ldrb	r3, [r4, #19]
    8f8e:	f36f 1304 	bfc	r3, #4, #1
    8f92:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8f94:	68a3      	ldr	r3, [r4, #8]
    8f96:	445b      	add	r3, fp
    8f98:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    8f9a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8f9e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8fa2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8fa6:	bf0c      	ite	eq
    8fa8:	222d      	moveq	r2, #45	; 0x2d
    8faa:	2225      	movne	r2, #37	; 0x25
    8fac:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8fb0:	b915      	cbnz	r5, 8fb8 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8fb2:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8fb4:	4b4c      	ldr	r3, [pc, #304]	; (90e8 <_usb_d_dev_out_next+0x1e4>)
    8fb6:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8fb8:	2100      	movs	r1, #0
    8fba:	4620      	mov	r0, r4
    8fbc:	4b4c      	ldr	r3, [pc, #304]	; (90f0 <_usb_d_dev_out_next+0x1ec>)
    8fbe:	4798      	blx	r3
	return;
    8fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8fc4:	8a06      	ldrh	r6, [r0, #16]
    8fc6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8fca:	429e      	cmp	r6, r3
    8fcc:	d07b      	beq.n	90c6 <_usb_d_dev_out_next+0x1c2>
    8fce:	f04f 0b00 	mov.w	fp, #0
    8fd2:	46da      	mov	sl, fp
    8fd4:	e7af      	b.n	8f36 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8fd6:	7ce3      	ldrb	r3, [r4, #19]
    8fd8:	f013 0f10 	tst.w	r3, #16
    8fdc:	d06c      	beq.n	90b8 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    8fde:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8fe0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8fe4:	f043 0320 	orr.w	r3, r3, #32
    8fe8:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8fea:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8fec:	493e      	ldr	r1, [pc, #248]	; (90e8 <_usb_d_dev_out_next+0x1e4>)
    8fee:	016a      	lsls	r2, r5, #5
    8ff0:	188b      	adds	r3, r1, r2
    8ff2:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8ff4:	8a21      	ldrh	r1, [r4, #16]
    8ff6:	685a      	ldr	r2, [r3, #4]
    8ff8:	f361 329b 	bfi	r2, r1, #14, #14
    8ffc:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8ffe:	685a      	ldr	r2, [r3, #4]
    9000:	f36f 020d 	bfc	r2, #0, #14
    9004:	605a      	str	r2, [r3, #4]
    9006:	e01d      	b.n	9044 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    9008:	68a2      	ldr	r2, [r4, #8]
    900a:	4452      	add	r2, sl
    900c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    900e:	4293      	cmp	r3, r2
    9010:	d9c3      	bls.n	8f9a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    9012:	1a9b      	subs	r3, r3, r2
    9014:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    9016:	7ce1      	ldrb	r1, [r4, #19]
    9018:	f011 0f20 	tst.w	r1, #32
    901c:	d026      	beq.n	906c <_usb_d_dev_out_next+0x168>
    901e:	8a22      	ldrh	r2, [r4, #16]
    9020:	4293      	cmp	r3, r2
    9022:	bf28      	it	cs
    9024:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9026:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    9028:	016a      	lsls	r2, r5, #5
    902a:	492f      	ldr	r1, [pc, #188]	; (90e8 <_usb_d_dev_out_next+0x1e4>)
    902c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    902e:	4a2e      	ldr	r2, [pc, #184]	; (90e8 <_usb_d_dev_out_next+0x1e4>)
    9030:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    9034:	6851      	ldr	r1, [r2, #4]
    9036:	f363 319b 	bfi	r1, r3, #14, #14
    903a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    903c:	6853      	ldr	r3, [r2, #4]
    903e:	f36f 030d 	bfc	r3, #0, #14
    9042:	6053      	str	r3, [r2, #4]
	if (!isr) {
    9044:	f1b9 0f00 	cmp.w	r9, #0
    9048:	d108      	bne.n	905c <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    904a:	f1b8 0f01 	cmp.w	r8, #1
    904e:	d025      	beq.n	909c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    9050:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9052:	016b      	lsls	r3, r5, #5
    9054:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9058:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    905c:	016d      	lsls	r5, r5, #5
    905e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    9062:	2340      	movs	r3, #64	; 0x40
    9064:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    9068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    906c:	8a21      	ldrh	r1, [r4, #16]
    906e:	428b      	cmp	r3, r1
    9070:	d90a      	bls.n	9088 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9076:	d80e      	bhi.n	9096 <_usb_d_dev_out_next+0x192>
    9078:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    907c:	6821      	ldr	r1, [r4, #0]
    907e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    9080:	0169      	lsls	r1, r5, #5
    9082:	4819      	ldr	r0, [pc, #100]	; (90e8 <_usb_d_dev_out_next+0x1e4>)
    9084:	5042      	str	r2, [r0, r1]
    9086:	e7d2      	b.n	902e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    9088:	428b      	cmp	r3, r1
    908a:	d2f7      	bcs.n	907c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    908c:	7ce1      	ldrb	r1, [r4, #19]
    908e:	f041 0120 	orr.w	r1, r1, #32
    9092:	74e1      	strb	r1, [r4, #19]
    9094:	e7f2      	b.n	907c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    9096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    909a:	e7ef      	b.n	907c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    909c:	4b12      	ldr	r3, [pc, #72]	; (90e8 <_usb_d_dev_out_next+0x1e4>)
    909e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    90a2:	2200      	movs	r2, #0
    90a4:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    90a6:	222d      	movs	r2, #45	; 0x2d
    90a8:	e7d3      	b.n	9052 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    90aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    90ae:	f890 8013 	ldrb.w	r8, [r0, #19]
    90b2:	f008 0807 	and.w	r8, r8, #7
    90b6:	e749      	b.n	8f4c <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    90b8:	f1b9 0f00 	cmp.w	r9, #0
    90bc:	d10b      	bne.n	90d6 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    90be:	68a3      	ldr	r3, [r4, #8]
    90c0:	4453      	add	r3, sl
    90c2:	60a3      	str	r3, [r4, #8]
    90c4:	e769      	b.n	8f9a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    90c6:	f890 8013 	ldrb.w	r8, [r0, #19]
    90ca:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    90ce:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    90d0:	46bb      	mov	fp, r7
    90d2:	46ba      	mov	sl, r7
    90d4:	e740      	b.n	8f58 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    90d6:	8a23      	ldrh	r3, [r4, #16]
    90d8:	42bb      	cmp	r3, r7
    90da:	f63f af57 	bhi.w	8f8c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    90de:	68a3      	ldr	r3, [r4, #8]
    90e0:	4453      	add	r3, sl
    90e2:	60a3      	str	r3, [r4, #8]
    90e4:	e759      	b.n	8f9a <_usb_d_dev_out_next+0x96>
    90e6:	bf00      	nop
    90e8:	200009a8 	.word	0x200009a8
    90ec:	0000c8c1 	.word	0x0000c8c1
    90f0:	00008ba5 	.word	0x00008ba5

000090f4 <_usb_d_dev_handler>:
{
    90f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    90f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90fc:	8c1e      	ldrh	r6, [r3, #32]
    90fe:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    9100:	b146      	cbz	r6, 9114 <_usb_d_dev_handler+0x20>
    9102:	4d96      	ldr	r5, [pc, #600]	; (935c <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    9104:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9106:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    910a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 9378 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    910e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 937c <_usb_d_dev_handler+0x288>
    9112:	e0de      	b.n	92d2 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9114:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    9116:	8b1b      	ldrh	r3, [r3, #24]
    9118:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    911a:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    911c:	f013 0f04 	tst.w	r3, #4
    9120:	d11e      	bne.n	9160 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9122:	f413 7f00 	tst.w	r3, #512	; 0x200
    9126:	d125      	bne.n	9174 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9128:	f013 0f80 	tst.w	r3, #128	; 0x80
    912c:	d14f      	bne.n	91ce <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    912e:	f013 0f70 	tst.w	r3, #112	; 0x70
    9132:	d158      	bne.n	91e6 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9134:	f013 0f08 	tst.w	r3, #8
    9138:	d178      	bne.n	922c <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    913a:	f013 0f01 	tst.w	r3, #1
    913e:	d0e0      	beq.n	9102 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9140:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9144:	f240 2201 	movw	r2, #513	; 0x201
    9148:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    914a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    914c:	2270      	movs	r2, #112	; 0x70
    914e:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9150:	4b83      	ldr	r3, [pc, #524]	; (9360 <_usb_d_dev_handler+0x26c>)
    9152:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9156:	2100      	movs	r1, #0
    9158:	2004      	movs	r0, #4
    915a:	4798      	blx	r3
    915c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9160:	2204      	movs	r2, #4
    9162:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9166:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    9168:	4b7d      	ldr	r3, [pc, #500]	; (9360 <_usb_d_dev_handler+0x26c>)
    916a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    916e:	4798      	blx	r3
    9170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9174:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9178:	f240 2201 	movw	r2, #513	; 0x201
    917c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    917e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9180:	2270      	movs	r2, #112	; 0x70
    9182:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9184:	4b76      	ldr	r3, [pc, #472]	; (9360 <_usb_d_dev_handler+0x26c>)
    9186:	891b      	ldrh	r3, [r3, #8]
    9188:	f003 030f 	and.w	r3, r3, #15
    918c:	2b03      	cmp	r3, #3
    918e:	d014      	beq.n	91ba <_usb_d_dev_handler+0xc6>
    9190:	2301      	movs	r3, #1
    9192:	4873      	ldr	r0, [pc, #460]	; (9360 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9194:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9196:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    919a:	8912      	ldrh	r2, [r2, #8]
    919c:	f002 020f 	and.w	r2, r2, #15
    91a0:	2a03      	cmp	r2, #3
    91a2:	d00b      	beq.n	91bc <_usb_d_dev_handler+0xc8>
    91a4:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    91a6:	2b05      	cmp	r3, #5
    91a8:	d1f4      	bne.n	9194 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    91aa:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    91ac:	4b6c      	ldr	r3, [pc, #432]	; (9360 <_usb_d_dev_handler+0x26c>)
    91ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    91b2:	2003      	movs	r0, #3
    91b4:	4798      	blx	r3
    91b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    91ba:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    91bc:	4b68      	ldr	r3, [pc, #416]	; (9360 <_usb_d_dev_handler+0x26c>)
    91be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    91c2:	8919      	ldrh	r1, [r3, #8]
    91c4:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    91c8:	2200      	movs	r2, #0
    91ca:	811a      	strh	r2, [r3, #8]
    91cc:	e7ee      	b.n	91ac <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    91ce:	2280      	movs	r2, #128	; 0x80
    91d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91d4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    91d6:	4b62      	ldr	r3, [pc, #392]	; (9360 <_usb_d_dev_handler+0x26c>)
    91d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    91dc:	2100      	movs	r1, #0
    91de:	2005      	movs	r0, #5
    91e0:	4798      	blx	r3
    91e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    91e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91ea:	2270      	movs	r2, #112	; 0x70
    91ec:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    91ee:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    91f0:	f240 2201 	movw	r2, #513	; 0x201
    91f4:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    91f6:	4b5b      	ldr	r3, [pc, #364]	; (9364 <_usb_d_dev_handler+0x270>)
    91f8:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    91fc:	f013 0f01 	tst.w	r3, #1
    9200:	d00e      	beq.n	9220 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9202:	4a58      	ldr	r2, [pc, #352]	; (9364 <_usb_d_dev_handler+0x270>)
    9204:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    9206:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    920a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    920e:	d1f9      	bne.n	9204 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9210:	4b53      	ldr	r3, [pc, #332]	; (9360 <_usb_d_dev_handler+0x26c>)
    9212:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    9216:	2100      	movs	r1, #0
    9218:	2002      	movs	r0, #2
    921a:	4798      	blx	r3
    921c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9220:	4a50      	ldr	r2, [pc, #320]	; (9364 <_usb_d_dev_handler+0x270>)
    9222:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9224:	f413 7f80 	tst.w	r3, #256	; 0x100
    9228:	d0fb      	beq.n	9222 <_usb_d_dev_handler+0x12e>
    922a:	e7f1      	b.n	9210 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    922c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9230:	2400      	movs	r4, #0
    9232:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9236:	2208      	movs	r2, #8
    9238:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    923a:	2270      	movs	r2, #112	; 0x70
    923c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    923e:	f240 2201 	movw	r2, #513	; 0x201
    9242:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    9244:	4b48      	ldr	r3, [pc, #288]	; (9368 <_usb_d_dev_handler+0x274>)
    9246:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9248:	4b45      	ldr	r3, [pc, #276]	; (9360 <_usb_d_dev_handler+0x26c>)
    924a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    924e:	4621      	mov	r1, r4
    9250:	2001      	movs	r0, #1
    9252:	4798      	blx	r3
    9254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9258:	f011 0f10 	tst.w	r1, #16
    925c:	d109      	bne.n	9272 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    925e:	f011 0f40 	tst.w	r1, #64	; 0x40
    9262:	d108      	bne.n	9276 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9264:	f011 0f20 	tst.w	r1, #32
    9268:	d02f      	beq.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    926a:	2100      	movs	r1, #0
    926c:	4b3f      	ldr	r3, [pc, #252]	; (936c <_usb_d_dev_handler+0x278>)
    926e:	4798      	blx	r3
    9270:	e02b      	b.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    9272:	47c8      	blx	r9
    9274:	e029      	b.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    9276:	2101      	movs	r1, #1
    9278:	4b3c      	ldr	r3, [pc, #240]	; (936c <_usb_d_dev_handler+0x278>)
    927a:	4798      	blx	r3
    927c:	e025      	b.n	92ca <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    927e:	f011 0f40 	tst.w	r1, #64	; 0x40
    9282:	d111      	bne.n	92a8 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9284:	f011 0f08 	tst.w	r1, #8
    9288:	d112      	bne.n	92b0 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    928a:	f011 0f02 	tst.w	r1, #2
    928e:	d112      	bne.n	92b6 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9290:	f003 0307 	and.w	r3, r3, #7
    9294:	2b01      	cmp	r3, #1
    9296:	d118      	bne.n	92ca <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9298:	f011 0f04 	tst.w	r1, #4
    929c:	d10f      	bne.n	92be <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    929e:	f011 0f10 	tst.w	r1, #16
    92a2:	d012      	beq.n	92ca <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    92a4:	47c8      	blx	r9
    92a6:	e010      	b.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    92a8:	2101      	movs	r1, #1
    92aa:	4b30      	ldr	r3, [pc, #192]	; (936c <_usb_d_dev_handler+0x278>)
    92ac:	4798      	blx	r3
    92ae:	e00c      	b.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    92b0:	2101      	movs	r1, #1
    92b2:	47c0      	blx	r8
    92b4:	e009      	b.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    92b6:	2101      	movs	r1, #1
    92b8:	4b2d      	ldr	r3, [pc, #180]	; (9370 <_usb_d_dev_handler+0x27c>)
    92ba:	4798      	blx	r3
    92bc:	e005      	b.n	92ca <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    92be:	2100      	movs	r1, #0
    92c0:	47c0      	blx	r8
    92c2:	e002      	b.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    92c4:	2100      	movs	r1, #0
    92c6:	4b29      	ldr	r3, [pc, #164]	; (936c <_usb_d_dev_handler+0x278>)
    92c8:	4798      	blx	r3
    92ca:	3401      	adds	r4, #1
    92cc:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    92ce:	2c1b      	cmp	r4, #27
    92d0:	d042      	beq.n	9358 <_usb_d_dev_handler+0x264>
    92d2:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    92d4:	7cab      	ldrb	r3, [r5, #18]
    92d6:	2bff      	cmp	r3, #255	; 0xff
    92d8:	d0f7      	beq.n	92ca <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    92da:	f003 030f 	and.w	r3, r3, #15
    92de:	2101      	movs	r1, #1
    92e0:	4099      	lsls	r1, r3
    92e2:	4231      	tst	r1, r6
    92e4:	d0f1      	beq.n	92ca <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    92e6:	0159      	lsls	r1, r3, #5
    92e8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    92ec:	f501 7180 	add.w	r1, r1, #256	; 0x100
    92f0:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    92f2:	015b      	lsls	r3, r3, #5
    92f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    92f8:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    92fc:	4019      	ands	r1, r3
    92fe:	d0e4      	beq.n	92ca <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9300:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    9304:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    9308:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    930c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    9310:	2a01      	cmp	r2, #1
    9312:	d0a1      	beq.n	9258 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9314:	f013 0f80 	tst.w	r3, #128	; 0x80
    9318:	d1b1      	bne.n	927e <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    931a:	f011 0f20 	tst.w	r1, #32
    931e:	d1d1      	bne.n	92c4 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9320:	f011 0f04 	tst.w	r1, #4
    9324:	d10e      	bne.n	9344 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9326:	f011 0f01 	tst.w	r1, #1
    932a:	d10e      	bne.n	934a <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    932c:	f003 0307 	and.w	r3, r3, #7
    9330:	2b01      	cmp	r3, #1
    9332:	d1ca      	bne.n	92ca <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9334:	f011 0f08 	tst.w	r1, #8
    9338:	d10b      	bne.n	9352 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    933a:	f011 0f10 	tst.w	r1, #16
    933e:	d0c4      	beq.n	92ca <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    9340:	47c8      	blx	r9
    9342:	e7c2      	b.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    9344:	2100      	movs	r1, #0
    9346:	47c0      	blx	r8
    9348:	e7bf      	b.n	92ca <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    934a:	2101      	movs	r1, #1
    934c:	4b09      	ldr	r3, [pc, #36]	; (9374 <_usb_d_dev_handler+0x280>)
    934e:	4798      	blx	r3
    9350:	e7bb      	b.n	92ca <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    9352:	2101      	movs	r1, #1
    9354:	47c0      	blx	r8
    9356:	e7b8      	b.n	92ca <_usb_d_dev_handler+0x1d6>
    9358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    935c:	20000a7c 	.word	0x20000a7c
    9360:	200009a8 	.word	0x200009a8
    9364:	40001000 	.word	0x40001000
    9368:	00008d3d 	.word	0x00008d3d
    936c:	00008b75 	.word	0x00008b75
    9370:	00008d81 	.word	0x00008d81
    9374:	00008f05 	.word	0x00008f05
    9378:	00008af5 	.word	0x00008af5
    937c:	00008c3d 	.word	0x00008c3d

00009380 <_usb_d_dev_init>:
{
    9380:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    9382:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9386:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9388:	f013 0f01 	tst.w	r3, #1
    938c:	d124      	bne.n	93d8 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    938e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    9392:	7893      	ldrb	r3, [r2, #2]
    9394:	f013 0f03 	tst.w	r3, #3
    9398:	d1fb      	bne.n	9392 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    939a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    939e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    93a0:	f013 0f02 	tst.w	r3, #2
    93a4:	d00f      	beq.n	93c6 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    93a6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    93aa:	7813      	ldrb	r3, [r2, #0]
    93ac:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    93b0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    93b2:	7893      	ldrb	r3, [r2, #2]
    93b4:	f013 0f03 	tst.w	r3, #3
    93b8:	d1fb      	bne.n	93b2 <_usb_d_dev_init+0x32>
    93ba:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    93be:	7893      	ldrb	r3, [r2, #2]
    93c0:	f013 0f02 	tst.w	r3, #2
    93c4:	d1fb      	bne.n	93be <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    93c6:	2201      	movs	r2, #1
    93c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    93cc:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    93ce:	461a      	mov	r2, r3
    93d0:	7893      	ldrb	r3, [r2, #2]
    93d2:	f013 0f03 	tst.w	r3, #3
    93d6:	d1fb      	bne.n	93d0 <_usb_d_dev_init+0x50>
    93d8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    93dc:	7893      	ldrb	r3, [r2, #2]
    93de:	f013 0f01 	tst.w	r3, #1
    93e2:	d1fb      	bne.n	93dc <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    93e4:	4b24      	ldr	r3, [pc, #144]	; (9478 <_usb_d_dev_init+0xf8>)
    93e6:	4a25      	ldr	r2, [pc, #148]	; (947c <_usb_d_dev_init+0xfc>)
    93e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    93ec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    93f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    93f4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    93f8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    93fc:	4b20      	ldr	r3, [pc, #128]	; (9480 <_usb_d_dev_init+0x100>)
    93fe:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9400:	4b20      	ldr	r3, [pc, #128]	; (9484 <_usb_d_dev_init+0x104>)
    9402:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    9404:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9408:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    940c:	f011 011f 	ands.w	r1, r1, #31
    9410:	d02b      	beq.n	946a <_usb_d_dev_init+0xea>
		pad_transn = 9;
    9412:	291f      	cmp	r1, #31
    9414:	bf08      	it	eq
    9416:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9418:	b34b      	cbz	r3, 946e <_usb_d_dev_init+0xee>
		pad_transp = 25;
    941a:	2b1f      	cmp	r3, #31
    941c:	bf08      	it	eq
    941e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    9420:	b33a      	cbz	r2, 9472 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    9422:	2a07      	cmp	r2, #7
    9424:	bf08      	it	eq
    9426:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    9428:	f003 031f 	and.w	r3, r3, #31
    942c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    9430:	0312      	lsls	r2, r2, #12
    9432:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    9436:	4313      	orrs	r3, r2
    9438:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    943c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    943e:	78d3      	ldrb	r3, [r2, #3]
    9440:	f043 0303 	orr.w	r3, r3, #3
    9444:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    9446:	78d3      	ldrb	r3, [r2, #3]
    9448:	f043 030c 	orr.w	r3, r3, #12
    944c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    944e:	2304      	movs	r3, #4
    9450:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9452:	7893      	ldrb	r3, [r2, #2]
    9454:	f013 0f03 	tst.w	r3, #3
    9458:	d1fb      	bne.n	9452 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    945a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    945e:	4a06      	ldr	r2, [pc, #24]	; (9478 <_usb_d_dev_init+0xf8>)
    9460:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9462:	2201      	movs	r2, #1
    9464:	811a      	strh	r2, [r3, #8]
}
    9466:	2000      	movs	r0, #0
    9468:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    946a:	2109      	movs	r1, #9
    946c:	e7d4      	b.n	9418 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    946e:	2319      	movs	r3, #25
    9470:	e7d6      	b.n	9420 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    9472:	2206      	movs	r2, #6
    9474:	e7d8      	b.n	9428 <_usb_d_dev_init+0xa8>
    9476:	bf00      	nop
    9478:	200009a8 	.word	0x200009a8
    947c:	00008af1 	.word	0x00008af1
    9480:	00008d3d 	.word	0x00008d3d
    9484:	00800084 	.word	0x00800084

00009488 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    9488:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    948c:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    948e:	f013 0f03 	tst.w	r3, #3
    9492:	d129      	bne.n	94e8 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9494:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    9498:	7893      	ldrb	r3, [r2, #2]
    949a:	f013 0f03 	tst.w	r3, #3
    949e:	d1fb      	bne.n	9498 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    94a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    94a4:	781b      	ldrb	r3, [r3, #0]
    94a6:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    94a8:	f013 0f02 	tst.w	r3, #2
    94ac:	d108      	bne.n	94c0 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    94ae:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    94b2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    94b6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    94b8:	7893      	ldrb	r3, [r2, #2]
    94ba:	f013 0f03 	tst.w	r3, #3
    94be:	d1fb      	bne.n	94b8 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94c0:	4b0b      	ldr	r3, [pc, #44]	; (94f0 <_usb_d_dev_enable+0x68>)
    94c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    94c6:	609a      	str	r2, [r3, #8]
    94c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    94cc:	609a      	str	r2, [r3, #8]
    94ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    94d2:	609a      	str	r2, [r3, #8]
    94d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    94d8:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    94da:	f240 228d 	movw	r2, #653	; 0x28d
    94de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    94e2:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    94e4:	2000      	movs	r0, #0
    94e6:	4770      	bx	lr
		return -USB_ERR_DENIED;
    94e8:	f06f 0010 	mvn.w	r0, #16
}
    94ec:	4770      	bx	lr
    94ee:	bf00      	nop
    94f0:	e000e100 	.word	0xe000e100

000094f4 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    94f4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    94f8:	8913      	ldrh	r3, [r2, #8]
    94fa:	f023 0301 	bic.w	r3, r3, #1
    94fe:	041b      	lsls	r3, r3, #16
    9500:	0c1b      	lsrs	r3, r3, #16
    9502:	8113      	strh	r3, [r2, #8]
    9504:	4770      	bx	lr

00009506 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9506:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    950a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    950e:	7298      	strb	r0, [r3, #10]
    9510:	4770      	bx	lr

00009512 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    9512:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9516:	8a18      	ldrh	r0, [r3, #16]
}
    9518:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    951c:	4770      	bx	lr
	...

00009520 <_usb_d_dev_ep_init>:
{
    9520:	b5f0      	push	{r4, r5, r6, r7, lr}
    9522:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9526:	f010 050f 	ands.w	r5, r0, #15
    952a:	d04d      	beq.n	95c8 <_usb_d_dev_ep_init+0xa8>
    952c:	f1be 0f00 	cmp.w	lr, #0
    9530:	bfb4      	ite	lt
    9532:	1d6c      	addlt	r4, r5, #5
    9534:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9536:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    953a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    953c:	2d05      	cmp	r5, #5
    953e:	d947      	bls.n	95d0 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    9540:	f06f 0011 	mvn.w	r0, #17
    9544:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9546:	f1be 0f00 	cmp.w	lr, #0
    954a:	db1b      	blt.n	9584 <_usb_d_dev_ep_init+0x64>
    954c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9550:	4e37      	ldr	r6, [pc, #220]	; (9630 <_usb_d_dev_ep_init+0x110>)
    9552:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    9556:	2d00      	cmp	r5, #0
    9558:	d15e      	bne.n	9618 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    955a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    955e:	4d34      	ldr	r5, [pc, #208]	; (9630 <_usb_d_dev_ep_init+0x110>)
    9560:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    9564:	4d33      	ldr	r5, [pc, #204]	; (9634 <_usb_d_dev_ep_init+0x114>)
    9566:	00a6      	lsls	r6, r4, #2
    9568:	1933      	adds	r3, r6, r4
    956a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    956e:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    9572:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    9576:	3101      	adds	r1, #1
    9578:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    957c:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    9580:	2000      	movs	r0, #0
    9582:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9584:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9588:	4e29      	ldr	r6, [pc, #164]	; (9630 <_usb_d_dev_ep_init+0x110>)
    958a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    958e:	686d      	ldr	r5, [r5, #4]
    9590:	b935      	cbnz	r5, 95a0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9596:	4d26      	ldr	r5, [pc, #152]	; (9630 <_usb_d_dev_ep_init+0x110>)
    9598:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    959c:	685f      	ldr	r7, [r3, #4]
    959e:	e7e1      	b.n	9564 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    95a0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    95a4:	4e22      	ldr	r6, [pc, #136]	; (9630 <_usb_d_dev_ep_init+0x110>)
    95a6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    95aa:	896d      	ldrh	r5, [r5, #10]
    95ac:	4295      	cmp	r5, r2
    95ae:	daf0      	bge.n	9592 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    95b0:	f06f 0012 	mvn.w	r0, #18
    95b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    95b6:	f06f 0013 	mvn.w	r0, #19
    95ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    95bc:	f06f 0013 	mvn.w	r0, #19
    95c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    95c2:	f06f 0012 	mvn.w	r0, #18
    95c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    95c8:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    95cc:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    95ce:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    95d0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    95d4:	4f17      	ldr	r7, [pc, #92]	; (9634 <_usb_d_dev_ep_init+0x114>)
    95d6:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    95da:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    95de:	2eff      	cmp	r6, #255	; 0xff
    95e0:	d1e9      	bne.n	95b6 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    95e2:	2900      	cmp	r1, #0
    95e4:	d1af      	bne.n	9546 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    95e6:	b125      	cbz	r5, 95f2 <_usb_d_dev_ep_init+0xd2>
    95e8:	f1be 0f00 	cmp.w	lr, #0
    95ec:	bfa4      	itt	ge
    95ee:	3505      	addge	r5, #5
    95f0:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    95f2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    95f6:	4e0f      	ldr	r6, [pc, #60]	; (9634 <_usb_d_dev_ep_init+0x114>)
    95f8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    95fc:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    9600:	2dff      	cmp	r5, #255	; 0xff
    9602:	d1db      	bne.n	95bc <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    9604:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9608:	4e09      	ldr	r6, [pc, #36]	; (9630 <_usb_d_dev_ep_init+0x110>)
    960a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    960e:	2d00      	cmp	r5, #0
    9610:	d0d7      	beq.n	95c2 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9612:	f1be 0f00 	cmp.w	lr, #0
    9616:	dbb5      	blt.n	9584 <_usb_d_dev_ep_init+0x64>
    9618:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    961c:	4e04      	ldr	r6, [pc, #16]	; (9630 <_usb_d_dev_ep_init+0x110>)
    961e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9622:	892d      	ldrh	r5, [r5, #8]
    9624:	4295      	cmp	r5, r2
    9626:	da98      	bge.n	955a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    9628:	f06f 0012 	mvn.w	r0, #18
    962c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    962e:	bf00      	nop
    9630:	0000e640 	.word	0x0000e640
    9634:	200009a8 	.word	0x200009a8

00009638 <_usb_d_dev_ep_deinit>:
{
    9638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    963a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    963c:	f010 060f 	ands.w	r6, r0, #15
    9640:	d00e      	beq.n	9660 <_usb_d_dev_ep_deinit+0x28>
    9642:	2f00      	cmp	r7, #0
    9644:	bfb4      	ite	lt
    9646:	1d73      	addlt	r3, r6, #5
    9648:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    964a:	2e05      	cmp	r6, #5
    964c:	d900      	bls.n	9650 <_usb_d_dev_ep_deinit+0x18>
    964e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    9650:	461d      	mov	r5, r3
    9652:	3301      	adds	r3, #1
    9654:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9658:	4a24      	ldr	r2, [pc, #144]	; (96ec <_usb_d_dev_ep_deinit+0xb4>)
    965a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    965e:	e002      	b.n	9666 <_usb_d_dev_ep_deinit+0x2e>
    9660:	f8df e094 	ldr.w	lr, [pc, #148]	; 96f8 <_usb_d_dev_ep_deinit+0xc0>
    9664:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9666:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    966a:	4a21      	ldr	r2, [pc, #132]	; (96f0 <_usb_d_dev_ep_deinit+0xb8>)
    966c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9670:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    9674:	2aff      	cmp	r2, #255	; 0xff
    9676:	d0ea      	beq.n	964e <_usb_d_dev_ep_deinit+0x16>
    9678:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    967a:	2203      	movs	r2, #3
    967c:	0ff9      	lsrs	r1, r7, #31
    967e:	4670      	mov	r0, lr
    9680:	4b1c      	ldr	r3, [pc, #112]	; (96f4 <_usb_d_dev_ep_deinit+0xbc>)
    9682:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9684:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9688:	4a19      	ldr	r2, [pc, #100]	; (96f0 <_usb_d_dev_ep_deinit+0xb8>)
    968a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    968e:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9692:	f003 0307 	and.w	r3, r3, #7
    9696:	2b01      	cmp	r3, #1
    9698:	d016      	beq.n	96c8 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    969a:	2f00      	cmp	r7, #0
    969c:	db1b      	blt.n	96d6 <_usb_d_dev_ep_deinit+0x9e>
    969e:	0160      	lsls	r0, r4, #5
    96a0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    96a4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    96a8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    96ac:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    96b0:	4b0f      	ldr	r3, [pc, #60]	; (96f0 <_usb_d_dev_ep_deinit+0xb8>)
    96b2:	00aa      	lsls	r2, r5, #2
    96b4:	1951      	adds	r1, r2, r5
    96b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    96ba:	2000      	movs	r0, #0
    96bc:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    96c0:	22ff      	movs	r2, #255	; 0xff
    96c2:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    96c6:	e7c2      	b.n	964e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    96c8:	0160      	lsls	r0, r4, #5
    96ca:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    96ce:	2300      	movs	r3, #0
    96d0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    96d4:	e7ec      	b.n	96b0 <_usb_d_dev_ep_deinit+0x78>
    96d6:	0176      	lsls	r6, r6, #5
    96d8:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    96dc:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    96e0:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    96e4:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    96e8:	e7e2      	b.n	96b0 <_usb_d_dev_ep_deinit+0x78>
    96ea:	bf00      	nop
    96ec:	20000a68 	.word	0x20000a68
    96f0:	200009a8 	.word	0x200009a8
    96f4:	00008bd1 	.word	0x00008bd1
    96f8:	20000a7c 	.word	0x20000a7c

000096fc <_usb_d_dev_ep_enable>:
{
    96fc:	b4f0      	push	{r4, r5, r6, r7}
    96fe:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9700:	f010 000f 	ands.w	r0, r0, #15
    9704:	f000 80a7 	beq.w	9856 <_usb_d_dev_ep_enable+0x15a>
    9708:	2e00      	cmp	r6, #0
    970a:	bfb4      	ite	lt
    970c:	1d43      	addlt	r3, r0, #5
    970e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9710:	4605      	mov	r5, r0
    9712:	0142      	lsls	r2, r0, #5
    9714:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9718:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    971c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    971e:	2805      	cmp	r0, #5
    9720:	f240 80a0 	bls.w	9864 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    9724:	f06f 0011 	mvn.w	r0, #17
    9728:	e07d      	b.n	9826 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    972a:	f014 0f77 	tst.w	r4, #119	; 0x77
    972e:	f040 8089 	bne.w	9844 <_usb_d_dev_ep_enable+0x148>
    9732:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9736:	2111      	movs	r1, #17
    9738:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    973c:	4c9b      	ldr	r4, [pc, #620]	; (99ac <_usb_d_dev_ep_enable+0x2b0>)
    973e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    9742:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    9746:	4c9a      	ldr	r4, [pc, #616]	; (99b0 <_usb_d_dev_ep_enable+0x2b4>)
    9748:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    974c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9750:	f200 80cd 	bhi.w	98ee <_usb_d_dev_ep_enable+0x1f2>
    9754:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9758:	f200 8112 	bhi.w	9980 <_usb_d_dev_ep_enable+0x284>
    975c:	2980      	cmp	r1, #128	; 0x80
    975e:	f200 8101 	bhi.w	9964 <_usb_d_dev_ep_enable+0x268>
    9762:	2940      	cmp	r1, #64	; 0x40
    9764:	f200 8113 	bhi.w	998e <_usb_d_dev_ep_enable+0x292>
    9768:	2920      	cmp	r1, #32
    976a:	f200 8102 	bhi.w	9972 <_usb_d_dev_ep_enable+0x276>
    976e:	2910      	cmp	r1, #16
    9770:	f200 8114 	bhi.w	999c <_usb_d_dev_ep_enable+0x2a0>
    9774:	2908      	cmp	r1, #8
    9776:	bf94      	ite	ls
    9778:	2600      	movls	r6, #0
    977a:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    977c:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9780:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9782:	f3c1 010d 	ubfx	r1, r1, #0, #14
    9786:	e0b8      	b.n	98fa <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9788:	f014 0f70 	tst.w	r4, #112	; 0x70
    978c:	d15d      	bne.n	984a <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    978e:	4e87      	ldr	r6, [pc, #540]	; (99ac <_usb_d_dev_ep_enable+0x2b0>)
    9790:	009f      	lsls	r7, r3, #2
    9792:	18f9      	adds	r1, r7, r3
    9794:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9798:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    979c:	0109      	lsls	r1, r1, #4
    979e:	f001 0170 	and.w	r1, r1, #112	; 0x70
    97a2:	430c      	orrs	r4, r1
    97a4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    97a8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    97ac:	443b      	add	r3, r7
    97ae:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    97b2:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    97b6:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    97ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    97be:	d80f      	bhi.n	97e0 <_usb_d_dev_ep_enable+0xe4>
    97c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    97c4:	d819      	bhi.n	97fa <_usb_d_dev_ep_enable+0xfe>
    97c6:	2b80      	cmp	r3, #128	; 0x80
    97c8:	d819      	bhi.n	97fe <_usb_d_dev_ep_enable+0x102>
    97ca:	2b40      	cmp	r3, #64	; 0x40
    97cc:	d819      	bhi.n	9802 <_usb_d_dev_ep_enable+0x106>
    97ce:	2b20      	cmp	r3, #32
    97d0:	d819      	bhi.n	9806 <_usb_d_dev_ep_enable+0x10a>
    97d2:	2b10      	cmp	r3, #16
    97d4:	d819      	bhi.n	980a <_usb_d_dev_ep_enable+0x10e>
    97d6:	2b08      	cmp	r3, #8
    97d8:	bf94      	ite	ls
    97da:	2300      	movls	r3, #0
    97dc:	2301      	movhi	r3, #1
    97de:	e000      	b.n	97e2 <_usb_d_dev_ep_enable+0xe6>
    97e0:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    97e2:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    97e6:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    97e8:	2380      	movs	r3, #128	; 0x80
    97ea:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    97ee:	4b6f      	ldr	r3, [pc, #444]	; (99ac <_usb_d_dev_ep_enable+0x2b0>)
    97f0:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    97f4:	2000      	movs	r0, #0
    97f6:	76a8      	strb	r0, [r5, #26]
    97f8:	e015      	b.n	9826 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    97fa:	2306      	movs	r3, #6
    97fc:	e7f1      	b.n	97e2 <_usb_d_dev_ep_enable+0xe6>
    97fe:	2305      	movs	r3, #5
    9800:	e7ef      	b.n	97e2 <_usb_d_dev_ep_enable+0xe6>
    9802:	2304      	movs	r3, #4
    9804:	e7ed      	b.n	97e2 <_usb_d_dev_ep_enable+0xe6>
    9806:	2303      	movs	r3, #3
    9808:	e7eb      	b.n	97e2 <_usb_d_dev_ep_enable+0xe6>
    980a:	2302      	movs	r3, #2
    980c:	e7e9      	b.n	97e2 <_usb_d_dev_ep_enable+0xe6>
    980e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9810:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9814:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9816:	2340      	movs	r3, #64	; 0x40
    9818:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    981c:	4b63      	ldr	r3, [pc, #396]	; (99ac <_usb_d_dev_ep_enable+0x2b0>)
    981e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9822:	2000      	movs	r0, #0
    9824:	72a8      	strb	r0, [r5, #10]
}
    9826:	bcf0      	pop	{r4, r5, r6, r7}
    9828:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    982a:	2106      	movs	r1, #6
    982c:	e7f0      	b.n	9810 <_usb_d_dev_ep_enable+0x114>
    982e:	2105      	movs	r1, #5
    9830:	e7ee      	b.n	9810 <_usb_d_dev_ep_enable+0x114>
    9832:	2104      	movs	r1, #4
    9834:	e7ec      	b.n	9810 <_usb_d_dev_ep_enable+0x114>
    9836:	2103      	movs	r1, #3
    9838:	e7ea      	b.n	9810 <_usb_d_dev_ep_enable+0x114>
    983a:	2102      	movs	r1, #2
    983c:	e7e8      	b.n	9810 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    983e:	f06f 0011 	mvn.w	r0, #17
    9842:	e7f0      	b.n	9826 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9844:	f06f 0013 	mvn.w	r0, #19
    9848:	e7ed      	b.n	9826 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    984a:	f06f 0013 	mvn.w	r0, #19
    984e:	e7ea      	b.n	9826 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9850:	f06f 0013 	mvn.w	r0, #19
    9854:	e7e7      	b.n	9826 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9856:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    985a:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    985e:	b2e4      	uxtb	r4, r4
    9860:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    9862:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9864:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9868:	4950      	ldr	r1, [pc, #320]	; (99ac <_usb_d_dev_ep_enable+0x2b0>)
    986a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    986e:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    9872:	2aff      	cmp	r2, #255	; 0xff
    9874:	d0e3      	beq.n	983e <_usb_d_dev_ep_enable+0x142>
    9876:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9878:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    987a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    987e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    9882:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    9886:	f001 0107 	and.w	r1, r1, #7
    988a:	2901      	cmp	r1, #1
    988c:	f43f af4d 	beq.w	972a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    9890:	2e00      	cmp	r6, #0
    9892:	f6ff af79 	blt.w	9788 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9896:	f014 0f07 	tst.w	r4, #7
    989a:	d1d9      	bne.n	9850 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    989c:	4e43      	ldr	r6, [pc, #268]	; (99ac <_usb_d_dev_ep_enable+0x2b0>)
    989e:	009f      	lsls	r7, r3, #2
    98a0:	18f9      	adds	r1, r7, r3
    98a2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    98a6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    98aa:	f001 0107 	and.w	r1, r1, #7
    98ae:	430c      	orrs	r4, r1
    98b0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    98b4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    98b8:	443b      	add	r3, r7
    98ba:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    98be:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    98c2:	4b3b      	ldr	r3, [pc, #236]	; (99b0 <_usb_d_dev_ep_enable+0x2b4>)
    98c4:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    98c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    98cc:	d89f      	bhi.n	980e <_usb_d_dev_ep_enable+0x112>
    98ce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    98d2:	d8aa      	bhi.n	982a <_usb_d_dev_ep_enable+0x12e>
    98d4:	2980      	cmp	r1, #128	; 0x80
    98d6:	d8aa      	bhi.n	982e <_usb_d_dev_ep_enable+0x132>
    98d8:	2940      	cmp	r1, #64	; 0x40
    98da:	d8aa      	bhi.n	9832 <_usb_d_dev_ep_enable+0x136>
    98dc:	2920      	cmp	r1, #32
    98de:	d8aa      	bhi.n	9836 <_usb_d_dev_ep_enable+0x13a>
    98e0:	2910      	cmp	r1, #16
    98e2:	d8aa      	bhi.n	983a <_usb_d_dev_ep_enable+0x13e>
    98e4:	2908      	cmp	r1, #8
    98e6:	bf94      	ite	ls
    98e8:	2100      	movls	r1, #0
    98ea:	2101      	movhi	r1, #1
    98ec:	e790      	b.n	9810 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98ee:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    98f2:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98f4:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    98f8:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    98fa:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    98fe:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9900:	2640      	movs	r6, #64	; 0x40
    9902:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9906:	2180      	movs	r1, #128	; 0x80
    9908:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    990c:	4f27      	ldr	r7, [pc, #156]	; (99ac <_usb_d_dev_ep_enable+0x2b0>)
    990e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    9912:	2000      	movs	r0, #0
    9914:	72a8      	strb	r0, [r5, #10]
    9916:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9918:	009c      	lsls	r4, r3, #2
    991a:	18e1      	adds	r1, r4, r3
    991c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    9920:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    9924:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9928:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    992c:	0152      	lsls	r2, r2, #5
    992e:	18b9      	adds	r1, r7, r2
    9930:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9932:	4423      	add	r3, r4
    9934:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9938:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    993c:	684b      	ldr	r3, [r1, #4]
    993e:	f364 339b 	bfi	r3, r4, #14, #14
    9942:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9944:	684b      	ldr	r3, [r1, #4]
    9946:	f360 030d 	bfi	r3, r0, #0, #14
    994a:	604b      	str	r3, [r1, #4]
    994c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    9950:	21b0      	movs	r1, #176	; 0xb0
    9952:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9956:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    995a:	461a      	mov	r2, r3
    995c:	2310      	movs	r3, #16
    995e:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    9962:	e760      	b.n	9826 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9964:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9968:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    996a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    996e:	2605      	movs	r6, #5
    9970:	e7c3      	b.n	98fa <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9972:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9976:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9978:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    997c:	2603      	movs	r6, #3
    997e:	e7bc      	b.n	98fa <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9980:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9984:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9986:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    998a:	2606      	movs	r6, #6
    998c:	e7b5      	b.n	98fa <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    998e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9992:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9994:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9998:	2604      	movs	r6, #4
    999a:	e7ae      	b.n	98fa <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    999c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    99a0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    99a2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    99a6:	2602      	movs	r6, #2
    99a8:	e7a7      	b.n	98fa <_usb_d_dev_ep_enable+0x1fe>
    99aa:	bf00      	nop
    99ac:	200009a8 	.word	0x200009a8
    99b0:	0fffc000 	.word	0x0fffc000

000099b4 <_usb_d_dev_ep_stall>:
{
    99b4:	b470      	push	{r4, r5, r6}
    99b6:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    99b8:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    99ba:	f010 000f 	ands.w	r0, r0, #15
    99be:	d008      	beq.n	99d2 <_usb_d_dev_ep_stall+0x1e>
    99c0:	2b00      	cmp	r3, #0
    99c2:	bfb4      	ite	lt
    99c4:	1d43      	addlt	r3, r0, #5
    99c6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    99c8:	2805      	cmp	r0, #5
    99ca:	d903      	bls.n	99d4 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    99cc:	f06f 0011 	mvn.w	r0, #17
    99d0:	e018      	b.n	9a04 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    99d2:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    99d4:	2901      	cmp	r1, #1
    99d6:	d017      	beq.n	9a08 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    99d8:	2900      	cmp	r1, #0
    99da:	d03a      	beq.n	9a52 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    99dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    99e0:	4a45      	ldr	r2, [pc, #276]	; (9af8 <_usb_d_dev_ep_stall+0x144>)
    99e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    99e6:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    99ea:	f003 030f 	and.w	r3, r3, #15
    99ee:	015b      	lsls	r3, r3, #5
    99f0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    99f4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    99f8:	2310      	movs	r3, #16
    99fa:	40a3      	lsls	r3, r4
    99fc:	421a      	tst	r2, r3
    99fe:	bf14      	ite	ne
    9a00:	2001      	movne	r0, #1
    9a02:	2000      	moveq	r0, #0
}
    9a04:	bc70      	pop	{r4, r5, r6}
    9a06:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9a08:	2510      	movs	r5, #16
    9a0a:	40a5      	lsls	r5, r4
    9a0c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9a0e:	493a      	ldr	r1, [pc, #232]	; (9af8 <_usb_d_dev_ep_stall+0x144>)
    9a10:	009e      	lsls	r6, r3, #2
    9a12:	18f2      	adds	r2, r6, r3
    9a14:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9a18:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9a1c:	f002 020f 	and.w	r2, r2, #15
    9a20:	0150      	lsls	r0, r2, #5
    9a22:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    9a26:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9a2a:	2020      	movs	r0, #32
    9a2c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9a30:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9a32:	0152      	lsls	r2, r2, #5
    9a34:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9a38:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    9a3c:	4433      	add	r3, r6
    9a3e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9a42:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9a46:	f042 0208 	orr.w	r2, r2, #8
    9a4a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9a4e:	2000      	movs	r0, #0
    9a50:	e7d8      	b.n	9a04 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9a52:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9a56:	4928      	ldr	r1, [pc, #160]	; (9af8 <_usb_d_dev_ep_stall+0x144>)
    9a58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9a5c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    9a60:	f002 020f 	and.w	r2, r2, #15
    9a64:	0151      	lsls	r1, r2, #5
    9a66:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9a6a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9a6e:	2010      	movs	r0, #16
    9a70:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    9a72:	4205      	tst	r5, r0
    9a74:	d03c      	beq.n	9af0 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9a76:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9a78:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9a7c:	2020      	movs	r0, #32
    9a7e:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9a80:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9a82:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9a86:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9a8a:	4202      	tst	r2, r0
    9a8c:	d007      	beq.n	9a9e <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9a8e:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9a92:	2201      	movs	r2, #1
    9a94:	fa02 f404 	lsl.w	r4, r2, r4
    9a98:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9a9a:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9a9e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9aa2:	4815      	ldr	r0, [pc, #84]	; (9af8 <_usb_d_dev_ep_stall+0x144>)
    9aa4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    9aa8:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    9aac:	f002 0207 	and.w	r2, r2, #7
    9ab0:	2a01      	cmp	r2, #1
    9ab2:	d00c      	beq.n	9ace <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    9ab4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9ab8:	4a0f      	ldr	r2, [pc, #60]	; (9af8 <_usb_d_dev_ep_stall+0x144>)
    9aba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9abe:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9ac2:	f36f 02c3 	bfc	r2, #3, #1
    9ac6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9aca:	2000      	movs	r0, #0
    9acc:	e79a      	b.n	9a04 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9ace:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9ad2:	f012 0f30 	tst.w	r2, #48	; 0x30
    9ad6:	d10d      	bne.n	9af4 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    9ad8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9adc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9ae0:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9ae4:	f36f 02c3 	bfc	r2, #3, #1
    9ae8:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9aec:	2000      	movs	r0, #0
    9aee:	e789      	b.n	9a04 <_usb_d_dev_ep_stall+0x50>
    9af0:	2000      	movs	r0, #0
    9af2:	e787      	b.n	9a04 <_usb_d_dev_ep_stall+0x50>
    9af4:	2000      	movs	r0, #0
    9af6:	e785      	b.n	9a04 <_usb_d_dev_ep_stall+0x50>
    9af8:	200009a8 	.word	0x200009a8

00009afc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9afc:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    9afe:	f000 040f 	and.w	r4, r0, #15
    9b02:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9b04:	4a14      	ldr	r2, [pc, #80]	; (9b58 <_usb_d_dev_ep_read_req+0x5c>)
    9b06:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    9b08:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9b0a:	6840      	ldr	r0, [r0, #4]
    9b0c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9b10:	2c05      	cmp	r4, #5
    9b12:	d817      	bhi.n	9b44 <_usb_d_dev_ep_read_req+0x48>
    9b14:	b1c9      	cbz	r1, 9b4a <_usb_d_dev_ep_read_req+0x4e>
    9b16:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9b1a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    9b1e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9b20:	2a11      	cmp	r2, #17
    9b22:	d115      	bne.n	9b50 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9b24:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    9b28:	f012 0f10 	tst.w	r2, #16
    9b2c:	d102      	bne.n	9b34 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    9b2e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9b30:	bc30      	pop	{r4, r5}
    9b32:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    9b34:	682c      	ldr	r4, [r5, #0]
    9b36:	686a      	ldr	r2, [r5, #4]
    9b38:	600c      	str	r4, [r1, #0]
    9b3a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9b3c:	2210      	movs	r2, #16
    9b3e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    9b42:	e7f5      	b.n	9b30 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    9b44:	f06f 0011 	mvn.w	r0, #17
    9b48:	e7f2      	b.n	9b30 <_usb_d_dev_ep_read_req+0x34>
    9b4a:	f06f 0011 	mvn.w	r0, #17
    9b4e:	e7ef      	b.n	9b30 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    9b50:	f06f 0012 	mvn.w	r0, #18
    9b54:	e7ec      	b.n	9b30 <_usb_d_dev_ep_read_req+0x34>
    9b56:	bf00      	nop
    9b58:	200009a8 	.word	0x200009a8

00009b5c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b60:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9b62:	7a03      	ldrb	r3, [r0, #8]
    9b64:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9b66:	f013 030f 	ands.w	r3, r3, #15
    9b6a:	f000 80c2 	beq.w	9cf2 <_usb_d_dev_ep_trans+0x196>
    9b6e:	2e00      	cmp	r6, #0
    9b70:	bfb4      	ite	lt
    9b72:	1d5a      	addlt	r2, r3, #5
    9b74:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    9b76:	4614      	mov	r4, r2
    9b78:	4969      	ldr	r1, [pc, #420]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9b7a:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    9b7e:	1c55      	adds	r5, r2, #1
    9b80:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9b84:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9b88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9b8c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9b90:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9b94:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9b98:	428a      	cmp	r2, r1
    9b9a:	d025      	beq.n	9be8 <_usb_d_dev_ep_trans+0x8c>
    9b9c:	1e55      	subs	r5, r2, #1
    9b9e:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    9ba0:	6841      	ldr	r1, [r0, #4]
    9ba2:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9ba4:	2b05      	cmp	r3, #5
    9ba6:	f200 8092 	bhi.w	9cce <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    9baa:	6803      	ldr	r3, [r0, #0]
    9bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9bb0:	d31c      	bcc.n	9bec <_usb_d_dev_ep_trans+0x90>
    9bb2:	eb03 0c01 	add.w	ip, r3, r1
    9bb6:	f8df e180 	ldr.w	lr, [pc, #384]	; 9d38 <_usb_d_dev_ep_trans+0x1dc>
    9bba:	45f4      	cmp	ip, lr
    9bbc:	d816      	bhi.n	9bec <_usb_d_dev_ep_trans+0x90>
    9bbe:	f013 0f03 	tst.w	r3, #3
    9bc2:	d113      	bne.n	9bec <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    9bc4:	2e00      	cmp	r6, #0
    9bc6:	db2a      	blt.n	9c1e <_usb_d_dev_ep_trans+0xc2>
    9bc8:	428a      	cmp	r2, r1
    9bca:	f200 809c 	bhi.w	9d06 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    9bce:	b34d      	cbz	r5, 9c24 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9bd0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9bd4:	4a52      	ldr	r2, [pc, #328]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9bd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9bde:	2b00      	cmp	r3, #0
    9be0:	d07b      	beq.n	9cda <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9be2:	f04f 0800 	mov.w	r8, #0
    9be6:	e00c      	b.n	9c02 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9be8:	4615      	mov	r5, r2
    9bea:	e7d9      	b.n	9ba0 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    9bec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9bf0:	4a4b      	ldr	r2, [pc, #300]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9bf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	d06a      	beq.n	9cd4 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    9bfe:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9c02:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9c06:	4a46      	ldr	r2, [pc, #280]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9c08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9c0c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9c10:	f013 0f08 	tst.w	r3, #8
    9c14:	d009      	beq.n	9c2a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    9c16:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    9c18:	b003      	add	sp, #12
    9c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    9c1e:	f04f 0800 	mov.w	r8, #0
    9c22:	e7ee      	b.n	9c02 <_usb_d_dev_ep_trans+0xa6>
    9c24:	f04f 0800 	mov.w	r8, #0
    9c28:	e7eb      	b.n	9c02 <_usb_d_dev_ep_trans+0xa6>
    9c2a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    9c2c:	a801      	add	r0, sp, #4
    9c2e:	4b3d      	ldr	r3, [pc, #244]	; (9d24 <_usb_d_dev_ep_trans+0x1c8>)
    9c30:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9c32:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9c36:	4a3a      	ldr	r2, [pc, #232]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9c38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9c3c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9c40:	f013 0f40 	tst.w	r3, #64	; 0x40
    9c44:	d13c      	bne.n	9cc0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    9c46:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    9c4a:	4b35      	ldr	r3, [pc, #212]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9c4c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    9c50:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9c58:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    9c5c:	a801      	add	r0, sp, #4
    9c5e:	4b32      	ldr	r3, [pc, #200]	; (9d28 <_usb_d_dev_ep_trans+0x1cc>)
    9c60:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    9c62:	f8da 3000 	ldr.w	r3, [sl]
    9c66:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    9c6a:	f8da 3004 	ldr.w	r3, [sl, #4]
    9c6e:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    9c72:	2300      	movs	r3, #0
    9c74:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    9c78:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    9c7a:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9c7e:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    9c82:	f368 1345 	bfi	r3, r8, #5, #1
    9c86:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    9c8a:	f89a 3009 	ldrb.w	r3, [sl, #9]
    9c8e:	b1e3      	cbz	r3, 9cca <_usb_d_dev_ep_trans+0x16e>
    9c90:	fab5 f585 	clz	r5, r5
    9c94:	096d      	lsrs	r5, r5, #5
    9c96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9c9a:	4b21      	ldr	r3, [pc, #132]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9c9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    9ca0:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    9ca4:	f365 1304 	bfi	r3, r5, #4, #1
    9ca8:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    9cac:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    9cae:	f04f 0100 	mov.w	r1, #0
    9cb2:	4638      	mov	r0, r7
    9cb4:	bfb4      	ite	lt
    9cb6:	4b1d      	ldrlt	r3, [pc, #116]	; (9d2c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    9cb8:	4b1d      	ldrge	r3, [pc, #116]	; (9d30 <_usb_d_dev_ep_trans+0x1d4>)
    9cba:	4798      	blx	r3
	return ERR_NONE;
    9cbc:	2000      	movs	r0, #0
    9cbe:	e7ab      	b.n	9c18 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    9cc0:	a801      	add	r0, sp, #4
    9cc2:	4b19      	ldr	r3, [pc, #100]	; (9d28 <_usb_d_dev_ep_trans+0x1cc>)
    9cc4:	4798      	blx	r3
		return USB_BUSY;
    9cc6:	2001      	movs	r0, #1
    9cc8:	e7a6      	b.n	9c18 <_usb_d_dev_ep_trans+0xbc>
    9cca:	2500      	movs	r5, #0
    9ccc:	e7e3      	b.n	9c96 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    9cce:	f06f 0011 	mvn.w	r0, #17
    9cd2:	e7a1      	b.n	9c18 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9cd4:	f06f 0012 	mvn.w	r0, #18
    9cd8:	e79e      	b.n	9c18 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    9cda:	f06f 0011 	mvn.w	r0, #17
    9cde:	e79b      	b.n	9c18 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9ce0:	f06f 0012 	mvn.w	r0, #18
    9ce4:	e798      	b.n	9c18 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    9ce6:	6841      	ldr	r1, [r0, #4]
    9ce8:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    9cec:	4f11      	ldr	r7, [pc, #68]	; (9d34 <_usb_d_dev_ep_trans+0x1d8>)
    9cee:	2400      	movs	r4, #0
    9cf0:	e75b      	b.n	9baa <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9cf2:	4a0b      	ldr	r2, [pc, #44]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9cf4:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9cf8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9cfc:	428a      	cmp	r2, r1
    9cfe:	d0f2      	beq.n	9ce6 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9d00:	4f0c      	ldr	r7, [pc, #48]	; (9d34 <_usb_d_dev_ep_trans+0x1d8>)
    9d02:	2400      	movs	r4, #0
    9d04:	e74a      	b.n	9b9c <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    9d06:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9d0a:	4a05      	ldr	r2, [pc, #20]	; (9d20 <_usb_d_dev_ep_trans+0x1c4>)
    9d0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9d14:	2b00      	cmp	r3, #0
    9d16:	d0e3      	beq.n	9ce0 <_usb_d_dev_ep_trans+0x184>
    9d18:	f04f 0801 	mov.w	r8, #1
    9d1c:	e771      	b.n	9c02 <_usb_d_dev_ep_trans+0xa6>
    9d1e:	bf00      	nop
    9d20:	200009a8 	.word	0x200009a8
    9d24:	00004d8d 	.word	0x00004d8d
    9d28:	00004d9b 	.word	0x00004d9b
    9d2c:	00008d81 	.word	0x00008d81
    9d30:	00008f05 	.word	0x00008f05
    9d34:	20000a7c 	.word	0x20000a7c
    9d38:	20041fff 	.word	0x20041fff

00009d3c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9d3c:	4b07      	ldr	r3, [pc, #28]	; (9d5c <_usb_d_dev_register_callback+0x20>)
    9d3e:	2900      	cmp	r1, #0
    9d40:	bf08      	it	eq
    9d42:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    9d44:	2801      	cmp	r0, #1
    9d46:	d004      	beq.n	9d52 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    9d48:	b910      	cbnz	r0, 9d50 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    9d4a:	4b05      	ldr	r3, [pc, #20]	; (9d60 <_usb_d_dev_register_callback+0x24>)
    9d4c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    9d50:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9d52:	4b03      	ldr	r3, [pc, #12]	; (9d60 <_usb_d_dev_register_callback+0x24>)
    9d54:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    9d58:	4770      	bx	lr
    9d5a:	bf00      	nop
    9d5c:	00008af1 	.word	0x00008af1
    9d60:	200009a8 	.word	0x200009a8

00009d64 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9d64:	4b0a      	ldr	r3, [pc, #40]	; (9d90 <_usb_d_dev_register_ep_callback+0x2c>)
    9d66:	2900      	cmp	r1, #0
    9d68:	bf08      	it	eq
    9d6a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    9d6c:	4603      	mov	r3, r0
    9d6e:	b138      	cbz	r0, 9d80 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    9d70:	2801      	cmp	r0, #1
    9d72:	d009      	beq.n	9d88 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    9d74:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    9d76:	bf04      	itt	eq
    9d78:	4b06      	ldreq	r3, [pc, #24]	; (9d94 <_usb_d_dev_register_ep_callback+0x30>)
    9d7a:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    9d7e:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    9d80:	4b04      	ldr	r3, [pc, #16]	; (9d94 <_usb_d_dev_register_ep_callback+0x30>)
    9d82:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    9d86:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    9d88:	4b02      	ldr	r3, [pc, #8]	; (9d94 <_usb_d_dev_register_ep_callback+0x30>)
    9d8a:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    9d8e:	4770      	bx	lr
    9d90:	00008af1 	.word	0x00008af1
    9d94:	200009a8 	.word	0x200009a8

00009d98 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    9d98:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9d9a:	4b01      	ldr	r3, [pc, #4]	; (9da0 <USB_0_Handler+0x8>)
    9d9c:	4798      	blx	r3
    9d9e:	bd08      	pop	{r3, pc}
    9da0:	000090f5 	.word	0x000090f5

00009da4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    9da4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9da6:	4b01      	ldr	r3, [pc, #4]	; (9dac <USB_1_Handler+0x8>)
    9da8:	4798      	blx	r3
    9daa:	bd08      	pop	{r3, pc}
    9dac:	000090f5 	.word	0x000090f5

00009db0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    9db0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9db2:	4b01      	ldr	r3, [pc, #4]	; (9db8 <USB_2_Handler+0x8>)
    9db4:	4798      	blx	r3
    9db6:	bd08      	pop	{r3, pc}
    9db8:	000090f5 	.word	0x000090f5

00009dbc <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9dbc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9dbe:	4b01      	ldr	r3, [pc, #4]	; (9dc4 <USB_3_Handler+0x8>)
    9dc0:	4798      	blx	r3
    9dc2:	bd08      	pop	{r3, pc}
    9dc4:	000090f5 	.word	0x000090f5

00009dc8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    9dc8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    9dca:	4604      	mov	r4, r0
    9dcc:	b340      	cbz	r0, 9e20 <_wdt_init+0x58>
    9dce:	6800      	ldr	r0, [r0, #0]
    9dd0:	3000      	adds	r0, #0
    9dd2:	bf18      	it	ne
    9dd4:	2001      	movne	r0, #1
    9dd6:	2250      	movs	r2, #80	; 0x50
    9dd8:	4915      	ldr	r1, [pc, #84]	; (9e30 <_wdt_init+0x68>)
    9dda:	4b16      	ldr	r3, [pc, #88]	; (9e34 <_wdt_init+0x6c>)
    9ddc:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    9dde:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9de0:	689a      	ldr	r2, [r3, #8]
    9de2:	f012 0f0e 	tst.w	r2, #14
    9de6:	d1fb      	bne.n	9de0 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9de8:	781a      	ldrb	r2, [r3, #0]
    9dea:	09d2      	lsrs	r2, r2, #7
    9dec:	d11a      	bne.n	9e24 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9dee:	689a      	ldr	r2, [r3, #8]
    9df0:	f012 0f0e 	tst.w	r2, #14
    9df4:	d1fb      	bne.n	9dee <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9df6:	781a      	ldrb	r2, [r3, #0]
    9df8:	f012 0f02 	tst.w	r2, #2
    9dfc:	d115      	bne.n	9e2a <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9dfe:	781a      	ldrb	r2, [r3, #0]
    9e00:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9e04:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9e06:	689a      	ldr	r2, [r3, #8]
    9e08:	f012 0f0e 	tst.w	r2, #14
    9e0c:	d1fb      	bne.n	9e06 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    9e0e:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9e10:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    9e16:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    9e1a:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    9e1c:	2000      	movs	r0, #0
    9e1e:	bd10      	pop	{r4, pc}
    9e20:	2000      	movs	r0, #0
    9e22:	e7d8      	b.n	9dd6 <_wdt_init+0xe>
		return ERR_DENIED;
    9e24:	f06f 0010 	mvn.w	r0, #16
    9e28:	bd10      	pop	{r4, pc}
    9e2a:	f06f 0010 	mvn.w	r0, #16
}
    9e2e:	bd10      	pop	{r4, pc}
    9e30:	0000e688 	.word	0x0000e688
    9e34:	00006181 	.word	0x00006181

00009e38 <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    9e38:	2201      	movs	r2, #1
    9e3a:	4b01      	ldr	r3, [pc, #4]	; (9e40 <RTC_Scheduler_report_cb+0x8>)
    9e3c:	701a      	strb	r2, [r3, #0]
    9e3e:	4770      	bx	lr
    9e40:	20000d68 	.word	0x20000d68

00009e44 <RTC_Scheduler_heartbeat_cb>:
{
    9e44:	b508      	push	{r3, lr}
	grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_HEARTBEAT);
    9e46:	2100      	movs	r1, #0
    9e48:	4801      	ldr	r0, [pc, #4]	; (9e50 <RTC_Scheduler_heartbeat_cb+0xc>)
    9e4a:	4b02      	ldr	r3, [pc, #8]	; (9e54 <RTC_Scheduler_heartbeat_cb+0x10>)
    9e4c:	4798      	blx	r3
    9e4e:	bd08      	pop	{r3, pc}
    9e50:	20003270 	.word	0x20003270
    9e54:	0000455d 	.word	0x0000455d

00009e58 <RTC_Scheduler_ping_cb>:
{
    9e58:	b508      	push	{r3, lr}
	pingflag++;
    9e5a:	4a11      	ldr	r2, [pc, #68]	; (9ea0 <RTC_Scheduler_ping_cb+0x48>)
    9e5c:	7853      	ldrb	r3, [r2, #1]
    9e5e:	3301      	adds	r3, #1
    9e60:	b2db      	uxtb	r3, r3
    9e62:	7053      	strb	r3, [r2, #1]
	switch (pingflag%4)
    9e64:	7853      	ldrb	r3, [r2, #1]
    9e66:	f003 0303 	and.w	r3, r3, #3
    9e6a:	2b03      	cmp	r3, #3
    9e6c:	d816      	bhi.n	9e9c <RTC_Scheduler_ping_cb+0x44>
    9e6e:	e8df f003 	tbb	[pc, r3]
    9e72:	0702      	.short	0x0702
    9e74:	110c      	.short	0x110c
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_NORTH);
    9e76:	2101      	movs	r1, #1
    9e78:	480a      	ldr	r0, [pc, #40]	; (9ea4 <RTC_Scheduler_ping_cb+0x4c>)
    9e7a:	4b0b      	ldr	r3, [pc, #44]	; (9ea8 <RTC_Scheduler_ping_cb+0x50>)
    9e7c:	4798      	blx	r3
			break;
    9e7e:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_EAST);
    9e80:	2102      	movs	r1, #2
    9e82:	4808      	ldr	r0, [pc, #32]	; (9ea4 <RTC_Scheduler_ping_cb+0x4c>)
    9e84:	4b08      	ldr	r3, [pc, #32]	; (9ea8 <RTC_Scheduler_ping_cb+0x50>)
    9e86:	4798      	blx	r3
			break;
    9e88:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_SOUTH);
    9e8a:	2103      	movs	r1, #3
    9e8c:	4805      	ldr	r0, [pc, #20]	; (9ea4 <RTC_Scheduler_ping_cb+0x4c>)
    9e8e:	4b06      	ldr	r3, [pc, #24]	; (9ea8 <RTC_Scheduler_ping_cb+0x50>)
    9e90:	4798      	blx	r3
			break;
    9e92:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_WEST);
    9e94:	2104      	movs	r1, #4
    9e96:	4803      	ldr	r0, [pc, #12]	; (9ea4 <RTC_Scheduler_ping_cb+0x4c>)
    9e98:	4b03      	ldr	r3, [pc, #12]	; (9ea8 <RTC_Scheduler_ping_cb+0x50>)
    9e9a:	4798      	blx	r3
    9e9c:	bd08      	pop	{r3, pc}
    9e9e:	bf00      	nop
    9ea0:	20000d68 	.word	0x20000d68
    9ea4:	20003270 	.word	0x20003270
    9ea8:	0000455d 	.word	0x0000455d

00009eac <grid_task_timer_tick>:
void grid_task_timer_tick(struct grid_task_model* mod){
    9eac:	7843      	ldrb	r3, [r0, #1]
    9eae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	mod->timer[mod->current_task]++;
    9eb2:	6843      	ldr	r3, [r0, #4]
    9eb4:	3301      	adds	r3, #1
    9eb6:	6043      	str	r3, [r0, #4]
    9eb8:	4770      	bx	lr
	...

00009ebc <RTC_Scheduler_realtime_cb>:
{
    9ebc:	b510      	push	{r4, lr}
    9ebe:	b082      	sub	sp, #8
	grid_sys_rtc_tick_time(&grid_sys_state);	
    9ec0:	481b      	ldr	r0, [pc, #108]	; (9f30 <RTC_Scheduler_realtime_cb+0x74>)
    9ec2:	4b1c      	ldr	r3, [pc, #112]	; (9f34 <RTC_Scheduler_realtime_cb+0x78>)
    9ec4:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    9ec6:	481c      	ldr	r0, [pc, #112]	; (9f38 <RTC_Scheduler_realtime_cb+0x7c>)
    9ec8:	4b1c      	ldr	r3, [pc, #112]	; (9f3c <RTC_Scheduler_realtime_cb+0x80>)
    9eca:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    9ecc:	a801      	add	r0, sp, #4
    9ece:	4b1c      	ldr	r3, [pc, #112]	; (9f40 <RTC_Scheduler_realtime_cb+0x84>)
    9ed0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9ed2:	4b1c      	ldr	r3, [pc, #112]	; (9f44 <RTC_Scheduler_realtime_cb+0x88>)
    9ed4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9ed8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9edc:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9ee0:	4054      	eors	r4, r2
    9ee2:	400c      	ands	r4, r1
    9ee4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    9ee6:	a801      	add	r0, sp, #4
    9ee8:	4b17      	ldr	r3, [pc, #92]	; (9f48 <RTC_Scheduler_realtime_cb+0x8c>)
    9eea:	4798      	blx	r3
	if (mapmode_value != mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0]){
    9eec:	4b17      	ldr	r3, [pc, #92]	; (9f4c <RTC_Scheduler_realtime_cb+0x90>)
    9eee:	685b      	ldr	r3, [r3, #4]
    9ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    9ef2:	781a      	ldrb	r2, [r3, #0]
    9ef4:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    9ef8:	4294      	cmp	r4, r2
    9efa:	d002      	beq.n	9f02 <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] == 0){
    9efc:	b91a      	cbnz	r2, 9f06 <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 1;
    9efe:	2201      	movs	r2, #1
    9f00:	701a      	strb	r2, [r3, #0]
}
    9f02:	b002      	add	sp, #8
    9f04:	bd10      	pop	{r4, pc}
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 0;
    9f06:	2200      	movs	r2, #0
    9f08:	701a      	strb	r2, [r3, #0]
 			grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    9f0a:	4b09      	ldr	r3, [pc, #36]	; (9f30 <RTC_Scheduler_realtime_cb+0x74>)
    9f0c:	7a5a      	ldrb	r2, [r3, #9]
    9f0e:	3201      	adds	r2, #1
    9f10:	f002 0201 	and.w	r2, r2, #1
    9f14:	4c0d      	ldr	r4, [pc, #52]	; (9f4c <RTC_Scheduler_realtime_cb+0x90>)
    9f16:	6863      	ldr	r3, [r4, #4]
    9f18:	6d58      	ldr	r0, [r3, #84]	; 0x54
    9f1a:	bf48      	it	mi
    9f1c:	4252      	negmi	r2, r2
    9f1e:	2102      	movs	r1, #2
    9f20:	3007      	adds	r0, #7
    9f22:	4b0b      	ldr	r3, [pc, #44]	; (9f50 <RTC_Scheduler_realtime_cb+0x94>)
    9f24:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    9f26:	2105      	movs	r1, #5
    9f28:	4620      	mov	r0, r4
    9f2a:	4b0a      	ldr	r3, [pc, #40]	; (9f54 <RTC_Scheduler_realtime_cb+0x98>)
    9f2c:	4798      	blx	r3
}
    9f2e:	e7e8      	b.n	9f02 <RTC_Scheduler_realtime_cb+0x46>
    9f30:	20003280 	.word	0x20003280
    9f34:	00003d23 	.word	0x00003d23
    9f38:	20007d20 	.word	0x20007d20
    9f3c:	00009ead 	.word	0x00009ead
    9f40:	00004d8d 	.word	0x00004d8d
    9f44:	41008000 	.word	0x41008000
    9f48:	00004d9b 	.word	0x00004d9b
    9f4c:	20003270 	.word	0x20003270
    9f50:	00003e11 	.word	0x00003e11
    9f54:	0000455d 	.word	0x0000455d

00009f58 <grid_task_timer_reset>:
void grid_task_timer_reset(struct grid_task_model* mod){
    9f58:	1d03      	adds	r3, r0, #4
    9f5a:	3024      	adds	r0, #36	; 0x24
		mod->timer[i] = 0;
    9f5c:	2200      	movs	r2, #0
    9f5e:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    9f62:	4283      	cmp	r3, r0
    9f64:	d1fb      	bne.n	9f5e <grid_task_timer_reset+0x6>
}
    9f66:	4770      	bx	lr

00009f68 <grid_port_reset_receiver>:
void grid_port_reset_receiver(struct grid_port* por){
    9f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f6a:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    9f6c:	6880      	ldr	r0, [r0, #8]
    9f6e:	4b19      	ldr	r3, [pc, #100]	; (9fd4 <grid_port_reset_receiver+0x6c>)
    9f70:	4798      	blx	r3
	por->rx_double_buffer_seek_start_index = 0;
    9f72:	2500      	movs	r5, #0
    9f74:	62a5      	str	r5, [r4, #40]	; 0x28
	por->rx_double_buffer_read_start_index = 0;
    9f76:	62e5      	str	r5, [r4, #44]	; 0x2c
	por->partner_status = 0;
    9f78:	f241 0307 	movw	r3, #4103	; 0x1007
    9f7c:	54e5      	strb	r5, [r4, r3]
	struct grid_ui_report* stored_report = por->ping_report;
    9f7e:	6866      	ldr	r6, [r4, #4]
	grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    9f80:	6870      	ldr	r0, [r6, #4]
    9f82:	22ff      	movs	r2, #255	; 0xff
    9f84:	2102      	movs	r1, #2
    9f86:	3008      	adds	r0, #8
    9f88:	4f13      	ldr	r7, [pc, #76]	; (9fd8 <grid_port_reset_receiver+0x70>)
    9f8a:	47b8      	blx	r7
	grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    9f8c:	6870      	ldr	r0, [r6, #4]
    9f8e:	22ff      	movs	r2, #255	; 0xff
    9f90:	2102      	movs	r1, #2
    9f92:	3006      	adds	r0, #6
    9f94:	47b8      	blx	r7
	grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    9f96:	6877      	ldr	r7, [r6, #4]
    9f98:	78b6      	ldrb	r6, [r6, #2]
    9f9a:	4631      	mov	r1, r6
    9f9c:	4638      	mov	r0, r7
    9f9e:	4b0f      	ldr	r3, [pc, #60]	; (9fdc <grid_port_reset_receiver+0x74>)
    9fa0:	4798      	blx	r3
    9fa2:	4602      	mov	r2, r0
    9fa4:	4631      	mov	r1, r6
    9fa6:	4638      	mov	r0, r7
    9fa8:	4b0d      	ldr	r3, [pc, #52]	; (9fe0 <grid_port_reset_receiver+0x78>)
    9faa:	4798      	blx	r3
	por->rx_double_buffer_timeout = 0;
    9fac:	6225      	str	r5, [r4, #32]
	grid_sys_port_reset_dma(por);
    9fae:	4620      	mov	r0, r4
    9fb0:	4b0c      	ldr	r3, [pc, #48]	; (9fe4 <grid_port_reset_receiver+0x7c>)
    9fb2:	4798      	blx	r3
		por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    9fb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9fb6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    9fba:	3b01      	subs	r3, #1
    9fbc:	b29b      	uxth	r3, r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d1fb      	bne.n	9fba <grid_port_reset_receiver+0x52>
    9fc2:	18a3      	adds	r3, r4, r2
    9fc4:	2200      	movs	r2, #0
    9fc6:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	usart_async_enable(por->usart);
    9fca:	68a0      	ldr	r0, [r4, #8]
    9fcc:	4b06      	ldr	r3, [pc, #24]	; (9fe8 <grid_port_reset_receiver+0x80>)
    9fce:	4798      	blx	r3
    9fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fd2:	bf00      	nop
    9fd4:	00005995 	.word	0x00005995
    9fd8:	00003e11 	.word	0x00003e11
    9fdc:	000040e5 	.word	0x000040e5
    9fe0:	00004121 	.word	0x00004121
    9fe4:	00003a81 	.word	0x00003a81
    9fe8:	00005969 	.word	0x00005969

00009fec <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    9fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
    9fee:	2b00      	cmp	r3, #0
    9ff0:	f040 80bc 	bne.w	a16c <grid_port_receive_task+0x180>
void grid_port_receive_task(struct grid_port* por){
    9ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ff8:	b082      	sub	sp, #8
    9ffa:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 1000){
    9ffc:	6a03      	ldr	r3, [r0, #32]
    9ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    a002:	d92c      	bls.n	a05e <grid_port_receive_task+0x72>
		if (por->partner_status == 1){
    a004:	f241 0307 	movw	r3, #4103	; 0x1007
    a008:	5cc3      	ldrb	r3, [r0, r3]
    a00a:	2b01      	cmp	r3, #1
    a00c:	d015      	beq.n	a03a <grid_port_receive_task+0x4e>
			if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    a00e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    a010:	b90b      	cbnz	r3, a016 <grid_port_receive_task+0x2a>
    a012:	6a83      	ldr	r3, [r0, #40]	; 0x28
    a014:	b32b      	cbz	r3, a062 <grid_port_receive_task+0x76>
				GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    a016:	4956      	ldr	r1, [pc, #344]	; (a170 <grid_port_receive_task+0x184>)
    a018:	4856      	ldr	r0, [pc, #344]	; (a174 <grid_port_receive_task+0x188>)
    a01a:	4b57      	ldr	r3, [pc, #348]	; (a178 <grid_port_receive_task+0x18c>)
    a01c:	4798      	blx	r3
				grid_port_reset_receiver(por);
    a01e:	4620      	mov	r0, r4
    a020:	4b56      	ldr	r3, [pc, #344]	; (a17c <grid_port_receive_task+0x190>)
    a022:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    a024:	23c8      	movs	r3, #200	; 0xc8
    a026:	9301      	str	r3, [sp, #4]
    a028:	2302      	movs	r3, #2
    a02a:	9300      	str	r3, [sp, #0]
    a02c:	23ff      	movs	r3, #255	; 0xff
    a02e:	461a      	mov	r2, r3
    a030:	4619      	mov	r1, r3
    a032:	4853      	ldr	r0, [pc, #332]	; (a180 <grid_port_receive_task+0x194>)
    a034:	4d53      	ldr	r5, [pc, #332]	; (a184 <grid_port_receive_task+0x198>)
    a036:	47a8      	blx	r5
    a038:	e013      	b.n	a062 <grid_port_receive_task+0x76>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    a03a:	4953      	ldr	r1, [pc, #332]	; (a188 <grid_port_receive_task+0x19c>)
    a03c:	484d      	ldr	r0, [pc, #308]	; (a174 <grid_port_receive_task+0x188>)
    a03e:	4b4e      	ldr	r3, [pc, #312]	; (a178 <grid_port_receive_task+0x18c>)
    a040:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    a042:	4620      	mov	r0, r4
    a044:	4b4d      	ldr	r3, [pc, #308]	; (a17c <grid_port_receive_task+0x190>)
    a046:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    a048:	23c8      	movs	r3, #200	; 0xc8
    a04a:	9301      	str	r3, [sp, #4]
    a04c:	2302      	movs	r3, #2
    a04e:	9300      	str	r3, [sp, #0]
    a050:	23ff      	movs	r3, #255	; 0xff
    a052:	461a      	mov	r2, r3
    a054:	4619      	mov	r1, r3
    a056:	484a      	ldr	r0, [pc, #296]	; (a180 <grid_port_receive_task+0x194>)
    a058:	4d4a      	ldr	r5, [pc, #296]	; (a184 <grid_port_receive_task+0x198>)
    a05a:	47a8      	blx	r5
    a05c:	e001      	b.n	a062 <grid_port_receive_task+0x76>
		por->rx_double_buffer_timeout++;
    a05e:	3301      	adds	r3, #1
    a060:	6203      	str	r3, [r0, #32]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    a062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a064:	18e2      	adds	r2, r4, r3
    a066:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    a06a:	2a0a      	cmp	r2, #10
    a06c:	d010      	beq.n	a090 <grid_port_receive_task+0xa4>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    a06e:	b19a      	cbz	r2, a098 <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    a070:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    a072:	1e51      	subs	r1, r2, #1
    a074:	428b      	cmp	r3, r1
    a076:	d012      	beq.n	a09e <grid_port_receive_task+0xb2>
    a078:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    a07c:	f240 76cf 	movw	r6, #1999	; 0x7cf
			por->rx_double_buffer_timeout = 0;
    a080:	2500      	movs	r5, #0
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    a082:	f8df e114 	ldr.w	lr, [pc, #276]	; a198 <grid_port_receive_task+0x1ac>
    a086:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    a08a:	f240 7cce 	movw	ip, #1998	; 0x7ce
    a08e:	e05c      	b.n	a14a <grid_port_receive_task+0x15e>
			por->rx_double_buffer_status = 1;
    a090:	2301      	movs	r3, #1
    a092:	6263      	str	r3, [r4, #36]	; 0x24
			por->rx_double_buffer_timeout = 0;
    a094:	2300      	movs	r3, #0
    a096:	6223      	str	r3, [r4, #32]
}
    a098:	b002      	add	sp, #8
    a09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 1");
    a09e:	493b      	ldr	r1, [pc, #236]	; (a18c <grid_port_receive_task+0x1a0>)
    a0a0:	4834      	ldr	r0, [pc, #208]	; (a174 <grid_port_receive_task+0x188>)
    a0a2:	4b35      	ldr	r3, [pc, #212]	; (a178 <grid_port_receive_task+0x18c>)
    a0a4:	4798      	blx	r3
			grid_port_reset_receiver(por);
    a0a6:	4620      	mov	r0, r4
    a0a8:	4b34      	ldr	r3, [pc, #208]	; (a17c <grid_port_receive_task+0x190>)
    a0aa:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    a0ac:	23c8      	movs	r3, #200	; 0xc8
    a0ae:	9301      	str	r3, [sp, #4]
    a0b0:	2302      	movs	r3, #2
    a0b2:	9300      	str	r3, [sp, #0]
    a0b4:	2300      	movs	r3, #0
    a0b6:	461a      	mov	r2, r3
    a0b8:	21ff      	movs	r1, #255	; 0xff
    a0ba:	4831      	ldr	r0, [pc, #196]	; (a180 <grid_port_receive_task+0x194>)
    a0bc:	4c31      	ldr	r4, [pc, #196]	; (a184 <grid_port_receive_task+0x198>)
    a0be:	47a0      	blx	r4
			return;	
    a0c0:	e7ea      	b.n	a098 <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    a0c2:	b16a      	cbz	r2, a0e0 <grid_port_receive_task+0xf4>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    a0c4:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    a0c8:	fbae 1302 	umull	r1, r3, lr, r2
    a0cc:	09db      	lsrs	r3, r3, #7
    a0ce:	fb07 2213 	mls	r2, r7, r3, r2
    a0d2:	4422      	add	r2, r4
    a0d4:	f892 3800 	ldrb.w	r3, [r2, #2048]	; 0x800
    a0d8:	b9a3      	cbnz	r3, a104 <grid_port_receive_task+0x118>
			por->rx_double_buffer_timeout = 0;
    a0da:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    a0dc:	62a5      	str	r5, [r4, #40]	; 0x28
    a0de:	e026      	b.n	a12e <grid_port_receive_task+0x142>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 2");
    a0e0:	492b      	ldr	r1, [pc, #172]	; (a190 <grid_port_receive_task+0x1a4>)
    a0e2:	4824      	ldr	r0, [pc, #144]	; (a174 <grid_port_receive_task+0x188>)
    a0e4:	4b24      	ldr	r3, [pc, #144]	; (a178 <grid_port_receive_task+0x18c>)
    a0e6:	4798      	blx	r3
			grid_port_reset_receiver(por);
    a0e8:	4620      	mov	r0, r4
    a0ea:	4b24      	ldr	r3, [pc, #144]	; (a17c <grid_port_receive_task+0x190>)
    a0ec:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    a0ee:	23c8      	movs	r3, #200	; 0xc8
    a0f0:	9301      	str	r3, [sp, #4]
    a0f2:	2302      	movs	r3, #2
    a0f4:	9300      	str	r3, [sp, #0]
    a0f6:	2300      	movs	r3, #0
    a0f8:	461a      	mov	r2, r3
    a0fa:	21ff      	movs	r1, #255	; 0xff
    a0fc:	4820      	ldr	r0, [pc, #128]	; (a180 <grid_port_receive_task+0x194>)
    a0fe:	4c21      	ldr	r4, [pc, #132]	; (a184 <grid_port_receive_task+0x198>)
    a100:	47a0      	blx	r4
			return;
    a102:	e7c9      	b.n	a098 <grid_port_receive_task+0xac>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 3");
    a104:	4923      	ldr	r1, [pc, #140]	; (a194 <grid_port_receive_task+0x1a8>)
    a106:	481b      	ldr	r0, [pc, #108]	; (a174 <grid_port_receive_task+0x188>)
    a108:	4b1b      	ldr	r3, [pc, #108]	; (a178 <grid_port_receive_task+0x18c>)
    a10a:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    a10c:	4620      	mov	r0, r4
    a10e:	4b1b      	ldr	r3, [pc, #108]	; (a17c <grid_port_receive_task+0x190>)
    a110:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    a112:	23c8      	movs	r3, #200	; 0xc8
    a114:	9301      	str	r3, [sp, #4]
    a116:	2302      	movs	r3, #2
    a118:	9300      	str	r3, [sp, #0]
    a11a:	2300      	movs	r3, #0
    a11c:	461a      	mov	r2, r3
    a11e:	21ff      	movs	r1, #255	; 0xff
    a120:	4817      	ldr	r0, [pc, #92]	; (a180 <grid_port_receive_task+0x194>)
    a122:	4c18      	ldr	r4, [pc, #96]	; (a184 <grid_port_receive_task+0x198>)
    a124:	47a0      	blx	r4
			return;
    a126:	e7b7      	b.n	a098 <grid_port_receive_task+0xac>
			por->rx_double_buffer_timeout = 0;
    a128:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index++;			
    a12a:	3301      	adds	r3, #1
    a12c:	62a3      	str	r3, [r4, #40]	; 0x28
	for(uint32_t i = 0; i<490; i++){
    a12e:	3801      	subs	r0, #1
    a130:	d0b2      	beq.n	a098 <grid_port_receive_task+0xac>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    a132:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a134:	18e2      	adds	r2, r4, r3
    a136:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    a13a:	2a0a      	cmp	r2, #10
    a13c:	d0a8      	beq.n	a090 <grid_port_receive_task+0xa4>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    a13e:	2a00      	cmp	r2, #0
    a140:	d0aa      	beq.n	a098 <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    a142:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    a144:	1e51      	subs	r1, r2, #1
    a146:	428b      	cmp	r3, r1
    a148:	d0a9      	beq.n	a09e <grid_port_receive_task+0xb2>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    a14a:	42b3      	cmp	r3, r6
    a14c:	d0b9      	beq.n	a0c2 <grid_port_receive_task+0xd6>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    a14e:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    a152:	fbae 8102 	umull	r8, r1, lr, r2
    a156:	09c9      	lsrs	r1, r1, #7
    a158:	fb07 2211 	mls	r2, r7, r1, r2
    a15c:	4422      	add	r2, r4
    a15e:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    a162:	2a00      	cmp	r2, #0
    a164:	d1ce      	bne.n	a104 <grid_port_receive_task+0x118>
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    a166:	4563      	cmp	r3, ip
    a168:	d9de      	bls.n	a128 <grid_port_receive_task+0x13c>
    a16a:	e7b6      	b.n	a0da <grid_port_receive_task+0xee>
    a16c:	4770      	bx	lr
    a16e:	bf00      	nop
    a170:	0000e6c4 	.word	0x0000e6c4
    a174:	0000dde8 	.word	0x0000dde8
    a178:	0000ca41 	.word	0x0000ca41
    a17c:	00009f69 	.word	0x00009f69
    a180:	20003280 	.word	0x20003280
    a184:	00003d7d 	.word	0x00003d7d
    a188:	0000e6a0 	.word	0x0000e6a0
    a18c:	0000e6e0 	.word	0x0000e6e0
    a190:	0000e6fc 	.word	0x0000e6fc
    a194:	0000e718 	.word	0x0000e718
    a198:	10624dd3 	.word	0x10624dd3

0000a19c <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t len){
    a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1a0:	b087      	sub	sp, #28
    a1a2:	af02      	add	r7, sp, #8
    a1a4:	4606      	mov	r6, r0
    a1a6:	4690      	mov	r8, r2
	uint8_t buffer[length];			
    a1a8:	1dd3      	adds	r3, r2, #7
    a1aa:	f023 0307 	bic.w	r3, r3, #7
    a1ae:	ebad 0d03 	sub.w	sp, sp, r3
    a1b2:	ad02      	add	r5, sp, #8
	for (uint32_t i = 0; i<length; i++){
    a1b4:	2a00      	cmp	r2, #0
    a1b6:	f000 8239 	beq.w	a62c <grid_port_receive_decode+0x490>
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    a1ba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    a1bc:	eb05 0908 	add.w	r9, r5, r8
    a1c0:	4629      	mov	r1, r5
    a1c2:	eba2 0c05 	sub.w	ip, r2, r5
    a1c6:	f8df e2ec 	ldr.w	lr, [pc, #748]	; a4b4 <grid_port_receive_decode+0x318>
    a1ca:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    a1ce:	2000      	movs	r0, #0
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    a1d0:	eb0c 0a01 	add.w	sl, ip, r1
    a1d4:	fbae b30a 	umull	fp, r3, lr, sl
    a1d8:	09db      	lsrs	r3, r3, #7
    a1da:	fb04 a313 	mls	r3, r4, r3, sl
    a1de:	4433      	add	r3, r6
    a1e0:	f893 a800 	ldrb.w	sl, [r3, #2048]	; 0x800
    a1e4:	f801 ab01 	strb.w	sl, [r1], #1
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    a1e8:	f883 0800 	strb.w	r0, [r3, #2048]	; 0x800
	for (uint32_t i = 0; i<length; i++){
    a1ec:	4549      	cmp	r1, r9
    a1ee:	d1ef      	bne.n	a1d0 <grid_port_receive_decode+0x34>
	message = &buffer[0];
    a1f0:	46aa      	mov	sl, r5
    a1f2:	eb08 0e02 	add.w	lr, r8, r2
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    a1f6:	4caf      	ldr	r4, [pc, #700]	; (a4b4 <grid_port_receive_decode+0x318>)
    a1f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    a1fc:	2100      	movs	r1, #0
    a1fe:	fba4 c302 	umull	ip, r3, r4, r2
    a202:	09db      	lsrs	r3, r3, #7
    a204:	fb00 2313 	mls	r3, r0, r3, r2
    a208:	4433      	add	r3, r6
    a20a:	f883 1800 	strb.w	r1, [r3, #2048]	; 0x800
    a20e:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    a210:	4572      	cmp	r2, lr
    a212:	d1f4      	bne.n	a1fe <grid_port_receive_decode+0x62>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    a214:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    a216:	4442      	add	r2, r8
    a218:	4ba6      	ldr	r3, [pc, #664]	; (a4b4 <grid_port_receive_decode+0x318>)
    a21a:	fba3 1302 	umull	r1, r3, r3, r2
    a21e:	09db      	lsrs	r3, r3, #7
    a220:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    a224:	fb01 2313 	mls	r3, r1, r3, r2
    a228:	62f3      	str	r3, [r6, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    a22a:	62b3      	str	r3, [r6, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    a22c:	2300      	movs	r3, #0
    a22e:	6273      	str	r3, [r6, #36]	; 0x24
 	for (uint32_t i = 1; i<length; i++){
    a230:	f1b8 0f01 	cmp.w	r8, #1
    a234:	f240 8209 	bls.w	a64a <grid_port_receive_decode+0x4ae>
    a238:	2401      	movs	r4, #1
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    a23a:	f8df b2e0 	ldr.w	fp, [pc, #736]	; a51c <grid_port_receive_decode+0x380>
    a23e:	f8df 929c 	ldr.w	r9, [pc, #668]	; a4dc <grid_port_receive_decode+0x340>
    a242:	e003      	b.n	a24c <grid_port_receive_decode+0xb0>
 	for (uint32_t i = 1; i<length; i++){
    a244:	3401      	adds	r4, #1
    a246:	45a0      	cmp	r8, r4
    a248:	f240 81ff 	bls.w	a64a <grid_port_receive_decode+0x4ae>
 		if (buffer[i] == GRID_MSG_START_OF_HEADING){
    a24c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    a250:	2b01      	cmp	r3, #1
    a252:	d1f7      	bne.n	a244 <grid_port_receive_decode+0xa8>
 			length -= i;
    a254:	eba8 0804 	sub.w	r8, r8, r4
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    a258:	4659      	mov	r1, fp
    a25a:	4897      	ldr	r0, [pc, #604]	; (a4b8 <grid_port_receive_decode+0x31c>)
    a25c:	47c8      	blx	r9
 			message = &buffer[i];
    a25e:	46aa      	mov	sl, r5
    a260:	e7f0      	b.n	a244 <grid_port_receive_decode+0xa8>
	if (message[0] == 1 && message [length-1] == 10){
    a262:	eb0a 0308 	add.w	r3, sl, r8
    a266:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    a26a:	2b0a      	cmp	r3, #10
    a26c:	f040 81f2 	bne.w	a654 <grid_port_receive_decode+0x4b8>
		checksum_received = grid_msg_checksum_read(message, length);
    a270:	4641      	mov	r1, r8
    a272:	4650      	mov	r0, sl
    a274:	4b91      	ldr	r3, [pc, #580]	; (a4bc <grid_port_receive_decode+0x320>)
    a276:	4798      	blx	r3
    a278:	4604      	mov	r4, r0
		checksum_calculated = grid_msg_checksum_calculate(message, length);
    a27a:	4641      	mov	r1, r8
    a27c:	4650      	mov	r0, sl
    a27e:	4b90      	ldr	r3, [pc, #576]	; (a4c0 <grid_port_receive_decode+0x324>)
    a280:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    a282:	4284      	cmp	r4, r0
    a284:	f040 81c4 	bne.w	a610 <grid_port_receive_decode+0x474>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    a288:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a28c:	2b0f      	cmp	r3, #15
    a28e:	f000 808b 	beq.w	a3a8 <grid_port_receive_decode+0x20c>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    a292:	2b0e      	cmp	r3, #14
    a294:	f040 81ae 	bne.w	a5f4 <grid_port_receive_decode+0x458>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    a298:	f89a 3002 	ldrb.w	r3, [sl, #2]
    a29c:	2b07      	cmp	r3, #7
    a29e:	f040 81e6 	bne.w	a66e <grid_port_receive_decode+0x4d2>
					struct grid_ui_report* stored_report = por->ping_report;
    a2a2:	6874      	ldr	r4, [r6, #4]
					local_stored = grid_sys_read_hex_string_value(&stored_report->payload[6], 2, error_flag);
    a2a4:	6860      	ldr	r0, [r4, #4]
    a2a6:	2200      	movs	r2, #0
    a2a8:	2102      	movs	r1, #2
    a2aa:	3006      	adds	r0, #6
    a2ac:	f8df 921c 	ldr.w	r9, [pc, #540]	; a4cc <grid_port_receive_decode+0x330>
    a2b0:	47c8      	blx	r9
    a2b2:	b2c5      	uxtb	r5, r0
					remote_stored = grid_sys_read_hex_string_value(&stored_report->payload[8], 2, error_flag);
    a2b4:	6860      	ldr	r0, [r4, #4]
    a2b6:	2200      	movs	r2, #0
    a2b8:	2102      	movs	r1, #2
    a2ba:	3008      	adds	r0, #8
    a2bc:	47c8      	blx	r9
    a2be:	b2c3      	uxtb	r3, r0
    a2c0:	60fb      	str	r3, [r7, #12]
					local_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    a2c2:	2200      	movs	r2, #0
    a2c4:	2102      	movs	r1, #2
    a2c6:	f10a 0008 	add.w	r0, sl, #8
    a2ca:	47c8      	blx	r9
    a2cc:	fa5f fb80 	uxtb.w	fp, r0
					remote_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    a2d0:	2200      	movs	r2, #0
    a2d2:	2102      	movs	r1, #2
    a2d4:	f10a 0006 	add.w	r0, sl, #6
    a2d8:	47c8      	blx	r9
    a2da:	60b8      	str	r0, [r7, #8]
    a2dc:	fa5f f980 	uxtb.w	r9, r0
					if (por->partner_status == 0){
    a2e0:	f241 0307 	movw	r3, #4103	; 0x1007
    a2e4:	5cf3      	ldrb	r3, [r6, r3]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	f040 8135 	bne.w	a556 <grid_port_receive_decode+0x3ba>
						if (local_stored == 255){ // I have no clue				
    a2ec:	2dff      	cmp	r5, #255	; 0xff
    a2ee:	f000 8119 	beq.w	a524 <grid_port_receive_decode+0x388>
						if (remote_received != remote_stored){
    a2f2:	68fb      	ldr	r3, [r7, #12]
    a2f4:	454b      	cmp	r3, r9
    a2f6:	d011      	beq.n	a31c <grid_port_receive_decode+0x180>
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, remote_received);
    a2f8:	6860      	ldr	r0, [r4, #4]
    a2fa:	7a3a      	ldrb	r2, [r7, #8]
    a2fc:	2102      	movs	r1, #2
    a2fe:	3008      	adds	r0, #8
    a300:	4b70      	ldr	r3, [pc, #448]	; (a4c4 <grid_port_receive_decode+0x328>)
    a302:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    a304:	f8d4 9004 	ldr.w	r9, [r4, #4]
    a308:	78a4      	ldrb	r4, [r4, #2]
    a30a:	4621      	mov	r1, r4
    a30c:	4648      	mov	r0, r9
    a30e:	4b6c      	ldr	r3, [pc, #432]	; (a4c0 <grid_port_receive_decode+0x324>)
    a310:	4798      	blx	r3
    a312:	4602      	mov	r2, r0
    a314:	4621      	mov	r1, r4
    a316:	4648      	mov	r0, r9
    a318:	4b6b      	ldr	r3, [pc, #428]	; (a4c8 <grid_port_receive_decode+0x32c>)
    a31a:	4798      	blx	r3
						if (local_stored != local_received){
    a31c:	455d      	cmp	r5, fp
    a31e:	f040 81a6 	bne.w	a66e <grid_port_receive_decode+0x4d2>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    a322:	f89a 3003 	ldrb.w	r3, [sl, #3]
    a326:	7b72      	ldrb	r2, [r6, #13]
    a328:	1a9b      	subs	r3, r3, r2
    a32a:	3306      	adds	r3, #6
    a32c:	425a      	negs	r2, r3
    a32e:	f003 0303 	and.w	r3, r3, #3
    a332:	f002 0203 	and.w	r2, r2, #3
    a336:	bf58      	it	pl
    a338:	4253      	negpl	r3, r2
    a33a:	f241 0204 	movw	r2, #4100	; 0x1004
    a33e:	54b3      	strb	r3, [r6, r2]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    a340:	f1a8 000a 	sub.w	r0, r8, #10
    a344:	2200      	movs	r2, #0
    a346:	2102      	movs	r1, #2
    a348:	4450      	add	r0, sl
    a34a:	4b60      	ldr	r3, [pc, #384]	; (a4cc <grid_port_receive_decode+0x330>)
    a34c:	4798      	blx	r3
    a34e:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
    a352:	6018      	str	r0, [r3, #0]
							por->partner_status = 1;
    a354:	2201      	movs	r2, #1
    a356:	f241 0307 	movw	r3, #4103	; 0x1007
    a35a:	54f2      	strb	r2, [r6, r3]
							grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    a35c:	4c5c      	ldr	r4, [pc, #368]	; (a4d0 <grid_port_receive_decode+0x334>)
    a35e:	4620      	mov	r0, r4
    a360:	4b5c      	ldr	r3, [pc, #368]	; (a4d4 <grid_port_receive_decode+0x338>)
    a362:	4798      	blx	r3
    a364:	b2c0      	uxtb	r0, r0
    a366:	7020      	strb	r0, [r4, #0]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    a368:	495b      	ldr	r1, [pc, #364]	; (a4d8 <grid_port_receive_decode+0x33c>)
    a36a:	4853      	ldr	r0, [pc, #332]	; (a4b8 <grid_port_receive_decode+0x31c>)
    a36c:	4b5b      	ldr	r3, [pc, #364]	; (a4dc <grid_port_receive_decode+0x340>)
    a36e:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    a370:	23c8      	movs	r3, #200	; 0xc8
    a372:	9301      	str	r3, [sp, #4]
    a374:	2302      	movs	r3, #2
    a376:	9300      	str	r3, [sp, #0]
    a378:	2300      	movs	r3, #0
    a37a:	22ff      	movs	r2, #255	; 0xff
    a37c:	4619      	mov	r1, r3
    a37e:	4620      	mov	r0, r4
    a380:	4d57      	ldr	r5, [pc, #348]	; (a4e0 <grid_port_receive_decode+0x344>)
    a382:	47a8      	blx	r5
							if (grid_sys_state.bank_select!=255){
    a384:	7a63      	ldrb	r3, [r4, #9]
    a386:	b2db      	uxtb	r3, r3
    a388:	2bff      	cmp	r3, #255	; 0xff
    a38a:	f000 8170 	beq.w	a66e <grid_port_receive_decode+0x4d2>
								grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    a38e:	7a62      	ldrb	r2, [r4, #9]
    a390:	4c54      	ldr	r4, [pc, #336]	; (a4e4 <grid_port_receive_decode+0x348>)
    a392:	6863      	ldr	r3, [r4, #4]
    a394:	6d58      	ldr	r0, [r3, #84]	; 0x54
    a396:	2102      	movs	r1, #2
    a398:	3007      	adds	r0, #7
    a39a:	4b4a      	ldr	r3, [pc, #296]	; (a4c4 <grid_port_receive_decode+0x328>)
    a39c:	4798      	blx	r3
								grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    a39e:	2105      	movs	r1, #5
    a3a0:	4620      	mov	r0, r4
    a3a2:	4b51      	ldr	r3, [pc, #324]	; (a4e8 <grid_port_receive_decode+0x34c>)
    a3a4:	4798      	blx	r3
    a3a6:	e162      	b.n	a66e <grid_port_receive_decode+0x4d2>
				uint8_t received_id  = grid_msg_get_id(message);;			
    a3a8:	4650      	mov	r0, sl
    a3aa:	4b50      	ldr	r3, [pc, #320]	; (a4ec <grid_port_receive_decode+0x350>)
    a3ac:	4798      	blx	r3
    a3ae:	4683      	mov	fp, r0
				uint8_t received_age = grid_msg_get_age(message);
    a3b0:	4650      	mov	r0, sl
    a3b2:	4b4f      	ldr	r3, [pc, #316]	; (a4f0 <grid_port_receive_decode+0x354>)
    a3b4:	4798      	blx	r3
    a3b6:	4681      	mov	r9, r0
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    a3b8:	4650      	mov	r0, sl
    a3ba:	4b4e      	ldr	r3, [pc, #312]	; (a4f4 <grid_port_receive_decode+0x358>)
    a3bc:	4798      	blx	r3
    a3be:	4605      	mov	r5, r0
    a3c0:	f1a0 047f 	sub.w	r4, r0, #127	; 0x7f
    a3c4:	b264      	sxtb	r4, r4
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    a3c6:	4650      	mov	r0, sl
    a3c8:	4b4b      	ldr	r3, [pc, #300]	; (a4f8 <grid_port_receive_decode+0x35c>)
    a3ca:	4798      	blx	r3
    a3cc:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    a3d0:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    a3d2:	f241 0204 	movw	r2, #4100	; 0x1004
    a3d6:	5cb2      	ldrb	r2, [r6, r2]
    a3d8:	b12a      	cbz	r2, a3e6 <grid_port_receive_decode+0x24a>
				else if(por->partner_fi == 1){ // 90 deg
    a3da:	2a01      	cmp	r2, #1
    a3dc:	d157      	bne.n	a48e <grid_port_receive_decode+0x2f2>
					rotated_dx  -= received_dy;
    a3de:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    a3e2:	4623      	mov	r3, r4
					rotated_dx  -= received_dy;
    a3e4:	b244      	sxtb	r4, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    a3e6:	f241 0205 	movw	r2, #4101	; 0x1005
    a3ea:	5cb5      	ldrb	r5, [r6, r2]
    a3ec:	357f      	adds	r5, #127	; 0x7f
    a3ee:	442c      	add	r4, r5
    a3f0:	b2e5      	uxtb	r5, r4
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    a3f2:	f241 0206 	movw	r2, #4102	; 0x1006
    a3f6:	5cb4      	ldrb	r4, [r6, r2]
    a3f8:	347f      	adds	r4, #127	; 0x7f
    a3fa:	441c      	add	r4, r3
    a3fc:	b2e4      	uxtb	r4, r4
				grid_msg_set_id(message, updated_id);
    a3fe:	4659      	mov	r1, fp
    a400:	4650      	mov	r0, sl
    a402:	4b3e      	ldr	r3, [pc, #248]	; (a4fc <grid_port_receive_decode+0x360>)
    a404:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    a406:	4629      	mov	r1, r5
    a408:	4650      	mov	r0, sl
    a40a:	4b3d      	ldr	r3, [pc, #244]	; (a500 <grid_port_receive_decode+0x364>)
    a40c:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    a40e:	4621      	mov	r1, r4
    a410:	4650      	mov	r0, sl
    a412:	4b3c      	ldr	r3, [pc, #240]	; (a504 <grid_port_receive_decode+0x368>)
    a414:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    a416:	4649      	mov	r1, r9
    a418:	4650      	mov	r0, sl
    a41a:	4b3b      	ldr	r3, [pc, #236]	; (a508 <grid_port_receive_decode+0x36c>)
    a41c:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    a41e:	eb05 250b 	add.w	r5, r5, fp, lsl #8
    a422:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    a426:	eb09 2404 	add.w	r4, r9, r4, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    a42a:	4621      	mov	r1, r4
    a42c:	4828      	ldr	r0, [pc, #160]	; (a4d0 <grid_port_receive_decode+0x334>)
    a42e:	4b37      	ldr	r3, [pc, #220]	; (a50c <grid_port_receive_decode+0x370>)
    a430:	4798      	blx	r3
    a432:	2800      	cmp	r0, #0
    a434:	f040 811b 	bne.w	a66e <grid_port_receive_decode+0x4d2>
					grid_msg_checksum_write(message, length, grid_msg_checksum_calculate(message, length));
    a438:	4641      	mov	r1, r8
    a43a:	4650      	mov	r0, sl
    a43c:	4b20      	ldr	r3, [pc, #128]	; (a4c0 <grid_port_receive_decode+0x324>)
    a43e:	4798      	blx	r3
    a440:	4602      	mov	r2, r0
    a442:	4641      	mov	r1, r8
    a444:	4650      	mov	r0, sl
    a446:	4b20      	ldr	r3, [pc, #128]	; (a4c8 <grid_port_receive_decode+0x32c>)
    a448:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    a44a:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
    a44e:	fa1f f188 	uxth.w	r1, r8
    a452:	4630      	mov	r0, r6
    a454:	4b2e      	ldr	r3, [pc, #184]	; (a510 <grid_port_receive_decode+0x374>)
    a456:	4798      	blx	r3
    a458:	2800      	cmp	r0, #0
    a45a:	f000 8108 	beq.w	a66e <grid_port_receive_decode+0x4d2>
						for (uint8_t i=0; i<length; i++){
    a45e:	f1b8 0f00 	cmp.w	r8, #0
    a462:	d00c      	beq.n	a47e <grid_port_receive_decode+0x2e2>
    a464:	2300      	movs	r3, #0
    a466:	461d      	mov	r5, r3
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    a468:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a520 <grid_port_receive_decode+0x384>
    a46c:	f81a 1003 	ldrb.w	r1, [sl, r3]
    a470:	4630      	mov	r0, r6
    a472:	47c8      	blx	r9
						for (uint8_t i=0; i<length; i++){
    a474:	3501      	adds	r5, #1
    a476:	b2ed      	uxtb	r5, r5
    a478:	462b      	mov	r3, r5
    a47a:	4545      	cmp	r5, r8
    a47c:	d3f6      	bcc.n	a46c <grid_port_receive_decode+0x2d0>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    a47e:	4630      	mov	r0, r6
    a480:	4b24      	ldr	r3, [pc, #144]	; (a514 <grid_port_receive_decode+0x378>)
    a482:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);										
    a484:	4621      	mov	r1, r4
    a486:	4812      	ldr	r0, [pc, #72]	; (a4d0 <grid_port_receive_decode+0x334>)
    a488:	4b23      	ldr	r3, [pc, #140]	; (a518 <grid_port_receive_decode+0x37c>)
    a48a:	4798      	blx	r3
    a48c:	e0ef      	b.n	a66e <grid_port_receive_decode+0x4d2>
				else if(por->partner_fi == 2){ // 180 deg
    a48e:	2a02      	cmp	r2, #2
    a490:	d106      	bne.n	a4a0 <grid_port_receive_decode+0x304>
					rotated_dx  -= received_dx;
    a492:	f1c5 047f 	rsb	r4, r5, #127	; 0x7f
    a496:	b264      	sxtb	r4, r4
					rotated_dy  -= received_dy;
    a498:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
    a49c:	b243      	sxtb	r3, r0
    a49e:	e7a2      	b.n	a3e6 <grid_port_receive_decode+0x24a>
				else if(por->partner_fi == 3){ // 270 deg
    a4a0:	2a03      	cmp	r2, #3
    a4a2:	d002      	beq.n	a4aa <grid_port_receive_decode+0x30e>
				int8_t rotated_dy = 0;
    a4a4:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    a4a6:	461c      	mov	r4, r3
    a4a8:	e79d      	b.n	a3e6 <grid_port_receive_decode+0x24a>
					rotated_dy  -= received_dx;
    a4aa:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
					rotated_dx  += received_dy;
    a4ae:	461c      	mov	r4, r3
					rotated_dy  -= received_dx;
    a4b0:	b26b      	sxtb	r3, r5
    a4b2:	e798      	b.n	a3e6 <grid_port_receive_decode+0x24a>
    a4b4:	10624dd3 	.word	0x10624dd3
    a4b8:	0000dde8 	.word	0x0000dde8
    a4bc:	00004101 	.word	0x00004101
    a4c0:	000040e5 	.word	0x000040e5
    a4c4:	00003e11 	.word	0x00003e11
    a4c8:	00004121 	.word	0x00004121
    a4cc:	00003dd1 	.word	0x00003dd1
    a4d0:	20003280 	.word	0x20003280
    a4d4:	00003d19 	.word	0x00003d19
    a4d8:	0000e748 	.word	0x0000e748
    a4dc:	0000ca41 	.word	0x0000ca41
    a4e0:	00003d7d 	.word	0x00003d7d
    a4e4:	20003270 	.word	0x20003270
    a4e8:	0000455d 	.word	0x0000455d
    a4ec:	00004135 	.word	0x00004135
    a4f0:	00004195 	.word	0x00004195
    a4f4:	00004155 	.word	0x00004155
    a4f8:	00004175 	.word	0x00004175
    a4fc:	000041b5 	.word	0x000041b5
    a500:	000041c9 	.word	0x000041c9
    a504:	000041dd 	.word	0x000041dd
    a508:	000041f1 	.word	0x000041f1
    a50c:	00004205 	.word	0x00004205
    a510:	0000158d 	.word	0x0000158d
    a514:	000015d9 	.word	0x000015d9
    a518:	0000422f 	.word	0x0000422f
    a51c:	0000e734 	.word	0x0000e734
    a520:	000015bd 	.word	0x000015bd
							uint8_t new_local = grid_sys_rtc_get_time(&grid_sys_state)%128;
    a524:	4854      	ldr	r0, [pc, #336]	; (a678 <grid_port_receive_decode+0x4dc>)
    a526:	4b55      	ldr	r3, [pc, #340]	; (a67c <grid_port_receive_decode+0x4e0>)
    a528:	4798      	blx	r3
    a52a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, new_local);
    a52e:	6860      	ldr	r0, [r4, #4]
    a530:	462a      	mov	r2, r5
    a532:	2102      	movs	r1, #2
    a534:	3006      	adds	r0, #6
    a536:	4b52      	ldr	r3, [pc, #328]	; (a680 <grid_port_receive_decode+0x4e4>)
    a538:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    a53a:	6863      	ldr	r3, [r4, #4]
    a53c:	78a2      	ldrb	r2, [r4, #2]
    a53e:	603a      	str	r2, [r7, #0]
    a540:	4611      	mov	r1, r2
    a542:	607b      	str	r3, [r7, #4]
    a544:	4618      	mov	r0, r3
    a546:	4b4f      	ldr	r3, [pc, #316]	; (a684 <grid_port_receive_decode+0x4e8>)
    a548:	4798      	blx	r3
    a54a:	4602      	mov	r2, r0
    a54c:	6839      	ldr	r1, [r7, #0]
    a54e:	6878      	ldr	r0, [r7, #4]
    a550:	4b4d      	ldr	r3, [pc, #308]	; (a688 <grid_port_receive_decode+0x4ec>)
    a552:	4798      	blx	r3
    a554:	e6cd      	b.n	a2f2 <grid_port_receive_decode+0x156>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    a556:	f89a 3003 	ldrb.w	r3, [sl, #3]
    a55a:	7b72      	ldrb	r2, [r6, #13]
    a55c:	1a9b      	subs	r3, r3, r2
    a55e:	3306      	adds	r3, #6
    a560:	425a      	negs	r2, r3
    a562:	f003 0303 	and.w	r3, r3, #3
    a566:	f002 0203 	and.w	r2, r2, #3
    a56a:	bf58      	it	pl
    a56c:	4253      	negpl	r3, r2
    a56e:	f241 0204 	movw	r2, #4100	; 0x1004
    a572:	5cb2      	ldrb	r2, [r6, r2]
    a574:	68f9      	ldr	r1, [r7, #12]
    a576:	455d      	cmp	r5, fp
    a578:	bf08      	it	eq
    a57a:	4549      	cmpeq	r1, r9
    a57c:	bf0c      	ite	eq
    a57e:	2501      	moveq	r5, #1
    a580:	2500      	movne	r5, #0
    a582:	4293      	cmp	r3, r2
    a584:	bf14      	ite	ne
    a586:	2500      	movne	r5, #0
    a588:	f005 0501 	andeq.w	r5, r5, #1
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    a58c:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
    a590:	f8d3 9000 	ldr.w	r9, [r3]
    a594:	f1a8 000a 	sub.w	r0, r8, #10
    a598:	2200      	movs	r2, #0
    a59a:	2102      	movs	r1, #2
    a59c:	4450      	add	r0, sl
    a59e:	4b3b      	ldr	r3, [pc, #236]	; (a68c <grid_port_receive_decode+0x4f0>)
    a5a0:	4798      	blx	r3
						if (validator == 1){
    a5a2:	4548      	cmp	r0, r9
    a5a4:	d101      	bne.n	a5aa <grid_port_receive_decode+0x40e>
    a5a6:	2d00      	cmp	r5, #0
    a5a8:	d161      	bne.n	a66e <grid_port_receive_decode+0x4d2>
							por->partner_status = 0;
    a5aa:	2200      	movs	r2, #0
    a5ac:	f241 0307 	movw	r3, #4103	; 0x1007
    a5b0:	54f2      	strb	r2, [r6, r3]
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    a5b2:	6860      	ldr	r0, [r4, #4]
    a5b4:	22ff      	movs	r2, #255	; 0xff
    a5b6:	2102      	movs	r1, #2
    a5b8:	3008      	adds	r0, #8
    a5ba:	4d31      	ldr	r5, [pc, #196]	; (a680 <grid_port_receive_decode+0x4e4>)
    a5bc:	47a8      	blx	r5
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    a5be:	6860      	ldr	r0, [r4, #4]
    a5c0:	22ff      	movs	r2, #255	; 0xff
    a5c2:	2102      	movs	r1, #2
    a5c4:	3006      	adds	r0, #6
    a5c6:	47a8      	blx	r5
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));														
    a5c8:	6865      	ldr	r5, [r4, #4]
    a5ca:	78a4      	ldrb	r4, [r4, #2]
    a5cc:	4621      	mov	r1, r4
    a5ce:	4628      	mov	r0, r5
    a5d0:	4b2c      	ldr	r3, [pc, #176]	; (a684 <grid_port_receive_decode+0x4e8>)
    a5d2:	4798      	blx	r3
    a5d4:	4602      	mov	r2, r0
    a5d6:	4621      	mov	r1, r4
    a5d8:	4628      	mov	r0, r5
    a5da:	4b2b      	ldr	r3, [pc, #172]	; (a688 <grid_port_receive_decode+0x4ec>)
    a5dc:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    a5de:	23c8      	movs	r3, #200	; 0xc8
    a5e0:	9301      	str	r3, [sp, #4]
    a5e2:	2302      	movs	r3, #2
    a5e4:	9300      	str	r3, [sp, #0]
    a5e6:	23ff      	movs	r3, #255	; 0xff
    a5e8:	461a      	mov	r2, r3
    a5ea:	4619      	mov	r1, r3
    a5ec:	4822      	ldr	r0, [pc, #136]	; (a678 <grid_port_receive_decode+0x4dc>)
    a5ee:	4c28      	ldr	r4, [pc, #160]	; (a690 <grid_port_receive_decode+0x4f4>)
    a5f0:	47a0      	blx	r4
    a5f2:	e03c      	b.n	a66e <grid_port_receive_decode+0x4d2>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    a5f4:	23c8      	movs	r3, #200	; 0xc8
    a5f6:	9301      	str	r3, [sp, #4]
    a5f8:	2302      	movs	r3, #2
    a5fa:	9300      	str	r3, [sp, #0]
    a5fc:	2300      	movs	r3, #0
    a5fe:	461a      	mov	r2, r3
    a600:	21ff      	movs	r1, #255	; 0xff
    a602:	481d      	ldr	r0, [pc, #116]	; (a678 <grid_port_receive_decode+0x4dc>)
    a604:	4c22      	ldr	r4, [pc, #136]	; (a690 <grid_port_receive_decode+0x4f4>)
    a606:	47a0      	blx	r4
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    a608:	4822      	ldr	r0, [pc, #136]	; (a694 <grid_port_receive_decode+0x4f8>)
    a60a:	4b23      	ldr	r3, [pc, #140]	; (a698 <grid_port_receive_decode+0x4fc>)
    a60c:	4798      	blx	r3
    a60e:	e02e      	b.n	a66e <grid_port_receive_decode+0x4d2>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    a610:	4822      	ldr	r0, [pc, #136]	; (a69c <grid_port_receive_decode+0x500>)
    a612:	4b21      	ldr	r3, [pc, #132]	; (a698 <grid_port_receive_decode+0x4fc>)
    a614:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    a616:	23c8      	movs	r3, #200	; 0xc8
    a618:	9301      	str	r3, [sp, #4]
    a61a:	2301      	movs	r3, #1
    a61c:	9300      	str	r3, [sp, #0]
    a61e:	23ff      	movs	r3, #255	; 0xff
    a620:	2200      	movs	r2, #0
    a622:	2114      	movs	r1, #20
    a624:	4814      	ldr	r0, [pc, #80]	; (a678 <grid_port_receive_decode+0x4dc>)
    a626:	4c1a      	ldr	r4, [pc, #104]	; (a690 <grid_port_receive_decode+0x4f4>)
    a628:	47a0      	blx	r4
    a62a:	e020      	b.n	a66e <grid_port_receive_decode+0x4d2>
	message = &buffer[0];
    a62c:	46aa      	mov	sl, r5
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    a62e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    a630:	4442      	add	r2, r8
    a632:	4b1b      	ldr	r3, [pc, #108]	; (a6a0 <grid_port_receive_decode+0x504>)
    a634:	fba3 1302 	umull	r1, r3, r3, r2
    a638:	09db      	lsrs	r3, r3, #7
    a63a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    a63e:	fb01 2313 	mls	r3, r1, r3, r2
    a642:	62c3      	str	r3, [r0, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    a644:	6283      	str	r3, [r0, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    a646:	2300      	movs	r3, #0
    a648:	6243      	str	r3, [r0, #36]	; 0x24
	if (message[0] == 1 && message [length-1] == 10){
    a64a:	f89a 3000 	ldrb.w	r3, [sl]
    a64e:	2b01      	cmp	r3, #1
    a650:	f43f ae07 	beq.w	a262 <grid_port_receive_decode+0xc6>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    a654:	23c8      	movs	r3, #200	; 0xc8
    a656:	9301      	str	r3, [sp, #4]
    a658:	2302      	movs	r3, #2
    a65a:	9300      	str	r3, [sp, #0]
    a65c:	2314      	movs	r3, #20
    a65e:	2200      	movs	r2, #0
    a660:	4611      	mov	r1, r2
    a662:	4805      	ldr	r0, [pc, #20]	; (a678 <grid_port_receive_decode+0x4dc>)
    a664:	4c0a      	ldr	r4, [pc, #40]	; (a690 <grid_port_receive_decode+0x4f4>)
    a666:	47a0      	blx	r4
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    a668:	480e      	ldr	r0, [pc, #56]	; (a6a4 <grid_port_receive_decode+0x508>)
    a66a:	4b0b      	ldr	r3, [pc, #44]	; (a698 <grid_port_receive_decode+0x4fc>)
    a66c:	4798      	blx	r3
}
    a66e:	3714      	adds	r7, #20
    a670:	46bd      	mov	sp, r7
    a672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a676:	bf00      	nop
    a678:	20003280 	.word	0x20003280
    a67c:	00003d19 	.word	0x00003d19
    a680:	00003e11 	.word	0x00003e11
    a684:	000040e5 	.word	0x000040e5
    a688:	00004121 	.word	0x00004121
    a68c:	00003dd1 	.word	0x00003dd1
    a690:	00003d7d 	.word	0x00003d7d
    a694:	0000e750 	.word	0x0000e750
    a698:	0000cb29 	.word	0x0000cb29
    a69c:	0000e788 	.word	0x0000e788
    a6a0:	10624dd3 	.word	0x10624dd3
    a6a4:	0000e7bc 	.word	0x0000e7bc

0000a6a8 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    a6a8:	b530      	push	{r4, r5, lr}
    a6aa:	b083      	sub	sp, #12
    a6ac:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    a6ae:	7f03      	ldrb	r3, [r0, #28]
    a6b0:	2b01      	cmp	r3, #1
    a6b2:	d013      	beq.n	a6dc <grid_port_receive_complete_task+0x34>
	grid_port_receive_task(por);	
    a6b4:	4620      	mov	r0, r4
    a6b6:	4b12      	ldr	r3, [pc, #72]	; (a700 <grid_port_receive_complete_task+0x58>)
    a6b8:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    a6ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a6bc:	b163      	cbz	r3, a6d8 <grid_port_receive_complete_task+0x30>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    a6be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a6c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a6c2:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    a6c4:	bf34      	ite	cc
    a6c6:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    a6c8:	f202 72d1 	addwcs	r2, r2, #2001	; 0x7d1
    a6cc:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    a6ce:	4620      	mov	r0, r4
    a6d0:	4b0c      	ldr	r3, [pc, #48]	; (a704 <grid_port_receive_complete_task+0x5c>)
    a6d2:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    a6d4:	2300      	movs	r3, #0
    a6d6:	6263      	str	r3, [r4, #36]	; 0x24
}
    a6d8:	b003      	add	sp, #12
    a6da:	bd30      	pop	{r4, r5, pc}
		por->usart_error_flag = 0;
    a6dc:	2300      	movs	r3, #0
    a6de:	7703      	strb	r3, [r0, #28]
		grid_port_reset_receiver(por);			
    a6e0:	4b09      	ldr	r3, [pc, #36]	; (a708 <grid_port_receive_complete_task+0x60>)
    a6e2:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    a6e4:	23c8      	movs	r3, #200	; 0xc8
    a6e6:	9301      	str	r3, [sp, #4]
    a6e8:	2302      	movs	r3, #2
    a6ea:	9300      	str	r3, [sp, #0]
    a6ec:	23ff      	movs	r3, #255	; 0xff
    a6ee:	461a      	mov	r2, r3
    a6f0:	4619      	mov	r1, r3
    a6f2:	4806      	ldr	r0, [pc, #24]	; (a70c <grid_port_receive_complete_task+0x64>)
    a6f4:	4d06      	ldr	r5, [pc, #24]	; (a710 <grid_port_receive_complete_task+0x68>)
    a6f6:	47a8      	blx	r5
		printf("{\"type\": \"ERROR\", \"data\": [\"Parity Error\"]}\r\n");
    a6f8:	4806      	ldr	r0, [pc, #24]	; (a714 <grid_port_receive_complete_task+0x6c>)
    a6fa:	4b07      	ldr	r3, [pc, #28]	; (a718 <grid_port_receive_complete_task+0x70>)
    a6fc:	4798      	blx	r3
    a6fe:	e7d9      	b.n	a6b4 <grid_port_receive_complete_task+0xc>
    a700:	00009fed 	.word	0x00009fed
    a704:	0000a19d 	.word	0x0000a19d
    a708:	00009f69 	.word	0x00009f69
    a70c:	20003280 	.word	0x20003280
    a710:	00003d7d 	.word	0x00003d7d
    a714:	0000e7e8 	.word	0x0000e7e8
    a718:	0000cb29 	.word	0x0000cb29

0000a71c <init_timer>:
#define RTC1SEC 16384

#define RTC1MS (RTC1SEC/1000)

void init_timer(void)
{
    a71c:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20;
    a71e:	4c18      	ldr	r4, [pc, #96]	; (a780 <init_timer+0x64>)
    a720:	f240 3333 	movw	r3, #819	; 0x333
    a724:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    a726:	4b17      	ldr	r3, [pc, #92]	; (a784 <init_timer+0x68>)
    a728:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    a72a:	2301      	movs	r3, #1
    a72c:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1SEC;
    a72e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a732:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    a734:	4a14      	ldr	r2, [pc, #80]	; (a788 <init_timer+0x6c>)
    a736:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    a738:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    a73c:	f240 6266 	movw	r2, #1638	; 0x666
    a740:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    a742:	4a12      	ldr	r2, [pc, #72]	; (a78c <init_timer+0x70>)
    a744:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    a746:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    a74a:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    a74c:	4a10      	ldr	r2, [pc, #64]	; (a790 <init_timer+0x74>)
    a74e:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    a750:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    a754:	4d0f      	ldr	r5, [pc, #60]	; (a794 <init_timer+0x78>)
    a756:	1d21      	adds	r1, r4, #4
    a758:	4628      	mov	r0, r5
    a75a:	4e0f      	ldr	r6, [pc, #60]	; (a798 <init_timer+0x7c>)
    a75c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    a75e:	f104 0118 	add.w	r1, r4, #24
    a762:	4628      	mov	r0, r5
    a764:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    a766:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a76a:	4628      	mov	r0, r5
    a76c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    a76e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    a772:	4628      	mov	r0, r5
    a774:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    a776:	4628      	mov	r0, r5
    a778:	4b08      	ldr	r3, [pc, #32]	; (a79c <init_timer+0x80>)
    a77a:	4798      	blx	r3
    a77c:	bd70      	pop	{r4, r5, r6, pc}
    a77e:	bf00      	nop
    a780:	20000d68 	.word	0x20000d68
    a784:	00009e59 	.word	0x00009e59
    a788:	00009e45 	.word	0x00009e45
    a78c:	00009e39 	.word	0x00009e39
    a790:	00009ebd 	.word	0x00009ebd
    a794:	20000f04 	.word	0x20000f04
    a798:	00005679 	.word	0x00005679
    a79c:	00005639 	.word	0x00005639

0000a7a0 <main>:
}



int main(void)
{
    a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7a4:	b097      	sub	sp, #92	; 0x5c

	atmel_start_init();	
    a7a6:	4b5f      	ldr	r3, [pc, #380]	; (a924 <main+0x184>)
    a7a8:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    a7aa:	4d5f      	ldr	r5, [pc, #380]	; (a928 <main+0x188>)
    a7ac:	495f      	ldr	r1, [pc, #380]	; (a92c <main+0x18c>)
    a7ae:	4628      	mov	r0, r5
    a7b0:	4c5f      	ldr	r4, [pc, #380]	; (a930 <main+0x190>)
    a7b2:	47a0      	blx	r4

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "D51 Init");
    a7b4:	495f      	ldr	r1, [pc, #380]	; (a934 <main+0x194>)
    a7b6:	4628      	mov	r0, r5
    a7b8:	47a0      	blx	r4
	grid_d51_init(); // Check User Row
    a7ba:	4b5f      	ldr	r3, [pc, #380]	; (a938 <main+0x198>)
    a7bc:	4798      	blx	r3


	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    a7be:	4b5f      	ldr	r3, [pc, #380]	; (a93c <main+0x19c>)
    a7c0:	4798      	blx	r3

	composite_device_start();
    a7c2:	4b5f      	ldr	r3, [pc, #380]	; (a940 <main+0x1a0>)
    a7c4:	4798      	blx	r3

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    a7c6:	495f      	ldr	r1, [pc, #380]	; (a944 <main+0x1a4>)
    a7c8:	4628      	mov	r0, r5
    a7ca:	47a0      	blx	r4
		
	grid_module_common_init();
    a7cc:	4b5e      	ldr	r3, [pc, #376]	; (a948 <main+0x1a8>)
    a7ce:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    a7d0:	495e      	ldr	r1, [pc, #376]	; (a94c <main+0x1ac>)
    a7d2:	4628      	mov	r0, r5
    a7d4:	47a0      	blx	r4

	init_timer();
    a7d6:	4b5e      	ldr	r3, [pc, #376]	; (a950 <main+0x1b0>)
    a7d8:	4798      	blx	r3
	uint32_t loopfast = 0;
	uint32_t loopwarp = 0;
	
	uint8_t usb_init_variable = 0;
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Entering Main Loop");
    a7da:	495e      	ldr	r1, [pc, #376]	; (a954 <main+0x1b4>)
    a7dc:	4628      	mov	r0, r5
    a7de:	47a0      	blx	r4
	uint8_t usb_init_variable = 0;
    a7e0:	2300      	movs	r3, #0
    a7e2:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t loopwarp = 0;
    a7e4:	9304      	str	r3, [sp, #16]
	uint32_t loopfast = 0;
    a7e6:	9307      	str	r3, [sp, #28]
	uint32_t loopslow = 0;
    a7e8:	9306      	str	r3, [sp, #24]
	uint32_t loopcounter = 0;
    a7ea:	9303      	str	r3, [sp, #12]
	mod->current_task = next_task;
    a7ec:	f8df a1b8 	ldr.w	sl, [pc, #440]	; a9a8 <main+0x208>
    a7f0:	f04f 0301 	mov.w	r3, #1
    a7f4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
		
		if (scheduler_report_flag){
			
			scheduler_report_flag=0;
    a7f8:	2400      	movs	r4, #0
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a7fa:	f8df b1b0 	ldr.w	fp, [pc, #432]	; a9ac <main+0x20c>
    a7fe:	e0e0      	b.n	a9c2 <main+0x222>
			if (usb_d_get_frame_num() == 0){
    a800:	4b55      	ldr	r3, [pc, #340]	; (a958 <main+0x1b8>)
    a802:	4798      	blx	r3
    a804:	2800      	cmp	r0, #0
    a806:	f000 80e4 	beq.w	a9d2 <main+0x232>
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    a80a:	4954      	ldr	r1, [pc, #336]	; (a95c <main+0x1bc>)
    a80c:	4846      	ldr	r0, [pc, #280]	; (a928 <main+0x188>)
    a80e:	4b48      	ldr	r3, [pc, #288]	; (a930 <main+0x190>)
    a810:	4798      	blx	r3
				grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    a812:	4b53      	ldr	r3, [pc, #332]	; (a960 <main+0x1c0>)
    a814:	7a5b      	ldrb	r3, [r3, #9]
    a816:	3301      	adds	r3, #1
    a818:	f003 0201 	and.w	r2, r3, #1
    a81c:	4d51      	ldr	r5, [pc, #324]	; (a964 <main+0x1c4>)
    a81e:	686b      	ldr	r3, [r5, #4]
    a820:	6d58      	ldr	r0, [r3, #84]	; 0x54
    a822:	bf48      	it	mi
    a824:	4252      	negmi	r2, r2
    a826:	2102      	movs	r1, #2
    a828:	3007      	adds	r0, #7
    a82a:	4b4f      	ldr	r3, [pc, #316]	; (a968 <main+0x1c8>)
    a82c:	4798      	blx	r3
				grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    a82e:	2105      	movs	r1, #5
    a830:	4628      	mov	r0, r5
    a832:	4b4e      	ldr	r3, [pc, #312]	; (a96c <main+0x1cc>)
    a834:	4798      	blx	r3
				usb_init_variable = 1;
    a836:	2301      	movs	r3, #1
    a838:	930c      	str	r3, [sp, #48]	; 0x30
    a83a:	e0ca      	b.n	a9d2 <main+0x232>
			grid_sys_state.alert_state--;
    a83c:	4b48      	ldr	r3, [pc, #288]	; (a960 <main+0x1c0>)
    a83e:	889b      	ldrh	r3, [r3, #4]
    a840:	3b01      	subs	r3, #1
    a842:	b29b      	uxth	r3, r3
    a844:	4a46      	ldr	r2, [pc, #280]	; (a960 <main+0x1c0>)
    a846:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    a848:	4610      	mov	r0, r2
    a84a:	4b49      	ldr	r3, [pc, #292]	; (a970 <main+0x1d0>)
    a84c:	4798      	blx	r3
    a84e:	b9b0      	cbnz	r0, a87e <main+0xde>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    a850:	4843      	ldr	r0, [pc, #268]	; (a960 <main+0x1c0>)
    a852:	4b48      	ldr	r3, [pc, #288]	; (a974 <main+0x1d4>)
    a854:	4798      	blx	r3
    a856:	4606      	mov	r6, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a858:	f89b 3001 	ldrb.w	r3, [fp, #1]
    a85c:	2b00      	cmp	r3, #0
    a85e:	f000 8141 	beq.w	aae4 <main+0x344>
    a862:	4625      	mov	r5, r4
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    a864:	4f44      	ldr	r7, [pc, #272]	; (a978 <main+0x1d8>)
    a866:	4633      	mov	r3, r6
    a868:	4622      	mov	r2, r4
    a86a:	4629      	mov	r1, r5
    a86c:	4658      	mov	r0, fp
    a86e:	47b8      	blx	r7
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a870:	3501      	adds	r5, #1
    a872:	b2ed      	uxtb	r5, r5
    a874:	f89b 3001 	ldrb.w	r3, [fp, #1]
    a878:	42ab      	cmp	r3, r5
    a87a:	d8f4      	bhi.n	a866 <main+0xc6>
    a87c:	e132      	b.n	aae4 <main+0x344>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    a87e:	4838      	ldr	r0, [pc, #224]	; (a960 <main+0x1c0>)
    a880:	4b3e      	ldr	r3, [pc, #248]	; (a97c <main+0x1dc>)
    a882:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    a884:	4836      	ldr	r0, [pc, #216]	; (a960 <main+0x1c0>)
    a886:	4b3e      	ldr	r3, [pc, #248]	; (a980 <main+0x1e0>)
    a888:	4798      	blx	r3
    a88a:	9008      	str	r0, [sp, #32]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    a88c:	4834      	ldr	r0, [pc, #208]	; (a960 <main+0x1c0>)
    a88e:	4b3d      	ldr	r3, [pc, #244]	; (a984 <main+0x1e4>)
    a890:	4798      	blx	r3
    a892:	9009      	str	r0, [sp, #36]	; 0x24
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    a894:	4832      	ldr	r0, [pc, #200]	; (a960 <main+0x1c0>)
    a896:	4b3c      	ldr	r3, [pc, #240]	; (a988 <main+0x1e8>)
    a898:	4798      	blx	r3
    a89a:	900a      	str	r0, [sp, #40]	; 0x28
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a89c:	f04f 0900 	mov.w	r9, #0
    a8a0:	e033      	b.n	a90a <main+0x16a>
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    a8a2:	9401      	str	r4, [sp, #4]
    a8a4:	9400      	str	r4, [sp, #0]
    a8a6:	4623      	mov	r3, r4
    a8a8:	4622      	mov	r2, r4
    a8aa:	4629      	mov	r1, r5
    a8ac:	4658      	mov	r0, fp
    a8ae:	4e37      	ldr	r6, [pc, #220]	; (a98c <main+0x1ec>)
    a8b0:	47b0      	blx	r6
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    a8b2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; a9b0 <main+0x210>
    a8b6:	9808      	ldr	r0, [sp, #32]
    a8b8:	47c0      	blx	r8
    a8ba:	4f35      	ldr	r7, [pc, #212]	; (a990 <main+0x1f0>)
    a8bc:	2200      	movs	r2, #0
    a8be:	4b35      	ldr	r3, [pc, #212]	; (a994 <main+0x1f4>)
    a8c0:	47b8      	blx	r7
    a8c2:	4e35      	ldr	r6, [pc, #212]	; (a998 <main+0x1f8>)
    a8c4:	47b0      	blx	r6
    a8c6:	b2c2      	uxtb	r2, r0
    a8c8:	920b      	str	r2, [sp, #44]	; 0x2c
    a8ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    a8cc:	47c0      	blx	r8
    a8ce:	2200      	movs	r2, #0
    a8d0:	4b30      	ldr	r3, [pc, #192]	; (a994 <main+0x1f4>)
    a8d2:	47b8      	blx	r7
    a8d4:	47b0      	blx	r6
    a8d6:	b2c0      	uxtb	r0, r0
    a8d8:	9001      	str	r0, [sp, #4]
    a8da:	9809      	ldr	r0, [sp, #36]	; 0x24
    a8dc:	47c0      	blx	r8
    a8de:	2200      	movs	r2, #0
    a8e0:	4b2c      	ldr	r3, [pc, #176]	; (a994 <main+0x1f4>)
    a8e2:	47b8      	blx	r7
    a8e4:	47b0      	blx	r6
    a8e6:	b2c0      	uxtb	r0, r0
    a8e8:	9000      	str	r0, [sp, #0]
    a8ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8ec:	4622      	mov	r2, r4
    a8ee:	4629      	mov	r1, r5
    a8f0:	4658      	mov	r0, fp
    a8f2:	4e2a      	ldr	r6, [pc, #168]	; (a99c <main+0x1fc>)
    a8f4:	47b0      	blx	r6
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    a8f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a8f8:	9201      	str	r2, [sp, #4]
    a8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a8fc:	9200      	str	r2, [sp, #0]
    a8fe:	9b08      	ldr	r3, [sp, #32]
    a900:	4622      	mov	r2, r4
    a902:	4629      	mov	r1, r5
    a904:	4658      	mov	r0, fp
    a906:	4d26      	ldr	r5, [pc, #152]	; (a9a0 <main+0x200>)
    a908:	47a8      	blx	r5
    a90a:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a90e:	4658      	mov	r0, fp
    a910:	4b24      	ldr	r3, [pc, #144]	; (a9a4 <main+0x204>)
    a912:	4798      	blx	r3
    a914:	f109 0901 	add.w	r9, r9, #1
    a918:	42a8      	cmp	r0, r5
    a91a:	d8c2      	bhi.n	a8a2 <main+0x102>
    a91c:	e798      	b.n	a850 <main+0xb0>
					if ((RTC1MS - elapsed)<loopwarp){				
						loopwarp-=(RTC1MS - elapsed);
						loopstart-=(RTC1MS - elapsed);
					}
					else{
						loopwarp-=loopwarp;
    a91e:	9404      	str	r4, [sp, #16]
    a920:	e107      	b.n	ab32 <main+0x392>
    a922:	bf00      	nop
    a924:	000002d1 	.word	0x000002d1
    a928:	0000dd68 	.word	0x0000dd68
    a92c:	0000e818 	.word	0x0000e818
    a930:	0000ca41 	.word	0x0000ca41
    a934:	0000e82c 	.word	0x0000e82c
    a938:	0000134d 	.word	0x0000134d
    a93c:	0000b6c5 	.word	0x0000b6c5
    a940:	0000c06d 	.word	0x0000c06d
    a944:	0000e838 	.word	0x0000e838
    a948:	00002795 	.word	0x00002795
    a94c:	0000e858 	.word	0x0000e858
    a950:	0000a71d 	.word	0x0000a71d
    a954:	0000e870 	.word	0x0000e870
    a958:	00005eb5 	.word	0x00005eb5
    a95c:	0000e884 	.word	0x0000e884
    a960:	20003280 	.word	0x20003280
    a964:	20003270 	.word	0x20003270
    a968:	00003e11 	.word	0x00003e11
    a96c:	0000455d 	.word	0x0000455d
    a970:	00003d2b 	.word	0x00003d2b
    a974:	00003d35 	.word	0x00003d35
    a978:	000022ff 	.word	0x000022ff
    a97c:	00003d2f 	.word	0x00003d2f
    a980:	00003d9b 	.word	0x00003d9b
    a984:	00003d9f 	.word	0x00003d9f
    a988:	00003da3 	.word	0x00003da3
    a98c:	00002223 	.word	0x00002223
    a990:	0000c405 	.word	0x0000c405
    a994:	3fe00000 	.word	0x3fe00000
    a998:	0000c829 	.word	0x0000c829
    a99c:	0000226b 	.word	0x0000226b
    a9a0:	000022b5 	.word	0x000022b5
    a9a4:	000021e1 	.word	0x000021e1
    a9a8:	20007d20 	.word	0x20007d20
    a9ac:	200077d4 	.word	0x200077d4
    a9b0:	0000c339 	.word	0x0000c339
				}
			}
			
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
					
				delay_us(1);			
    a9b4:	2001      	movs	r0, #1
    a9b6:	47b0      	blx	r6
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    a9b8:	4639      	mov	r1, r7
    a9ba:	4865      	ldr	r0, [pc, #404]	; (ab50 <main+0x3b0>)
    a9bc:	47a8      	blx	r5
    a9be:	280f      	cmp	r0, #15
    a9c0:	d9f8      	bls.n	a9b4 <main+0x214>
	mod->current_task = next_task;
    a9c2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a9c6:	f88a 3001 	strb.w	r3, [sl, #1]
		if (usb_init_variable == 0){
    a9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a9cc:	2b00      	cmp	r3, #0
    a9ce:	f43f af17 	beq.w	a800 <main+0x60>
		loopcounter++;
    a9d2:	9b03      	ldr	r3, [sp, #12]
    a9d4:	3301      	adds	r3, #1
    a9d6:	9303      	str	r3, [sp, #12]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    a9d8:	485d      	ldr	r0, [pc, #372]	; (ab50 <main+0x3b0>)
    a9da:	4b5e      	ldr	r3, [pc, #376]	; (ab54 <main+0x3b4>)
    a9dc:	4798      	blx	r3
    a9de:	9005      	str	r0, [sp, #20]
		if (scheduler_report_flag){
    a9e0:	4b5d      	ldr	r3, [pc, #372]	; (ab58 <main+0x3b8>)
    a9e2:	781b      	ldrb	r3, [r3, #0]
    a9e4:	2b00      	cmp	r3, #0
    a9e6:	d037      	beq.n	aa58 <main+0x2b8>
			scheduler_report_flag=0;
    a9e8:	4b5b      	ldr	r3, [pc, #364]	; (ab58 <main+0x3b8>)
    a9ea:	701c      	strb	r4, [r3, #0]
			uint32_t task_val[GRID_TASK_NUMBER] = {0};
    a9ec:	2220      	movs	r2, #32
    a9ee:	4621      	mov	r1, r4
    a9f0:	a80e      	add	r0, sp, #56	; 0x38
    a9f2:	4b5a      	ldr	r3, [pc, #360]	; (ab5c <main+0x3bc>)
    a9f4:	4798      	blx	r3
    a9f6:	4b5a      	ldr	r3, [pc, #360]	; (ab60 <main+0x3c0>)
    a9f8:	aa0d      	add	r2, sp, #52	; 0x34
    a9fa:	f103 0020 	add.w	r0, r3, #32
	return 	mod->timer[task];
    a9fe:	f853 1b04 	ldr.w	r1, [r3], #4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    aa02:	f842 1f04 	str.w	r1, [r2, #4]!
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    aa06:	4298      	cmp	r0, r3
    aa08:	d1f9      	bne.n	a9fe <main+0x25e>
			grid_task_timer_reset(&grid_task_state);
    aa0a:	4650      	mov	r0, sl
    aa0c:	4b55      	ldr	r3, [pc, #340]	; (ab64 <main+0x3c4>)
    aa0e:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [");
    aa10:	4855      	ldr	r0, [pc, #340]	; (ab68 <main+0x3c8>)
    aa12:	4d56      	ldr	r5, [pc, #344]	; (ab6c <main+0x3cc>)
    aa14:	47a8      	blx	r5
				printf("\"%d\"", task_val[i]);
    aa16:	990e      	ldr	r1, [sp, #56]	; 0x38
    aa18:	4855      	ldr	r0, [pc, #340]	; (ab70 <main+0x3d0>)
    aa1a:	47a8      	blx	r5
    aa1c:	ad0f      	add	r5, sp, #60	; 0x3c
    aa1e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
					printf(", ");
    aa22:	f8df 8198 	ldr.w	r8, [pc, #408]	; abbc <main+0x41c>
    aa26:	4e51      	ldr	r6, [pc, #324]	; (ab6c <main+0x3cc>)
				printf("\"%d\"", task_val[i]);
    aa28:	4f51      	ldr	r7, [pc, #324]	; (ab70 <main+0x3d0>)
					printf(", ");
    aa2a:	4640      	mov	r0, r8
    aa2c:	47b0      	blx	r6
				printf("\"%d\"", task_val[i]);
    aa2e:	f855 1b04 	ldr.w	r1, [r5], #4
    aa32:	4638      	mov	r0, r7
    aa34:	47b0      	blx	r6
				if (i != GRID_TASK_NUMBER-1){
    aa36:	454d      	cmp	r5, r9
    aa38:	d1f7      	bne.n	aa2a <main+0x28a>
			printf("]}\r\n");
    aa3a:	484e      	ldr	r0, [pc, #312]	; (ab74 <main+0x3d4>)
    aa3c:	4b4e      	ldr	r3, [pc, #312]	; (ab78 <main+0x3d8>)
    aa3e:	4798      	blx	r3
			printf("{\"type\":\"LOOP\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", loopcounter, loopslow, loopfast, loopwarp);
    aa40:	9b04      	ldr	r3, [sp, #16]
    aa42:	9300      	str	r3, [sp, #0]
    aa44:	9b07      	ldr	r3, [sp, #28]
    aa46:	9a06      	ldr	r2, [sp, #24]
    aa48:	9903      	ldr	r1, [sp, #12]
    aa4a:	484c      	ldr	r0, [pc, #304]	; (ab7c <main+0x3dc>)
    aa4c:	4d47      	ldr	r5, [pc, #284]	; (ab6c <main+0x3cc>)
    aa4e:	47a8      	blx	r5
			loopwarp = 0;
    aa50:	9404      	str	r4, [sp, #16]
			loopfast = 0;
    aa52:	9407      	str	r4, [sp, #28]
			loopslow = 0;
    aa54:	9406      	str	r4, [sp, #24]
			loopcounter = 0;
    aa56:	9403      	str	r4, [sp, #12]
	mod->current_task = next_task;
    aa58:	2302      	movs	r3, #2
    aa5a:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    aa5e:	4848      	ldr	r0, [pc, #288]	; (ab80 <main+0x3e0>)
    aa60:	4d48      	ldr	r5, [pc, #288]	; (ab84 <main+0x3e4>)
    aa62:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    aa64:	f8df 9158 	ldr.w	r9, [pc, #344]	; abc0 <main+0x420>
    aa68:	4648      	mov	r0, r9
    aa6a:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    aa6c:	f8df 8154 	ldr.w	r8, [pc, #340]	; abc4 <main+0x424>
    aa70:	4640      	mov	r0, r8
    aa72:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    aa74:	4f44      	ldr	r7, [pc, #272]	; (ab88 <main+0x3e8>)
    aa76:	4638      	mov	r0, r7
    aa78:	47a8      	blx	r5
	mod->current_task = next_task;
    aa7a:	2303      	movs	r3, #3
    aa7c:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_ui(&GRID_PORT_U);
    aa80:	4e42      	ldr	r6, [pc, #264]	; (ab8c <main+0x3ec>)
    aa82:	4630      	mov	r0, r6
    aa84:	4b42      	ldr	r3, [pc, #264]	; (ab90 <main+0x3f0>)
    aa86:	4798      	blx	r3
	mod->current_task = next_task;
    aa88:	2304      	movs	r3, #4
    aa8a:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    aa8e:	2101      	movs	r1, #1
    aa90:	4630      	mov	r0, r6
    aa92:	4d40      	ldr	r5, [pc, #256]	; (ab94 <main+0x3f4>)
    aa94:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    aa96:	4621      	mov	r1, r4
    aa98:	4839      	ldr	r0, [pc, #228]	; (ab80 <main+0x3e0>)
    aa9a:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    aa9c:	4621      	mov	r1, r4
    aa9e:	4648      	mov	r0, r9
    aaa0:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);		
    aaa2:	4621      	mov	r1, r4
    aaa4:	4640      	mov	r0, r8
    aaa6:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);						
    aaa8:	4621      	mov	r1, r4
    aaaa:	4638      	mov	r0, r7
    aaac:	47a8      	blx	r5
	mod->current_task = next_task;
    aaae:	2305      	movs	r3, #5
    aab0:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_outbound_usart(&GRID_PORT_N);
    aab4:	4832      	ldr	r0, [pc, #200]	; (ab80 <main+0x3e0>)
    aab6:	4d38      	ldr	r5, [pc, #224]	; (ab98 <main+0x3f8>)
    aab8:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    aaba:	4648      	mov	r0, r9
    aabc:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    aabe:	4640      	mov	r0, r8
    aac0:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    aac2:	4638      	mov	r0, r7
    aac4:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    aac6:	4835      	ldr	r0, [pc, #212]	; (ab9c <main+0x3fc>)
    aac8:	4b35      	ldr	r3, [pc, #212]	; (aba0 <main+0x400>)
    aaca:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    aacc:	4630      	mov	r0, r6
    aace:	4b35      	ldr	r3, [pc, #212]	; (aba4 <main+0x404>)
    aad0:	4798      	blx	r3
	mod->current_task = next_task;
    aad2:	2307      	movs	r3, #7
    aad4:	f88a 3001 	strb.w	r3, [sl, #1]
		if (grid_sys_state.alert_state){
    aad8:	4b1d      	ldr	r3, [pc, #116]	; (ab50 <main+0x3b0>)
    aada:	889b      	ldrh	r3, [r3, #4]
    aadc:	b29b      	uxth	r3, r3
    aade:	2b00      	cmp	r3, #0
    aae0:	f47f aeac 	bne.w	a83c <main+0x9c>
	mod->current_task = next_task;
    aae4:	2306      	movs	r3, #6
    aae6:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_led_tick(&grid_led_state);
    aaea:	4658      	mov	r0, fp
    aaec:	4b2e      	ldr	r3, [pc, #184]	; (aba8 <main+0x408>)
    aaee:	4798      	blx	r3
			grid_led_render_all(&grid_led_state);	
    aaf0:	4658      	mov	r0, fp
    aaf2:	4b2e      	ldr	r3, [pc, #184]	; (abac <main+0x40c>)
    aaf4:	4798      	blx	r3
			grid_led_hardware_start_transfer(&grid_led_state);
    aaf6:	4658      	mov	r0, fp
    aaf8:	4b2d      	ldr	r3, [pc, #180]	; (abb0 <main+0x410>)
    aafa:	4798      	blx	r3
	mod->current_task = next_task;
    aafc:	f88a 4001 	strb.w	r4, [sl, #1]
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    ab00:	9d05      	ldr	r5, [sp, #20]
    ab02:	4629      	mov	r1, r5
    ab04:	4812      	ldr	r0, [pc, #72]	; (ab50 <main+0x3b0>)
    ab06:	4b2b      	ldr	r3, [pc, #172]	; (abb4 <main+0x414>)
    ab08:	4798      	blx	r3
		if (elapsed < RTC1MS){
    ab0a:	280f      	cmp	r0, #15
    ab0c:	d818      	bhi.n	ab40 <main+0x3a0>
			if (loopwarp>5){
    ab0e:	9904      	ldr	r1, [sp, #16]
    ab10:	2905      	cmp	r1, #5
    ab12:	d911      	bls.n	ab38 <main+0x398>
				if (RTC1MS - elapsed > 0){
    ab14:	2810      	cmp	r0, #16
    ab16:	d00f      	beq.n	ab38 <main+0x398>
					if ((RTC1MS - elapsed)<loopwarp){				
    ab18:	f1c0 0310 	rsb	r3, r0, #16
    ab1c:	4299      	cmp	r1, r3
    ab1e:	f67f aefe 	bls.w	a91e <main+0x17e>
    ab22:	f1a1 0310 	sub.w	r3, r1, #16
						loopwarp-=(RTC1MS - elapsed);
    ab26:	4403      	add	r3, r0
    ab28:	9304      	str	r3, [sp, #16]
    ab2a:	f1a5 0310 	sub.w	r3, r5, #16
						loopstart-=(RTC1MS - elapsed);
    ab2e:	18c3      	adds	r3, r0, r3
    ab30:	9305      	str	r3, [sp, #20]
					loopfast++;
    ab32:	9b07      	ldr	r3, [sp, #28]
    ab34:	3301      	adds	r3, #1
    ab36:	9307      	str	r3, [sp, #28]
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    ab38:	4d1e      	ldr	r5, [pc, #120]	; (abb4 <main+0x414>)
				delay_us(1);			
    ab3a:	4e1f      	ldr	r6, [pc, #124]	; (abb8 <main+0x418>)
    ab3c:	9f05      	ldr	r7, [sp, #20]
    ab3e:	e73b      	b.n	a9b8 <main+0x218>
    ab40:	9b04      	ldr	r3, [sp, #16]
    ab42:	3b10      	subs	r3, #16
			}	
					
		}
		else{
			loopwarp+= elapsed - RTC1MS;
    ab44:	18c3      	adds	r3, r0, r3
    ab46:	9304      	str	r3, [sp, #16]
			
			loopslow++;
    ab48:	9b06      	ldr	r3, [sp, #24]
    ab4a:	3301      	adds	r3, #1
    ab4c:	9306      	str	r3, [sp, #24]
    ab4e:	e738      	b.n	a9c2 <main+0x222>
    ab50:	20003280 	.word	0x20003280
    ab54:	00003d19 	.word	0x00003d19
    ab58:	20000d68 	.word	0x20000d68
    ab5c:	0000c8d7 	.word	0x0000c8d7
    ab60:	20007d24 	.word	0x20007d24
    ab64:	00009f59 	.word	0x00009f59
    ab68:	0000e8a0 	.word	0x0000e8a0
    ab6c:	0000ca41 	.word	0x0000ca41
    ab70:	0000e8bc 	.word	0x0000e8bc
    ab74:	0000e7e4 	.word	0x0000e7e4
    ab78:	0000cb29 	.word	0x0000cb29
    ab7c:	0000e8c8 	.word	0x0000e8c8
    ab80:	2000121c 	.word	0x2000121c
    ab84:	0000a6a9 	.word	0x0000a6a9
    ab88:	20003730 	.word	0x20003730
    ab8c:	20002268 	.word	0x20002268
    ab90:	00004571 	.word	0x00004571
    ab94:	00001919 	.word	0x00001919
    ab98:	000020ed 	.word	0x000020ed
    ab9c:	20005758 	.word	0x20005758
    aba0:	00001ae9 	.word	0x00001ae9
    aba4:	00001f8d 	.word	0x00001f8d
    aba8:	000021e5 	.word	0x000021e5
    abac:	00002569 	.word	0x00002569
    abb0:	00002769 	.word	0x00002769
    abb4:	00003d1d 	.word	0x00003d1d
    abb8:	00004ded 	.word	0x00004ded
    abbc:	0000e8c4 	.word	0x0000e8c4
    abc0:	20006760 	.word	0x20006760
    abc4:	2000474c 	.word	0x2000474c

0000abc8 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    abc8:	b940      	cbnz	r0, abdc <_read+0x14>
{
    abca:	b508      	push	{r3, lr}
    abcc:	460b      	mov	r3, r1
    abce:	4611      	mov	r1, r2
    abd0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    abd2:	4b04      	ldr	r3, [pc, #16]	; (abe4 <_read+0x1c>)
    abd4:	4798      	blx	r3
    abd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    abda:	bd08      	pop	{r3, pc}
		return -1;
    abdc:	f04f 30ff 	mov.w	r0, #4294967295
    abe0:	4770      	bx	lr
    abe2:	bf00      	nop
    abe4:	0000ac39 	.word	0x0000ac39

0000abe8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    abe8:	3801      	subs	r0, #1
    abea:	2802      	cmp	r0, #2
    abec:	d808      	bhi.n	ac00 <_write+0x18>
{
    abee:	b508      	push	{r3, lr}
    abf0:	460b      	mov	r3, r1
    abf2:	4611      	mov	r1, r2
    abf4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    abf6:	4b04      	ldr	r3, [pc, #16]	; (ac08 <_write+0x20>)
    abf8:	4798      	blx	r3
    abfa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    abfe:	bd08      	pop	{r3, pc}
		return -1;
    ac00:	f04f 30ff 	mov.w	r0, #4294967295
    ac04:	4770      	bx	lr
    ac06:	bf00      	nop
    ac08:	0000ac5d 	.word	0x0000ac5d

0000ac0c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    ac0c:	b570      	push	{r4, r5, r6, lr}
    ac0e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    ac10:	4d06      	ldr	r5, [pc, #24]	; (ac2c <stdio_io_init+0x20>)
    ac12:	682b      	ldr	r3, [r5, #0]
    ac14:	2100      	movs	r1, #0
    ac16:	6898      	ldr	r0, [r3, #8]
    ac18:	4c05      	ldr	r4, [pc, #20]	; (ac30 <stdio_io_init+0x24>)
    ac1a:	47a0      	blx	r4
	setbuf(stdin, NULL);
    ac1c:	682b      	ldr	r3, [r5, #0]
    ac1e:	2100      	movs	r1, #0
    ac20:	6858      	ldr	r0, [r3, #4]
    ac22:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    ac24:	4b03      	ldr	r3, [pc, #12]	; (ac34 <stdio_io_init+0x28>)
    ac26:	601e      	str	r6, [r3, #0]
    ac28:	bd70      	pop	{r4, r5, r6, pc}
    ac2a:	bf00      	nop
    ac2c:	20000558 	.word	0x20000558
    ac30:	0000cb59 	.word	0x0000cb59
    ac34:	20000dc0 	.word	0x20000dc0

0000ac38 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    ac38:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    ac3a:	4b06      	ldr	r3, [pc, #24]	; (ac54 <stdio_io_read+0x1c>)
    ac3c:	681b      	ldr	r3, [r3, #0]
    ac3e:	b133      	cbz	r3, ac4e <stdio_io_read+0x16>
    ac40:	460a      	mov	r2, r1
    ac42:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    ac44:	b292      	uxth	r2, r2
    ac46:	4618      	mov	r0, r3
    ac48:	4b03      	ldr	r3, [pc, #12]	; (ac58 <stdio_io_read+0x20>)
    ac4a:	4798      	blx	r3
    ac4c:	bd08      	pop	{r3, pc}
		return 0;
    ac4e:	2000      	movs	r0, #0
}
    ac50:	bd08      	pop	{r3, pc}
    ac52:	bf00      	nop
    ac54:	20000dc0 	.word	0x20000dc0
    ac58:	00004fc9 	.word	0x00004fc9

0000ac5c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    ac5c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    ac5e:	4b06      	ldr	r3, [pc, #24]	; (ac78 <stdio_io_write+0x1c>)
    ac60:	681b      	ldr	r3, [r3, #0]
    ac62:	b133      	cbz	r3, ac72 <stdio_io_write+0x16>
    ac64:	460a      	mov	r2, r1
    ac66:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    ac68:	b292      	uxth	r2, r2
    ac6a:	4618      	mov	r0, r3
    ac6c:	4b03      	ldr	r3, [pc, #12]	; (ac7c <stdio_io_write+0x20>)
    ac6e:	4798      	blx	r3
    ac70:	bd08      	pop	{r3, pc}
		return 0;
    ac72:	2000      	movs	r0, #0
}
    ac74:	bd08      	pop	{r3, pc}
    ac76:	bf00      	nop
    ac78:	20000dc0 	.word	0x20000dc0
    ac7c:	00004f99 	.word	0x00004f99

0000ac80 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    ac80:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    ac82:	4c04      	ldr	r4, [pc, #16]	; (ac94 <stdio_redirect_init+0x14>)
    ac84:	4620      	mov	r0, r4
    ac86:	4b04      	ldr	r3, [pc, #16]	; (ac98 <stdio_redirect_init+0x18>)
    ac88:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    ac8a:	4620      	mov	r0, r4
    ac8c:	4b03      	ldr	r3, [pc, #12]	; (ac9c <stdio_redirect_init+0x1c>)
    ac8e:	4798      	blx	r3
    ac90:	bd10      	pop	{r4, pc}
    ac92:	bf00      	nop
    ac94:	20000fbc 	.word	0x20000fbc
    ac98:	00005ba9 	.word	0x00005ba9
    ac9c:	0000ac0d 	.word	0x0000ac0d

0000aca0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aca2:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    aca4:	780b      	ldrb	r3, [r1, #0]
    aca6:	f3c3 1441 	ubfx	r4, r3, #5, #2
    acaa:	2c01      	cmp	r4, #1
    acac:	d15e      	bne.n	ad6c <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    acae:	888c      	ldrh	r4, [r1, #4]
    acb0:	4d35      	ldr	r5, [pc, #212]	; (ad88 <cdcdf_acm_req+0xe8>)
    acb2:	782d      	ldrb	r5, [r5, #0]
    acb4:	42a5      	cmp	r5, r4
    acb6:	d003      	beq.n	acc0 <cdcdf_acm_req+0x20>
    acb8:	4d33      	ldr	r5, [pc, #204]	; (ad88 <cdcdf_acm_req+0xe8>)
    acba:	786d      	ldrb	r5, [r5, #1]
    acbc:	42a5      	cmp	r5, r4
    acbe:	d158      	bne.n	ad72 <cdcdf_acm_req+0xd2>
    acc0:	4616      	mov	r6, r2
    acc2:	460c      	mov	r4, r1
    acc4:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    acc6:	f013 0f80 	tst.w	r3, #128	; 0x80
    acca:	d10c      	bne.n	ace6 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    accc:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    acce:	4b2f      	ldr	r3, [pc, #188]	; (ad8c <cdcdf_acm_req+0xec>)
    acd0:	4798      	blx	r3
    acd2:	4601      	mov	r1, r0
	switch (req->bRequest) {
    acd4:	7863      	ldrb	r3, [r4, #1]
    acd6:	2b20      	cmp	r3, #32
    acd8:	d013      	beq.n	ad02 <cdcdf_acm_req+0x62>
    acda:	2b22      	cmp	r3, #34	; 0x22
    acdc:	d032      	beq.n	ad44 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    acde:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    ace2:	b003      	add	sp, #12
    ace4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    ace6:	2a01      	cmp	r2, #1
    ace8:	d046      	beq.n	ad78 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    acea:	784b      	ldrb	r3, [r1, #1]
    acec:	2b21      	cmp	r3, #33	; 0x21
    acee:	d145      	bne.n	ad7c <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    acf0:	88cb      	ldrh	r3, [r1, #6]
    acf2:	2b07      	cmp	r3, #7
    acf4:	d145      	bne.n	ad82 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    acf6:	2300      	movs	r3, #0
    acf8:	2207      	movs	r2, #7
    acfa:	4925      	ldr	r1, [pc, #148]	; (ad90 <cdcdf_acm_req+0xf0>)
    acfc:	4c25      	ldr	r4, [pc, #148]	; (ad94 <cdcdf_acm_req+0xf4>)
    acfe:	47a0      	blx	r4
    ad00:	e7ef      	b.n	ace2 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ad02:	2f07      	cmp	r7, #7
    ad04:	d12b      	bne.n	ad5e <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    ad06:	b1be      	cbz	r6, ad38 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    ad08:	6800      	ldr	r0, [r0, #0]
    ad0a:	9000      	str	r0, [sp, #0]
    ad0c:	888a      	ldrh	r2, [r1, #4]
    ad0e:	798b      	ldrb	r3, [r1, #6]
    ad10:	f8ad 2004 	strh.w	r2, [sp, #4]
    ad14:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    ad18:	4b1b      	ldr	r3, [pc, #108]	; (ad88 <cdcdf_acm_req+0xe8>)
    ad1a:	691b      	ldr	r3, [r3, #16]
    ad1c:	b113      	cbz	r3, ad24 <cdcdf_acm_req+0x84>
    ad1e:	4668      	mov	r0, sp
    ad20:	4798      	blx	r3
    ad22:	b1f8      	cbz	r0, ad64 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    ad24:	4b18      	ldr	r3, [pc, #96]	; (ad88 <cdcdf_acm_req+0xe8>)
    ad26:	aa02      	add	r2, sp, #8
    ad28:	e912 0003 	ldmdb	r2, {r0, r1}
    ad2c:	6098      	str	r0, [r3, #8]
    ad2e:	8199      	strh	r1, [r3, #12]
    ad30:	0c09      	lsrs	r1, r1, #16
    ad32:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    ad34:	2000      	movs	r0, #0
    ad36:	e7d4      	b.n	ace2 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    ad38:	2300      	movs	r3, #0
    ad3a:	2207      	movs	r2, #7
    ad3c:	4628      	mov	r0, r5
    ad3e:	4c15      	ldr	r4, [pc, #84]	; (ad94 <cdcdf_acm_req+0xf4>)
    ad40:	47a0      	blx	r4
    ad42:	e7ce      	b.n	ace2 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    ad44:	2300      	movs	r3, #0
    ad46:	461a      	mov	r2, r3
    ad48:	4619      	mov	r1, r3
    ad4a:	4618      	mov	r0, r3
    ad4c:	4d11      	ldr	r5, [pc, #68]	; (ad94 <cdcdf_acm_req+0xf4>)
    ad4e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    ad50:	4b0d      	ldr	r3, [pc, #52]	; (ad88 <cdcdf_acm_req+0xe8>)
    ad52:	695b      	ldr	r3, [r3, #20]
    ad54:	b143      	cbz	r3, ad68 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    ad56:	8860      	ldrh	r0, [r4, #2]
    ad58:	4798      	blx	r3
		return ERR_NONE;
    ad5a:	2000      	movs	r0, #0
    ad5c:	e7c1      	b.n	ace2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    ad5e:	f04f 30ff 	mov.w	r0, #4294967295
    ad62:	e7be      	b.n	ace2 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    ad64:	2000      	movs	r0, #0
    ad66:	e7bc      	b.n	ace2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    ad68:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    ad6a:	e7ba      	b.n	ace2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    ad6c:	f06f 0009 	mvn.w	r0, #9
    ad70:	e7b7      	b.n	ace2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    ad72:	f06f 0009 	mvn.w	r0, #9
    ad76:	e7b4      	b.n	ace2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    ad78:	2000      	movs	r0, #0
    ad7a:	e7b2      	b.n	ace2 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    ad7c:	f06f 000c 	mvn.w	r0, #12
    ad80:	e7af      	b.n	ace2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    ad82:	f04f 30ff 	mov.w	r0, #4294967295
    ad86:	e7ac      	b.n	ace2 <cdcdf_acm_req+0x42>
    ad88:	20000dc4 	.word	0x20000dc4
    ad8c:	0000bde9 	.word	0x0000bde9
    ad90:	20000dcc 	.word	0x20000dcc
    ad94:	0000b8c5 	.word	0x0000b8c5

0000ad98 <cdcdf_acm_ctrl>:
{
    ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad9c:	b083      	sub	sp, #12
    ad9e:	4616      	mov	r6, r2
	switch (ctrl) {
    ada0:	2901      	cmp	r1, #1
    ada2:	d066      	beq.n	ae72 <cdcdf_acm_ctrl+0xda>
    ada4:	b141      	cbz	r1, adb8 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    ada6:	2902      	cmp	r1, #2
    ada8:	bf0c      	ite	eq
    adaa:	f06f 001a 	mvneq.w	r0, #26
    adae:	f06f 000c 	mvnne.w	r0, #12
}
    adb2:	b003      	add	sp, #12
    adb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    adb8:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    adbc:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    adbe:	2800      	cmp	r0, #0
    adc0:	f000 8085 	beq.w	aece <cdcdf_acm_ctrl+0x136>
    adc4:	f10a 3bff 	add.w	fp, sl, #4294967295
    adc8:	f10a 0301 	add.w	r3, sl, #1
    adcc:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    adce:	4f46      	ldr	r7, [pc, #280]	; (aee8 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    add0:	f8df 9124 	ldr.w	r9, [pc, #292]	; aef8 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    add4:	f8df 8124 	ldr.w	r8, [pc, #292]	; aefc <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    add8:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    adda:	7943      	ldrb	r3, [r0, #5]
    addc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    ade0:	2b02      	cmp	r3, #2
    ade2:	d002      	beq.n	adea <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    ade4:	f06f 0009 	mvn.w	r0, #9
    ade8:	e7e3      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
    adea:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    adee:	f89b 3000 	ldrb.w	r3, [fp]
    adf2:	429a      	cmp	r2, r3
    adf4:	d06e      	beq.n	aed4 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    adf6:	2bff      	cmp	r3, #255	; 0xff
    adf8:	d16f      	bne.n	aeda <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    adfa:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    adfe:	2205      	movs	r2, #5
    ae00:	6871      	ldr	r1, [r6, #4]
    ae02:	4b3a      	ldr	r3, [pc, #232]	; (aeec <cdcdf_acm_ctrl+0x154>)
    ae04:	4798      	blx	r3
		while (NULL != ep) {
    ae06:	4604      	mov	r4, r0
    ae08:	b1f8      	cbz	r0, ae4a <cdcdf_acm_ctrl+0xb2>
    ae0a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    ae0e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    ae10:	7963      	ldrb	r3, [r4, #5]
    ae12:	7922      	ldrb	r2, [r4, #4]
    ae14:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ae18:	b292      	uxth	r2, r2
    ae1a:	78e1      	ldrb	r1, [r4, #3]
    ae1c:	4628      	mov	r0, r5
    ae1e:	47b8      	blx	r7
    ae20:	2800      	cmp	r0, #0
    ae22:	d15d      	bne.n	aee0 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ae24:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    ae28:	bf14      	ite	ne
    ae2a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ae2e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    ae32:	4628      	mov	r0, r5
    ae34:	47c8      	blx	r9
			desc->sod = ep;
    ae36:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    ae38:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ae3a:	6871      	ldr	r1, [r6, #4]
    ae3c:	4420      	add	r0, r4
    ae3e:	47c0      	blx	r8
		while (NULL != ep) {
    ae40:	4604      	mov	r4, r0
    ae42:	2800      	cmp	r0, #0
    ae44:	d1e3      	bne.n	ae0e <cdcdf_acm_ctrl+0x76>
    ae46:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    ae4a:	6833      	ldr	r3, [r6, #0]
    ae4c:	7818      	ldrb	r0, [r3, #0]
    ae4e:	2204      	movs	r2, #4
    ae50:	6871      	ldr	r1, [r6, #4]
    ae52:	4418      	add	r0, r3
    ae54:	4b25      	ldr	r3, [pc, #148]	; (aeec <cdcdf_acm_ctrl+0x154>)
    ae56:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    ae58:	9b00      	ldr	r3, [sp, #0]
    ae5a:	459b      	cmp	fp, r3
    ae5c:	d004      	beq.n	ae68 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    ae5e:	2800      	cmp	r0, #0
    ae60:	d1ba      	bne.n	add8 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    ae62:	f06f 0009 	mvn.w	r0, #9
    ae66:	e7a4      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    ae68:	2201      	movs	r2, #1
    ae6a:	4b21      	ldr	r3, [pc, #132]	; (aef0 <cdcdf_acm_ctrl+0x158>)
    ae6c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ae6e:	2000      	movs	r0, #0
    ae70:	e79f      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    ae72:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    ae74:	b142      	cbz	r2, ae88 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ae76:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    ae78:	795b      	ldrb	r3, [r3, #5]
    ae7a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    ae7e:	2b02      	cmp	r3, #2
    ae80:	d002      	beq.n	ae88 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    ae82:	f06f 0009 	mvn.w	r0, #9
    ae86:	e794      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    ae88:	7823      	ldrb	r3, [r4, #0]
    ae8a:	2bff      	cmp	r3, #255	; 0xff
    ae8c:	d008      	beq.n	aea0 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    ae8e:	23ff      	movs	r3, #255	; 0xff
    ae90:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    ae92:	78a0      	ldrb	r0, [r4, #2]
    ae94:	4298      	cmp	r0, r3
    ae96:	d003      	beq.n	aea0 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    ae98:	4b16      	ldr	r3, [pc, #88]	; (aef4 <cdcdf_acm_ctrl+0x15c>)
    ae9a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    ae9c:	23ff      	movs	r3, #255	; 0xff
    ae9e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    aea0:	7863      	ldrb	r3, [r4, #1]
    aea2:	2bff      	cmp	r3, #255	; 0xff
    aea4:	d008      	beq.n	aeb8 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    aea6:	23ff      	movs	r3, #255	; 0xff
    aea8:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    aeaa:	78e0      	ldrb	r0, [r4, #3]
    aeac:	4298      	cmp	r0, r3
    aeae:	d003      	beq.n	aeb8 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    aeb0:	4b10      	ldr	r3, [pc, #64]	; (aef4 <cdcdf_acm_ctrl+0x15c>)
    aeb2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    aeb4:	23ff      	movs	r3, #255	; 0xff
    aeb6:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    aeb8:	7920      	ldrb	r0, [r4, #4]
    aeba:	28ff      	cmp	r0, #255	; 0xff
    aebc:	d003      	beq.n	aec6 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    aebe:	4b0d      	ldr	r3, [pc, #52]	; (aef4 <cdcdf_acm_ctrl+0x15c>)
    aec0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    aec2:	23ff      	movs	r3, #255	; 0xff
    aec4:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    aec6:	2000      	movs	r0, #0
    aec8:	4b09      	ldr	r3, [pc, #36]	; (aef0 <cdcdf_acm_ctrl+0x158>)
    aeca:	7158      	strb	r0, [r3, #5]
    aecc:	e771      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    aece:	f06f 0009 	mvn.w	r0, #9
    aed2:	e76e      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    aed4:	f06f 0011 	mvn.w	r0, #17
    aed8:	e76b      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    aeda:	f06f 001b 	mvn.w	r0, #27
    aede:	e768      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    aee0:	f06f 0013 	mvn.w	r0, #19
    aee4:	e765      	b.n	adb2 <cdcdf_acm_ctrl+0x1a>
    aee6:	bf00      	nop
    aee8:	00005ecd 	.word	0x00005ecd
    aeec:	0000be09 	.word	0x0000be09
    aef0:	20000dc4 	.word	0x20000dc4
    aef4:	00005f35 	.word	0x00005f35
    aef8:	00005f61 	.word	0x00005f61
    aefc:	0000be43 	.word	0x0000be43

0000af00 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    af00:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    af02:	4b0a      	ldr	r3, [pc, #40]	; (af2c <cdcdf_acm_init+0x2c>)
    af04:	4798      	blx	r3
    af06:	2801      	cmp	r0, #1
    af08:	d80c      	bhi.n	af24 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    af0a:	4809      	ldr	r0, [pc, #36]	; (af30 <cdcdf_acm_init+0x30>)
    af0c:	4b09      	ldr	r3, [pc, #36]	; (af34 <cdcdf_acm_init+0x34>)
    af0e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    af10:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    af12:	3018      	adds	r0, #24
    af14:	4b08      	ldr	r3, [pc, #32]	; (af38 <cdcdf_acm_init+0x38>)
    af16:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    af18:	4908      	ldr	r1, [pc, #32]	; (af3c <cdcdf_acm_init+0x3c>)
    af1a:	2001      	movs	r0, #1
    af1c:	4b08      	ldr	r3, [pc, #32]	; (af40 <cdcdf_acm_init+0x40>)
    af1e:	4798      	blx	r3
	return ERR_NONE;
    af20:	2000      	movs	r0, #0
    af22:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    af24:	f06f 0010 	mvn.w	r0, #16
}
    af28:	bd08      	pop	{r3, pc}
    af2a:	bf00      	nop
    af2c:	0000bdf5 	.word	0x0000bdf5
    af30:	20000dc4 	.word	0x20000dc4
    af34:	0000ad99 	.word	0x0000ad99
    af38:	0000bd95 	.word	0x0000bd95
    af3c:	20000398 	.word	0x20000398
    af40:	0000bd01 	.word	0x0000bd01

0000af44 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    af44:	4b07      	ldr	r3, [pc, #28]	; (af64 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    af46:	795b      	ldrb	r3, [r3, #5]
    af48:	b143      	cbz	r3, af5c <cdcdf_acm_write+0x18>
{
    af4a:	b510      	push	{r4, lr}
    af4c:	460a      	mov	r2, r1
    af4e:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    af50:	2301      	movs	r3, #1
    af52:	4804      	ldr	r0, [pc, #16]	; (af64 <cdcdf_acm_write+0x20>)
    af54:	78c0      	ldrb	r0, [r0, #3]
    af56:	4c04      	ldr	r4, [pc, #16]	; (af68 <cdcdf_acm_write+0x24>)
    af58:	47a0      	blx	r4
    af5a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    af5c:	f06f 0010 	mvn.w	r0, #16
    af60:	4770      	bx	lr
    af62:	bf00      	nop
    af64:	20000dc4 	.word	0x20000dc4
    af68:	0000b8c5 	.word	0x0000b8c5

0000af6c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    af6c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    af6e:	780b      	ldrb	r3, [r1, #0]
    af70:	2b81      	cmp	r3, #129	; 0x81
    af72:	d010      	beq.n	af96 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    af74:	f3c3 1341 	ubfx	r3, r3, #5, #2
    af78:	2b01      	cmp	r3, #1
    af7a:	d13f      	bne.n	affc <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    af7c:	888a      	ldrh	r2, [r1, #4]
    af7e:	4b22      	ldr	r3, [pc, #136]	; (b008 <hid_keyboard_req+0x9c>)
    af80:	7b1b      	ldrb	r3, [r3, #12]
    af82:	429a      	cmp	r2, r3
    af84:	d13d      	bne.n	b002 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    af86:	784b      	ldrb	r3, [r1, #1]
    af88:	2b03      	cmp	r3, #3
    af8a:	d028      	beq.n	afde <hid_keyboard_req+0x72>
    af8c:	2b0b      	cmp	r3, #11
    af8e:	d02c      	beq.n	afea <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    af90:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    af94:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    af96:	784b      	ldrb	r3, [r1, #1]
    af98:	2b06      	cmp	r3, #6
    af9a:	d002      	beq.n	afa2 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    af9c:	f06f 0009 	mvn.w	r0, #9
    afa0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    afa2:	888a      	ldrh	r2, [r1, #4]
    afa4:	4b18      	ldr	r3, [pc, #96]	; (b008 <hid_keyboard_req+0x9c>)
    afa6:	7b1b      	ldrb	r3, [r3, #12]
    afa8:	429a      	cmp	r2, r3
    afaa:	d002      	beq.n	afb2 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    afac:	f06f 0009 	mvn.w	r0, #9
    afb0:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    afb2:	884b      	ldrh	r3, [r1, #2]
    afb4:	0a1b      	lsrs	r3, r3, #8
    afb6:	2b21      	cmp	r3, #33	; 0x21
    afb8:	d004      	beq.n	afc4 <hid_keyboard_req+0x58>
    afba:	2b22      	cmp	r3, #34	; 0x22
    afbc:	d009      	beq.n	afd2 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    afbe:	f06f 000c 	mvn.w	r0, #12
    afc2:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    afc4:	4b10      	ldr	r3, [pc, #64]	; (b008 <hid_keyboard_req+0x9c>)
    afc6:	6819      	ldr	r1, [r3, #0]
    afc8:	2300      	movs	r3, #0
    afca:	780a      	ldrb	r2, [r1, #0]
    afcc:	4c0f      	ldr	r4, [pc, #60]	; (b00c <hid_keyboard_req+0xa0>)
    afce:	47a0      	blx	r4
    afd0:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    afd2:	2300      	movs	r3, #0
    afd4:	223b      	movs	r2, #59	; 0x3b
    afd6:	490e      	ldr	r1, [pc, #56]	; (b010 <hid_keyboard_req+0xa4>)
    afd8:	4c0c      	ldr	r4, [pc, #48]	; (b00c <hid_keyboard_req+0xa0>)
    afda:	47a0      	blx	r4
    afdc:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    afde:	2300      	movs	r3, #0
    afe0:	2201      	movs	r2, #1
    afe2:	490c      	ldr	r1, [pc, #48]	; (b014 <hid_keyboard_req+0xa8>)
    afe4:	4c09      	ldr	r4, [pc, #36]	; (b00c <hid_keyboard_req+0xa0>)
    afe6:	47a0      	blx	r4
    afe8:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    afea:	884a      	ldrh	r2, [r1, #2]
    afec:	4b06      	ldr	r3, [pc, #24]	; (b008 <hid_keyboard_req+0x9c>)
    afee:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    aff0:	2300      	movs	r3, #0
    aff2:	461a      	mov	r2, r3
    aff4:	4619      	mov	r1, r3
    aff6:	4c05      	ldr	r4, [pc, #20]	; (b00c <hid_keyboard_req+0xa0>)
    aff8:	47a0      	blx	r4
    affa:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    affc:	f06f 0009 	mvn.w	r0, #9
    b000:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    b002:	f06f 0009 	mvn.w	r0, #9
    b006:	bd10      	pop	{r4, pc}
    b008:	20000de8 	.word	0x20000de8
    b00c:	0000b8c5 	.word	0x0000b8c5
    b010:	0000e8fc 	.word	0x0000e8fc
    b014:	20000df7 	.word	0x20000df7

0000b018 <hid_keyboard_ctrl>:
{
    b018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b01c:	4614      	mov	r4, r2
	switch (ctrl) {
    b01e:	2901      	cmp	r1, #1
    b020:	d050      	beq.n	b0c4 <hid_keyboard_ctrl+0xac>
    b022:	b141      	cbz	r1, b036 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    b024:	2902      	cmp	r1, #2
    b026:	bf0c      	ite	eq
    b028:	f06f 051a 	mvneq.w	r5, #26
    b02c:	f06f 050c 	mvnne.w	r5, #12
}
    b030:	4628      	mov	r0, r5
    b032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    b036:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    b03a:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    b03c:	2b00      	cmp	r3, #0
    b03e:	d05e      	beq.n	b0fe <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    b040:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    b042:	795b      	ldrb	r3, [r3, #5]
    b044:	2b03      	cmp	r3, #3
    b046:	d15d      	bne.n	b104 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    b048:	f898 300c 	ldrb.w	r3, [r8, #12]
    b04c:	429a      	cmp	r2, r3
    b04e:	d05c      	beq.n	b10a <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    b050:	2bff      	cmp	r3, #255	; 0xff
    b052:	d15d      	bne.n	b110 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    b054:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    b058:	6823      	ldr	r3, [r4, #0]
    b05a:	7818      	ldrb	r0, [r3, #0]
    b05c:	2221      	movs	r2, #33	; 0x21
    b05e:	6861      	ldr	r1, [r4, #4]
    b060:	4418      	add	r0, r3
    b062:	4b31      	ldr	r3, [pc, #196]	; (b128 <hid_keyboard_ctrl+0x110>)
    b064:	4798      	blx	r3
    b066:	4b31      	ldr	r3, [pc, #196]	; (b12c <hid_keyboard_ctrl+0x114>)
    b068:	6018      	str	r0, [r3, #0]
    b06a:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b06c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b134 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b070:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b138 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    b074:	f8df b0c4 	ldr.w	fp, [pc, #196]	; b13c <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b078:	6823      	ldr	r3, [r4, #0]
    b07a:	7818      	ldrb	r0, [r3, #0]
    b07c:	6861      	ldr	r1, [r4, #4]
    b07e:	4418      	add	r0, r3
    b080:	47c8      	blx	r9
		desc->sod = ep;
    b082:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    b084:	2800      	cmp	r0, #0
    b086:	d046      	beq.n	b116 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    b088:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    b08a:	7943      	ldrb	r3, [r0, #5]
    b08c:	7902      	ldrb	r2, [r0, #4]
    b08e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b092:	b292      	uxth	r2, r2
    b094:	78c1      	ldrb	r1, [r0, #3]
    b096:	4638      	mov	r0, r7
    b098:	47d0      	blx	sl
    b09a:	4605      	mov	r5, r0
    b09c:	2800      	cmp	r0, #0
    b09e:	d13d      	bne.n	b11c <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b0a0:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    b0a4:	bf14      	ite	ne
    b0a6:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b0aa:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    b0ae:	4638      	mov	r0, r7
    b0b0:	47d8      	blx	fp
    b0b2:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    b0b4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    b0b8:	d1de      	bne.n	b078 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    b0ba:	4b1c      	ldr	r3, [pc, #112]	; (b12c <hid_keyboard_ctrl+0x114>)
    b0bc:	2201      	movs	r2, #1
    b0be:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    b0c0:	741a      	strb	r2, [r3, #16]
    b0c2:	e7b5      	b.n	b030 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    b0c4:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    b0c6:	b11a      	cbz	r2, b0d0 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b0c8:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    b0ca:	795b      	ldrb	r3, [r3, #5]
    b0cc:	2b03      	cmp	r3, #3
    b0ce:	d128      	bne.n	b122 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    b0d0:	7b2b      	ldrb	r3, [r5, #12]
    b0d2:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    b0d4:	bf1c      	itt	ne
    b0d6:	23ff      	movne	r3, #255	; 0xff
    b0d8:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    b0da:	7b68      	ldrb	r0, [r5, #13]
    b0dc:	28ff      	cmp	r0, #255	; 0xff
    b0de:	d003      	beq.n	b0e8 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    b0e0:	4b13      	ldr	r3, [pc, #76]	; (b130 <hid_keyboard_ctrl+0x118>)
    b0e2:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    b0e4:	23ff      	movs	r3, #255	; 0xff
    b0e6:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    b0e8:	7ba8      	ldrb	r0, [r5, #14]
    b0ea:	28ff      	cmp	r0, #255	; 0xff
    b0ec:	d003      	beq.n	b0f6 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    b0ee:	4b10      	ldr	r3, [pc, #64]	; (b130 <hid_keyboard_ctrl+0x118>)
    b0f0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b0f2:	23ff      	movs	r3, #255	; 0xff
    b0f4:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    b0f6:	2500      	movs	r5, #0
    b0f8:	4b0c      	ldr	r3, [pc, #48]	; (b12c <hid_keyboard_ctrl+0x114>)
    b0fa:	741d      	strb	r5, [r3, #16]
    b0fc:	e798      	b.n	b030 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    b0fe:	f06f 0509 	mvn.w	r5, #9
    b102:	e795      	b.n	b030 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    b104:	f06f 0509 	mvn.w	r5, #9
    b108:	e792      	b.n	b030 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    b10a:	f06f 0511 	mvn.w	r5, #17
    b10e:	e78f      	b.n	b030 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    b110:	f06f 051b 	mvn.w	r5, #27
    b114:	e78c      	b.n	b030 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    b116:	f06f 0509 	mvn.w	r5, #9
    b11a:	e789      	b.n	b030 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    b11c:	f06f 0513 	mvn.w	r5, #19
    b120:	e786      	b.n	b030 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    b122:	f06f 0509 	mvn.w	r5, #9
    b126:	e783      	b.n	b030 <hid_keyboard_ctrl+0x18>
    b128:	0000be09 	.word	0x0000be09
    b12c:	20000de8 	.word	0x20000de8
    b130:	00005f35 	.word	0x00005f35
    b134:	0000be43 	.word	0x0000be43
    b138:	00005ecd 	.word	0x00005ecd
    b13c:	00005f61 	.word	0x00005f61

0000b140 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    b140:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    b142:	4b0a      	ldr	r3, [pc, #40]	; (b16c <hiddf_keyboard_init+0x2c>)
    b144:	4798      	blx	r3
    b146:	2801      	cmp	r0, #1
    b148:	d80c      	bhi.n	b164 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    b14a:	4809      	ldr	r0, [pc, #36]	; (b170 <hiddf_keyboard_init+0x30>)
    b14c:	4b09      	ldr	r3, [pc, #36]	; (b174 <hiddf_keyboard_init+0x34>)
    b14e:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    b150:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    b152:	3014      	adds	r0, #20
    b154:	4b08      	ldr	r3, [pc, #32]	; (b178 <hiddf_keyboard_init+0x38>)
    b156:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    b158:	4908      	ldr	r1, [pc, #32]	; (b17c <hiddf_keyboard_init+0x3c>)
    b15a:	2001      	movs	r0, #1
    b15c:	4b08      	ldr	r3, [pc, #32]	; (b180 <hiddf_keyboard_init+0x40>)
    b15e:	4798      	blx	r3
	return ERR_NONE;
    b160:	2000      	movs	r0, #0
    b162:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b164:	f06f 0010 	mvn.w	r0, #16
}
    b168:	bd08      	pop	{r3, pc}
    b16a:	bf00      	nop
    b16c:	0000bdf5 	.word	0x0000bdf5
    b170:	20000de8 	.word	0x20000de8
    b174:	0000b019 	.word	0x0000b019
    b178:	0000bd95 	.word	0x0000bd95
    b17c:	200003a0 	.word	0x200003a0
    b180:	0000bd01 	.word	0x0000bd01

0000b184 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    b184:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    b186:	4b26      	ldr	r3, [pc, #152]	; (b220 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    b188:	7c1b      	ldrb	r3, [r3, #16]
    b18a:	2b00      	cmp	r3, #0
    b18c:	d045      	beq.n	b21a <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    b18e:	4a24      	ldr	r2, [pc, #144]	; (b220 <hiddf_keyboard_keys_state_change+0x9c>)
    b190:	2300      	movs	r3, #0
    b192:	6053      	str	r3, [r2, #4]
    b194:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    b196:	b329      	cbz	r1, b1e4 <hiddf_keyboard_keys_state_change+0x60>
    b198:	4603      	mov	r3, r0
    b19a:	1e4d      	subs	r5, r1, #1
    b19c:	b2ed      	uxtb	r5, r5
    b19e:	3501      	adds	r5, #1
    b1a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    b1a4:	4405      	add	r5, r0
    b1a6:	2200      	movs	r2, #0
    b1a8:	e002      	b.n	b1b0 <hiddf_keyboard_keys_state_change+0x2c>
    b1aa:	3303      	adds	r3, #3
    b1ac:	42ab      	cmp	r3, r5
    b1ae:	d005      	beq.n	b1bc <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    b1b0:	785c      	ldrb	r4, [r3, #1]
    b1b2:	2c00      	cmp	r4, #0
    b1b4:	d0f9      	beq.n	b1aa <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    b1b6:	3201      	adds	r2, #1
    b1b8:	b2d2      	uxtb	r2, r2
    b1ba:	e7f6      	b.n	b1aa <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    b1bc:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    b1be:	b2d2      	uxtb	r2, r2
    b1c0:	2a06      	cmp	r2, #6
    b1c2:	d809      	bhi.n	b1d8 <hiddf_keyboard_keys_state_change+0x54>
    b1c4:	4603      	mov	r3, r0
    b1c6:	1e4a      	subs	r2, r1, #1
    b1c8:	b2d2      	uxtb	r2, r2
    b1ca:	3201      	adds	r2, #1
    b1cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b1d0:	4410      	add	r0, r2
    b1d2:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    b1d4:	4d12      	ldr	r5, [pc, #72]	; (b220 <hiddf_keyboard_keys_state_change+0x9c>)
    b1d6:	e015      	b.n	b204 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    b1d8:	4b11      	ldr	r3, [pc, #68]	; (b220 <hiddf_keyboard_keys_state_change+0x9c>)
    b1da:	f04f 32ff 	mov.w	r2, #4294967295
    b1de:	f8c3 2006 	str.w	r2, [r3, #6]
    b1e2:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    b1e4:	480e      	ldr	r0, [pc, #56]	; (b220 <hiddf_keyboard_keys_state_change+0x9c>)
    b1e6:	2300      	movs	r3, #0
    b1e8:	2208      	movs	r2, #8
    b1ea:	1d01      	adds	r1, r0, #4
    b1ec:	7b40      	ldrb	r0, [r0, #13]
    b1ee:	4c0d      	ldr	r4, [pc, #52]	; (b224 <hiddf_keyboard_keys_state_change+0xa0>)
    b1f0:	47a0      	blx	r4
    b1f2:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    b1f4:	1c62      	adds	r2, r4, #1
    b1f6:	7819      	ldrb	r1, [r3, #0]
    b1f8:	442c      	add	r4, r5
    b1fa:	7121      	strb	r1, [r4, #4]
    b1fc:	b2d4      	uxtb	r4, r2
    b1fe:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    b200:	4283      	cmp	r3, r0
    b202:	d0ef      	beq.n	b1e4 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    b204:	789a      	ldrb	r2, [r3, #2]
    b206:	2a01      	cmp	r2, #1
    b208:	d1f9      	bne.n	b1fe <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    b20a:	785a      	ldrb	r2, [r3, #1]
    b20c:	2a00      	cmp	r2, #0
    b20e:	d0f1      	beq.n	b1f4 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    b210:	792a      	ldrb	r2, [r5, #4]
    b212:	7819      	ldrb	r1, [r3, #0]
    b214:	430a      	orrs	r2, r1
    b216:	712a      	strb	r2, [r5, #4]
    b218:	e7f1      	b.n	b1fe <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    b21a:	f06f 0010 	mvn.w	r0, #16
}
    b21e:	bd38      	pop	{r3, r4, r5, pc}
    b220:	20000de8 	.word	0x20000de8
    b224:	0000b8c5 	.word	0x0000b8c5

0000b228 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b228:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    b22a:	780b      	ldrb	r3, [r1, #0]
    b22c:	2b81      	cmp	r3, #129	; 0x81
    b22e:	d010      	beq.n	b252 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b230:	f3c3 1341 	ubfx	r3, r3, #5, #2
    b234:	2b01      	cmp	r3, #1
    b236:	d13f      	bne.n	b2b8 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    b238:	888a      	ldrh	r2, [r1, #4]
    b23a:	4b22      	ldr	r3, [pc, #136]	; (b2c4 <hid_mouse_req+0x9c>)
    b23c:	7a1b      	ldrb	r3, [r3, #8]
    b23e:	429a      	cmp	r2, r3
    b240:	d13d      	bne.n	b2be <hid_mouse_req+0x96>
			switch (req->bRequest) {
    b242:	784b      	ldrb	r3, [r1, #1]
    b244:	2b03      	cmp	r3, #3
    b246:	d028      	beq.n	b29a <hid_mouse_req+0x72>
    b248:	2b0b      	cmp	r3, #11
    b24a:	d02c      	beq.n	b2a6 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    b24c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    b250:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    b252:	784b      	ldrb	r3, [r1, #1]
    b254:	2b06      	cmp	r3, #6
    b256:	d002      	beq.n	b25e <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    b258:	f06f 0009 	mvn.w	r0, #9
    b25c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    b25e:	888a      	ldrh	r2, [r1, #4]
    b260:	4b18      	ldr	r3, [pc, #96]	; (b2c4 <hid_mouse_req+0x9c>)
    b262:	7a1b      	ldrb	r3, [r3, #8]
    b264:	429a      	cmp	r2, r3
    b266:	d002      	beq.n	b26e <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    b268:	f06f 0009 	mvn.w	r0, #9
    b26c:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    b26e:	884b      	ldrh	r3, [r1, #2]
    b270:	0a1b      	lsrs	r3, r3, #8
    b272:	2b21      	cmp	r3, #33	; 0x21
    b274:	d004      	beq.n	b280 <hid_mouse_req+0x58>
    b276:	2b22      	cmp	r3, #34	; 0x22
    b278:	d009      	beq.n	b28e <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    b27a:	f06f 000c 	mvn.w	r0, #12
    b27e:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    b280:	4b10      	ldr	r3, [pc, #64]	; (b2c4 <hid_mouse_req+0x9c>)
    b282:	6819      	ldr	r1, [r3, #0]
    b284:	2300      	movs	r3, #0
    b286:	780a      	ldrb	r2, [r1, #0]
    b288:	4c0f      	ldr	r4, [pc, #60]	; (b2c8 <hid_mouse_req+0xa0>)
    b28a:	47a0      	blx	r4
    b28c:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    b28e:	2300      	movs	r3, #0
    b290:	2234      	movs	r2, #52	; 0x34
    b292:	490e      	ldr	r1, [pc, #56]	; (b2cc <hid_mouse_req+0xa4>)
    b294:	4c0c      	ldr	r4, [pc, #48]	; (b2c8 <hid_mouse_req+0xa0>)
    b296:	47a0      	blx	r4
    b298:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    b29a:	2300      	movs	r3, #0
    b29c:	2201      	movs	r2, #1
    b29e:	490c      	ldr	r1, [pc, #48]	; (b2d0 <hid_mouse_req+0xa8>)
    b2a0:	4c09      	ldr	r4, [pc, #36]	; (b2c8 <hid_mouse_req+0xa0>)
    b2a2:	47a0      	blx	r4
    b2a4:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    b2a6:	884a      	ldrh	r2, [r1, #2]
    b2a8:	4b06      	ldr	r3, [pc, #24]	; (b2c4 <hid_mouse_req+0x9c>)
    b2aa:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    b2ac:	2300      	movs	r3, #0
    b2ae:	461a      	mov	r2, r3
    b2b0:	4619      	mov	r1, r3
    b2b2:	4c05      	ldr	r4, [pc, #20]	; (b2c8 <hid_mouse_req+0xa0>)
    b2b4:	47a0      	blx	r4
    b2b6:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    b2b8:	f06f 0009 	mvn.w	r0, #9
    b2bc:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    b2be:	f06f 0009 	mvn.w	r0, #9
    b2c2:	bd10      	pop	{r4, pc}
    b2c4:	20000e08 	.word	0x20000e08
    b2c8:	0000b8c5 	.word	0x0000b8c5
    b2cc:	0000e938 	.word	0x0000e938
    b2d0:	20000e12 	.word	0x20000e12

0000b2d4 <hid_mouse_ctrl>:
{
    b2d4:	b570      	push	{r4, r5, r6, lr}
    b2d6:	4614      	mov	r4, r2
	switch (ctrl) {
    b2d8:	2901      	cmp	r1, #1
    b2da:	d040      	beq.n	b35e <hid_mouse_ctrl+0x8a>
    b2dc:	b139      	cbz	r1, b2ee <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    b2de:	2902      	cmp	r1, #2
    b2e0:	bf0c      	ite	eq
    b2e2:	f06f 041a 	mvneq.w	r4, #26
    b2e6:	f06f 040c 	mvnne.w	r4, #12
}
    b2ea:	4620      	mov	r0, r4
    b2ec:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    b2ee:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    b2f0:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    b2f2:	2b00      	cmp	r3, #0
    b2f4:	d049      	beq.n	b38a <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    b2f6:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    b2f8:	795b      	ldrb	r3, [r3, #5]
    b2fa:	2b03      	cmp	r3, #3
    b2fc:	d148      	bne.n	b390 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    b2fe:	7a2b      	ldrb	r3, [r5, #8]
    b300:	429a      	cmp	r2, r3
    b302:	d048      	beq.n	b396 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    b304:	2bff      	cmp	r3, #255	; 0xff
    b306:	d149      	bne.n	b39c <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    b308:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    b30a:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    b30c:	7818      	ldrb	r0, [r3, #0]
    b30e:	2221      	movs	r2, #33	; 0x21
    b310:	6861      	ldr	r1, [r4, #4]
    b312:	4418      	add	r0, r3
    b314:	4b29      	ldr	r3, [pc, #164]	; (b3bc <hid_mouse_ctrl+0xe8>)
    b316:	4798      	blx	r3
    b318:	4b29      	ldr	r3, [pc, #164]	; (b3c0 <hid_mouse_ctrl+0xec>)
    b31a:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b31c:	6823      	ldr	r3, [r4, #0]
    b31e:	7818      	ldrb	r0, [r3, #0]
    b320:	6861      	ldr	r1, [r4, #4]
    b322:	4418      	add	r0, r3
    b324:	4b27      	ldr	r3, [pc, #156]	; (b3c4 <hid_mouse_ctrl+0xf0>)
    b326:	4798      	blx	r3
	desc->sod = ep;
    b328:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    b32a:	2800      	cmp	r0, #0
    b32c:	d039      	beq.n	b3a2 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    b32e:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    b330:	7943      	ldrb	r3, [r0, #5]
    b332:	7902      	ldrb	r2, [r0, #4]
    b334:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b338:	b292      	uxth	r2, r2
    b33a:	78c1      	ldrb	r1, [r0, #3]
    b33c:	4630      	mov	r0, r6
    b33e:	4b22      	ldr	r3, [pc, #136]	; (b3c8 <hid_mouse_ctrl+0xf4>)
    b340:	4798      	blx	r3
    b342:	4604      	mov	r4, r0
    b344:	bb80      	cbnz	r0, b3a8 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b346:	f016 0f80 	tst.w	r6, #128	; 0x80
    b34a:	d030      	beq.n	b3ae <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    b34c:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    b34e:	4630      	mov	r0, r6
    b350:	4b1e      	ldr	r3, [pc, #120]	; (b3cc <hid_mouse_ctrl+0xf8>)
    b352:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    b354:	4b1a      	ldr	r3, [pc, #104]	; (b3c0 <hid_mouse_ctrl+0xec>)
    b356:	2201      	movs	r2, #1
    b358:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    b35a:	72da      	strb	r2, [r3, #11]
    b35c:	e7c5      	b.n	b2ea <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    b35e:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    b360:	b11a      	cbz	r2, b36a <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b362:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    b364:	795b      	ldrb	r3, [r3, #5]
    b366:	2b03      	cmp	r3, #3
    b368:	d124      	bne.n	b3b4 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    b36a:	7a2b      	ldrb	r3, [r5, #8]
    b36c:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    b36e:	bf1c      	itt	ne
    b370:	23ff      	movne	r3, #255	; 0xff
    b372:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    b374:	7a68      	ldrb	r0, [r5, #9]
    b376:	28ff      	cmp	r0, #255	; 0xff
    b378:	d003      	beq.n	b382 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    b37a:	4b15      	ldr	r3, [pc, #84]	; (b3d0 <hid_mouse_ctrl+0xfc>)
    b37c:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    b37e:	23ff      	movs	r3, #255	; 0xff
    b380:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    b382:	2400      	movs	r4, #0
    b384:	4b0e      	ldr	r3, [pc, #56]	; (b3c0 <hid_mouse_ctrl+0xec>)
    b386:	72dc      	strb	r4, [r3, #11]
    b388:	e7af      	b.n	b2ea <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    b38a:	f06f 0409 	mvn.w	r4, #9
    b38e:	e7ac      	b.n	b2ea <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    b390:	f06f 0409 	mvn.w	r4, #9
    b394:	e7a9      	b.n	b2ea <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    b396:	f06f 0411 	mvn.w	r4, #17
    b39a:	e7a6      	b.n	b2ea <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    b39c:	f06f 041b 	mvn.w	r4, #27
    b3a0:	e7a3      	b.n	b2ea <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    b3a2:	f06f 0409 	mvn.w	r4, #9
    b3a6:	e7a0      	b.n	b2ea <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    b3a8:	f06f 0413 	mvn.w	r4, #19
    b3ac:	e79d      	b.n	b2ea <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    b3ae:	f04f 34ff 	mov.w	r4, #4294967295
    b3b2:	e79a      	b.n	b2ea <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    b3b4:	f06f 0409 	mvn.w	r4, #9
    b3b8:	e797      	b.n	b2ea <hid_mouse_ctrl+0x16>
    b3ba:	bf00      	nop
    b3bc:	0000be09 	.word	0x0000be09
    b3c0:	20000e08 	.word	0x20000e08
    b3c4:	0000be43 	.word	0x0000be43
    b3c8:	00005ecd 	.word	0x00005ecd
    b3cc:	00005f61 	.word	0x00005f61
    b3d0:	00005f35 	.word	0x00005f35

0000b3d4 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    b3d4:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    b3d6:	4b0a      	ldr	r3, [pc, #40]	; (b400 <hiddf_mouse_init+0x2c>)
    b3d8:	4798      	blx	r3
    b3da:	2801      	cmp	r0, #1
    b3dc:	d80c      	bhi.n	b3f8 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    b3de:	4809      	ldr	r0, [pc, #36]	; (b404 <hiddf_mouse_init+0x30>)
    b3e0:	4b09      	ldr	r3, [pc, #36]	; (b408 <hiddf_mouse_init+0x34>)
    b3e2:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    b3e4:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    b3e6:	300c      	adds	r0, #12
    b3e8:	4b08      	ldr	r3, [pc, #32]	; (b40c <hiddf_mouse_init+0x38>)
    b3ea:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    b3ec:	4908      	ldr	r1, [pc, #32]	; (b410 <hiddf_mouse_init+0x3c>)
    b3ee:	2001      	movs	r0, #1
    b3f0:	4b08      	ldr	r3, [pc, #32]	; (b414 <hiddf_mouse_init+0x40>)
    b3f2:	4798      	blx	r3
	return ERR_NONE;
    b3f4:	2000      	movs	r0, #0
    b3f6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b3f8:	f06f 0010 	mvn.w	r0, #16
}
    b3fc:	bd08      	pop	{r3, pc}
    b3fe:	bf00      	nop
    b400:	0000bdf5 	.word	0x0000bdf5
    b404:	20000e08 	.word	0x20000e08
    b408:	0000b2d5 	.word	0x0000b2d5
    b40c:	0000bd95 	.word	0x0000bd95
    b410:	200003a8 	.word	0x200003a8
    b414:	0000bd01 	.word	0x0000bd01

0000b418 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    b418:	2200      	movs	r2, #0
    b41a:	4b0d      	ldr	r3, [pc, #52]	; (b450 <hiddf_mouse_move+0x38>)
    b41c:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    b41e:	2901      	cmp	r1, #1
    b420:	d00e      	beq.n	b440 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    b422:	2902      	cmp	r1, #2
    b424:	d00e      	beq.n	b444 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    b426:	2903      	cmp	r1, #3
    b428:	d10f      	bne.n	b44a <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    b42a:	4b09      	ldr	r3, [pc, #36]	; (b450 <hiddf_mouse_move+0x38>)
    b42c:	71d8      	strb	r0, [r3, #7]
{
    b42e:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    b430:	4807      	ldr	r0, [pc, #28]	; (b450 <hiddf_mouse_move+0x38>)
    b432:	2300      	movs	r3, #0
    b434:	2204      	movs	r2, #4
    b436:	1881      	adds	r1, r0, r2
    b438:	7a40      	ldrb	r0, [r0, #9]
    b43a:	4c06      	ldr	r4, [pc, #24]	; (b454 <hiddf_mouse_move+0x3c>)
    b43c:	47a0      	blx	r4
    b43e:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    b440:	7158      	strb	r0, [r3, #5]
    b442:	e7f4      	b.n	b42e <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    b444:	4b02      	ldr	r3, [pc, #8]	; (b450 <hiddf_mouse_move+0x38>)
    b446:	7198      	strb	r0, [r3, #6]
    b448:	e7f1      	b.n	b42e <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    b44a:	f06f 000c 	mvn.w	r0, #12
    b44e:	4770      	bx	lr
    b450:	20000e08 	.word	0x20000e08
    b454:	0000b8c5 	.word	0x0000b8c5

0000b458 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    b458:	4770      	bx	lr

0000b45a <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    b45a:	e7fe      	b.n	b45a <midi_cb_ep_bulk_out>

0000b45c <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b45c:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    b45e:	780b      	ldrb	r3, [r1, #0]
    b460:	2b81      	cmp	r3, #129	; 0x81
    b462:	d014      	beq.n	b48e <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b464:	f3c3 1341 	ubfx	r3, r3, #5, #2
    b468:	2b01      	cmp	r3, #1
    b46a:	d132      	bne.n	b4d2 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    b46c:	888b      	ldrh	r3, [r1, #4]
    b46e:	4a1c      	ldr	r2, [pc, #112]	; (b4e0 <audio_midi_req+0x84>)
    b470:	7912      	ldrb	r2, [r2, #4]
    b472:	429a      	cmp	r2, r3
    b474:	d003      	beq.n	b47e <audio_midi_req+0x22>
    b476:	4a1a      	ldr	r2, [pc, #104]	; (b4e0 <audio_midi_req+0x84>)
    b478:	7952      	ldrb	r2, [r2, #5]
    b47a:	429a      	cmp	r2, r3
    b47c:	d12c      	bne.n	b4d8 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    b47e:	784b      	ldrb	r3, [r1, #1]
    b480:	2b03      	cmp	r3, #3
    b482:	d017      	beq.n	b4b4 <audio_midi_req+0x58>
    b484:	2b0b      	cmp	r3, #11
    b486:	d01b      	beq.n	b4c0 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    b488:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    b48c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    b48e:	888b      	ldrh	r3, [r1, #4]
    b490:	4a13      	ldr	r2, [pc, #76]	; (b4e0 <audio_midi_req+0x84>)
    b492:	7912      	ldrb	r2, [r2, #4]
    b494:	429a      	cmp	r2, r3
    b496:	d006      	beq.n	b4a6 <audio_midi_req+0x4a>
    b498:	4a11      	ldr	r2, [pc, #68]	; (b4e0 <audio_midi_req+0x84>)
    b49a:	7952      	ldrb	r2, [r2, #5]
    b49c:	429a      	cmp	r2, r3
    b49e:	d002      	beq.n	b4a6 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    b4a0:	f06f 0009 	mvn.w	r0, #9
    b4a4:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    b4a6:	4b0e      	ldr	r3, [pc, #56]	; (b4e0 <audio_midi_req+0x84>)
    b4a8:	6819      	ldr	r1, [r3, #0]
    b4aa:	2300      	movs	r3, #0
    b4ac:	780a      	ldrb	r2, [r1, #0]
    b4ae:	4c0d      	ldr	r4, [pc, #52]	; (b4e4 <audio_midi_req+0x88>)
    b4b0:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    b4b2:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    b4b4:	2300      	movs	r3, #0
    b4b6:	2201      	movs	r2, #1
    b4b8:	490b      	ldr	r1, [pc, #44]	; (b4e8 <audio_midi_req+0x8c>)
    b4ba:	4c0a      	ldr	r4, [pc, #40]	; (b4e4 <audio_midi_req+0x88>)
    b4bc:	47a0      	blx	r4
    b4be:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    b4c0:	884a      	ldrh	r2, [r1, #2]
    b4c2:	4b07      	ldr	r3, [pc, #28]	; (b4e0 <audio_midi_req+0x84>)
    b4c4:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    b4c6:	2300      	movs	r3, #0
    b4c8:	461a      	mov	r2, r3
    b4ca:	4619      	mov	r1, r3
    b4cc:	4c05      	ldr	r4, [pc, #20]	; (b4e4 <audio_midi_req+0x88>)
    b4ce:	47a0      	blx	r4
    b4d0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    b4d2:	f06f 0009 	mvn.w	r0, #9
    b4d6:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    b4d8:	f06f 0009 	mvn.w	r0, #9
    b4dc:	bd10      	pop	{r4, pc}
    b4de:	bf00      	nop
    b4e0:	20000e20 	.word	0x20000e20
    b4e4:	0000b8c5 	.word	0x0000b8c5
    b4e8:	20000e28 	.word	0x20000e28

0000b4ec <audio_midi_ctrl>:
{
    b4ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b4f0:	b083      	sub	sp, #12
    b4f2:	4615      	mov	r5, r2
	switch (ctrl) {
    b4f4:	2901      	cmp	r1, #1
    b4f6:	f000 8092 	beq.w	b61e <audio_midi_ctrl+0x132>
    b4fa:	b141      	cbz	r1, b50e <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    b4fc:	2902      	cmp	r1, #2
    b4fe:	bf0c      	ite	eq
    b500:	f06f 001a 	mvneq.w	r0, #26
    b504:	f06f 000c 	mvnne.w	r0, #12
}
    b508:	b003      	add	sp, #12
    b50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    b50e:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    b512:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    b514:	2800      	cmp	r0, #0
    b516:	f000 80a9 	beq.w	b66c <audio_midi_ctrl+0x180>
    b51a:	f109 0604 	add.w	r6, r9, #4
    b51e:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b520:	f04f 0804 	mov.w	r8, #4
    b524:	4f5d      	ldr	r7, [pc, #372]	; (b69c <audio_midi_ctrl+0x1b0>)
    b526:	e019      	b.n	b55c <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b528:	f816 3b01 	ldrb.w	r3, [r6], #1
    b52c:	429a      	cmp	r2, r3
    b52e:	f000 80a3 	beq.w	b678 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b532:	2bff      	cmp	r3, #255	; 0xff
    b534:	f040 80a3 	bne.w	b67e <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b538:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    b53c:	2c01      	cmp	r4, #1
    b53e:	d016      	beq.n	b56e <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b540:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    b542:	7818      	ldrb	r0, [r3, #0]
    b544:	4642      	mov	r2, r8
    b546:	6869      	ldr	r1, [r5, #4]
    b548:	4418      	add	r0, r3
    b54a:	47b8      	blx	r7
    b54c:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    b54e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    b552:	f000 809e 	beq.w	b692 <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    b556:	2800      	cmp	r0, #0
    b558:	f000 808b 	beq.w	b672 <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    b55c:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    b55e:	7943      	ldrb	r3, [r0, #5]
    b560:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b564:	2b01      	cmp	r3, #1
    b566:	d0df      	beq.n	b528 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    b568:	f06f 0009 	mvn.w	r0, #9
    b56c:	e7cc      	b.n	b508 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b56e:	2205      	movs	r2, #5
    b570:	6869      	ldr	r1, [r5, #4]
    b572:	4b4a      	ldr	r3, [pc, #296]	; (b69c <audio_midi_ctrl+0x1b0>)
    b574:	4798      	blx	r3
    b576:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    b578:	4e49      	ldr	r6, [pc, #292]	; (b6a0 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b57a:	f8df 8144 	ldr.w	r8, [pc, #324]	; b6c0 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    b57e:	4f49      	ldr	r7, [pc, #292]	; (b6a4 <audio_midi_ctrl+0x1b8>)
    b580:	e01a      	b.n	b5b8 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    b582:	4a47      	ldr	r2, [pc, #284]	; (b6a0 <audio_midi_ctrl+0x1b4>)
    b584:	7953      	ldrb	r3, [r2, #5]
    b586:	425b      	negs	r3, r3
    b588:	b2db      	uxtb	r3, r3
    b58a:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    b58c:	f06f 0013 	mvn.w	r0, #19
    b590:	e7ba      	b.n	b508 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    b592:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b596:	b2c0      	uxtb	r0, r0
    b598:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    b59c:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    b59e:	4a42      	ldr	r2, [pc, #264]	; (b6a8 <audio_midi_ctrl+0x1bc>)
    b5a0:	2102      	movs	r1, #2
    b5a2:	f899 0006 	ldrb.w	r0, [r9, #6]
    b5a6:	4b41      	ldr	r3, [pc, #260]	; (b6ac <audio_midi_ctrl+0x1c0>)
    b5a8:	4798      	blx	r3
				desc->sod = ep;
    b5aa:	602c      	str	r4, [r5, #0]
    b5ac:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b5ae:	6869      	ldr	r1, [r5, #4]
    b5b0:	4420      	add	r0, r4
    b5b2:	4b3f      	ldr	r3, [pc, #252]	; (b6b0 <audio_midi_ctrl+0x1c4>)
    b5b4:	4798      	blx	r3
    b5b6:	4604      	mov	r4, r0
			while (NULL != ep) {
    b5b8:	2c00      	cmp	r4, #0
    b5ba:	d063      	beq.n	b684 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    b5bc:	78a3      	ldrb	r3, [r4, #2]
    b5be:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    b5c2:	78e3      	ldrb	r3, [r4, #3]
    b5c4:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    b5c8:	7962      	ldrb	r2, [r4, #5]
    b5ca:	7923      	ldrb	r3, [r4, #4]
    b5cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    b5d0:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b5d2:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    b5d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b5da:	b2db      	uxtb	r3, r3
    b5dc:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    b5de:	2301      	movs	r3, #1
    b5e0:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b5e2:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b5e6:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b5ea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b5ee:	b292      	uxth	r2, r2
    b5f0:	47c0      	blx	r8
    b5f2:	b2c0      	uxtb	r0, r0
    b5f4:	7170      	strb	r0, [r6, #5]
    b5f6:	2800      	cmp	r0, #0
    b5f8:	d1c3      	bne.n	b582 <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b5fa:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b5fe:	f013 0f80 	tst.w	r3, #128	; 0x80
    b602:	d1c6      	bne.n	b592 <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    b604:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b608:	b2c0      	uxtb	r0, r0
    b60a:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    b60e:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    b610:	4a28      	ldr	r2, [pc, #160]	; (b6b4 <audio_midi_ctrl+0x1c8>)
    b612:	2102      	movs	r1, #2
    b614:	f899 0007 	ldrb.w	r0, [r9, #7]
    b618:	4b24      	ldr	r3, [pc, #144]	; (b6ac <audio_midi_ctrl+0x1c0>)
    b61a:	4798      	blx	r3
    b61c:	e7c5      	b.n	b5aa <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    b61e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    b620:	b142      	cbz	r2, b634 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b622:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    b624:	795b      	ldrb	r3, [r3, #5]
    b626:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b62a:	2b01      	cmp	r3, #1
    b62c:	d002      	beq.n	b634 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    b62e:	f06f 0009 	mvn.w	r0, #9
    b632:	e769      	b.n	b508 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    b634:	7923      	ldrb	r3, [r4, #4]
    b636:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    b638:	bf1c      	itt	ne
    b63a:	23ff      	movne	r3, #255	; 0xff
    b63c:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    b63e:	7963      	ldrb	r3, [r4, #5]
    b640:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    b642:	bf1c      	itt	ne
    b644:	23ff      	movne	r3, #255	; 0xff
    b646:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    b648:	79a0      	ldrb	r0, [r4, #6]
    b64a:	28ff      	cmp	r0, #255	; 0xff
    b64c:	d003      	beq.n	b656 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    b64e:	4b1a      	ldr	r3, [pc, #104]	; (b6b8 <audio_midi_ctrl+0x1cc>)
    b650:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    b652:	23ff      	movs	r3, #255	; 0xff
    b654:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    b656:	79e0      	ldrb	r0, [r4, #7]
    b658:	28ff      	cmp	r0, #255	; 0xff
    b65a:	d003      	beq.n	b664 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    b65c:	4b16      	ldr	r3, [pc, #88]	; (b6b8 <audio_midi_ctrl+0x1cc>)
    b65e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b660:	23ff      	movs	r3, #255	; 0xff
    b662:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    b664:	2000      	movs	r0, #0
    b666:	4b15      	ldr	r3, [pc, #84]	; (b6bc <audio_midi_ctrl+0x1d0>)
    b668:	7358      	strb	r0, [r3, #13]
    b66a:	e74d      	b.n	b508 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    b66c:	f06f 0009 	mvn.w	r0, #9
    b670:	e74a      	b.n	b508 <audio_midi_ctrl+0x1c>
    b672:	f06f 0009 	mvn.w	r0, #9
    b676:	e747      	b.n	b508 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    b678:	f06f 0011 	mvn.w	r0, #17
    b67c:	e744      	b.n	b508 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    b67e:	f06f 001b 	mvn.w	r0, #27
    b682:	e741      	b.n	b508 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b684:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    b686:	7818      	ldrb	r0, [r3, #0]
    b688:	2204      	movs	r2, #4
    b68a:	6869      	ldr	r1, [r5, #4]
    b68c:	4418      	add	r0, r3
    b68e:	4b03      	ldr	r3, [pc, #12]	; (b69c <audio_midi_ctrl+0x1b0>)
    b690:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    b692:	2201      	movs	r2, #1
    b694:	4b09      	ldr	r3, [pc, #36]	; (b6bc <audio_midi_ctrl+0x1d0>)
    b696:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b698:	2000      	movs	r0, #0
    b69a:	e735      	b.n	b508 <audio_midi_ctrl+0x1c>
    b69c:	0000be09 	.word	0x0000be09
    b6a0:	20007d44 	.word	0x20007d44
    b6a4:	00005f61 	.word	0x00005f61
    b6a8:	0000b459 	.word	0x0000b459
    b6ac:	00006135 	.word	0x00006135
    b6b0:	0000be43 	.word	0x0000be43
    b6b4:	0000b45b 	.word	0x0000b45b
    b6b8:	00005f35 	.word	0x00005f35
    b6bc:	20000e20 	.word	0x20000e20
    b6c0:	00005ecd 	.word	0x00005ecd

0000b6c4 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    b6c4:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    b6c6:	4b0a      	ldr	r3, [pc, #40]	; (b6f0 <audiodf_midi_init+0x2c>)
    b6c8:	4798      	blx	r3
    b6ca:	2801      	cmp	r0, #1
    b6cc:	d80c      	bhi.n	b6e8 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    b6ce:	4809      	ldr	r0, [pc, #36]	; (b6f4 <audiodf_midi_init+0x30>)
    b6d0:	4b09      	ldr	r3, [pc, #36]	; (b6f8 <audiodf_midi_init+0x34>)
    b6d2:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    b6d4:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    b6d6:	3010      	adds	r0, #16
    b6d8:	4b08      	ldr	r3, [pc, #32]	; (b6fc <audiodf_midi_init+0x38>)
    b6da:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    b6dc:	4908      	ldr	r1, [pc, #32]	; (b700 <audiodf_midi_init+0x3c>)
    b6de:	2001      	movs	r0, #1
    b6e0:	4b08      	ldr	r3, [pc, #32]	; (b704 <audiodf_midi_init+0x40>)
    b6e2:	4798      	blx	r3
	return ERR_NONE;
    b6e4:	2000      	movs	r0, #0
    b6e6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b6e8:	f06f 0010 	mvn.w	r0, #16
}
    b6ec:	bd08      	pop	{r3, pc}
    b6ee:	bf00      	nop
    b6f0:	0000bdf5 	.word	0x0000bdf5
    b6f4:	20000e20 	.word	0x20000e20
    b6f8:	0000b4ed 	.word	0x0000b4ed
    b6fc:	0000bd95 	.word	0x0000bd95
    b700:	200003b0 	.word	0x200003b0
    b704:	0000bd01 	.word	0x0000bd01

0000b708 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    b708:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    b70a:	4c06      	ldr	r4, [pc, #24]	; (b724 <audiodf_midi_xfer_packet+0x1c>)
    b70c:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    b70e:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    b710:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    b712:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    b714:	2300      	movs	r3, #0
    b716:	2204      	movs	r2, #4
    b718:	f104 0109 	add.w	r1, r4, #9
    b71c:	79a0      	ldrb	r0, [r4, #6]
    b71e:	4c02      	ldr	r4, [pc, #8]	; (b728 <audiodf_midi_xfer_packet+0x20>)
    b720:	47a0      	blx	r4
	
	
}
    b722:	bd10      	pop	{r4, pc}
    b724:	20000e20 	.word	0x20000e20
    b728:	0000b8c5 	.word	0x0000b8c5

0000b72c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    b72c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b72e:	4b07      	ldr	r3, [pc, #28]	; (b74c <usbdc_unconfig+0x20>)
    b730:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    b732:	b14c      	cbz	r4, b748 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    b734:	2600      	movs	r6, #0
    b736:	2501      	movs	r5, #1
    b738:	6863      	ldr	r3, [r4, #4]
    b73a:	4632      	mov	r2, r6
    b73c:	4629      	mov	r1, r5
    b73e:	4620      	mov	r0, r4
    b740:	4798      	blx	r3
		func = func->next;
    b742:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    b744:	2c00      	cmp	r4, #0
    b746:	d1f7      	bne.n	b738 <usbdc_unconfig+0xc>
    b748:	bd70      	pop	{r4, r5, r6, pc}
    b74a:	bf00      	nop
    b74c:	20000e3c 	.word	0x20000e3c

0000b750 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    b750:	b570      	push	{r4, r5, r6, lr}
    b752:	4606      	mov	r6, r0
    b754:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    b756:	4b07      	ldr	r3, [pc, #28]	; (b774 <usbdc_change_notify+0x24>)
    b758:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    b75a:	b91c      	cbnz	r4, b764 <usbdc_change_notify+0x14>
    b75c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    b75e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    b760:	2c00      	cmp	r4, #0
    b762:	d0fb      	beq.n	b75c <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    b764:	6863      	ldr	r3, [r4, #4]
    b766:	2b00      	cmp	r3, #0
    b768:	d0f9      	beq.n	b75e <usbdc_change_notify+0xe>
			cg->cb(change, value);
    b76a:	4629      	mov	r1, r5
    b76c:	4630      	mov	r0, r6
    b76e:	4798      	blx	r3
    b770:	e7f5      	b.n	b75e <usbdc_change_notify+0xe>
    b772:	bf00      	nop
    b774:	20000e3c 	.word	0x20000e3c

0000b778 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b77a:	4607      	mov	r7, r0
    b77c:	460e      	mov	r6, r1
    b77e:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    b780:	4b0c      	ldr	r3, [pc, #48]	; (b7b4 <usbdc_request_handler+0x3c>)
    b782:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    b784:	b91c      	cbnz	r4, b78e <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    b786:	2000      	movs	r0, #0
    b788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    b78a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    b78c:	b16c      	cbz	r4, b7aa <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    b78e:	6863      	ldr	r3, [r4, #4]
    b790:	2b00      	cmp	r3, #0
    b792:	d0fa      	beq.n	b78a <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    b794:	462a      	mov	r2, r5
    b796:	4631      	mov	r1, r6
    b798:	4638      	mov	r0, r7
    b79a:	4798      	blx	r3
			if (0 == rc) {
    b79c:	b138      	cbz	r0, b7ae <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    b79e:	f110 0f0a 	cmn.w	r0, #10
    b7a2:	d0f2      	beq.n	b78a <usbdc_request_handler+0x12>
				return -1;
    b7a4:	f04f 30ff 	mov.w	r0, #4294967295
}
    b7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    b7aa:	2000      	movs	r0, #0
    b7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    b7ae:	2001      	movs	r0, #1
    b7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7b2:	bf00      	nop
    b7b4:	20000e3c 	.word	0x20000e3c

0000b7b8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    b7b8:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    b7ba:	4b06      	ldr	r3, [pc, #24]	; (b7d4 <usbd_sof_cb+0x1c>)
    b7bc:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    b7be:	b91c      	cbnz	r4, b7c8 <usbd_sof_cb+0x10>
    b7c0:	bd10      	pop	{r4, pc}
		sof = sof->next;
    b7c2:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    b7c4:	2c00      	cmp	r4, #0
    b7c6:	d0fb      	beq.n	b7c0 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    b7c8:	6863      	ldr	r3, [r4, #4]
    b7ca:	2b00      	cmp	r3, #0
    b7cc:	d0f9      	beq.n	b7c2 <usbd_sof_cb+0xa>
			sof->cb();
    b7ce:	4798      	blx	r3
    b7d0:	e7f7      	b.n	b7c2 <usbd_sof_cb+0xa>
    b7d2:	bf00      	nop
    b7d4:	20000e3c 	.word	0x20000e3c

0000b7d8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    b7d8:	b510      	push	{r4, lr}
    b7da:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    b7dc:	b119      	cbz	r1, b7e6 <usbdc_cb_ctl_done+0xe>
    b7de:	2901      	cmp	r1, #1
    b7e0:	d026      	beq.n	b830 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    b7e2:	2000      	movs	r0, #0
    b7e4:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    b7e6:	7813      	ldrb	r3, [r2, #0]
    b7e8:	2b00      	cmp	r3, #0
    b7ea:	d1fa      	bne.n	b7e2 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    b7ec:	7853      	ldrb	r3, [r2, #1]
    b7ee:	2b05      	cmp	r3, #5
    b7f0:	d00f      	beq.n	b812 <usbdc_cb_ctl_done+0x3a>
    b7f2:	2b09      	cmp	r3, #9
    b7f4:	d1f5      	bne.n	b7e2 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    b7f6:	8852      	ldrh	r2, [r2, #2]
    b7f8:	4b10      	ldr	r3, [pc, #64]	; (b83c <usbdc_cb_ctl_done+0x64>)
    b7fa:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    b7fc:	8863      	ldrh	r3, [r4, #2]
    b7fe:	2b00      	cmp	r3, #0
    b800:	bf14      	ite	ne
    b802:	2104      	movne	r1, #4
    b804:	2103      	moveq	r1, #3
    b806:	4b0d      	ldr	r3, [pc, #52]	; (b83c <usbdc_cb_ctl_done+0x64>)
    b808:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b80a:	2001      	movs	r0, #1
    b80c:	4b0c      	ldr	r3, [pc, #48]	; (b840 <usbdc_cb_ctl_done+0x68>)
    b80e:	4798      	blx	r3
    b810:	e7e7      	b.n	b7e2 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    b812:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    b814:	b2c0      	uxtb	r0, r0
    b816:	4b0b      	ldr	r3, [pc, #44]	; (b844 <usbdc_cb_ctl_done+0x6c>)
    b818:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    b81a:	8863      	ldrh	r3, [r4, #2]
    b81c:	2b00      	cmp	r3, #0
    b81e:	bf14      	ite	ne
    b820:	2103      	movne	r1, #3
    b822:	2102      	moveq	r1, #2
    b824:	4b05      	ldr	r3, [pc, #20]	; (b83c <usbdc_cb_ctl_done+0x64>)
    b826:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b828:	2001      	movs	r0, #1
    b82a:	4b05      	ldr	r3, [pc, #20]	; (b840 <usbdc_cb_ctl_done+0x68>)
    b82c:	4798      	blx	r3
    b82e:	e7d8      	b.n	b7e2 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    b830:	2201      	movs	r2, #1
    b832:	4621      	mov	r1, r4
    b834:	2000      	movs	r0, #0
    b836:	4b04      	ldr	r3, [pc, #16]	; (b848 <usbdc_cb_ctl_done+0x70>)
    b838:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    b83a:	e7d2      	b.n	b7e2 <usbdc_cb_ctl_done+0xa>
    b83c:	20000e3c 	.word	0x20000e3c
    b840:	0000b751 	.word	0x0000b751
    b844:	00005ec1 	.word	0x00005ec1
    b848:	0000b779 	.word	0x0000b779

0000b84c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    b84c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    b84e:	4b0d      	ldr	r3, [pc, #52]	; (b884 <usbdc_reset+0x38>)
    b850:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    b852:	4d0d      	ldr	r5, [pc, #52]	; (b888 <usbdc_reset+0x3c>)
    b854:	2602      	movs	r6, #2
    b856:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    b858:	2400      	movs	r4, #0
    b85a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    b85c:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    b85e:	4620      	mov	r0, r4
    b860:	4b0a      	ldr	r3, [pc, #40]	; (b88c <usbdc_reset+0x40>)
    b862:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    b864:	7f28      	ldrb	r0, [r5, #28]
    b866:	4b0a      	ldr	r3, [pc, #40]	; (b890 <usbdc_reset+0x44>)
    b868:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    b86a:	4a0a      	ldr	r2, [pc, #40]	; (b894 <usbdc_reset+0x48>)
    b86c:	4621      	mov	r1, r4
    b86e:	4620      	mov	r0, r4
    b870:	4d09      	ldr	r5, [pc, #36]	; (b898 <usbdc_reset+0x4c>)
    b872:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    b874:	4a09      	ldr	r2, [pc, #36]	; (b89c <usbdc_reset+0x50>)
    b876:	4631      	mov	r1, r6
    b878:	4620      	mov	r0, r4
    b87a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    b87c:	4620      	mov	r0, r4
    b87e:	4b08      	ldr	r3, [pc, #32]	; (b8a0 <usbdc_reset+0x54>)
    b880:	4798      	blx	r3
    b882:	bd70      	pop	{r4, r5, r6, pc}
    b884:	0000b72d 	.word	0x0000b72d
    b888:	20000e3c 	.word	0x20000e3c
    b88c:	00005f35 	.word	0x00005f35
    b890:	00005f21 	.word	0x00005f21
    b894:	0000b8e5 	.word	0x0000b8e5
    b898:	00006135 	.word	0x00006135
    b89c:	0000b7d9 	.word	0x0000b7d9
    b8a0:	00005f61 	.word	0x00005f61

0000b8a4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    b8a4:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    b8a6:	b110      	cbz	r0, b8ae <usbd_event_cb+0xa>
    b8a8:	2801      	cmp	r0, #1
    b8aa:	d004      	beq.n	b8b6 <usbd_event_cb+0x12>
    b8ac:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    b8ae:	2000      	movs	r0, #0
    b8b0:	4b02      	ldr	r3, [pc, #8]	; (b8bc <usbd_event_cb+0x18>)
    b8b2:	4798      	blx	r3
		break;
    b8b4:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    b8b6:	4b02      	ldr	r3, [pc, #8]	; (b8c0 <usbd_event_cb+0x1c>)
    b8b8:	4798      	blx	r3
    b8ba:	bd08      	pop	{r3, pc}
    b8bc:	0000b751 	.word	0x0000b751
    b8c0:	0000b84d 	.word	0x0000b84d

0000b8c4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    b8c4:	b500      	push	{lr}
    b8c6:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b8c8:	9101      	str	r1, [sp, #4]
    b8ca:	9202      	str	r2, [sp, #8]
    b8cc:	f88d 000c 	strb.w	r0, [sp, #12]
    b8d0:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    b8d4:	a801      	add	r0, sp, #4
    b8d6:	4b02      	ldr	r3, [pc, #8]	; (b8e0 <usbdc_xfer+0x1c>)
    b8d8:	4798      	blx	r3
}
    b8da:	b005      	add	sp, #20
    b8dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b8e0:	00005fad 	.word	0x00005fad

0000b8e4 <usbdc_cb_ctl_req>:
{
    b8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b8e8:	b083      	sub	sp, #12
    b8ea:	4605      	mov	r5, r0
    b8ec:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    b8ee:	2200      	movs	r2, #0
    b8f0:	4b9b      	ldr	r3, [pc, #620]	; (bb60 <usbdc_cb_ctl_req+0x27c>)
    b8f2:	4798      	blx	r3
    b8f4:	f1b0 3fff 	cmp.w	r0, #4294967295
    b8f8:	d00b      	beq.n	b912 <usbdc_cb_ctl_req+0x2e>
    b8fa:	2801      	cmp	r0, #1
    b8fc:	f000 81e3 	beq.w	bcc6 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    b900:	7823      	ldrb	r3, [r4, #0]
    b902:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    b906:	d008      	beq.n	b91a <usbdc_cb_ctl_req+0x36>
    b908:	2a80      	cmp	r2, #128	; 0x80
    b90a:	f000 80f4 	beq.w	baf6 <usbdc_cb_ctl_req+0x212>
		return false;
    b90e:	2000      	movs	r0, #0
    b910:	e000      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    b912:	2000      	movs	r0, #0
}
    b914:	b003      	add	sp, #12
    b916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    b91a:	7862      	ldrb	r2, [r4, #1]
    b91c:	3a01      	subs	r2, #1
    b91e:	2a0a      	cmp	r2, #10
    b920:	f200 81d3 	bhi.w	bcca <usbdc_cb_ctl_req+0x3e6>
    b924:	e8df f012 	tbh	[pc, r2, lsl #1]
    b928:	01d10060 	.word	0x01d10060
    b92c:	01d10076 	.word	0x01d10076
    b930:	01d1000b 	.word	0x01d1000b
    b934:	01d101d1 	.word	0x01d101d1
    b938:	01d10015 	.word	0x01d10015
    b93c:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b93e:	2301      	movs	r3, #1
    b940:	2200      	movs	r2, #0
    b942:	4611      	mov	r1, r2
    b944:	4628      	mov	r0, r5
    b946:	4c87      	ldr	r4, [pc, #540]	; (bb64 <usbdc_cb_ctl_req+0x280>)
    b948:	47a0      	blx	r4
    b94a:	fab0 f080 	clz	r0, r0
    b94e:	0940      	lsrs	r0, r0, #5
    b950:	e7e0      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    b952:	8862      	ldrh	r2, [r4, #2]
    b954:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    b956:	b1ca      	cbz	r2, b98c <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    b958:	4b83      	ldr	r3, [pc, #524]	; (bb68 <usbdc_cb_ctl_req+0x284>)
    b95a:	681b      	ldr	r3, [r3, #0]
    b95c:	6859      	ldr	r1, [r3, #4]
    b95e:	6818      	ldr	r0, [r3, #0]
    b960:	4b82      	ldr	r3, [pc, #520]	; (bb6c <usbdc_cb_ctl_req+0x288>)
    b962:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b964:	2800      	cmp	r0, #0
    b966:	f000 81be 	beq.w	bce6 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    b96a:	78c2      	ldrb	r2, [r0, #3]
    b96c:	7881      	ldrb	r1, [r0, #2]
    b96e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    b972:	fa10 f181 	uxtah	r1, r0, r1
    b976:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    b978:	2204      	movs	r2, #4
    b97a:	4b7d      	ldr	r3, [pc, #500]	; (bb70 <usbdc_cb_ctl_req+0x28c>)
    b97c:	4798      	blx	r3
    b97e:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b980:	b130      	cbz	r0, b990 <usbdc_cb_ctl_req+0xac>
    b982:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b984:	f8df 81e0 	ldr.w	r8, [pc, #480]	; bb68 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b988:	4f79      	ldr	r7, [pc, #484]	; (bb70 <usbdc_cb_ctl_req+0x28c>)
    b98a:	e018      	b.n	b9be <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    b98c:	4b79      	ldr	r3, [pc, #484]	; (bb74 <usbdc_cb_ctl_req+0x290>)
    b98e:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b990:	2301      	movs	r3, #1
    b992:	2200      	movs	r2, #0
    b994:	4611      	mov	r1, r2
    b996:	4628      	mov	r0, r5
    b998:	4c72      	ldr	r4, [pc, #456]	; (bb64 <usbdc_cb_ctl_req+0x280>)
    b99a:	47a0      	blx	r4
    b99c:	fab0 f080 	clz	r0, r0
    b9a0:	0940      	lsrs	r0, r0, #5
    b9a2:	e7b7      	b.n	b914 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    b9a4:	464c      	mov	r4, r9
    b9a6:	e000      	b.n	b9aa <usbdc_cb_ctl_req+0xc6>
    b9a8:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    b9aa:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b9ac:	7803      	ldrb	r3, [r0, #0]
    b9ae:	4418      	add	r0, r3
    b9b0:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b9b2:	2204      	movs	r2, #4
    b9b4:	9901      	ldr	r1, [sp, #4]
    b9b6:	47b8      	blx	r7
    b9b8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b9ba:	2800      	cmp	r0, #0
    b9bc:	d0e8      	beq.n	b990 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    b9be:	f890 9002 	ldrb.w	r9, [r0, #2]
    b9c2:	45a1      	cmp	r9, r4
    b9c4:	d0f1      	beq.n	b9aa <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b9c6:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    b9ca:	2c00      	cmp	r4, #0
    b9cc:	d0ea      	beq.n	b9a4 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    b9ce:	2600      	movs	r6, #0
    b9d0:	6863      	ldr	r3, [r4, #4]
    b9d2:	466a      	mov	r2, sp
    b9d4:	4631      	mov	r1, r6
    b9d6:	4620      	mov	r0, r4
    b9d8:	4798      	blx	r3
    b9da:	2800      	cmp	r0, #0
    b9dc:	d0e4      	beq.n	b9a8 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    b9de:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    b9e0:	2c00      	cmp	r4, #0
    b9e2:	d1f5      	bne.n	b9d0 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    b9e4:	464c      	mov	r4, r9
    b9e6:	e7e0      	b.n	b9aa <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b9e8:	f003 031f 	and.w	r3, r3, #31
    b9ec:	2b02      	cmp	r3, #2
    b9ee:	f040 816e 	bne.w	bcce <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    b9f2:	88e3      	ldrh	r3, [r4, #6]
    b9f4:	b10b      	cbz	r3, b9fa <usbdc_cb_ctl_req+0x116>
			return false;
    b9f6:	2000      	movs	r0, #0
    b9f8:	e78c      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    b9fa:	88a0      	ldrh	r0, [r4, #4]
    b9fc:	2100      	movs	r1, #0
    b9fe:	b2c0      	uxtb	r0, r0
    ba00:	4b5d      	ldr	r3, [pc, #372]	; (bb78 <usbdc_cb_ctl_req+0x294>)
    ba02:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ba04:	2301      	movs	r3, #1
    ba06:	2200      	movs	r2, #0
    ba08:	4611      	mov	r1, r2
    ba0a:	4628      	mov	r0, r5
    ba0c:	4c55      	ldr	r4, [pc, #340]	; (bb64 <usbdc_cb_ctl_req+0x280>)
    ba0e:	47a0      	blx	r4
		return true;
    ba10:	2001      	movs	r0, #1
    ba12:	e77f      	b.n	b914 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ba14:	f003 031f 	and.w	r3, r3, #31
    ba18:	2b02      	cmp	r3, #2
    ba1a:	f040 815a 	bne.w	bcd2 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    ba1e:	88e3      	ldrh	r3, [r4, #6]
    ba20:	b10b      	cbz	r3, ba26 <usbdc_cb_ctl_req+0x142>
			return false;
    ba22:	2000      	movs	r0, #0
    ba24:	e776      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ba26:	88a0      	ldrh	r0, [r4, #4]
    ba28:	2101      	movs	r1, #1
    ba2a:	b2c0      	uxtb	r0, r0
    ba2c:	4b52      	ldr	r3, [pc, #328]	; (bb78 <usbdc_cb_ctl_req+0x294>)
    ba2e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ba30:	2301      	movs	r3, #1
    ba32:	2200      	movs	r2, #0
    ba34:	4611      	mov	r1, r2
    ba36:	4628      	mov	r0, r5
    ba38:	4c4a      	ldr	r4, [pc, #296]	; (bb64 <usbdc_cb_ctl_req+0x280>)
    ba3a:	47a0      	blx	r4
		return true;
    ba3c:	2001      	movs	r0, #1
    ba3e:	e769      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    ba40:	8866      	ldrh	r6, [r4, #2]
    ba42:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ba44:	4a48      	ldr	r2, [pc, #288]	; (bb68 <usbdc_cb_ctl_req+0x284>)
    ba46:	6813      	ldr	r3, [r2, #0]
    ba48:	7ed2      	ldrb	r2, [r2, #27]
    ba4a:	6859      	ldr	r1, [r3, #4]
    ba4c:	6818      	ldr	r0, [r3, #0]
    ba4e:	4b47      	ldr	r3, [pc, #284]	; (bb6c <usbdc_cb_ctl_req+0x288>)
    ba50:	4798      	blx	r3
	if (NULL == ifc) {
    ba52:	2800      	cmp	r0, #0
    ba54:	d045      	beq.n	bae2 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    ba56:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    ba58:	78c2      	ldrb	r2, [r0, #3]
    ba5a:	7881      	ldrb	r1, [r0, #2]
    ba5c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ba60:	fa10 f181 	uxtah	r1, r0, r1
    ba64:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ba66:	2204      	movs	r2, #4
    ba68:	4b41      	ldr	r3, [pc, #260]	; (bb70 <usbdc_cb_ctl_req+0x28c>)
    ba6a:	4798      	blx	r3
    ba6c:	4603      	mov	r3, r0
    ba6e:	2800      	cmp	r0, #0
    ba70:	d039      	beq.n	bae6 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ba72:	2704      	movs	r7, #4
    ba74:	4d3e      	ldr	r5, [pc, #248]	; (bb70 <usbdc_cb_ctl_req+0x28c>)
    ba76:	e008      	b.n	ba8a <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    ba78:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    ba7a:	7803      	ldrb	r3, [r0, #0]
    ba7c:	4418      	add	r0, r3
    ba7e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ba80:	463a      	mov	r2, r7
    ba82:	9901      	ldr	r1, [sp, #4]
    ba84:	47a8      	blx	r5
		if (NULL == ifc) {
    ba86:	4603      	mov	r3, r0
    ba88:	b378      	cbz	r0, baea <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    ba8a:	789a      	ldrb	r2, [r3, #2]
    ba8c:	42a2      	cmp	r2, r4
    ba8e:	d1f3      	bne.n	ba78 <usbdc_cb_ctl_req+0x194>
    ba90:	78da      	ldrb	r2, [r3, #3]
    ba92:	42b2      	cmp	r2, r6
    ba94:	d1f0      	bne.n	ba78 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    ba96:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    ba98:	4b33      	ldr	r3, [pc, #204]	; (bb68 <usbdc_cb_ctl_req+0x284>)
    ba9a:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    ba9c:	b33d      	cbz	r5, baee <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    ba9e:	2701      	movs	r7, #1
    baa0:	686b      	ldr	r3, [r5, #4]
    baa2:	466a      	mov	r2, sp
    baa4:	4639      	mov	r1, r7
    baa6:	4628      	mov	r0, r5
    baa8:	4798      	blx	r3
    baaa:	b120      	cbz	r0, bab6 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    baac:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    baae:	2d00      	cmp	r5, #0
    bab0:	d1f6      	bne.n	baa0 <usbdc_cb_ctl_req+0x1bc>
	return false;
    bab2:	2000      	movs	r0, #0
    bab4:	e72e      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    bab6:	686b      	ldr	r3, [r5, #4]
    bab8:	466a      	mov	r2, sp
    baba:	2100      	movs	r1, #0
    babc:	4628      	mov	r0, r5
    babe:	4798      	blx	r3
    bac0:	b9b8      	cbnz	r0, baf2 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    bac2:	b136      	cbz	r6, bad2 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    bac4:	4a28      	ldr	r2, [pc, #160]	; (bb68 <usbdc_cb_ctl_req+0x284>)
    bac6:	2301      	movs	r3, #1
    bac8:	fa03 f404 	lsl.w	r4, r3, r4
    bacc:	7f53      	ldrb	r3, [r2, #29]
    bace:	4323      	orrs	r3, r4
    bad0:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    bad2:	2300      	movs	r3, #0
    bad4:	461a      	mov	r2, r3
    bad6:	4619      	mov	r1, r3
    bad8:	4618      	mov	r0, r3
    bada:	4c22      	ldr	r4, [pc, #136]	; (bb64 <usbdc_cb_ctl_req+0x280>)
    badc:	47a0      	blx	r4
			return true;
    bade:	2001      	movs	r0, #1
    bae0:	e718      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bae2:	2000      	movs	r0, #0
    bae4:	e716      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bae6:	2000      	movs	r0, #0
    bae8:	e714      	b.n	b914 <usbdc_cb_ctl_req+0x30>
			return false;
    baea:	2000      	movs	r0, #0
    baec:	e712      	b.n	b914 <usbdc_cb_ctl_req+0x30>
	return false;
    baee:	2000      	movs	r0, #0
    baf0:	e710      	b.n	b914 <usbdc_cb_ctl_req+0x30>
			return false;
    baf2:	2000      	movs	r0, #0
    baf4:	e70e      	b.n	b914 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    baf6:	7862      	ldrb	r2, [r4, #1]
    baf8:	2a0a      	cmp	r2, #10
    bafa:	f200 80ec 	bhi.w	bcd6 <usbdc_cb_ctl_req+0x3f2>
    bafe:	e8df f012 	tbh	[pc, r2, lsl #1]
    bb02:	008e      	.short	0x008e
    bb04:	00ea00ea 	.word	0x00ea00ea
    bb08:	00ea00ea 	.word	0x00ea00ea
    bb0c:	000b00ea 	.word	0x000b00ea
    bb10:	008200ea 	.word	0x008200ea
    bb14:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    bb18:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    bb1a:	0a13      	lsrs	r3, r2, #8
    bb1c:	2b02      	cmp	r3, #2
    bb1e:	d02d      	beq.n	bb7c <usbdc_cb_ctl_req+0x298>
    bb20:	2b03      	cmp	r3, #3
    bb22:	d050      	beq.n	bbc6 <usbdc_cb_ctl_req+0x2e2>
    bb24:	2b01      	cmp	r3, #1
    bb26:	d001      	beq.n	bb2c <usbdc_cb_ctl_req+0x248>
	return false;
    bb28:	2000      	movs	r0, #0
    bb2a:	e6f3      	b.n	b914 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    bb2c:	88e2      	ldrh	r2, [r4, #6]
    bb2e:	2a12      	cmp	r2, #18
    bb30:	bf28      	it	cs
    bb32:	2212      	movcs	r2, #18
    bb34:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    bb36:	4b0c      	ldr	r3, [pc, #48]	; (bb68 <usbdc_cb_ctl_req+0x284>)
    bb38:	681b      	ldr	r3, [r3, #0]
    bb3a:	2201      	movs	r2, #1
    bb3c:	6859      	ldr	r1, [r3, #4]
    bb3e:	6818      	ldr	r0, [r3, #0]
    bb40:	4b0b      	ldr	r3, [pc, #44]	; (bb70 <usbdc_cb_ctl_req+0x28c>)
    bb42:	4798      	blx	r3
	if (!dev_desc) {
    bb44:	4601      	mov	r1, r0
    bb46:	2800      	cmp	r0, #0
    bb48:	f000 80c7 	beq.w	bcda <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    bb4c:	2300      	movs	r3, #0
    bb4e:	4622      	mov	r2, r4
    bb50:	4628      	mov	r0, r5
    bb52:	4c04      	ldr	r4, [pc, #16]	; (bb64 <usbdc_cb_ctl_req+0x280>)
    bb54:	47a0      	blx	r4
    bb56:	fab0 f080 	clz	r0, r0
    bb5a:	0940      	lsrs	r0, r0, #5
    bb5c:	e6da      	b.n	b914 <usbdc_cb_ctl_req+0x30>
    bb5e:	bf00      	nop
    bb60:	0000b779 	.word	0x0000b779
    bb64:	0000b8c5 	.word	0x0000b8c5
    bb68:	20000e3c 	.word	0x20000e3c
    bb6c:	0000be89 	.word	0x0000be89
    bb70:	0000be09 	.word	0x0000be09
    bb74:	0000b72d 	.word	0x0000b72d
    bb78:	000060cd 	.word	0x000060cd
	uint16_t length   = req->wLength;
    bb7c:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bb7e:	4b5b      	ldr	r3, [pc, #364]	; (bcec <usbdc_cb_ctl_req+0x408>)
    bb80:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    bb82:	681b      	ldr	r3, [r3, #0]
    bb84:	3201      	adds	r2, #1
    bb86:	b2d2      	uxtb	r2, r2
    bb88:	6859      	ldr	r1, [r3, #4]
    bb8a:	6818      	ldr	r0, [r3, #0]
    bb8c:	4b58      	ldr	r3, [pc, #352]	; (bcf0 <usbdc_cb_ctl_req+0x40c>)
    bb8e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    bb90:	4601      	mov	r1, r0
    bb92:	2800      	cmp	r0, #0
    bb94:	f000 80a3 	beq.w	bcde <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    bb98:	78c3      	ldrb	r3, [r0, #3]
    bb9a:	7882      	ldrb	r2, [r0, #2]
    bb9c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    bba0:	b292      	uxth	r2, r2
	if (length <= total_len) {
    bba2:	4294      	cmp	r4, r2
    bba4:	d90d      	bls.n	bbc2 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bba6:	3e01      	subs	r6, #1
    bba8:	4226      	tst	r6, r4
    bbaa:	bf0c      	ite	eq
    bbac:	2301      	moveq	r3, #1
    bbae:	2300      	movne	r3, #0
		length = total_len;
    bbb0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    bbb2:	4622      	mov	r2, r4
    bbb4:	4628      	mov	r0, r5
    bbb6:	4c4f      	ldr	r4, [pc, #316]	; (bcf4 <usbdc_cb_ctl_req+0x410>)
    bbb8:	47a0      	blx	r4
    bbba:	fab0 f080 	clz	r0, r0
    bbbe:	0940      	lsrs	r0, r0, #5
    bbc0:	e6a8      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    bbc2:	2300      	movs	r3, #0
    bbc4:	e7f5      	b.n	bbb2 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    bbc6:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bbc8:	4b48      	ldr	r3, [pc, #288]	; (bcec <usbdc_cb_ctl_req+0x408>)
    bbca:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    bbcc:	681b      	ldr	r3, [r3, #0]
    bbce:	b2d2      	uxtb	r2, r2
    bbd0:	6859      	ldr	r1, [r3, #4]
    bbd2:	6818      	ldr	r0, [r3, #0]
    bbd4:	4b48      	ldr	r3, [pc, #288]	; (bcf8 <usbdc_cb_ctl_req+0x414>)
    bbd6:	4798      	blx	r3
	if (NULL == str_desc) {
    bbd8:	4601      	mov	r1, r0
    bbda:	2800      	cmp	r0, #0
    bbdc:	f000 8081 	beq.w	bce2 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    bbe0:	7802      	ldrb	r2, [r0, #0]
    bbe2:	4294      	cmp	r4, r2
    bbe4:	d90d      	bls.n	bc02 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bbe6:	3e01      	subs	r6, #1
    bbe8:	4226      	tst	r6, r4
    bbea:	bf0c      	ite	eq
    bbec:	2301      	moveq	r3, #1
    bbee:	2300      	movne	r3, #0
		length = str_desc[0];
    bbf0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    bbf2:	4622      	mov	r2, r4
    bbf4:	4628      	mov	r0, r5
    bbf6:	4c3f      	ldr	r4, [pc, #252]	; (bcf4 <usbdc_cb_ctl_req+0x410>)
    bbf8:	47a0      	blx	r4
    bbfa:	fab0 f080 	clz	r0, r0
    bbfe:	0940      	lsrs	r0, r0, #5
    bc00:	e688      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    bc02:	2300      	movs	r3, #0
    bc04:	e7f5      	b.n	bbf2 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    bc06:	4939      	ldr	r1, [pc, #228]	; (bcec <usbdc_cb_ctl_req+0x408>)
    bc08:	694b      	ldr	r3, [r1, #20]
    bc0a:	7eca      	ldrb	r2, [r1, #27]
    bc0c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    bc0e:	2300      	movs	r3, #0
    bc10:	2201      	movs	r2, #1
    bc12:	6949      	ldr	r1, [r1, #20]
    bc14:	4628      	mov	r0, r5
    bc16:	4c37      	ldr	r4, [pc, #220]	; (bcf4 <usbdc_cb_ctl_req+0x410>)
    bc18:	47a0      	blx	r4
		return true;
    bc1a:	2001      	movs	r0, #1
    bc1c:	e67a      	b.n	b914 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bc1e:	f003 031f 	and.w	r3, r3, #31
    bc22:	2b01      	cmp	r3, #1
    bc24:	d903      	bls.n	bc2e <usbdc_cb_ctl_req+0x34a>
    bc26:	2b02      	cmp	r3, #2
    bc28:	d010      	beq.n	bc4c <usbdc_cb_ctl_req+0x368>
		return false;
    bc2a:	2000      	movs	r0, #0
    bc2c:	e672      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		st = 0;
    bc2e:	2300      	movs	r3, #0
    bc30:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    bc32:	492e      	ldr	r1, [pc, #184]	; (bcec <usbdc_cb_ctl_req+0x408>)
    bc34:	694b      	ldr	r3, [r1, #20]
    bc36:	f8bd 2000 	ldrh.w	r2, [sp]
    bc3a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    bc3c:	2300      	movs	r3, #0
    bc3e:	2202      	movs	r2, #2
    bc40:	6949      	ldr	r1, [r1, #20]
    bc42:	4628      	mov	r0, r5
    bc44:	4c2b      	ldr	r4, [pc, #172]	; (bcf4 <usbdc_cb_ctl_req+0x410>)
    bc46:	47a0      	blx	r4
	return true;
    bc48:	2001      	movs	r0, #1
    bc4a:	e663      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    bc4c:	88a0      	ldrh	r0, [r4, #4]
    bc4e:	2102      	movs	r1, #2
    bc50:	b2c0      	uxtb	r0, r0
    bc52:	4b2a      	ldr	r3, [pc, #168]	; (bcfc <usbdc_cb_ctl_req+0x418>)
    bc54:	4798      	blx	r3
		if (st < 0) {
    bc56:	2800      	cmp	r0, #0
    bc58:	db03      	blt.n	bc62 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    bc5a:	f000 0001 	and.w	r0, r0, #1
    bc5e:	9000      	str	r0, [sp, #0]
    bc60:	e7e7      	b.n	bc32 <usbdc_cb_ctl_req+0x34e>
			return false;
    bc62:	2000      	movs	r0, #0
    bc64:	e656      	b.n	b914 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    bc66:	4b21      	ldr	r3, [pc, #132]	; (bcec <usbdc_cb_ctl_req+0x408>)
    bc68:	7f5b      	ldrb	r3, [r3, #29]
    bc6a:	88a2      	ldrh	r2, [r4, #4]
    bc6c:	4113      	asrs	r3, r2
    bc6e:	f013 0f01 	tst.w	r3, #1
    bc72:	d012      	beq.n	bc9a <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bc74:	4b1d      	ldr	r3, [pc, #116]	; (bcec <usbdc_cb_ctl_req+0x408>)
    bc76:	691d      	ldr	r5, [r3, #16]
	return false;
    bc78:	2000      	movs	r0, #0
	while (NULL != func) {
    bc7a:	2d00      	cmp	r5, #0
    bc7c:	f43f ae4a 	beq.w	b914 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    bc80:	2602      	movs	r6, #2
    bc82:	686b      	ldr	r3, [r5, #4]
    bc84:	4622      	mov	r2, r4
    bc86:	4631      	mov	r1, r6
    bc88:	4628      	mov	r0, r5
    bc8a:	4798      	blx	r3
    bc8c:	2800      	cmp	r0, #0
    bc8e:	da0f      	bge.n	bcb0 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    bc90:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    bc92:	2d00      	cmp	r5, #0
    bc94:	d1f5      	bne.n	bc82 <usbdc_cb_ctl_req+0x39e>
	return false;
    bc96:	2000      	movs	r0, #0
    bc98:	e63c      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    bc9a:	4914      	ldr	r1, [pc, #80]	; (bcec <usbdc_cb_ctl_req+0x408>)
    bc9c:	694b      	ldr	r3, [r1, #20]
    bc9e:	2000      	movs	r0, #0
    bca0:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bca2:	4603      	mov	r3, r0
    bca4:	2201      	movs	r2, #1
    bca6:	6949      	ldr	r1, [r1, #20]
    bca8:	4c12      	ldr	r4, [pc, #72]	; (bcf4 <usbdc_cb_ctl_req+0x410>)
    bcaa:	47a0      	blx	r4
		return true;
    bcac:	2001      	movs	r0, #1
    bcae:	e631      	b.n	b914 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    bcb0:	490e      	ldr	r1, [pc, #56]	; (bcec <usbdc_cb_ctl_req+0x408>)
    bcb2:	694b      	ldr	r3, [r1, #20]
    bcb4:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bcb6:	2300      	movs	r3, #0
    bcb8:	2201      	movs	r2, #1
    bcba:	6949      	ldr	r1, [r1, #20]
    bcbc:	4618      	mov	r0, r3
    bcbe:	4c0d      	ldr	r4, [pc, #52]	; (bcf4 <usbdc_cb_ctl_req+0x410>)
    bcc0:	47a0      	blx	r4
			return true;
    bcc2:	2001      	movs	r0, #1
    bcc4:	e626      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return true;
    bcc6:	2001      	movs	r0, #1
    bcc8:	e624      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bcca:	2000      	movs	r0, #0
    bccc:	e622      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bcce:	2000      	movs	r0, #0
    bcd0:	e620      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bcd2:	2000      	movs	r0, #0
    bcd4:	e61e      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bcd6:	2000      	movs	r0, #0
    bcd8:	e61c      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bcda:	2000      	movs	r0, #0
    bcdc:	e61a      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bcde:	2000      	movs	r0, #0
    bce0:	e618      	b.n	b914 <usbdc_cb_ctl_req+0x30>
		return false;
    bce2:	2000      	movs	r0, #0
    bce4:	e616      	b.n	b914 <usbdc_cb_ctl_req+0x30>
			return false;
    bce6:	2000      	movs	r0, #0
    bce8:	e614      	b.n	b914 <usbdc_cb_ctl_req+0x30>
    bcea:	bf00      	nop
    bcec:	20000e3c 	.word	0x20000e3c
    bcf0:	0000be89 	.word	0x0000be89
    bcf4:	0000b8c5 	.word	0x0000b8c5
    bcf8:	0000bef1 	.word	0x0000bef1
    bcfc:	000060cd 	.word	0x000060cd

0000bd00 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    bd00:	b508      	push	{r3, lr}
	switch (type) {
    bd02:	2801      	cmp	r0, #1
    bd04:	d007      	beq.n	bd16 <usbdc_register_handler+0x16>
    bd06:	b110      	cbz	r0, bd0e <usbdc_register_handler+0xe>
    bd08:	2802      	cmp	r0, #2
    bd0a:	d008      	beq.n	bd1e <usbdc_register_handler+0x1e>
    bd0c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    bd0e:	4806      	ldr	r0, [pc, #24]	; (bd28 <usbdc_register_handler+0x28>)
    bd10:	4b06      	ldr	r3, [pc, #24]	; (bd2c <usbdc_register_handler+0x2c>)
    bd12:	4798      	blx	r3
		break;
    bd14:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    bd16:	4806      	ldr	r0, [pc, #24]	; (bd30 <usbdc_register_handler+0x30>)
    bd18:	4b04      	ldr	r3, [pc, #16]	; (bd2c <usbdc_register_handler+0x2c>)
    bd1a:	4798      	blx	r3
		break;
    bd1c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    bd1e:	4805      	ldr	r0, [pc, #20]	; (bd34 <usbdc_register_handler+0x34>)
    bd20:	4b02      	ldr	r3, [pc, #8]	; (bd2c <usbdc_register_handler+0x2c>)
    bd22:	4798      	blx	r3
    bd24:	bd08      	pop	{r3, pc}
    bd26:	bf00      	nop
    bd28:	20000e40 	.word	0x20000e40
    bd2c:	000061dd 	.word	0x000061dd
    bd30:	20000e44 	.word	0x20000e44
    bd34:	20000e48 	.word	0x20000e48

0000bd38 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    bd38:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    bd3a:	4605      	mov	r5, r0
    bd3c:	f240 3255 	movw	r2, #853	; 0x355
    bd40:	490c      	ldr	r1, [pc, #48]	; (bd74 <usbdc_init+0x3c>)
    bd42:	3000      	adds	r0, #0
    bd44:	bf18      	it	ne
    bd46:	2001      	movne	r0, #1
    bd48:	4b0b      	ldr	r3, [pc, #44]	; (bd78 <usbdc_init+0x40>)
    bd4a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    bd4c:	4b0b      	ldr	r3, [pc, #44]	; (bd7c <usbdc_init+0x44>)
    bd4e:	4798      	blx	r3
	if (rc < 0) {
    bd50:	2800      	cmp	r0, #0
    bd52:	db0e      	blt.n	bd72 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    bd54:	4c0a      	ldr	r4, [pc, #40]	; (bd80 <usbdc_init+0x48>)
    bd56:	2220      	movs	r2, #32
    bd58:	2100      	movs	r1, #0
    bd5a:	4620      	mov	r0, r4
    bd5c:	4b09      	ldr	r3, [pc, #36]	; (bd84 <usbdc_init+0x4c>)
    bd5e:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    bd60:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    bd62:	4909      	ldr	r1, [pc, #36]	; (bd88 <usbdc_init+0x50>)
    bd64:	2000      	movs	r0, #0
    bd66:	4c09      	ldr	r4, [pc, #36]	; (bd8c <usbdc_init+0x54>)
    bd68:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    bd6a:	4909      	ldr	r1, [pc, #36]	; (bd90 <usbdc_init+0x58>)
    bd6c:	2001      	movs	r0, #1
    bd6e:	47a0      	blx	r4

	return 0;
    bd70:	2000      	movs	r0, #0
}
    bd72:	bd38      	pop	{r3, r4, r5, pc}
    bd74:	0000e96c 	.word	0x0000e96c
    bd78:	00006181 	.word	0x00006181
    bd7c:	00005e29 	.word	0x00005e29
    bd80:	20000e3c 	.word	0x20000e3c
    bd84:	0000c8d7 	.word	0x0000c8d7
    bd88:	0000b7b9 	.word	0x0000b7b9
    bd8c:	00005e91 	.word	0x00005e91
    bd90:	0000b8a5 	.word	0x0000b8a5

0000bd94 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    bd94:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    bd96:	4601      	mov	r1, r0
    bd98:	4801      	ldr	r0, [pc, #4]	; (bda0 <usbdc_register_function+0xc>)
    bd9a:	4b02      	ldr	r3, [pc, #8]	; (bda4 <usbdc_register_function+0x10>)
    bd9c:	4798      	blx	r3
    bd9e:	bd08      	pop	{r3, pc}
    bda0:	20000e4c 	.word	0x20000e4c
    bda4:	000061dd 	.word	0x000061dd

0000bda8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    bda8:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    bdaa:	4b0a      	ldr	r3, [pc, #40]	; (bdd4 <usbdc_start+0x2c>)
    bdac:	7e9b      	ldrb	r3, [r3, #26]
    bdae:	b95b      	cbnz	r3, bdc8 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    bdb0:	b168      	cbz	r0, bdce <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    bdb2:	4b08      	ldr	r3, [pc, #32]	; (bdd4 <usbdc_start+0x2c>)
    bdb4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    bdb6:	6802      	ldr	r2, [r0, #0]
    bdb8:	79d2      	ldrb	r2, [r2, #7]
    bdba:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    bdbc:	2201      	movs	r2, #1
    bdbe:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    bdc0:	4b05      	ldr	r3, [pc, #20]	; (bdd8 <usbdc_start+0x30>)
    bdc2:	4798      	blx	r3
	return ERR_NONE;
    bdc4:	2000      	movs	r0, #0
    bdc6:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    bdc8:	f06f 0003 	mvn.w	r0, #3
    bdcc:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    bdce:	f06f 0008 	mvn.w	r0, #8
}
    bdd2:	bd08      	pop	{r3, pc}
    bdd4:	20000e3c 	.word	0x20000e3c
    bdd8:	00005e9d 	.word	0x00005e9d

0000bddc <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    bddc:	b508      	push	{r3, lr}
	usb_d_attach();
    bdde:	4b01      	ldr	r3, [pc, #4]	; (bde4 <usbdc_attach+0x8>)
    bde0:	4798      	blx	r3
    bde2:	bd08      	pop	{r3, pc}
    bde4:	00005ea9 	.word	0x00005ea9

0000bde8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    bde8:	4b01      	ldr	r3, [pc, #4]	; (bdf0 <usbdc_get_ctrl_buffer+0x8>)
    bdea:	6958      	ldr	r0, [r3, #20]
    bdec:	4770      	bx	lr
    bdee:	bf00      	nop
    bdf0:	20000e3c 	.word	0x20000e3c

0000bdf4 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    bdf4:	4b03      	ldr	r3, [pc, #12]	; (be04 <usbdc_get_state+0x10>)
    bdf6:	7e98      	ldrb	r0, [r3, #26]
    bdf8:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    bdfc:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    bdfe:	bf18      	it	ne
    be00:	2010      	movne	r0, #16
    be02:	4770      	bx	lr
    be04:	20000e3c 	.word	0x20000e3c

0000be08 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    be08:	4288      	cmp	r0, r1
    be0a:	d214      	bcs.n	be36 <usb_find_desc+0x2e>
	return desc[0];
    be0c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    be0e:	2b01      	cmp	r3, #1
    be10:	d913      	bls.n	be3a <usb_find_desc+0x32>
{
    be12:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    be14:	7844      	ldrb	r4, [r0, #1]
    be16:	4294      	cmp	r4, r2
    be18:	d00a      	beq.n	be30 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    be1a:	4418      	add	r0, r3
	while (desc < eof) {
    be1c:	4281      	cmp	r1, r0
    be1e:	d906      	bls.n	be2e <usb_find_desc+0x26>
	return desc[0];
    be20:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    be22:	2b01      	cmp	r3, #1
    be24:	d90b      	bls.n	be3e <usb_find_desc+0x36>
	return desc[1];
    be26:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    be28:	4294      	cmp	r4, r2
    be2a:	d1f6      	bne.n	be1a <usb_find_desc+0x12>
    be2c:	e000      	b.n	be30 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    be2e:	2000      	movs	r0, #0
}
    be30:	f85d 4b04 	ldr.w	r4, [sp], #4
    be34:	4770      	bx	lr
	return NULL;
    be36:	2000      	movs	r0, #0
    be38:	4770      	bx	lr
		_desc_len_check();
    be3a:	2000      	movs	r0, #0
    be3c:	4770      	bx	lr
    be3e:	2000      	movs	r0, #0
    be40:	e7f6      	b.n	be30 <usb_find_desc+0x28>

0000be42 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    be42:	4288      	cmp	r0, r1
    be44:	d216      	bcs.n	be74 <usb_find_ep_desc+0x32>
	return desc[0];
    be46:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    be48:	2b01      	cmp	r3, #1
    be4a:	d915      	bls.n	be78 <usb_find_ep_desc+0x36>
	return desc[1];
    be4c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    be4e:	2a04      	cmp	r2, #4
    be50:	d014      	beq.n	be7c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    be52:	2a05      	cmp	r2, #5
    be54:	d00b      	beq.n	be6e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    be56:	4418      	add	r0, r3
	while (desc < eof) {
    be58:	4281      	cmp	r1, r0
    be5a:	d909      	bls.n	be70 <usb_find_ep_desc+0x2e>
	return desc[0];
    be5c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    be5e:	2b01      	cmp	r3, #1
    be60:	d90e      	bls.n	be80 <usb_find_ep_desc+0x3e>
	return desc[1];
    be62:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    be64:	2a04      	cmp	r2, #4
    be66:	d00d      	beq.n	be84 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    be68:	2a05      	cmp	r2, #5
    be6a:	d1f4      	bne.n	be56 <usb_find_ep_desc+0x14>
    be6c:	e00b      	b.n	be86 <usb_find_ep_desc+0x44>
    be6e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    be70:	2000      	movs	r0, #0
    be72:	4770      	bx	lr
    be74:	2000      	movs	r0, #0
    be76:	4770      	bx	lr
		_desc_len_check();
    be78:	2000      	movs	r0, #0
    be7a:	4770      	bx	lr
	return NULL;
    be7c:	2000      	movs	r0, #0
    be7e:	4770      	bx	lr
		_desc_len_check();
    be80:	2000      	movs	r0, #0
    be82:	4770      	bx	lr
	return NULL;
    be84:	2000      	movs	r0, #0
}
    be86:	4770      	bx	lr

0000be88 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    be88:	b538      	push	{r3, r4, r5, lr}
    be8a:	460c      	mov	r4, r1
    be8c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    be8e:	2202      	movs	r2, #2
    be90:	4b16      	ldr	r3, [pc, #88]	; (beec <usb_find_cfg_desc+0x64>)
    be92:	4798      	blx	r3
	if (!desc) {
    be94:	4603      	mov	r3, r0
    be96:	b1e8      	cbz	r0, bed4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    be98:	4284      	cmp	r4, r0
    be9a:	d91d      	bls.n	bed8 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    be9c:	7802      	ldrb	r2, [r0, #0]
    be9e:	2a01      	cmp	r2, #1
    bea0:	d91c      	bls.n	bedc <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    bea2:	7842      	ldrb	r2, [r0, #1]
    bea4:	2a02      	cmp	r2, #2
    bea6:	d11b      	bne.n	bee0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    bea8:	7942      	ldrb	r2, [r0, #5]
    beaa:	42aa      	cmp	r2, r5
    beac:	d012      	beq.n	bed4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    beae:	78d9      	ldrb	r1, [r3, #3]
    beb0:	789a      	ldrb	r2, [r3, #2]
    beb2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    beb6:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    beba:	429c      	cmp	r4, r3
    bebc:	d909      	bls.n	bed2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    bebe:	781a      	ldrb	r2, [r3, #0]
    bec0:	2a01      	cmp	r2, #1
    bec2:	d90f      	bls.n	bee4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    bec4:	785a      	ldrb	r2, [r3, #1]
    bec6:	2a02      	cmp	r2, #2
    bec8:	d10e      	bne.n	bee8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    beca:	795a      	ldrb	r2, [r3, #5]
    becc:	42aa      	cmp	r2, r5
    bece:	d1ee      	bne.n	beae <usb_find_cfg_desc+0x26>
    bed0:	e000      	b.n	bed4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    bed2:	2300      	movs	r3, #0
}
    bed4:	4618      	mov	r0, r3
    bed6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    bed8:	2300      	movs	r3, #0
    beda:	e7fb      	b.n	bed4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    bedc:	2300      	movs	r3, #0
    bede:	e7f9      	b.n	bed4 <usb_find_cfg_desc+0x4c>
	return NULL;
    bee0:	2300      	movs	r3, #0
    bee2:	e7f7      	b.n	bed4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    bee4:	2300      	movs	r3, #0
    bee6:	e7f5      	b.n	bed4 <usb_find_cfg_desc+0x4c>
	return NULL;
    bee8:	2300      	movs	r3, #0
    beea:	e7f3      	b.n	bed4 <usb_find_cfg_desc+0x4c>
    beec:	0000be09 	.word	0x0000be09

0000bef0 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    bef0:	4288      	cmp	r0, r1
    bef2:	d217      	bcs.n	bf24 <usb_find_str_desc+0x34>
{
    bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bef8:	460d      	mov	r5, r1
    befa:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    befc:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    befe:	f04f 0803 	mov.w	r8, #3
    bf02:	4f0c      	ldr	r7, [pc, #48]	; (bf34 <usb_find_str_desc+0x44>)
    bf04:	4642      	mov	r2, r8
    bf06:	4629      	mov	r1, r5
    bf08:	47b8      	blx	r7
		if (desc) {
    bf0a:	4603      	mov	r3, r0
    bf0c:	b170      	cbz	r0, bf2c <usb_find_str_desc+0x3c>
	return desc[0];
    bf0e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    bf10:	2801      	cmp	r0, #1
    bf12:	d90a      	bls.n	bf2a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    bf14:	42a6      	cmp	r6, r4
    bf16:	d009      	beq.n	bf2c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    bf18:	4418      	add	r0, r3
    bf1a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    bf1c:	4285      	cmp	r5, r0
    bf1e:	d8f1      	bhi.n	bf04 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    bf20:	2300      	movs	r3, #0
    bf22:	e003      	b.n	bf2c <usb_find_str_desc+0x3c>
    bf24:	2300      	movs	r3, #0
}
    bf26:	4618      	mov	r0, r3
    bf28:	4770      	bx	lr
			_desc_len_check();
    bf2a:	2300      	movs	r3, #0
}
    bf2c:	4618      	mov	r0, r3
    bf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf32:	bf00      	nop
    bf34:	0000be09 	.word	0x0000be09

0000bf38 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    bf38:	4b3a      	ldr	r3, [pc, #232]	; (c024 <hiddf_demo_sof_event+0xec>)
    bf3a:	791b      	ldrb	r3, [r3, #4]
    bf3c:	2b0a      	cmp	r3, #10
    bf3e:	d803      	bhi.n	bf48 <hiddf_demo_sof_event+0x10>
    bf40:	3301      	adds	r3, #1
    bf42:	4a38      	ldr	r2, [pc, #224]	; (c024 <hiddf_demo_sof_event+0xec>)
    bf44:	7113      	strb	r3, [r2, #4]
    bf46:	4770      	bx	lr
{
    bf48:	b570      	push	{r4, r5, r6, lr}
    bf4a:	b084      	sub	sp, #16
		interval = 0;
    bf4c:	4b35      	ldr	r3, [pc, #212]	; (c024 <hiddf_demo_sof_event+0xec>)
    bf4e:	2200      	movs	r2, #0
    bf50:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    bf52:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    bf54:	a801      	add	r0, sp, #4
    bf56:	4b34      	ldr	r3, [pc, #208]	; (c028 <hiddf_demo_sof_event+0xf0>)
    bf58:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bf5a:	096b      	lsrs	r3, r5, #5
    bf5c:	4933      	ldr	r1, [pc, #204]	; (c02c <hiddf_demo_sof_event+0xf4>)
    bf5e:	01db      	lsls	r3, r3, #7
    bf60:	18ca      	adds	r2, r1, r3
    bf62:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bf64:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bf66:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bf68:	405c      	eors	r4, r3
    bf6a:	400c      	ands	r4, r1
    bf6c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bf6e:	a801      	add	r0, sp, #4
    bf70:	4b2f      	ldr	r3, [pc, #188]	; (c030 <hiddf_demo_sof_event+0xf8>)
    bf72:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    bf74:	f005 051f 	and.w	r5, r5, #31
    bf78:	2301      	movs	r3, #1
    bf7a:	fa03 f505 	lsl.w	r5, r3, r5
    bf7e:	4225      	tst	r5, r4
    bf80:	d040      	beq.n	c004 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    bf82:	4b28      	ldr	r3, [pc, #160]	; (c024 <hiddf_demo_sof_event+0xec>)
    bf84:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    bf86:	a802      	add	r0, sp, #8
    bf88:	4b27      	ldr	r3, [pc, #156]	; (c028 <hiddf_demo_sof_event+0xf0>)
    bf8a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bf8c:	096b      	lsrs	r3, r5, #5
    bf8e:	4927      	ldr	r1, [pc, #156]	; (c02c <hiddf_demo_sof_event+0xf4>)
    bf90:	01db      	lsls	r3, r3, #7
    bf92:	18ca      	adds	r2, r1, r3
    bf94:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bf96:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bf98:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bf9a:	405c      	eors	r4, r3
    bf9c:	400c      	ands	r4, r1
    bf9e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bfa0:	a802      	add	r0, sp, #8
    bfa2:	4b23      	ldr	r3, [pc, #140]	; (c030 <hiddf_demo_sof_event+0xf8>)
    bfa4:	4798      	blx	r3
    bfa6:	f005 051f 	and.w	r5, r5, #31
    bfaa:	2301      	movs	r3, #1
    bfac:	fa03 f505 	lsl.w	r5, r3, r5
    bfb0:	4225      	tst	r5, r4
    bfb2:	d02d      	beq.n	c010 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    bfb4:	4d1b      	ldr	r5, [pc, #108]	; (c024 <hiddf_demo_sof_event+0xec>)
    bfb6:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    bfb8:	a803      	add	r0, sp, #12
    bfba:	4b1b      	ldr	r3, [pc, #108]	; (c028 <hiddf_demo_sof_event+0xf0>)
    bfbc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bfbe:	0973      	lsrs	r3, r6, #5
    bfc0:	491a      	ldr	r1, [pc, #104]	; (c02c <hiddf_demo_sof_event+0xf4>)
    bfc2:	01db      	lsls	r3, r3, #7
    bfc4:	18ca      	adds	r2, r1, r3
    bfc6:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bfc8:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bfca:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bfcc:	405c      	eors	r4, r3
    bfce:	400c      	ands	r4, r1
    bfd0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bfd2:	a803      	add	r0, sp, #12
    bfd4:	4b16      	ldr	r3, [pc, #88]	; (c030 <hiddf_demo_sof_event+0xf8>)
    bfd6:	4798      	blx	r3
    bfd8:	f006 061f 	and.w	r6, r6, #31
    bfdc:	2301      	movs	r3, #1
    bfde:	40b3      	lsls	r3, r6
    bfe0:	401c      	ands	r4, r3
    bfe2:	bf0c      	ite	eq
    bfe4:	2301      	moveq	r3, #1
    bfe6:	2300      	movne	r3, #0
    bfe8:	7d2a      	ldrb	r2, [r5, #20]
    bfea:	429a      	cmp	r2, r3
    bfec:	d008      	beq.n	c000 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    bfee:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    bff0:	b19c      	cbz	r4, c01a <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    bff2:	2200      	movs	r2, #0
    bff4:	4b0f      	ldr	r3, [pc, #60]	; (c034 <hiddf_demo_sof_event+0xfc>)
    bff6:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    bff8:	2101      	movs	r1, #1
    bffa:	480e      	ldr	r0, [pc, #56]	; (c034 <hiddf_demo_sof_event+0xfc>)
    bffc:	4b0e      	ldr	r3, [pc, #56]	; (c038 <hiddf_demo_sof_event+0x100>)
    bffe:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    c000:	b004      	add	sp, #16
    c002:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    c004:	4619      	mov	r1, r3
    c006:	f06f 0004 	mvn.w	r0, #4
    c00a:	4b0c      	ldr	r3, [pc, #48]	; (c03c <hiddf_demo_sof_event+0x104>)
    c00c:	4798      	blx	r3
    c00e:	e7b8      	b.n	bf82 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    c010:	4619      	mov	r1, r3
    c012:	2005      	movs	r0, #5
    c014:	4b09      	ldr	r3, [pc, #36]	; (c03c <hiddf_demo_sof_event+0x104>)
    c016:	4798      	blx	r3
    c018:	e7cc      	b.n	bfb4 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    c01a:	2201      	movs	r2, #1
    c01c:	4b05      	ldr	r3, [pc, #20]	; (c034 <hiddf_demo_sof_event+0xfc>)
    c01e:	709a      	strb	r2, [r3, #2]
    c020:	e7ea      	b.n	bff8 <hiddf_demo_sof_event+0xc0>
    c022:	bf00      	nop
    c024:	20000e5c 	.word	0x20000e5c
    c028:	00004d8d 	.word	0x00004d8d
    c02c:	41008000 	.word	0x41008000
    c030:	00004d9b 	.word	0x00004d9b
    c034:	200003b8 	.word	0x200003b8
    c038:	0000b185 	.word	0x0000b185
    c03c:	0000b419 	.word	0x0000b419

0000c040 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    c040:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    c042:	4805      	ldr	r0, [pc, #20]	; (c058 <composite_device_init+0x18>)
    c044:	4b05      	ldr	r3, [pc, #20]	; (c05c <composite_device_init+0x1c>)
    c046:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    c048:	4b05      	ldr	r3, [pc, #20]	; (c060 <composite_device_init+0x20>)
    c04a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    c04c:	4b05      	ldr	r3, [pc, #20]	; (c064 <composite_device_init+0x24>)
    c04e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    c050:	4b05      	ldr	r3, [pc, #20]	; (c068 <composite_device_init+0x28>)
    c052:	4798      	blx	r3
    c054:	bd08      	pop	{r3, pc}
    c056:	bf00      	nop
    c058:	20000e74 	.word	0x20000e74
    c05c:	0000bd39 	.word	0x0000bd39
    c060:	0000af01 	.word	0x0000af01
    c064:	0000b3d5 	.word	0x0000b3d5
    c068:	0000b141 	.word	0x0000b141

0000c06c <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    c06c:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    c06e:	4803      	ldr	r0, [pc, #12]	; (c07c <composite_device_start+0x10>)
    c070:	4b03      	ldr	r3, [pc, #12]	; (c080 <composite_device_start+0x14>)
    c072:	4798      	blx	r3
	usbdc_attach();
    c074:	4b03      	ldr	r3, [pc, #12]	; (c084 <composite_device_start+0x18>)
    c076:	4798      	blx	r3
    c078:	bd08      	pop	{r3, pc}
    c07a:	bf00      	nop
    c07c:	200003c4 	.word	0x200003c4
    c080:	0000bda9 	.word	0x0000bda9
    c084:	0000bddd 	.word	0x0000bddd

0000c088 <usb_init>:
		}
	}
}

void usb_init(void)
{
    c088:	b508      	push	{r3, lr}

	composite_device_init();
    c08a:	4b01      	ldr	r3, [pc, #4]	; (c090 <usb_init+0x8>)
    c08c:	4798      	blx	r3
    c08e:	bd08      	pop	{r3, pc}
    c090:	0000c041 	.word	0x0000c041

0000c094 <__aeabi_drsub>:
    c094:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c098:	e002      	b.n	c0a0 <__adddf3>
    c09a:	bf00      	nop

0000c09c <__aeabi_dsub>:
    c09c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c0a0 <__adddf3>:
    c0a0:	b530      	push	{r4, r5, lr}
    c0a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c0a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c0aa:	ea94 0f05 	teq	r4, r5
    c0ae:	bf08      	it	eq
    c0b0:	ea90 0f02 	teqeq	r0, r2
    c0b4:	bf1f      	itttt	ne
    c0b6:	ea54 0c00 	orrsne.w	ip, r4, r0
    c0ba:	ea55 0c02 	orrsne.w	ip, r5, r2
    c0be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c0c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c0c6:	f000 80e2 	beq.w	c28e <__adddf3+0x1ee>
    c0ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c0ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c0d2:	bfb8      	it	lt
    c0d4:	426d      	neglt	r5, r5
    c0d6:	dd0c      	ble.n	c0f2 <__adddf3+0x52>
    c0d8:	442c      	add	r4, r5
    c0da:	ea80 0202 	eor.w	r2, r0, r2
    c0de:	ea81 0303 	eor.w	r3, r1, r3
    c0e2:	ea82 0000 	eor.w	r0, r2, r0
    c0e6:	ea83 0101 	eor.w	r1, r3, r1
    c0ea:	ea80 0202 	eor.w	r2, r0, r2
    c0ee:	ea81 0303 	eor.w	r3, r1, r3
    c0f2:	2d36      	cmp	r5, #54	; 0x36
    c0f4:	bf88      	it	hi
    c0f6:	bd30      	pophi	{r4, r5, pc}
    c0f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c0fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c100:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c104:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c108:	d002      	beq.n	c110 <__adddf3+0x70>
    c10a:	4240      	negs	r0, r0
    c10c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c110:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c114:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c118:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c11c:	d002      	beq.n	c124 <__adddf3+0x84>
    c11e:	4252      	negs	r2, r2
    c120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c124:	ea94 0f05 	teq	r4, r5
    c128:	f000 80a7 	beq.w	c27a <__adddf3+0x1da>
    c12c:	f1a4 0401 	sub.w	r4, r4, #1
    c130:	f1d5 0e20 	rsbs	lr, r5, #32
    c134:	db0d      	blt.n	c152 <__adddf3+0xb2>
    c136:	fa02 fc0e 	lsl.w	ip, r2, lr
    c13a:	fa22 f205 	lsr.w	r2, r2, r5
    c13e:	1880      	adds	r0, r0, r2
    c140:	f141 0100 	adc.w	r1, r1, #0
    c144:	fa03 f20e 	lsl.w	r2, r3, lr
    c148:	1880      	adds	r0, r0, r2
    c14a:	fa43 f305 	asr.w	r3, r3, r5
    c14e:	4159      	adcs	r1, r3
    c150:	e00e      	b.n	c170 <__adddf3+0xd0>
    c152:	f1a5 0520 	sub.w	r5, r5, #32
    c156:	f10e 0e20 	add.w	lr, lr, #32
    c15a:	2a01      	cmp	r2, #1
    c15c:	fa03 fc0e 	lsl.w	ip, r3, lr
    c160:	bf28      	it	cs
    c162:	f04c 0c02 	orrcs.w	ip, ip, #2
    c166:	fa43 f305 	asr.w	r3, r3, r5
    c16a:	18c0      	adds	r0, r0, r3
    c16c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c174:	d507      	bpl.n	c186 <__adddf3+0xe6>
    c176:	f04f 0e00 	mov.w	lr, #0
    c17a:	f1dc 0c00 	rsbs	ip, ip, #0
    c17e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c182:	eb6e 0101 	sbc.w	r1, lr, r1
    c186:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c18a:	d31b      	bcc.n	c1c4 <__adddf3+0x124>
    c18c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c190:	d30c      	bcc.n	c1ac <__adddf3+0x10c>
    c192:	0849      	lsrs	r1, r1, #1
    c194:	ea5f 0030 	movs.w	r0, r0, rrx
    c198:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c19c:	f104 0401 	add.w	r4, r4, #1
    c1a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c1a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c1a8:	f080 809a 	bcs.w	c2e0 <__adddf3+0x240>
    c1ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c1b0:	bf08      	it	eq
    c1b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c1b6:	f150 0000 	adcs.w	r0, r0, #0
    c1ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c1be:	ea41 0105 	orr.w	r1, r1, r5
    c1c2:	bd30      	pop	{r4, r5, pc}
    c1c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c1c8:	4140      	adcs	r0, r0
    c1ca:	eb41 0101 	adc.w	r1, r1, r1
    c1ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c1d2:	f1a4 0401 	sub.w	r4, r4, #1
    c1d6:	d1e9      	bne.n	c1ac <__adddf3+0x10c>
    c1d8:	f091 0f00 	teq	r1, #0
    c1dc:	bf04      	itt	eq
    c1de:	4601      	moveq	r1, r0
    c1e0:	2000      	moveq	r0, #0
    c1e2:	fab1 f381 	clz	r3, r1
    c1e6:	bf08      	it	eq
    c1e8:	3320      	addeq	r3, #32
    c1ea:	f1a3 030b 	sub.w	r3, r3, #11
    c1ee:	f1b3 0220 	subs.w	r2, r3, #32
    c1f2:	da0c      	bge.n	c20e <__adddf3+0x16e>
    c1f4:	320c      	adds	r2, #12
    c1f6:	dd08      	ble.n	c20a <__adddf3+0x16a>
    c1f8:	f102 0c14 	add.w	ip, r2, #20
    c1fc:	f1c2 020c 	rsb	r2, r2, #12
    c200:	fa01 f00c 	lsl.w	r0, r1, ip
    c204:	fa21 f102 	lsr.w	r1, r1, r2
    c208:	e00c      	b.n	c224 <__adddf3+0x184>
    c20a:	f102 0214 	add.w	r2, r2, #20
    c20e:	bfd8      	it	le
    c210:	f1c2 0c20 	rsble	ip, r2, #32
    c214:	fa01 f102 	lsl.w	r1, r1, r2
    c218:	fa20 fc0c 	lsr.w	ip, r0, ip
    c21c:	bfdc      	itt	le
    c21e:	ea41 010c 	orrle.w	r1, r1, ip
    c222:	4090      	lslle	r0, r2
    c224:	1ae4      	subs	r4, r4, r3
    c226:	bfa2      	ittt	ge
    c228:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c22c:	4329      	orrge	r1, r5
    c22e:	bd30      	popge	{r4, r5, pc}
    c230:	ea6f 0404 	mvn.w	r4, r4
    c234:	3c1f      	subs	r4, #31
    c236:	da1c      	bge.n	c272 <__adddf3+0x1d2>
    c238:	340c      	adds	r4, #12
    c23a:	dc0e      	bgt.n	c25a <__adddf3+0x1ba>
    c23c:	f104 0414 	add.w	r4, r4, #20
    c240:	f1c4 0220 	rsb	r2, r4, #32
    c244:	fa20 f004 	lsr.w	r0, r0, r4
    c248:	fa01 f302 	lsl.w	r3, r1, r2
    c24c:	ea40 0003 	orr.w	r0, r0, r3
    c250:	fa21 f304 	lsr.w	r3, r1, r4
    c254:	ea45 0103 	orr.w	r1, r5, r3
    c258:	bd30      	pop	{r4, r5, pc}
    c25a:	f1c4 040c 	rsb	r4, r4, #12
    c25e:	f1c4 0220 	rsb	r2, r4, #32
    c262:	fa20 f002 	lsr.w	r0, r0, r2
    c266:	fa01 f304 	lsl.w	r3, r1, r4
    c26a:	ea40 0003 	orr.w	r0, r0, r3
    c26e:	4629      	mov	r1, r5
    c270:	bd30      	pop	{r4, r5, pc}
    c272:	fa21 f004 	lsr.w	r0, r1, r4
    c276:	4629      	mov	r1, r5
    c278:	bd30      	pop	{r4, r5, pc}
    c27a:	f094 0f00 	teq	r4, #0
    c27e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c282:	bf06      	itte	eq
    c284:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c288:	3401      	addeq	r4, #1
    c28a:	3d01      	subne	r5, #1
    c28c:	e74e      	b.n	c12c <__adddf3+0x8c>
    c28e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c292:	bf18      	it	ne
    c294:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c298:	d029      	beq.n	c2ee <__adddf3+0x24e>
    c29a:	ea94 0f05 	teq	r4, r5
    c29e:	bf08      	it	eq
    c2a0:	ea90 0f02 	teqeq	r0, r2
    c2a4:	d005      	beq.n	c2b2 <__adddf3+0x212>
    c2a6:	ea54 0c00 	orrs.w	ip, r4, r0
    c2aa:	bf04      	itt	eq
    c2ac:	4619      	moveq	r1, r3
    c2ae:	4610      	moveq	r0, r2
    c2b0:	bd30      	pop	{r4, r5, pc}
    c2b2:	ea91 0f03 	teq	r1, r3
    c2b6:	bf1e      	ittt	ne
    c2b8:	2100      	movne	r1, #0
    c2ba:	2000      	movne	r0, #0
    c2bc:	bd30      	popne	{r4, r5, pc}
    c2be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c2c2:	d105      	bne.n	c2d0 <__adddf3+0x230>
    c2c4:	0040      	lsls	r0, r0, #1
    c2c6:	4149      	adcs	r1, r1
    c2c8:	bf28      	it	cs
    c2ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c2ce:	bd30      	pop	{r4, r5, pc}
    c2d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c2d4:	bf3c      	itt	cc
    c2d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c2da:	bd30      	popcc	{r4, r5, pc}
    c2dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c2e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c2e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c2e8:	f04f 0000 	mov.w	r0, #0
    c2ec:	bd30      	pop	{r4, r5, pc}
    c2ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2f2:	bf1a      	itte	ne
    c2f4:	4619      	movne	r1, r3
    c2f6:	4610      	movne	r0, r2
    c2f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c2fc:	bf1c      	itt	ne
    c2fe:	460b      	movne	r3, r1
    c300:	4602      	movne	r2, r0
    c302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c306:	bf06      	itte	eq
    c308:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c30c:	ea91 0f03 	teqeq	r1, r3
    c310:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c314:	bd30      	pop	{r4, r5, pc}
    c316:	bf00      	nop

0000c318 <__aeabi_ui2d>:
    c318:	f090 0f00 	teq	r0, #0
    c31c:	bf04      	itt	eq
    c31e:	2100      	moveq	r1, #0
    c320:	4770      	bxeq	lr
    c322:	b530      	push	{r4, r5, lr}
    c324:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c328:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c32c:	f04f 0500 	mov.w	r5, #0
    c330:	f04f 0100 	mov.w	r1, #0
    c334:	e750      	b.n	c1d8 <__adddf3+0x138>
    c336:	bf00      	nop

0000c338 <__aeabi_i2d>:
    c338:	f090 0f00 	teq	r0, #0
    c33c:	bf04      	itt	eq
    c33e:	2100      	moveq	r1, #0
    c340:	4770      	bxeq	lr
    c342:	b530      	push	{r4, r5, lr}
    c344:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c348:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c34c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c350:	bf48      	it	mi
    c352:	4240      	negmi	r0, r0
    c354:	f04f 0100 	mov.w	r1, #0
    c358:	e73e      	b.n	c1d8 <__adddf3+0x138>
    c35a:	bf00      	nop

0000c35c <__aeabi_f2d>:
    c35c:	0042      	lsls	r2, r0, #1
    c35e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c362:	ea4f 0131 	mov.w	r1, r1, rrx
    c366:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c36a:	bf1f      	itttt	ne
    c36c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c370:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c374:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c378:	4770      	bxne	lr
    c37a:	f092 0f00 	teq	r2, #0
    c37e:	bf14      	ite	ne
    c380:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c384:	4770      	bxeq	lr
    c386:	b530      	push	{r4, r5, lr}
    c388:	f44f 7460 	mov.w	r4, #896	; 0x380
    c38c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c394:	e720      	b.n	c1d8 <__adddf3+0x138>
    c396:	bf00      	nop

0000c398 <__aeabi_ul2d>:
    c398:	ea50 0201 	orrs.w	r2, r0, r1
    c39c:	bf08      	it	eq
    c39e:	4770      	bxeq	lr
    c3a0:	b530      	push	{r4, r5, lr}
    c3a2:	f04f 0500 	mov.w	r5, #0
    c3a6:	e00a      	b.n	c3be <__aeabi_l2d+0x16>

0000c3a8 <__aeabi_l2d>:
    c3a8:	ea50 0201 	orrs.w	r2, r0, r1
    c3ac:	bf08      	it	eq
    c3ae:	4770      	bxeq	lr
    c3b0:	b530      	push	{r4, r5, lr}
    c3b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c3b6:	d502      	bpl.n	c3be <__aeabi_l2d+0x16>
    c3b8:	4240      	negs	r0, r0
    c3ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c3be:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c3ca:	f43f aedc 	beq.w	c186 <__adddf3+0xe6>
    c3ce:	f04f 0203 	mov.w	r2, #3
    c3d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c3d6:	bf18      	it	ne
    c3d8:	3203      	addne	r2, #3
    c3da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c3de:	bf18      	it	ne
    c3e0:	3203      	addne	r2, #3
    c3e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c3e6:	f1c2 0320 	rsb	r3, r2, #32
    c3ea:	fa00 fc03 	lsl.w	ip, r0, r3
    c3ee:	fa20 f002 	lsr.w	r0, r0, r2
    c3f2:	fa01 fe03 	lsl.w	lr, r1, r3
    c3f6:	ea40 000e 	orr.w	r0, r0, lr
    c3fa:	fa21 f102 	lsr.w	r1, r1, r2
    c3fe:	4414      	add	r4, r2
    c400:	e6c1      	b.n	c186 <__adddf3+0xe6>
    c402:	bf00      	nop

0000c404 <__aeabi_dmul>:
    c404:	b570      	push	{r4, r5, r6, lr}
    c406:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c40a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c40e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c412:	bf1d      	ittte	ne
    c414:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c418:	ea94 0f0c 	teqne	r4, ip
    c41c:	ea95 0f0c 	teqne	r5, ip
    c420:	f000 f8de 	bleq	c5e0 <__aeabi_dmul+0x1dc>
    c424:	442c      	add	r4, r5
    c426:	ea81 0603 	eor.w	r6, r1, r3
    c42a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c42e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c432:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c436:	bf18      	it	ne
    c438:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c43c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c444:	d038      	beq.n	c4b8 <__aeabi_dmul+0xb4>
    c446:	fba0 ce02 	umull	ip, lr, r0, r2
    c44a:	f04f 0500 	mov.w	r5, #0
    c44e:	fbe1 e502 	umlal	lr, r5, r1, r2
    c452:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c456:	fbe0 e503 	umlal	lr, r5, r0, r3
    c45a:	f04f 0600 	mov.w	r6, #0
    c45e:	fbe1 5603 	umlal	r5, r6, r1, r3
    c462:	f09c 0f00 	teq	ip, #0
    c466:	bf18      	it	ne
    c468:	f04e 0e01 	orrne.w	lr, lr, #1
    c46c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c470:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c474:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c478:	d204      	bcs.n	c484 <__aeabi_dmul+0x80>
    c47a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c47e:	416d      	adcs	r5, r5
    c480:	eb46 0606 	adc.w	r6, r6, r6
    c484:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c488:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c48c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c490:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c494:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c498:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c49c:	bf88      	it	hi
    c49e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c4a2:	d81e      	bhi.n	c4e2 <__aeabi_dmul+0xde>
    c4a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c4a8:	bf08      	it	eq
    c4aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c4ae:	f150 0000 	adcs.w	r0, r0, #0
    c4b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c4b6:	bd70      	pop	{r4, r5, r6, pc}
    c4b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c4bc:	ea46 0101 	orr.w	r1, r6, r1
    c4c0:	ea40 0002 	orr.w	r0, r0, r2
    c4c4:	ea81 0103 	eor.w	r1, r1, r3
    c4c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c4cc:	bfc2      	ittt	gt
    c4ce:	ebd4 050c 	rsbsgt	r5, r4, ip
    c4d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c4d6:	bd70      	popgt	{r4, r5, r6, pc}
    c4d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4dc:	f04f 0e00 	mov.w	lr, #0
    c4e0:	3c01      	subs	r4, #1
    c4e2:	f300 80ab 	bgt.w	c63c <__aeabi_dmul+0x238>
    c4e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c4ea:	bfde      	ittt	le
    c4ec:	2000      	movle	r0, #0
    c4ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c4f2:	bd70      	pople	{r4, r5, r6, pc}
    c4f4:	f1c4 0400 	rsb	r4, r4, #0
    c4f8:	3c20      	subs	r4, #32
    c4fa:	da35      	bge.n	c568 <__aeabi_dmul+0x164>
    c4fc:	340c      	adds	r4, #12
    c4fe:	dc1b      	bgt.n	c538 <__aeabi_dmul+0x134>
    c500:	f104 0414 	add.w	r4, r4, #20
    c504:	f1c4 0520 	rsb	r5, r4, #32
    c508:	fa00 f305 	lsl.w	r3, r0, r5
    c50c:	fa20 f004 	lsr.w	r0, r0, r4
    c510:	fa01 f205 	lsl.w	r2, r1, r5
    c514:	ea40 0002 	orr.w	r0, r0, r2
    c518:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c51c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c520:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c524:	fa21 f604 	lsr.w	r6, r1, r4
    c528:	eb42 0106 	adc.w	r1, r2, r6
    c52c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c530:	bf08      	it	eq
    c532:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c536:	bd70      	pop	{r4, r5, r6, pc}
    c538:	f1c4 040c 	rsb	r4, r4, #12
    c53c:	f1c4 0520 	rsb	r5, r4, #32
    c540:	fa00 f304 	lsl.w	r3, r0, r4
    c544:	fa20 f005 	lsr.w	r0, r0, r5
    c548:	fa01 f204 	lsl.w	r2, r1, r4
    c54c:	ea40 0002 	orr.w	r0, r0, r2
    c550:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c554:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c558:	f141 0100 	adc.w	r1, r1, #0
    c55c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c560:	bf08      	it	eq
    c562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c566:	bd70      	pop	{r4, r5, r6, pc}
    c568:	f1c4 0520 	rsb	r5, r4, #32
    c56c:	fa00 f205 	lsl.w	r2, r0, r5
    c570:	ea4e 0e02 	orr.w	lr, lr, r2
    c574:	fa20 f304 	lsr.w	r3, r0, r4
    c578:	fa01 f205 	lsl.w	r2, r1, r5
    c57c:	ea43 0302 	orr.w	r3, r3, r2
    c580:	fa21 f004 	lsr.w	r0, r1, r4
    c584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c588:	fa21 f204 	lsr.w	r2, r1, r4
    c58c:	ea20 0002 	bic.w	r0, r0, r2
    c590:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c594:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c598:	bf08      	it	eq
    c59a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c59e:	bd70      	pop	{r4, r5, r6, pc}
    c5a0:	f094 0f00 	teq	r4, #0
    c5a4:	d10f      	bne.n	c5c6 <__aeabi_dmul+0x1c2>
    c5a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c5aa:	0040      	lsls	r0, r0, #1
    c5ac:	eb41 0101 	adc.w	r1, r1, r1
    c5b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c5b4:	bf08      	it	eq
    c5b6:	3c01      	subeq	r4, #1
    c5b8:	d0f7      	beq.n	c5aa <__aeabi_dmul+0x1a6>
    c5ba:	ea41 0106 	orr.w	r1, r1, r6
    c5be:	f095 0f00 	teq	r5, #0
    c5c2:	bf18      	it	ne
    c5c4:	4770      	bxne	lr
    c5c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c5ca:	0052      	lsls	r2, r2, #1
    c5cc:	eb43 0303 	adc.w	r3, r3, r3
    c5d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c5d4:	bf08      	it	eq
    c5d6:	3d01      	subeq	r5, #1
    c5d8:	d0f7      	beq.n	c5ca <__aeabi_dmul+0x1c6>
    c5da:	ea43 0306 	orr.w	r3, r3, r6
    c5de:	4770      	bx	lr
    c5e0:	ea94 0f0c 	teq	r4, ip
    c5e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c5e8:	bf18      	it	ne
    c5ea:	ea95 0f0c 	teqne	r5, ip
    c5ee:	d00c      	beq.n	c60a <__aeabi_dmul+0x206>
    c5f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c5f4:	bf18      	it	ne
    c5f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c5fa:	d1d1      	bne.n	c5a0 <__aeabi_dmul+0x19c>
    c5fc:	ea81 0103 	eor.w	r1, r1, r3
    c600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c604:	f04f 0000 	mov.w	r0, #0
    c608:	bd70      	pop	{r4, r5, r6, pc}
    c60a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c60e:	bf06      	itte	eq
    c610:	4610      	moveq	r0, r2
    c612:	4619      	moveq	r1, r3
    c614:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c618:	d019      	beq.n	c64e <__aeabi_dmul+0x24a>
    c61a:	ea94 0f0c 	teq	r4, ip
    c61e:	d102      	bne.n	c626 <__aeabi_dmul+0x222>
    c620:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c624:	d113      	bne.n	c64e <__aeabi_dmul+0x24a>
    c626:	ea95 0f0c 	teq	r5, ip
    c62a:	d105      	bne.n	c638 <__aeabi_dmul+0x234>
    c62c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c630:	bf1c      	itt	ne
    c632:	4610      	movne	r0, r2
    c634:	4619      	movne	r1, r3
    c636:	d10a      	bne.n	c64e <__aeabi_dmul+0x24a>
    c638:	ea81 0103 	eor.w	r1, r1, r3
    c63c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c640:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c644:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c648:	f04f 0000 	mov.w	r0, #0
    c64c:	bd70      	pop	{r4, r5, r6, pc}
    c64e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c652:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c656:	bd70      	pop	{r4, r5, r6, pc}

0000c658 <__aeabi_ddiv>:
    c658:	b570      	push	{r4, r5, r6, lr}
    c65a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c65e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c666:	bf1d      	ittte	ne
    c668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c66c:	ea94 0f0c 	teqne	r4, ip
    c670:	ea95 0f0c 	teqne	r5, ip
    c674:	f000 f8a7 	bleq	c7c6 <__aeabi_ddiv+0x16e>
    c678:	eba4 0405 	sub.w	r4, r4, r5
    c67c:	ea81 0e03 	eor.w	lr, r1, r3
    c680:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c684:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c688:	f000 8088 	beq.w	c79c <__aeabi_ddiv+0x144>
    c68c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c690:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c694:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c698:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c69c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c6a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c6a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c6a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c6ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c6b0:	429d      	cmp	r5, r3
    c6b2:	bf08      	it	eq
    c6b4:	4296      	cmpeq	r6, r2
    c6b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c6ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c6be:	d202      	bcs.n	c6c6 <__aeabi_ddiv+0x6e>
    c6c0:	085b      	lsrs	r3, r3, #1
    c6c2:	ea4f 0232 	mov.w	r2, r2, rrx
    c6c6:	1ab6      	subs	r6, r6, r2
    c6c8:	eb65 0503 	sbc.w	r5, r5, r3
    c6cc:	085b      	lsrs	r3, r3, #1
    c6ce:	ea4f 0232 	mov.w	r2, r2, rrx
    c6d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c6d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c6da:	ebb6 0e02 	subs.w	lr, r6, r2
    c6de:	eb75 0e03 	sbcs.w	lr, r5, r3
    c6e2:	bf22      	ittt	cs
    c6e4:	1ab6      	subcs	r6, r6, r2
    c6e6:	4675      	movcs	r5, lr
    c6e8:	ea40 000c 	orrcs.w	r0, r0, ip
    c6ec:	085b      	lsrs	r3, r3, #1
    c6ee:	ea4f 0232 	mov.w	r2, r2, rrx
    c6f2:	ebb6 0e02 	subs.w	lr, r6, r2
    c6f6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c6fa:	bf22      	ittt	cs
    c6fc:	1ab6      	subcs	r6, r6, r2
    c6fe:	4675      	movcs	r5, lr
    c700:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c704:	085b      	lsrs	r3, r3, #1
    c706:	ea4f 0232 	mov.w	r2, r2, rrx
    c70a:	ebb6 0e02 	subs.w	lr, r6, r2
    c70e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c712:	bf22      	ittt	cs
    c714:	1ab6      	subcs	r6, r6, r2
    c716:	4675      	movcs	r5, lr
    c718:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c71c:	085b      	lsrs	r3, r3, #1
    c71e:	ea4f 0232 	mov.w	r2, r2, rrx
    c722:	ebb6 0e02 	subs.w	lr, r6, r2
    c726:	eb75 0e03 	sbcs.w	lr, r5, r3
    c72a:	bf22      	ittt	cs
    c72c:	1ab6      	subcs	r6, r6, r2
    c72e:	4675      	movcs	r5, lr
    c730:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c734:	ea55 0e06 	orrs.w	lr, r5, r6
    c738:	d018      	beq.n	c76c <__aeabi_ddiv+0x114>
    c73a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c73e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c742:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c746:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c74a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c74e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c752:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c756:	d1c0      	bne.n	c6da <__aeabi_ddiv+0x82>
    c758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c75c:	d10b      	bne.n	c776 <__aeabi_ddiv+0x11e>
    c75e:	ea41 0100 	orr.w	r1, r1, r0
    c762:	f04f 0000 	mov.w	r0, #0
    c766:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c76a:	e7b6      	b.n	c6da <__aeabi_ddiv+0x82>
    c76c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c770:	bf04      	itt	eq
    c772:	4301      	orreq	r1, r0
    c774:	2000      	moveq	r0, #0
    c776:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c77a:	bf88      	it	hi
    c77c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c780:	f63f aeaf 	bhi.w	c4e2 <__aeabi_dmul+0xde>
    c784:	ebb5 0c03 	subs.w	ip, r5, r3
    c788:	bf04      	itt	eq
    c78a:	ebb6 0c02 	subseq.w	ip, r6, r2
    c78e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c792:	f150 0000 	adcs.w	r0, r0, #0
    c796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c79a:	bd70      	pop	{r4, r5, r6, pc}
    c79c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c7a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c7a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c7a8:	bfc2      	ittt	gt
    c7aa:	ebd4 050c 	rsbsgt	r5, r4, ip
    c7ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c7b2:	bd70      	popgt	{r4, r5, r6, pc}
    c7b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c7b8:	f04f 0e00 	mov.w	lr, #0
    c7bc:	3c01      	subs	r4, #1
    c7be:	e690      	b.n	c4e2 <__aeabi_dmul+0xde>
    c7c0:	ea45 0e06 	orr.w	lr, r5, r6
    c7c4:	e68d      	b.n	c4e2 <__aeabi_dmul+0xde>
    c7c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c7ca:	ea94 0f0c 	teq	r4, ip
    c7ce:	bf08      	it	eq
    c7d0:	ea95 0f0c 	teqeq	r5, ip
    c7d4:	f43f af3b 	beq.w	c64e <__aeabi_dmul+0x24a>
    c7d8:	ea94 0f0c 	teq	r4, ip
    c7dc:	d10a      	bne.n	c7f4 <__aeabi_ddiv+0x19c>
    c7de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c7e2:	f47f af34 	bne.w	c64e <__aeabi_dmul+0x24a>
    c7e6:	ea95 0f0c 	teq	r5, ip
    c7ea:	f47f af25 	bne.w	c638 <__aeabi_dmul+0x234>
    c7ee:	4610      	mov	r0, r2
    c7f0:	4619      	mov	r1, r3
    c7f2:	e72c      	b.n	c64e <__aeabi_dmul+0x24a>
    c7f4:	ea95 0f0c 	teq	r5, ip
    c7f8:	d106      	bne.n	c808 <__aeabi_ddiv+0x1b0>
    c7fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c7fe:	f43f aefd 	beq.w	c5fc <__aeabi_dmul+0x1f8>
    c802:	4610      	mov	r0, r2
    c804:	4619      	mov	r1, r3
    c806:	e722      	b.n	c64e <__aeabi_dmul+0x24a>
    c808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c80c:	bf18      	it	ne
    c80e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c812:	f47f aec5 	bne.w	c5a0 <__aeabi_dmul+0x19c>
    c816:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c81a:	f47f af0d 	bne.w	c638 <__aeabi_dmul+0x234>
    c81e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c822:	f47f aeeb 	bne.w	c5fc <__aeabi_dmul+0x1f8>
    c826:	e712      	b.n	c64e <__aeabi_dmul+0x24a>

0000c828 <__aeabi_d2uiz>:
    c828:	004a      	lsls	r2, r1, #1
    c82a:	d211      	bcs.n	c850 <__aeabi_d2uiz+0x28>
    c82c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c830:	d211      	bcs.n	c856 <__aeabi_d2uiz+0x2e>
    c832:	d50d      	bpl.n	c850 <__aeabi_d2uiz+0x28>
    c834:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c838:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c83c:	d40e      	bmi.n	c85c <__aeabi_d2uiz+0x34>
    c83e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c842:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c846:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c84a:	fa23 f002 	lsr.w	r0, r3, r2
    c84e:	4770      	bx	lr
    c850:	f04f 0000 	mov.w	r0, #0
    c854:	4770      	bx	lr
    c856:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c85a:	d102      	bne.n	c862 <__aeabi_d2uiz+0x3a>
    c85c:	f04f 30ff 	mov.w	r0, #4294967295
    c860:	4770      	bx	lr
    c862:	f04f 0000 	mov.w	r0, #0
    c866:	4770      	bx	lr

0000c868 <__libc_init_array>:
    c868:	b570      	push	{r4, r5, r6, lr}
    c86a:	4e0d      	ldr	r6, [pc, #52]	; (c8a0 <__libc_init_array+0x38>)
    c86c:	4c0d      	ldr	r4, [pc, #52]	; (c8a4 <__libc_init_array+0x3c>)
    c86e:	1ba4      	subs	r4, r4, r6
    c870:	10a4      	asrs	r4, r4, #2
    c872:	2500      	movs	r5, #0
    c874:	42a5      	cmp	r5, r4
    c876:	d109      	bne.n	c88c <__libc_init_array+0x24>
    c878:	4e0b      	ldr	r6, [pc, #44]	; (c8a8 <__libc_init_array+0x40>)
    c87a:	4c0c      	ldr	r4, [pc, #48]	; (c8ac <__libc_init_array+0x44>)
    c87c:	f002 f8ce 	bl	ea1c <_init>
    c880:	1ba4      	subs	r4, r4, r6
    c882:	10a4      	asrs	r4, r4, #2
    c884:	2500      	movs	r5, #0
    c886:	42a5      	cmp	r5, r4
    c888:	d105      	bne.n	c896 <__libc_init_array+0x2e>
    c88a:	bd70      	pop	{r4, r5, r6, pc}
    c88c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c890:	4798      	blx	r3
    c892:	3501      	adds	r5, #1
    c894:	e7ee      	b.n	c874 <__libc_init_array+0xc>
    c896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c89a:	4798      	blx	r3
    c89c:	3501      	adds	r5, #1
    c89e:	e7f2      	b.n	c886 <__libc_init_array+0x1e>
    c8a0:	0000ea28 	.word	0x0000ea28
    c8a4:	0000ea28 	.word	0x0000ea28
    c8a8:	0000ea28 	.word	0x0000ea28
    c8ac:	0000ea2c 	.word	0x0000ea2c

0000c8b0 <malloc>:
    c8b0:	4b02      	ldr	r3, [pc, #8]	; (c8bc <malloc+0xc>)
    c8b2:	4601      	mov	r1, r0
    c8b4:	6818      	ldr	r0, [r3, #0]
    c8b6:	f000 b865 	b.w	c984 <_malloc_r>
    c8ba:	bf00      	nop
    c8bc:	20000558 	.word	0x20000558

0000c8c0 <memcpy>:
    c8c0:	b510      	push	{r4, lr}
    c8c2:	1e43      	subs	r3, r0, #1
    c8c4:	440a      	add	r2, r1
    c8c6:	4291      	cmp	r1, r2
    c8c8:	d100      	bne.n	c8cc <memcpy+0xc>
    c8ca:	bd10      	pop	{r4, pc}
    c8cc:	f811 4b01 	ldrb.w	r4, [r1], #1
    c8d0:	f803 4f01 	strb.w	r4, [r3, #1]!
    c8d4:	e7f7      	b.n	c8c6 <memcpy+0x6>

0000c8d6 <memset>:
    c8d6:	4402      	add	r2, r0
    c8d8:	4603      	mov	r3, r0
    c8da:	4293      	cmp	r3, r2
    c8dc:	d100      	bne.n	c8e0 <memset+0xa>
    c8de:	4770      	bx	lr
    c8e0:	f803 1b01 	strb.w	r1, [r3], #1
    c8e4:	e7f9      	b.n	c8da <memset+0x4>
	...

0000c8e8 <_free_r>:
    c8e8:	b538      	push	{r3, r4, r5, lr}
    c8ea:	4605      	mov	r5, r0
    c8ec:	2900      	cmp	r1, #0
    c8ee:	d045      	beq.n	c97c <_free_r+0x94>
    c8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c8f4:	1f0c      	subs	r4, r1, #4
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	bfb8      	it	lt
    c8fa:	18e4      	addlt	r4, r4, r3
    c8fc:	f000 fcae 	bl	d25c <__malloc_lock>
    c900:	4a1f      	ldr	r2, [pc, #124]	; (c980 <_free_r+0x98>)
    c902:	6813      	ldr	r3, [r2, #0]
    c904:	4610      	mov	r0, r2
    c906:	b933      	cbnz	r3, c916 <_free_r+0x2e>
    c908:	6063      	str	r3, [r4, #4]
    c90a:	6014      	str	r4, [r2, #0]
    c90c:	4628      	mov	r0, r5
    c90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c912:	f000 bca4 	b.w	d25e <__malloc_unlock>
    c916:	42a3      	cmp	r3, r4
    c918:	d90c      	bls.n	c934 <_free_r+0x4c>
    c91a:	6821      	ldr	r1, [r4, #0]
    c91c:	1862      	adds	r2, r4, r1
    c91e:	4293      	cmp	r3, r2
    c920:	bf04      	itt	eq
    c922:	681a      	ldreq	r2, [r3, #0]
    c924:	685b      	ldreq	r3, [r3, #4]
    c926:	6063      	str	r3, [r4, #4]
    c928:	bf04      	itt	eq
    c92a:	1852      	addeq	r2, r2, r1
    c92c:	6022      	streq	r2, [r4, #0]
    c92e:	6004      	str	r4, [r0, #0]
    c930:	e7ec      	b.n	c90c <_free_r+0x24>
    c932:	4613      	mov	r3, r2
    c934:	685a      	ldr	r2, [r3, #4]
    c936:	b10a      	cbz	r2, c93c <_free_r+0x54>
    c938:	42a2      	cmp	r2, r4
    c93a:	d9fa      	bls.n	c932 <_free_r+0x4a>
    c93c:	6819      	ldr	r1, [r3, #0]
    c93e:	1858      	adds	r0, r3, r1
    c940:	42a0      	cmp	r0, r4
    c942:	d10b      	bne.n	c95c <_free_r+0x74>
    c944:	6820      	ldr	r0, [r4, #0]
    c946:	4401      	add	r1, r0
    c948:	1858      	adds	r0, r3, r1
    c94a:	4282      	cmp	r2, r0
    c94c:	6019      	str	r1, [r3, #0]
    c94e:	d1dd      	bne.n	c90c <_free_r+0x24>
    c950:	6810      	ldr	r0, [r2, #0]
    c952:	6852      	ldr	r2, [r2, #4]
    c954:	605a      	str	r2, [r3, #4]
    c956:	4401      	add	r1, r0
    c958:	6019      	str	r1, [r3, #0]
    c95a:	e7d7      	b.n	c90c <_free_r+0x24>
    c95c:	d902      	bls.n	c964 <_free_r+0x7c>
    c95e:	230c      	movs	r3, #12
    c960:	602b      	str	r3, [r5, #0]
    c962:	e7d3      	b.n	c90c <_free_r+0x24>
    c964:	6820      	ldr	r0, [r4, #0]
    c966:	1821      	adds	r1, r4, r0
    c968:	428a      	cmp	r2, r1
    c96a:	bf04      	itt	eq
    c96c:	6811      	ldreq	r1, [r2, #0]
    c96e:	6852      	ldreq	r2, [r2, #4]
    c970:	6062      	str	r2, [r4, #4]
    c972:	bf04      	itt	eq
    c974:	1809      	addeq	r1, r1, r0
    c976:	6021      	streq	r1, [r4, #0]
    c978:	605c      	str	r4, [r3, #4]
    c97a:	e7c7      	b.n	c90c <_free_r+0x24>
    c97c:	bd38      	pop	{r3, r4, r5, pc}
    c97e:	bf00      	nop
    c980:	20000eb4 	.word	0x20000eb4

0000c984 <_malloc_r>:
    c984:	b570      	push	{r4, r5, r6, lr}
    c986:	1ccd      	adds	r5, r1, #3
    c988:	f025 0503 	bic.w	r5, r5, #3
    c98c:	3508      	adds	r5, #8
    c98e:	2d0c      	cmp	r5, #12
    c990:	bf38      	it	cc
    c992:	250c      	movcc	r5, #12
    c994:	2d00      	cmp	r5, #0
    c996:	4606      	mov	r6, r0
    c998:	db01      	blt.n	c99e <_malloc_r+0x1a>
    c99a:	42a9      	cmp	r1, r5
    c99c:	d903      	bls.n	c9a6 <_malloc_r+0x22>
    c99e:	230c      	movs	r3, #12
    c9a0:	6033      	str	r3, [r6, #0]
    c9a2:	2000      	movs	r0, #0
    c9a4:	bd70      	pop	{r4, r5, r6, pc}
    c9a6:	f000 fc59 	bl	d25c <__malloc_lock>
    c9aa:	4a23      	ldr	r2, [pc, #140]	; (ca38 <_malloc_r+0xb4>)
    c9ac:	6814      	ldr	r4, [r2, #0]
    c9ae:	4621      	mov	r1, r4
    c9b0:	b991      	cbnz	r1, c9d8 <_malloc_r+0x54>
    c9b2:	4c22      	ldr	r4, [pc, #136]	; (ca3c <_malloc_r+0xb8>)
    c9b4:	6823      	ldr	r3, [r4, #0]
    c9b6:	b91b      	cbnz	r3, c9c0 <_malloc_r+0x3c>
    c9b8:	4630      	mov	r0, r6
    c9ba:	f000 f8bd 	bl	cb38 <_sbrk_r>
    c9be:	6020      	str	r0, [r4, #0]
    c9c0:	4629      	mov	r1, r5
    c9c2:	4630      	mov	r0, r6
    c9c4:	f000 f8b8 	bl	cb38 <_sbrk_r>
    c9c8:	1c43      	adds	r3, r0, #1
    c9ca:	d126      	bne.n	ca1a <_malloc_r+0x96>
    c9cc:	230c      	movs	r3, #12
    c9ce:	6033      	str	r3, [r6, #0]
    c9d0:	4630      	mov	r0, r6
    c9d2:	f000 fc44 	bl	d25e <__malloc_unlock>
    c9d6:	e7e4      	b.n	c9a2 <_malloc_r+0x1e>
    c9d8:	680b      	ldr	r3, [r1, #0]
    c9da:	1b5b      	subs	r3, r3, r5
    c9dc:	d41a      	bmi.n	ca14 <_malloc_r+0x90>
    c9de:	2b0b      	cmp	r3, #11
    c9e0:	d90f      	bls.n	ca02 <_malloc_r+0x7e>
    c9e2:	600b      	str	r3, [r1, #0]
    c9e4:	50cd      	str	r5, [r1, r3]
    c9e6:	18cc      	adds	r4, r1, r3
    c9e8:	4630      	mov	r0, r6
    c9ea:	f000 fc38 	bl	d25e <__malloc_unlock>
    c9ee:	f104 000b 	add.w	r0, r4, #11
    c9f2:	1d23      	adds	r3, r4, #4
    c9f4:	f020 0007 	bic.w	r0, r0, #7
    c9f8:	1ac3      	subs	r3, r0, r3
    c9fa:	d01b      	beq.n	ca34 <_malloc_r+0xb0>
    c9fc:	425a      	negs	r2, r3
    c9fe:	50e2      	str	r2, [r4, r3]
    ca00:	bd70      	pop	{r4, r5, r6, pc}
    ca02:	428c      	cmp	r4, r1
    ca04:	bf0d      	iteet	eq
    ca06:	6863      	ldreq	r3, [r4, #4]
    ca08:	684b      	ldrne	r3, [r1, #4]
    ca0a:	6063      	strne	r3, [r4, #4]
    ca0c:	6013      	streq	r3, [r2, #0]
    ca0e:	bf18      	it	ne
    ca10:	460c      	movne	r4, r1
    ca12:	e7e9      	b.n	c9e8 <_malloc_r+0x64>
    ca14:	460c      	mov	r4, r1
    ca16:	6849      	ldr	r1, [r1, #4]
    ca18:	e7ca      	b.n	c9b0 <_malloc_r+0x2c>
    ca1a:	1cc4      	adds	r4, r0, #3
    ca1c:	f024 0403 	bic.w	r4, r4, #3
    ca20:	42a0      	cmp	r0, r4
    ca22:	d005      	beq.n	ca30 <_malloc_r+0xac>
    ca24:	1a21      	subs	r1, r4, r0
    ca26:	4630      	mov	r0, r6
    ca28:	f000 f886 	bl	cb38 <_sbrk_r>
    ca2c:	3001      	adds	r0, #1
    ca2e:	d0cd      	beq.n	c9cc <_malloc_r+0x48>
    ca30:	6025      	str	r5, [r4, #0]
    ca32:	e7d9      	b.n	c9e8 <_malloc_r+0x64>
    ca34:	bd70      	pop	{r4, r5, r6, pc}
    ca36:	bf00      	nop
    ca38:	20000eb4 	.word	0x20000eb4
    ca3c:	20000eb8 	.word	0x20000eb8

0000ca40 <iprintf>:
    ca40:	b40f      	push	{r0, r1, r2, r3}
    ca42:	4b0a      	ldr	r3, [pc, #40]	; (ca6c <iprintf+0x2c>)
    ca44:	b513      	push	{r0, r1, r4, lr}
    ca46:	681c      	ldr	r4, [r3, #0]
    ca48:	b124      	cbz	r4, ca54 <iprintf+0x14>
    ca4a:	69a3      	ldr	r3, [r4, #24]
    ca4c:	b913      	cbnz	r3, ca54 <iprintf+0x14>
    ca4e:	4620      	mov	r0, r4
    ca50:	f000 fb16 	bl	d080 <__sinit>
    ca54:	ab05      	add	r3, sp, #20
    ca56:	9a04      	ldr	r2, [sp, #16]
    ca58:	68a1      	ldr	r1, [r4, #8]
    ca5a:	9301      	str	r3, [sp, #4]
    ca5c:	4620      	mov	r0, r4
    ca5e:	f000 fd77 	bl	d550 <_vfiprintf_r>
    ca62:	b002      	add	sp, #8
    ca64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca68:	b004      	add	sp, #16
    ca6a:	4770      	bx	lr
    ca6c:	20000558 	.word	0x20000558

0000ca70 <_puts_r>:
    ca70:	b570      	push	{r4, r5, r6, lr}
    ca72:	460e      	mov	r6, r1
    ca74:	4605      	mov	r5, r0
    ca76:	b118      	cbz	r0, ca80 <_puts_r+0x10>
    ca78:	6983      	ldr	r3, [r0, #24]
    ca7a:	b90b      	cbnz	r3, ca80 <_puts_r+0x10>
    ca7c:	f000 fb00 	bl	d080 <__sinit>
    ca80:	69ab      	ldr	r3, [r5, #24]
    ca82:	68ac      	ldr	r4, [r5, #8]
    ca84:	b913      	cbnz	r3, ca8c <_puts_r+0x1c>
    ca86:	4628      	mov	r0, r5
    ca88:	f000 fafa 	bl	d080 <__sinit>
    ca8c:	4b23      	ldr	r3, [pc, #140]	; (cb1c <_puts_r+0xac>)
    ca8e:	429c      	cmp	r4, r3
    ca90:	d117      	bne.n	cac2 <_puts_r+0x52>
    ca92:	686c      	ldr	r4, [r5, #4]
    ca94:	89a3      	ldrh	r3, [r4, #12]
    ca96:	071b      	lsls	r3, r3, #28
    ca98:	d51d      	bpl.n	cad6 <_puts_r+0x66>
    ca9a:	6923      	ldr	r3, [r4, #16]
    ca9c:	b1db      	cbz	r3, cad6 <_puts_r+0x66>
    ca9e:	3e01      	subs	r6, #1
    caa0:	68a3      	ldr	r3, [r4, #8]
    caa2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    caa6:	3b01      	subs	r3, #1
    caa8:	60a3      	str	r3, [r4, #8]
    caaa:	b9e9      	cbnz	r1, cae8 <_puts_r+0x78>
    caac:	2b00      	cmp	r3, #0
    caae:	da2e      	bge.n	cb0e <_puts_r+0x9e>
    cab0:	4622      	mov	r2, r4
    cab2:	210a      	movs	r1, #10
    cab4:	4628      	mov	r0, r5
    cab6:	f000 f931 	bl	cd1c <__swbuf_r>
    caba:	3001      	adds	r0, #1
    cabc:	d011      	beq.n	cae2 <_puts_r+0x72>
    cabe:	200a      	movs	r0, #10
    cac0:	bd70      	pop	{r4, r5, r6, pc}
    cac2:	4b17      	ldr	r3, [pc, #92]	; (cb20 <_puts_r+0xb0>)
    cac4:	429c      	cmp	r4, r3
    cac6:	d101      	bne.n	cacc <_puts_r+0x5c>
    cac8:	68ac      	ldr	r4, [r5, #8]
    caca:	e7e3      	b.n	ca94 <_puts_r+0x24>
    cacc:	4b15      	ldr	r3, [pc, #84]	; (cb24 <_puts_r+0xb4>)
    cace:	429c      	cmp	r4, r3
    cad0:	bf08      	it	eq
    cad2:	68ec      	ldreq	r4, [r5, #12]
    cad4:	e7de      	b.n	ca94 <_puts_r+0x24>
    cad6:	4621      	mov	r1, r4
    cad8:	4628      	mov	r0, r5
    cada:	f000 f971 	bl	cdc0 <__swsetup_r>
    cade:	2800      	cmp	r0, #0
    cae0:	d0dd      	beq.n	ca9e <_puts_r+0x2e>
    cae2:	f04f 30ff 	mov.w	r0, #4294967295
    cae6:	bd70      	pop	{r4, r5, r6, pc}
    cae8:	2b00      	cmp	r3, #0
    caea:	da04      	bge.n	caf6 <_puts_r+0x86>
    caec:	69a2      	ldr	r2, [r4, #24]
    caee:	4293      	cmp	r3, r2
    caf0:	db06      	blt.n	cb00 <_puts_r+0x90>
    caf2:	290a      	cmp	r1, #10
    caf4:	d004      	beq.n	cb00 <_puts_r+0x90>
    caf6:	6823      	ldr	r3, [r4, #0]
    caf8:	1c5a      	adds	r2, r3, #1
    cafa:	6022      	str	r2, [r4, #0]
    cafc:	7019      	strb	r1, [r3, #0]
    cafe:	e7cf      	b.n	caa0 <_puts_r+0x30>
    cb00:	4622      	mov	r2, r4
    cb02:	4628      	mov	r0, r5
    cb04:	f000 f90a 	bl	cd1c <__swbuf_r>
    cb08:	3001      	adds	r0, #1
    cb0a:	d1c9      	bne.n	caa0 <_puts_r+0x30>
    cb0c:	e7e9      	b.n	cae2 <_puts_r+0x72>
    cb0e:	6823      	ldr	r3, [r4, #0]
    cb10:	200a      	movs	r0, #10
    cb12:	1c5a      	adds	r2, r3, #1
    cb14:	6022      	str	r2, [r4, #0]
    cb16:	7018      	strb	r0, [r3, #0]
    cb18:	bd70      	pop	{r4, r5, r6, pc}
    cb1a:	bf00      	nop
    cb1c:	0000e9a8 	.word	0x0000e9a8
    cb20:	0000e9c8 	.word	0x0000e9c8
    cb24:	0000e988 	.word	0x0000e988

0000cb28 <puts>:
    cb28:	4b02      	ldr	r3, [pc, #8]	; (cb34 <puts+0xc>)
    cb2a:	4601      	mov	r1, r0
    cb2c:	6818      	ldr	r0, [r3, #0]
    cb2e:	f7ff bf9f 	b.w	ca70 <_puts_r>
    cb32:	bf00      	nop
    cb34:	20000558 	.word	0x20000558

0000cb38 <_sbrk_r>:
    cb38:	b538      	push	{r3, r4, r5, lr}
    cb3a:	4c06      	ldr	r4, [pc, #24]	; (cb54 <_sbrk_r+0x1c>)
    cb3c:	2300      	movs	r3, #0
    cb3e:	4605      	mov	r5, r0
    cb40:	4608      	mov	r0, r1
    cb42:	6023      	str	r3, [r4, #0]
    cb44:	f7f9 fbec 	bl	6320 <_sbrk>
    cb48:	1c43      	adds	r3, r0, #1
    cb4a:	d102      	bne.n	cb52 <_sbrk_r+0x1a>
    cb4c:	6823      	ldr	r3, [r4, #0]
    cb4e:	b103      	cbz	r3, cb52 <_sbrk_r+0x1a>
    cb50:	602b      	str	r3, [r5, #0]
    cb52:	bd38      	pop	{r3, r4, r5, pc}
    cb54:	20007d50 	.word	0x20007d50

0000cb58 <setbuf>:
    cb58:	2900      	cmp	r1, #0
    cb5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    cb5e:	bf0c      	ite	eq
    cb60:	2202      	moveq	r2, #2
    cb62:	2200      	movne	r2, #0
    cb64:	f000 b800 	b.w	cb68 <setvbuf>

0000cb68 <setvbuf>:
    cb68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    cb6c:	461d      	mov	r5, r3
    cb6e:	4b51      	ldr	r3, [pc, #324]	; (ccb4 <setvbuf+0x14c>)
    cb70:	681e      	ldr	r6, [r3, #0]
    cb72:	4604      	mov	r4, r0
    cb74:	460f      	mov	r7, r1
    cb76:	4690      	mov	r8, r2
    cb78:	b126      	cbz	r6, cb84 <setvbuf+0x1c>
    cb7a:	69b3      	ldr	r3, [r6, #24]
    cb7c:	b913      	cbnz	r3, cb84 <setvbuf+0x1c>
    cb7e:	4630      	mov	r0, r6
    cb80:	f000 fa7e 	bl	d080 <__sinit>
    cb84:	4b4c      	ldr	r3, [pc, #304]	; (ccb8 <setvbuf+0x150>)
    cb86:	429c      	cmp	r4, r3
    cb88:	d152      	bne.n	cc30 <setvbuf+0xc8>
    cb8a:	6874      	ldr	r4, [r6, #4]
    cb8c:	f1b8 0f02 	cmp.w	r8, #2
    cb90:	d006      	beq.n	cba0 <setvbuf+0x38>
    cb92:	f1b8 0f01 	cmp.w	r8, #1
    cb96:	f200 8089 	bhi.w	ccac <setvbuf+0x144>
    cb9a:	2d00      	cmp	r5, #0
    cb9c:	f2c0 8086 	blt.w	ccac <setvbuf+0x144>
    cba0:	4621      	mov	r1, r4
    cba2:	4630      	mov	r0, r6
    cba4:	f000 fa02 	bl	cfac <_fflush_r>
    cba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    cbaa:	b141      	cbz	r1, cbbe <setvbuf+0x56>
    cbac:	f104 0344 	add.w	r3, r4, #68	; 0x44
    cbb0:	4299      	cmp	r1, r3
    cbb2:	d002      	beq.n	cbba <setvbuf+0x52>
    cbb4:	4630      	mov	r0, r6
    cbb6:	f7ff fe97 	bl	c8e8 <_free_r>
    cbba:	2300      	movs	r3, #0
    cbbc:	6363      	str	r3, [r4, #52]	; 0x34
    cbbe:	2300      	movs	r3, #0
    cbc0:	61a3      	str	r3, [r4, #24]
    cbc2:	6063      	str	r3, [r4, #4]
    cbc4:	89a3      	ldrh	r3, [r4, #12]
    cbc6:	061b      	lsls	r3, r3, #24
    cbc8:	d503      	bpl.n	cbd2 <setvbuf+0x6a>
    cbca:	6921      	ldr	r1, [r4, #16]
    cbcc:	4630      	mov	r0, r6
    cbce:	f7ff fe8b 	bl	c8e8 <_free_r>
    cbd2:	89a3      	ldrh	r3, [r4, #12]
    cbd4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    cbd8:	f023 0303 	bic.w	r3, r3, #3
    cbdc:	f1b8 0f02 	cmp.w	r8, #2
    cbe0:	81a3      	strh	r3, [r4, #12]
    cbe2:	d05d      	beq.n	cca0 <setvbuf+0x138>
    cbe4:	ab01      	add	r3, sp, #4
    cbe6:	466a      	mov	r2, sp
    cbe8:	4621      	mov	r1, r4
    cbea:	4630      	mov	r0, r6
    cbec:	f000 fad2 	bl	d194 <__swhatbuf_r>
    cbf0:	89a3      	ldrh	r3, [r4, #12]
    cbf2:	4318      	orrs	r0, r3
    cbf4:	81a0      	strh	r0, [r4, #12]
    cbf6:	bb2d      	cbnz	r5, cc44 <setvbuf+0xdc>
    cbf8:	9d00      	ldr	r5, [sp, #0]
    cbfa:	4628      	mov	r0, r5
    cbfc:	f7ff fe58 	bl	c8b0 <malloc>
    cc00:	4607      	mov	r7, r0
    cc02:	2800      	cmp	r0, #0
    cc04:	d14e      	bne.n	cca4 <setvbuf+0x13c>
    cc06:	f8dd 9000 	ldr.w	r9, [sp]
    cc0a:	45a9      	cmp	r9, r5
    cc0c:	d13c      	bne.n	cc88 <setvbuf+0x120>
    cc0e:	f04f 30ff 	mov.w	r0, #4294967295
    cc12:	89a3      	ldrh	r3, [r4, #12]
    cc14:	f043 0302 	orr.w	r3, r3, #2
    cc18:	81a3      	strh	r3, [r4, #12]
    cc1a:	2300      	movs	r3, #0
    cc1c:	60a3      	str	r3, [r4, #8]
    cc1e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    cc22:	6023      	str	r3, [r4, #0]
    cc24:	6123      	str	r3, [r4, #16]
    cc26:	2301      	movs	r3, #1
    cc28:	6163      	str	r3, [r4, #20]
    cc2a:	b003      	add	sp, #12
    cc2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cc30:	4b22      	ldr	r3, [pc, #136]	; (ccbc <setvbuf+0x154>)
    cc32:	429c      	cmp	r4, r3
    cc34:	d101      	bne.n	cc3a <setvbuf+0xd2>
    cc36:	68b4      	ldr	r4, [r6, #8]
    cc38:	e7a8      	b.n	cb8c <setvbuf+0x24>
    cc3a:	4b21      	ldr	r3, [pc, #132]	; (ccc0 <setvbuf+0x158>)
    cc3c:	429c      	cmp	r4, r3
    cc3e:	bf08      	it	eq
    cc40:	68f4      	ldreq	r4, [r6, #12]
    cc42:	e7a3      	b.n	cb8c <setvbuf+0x24>
    cc44:	2f00      	cmp	r7, #0
    cc46:	d0d8      	beq.n	cbfa <setvbuf+0x92>
    cc48:	69b3      	ldr	r3, [r6, #24]
    cc4a:	b913      	cbnz	r3, cc52 <setvbuf+0xea>
    cc4c:	4630      	mov	r0, r6
    cc4e:	f000 fa17 	bl	d080 <__sinit>
    cc52:	f1b8 0f01 	cmp.w	r8, #1
    cc56:	bf08      	it	eq
    cc58:	89a3      	ldrheq	r3, [r4, #12]
    cc5a:	6027      	str	r7, [r4, #0]
    cc5c:	bf04      	itt	eq
    cc5e:	f043 0301 	orreq.w	r3, r3, #1
    cc62:	81a3      	strheq	r3, [r4, #12]
    cc64:	89a3      	ldrh	r3, [r4, #12]
    cc66:	6127      	str	r7, [r4, #16]
    cc68:	f013 0008 	ands.w	r0, r3, #8
    cc6c:	6165      	str	r5, [r4, #20]
    cc6e:	d01b      	beq.n	cca8 <setvbuf+0x140>
    cc70:	f013 0001 	ands.w	r0, r3, #1
    cc74:	bf18      	it	ne
    cc76:	426d      	negne	r5, r5
    cc78:	f04f 0300 	mov.w	r3, #0
    cc7c:	bf1d      	ittte	ne
    cc7e:	60a3      	strne	r3, [r4, #8]
    cc80:	61a5      	strne	r5, [r4, #24]
    cc82:	4618      	movne	r0, r3
    cc84:	60a5      	streq	r5, [r4, #8]
    cc86:	e7d0      	b.n	cc2a <setvbuf+0xc2>
    cc88:	4648      	mov	r0, r9
    cc8a:	f7ff fe11 	bl	c8b0 <malloc>
    cc8e:	4607      	mov	r7, r0
    cc90:	2800      	cmp	r0, #0
    cc92:	d0bc      	beq.n	cc0e <setvbuf+0xa6>
    cc94:	89a3      	ldrh	r3, [r4, #12]
    cc96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cc9a:	81a3      	strh	r3, [r4, #12]
    cc9c:	464d      	mov	r5, r9
    cc9e:	e7d3      	b.n	cc48 <setvbuf+0xe0>
    cca0:	2000      	movs	r0, #0
    cca2:	e7b6      	b.n	cc12 <setvbuf+0xaa>
    cca4:	46a9      	mov	r9, r5
    cca6:	e7f5      	b.n	cc94 <setvbuf+0x12c>
    cca8:	60a0      	str	r0, [r4, #8]
    ccaa:	e7be      	b.n	cc2a <setvbuf+0xc2>
    ccac:	f04f 30ff 	mov.w	r0, #4294967295
    ccb0:	e7bb      	b.n	cc2a <setvbuf+0xc2>
    ccb2:	bf00      	nop
    ccb4:	20000558 	.word	0x20000558
    ccb8:	0000e9a8 	.word	0x0000e9a8
    ccbc:	0000e9c8 	.word	0x0000e9c8
    ccc0:	0000e988 	.word	0x0000e988

0000ccc4 <siprintf>:
    ccc4:	b40e      	push	{r1, r2, r3}
    ccc6:	b500      	push	{lr}
    ccc8:	b09c      	sub	sp, #112	; 0x70
    ccca:	f44f 7102 	mov.w	r1, #520	; 0x208
    ccce:	ab1d      	add	r3, sp, #116	; 0x74
    ccd0:	f8ad 1014 	strh.w	r1, [sp, #20]
    ccd4:	9002      	str	r0, [sp, #8]
    ccd6:	9006      	str	r0, [sp, #24]
    ccd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ccdc:	480a      	ldr	r0, [pc, #40]	; (cd08 <siprintf+0x44>)
    ccde:	9104      	str	r1, [sp, #16]
    cce0:	9107      	str	r1, [sp, #28]
    cce2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cce6:	f853 2b04 	ldr.w	r2, [r3], #4
    ccea:	f8ad 1016 	strh.w	r1, [sp, #22]
    ccee:	6800      	ldr	r0, [r0, #0]
    ccf0:	9301      	str	r3, [sp, #4]
    ccf2:	a902      	add	r1, sp, #8
    ccf4:	f000 fb10 	bl	d318 <_svfiprintf_r>
    ccf8:	9b02      	ldr	r3, [sp, #8]
    ccfa:	2200      	movs	r2, #0
    ccfc:	701a      	strb	r2, [r3, #0]
    ccfe:	b01c      	add	sp, #112	; 0x70
    cd00:	f85d eb04 	ldr.w	lr, [sp], #4
    cd04:	b003      	add	sp, #12
    cd06:	4770      	bx	lr
    cd08:	20000558 	.word	0x20000558

0000cd0c <strlen>:
    cd0c:	4603      	mov	r3, r0
    cd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
    cd12:	2a00      	cmp	r2, #0
    cd14:	d1fb      	bne.n	cd0e <strlen+0x2>
    cd16:	1a18      	subs	r0, r3, r0
    cd18:	3801      	subs	r0, #1
    cd1a:	4770      	bx	lr

0000cd1c <__swbuf_r>:
    cd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd1e:	460e      	mov	r6, r1
    cd20:	4614      	mov	r4, r2
    cd22:	4605      	mov	r5, r0
    cd24:	b118      	cbz	r0, cd2e <__swbuf_r+0x12>
    cd26:	6983      	ldr	r3, [r0, #24]
    cd28:	b90b      	cbnz	r3, cd2e <__swbuf_r+0x12>
    cd2a:	f000 f9a9 	bl	d080 <__sinit>
    cd2e:	4b21      	ldr	r3, [pc, #132]	; (cdb4 <__swbuf_r+0x98>)
    cd30:	429c      	cmp	r4, r3
    cd32:	d12a      	bne.n	cd8a <__swbuf_r+0x6e>
    cd34:	686c      	ldr	r4, [r5, #4]
    cd36:	69a3      	ldr	r3, [r4, #24]
    cd38:	60a3      	str	r3, [r4, #8]
    cd3a:	89a3      	ldrh	r3, [r4, #12]
    cd3c:	071a      	lsls	r2, r3, #28
    cd3e:	d52e      	bpl.n	cd9e <__swbuf_r+0x82>
    cd40:	6923      	ldr	r3, [r4, #16]
    cd42:	b363      	cbz	r3, cd9e <__swbuf_r+0x82>
    cd44:	6923      	ldr	r3, [r4, #16]
    cd46:	6820      	ldr	r0, [r4, #0]
    cd48:	1ac0      	subs	r0, r0, r3
    cd4a:	6963      	ldr	r3, [r4, #20]
    cd4c:	b2f6      	uxtb	r6, r6
    cd4e:	4298      	cmp	r0, r3
    cd50:	4637      	mov	r7, r6
    cd52:	db04      	blt.n	cd5e <__swbuf_r+0x42>
    cd54:	4621      	mov	r1, r4
    cd56:	4628      	mov	r0, r5
    cd58:	f000 f928 	bl	cfac <_fflush_r>
    cd5c:	bb28      	cbnz	r0, cdaa <__swbuf_r+0x8e>
    cd5e:	68a3      	ldr	r3, [r4, #8]
    cd60:	3b01      	subs	r3, #1
    cd62:	60a3      	str	r3, [r4, #8]
    cd64:	6823      	ldr	r3, [r4, #0]
    cd66:	1c5a      	adds	r2, r3, #1
    cd68:	6022      	str	r2, [r4, #0]
    cd6a:	701e      	strb	r6, [r3, #0]
    cd6c:	6963      	ldr	r3, [r4, #20]
    cd6e:	3001      	adds	r0, #1
    cd70:	4298      	cmp	r0, r3
    cd72:	d004      	beq.n	cd7e <__swbuf_r+0x62>
    cd74:	89a3      	ldrh	r3, [r4, #12]
    cd76:	07db      	lsls	r3, r3, #31
    cd78:	d519      	bpl.n	cdae <__swbuf_r+0x92>
    cd7a:	2e0a      	cmp	r6, #10
    cd7c:	d117      	bne.n	cdae <__swbuf_r+0x92>
    cd7e:	4621      	mov	r1, r4
    cd80:	4628      	mov	r0, r5
    cd82:	f000 f913 	bl	cfac <_fflush_r>
    cd86:	b190      	cbz	r0, cdae <__swbuf_r+0x92>
    cd88:	e00f      	b.n	cdaa <__swbuf_r+0x8e>
    cd8a:	4b0b      	ldr	r3, [pc, #44]	; (cdb8 <__swbuf_r+0x9c>)
    cd8c:	429c      	cmp	r4, r3
    cd8e:	d101      	bne.n	cd94 <__swbuf_r+0x78>
    cd90:	68ac      	ldr	r4, [r5, #8]
    cd92:	e7d0      	b.n	cd36 <__swbuf_r+0x1a>
    cd94:	4b09      	ldr	r3, [pc, #36]	; (cdbc <__swbuf_r+0xa0>)
    cd96:	429c      	cmp	r4, r3
    cd98:	bf08      	it	eq
    cd9a:	68ec      	ldreq	r4, [r5, #12]
    cd9c:	e7cb      	b.n	cd36 <__swbuf_r+0x1a>
    cd9e:	4621      	mov	r1, r4
    cda0:	4628      	mov	r0, r5
    cda2:	f000 f80d 	bl	cdc0 <__swsetup_r>
    cda6:	2800      	cmp	r0, #0
    cda8:	d0cc      	beq.n	cd44 <__swbuf_r+0x28>
    cdaa:	f04f 37ff 	mov.w	r7, #4294967295
    cdae:	4638      	mov	r0, r7
    cdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdb2:	bf00      	nop
    cdb4:	0000e9a8 	.word	0x0000e9a8
    cdb8:	0000e9c8 	.word	0x0000e9c8
    cdbc:	0000e988 	.word	0x0000e988

0000cdc0 <__swsetup_r>:
    cdc0:	4b32      	ldr	r3, [pc, #200]	; (ce8c <__swsetup_r+0xcc>)
    cdc2:	b570      	push	{r4, r5, r6, lr}
    cdc4:	681d      	ldr	r5, [r3, #0]
    cdc6:	4606      	mov	r6, r0
    cdc8:	460c      	mov	r4, r1
    cdca:	b125      	cbz	r5, cdd6 <__swsetup_r+0x16>
    cdcc:	69ab      	ldr	r3, [r5, #24]
    cdce:	b913      	cbnz	r3, cdd6 <__swsetup_r+0x16>
    cdd0:	4628      	mov	r0, r5
    cdd2:	f000 f955 	bl	d080 <__sinit>
    cdd6:	4b2e      	ldr	r3, [pc, #184]	; (ce90 <__swsetup_r+0xd0>)
    cdd8:	429c      	cmp	r4, r3
    cdda:	d10f      	bne.n	cdfc <__swsetup_r+0x3c>
    cddc:	686c      	ldr	r4, [r5, #4]
    cdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cde2:	b29a      	uxth	r2, r3
    cde4:	0715      	lsls	r5, r2, #28
    cde6:	d42c      	bmi.n	ce42 <__swsetup_r+0x82>
    cde8:	06d0      	lsls	r0, r2, #27
    cdea:	d411      	bmi.n	ce10 <__swsetup_r+0x50>
    cdec:	2209      	movs	r2, #9
    cdee:	6032      	str	r2, [r6, #0]
    cdf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cdf4:	81a3      	strh	r3, [r4, #12]
    cdf6:	f04f 30ff 	mov.w	r0, #4294967295
    cdfa:	bd70      	pop	{r4, r5, r6, pc}
    cdfc:	4b25      	ldr	r3, [pc, #148]	; (ce94 <__swsetup_r+0xd4>)
    cdfe:	429c      	cmp	r4, r3
    ce00:	d101      	bne.n	ce06 <__swsetup_r+0x46>
    ce02:	68ac      	ldr	r4, [r5, #8]
    ce04:	e7eb      	b.n	cdde <__swsetup_r+0x1e>
    ce06:	4b24      	ldr	r3, [pc, #144]	; (ce98 <__swsetup_r+0xd8>)
    ce08:	429c      	cmp	r4, r3
    ce0a:	bf08      	it	eq
    ce0c:	68ec      	ldreq	r4, [r5, #12]
    ce0e:	e7e6      	b.n	cdde <__swsetup_r+0x1e>
    ce10:	0751      	lsls	r1, r2, #29
    ce12:	d512      	bpl.n	ce3a <__swsetup_r+0x7a>
    ce14:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ce16:	b141      	cbz	r1, ce2a <__swsetup_r+0x6a>
    ce18:	f104 0344 	add.w	r3, r4, #68	; 0x44
    ce1c:	4299      	cmp	r1, r3
    ce1e:	d002      	beq.n	ce26 <__swsetup_r+0x66>
    ce20:	4630      	mov	r0, r6
    ce22:	f7ff fd61 	bl	c8e8 <_free_r>
    ce26:	2300      	movs	r3, #0
    ce28:	6363      	str	r3, [r4, #52]	; 0x34
    ce2a:	89a3      	ldrh	r3, [r4, #12]
    ce2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    ce30:	81a3      	strh	r3, [r4, #12]
    ce32:	2300      	movs	r3, #0
    ce34:	6063      	str	r3, [r4, #4]
    ce36:	6923      	ldr	r3, [r4, #16]
    ce38:	6023      	str	r3, [r4, #0]
    ce3a:	89a3      	ldrh	r3, [r4, #12]
    ce3c:	f043 0308 	orr.w	r3, r3, #8
    ce40:	81a3      	strh	r3, [r4, #12]
    ce42:	6923      	ldr	r3, [r4, #16]
    ce44:	b94b      	cbnz	r3, ce5a <__swsetup_r+0x9a>
    ce46:	89a3      	ldrh	r3, [r4, #12]
    ce48:	f403 7320 	and.w	r3, r3, #640	; 0x280
    ce4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ce50:	d003      	beq.n	ce5a <__swsetup_r+0x9a>
    ce52:	4621      	mov	r1, r4
    ce54:	4630      	mov	r0, r6
    ce56:	f000 f9c1 	bl	d1dc <__smakebuf_r>
    ce5a:	89a2      	ldrh	r2, [r4, #12]
    ce5c:	f012 0301 	ands.w	r3, r2, #1
    ce60:	d00c      	beq.n	ce7c <__swsetup_r+0xbc>
    ce62:	2300      	movs	r3, #0
    ce64:	60a3      	str	r3, [r4, #8]
    ce66:	6963      	ldr	r3, [r4, #20]
    ce68:	425b      	negs	r3, r3
    ce6a:	61a3      	str	r3, [r4, #24]
    ce6c:	6923      	ldr	r3, [r4, #16]
    ce6e:	b953      	cbnz	r3, ce86 <__swsetup_r+0xc6>
    ce70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ce74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    ce78:	d1ba      	bne.n	cdf0 <__swsetup_r+0x30>
    ce7a:	bd70      	pop	{r4, r5, r6, pc}
    ce7c:	0792      	lsls	r2, r2, #30
    ce7e:	bf58      	it	pl
    ce80:	6963      	ldrpl	r3, [r4, #20]
    ce82:	60a3      	str	r3, [r4, #8]
    ce84:	e7f2      	b.n	ce6c <__swsetup_r+0xac>
    ce86:	2000      	movs	r0, #0
    ce88:	e7f7      	b.n	ce7a <__swsetup_r+0xba>
    ce8a:	bf00      	nop
    ce8c:	20000558 	.word	0x20000558
    ce90:	0000e9a8 	.word	0x0000e9a8
    ce94:	0000e9c8 	.word	0x0000e9c8
    ce98:	0000e988 	.word	0x0000e988

0000ce9c <__sflush_r>:
    ce9c:	898a      	ldrh	r2, [r1, #12]
    ce9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cea2:	4605      	mov	r5, r0
    cea4:	0710      	lsls	r0, r2, #28
    cea6:	460c      	mov	r4, r1
    cea8:	d45a      	bmi.n	cf60 <__sflush_r+0xc4>
    ceaa:	684b      	ldr	r3, [r1, #4]
    ceac:	2b00      	cmp	r3, #0
    ceae:	dc05      	bgt.n	cebc <__sflush_r+0x20>
    ceb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	dc02      	bgt.n	cebc <__sflush_r+0x20>
    ceb6:	2000      	movs	r0, #0
    ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    cebe:	2e00      	cmp	r6, #0
    cec0:	d0f9      	beq.n	ceb6 <__sflush_r+0x1a>
    cec2:	2300      	movs	r3, #0
    cec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    cec8:	682f      	ldr	r7, [r5, #0]
    ceca:	602b      	str	r3, [r5, #0]
    cecc:	d033      	beq.n	cf36 <__sflush_r+0x9a>
    cece:	6d60      	ldr	r0, [r4, #84]	; 0x54
    ced0:	89a3      	ldrh	r3, [r4, #12]
    ced2:	075a      	lsls	r2, r3, #29
    ced4:	d505      	bpl.n	cee2 <__sflush_r+0x46>
    ced6:	6863      	ldr	r3, [r4, #4]
    ced8:	1ac0      	subs	r0, r0, r3
    ceda:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cedc:	b10b      	cbz	r3, cee2 <__sflush_r+0x46>
    cede:	6c23      	ldr	r3, [r4, #64]	; 0x40
    cee0:	1ac0      	subs	r0, r0, r3
    cee2:	2300      	movs	r3, #0
    cee4:	4602      	mov	r2, r0
    cee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    cee8:	6a21      	ldr	r1, [r4, #32]
    ceea:	4628      	mov	r0, r5
    ceec:	47b0      	blx	r6
    ceee:	1c43      	adds	r3, r0, #1
    cef0:	89a3      	ldrh	r3, [r4, #12]
    cef2:	d106      	bne.n	cf02 <__sflush_r+0x66>
    cef4:	6829      	ldr	r1, [r5, #0]
    cef6:	291d      	cmp	r1, #29
    cef8:	d84b      	bhi.n	cf92 <__sflush_r+0xf6>
    cefa:	4a2b      	ldr	r2, [pc, #172]	; (cfa8 <__sflush_r+0x10c>)
    cefc:	40ca      	lsrs	r2, r1
    cefe:	07d6      	lsls	r6, r2, #31
    cf00:	d547      	bpl.n	cf92 <__sflush_r+0xf6>
    cf02:	2200      	movs	r2, #0
    cf04:	6062      	str	r2, [r4, #4]
    cf06:	04d9      	lsls	r1, r3, #19
    cf08:	6922      	ldr	r2, [r4, #16]
    cf0a:	6022      	str	r2, [r4, #0]
    cf0c:	d504      	bpl.n	cf18 <__sflush_r+0x7c>
    cf0e:	1c42      	adds	r2, r0, #1
    cf10:	d101      	bne.n	cf16 <__sflush_r+0x7a>
    cf12:	682b      	ldr	r3, [r5, #0]
    cf14:	b903      	cbnz	r3, cf18 <__sflush_r+0x7c>
    cf16:	6560      	str	r0, [r4, #84]	; 0x54
    cf18:	6b61      	ldr	r1, [r4, #52]	; 0x34
    cf1a:	602f      	str	r7, [r5, #0]
    cf1c:	2900      	cmp	r1, #0
    cf1e:	d0ca      	beq.n	ceb6 <__sflush_r+0x1a>
    cf20:	f104 0344 	add.w	r3, r4, #68	; 0x44
    cf24:	4299      	cmp	r1, r3
    cf26:	d002      	beq.n	cf2e <__sflush_r+0x92>
    cf28:	4628      	mov	r0, r5
    cf2a:	f7ff fcdd 	bl	c8e8 <_free_r>
    cf2e:	2000      	movs	r0, #0
    cf30:	6360      	str	r0, [r4, #52]	; 0x34
    cf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf36:	6a21      	ldr	r1, [r4, #32]
    cf38:	2301      	movs	r3, #1
    cf3a:	4628      	mov	r0, r5
    cf3c:	47b0      	blx	r6
    cf3e:	1c41      	adds	r1, r0, #1
    cf40:	d1c6      	bne.n	ced0 <__sflush_r+0x34>
    cf42:	682b      	ldr	r3, [r5, #0]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d0c3      	beq.n	ced0 <__sflush_r+0x34>
    cf48:	2b1d      	cmp	r3, #29
    cf4a:	d001      	beq.n	cf50 <__sflush_r+0xb4>
    cf4c:	2b16      	cmp	r3, #22
    cf4e:	d101      	bne.n	cf54 <__sflush_r+0xb8>
    cf50:	602f      	str	r7, [r5, #0]
    cf52:	e7b0      	b.n	ceb6 <__sflush_r+0x1a>
    cf54:	89a3      	ldrh	r3, [r4, #12]
    cf56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf5a:	81a3      	strh	r3, [r4, #12]
    cf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf60:	690f      	ldr	r7, [r1, #16]
    cf62:	2f00      	cmp	r7, #0
    cf64:	d0a7      	beq.n	ceb6 <__sflush_r+0x1a>
    cf66:	0793      	lsls	r3, r2, #30
    cf68:	680e      	ldr	r6, [r1, #0]
    cf6a:	bf08      	it	eq
    cf6c:	694b      	ldreq	r3, [r1, #20]
    cf6e:	600f      	str	r7, [r1, #0]
    cf70:	bf18      	it	ne
    cf72:	2300      	movne	r3, #0
    cf74:	eba6 0807 	sub.w	r8, r6, r7
    cf78:	608b      	str	r3, [r1, #8]
    cf7a:	f1b8 0f00 	cmp.w	r8, #0
    cf7e:	dd9a      	ble.n	ceb6 <__sflush_r+0x1a>
    cf80:	4643      	mov	r3, r8
    cf82:	463a      	mov	r2, r7
    cf84:	6a21      	ldr	r1, [r4, #32]
    cf86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    cf88:	4628      	mov	r0, r5
    cf8a:	47b0      	blx	r6
    cf8c:	2800      	cmp	r0, #0
    cf8e:	dc07      	bgt.n	cfa0 <__sflush_r+0x104>
    cf90:	89a3      	ldrh	r3, [r4, #12]
    cf92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf96:	81a3      	strh	r3, [r4, #12]
    cf98:	f04f 30ff 	mov.w	r0, #4294967295
    cf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfa0:	4407      	add	r7, r0
    cfa2:	eba8 0800 	sub.w	r8, r8, r0
    cfa6:	e7e8      	b.n	cf7a <__sflush_r+0xde>
    cfa8:	20400001 	.word	0x20400001

0000cfac <_fflush_r>:
    cfac:	b538      	push	{r3, r4, r5, lr}
    cfae:	690b      	ldr	r3, [r1, #16]
    cfb0:	4605      	mov	r5, r0
    cfb2:	460c      	mov	r4, r1
    cfb4:	b1db      	cbz	r3, cfee <_fflush_r+0x42>
    cfb6:	b118      	cbz	r0, cfc0 <_fflush_r+0x14>
    cfb8:	6983      	ldr	r3, [r0, #24]
    cfba:	b90b      	cbnz	r3, cfc0 <_fflush_r+0x14>
    cfbc:	f000 f860 	bl	d080 <__sinit>
    cfc0:	4b0c      	ldr	r3, [pc, #48]	; (cff4 <_fflush_r+0x48>)
    cfc2:	429c      	cmp	r4, r3
    cfc4:	d109      	bne.n	cfda <_fflush_r+0x2e>
    cfc6:	686c      	ldr	r4, [r5, #4]
    cfc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cfcc:	b17b      	cbz	r3, cfee <_fflush_r+0x42>
    cfce:	4621      	mov	r1, r4
    cfd0:	4628      	mov	r0, r5
    cfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cfd6:	f7ff bf61 	b.w	ce9c <__sflush_r>
    cfda:	4b07      	ldr	r3, [pc, #28]	; (cff8 <_fflush_r+0x4c>)
    cfdc:	429c      	cmp	r4, r3
    cfde:	d101      	bne.n	cfe4 <_fflush_r+0x38>
    cfe0:	68ac      	ldr	r4, [r5, #8]
    cfe2:	e7f1      	b.n	cfc8 <_fflush_r+0x1c>
    cfe4:	4b05      	ldr	r3, [pc, #20]	; (cffc <_fflush_r+0x50>)
    cfe6:	429c      	cmp	r4, r3
    cfe8:	bf08      	it	eq
    cfea:	68ec      	ldreq	r4, [r5, #12]
    cfec:	e7ec      	b.n	cfc8 <_fflush_r+0x1c>
    cfee:	2000      	movs	r0, #0
    cff0:	bd38      	pop	{r3, r4, r5, pc}
    cff2:	bf00      	nop
    cff4:	0000e9a8 	.word	0x0000e9a8
    cff8:	0000e9c8 	.word	0x0000e9c8
    cffc:	0000e988 	.word	0x0000e988

0000d000 <_cleanup_r>:
    d000:	4901      	ldr	r1, [pc, #4]	; (d008 <_cleanup_r+0x8>)
    d002:	f000 b8a9 	b.w	d158 <_fwalk_reent>
    d006:	bf00      	nop
    d008:	0000cfad 	.word	0x0000cfad

0000d00c <std.isra.0>:
    d00c:	2300      	movs	r3, #0
    d00e:	b510      	push	{r4, lr}
    d010:	4604      	mov	r4, r0
    d012:	6003      	str	r3, [r0, #0]
    d014:	6043      	str	r3, [r0, #4]
    d016:	6083      	str	r3, [r0, #8]
    d018:	8181      	strh	r1, [r0, #12]
    d01a:	6643      	str	r3, [r0, #100]	; 0x64
    d01c:	81c2      	strh	r2, [r0, #14]
    d01e:	6103      	str	r3, [r0, #16]
    d020:	6143      	str	r3, [r0, #20]
    d022:	6183      	str	r3, [r0, #24]
    d024:	4619      	mov	r1, r3
    d026:	2208      	movs	r2, #8
    d028:	305c      	adds	r0, #92	; 0x5c
    d02a:	f7ff fc54 	bl	c8d6 <memset>
    d02e:	4b05      	ldr	r3, [pc, #20]	; (d044 <std.isra.0+0x38>)
    d030:	6263      	str	r3, [r4, #36]	; 0x24
    d032:	4b05      	ldr	r3, [pc, #20]	; (d048 <std.isra.0+0x3c>)
    d034:	62a3      	str	r3, [r4, #40]	; 0x28
    d036:	4b05      	ldr	r3, [pc, #20]	; (d04c <std.isra.0+0x40>)
    d038:	62e3      	str	r3, [r4, #44]	; 0x2c
    d03a:	4b05      	ldr	r3, [pc, #20]	; (d050 <std.isra.0+0x44>)
    d03c:	6224      	str	r4, [r4, #32]
    d03e:	6323      	str	r3, [r4, #48]	; 0x30
    d040:	bd10      	pop	{r4, pc}
    d042:	bf00      	nop
    d044:	0000daa9 	.word	0x0000daa9
    d048:	0000dacb 	.word	0x0000dacb
    d04c:	0000db03 	.word	0x0000db03
    d050:	0000db27 	.word	0x0000db27

0000d054 <__sfmoreglue>:
    d054:	b570      	push	{r4, r5, r6, lr}
    d056:	1e4a      	subs	r2, r1, #1
    d058:	2568      	movs	r5, #104	; 0x68
    d05a:	4355      	muls	r5, r2
    d05c:	460e      	mov	r6, r1
    d05e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    d062:	f7ff fc8f 	bl	c984 <_malloc_r>
    d066:	4604      	mov	r4, r0
    d068:	b140      	cbz	r0, d07c <__sfmoreglue+0x28>
    d06a:	2100      	movs	r1, #0
    d06c:	e880 0042 	stmia.w	r0, {r1, r6}
    d070:	300c      	adds	r0, #12
    d072:	60a0      	str	r0, [r4, #8]
    d074:	f105 0268 	add.w	r2, r5, #104	; 0x68
    d078:	f7ff fc2d 	bl	c8d6 <memset>
    d07c:	4620      	mov	r0, r4
    d07e:	bd70      	pop	{r4, r5, r6, pc}

0000d080 <__sinit>:
    d080:	6983      	ldr	r3, [r0, #24]
    d082:	b510      	push	{r4, lr}
    d084:	4604      	mov	r4, r0
    d086:	bb33      	cbnz	r3, d0d6 <__sinit+0x56>
    d088:	6483      	str	r3, [r0, #72]	; 0x48
    d08a:	64c3      	str	r3, [r0, #76]	; 0x4c
    d08c:	6503      	str	r3, [r0, #80]	; 0x50
    d08e:	4b12      	ldr	r3, [pc, #72]	; (d0d8 <__sinit+0x58>)
    d090:	4a12      	ldr	r2, [pc, #72]	; (d0dc <__sinit+0x5c>)
    d092:	681b      	ldr	r3, [r3, #0]
    d094:	6282      	str	r2, [r0, #40]	; 0x28
    d096:	4298      	cmp	r0, r3
    d098:	bf04      	itt	eq
    d09a:	2301      	moveq	r3, #1
    d09c:	6183      	streq	r3, [r0, #24]
    d09e:	f000 f81f 	bl	d0e0 <__sfp>
    d0a2:	6060      	str	r0, [r4, #4]
    d0a4:	4620      	mov	r0, r4
    d0a6:	f000 f81b 	bl	d0e0 <__sfp>
    d0aa:	60a0      	str	r0, [r4, #8]
    d0ac:	4620      	mov	r0, r4
    d0ae:	f000 f817 	bl	d0e0 <__sfp>
    d0b2:	2200      	movs	r2, #0
    d0b4:	60e0      	str	r0, [r4, #12]
    d0b6:	2104      	movs	r1, #4
    d0b8:	6860      	ldr	r0, [r4, #4]
    d0ba:	f7ff ffa7 	bl	d00c <std.isra.0>
    d0be:	2201      	movs	r2, #1
    d0c0:	2109      	movs	r1, #9
    d0c2:	68a0      	ldr	r0, [r4, #8]
    d0c4:	f7ff ffa2 	bl	d00c <std.isra.0>
    d0c8:	2202      	movs	r2, #2
    d0ca:	2112      	movs	r1, #18
    d0cc:	68e0      	ldr	r0, [r4, #12]
    d0ce:	f7ff ff9d 	bl	d00c <std.isra.0>
    d0d2:	2301      	movs	r3, #1
    d0d4:	61a3      	str	r3, [r4, #24]
    d0d6:	bd10      	pop	{r4, pc}
    d0d8:	0000e984 	.word	0x0000e984
    d0dc:	0000d001 	.word	0x0000d001

0000d0e0 <__sfp>:
    d0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0e2:	4b1c      	ldr	r3, [pc, #112]	; (d154 <__sfp+0x74>)
    d0e4:	681e      	ldr	r6, [r3, #0]
    d0e6:	69b3      	ldr	r3, [r6, #24]
    d0e8:	4607      	mov	r7, r0
    d0ea:	b913      	cbnz	r3, d0f2 <__sfp+0x12>
    d0ec:	4630      	mov	r0, r6
    d0ee:	f7ff ffc7 	bl	d080 <__sinit>
    d0f2:	3648      	adds	r6, #72	; 0x48
    d0f4:	68b4      	ldr	r4, [r6, #8]
    d0f6:	6873      	ldr	r3, [r6, #4]
    d0f8:	3b01      	subs	r3, #1
    d0fa:	d503      	bpl.n	d104 <__sfp+0x24>
    d0fc:	6833      	ldr	r3, [r6, #0]
    d0fe:	b133      	cbz	r3, d10e <__sfp+0x2e>
    d100:	6836      	ldr	r6, [r6, #0]
    d102:	e7f7      	b.n	d0f4 <__sfp+0x14>
    d104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    d108:	b16d      	cbz	r5, d126 <__sfp+0x46>
    d10a:	3468      	adds	r4, #104	; 0x68
    d10c:	e7f4      	b.n	d0f8 <__sfp+0x18>
    d10e:	2104      	movs	r1, #4
    d110:	4638      	mov	r0, r7
    d112:	f7ff ff9f 	bl	d054 <__sfmoreglue>
    d116:	6030      	str	r0, [r6, #0]
    d118:	2800      	cmp	r0, #0
    d11a:	d1f1      	bne.n	d100 <__sfp+0x20>
    d11c:	230c      	movs	r3, #12
    d11e:	603b      	str	r3, [r7, #0]
    d120:	4604      	mov	r4, r0
    d122:	4620      	mov	r0, r4
    d124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d126:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d12a:	81e3      	strh	r3, [r4, #14]
    d12c:	2301      	movs	r3, #1
    d12e:	81a3      	strh	r3, [r4, #12]
    d130:	6665      	str	r5, [r4, #100]	; 0x64
    d132:	6025      	str	r5, [r4, #0]
    d134:	60a5      	str	r5, [r4, #8]
    d136:	6065      	str	r5, [r4, #4]
    d138:	6125      	str	r5, [r4, #16]
    d13a:	6165      	str	r5, [r4, #20]
    d13c:	61a5      	str	r5, [r4, #24]
    d13e:	2208      	movs	r2, #8
    d140:	4629      	mov	r1, r5
    d142:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d146:	f7ff fbc6 	bl	c8d6 <memset>
    d14a:	6365      	str	r5, [r4, #52]	; 0x34
    d14c:	63a5      	str	r5, [r4, #56]	; 0x38
    d14e:	64a5      	str	r5, [r4, #72]	; 0x48
    d150:	64e5      	str	r5, [r4, #76]	; 0x4c
    d152:	e7e6      	b.n	d122 <__sfp+0x42>
    d154:	0000e984 	.word	0x0000e984

0000d158 <_fwalk_reent>:
    d158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d15c:	4680      	mov	r8, r0
    d15e:	4689      	mov	r9, r1
    d160:	f100 0448 	add.w	r4, r0, #72	; 0x48
    d164:	2600      	movs	r6, #0
    d166:	b914      	cbnz	r4, d16e <_fwalk_reent+0x16>
    d168:	4630      	mov	r0, r6
    d16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d16e:	68a5      	ldr	r5, [r4, #8]
    d170:	6867      	ldr	r7, [r4, #4]
    d172:	3f01      	subs	r7, #1
    d174:	d501      	bpl.n	d17a <_fwalk_reent+0x22>
    d176:	6824      	ldr	r4, [r4, #0]
    d178:	e7f5      	b.n	d166 <_fwalk_reent+0xe>
    d17a:	89ab      	ldrh	r3, [r5, #12]
    d17c:	2b01      	cmp	r3, #1
    d17e:	d907      	bls.n	d190 <_fwalk_reent+0x38>
    d180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    d184:	3301      	adds	r3, #1
    d186:	d003      	beq.n	d190 <_fwalk_reent+0x38>
    d188:	4629      	mov	r1, r5
    d18a:	4640      	mov	r0, r8
    d18c:	47c8      	blx	r9
    d18e:	4306      	orrs	r6, r0
    d190:	3568      	adds	r5, #104	; 0x68
    d192:	e7ee      	b.n	d172 <_fwalk_reent+0x1a>

0000d194 <__swhatbuf_r>:
    d194:	b570      	push	{r4, r5, r6, lr}
    d196:	460e      	mov	r6, r1
    d198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d19c:	2900      	cmp	r1, #0
    d19e:	b090      	sub	sp, #64	; 0x40
    d1a0:	4614      	mov	r4, r2
    d1a2:	461d      	mov	r5, r3
    d1a4:	da07      	bge.n	d1b6 <__swhatbuf_r+0x22>
    d1a6:	2300      	movs	r3, #0
    d1a8:	602b      	str	r3, [r5, #0]
    d1aa:	89b3      	ldrh	r3, [r6, #12]
    d1ac:	061a      	lsls	r2, r3, #24
    d1ae:	d410      	bmi.n	d1d2 <__swhatbuf_r+0x3e>
    d1b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d1b4:	e00e      	b.n	d1d4 <__swhatbuf_r+0x40>
    d1b6:	aa01      	add	r2, sp, #4
    d1b8:	f000 fcdc 	bl	db74 <_fstat_r>
    d1bc:	2800      	cmp	r0, #0
    d1be:	dbf2      	blt.n	d1a6 <__swhatbuf_r+0x12>
    d1c0:	9a02      	ldr	r2, [sp, #8]
    d1c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    d1c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    d1ca:	425a      	negs	r2, r3
    d1cc:	415a      	adcs	r2, r3
    d1ce:	602a      	str	r2, [r5, #0]
    d1d0:	e7ee      	b.n	d1b0 <__swhatbuf_r+0x1c>
    d1d2:	2340      	movs	r3, #64	; 0x40
    d1d4:	2000      	movs	r0, #0
    d1d6:	6023      	str	r3, [r4, #0]
    d1d8:	b010      	add	sp, #64	; 0x40
    d1da:	bd70      	pop	{r4, r5, r6, pc}

0000d1dc <__smakebuf_r>:
    d1dc:	898b      	ldrh	r3, [r1, #12]
    d1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d1e0:	079d      	lsls	r5, r3, #30
    d1e2:	4606      	mov	r6, r0
    d1e4:	460c      	mov	r4, r1
    d1e6:	d507      	bpl.n	d1f8 <__smakebuf_r+0x1c>
    d1e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    d1ec:	6023      	str	r3, [r4, #0]
    d1ee:	6123      	str	r3, [r4, #16]
    d1f0:	2301      	movs	r3, #1
    d1f2:	6163      	str	r3, [r4, #20]
    d1f4:	b002      	add	sp, #8
    d1f6:	bd70      	pop	{r4, r5, r6, pc}
    d1f8:	ab01      	add	r3, sp, #4
    d1fa:	466a      	mov	r2, sp
    d1fc:	f7ff ffca 	bl	d194 <__swhatbuf_r>
    d200:	9900      	ldr	r1, [sp, #0]
    d202:	4605      	mov	r5, r0
    d204:	4630      	mov	r0, r6
    d206:	f7ff fbbd 	bl	c984 <_malloc_r>
    d20a:	b948      	cbnz	r0, d220 <__smakebuf_r+0x44>
    d20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d210:	059a      	lsls	r2, r3, #22
    d212:	d4ef      	bmi.n	d1f4 <__smakebuf_r+0x18>
    d214:	f023 0303 	bic.w	r3, r3, #3
    d218:	f043 0302 	orr.w	r3, r3, #2
    d21c:	81a3      	strh	r3, [r4, #12]
    d21e:	e7e3      	b.n	d1e8 <__smakebuf_r+0xc>
    d220:	4b0d      	ldr	r3, [pc, #52]	; (d258 <__smakebuf_r+0x7c>)
    d222:	62b3      	str	r3, [r6, #40]	; 0x28
    d224:	89a3      	ldrh	r3, [r4, #12]
    d226:	6020      	str	r0, [r4, #0]
    d228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d22c:	81a3      	strh	r3, [r4, #12]
    d22e:	9b00      	ldr	r3, [sp, #0]
    d230:	6163      	str	r3, [r4, #20]
    d232:	9b01      	ldr	r3, [sp, #4]
    d234:	6120      	str	r0, [r4, #16]
    d236:	b15b      	cbz	r3, d250 <__smakebuf_r+0x74>
    d238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d23c:	4630      	mov	r0, r6
    d23e:	f000 fcab 	bl	db98 <_isatty_r>
    d242:	b128      	cbz	r0, d250 <__smakebuf_r+0x74>
    d244:	89a3      	ldrh	r3, [r4, #12]
    d246:	f023 0303 	bic.w	r3, r3, #3
    d24a:	f043 0301 	orr.w	r3, r3, #1
    d24e:	81a3      	strh	r3, [r4, #12]
    d250:	89a3      	ldrh	r3, [r4, #12]
    d252:	431d      	orrs	r5, r3
    d254:	81a5      	strh	r5, [r4, #12]
    d256:	e7cd      	b.n	d1f4 <__smakebuf_r+0x18>
    d258:	0000d001 	.word	0x0000d001

0000d25c <__malloc_lock>:
    d25c:	4770      	bx	lr

0000d25e <__malloc_unlock>:
    d25e:	4770      	bx	lr

0000d260 <__ssputs_r>:
    d260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d264:	688e      	ldr	r6, [r1, #8]
    d266:	429e      	cmp	r6, r3
    d268:	4682      	mov	sl, r0
    d26a:	460c      	mov	r4, r1
    d26c:	4691      	mov	r9, r2
    d26e:	4698      	mov	r8, r3
    d270:	d835      	bhi.n	d2de <__ssputs_r+0x7e>
    d272:	898a      	ldrh	r2, [r1, #12]
    d274:	f412 6f90 	tst.w	r2, #1152	; 0x480
    d278:	d031      	beq.n	d2de <__ssputs_r+0x7e>
    d27a:	6825      	ldr	r5, [r4, #0]
    d27c:	6909      	ldr	r1, [r1, #16]
    d27e:	1a6f      	subs	r7, r5, r1
    d280:	6965      	ldr	r5, [r4, #20]
    d282:	2302      	movs	r3, #2
    d284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    d288:	fb95 f5f3 	sdiv	r5, r5, r3
    d28c:	f108 0301 	add.w	r3, r8, #1
    d290:	443b      	add	r3, r7
    d292:	429d      	cmp	r5, r3
    d294:	bf38      	it	cc
    d296:	461d      	movcc	r5, r3
    d298:	0553      	lsls	r3, r2, #21
    d29a:	d531      	bpl.n	d300 <__ssputs_r+0xa0>
    d29c:	4629      	mov	r1, r5
    d29e:	f7ff fb71 	bl	c984 <_malloc_r>
    d2a2:	4606      	mov	r6, r0
    d2a4:	b950      	cbnz	r0, d2bc <__ssputs_r+0x5c>
    d2a6:	230c      	movs	r3, #12
    d2a8:	f8ca 3000 	str.w	r3, [sl]
    d2ac:	89a3      	ldrh	r3, [r4, #12]
    d2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d2b2:	81a3      	strh	r3, [r4, #12]
    d2b4:	f04f 30ff 	mov.w	r0, #4294967295
    d2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2bc:	463a      	mov	r2, r7
    d2be:	6921      	ldr	r1, [r4, #16]
    d2c0:	f7ff fafe 	bl	c8c0 <memcpy>
    d2c4:	89a3      	ldrh	r3, [r4, #12]
    d2c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    d2ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d2ce:	81a3      	strh	r3, [r4, #12]
    d2d0:	6126      	str	r6, [r4, #16]
    d2d2:	6165      	str	r5, [r4, #20]
    d2d4:	443e      	add	r6, r7
    d2d6:	1bed      	subs	r5, r5, r7
    d2d8:	6026      	str	r6, [r4, #0]
    d2da:	60a5      	str	r5, [r4, #8]
    d2dc:	4646      	mov	r6, r8
    d2de:	4546      	cmp	r6, r8
    d2e0:	bf28      	it	cs
    d2e2:	4646      	movcs	r6, r8
    d2e4:	4632      	mov	r2, r6
    d2e6:	4649      	mov	r1, r9
    d2e8:	6820      	ldr	r0, [r4, #0]
    d2ea:	f000 fcc9 	bl	dc80 <memmove>
    d2ee:	68a3      	ldr	r3, [r4, #8]
    d2f0:	1b9b      	subs	r3, r3, r6
    d2f2:	60a3      	str	r3, [r4, #8]
    d2f4:	6823      	ldr	r3, [r4, #0]
    d2f6:	441e      	add	r6, r3
    d2f8:	6026      	str	r6, [r4, #0]
    d2fa:	2000      	movs	r0, #0
    d2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d300:	462a      	mov	r2, r5
    d302:	f000 fcd7 	bl	dcb4 <_realloc_r>
    d306:	4606      	mov	r6, r0
    d308:	2800      	cmp	r0, #0
    d30a:	d1e1      	bne.n	d2d0 <__ssputs_r+0x70>
    d30c:	6921      	ldr	r1, [r4, #16]
    d30e:	4650      	mov	r0, sl
    d310:	f7ff faea 	bl	c8e8 <_free_r>
    d314:	e7c7      	b.n	d2a6 <__ssputs_r+0x46>
	...

0000d318 <_svfiprintf_r>:
    d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d31c:	b09d      	sub	sp, #116	; 0x74
    d31e:	4680      	mov	r8, r0
    d320:	9303      	str	r3, [sp, #12]
    d322:	898b      	ldrh	r3, [r1, #12]
    d324:	061c      	lsls	r4, r3, #24
    d326:	460d      	mov	r5, r1
    d328:	4616      	mov	r6, r2
    d32a:	d50f      	bpl.n	d34c <_svfiprintf_r+0x34>
    d32c:	690b      	ldr	r3, [r1, #16]
    d32e:	b96b      	cbnz	r3, d34c <_svfiprintf_r+0x34>
    d330:	2140      	movs	r1, #64	; 0x40
    d332:	f7ff fb27 	bl	c984 <_malloc_r>
    d336:	6028      	str	r0, [r5, #0]
    d338:	6128      	str	r0, [r5, #16]
    d33a:	b928      	cbnz	r0, d348 <_svfiprintf_r+0x30>
    d33c:	230c      	movs	r3, #12
    d33e:	f8c8 3000 	str.w	r3, [r8]
    d342:	f04f 30ff 	mov.w	r0, #4294967295
    d346:	e0c5      	b.n	d4d4 <_svfiprintf_r+0x1bc>
    d348:	2340      	movs	r3, #64	; 0x40
    d34a:	616b      	str	r3, [r5, #20]
    d34c:	2300      	movs	r3, #0
    d34e:	9309      	str	r3, [sp, #36]	; 0x24
    d350:	2320      	movs	r3, #32
    d352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    d356:	2330      	movs	r3, #48	; 0x30
    d358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    d35c:	f04f 0b01 	mov.w	fp, #1
    d360:	4637      	mov	r7, r6
    d362:	463c      	mov	r4, r7
    d364:	f814 3b01 	ldrb.w	r3, [r4], #1
    d368:	2b00      	cmp	r3, #0
    d36a:	d13c      	bne.n	d3e6 <_svfiprintf_r+0xce>
    d36c:	ebb7 0a06 	subs.w	sl, r7, r6
    d370:	d00b      	beq.n	d38a <_svfiprintf_r+0x72>
    d372:	4653      	mov	r3, sl
    d374:	4632      	mov	r2, r6
    d376:	4629      	mov	r1, r5
    d378:	4640      	mov	r0, r8
    d37a:	f7ff ff71 	bl	d260 <__ssputs_r>
    d37e:	3001      	adds	r0, #1
    d380:	f000 80a3 	beq.w	d4ca <_svfiprintf_r+0x1b2>
    d384:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d386:	4453      	add	r3, sl
    d388:	9309      	str	r3, [sp, #36]	; 0x24
    d38a:	783b      	ldrb	r3, [r7, #0]
    d38c:	2b00      	cmp	r3, #0
    d38e:	f000 809c 	beq.w	d4ca <_svfiprintf_r+0x1b2>
    d392:	2300      	movs	r3, #0
    d394:	f04f 32ff 	mov.w	r2, #4294967295
    d398:	9304      	str	r3, [sp, #16]
    d39a:	9307      	str	r3, [sp, #28]
    d39c:	9205      	str	r2, [sp, #20]
    d39e:	9306      	str	r3, [sp, #24]
    d3a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    d3a4:	931a      	str	r3, [sp, #104]	; 0x68
    d3a6:	2205      	movs	r2, #5
    d3a8:	7821      	ldrb	r1, [r4, #0]
    d3aa:	4850      	ldr	r0, [pc, #320]	; (d4ec <_svfiprintf_r+0x1d4>)
    d3ac:	f000 fc18 	bl	dbe0 <memchr>
    d3b0:	1c67      	adds	r7, r4, #1
    d3b2:	9b04      	ldr	r3, [sp, #16]
    d3b4:	b9d8      	cbnz	r0, d3ee <_svfiprintf_r+0xd6>
    d3b6:	06d9      	lsls	r1, r3, #27
    d3b8:	bf44      	itt	mi
    d3ba:	2220      	movmi	r2, #32
    d3bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d3c0:	071a      	lsls	r2, r3, #28
    d3c2:	bf44      	itt	mi
    d3c4:	222b      	movmi	r2, #43	; 0x2b
    d3c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d3ca:	7822      	ldrb	r2, [r4, #0]
    d3cc:	2a2a      	cmp	r2, #42	; 0x2a
    d3ce:	d016      	beq.n	d3fe <_svfiprintf_r+0xe6>
    d3d0:	9a07      	ldr	r2, [sp, #28]
    d3d2:	2100      	movs	r1, #0
    d3d4:	200a      	movs	r0, #10
    d3d6:	4627      	mov	r7, r4
    d3d8:	3401      	adds	r4, #1
    d3da:	783b      	ldrb	r3, [r7, #0]
    d3dc:	3b30      	subs	r3, #48	; 0x30
    d3de:	2b09      	cmp	r3, #9
    d3e0:	d951      	bls.n	d486 <_svfiprintf_r+0x16e>
    d3e2:	b1c9      	cbz	r1, d418 <_svfiprintf_r+0x100>
    d3e4:	e011      	b.n	d40a <_svfiprintf_r+0xf2>
    d3e6:	2b25      	cmp	r3, #37	; 0x25
    d3e8:	d0c0      	beq.n	d36c <_svfiprintf_r+0x54>
    d3ea:	4627      	mov	r7, r4
    d3ec:	e7b9      	b.n	d362 <_svfiprintf_r+0x4a>
    d3ee:	4a3f      	ldr	r2, [pc, #252]	; (d4ec <_svfiprintf_r+0x1d4>)
    d3f0:	1a80      	subs	r0, r0, r2
    d3f2:	fa0b f000 	lsl.w	r0, fp, r0
    d3f6:	4318      	orrs	r0, r3
    d3f8:	9004      	str	r0, [sp, #16]
    d3fa:	463c      	mov	r4, r7
    d3fc:	e7d3      	b.n	d3a6 <_svfiprintf_r+0x8e>
    d3fe:	9a03      	ldr	r2, [sp, #12]
    d400:	1d11      	adds	r1, r2, #4
    d402:	6812      	ldr	r2, [r2, #0]
    d404:	9103      	str	r1, [sp, #12]
    d406:	2a00      	cmp	r2, #0
    d408:	db01      	blt.n	d40e <_svfiprintf_r+0xf6>
    d40a:	9207      	str	r2, [sp, #28]
    d40c:	e004      	b.n	d418 <_svfiprintf_r+0x100>
    d40e:	4252      	negs	r2, r2
    d410:	f043 0302 	orr.w	r3, r3, #2
    d414:	9207      	str	r2, [sp, #28]
    d416:	9304      	str	r3, [sp, #16]
    d418:	783b      	ldrb	r3, [r7, #0]
    d41a:	2b2e      	cmp	r3, #46	; 0x2e
    d41c:	d10e      	bne.n	d43c <_svfiprintf_r+0x124>
    d41e:	787b      	ldrb	r3, [r7, #1]
    d420:	2b2a      	cmp	r3, #42	; 0x2a
    d422:	f107 0101 	add.w	r1, r7, #1
    d426:	d132      	bne.n	d48e <_svfiprintf_r+0x176>
    d428:	9b03      	ldr	r3, [sp, #12]
    d42a:	1d1a      	adds	r2, r3, #4
    d42c:	681b      	ldr	r3, [r3, #0]
    d42e:	9203      	str	r2, [sp, #12]
    d430:	2b00      	cmp	r3, #0
    d432:	bfb8      	it	lt
    d434:	f04f 33ff 	movlt.w	r3, #4294967295
    d438:	3702      	adds	r7, #2
    d43a:	9305      	str	r3, [sp, #20]
    d43c:	4c2c      	ldr	r4, [pc, #176]	; (d4f0 <_svfiprintf_r+0x1d8>)
    d43e:	7839      	ldrb	r1, [r7, #0]
    d440:	2203      	movs	r2, #3
    d442:	4620      	mov	r0, r4
    d444:	f000 fbcc 	bl	dbe0 <memchr>
    d448:	b138      	cbz	r0, d45a <_svfiprintf_r+0x142>
    d44a:	2340      	movs	r3, #64	; 0x40
    d44c:	1b00      	subs	r0, r0, r4
    d44e:	fa03 f000 	lsl.w	r0, r3, r0
    d452:	9b04      	ldr	r3, [sp, #16]
    d454:	4303      	orrs	r3, r0
    d456:	9304      	str	r3, [sp, #16]
    d458:	3701      	adds	r7, #1
    d45a:	7839      	ldrb	r1, [r7, #0]
    d45c:	4825      	ldr	r0, [pc, #148]	; (d4f4 <_svfiprintf_r+0x1dc>)
    d45e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d462:	2206      	movs	r2, #6
    d464:	1c7e      	adds	r6, r7, #1
    d466:	f000 fbbb 	bl	dbe0 <memchr>
    d46a:	2800      	cmp	r0, #0
    d46c:	d035      	beq.n	d4da <_svfiprintf_r+0x1c2>
    d46e:	4b22      	ldr	r3, [pc, #136]	; (d4f8 <_svfiprintf_r+0x1e0>)
    d470:	b9fb      	cbnz	r3, d4b2 <_svfiprintf_r+0x19a>
    d472:	9b03      	ldr	r3, [sp, #12]
    d474:	3307      	adds	r3, #7
    d476:	f023 0307 	bic.w	r3, r3, #7
    d47a:	3308      	adds	r3, #8
    d47c:	9303      	str	r3, [sp, #12]
    d47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d480:	444b      	add	r3, r9
    d482:	9309      	str	r3, [sp, #36]	; 0x24
    d484:	e76c      	b.n	d360 <_svfiprintf_r+0x48>
    d486:	fb00 3202 	mla	r2, r0, r2, r3
    d48a:	2101      	movs	r1, #1
    d48c:	e7a3      	b.n	d3d6 <_svfiprintf_r+0xbe>
    d48e:	2300      	movs	r3, #0
    d490:	9305      	str	r3, [sp, #20]
    d492:	4618      	mov	r0, r3
    d494:	240a      	movs	r4, #10
    d496:	460f      	mov	r7, r1
    d498:	3101      	adds	r1, #1
    d49a:	783a      	ldrb	r2, [r7, #0]
    d49c:	3a30      	subs	r2, #48	; 0x30
    d49e:	2a09      	cmp	r2, #9
    d4a0:	d903      	bls.n	d4aa <_svfiprintf_r+0x192>
    d4a2:	2b00      	cmp	r3, #0
    d4a4:	d0ca      	beq.n	d43c <_svfiprintf_r+0x124>
    d4a6:	9005      	str	r0, [sp, #20]
    d4a8:	e7c8      	b.n	d43c <_svfiprintf_r+0x124>
    d4aa:	fb04 2000 	mla	r0, r4, r0, r2
    d4ae:	2301      	movs	r3, #1
    d4b0:	e7f1      	b.n	d496 <_svfiprintf_r+0x17e>
    d4b2:	ab03      	add	r3, sp, #12
    d4b4:	9300      	str	r3, [sp, #0]
    d4b6:	462a      	mov	r2, r5
    d4b8:	4b10      	ldr	r3, [pc, #64]	; (d4fc <_svfiprintf_r+0x1e4>)
    d4ba:	a904      	add	r1, sp, #16
    d4bc:	4640      	mov	r0, r8
    d4be:	f3af 8000 	nop.w
    d4c2:	f1b0 3fff 	cmp.w	r0, #4294967295
    d4c6:	4681      	mov	r9, r0
    d4c8:	d1d9      	bne.n	d47e <_svfiprintf_r+0x166>
    d4ca:	89ab      	ldrh	r3, [r5, #12]
    d4cc:	065b      	lsls	r3, r3, #25
    d4ce:	f53f af38 	bmi.w	d342 <_svfiprintf_r+0x2a>
    d4d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    d4d4:	b01d      	add	sp, #116	; 0x74
    d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4da:	ab03      	add	r3, sp, #12
    d4dc:	9300      	str	r3, [sp, #0]
    d4de:	462a      	mov	r2, r5
    d4e0:	4b06      	ldr	r3, [pc, #24]	; (d4fc <_svfiprintf_r+0x1e4>)
    d4e2:	a904      	add	r1, sp, #16
    d4e4:	4640      	mov	r0, r8
    d4e6:	f000 f9bf 	bl	d868 <_printf_i>
    d4ea:	e7ea      	b.n	d4c2 <_svfiprintf_r+0x1aa>
    d4ec:	0000e9e8 	.word	0x0000e9e8
    d4f0:	0000e9ee 	.word	0x0000e9ee
    d4f4:	0000e9f2 	.word	0x0000e9f2
    d4f8:	00000000 	.word	0x00000000
    d4fc:	0000d261 	.word	0x0000d261

0000d500 <__sfputc_r>:
    d500:	6893      	ldr	r3, [r2, #8]
    d502:	3b01      	subs	r3, #1
    d504:	2b00      	cmp	r3, #0
    d506:	b410      	push	{r4}
    d508:	6093      	str	r3, [r2, #8]
    d50a:	da08      	bge.n	d51e <__sfputc_r+0x1e>
    d50c:	6994      	ldr	r4, [r2, #24]
    d50e:	42a3      	cmp	r3, r4
    d510:	db02      	blt.n	d518 <__sfputc_r+0x18>
    d512:	b2cb      	uxtb	r3, r1
    d514:	2b0a      	cmp	r3, #10
    d516:	d102      	bne.n	d51e <__sfputc_r+0x1e>
    d518:	bc10      	pop	{r4}
    d51a:	f7ff bbff 	b.w	cd1c <__swbuf_r>
    d51e:	6813      	ldr	r3, [r2, #0]
    d520:	1c58      	adds	r0, r3, #1
    d522:	6010      	str	r0, [r2, #0]
    d524:	7019      	strb	r1, [r3, #0]
    d526:	b2c8      	uxtb	r0, r1
    d528:	bc10      	pop	{r4}
    d52a:	4770      	bx	lr

0000d52c <__sfputs_r>:
    d52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d52e:	4606      	mov	r6, r0
    d530:	460f      	mov	r7, r1
    d532:	4614      	mov	r4, r2
    d534:	18d5      	adds	r5, r2, r3
    d536:	42ac      	cmp	r4, r5
    d538:	d101      	bne.n	d53e <__sfputs_r+0x12>
    d53a:	2000      	movs	r0, #0
    d53c:	e007      	b.n	d54e <__sfputs_r+0x22>
    d53e:	463a      	mov	r2, r7
    d540:	f814 1b01 	ldrb.w	r1, [r4], #1
    d544:	4630      	mov	r0, r6
    d546:	f7ff ffdb 	bl	d500 <__sfputc_r>
    d54a:	1c43      	adds	r3, r0, #1
    d54c:	d1f3      	bne.n	d536 <__sfputs_r+0xa>
    d54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d550 <_vfiprintf_r>:
    d550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d554:	b09d      	sub	sp, #116	; 0x74
    d556:	460c      	mov	r4, r1
    d558:	4617      	mov	r7, r2
    d55a:	9303      	str	r3, [sp, #12]
    d55c:	4606      	mov	r6, r0
    d55e:	b118      	cbz	r0, d568 <_vfiprintf_r+0x18>
    d560:	6983      	ldr	r3, [r0, #24]
    d562:	b90b      	cbnz	r3, d568 <_vfiprintf_r+0x18>
    d564:	f7ff fd8c 	bl	d080 <__sinit>
    d568:	4b7c      	ldr	r3, [pc, #496]	; (d75c <_vfiprintf_r+0x20c>)
    d56a:	429c      	cmp	r4, r3
    d56c:	d157      	bne.n	d61e <_vfiprintf_r+0xce>
    d56e:	6874      	ldr	r4, [r6, #4]
    d570:	89a3      	ldrh	r3, [r4, #12]
    d572:	0718      	lsls	r0, r3, #28
    d574:	d55d      	bpl.n	d632 <_vfiprintf_r+0xe2>
    d576:	6923      	ldr	r3, [r4, #16]
    d578:	2b00      	cmp	r3, #0
    d57a:	d05a      	beq.n	d632 <_vfiprintf_r+0xe2>
    d57c:	2300      	movs	r3, #0
    d57e:	9309      	str	r3, [sp, #36]	; 0x24
    d580:	2320      	movs	r3, #32
    d582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    d586:	2330      	movs	r3, #48	; 0x30
    d588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    d58c:	f04f 0b01 	mov.w	fp, #1
    d590:	46b8      	mov	r8, r7
    d592:	4645      	mov	r5, r8
    d594:	f815 3b01 	ldrb.w	r3, [r5], #1
    d598:	2b00      	cmp	r3, #0
    d59a:	d155      	bne.n	d648 <_vfiprintf_r+0xf8>
    d59c:	ebb8 0a07 	subs.w	sl, r8, r7
    d5a0:	d00b      	beq.n	d5ba <_vfiprintf_r+0x6a>
    d5a2:	4653      	mov	r3, sl
    d5a4:	463a      	mov	r2, r7
    d5a6:	4621      	mov	r1, r4
    d5a8:	4630      	mov	r0, r6
    d5aa:	f7ff ffbf 	bl	d52c <__sfputs_r>
    d5ae:	3001      	adds	r0, #1
    d5b0:	f000 80c4 	beq.w	d73c <_vfiprintf_r+0x1ec>
    d5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5b6:	4453      	add	r3, sl
    d5b8:	9309      	str	r3, [sp, #36]	; 0x24
    d5ba:	f898 3000 	ldrb.w	r3, [r8]
    d5be:	2b00      	cmp	r3, #0
    d5c0:	f000 80bc 	beq.w	d73c <_vfiprintf_r+0x1ec>
    d5c4:	2300      	movs	r3, #0
    d5c6:	f04f 32ff 	mov.w	r2, #4294967295
    d5ca:	9304      	str	r3, [sp, #16]
    d5cc:	9307      	str	r3, [sp, #28]
    d5ce:	9205      	str	r2, [sp, #20]
    d5d0:	9306      	str	r3, [sp, #24]
    d5d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    d5d6:	931a      	str	r3, [sp, #104]	; 0x68
    d5d8:	2205      	movs	r2, #5
    d5da:	7829      	ldrb	r1, [r5, #0]
    d5dc:	4860      	ldr	r0, [pc, #384]	; (d760 <_vfiprintf_r+0x210>)
    d5de:	f000 faff 	bl	dbe0 <memchr>
    d5e2:	f105 0801 	add.w	r8, r5, #1
    d5e6:	9b04      	ldr	r3, [sp, #16]
    d5e8:	2800      	cmp	r0, #0
    d5ea:	d131      	bne.n	d650 <_vfiprintf_r+0x100>
    d5ec:	06d9      	lsls	r1, r3, #27
    d5ee:	bf44      	itt	mi
    d5f0:	2220      	movmi	r2, #32
    d5f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d5f6:	071a      	lsls	r2, r3, #28
    d5f8:	bf44      	itt	mi
    d5fa:	222b      	movmi	r2, #43	; 0x2b
    d5fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d600:	782a      	ldrb	r2, [r5, #0]
    d602:	2a2a      	cmp	r2, #42	; 0x2a
    d604:	d02c      	beq.n	d660 <_vfiprintf_r+0x110>
    d606:	9a07      	ldr	r2, [sp, #28]
    d608:	2100      	movs	r1, #0
    d60a:	200a      	movs	r0, #10
    d60c:	46a8      	mov	r8, r5
    d60e:	3501      	adds	r5, #1
    d610:	f898 3000 	ldrb.w	r3, [r8]
    d614:	3b30      	subs	r3, #48	; 0x30
    d616:	2b09      	cmp	r3, #9
    d618:	d96d      	bls.n	d6f6 <_vfiprintf_r+0x1a6>
    d61a:	b371      	cbz	r1, d67a <_vfiprintf_r+0x12a>
    d61c:	e026      	b.n	d66c <_vfiprintf_r+0x11c>
    d61e:	4b51      	ldr	r3, [pc, #324]	; (d764 <_vfiprintf_r+0x214>)
    d620:	429c      	cmp	r4, r3
    d622:	d101      	bne.n	d628 <_vfiprintf_r+0xd8>
    d624:	68b4      	ldr	r4, [r6, #8]
    d626:	e7a3      	b.n	d570 <_vfiprintf_r+0x20>
    d628:	4b4f      	ldr	r3, [pc, #316]	; (d768 <_vfiprintf_r+0x218>)
    d62a:	429c      	cmp	r4, r3
    d62c:	bf08      	it	eq
    d62e:	68f4      	ldreq	r4, [r6, #12]
    d630:	e79e      	b.n	d570 <_vfiprintf_r+0x20>
    d632:	4621      	mov	r1, r4
    d634:	4630      	mov	r0, r6
    d636:	f7ff fbc3 	bl	cdc0 <__swsetup_r>
    d63a:	2800      	cmp	r0, #0
    d63c:	d09e      	beq.n	d57c <_vfiprintf_r+0x2c>
    d63e:	f04f 30ff 	mov.w	r0, #4294967295
    d642:	b01d      	add	sp, #116	; 0x74
    d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d648:	2b25      	cmp	r3, #37	; 0x25
    d64a:	d0a7      	beq.n	d59c <_vfiprintf_r+0x4c>
    d64c:	46a8      	mov	r8, r5
    d64e:	e7a0      	b.n	d592 <_vfiprintf_r+0x42>
    d650:	4a43      	ldr	r2, [pc, #268]	; (d760 <_vfiprintf_r+0x210>)
    d652:	1a80      	subs	r0, r0, r2
    d654:	fa0b f000 	lsl.w	r0, fp, r0
    d658:	4318      	orrs	r0, r3
    d65a:	9004      	str	r0, [sp, #16]
    d65c:	4645      	mov	r5, r8
    d65e:	e7bb      	b.n	d5d8 <_vfiprintf_r+0x88>
    d660:	9a03      	ldr	r2, [sp, #12]
    d662:	1d11      	adds	r1, r2, #4
    d664:	6812      	ldr	r2, [r2, #0]
    d666:	9103      	str	r1, [sp, #12]
    d668:	2a00      	cmp	r2, #0
    d66a:	db01      	blt.n	d670 <_vfiprintf_r+0x120>
    d66c:	9207      	str	r2, [sp, #28]
    d66e:	e004      	b.n	d67a <_vfiprintf_r+0x12a>
    d670:	4252      	negs	r2, r2
    d672:	f043 0302 	orr.w	r3, r3, #2
    d676:	9207      	str	r2, [sp, #28]
    d678:	9304      	str	r3, [sp, #16]
    d67a:	f898 3000 	ldrb.w	r3, [r8]
    d67e:	2b2e      	cmp	r3, #46	; 0x2e
    d680:	d110      	bne.n	d6a4 <_vfiprintf_r+0x154>
    d682:	f898 3001 	ldrb.w	r3, [r8, #1]
    d686:	2b2a      	cmp	r3, #42	; 0x2a
    d688:	f108 0101 	add.w	r1, r8, #1
    d68c:	d137      	bne.n	d6fe <_vfiprintf_r+0x1ae>
    d68e:	9b03      	ldr	r3, [sp, #12]
    d690:	1d1a      	adds	r2, r3, #4
    d692:	681b      	ldr	r3, [r3, #0]
    d694:	9203      	str	r2, [sp, #12]
    d696:	2b00      	cmp	r3, #0
    d698:	bfb8      	it	lt
    d69a:	f04f 33ff 	movlt.w	r3, #4294967295
    d69e:	f108 0802 	add.w	r8, r8, #2
    d6a2:	9305      	str	r3, [sp, #20]
    d6a4:	4d31      	ldr	r5, [pc, #196]	; (d76c <_vfiprintf_r+0x21c>)
    d6a6:	f898 1000 	ldrb.w	r1, [r8]
    d6aa:	2203      	movs	r2, #3
    d6ac:	4628      	mov	r0, r5
    d6ae:	f000 fa97 	bl	dbe0 <memchr>
    d6b2:	b140      	cbz	r0, d6c6 <_vfiprintf_r+0x176>
    d6b4:	2340      	movs	r3, #64	; 0x40
    d6b6:	1b40      	subs	r0, r0, r5
    d6b8:	fa03 f000 	lsl.w	r0, r3, r0
    d6bc:	9b04      	ldr	r3, [sp, #16]
    d6be:	4303      	orrs	r3, r0
    d6c0:	9304      	str	r3, [sp, #16]
    d6c2:	f108 0801 	add.w	r8, r8, #1
    d6c6:	f898 1000 	ldrb.w	r1, [r8]
    d6ca:	4829      	ldr	r0, [pc, #164]	; (d770 <_vfiprintf_r+0x220>)
    d6cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d6d0:	2206      	movs	r2, #6
    d6d2:	f108 0701 	add.w	r7, r8, #1
    d6d6:	f000 fa83 	bl	dbe0 <memchr>
    d6da:	2800      	cmp	r0, #0
    d6dc:	d034      	beq.n	d748 <_vfiprintf_r+0x1f8>
    d6de:	4b25      	ldr	r3, [pc, #148]	; (d774 <_vfiprintf_r+0x224>)
    d6e0:	bb03      	cbnz	r3, d724 <_vfiprintf_r+0x1d4>
    d6e2:	9b03      	ldr	r3, [sp, #12]
    d6e4:	3307      	adds	r3, #7
    d6e6:	f023 0307 	bic.w	r3, r3, #7
    d6ea:	3308      	adds	r3, #8
    d6ec:	9303      	str	r3, [sp, #12]
    d6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6f0:	444b      	add	r3, r9
    d6f2:	9309      	str	r3, [sp, #36]	; 0x24
    d6f4:	e74c      	b.n	d590 <_vfiprintf_r+0x40>
    d6f6:	fb00 3202 	mla	r2, r0, r2, r3
    d6fa:	2101      	movs	r1, #1
    d6fc:	e786      	b.n	d60c <_vfiprintf_r+0xbc>
    d6fe:	2300      	movs	r3, #0
    d700:	9305      	str	r3, [sp, #20]
    d702:	4618      	mov	r0, r3
    d704:	250a      	movs	r5, #10
    d706:	4688      	mov	r8, r1
    d708:	3101      	adds	r1, #1
    d70a:	f898 2000 	ldrb.w	r2, [r8]
    d70e:	3a30      	subs	r2, #48	; 0x30
    d710:	2a09      	cmp	r2, #9
    d712:	d903      	bls.n	d71c <_vfiprintf_r+0x1cc>
    d714:	2b00      	cmp	r3, #0
    d716:	d0c5      	beq.n	d6a4 <_vfiprintf_r+0x154>
    d718:	9005      	str	r0, [sp, #20]
    d71a:	e7c3      	b.n	d6a4 <_vfiprintf_r+0x154>
    d71c:	fb05 2000 	mla	r0, r5, r0, r2
    d720:	2301      	movs	r3, #1
    d722:	e7f0      	b.n	d706 <_vfiprintf_r+0x1b6>
    d724:	ab03      	add	r3, sp, #12
    d726:	9300      	str	r3, [sp, #0]
    d728:	4622      	mov	r2, r4
    d72a:	4b13      	ldr	r3, [pc, #76]	; (d778 <_vfiprintf_r+0x228>)
    d72c:	a904      	add	r1, sp, #16
    d72e:	4630      	mov	r0, r6
    d730:	f3af 8000 	nop.w
    d734:	f1b0 3fff 	cmp.w	r0, #4294967295
    d738:	4681      	mov	r9, r0
    d73a:	d1d8      	bne.n	d6ee <_vfiprintf_r+0x19e>
    d73c:	89a3      	ldrh	r3, [r4, #12]
    d73e:	065b      	lsls	r3, r3, #25
    d740:	f53f af7d 	bmi.w	d63e <_vfiprintf_r+0xee>
    d744:	9809      	ldr	r0, [sp, #36]	; 0x24
    d746:	e77c      	b.n	d642 <_vfiprintf_r+0xf2>
    d748:	ab03      	add	r3, sp, #12
    d74a:	9300      	str	r3, [sp, #0]
    d74c:	4622      	mov	r2, r4
    d74e:	4b0a      	ldr	r3, [pc, #40]	; (d778 <_vfiprintf_r+0x228>)
    d750:	a904      	add	r1, sp, #16
    d752:	4630      	mov	r0, r6
    d754:	f000 f888 	bl	d868 <_printf_i>
    d758:	e7ec      	b.n	d734 <_vfiprintf_r+0x1e4>
    d75a:	bf00      	nop
    d75c:	0000e9a8 	.word	0x0000e9a8
    d760:	0000e9e8 	.word	0x0000e9e8
    d764:	0000e9c8 	.word	0x0000e9c8
    d768:	0000e988 	.word	0x0000e988
    d76c:	0000e9ee 	.word	0x0000e9ee
    d770:	0000e9f2 	.word	0x0000e9f2
    d774:	00000000 	.word	0x00000000
    d778:	0000d52d 	.word	0x0000d52d

0000d77c <_printf_common>:
    d77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d780:	4691      	mov	r9, r2
    d782:	461f      	mov	r7, r3
    d784:	688a      	ldr	r2, [r1, #8]
    d786:	690b      	ldr	r3, [r1, #16]
    d788:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d78c:	4293      	cmp	r3, r2
    d78e:	bfb8      	it	lt
    d790:	4613      	movlt	r3, r2
    d792:	f8c9 3000 	str.w	r3, [r9]
    d796:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d79a:	4606      	mov	r6, r0
    d79c:	460c      	mov	r4, r1
    d79e:	b112      	cbz	r2, d7a6 <_printf_common+0x2a>
    d7a0:	3301      	adds	r3, #1
    d7a2:	f8c9 3000 	str.w	r3, [r9]
    d7a6:	6823      	ldr	r3, [r4, #0]
    d7a8:	0699      	lsls	r1, r3, #26
    d7aa:	bf42      	ittt	mi
    d7ac:	f8d9 3000 	ldrmi.w	r3, [r9]
    d7b0:	3302      	addmi	r3, #2
    d7b2:	f8c9 3000 	strmi.w	r3, [r9]
    d7b6:	6825      	ldr	r5, [r4, #0]
    d7b8:	f015 0506 	ands.w	r5, r5, #6
    d7bc:	d107      	bne.n	d7ce <_printf_common+0x52>
    d7be:	f104 0a19 	add.w	sl, r4, #25
    d7c2:	68e3      	ldr	r3, [r4, #12]
    d7c4:	f8d9 2000 	ldr.w	r2, [r9]
    d7c8:	1a9b      	subs	r3, r3, r2
    d7ca:	429d      	cmp	r5, r3
    d7cc:	db29      	blt.n	d822 <_printf_common+0xa6>
    d7ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    d7d2:	6822      	ldr	r2, [r4, #0]
    d7d4:	3300      	adds	r3, #0
    d7d6:	bf18      	it	ne
    d7d8:	2301      	movne	r3, #1
    d7da:	0692      	lsls	r2, r2, #26
    d7dc:	d42e      	bmi.n	d83c <_printf_common+0xc0>
    d7de:	f104 0243 	add.w	r2, r4, #67	; 0x43
    d7e2:	4639      	mov	r1, r7
    d7e4:	4630      	mov	r0, r6
    d7e6:	47c0      	blx	r8
    d7e8:	3001      	adds	r0, #1
    d7ea:	d021      	beq.n	d830 <_printf_common+0xb4>
    d7ec:	6823      	ldr	r3, [r4, #0]
    d7ee:	68e5      	ldr	r5, [r4, #12]
    d7f0:	f8d9 2000 	ldr.w	r2, [r9]
    d7f4:	f003 0306 	and.w	r3, r3, #6
    d7f8:	2b04      	cmp	r3, #4
    d7fa:	bf08      	it	eq
    d7fc:	1aad      	subeq	r5, r5, r2
    d7fe:	68a3      	ldr	r3, [r4, #8]
    d800:	6922      	ldr	r2, [r4, #16]
    d802:	bf0c      	ite	eq
    d804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    d808:	2500      	movne	r5, #0
    d80a:	4293      	cmp	r3, r2
    d80c:	bfc4      	itt	gt
    d80e:	1a9b      	subgt	r3, r3, r2
    d810:	18ed      	addgt	r5, r5, r3
    d812:	f04f 0900 	mov.w	r9, #0
    d816:	341a      	adds	r4, #26
    d818:	454d      	cmp	r5, r9
    d81a:	d11b      	bne.n	d854 <_printf_common+0xd8>
    d81c:	2000      	movs	r0, #0
    d81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d822:	2301      	movs	r3, #1
    d824:	4652      	mov	r2, sl
    d826:	4639      	mov	r1, r7
    d828:	4630      	mov	r0, r6
    d82a:	47c0      	blx	r8
    d82c:	3001      	adds	r0, #1
    d82e:	d103      	bne.n	d838 <_printf_common+0xbc>
    d830:	f04f 30ff 	mov.w	r0, #4294967295
    d834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d838:	3501      	adds	r5, #1
    d83a:	e7c2      	b.n	d7c2 <_printf_common+0x46>
    d83c:	18e1      	adds	r1, r4, r3
    d83e:	1c5a      	adds	r2, r3, #1
    d840:	2030      	movs	r0, #48	; 0x30
    d842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d846:	4422      	add	r2, r4
    d848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    d84c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    d850:	3302      	adds	r3, #2
    d852:	e7c4      	b.n	d7de <_printf_common+0x62>
    d854:	2301      	movs	r3, #1
    d856:	4622      	mov	r2, r4
    d858:	4639      	mov	r1, r7
    d85a:	4630      	mov	r0, r6
    d85c:	47c0      	blx	r8
    d85e:	3001      	adds	r0, #1
    d860:	d0e6      	beq.n	d830 <_printf_common+0xb4>
    d862:	f109 0901 	add.w	r9, r9, #1
    d866:	e7d7      	b.n	d818 <_printf_common+0x9c>

0000d868 <_printf_i>:
    d868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d86c:	4617      	mov	r7, r2
    d86e:	7e0a      	ldrb	r2, [r1, #24]
    d870:	b085      	sub	sp, #20
    d872:	2a6e      	cmp	r2, #110	; 0x6e
    d874:	4698      	mov	r8, r3
    d876:	4606      	mov	r6, r0
    d878:	460c      	mov	r4, r1
    d87a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d87c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    d880:	f000 80bc 	beq.w	d9fc <_printf_i+0x194>
    d884:	d81a      	bhi.n	d8bc <_printf_i+0x54>
    d886:	2a63      	cmp	r2, #99	; 0x63
    d888:	d02e      	beq.n	d8e8 <_printf_i+0x80>
    d88a:	d80a      	bhi.n	d8a2 <_printf_i+0x3a>
    d88c:	2a00      	cmp	r2, #0
    d88e:	f000 80c8 	beq.w	da22 <_printf_i+0x1ba>
    d892:	2a58      	cmp	r2, #88	; 0x58
    d894:	f000 808a 	beq.w	d9ac <_printf_i+0x144>
    d898:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d89c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    d8a0:	e02a      	b.n	d8f8 <_printf_i+0x90>
    d8a2:	2a64      	cmp	r2, #100	; 0x64
    d8a4:	d001      	beq.n	d8aa <_printf_i+0x42>
    d8a6:	2a69      	cmp	r2, #105	; 0x69
    d8a8:	d1f6      	bne.n	d898 <_printf_i+0x30>
    d8aa:	6821      	ldr	r1, [r4, #0]
    d8ac:	681a      	ldr	r2, [r3, #0]
    d8ae:	f011 0f80 	tst.w	r1, #128	; 0x80
    d8b2:	d023      	beq.n	d8fc <_printf_i+0x94>
    d8b4:	1d11      	adds	r1, r2, #4
    d8b6:	6019      	str	r1, [r3, #0]
    d8b8:	6813      	ldr	r3, [r2, #0]
    d8ba:	e027      	b.n	d90c <_printf_i+0xa4>
    d8bc:	2a73      	cmp	r2, #115	; 0x73
    d8be:	f000 80b4 	beq.w	da2a <_printf_i+0x1c2>
    d8c2:	d808      	bhi.n	d8d6 <_printf_i+0x6e>
    d8c4:	2a6f      	cmp	r2, #111	; 0x6f
    d8c6:	d02a      	beq.n	d91e <_printf_i+0xb6>
    d8c8:	2a70      	cmp	r2, #112	; 0x70
    d8ca:	d1e5      	bne.n	d898 <_printf_i+0x30>
    d8cc:	680a      	ldr	r2, [r1, #0]
    d8ce:	f042 0220 	orr.w	r2, r2, #32
    d8d2:	600a      	str	r2, [r1, #0]
    d8d4:	e003      	b.n	d8de <_printf_i+0x76>
    d8d6:	2a75      	cmp	r2, #117	; 0x75
    d8d8:	d021      	beq.n	d91e <_printf_i+0xb6>
    d8da:	2a78      	cmp	r2, #120	; 0x78
    d8dc:	d1dc      	bne.n	d898 <_printf_i+0x30>
    d8de:	2278      	movs	r2, #120	; 0x78
    d8e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    d8e4:	496e      	ldr	r1, [pc, #440]	; (daa0 <_printf_i+0x238>)
    d8e6:	e064      	b.n	d9b2 <_printf_i+0x14a>
    d8e8:	681a      	ldr	r2, [r3, #0]
    d8ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
    d8ee:	1d11      	adds	r1, r2, #4
    d8f0:	6019      	str	r1, [r3, #0]
    d8f2:	6813      	ldr	r3, [r2, #0]
    d8f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d8f8:	2301      	movs	r3, #1
    d8fa:	e0a3      	b.n	da44 <_printf_i+0x1dc>
    d8fc:	f011 0f40 	tst.w	r1, #64	; 0x40
    d900:	f102 0104 	add.w	r1, r2, #4
    d904:	6019      	str	r1, [r3, #0]
    d906:	d0d7      	beq.n	d8b8 <_printf_i+0x50>
    d908:	f9b2 3000 	ldrsh.w	r3, [r2]
    d90c:	2b00      	cmp	r3, #0
    d90e:	da03      	bge.n	d918 <_printf_i+0xb0>
    d910:	222d      	movs	r2, #45	; 0x2d
    d912:	425b      	negs	r3, r3
    d914:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    d918:	4962      	ldr	r1, [pc, #392]	; (daa4 <_printf_i+0x23c>)
    d91a:	220a      	movs	r2, #10
    d91c:	e017      	b.n	d94e <_printf_i+0xe6>
    d91e:	6820      	ldr	r0, [r4, #0]
    d920:	6819      	ldr	r1, [r3, #0]
    d922:	f010 0f80 	tst.w	r0, #128	; 0x80
    d926:	d003      	beq.n	d930 <_printf_i+0xc8>
    d928:	1d08      	adds	r0, r1, #4
    d92a:	6018      	str	r0, [r3, #0]
    d92c:	680b      	ldr	r3, [r1, #0]
    d92e:	e006      	b.n	d93e <_printf_i+0xd6>
    d930:	f010 0f40 	tst.w	r0, #64	; 0x40
    d934:	f101 0004 	add.w	r0, r1, #4
    d938:	6018      	str	r0, [r3, #0]
    d93a:	d0f7      	beq.n	d92c <_printf_i+0xc4>
    d93c:	880b      	ldrh	r3, [r1, #0]
    d93e:	4959      	ldr	r1, [pc, #356]	; (daa4 <_printf_i+0x23c>)
    d940:	2a6f      	cmp	r2, #111	; 0x6f
    d942:	bf14      	ite	ne
    d944:	220a      	movne	r2, #10
    d946:	2208      	moveq	r2, #8
    d948:	2000      	movs	r0, #0
    d94a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    d94e:	6865      	ldr	r5, [r4, #4]
    d950:	60a5      	str	r5, [r4, #8]
    d952:	2d00      	cmp	r5, #0
    d954:	f2c0 809c 	blt.w	da90 <_printf_i+0x228>
    d958:	6820      	ldr	r0, [r4, #0]
    d95a:	f020 0004 	bic.w	r0, r0, #4
    d95e:	6020      	str	r0, [r4, #0]
    d960:	2b00      	cmp	r3, #0
    d962:	d13f      	bne.n	d9e4 <_printf_i+0x17c>
    d964:	2d00      	cmp	r5, #0
    d966:	f040 8095 	bne.w	da94 <_printf_i+0x22c>
    d96a:	4675      	mov	r5, lr
    d96c:	2a08      	cmp	r2, #8
    d96e:	d10b      	bne.n	d988 <_printf_i+0x120>
    d970:	6823      	ldr	r3, [r4, #0]
    d972:	07da      	lsls	r2, r3, #31
    d974:	d508      	bpl.n	d988 <_printf_i+0x120>
    d976:	6923      	ldr	r3, [r4, #16]
    d978:	6862      	ldr	r2, [r4, #4]
    d97a:	429a      	cmp	r2, r3
    d97c:	bfde      	ittt	le
    d97e:	2330      	movle	r3, #48	; 0x30
    d980:	f805 3c01 	strble.w	r3, [r5, #-1]
    d984:	f105 35ff 	addle.w	r5, r5, #4294967295
    d988:	ebae 0305 	sub.w	r3, lr, r5
    d98c:	6123      	str	r3, [r4, #16]
    d98e:	f8cd 8000 	str.w	r8, [sp]
    d992:	463b      	mov	r3, r7
    d994:	aa03      	add	r2, sp, #12
    d996:	4621      	mov	r1, r4
    d998:	4630      	mov	r0, r6
    d99a:	f7ff feef 	bl	d77c <_printf_common>
    d99e:	3001      	adds	r0, #1
    d9a0:	d155      	bne.n	da4e <_printf_i+0x1e6>
    d9a2:	f04f 30ff 	mov.w	r0, #4294967295
    d9a6:	b005      	add	sp, #20
    d9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d9ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    d9b0:	493c      	ldr	r1, [pc, #240]	; (daa4 <_printf_i+0x23c>)
    d9b2:	6822      	ldr	r2, [r4, #0]
    d9b4:	6818      	ldr	r0, [r3, #0]
    d9b6:	f012 0f80 	tst.w	r2, #128	; 0x80
    d9ba:	f100 0504 	add.w	r5, r0, #4
    d9be:	601d      	str	r5, [r3, #0]
    d9c0:	d001      	beq.n	d9c6 <_printf_i+0x15e>
    d9c2:	6803      	ldr	r3, [r0, #0]
    d9c4:	e002      	b.n	d9cc <_printf_i+0x164>
    d9c6:	0655      	lsls	r5, r2, #25
    d9c8:	d5fb      	bpl.n	d9c2 <_printf_i+0x15a>
    d9ca:	8803      	ldrh	r3, [r0, #0]
    d9cc:	07d0      	lsls	r0, r2, #31
    d9ce:	bf44      	itt	mi
    d9d0:	f042 0220 	orrmi.w	r2, r2, #32
    d9d4:	6022      	strmi	r2, [r4, #0]
    d9d6:	b91b      	cbnz	r3, d9e0 <_printf_i+0x178>
    d9d8:	6822      	ldr	r2, [r4, #0]
    d9da:	f022 0220 	bic.w	r2, r2, #32
    d9de:	6022      	str	r2, [r4, #0]
    d9e0:	2210      	movs	r2, #16
    d9e2:	e7b1      	b.n	d948 <_printf_i+0xe0>
    d9e4:	4675      	mov	r5, lr
    d9e6:	fbb3 f0f2 	udiv	r0, r3, r2
    d9ea:	fb02 3310 	mls	r3, r2, r0, r3
    d9ee:	5ccb      	ldrb	r3, [r1, r3]
    d9f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    d9f4:	4603      	mov	r3, r0
    d9f6:	2800      	cmp	r0, #0
    d9f8:	d1f5      	bne.n	d9e6 <_printf_i+0x17e>
    d9fa:	e7b7      	b.n	d96c <_printf_i+0x104>
    d9fc:	6808      	ldr	r0, [r1, #0]
    d9fe:	681a      	ldr	r2, [r3, #0]
    da00:	6949      	ldr	r1, [r1, #20]
    da02:	f010 0f80 	tst.w	r0, #128	; 0x80
    da06:	d004      	beq.n	da12 <_printf_i+0x1aa>
    da08:	1d10      	adds	r0, r2, #4
    da0a:	6018      	str	r0, [r3, #0]
    da0c:	6813      	ldr	r3, [r2, #0]
    da0e:	6019      	str	r1, [r3, #0]
    da10:	e007      	b.n	da22 <_printf_i+0x1ba>
    da12:	f010 0f40 	tst.w	r0, #64	; 0x40
    da16:	f102 0004 	add.w	r0, r2, #4
    da1a:	6018      	str	r0, [r3, #0]
    da1c:	6813      	ldr	r3, [r2, #0]
    da1e:	d0f6      	beq.n	da0e <_printf_i+0x1a6>
    da20:	8019      	strh	r1, [r3, #0]
    da22:	2300      	movs	r3, #0
    da24:	6123      	str	r3, [r4, #16]
    da26:	4675      	mov	r5, lr
    da28:	e7b1      	b.n	d98e <_printf_i+0x126>
    da2a:	681a      	ldr	r2, [r3, #0]
    da2c:	1d11      	adds	r1, r2, #4
    da2e:	6019      	str	r1, [r3, #0]
    da30:	6815      	ldr	r5, [r2, #0]
    da32:	6862      	ldr	r2, [r4, #4]
    da34:	2100      	movs	r1, #0
    da36:	4628      	mov	r0, r5
    da38:	f000 f8d2 	bl	dbe0 <memchr>
    da3c:	b108      	cbz	r0, da42 <_printf_i+0x1da>
    da3e:	1b40      	subs	r0, r0, r5
    da40:	6060      	str	r0, [r4, #4]
    da42:	6863      	ldr	r3, [r4, #4]
    da44:	6123      	str	r3, [r4, #16]
    da46:	2300      	movs	r3, #0
    da48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    da4c:	e79f      	b.n	d98e <_printf_i+0x126>
    da4e:	6923      	ldr	r3, [r4, #16]
    da50:	462a      	mov	r2, r5
    da52:	4639      	mov	r1, r7
    da54:	4630      	mov	r0, r6
    da56:	47c0      	blx	r8
    da58:	3001      	adds	r0, #1
    da5a:	d0a2      	beq.n	d9a2 <_printf_i+0x13a>
    da5c:	6823      	ldr	r3, [r4, #0]
    da5e:	079b      	lsls	r3, r3, #30
    da60:	d507      	bpl.n	da72 <_printf_i+0x20a>
    da62:	2500      	movs	r5, #0
    da64:	f104 0919 	add.w	r9, r4, #25
    da68:	68e3      	ldr	r3, [r4, #12]
    da6a:	9a03      	ldr	r2, [sp, #12]
    da6c:	1a9b      	subs	r3, r3, r2
    da6e:	429d      	cmp	r5, r3
    da70:	db05      	blt.n	da7e <_printf_i+0x216>
    da72:	68e0      	ldr	r0, [r4, #12]
    da74:	9b03      	ldr	r3, [sp, #12]
    da76:	4298      	cmp	r0, r3
    da78:	bfb8      	it	lt
    da7a:	4618      	movlt	r0, r3
    da7c:	e793      	b.n	d9a6 <_printf_i+0x13e>
    da7e:	2301      	movs	r3, #1
    da80:	464a      	mov	r2, r9
    da82:	4639      	mov	r1, r7
    da84:	4630      	mov	r0, r6
    da86:	47c0      	blx	r8
    da88:	3001      	adds	r0, #1
    da8a:	d08a      	beq.n	d9a2 <_printf_i+0x13a>
    da8c:	3501      	adds	r5, #1
    da8e:	e7eb      	b.n	da68 <_printf_i+0x200>
    da90:	2b00      	cmp	r3, #0
    da92:	d1a7      	bne.n	d9e4 <_printf_i+0x17c>
    da94:	780b      	ldrb	r3, [r1, #0]
    da96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    da9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    da9e:	e765      	b.n	d96c <_printf_i+0x104>
    daa0:	0000ea0a 	.word	0x0000ea0a
    daa4:	0000e9f9 	.word	0x0000e9f9

0000daa8 <__sread>:
    daa8:	b510      	push	{r4, lr}
    daaa:	460c      	mov	r4, r1
    daac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dab0:	f000 f926 	bl	dd00 <_read_r>
    dab4:	2800      	cmp	r0, #0
    dab6:	bfab      	itete	ge
    dab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    daba:	89a3      	ldrhlt	r3, [r4, #12]
    dabc:	181b      	addge	r3, r3, r0
    dabe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    dac2:	bfac      	ite	ge
    dac4:	6563      	strge	r3, [r4, #84]	; 0x54
    dac6:	81a3      	strhlt	r3, [r4, #12]
    dac8:	bd10      	pop	{r4, pc}

0000daca <__swrite>:
    daca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dace:	461f      	mov	r7, r3
    dad0:	898b      	ldrh	r3, [r1, #12]
    dad2:	05db      	lsls	r3, r3, #23
    dad4:	4605      	mov	r5, r0
    dad6:	460c      	mov	r4, r1
    dad8:	4616      	mov	r6, r2
    dada:	d505      	bpl.n	dae8 <__swrite+0x1e>
    dadc:	2302      	movs	r3, #2
    dade:	2200      	movs	r2, #0
    dae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dae4:	f000 f868 	bl	dbb8 <_lseek_r>
    dae8:	89a3      	ldrh	r3, [r4, #12]
    daea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    daee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    daf2:	81a3      	strh	r3, [r4, #12]
    daf4:	4632      	mov	r2, r6
    daf6:	463b      	mov	r3, r7
    daf8:	4628      	mov	r0, r5
    dafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dafe:	f000 b817 	b.w	db30 <_write_r>

0000db02 <__sseek>:
    db02:	b510      	push	{r4, lr}
    db04:	460c      	mov	r4, r1
    db06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    db0a:	f000 f855 	bl	dbb8 <_lseek_r>
    db0e:	1c43      	adds	r3, r0, #1
    db10:	89a3      	ldrh	r3, [r4, #12]
    db12:	bf15      	itete	ne
    db14:	6560      	strne	r0, [r4, #84]	; 0x54
    db16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    db1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    db1e:	81a3      	strheq	r3, [r4, #12]
    db20:	bf18      	it	ne
    db22:	81a3      	strhne	r3, [r4, #12]
    db24:	bd10      	pop	{r4, pc}

0000db26 <__sclose>:
    db26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    db2a:	f000 b813 	b.w	db54 <_close_r>
	...

0000db30 <_write_r>:
    db30:	b538      	push	{r3, r4, r5, lr}
    db32:	4c07      	ldr	r4, [pc, #28]	; (db50 <_write_r+0x20>)
    db34:	4605      	mov	r5, r0
    db36:	4608      	mov	r0, r1
    db38:	4611      	mov	r1, r2
    db3a:	2200      	movs	r2, #0
    db3c:	6022      	str	r2, [r4, #0]
    db3e:	461a      	mov	r2, r3
    db40:	f7fd f852 	bl	abe8 <_write>
    db44:	1c43      	adds	r3, r0, #1
    db46:	d102      	bne.n	db4e <_write_r+0x1e>
    db48:	6823      	ldr	r3, [r4, #0]
    db4a:	b103      	cbz	r3, db4e <_write_r+0x1e>
    db4c:	602b      	str	r3, [r5, #0]
    db4e:	bd38      	pop	{r3, r4, r5, pc}
    db50:	20007d50 	.word	0x20007d50

0000db54 <_close_r>:
    db54:	b538      	push	{r3, r4, r5, lr}
    db56:	4c06      	ldr	r4, [pc, #24]	; (db70 <_close_r+0x1c>)
    db58:	2300      	movs	r3, #0
    db5a:	4605      	mov	r5, r0
    db5c:	4608      	mov	r0, r1
    db5e:	6023      	str	r3, [r4, #0]
    db60:	f7f8 fbf0 	bl	6344 <_close>
    db64:	1c43      	adds	r3, r0, #1
    db66:	d102      	bne.n	db6e <_close_r+0x1a>
    db68:	6823      	ldr	r3, [r4, #0]
    db6a:	b103      	cbz	r3, db6e <_close_r+0x1a>
    db6c:	602b      	str	r3, [r5, #0]
    db6e:	bd38      	pop	{r3, r4, r5, pc}
    db70:	20007d50 	.word	0x20007d50

0000db74 <_fstat_r>:
    db74:	b538      	push	{r3, r4, r5, lr}
    db76:	4c07      	ldr	r4, [pc, #28]	; (db94 <_fstat_r+0x20>)
    db78:	2300      	movs	r3, #0
    db7a:	4605      	mov	r5, r0
    db7c:	4608      	mov	r0, r1
    db7e:	4611      	mov	r1, r2
    db80:	6023      	str	r3, [r4, #0]
    db82:	f7f8 fbe2 	bl	634a <_fstat>
    db86:	1c43      	adds	r3, r0, #1
    db88:	d102      	bne.n	db90 <_fstat_r+0x1c>
    db8a:	6823      	ldr	r3, [r4, #0]
    db8c:	b103      	cbz	r3, db90 <_fstat_r+0x1c>
    db8e:	602b      	str	r3, [r5, #0]
    db90:	bd38      	pop	{r3, r4, r5, pc}
    db92:	bf00      	nop
    db94:	20007d50 	.word	0x20007d50

0000db98 <_isatty_r>:
    db98:	b538      	push	{r3, r4, r5, lr}
    db9a:	4c06      	ldr	r4, [pc, #24]	; (dbb4 <_isatty_r+0x1c>)
    db9c:	2300      	movs	r3, #0
    db9e:	4605      	mov	r5, r0
    dba0:	4608      	mov	r0, r1
    dba2:	6023      	str	r3, [r4, #0]
    dba4:	f7f8 fbd6 	bl	6354 <_isatty>
    dba8:	1c43      	adds	r3, r0, #1
    dbaa:	d102      	bne.n	dbb2 <_isatty_r+0x1a>
    dbac:	6823      	ldr	r3, [r4, #0]
    dbae:	b103      	cbz	r3, dbb2 <_isatty_r+0x1a>
    dbb0:	602b      	str	r3, [r5, #0]
    dbb2:	bd38      	pop	{r3, r4, r5, pc}
    dbb4:	20007d50 	.word	0x20007d50

0000dbb8 <_lseek_r>:
    dbb8:	b538      	push	{r3, r4, r5, lr}
    dbba:	4c07      	ldr	r4, [pc, #28]	; (dbd8 <_lseek_r+0x20>)
    dbbc:	4605      	mov	r5, r0
    dbbe:	4608      	mov	r0, r1
    dbc0:	4611      	mov	r1, r2
    dbc2:	2200      	movs	r2, #0
    dbc4:	6022      	str	r2, [r4, #0]
    dbc6:	461a      	mov	r2, r3
    dbc8:	f7f8 fbc6 	bl	6358 <_lseek>
    dbcc:	1c43      	adds	r3, r0, #1
    dbce:	d102      	bne.n	dbd6 <_lseek_r+0x1e>
    dbd0:	6823      	ldr	r3, [r4, #0]
    dbd2:	b103      	cbz	r3, dbd6 <_lseek_r+0x1e>
    dbd4:	602b      	str	r3, [r5, #0]
    dbd6:	bd38      	pop	{r3, r4, r5, pc}
    dbd8:	20007d50 	.word	0x20007d50
    dbdc:	00000000 	.word	0x00000000

0000dbe0 <memchr>:
    dbe0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    dbe4:	2a10      	cmp	r2, #16
    dbe6:	db2b      	blt.n	dc40 <memchr+0x60>
    dbe8:	f010 0f07 	tst.w	r0, #7
    dbec:	d008      	beq.n	dc00 <memchr+0x20>
    dbee:	f810 3b01 	ldrb.w	r3, [r0], #1
    dbf2:	3a01      	subs	r2, #1
    dbf4:	428b      	cmp	r3, r1
    dbf6:	d02d      	beq.n	dc54 <memchr+0x74>
    dbf8:	f010 0f07 	tst.w	r0, #7
    dbfc:	b342      	cbz	r2, dc50 <memchr+0x70>
    dbfe:	d1f6      	bne.n	dbee <memchr+0xe>
    dc00:	b4f0      	push	{r4, r5, r6, r7}
    dc02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    dc06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    dc0a:	f022 0407 	bic.w	r4, r2, #7
    dc0e:	f07f 0700 	mvns.w	r7, #0
    dc12:	2300      	movs	r3, #0
    dc14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    dc18:	3c08      	subs	r4, #8
    dc1a:	ea85 0501 	eor.w	r5, r5, r1
    dc1e:	ea86 0601 	eor.w	r6, r6, r1
    dc22:	fa85 f547 	uadd8	r5, r5, r7
    dc26:	faa3 f587 	sel	r5, r3, r7
    dc2a:	fa86 f647 	uadd8	r6, r6, r7
    dc2e:	faa5 f687 	sel	r6, r5, r7
    dc32:	b98e      	cbnz	r6, dc58 <memchr+0x78>
    dc34:	d1ee      	bne.n	dc14 <memchr+0x34>
    dc36:	bcf0      	pop	{r4, r5, r6, r7}
    dc38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    dc3c:	f002 0207 	and.w	r2, r2, #7
    dc40:	b132      	cbz	r2, dc50 <memchr+0x70>
    dc42:	f810 3b01 	ldrb.w	r3, [r0], #1
    dc46:	3a01      	subs	r2, #1
    dc48:	ea83 0301 	eor.w	r3, r3, r1
    dc4c:	b113      	cbz	r3, dc54 <memchr+0x74>
    dc4e:	d1f8      	bne.n	dc42 <memchr+0x62>
    dc50:	2000      	movs	r0, #0
    dc52:	4770      	bx	lr
    dc54:	3801      	subs	r0, #1
    dc56:	4770      	bx	lr
    dc58:	2d00      	cmp	r5, #0
    dc5a:	bf06      	itte	eq
    dc5c:	4635      	moveq	r5, r6
    dc5e:	3803      	subeq	r0, #3
    dc60:	3807      	subne	r0, #7
    dc62:	f015 0f01 	tst.w	r5, #1
    dc66:	d107      	bne.n	dc78 <memchr+0x98>
    dc68:	3001      	adds	r0, #1
    dc6a:	f415 7f80 	tst.w	r5, #256	; 0x100
    dc6e:	bf02      	ittt	eq
    dc70:	3001      	addeq	r0, #1
    dc72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    dc76:	3001      	addeq	r0, #1
    dc78:	bcf0      	pop	{r4, r5, r6, r7}
    dc7a:	3801      	subs	r0, #1
    dc7c:	4770      	bx	lr
    dc7e:	bf00      	nop

0000dc80 <memmove>:
    dc80:	4288      	cmp	r0, r1
    dc82:	b510      	push	{r4, lr}
    dc84:	eb01 0302 	add.w	r3, r1, r2
    dc88:	d803      	bhi.n	dc92 <memmove+0x12>
    dc8a:	1e42      	subs	r2, r0, #1
    dc8c:	4299      	cmp	r1, r3
    dc8e:	d10c      	bne.n	dcaa <memmove+0x2a>
    dc90:	bd10      	pop	{r4, pc}
    dc92:	4298      	cmp	r0, r3
    dc94:	d2f9      	bcs.n	dc8a <memmove+0xa>
    dc96:	1881      	adds	r1, r0, r2
    dc98:	1ad2      	subs	r2, r2, r3
    dc9a:	42d3      	cmn	r3, r2
    dc9c:	d100      	bne.n	dca0 <memmove+0x20>
    dc9e:	bd10      	pop	{r4, pc}
    dca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    dca4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    dca8:	e7f7      	b.n	dc9a <memmove+0x1a>
    dcaa:	f811 4b01 	ldrb.w	r4, [r1], #1
    dcae:	f802 4f01 	strb.w	r4, [r2, #1]!
    dcb2:	e7eb      	b.n	dc8c <memmove+0xc>

0000dcb4 <_realloc_r>:
    dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcb6:	4607      	mov	r7, r0
    dcb8:	4614      	mov	r4, r2
    dcba:	460e      	mov	r6, r1
    dcbc:	b921      	cbnz	r1, dcc8 <_realloc_r+0x14>
    dcbe:	4611      	mov	r1, r2
    dcc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dcc4:	f7fe be5e 	b.w	c984 <_malloc_r>
    dcc8:	b922      	cbnz	r2, dcd4 <_realloc_r+0x20>
    dcca:	f7fe fe0d 	bl	c8e8 <_free_r>
    dcce:	4625      	mov	r5, r4
    dcd0:	4628      	mov	r0, r5
    dcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dcd4:	f000 f826 	bl	dd24 <_malloc_usable_size_r>
    dcd8:	4284      	cmp	r4, r0
    dcda:	d90f      	bls.n	dcfc <_realloc_r+0x48>
    dcdc:	4621      	mov	r1, r4
    dcde:	4638      	mov	r0, r7
    dce0:	f7fe fe50 	bl	c984 <_malloc_r>
    dce4:	4605      	mov	r5, r0
    dce6:	2800      	cmp	r0, #0
    dce8:	d0f2      	beq.n	dcd0 <_realloc_r+0x1c>
    dcea:	4631      	mov	r1, r6
    dcec:	4622      	mov	r2, r4
    dcee:	f7fe fde7 	bl	c8c0 <memcpy>
    dcf2:	4631      	mov	r1, r6
    dcf4:	4638      	mov	r0, r7
    dcf6:	f7fe fdf7 	bl	c8e8 <_free_r>
    dcfa:	e7e9      	b.n	dcd0 <_realloc_r+0x1c>
    dcfc:	4635      	mov	r5, r6
    dcfe:	e7e7      	b.n	dcd0 <_realloc_r+0x1c>

0000dd00 <_read_r>:
    dd00:	b538      	push	{r3, r4, r5, lr}
    dd02:	4c07      	ldr	r4, [pc, #28]	; (dd20 <_read_r+0x20>)
    dd04:	4605      	mov	r5, r0
    dd06:	4608      	mov	r0, r1
    dd08:	4611      	mov	r1, r2
    dd0a:	2200      	movs	r2, #0
    dd0c:	6022      	str	r2, [r4, #0]
    dd0e:	461a      	mov	r2, r3
    dd10:	f7fc ff5a 	bl	abc8 <_read>
    dd14:	1c43      	adds	r3, r0, #1
    dd16:	d102      	bne.n	dd1e <_read_r+0x1e>
    dd18:	6823      	ldr	r3, [r4, #0]
    dd1a:	b103      	cbz	r3, dd1e <_read_r+0x1e>
    dd1c:	602b      	str	r3, [r5, #0]
    dd1e:	bd38      	pop	{r3, r4, r5, pc}
    dd20:	20007d50 	.word	0x20007d50

0000dd24 <_malloc_usable_size_r>:
    dd24:	f851 0c04 	ldr.w	r0, [r1, #-4]
    dd28:	2800      	cmp	r0, #0
    dd2a:	f1a0 0004 	sub.w	r0, r0, #4
    dd2e:	bfbc      	itt	lt
    dd30:	580b      	ldrlt	r3, [r1, r0]
    dd32:	18c0      	addlt	r0, r0, r3
    dd34:	4770      	bx	lr
    dd36:	0000      	movs	r0, r0
    dd38:	682f2e2e 	.word	0x682f2e2e
    dd3c:	692f6c61 	.word	0x692f6c61
    dd40:	756c636e 	.word	0x756c636e
    dd44:	682f6564 	.word	0x682f6564
    dd48:	775f6c61 	.word	0x775f6c61
    dd4c:	682e7464 	.word	0x682e7464
    dd50:	00000000 	.word	0x00000000
    dd54:	64616552 	.word	0x64616552
    dd58:	20676e69 	.word	0x20676e69
    dd5c:	72657355 	.word	0x72657355
    dd60:	776f5220 	.word	0x776f5220
    dd64:	00000000 	.word	0x00000000
    dd68:	7974227b 	.word	0x7974227b
    dd6c:	3a226570 	.word	0x3a226570
    dd70:	474f4c22 	.word	0x474f4c22
    dd74:	22202c22 	.word	0x22202c22
    dd78:	61746164 	.word	0x61746164
    dd7c:	5b203a22 	.word	0x5b203a22
    dd80:	22732522 	.word	0x22732522
    dd84:	0a0d7d5d 	.word	0x0a0d7d5d
    dd88:	00000000 	.word	0x00000000
    dd8c:	69726556 	.word	0x69726556
    dd90:	6e697966 	.word	0x6e697966
    dd94:	73552067 	.word	0x73552067
    dd98:	52207265 	.word	0x52207265
    dd9c:	0000776f 	.word	0x0000776f
    dda0:	61647055 	.word	0x61647055
    dda4:	676e6974 	.word	0x676e6974
    dda8:	65735520 	.word	0x65735520
    ddac:	6f522072 	.word	0x6f522072
    ddb0:	00000077 	.word	0x00000077
    ddb4:	74737953 	.word	0x74737953
    ddb8:	52206d65 	.word	0x52206d65
    ddbc:	74657365 	.word	0x74657365
    ddc0:	00000000 	.word	0x00000000
    ddc4:	68636e55 	.word	0x68636e55
    ddc8:	65676e61 	.word	0x65676e61
    ddcc:	73552064 	.word	0x73552064
    ddd0:	52207265 	.word	0x52207265
    ddd4:	0000776f 	.word	0x0000776f
    ddd8:	55206f4e 	.word	0x55206f4e
    dddc:	2074696e 	.word	0x2074696e
    dde0:	74736554 	.word	0x74736554
    dde4:	00000000 	.word	0x00000000
    dde8:	7974227b 	.word	0x7974227b
    ddec:	3a226570 	.word	0x3a226570
    ddf0:	52415722 	.word	0x52415722
    ddf4:	474e494e 	.word	0x474e494e
    ddf8:	22202c22 	.word	0x22202c22
    ddfc:	61746164 	.word	0x61746164
    de00:	5b203a22 	.word	0x5b203a22
    de04:	22732522 	.word	0x22732522
    de08:	0a0d7d5d 	.word	0x0a0d7d5d
    de0c:	00000000 	.word	0x00000000
    de10:	48206f4e 	.word	0x48206f4e
    de14:	77647261 	.word	0x77647261
    de18:	20657261 	.word	0x20657261
    de1c:	74736554 	.word	0x74736554
    de20:	00000000 	.word	0x00000000
    de24:	7974227b 	.word	0x7974227b
    de28:	3a226570 	.word	0x3a226570
    de2c:	44494d22 	.word	0x44494d22
    de30:	202c2249 	.word	0x202c2249
    de34:	74616422 	.word	0x74616422
    de38:	203a2261 	.word	0x203a2261
    de3c:	6425225b 	.word	0x6425225b
    de40:	22202c22 	.word	0x22202c22
    de44:	2c226425 	.word	0x2c226425
    de48:	64252220 	.word	0x64252220
    de4c:	22202c22 	.word	0x22202c22
    de50:	2c226425 	.word	0x2c226425
    de54:	64252220 	.word	0x64252220
    de58:	22202c22 	.word	0x22202c22
    de5c:	5d226425 	.word	0x5d226425
    de60:	000a0d7d 	.word	0x000a0d7d
    de64:	4952475b 	.word	0x4952475b
    de68:	25205d44 	.word	0x25205d44
    de6c:	25206433 	.word	0x25206433
    de70:	25206434 	.word	0x25206434
    de74:	25206434 	.word	0x25206434
    de78:	4d5b2064 	.word	0x4d5b2064
    de7c:	5d494449 	.word	0x5d494449
    de80:	3a684320 	.word	0x3a684320
    de84:	20642520 	.word	0x20642520
    de88:	646d4320 	.word	0x646d4320
    de8c:	6425203a 	.word	0x6425203a
    de90:	61502020 	.word	0x61502020
    de94:	316d6172 	.word	0x316d6172
    de98:	6425203a 	.word	0x6425203a
    de9c:	61502020 	.word	0x61502020
    dea0:	326d6172 	.word	0x326d6172
    dea4:	6425203a 	.word	0x6425203a
    dea8:	0000000a 	.word	0x0000000a
    deac:	4952475b 	.word	0x4952475b
    deb0:	25205d44 	.word	0x25205d44
    deb4:	25206433 	.word	0x25206433
    deb8:	25206434 	.word	0x25206434
    debc:	25206434 	.word	0x25206434
    dec0:	4b5b2064 	.word	0x4b5b2064
    dec4:	4f425945 	.word	0x4f425945
    dec8:	5d445241 	.word	0x5d445241
    decc:	79654b20 	.word	0x79654b20
    ded0:	6425203a 	.word	0x6425203a
    ded4:	646f4d20 	.word	0x646f4d20
    ded8:	6425203a 	.word	0x6425203a
    dedc:	646d4320 	.word	0x646d4320
    dee0:	6425203a 	.word	0x6425203a
    dee4:	4357480a 	.word	0x4357480a
    dee8:	203a4746 	.word	0x203a4746
    deec:	78383025 	.word	0x78383025
    def0:	0000000a 	.word	0x0000000a
    def4:	4952475b 	.word	0x4952475b
    def8:	25205d44 	.word	0x25205d44
    defc:	25206433 	.word	0x25206433
    df00:	25206434 	.word	0x25206434
    df04:	25206434 	.word	0x25206434
    df08:	535b2064 	.word	0x535b2064
    df0c:	205d5359 	.word	0x205d5359
    df10:	20643325 	.word	0x20643325
    df14:	20643325 	.word	0x20643325
    df18:	0a643325 	.word	0x0a643325
    df1c:	00000000 	.word	0x00000000
    df20:	7974227b 	.word	0x7974227b
    df24:	3a226570 	.word	0x3a226570
    df28:	41454822 	.word	0x41454822
    df2c:	45425452 	.word	0x45425452
    df30:	2c225441 	.word	0x2c225441
    df34:	61642220 	.word	0x61642220
    df38:	3a226174 	.word	0x3a226174
    df3c:	25225b20 	.word	0x25225b20
    df40:	202c2264 	.word	0x202c2264
    df44:	22642522 	.word	0x22642522
    df48:	2522202c 	.word	0x2522202c
    df4c:	7d5d2264 	.word	0x7d5d2264
    df50:	00000a0d 	.word	0x00000a0d
    df54:	4b4e555b 	.word	0x4b4e555b
    df58:	4e574f4e 	.word	0x4e574f4e
    df5c:	3e2d205d 	.word	0x3e2d205d
    df60:	6f725020 	.word	0x6f725020
    df64:	6f636f74 	.word	0x6f636f74
    df68:	25203a6c 	.word	0x25203a6c
    df6c:	00000a64 	.word	0x00000a64
    df70:	0f0e0d0c 	.word	0x0f0e0d0c
    df74:	0b0a0908 	.word	0x0b0a0908
    df78:	07060504 	.word	0x07060504
    df7c:	03020100 	.word	0x03020100
    df80:	30256325 	.word	0x30256325
    df84:	30257832 	.word	0x30257832
    df88:	30257832 	.word	0x30257832
    df8c:	30257832 	.word	0x30257832
    df90:	30257832 	.word	0x30257832
    df94:	63257832 	.word	0x63257832
    df98:	00000000 	.word	0x00000000
    df9c:	78383025 	.word	0x78383025
    dfa0:	00000000 	.word	0x00000000
    dfa4:	64697267 	.word	0x64697267
    dfa8:	7379735f 	.word	0x7379735f
    dfac:	68633a3a 	.word	0x68633a3a
    dfb0:	736b6365 	.word	0x736b6365
    dfb4:	00006d75 	.word	0x00006d75
    dfb8:	63656843 	.word	0x63656843
    dfbc:	6d75736b 	.word	0x6d75736b
    dfc0:	61655220 	.word	0x61655220
    dfc4:	61432f64 	.word	0x61432f64
    dfc8:	6c75636c 	.word	0x6c75636c
    dfcc:	00657461 	.word	0x00657461
    dfd0:	6b636170 	.word	0x6b636170
    dfd4:	257b7465 	.word	0x257b7465
    dfd8:	25202c64 	.word	0x25202c64
    dfdc:	25202c64 	.word	0x25202c64
    dfe0:	25202c64 	.word	0x25202c64
    dfe4:	25202c64 	.word	0x25202c64
    dfe8:	25202c64 	.word	0x25202c64
    dfec:	25202c64 	.word	0x25202c64
    dff0:	25202c64 	.word	0x25202c64
    dff4:	52207d64 	.word	0x52207d64
    dff8:	3a646165 	.word	0x3a646165
    dffc:	2c642520 	.word	0x2c642520
    e000:	6c614320 	.word	0x6c614320
    e004:	616c7563 	.word	0x616c7563
    e008:	203a6574 	.word	0x203a6574
    e00c:	00006425 	.word	0x00006425
    e010:	63656843 	.word	0x63656843
    e014:	6d75736b 	.word	0x6d75736b
    e018:	69725720 	.word	0x69725720
    e01c:	432f6574 	.word	0x432f6574
    e020:	75636c61 	.word	0x75636c61
    e024:	6574616c 	.word	0x6574616c
    e028:	00000000 	.word	0x00000000
    e02c:	63656843 	.word	0x63656843
    e030:	6d75736b 	.word	0x6d75736b
    e034:	65764f20 	.word	0x65764f20
    e038:	69727772 	.word	0x69727772
    e03c:	00006574 	.word	0x00006574
    e040:	61726150 	.word	0x61726150
    e044:	72706170 	.word	0x72706170
    e048:	73616b69 	.word	0x73616b69
    e04c:	00000000 	.word	0x00000000
    e050:	30256325 	.word	0x30256325
    e054:	30257832 	.word	0x30257832
    e058:	30257832 	.word	0x30257832
    e05c:	30257832 	.word	0x30257832
    e060:	63257832 	.word	0x63257832
    e064:	00000000 	.word	0x00000000
    e068:	30256325 	.word	0x30256325
    e06c:	30257832 	.word	0x30257832
    e070:	30257832 	.word	0x30257832
    e074:	63257832 	.word	0x63257832
    e078:	00000000 	.word	0x00000000
    e07c:	63256325 	.word	0x63256325
    e080:	63256325 	.word	0x63256325
    e084:	78323025 	.word	0x78323025
    e088:	78323025 	.word	0x78323025
    e08c:	78323025 	.word	0x78323025
    e090:	30306325 	.word	0x30306325
    e094:	0000000a 	.word	0x0000000a
    e098:	63256325 	.word	0x63256325
    e09c:	78323025 	.word	0x78323025
    e0a0:	78323025 	.word	0x78323025
    e0a4:	78323025 	.word	0x78323025
    e0a8:	78323025 	.word	0x78323025
    e0ac:	78323025 	.word	0x78323025
    e0b0:	00006325 	.word	0x00006325
    e0b4:	78323025 	.word	0x78323025
    e0b8:	00000000 	.word	0x00000000
    e0bc:	000a3030 	.word	0x000a3030
    e0c0:	682f2e2e 	.word	0x682f2e2e
    e0c4:	732f6c61 	.word	0x732f6c61
    e0c8:	682f6372 	.word	0x682f6372
    e0cc:	615f6c61 	.word	0x615f6c61
    e0d0:	615f6364 	.word	0x615f6364
    e0d4:	636e7973 	.word	0x636e7973
    e0d8:	0000632e 	.word	0x0000632e
    e0dc:	682f2e2e 	.word	0x682f2e2e
    e0e0:	732f6c61 	.word	0x732f6c61
    e0e4:	682f6372 	.word	0x682f6372
    e0e8:	635f6c61 	.word	0x635f6c61
    e0ec:	735f6372 	.word	0x735f6372
    e0f0:	2e636e79 	.word	0x2e636e79
    e0f4:	00000063 	.word	0x00000063
    e0f8:	682f2e2e 	.word	0x682f2e2e
    e0fc:	732f6c61 	.word	0x732f6c61
    e100:	682f6372 	.word	0x682f6372
    e104:	665f6c61 	.word	0x665f6c61
    e108:	6873616c 	.word	0x6873616c
    e10c:	0000632e 	.word	0x0000632e
    e110:	682f2e2e 	.word	0x682f2e2e
    e114:	732f6c61 	.word	0x732f6c61
    e118:	682f6372 	.word	0x682f6372
    e11c:	695f6c61 	.word	0x695f6c61
    e120:	6d5f6332 	.word	0x6d5f6332
    e124:	7973615f 	.word	0x7973615f
    e128:	632e636e 	.word	0x632e636e
    e12c:	00000000 	.word	0x00000000
    e130:	682f2e2e 	.word	0x682f2e2e
    e134:	732f6c61 	.word	0x732f6c61
    e138:	682f6372 	.word	0x682f6372
    e13c:	695f6c61 	.word	0x695f6c61
    e140:	00632e6f 	.word	0x00632e6f
    e144:	682f2e2e 	.word	0x682f2e2e
    e148:	732f6c61 	.word	0x732f6c61
    e14c:	682f6372 	.word	0x682f6372
    e150:	715f6c61 	.word	0x715f6c61
    e154:	5f697073 	.word	0x5f697073
    e158:	2e616d64 	.word	0x2e616d64
    e15c:	00000063 	.word	0x00000063
    e160:	682f2e2e 	.word	0x682f2e2e
    e164:	732f6c61 	.word	0x732f6c61
    e168:	682f6372 	.word	0x682f6372
    e16c:	735f6c61 	.word	0x735f6c61
    e170:	6d5f6970 	.word	0x6d5f6970
    e174:	7973615f 	.word	0x7973615f
    e178:	632e636e 	.word	0x632e636e
    e17c:	00000000 	.word	0x00000000
    e180:	682f2e2e 	.word	0x682f2e2e
    e184:	732f6c61 	.word	0x732f6c61
    e188:	682f6372 	.word	0x682f6372
    e18c:	735f6c61 	.word	0x735f6c61
    e190:	6d5f6970 	.word	0x6d5f6970
    e194:	616d645f 	.word	0x616d645f
    e198:	0000632e 	.word	0x0000632e
    e19c:	682f2e2e 	.word	0x682f2e2e
    e1a0:	732f6c61 	.word	0x732f6c61
    e1a4:	682f6372 	.word	0x682f6372
    e1a8:	745f6c61 	.word	0x745f6c61
    e1ac:	72656d69 	.word	0x72656d69
    e1b0:	0000632e 	.word	0x0000632e
    e1b4:	682f2e2e 	.word	0x682f2e2e
    e1b8:	732f6c61 	.word	0x732f6c61
    e1bc:	682f6372 	.word	0x682f6372
    e1c0:	755f6c61 	.word	0x755f6c61
    e1c4:	74726173 	.word	0x74726173
    e1c8:	7973615f 	.word	0x7973615f
    e1cc:	632e636e 	.word	0x632e636e
    e1d0:	00000000 	.word	0x00000000
    e1d4:	682f2e2e 	.word	0x682f2e2e
    e1d8:	732f6c61 	.word	0x732f6c61
    e1dc:	682f6372 	.word	0x682f6372
    e1e0:	755f6c61 	.word	0x755f6c61
    e1e4:	74726173 	.word	0x74726173
    e1e8:	6e79735f 	.word	0x6e79735f
    e1ec:	00632e63 	.word	0x00632e63
    e1f0:	682f2e2e 	.word	0x682f2e2e
    e1f4:	752f6c61 	.word	0x752f6c61
    e1f8:	736c6974 	.word	0x736c6974
    e1fc:	6372732f 	.word	0x6372732f
    e200:	6974752f 	.word	0x6974752f
    e204:	6c5f736c 	.word	0x6c5f736c
    e208:	2e747369 	.word	0x2e747369
    e20c:	00000063 	.word	0x00000063
    e210:	682f2e2e 	.word	0x682f2e2e
    e214:	752f6c61 	.word	0x752f6c61
    e218:	736c6974 	.word	0x736c6974
    e21c:	6372732f 	.word	0x6372732f
    e220:	6974752f 	.word	0x6974752f
    e224:	725f736c 	.word	0x725f736c
    e228:	62676e69 	.word	0x62676e69
    e22c:	65666675 	.word	0x65666675
    e230:	00632e72 	.word	0x00632e72

0000e234 <_adcs>:
    e234:	01000000 0003000c 00041807 00000000     ................
    e244:	0014080b 00010000 000c0100 18040003     ................
    e254:	00000004 080b0000 00000014 682f2e2e     ............../h
    e264:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    e274:	00000000                                ....

0000e278 <_cfgs>:
    e278:	00200600 08068000 00200400 08068000     .. ....... .....
    e288:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    e2a8:	00200b00 14000003 00200a00 08000002     .. ....... .....
    e2b8:	00201300 14000003 00000000 00000000     .. .............
	...
    e368:	00005400 1c000000 00005300 0c000000     .T.......S......

0000e378 <user_mux_confs>:
	...
    e3a4:	04030201 04030201 00000000 00000000     ................
	...

0000e3bc <channel_confs>:
    e3bc:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000e3fc <interrupt_cfg>:
    e3fc:	00000002 00000002 00000002 00000002     ................
	...
    e47c:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    e48c:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    e49c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    e4ac:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    e4bc:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    e4cc:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    e4dc:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000e4ec <_usarts>:
    e4ec:	00000000 40100004 00030000 00700002     .......@......p.
    e4fc:	0000aaaa 00000000 00000001 40100004     ...............@
    e50c:	00030000 00700002 0000aaaa 00000000     ......p.........
    e51c:	00000002 40100004 00030000 00700002     .......@......p.
    e52c:	00005555 00000000 00000004 40100004     UU.............@
    e53c:	00030000 00700002 0000aaaa 00000000     ......p.........
    e54c:	00000006 40100004 00030000 00700002     .......@......p.
    e55c:	0000aaaa 00000000                       ........

0000e564 <_i2cms>:
    e564:	00000005 00200014 00000100 0000e6e5     ...... .........
    e574:	00d70000 02dc6c00                       .....l..

0000e57c <sercomspi_regs>:
    e57c:	3020000c 00020000 00000000 01ff0005     .. 0............
    e58c:	20000c03 00000000 00000000 ff000600     ... ............
    e59c:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    e5ac:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    e5bc:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    e5cc:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000e5dc <_tcs>:
    e5dc:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    e5ec:	00000000 006c0001 00000308 00000021     ......l.....!...
    e5fc:	00003a98 00000000 006d0002 00000308     .:........m.....
    e60c:	00000021 00003a98 00000000 006e0003     !....:........n.
    e61c:	00000308 00000021 00003a98 00000000     ....!....:......
    e62c:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    e63c:	0000632e                                .c..

0000e640 <_usb_ep_cfgs>:
    e640:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    e658:	20000d20 00000000 00000008 20000ce0      .. ........... 
    e668:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    e680:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    e690:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    e6a0:	656d6954 2074756f 63736944 656e6e6f     Timeout Disconne
    e6b0:	26207463 73655220 52207465 69656365     ct & Reset Recei
    e6c0:	00726576 656d6954 2074756f 65522026     ver.Timeout & Re
    e6d0:	20746573 65636552 72657669 00000000     set Receiver....
    e6e0:	645f7872 6c62756f 75625f65 72656666     rx_double_buffer
    e6f0:	65766f20 6e757272 00003120 645f7872      overrun 1..rx_d
    e700:	6c62756f 75625f65 72656666 65766f20     ouble_buffer ove
    e710:	6e757272 00003220 645f7872 6c62756f     rrun 2..rx_doubl
    e720:	75625f65 72656666 65766f20 6e757272     e_buffer overrun
    e730:	00003320 6d617246 74532065 20747261      3..Frame Start 
    e740:	7366664f 00007465 6e6e6f43 00746365     Offset..Connect.
    e750:	7974227b 3a226570 41572220 4e494e52     {"type": "WARNIN
    e760:	202c2247 74616422 203a2261 6e55225b     G", "data": ["Un
    e770:	776f6e6b 73654d20 65676173 70795420     know Message Typ
    e780:	7d5d2265 0000000d 7974227b 3a226570     e"]}....{"type":
    e790:	41572220 4e494e52 202c2247 74616422      "WARNING", "dat
    e7a0:	203a2261 6e49225b 696c6176 68432064     a": ["Invalid Ch
    e7b0:	736b6365 5d226d75 00000d7d 7974227b     ecksum"]}...{"ty
    e7c0:	3a226570 52452220 22524f52 6422202c     pe": "ERROR", "d
    e7d0:	22617461 225b203a 6d617246 72452065     ata": ["Frame Er
    e7e0:	22726f72 000d7d5d 7974227b 3a226570     ror"]}..{"type":
    e7f0:	52452220 22524f52 6422202c 22617461      "ERROR", "data"
    e800:	225b203a 69726150 45207974 726f7272     : ["Parity Error
    e810:	0d7d5d22 00000000 72617453 6e492074     "]}.....Start In
    e820:	61697469 657a696c 00000064 20313544     itialized...D51 
    e830:	74696e49 00000000 706d6f43 7469736f     Init....Composit
    e840:	65442065 65636976 696e4920 6c616974     e Device Initial
    e850:	64657a69 00000000 64697247 646f4d20     ized....Grid Mod
    e860:	20656c75 74696e49 696c6169 0064657a     ule Initialized.
    e870:	65746e45 676e6972 69614d20 6f4c206e     Entering Main Lo
    e880:	0000706f 706d6f43 7469736f 65442065     op..Composite De
    e890:	65636976 6e6f4320 7463656e 00006465     vice Connected..
    e8a0:	7974227b 3a226570 53415422 202c224b     {"type":"TASK", 
    e8b0:	74616422 203a2261 0000005b 22642522     "data": [..."%d"
    e8c0:	00000000 0000202c 7974227b 3a226570     ...., ..{"type":
    e8d0:	4f4f4c22 202c2250 74616422 203a2261     "LOOP", "data": 
    e8e0:	6425225b 22202c22 2c226425 64252220     ["%d", "%d", "%d
    e8f0:	22202c22 5d226425 000a0d7d              ", "%d"]}...

0000e8fc <keyboard_report_desc>:
    e8fc:	06090105 070501a1 e729e019 01250015     ..........)...%.
    e90c:	08950175 01810281 65290019 65250015     u.........)e..%e
    e91c:	06950875 08050081 05290119 01250015     u.........)...%.
    e92c:	05950175 03950291 00c00191              u...........

0000e938 <mouse_report_desc>:
    e938:	02090105 010901a1 090500a1 03290119     ..............).
    e948:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    e958:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    e968:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    e978:	73752f65 2e636462 00000063              e/usbdc.c...

0000e984 <_global_impure_ptr>:
    e984:	2000055c                                \.. 

0000e988 <__sf_fake_stderr>:
	...

0000e9a8 <__sf_fake_stdin>:
	...

0000e9c8 <__sf_fake_stdout>:
	...
    e9e8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    e9f8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    ea08:	31300046 35343332 39383736 64636261     F.0123456789abcd
    ea18:	00006665                                ef..

0000ea1c <_init>:
    ea1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea1e:	bf00      	nop
    ea20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ea22:	bc08      	pop	{r3}
    ea24:	469e      	mov	lr, r3
    ea26:	4770      	bx	lr

0000ea28 <__init_array_start>:
    ea28:	00000289 	.word	0x00000289

0000ea2c <_fini>:
    ea2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea2e:	bf00      	nop
    ea30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ea32:	bc08      	pop	{r3}
    ea34:	469e      	mov	lr, r3
    ea36:	4770      	bx	lr

0000ea38 <__fini_array_start>:
    ea38:	00000265 	.word	0x00000265
