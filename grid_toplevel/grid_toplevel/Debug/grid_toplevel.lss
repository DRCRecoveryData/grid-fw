
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a934  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000570  20000000  0000a934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020570  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020570  2**0
                  CONTENTS
  4 .bss          000025d8  20000570  0000aeb0  00020570  2**4
                  ALLOC
  5 .stack        00010000  20002b48  0000d488  00020570  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002059e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00062e7b  00000000  00000000  000205f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000081aa  00000000  00000000  00083472  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027989  00000000  00000000  0008b61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d80  00000000  00000000  000b2fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000029c0  00000000  00000000  000b4d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003bee8  00000000  00000000  000b76e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a910  00000000  00000000  000f35cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00117f2a  00000000  00000000  0011dedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000555c  00000000  00000000  00235e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 2b 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     H+. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	7d 2f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     }/..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 45 2c 00 00 59 2c 00 00     ........E,..Y,..
      bc:	7d 2a 00 00 89 2a 00 00 95 2a 00 00 a1 2a 00 00     }*...*...*...*..
      cc:	ad 2a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .*..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	b1 2d 00 00 ad 38 00 00 c1 38 00 00 d5 38 00 00     .-...8...8...8..
     104:	e9 38 00 00 fd 38 00 00 11 39 00 00 25 39 00 00     .8...8...9..%9..
     114:	39 39 00 00 4d 39 00 00 61 39 00 00 75 39 00 00     99..M9..a9..u9..
     124:	89 39 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .9..............
     134:	e5 02 00 00 9d 39 00 00 b1 39 00 00 c5 39 00 00     .....9...9...9..
     144:	d9 39 00 00 ed 39 00 00 01 3a 00 00 15 3a 00 00     .9...9...:...:..
     154:	29 3a 00 00 3d 3a 00 00 51 3a 00 00 65 3a 00 00     ):..=:..Q:..e:..
     164:	79 3a 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     y:..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 e9 57 00 00     .............W..
     184:	f5 57 00 00 01 58 00 00 0d 58 00 00 00 00 00 00     .W...X...X......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 fd 44 00 00 11 45 00 00     .........D...E..
     1f4:	25 45 00 00 39 45 00 00 e5 02 00 00 e5 02 00 00     %E..9E..........
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 11 27 00 00 25 27 00 00 39 27 00 00     .....'..%'..9'..
     224:	4d 27 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     M'..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000570 	.word	0x20000570
     280:	00000000 	.word	0x00000000
     284:	0000a934 	.word	0x0000a934

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000a934 	.word	0x0000a934
     2c4:	20000574 	.word	0x20000574
     2c8:	0000a934 	.word	0x0000a934
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c15 	.word	0x00000c15
     2e0:	00008fc9 	.word	0x00008fc9

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	0000a934 	.word	0x0000a934
     364:	20000570 	.word	0x20000570
     368:	20002b48 	.word	0x20002b48
     36c:	20000570 	.word	0x20000570
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	000097a9 	.word	0x000097a9
     37c:	000079a5 	.word	0x000079a5

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	2000058c 	.word	0x2000058c
     400:	200013e8 	.word	0x200013e8
     404:	200014e0 	.word	0x200014e0
     408:	43001c00 	.word	0x43001c00
     40c:	00000f91 	.word	0x00000f91
     410:	00001035 	.word	0x00001035
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	2000058c 	.word	0x2000058c
     4a4:	200015b8 	.word	0x200015b8
     4a8:	20001340 	.word	0x20001340
     4ac:	43002000 	.word	0x43002000
     4b0:	00000f91 	.word	0x00000f91
     4b4:	00001035 	.word	0x00001035
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	2000133c 	.word	0x2000133c
     4e0:	000012d1 	.word	0x000012d1

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	00001355 	.word	0x00001355

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	20001320 	.word	0x20001320
     544:	00001375 	.word	0x00001375

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	200005b4 	.word	0x200005b4
     5dc:	40003000 	.word	0x40003000
     5e0:	20001414 	.word	0x20001414
     5e4:	00001aed 	.word	0x00001aed
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	200005c4 	.word	0x200005c4
     680:	40003400 	.word	0x40003400
     684:	20001464 	.word	0x20001464
     688:	00001aed 	.word	0x00001aed
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	200005d4 	.word	0x200005d4
     724:	41012000 	.word	0x41012000
     728:	20001398 	.word	0x20001398
     72c:	00001aed 	.word	0x00001aed
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2240      	movs	r2, #64	; 0x40
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_sync_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	200012c8 	.word	0x200012c8
     838:	00001629 	.word	0x00001629
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	200005e4 	.word	0x200005e4
     8d8:	20001518 	.word	0x20001518
     8dc:	00001aed 	.word	0x00001aed
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	20001358 	.word	0x20001358
     988:	00001455 	.word	0x00001455
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	200005f4 	.word	0x200005f4
     a24:	43000800 	.word	0x43000800
     a28:	20001568 	.word	0x20001568
     a2c:	00001aed 	.word	0x00001aed
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	200014b4 	.word	0x200014b4
     b30:	00001559 	.word	0x00001559
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	00001301 	.word	0x00001301

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	00001e99 	.word	0x00001e99
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <system_init>:
}

void system_init(void)
{
     c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c18:	4b99      	ldr	r3, [pc, #612]	; (e80 <system_init+0x26c>)
     c1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c1c:	4b99      	ldr	r3, [pc, #612]	; (e84 <system_init+0x270>)
     c1e:	2220      	movs	r2, #32
     c20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c28:	629a      	str	r2, [r3, #40]	; 0x28
     c2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c3c:	2180      	movs	r1, #128	; 0x80
     c3e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c46:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c4e:	4c8e      	ldr	r4, [pc, #568]	; (e88 <system_init+0x274>)
     c50:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c54:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     c58:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c5c:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c60:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     c64:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c68:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     c70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c7c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c84:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     c88:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c8c:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c94:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c98:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c9c:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
     ca0:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     ca4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ca8:	f893 00ce 	ldrb.w	r0, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     cac:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb0:	f883 00ce 	strb.w	r0, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     cb8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cbc:	4873      	ldr	r0, [pc, #460]	; (e8c <system_init+0x278>)
     cbe:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     cc2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cc6:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
     cca:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     cce:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cd2:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     cd6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cda:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cde:	f44f 6000 	mov.w	r0, #2048	; 0x800
     ce2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce6:	4e6a      	ldr	r6, [pc, #424]	; (e90 <system_init+0x27c>)
     ce8:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     cec:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cf0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     cf4:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
     cf8:	f044 0404 	orr.w	r4, r4, #4
     cfc:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d00:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d04:	f893 014b 	ldrb.w	r0, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     d08:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d0c:	f883 014b 	strb.w	r0, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d10:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d14:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d18:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
     d1c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d20:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d28:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d2c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d34:	4a57      	ldr	r2, [pc, #348]	; (e94 <system_init+0x280>)
     d36:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d3a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     d3e:	3204      	adds	r2, #4
     d40:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d44:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     d48:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d4c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d50:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d58:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     d60:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d6c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d70:	4949      	ldr	r1, [pc, #292]	; (e98 <system_init+0x284>)
     d72:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d76:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     d7a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d82:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     d86:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d8a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d92:	4942      	ldr	r1, [pc, #264]	; (e9c <system_init+0x288>)
     d94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d98:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     d9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da0:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     da4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     da8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     db4:	4a3a      	ldr	r2, [pc, #232]	; (ea0 <system_init+0x28c>)
     db6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dba:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     dbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dc2:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     dc6:	4b37      	ldr	r3, [pc, #220]	; (ea4 <system_init+0x290>)
     dc8:	4798      	blx	r3
	ADC_1_init();
     dca:	4b37      	ldr	r3, [pc, #220]	; (ea8 <system_init+0x294>)
     dcc:	4798      	blx	r3

	CRC_0_init();
     dce:	4b37      	ldr	r3, [pc, #220]	; (eac <system_init+0x298>)
     dd0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     dd2:	4b37      	ldr	r3, [pc, #220]	; (eb0 <system_init+0x29c>)
     dd4:	4798      	blx	r3

	FLASH_0_init();
     dd6:	4b37      	ldr	r3, [pc, #220]	; (eb4 <system_init+0x2a0>)
     dd8:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     dda:	4c37      	ldr	r4, [pc, #220]	; (eb8 <system_init+0x2a4>)
     ddc:	6963      	ldr	r3, [r4, #20]
     dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     de2:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     de4:	4b35      	ldr	r3, [pc, #212]	; (ebc <system_init+0x2a8>)
     de6:	4798      	blx	r3
     de8:	4602      	mov	r2, r0
     dea:	4935      	ldr	r1, [pc, #212]	; (ec0 <system_init+0x2ac>)
     dec:	4835      	ldr	r0, [pc, #212]	; (ec4 <system_init+0x2b0>)
     dee:	4d36      	ldr	r5, [pc, #216]	; (ec8 <system_init+0x2b4>)
     df0:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     df2:	4b36      	ldr	r3, [pc, #216]	; (ecc <system_init+0x2b8>)
     df4:	4798      	blx	r3
	USART_NORTH_init();
     df6:	4b36      	ldr	r3, [pc, #216]	; (ed0 <system_init+0x2bc>)
     df8:	4798      	blx	r3
	GRID_AUX_init();
     dfa:	4b36      	ldr	r3, [pc, #216]	; (ed4 <system_init+0x2c0>)
     dfc:	4798      	blx	r3

	UI_SPI_init();
     dfe:	4b36      	ldr	r3, [pc, #216]	; (ed8 <system_init+0x2c4>)
     e00:	4798      	blx	r3
	USART_WEST_init();
     e02:	4b36      	ldr	r3, [pc, #216]	; (edc <system_init+0x2c8>)
     e04:	4798      	blx	r3

	SYS_I2C_init();
     e06:	4b36      	ldr	r3, [pc, #216]	; (ee0 <system_init+0x2cc>)
     e08:	4798      	blx	r3
	USART_SOUTH_init();
     e0a:	4b36      	ldr	r3, [pc, #216]	; (ee4 <system_init+0x2d0>)
     e0c:	4798      	blx	r3

	GRID_LED_init();
     e0e:	4b36      	ldr	r3, [pc, #216]	; (ee8 <system_init+0x2d4>)
     e10:	4798      	blx	r3

	delay_driver_init();
     e12:	4b36      	ldr	r3, [pc, #216]	; (eec <system_init+0x2d8>)
     e14:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     e16:	6963      	ldr	r3, [r4, #20]
     e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e1c:	6163      	str	r3, [r4, #20]
     e1e:	4f34      	ldr	r7, [pc, #208]	; (ef0 <system_init+0x2dc>)
     e20:	f04f 0840 	mov.w	r8, #64	; 0x40
     e24:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     e28:	4e32      	ldr	r6, [pc, #200]	; (ef4 <system_init+0x2e0>)
     e2a:	47b0      	blx	r6
     e2c:	4602      	mov	r2, r0
     e2e:	4932      	ldr	r1, [pc, #200]	; (ef8 <system_init+0x2e4>)
     e30:	4832      	ldr	r0, [pc, #200]	; (efc <system_init+0x2e8>)
     e32:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     e34:	6963      	ldr	r3, [r4, #20]
     e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e3a:	6163      	str	r3, [r4, #20]
     e3c:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     e40:	47b0      	blx	r6
     e42:	4602      	mov	r2, r0
     e44:	492e      	ldr	r1, [pc, #184]	; (f00 <system_init+0x2ec>)
     e46:	482f      	ldr	r0, [pc, #188]	; (f04 <system_init+0x2f0>)
     e48:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     e4a:	69a3      	ldr	r3, [r4, #24]
     e4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e50:	61a3      	str	r3, [r4, #24]
     e52:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
     e56:	47b0      	blx	r6
     e58:	4602      	mov	r2, r0
     e5a:	492b      	ldr	r1, [pc, #172]	; (f08 <system_init+0x2f4>)
     e5c:	482b      	ldr	r0, [pc, #172]	; (f0c <system_init+0x2f8>)
     e5e:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     e60:	69a3      	ldr	r3, [r4, #24]
     e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e66:	61a3      	str	r3, [r4, #24]
     e68:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
     e6c:	47b0      	blx	r6
     e6e:	4602      	mov	r2, r0
     e70:	4927      	ldr	r1, [pc, #156]	; (f10 <system_init+0x2fc>)
     e72:	4828      	ldr	r0, [pc, #160]	; (f14 <system_init+0x300>)
     e74:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     e76:	4b28      	ldr	r3, [pc, #160]	; (f18 <system_init+0x304>)
     e78:	4798      	blx	r3
     e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e7e:	bf00      	nop
     e80:	00002791 	.word	0x00002791
     e84:	41008000 	.word	0x41008000
     e88:	c0020000 	.word	0xc0020000
     e8c:	40028000 	.word	0x40028000
     e90:	40020800 	.word	0x40020800
     e94:	40020000 	.word	0x40020000
     e98:	c0000008 	.word	0xc0000008
     e9c:	c0000010 	.word	0xc0000010
     ea0:	c0000020 	.word	0xc0000020
     ea4:	00000381 	.word	0x00000381
     ea8:	00000419 	.word	0x00000419
     eac:	000004bd 	.word	0x000004bd
     eb0:	000004e5 	.word	0x000004e5
     eb4:	00000529 	.word	0x00000529
     eb8:	40000800 	.word	0x40000800
     ebc:	00002f75 	.word	0x00002f75
     ec0:	40002400 	.word	0x40002400
     ec4:	200012e0 	.word	0x200012e0
     ec8:	00001809 	.word	0x00001809
     ecc:	000005b5 	.word	0x000005b5
     ed0:	00000659 	.word	0x00000659
     ed4:	000006fd 	.word	0x000006fd
     ed8:	00000819 	.word	0x00000819
     edc:	000008ad 	.word	0x000008ad
     ee0:	00000969 	.word	0x00000969
     ee4:	000009fd 	.word	0x000009fd
     ee8:	00000b11 	.word	0x00000b11
     eec:	00000b39 	.word	0x00000b39
     ef0:	40001c00 	.word	0x40001c00
     ef4:	000044f5 	.word	0x000044f5
     ef8:	40003800 	.word	0x40003800
     efc:	20001604 	.word	0x20001604
     f00:	40003c00 	.word	0x40003c00
     f04:	200014f8 	.word	0x200014f8
     f08:	4101a000 	.word	0x4101a000
     f0c:	20001300 	.word	0x20001300
     f10:	4101c000 	.word	0x4101c000
     f14:	200015e4 	.word	0x200015e4
     f18:	00000bf9 	.word	0x00000bf9

00000f1c <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     f1c:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     f1e:	6983      	ldr	r3, [r0, #24]
     f20:	b103      	cbz	r3, f24 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     f22:	4798      	blx	r3
     f24:	bd08      	pop	{r3, pc}

00000f26 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     f26:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     f28:	69c3      	ldr	r3, [r0, #28]
     f2a:	b103      	cbz	r3, f2e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     f2c:	4798      	blx	r3
     f2e:	bd08      	pop	{r3, pc}

00000f30 <adc_async_channel_conversion_done>:
{
     f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f34:	4606      	mov	r6, r0
     f36:	460f      	mov	r7, r1
     f38:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     f3a:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     f3c:	5c5c      	ldrb	r4, [r3, r1]
     f3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     f42:	00e4      	lsls	r4, r4, #3
     f44:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     f48:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     f4c:	f105 0a04 	add.w	sl, r5, #4
     f50:	b2d1      	uxtb	r1, r2
     f52:	4650      	mov	r0, sl
     f54:	4b0c      	ldr	r3, [pc, #48]	; (f88 <adc_async_channel_conversion_done+0x58>)
     f56:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     f58:	4630      	mov	r0, r6
     f5a:	4b0c      	ldr	r3, [pc, #48]	; (f8c <adc_async_channel_conversion_done+0x5c>)
     f5c:	4798      	blx	r3
     f5e:	2801      	cmp	r0, #1
     f60:	d907      	bls.n	f72 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     f62:	ea4f 2119 	mov.w	r1, r9, lsr #8
     f66:	4650      	mov	r0, sl
     f68:	4b07      	ldr	r3, [pc, #28]	; (f88 <adc_async_channel_conversion_done+0x58>)
     f6a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     f6c:	8aab      	ldrh	r3, [r5, #20]
     f6e:	3301      	adds	r3, #1
     f70:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     f72:	8aab      	ldrh	r3, [r5, #20]
     f74:	3301      	adds	r3, #1
     f76:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     f78:	f858 3004 	ldr.w	r3, [r8, r4]
     f7c:	b113      	cbz	r3, f84 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     f7e:	4639      	mov	r1, r7
     f80:	4630      	mov	r0, r6
     f82:	4798      	blx	r3
     f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f88:	00002321 	.word	0x00002321
     f8c:	000026a7 	.word	0x000026a7

00000f90 <adc_async_init>:
{
     f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f94:	4689      	mov	r9, r1
     f96:	4616      	mov	r6, r2
     f98:	461c      	mov	r4, r3
     f9a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     f9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     fa0:	4607      	mov	r7, r0
     fa2:	b140      	cbz	r0, fb6 <adc_async_init+0x26>
     fa4:	b149      	cbz	r1, fba <adc_async_init+0x2a>
     fa6:	b152      	cbz	r2, fbe <adc_async_init+0x2e>
     fa8:	f1b8 0f00 	cmp.w	r8, #0
     fac:	d009      	beq.n	fc2 <adc_async_init+0x32>
     fae:	1c28      	adds	r0, r5, #0
     fb0:	bf18      	it	ne
     fb2:	2001      	movne	r0, #1
     fb4:	e006      	b.n	fc4 <adc_async_init+0x34>
     fb6:	2000      	movs	r0, #0
     fb8:	e004      	b.n	fc4 <adc_async_init+0x34>
     fba:	2000      	movs	r0, #0
     fbc:	e002      	b.n	fc4 <adc_async_init+0x34>
     fbe:	2000      	movs	r0, #0
     fc0:	e000      	b.n	fc4 <adc_async_init+0x34>
     fc2:	2000      	movs	r0, #0
     fc4:	f8df b064 	ldr.w	fp, [pc, #100]	; 102c <adc_async_init+0x9c>
     fc8:	223f      	movs	r2, #63	; 0x3f
     fca:	4659      	mov	r1, fp
     fcc:	f8df a060 	ldr.w	sl, [pc, #96]	; 1030 <adc_async_init+0xa0>
     fd0:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     fd2:	1c60      	adds	r0, r4, #1
     fd4:	2240      	movs	r2, #64	; 0x40
     fd6:	4659      	mov	r1, fp
     fd8:	4580      	cmp	r8, r0
     fda:	bfcc      	ite	gt
     fdc:	2000      	movgt	r0, #0
     fde:	2001      	movle	r0, #1
     fe0:	47d0      	blx	sl
	device = &descr->device;
     fe2:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     fe4:	21ff      	movs	r1, #255	; 0xff
     fe6:	b2da      	uxtb	r2, r3
     fe8:	54b1      	strb	r1, [r6, r2]
     fea:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     fec:	b2da      	uxtb	r2, r3
     fee:	42a2      	cmp	r2, r4
     ff0:	d9f9      	bls.n	fe6 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     ff2:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     ff4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     ff8:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     ffc:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     ffe:	4649      	mov	r1, r9
    1000:	4638      	mov	r0, r7
    1002:	4b06      	ldr	r3, [pc, #24]	; (101c <adc_async_init+0x8c>)
    1004:	4798      	blx	r3
	if (init_status) {
    1006:	4603      	mov	r3, r0
    1008:	b928      	cbnz	r0, 1016 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    100a:	4a05      	ldr	r2, [pc, #20]	; (1020 <adc_async_init+0x90>)
    100c:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    100e:	4a05      	ldr	r2, [pc, #20]	; (1024 <adc_async_init+0x94>)
    1010:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    1012:	4a05      	ldr	r2, [pc, #20]	; (1028 <adc_async_init+0x98>)
    1014:	607a      	str	r2, [r7, #4]
}
    1016:	4618      	mov	r0, r3
    1018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    101c:	00002575 	.word	0x00002575
    1020:	00000f31 	.word	0x00000f31
    1024:	00000f1d 	.word	0x00000f1d
    1028:	00000f27 	.word	0x00000f27
    102c:	0000a104 	.word	0x0000a104
    1030:	000021e5 	.word	0x000021e5

00001034 <adc_async_register_channel_buffer>:
{
    1034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1038:	460e      	mov	r6, r1
    103a:	4617      	mov	r7, r2
    103c:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    103e:	4605      	mov	r5, r0
    1040:	2800      	cmp	r0, #0
    1042:	d040      	beq.n	10c6 <adc_async_register_channel_buffer+0x92>
    1044:	2a00      	cmp	r2, #0
    1046:	d040      	beq.n	10ca <adc_async_register_channel_buffer+0x96>
    1048:	1c18      	adds	r0, r3, #0
    104a:	bf18      	it	ne
    104c:	2001      	movne	r0, #1
    104e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 10e8 <adc_async_register_channel_buffer+0xb4>
    1052:	2266      	movs	r2, #102	; 0x66
    1054:	4649      	mov	r1, r9
    1056:	4c22      	ldr	r4, [pc, #136]	; (10e0 <adc_async_register_channel_buffer+0xac>)
    1058:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    105a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    105e:	2267      	movs	r2, #103	; 0x67
    1060:	4649      	mov	r1, r9
    1062:	42b0      	cmp	r0, r6
    1064:	bf34      	ite	cc
    1066:	2000      	movcc	r0, #0
    1068:	2001      	movcs	r0, #1
    106a:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    106c:	6a29      	ldr	r1, [r5, #32]
    106e:	5d8b      	ldrb	r3, [r1, r6]
    1070:	2bff      	cmp	r3, #255	; 0xff
    1072:	d12c      	bne.n	10ce <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    1074:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    1078:	2300      	movs	r3, #0
    107a:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    107c:	b2da      	uxtb	r2, r3
    107e:	5c8a      	ldrb	r2, [r1, r2]
    1080:	2aff      	cmp	r2, #255	; 0xff
			index++;
    1082:	bf1c      	itt	ne
    1084:	3401      	addne	r4, #1
    1086:	b2e4      	uxtbne	r4, r4
    1088:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    108a:	b2da      	uxtb	r2, r3
    108c:	4282      	cmp	r2, r0
    108e:	d9f5      	bls.n	107c <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    1090:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    1094:	42a3      	cmp	r3, r4
    1096:	d31d      	bcc.n	10d4 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    1098:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    109c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    10a0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    10a2:	4448      	add	r0, r9
    10a4:	4642      	mov	r2, r8
    10a6:	4639      	mov	r1, r7
    10a8:	3004      	adds	r0, #4
    10aa:	4b0e      	ldr	r3, [pc, #56]	; (10e4 <adc_async_register_channel_buffer+0xb0>)
    10ac:	4798      	blx	r3
    10ae:	4602      	mov	r2, r0
    10b0:	b998      	cbnz	r0, 10da <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    10b2:	6a2b      	ldr	r3, [r5, #32]
    10b4:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    10b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    10b8:	4499      	add	r9, r3
    10ba:	2300      	movs	r3, #0
    10bc:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    10c0:	4610      	mov	r0, r2
    10c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    10c6:	2000      	movs	r0, #0
    10c8:	e7c1      	b.n	104e <adc_async_register_channel_buffer+0x1a>
    10ca:	2000      	movs	r0, #0
    10cc:	e7bf      	b.n	104e <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    10ce:	f06f 020c 	mvn.w	r2, #12
    10d2:	e7f5      	b.n	10c0 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    10d4:	f06f 021b 	mvn.w	r2, #27
    10d8:	e7f2      	b.n	10c0 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    10da:	f06f 020c 	mvn.w	r2, #12
    10de:	e7ef      	b.n	10c0 <adc_async_register_channel_buffer+0x8c>
    10e0:	000021e5 	.word	0x000021e5
    10e4:	0000228d 	.word	0x0000228d
    10e8:	0000a104 	.word	0x0000a104

000010ec <adc_async_enable_channel>:
{
    10ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10ee:	460d      	mov	r5, r1
	ASSERT(descr);
    10f0:	4f0b      	ldr	r7, [pc, #44]	; (1120 <adc_async_enable_channel+0x34>)
    10f2:	4604      	mov	r4, r0
    10f4:	2283      	movs	r2, #131	; 0x83
    10f6:	4639      	mov	r1, r7
    10f8:	3000      	adds	r0, #0
    10fa:	bf18      	it	ne
    10fc:	2001      	movne	r0, #1
    10fe:	4e09      	ldr	r6, [pc, #36]	; (1124 <adc_async_enable_channel+0x38>)
    1100:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    1102:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    1106:	2284      	movs	r2, #132	; 0x84
    1108:	4639      	mov	r1, r7
    110a:	42a8      	cmp	r0, r5
    110c:	bf34      	ite	cc
    110e:	2000      	movcc	r0, #0
    1110:	2001      	movcs	r0, #1
    1112:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    1114:	4629      	mov	r1, r5
    1116:	4620      	mov	r0, r4
    1118:	4b03      	ldr	r3, [pc, #12]	; (1128 <adc_async_enable_channel+0x3c>)
    111a:	4798      	blx	r3
}
    111c:	2000      	movs	r0, #0
    111e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1120:	0000a104 	.word	0x0000a104
    1124:	000021e5 	.word	0x000021e5
    1128:	00002691 	.word	0x00002691

0000112c <adc_async_register_callback>:
{
    112c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1130:	460e      	mov	r6, r1
    1132:	4614      	mov	r4, r2
    1134:	4699      	mov	r9, r3
	ASSERT(descr);
    1136:	f8df 8070 	ldr.w	r8, [pc, #112]	; 11a8 <adc_async_register_callback+0x7c>
    113a:	4605      	mov	r5, r0
    113c:	229c      	movs	r2, #156	; 0x9c
    113e:	4641      	mov	r1, r8
    1140:	3000      	adds	r0, #0
    1142:	bf18      	it	ne
    1144:	2001      	movne	r0, #1
    1146:	4f16      	ldr	r7, [pc, #88]	; (11a0 <adc_async_register_callback+0x74>)
    1148:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    114a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    114e:	229d      	movs	r2, #157	; 0x9d
    1150:	4641      	mov	r1, r8
    1152:	42b0      	cmp	r0, r6
    1154:	bf34      	ite	cc
    1156:	2000      	movcc	r0, #0
    1158:	2001      	movcs	r0, #1
    115a:	47b8      	blx	r7
	switch (type) {
    115c:	2c01      	cmp	r4, #1
    115e:	d019      	beq.n	1194 <adc_async_register_callback+0x68>
    1160:	b12c      	cbz	r4, 116e <adc_async_register_callback+0x42>
    1162:	2c02      	cmp	r4, #2
    1164:	d019      	beq.n	119a <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    1166:	f06f 000c 	mvn.w	r0, #12
}
    116a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    116e:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    1170:	5d9b      	ldrb	r3, [r3, r6]
    1172:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1178:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    117c:	f119 0300 	adds.w	r3, r9, #0
    1180:	bf18      	it	ne
    1182:	2301      	movne	r3, #1
    1184:	4622      	mov	r2, r4
    1186:	4631      	mov	r1, r6
    1188:	4628      	mov	r0, r5
    118a:	4c06      	ldr	r4, [pc, #24]	; (11a4 <adc_async_register_callback+0x78>)
    118c:	47a0      	blx	r4
	return ERR_NONE;
    118e:	2000      	movs	r0, #0
    1190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    1194:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    1198:	e7f0      	b.n	117c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    119a:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    119e:	e7ed      	b.n	117c <adc_async_register_callback+0x50>
    11a0:	000021e5 	.word	0x000021e5
    11a4:	000026cf 	.word	0x000026cf
    11a8:	0000a104 	.word	0x0000a104

000011ac <adc_async_read_channel>:
{
    11ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b0:	b083      	sub	sp, #12
    11b2:	4688      	mov	r8, r1
    11b4:	4691      	mov	r9, r2
    11b6:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    11b8:	4604      	mov	r4, r0
    11ba:	2800      	cmp	r0, #0
    11bc:	d04f      	beq.n	125e <adc_async_read_channel+0xb2>
    11be:	2a00      	cmp	r2, #0
    11c0:	d04f      	beq.n	1262 <adc_async_read_channel+0xb6>
    11c2:	1c18      	adds	r0, r3, #0
    11c4:	bf18      	it	ne
    11c6:	2001      	movne	r0, #1
    11c8:	4f29      	ldr	r7, [pc, #164]	; (1270 <adc_async_read_channel+0xc4>)
    11ca:	22bc      	movs	r2, #188	; 0xbc
    11cc:	4639      	mov	r1, r7
    11ce:	4e29      	ldr	r6, [pc, #164]	; (1274 <adc_async_read_channel+0xc8>)
    11d0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    11d2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    11d6:	22bd      	movs	r2, #189	; 0xbd
    11d8:	4639      	mov	r1, r7
    11da:	4540      	cmp	r0, r8
    11dc:	bf34      	ite	cc
    11de:	2000      	movcc	r0, #0
    11e0:	2001      	movcs	r0, #1
    11e2:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    11e4:	4620      	mov	r0, r4
    11e6:	4b24      	ldr	r3, [pc, #144]	; (1278 <adc_async_read_channel+0xcc>)
    11e8:	4798      	blx	r3
	ASSERT(!(length % data_size));
    11ea:	fb95 f3f0 	sdiv	r3, r5, r0
    11ee:	fb03 5010 	mls	r0, r3, r0, r5
    11f2:	22bf      	movs	r2, #191	; 0xbf
    11f4:	4639      	mov	r1, r7
    11f6:	fab0 f080 	clz	r0, r0
    11fa:	0940      	lsrs	r0, r0, #5
    11fc:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    11fe:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    1200:	f813 b008 	ldrb.w	fp, [r3, r8]
    1204:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    1208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    120a:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    120e:	a801      	add	r0, sp, #4
    1210:	4b1a      	ldr	r3, [pc, #104]	; (127c <adc_async_read_channel+0xd0>)
    1212:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    1214:	f10b 0a04 	add.w	sl, fp, #4
    1218:	4650      	mov	r0, sl
    121a:	4b19      	ldr	r3, [pc, #100]	; (1280 <adc_async_read_channel+0xd4>)
    121c:	4798      	blx	r3
    121e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    1220:	a801      	add	r0, sp, #4
    1222:	4b18      	ldr	r3, [pc, #96]	; (1284 <adc_async_read_channel+0xd8>)
    1224:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1226:	f1b8 0f00 	cmp.w	r8, #0
    122a:	d01c      	beq.n	1266 <adc_async_read_channel+0xba>
    122c:	b1ed      	cbz	r5, 126a <adc_async_read_channel+0xbe>
    122e:	3d01      	subs	r5, #1
    1230:	b2ad      	uxth	r5, r5
    1232:	3502      	adds	r5, #2
    1234:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    1236:	4f14      	ldr	r7, [pc, #80]	; (1288 <adc_async_read_channel+0xdc>)
    1238:	b2a6      	uxth	r6, r4
    123a:	1e61      	subs	r1, r4, #1
    123c:	4449      	add	r1, r9
    123e:	4650      	mov	r0, sl
    1240:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    1242:	4544      	cmp	r4, r8
    1244:	d002      	beq.n	124c <adc_async_read_channel+0xa0>
    1246:	3401      	adds	r4, #1
    1248:	42ac      	cmp	r4, r5
    124a:	d1f5      	bne.n	1238 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    124c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    1250:	1b9b      	subs	r3, r3, r6
    1252:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    1256:	4630      	mov	r0, r6
    1258:	b003      	add	sp, #12
    125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    125e:	2000      	movs	r0, #0
    1260:	e7b2      	b.n	11c8 <adc_async_read_channel+0x1c>
    1262:	2000      	movs	r0, #0
    1264:	e7b0      	b.n	11c8 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    1266:	2600      	movs	r6, #0
    1268:	e7f0      	b.n	124c <adc_async_read_channel+0xa0>
    126a:	2600      	movs	r6, #0
    126c:	e7ee      	b.n	124c <adc_async_read_channel+0xa0>
    126e:	bf00      	nop
    1270:	0000a104 	.word	0x0000a104
    1274:	000021e5 	.word	0x000021e5
    1278:	000026a7 	.word	0x000026a7
    127c:	000012b5 	.word	0x000012b5
    1280:	00002361 	.word	0x00002361
    1284:	000012c3 	.word	0x000012c3
    1288:	000022dd 	.word	0x000022dd

0000128c <adc_async_start_conversion>:
{
    128c:	b510      	push	{r4, lr}
	ASSERT(descr);
    128e:	4604      	mov	r4, r0
    1290:	22d6      	movs	r2, #214	; 0xd6
    1292:	4905      	ldr	r1, [pc, #20]	; (12a8 <adc_async_start_conversion+0x1c>)
    1294:	3000      	adds	r0, #0
    1296:	bf18      	it	ne
    1298:	2001      	movne	r0, #1
    129a:	4b04      	ldr	r3, [pc, #16]	; (12ac <adc_async_start_conversion+0x20>)
    129c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    129e:	4620      	mov	r0, r4
    12a0:	4b03      	ldr	r3, [pc, #12]	; (12b0 <adc_async_start_conversion+0x24>)
    12a2:	4798      	blx	r3
}
    12a4:	2000      	movs	r0, #0
    12a6:	bd10      	pop	{r4, pc}
    12a8:	0000a104 	.word	0x0000a104
    12ac:	000021e5 	.word	0x000021e5
    12b0:	000026b9 	.word	0x000026b9

000012b4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    12b4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    12b8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    12ba:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    12bc:	f3bf 8f5f 	dmb	sy
    12c0:	4770      	bx	lr

000012c2 <atomic_leave_critical>:
    12c2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    12c6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    12c8:	f383 8810 	msr	PRIMASK, r3
    12cc:	4770      	bx	lr
	...

000012d0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    12d0:	b538      	push	{r3, r4, r5, lr}
    12d2:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    12d4:	4605      	mov	r5, r0
    12d6:	b158      	cbz	r0, 12f0 <crc_sync_init+0x20>
    12d8:	1c08      	adds	r0, r1, #0
    12da:	bf18      	it	ne
    12dc:	2001      	movne	r0, #1
    12de:	222b      	movs	r2, #43	; 0x2b
    12e0:	4904      	ldr	r1, [pc, #16]	; (12f4 <crc_sync_init+0x24>)
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <crc_sync_init+0x28>)
    12e4:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    12e6:	4621      	mov	r1, r4
    12e8:	4628      	mov	r0, r5
    12ea:	4b04      	ldr	r3, [pc, #16]	; (12fc <crc_sync_init+0x2c>)
    12ec:	4798      	blx	r3
}
    12ee:	bd38      	pop	{r3, r4, r5, pc}
    12f0:	2000      	movs	r0, #0
    12f2:	e7f4      	b.n	12de <crc_sync_init+0xe>
    12f4:	0000a120 	.word	0x0000a120
    12f8:	000021e5 	.word	0x000021e5
    12fc:	00002ab9 	.word	0x00002ab9

00001300 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1300:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1302:	4b02      	ldr	r3, [pc, #8]	; (130c <delay_init+0xc>)
    1304:	6018      	str	r0, [r3, #0]
    1306:	4b02      	ldr	r3, [pc, #8]	; (1310 <delay_init+0x10>)
    1308:	4798      	blx	r3
    130a:	bd08      	pop	{r3, pc}
    130c:	20000604 	.word	0x20000604
    1310:	00004071 	.word	0x00004071

00001314 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1314:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1316:	4b04      	ldr	r3, [pc, #16]	; (1328 <delay_us+0x14>)
    1318:	681c      	ldr	r4, [r3, #0]
    131a:	4b04      	ldr	r3, [pc, #16]	; (132c <delay_us+0x18>)
    131c:	4798      	blx	r3
    131e:	4601      	mov	r1, r0
    1320:	4620      	mov	r0, r4
    1322:	4b03      	ldr	r3, [pc, #12]	; (1330 <delay_us+0x1c>)
    1324:	4798      	blx	r3
    1326:	bd10      	pop	{r4, pc}
    1328:	20000604 	.word	0x20000604
    132c:	0000277d 	.word	0x0000277d
    1330:	00004085 	.word	0x00004085

00001334 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1334:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1336:	4b04      	ldr	r3, [pc, #16]	; (1348 <delay_ms+0x14>)
    1338:	681c      	ldr	r4, [r3, #0]
    133a:	4b04      	ldr	r3, [pc, #16]	; (134c <delay_ms+0x18>)
    133c:	4798      	blx	r3
    133e:	4601      	mov	r1, r0
    1340:	4620      	mov	r0, r4
    1342:	4b03      	ldr	r3, [pc, #12]	; (1350 <delay_ms+0x1c>)
    1344:	4798      	blx	r3
    1346:	bd10      	pop	{r4, pc}
    1348:	20000604 	.word	0x20000604
    134c:	00002785 	.word	0x00002785
    1350:	00004085 	.word	0x00004085

00001354 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1354:	b508      	push	{r3, lr}
	return _event_system_init();
    1356:	4b01      	ldr	r3, [pc, #4]	; (135c <event_system_init+0x8>)
    1358:	4798      	blx	r3
}
    135a:	bd08      	pop	{r3, pc}
    135c:	00002ac1 	.word	0x00002ac1

00001360 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1360:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1362:	6943      	ldr	r3, [r0, #20]
    1364:	b103      	cbz	r3, 1368 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1366:	4798      	blx	r3
    1368:	bd08      	pop	{r3, pc}

0000136a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    136a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    136c:	6983      	ldr	r3, [r0, #24]
    136e:	b103      	cbz	r3, 1372 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1370:	4798      	blx	r3
    1372:	bd08      	pop	{r3, pc}

00001374 <flash_init>:
{
    1374:	b538      	push	{r3, r4, r5, lr}
    1376:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1378:	4604      	mov	r4, r0
    137a:	b190      	cbz	r0, 13a2 <flash_init+0x2e>
    137c:	1c08      	adds	r0, r1, #0
    137e:	bf18      	it	ne
    1380:	2001      	movne	r0, #1
    1382:	2238      	movs	r2, #56	; 0x38
    1384:	4908      	ldr	r1, [pc, #32]	; (13a8 <flash_init+0x34>)
    1386:	4b09      	ldr	r3, [pc, #36]	; (13ac <flash_init+0x38>)
    1388:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    138a:	4629      	mov	r1, r5
    138c:	4620      	mov	r0, r4
    138e:	4b08      	ldr	r3, [pc, #32]	; (13b0 <flash_init+0x3c>)
    1390:	4798      	blx	r3
	if (rc) {
    1392:	4603      	mov	r3, r0
    1394:	b918      	cbnz	r0, 139e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1396:	4a07      	ldr	r2, [pc, #28]	; (13b4 <flash_init+0x40>)
    1398:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    139a:	4a07      	ldr	r2, [pc, #28]	; (13b8 <flash_init+0x44>)
    139c:	6062      	str	r2, [r4, #4]
}
    139e:	4618      	mov	r0, r3
    13a0:	bd38      	pop	{r3, r4, r5, pc}
    13a2:	2000      	movs	r0, #0
    13a4:	e7ed      	b.n	1382 <flash_init+0xe>
    13a6:	bf00      	nop
    13a8:	0000a13c 	.word	0x0000a13c
    13ac:	000021e5 	.word	0x000021e5
    13b0:	00002bcd 	.word	0x00002bcd
    13b4:	00001361 	.word	0x00001361
    13b8:	0000136b 	.word	0x0000136b

000013bc <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    13bc:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13be:	8843      	ldrh	r3, [r0, #2]
    13c0:	f413 7f80 	tst.w	r3, #256	; 0x100
    13c4:	d102      	bne.n	13cc <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    13c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    13c8:	b103      	cbz	r3, 13cc <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    13ca:	4798      	blx	r3
    13cc:	bd08      	pop	{r3, pc}

000013ce <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    13ce:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13d0:	8843      	ldrh	r3, [r0, #2]
    13d2:	f413 7f80 	tst.w	r3, #256	; 0x100
    13d6:	d102      	bne.n	13de <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    13d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    13da:	b103      	cbz	r3, 13de <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    13dc:	4798      	blx	r3
    13de:	bd08      	pop	{r3, pc}

000013e0 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    13e0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13e2:	8843      	ldrh	r3, [r0, #2]
    13e4:	f413 7f80 	tst.w	r3, #256	; 0x100
    13e8:	d102      	bne.n	13f0 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    13ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13ec:	b103      	cbz	r3, 13f0 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    13ee:	4798      	blx	r3
    13f0:	bd08      	pop	{r3, pc}
	...

000013f4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    13f4:	b510      	push	{r4, lr}
    13f6:	b084      	sub	sp, #16
    13f8:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    13fa:	8a83      	ldrh	r3, [r0, #20]
    13fc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1400:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1406:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    140a:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    140c:	a901      	add	r1, sp, #4
    140e:	3828      	subs	r0, #40	; 0x28
    1410:	4b03      	ldr	r3, [pc, #12]	; (1420 <i2c_m_async_write+0x2c>)
    1412:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    1414:	2800      	cmp	r0, #0
    1416:	bf08      	it	eq
    1418:	4620      	moveq	r0, r4
    141a:	b004      	add	sp, #16
    141c:	bd10      	pop	{r4, pc}
    141e:	bf00      	nop
    1420:	00003761 	.word	0x00003761

00001424 <i2c_m_async_read>:
{
    1424:	b510      	push	{r4, lr}
    1426:	b084      	sub	sp, #16
    1428:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    142a:	8a83      	ldrh	r3, [r0, #20]
    142c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1430:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1432:	f248 0301 	movw	r3, #32769	; 0x8001
    1436:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    143a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    143c:	a901      	add	r1, sp, #4
    143e:	3828      	subs	r0, #40	; 0x28
    1440:	4b03      	ldr	r3, [pc, #12]	; (1450 <i2c_m_async_read+0x2c>)
    1442:	4798      	blx	r3
}
    1444:	2800      	cmp	r0, #0
    1446:	bf08      	it	eq
    1448:	4620      	moveq	r0, r4
    144a:	b004      	add	sp, #16
    144c:	bd10      	pop	{r4, pc}
    144e:	bf00      	nop
    1450:	00003761 	.word	0x00003761

00001454 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1454:	b570      	push	{r4, r5, r6, lr}
    1456:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1458:	4604      	mov	r4, r0
    145a:	2289      	movs	r2, #137	; 0x89
    145c:	490f      	ldr	r1, [pc, #60]	; (149c <i2c_m_async_init+0x48>)
    145e:	3000      	adds	r0, #0
    1460:	bf18      	it	ne
    1462:	2001      	movne	r0, #1
    1464:	4b0e      	ldr	r3, [pc, #56]	; (14a0 <i2c_m_async_init+0x4c>)
    1466:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1468:	4629      	mov	r1, r5
    146a:	4620      	mov	r0, r4
    146c:	4b0d      	ldr	r3, [pc, #52]	; (14a4 <i2c_m_async_init+0x50>)
    146e:	4798      	blx	r3
	if (init_status) {
    1470:	4605      	mov	r5, r0
    1472:	b108      	cbz	r0, 1478 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1474:	4628      	mov	r0, r5
    1476:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    1478:	4b0b      	ldr	r3, [pc, #44]	; (14a8 <i2c_m_async_init+0x54>)
    147a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    147c:	4b0b      	ldr	r3, [pc, #44]	; (14ac <i2c_m_async_init+0x58>)
    147e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1480:	4a0b      	ldr	r2, [pc, #44]	; (14b0 <i2c_m_async_init+0x5c>)
    1482:	2101      	movs	r1, #1
    1484:	4620      	mov	r0, r4
    1486:	4e0b      	ldr	r6, [pc, #44]	; (14b4 <i2c_m_async_init+0x60>)
    1488:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    148a:	4a0b      	ldr	r2, [pc, #44]	; (14b8 <i2c_m_async_init+0x64>)
    148c:	2102      	movs	r1, #2
    148e:	4620      	mov	r0, r4
    1490:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1492:	4a0a      	ldr	r2, [pc, #40]	; (14bc <i2c_m_async_init+0x68>)
    1494:	2100      	movs	r1, #0
    1496:	4620      	mov	r0, r4
    1498:	47b0      	blx	r6
	return ERR_NONE;
    149a:	e7eb      	b.n	1474 <i2c_m_async_init+0x20>
    149c:	0000a154 	.word	0x0000a154
    14a0:	000021e5 	.word	0x000021e5
    14a4:	000036e1 	.word	0x000036e1
    14a8:	00001425 	.word	0x00001425
    14ac:	000013f5 	.word	0x000013f5
    14b0:	000013bd 	.word	0x000013bd
    14b4:	00003891 	.word	0x00003891
    14b8:	000013cf 	.word	0x000013cf
    14bc:	000013e1 	.word	0x000013e1

000014c0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    14c0:	b570      	push	{r4, r5, r6, lr}
    14c2:	460d      	mov	r5, r1
    14c4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    14c6:	4604      	mov	r4, r0
    14c8:	b160      	cbz	r0, 14e4 <io_write+0x24>
    14ca:	1c08      	adds	r0, r1, #0
    14cc:	bf18      	it	ne
    14ce:	2001      	movne	r0, #1
    14d0:	2234      	movs	r2, #52	; 0x34
    14d2:	4905      	ldr	r1, [pc, #20]	; (14e8 <io_write+0x28>)
    14d4:	4b05      	ldr	r3, [pc, #20]	; (14ec <io_write+0x2c>)
    14d6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    14d8:	6823      	ldr	r3, [r4, #0]
    14da:	4632      	mov	r2, r6
    14dc:	4629      	mov	r1, r5
    14de:	4620      	mov	r0, r4
    14e0:	4798      	blx	r3
}
    14e2:	bd70      	pop	{r4, r5, r6, pc}
    14e4:	2000      	movs	r0, #0
    14e6:	e7f3      	b.n	14d0 <io_write+0x10>
    14e8:	0000a174 	.word	0x0000a174
    14ec:	000021e5 	.word	0x000021e5

000014f0 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    14f0:	b570      	push	{r4, r5, r6, lr}
    14f2:	460d      	mov	r5, r1
    14f4:	4616      	mov	r6, r2
	ASSERT(io);
    14f6:	4604      	mov	r4, r0
    14f8:	2298      	movs	r2, #152	; 0x98
    14fa:	4907      	ldr	r1, [pc, #28]	; (1518 <_spi_m_dma_io_write+0x28>)
    14fc:	3000      	adds	r0, #0
    14fe:	bf18      	it	ne
    1500:	2001      	movne	r0, #1
    1502:	4b06      	ldr	r3, [pc, #24]	; (151c <_spi_m_dma_io_write+0x2c>)
    1504:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    1506:	4633      	mov	r3, r6
    1508:	2200      	movs	r2, #0
    150a:	4629      	mov	r1, r5
    150c:	f1a4 001c 	sub.w	r0, r4, #28
    1510:	4c03      	ldr	r4, [pc, #12]	; (1520 <_spi_m_dma_io_write+0x30>)
    1512:	47a0      	blx	r4
}
    1514:	bd70      	pop	{r4, r5, r6, pc}
    1516:	bf00      	nop
    1518:	0000a188 	.word	0x0000a188
    151c:	000021e5 	.word	0x000021e5
    1520:	00003f19 	.word	0x00003f19

00001524 <_spi_m_dma_io_read>:
{
    1524:	b570      	push	{r4, r5, r6, lr}
    1526:	460d      	mov	r5, r1
    1528:	4616      	mov	r6, r2
	ASSERT(io);
    152a:	4604      	mov	r4, r0
    152c:	2281      	movs	r2, #129	; 0x81
    152e:	4907      	ldr	r1, [pc, #28]	; (154c <_spi_m_dma_io_read+0x28>)
    1530:	3000      	adds	r0, #0
    1532:	bf18      	it	ne
    1534:	2001      	movne	r0, #1
    1536:	4b06      	ldr	r3, [pc, #24]	; (1550 <_spi_m_dma_io_read+0x2c>)
    1538:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    153a:	4633      	mov	r3, r6
    153c:	462a      	mov	r2, r5
    153e:	2100      	movs	r1, #0
    1540:	f1a4 001c 	sub.w	r0, r4, #28
    1544:	4c03      	ldr	r4, [pc, #12]	; (1554 <_spi_m_dma_io_read+0x30>)
    1546:	47a0      	blx	r4
}
    1548:	bd70      	pop	{r4, r5, r6, pc}
    154a:	bf00      	nop
    154c:	0000a188 	.word	0x0000a188
    1550:	000021e5 	.word	0x000021e5
    1554:	00003f19 	.word	0x00003f19

00001558 <spi_m_dma_init>:
{
    1558:	b538      	push	{r3, r4, r5, lr}
    155a:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    155c:	4605      	mov	r5, r0
    155e:	b1a0      	cbz	r0, 158a <spi_m_dma_init+0x32>
    1560:	1c08      	adds	r0, r1, #0
    1562:	bf18      	it	ne
    1564:	2001      	movne	r0, #1
    1566:	223b      	movs	r2, #59	; 0x3b
    1568:	4909      	ldr	r1, [pc, #36]	; (1590 <spi_m_dma_init+0x38>)
    156a:	4b0a      	ldr	r3, [pc, #40]	; (1594 <spi_m_dma_init+0x3c>)
    156c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    156e:	4628      	mov	r0, r5
    1570:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    1574:	4621      	mov	r1, r4
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <spi_m_dma_init+0x40>)
    1578:	4798      	blx	r3
	if (rc) {
    157a:	4603      	mov	r3, r0
    157c:	b918      	cbnz	r0, 1586 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    157e:	4a07      	ldr	r2, [pc, #28]	; (159c <spi_m_dma_init+0x44>)
    1580:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    1582:	4a07      	ldr	r2, [pc, #28]	; (15a0 <spi_m_dma_init+0x48>)
    1584:	622a      	str	r2, [r5, #32]
}
    1586:	4618      	mov	r0, r3
    1588:	bd38      	pop	{r3, r4, r5, pc}
    158a:	2000      	movs	r0, #0
    158c:	e7eb      	b.n	1566 <spi_m_dma_init+0xe>
    158e:	bf00      	nop
    1590:	0000a188 	.word	0x0000a188
    1594:	000021e5 	.word	0x000021e5
    1598:	00003cfd 	.word	0x00003cfd
    159c:	00001525 	.word	0x00001525
    15a0:	000014f1 	.word	0x000014f1

000015a4 <spi_m_dma_enable>:
{
    15a4:	b510      	push	{r4, lr}
	ASSERT(spi);
    15a6:	4604      	mov	r4, r0
    15a8:	2251      	movs	r2, #81	; 0x51
    15aa:	4905      	ldr	r1, [pc, #20]	; (15c0 <spi_m_dma_enable+0x1c>)
    15ac:	3000      	adds	r0, #0
    15ae:	bf18      	it	ne
    15b0:	2001      	movne	r0, #1
    15b2:	4b04      	ldr	r3, [pc, #16]	; (15c4 <spi_m_dma_enable+0x20>)
    15b4:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    15b6:	1d20      	adds	r0, r4, #4
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <spi_m_dma_enable+0x24>)
    15ba:	4798      	blx	r3
    15bc:	bd10      	pop	{r4, pc}
    15be:	bf00      	nop
    15c0:	0000a188 	.word	0x0000a188
    15c4:	000021e5 	.word	0x000021e5
    15c8:	00003e79 	.word	0x00003e79

000015cc <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	460d      	mov	r5, r1
    15d0:	4616      	mov	r6, r2
	ASSERT(spi);
    15d2:	4604      	mov	r4, r0
    15d4:	22a8      	movs	r2, #168	; 0xa8
    15d6:	4906      	ldr	r1, [pc, #24]	; (15f0 <spi_m_dma_register_callback+0x24>)
    15d8:	3000      	adds	r0, #0
    15da:	bf18      	it	ne
    15dc:	2001      	movne	r0, #1
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <spi_m_dma_register_callback+0x28>)
    15e0:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    15e2:	4632      	mov	r2, r6
    15e4:	4629      	mov	r1, r5
    15e6:	1d20      	adds	r0, r4, #4
    15e8:	4b03      	ldr	r3, [pc, #12]	; (15f8 <spi_m_dma_register_callback+0x2c>)
    15ea:	4798      	blx	r3
    15ec:	bd70      	pop	{r4, r5, r6, pc}
    15ee:	bf00      	nop
    15f0:	0000a188 	.word	0x0000a188
    15f4:	000021e5 	.word	0x000021e5
    15f8:	00003ea9 	.word	0x00003ea9

000015fc <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    15fc:	b538      	push	{r3, r4, r5, lr}
    15fe:	460d      	mov	r5, r1
	ASSERT(spi && io);
    1600:	4604      	mov	r4, r0
    1602:	b150      	cbz	r0, 161a <spi_m_dma_get_io_descriptor+0x1e>
    1604:	1c08      	adds	r0, r1, #0
    1606:	bf18      	it	ne
    1608:	2001      	movne	r0, #1
    160a:	22ae      	movs	r2, #174	; 0xae
    160c:	4904      	ldr	r1, [pc, #16]	; (1620 <spi_m_dma_get_io_descriptor+0x24>)
    160e:	4b05      	ldr	r3, [pc, #20]	; (1624 <spi_m_dma_get_io_descriptor+0x28>)
    1610:	4798      	blx	r3
	*io = &spi->io;
    1612:	3420      	adds	r4, #32
    1614:	602c      	str	r4, [r5, #0]

	return 0;
}
    1616:	2000      	movs	r0, #0
    1618:	bd38      	pop	{r3, r4, r5, pc}
    161a:	2000      	movs	r0, #0
    161c:	e7f5      	b.n	160a <spi_m_dma_get_io_descriptor+0xe>
    161e:	bf00      	nop
    1620:	0000a188 	.word	0x0000a188
    1624:	000021e5 	.word	0x000021e5

00001628 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1628:	b538      	push	{r3, r4, r5, lr}
    162a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    162c:	4604      	mov	r4, r0
    162e:	b1b8      	cbz	r0, 1660 <spi_m_sync_init+0x38>
    1630:	1c08      	adds	r0, r1, #0
    1632:	bf18      	it	ne
    1634:	2001      	movne	r0, #1
    1636:	2240      	movs	r2, #64	; 0x40
    1638:	490a      	ldr	r1, [pc, #40]	; (1664 <spi_m_sync_init+0x3c>)
    163a:	4b0b      	ldr	r3, [pc, #44]	; (1668 <spi_m_sync_init+0x40>)
    163c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    163e:	4620      	mov	r0, r4
    1640:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1644:	4629      	mov	r1, r5
    1646:	4b09      	ldr	r3, [pc, #36]	; (166c <spi_m_sync_init+0x44>)
    1648:	4798      	blx	r3

	if (rc < 0) {
    164a:	2800      	cmp	r0, #0
    164c:	db07      	blt.n	165e <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    164e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1652:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1654:	4b06      	ldr	r3, [pc, #24]	; (1670 <spi_m_sync_init+0x48>)
    1656:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1658:	4b06      	ldr	r3, [pc, #24]	; (1674 <spi_m_sync_init+0x4c>)
    165a:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    165c:	2000      	movs	r0, #0
}
    165e:	bd38      	pop	{r3, r4, r5, pc}
    1660:	2000      	movs	r0, #0
    1662:	e7e8      	b.n	1636 <spi_m_sync_init+0xe>
    1664:	0000a1a4 	.word	0x0000a1a4
    1668:	000021e5 	.word	0x000021e5
    166c:	00003a8d 	.word	0x00003a8d
    1670:	000016f5 	.word	0x000016f5
    1674:	000016b9 	.word	0x000016b9

00001678 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1678:	b530      	push	{r4, r5, lr}
    167a:	b085      	sub	sp, #20
    167c:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    167e:	4605      	mov	r5, r0
    1680:	b190      	cbz	r0, 16a8 <spi_m_sync_transfer+0x30>
    1682:	1c08      	adds	r0, r1, #0
    1684:	bf18      	it	ne
    1686:	2001      	movne	r0, #1
    1688:	22b3      	movs	r2, #179	; 0xb3
    168a:	4908      	ldr	r1, [pc, #32]	; (16ac <spi_m_sync_transfer+0x34>)
    168c:	4b08      	ldr	r3, [pc, #32]	; (16b0 <spi_m_sync_transfer+0x38>)
    168e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1690:	6823      	ldr	r3, [r4, #0]
    1692:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1694:	6863      	ldr	r3, [r4, #4]
    1696:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1698:	68a3      	ldr	r3, [r4, #8]
    169a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    169c:	a901      	add	r1, sp, #4
    169e:	1d28      	adds	r0, r5, #4
    16a0:	4b04      	ldr	r3, [pc, #16]	; (16b4 <spi_m_sync_transfer+0x3c>)
    16a2:	4798      	blx	r3
}
    16a4:	b005      	add	sp, #20
    16a6:	bd30      	pop	{r4, r5, pc}
    16a8:	2000      	movs	r0, #0
    16aa:	e7ed      	b.n	1688 <spi_m_sync_transfer+0x10>
    16ac:	0000a1a4 	.word	0x0000a1a4
    16b0:	000021e5 	.word	0x000021e5
    16b4:	00003c1d 	.word	0x00003c1d

000016b8 <_spi_m_sync_io_write>:
{
    16b8:	b570      	push	{r4, r5, r6, lr}
    16ba:	b084      	sub	sp, #16
    16bc:	460e      	mov	r6, r1
    16be:	4615      	mov	r5, r2
	ASSERT(io);
    16c0:	4604      	mov	r4, r0
    16c2:	22a3      	movs	r2, #163	; 0xa3
    16c4:	4908      	ldr	r1, [pc, #32]	; (16e8 <_spi_m_sync_io_write+0x30>)
    16c6:	3000      	adds	r0, #0
    16c8:	bf18      	it	ne
    16ca:	2001      	movne	r0, #1
    16cc:	4b07      	ldr	r3, [pc, #28]	; (16ec <_spi_m_sync_io_write+0x34>)
    16ce:	4798      	blx	r3
	xfer.rxbuf = 0;
    16d0:	2300      	movs	r3, #0
    16d2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    16d4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    16d6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    16d8:	a901      	add	r1, sp, #4
    16da:	f1a4 000c 	sub.w	r0, r4, #12
    16de:	4b04      	ldr	r3, [pc, #16]	; (16f0 <_spi_m_sync_io_write+0x38>)
    16e0:	4798      	blx	r3
}
    16e2:	b004      	add	sp, #16
    16e4:	bd70      	pop	{r4, r5, r6, pc}
    16e6:	bf00      	nop
    16e8:	0000a1a4 	.word	0x0000a1a4
    16ec:	000021e5 	.word	0x000021e5
    16f0:	00001679 	.word	0x00001679

000016f4 <_spi_m_sync_io_read>:
{
    16f4:	b570      	push	{r4, r5, r6, lr}
    16f6:	b084      	sub	sp, #16
    16f8:	460e      	mov	r6, r1
    16fa:	4615      	mov	r5, r2
	ASSERT(io);
    16fc:	4604      	mov	r4, r0
    16fe:	2287      	movs	r2, #135	; 0x87
    1700:	4908      	ldr	r1, [pc, #32]	; (1724 <_spi_m_sync_io_read+0x30>)
    1702:	3000      	adds	r0, #0
    1704:	bf18      	it	ne
    1706:	2001      	movne	r0, #1
    1708:	4b07      	ldr	r3, [pc, #28]	; (1728 <_spi_m_sync_io_read+0x34>)
    170a:	4798      	blx	r3
	xfer.rxbuf = buf;
    170c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    170e:	2300      	movs	r3, #0
    1710:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1712:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1714:	a901      	add	r1, sp, #4
    1716:	f1a4 000c 	sub.w	r0, r4, #12
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <_spi_m_sync_io_read+0x38>)
    171c:	4798      	blx	r3
}
    171e:	b004      	add	sp, #16
    1720:	bd70      	pop	{r4, r5, r6, pc}
    1722:	bf00      	nop
    1724:	0000a1a4 	.word	0x0000a1a4
    1728:	000021e5 	.word	0x000021e5
    172c:	00001679 	.word	0x00001679

00001730 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1732:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1734:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1736:	b12f      	cbz	r7, 1744 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1738:	688d      	ldr	r5, [r1, #8]
    173a:	463c      	mov	r4, r7
    173c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    173e:	f1c2 0e01 	rsb	lr, r2, #1
    1742:	e00b      	b.n	175c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1744:	4b0e      	ldr	r3, [pc, #56]	; (1780 <timer_add_timer_task+0x50>)
    1746:	4798      	blx	r3
		return;
    1748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    174a:	4473      	add	r3, lr
    174c:	68a0      	ldr	r0, [r4, #8]
    174e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1750:	42ab      	cmp	r3, r5
    1752:	d20a      	bcs.n	176a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1754:	6823      	ldr	r3, [r4, #0]
    1756:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1758:	b153      	cbz	r3, 1770 <timer_add_timer_task+0x40>
    175a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    175c:	6863      	ldr	r3, [r4, #4]
    175e:	4293      	cmp	r3, r2
    1760:	d8f3      	bhi.n	174a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1762:	68a0      	ldr	r0, [r4, #8]
    1764:	4403      	add	r3, r0
    1766:	1a9b      	subs	r3, r3, r2
    1768:	e7f2      	b.n	1750 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    176a:	42a7      	cmp	r7, r4
    176c:	d004      	beq.n	1778 <timer_add_timer_task+0x48>
    176e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1770:	4620      	mov	r0, r4
    1772:	4b04      	ldr	r3, [pc, #16]	; (1784 <timer_add_timer_task+0x54>)
    1774:	4798      	blx	r3
    1776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1778:	4660      	mov	r0, ip
    177a:	4b01      	ldr	r3, [pc, #4]	; (1780 <timer_add_timer_task+0x50>)
    177c:	4798      	blx	r3
    177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1780:	0000220d 	.word	0x0000220d
    1784:	00002239 	.word	0x00002239

00001788 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    178c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    178e:	6907      	ldr	r7, [r0, #16]
    1790:	3701      	adds	r7, #1
    1792:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1794:	7e03      	ldrb	r3, [r0, #24]
    1796:	f013 0f01 	tst.w	r3, #1
    179a:	d113      	bne.n	17c4 <timer_process_counted+0x3c>
    179c:	7e03      	ldrb	r3, [r0, #24]
    179e:	f013 0f02 	tst.w	r3, #2
    17a2:	d10f      	bne.n	17c4 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    17a4:	b354      	cbz	r4, 17fc <timer_process_counted+0x74>
    17a6:	6863      	ldr	r3, [r4, #4]
    17a8:	1afb      	subs	r3, r7, r3
    17aa:	68a2      	ldr	r2, [r4, #8]
    17ac:	4293      	cmp	r3, r2
    17ae:	d307      	bcc.n	17c0 <timer_process_counted+0x38>
    17b0:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    17b2:	f100 0814 	add.w	r8, r0, #20
    17b6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1800 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    17ba:	f8df a048 	ldr.w	sl, [pc, #72]	; 1804 <timer_process_counted+0x7c>
    17be:	e012      	b.n	17e6 <timer_process_counted+0x5e>
    17c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    17c4:	7e03      	ldrb	r3, [r0, #24]
    17c6:	f043 0302 	orr.w	r3, r3, #2
    17ca:	7603      	strb	r3, [r0, #24]
		return;
    17cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    17d0:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    17d2:	68e3      	ldr	r3, [r4, #12]
    17d4:	4620      	mov	r0, r4
    17d6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    17d8:	b185      	cbz	r5, 17fc <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    17da:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    17dc:	686b      	ldr	r3, [r5, #4]
    17de:	1afb      	subs	r3, r7, r3
    17e0:	68aa      	ldr	r2, [r5, #8]
    17e2:	4293      	cmp	r3, r2
    17e4:	d30a      	bcc.n	17fc <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    17e6:	4640      	mov	r0, r8
    17e8:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    17ea:	7c23      	ldrb	r3, [r4, #16]
    17ec:	2b01      	cmp	r3, #1
    17ee:	d1ef      	bne.n	17d0 <timer_process_counted+0x48>
			tmp->time_label = time;
    17f0:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    17f2:	463a      	mov	r2, r7
    17f4:	4621      	mov	r1, r4
    17f6:	4640      	mov	r0, r8
    17f8:	47d0      	blx	sl
    17fa:	e7e9      	b.n	17d0 <timer_process_counted+0x48>
    17fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1800:	00002281 	.word	0x00002281
    1804:	00001731 	.word	0x00001731

00001808 <timer_init>:
{
    1808:	b570      	push	{r4, r5, r6, lr}
    180a:	460e      	mov	r6, r1
    180c:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    180e:	4604      	mov	r4, r0
    1810:	b190      	cbz	r0, 1838 <timer_init+0x30>
    1812:	b199      	cbz	r1, 183c <timer_init+0x34>
    1814:	1c10      	adds	r0, r2, #0
    1816:	bf18      	it	ne
    1818:	2001      	movne	r0, #1
    181a:	223b      	movs	r2, #59	; 0x3b
    181c:	4908      	ldr	r1, [pc, #32]	; (1840 <timer_init+0x38>)
    181e:	4b09      	ldr	r3, [pc, #36]	; (1844 <timer_init+0x3c>)
    1820:	4798      	blx	r3
	descr->func = func;
    1822:	4620      	mov	r0, r4
    1824:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1828:	682b      	ldr	r3, [r5, #0]
    182a:	4631      	mov	r1, r6
    182c:	4798      	blx	r3
	descr->time                           = 0;
    182e:	2000      	movs	r0, #0
    1830:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1832:	4b05      	ldr	r3, [pc, #20]	; (1848 <timer_init+0x40>)
    1834:	6063      	str	r3, [r4, #4]
}
    1836:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1838:	2000      	movs	r0, #0
    183a:	e7ee      	b.n	181a <timer_init+0x12>
    183c:	2000      	movs	r0, #0
    183e:	e7ec      	b.n	181a <timer_init+0x12>
    1840:	0000a1c0 	.word	0x0000a1c0
    1844:	000021e5 	.word	0x000021e5
    1848:	00001789 	.word	0x00001789

0000184c <timer_start>:
{
    184c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    184e:	4604      	mov	r4, r0
    1850:	b198      	cbz	r0, 187a <timer_start+0x2e>
    1852:	6800      	ldr	r0, [r0, #0]
    1854:	3000      	adds	r0, #0
    1856:	bf18      	it	ne
    1858:	2001      	movne	r0, #1
    185a:	2254      	movs	r2, #84	; 0x54
    185c:	4909      	ldr	r1, [pc, #36]	; (1884 <timer_start+0x38>)
    185e:	4b0a      	ldr	r3, [pc, #40]	; (1888 <timer_start+0x3c>)
    1860:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    1862:	1d25      	adds	r5, r4, #4
    1864:	6823      	ldr	r3, [r4, #0]
    1866:	699b      	ldr	r3, [r3, #24]
    1868:	4628      	mov	r0, r5
    186a:	4798      	blx	r3
    186c:	b938      	cbnz	r0, 187e <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    186e:	6823      	ldr	r3, [r4, #0]
    1870:	689b      	ldr	r3, [r3, #8]
    1872:	4628      	mov	r0, r5
    1874:	4798      	blx	r3
	return ERR_NONE;
    1876:	2000      	movs	r0, #0
    1878:	bd38      	pop	{r3, r4, r5, pc}
    187a:	2000      	movs	r0, #0
    187c:	e7ed      	b.n	185a <timer_start+0xe>
		return ERR_DENIED;
    187e:	f06f 0010 	mvn.w	r0, #16
}
    1882:	bd38      	pop	{r3, r4, r5, pc}
    1884:	0000a1c0 	.word	0x0000a1c0
    1888:	000021e5 	.word	0x000021e5

0000188c <timer_add_task>:
{
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	b082      	sub	sp, #8
    1890:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    1892:	4604      	mov	r4, r0
    1894:	b328      	cbz	r0, 18e2 <timer_add_task+0x56>
    1896:	b331      	cbz	r1, 18e6 <timer_add_task+0x5a>
    1898:	6800      	ldr	r0, [r0, #0]
    189a:	3000      	adds	r0, #0
    189c:	bf18      	it	ne
    189e:	2001      	movne	r0, #1
    18a0:	227b      	movs	r2, #123	; 0x7b
    18a2:	4920      	ldr	r1, [pc, #128]	; (1924 <timer_add_task+0x98>)
    18a4:	4b20      	ldr	r3, [pc, #128]	; (1928 <timer_add_task+0x9c>)
    18a6:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    18a8:	7f23      	ldrb	r3, [r4, #28]
    18aa:	f043 0301 	orr.w	r3, r3, #1
    18ae:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    18b0:	f104 0618 	add.w	r6, r4, #24
    18b4:	4629      	mov	r1, r5
    18b6:	4630      	mov	r0, r6
    18b8:	4b1c      	ldr	r3, [pc, #112]	; (192c <timer_add_task+0xa0>)
    18ba:	4798      	blx	r3
    18bc:	b9a8      	cbnz	r0, 18ea <timer_add_task+0x5e>
	task->time_label = descr->time;
    18be:	6963      	ldr	r3, [r4, #20]
    18c0:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    18c2:	6962      	ldr	r2, [r4, #20]
    18c4:	4629      	mov	r1, r5
    18c6:	4630      	mov	r0, r6
    18c8:	4b19      	ldr	r3, [pc, #100]	; (1930 <timer_add_task+0xa4>)
    18ca:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    18cc:	7f23      	ldrb	r3, [r4, #28]
    18ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    18d2:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    18d4:	7f23      	ldrb	r3, [r4, #28]
    18d6:	f013 0f02 	tst.w	r3, #2
    18da:	d112      	bne.n	1902 <timer_add_task+0x76>
	return ERR_NONE;
    18dc:	2000      	movs	r0, #0
}
    18de:	b002      	add	sp, #8
    18e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    18e2:	2000      	movs	r0, #0
    18e4:	e7dc      	b.n	18a0 <timer_add_task+0x14>
    18e6:	2000      	movs	r0, #0
    18e8:	e7da      	b.n	18a0 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    18ea:	7f23      	ldrb	r3, [r4, #28]
    18ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    18f0:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    18f2:	2280      	movs	r2, #128	; 0x80
    18f4:	490b      	ldr	r1, [pc, #44]	; (1924 <timer_add_task+0x98>)
    18f6:	2000      	movs	r0, #0
    18f8:	4b0b      	ldr	r3, [pc, #44]	; (1928 <timer_add_task+0x9c>)
    18fa:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    18fc:	f06f 0011 	mvn.w	r0, #17
    1900:	e7ed      	b.n	18de <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    1902:	a801      	add	r0, sp, #4
    1904:	4b0b      	ldr	r3, [pc, #44]	; (1934 <timer_add_task+0xa8>)
    1906:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1908:	7f23      	ldrb	r3, [r4, #28]
    190a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    190e:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    1910:	6823      	ldr	r3, [r4, #0]
    1912:	69db      	ldr	r3, [r3, #28]
    1914:	1d20      	adds	r0, r4, #4
    1916:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1918:	a801      	add	r0, sp, #4
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <timer_add_task+0xac>)
    191c:	4798      	blx	r3
	return ERR_NONE;
    191e:	2000      	movs	r0, #0
    1920:	e7dd      	b.n	18de <timer_add_task+0x52>
    1922:	bf00      	nop
    1924:	0000a1c0 	.word	0x0000a1c0
    1928:	000021e5 	.word	0x000021e5
    192c:	000021eb 	.word	0x000021eb
    1930:	00001731 	.word	0x00001731
    1934:	000012b5 	.word	0x000012b5
    1938:	000012c3 	.word	0x000012c3

0000193c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    193c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    193e:	2300      	movs	r3, #0
    1940:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1942:	69c3      	ldr	r3, [r0, #28]
    1944:	b11b      	cbz	r3, 194e <usart_transmission_complete+0x12>
    1946:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    194a:	4610      	mov	r0, r2
    194c:	4798      	blx	r3
    194e:	bd08      	pop	{r3, pc}

00001950 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1950:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1952:	2300      	movs	r3, #0
    1954:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1956:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1958:	b11b      	cbz	r3, 1962 <usart_error+0x12>
    195a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    195e:	4610      	mov	r0, r2
    1960:	4798      	blx	r3
    1962:	bd08      	pop	{r3, pc}

00001964 <usart_fill_rx_buffer>:
{
    1964:	b538      	push	{r3, r4, r5, lr}
    1966:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1968:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    196c:	302c      	adds	r0, #44	; 0x2c
    196e:	4b03      	ldr	r3, [pc, #12]	; (197c <usart_fill_rx_buffer+0x18>)
    1970:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1972:	6a23      	ldr	r3, [r4, #32]
    1974:	b10b      	cbz	r3, 197a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1976:	4628      	mov	r0, r5
    1978:	4798      	blx	r3
    197a:	bd38      	pop	{r3, r4, r5, pc}
    197c:	00002321 	.word	0x00002321

00001980 <usart_async_write>:
{
    1980:	b570      	push	{r4, r5, r6, lr}
    1982:	460e      	mov	r6, r1
    1984:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1986:	4604      	mov	r4, r0
    1988:	b1e0      	cbz	r0, 19c4 <usart_async_write+0x44>
    198a:	b1e9      	cbz	r1, 19c8 <usart_async_write+0x48>
    198c:	1c10      	adds	r0, r2, #0
    198e:	bf18      	it	ne
    1990:	2001      	movne	r0, #1
    1992:	f240 123b 	movw	r2, #315	; 0x13b
    1996:	490f      	ldr	r1, [pc, #60]	; (19d4 <usart_async_write+0x54>)
    1998:	4b0f      	ldr	r3, [pc, #60]	; (19d8 <usart_async_write+0x58>)
    199a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    199c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    19a0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    19a4:	429a      	cmp	r2, r3
    19a6:	d111      	bne.n	19cc <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    19a8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    19aa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    19ae:	2300      	movs	r3, #0
    19b0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    19b4:	2301      	movs	r3, #1
    19b6:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    19b8:	f104 0008 	add.w	r0, r4, #8
    19bc:	4b07      	ldr	r3, [pc, #28]	; (19dc <usart_async_write+0x5c>)
    19be:	4798      	blx	r3
	return (int32_t)length;
    19c0:	4628      	mov	r0, r5
    19c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    19c4:	2000      	movs	r0, #0
    19c6:	e7e4      	b.n	1992 <usart_async_write+0x12>
    19c8:	2000      	movs	r0, #0
    19ca:	e7e2      	b.n	1992 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    19cc:	f06f 001b 	mvn.w	r0, #27
}
    19d0:	bd70      	pop	{r4, r5, r6, pc}
    19d2:	bf00      	nop
    19d4:	0000a1d8 	.word	0x0000a1d8
    19d8:	000021e5 	.word	0x000021e5
    19dc:	00003663 	.word	0x00003663

000019e0 <usart_process_byte_sent>:
{
    19e0:	b510      	push	{r4, lr}
    19e2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    19e4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    19e6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    19ea:	429a      	cmp	r2, r3
    19ec:	d009      	beq.n	1a02 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    19ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
    19f0:	1c59      	adds	r1, r3, #1
    19f2:	8781      	strh	r1, [r0, #60]	; 0x3c
    19f4:	5cd1      	ldrb	r1, [r2, r3]
    19f6:	4b04      	ldr	r3, [pc, #16]	; (1a08 <usart_process_byte_sent+0x28>)
    19f8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    19fa:	4620      	mov	r0, r4
    19fc:	4b03      	ldr	r3, [pc, #12]	; (1a0c <usart_process_byte_sent+0x2c>)
    19fe:	4798      	blx	r3
    1a00:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1a02:	4b03      	ldr	r3, [pc, #12]	; (1a10 <usart_process_byte_sent+0x30>)
    1a04:	4798      	blx	r3
    1a06:	bd10      	pop	{r4, pc}
    1a08:	0000365d 	.word	0x0000365d
    1a0c:	00003663 	.word	0x00003663
    1a10:	0000366b 	.word	0x0000366b

00001a14 <usart_async_read>:
{
    1a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a18:	b082      	sub	sp, #8
    1a1a:	460f      	mov	r7, r1
    1a1c:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    1a1e:	4606      	mov	r6, r0
    1a20:	b1a0      	cbz	r0, 1a4c <usart_async_read+0x38>
    1a22:	b199      	cbz	r1, 1a4c <usart_async_read+0x38>
    1a24:	2a00      	cmp	r2, #0
    1a26:	d12d      	bne.n	1a84 <usart_async_read+0x70>
    1a28:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a2c:	4929      	ldr	r1, [pc, #164]	; (1ad4 <usart_async_read+0xc0>)
    1a2e:	2000      	movs	r0, #0
    1a30:	4b29      	ldr	r3, [pc, #164]	; (1ad8 <usart_async_read+0xc4>)
    1a32:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a34:	a801      	add	r0, sp, #4
    1a36:	4b29      	ldr	r3, [pc, #164]	; (1adc <usart_async_read+0xc8>)
    1a38:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a3a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    1a3e:	4b28      	ldr	r3, [pc, #160]	; (1ae0 <usart_async_read+0xcc>)
    1a40:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1a42:	a801      	add	r0, sp, #4
    1a44:	4b27      	ldr	r3, [pc, #156]	; (1ae4 <usart_async_read+0xd0>)
    1a46:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1a48:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1a4a:	e03e      	b.n	1aca <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1a4c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a50:	4920      	ldr	r1, [pc, #128]	; (1ad4 <usart_async_read+0xc0>)
    1a52:	2000      	movs	r0, #0
    1a54:	4b20      	ldr	r3, [pc, #128]	; (1ad8 <usart_async_read+0xc4>)
    1a56:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a58:	a801      	add	r0, sp, #4
    1a5a:	4b20      	ldr	r3, [pc, #128]	; (1adc <usart_async_read+0xc8>)
    1a5c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a5e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1a62:	4650      	mov	r0, sl
    1a64:	4b1e      	ldr	r3, [pc, #120]	; (1ae0 <usart_async_read+0xcc>)
    1a66:	4798      	blx	r3
    1a68:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1a6a:	a801      	add	r0, sp, #4
    1a6c:	4b1d      	ldr	r3, [pc, #116]	; (1ae4 <usart_async_read+0xd0>)
    1a6e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1a70:	f1b9 0f00 	cmp.w	r9, #0
    1a74:	d004      	beq.n	1a80 <usart_async_read+0x6c>
    1a76:	f1b8 0f00 	cmp.w	r8, #0
    1a7a:	d119      	bne.n	1ab0 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1a7c:	2500      	movs	r5, #0
    1a7e:	e024      	b.n	1aca <usart_async_read+0xb6>
    1a80:	2500      	movs	r5, #0
    1a82:	e022      	b.n	1aca <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1a84:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1a88:	4912      	ldr	r1, [pc, #72]	; (1ad4 <usart_async_read+0xc0>)
    1a8a:	2001      	movs	r0, #1
    1a8c:	4b12      	ldr	r3, [pc, #72]	; (1ad8 <usart_async_read+0xc4>)
    1a8e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1a90:	a801      	add	r0, sp, #4
    1a92:	4b12      	ldr	r3, [pc, #72]	; (1adc <usart_async_read+0xc8>)
    1a94:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1a96:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1a9a:	4650      	mov	r0, sl
    1a9c:	4b10      	ldr	r3, [pc, #64]	; (1ae0 <usart_async_read+0xcc>)
    1a9e:	4798      	blx	r3
    1aa0:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1aa2:	a801      	add	r0, sp, #4
    1aa4:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <usart_async_read+0xd0>)
    1aa6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1aa8:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1aaa:	f1b9 0f00 	cmp.w	r9, #0
    1aae:	d00c      	beq.n	1aca <usart_async_read+0xb6>
{
    1ab0:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1ab2:	4e0d      	ldr	r6, [pc, #52]	; (1ae8 <usart_async_read+0xd4>)
    1ab4:	1c60      	adds	r0, r4, #1
    1ab6:	b285      	uxth	r5, r0
    1ab8:	1939      	adds	r1, r7, r4
    1aba:	4650      	mov	r0, sl
    1abc:	47b0      	blx	r6
    1abe:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1ac0:	454c      	cmp	r4, r9
    1ac2:	d202      	bcs.n	1aca <usart_async_read+0xb6>
    1ac4:	b2a3      	uxth	r3, r4
    1ac6:	4598      	cmp	r8, r3
    1ac8:	d8f4      	bhi.n	1ab4 <usart_async_read+0xa0>
}
    1aca:	4628      	mov	r0, r5
    1acc:	b002      	add	sp, #8
    1ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ad2:	bf00      	nop
    1ad4:	0000a1d8 	.word	0x0000a1d8
    1ad8:	000021e5 	.word	0x000021e5
    1adc:	000012b5 	.word	0x000012b5
    1ae0:	00002361 	.word	0x00002361
    1ae4:	000012c3 	.word	0x000012c3
    1ae8:	000022dd 	.word	0x000022dd

00001aec <usart_async_init>:
{
    1aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aee:	460d      	mov	r5, r1
    1af0:	4616      	mov	r6, r2
    1af2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1af4:	4604      	mov	r4, r0
    1af6:	b320      	cbz	r0, 1b42 <usart_async_init+0x56>
    1af8:	b329      	cbz	r1, 1b46 <usart_async_init+0x5a>
    1afa:	b332      	cbz	r2, 1b4a <usart_async_init+0x5e>
    1afc:	1c18      	adds	r0, r3, #0
    1afe:	bf18      	it	ne
    1b00:	2001      	movne	r0, #1
    1b02:	223a      	movs	r2, #58	; 0x3a
    1b04:	4913      	ldr	r1, [pc, #76]	; (1b54 <usart_async_init+0x68>)
    1b06:	4b14      	ldr	r3, [pc, #80]	; (1b58 <usart_async_init+0x6c>)
    1b08:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1b0a:	463a      	mov	r2, r7
    1b0c:	4631      	mov	r1, r6
    1b0e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1b12:	4b12      	ldr	r3, [pc, #72]	; (1b5c <usart_async_init+0x70>)
    1b14:	4798      	blx	r3
    1b16:	b9d0      	cbnz	r0, 1b4e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    1b18:	4629      	mov	r1, r5
    1b1a:	f104 0008 	add.w	r0, r4, #8
    1b1e:	4b10      	ldr	r3, [pc, #64]	; (1b60 <usart_async_init+0x74>)
    1b20:	4798      	blx	r3
	if (init_status) {
    1b22:	4603      	mov	r3, r0
    1b24:	b958      	cbnz	r0, 1b3e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1b26:	4a0f      	ldr	r2, [pc, #60]	; (1b64 <usart_async_init+0x78>)
    1b28:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1b2a:	4a0f      	ldr	r2, [pc, #60]	; (1b68 <usart_async_init+0x7c>)
    1b2c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1b2e:	4a0f      	ldr	r2, [pc, #60]	; (1b6c <usart_async_init+0x80>)
    1b30:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1b32:	4a0f      	ldr	r2, [pc, #60]	; (1b70 <usart_async_init+0x84>)
    1b34:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1b36:	4a0f      	ldr	r2, [pc, #60]	; (1b74 <usart_async_init+0x88>)
    1b38:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1b3a:	4a0f      	ldr	r2, [pc, #60]	; (1b78 <usart_async_init+0x8c>)
    1b3c:	6162      	str	r2, [r4, #20]
}
    1b3e:	4618      	mov	r0, r3
    1b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1b42:	2000      	movs	r0, #0
    1b44:	e7dd      	b.n	1b02 <usart_async_init+0x16>
    1b46:	2000      	movs	r0, #0
    1b48:	e7db      	b.n	1b02 <usart_async_init+0x16>
    1b4a:	2000      	movs	r0, #0
    1b4c:	e7d9      	b.n	1b02 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1b4e:	f06f 030c 	mvn.w	r3, #12
    1b52:	e7f4      	b.n	1b3e <usart_async_init+0x52>
    1b54:	0000a1d8 	.word	0x0000a1d8
    1b58:	000021e5 	.word	0x000021e5
    1b5c:	0000228d 	.word	0x0000228d
    1b60:	000035cd 	.word	0x000035cd
    1b64:	00001a15 	.word	0x00001a15
    1b68:	00001981 	.word	0x00001981
    1b6c:	000019e1 	.word	0x000019e1
    1b70:	00001965 	.word	0x00001965
    1b74:	0000193d 	.word	0x0000193d
    1b78:	00001951 	.word	0x00001951

00001b7c <usart_async_enable>:
{
    1b7c:	b510      	push	{r4, lr}
	ASSERT(descr);
    1b7e:	4604      	mov	r4, r0
    1b80:	2261      	movs	r2, #97	; 0x61
    1b82:	4906      	ldr	r1, [pc, #24]	; (1b9c <usart_async_enable+0x20>)
    1b84:	3000      	adds	r0, #0
    1b86:	bf18      	it	ne
    1b88:	2001      	movne	r0, #1
    1b8a:	4b05      	ldr	r3, [pc, #20]	; (1ba0 <usart_async_enable+0x24>)
    1b8c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1b8e:	f104 0008 	add.w	r0, r4, #8
    1b92:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <usart_async_enable+0x28>)
    1b94:	4798      	blx	r3
}
    1b96:	2000      	movs	r0, #0
    1b98:	bd10      	pop	{r4, pc}
    1b9a:	bf00      	nop
    1b9c:	0000a1d8 	.word	0x0000a1d8
    1ba0:	000021e5 	.word	0x000021e5
    1ba4:	00003649 	.word	0x00003649

00001ba8 <usart_async_get_io_descriptor>:
{
    1ba8:	b538      	push	{r3, r4, r5, lr}
    1baa:	460c      	mov	r4, r1
	ASSERT(descr && io);
    1bac:	4605      	mov	r5, r0
    1bae:	b148      	cbz	r0, 1bc4 <usart_async_get_io_descriptor+0x1c>
    1bb0:	1c08      	adds	r0, r1, #0
    1bb2:	bf18      	it	ne
    1bb4:	2001      	movne	r0, #1
    1bb6:	2277      	movs	r2, #119	; 0x77
    1bb8:	4903      	ldr	r1, [pc, #12]	; (1bc8 <usart_async_get_io_descriptor+0x20>)
    1bba:	4b04      	ldr	r3, [pc, #16]	; (1bcc <usart_async_get_io_descriptor+0x24>)
    1bbc:	4798      	blx	r3
	*io = &descr->io;
    1bbe:	6025      	str	r5, [r4, #0]
}
    1bc0:	2000      	movs	r0, #0
    1bc2:	bd38      	pop	{r3, r4, r5, pc}
    1bc4:	2000      	movs	r0, #0
    1bc6:	e7f6      	b.n	1bb6 <usart_async_get_io_descriptor+0xe>
    1bc8:	0000a1d8 	.word	0x0000a1d8
    1bcc:	000021e5 	.word	0x000021e5

00001bd0 <usart_async_register_callback>:
{
    1bd0:	b570      	push	{r4, r5, r6, lr}
    1bd2:	460c      	mov	r4, r1
    1bd4:	4616      	mov	r6, r2
	ASSERT(descr);
    1bd6:	4605      	mov	r5, r0
    1bd8:	2283      	movs	r2, #131	; 0x83
    1bda:	4917      	ldr	r1, [pc, #92]	; (1c38 <usart_async_register_callback+0x68>)
    1bdc:	3000      	adds	r0, #0
    1bde:	bf18      	it	ne
    1be0:	2001      	movne	r0, #1
    1be2:	4b16      	ldr	r3, [pc, #88]	; (1c3c <usart_async_register_callback+0x6c>)
    1be4:	4798      	blx	r3
	switch (type) {
    1be6:	2c01      	cmp	r4, #1
    1be8:	d010      	beq.n	1c0c <usart_async_register_callback+0x3c>
    1bea:	b124      	cbz	r4, 1bf6 <usart_async_register_callback+0x26>
    1bec:	2c02      	cmp	r4, #2
    1bee:	d018      	beq.n	1c22 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    1bf0:	f06f 000c 	mvn.w	r0, #12
}
    1bf4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    1bf6:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1bf8:	1c32      	adds	r2, r6, #0
    1bfa:	bf18      	it	ne
    1bfc:	2201      	movne	r2, #1
    1bfe:	2101      	movs	r1, #1
    1c00:	f105 0008 	add.w	r0, r5, #8
    1c04:	4b0e      	ldr	r3, [pc, #56]	; (1c40 <usart_async_register_callback+0x70>)
    1c06:	4798      	blx	r3
	return ERR_NONE;
    1c08:	2000      	movs	r0, #0
		break;
    1c0a:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    1c0c:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1c0e:	1c32      	adds	r2, r6, #0
    1c10:	bf18      	it	ne
    1c12:	2201      	movne	r2, #1
    1c14:	2102      	movs	r1, #2
    1c16:	f105 0008 	add.w	r0, r5, #8
    1c1a:	4b09      	ldr	r3, [pc, #36]	; (1c40 <usart_async_register_callback+0x70>)
    1c1c:	4798      	blx	r3
	return ERR_NONE;
    1c1e:	2000      	movs	r0, #0
		break;
    1c20:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    1c22:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1c24:	1c32      	adds	r2, r6, #0
    1c26:	bf18      	it	ne
    1c28:	2201      	movne	r2, #1
    1c2a:	2103      	movs	r1, #3
    1c2c:	f105 0008 	add.w	r0, r5, #8
    1c30:	4b03      	ldr	r3, [pc, #12]	; (1c40 <usart_async_register_callback+0x70>)
    1c32:	4798      	blx	r3
	return ERR_NONE;
    1c34:	2000      	movs	r0, #0
		break;
    1c36:	bd70      	pop	{r4, r5, r6, pc}
    1c38:	0000a1d8 	.word	0x0000a1d8
    1c3c:	000021e5 	.word	0x000021e5
    1c40:	00003675 	.word	0x00003675

00001c44 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c44:	4b0f      	ldr	r3, [pc, #60]	; (1c84 <_usb_d_find_ep+0x40>)
    1c46:	7859      	ldrb	r1, [r3, #1]
    1c48:	4288      	cmp	r0, r1
    1c4a:	d018      	beq.n	1c7e <_usb_d_find_ep+0x3a>
{
    1c4c:	b430      	push	{r4, r5}
    1c4e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c50:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1c52:	f000 050f 	and.w	r5, r0, #15
    1c56:	e007      	b.n	1c68 <_usb_d_find_ep+0x24>
    1c58:	3301      	adds	r3, #1
    1c5a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1c5c:	2b0d      	cmp	r3, #13
    1c5e:	d009      	beq.n	1c74 <_usb_d_find_ep+0x30>
    1c60:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1c62:	7851      	ldrb	r1, [r2, #1]
    1c64:	4281      	cmp	r1, r0
    1c66:	d007      	beq.n	1c78 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1c68:	7814      	ldrb	r4, [r2, #0]
    1c6a:	2c00      	cmp	r4, #0
    1c6c:	d1f4      	bne.n	1c58 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1c6e:	428d      	cmp	r5, r1
    1c70:	d1f2      	bne.n	1c58 <_usb_d_find_ep+0x14>
    1c72:	e001      	b.n	1c78 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1c74:	f04f 33ff 	mov.w	r3, #4294967295
}
    1c78:	4618      	mov	r0, r3
    1c7a:	bc30      	pop	{r4, r5}
    1c7c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1c7e:	2300      	movs	r3, #0
}
    1c80:	4618      	mov	r0, r3
    1c82:	4770      	bx	lr
    1c84:	20000608 	.word	0x20000608

00001c88 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1c88:	2000      	movs	r0, #0
    1c8a:	4770      	bx	lr

00001c8c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1c8c:	b538      	push	{r3, r4, r5, lr}
    1c8e:	4604      	mov	r4, r0
    1c90:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c92:	4b09      	ldr	r3, [pc, #36]	; (1cb8 <usb_d_cb_trans_more+0x2c>)
    1c94:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1c96:	4b09      	ldr	r3, [pc, #36]	; (1cbc <usb_d_cb_trans_more+0x30>)
    1c98:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1c9c:	789b      	ldrb	r3, [r3, #2]
    1c9e:	2b03      	cmp	r3, #3
    1ca0:	d001      	beq.n	1ca6 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1ca2:	2000      	movs	r0, #0
}
    1ca4:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    1ca6:	4b05      	ldr	r3, [pc, #20]	; (1cbc <usb_d_cb_trans_more+0x30>)
    1ca8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1cac:	6983      	ldr	r3, [r0, #24]
    1cae:	4629      	mov	r1, r5
    1cb0:	4620      	mov	r0, r4
    1cb2:	4798      	blx	r3
    1cb4:	bd38      	pop	{r3, r4, r5, pc}
    1cb6:	bf00      	nop
    1cb8:	00001c45 	.word	0x00001c45
    1cbc:	20000608 	.word	0x20000608

00001cc0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc2:	b085      	sub	sp, #20
    1cc4:	4606      	mov	r6, r0
    1cc6:	460d      	mov	r5, r1
    1cc8:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1cca:	4b4d      	ldr	r3, [pc, #308]	; (1e00 <_usb_d_cb_trans_done+0x140>)
    1ccc:	4798      	blx	r3
    1cce:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1cd0:	2d00      	cmp	r5, #0
    1cd2:	d15b      	bne.n	1d8c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1cd4:	4a4b      	ldr	r2, [pc, #300]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1cd6:	0143      	lsls	r3, r0, #5
    1cd8:	18d1      	adds	r1, r2, r3
    1cda:	2000      	movs	r0, #0
    1cdc:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1cde:	5cd3      	ldrb	r3, [r2, r3]
    1ce0:	b173      	cbz	r3, 1d00 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1ce2:	4b48      	ldr	r3, [pc, #288]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1ce4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1ce8:	2201      	movs	r2, #1
    1cea:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1cec:	4845      	ldr	r0, [pc, #276]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1cee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1cf2:	69c3      	ldr	r3, [r0, #28]
    1cf4:	463a      	mov	r2, r7
    1cf6:	78c1      	ldrb	r1, [r0, #3]
    1cf8:	4630      	mov	r0, r6
    1cfa:	4798      	blx	r3
}
    1cfc:	b005      	add	sp, #20
    1cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1d00:	788b      	ldrb	r3, [r1, #2]
    1d02:	2b03      	cmp	r3, #3
    1d04:	d00b      	beq.n	1d1e <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1d06:	483f      	ldr	r0, [pc, #252]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d08:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1d0c:	4614      	mov	r4, r2
    1d0e:	69d3      	ldr	r3, [r2, #28]
    1d10:	320c      	adds	r2, #12
    1d12:	2100      	movs	r1, #0
    1d14:	7860      	ldrb	r0, [r4, #1]
    1d16:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1d18:	2302      	movs	r3, #2
    1d1a:	70a3      	strb	r3, [r4, #2]
    1d1c:	e7ee      	b.n	1cfc <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1d1e:	460b      	mov	r3, r1
    1d20:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1d24:	460a      	mov	r2, r1
    1d26:	69ce      	ldr	r6, [r1, #28]
    1d28:	320c      	adds	r2, #12
    1d2a:	2101      	movs	r1, #1
    1d2c:	7858      	ldrb	r0, [r3, #1]
    1d2e:	47b0      	blx	r6
		if (err) {
    1d30:	b1a0      	cbz	r0, 1d5c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1d32:	4b34      	ldr	r3, [pc, #208]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d34:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1d38:	2205      	movs	r2, #5
    1d3a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1d3c:	2202      	movs	r2, #2
    1d3e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1d40:	2d00      	cmp	r5, #0
    1d42:	db09      	blt.n	1d58 <_usb_d_cb_trans_done+0x98>
    1d44:	482f      	ldr	r0, [pc, #188]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d46:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1d4a:	7840      	ldrb	r0, [r0, #1]
    1d4c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1d50:	2101      	movs	r1, #1
    1d52:	4b2d      	ldr	r3, [pc, #180]	; (1e08 <_usb_d_cb_trans_done+0x148>)
    1d54:	4798      	blx	r3
    1d56:	e7d1      	b.n	1cfc <_usb_d_cb_trans_done+0x3c>
    1d58:	7858      	ldrb	r0, [r3, #1]
    1d5a:	e7f9      	b.n	1d50 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1d5c:	4829      	ldr	r0, [pc, #164]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d5e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1d62:	2304      	movs	r3, #4
    1d64:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1d66:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1d68:	2200      	movs	r2, #0
    1d6a:	9201      	str	r2, [sp, #4]
    1d6c:	9202      	str	r2, [sp, #8]
    1d6e:	4295      	cmp	r5, r2
    1d70:	bfac      	ite	ge
    1d72:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1d76:	f003 030f 	andlt.w	r3, r3, #15
    1d7a:	f88d 300c 	strb.w	r3, [sp, #12]
    1d7e:	2301      	movs	r3, #1
    1d80:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1d84:	a801      	add	r0, sp, #4
    1d86:	4b21      	ldr	r3, [pc, #132]	; (1e0c <_usb_d_cb_trans_done+0x14c>)
    1d88:	4798      	blx	r3
    1d8a:	e7b7      	b.n	1cfc <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1d8c:	2d01      	cmp	r5, #1
    1d8e:	d00a      	beq.n	1da6 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    1d90:	2d02      	cmp	r5, #2
    1d92:	d01c      	beq.n	1dce <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1d94:	2d03      	cmp	r5, #3
    1d96:	d02a      	beq.n	1dee <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1d98:	4b1a      	ldr	r3, [pc, #104]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1d9a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1d9e:	2206      	movs	r2, #6
    1da0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1da2:	70da      	strb	r2, [r3, #3]
    1da4:	e7a2      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1da6:	4a17      	ldr	r2, [pc, #92]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1da8:	0143      	lsls	r3, r0, #5
    1daa:	18d1      	adds	r1, r2, r3
    1dac:	2002      	movs	r0, #2
    1dae:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1db0:	5cd3      	ldrb	r3, [r2, r3]
    1db2:	b12b      	cbz	r3, 1dc0 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1db4:	4b13      	ldr	r3, [pc, #76]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1db6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1dba:	2205      	movs	r2, #5
    1dbc:	709a      	strb	r2, [r3, #2]
    1dbe:	e795      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1dc0:	460b      	mov	r3, r1
    1dc2:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1dc4:	2100      	movs	r1, #0
    1dc6:	4630      	mov	r0, r6
    1dc8:	4b0f      	ldr	r3, [pc, #60]	; (1e08 <_usb_d_cb_trans_done+0x148>)
    1dca:	4798      	blx	r3
    1dcc:	e78e      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1dce:	4a0d      	ldr	r2, [pc, #52]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1dd0:	0143      	lsls	r3, r0, #5
    1dd2:	18d1      	adds	r1, r2, r3
    1dd4:	2004      	movs	r0, #4
    1dd6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1dd8:	5cd3      	ldrb	r3, [r2, r3]
    1dda:	b12b      	cbz	r3, 1de8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1ddc:	4b09      	ldr	r3, [pc, #36]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1dde:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1de2:	2201      	movs	r2, #1
    1de4:	709a      	strb	r2, [r3, #2]
    1de6:	e781      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1de8:	2302      	movs	r3, #2
    1dea:	708b      	strb	r3, [r1, #2]
			return;
    1dec:	e786      	b.n	1cfc <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1dee:	4b05      	ldr	r3, [pc, #20]	; (1e04 <_usb_d_cb_trans_done+0x144>)
    1df0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1df4:	2200      	movs	r2, #0
    1df6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1df8:	2205      	movs	r2, #5
    1dfa:	70da      	strb	r2, [r3, #3]
    1dfc:	e776      	b.n	1cec <_usb_d_cb_trans_done+0x2c>
    1dfe:	bf00      	nop
    1e00:	00001c45 	.word	0x00001c45
    1e04:	20000608 	.word	0x20000608
    1e08:	00005405 	.word	0x00005405
    1e0c:	000055ad 	.word	0x000055ad

00001e10 <usb_d_cb_trans_setup>:
{
    1e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e14:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e16:	4b1c      	ldr	r3, [pc, #112]	; (1e88 <usb_d_cb_trans_setup+0x78>)
    1e18:	4798      	blx	r3
    1e1a:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1e1c:	4c1b      	ldr	r4, [pc, #108]	; (1e8c <usb_d_cb_trans_setup+0x7c>)
    1e1e:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    1e22:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1e24:	4621      	mov	r1, r4
    1e26:	4628      	mov	r0, r5
    1e28:	4b19      	ldr	r3, [pc, #100]	; (1e90 <usb_d_cb_trans_setup+0x80>)
    1e2a:	4798      	blx	r3
	if (n != 8) {
    1e2c:	b2c0      	uxtb	r0, r0
    1e2e:	2808      	cmp	r0, #8
    1e30:	d009      	beq.n	1e46 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1e32:	2101      	movs	r1, #1
    1e34:	4628      	mov	r0, r5
    1e36:	4c17      	ldr	r4, [pc, #92]	; (1e94 <usb_d_cb_trans_setup+0x84>)
    1e38:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1e3a:	2101      	movs	r1, #1
    1e3c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1e40:	47a0      	blx	r4
		return;
    1e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1e46:	2100      	movs	r1, #0
    1e48:	4628      	mov	r0, r5
    1e4a:	4f12      	ldr	r7, [pc, #72]	; (1e94 <usb_d_cb_trans_setup+0x84>)
    1e4c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1e4e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    1e52:	2100      	movs	r1, #0
    1e54:	4640      	mov	r0, r8
    1e56:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1e58:	4b0c      	ldr	r3, [pc, #48]	; (1e8c <usb_d_cb_trans_setup+0x7c>)
    1e5a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1e5e:	2201      	movs	r2, #1
    1e60:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1e62:	695b      	ldr	r3, [r3, #20]
    1e64:	4621      	mov	r1, r4
    1e66:	4628      	mov	r0, r5
    1e68:	4798      	blx	r3
    1e6a:	b108      	cbz	r0, 1e70 <usb_d_cb_trans_setup+0x60>
    1e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1e70:	4b06      	ldr	r3, [pc, #24]	; (1e8c <usb_d_cb_trans_setup+0x7c>)
    1e72:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1e76:	2305      	movs	r3, #5
    1e78:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1e7a:	2101      	movs	r1, #1
    1e7c:	4628      	mov	r0, r5
    1e7e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1e80:	2101      	movs	r1, #1
    1e82:	4640      	mov	r0, r8
    1e84:	47b8      	blx	r7
    1e86:	e7f1      	b.n	1e6c <usb_d_cb_trans_setup+0x5c>
    1e88:	00001c45 	.word	0x00001c45
    1e8c:	20000608 	.word	0x20000608
    1e90:	0000554d 	.word	0x0000554d
    1e94:	00005405 	.word	0x00005405

00001e98 <usb_d_init>:

int32_t usb_d_init(void)
{
    1e98:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1e9a:	4b11      	ldr	r3, [pc, #68]	; (1ee0 <usb_d_init+0x48>)
    1e9c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1e9e:	2800      	cmp	r0, #0
    1ea0:	db1d      	blt.n	1ede <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1ea2:	4c10      	ldr	r4, [pc, #64]	; (1ee4 <usb_d_init+0x4c>)
    1ea4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    1ea8:	2100      	movs	r1, #0
    1eaa:	4620      	mov	r0, r4
    1eac:	4b0e      	ldr	r3, [pc, #56]	; (1ee8 <usb_d_init+0x50>)
    1eae:	4798      	blx	r3
    1eb0:	4623      	mov	r3, r4
    1eb2:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1eb6:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1eb8:	4a0c      	ldr	r2, [pc, #48]	; (1eec <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1eba:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1ebc:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1ebe:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1ec0:	61da      	str	r2, [r3, #28]
    1ec2:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1ec4:	4283      	cmp	r3, r0
    1ec6:	d1f8      	bne.n	1eba <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1ec8:	4909      	ldr	r1, [pc, #36]	; (1ef0 <usb_d_init+0x58>)
    1eca:	2000      	movs	r0, #0
    1ecc:	4c09      	ldr	r4, [pc, #36]	; (1ef4 <usb_d_init+0x5c>)
    1ece:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1ed0:	4909      	ldr	r1, [pc, #36]	; (1ef8 <usb_d_init+0x60>)
    1ed2:	2001      	movs	r0, #1
    1ed4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1ed6:	4909      	ldr	r1, [pc, #36]	; (1efc <usb_d_init+0x64>)
    1ed8:	2002      	movs	r0, #2
    1eda:	47a0      	blx	r4
	return ERR_NONE;
    1edc:	2000      	movs	r0, #0
}
    1ede:	bd10      	pop	{r4, pc}
    1ee0:	00004ddd 	.word	0x00004ddd
    1ee4:	20000608 	.word	0x20000608
    1ee8:	00009817 	.word	0x00009817
    1eec:	00001c89 	.word	0x00001c89
    1ef0:	00001e11 	.word	0x00001e11
    1ef4:	000057b5 	.word	0x000057b5
    1ef8:	00001c8d 	.word	0x00001c8d
    1efc:	00001cc1 	.word	0x00001cc1

00001f00 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1f00:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1f02:	4b01      	ldr	r3, [pc, #4]	; (1f08 <usb_d_register_callback+0x8>)
    1f04:	4798      	blx	r3
    1f06:	bd08      	pop	{r3, pc}
    1f08:	0000578d 	.word	0x0000578d

00001f0c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1f0c:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    1f0e:	4b01      	ldr	r3, [pc, #4]	; (1f14 <usb_d_enable+0x8>)
    1f10:	4798      	blx	r3
}
    1f12:	bd08      	pop	{r3, pc}
    1f14:	00004ee5 	.word	0x00004ee5

00001f18 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1f18:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    1f1a:	4b01      	ldr	r3, [pc, #4]	; (1f20 <usb_d_attach+0x8>)
    1f1c:	4798      	blx	r3
    1f1e:	bd08      	pop	{r3, pc}
    1f20:	00004f51 	.word	0x00004f51

00001f24 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1f24:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    1f26:	4b01      	ldr	r3, [pc, #4]	; (1f2c <usb_d_set_address+0x8>)
    1f28:	4798      	blx	r3
    1f2a:	bd08      	pop	{r3, pc}
    1f2c:	00004f63 	.word	0x00004f63

00001f30 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f32:	4606      	mov	r6, r0
    1f34:	460c      	mov	r4, r1
    1f36:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f38:	4b0f      	ldr	r3, [pc, #60]	; (1f78 <usb_d_ep_init+0x48>)
    1f3a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1f3c:	2800      	cmp	r0, #0
    1f3e:	da14      	bge.n	1f6a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1f40:	20ff      	movs	r0, #255	; 0xff
    1f42:	4b0d      	ldr	r3, [pc, #52]	; (1f78 <usb_d_ep_init+0x48>)
    1f44:	4798      	blx	r3
		if (ep_index < 0) {
    1f46:	1e05      	subs	r5, r0, #0
    1f48:	db12      	blt.n	1f70 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1f4a:	463a      	mov	r2, r7
    1f4c:	4621      	mov	r1, r4
    1f4e:	4630      	mov	r0, r6
    1f50:	4b0a      	ldr	r3, [pc, #40]	; (1f7c <usb_d_ep_init+0x4c>)
    1f52:	4798      	blx	r3
	if (rc < 0) {
    1f54:	2800      	cmp	r0, #0
    1f56:	db0d      	blt.n	1f74 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1f58:	4b09      	ldr	r3, [pc, #36]	; (1f80 <usb_d_ep_init+0x50>)
    1f5a:	0168      	lsls	r0, r5, #5
    1f5c:	181a      	adds	r2, r3, r0
    1f5e:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1f60:	f004 0403 	and.w	r4, r4, #3
    1f64:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1f66:	2000      	movs	r0, #0
    1f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1f6a:	f06f 0013 	mvn.w	r0, #19
    1f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1f70:	f06f 0014 	mvn.w	r0, #20
}
    1f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f76:	bf00      	nop
    1f78:	00001c45 	.word	0x00001c45
    1f7c:	00004f71 	.word	0x00004f71
    1f80:	20000608 	.word	0x20000608

00001f84 <usb_d_ep0_init>:
{
    1f84:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1f86:	4602      	mov	r2, r0
    1f88:	2100      	movs	r1, #0
    1f8a:	4608      	mov	r0, r1
    1f8c:	4b01      	ldr	r3, [pc, #4]	; (1f94 <usb_d_ep0_init+0x10>)
    1f8e:	4798      	blx	r3
}
    1f90:	bd08      	pop	{r3, pc}
    1f92:	bf00      	nop
    1f94:	00001f31 	.word	0x00001f31

00001f98 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1f98:	b538      	push	{r3, r4, r5, lr}
    1f9a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f9c:	4b06      	ldr	r3, [pc, #24]	; (1fb8 <usb_d_ep_deinit+0x20>)
    1f9e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1fa0:	1e04      	subs	r4, r0, #0
    1fa2:	db07      	blt.n	1fb4 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1fa4:	4628      	mov	r0, r5
    1fa6:	4b05      	ldr	r3, [pc, #20]	; (1fbc <usb_d_ep_deinit+0x24>)
    1fa8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1faa:	4805      	ldr	r0, [pc, #20]	; (1fc0 <usb_d_ep_deinit+0x28>)
    1fac:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1fb0:	23ff      	movs	r3, #255	; 0xff
    1fb2:	7043      	strb	r3, [r0, #1]
    1fb4:	bd38      	pop	{r3, r4, r5, pc}
    1fb6:	bf00      	nop
    1fb8:	00001c45 	.word	0x00001c45
    1fbc:	00005089 	.word	0x00005089
    1fc0:	20000608 	.word	0x20000608

00001fc4 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1fc4:	b538      	push	{r3, r4, r5, lr}
    1fc6:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fc8:	4b0e      	ldr	r3, [pc, #56]	; (2004 <usb_d_ep_enable+0x40>)
    1fca:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1fcc:	1e04      	subs	r4, r0, #0
    1fce:	db16      	blt.n	1ffe <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1fd0:	0163      	lsls	r3, r4, #5
    1fd2:	4a0d      	ldr	r2, [pc, #52]	; (2008 <usb_d_ep_enable+0x44>)
    1fd4:	5cd3      	ldrb	r3, [r2, r3]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	bf0c      	ite	eq
    1fda:	2202      	moveq	r2, #2
    1fdc:	2201      	movne	r2, #1
    1fde:	4b0a      	ldr	r3, [pc, #40]	; (2008 <usb_d_ep_enable+0x44>)
    1fe0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1fe4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1fe6:	4628      	mov	r0, r5
    1fe8:	4b08      	ldr	r3, [pc, #32]	; (200c <usb_d_ep_enable+0x48>)
    1fea:	4798      	blx	r3
	if (rc < 0) {
    1fec:	2800      	cmp	r0, #0
    1fee:	db00      	blt.n	1ff2 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1ff0:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1ff2:	4b05      	ldr	r3, [pc, #20]	; (2008 <usb_d_ep_enable+0x44>)
    1ff4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1ff8:	2300      	movs	r3, #0
    1ffa:	70a3      	strb	r3, [r4, #2]
    1ffc:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1ffe:	f06f 0011 	mvn.w	r0, #17
    2002:	e7f5      	b.n	1ff0 <usb_d_ep_enable+0x2c>
    2004:	00001c45 	.word	0x00001c45
    2008:	20000608 	.word	0x20000608
    200c:	0000514d 	.word	0x0000514d

00002010 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2014:	b086      	sub	sp, #24
    2016:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2018:	7a07      	ldrb	r7, [r0, #8]
    201a:	4638      	mov	r0, r7
    201c:	4b3f      	ldr	r3, [pc, #252]	; (211c <usb_d_ep_transfer+0x10c>)
    201e:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2020:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    2022:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2026:	1e06      	subs	r6, r0, #0
    2028:	db72      	blt.n	2110 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    202a:	a804      	add	r0, sp, #16
    202c:	4b3c      	ldr	r3, [pc, #240]	; (2120 <usb_d_ep_transfer+0x110>)
    202e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2030:	4b3c      	ldr	r3, [pc, #240]	; (2124 <usb_d_ep_transfer+0x114>)
    2032:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    2036:	789b      	ldrb	r3, [r3, #2]
    2038:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    203c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2040:	b2db      	uxtb	r3, r3
    2042:	2b01      	cmp	r3, #1
    2044:	d011      	beq.n	206a <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    2046:	a804      	add	r0, sp, #16
    2048:	4b37      	ldr	r3, [pc, #220]	; (2128 <usb_d_ep_transfer+0x118>)
    204a:	4798      	blx	r3
		switch (state) {
    204c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2050:	b2db      	uxtb	r3, r3
    2052:	2b05      	cmp	r3, #5
    2054:	d05f      	beq.n	2116 <usb_d_ep_transfer+0x106>
    2056:	2b06      	cmp	r3, #6
    2058:	d023      	beq.n	20a2 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    205a:	2b00      	cmp	r3, #0
    205c:	bf0c      	ite	eq
    205e:	f06f 0012 	mvneq.w	r0, #18
    2062:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    2064:	b006      	add	sp, #24
    2066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    206a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2124 <usb_d_ep_transfer+0x114>
    206e:	ea4f 1946 	mov.w	r9, r6, lsl #5
    2072:	eb0a 0309 	add.w	r3, sl, r9
    2076:	2203      	movs	r2, #3
    2078:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    207a:	a804      	add	r0, sp, #16
    207c:	4b2a      	ldr	r3, [pc, #168]	; (2128 <usb_d_ep_transfer+0x118>)
    207e:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2080:	f81a 3009 	ldrb.w	r3, [sl, r9]
    2084:	b183      	cbz	r3, 20a8 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2086:	7a22      	ldrb	r2, [r4, #8]
    2088:	3500      	adds	r5, #0
    208a:	bf18      	it	ne
    208c:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    208e:	6823      	ldr	r3, [r4, #0]
    2090:	9301      	str	r3, [sp, #4]
    2092:	f8cd 8008 	str.w	r8, [sp, #8]
    2096:	f017 0f80 	tst.w	r7, #128	; 0x80
    209a:	d119      	bne.n	20d0 <usb_d_ep_transfer+0xc0>
    209c:	f002 030f 	and.w	r3, r2, #15
    20a0:	e018      	b.n	20d4 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    20a2:	f06f 000f 	mvn.w	r0, #15
    20a6:	e7dd      	b.n	2064 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    20a8:	4b1e      	ldr	r3, [pc, #120]	; (2124 <usb_d_ep_transfer+0x114>)
    20aa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    20ae:	7cda      	ldrb	r2, [r3, #19]
    20b0:	7c9d      	ldrb	r5, [r3, #18]
    20b2:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    20b6:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    20b8:	b9a5      	cbnz	r5, 20e4 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    20ba:	4b1a      	ldr	r3, [pc, #104]	; (2124 <usb_d_ep_transfer+0x114>)
    20bc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    20c0:	2304      	movs	r3, #4
    20c2:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    20c4:	2300      	movs	r3, #0
			zlp                 = true;
    20c6:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    20c8:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    20ca:	6821      	ldr	r1, [r4, #0]
    20cc:	9101      	str	r1, [sp, #4]
    20ce:	9302      	str	r3, [sp, #8]
    20d0:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    20d4:	f88d 300c 	strb.w	r3, [sp, #12]
    20d8:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    20dc:	a801      	add	r0, sp, #4
    20de:	4b13      	ldr	r3, [pc, #76]	; (212c <usb_d_ep_transfer+0x11c>)
    20e0:	4798      	blx	r3
	return rc;
    20e2:	e7bf      	b.n	2064 <usb_d_ep_transfer+0x54>
    20e4:	4643      	mov	r3, r8
    20e6:	45a8      	cmp	r8, r5
    20e8:	bf28      	it	cs
    20ea:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    20ec:	4a0d      	ldr	r2, [pc, #52]	; (2124 <usb_d_ep_transfer+0x114>)
    20ee:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    20f2:	f996 200c 	ldrsb.w	r2, [r6, #12]
    20f6:	2a00      	cmp	r2, #0
    20f8:	db05      	blt.n	2106 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    20fa:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    20fc:	6821      	ldr	r1, [r4, #0]
    20fe:	9101      	str	r1, [sp, #4]
    2100:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2102:	2500      	movs	r5, #0
    2104:	e7ca      	b.n	209c <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    2106:	429d      	cmp	r5, r3
    2108:	bf94      	ite	ls
    210a:	2500      	movls	r5, #0
    210c:	2501      	movhi	r5, #1
    210e:	e7db      	b.n	20c8 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    2110:	f06f 0011 	mvn.w	r0, #17
    2114:	e7a6      	b.n	2064 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    2116:	2002      	movs	r0, #2
    2118:	e7a4      	b.n	2064 <usb_d_ep_transfer+0x54>
    211a:	bf00      	nop
    211c:	00001c45 	.word	0x00001c45
    2120:	000012b5 	.word	0x000012b5
    2124:	20000608 	.word	0x20000608
    2128:	000012c3 	.word	0x000012c3
    212c:	000055ad 	.word	0x000055ad

00002130 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2130:	b538      	push	{r3, r4, r5, lr}
    2132:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2134:	b141      	cbz	r1, 2148 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    2136:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2138:	bf0c      	ite	eq
    213a:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    213c:	2102      	movne	r1, #2
    213e:	4b13      	ldr	r3, [pc, #76]	; (218c <usb_d_ep_halt+0x5c>)
    2140:	4798      	blx	r3
    2142:	4603      	mov	r3, r0
	}
}
    2144:	4618      	mov	r0, r3
    2146:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2148:	4b11      	ldr	r3, [pc, #68]	; (2190 <usb_d_ep_halt+0x60>)
    214a:	4798      	blx	r3
	if (ep_index < 0) {
    214c:	1e05      	subs	r5, r0, #0
    214e:	db19      	blt.n	2184 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2150:	2102      	movs	r1, #2
    2152:	4620      	mov	r0, r4
    2154:	4b0d      	ldr	r3, [pc, #52]	; (218c <usb_d_ep_halt+0x5c>)
    2156:	4798      	blx	r3
    2158:	4603      	mov	r3, r0
    215a:	2800      	cmp	r0, #0
    215c:	d0f2      	beq.n	2144 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    215e:	2100      	movs	r1, #0
    2160:	4620      	mov	r0, r4
    2162:	4b0a      	ldr	r3, [pc, #40]	; (218c <usb_d_ep_halt+0x5c>)
    2164:	4798      	blx	r3
		if (rc < 0) {
    2166:	1e03      	subs	r3, r0, #0
    2168:	dbec      	blt.n	2144 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    216a:	4b0a      	ldr	r3, [pc, #40]	; (2194 <usb_d_ep_halt+0x64>)
    216c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2170:	2201      	movs	r2, #1
    2172:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2174:	2103      	movs	r1, #3
    2176:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2178:	69db      	ldr	r3, [r3, #28]
    217a:	2200      	movs	r2, #0
    217c:	4620      	mov	r0, r4
    217e:	4798      	blx	r3
	return ERR_NONE;
    2180:	2300      	movs	r3, #0
    2182:	e7df      	b.n	2144 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    2184:	f06f 0311 	mvn.w	r3, #17
    2188:	e7dc      	b.n	2144 <usb_d_ep_halt+0x14>
    218a:	bf00      	nop
    218c:	00005405 	.word	0x00005405
    2190:	00001c45 	.word	0x00001c45
    2194:	20000608 	.word	0x20000608

00002198 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2198:	b538      	push	{r3, r4, r5, lr}
    219a:	460d      	mov	r5, r1
    219c:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    219e:	4b0e      	ldr	r3, [pc, #56]	; (21d8 <usb_d_ep_register_callback+0x40>)
    21a0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    21a2:	4b0e      	ldr	r3, [pc, #56]	; (21dc <usb_d_ep_register_callback+0x44>)
    21a4:	2c00      	cmp	r4, #0
    21a6:	bf08      	it	eq
    21a8:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    21aa:	2800      	cmp	r0, #0
    21ac:	db13      	blt.n	21d6 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    21ae:	2d01      	cmp	r5, #1
    21b0:	d008      	beq.n	21c4 <usb_d_ep_register_callback+0x2c>
    21b2:	b115      	cbz	r5, 21ba <usb_d_ep_register_callback+0x22>
    21b4:	2d02      	cmp	r5, #2
    21b6:	d00a      	beq.n	21ce <usb_d_ep_register_callback+0x36>
    21b8:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    21ba:	4b09      	ldr	r3, [pc, #36]	; (21e0 <usb_d_ep_register_callback+0x48>)
    21bc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21c0:	6144      	str	r4, [r0, #20]
		break;
    21c2:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    21c4:	4b06      	ldr	r3, [pc, #24]	; (21e0 <usb_d_ep_register_callback+0x48>)
    21c6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21ca:	6184      	str	r4, [r0, #24]
		break;
    21cc:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    21ce:	4b04      	ldr	r3, [pc, #16]	; (21e0 <usb_d_ep_register_callback+0x48>)
    21d0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21d4:	61c4      	str	r4, [r0, #28]
    21d6:	bd38      	pop	{r3, r4, r5, pc}
    21d8:	00001c45 	.word	0x00001c45
    21dc:	00001c89 	.word	0x00001c89
    21e0:	20000608 	.word	0x20000608

000021e4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    21e4:	b900      	cbnz	r0, 21e8 <assert+0x4>
		__asm("BKPT #0");
    21e6:	be00      	bkpt	0x0000
    21e8:	4770      	bx	lr

000021ea <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    21ea:	6803      	ldr	r3, [r0, #0]
    21ec:	b14b      	cbz	r3, 2202 <is_list_element+0x18>
		if (it == element) {
    21ee:	428b      	cmp	r3, r1
    21f0:	d009      	beq.n	2206 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    21f2:	681b      	ldr	r3, [r3, #0]
    21f4:	b11b      	cbz	r3, 21fe <is_list_element+0x14>
		if (it == element) {
    21f6:	4299      	cmp	r1, r3
    21f8:	d1fb      	bne.n	21f2 <is_list_element+0x8>
			return true;
    21fa:	2001      	movs	r0, #1
		}
	}

	return false;
}
    21fc:	4770      	bx	lr
	return false;
    21fe:	2000      	movs	r0, #0
    2200:	4770      	bx	lr
    2202:	2000      	movs	r0, #0
    2204:	4770      	bx	lr
			return true;
    2206:	2001      	movs	r0, #1
    2208:	4770      	bx	lr
	...

0000220c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    220c:	b538      	push	{r3, r4, r5, lr}
    220e:	4604      	mov	r4, r0
    2210:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    2212:	4b06      	ldr	r3, [pc, #24]	; (222c <list_insert_as_head+0x20>)
    2214:	4798      	blx	r3
    2216:	f080 0001 	eor.w	r0, r0, #1
    221a:	2239      	movs	r2, #57	; 0x39
    221c:	4904      	ldr	r1, [pc, #16]	; (2230 <list_insert_as_head+0x24>)
    221e:	b2c0      	uxtb	r0, r0
    2220:	4b04      	ldr	r3, [pc, #16]	; (2234 <list_insert_as_head+0x28>)
    2222:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2224:	6823      	ldr	r3, [r4, #0]
    2226:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2228:	6025      	str	r5, [r4, #0]
    222a:	bd38      	pop	{r3, r4, r5, pc}
    222c:	000021eb 	.word	0x000021eb
    2230:	0000a1f8 	.word	0x0000a1f8
    2234:	000021e5 	.word	0x000021e5

00002238 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2238:	6803      	ldr	r3, [r0, #0]
    223a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    223c:	6001      	str	r1, [r0, #0]
    223e:	4770      	bx	lr

00002240 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2240:	b570      	push	{r4, r5, r6, lr}
    2242:	4605      	mov	r5, r0
    2244:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    2246:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2248:	4b0a      	ldr	r3, [pc, #40]	; (2274 <list_insert_at_end+0x34>)
    224a:	4798      	blx	r3
    224c:	f080 0001 	eor.w	r0, r0, #1
    2250:	224f      	movs	r2, #79	; 0x4f
    2252:	4909      	ldr	r1, [pc, #36]	; (2278 <list_insert_at_end+0x38>)
    2254:	b2c0      	uxtb	r0, r0
    2256:	4b09      	ldr	r3, [pc, #36]	; (227c <list_insert_at_end+0x3c>)
    2258:	4798      	blx	r3

	if (!list->head) {
    225a:	682b      	ldr	r3, [r5, #0]
    225c:	b91b      	cbnz	r3, 2266 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    225e:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    2260:	6033      	str	r3, [r6, #0]
		return;
    2262:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    2264:	461c      	mov	r4, r3
	while (it->next) {
    2266:	6823      	ldr	r3, [r4, #0]
    2268:	2b00      	cmp	r3, #0
    226a:	d1fb      	bne.n	2264 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    226c:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    226e:	6033      	str	r3, [r6, #0]
    2270:	bd70      	pop	{r4, r5, r6, pc}
    2272:	bf00      	nop
    2274:	000021eb 	.word	0x000021eb
    2278:	0000a1f8 	.word	0x0000a1f8
    227c:	000021e5 	.word	0x000021e5

00002280 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2280:	6803      	ldr	r3, [r0, #0]
    2282:	b10b      	cbz	r3, 2288 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2284:	681a      	ldr	r2, [r3, #0]
    2286:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2288:	4618      	mov	r0, r3
    228a:	4770      	bx	lr

0000228c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	460e      	mov	r6, r1
    2290:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    2292:	4604      	mov	r4, r0
    2294:	b178      	cbz	r0, 22b6 <ringbuffer_init+0x2a>
    2296:	b181      	cbz	r1, 22ba <ringbuffer_init+0x2e>
    2298:	b1a2      	cbz	r2, 22c4 <ringbuffer_init+0x38>
    229a:	2001      	movs	r0, #1
    229c:	2228      	movs	r2, #40	; 0x28
    229e:	490d      	ldr	r1, [pc, #52]	; (22d4 <ringbuffer_init+0x48>)
    22a0:	4b0d      	ldr	r3, [pc, #52]	; (22d8 <ringbuffer_init+0x4c>)
    22a2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    22a4:	1e6b      	subs	r3, r5, #1
    22a6:	421d      	tst	r5, r3
    22a8:	d109      	bne.n	22be <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    22aa:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    22ac:	2000      	movs	r0, #0
    22ae:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    22b0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    22b2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    22b4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    22b6:	2000      	movs	r0, #0
    22b8:	e7f0      	b.n	229c <ringbuffer_init+0x10>
    22ba:	2000      	movs	r0, #0
    22bc:	e7ee      	b.n	229c <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    22be:	f06f 000c 	mvn.w	r0, #12
    22c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    22c4:	2228      	movs	r2, #40	; 0x28
    22c6:	4903      	ldr	r1, [pc, #12]	; (22d4 <ringbuffer_init+0x48>)
    22c8:	2000      	movs	r0, #0
    22ca:	4b03      	ldr	r3, [pc, #12]	; (22d8 <ringbuffer_init+0x4c>)
    22cc:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    22ce:	1e6b      	subs	r3, r5, #1
    22d0:	e7eb      	b.n	22aa <ringbuffer_init+0x1e>
    22d2:	bf00      	nop
    22d4:	0000a218 	.word	0x0000a218
    22d8:	000021e5 	.word	0x000021e5

000022dc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    22dc:	b538      	push	{r3, r4, r5, lr}
    22de:	460d      	mov	r5, r1
	ASSERT(rb && data);
    22e0:	4604      	mov	r4, r0
    22e2:	b1a0      	cbz	r0, 230e <ringbuffer_get+0x32>
    22e4:	1c08      	adds	r0, r1, #0
    22e6:	bf18      	it	ne
    22e8:	2001      	movne	r0, #1
    22ea:	2240      	movs	r2, #64	; 0x40
    22ec:	490a      	ldr	r1, [pc, #40]	; (2318 <ringbuffer_get+0x3c>)
    22ee:	4b0b      	ldr	r3, [pc, #44]	; (231c <ringbuffer_get+0x40>)
    22f0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    22f2:	68a3      	ldr	r3, [r4, #8]
    22f4:	68e2      	ldr	r2, [r4, #12]
    22f6:	429a      	cmp	r2, r3
    22f8:	d00b      	beq.n	2312 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    22fa:	6862      	ldr	r2, [r4, #4]
    22fc:	4013      	ands	r3, r2
    22fe:	6822      	ldr	r2, [r4, #0]
    2300:	5cd3      	ldrb	r3, [r2, r3]
    2302:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2304:	68a3      	ldr	r3, [r4, #8]
    2306:	3301      	adds	r3, #1
    2308:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    230a:	2000      	movs	r0, #0
    230c:	bd38      	pop	{r3, r4, r5, pc}
    230e:	2000      	movs	r0, #0
    2310:	e7eb      	b.n	22ea <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    2312:	f06f 0009 	mvn.w	r0, #9
}
    2316:	bd38      	pop	{r3, r4, r5, pc}
    2318:	0000a218 	.word	0x0000a218
    231c:	000021e5 	.word	0x000021e5

00002320 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2320:	b538      	push	{r3, r4, r5, lr}
    2322:	460d      	mov	r5, r1
	ASSERT(rb);
    2324:	4604      	mov	r4, r0
    2326:	2251      	movs	r2, #81	; 0x51
    2328:	490b      	ldr	r1, [pc, #44]	; (2358 <ringbuffer_put+0x38>)
    232a:	3000      	adds	r0, #0
    232c:	bf18      	it	ne
    232e:	2001      	movne	r0, #1
    2330:	4b0a      	ldr	r3, [pc, #40]	; (235c <ringbuffer_put+0x3c>)
    2332:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2334:	68e3      	ldr	r3, [r4, #12]
    2336:	6862      	ldr	r2, [r4, #4]
    2338:	4013      	ands	r3, r2
    233a:	6822      	ldr	r2, [r4, #0]
    233c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    233e:	68e3      	ldr	r3, [r4, #12]
    2340:	6861      	ldr	r1, [r4, #4]
    2342:	68a2      	ldr	r2, [r4, #8]
    2344:	1a9a      	subs	r2, r3, r2
    2346:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2348:	bf84      	itt	hi
    234a:	1a59      	subhi	r1, r3, r1
    234c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    234e:	3301      	adds	r3, #1
    2350:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2352:	2000      	movs	r0, #0
    2354:	bd38      	pop	{r3, r4, r5, pc}
    2356:	bf00      	nop
    2358:	0000a218 	.word	0x0000a218
    235c:	000021e5 	.word	0x000021e5

00002360 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2360:	b510      	push	{r4, lr}
	ASSERT(rb);
    2362:	4604      	mov	r4, r0
    2364:	2267      	movs	r2, #103	; 0x67
    2366:	4905      	ldr	r1, [pc, #20]	; (237c <ringbuffer_num+0x1c>)
    2368:	3000      	adds	r0, #0
    236a:	bf18      	it	ne
    236c:	2001      	movne	r0, #1
    236e:	4b04      	ldr	r3, [pc, #16]	; (2380 <ringbuffer_num+0x20>)
    2370:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2372:	68e0      	ldr	r0, [r4, #12]
    2374:	68a3      	ldr	r3, [r4, #8]
}
    2376:	1ac0      	subs	r0, r0, r3
    2378:	bd10      	pop	{r4, pc}
    237a:	bf00      	nop
    237c:	0000a218 	.word	0x0000a218
    2380:	000021e5 	.word	0x000021e5

00002384 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2384:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2386:	4a06      	ldr	r2, [pc, #24]	; (23a0 <_sbrk+0x1c>)
    2388:	6812      	ldr	r2, [r2, #0]
    238a:	b122      	cbz	r2, 2396 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    238c:	4a04      	ldr	r2, [pc, #16]	; (23a0 <_sbrk+0x1c>)
    238e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2390:	4403      	add	r3, r0
    2392:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2394:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2396:	4903      	ldr	r1, [pc, #12]	; (23a4 <_sbrk+0x20>)
    2398:	4a01      	ldr	r2, [pc, #4]	; (23a0 <_sbrk+0x1c>)
    239a:	6011      	str	r1, [r2, #0]
    239c:	e7f6      	b.n	238c <_sbrk+0x8>
    239e:	bf00      	nop
    23a0:	200007a8 	.word	0x200007a8
    23a4:	20012b48 	.word	0x20012b48

000023a8 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    23a8:	6940      	ldr	r0, [r0, #20]
    23aa:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    23ae:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    23b2:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    23b4:	0040      	lsls	r0, r0, #1
    23b6:	3076      	adds	r0, #118	; 0x76
}
    23b8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    23bc:	4770      	bx	lr
	...

000023c0 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    23c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    23c2:	f013 0f01 	tst.w	r3, #1
    23c6:	d11b      	bne.n	2400 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23ca:	f013 0f03 	tst.w	r3, #3
    23ce:	d1fb      	bne.n	23c8 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    23d0:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    23d2:	f013 0f02 	tst.w	r3, #2
    23d6:	d00d      	beq.n	23f4 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    23d8:	8803      	ldrh	r3, [r0, #0]
    23da:	f023 0302 	bic.w	r3, r3, #2
    23de:	041b      	lsls	r3, r3, #16
    23e0:	0c1b      	lsrs	r3, r3, #16
    23e2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23e6:	f013 0f03 	tst.w	r3, #3
    23ea:	d1fb      	bne.n	23e4 <_adc_init+0x24>
    23ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23ee:	f013 0f02 	tst.w	r3, #2
    23f2:	d1fb      	bne.n	23ec <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    23f4:	2301      	movs	r3, #1
    23f6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    23f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    23fa:	f013 0f03 	tst.w	r3, #3
    23fe:	d1fb      	bne.n	23f8 <_adc_init+0x38>
    2400:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2402:	f013 0f01 	tst.w	r3, #1
    2406:	d1fb      	bne.n	2400 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2408:	2316      	movs	r3, #22
    240a:	4a37      	ldr	r2, [pc, #220]	; (24e8 <_adc_init+0x128>)
    240c:	fb03 2301 	mla	r3, r3, r1, r2
    2410:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2412:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2414:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2416:	f3c3 030b 	ubfx	r3, r3, #0, #12
    241a:	2b00      	cmp	r3, #0
    241c:	d1fa      	bne.n	2414 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    241e:	2316      	movs	r3, #22
    2420:	4a31      	ldr	r2, [pc, #196]	; (24e8 <_adc_init+0x128>)
    2422:	fb03 2301 	mla	r3, r3, r1, r2
    2426:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2428:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    242a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    242c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2430:	2b00      	cmp	r3, #0
    2432:	d1fa      	bne.n	242a <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2434:	2316      	movs	r3, #22
    2436:	4a2c      	ldr	r2, [pc, #176]	; (24e8 <_adc_init+0x128>)
    2438:	fb03 2301 	mla	r3, r3, r1, r2
    243c:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    243e:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2440:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2442:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2444:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2446:	f3c3 030b 	ubfx	r3, r3, #0, #12
    244a:	2b00      	cmp	r3, #0
    244c:	d1fa      	bne.n	2444 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    244e:	2316      	movs	r3, #22
    2450:	4a25      	ldr	r2, [pc, #148]	; (24e8 <_adc_init+0x128>)
    2452:	fb03 2301 	mla	r3, r3, r1, r2
    2456:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2458:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    245a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2460:	2b00      	cmp	r3, #0
    2462:	d1fa      	bne.n	245a <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2464:	2316      	movs	r3, #22
    2466:	4a20      	ldr	r2, [pc, #128]	; (24e8 <_adc_init+0x128>)
    2468:	fb03 2301 	mla	r3, r3, r1, r2
    246c:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    246e:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2470:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2472:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2476:	2b00      	cmp	r3, #0
    2478:	d1fa      	bne.n	2470 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    247a:	2316      	movs	r3, #22
    247c:	4a1a      	ldr	r2, [pc, #104]	; (24e8 <_adc_init+0x128>)
    247e:	fb03 2301 	mla	r3, r3, r1, r2
    2482:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2484:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2486:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2488:	f013 0f80 	tst.w	r3, #128	; 0x80
    248c:	d1fb      	bne.n	2486 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    248e:	2316      	movs	r3, #22
    2490:	4a15      	ldr	r2, [pc, #84]	; (24e8 <_adc_init+0x128>)
    2492:	fb03 2301 	mla	r3, r3, r1, r2
    2496:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2498:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    249a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    249c:	f413 7f80 	tst.w	r3, #256	; 0x100
    24a0:	d1fb      	bne.n	249a <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    24a2:	2316      	movs	r3, #22
    24a4:	4a10      	ldr	r2, [pc, #64]	; (24e8 <_adc_init+0x128>)
    24a6:	fb03 2301 	mla	r3, r3, r1, r2
    24aa:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    24ac:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24b0:	f413 7f00 	tst.w	r3, #512	; 0x200
    24b4:	d1fb      	bne.n	24ae <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    24b6:	2316      	movs	r3, #22
    24b8:	4a0b      	ldr	r2, [pc, #44]	; (24e8 <_adc_init+0x128>)
    24ba:	fb03 2301 	mla	r3, r3, r1, r2
    24be:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    24c0:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    24c8:	d1fb      	bne.n	24c2 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    24ca:	2216      	movs	r2, #22
    24cc:	4b06      	ldr	r3, [pc, #24]	; (24e8 <_adc_init+0x128>)
    24ce:	fb02 3101 	mla	r1, r2, r1, r3
    24d2:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    24d4:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    24d6:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    24d8:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24da:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24dc:	f013 0f03 	tst.w	r3, #3
    24e0:	d1fb      	bne.n	24da <_adc_init+0x11a>

	return ERR_NONE;
}
    24e2:	2000      	movs	r0, #0
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop
    24e8:	0000a23c 	.word	0x0000a23c

000024ec <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    24ec:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    24ee:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    24f0:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    24f4:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    24f8:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    24fa:	f013 0f01 	tst.w	r3, #1
    24fe:	d106      	bne.n	250e <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    2500:	f013 0f02 	tst.w	r3, #2
    2504:	d10d      	bne.n	2522 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    2506:	f013 0f04 	tst.w	r3, #4
    250a:	d111      	bne.n	2530 <_adc_interrupt_handler+0x44>
    250c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    250e:	2301      	movs	r3, #1
    2510:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    2514:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    2518:	6883      	ldr	r3, [r0, #8]
    251a:	b292      	uxth	r2, r2
    251c:	2100      	movs	r1, #0
    251e:	4798      	blx	r3
    2520:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2522:	2302      	movs	r3, #2
    2524:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    2528:	6843      	ldr	r3, [r0, #4]
    252a:	2100      	movs	r1, #0
    252c:	4798      	blx	r3
    252e:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2530:	2304      	movs	r3, #4
    2532:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    2536:	6803      	ldr	r3, [r0, #0]
    2538:	2100      	movs	r1, #0
    253a:	4798      	blx	r3
	}
}
    253c:	e7e6      	b.n	250c <_adc_interrupt_handler+0x20>
	...

00002540 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2540:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2544:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2548:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    254c:	b148      	cbz	r0, 2562 <_adc_get_regs+0x22>
    254e:	2801      	cmp	r0, #1
    2550:	d009      	beq.n	2566 <_adc_get_regs+0x26>
{
    2552:	b508      	push	{r3, lr}
	ASSERT(false);
    2554:	228c      	movs	r2, #140	; 0x8c
    2556:	4905      	ldr	r1, [pc, #20]	; (256c <_adc_get_regs+0x2c>)
    2558:	2000      	movs	r0, #0
    255a:	4b05      	ldr	r3, [pc, #20]	; (2570 <_adc_get_regs+0x30>)
    255c:	4798      	blx	r3
	return 0;
    255e:	2000      	movs	r0, #0
    2560:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2562:	2000      	movs	r0, #0
    2564:	4770      	bx	lr
    2566:	2001      	movs	r0, #1
    2568:	4770      	bx	lr
    256a:	bf00      	nop
    256c:	0000a268 	.word	0x0000a268
    2570:	000021e5 	.word	0x000021e5

00002574 <_adc_async_init>:
{
    2574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2578:	460c      	mov	r4, r1
	ASSERT(device);
    257a:	4605      	mov	r5, r0
    257c:	22e6      	movs	r2, #230	; 0xe6
    257e:	493b      	ldr	r1, [pc, #236]	; (266c <_adc_async_init+0xf8>)
    2580:	3000      	adds	r0, #0
    2582:	bf18      	it	ne
    2584:	2001      	movne	r0, #1
    2586:	4b3a      	ldr	r3, [pc, #232]	; (2670 <_adc_async_init+0xfc>)
    2588:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    258a:	4620      	mov	r0, r4
    258c:	4b39      	ldr	r3, [pc, #228]	; (2674 <_adc_async_init+0x100>)
    258e:	4798      	blx	r3
    2590:	4601      	mov	r1, r0
    2592:	4620      	mov	r0, r4
    2594:	4b38      	ldr	r3, [pc, #224]	; (2678 <_adc_async_init+0x104>)
    2596:	4798      	blx	r3
	if (init_status) {
    2598:	4606      	mov	r6, r0
    259a:	b110      	cbz	r0, 25a2 <_adc_async_init+0x2e>
}
    259c:	4630      	mov	r0, r6
    259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    25a2:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    25a4:	4b35      	ldr	r3, [pc, #212]	; (267c <_adc_async_init+0x108>)
    25a6:	429c      	cmp	r4, r3
    25a8:	d05c      	beq.n	2664 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    25aa:	4b35      	ldr	r3, [pc, #212]	; (2680 <_adc_async_init+0x10c>)
    25ac:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    25ae:	bf04      	itt	eq
    25b0:	4b34      	ldreq	r3, [pc, #208]	; (2684 <_adc_async_init+0x110>)
    25b2:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    25b4:	4628      	mov	r0, r5
    25b6:	4f34      	ldr	r7, [pc, #208]	; (2688 <_adc_async_init+0x114>)
    25b8:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25ba:	0943      	lsrs	r3, r0, #5
    25bc:	f000 001f 	and.w	r0, r0, #31
    25c0:	2401      	movs	r4, #1
    25c2:	fa04 f000 	lsl.w	r0, r4, r0
    25c6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 268c <_adc_async_init+0x118>
    25ca:	3320      	adds	r3, #32
    25cc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    25d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25d4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    25d8:	4628      	mov	r0, r5
    25da:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25dc:	0943      	lsrs	r3, r0, #5
    25de:	f000 001f 	and.w	r0, r0, #31
    25e2:	fa04 f000 	lsl.w	r0, r4, r0
    25e6:	3360      	adds	r3, #96	; 0x60
    25e8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    25ec:	4628      	mov	r0, r5
    25ee:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25f0:	0943      	lsrs	r3, r0, #5
    25f2:	f000 001f 	and.w	r0, r0, #31
    25f6:	4084      	lsls	r4, r0
    25f8:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    25fc:	4628      	mov	r0, r5
    25fe:	47b8      	blx	r7
    2600:	3001      	adds	r0, #1
    2602:	b280      	uxth	r0, r0
    2604:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2606:	2b00      	cmp	r3, #0
    2608:	dbc8      	blt.n	259c <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    260a:	095b      	lsrs	r3, r3, #5
    260c:	f000 001f 	and.w	r0, r0, #31
    2610:	2201      	movs	r2, #1
    2612:	fa02 f000 	lsl.w	r0, r2, r0
    2616:	3320      	adds	r3, #32
    2618:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    261c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2620:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    2624:	4628      	mov	r0, r5
    2626:	47b8      	blx	r7
    2628:	3001      	adds	r0, #1
    262a:	b280      	uxth	r0, r0
    262c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    262e:	2b00      	cmp	r3, #0
    2630:	dbb4      	blt.n	259c <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2632:	095b      	lsrs	r3, r3, #5
    2634:	f000 001f 	and.w	r0, r0, #31
    2638:	2201      	movs	r2, #1
    263a:	fa02 f000 	lsl.w	r0, r2, r0
    263e:	3360      	adds	r3, #96	; 0x60
    2640:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    2644:	4628      	mov	r0, r5
    2646:	47b8      	blx	r7
    2648:	3001      	adds	r0, #1
    264a:	b280      	uxth	r0, r0
    264c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    264e:	2b00      	cmp	r3, #0
    2650:	dba4      	blt.n	259c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2652:	095b      	lsrs	r3, r3, #5
    2654:	f000 001f 	and.w	r0, r0, #31
    2658:	2201      	movs	r2, #1
    265a:	fa02 f000 	lsl.w	r0, r2, r0
    265e:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    2662:	e79b      	b.n	259c <_adc_async_init+0x28>
		_adc0_dev = dev;
    2664:	4b07      	ldr	r3, [pc, #28]	; (2684 <_adc_async_init+0x110>)
    2666:	601d      	str	r5, [r3, #0]
    2668:	e7a4      	b.n	25b4 <_adc_async_init+0x40>
    266a:	bf00      	nop
    266c:	0000a268 	.word	0x0000a268
    2670:	000021e5 	.word	0x000021e5
    2674:	00002541 	.word	0x00002541
    2678:	000023c1 	.word	0x000023c1
    267c:	43001c00 	.word	0x43001c00
    2680:	43002000 	.word	0x43002000
    2684:	200007ac 	.word	0x200007ac
    2688:	000023a9 	.word	0x000023a9
    268c:	e000e100 	.word	0xe000e100

00002690 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2690:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2692:	8813      	ldrh	r3, [r2, #0]
    2694:	b29b      	uxth	r3, r3
    2696:	f043 0302 	orr.w	r3, r3, #2
    269a:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    269c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    269e:	f013 0f03 	tst.w	r3, #3
    26a2:	d1fb      	bne.n	269c <_adc_async_enable_channel+0xc>
}
    26a4:	4770      	bx	lr

000026a6 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    26a6:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    26a8:	88db      	ldrh	r3, [r3, #6]
    26aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    26ae:	2b03      	cmp	r3, #3
}
    26b0:	bf0c      	ite	eq
    26b2:	2001      	moveq	r0, #1
    26b4:	2002      	movne	r0, #2
    26b6:	4770      	bx	lr

000026b8 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    26b8:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    26ba:	7d13      	ldrb	r3, [r2, #20]
    26bc:	f043 0302 	orr.w	r3, r3, #2
    26c0:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    26c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    26c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    26c8:	2b00      	cmp	r3, #0
    26ca:	d1fa      	bne.n	26c2 <_adc_async_convert+0xa>
}
    26cc:	4770      	bx	lr

000026ce <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    26ce:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    26d0:	2a01      	cmp	r2, #1
    26d2:	d007      	beq.n	26e4 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    26d4:	2a02      	cmp	r2, #2
    26d6:	d00e      	beq.n	26f6 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    26d8:	b91a      	cbnz	r2, 26e2 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    26da:	b1ab      	cbz	r3, 2708 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    26dc:	2301      	movs	r3, #1
    26de:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    26e2:	4770      	bx	lr
	if (value == 0x0) {
    26e4:	b91b      	cbnz	r3, 26ee <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    26e6:	2304      	movs	r3, #4
    26e8:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    26ec:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    26ee:	2304      	movs	r3, #4
    26f0:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    26f4:	4770      	bx	lr
	if (value == 0x0) {
    26f6:	b91b      	cbnz	r3, 2700 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    26f8:	2302      	movs	r3, #2
    26fa:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    26fe:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    2700:	2302      	movs	r3, #2
    2702:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    2706:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    2708:	2301      	movs	r3, #1
    270a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    270e:	4770      	bx	lr

00002710 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    2710:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2712:	4b02      	ldr	r3, [pc, #8]	; (271c <ADC0_0_Handler+0xc>)
    2714:	6818      	ldr	r0, [r3, #0]
    2716:	4b02      	ldr	r3, [pc, #8]	; (2720 <ADC0_0_Handler+0x10>)
    2718:	4798      	blx	r3
    271a:	bd08      	pop	{r3, pc}
    271c:	200007ac 	.word	0x200007ac
    2720:	000024ed 	.word	0x000024ed

00002724 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    2724:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2726:	4b02      	ldr	r3, [pc, #8]	; (2730 <ADC0_1_Handler+0xc>)
    2728:	6818      	ldr	r0, [r3, #0]
    272a:	4b02      	ldr	r3, [pc, #8]	; (2734 <ADC0_1_Handler+0x10>)
    272c:	4798      	blx	r3
    272e:	bd08      	pop	{r3, pc}
    2730:	200007ac 	.word	0x200007ac
    2734:	000024ed 	.word	0x000024ed

00002738 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    2738:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    273a:	4b02      	ldr	r3, [pc, #8]	; (2744 <ADC1_0_Handler+0xc>)
    273c:	6858      	ldr	r0, [r3, #4]
    273e:	4b02      	ldr	r3, [pc, #8]	; (2748 <ADC1_0_Handler+0x10>)
    2740:	4798      	blx	r3
    2742:	bd08      	pop	{r3, pc}
    2744:	200007ac 	.word	0x200007ac
    2748:	000024ed 	.word	0x000024ed

0000274c <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    274c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    274e:	4b02      	ldr	r3, [pc, #8]	; (2758 <ADC1_1_Handler+0xc>)
    2750:	6858      	ldr	r0, [r3, #4]
    2752:	4b02      	ldr	r3, [pc, #8]	; (275c <ADC1_1_Handler+0x10>)
    2754:	4798      	blx	r3
    2756:	bd08      	pop	{r3, pc}
    2758:	200007ac 	.word	0x200007ac
    275c:	000024ed 	.word	0x000024ed

00002760 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2760:	0943      	lsrs	r3, r0, #5
    2762:	f000 001f 	and.w	r0, r0, #31
    2766:	2201      	movs	r2, #1
    2768:	fa02 f000 	lsl.w	r0, r2, r0
    276c:	3340      	adds	r3, #64	; 0x40
    276e:	4a02      	ldr	r2, [pc, #8]	; (2778 <_irq_set+0x18>)
    2770:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2774:	4770      	bx	lr
    2776:	bf00      	nop
    2778:	e000e100 	.word	0xe000e100

0000277c <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    277c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2780:	00c0      	lsls	r0, r0, #3
    2782:	4770      	bx	lr

00002784 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2784:	4b01      	ldr	r3, [pc, #4]	; (278c <_get_cycles_for_ms+0x8>)
    2786:	fb03 f000 	mul.w	r0, r3, r0
    278a:	4770      	bx	lr
    278c:	0001d4c0 	.word	0x0001d4c0

00002790 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2790:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2792:	4a0e      	ldr	r2, [pc, #56]	; (27cc <_init_chip+0x3c>)
    2794:	8813      	ldrh	r3, [r2, #0]
    2796:	b29b      	uxth	r3, r3
    2798:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    279c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    279e:	4b0c      	ldr	r3, [pc, #48]	; (27d0 <_init_chip+0x40>)
    27a0:	4798      	blx	r3
	_oscctrl_init_sources();
    27a2:	4b0c      	ldr	r3, [pc, #48]	; (27d4 <_init_chip+0x44>)
    27a4:	4798      	blx	r3
	_mclk_init();
    27a6:	4b0c      	ldr	r3, [pc, #48]	; (27d8 <_init_chip+0x48>)
    27a8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    27aa:	2004      	movs	r0, #4
    27ac:	4c0b      	ldr	r4, [pc, #44]	; (27dc <_init_chip+0x4c>)
    27ae:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    27b0:	4b0b      	ldr	r3, [pc, #44]	; (27e0 <_init_chip+0x50>)
    27b2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    27b4:	f640 70fb 	movw	r0, #4091	; 0xffb
    27b8:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    27ba:	4a0a      	ldr	r2, [pc, #40]	; (27e4 <_init_chip+0x54>)
    27bc:	6913      	ldr	r3, [r2, #16]
    27be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    27c2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    27c4:	4b08      	ldr	r3, [pc, #32]	; (27e8 <_init_chip+0x58>)
    27c6:	4798      	blx	r3
    27c8:	bd10      	pop	{r4, pc}
    27ca:	bf00      	nop
    27cc:	41004000 	.word	0x41004000
    27d0:	00002c6d 	.word	0x00002c6d
    27d4:	00002c81 	.word	0x00002c81
    27d8:	00002b95 	.word	0x00002b95
    27dc:	00002b1d 	.word	0x00002b1d
    27e0:	00002c85 	.word	0x00002c85
    27e4:	40000800 	.word	0x40000800
    27e8:	00002861 	.word	0x00002861

000027ec <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    27ec:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    27ee:	4a1a      	ldr	r2, [pc, #104]	; (2858 <_dmac_handler+0x6c>)
    27f0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    27f2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    27f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    27fa:	4818      	ldr	r0, [pc, #96]	; (285c <_dmac_handler+0x70>)
    27fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2800:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2804:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2808:	f012 0f01 	tst.w	r2, #1
    280c:	d10a      	bne.n	2824 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    280e:	011a      	lsls	r2, r3, #4
    2810:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2814:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2818:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    281c:	f012 0f02 	tst.w	r2, #2
    2820:	d10b      	bne.n	283a <_dmac_handler+0x4e>
    2822:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2824:	011a      	lsls	r2, r3, #4
    2826:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    282a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    282e:	2101      	movs	r1, #1
    2830:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2834:	6843      	ldr	r3, [r0, #4]
    2836:	4798      	blx	r3
    2838:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    283a:	011a      	lsls	r2, r3, #4
    283c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2840:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2844:	2102      	movs	r1, #2
    2846:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    284a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    284e:	4a03      	ldr	r2, [pc, #12]	; (285c <_dmac_handler+0x70>)
    2850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2854:	4798      	blx	r3
	}
}
    2856:	e7e4      	b.n	2822 <_dmac_handler+0x36>
    2858:	4100a000 	.word	0x4100a000
    285c:	200007b4 	.word	0x200007b4

00002860 <_dma_init>:
{
    2860:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2862:	4a32      	ldr	r2, [pc, #200]	; (292c <_dma_init+0xcc>)
    2864:	8813      	ldrh	r3, [r2, #0]
    2866:	f023 0302 	bic.w	r3, r3, #2
    286a:	041b      	lsls	r3, r3, #16
    286c:	0c1b      	lsrs	r3, r3, #16
    286e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2870:	8853      	ldrh	r3, [r2, #2]
    2872:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2876:	041b      	lsls	r3, r3, #16
    2878:	0c1b      	lsrs	r3, r3, #16
    287a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    287c:	8813      	ldrh	r3, [r2, #0]
    287e:	b29b      	uxth	r3, r3
    2880:	f043 0301 	orr.w	r3, r3, #1
    2884:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2886:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2888:	f013 0f01 	tst.w	r3, #1
    288c:	d1fb      	bne.n	2886 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    288e:	4b27      	ldr	r3, [pc, #156]	; (292c <_dma_init+0xcc>)
    2890:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2894:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2896:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    289c:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    28a0:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    28a2:	2100      	movs	r1, #0
    28a4:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    28a6:	4a22      	ldr	r2, [pc, #136]	; (2930 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    28a8:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    28aa:	4a22      	ldr	r2, [pc, #136]	; (2934 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    28ac:	639a      	str	r2, [r3, #56]	; 0x38
    28ae:	4b22      	ldr	r3, [pc, #136]	; (2938 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    28b0:	4c1f      	ldr	r4, [pc, #124]	; (2930 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    28b2:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    28b4:	681d      	ldr	r5, [r3, #0]
    28b6:	0108      	lsls	r0, r1, #4
    28b8:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    28bc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    28c0:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    28c2:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    28c4:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    28c8:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    28ca:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    28ce:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    28d0:	1822      	adds	r2, r4, r0
    28d2:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    28d4:	60d6      	str	r6, [r2, #12]
    28d6:	3101      	adds	r1, #1
    28d8:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    28da:	2920      	cmp	r1, #32
    28dc:	d1ea      	bne.n	28b4 <_dma_init+0x54>
    28de:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28e0:	2001      	movs	r0, #1
    28e2:	4916      	ldr	r1, [pc, #88]	; (293c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    28e4:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    28e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    28ea:	d00b      	beq.n	2904 <_dma_init+0xa4>
    28ec:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    28ee:	2b24      	cmp	r3, #36	; 0x24
    28f0:	d1f8      	bne.n	28e4 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    28f2:	4a0e      	ldr	r2, [pc, #56]	; (292c <_dma_init+0xcc>)
    28f4:	8813      	ldrh	r3, [r2, #0]
    28f6:	b29b      	uxth	r3, r3
    28f8:	f043 0302 	orr.w	r3, r3, #2
    28fc:	8013      	strh	r3, [r2, #0]
}
    28fe:	2000      	movs	r0, #0
    2900:	bc70      	pop	{r4, r5, r6}
    2902:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2904:	095c      	lsrs	r4, r3, #5
    2906:	f002 021f 	and.w	r2, r2, #31
    290a:	fa00 f202 	lsl.w	r2, r0, r2
    290e:	f104 0520 	add.w	r5, r4, #32
    2912:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2916:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    291a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    291e:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2922:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2926:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    292a:	e7df      	b.n	28ec <_dma_init+0x8c>
    292c:	4100a000 	.word	0x4100a000
    2930:	20001630 	.word	0x20001630
    2934:	20001830 	.word	0x20001830
    2938:	0000a280 	.word	0x0000a280
    293c:	e000e100 	.word	0xe000e100

00002940 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    2940:	b991      	cbnz	r1, 2968 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    2942:	b942      	cbnz	r2, 2956 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    2944:	0100      	lsls	r0, r0, #4
    2946:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    294a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    294e:	2302      	movs	r3, #2
    2950:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    2954:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    2956:	0100      	lsls	r0, r0, #4
    2958:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    295c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2960:	2302      	movs	r3, #2
    2962:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    2966:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    2968:	2901      	cmp	r1, #1
    296a:	d000      	beq.n	296e <_dma_set_irq_state+0x2e>
    296c:	4770      	bx	lr
	if (value == 0x0) {
    296e:	b142      	cbz	r2, 2982 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    2970:	0100      	lsls	r0, r0, #4
    2972:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2976:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    297a:	2301      	movs	r3, #1
    297c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    2980:	e7f4      	b.n	296c <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    2982:	0100      	lsls	r0, r0, #4
    2984:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2988:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    298c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    2990:	4770      	bx	lr
	...

00002994 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2994:	4b02      	ldr	r3, [pc, #8]	; (29a0 <_dma_set_destination_address+0xc>)
    2996:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    299a:	6081      	str	r1, [r0, #8]
}
    299c:	2000      	movs	r0, #0
    299e:	4770      	bx	lr
    29a0:	20001630 	.word	0x20001630

000029a4 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    29a4:	4b02      	ldr	r3, [pc, #8]	; (29b0 <_dma_set_source_address+0xc>)
    29a6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    29aa:	6041      	str	r1, [r0, #4]
}
    29ac:	2000      	movs	r0, #0
    29ae:	4770      	bx	lr
    29b0:	20001630 	.word	0x20001630

000029b4 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29b4:	4a05      	ldr	r2, [pc, #20]	; (29cc <_dma_srcinc_enable+0x18>)
    29b6:	0100      	lsls	r0, r0, #4
    29b8:	5a13      	ldrh	r3, [r2, r0]
    29ba:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    29bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    29c0:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    29c4:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    29c6:	5211      	strh	r1, [r2, r0]
}
    29c8:	2000      	movs	r0, #0
    29ca:	4770      	bx	lr
    29cc:	20001630 	.word	0x20001630

000029d0 <_dma_set_data_amount>:
{
    29d0:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    29d2:	4c14      	ldr	r4, [pc, #80]	; (2a24 <_dma_set_data_amount+0x54>)
    29d4:	0102      	lsls	r2, r0, #4
    29d6:	18a3      	adds	r3, r4, r2
    29d8:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29da:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    29dc:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29e0:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    29e2:	f412 6f00 	tst.w	r2, #2048	; 0x800
    29e6:	d006      	beq.n	29f6 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    29e8:	fa01 f403 	lsl.w	r4, r1, r3
    29ec:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    29ee:	4a0d      	ldr	r2, [pc, #52]	; (2a24 <_dma_set_data_amount+0x54>)
    29f0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    29f4:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    29f6:	4c0b      	ldr	r4, [pc, #44]	; (2a24 <_dma_set_data_amount+0x54>)
    29f8:	0102      	lsls	r2, r0, #4
    29fa:	18a5      	adds	r5, r4, r2
    29fc:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    29fe:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2a00:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2a04:	d005      	beq.n	2a12 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2a06:	fa01 f303 	lsl.w	r3, r1, r3
    2a0a:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2a0c:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    2a10:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2a12:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2a14:	4b03      	ldr	r3, [pc, #12]	; (2a24 <_dma_set_data_amount+0x54>)
    2a16:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2a1a:	8041      	strh	r1, [r0, #2]
}
    2a1c:	2000      	movs	r0, #0
    2a1e:	bc30      	pop	{r4, r5}
    2a20:	4770      	bx	lr
    2a22:	bf00      	nop
    2a24:	20001630 	.word	0x20001630

00002a28 <_dma_enable_transaction>:
{
    2a28:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2a2a:	4c0d      	ldr	r4, [pc, #52]	; (2a60 <_dma_enable_transaction+0x38>)
    2a2c:	0103      	lsls	r3, r0, #4
    2a2e:	5ae2      	ldrh	r2, [r4, r3]
    2a30:	b292      	uxth	r2, r2
    2a32:	f042 0201 	orr.w	r2, r2, #1
    2a36:	52e2      	strh	r2, [r4, r3]
    2a38:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a3c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2a42:	f042 0202 	orr.w	r2, r2, #2
    2a46:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2a48:	b131      	cbz	r1, 2a58 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2a4a:	4a06      	ldr	r2, [pc, #24]	; (2a64 <_dma_enable_transaction+0x3c>)
    2a4c:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2a4e:	2301      	movs	r3, #1
    2a50:	fa03 f000 	lsl.w	r0, r3, r0
    2a54:	4308      	orrs	r0, r1
    2a56:	6110      	str	r0, [r2, #16]
}
    2a58:	2000      	movs	r0, #0
    2a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a5e:	4770      	bx	lr
    2a60:	20001630 	.word	0x20001630
    2a64:	4100a000 	.word	0x4100a000

00002a68 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    2a68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2a6c:	4b02      	ldr	r3, [pc, #8]	; (2a78 <_dma_get_channel_resource+0x10>)
    2a6e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2a72:	6001      	str	r1, [r0, #0]
}
    2a74:	2000      	movs	r0, #0
    2a76:	4770      	bx	lr
    2a78:	200007b4 	.word	0x200007b4

00002a7c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2a7c:	b508      	push	{r3, lr}
	_dmac_handler();
    2a7e:	4b01      	ldr	r3, [pc, #4]	; (2a84 <DMAC_0_Handler+0x8>)
    2a80:	4798      	blx	r3
    2a82:	bd08      	pop	{r3, pc}
    2a84:	000027ed 	.word	0x000027ed

00002a88 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2a88:	b508      	push	{r3, lr}
	_dmac_handler();
    2a8a:	4b01      	ldr	r3, [pc, #4]	; (2a90 <DMAC_1_Handler+0x8>)
    2a8c:	4798      	blx	r3
    2a8e:	bd08      	pop	{r3, pc}
    2a90:	000027ed 	.word	0x000027ed

00002a94 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2a94:	b508      	push	{r3, lr}
	_dmac_handler();
    2a96:	4b01      	ldr	r3, [pc, #4]	; (2a9c <DMAC_2_Handler+0x8>)
    2a98:	4798      	blx	r3
    2a9a:	bd08      	pop	{r3, pc}
    2a9c:	000027ed 	.word	0x000027ed

00002aa0 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2aa0:	b508      	push	{r3, lr}
	_dmac_handler();
    2aa2:	4b01      	ldr	r3, [pc, #4]	; (2aa8 <DMAC_3_Handler+0x8>)
    2aa4:	4798      	blx	r3
    2aa6:	bd08      	pop	{r3, pc}
    2aa8:	000027ed 	.word	0x000027ed

00002aac <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2aac:	b508      	push	{r3, lr}
	_dmac_handler();
    2aae:	4b01      	ldr	r3, [pc, #4]	; (2ab4 <DMAC_4_Handler+0x8>)
    2ab0:	4798      	blx	r3
    2ab2:	bd08      	pop	{r3, pc}
    2ab4:	000027ed 	.word	0x000027ed

00002ab8 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2ab8:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2aba:	2000      	movs	r0, #0
    2abc:	4770      	bx	lr
	...

00002ac0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2ac0:	b430      	push	{r4, r5}
    2ac2:	4814      	ldr	r0, [pc, #80]	; (2b14 <_event_system_init+0x54>)
    2ac4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2ac8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2aca:	4c13      	ldr	r4, [pc, #76]	; (2b18 <_event_system_init+0x58>)
    2acc:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2ace:	f813 1b01 	ldrb.w	r1, [r3], #1
    2ad2:	3248      	adds	r2, #72	; 0x48
    2ad4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2ad8:	42ab      	cmp	r3, r5
    2ada:	d1f7      	bne.n	2acc <_event_system_init+0xc>
    2adc:	480d      	ldr	r0, [pc, #52]	; (2b14 <_event_system_init+0x54>)
    2ade:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2ae2:	3080      	adds	r0, #128	; 0x80
    2ae4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2ae6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2aea:	00ca      	lsls	r2, r1, #3
    2aec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2af0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2af4:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2af6:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2afa:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2afc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2b00:	43db      	mvns	r3, r3
    2b02:	b2db      	uxtb	r3, r3
    2b04:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2b08:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2b0a:	2920      	cmp	r1, #32
    2b0c:	d1eb      	bne.n	2ae6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2b0e:	2000      	movs	r0, #0
    2b10:	bc30      	pop	{r4, r5}
    2b12:	4770      	bx	lr
    2b14:	0000a380 	.word	0x0000a380
    2b18:	4100e000 	.word	0x4100e000

00002b1c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2b1c:	f010 0f01 	tst.w	r0, #1
    2b20:	d008      	beq.n	2b34 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b22:	4a17      	ldr	r2, [pc, #92]	; (2b80 <_gclk_init_generators_by_fref+0x64>)
    2b24:	4b17      	ldr	r3, [pc, #92]	; (2b84 <_gclk_init_generators_by_fref+0x68>)
    2b26:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b28:	4619      	mov	r1, r3
    2b2a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b2e:	684b      	ldr	r3, [r1, #4]
    2b30:	4213      	tst	r3, r2
    2b32:	d1fc      	bne.n	2b2e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2b34:	f010 0f02 	tst.w	r0, #2
    2b38:	d008      	beq.n	2b4c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b3a:	4a13      	ldr	r2, [pc, #76]	; (2b88 <_gclk_init_generators_by_fref+0x6c>)
    2b3c:	4b11      	ldr	r3, [pc, #68]	; (2b84 <_gclk_init_generators_by_fref+0x68>)
    2b3e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b40:	4619      	mov	r1, r3
    2b42:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b46:	684b      	ldr	r3, [r1, #4]
    2b48:	4213      	tst	r3, r2
    2b4a:	d1fc      	bne.n	2b46 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2b4c:	f010 0f04 	tst.w	r0, #4
    2b50:	d008      	beq.n	2b64 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b52:	4a0e      	ldr	r2, [pc, #56]	; (2b8c <_gclk_init_generators_by_fref+0x70>)
    2b54:	4b0b      	ldr	r3, [pc, #44]	; (2b84 <_gclk_init_generators_by_fref+0x68>)
    2b56:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b58:	4619      	mov	r1, r3
    2b5a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b5e:	684b      	ldr	r3, [r1, #4]
    2b60:	4213      	tst	r3, r2
    2b62:	d1fc      	bne.n	2b5e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2b64:	f010 0f08 	tst.w	r0, #8
    2b68:	d008      	beq.n	2b7c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2b6a:	4a09      	ldr	r2, [pc, #36]	; (2b90 <_gclk_init_generators_by_fref+0x74>)
    2b6c:	4b05      	ldr	r3, [pc, #20]	; (2b84 <_gclk_init_generators_by_fref+0x68>)
    2b6e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2b70:	4619      	mov	r1, r3
    2b72:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2b76:	684b      	ldr	r3, [r1, #4]
    2b78:	4213      	tst	r3, r2
    2b7a:	d1fc      	bne.n	2b76 <_gclk_init_generators_by_fref+0x5a>
    2b7c:	4770      	bx	lr
    2b7e:	bf00      	nop
    2b80:	00010108 	.word	0x00010108
    2b84:	40001c00 	.word	0x40001c00
    2b88:	00010106 	.word	0x00010106
    2b8c:	00100106 	.word	0x00100106
    2b90:	00010104 	.word	0x00010104

00002b94 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2b94:	2201      	movs	r2, #1
    2b96:	4b01      	ldr	r3, [pc, #4]	; (2b9c <_mclk_init+0x8>)
    2b98:	715a      	strb	r2, [r3, #5]
    2b9a:	4770      	bx	lr
    2b9c:	40000800 	.word	0x40000800

00002ba0 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2ba0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2ba2:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2ba4:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2ba6:	f012 0f01 	tst.w	r2, #1
    2baa:	d005      	beq.n	2bb8 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2bac:	2201      	movs	r2, #1
    2bae:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2bb0:	6803      	ldr	r3, [r0, #0]
    2bb2:	b153      	cbz	r3, 2bca <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2bb4:	4798      	blx	r3
    2bb6:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2bb8:	8a1a      	ldrh	r2, [r3, #16]
    2bba:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2bbc:	b12a      	cbz	r2, 2bca <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2bbe:	f240 225e 	movw	r2, #606	; 0x25e
    2bc2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2bc4:	6843      	ldr	r3, [r0, #4]
    2bc6:	b103      	cbz	r3, 2bca <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2bc8:	4798      	blx	r3
    2bca:	bd08      	pop	{r3, pc}

00002bcc <_flash_init>:
{
    2bcc:	b538      	push	{r3, r4, r5, lr}
    2bce:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2bd0:	4605      	mov	r5, r0
    2bd2:	b350      	cbz	r0, 2c2a <_flash_init+0x5e>
    2bd4:	4816      	ldr	r0, [pc, #88]	; (2c30 <_flash_init+0x64>)
    2bd6:	4281      	cmp	r1, r0
    2bd8:	bf14      	ite	ne
    2bda:	2000      	movne	r0, #0
    2bdc:	2001      	moveq	r0, #1
    2bde:	224b      	movs	r2, #75	; 0x4b
    2be0:	4914      	ldr	r1, [pc, #80]	; (2c34 <_flash_init+0x68>)
    2be2:	4b15      	ldr	r3, [pc, #84]	; (2c38 <_flash_init+0x6c>)
    2be4:	4798      	blx	r3
	device->hw = hw;
    2be6:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2be8:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2bea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2bee:	049b      	lsls	r3, r3, #18
    2bf0:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2bf2:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2bf4:	4b11      	ldr	r3, [pc, #68]	; (2c3c <_flash_init+0x70>)
    2bf6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bf8:	4b11      	ldr	r3, [pc, #68]	; (2c40 <_flash_init+0x74>)
    2bfa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2bfe:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2c02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c06:	f3bf 8f6f 	isb	sy
    2c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c16:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c1a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2c1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c22:	6019      	str	r1, [r3, #0]
    2c24:	601a      	str	r2, [r3, #0]
}
    2c26:	2000      	movs	r0, #0
    2c28:	bd38      	pop	{r3, r4, r5, pc}
    2c2a:	2000      	movs	r0, #0
    2c2c:	e7d7      	b.n	2bde <_flash_init+0x12>
    2c2e:	bf00      	nop
    2c30:	41004000 	.word	0x41004000
    2c34:	0000a484 	.word	0x0000a484
    2c38:	000021e5 	.word	0x000021e5
    2c3c:	20000934 	.word	0x20000934
    2c40:	e000e100 	.word	0xe000e100

00002c44 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2c44:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2c46:	4b02      	ldr	r3, [pc, #8]	; (2c50 <NVMCTRL_0_Handler+0xc>)
    2c48:	6818      	ldr	r0, [r3, #0]
    2c4a:	4b02      	ldr	r3, [pc, #8]	; (2c54 <NVMCTRL_0_Handler+0x10>)
    2c4c:	4798      	blx	r3
    2c4e:	bd08      	pop	{r3, pc}
    2c50:	20000934 	.word	0x20000934
    2c54:	00002ba1 	.word	0x00002ba1

00002c58 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    2c58:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2c5a:	4b02      	ldr	r3, [pc, #8]	; (2c64 <NVMCTRL_1_Handler+0xc>)
    2c5c:	6818      	ldr	r0, [r3, #0]
    2c5e:	4b02      	ldr	r3, [pc, #8]	; (2c68 <NVMCTRL_1_Handler+0x10>)
    2c60:	4798      	blx	r3
    2c62:	bd08      	pop	{r3, pc}
    2c64:	20000934 	.word	0x20000934
    2c68:	00002ba1 	.word	0x00002ba1

00002c6c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2c6c:	4b03      	ldr	r3, [pc, #12]	; (2c7c <_osc32kctrl_init_sources+0x10>)
    2c6e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2c70:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2c74:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2c76:	2201      	movs	r2, #1
    2c78:	741a      	strb	r2, [r3, #16]
    2c7a:	4770      	bx	lr
    2c7c:	40001400 	.word	0x40001400

00002c80 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2c80:	4770      	bx	lr
	...

00002c84 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2c84:	4a47      	ldr	r2, [pc, #284]	; (2da4 <_oscctrl_init_referenced_generators+0x120>)
    2c86:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2c88:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2c8c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2c90:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2c92:	4611      	mov	r1, r2
    2c94:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2c98:	684b      	ldr	r3, [r1, #4]
    2c9a:	4213      	tst	r3, r2
    2c9c:	d1fc      	bne.n	2c98 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2c9e:	4a41      	ldr	r2, [pc, #260]	; (2da4 <_oscctrl_init_referenced_generators+0x120>)
    2ca0:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2ca2:	f013 0f04 	tst.w	r3, #4
    2ca6:	d1fb      	bne.n	2ca0 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2ca8:	4b3f      	ldr	r3, [pc, #252]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2caa:	2200      	movs	r2, #0
    2cac:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2cae:	4a3f      	ldr	r2, [pc, #252]	; (2dac <_oscctrl_init_referenced_generators+0x128>)
    2cb0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cb2:	461a      	mov	r2, r3
    2cb4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2cb8:	f013 0f10 	tst.w	r3, #16
    2cbc:	d1fa      	bne.n	2cb4 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2cbe:	2200      	movs	r2, #0
    2cc0:	4b39      	ldr	r3, [pc, #228]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2cc2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cc6:	461a      	mov	r2, r3
    2cc8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2ccc:	f013 0f04 	tst.w	r3, #4
    2cd0:	d1fa      	bne.n	2cc8 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2cd2:	2202      	movs	r2, #2
    2cd4:	4b34      	ldr	r3, [pc, #208]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2cd6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cd8:	461a      	mov	r2, r3
    2cda:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2cde:	f013 0f02 	tst.w	r3, #2
    2ce2:	d1fa      	bne.n	2cda <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2ce4:	4b30      	ldr	r3, [pc, #192]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2ce8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cea:	461a      	mov	r2, r3
    2cec:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2cf0:	f013 0f08 	tst.w	r3, #8
    2cf4:	d1fa      	bne.n	2cec <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2cf6:	2288      	movs	r2, #136	; 0x88
    2cf8:	4b2b      	ldr	r3, [pc, #172]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2cfa:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cfe:	461a      	mov	r2, r3
    2d00:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2d04:	f013 0f04 	tst.w	r3, #4
    2d08:	d1fa      	bne.n	2d00 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2d0a:	2242      	movs	r2, #66	; 0x42
    2d0c:	4b25      	ldr	r3, [pc, #148]	; (2da4 <_oscctrl_init_referenced_generators+0x120>)
    2d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2d12:	2227      	movs	r2, #39	; 0x27
    2d14:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    2d18:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2d1a:	461a      	mov	r2, r3
    2d1c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2d1e:	f013 0f06 	tst.w	r3, #6
    2d22:	d1fb      	bne.n	2d1c <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2d24:	4b20      	ldr	r3, [pc, #128]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2d2a:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    2d2c:	2202      	movs	r2, #2
    2d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2d32:	461a      	mov	r2, r3
    2d34:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2d36:	f013 0f02 	tst.w	r3, #2
    2d3a:	d1fb      	bne.n	2d34 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2d3c:	4b1a      	ldr	r3, [pc, #104]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2d42:	f013 0f01 	tst.w	r3, #1
    2d46:	d026      	beq.n	2d96 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2d48:	4a17      	ldr	r2, [pc, #92]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2d4a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2d4c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2d50:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2d54:	d1f9      	bne.n	2d4a <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2d56:	4b14      	ldr	r3, [pc, #80]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    2d5a:	f012 0f01 	tst.w	r2, #1
    2d5e:	d103      	bne.n	2d68 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    2d62:	f012 0f02 	tst.w	r2, #2
    2d66:	d0f7      	beq.n	2d58 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2d68:	4a0e      	ldr	r2, [pc, #56]	; (2da4 <_oscctrl_init_referenced_generators+0x120>)
    2d6a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d1fc      	bne.n	2d6a <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2d70:	4a0c      	ldr	r2, [pc, #48]	; (2da4 <_oscctrl_init_referenced_generators+0x120>)
    2d72:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2d74:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2d78:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2d7c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2d7e:	4611      	mov	r1, r2
    2d80:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2d84:	684b      	ldr	r3, [r1, #4]
    2d86:	4213      	tst	r3, r2
    2d88:	d1fc      	bne.n	2d84 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2d8a:	4a06      	ldr	r2, [pc, #24]	; (2da4 <_oscctrl_init_referenced_generators+0x120>)
    2d8c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2d8e:	f013 0f04 	tst.w	r3, #4
    2d92:	d1fb      	bne.n	2d8c <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    2d94:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2d96:	4a04      	ldr	r2, [pc, #16]	; (2da8 <_oscctrl_init_referenced_generators+0x124>)
    2d98:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2d9a:	f413 7f80 	tst.w	r3, #256	; 0x100
    2d9e:	d0fb      	beq.n	2d98 <_oscctrl_init_referenced_generators+0x114>
    2da0:	e7d9      	b.n	2d56 <_oscctrl_init_referenced_generators+0xd2>
    2da2:	bf00      	nop
    2da4:	40001c00 	.word	0x40001c00
    2da8:	40001000 	.word	0x40001000
    2dac:	04010000 	.word	0x04010000

00002db0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2db0:	b500      	push	{lr}
    2db2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2db4:	4b0d      	ldr	r3, [pc, #52]	; (2dec <RAMECC_Handler+0x3c>)
    2db6:	789b      	ldrb	r3, [r3, #2]
    2db8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2dba:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2dbc:	9b01      	ldr	r3, [sp, #4]
    2dbe:	f013 0f02 	tst.w	r3, #2
    2dc2:	d006      	beq.n	2dd2 <RAMECC_Handler+0x22>
    2dc4:	4b0a      	ldr	r3, [pc, #40]	; (2df0 <RAMECC_Handler+0x40>)
    2dc6:	681b      	ldr	r3, [r3, #0]
    2dc8:	b11b      	cbz	r3, 2dd2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2dca:	4a08      	ldr	r2, [pc, #32]	; (2dec <RAMECC_Handler+0x3c>)
    2dcc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2dce:	4798      	blx	r3
    2dd0:	e009      	b.n	2de6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2dd2:	9b01      	ldr	r3, [sp, #4]
    2dd4:	f013 0f01 	tst.w	r3, #1
    2dd8:	d005      	beq.n	2de6 <RAMECC_Handler+0x36>
    2dda:	4b05      	ldr	r3, [pc, #20]	; (2df0 <RAMECC_Handler+0x40>)
    2ddc:	685b      	ldr	r3, [r3, #4]
    2dde:	b113      	cbz	r3, 2de6 <RAMECC_Handler+0x36>
    2de0:	4a02      	ldr	r2, [pc, #8]	; (2dec <RAMECC_Handler+0x3c>)
    2de2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2de4:	4798      	blx	r3
	} else {
		return;
	}
}
    2de6:	b003      	add	sp, #12
    2de8:	f85d fb04 	ldr.w	pc, [sp], #4
    2dec:	41020000 	.word	0x41020000
    2df0:	20001a30 	.word	0x20001a30

00002df4 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    2df4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2df6:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2df8:	6913      	ldr	r3, [r2, #16]
    2dfa:	f013 0f60 	tst.w	r3, #96	; 0x60
    2dfe:	d1fb      	bne.n	2df8 <_rtc_timer_set_period+0x4>
}
    2e00:	4770      	bx	lr

00002e02 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    2e02:	68c2      	ldr	r2, [r0, #12]
    2e04:	6913      	ldr	r3, [r2, #16]
    2e06:	f013 0f60 	tst.w	r3, #96	; 0x60
    2e0a:	d1fb      	bne.n	2e04 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    2e0c:	6a10      	ldr	r0, [r2, #32]
}
    2e0e:	4770      	bx	lr

00002e10 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    2e10:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e12:	f248 0103 	movw	r1, #32771	; 0x8003
    2e16:	6913      	ldr	r3, [r2, #16]
    2e18:	420b      	tst	r3, r1
    2e1a:	d1fc      	bne.n	2e16 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2e1c:	8810      	ldrh	r0, [r2, #0]
}
    2e1e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e22:	4770      	bx	lr

00002e24 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    2e24:	4770      	bx	lr
	...

00002e28 <_rtc_timer_init>:
{
    2e28:	b538      	push	{r3, r4, r5, lr}
    2e2a:	460c      	mov	r4, r1
	ASSERT(dev);
    2e2c:	4605      	mov	r5, r0
    2e2e:	2230      	movs	r2, #48	; 0x30
    2e30:	4914      	ldr	r1, [pc, #80]	; (2e84 <_rtc_timer_init+0x5c>)
    2e32:	3000      	adds	r0, #0
    2e34:	bf18      	it	ne
    2e36:	2001      	movne	r0, #1
    2e38:	4b13      	ldr	r3, [pc, #76]	; (2e88 <_rtc_timer_init+0x60>)
    2e3a:	4798      	blx	r3
	dev->hw = hw;
    2e3c:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2e3e:	2301      	movs	r3, #1
    2e40:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e42:	f248 0203 	movw	r2, #32771	; 0x8003
    2e46:	6923      	ldr	r3, [r4, #16]
    2e48:	4213      	tst	r3, r2
    2e4a:	d1fc      	bne.n	2e46 <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2e4c:	68eb      	ldr	r3, [r5, #12]
    2e4e:	691a      	ldr	r2, [r3, #16]
    2e50:	f012 0f01 	tst.w	r2, #1
    2e54:	d1fb      	bne.n	2e4e <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2e56:	f248 0280 	movw	r2, #32896	; 0x8080
    2e5a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e5c:	f248 0103 	movw	r1, #32771	; 0x8003
    2e60:	691a      	ldr	r2, [r3, #16]
    2e62:	420a      	tst	r2, r1
    2e64:	d1fc      	bne.n	2e60 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    2e66:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    2e68:	2301      	movs	r3, #1
    2e6a:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2e6c:	6913      	ldr	r3, [r2, #16]
    2e6e:	f013 0f60 	tst.w	r3, #96	; 0x60
    2e72:	d1fb      	bne.n	2e6c <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    2e74:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    2e76:	f44f 7280 	mov.w	r2, #256	; 0x100
    2e7a:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    2e7c:	4b03      	ldr	r3, [pc, #12]	; (2e8c <_rtc_timer_init+0x64>)
    2e7e:	601d      	str	r5, [r3, #0]
}
    2e80:	2000      	movs	r0, #0
    2e82:	bd38      	pop	{r3, r4, r5, pc}
    2e84:	0000a4a4 	.word	0x0000a4a4
    2e88:	000021e5 	.word	0x000021e5
    2e8c:	20000938 	.word	0x20000938

00002e90 <_rtc_timer_deinit>:
{
    2e90:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2e92:	4604      	mov	r4, r0
    2e94:	b1c8      	cbz	r0, 2eca <_rtc_timer_deinit+0x3a>
    2e96:	68c0      	ldr	r0, [r0, #12]
    2e98:	3000      	adds	r0, #0
    2e9a:	bf18      	it	ne
    2e9c:	2001      	movne	r0, #1
    2e9e:	2252      	movs	r2, #82	; 0x52
    2ea0:	490b      	ldr	r1, [pc, #44]	; (2ed0 <_rtc_timer_deinit+0x40>)
    2ea2:	4b0c      	ldr	r3, [pc, #48]	; (2ed4 <_rtc_timer_deinit+0x44>)
    2ea4:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2eaa:	4b0b      	ldr	r3, [pc, #44]	; (2ed8 <_rtc_timer_deinit+0x48>)
    2eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2eb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2eb4:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    2eb8:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2eba:	2301      	movs	r3, #1
    2ebc:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ebe:	f248 0103 	movw	r1, #32771	; 0x8003
    2ec2:	6913      	ldr	r3, [r2, #16]
    2ec4:	420b      	tst	r3, r1
    2ec6:	d1fc      	bne.n	2ec2 <_rtc_timer_deinit+0x32>
}
    2ec8:	bd10      	pop	{r4, pc}
    2eca:	2000      	movs	r0, #0
    2ecc:	e7e7      	b.n	2e9e <_rtc_timer_deinit+0xe>
    2ece:	bf00      	nop
    2ed0:	0000a4a4 	.word	0x0000a4a4
    2ed4:	000021e5 	.word	0x000021e5
    2ed8:	e000e100 	.word	0xe000e100

00002edc <_rtc_timer_start>:
{
    2edc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2ede:	4604      	mov	r4, r0
    2ee0:	b310      	cbz	r0, 2f28 <_rtc_timer_start+0x4c>
    2ee2:	68c0      	ldr	r0, [r0, #12]
    2ee4:	3000      	adds	r0, #0
    2ee6:	bf18      	it	ne
    2ee8:	2001      	movne	r0, #1
    2eea:	225e      	movs	r2, #94	; 0x5e
    2eec:	490f      	ldr	r1, [pc, #60]	; (2f2c <_rtc_timer_start+0x50>)
    2eee:	4b10      	ldr	r3, [pc, #64]	; (2f30 <_rtc_timer_start+0x54>)
    2ef0:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2ef6:	4b0f      	ldr	r3, [pc, #60]	; (2f34 <_rtc_timer_start+0x58>)
    2ef8:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    2efa:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    2efc:	2300      	movs	r3, #0
    2efe:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f00:	6913      	ldr	r3, [r2, #16]
    2f02:	f013 0f08 	tst.w	r3, #8
    2f06:	d1fb      	bne.n	2f00 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    2f08:	68e3      	ldr	r3, [r4, #12]
    2f0a:	691a      	ldr	r2, [r3, #16]
    2f0c:	f012 0f08 	tst.w	r2, #8
    2f10:	d1fb      	bne.n	2f0a <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2f12:	881a      	ldrh	r2, [r3, #0]
    2f14:	b292      	uxth	r2, r2
    2f16:	f042 0202 	orr.w	r2, r2, #2
    2f1a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f1c:	f248 0103 	movw	r1, #32771	; 0x8003
    2f20:	691a      	ldr	r2, [r3, #16]
    2f22:	420a      	tst	r2, r1
    2f24:	d1fc      	bne.n	2f20 <_rtc_timer_start+0x44>
}
    2f26:	bd10      	pop	{r4, pc}
    2f28:	2000      	movs	r0, #0
    2f2a:	e7de      	b.n	2eea <_rtc_timer_start+0xe>
    2f2c:	0000a4a4 	.word	0x0000a4a4
    2f30:	000021e5 	.word	0x000021e5
    2f34:	e000e100 	.word	0xe000e100

00002f38 <_rtc_timer_stop>:
{
    2f38:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    2f3a:	4604      	mov	r4, r0
    2f3c:	b1a0      	cbz	r0, 2f68 <_rtc_timer_stop+0x30>
    2f3e:	68c0      	ldr	r0, [r0, #12]
    2f40:	3000      	adds	r0, #0
    2f42:	bf18      	it	ne
    2f44:	2001      	movne	r0, #1
    2f46:	226b      	movs	r2, #107	; 0x6b
    2f48:	4908      	ldr	r1, [pc, #32]	; (2f6c <_rtc_timer_stop+0x34>)
    2f4a:	4b09      	ldr	r3, [pc, #36]	; (2f70 <_rtc_timer_stop+0x38>)
    2f4c:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    2f4e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2f50:	8813      	ldrh	r3, [r2, #0]
    2f52:	f023 0302 	bic.w	r3, r3, #2
    2f56:	041b      	lsls	r3, r3, #16
    2f58:	0c1b      	lsrs	r3, r3, #16
    2f5a:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2f5c:	f248 0103 	movw	r1, #32771	; 0x8003
    2f60:	6913      	ldr	r3, [r2, #16]
    2f62:	420b      	tst	r3, r1
    2f64:	d1fc      	bne.n	2f60 <_rtc_timer_stop+0x28>
}
    2f66:	bd10      	pop	{r4, pc}
    2f68:	2000      	movs	r0, #0
    2f6a:	e7ec      	b.n	2f46 <_rtc_timer_stop+0xe>
    2f6c:	0000a4a4 	.word	0x0000a4a4
    2f70:	000021e5 	.word	0x000021e5

00002f74 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    2f74:	4800      	ldr	r0, [pc, #0]	; (2f78 <_rtc_get_timer+0x4>)
    2f76:	4770      	bx	lr
    2f78:	20000000 	.word	0x20000000

00002f7c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2f7c:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    2f7e:	4b08      	ldr	r3, [pc, #32]	; (2fa0 <RTC_Handler+0x24>)
    2f80:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2f82:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2f84:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    2f86:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f8a:	d007      	beq.n	2f9c <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    2f8c:	6823      	ldr	r3, [r4, #0]
    2f8e:	b10b      	cbz	r3, 2f94 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    2f90:	4620      	mov	r0, r4
    2f92:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2f94:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2f96:	f44f 7280 	mov.w	r2, #256	; 0x100
    2f9a:	819a      	strh	r2, [r3, #12]
    2f9c:	bd10      	pop	{r4, pc}
    2f9e:	bf00      	nop
    2fa0:	20000938 	.word	0x20000938

00002fa4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2fa4:	b470      	push	{r4, r5, r6}
    2fa6:	b089      	sub	sp, #36	; 0x24
    2fa8:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2faa:	466c      	mov	r4, sp
    2fac:	4d0d      	ldr	r5, [pc, #52]	; (2fe4 <_sercom_get_hardware_index+0x40>)
    2fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2fb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2fba:	9b00      	ldr	r3, [sp, #0]
    2fbc:	42b3      	cmp	r3, r6
    2fbe:	d00d      	beq.n	2fdc <_sercom_get_hardware_index+0x38>
    2fc0:	4631      	mov	r1, r6
    2fc2:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fc4:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2fc6:	f853 2b04 	ldr.w	r2, [r3], #4
    2fca:	428a      	cmp	r2, r1
    2fcc:	d007      	beq.n	2fde <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fce:	3001      	adds	r0, #1
    2fd0:	2808      	cmp	r0, #8
    2fd2:	d1f8      	bne.n	2fc6 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    2fd4:	2000      	movs	r0, #0
}
    2fd6:	b009      	add	sp, #36	; 0x24
    2fd8:	bc70      	pop	{r4, r5, r6}
    2fda:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fdc:	2000      	movs	r0, #0
			return i;
    2fde:	b2c0      	uxtb	r0, r0
    2fe0:	e7f9      	b.n	2fd6 <_sercom_get_hardware_index+0x32>
    2fe2:	bf00      	nop
    2fe4:	0000a4bc 	.word	0x0000a4bc

00002fe8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2fe8:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2fea:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2fec:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2fee:	f013 0f01 	tst.w	r3, #1
    2ff2:	d003      	beq.n	2ffc <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2ff4:	7da3      	ldrb	r3, [r4, #22]
    2ff6:	f013 0f01 	tst.w	r3, #1
    2ffa:	d112      	bne.n	3022 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2ffc:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2ffe:	f013 0f02 	tst.w	r3, #2
    3002:	d003      	beq.n	300c <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    3004:	7da3      	ldrb	r3, [r4, #22]
    3006:	f013 0f02 	tst.w	r3, #2
    300a:	d10f      	bne.n	302c <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    300c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    300e:	f013 0f04 	tst.w	r3, #4
    3012:	d015      	beq.n	3040 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    3014:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    3016:	f003 0337 	and.w	r3, r3, #55	; 0x37
    301a:	b163      	cbz	r3, 3036 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    301c:	23ff      	movs	r3, #255	; 0xff
    301e:	8363      	strh	r3, [r4, #26]
    3020:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3022:	2301      	movs	r3, #1
    3024:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    3026:	6803      	ldr	r3, [r0, #0]
    3028:	4798      	blx	r3
    302a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    302c:	2302      	movs	r3, #2
    302e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3030:	6883      	ldr	r3, [r0, #8]
    3032:	4798      	blx	r3
    3034:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    3036:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    3038:	6843      	ldr	r3, [r0, #4]
    303a:	b2c9      	uxtb	r1, r1
    303c:	4798      	blx	r3
    303e:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3040:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3042:	09db      	lsrs	r3, r3, #7
    3044:	d100      	bne.n	3048 <_sercom_usart_interrupt_handler+0x60>
    3046:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    3048:	2380      	movs	r3, #128	; 0x80
    304a:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    304c:	68c3      	ldr	r3, [r0, #12]
    304e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3050:	8b63      	ldrh	r3, [r4, #26]
    3052:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3054:	8363      	strh	r3, [r4, #26]
    3056:	e7f6      	b.n	3046 <_sercom_usart_interrupt_handler+0x5e>

00003058 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    3058:	4b11      	ldr	r3, [pc, #68]	; (30a0 <_sercom_init_irq_param+0x48>)
    305a:	4298      	cmp	r0, r3
    305c:	d011      	beq.n	3082 <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    305e:	4b11      	ldr	r3, [pc, #68]	; (30a4 <_sercom_init_irq_param+0x4c>)
    3060:	4298      	cmp	r0, r3
    3062:	d011      	beq.n	3088 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    3064:	4b10      	ldr	r3, [pc, #64]	; (30a8 <_sercom_init_irq_param+0x50>)
    3066:	4298      	cmp	r0, r3
    3068:	d011      	beq.n	308e <_sercom_init_irq_param+0x36>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM4) {
    306a:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    306e:	d011      	beq.n	3094 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    3070:	4b0e      	ldr	r3, [pc, #56]	; (30ac <_sercom_init_irq_param+0x54>)
    3072:	4298      	cmp	r0, r3
    3074:	d011      	beq.n	309a <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    3076:	4b0e      	ldr	r3, [pc, #56]	; (30b0 <_sercom_init_irq_param+0x58>)
    3078:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    307a:	bf04      	itt	eq
    307c:	4b0d      	ldreq	r3, [pc, #52]	; (30b4 <_sercom_init_irq_param+0x5c>)
    307e:	6159      	streq	r1, [r3, #20]
    3080:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    3082:	4b0c      	ldr	r3, [pc, #48]	; (30b4 <_sercom_init_irq_param+0x5c>)
    3084:	6019      	str	r1, [r3, #0]
    3086:	e7f0      	b.n	306a <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    3088:	4b0a      	ldr	r3, [pc, #40]	; (30b4 <_sercom_init_irq_param+0x5c>)
    308a:	6059      	str	r1, [r3, #4]
    308c:	e7f0      	b.n	3070 <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    308e:	4b09      	ldr	r3, [pc, #36]	; (30b4 <_sercom_init_irq_param+0x5c>)
    3090:	6099      	str	r1, [r3, #8]
    3092:	e7f0      	b.n	3076 <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    3094:	4b07      	ldr	r3, [pc, #28]	; (30b4 <_sercom_init_irq_param+0x5c>)
    3096:	60d9      	str	r1, [r3, #12]
    3098:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    309a:	4b06      	ldr	r3, [pc, #24]	; (30b4 <_sercom_init_irq_param+0x5c>)
    309c:	6119      	str	r1, [r3, #16]
    309e:	4770      	bx	lr
    30a0:	40003000 	.word	0x40003000
    30a4:	40003400 	.word	0x40003400
    30a8:	41012000 	.word	0x41012000
    30ac:	43000400 	.word	0x43000400
    30b0:	43000800 	.word	0x43000800
    30b4:	2000093c 	.word	0x2000093c

000030b8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    30b8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    30ba:	4b03      	ldr	r3, [pc, #12]	; (30c8 <_sercom_get_irq_num+0x10>)
    30bc:	4798      	blx	r3
    30be:	0080      	lsls	r0, r0, #2
    30c0:	302e      	adds	r0, #46	; 0x2e
}
    30c2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    30c6:	bd08      	pop	{r3, pc}
    30c8:	00002fa5 	.word	0x00002fa5

000030cc <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    30cc:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    30ce:	f013 0f01 	tst.w	r3, #1
    30d2:	d109      	bne.n	30e8 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    30d4:	6803      	ldr	r3, [r0, #0]
    30d6:	f043 0302 	orr.w	r3, r3, #2
    30da:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    30dc:	69c3      	ldr	r3, [r0, #28]
    30de:	f013 0f03 	tst.w	r3, #3
    30e2:	d1fb      	bne.n	30dc <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    30e4:	2000      	movs	r0, #0
    30e6:	4770      	bx	lr
		return ERR_BUSY;
    30e8:	f06f 0003 	mvn.w	r0, #3
}
    30ec:	4770      	bx	lr
	...

000030f0 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    30f0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    30f2:	4b03      	ldr	r3, [pc, #12]	; (3100 <_spi_get_tx_dma_channel+0x10>)
    30f4:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    30f6:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    30f8:	bf0c      	ite	eq
    30fa:	2008      	moveq	r0, #8
    30fc:	2000      	movne	r0, #0
    30fe:	bd08      	pop	{r3, pc}
    3100:	00002fa5 	.word	0x00002fa5

00003104 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    3104:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    3106:	4b03      	ldr	r3, [pc, #12]	; (3114 <_spi_get_rx_dma_channel+0x10>)
    3108:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    310a:	2807      	cmp	r0, #7
    310c:	bf8c      	ite	hi
    310e:	2000      	movhi	r0, #0
    3110:	2001      	movls	r0, #1
    3112:	bd08      	pop	{r3, pc}
    3114:	00002fa5 	.word	0x00002fa5

00003118 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    3118:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    311a:	6883      	ldr	r3, [r0, #8]
    311c:	689b      	ldr	r3, [r3, #8]
    311e:	b103      	cbz	r3, 3122 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    3120:	4798      	blx	r3
    3122:	bd08      	pop	{r3, pc}

00003124 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    3124:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    3126:	6883      	ldr	r3, [r0, #8]
    3128:	685b      	ldr	r3, [r3, #4]
    312a:	b103      	cbz	r3, 312e <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    312c:	4798      	blx	r3
    312e:	bd08      	pop	{r3, pc}

00003130 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    3130:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    3132:	6883      	ldr	r3, [r0, #8]
    3134:	68db      	ldr	r3, [r3, #12]
    3136:	b103      	cbz	r3, 313a <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    3138:	4798      	blx	r3
    313a:	bd08      	pop	{r3, pc}

0000313c <_usart_init>:
{
    313c:	b510      	push	{r4, lr}
    313e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3140:	4b48      	ldr	r3, [pc, #288]	; (3264 <_usart_init+0x128>)
    3142:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    3144:	2800      	cmp	r0, #0
    3146:	d06a      	beq.n	321e <_usart_init+0xe2>
    3148:	2801      	cmp	r0, #1
    314a:	d062      	beq.n	3212 <_usart_init+0xd6>
    314c:	2802      	cmp	r0, #2
    314e:	d062      	beq.n	3216 <_usart_init+0xda>
    3150:	2804      	cmp	r0, #4
    3152:	d062      	beq.n	321a <_usart_init+0xde>
    3154:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3156:	bf08      	it	eq
    3158:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    315a:	d006      	beq.n	316a <_usart_init+0x2e>
	ASSERT(false);
    315c:	f240 2276 	movw	r2, #630	; 0x276
    3160:	4941      	ldr	r1, [pc, #260]	; (3268 <_usart_init+0x12c>)
    3162:	2000      	movs	r0, #0
    3164:	4b41      	ldr	r3, [pc, #260]	; (326c <_usart_init+0x130>)
    3166:	4798      	blx	r3
	return 0;
    3168:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    316a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    316c:	f013 0f01 	tst.w	r3, #1
    3170:	d122      	bne.n	31b8 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3172:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    3176:	4a3e      	ldr	r2, [pc, #248]	; (3270 <_usart_init+0x134>)
    3178:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    317c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    317e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3182:	69e3      	ldr	r3, [r4, #28]
    3184:	f013 0f03 	tst.w	r3, #3
    3188:	d1fb      	bne.n	3182 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    318a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    318c:	f013 0f02 	tst.w	r3, #2
    3190:	d00b      	beq.n	31aa <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3192:	6823      	ldr	r3, [r4, #0]
    3194:	f023 0302 	bic.w	r3, r3, #2
    3198:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    319a:	69e3      	ldr	r3, [r4, #28]
    319c:	f013 0f03 	tst.w	r3, #3
    31a0:	d1fb      	bne.n	319a <_usart_init+0x5e>
    31a2:	69e3      	ldr	r3, [r4, #28]
    31a4:	f013 0f02 	tst.w	r3, #2
    31a8:	d1fb      	bne.n	31a2 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    31aa:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    31ae:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31b0:	69e3      	ldr	r3, [r4, #28]
    31b2:	f013 0f03 	tst.w	r3, #3
    31b6:	d1fb      	bne.n	31b0 <_usart_init+0x74>
    31b8:	69e3      	ldr	r3, [r4, #28]
    31ba:	f013 0f01 	tst.w	r3, #1
    31be:	d1fb      	bne.n	31b8 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    31c0:	460a      	mov	r2, r1
    31c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    31c6:	4b2a      	ldr	r3, [pc, #168]	; (3270 <_usart_init+0x134>)
    31c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    31cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    31ce:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31d0:	69e3      	ldr	r3, [r4, #28]
    31d2:	f013 0f03 	tst.w	r3, #3
    31d6:	d1fb      	bne.n	31d0 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    31d8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    31dc:	4924      	ldr	r1, [pc, #144]	; (3270 <_usart_init+0x134>)
    31de:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    31e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    31e4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    31e6:	69e3      	ldr	r3, [r4, #28]
    31e8:	f013 0f1f 	tst.w	r3, #31
    31ec:	d1fb      	bne.n	31e6 <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    31ee:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    31f2:	491f      	ldr	r1, [pc, #124]	; (3270 <_usart_init+0x134>)
    31f4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    31f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    31fa:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    31fc:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3200:	d10f      	bne.n	3222 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3202:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3206:	491a      	ldr	r1, [pc, #104]	; (3270 <_usart_init+0x134>)
    3208:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    320c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    320e:	81a3      	strh	r3, [r4, #12]
    3210:	e016      	b.n	3240 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3212:	2101      	movs	r1, #1
    3214:	e7a9      	b.n	316a <_usart_init+0x2e>
    3216:	2102      	movs	r1, #2
    3218:	e7a7      	b.n	316a <_usart_init+0x2e>
    321a:	2103      	movs	r1, #3
    321c:	e7a5      	b.n	316a <_usart_init+0x2e>
    321e:	2100      	movs	r1, #0
    3220:	e7a3      	b.n	316a <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3222:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3226:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    322a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    322c:	89a1      	ldrh	r1, [r4, #12]
    322e:	f360 010c 	bfi	r1, r0, #0, #13
    3232:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3234:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    3238:	89a3      	ldrh	r3, [r4, #12]
    323a:	f361 334f 	bfi	r3, r1, #13, #3
    323e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3240:	4b0b      	ldr	r3, [pc, #44]	; (3270 <_usart_init+0x134>)
    3242:	0051      	lsls	r1, r2, #1
    3244:	1888      	adds	r0, r1, r2
    3246:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    324a:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    324e:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3250:	440a      	add	r2, r1
    3252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3256:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    325a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    325e:	2000      	movs	r0, #0
    3260:	bd10      	pop	{r4, pc}
    3262:	bf00      	nop
    3264:	00002fa5 	.word	0x00002fa5
    3268:	0000a590 	.word	0x0000a590
    326c:	000021e5 	.word	0x000021e5
    3270:	0000a4bc 	.word	0x0000a4bc

00003274 <_get_i2cm_index>:
{
    3274:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3276:	4b07      	ldr	r3, [pc, #28]	; (3294 <_get_i2cm_index+0x20>)
    3278:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    327a:	2805      	cmp	r0, #5
    327c:	d008      	beq.n	3290 <_get_i2cm_index+0x1c>
	ASSERT(false);
    327e:	f240 32ed 	movw	r2, #1005	; 0x3ed
    3282:	4905      	ldr	r1, [pc, #20]	; (3298 <_get_i2cm_index+0x24>)
    3284:	2000      	movs	r0, #0
    3286:	4b05      	ldr	r3, [pc, #20]	; (329c <_get_i2cm_index+0x28>)
    3288:	4798      	blx	r3
	return -1;
    328a:	f04f 30ff 	mov.w	r0, #4294967295
}
    328e:	bd08      	pop	{r3, pc}
			return i;
    3290:	2000      	movs	r0, #0
    3292:	bd08      	pop	{r3, pc}
    3294:	00002fa5 	.word	0x00002fa5
    3298:	0000a590 	.word	0x0000a590
    329c:	000021e5 	.word	0x000021e5

000032a0 <_i2c_m_sync_init_impl>:
{
    32a0:	b538      	push	{r3, r4, r5, lr}
    32a2:	4605      	mov	r5, r0
    32a4:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    32a6:	4608      	mov	r0, r1
    32a8:	4b34      	ldr	r3, [pc, #208]	; (337c <_i2c_m_sync_init_impl+0xdc>)
    32aa:	4798      	blx	r3
    32ac:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    32ae:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    32b0:	f013 0f01 	tst.w	r3, #1
    32b4:	d123      	bne.n	32fe <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    32b6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    32ba:	4a31      	ldr	r2, [pc, #196]	; (3380 <_i2c_m_sync_init_impl+0xe0>)
    32bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    32c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    32c4:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32c8:	69e3      	ldr	r3, [r4, #28]
    32ca:	f013 0f03 	tst.w	r3, #3
    32ce:	d1fb      	bne.n	32c8 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    32d0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    32d2:	f013 0f02 	tst.w	r3, #2
    32d6:	d00b      	beq.n	32f0 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    32d8:	6823      	ldr	r3, [r4, #0]
    32da:	f023 0302 	bic.w	r3, r3, #2
    32de:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32e0:	69e3      	ldr	r3, [r4, #28]
    32e2:	f013 0f03 	tst.w	r3, #3
    32e6:	d1fb      	bne.n	32e0 <_i2c_m_sync_init_impl+0x40>
    32e8:	69e3      	ldr	r3, [r4, #28]
    32ea:	f013 0f02 	tst.w	r3, #2
    32ee:	d1fb      	bne.n	32e8 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    32f0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    32f4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32f6:	69e3      	ldr	r3, [r4, #28]
    32f8:	f013 0f03 	tst.w	r3, #3
    32fc:	d1fb      	bne.n	32f6 <_i2c_m_sync_init_impl+0x56>
    32fe:	69e3      	ldr	r3, [r4, #28]
    3300:	f013 0f01 	tst.w	r3, #1
    3304:	d1fb      	bne.n	32fe <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    3306:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    330a:	4a1d      	ldr	r2, [pc, #116]	; (3380 <_i2c_m_sync_init_impl+0xe0>)
    330c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3310:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    3314:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3316:	69e3      	ldr	r3, [r4, #28]
    3318:	f013 0f03 	tst.w	r3, #3
    331c:	d1fb      	bne.n	3316 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    331e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3322:	4917      	ldr	r1, [pc, #92]	; (3380 <_i2c_m_sync_init_impl+0xe0>)
    3324:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3328:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    332c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    332e:	69e3      	ldr	r3, [r4, #28]
    3330:	f013 0f04 	tst.w	r3, #4
    3334:	d1fb      	bne.n	332e <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    3336:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    333a:	4911      	ldr	r1, [pc, #68]	; (3380 <_i2c_m_sync_init_impl+0xe0>)
    333c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    3344:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    3346:	f3c2 6301 	ubfx	r3, r2, #24, #2
    334a:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    334c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    334e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    3352:	2b01      	cmp	r3, #1
    3354:	bf94      	ite	ls
    3356:	2300      	movls	r3, #0
    3358:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    335a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    335e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3360:	69e3      	ldr	r3, [r4, #28]
    3362:	f013 0f04 	tst.w	r3, #4
    3366:	d1fb      	bne.n	3360 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    3368:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    336c:	4b04      	ldr	r3, [pc, #16]	; (3380 <_i2c_m_sync_init_impl+0xe0>)
    336e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3372:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    3376:	81eb      	strh	r3, [r5, #14]
}
    3378:	2000      	movs	r0, #0
    337a:	bd38      	pop	{r3, r4, r5, pc}
    337c:	00003275 	.word	0x00003275
    3380:	0000a4bc 	.word	0x0000a4bc

00003384 <_sercom_i2c_m_irq_handler>:
{
    3384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3388:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    338a:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    338c:	7e26      	ldrb	r6, [r4, #24]
    338e:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    3390:	f8df 8234 	ldr.w	r8, [pc, #564]	; 35c8 <_sercom_i2c_m_irq_handler+0x244>
    3394:	f240 425f 	movw	r2, #1119	; 0x45f
    3398:	4641      	mov	r1, r8
    339a:	3000      	adds	r0, #0
    339c:	bf18      	it	ne
    339e:	2001      	movne	r0, #1
    33a0:	4f88      	ldr	r7, [pc, #544]	; (35c4 <_sercom_i2c_m_irq_handler+0x240>)
    33a2:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    33a4:	6928      	ldr	r0, [r5, #16]
    33a6:	f44f 628c 	mov.w	r2, #1120	; 0x460
    33aa:	4641      	mov	r1, r8
    33ac:	3000      	adds	r0, #0
    33ae:	bf18      	it	ne
    33b0:	2001      	movne	r0, #1
    33b2:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    33b4:	f016 0f80 	tst.w	r6, #128	; 0x80
    33b8:	f040 80f4 	bne.w	35a4 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    33bc:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    33be:	69e3      	ldr	r3, [r4, #28]
    33c0:	f013 0f04 	tst.w	r3, #4
    33c4:	d1fb      	bne.n	33be <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    33c6:	8b63      	ldrh	r3, [r4, #26]
    33c8:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    33ca:	f016 0f01 	tst.w	r6, #1
    33ce:	f000 8090 	beq.w	34f2 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    33d2:	f013 0f02 	tst.w	r3, #2
    33d6:	d022      	beq.n	341e <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    33d8:	2201      	movs	r2, #1
    33da:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    33dc:	886a      	ldrh	r2, [r5, #2]
    33de:	b292      	uxth	r2, r2
    33e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    33e4:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    33e6:	886a      	ldrh	r2, [r5, #2]
    33e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    33ec:	0412      	lsls	r2, r2, #16
    33ee:	0c12      	lsrs	r2, r2, #16
    33f0:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    33f2:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    33f6:	2b00      	cmp	r3, #0
    33f8:	bf14      	ite	ne
    33fa:	f06f 0104 	mvnne.w	r1, #4
    33fe:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3402:	886b      	ldrh	r3, [r5, #2]
    3404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3408:	041b      	lsls	r3, r3, #16
    340a:	0c1b      	lsrs	r3, r3, #16
    340c:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    340e:	696b      	ldr	r3, [r5, #20]
    3410:	2b00      	cmp	r3, #0
    3412:	f000 80c5 	beq.w	35a0 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    3416:	4628      	mov	r0, r5
    3418:	4798      	blx	r3
    341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    341e:	f013 0f04 	tst.w	r3, #4
    3422:	d124      	bne.n	346e <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    3424:	886b      	ldrh	r3, [r5, #2]
    3426:	f413 6f80 	tst.w	r3, #1024	; 0x400
    342a:	d03e      	beq.n	34aa <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    342c:	882b      	ldrh	r3, [r5, #0]
    342e:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3430:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3434:	69e3      	ldr	r3, [r4, #28]
    3436:	f013 0f04 	tst.w	r3, #4
    343a:	d1fb      	bne.n	3434 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    343c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    343e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    3442:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    3446:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3448:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    344a:	69e3      	ldr	r3, [r4, #28]
    344c:	f013 0f04 	tst.w	r3, #4
    3450:	d1fb      	bne.n	344a <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    3452:	886b      	ldrh	r3, [r5, #2]
    3454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3458:	041b      	lsls	r3, r3, #16
    345a:	0c1b      	lsrs	r3, r3, #16
    345c:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    345e:	69ab      	ldr	r3, [r5, #24]
    3460:	2b00      	cmp	r3, #0
    3462:	f000 8088 	beq.w	3576 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    3466:	4628      	mov	r0, r5
    3468:	4798      	blx	r3
    346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    346e:	686b      	ldr	r3, [r5, #4]
    3470:	2b00      	cmp	r3, #0
    3472:	dd04      	ble.n	347e <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    3474:	886b      	ldrh	r3, [r5, #2]
    3476:	b29b      	uxth	r3, r3
    3478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    347c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    347e:	886b      	ldrh	r3, [r5, #2]
    3480:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3484:	d108      	bne.n	3498 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    3486:	886b      	ldrh	r3, [r5, #2]
    3488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    348c:	041b      	lsls	r3, r3, #16
    348e:	0c1b      	lsrs	r3, r3, #16
    3490:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    3492:	f06f 0101 	mvn.w	r1, #1
    3496:	e7b4      	b.n	3402 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3498:	6863      	ldr	r3, [r4, #4]
    349a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    349e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34a0:	69e3      	ldr	r3, [r4, #28]
    34a2:	f013 0f04 	tst.w	r3, #4
    34a6:	d1fb      	bne.n	34a0 <_sercom_i2c_m_irq_handler+0x11c>
    34a8:	e7ed      	b.n	3486 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    34aa:	686b      	ldr	r3, [r5, #4]
    34ac:	b99b      	cbnz	r3, 34d6 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    34ae:	886b      	ldrh	r3, [r5, #2]
    34b0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    34b4:	d106      	bne.n	34c4 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    34b6:	886b      	ldrh	r3, [r5, #2]
    34b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    34bc:	041b      	lsls	r3, r3, #16
    34be:	0c1b      	lsrs	r3, r3, #16
    34c0:	806b      	strh	r3, [r5, #2]
    34c2:	e7cc      	b.n	345e <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    34c4:	6863      	ldr	r3, [r4, #4]
    34c6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    34ca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34cc:	69e3      	ldr	r3, [r4, #28]
    34ce:	f013 0f04 	tst.w	r3, #4
    34d2:	d1fb      	bne.n	34cc <_sercom_i2c_m_irq_handler+0x148>
    34d4:	e7ef      	b.n	34b6 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    34d6:	68ab      	ldr	r3, [r5, #8]
    34d8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    34da:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    34dc:	69e3      	ldr	r3, [r4, #28]
    34de:	f013 0f04 	tst.w	r3, #4
    34e2:	d1fb      	bne.n	34dc <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    34e4:	68ab      	ldr	r3, [r5, #8]
    34e6:	3301      	adds	r3, #1
    34e8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    34ea:	686b      	ldr	r3, [r5, #4]
    34ec:	3b01      	subs	r3, #1
    34ee:	606b      	str	r3, [r5, #4]
    34f0:	e7b5      	b.n	345e <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    34f2:	f016 0f02 	tst.w	r6, #2
    34f6:	d041      	beq.n	357c <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    34f8:	686a      	ldr	r2, [r5, #4]
    34fa:	2a00      	cmp	r2, #0
    34fc:	d036      	beq.n	356c <_sercom_i2c_m_irq_handler+0x1e8>
    34fe:	f013 0f04 	tst.w	r3, #4
    3502:	d133      	bne.n	356c <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    3504:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    3508:	3a01      	subs	r2, #1
    350a:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    350c:	2a00      	cmp	r2, #0
    350e:	d137      	bne.n	3580 <_sercom_i2c_m_irq_handler+0x1fc>
    3510:	2900      	cmp	r1, #0
    3512:	d039      	beq.n	3588 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    3514:	886b      	ldrh	r3, [r5, #2]
    3516:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    351a:	d116      	bne.n	354a <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    351c:	886b      	ldrh	r3, [r5, #2]
    351e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3522:	041b      	lsls	r3, r3, #16
    3524:	0c1b      	lsrs	r3, r3, #16
    3526:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3528:	68aa      	ldr	r2, [r5, #8]
    352a:	1c53      	adds	r3, r2, #1
    352c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    352e:	69e3      	ldr	r3, [r4, #28]
    3530:	f013 0f04 	tst.w	r3, #4
    3534:	d1fb      	bne.n	352e <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    3536:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3538:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    353a:	2302      	movs	r3, #2
    353c:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    353e:	69eb      	ldr	r3, [r5, #28]
    3540:	b1e3      	cbz	r3, 357c <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    3542:	4628      	mov	r0, r5
    3544:	4798      	blx	r3
    3546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    354a:	6863      	ldr	r3, [r4, #4]
    354c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3550:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3552:	69e3      	ldr	r3, [r4, #28]
    3554:	f013 0f04 	tst.w	r3, #4
    3558:	d1fb      	bne.n	3552 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    355a:	6863      	ldr	r3, [r4, #4]
    355c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3560:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3562:	69e3      	ldr	r3, [r4, #28]
    3564:	f013 0f04 	tst.w	r3, #4
    3568:	d1fb      	bne.n	3562 <_sercom_i2c_m_irq_handler+0x1de>
    356a:	e7d7      	b.n	351c <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    356c:	2302      	movs	r3, #2
    356e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    3570:	f06f 0101 	mvn.w	r1, #1
    3574:	e745      	b.n	3402 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    3576:	f016 0f02 	tst.w	r6, #2
    357a:	d1e0      	bne.n	353e <_sercom_i2c_m_irq_handler+0x1ba>
    357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3580:	2a01      	cmp	r2, #1
    3582:	d1d1      	bne.n	3528 <_sercom_i2c_m_irq_handler+0x1a4>
    3584:	2900      	cmp	r1, #0
    3586:	d0cf      	beq.n	3528 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3588:	6863      	ldr	r3, [r4, #4]
    358a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    358e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3590:	69e3      	ldr	r3, [r4, #28]
    3592:	f013 0f04 	tst.w	r3, #4
    3596:	d1fb      	bne.n	3590 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    3598:	686b      	ldr	r3, [r5, #4]
    359a:	2b00      	cmp	r3, #0
    359c:	d0ba      	beq.n	3514 <_sercom_i2c_m_irq_handler+0x190>
    359e:	e7c3      	b.n	3528 <_sercom_i2c_m_irq_handler+0x1a4>
    35a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    35a4:	886b      	ldrh	r3, [r5, #2]
    35a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    35aa:	041b      	lsls	r3, r3, #16
    35ac:	0c1b      	lsrs	r3, r3, #16
    35ae:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    35b0:	696b      	ldr	r3, [r5, #20]
    35b2:	2b00      	cmp	r3, #0
    35b4:	d0e2      	beq.n	357c <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    35b6:	f06f 0104 	mvn.w	r1, #4
    35ba:	4628      	mov	r0, r5
    35bc:	4798      	blx	r3
    35be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35c2:	bf00      	nop
    35c4:	000021e5 	.word	0x000021e5
    35c8:	0000a590 	.word	0x0000a590

000035cc <_usart_async_init>:
{
    35cc:	b570      	push	{r4, r5, r6, lr}
    35ce:	460d      	mov	r5, r1
	ASSERT(device);
    35d0:	4606      	mov	r6, r0
    35d2:	22d6      	movs	r2, #214	; 0xd6
    35d4:	4917      	ldr	r1, [pc, #92]	; (3634 <_usart_async_init+0x68>)
    35d6:	3000      	adds	r0, #0
    35d8:	bf18      	it	ne
    35da:	2001      	movne	r0, #1
    35dc:	4b16      	ldr	r3, [pc, #88]	; (3638 <_usart_async_init+0x6c>)
    35de:	4798      	blx	r3
	init_status = _usart_init(hw);
    35e0:	4628      	mov	r0, r5
    35e2:	4b16      	ldr	r3, [pc, #88]	; (363c <_usart_async_init+0x70>)
    35e4:	4798      	blx	r3
	if (init_status) {
    35e6:	4604      	mov	r4, r0
    35e8:	b108      	cbz	r0, 35ee <_usart_async_init+0x22>
}
    35ea:	4620      	mov	r0, r4
    35ec:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    35ee:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    35f0:	4631      	mov	r1, r6
    35f2:	4628      	mov	r0, r5
    35f4:	4b12      	ldr	r3, [pc, #72]	; (3640 <_usart_async_init+0x74>)
    35f6:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    35f8:	4628      	mov	r0, r5
    35fa:	4b12      	ldr	r3, [pc, #72]	; (3644 <_usart_async_init+0x78>)
    35fc:	4798      	blx	r3
    35fe:	1d01      	adds	r1, r0, #4
    3600:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3602:	2501      	movs	r5, #1
    3604:	f000 021f 	and.w	r2, r0, #31
    3608:	fa05 f202 	lsl.w	r2, r5, r2
    360c:	0943      	lsrs	r3, r0, #5
    360e:	009b      	lsls	r3, r3, #2
    3610:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3614:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    361c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3620:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3624:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3628:	601a      	str	r2, [r3, #0]
		irq++;
    362a:	3001      	adds	r0, #1
    362c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    362e:	4281      	cmp	r1, r0
    3630:	d1e8      	bne.n	3604 <_usart_async_init+0x38>
    3632:	e7da      	b.n	35ea <_usart_async_init+0x1e>
    3634:	0000a590 	.word	0x0000a590
    3638:	000021e5 	.word	0x000021e5
    363c:	0000313d 	.word	0x0000313d
    3640:	00003059 	.word	0x00003059
    3644:	000030b9 	.word	0x000030b9

00003648 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3648:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    364a:	6813      	ldr	r3, [r2, #0]
    364c:	f043 0302 	orr.w	r3, r3, #2
    3650:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3652:	69d3      	ldr	r3, [r2, #28]
    3654:	f013 0f03 	tst.w	r3, #3
    3658:	d1fb      	bne.n	3652 <_usart_async_enable+0xa>
}
    365a:	4770      	bx	lr

0000365c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    365c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    365e:	6299      	str	r1, [r3, #40]	; 0x28
    3660:	4770      	bx	lr

00003662 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3662:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3664:	2201      	movs	r2, #1
    3666:	759a      	strb	r2, [r3, #22]
    3668:	4770      	bx	lr

0000366a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    366a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    366c:	2202      	movs	r2, #2
    366e:	759a      	strb	r2, [r3, #22]
    3670:	4770      	bx	lr
	...

00003674 <_usart_async_set_irq_state>:
{
    3674:	b570      	push	{r4, r5, r6, lr}
    3676:	460c      	mov	r4, r1
    3678:	4616      	mov	r6, r2
	ASSERT(device);
    367a:	4605      	mov	r5, r0
    367c:	f240 2236 	movw	r2, #566	; 0x236
    3680:	4915      	ldr	r1, [pc, #84]	; (36d8 <_usart_async_set_irq_state+0x64>)
    3682:	3000      	adds	r0, #0
    3684:	bf18      	it	ne
    3686:	2001      	movne	r0, #1
    3688:	4b14      	ldr	r3, [pc, #80]	; (36dc <_usart_async_set_irq_state+0x68>)
    368a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    368c:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    3690:	d10d      	bne.n	36ae <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    3692:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3694:	b92e      	cbnz	r6, 36a2 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3696:	2201      	movs	r2, #1
    3698:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    369a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    369c:	2202      	movs	r2, #2
    369e:	751a      	strb	r2, [r3, #20]
    36a0:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    36a2:	2201      	movs	r2, #1
    36a4:	759a      	strb	r2, [r3, #22]
    36a6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    36a8:	2202      	movs	r2, #2
    36aa:	759a      	strb	r2, [r3, #22]
    36ac:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    36ae:	2c01      	cmp	r4, #1
    36b0:	d002      	beq.n	36b8 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    36b2:	2c03      	cmp	r4, #3
    36b4:	d008      	beq.n	36c8 <_usart_async_set_irq_state+0x54>
    36b6:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    36b8:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    36ba:	b916      	cbnz	r6, 36c2 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    36bc:	2204      	movs	r2, #4
    36be:	751a      	strb	r2, [r3, #20]
    36c0:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    36c2:	2204      	movs	r2, #4
    36c4:	759a      	strb	r2, [r3, #22]
    36c6:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    36c8:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    36ca:	b116      	cbz	r6, 36d2 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    36cc:	2280      	movs	r2, #128	; 0x80
    36ce:	759a      	strb	r2, [r3, #22]
}
    36d0:	e7f1      	b.n	36b6 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    36d2:	2280      	movs	r2, #128	; 0x80
    36d4:	751a      	strb	r2, [r3, #20]
    36d6:	bd70      	pop	{r4, r5, r6, pc}
    36d8:	0000a590 	.word	0x0000a590
    36dc:	000021e5 	.word	0x000021e5

000036e0 <_i2c_m_async_init>:
{
    36e0:	b570      	push	{r4, r5, r6, lr}
    36e2:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    36e4:	4606      	mov	r6, r0
    36e6:	f240 42d2 	movw	r2, #1234	; 0x4d2
    36ea:	4918      	ldr	r1, [pc, #96]	; (374c <_i2c_m_async_init+0x6c>)
    36ec:	3000      	adds	r0, #0
    36ee:	bf18      	it	ne
    36f0:	2001      	movne	r0, #1
    36f2:	4b17      	ldr	r3, [pc, #92]	; (3750 <_i2c_m_async_init+0x70>)
    36f4:	4798      	blx	r3
	i2c_dev->hw = hw;
    36f6:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    36f8:	4629      	mov	r1, r5
    36fa:	4630      	mov	r0, r6
    36fc:	4b15      	ldr	r3, [pc, #84]	; (3754 <_i2c_m_async_init+0x74>)
    36fe:	4798      	blx	r3
	if (init_status) {
    3700:	4604      	mov	r4, r0
    3702:	b108      	cbz	r0, 3708 <_i2c_m_async_init+0x28>
}
    3704:	4620      	mov	r0, r4
    3706:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    3708:	4631      	mov	r1, r6
    370a:	4628      	mov	r0, r5
    370c:	4b12      	ldr	r3, [pc, #72]	; (3758 <_i2c_m_async_init+0x78>)
    370e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    3710:	4628      	mov	r0, r5
    3712:	4b12      	ldr	r3, [pc, #72]	; (375c <_i2c_m_async_init+0x7c>)
    3714:	4798      	blx	r3
    3716:	1d01      	adds	r1, r0, #4
    3718:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    371a:	2501      	movs	r5, #1
    371c:	f000 021f 	and.w	r2, r0, #31
    3720:	fa05 f202 	lsl.w	r2, r5, r2
    3724:	0943      	lsrs	r3, r0, #5
    3726:	009b      	lsls	r3, r3, #2
    3728:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    372c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3738:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    373c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3740:	601a      	str	r2, [r3, #0]
		irq++;
    3742:	3001      	adds	r0, #1
    3744:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3746:	4281      	cmp	r1, r0
    3748:	d1e8      	bne.n	371c <_i2c_m_async_init+0x3c>
    374a:	e7db      	b.n	3704 <_i2c_m_async_init+0x24>
    374c:	0000a590 	.word	0x0000a590
    3750:	000021e5 	.word	0x000021e5
    3754:	000032a1 	.word	0x000032a1
    3758:	00003059 	.word	0x00003059
    375c:	000030b9 	.word	0x000030b9

00003760 <_i2c_m_async_transfer>:
{
    3760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3764:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    3766:	4605      	mov	r5, r0
    3768:	f110 0800 	adds.w	r8, r0, #0
    376c:	bf18      	it	ne
    376e:	f04f 0801 	movne.w	r8, #1
    3772:	4f45      	ldr	r7, [pc, #276]	; (3888 <_i2c_m_async_transfer+0x128>)
    3774:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    3778:	4639      	mov	r1, r7
    377a:	4640      	mov	r0, r8
    377c:	4e43      	ldr	r6, [pc, #268]	; (388c <_i2c_m_async_transfer+0x12c>)
    377e:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    3780:	6928      	ldr	r0, [r5, #16]
    3782:	f240 5229 	movw	r2, #1321	; 0x529
    3786:	4639      	mov	r1, r7
    3788:	3000      	adds	r0, #0
    378a:	bf18      	it	ne
    378c:	2001      	movne	r0, #1
    378e:	47b0      	blx	r6
	ASSERT(msg);
    3790:	f240 522a 	movw	r2, #1322	; 0x52a
    3794:	4639      	mov	r1, r7
    3796:	1c20      	adds	r0, r4, #0
    3798:	bf18      	it	ne
    379a:	2001      	movne	r0, #1
    379c:	47b0      	blx	r6
	if (msg->len == 0) {
    379e:	6860      	ldr	r0, [r4, #4]
    37a0:	2800      	cmp	r0, #0
    37a2:	d06f      	beq.n	3884 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    37a4:	886b      	ldrh	r3, [r5, #2]
    37a6:	f413 7f80 	tst.w	r3, #256	; 0x100
    37aa:	d169      	bne.n	3880 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    37ac:	8863      	ldrh	r3, [r4, #2]
    37ae:	b29b      	uxth	r3, r3
    37b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37b4:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    37b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    37ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    37be:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    37c0:	6853      	ldr	r3, [r2, #4]
    37c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37c6:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37c8:	69d3      	ldr	r3, [r2, #28]
    37ca:	f013 0f04 	tst.w	r3, #4
    37ce:	d1fb      	bne.n	37c8 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    37d0:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    37d2:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    37d4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    37d8:	492b      	ldr	r1, [pc, #172]	; (3888 <_i2c_m_async_transfer+0x128>)
    37da:	4640      	mov	r0, r8
    37dc:	4b2b      	ldr	r3, [pc, #172]	; (388c <_i2c_m_async_transfer+0x12c>)
    37de:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    37e0:	686b      	ldr	r3, [r5, #4]
    37e2:	2b01      	cmp	r3, #1
    37e4:	d02a      	beq.n	383c <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    37e6:	6863      	ldr	r3, [r4, #4]
    37e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    37ec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37ee:	69e3      	ldr	r3, [r4, #28]
    37f0:	f013 0f04 	tst.w	r3, #4
    37f4:	d1fb      	bne.n	37ee <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    37f6:	882b      	ldrh	r3, [r5, #0]
    37f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    37fc:	d02a      	beq.n	3854 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    37fe:	886a      	ldrh	r2, [r5, #2]
    3800:	f012 0f01 	tst.w	r2, #1
    3804:	d004      	beq.n	3810 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    3806:	886a      	ldrh	r2, [r5, #2]
    3808:	b292      	uxth	r2, r2
    380a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    380e:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3810:	f240 72fe 	movw	r2, #2046	; 0x7fe
    3814:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    3818:	69e3      	ldr	r3, [r4, #28]
    381a:	f013 0f04 	tst.w	r3, #4
    381e:	d1fb      	bne.n	3818 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3820:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    382a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    382c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    382e:	69e3      	ldr	r3, [r4, #28]
    3830:	f013 0f04 	tst.w	r3, #4
    3834:	d1fb      	bne.n	382e <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    3836:	2000      	movs	r0, #0
    3838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    383c:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    3840:	d0d1      	beq.n	37e6 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3842:	6863      	ldr	r3, [r4, #4]
    3844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3848:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    384a:	69e3      	ldr	r3, [r4, #28]
    384c:	f013 0f04 	tst.w	r3, #4
    3850:	d1fb      	bne.n	384a <_i2c_m_async_transfer+0xea>
    3852:	e7d0      	b.n	37f6 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3854:	8869      	ldrh	r1, [r5, #2]
    3856:	005a      	lsls	r2, r3, #1
    3858:	b2d2      	uxtb	r2, r2
    385a:	f001 0301 	and.w	r3, r1, #1
    385e:	431a      	orrs	r2, r3
    3860:	69e3      	ldr	r3, [r4, #28]
    3862:	f013 0f04 	tst.w	r3, #4
    3866:	d1fb      	bne.n	3860 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3868:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    386a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    386e:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3870:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3872:	69e3      	ldr	r3, [r4, #28]
    3874:	f013 0f04 	tst.w	r3, #4
    3878:	d1fb      	bne.n	3872 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    387a:	2000      	movs	r0, #0
    387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    3880:	f06f 0003 	mvn.w	r0, #3
}
    3884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3888:	0000a590 	.word	0x0000a590
    388c:	000021e5 	.word	0x000021e5

00003890 <_i2c_m_async_register_callback>:
	switch (type) {
    3890:	2901      	cmp	r1, #1
    3892:	d006      	beq.n	38a2 <_i2c_m_async_register_callback+0x12>
    3894:	b119      	cbz	r1, 389e <_i2c_m_async_register_callback+0xe>
    3896:	2902      	cmp	r1, #2
    3898:	d005      	beq.n	38a6 <_i2c_m_async_register_callback+0x16>
}
    389a:	2000      	movs	r0, #0
    389c:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    389e:	6142      	str	r2, [r0, #20]
		break;
    38a0:	e7fb      	b.n	389a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    38a2:	6182      	str	r2, [r0, #24]
		break;
    38a4:	e7f9      	b.n	389a <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    38a6:	61c2      	str	r2, [r0, #28]
		break;
    38a8:	e7f7      	b.n	389a <_i2c_m_async_register_callback+0xa>
	...

000038ac <SERCOM0_0_Handler>:
{
    38ac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38ae:	4b02      	ldr	r3, [pc, #8]	; (38b8 <SERCOM0_0_Handler+0xc>)
    38b0:	6818      	ldr	r0, [r3, #0]
    38b2:	4b02      	ldr	r3, [pc, #8]	; (38bc <SERCOM0_0_Handler+0x10>)
    38b4:	4798      	blx	r3
    38b6:	bd08      	pop	{r3, pc}
    38b8:	2000093c 	.word	0x2000093c
    38bc:	00002fe9 	.word	0x00002fe9

000038c0 <SERCOM0_1_Handler>:
{
    38c0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38c2:	4b02      	ldr	r3, [pc, #8]	; (38cc <SERCOM0_1_Handler+0xc>)
    38c4:	6818      	ldr	r0, [r3, #0]
    38c6:	4b02      	ldr	r3, [pc, #8]	; (38d0 <SERCOM0_1_Handler+0x10>)
    38c8:	4798      	blx	r3
    38ca:	bd08      	pop	{r3, pc}
    38cc:	2000093c 	.word	0x2000093c
    38d0:	00002fe9 	.word	0x00002fe9

000038d4 <SERCOM0_2_Handler>:
{
    38d4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38d6:	4b02      	ldr	r3, [pc, #8]	; (38e0 <SERCOM0_2_Handler+0xc>)
    38d8:	6818      	ldr	r0, [r3, #0]
    38da:	4b02      	ldr	r3, [pc, #8]	; (38e4 <SERCOM0_2_Handler+0x10>)
    38dc:	4798      	blx	r3
    38de:	bd08      	pop	{r3, pc}
    38e0:	2000093c 	.word	0x2000093c
    38e4:	00002fe9 	.word	0x00002fe9

000038e8 <SERCOM0_3_Handler>:
{
    38e8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    38ea:	4b02      	ldr	r3, [pc, #8]	; (38f4 <SERCOM0_3_Handler+0xc>)
    38ec:	6818      	ldr	r0, [r3, #0]
    38ee:	4b02      	ldr	r3, [pc, #8]	; (38f8 <SERCOM0_3_Handler+0x10>)
    38f0:	4798      	blx	r3
    38f2:	bd08      	pop	{r3, pc}
    38f4:	2000093c 	.word	0x2000093c
    38f8:	00002fe9 	.word	0x00002fe9

000038fc <SERCOM1_0_Handler>:
{
    38fc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    38fe:	4b02      	ldr	r3, [pc, #8]	; (3908 <SERCOM1_0_Handler+0xc>)
    3900:	6858      	ldr	r0, [r3, #4]
    3902:	4b02      	ldr	r3, [pc, #8]	; (390c <SERCOM1_0_Handler+0x10>)
    3904:	4798      	blx	r3
    3906:	bd08      	pop	{r3, pc}
    3908:	2000093c 	.word	0x2000093c
    390c:	00002fe9 	.word	0x00002fe9

00003910 <SERCOM1_1_Handler>:
{
    3910:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3912:	4b02      	ldr	r3, [pc, #8]	; (391c <SERCOM1_1_Handler+0xc>)
    3914:	6858      	ldr	r0, [r3, #4]
    3916:	4b02      	ldr	r3, [pc, #8]	; (3920 <SERCOM1_1_Handler+0x10>)
    3918:	4798      	blx	r3
    391a:	bd08      	pop	{r3, pc}
    391c:	2000093c 	.word	0x2000093c
    3920:	00002fe9 	.word	0x00002fe9

00003924 <SERCOM1_2_Handler>:
{
    3924:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3926:	4b02      	ldr	r3, [pc, #8]	; (3930 <SERCOM1_2_Handler+0xc>)
    3928:	6858      	ldr	r0, [r3, #4]
    392a:	4b02      	ldr	r3, [pc, #8]	; (3934 <SERCOM1_2_Handler+0x10>)
    392c:	4798      	blx	r3
    392e:	bd08      	pop	{r3, pc}
    3930:	2000093c 	.word	0x2000093c
    3934:	00002fe9 	.word	0x00002fe9

00003938 <SERCOM1_3_Handler>:
{
    3938:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    393a:	4b02      	ldr	r3, [pc, #8]	; (3944 <SERCOM1_3_Handler+0xc>)
    393c:	6858      	ldr	r0, [r3, #4]
    393e:	4b02      	ldr	r3, [pc, #8]	; (3948 <SERCOM1_3_Handler+0x10>)
    3940:	4798      	blx	r3
    3942:	bd08      	pop	{r3, pc}
    3944:	2000093c 	.word	0x2000093c
    3948:	00002fe9 	.word	0x00002fe9

0000394c <SERCOM2_0_Handler>:
{
    394c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    394e:	4b02      	ldr	r3, [pc, #8]	; (3958 <SERCOM2_0_Handler+0xc>)
    3950:	6898      	ldr	r0, [r3, #8]
    3952:	4b02      	ldr	r3, [pc, #8]	; (395c <SERCOM2_0_Handler+0x10>)
    3954:	4798      	blx	r3
    3956:	bd08      	pop	{r3, pc}
    3958:	2000093c 	.word	0x2000093c
    395c:	00002fe9 	.word	0x00002fe9

00003960 <SERCOM2_1_Handler>:
{
    3960:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3962:	4b02      	ldr	r3, [pc, #8]	; (396c <SERCOM2_1_Handler+0xc>)
    3964:	6898      	ldr	r0, [r3, #8]
    3966:	4b02      	ldr	r3, [pc, #8]	; (3970 <SERCOM2_1_Handler+0x10>)
    3968:	4798      	blx	r3
    396a:	bd08      	pop	{r3, pc}
    396c:	2000093c 	.word	0x2000093c
    3970:	00002fe9 	.word	0x00002fe9

00003974 <SERCOM2_2_Handler>:
{
    3974:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3976:	4b02      	ldr	r3, [pc, #8]	; (3980 <SERCOM2_2_Handler+0xc>)
    3978:	6898      	ldr	r0, [r3, #8]
    397a:	4b02      	ldr	r3, [pc, #8]	; (3984 <SERCOM2_2_Handler+0x10>)
    397c:	4798      	blx	r3
    397e:	bd08      	pop	{r3, pc}
    3980:	2000093c 	.word	0x2000093c
    3984:	00002fe9 	.word	0x00002fe9

00003988 <SERCOM2_3_Handler>:
{
    3988:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    398a:	4b02      	ldr	r3, [pc, #8]	; (3994 <SERCOM2_3_Handler+0xc>)
    398c:	6898      	ldr	r0, [r3, #8]
    398e:	4b02      	ldr	r3, [pc, #8]	; (3998 <SERCOM2_3_Handler+0x10>)
    3990:	4798      	blx	r3
    3992:	bd08      	pop	{r3, pc}
    3994:	2000093c 	.word	0x2000093c
    3998:	00002fe9 	.word	0x00002fe9

0000399c <SERCOM4_0_Handler>:
{
    399c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    399e:	4b02      	ldr	r3, [pc, #8]	; (39a8 <SERCOM4_0_Handler+0xc>)
    39a0:	68d8      	ldr	r0, [r3, #12]
    39a2:	4b02      	ldr	r3, [pc, #8]	; (39ac <SERCOM4_0_Handler+0x10>)
    39a4:	4798      	blx	r3
    39a6:	bd08      	pop	{r3, pc}
    39a8:	2000093c 	.word	0x2000093c
    39ac:	00002fe9 	.word	0x00002fe9

000039b0 <SERCOM4_1_Handler>:
{
    39b0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39b2:	4b02      	ldr	r3, [pc, #8]	; (39bc <SERCOM4_1_Handler+0xc>)
    39b4:	68d8      	ldr	r0, [r3, #12]
    39b6:	4b02      	ldr	r3, [pc, #8]	; (39c0 <SERCOM4_1_Handler+0x10>)
    39b8:	4798      	blx	r3
    39ba:	bd08      	pop	{r3, pc}
    39bc:	2000093c 	.word	0x2000093c
    39c0:	00002fe9 	.word	0x00002fe9

000039c4 <SERCOM4_2_Handler>:
{
    39c4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39c6:	4b02      	ldr	r3, [pc, #8]	; (39d0 <SERCOM4_2_Handler+0xc>)
    39c8:	68d8      	ldr	r0, [r3, #12]
    39ca:	4b02      	ldr	r3, [pc, #8]	; (39d4 <SERCOM4_2_Handler+0x10>)
    39cc:	4798      	blx	r3
    39ce:	bd08      	pop	{r3, pc}
    39d0:	2000093c 	.word	0x2000093c
    39d4:	00002fe9 	.word	0x00002fe9

000039d8 <SERCOM4_3_Handler>:
{
    39d8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    39da:	4b02      	ldr	r3, [pc, #8]	; (39e4 <SERCOM4_3_Handler+0xc>)
    39dc:	68d8      	ldr	r0, [r3, #12]
    39de:	4b02      	ldr	r3, [pc, #8]	; (39e8 <SERCOM4_3_Handler+0x10>)
    39e0:	4798      	blx	r3
    39e2:	bd08      	pop	{r3, pc}
    39e4:	2000093c 	.word	0x2000093c
    39e8:	00002fe9 	.word	0x00002fe9

000039ec <SERCOM5_0_Handler>:
{
    39ec:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    39ee:	4b02      	ldr	r3, [pc, #8]	; (39f8 <SERCOM5_0_Handler+0xc>)
    39f0:	6918      	ldr	r0, [r3, #16]
    39f2:	4b02      	ldr	r3, [pc, #8]	; (39fc <SERCOM5_0_Handler+0x10>)
    39f4:	4798      	blx	r3
    39f6:	bd08      	pop	{r3, pc}
    39f8:	2000093c 	.word	0x2000093c
    39fc:	00003385 	.word	0x00003385

00003a00 <SERCOM5_1_Handler>:
{
    3a00:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3a02:	4b02      	ldr	r3, [pc, #8]	; (3a0c <SERCOM5_1_Handler+0xc>)
    3a04:	6918      	ldr	r0, [r3, #16]
    3a06:	4b02      	ldr	r3, [pc, #8]	; (3a10 <SERCOM5_1_Handler+0x10>)
    3a08:	4798      	blx	r3
    3a0a:	bd08      	pop	{r3, pc}
    3a0c:	2000093c 	.word	0x2000093c
    3a10:	00003385 	.word	0x00003385

00003a14 <SERCOM5_2_Handler>:
{
    3a14:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3a16:	4b02      	ldr	r3, [pc, #8]	; (3a20 <SERCOM5_2_Handler+0xc>)
    3a18:	6918      	ldr	r0, [r3, #16]
    3a1a:	4b02      	ldr	r3, [pc, #8]	; (3a24 <SERCOM5_2_Handler+0x10>)
    3a1c:	4798      	blx	r3
    3a1e:	bd08      	pop	{r3, pc}
    3a20:	2000093c 	.word	0x2000093c
    3a24:	00003385 	.word	0x00003385

00003a28 <SERCOM5_3_Handler>:
{
    3a28:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3a2a:	4b02      	ldr	r3, [pc, #8]	; (3a34 <SERCOM5_3_Handler+0xc>)
    3a2c:	6918      	ldr	r0, [r3, #16]
    3a2e:	4b02      	ldr	r3, [pc, #8]	; (3a38 <SERCOM5_3_Handler+0x10>)
    3a30:	4798      	blx	r3
    3a32:	bd08      	pop	{r3, pc}
    3a34:	2000093c 	.word	0x2000093c
    3a38:	00003385 	.word	0x00003385

00003a3c <SERCOM6_0_Handler>:
{
    3a3c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a3e:	4b02      	ldr	r3, [pc, #8]	; (3a48 <SERCOM6_0_Handler+0xc>)
    3a40:	6958      	ldr	r0, [r3, #20]
    3a42:	4b02      	ldr	r3, [pc, #8]	; (3a4c <SERCOM6_0_Handler+0x10>)
    3a44:	4798      	blx	r3
    3a46:	bd08      	pop	{r3, pc}
    3a48:	2000093c 	.word	0x2000093c
    3a4c:	00002fe9 	.word	0x00002fe9

00003a50 <SERCOM6_1_Handler>:
{
    3a50:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a52:	4b02      	ldr	r3, [pc, #8]	; (3a5c <SERCOM6_1_Handler+0xc>)
    3a54:	6958      	ldr	r0, [r3, #20]
    3a56:	4b02      	ldr	r3, [pc, #8]	; (3a60 <SERCOM6_1_Handler+0x10>)
    3a58:	4798      	blx	r3
    3a5a:	bd08      	pop	{r3, pc}
    3a5c:	2000093c 	.word	0x2000093c
    3a60:	00002fe9 	.word	0x00002fe9

00003a64 <SERCOM6_2_Handler>:
{
    3a64:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a66:	4b02      	ldr	r3, [pc, #8]	; (3a70 <SERCOM6_2_Handler+0xc>)
    3a68:	6958      	ldr	r0, [r3, #20]
    3a6a:	4b02      	ldr	r3, [pc, #8]	; (3a74 <SERCOM6_2_Handler+0x10>)
    3a6c:	4798      	blx	r3
    3a6e:	bd08      	pop	{r3, pc}
    3a70:	2000093c 	.word	0x2000093c
    3a74:	00002fe9 	.word	0x00002fe9

00003a78 <SERCOM6_3_Handler>:
{
    3a78:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3a7a:	4b02      	ldr	r3, [pc, #8]	; (3a84 <SERCOM6_3_Handler+0xc>)
    3a7c:	6958      	ldr	r0, [r3, #20]
    3a7e:	4b02      	ldr	r3, [pc, #8]	; (3a88 <SERCOM6_3_Handler+0x10>)
    3a80:	4798      	blx	r3
    3a82:	bd08      	pop	{r3, pc}
    3a84:	2000093c 	.word	0x2000093c
    3a88:	00002fe9 	.word	0x00002fe9

00003a8c <_spi_m_sync_init>:
{
    3a8c:	b570      	push	{r4, r5, r6, lr}
    3a8e:	4606      	mov	r6, r0
    3a90:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3a92:	4608      	mov	r0, r1
    3a94:	4b5d      	ldr	r3, [pc, #372]	; (3c0c <_spi_m_sync_init+0x180>)
    3a96:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3a98:	2803      	cmp	r0, #3
    3a9a:	d00c      	beq.n	3ab6 <_spi_m_sync_init+0x2a>
    3a9c:	2807      	cmp	r0, #7
    3a9e:	bf08      	it	eq
    3aa0:	2301      	moveq	r3, #1
    3aa2:	d009      	beq.n	3ab8 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    3aa4:	2e00      	cmp	r6, #0
    3aa6:	f000 809f 	beq.w	3be8 <_spi_m_sync_init+0x15c>
    3aaa:	2c00      	cmp	r4, #0
    3aac:	f040 80a5 	bne.w	3bfa <_spi_m_sync_init+0x16e>
	return NULL;
    3ab0:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    3ab2:	2000      	movs	r0, #0
    3ab4:	e009      	b.n	3aca <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    3ab6:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3ab8:	4d55      	ldr	r5, [pc, #340]	; (3c10 <_spi_m_sync_init+0x184>)
    3aba:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    3abe:	441d      	add	r5, r3
	ASSERT(dev && hw);
    3ac0:	2e00      	cmp	r6, #0
    3ac2:	d0f6      	beq.n	3ab2 <_spi_m_sync_init+0x26>
    3ac4:	2001      	movs	r0, #1
    3ac6:	2c00      	cmp	r4, #0
    3ac8:	d0f3      	beq.n	3ab2 <_spi_m_sync_init+0x26>
    3aca:	f640 2254 	movw	r2, #2644	; 0xa54
    3ace:	4951      	ldr	r1, [pc, #324]	; (3c14 <_spi_m_sync_init+0x188>)
    3ad0:	4b51      	ldr	r3, [pc, #324]	; (3c18 <_spi_m_sync_init+0x18c>)
    3ad2:	4798      	blx	r3
	if (regs == NULL) {
    3ad4:	2d00      	cmp	r5, #0
    3ad6:	f000 8084 	beq.w	3be2 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3ada:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3adc:	f013 0f01 	tst.w	r3, #1
    3ae0:	d11d      	bne.n	3b1e <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3ae2:	682b      	ldr	r3, [r5, #0]
    3ae4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ae8:	69e3      	ldr	r3, [r4, #28]
    3aea:	f013 0f03 	tst.w	r3, #3
    3aee:	d1fb      	bne.n	3ae8 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3af0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3af2:	f013 0f02 	tst.w	r3, #2
    3af6:	d00b      	beq.n	3b10 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3af8:	6823      	ldr	r3, [r4, #0]
    3afa:	f023 0302 	bic.w	r3, r3, #2
    3afe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b00:	69e3      	ldr	r3, [r4, #28]
    3b02:	f013 0f03 	tst.w	r3, #3
    3b06:	d1fb      	bne.n	3b00 <_spi_m_sync_init+0x74>
    3b08:	69e3      	ldr	r3, [r4, #28]
    3b0a:	f013 0f02 	tst.w	r3, #2
    3b0e:	d1fb      	bne.n	3b08 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3b10:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b14:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b16:	69e3      	ldr	r3, [r4, #28]
    3b18:	f013 0f03 	tst.w	r3, #3
    3b1c:	d1fb      	bne.n	3b16 <_spi_m_sync_init+0x8a>
    3b1e:	69e3      	ldr	r3, [r4, #28]
    3b20:	f013 0f01 	tst.w	r3, #1
    3b24:	d1fb      	bne.n	3b1e <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    3b26:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3b28:	682b      	ldr	r3, [r5, #0]
    3b2a:	f003 031c 	and.w	r3, r3, #28
    3b2e:	2b08      	cmp	r3, #8
    3b30:	d02e      	beq.n	3b90 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    3b32:	f44f 6217 	mov.w	r2, #2416	; 0x970
    3b36:	4937      	ldr	r1, [pc, #220]	; (3c14 <_spi_m_sync_init+0x188>)
    3b38:	1c20      	adds	r0, r4, #0
    3b3a:	bf18      	it	ne
    3b3c:	2001      	movne	r0, #1
    3b3e:	4b36      	ldr	r3, [pc, #216]	; (3c18 <_spi_m_sync_init+0x18c>)
    3b40:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3b42:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3b44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3b48:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b4c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b4e:	69e3      	ldr	r3, [r4, #28]
    3b50:	f013 0f03 	tst.w	r3, #3
    3b54:	d1fb      	bne.n	3b4e <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    3b56:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3b58:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3b5c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3b64:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b66:	69e3      	ldr	r3, [r4, #28]
    3b68:	f013 0f17 	tst.w	r3, #23
    3b6c:	d1fb      	bne.n	3b66 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3b6e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3b70:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3b72:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3b74:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3b78:	686b      	ldr	r3, [r5, #4]
    3b7a:	f003 0307 	and.w	r3, r3, #7
    3b7e:	2b00      	cmp	r3, #0
    3b80:	bf0c      	ite	eq
    3b82:	2301      	moveq	r3, #1
    3b84:	2302      	movne	r3, #2
    3b86:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    3b88:	89eb      	ldrh	r3, [r5, #14]
    3b8a:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    3b8c:	2000      	movs	r0, #0
    3b8e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    3b90:	f640 1284 	movw	r2, #2436	; 0x984
    3b94:	491f      	ldr	r1, [pc, #124]	; (3c14 <_spi_m_sync_init+0x188>)
    3b96:	1c20      	adds	r0, r4, #0
    3b98:	bf18      	it	ne
    3b9a:	2001      	movne	r0, #1
    3b9c:	4b1e      	ldr	r3, [pc, #120]	; (3c18 <_spi_m_sync_init+0x18c>)
    3b9e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3ba0:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3ba2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3ba6:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3baa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3bac:	69e3      	ldr	r3, [r4, #28]
    3bae:	f013 0f03 	tst.w	r3, #3
    3bb2:	d1fb      	bne.n	3bac <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3bb4:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3bb6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    3bba:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    3bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3bc2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3bc6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3bc8:	69e3      	ldr	r3, [r4, #28]
    3bca:	f013 0f17 	tst.w	r3, #23
    3bce:	d1fb      	bne.n	3bc8 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3bd0:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3bd2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3bd4:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3bd6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3bda:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3bdc:	2b00      	cmp	r3, #0
    3bde:	d1fc      	bne.n	3bda <_spi_m_sync_init+0x14e>
    3be0:	e7ca      	b.n	3b78 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    3be2:	f06f 000c 	mvn.w	r0, #12
    3be6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3be8:	f640 2254 	movw	r2, #2644	; 0xa54
    3bec:	4909      	ldr	r1, [pc, #36]	; (3c14 <_spi_m_sync_init+0x188>)
    3bee:	2000      	movs	r0, #0
    3bf0:	4b09      	ldr	r3, [pc, #36]	; (3c18 <_spi_m_sync_init+0x18c>)
    3bf2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3bf4:	f06f 000c 	mvn.w	r0, #12
    3bf8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3bfa:	f640 2254 	movw	r2, #2644	; 0xa54
    3bfe:	4905      	ldr	r1, [pc, #20]	; (3c14 <_spi_m_sync_init+0x188>)
    3c00:	2001      	movs	r0, #1
    3c02:	4b05      	ldr	r3, [pc, #20]	; (3c18 <_spi_m_sync_init+0x18c>)
    3c04:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3c06:	f06f 000c 	mvn.w	r0, #12
    3c0a:	bd70      	pop	{r4, r5, r6, pc}
    3c0c:	00002fa5 	.word	0x00002fa5
    3c10:	0000a56c 	.word	0x0000a56c
    3c14:	0000a590 	.word	0x0000a590
    3c18:	000021e5 	.word	0x000021e5

00003c1c <_spi_m_sync_trans>:
{
    3c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c20:	4681      	mov	r9, r0
    3c22:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    3c24:	6804      	ldr	r4, [r0, #0]
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3c26:	f8d1 8000 	ldr.w	r8, [r1]
    3c2a:	684d      	ldr	r5, [r1, #4]
    3c2c:	7907      	ldrb	r7, [r0, #4]
	ASSERT(dev && hw);
    3c2e:	b1a8      	cbz	r0, 3c5c <_spi_m_sync_trans+0x40>
    3c30:	1c20      	adds	r0, r4, #0
    3c32:	bf18      	it	ne
    3c34:	2001      	movne	r0, #1
    3c36:	f640 32b8 	movw	r2, #3000	; 0xbb8
    3c3a:	492e      	ldr	r1, [pc, #184]	; (3cf4 <_spi_m_sync_trans+0xd8>)
    3c3c:	4b2e      	ldr	r3, [pc, #184]	; (3cf8 <_spi_m_sync_trans+0xdc>)
    3c3e:	4798      	blx	r3
    3c40:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(
    3c42:	f013 0f07 	tst.w	r3, #7
    3c46:	d134      	bne.n	3cb2 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3c48:	69e0      	ldr	r0, [r4, #28]
    3c4a:	f010 0003 	ands.w	r0, r0, #3
    3c4e:	d1fb      	bne.n	3c48 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3c50:	6823      	ldr	r3, [r4, #0]
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3c52:	f013 0f02 	tst.w	r3, #2
    3c56:	d030      	beq.n	3cba <_spi_m_sync_trans+0x9e>
    3c58:	4602      	mov	r2, r0
    3c5a:	e008      	b.n	3c6e <_spi_m_sync_trans+0x52>
    3c5c:	2000      	movs	r0, #0
    3c5e:	e7ea      	b.n	3c36 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    3c60:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3c62:	f013 0f80 	tst.w	r3, #128	; 0x80
    3c66:	d112      	bne.n	3c8e <_spi_m_sync_trans+0x72>
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3c68:	68b3      	ldr	r3, [r6, #8]
    3c6a:	4283      	cmp	r3, r0
    3c6c:	d91e      	bls.n	3cac <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3c6e:	7e23      	ldrb	r3, [r4, #24]
    3c70:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3c72:	f013 0f04 	tst.w	r3, #4
    3c76:	d024      	beq.n	3cc2 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3c78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3c7a:	2d00      	cmp	r5, #0
    3c7c:	d0f0      	beq.n	3c60 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    3c7e:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    3c80:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    3c82:	bf91      	iteee	ls
    3c84:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3c86:	0a09      	lsrhi	r1, r1, #8
    3c88:	7069      	strbhi	r1, [r5, #1]
    3c8a:	3502      	addhi	r5, #2
    3c8c:	e7e8      	b.n	3c60 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3c92:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3c94:	2380      	movs	r3, #128	; 0x80
    3c96:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3c98:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3c9c:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3c9e:	f013 0f03 	tst.w	r3, #3
    3ca2:	d0fb      	beq.n	3c9c <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3ca4:	2303      	movs	r3, #3
    3ca6:	7623      	strb	r3, [r4, #24]
	return rc;
    3ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3cac:	4293      	cmp	r3, r2
    3cae:	d8de      	bhi.n	3c6e <_spi_m_sync_trans+0x52>
    3cb0:	e7f4      	b.n	3c9c <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    3cb2:	f06f 0003 	mvn.w	r0, #3
    3cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    3cba:	f06f 0013 	mvn.w	r0, #19
    3cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3cc2:	4290      	cmp	r0, r2
    3cc4:	d8cd      	bhi.n	3c62 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3cc6:	f013 0f01 	tst.w	r3, #1
    3cca:	d0ca      	beq.n	3c62 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3ccc:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    3cd0:	f1b8 0f00 	cmp.w	r8, #0
    3cd4:	d00b      	beq.n	3cee <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    3cd6:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    3cda:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    3cdc:	bf91      	iteee	ls
    3cde:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    3ce2:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    3ce6:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    3cea:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    3cee:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    3cf0:	62a1      	str	r1, [r4, #40]	; 0x28
    3cf2:	e7b6      	b.n	3c62 <_spi_m_sync_trans+0x46>
    3cf4:	0000a590 	.word	0x0000a590
    3cf8:	000021e5 	.word	0x000021e5

00003cfc <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    3cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d00:	4605      	mov	r5, r0
    3d02:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3d04:	4608      	mov	r0, r1
    3d06:	4b52      	ldr	r3, [pc, #328]	; (3e50 <_spi_m_dma_init+0x154>)
    3d08:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3d0a:	2803      	cmp	r0, #3
    3d0c:	d00c      	beq.n	3d28 <_spi_m_dma_init+0x2c>
    3d0e:	2807      	cmp	r0, #7
    3d10:	bf08      	it	eq
    3d12:	2301      	moveq	r3, #1
    3d14:	d009      	beq.n	3d2a <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3d16:	2d00      	cmp	r5, #0
    3d18:	f000 8086 	beq.w	3e28 <_spi_m_dma_init+0x12c>
    3d1c:	2c00      	cmp	r4, #0
    3d1e:	f040 808d 	bne.w	3e3c <_spi_m_dma_init+0x140>
	return NULL;
    3d22:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    3d24:	2000      	movs	r0, #0
    3d26:	e009      	b.n	3d3c <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    3d28:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3d2a:	4e4a      	ldr	r6, [pc, #296]	; (3e54 <_spi_m_dma_init+0x158>)
    3d2c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    3d30:	441e      	add	r6, r3
	ASSERT(dev && hw);
    3d32:	2d00      	cmp	r5, #0
    3d34:	d0f6      	beq.n	3d24 <_spi_m_dma_init+0x28>
    3d36:	2001      	movs	r0, #1
    3d38:	2c00      	cmp	r4, #0
    3d3a:	d0f3      	beq.n	3d24 <_spi_m_dma_init+0x28>
    3d3c:	f640 5286 	movw	r2, #3462	; 0xd86
    3d40:	4945      	ldr	r1, [pc, #276]	; (3e58 <_spi_m_dma_init+0x15c>)
    3d42:	4b46      	ldr	r3, [pc, #280]	; (3e5c <_spi_m_dma_init+0x160>)
    3d44:	4798      	blx	r3

	if (regs == NULL) {
    3d46:	2e00      	cmp	r6, #0
    3d48:	d06a      	beq.n	3e20 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3d4a:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3d4c:	f013 0f01 	tst.w	r3, #1
    3d50:	d11d      	bne.n	3d8e <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3d52:	6833      	ldr	r3, [r6, #0]
    3d54:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d58:	69e3      	ldr	r3, [r4, #28]
    3d5a:	f013 0f03 	tst.w	r3, #3
    3d5e:	d1fb      	bne.n	3d58 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3d60:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3d62:	f013 0f02 	tst.w	r3, #2
    3d66:	d00b      	beq.n	3d80 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3d68:	6823      	ldr	r3, [r4, #0]
    3d6a:	f023 0302 	bic.w	r3, r3, #2
    3d6e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d70:	69e3      	ldr	r3, [r4, #28]
    3d72:	f013 0f03 	tst.w	r3, #3
    3d76:	d1fb      	bne.n	3d70 <_spi_m_dma_init+0x74>
    3d78:	69e3      	ldr	r3, [r4, #28]
    3d7a:	f013 0f02 	tst.w	r3, #2
    3d7e:	d1fb      	bne.n	3d78 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3d80:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3d84:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d86:	69e3      	ldr	r3, [r4, #28]
    3d88:	f013 0f03 	tst.w	r3, #3
    3d8c:	d1fb      	bne.n	3d86 <_spi_m_dma_init+0x8a>
    3d8e:	69e3      	ldr	r3, [r4, #28]
    3d90:	f013 0f01 	tst.w	r3, #1
    3d94:	d1fb      	bne.n	3d8e <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    3d96:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    3d98:	f44f 6217 	mov.w	r2, #2416	; 0x970
    3d9c:	492e      	ldr	r1, [pc, #184]	; (3e58 <_spi_m_dma_init+0x15c>)
    3d9e:	1c20      	adds	r0, r4, #0
    3da0:	bf18      	it	ne
    3da2:	2001      	movne	r0, #1
    3da4:	4b2d      	ldr	r3, [pc, #180]	; (3e5c <_spi_m_dma_init+0x160>)
    3da6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3da8:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    3daa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3dae:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3db2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3db4:	69e3      	ldr	r3, [r4, #28]
    3db6:	f013 0f03 	tst.w	r3, #3
    3dba:	d1fb      	bne.n	3db4 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    3dbc:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3dbe:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3dc2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3dca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3dcc:	69e3      	ldr	r3, [r4, #28]
    3dce:	f013 0f17 	tst.w	r3, #23
    3dd2:	d1fb      	bne.n	3dcc <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3dd4:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3dd6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3dd8:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3dda:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    3dde:	f105 0818 	add.w	r8, r5, #24
    3de2:	4620      	mov	r0, r4
    3de4:	4b1e      	ldr	r3, [pc, #120]	; (3e60 <_spi_m_dma_init+0x164>)
    3de6:	4798      	blx	r3
    3de8:	4601      	mov	r1, r0
    3dea:	4640      	mov	r0, r8
    3dec:	4f1d      	ldr	r7, [pc, #116]	; (3e64 <_spi_m_dma_init+0x168>)
    3dee:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3df0:	69ab      	ldr	r3, [r5, #24]
    3df2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    3df4:	69ab      	ldr	r3, [r5, #24]
    3df6:	4a1c      	ldr	r2, [pc, #112]	; (3e68 <_spi_m_dma_init+0x16c>)
    3df8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3dfa:	69ab      	ldr	r3, [r5, #24]
    3dfc:	4e1b      	ldr	r6, [pc, #108]	; (3e6c <_spi_m_dma_init+0x170>)
    3dfe:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    3e00:	4620      	mov	r0, r4
    3e02:	4b1b      	ldr	r3, [pc, #108]	; (3e70 <_spi_m_dma_init+0x174>)
    3e04:	4798      	blx	r3
    3e06:	4601      	mov	r1, r0
    3e08:	4640      	mov	r0, r8
    3e0a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3e0c:	69ab      	ldr	r3, [r5, #24]
    3e0e:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    3e10:	69ab      	ldr	r3, [r5, #24]
    3e12:	4a18      	ldr	r2, [pc, #96]	; (3e74 <_spi_m_dma_init+0x178>)
    3e14:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3e16:	69ab      	ldr	r3, [r5, #24]
    3e18:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    3e1a:	2000      	movs	r0, #0
    3e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    3e20:	f06f 000c 	mvn.w	r0, #12
    3e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    3e28:	f640 5286 	movw	r2, #3462	; 0xd86
    3e2c:	490a      	ldr	r1, [pc, #40]	; (3e58 <_spi_m_dma_init+0x15c>)
    3e2e:	2000      	movs	r0, #0
    3e30:	4b0a      	ldr	r3, [pc, #40]	; (3e5c <_spi_m_dma_init+0x160>)
    3e32:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3e34:	f06f 000c 	mvn.w	r0, #12
    3e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    3e3c:	f640 5286 	movw	r2, #3462	; 0xd86
    3e40:	4905      	ldr	r1, [pc, #20]	; (3e58 <_spi_m_dma_init+0x15c>)
    3e42:	2001      	movs	r0, #1
    3e44:	4b05      	ldr	r3, [pc, #20]	; (3e5c <_spi_m_dma_init+0x160>)
    3e46:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3e48:	f06f 000c 	mvn.w	r0, #12
    3e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e50:	00002fa5 	.word	0x00002fa5
    3e54:	0000a56c 	.word	0x0000a56c
    3e58:	0000a590 	.word	0x0000a590
    3e5c:	000021e5 	.word	0x000021e5
    3e60:	00003105 	.word	0x00003105
    3e64:	00002a69 	.word	0x00002a69
    3e68:	00003119 	.word	0x00003119
    3e6c:	00003131 	.word	0x00003131
    3e70:	000030f1 	.word	0x000030f1
    3e74:	00003125 	.word	0x00003125

00003e78 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    3e78:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3e7a:	4604      	mov	r4, r0
    3e7c:	b160      	cbz	r0, 3e98 <_spi_m_dma_enable+0x20>
    3e7e:	6800      	ldr	r0, [r0, #0]
    3e80:	3000      	adds	r0, #0
    3e82:	bf18      	it	ne
    3e84:	2001      	movne	r0, #1
    3e86:	f640 52af 	movw	r2, #3503	; 0xdaf
    3e8a:	4904      	ldr	r1, [pc, #16]	; (3e9c <_spi_m_dma_enable+0x24>)
    3e8c:	4b04      	ldr	r3, [pc, #16]	; (3ea0 <_spi_m_dma_enable+0x28>)
    3e8e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3e90:	6820      	ldr	r0, [r4, #0]
    3e92:	4b04      	ldr	r3, [pc, #16]	; (3ea4 <_spi_m_dma_enable+0x2c>)
    3e94:	4798      	blx	r3
}
    3e96:	bd10      	pop	{r4, pc}
    3e98:	2000      	movs	r0, #0
    3e9a:	e7f4      	b.n	3e86 <_spi_m_dma_enable+0xe>
    3e9c:	0000a590 	.word	0x0000a590
    3ea0:	000021e5 	.word	0x000021e5
    3ea4:	000030cd 	.word	0x000030cd

00003ea8 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    3ea8:	b570      	push	{r4, r5, r6, lr}
    3eaa:	4605      	mov	r5, r0
    3eac:	4614      	mov	r4, r2
	switch (type) {
    3eae:	2901      	cmp	r1, #1
    3eb0:	d00e      	beq.n	3ed0 <_spi_m_dma_register_callback+0x28>
    3eb2:	b111      	cbz	r1, 3eba <_spi_m_dma_register_callback+0x12>
    3eb4:	2902      	cmp	r1, #2
    3eb6:	d016      	beq.n	3ee6 <_spi_m_dma_register_callback+0x3e>
    3eb8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    3eba:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    3ebc:	6800      	ldr	r0, [r0, #0]
    3ebe:	4b13      	ldr	r3, [pc, #76]	; (3f0c <_spi_m_dma_register_callback+0x64>)
    3ec0:	4798      	blx	r3
    3ec2:	1c22      	adds	r2, r4, #0
    3ec4:	bf18      	it	ne
    3ec6:	2201      	movne	r2, #1
    3ec8:	2100      	movs	r1, #0
    3eca:	4b11      	ldr	r3, [pc, #68]	; (3f10 <_spi_m_dma_register_callback+0x68>)
    3ecc:	4798      	blx	r3
		break;
    3ece:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    3ed0:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    3ed2:	6800      	ldr	r0, [r0, #0]
    3ed4:	4b0f      	ldr	r3, [pc, #60]	; (3f14 <_spi_m_dma_register_callback+0x6c>)
    3ed6:	4798      	blx	r3
    3ed8:	1c22      	adds	r2, r4, #0
    3eda:	bf18      	it	ne
    3edc:	2201      	movne	r2, #1
    3ede:	2100      	movs	r1, #0
    3ee0:	4b0b      	ldr	r3, [pc, #44]	; (3f10 <_spi_m_dma_register_callback+0x68>)
    3ee2:	4798      	blx	r3
		break;
    3ee4:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    3ee6:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    3ee8:	6800      	ldr	r0, [r0, #0]
    3eea:	4b0a      	ldr	r3, [pc, #40]	; (3f14 <_spi_m_dma_register_callback+0x6c>)
    3eec:	4798      	blx	r3
    3eee:	3400      	adds	r4, #0
    3ef0:	bf18      	it	ne
    3ef2:	2401      	movne	r4, #1
    3ef4:	4622      	mov	r2, r4
    3ef6:	2101      	movs	r1, #1
    3ef8:	4e05      	ldr	r6, [pc, #20]	; (3f10 <_spi_m_dma_register_callback+0x68>)
    3efa:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    3efc:	6828      	ldr	r0, [r5, #0]
    3efe:	4b03      	ldr	r3, [pc, #12]	; (3f0c <_spi_m_dma_register_callback+0x64>)
    3f00:	4798      	blx	r3
    3f02:	4622      	mov	r2, r4
    3f04:	2101      	movs	r1, #1
    3f06:	47b0      	blx	r6
    3f08:	bd70      	pop	{r4, r5, r6, pc}
    3f0a:	bf00      	nop
    3f0c:	000030f1 	.word	0x000030f1
    3f10:	00002941 	.word	0x00002941
    3f14:	00003105 	.word	0x00003105

00003f18 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    3f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f1c:	4605      	mov	r5, r0
    3f1e:	4689      	mov	r9, r1
    3f20:	4617      	mov	r7, r2
    3f22:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    3f24:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3f28:	4658      	mov	r0, fp
    3f2a:	4b46      	ldr	r3, [pc, #280]	; (4044 <_spi_m_dma_transfer+0x12c>)
    3f2c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3f2e:	2803      	cmp	r0, #3
    3f30:	d053      	beq.n	3fda <_spi_m_dma_transfer+0xc2>
    3f32:	2807      	cmp	r0, #7
    3f34:	bf08      	it	eq
    3f36:	2201      	moveq	r2, #1
    3f38:	d050      	beq.n	3fdc <_spi_m_dma_transfer+0xc4>
	return NULL;
    3f3a:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    3f3e:	4658      	mov	r0, fp
    3f40:	4b41      	ldr	r3, [pc, #260]	; (4048 <_spi_m_dma_transfer+0x130>)
    3f42:	4798      	blx	r3
    3f44:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    3f46:	4658      	mov	r0, fp
    3f48:	4b40      	ldr	r3, [pc, #256]	; (404c <_spi_m_dma_transfer+0x134>)
    3f4a:	4798      	blx	r3
    3f4c:	4604      	mov	r4, r0

	if (rxbuf) {
    3f4e:	2f00      	cmp	r7, #0
    3f50:	d04b      	beq.n	3fea <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    3f52:	2d00      	cmp	r5, #0
    3f54:	d047      	beq.n	3fe6 <_spi_m_dma_transfer+0xce>
    3f56:	f11b 0000 	adds.w	r0, fp, #0
    3f5a:	bf18      	it	ne
    3f5c:	2001      	movne	r0, #1
    3f5e:	f640 42f9 	movw	r2, #3321	; 0xcf9
    3f62:	493b      	ldr	r1, [pc, #236]	; (4050 <_spi_m_dma_transfer+0x138>)
    3f64:	4b3b      	ldr	r3, [pc, #236]	; (4054 <_spi_m_dma_transfer+0x13c>)
    3f66:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    3f68:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3f6a:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    3f6c:	f013 0f04 	tst.w	r3, #4
    3f70:	d107      	bne.n	3f82 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    3f72:	6853      	ldr	r3, [r2, #4]
    3f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f78:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f7a:	69d3      	ldr	r3, [r2, #28]
    3f7c:	f013 0f17 	tst.w	r3, #23
    3f80:	d1fb      	bne.n	3f7a <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    3f82:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    3f84:	3128      	adds	r1, #40	; 0x28
    3f86:	4630      	mov	r0, r6
    3f88:	4b33      	ldr	r3, [pc, #204]	; (4058 <_spi_m_dma_transfer+0x140>)
    3f8a:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    3f8c:	4639      	mov	r1, r7
    3f8e:	4630      	mov	r0, r6
    3f90:	4b32      	ldr	r3, [pc, #200]	; (405c <_spi_m_dma_transfer+0x144>)
    3f92:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    3f94:	4641      	mov	r1, r8
    3f96:	4630      	mov	r0, r6
    3f98:	4b31      	ldr	r3, [pc, #196]	; (4060 <_spi_m_dma_transfer+0x148>)
    3f9a:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    3f9c:	2100      	movs	r1, #0
    3f9e:	4630      	mov	r0, r6
    3fa0:	4b30      	ldr	r3, [pc, #192]	; (4064 <_spi_m_dma_transfer+0x14c>)
    3fa2:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    3fa4:	f1b9 0f00 	cmp.w	r9, #0
    3fa8:	d039      	beq.n	401e <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    3faa:	4649      	mov	r1, r9
    3fac:	4620      	mov	r0, r4
    3fae:	4b2a      	ldr	r3, [pc, #168]	; (4058 <_spi_m_dma_transfer+0x140>)
    3fb0:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    3fb2:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    3fb4:	3128      	adds	r1, #40	; 0x28
    3fb6:	4620      	mov	r0, r4
    3fb8:	4b28      	ldr	r3, [pc, #160]	; (405c <_spi_m_dma_transfer+0x144>)
    3fba:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    3fbc:	2101      	movs	r1, #1
    3fbe:	4620      	mov	r0, r4
    3fc0:	4b29      	ldr	r3, [pc, #164]	; (4068 <_spi_m_dma_transfer+0x150>)
    3fc2:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    3fc4:	4641      	mov	r1, r8
    3fc6:	4620      	mov	r0, r4
    3fc8:	4b25      	ldr	r3, [pc, #148]	; (4060 <_spi_m_dma_transfer+0x148>)
    3fca:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    3fcc:	2100      	movs	r1, #0
    3fce:	4620      	mov	r0, r4
    3fd0:	4b24      	ldr	r3, [pc, #144]	; (4064 <_spi_m_dma_transfer+0x14c>)
    3fd2:	4798      	blx	r3

	return ERR_NONE;
}
    3fd4:	2000      	movs	r0, #0
    3fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    3fda:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    3fdc:	4b23      	ldr	r3, [pc, #140]	; (406c <_spi_m_dma_transfer+0x154>)
    3fde:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    3fe2:	4492      	add	sl, r2
    3fe4:	e7ab      	b.n	3f3e <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    3fe6:	2000      	movs	r0, #0
    3fe8:	e7b9      	b.n	3f5e <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    3fea:	b1b5      	cbz	r5, 401a <_spi_m_dma_transfer+0x102>
    3fec:	f11b 0000 	adds.w	r0, fp, #0
    3ff0:	bf18      	it	ne
    3ff2:	2001      	movne	r0, #1
    3ff4:	f44f 6250 	mov.w	r2, #3328	; 0xd00
    3ff8:	4915      	ldr	r1, [pc, #84]	; (4050 <_spi_m_dma_transfer+0x138>)
    3ffa:	4b16      	ldr	r3, [pc, #88]	; (4054 <_spi_m_dma_transfer+0x13c>)
    3ffc:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    3ffe:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    4000:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    4002:	f013 0f04 	tst.w	r3, #4
    4006:	d1cd      	bne.n	3fa4 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    4008:	6853      	ldr	r3, [r2, #4]
    400a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    400e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4010:	69d3      	ldr	r3, [r2, #28]
    4012:	f013 0f17 	tst.w	r3, #23
    4016:	d1fb      	bne.n	4010 <_spi_m_dma_transfer+0xf8>
    4018:	e7c4      	b.n	3fa4 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    401a:	2000      	movs	r0, #0
    401c:	e7ea      	b.n	3ff4 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    401e:	f10a 010e 	add.w	r1, sl, #14
    4022:	4620      	mov	r0, r4
    4024:	4b0c      	ldr	r3, [pc, #48]	; (4058 <_spi_m_dma_transfer+0x140>)
    4026:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    4028:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    402a:	3128      	adds	r1, #40	; 0x28
    402c:	4620      	mov	r0, r4
    402e:	4b0b      	ldr	r3, [pc, #44]	; (405c <_spi_m_dma_transfer+0x144>)
    4030:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    4032:	2100      	movs	r1, #0
    4034:	4620      	mov	r0, r4
    4036:	4b0c      	ldr	r3, [pc, #48]	; (4068 <_spi_m_dma_transfer+0x150>)
    4038:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    403a:	4641      	mov	r1, r8
    403c:	4620      	mov	r0, r4
    403e:	4b08      	ldr	r3, [pc, #32]	; (4060 <_spi_m_dma_transfer+0x148>)
    4040:	4798      	blx	r3
    4042:	e7c3      	b.n	3fcc <_spi_m_dma_transfer+0xb4>
    4044:	00002fa5 	.word	0x00002fa5
    4048:	00003105 	.word	0x00003105
    404c:	000030f1 	.word	0x000030f1
    4050:	0000a590 	.word	0x0000a590
    4054:	000021e5 	.word	0x000021e5
    4058:	000029a5 	.word	0x000029a5
    405c:	00002995 	.word	0x00002995
    4060:	000029d1 	.word	0x000029d1
    4064:	00002a29 	.word	0x00002a29
    4068:	000029b5 	.word	0x000029b5
    406c:	0000a56c 	.word	0x0000a56c

00004070 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    4070:	4b03      	ldr	r3, [pc, #12]	; (4080 <_delay_init+0x10>)
    4072:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4076:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    4078:	2205      	movs	r2, #5
    407a:	601a      	str	r2, [r3, #0]
    407c:	4770      	bx	lr
    407e:	bf00      	nop
    4080:	e000e010 	.word	0xe000e010

00004084 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    4084:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    4086:	b303      	cbz	r3, 40ca <_delay_cycles+0x46>
{
    4088:	b430      	push	{r4, r5}
    408a:	1e5d      	subs	r5, r3, #1
    408c:	b2ed      	uxtb	r5, r5
	while (n--) {
    408e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    4090:	4a12      	ldr	r2, [pc, #72]	; (40dc <_delay_cycles+0x58>)
    4092:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    4096:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    4098:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    409a:	6813      	ldr	r3, [r2, #0]
    409c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40a0:	d0fb      	beq.n	409a <_delay_cycles+0x16>
	while (n--) {
    40a2:	3801      	subs	r0, #1
    40a4:	b2c0      	uxtb	r0, r0
    40a6:	28ff      	cmp	r0, #255	; 0xff
    40a8:	d1f5      	bne.n	4096 <_delay_cycles+0x12>
    40aa:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    40ae:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    40b2:	3101      	adds	r1, #1
    40b4:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    40b6:	4b09      	ldr	r3, [pc, #36]	; (40dc <_delay_cycles+0x58>)
    40b8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    40ba:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    40bc:	461a      	mov	r2, r3
    40be:	6813      	ldr	r3, [r2, #0]
    40c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40c4:	d0fb      	beq.n	40be <_delay_cycles+0x3a>
		;
}
    40c6:	bc30      	pop	{r4, r5}
    40c8:	4770      	bx	lr
	SysTick->LOAD = buf;
    40ca:	4b04      	ldr	r3, [pc, #16]	; (40dc <_delay_cycles+0x58>)
    40cc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    40ce:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    40d0:	461a      	mov	r2, r3
    40d2:	6813      	ldr	r3, [r2, #0]
    40d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40d8:	d0fb      	beq.n	40d2 <_delay_cycles+0x4e>
    40da:	4770      	bx	lr
    40dc:	e000e010 	.word	0xe000e010

000040e0 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    40e0:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    40e2:	6813      	ldr	r3, [r2, #0]
    40e4:	f043 0302 	orr.w	r3, r3, #2
    40e8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40ea:	6913      	ldr	r3, [r2, #16]
    40ec:	f013 0f03 	tst.w	r3, #3
    40f0:	d1fb      	bne.n	40ea <_tc_timer_start+0xa>
}
    40f2:	4770      	bx	lr

000040f4 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    40f4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    40f6:	6813      	ldr	r3, [r2, #0]
    40f8:	f023 0302 	bic.w	r3, r3, #2
    40fc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40fe:	6913      	ldr	r3, [r2, #16]
    4100:	f013 0f03 	tst.w	r3, #3
    4104:	d1fb      	bne.n	40fe <_tc_timer_stop+0xa>
}
    4106:	4770      	bx	lr

00004108 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    4108:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    410a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    410c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4110:	2a02      	cmp	r2, #2
    4112:	d00a      	beq.n	412a <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4114:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4116:	f012 0f0c 	tst.w	r2, #12
    411a:	d10c      	bne.n	4136 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    411c:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    411e:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4120:	691a      	ldr	r2, [r3, #16]
    4122:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4126:	d1fb      	bne.n	4120 <_tc_timer_set_period+0x18>
    4128:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    412a:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    412c:	691a      	ldr	r2, [r3, #16]
    412e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4132:	d1fb      	bne.n	412c <_tc_timer_set_period+0x24>
    4134:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4136:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4138:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    413c:	2a01      	cmp	r2, #1
    413e:	d000      	beq.n	4142 <_tc_timer_set_period+0x3a>
    4140:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    4142:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    4144:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4146:	691a      	ldr	r2, [r3, #16]
    4148:	f012 0f20 	tst.w	r2, #32
    414c:	d1fb      	bne.n	4146 <_tc_timer_set_period+0x3e>
    414e:	e7f7      	b.n	4140 <_tc_timer_set_period+0x38>

00004150 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    4150:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4152:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4154:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4158:	2a02      	cmp	r2, #2
    415a:	d00a      	beq.n	4172 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    415c:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    415e:	f012 0f0c 	tst.w	r2, #12
    4162:	d10c      	bne.n	417e <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4164:	691a      	ldr	r2, [r3, #16]
    4166:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    416a:	d1fb      	bne.n	4164 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    416c:	8b98      	ldrh	r0, [r3, #28]
    416e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    4170:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4172:	691a      	ldr	r2, [r3, #16]
    4174:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4178:	d1fb      	bne.n	4172 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    417a:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    417c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    417e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4180:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4184:	2a01      	cmp	r2, #1
    4186:	d001      	beq.n	418c <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    4188:	2000      	movs	r0, #0
}
    418a:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    418c:	691a      	ldr	r2, [r3, #16]
    418e:	f012 0f20 	tst.w	r2, #32
    4192:	d1fb      	bne.n	418c <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    4194:	7ed8      	ldrb	r0, [r3, #27]
    4196:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    4198:	4770      	bx	lr

0000419a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    419a:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    419c:	6913      	ldr	r3, [r2, #16]
    419e:	f013 0f03 	tst.w	r3, #3
    41a2:	d1fb      	bne.n	419c <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    41a4:	6810      	ldr	r0, [r2, #0]
}
    41a6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    41aa:	4770      	bx	lr

000041ac <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    41ac:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    41ae:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    41b0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    41b2:	f012 0f01 	tst.w	r2, #1
    41b6:	d100      	bne.n	41ba <tc_interrupt_handler+0xe>
    41b8:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    41ba:	2201      	movs	r2, #1
    41bc:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    41be:	6803      	ldr	r3, [r0, #0]
    41c0:	4798      	blx	r3
	}
}
    41c2:	e7f9      	b.n	41b8 <tc_interrupt_handler+0xc>

000041c4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    41c4:	b570      	push	{r4, r5, r6, lr}
    41c6:	b088      	sub	sp, #32
    41c8:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    41ca:	466c      	mov	r4, sp
    41cc:	4d19      	ldr	r5, [pc, #100]	; (4234 <get_tc_index+0x70>)
    41ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    41d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    41d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    41d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    41da:	9b00      	ldr	r3, [sp, #0]
    41dc:	42b3      	cmp	r3, r6
    41de:	d00c      	beq.n	41fa <get_tc_index+0x36>
    41e0:	4630      	mov	r0, r6
    41e2:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41e4:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    41e6:	f852 1b04 	ldr.w	r1, [r2], #4
    41ea:	4281      	cmp	r1, r0
    41ec:	d006      	beq.n	41fc <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41ee:	3301      	adds	r3, #1
    41f0:	2b08      	cmp	r3, #8
    41f2:	d1f8      	bne.n	41e6 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    41f4:	2000      	movs	r0, #0
			return i;
    41f6:	b240      	sxtb	r0, r0
    41f8:	e013      	b.n	4222 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    41fa:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    41fc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4200:	d015      	beq.n	422e <get_tc_index+0x6a>
    4202:	2b01      	cmp	r3, #1
    4204:	d00f      	beq.n	4226 <get_tc_index+0x62>
    4206:	2b02      	cmp	r3, #2
    4208:	d00f      	beq.n	422a <get_tc_index+0x66>
    420a:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    420c:	bf08      	it	eq
    420e:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    4210:	d0f1      	beq.n	41f6 <get_tc_index+0x32>
	ASSERT(false);
    4212:	f240 1267 	movw	r2, #359	; 0x167
    4216:	4908      	ldr	r1, [pc, #32]	; (4238 <get_tc_index+0x74>)
    4218:	2000      	movs	r0, #0
    421a:	4b08      	ldr	r3, [pc, #32]	; (423c <get_tc_index+0x78>)
    421c:	4798      	blx	r3
	return -1;
    421e:	f04f 30ff 	mov.w	r0, #4294967295
}
    4222:	b008      	add	sp, #32
    4224:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4226:	2001      	movs	r0, #1
    4228:	e7e5      	b.n	41f6 <get_tc_index+0x32>
    422a:	2002      	movs	r0, #2
    422c:	e7e3      	b.n	41f6 <get_tc_index+0x32>
    422e:	2000      	movs	r0, #0
    4230:	e7e1      	b.n	41f6 <get_tc_index+0x32>
    4232:	bf00      	nop
    4234:	0000a5ac 	.word	0x0000a5ac
    4238:	0000a61c 	.word	0x0000a61c
    423c:	000021e5 	.word	0x000021e5

00004240 <_tc_timer_init>:
{
    4240:	b570      	push	{r4, r5, r6, lr}
    4242:	4606      	mov	r6, r0
    4244:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    4246:	4608      	mov	r0, r1
    4248:	4b71      	ldr	r3, [pc, #452]	; (4410 <_tc_timer_init+0x1d0>)
    424a:	4798      	blx	r3
    424c:	4605      	mov	r5, r0
	device->hw = hw;
    424e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    4250:	22a0      	movs	r2, #160	; 0xa0
    4252:	4970      	ldr	r1, [pc, #448]	; (4414 <_tc_timer_init+0x1d4>)
    4254:	2001      	movs	r0, #1
    4256:	4b70      	ldr	r3, [pc, #448]	; (4418 <_tc_timer_init+0x1d8>)
    4258:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    425a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    425c:	f013 0f01 	tst.w	r3, #1
    4260:	d119      	bne.n	4296 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4262:	6923      	ldr	r3, [r4, #16]
    4264:	f013 0f03 	tst.w	r3, #3
    4268:	d1fb      	bne.n	4262 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    426a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    426c:	f013 0f02 	tst.w	r3, #2
    4270:	d00b      	beq.n	428a <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4272:	6823      	ldr	r3, [r4, #0]
    4274:	f023 0302 	bic.w	r3, r3, #2
    4278:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    427a:	6923      	ldr	r3, [r4, #16]
    427c:	f013 0f03 	tst.w	r3, #3
    4280:	d1fb      	bne.n	427a <_tc_timer_init+0x3a>
    4282:	6923      	ldr	r3, [r4, #16]
    4284:	f013 0f02 	tst.w	r3, #2
    4288:	d1fb      	bne.n	4282 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    428a:	2301      	movs	r3, #1
    428c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    428e:	6923      	ldr	r3, [r4, #16]
    4290:	f013 0f03 	tst.w	r3, #3
    4294:	d1fb      	bne.n	428e <_tc_timer_init+0x4e>
    4296:	6923      	ldr	r3, [r4, #16]
    4298:	f013 0f01 	tst.w	r3, #1
    429c:	d1fb      	bne.n	4296 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    429e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42a2:	4a5e      	ldr	r2, [pc, #376]	; (441c <_tc_timer_init+0x1dc>)
    42a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    42aa:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    42ac:	6923      	ldr	r3, [r4, #16]
    42ae:	f013 0f03 	tst.w	r3, #3
    42b2:	d1fb      	bne.n	42ac <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    42b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42b8:	4958      	ldr	r1, [pc, #352]	; (441c <_tc_timer_init+0x1dc>)
    42ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    42be:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    42c2:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    42c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    42c6:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    42c8:	2301      	movs	r3, #1
    42ca:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    42cc:	f002 020c 	and.w	r2, r2, #12
    42d0:	2a08      	cmp	r2, #8
    42d2:	d056      	beq.n	4382 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    42d4:	2a00      	cmp	r2, #0
    42d6:	d16b      	bne.n	43b0 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    42d8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42dc:	4a4f      	ldr	r2, [pc, #316]	; (441c <_tc_timer_init+0x1dc>)
    42de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    42e4:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    42e6:	6923      	ldr	r3, [r4, #16]
    42e8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    42ec:	d1fb      	bne.n	42e6 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    42ee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    42f2:	4a4a      	ldr	r2, [pc, #296]	; (441c <_tc_timer_init+0x1dc>)
    42f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    42fa:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    42fc:	6923      	ldr	r3, [r4, #16]
    42fe:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4302:	d1fb      	bne.n	42fc <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    4304:	2301      	movs	r3, #1
    4306:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    4308:	4b45      	ldr	r3, [pc, #276]	; (4420 <_tc_timer_init+0x1e0>)
    430a:	429c      	cmp	r4, r3
    430c:	d077      	beq.n	43fe <_tc_timer_init+0x1be>
	if (hw == TC1) {
    430e:	4b45      	ldr	r3, [pc, #276]	; (4424 <_tc_timer_init+0x1e4>)
    4310:	429c      	cmp	r4, r3
    4312:	d077      	beq.n	4404 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    4314:	4b44      	ldr	r3, [pc, #272]	; (4428 <_tc_timer_init+0x1e8>)
    4316:	429c      	cmp	r4, r3
    4318:	d077      	beq.n	440a <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    431a:	4b44      	ldr	r3, [pc, #272]	; (442c <_tc_timer_init+0x1ec>)
    431c:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    431e:	bf04      	itt	eq
    4320:	4b43      	ldreq	r3, [pc, #268]	; (4430 <_tc_timer_init+0x1f0>)
    4322:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    4324:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4328:	4a3c      	ldr	r2, [pc, #240]	; (441c <_tc_timer_init+0x1dc>)
    432a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    432e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4332:	2b00      	cmp	r3, #0
    4334:	db23      	blt.n	437e <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4336:	095a      	lsrs	r2, r3, #5
    4338:	f003 031f 	and.w	r3, r3, #31
    433c:	2101      	movs	r1, #1
    433e:	fa01 f303 	lsl.w	r3, r1, r3
    4342:	3220      	adds	r2, #32
    4344:	493b      	ldr	r1, [pc, #236]	; (4434 <_tc_timer_init+0x1f4>)
    4346:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    434a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    434e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4352:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4356:	4b31      	ldr	r3, [pc, #196]	; (441c <_tc_timer_init+0x1dc>)
    4358:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    435c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4360:	2b00      	cmp	r3, #0
    4362:	db0c      	blt.n	437e <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4364:	0959      	lsrs	r1, r3, #5
    4366:	f003 031f 	and.w	r3, r3, #31
    436a:	2201      	movs	r2, #1
    436c:	fa02 f303 	lsl.w	r3, r2, r3
    4370:	4a30      	ldr	r2, [pc, #192]	; (4434 <_tc_timer_init+0x1f4>)
    4372:	f101 0060 	add.w	r0, r1, #96	; 0x60
    4376:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    437a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    437e:	2000      	movs	r0, #0
    4380:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4382:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4386:	4a25      	ldr	r2, [pc, #148]	; (441c <_tc_timer_init+0x1dc>)
    4388:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    438e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4390:	6923      	ldr	r3, [r4, #16]
    4392:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4396:	d1fb      	bne.n	4390 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4398:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    439c:	4a1f      	ldr	r2, [pc, #124]	; (441c <_tc_timer_init+0x1dc>)
    439e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    43a4:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43a6:	6923      	ldr	r3, [r4, #16]
    43a8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    43ac:	d1fb      	bne.n	43a6 <_tc_timer_init+0x166>
    43ae:	e7a9      	b.n	4304 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    43b0:	2a04      	cmp	r2, #4
    43b2:	d1a7      	bne.n	4304 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    43b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43b8:	4a18      	ldr	r2, [pc, #96]	; (441c <_tc_timer_init+0x1dc>)
    43ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    43c2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43c4:	6923      	ldr	r3, [r4, #16]
    43c6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    43ca:	d1fb      	bne.n	43c4 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    43cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43d0:	4a12      	ldr	r2, [pc, #72]	; (441c <_tc_timer_init+0x1dc>)
    43d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    43da:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43dc:	6923      	ldr	r3, [r4, #16]
    43de:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    43e2:	d1fb      	bne.n	43dc <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    43e4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    43e8:	4a0c      	ldr	r2, [pc, #48]	; (441c <_tc_timer_init+0x1dc>)
    43ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    43ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    43f2:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43f4:	6923      	ldr	r3, [r4, #16]
    43f6:	f013 0f20 	tst.w	r3, #32
    43fa:	d1fb      	bne.n	43f4 <_tc_timer_init+0x1b4>
    43fc:	e782      	b.n	4304 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    43fe:	4b0c      	ldr	r3, [pc, #48]	; (4430 <_tc_timer_init+0x1f0>)
    4400:	601e      	str	r6, [r3, #0]
    4402:	e78a      	b.n	431a <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    4404:	4b0a      	ldr	r3, [pc, #40]	; (4430 <_tc_timer_init+0x1f0>)
    4406:	605e      	str	r6, [r3, #4]
    4408:	e78c      	b.n	4324 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    440a:	4b09      	ldr	r3, [pc, #36]	; (4430 <_tc_timer_init+0x1f0>)
    440c:	609e      	str	r6, [r3, #8]
    440e:	e789      	b.n	4324 <_tc_timer_init+0xe4>
    4410:	000041c5 	.word	0x000041c5
    4414:	0000a61c 	.word	0x0000a61c
    4418:	000021e5 	.word	0x000021e5
    441c:	0000a5ac 	.word	0x0000a5ac
    4420:	40003800 	.word	0x40003800
    4424:	40003c00 	.word	0x40003c00
    4428:	4101a000 	.word	0x4101a000
    442c:	4101c000 	.word	0x4101c000
    4430:	20000954 	.word	0x20000954
    4434:	e000e100 	.word	0xe000e100

00004438 <_tc_timer_deinit>:
{
    4438:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    443a:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    443c:	4620      	mov	r0, r4
    443e:	4b18      	ldr	r3, [pc, #96]	; (44a0 <_tc_timer_deinit+0x68>)
    4440:	4798      	blx	r3
    4442:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4444:	22cd      	movs	r2, #205	; 0xcd
    4446:	4917      	ldr	r1, [pc, #92]	; (44a4 <_tc_timer_deinit+0x6c>)
    4448:	2001      	movs	r0, #1
    444a:	4b17      	ldr	r3, [pc, #92]	; (44a8 <_tc_timer_deinit+0x70>)
    444c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    444e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4452:	4b16      	ldr	r3, [pc, #88]	; (44ac <_tc_timer_deinit+0x74>)
    4454:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4458:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    445c:	2b00      	cmp	r3, #0
    445e:	db0d      	blt.n	447c <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4460:	095a      	lsrs	r2, r3, #5
    4462:	f003 031f 	and.w	r3, r3, #31
    4466:	2101      	movs	r1, #1
    4468:	fa01 f303 	lsl.w	r3, r1, r3
    446c:	3220      	adds	r2, #32
    446e:	4910      	ldr	r1, [pc, #64]	; (44b0 <_tc_timer_deinit+0x78>)
    4470:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4474:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4478:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    447c:	6823      	ldr	r3, [r4, #0]
    447e:	f023 0302 	bic.w	r3, r3, #2
    4482:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4484:	6923      	ldr	r3, [r4, #16]
    4486:	f013 0f03 	tst.w	r3, #3
    448a:	d1fb      	bne.n	4484 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    448c:	6823      	ldr	r3, [r4, #0]
    448e:	f043 0301 	orr.w	r3, r3, #1
    4492:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4494:	6923      	ldr	r3, [r4, #16]
    4496:	f013 0f01 	tst.w	r3, #1
    449a:	d1fb      	bne.n	4494 <_tc_timer_deinit+0x5c>
}
    449c:	bd38      	pop	{r3, r4, r5, pc}
    449e:	bf00      	nop
    44a0:	000041c5 	.word	0x000041c5
    44a4:	0000a61c 	.word	0x0000a61c
    44a8:	000021e5 	.word	0x000021e5
    44ac:	0000a5ac 	.word	0x0000a5ac
    44b0:	e000e100 	.word	0xe000e100

000044b4 <_tc_timer_set_irq>:
{
    44b4:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    44b6:	68c0      	ldr	r0, [r0, #12]
    44b8:	4b09      	ldr	r3, [pc, #36]	; (44e0 <_tc_timer_set_irq+0x2c>)
    44ba:	4798      	blx	r3
    44bc:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    44be:	f44f 7291 	mov.w	r2, #290	; 0x122
    44c2:	4908      	ldr	r1, [pc, #32]	; (44e4 <_tc_timer_set_irq+0x30>)
    44c4:	2001      	movs	r0, #1
    44c6:	4b08      	ldr	r3, [pc, #32]	; (44e8 <_tc_timer_set_irq+0x34>)
    44c8:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    44ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    44ce:	4b07      	ldr	r3, [pc, #28]	; (44ec <_tc_timer_set_irq+0x38>)
    44d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    44d4:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    44d8:	4b05      	ldr	r3, [pc, #20]	; (44f0 <_tc_timer_set_irq+0x3c>)
    44da:	4798      	blx	r3
    44dc:	bd10      	pop	{r4, pc}
    44de:	bf00      	nop
    44e0:	000041c5 	.word	0x000041c5
    44e4:	0000a61c 	.word	0x0000a61c
    44e8:	000021e5 	.word	0x000021e5
    44ec:	0000a5ac 	.word	0x0000a5ac
    44f0:	00002761 	.word	0x00002761

000044f4 <_tc_get_timer>:
}
    44f4:	4800      	ldr	r0, [pc, #0]	; (44f8 <_tc_get_timer+0x4>)
    44f6:	4770      	bx	lr
    44f8:	20000020 	.word	0x20000020

000044fc <TC0_Handler>:
{
    44fc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    44fe:	4b02      	ldr	r3, [pc, #8]	; (4508 <TC0_Handler+0xc>)
    4500:	6818      	ldr	r0, [r3, #0]
    4502:	4b02      	ldr	r3, [pc, #8]	; (450c <TC0_Handler+0x10>)
    4504:	4798      	blx	r3
    4506:	bd08      	pop	{r3, pc}
    4508:	20000954 	.word	0x20000954
    450c:	000041ad 	.word	0x000041ad

00004510 <TC1_Handler>:
{
    4510:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    4512:	4b02      	ldr	r3, [pc, #8]	; (451c <TC1_Handler+0xc>)
    4514:	6858      	ldr	r0, [r3, #4]
    4516:	4b02      	ldr	r3, [pc, #8]	; (4520 <TC1_Handler+0x10>)
    4518:	4798      	blx	r3
    451a:	bd08      	pop	{r3, pc}
    451c:	20000954 	.word	0x20000954
    4520:	000041ad 	.word	0x000041ad

00004524 <TC2_Handler>:
{
    4524:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    4526:	4b02      	ldr	r3, [pc, #8]	; (4530 <TC2_Handler+0xc>)
    4528:	6898      	ldr	r0, [r3, #8]
    452a:	4b02      	ldr	r3, [pc, #8]	; (4534 <TC2_Handler+0x10>)
    452c:	4798      	blx	r3
    452e:	bd08      	pop	{r3, pc}
    4530:	20000954 	.word	0x20000954
    4534:	000041ad 	.word	0x000041ad

00004538 <TC3_Handler>:
{
    4538:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    453a:	4b02      	ldr	r3, [pc, #8]	; (4544 <TC3_Handler+0xc>)
    453c:	68d8      	ldr	r0, [r3, #12]
    453e:	4b02      	ldr	r3, [pc, #8]	; (4548 <TC3_Handler+0x10>)
    4540:	4798      	blx	r3
    4542:	bd08      	pop	{r3, pc}
    4544:	20000954 	.word	0x20000954
    4548:	000041ad 	.word	0x000041ad

0000454c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    454c:	2000      	movs	r0, #0
    454e:	4770      	bx	lr

00004550 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    4550:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    4552:	7c83      	ldrb	r3, [r0, #18]
    4554:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4558:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    455a:	f002 0107 	and.w	r1, r2, #7
    455e:	2901      	cmp	r1, #1
    4560:	d00b      	beq.n	457a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4562:	015a      	lsls	r2, r3, #5
    4564:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4568:	2110      	movs	r1, #16
    456a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    456e:	015b      	lsls	r3, r3, #5
    4570:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4574:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    4578:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    457a:	f012 0f40 	tst.w	r2, #64	; 0x40
    457e:	d00c      	beq.n	459a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    4580:	7cc2      	ldrb	r2, [r0, #19]
    4582:	f36f 1286 	bfc	r2, #6, #1
    4586:	74c2      	strb	r2, [r0, #19]
    4588:	015a      	lsls	r2, r3, #5
    458a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    458e:	2180      	movs	r1, #128	; 0x80
    4590:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4594:	2140      	movs	r1, #64	; 0x40
    4596:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    459a:	7cc2      	ldrb	r2, [r0, #19]
    459c:	f36f 02c3 	bfc	r2, #3, #1
    45a0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    45a2:	490a      	ldr	r1, [pc, #40]	; (45cc <_usb_d_dev_handle_setup+0x7c>)
    45a4:	015a      	lsls	r2, r3, #5
    45a6:	188c      	adds	r4, r1, r2
    45a8:	2500      	movs	r5, #0
    45aa:	72a5      	strb	r5, [r4, #10]
    45ac:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    45ae:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    45b2:	246f      	movs	r4, #111	; 0x6f
    45b4:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    45b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    45bc:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    45c0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    45c4:	7c80      	ldrb	r0, [r0, #18]
    45c6:	4798      	blx	r3
    45c8:	bd38      	pop	{r3, r4, r5, pc}
    45ca:	bf00      	nop
    45cc:	20000964 	.word	0x20000964

000045d0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    45d0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    45d2:	2320      	movs	r3, #32
    45d4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    45d8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    45da:	7c83      	ldrb	r3, [r0, #18]
    45dc:	f003 030f 	and.w	r3, r3, #15
    45e0:	015b      	lsls	r3, r3, #5
    45e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    45e6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    45ea:	4b04      	ldr	r3, [pc, #16]	; (45fc <_usb_d_dev_handle_stall+0x2c>)
    45ec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    45f0:	6882      	ldr	r2, [r0, #8]
    45f2:	2101      	movs	r1, #1
    45f4:	7c80      	ldrb	r0, [r0, #18]
    45f6:	4798      	blx	r3
    45f8:	bd08      	pop	{r3, pc}
    45fa:	bf00      	nop
    45fc:	20000964 	.word	0x20000964

00004600 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    4600:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4602:	7c84      	ldrb	r4, [r0, #18]
    4604:	2cff      	cmp	r4, #255	; 0xff
    4606:	d003      	beq.n	4610 <_usb_d_dev_trans_done+0x10>
    4608:	7cc3      	ldrb	r3, [r0, #19]
    460a:	f013 0f40 	tst.w	r3, #64	; 0x40
    460e:	d100      	bne.n	4612 <_usb_d_dev_trans_done+0x12>
    4610:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    4612:	7cc2      	ldrb	r2, [r0, #19]
    4614:	f36f 1286 	bfc	r2, #6, #1
    4618:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    461a:	4a03      	ldr	r2, [pc, #12]	; (4628 <_usb_d_dev_trans_done+0x28>)
    461c:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    4620:	6882      	ldr	r2, [r0, #8]
    4622:	4620      	mov	r0, r4
    4624:	47a8      	blx	r5
    4626:	e7f3      	b.n	4610 <_usb_d_dev_trans_done+0x10>
    4628:	20000964 	.word	0x20000964

0000462c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    462c:	b530      	push	{r4, r5, lr}
    462e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4630:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    4632:	2425      	movs	r4, #37	; 0x25
    4634:	f88d 4004 	strb.w	r4, [sp, #4]
    4638:	244a      	movs	r4, #74	; 0x4a
    463a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    463e:	2bff      	cmp	r3, #255	; 0xff
    4640:	d01e      	beq.n	4680 <_usb_d_dev_trans_stop+0x54>
    4642:	7cc4      	ldrb	r4, [r0, #19]
    4644:	f014 0f40 	tst.w	r4, #64	; 0x40
    4648:	d01a      	beq.n	4680 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    464a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    464e:	b1c9      	cbz	r1, 4684 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4650:	0163      	lsls	r3, r4, #5
    4652:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4656:	2580      	movs	r5, #128	; 0x80
    4658:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    465c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    465e:	a902      	add	r1, sp, #8
    4660:	440b      	add	r3, r1
    4662:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4666:	0163      	lsls	r3, r4, #5
    4668:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    466c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4670:	0163      	lsls	r3, r4, #5
    4672:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4676:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    467a:	4611      	mov	r1, r2
    467c:	4b05      	ldr	r3, [pc, #20]	; (4694 <_usb_d_dev_trans_stop+0x68>)
    467e:	4798      	blx	r3
}
    4680:	b003      	add	sp, #12
    4682:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4684:	0163      	lsls	r3, r4, #5
    4686:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    468a:	2540      	movs	r5, #64	; 0x40
    468c:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    4690:	e7e4      	b.n	465c <_usb_d_dev_trans_stop+0x30>
    4692:	bf00      	nop
    4694:	00004601 	.word	0x00004601

00004698 <_usb_d_dev_handle_trfail>:
{
    4698:	b530      	push	{r4, r5, lr}
    469a:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    469c:	7c83      	ldrb	r3, [r0, #18]
    469e:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    46a2:	2204      	movs	r2, #4
    46a4:	f88d 2004 	strb.w	r2, [sp, #4]
    46a8:	2208      	movs	r2, #8
    46aa:	f88d 2005 	strb.w	r2, [sp, #5]
    46ae:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    46b0:	460c      	mov	r4, r1
    46b2:	b391      	cbz	r1, 471a <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    46b4:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    46b8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    46bc:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    46c0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    46c4:	4a32      	ldr	r2, [pc, #200]	; (4790 <_usb_d_dev_handle_trfail+0xf8>)
    46c6:	440a      	add	r2, r1
    46c8:	7a91      	ldrb	r1, [r2, #10]
    46ca:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    46cc:	2d02      	cmp	r5, #2
    46ce:	d02c      	beq.n	472a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    46d0:	f011 0f02 	tst.w	r1, #2
    46d4:	d045      	beq.n	4762 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    46d6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    46d8:	7a91      	ldrb	r1, [r2, #10]
    46da:	f36f 0141 	bfc	r1, #1, #1
    46de:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    46e0:	aa02      	add	r2, sp, #8
    46e2:	4422      	add	r2, r4
    46e4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    46e8:	015a      	lsls	r2, r3, #5
    46ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    46ee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    46f2:	015b      	lsls	r3, r3, #5
    46f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    46f8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    46fc:	f005 0307 	and.w	r3, r5, #7
    4700:	2b01      	cmp	r3, #1
    4702:	d143      	bne.n	478c <_usb_d_dev_handle_trfail+0xf4>
    4704:	7cc3      	ldrb	r3, [r0, #19]
    4706:	f013 0f40 	tst.w	r3, #64	; 0x40
    470a:	d03f      	beq.n	478c <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    470c:	09d9      	lsrs	r1, r3, #7
    470e:	428c      	cmp	r4, r1
    4710:	d03c      	beq.n	478c <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    4712:	2200      	movs	r2, #0
    4714:	4b1f      	ldr	r3, [pc, #124]	; (4794 <_usb_d_dev_handle_trfail+0xfc>)
    4716:	4798      	blx	r3
    4718:	e038      	b.n	478c <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    471a:	0159      	lsls	r1, r3, #5
    471c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4720:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4724:	f005 0507 	and.w	r5, r5, #7
    4728:	e7ca      	b.n	46c0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    472a:	f011 0f01 	tst.w	r1, #1
    472e:	d0cf      	beq.n	46d0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    4730:	7a91      	ldrb	r1, [r2, #10]
    4732:	f36f 0100 	bfc	r1, #0, #1
    4736:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4738:	aa02      	add	r2, sp, #8
    473a:	4422      	add	r2, r4
    473c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4740:	015a      	lsls	r2, r3, #5
    4742:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4746:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    474a:	015b      	lsls	r3, r3, #5
    474c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4750:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    4754:	2204      	movs	r2, #4
    4756:	1c21      	adds	r1, r4, #0
    4758:	bf18      	it	ne
    475a:	2101      	movne	r1, #1
    475c:	4b0d      	ldr	r3, [pc, #52]	; (4794 <_usb_d_dev_handle_trfail+0xfc>)
    475e:	4798      	blx	r3
    4760:	e014      	b.n	478c <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    4762:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    4766:	4a0a      	ldr	r2, [pc, #40]	; (4790 <_usb_d_dev_handle_trfail+0xf8>)
    4768:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    476c:	2100      	movs	r1, #0
    476e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4770:	aa02      	add	r2, sp, #8
    4772:	4414      	add	r4, r2
    4774:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4778:	015a      	lsls	r2, r3, #5
    477a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    477e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4782:	015b      	lsls	r3, r3, #5
    4784:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4788:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    478c:	b003      	add	sp, #12
    478e:	bd30      	pop	{r4, r5, pc}
    4790:	20000964 	.word	0x20000964
    4794:	0000462d 	.word	0x0000462d

00004798 <_usb_d_dev_reset_epts>:
{
    4798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    479c:	4d0c      	ldr	r5, [pc, #48]	; (47d0 <_usb_d_dev_reset_epts+0x38>)
    479e:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    47a2:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    47a6:	f04f 0803 	mov.w	r8, #3
    47aa:	4f0a      	ldr	r7, [pc, #40]	; (47d4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    47ac:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    47ae:	4641      	mov	r1, r8
    47b0:	4620      	mov	r0, r4
    47b2:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    47b4:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    47b6:	2300      	movs	r3, #0
    47b8:	74e3      	strb	r3, [r4, #19]
    47ba:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    47bc:	42ac      	cmp	r4, r5
    47be:	d1f6      	bne.n	47ae <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    47c0:	22c0      	movs	r2, #192	; 0xc0
    47c2:	4619      	mov	r1, r3
    47c4:	4802      	ldr	r0, [pc, #8]	; (47d0 <_usb_d_dev_reset_epts+0x38>)
    47c6:	4b04      	ldr	r3, [pc, #16]	; (47d8 <_usb_d_dev_reset_epts+0x40>)
    47c8:	4798      	blx	r3
    47ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47ce:	bf00      	nop
    47d0:	20000964 	.word	0x20000964
    47d4:	00004601 	.word	0x00004601
    47d8:	00009817 	.word	0x00009817

000047dc <_usb_d_dev_in_next>:
{
    47dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47e0:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    47e2:	7c84      	ldrb	r4, [r0, #18]
    47e4:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    47e8:	4688      	mov	r8, r1
    47ea:	2900      	cmp	r1, #0
    47ec:	f000 80a0 	beq.w	4930 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    47f0:	4b58      	ldr	r3, [pc, #352]	; (4954 <_usb_d_dev_in_next+0x178>)
    47f2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    47f6:	6958      	ldr	r0, [r3, #20]
    47f8:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    47fc:	8a2b      	ldrh	r3, [r5, #16]
    47fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4802:	4293      	cmp	r3, r2
    4804:	f000 808e 	beq.w	4924 <_usb_d_dev_in_next+0x148>
    4808:	3b01      	subs	r3, #1
    480a:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    480c:	7cef      	ldrb	r7, [r5, #19]
    480e:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    4812:	f1b8 0f00 	cmp.w	r8, #0
    4816:	d005      	beq.n	4824 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4818:	0162      	lsls	r2, r4, #5
    481a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    481e:	2302      	movs	r3, #2
    4820:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    4824:	68a9      	ldr	r1, [r5, #8]
    4826:	eb0e 0301 	add.w	r3, lr, r1
    482a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    482c:	686e      	ldr	r6, [r5, #4]
    482e:	42b3      	cmp	r3, r6
    4830:	d23f      	bcs.n	48b2 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    4832:	1af6      	subs	r6, r6, r3
    4834:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    4836:	7cea      	ldrb	r2, [r5, #19]
    4838:	f012 0f20 	tst.w	r2, #32
    483c:	d02d      	beq.n	489a <_usb_d_dev_in_next+0xbe>
    483e:	8a2a      	ldrh	r2, [r5, #16]
    4840:	4296      	cmp	r6, r2
    4842:	bf28      	it	cs
    4844:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    4846:	6829      	ldr	r1, [r5, #0]
    4848:	4632      	mov	r2, r6
    484a:	4419      	add	r1, r3
    484c:	68e8      	ldr	r0, [r5, #12]
    484e:	4b42      	ldr	r3, [pc, #264]	; (4958 <_usb_d_dev_in_next+0x17c>)
    4850:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4852:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    4854:	4b3f      	ldr	r3, [pc, #252]	; (4954 <_usb_d_dev_in_next+0x178>)
    4856:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    485a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    485c:	4b3d      	ldr	r3, [pc, #244]	; (4954 <_usb_d_dev_in_next+0x178>)
    485e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4862:	695a      	ldr	r2, [r3, #20]
    4864:	f366 020d 	bfi	r2, r6, #0, #14
    4868:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    486a:	695a      	ldr	r2, [r3, #20]
    486c:	f36f 329b 	bfc	r2, #14, #14
    4870:	615a      	str	r2, [r3, #20]
	if (!isr) {
    4872:	f1b8 0f00 	cmp.w	r8, #0
    4876:	d108      	bne.n	488a <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    4878:	2f01      	cmp	r7, #1
    487a:	bf0c      	ite	eq
    487c:	224e      	moveq	r2, #78	; 0x4e
    487e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4880:	0163      	lsls	r3, r4, #5
    4882:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4886:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    488a:	0164      	lsls	r4, r4, #5
    488c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4890:	2380      	movs	r3, #128	; 0x80
    4892:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    4896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    489a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    489e:	bf28      	it	cs
    48a0:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    48a4:	6829      	ldr	r1, [r5, #0]
    48a6:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    48a8:	4a2a      	ldr	r2, [pc, #168]	; (4954 <_usb_d_dev_in_next+0x178>)
    48aa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    48ae:	6113      	str	r3, [r2, #16]
    48b0:	e7d4      	b.n	485c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    48b2:	7ceb      	ldrb	r3, [r5, #19]
    48b4:	f013 0f10 	tst.w	r3, #16
    48b8:	d00f      	beq.n	48da <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    48ba:	7ceb      	ldrb	r3, [r5, #19]
    48bc:	f36f 1304 	bfc	r3, #4, #1
    48c0:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    48c2:	4b24      	ldr	r3, [pc, #144]	; (4954 <_usb_d_dev_in_next+0x178>)
    48c4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    48c8:	695a      	ldr	r2, [r3, #20]
    48ca:	f36f 020d 	bfc	r2, #0, #14
    48ce:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    48d0:	695a      	ldr	r2, [r3, #20]
    48d2:	f36f 329b 	bfc	r2, #14, #14
    48d6:	615a      	str	r2, [r3, #20]
    48d8:	e7cb      	b.n	4872 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    48da:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    48dc:	ea4f 1444 	mov.w	r4, r4, lsl #5
    48e0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    48e4:	bf0c      	ite	eq
    48e6:	234b      	moveq	r3, #75	; 0x4b
    48e8:	234a      	movne	r3, #74	; 0x4a
    48ea:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    48ee:	8a2a      	ldrh	r2, [r5, #16]
    48f0:	ea00 030e 	and.w	r3, r0, lr
    48f4:	429a      	cmp	r2, r3
    48f6:	d005      	beq.n	4904 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    48f8:	2100      	movs	r1, #0
    48fa:	4628      	mov	r0, r5
    48fc:	4b17      	ldr	r3, [pc, #92]	; (495c <_usb_d_dev_in_next+0x180>)
    48fe:	4798      	blx	r3
	return;
    4900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    4904:	7ceb      	ldrb	r3, [r5, #19]
    4906:	f36f 1386 	bfc	r3, #6, #1
    490a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    490c:	4b11      	ldr	r3, [pc, #68]	; (4954 <_usb_d_dev_in_next+0x178>)
    490e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4912:	68a9      	ldr	r1, [r5, #8]
    4914:	7ca8      	ldrb	r0, [r5, #18]
    4916:	4798      	blx	r3
    4918:	b9d0      	cbnz	r0, 4950 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    491a:	7ceb      	ldrb	r3, [r5, #19]
    491c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4920:	74eb      	strb	r3, [r5, #19]
    4922:	e7e9      	b.n	48f8 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4924:	7cef      	ldrb	r7, [r5, #19]
    4926:	f007 0707 	and.w	r7, r7, #7
    492a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    492e:	e773      	b.n	4818 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4930:	8a03      	ldrh	r3, [r0, #16]
    4932:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4936:	4293      	cmp	r3, r2
    4938:	d107      	bne.n	494a <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    493a:	7cef      	ldrb	r7, [r5, #19]
    493c:	f007 0707 	and.w	r7, r7, #7
    4940:	f04f 0e00 	mov.w	lr, #0
    4944:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4948:	e76c      	b.n	4824 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    494a:	f04f 0e00 	mov.w	lr, #0
    494e:	e75b      	b.n	4808 <_usb_d_dev_in_next+0x2c>
    4950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4954:	20000964 	.word	0x20000964
    4958:	00009801 	.word	0x00009801
    495c:	00004601 	.word	0x00004601

00004960 <_usb_d_dev_out_next>:
{
    4960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4964:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4966:	7c85      	ldrb	r5, [r0, #18]
    4968:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    496c:	4689      	mov	r9, r1
    496e:	2900      	cmp	r1, #0
    4970:	d056      	beq.n	4a20 <_usb_d_dev_out_next+0xc0>
    4972:	4b74      	ldr	r3, [pc, #464]	; (4b44 <_usb_d_dev_out_next+0x1e4>)
    4974:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4978:	685a      	ldr	r2, [r3, #4]
    497a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    497e:	685f      	ldr	r7, [r3, #4]
    4980:	f3c7 070d 	ubfx	r7, r7, #0, #14
    4984:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4986:	8a06      	ldrh	r6, [r0, #16]
    4988:	f240 33ff 	movw	r3, #1023	; 0x3ff
    498c:	429e      	cmp	r6, r3
    498e:	f000 80ba 	beq.w	4b06 <_usb_d_dev_out_next+0x1a6>
    4992:	3e01      	subs	r6, #1
    4994:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    4996:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    499a:	f894 8013 	ldrb.w	r8, [r4, #19]
    499e:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    49a2:	f1b9 0f00 	cmp.w	r9, #0
    49a6:	d005      	beq.n	49b4 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    49a8:	016b      	lsls	r3, r5, #5
    49aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    49ae:	2201      	movs	r2, #1
    49b0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    49b4:	7ce3      	ldrb	r3, [r4, #19]
    49b6:	f013 0f20 	tst.w	r3, #32
    49ba:	d00d      	beq.n	49d8 <_usb_d_dev_out_next+0x78>
    49bc:	6862      	ldr	r2, [r4, #4]
    49be:	2a00      	cmp	r2, #0
    49c0:	d037      	beq.n	4a32 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    49c2:	68a0      	ldr	r0, [r4, #8]
    49c4:	1a12      	subs	r2, r2, r0
    49c6:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    49c8:	6823      	ldr	r3, [r4, #0]
    49ca:	42ba      	cmp	r2, r7
    49cc:	bf28      	it	cs
    49ce:	463a      	movcs	r2, r7
    49d0:	68e1      	ldr	r1, [r4, #12]
    49d2:	4418      	add	r0, r3
    49d4:	4b5c      	ldr	r3, [pc, #368]	; (4b48 <_usb_d_dev_out_next+0x1e8>)
    49d6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    49d8:	6863      	ldr	r3, [r4, #4]
    49da:	b353      	cbz	r3, 4a32 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    49dc:	f1b9 0f00 	cmp.w	r9, #0
    49e0:	d040      	beq.n	4a64 <_usb_d_dev_out_next+0x104>
    49e2:	8a22      	ldrh	r2, [r4, #16]
    49e4:	42ba      	cmp	r2, r7
    49e6:	d93d      	bls.n	4a64 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    49e8:	7ce3      	ldrb	r3, [r4, #19]
    49ea:	f36f 1304 	bfc	r3, #4, #1
    49ee:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    49f0:	68a3      	ldr	r3, [r4, #8]
    49f2:	445b      	add	r3, fp
    49f4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    49f6:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    49fa:	ea4f 1345 	mov.w	r3, r5, lsl #5
    49fe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a02:	bf0c      	ite	eq
    4a04:	222d      	moveq	r2, #45	; 0x2d
    4a06:	2225      	movne	r2, #37	; 0x25
    4a08:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    4a0c:	b915      	cbnz	r5, 4a14 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4a0e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    4a10:	4b4c      	ldr	r3, [pc, #304]	; (4b44 <_usb_d_dev_out_next+0x1e4>)
    4a12:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4a14:	2100      	movs	r1, #0
    4a16:	4620      	mov	r0, r4
    4a18:	4b4c      	ldr	r3, [pc, #304]	; (4b4c <_usb_d_dev_out_next+0x1ec>)
    4a1a:	4798      	blx	r3
	return;
    4a1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4a20:	8a06      	ldrh	r6, [r0, #16]
    4a22:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4a26:	429e      	cmp	r6, r3
    4a28:	d07b      	beq.n	4b22 <_usb_d_dev_out_next+0x1c2>
    4a2a:	f04f 0b00 	mov.w	fp, #0
    4a2e:	46da      	mov	sl, fp
    4a30:	e7af      	b.n	4992 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4a32:	7ce3      	ldrb	r3, [r4, #19]
    4a34:	f013 0f10 	tst.w	r3, #16
    4a38:	d06c      	beq.n	4b14 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    4a3a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4a3c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4a40:	f043 0320 	orr.w	r3, r3, #32
    4a44:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4a46:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4a48:	493e      	ldr	r1, [pc, #248]	; (4b44 <_usb_d_dev_out_next+0x1e4>)
    4a4a:	016a      	lsls	r2, r5, #5
    4a4c:	188b      	adds	r3, r1, r2
    4a4e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4a50:	8a21      	ldrh	r1, [r4, #16]
    4a52:	685a      	ldr	r2, [r3, #4]
    4a54:	f361 329b 	bfi	r2, r1, #14, #14
    4a58:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4a5a:	685a      	ldr	r2, [r3, #4]
    4a5c:	f36f 020d 	bfc	r2, #0, #14
    4a60:	605a      	str	r2, [r3, #4]
    4a62:	e01d      	b.n	4aa0 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    4a64:	68a2      	ldr	r2, [r4, #8]
    4a66:	4452      	add	r2, sl
    4a68:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4a6a:	4293      	cmp	r3, r2
    4a6c:	d9c3      	bls.n	49f6 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    4a6e:	1a9b      	subs	r3, r3, r2
    4a70:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4a72:	7ce1      	ldrb	r1, [r4, #19]
    4a74:	f011 0f20 	tst.w	r1, #32
    4a78:	d026      	beq.n	4ac8 <_usb_d_dev_out_next+0x168>
    4a7a:	8a22      	ldrh	r2, [r4, #16]
    4a7c:	4293      	cmp	r3, r2
    4a7e:	bf28      	it	cs
    4a80:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4a82:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4a84:	016a      	lsls	r2, r5, #5
    4a86:	492f      	ldr	r1, [pc, #188]	; (4b44 <_usb_d_dev_out_next+0x1e4>)
    4a88:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4a8a:	4a2e      	ldr	r2, [pc, #184]	; (4b44 <_usb_d_dev_out_next+0x1e4>)
    4a8c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    4a90:	6851      	ldr	r1, [r2, #4]
    4a92:	f363 319b 	bfi	r1, r3, #14, #14
    4a96:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4a98:	6853      	ldr	r3, [r2, #4]
    4a9a:	f36f 030d 	bfc	r3, #0, #14
    4a9e:	6053      	str	r3, [r2, #4]
	if (!isr) {
    4aa0:	f1b9 0f00 	cmp.w	r9, #0
    4aa4:	d108      	bne.n	4ab8 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    4aa6:	f1b8 0f01 	cmp.w	r8, #1
    4aaa:	d025      	beq.n	4af8 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    4aac:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4aae:	016b      	lsls	r3, r5, #5
    4ab0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4ab4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4ab8:	016d      	lsls	r5, r5, #5
    4aba:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    4abe:	2340      	movs	r3, #64	; 0x40
    4ac0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    4ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    4ac8:	8a21      	ldrh	r1, [r4, #16]
    4aca:	428b      	cmp	r3, r1
    4acc:	d90a      	bls.n	4ae4 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4ad2:	d80e      	bhi.n	4af2 <_usb_d_dev_out_next+0x192>
    4ad4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4ad8:	6821      	ldr	r1, [r4, #0]
    4ada:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    4adc:	0169      	lsls	r1, r5, #5
    4ade:	4819      	ldr	r0, [pc, #100]	; (4b44 <_usb_d_dev_out_next+0x1e4>)
    4ae0:	5042      	str	r2, [r0, r1]
    4ae2:	e7d2      	b.n	4a8a <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    4ae4:	428b      	cmp	r3, r1
    4ae6:	d2f7      	bcs.n	4ad8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    4ae8:	7ce1      	ldrb	r1, [r4, #19]
    4aea:	f041 0120 	orr.w	r1, r1, #32
    4aee:	74e1      	strb	r1, [r4, #19]
    4af0:	e7f2      	b.n	4ad8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    4af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    4af6:	e7ef      	b.n	4ad8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    4af8:	4b12      	ldr	r3, [pc, #72]	; (4b44 <_usb_d_dev_out_next+0x1e4>)
    4afa:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4afe:	2200      	movs	r2, #0
    4b00:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    4b02:	222d      	movs	r2, #45	; 0x2d
    4b04:	e7d3      	b.n	4aae <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    4b06:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b0a:	f890 8013 	ldrb.w	r8, [r0, #19]
    4b0e:	f008 0807 	and.w	r8, r8, #7
    4b12:	e749      	b.n	49a8 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    4b14:	f1b9 0f00 	cmp.w	r9, #0
    4b18:	d10b      	bne.n	4b32 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    4b1a:	68a3      	ldr	r3, [r4, #8]
    4b1c:	4453      	add	r3, sl
    4b1e:	60a3      	str	r3, [r4, #8]
    4b20:	e769      	b.n	49f6 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b22:	f890 8013 	ldrb.w	r8, [r0, #19]
    4b26:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    4b2a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b2c:	46bb      	mov	fp, r7
    4b2e:	46ba      	mov	sl, r7
    4b30:	e740      	b.n	49b4 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    4b32:	8a23      	ldrh	r3, [r4, #16]
    4b34:	42bb      	cmp	r3, r7
    4b36:	f63f af57 	bhi.w	49e8 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    4b3a:	68a3      	ldr	r3, [r4, #8]
    4b3c:	4453      	add	r3, sl
    4b3e:	60a3      	str	r3, [r4, #8]
    4b40:	e759      	b.n	49f6 <_usb_d_dev_out_next+0x96>
    4b42:	bf00      	nop
    4b44:	20000964 	.word	0x20000964
    4b48:	00009801 	.word	0x00009801
    4b4c:	00004601 	.word	0x00004601

00004b50 <_usb_d_dev_handler>:
{
    4b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    4b54:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4b58:	8c1e      	ldrh	r6, [r3, #32]
    4b5a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    4b5c:	b146      	cbz	r6, 4b70 <_usb_d_dev_handler+0x20>
    4b5e:	4d96      	ldr	r5, [pc, #600]	; (4db8 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    4b60:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4b62:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    4b66:	f8df 926c 	ldr.w	r9, [pc, #620]	; 4dd4 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    4b6a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 4dd8 <_usb_d_dev_handler+0x288>
    4b6e:	e0de      	b.n	4d2e <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4b70:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4b72:	8b1b      	ldrh	r3, [r3, #24]
    4b74:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    4b76:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    4b78:	f013 0f04 	tst.w	r3, #4
    4b7c:	d11e      	bne.n	4bbc <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    4b7e:	f413 7f00 	tst.w	r3, #512	; 0x200
    4b82:	d125      	bne.n	4bd0 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4b84:	f013 0f80 	tst.w	r3, #128	; 0x80
    4b88:	d14f      	bne.n	4c2a <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    4b8a:	f013 0f70 	tst.w	r3, #112	; 0x70
    4b8e:	d158      	bne.n	4c42 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4b90:	f013 0f08 	tst.w	r3, #8
    4b94:	d178      	bne.n	4c88 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4b96:	f013 0f01 	tst.w	r3, #1
    4b9a:	d0e0      	beq.n	4b5e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4b9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ba0:	f240 2201 	movw	r2, #513	; 0x201
    4ba4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4ba6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4ba8:	2270      	movs	r2, #112	; 0x70
    4baa:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4bac:	4b83      	ldr	r3, [pc, #524]	; (4dbc <_usb_d_dev_handler+0x26c>)
    4bae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4bb2:	2100      	movs	r1, #0
    4bb4:	2004      	movs	r0, #4
    4bb6:	4798      	blx	r3
    4bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4bbc:	2204      	movs	r2, #4
    4bbe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4bc2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4bc4:	4b7d      	ldr	r3, [pc, #500]	; (4dbc <_usb_d_dev_handler+0x26c>)
    4bc6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    4bca:	4798      	blx	r3
    4bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bd0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4bd4:	f240 2201 	movw	r2, #513	; 0x201
    4bd8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4bda:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4bdc:	2270      	movs	r2, #112	; 0x70
    4bde:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4be0:	4b76      	ldr	r3, [pc, #472]	; (4dbc <_usb_d_dev_handler+0x26c>)
    4be2:	891b      	ldrh	r3, [r3, #8]
    4be4:	f003 030f 	and.w	r3, r3, #15
    4be8:	2b03      	cmp	r3, #3
    4bea:	d014      	beq.n	4c16 <_usb_d_dev_handler+0xc6>
    4bec:	2301      	movs	r3, #1
    4bee:	4873      	ldr	r0, [pc, #460]	; (4dbc <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4bf0:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4bf2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    4bf6:	8912      	ldrh	r2, [r2, #8]
    4bf8:	f002 020f 	and.w	r2, r2, #15
    4bfc:	2a03      	cmp	r2, #3
    4bfe:	d00b      	beq.n	4c18 <_usb_d_dev_handler+0xc8>
    4c00:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    4c02:	2b05      	cmp	r3, #5
    4c04:	d1f4      	bne.n	4bf0 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    4c06:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    4c08:	4b6c      	ldr	r3, [pc, #432]	; (4dbc <_usb_d_dev_handler+0x26c>)
    4c0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c0e:	2003      	movs	r0, #3
    4c10:	4798      	blx	r3
    4c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4c16:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    4c18:	4b68      	ldr	r3, [pc, #416]	; (4dbc <_usb_d_dev_handler+0x26c>)
    4c1a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    4c1e:	8919      	ldrh	r1, [r3, #8]
    4c20:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    4c24:	2200      	movs	r2, #0
    4c26:	811a      	strh	r2, [r3, #8]
    4c28:	e7ee      	b.n	4c08 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4c2a:	2280      	movs	r2, #128	; 0x80
    4c2c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c30:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    4c32:	4b62      	ldr	r3, [pc, #392]	; (4dbc <_usb_d_dev_handler+0x26c>)
    4c34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c38:	2100      	movs	r1, #0
    4c3a:	2005      	movs	r0, #5
    4c3c:	4798      	blx	r3
    4c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c46:	2270      	movs	r2, #112	; 0x70
    4c48:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4c4a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4c4c:	f240 2201 	movw	r2, #513	; 0x201
    4c50:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4c52:	4b5b      	ldr	r3, [pc, #364]	; (4dc0 <_usb_d_dev_handler+0x270>)
    4c54:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    4c58:	f013 0f01 	tst.w	r3, #1
    4c5c:	d00e      	beq.n	4c7c <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c5e:	4a58      	ldr	r2, [pc, #352]	; (4dc0 <_usb_d_dev_handler+0x270>)
    4c60:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4c62:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    4c66:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4c6a:	d1f9      	bne.n	4c60 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    4c6c:	4b53      	ldr	r3, [pc, #332]	; (4dbc <_usb_d_dev_handler+0x26c>)
    4c6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c72:	2100      	movs	r1, #0
    4c74:	2002      	movs	r0, #2
    4c76:	4798      	blx	r3
    4c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c7c:	4a50      	ldr	r2, [pc, #320]	; (4dc0 <_usb_d_dev_handler+0x270>)
    4c7e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    4c80:	f413 7f80 	tst.w	r3, #256	; 0x100
    4c84:	d0fb      	beq.n	4c7e <_usb_d_dev_handler+0x12e>
    4c86:	e7f1      	b.n	4c6c <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4c88:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4c8c:	2400      	movs	r4, #0
    4c8e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4c92:	2208      	movs	r2, #8
    4c94:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4c96:	2270      	movs	r2, #112	; 0x70
    4c98:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4c9a:	f240 2201 	movw	r2, #513	; 0x201
    4c9e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    4ca0:	4b48      	ldr	r3, [pc, #288]	; (4dc4 <_usb_d_dev_handler+0x274>)
    4ca2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4ca4:	4b45      	ldr	r3, [pc, #276]	; (4dbc <_usb_d_dev_handler+0x26c>)
    4ca6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4caa:	4621      	mov	r1, r4
    4cac:	2001      	movs	r0, #1
    4cae:	4798      	blx	r3
    4cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4cb4:	f011 0f10 	tst.w	r1, #16
    4cb8:	d109      	bne.n	4cce <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4cba:	f011 0f40 	tst.w	r1, #64	; 0x40
    4cbe:	d108      	bne.n	4cd2 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4cc0:	f011 0f20 	tst.w	r1, #32
    4cc4:	d02f      	beq.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    4cc6:	2100      	movs	r1, #0
    4cc8:	4b3f      	ldr	r3, [pc, #252]	; (4dc8 <_usb_d_dev_handler+0x278>)
    4cca:	4798      	blx	r3
    4ccc:	e02b      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    4cce:	47c8      	blx	r9
    4cd0:	e029      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    4cd2:	2101      	movs	r1, #1
    4cd4:	4b3c      	ldr	r3, [pc, #240]	; (4dc8 <_usb_d_dev_handler+0x278>)
    4cd6:	4798      	blx	r3
    4cd8:	e025      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4cda:	f011 0f40 	tst.w	r1, #64	; 0x40
    4cde:	d111      	bne.n	4d04 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4ce0:	f011 0f08 	tst.w	r1, #8
    4ce4:	d112      	bne.n	4d0c <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4ce6:	f011 0f02 	tst.w	r1, #2
    4cea:	d112      	bne.n	4d12 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4cec:	f003 0307 	and.w	r3, r3, #7
    4cf0:	2b01      	cmp	r3, #1
    4cf2:	d118      	bne.n	4d26 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4cf4:	f011 0f04 	tst.w	r1, #4
    4cf8:	d10f      	bne.n	4d1a <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4cfa:	f011 0f10 	tst.w	r1, #16
    4cfe:	d012      	beq.n	4d26 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    4d00:	47c8      	blx	r9
    4d02:	e010      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    4d04:	2101      	movs	r1, #1
    4d06:	4b30      	ldr	r3, [pc, #192]	; (4dc8 <_usb_d_dev_handler+0x278>)
    4d08:	4798      	blx	r3
    4d0a:	e00c      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    4d0c:	2101      	movs	r1, #1
    4d0e:	47c0      	blx	r8
    4d10:	e009      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    4d12:	2101      	movs	r1, #1
    4d14:	4b2d      	ldr	r3, [pc, #180]	; (4dcc <_usb_d_dev_handler+0x27c>)
    4d16:	4798      	blx	r3
    4d18:	e005      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    4d1a:	2100      	movs	r1, #0
    4d1c:	47c0      	blx	r8
    4d1e:	e002      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    4d20:	2100      	movs	r1, #0
    4d22:	4b29      	ldr	r3, [pc, #164]	; (4dc8 <_usb_d_dev_handler+0x278>)
    4d24:	4798      	blx	r3
    4d26:	3401      	adds	r4, #1
    4d28:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4d2a:	2c1b      	cmp	r4, #27
    4d2c:	d042      	beq.n	4db4 <_usb_d_dev_handler+0x264>
    4d2e:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    4d30:	7cab      	ldrb	r3, [r5, #18]
    4d32:	2bff      	cmp	r3, #255	; 0xff
    4d34:	d0f7      	beq.n	4d26 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    4d36:	f003 030f 	and.w	r3, r3, #15
    4d3a:	2101      	movs	r1, #1
    4d3c:	4099      	lsls	r1, r3
    4d3e:	4231      	tst	r1, r6
    4d40:	d0f1      	beq.n	4d26 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    4d42:	0159      	lsls	r1, r3, #5
    4d44:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4d48:	f501 7180 	add.w	r1, r1, #256	; 0x100
    4d4c:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4d4e:	015b      	lsls	r3, r3, #5
    4d50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4d54:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    4d58:	4019      	ands	r1, r3
    4d5a:	d0e4      	beq.n	4d26 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4d5c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4d60:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    4d64:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    4d68:	f003 0247 	and.w	r2, r3, #71	; 0x47
    4d6c:	2a01      	cmp	r2, #1
    4d6e:	d0a1      	beq.n	4cb4 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    4d70:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d74:	d1b1      	bne.n	4cda <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4d76:	f011 0f20 	tst.w	r1, #32
    4d7a:	d1d1      	bne.n	4d20 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4d7c:	f011 0f04 	tst.w	r1, #4
    4d80:	d10e      	bne.n	4da0 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4d82:	f011 0f01 	tst.w	r1, #1
    4d86:	d10e      	bne.n	4da6 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4d88:	f003 0307 	and.w	r3, r3, #7
    4d8c:	2b01      	cmp	r3, #1
    4d8e:	d1ca      	bne.n	4d26 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4d90:	f011 0f08 	tst.w	r1, #8
    4d94:	d10b      	bne.n	4dae <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4d96:	f011 0f10 	tst.w	r1, #16
    4d9a:	d0c4      	beq.n	4d26 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    4d9c:	47c8      	blx	r9
    4d9e:	e7c2      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    4da0:	2100      	movs	r1, #0
    4da2:	47c0      	blx	r8
    4da4:	e7bf      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    4da6:	2101      	movs	r1, #1
    4da8:	4b09      	ldr	r3, [pc, #36]	; (4dd0 <_usb_d_dev_handler+0x280>)
    4daa:	4798      	blx	r3
    4dac:	e7bb      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    4dae:	2101      	movs	r1, #1
    4db0:	47c0      	blx	r8
    4db2:	e7b8      	b.n	4d26 <_usb_d_dev_handler+0x1d6>
    4db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4db8:	20000a38 	.word	0x20000a38
    4dbc:	20000964 	.word	0x20000964
    4dc0:	40001000 	.word	0x40001000
    4dc4:	00004799 	.word	0x00004799
    4dc8:	000045d1 	.word	0x000045d1
    4dcc:	000047dd 	.word	0x000047dd
    4dd0:	00004961 	.word	0x00004961
    4dd4:	00004551 	.word	0x00004551
    4dd8:	00004699 	.word	0x00004699

00004ddc <_usb_d_dev_init>:
{
    4ddc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4dde:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4de2:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4de4:	f013 0f01 	tst.w	r3, #1
    4de8:	d124      	bne.n	4e34 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4dea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4dee:	7893      	ldrb	r3, [r2, #2]
    4df0:	f013 0f03 	tst.w	r3, #3
    4df4:	d1fb      	bne.n	4dee <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4df6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4dfa:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    4dfc:	f013 0f02 	tst.w	r3, #2
    4e00:	d00f      	beq.n	4e22 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    4e02:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e06:	7813      	ldrb	r3, [r2, #0]
    4e08:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4e0c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4e0e:	7893      	ldrb	r3, [r2, #2]
    4e10:	f013 0f03 	tst.w	r3, #3
    4e14:	d1fb      	bne.n	4e0e <_usb_d_dev_init+0x32>
    4e16:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e1a:	7893      	ldrb	r3, [r2, #2]
    4e1c:	f013 0f02 	tst.w	r3, #2
    4e20:	d1fb      	bne.n	4e1a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4e22:	2201      	movs	r2, #1
    4e24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4e28:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4e2a:	461a      	mov	r2, r3
    4e2c:	7893      	ldrb	r3, [r2, #2]
    4e2e:	f013 0f03 	tst.w	r3, #3
    4e32:	d1fb      	bne.n	4e2c <_usb_d_dev_init+0x50>
    4e34:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e38:	7893      	ldrb	r3, [r2, #2]
    4e3a:	f013 0f01 	tst.w	r3, #1
    4e3e:	d1fb      	bne.n	4e38 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    4e40:	4b24      	ldr	r3, [pc, #144]	; (4ed4 <_usb_d_dev_init+0xf8>)
    4e42:	4a25      	ldr	r2, [pc, #148]	; (4ed8 <_usb_d_dev_init+0xfc>)
    4e44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    4e48:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    4e4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    4e50:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    4e54:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    4e58:	4b20      	ldr	r3, [pc, #128]	; (4edc <_usb_d_dev_init+0x100>)
    4e5a:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4e5c:	4b20      	ldr	r3, [pc, #128]	; (4ee0 <_usb_d_dev_init+0x104>)
    4e5e:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    4e60:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4e64:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    4e68:	f011 011f 	ands.w	r1, r1, #31
    4e6c:	d02b      	beq.n	4ec6 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    4e6e:	291f      	cmp	r1, #31
    4e70:	bf08      	it	eq
    4e72:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    4e74:	b34b      	cbz	r3, 4eca <_usb_d_dev_init+0xee>
		pad_transp = 25;
    4e76:	2b1f      	cmp	r3, #31
    4e78:	bf08      	it	eq
    4e7a:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    4e7c:	b33a      	cbz	r2, 4ece <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    4e7e:	2a07      	cmp	r2, #7
    4e80:	bf08      	it	eq
    4e82:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4e84:	f003 031f 	and.w	r3, r3, #31
    4e88:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    4e8c:	0312      	lsls	r2, r2, #12
    4e8e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    4e92:	4313      	orrs	r3, r2
    4e94:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4e98:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    4e9a:	78d3      	ldrb	r3, [r2, #3]
    4e9c:	f043 0303 	orr.w	r3, r3, #3
    4ea0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4ea2:	78d3      	ldrb	r3, [r2, #3]
    4ea4:	f043 030c 	orr.w	r3, r3, #12
    4ea8:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4eaa:	2304      	movs	r3, #4
    4eac:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4eae:	7893      	ldrb	r3, [r2, #2]
    4eb0:	f013 0f03 	tst.w	r3, #3
    4eb4:	d1fb      	bne.n	4eae <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4eb6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4eba:	4a06      	ldr	r2, [pc, #24]	; (4ed4 <_usb_d_dev_init+0xf8>)
    4ebc:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4ebe:	2201      	movs	r2, #1
    4ec0:	811a      	strh	r2, [r3, #8]
}
    4ec2:	2000      	movs	r0, #0
    4ec4:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    4ec6:	2109      	movs	r1, #9
    4ec8:	e7d4      	b.n	4e74 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    4eca:	2319      	movs	r3, #25
    4ecc:	e7d6      	b.n	4e7c <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    4ece:	2206      	movs	r2, #6
    4ed0:	e7d8      	b.n	4e84 <_usb_d_dev_init+0xa8>
    4ed2:	bf00      	nop
    4ed4:	20000964 	.word	0x20000964
    4ed8:	0000454d 	.word	0x0000454d
    4edc:	00004799 	.word	0x00004799
    4ee0:	00800084 	.word	0x00800084

00004ee4 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4ee4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4ee8:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    4eea:	f013 0f03 	tst.w	r3, #3
    4eee:	d129      	bne.n	4f44 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4ef0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4ef4:	7893      	ldrb	r3, [r2, #2]
    4ef6:	f013 0f03 	tst.w	r3, #3
    4efa:	d1fb      	bne.n	4ef4 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4efc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4f00:	781b      	ldrb	r3, [r3, #0]
    4f02:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4f04:	f013 0f02 	tst.w	r3, #2
    4f08:	d108      	bne.n	4f1c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4f0a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4f0e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4f12:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4f14:	7893      	ldrb	r3, [r2, #2]
    4f16:	f013 0f03 	tst.w	r3, #3
    4f1a:	d1fb      	bne.n	4f14 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f1c:	4b0b      	ldr	r3, [pc, #44]	; (4f4c <_usb_d_dev_enable+0x68>)
    4f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4f22:	609a      	str	r2, [r3, #8]
    4f24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4f28:	609a      	str	r2, [r3, #8]
    4f2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4f2e:	609a      	str	r2, [r3, #8]
    4f30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4f34:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4f36:	f240 228d 	movw	r2, #653	; 0x28d
    4f3a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4f3e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4f40:	2000      	movs	r0, #0
    4f42:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4f44:	f06f 0010 	mvn.w	r0, #16
}
    4f48:	4770      	bx	lr
    4f4a:	bf00      	nop
    4f4c:	e000e100 	.word	0xe000e100

00004f50 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4f50:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4f54:	8913      	ldrh	r3, [r2, #8]
    4f56:	f023 0301 	bic.w	r3, r3, #1
    4f5a:	041b      	lsls	r3, r3, #16
    4f5c:	0c1b      	lsrs	r3, r3, #16
    4f5e:	8113      	strh	r3, [r2, #8]
    4f60:	4770      	bx	lr

00004f62 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4f62:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4f66:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4f6a:	7298      	strb	r0, [r3, #10]
    4f6c:	4770      	bx	lr
	...

00004f70 <_usb_d_dev_ep_init>:
{
    4f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f72:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4f76:	f010 050f 	ands.w	r5, r0, #15
    4f7a:	d04d      	beq.n	5018 <_usb_d_dev_ep_init+0xa8>
    4f7c:	f1be 0f00 	cmp.w	lr, #0
    4f80:	bfb4      	ite	lt
    4f82:	1d6c      	addlt	r4, r5, #5
    4f84:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4f86:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4f8a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    4f8c:	2d05      	cmp	r5, #5
    4f8e:	d947      	bls.n	5020 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    4f90:	f06f 0011 	mvn.w	r0, #17
    4f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4f96:	f1be 0f00 	cmp.w	lr, #0
    4f9a:	db1b      	blt.n	4fd4 <_usb_d_dev_ep_init+0x64>
    4f9c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4fa0:	4e37      	ldr	r6, [pc, #220]	; (5080 <_usb_d_dev_ep_init+0x110>)
    4fa2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4fa6:	2d00      	cmp	r5, #0
    4fa8:	d15e      	bne.n	5068 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4faa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4fae:	4d34      	ldr	r5, [pc, #208]	; (5080 <_usb_d_dev_ep_init+0x110>)
    4fb0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    4fb4:	4d33      	ldr	r5, [pc, #204]	; (5084 <_usb_d_dev_ep_init+0x114>)
    4fb6:	00a6      	lsls	r6, r4, #2
    4fb8:	1933      	adds	r3, r6, r4
    4fba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4fbe:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    4fc2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    4fc6:	3101      	adds	r1, #1
    4fc8:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    4fcc:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    4fd0:	2000      	movs	r0, #0
    4fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4fd4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4fd8:	4e29      	ldr	r6, [pc, #164]	; (5080 <_usb_d_dev_ep_init+0x110>)
    4fda:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4fde:	686d      	ldr	r5, [r5, #4]
    4fe0:	b935      	cbnz	r5, 4ff0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4fe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4fe6:	4d26      	ldr	r5, [pc, #152]	; (5080 <_usb_d_dev_ep_init+0x110>)
    4fe8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4fec:	685f      	ldr	r7, [r3, #4]
    4fee:	e7e1      	b.n	4fb4 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4ff0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4ff4:	4e22      	ldr	r6, [pc, #136]	; (5080 <_usb_d_dev_ep_init+0x110>)
    4ff6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4ffa:	896d      	ldrh	r5, [r5, #10]
    4ffc:	4295      	cmp	r5, r2
    4ffe:	daf0      	bge.n	4fe2 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    5000:	f06f 0012 	mvn.w	r0, #18
    5004:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    5006:	f06f 0013 	mvn.w	r0, #19
    500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    500c:	f06f 0013 	mvn.w	r0, #19
    5010:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    5012:	f06f 0012 	mvn.w	r0, #18
    5016:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    5018:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    501c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    501e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    5020:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    5024:	4f17      	ldr	r7, [pc, #92]	; (5084 <_usb_d_dev_ep_init+0x114>)
    5026:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    502a:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    502e:	2eff      	cmp	r6, #255	; 0xff
    5030:	d1e9      	bne.n	5006 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    5032:	2900      	cmp	r1, #0
    5034:	d1af      	bne.n	4f96 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5036:	b125      	cbz	r5, 5042 <_usb_d_dev_ep_init+0xd2>
    5038:	f1be 0f00 	cmp.w	lr, #0
    503c:	bfa4      	itt	ge
    503e:	3505      	addge	r5, #5
    5040:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    5042:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    5046:	4e0f      	ldr	r6, [pc, #60]	; (5084 <_usb_d_dev_ep_init+0x114>)
    5048:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    504c:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    5050:	2dff      	cmp	r5, #255	; 0xff
    5052:	d1db      	bne.n	500c <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    5054:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5058:	4e09      	ldr	r6, [pc, #36]	; (5080 <_usb_d_dev_ep_init+0x110>)
    505a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    505e:	2d00      	cmp	r5, #0
    5060:	d0d7      	beq.n	5012 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5062:	f1be 0f00 	cmp.w	lr, #0
    5066:	dbb5      	blt.n	4fd4 <_usb_d_dev_ep_init+0x64>
    5068:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    506c:	4e04      	ldr	r6, [pc, #16]	; (5080 <_usb_d_dev_ep_init+0x110>)
    506e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5072:	892d      	ldrh	r5, [r5, #8]
    5074:	4295      	cmp	r5, r2
    5076:	da98      	bge.n	4faa <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    5078:	f06f 0012 	mvn.w	r0, #18
    507c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    507e:	bf00      	nop
    5080:	0000a630 	.word	0x0000a630
    5084:	20000964 	.word	0x20000964

00005088 <_usb_d_dev_ep_deinit>:
{
    5088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    508a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    508c:	f010 060f 	ands.w	r6, r0, #15
    5090:	d00e      	beq.n	50b0 <_usb_d_dev_ep_deinit+0x28>
    5092:	2f00      	cmp	r7, #0
    5094:	bfb4      	ite	lt
    5096:	1d73      	addlt	r3, r6, #5
    5098:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    509a:	2e05      	cmp	r6, #5
    509c:	d900      	bls.n	50a0 <_usb_d_dev_ep_deinit+0x18>
    509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    50a0:	461d      	mov	r5, r3
    50a2:	3301      	adds	r3, #1
    50a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    50a8:	4a24      	ldr	r2, [pc, #144]	; (513c <_usb_d_dev_ep_deinit+0xb4>)
    50aa:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    50ae:	e002      	b.n	50b6 <_usb_d_dev_ep_deinit+0x2e>
    50b0:	f8df e094 	ldr.w	lr, [pc, #148]	; 5148 <_usb_d_dev_ep_deinit+0xc0>
    50b4:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    50b6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    50ba:	4a21      	ldr	r2, [pc, #132]	; (5140 <_usb_d_dev_ep_deinit+0xb8>)
    50bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50c0:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    50c4:	2aff      	cmp	r2, #255	; 0xff
    50c6:	d0ea      	beq.n	509e <_usb_d_dev_ep_deinit+0x16>
    50c8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    50ca:	2203      	movs	r2, #3
    50cc:	0ff9      	lsrs	r1, r7, #31
    50ce:	4670      	mov	r0, lr
    50d0:	4b1c      	ldr	r3, [pc, #112]	; (5144 <_usb_d_dev_ep_deinit+0xbc>)
    50d2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    50d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    50d8:	4a19      	ldr	r2, [pc, #100]	; (5140 <_usb_d_dev_ep_deinit+0xb8>)
    50da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50de:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    50e2:	f003 0307 	and.w	r3, r3, #7
    50e6:	2b01      	cmp	r3, #1
    50e8:	d016      	beq.n	5118 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    50ea:	2f00      	cmp	r7, #0
    50ec:	db1b      	blt.n	5126 <_usb_d_dev_ep_deinit+0x9e>
    50ee:	0160      	lsls	r0, r4, #5
    50f0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    50f4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    50f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    50fc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    5100:	4b0f      	ldr	r3, [pc, #60]	; (5140 <_usb_d_dev_ep_deinit+0xb8>)
    5102:	00aa      	lsls	r2, r5, #2
    5104:	1951      	adds	r1, r2, r5
    5106:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    510a:	2000      	movs	r0, #0
    510c:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    5110:	22ff      	movs	r2, #255	; 0xff
    5112:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    5116:	e7c2      	b.n	509e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    5118:	0160      	lsls	r0, r4, #5
    511a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    511e:	2300      	movs	r3, #0
    5120:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    5124:	e7ec      	b.n	5100 <_usb_d_dev_ep_deinit+0x78>
    5126:	0176      	lsls	r6, r6, #5
    5128:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    512c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    5130:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    5134:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    5138:	e7e2      	b.n	5100 <_usb_d_dev_ep_deinit+0x78>
    513a:	bf00      	nop
    513c:	20000a24 	.word	0x20000a24
    5140:	20000964 	.word	0x20000964
    5144:	0000462d 	.word	0x0000462d
    5148:	20000a38 	.word	0x20000a38

0000514c <_usb_d_dev_ep_enable>:
{
    514c:	b4f0      	push	{r4, r5, r6, r7}
    514e:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5150:	f010 000f 	ands.w	r0, r0, #15
    5154:	f000 80a7 	beq.w	52a6 <_usb_d_dev_ep_enable+0x15a>
    5158:	2e00      	cmp	r6, #0
    515a:	bfb4      	ite	lt
    515c:	1d43      	addlt	r3, r0, #5
    515e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5160:	4605      	mov	r5, r0
    5162:	0142      	lsls	r2, r0, #5
    5164:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5168:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    516c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    516e:	2805      	cmp	r0, #5
    5170:	f240 80a0 	bls.w	52b4 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    5174:	f06f 0011 	mvn.w	r0, #17
    5178:	e07d      	b.n	5276 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    517a:	f014 0f77 	tst.w	r4, #119	; 0x77
    517e:	f040 8089 	bne.w	5294 <_usb_d_dev_ep_enable+0x148>
    5182:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5186:	2111      	movs	r1, #17
    5188:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    518c:	4c9b      	ldr	r4, [pc, #620]	; (53fc <_usb_d_dev_ep_enable+0x2b0>)
    518e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    5192:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    5196:	4c9a      	ldr	r4, [pc, #616]	; (5400 <_usb_d_dev_ep_enable+0x2b4>)
    5198:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    519c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    51a0:	f200 80cd 	bhi.w	533e <_usb_d_dev_ep_enable+0x1f2>
    51a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    51a8:	f200 8112 	bhi.w	53d0 <_usb_d_dev_ep_enable+0x284>
    51ac:	2980      	cmp	r1, #128	; 0x80
    51ae:	f200 8101 	bhi.w	53b4 <_usb_d_dev_ep_enable+0x268>
    51b2:	2940      	cmp	r1, #64	; 0x40
    51b4:	f200 8113 	bhi.w	53de <_usb_d_dev_ep_enable+0x292>
    51b8:	2920      	cmp	r1, #32
    51ba:	f200 8102 	bhi.w	53c2 <_usb_d_dev_ep_enable+0x276>
    51be:	2910      	cmp	r1, #16
    51c0:	f200 8114 	bhi.w	53ec <_usb_d_dev_ep_enable+0x2a0>
    51c4:	2908      	cmp	r1, #8
    51c6:	bf94      	ite	ls
    51c8:	2600      	movls	r6, #0
    51ca:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    51cc:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    51d0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    51d2:	f3c1 010d 	ubfx	r1, r1, #0, #14
    51d6:	e0b8      	b.n	534a <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    51d8:	f014 0f70 	tst.w	r4, #112	; 0x70
    51dc:	d15d      	bne.n	529a <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    51de:	4e87      	ldr	r6, [pc, #540]	; (53fc <_usb_d_dev_ep_enable+0x2b0>)
    51e0:	009f      	lsls	r7, r3, #2
    51e2:	18f9      	adds	r1, r7, r3
    51e4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    51e8:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    51ec:	0109      	lsls	r1, r1, #4
    51ee:	f001 0170 	and.w	r1, r1, #112	; 0x70
    51f2:	430c      	orrs	r4, r1
    51f4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    51f8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    51fc:	443b      	add	r3, r7
    51fe:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    5202:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    5206:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    520a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    520e:	d80f      	bhi.n	5230 <_usb_d_dev_ep_enable+0xe4>
    5210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5214:	d819      	bhi.n	524a <_usb_d_dev_ep_enable+0xfe>
    5216:	2b80      	cmp	r3, #128	; 0x80
    5218:	d819      	bhi.n	524e <_usb_d_dev_ep_enable+0x102>
    521a:	2b40      	cmp	r3, #64	; 0x40
    521c:	d819      	bhi.n	5252 <_usb_d_dev_ep_enable+0x106>
    521e:	2b20      	cmp	r3, #32
    5220:	d819      	bhi.n	5256 <_usb_d_dev_ep_enable+0x10a>
    5222:	2b10      	cmp	r3, #16
    5224:	d819      	bhi.n	525a <_usb_d_dev_ep_enable+0x10e>
    5226:	2b08      	cmp	r3, #8
    5228:	bf94      	ite	ls
    522a:	2300      	movls	r3, #0
    522c:	2301      	movhi	r3, #1
    522e:	e000      	b.n	5232 <_usb_d_dev_ep_enable+0xe6>
    5230:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5232:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    5236:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5238:	2380      	movs	r3, #128	; 0x80
    523a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    523e:	4b6f      	ldr	r3, [pc, #444]	; (53fc <_usb_d_dev_ep_enable+0x2b0>)
    5240:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    5244:	2000      	movs	r0, #0
    5246:	76a8      	strb	r0, [r5, #26]
    5248:	e015      	b.n	5276 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    524a:	2306      	movs	r3, #6
    524c:	e7f1      	b.n	5232 <_usb_d_dev_ep_enable+0xe6>
    524e:	2305      	movs	r3, #5
    5250:	e7ef      	b.n	5232 <_usb_d_dev_ep_enable+0xe6>
    5252:	2304      	movs	r3, #4
    5254:	e7ed      	b.n	5232 <_usb_d_dev_ep_enable+0xe6>
    5256:	2303      	movs	r3, #3
    5258:	e7eb      	b.n	5232 <_usb_d_dev_ep_enable+0xe6>
    525a:	2302      	movs	r3, #2
    525c:	e7e9      	b.n	5232 <_usb_d_dev_ep_enable+0xe6>
    525e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5260:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5264:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5266:	2340      	movs	r3, #64	; 0x40
    5268:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    526c:	4b63      	ldr	r3, [pc, #396]	; (53fc <_usb_d_dev_ep_enable+0x2b0>)
    526e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    5272:	2000      	movs	r0, #0
    5274:	72a8      	strb	r0, [r5, #10]
}
    5276:	bcf0      	pop	{r4, r5, r6, r7}
    5278:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    527a:	2106      	movs	r1, #6
    527c:	e7f0      	b.n	5260 <_usb_d_dev_ep_enable+0x114>
    527e:	2105      	movs	r1, #5
    5280:	e7ee      	b.n	5260 <_usb_d_dev_ep_enable+0x114>
    5282:	2104      	movs	r1, #4
    5284:	e7ec      	b.n	5260 <_usb_d_dev_ep_enable+0x114>
    5286:	2103      	movs	r1, #3
    5288:	e7ea      	b.n	5260 <_usb_d_dev_ep_enable+0x114>
    528a:	2102      	movs	r1, #2
    528c:	e7e8      	b.n	5260 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    528e:	f06f 0011 	mvn.w	r0, #17
    5292:	e7f0      	b.n	5276 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    5294:	f06f 0013 	mvn.w	r0, #19
    5298:	e7ed      	b.n	5276 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    529a:	f06f 0013 	mvn.w	r0, #19
    529e:	e7ea      	b.n	5276 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    52a0:	f06f 0013 	mvn.w	r0, #19
    52a4:	e7e7      	b.n	5276 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    52a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    52aa:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    52ae:	b2e4      	uxtb	r4, r4
    52b0:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    52b2:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    52b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    52b8:	4950      	ldr	r1, [pc, #320]	; (53fc <_usb_d_dev_ep_enable+0x2b0>)
    52ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    52be:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    52c2:	2aff      	cmp	r2, #255	; 0xff
    52c4:	d0e3      	beq.n	528e <_usb_d_dev_ep_enable+0x142>
    52c6:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    52c8:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    52ca:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    52ce:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    52d2:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    52d6:	f001 0107 	and.w	r1, r1, #7
    52da:	2901      	cmp	r1, #1
    52dc:	f43f af4d 	beq.w	517a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    52e0:	2e00      	cmp	r6, #0
    52e2:	f6ff af79 	blt.w	51d8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    52e6:	f014 0f07 	tst.w	r4, #7
    52ea:	d1d9      	bne.n	52a0 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    52ec:	4e43      	ldr	r6, [pc, #268]	; (53fc <_usb_d_dev_ep_enable+0x2b0>)
    52ee:	009f      	lsls	r7, r3, #2
    52f0:	18f9      	adds	r1, r7, r3
    52f2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    52f6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    52fa:	f001 0107 	and.w	r1, r1, #7
    52fe:	430c      	orrs	r4, r1
    5300:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5304:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5308:	443b      	add	r3, r7
    530a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    530e:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    5312:	4b3b      	ldr	r3, [pc, #236]	; (5400 <_usb_d_dev_ep_enable+0x2b4>)
    5314:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5318:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    531c:	d89f      	bhi.n	525e <_usb_d_dev_ep_enable+0x112>
    531e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5322:	d8aa      	bhi.n	527a <_usb_d_dev_ep_enable+0x12e>
    5324:	2980      	cmp	r1, #128	; 0x80
    5326:	d8aa      	bhi.n	527e <_usb_d_dev_ep_enable+0x132>
    5328:	2940      	cmp	r1, #64	; 0x40
    532a:	d8aa      	bhi.n	5282 <_usb_d_dev_ep_enable+0x136>
    532c:	2920      	cmp	r1, #32
    532e:	d8aa      	bhi.n	5286 <_usb_d_dev_ep_enable+0x13a>
    5330:	2910      	cmp	r1, #16
    5332:	d8aa      	bhi.n	528a <_usb_d_dev_ep_enable+0x13e>
    5334:	2908      	cmp	r1, #8
    5336:	bf94      	ite	ls
    5338:	2100      	movls	r1, #0
    533a:	2101      	movhi	r1, #1
    533c:	e790      	b.n	5260 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    533e:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5342:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5344:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5348:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    534a:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    534e:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5350:	2640      	movs	r6, #64	; 0x40
    5352:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5356:	2180      	movs	r1, #128	; 0x80
    5358:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    535c:	4f27      	ldr	r7, [pc, #156]	; (53fc <_usb_d_dev_ep_enable+0x2b0>)
    535e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    5362:	2000      	movs	r0, #0
    5364:	72a8      	strb	r0, [r5, #10]
    5366:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5368:	009c      	lsls	r4, r3, #2
    536a:	18e1      	adds	r1, r4, r3
    536c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    5370:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    5374:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5378:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    537c:	0152      	lsls	r2, r2, #5
    537e:	18b9      	adds	r1, r7, r2
    5380:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    5382:	4423      	add	r3, r4
    5384:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    5388:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    538c:	684b      	ldr	r3, [r1, #4]
    538e:	f364 339b 	bfi	r3, r4, #14, #14
    5392:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    5394:	684b      	ldr	r3, [r1, #4]
    5396:	f360 030d 	bfi	r3, r0, #0, #14
    539a:	604b      	str	r3, [r1, #4]
    539c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    53a0:	21b0      	movs	r1, #176	; 0xb0
    53a2:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    53a6:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    53aa:	461a      	mov	r2, r3
    53ac:	2310      	movs	r3, #16
    53ae:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    53b2:	e760      	b.n	5276 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53b4:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53b8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53ba:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53be:	2605      	movs	r6, #5
    53c0:	e7c3      	b.n	534a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53c2:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53c6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53c8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53cc:	2603      	movs	r6, #3
    53ce:	e7bc      	b.n	534a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53d0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53d4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53d6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53da:	2606      	movs	r6, #6
    53dc:	e7b5      	b.n	534a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53de:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53e2:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53e4:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53e8:	2604      	movs	r6, #4
    53ea:	e7ae      	b.n	534a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53ec:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    53f0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    53f2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    53f6:	2602      	movs	r6, #2
    53f8:	e7a7      	b.n	534a <_usb_d_dev_ep_enable+0x1fe>
    53fa:	bf00      	nop
    53fc:	20000964 	.word	0x20000964
    5400:	0fffc000 	.word	0x0fffc000

00005404 <_usb_d_dev_ep_stall>:
{
    5404:	b470      	push	{r4, r5, r6}
    5406:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    5408:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    540a:	f010 000f 	ands.w	r0, r0, #15
    540e:	d008      	beq.n	5422 <_usb_d_dev_ep_stall+0x1e>
    5410:	2b00      	cmp	r3, #0
    5412:	bfb4      	ite	lt
    5414:	1d43      	addlt	r3, r0, #5
    5416:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    5418:	2805      	cmp	r0, #5
    541a:	d903      	bls.n	5424 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    541c:	f06f 0011 	mvn.w	r0, #17
    5420:	e018      	b.n	5454 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    5422:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    5424:	2901      	cmp	r1, #1
    5426:	d017      	beq.n	5458 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    5428:	2900      	cmp	r1, #0
    542a:	d03a      	beq.n	54a2 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    542c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5430:	4a45      	ldr	r2, [pc, #276]	; (5548 <_usb_d_dev_ep_stall+0x144>)
    5432:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5436:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    543a:	f003 030f 	and.w	r3, r3, #15
    543e:	015b      	lsls	r3, r3, #5
    5440:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5444:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5448:	2310      	movs	r3, #16
    544a:	40a3      	lsls	r3, r4
    544c:	421a      	tst	r2, r3
    544e:	bf14      	ite	ne
    5450:	2001      	movne	r0, #1
    5452:	2000      	moveq	r0, #0
}
    5454:	bc70      	pop	{r4, r5, r6}
    5456:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5458:	2510      	movs	r5, #16
    545a:	40a5      	lsls	r5, r4
    545c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    545e:	493a      	ldr	r1, [pc, #232]	; (5548 <_usb_d_dev_ep_stall+0x144>)
    5460:	009e      	lsls	r6, r3, #2
    5462:	18f2      	adds	r2, r6, r3
    5464:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5468:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    546c:	f002 020f 	and.w	r2, r2, #15
    5470:	0150      	lsls	r0, r2, #5
    5472:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5476:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    547a:	2020      	movs	r0, #32
    547c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    5480:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5482:	0152      	lsls	r2, r2, #5
    5484:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5488:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    548c:	4433      	add	r3, r6
    548e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5492:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5496:	f042 0208 	orr.w	r2, r2, #8
    549a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    549e:	2000      	movs	r0, #0
    54a0:	e7d8      	b.n	5454 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    54a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    54a6:	4928      	ldr	r1, [pc, #160]	; (5548 <_usb_d_dev_ep_stall+0x144>)
    54a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    54ac:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    54b0:	f002 020f 	and.w	r2, r2, #15
    54b4:	0151      	lsls	r1, r2, #5
    54b6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    54ba:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    54be:	2010      	movs	r0, #16
    54c0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    54c2:	4205      	tst	r5, r0
    54c4:	d03c      	beq.n	5540 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    54c6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    54c8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    54cc:	2020      	movs	r0, #32
    54ce:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    54d0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    54d2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    54d6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    54da:	4202      	tst	r2, r0
    54dc:	d007      	beq.n	54ee <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    54de:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    54e2:	2201      	movs	r2, #1
    54e4:	fa02 f404 	lsl.w	r4, r2, r4
    54e8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    54ea:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    54ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    54f2:	4815      	ldr	r0, [pc, #84]	; (5548 <_usb_d_dev_ep_stall+0x144>)
    54f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    54f8:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    54fc:	f002 0207 	and.w	r2, r2, #7
    5500:	2a01      	cmp	r2, #1
    5502:	d00c      	beq.n	551e <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    5504:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5508:	4a0f      	ldr	r2, [pc, #60]	; (5548 <_usb_d_dev_ep_stall+0x144>)
    550a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    550e:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5512:	f36f 02c3 	bfc	r2, #3, #1
    5516:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    551a:	2000      	movs	r0, #0
    551c:	e79a      	b.n	5454 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    551e:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    5522:	f012 0f30 	tst.w	r2, #48	; 0x30
    5526:	d10d      	bne.n	5544 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    5528:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    552c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    5530:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5534:	f36f 02c3 	bfc	r2, #3, #1
    5538:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    553c:	2000      	movs	r0, #0
    553e:	e789      	b.n	5454 <_usb_d_dev_ep_stall+0x50>
    5540:	2000      	movs	r0, #0
    5542:	e787      	b.n	5454 <_usb_d_dev_ep_stall+0x50>
    5544:	2000      	movs	r0, #0
    5546:	e785      	b.n	5454 <_usb_d_dev_ep_stall+0x50>
    5548:	20000964 	.word	0x20000964

0000554c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    554c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    554e:	f000 040f 	and.w	r4, r0, #15
    5552:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    5554:	4a14      	ldr	r2, [pc, #80]	; (55a8 <_usb_d_dev_ep_read_req+0x5c>)
    5556:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    5558:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    555a:	6840      	ldr	r0, [r0, #4]
    555c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5560:	2c05      	cmp	r4, #5
    5562:	d817      	bhi.n	5594 <_usb_d_dev_ep_read_req+0x48>
    5564:	b1c9      	cbz	r1, 559a <_usb_d_dev_ep_read_req+0x4e>
    5566:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    556a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    556e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5570:	2a11      	cmp	r2, #17
    5572:	d115      	bne.n	55a0 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5574:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    5578:	f012 0f10 	tst.w	r2, #16
    557c:	d102      	bne.n	5584 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    557e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    5580:	bc30      	pop	{r4, r5}
    5582:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    5584:	682c      	ldr	r4, [r5, #0]
    5586:	686a      	ldr	r2, [r5, #4]
    5588:	600c      	str	r4, [r1, #0]
    558a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    558c:	2210      	movs	r2, #16
    558e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    5592:	e7f5      	b.n	5580 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    5594:	f06f 0011 	mvn.w	r0, #17
    5598:	e7f2      	b.n	5580 <_usb_d_dev_ep_read_req+0x34>
    559a:	f06f 0011 	mvn.w	r0, #17
    559e:	e7ef      	b.n	5580 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    55a0:	f06f 0012 	mvn.w	r0, #18
    55a4:	e7ec      	b.n	5580 <_usb_d_dev_ep_read_req+0x34>
    55a6:	bf00      	nop
    55a8:	20000964 	.word	0x20000964

000055ac <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    55ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55b0:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    55b2:	7a03      	ldrb	r3, [r0, #8]
    55b4:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    55b6:	f013 030f 	ands.w	r3, r3, #15
    55ba:	f000 80c2 	beq.w	5742 <_usb_d_dev_ep_trans+0x196>
    55be:	2e00      	cmp	r6, #0
    55c0:	bfb4      	ite	lt
    55c2:	1d5a      	addlt	r2, r3, #5
    55c4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    55c6:	4614      	mov	r4, r2
    55c8:	4969      	ldr	r1, [pc, #420]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    55ca:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    55ce:	1c55      	adds	r5, r2, #1
    55d0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    55d4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    55d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    55dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    55e0:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    55e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    55e8:	428a      	cmp	r2, r1
    55ea:	d025      	beq.n	5638 <_usb_d_dev_ep_trans+0x8c>
    55ec:	1e55      	subs	r5, r2, #1
    55ee:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    55f0:	6841      	ldr	r1, [r0, #4]
    55f2:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    55f4:	2b05      	cmp	r3, #5
    55f6:	f200 8092 	bhi.w	571e <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    55fa:	6803      	ldr	r3, [r0, #0]
    55fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5600:	d31c      	bcc.n	563c <_usb_d_dev_ep_trans+0x90>
    5602:	eb03 0c01 	add.w	ip, r3, r1
    5606:	f8df e180 	ldr.w	lr, [pc, #384]	; 5788 <_usb_d_dev_ep_trans+0x1dc>
    560a:	45f4      	cmp	ip, lr
    560c:	d816      	bhi.n	563c <_usb_d_dev_ep_trans+0x90>
    560e:	f013 0f03 	tst.w	r3, #3
    5612:	d113      	bne.n	563c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    5614:	2e00      	cmp	r6, #0
    5616:	db2a      	blt.n	566e <_usb_d_dev_ep_trans+0xc2>
    5618:	428a      	cmp	r2, r1
    561a:	f200 809c 	bhi.w	5756 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    561e:	b34d      	cbz	r5, 5674 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    5620:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5624:	4a52      	ldr	r2, [pc, #328]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    5626:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    562a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    562e:	2b00      	cmp	r3, #0
    5630:	d07b      	beq.n	572a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    5632:	f04f 0800 	mov.w	r8, #0
    5636:	e00c      	b.n	5652 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5638:	4615      	mov	r5, r2
    563a:	e7d9      	b.n	55f0 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    563c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5640:	4a4b      	ldr	r2, [pc, #300]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    5642:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    564a:	2b00      	cmp	r3, #0
    564c:	d06a      	beq.n	5724 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    564e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    5652:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5656:	4a46      	ldr	r2, [pc, #280]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    5658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    565c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5660:	f013 0f08 	tst.w	r3, #8
    5664:	d009      	beq.n	567a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    5666:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    5668:	b003      	add	sp, #12
    566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    566e:	f04f 0800 	mov.w	r8, #0
    5672:	e7ee      	b.n	5652 <_usb_d_dev_ep_trans+0xa6>
    5674:	f04f 0800 	mov.w	r8, #0
    5678:	e7eb      	b.n	5652 <_usb_d_dev_ep_trans+0xa6>
    567a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    567c:	a801      	add	r0, sp, #4
    567e:	4b3d      	ldr	r3, [pc, #244]	; (5774 <_usb_d_dev_ep_trans+0x1c8>)
    5680:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5682:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5686:	4a3a      	ldr	r2, [pc, #232]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    5688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    568c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5690:	f013 0f40 	tst.w	r3, #64	; 0x40
    5694:	d13c      	bne.n	5710 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    5696:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    569a:	4b35      	ldr	r3, [pc, #212]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    569c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    56a0:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    56a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    56a8:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    56ac:	a801      	add	r0, sp, #4
    56ae:	4b32      	ldr	r3, [pc, #200]	; (5778 <_usb_d_dev_ep_trans+0x1cc>)
    56b0:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    56b2:	f8da 3000 	ldr.w	r3, [sl]
    56b6:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    56ba:	f8da 3004 	ldr.w	r3, [sl, #4]
    56be:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    56c2:	2300      	movs	r3, #0
    56c4:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    56c8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    56ca:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    56ce:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    56d2:	f368 1345 	bfi	r3, r8, #5, #1
    56d6:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    56da:	f89a 3009 	ldrb.w	r3, [sl, #9]
    56de:	b1e3      	cbz	r3, 571a <_usb_d_dev_ep_trans+0x16e>
    56e0:	fab5 f585 	clz	r5, r5
    56e4:	096d      	lsrs	r5, r5, #5
    56e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    56ea:	4b21      	ldr	r3, [pc, #132]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    56ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    56f0:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    56f4:	f365 1304 	bfi	r3, r5, #4, #1
    56f8:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    56fc:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    56fe:	f04f 0100 	mov.w	r1, #0
    5702:	4638      	mov	r0, r7
    5704:	bfb4      	ite	lt
    5706:	4b1d      	ldrlt	r3, [pc, #116]	; (577c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    5708:	4b1d      	ldrge	r3, [pc, #116]	; (5780 <_usb_d_dev_ep_trans+0x1d4>)
    570a:	4798      	blx	r3
	return ERR_NONE;
    570c:	2000      	movs	r0, #0
    570e:	e7ab      	b.n	5668 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    5710:	a801      	add	r0, sp, #4
    5712:	4b19      	ldr	r3, [pc, #100]	; (5778 <_usb_d_dev_ep_trans+0x1cc>)
    5714:	4798      	blx	r3
		return USB_BUSY;
    5716:	2001      	movs	r0, #1
    5718:	e7a6      	b.n	5668 <_usb_d_dev_ep_trans+0xbc>
    571a:	2500      	movs	r5, #0
    571c:	e7e3      	b.n	56e6 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    571e:	f06f 0011 	mvn.w	r0, #17
    5722:	e7a1      	b.n	5668 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5724:	f06f 0012 	mvn.w	r0, #18
    5728:	e79e      	b.n	5668 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    572a:	f06f 0011 	mvn.w	r0, #17
    572e:	e79b      	b.n	5668 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5730:	f06f 0012 	mvn.w	r0, #18
    5734:	e798      	b.n	5668 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    5736:	6841      	ldr	r1, [r0, #4]
    5738:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    573c:	4f11      	ldr	r7, [pc, #68]	; (5784 <_usb_d_dev_ep_trans+0x1d8>)
    573e:	2400      	movs	r4, #0
    5740:	e75b      	b.n	55fa <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5742:	4a0b      	ldr	r2, [pc, #44]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    5744:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    5748:	f240 31ff 	movw	r1, #1023	; 0x3ff
    574c:	428a      	cmp	r2, r1
    574e:	d0f2      	beq.n	5736 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    5750:	4f0c      	ldr	r7, [pc, #48]	; (5784 <_usb_d_dev_ep_trans+0x1d8>)
    5752:	2400      	movs	r4, #0
    5754:	e74a      	b.n	55ec <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    5756:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    575a:	4a05      	ldr	r2, [pc, #20]	; (5770 <_usb_d_dev_ep_trans+0x1c4>)
    575c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5764:	2b00      	cmp	r3, #0
    5766:	d0e3      	beq.n	5730 <_usb_d_dev_ep_trans+0x184>
    5768:	f04f 0801 	mov.w	r8, #1
    576c:	e771      	b.n	5652 <_usb_d_dev_ep_trans+0xa6>
    576e:	bf00      	nop
    5770:	20000964 	.word	0x20000964
    5774:	000012b5 	.word	0x000012b5
    5778:	000012c3 	.word	0x000012c3
    577c:	000047dd 	.word	0x000047dd
    5780:	00004961 	.word	0x00004961
    5784:	20000a38 	.word	0x20000a38
    5788:	20041fff 	.word	0x20041fff

0000578c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    578c:	4b07      	ldr	r3, [pc, #28]	; (57ac <_usb_d_dev_register_callback+0x20>)
    578e:	2900      	cmp	r1, #0
    5790:	bf08      	it	eq
    5792:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5794:	2801      	cmp	r0, #1
    5796:	d004      	beq.n	57a2 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    5798:	b910      	cbnz	r0, 57a0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    579a:	4b05      	ldr	r3, [pc, #20]	; (57b0 <_usb_d_dev_register_callback+0x24>)
    579c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    57a0:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    57a2:	4b03      	ldr	r3, [pc, #12]	; (57b0 <_usb_d_dev_register_callback+0x24>)
    57a4:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    57a8:	4770      	bx	lr
    57aa:	bf00      	nop
    57ac:	0000454d 	.word	0x0000454d
    57b0:	20000964 	.word	0x20000964

000057b4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    57b4:	4b0a      	ldr	r3, [pc, #40]	; (57e0 <_usb_d_dev_register_ep_callback+0x2c>)
    57b6:	2900      	cmp	r1, #0
    57b8:	bf08      	it	eq
    57ba:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    57bc:	4603      	mov	r3, r0
    57be:	b138      	cbz	r0, 57d0 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    57c0:	2801      	cmp	r0, #1
    57c2:	d009      	beq.n	57d8 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    57c4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    57c6:	bf04      	itt	eq
    57c8:	4b06      	ldreq	r3, [pc, #24]	; (57e4 <_usb_d_dev_register_ep_callback+0x30>)
    57ca:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    57ce:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    57d0:	4b04      	ldr	r3, [pc, #16]	; (57e4 <_usb_d_dev_register_ep_callback+0x30>)
    57d2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    57d6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    57d8:	4b02      	ldr	r3, [pc, #8]	; (57e4 <_usb_d_dev_register_ep_callback+0x30>)
    57da:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    57de:	4770      	bx	lr
    57e0:	0000454d 	.word	0x0000454d
    57e4:	20000964 	.word	0x20000964

000057e8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    57e8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    57ea:	4b01      	ldr	r3, [pc, #4]	; (57f0 <USB_0_Handler+0x8>)
    57ec:	4798      	blx	r3
    57ee:	bd08      	pop	{r3, pc}
    57f0:	00004b51 	.word	0x00004b51

000057f4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    57f4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    57f6:	4b01      	ldr	r3, [pc, #4]	; (57fc <USB_1_Handler+0x8>)
    57f8:	4798      	blx	r3
    57fa:	bd08      	pop	{r3, pc}
    57fc:	00004b51 	.word	0x00004b51

00005800 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    5800:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5802:	4b01      	ldr	r3, [pc, #4]	; (5808 <USB_2_Handler+0x8>)
    5804:	4798      	blx	r3
    5806:	bd08      	pop	{r3, pc}
    5808:	00004b51 	.word	0x00004b51

0000580c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    580c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    580e:	4b01      	ldr	r3, [pc, #4]	; (5814 <USB_3_Handler+0x8>)
    5810:	4798      	blx	r3
    5812:	bd08      	pop	{r3, pc}
    5814:	00004b51 	.word	0x00004b51

00005818 <convert_cb_ADC_0>:
volatile static uint8_t ADC_0_conversion_ready = 0;
volatile static uint8_t ADC_1_conversion_ready = 0;

static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	ADC_0_conversion_ready = 1;
    5818:	2201      	movs	r2, #1
    581a:	4b01      	ldr	r3, [pc, #4]	; (5820 <convert_cb_ADC_0+0x8>)
    581c:	701a      	strb	r2, [r3, #0]
    581e:	4770      	bx	lr
    5820:	20000cec 	.word	0x20000cec

00005824 <tx_complete_cb_GRID_LED>:


// DMA SPI CALLBACK
static void tx_complete_cb_GRID_LED(struct _dma_resource *resource)
{
	dma_spi_done = 1;
    5824:	2201      	movs	r2, #1
    5826:	4b01      	ldr	r3, [pc, #4]	; (582c <tx_complete_cb_GRID_LED+0x8>)
    5828:	605a      	str	r2, [r3, #4]
    582a:	4770      	bx	lr
    582c:	20000cec 	.word	0x20000cec

00005830 <RTC_Scheduler_tick_cb>:

volatile uint32_t realtime = 0; 

static void RTC_Scheduler_tick_cb(const struct timer_task *const timer_task)
{
	realtime++;
    5830:	4b05      	ldr	r3, [pc, #20]	; (5848 <RTC_Scheduler_tick_cb+0x18>)
    5832:	689a      	ldr	r2, [r3, #8]
    5834:	3201      	adds	r2, #1
    5836:	609a      	str	r2, [r3, #8]
	task_counter[task_current]++;
    5838:	7b1a      	ldrb	r2, [r3, #12]
    583a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    583e:	691a      	ldr	r2, [r3, #16]
    5840:	3201      	adds	r2, #1
    5842:	611a      	str	r2, [r3, #16]
    5844:	4770      	bx	lr
    5846:	bf00      	nop
    5848:	20000cec 	.word	0x20000cec

0000584c <RTC_Scheduler_report_cb>:
}

 static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
 {
 if (reportflag<255) reportflag++;
    584c:	4b06      	ldr	r3, [pc, #24]	; (5868 <RTC_Scheduler_report_cb+0x1c>)
    584e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    5852:	b2db      	uxtb	r3, r3
    5854:	2bff      	cmp	r3, #255	; 0xff
    5856:	d006      	beq.n	5866 <RTC_Scheduler_report_cb+0x1a>
    5858:	4a03      	ldr	r2, [pc, #12]	; (5868 <RTC_Scheduler_report_cb+0x1c>)
    585a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    585e:	3301      	adds	r3, #1
    5860:	b2db      	uxtb	r3, r3
    5862:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    5866:	4770      	bx	lr
    5868:	20000cec 	.word	0x20000cec

0000586c <RTC_Scheduler_ping_cb>:
	
}

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag = 1;
    586c:	2201      	movs	r2, #1
    586e:	4b02      	ldr	r3, [pc, #8]	; (5878 <RTC_Scheduler_ping_cb+0xc>)
    5870:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    5874:	4770      	bx	lr
    5876:	bf00      	nop
    5878:	20000cec 	.word	0x20000cec

0000587c <grid_led_set_color>:
	
	return led_frame_buffer_size;
}

/** Set color of a particular LED in the frame buffer */
uint8_t grid_led_set_color(uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    587c:	b430      	push	{r4, r5}
	
	//if index is valid
	if (led_index<led_number){
    587e:	4d0d      	ldr	r5, [pc, #52]	; (58b4 <grid_led_set_color+0x38>)
    5880:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    5882:	4285      	cmp	r5, r0
    5884:	d802      	bhi.n	588c <grid_led_set_color+0x10>
		return 0;
		
	}
	else{
		
		return -1;		
    5886:	20ff      	movs	r0, #255	; 0xff
		
	}
}
    5888:	bc30      	pop	{r4, r5}
    588a:	4770      	bx	lr
		led_frame_buffer_usable[led_index*3 + 0] = led_color_code[led_g];
    588c:	4c09      	ldr	r4, [pc, #36]	; (58b4 <grid_led_set_color+0x38>)
    588e:	6c25      	ldr	r5, [r4, #64]	; 0x40
    5890:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5894:	0080      	lsls	r0, r0, #2
    5896:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    589a:	6c52      	ldr	r2, [r2, #68]	; 0x44
    589c:	502a      	str	r2, [r5, r0]
		led_frame_buffer_usable[led_index*3 + 1] = led_color_code[led_r];
    589e:	4428      	add	r0, r5
    58a0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    58a4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    58a6:	6042      	str	r2, [r0, #4]
		led_frame_buffer_usable[led_index*3 + 2] = led_color_code[led_b];
    58a8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    58ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
    58ae:	6083      	str	r3, [r0, #8]
		return 0;
    58b0:	2000      	movs	r0, #0
    58b2:	e7e9      	b.n	5888 <grid_led_set_color+0xc>
    58b4:	20000cec 	.word	0x20000cec

000058b8 <grid_led_tick>:
/** ================== ANIMATION ==================  */




void grid_led_tick(void){
    58b8:	b470      	push	{r4, r5, r6}
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<led_number; j++){
    58ba:	4b10      	ldr	r3, [pc, #64]	; (58fc <grid_led_tick+0x44>)
    58bc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    58be:	b1dc      	cbz	r4, 58f8 <grid_led_tick+0x40>
					
		uint8_t num = j;
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			led_smart_buffer[num+(led_number*layer)].pha += led_smart_buffer[num+(led_number*layer)].fre; //PHASE + = FREQUENCY		
    58c0:	4b0f      	ldr	r3, [pc, #60]	; (5900 <grid_led_tick+0x48>)
    58c2:	681d      	ldr	r5, [r3, #0]
    58c4:	2300      	movs	r3, #0
    58c6:	4619      	mov	r1, r3
    58c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    58cc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    58d0:	442a      	add	r2, r5
    58d2:	7b10      	ldrb	r0, [r2, #12]
    58d4:	7ad6      	ldrb	r6, [r2, #11]
    58d6:	4430      	add	r0, r6
    58d8:	72d0      	strb	r0, [r2, #11]
    58da:	4423      	add	r3, r4
    58dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    58e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    58e4:	442b      	add	r3, r5
    58e6:	7ada      	ldrb	r2, [r3, #11]
    58e8:	7b18      	ldrb	r0, [r3, #12]
    58ea:	4402      	add	r2, r0
    58ec:	72da      	strb	r2, [r3, #11]
	for (uint8_t j=0; j<led_number; j++){
    58ee:	3101      	adds	r1, #1
    58f0:	b2c9      	uxtb	r1, r1
    58f2:	460b      	mov	r3, r1
    58f4:	42a1      	cmp	r1, r4
    58f6:	d3e7      	bcc.n	58c8 <grid_led_tick+0x10>
		}	
	}
	/** END */
	
}
    58f8:	bc70      	pop	{r4, r5, r6}
    58fa:	4770      	bx	lr
    58fc:	20000cec 	.word	0x20000cec
    5900:	20001c24 	.word	0x20001c24

00005904 <grid_led_set_min>:



void grid_led_set_min(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5904:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_min.r = r;
    5906:	4c0b      	ldr	r4, [pc, #44]	; (5934 <grid_led_set_min+0x30>)
    5908:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    590a:	fb04 0101 	mla	r1, r4, r1, r0
    590e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    5912:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    5916:	4808      	ldr	r0, [pc, #32]	; (5938 <grid_led_set_min+0x34>)
    5918:	6804      	ldr	r4, [r0, #0]
    591a:	5462      	strb	r2, [r4, r1]
	led_smart_buffer[num+(led_number*layer)].color_min.g = g;
    591c:	6802      	ldr	r2, [r0, #0]
    591e:	440a      	add	r2, r1
    5920:	7053      	strb	r3, [r2, #1]
	led_smart_buffer[num+(led_number*layer)].color_min.b = b;	
    5922:	6800      	ldr	r0, [r0, #0]
    5924:	4401      	add	r1, r0
    5926:	f89d 3004 	ldrb.w	r3, [sp, #4]
    592a:	708b      	strb	r3, [r1, #2]
}
    592c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5930:	4770      	bx	lr
    5932:	bf00      	nop
    5934:	20000cec 	.word	0x20000cec
    5938:	20001c24 	.word	0x20001c24

0000593c <grid_led_set_mid>:

void grid_led_set_mid(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    593c:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_mid.r = r;
    593e:	4c0a      	ldr	r4, [pc, #40]	; (5968 <grid_led_set_mid+0x2c>)
    5940:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    5942:	fb04 0101 	mla	r1, r4, r1, r0
    5946:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    594a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    594e:	4c07      	ldr	r4, [pc, #28]	; (596c <grid_led_set_mid+0x30>)
    5950:	6820      	ldr	r0, [r4, #0]
    5952:	4408      	add	r0, r1
    5954:	70c2      	strb	r2, [r0, #3]
	led_smart_buffer[num+(led_number*layer)].color_mid.g = g;
    5956:	6820      	ldr	r0, [r4, #0]
    5958:	4401      	add	r1, r0
    595a:	710b      	strb	r3, [r1, #4]
	led_smart_buffer[num+(led_number*layer)].color_mid.b = b;	
    595c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5960:	714b      	strb	r3, [r1, #5]
}
    5962:	f85d 4b04 	ldr.w	r4, [sp], #4
    5966:	4770      	bx	lr
    5968:	20000cec 	.word	0x20000cec
    596c:	20001c24 	.word	0x20001c24

00005970 <grid_led_set_max>:

void grid_led_set_max(uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5970:	b410      	push	{r4}
	
	led_smart_buffer[num+(led_number*layer)].color_max.r = r;
    5972:	4c09      	ldr	r4, [pc, #36]	; (5998 <grid_led_set_max+0x28>)
    5974:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    5976:	fb04 0101 	mla	r1, r4, r1, r0
    597a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    597e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    5982:	4806      	ldr	r0, [pc, #24]	; (599c <grid_led_set_max+0x2c>)
    5984:	6800      	ldr	r0, [r0, #0]
    5986:	4401      	add	r1, r0
    5988:	718a      	strb	r2, [r1, #6]
	led_smart_buffer[num+(led_number*layer)].color_max.g = g;
    598a:	71cb      	strb	r3, [r1, #7]
	led_smart_buffer[num+(led_number*layer)].color_max.b = b;	
    598c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5990:	720b      	strb	r3, [r1, #8]
}
    5992:	f85d 4b04 	ldr.w	r4, [sp], #4
    5996:	4770      	bx	lr
    5998:	20000cec 	.word	0x20000cec
    599c:	20001c24 	.word	0x20001c24

000059a0 <grid_led_set_phase>:

void grid_led_set_phase(uint8_t num, uint8_t layer, uint8_t val){
	
	led_smart_buffer[num+(led_number*layer)].pha = val;
    59a0:	4b06      	ldr	r3, [pc, #24]	; (59bc <grid_led_set_phase+0x1c>)
    59a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    59a4:	fb03 0101 	mla	r1, r3, r1, r0
    59a8:	4b05      	ldr	r3, [pc, #20]	; (59c0 <grid_led_set_phase+0x20>)
    59aa:	681b      	ldr	r3, [r3, #0]
    59ac:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    59b0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    59b4:	4419      	add	r1, r3
    59b6:	72ca      	strb	r2, [r1, #11]
    59b8:	4770      	bx	lr
    59ba:	bf00      	nop
    59bc:	20000cec 	.word	0x20000cec
    59c0:	20001c24 	.word	0x20001c24

000059c4 <grid_led_set_frequency>:
}

void grid_led_set_frequency(uint8_t num, uint8_t layer, uint8_t val){
	
	led_smart_buffer[num+(led_number*layer)].fre = val;
    59c4:	4b06      	ldr	r3, [pc, #24]	; (59e0 <grid_led_set_frequency+0x1c>)
    59c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    59c8:	fb03 0101 	mla	r1, r3, r1, r0
    59cc:	4b05      	ldr	r3, [pc, #20]	; (59e4 <grid_led_set_frequency+0x20>)
    59ce:	681b      	ldr	r3, [r3, #0]
    59d0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    59d4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    59d8:	4419      	add	r1, r3
    59da:	730a      	strb	r2, [r1, #12]
    59dc:	4770      	bx	lr
    59de:	bf00      	nop
    59e0:	20000cec 	.word	0x20000cec
    59e4:	20001c24 	.word	0x20001c24

000059e8 <grid_led_init>:
uint8_t grid_led_init(uint8_t num){
    59e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59ec:	b083      	sub	sp, #12
    59ee:	4605      	mov	r5, r0
	led_number = num;	
    59f0:	4c5f      	ldr	r4, [pc, #380]	; (5b70 <grid_led_init+0x188>)
    59f2:	63e0      	str	r0, [r4, #60]	; 0x3c
	led_frame_buffer_size = (GRID_LED_RESET_LENGTH + num*3*4);
    59f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    59f8:	0080      	lsls	r0, r0, #2
    59fa:	3090      	adds	r0, #144	; 0x90
    59fc:	63a0      	str	r0, [r4, #56]	; 0x38
	led_frame_buffer = (uint8_t*) malloc(led_frame_buffer_size * sizeof(uint8_t));
    59fe:	4f5d      	ldr	r7, [pc, #372]	; (5b74 <grid_led_init+0x18c>)
    5a00:	47b8      	blx	r7
    5a02:	4606      	mov	r6, r0
    5a04:	6360      	str	r0, [r4, #52]	; 0x34
	led_frame_buffer_usable = (uint32_t*) &led_frame_buffer[GRID_LED_RESET_LENGTH];
    5a06:	f100 0390 	add.w	r3, r0, #144	; 0x90
    5a0a:	f844 3f40 	str.w	r3, [r4, #64]!
	led_smart_buffer = (struct LED_layer*) malloc(led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    5a0e:	201a      	movs	r0, #26
    5a10:	fb00 f005 	mul.w	r0, r0, r5
    5a14:	47b8      	blx	r7
    5a16:	4b58      	ldr	r3, [pc, #352]	; (5b78 <grid_led_init+0x190>)
    5a18:	6018      	str	r0, [r3, #0]
    5a1a:	2100      	movs	r1, #0
    5a1c:	b28b      	uxth	r3, r1
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    5a1e:	f003 0201 	and.w	r2, r3, #1
    5a22:	2a00      	cmp	r2, #0
    5a24:	bf14      	ite	ne
    5a26:	f04f 6260 	movne.w	r2, #234881024	; 0xe000000
    5a2a:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    5a2e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    5a32:	2800      	cmp	r0, #0
    5a34:	bf14      	ite	ne
    5a36:	f04f 4060 	movne.w	r0, #3758096384	; 0xe0000000
    5a3a:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
    5a3e:	4310      	orrs	r0, r2
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    5a40:	f3c3 0280 	ubfx	r2, r3, #2, #1
    5a44:	2a00      	cmp	r2, #0
    5a46:	bf14      	ite	ne
    5a48:	f44f 2260 	movne.w	r2, #917504	; 0xe0000
    5a4c:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    5a50:	4302      	orrs	r2, r0
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    5a52:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    5a56:	2800      	cmp	r0, #0
    5a58:	bf14      	ite	ne
    5a5a:	f44f 0060 	movne.w	r0, #14680064	; 0xe00000
    5a5e:	f44f 0000 	moveq.w	r0, #8388608	; 0x800000
    5a62:	4302      	orrs	r2, r0
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    5a64:	f3c3 1000 	ubfx	r0, r3, #4, #1
    5a68:	2800      	cmp	r0, #0
    5a6a:	bf14      	ite	ne
    5a6c:	f44f 6060 	movne.w	r0, #3584	; 0xe00
    5a70:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    5a74:	4310      	orrs	r0, r2
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    5a76:	f3c3 1240 	ubfx	r2, r3, #5, #1
    5a7a:	2a00      	cmp	r2, #0
    5a7c:	bf14      	ite	ne
    5a7e:	f44f 4260 	movne.w	r2, #57344	; 0xe000
    5a82:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
    5a86:	4310      	orrs	r0, r2
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    5a88:	f3c3 1280 	ubfx	r2, r3, #6, #1
    5a8c:	2a00      	cmp	r2, #0
    5a8e:	bf14      	ite	ne
    5a90:	220e      	movne	r2, #14
    5a92:	2208      	moveq	r2, #8
    5a94:	4302      	orrs	r2, r0
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    5a96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	bf14      	ite	ne
    5a9e:	23e0      	movne	r3, #224	; 0xe0
    5aa0:	2380      	moveq	r3, #128	; 0x80
    5aa2:	4313      	orrs	r3, r2
		led_color_code[i] = temp;
    5aa4:	f844 3f04 	str.w	r3, [r4, #4]!
    5aa8:	3101      	adds	r1, #1
	for(uint16_t i=0; i<256; i++){
    5aaa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5aae:	d1b5      	bne.n	5a1c <grid_led_init+0x34>
    5ab0:	1e73      	subs	r3, r6, #1
    5ab2:	368f      	adds	r6, #143	; 0x8f
		led_frame_buffer[i] = LED_CODE_R;
    5ab4:	2200      	movs	r2, #0
    5ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    5aba:	42b3      	cmp	r3, r6
    5abc:	d1fb      	bne.n	5ab6 <grid_led_init+0xce>
	for (uint32_t i = 0; i<led_number; i++){
    5abe:	2d00      	cmp	r5, #0
    5ac0:	d051      	beq.n	5b66 <grid_led_init+0x17e>
    5ac2:	2600      	movs	r6, #0
		grid_led_set_color(i, 0,0,0);
    5ac4:	4637      	mov	r7, r6
    5ac6:	4c2d      	ldr	r4, [pc, #180]	; (5b7c <grid_led_init+0x194>)
    5ac8:	463b      	mov	r3, r7
    5aca:	463a      	mov	r2, r7
    5acc:	4639      	mov	r1, r7
    5ace:	4630      	mov	r0, r6
    5ad0:	47a0      	blx	r4
	for (uint32_t i = 0; i<led_number; i++){
    5ad2:	3601      	adds	r6, #1
    5ad4:	42b5      	cmp	r5, r6
    5ad6:	d1f7      	bne.n	5ac8 <grid_led_init+0xe0>
	for(uint8_t i = 0; i<led_number; i++){
    5ad8:	2e00      	cmp	r6, #0
    5ada:	d044      	beq.n	5b66 <grid_led_init+0x17e>
    5adc:	2500      	movs	r5, #0
		grid_led_set_min(i, 0, 0x00, 0x00, 0x00);
    5ade:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 5b88 <grid_led_init+0x1a0>
		grid_led_set_mid(i, 0, 0x00, 0x00, 0x7F);
    5ae2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 5b8c <grid_led_init+0x1a4>
		grid_led_set_min(i, 1, 0x02, 0x02, 0x02);
    5ae6:	46b1      	mov	r9, r6
		grid_led_set_min(i, 0, 0x00, 0x00, 0x00);
    5ae8:	2400      	movs	r4, #0
    5aea:	9400      	str	r4, [sp, #0]
    5aec:	4623      	mov	r3, r4
    5aee:	4622      	mov	r2, r4
    5af0:	4621      	mov	r1, r4
    5af2:	4628      	mov	r0, r5
    5af4:	47d8      	blx	fp
		grid_led_set_mid(i, 0, 0x00, 0x00, 0x7F);
    5af6:	237f      	movs	r3, #127	; 0x7f
    5af8:	9300      	str	r3, [sp, #0]
    5afa:	4623      	mov	r3, r4
    5afc:	4622      	mov	r2, r4
    5afe:	4621      	mov	r1, r4
    5b00:	4628      	mov	r0, r5
    5b02:	47d0      	blx	sl
		grid_led_set_max(i, 0, 0x00, 0x00, 0xFF);
    5b04:	23ff      	movs	r3, #255	; 0xff
    5b06:	9300      	str	r3, [sp, #0]
    5b08:	4623      	mov	r3, r4
    5b0a:	4622      	mov	r2, r4
    5b0c:	4621      	mov	r1, r4
    5b0e:	4628      	mov	r0, r5
    5b10:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5b90 <grid_led_init+0x1a8>
    5b14:	47c0      	blx	r8
		grid_led_set_frequency(i, 0, 0);
    5b16:	4622      	mov	r2, r4
    5b18:	4621      	mov	r1, r4
    5b1a:	4628      	mov	r0, r5
    5b1c:	4e18      	ldr	r6, [pc, #96]	; (5b80 <grid_led_init+0x198>)
    5b1e:	47b0      	blx	r6
		grid_led_set_phase(i, 0, 0);
    5b20:	4622      	mov	r2, r4
    5b22:	4621      	mov	r1, r4
    5b24:	4628      	mov	r0, r5
    5b26:	4f17      	ldr	r7, [pc, #92]	; (5b84 <grid_led_init+0x19c>)
    5b28:	47b8      	blx	r7
		grid_led_set_min(i, 1, 0x02, 0x02, 0x02);
    5b2a:	2202      	movs	r2, #2
    5b2c:	9200      	str	r2, [sp, #0]
    5b2e:	4613      	mov	r3, r2
    5b30:	2101      	movs	r1, #1
    5b32:	4628      	mov	r0, r5
    5b34:	47d8      	blx	fp
		grid_led_set_mid(i, 1, 0x00, 0x00, 0x00);
    5b36:	9400      	str	r4, [sp, #0]
    5b38:	4623      	mov	r3, r4
    5b3a:	4622      	mov	r2, r4
    5b3c:	2101      	movs	r1, #1
    5b3e:	4628      	mov	r0, r5
    5b40:	47d0      	blx	sl
		grid_led_set_max(i, 1, 0x00, 0x00, 0x00);
    5b42:	9400      	str	r4, [sp, #0]
    5b44:	4623      	mov	r3, r4
    5b46:	4622      	mov	r2, r4
    5b48:	2101      	movs	r1, #1
    5b4a:	4628      	mov	r0, r5
    5b4c:	47c0      	blx	r8
		grid_led_set_frequency(i, 1, 0);
    5b4e:	4622      	mov	r2, r4
    5b50:	2101      	movs	r1, #1
    5b52:	4628      	mov	r0, r5
    5b54:	47b0      	blx	r6
		grid_led_set_phase(i, 1, 0);
    5b56:	4622      	mov	r2, r4
    5b58:	2101      	movs	r1, #1
    5b5a:	4628      	mov	r0, r5
    5b5c:	47b8      	blx	r7
	for(uint8_t i = 0; i<led_number; i++){
    5b5e:	3501      	adds	r5, #1
    5b60:	b2ed      	uxtb	r5, r5
    5b62:	45a9      	cmp	r9, r5
    5b64:	d8c0      	bhi.n	5ae8 <grid_led_init+0x100>
}
    5b66:	2000      	movs	r0, #0
    5b68:	b003      	add	sp, #12
    5b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b6e:	bf00      	nop
    5b70:	20000cec 	.word	0x20000cec
    5b74:	000097f1 	.word	0x000097f1
    5b78:	20001c24 	.word	0x20001c24
    5b7c:	0000587d 	.word	0x0000587d
    5b80:	000059c5 	.word	0x000059c5
    5b84:	000059a1 	.word	0x000059a1
    5b88:	00005905 	.word	0x00005905
    5b8c:	0000593d 	.word	0x0000593d
    5b90:	00005971 	.word	0x00005971

00005b94 <grid_led_render>:
}




void grid_led_render(uint32_t num){
    5b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = led_smart_buffer[num+(led_number*layer)].color_min.r;
    5b98:	4b25      	ldr	r3, [pc, #148]	; (5c30 <grid_led_render+0x9c>)
    5b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5b9c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    5ba0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    5ba4:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    5ba8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    5bac:	4a21      	ldr	r2, [pc, #132]	; (5c34 <grid_led_render+0xa0>)
    5bae:	6814      	ldr	r4, [r2, #0]
    5bb0:	441c      	add	r4, r3
    5bb2:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    5bb4:	2300      	movs	r3, #0
	uint32_t mix_g = 0;
    5bb6:	461a      	mov	r2, r3
	uint32_t mix_r = 0;
    5bb8:	4619      	mov	r1, r3
		uint8_t min_g = led_smart_buffer[num+(led_number*layer)].color_min.g;
		uint8_t min_b = led_smart_buffer[num+(led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[led_smart_buffer[num+(led_number*layer)].pha];
    5bba:	f8df c080 	ldr.w	ip, [pc, #128]	; 5c3c <grid_led_render+0xa8>
    5bbe:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = led_smart_buffer[num+(led_number*layer)].color_max.r;
		uint8_t max_g = led_smart_buffer[num+(led_number*layer)].color_max.g;
		uint8_t max_b = led_smart_buffer[num+(led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[led_smart_buffer[num+(led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    5bc0:	f81c 9006 	ldrb.w	r9, [ip, r6]
		uint8_t mid_a = mid_lookup[led_smart_buffer[num+(led_number*layer)].pha];
    5bc4:	4466      	add	r6, ip
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    5bc6:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    5bca:	f896 8200 	ldrb.w	r8, [r6, #512]	; 0x200
    5bce:	7826      	ldrb	r6, [r4, #0]
    5bd0:	f894 a003 	ldrb.w	sl, [r4, #3]
    5bd4:	fb05 fa0a 	mul.w	sl, r5, sl
    5bd8:	fb09 aa06 	mla	sl, r9, r6, sl
    5bdc:	79a6      	ldrb	r6, [r4, #6]
    5bde:	fb08 a606 	mla	r6, r8, r6, sl
    5be2:	4431      	add	r1, r6
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    5be4:	7866      	ldrb	r6, [r4, #1]
    5be6:	f894 a004 	ldrb.w	sl, [r4, #4]
    5bea:	fb05 fa0a 	mul.w	sl, r5, sl
    5bee:	fb09 aa06 	mla	sl, r9, r6, sl
    5bf2:	79e6      	ldrb	r6, [r4, #7]
    5bf4:	fb08 a606 	mla	r6, r8, r6, sl
    5bf8:	4432      	add	r2, r6
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    5bfa:	78a6      	ldrb	r6, [r4, #2]
    5bfc:	f894 a005 	ldrb.w	sl, [r4, #5]
    5c00:	fb05 f50a 	mul.w	r5, r5, sl
    5c04:	fb09 5606 	mla	r6, r9, r6, r5
    5c08:	7a25      	ldrb	r5, [r4, #8]
    5c0a:	fb08 6505 	mla	r5, r8, r5, r6
    5c0e:	442b      	add	r3, r5
    5c10:	3f01      	subs	r7, #1
    5c12:	4474      	add	r4, lr
	for (uint8_t i = 0; i<2; i++){
    5c14:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    5c18:	d1d1      	bne.n	5bbe <grid_led_render+0x2a>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(num, mix_r, mix_g, mix_b);
    5c1a:	f3c3 2347 	ubfx	r3, r3, #9, #8
    5c1e:	f3c2 2247 	ubfx	r2, r2, #9, #8
    5c22:	f3c1 2147 	ubfx	r1, r1, #9, #8
    5c26:	4c04      	ldr	r4, [pc, #16]	; (5c38 <grid_led_render+0xa4>)
    5c28:	47a0      	blx	r4
    5c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c2e:	bf00      	nop
    5c30:	20000cec 	.word	0x20000cec
    5c34:	20001c24 	.word	0x20001c24
    5c38:	0000587d 	.word	0x0000587d
    5c3c:	20000040 	.word	0x20000040

00005c40 <grid_led_render_all>:
	
}


void grid_led_render_all(void){
    5c40:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<led_number; i++){
    5c42:	4b05      	ldr	r3, [pc, #20]	; (5c58 <grid_led_render_all+0x18>)
    5c44:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5c46:	b135      	cbz	r5, 5c56 <grid_led_render_all+0x16>
    5c48:	2400      	movs	r4, #0
		
		grid_led_render(i);
    5c4a:	4e04      	ldr	r6, [pc, #16]	; (5c5c <grid_led_render_all+0x1c>)
    5c4c:	4620      	mov	r0, r4
    5c4e:	47b0      	blx	r6
	for (uint32_t i=0; i<led_number; i++){
    5c50:	3401      	adds	r4, #1
    5c52:	42ac      	cmp	r4, r5
    5c54:	d1fa      	bne.n	5c4c <grid_led_render_all+0xc>
    5c56:	bd70      	pop	{r4, r5, r6, pc}
    5c58:	20000cec 	.word	0x20000cec
    5c5c:	00005b95 	.word	0x00005b95

00005c60 <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    5c60:	b538      	push	{r3, r4, r5, lr}
    5c62:	4604      	mov	r4, r0
    5c64:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    5c66:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    5c68:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    5c6a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    5c6c:	2300      	movs	r3, #0
    5c6e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    5c70:	0048      	lsls	r0, r1, #1
    5c72:	4b09      	ldr	r3, [pc, #36]	; (5c98 <grid_ain_channel_init+0x38>)
    5c74:	4798      	blx	r3
    5c76:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5c78:	b14d      	cbz	r5, 5c8e <grid_ain_channel_init+0x2e>
    5c7a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    5c7c:	4619      	mov	r1, r3
    5c7e:	6822      	ldr	r2, [r4, #0]
    5c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5c84:	3301      	adds	r3, #1
    5c86:	b2db      	uxtb	r3, r3
    5c88:	7922      	ldrb	r2, [r4, #4]
    5c8a:	429a      	cmp	r2, r3
    5c8c:	d8f7      	bhi.n	5c7e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    5c8e:	2000      	movs	r0, #0
    5c90:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    5c92:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    5c94:	bd38      	pop	{r3, r4, r5, pc}
    5c96:	bf00      	nop
    5c98:	000097f1 	.word	0x000097f1

00005c9c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    5c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ca0:	4605      	mov	r5, r0
    5ca2:	460e      	mov	r6, r1
    5ca4:	4691      	mov	r9, r2
    5ca6:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    5ca8:	4c0e      	ldr	r4, [pc, #56]	; (5ce4 <grid_ain_init+0x48>)
    5caa:	f884 0444 	strb.w	r0, [r4, #1092]	; 0x444
	ain_channel_buffer_depth = depth;
    5cae:	f884 1445 	strb.w	r1, [r4, #1093]	; 0x445
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    5cb2:	0100      	lsls	r0, r0, #4
    5cb4:	4b0c      	ldr	r3, [pc, #48]	; (5ce8 <grid_ain_init+0x4c>)
    5cb6:	4798      	blx	r3
    5cb8:	f8c4 0448 	str.w	r0, [r4, #1096]	; 0x448

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    5cbc:	b175      	cbz	r5, 5cdc <grid_ain_init+0x40>
    5cbe:	4604      	mov	r4, r0
    5cc0:	3d01      	subs	r5, #1
    5cc2:	b2ed      	uxtb	r5, r5
    5cc4:	3501      	adds	r5, #1
    5cc6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    5cca:	4f08      	ldr	r7, [pc, #32]	; (5cec <grid_ain_init+0x50>)
    5ccc:	4643      	mov	r3, r8
    5cce:	464a      	mov	r2, r9
    5cd0:	4631      	mov	r1, r6
    5cd2:	4620      	mov	r0, r4
    5cd4:	47b8      	blx	r7
    5cd6:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    5cd8:	42ac      	cmp	r4, r5
    5cda:	d1f7      	bne.n	5ccc <grid_ain_init+0x30>
	}

	return 0;
}
    5cdc:	2000      	movs	r0, #0
    5cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ce2:	bf00      	nop
    5ce4:	20000cec 	.word	0x20000cec
    5ce8:	000097f1 	.word	0x000097f1
    5cec:	00005c61 	.word	0x00005c61

00005cf0 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    5cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    5cf4:	0100      	lsls	r0, r0, #4
    5cf6:	4b3c      	ldr	r3, [pc, #240]	; (5de8 <grid_ain_add_sample+0xf8>)
    5cf8:	f8d3 a448 	ldr.w	sl, [r3, #1096]	; 0x448
    5cfc:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    5d00:	f89c 6004 	ldrb.w	r6, [ip, #4]
    5d04:	2e00      	cmp	r6, #0
    5d06:	d05b      	beq.n	5dc0 <grid_ain_add_sample+0xd0>
    5d08:	f85a 5000 	ldr.w	r5, [sl, r0]
    5d0c:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    5d0e:	2200      	movs	r2, #0
    5d10:	4690      	mov	r8, r2
    5d12:	4691      	mov	r9, r2
    5d14:	4696      	mov	lr, r2
    5d16:	f64f 77ff 	movw	r7, #65535	; 0xffff
    5d1a:	4614      	mov	r4, r2
    5d1c:	fa5f fb82 	uxtb.w	fp, r2
    5d20:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    5d24:	441c      	add	r4, r3
		
		if (current > maximum){
    5d26:	4573      	cmp	r3, lr
    5d28:	bf84      	itt	hi
    5d2a:	46d8      	movhi	r8, fp
			maximum = current;
    5d2c:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    5d2e:	42bb      	cmp	r3, r7
    5d30:	bf3c      	itt	cc
    5d32:	46d9      	movcc	r9, fp
			minimum = current;
    5d34:	461f      	movcc	r7, r3
    5d36:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    5d38:	b2d3      	uxtb	r3, r2
    5d3a:	42b3      	cmp	r3, r6
    5d3c:	d3ee      	bcc.n	5d1c <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    5d3e:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    5d42:	b2b6      	uxth	r6, r6
    5d44:	428e      	cmp	r6, r1
    5d46:	d23f      	bcs.n	5dc8 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    5d48:	f85a 3000 	ldr.w	r3, [sl, r0]
    5d4c:	440c      	add	r4, r1
    5d4e:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    5d52:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    5d54:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    5d58:	f89c 3004 	ldrb.w	r3, [ip, #4]
    5d5c:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    5d60:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5d64:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    5d68:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    5d6a:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    5d6e:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5d70:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    5d72:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    5d74:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    5d78:	b29b      	uxth	r3, r3
    5d7a:	408b      	lsls	r3, r1
    5d7c:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    5d7e:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    5d82:	1b92      	subs	r2, r2, r6
    5d84:	2a00      	cmp	r2, #0
    5d86:	bfb8      	it	lt
    5d88:	4252      	neglt	r2, r2
    5d8a:	2601      	movs	r6, #1
    5d8c:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5d90:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    5d94:	42be      	cmp	r6, r7
    5d96:	d020      	beq.n	5dda <grid_ain_add_sample+0xea>
    5d98:	4282      	cmp	r2, r0
    5d9a:	dc08      	bgt.n	5dae <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    5d9c:	2201      	movs	r2, #1
    5d9e:	fa02 f505 	lsl.w	r5, r2, r5
    5da2:	fa02 f101 	lsl.w	r1, r2, r1
    5da6:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5da8:	428f      	cmp	r7, r1
    5daa:	d000      	beq.n	5dae <grid_ain_add_sample+0xbe>
    5dac:	b9c7      	cbnz	r7, 5de0 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    5dae:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    5db2:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    5db6:	2001      	movs	r0, #1
    5db8:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    5dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    5dc0:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    5dc2:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    5dc4:	2400      	movs	r4, #0
    5dc6:	e7ba      	b.n	5d3e <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    5dc8:	f85a 3000 	ldr.w	r3, [sl, r0]
    5dcc:	440c      	add	r4, r1
    5dce:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    5dd2:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    5dd4:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    5dd8:	e7be      	b.n	5d58 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    5dda:	2000      	movs	r0, #0
    5ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5de0:	2000      	movs	r0, #0
	}
	
}
    5de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5de6:	bf00      	nop
    5de8:	20000cec 	.word	0x20000cec

00005dec <convert_cb_ADC_1>:
{
    5dec:	b570      	push	{r4, r5, r6, lr}
    5dee:	b082      	sub	sp, #8
	ADC_1_conversion_ready = 1;
    5df0:	2201      	movs	r2, #1
    5df2:	4b49      	ldr	r3, [pc, #292]	; (5f18 <convert_cb_ADC_1+0x12c>)
    5df4:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
	while(ADC_0_conversion_ready==0){}
    5df8:	461a      	mov	r2, r3
    5dfa:	7813      	ldrb	r3, [r2, #0]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d0fc      	beq.n	5dfa <convert_cb_ADC_1+0xe>
	while(ADC_1_conversion_ready==0){}
    5e00:	4a45      	ldr	r2, [pc, #276]	; (5f18 <convert_cb_ADC_1+0x12c>)
    5e02:	f892 344c 	ldrb.w	r3, [r2, #1100]	; 0x44c
    5e06:	2b00      	cmp	r3, #0
    5e08:	d0fb      	beq.n	5e02 <convert_cb_ADC_1+0x16>
	uint16_t adcresult_0 = 0;
    5e0a:	2300      	movs	r3, #0
    5e0c:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    5e10:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    5e14:	4940      	ldr	r1, [pc, #256]	; (5f18 <convert_cb_ADC_1+0x12c>)
    5e16:	f891 344d 	ldrb.w	r3, [r1, #1101]	; 0x44d
    5e1a:	4a40      	ldr	r2, [pc, #256]	; (5f1c <convert_cb_ADC_1+0x130>)
    5e1c:	18d0      	adds	r0, r2, r3
    5e1e:	7a05      	ldrb	r5, [r0, #8]
	uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    5e20:	5cd4      	ldrb	r4, [r2, r3]
	grid_module_mux++;
    5e22:	3301      	adds	r3, #1
    5e24:	b2db      	uxtb	r3, r3
	grid_module_mux%=8;
    5e26:	f003 0207 	and.w	r2, r3, #7
    5e2a:	f881 244d 	strb.w	r2, [r1, #1101]	; 0x44d
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    5e2e:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e32:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    5e36:	4b3a      	ldr	r3, [pc, #232]	; (5f20 <convert_cb_ADC_1+0x134>)
    5e38:	bf14      	ite	ne
    5e3a:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e3e:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    5e42:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e46:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    5e4a:	4b35      	ldr	r3, [pc, #212]	; (5f20 <convert_cb_ADC_1+0x134>)
    5e4c:	bf14      	ite	ne
    5e4e:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e52:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    5e56:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    5e5c:	4b30      	ldr	r3, [pc, #192]	; (5f20 <convert_cb_ADC_1+0x134>)
    5e5e:	bf14      	ite	ne
    5e60:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e64:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    5e68:	2302      	movs	r3, #2
    5e6a:	f10d 0206 	add.w	r2, sp, #6
    5e6e:	2100      	movs	r1, #0
    5e70:	482c      	ldr	r0, [pc, #176]	; (5f24 <convert_cb_ADC_1+0x138>)
    5e72:	4e2d      	ldr	r6, [pc, #180]	; (5f28 <convert_cb_ADC_1+0x13c>)
    5e74:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    5e76:	2302      	movs	r3, #2
    5e78:	aa01      	add	r2, sp, #4
    5e7a:	2100      	movs	r1, #0
    5e7c:	482b      	ldr	r0, [pc, #172]	; (5f2c <convert_cb_ADC_1+0x140>)
    5e7e:	47b0      	blx	r6
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5e80:	4b25      	ldr	r3, [pc, #148]	; (5f18 <convert_cb_ADC_1+0x12c>)
    5e82:	442b      	add	r3, r5
    5e84:	f993 2450 	ldrsb.w	r2, [r3, #1104]	; 0x450
	if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_REVERSED)){
    5e88:	f012 0f01 	tst.w	r2, #1
    5e8c:	d004      	beq.n	5e98 <convert_cb_ADC_1+0xac>
		adcresult_0 = 65535 - adcresult_0;
    5e8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e92:	43db      	mvns	r3, r3
    5e94:	f8ad 3006 	strh.w	r3, [sp, #6]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5e98:	4b1f      	ldr	r3, [pc, #124]	; (5f18 <convert_cb_ADC_1+0x12c>)
    5e9a:	4423      	add	r3, r4
    5e9c:	f993 3450 	ldrsb.w	r3, [r3, #1104]	; 0x450
	if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_REVERSED)){
    5ea0:	f013 0f01 	tst.w	r3, #1
    5ea4:	d004      	beq.n	5eb0 <convert_cb_ADC_1+0xc4>
		adcresult_1 = 65535 - adcresult_1;
    5ea6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5eaa:	43c9      	mvns	r1, r1
    5eac:	f8ad 1004 	strh.w	r1, [sp, #4]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5eb0:	f002 0202 	and.w	r2, r2, #2
	if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_BINARY)){
    5eb4:	b252      	sxtb	r2, r2
    5eb6:	b152      	cbz	r2, 5ece <convert_cb_ADC_1+0xe2>
		adcresult_0 = (adcresult_0>10000)*65535;
    5eb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5ebc:	f242 7110 	movw	r1, #10000	; 0x2710
    5ec0:	428a      	cmp	r2, r1
    5ec2:	f04f 32ff 	mov.w	r2, #4294967295
    5ec6:	bf98      	it	ls
    5ec8:	2200      	movls	r2, #0
    5eca:	f8ad 2006 	strh.w	r2, [sp, #6]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    5ece:	f003 0302 	and.w	r3, r3, #2
	if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_BINARY)){
    5ed2:	b25b      	sxtb	r3, r3
    5ed4:	b153      	cbz	r3, 5eec <convert_cb_ADC_1+0x100>
		adcresult_1 = (adcresult_1>10000)*65535;
    5ed6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5eda:	f242 7210 	movw	r2, #10000	; 0x2710
    5ede:	4293      	cmp	r3, r2
    5ee0:	f04f 33ff 	mov.w	r3, #4294967295
    5ee4:	bf98      	it	ls
    5ee6:	2300      	movls	r3, #0
    5ee8:	f8ad 3004 	strh.w	r3, [sp, #4]
	grid_ain_add_sample(adc_index_0, adcresult_0);
    5eec:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5ef0:	4628      	mov	r0, r5
    5ef2:	4d0f      	ldr	r5, [pc, #60]	; (5f30 <convert_cb_ADC_1+0x144>)
    5ef4:	47a8      	blx	r5
	grid_ain_add_sample(adc_index_1, adcresult_1);
    5ef6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5efa:	4620      	mov	r0, r4
    5efc:	47a8      	blx	r5
	ADC_0_conversion_ready = 0;	
    5efe:	4b06      	ldr	r3, [pc, #24]	; (5f18 <convert_cb_ADC_1+0x12c>)
    5f00:	2200      	movs	r2, #0
    5f02:	701a      	strb	r2, [r3, #0]
	ADC_1_conversion_ready = 0;
    5f04:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
	adc_async_start_conversion(&ADC_0);			
    5f08:	4806      	ldr	r0, [pc, #24]	; (5f24 <convert_cb_ADC_1+0x138>)
    5f0a:	4c0a      	ldr	r4, [pc, #40]	; (5f34 <convert_cb_ADC_1+0x148>)
    5f0c:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    5f0e:	4807      	ldr	r0, [pc, #28]	; (5f2c <convert_cb_ADC_1+0x140>)
    5f10:	47a0      	blx	r4
}
    5f12:	b002      	add	sp, #8
    5f14:	bd70      	pop	{r4, r5, r6, pc}
    5f16:	bf00      	nop
    5f18:	20000cec 	.word	0x20000cec
    5f1c:	0000a678 	.word	0x0000a678
    5f20:	41008000 	.word	0x41008000
    5f24:	200013e8 	.word	0x200013e8
    5f28:	000011ad 	.word	0x000011ad
    5f2c:	200015b8 	.word	0x200015b8
    5f30:	00005cf1 	.word	0x00005cf1
    5f34:	0000128d 	.word	0x0000128d

00005f38 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    5f38:	4b03      	ldr	r3, [pc, #12]	; (5f48 <grid_ain_get_changed+0x10>)
	return instance->result_changed;
    5f3a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
    5f3e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    5f42:	7b00      	ldrb	r0, [r0, #12]
    5f44:	4770      	bx	lr
    5f46:	bf00      	nop
    5f48:	20000cec 	.word	0x20000cec

00005f4c <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    5f4c:	4b04      	ldr	r3, [pc, #16]	; (5f60 <grid_ain_get_average+0x14>)
    5f4e:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
    5f52:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    5f56:	2300      	movs	r3, #0
    5f58:	8183      	strh	r3, [r0, #12]
	return instance->result_value;
}
    5f5a:	8900      	ldrh	r0, [r0, #8]
    5f5c:	4770      	bx	lr
    5f5e:	bf00      	nop
    5f60:	20000cec 	.word	0x20000cec

00005f64 <grid_sys_error_intensity>:



uint8_t grid_sys_error_intensity(struct grid_sys_model* mod){
	
	if (mod->error_style == 0){ // TRIANGLE
    5f64:	f890 3208 	ldrb.w	r3, [r0, #520]	; 0x208
    5f68:	b123      	cbz	r3, 5f74 <grid_sys_error_intensity+0x10>
		
		return (125-abs(mod->error_state/2-125))/2;
	}
	else if (mod->error_style == 1){ // SQUARE
    5f6a:	2b01      	cmp	r3, #1
    5f6c:	d010      	beq.n	5f90 <grid_sys_error_intensity+0x2c>
		
		return 255*(mod->error_state/250%2);
	}
	else if (mod->error_style == 2){ // CONST
    5f6e:	2b02      	cmp	r3, #2
    5f70:	d017      	beq.n	5fa2 <grid_sys_error_intensity+0x3e>
		
		return 255*(mod->error_state>100);
	}
	
	
}
    5f72:	4770      	bx	lr
		return (125-abs(mod->error_state/2-125))/2;
    5f74:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
    5f78:	0840      	lsrs	r0, r0, #1
    5f7a:	387d      	subs	r0, #125	; 0x7d
    5f7c:	2800      	cmp	r0, #0
    5f7e:	bfb8      	it	lt
    5f80:	4240      	neglt	r0, r0
    5f82:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    5f86:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    5f8a:	f3c0 0047 	ubfx	r0, r0, #1, #8
    5f8e:	4770      	bx	lr
		return 255*(mod->error_state/250%2);
    5f90:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
    5f94:	4b06      	ldr	r3, [pc, #24]	; (5fb0 <grid_sys_error_intensity+0x4c>)
    5f96:	fba3 3000 	umull	r3, r0, r3, r0
    5f9a:	f340 1000 	sbfx	r0, r0, #4, #1
    5f9e:	b2c0      	uxtb	r0, r0
    5fa0:	4770      	bx	lr
		return 255*(mod->error_state>100);
    5fa2:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
    5fa6:	2864      	cmp	r0, #100	; 0x64
    5fa8:	bf8c      	ite	hi
    5faa:	20ff      	movhi	r0, #255	; 0xff
    5fac:	2000      	movls	r0, #0
    5fae:	4770      	bx	lr
    5fb0:	10624dd3 	.word	0x10624dd3

00005fb4 <grid_sys_read_hex_char_value>:
uint8_t grid_sys_error_get_color_b(struct grid_sys_model* mod){
	
	return mod->color_blue;
}

uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    5fb4:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    5fb6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    5fba:	b2d8      	uxtb	r0, r3
    5fbc:	2809      	cmp	r0, #9
    5fbe:	d90d      	bls.n	5fdc <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    5fc0:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    5fc4:	b2db      	uxtb	r3, r3
    5fc6:	2b05      	cmp	r3, #5
    5fc8:	d903      	bls.n	5fd2 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    5fca:	b131      	cbz	r1, 5fda <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    5fcc:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    5fce:	2000      	movs	r0, #0
    5fd0:	4770      	bx	lr
		result = ascii - 97 + 10;
    5fd2:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    5fd6:	b2c0      	uxtb	r0, r0
    5fd8:	4770      	bx	lr
	uint8_t result = 0;
    5fda:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    5fdc:	4770      	bx	lr
	...

00005fe0 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    5fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    5fe4:	b1c1      	cbz	r1, 6018 <grid_sys_read_hex_string_value+0x38>
    5fe6:	4690      	mov	r8, r2
    5fe8:	1e45      	subs	r5, r0, #1
    5fea:	1e4b      	subs	r3, r1, #1
    5fec:	009c      	lsls	r4, r3, #2
    5fee:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    5ff2:	3f02      	subs	r7, #2
    5ff4:	b2db      	uxtb	r3, r3
    5ff6:	1aff      	subs	r7, r7, r3
    5ff8:	00bf      	lsls	r7, r7, #2
    5ffa:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    5ffc:	f8df 901c 	ldr.w	r9, [pc, #28]	; 601c <grid_sys_read_hex_string_value+0x3c>
    6000:	4641      	mov	r1, r8
    6002:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    6006:	47c8      	blx	r9
    6008:	40a0      	lsls	r0, r4
    600a:	4406      	add	r6, r0
    600c:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    600e:	42bc      	cmp	r4, r7
    6010:	d1f6      	bne.n	6000 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    6012:	4630      	mov	r0, r6
    6014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    6018:	2600      	movs	r6, #0
	return result;
    601a:	e7fa      	b.n	6012 <grid_sys_read_hex_string_value+0x32>
    601c:	00005fb5 	.word	0x00005fb5

00006020 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    6020:	b530      	push	{r4, r5, lr}
    6022:	b085      	sub	sp, #20
    6024:	4605      	mov	r5, r0
    6026:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    6028:	4909      	ldr	r1, [pc, #36]	; (6050 <grid_sys_write_hex_string_value+0x30>)
    602a:	a801      	add	r0, sp, #4
    602c:	4b09      	ldr	r3, [pc, #36]	; (6054 <grid_sys_write_hex_string_value+0x34>)
    602e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    6030:	b164      	cbz	r4, 604c <grid_sys_write_hex_string_value+0x2c>
    6032:	ab04      	add	r3, sp, #16
    6034:	1b1a      	subs	r2, r3, r4
    6036:	3a05      	subs	r2, #5
    6038:	1e6b      	subs	r3, r5, #1
    603a:	1e60      	subs	r0, r4, #1
    603c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    6040:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    6044:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    6048:	4283      	cmp	r3, r0
    604a:	d1f9      	bne.n	6040 <grid_sys_write_hex_string_value+0x20>
	}

}
    604c:	b005      	add	sp, #20
    604e:	bd30      	pop	{r4, r5, pc}
    6050:	0000a6e0 	.word	0x0000a6e0
    6054:	000099a1 	.word	0x000099a1

00006058 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    6058:	4b36      	ldr	r3, [pc, #216]	; (6134 <grid_sys_get_hwcfg+0xdc>)
    605a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    605e:	f1b3 3fff 	cmp.w	r3, #4294967295
    6062:	d003      	beq.n	606c <grid_sys_get_hwcfg+0x14>
	}

	
	return grid_sys_hwfcg;

}
    6064:	4b33      	ldr	r3, [pc, #204]	; (6134 <grid_sys_get_hwcfg+0xdc>)
    6066:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    606a:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    606c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6070:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6072:	4b31      	ldr	r3, [pc, #196]	; (6138 <grid_sys_get_hwcfg+0xe0>)
    6074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    6078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    607c:	492f      	ldr	r1, [pc, #188]	; (613c <grid_sys_get_hwcfg+0xe4>)
    607e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    6082:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    6086:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    608a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    608e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6092:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    6096:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    609a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    609e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    60a2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    60a6:	4926      	ldr	r1, [pc, #152]	; (6140 <grid_sys_get_hwcfg+0xe8>)
    60a8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    60ac:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    60b0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    60b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    60b8:	2001      	movs	r0, #1
    60ba:	4b22      	ldr	r3, [pc, #136]	; (6144 <grid_sys_get_hwcfg+0xec>)
    60bc:	4798      	blx	r3
    60be:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    60c0:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    60c2:	4d1d      	ldr	r5, [pc, #116]	; (6138 <grid_sys_get_hwcfg+0xe0>)
    60c4:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    60c8:	4f1e      	ldr	r7, [pc, #120]	; (6144 <grid_sys_get_hwcfg+0xec>)
    60ca:	e00c      	b.n	60e6 <grid_sys_get_hwcfg+0x8e>
			if(i!=7){
    60cc:	2e07      	cmp	r6, #7
    60ce:	d027      	beq.n	6120 <grid_sys_get_hwcfg+0xc8>
    60d0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    60d4:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    60d8:	2001      	movs	r0, #1
    60da:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    60dc:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    60e0:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    60e2:	2e08      	cmp	r6, #8
    60e4:	d01c      	beq.n	6120 <grid_sys_get_hwcfg+0xc8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    60e6:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    60ea:	2001      	movs	r0, #1
    60ec:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    60ee:	a801      	add	r0, sp, #4
    60f0:	4b15      	ldr	r3, [pc, #84]	; (6148 <grid_sys_get_hwcfg+0xf0>)
    60f2:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    60f4:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    60f8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    60fc:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6100:	405c      	eors	r4, r3
    6102:	4014      	ands	r4, r2
    6104:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    6106:	a801      	add	r0, sp, #4
    6108:	4b10      	ldr	r3, [pc, #64]	; (614c <grid_sys_get_hwcfg+0xf4>)
    610a:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    610c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    6110:	d0dc      	beq.n	60cc <grid_sys_get_hwcfg+0x74>
				hwcfg_value |= (1<<i);
    6112:	2301      	movs	r3, #1
    6114:	40b3      	lsls	r3, r6
    6116:	ea43 0808 	orr.w	r8, r3, r8
    611a:	fa5f f888 	uxtb.w	r8, r8
    611e:	e7d5      	b.n	60cc <grid_sys_get_hwcfg+0x74>
		grid_sys_hwfcg = hwcfg_value;
    6120:	4b04      	ldr	r3, [pc, #16]	; (6134 <grid_sys_get_hwcfg+0xdc>)
    6122:	f8c3 8300 	str.w	r8, [r3, #768]	; 0x300
}
    6126:	4b03      	ldr	r3, [pc, #12]	; (6134 <grid_sys_get_hwcfg+0xdc>)
    6128:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    612c:	b003      	add	sp, #12
    612e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6132:	bf00      	nop
    6134:	20000040 	.word	0x20000040
    6138:	41008000 	.word	0x41008000
    613c:	40002000 	.word	0x40002000
    6140:	40028000 	.word	0x40028000
    6144:	00001335 	.word	0x00001335
    6148:	000012b5 	.word	0x000012b5
    614c:	000012c3 	.word	0x000012c3

00006150 <tx_cb_USART_GRID>:
	tx_cb_USART_GRID(&GRID_PORT_W);
}

void tx_cb_USART_GRID(GRID_PORT_t* const por){
	
	grid_sys_tx_counter[por->direction - 0x11]++;
    6150:	7943      	ldrb	r3, [r0, #5]
    6152:	f1a3 0211 	sub.w	r2, r3, #17
    6156:	4b18      	ldr	r3, [pc, #96]	; (61b8 <tx_cb_USART_GRID+0x68>)
    6158:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    615c:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
    6160:	3201      	adds	r2, #1
    6162:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464

	
	if(por->tx_double_buffer[1] == GRID_MSG_BROADCAST){
    6166:	7f43      	ldrb	r3, [r0, #29]
    6168:	2b0f      	cmp	r3, #15
    616a:	d00d      	beq.n	6188 <tx_cb_USART_GRID+0x38>
			por->tx_double_buffer[i] = 0;
		}
		
		por->tx_double_buffer_status = 0;
	}
	else if (por->tx_double_buffer[1] == GRID_MSG_DIRECT){
    616c:	2b0e      	cmp	r3, #14
    616e:	d017      	beq.n	61a0 <tx_cb_USART_GRID+0x50>
    6170:	f100 031b 	add.w	r3, r0, #27
    6174:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
		por->tx_double_buffer_status = 0;
	}
	else{
		//TRAP
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    6178:	2200      	movs	r2, #0
    617a:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    617e:	428b      	cmp	r3, r1
    6180:	d1fb      	bne.n	617a <tx_cb_USART_GRID+0x2a>
		}
		
		por->tx_double_buffer_status = 0;
    6182:	2300      	movs	r3, #0
    6184:	8103      	strh	r3, [r0, #8]
    6186:	4770      	bx	lr
    6188:	f100 031b 	add.w	r3, r0, #27
    618c:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    6190:	2200      	movs	r2, #0
    6192:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    6196:	428b      	cmp	r3, r1
    6198:	d1fb      	bne.n	6192 <tx_cb_USART_GRID+0x42>
		por->tx_double_buffer_status = 0;
    619a:	2300      	movs	r3, #0
    619c:	8103      	strh	r3, [r0, #8]
    619e:	4770      	bx	lr
    61a0:	f100 031b 	add.w	r3, r0, #27
    61a4:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    61a8:	2200      	movs	r2, #0
    61aa:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    61ae:	428b      	cmp	r3, r1
    61b0:	d1fb      	bne.n	61aa <tx_cb_USART_GRID+0x5a>
		por->tx_double_buffer_status = 0;
    61b2:	2300      	movs	r3, #0
    61b4:	8103      	strh	r3, [r0, #8]
    61b6:	4770      	bx	lr
    61b8:	20000cec 	.word	0x20000cec

000061bc <tx_cb_USART_GRID_W>:
{
    61bc:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    61be:	4802      	ldr	r0, [pc, #8]	; (61c8 <tx_cb_USART_GRID_W+0xc>)
    61c0:	4b02      	ldr	r3, [pc, #8]	; (61cc <tx_cb_USART_GRID_W+0x10>)
    61c2:	4798      	blx	r3
    61c4:	bd08      	pop	{r3, pc}
    61c6:	bf00      	nop
    61c8:	20002214 	.word	0x20002214
    61cc:	00006151 	.word	0x00006151

000061d0 <tx_cb_USART_GRID_S>:
{
    61d0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    61d2:	4802      	ldr	r0, [pc, #8]	; (61dc <tx_cb_USART_GRID_S+0xc>)
    61d4:	4b02      	ldr	r3, [pc, #8]	; (61e0 <tx_cb_USART_GRID_S+0x10>)
    61d6:	4798      	blx	r3
    61d8:	bd08      	pop	{r3, pc}
    61da:	bf00      	nop
    61dc:	200023fc 	.word	0x200023fc
    61e0:	00006151 	.word	0x00006151

000061e4 <tx_cb_USART_GRID_E>:
{
    61e4:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    61e6:	4802      	ldr	r0, [pc, #8]	; (61f0 <tx_cb_USART_GRID_E+0xc>)
    61e8:	4b02      	ldr	r3, [pc, #8]	; (61f4 <tx_cb_USART_GRID_E+0x10>)
    61ea:	4798      	blx	r3
    61ec:	bd08      	pop	{r3, pc}
    61ee:	bf00      	nop
    61f0:	20002890 	.word	0x20002890
    61f4:	00006151 	.word	0x00006151

000061f8 <tx_cb_USART_GRID_N>:
{
    61f8:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    61fa:	4802      	ldr	r0, [pc, #8]	; (6204 <tx_cb_USART_GRID_N+0xc>)
    61fc:	4b02      	ldr	r3, [pc, #8]	; (6208 <tx_cb_USART_GRID_N+0x10>)
    61fe:	4798      	blx	r3
    6200:	bd08      	pop	{r3, pc}
    6202:	bf00      	nop
    6204:	20001a40 	.word	0x20001a40
    6208:	00006151 	.word	0x00006151

0000620c <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    620c:	2903      	cmp	r1, #3
    620e:	d009      	beq.n	6224 <grid_msg_get_checksum+0x18>
    6210:	1e43      	subs	r3, r0, #1
    6212:	3904      	subs	r1, #4
    6214:	4401      	add	r1, r0
    6216:	2000      	movs	r0, #0
		checksum ^= str[i];
    6218:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    621c:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    621e:	428b      	cmp	r3, r1
    6220:	d1fa      	bne.n	6218 <grid_msg_get_checksum+0xc>
    6222:	4770      	bx	lr
	uint8_t checksum = 0;
    6224:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    6226:	4770      	bx	lr

00006228 <grid_msg_set_checksum>:

uint8_t grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    6228:	b530      	push	{r4, r5, lr}
    622a:	b083      	sub	sp, #12
    622c:	4604      	mov	r4, r0
    622e:	460d      	mov	r5, r1
	
	uint8_t checksum_string[4];

	sprintf(checksum_string, "%02x", checksum);
    6230:	4907      	ldr	r1, [pc, #28]	; (6250 <grid_msg_set_checksum+0x28>)
    6232:	a801      	add	r0, sp, #4
    6234:	4b07      	ldr	r3, [pc, #28]	; (6254 <grid_msg_set_checksum+0x2c>)
    6236:	4798      	blx	r3

	message[length-3] = checksum_string[0];
    6238:	1961      	adds	r1, r4, r5
    623a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    623e:	f801 3c03 	strb.w	r3, [r1, #-3]
	message[length-2] = checksum_string[1];
    6242:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6246:	f801 3c02 	strb.w	r3, [r1, #-2]
	
}
    624a:	b003      	add	sp, #12
    624c:	bd30      	pop	{r4, r5, pc}
    624e:	bf00      	nop
    6250:	0000a6e8 	.word	0x0000a6e8
    6254:	000099a1 	.word	0x000099a1

00006258 <grid_msg_get_id>:


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    6258:	b500      	push	{lr}
    625a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    625c:	aa02      	add	r2, sp, #8
    625e:	2300      	movs	r3, #0
    6260:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    6264:	2102      	movs	r1, #2
    6266:	3004      	adds	r0, #4
    6268:	4b02      	ldr	r3, [pc, #8]	; (6274 <grid_msg_get_id+0x1c>)
    626a:	4798      	blx	r3
	
}
    626c:	b2c0      	uxtb	r0, r0
    626e:	b003      	add	sp, #12
    6270:	f85d fb04 	ldr.w	pc, [sp], #4
    6274:	00005fe1 	.word	0x00005fe1

00006278 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    6278:	b500      	push	{lr}
    627a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    627c:	aa02      	add	r2, sp, #8
    627e:	2300      	movs	r3, #0
    6280:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    6284:	2102      	movs	r1, #2
    6286:	3006      	adds	r0, #6
    6288:	4b02      	ldr	r3, [pc, #8]	; (6294 <grid_msg_get_dx+0x1c>)
    628a:	4798      	blx	r3
	
}
    628c:	b2c0      	uxtb	r0, r0
    628e:	b003      	add	sp, #12
    6290:	f85d fb04 	ldr.w	pc, [sp], #4
    6294:	00005fe1 	.word	0x00005fe1

00006298 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    6298:	b500      	push	{lr}
    629a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    629c:	aa02      	add	r2, sp, #8
    629e:	2300      	movs	r3, #0
    62a0:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    62a4:	2102      	movs	r1, #2
    62a6:	3008      	adds	r0, #8
    62a8:	4b02      	ldr	r3, [pc, #8]	; (62b4 <grid_msg_get_dy+0x1c>)
    62aa:	4798      	blx	r3

}
    62ac:	b2c0      	uxtb	r0, r0
    62ae:	b003      	add	sp, #12
    62b0:	f85d fb04 	ldr.w	pc, [sp], #4
    62b4:	00005fe1 	.word	0x00005fe1

000062b8 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    62b8:	b500      	push	{lr}
    62ba:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    62bc:	aa02      	add	r2, sp, #8
    62be:	2300      	movs	r3, #0
    62c0:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    62c4:	2102      	movs	r1, #2
    62c6:	300a      	adds	r0, #10
    62c8:	4b02      	ldr	r3, [pc, #8]	; (62d4 <grid_msg_get_age+0x1c>)
    62ca:	4798      	blx	r3
	
}
    62cc:	b2c0      	uxtb	r0, r0
    62ce:	b003      	add	sp, #12
    62d0:	f85d fb04 	ldr.w	pc, [sp], #4
    62d4:	00005fe1 	.word	0x00005fe1

000062d8 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    62d8:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    62da:	460a      	mov	r2, r1
    62dc:	2102      	movs	r1, #2
    62de:	3004      	adds	r0, #4
    62e0:	4b01      	ldr	r3, [pc, #4]	; (62e8 <grid_msg_set_id+0x10>)
    62e2:	4798      	blx	r3
    62e4:	bd08      	pop	{r3, pc}
    62e6:	bf00      	nop
    62e8:	00006021 	.word	0x00006021

000062ec <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    62ec:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    62ee:	460a      	mov	r2, r1
    62f0:	2102      	movs	r1, #2
    62f2:	3006      	adds	r0, #6
    62f4:	4b01      	ldr	r3, [pc, #4]	; (62fc <grid_msg_set_dx+0x10>)
    62f6:	4798      	blx	r3
    62f8:	bd08      	pop	{r3, pc}
    62fa:	bf00      	nop
    62fc:	00006021 	.word	0x00006021

00006300 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    6300:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    6302:	460a      	mov	r2, r1
    6304:	2102      	movs	r1, #2
    6306:	3008      	adds	r0, #8
    6308:	4b01      	ldr	r3, [pc, #4]	; (6310 <grid_msg_set_dy+0x10>)
    630a:	4798      	blx	r3
    630c:	bd08      	pop	{r3, pc}
    630e:	bf00      	nop
    6310:	00006021 	.word	0x00006021

00006314 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    6314:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    6316:	460a      	mov	r2, r1
    6318:	2102      	movs	r1, #2
    631a:	300a      	adds	r0, #10
    631c:	4b01      	ldr	r3, [pc, #4]	; (6324 <grid_msg_set_age+0x10>)
    631e:	4798      	blx	r3
    6320:	bd08      	pop	{r3, pc}
    6322:	bf00      	nop
    6324:	00006021 	.word	0x00006021

00006328 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    6328:	6843      	ldr	r3, [r0, #4]
    632a:	4299      	cmp	r1, r3
    632c:	d00e      	beq.n	634c <grid_msg_find_recent+0x24>
    632e:	2301      	movs	r3, #1
    6330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    6334:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    6338:	6852      	ldr	r2, [r2, #4]
    633a:	428a      	cmp	r2, r1
    633c:	d008      	beq.n	6350 <grid_msg_find_recent+0x28>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    633e:	3301      	adds	r3, #1
    6340:	b2db      	uxtb	r3, r3
    6342:	f013 0f80 	tst.w	r3, #128	; 0x80
    6346:	d0f3      	beq.n	6330 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    6348:	2000      	movs	r0, #0
    634a:	4770      	bx	lr
			return 1;
    634c:	2001      	movs	r0, #1
    634e:	4770      	bx	lr
    6350:	2001      	movs	r0, #1
}
    6352:	4770      	bx	lr

00006354 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    6354:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
    6358:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    635a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    635e:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    6362:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6366:	6041      	str	r1, [r0, #4]
    6368:	4770      	bx	lr
	...

0000636c <grid_buffer_init>:
uint8_t usb_tx_double_buffer[GRID_BUFFER_TX_SIZE];
uint8_t usb_rx_double_buffer[GRID_BUFFER_RX_SIZE];



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    636c:	b538      	push	{r3, r4, r5, lr}
    636e:	4604      	mov	r4, r0
    6370:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    6372:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    6374:	2300      	movs	r3, #0
    6376:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    6378:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    637a:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    637c:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    637e:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    6380:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    6382:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    6384:	4608      	mov	r0, r1
    6386:	4b08      	ldr	r3, [pc, #32]	; (63a8 <grid_buffer_init+0x3c>)
    6388:	4798      	blx	r3
    638a:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    638c:	b900      	cbnz	r0, 6390 <grid_buffer_init+0x24>
    638e:	e7fe      	b.n	638e <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    6390:	b145      	cbz	r5, 63a4 <grid_buffer_init+0x38>
    6392:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    6394:	4619      	mov	r1, r3
    6396:	6862      	ldr	r2, [r4, #4]
    6398:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    639a:	3301      	adds	r3, #1
    639c:	b29b      	uxth	r3, r3
    639e:	8822      	ldrh	r2, [r4, #0]
    63a0:	429a      	cmp	r2, r3
    63a2:	d8f8      	bhi.n	6396 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    63a4:	2001      	movs	r0, #1
    63a6:	bd38      	pop	{r3, r4, r5, pc}
    63a8:	000097f1 	.word	0x000097f1

000063ac <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    63ac:	8903      	ldrh	r3, [r0, #8]
    63ae:	8a02      	ldrh	r2, [r0, #16]
    63b0:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    63b2:	bf8f      	iteee	hi
    63b4:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    63b6:	8800      	ldrhls	r0, [r0, #0]
    63b8:	18c0      	addls	r0, r0, r3
    63ba:	1a80      	subls	r0, r0, r2
    63bc:	b280      	uxth	r0, r0

	return space;

	
	
}
    63be:	4770      	bx	lr

000063c0 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(GRID_BUFFER_t* buf, uint16_t length){
    63c0:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    63c2:	8903      	ldrh	r3, [r0, #8]
    63c4:	8a02      	ldrh	r2, [r0, #16]
    63c6:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    63c8:	bf9c      	itt	ls
    63ca:	8804      	ldrhls	r4, [r0, #0]
    63cc:	191b      	addls	r3, r3, r4
    63ce:	1a9b      	subs	r3, r3, r2
    63d0:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    63d2:	428b      	cmp	r3, r1
    63d4:	d90a      	bls.n	63ec <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    63d6:	440a      	add	r2, r1
    63d8:	8804      	ldrh	r4, [r0, #0]
    63da:	fb92 f3f4 	sdiv	r3, r2, r4
    63de:	fb04 2213 	mls	r2, r4, r3, r2
    63e2:	8242      	strh	r2, [r0, #18]
		
		return length;
    63e4:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    63e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    63ea:	4770      	bx	lr
		return 0; // failed
    63ec:	2000      	movs	r0, #0
    63ee:	e7fa      	b.n	63e6 <grid_buffer_write_init+0x26>

000063f0 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(GRID_BUFFER_t* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    63f0:	8a83      	ldrh	r3, [r0, #20]
    63f2:	6842      	ldr	r2, [r0, #4]
    63f4:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    63f6:	8a83      	ldrh	r3, [r0, #20]
    63f8:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    63fa:	b29b      	uxth	r3, r3
    63fc:	8801      	ldrh	r1, [r0, #0]
    63fe:	fbb3 f2f1 	udiv	r2, r3, r1
    6402:	fb01 3312 	mls	r3, r1, r2, r3
    6406:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    6408:	2001      	movs	r0, #1
    640a:	4770      	bx	lr

0000640c <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(GRID_BUFFER_t* buf){
	
	if (buf->write_active == buf->write_stop){
    640c:	8a83      	ldrh	r3, [r0, #20]
    640e:	8a42      	ldrh	r2, [r0, #18]
    6410:	429a      	cmp	r2, r3
    6412:	d000      	beq.n	6416 <grid_buffer_write_acknowledge+0xa>
    6414:	e7fe      	b.n	6414 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    6416:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    6418:	2001      	movs	r0, #1
    641a:	4770      	bx	lr

0000641c <grid_sys_ping>:
}




void grid_sys_ping(GRID_PORT_t* por){
    641c:	b5f0      	push	{r4, r5, r6, r7, lr}
    641e:	b08b      	sub	sp, #44	; 0x2c
    6420:	4606      	mov	r6, r0
		
	char message[20];
	uint8_t length = 0;
	
	// Create the packet
	sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,grid_sys_get_hwcfg(), GRID_MSG_END_OF_TRANSMISSION);
    6422:	7944      	ldrb	r4, [r0, #5]
    6424:	4b1a      	ldr	r3, [pc, #104]	; (6490 <grid_sys_ping+0x74>)
    6426:	4798      	blx	r3
    6428:	2304      	movs	r3, #4
    642a:	9303      	str	r3, [sp, #12]
    642c:	9002      	str	r0, [sp, #8]
    642e:	9401      	str	r4, [sp, #4]
    6430:	2307      	movs	r3, #7
    6432:	9300      	str	r3, [sp, #0]
    6434:	230e      	movs	r3, #14
    6436:	2201      	movs	r2, #1
    6438:	4916      	ldr	r1, [pc, #88]	; (6494 <grid_sys_ping+0x78>)
    643a:	a805      	add	r0, sp, #20
    643c:	4c16      	ldr	r4, [pc, #88]	; (6498 <grid_sys_ping+0x7c>)
    643e:	47a0      	blx	r4
	
	// Calculate packet length
	length = strlen(message);
    6440:	a805      	add	r0, sp, #20
    6442:	4b16      	ldr	r3, [pc, #88]	; (649c <grid_sys_ping+0x80>)
    6444:	4798      	blx	r3
    6446:	b2c5      	uxtb	r5, r0

	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    6448:	4629      	mov	r1, r5
    644a:	a805      	add	r0, sp, #20
    644c:	4b14      	ldr	r3, [pc, #80]	; (64a0 <grid_sys_ping+0x84>)
    644e:	4798      	blx	r3
    6450:	4602      	mov	r2, r0
    6452:	4629      	mov	r1, r5
    6454:	a805      	add	r0, sp, #20
    6456:	4b13      	ldr	r3, [pc, #76]	; (64a4 <grid_sys_ping+0x88>)
    6458:	4798      	blx	r3
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    645a:	f506 76d6 	add.w	r6, r6, #428	; 0x1ac
    645e:	b2ad      	uxth	r5, r5
    6460:	4629      	mov	r1, r5
    6462:	4630      	mov	r0, r6
    6464:	4b10      	ldr	r3, [pc, #64]	; (64a8 <grid_sys_ping+0x8c>)
    6466:	4798      	blx	r3
    6468:	b180      	cbz	r0, 648c <grid_sys_ping+0x70>
		
		for(uint16_t i = 0; i<length; i++){
    646a:	b165      	cbz	r5, 6486 <grid_sys_ping+0x6a>
    646c:	f10d 0413 	add.w	r4, sp, #19
    6470:	3d01      	subs	r5, #1
    6472:	ab05      	add	r3, sp, #20
    6474:	fa13 f585 	uxtah	r5, r3, r5
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    6478:	4f0c      	ldr	r7, [pc, #48]	; (64ac <grid_sys_ping+0x90>)
    647a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    647e:	4630      	mov	r0, r6
    6480:	47b8      	blx	r7
		for(uint16_t i = 0; i<length; i++){
    6482:	42ac      	cmp	r4, r5
    6484:	d1f9      	bne.n	647a <grid_sys_ping+0x5e>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    6486:	4630      	mov	r0, r6
    6488:	4b09      	ldr	r3, [pc, #36]	; (64b0 <grid_sys_ping+0x94>)
    648a:	4798      	blx	r3
	}
				
	
}
    648c:	b00b      	add	sp, #44	; 0x2c
    648e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6490:	00006059 	.word	0x00006059
    6494:	0000a6f0 	.word	0x0000a6f0
    6498:	000099a1 	.word	0x000099a1
    649c:	000099e9 	.word	0x000099e9
    64a0:	0000620d 	.word	0x0000620d
    64a4:	00006229 	.word	0x00006229
    64a8:	000063c1 	.word	0x000063c1
    64ac:	000063f1 	.word	0x000063f1
    64b0:	0000640d 	.word	0x0000640d

000064b4 <grid_buffer_read_size>:
}


uint16_t grid_buffer_read_size(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    64b4:	8983      	ldrh	r3, [r0, #12]
    64b6:	8942      	ldrh	r2, [r0, #10]
    64b8:	429a      	cmp	r2, r3
    64ba:	d000      	beq.n	64be <grid_buffer_read_size+0xa>
    64bc:	e7fe      	b.n	64bc <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    64be:	8902      	ldrh	r2, [r0, #8]
    64c0:	429a      	cmp	r2, r3
    64c2:	d000      	beq.n	64c6 <grid_buffer_read_size+0x12>
    64c4:	e7fe      	b.n	64c4 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(GRID_BUFFER_t* buf){
    64c6:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    64c8:	8a05      	ldrh	r5, [r0, #16]
    64ca:	42ab      	cmp	r3, r5
    64cc:	d025      	beq.n	651a <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    64ce:	8804      	ldrh	r4, [r0, #0]
    64d0:	b1fc      	cbz	r4, 6512 <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    64d2:	4626      	mov	r6, r4
    64d4:	fb93 f2f4 	sdiv	r2, r3, r4
    64d8:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    64dc:	b291      	uxth	r1, r2
    64de:	428d      	cmp	r5, r1
    64e0:	d01d      	beq.n	651e <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    64e2:	6840      	ldr	r0, [r0, #4]
    64e4:	5c42      	ldrb	r2, [r0, r1]
    64e6:	2a0a      	cmp	r2, #10
    64e8:	d114      	bne.n	6514 <grid_buffer_read_size+0x60>
    64ea:	2300      	movs	r3, #0
						
			return i+1; // packet length
    64ec:	3301      	adds	r3, #1
    64ee:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    64f0:	bcf0      	pop	{r4, r5, r6, r7}
    64f2:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    64f4:	fb92 f1f6 	sdiv	r1, r2, r6
    64f8:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    64fc:	b28f      	uxth	r7, r1
    64fe:	42bd      	cmp	r5, r7
    6500:	d00f      	beq.n	6522 <grid_buffer_read_size+0x6e>
    6502:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    6504:	5dc1      	ldrb	r1, [r0, r7]
    6506:	290a      	cmp	r1, #10
    6508:	d0f0      	beq.n	64ec <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    650a:	3301      	adds	r3, #1
    650c:	b29b      	uxth	r3, r3
    650e:	42a3      	cmp	r3, r4
    6510:	d1f0      	bne.n	64f4 <grid_buffer_read_size+0x40>
    6512:	e7fe      	b.n	6512 <grid_buffer_read_size+0x5e>
    6514:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    6516:	2300      	movs	r3, #0
    6518:	e7f7      	b.n	650a <grid_buffer_read_size+0x56>
		return 0;
    651a:	2000      	movs	r0, #0
    651c:	e7e8      	b.n	64f0 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    651e:	2000      	movs	r0, #0
    6520:	e7e6      	b.n	64f0 <grid_buffer_read_size+0x3c>
    6522:	2000      	movs	r0, #0
    6524:	e7e4      	b.n	64f0 <grid_buffer_read_size+0x3c>

00006526 <grid_buffer_read_init>:



uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    6526:	8982      	ldrh	r2, [r0, #12]
    6528:	8943      	ldrh	r3, [r0, #10]
    652a:	4293      	cmp	r3, r2
    652c:	d000      	beq.n	6530 <grid_buffer_read_init+0xa>
    652e:	e7fe      	b.n	652e <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    6530:	8903      	ldrh	r3, [r0, #8]
    6532:	4293      	cmp	r3, r2
    6534:	d000      	beq.n	6538 <grid_buffer_read_init+0x12>
    6536:	e7fe      	b.n	6536 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
    6538:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    653a:	8a05      	ldrh	r5, [r0, #16]
    653c:	42aa      	cmp	r2, r5
    653e:	d031      	beq.n	65a4 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6540:	8804      	ldrh	r4, [r0, #0]
    6542:	b35c      	cbz	r4, 659c <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6544:	4626      	mov	r6, r4
    6546:	fb92 f3f4 	sdiv	r3, r2, r4
    654a:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    654e:	b299      	uxth	r1, r3
    6550:	428d      	cmp	r5, r1
    6552:	d029      	beq.n	65a8 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    6554:	6847      	ldr	r7, [r0, #4]
    6556:	460b      	mov	r3, r1
    6558:	5c79      	ldrb	r1, [r7, r1]
    655a:	290a      	cmp	r1, #10
    655c:	d11f      	bne.n	659e <grid_buffer_read_init+0x78>
    655e:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    6560:	3301      	adds	r3, #1
    6562:	fb93 f2f4 	sdiv	r2, r3, r4
    6566:	fb04 3312 	mls	r3, r4, r2, r3
    656a:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    656c:	1c4b      	adds	r3, r1, #1
    656e:	b29b      	uxth	r3, r3
    6570:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    6572:	4618      	mov	r0, r3
    6574:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6576:	fb92 f3f6 	sdiv	r3, r2, r6
    657a:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    657e:	fa1f fe83 	uxth.w	lr, r3
    6582:	4575      	cmp	r5, lr
    6584:	d012      	beq.n	65ac <grid_buffer_read_init+0x86>
    6586:	4673      	mov	r3, lr
    6588:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    658a:	f817 e00e 	ldrb.w	lr, [r7, lr]
    658e:	f1be 0f0a 	cmp.w	lr, #10
    6592:	d0e5      	beq.n	6560 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6594:	3101      	adds	r1, #1
    6596:	b289      	uxth	r1, r1
    6598:	42a1      	cmp	r1, r4
    659a:	d1ec      	bne.n	6576 <grid_buffer_read_init+0x50>
    659c:	e7fe      	b.n	659c <grid_buffer_read_init+0x76>
    659e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    65a0:	2100      	movs	r1, #0
    65a2:	e7f7      	b.n	6594 <grid_buffer_read_init+0x6e>
		return 0;
    65a4:	2300      	movs	r3, #0
    65a6:	e7e4      	b.n	6572 <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    65a8:	2300      	movs	r3, #0
    65aa:	e7e2      	b.n	6572 <grid_buffer_read_init+0x4c>
    65ac:	2300      	movs	r3, #0
    65ae:	e7e0      	b.n	6572 <grid_buffer_read_init+0x4c>

000065b0 <grid_buffer_read_character>:


uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    65b0:	8983      	ldrh	r3, [r0, #12]
    65b2:	8941      	ldrh	r1, [r0, #10]
    65b4:	4299      	cmp	r1, r3
    65b6:	d00e      	beq.n	65d6 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
    65b8:	b410      	push	{r4}
    65ba:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    65bc:	6841      	ldr	r1, [r0, #4]
    65be:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    65c0:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    65c2:	b29b      	uxth	r3, r3
    65c4:	8814      	ldrh	r4, [r2, #0]
    65c6:	fbb3 f1f4 	udiv	r1, r3, r4
    65ca:	fb04 3311 	mls	r3, r4, r1, r3
    65ce:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    65d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    65d4:	4770      	bx	lr
    65d6:	e7fe      	b.n	65d6 <grid_buffer_read_character+0x26>

000065d8 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(GRID_BUFFER_t* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    65d8:	8983      	ldrh	r3, [r0, #12]
    65da:	8942      	ldrh	r2, [r0, #10]
    65dc:	429a      	cmp	r2, r3
    65de:	d000      	beq.n	65e2 <grid_buffer_read_acknowledge+0xa>
    65e0:	e7fe      	b.n	65e0 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    65e2:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    65e4:	2001      	movs	r0, #1
    65e6:	4770      	bx	lr

000065e8 <grid_port_init>:
	return 1;
}



void grid_port_init(GRID_PORT_t* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    65e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    65ec:	4604      	mov	r4, r0
    65ee:	4691      	mov	r9, r2
    65f0:	4698      	mov	r8, r3
    65f2:	f89d 6020 	ldrb.w	r6, [sp, #32]
    65f6:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    65fa:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    65fe:	4f23      	ldr	r7, [pc, #140]	; (668c <grid_port_init+0xa4>)
    6600:	47b8      	blx	r7
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    6602:	4649      	mov	r1, r9
    6604:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
    6608:	47b8      	blx	r7
	
	por->dma_channel = dma;
    660a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    660e:	71a3      	strb	r3, [r4, #6]
	
	por->direction = dir;
    6610:	7165      	strb	r5, [r4, #5]
	
	por->usart	= usart;
    6612:	f8c4 8000 	str.w	r8, [r4]
	por->type		= type;
    6616:	7126      	strb	r6, [r4, #4]
	
	por->tx_double_buffer_status	= 0;
    6618:	2300      	movs	r3, #0
    661a:	8123      	strh	r3, [r4, #8]
	por->rx_double_buffer_status	= 0;
    661c:	82e3      	strh	r3, [r4, #22]
	
	
	por->partner_fi = 0;
    661e:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
	
	por->partner_hwcfg = 0;
    6622:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	por->partner_status = 1;
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    6626:	2e01      	cmp	r6, #1
    6628:	d004      	beq.n	6634 <grid_port_init+0x4c>
	por->partner_status = 1;
    662a:	2301      	movs	r3, #1
    662c:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
    6630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		
		por->partner_status = 0;
    6634:	2300      	movs	r3, #0
    6636:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
		por->partner_fi = 0;
		
		
		if (por->direction == GRID_MSG_NORTH){
    663a:	2d11      	cmp	r5, #17
    663c:	d007      	beq.n	664e <grid_port_init+0x66>
			por->dx = 0;
			por->dy = 1;
		}
		else if (por->direction == GRID_MSG_EAST){
    663e:	2d12      	cmp	r5, #18
    6640:	d00c      	beq.n	665c <grid_port_init+0x74>
			por->dx = 1;
			por->dy = 0;
		}
		else if (por->direction == GRID_MSG_SOUTH){
    6642:	2d13      	cmp	r5, #19
    6644:	d012      	beq.n	666c <grid_port_init+0x84>
			por->dx = 0;
			por->dy = -1;
		}
		else if (por->direction == GRID_MSG_WEST){
    6646:	2d14      	cmp	r5, #20
    6648:	d018      	beq.n	667c <grid_port_init+0x94>
    664a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 0;
    664e:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 1;
    6652:	2301      	movs	r3, #1
    6654:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    6658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 1;
    665c:	2301      	movs	r3, #1
    665e:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    6662:	2300      	movs	r3, #0
    6664:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    6668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 0;
    666c:	2300      	movs	r3, #0
    666e:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = -1;
    6672:	23ff      	movs	r3, #255	; 0xff
    6674:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    6678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = -1;
    667c:	23ff      	movs	r3, #255	; 0xff
    667e:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    6682:	2300      	movs	r3, #0
    6684:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
	}
	
}
    6688:	e7df      	b.n	664a <grid_port_init+0x62>
    668a:	bf00      	nop
    668c:	0000636d 	.word	0x0000636d

00006690 <grid_port_init_all>:




void grid_port_init_all(){
    6690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6694:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    6696:	2600      	movs	r6, #0
    6698:	9602      	str	r6, [sp, #8]
    669a:	2311      	movs	r3, #17
    669c:	9301      	str	r3, [sp, #4]
    669e:	2401      	movs	r4, #1
    66a0:	9400      	str	r4, [sp, #0]
    66a2:	4b25      	ldr	r3, [pc, #148]	; (6738 <grid_port_init_all+0xa8>)
    66a4:	f44f 7248 	mov.w	r2, #800	; 0x320
    66a8:	4611      	mov	r1, r2
    66aa:	4824      	ldr	r0, [pc, #144]	; (673c <grid_port_init_all+0xac>)
    66ac:	4d24      	ldr	r5, [pc, #144]	; (6740 <grid_port_init_all+0xb0>)
    66ae:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    66b0:	9402      	str	r4, [sp, #8]
    66b2:	2312      	movs	r3, #18
    66b4:	9301      	str	r3, [sp, #4]
    66b6:	9400      	str	r4, [sp, #0]
    66b8:	4b22      	ldr	r3, [pc, #136]	; (6744 <grid_port_init_all+0xb4>)
    66ba:	f44f 7248 	mov.w	r2, #800	; 0x320
    66be:	4611      	mov	r1, r2
    66c0:	4821      	ldr	r0, [pc, #132]	; (6748 <grid_port_init_all+0xb8>)
    66c2:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    66c4:	f04f 0902 	mov.w	r9, #2
    66c8:	f8cd 9008 	str.w	r9, [sp, #8]
    66cc:	2313      	movs	r3, #19
    66ce:	9301      	str	r3, [sp, #4]
    66d0:	9400      	str	r4, [sp, #0]
    66d2:	4b1e      	ldr	r3, [pc, #120]	; (674c <grid_port_init_all+0xbc>)
    66d4:	f44f 7248 	mov.w	r2, #800	; 0x320
    66d8:	4611      	mov	r1, r2
    66da:	481d      	ldr	r0, [pc, #116]	; (6750 <grid_port_init_all+0xc0>)
    66dc:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    66de:	2703      	movs	r7, #3
    66e0:	9702      	str	r7, [sp, #8]
    66e2:	2314      	movs	r3, #20
    66e4:	9301      	str	r3, [sp, #4]
    66e6:	9400      	str	r4, [sp, #0]
    66e8:	4b1a      	ldr	r3, [pc, #104]	; (6754 <grid_port_init_all+0xc4>)
    66ea:	f44f 7248 	mov.w	r2, #800	; 0x320
    66ee:	4611      	mov	r1, r2
    66f0:	4819      	ldr	r0, [pc, #100]	; (6758 <grid_port_init_all+0xc8>)
    66f2:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_UI, 0, -1);
    66f4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 6760 <grid_port_init_all+0xd0>
    66f8:	f04f 0aff 	mov.w	sl, #255	; 0xff
    66fc:	f8cd a008 	str.w	sl, [sp, #8]
    6700:	9601      	str	r6, [sp, #4]
    6702:	9700      	str	r7, [sp, #0]
    6704:	4633      	mov	r3, r6
    6706:	f44f 7248 	mov.w	r2, #800	; 0x320
    670a:	4611      	mov	r1, r2
    670c:	4640      	mov	r0, r8
    670e:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    6710:	4f12      	ldr	r7, [pc, #72]	; (675c <grid_port_init_all+0xcc>)
    6712:	f8cd a008 	str.w	sl, [sp, #8]
    6716:	9601      	str	r6, [sp, #4]
    6718:	f8cd 9000 	str.w	r9, [sp]
    671c:	4633      	mov	r3, r6
    671e:	f44f 7248 	mov.w	r2, #800	; 0x320
    6722:	4611      	mov	r1, r2
    6724:	4638      	mov	r0, r7
    6726:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    6728:	f888 41e3 	strb.w	r4, [r8, #483]	; 0x1e3
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    672c:	f887 41e3 	strb.w	r4, [r7, #483]	; 0x1e3
	
	
}
    6730:	b004      	add	sp, #16
    6732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6736:	bf00      	nop
    6738:	20001464 	.word	0x20001464
    673c:	20001a40 	.word	0x20001a40
    6740:	000065e9 	.word	0x000065e9
    6744:	20001414 	.word	0x20001414
    6748:	20002890 	.word	0x20002890
    674c:	20001568 	.word	0x20001568
    6750:	200023fc 	.word	0x200023fc
    6754:	20001518 	.word	0x20001518
    6758:	20002214 	.word	0x20002214
    675c:	200026ac 	.word	0x200026ac
    6760:	20001c28 	.word	0x20001c28

00006764 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//

uint8_t grid_port_process_inbound(GRID_PORT_t* por){
    6764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6768:	b08f      	sub	sp, #60	; 0x3c
    676a:	af00      	add	r7, sp, #0
    676c:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    676e:	f500 79e2 	add.w	r9, r0, #452	; 0x1c4
    6772:	4648      	mov	r0, r9
    6774:	4b4f      	ldr	r3, [pc, #316]	; (68b4 <grid_port_process_inbound+0x150>)
    6776:	4798      	blx	r3
	
	if (!packet_size){
    6778:	b920      	cbnz	r0, 6784 <grid_port_process_inbound+0x20>
    677a:	2000      	movs	r0, #0
		}	

		
	}
		
}
    677c:	373c      	adds	r7, #60	; 0x3c
    677e:	46bd      	mov	sp, r7
    6780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6784:	4680      	mov	r8, r0
	}else{
    6786:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    678a:	4b4b      	ldr	r3, [pc, #300]	; (68b8 <grid_port_process_inbound+0x154>)
    678c:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    678e:	4b4b      	ldr	r3, [pc, #300]	; (68bc <grid_port_process_inbound+0x158>)
    6790:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    6792:	4b4b      	ldr	r3, [pc, #300]	; (68c0 <grid_port_process_inbound+0x15c>)
    6794:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    6796:	4b4b      	ldr	r3, [pc, #300]	; (68c4 <grid_port_process_inbound+0x160>)
    6798:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    679a:	4b4b      	ldr	r3, [pc, #300]	; (68c8 <grid_port_process_inbound+0x164>)
    679c:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    679e:	4b4b      	ldr	r3, [pc, #300]	; (68cc <grid_port_process_inbound+0x168>)
    67a0:	61fb      	str	r3, [r7, #28]
    67a2:	f107 0308 	add.w	r3, r7, #8
    67a6:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    67aa:	2600      	movs	r6, #0
    67ac:	e001      	b.n	67b2 <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    67ae:	428b      	cmp	r3, r1
    67b0:	d00e      	beq.n	67d0 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    67b2:	f853 2b04 	ldr.w	r2, [r3], #4
    67b6:	f892 01e3 	ldrb.w	r0, [r2, #483]	; 0x1e3
    67ba:	2800      	cmp	r0, #0
    67bc:	d0f7      	beq.n	67ae <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    67be:	f107 0038 	add.w	r0, r7, #56	; 0x38
    67c2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    67c6:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    67ca:	3601      	adds	r6, #1
    67cc:	b2f6      	uxtb	r6, r6
    67ce:	e7ee      	b.n	67ae <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    67d0:	2e00      	cmp	r6, #0
    67d2:	d05d      	beq.n	6890 <grid_port_process_inbound+0x12c>
    67d4:	f107 0a20 	add.w	sl, r7, #32
    67d8:	1e74      	subs	r4, r6, #1
    67da:	b2e4      	uxtb	r4, r4
    67dc:	3401      	adds	r4, #1
    67de:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    67e2:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    67e4:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 68e4 <grid_port_process_inbound+0x180>
    67e8:	e001      	b.n	67ee <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    67ea:	42a5      	cmp	r5, r4
    67ec:	d00c      	beq.n	6808 <grid_port_process_inbound+0xa4>
			if (port_array[i] != por){
    67ee:	f855 0b04 	ldr.w	r0, [r5], #4
    67f2:	687b      	ldr	r3, [r7, #4]
    67f4:	4283      	cmp	r3, r0
    67f6:	d0f8      	beq.n	67ea <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    67f8:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    67fc:	47d8      	blx	fp
    67fe:	4580      	cmp	r8, r0
    6800:	d9f3      	bls.n	67ea <grid_port_process_inbound+0x86>
    6802:	f8d7 d000 	ldr.w	sp, [r7]
    6806:	e7b8      	b.n	677a <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    6808:	4648      	mov	r0, r9
    680a:	4b31      	ldr	r3, [pc, #196]	; (68d0 <grid_port_process_inbound+0x16c>)
    680c:	4798      	blx	r3
    680e:	4580      	cmp	r8, r0
    6810:	d000      	beq.n	6814 <grid_port_process_inbound+0xb0>
    6812:	e7fe      	b.n	6812 <grid_port_process_inbound+0xae>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    6814:	4c2f      	ldr	r4, [pc, #188]	; (68d4 <grid_port_process_inbound+0x170>)
    6816:	e001      	b.n	681c <grid_port_process_inbound+0xb8>
		for (uint8_t i=0; i<port_count; i++)
    6818:	45aa      	cmp	sl, r5
    681a:	d03e      	beq.n	689a <grid_port_process_inbound+0x136>
			if (port_array[i] != por){
    681c:	f85a 0b04 	ldr.w	r0, [sl], #4
    6820:	687b      	ldr	r3, [r7, #4]
    6822:	4283      	cmp	r3, r0
    6824:	d0f8      	beq.n	6818 <grid_port_process_inbound+0xb4>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    6826:	4641      	mov	r1, r8
    6828:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    682c:	47a0      	blx	r4
    682e:	e7f3      	b.n	6818 <grid_port_process_inbound+0xb4>
			for (uint8_t i=0; i<port_count; i++){
    6830:	42a5      	cmp	r5, r4
    6832:	d009      	beq.n	6848 <grid_port_process_inbound+0xe4>
				if (port_array[i] != por){
    6834:	f854 0b04 	ldr.w	r0, [r4], #4
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	4283      	cmp	r3, r0
    683c:	d0f8      	beq.n	6830 <grid_port_process_inbound+0xcc>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    683e:	6839      	ldr	r1, [r7, #0]
    6840:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    6844:	47d8      	blx	fp
    6846:	e7f3      	b.n	6830 <grid_port_process_inbound+0xcc>
    6848:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    684c:	fa1f f38a 	uxth.w	r3, sl
    6850:	4543      	cmp	r3, r8
    6852:	d208      	bcs.n	6866 <grid_port_process_inbound+0x102>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    6854:	4648      	mov	r0, r9
    6856:	4b20      	ldr	r3, [pc, #128]	; (68d8 <grid_port_process_inbound+0x174>)
    6858:	4798      	blx	r3
    685a:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    685c:	2e00      	cmp	r6, #0
    685e:	d0f3      	beq.n	6848 <grid_port_process_inbound+0xe4>
    6860:	f107 0420 	add.w	r4, r7, #32
    6864:	e7e6      	b.n	6834 <grid_port_process_inbound+0xd0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    6866:	4648      	mov	r0, r9
    6868:	4b1c      	ldr	r3, [pc, #112]	; (68dc <grid_port_process_inbound+0x178>)
    686a:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    686c:	2e00      	cmp	r6, #0
    686e:	d085      	beq.n	677c <grid_port_process_inbound+0x18>
    6870:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    6874:	4e1a      	ldr	r6, [pc, #104]	; (68e0 <grid_port_process_inbound+0x17c>)
    6876:	e002      	b.n	687e <grid_port_process_inbound+0x11a>
		for (uint8_t i=0; i<port_count; i++)
    6878:	42a5      	cmp	r5, r4
    687a:	f43f af7f 	beq.w	677c <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    687e:	f854 0b04 	ldr.w	r0, [r4], #4
    6882:	687b      	ldr	r3, [r7, #4]
    6884:	4283      	cmp	r3, r0
    6886:	d0f7      	beq.n	6878 <grid_port_process_inbound+0x114>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    6888:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    688c:	47b0      	blx	r6
    688e:	e7f3      	b.n	6878 <grid_port_process_inbound+0x114>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    6890:	4648      	mov	r0, r9
    6892:	4b0f      	ldr	r3, [pc, #60]	; (68d0 <grid_port_process_inbound+0x16c>)
    6894:	4798      	blx	r3
    6896:	4540      	cmp	r0, r8
    6898:	d1bb      	bne.n	6812 <grid_port_process_inbound+0xae>
    689a:	1e75      	subs	r5, r6, #1
    689c:	b2ed      	uxtb	r5, r5
    689e:	f107 0338 	add.w	r3, r7, #56	; 0x38
    68a2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    68a6:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    68a8:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    68ac:	f8df b038 	ldr.w	fp, [pc, #56]	; 68e8 <grid_port_process_inbound+0x184>
    68b0:	e7d0      	b.n	6854 <grid_port_process_inbound+0xf0>
    68b2:	bf00      	nop
    68b4:	000064b5 	.word	0x000064b5
    68b8:	20001a40 	.word	0x20001a40
    68bc:	20002890 	.word	0x20002890
    68c0:	200023fc 	.word	0x200023fc
    68c4:	20002214 	.word	0x20002214
    68c8:	20001c28 	.word	0x20001c28
    68cc:	200026ac 	.word	0x200026ac
    68d0:	00006527 	.word	0x00006527
    68d4:	000063c1 	.word	0x000063c1
    68d8:	000065b1 	.word	0x000065b1
    68dc:	000065d9 	.word	0x000065d9
    68e0:	0000640d 	.word	0x0000640d
    68e4:	000063ad 	.word	0x000063ad
    68e8:	000063f1 	.word	0x000063f1

000068ec <grid_port_process_outbound_usb>:

//=============================== PROCESS OUTBOUND ==============================//

volatile uint8_t temp[500];

uint8_t grid_port_process_outbound_usb(GRID_PORT_t* por){
    68ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68f0:	b097      	sub	sp, #92	; 0x5c
    68f2:	af06      	add	r7, sp, #24
    68f4:	6338      	str	r0, [r7, #48]	; 0x30
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    68f6:	f500 75d6 	add.w	r5, r0, #428	; 0x1ac
    68fa:	4628      	mov	r0, r5
    68fc:	4b9f      	ldr	r3, [pc, #636]	; (6b7c <grid_port_process_outbound_usb+0x290>)
    68fe:	4798      	blx	r3
	
	if (!length){		
    6900:	b918      	cbnz	r0, 690a <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    6902:	3744      	adds	r7, #68	; 0x44
    6904:	46bd      	mov	sp, r7
    6906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    690a:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    690c:	4628      	mov	r0, r5
    690e:	4b9c      	ldr	r3, [pc, #624]	; (6b80 <grid_port_process_outbound_usb+0x294>)
    6910:	4798      	blx	r3
    6912:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    6914:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 6bc0 <grid_port_process_outbound_usb+0x2d4>
    6918:	f8df 826c 	ldr.w	r8, [pc, #620]	; 6b88 <grid_port_process_outbound_usb+0x29c>
    691c:	4628      	mov	r0, r5
    691e:	47c8      	blx	r9
    6920:	f808 0004 	strb.w	r0, [r8, r4]
		for (uint8_t i = 0; i<length; i++){
    6924:	3401      	adds	r4, #1
    6926:	b2e4      	uxtb	r4, r4
    6928:	b2a3      	uxth	r3, r4
    692a:	429e      	cmp	r6, r3
    692c:	d8f6      	bhi.n	691c <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    692e:	4628      	mov	r0, r5
    6930:	4b94      	ldr	r3, [pc, #592]	; (6b84 <grid_port_process_outbound_usb+0x298>)
    6932:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    6934:	4c94      	ldr	r4, [pc, #592]	; (6b88 <grid_port_process_outbound_usb+0x29c>)
    6936:	4620      	mov	r0, r4
    6938:	4b94      	ldr	r3, [pc, #592]	; (6b8c <grid_port_process_outbound_usb+0x2a0>)
    693a:	4798      	blx	r3
    693c:	62b8      	str	r0, [r7, #40]	; 0x28
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    693e:	4620      	mov	r0, r4
    6940:	4b93      	ldr	r3, [pc, #588]	; (6b90 <grid_port_process_outbound_usb+0x2a4>)
    6942:	4798      	blx	r3
    6944:	387f      	subs	r0, #127	; 0x7f
    6946:	b243      	sxtb	r3, r0
    6948:	627b      	str	r3, [r7, #36]	; 0x24
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    694a:	4620      	mov	r0, r4
    694c:	4b91      	ldr	r3, [pc, #580]	; (6b94 <grid_port_process_outbound_usb+0x2a8>)
    694e:	4798      	blx	r3
    6950:	387f      	subs	r0, #127	; 0x7f
    6952:	b243      	sxtb	r3, r0
    6954:	623b      	str	r3, [r7, #32]
		uint8_t age = grid_msg_get_age(temp);
    6956:	4620      	mov	r0, r4
    6958:	4b8f      	ldr	r3, [pc, #572]	; (6b98 <grid_port_process_outbound_usb+0x2ac>)
    695a:	4798      	blx	r3
    695c:	61f8      	str	r0, [r7, #28]
		uint8_t error_flag = 0;
    695e:	2500      	movs	r5, #0
    6960:	f887 503f 	strb.w	r5, [r7, #63]	; 0x3f
    6964:	1e73      	subs	r3, r6, #1
    6966:	b29b      	uxth	r3, r3
    6968:	f103 0a01 	add.w	sl, r3, #1
    696c:	46ab      	mov	fp, r5
    696e:	637d      	str	r5, [r7, #52]	; 0x34
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    6970:	46a1      	mov	r9, r4
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    6972:	46d0      	mov	r8, sl
    6974:	e006      	b.n	6984 <grid_port_process_outbound_usb+0x98>
				current_start = i;
    6976:	fa5f f58b 	uxtb.w	r5, fp
    697a:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    697e:	45c3      	cmp	fp, r8
    6980:	f000 80f6 	beq.w	6b70 <grid_port_process_outbound_usb+0x284>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    6984:	f819 300b 	ldrb.w	r3, [r9, fp]
    6988:	b2db      	uxtb	r3, r3
    698a:	2b02      	cmp	r3, #2
    698c:	d0f3      	beq.n	6976 <grid_port_process_outbound_usb+0x8a>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    698e:	f819 300b 	ldrb.w	r3, [r9, fp]
    6992:	b2db      	uxtb	r3, r3
    6994:	2b03      	cmp	r3, #3
    6996:	d1f0      	bne.n	697a <grid_port_process_outbound_usb+0x8e>
    6998:	2d00      	cmp	r5, #0
    699a:	d0ee      	beq.n	697a <grid_port_process_outbound_usb+0x8e>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    699c:	462e      	mov	r6, r5
    699e:	1c68      	adds	r0, r5, #1
    69a0:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    69a4:	2102      	movs	r1, #2
    69a6:	4448      	add	r0, r9
    69a8:	4b7c      	ldr	r3, [pc, #496]	; (6b9c <grid_port_process_outbound_usb+0x2b0>)
    69aa:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    69ac:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    69b0:	d018      	beq.n	69e4 <grid_port_process_outbound_usb+0xf8>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    69b2:	2c01      	cmp	r4, #1
    69b4:	d058      	beq.n	6a68 <grid_port_process_outbound_usb+0x17c>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    69b6:	2c02      	cmp	r4, #2
    69b8:	f000 80d8 	beq.w	6b6c <grid_port_process_outbound_usb+0x280>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    69bc:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    69be:	f105 041c 	add.w	r4, r5, #28
    69c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    69c4:	441c      	add	r4, r3
    69c6:	b2c2      	uxtb	r2, r0
    69c8:	4975      	ldr	r1, [pc, #468]	; (6ba0 <grid_port_process_outbound_usb+0x2b4>)
    69ca:	4620      	mov	r0, r4
    69cc:	4b75      	ldr	r3, [pc, #468]	; (6ba4 <grid_port_process_outbound_usb+0x2b8>)
    69ce:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    69d0:	4620      	mov	r0, r4
    69d2:	4b75      	ldr	r3, [pc, #468]	; (6ba8 <grid_port_process_outbound_usb+0x2bc>)
    69d4:	4798      	blx	r3
    69d6:	eb05 0a00 	add.w	sl, r5, r0
    69da:	fa5f f38a 	uxtb.w	r3, sl
    69de:	637b      	str	r3, [r7, #52]	; 0x34
				current_start = 0;
    69e0:	2500      	movs	r5, #0
    69e2:	e7ca      	b.n	697a <grid_port_process_outbound_usb+0x8e>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    69e4:	1ce8      	adds	r0, r5, #3
    69e6:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    69ea:	2102      	movs	r1, #2
    69ec:	4448      	add	r0, r9
    69ee:	4b6b      	ldr	r3, [pc, #428]	; (6b9c <grid_port_process_outbound_usb+0x2b0>)
    69f0:	4798      	blx	r3
    69f2:	4682      	mov	sl, r0
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    69f4:	1d68      	adds	r0, r5, #5
    69f6:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    69fa:	2102      	movs	r1, #2
    69fc:	4448      	add	r0, r9
    69fe:	4b67      	ldr	r3, [pc, #412]	; (6b9c <grid_port_process_outbound_usb+0x2b0>)
    6a00:	4798      	blx	r3
    6a02:	62f8      	str	r0, [r7, #44]	; 0x2c
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    6a04:	1de8      	adds	r0, r5, #7
    6a06:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6a0a:	2102      	movs	r1, #2
    6a0c:	4448      	add	r0, r9
    6a0e:	4b63      	ldr	r3, [pc, #396]	; (6b9c <grid_port_process_outbound_usb+0x2b0>)
    6a10:	4798      	blx	r3
    6a12:	4606      	mov	r6, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    6a14:	f105 0009 	add.w	r0, r5, #9
    6a18:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6a1c:	2102      	movs	r1, #2
    6a1e:	4448      	add	r0, r9
    6a20:	4b5e      	ldr	r3, [pc, #376]	; (6b9c <grid_port_process_outbound_usb+0x2b0>)
    6a22:	4798      	blx	r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    6a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6a26:	f103 051c 	add.w	r5, r3, #28
    6a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    6a2c:	4415      	add	r5, r2
    6a2e:	b2c0      	uxtb	r0, r0
    6a30:	9005      	str	r0, [sp, #20]
    6a32:	b2f6      	uxtb	r6, r6
    6a34:	9604      	str	r6, [sp, #16]
    6a36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    6a3a:	9303      	str	r3, [sp, #12]
    6a3c:	fa5f f38a 	uxtb.w	r3, sl
    6a40:	9302      	str	r3, [sp, #8]
    6a42:	69fa      	ldr	r2, [r7, #28]
    6a44:	9201      	str	r2, [sp, #4]
    6a46:	6a3a      	ldr	r2, [r7, #32]
    6a48:	9200      	str	r2, [sp, #0]
    6a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6a4e:	4957      	ldr	r1, [pc, #348]	; (6bac <grid_port_process_outbound_usb+0x2c0>)
    6a50:	4628      	mov	r0, r5
    6a52:	4e54      	ldr	r6, [pc, #336]	; (6ba4 <grid_port_process_outbound_usb+0x2b8>)
    6a54:	47b0      	blx	r6
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    6a56:	4628      	mov	r0, r5
    6a58:	4b53      	ldr	r3, [pc, #332]	; (6ba8 <grid_port_process_outbound_usb+0x2bc>)
    6a5a:	4798      	blx	r3
    6a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6a5e:	4418      	add	r0, r3
    6a60:	b2c3      	uxtb	r3, r0
    6a62:	637b      	str	r3, [r7, #52]	; 0x34
				current_start = 0;
    6a64:	4625      	mov	r5, r4
    6a66:	e788      	b.n	697a <grid_port_process_outbound_usb+0x8e>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    6a68:	f8c7 d014 	str.w	sp, [r7, #20]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    6a6c:	fa5f f38b 	uxtb.w	r3, fp
    6a70:	1b5b      	subs	r3, r3, r5
    6a72:	3b03      	subs	r3, #3
    6a74:	4a4e      	ldr	r2, [pc, #312]	; (6bb0 <grid_port_process_outbound_usb+0x2c4>)
    6a76:	fb82 1203 	smull	r1, r2, r2, r3
    6a7a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    6a7e:	b2db      	uxtb	r3, r3
    6a80:	4619      	mov	r1, r3
    6a82:	613b      	str	r3, [r7, #16]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    6a84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6a88:	3307      	adds	r3, #7
    6a8a:	f023 0307 	bic.w	r3, r3, #7
    6a8e:	ebad 0d03 	sub.w	sp, sp, r3
    6a92:	ab06      	add	r3, sp, #24
    6a94:	461a      	mov	r2, r3
    6a96:	60fb      	str	r3, [r7, #12]
					for(uint8_t j=0; j<key_array_length; j++){
    6a98:	2900      	cmp	r1, #0
    6a9a:	d05f      	beq.n	6b5c <grid_port_process_outbound_usb+0x270>
    6a9c:	3603      	adds	r6, #3
    6a9e:	eb06 0a09 	add.w	sl, r6, r9
    6aa2:	4616      	mov	r6, r2
    6aa4:	1e4b      	subs	r3, r1, #1
    6aa6:	b2db      	uxtb	r3, r3
    6aa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6aac:	3509      	adds	r5, #9
    6aae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    6ab2:	444b      	add	r3, r9
    6ab4:	61bb      	str	r3, [r7, #24]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\n", 
    6ab6:	f8c7 b008 	str.w	fp, [r7, #8]
    6aba:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
    6abe:	f8c7 8004 	str.w	r8, [r7, #4]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    6ac2:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6ac6:	2102      	movs	r1, #2
    6ac8:	4650      	mov	r0, sl
    6aca:	4b34      	ldr	r3, [pc, #208]	; (6b9c <grid_port_process_outbound_usb+0x2b0>)
    6acc:	4798      	blx	r3
    6ace:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    6ad0:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6ad4:	2102      	movs	r1, #2
    6ad6:	eb0a 0001 	add.w	r0, sl, r1
    6ada:	4b30      	ldr	r3, [pc, #192]	; (6b9c <grid_port_process_outbound_usb+0x2b0>)
    6adc:	4798      	blx	r3
    6ade:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    6ae0:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6ae4:	2102      	movs	r1, #2
    6ae6:	f10a 0004 	add.w	r0, sl, #4
    6aea:	4b2c      	ldr	r3, [pc, #176]	; (6b9c <grid_port_process_outbound_usb+0x2b0>)
    6aec:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\n", 
    6aee:	f10b 081c 	add.w	r8, fp, #28
    6af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6af4:	4498      	add	r8, r3
    6af6:	b2e3      	uxtb	r3, r4
    6af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    6afa:	9304      	str	r3, [sp, #16]
    6afc:	b2ed      	uxtb	r5, r5
    6afe:	9503      	str	r5, [sp, #12]
    6b00:	6378      	str	r0, [r7, #52]	; 0x34
    6b02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    6b06:	9302      	str	r3, [sp, #8]
    6b08:	69fb      	ldr	r3, [r7, #28]
    6b0a:	9301      	str	r3, [sp, #4]
    6b0c:	6a3b      	ldr	r3, [r7, #32]
    6b0e:	9300      	str	r3, [sp, #0]
    6b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6b14:	4927      	ldr	r1, [pc, #156]	; (6bb4 <grid_port_process_outbound_usb+0x2c8>)
    6b16:	4640      	mov	r0, r8
    6b18:	4c22      	ldr	r4, [pc, #136]	; (6ba4 <grid_port_process_outbound_usb+0x2b8>)
    6b1a:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    6b1c:	4640      	mov	r0, r8
    6b1e:	4b22      	ldr	r3, [pc, #136]	; (6ba8 <grid_port_process_outbound_usb+0x2bc>)
    6b20:	4798      	blx	r3
    6b22:	4483      	add	fp, r0
    6b24:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    6b28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    6b2c:	7033      	strb	r3, [r6, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    6b2e:	2d82      	cmp	r5, #130	; 0x82
    6b30:	bf14      	ite	ne
    6b32:	2500      	movne	r5, #0
    6b34:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    6b36:	7075      	strb	r5, [r6, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    6b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b3a:	2b80      	cmp	r3, #128	; 0x80
    6b3c:	bf14      	ite	ne
    6b3e:	2400      	movne	r4, #0
    6b40:	2401      	moveq	r4, #1
    6b42:	70b4      	strb	r4, [r6, #2]
    6b44:	f10a 0a06 	add.w	sl, sl, #6
    6b48:	3603      	adds	r6, #3
					for(uint8_t j=0; j<key_array_length; j++){
    6b4a:	69bb      	ldr	r3, [r7, #24]
    6b4c:	459a      	cmp	sl, r3
    6b4e:	d1b8      	bne.n	6ac2 <grid_port_process_outbound_usb+0x1d6>
    6b50:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
    6b54:	f8d7 b008 	ldr.w	fp, [r7, #8]
    6b58:	f8d7 8004 	ldr.w	r8, [r7, #4]
					hiddf_keyboard_keys_state_change(key_array, key_array_length);
    6b5c:	6939      	ldr	r1, [r7, #16]
    6b5e:	68f8      	ldr	r0, [r7, #12]
    6b60:	4b15      	ldr	r3, [pc, #84]	; (6bb8 <grid_port_process_outbound_usb+0x2cc>)
    6b62:	4798      	blx	r3
    6b64:	f8d7 d014 	ldr.w	sp, [r7, #20]
				current_start = 0;
    6b68:	2500      	movs	r5, #0
    6b6a:	e706      	b.n	697a <grid_port_process_outbound_usb+0x8e>
    6b6c:	2500      	movs	r5, #0
    6b6e:	e704      	b.n	697a <grid_port_process_outbound_usb+0x8e>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    6b70:	6b79      	ldr	r1, [r7, #52]	; 0x34
    6b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
    6b74:	301c      	adds	r0, #28
    6b76:	4b11      	ldr	r3, [pc, #68]	; (6bbc <grid_port_process_outbound_usb+0x2d0>)
    6b78:	4798      	blx	r3
}
    6b7a:	e6c2      	b.n	6902 <grid_port_process_outbound_usb+0x16>
    6b7c:	000064b5 	.word	0x000064b5
    6b80:	00006527 	.word	0x00006527
    6b84:	000065d9 	.word	0x000065d9
    6b88:	20001e0c 	.word	0x20001e0c
    6b8c:	00006259 	.word	0x00006259
    6b90:	00006279 	.word	0x00006279
    6b94:	00006299 	.word	0x00006299
    6b98:	000062b9 	.word	0x000062b9
    6b9c:	00005fe1 	.word	0x00005fe1
    6ba0:	0000a788 	.word	0x0000a788
    6ba4:	000099a1 	.word	0x000099a1
    6ba8:	000099e9 	.word	0x000099e9
    6bac:	0000a704 	.word	0x0000a704
    6bb0:	2aaaaaab 	.word	0x2aaaaaab
    6bb4:	0000a74c 	.word	0x0000a74c
    6bb8:	0000811d 	.word	0x0000811d
    6bbc:	00007edd 	.word	0x00007edd
    6bc0:	000065b1 	.word	0x000065b1

00006bc4 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(GRID_PORT_t* por){
    6bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    6bc6:	f500 75d6 	add.w	r5, r0, #428	; 0x1ac
    6bca:	4628      	mov	r0, r5
    6bcc:	4b0a      	ldr	r3, [pc, #40]	; (6bf8 <grid_port_process_outbound_ui+0x34>)
    6bce:	4798      	blx	r3
	
	if (!packet_size){
    6bd0:	b900      	cbnz	r0, 6bd4 <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    6bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bd4:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    6bd6:	4628      	mov	r0, r5
    6bd8:	4b08      	ldr	r3, [pc, #32]	; (6bfc <grid_port_process_outbound_ui+0x38>)
    6bda:	4798      	blx	r3
    6bdc:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6bde:	4f08      	ldr	r7, [pc, #32]	; (6c00 <grid_port_process_outbound_ui+0x3c>)
    6be0:	4628      	mov	r0, r5
    6be2:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    6be4:	3401      	adds	r4, #1
    6be6:	b2e4      	uxtb	r4, r4
    6be8:	b2a3      	uxth	r3, r4
    6bea:	429e      	cmp	r6, r3
    6bec:	d8f8      	bhi.n	6be0 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    6bee:	4628      	mov	r0, r5
    6bf0:	4b04      	ldr	r3, [pc, #16]	; (6c04 <grid_port_process_outbound_ui+0x40>)
    6bf2:	4798      	blx	r3
}
    6bf4:	e7ed      	b.n	6bd2 <grid_port_process_outbound_ui+0xe>
    6bf6:	bf00      	nop
    6bf8:	000064b5 	.word	0x000064b5
    6bfc:	00006527 	.word	0x00006527
    6c00:	000065b1 	.word	0x000065b1
    6c04:	000065d9 	.word	0x000065d9

00006c08 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(GRID_PORT_t* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    6c08:	8903      	ldrh	r3, [r0, #8]
    6c0a:	b103      	cbz	r3, 6c0e <grid_port_process_outbound_usart+0x6>
    6c0c:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(GRID_PORT_t* por){
    6c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c12:	4605      	mov	r5, r0
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    6c14:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    6c18:	4630      	mov	r0, r6
    6c1a:	4b10      	ldr	r3, [pc, #64]	; (6c5c <grid_port_process_outbound_usart+0x54>)
    6c1c:	4798      	blx	r3
		
		if (!packet_size){
    6c1e:	4607      	mov	r7, r0
    6c20:	b908      	cbnz	r0, 6c26 <grid_port_process_outbound_usart+0x1e>
			
		}
		
	}
	
}
    6c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    6c26:	4630      	mov	r0, r6
    6c28:	4b0d      	ldr	r3, [pc, #52]	; (6c60 <grid_port_process_outbound_usart+0x58>)
    6c2a:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    6c2c:	812f      	strh	r7, [r5, #8]
    6c2e:	2400      	movs	r4, #0
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6c30:	f8df 8038 	ldr.w	r8, [pc, #56]	; 6c6c <grid_port_process_outbound_usart+0x64>
    6c34:	4630      	mov	r0, r6
    6c36:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    6c38:	192b      	adds	r3, r5, r4
    6c3a:	7718      	strb	r0, [r3, #28]
			for (uint8_t i = 0; i<packet_size; i++){
    6c3c:	3401      	adds	r4, #1
    6c3e:	b2e4      	uxtb	r4, r4
    6c40:	b2a3      	uxth	r3, r4
    6c42:	429f      	cmp	r7, r3
    6c44:	d8f6      	bhi.n	6c34 <grid_port_process_outbound_usart+0x2c>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    6c46:	4630      	mov	r0, r6
    6c48:	4b06      	ldr	r3, [pc, #24]	; (6c64 <grid_port_process_outbound_usart+0x5c>)
    6c4a:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    6c4c:	892a      	ldrh	r2, [r5, #8]
    6c4e:	f105 011c 	add.w	r1, r5, #28
    6c52:	6828      	ldr	r0, [r5, #0]
    6c54:	4b04      	ldr	r3, [pc, #16]	; (6c68 <grid_port_process_outbound_usart+0x60>)
    6c56:	4798      	blx	r3
}
    6c58:	e7e3      	b.n	6c22 <grid_port_process_outbound_usart+0x1a>
    6c5a:	bf00      	nop
    6c5c:	000064b5 	.word	0x000064b5
    6c60:	00006527 	.word	0x00006527
    6c64:	000065d9 	.word	0x000065d9
    6c68:	000014c1 	.word	0x000014c1
    6c6c:	000065b1 	.word	0x000065b1

00006c70 <grid_sync_get_mode>:
	if (grid_sync_mode_register[sync_select - 1] == GRID_SYNC_MASTER){
    6c70:	4b06      	ldr	r3, [pc, #24]	; (6c8c <grid_sync_get_mode+0x1c>)
    6c72:	4418      	add	r0, r3
    6c74:	f890 3473 	ldrb.w	r3, [r0, #1139]	; 0x473
    6c78:	2b01      	cmp	r3, #1
    6c7a:	d004      	beq.n	6c86 <grid_sync_get_mode+0x16>
		return GRID_SYNC_INITIAL;	
    6c7c:	2b02      	cmp	r3, #2
    6c7e:	bf0c      	ite	eq
    6c80:	2002      	moveq	r0, #2
    6c82:	2000      	movne	r0, #0
    6c84:	4770      	bx	lr
		return GRID_SYNC_MASTER;
    6c86:	2001      	movs	r0, #1
}
    6c88:	4770      	bx	lr
    6c8a:	bf00      	nop
    6c8c:	20000cec 	.word	0x20000cec

00006c90 <grid_sync_set_level>:
void grid_sync_set_level(enum grid_sync_selector sync_select, uint8_t sync_level){
    6c90:	b510      	push	{r4, lr}
    6c92:	460c      	mov	r4, r1
	if (sync_select == GRID_SYNC_1){
    6c94:	2801      	cmp	r0, #1
    6c96:	d002      	beq.n	6c9e <grid_sync_set_level+0xe>
	else if (sync_select == GRID_SYNC_2){
    6c98:	2802      	cmp	r0, #2
    6c9a:	d011      	beq.n	6cc0 <grid_sync_set_level+0x30>
    6c9c:	bd10      	pop	{r4, pc}
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    6c9e:	4b10      	ldr	r3, [pc, #64]	; (6ce0 <grid_sync_set_level+0x50>)
    6ca0:	4798      	blx	r3
    6ca2:	2801      	cmp	r0, #1
    6ca4:	d1fa      	bne.n	6c9c <grid_sync_set_level+0xc>
	if (level) {
    6ca6:	b12c      	cbz	r4, 6cb4 <grid_sync_set_level+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6ca8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    6cac:	4b0d      	ldr	r3, [pc, #52]	; (6ce4 <grid_sync_set_level+0x54>)
    6cae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    6cb2:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6cb4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    6cb8:	4b0a      	ldr	r3, [pc, #40]	; (6ce4 <grid_sync_set_level+0x54>)
    6cba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    6cbe:	bd10      	pop	{r4, pc}
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    6cc0:	4b07      	ldr	r3, [pc, #28]	; (6ce0 <grid_sync_set_level+0x50>)
    6cc2:	4798      	blx	r3
    6cc4:	2801      	cmp	r0, #1
    6cc6:	d1e9      	bne.n	6c9c <grid_sync_set_level+0xc>
    6cc8:	b924      	cbnz	r4, 6cd4 <grid_sync_set_level+0x44>
    6cca:	2280      	movs	r2, #128	; 0x80
    6ccc:	4b05      	ldr	r3, [pc, #20]	; (6ce4 <grid_sync_set_level+0x54>)
    6cce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6cd2:	e7e3      	b.n	6c9c <grid_sync_set_level+0xc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6cd4:	2280      	movs	r2, #128	; 0x80
    6cd6:	4b03      	ldr	r3, [pc, #12]	; (6ce4 <grid_sync_set_level+0x54>)
    6cd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    6cdc:	bd10      	pop	{r4, pc}
    6cde:	bf00      	nop
    6ce0:	00006c71 	.word	0x00006c71
    6ce4:	41008000 	.word	0x41008000

00006ce8 <grid_sys_port_reset_dma>:
void grid_sys_port_reset_dma(GRID_PORT_t* por){
    6ce8:	b508      	push	{r3, lr}
    6cea:	7983      	ldrb	r3, [r0, #6]
    6cec:	011b      	lsls	r3, r3, #4
    6cee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6cf2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    6cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6cf8:	f022 0202 	bic.w	r2, r2, #2
    6cfc:	641a      	str	r2, [r3, #64]	; 0x40
	_dma_enable_transaction(por->dma_channel, false);
    6cfe:	2100      	movs	r1, #0
    6d00:	7980      	ldrb	r0, [r0, #6]
    6d02:	4b01      	ldr	r3, [pc, #4]	; (6d08 <grid_sys_port_reset_dma+0x20>)
    6d04:	4798      	blx	r3
    6d06:	bd08      	pop	{r3, pc}
    6d08:	00002a29 	.word	0x00002a29

00006d0c <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    6d0c:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    6d0e:	4802      	ldr	r0, [pc, #8]	; (6d18 <dma_transfer_complete_w_cb+0xc>)
    6d10:	4b02      	ldr	r3, [pc, #8]	; (6d1c <dma_transfer_complete_w_cb+0x10>)
    6d12:	4798      	blx	r3
    6d14:	bd08      	pop	{r3, pc}
    6d16:	bf00      	nop
    6d18:	20002214 	.word	0x20002214
    6d1c:	00006ce9 	.word	0x00006ce9

00006d20 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    6d20:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    6d22:	4802      	ldr	r0, [pc, #8]	; (6d2c <dma_transfer_complete_s_cb+0xc>)
    6d24:	4b02      	ldr	r3, [pc, #8]	; (6d30 <dma_transfer_complete_s_cb+0x10>)
    6d26:	4798      	blx	r3
    6d28:	bd08      	pop	{r3, pc}
    6d2a:	bf00      	nop
    6d2c:	200023fc 	.word	0x200023fc
    6d30:	00006ce9 	.word	0x00006ce9

00006d34 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    6d34:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    6d36:	4802      	ldr	r0, [pc, #8]	; (6d40 <dma_transfer_complete_e_cb+0xc>)
    6d38:	4b02      	ldr	r3, [pc, #8]	; (6d44 <dma_transfer_complete_e_cb+0x10>)
    6d3a:	4798      	blx	r3
    6d3c:	bd08      	pop	{r3, pc}
    6d3e:	bf00      	nop
    6d40:	20002890 	.word	0x20002890
    6d44:	00006ce9 	.word	0x00006ce9

00006d48 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    6d48:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    6d4a:	4802      	ldr	r0, [pc, #8]	; (6d54 <dma_transfer_complete_n_cb+0xc>)
    6d4c:	4b02      	ldr	r3, [pc, #8]	; (6d58 <dma_transfer_complete_n_cb+0x10>)
    6d4e:	4798      	blx	r3
    6d50:	bd08      	pop	{r3, pc}
    6d52:	bf00      	nop
    6d54:	20001a40 	.word	0x20001a40
    6d58:	00006ce9 	.word	0x00006ce9

00006d5c <grid_sys_uart_init>:
void grid_sys_uart_init(){
    6d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6d60:	4b2f      	ldr	r3, [pc, #188]	; (6e20 <grid_sys_uart_init+0xc4>)
    6d62:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    6d66:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6d6a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    6d6e:	f042 0204 	orr.w	r2, r2, #4
    6d72:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d76:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6d7a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    6d7e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6d82:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    6d86:	f042 0204 	orr.w	r2, r2, #4
    6d8a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d8e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6d96:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6d9a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    6d9e:	f042 0204 	orr.w	r2, r2, #4
    6da2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6da6:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6daa:	f44f 7100 	mov.w	r1, #512	; 0x200
    6dae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6db2:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    6db6:	f042 0204 	orr.w	r2, r2, #4
    6dba:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6dbe:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    6dc2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 6e5c <grid_sys_uart_init+0x100>
    6dc6:	4a17      	ldr	r2, [pc, #92]	; (6e24 <grid_sys_uart_init+0xc8>)
    6dc8:	2101      	movs	r1, #1
    6dca:	4640      	mov	r0, r8
    6dcc:	4c16      	ldr	r4, [pc, #88]	; (6e28 <grid_sys_uart_init+0xcc>)
    6dce:	47a0      	blx	r4
 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    6dd0:	4f16      	ldr	r7, [pc, #88]	; (6e2c <grid_sys_uart_init+0xd0>)
    6dd2:	4a17      	ldr	r2, [pc, #92]	; (6e30 <grid_sys_uart_init+0xd4>)
    6dd4:	2101      	movs	r1, #1
    6dd6:	4638      	mov	r0, r7
    6dd8:	47a0      	blx	r4
 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    6dda:	4e16      	ldr	r6, [pc, #88]	; (6e34 <grid_sys_uart_init+0xd8>)
    6ddc:	4a16      	ldr	r2, [pc, #88]	; (6e38 <grid_sys_uart_init+0xdc>)
    6dde:	2101      	movs	r1, #1
    6de0:	4630      	mov	r0, r6
    6de2:	47a0      	blx	r4
 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    6de4:	4d15      	ldr	r5, [pc, #84]	; (6e3c <grid_sys_uart_init+0xe0>)
    6de6:	4a16      	ldr	r2, [pc, #88]	; (6e40 <grid_sys_uart_init+0xe4>)
    6de8:	2101      	movs	r1, #1
    6dea:	4628      	mov	r0, r5
    6dec:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    6dee:	4915      	ldr	r1, [pc, #84]	; (6e44 <grid_sys_uart_init+0xe8>)
    6df0:	4640      	mov	r0, r8
    6df2:	4c15      	ldr	r4, [pc, #84]	; (6e48 <grid_sys_uart_init+0xec>)
    6df4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    6df6:	4915      	ldr	r1, [pc, #84]	; (6e4c <grid_sys_uart_init+0xf0>)
    6df8:	4638      	mov	r0, r7
    6dfa:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    6dfc:	4914      	ldr	r1, [pc, #80]	; (6e50 <grid_sys_uart_init+0xf4>)
    6dfe:	4630      	mov	r0, r6
    6e00:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    6e02:	4914      	ldr	r1, [pc, #80]	; (6e54 <grid_sys_uart_init+0xf8>)
    6e04:	4628      	mov	r0, r5
    6e06:	47a0      	blx	r4
	usart_async_enable(&USART_NORTH);
    6e08:	4640      	mov	r0, r8
    6e0a:	4c13      	ldr	r4, [pc, #76]	; (6e58 <grid_sys_uart_init+0xfc>)
    6e0c:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    6e0e:	4638      	mov	r0, r7
    6e10:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    6e12:	4630      	mov	r0, r6
    6e14:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    6e16:	4628      	mov	r0, r5
    6e18:	47a0      	blx	r4
    6e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e1e:	bf00      	nop
    6e20:	41008000 	.word	0x41008000
    6e24:	000061f9 	.word	0x000061f9
    6e28:	00001bd1 	.word	0x00001bd1
    6e2c:	20001414 	.word	0x20001414
    6e30:	000061e5 	.word	0x000061e5
    6e34:	20001568 	.word	0x20001568
    6e38:	000061d1 	.word	0x000061d1
    6e3c:	20001518 	.word	0x20001518
    6e40:	000061bd 	.word	0x000061bd
    6e44:	20002000 	.word	0x20002000
    6e48:	00001ba9 	.word	0x00001ba9
    6e4c:	200023f8 	.word	0x200023f8
    6e50:	200025e0 	.word	0x200025e0
    6e54:	20002b3c 	.word	0x20002b3c
    6e58:	00001b7d 	.word	0x00001b7d
    6e5c:	20001464 	.word	0x20001464

00006e60 <grid_rx_dma_init_one>:
void grid_rx_dma_init_one(GRID_PORT_t* por, uint32_t buffer_length, void* transfer_done_cb() ){
    6e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e62:	b083      	sub	sp, #12
    6e64:	460f      	mov	r7, r1
    6e66:	4616      	mov	r6, r2
	uint8_t dma_rx_channel = por->dma_channel;	
    6e68:	7984      	ldrb	r4, [r0, #6]
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    6e6a:	4605      	mov	r5, r0
    6e6c:	f855 3be4 	ldr.w	r3, [r5], #228
    6e70:	6a19      	ldr	r1, [r3, #32]
    6e72:	3128      	adds	r1, #40	; 0x28
    6e74:	4620      	mov	r0, r4
    6e76:	4b0d      	ldr	r3, [pc, #52]	; (6eac <grid_rx_dma_init_one+0x4c>)
    6e78:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    6e7a:	4629      	mov	r1, r5
    6e7c:	4620      	mov	r0, r4
    6e7e:	4b0c      	ldr	r3, [pc, #48]	; (6eb0 <grid_rx_dma_init_one+0x50>)
    6e80:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    6e82:	4639      	mov	r1, r7
    6e84:	4620      	mov	r0, r4
    6e86:	4b0b      	ldr	r3, [pc, #44]	; (6eb4 <grid_rx_dma_init_one+0x54>)
    6e88:	4798      	blx	r3
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    6e8a:	4621      	mov	r1, r4
    6e8c:	a801      	add	r0, sp, #4
    6e8e:	4b0a      	ldr	r3, [pc, #40]	; (6eb8 <grid_rx_dma_init_one+0x58>)
    6e90:	4798      	blx	r3
	resource_rx->dma_cb.transfer_done = transfer_done_cb;	
    6e92:	9b01      	ldr	r3, [sp, #4]
    6e94:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    6e96:	2201      	movs	r2, #1
    6e98:	2100      	movs	r1, #0
    6e9a:	4620      	mov	r0, r4
    6e9c:	4b07      	ldr	r3, [pc, #28]	; (6ebc <grid_rx_dma_init_one+0x5c>)
    6e9e:	4798      	blx	r3
	_dma_enable_transaction(dma_rx_channel, false);
    6ea0:	2100      	movs	r1, #0
    6ea2:	4620      	mov	r0, r4
    6ea4:	4b06      	ldr	r3, [pc, #24]	; (6ec0 <grid_rx_dma_init_one+0x60>)
    6ea6:	4798      	blx	r3
}
    6ea8:	b003      	add	sp, #12
    6eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6eac:	000029a5 	.word	0x000029a5
    6eb0:	00002995 	.word	0x00002995
    6eb4:	000029d1 	.word	0x000029d1
    6eb8:	00002a69 	.word	0x00002a69
    6ebc:	00002941 	.word	0x00002941
    6ec0:	00002a29 	.word	0x00002a29

00006ec4 <grid_rx_dma_init>:
void grid_rx_dma_init(){
    6ec4:	b510      	push	{r4, lr}
	grid_rx_dma_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    6ec6:	4a09      	ldr	r2, [pc, #36]	; (6eec <grid_rx_dma_init+0x28>)
    6ec8:	21c8      	movs	r1, #200	; 0xc8
    6eca:	4809      	ldr	r0, [pc, #36]	; (6ef0 <grid_rx_dma_init+0x2c>)
    6ecc:	4c09      	ldr	r4, [pc, #36]	; (6ef4 <grid_rx_dma_init+0x30>)
    6ece:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    6ed0:	4a09      	ldr	r2, [pc, #36]	; (6ef8 <grid_rx_dma_init+0x34>)
    6ed2:	21c8      	movs	r1, #200	; 0xc8
    6ed4:	4809      	ldr	r0, [pc, #36]	; (6efc <grid_rx_dma_init+0x38>)
    6ed6:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    6ed8:	4a09      	ldr	r2, [pc, #36]	; (6f00 <grid_rx_dma_init+0x3c>)
    6eda:	21c8      	movs	r1, #200	; 0xc8
    6edc:	4809      	ldr	r0, [pc, #36]	; (6f04 <grid_rx_dma_init+0x40>)
    6ede:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    6ee0:	4a09      	ldr	r2, [pc, #36]	; (6f08 <grid_rx_dma_init+0x44>)
    6ee2:	21c8      	movs	r1, #200	; 0xc8
    6ee4:	4809      	ldr	r0, [pc, #36]	; (6f0c <grid_rx_dma_init+0x48>)
    6ee6:	47a0      	blx	r4
    6ee8:	bd10      	pop	{r4, pc}
    6eea:	bf00      	nop
    6eec:	00006d49 	.word	0x00006d49
    6ef0:	20001a40 	.word	0x20001a40
    6ef4:	00006e61 	.word	0x00006e61
    6ef8:	00006d35 	.word	0x00006d35
    6efc:	20002890 	.word	0x20002890
    6f00:	00006d21 	.word	0x00006d21
    6f04:	200023fc 	.word	0x200023fc
    6f08:	00006d0d 	.word	0x00006d0d
    6f0c:	20002214 	.word	0x20002214

00006f10 <grid_port_process_ui>:
void grid_port_process_ui(GRID_PORT_t* por){
    6f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f14:	b0cb      	sub	sp, #300	; 0x12c
	sprintf(&message[length],
    6f16:	2317      	movs	r3, #23
    6f18:	9305      	str	r3, [sp, #20]
    6f1a:	2300      	movs	r3, #0
    6f1c:	9304      	str	r3, [sp, #16]
    6f1e:	227f      	movs	r2, #127	; 0x7f
    6f20:	9203      	str	r2, [sp, #12]
    6f22:	9202      	str	r2, [sp, #8]
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    6f24:	4a74      	ldr	r2, [pc, #464]	; (70f8 <grid_port_process_ui+0x1e8>)
	sprintf(&message[length],
    6f26:	f892 2205 	ldrb.w	r2, [r2, #517]	; 0x205
    6f2a:	9201      	str	r2, [sp, #4]
    6f2c:	9300      	str	r3, [sp, #0]
    6f2e:	230f      	movs	r3, #15
    6f30:	2201      	movs	r2, #1
    6f32:	4972      	ldr	r1, [pc, #456]	; (70fc <grid_port_process_ui+0x1ec>)
    6f34:	a80a      	add	r0, sp, #40	; 0x28
    6f36:	4c72      	ldr	r4, [pc, #456]	; (7100 <grid_port_process_ui+0x1f0>)
    6f38:	47a0      	blx	r4
	length += strlen(&message[length]);
    6f3a:	a80a      	add	r0, sp, #40	; 0x28
    6f3c:	4b71      	ldr	r3, [pc, #452]	; (7104 <grid_port_process_ui+0x1f4>)
    6f3e:	4798      	blx	r3
    6f40:	4680      	mov	r8, r0
	CRITICAL_SECTION_ENTER();
    6f42:	a807      	add	r0, sp, #28
    6f44:	4b70      	ldr	r3, [pc, #448]	; (7108 <grid_port_process_ui+0x1f8>)
    6f46:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6f48:	4b70      	ldr	r3, [pc, #448]	; (710c <grid_port_process_ui+0x1fc>)
    6f4a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6f4e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6f52:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6f56:	4054      	eors	r4, r2
    6f58:	400c      	ands	r4, r1
    6f5a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    6f5c:	a807      	add	r0, sp, #28
    6f5e:	4b6c      	ldr	r3, [pc, #432]	; (7110 <grid_port_process_ui+0x200>)
    6f60:	4798      	blx	r3
	if (grid_module_mapmode_state != gpio_get_pin_level(MAP_MODE)){
    6f62:	4b6c      	ldr	r3, [pc, #432]	; (7114 <grid_port_process_ui+0x204>)
    6f64:	f893 7304 	ldrb.w	r7, [r3, #772]	; 0x304
    6f68:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    6f6c:	42bc      	cmp	r4, r7
    6f6e:	d037      	beq.n	6fe0 <grid_port_process_ui+0xd0>
		if (grid_module_mapmode_state == 1){
    6f70:	2f01      	cmp	r7, #1
    6f72:	d01c      	beq.n	6fae <grid_port_process_ui+0x9e>
			grid_module_mapmode_state = 1;		
    6f74:	2701      	movs	r7, #1
    6f76:	4b67      	ldr	r3, [pc, #412]	; (7114 <grid_port_process_ui+0x204>)
    6f78:	f883 7304 	strb.w	r7, [r3, #772]	; 0x304
			sprintf(&message[length], "%c%02x%02x%02x%02x%c",			
    6f7c:	ab0a      	add	r3, sp, #40	; 0x28
    6f7e:	eb03 0408 	add.w	r4, r3, r8
    6f82:	2303      	movs	r3, #3
    6f84:	9303      	str	r3, [sp, #12]
    6f86:	2339      	movs	r3, #57	; 0x39
    6f88:	9302      	str	r3, [sp, #8]
    6f8a:	2383      	movs	r3, #131	; 0x83
    6f8c:	9301      	str	r3, [sp, #4]
    6f8e:	2381      	movs	r3, #129	; 0x81
    6f90:	9300      	str	r3, [sp, #0]
    6f92:	463b      	mov	r3, r7
    6f94:	2202      	movs	r2, #2
    6f96:	4960      	ldr	r1, [pc, #384]	; (7118 <grid_port_process_ui+0x208>)
    6f98:	4620      	mov	r0, r4
    6f9a:	4d59      	ldr	r5, [pc, #356]	; (7100 <grid_port_process_ui+0x1f0>)
    6f9c:	47a8      	blx	r5
			length += strlen(&message[length]);
    6f9e:	4620      	mov	r0, r4
    6fa0:	4b58      	ldr	r3, [pc, #352]	; (7104 <grid_port_process_ui+0x1f4>)
    6fa2:	4798      	blx	r3
    6fa4:	4480      	add	r8, r0
			packetvalid++;
    6fa6:	2400      	movs	r4, #0
		if (grid_ain_get_changed(i)){
    6fa8:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7150 <grid_port_process_ui+0x240>
    6fac:	e026      	b.n	6ffc <grid_port_process_ui+0xec>
			grid_module_mapmode_state = 0;
    6fae:	2200      	movs	r2, #0
    6fb0:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
			sprintf(&message[length], "%c%02x%02x%02x%02x%c",			
    6fb4:	ab0a      	add	r3, sp, #40	; 0x28
    6fb6:	eb03 0408 	add.w	r4, r3, r8
    6fba:	2303      	movs	r3, #3
    6fbc:	9303      	str	r3, [sp, #12]
    6fbe:	2339      	movs	r3, #57	; 0x39
    6fc0:	9302      	str	r3, [sp, #8]
    6fc2:	2383      	movs	r3, #131	; 0x83
    6fc4:	9301      	str	r3, [sp, #4]
    6fc6:	2380      	movs	r3, #128	; 0x80
    6fc8:	9300      	str	r3, [sp, #0]
    6fca:	2301      	movs	r3, #1
    6fcc:	2202      	movs	r2, #2
    6fce:	4952      	ldr	r1, [pc, #328]	; (7118 <grid_port_process_ui+0x208>)
    6fd0:	4620      	mov	r0, r4
    6fd2:	4d4b      	ldr	r5, [pc, #300]	; (7100 <grid_port_process_ui+0x1f0>)
    6fd4:	47a8      	blx	r5
			length += strlen(&message[length]);
    6fd6:	4620      	mov	r0, r4
    6fd8:	4b4a      	ldr	r3, [pc, #296]	; (7104 <grid_port_process_ui+0x1f4>)
    6fda:	4798      	blx	r3
    6fdc:	4480      	add	r8, r0
    6fde:	e7e2      	b.n	6fa6 <grid_port_process_ui+0x96>
	uint8_t packetvalid = 0;
    6fe0:	2700      	movs	r7, #0
    6fe2:	e7e0      	b.n	6fa6 <grid_port_process_ui+0x96>
				grid_led_set_phase(i, 0, average*2/128); // 0...255
    6fe4:	0072      	lsls	r2, r6, #1
    6fe6:	bf48      	it	mi
    6fe8:	327f      	addmi	r2, #127	; 0x7f
    6fea:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    6fee:	2100      	movs	r1, #0
    6ff0:	4628      	mov	r0, r5
    6ff2:	4b4a      	ldr	r3, [pc, #296]	; (711c <grid_port_process_ui+0x20c>)
    6ff4:	4798      	blx	r3
    6ff6:	3401      	adds	r4, #1
	for (uint8_t i = 0; i<16; i++)
    6ff8:	2c10      	cmp	r4, #16
    6ffa:	d032      	beq.n	7062 <grid_port_process_ui+0x152>
    6ffc:	b2e5      	uxtb	r5, r4
		if (grid_ain_get_changed(i)){
    6ffe:	4628      	mov	r0, r5
    7000:	47d0      	blx	sl
    7002:	2800      	cmp	r0, #0
    7004:	d0f7      	beq.n	6ff6 <grid_port_process_ui+0xe6>
			packetvalid++;
    7006:	3701      	adds	r7, #1
    7008:	b2ff      	uxtb	r7, r7
			uint16_t average = grid_ain_get_average(i);
    700a:	4628      	mov	r0, r5
    700c:	4b44      	ldr	r3, [pc, #272]	; (7120 <grid_port_process_ui+0x210>)
    700e:	4798      	blx	r3
    7010:	4606      	mov	r6, r0
			sprintf(&message[length], "%c%02x%02x%02x%02x%02x%c",
    7012:	ab0a      	add	r3, sp, #40	; 0x28
    7014:	eb03 0908 	add.w	r9, r3, r8
    7018:	2303      	movs	r3, #3
    701a:	9304      	str	r3, [sp, #16]
    701c:	f3c0 138f 	ubfx	r3, r0, #6, #16
    7020:	9303      	str	r3, [sp, #12]
    7022:	9402      	str	r4, [sp, #8]
    7024:	23b0      	movs	r3, #176	; 0xb0
    7026:	9301      	str	r3, [sp, #4]
    7028:	2300      	movs	r3, #0
    702a:	9300      	str	r3, [sp, #0]
    702c:	2202      	movs	r2, #2
    702e:	493d      	ldr	r1, [pc, #244]	; (7124 <grid_port_process_ui+0x214>)
    7030:	4648      	mov	r0, r9
    7032:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 7100 <grid_port_process_ui+0x1f0>
    7036:	47d8      	blx	fp
			length += strlen(&message[length]);
    7038:	4648      	mov	r0, r9
    703a:	4b32      	ldr	r3, [pc, #200]	; (7104 <grid_port_process_ui+0x1f4>)
    703c:	4798      	blx	r3
    703e:	4480      	add	r8, r0
			if (grid_sys_get_hwcfg()==64 && i>11){
    7040:	4b39      	ldr	r3, [pc, #228]	; (7128 <grid_port_process_ui+0x218>)
    7042:	4798      	blx	r3
    7044:	2840      	cmp	r0, #64	; 0x40
    7046:	d1cd      	bne.n	6fe4 <grid_port_process_ui+0xd4>
    7048:	2d0b      	cmp	r5, #11
    704a:	d9cb      	bls.n	6fe4 <grid_port_process_ui+0xd4>
				grid_led_set_phase(i-4, 0, average*2/128); // 0...255
    704c:	0072      	lsls	r2, r6, #1
    704e:	bf48      	it	mi
    7050:	327f      	addmi	r2, #127	; 0x7f
    7052:	1f28      	subs	r0, r5, #4
    7054:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    7058:	2100      	movs	r1, #0
    705a:	b2c0      	uxtb	r0, r0
    705c:	4b2f      	ldr	r3, [pc, #188]	; (711c <grid_port_process_ui+0x20c>)
    705e:	4798      	blx	r3
    7060:	e7c9      	b.n	6ff6 <grid_port_process_ui+0xe6>
	if (packetvalid){
    7062:	b917      	cbnz	r7, 706a <grid_port_process_ui+0x15a>
}
    7064:	b04b      	add	sp, #300	; 0x12c
    7066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_sys_state.next_broadcast_message_id++;
    706a:	4a23      	ldr	r2, [pc, #140]	; (70f8 <grid_port_process_ui+0x1e8>)
    706c:	f892 3205 	ldrb.w	r3, [r2, #517]	; 0x205
    7070:	3301      	adds	r3, #1
    7072:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    7076:	ad0a      	add	r5, sp, #40	; 0x28
    7078:	eb05 0408 	add.w	r4, r5, r8
    707c:	2204      	movs	r2, #4
    707e:	492b      	ldr	r1, [pc, #172]	; (712c <grid_port_process_ui+0x21c>)
    7080:	4620      	mov	r0, r4
    7082:	4e1f      	ldr	r6, [pc, #124]	; (7100 <grid_port_process_ui+0x1f0>)
    7084:	47b0      	blx	r6
		length += strlen(&message[length]);
    7086:	4620      	mov	r0, r4
    7088:	4c1e      	ldr	r4, [pc, #120]	; (7104 <grid_port_process_ui+0x1f4>)
    708a:	47a0      	blx	r4
    708c:	4480      	add	r8, r0
		sprintf(length_string, "%02x", length);
    708e:	4642      	mov	r2, r8
    7090:	4927      	ldr	r1, [pc, #156]	; (7130 <grid_port_process_ui+0x220>)
    7092:	a808      	add	r0, sp, #32
    7094:	47b0      	blx	r6
		message[2] = length_string[0];
    7096:	f89d 3020 	ldrb.w	r3, [sp, #32]
    709a:	70ab      	strb	r3, [r5, #2]
		message[3] = length_string[1];
    709c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    70a0:	70eb      	strb	r3, [r5, #3]
		sprintf(&message[length], "00\n");
    70a2:	4b24      	ldr	r3, [pc, #144]	; (7134 <grid_port_process_ui+0x224>)
    70a4:	6818      	ldr	r0, [r3, #0]
    70a6:	f845 0008 	str.w	r0, [r5, r8]
		length += strlen(&message[length]);
    70aa:	eb05 0008 	add.w	r0, r5, r8
    70ae:	47a0      	blx	r4
    70b0:	eb08 0400 	add.w	r4, r8, r0
		grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    70b4:	4621      	mov	r1, r4
    70b6:	4628      	mov	r0, r5
    70b8:	4b1f      	ldr	r3, [pc, #124]	; (7138 <grid_port_process_ui+0x228>)
    70ba:	4798      	blx	r3
    70bc:	4602      	mov	r2, r0
    70be:	4621      	mov	r1, r4
    70c0:	4628      	mov	r0, r5
    70c2:	4b1e      	ldr	r3, [pc, #120]	; (713c <grid_port_process_ui+0x22c>)
    70c4:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    70c6:	b2a1      	uxth	r1, r4
    70c8:	481d      	ldr	r0, [pc, #116]	; (7140 <grid_port_process_ui+0x230>)
    70ca:	4b1e      	ldr	r3, [pc, #120]	; (7144 <grid_port_process_ui+0x234>)
    70cc:	4798      	blx	r3
    70ce:	2800      	cmp	r0, #0
    70d0:	d0c8      	beq.n	7064 <grid_port_process_ui+0x154>
			for(uint16_t i = 0; i<length; i++){
    70d2:	b164      	cbz	r4, 70ee <grid_port_process_ui+0x1de>
    70d4:	2500      	movs	r5, #0
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    70d6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    70da:	4f19      	ldr	r7, [pc, #100]	; (7140 <grid_port_process_ui+0x230>)
    70dc:	4e1a      	ldr	r6, [pc, #104]	; (7148 <grid_port_process_ui+0x238>)
    70de:	f818 1005 	ldrb.w	r1, [r8, r5]
    70e2:	4638      	mov	r0, r7
    70e4:	47b0      	blx	r6
			for(uint16_t i = 0; i<length; i++){
    70e6:	3501      	adds	r5, #1
    70e8:	b2ad      	uxth	r5, r5
    70ea:	42ac      	cmp	r4, r5
    70ec:	d8f7      	bhi.n	70de <grid_port_process_ui+0x1ce>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    70ee:	4814      	ldr	r0, [pc, #80]	; (7140 <grid_port_process_ui+0x230>)
    70f0:	4b16      	ldr	r3, [pc, #88]	; (714c <grid_port_process_ui+0x23c>)
    70f2:	4798      	blx	r3
}
    70f4:	e7b6      	b.n	7064 <grid_port_process_ui+0x154>
    70f6:	bf00      	nop
    70f8:	20002004 	.word	0x20002004
    70fc:	0000a7a4 	.word	0x0000a7a4
    7100:	000099a1 	.word	0x000099a1
    7104:	000099e9 	.word	0x000099e9
    7108:	000012b5 	.word	0x000012b5
    710c:	41008000 	.word	0x41008000
    7110:	000012c3 	.word	0x000012c3
    7114:	20000040 	.word	0x20000040
    7118:	0000a7c0 	.word	0x0000a7c0
    711c:	000059a1 	.word	0x000059a1
    7120:	00005f4d 	.word	0x00005f4d
    7124:	0000a7d8 	.word	0x0000a7d8
    7128:	00006059 	.word	0x00006059
    712c:	0000a7bc 	.word	0x0000a7bc
    7130:	0000a6e8 	.word	0x0000a6e8
    7134:	0000a7f4 	.word	0x0000a7f4
    7138:	0000620d 	.word	0x0000620d
    713c:	00006229 	.word	0x00006229
    7140:	20001dec 	.word	0x20001dec
    7144:	000063c1 	.word	0x000063c1
    7148:	000063f1 	.word	0x000063f1
    714c:	0000640d 	.word	0x0000640d
    7150:	00005f39 	.word	0x00005f39

00007154 <grid_module_init>:



	
/* ============================== GRID_MODULE_INIT() ================================ */
void grid_module_init(void){
    7154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7158:	b085      	sub	sp, #20
		
					

	grid_port_init_all();	
    715a:	4b79      	ldr	r3, [pc, #484]	; (7340 <grid_module_init+0x1ec>)
    715c:	4798      	blx	r3
		
		
						
	// Allocate memory for 4 analog input with the filter depth of 3 samples, 14 bit format, 10bit result resolution
	grid_ain_init(grid_module_ain_buffer_size, 5, 14, 8);		
    715e:	2308      	movs	r3, #8
    7160:	220e      	movs	r2, #14
    7162:	2105      	movs	r1, #5
    7164:	2010      	movs	r0, #16
    7166:	4c77      	ldr	r4, [pc, #476]	; (7344 <grid_module_init+0x1f0>)
    7168:	47a0      	blx	r4
	grid_led_init(grid_module_led_buffer_size);
    716a:	2010      	movs	r0, #16
    716c:	4b76      	ldr	r3, [pc, #472]	; (7348 <grid_module_init+0x1f4>)
    716e:	4798      	blx	r3

	spi_m_dma_get_io_descriptor(&GRID_LED, &io2);
    7170:	4c76      	ldr	r4, [pc, #472]	; (734c <grid_module_init+0x1f8>)
    7172:	4977      	ldr	r1, [pc, #476]	; (7350 <grid_module_init+0x1fc>)
    7174:	4620      	mov	r0, r4
    7176:	4b77      	ldr	r3, [pc, #476]	; (7354 <grid_module_init+0x200>)
    7178:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, tx_complete_cb_GRID_LED);
    717a:	4a77      	ldr	r2, [pc, #476]	; (7358 <grid_module_init+0x204>)
    717c:	2100      	movs	r1, #0
    717e:	4620      	mov	r0, r4
    7180:	4b76      	ldr	r3, [pc, #472]	; (735c <grid_module_init+0x208>)
    7182:	4798      	blx	r3


//	grid_rx_timout_init();
	
		
	grid_sys_uart_init();
    7184:	4b76      	ldr	r3, [pc, #472]	; (7360 <grid_module_init+0x20c>)
    7186:	4798      	blx	r3
	
	grid_rx_dma_init();	
    7188:	4b76      	ldr	r3, [pc, #472]	; (7364 <grid_module_init+0x210>)
    718a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    718c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7190:	4b75      	ldr	r3, [pc, #468]	; (7368 <grid_module_init+0x214>)
    7192:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){
    7196:	4c75      	ldr	r4, [pc, #468]	; (736c <grid_module_init+0x218>)
    7198:	47a0      	blx	r4
						
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){
    719a:	47a0      	blx	r4
    719c:	2880      	cmp	r0, #128	; 0x80
    719e:	d033      	beq.n	7208 <grid_module_init+0xb4>
		grid_adc_set_config(14, GRID_ADC_CFG_BINARY, 1);
		grid_adc_set_config(15, GRID_ADC_CFG_BINARY, 1);
			
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    71a0:	4b72      	ldr	r3, [pc, #456]	; (736c <grid_module_init+0x218>)
    71a2:	4798      	blx	r3
    71a4:	2840      	cmp	r0, #64	; 0x40
    71a6:	f000 8098 	beq.w	72da <grid_module_init+0x186>
					
	}
				
		
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    71aa:	4c71      	ldr	r4, [pc, #452]	; (7370 <grid_module_init+0x21c>)
    71ac:	4b71      	ldr	r3, [pc, #452]	; (7374 <grid_module_init+0x220>)
    71ae:	2200      	movs	r2, #0
    71b0:	4611      	mov	r1, r2
    71b2:	4620      	mov	r0, r4
    71b4:	4f70      	ldr	r7, [pc, #448]	; (7378 <grid_module_init+0x224>)
    71b6:	47b8      	blx	r7
	adc_async_enable_channel(&ADC_0, 0);
    71b8:	2100      	movs	r1, #0
    71ba:	4620      	mov	r0, r4
    71bc:	4e6f      	ldr	r6, [pc, #444]	; (737c <grid_module_init+0x228>)
    71be:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_0);
    71c0:	4620      	mov	r0, r4
    71c2:	4d6f      	ldr	r5, [pc, #444]	; (7380 <grid_module_init+0x22c>)
    71c4:	47a8      	blx	r5
				
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    71c6:	4c6f      	ldr	r4, [pc, #444]	; (7384 <grid_module_init+0x230>)
    71c8:	4b6f      	ldr	r3, [pc, #444]	; (7388 <grid_module_init+0x234>)
    71ca:	2200      	movs	r2, #0
    71cc:	4611      	mov	r1, r2
    71ce:	4620      	mov	r0, r4
    71d0:	47b8      	blx	r7
	adc_async_enable_channel(&ADC_1, 0);
    71d2:	2100      	movs	r1, #0
    71d4:	4620      	mov	r0, r4
    71d6:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_1);
    71d8:	4620      	mov	r0, r4
    71da:	47a8      	blx	r5
	
	//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
	/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
	usart_async_get_io_descriptor(&GRID_AUX, &io);
    71dc:	4c6b      	ldr	r4, [pc, #428]	; (738c <grid_module_init+0x238>)
    71de:	496c      	ldr	r1, [pc, #432]	; (7390 <grid_module_init+0x23c>)
    71e0:	4620      	mov	r0, r4
    71e2:	4b6c      	ldr	r3, [pc, #432]	; (7394 <grid_module_init+0x240>)
    71e4:	4798      	blx	r3
	usart_async_enable(&GRID_AUX);
    71e6:	4620      	mov	r0, r4
    71e8:	4b6b      	ldr	r3, [pc, #428]	; (7398 <grid_module_init+0x244>)
    71ea:	4798      	blx	r3


	// GRID_LED Library NEW NEW NEW NEW
	
	grid_sys_state.error_style = 0;
    71ec:	4b6b      	ldr	r3, [pc, #428]	; (739c <grid_module_init+0x248>)
    71ee:	2200      	movs	r2, #0
    71f0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	grid_sys_state.error_state = 500;
    71f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    71f8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	grid_sys_state.error_code = 7;
    71fc:	2207      	movs	r2, #7
    71fe:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		
		
}
    7202:	b005      	add	sp, #20
    7204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_adc_cfg[register_offset] |= (1<<bit_offest);
    7208:	4b65      	ldr	r3, [pc, #404]	; (73a0 <grid_module_init+0x24c>)
    720a:	f993 a451 	ldrsb.w	sl, [r3, #1105]	; 0x451
    720e:	f993 9452 	ldrsb.w	r9, [r3, #1106]	; 0x452
    7212:	f993 8453 	ldrsb.w	r8, [r3, #1107]	; 0x453
    7216:	f993 c454 	ldrsb.w	ip, [r3, #1108]	; 0x454
    721a:	f993 e455 	ldrsb.w	lr, [r3, #1109]	; 0x455
    721e:	f993 7456 	ldrsb.w	r7, [r3, #1110]	; 0x456
    7222:	f993 6457 	ldrsb.w	r6, [r3, #1111]	; 0x457
    7226:	f993 5458 	ldrsb.w	r5, [r3, #1112]	; 0x458
    722a:	f993 4459 	ldrsb.w	r4, [r3, #1113]	; 0x459
    722e:	f993 045a 	ldrsb.w	r0, [r3, #1114]	; 0x45a
    7232:	f993 145b 	ldrsb.w	r1, [r3, #1115]	; 0x45b
    7236:	f993 245c 	ldrsb.w	r2, [r3, #1116]	; 0x45c
    723a:	9203      	str	r2, [sp, #12]
    723c:	f993 245d 	ldrsb.w	r2, [r3, #1117]	; 0x45d
    7240:	9202      	str	r2, [sp, #8]
    7242:	f993 b45e 	ldrsb.w	fp, [r3, #1118]	; 0x45e
    7246:	f8cd b004 	str.w	fp, [sp, #4]
    724a:	f993 245f 	ldrsb.w	r2, [r3, #1119]	; 0x45f
    724e:	f893 b450 	ldrb.w	fp, [r3, #1104]	; 0x450
    7252:	f04b 0b03 	orr.w	fp, fp, #3
    7256:	f883 b450 	strb.w	fp, [r3, #1104]	; 0x450
    725a:	f04a 0a03 	orr.w	sl, sl, #3
    725e:	f883 a451 	strb.w	sl, [r3, #1105]	; 0x451
    7262:	f049 0903 	orr.w	r9, r9, #3
    7266:	f883 9452 	strb.w	r9, [r3, #1106]	; 0x452
    726a:	f048 0803 	orr.w	r8, r8, #3
    726e:	f883 8453 	strb.w	r8, [r3, #1107]	; 0x453
    7272:	f04c 0c03 	orr.w	ip, ip, #3
    7276:	f883 c454 	strb.w	ip, [r3, #1108]	; 0x454
    727a:	f04e 0e03 	orr.w	lr, lr, #3
    727e:	f883 e455 	strb.w	lr, [r3, #1109]	; 0x455
    7282:	f047 0703 	orr.w	r7, r7, #3
    7286:	f883 7456 	strb.w	r7, [r3, #1110]	; 0x456
    728a:	f046 0603 	orr.w	r6, r6, #3
    728e:	f883 6457 	strb.w	r6, [r3, #1111]	; 0x457
    7292:	f045 0503 	orr.w	r5, r5, #3
    7296:	f883 5458 	strb.w	r5, [r3, #1112]	; 0x458
    729a:	f044 0403 	orr.w	r4, r4, #3
    729e:	f883 4459 	strb.w	r4, [r3, #1113]	; 0x459
    72a2:	f040 0003 	orr.w	r0, r0, #3
    72a6:	f883 045a 	strb.w	r0, [r3, #1114]	; 0x45a
    72aa:	f041 0103 	orr.w	r1, r1, #3
    72ae:	f883 145b 	strb.w	r1, [r3, #1115]	; 0x45b
    72b2:	9903      	ldr	r1, [sp, #12]
    72b4:	f041 0103 	orr.w	r1, r1, #3
    72b8:	f883 145c 	strb.w	r1, [r3, #1116]	; 0x45c
    72bc:	9902      	ldr	r1, [sp, #8]
    72be:	f041 0103 	orr.w	r1, r1, #3
    72c2:	f883 145d 	strb.w	r1, [r3, #1117]	; 0x45d
    72c6:	9901      	ldr	r1, [sp, #4]
    72c8:	f041 0103 	orr.w	r1, r1, #3
    72cc:	f883 145e 	strb.w	r1, [r3, #1118]	; 0x45e
    72d0:	f042 0203 	orr.w	r2, r2, #3
    72d4:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
    72d8:	e762      	b.n	71a0 <grid_module_init+0x4c>
    72da:	4b31      	ldr	r3, [pc, #196]	; (73a0 <grid_module_init+0x24c>)
    72dc:	f893 2450 	ldrb.w	r2, [r3, #1104]	; 0x450
    72e0:	f042 0201 	orr.w	r2, r2, #1
    72e4:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
    72e8:	f893 2451 	ldrb.w	r2, [r3, #1105]	; 0x451
    72ec:	f042 0201 	orr.w	r2, r2, #1
    72f0:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
    72f4:	f893 2452 	ldrb.w	r2, [r3, #1106]	; 0x452
    72f8:	f042 0201 	orr.w	r2, r2, #1
    72fc:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
    7300:	f893 2453 	ldrb.w	r2, [r3, #1107]	; 0x453
    7304:	f042 0201 	orr.w	r2, r2, #1
    7308:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
    730c:	f993 045d 	ldrsb.w	r0, [r3, #1117]	; 0x45d
    7310:	f993 145e 	ldrsb.w	r1, [r3, #1118]	; 0x45e
    7314:	f993 245f 	ldrsb.w	r2, [r3, #1119]	; 0x45f
    7318:	f893 445c 	ldrb.w	r4, [r3, #1116]	; 0x45c
    731c:	f044 0403 	orr.w	r4, r4, #3
    7320:	f883 445c 	strb.w	r4, [r3, #1116]	; 0x45c
    7324:	f040 0003 	orr.w	r0, r0, #3
    7328:	f883 045d 	strb.w	r0, [r3, #1117]	; 0x45d
    732c:	f041 0103 	orr.w	r1, r1, #3
    7330:	f883 145e 	strb.w	r1, [r3, #1118]	; 0x45e
    7334:	f042 0203 	orr.w	r2, r2, #3
    7338:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
    733c:	e735      	b.n	71aa <grid_module_init+0x56>
    733e:	bf00      	nop
    7340:	00006691 	.word	0x00006691
    7344:	00005c9d 	.word	0x00005c9d
    7348:	000059e9 	.word	0x000059e9
    734c:	200014b4 	.word	0x200014b4
    7350:	20002b40 	.word	0x20002b40
    7354:	000015fd 	.word	0x000015fd
    7358:	00005825 	.word	0x00005825
    735c:	000015cd 	.word	0x000015cd
    7360:	00006d5d 	.word	0x00006d5d
    7364:	00006ec5 	.word	0x00006ec5
    7368:	41008000 	.word	0x41008000
    736c:	00006059 	.word	0x00006059
    7370:	200013e8 	.word	0x200013e8
    7374:	00005819 	.word	0x00005819
    7378:	0000112d 	.word	0x0000112d
    737c:	000010ed 	.word	0x000010ed
    7380:	0000128d 	.word	0x0000128d
    7384:	200015b8 	.word	0x200015b8
    7388:	00005ded 	.word	0x00005ded
    738c:	20001398 	.word	0x20001398
    7390:	20002210 	.word	0x20002210
    7394:	00001ba9 	.word	0x00001ba9
    7398:	00001b7d 	.word	0x00001b7d
    739c:	20002004 	.word	0x20002004
    73a0:	20000cec 	.word	0x20000cec

000073a4 <grid_port_receive_task>:
void grid_port_receive_task(GRID_PORT_t* por){
    73a4:	b538      	push	{r3, r4, r5, lr}
	if	(por->rx_double_buffer_status == 1){
    73a6:	8ac3      	ldrh	r3, [r0, #22]
    73a8:	2b01      	cmp	r3, #1
    73aa:	d045      	beq.n	7438 <grid_port_receive_task+0x94>
    73ac:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 20000){
    73ae:	8a83      	ldrh	r3, [r0, #20]
    73b0:	f644 6220 	movw	r2, #20000	; 0x4e20
    73b4:	4293      	cmp	r3, r2
    73b6:	d91d      	bls.n	73f4 <grid_port_receive_task+0x50>
		if (por->partner_status == 1){
    73b8:	f890 31e3 	ldrb.w	r3, [r0, #483]	; 0x1e3
    73bc:	2b01      	cmp	r3, #1
    73be:	d005      	beq.n	73cc <grid_port_receive_task+0x28>
			por->rx_double_buffer_seek_start_index = 0;
    73c0:	2300      	movs	r3, #0
    73c2:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    73c4:	8343      	strh	r3, [r0, #26]
			grid_sys_port_reset_dma(por);
    73c6:	4b1d      	ldr	r3, [pc, #116]	; (743c <grid_port_receive_task+0x98>)
    73c8:	4798      	blx	r3
    73ca:	e015      	b.n	73f8 <grid_port_receive_task+0x54>
			por->rx_double_buffer_seek_start_index = 0;
    73cc:	2300      	movs	r3, #0
    73ce:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    73d0:	8343      	strh	r3, [r0, #26]
			por->partner_status = 0;
    73d2:	f880 31e3 	strb.w	r3, [r0, #483]	; 0x1e3
			por->rx_double_buffer_timeout =0;
    73d6:	8283      	strh	r3, [r0, #20]
			grid_sys_port_reset_dma(por);
    73d8:	4b18      	ldr	r3, [pc, #96]	; (743c <grid_port_receive_task+0x98>)
    73da:	4798      	blx	r3
	mod->color_red = red;
    73dc:	4b18      	ldr	r3, [pc, #96]	; (7440 <grid_port_receive_task+0x9c>)
    73de:	22ff      	movs	r2, #255	; 0xff
    73e0:	701a      	strb	r2, [r3, #0]
	mod->color_green = green;
    73e2:	705a      	strb	r2, [r3, #1]
	mod->color_blue = blue;
    73e4:	709a      	strb	r2, [r3, #2]
	mod->error_state = duration;
    73e6:	22c8      	movs	r2, #200	; 0xc8
    73e8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	mod->error_style = style;
    73ec:	2202      	movs	r2, #2
    73ee:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    73f2:	e001      	b.n	73f8 <grid_port_receive_task+0x54>
		por->rx_double_buffer_timeout++;
    73f4:	3301      	adds	r3, #1
    73f6:	8283      	strh	r3, [r0, #20]
void grid_port_receive_task(GRID_PORT_t* por){
    73f8:	210a      	movs	r1, #10
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    73fa:	4d12      	ldr	r5, [pc, #72]	; (7444 <grid_port_receive_task+0xa0>)
    73fc:	20c8      	movs	r0, #200	; 0xc8
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != '\n' && por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != 0)
    73fe:	8b23      	ldrh	r3, [r4, #24]
    7400:	18e2      	adds	r2, r4, r3
    7402:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
    7406:	2a0a      	cmp	r2, #10
    7408:	d012      	beq.n	7430 <grid_port_receive_task+0x8c>
    740a:	b1aa      	cbz	r2, 7438 <grid_port_receive_task+0x94>
			por->rx_double_buffer_seek_start_index++;			
    740c:	3301      	adds	r3, #1
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    740e:	b29b      	uxth	r3, r3
    7410:	fba5 e203 	umull	lr, r2, r5, r3
    7414:	0992      	lsrs	r2, r2, #6
    7416:	fb00 3312 	mls	r3, r0, r2, r3
    741a:	8323      	strh	r3, [r4, #24]
    741c:	3901      	subs	r1, #1
    741e:	b289      	uxth	r1, r1
	for(uint16_t i = 0; i<10; i++){
    7420:	2900      	cmp	r1, #0
    7422:	d1ec      	bne.n	73fe <grid_port_receive_task+0x5a>
	if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == '\n'){
    7424:	b29b      	uxth	r3, r3
    7426:	4423      	add	r3, r4
    7428:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    742c:	2b0a      	cmp	r3, #10
    742e:	d103      	bne.n	7438 <grid_port_receive_task+0x94>
		por->rx_double_buffer_timeout = 0;
    7430:	2300      	movs	r3, #0
    7432:	82a3      	strh	r3, [r4, #20]
		por->rx_double_buffer_status = 1;
    7434:	2301      	movs	r3, #1
    7436:	82e3      	strh	r3, [r4, #22]
    7438:	bd38      	pop	{r3, r4, r5, pc}
    743a:	bf00      	nop
    743c:	00006ce9 	.word	0x00006ce9
    7440:	20002004 	.word	0x20002004
    7444:	51eb851f 	.word	0x51eb851f

00007448 <RTC_Scheduler_rx_task_cb>:
{
    7448:	b510      	push	{r4, lr}
	grid_port_receive_task(&GRID_PORT_N);
    744a:	4805      	ldr	r0, [pc, #20]	; (7460 <RTC_Scheduler_rx_task_cb+0x18>)
    744c:	4c05      	ldr	r4, [pc, #20]	; (7464 <RTC_Scheduler_rx_task_cb+0x1c>)
    744e:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_E);
    7450:	4805      	ldr	r0, [pc, #20]	; (7468 <RTC_Scheduler_rx_task_cb+0x20>)
    7452:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_S);
    7454:	4805      	ldr	r0, [pc, #20]	; (746c <RTC_Scheduler_rx_task_cb+0x24>)
    7456:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_W);
    7458:	4805      	ldr	r0, [pc, #20]	; (7470 <RTC_Scheduler_rx_task_cb+0x28>)
    745a:	47a0      	blx	r4
    745c:	bd10      	pop	{r4, pc}
    745e:	bf00      	nop
    7460:	20001a40 	.word	0x20001a40
    7464:	000073a5 	.word	0x000073a5
    7468:	20002890 	.word	0x20002890
    746c:	200023fc 	.word	0x200023fc
    7470:	20002214 	.word	0x20002214

00007474 <grid_port_receive_decode>:
void grid_port_receive_decode(GRID_PORT_t* por, uint8_t startcommand, uint8_t length){
    7474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7478:	b08b      	sub	sp, #44	; 0x2c
    747a:	af00      	add	r7, sp, #0
    747c:	4605      	mov	r5, r0
    747e:	4616      	mov	r6, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    7480:	2301      	movs	r3, #1
    7482:	773b      	strb	r3, [r7, #28]
	response[1] = GRID_MSG_DIRECT;
    7484:	230e      	movs	r3, #14
    7486:	777b      	strb	r3, [r7, #29]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    7488:	2315      	movs	r3, #21
    748a:	77bb      	strb	r3, [r7, #30]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    748c:	2304      	movs	r3, #4
    748e:	77fb      	strb	r3, [r7, #31]
	response[4] = '0'; //checksum
    7490:	2330      	movs	r3, #48	; 0x30
    7492:	f887 3020 	strb.w	r3, [r7, #32]
	response[5] = '0'; //checksum
    7496:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	response[6] = '\n';
    749a:	230a      	movs	r3, #10
    749c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	response[7] = 0;
    74a0:	2300      	movs	r3, #0
    74a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	response[8] = 0;
    74a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	response[9] = 0;
    74aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t error_flag = 0;
    74ae:	76fb      	strb	r3, [r7, #27]
	uint8_t message[length];
    74b0:	1dd3      	adds	r3, r2, #7
    74b2:	f023 0307 	bic.w	r3, r3, #7
    74b6:	ebad 0d03 	sub.w	sp, sp, r3
    74ba:	46e8      	mov	r8, sp
	for (uint8_t i = 0; i<length; i++){
    74bc:	2a00      	cmp	r2, #0
    74be:	f000 81ea 	beq.w	7896 <grid_port_receive_decode+0x422>
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    74c2:	8b42      	ldrh	r2, [r0, #26]
    74c4:	f10d 39ff 	add.w	r9, sp, #4294967295
    74c8:	1e71      	subs	r1, r6, #1
    74ca:	fa58 f181 	uxtab	r1, r8, r1
    74ce:	464c      	mov	r4, r9
    74d0:	3201      	adds	r2, #1
    74d2:	eba2 0208 	sub.w	r2, r2, r8
    74d6:	f8df e320 	ldr.w	lr, [pc, #800]	; 77f8 <grid_port_receive_decode+0x384>
    74da:	20c8      	movs	r0, #200	; 0xc8
    74dc:	eb02 0c04 	add.w	ip, r2, r4
    74e0:	fb8e 3a0c 	smull	r3, sl, lr, ip
    74e4:	ea4f 73ec 	mov.w	r3, ip, asr #31
    74e8:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
    74ec:	fb00 c313 	mls	r3, r0, r3, ip
    74f0:	442b      	add	r3, r5
    74f2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    74f6:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (uint8_t i = 0; i<length; i++){
    74fa:	428c      	cmp	r4, r1
    74fc:	d1ee      	bne.n	74dc <grid_port_receive_decode+0x68>
	if (length>5){
    74fe:	2e05      	cmp	r6, #5
    7500:	d82f      	bhi.n	7562 <grid_port_receive_decode+0xee>
	if (message[1] == GRID_MSG_BROADCAST){				
    7502:	f898 3001 	ldrb.w	r3, [r8, #1]
    7506:	2b0f      	cmp	r3, #15
    7508:	f000 81ca 	beq.w	78a0 <grid_port_receive_decode+0x42c>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    750c:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
    7510:	2200      	movs	r2, #0
    7512:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 77f8 <grid_port_receive_decode+0x384>
    7516:	24c8      	movs	r4, #200	; 0xc8
    7518:	4610      	mov	r0, r2
    751a:	eb0c 0102 	add.w	r1, ip, r2
    751e:	fb8e 3801 	smull	r3, r8, lr, r1
    7522:	17cb      	asrs	r3, r1, #31
    7524:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
    7528:	fb04 1313 	mls	r3, r4, r3, r1
    752c:	442b      	add	r3, r5
    752e:	f883 00e4 	strb.w	r0, [r3, #228]	; 0xe4
    7532:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<length; i++){
    7534:	b2d3      	uxtb	r3, r2
    7536:	429e      	cmp	r6, r3
    7538:	d8ef      	bhi.n	751a <grid_port_receive_decode+0xa6>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    753a:	8b6b      	ldrh	r3, [r5, #26]
    753c:	4433      	add	r3, r6
    753e:	4aae      	ldr	r2, [pc, #696]	; (77f8 <grid_port_receive_decode+0x384>)
    7540:	fb82 1203 	smull	r1, r2, r2, r3
    7544:	17de      	asrs	r6, r3, #31
    7546:	ebc6 16a2 	rsb	r6, r6, r2, asr #6
    754a:	22c8      	movs	r2, #200	; 0xc8
    754c:	fb02 3616 	mls	r6, r2, r6, r3
    7550:	b2b6      	uxth	r6, r6
    7552:	836e      	strh	r6, [r5, #26]
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    7554:	832e      	strh	r6, [r5, #24]
	por->rx_double_buffer_status = 0;
    7556:	2300      	movs	r3, #0
    7558:	82eb      	strh	r3, [r5, #22]
}
    755a:	372c      	adds	r7, #44	; 0x2c
    755c:	46bd      	mov	sp, r7
    755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    7562:	1ef0      	subs	r0, r6, #3
    7564:	f107 021b 	add.w	r2, r7, #27
    7568:	2102      	movs	r1, #2
    756a:	4440      	add	r0, r8
    756c:	4ba3      	ldr	r3, [pc, #652]	; (77fc <grid_port_receive_decode+0x388>)
    756e:	4798      	blx	r3
    7570:	4682      	mov	sl, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    7572:	4631      	mov	r1, r6
    7574:	4640      	mov	r0, r8
    7576:	4ba2      	ldr	r3, [pc, #648]	; (7800 <grid_port_receive_decode+0x38c>)
    7578:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    757a:	fa5f fa8a 	uxtb.w	sl, sl
    757e:	4582      	cmp	sl, r0
    7580:	d00c      	beq.n	759c <grid_port_receive_decode+0x128>
	mod->color_red = red;
    7582:	4ba0      	ldr	r3, [pc, #640]	; (7804 <grid_port_receive_decode+0x390>)
    7584:	22ff      	movs	r2, #255	; 0xff
    7586:	701a      	strb	r2, [r3, #0]
	mod->color_green = green;
    7588:	2100      	movs	r1, #0
    758a:	7059      	strb	r1, [r3, #1]
	mod->color_blue = blue;
    758c:	709a      	strb	r2, [r3, #2]
	mod->error_state = duration;
    758e:	22d0      	movs	r2, #208	; 0xd0
    7590:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	mod->error_style = style;
    7594:	2201      	movs	r2, #1
    7596:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    759a:	e7b2      	b.n	7502 <grid_port_receive_decode+0x8e>
    759c:	7efb      	ldrb	r3, [r7, #27]
    759e:	2b00      	cmp	r3, #0
    75a0:	d1ef      	bne.n	7582 <grid_port_receive_decode+0x10e>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    75a2:	f898 3001 	ldrb.w	r3, [r8, #1]
    75a6:	2b0f      	cmp	r3, #15
    75a8:	d00f      	beq.n	75ca <grid_port_receive_decode+0x156>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    75aa:	2b0e      	cmp	r3, #14
    75ac:	f000 80a8 	beq.w	7700 <grid_port_receive_decode+0x28c>
	mod->color_red = red;
    75b0:	4b94      	ldr	r3, [pc, #592]	; (7804 <grid_port_receive_decode+0x390>)
    75b2:	22ff      	movs	r2, #255	; 0xff
    75b4:	701a      	strb	r2, [r3, #0]
	mod->color_green = green;
    75b6:	2200      	movs	r2, #0
    75b8:	705a      	strb	r2, [r3, #1]
	mod->color_blue = blue;
    75ba:	709a      	strb	r2, [r3, #2]
	mod->error_state = duration;
    75bc:	22c8      	movs	r2, #200	; 0xc8
    75be:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	mod->error_style = style;
    75c2:	2202      	movs	r2, #2
    75c4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    75c8:	e7a0      	b.n	750c <grid_port_receive_decode+0x98>
				uint8_t received_id  = grid_msg_get_id(message);;			
    75ca:	4640      	mov	r0, r8
    75cc:	4b8e      	ldr	r3, [pc, #568]	; (7808 <grid_port_receive_decode+0x394>)
    75ce:	4798      	blx	r3
    75d0:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_age(message);
    75d2:	4640      	mov	r0, r8
    75d4:	4b8d      	ldr	r3, [pc, #564]	; (780c <grid_port_receive_decode+0x398>)
    75d6:	4798      	blx	r3
    75d8:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    75da:	4640      	mov	r0, r8
    75dc:	4b8c      	ldr	r3, [pc, #560]	; (7810 <grid_port_receive_decode+0x39c>)
    75de:	4798      	blx	r3
    75e0:	4683      	mov	fp, r0
    75e2:	f1a0 0a7f 	sub.w	sl, r0, #127	; 0x7f
    75e6:	fa4f fa8a 	sxtb.w	sl, sl
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    75ea:	4640      	mov	r0, r8
    75ec:	4b89      	ldr	r3, [pc, #548]	; (7814 <grid_port_receive_decode+0x3a0>)
    75ee:	4798      	blx	r3
    75f0:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    75f4:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    75f6:	f895 21e0 	ldrb.w	r2, [r5, #480]	; 0x1e0
    75fa:	b182      	cbz	r2, 761e <grid_port_receive_decode+0x1aa>
				else if(por->partner_fi == 1){ // 90 deg
    75fc:	2a01      	cmp	r2, #1
    75fe:	d009      	beq.n	7614 <grid_port_receive_decode+0x1a0>
				else if(por->partner_fi == 2){ // 180 deg
    7600:	2a02      	cmp	r2, #2
    7602:	d064      	beq.n	76ce <grid_port_receive_decode+0x25a>
				else if(por->partner_fi == 3){ // 270 deg
    7604:	2a03      	cmp	r2, #3
    7606:	d16a      	bne.n	76de <grid_port_receive_decode+0x26a>
					rotated_dy  -= received_dx;
    7608:	f1cb 0b7f 	rsb	fp, fp, #127	; 0x7f
					rotated_dx  += received_dy;
    760c:	469a      	mov	sl, r3
					rotated_dy  -= received_dx;
    760e:	fa4f f38b 	sxtb.w	r3, fp
    7612:	e004      	b.n	761e <grid_port_receive_decode+0x1aa>
					rotated_dx  -= received_dy;
    7614:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    7618:	4653      	mov	r3, sl
					rotated_dx  -= received_dy;
    761a:	fa4f fa80 	sxtb.w	sl, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    761e:	f895 b1e1 	ldrb.w	fp, [r5, #481]	; 0x1e1
    7622:	f10b 0b7f 	add.w	fp, fp, #127	; 0x7f
    7626:	44da      	add	sl, fp
    7628:	fa5f fb8a 	uxtb.w	fp, sl
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    762c:	f895 a1e2 	ldrb.w	sl, [r5, #482]	; 0x1e2
    7630:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    7634:	4453      	add	r3, sl
    7636:	fa5f fa83 	uxtb.w	sl, r3
				uint8_t updated_age = received_age + 1;
    763a:	683b      	ldr	r3, [r7, #0]
    763c:	3301      	adds	r3, #1
    763e:	b2db      	uxtb	r3, r3
    7640:	603b      	str	r3, [r7, #0]
				grid_msg_set_id(message, updated_id);
    7642:	6879      	ldr	r1, [r7, #4]
    7644:	4640      	mov	r0, r8
    7646:	4b74      	ldr	r3, [pc, #464]	; (7818 <grid_port_receive_decode+0x3a4>)
    7648:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    764a:	4659      	mov	r1, fp
    764c:	4640      	mov	r0, r8
    764e:	4b73      	ldr	r3, [pc, #460]	; (781c <grid_port_receive_decode+0x3a8>)
    7650:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    7652:	4651      	mov	r1, sl
    7654:	4640      	mov	r0, r8
    7656:	4b72      	ldr	r3, [pc, #456]	; (7820 <grid_port_receive_decode+0x3ac>)
    7658:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);		
    765a:	6839      	ldr	r1, [r7, #0]
    765c:	4640      	mov	r0, r8
    765e:	4b71      	ldr	r3, [pc, #452]	; (7824 <grid_port_receive_decode+0x3b0>)
    7660:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    7662:	687a      	ldr	r2, [r7, #4]
    7664:	eb0b 2b02 	add.w	fp, fp, r2, lsl #8
    7668:	eb0a 2a0b 	add.w	sl, sl, fp, lsl #8
    766c:	683b      	ldr	r3, [r7, #0]
    766e:	eb03 230a 	add.w	r3, r3, sl, lsl #8
    7672:	607b      	str	r3, [r7, #4]
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    7674:	4619      	mov	r1, r3
    7676:	4863      	ldr	r0, [pc, #396]	; (7804 <grid_port_receive_decode+0x390>)
    7678:	4b6b      	ldr	r3, [pc, #428]	; (7828 <grid_port_receive_decode+0x3b4>)
    767a:	4798      	blx	r3
    767c:	2800      	cmp	r0, #0
    767e:	d131      	bne.n	76e4 <grid_port_receive_decode+0x270>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    7680:	4631      	mov	r1, r6
    7682:	4640      	mov	r0, r8
    7684:	4b5e      	ldr	r3, [pc, #376]	; (7800 <grid_port_receive_decode+0x38c>)
    7686:	4798      	blx	r3
    7688:	4602      	mov	r2, r0
    768a:	4631      	mov	r1, r6
    768c:	4640      	mov	r0, r8
    768e:	4b67      	ldr	r3, [pc, #412]	; (782c <grid_port_receive_decode+0x3b8>)
    7690:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    7692:	f505 7ae2 	add.w	sl, r5, #452	; 0x1c4
    7696:	4631      	mov	r1, r6
    7698:	4650      	mov	r0, sl
    769a:	4b65      	ldr	r3, [pc, #404]	; (7830 <grid_port_receive_decode+0x3bc>)
    769c:	4798      	blx	r3
    769e:	2800      	cmp	r0, #0
    76a0:	f43f af2f 	beq.w	7502 <grid_port_receive_decode+0x8e>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    76a4:	f8df b198 	ldr.w	fp, [pc, #408]	; 7840 <grid_port_receive_decode+0x3cc>
    76a8:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    76ac:	4650      	mov	r0, sl
    76ae:	47d8      	blx	fp
						for (uint8_t i=0; i<length; i++){
    76b0:	45a1      	cmp	r9, r4
    76b2:	d1f9      	bne.n	76a8 <grid_port_receive_decode+0x234>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    76b4:	4650      	mov	r0, sl
    76b6:	4b5f      	ldr	r3, [pc, #380]	; (7834 <grid_port_receive_decode+0x3c0>)
    76b8:	4798      	blx	r3
						grid_port_process_inbound(por);
    76ba:	4628      	mov	r0, r5
    76bc:	4b5e      	ldr	r3, [pc, #376]	; (7838 <grid_port_receive_decode+0x3c4>)
    76be:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    76c0:	6879      	ldr	r1, [r7, #4]
    76c2:	4850      	ldr	r0, [pc, #320]	; (7804 <grid_port_receive_decode+0x390>)
    76c4:	4b5d      	ldr	r3, [pc, #372]	; (783c <grid_port_receive_decode+0x3c8>)
    76c6:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    76c8:	2306      	movs	r3, #6
    76ca:	77bb      	strb	r3, [r7, #30]
    76cc:	e719      	b.n	7502 <grid_port_receive_decode+0x8e>
					rotated_dx  -= received_dx;
    76ce:	f1cb 0a7f 	rsb	sl, fp, #127	; 0x7f
    76d2:	fa4f fa8a 	sxtb.w	sl, sl
					rotated_dy  -= received_dy;
    76d6:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    76da:	b25b      	sxtb	r3, r3
    76dc:	e79f      	b.n	761e <grid_port_receive_decode+0x1aa>
				int8_t rotated_dy = 0;
    76de:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    76e0:	469a      	mov	sl, r3
    76e2:	e79c      	b.n	761e <grid_port_receive_decode+0x1aa>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    76e4:	2306      	movs	r3, #6
    76e6:	77bb      	strb	r3, [r7, #30]
	mod->color_red = red;
    76e8:	4b46      	ldr	r3, [pc, #280]	; (7804 <grid_port_receive_decode+0x390>)
    76ea:	2232      	movs	r2, #50	; 0x32
    76ec:	701a      	strb	r2, [r3, #0]
	mod->color_green = green;
    76ee:	705a      	strb	r2, [r3, #1]
	mod->color_blue = blue;
    76f0:	709a      	strb	r2, [r3, #2]
	mod->error_state = duration;
    76f2:	22c8      	movs	r2, #200	; 0xc8
    76f4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	mod->error_style = style;
    76f8:	2202      	movs	r2, #2
    76fa:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    76fe:	e700      	b.n	7502 <grid_port_receive_decode+0x8e>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    7700:	f898 3002 	ldrb.w	r3, [r8, #2]
    7704:	2b06      	cmp	r3, #6
    7706:	d02c      	beq.n	7762 <grid_port_receive_decode+0x2ee>
				else if (message[2] == GRID_MSG_BELL){
    7708:	2b07      	cmp	r3, #7
    770a:	f47f aeff 	bne.w	750c <grid_port_receive_decode+0x98>
					if (por->partner_status == 0){
    770e:	f895 31e3 	ldrb.w	r3, [r5, #483]	; 0x1e3
    7712:	bb9b      	cbnz	r3, 777c <grid_port_receive_decode+0x308>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    7714:	f898 3003 	ldrb.w	r3, [r8, #3]
    7718:	796a      	ldrb	r2, [r5, #5]
    771a:	1a9b      	subs	r3, r3, r2
    771c:	3306      	adds	r3, #6
    771e:	425a      	negs	r2, r3
    7720:	f003 0303 	and.w	r3, r3, #3
    7724:	f002 0203 	and.w	r2, r2, #3
    7728:	bf58      	it	pl
    772a:	4253      	negpl	r3, r2
    772c:	f885 31e0 	strb.w	r3, [r5, #480]	; 0x1e0
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    7730:	f1a6 000c 	sub.w	r0, r6, #12
    7734:	2200      	movs	r2, #0
    7736:	2108      	movs	r1, #8
    7738:	4440      	add	r0, r8
    773a:	4b30      	ldr	r3, [pc, #192]	; (77fc <grid_port_receive_decode+0x388>)
    773c:	4798      	blx	r3
    773e:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
						por->partner_status = 1;
    7742:	2301      	movs	r3, #1
    7744:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
	mod->color_red = red;
    7748:	4b2e      	ldr	r3, [pc, #184]	; (7804 <grid_port_receive_decode+0x390>)
    774a:	2200      	movs	r2, #0
    774c:	701a      	strb	r2, [r3, #0]
	mod->color_green = green;
    774e:	21ff      	movs	r1, #255	; 0xff
    7750:	7059      	strb	r1, [r3, #1]
	mod->color_blue = blue;
    7752:	709a      	strb	r2, [r3, #2]
	mod->error_state = duration;
    7754:	22c8      	movs	r2, #200	; 0xc8
    7756:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	mod->error_style = style;
    775a:	2202      	movs	r2, #2
    775c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    7760:	e6cf      	b.n	7502 <grid_port_receive_decode+0x8e>
	mod->color_red = red;
    7762:	4b28      	ldr	r3, [pc, #160]	; (7804 <grid_port_receive_decode+0x390>)
    7764:	22ff      	movs	r2, #255	; 0xff
    7766:	701a      	strb	r2, [r3, #0]
	mod->color_green = green;
    7768:	2100      	movs	r1, #0
    776a:	7059      	strb	r1, [r3, #1]
	mod->color_blue = blue;
    776c:	709a      	strb	r2, [r3, #2]
	mod->error_state = duration;
    776e:	22c8      	movs	r2, #200	; 0xc8
    7770:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	mod->error_style = style;
    7774:	2202      	movs	r2, #2
    7776:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    777a:	e6c7      	b.n	750c <grid_port_receive_decode+0x98>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    777c:	f898 3003 	ldrb.w	r3, [r8, #3]
    7780:	796a      	ldrb	r2, [r5, #5]
    7782:	1a9b      	subs	r3, r3, r2
    7784:	3306      	adds	r3, #6
    7786:	425a      	negs	r2, r3
    7788:	f003 0303 	and.w	r3, r3, #3
    778c:	f002 0203 	and.w	r2, r2, #3
    7790:	bf58      	it	pl
    7792:	4253      	negpl	r3, r2
    7794:	f895 41e0 	ldrb.w	r4, [r5, #480]	; 0x1e0
    7798:	42a3      	cmp	r3, r4
    779a:	bf14      	ite	ne
    779c:	2400      	movne	r4, #0
    779e:	2401      	moveq	r4, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    77a0:	f1a6 000c 	sub.w	r0, r6, #12
    77a4:	2200      	movs	r2, #0
    77a6:	2108      	movs	r1, #8
    77a8:	4440      	add	r0, r8
    77aa:	4b14      	ldr	r3, [pc, #80]	; (77fc <grid_port_receive_decode+0x388>)
    77ac:	4798      	blx	r3
    77ae:	60f8      	str	r0, [r7, #12]
						volatile uint32_t debug2 = por->partner_hwcfg;
    77b0:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
    77b4:	613b      	str	r3, [r7, #16]
						validator &= (por->partner_hwcfg == debug);									
    77b6:	68fa      	ldr	r2, [r7, #12]
						if (validator == 0){
    77b8:	4293      	cmp	r3, r2
    77ba:	d100      	bne.n	77be <grid_port_receive_decode+0x34a>
    77bc:	b974      	cbnz	r4, 77dc <grid_port_receive_decode+0x368>
							por->partner_status = 0;	
    77be:	2300      	movs	r3, #0
    77c0:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
	mod->color_red = red;
    77c4:	4b0f      	ldr	r3, [pc, #60]	; (7804 <grid_port_receive_decode+0x390>)
    77c6:	22ff      	movs	r2, #255	; 0xff
    77c8:	701a      	strb	r2, [r3, #0]
	mod->color_green = green;
    77ca:	705a      	strb	r2, [r3, #1]
	mod->color_blue = blue;
    77cc:	709a      	strb	r2, [r3, #2]
	mod->error_state = duration;
    77ce:	22c8      	movs	r2, #200	; 0xc8
    77d0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	mod->error_style = style;
    77d4:	2202      	movs	r2, #2
    77d6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    77da:	e692      	b.n	7502 <grid_port_receive_decode+0x8e>
	mod->color_red = red;
    77dc:	4b09      	ldr	r3, [pc, #36]	; (7804 <grid_port_receive_decode+0x390>)
    77de:	2200      	movs	r2, #0
    77e0:	701a      	strb	r2, [r3, #0]
	mod->color_green = green;
    77e2:	705a      	strb	r2, [r3, #1]
	mod->color_blue = blue;
    77e4:	220a      	movs	r2, #10
    77e6:	709a      	strb	r2, [r3, #2]
	mod->error_state = duration;
    77e8:	22c8      	movs	r2, #200	; 0xc8
    77ea:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	mod->error_style = style;
    77ee:	2202      	movs	r2, #2
    77f0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    77f4:	e685      	b.n	7502 <grid_port_receive_decode+0x8e>
    77f6:	bf00      	nop
    77f8:	51eb851f 	.word	0x51eb851f
    77fc:	00005fe1 	.word	0x00005fe1
    7800:	0000620d 	.word	0x0000620d
    7804:	20002004 	.word	0x20002004
    7808:	00006259 	.word	0x00006259
    780c:	000062b9 	.word	0x000062b9
    7810:	00006279 	.word	0x00006279
    7814:	00006299 	.word	0x00006299
    7818:	000062d9 	.word	0x000062d9
    781c:	000062ed 	.word	0x000062ed
    7820:	00006301 	.word	0x00006301
    7824:	00006315 	.word	0x00006315
    7828:	00006329 	.word	0x00006329
    782c:	00006229 	.word	0x00006229
    7830:	000063c1 	.word	0x000063c1
    7834:	0000640d 	.word	0x0000640d
    7838:	00006765 	.word	0x00006765
    783c:	00006355 	.word	0x00006355
    7840:	000063f1 	.word	0x000063f1
			sprintf(checksum, "%02x", grid_msg_get_checksum(response, response_length));
    7844:	4641      	mov	r1, r8
    7846:	f107 001c 	add.w	r0, r7, #28
    784a:	4b1e      	ldr	r3, [pc, #120]	; (78c4 <grid_port_receive_decode+0x450>)
    784c:	4798      	blx	r3
    784e:	4602      	mov	r2, r0
    7850:	491d      	ldr	r1, [pc, #116]	; (78c8 <grid_port_receive_decode+0x454>)
    7852:	f107 0014 	add.w	r0, r7, #20
    7856:	4b1d      	ldr	r3, [pc, #116]	; (78cc <grid_port_receive_decode+0x458>)
    7858:	4798      	blx	r3
			response[4] = checksum[0];
    785a:	7d3b      	ldrb	r3, [r7, #20]
    785c:	f887 3020 	strb.w	r3, [r7, #32]
			response[5] = checksum[1];
    7860:	7d7b      	ldrb	r3, [r7, #21]
    7862:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			for (uint8_t i=0; i<response_length; i++)
    7866:	f1b8 0f00 	cmp.w	r8, #0
    786a:	d010      	beq.n	788e <grid_port_receive_decode+0x41a>
    786c:	f107 041c 	add.w	r4, r7, #28
    7870:	f108 38ff 	add.w	r8, r8, #4294967295
    7874:	fa5f f888 	uxtb.w	r8, r8
    7878:	f108 0801 	add.w	r8, r8, #1
    787c:	44a0      	add	r8, r4
				grid_buffer_write_character(&por->tx_buffer, response[i]);
    787e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 78dc <grid_port_receive_decode+0x468>
    7882:	f814 1b01 	ldrb.w	r1, [r4], #1
    7886:	4648      	mov	r0, r9
    7888:	47d0      	blx	sl
			for (uint8_t i=0; i<response_length; i++)
    788a:	45a0      	cmp	r8, r4
    788c:	d1f9      	bne.n	7882 <grid_port_receive_decode+0x40e>
			grid_buffer_write_acknowledge(&por->tx_buffer);
    788e:	4648      	mov	r0, r9
    7890:	4b0f      	ldr	r3, [pc, #60]	; (78d0 <grid_port_receive_decode+0x45c>)
    7892:	4798      	blx	r3
    7894:	e012      	b.n	78bc <grid_port_receive_decode+0x448>
	if (message[1] == GRID_MSG_BROADCAST){				
    7896:	f89d 3001 	ldrb.w	r3, [sp, #1]
    789a:	2b0f      	cmp	r3, #15
    789c:	f47f ae4d 	bne.w	753a <grid_port_receive_decode+0xc6>
		uint8_t response_length = strlen(response);
    78a0:	f107 001c 	add.w	r0, r7, #28
    78a4:	4b0b      	ldr	r3, [pc, #44]	; (78d4 <grid_port_receive_decode+0x460>)
    78a6:	4798      	blx	r3
    78a8:	fa5f f880 	uxtb.w	r8, r0
		if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    78ac:	f505 79d6 	add.w	r9, r5, #428	; 0x1ac
    78b0:	4641      	mov	r1, r8
    78b2:	4648      	mov	r0, r9
    78b4:	4b08      	ldr	r3, [pc, #32]	; (78d8 <grid_port_receive_decode+0x464>)
    78b6:	4798      	blx	r3
    78b8:	2800      	cmp	r0, #0
    78ba:	d1c3      	bne.n	7844 <grid_port_receive_decode+0x3d0>
	for (uint8_t i = 0; i<length; i++){
    78bc:	2e00      	cmp	r6, #0
    78be:	f43f ae3c 	beq.w	753a <grid_port_receive_decode+0xc6>
    78c2:	e623      	b.n	750c <grid_port_receive_decode+0x98>
    78c4:	0000620d 	.word	0x0000620d
    78c8:	0000a6e8 	.word	0x0000a6e8
    78cc:	000099a1 	.word	0x000099a1
    78d0:	0000640d 	.word	0x0000640d
    78d4:	000099e9 	.word	0x000099e9
    78d8:	000063c1 	.word	0x000063c1
    78dc:	000063f1 	.word	0x000063f1

000078e0 <grid_port_receive_complete_task>:
	if (por->rx_double_buffer_status != 1){
    78e0:	8ac3      	ldrh	r3, [r0, #22]
    78e2:	2b01      	cmp	r3, #1
    78e4:	d000      	beq.n	78e8 <grid_port_receive_complete_task+0x8>
    78e6:	4770      	bx	lr
void grid_port_receive_complete_task(GRID_PORT_t* por){
    78e8:	b510      	push	{r4, lr}
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    78ea:	8b41      	ldrh	r1, [r0, #26]
    78ec:	8b03      	ldrh	r3, [r0, #24]
    78ee:	4299      	cmp	r1, r3
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    78f0:	bf34      	ite	cc
    78f2:	1c5a      	addcc	r2, r3, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    78f4:	f1a3 0237 	subcs.w	r2, r3, #55	; 0x37
    78f8:	1a52      	subs	r2, r2, r1
    78fa:	b2d2      	uxtb	r2, r2
    78fc:	4604      	mov	r4, r0
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    78fe:	b2c9      	uxtb	r1, r1
    7900:	4b02      	ldr	r3, [pc, #8]	; (790c <grid_port_receive_complete_task+0x2c>)
    7902:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    7904:	2300      	movs	r3, #0
    7906:	82e3      	strh	r3, [r4, #22]
    7908:	bd10      	pop	{r4, pc}
    790a:	bf00      	nop
    790c:	00007475 	.word	0x00007475

00007910 <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    7910:	b570      	push	{r4, r5, r6, lr}
	
	
	
	
	RTC_Scheduler_tick.interval = 1;
    7912:	4c1c      	ldr	r4, [pc, #112]	; (7984 <init_timer+0x74>)
    7914:	2301      	movs	r3, #1
    7916:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
	RTC_Scheduler_tick.cb       = RTC_Scheduler_tick_cb;
    791a:	4a1b      	ldr	r2, [pc, #108]	; (7988 <init_timer+0x78>)
    791c:	f8c4 2484 	str.w	r2, [r4, #1156]	; 0x484
	RTC_Scheduler_tick.mode     = TIMER_TASK_REPEAT;
    7920:	f884 3488 	strb.w	r3, [r4, #1160]	; 0x488
	
	
	RTC_Scheduler_report.interval = 32768/2; //1sec
    7924:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7928:	f8c4 2494 	str.w	r2, [r4, #1172]	; 0x494
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    792c:	4a17      	ldr	r2, [pc, #92]	; (798c <init_timer+0x7c>)
    792e:	f8c4 2498 	str.w	r2, [r4, #1176]	; 0x498
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    7932:	f884 349c 	strb.w	r3, [r4, #1180]	; 0x49c
	
		
	RTC_Scheduler_ping.interval = 16380/5; //1sec
    7936:	f640 42cc 	movw	r2, #3276	; 0xccc
    793a:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    793e:	4a14      	ldr	r2, [pc, #80]	; (7990 <init_timer+0x80>)
    7940:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    7944:	f884 34b0 	strb.w	r3, [r4, #1200]	; 0x4b0
	
	RTC_Scheduler_rx_task.interval = RTC1SEC/10000; // 100us
    7948:	f8c4 34bc 	str.w	r3, [r4, #1212]	; 0x4bc
	RTC_Scheduler_rx_task.cb       = RTC_Scheduler_rx_task_cb;
    794c:	4a11      	ldr	r2, [pc, #68]	; (7994 <init_timer+0x84>)
    794e:	f8c4 24c0 	str.w	r2, [r4, #1216]	; 0x4c0
	RTC_Scheduler_rx_task.mode     = TIMER_TASK_REPEAT;
    7952:	f884 34c4 	strb.w	r3, [r4, #1220]	; 0x4c4

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_tick);
    7956:	4d10      	ldr	r5, [pc, #64]	; (7998 <init_timer+0x88>)
    7958:	f504 618f 	add.w	r1, r4, #1144	; 0x478
    795c:	4628      	mov	r0, r5
    795e:	4e0f      	ldr	r6, [pc, #60]	; (799c <init_timer+0x8c>)
    7960:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    7962:	f204 418c 	addw	r1, r4, #1164	; 0x48c
    7966:	4628      	mov	r0, r5
    7968:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_rx_task);
    796a:	f204 41b4 	addw	r1, r4, #1204	; 0x4b4
    796e:	4628      	mov	r0, r5
    7970:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    7972:	f504 6194 	add.w	r1, r4, #1184	; 0x4a0
    7976:	4628      	mov	r0, r5
    7978:	47b0      	blx	r6
	timer_start(&RTC_Scheduler);
    797a:	4628      	mov	r0, r5
    797c:	4b08      	ldr	r3, [pc, #32]	; (79a0 <init_timer+0x90>)
    797e:	4798      	blx	r3
    7980:	bd70      	pop	{r4, r5, r6, pc}
    7982:	bf00      	nop
    7984:	20000cec 	.word	0x20000cec
    7988:	00005831 	.word	0x00005831
    798c:	0000584d 	.word	0x0000584d
    7990:	0000586d 	.word	0x0000586d
    7994:	00007449 	.word	0x00007449
    7998:	200012e0 	.word	0x200012e0
    799c:	0000188d 	.word	0x0000188d
    79a0:	0000184d 	.word	0x0000184d

000079a4 <main>:




int main(void)
{
    79a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79a8:	b0bf      	sub	sp, #252	; 0xfc

	
	
	#include "usb/class/midi/device/audiodf_midi.h"
	
	atmel_start_init();
    79aa:	4b7e      	ldr	r3, [pc, #504]	; (7ba4 <main+0x200>)
    79ac:	4798      	blx	r3
	
	
	//TIMER_0_example2();

	audiodf_midi_init();
    79ae:	4b7e      	ldr	r3, [pc, #504]	; (7ba8 <main+0x204>)
    79b0:	4798      	blx	r3



	composite_device_start();
    79b2:	4b7e      	ldr	r3, [pc, #504]	; (7bac <main+0x208>)
    79b4:	4798      	blx	r3
	
	grid_module_init();
    79b6:	4b7e      	ldr	r3, [pc, #504]	; (7bb0 <main+0x20c>)
    79b8:	4798      	blx	r3
	


	for (uint8_t i = 0; i<255; i++){
    79ba:	2500      	movs	r5, #0
		uint8_t color_b   = i;
					
					
		for (uint8_t i=0; i<16; i++){
			//grid_led_set_color(i, 0, 255, 0);
			grid_led_set_color(i, color_r, color_g, color_b);
    79bc:	4e7d      	ldr	r6, [pc, #500]	; (7bb4 <main+0x210>)
						
		}
		
		
		dma_spi_done = 0;
    79be:	4f7e      	ldr	r7, [pc, #504]	; (7bb8 <main+0x214>)
		spi_m_dma_enable(&GRID_LED);
    79c0:	f8df 8220 	ldr.w	r8, [pc, #544]	; 7be4 <main+0x240>
    79c4:	e014      	b.n	79f0 <main+0x4c>
		dma_spi_done = 0;
    79c6:	2300      	movs	r3, #0
    79c8:	607b      	str	r3, [r7, #4]
		spi_m_dma_enable(&GRID_LED);
    79ca:	4640      	mov	r0, r8
    79cc:	4b7b      	ldr	r3, [pc, #492]	; (7bbc <main+0x218>)
    79ce:	4798      	blx	r3
	
		io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    79d0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
    79d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
    79d4:	4b7a      	ldr	r3, [pc, #488]	; (7bc0 <main+0x21c>)
    79d6:	6818      	ldr	r0, [r3, #0]
    79d8:	4b7a      	ldr	r3, [pc, #488]	; (7bc4 <main+0x220>)
    79da:	4798      	blx	r3
	
		while (dma_spi_done == 0)
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	2b00      	cmp	r3, #0
    79e0:	d0fc      	beq.n	79dc <main+0x38>
		{
			
		}
		
		delay_ms(1);
    79e2:	2001      	movs	r0, #1
    79e4:	4b78      	ldr	r3, [pc, #480]	; (7bc8 <main+0x224>)
    79e6:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    79e8:	3501      	adds	r5, #1
    79ea:	b2ed      	uxtb	r5, r5
    79ec:	2dff      	cmp	r5, #255	; 0xff
    79ee:	d009      	beq.n	7a04 <main+0x60>
{
    79f0:	2400      	movs	r4, #0
			grid_led_set_color(i, color_r, color_g, color_b);
    79f2:	462b      	mov	r3, r5
    79f4:	462a      	mov	r2, r5
    79f6:	4629      	mov	r1, r5
    79f8:	4620      	mov	r0, r4
    79fa:	47b0      	blx	r6
    79fc:	3401      	adds	r4, #1
		for (uint8_t i=0; i<16; i++){
    79fe:	2c10      	cmp	r4, #16
    7a00:	d1f7      	bne.n	79f2 <main+0x4e>
    7a02:	e7e0      	b.n	79c6 <main+0x22>
						
	}
	
	init_timer();
    7a04:	4b71      	ldr	r3, [pc, #452]	; (7bcc <main+0x228>)
    7a06:	4798      	blx	r3
	
	char system_report_tasks[200];
	char system_report_buffers[200];
	char system_report_grid[200];
	
	volatile uint8_t debugvar = 0;
    7a08:	2300      	movs	r3, #0
    7a0a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	uint32_t loopcounter = 0;
    7a0e:	469a      	mov	sl, r3
		}else if (loopcounter == 500){
	
		}
	
		//checktimer flags
		if (reportflag){
    7a10:	4c69      	ldr	r4, [pc, #420]	; (7bb8 <main+0x214>)
			sprintf(system_report_tasks, "LOOPTICK %02x\nREALTIME %02x\nTASK0 %02x\nTASK1 %02x\nTASK2 %02x\nTASK3 %02x\nTASK4 %02x\n\0", loopcounter, realtime, task_counter[0], task_counter[1], task_counter[2], task_counter[3], task_counter[4]);
			
			
						
			
			realtime = 0;
    7a12:	469b      	mov	fp, r3
    7a14:	e029      	b.n	7a6a <main+0xc6>
		
		/* ========================= PING ============================= */
						
		if (pingflag){
			
			grid_sys_ping(&GRID_PORT_N);
    7a16:	486e      	ldr	r0, [pc, #440]	; (7bd0 <main+0x22c>)
    7a18:	4d6e      	ldr	r5, [pc, #440]	; (7bd4 <main+0x230>)
    7a1a:	47a8      	blx	r5
			grid_sys_ping(&GRID_PORT_E);
    7a1c:	486e      	ldr	r0, [pc, #440]	; (7bd8 <main+0x234>)
    7a1e:	47a8      	blx	r5
			grid_sys_ping(&GRID_PORT_S);
    7a20:	486e      	ldr	r0, [pc, #440]	; (7bdc <main+0x238>)
    7a22:	47a8      	blx	r5
			grid_sys_ping(&GRID_PORT_W);
    7a24:	486e      	ldr	r0, [pc, #440]	; (7be0 <main+0x23c>)
    7a26:	47a8      	blx	r5
			
			pingflag = 0;
    7a28:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
    7a2c:	e04f      	b.n	7ace <main+0x12a>
		
		
		
		
		// SEND DATA TO LEDs
		dma_spi_done = 0;
    7a2e:	f8c4 b004 	str.w	fp, [r4, #4]
		spi_m_dma_enable(&GRID_LED);
    7a32:	486c      	ldr	r0, [pc, #432]	; (7be4 <main+0x240>)
    7a34:	4b61      	ldr	r3, [pc, #388]	; (7bbc <main+0x218>)
    7a36:	4798      	blx	r3
			
		io_write(io2, grid_led_frame_buffer_pointer(), grid_led_frame_buffer_size());
    7a38:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    7a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7a3c:	4b60      	ldr	r3, [pc, #384]	; (7bc0 <main+0x21c>)
    7a3e:	6818      	ldr	r0, [r3, #0]
    7a40:	4b60      	ldr	r3, [pc, #384]	; (7bc4 <main+0x220>)
    7a42:	4798      	blx	r3
			
		while (dma_spi_done == 0)
    7a44:	6863      	ldr	r3, [r4, #4]
    7a46:	2b00      	cmp	r3, #0
    7a48:	d0fc      	beq.n	7a44 <main+0xa0>
		}	
		
		
		
		// IDLETASK
		task_current = TASK_IDLE;
    7a4a:	2301      	movs	r3, #1
    7a4c:	7323      	strb	r3, [r4, #12]
		while(loopstart + RTC1SEC/1000 > realtime){
    7a4e:	f109 0510 	add.w	r5, r9, #16
    7a52:	68a3      	ldr	r3, [r4, #8]
    7a54:	429d      	cmp	r5, r3
    7a56:	d906      	bls.n	7a66 <main+0xc2>
			delay_us(10);
    7a58:	270a      	movs	r7, #10
    7a5a:	4e63      	ldr	r6, [pc, #396]	; (7be8 <main+0x244>)
    7a5c:	4638      	mov	r0, r7
    7a5e:	47b0      	blx	r6
		while(loopstart + RTC1SEC/1000 > realtime){
    7a60:	68a3      	ldr	r3, [r4, #8]
    7a62:	429d      	cmp	r5, r3
    7a64:	d8fa      	bhi.n	7a5c <main+0xb8>
		}
		
		task_current = TASK_UNDEFINED;
    7a66:	f884 b00c 	strb.w	fp, [r4, #12]
		if (reportflag){
    7a6a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    7a6e:	b30b      	cbz	r3, 7ab4 <main+0x110>
			sprintf(system_report_tasks, "LOOPTICK %02x\nREALTIME %02x\nTASK0 %02x\nTASK1 %02x\nTASK2 %02x\nTASK3 %02x\nTASK4 %02x\n\0", loopcounter, realtime, task_counter[0], task_counter[1], task_counter[2], task_counter[3], task_counter[4]);
    7a70:	68a3      	ldr	r3, [r4, #8]
    7a72:	6922      	ldr	r2, [r4, #16]
    7a74:	6961      	ldr	r1, [r4, #20]
    7a76:	69a0      	ldr	r0, [r4, #24]
    7a78:	69e5      	ldr	r5, [r4, #28]
    7a7a:	6a26      	ldr	r6, [r4, #32]
    7a7c:	9604      	str	r6, [sp, #16]
    7a7e:	9503      	str	r5, [sp, #12]
    7a80:	9002      	str	r0, [sp, #8]
    7a82:	9101      	str	r1, [sp, #4]
    7a84:	9200      	str	r2, [sp, #0]
    7a86:	4652      	mov	r2, sl
    7a88:	4958      	ldr	r1, [pc, #352]	; (7bec <main+0x248>)
    7a8a:	a80c      	add	r0, sp, #48	; 0x30
    7a8c:	4d58      	ldr	r5, [pc, #352]	; (7bf0 <main+0x24c>)
    7a8e:	47a8      	blx	r5
			realtime = 0;
    7a90:	f8c4 b008 	str.w	fp, [r4, #8]
			reportflag--;
    7a94:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    7a98:	3b01      	subs	r3, #1
    7a9a:	b2db      	uxtb	r3, r3
    7a9c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    7aa0:	465b      	mov	r3, fp
				task_counter[i] = 0;
    7aa2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    7aa6:	f8c2 b010 	str.w	fp, [r2, #16]
    7aaa:	3301      	adds	r3, #1
			for (uint8_t i=0; i<8; i++)
    7aac:	2b08      	cmp	r3, #8
    7aae:	d1f8      	bne.n	7aa2 <main+0xfe>
			loopcounter = 0;
    7ab0:	f04f 0a00 	mov.w	sl, #0
		loopcounter++;
    7ab4:	f10a 0a01 	add.w	sl, sl, #1
		loopstart = realtime;
    7ab8:	f8d4 9008 	ldr.w	r9, [r4, #8]
			grid_sync_set_level(GRID_SYNC_1, loopcounter%2);
    7abc:	f00a 0101 	and.w	r1, sl, #1
    7ac0:	2001      	movs	r0, #1
    7ac2:	4b4c      	ldr	r3, [pc, #304]	; (7bf4 <main+0x250>)
    7ac4:	4798      	blx	r3
		if (pingflag){
    7ac6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    7aca:	2b00      	cmp	r3, #0
    7acc:	d1a3      	bne.n	7a16 <main+0x72>
		grid_port_receive_complete_task(&GRID_PORT_N);
    7ace:	4840      	ldr	r0, [pc, #256]	; (7bd0 <main+0x22c>)
    7ad0:	4d49      	ldr	r5, [pc, #292]	; (7bf8 <main+0x254>)
    7ad2:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    7ad4:	4840      	ldr	r0, [pc, #256]	; (7bd8 <main+0x234>)
    7ad6:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    7ad8:	4840      	ldr	r0, [pc, #256]	; (7bdc <main+0x238>)
    7ada:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    7adc:	4840      	ldr	r0, [pc, #256]	; (7be0 <main+0x23c>)
    7ade:	47a8      	blx	r5
		grid_port_process_ui(&GRID_PORT_U);		
    7ae0:	4e46      	ldr	r6, [pc, #280]	; (7bfc <main+0x258>)
    7ae2:	4630      	mov	r0, r6
    7ae4:	4b46      	ldr	r3, [pc, #280]	; (7c00 <main+0x25c>)
    7ae6:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    7ae8:	4630      	mov	r0, r6
    7aea:	4d46      	ldr	r5, [pc, #280]	; (7c04 <main+0x260>)
    7aec:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N);		
    7aee:	4838      	ldr	r0, [pc, #224]	; (7bd0 <main+0x22c>)
    7af0:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E);		
    7af2:	4839      	ldr	r0, [pc, #228]	; (7bd8 <main+0x234>)
    7af4:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S);		
    7af6:	4839      	ldr	r0, [pc, #228]	; (7bdc <main+0x238>)
    7af8:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W);	
    7afa:	4839      	ldr	r0, [pc, #228]	; (7be0 <main+0x23c>)
    7afc:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_N);
    7afe:	4834      	ldr	r0, [pc, #208]	; (7bd0 <main+0x22c>)
    7b00:	4d41      	ldr	r5, [pc, #260]	; (7c08 <main+0x264>)
    7b02:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    7b04:	4834      	ldr	r0, [pc, #208]	; (7bd8 <main+0x234>)
    7b06:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    7b08:	4834      	ldr	r0, [pc, #208]	; (7bdc <main+0x238>)
    7b0a:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    7b0c:	4834      	ldr	r0, [pc, #208]	; (7be0 <main+0x23c>)
    7b0e:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    7b10:	483e      	ldr	r0, [pc, #248]	; (7c0c <main+0x268>)
    7b12:	4b3f      	ldr	r3, [pc, #252]	; (7c10 <main+0x26c>)
    7b14:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    7b16:	4630      	mov	r0, r6
    7b18:	4b3e      	ldr	r3, [pc, #248]	; (7c14 <main+0x270>)
    7b1a:	4798      	blx	r3
			task_current = TASK_LED;
    7b1c:	2302      	movs	r3, #2
    7b1e:	7323      	strb	r3, [r4, #12]
			grid_led_tick();		
    7b20:	4b3d      	ldr	r3, [pc, #244]	; (7c18 <main+0x274>)
    7b22:	4798      	blx	r3
			grid_led_render_all();
    7b24:	4b3d      	ldr	r3, [pc, #244]	; (7c1c <main+0x278>)
    7b26:	4798      	blx	r3
			task_current = TASK_UNDEFINED;
    7b28:	f884 b00c 	strb.w	fp, [r4, #12]
		if (grid_sys_state.error_state){
    7b2c:	4b3c      	ldr	r3, [pc, #240]	; (7c20 <main+0x27c>)
    7b2e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
    7b32:	2b00      	cmp	r3, #0
    7b34:	f43f af7b 	beq.w	7a2e <main+0x8a>
			grid_sys_state.error_state--;
    7b38:	4e39      	ldr	r6, [pc, #228]	; (7c20 <main+0x27c>)
    7b3a:	3b01      	subs	r3, #1
    7b3c:	f8a6 3206 	strh.w	r3, [r6, #518]	; 0x206
			uint8_t intensity = grid_sys_error_intensity(&grid_sys_state);
    7b40:	4630      	mov	r0, r6
    7b42:	4b38      	ldr	r3, [pc, #224]	; (7c24 <main+0x280>)
    7b44:	4798      	blx	r3
			uint8_t color_r   = grid_sys_error_get_color_r(&grid_sys_state) * (intensity/256.0);
    7b46:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 7c34 <main+0x290>
    7b4a:	47c0      	blx	r8
    7b4c:	4f36      	ldr	r7, [pc, #216]	; (7c28 <main+0x284>)
    7b4e:	2200      	movs	r2, #0
    7b50:	4b36      	ldr	r3, [pc, #216]	; (7c2c <main+0x288>)
    7b52:	47b8      	blx	r7
    7b54:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7b58:	7830      	ldrb	r0, [r6, #0]
    7b5a:	47c0      	blx	r8
    7b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7b60:	47b8      	blx	r7
    7b62:	4d33      	ldr	r5, [pc, #204]	; (7c30 <main+0x28c>)
    7b64:	47a8      	blx	r5
    7b66:	b2c3      	uxtb	r3, r0
    7b68:	9308      	str	r3, [sp, #32]
			uint8_t color_g   = grid_sys_error_get_color_g(&grid_sys_state) * (intensity/256.0);
    7b6a:	7870      	ldrb	r0, [r6, #1]
    7b6c:	47c0      	blx	r8
    7b6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7b72:	47b8      	blx	r7
    7b74:	47a8      	blx	r5
    7b76:	b2c3      	uxtb	r3, r0
    7b78:	9309      	str	r3, [sp, #36]	; 0x24
			uint8_t color_b   = grid_sys_error_get_color_b(&grid_sys_state) * (intensity/256.0);
    7b7a:	78b0      	ldrb	r0, [r6, #2]
    7b7c:	47c0      	blx	r8
    7b7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7b82:	47b8      	blx	r7
    7b84:	47a8      	blx	r5
    7b86:	fa5f f880 	uxtb.w	r8, r0
    7b8a:	2600      	movs	r6, #0
				grid_led_set_color(i, color_r, color_g, color_b);
    7b8c:	4f09      	ldr	r7, [pc, #36]	; (7bb4 <main+0x210>)
    7b8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7b90:	4643      	mov	r3, r8
    7b92:	462a      	mov	r2, r5
    7b94:	9908      	ldr	r1, [sp, #32]
    7b96:	4630      	mov	r0, r6
    7b98:	47b8      	blx	r7
    7b9a:	3601      	adds	r6, #1
			for (uint8_t i=0; i<16; i++){	
    7b9c:	2e10      	cmp	r6, #16
    7b9e:	d1f7      	bne.n	7b90 <main+0x1ec>
    7ba0:	e745      	b.n	7a2e <main+0x8a>
    7ba2:	bf00      	nop
    7ba4:	000002d1 	.word	0x000002d1
    7ba8:	00008629 	.word	0x00008629
    7bac:	00008fad 	.word	0x00008fad
    7bb0:	00007155 	.word	0x00007155
    7bb4:	0000587d 	.word	0x0000587d
    7bb8:	20000cec 	.word	0x20000cec
    7bbc:	000015a5 	.word	0x000015a5
    7bc0:	20002b40 	.word	0x20002b40
    7bc4:	000014c1 	.word	0x000014c1
    7bc8:	00001335 	.word	0x00001335
    7bcc:	00007911 	.word	0x00007911
    7bd0:	20001a40 	.word	0x20001a40
    7bd4:	0000641d 	.word	0x0000641d
    7bd8:	20002890 	.word	0x20002890
    7bdc:	200023fc 	.word	0x200023fc
    7be0:	20002214 	.word	0x20002214
    7be4:	200014b4 	.word	0x200014b4
    7be8:	00001315 	.word	0x00001315
    7bec:	0000a688 	.word	0x0000a688
    7bf0:	000099a1 	.word	0x000099a1
    7bf4:	00006c91 	.word	0x00006c91
    7bf8:	000078e1 	.word	0x000078e1
    7bfc:	20001c28 	.word	0x20001c28
    7c00:	00006f11 	.word	0x00006f11
    7c04:	00006765 	.word	0x00006765
    7c08:	00006c09 	.word	0x00006c09
    7c0c:	200026ac 	.word	0x200026ac
    7c10:	000068ed 	.word	0x000068ed
    7c14:	00006bc5 	.word	0x00006bc5
    7c18:	000058b9 	.word	0x000058b9
    7c1c:	00005c41 	.word	0x00005c41
    7c20:	20002004 	.word	0x20002004
    7c24:	00005f65 	.word	0x00005f65
    7c28:	00009345 	.word	0x00009345
    7c2c:	3f700000 	.word	0x3f700000
    7c30:	00009769 	.word	0x00009769
    7c34:	00009279 	.word	0x00009279

00007c38 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c3a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    7c3c:	780b      	ldrb	r3, [r1, #0]
    7c3e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    7c42:	2c01      	cmp	r4, #1
    7c44:	d15e      	bne.n	7d04 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    7c46:	888c      	ldrh	r4, [r1, #4]
    7c48:	4d35      	ldr	r5, [pc, #212]	; (7d20 <cdcdf_acm_req+0xe8>)
    7c4a:	782d      	ldrb	r5, [r5, #0]
    7c4c:	42a5      	cmp	r5, r4
    7c4e:	d003      	beq.n	7c58 <cdcdf_acm_req+0x20>
    7c50:	4d33      	ldr	r5, [pc, #204]	; (7d20 <cdcdf_acm_req+0xe8>)
    7c52:	786d      	ldrb	r5, [r5, #1]
    7c54:	42a5      	cmp	r5, r4
    7c56:	d158      	bne.n	7d0a <cdcdf_acm_req+0xd2>
    7c58:	4616      	mov	r6, r2
    7c5a:	460c      	mov	r4, r1
    7c5c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    7c5e:	f013 0f80 	tst.w	r3, #128	; 0x80
    7c62:	d10c      	bne.n	7c7e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    7c64:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    7c66:	4b2f      	ldr	r3, [pc, #188]	; (7d24 <cdcdf_acm_req+0xec>)
    7c68:	4798      	blx	r3
    7c6a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    7c6c:	7863      	ldrb	r3, [r4, #1]
    7c6e:	2b20      	cmp	r3, #32
    7c70:	d013      	beq.n	7c9a <cdcdf_acm_req+0x62>
    7c72:	2b22      	cmp	r3, #34	; 0x22
    7c74:	d032      	beq.n	7cdc <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    7c76:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    7c7a:	b003      	add	sp, #12
    7c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    7c7e:	2a01      	cmp	r2, #1
    7c80:	d046      	beq.n	7d10 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    7c82:	784b      	ldrb	r3, [r1, #1]
    7c84:	2b21      	cmp	r3, #33	; 0x21
    7c86:	d145      	bne.n	7d14 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7c88:	88cb      	ldrh	r3, [r1, #6]
    7c8a:	2b07      	cmp	r3, #7
    7c8c:	d145      	bne.n	7d1a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    7c8e:	2300      	movs	r3, #0
    7c90:	2207      	movs	r2, #7
    7c92:	4925      	ldr	r1, [pc, #148]	; (7d28 <cdcdf_acm_req+0xf0>)
    7c94:	4c25      	ldr	r4, [pc, #148]	; (7d2c <cdcdf_acm_req+0xf4>)
    7c96:	47a0      	blx	r4
    7c98:	e7ef      	b.n	7c7a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    7c9a:	2f07      	cmp	r7, #7
    7c9c:	d12b      	bne.n	7cf6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    7c9e:	b1be      	cbz	r6, 7cd0 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    7ca0:	6800      	ldr	r0, [r0, #0]
    7ca2:	9000      	str	r0, [sp, #0]
    7ca4:	888a      	ldrh	r2, [r1, #4]
    7ca6:	798b      	ldrb	r3, [r1, #6]
    7ca8:	f8ad 2004 	strh.w	r2, [sp, #4]
    7cac:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    7cb0:	4b1b      	ldr	r3, [pc, #108]	; (7d20 <cdcdf_acm_req+0xe8>)
    7cb2:	691b      	ldr	r3, [r3, #16]
    7cb4:	b113      	cbz	r3, 7cbc <cdcdf_acm_req+0x84>
    7cb6:	4668      	mov	r0, sp
    7cb8:	4798      	blx	r3
    7cba:	b1f8      	cbz	r0, 7cfc <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    7cbc:	4b18      	ldr	r3, [pc, #96]	; (7d20 <cdcdf_acm_req+0xe8>)
    7cbe:	aa02      	add	r2, sp, #8
    7cc0:	e912 0003 	ldmdb	r2, {r0, r1}
    7cc4:	6098      	str	r0, [r3, #8]
    7cc6:	8199      	strh	r1, [r3, #12]
    7cc8:	0c09      	lsrs	r1, r1, #16
    7cca:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    7ccc:	2000      	movs	r0, #0
    7cce:	e7d4      	b.n	7c7a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    7cd0:	2300      	movs	r3, #0
    7cd2:	2207      	movs	r2, #7
    7cd4:	4628      	mov	r0, r5
    7cd6:	4c15      	ldr	r4, [pc, #84]	; (7d2c <cdcdf_acm_req+0xf4>)
    7cd8:	47a0      	blx	r4
    7cda:	e7ce      	b.n	7c7a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    7cdc:	2300      	movs	r3, #0
    7cde:	461a      	mov	r2, r3
    7ce0:	4619      	mov	r1, r3
    7ce2:	4618      	mov	r0, r3
    7ce4:	4d11      	ldr	r5, [pc, #68]	; (7d2c <cdcdf_acm_req+0xf4>)
    7ce6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    7ce8:	4b0d      	ldr	r3, [pc, #52]	; (7d20 <cdcdf_acm_req+0xe8>)
    7cea:	695b      	ldr	r3, [r3, #20]
    7cec:	b143      	cbz	r3, 7d00 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    7cee:	8860      	ldrh	r0, [r4, #2]
    7cf0:	4798      	blx	r3
		return ERR_NONE;
    7cf2:	2000      	movs	r0, #0
    7cf4:	e7c1      	b.n	7c7a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    7cf6:	f04f 30ff 	mov.w	r0, #4294967295
    7cfa:	e7be      	b.n	7c7a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    7cfc:	2000      	movs	r0, #0
    7cfe:	e7bc      	b.n	7c7a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    7d00:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    7d02:	e7ba      	b.n	7c7a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    7d04:	f06f 0009 	mvn.w	r0, #9
    7d08:	e7b7      	b.n	7c7a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    7d0a:	f06f 0009 	mvn.w	r0, #9
    7d0e:	e7b4      	b.n	7c7a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    7d10:	2000      	movs	r0, #0
    7d12:	e7b2      	b.n	7c7a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    7d14:	f06f 000c 	mvn.w	r0, #12
    7d18:	e7af      	b.n	7c7a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    7d1a:	f04f 30ff 	mov.w	r0, #4294967295
    7d1e:	e7ac      	b.n	7c7a <cdcdf_acm_req+0x42>
    7d20:	200011d0 	.word	0x200011d0
    7d24:	00008d29 	.word	0x00008d29
    7d28:	200011d8 	.word	0x200011d8
    7d2c:	00008805 	.word	0x00008805

00007d30 <cdcdf_acm_ctrl>:
{
    7d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d34:	b083      	sub	sp, #12
    7d36:	4616      	mov	r6, r2
	switch (ctrl) {
    7d38:	2901      	cmp	r1, #1
    7d3a:	d066      	beq.n	7e0a <cdcdf_acm_ctrl+0xda>
    7d3c:	b141      	cbz	r1, 7d50 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    7d3e:	2902      	cmp	r1, #2
    7d40:	bf0c      	ite	eq
    7d42:	f06f 001a 	mvneq.w	r0, #26
    7d46:	f06f 000c 	mvnne.w	r0, #12
}
    7d4a:	b003      	add	sp, #12
    7d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    7d50:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    7d54:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    7d56:	2800      	cmp	r0, #0
    7d58:	f000 8085 	beq.w	7e66 <cdcdf_acm_ctrl+0x136>
    7d5c:	f10a 3bff 	add.w	fp, sl, #4294967295
    7d60:	f10a 0301 	add.w	r3, sl, #1
    7d64:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7d66:	4f46      	ldr	r7, [pc, #280]	; (7e80 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    7d68:	f8df 9124 	ldr.w	r9, [pc, #292]	; 7e90 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7d6c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 7e94 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    7d70:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    7d72:	7943      	ldrb	r3, [r0, #5]
    7d74:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    7d78:	2b02      	cmp	r3, #2
    7d7a:	d002      	beq.n	7d82 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    7d7c:	f06f 0009 	mvn.w	r0, #9
    7d80:	e7e3      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
    7d82:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    7d86:	f89b 3000 	ldrb.w	r3, [fp]
    7d8a:	429a      	cmp	r2, r3
    7d8c:	d06e      	beq.n	7e6c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    7d8e:	2bff      	cmp	r3, #255	; 0xff
    7d90:	d16f      	bne.n	7e72 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    7d92:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    7d96:	2205      	movs	r2, #5
    7d98:	6871      	ldr	r1, [r6, #4]
    7d9a:	4b3a      	ldr	r3, [pc, #232]	; (7e84 <cdcdf_acm_ctrl+0x154>)
    7d9c:	4798      	blx	r3
		while (NULL != ep) {
    7d9e:	4604      	mov	r4, r0
    7da0:	b1f8      	cbz	r0, 7de2 <cdcdf_acm_ctrl+0xb2>
    7da2:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    7da6:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    7da8:	7963      	ldrb	r3, [r4, #5]
    7daa:	7922      	ldrb	r2, [r4, #4]
    7dac:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    7db0:	b292      	uxth	r2, r2
    7db2:	78e1      	ldrb	r1, [r4, #3]
    7db4:	4628      	mov	r0, r5
    7db6:	47b8      	blx	r7
    7db8:	2800      	cmp	r0, #0
    7dba:	d15d      	bne.n	7e78 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    7dbc:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    7dc0:	bf14      	ite	ne
    7dc2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    7dc6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    7dca:	4628      	mov	r0, r5
    7dcc:	47c8      	blx	r9
			desc->sod = ep;
    7dce:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    7dd0:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    7dd2:	6871      	ldr	r1, [r6, #4]
    7dd4:	4420      	add	r0, r4
    7dd6:	47c0      	blx	r8
		while (NULL != ep) {
    7dd8:	4604      	mov	r4, r0
    7dda:	2800      	cmp	r0, #0
    7ddc:	d1e3      	bne.n	7da6 <cdcdf_acm_ctrl+0x76>
    7dde:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    7de2:	6833      	ldr	r3, [r6, #0]
    7de4:	7818      	ldrb	r0, [r3, #0]
    7de6:	2204      	movs	r2, #4
    7de8:	6871      	ldr	r1, [r6, #4]
    7dea:	4418      	add	r0, r3
    7dec:	4b25      	ldr	r3, [pc, #148]	; (7e84 <cdcdf_acm_ctrl+0x154>)
    7dee:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    7df0:	9b00      	ldr	r3, [sp, #0]
    7df2:	459b      	cmp	fp, r3
    7df4:	d004      	beq.n	7e00 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    7df6:	2800      	cmp	r0, #0
    7df8:	d1ba      	bne.n	7d70 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    7dfa:	f06f 0009 	mvn.w	r0, #9
    7dfe:	e7a4      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    7e00:	2201      	movs	r2, #1
    7e02:	4b21      	ldr	r3, [pc, #132]	; (7e88 <cdcdf_acm_ctrl+0x158>)
    7e04:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    7e06:	2000      	movs	r0, #0
    7e08:	e79f      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    7e0a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    7e0c:	b142      	cbz	r2, 7e20 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    7e0e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    7e10:	795b      	ldrb	r3, [r3, #5]
    7e12:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    7e16:	2b02      	cmp	r3, #2
    7e18:	d002      	beq.n	7e20 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    7e1a:	f06f 0009 	mvn.w	r0, #9
    7e1e:	e794      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    7e20:	7823      	ldrb	r3, [r4, #0]
    7e22:	2bff      	cmp	r3, #255	; 0xff
    7e24:	d008      	beq.n	7e38 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    7e26:	23ff      	movs	r3, #255	; 0xff
    7e28:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    7e2a:	78a0      	ldrb	r0, [r4, #2]
    7e2c:	4298      	cmp	r0, r3
    7e2e:	d003      	beq.n	7e38 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    7e30:	4b16      	ldr	r3, [pc, #88]	; (7e8c <cdcdf_acm_ctrl+0x15c>)
    7e32:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    7e34:	23ff      	movs	r3, #255	; 0xff
    7e36:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    7e38:	7863      	ldrb	r3, [r4, #1]
    7e3a:	2bff      	cmp	r3, #255	; 0xff
    7e3c:	d008      	beq.n	7e50 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    7e3e:	23ff      	movs	r3, #255	; 0xff
    7e40:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    7e42:	78e0      	ldrb	r0, [r4, #3]
    7e44:	4298      	cmp	r0, r3
    7e46:	d003      	beq.n	7e50 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    7e48:	4b10      	ldr	r3, [pc, #64]	; (7e8c <cdcdf_acm_ctrl+0x15c>)
    7e4a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    7e4c:	23ff      	movs	r3, #255	; 0xff
    7e4e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    7e50:	7920      	ldrb	r0, [r4, #4]
    7e52:	28ff      	cmp	r0, #255	; 0xff
    7e54:	d003      	beq.n	7e5e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    7e56:	4b0d      	ldr	r3, [pc, #52]	; (7e8c <cdcdf_acm_ctrl+0x15c>)
    7e58:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    7e5a:	23ff      	movs	r3, #255	; 0xff
    7e5c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    7e5e:	2000      	movs	r0, #0
    7e60:	4b09      	ldr	r3, [pc, #36]	; (7e88 <cdcdf_acm_ctrl+0x158>)
    7e62:	7158      	strb	r0, [r3, #5]
    7e64:	e771      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    7e66:	f06f 0009 	mvn.w	r0, #9
    7e6a:	e76e      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    7e6c:	f06f 0011 	mvn.w	r0, #17
    7e70:	e76b      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    7e72:	f06f 001b 	mvn.w	r0, #27
    7e76:	e768      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    7e78:	f06f 0013 	mvn.w	r0, #19
    7e7c:	e765      	b.n	7d4a <cdcdf_acm_ctrl+0x1a>
    7e7e:	bf00      	nop
    7e80:	00001f31 	.word	0x00001f31
    7e84:	00008d49 	.word	0x00008d49
    7e88:	200011d0 	.word	0x200011d0
    7e8c:	00001f99 	.word	0x00001f99
    7e90:	00001fc5 	.word	0x00001fc5
    7e94:	00008d83 	.word	0x00008d83

00007e98 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    7e98:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    7e9a:	4b0a      	ldr	r3, [pc, #40]	; (7ec4 <cdcdf_acm_init+0x2c>)
    7e9c:	4798      	blx	r3
    7e9e:	2801      	cmp	r0, #1
    7ea0:	d80c      	bhi.n	7ebc <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    7ea2:	4809      	ldr	r0, [pc, #36]	; (7ec8 <cdcdf_acm_init+0x30>)
    7ea4:	4b09      	ldr	r3, [pc, #36]	; (7ecc <cdcdf_acm_init+0x34>)
    7ea6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    7ea8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    7eaa:	3018      	adds	r0, #24
    7eac:	4b08      	ldr	r3, [pc, #32]	; (7ed0 <cdcdf_acm_init+0x38>)
    7eae:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    7eb0:	4908      	ldr	r1, [pc, #32]	; (7ed4 <cdcdf_acm_init+0x3c>)
    7eb2:	2001      	movs	r0, #1
    7eb4:	4b08      	ldr	r3, [pc, #32]	; (7ed8 <cdcdf_acm_init+0x40>)
    7eb6:	4798      	blx	r3
	return ERR_NONE;
    7eb8:	2000      	movs	r0, #0
    7eba:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    7ebc:	f06f 0010 	mvn.w	r0, #16
}
    7ec0:	bd08      	pop	{r3, pc}
    7ec2:	bf00      	nop
    7ec4:	00008d35 	.word	0x00008d35
    7ec8:	200011d0 	.word	0x200011d0
    7ecc:	00007d31 	.word	0x00007d31
    7ed0:	00008cd5 	.word	0x00008cd5
    7ed4:	2000034c 	.word	0x2000034c
    7ed8:	00008c41 	.word	0x00008c41

00007edc <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    7edc:	4b07      	ldr	r3, [pc, #28]	; (7efc <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    7ede:	795b      	ldrb	r3, [r3, #5]
    7ee0:	b143      	cbz	r3, 7ef4 <cdcdf_acm_write+0x18>
{
    7ee2:	b510      	push	{r4, lr}
    7ee4:	460a      	mov	r2, r1
    7ee6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    7ee8:	2301      	movs	r3, #1
    7eea:	4804      	ldr	r0, [pc, #16]	; (7efc <cdcdf_acm_write+0x20>)
    7eec:	78c0      	ldrb	r0, [r0, #3]
    7eee:	4c04      	ldr	r4, [pc, #16]	; (7f00 <cdcdf_acm_write+0x24>)
    7ef0:	47a0      	blx	r4
    7ef2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    7ef4:	f06f 0010 	mvn.w	r0, #16
    7ef8:	4770      	bx	lr
    7efa:	bf00      	nop
    7efc:	200011d0 	.word	0x200011d0
    7f00:	00008805 	.word	0x00008805

00007f04 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    7f04:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    7f06:	780b      	ldrb	r3, [r1, #0]
    7f08:	2b81      	cmp	r3, #129	; 0x81
    7f0a:	d010      	beq.n	7f2e <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    7f0c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    7f10:	2b01      	cmp	r3, #1
    7f12:	d13f      	bne.n	7f94 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    7f14:	888a      	ldrh	r2, [r1, #4]
    7f16:	4b22      	ldr	r3, [pc, #136]	; (7fa0 <hid_keyboard_req+0x9c>)
    7f18:	7b1b      	ldrb	r3, [r3, #12]
    7f1a:	429a      	cmp	r2, r3
    7f1c:	d13d      	bne.n	7f9a <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    7f1e:	784b      	ldrb	r3, [r1, #1]
    7f20:	2b03      	cmp	r3, #3
    7f22:	d028      	beq.n	7f76 <hid_keyboard_req+0x72>
    7f24:	2b0b      	cmp	r3, #11
    7f26:	d02c      	beq.n	7f82 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    7f28:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    7f2c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    7f2e:	784b      	ldrb	r3, [r1, #1]
    7f30:	2b06      	cmp	r3, #6
    7f32:	d002      	beq.n	7f3a <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    7f34:	f06f 0009 	mvn.w	r0, #9
    7f38:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    7f3a:	888a      	ldrh	r2, [r1, #4]
    7f3c:	4b18      	ldr	r3, [pc, #96]	; (7fa0 <hid_keyboard_req+0x9c>)
    7f3e:	7b1b      	ldrb	r3, [r3, #12]
    7f40:	429a      	cmp	r2, r3
    7f42:	d002      	beq.n	7f4a <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    7f44:	f06f 0009 	mvn.w	r0, #9
    7f48:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    7f4a:	884b      	ldrh	r3, [r1, #2]
    7f4c:	0a1b      	lsrs	r3, r3, #8
    7f4e:	2b21      	cmp	r3, #33	; 0x21
    7f50:	d004      	beq.n	7f5c <hid_keyboard_req+0x58>
    7f52:	2b22      	cmp	r3, #34	; 0x22
    7f54:	d009      	beq.n	7f6a <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    7f56:	f06f 000c 	mvn.w	r0, #12
    7f5a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    7f5c:	4b10      	ldr	r3, [pc, #64]	; (7fa0 <hid_keyboard_req+0x9c>)
    7f5e:	6819      	ldr	r1, [r3, #0]
    7f60:	2300      	movs	r3, #0
    7f62:	780a      	ldrb	r2, [r1, #0]
    7f64:	4c0f      	ldr	r4, [pc, #60]	; (7fa4 <hid_keyboard_req+0xa0>)
    7f66:	47a0      	blx	r4
    7f68:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    7f6a:	2300      	movs	r3, #0
    7f6c:	223b      	movs	r2, #59	; 0x3b
    7f6e:	490e      	ldr	r1, [pc, #56]	; (7fa8 <hid_keyboard_req+0xa4>)
    7f70:	4c0c      	ldr	r4, [pc, #48]	; (7fa4 <hid_keyboard_req+0xa0>)
    7f72:	47a0      	blx	r4
    7f74:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    7f76:	2300      	movs	r3, #0
    7f78:	2201      	movs	r2, #1
    7f7a:	490c      	ldr	r1, [pc, #48]	; (7fac <hid_keyboard_req+0xa8>)
    7f7c:	4c09      	ldr	r4, [pc, #36]	; (7fa4 <hid_keyboard_req+0xa0>)
    7f7e:	47a0      	blx	r4
    7f80:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    7f82:	884a      	ldrh	r2, [r1, #2]
    7f84:	4b06      	ldr	r3, [pc, #24]	; (7fa0 <hid_keyboard_req+0x9c>)
    7f86:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    7f88:	2300      	movs	r3, #0
    7f8a:	461a      	mov	r2, r3
    7f8c:	4619      	mov	r1, r3
    7f8e:	4c05      	ldr	r4, [pc, #20]	; (7fa4 <hid_keyboard_req+0xa0>)
    7f90:	47a0      	blx	r4
    7f92:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    7f94:	f06f 0009 	mvn.w	r0, #9
    7f98:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    7f9a:	f06f 0009 	mvn.w	r0, #9
    7f9e:	bd10      	pop	{r4, pc}
    7fa0:	200011f4 	.word	0x200011f4
    7fa4:	00008805 	.word	0x00008805
    7fa8:	0000a7f8 	.word	0x0000a7f8
    7fac:	20001203 	.word	0x20001203

00007fb0 <hid_keyboard_ctrl>:
{
    7fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fb4:	4614      	mov	r4, r2
	switch (ctrl) {
    7fb6:	2901      	cmp	r1, #1
    7fb8:	d050      	beq.n	805c <hid_keyboard_ctrl+0xac>
    7fba:	b141      	cbz	r1, 7fce <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    7fbc:	2902      	cmp	r1, #2
    7fbe:	bf0c      	ite	eq
    7fc0:	f06f 051a 	mvneq.w	r5, #26
    7fc4:	f06f 050c 	mvnne.w	r5, #12
}
    7fc8:	4628      	mov	r0, r5
    7fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    7fce:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    7fd2:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d05e      	beq.n	8096 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    7fd8:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    7fda:	795b      	ldrb	r3, [r3, #5]
    7fdc:	2b03      	cmp	r3, #3
    7fde:	d15d      	bne.n	809c <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    7fe0:	f898 300c 	ldrb.w	r3, [r8, #12]
    7fe4:	429a      	cmp	r2, r3
    7fe6:	d05c      	beq.n	80a2 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    7fe8:	2bff      	cmp	r3, #255	; 0xff
    7fea:	d15d      	bne.n	80a8 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    7fec:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    7ff0:	6823      	ldr	r3, [r4, #0]
    7ff2:	7818      	ldrb	r0, [r3, #0]
    7ff4:	2221      	movs	r2, #33	; 0x21
    7ff6:	6861      	ldr	r1, [r4, #4]
    7ff8:	4418      	add	r0, r3
    7ffa:	4b31      	ldr	r3, [pc, #196]	; (80c0 <hid_keyboard_ctrl+0x110>)
    7ffc:	4798      	blx	r3
    7ffe:	4b31      	ldr	r3, [pc, #196]	; (80c4 <hid_keyboard_ctrl+0x114>)
    8000:	6018      	str	r0, [r3, #0]
    8002:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8004:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80cc <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8008:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80d0 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    800c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80d4 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8010:	6823      	ldr	r3, [r4, #0]
    8012:	7818      	ldrb	r0, [r3, #0]
    8014:	6861      	ldr	r1, [r4, #4]
    8016:	4418      	add	r0, r3
    8018:	47c8      	blx	r9
		desc->sod = ep;
    801a:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    801c:	2800      	cmp	r0, #0
    801e:	d046      	beq.n	80ae <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    8020:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    8022:	7943      	ldrb	r3, [r0, #5]
    8024:	7902      	ldrb	r2, [r0, #4]
    8026:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    802a:	b292      	uxth	r2, r2
    802c:	78c1      	ldrb	r1, [r0, #3]
    802e:	4638      	mov	r0, r7
    8030:	47d0      	blx	sl
    8032:	4605      	mov	r5, r0
    8034:	2800      	cmp	r0, #0
    8036:	d13d      	bne.n	80b4 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8038:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    803c:	bf14      	ite	ne
    803e:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    8042:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    8046:	4638      	mov	r0, r7
    8048:	47d8      	blx	fp
    804a:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    804c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    8050:	d1de      	bne.n	8010 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    8052:	4b1c      	ldr	r3, [pc, #112]	; (80c4 <hid_keyboard_ctrl+0x114>)
    8054:	2201      	movs	r2, #1
    8056:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    8058:	741a      	strb	r2, [r3, #16]
    805a:	e7b5      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    805c:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    805e:	b11a      	cbz	r2, 8068 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    8060:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    8062:	795b      	ldrb	r3, [r3, #5]
    8064:	2b03      	cmp	r3, #3
    8066:	d128      	bne.n	80ba <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    8068:	7b2b      	ldrb	r3, [r5, #12]
    806a:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    806c:	bf1c      	itt	ne
    806e:	23ff      	movne	r3, #255	; 0xff
    8070:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    8072:	7b68      	ldrb	r0, [r5, #13]
    8074:	28ff      	cmp	r0, #255	; 0xff
    8076:	d003      	beq.n	8080 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    8078:	4b13      	ldr	r3, [pc, #76]	; (80c8 <hid_keyboard_ctrl+0x118>)
    807a:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    807c:	23ff      	movs	r3, #255	; 0xff
    807e:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    8080:	7ba8      	ldrb	r0, [r5, #14]
    8082:	28ff      	cmp	r0, #255	; 0xff
    8084:	d003      	beq.n	808e <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    8086:	4b10      	ldr	r3, [pc, #64]	; (80c8 <hid_keyboard_ctrl+0x118>)
    8088:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    808a:	23ff      	movs	r3, #255	; 0xff
    808c:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    808e:	2500      	movs	r5, #0
    8090:	4b0c      	ldr	r3, [pc, #48]	; (80c4 <hid_keyboard_ctrl+0x114>)
    8092:	741d      	strb	r5, [r3, #16]
    8094:	e798      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    8096:	f06f 0509 	mvn.w	r5, #9
    809a:	e795      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    809c:	f06f 0509 	mvn.w	r5, #9
    80a0:	e792      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    80a2:	f06f 0511 	mvn.w	r5, #17
    80a6:	e78f      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    80a8:	f06f 051b 	mvn.w	r5, #27
    80ac:	e78c      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    80ae:	f06f 0509 	mvn.w	r5, #9
    80b2:	e789      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    80b4:	f06f 0513 	mvn.w	r5, #19
    80b8:	e786      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    80ba:	f06f 0509 	mvn.w	r5, #9
    80be:	e783      	b.n	7fc8 <hid_keyboard_ctrl+0x18>
    80c0:	00008d49 	.word	0x00008d49
    80c4:	200011f4 	.word	0x200011f4
    80c8:	00001f99 	.word	0x00001f99
    80cc:	00008d83 	.word	0x00008d83
    80d0:	00001f31 	.word	0x00001f31
    80d4:	00001fc5 	.word	0x00001fc5

000080d8 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    80d8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    80da:	4b0a      	ldr	r3, [pc, #40]	; (8104 <hiddf_keyboard_init+0x2c>)
    80dc:	4798      	blx	r3
    80de:	2801      	cmp	r0, #1
    80e0:	d80c      	bhi.n	80fc <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    80e2:	4809      	ldr	r0, [pc, #36]	; (8108 <hiddf_keyboard_init+0x30>)
    80e4:	4b09      	ldr	r3, [pc, #36]	; (810c <hiddf_keyboard_init+0x34>)
    80e6:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    80e8:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    80ea:	3014      	adds	r0, #20
    80ec:	4b08      	ldr	r3, [pc, #32]	; (8110 <hiddf_keyboard_init+0x38>)
    80ee:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    80f0:	4908      	ldr	r1, [pc, #32]	; (8114 <hiddf_keyboard_init+0x3c>)
    80f2:	2001      	movs	r0, #1
    80f4:	4b08      	ldr	r3, [pc, #32]	; (8118 <hiddf_keyboard_init+0x40>)
    80f6:	4798      	blx	r3
	return ERR_NONE;
    80f8:	2000      	movs	r0, #0
    80fa:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    80fc:	f06f 0010 	mvn.w	r0, #16
}
    8100:	bd08      	pop	{r3, pc}
    8102:	bf00      	nop
    8104:	00008d35 	.word	0x00008d35
    8108:	200011f4 	.word	0x200011f4
    810c:	00007fb1 	.word	0x00007fb1
    8110:	00008cd5 	.word	0x00008cd5
    8114:	20000354 	.word	0x20000354
    8118:	00008c41 	.word	0x00008c41

0000811c <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    811c:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    811e:	4b26      	ldr	r3, [pc, #152]	; (81b8 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    8120:	7c1b      	ldrb	r3, [r3, #16]
    8122:	2b00      	cmp	r3, #0
    8124:	d045      	beq.n	81b2 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    8126:	4a24      	ldr	r2, [pc, #144]	; (81b8 <hiddf_keyboard_keys_state_change+0x9c>)
    8128:	2300      	movs	r3, #0
    812a:	6053      	str	r3, [r2, #4]
    812c:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    812e:	b329      	cbz	r1, 817c <hiddf_keyboard_keys_state_change+0x60>
    8130:	4603      	mov	r3, r0
    8132:	1e4d      	subs	r5, r1, #1
    8134:	b2ed      	uxtb	r5, r5
    8136:	3501      	adds	r5, #1
    8138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    813c:	4405      	add	r5, r0
    813e:	2200      	movs	r2, #0
    8140:	e002      	b.n	8148 <hiddf_keyboard_keys_state_change+0x2c>
    8142:	3303      	adds	r3, #3
    8144:	42ab      	cmp	r3, r5
    8146:	d005      	beq.n	8154 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    8148:	785c      	ldrb	r4, [r3, #1]
    814a:	2c00      	cmp	r4, #0
    814c:	d0f9      	beq.n	8142 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    814e:	3201      	adds	r2, #1
    8150:	b2d2      	uxtb	r2, r2
    8152:	e7f6      	b.n	8142 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    8154:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    8156:	b2d2      	uxtb	r2, r2
    8158:	2a06      	cmp	r2, #6
    815a:	d809      	bhi.n	8170 <hiddf_keyboard_keys_state_change+0x54>
    815c:	4603      	mov	r3, r0
    815e:	1e4a      	subs	r2, r1, #1
    8160:	b2d2      	uxtb	r2, r2
    8162:	3201      	adds	r2, #1
    8164:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8168:	4410      	add	r0, r2
    816a:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    816c:	4d12      	ldr	r5, [pc, #72]	; (81b8 <hiddf_keyboard_keys_state_change+0x9c>)
    816e:	e015      	b.n	819c <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    8170:	4b11      	ldr	r3, [pc, #68]	; (81b8 <hiddf_keyboard_keys_state_change+0x9c>)
    8172:	f04f 32ff 	mov.w	r2, #4294967295
    8176:	f8c3 2006 	str.w	r2, [r3, #6]
    817a:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    817c:	480e      	ldr	r0, [pc, #56]	; (81b8 <hiddf_keyboard_keys_state_change+0x9c>)
    817e:	2300      	movs	r3, #0
    8180:	2208      	movs	r2, #8
    8182:	1d01      	adds	r1, r0, #4
    8184:	7b40      	ldrb	r0, [r0, #13]
    8186:	4c0d      	ldr	r4, [pc, #52]	; (81bc <hiddf_keyboard_keys_state_change+0xa0>)
    8188:	47a0      	blx	r4
    818a:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    818c:	1c62      	adds	r2, r4, #1
    818e:	7819      	ldrb	r1, [r3, #0]
    8190:	442c      	add	r4, r5
    8192:	7121      	strb	r1, [r4, #4]
    8194:	b2d4      	uxtb	r4, r2
    8196:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    8198:	4283      	cmp	r3, r0
    819a:	d0ef      	beq.n	817c <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    819c:	789a      	ldrb	r2, [r3, #2]
    819e:	2a01      	cmp	r2, #1
    81a0:	d1f9      	bne.n	8196 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    81a2:	785a      	ldrb	r2, [r3, #1]
    81a4:	2a00      	cmp	r2, #0
    81a6:	d0f1      	beq.n	818c <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    81a8:	792a      	ldrb	r2, [r5, #4]
    81aa:	7819      	ldrb	r1, [r3, #0]
    81ac:	430a      	orrs	r2, r1
    81ae:	712a      	strb	r2, [r5, #4]
    81b0:	e7f1      	b.n	8196 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    81b2:	f06f 0010 	mvn.w	r0, #16
}
    81b6:	bd38      	pop	{r3, r4, r5, pc}
    81b8:	200011f4 	.word	0x200011f4
    81bc:	00008805 	.word	0x00008805

000081c0 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    81c0:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    81c2:	780b      	ldrb	r3, [r1, #0]
    81c4:	2b81      	cmp	r3, #129	; 0x81
    81c6:	d010      	beq.n	81ea <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    81c8:	f3c3 1341 	ubfx	r3, r3, #5, #2
    81cc:	2b01      	cmp	r3, #1
    81ce:	d13f      	bne.n	8250 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    81d0:	888a      	ldrh	r2, [r1, #4]
    81d2:	4b22      	ldr	r3, [pc, #136]	; (825c <hid_mouse_req+0x9c>)
    81d4:	7a1b      	ldrb	r3, [r3, #8]
    81d6:	429a      	cmp	r2, r3
    81d8:	d13d      	bne.n	8256 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    81da:	784b      	ldrb	r3, [r1, #1]
    81dc:	2b03      	cmp	r3, #3
    81de:	d028      	beq.n	8232 <hid_mouse_req+0x72>
    81e0:	2b0b      	cmp	r3, #11
    81e2:	d02c      	beq.n	823e <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    81e4:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    81e8:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    81ea:	784b      	ldrb	r3, [r1, #1]
    81ec:	2b06      	cmp	r3, #6
    81ee:	d002      	beq.n	81f6 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    81f0:	f06f 0009 	mvn.w	r0, #9
    81f4:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    81f6:	888a      	ldrh	r2, [r1, #4]
    81f8:	4b18      	ldr	r3, [pc, #96]	; (825c <hid_mouse_req+0x9c>)
    81fa:	7a1b      	ldrb	r3, [r3, #8]
    81fc:	429a      	cmp	r2, r3
    81fe:	d002      	beq.n	8206 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    8200:	f06f 0009 	mvn.w	r0, #9
    8204:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    8206:	884b      	ldrh	r3, [r1, #2]
    8208:	0a1b      	lsrs	r3, r3, #8
    820a:	2b21      	cmp	r3, #33	; 0x21
    820c:	d004      	beq.n	8218 <hid_mouse_req+0x58>
    820e:	2b22      	cmp	r3, #34	; 0x22
    8210:	d009      	beq.n	8226 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    8212:	f06f 000c 	mvn.w	r0, #12
    8216:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    8218:	4b10      	ldr	r3, [pc, #64]	; (825c <hid_mouse_req+0x9c>)
    821a:	6819      	ldr	r1, [r3, #0]
    821c:	2300      	movs	r3, #0
    821e:	780a      	ldrb	r2, [r1, #0]
    8220:	4c0f      	ldr	r4, [pc, #60]	; (8260 <hid_mouse_req+0xa0>)
    8222:	47a0      	blx	r4
    8224:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    8226:	2300      	movs	r3, #0
    8228:	2234      	movs	r2, #52	; 0x34
    822a:	490e      	ldr	r1, [pc, #56]	; (8264 <hid_mouse_req+0xa4>)
    822c:	4c0c      	ldr	r4, [pc, #48]	; (8260 <hid_mouse_req+0xa0>)
    822e:	47a0      	blx	r4
    8230:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    8232:	2300      	movs	r3, #0
    8234:	2201      	movs	r2, #1
    8236:	490c      	ldr	r1, [pc, #48]	; (8268 <hid_mouse_req+0xa8>)
    8238:	4c09      	ldr	r4, [pc, #36]	; (8260 <hid_mouse_req+0xa0>)
    823a:	47a0      	blx	r4
    823c:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    823e:	884a      	ldrh	r2, [r1, #2]
    8240:	4b06      	ldr	r3, [pc, #24]	; (825c <hid_mouse_req+0x9c>)
    8242:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    8244:	2300      	movs	r3, #0
    8246:	461a      	mov	r2, r3
    8248:	4619      	mov	r1, r3
    824a:	4c05      	ldr	r4, [pc, #20]	; (8260 <hid_mouse_req+0xa0>)
    824c:	47a0      	blx	r4
    824e:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8250:	f06f 0009 	mvn.w	r0, #9
    8254:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8256:	f06f 0009 	mvn.w	r0, #9
    825a:	bd10      	pop	{r4, pc}
    825c:	20001214 	.word	0x20001214
    8260:	00008805 	.word	0x00008805
    8264:	0000a834 	.word	0x0000a834
    8268:	2000121e 	.word	0x2000121e

0000826c <hid_mouse_ctrl>:
{
    826c:	b570      	push	{r4, r5, r6, lr}
    826e:	4614      	mov	r4, r2
	switch (ctrl) {
    8270:	2901      	cmp	r1, #1
    8272:	d040      	beq.n	82f6 <hid_mouse_ctrl+0x8a>
    8274:	b139      	cbz	r1, 8286 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    8276:	2902      	cmp	r1, #2
    8278:	bf0c      	ite	eq
    827a:	f06f 041a 	mvneq.w	r4, #26
    827e:	f06f 040c 	mvnne.w	r4, #12
}
    8282:	4620      	mov	r0, r4
    8284:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    8286:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    8288:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    828a:	2b00      	cmp	r3, #0
    828c:	d049      	beq.n	8322 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    828e:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    8290:	795b      	ldrb	r3, [r3, #5]
    8292:	2b03      	cmp	r3, #3
    8294:	d148      	bne.n	8328 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    8296:	7a2b      	ldrb	r3, [r5, #8]
    8298:	429a      	cmp	r2, r3
    829a:	d048      	beq.n	832e <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    829c:	2bff      	cmp	r3, #255	; 0xff
    829e:	d149      	bne.n	8334 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    82a0:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    82a2:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    82a4:	7818      	ldrb	r0, [r3, #0]
    82a6:	2221      	movs	r2, #33	; 0x21
    82a8:	6861      	ldr	r1, [r4, #4]
    82aa:	4418      	add	r0, r3
    82ac:	4b29      	ldr	r3, [pc, #164]	; (8354 <hid_mouse_ctrl+0xe8>)
    82ae:	4798      	blx	r3
    82b0:	4b29      	ldr	r3, [pc, #164]	; (8358 <hid_mouse_ctrl+0xec>)
    82b2:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    82b4:	6823      	ldr	r3, [r4, #0]
    82b6:	7818      	ldrb	r0, [r3, #0]
    82b8:	6861      	ldr	r1, [r4, #4]
    82ba:	4418      	add	r0, r3
    82bc:	4b27      	ldr	r3, [pc, #156]	; (835c <hid_mouse_ctrl+0xf0>)
    82be:	4798      	blx	r3
	desc->sod = ep;
    82c0:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    82c2:	2800      	cmp	r0, #0
    82c4:	d039      	beq.n	833a <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    82c6:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    82c8:	7943      	ldrb	r3, [r0, #5]
    82ca:	7902      	ldrb	r2, [r0, #4]
    82cc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    82d0:	b292      	uxth	r2, r2
    82d2:	78c1      	ldrb	r1, [r0, #3]
    82d4:	4630      	mov	r0, r6
    82d6:	4b22      	ldr	r3, [pc, #136]	; (8360 <hid_mouse_ctrl+0xf4>)
    82d8:	4798      	blx	r3
    82da:	4604      	mov	r4, r0
    82dc:	bb80      	cbnz	r0, 8340 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    82de:	f016 0f80 	tst.w	r6, #128	; 0x80
    82e2:	d030      	beq.n	8346 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    82e4:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    82e6:	4630      	mov	r0, r6
    82e8:	4b1e      	ldr	r3, [pc, #120]	; (8364 <hid_mouse_ctrl+0xf8>)
    82ea:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    82ec:	4b1a      	ldr	r3, [pc, #104]	; (8358 <hid_mouse_ctrl+0xec>)
    82ee:	2201      	movs	r2, #1
    82f0:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    82f2:	72da      	strb	r2, [r3, #11]
    82f4:	e7c5      	b.n	8282 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    82f6:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    82f8:	b11a      	cbz	r2, 8302 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    82fa:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    82fc:	795b      	ldrb	r3, [r3, #5]
    82fe:	2b03      	cmp	r3, #3
    8300:	d124      	bne.n	834c <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    8302:	7a2b      	ldrb	r3, [r5, #8]
    8304:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    8306:	bf1c      	itt	ne
    8308:	23ff      	movne	r3, #255	; 0xff
    830a:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    830c:	7a68      	ldrb	r0, [r5, #9]
    830e:	28ff      	cmp	r0, #255	; 0xff
    8310:	d003      	beq.n	831a <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    8312:	4b15      	ldr	r3, [pc, #84]	; (8368 <hid_mouse_ctrl+0xfc>)
    8314:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    8316:	23ff      	movs	r3, #255	; 0xff
    8318:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    831a:	2400      	movs	r4, #0
    831c:	4b0e      	ldr	r3, [pc, #56]	; (8358 <hid_mouse_ctrl+0xec>)
    831e:	72dc      	strb	r4, [r3, #11]
    8320:	e7af      	b.n	8282 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8322:	f06f 0409 	mvn.w	r4, #9
    8326:	e7ac      	b.n	8282 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8328:	f06f 0409 	mvn.w	r4, #9
    832c:	e7a9      	b.n	8282 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    832e:	f06f 0411 	mvn.w	r4, #17
    8332:	e7a6      	b.n	8282 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    8334:	f06f 041b 	mvn.w	r4, #27
    8338:	e7a3      	b.n	8282 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    833a:	f06f 0409 	mvn.w	r4, #9
    833e:	e7a0      	b.n	8282 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    8340:	f06f 0413 	mvn.w	r4, #19
    8344:	e79d      	b.n	8282 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    8346:	f04f 34ff 	mov.w	r4, #4294967295
    834a:	e79a      	b.n	8282 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    834c:	f06f 0409 	mvn.w	r4, #9
    8350:	e797      	b.n	8282 <hid_mouse_ctrl+0x16>
    8352:	bf00      	nop
    8354:	00008d49 	.word	0x00008d49
    8358:	20001214 	.word	0x20001214
    835c:	00008d83 	.word	0x00008d83
    8360:	00001f31 	.word	0x00001f31
    8364:	00001fc5 	.word	0x00001fc5
    8368:	00001f99 	.word	0x00001f99

0000836c <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    836c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    836e:	4b0a      	ldr	r3, [pc, #40]	; (8398 <hiddf_mouse_init+0x2c>)
    8370:	4798      	blx	r3
    8372:	2801      	cmp	r0, #1
    8374:	d80c      	bhi.n	8390 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    8376:	4809      	ldr	r0, [pc, #36]	; (839c <hiddf_mouse_init+0x30>)
    8378:	4b09      	ldr	r3, [pc, #36]	; (83a0 <hiddf_mouse_init+0x34>)
    837a:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    837c:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    837e:	300c      	adds	r0, #12
    8380:	4b08      	ldr	r3, [pc, #32]	; (83a4 <hiddf_mouse_init+0x38>)
    8382:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    8384:	4908      	ldr	r1, [pc, #32]	; (83a8 <hiddf_mouse_init+0x3c>)
    8386:	2001      	movs	r0, #1
    8388:	4b08      	ldr	r3, [pc, #32]	; (83ac <hiddf_mouse_init+0x40>)
    838a:	4798      	blx	r3
	return ERR_NONE;
    838c:	2000      	movs	r0, #0
    838e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    8390:	f06f 0010 	mvn.w	r0, #16
}
    8394:	bd08      	pop	{r3, pc}
    8396:	bf00      	nop
    8398:	00008d35 	.word	0x00008d35
    839c:	20001214 	.word	0x20001214
    83a0:	0000826d 	.word	0x0000826d
    83a4:	00008cd5 	.word	0x00008cd5
    83a8:	2000035c 	.word	0x2000035c
    83ac:	00008c41 	.word	0x00008c41

000083b0 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    83b0:	2200      	movs	r2, #0
    83b2:	4b0d      	ldr	r3, [pc, #52]	; (83e8 <hiddf_mouse_move+0x38>)
    83b4:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    83b6:	2901      	cmp	r1, #1
    83b8:	d00e      	beq.n	83d8 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    83ba:	2902      	cmp	r1, #2
    83bc:	d00e      	beq.n	83dc <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    83be:	2903      	cmp	r1, #3
    83c0:	d10f      	bne.n	83e2 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    83c2:	4b09      	ldr	r3, [pc, #36]	; (83e8 <hiddf_mouse_move+0x38>)
    83c4:	71d8      	strb	r0, [r3, #7]
{
    83c6:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    83c8:	4807      	ldr	r0, [pc, #28]	; (83e8 <hiddf_mouse_move+0x38>)
    83ca:	2300      	movs	r3, #0
    83cc:	2204      	movs	r2, #4
    83ce:	1881      	adds	r1, r0, r2
    83d0:	7a40      	ldrb	r0, [r0, #9]
    83d2:	4c06      	ldr	r4, [pc, #24]	; (83ec <hiddf_mouse_move+0x3c>)
    83d4:	47a0      	blx	r4
    83d6:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    83d8:	7158      	strb	r0, [r3, #5]
    83da:	e7f4      	b.n	83c6 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    83dc:	4b02      	ldr	r3, [pc, #8]	; (83e8 <hiddf_mouse_move+0x38>)
    83de:	7198      	strb	r0, [r3, #6]
    83e0:	e7f1      	b.n	83c6 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    83e2:	f06f 000c 	mvn.w	r0, #12
    83e6:	4770      	bx	lr
    83e8:	20001214 	.word	0x20001214
    83ec:	00008805 	.word	0x00008805

000083f0 <midi_cb_ep_bulk_in>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    83f0:	e7fe      	b.n	83f0 <midi_cb_ep_bulk_in>

000083f2 <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    83f2:	e7fe      	b.n	83f2 <midi_cb_ep_bulk_out>

000083f4 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    83f4:	b510      	push	{r4, lr}
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    83f6:	780b      	ldrb	r3, [r1, #0]
    83f8:	2b81      	cmp	r3, #129	; 0x81
    83fa:	d014      	beq.n	8426 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    83fc:	f3c3 1341 	ubfx	r3, r3, #5, #2
    8400:	2b01      	cmp	r3, #1
    8402:	d132      	bne.n	846a <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    8404:	888b      	ldrh	r3, [r1, #4]
    8406:	4a1c      	ldr	r2, [pc, #112]	; (8478 <audio_midi_req+0x84>)
    8408:	7912      	ldrb	r2, [r2, #4]
    840a:	429a      	cmp	r2, r3
    840c:	d003      	beq.n	8416 <audio_midi_req+0x22>
    840e:	4a1a      	ldr	r2, [pc, #104]	; (8478 <audio_midi_req+0x84>)
    8410:	7952      	ldrb	r2, [r2, #5]
    8412:	429a      	cmp	r2, r3
    8414:	d12c      	bne.n	8470 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    8416:	784b      	ldrb	r3, [r1, #1]
    8418:	2b03      	cmp	r3, #3
    841a:	d017      	beq.n	844c <audio_midi_req+0x58>
    841c:	2b0b      	cmp	r3, #11
    841e:	d01b      	beq.n	8458 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    8420:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    8424:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    8426:	888b      	ldrh	r3, [r1, #4]
    8428:	4a13      	ldr	r2, [pc, #76]	; (8478 <audio_midi_req+0x84>)
    842a:	7912      	ldrb	r2, [r2, #4]
    842c:	429a      	cmp	r2, r3
    842e:	d006      	beq.n	843e <audio_midi_req+0x4a>
    8430:	4a11      	ldr	r2, [pc, #68]	; (8478 <audio_midi_req+0x84>)
    8432:	7952      	ldrb	r2, [r2, #5]
    8434:	429a      	cmp	r2, r3
    8436:	d002      	beq.n	843e <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    8438:	f06f 0009 	mvn.w	r0, #9
    843c:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    843e:	4b0e      	ldr	r3, [pc, #56]	; (8478 <audio_midi_req+0x84>)
    8440:	6819      	ldr	r1, [r3, #0]
    8442:	2300      	movs	r3, #0
    8444:	780a      	ldrb	r2, [r1, #0]
    8446:	4c0d      	ldr	r4, [pc, #52]	; (847c <audio_midi_req+0x88>)
    8448:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    844a:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    844c:	2300      	movs	r3, #0
    844e:	2201      	movs	r2, #1
    8450:	490b      	ldr	r1, [pc, #44]	; (8480 <audio_midi_req+0x8c>)
    8452:	4c0a      	ldr	r4, [pc, #40]	; (847c <audio_midi_req+0x88>)
    8454:	47a0      	blx	r4
    8456:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    8458:	884a      	ldrh	r2, [r1, #2]
    845a:	4b07      	ldr	r3, [pc, #28]	; (8478 <audio_midi_req+0x84>)
    845c:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    845e:	2300      	movs	r3, #0
    8460:	461a      	mov	r2, r3
    8462:	4619      	mov	r1, r3
    8464:	4c05      	ldr	r4, [pc, #20]	; (847c <audio_midi_req+0x88>)
    8466:	47a0      	blx	r4
    8468:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    846a:	f06f 0009 	mvn.w	r0, #9
    846e:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8470:	f06f 0009 	mvn.w	r0, #9
    8474:	bd10      	pop	{r4, pc}
    8476:	bf00      	nop
    8478:	2000122c 	.word	0x2000122c
    847c:	00008805 	.word	0x00008805
    8480:	20001234 	.word	0x20001234

00008484 <audio_midi_ctrl>:
{
    8484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8488:	4615      	mov	r5, r2
	switch (ctrl) {
    848a:	2901      	cmp	r1, #1
    848c:	d06f      	beq.n	856e <audio_midi_ctrl+0xea>
    848e:	b139      	cbz	r1, 84a0 <audio_midi_ctrl+0x1c>
		return ERR_INVALID_ARG;
    8490:	2902      	cmp	r1, #2
    8492:	bf0c      	ite	eq
    8494:	f06f 001a 	mvneq.w	r0, #26
    8498:	f06f 000c 	mvnne.w	r0, #12
    849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    84a0:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    84a4:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    84a6:	2800      	cmp	r0, #0
    84a8:	f000 808a 	beq.w	85c0 <audio_midi_ctrl+0x13c>
    84ac:	f109 0604 	add.w	r6, r9, #4
    84b0:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    84b2:	f04f 0804 	mov.w	r8, #4
    84b6:	4f53      	ldr	r7, [pc, #332]	; (8604 <audio_midi_ctrl+0x180>)
    84b8:	e018      	b.n	84ec <audio_midi_ctrl+0x68>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    84ba:	f816 3b01 	ldrb.w	r3, [r6], #1
    84be:	429a      	cmp	r2, r3
    84c0:	f000 8086 	beq.w	85d0 <audio_midi_ctrl+0x14c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    84c4:	2bff      	cmp	r3, #255	; 0xff
    84c6:	f040 8087 	bne.w	85d8 <audio_midi_ctrl+0x154>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    84ca:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    84ce:	2c01      	cmp	r4, #1
    84d0:	d016      	beq.n	8500 <audio_midi_ctrl+0x7c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    84d2:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    84d4:	7818      	ldrb	r0, [r3, #0]
    84d6:	4642      	mov	r2, r8
    84d8:	6869      	ldr	r1, [r5, #4]
    84da:	4418      	add	r0, r3
    84dc:	47b8      	blx	r7
    84de:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    84e0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    84e4:	f000 8087 	beq.w	85f6 <audio_midi_ctrl+0x172>
		if (NULL == ifc) {
    84e8:	2800      	cmp	r0, #0
    84ea:	d06d      	beq.n	85c8 <audio_midi_ctrl+0x144>
		ifc_desc.bInterfaceNumber = ifc[2];
    84ec:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    84ee:	7943      	ldrb	r3, [r0, #5]
    84f0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    84f4:	2b01      	cmp	r3, #1
    84f6:	d0e0      	beq.n	84ba <audio_midi_ctrl+0x36>
			return ERR_NOT_FOUND;
    84f8:	f06f 0009 	mvn.w	r0, #9
    84fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    8500:	2205      	movs	r2, #5
    8502:	6869      	ldr	r1, [r5, #4]
    8504:	4b3f      	ldr	r3, [pc, #252]	; (8604 <audio_midi_ctrl+0x180>)
    8506:	4798      	blx	r3
    8508:	4604      	mov	r4, r0
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    850a:	f8df a114 	ldr.w	sl, [pc, #276]	; 8620 <audio_midi_ctrl+0x19c>
					usb_d_ep_enable(func_data->func_ep_out);
    850e:	4f3e      	ldr	r7, [pc, #248]	; (8608 <audio_midi_ctrl+0x184>)
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    8510:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8624 <audio_midi_ctrl+0x1a0>
    8514:	e010      	b.n	8538 <audio_midi_ctrl+0xb4>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    8516:	f889 6006 	strb.w	r6, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    851a:	4630      	mov	r0, r6
    851c:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    851e:	4a3b      	ldr	r2, [pc, #236]	; (860c <audio_midi_ctrl+0x188>)
    8520:	2102      	movs	r1, #2
    8522:	f899 0006 	ldrb.w	r0, [r9, #6]
    8526:	4b3a      	ldr	r3, [pc, #232]	; (8610 <audio_midi_ctrl+0x18c>)
    8528:	4798      	blx	r3
				desc->sod = ep;
    852a:	602c      	str	r4, [r5, #0]
    852c:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    852e:	6869      	ldr	r1, [r5, #4]
    8530:	4420      	add	r0, r4
    8532:	4b38      	ldr	r3, [pc, #224]	; (8614 <audio_midi_ctrl+0x190>)
    8534:	4798      	blx	r3
    8536:	4604      	mov	r4, r0
			while (NULL != ep) {
    8538:	2c00      	cmp	r4, #0
    853a:	d055      	beq.n	85e8 <audio_midi_ctrl+0x164>
				ep_desc.bEndpointAddress = ep[2];
    853c:	78a6      	ldrb	r6, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    853e:	7963      	ldrb	r3, [r4, #5]
    8540:	7922      	ldrb	r2, [r4, #4]
    8542:	eb02 2203 	add.w	r2, r2, r3, lsl #8
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8546:	b292      	uxth	r2, r2
    8548:	78e1      	ldrb	r1, [r4, #3]
    854a:	4630      	mov	r0, r6
    854c:	47d0      	blx	sl
    854e:	2800      	cmp	r0, #0
    8550:	d146      	bne.n	85e0 <audio_midi_ctrl+0x15c>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8552:	f016 0f80 	tst.w	r6, #128	; 0x80
    8556:	d1de      	bne.n	8516 <audio_midi_ctrl+0x92>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    8558:	f889 6007 	strb.w	r6, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    855c:	4630      	mov	r0, r6
    855e:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    8560:	4642      	mov	r2, r8
    8562:	2102      	movs	r1, #2
    8564:	f899 0007 	ldrb.w	r0, [r9, #7]
    8568:	4b29      	ldr	r3, [pc, #164]	; (8610 <audio_midi_ctrl+0x18c>)
    856a:	4798      	blx	r3
    856c:	e7dd      	b.n	852a <audio_midi_ctrl+0xa6>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    856e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    8570:	b14a      	cbz	r2, 8586 <audio_midi_ctrl+0x102>
		ifc_desc.bInterfaceClass = desc->sod[5];
    8572:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    8574:	795b      	ldrb	r3, [r3, #5]
    8576:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    857a:	2b01      	cmp	r3, #1
    857c:	d003      	beq.n	8586 <audio_midi_ctrl+0x102>
			return ERR_NOT_FOUND;
    857e:	f06f 0009 	mvn.w	r0, #9
    8582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (func_data->func_iface[0] != 0xFF) {
    8586:	7923      	ldrb	r3, [r4, #4]
    8588:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    858a:	bf1c      	itt	ne
    858c:	23ff      	movne	r3, #255	; 0xff
    858e:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    8590:	7963      	ldrb	r3, [r4, #5]
    8592:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    8594:	bf1c      	itt	ne
    8596:	23ff      	movne	r3, #255	; 0xff
    8598:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    859a:	79a0      	ldrb	r0, [r4, #6]
    859c:	28ff      	cmp	r0, #255	; 0xff
    859e:	d003      	beq.n	85a8 <audio_midi_ctrl+0x124>
		usb_d_ep_deinit(func_data->func_ep_in);
    85a0:	4b1d      	ldr	r3, [pc, #116]	; (8618 <audio_midi_ctrl+0x194>)
    85a2:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    85a4:	23ff      	movs	r3, #255	; 0xff
    85a6:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    85a8:	79e0      	ldrb	r0, [r4, #7]
    85aa:	28ff      	cmp	r0, #255	; 0xff
    85ac:	d003      	beq.n	85b6 <audio_midi_ctrl+0x132>
		usb_d_ep_deinit(func_data->func_ep_out);
    85ae:	4b1a      	ldr	r3, [pc, #104]	; (8618 <audio_midi_ctrl+0x194>)
    85b0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    85b2:	23ff      	movs	r3, #255	; 0xff
    85b4:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    85b6:	2000      	movs	r0, #0
    85b8:	4b18      	ldr	r3, [pc, #96]	; (861c <audio_midi_ctrl+0x198>)
    85ba:	7358      	strb	r0, [r3, #13]
    85bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return ERR_NOT_FOUND;
    85c0:	f06f 0009 	mvn.w	r0, #9
    85c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85c8:	f06f 0009 	mvn.w	r0, #9
    85cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return ERR_ALREADY_INITIALIZED;
    85d0:	f06f 0011 	mvn.w	r0, #17
    85d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return ERR_NO_RESOURCE;
    85d8:	f06f 001b 	mvn.w	r0, #27
    85dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					return ERR_NOT_INITIALIZED;
    85e0:	f06f 0013 	mvn.w	r0, #19
    85e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    85e8:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    85ea:	7818      	ldrb	r0, [r3, #0]
    85ec:	2204      	movs	r2, #4
    85ee:	6869      	ldr	r1, [r5, #4]
    85f0:	4418      	add	r0, r3
    85f2:	4b04      	ldr	r3, [pc, #16]	; (8604 <audio_midi_ctrl+0x180>)
    85f4:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    85f6:	2201      	movs	r2, #1
    85f8:	4b08      	ldr	r3, [pc, #32]	; (861c <audio_midi_ctrl+0x198>)
    85fa:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    85fc:	2000      	movs	r0, #0
    85fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8602:	bf00      	nop
    8604:	00008d49 	.word	0x00008d49
    8608:	00001fc5 	.word	0x00001fc5
    860c:	000083f1 	.word	0x000083f1
    8610:	00002199 	.word	0x00002199
    8614:	00008d83 	.word	0x00008d83
    8618:	00001f99 	.word	0x00001f99
    861c:	2000122c 	.word	0x2000122c
    8620:	00001f31 	.word	0x00001f31
    8624:	000083f3 	.word	0x000083f3

00008628 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    8628:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    862a:	4b0a      	ldr	r3, [pc, #40]	; (8654 <audiodf_midi_init+0x2c>)
    862c:	4798      	blx	r3
    862e:	2801      	cmp	r0, #1
    8630:	d80c      	bhi.n	864c <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    8632:	4809      	ldr	r0, [pc, #36]	; (8658 <audiodf_midi_init+0x30>)
    8634:	4b09      	ldr	r3, [pc, #36]	; (865c <audiodf_midi_init+0x34>)
    8636:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    8638:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    863a:	3010      	adds	r0, #16
    863c:	4b08      	ldr	r3, [pc, #32]	; (8660 <audiodf_midi_init+0x38>)
    863e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    8640:	4908      	ldr	r1, [pc, #32]	; (8664 <audiodf_midi_init+0x3c>)
    8642:	2001      	movs	r0, #1
    8644:	4b08      	ldr	r3, [pc, #32]	; (8668 <audiodf_midi_init+0x40>)
    8646:	4798      	blx	r3
	return ERR_NONE;
    8648:	2000      	movs	r0, #0
    864a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    864c:	f06f 0010 	mvn.w	r0, #16
}
    8650:	bd08      	pop	{r3, pc}
    8652:	bf00      	nop
    8654:	00008d35 	.word	0x00008d35
    8658:	2000122c 	.word	0x2000122c
    865c:	00008485 	.word	0x00008485
    8660:	00008cd5 	.word	0x00008cd5
    8664:	20000364 	.word	0x20000364
    8668:	00008c41 	.word	0x00008c41

0000866c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    866c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    866e:	4b07      	ldr	r3, [pc, #28]	; (868c <usbdc_unconfig+0x20>)
    8670:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    8672:	b14c      	cbz	r4, 8688 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    8674:	2600      	movs	r6, #0
    8676:	2501      	movs	r5, #1
    8678:	6863      	ldr	r3, [r4, #4]
    867a:	4632      	mov	r2, r6
    867c:	4629      	mov	r1, r5
    867e:	4620      	mov	r0, r4
    8680:	4798      	blx	r3
		func = func->next;
    8682:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    8684:	2c00      	cmp	r4, #0
    8686:	d1f7      	bne.n	8678 <usbdc_unconfig+0xc>
    8688:	bd70      	pop	{r4, r5, r6, pc}
    868a:	bf00      	nop
    868c:	20001248 	.word	0x20001248

00008690 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    8690:	b570      	push	{r4, r5, r6, lr}
    8692:	4606      	mov	r6, r0
    8694:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    8696:	4b07      	ldr	r3, [pc, #28]	; (86b4 <usbdc_change_notify+0x24>)
    8698:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    869a:	b91c      	cbnz	r4, 86a4 <usbdc_change_notify+0x14>
    869c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    869e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    86a0:	2c00      	cmp	r4, #0
    86a2:	d0fb      	beq.n	869c <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    86a4:	6863      	ldr	r3, [r4, #4]
    86a6:	2b00      	cmp	r3, #0
    86a8:	d0f9      	beq.n	869e <usbdc_change_notify+0xe>
			cg->cb(change, value);
    86aa:	4629      	mov	r1, r5
    86ac:	4630      	mov	r0, r6
    86ae:	4798      	blx	r3
    86b0:	e7f5      	b.n	869e <usbdc_change_notify+0xe>
    86b2:	bf00      	nop
    86b4:	20001248 	.word	0x20001248

000086b8 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    86b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86ba:	4607      	mov	r7, r0
    86bc:	460e      	mov	r6, r1
    86be:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    86c0:	4b0c      	ldr	r3, [pc, #48]	; (86f4 <usbdc_request_handler+0x3c>)
    86c2:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    86c4:	b91c      	cbnz	r4, 86ce <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    86c6:	2000      	movs	r0, #0
    86c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    86ca:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    86cc:	b16c      	cbz	r4, 86ea <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    86ce:	6863      	ldr	r3, [r4, #4]
    86d0:	2b00      	cmp	r3, #0
    86d2:	d0fa      	beq.n	86ca <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    86d4:	462a      	mov	r2, r5
    86d6:	4631      	mov	r1, r6
    86d8:	4638      	mov	r0, r7
    86da:	4798      	blx	r3
			if (0 == rc) {
    86dc:	b138      	cbz	r0, 86ee <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    86de:	f110 0f0a 	cmn.w	r0, #10
    86e2:	d0f2      	beq.n	86ca <usbdc_request_handler+0x12>
				return -1;
    86e4:	f04f 30ff 	mov.w	r0, #4294967295
}
    86e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    86ea:	2000      	movs	r0, #0
    86ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    86ee:	2001      	movs	r0, #1
    86f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    86f2:	bf00      	nop
    86f4:	20001248 	.word	0x20001248

000086f8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    86f8:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    86fa:	4b06      	ldr	r3, [pc, #24]	; (8714 <usbd_sof_cb+0x1c>)
    86fc:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    86fe:	b91c      	cbnz	r4, 8708 <usbd_sof_cb+0x10>
    8700:	bd10      	pop	{r4, pc}
		sof = sof->next;
    8702:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    8704:	2c00      	cmp	r4, #0
    8706:	d0fb      	beq.n	8700 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    8708:	6863      	ldr	r3, [r4, #4]
    870a:	2b00      	cmp	r3, #0
    870c:	d0f9      	beq.n	8702 <usbd_sof_cb+0xa>
			sof->cb();
    870e:	4798      	blx	r3
    8710:	e7f7      	b.n	8702 <usbd_sof_cb+0xa>
    8712:	bf00      	nop
    8714:	20001248 	.word	0x20001248

00008718 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    8718:	b510      	push	{r4, lr}
    871a:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    871c:	b119      	cbz	r1, 8726 <usbdc_cb_ctl_done+0xe>
    871e:	2901      	cmp	r1, #1
    8720:	d026      	beq.n	8770 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    8722:	2000      	movs	r0, #0
    8724:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    8726:	7813      	ldrb	r3, [r2, #0]
    8728:	2b00      	cmp	r3, #0
    872a:	d1fa      	bne.n	8722 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    872c:	7853      	ldrb	r3, [r2, #1]
    872e:	2b05      	cmp	r3, #5
    8730:	d00f      	beq.n	8752 <usbdc_cb_ctl_done+0x3a>
    8732:	2b09      	cmp	r3, #9
    8734:	d1f5      	bne.n	8722 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    8736:	8852      	ldrh	r2, [r2, #2]
    8738:	4b10      	ldr	r3, [pc, #64]	; (877c <usbdc_cb_ctl_done+0x64>)
    873a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    873c:	8863      	ldrh	r3, [r4, #2]
    873e:	2b00      	cmp	r3, #0
    8740:	bf14      	ite	ne
    8742:	2104      	movne	r1, #4
    8744:	2103      	moveq	r1, #3
    8746:	4b0d      	ldr	r3, [pc, #52]	; (877c <usbdc_cb_ctl_done+0x64>)
    8748:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    874a:	2001      	movs	r0, #1
    874c:	4b0c      	ldr	r3, [pc, #48]	; (8780 <usbdc_cb_ctl_done+0x68>)
    874e:	4798      	blx	r3
    8750:	e7e7      	b.n	8722 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    8752:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    8754:	b2c0      	uxtb	r0, r0
    8756:	4b0b      	ldr	r3, [pc, #44]	; (8784 <usbdc_cb_ctl_done+0x6c>)
    8758:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    875a:	8863      	ldrh	r3, [r4, #2]
    875c:	2b00      	cmp	r3, #0
    875e:	bf14      	ite	ne
    8760:	2103      	movne	r1, #3
    8762:	2102      	moveq	r1, #2
    8764:	4b05      	ldr	r3, [pc, #20]	; (877c <usbdc_cb_ctl_done+0x64>)
    8766:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    8768:	2001      	movs	r0, #1
    876a:	4b05      	ldr	r3, [pc, #20]	; (8780 <usbdc_cb_ctl_done+0x68>)
    876c:	4798      	blx	r3
    876e:	e7d8      	b.n	8722 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    8770:	2201      	movs	r2, #1
    8772:	4621      	mov	r1, r4
    8774:	2000      	movs	r0, #0
    8776:	4b04      	ldr	r3, [pc, #16]	; (8788 <usbdc_cb_ctl_done+0x70>)
    8778:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    877a:	e7d2      	b.n	8722 <usbdc_cb_ctl_done+0xa>
    877c:	20001248 	.word	0x20001248
    8780:	00008691 	.word	0x00008691
    8784:	00001f25 	.word	0x00001f25
    8788:	000086b9 	.word	0x000086b9

0000878c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    878c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    878e:	4b0d      	ldr	r3, [pc, #52]	; (87c4 <usbdc_reset+0x38>)
    8790:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    8792:	4d0d      	ldr	r5, [pc, #52]	; (87c8 <usbdc_reset+0x3c>)
    8794:	2602      	movs	r6, #2
    8796:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    8798:	2400      	movs	r4, #0
    879a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    879c:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    879e:	4620      	mov	r0, r4
    87a0:	4b0a      	ldr	r3, [pc, #40]	; (87cc <usbdc_reset+0x40>)
    87a2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    87a4:	7f28      	ldrb	r0, [r5, #28]
    87a6:	4b0a      	ldr	r3, [pc, #40]	; (87d0 <usbdc_reset+0x44>)
    87a8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    87aa:	4a0a      	ldr	r2, [pc, #40]	; (87d4 <usbdc_reset+0x48>)
    87ac:	4621      	mov	r1, r4
    87ae:	4620      	mov	r0, r4
    87b0:	4d09      	ldr	r5, [pc, #36]	; (87d8 <usbdc_reset+0x4c>)
    87b2:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    87b4:	4a09      	ldr	r2, [pc, #36]	; (87dc <usbdc_reset+0x50>)
    87b6:	4631      	mov	r1, r6
    87b8:	4620      	mov	r0, r4
    87ba:	47a8      	blx	r5
	usb_d_ep_enable(0);
    87bc:	4620      	mov	r0, r4
    87be:	4b08      	ldr	r3, [pc, #32]	; (87e0 <usbdc_reset+0x54>)
    87c0:	4798      	blx	r3
    87c2:	bd70      	pop	{r4, r5, r6, pc}
    87c4:	0000866d 	.word	0x0000866d
    87c8:	20001248 	.word	0x20001248
    87cc:	00001f99 	.word	0x00001f99
    87d0:	00001f85 	.word	0x00001f85
    87d4:	00008825 	.word	0x00008825
    87d8:	00002199 	.word	0x00002199
    87dc:	00008719 	.word	0x00008719
    87e0:	00001fc5 	.word	0x00001fc5

000087e4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    87e4:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    87e6:	b110      	cbz	r0, 87ee <usbd_event_cb+0xa>
    87e8:	2801      	cmp	r0, #1
    87ea:	d004      	beq.n	87f6 <usbd_event_cb+0x12>
    87ec:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    87ee:	2000      	movs	r0, #0
    87f0:	4b02      	ldr	r3, [pc, #8]	; (87fc <usbd_event_cb+0x18>)
    87f2:	4798      	blx	r3
		break;
    87f4:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    87f6:	4b02      	ldr	r3, [pc, #8]	; (8800 <usbd_event_cb+0x1c>)
    87f8:	4798      	blx	r3
    87fa:	bd08      	pop	{r3, pc}
    87fc:	00008691 	.word	0x00008691
    8800:	0000878d 	.word	0x0000878d

00008804 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    8804:	b500      	push	{lr}
    8806:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    8808:	9101      	str	r1, [sp, #4]
    880a:	9202      	str	r2, [sp, #8]
    880c:	f88d 000c 	strb.w	r0, [sp, #12]
    8810:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    8814:	a801      	add	r0, sp, #4
    8816:	4b02      	ldr	r3, [pc, #8]	; (8820 <usbdc_xfer+0x1c>)
    8818:	4798      	blx	r3
}
    881a:	b005      	add	sp, #20
    881c:	f85d fb04 	ldr.w	pc, [sp], #4
    8820:	00002011 	.word	0x00002011

00008824 <usbdc_cb_ctl_req>:
{
    8824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8828:	b083      	sub	sp, #12
    882a:	4605      	mov	r5, r0
    882c:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    882e:	2200      	movs	r2, #0
    8830:	4b9b      	ldr	r3, [pc, #620]	; (8aa0 <usbdc_cb_ctl_req+0x27c>)
    8832:	4798      	blx	r3
    8834:	f1b0 3fff 	cmp.w	r0, #4294967295
    8838:	d00b      	beq.n	8852 <usbdc_cb_ctl_req+0x2e>
    883a:	2801      	cmp	r0, #1
    883c:	f000 81e3 	beq.w	8c06 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    8840:	7823      	ldrb	r3, [r4, #0]
    8842:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    8846:	d008      	beq.n	885a <usbdc_cb_ctl_req+0x36>
    8848:	2a80      	cmp	r2, #128	; 0x80
    884a:	f000 80f4 	beq.w	8a36 <usbdc_cb_ctl_req+0x212>
		return false;
    884e:	2000      	movs	r0, #0
    8850:	e000      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8852:	2000      	movs	r0, #0
}
    8854:	b003      	add	sp, #12
    8856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    885a:	7862      	ldrb	r2, [r4, #1]
    885c:	3a01      	subs	r2, #1
    885e:	2a0a      	cmp	r2, #10
    8860:	f200 81d3 	bhi.w	8c0a <usbdc_cb_ctl_req+0x3e6>
    8864:	e8df f012 	tbh	[pc, r2, lsl #1]
    8868:	01d10060 	.word	0x01d10060
    886c:	01d10076 	.word	0x01d10076
    8870:	01d1000b 	.word	0x01d1000b
    8874:	01d101d1 	.word	0x01d101d1
    8878:	01d10015 	.word	0x01d10015
    887c:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    887e:	2301      	movs	r3, #1
    8880:	2200      	movs	r2, #0
    8882:	4611      	mov	r1, r2
    8884:	4628      	mov	r0, r5
    8886:	4c87      	ldr	r4, [pc, #540]	; (8aa4 <usbdc_cb_ctl_req+0x280>)
    8888:	47a0      	blx	r4
    888a:	fab0 f080 	clz	r0, r0
    888e:	0940      	lsrs	r0, r0, #5
    8890:	e7e0      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    8892:	8862      	ldrh	r2, [r4, #2]
    8894:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    8896:	b1ca      	cbz	r2, 88cc <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    8898:	4b83      	ldr	r3, [pc, #524]	; (8aa8 <usbdc_cb_ctl_req+0x284>)
    889a:	681b      	ldr	r3, [r3, #0]
    889c:	6859      	ldr	r1, [r3, #4]
    889e:	6818      	ldr	r0, [r3, #0]
    88a0:	4b82      	ldr	r3, [pc, #520]	; (8aac <usbdc_cb_ctl_req+0x288>)
    88a2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    88a4:	2800      	cmp	r0, #0
    88a6:	f000 81be 	beq.w	8c26 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    88aa:	78c2      	ldrb	r2, [r0, #3]
    88ac:	7881      	ldrb	r1, [r0, #2]
    88ae:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    88b2:	fa10 f181 	uxtah	r1, r0, r1
    88b6:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    88b8:	2204      	movs	r2, #4
    88ba:	4b7d      	ldr	r3, [pc, #500]	; (8ab0 <usbdc_cb_ctl_req+0x28c>)
    88bc:	4798      	blx	r3
    88be:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    88c0:	b130      	cbz	r0, 88d0 <usbdc_cb_ctl_req+0xac>
    88c2:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    88c4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8aa8 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    88c8:	4f79      	ldr	r7, [pc, #484]	; (8ab0 <usbdc_cb_ctl_req+0x28c>)
    88ca:	e018      	b.n	88fe <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    88cc:	4b79      	ldr	r3, [pc, #484]	; (8ab4 <usbdc_cb_ctl_req+0x290>)
    88ce:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    88d0:	2301      	movs	r3, #1
    88d2:	2200      	movs	r2, #0
    88d4:	4611      	mov	r1, r2
    88d6:	4628      	mov	r0, r5
    88d8:	4c72      	ldr	r4, [pc, #456]	; (8aa4 <usbdc_cb_ctl_req+0x280>)
    88da:	47a0      	blx	r4
    88dc:	fab0 f080 	clz	r0, r0
    88e0:	0940      	lsrs	r0, r0, #5
    88e2:	e7b7      	b.n	8854 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    88e4:	464c      	mov	r4, r9
    88e6:	e000      	b.n	88ea <usbdc_cb_ctl_req+0xc6>
    88e8:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    88ea:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    88ec:	7803      	ldrb	r3, [r0, #0]
    88ee:	4418      	add	r0, r3
    88f0:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    88f2:	2204      	movs	r2, #4
    88f4:	9901      	ldr	r1, [sp, #4]
    88f6:	47b8      	blx	r7
    88f8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    88fa:	2800      	cmp	r0, #0
    88fc:	d0e8      	beq.n	88d0 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    88fe:	f890 9002 	ldrb.w	r9, [r0, #2]
    8902:	45a1      	cmp	r9, r4
    8904:	d0f1      	beq.n	88ea <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    8906:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    890a:	2c00      	cmp	r4, #0
    890c:	d0ea      	beq.n	88e4 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    890e:	2600      	movs	r6, #0
    8910:	6863      	ldr	r3, [r4, #4]
    8912:	466a      	mov	r2, sp
    8914:	4631      	mov	r1, r6
    8916:	4620      	mov	r0, r4
    8918:	4798      	blx	r3
    891a:	2800      	cmp	r0, #0
    891c:	d0e4      	beq.n	88e8 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    891e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    8920:	2c00      	cmp	r4, #0
    8922:	d1f5      	bne.n	8910 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    8924:	464c      	mov	r4, r9
    8926:	e7e0      	b.n	88ea <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    8928:	f003 031f 	and.w	r3, r3, #31
    892c:	2b02      	cmp	r3, #2
    892e:	f040 816e 	bne.w	8c0e <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    8932:	88e3      	ldrh	r3, [r4, #6]
    8934:	b10b      	cbz	r3, 893a <usbdc_cb_ctl_req+0x116>
			return false;
    8936:	2000      	movs	r0, #0
    8938:	e78c      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    893a:	88a0      	ldrh	r0, [r4, #4]
    893c:	2100      	movs	r1, #0
    893e:	b2c0      	uxtb	r0, r0
    8940:	4b5d      	ldr	r3, [pc, #372]	; (8ab8 <usbdc_cb_ctl_req+0x294>)
    8942:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    8944:	2301      	movs	r3, #1
    8946:	2200      	movs	r2, #0
    8948:	4611      	mov	r1, r2
    894a:	4628      	mov	r0, r5
    894c:	4c55      	ldr	r4, [pc, #340]	; (8aa4 <usbdc_cb_ctl_req+0x280>)
    894e:	47a0      	blx	r4
		return true;
    8950:	2001      	movs	r0, #1
    8952:	e77f      	b.n	8854 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    8954:	f003 031f 	and.w	r3, r3, #31
    8958:	2b02      	cmp	r3, #2
    895a:	f040 815a 	bne.w	8c12 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    895e:	88e3      	ldrh	r3, [r4, #6]
    8960:	b10b      	cbz	r3, 8966 <usbdc_cb_ctl_req+0x142>
			return false;
    8962:	2000      	movs	r0, #0
    8964:	e776      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    8966:	88a0      	ldrh	r0, [r4, #4]
    8968:	2101      	movs	r1, #1
    896a:	b2c0      	uxtb	r0, r0
    896c:	4b52      	ldr	r3, [pc, #328]	; (8ab8 <usbdc_cb_ctl_req+0x294>)
    896e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    8970:	2301      	movs	r3, #1
    8972:	2200      	movs	r2, #0
    8974:	4611      	mov	r1, r2
    8976:	4628      	mov	r0, r5
    8978:	4c4a      	ldr	r4, [pc, #296]	; (8aa4 <usbdc_cb_ctl_req+0x280>)
    897a:	47a0      	blx	r4
		return true;
    897c:	2001      	movs	r0, #1
    897e:	e769      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    8980:	8866      	ldrh	r6, [r4, #2]
    8982:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    8984:	4a48      	ldr	r2, [pc, #288]	; (8aa8 <usbdc_cb_ctl_req+0x284>)
    8986:	6813      	ldr	r3, [r2, #0]
    8988:	7ed2      	ldrb	r2, [r2, #27]
    898a:	6859      	ldr	r1, [r3, #4]
    898c:	6818      	ldr	r0, [r3, #0]
    898e:	4b47      	ldr	r3, [pc, #284]	; (8aac <usbdc_cb_ctl_req+0x288>)
    8990:	4798      	blx	r3
	if (NULL == ifc) {
    8992:	2800      	cmp	r0, #0
    8994:	d045      	beq.n	8a22 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    8996:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    8998:	78c2      	ldrb	r2, [r0, #3]
    899a:	7881      	ldrb	r1, [r0, #2]
    899c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    89a0:	fa10 f181 	uxtah	r1, r0, r1
    89a4:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    89a6:	2204      	movs	r2, #4
    89a8:	4b41      	ldr	r3, [pc, #260]	; (8ab0 <usbdc_cb_ctl_req+0x28c>)
    89aa:	4798      	blx	r3
    89ac:	4603      	mov	r3, r0
    89ae:	2800      	cmp	r0, #0
    89b0:	d039      	beq.n	8a26 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    89b2:	2704      	movs	r7, #4
    89b4:	4d3e      	ldr	r5, [pc, #248]	; (8ab0 <usbdc_cb_ctl_req+0x28c>)
    89b6:	e008      	b.n	89ca <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    89b8:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    89ba:	7803      	ldrb	r3, [r0, #0]
    89bc:	4418      	add	r0, r3
    89be:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    89c0:	463a      	mov	r2, r7
    89c2:	9901      	ldr	r1, [sp, #4]
    89c4:	47a8      	blx	r5
		if (NULL == ifc) {
    89c6:	4603      	mov	r3, r0
    89c8:	b378      	cbz	r0, 8a2a <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    89ca:	789a      	ldrb	r2, [r3, #2]
    89cc:	42a2      	cmp	r2, r4
    89ce:	d1f3      	bne.n	89b8 <usbdc_cb_ctl_req+0x194>
    89d0:	78da      	ldrb	r2, [r3, #3]
    89d2:	42b2      	cmp	r2, r6
    89d4:	d1f0      	bne.n	89b8 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    89d6:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    89d8:	4b33      	ldr	r3, [pc, #204]	; (8aa8 <usbdc_cb_ctl_req+0x284>)
    89da:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    89dc:	b33d      	cbz	r5, 8a2e <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    89de:	2701      	movs	r7, #1
    89e0:	686b      	ldr	r3, [r5, #4]
    89e2:	466a      	mov	r2, sp
    89e4:	4639      	mov	r1, r7
    89e6:	4628      	mov	r0, r5
    89e8:	4798      	blx	r3
    89ea:	b120      	cbz	r0, 89f6 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    89ec:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    89ee:	2d00      	cmp	r5, #0
    89f0:	d1f6      	bne.n	89e0 <usbdc_cb_ctl_req+0x1bc>
	return false;
    89f2:	2000      	movs	r0, #0
    89f4:	e72e      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    89f6:	686b      	ldr	r3, [r5, #4]
    89f8:	466a      	mov	r2, sp
    89fa:	2100      	movs	r1, #0
    89fc:	4628      	mov	r0, r5
    89fe:	4798      	blx	r3
    8a00:	b9b8      	cbnz	r0, 8a32 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    8a02:	b136      	cbz	r6, 8a12 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    8a04:	4a28      	ldr	r2, [pc, #160]	; (8aa8 <usbdc_cb_ctl_req+0x284>)
    8a06:	2301      	movs	r3, #1
    8a08:	fa03 f404 	lsl.w	r4, r3, r4
    8a0c:	7f53      	ldrb	r3, [r2, #29]
    8a0e:	4323      	orrs	r3, r4
    8a10:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    8a12:	2300      	movs	r3, #0
    8a14:	461a      	mov	r2, r3
    8a16:	4619      	mov	r1, r3
    8a18:	4618      	mov	r0, r3
    8a1a:	4c22      	ldr	r4, [pc, #136]	; (8aa4 <usbdc_cb_ctl_req+0x280>)
    8a1c:	47a0      	blx	r4
			return true;
    8a1e:	2001      	movs	r0, #1
    8a20:	e718      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8a22:	2000      	movs	r0, #0
    8a24:	e716      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8a26:	2000      	movs	r0, #0
    8a28:	e714      	b.n	8854 <usbdc_cb_ctl_req+0x30>
			return false;
    8a2a:	2000      	movs	r0, #0
    8a2c:	e712      	b.n	8854 <usbdc_cb_ctl_req+0x30>
	return false;
    8a2e:	2000      	movs	r0, #0
    8a30:	e710      	b.n	8854 <usbdc_cb_ctl_req+0x30>
			return false;
    8a32:	2000      	movs	r0, #0
    8a34:	e70e      	b.n	8854 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    8a36:	7862      	ldrb	r2, [r4, #1]
    8a38:	2a0a      	cmp	r2, #10
    8a3a:	f200 80ec 	bhi.w	8c16 <usbdc_cb_ctl_req+0x3f2>
    8a3e:	e8df f012 	tbh	[pc, r2, lsl #1]
    8a42:	008e      	.short	0x008e
    8a44:	00ea00ea 	.word	0x00ea00ea
    8a48:	00ea00ea 	.word	0x00ea00ea
    8a4c:	000b00ea 	.word	0x000b00ea
    8a50:	008200ea 	.word	0x008200ea
    8a54:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    8a58:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    8a5a:	0a13      	lsrs	r3, r2, #8
    8a5c:	2b02      	cmp	r3, #2
    8a5e:	d02d      	beq.n	8abc <usbdc_cb_ctl_req+0x298>
    8a60:	2b03      	cmp	r3, #3
    8a62:	d050      	beq.n	8b06 <usbdc_cb_ctl_req+0x2e2>
    8a64:	2b01      	cmp	r3, #1
    8a66:	d001      	beq.n	8a6c <usbdc_cb_ctl_req+0x248>
	return false;
    8a68:	2000      	movs	r0, #0
    8a6a:	e6f3      	b.n	8854 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    8a6c:	88e2      	ldrh	r2, [r4, #6]
    8a6e:	2a12      	cmp	r2, #18
    8a70:	bf28      	it	cs
    8a72:	2212      	movcs	r2, #18
    8a74:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    8a76:	4b0c      	ldr	r3, [pc, #48]	; (8aa8 <usbdc_cb_ctl_req+0x284>)
    8a78:	681b      	ldr	r3, [r3, #0]
    8a7a:	2201      	movs	r2, #1
    8a7c:	6859      	ldr	r1, [r3, #4]
    8a7e:	6818      	ldr	r0, [r3, #0]
    8a80:	4b0b      	ldr	r3, [pc, #44]	; (8ab0 <usbdc_cb_ctl_req+0x28c>)
    8a82:	4798      	blx	r3
	if (!dev_desc) {
    8a84:	4601      	mov	r1, r0
    8a86:	2800      	cmp	r0, #0
    8a88:	f000 80c7 	beq.w	8c1a <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    8a8c:	2300      	movs	r3, #0
    8a8e:	4622      	mov	r2, r4
    8a90:	4628      	mov	r0, r5
    8a92:	4c04      	ldr	r4, [pc, #16]	; (8aa4 <usbdc_cb_ctl_req+0x280>)
    8a94:	47a0      	blx	r4
    8a96:	fab0 f080 	clz	r0, r0
    8a9a:	0940      	lsrs	r0, r0, #5
    8a9c:	e6da      	b.n	8854 <usbdc_cb_ctl_req+0x30>
    8a9e:	bf00      	nop
    8aa0:	000086b9 	.word	0x000086b9
    8aa4:	00008805 	.word	0x00008805
    8aa8:	20001248 	.word	0x20001248
    8aac:	00008dc9 	.word	0x00008dc9
    8ab0:	00008d49 	.word	0x00008d49
    8ab4:	0000866d 	.word	0x0000866d
    8ab8:	00002131 	.word	0x00002131
	uint16_t length   = req->wLength;
    8abc:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    8abe:	4b5b      	ldr	r3, [pc, #364]	; (8c2c <usbdc_cb_ctl_req+0x408>)
    8ac0:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    8ac2:	681b      	ldr	r3, [r3, #0]
    8ac4:	3201      	adds	r2, #1
    8ac6:	b2d2      	uxtb	r2, r2
    8ac8:	6859      	ldr	r1, [r3, #4]
    8aca:	6818      	ldr	r0, [r3, #0]
    8acc:	4b58      	ldr	r3, [pc, #352]	; (8c30 <usbdc_cb_ctl_req+0x40c>)
    8ace:	4798      	blx	r3
	if (NULL == cfg_desc) {
    8ad0:	4601      	mov	r1, r0
    8ad2:	2800      	cmp	r0, #0
    8ad4:	f000 80a3 	beq.w	8c1e <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    8ad8:	78c3      	ldrb	r3, [r0, #3]
    8ada:	7882      	ldrb	r2, [r0, #2]
    8adc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    8ae0:	b292      	uxth	r2, r2
	if (length <= total_len) {
    8ae2:	4294      	cmp	r4, r2
    8ae4:	d90d      	bls.n	8b02 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    8ae6:	3e01      	subs	r6, #1
    8ae8:	4226      	tst	r6, r4
    8aea:	bf0c      	ite	eq
    8aec:	2301      	moveq	r3, #1
    8aee:	2300      	movne	r3, #0
		length = total_len;
    8af0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    8af2:	4622      	mov	r2, r4
    8af4:	4628      	mov	r0, r5
    8af6:	4c4f      	ldr	r4, [pc, #316]	; (8c34 <usbdc_cb_ctl_req+0x410>)
    8af8:	47a0      	blx	r4
    8afa:	fab0 f080 	clz	r0, r0
    8afe:	0940      	lsrs	r0, r0, #5
    8b00:	e6a8      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    8b02:	2300      	movs	r3, #0
    8b04:	e7f5      	b.n	8af2 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    8b06:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    8b08:	4b48      	ldr	r3, [pc, #288]	; (8c2c <usbdc_cb_ctl_req+0x408>)
    8b0a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    8b0c:	681b      	ldr	r3, [r3, #0]
    8b0e:	b2d2      	uxtb	r2, r2
    8b10:	6859      	ldr	r1, [r3, #4]
    8b12:	6818      	ldr	r0, [r3, #0]
    8b14:	4b48      	ldr	r3, [pc, #288]	; (8c38 <usbdc_cb_ctl_req+0x414>)
    8b16:	4798      	blx	r3
	if (NULL == str_desc) {
    8b18:	4601      	mov	r1, r0
    8b1a:	2800      	cmp	r0, #0
    8b1c:	f000 8081 	beq.w	8c22 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    8b20:	7802      	ldrb	r2, [r0, #0]
    8b22:	4294      	cmp	r4, r2
    8b24:	d90d      	bls.n	8b42 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    8b26:	3e01      	subs	r6, #1
    8b28:	4226      	tst	r6, r4
    8b2a:	bf0c      	ite	eq
    8b2c:	2301      	moveq	r3, #1
    8b2e:	2300      	movne	r3, #0
		length = str_desc[0];
    8b30:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    8b32:	4622      	mov	r2, r4
    8b34:	4628      	mov	r0, r5
    8b36:	4c3f      	ldr	r4, [pc, #252]	; (8c34 <usbdc_cb_ctl_req+0x410>)
    8b38:	47a0      	blx	r4
    8b3a:	fab0 f080 	clz	r0, r0
    8b3e:	0940      	lsrs	r0, r0, #5
    8b40:	e688      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    8b42:	2300      	movs	r3, #0
    8b44:	e7f5      	b.n	8b32 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    8b46:	4939      	ldr	r1, [pc, #228]	; (8c2c <usbdc_cb_ctl_req+0x408>)
    8b48:	694b      	ldr	r3, [r1, #20]
    8b4a:	7eca      	ldrb	r2, [r1, #27]
    8b4c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    8b4e:	2300      	movs	r3, #0
    8b50:	2201      	movs	r2, #1
    8b52:	6949      	ldr	r1, [r1, #20]
    8b54:	4628      	mov	r0, r5
    8b56:	4c37      	ldr	r4, [pc, #220]	; (8c34 <usbdc_cb_ctl_req+0x410>)
    8b58:	47a0      	blx	r4
		return true;
    8b5a:	2001      	movs	r0, #1
    8b5c:	e67a      	b.n	8854 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    8b5e:	f003 031f 	and.w	r3, r3, #31
    8b62:	2b01      	cmp	r3, #1
    8b64:	d903      	bls.n	8b6e <usbdc_cb_ctl_req+0x34a>
    8b66:	2b02      	cmp	r3, #2
    8b68:	d010      	beq.n	8b8c <usbdc_cb_ctl_req+0x368>
		return false;
    8b6a:	2000      	movs	r0, #0
    8b6c:	e672      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		st = 0;
    8b6e:	2300      	movs	r3, #0
    8b70:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    8b72:	492e      	ldr	r1, [pc, #184]	; (8c2c <usbdc_cb_ctl_req+0x408>)
    8b74:	694b      	ldr	r3, [r1, #20]
    8b76:	f8bd 2000 	ldrh.w	r2, [sp]
    8b7a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    8b7c:	2300      	movs	r3, #0
    8b7e:	2202      	movs	r2, #2
    8b80:	6949      	ldr	r1, [r1, #20]
    8b82:	4628      	mov	r0, r5
    8b84:	4c2b      	ldr	r4, [pc, #172]	; (8c34 <usbdc_cb_ctl_req+0x410>)
    8b86:	47a0      	blx	r4
	return true;
    8b88:	2001      	movs	r0, #1
    8b8a:	e663      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    8b8c:	88a0      	ldrh	r0, [r4, #4]
    8b8e:	2102      	movs	r1, #2
    8b90:	b2c0      	uxtb	r0, r0
    8b92:	4b2a      	ldr	r3, [pc, #168]	; (8c3c <usbdc_cb_ctl_req+0x418>)
    8b94:	4798      	blx	r3
		if (st < 0) {
    8b96:	2800      	cmp	r0, #0
    8b98:	db03      	blt.n	8ba2 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    8b9a:	f000 0001 	and.w	r0, r0, #1
    8b9e:	9000      	str	r0, [sp, #0]
    8ba0:	e7e7      	b.n	8b72 <usbdc_cb_ctl_req+0x34e>
			return false;
    8ba2:	2000      	movs	r0, #0
    8ba4:	e656      	b.n	8854 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    8ba6:	4b21      	ldr	r3, [pc, #132]	; (8c2c <usbdc_cb_ctl_req+0x408>)
    8ba8:	7f5b      	ldrb	r3, [r3, #29]
    8baa:	88a2      	ldrh	r2, [r4, #4]
    8bac:	4113      	asrs	r3, r2
    8bae:	f013 0f01 	tst.w	r3, #1
    8bb2:	d012      	beq.n	8bda <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    8bb4:	4b1d      	ldr	r3, [pc, #116]	; (8c2c <usbdc_cb_ctl_req+0x408>)
    8bb6:	691d      	ldr	r5, [r3, #16]
	return false;
    8bb8:	2000      	movs	r0, #0
	while (NULL != func) {
    8bba:	2d00      	cmp	r5, #0
    8bbc:	f43f ae4a 	beq.w	8854 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    8bc0:	2602      	movs	r6, #2
    8bc2:	686b      	ldr	r3, [r5, #4]
    8bc4:	4622      	mov	r2, r4
    8bc6:	4631      	mov	r1, r6
    8bc8:	4628      	mov	r0, r5
    8bca:	4798      	blx	r3
    8bcc:	2800      	cmp	r0, #0
    8bce:	da0f      	bge.n	8bf0 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    8bd0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    8bd2:	2d00      	cmp	r5, #0
    8bd4:	d1f5      	bne.n	8bc2 <usbdc_cb_ctl_req+0x39e>
	return false;
    8bd6:	2000      	movs	r0, #0
    8bd8:	e63c      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    8bda:	4914      	ldr	r1, [pc, #80]	; (8c2c <usbdc_cb_ctl_req+0x408>)
    8bdc:	694b      	ldr	r3, [r1, #20]
    8bde:	2000      	movs	r0, #0
    8be0:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    8be2:	4603      	mov	r3, r0
    8be4:	2201      	movs	r2, #1
    8be6:	6949      	ldr	r1, [r1, #20]
    8be8:	4c12      	ldr	r4, [pc, #72]	; (8c34 <usbdc_cb_ctl_req+0x410>)
    8bea:	47a0      	blx	r4
		return true;
    8bec:	2001      	movs	r0, #1
    8bee:	e631      	b.n	8854 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    8bf0:	490e      	ldr	r1, [pc, #56]	; (8c2c <usbdc_cb_ctl_req+0x408>)
    8bf2:	694b      	ldr	r3, [r1, #20]
    8bf4:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    8bf6:	2300      	movs	r3, #0
    8bf8:	2201      	movs	r2, #1
    8bfa:	6949      	ldr	r1, [r1, #20]
    8bfc:	4618      	mov	r0, r3
    8bfe:	4c0d      	ldr	r4, [pc, #52]	; (8c34 <usbdc_cb_ctl_req+0x410>)
    8c00:	47a0      	blx	r4
			return true;
    8c02:	2001      	movs	r0, #1
    8c04:	e626      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return true;
    8c06:	2001      	movs	r0, #1
    8c08:	e624      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8c0a:	2000      	movs	r0, #0
    8c0c:	e622      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8c0e:	2000      	movs	r0, #0
    8c10:	e620      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8c12:	2000      	movs	r0, #0
    8c14:	e61e      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8c16:	2000      	movs	r0, #0
    8c18:	e61c      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8c1a:	2000      	movs	r0, #0
    8c1c:	e61a      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8c1e:	2000      	movs	r0, #0
    8c20:	e618      	b.n	8854 <usbdc_cb_ctl_req+0x30>
		return false;
    8c22:	2000      	movs	r0, #0
    8c24:	e616      	b.n	8854 <usbdc_cb_ctl_req+0x30>
			return false;
    8c26:	2000      	movs	r0, #0
    8c28:	e614      	b.n	8854 <usbdc_cb_ctl_req+0x30>
    8c2a:	bf00      	nop
    8c2c:	20001248 	.word	0x20001248
    8c30:	00008dc9 	.word	0x00008dc9
    8c34:	00008805 	.word	0x00008805
    8c38:	00008e31 	.word	0x00008e31
    8c3c:	00002131 	.word	0x00002131

00008c40 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    8c40:	b508      	push	{r3, lr}
	switch (type) {
    8c42:	2801      	cmp	r0, #1
    8c44:	d007      	beq.n	8c56 <usbdc_register_handler+0x16>
    8c46:	b110      	cbz	r0, 8c4e <usbdc_register_handler+0xe>
    8c48:	2802      	cmp	r0, #2
    8c4a:	d008      	beq.n	8c5e <usbdc_register_handler+0x1e>
    8c4c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    8c4e:	4806      	ldr	r0, [pc, #24]	; (8c68 <usbdc_register_handler+0x28>)
    8c50:	4b06      	ldr	r3, [pc, #24]	; (8c6c <usbdc_register_handler+0x2c>)
    8c52:	4798      	blx	r3
		break;
    8c54:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    8c56:	4806      	ldr	r0, [pc, #24]	; (8c70 <usbdc_register_handler+0x30>)
    8c58:	4b04      	ldr	r3, [pc, #16]	; (8c6c <usbdc_register_handler+0x2c>)
    8c5a:	4798      	blx	r3
		break;
    8c5c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    8c5e:	4805      	ldr	r0, [pc, #20]	; (8c74 <usbdc_register_handler+0x34>)
    8c60:	4b02      	ldr	r3, [pc, #8]	; (8c6c <usbdc_register_handler+0x2c>)
    8c62:	4798      	blx	r3
    8c64:	bd08      	pop	{r3, pc}
    8c66:	bf00      	nop
    8c68:	2000124c 	.word	0x2000124c
    8c6c:	00002241 	.word	0x00002241
    8c70:	20001250 	.word	0x20001250
    8c74:	20001254 	.word	0x20001254

00008c78 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    8c78:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    8c7a:	4605      	mov	r5, r0
    8c7c:	f240 3255 	movw	r2, #853	; 0x355
    8c80:	490c      	ldr	r1, [pc, #48]	; (8cb4 <usbdc_init+0x3c>)
    8c82:	3000      	adds	r0, #0
    8c84:	bf18      	it	ne
    8c86:	2001      	movne	r0, #1
    8c88:	4b0b      	ldr	r3, [pc, #44]	; (8cb8 <usbdc_init+0x40>)
    8c8a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    8c8c:	4b0b      	ldr	r3, [pc, #44]	; (8cbc <usbdc_init+0x44>)
    8c8e:	4798      	blx	r3
	if (rc < 0) {
    8c90:	2800      	cmp	r0, #0
    8c92:	db0e      	blt.n	8cb2 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    8c94:	4c0a      	ldr	r4, [pc, #40]	; (8cc0 <usbdc_init+0x48>)
    8c96:	2220      	movs	r2, #32
    8c98:	2100      	movs	r1, #0
    8c9a:	4620      	mov	r0, r4
    8c9c:	4b09      	ldr	r3, [pc, #36]	; (8cc4 <usbdc_init+0x4c>)
    8c9e:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    8ca0:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    8ca2:	4909      	ldr	r1, [pc, #36]	; (8cc8 <usbdc_init+0x50>)
    8ca4:	2000      	movs	r0, #0
    8ca6:	4c09      	ldr	r4, [pc, #36]	; (8ccc <usbdc_init+0x54>)
    8ca8:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    8caa:	4909      	ldr	r1, [pc, #36]	; (8cd0 <usbdc_init+0x58>)
    8cac:	2001      	movs	r0, #1
    8cae:	47a0      	blx	r4

	return 0;
    8cb0:	2000      	movs	r0, #0
}
    8cb2:	bd38      	pop	{r3, r4, r5, pc}
    8cb4:	0000a868 	.word	0x0000a868
    8cb8:	000021e5 	.word	0x000021e5
    8cbc:	00001e99 	.word	0x00001e99
    8cc0:	20001248 	.word	0x20001248
    8cc4:	00009817 	.word	0x00009817
    8cc8:	000086f9 	.word	0x000086f9
    8ccc:	00001f01 	.word	0x00001f01
    8cd0:	000087e5 	.word	0x000087e5

00008cd4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    8cd4:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    8cd6:	4601      	mov	r1, r0
    8cd8:	4801      	ldr	r0, [pc, #4]	; (8ce0 <usbdc_register_function+0xc>)
    8cda:	4b02      	ldr	r3, [pc, #8]	; (8ce4 <usbdc_register_function+0x10>)
    8cdc:	4798      	blx	r3
    8cde:	bd08      	pop	{r3, pc}
    8ce0:	20001258 	.word	0x20001258
    8ce4:	00002241 	.word	0x00002241

00008ce8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    8ce8:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    8cea:	4b0a      	ldr	r3, [pc, #40]	; (8d14 <usbdc_start+0x2c>)
    8cec:	7e9b      	ldrb	r3, [r3, #26]
    8cee:	b95b      	cbnz	r3, 8d08 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    8cf0:	b168      	cbz	r0, 8d0e <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    8cf2:	4b08      	ldr	r3, [pc, #32]	; (8d14 <usbdc_start+0x2c>)
    8cf4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    8cf6:	6802      	ldr	r2, [r0, #0]
    8cf8:	79d2      	ldrb	r2, [r2, #7]
    8cfa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    8cfc:	2201      	movs	r2, #1
    8cfe:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    8d00:	4b05      	ldr	r3, [pc, #20]	; (8d18 <usbdc_start+0x30>)
    8d02:	4798      	blx	r3
	return ERR_NONE;
    8d04:	2000      	movs	r0, #0
    8d06:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    8d08:	f06f 0003 	mvn.w	r0, #3
    8d0c:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    8d0e:	f06f 0008 	mvn.w	r0, #8
}
    8d12:	bd08      	pop	{r3, pc}
    8d14:	20001248 	.word	0x20001248
    8d18:	00001f0d 	.word	0x00001f0d

00008d1c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    8d1c:	b508      	push	{r3, lr}
	usb_d_attach();
    8d1e:	4b01      	ldr	r3, [pc, #4]	; (8d24 <usbdc_attach+0x8>)
    8d20:	4798      	blx	r3
    8d22:	bd08      	pop	{r3, pc}
    8d24:	00001f19 	.word	0x00001f19

00008d28 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    8d28:	4b01      	ldr	r3, [pc, #4]	; (8d30 <usbdc_get_ctrl_buffer+0x8>)
    8d2a:	6958      	ldr	r0, [r3, #20]
    8d2c:	4770      	bx	lr
    8d2e:	bf00      	nop
    8d30:	20001248 	.word	0x20001248

00008d34 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    8d34:	4b03      	ldr	r3, [pc, #12]	; (8d44 <usbdc_get_state+0x10>)
    8d36:	7e98      	ldrb	r0, [r3, #26]
    8d38:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    8d3c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    8d3e:	bf18      	it	ne
    8d40:	2010      	movne	r0, #16
    8d42:	4770      	bx	lr
    8d44:	20001248 	.word	0x20001248

00008d48 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    8d48:	4288      	cmp	r0, r1
    8d4a:	d214      	bcs.n	8d76 <usb_find_desc+0x2e>
	return desc[0];
    8d4c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8d4e:	2b01      	cmp	r3, #1
    8d50:	d913      	bls.n	8d7a <usb_find_desc+0x32>
{
    8d52:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    8d54:	7844      	ldrb	r4, [r0, #1]
    8d56:	4294      	cmp	r4, r2
    8d58:	d00a      	beq.n	8d70 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    8d5a:	4418      	add	r0, r3
	while (desc < eof) {
    8d5c:	4281      	cmp	r1, r0
    8d5e:	d906      	bls.n	8d6e <usb_find_desc+0x26>
	return desc[0];
    8d60:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8d62:	2b01      	cmp	r3, #1
    8d64:	d90b      	bls.n	8d7e <usb_find_desc+0x36>
	return desc[1];
    8d66:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    8d68:	4294      	cmp	r4, r2
    8d6a:	d1f6      	bne.n	8d5a <usb_find_desc+0x12>
    8d6c:	e000      	b.n	8d70 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    8d6e:	2000      	movs	r0, #0
}
    8d70:	f85d 4b04 	ldr.w	r4, [sp], #4
    8d74:	4770      	bx	lr
	return NULL;
    8d76:	2000      	movs	r0, #0
    8d78:	4770      	bx	lr
		_desc_len_check();
    8d7a:	2000      	movs	r0, #0
    8d7c:	4770      	bx	lr
    8d7e:	2000      	movs	r0, #0
    8d80:	e7f6      	b.n	8d70 <usb_find_desc+0x28>

00008d82 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    8d82:	4288      	cmp	r0, r1
    8d84:	d216      	bcs.n	8db4 <usb_find_ep_desc+0x32>
	return desc[0];
    8d86:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8d88:	2b01      	cmp	r3, #1
    8d8a:	d915      	bls.n	8db8 <usb_find_ep_desc+0x36>
	return desc[1];
    8d8c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    8d8e:	2a04      	cmp	r2, #4
    8d90:	d014      	beq.n	8dbc <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    8d92:	2a05      	cmp	r2, #5
    8d94:	d00b      	beq.n	8dae <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    8d96:	4418      	add	r0, r3
	while (desc < eof) {
    8d98:	4281      	cmp	r1, r0
    8d9a:	d909      	bls.n	8db0 <usb_find_ep_desc+0x2e>
	return desc[0];
    8d9c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    8d9e:	2b01      	cmp	r3, #1
    8da0:	d90e      	bls.n	8dc0 <usb_find_ep_desc+0x3e>
	return desc[1];
    8da2:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    8da4:	2a04      	cmp	r2, #4
    8da6:	d00d      	beq.n	8dc4 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    8da8:	2a05      	cmp	r2, #5
    8daa:	d1f4      	bne.n	8d96 <usb_find_ep_desc+0x14>
    8dac:	e00b      	b.n	8dc6 <usb_find_ep_desc+0x44>
    8dae:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    8db0:	2000      	movs	r0, #0
    8db2:	4770      	bx	lr
    8db4:	2000      	movs	r0, #0
    8db6:	4770      	bx	lr
		_desc_len_check();
    8db8:	2000      	movs	r0, #0
    8dba:	4770      	bx	lr
	return NULL;
    8dbc:	2000      	movs	r0, #0
    8dbe:	4770      	bx	lr
		_desc_len_check();
    8dc0:	2000      	movs	r0, #0
    8dc2:	4770      	bx	lr
	return NULL;
    8dc4:	2000      	movs	r0, #0
}
    8dc6:	4770      	bx	lr

00008dc8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    8dc8:	b538      	push	{r3, r4, r5, lr}
    8dca:	460c      	mov	r4, r1
    8dcc:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    8dce:	2202      	movs	r2, #2
    8dd0:	4b16      	ldr	r3, [pc, #88]	; (8e2c <usb_find_cfg_desc+0x64>)
    8dd2:	4798      	blx	r3
	if (!desc) {
    8dd4:	4603      	mov	r3, r0
    8dd6:	b1e8      	cbz	r0, 8e14 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    8dd8:	4284      	cmp	r4, r0
    8dda:	d91d      	bls.n	8e18 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    8ddc:	7802      	ldrb	r2, [r0, #0]
    8dde:	2a01      	cmp	r2, #1
    8de0:	d91c      	bls.n	8e1c <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    8de2:	7842      	ldrb	r2, [r0, #1]
    8de4:	2a02      	cmp	r2, #2
    8de6:	d11b      	bne.n	8e20 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    8de8:	7942      	ldrb	r2, [r0, #5]
    8dea:	42aa      	cmp	r2, r5
    8dec:	d012      	beq.n	8e14 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    8dee:	78d9      	ldrb	r1, [r3, #3]
    8df0:	789a      	ldrb	r2, [r3, #2]
    8df2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    8df6:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    8dfa:	429c      	cmp	r4, r3
    8dfc:	d909      	bls.n	8e12 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    8dfe:	781a      	ldrb	r2, [r3, #0]
    8e00:	2a01      	cmp	r2, #1
    8e02:	d90f      	bls.n	8e24 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    8e04:	785a      	ldrb	r2, [r3, #1]
    8e06:	2a02      	cmp	r2, #2
    8e08:	d10e      	bne.n	8e28 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    8e0a:	795a      	ldrb	r2, [r3, #5]
    8e0c:	42aa      	cmp	r2, r5
    8e0e:	d1ee      	bne.n	8dee <usb_find_cfg_desc+0x26>
    8e10:	e000      	b.n	8e14 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    8e12:	2300      	movs	r3, #0
}
    8e14:	4618      	mov	r0, r3
    8e16:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    8e18:	2300      	movs	r3, #0
    8e1a:	e7fb      	b.n	8e14 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    8e1c:	2300      	movs	r3, #0
    8e1e:	e7f9      	b.n	8e14 <usb_find_cfg_desc+0x4c>
	return NULL;
    8e20:	2300      	movs	r3, #0
    8e22:	e7f7      	b.n	8e14 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    8e24:	2300      	movs	r3, #0
    8e26:	e7f5      	b.n	8e14 <usb_find_cfg_desc+0x4c>
	return NULL;
    8e28:	2300      	movs	r3, #0
    8e2a:	e7f3      	b.n	8e14 <usb_find_cfg_desc+0x4c>
    8e2c:	00008d49 	.word	0x00008d49

00008e30 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    8e30:	4288      	cmp	r0, r1
    8e32:	d217      	bcs.n	8e64 <usb_find_str_desc+0x34>
{
    8e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e38:	460d      	mov	r5, r1
    8e3a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    8e3c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    8e3e:	f04f 0803 	mov.w	r8, #3
    8e42:	4f0c      	ldr	r7, [pc, #48]	; (8e74 <usb_find_str_desc+0x44>)
    8e44:	4642      	mov	r2, r8
    8e46:	4629      	mov	r1, r5
    8e48:	47b8      	blx	r7
		if (desc) {
    8e4a:	4603      	mov	r3, r0
    8e4c:	b170      	cbz	r0, 8e6c <usb_find_str_desc+0x3c>
	return desc[0];
    8e4e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    8e50:	2801      	cmp	r0, #1
    8e52:	d90a      	bls.n	8e6a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    8e54:	42a6      	cmp	r6, r4
    8e56:	d009      	beq.n	8e6c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    8e58:	4418      	add	r0, r3
    8e5a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    8e5c:	4285      	cmp	r5, r0
    8e5e:	d8f1      	bhi.n	8e44 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    8e60:	2300      	movs	r3, #0
    8e62:	e003      	b.n	8e6c <usb_find_str_desc+0x3c>
    8e64:	2300      	movs	r3, #0
}
    8e66:	4618      	mov	r0, r3
    8e68:	4770      	bx	lr
			_desc_len_check();
    8e6a:	2300      	movs	r3, #0
}
    8e6c:	4618      	mov	r0, r3
    8e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e72:	bf00      	nop
    8e74:	00008d49 	.word	0x00008d49

00008e78 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    8e78:	4b3a      	ldr	r3, [pc, #232]	; (8f64 <hiddf_demo_sof_event+0xec>)
    8e7a:	791b      	ldrb	r3, [r3, #4]
    8e7c:	2b0a      	cmp	r3, #10
    8e7e:	d803      	bhi.n	8e88 <hiddf_demo_sof_event+0x10>
    8e80:	3301      	adds	r3, #1
    8e82:	4a38      	ldr	r2, [pc, #224]	; (8f64 <hiddf_demo_sof_event+0xec>)
    8e84:	7113      	strb	r3, [r2, #4]
    8e86:	4770      	bx	lr
{
    8e88:	b570      	push	{r4, r5, r6, lr}
    8e8a:	b084      	sub	sp, #16
		interval = 0;
    8e8c:	4b35      	ldr	r3, [pc, #212]	; (8f64 <hiddf_demo_sof_event+0xec>)
    8e8e:	2200      	movs	r2, #0
    8e90:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    8e92:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    8e94:	a801      	add	r0, sp, #4
    8e96:	4b34      	ldr	r3, [pc, #208]	; (8f68 <hiddf_demo_sof_event+0xf0>)
    8e98:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8e9a:	096b      	lsrs	r3, r5, #5
    8e9c:	4933      	ldr	r1, [pc, #204]	; (8f6c <hiddf_demo_sof_event+0xf4>)
    8e9e:	01db      	lsls	r3, r3, #7
    8ea0:	18ca      	adds	r2, r1, r3
    8ea2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8ea4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8ea6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8ea8:	405c      	eors	r4, r3
    8eaa:	400c      	ands	r4, r1
    8eac:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    8eae:	a801      	add	r0, sp, #4
    8eb0:	4b2f      	ldr	r3, [pc, #188]	; (8f70 <hiddf_demo_sof_event+0xf8>)
    8eb2:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    8eb4:	f005 051f 	and.w	r5, r5, #31
    8eb8:	2301      	movs	r3, #1
    8eba:	fa03 f505 	lsl.w	r5, r3, r5
    8ebe:	4225      	tst	r5, r4
    8ec0:	d040      	beq.n	8f44 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    8ec2:	4b28      	ldr	r3, [pc, #160]	; (8f64 <hiddf_demo_sof_event+0xec>)
    8ec4:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    8ec6:	a802      	add	r0, sp, #8
    8ec8:	4b27      	ldr	r3, [pc, #156]	; (8f68 <hiddf_demo_sof_event+0xf0>)
    8eca:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8ecc:	096b      	lsrs	r3, r5, #5
    8ece:	4927      	ldr	r1, [pc, #156]	; (8f6c <hiddf_demo_sof_event+0xf4>)
    8ed0:	01db      	lsls	r3, r3, #7
    8ed2:	18ca      	adds	r2, r1, r3
    8ed4:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8ed6:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8ed8:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8eda:	405c      	eors	r4, r3
    8edc:	400c      	ands	r4, r1
    8ede:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    8ee0:	a802      	add	r0, sp, #8
    8ee2:	4b23      	ldr	r3, [pc, #140]	; (8f70 <hiddf_demo_sof_event+0xf8>)
    8ee4:	4798      	blx	r3
    8ee6:	f005 051f 	and.w	r5, r5, #31
    8eea:	2301      	movs	r3, #1
    8eec:	fa03 f505 	lsl.w	r5, r3, r5
    8ef0:	4225      	tst	r5, r4
    8ef2:	d02d      	beq.n	8f50 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    8ef4:	4d1b      	ldr	r5, [pc, #108]	; (8f64 <hiddf_demo_sof_event+0xec>)
    8ef6:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    8ef8:	a803      	add	r0, sp, #12
    8efa:	4b1b      	ldr	r3, [pc, #108]	; (8f68 <hiddf_demo_sof_event+0xf0>)
    8efc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8efe:	0973      	lsrs	r3, r6, #5
    8f00:	491a      	ldr	r1, [pc, #104]	; (8f6c <hiddf_demo_sof_event+0xf4>)
    8f02:	01db      	lsls	r3, r3, #7
    8f04:	18ca      	adds	r2, r1, r3
    8f06:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8f08:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8f0a:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8f0c:	405c      	eors	r4, r3
    8f0e:	400c      	ands	r4, r1
    8f10:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    8f12:	a803      	add	r0, sp, #12
    8f14:	4b16      	ldr	r3, [pc, #88]	; (8f70 <hiddf_demo_sof_event+0xf8>)
    8f16:	4798      	blx	r3
    8f18:	f006 061f 	and.w	r6, r6, #31
    8f1c:	2301      	movs	r3, #1
    8f1e:	40b3      	lsls	r3, r6
    8f20:	401c      	ands	r4, r3
    8f22:	bf0c      	ite	eq
    8f24:	2301      	moveq	r3, #1
    8f26:	2300      	movne	r3, #0
    8f28:	7d2a      	ldrb	r2, [r5, #20]
    8f2a:	429a      	cmp	r2, r3
    8f2c:	d008      	beq.n	8f40 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    8f2e:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    8f30:	b19c      	cbz	r4, 8f5a <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    8f32:	2200      	movs	r2, #0
    8f34:	4b0f      	ldr	r3, [pc, #60]	; (8f74 <hiddf_demo_sof_event+0xfc>)
    8f36:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    8f38:	2101      	movs	r1, #1
    8f3a:	480e      	ldr	r0, [pc, #56]	; (8f74 <hiddf_demo_sof_event+0xfc>)
    8f3c:	4b0e      	ldr	r3, [pc, #56]	; (8f78 <hiddf_demo_sof_event+0x100>)
    8f3e:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    8f40:	b004      	add	sp, #16
    8f42:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    8f44:	4619      	mov	r1, r3
    8f46:	f06f 0004 	mvn.w	r0, #4
    8f4a:	4b0c      	ldr	r3, [pc, #48]	; (8f7c <hiddf_demo_sof_event+0x104>)
    8f4c:	4798      	blx	r3
    8f4e:	e7b8      	b.n	8ec2 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    8f50:	4619      	mov	r1, r3
    8f52:	2005      	movs	r0, #5
    8f54:	4b09      	ldr	r3, [pc, #36]	; (8f7c <hiddf_demo_sof_event+0x104>)
    8f56:	4798      	blx	r3
    8f58:	e7cc      	b.n	8ef4 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    8f5a:	2201      	movs	r2, #1
    8f5c:	4b05      	ldr	r3, [pc, #20]	; (8f74 <hiddf_demo_sof_event+0xfc>)
    8f5e:	709a      	strb	r2, [r3, #2]
    8f60:	e7ea      	b.n	8f38 <hiddf_demo_sof_event+0xc0>
    8f62:	bf00      	nop
    8f64:	20001268 	.word	0x20001268
    8f68:	000012b5 	.word	0x000012b5
    8f6c:	41008000 	.word	0x41008000
    8f70:	000012c3 	.word	0x000012c3
    8f74:	2000036c 	.word	0x2000036c
    8f78:	0000811d 	.word	0x0000811d
    8f7c:	000083b1 	.word	0x000083b1

00008f80 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    8f80:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    8f82:	4805      	ldr	r0, [pc, #20]	; (8f98 <composite_device_init+0x18>)
    8f84:	4b05      	ldr	r3, [pc, #20]	; (8f9c <composite_device_init+0x1c>)
    8f86:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    8f88:	4b05      	ldr	r3, [pc, #20]	; (8fa0 <composite_device_init+0x20>)
    8f8a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    8f8c:	4b05      	ldr	r3, [pc, #20]	; (8fa4 <composite_device_init+0x24>)
    8f8e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    8f90:	4b05      	ldr	r3, [pc, #20]	; (8fa8 <composite_device_init+0x28>)
    8f92:	4798      	blx	r3
    8f94:	bd08      	pop	{r3, pc}
    8f96:	bf00      	nop
    8f98:	20001280 	.word	0x20001280
    8f9c:	00008c79 	.word	0x00008c79
    8fa0:	00007e99 	.word	0x00007e99
    8fa4:	0000836d 	.word	0x0000836d
    8fa8:	000080d9 	.word	0x000080d9

00008fac <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    8fac:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    8fae:	4803      	ldr	r0, [pc, #12]	; (8fbc <composite_device_start+0x10>)
    8fb0:	4b03      	ldr	r3, [pc, #12]	; (8fc0 <composite_device_start+0x14>)
    8fb2:	4798      	blx	r3
	usbdc_attach();
    8fb4:	4b03      	ldr	r3, [pc, #12]	; (8fc4 <composite_device_start+0x18>)
    8fb6:	4798      	blx	r3
    8fb8:	bd08      	pop	{r3, pc}
    8fba:	bf00      	nop
    8fbc:	20000378 	.word	0x20000378
    8fc0:	00008ce9 	.word	0x00008ce9
    8fc4:	00008d1d 	.word	0x00008d1d

00008fc8 <usb_init>:
		}
	}
}

void usb_init(void)
{
    8fc8:	b508      	push	{r3, lr}

	composite_device_init();
    8fca:	4b01      	ldr	r3, [pc, #4]	; (8fd0 <usb_init+0x8>)
    8fcc:	4798      	blx	r3
    8fce:	bd08      	pop	{r3, pc}
    8fd0:	00008f81 	.word	0x00008f81

00008fd4 <__aeabi_drsub>:
    8fd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8fd8:	e002      	b.n	8fe0 <__adddf3>
    8fda:	bf00      	nop

00008fdc <__aeabi_dsub>:
    8fdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008fe0 <__adddf3>:
    8fe0:	b530      	push	{r4, r5, lr}
    8fe2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8fe6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8fea:	ea94 0f05 	teq	r4, r5
    8fee:	bf08      	it	eq
    8ff0:	ea90 0f02 	teqeq	r0, r2
    8ff4:	bf1f      	itttt	ne
    8ff6:	ea54 0c00 	orrsne.w	ip, r4, r0
    8ffa:	ea55 0c02 	orrsne.w	ip, r5, r2
    8ffe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    9002:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    9006:	f000 80e2 	beq.w	91ce <__adddf3+0x1ee>
    900a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    900e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    9012:	bfb8      	it	lt
    9014:	426d      	neglt	r5, r5
    9016:	dd0c      	ble.n	9032 <__adddf3+0x52>
    9018:	442c      	add	r4, r5
    901a:	ea80 0202 	eor.w	r2, r0, r2
    901e:	ea81 0303 	eor.w	r3, r1, r3
    9022:	ea82 0000 	eor.w	r0, r2, r0
    9026:	ea83 0101 	eor.w	r1, r3, r1
    902a:	ea80 0202 	eor.w	r2, r0, r2
    902e:	ea81 0303 	eor.w	r3, r1, r3
    9032:	2d36      	cmp	r5, #54	; 0x36
    9034:	bf88      	it	hi
    9036:	bd30      	pophi	{r4, r5, pc}
    9038:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    903c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    9040:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    9044:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    9048:	d002      	beq.n	9050 <__adddf3+0x70>
    904a:	4240      	negs	r0, r0
    904c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9050:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    9054:	ea4f 3303 	mov.w	r3, r3, lsl #12
    9058:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    905c:	d002      	beq.n	9064 <__adddf3+0x84>
    905e:	4252      	negs	r2, r2
    9060:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    9064:	ea94 0f05 	teq	r4, r5
    9068:	f000 80a7 	beq.w	91ba <__adddf3+0x1da>
    906c:	f1a4 0401 	sub.w	r4, r4, #1
    9070:	f1d5 0e20 	rsbs	lr, r5, #32
    9074:	db0d      	blt.n	9092 <__adddf3+0xb2>
    9076:	fa02 fc0e 	lsl.w	ip, r2, lr
    907a:	fa22 f205 	lsr.w	r2, r2, r5
    907e:	1880      	adds	r0, r0, r2
    9080:	f141 0100 	adc.w	r1, r1, #0
    9084:	fa03 f20e 	lsl.w	r2, r3, lr
    9088:	1880      	adds	r0, r0, r2
    908a:	fa43 f305 	asr.w	r3, r3, r5
    908e:	4159      	adcs	r1, r3
    9090:	e00e      	b.n	90b0 <__adddf3+0xd0>
    9092:	f1a5 0520 	sub.w	r5, r5, #32
    9096:	f10e 0e20 	add.w	lr, lr, #32
    909a:	2a01      	cmp	r2, #1
    909c:	fa03 fc0e 	lsl.w	ip, r3, lr
    90a0:	bf28      	it	cs
    90a2:	f04c 0c02 	orrcs.w	ip, ip, #2
    90a6:	fa43 f305 	asr.w	r3, r3, r5
    90aa:	18c0      	adds	r0, r0, r3
    90ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    90b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    90b4:	d507      	bpl.n	90c6 <__adddf3+0xe6>
    90b6:	f04f 0e00 	mov.w	lr, #0
    90ba:	f1dc 0c00 	rsbs	ip, ip, #0
    90be:	eb7e 0000 	sbcs.w	r0, lr, r0
    90c2:	eb6e 0101 	sbc.w	r1, lr, r1
    90c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    90ca:	d31b      	bcc.n	9104 <__adddf3+0x124>
    90cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    90d0:	d30c      	bcc.n	90ec <__adddf3+0x10c>
    90d2:	0849      	lsrs	r1, r1, #1
    90d4:	ea5f 0030 	movs.w	r0, r0, rrx
    90d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    90dc:	f104 0401 	add.w	r4, r4, #1
    90e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    90e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    90e8:	f080 809a 	bcs.w	9220 <__adddf3+0x240>
    90ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    90f0:	bf08      	it	eq
    90f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    90f6:	f150 0000 	adcs.w	r0, r0, #0
    90fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    90fe:	ea41 0105 	orr.w	r1, r1, r5
    9102:	bd30      	pop	{r4, r5, pc}
    9104:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    9108:	4140      	adcs	r0, r0
    910a:	eb41 0101 	adc.w	r1, r1, r1
    910e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9112:	f1a4 0401 	sub.w	r4, r4, #1
    9116:	d1e9      	bne.n	90ec <__adddf3+0x10c>
    9118:	f091 0f00 	teq	r1, #0
    911c:	bf04      	itt	eq
    911e:	4601      	moveq	r1, r0
    9120:	2000      	moveq	r0, #0
    9122:	fab1 f381 	clz	r3, r1
    9126:	bf08      	it	eq
    9128:	3320      	addeq	r3, #32
    912a:	f1a3 030b 	sub.w	r3, r3, #11
    912e:	f1b3 0220 	subs.w	r2, r3, #32
    9132:	da0c      	bge.n	914e <__adddf3+0x16e>
    9134:	320c      	adds	r2, #12
    9136:	dd08      	ble.n	914a <__adddf3+0x16a>
    9138:	f102 0c14 	add.w	ip, r2, #20
    913c:	f1c2 020c 	rsb	r2, r2, #12
    9140:	fa01 f00c 	lsl.w	r0, r1, ip
    9144:	fa21 f102 	lsr.w	r1, r1, r2
    9148:	e00c      	b.n	9164 <__adddf3+0x184>
    914a:	f102 0214 	add.w	r2, r2, #20
    914e:	bfd8      	it	le
    9150:	f1c2 0c20 	rsble	ip, r2, #32
    9154:	fa01 f102 	lsl.w	r1, r1, r2
    9158:	fa20 fc0c 	lsr.w	ip, r0, ip
    915c:	bfdc      	itt	le
    915e:	ea41 010c 	orrle.w	r1, r1, ip
    9162:	4090      	lslle	r0, r2
    9164:	1ae4      	subs	r4, r4, r3
    9166:	bfa2      	ittt	ge
    9168:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    916c:	4329      	orrge	r1, r5
    916e:	bd30      	popge	{r4, r5, pc}
    9170:	ea6f 0404 	mvn.w	r4, r4
    9174:	3c1f      	subs	r4, #31
    9176:	da1c      	bge.n	91b2 <__adddf3+0x1d2>
    9178:	340c      	adds	r4, #12
    917a:	dc0e      	bgt.n	919a <__adddf3+0x1ba>
    917c:	f104 0414 	add.w	r4, r4, #20
    9180:	f1c4 0220 	rsb	r2, r4, #32
    9184:	fa20 f004 	lsr.w	r0, r0, r4
    9188:	fa01 f302 	lsl.w	r3, r1, r2
    918c:	ea40 0003 	orr.w	r0, r0, r3
    9190:	fa21 f304 	lsr.w	r3, r1, r4
    9194:	ea45 0103 	orr.w	r1, r5, r3
    9198:	bd30      	pop	{r4, r5, pc}
    919a:	f1c4 040c 	rsb	r4, r4, #12
    919e:	f1c4 0220 	rsb	r2, r4, #32
    91a2:	fa20 f002 	lsr.w	r0, r0, r2
    91a6:	fa01 f304 	lsl.w	r3, r1, r4
    91aa:	ea40 0003 	orr.w	r0, r0, r3
    91ae:	4629      	mov	r1, r5
    91b0:	bd30      	pop	{r4, r5, pc}
    91b2:	fa21 f004 	lsr.w	r0, r1, r4
    91b6:	4629      	mov	r1, r5
    91b8:	bd30      	pop	{r4, r5, pc}
    91ba:	f094 0f00 	teq	r4, #0
    91be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    91c2:	bf06      	itte	eq
    91c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    91c8:	3401      	addeq	r4, #1
    91ca:	3d01      	subne	r5, #1
    91cc:	e74e      	b.n	906c <__adddf3+0x8c>
    91ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    91d2:	bf18      	it	ne
    91d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    91d8:	d029      	beq.n	922e <__adddf3+0x24e>
    91da:	ea94 0f05 	teq	r4, r5
    91de:	bf08      	it	eq
    91e0:	ea90 0f02 	teqeq	r0, r2
    91e4:	d005      	beq.n	91f2 <__adddf3+0x212>
    91e6:	ea54 0c00 	orrs.w	ip, r4, r0
    91ea:	bf04      	itt	eq
    91ec:	4619      	moveq	r1, r3
    91ee:	4610      	moveq	r0, r2
    91f0:	bd30      	pop	{r4, r5, pc}
    91f2:	ea91 0f03 	teq	r1, r3
    91f6:	bf1e      	ittt	ne
    91f8:	2100      	movne	r1, #0
    91fa:	2000      	movne	r0, #0
    91fc:	bd30      	popne	{r4, r5, pc}
    91fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    9202:	d105      	bne.n	9210 <__adddf3+0x230>
    9204:	0040      	lsls	r0, r0, #1
    9206:	4149      	adcs	r1, r1
    9208:	bf28      	it	cs
    920a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    920e:	bd30      	pop	{r4, r5, pc}
    9210:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    9214:	bf3c      	itt	cc
    9216:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    921a:	bd30      	popcc	{r4, r5, pc}
    921c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9220:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    9224:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9228:	f04f 0000 	mov.w	r0, #0
    922c:	bd30      	pop	{r4, r5, pc}
    922e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    9232:	bf1a      	itte	ne
    9234:	4619      	movne	r1, r3
    9236:	4610      	movne	r0, r2
    9238:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    923c:	bf1c      	itt	ne
    923e:	460b      	movne	r3, r1
    9240:	4602      	movne	r2, r0
    9242:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    9246:	bf06      	itte	eq
    9248:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    924c:	ea91 0f03 	teqeq	r1, r3
    9250:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    9254:	bd30      	pop	{r4, r5, pc}
    9256:	bf00      	nop

00009258 <__aeabi_ui2d>:
    9258:	f090 0f00 	teq	r0, #0
    925c:	bf04      	itt	eq
    925e:	2100      	moveq	r1, #0
    9260:	4770      	bxeq	lr
    9262:	b530      	push	{r4, r5, lr}
    9264:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9268:	f104 0432 	add.w	r4, r4, #50	; 0x32
    926c:	f04f 0500 	mov.w	r5, #0
    9270:	f04f 0100 	mov.w	r1, #0
    9274:	e750      	b.n	9118 <__adddf3+0x138>
    9276:	bf00      	nop

00009278 <__aeabi_i2d>:
    9278:	f090 0f00 	teq	r0, #0
    927c:	bf04      	itt	eq
    927e:	2100      	moveq	r1, #0
    9280:	4770      	bxeq	lr
    9282:	b530      	push	{r4, r5, lr}
    9284:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9288:	f104 0432 	add.w	r4, r4, #50	; 0x32
    928c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    9290:	bf48      	it	mi
    9292:	4240      	negmi	r0, r0
    9294:	f04f 0100 	mov.w	r1, #0
    9298:	e73e      	b.n	9118 <__adddf3+0x138>
    929a:	bf00      	nop

0000929c <__aeabi_f2d>:
    929c:	0042      	lsls	r2, r0, #1
    929e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    92a2:	ea4f 0131 	mov.w	r1, r1, rrx
    92a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    92aa:	bf1f      	itttt	ne
    92ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    92b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    92b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    92b8:	4770      	bxne	lr
    92ba:	f092 0f00 	teq	r2, #0
    92be:	bf14      	ite	ne
    92c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    92c4:	4770      	bxeq	lr
    92c6:	b530      	push	{r4, r5, lr}
    92c8:	f44f 7460 	mov.w	r4, #896	; 0x380
    92cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    92d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    92d4:	e720      	b.n	9118 <__adddf3+0x138>
    92d6:	bf00      	nop

000092d8 <__aeabi_ul2d>:
    92d8:	ea50 0201 	orrs.w	r2, r0, r1
    92dc:	bf08      	it	eq
    92de:	4770      	bxeq	lr
    92e0:	b530      	push	{r4, r5, lr}
    92e2:	f04f 0500 	mov.w	r5, #0
    92e6:	e00a      	b.n	92fe <__aeabi_l2d+0x16>

000092e8 <__aeabi_l2d>:
    92e8:	ea50 0201 	orrs.w	r2, r0, r1
    92ec:	bf08      	it	eq
    92ee:	4770      	bxeq	lr
    92f0:	b530      	push	{r4, r5, lr}
    92f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    92f6:	d502      	bpl.n	92fe <__aeabi_l2d+0x16>
    92f8:	4240      	negs	r0, r0
    92fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    92fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9302:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9306:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    930a:	f43f aedc 	beq.w	90c6 <__adddf3+0xe6>
    930e:	f04f 0203 	mov.w	r2, #3
    9312:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    9316:	bf18      	it	ne
    9318:	3203      	addne	r2, #3
    931a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    931e:	bf18      	it	ne
    9320:	3203      	addne	r2, #3
    9322:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    9326:	f1c2 0320 	rsb	r3, r2, #32
    932a:	fa00 fc03 	lsl.w	ip, r0, r3
    932e:	fa20 f002 	lsr.w	r0, r0, r2
    9332:	fa01 fe03 	lsl.w	lr, r1, r3
    9336:	ea40 000e 	orr.w	r0, r0, lr
    933a:	fa21 f102 	lsr.w	r1, r1, r2
    933e:	4414      	add	r4, r2
    9340:	e6c1      	b.n	90c6 <__adddf3+0xe6>
    9342:	bf00      	nop

00009344 <__aeabi_dmul>:
    9344:	b570      	push	{r4, r5, r6, lr}
    9346:	f04f 0cff 	mov.w	ip, #255	; 0xff
    934a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    934e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    9352:	bf1d      	ittte	ne
    9354:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    9358:	ea94 0f0c 	teqne	r4, ip
    935c:	ea95 0f0c 	teqne	r5, ip
    9360:	f000 f8de 	bleq	9520 <__aeabi_dmul+0x1dc>
    9364:	442c      	add	r4, r5
    9366:	ea81 0603 	eor.w	r6, r1, r3
    936a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    936e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    9372:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    9376:	bf18      	it	ne
    9378:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    937c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9384:	d038      	beq.n	93f8 <__aeabi_dmul+0xb4>
    9386:	fba0 ce02 	umull	ip, lr, r0, r2
    938a:	f04f 0500 	mov.w	r5, #0
    938e:	fbe1 e502 	umlal	lr, r5, r1, r2
    9392:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    9396:	fbe0 e503 	umlal	lr, r5, r0, r3
    939a:	f04f 0600 	mov.w	r6, #0
    939e:	fbe1 5603 	umlal	r5, r6, r1, r3
    93a2:	f09c 0f00 	teq	ip, #0
    93a6:	bf18      	it	ne
    93a8:	f04e 0e01 	orrne.w	lr, lr, #1
    93ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    93b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    93b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    93b8:	d204      	bcs.n	93c4 <__aeabi_dmul+0x80>
    93ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    93be:	416d      	adcs	r5, r5
    93c0:	eb46 0606 	adc.w	r6, r6, r6
    93c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    93c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    93cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    93d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    93d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    93d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    93dc:	bf88      	it	hi
    93de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    93e2:	d81e      	bhi.n	9422 <__aeabi_dmul+0xde>
    93e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    93e8:	bf08      	it	eq
    93ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    93ee:	f150 0000 	adcs.w	r0, r0, #0
    93f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    93f6:	bd70      	pop	{r4, r5, r6, pc}
    93f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    93fc:	ea46 0101 	orr.w	r1, r6, r1
    9400:	ea40 0002 	orr.w	r0, r0, r2
    9404:	ea81 0103 	eor.w	r1, r1, r3
    9408:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    940c:	bfc2      	ittt	gt
    940e:	ebd4 050c 	rsbsgt	r5, r4, ip
    9412:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    9416:	bd70      	popgt	{r4, r5, r6, pc}
    9418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    941c:	f04f 0e00 	mov.w	lr, #0
    9420:	3c01      	subs	r4, #1
    9422:	f300 80ab 	bgt.w	957c <__aeabi_dmul+0x238>
    9426:	f114 0f36 	cmn.w	r4, #54	; 0x36
    942a:	bfde      	ittt	le
    942c:	2000      	movle	r0, #0
    942e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    9432:	bd70      	pople	{r4, r5, r6, pc}
    9434:	f1c4 0400 	rsb	r4, r4, #0
    9438:	3c20      	subs	r4, #32
    943a:	da35      	bge.n	94a8 <__aeabi_dmul+0x164>
    943c:	340c      	adds	r4, #12
    943e:	dc1b      	bgt.n	9478 <__aeabi_dmul+0x134>
    9440:	f104 0414 	add.w	r4, r4, #20
    9444:	f1c4 0520 	rsb	r5, r4, #32
    9448:	fa00 f305 	lsl.w	r3, r0, r5
    944c:	fa20 f004 	lsr.w	r0, r0, r4
    9450:	fa01 f205 	lsl.w	r2, r1, r5
    9454:	ea40 0002 	orr.w	r0, r0, r2
    9458:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    945c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9460:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    9464:	fa21 f604 	lsr.w	r6, r1, r4
    9468:	eb42 0106 	adc.w	r1, r2, r6
    946c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9470:	bf08      	it	eq
    9472:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9476:	bd70      	pop	{r4, r5, r6, pc}
    9478:	f1c4 040c 	rsb	r4, r4, #12
    947c:	f1c4 0520 	rsb	r5, r4, #32
    9480:	fa00 f304 	lsl.w	r3, r0, r4
    9484:	fa20 f005 	lsr.w	r0, r0, r5
    9488:	fa01 f204 	lsl.w	r2, r1, r4
    948c:	ea40 0002 	orr.w	r0, r0, r2
    9490:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9494:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    9498:	f141 0100 	adc.w	r1, r1, #0
    949c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    94a0:	bf08      	it	eq
    94a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    94a6:	bd70      	pop	{r4, r5, r6, pc}
    94a8:	f1c4 0520 	rsb	r5, r4, #32
    94ac:	fa00 f205 	lsl.w	r2, r0, r5
    94b0:	ea4e 0e02 	orr.w	lr, lr, r2
    94b4:	fa20 f304 	lsr.w	r3, r0, r4
    94b8:	fa01 f205 	lsl.w	r2, r1, r5
    94bc:	ea43 0302 	orr.w	r3, r3, r2
    94c0:	fa21 f004 	lsr.w	r0, r1, r4
    94c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    94c8:	fa21 f204 	lsr.w	r2, r1, r4
    94cc:	ea20 0002 	bic.w	r0, r0, r2
    94d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    94d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    94d8:	bf08      	it	eq
    94da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    94de:	bd70      	pop	{r4, r5, r6, pc}
    94e0:	f094 0f00 	teq	r4, #0
    94e4:	d10f      	bne.n	9506 <__aeabi_dmul+0x1c2>
    94e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    94ea:	0040      	lsls	r0, r0, #1
    94ec:	eb41 0101 	adc.w	r1, r1, r1
    94f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    94f4:	bf08      	it	eq
    94f6:	3c01      	subeq	r4, #1
    94f8:	d0f7      	beq.n	94ea <__aeabi_dmul+0x1a6>
    94fa:	ea41 0106 	orr.w	r1, r1, r6
    94fe:	f095 0f00 	teq	r5, #0
    9502:	bf18      	it	ne
    9504:	4770      	bxne	lr
    9506:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    950a:	0052      	lsls	r2, r2, #1
    950c:	eb43 0303 	adc.w	r3, r3, r3
    9510:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    9514:	bf08      	it	eq
    9516:	3d01      	subeq	r5, #1
    9518:	d0f7      	beq.n	950a <__aeabi_dmul+0x1c6>
    951a:	ea43 0306 	orr.w	r3, r3, r6
    951e:	4770      	bx	lr
    9520:	ea94 0f0c 	teq	r4, ip
    9524:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    9528:	bf18      	it	ne
    952a:	ea95 0f0c 	teqne	r5, ip
    952e:	d00c      	beq.n	954a <__aeabi_dmul+0x206>
    9530:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    9534:	bf18      	it	ne
    9536:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    953a:	d1d1      	bne.n	94e0 <__aeabi_dmul+0x19c>
    953c:	ea81 0103 	eor.w	r1, r1, r3
    9540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9544:	f04f 0000 	mov.w	r0, #0
    9548:	bd70      	pop	{r4, r5, r6, pc}
    954a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    954e:	bf06      	itte	eq
    9550:	4610      	moveq	r0, r2
    9552:	4619      	moveq	r1, r3
    9554:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    9558:	d019      	beq.n	958e <__aeabi_dmul+0x24a>
    955a:	ea94 0f0c 	teq	r4, ip
    955e:	d102      	bne.n	9566 <__aeabi_dmul+0x222>
    9560:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    9564:	d113      	bne.n	958e <__aeabi_dmul+0x24a>
    9566:	ea95 0f0c 	teq	r5, ip
    956a:	d105      	bne.n	9578 <__aeabi_dmul+0x234>
    956c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    9570:	bf1c      	itt	ne
    9572:	4610      	movne	r0, r2
    9574:	4619      	movne	r1, r3
    9576:	d10a      	bne.n	958e <__aeabi_dmul+0x24a>
    9578:	ea81 0103 	eor.w	r1, r1, r3
    957c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9580:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    9584:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9588:	f04f 0000 	mov.w	r0, #0
    958c:	bd70      	pop	{r4, r5, r6, pc}
    958e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    9592:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    9596:	bd70      	pop	{r4, r5, r6, pc}

00009598 <__aeabi_ddiv>:
    9598:	b570      	push	{r4, r5, r6, lr}
    959a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    959e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    95a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    95a6:	bf1d      	ittte	ne
    95a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    95ac:	ea94 0f0c 	teqne	r4, ip
    95b0:	ea95 0f0c 	teqne	r5, ip
    95b4:	f000 f8a7 	bleq	9706 <__aeabi_ddiv+0x16e>
    95b8:	eba4 0405 	sub.w	r4, r4, r5
    95bc:	ea81 0e03 	eor.w	lr, r1, r3
    95c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    95c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    95c8:	f000 8088 	beq.w	96dc <__aeabi_ddiv+0x144>
    95cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    95d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    95d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    95d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    95dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
    95e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    95e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    95e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    95ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    95f0:	429d      	cmp	r5, r3
    95f2:	bf08      	it	eq
    95f4:	4296      	cmpeq	r6, r2
    95f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    95fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
    95fe:	d202      	bcs.n	9606 <__aeabi_ddiv+0x6e>
    9600:	085b      	lsrs	r3, r3, #1
    9602:	ea4f 0232 	mov.w	r2, r2, rrx
    9606:	1ab6      	subs	r6, r6, r2
    9608:	eb65 0503 	sbc.w	r5, r5, r3
    960c:	085b      	lsrs	r3, r3, #1
    960e:	ea4f 0232 	mov.w	r2, r2, rrx
    9612:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    9616:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    961a:	ebb6 0e02 	subs.w	lr, r6, r2
    961e:	eb75 0e03 	sbcs.w	lr, r5, r3
    9622:	bf22      	ittt	cs
    9624:	1ab6      	subcs	r6, r6, r2
    9626:	4675      	movcs	r5, lr
    9628:	ea40 000c 	orrcs.w	r0, r0, ip
    962c:	085b      	lsrs	r3, r3, #1
    962e:	ea4f 0232 	mov.w	r2, r2, rrx
    9632:	ebb6 0e02 	subs.w	lr, r6, r2
    9636:	eb75 0e03 	sbcs.w	lr, r5, r3
    963a:	bf22      	ittt	cs
    963c:	1ab6      	subcs	r6, r6, r2
    963e:	4675      	movcs	r5, lr
    9640:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    9644:	085b      	lsrs	r3, r3, #1
    9646:	ea4f 0232 	mov.w	r2, r2, rrx
    964a:	ebb6 0e02 	subs.w	lr, r6, r2
    964e:	eb75 0e03 	sbcs.w	lr, r5, r3
    9652:	bf22      	ittt	cs
    9654:	1ab6      	subcs	r6, r6, r2
    9656:	4675      	movcs	r5, lr
    9658:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    965c:	085b      	lsrs	r3, r3, #1
    965e:	ea4f 0232 	mov.w	r2, r2, rrx
    9662:	ebb6 0e02 	subs.w	lr, r6, r2
    9666:	eb75 0e03 	sbcs.w	lr, r5, r3
    966a:	bf22      	ittt	cs
    966c:	1ab6      	subcs	r6, r6, r2
    966e:	4675      	movcs	r5, lr
    9670:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    9674:	ea55 0e06 	orrs.w	lr, r5, r6
    9678:	d018      	beq.n	96ac <__aeabi_ddiv+0x114>
    967a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    967e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    9682:	ea4f 1606 	mov.w	r6, r6, lsl #4
    9686:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    968a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    968e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    9692:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    9696:	d1c0      	bne.n	961a <__aeabi_ddiv+0x82>
    9698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    969c:	d10b      	bne.n	96b6 <__aeabi_ddiv+0x11e>
    969e:	ea41 0100 	orr.w	r1, r1, r0
    96a2:	f04f 0000 	mov.w	r0, #0
    96a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    96aa:	e7b6      	b.n	961a <__aeabi_ddiv+0x82>
    96ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    96b0:	bf04      	itt	eq
    96b2:	4301      	orreq	r1, r0
    96b4:	2000      	moveq	r0, #0
    96b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    96ba:	bf88      	it	hi
    96bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    96c0:	f63f aeaf 	bhi.w	9422 <__aeabi_dmul+0xde>
    96c4:	ebb5 0c03 	subs.w	ip, r5, r3
    96c8:	bf04      	itt	eq
    96ca:	ebb6 0c02 	subseq.w	ip, r6, r2
    96ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    96d2:	f150 0000 	adcs.w	r0, r0, #0
    96d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    96da:	bd70      	pop	{r4, r5, r6, pc}
    96dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    96e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    96e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    96e8:	bfc2      	ittt	gt
    96ea:	ebd4 050c 	rsbsgt	r5, r4, ip
    96ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    96f2:	bd70      	popgt	{r4, r5, r6, pc}
    96f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    96f8:	f04f 0e00 	mov.w	lr, #0
    96fc:	3c01      	subs	r4, #1
    96fe:	e690      	b.n	9422 <__aeabi_dmul+0xde>
    9700:	ea45 0e06 	orr.w	lr, r5, r6
    9704:	e68d      	b.n	9422 <__aeabi_dmul+0xde>
    9706:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    970a:	ea94 0f0c 	teq	r4, ip
    970e:	bf08      	it	eq
    9710:	ea95 0f0c 	teqeq	r5, ip
    9714:	f43f af3b 	beq.w	958e <__aeabi_dmul+0x24a>
    9718:	ea94 0f0c 	teq	r4, ip
    971c:	d10a      	bne.n	9734 <__aeabi_ddiv+0x19c>
    971e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    9722:	f47f af34 	bne.w	958e <__aeabi_dmul+0x24a>
    9726:	ea95 0f0c 	teq	r5, ip
    972a:	f47f af25 	bne.w	9578 <__aeabi_dmul+0x234>
    972e:	4610      	mov	r0, r2
    9730:	4619      	mov	r1, r3
    9732:	e72c      	b.n	958e <__aeabi_dmul+0x24a>
    9734:	ea95 0f0c 	teq	r5, ip
    9738:	d106      	bne.n	9748 <__aeabi_ddiv+0x1b0>
    973a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    973e:	f43f aefd 	beq.w	953c <__aeabi_dmul+0x1f8>
    9742:	4610      	mov	r0, r2
    9744:	4619      	mov	r1, r3
    9746:	e722      	b.n	958e <__aeabi_dmul+0x24a>
    9748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    974c:	bf18      	it	ne
    974e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    9752:	f47f aec5 	bne.w	94e0 <__aeabi_dmul+0x19c>
    9756:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    975a:	f47f af0d 	bne.w	9578 <__aeabi_dmul+0x234>
    975e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    9762:	f47f aeeb 	bne.w	953c <__aeabi_dmul+0x1f8>
    9766:	e712      	b.n	958e <__aeabi_dmul+0x24a>

00009768 <__aeabi_d2uiz>:
    9768:	004a      	lsls	r2, r1, #1
    976a:	d211      	bcs.n	9790 <__aeabi_d2uiz+0x28>
    976c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9770:	d211      	bcs.n	9796 <__aeabi_d2uiz+0x2e>
    9772:	d50d      	bpl.n	9790 <__aeabi_d2uiz+0x28>
    9774:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9778:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    977c:	d40e      	bmi.n	979c <__aeabi_d2uiz+0x34>
    977e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    9782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9786:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    978a:	fa23 f002 	lsr.w	r0, r3, r2
    978e:	4770      	bx	lr
    9790:	f04f 0000 	mov.w	r0, #0
    9794:	4770      	bx	lr
    9796:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    979a:	d102      	bne.n	97a2 <__aeabi_d2uiz+0x3a>
    979c:	f04f 30ff 	mov.w	r0, #4294967295
    97a0:	4770      	bx	lr
    97a2:	f04f 0000 	mov.w	r0, #0
    97a6:	4770      	bx	lr

000097a8 <__libc_init_array>:
    97a8:	b570      	push	{r4, r5, r6, lr}
    97aa:	4e0d      	ldr	r6, [pc, #52]	; (97e0 <__libc_init_array+0x38>)
    97ac:	4c0d      	ldr	r4, [pc, #52]	; (97e4 <__libc_init_array+0x3c>)
    97ae:	1ba4      	subs	r4, r4, r6
    97b0:	10a4      	asrs	r4, r4, #2
    97b2:	2500      	movs	r5, #0
    97b4:	42a5      	cmp	r5, r4
    97b6:	d109      	bne.n	97cc <__libc_init_array+0x24>
    97b8:	4e0b      	ldr	r6, [pc, #44]	; (97e8 <__libc_init_array+0x40>)
    97ba:	4c0c      	ldr	r4, [pc, #48]	; (97ec <__libc_init_array+0x44>)
    97bc:	f001 f8aa 	bl	a914 <_init>
    97c0:	1ba4      	subs	r4, r4, r6
    97c2:	10a4      	asrs	r4, r4, #2
    97c4:	2500      	movs	r5, #0
    97c6:	42a5      	cmp	r5, r4
    97c8:	d105      	bne.n	97d6 <__libc_init_array+0x2e>
    97ca:	bd70      	pop	{r4, r5, r6, pc}
    97cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    97d0:	4798      	blx	r3
    97d2:	3501      	adds	r5, #1
    97d4:	e7ee      	b.n	97b4 <__libc_init_array+0xc>
    97d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    97da:	4798      	blx	r3
    97dc:	3501      	adds	r5, #1
    97de:	e7f2      	b.n	97c6 <__libc_init_array+0x1e>
    97e0:	0000a920 	.word	0x0000a920
    97e4:	0000a920 	.word	0x0000a920
    97e8:	0000a920 	.word	0x0000a920
    97ec:	0000a924 	.word	0x0000a924

000097f0 <malloc>:
    97f0:	4b02      	ldr	r3, [pc, #8]	; (97fc <malloc+0xc>)
    97f2:	4601      	mov	r1, r0
    97f4:	6818      	ldr	r0, [r3, #0]
    97f6:	f000 b865 	b.w	98c4 <_malloc_r>
    97fa:	bf00      	nop
    97fc:	2000050c 	.word	0x2000050c

00009800 <memcpy>:
    9800:	b510      	push	{r4, lr}
    9802:	1e43      	subs	r3, r0, #1
    9804:	440a      	add	r2, r1
    9806:	4291      	cmp	r1, r2
    9808:	d100      	bne.n	980c <memcpy+0xc>
    980a:	bd10      	pop	{r4, pc}
    980c:	f811 4b01 	ldrb.w	r4, [r1], #1
    9810:	f803 4f01 	strb.w	r4, [r3, #1]!
    9814:	e7f7      	b.n	9806 <memcpy+0x6>

00009816 <memset>:
    9816:	4402      	add	r2, r0
    9818:	4603      	mov	r3, r0
    981a:	4293      	cmp	r3, r2
    981c:	d100      	bne.n	9820 <memset+0xa>
    981e:	4770      	bx	lr
    9820:	f803 1b01 	strb.w	r1, [r3], #1
    9824:	e7f9      	b.n	981a <memset+0x4>
	...

00009828 <_free_r>:
    9828:	b538      	push	{r3, r4, r5, lr}
    982a:	4605      	mov	r5, r0
    982c:	2900      	cmp	r1, #0
    982e:	d045      	beq.n	98bc <_free_r+0x94>
    9830:	f851 3c04 	ldr.w	r3, [r1, #-4]
    9834:	1f0c      	subs	r4, r1, #4
    9836:	2b00      	cmp	r3, #0
    9838:	bfb8      	it	lt
    983a:	18e4      	addlt	r4, r4, r3
    983c:	f000 f8dc 	bl	99f8 <__malloc_lock>
    9840:	4a1f      	ldr	r2, [pc, #124]	; (98c0 <_free_r+0x98>)
    9842:	6813      	ldr	r3, [r2, #0]
    9844:	4610      	mov	r0, r2
    9846:	b933      	cbnz	r3, 9856 <_free_r+0x2e>
    9848:	6063      	str	r3, [r4, #4]
    984a:	6014      	str	r4, [r2, #0]
    984c:	4628      	mov	r0, r5
    984e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9852:	f000 b8d2 	b.w	99fa <__malloc_unlock>
    9856:	42a3      	cmp	r3, r4
    9858:	d90c      	bls.n	9874 <_free_r+0x4c>
    985a:	6821      	ldr	r1, [r4, #0]
    985c:	1862      	adds	r2, r4, r1
    985e:	4293      	cmp	r3, r2
    9860:	bf04      	itt	eq
    9862:	681a      	ldreq	r2, [r3, #0]
    9864:	685b      	ldreq	r3, [r3, #4]
    9866:	6063      	str	r3, [r4, #4]
    9868:	bf04      	itt	eq
    986a:	1852      	addeq	r2, r2, r1
    986c:	6022      	streq	r2, [r4, #0]
    986e:	6004      	str	r4, [r0, #0]
    9870:	e7ec      	b.n	984c <_free_r+0x24>
    9872:	4613      	mov	r3, r2
    9874:	685a      	ldr	r2, [r3, #4]
    9876:	b10a      	cbz	r2, 987c <_free_r+0x54>
    9878:	42a2      	cmp	r2, r4
    987a:	d9fa      	bls.n	9872 <_free_r+0x4a>
    987c:	6819      	ldr	r1, [r3, #0]
    987e:	1858      	adds	r0, r3, r1
    9880:	42a0      	cmp	r0, r4
    9882:	d10b      	bne.n	989c <_free_r+0x74>
    9884:	6820      	ldr	r0, [r4, #0]
    9886:	4401      	add	r1, r0
    9888:	1858      	adds	r0, r3, r1
    988a:	4282      	cmp	r2, r0
    988c:	6019      	str	r1, [r3, #0]
    988e:	d1dd      	bne.n	984c <_free_r+0x24>
    9890:	6810      	ldr	r0, [r2, #0]
    9892:	6852      	ldr	r2, [r2, #4]
    9894:	605a      	str	r2, [r3, #4]
    9896:	4401      	add	r1, r0
    9898:	6019      	str	r1, [r3, #0]
    989a:	e7d7      	b.n	984c <_free_r+0x24>
    989c:	d902      	bls.n	98a4 <_free_r+0x7c>
    989e:	230c      	movs	r3, #12
    98a0:	602b      	str	r3, [r5, #0]
    98a2:	e7d3      	b.n	984c <_free_r+0x24>
    98a4:	6820      	ldr	r0, [r4, #0]
    98a6:	1821      	adds	r1, r4, r0
    98a8:	428a      	cmp	r2, r1
    98aa:	bf04      	itt	eq
    98ac:	6811      	ldreq	r1, [r2, #0]
    98ae:	6852      	ldreq	r2, [r2, #4]
    98b0:	6062      	str	r2, [r4, #4]
    98b2:	bf04      	itt	eq
    98b4:	1809      	addeq	r1, r1, r0
    98b6:	6021      	streq	r1, [r4, #0]
    98b8:	605c      	str	r4, [r3, #4]
    98ba:	e7c7      	b.n	984c <_free_r+0x24>
    98bc:	bd38      	pop	{r3, r4, r5, pc}
    98be:	bf00      	nop
    98c0:	200012c0 	.word	0x200012c0

000098c4 <_malloc_r>:
    98c4:	b570      	push	{r4, r5, r6, lr}
    98c6:	1ccd      	adds	r5, r1, #3
    98c8:	f025 0503 	bic.w	r5, r5, #3
    98cc:	3508      	adds	r5, #8
    98ce:	2d0c      	cmp	r5, #12
    98d0:	bf38      	it	cc
    98d2:	250c      	movcc	r5, #12
    98d4:	2d00      	cmp	r5, #0
    98d6:	4606      	mov	r6, r0
    98d8:	db01      	blt.n	98de <_malloc_r+0x1a>
    98da:	42a9      	cmp	r1, r5
    98dc:	d903      	bls.n	98e6 <_malloc_r+0x22>
    98de:	230c      	movs	r3, #12
    98e0:	6033      	str	r3, [r6, #0]
    98e2:	2000      	movs	r0, #0
    98e4:	bd70      	pop	{r4, r5, r6, pc}
    98e6:	f000 f887 	bl	99f8 <__malloc_lock>
    98ea:	4a23      	ldr	r2, [pc, #140]	; (9978 <_malloc_r+0xb4>)
    98ec:	6814      	ldr	r4, [r2, #0]
    98ee:	4621      	mov	r1, r4
    98f0:	b991      	cbnz	r1, 9918 <_malloc_r+0x54>
    98f2:	4c22      	ldr	r4, [pc, #136]	; (997c <_malloc_r+0xb8>)
    98f4:	6823      	ldr	r3, [r4, #0]
    98f6:	b91b      	cbnz	r3, 9900 <_malloc_r+0x3c>
    98f8:	4630      	mov	r0, r6
    98fa:	f000 f841 	bl	9980 <_sbrk_r>
    98fe:	6020      	str	r0, [r4, #0]
    9900:	4629      	mov	r1, r5
    9902:	4630      	mov	r0, r6
    9904:	f000 f83c 	bl	9980 <_sbrk_r>
    9908:	1c43      	adds	r3, r0, #1
    990a:	d126      	bne.n	995a <_malloc_r+0x96>
    990c:	230c      	movs	r3, #12
    990e:	6033      	str	r3, [r6, #0]
    9910:	4630      	mov	r0, r6
    9912:	f000 f872 	bl	99fa <__malloc_unlock>
    9916:	e7e4      	b.n	98e2 <_malloc_r+0x1e>
    9918:	680b      	ldr	r3, [r1, #0]
    991a:	1b5b      	subs	r3, r3, r5
    991c:	d41a      	bmi.n	9954 <_malloc_r+0x90>
    991e:	2b0b      	cmp	r3, #11
    9920:	d90f      	bls.n	9942 <_malloc_r+0x7e>
    9922:	600b      	str	r3, [r1, #0]
    9924:	50cd      	str	r5, [r1, r3]
    9926:	18cc      	adds	r4, r1, r3
    9928:	4630      	mov	r0, r6
    992a:	f000 f866 	bl	99fa <__malloc_unlock>
    992e:	f104 000b 	add.w	r0, r4, #11
    9932:	1d23      	adds	r3, r4, #4
    9934:	f020 0007 	bic.w	r0, r0, #7
    9938:	1ac3      	subs	r3, r0, r3
    993a:	d01b      	beq.n	9974 <_malloc_r+0xb0>
    993c:	425a      	negs	r2, r3
    993e:	50e2      	str	r2, [r4, r3]
    9940:	bd70      	pop	{r4, r5, r6, pc}
    9942:	428c      	cmp	r4, r1
    9944:	bf0d      	iteet	eq
    9946:	6863      	ldreq	r3, [r4, #4]
    9948:	684b      	ldrne	r3, [r1, #4]
    994a:	6063      	strne	r3, [r4, #4]
    994c:	6013      	streq	r3, [r2, #0]
    994e:	bf18      	it	ne
    9950:	460c      	movne	r4, r1
    9952:	e7e9      	b.n	9928 <_malloc_r+0x64>
    9954:	460c      	mov	r4, r1
    9956:	6849      	ldr	r1, [r1, #4]
    9958:	e7ca      	b.n	98f0 <_malloc_r+0x2c>
    995a:	1cc4      	adds	r4, r0, #3
    995c:	f024 0403 	bic.w	r4, r4, #3
    9960:	42a0      	cmp	r0, r4
    9962:	d005      	beq.n	9970 <_malloc_r+0xac>
    9964:	1a21      	subs	r1, r4, r0
    9966:	4630      	mov	r0, r6
    9968:	f000 f80a 	bl	9980 <_sbrk_r>
    996c:	3001      	adds	r0, #1
    996e:	d0cd      	beq.n	990c <_malloc_r+0x48>
    9970:	6025      	str	r5, [r4, #0]
    9972:	e7d9      	b.n	9928 <_malloc_r+0x64>
    9974:	bd70      	pop	{r4, r5, r6, pc}
    9976:	bf00      	nop
    9978:	200012c0 	.word	0x200012c0
    997c:	200012c4 	.word	0x200012c4

00009980 <_sbrk_r>:
    9980:	b538      	push	{r3, r4, r5, lr}
    9982:	4c06      	ldr	r4, [pc, #24]	; (999c <_sbrk_r+0x1c>)
    9984:	2300      	movs	r3, #0
    9986:	4605      	mov	r5, r0
    9988:	4608      	mov	r0, r1
    998a:	6023      	str	r3, [r4, #0]
    998c:	f7f8 fcfa 	bl	2384 <_sbrk>
    9990:	1c43      	adds	r3, r0, #1
    9992:	d102      	bne.n	999a <_sbrk_r+0x1a>
    9994:	6823      	ldr	r3, [r4, #0]
    9996:	b103      	cbz	r3, 999a <_sbrk_r+0x1a>
    9998:	602b      	str	r3, [r5, #0]
    999a:	bd38      	pop	{r3, r4, r5, pc}
    999c:	20002b44 	.word	0x20002b44

000099a0 <siprintf>:
    99a0:	b40e      	push	{r1, r2, r3}
    99a2:	b500      	push	{lr}
    99a4:	b09c      	sub	sp, #112	; 0x70
    99a6:	f44f 7102 	mov.w	r1, #520	; 0x208
    99aa:	ab1d      	add	r3, sp, #116	; 0x74
    99ac:	f8ad 1014 	strh.w	r1, [sp, #20]
    99b0:	9002      	str	r0, [sp, #8]
    99b2:	9006      	str	r0, [sp, #24]
    99b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    99b8:	480a      	ldr	r0, [pc, #40]	; (99e4 <siprintf+0x44>)
    99ba:	9104      	str	r1, [sp, #16]
    99bc:	9107      	str	r1, [sp, #28]
    99be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    99c2:	f853 2b04 	ldr.w	r2, [r3], #4
    99c6:	f8ad 1016 	strh.w	r1, [sp, #22]
    99ca:	6800      	ldr	r0, [r0, #0]
    99cc:	9301      	str	r3, [sp, #4]
    99ce:	a902      	add	r1, sp, #8
    99d0:	f000 f870 	bl	9ab4 <_svfiprintf_r>
    99d4:	9b02      	ldr	r3, [sp, #8]
    99d6:	2200      	movs	r2, #0
    99d8:	701a      	strb	r2, [r3, #0]
    99da:	b01c      	add	sp, #112	; 0x70
    99dc:	f85d eb04 	ldr.w	lr, [sp], #4
    99e0:	b003      	add	sp, #12
    99e2:	4770      	bx	lr
    99e4:	2000050c 	.word	0x2000050c

000099e8 <strlen>:
    99e8:	4603      	mov	r3, r0
    99ea:	f813 2b01 	ldrb.w	r2, [r3], #1
    99ee:	2a00      	cmp	r2, #0
    99f0:	d1fb      	bne.n	99ea <strlen+0x2>
    99f2:	1a18      	subs	r0, r3, r0
    99f4:	3801      	subs	r0, #1
    99f6:	4770      	bx	lr

000099f8 <__malloc_lock>:
    99f8:	4770      	bx	lr

000099fa <__malloc_unlock>:
    99fa:	4770      	bx	lr

000099fc <__ssputs_r>:
    99fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a00:	688e      	ldr	r6, [r1, #8]
    9a02:	429e      	cmp	r6, r3
    9a04:	4682      	mov	sl, r0
    9a06:	460c      	mov	r4, r1
    9a08:	4691      	mov	r9, r2
    9a0a:	4698      	mov	r8, r3
    9a0c:	d835      	bhi.n	9a7a <__ssputs_r+0x7e>
    9a0e:	898a      	ldrh	r2, [r1, #12]
    9a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
    9a14:	d031      	beq.n	9a7a <__ssputs_r+0x7e>
    9a16:	6825      	ldr	r5, [r4, #0]
    9a18:	6909      	ldr	r1, [r1, #16]
    9a1a:	1a6f      	subs	r7, r5, r1
    9a1c:	6965      	ldr	r5, [r4, #20]
    9a1e:	2302      	movs	r3, #2
    9a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    9a24:	fb95 f5f3 	sdiv	r5, r5, r3
    9a28:	f108 0301 	add.w	r3, r8, #1
    9a2c:	443b      	add	r3, r7
    9a2e:	429d      	cmp	r5, r3
    9a30:	bf38      	it	cc
    9a32:	461d      	movcc	r5, r3
    9a34:	0553      	lsls	r3, r2, #21
    9a36:	d531      	bpl.n	9a9c <__ssputs_r+0xa0>
    9a38:	4629      	mov	r1, r5
    9a3a:	f7ff ff43 	bl	98c4 <_malloc_r>
    9a3e:	4606      	mov	r6, r0
    9a40:	b950      	cbnz	r0, 9a58 <__ssputs_r+0x5c>
    9a42:	230c      	movs	r3, #12
    9a44:	f8ca 3000 	str.w	r3, [sl]
    9a48:	89a3      	ldrh	r3, [r4, #12]
    9a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9a4e:	81a3      	strh	r3, [r4, #12]
    9a50:	f04f 30ff 	mov.w	r0, #4294967295
    9a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a58:	463a      	mov	r2, r7
    9a5a:	6921      	ldr	r1, [r4, #16]
    9a5c:	f7ff fed0 	bl	9800 <memcpy>
    9a60:	89a3      	ldrh	r3, [r4, #12]
    9a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    9a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9a6a:	81a3      	strh	r3, [r4, #12]
    9a6c:	6126      	str	r6, [r4, #16]
    9a6e:	6165      	str	r5, [r4, #20]
    9a70:	443e      	add	r6, r7
    9a72:	1bed      	subs	r5, r5, r7
    9a74:	6026      	str	r6, [r4, #0]
    9a76:	60a5      	str	r5, [r4, #8]
    9a78:	4646      	mov	r6, r8
    9a7a:	4546      	cmp	r6, r8
    9a7c:	bf28      	it	cs
    9a7e:	4646      	movcs	r6, r8
    9a80:	4632      	mov	r2, r6
    9a82:	4649      	mov	r1, r9
    9a84:	6820      	ldr	r0, [r4, #0]
    9a86:	f000 faf3 	bl	a070 <memmove>
    9a8a:	68a3      	ldr	r3, [r4, #8]
    9a8c:	1b9b      	subs	r3, r3, r6
    9a8e:	60a3      	str	r3, [r4, #8]
    9a90:	6823      	ldr	r3, [r4, #0]
    9a92:	441e      	add	r6, r3
    9a94:	6026      	str	r6, [r4, #0]
    9a96:	2000      	movs	r0, #0
    9a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a9c:	462a      	mov	r2, r5
    9a9e:	f000 fb01 	bl	a0a4 <_realloc_r>
    9aa2:	4606      	mov	r6, r0
    9aa4:	2800      	cmp	r0, #0
    9aa6:	d1e1      	bne.n	9a6c <__ssputs_r+0x70>
    9aa8:	6921      	ldr	r1, [r4, #16]
    9aaa:	4650      	mov	r0, sl
    9aac:	f7ff febc 	bl	9828 <_free_r>
    9ab0:	e7c7      	b.n	9a42 <__ssputs_r+0x46>
	...

00009ab4 <_svfiprintf_r>:
    9ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ab8:	b09d      	sub	sp, #116	; 0x74
    9aba:	4680      	mov	r8, r0
    9abc:	9303      	str	r3, [sp, #12]
    9abe:	898b      	ldrh	r3, [r1, #12]
    9ac0:	061c      	lsls	r4, r3, #24
    9ac2:	460d      	mov	r5, r1
    9ac4:	4616      	mov	r6, r2
    9ac6:	d50f      	bpl.n	9ae8 <_svfiprintf_r+0x34>
    9ac8:	690b      	ldr	r3, [r1, #16]
    9aca:	b96b      	cbnz	r3, 9ae8 <_svfiprintf_r+0x34>
    9acc:	2140      	movs	r1, #64	; 0x40
    9ace:	f7ff fef9 	bl	98c4 <_malloc_r>
    9ad2:	6028      	str	r0, [r5, #0]
    9ad4:	6128      	str	r0, [r5, #16]
    9ad6:	b928      	cbnz	r0, 9ae4 <_svfiprintf_r+0x30>
    9ad8:	230c      	movs	r3, #12
    9ada:	f8c8 3000 	str.w	r3, [r8]
    9ade:	f04f 30ff 	mov.w	r0, #4294967295
    9ae2:	e0c5      	b.n	9c70 <_svfiprintf_r+0x1bc>
    9ae4:	2340      	movs	r3, #64	; 0x40
    9ae6:	616b      	str	r3, [r5, #20]
    9ae8:	2300      	movs	r3, #0
    9aea:	9309      	str	r3, [sp, #36]	; 0x24
    9aec:	2320      	movs	r3, #32
    9aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    9af2:	2330      	movs	r3, #48	; 0x30
    9af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    9af8:	f04f 0b01 	mov.w	fp, #1
    9afc:	4637      	mov	r7, r6
    9afe:	463c      	mov	r4, r7
    9b00:	f814 3b01 	ldrb.w	r3, [r4], #1
    9b04:	2b00      	cmp	r3, #0
    9b06:	d13c      	bne.n	9b82 <_svfiprintf_r+0xce>
    9b08:	ebb7 0a06 	subs.w	sl, r7, r6
    9b0c:	d00b      	beq.n	9b26 <_svfiprintf_r+0x72>
    9b0e:	4653      	mov	r3, sl
    9b10:	4632      	mov	r2, r6
    9b12:	4629      	mov	r1, r5
    9b14:	4640      	mov	r0, r8
    9b16:	f7ff ff71 	bl	99fc <__ssputs_r>
    9b1a:	3001      	adds	r0, #1
    9b1c:	f000 80a3 	beq.w	9c66 <_svfiprintf_r+0x1b2>
    9b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9b22:	4453      	add	r3, sl
    9b24:	9309      	str	r3, [sp, #36]	; 0x24
    9b26:	783b      	ldrb	r3, [r7, #0]
    9b28:	2b00      	cmp	r3, #0
    9b2a:	f000 809c 	beq.w	9c66 <_svfiprintf_r+0x1b2>
    9b2e:	2300      	movs	r3, #0
    9b30:	f04f 32ff 	mov.w	r2, #4294967295
    9b34:	9304      	str	r3, [sp, #16]
    9b36:	9307      	str	r3, [sp, #28]
    9b38:	9205      	str	r2, [sp, #20]
    9b3a:	9306      	str	r3, [sp, #24]
    9b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    9b40:	931a      	str	r3, [sp, #104]	; 0x68
    9b42:	2205      	movs	r2, #5
    9b44:	7821      	ldrb	r1, [r4, #0]
    9b46:	4850      	ldr	r0, [pc, #320]	; (9c88 <_svfiprintf_r+0x1d4>)
    9b48:	f000 fa42 	bl	9fd0 <memchr>
    9b4c:	1c67      	adds	r7, r4, #1
    9b4e:	9b04      	ldr	r3, [sp, #16]
    9b50:	b9d8      	cbnz	r0, 9b8a <_svfiprintf_r+0xd6>
    9b52:	06d9      	lsls	r1, r3, #27
    9b54:	bf44      	itt	mi
    9b56:	2220      	movmi	r2, #32
    9b58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    9b5c:	071a      	lsls	r2, r3, #28
    9b5e:	bf44      	itt	mi
    9b60:	222b      	movmi	r2, #43	; 0x2b
    9b62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    9b66:	7822      	ldrb	r2, [r4, #0]
    9b68:	2a2a      	cmp	r2, #42	; 0x2a
    9b6a:	d016      	beq.n	9b9a <_svfiprintf_r+0xe6>
    9b6c:	9a07      	ldr	r2, [sp, #28]
    9b6e:	2100      	movs	r1, #0
    9b70:	200a      	movs	r0, #10
    9b72:	4627      	mov	r7, r4
    9b74:	3401      	adds	r4, #1
    9b76:	783b      	ldrb	r3, [r7, #0]
    9b78:	3b30      	subs	r3, #48	; 0x30
    9b7a:	2b09      	cmp	r3, #9
    9b7c:	d951      	bls.n	9c22 <_svfiprintf_r+0x16e>
    9b7e:	b1c9      	cbz	r1, 9bb4 <_svfiprintf_r+0x100>
    9b80:	e011      	b.n	9ba6 <_svfiprintf_r+0xf2>
    9b82:	2b25      	cmp	r3, #37	; 0x25
    9b84:	d0c0      	beq.n	9b08 <_svfiprintf_r+0x54>
    9b86:	4627      	mov	r7, r4
    9b88:	e7b9      	b.n	9afe <_svfiprintf_r+0x4a>
    9b8a:	4a3f      	ldr	r2, [pc, #252]	; (9c88 <_svfiprintf_r+0x1d4>)
    9b8c:	1a80      	subs	r0, r0, r2
    9b8e:	fa0b f000 	lsl.w	r0, fp, r0
    9b92:	4318      	orrs	r0, r3
    9b94:	9004      	str	r0, [sp, #16]
    9b96:	463c      	mov	r4, r7
    9b98:	e7d3      	b.n	9b42 <_svfiprintf_r+0x8e>
    9b9a:	9a03      	ldr	r2, [sp, #12]
    9b9c:	1d11      	adds	r1, r2, #4
    9b9e:	6812      	ldr	r2, [r2, #0]
    9ba0:	9103      	str	r1, [sp, #12]
    9ba2:	2a00      	cmp	r2, #0
    9ba4:	db01      	blt.n	9baa <_svfiprintf_r+0xf6>
    9ba6:	9207      	str	r2, [sp, #28]
    9ba8:	e004      	b.n	9bb4 <_svfiprintf_r+0x100>
    9baa:	4252      	negs	r2, r2
    9bac:	f043 0302 	orr.w	r3, r3, #2
    9bb0:	9207      	str	r2, [sp, #28]
    9bb2:	9304      	str	r3, [sp, #16]
    9bb4:	783b      	ldrb	r3, [r7, #0]
    9bb6:	2b2e      	cmp	r3, #46	; 0x2e
    9bb8:	d10e      	bne.n	9bd8 <_svfiprintf_r+0x124>
    9bba:	787b      	ldrb	r3, [r7, #1]
    9bbc:	2b2a      	cmp	r3, #42	; 0x2a
    9bbe:	f107 0101 	add.w	r1, r7, #1
    9bc2:	d132      	bne.n	9c2a <_svfiprintf_r+0x176>
    9bc4:	9b03      	ldr	r3, [sp, #12]
    9bc6:	1d1a      	adds	r2, r3, #4
    9bc8:	681b      	ldr	r3, [r3, #0]
    9bca:	9203      	str	r2, [sp, #12]
    9bcc:	2b00      	cmp	r3, #0
    9bce:	bfb8      	it	lt
    9bd0:	f04f 33ff 	movlt.w	r3, #4294967295
    9bd4:	3702      	adds	r7, #2
    9bd6:	9305      	str	r3, [sp, #20]
    9bd8:	4c2c      	ldr	r4, [pc, #176]	; (9c8c <_svfiprintf_r+0x1d8>)
    9bda:	7839      	ldrb	r1, [r7, #0]
    9bdc:	2203      	movs	r2, #3
    9bde:	4620      	mov	r0, r4
    9be0:	f000 f9f6 	bl	9fd0 <memchr>
    9be4:	b138      	cbz	r0, 9bf6 <_svfiprintf_r+0x142>
    9be6:	2340      	movs	r3, #64	; 0x40
    9be8:	1b00      	subs	r0, r0, r4
    9bea:	fa03 f000 	lsl.w	r0, r3, r0
    9bee:	9b04      	ldr	r3, [sp, #16]
    9bf0:	4303      	orrs	r3, r0
    9bf2:	9304      	str	r3, [sp, #16]
    9bf4:	3701      	adds	r7, #1
    9bf6:	7839      	ldrb	r1, [r7, #0]
    9bf8:	4825      	ldr	r0, [pc, #148]	; (9c90 <_svfiprintf_r+0x1dc>)
    9bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    9bfe:	2206      	movs	r2, #6
    9c00:	1c7e      	adds	r6, r7, #1
    9c02:	f000 f9e5 	bl	9fd0 <memchr>
    9c06:	2800      	cmp	r0, #0
    9c08:	d035      	beq.n	9c76 <_svfiprintf_r+0x1c2>
    9c0a:	4b22      	ldr	r3, [pc, #136]	; (9c94 <_svfiprintf_r+0x1e0>)
    9c0c:	b9fb      	cbnz	r3, 9c4e <_svfiprintf_r+0x19a>
    9c0e:	9b03      	ldr	r3, [sp, #12]
    9c10:	3307      	adds	r3, #7
    9c12:	f023 0307 	bic.w	r3, r3, #7
    9c16:	3308      	adds	r3, #8
    9c18:	9303      	str	r3, [sp, #12]
    9c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c1c:	444b      	add	r3, r9
    9c1e:	9309      	str	r3, [sp, #36]	; 0x24
    9c20:	e76c      	b.n	9afc <_svfiprintf_r+0x48>
    9c22:	fb00 3202 	mla	r2, r0, r2, r3
    9c26:	2101      	movs	r1, #1
    9c28:	e7a3      	b.n	9b72 <_svfiprintf_r+0xbe>
    9c2a:	2300      	movs	r3, #0
    9c2c:	9305      	str	r3, [sp, #20]
    9c2e:	4618      	mov	r0, r3
    9c30:	240a      	movs	r4, #10
    9c32:	460f      	mov	r7, r1
    9c34:	3101      	adds	r1, #1
    9c36:	783a      	ldrb	r2, [r7, #0]
    9c38:	3a30      	subs	r2, #48	; 0x30
    9c3a:	2a09      	cmp	r2, #9
    9c3c:	d903      	bls.n	9c46 <_svfiprintf_r+0x192>
    9c3e:	2b00      	cmp	r3, #0
    9c40:	d0ca      	beq.n	9bd8 <_svfiprintf_r+0x124>
    9c42:	9005      	str	r0, [sp, #20]
    9c44:	e7c8      	b.n	9bd8 <_svfiprintf_r+0x124>
    9c46:	fb04 2000 	mla	r0, r4, r0, r2
    9c4a:	2301      	movs	r3, #1
    9c4c:	e7f1      	b.n	9c32 <_svfiprintf_r+0x17e>
    9c4e:	ab03      	add	r3, sp, #12
    9c50:	9300      	str	r3, [sp, #0]
    9c52:	462a      	mov	r2, r5
    9c54:	4b10      	ldr	r3, [pc, #64]	; (9c98 <_svfiprintf_r+0x1e4>)
    9c56:	a904      	add	r1, sp, #16
    9c58:	4640      	mov	r0, r8
    9c5a:	f3af 8000 	nop.w
    9c5e:	f1b0 3fff 	cmp.w	r0, #4294967295
    9c62:	4681      	mov	r9, r0
    9c64:	d1d9      	bne.n	9c1a <_svfiprintf_r+0x166>
    9c66:	89ab      	ldrh	r3, [r5, #12]
    9c68:	065b      	lsls	r3, r3, #25
    9c6a:	f53f af38 	bmi.w	9ade <_svfiprintf_r+0x2a>
    9c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c70:	b01d      	add	sp, #116	; 0x74
    9c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c76:	ab03      	add	r3, sp, #12
    9c78:	9300      	str	r3, [sp, #0]
    9c7a:	462a      	mov	r2, r5
    9c7c:	4b06      	ldr	r3, [pc, #24]	; (9c98 <_svfiprintf_r+0x1e4>)
    9c7e:	a904      	add	r1, sp, #16
    9c80:	4640      	mov	r0, r8
    9c82:	f000 f881 	bl	9d88 <_printf_i>
    9c86:	e7ea      	b.n	9c5e <_svfiprintf_r+0x1aa>
    9c88:	0000a8e0 	.word	0x0000a8e0
    9c8c:	0000a8e6 	.word	0x0000a8e6
    9c90:	0000a8ea 	.word	0x0000a8ea
    9c94:	00000000 	.word	0x00000000
    9c98:	000099fd 	.word	0x000099fd

00009c9c <_printf_common>:
    9c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ca0:	4691      	mov	r9, r2
    9ca2:	461f      	mov	r7, r3
    9ca4:	688a      	ldr	r2, [r1, #8]
    9ca6:	690b      	ldr	r3, [r1, #16]
    9ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    9cac:	4293      	cmp	r3, r2
    9cae:	bfb8      	it	lt
    9cb0:	4613      	movlt	r3, r2
    9cb2:	f8c9 3000 	str.w	r3, [r9]
    9cb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    9cba:	4606      	mov	r6, r0
    9cbc:	460c      	mov	r4, r1
    9cbe:	b112      	cbz	r2, 9cc6 <_printf_common+0x2a>
    9cc0:	3301      	adds	r3, #1
    9cc2:	f8c9 3000 	str.w	r3, [r9]
    9cc6:	6823      	ldr	r3, [r4, #0]
    9cc8:	0699      	lsls	r1, r3, #26
    9cca:	bf42      	ittt	mi
    9ccc:	f8d9 3000 	ldrmi.w	r3, [r9]
    9cd0:	3302      	addmi	r3, #2
    9cd2:	f8c9 3000 	strmi.w	r3, [r9]
    9cd6:	6825      	ldr	r5, [r4, #0]
    9cd8:	f015 0506 	ands.w	r5, r5, #6
    9cdc:	d107      	bne.n	9cee <_printf_common+0x52>
    9cde:	f104 0a19 	add.w	sl, r4, #25
    9ce2:	68e3      	ldr	r3, [r4, #12]
    9ce4:	f8d9 2000 	ldr.w	r2, [r9]
    9ce8:	1a9b      	subs	r3, r3, r2
    9cea:	429d      	cmp	r5, r3
    9cec:	db29      	blt.n	9d42 <_printf_common+0xa6>
    9cee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    9cf2:	6822      	ldr	r2, [r4, #0]
    9cf4:	3300      	adds	r3, #0
    9cf6:	bf18      	it	ne
    9cf8:	2301      	movne	r3, #1
    9cfa:	0692      	lsls	r2, r2, #26
    9cfc:	d42e      	bmi.n	9d5c <_printf_common+0xc0>
    9cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
    9d02:	4639      	mov	r1, r7
    9d04:	4630      	mov	r0, r6
    9d06:	47c0      	blx	r8
    9d08:	3001      	adds	r0, #1
    9d0a:	d021      	beq.n	9d50 <_printf_common+0xb4>
    9d0c:	6823      	ldr	r3, [r4, #0]
    9d0e:	68e5      	ldr	r5, [r4, #12]
    9d10:	f8d9 2000 	ldr.w	r2, [r9]
    9d14:	f003 0306 	and.w	r3, r3, #6
    9d18:	2b04      	cmp	r3, #4
    9d1a:	bf08      	it	eq
    9d1c:	1aad      	subeq	r5, r5, r2
    9d1e:	68a3      	ldr	r3, [r4, #8]
    9d20:	6922      	ldr	r2, [r4, #16]
    9d22:	bf0c      	ite	eq
    9d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    9d28:	2500      	movne	r5, #0
    9d2a:	4293      	cmp	r3, r2
    9d2c:	bfc4      	itt	gt
    9d2e:	1a9b      	subgt	r3, r3, r2
    9d30:	18ed      	addgt	r5, r5, r3
    9d32:	f04f 0900 	mov.w	r9, #0
    9d36:	341a      	adds	r4, #26
    9d38:	454d      	cmp	r5, r9
    9d3a:	d11b      	bne.n	9d74 <_printf_common+0xd8>
    9d3c:	2000      	movs	r0, #0
    9d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9d42:	2301      	movs	r3, #1
    9d44:	4652      	mov	r2, sl
    9d46:	4639      	mov	r1, r7
    9d48:	4630      	mov	r0, r6
    9d4a:	47c0      	blx	r8
    9d4c:	3001      	adds	r0, #1
    9d4e:	d103      	bne.n	9d58 <_printf_common+0xbc>
    9d50:	f04f 30ff 	mov.w	r0, #4294967295
    9d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9d58:	3501      	adds	r5, #1
    9d5a:	e7c2      	b.n	9ce2 <_printf_common+0x46>
    9d5c:	18e1      	adds	r1, r4, r3
    9d5e:	1c5a      	adds	r2, r3, #1
    9d60:	2030      	movs	r0, #48	; 0x30
    9d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    9d66:	4422      	add	r2, r4
    9d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    9d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    9d70:	3302      	adds	r3, #2
    9d72:	e7c4      	b.n	9cfe <_printf_common+0x62>
    9d74:	2301      	movs	r3, #1
    9d76:	4622      	mov	r2, r4
    9d78:	4639      	mov	r1, r7
    9d7a:	4630      	mov	r0, r6
    9d7c:	47c0      	blx	r8
    9d7e:	3001      	adds	r0, #1
    9d80:	d0e6      	beq.n	9d50 <_printf_common+0xb4>
    9d82:	f109 0901 	add.w	r9, r9, #1
    9d86:	e7d7      	b.n	9d38 <_printf_common+0x9c>

00009d88 <_printf_i>:
    9d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9d8c:	4617      	mov	r7, r2
    9d8e:	7e0a      	ldrb	r2, [r1, #24]
    9d90:	b085      	sub	sp, #20
    9d92:	2a6e      	cmp	r2, #110	; 0x6e
    9d94:	4698      	mov	r8, r3
    9d96:	4606      	mov	r6, r0
    9d98:	460c      	mov	r4, r1
    9d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d9c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    9da0:	f000 80bc 	beq.w	9f1c <_printf_i+0x194>
    9da4:	d81a      	bhi.n	9ddc <_printf_i+0x54>
    9da6:	2a63      	cmp	r2, #99	; 0x63
    9da8:	d02e      	beq.n	9e08 <_printf_i+0x80>
    9daa:	d80a      	bhi.n	9dc2 <_printf_i+0x3a>
    9dac:	2a00      	cmp	r2, #0
    9dae:	f000 80c8 	beq.w	9f42 <_printf_i+0x1ba>
    9db2:	2a58      	cmp	r2, #88	; 0x58
    9db4:	f000 808a 	beq.w	9ecc <_printf_i+0x144>
    9db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    9dbc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    9dc0:	e02a      	b.n	9e18 <_printf_i+0x90>
    9dc2:	2a64      	cmp	r2, #100	; 0x64
    9dc4:	d001      	beq.n	9dca <_printf_i+0x42>
    9dc6:	2a69      	cmp	r2, #105	; 0x69
    9dc8:	d1f6      	bne.n	9db8 <_printf_i+0x30>
    9dca:	6821      	ldr	r1, [r4, #0]
    9dcc:	681a      	ldr	r2, [r3, #0]
    9dce:	f011 0f80 	tst.w	r1, #128	; 0x80
    9dd2:	d023      	beq.n	9e1c <_printf_i+0x94>
    9dd4:	1d11      	adds	r1, r2, #4
    9dd6:	6019      	str	r1, [r3, #0]
    9dd8:	6813      	ldr	r3, [r2, #0]
    9dda:	e027      	b.n	9e2c <_printf_i+0xa4>
    9ddc:	2a73      	cmp	r2, #115	; 0x73
    9dde:	f000 80b4 	beq.w	9f4a <_printf_i+0x1c2>
    9de2:	d808      	bhi.n	9df6 <_printf_i+0x6e>
    9de4:	2a6f      	cmp	r2, #111	; 0x6f
    9de6:	d02a      	beq.n	9e3e <_printf_i+0xb6>
    9de8:	2a70      	cmp	r2, #112	; 0x70
    9dea:	d1e5      	bne.n	9db8 <_printf_i+0x30>
    9dec:	680a      	ldr	r2, [r1, #0]
    9dee:	f042 0220 	orr.w	r2, r2, #32
    9df2:	600a      	str	r2, [r1, #0]
    9df4:	e003      	b.n	9dfe <_printf_i+0x76>
    9df6:	2a75      	cmp	r2, #117	; 0x75
    9df8:	d021      	beq.n	9e3e <_printf_i+0xb6>
    9dfa:	2a78      	cmp	r2, #120	; 0x78
    9dfc:	d1dc      	bne.n	9db8 <_printf_i+0x30>
    9dfe:	2278      	movs	r2, #120	; 0x78
    9e00:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    9e04:	496e      	ldr	r1, [pc, #440]	; (9fc0 <_printf_i+0x238>)
    9e06:	e064      	b.n	9ed2 <_printf_i+0x14a>
    9e08:	681a      	ldr	r2, [r3, #0]
    9e0a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    9e0e:	1d11      	adds	r1, r2, #4
    9e10:	6019      	str	r1, [r3, #0]
    9e12:	6813      	ldr	r3, [r2, #0]
    9e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    9e18:	2301      	movs	r3, #1
    9e1a:	e0a3      	b.n	9f64 <_printf_i+0x1dc>
    9e1c:	f011 0f40 	tst.w	r1, #64	; 0x40
    9e20:	f102 0104 	add.w	r1, r2, #4
    9e24:	6019      	str	r1, [r3, #0]
    9e26:	d0d7      	beq.n	9dd8 <_printf_i+0x50>
    9e28:	f9b2 3000 	ldrsh.w	r3, [r2]
    9e2c:	2b00      	cmp	r3, #0
    9e2e:	da03      	bge.n	9e38 <_printf_i+0xb0>
    9e30:	222d      	movs	r2, #45	; 0x2d
    9e32:	425b      	negs	r3, r3
    9e34:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    9e38:	4962      	ldr	r1, [pc, #392]	; (9fc4 <_printf_i+0x23c>)
    9e3a:	220a      	movs	r2, #10
    9e3c:	e017      	b.n	9e6e <_printf_i+0xe6>
    9e3e:	6820      	ldr	r0, [r4, #0]
    9e40:	6819      	ldr	r1, [r3, #0]
    9e42:	f010 0f80 	tst.w	r0, #128	; 0x80
    9e46:	d003      	beq.n	9e50 <_printf_i+0xc8>
    9e48:	1d08      	adds	r0, r1, #4
    9e4a:	6018      	str	r0, [r3, #0]
    9e4c:	680b      	ldr	r3, [r1, #0]
    9e4e:	e006      	b.n	9e5e <_printf_i+0xd6>
    9e50:	f010 0f40 	tst.w	r0, #64	; 0x40
    9e54:	f101 0004 	add.w	r0, r1, #4
    9e58:	6018      	str	r0, [r3, #0]
    9e5a:	d0f7      	beq.n	9e4c <_printf_i+0xc4>
    9e5c:	880b      	ldrh	r3, [r1, #0]
    9e5e:	4959      	ldr	r1, [pc, #356]	; (9fc4 <_printf_i+0x23c>)
    9e60:	2a6f      	cmp	r2, #111	; 0x6f
    9e62:	bf14      	ite	ne
    9e64:	220a      	movne	r2, #10
    9e66:	2208      	moveq	r2, #8
    9e68:	2000      	movs	r0, #0
    9e6a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    9e6e:	6865      	ldr	r5, [r4, #4]
    9e70:	60a5      	str	r5, [r4, #8]
    9e72:	2d00      	cmp	r5, #0
    9e74:	f2c0 809c 	blt.w	9fb0 <_printf_i+0x228>
    9e78:	6820      	ldr	r0, [r4, #0]
    9e7a:	f020 0004 	bic.w	r0, r0, #4
    9e7e:	6020      	str	r0, [r4, #0]
    9e80:	2b00      	cmp	r3, #0
    9e82:	d13f      	bne.n	9f04 <_printf_i+0x17c>
    9e84:	2d00      	cmp	r5, #0
    9e86:	f040 8095 	bne.w	9fb4 <_printf_i+0x22c>
    9e8a:	4675      	mov	r5, lr
    9e8c:	2a08      	cmp	r2, #8
    9e8e:	d10b      	bne.n	9ea8 <_printf_i+0x120>
    9e90:	6823      	ldr	r3, [r4, #0]
    9e92:	07da      	lsls	r2, r3, #31
    9e94:	d508      	bpl.n	9ea8 <_printf_i+0x120>
    9e96:	6923      	ldr	r3, [r4, #16]
    9e98:	6862      	ldr	r2, [r4, #4]
    9e9a:	429a      	cmp	r2, r3
    9e9c:	bfde      	ittt	le
    9e9e:	2330      	movle	r3, #48	; 0x30
    9ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
    9ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
    9ea8:	ebae 0305 	sub.w	r3, lr, r5
    9eac:	6123      	str	r3, [r4, #16]
    9eae:	f8cd 8000 	str.w	r8, [sp]
    9eb2:	463b      	mov	r3, r7
    9eb4:	aa03      	add	r2, sp, #12
    9eb6:	4621      	mov	r1, r4
    9eb8:	4630      	mov	r0, r6
    9eba:	f7ff feef 	bl	9c9c <_printf_common>
    9ebe:	3001      	adds	r0, #1
    9ec0:	d155      	bne.n	9f6e <_printf_i+0x1e6>
    9ec2:	f04f 30ff 	mov.w	r0, #4294967295
    9ec6:	b005      	add	sp, #20
    9ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9ecc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    9ed0:	493c      	ldr	r1, [pc, #240]	; (9fc4 <_printf_i+0x23c>)
    9ed2:	6822      	ldr	r2, [r4, #0]
    9ed4:	6818      	ldr	r0, [r3, #0]
    9ed6:	f012 0f80 	tst.w	r2, #128	; 0x80
    9eda:	f100 0504 	add.w	r5, r0, #4
    9ede:	601d      	str	r5, [r3, #0]
    9ee0:	d001      	beq.n	9ee6 <_printf_i+0x15e>
    9ee2:	6803      	ldr	r3, [r0, #0]
    9ee4:	e002      	b.n	9eec <_printf_i+0x164>
    9ee6:	0655      	lsls	r5, r2, #25
    9ee8:	d5fb      	bpl.n	9ee2 <_printf_i+0x15a>
    9eea:	8803      	ldrh	r3, [r0, #0]
    9eec:	07d0      	lsls	r0, r2, #31
    9eee:	bf44      	itt	mi
    9ef0:	f042 0220 	orrmi.w	r2, r2, #32
    9ef4:	6022      	strmi	r2, [r4, #0]
    9ef6:	b91b      	cbnz	r3, 9f00 <_printf_i+0x178>
    9ef8:	6822      	ldr	r2, [r4, #0]
    9efa:	f022 0220 	bic.w	r2, r2, #32
    9efe:	6022      	str	r2, [r4, #0]
    9f00:	2210      	movs	r2, #16
    9f02:	e7b1      	b.n	9e68 <_printf_i+0xe0>
    9f04:	4675      	mov	r5, lr
    9f06:	fbb3 f0f2 	udiv	r0, r3, r2
    9f0a:	fb02 3310 	mls	r3, r2, r0, r3
    9f0e:	5ccb      	ldrb	r3, [r1, r3]
    9f10:	f805 3d01 	strb.w	r3, [r5, #-1]!
    9f14:	4603      	mov	r3, r0
    9f16:	2800      	cmp	r0, #0
    9f18:	d1f5      	bne.n	9f06 <_printf_i+0x17e>
    9f1a:	e7b7      	b.n	9e8c <_printf_i+0x104>
    9f1c:	6808      	ldr	r0, [r1, #0]
    9f1e:	681a      	ldr	r2, [r3, #0]
    9f20:	6949      	ldr	r1, [r1, #20]
    9f22:	f010 0f80 	tst.w	r0, #128	; 0x80
    9f26:	d004      	beq.n	9f32 <_printf_i+0x1aa>
    9f28:	1d10      	adds	r0, r2, #4
    9f2a:	6018      	str	r0, [r3, #0]
    9f2c:	6813      	ldr	r3, [r2, #0]
    9f2e:	6019      	str	r1, [r3, #0]
    9f30:	e007      	b.n	9f42 <_printf_i+0x1ba>
    9f32:	f010 0f40 	tst.w	r0, #64	; 0x40
    9f36:	f102 0004 	add.w	r0, r2, #4
    9f3a:	6018      	str	r0, [r3, #0]
    9f3c:	6813      	ldr	r3, [r2, #0]
    9f3e:	d0f6      	beq.n	9f2e <_printf_i+0x1a6>
    9f40:	8019      	strh	r1, [r3, #0]
    9f42:	2300      	movs	r3, #0
    9f44:	6123      	str	r3, [r4, #16]
    9f46:	4675      	mov	r5, lr
    9f48:	e7b1      	b.n	9eae <_printf_i+0x126>
    9f4a:	681a      	ldr	r2, [r3, #0]
    9f4c:	1d11      	adds	r1, r2, #4
    9f4e:	6019      	str	r1, [r3, #0]
    9f50:	6815      	ldr	r5, [r2, #0]
    9f52:	6862      	ldr	r2, [r4, #4]
    9f54:	2100      	movs	r1, #0
    9f56:	4628      	mov	r0, r5
    9f58:	f000 f83a 	bl	9fd0 <memchr>
    9f5c:	b108      	cbz	r0, 9f62 <_printf_i+0x1da>
    9f5e:	1b40      	subs	r0, r0, r5
    9f60:	6060      	str	r0, [r4, #4]
    9f62:	6863      	ldr	r3, [r4, #4]
    9f64:	6123      	str	r3, [r4, #16]
    9f66:	2300      	movs	r3, #0
    9f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    9f6c:	e79f      	b.n	9eae <_printf_i+0x126>
    9f6e:	6923      	ldr	r3, [r4, #16]
    9f70:	462a      	mov	r2, r5
    9f72:	4639      	mov	r1, r7
    9f74:	4630      	mov	r0, r6
    9f76:	47c0      	blx	r8
    9f78:	3001      	adds	r0, #1
    9f7a:	d0a2      	beq.n	9ec2 <_printf_i+0x13a>
    9f7c:	6823      	ldr	r3, [r4, #0]
    9f7e:	079b      	lsls	r3, r3, #30
    9f80:	d507      	bpl.n	9f92 <_printf_i+0x20a>
    9f82:	2500      	movs	r5, #0
    9f84:	f104 0919 	add.w	r9, r4, #25
    9f88:	68e3      	ldr	r3, [r4, #12]
    9f8a:	9a03      	ldr	r2, [sp, #12]
    9f8c:	1a9b      	subs	r3, r3, r2
    9f8e:	429d      	cmp	r5, r3
    9f90:	db05      	blt.n	9f9e <_printf_i+0x216>
    9f92:	68e0      	ldr	r0, [r4, #12]
    9f94:	9b03      	ldr	r3, [sp, #12]
    9f96:	4298      	cmp	r0, r3
    9f98:	bfb8      	it	lt
    9f9a:	4618      	movlt	r0, r3
    9f9c:	e793      	b.n	9ec6 <_printf_i+0x13e>
    9f9e:	2301      	movs	r3, #1
    9fa0:	464a      	mov	r2, r9
    9fa2:	4639      	mov	r1, r7
    9fa4:	4630      	mov	r0, r6
    9fa6:	47c0      	blx	r8
    9fa8:	3001      	adds	r0, #1
    9faa:	d08a      	beq.n	9ec2 <_printf_i+0x13a>
    9fac:	3501      	adds	r5, #1
    9fae:	e7eb      	b.n	9f88 <_printf_i+0x200>
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d1a7      	bne.n	9f04 <_printf_i+0x17c>
    9fb4:	780b      	ldrb	r3, [r1, #0]
    9fb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    9fba:	f104 0542 	add.w	r5, r4, #66	; 0x42
    9fbe:	e765      	b.n	9e8c <_printf_i+0x104>
    9fc0:	0000a902 	.word	0x0000a902
    9fc4:	0000a8f1 	.word	0x0000a8f1
	...

00009fd0 <memchr>:
    9fd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9fd4:	2a10      	cmp	r2, #16
    9fd6:	db2b      	blt.n	a030 <memchr+0x60>
    9fd8:	f010 0f07 	tst.w	r0, #7
    9fdc:	d008      	beq.n	9ff0 <memchr+0x20>
    9fde:	f810 3b01 	ldrb.w	r3, [r0], #1
    9fe2:	3a01      	subs	r2, #1
    9fe4:	428b      	cmp	r3, r1
    9fe6:	d02d      	beq.n	a044 <memchr+0x74>
    9fe8:	f010 0f07 	tst.w	r0, #7
    9fec:	b342      	cbz	r2, a040 <memchr+0x70>
    9fee:	d1f6      	bne.n	9fde <memchr+0xe>
    9ff0:	b4f0      	push	{r4, r5, r6, r7}
    9ff2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    9ff6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    9ffa:	f022 0407 	bic.w	r4, r2, #7
    9ffe:	f07f 0700 	mvns.w	r7, #0
    a002:	2300      	movs	r3, #0
    a004:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a008:	3c08      	subs	r4, #8
    a00a:	ea85 0501 	eor.w	r5, r5, r1
    a00e:	ea86 0601 	eor.w	r6, r6, r1
    a012:	fa85 f547 	uadd8	r5, r5, r7
    a016:	faa3 f587 	sel	r5, r3, r7
    a01a:	fa86 f647 	uadd8	r6, r6, r7
    a01e:	faa5 f687 	sel	r6, r5, r7
    a022:	b98e      	cbnz	r6, a048 <memchr+0x78>
    a024:	d1ee      	bne.n	a004 <memchr+0x34>
    a026:	bcf0      	pop	{r4, r5, r6, r7}
    a028:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a02c:	f002 0207 	and.w	r2, r2, #7
    a030:	b132      	cbz	r2, a040 <memchr+0x70>
    a032:	f810 3b01 	ldrb.w	r3, [r0], #1
    a036:	3a01      	subs	r2, #1
    a038:	ea83 0301 	eor.w	r3, r3, r1
    a03c:	b113      	cbz	r3, a044 <memchr+0x74>
    a03e:	d1f8      	bne.n	a032 <memchr+0x62>
    a040:	2000      	movs	r0, #0
    a042:	4770      	bx	lr
    a044:	3801      	subs	r0, #1
    a046:	4770      	bx	lr
    a048:	2d00      	cmp	r5, #0
    a04a:	bf06      	itte	eq
    a04c:	4635      	moveq	r5, r6
    a04e:	3803      	subeq	r0, #3
    a050:	3807      	subne	r0, #7
    a052:	f015 0f01 	tst.w	r5, #1
    a056:	d107      	bne.n	a068 <memchr+0x98>
    a058:	3001      	adds	r0, #1
    a05a:	f415 7f80 	tst.w	r5, #256	; 0x100
    a05e:	bf02      	ittt	eq
    a060:	3001      	addeq	r0, #1
    a062:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a066:	3001      	addeq	r0, #1
    a068:	bcf0      	pop	{r4, r5, r6, r7}
    a06a:	3801      	subs	r0, #1
    a06c:	4770      	bx	lr
    a06e:	bf00      	nop

0000a070 <memmove>:
    a070:	4288      	cmp	r0, r1
    a072:	b510      	push	{r4, lr}
    a074:	eb01 0302 	add.w	r3, r1, r2
    a078:	d803      	bhi.n	a082 <memmove+0x12>
    a07a:	1e42      	subs	r2, r0, #1
    a07c:	4299      	cmp	r1, r3
    a07e:	d10c      	bne.n	a09a <memmove+0x2a>
    a080:	bd10      	pop	{r4, pc}
    a082:	4298      	cmp	r0, r3
    a084:	d2f9      	bcs.n	a07a <memmove+0xa>
    a086:	1881      	adds	r1, r0, r2
    a088:	1ad2      	subs	r2, r2, r3
    a08a:	42d3      	cmn	r3, r2
    a08c:	d100      	bne.n	a090 <memmove+0x20>
    a08e:	bd10      	pop	{r4, pc}
    a090:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    a094:	f801 4d01 	strb.w	r4, [r1, #-1]!
    a098:	e7f7      	b.n	a08a <memmove+0x1a>
    a09a:	f811 4b01 	ldrb.w	r4, [r1], #1
    a09e:	f802 4f01 	strb.w	r4, [r2, #1]!
    a0a2:	e7eb      	b.n	a07c <memmove+0xc>

0000a0a4 <_realloc_r>:
    a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0a6:	4607      	mov	r7, r0
    a0a8:	4614      	mov	r4, r2
    a0aa:	460e      	mov	r6, r1
    a0ac:	b921      	cbnz	r1, a0b8 <_realloc_r+0x14>
    a0ae:	4611      	mov	r1, r2
    a0b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a0b4:	f7ff bc06 	b.w	98c4 <_malloc_r>
    a0b8:	b922      	cbnz	r2, a0c4 <_realloc_r+0x20>
    a0ba:	f7ff fbb5 	bl	9828 <_free_r>
    a0be:	4625      	mov	r5, r4
    a0c0:	4628      	mov	r0, r5
    a0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0c4:	f000 f814 	bl	a0f0 <_malloc_usable_size_r>
    a0c8:	4284      	cmp	r4, r0
    a0ca:	d90f      	bls.n	a0ec <_realloc_r+0x48>
    a0cc:	4621      	mov	r1, r4
    a0ce:	4638      	mov	r0, r7
    a0d0:	f7ff fbf8 	bl	98c4 <_malloc_r>
    a0d4:	4605      	mov	r5, r0
    a0d6:	2800      	cmp	r0, #0
    a0d8:	d0f2      	beq.n	a0c0 <_realloc_r+0x1c>
    a0da:	4631      	mov	r1, r6
    a0dc:	4622      	mov	r2, r4
    a0de:	f7ff fb8f 	bl	9800 <memcpy>
    a0e2:	4631      	mov	r1, r6
    a0e4:	4638      	mov	r0, r7
    a0e6:	f7ff fb9f 	bl	9828 <_free_r>
    a0ea:	e7e9      	b.n	a0c0 <_realloc_r+0x1c>
    a0ec:	4635      	mov	r5, r6
    a0ee:	e7e7      	b.n	a0c0 <_realloc_r+0x1c>

0000a0f0 <_malloc_usable_size_r>:
    a0f0:	f851 0c04 	ldr.w	r0, [r1, #-4]
    a0f4:	2800      	cmp	r0, #0
    a0f6:	f1a0 0004 	sub.w	r0, r0, #4
    a0fa:	bfbc      	itt	lt
    a0fc:	580b      	ldrlt	r3, [r1, r0]
    a0fe:	18c0      	addlt	r0, r0, r3
    a100:	4770      	bx	lr
    a102:	0000      	movs	r0, r0
    a104:	682f2e2e 	.word	0x682f2e2e
    a108:	732f6c61 	.word	0x732f6c61
    a10c:	682f6372 	.word	0x682f6372
    a110:	615f6c61 	.word	0x615f6c61
    a114:	615f6364 	.word	0x615f6364
    a118:	636e7973 	.word	0x636e7973
    a11c:	0000632e 	.word	0x0000632e
    a120:	682f2e2e 	.word	0x682f2e2e
    a124:	732f6c61 	.word	0x732f6c61
    a128:	682f6372 	.word	0x682f6372
    a12c:	635f6c61 	.word	0x635f6c61
    a130:	735f6372 	.word	0x735f6372
    a134:	2e636e79 	.word	0x2e636e79
    a138:	00000063 	.word	0x00000063
    a13c:	682f2e2e 	.word	0x682f2e2e
    a140:	732f6c61 	.word	0x732f6c61
    a144:	682f6372 	.word	0x682f6372
    a148:	665f6c61 	.word	0x665f6c61
    a14c:	6873616c 	.word	0x6873616c
    a150:	0000632e 	.word	0x0000632e
    a154:	682f2e2e 	.word	0x682f2e2e
    a158:	732f6c61 	.word	0x732f6c61
    a15c:	682f6372 	.word	0x682f6372
    a160:	695f6c61 	.word	0x695f6c61
    a164:	6d5f6332 	.word	0x6d5f6332
    a168:	7973615f 	.word	0x7973615f
    a16c:	632e636e 	.word	0x632e636e
    a170:	00000000 	.word	0x00000000
    a174:	682f2e2e 	.word	0x682f2e2e
    a178:	732f6c61 	.word	0x732f6c61
    a17c:	682f6372 	.word	0x682f6372
    a180:	695f6c61 	.word	0x695f6c61
    a184:	00632e6f 	.word	0x00632e6f
    a188:	682f2e2e 	.word	0x682f2e2e
    a18c:	732f6c61 	.word	0x732f6c61
    a190:	682f6372 	.word	0x682f6372
    a194:	735f6c61 	.word	0x735f6c61
    a198:	6d5f6970 	.word	0x6d5f6970
    a19c:	616d645f 	.word	0x616d645f
    a1a0:	0000632e 	.word	0x0000632e
    a1a4:	682f2e2e 	.word	0x682f2e2e
    a1a8:	732f6c61 	.word	0x732f6c61
    a1ac:	682f6372 	.word	0x682f6372
    a1b0:	735f6c61 	.word	0x735f6c61
    a1b4:	6d5f6970 	.word	0x6d5f6970
    a1b8:	6e79735f 	.word	0x6e79735f
    a1bc:	00632e63 	.word	0x00632e63
    a1c0:	682f2e2e 	.word	0x682f2e2e
    a1c4:	732f6c61 	.word	0x732f6c61
    a1c8:	682f6372 	.word	0x682f6372
    a1cc:	745f6c61 	.word	0x745f6c61
    a1d0:	72656d69 	.word	0x72656d69
    a1d4:	0000632e 	.word	0x0000632e
    a1d8:	682f2e2e 	.word	0x682f2e2e
    a1dc:	732f6c61 	.word	0x732f6c61
    a1e0:	682f6372 	.word	0x682f6372
    a1e4:	755f6c61 	.word	0x755f6c61
    a1e8:	74726173 	.word	0x74726173
    a1ec:	7973615f 	.word	0x7973615f
    a1f0:	632e636e 	.word	0x632e636e
    a1f4:	00000000 	.word	0x00000000
    a1f8:	682f2e2e 	.word	0x682f2e2e
    a1fc:	752f6c61 	.word	0x752f6c61
    a200:	736c6974 	.word	0x736c6974
    a204:	6372732f 	.word	0x6372732f
    a208:	6974752f 	.word	0x6974752f
    a20c:	6c5f736c 	.word	0x6c5f736c
    a210:	2e747369 	.word	0x2e747369
    a214:	00000063 	.word	0x00000063
    a218:	682f2e2e 	.word	0x682f2e2e
    a21c:	752f6c61 	.word	0x752f6c61
    a220:	736c6974 	.word	0x736c6974
    a224:	6372732f 	.word	0x6372732f
    a228:	6974752f 	.word	0x6974752f
    a22c:	725f736c 	.word	0x725f736c
    a230:	62676e69 	.word	0x62676e69
    a234:	65666675 	.word	0x65666675
    a238:	00632e72 	.word	0x00632e72

0000a23c <_adcs>:
    a23c:	01000000 0003000c 00041807 00000000     ................
    a24c:	0014080b 00010000 000c0100 18040003     ................
    a25c:	00000004 080b0000 00000014 682f2e2e     ............../h
    a26c:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    a27c:	00000000                                ....

0000a280 <_cfgs>:
    a280:	00200600 08068000 00200400 08068000     .. ....... .....
    a290:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    a2c0:	00201300 14000000 00000000 00000000     .. .............
	...

0000a380 <user_mux_confs>:
	...
    a3ac:	04030201 04030201 00000000 00000000     ................
	...

0000a3c4 <channel_confs>:
    a3c4:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000a404 <interrupt_cfg>:
    a404:	00000002 00000002 00000002 00000002     ................
	...
    a484:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    a494:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    a4a4:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    a4b4:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    a4c4:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    a4d4:	43000800 43000c00                       ...C...C

0000a4dc <_usarts>:
    a4dc:	00000000 40100004 00030000 00700002     .......@......p.
    a4ec:	0000aaaa 00000000 00000001 40100004     ...............@
    a4fc:	00030000 00700002 0000aaaa 00000000     ......p.........
    a50c:	00000002 40100004 00030000 00700002     .......@......p.
    a51c:	0000f62b 00000000 00000004 40100004     +..............@
    a52c:	00030000 00700002 0000aaaa 00000000     ......p.........
    a53c:	00000006 40100004 00030000 00700002     .......@......p.
    a54c:	0000aaaa 00000000                       ........

0000a554 <_i2cms>:
    a554:	00000005 00200014 00000100 0000e6e5     ...... .........
    a564:	00d70000 02dc6c00                       .....l..

0000a56c <sercomspi_regs>:
    a56c:	0020000c 00020000 00000000 01ff00fe     .. .............
    a57c:	20000c03 00000000 00000000 ff000600     ... ............
    a58c:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    a59c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    a5ac:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    a5bc:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000a5cc <_tcs>:
    a5cc:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    a5dc:	00000000 006c0001 00000308 00000021     ......l.....!...
    a5ec:	00003a98 00000000 006d0002 00000308     .:........m.....
    a5fc:	00000021 00003a98 00000000 006e0003     !....:........n.
    a60c:	00000308 00000021 00003a98 00000000     ....!....:......
    a61c:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    a62c:	0000632e                                .c..

0000a630 <_usb_ep_cfgs>:
    a630:	20000cac 00000000 00000040 00000000     ... ....@.......
	...
    a648:	20000ca4 00000000 00000008 20000c64     ... ........d.. 
    a658:	20000c5c 00080040 00000000 00000000     \.. @...........
	...
    a670:	20000c54 00080000                       T.. ....

0000a678 <grid_module_mux_lookup>:
    a678:	05040100 0d0c0908 07060302 0f0e0b0a     ................
    a688:	504f4f4c 4b434954 32302520 45520a78     LOOPTICK %02x.RE
    a698:	49544c41 2520454d 0a783230 4b534154     ALTIME %02x.TASK
    a6a8:	30252030 540a7832 314b5341 32302520     0 %02x.TASK1 %02
    a6b8:	41540a78 20324b53 78323025 5341540a     x.TASK2 %02x.TAS
    a6c8:	2520334b 0a783230 4b534154 30252034     K3 %02x.TASK4 %0
    a6d8:	000a7832 10100000                                2x...

0000a6dd <grid_module_din_buffer_size>:
	...

0000a6de <grid_module_ain_buffer_size>:
    a6de:	30251010                                         .

0000a6df <grid_module_led_buffer_size>:
    a6df:	38302510 00000078 32302500 00000078     .%08x....%02x...
    a6ef:	25632500 25632563 38302563 30632578     .%c%c%c%c%08x%c0
    a6ff:	00000a30 52475b00 205d4449 20643325     0....[GRID] %3d 
    a70f:	20643425 20643425 5b206425 4944494d     %4d %4d %d [MIDI
    a71f:	6843205d 6425203a 6d432020 25203a64     ] Ch: %d  Cmd: %
    a72f:	50202064 6d617261 25203a31 50202064     d  Param1: %d  P
    a73f:	6d617261 25203a32 00000a64 52475b00     aram2: %d....[GR
    a74f:	205d4449 20643325 20643425 20643425     ID] %3d %4d %4d 
    a75f:	5b206425 4259454b 4452414f 654b205d     %d [KEYBOARD] Ke
    a76f:	25203a79 6f4d2064 25203a64 6d432064     y: %d Mod: %d Cm
    a77f:	25203a64 00000a64 4e555b00 574f4e4b     d: %d....[UNKNOW
    a78f:	2d205d4e 7250203e 636f746f 203a6c6f     N] -> Protocol: 
    a79f:	000a6425 25632500 32302563 32302578     %d...%c%c%02x%02
    a7af:	32302578 32302578 32302578 00632578     x%02x%02x%02x%c.
    a7bf:	25632500 25783230 25783230 25783230     .%c%02x%02x%02x%
    a7cf:	25783230 00000063 25632500 25783230     02x%c....%c%02x%
    a7df:	25783230 25783230 25783230 25783230     02x%02x%02x%02x%
    a7ef:	00000063 0a303000 09010500                       c....00..

0000a7f8 <keyboard_report_desc>:
    a7f8:	06090105 070501a1 e729e019 01250015     ..........)...%.
    a808:	08950175 01810281 65290019 65250015     u.........)e..%e
    a818:	06950875 08050081 05290119 01250015     u.........)...%.
    a828:	05950175 03950291 00c00191              u...........

0000a834 <mouse_report_desc>:
    a834:	02090105 010901a1 090500a1 03290119     ..............).
    a844:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    a854:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    a864:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    a874:	73752f65 2e636462 00000063              e/usbdc.c...

0000a880 <__sf_fake_stderr>:
	...

0000a8a0 <__sf_fake_stdin>:
	...

0000a8c0 <__sf_fake_stdout>:
	...
    a8e0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    a8f0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    a900:	31300046 35343332 39383736 64636261     F.0123456789abcd
    a910:	00006665                                ef..

0000a914 <_init>:
    a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a916:	bf00      	nop
    a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a91a:	bc08      	pop	{r3}
    a91c:	469e      	mov	lr, r3
    a91e:	4770      	bx	lr

0000a920 <__init_array_start>:
    a920:	00000289 	.word	0x00000289

0000a924 <_fini>:
    a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a926:	bf00      	nop
    a928:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a92a:	bc08      	pop	{r3}
    a92c:	469e      	mov	lr, r3
    a92e:	4770      	bx	lr

0000a930 <__fini_array_start>:
    a930:	00000265 	.word	0x00000265
