
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e66c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000e66c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          0000782c  200005c0  0000ec30  000205c0  2**4
                  ALLOC
  5 .stack        00010004  20007dec  0001645c  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   00092791  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c118  00000000  00000000  000b2dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030a86  00000000  00000000  000beeec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002320  00000000  00000000  000ef972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000032a8  00000000  00000000  000f1c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004865e  00000000  00000000  000f4f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000403d0  00000000  00000000  0013d598  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011ac91  00000000  00000000  0017d968  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000068c8  00000000  00000000  002985fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
	grid_led_hardware_start_transfer(mod);
	
}


void grid_hardwaretest_port_test(uint32_t loop){
       0:	f0 7d 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     .}. ............

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
      6c:	c9 6c 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .l..............
	tmp &= ~PORT_PINCFG_PMUXEN;
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	tmp &= ~PORT_PINCFG_PMUXEN;
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      ac:	ed 02 00 00 ed 02 00 00 d5 68 00 00 e9 68 00 00     .........h...h..
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      bc:	0d 67 00 00 19 67 00 00 25 67 00 00 31 67 00 00     .g...g..%g..1g..
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      cc:	3d 67 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     =g..............
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      f4:	fd 6a 00 00 e5 77 00 00 f9 77 00 00 0d 78 00 00     .j...w...w...x..
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     104:	21 78 00 00 35 78 00 00 49 78 00 00 5d 78 00 00     !x..5x..Ix..]x..
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     114:	71 78 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     qx..............
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     124:	ed 02 00 00 85 78 00 00 99 78 00 00 ad 78 00 00     .....x...x...x..
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     134:	c1 78 00 00 d5 78 00 00 e9 78 00 00 fd 78 00 00     .x...x...x...x..
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(PB09, GPIO_PIN_FUNCTION_OFF);
			

		
	if (loop%1000 == 0){
     144:	11 79 00 00 25 79 00 00 39 79 00 00 4d 79 00 00     .y..%y..9y..My..
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     154:	61 79 00 00 75 79 00 00 89 79 00 00 9d 79 00 00     ay..uy...y...y..
     164:	b1 79 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .y..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 cd 98 00 00     ................
     184:	d9 98 00 00 e5 98 00 00 f1 98 00 00 00 00 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
			
		gpio_set_pin_level(PB08, true);
		gpio_set_pin_level(PB09, true);
			
	}
	if (loop%1000 == 750){
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 d5 85 00 00 e9 85 00 00     ................
     1f4:	fd 85 00 00 11 86 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     214:	ed 02 00 00 a1 63 00 00 b5 63 00 00 c9 63 00 00     .....c...c...c..
     224:	dd 63 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .c..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	if (loop%1000 == 500){
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000e66c 	.word	0x0000e66c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000e66c 	.word	0x0000e66c
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000e66c 	.word	0x0000e66c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000bc19 	.word	0x0000bc19
     2e8:	0000a811 	.word	0x0000a811

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000e66c 	.word	0x0000e66c
     36c:	200005bc 	.word	0x200005bc
     370:	20007dec 	.word	0x20007dec
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000c3f9 	.word	0x0000c3f9
     384:	0000a2b5 	.word	0x0000a2b5

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20001058 	.word	0x20001058
     40c:	20001154 	.word	0x20001154
     410:	43001c00 	.word	0x43001c00
     414:	00004745 	.word	0x00004745
     418:	000047e9 	.word	0x000047e9
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	2000122c 	.word	0x2000122c
     4b0:	20000ff4 	.word	0x20000ff4
     4b4:	43002000 	.word	0x43002000
     4b8:	00004745 	.word	0x00004745
     4bc:	000047e9 	.word	0x000047e9
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000ff0 	.word	0x20000ff0
     4e8:	00004a85 	.word	0x00004a85

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00004b09 	.word	0x00004b09

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fd4 	.word	0x20000fd4
     54c:	00004b29 	.word	0x00004b29

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001298 	.word	0x20001298
     718:	00004cd5 	.word	0x00004cd5
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	20001084 	.word	0x20001084
     7bc:	000055b5 	.word	0x000055b5
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	200010d8 	.word	0x200010d8
     860:	000055b5 	.word	0x000055b5
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	2000104c 	.word	0x2000104c
     8f8:	0000583d 	.word	0x0000583d
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f4c 	.word	0x20000f4c
     a04:	00004ec5 	.word	0x00004ec5
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	2000118c 	.word	0x2000118c
     aa8:	000055b5 	.word	0x000055b5
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	2000100c 	.word	0x2000100c
     b54:	00004c09 	.word	0x00004c09
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	200011dc 	.word	0x200011dc
     bf8:	000055b5 	.word	0x000055b5
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001128 	.word	0x20001128
     cfc:	00005129 	.word	0x00005129
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00004ab5 	.word	0x00004ab5

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00005b05 	.word	0x00005b05
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000d8c8 	.word	0x0000d8c8
     e14:	00005e5d 	.word	0x00005e5d
     e18:	200010d4 	.word	0x200010d4
     e1c:	40002000 	.word	0x40002000
     e20:	000098fd 	.word	0x000098fd

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00006421 	.word	0x00006421
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	00006cc1 	.word	0x00006cc1
    1100:	40002400 	.word	0x40002400
    1104:	20000f94 	.word	0x20000f94
    1108:	000052d1 	.word	0x000052d1
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	000085cd 	.word	0x000085cd
    1134:	40003800 	.word	0x40003800
    1138:	20001278 	.word	0x20001278
    113c:	40003c00 	.word	0x40003c00
    1140:	2000116c 	.word	0x2000116c
    1144:	4101a000 	.word	0x4101a000
    1148:	20000fb4 	.word	0x20000fb4
    114c:	4101c000 	.word	0x4101c000
    1150:	20001258 	.word	0x20001258
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4604      	mov	r4, r0
    1164:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1166:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1168:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    116a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    116c:	2300      	movs	r3, #0
    116e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1170:	0048      	lsls	r0, r1, #1
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <grid_ain_channel_init+0x38>)
    1174:	4798      	blx	r3
    1176:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1178:	b14d      	cbz	r5, 118e <grid_ain_channel_init+0x2e>
    117a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    117c:	4619      	mov	r1, r3
    117e:	6822      	ldr	r2, [r4, #0]
    1180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	7922      	ldrb	r2, [r4, #4]
    118a:	429a      	cmp	r2, r3
    118c:	d8f7      	bhi.n	117e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    118e:	2000      	movs	r0, #0
    1190:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    1192:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	bf00      	nop
    1198:	0000c441 	.word	0x0000c441

0000119c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11a0:	4605      	mov	r5, r0
    11a2:	4689      	mov	r9, r1
    11a4:	4617      	mov	r7, r2
    11a6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11a8:	0100      	lsls	r0, r0, #4
    11aa:	4b0c      	ldr	r3, [pc, #48]	; (11dc <grid_ain_init+0x40>)
    11ac:	4798      	blx	r3
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <grid_ain_init+0x44>)
    11b0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11b2:	b185      	cbz	r5, 11d6 <grid_ain_init+0x3a>
    11b4:	3d01      	subs	r5, #1
    11b6:	b2ed      	uxtb	r5, r5
    11b8:	3501      	adds	r5, #1
    11ba:	012d      	lsls	r5, r5, #4
    11bc:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11be:	469a      	mov	sl, r3
    11c0:	4e08      	ldr	r6, [pc, #32]	; (11e4 <grid_ain_init+0x48>)
    11c2:	4643      	mov	r3, r8
    11c4:	463a      	mov	r2, r7
    11c6:	4649      	mov	r1, r9
    11c8:	f8da 0000 	ldr.w	r0, [sl]
    11cc:	4420      	add	r0, r4
    11ce:	47b0      	blx	r6
    11d0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    11d2:	42ac      	cmp	r4, r5
    11d4:	d1f5      	bne.n	11c2 <grid_ain_init+0x26>
	}

	return 0;
}
    11d6:	2000      	movs	r0, #0
    11d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11dc:	0000c441 	.word	0x0000c441
    11e0:	200022e0 	.word	0x200022e0
    11e4:	00001161 	.word	0x00001161

000011e8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    11e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    11ec:	0100      	lsls	r0, r0, #4
    11ee:	4b3c      	ldr	r3, [pc, #240]	; (12e0 <grid_ain_add_sample+0xf8>)
    11f0:	f8d3 a000 	ldr.w	sl, [r3]
    11f4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    11f8:	f89c 6004 	ldrb.w	r6, [ip, #4]
    11fc:	2e00      	cmp	r6, #0
    11fe:	d05b      	beq.n	12b8 <grid_ain_add_sample+0xd0>
    1200:	f85a 5000 	ldr.w	r5, [sl, r0]
    1204:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1206:	2200      	movs	r2, #0
    1208:	4690      	mov	r8, r2
    120a:	4691      	mov	r9, r2
    120c:	4696      	mov	lr, r2
    120e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1212:	4614      	mov	r4, r2
    1214:	fa5f fb82 	uxtb.w	fp, r2
    1218:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    121c:	441c      	add	r4, r3
		
		if (current > maximum){
    121e:	4573      	cmp	r3, lr
    1220:	bf84      	itt	hi
    1222:	46d8      	movhi	r8, fp
			maximum = current;
    1224:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1226:	42bb      	cmp	r3, r7
    1228:	bf3c      	itt	cc
    122a:	46d9      	movcc	r9, fp
			minimum = current;
    122c:	461f      	movcc	r7, r3
    122e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1230:	b2d3      	uxtb	r3, r2
    1232:	42b3      	cmp	r3, r6
    1234:	d3ee      	bcc.n	1214 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1236:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    123a:	b2b6      	uxth	r6, r6
    123c:	428e      	cmp	r6, r1
    123e:	d23f      	bcs.n	12c0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1240:	f85a 3000 	ldr.w	r3, [sl, r0]
    1244:	440c      	add	r4, r1
    1246:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    124a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    124c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1250:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1254:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1258:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    125c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1260:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1262:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1266:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1268:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    126a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    126c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1270:	b29b      	uxth	r3, r3
    1272:	408b      	lsls	r3, r1
    1274:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1276:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    127a:	1b92      	subs	r2, r2, r6
    127c:	2a00      	cmp	r2, #0
    127e:	bfb8      	it	lt
    1280:	4252      	neglt	r2, r2
    1282:	2601      	movs	r6, #1
    1284:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1288:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    128c:	42be      	cmp	r6, r7
    128e:	d020      	beq.n	12d2 <grid_ain_add_sample+0xea>
    1290:	4282      	cmp	r2, r0
    1292:	dc08      	bgt.n	12a6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1294:	2201      	movs	r2, #1
    1296:	fa02 f505 	lsl.w	r5, r2, r5
    129a:	fa02 f101 	lsl.w	r1, r2, r1
    129e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12a0:	428f      	cmp	r7, r1
    12a2:	d000      	beq.n	12a6 <grid_ain_add_sample+0xbe>
    12a4:	b9c7      	cbnz	r7, 12d8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12a6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12aa:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12ae:	2001      	movs	r0, #1
    12b0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12b8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12ba:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12bc:	2400      	movs	r4, #0
    12be:	e7ba      	b.n	1236 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    12c0:	f85a 3000 	ldr.w	r3, [sl, r0]
    12c4:	440c      	add	r4, r1
    12c6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    12ca:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    12cc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    12d0:	e7be      	b.n	1250 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    12d2:	2000      	movs	r0, #0
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	2000      	movs	r0, #0
	}
	
}
    12da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12de:	bf00      	nop
    12e0:	200022e0 	.word	0x200022e0

000012e4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    12e4:	4b02      	ldr	r3, [pc, #8]	; (12f0 <grid_ain_get_changed+0xc>)
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    12ec:	7b00      	ldrb	r0, [r0, #12]
    12ee:	4770      	bx	lr
    12f0:	200022e0 	.word	0x200022e0

000012f4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <grid_ain_get_average+0x28>)
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    12fc:	2300      	movs	r3, #0
    12fe:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1300:	1fcb      	subs	r3, r1, #7
    1302:	b2db      	uxtb	r3, r3
    1304:	2b07      	cmp	r3, #7
    1306:	d806      	bhi.n	1316 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1308:	8903      	ldrh	r3, [r0, #8]
    130a:	7940      	ldrb	r0, [r0, #5]
    130c:	1a40      	subs	r0, r0, r1
    130e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1312:	b280      	uxth	r0, r0
    1314:	4770      	bx	lr
    1316:	2000      	movs	r0, #0
    1318:	e7fb      	b.n	1312 <grid_ain_get_average+0x1e>
    131a:	bf00      	nop
    131c:	200022e0 	.word	0x200022e0

00001320 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4604      	mov	r4, r0
    1324:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1326:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1328:	2300      	movs	r3, #0
    132a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    132c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    132e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1330:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1332:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1334:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1336:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1338:	4608      	mov	r0, r1
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <grid_buffer_init+0x3c>)
    133c:	4798      	blx	r3
    133e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1340:	b900      	cbnz	r0, 1344 <grid_buffer_init+0x24>
    1342:	e7fe      	b.n	1342 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1344:	b145      	cbz	r5, 1358 <grid_buffer_init+0x38>
    1346:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1348:	4619      	mov	r1, r3
    134a:	6862      	ldr	r2, [r4, #4]
    134c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    134e:	3301      	adds	r3, #1
    1350:	b29b      	uxth	r3, r3
    1352:	8822      	ldrh	r2, [r4, #0]
    1354:	429a      	cmp	r2, r3
    1356:	d8f8      	bhi.n	134a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1358:	2001      	movs	r0, #1
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	0000c441 	.word	0x0000c441

00001360 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1360:	8903      	ldrh	r3, [r0, #8]
    1362:	8a02      	ldrh	r2, [r0, #16]
    1364:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1366:	bf8f      	iteee	hi
    1368:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    136a:	8800      	ldrhls	r0, [r0, #0]
    136c:	18c0      	addls	r0, r0, r3
    136e:	1a80      	subls	r0, r0, r2
    1370:	b280      	uxth	r0, r0

	return space;

	
	
}
    1372:	4770      	bx	lr

00001374 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    1374:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1376:	8903      	ldrh	r3, [r0, #8]
    1378:	8a02      	ldrh	r2, [r0, #16]
    137a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    137c:	bf9c      	itt	ls
    137e:	8804      	ldrhls	r4, [r0, #0]
    1380:	191b      	addls	r3, r3, r4
    1382:	1a9b      	subs	r3, r3, r2
    1384:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    1386:	428b      	cmp	r3, r1
    1388:	d90a      	bls.n	13a0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    138a:	440a      	add	r2, r1
    138c:	8804      	ldrh	r4, [r0, #0]
    138e:	fb92 f3f4 	sdiv	r3, r2, r4
    1392:	fb04 2213 	mls	r2, r4, r3, r2
    1396:	8242      	strh	r2, [r0, #18]
		
		return length;
    1398:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    139a:	f85d 4b04 	ldr.w	r4, [sp], #4
    139e:	4770      	bx	lr
		return 0; // failed
    13a0:	2000      	movs	r0, #0
    13a2:	e7fa      	b.n	139a <grid_buffer_write_init+0x26>

000013a4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    13a4:	8a83      	ldrh	r3, [r0, #20]
    13a6:	6842      	ldr	r2, [r0, #4]
    13a8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    13aa:	8a83      	ldrh	r3, [r0, #20]
    13ac:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    13ae:	b29b      	uxth	r3, r3
    13b0:	8801      	ldrh	r1, [r0, #0]
    13b2:	fbb3 f2f1 	udiv	r2, r3, r1
    13b6:	fb01 3312 	mls	r3, r1, r2, r3
    13ba:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    13bc:	2001      	movs	r0, #1
    13be:	4770      	bx	lr

000013c0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    13c0:	8a83      	ldrh	r3, [r0, #20]
    13c2:	8a42      	ldrh	r2, [r0, #18]
    13c4:	429a      	cmp	r2, r3
    13c6:	d000      	beq.n	13ca <grid_buffer_write_acknowledge+0xa>
    13c8:	e7fe      	b.n	13c8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    13ca:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    13cc:	2001      	movs	r0, #1
    13ce:	4770      	bx	lr

000013d0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    13d0:	8983      	ldrh	r3, [r0, #12]
    13d2:	8942      	ldrh	r2, [r0, #10]
    13d4:	429a      	cmp	r2, r3
    13d6:	d000      	beq.n	13da <grid_buffer_read_size+0xa>
    13d8:	e7fe      	b.n	13d8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    13da:	8902      	ldrh	r2, [r0, #8]
    13dc:	429a      	cmp	r2, r3
    13de:	d000      	beq.n	13e2 <grid_buffer_read_size+0x12>
    13e0:	e7fe      	b.n	13e0 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    13e2:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    13e4:	8a05      	ldrh	r5, [r0, #16]
    13e6:	42ab      	cmp	r3, r5
    13e8:	d025      	beq.n	1436 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    13ea:	8804      	ldrh	r4, [r0, #0]
    13ec:	b1fc      	cbz	r4, 142e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    13ee:	4626      	mov	r6, r4
    13f0:	fb93 f2f4 	sdiv	r2, r3, r4
    13f4:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    13f8:	b291      	uxth	r1, r2
    13fa:	428d      	cmp	r5, r1
    13fc:	d01d      	beq.n	143a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    13fe:	6840      	ldr	r0, [r0, #4]
    1400:	5c42      	ldrb	r2, [r0, r1]
    1402:	2a0a      	cmp	r2, #10
    1404:	d114      	bne.n	1430 <grid_buffer_read_size+0x60>
    1406:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1408:	3301      	adds	r3, #1
    140a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    140c:	bcf0      	pop	{r4, r5, r6, r7}
    140e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1410:	fb92 f1f6 	sdiv	r1, r2, r6
    1414:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1418:	b28f      	uxth	r7, r1
    141a:	42bd      	cmp	r5, r7
    141c:	d00f      	beq.n	143e <grid_buffer_read_size+0x6e>
    141e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1420:	5dc1      	ldrb	r1, [r0, r7]
    1422:	290a      	cmp	r1, #10
    1424:	d0f0      	beq.n	1408 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1426:	3301      	adds	r3, #1
    1428:	b29b      	uxth	r3, r3
    142a:	42a3      	cmp	r3, r4
    142c:	d1f0      	bne.n	1410 <grid_buffer_read_size+0x40>
    142e:	e7fe      	b.n	142e <grid_buffer_read_size+0x5e>
    1430:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1432:	2300      	movs	r3, #0
    1434:	e7f7      	b.n	1426 <grid_buffer_read_size+0x56>
		return 0;
    1436:	2000      	movs	r0, #0
    1438:	e7e8      	b.n	140c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    143a:	2000      	movs	r0, #0
    143c:	e7e6      	b.n	140c <grid_buffer_read_size+0x3c>
    143e:	2000      	movs	r0, #0
    1440:	e7e4      	b.n	140c <grid_buffer_read_size+0x3c>

00001442 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1442:	8982      	ldrh	r2, [r0, #12]
    1444:	8943      	ldrh	r3, [r0, #10]
    1446:	4293      	cmp	r3, r2
    1448:	d000      	beq.n	144c <grid_buffer_read_init+0xa>
    144a:	e7fe      	b.n	144a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    144c:	8903      	ldrh	r3, [r0, #8]
    144e:	4293      	cmp	r3, r2
    1450:	d000      	beq.n	1454 <grid_buffer_read_init+0x12>
    1452:	e7fe      	b.n	1452 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1456:	8a05      	ldrh	r5, [r0, #16]
    1458:	42aa      	cmp	r2, r5
    145a:	d031      	beq.n	14c0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    145c:	8804      	ldrh	r4, [r0, #0]
    145e:	b35c      	cbz	r4, 14b8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1460:	4626      	mov	r6, r4
    1462:	fb92 f3f4 	sdiv	r3, r2, r4
    1466:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    146a:	b299      	uxth	r1, r3
    146c:	428d      	cmp	r5, r1
    146e:	d029      	beq.n	14c4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1470:	6847      	ldr	r7, [r0, #4]
    1472:	460b      	mov	r3, r1
    1474:	5c79      	ldrb	r1, [r7, r1]
    1476:	290a      	cmp	r1, #10
    1478:	d11f      	bne.n	14ba <grid_buffer_read_init+0x78>
    147a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    147c:	3301      	adds	r3, #1
    147e:	fb93 f2f4 	sdiv	r2, r3, r4
    1482:	fb04 3312 	mls	r3, r4, r2, r3
    1486:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1488:	1c4b      	adds	r3, r1, #1
    148a:	b29b      	uxth	r3, r3
    148c:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    148e:	4618      	mov	r0, r3
    1490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1492:	fb92 f3f6 	sdiv	r3, r2, r6
    1496:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    149a:	fa1f fe83 	uxth.w	lr, r3
    149e:	4575      	cmp	r5, lr
    14a0:	d012      	beq.n	14c8 <grid_buffer_read_init+0x86>
    14a2:	4673      	mov	r3, lr
    14a4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14a6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    14aa:	f1be 0f0a 	cmp.w	lr, #10
    14ae:	d0e5      	beq.n	147c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    14b0:	3101      	adds	r1, #1
    14b2:	b289      	uxth	r1, r1
    14b4:	42a1      	cmp	r1, r4
    14b6:	d1ec      	bne.n	1492 <grid_buffer_read_init+0x50>
    14b8:	e7fe      	b.n	14b8 <grid_buffer_read_init+0x76>
    14ba:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14bc:	2100      	movs	r1, #0
    14be:	e7f7      	b.n	14b0 <grid_buffer_read_init+0x6e>
		return 0;
    14c0:	2300      	movs	r3, #0
    14c2:	e7e4      	b.n	148e <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    14c4:	2300      	movs	r3, #0
    14c6:	e7e2      	b.n	148e <grid_buffer_read_init+0x4c>
    14c8:	2300      	movs	r3, #0
    14ca:	e7e0      	b.n	148e <grid_buffer_read_init+0x4c>

000014cc <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    14cc:	8983      	ldrh	r3, [r0, #12]
    14ce:	8941      	ldrh	r1, [r0, #10]
    14d0:	4299      	cmp	r1, r3
    14d2:	d00e      	beq.n	14f2 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    14d4:	b410      	push	{r4}
    14d6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    14d8:	6841      	ldr	r1, [r0, #4]
    14da:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    14dc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    14de:	b29b      	uxth	r3, r3
    14e0:	8814      	ldrh	r4, [r2, #0]
    14e2:	fbb3 f1f4 	udiv	r1, r3, r4
    14e6:	fb04 3311 	mls	r3, r4, r1, r3
    14ea:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    14ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    14f0:	4770      	bx	lr
    14f2:	e7fe      	b.n	14f2 <grid_buffer_read_character+0x26>

000014f4 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    14f4:	8983      	ldrh	r3, [r0, #12]
    14f6:	8942      	ldrh	r2, [r0, #10]
    14f8:	429a      	cmp	r2, r3
    14fa:	d000      	beq.n	14fe <grid_buffer_read_acknowledge+0xa>
    14fc:	e7fe      	b.n	14fc <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    14fe:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1500:	2001      	movs	r0, #1
    1502:	4770      	bx	lr

00001504 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma, struct grid_ui_report* p_report){
    1504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1508:	4604      	mov	r4, r0
    150a:	4690      	mov	r8, r2
    150c:	461f      	mov	r7, r3
    150e:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1512:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1516:	4e3b      	ldr	r6, [pc, #236]	; (1604 <grid_port_init+0x100>)
    1518:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    151a:	4641      	mov	r1, r8
    151c:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
    1520:	47b0      	blx	r6
	
	por->ping_report = p_report;
    1522:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1524:	6063      	str	r3, [r4, #4]
	
	por->cooldown = 0;
    1526:	2300      	movs	r3, #0
    1528:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    152a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    152e:	73a2      	strb	r2, [r4, #14]
	
	por->direction = dir;
    1530:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1534:	7362      	strb	r2, [r4, #13]
	
	por->usart	= usart;
    1536:	60a7      	str	r7, [r4, #8]
	por->type		= type;
    1538:	7325      	strb	r5, [r4, #12]
	
	por->tx_double_buffer_status	= 0;
    153a:	8223      	strh	r3, [r4, #16]
	por->rx_double_buffer_status	= 0;
    153c:	6263      	str	r3, [r4, #36]	; 0x24
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    153e:	4619      	mov	r1, r3
    1540:	18e2      	adds	r2, r4, r3
    1542:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1546:	3301      	adds	r3, #1
    1548:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    154c:	d1f8      	bne.n	1540 <grid_port_init+0x3c>
    154e:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    1550:	4619      	mov	r1, r3
    1552:	18e2      	adds	r2, r4, r3
    1554:	f882 1800 	strb.w	r1, [r2, #2048]	; 0x800
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1558:	3301      	adds	r3, #1
    155a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    155e:	d1f8      	bne.n	1552 <grid_port_init+0x4e>
	}
	
	por->partner_fi = 0;
    1560:	2300      	movs	r3, #0
    1562:	f241 0204 	movw	r2, #4100	; 0x1004
    1566:	54a3      	strb	r3, [r4, r2]
	
	por->partner_hwcfg = 0;
    1568:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    156c:	6013      	str	r3, [r2, #0]
	por->partner_status = 1;
    156e:	2201      	movs	r2, #1
    1570:	f241 0307 	movw	r3, #4103	; 0x1007
    1574:	54e2      	strb	r2, [r4, r3]
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    1576:	4295      	cmp	r5, r2
    1578:	d005      	beq.n	1586 <grid_port_init+0x82>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    157a:	2201      	movs	r2, #1
    157c:	f241 0307 	movw	r3, #4103	; 0x1007
    1580:	54e2      	strb	r2, [r4, r3]
    1582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    1586:	2300      	movs	r3, #0
    1588:	f241 0207 	movw	r2, #4103	; 0x1007
    158c:	54a3      	strb	r3, [r4, r2]
		por->partner_fi = 0;
    158e:	f241 0204 	movw	r2, #4100	; 0x1004
    1592:	54a3      	strb	r3, [r4, r2]
		if (por->direction == GRID_MSG_NORTH){
    1594:	7b63      	ldrb	r3, [r4, #13]
    1596:	b2db      	uxtb	r3, r3
    1598:	2b11      	cmp	r3, #17
    159a:	d015      	beq.n	15c8 <grid_port_init+0xc4>
		else if (por->direction == GRID_MSG_EAST){
    159c:	7b63      	ldrb	r3, [r4, #13]
    159e:	b2db      	uxtb	r3, r3
    15a0:	2b12      	cmp	r3, #18
    15a2:	d01b      	beq.n	15dc <grid_port_init+0xd8>
		else if (por->direction == GRID_MSG_SOUTH){
    15a4:	7b63      	ldrb	r3, [r4, #13]
    15a6:	b2db      	uxtb	r3, r3
    15a8:	2b13      	cmp	r3, #19
    15aa:	d021      	beq.n	15f0 <grid_port_init+0xec>
		else if (por->direction == GRID_MSG_WEST){
    15ac:	7b63      	ldrb	r3, [r4, #13]
    15ae:	b2db      	uxtb	r3, r3
    15b0:	2b14      	cmp	r3, #20
    15b2:	d1e6      	bne.n	1582 <grid_port_init+0x7e>
			por->dx = -1;
    15b4:	22ff      	movs	r2, #255	; 0xff
    15b6:	f241 0305 	movw	r3, #4101	; 0x1005
    15ba:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    15bc:	2200      	movs	r2, #0
    15be:	f241 0306 	movw	r3, #4102	; 0x1006
    15c2:	54e2      	strb	r2, [r4, r3]
    15c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15c8:	2200      	movs	r2, #0
    15ca:	f241 0305 	movw	r3, #4101	; 0x1005
    15ce:	54e2      	strb	r2, [r4, r3]
			por->dy = 1;
    15d0:	2201      	movs	r2, #1
    15d2:	f241 0306 	movw	r3, #4102	; 0x1006
    15d6:	54e2      	strb	r2, [r4, r3]
    15d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    15dc:	2201      	movs	r2, #1
    15de:	f241 0305 	movw	r3, #4101	; 0x1005
    15e2:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    15e4:	2200      	movs	r2, #0
    15e6:	f241 0306 	movw	r3, #4102	; 0x1006
    15ea:	54e2      	strb	r2, [r4, r3]
    15ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15f0:	2200      	movs	r2, #0
    15f2:	f241 0305 	movw	r3, #4101	; 0x1005
    15f6:	54e2      	strb	r2, [r4, r3]
			por->dy = -1;
    15f8:	22ff      	movs	r2, #255	; 0xff
    15fa:	f241 0306 	movw	r3, #4102	; 0x1006
    15fe:	54e2      	strb	r2, [r4, r3]
    1600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1604:	00001321 	.word	0x00001321

00001608 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    1608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    160c:	b084      	sub	sp, #16
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0, &mod->report_array[GRID_REPORT_INDEX_PING_NORTH]);
    160e:	4f30      	ldr	r7, [pc, #192]	; (16d0 <grid_port_init_all+0xc8>)
    1610:	687b      	ldr	r3, [r7, #4]
    1612:	3310      	adds	r3, #16
    1614:	9303      	str	r3, [sp, #12]
    1616:	2500      	movs	r5, #0
    1618:	9502      	str	r5, [sp, #8]
    161a:	2311      	movs	r3, #17
    161c:	9301      	str	r3, [sp, #4]
    161e:	2401      	movs	r4, #1
    1620:	9400      	str	r4, [sp, #0]
    1622:	4b2c      	ldr	r3, [pc, #176]	; (16d4 <grid_port_init_all+0xcc>)
    1624:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1628:	4611      	mov	r1, r2
    162a:	482b      	ldr	r0, [pc, #172]	; (16d8 <grid_port_init_all+0xd0>)
    162c:	4e2b      	ldr	r6, [pc, #172]	; (16dc <grid_port_init_all+0xd4>)
    162e:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1, &mod->report_array[GRID_REPORT_INDEX_PING_EAST]);
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	3320      	adds	r3, #32
    1634:	9303      	str	r3, [sp, #12]
    1636:	9402      	str	r4, [sp, #8]
    1638:	2312      	movs	r3, #18
    163a:	9301      	str	r3, [sp, #4]
    163c:	9400      	str	r4, [sp, #0]
    163e:	4b28      	ldr	r3, [pc, #160]	; (16e0 <grid_port_init_all+0xd8>)
    1640:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1644:	4611      	mov	r1, r2
    1646:	4827      	ldr	r0, [pc, #156]	; (16e4 <grid_port_init_all+0xdc>)
    1648:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2, &mod->report_array[GRID_REPORT_INDEX_PING_SOUTH]);
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	3330      	adds	r3, #48	; 0x30
    164e:	9303      	str	r3, [sp, #12]
    1650:	f04f 0802 	mov.w	r8, #2
    1654:	f8cd 8008 	str.w	r8, [sp, #8]
    1658:	2313      	movs	r3, #19
    165a:	9301      	str	r3, [sp, #4]
    165c:	9400      	str	r4, [sp, #0]
    165e:	4b22      	ldr	r3, [pc, #136]	; (16e8 <grid_port_init_all+0xe0>)
    1660:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1664:	4611      	mov	r1, r2
    1666:	4821      	ldr	r0, [pc, #132]	; (16ec <grid_port_init_all+0xe4>)
    1668:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3, &mod->report_array[GRID_REPORT_INDEX_PING_WEST]);
    166a:	687b      	ldr	r3, [r7, #4]
    166c:	3340      	adds	r3, #64	; 0x40
    166e:	9303      	str	r3, [sp, #12]
    1670:	2703      	movs	r7, #3
    1672:	9702      	str	r7, [sp, #8]
    1674:	2314      	movs	r3, #20
    1676:	9301      	str	r3, [sp, #4]
    1678:	9400      	str	r4, [sp, #0]
    167a:	4b1d      	ldr	r3, [pc, #116]	; (16f0 <grid_port_init_all+0xe8>)
    167c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1680:	4611      	mov	r1, r2
    1682:	481c      	ldr	r0, [pc, #112]	; (16f4 <grid_port_init_all+0xec>)
    1684:	47b0      	blx	r6
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1, NULL);
    1686:	f8df 9074 	ldr.w	r9, [pc, #116]	; 16fc <grid_port_init_all+0xf4>
    168a:	9503      	str	r5, [sp, #12]
    168c:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1690:	f8cd a008 	str.w	sl, [sp, #8]
    1694:	9501      	str	r5, [sp, #4]
    1696:	9700      	str	r7, [sp, #0]
    1698:	462b      	mov	r3, r5
    169a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    169e:	4611      	mov	r1, r2
    16a0:	4648      	mov	r0, r9
    16a2:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1, NULL);	
    16a4:	4f14      	ldr	r7, [pc, #80]	; (16f8 <grid_port_init_all+0xf0>)
    16a6:	9503      	str	r5, [sp, #12]
    16a8:	f8cd a008 	str.w	sl, [sp, #8]
    16ac:	9501      	str	r5, [sp, #4]
    16ae:	f8cd 8000 	str.w	r8, [sp]
    16b2:	462b      	mov	r3, r5
    16b4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    16b8:	4611      	mov	r1, r2
    16ba:	4638      	mov	r0, r7
    16bc:	47b0      	blx	r6
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    16be:	f241 0307 	movw	r3, #4103	; 0x1007
    16c2:	f809 4003 	strb.w	r4, [r9, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    16c6:	54fc      	strb	r4, [r7, r3]
	
	
}
    16c8:	b004      	add	sp, #16
    16ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16ce:	bf00      	nop
    16d0:	20003300 	.word	0x20003300
    16d4:	200010d8 	.word	0x200010d8
    16d8:	200012ac 	.word	0x200012ac
    16dc:	00001505 	.word	0x00001505
    16e0:	20001084 	.word	0x20001084
    16e4:	200067f0 	.word	0x200067f0
    16e8:	200011dc 	.word	0x200011dc
    16ec:	200047dc 	.word	0x200047dc
    16f0:	2000118c 	.word	0x2000118c
    16f4:	200037c0 	.word	0x200037c0
    16f8:	200057e8 	.word	0x200057e8
    16fc:	200022f8 	.word	0x200022f8

00001700 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    1700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1704:	b093      	sub	sp, #76	; 0x4c
    1706:	af02      	add	r7, sp, #8
    1708:	4605      	mov	r5, r0
    170a:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    170c:	f600 73e8 	addw	r3, r0, #4072	; 0xfe8
    1710:	60bb      	str	r3, [r7, #8]
    1712:	4618      	mov	r0, r3
    1714:	4b5e      	ldr	r3, [pc, #376]	; (1890 <grid_port_process_inbound+0x190>)
    1716:	4798      	blx	r3
	
	if (!packet_size){
    1718:	b920      	cbnz	r0, 1724 <grid_port_process_inbound+0x24>
    171a:	2000      	movs	r0, #0
		}	

		
	}
		
}
    171c:	3744      	adds	r7, #68	; 0x44
    171e:	46bd      	mov	sp, r7
    1720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1724:	4680      	mov	r8, r0
	}else{
    1726:	f8c7 d004 	str.w	sp, [r7, #4]
		port_array_default[0] = &GRID_PORT_N;
    172a:	4b5a      	ldr	r3, [pc, #360]	; (1894 <grid_port_process_inbound+0x194>)
    172c:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    172e:	4b5a      	ldr	r3, [pc, #360]	; (1898 <grid_port_process_inbound+0x198>)
    1730:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    1732:	4b5a      	ldr	r3, [pc, #360]	; (189c <grid_port_process_inbound+0x19c>)
    1734:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    1736:	4b5a      	ldr	r3, [pc, #360]	; (18a0 <grid_port_process_inbound+0x1a0>)
    1738:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    173a:	4b5a      	ldr	r3, [pc, #360]	; (18a4 <grid_port_process_inbound+0x1a4>)
    173c:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    173e:	4b5a      	ldr	r3, [pc, #360]	; (18a8 <grid_port_process_inbound+0x1a8>)
    1740:	627b      	str	r3, [r7, #36]	; 0x24
    1742:	f107 0310 	add.w	r3, r7, #16
    1746:	f107 0028 	add.w	r0, r7, #40	; 0x28
		uint8_t j=0;
    174a:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    174c:	f241 0107 	movw	r1, #4103	; 0x1007
    1750:	e001      	b.n	1756 <grid_port_process_inbound+0x56>
		for(uint8_t i=0; i<port_count; i++){
    1752:	4283      	cmp	r3, r0
    1754:	d00d      	beq.n	1772 <grid_port_process_inbound+0x72>
			if (port_array_default[i]->partner_status != 0){
    1756:	f853 2b04 	ldr.w	r2, [r3], #4
    175a:	5c56      	ldrb	r6, [r2, r1]
    175c:	2e00      	cmp	r6, #0
    175e:	d0f8      	beq.n	1752 <grid_port_process_inbound+0x52>
				port_array[j] = port_array_default[i];
    1760:	f107 0640 	add.w	r6, r7, #64	; 0x40
    1764:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    1768:	f846 2c18 	str.w	r2, [r6, #-24]
				j++;
    176c:	3401      	adds	r4, #1
    176e:	b2e4      	uxtb	r4, r4
    1770:	e7ef      	b.n	1752 <grid_port_process_inbound+0x52>
		for (uint8_t i=0; i<port_count; i++)
    1772:	2c00      	cmp	r4, #0
    1774:	d079      	beq.n	186a <grid_port_process_inbound+0x16a>
    1776:	f107 0928 	add.w	r9, r7, #40	; 0x28
    177a:	1e66      	subs	r6, r4, #1
    177c:	b2f6      	uxtb	r6, r6
    177e:	3601      	adds	r6, #1
    1780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1784:	f8df b140 	ldr.w	fp, [pc, #320]	; 18c8 <grid_port_process_inbound+0x1c8>
    1788:	f8c7 900c 	str.w	r9, [r7, #12]
    178c:	e007      	b.n	179e <grid_port_process_inbound+0x9e>
    178e:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1792:	47d8      	blx	fp
    1794:	4580      	cmp	r8, r0
    1796:	d80c      	bhi.n	17b2 <grid_port_process_inbound+0xb2>
		for (uint8_t i=0; i<port_count; i++)
    1798:	68fb      	ldr	r3, [r7, #12]
    179a:	42b3      	cmp	r3, r6
    179c:	d016      	beq.n	17cc <grid_port_process_inbound+0xcc>
			if (port_array[i] != por || loopback){
    179e:	68fb      	ldr	r3, [r7, #12]
    17a0:	f853 0b04 	ldr.w	r0, [r3], #4
    17a4:	60fb      	str	r3, [r7, #12]
    17a6:	4285      	cmp	r5, r0
    17a8:	d1f1      	bne.n	178e <grid_port_process_inbound+0x8e>
    17aa:	f1ba 0f00 	cmp.w	sl, #0
    17ae:	d0f3      	beq.n	1798 <grid_port_process_inbound+0x98>
    17b0:	e7ed      	b.n	178e <grid_port_process_inbound+0x8e>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    17b2:	23c8      	movs	r3, #200	; 0xc8
    17b4:	9301      	str	r3, [sp, #4]
    17b6:	2302      	movs	r3, #2
    17b8:	9300      	str	r3, [sp, #0]
    17ba:	2300      	movs	r3, #0
    17bc:	2264      	movs	r2, #100	; 0x64
    17be:	4611      	mov	r1, r2
    17c0:	483a      	ldr	r0, [pc, #232]	; (18ac <grid_port_process_inbound+0x1ac>)
    17c2:	4c3b      	ldr	r4, [pc, #236]	; (18b0 <grid_port_process_inbound+0x1b0>)
    17c4:	47a0      	blx	r4
    17c6:	f8d7 d004 	ldr.w	sp, [r7, #4]
    17ca:	e7a6      	b.n	171a <grid_port_process_inbound+0x1a>
    17cc:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    17ce:	68b8      	ldr	r0, [r7, #8]
    17d0:	4b38      	ldr	r3, [pc, #224]	; (18b4 <grid_port_process_inbound+0x1b4>)
    17d2:	4798      	blx	r3
    17d4:	4580      	cmp	r8, r0
    17d6:	d000      	beq.n	17da <grid_port_process_inbound+0xda>
    17d8:	e7fe      	b.n	17d8 <grid_port_process_inbound+0xd8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    17da:	4e37      	ldr	r6, [pc, #220]	; (18b8 <grid_port_process_inbound+0x1b8>)
    17dc:	e004      	b.n	17e8 <grid_port_process_inbound+0xe8>
			if (port_array[i] != por || loopback){
    17de:	f1ba 0f00 	cmp.w	sl, #0
    17e2:	d105      	bne.n	17f0 <grid_port_process_inbound+0xf0>
		for (uint8_t i=0; i<port_count; i++)
    17e4:	45d9      	cmp	r9, fp
    17e6:	d045      	beq.n	1874 <grid_port_process_inbound+0x174>
			if (port_array[i] != por || loopback){
    17e8:	f859 0b04 	ldr.w	r0, [r9], #4
    17ec:	4285      	cmp	r5, r0
    17ee:	d0f6      	beq.n	17de <grid_port_process_inbound+0xde>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    17f0:	4641      	mov	r1, r8
    17f2:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    17f6:	47b0      	blx	r6
    17f8:	e7f4      	b.n	17e4 <grid_port_process_inbound+0xe4>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    17fa:	6879      	ldr	r1, [r7, #4]
    17fc:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1800:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    1802:	68fb      	ldr	r3, [r7, #12]
    1804:	42b3      	cmp	r3, r6
    1806:	d007      	beq.n	1818 <grid_port_process_inbound+0x118>
				if (port_array[i] != por || loopback){
    1808:	f856 0b04 	ldr.w	r0, [r6], #4
    180c:	4285      	cmp	r5, r0
    180e:	d1f4      	bne.n	17fa <grid_port_process_inbound+0xfa>
    1810:	f1ba 0f00 	cmp.w	sl, #0
    1814:	d0f5      	beq.n	1802 <grid_port_process_inbound+0x102>
    1816:	e7f0      	b.n	17fa <grid_port_process_inbound+0xfa>
    1818:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    181c:	fa1f f38b 	uxth.w	r3, fp
    1820:	4543      	cmp	r3, r8
    1822:	d208      	bcs.n	1836 <grid_port_process_inbound+0x136>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    1824:	68b8      	ldr	r0, [r7, #8]
    1826:	4b25      	ldr	r3, [pc, #148]	; (18bc <grid_port_process_inbound+0x1bc>)
    1828:	4798      	blx	r3
    182a:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    182c:	2c00      	cmp	r4, #0
    182e:	d0f3      	beq.n	1818 <grid_port_process_inbound+0x118>
    1830:	f107 0628 	add.w	r6, r7, #40	; 0x28
    1834:	e7e8      	b.n	1808 <grid_port_process_inbound+0x108>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    1836:	68b8      	ldr	r0, [r7, #8]
    1838:	4b21      	ldr	r3, [pc, #132]	; (18c0 <grid_port_process_inbound+0x1c0>)
    183a:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    183c:	2c00      	cmp	r4, #0
    183e:	f43f af6d 	beq.w	171c <grid_port_process_inbound+0x1c>
    1842:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1846:	4e1f      	ldr	r6, [pc, #124]	; (18c4 <grid_port_process_inbound+0x1c4>)
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	4698      	mov	r8, r3
    184c:	e005      	b.n	185a <grid_port_process_inbound+0x15a>
			if (port_array[i] != por || loopback){
    184e:	f1ba 0f00 	cmp.w	sl, #0
    1852:	d106      	bne.n	1862 <grid_port_process_inbound+0x162>
		for (uint8_t i=0; i<port_count; i++)
    1854:	45a0      	cmp	r8, r4
    1856:	f43f af61 	beq.w	171c <grid_port_process_inbound+0x1c>
			if (port_array[i] != por || loopback){
    185a:	f854 0b04 	ldr.w	r0, [r4], #4
    185e:	4285      	cmp	r5, r0
    1860:	d0f5      	beq.n	184e <grid_port_process_inbound+0x14e>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1862:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    1866:	47b0      	blx	r6
    1868:	e7f4      	b.n	1854 <grid_port_process_inbound+0x154>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    186a:	68b8      	ldr	r0, [r7, #8]
    186c:	4b11      	ldr	r3, [pc, #68]	; (18b4 <grid_port_process_inbound+0x1b4>)
    186e:	4798      	blx	r3
    1870:	4540      	cmp	r0, r8
    1872:	d1b1      	bne.n	17d8 <grid_port_process_inbound+0xd8>
    1874:	1e63      	subs	r3, r4, #1
    1876:	b2db      	uxtb	r3, r3
    1878:	f107 0240 	add.w	r2, r7, #64	; 0x40
    187c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1880:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    1882:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1886:	f8df 9044 	ldr.w	r9, [pc, #68]	; 18cc <grid_port_process_inbound+0x1cc>
    188a:	60fb      	str	r3, [r7, #12]
    188c:	e7ca      	b.n	1824 <grid_port_process_inbound+0x124>
    188e:	bf00      	nop
    1890:	000013d1 	.word	0x000013d1
    1894:	200012ac 	.word	0x200012ac
    1898:	200067f0 	.word	0x200067f0
    189c:	200047dc 	.word	0x200047dc
    18a0:	200037c0 	.word	0x200037c0
    18a4:	200022f8 	.word	0x200022f8
    18a8:	200057e8 	.word	0x200057e8
    18ac:	20003310 	.word	0x20003310
    18b0:	00003a7d 	.word	0x00003a7d
    18b4:	00001443 	.word	0x00001443
    18b8:	00001375 	.word	0x00001375
    18bc:	000014cd 	.word	0x000014cd
    18c0:	000014f5 	.word	0x000014f5
    18c4:	000013c1 	.word	0x000013c1
    18c8:	00001361 	.word	0x00001361
    18cc:	000013a5 	.word	0x000013a5

000018d0 <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    18d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18d4:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    18d8:	af06      	add	r7, sp, #24
    18da:	62f8      	str	r0, [r7, #44]	; 0x2c
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    18dc:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    18e0:	4630      	mov	r0, r6
    18e2:	4b8a      	ldr	r3, [pc, #552]	; (1b0c <grid_port_process_outbound_usb+0x23c>)
    18e4:	4798      	blx	r3
	
	if (!length){		
    18e6:	2800      	cmp	r0, #0
    18e8:	f000 8227 	beq.w	1d3a <grid_port_process_outbound_usb+0x46a>
    18ec:	4604      	mov	r4, r0
    18ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18f0:	4613      	mov	r3, r2
    18f2:	332f      	adds	r3, #47	; 0x2f
    18f4:	f202 71ff 	addw	r1, r2, #2047	; 0x7ff


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    18f8:	2200      	movs	r2, #0
    18fa:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    18fe:	428b      	cmp	r3, r1
    1900:	d1fb      	bne.n	18fa <grid_port_process_outbound_usb+0x2a>
		}
		
		
		
		uint8_t temp[500] = {0};
    1902:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1906:	2100      	movs	r1, #0
    1908:	f107 0034 	add.w	r0, r7, #52	; 0x34
    190c:	4b80      	ldr	r3, [pc, #512]	; (1b10 <grid_port_process_outbound_usb+0x240>)
    190e:	4798      	blx	r3
			
		
		//uint8_t temp[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    1910:	4630      	mov	r0, r6
    1912:	4b80      	ldr	r3, [pc, #512]	; (1b14 <grid_port_process_outbound_usb+0x244>)
    1914:	4798      	blx	r3
    1916:	2500      	movs	r5, #0
		
		for (uint8_t i = 0; i<length; i++){
			
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1918:	f8df 9238 	ldr.w	r9, [pc, #568]	; 1b54 <grid_port_process_outbound_usb+0x284>
    191c:	f107 0834 	add.w	r8, r7, #52	; 0x34
    1920:	4630      	mov	r0, r6
    1922:	47c8      	blx	r9
    1924:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1928:	3501      	adds	r5, #1
    192a:	b2ed      	uxtb	r5, r5
    192c:	b2ab      	uxth	r3, r5
    192e:	429c      	cmp	r4, r3
    1930:	d8f6      	bhi.n	1920 <grid_port_process_outbound_usb+0x50>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1932:	4630      	mov	r0, r6
    1934:	4b78      	ldr	r3, [pc, #480]	; (1b18 <grid_port_process_outbound_usb+0x248>)
    1936:	4798      	blx	r3
		

		// GRID-2-HOST TRANSLATOR
		uint8_t id = grid_msg_get_id(temp);		
    1938:	f107 0034 	add.w	r0, r7, #52	; 0x34
    193c:	4b77      	ldr	r3, [pc, #476]	; (1b1c <grid_port_process_outbound_usb+0x24c>)
    193e:	4798      	blx	r3
    1940:	61f8      	str	r0, [r7, #28]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1942:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1946:	4b76      	ldr	r3, [pc, #472]	; (1b20 <grid_port_process_outbound_usb+0x250>)
    1948:	4798      	blx	r3
    194a:	4606      	mov	r6, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    194c:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1950:	4b74      	ldr	r3, [pc, #464]	; (1b24 <grid_port_process_outbound_usb+0x254>)
    1952:	4798      	blx	r3
    1954:	4680      	mov	r8, r0
		uint8_t age = grid_msg_get_age(temp);
    1956:	f107 0034 	add.w	r0, r7, #52	; 0x34
    195a:	4b73      	ldr	r3, [pc, #460]	; (1b28 <grid_port_process_outbound_usb+0x258>)
    195c:	4798      	blx	r3
    195e:	61b8      	str	r0, [r7, #24]
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		uint8_t output_cursor = 0;
		
		uint8_t error_flag = 0;
    1960:	2500      	movs	r5, #0
    1962:	f887 5033 	strb.w	r5, [r7, #51]	; 0x33
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1966:	f1a8 087f 	sub.w	r8, r8, #127	; 0x7f
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
					
					
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    196a:	fa4f f388 	sxtb.w	r3, r8
    196e:	627b      	str	r3, [r7, #36]	; 0x24
    1970:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    1974:	005b      	lsls	r3, r3, #1
    1976:	1aea      	subs	r2, r5, r3
    1978:	f003 0307 	and.w	r3, r3, #7
    197c:	4619      	mov	r1, r3
    197e:	f002 0307 	and.w	r3, r2, #7
    1982:	460a      	mov	r2, r1
    1984:	bf58      	it	pl
    1986:	425a      	negpl	r2, r3
    1988:	60fa      	str	r2, [r7, #12]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    198a:	3e7f      	subs	r6, #127	; 0x7f
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    198c:	b273      	sxtb	r3, r6
    198e:	623b      	str	r3, [r7, #32]
    1990:	011b      	lsls	r3, r3, #4
    1992:	60bb      	str	r3, [r7, #8]
    1994:	1e63      	subs	r3, r4, #1
    1996:	b29b      	uxth	r3, r3
    1998:	f103 0901 	add.w	r9, r3, #1
    199c:	46ab      	mov	fp, r5
					
									
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
		
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    199e:	464b      	mov	r3, r9
    19a0:	46d9      	mov	r9, fp
    19a2:	469a      	mov	sl, r3
    19a4:	e006      	b.n	19b4 <grid_port_process_outbound_usb+0xe4>
				current_start = i;
    19a6:	fa5f f58b 	uxtb.w	r5, fp
    19aa:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    19ae:	45d3      	cmp	fp, sl
    19b0:	f000 81be 	beq.w	1d30 <grid_port_process_outbound_usb+0x460>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    19b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    19b8:	f81b 3003 	ldrb.w	r3, [fp, r3]
    19bc:	2b02      	cmp	r3, #2
    19be:	d0f2      	beq.n	19a6 <grid_port_process_outbound_usb+0xd6>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    19c0:	2b03      	cmp	r3, #3
    19c2:	d1f2      	bne.n	19aa <grid_port_process_outbound_usb+0xda>
    19c4:	2d00      	cmp	r5, #0
    19c6:	d0f0      	beq.n	19aa <grid_port_process_outbound_usb+0xda>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    19c8:	462c      	mov	r4, r5
    19ca:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19ce:	2102      	movs	r1, #2
    19d0:	f507 730a 	add.w	r3, r7, #552	; 0x228
    19d4:	1958      	adds	r0, r3, r5
    19d6:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    19da:	4b54      	ldr	r3, [pc, #336]	; (1b2c <grid_port_process_outbound_usb+0x25c>)
    19dc:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    19de:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    19e2:	d019      	beq.n	1a18 <grid_port_process_outbound_usb+0x148>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    19e4:	2e01      	cmp	r6, #1
    19e6:	f000 80b7 	beq.w	1b58 <grid_port_process_outbound_usb+0x288>
					//usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
		
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    19ea:	2e04      	cmp	r6, #4
    19ec:	f000 812d 	beq.w	1c4a <grid_port_process_outbound_usb+0x37a>

					}
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    19f0:	2e02      	cmp	r6, #2
    19f2:	f000 819b 	beq.w	1d2c <grid_port_process_outbound_usb+0x45c>
					
					//hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
					
				}	
				else{
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    19f6:	f109 0430 	add.w	r4, r9, #48	; 0x30
    19fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19fc:	441c      	add	r4, r3
    19fe:	b2c2      	uxtb	r2, r0
    1a00:	494b      	ldr	r1, [pc, #300]	; (1b30 <grid_port_process_outbound_usb+0x260>)
    1a02:	4620      	mov	r0, r4
    1a04:	4b4b      	ldr	r3, [pc, #300]	; (1b34 <grid_port_process_outbound_usb+0x264>)
    1a06:	4798      	blx	r3
					
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1a08:	4620      	mov	r0, r4
    1a0a:	4b4b      	ldr	r3, [pc, #300]	; (1b38 <grid_port_process_outbound_usb+0x268>)
    1a0c:	4798      	blx	r3
    1a0e:	4481      	add	r9, r0
    1a10:	fa5f f989 	uxtb.w	r9, r9
				}
				
				current_start = 0;
    1a14:	2500      	movs	r5, #0
    1a16:	e7c8      	b.n	19aa <grid_port_process_outbound_usb+0xda>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1a18:	1ce8      	adds	r0, r5, #3
    1a1a:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a1e:	2102      	movs	r1, #2
    1a20:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a24:	4418      	add	r0, r3
    1a26:	4b41      	ldr	r3, [pc, #260]	; (1b2c <grid_port_process_outbound_usb+0x25c>)
    1a28:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1a2a:	1d68      	adds	r0, r5, #5
    1a2c:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a30:	2102      	movs	r1, #2
    1a32:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a36:	4418      	add	r0, r3
    1a38:	4b3c      	ldr	r3, [pc, #240]	; (1b2c <grid_port_process_outbound_usb+0x25c>)
    1a3a:	4798      	blx	r3
    1a3c:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1a40:	1de8      	adds	r0, r5, #7
    1a42:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a46:	2102      	movs	r1, #2
    1a48:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a4c:	4418      	add	r0, r3
    1a4e:	4b37      	ldr	r3, [pc, #220]	; (1b2c <grid_port_process_outbound_usb+0x25c>)
    1a50:	4798      	blx	r3
    1a52:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1a54:	f105 0009 	add.w	r0, r5, #9
    1a58:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1a5c:	2102      	movs	r1, #2
    1a5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a62:	4418      	add	r0, r3
    1a64:	4b31      	ldr	r3, [pc, #196]	; (1b2c <grid_port_process_outbound_usb+0x25c>)
    1a66:	4798      	blx	r3
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    1a68:	4b34      	ldr	r3, [pc, #208]	; (1b3c <grid_port_process_outbound_usb+0x26c>)
    1a6a:	7a59      	ldrb	r1, [r3, #9]
    1a6c:	68fb      	ldr	r3, [r7, #12]
    1a6e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1a72:	424b      	negs	r3, r1
    1a74:	f001 020f 	and.w	r2, r1, #15
    1a78:	f003 030f 	and.w	r3, r3, #15
    1a7c:	bf58      	it	pl
    1a7e:	425a      	negpl	r2, r3
    1a80:	617a      	str	r2, [r7, #20]
    1a82:	7d3b      	ldrb	r3, [r7, #20]
    1a84:	4619      	mov	r1, r3
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    1a86:	b2e4      	uxtb	r4, r4
    1a88:	34e0      	adds	r4, #224	; 0xe0
    1a8a:	68bb      	ldr	r3, [r7, #8]
    1a8c:	441c      	add	r4, r3
    1a8e:	4b2c      	ldr	r3, [pc, #176]	; (1b40 <grid_port_process_outbound_usb+0x270>)
    1a90:	fb83 3204 	smull	r3, r2, r3, r4
    1a94:	17e3      	asrs	r3, r4, #31
    1a96:	ebc3 1322 	rsb	r3, r3, r2, asr #4
    1a9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a9e:	eba4 1443 	sub.w	r4, r4, r3, lsl #5
    1aa2:	b2e4      	uxtb	r4, r4
    1aa4:	b2c3      	uxtb	r3, r0
					printf("{\"type\":\"MIDI\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, midi_channel,	midi_command, midi_param1, midi_param2);
    1aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    1aa8:	9302      	str	r3, [sp, #8]
    1aaa:	9401      	str	r4, [sp, #4]
    1aac:	f8cd 8000 	str.w	r8, [sp]
    1ab0:	6139      	str	r1, [r7, #16]
    1ab2:	460b      	mov	r3, r1
    1ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1ab6:	6a39      	ldr	r1, [r7, #32]
    1ab8:	4822      	ldr	r0, [pc, #136]	; (1b44 <grid_port_process_outbound_usb+0x274>)
    1aba:	4d23      	ldr	r5, [pc, #140]	; (1b48 <grid_port_process_outbound_usb+0x278>)
    1abc:	47a8      	blx	r5
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1abe:	f109 0530 	add.w	r5, r9, #48	; 0x30
    1ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1ac4:	4428      	add	r0, r5
    1ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1ac8:	9205      	str	r2, [sp, #20]
    1aca:	9404      	str	r4, [sp, #16]
    1acc:	f8cd 800c 	str.w	r8, [sp, #12]
    1ad0:	6939      	ldr	r1, [r7, #16]
    1ad2:	9102      	str	r1, [sp, #8]
    1ad4:	69b9      	ldr	r1, [r7, #24]
    1ad6:	9101      	str	r1, [sp, #4]
    1ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1ada:	9100      	str	r1, [sp, #0]
    1adc:	6a3b      	ldr	r3, [r7, #32]
    1ade:	69fa      	ldr	r2, [r7, #28]
    1ae0:	491a      	ldr	r1, [pc, #104]	; (1b4c <grid_port_process_outbound_usb+0x27c>)
    1ae2:	6138      	str	r0, [r7, #16]
    1ae4:	4d13      	ldr	r5, [pc, #76]	; (1b34 <grid_port_process_outbound_usb+0x264>)
    1ae6:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1ae8:	6938      	ldr	r0, [r7, #16]
    1aea:	4b13      	ldr	r3, [pc, #76]	; (1b38 <grid_port_process_outbound_usb+0x268>)
    1aec:	4798      	blx	r3
    1aee:	4481      	add	r9, r0
    1af0:	fa5f f989 	uxtb.w	r9, r9
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1af4:	6979      	ldr	r1, [r7, #20]
    1af6:	ea48 0101 	orr.w	r1, r8, r1
    1afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1afc:	4622      	mov	r2, r4
    1afe:	b2c9      	uxtb	r1, r1
    1b00:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1b04:	4c12      	ldr	r4, [pc, #72]	; (1b50 <grid_port_process_outbound_usb+0x280>)
    1b06:	47a0      	blx	r4
				current_start = 0;
    1b08:	4635      	mov	r5, r6
    1b0a:	e74e      	b.n	19aa <grid_port_process_outbound_usb+0xda>
    1b0c:	000013d1 	.word	0x000013d1
    1b10:	0000c467 	.word	0x0000c467
    1b14:	00001443 	.word	0x00001443
    1b18:	000014f5 	.word	0x000014f5
    1b1c:	00003de1 	.word	0x00003de1
    1b20:	00003e01 	.word	0x00003e01
    1b24:	00003e21 	.word	0x00003e21
    1b28:	00003e41 	.word	0x00003e41
    1b2c:	00003ad1 	.word	0x00003ad1
    1b30:	0000da14 	.word	0x0000da14
    1b34:	0000c855 	.word	0x0000c855
    1b38:	0000c89d 	.word	0x0000c89d
    1b3c:	20003310 	.word	0x20003310
    1b40:	2aaaaaab 	.word	0x2aaaaaab
    1b44:	0000d8e4 	.word	0x0000d8e4
    1b48:	0000c5d1 	.word	0x0000c5d1
    1b4c:	0000d924 	.word	0x0000d924
    1b50:	0000b299 	.word	0x0000b299
    1b54:	000014cd 	.word	0x000014cd
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1b58:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1b5c:	fa5f f38b 	uxtb.w	r3, fp
    1b60:	1b5b      	subs	r3, r3, r5
    1b62:	1eda      	subs	r2, r3, #3
    1b64:	4b77      	ldr	r3, [pc, #476]	; (1d44 <grid_port_process_outbound_usb+0x474>)
    1b66:	fb83 1302 	smull	r1, r3, r3, r2
    1b6a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    1b6e:	b2db      	uxtb	r3, r3
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1b70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1b74:	3207      	adds	r2, #7
    1b76:	f022 0207 	bic.w	r2, r2, #7
    1b7a:	ebad 0d02 	sub.w	sp, sp, r2
    1b7e:	aa06      	add	r2, sp, #24
					for(uint8_t j=0; j<key_array_length; j++){
    1b80:	2b00      	cmp	r3, #0
    1b82:	d05e      	beq.n	1c42 <grid_port_process_outbound_usb+0x372>
    1b84:	3403      	adds	r4, #3
    1b86:	f107 0134 	add.w	r1, r7, #52	; 0x34
    1b8a:	440c      	add	r4, r1
    1b8c:	4690      	mov	r8, r2
    1b8e:	3b01      	subs	r3, #1
    1b90:	b2db      	uxtb	r3, r3
    1b92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b96:	3509      	adds	r5, #9
    1b98:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1b9c:	18cb      	adds	r3, r1, r3
    1b9e:	617b      	str	r3, [r7, #20]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1ba0:	f8c7 b004 	str.w	fp, [r7, #4]
    1ba4:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1ba8:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bac:	2102      	movs	r1, #2
    1bae:	4620      	mov	r0, r4
    1bb0:	4b65      	ldr	r3, [pc, #404]	; (1d48 <grid_port_process_outbound_usb+0x478>)
    1bb2:	4798      	blx	r3
    1bb4:	4605      	mov	r5, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1bb6:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bba:	2102      	movs	r1, #2
    1bbc:	1860      	adds	r0, r4, r1
    1bbe:	4b62      	ldr	r3, [pc, #392]	; (1d48 <grid_port_process_outbound_usb+0x478>)
    1bc0:	4798      	blx	r3
    1bc2:	4606      	mov	r6, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1bc4:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bc8:	2102      	movs	r1, #2
    1bca:	1d20      	adds	r0, r4, #4
    1bcc:	4b5e      	ldr	r3, [pc, #376]	; (1d48 <grid_port_process_outbound_usb+0x478>)
    1bce:	4798      	blx	r3
    1bd0:	4683      	mov	fp, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1bd2:	f109 0a30 	add.w	sl, r9, #48	; 0x30
    1bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bd8:	449a      	add	sl, r3
    1bda:	4b5c      	ldr	r3, [pc, #368]	; (1d4c <grid_port_process_outbound_usb+0x47c>)
    1bdc:	4798      	blx	r3
    1bde:	9005      	str	r0, [sp, #20]
    1be0:	b2eb      	uxtb	r3, r5
    1be2:	62bb      	str	r3, [r7, #40]	; 0x28
    1be4:	9304      	str	r3, [sp, #16]
    1be6:	b2f6      	uxtb	r6, r6
    1be8:	9603      	str	r6, [sp, #12]
    1bea:	fa5f f38b 	uxtb.w	r3, fp
    1bee:	9302      	str	r3, [sp, #8]
    1bf0:	69bb      	ldr	r3, [r7, #24]
    1bf2:	9301      	str	r3, [sp, #4]
    1bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bf6:	9300      	str	r3, [sp, #0]
    1bf8:	6a3b      	ldr	r3, [r7, #32]
    1bfa:	69fa      	ldr	r2, [r7, #28]
    1bfc:	4954      	ldr	r1, [pc, #336]	; (1d50 <grid_port_process_outbound_usb+0x480>)
    1bfe:	4650      	mov	r0, sl
    1c00:	4d54      	ldr	r5, [pc, #336]	; (1d54 <grid_port_process_outbound_usb+0x484>)
    1c02:	47a8      	blx	r5
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1c04:	4650      	mov	r0, sl
    1c06:	4b54      	ldr	r3, [pc, #336]	; (1d58 <grid_port_process_outbound_usb+0x488>)
    1c08:	4798      	blx	r3
    1c0a:	4481      	add	r9, r0
    1c0c:	fa5f f989 	uxtb.w	r9, r9
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1c10:	f888 b000 	strb.w	fp, [r8]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1c14:	2e82      	cmp	r6, #130	; 0x82
    1c16:	bf14      	ite	ne
    1c18:	2600      	movne	r6, #0
    1c1a:	2601      	moveq	r6, #1
						key_array[j] = current_key;
    1c1c:	f888 6001 	strb.w	r6, [r8, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c22:	2b80      	cmp	r3, #128	; 0x80
    1c24:	bf14      	ite	ne
    1c26:	2500      	movne	r5, #0
    1c28:	2501      	moveq	r5, #1
    1c2a:	f888 5002 	strb.w	r5, [r8, #2]
    1c2e:	3406      	adds	r4, #6
    1c30:	f108 0803 	add.w	r8, r8, #3
					for(uint8_t j=0; j<key_array_length; j++){
    1c34:	697b      	ldr	r3, [r7, #20]
    1c36:	429c      	cmp	r4, r3
    1c38:	d1b6      	bne.n	1ba8 <grid_port_process_outbound_usb+0x2d8>
    1c3a:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1c3e:	f8d7 a000 	ldr.w	sl, [r7]
    1c42:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1c46:	2500      	movs	r5, #0
    1c48:	e6af      	b.n	19aa <grid_port_process_outbound_usb+0xda>
					uint8_t sys_command		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1c4a:	1ce8      	adds	r0, r5, #3
    1c4c:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c50:	2102      	movs	r1, #2
    1c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c56:	4418      	add	r0, r3
    1c58:	4b3b      	ldr	r3, [pc, #236]	; (1d48 <grid_port_process_outbound_usb+0x478>)
    1c5a:	4798      	blx	r3
    1c5c:	62b8      	str	r0, [r7, #40]	; 0x28
    1c5e:	b2c5      	uxtb	r5, r0
					uint8_t sys_subcommand  = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1c60:	1d60      	adds	r0, r4, #5
    1c62:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c66:	2102      	movs	r1, #2
    1c68:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c6c:	4418      	add	r0, r3
    1c6e:	4b36      	ldr	r3, [pc, #216]	; (1d48 <grid_port_process_outbound_usb+0x478>)
    1c70:	4798      	blx	r3
    1c72:	4680      	mov	r8, r0
    1c74:	b2c6      	uxtb	r6, r0
					uint8_t sys_value	    = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1c76:	1de0      	adds	r0, r4, #7
    1c78:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1c7c:	2102      	movs	r1, #2
    1c7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c82:	4418      	add	r0, r3
    1c84:	4b30      	ldr	r3, [pc, #192]	; (1d48 <grid_port_process_outbound_usb+0x478>)
    1c86:	4798      	blx	r3
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c88:	2d64      	cmp	r5, #100	; 0x64
    1c8a:	d003      	beq.n	1c94 <grid_port_process_outbound_usb+0x3c4>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1c8c:	2d66      	cmp	r5, #102	; 0x66
    1c8e:	d025      	beq.n	1cdc <grid_port_process_outbound_usb+0x40c>
				current_start = 0;
    1c90:	2500      	movs	r5, #0
    1c92:	e68a      	b.n	19aa <grid_port_process_outbound_usb+0xda>
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c94:	2e65      	cmp	r6, #101	; 0x65
    1c96:	d001      	beq.n	1c9c <grid_port_process_outbound_usb+0x3cc>
				current_start = 0;
    1c98:	2500      	movs	r5, #0
    1c9a:	e686      	b.n	19aa <grid_port_process_outbound_usb+0xda>
    1c9c:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_value);		
    1c9e:	4621      	mov	r1, r4
    1ca0:	482e      	ldr	r0, [pc, #184]	; (1d5c <grid_port_process_outbound_usb+0x48c>)
    1ca2:	4b2f      	ldr	r3, [pc, #188]	; (1d60 <grid_port_process_outbound_usb+0x490>)
    1ca4:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1ca6:	f109 0530 	add.w	r5, r9, #48	; 0x30
    1caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cac:	441d      	add	r5, r3
    1cae:	9404      	str	r4, [sp, #16]
    1cb0:	9603      	str	r6, [sp, #12]
    1cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1cb6:	9302      	str	r3, [sp, #8]
    1cb8:	69bb      	ldr	r3, [r7, #24]
    1cba:	9301      	str	r3, [sp, #4]
    1cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cbe:	9300      	str	r3, [sp, #0]
    1cc0:	6a3b      	ldr	r3, [r7, #32]
    1cc2:	69fa      	ldr	r2, [r7, #28]
    1cc4:	4927      	ldr	r1, [pc, #156]	; (1d64 <grid_port_process_outbound_usb+0x494>)
    1cc6:	4628      	mov	r0, r5
    1cc8:	4c22      	ldr	r4, [pc, #136]	; (1d54 <grid_port_process_outbound_usb+0x484>)
    1cca:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1ccc:	4628      	mov	r0, r5
    1cce:	4b22      	ldr	r3, [pc, #136]	; (1d58 <grid_port_process_outbound_usb+0x488>)
    1cd0:	4798      	blx	r3
    1cd2:	4481      	add	r9, r0
    1cd4:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    1cd8:	2500      	movs	r5, #0
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1cda:	e666      	b.n	19aa <grid_port_process_outbound_usb+0xda>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1cdc:	2e67      	cmp	r6, #103	; 0x67
    1cde:	d001      	beq.n	1ce4 <grid_port_process_outbound_usb+0x414>
				current_start = 0;
    1ce0:	2500      	movs	r5, #0
    1ce2:	e662      	b.n	19aa <grid_port_process_outbound_usb+0xda>
    1ce4:	b2c5      	uxtb	r5, r0
						printf("{\"type\":\"HEARTBEAT\", \"data\": [\"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, sys_value);		
    1ce6:	462b      	mov	r3, r5
    1ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cea:	6a39      	ldr	r1, [r7, #32]
    1cec:	481e      	ldr	r0, [pc, #120]	; (1d68 <grid_port_process_outbound_usb+0x498>)
    1cee:	4c1f      	ldr	r4, [pc, #124]	; (1d6c <grid_port_process_outbound_usb+0x49c>)
    1cf0:	47a0      	blx	r4
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1cf2:	f109 0630 	add.w	r6, r9, #48	; 0x30
    1cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1cf8:	4416      	add	r6, r2
    1cfa:	9504      	str	r5, [sp, #16]
    1cfc:	fa5f f388 	uxtb.w	r3, r8
    1d00:	9303      	str	r3, [sp, #12]
    1d02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1d06:	9302      	str	r3, [sp, #8]
    1d08:	69ba      	ldr	r2, [r7, #24]
    1d0a:	9201      	str	r2, [sp, #4]
    1d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1d0e:	9200      	str	r2, [sp, #0]
    1d10:	6a3b      	ldr	r3, [r7, #32]
    1d12:	69fa      	ldr	r2, [r7, #28]
    1d14:	4913      	ldr	r1, [pc, #76]	; (1d64 <grid_port_process_outbound_usb+0x494>)
    1d16:	4630      	mov	r0, r6
    1d18:	4c0e      	ldr	r4, [pc, #56]	; (1d54 <grid_port_process_outbound_usb+0x484>)
    1d1a:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1d1c:	4630      	mov	r0, r6
    1d1e:	4b0e      	ldr	r3, [pc, #56]	; (1d58 <grid_port_process_outbound_usb+0x488>)
    1d20:	4798      	blx	r3
    1d22:	4481      	add	r9, r0
    1d24:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    1d28:	2500      	movs	r5, #0
    1d2a:	e63e      	b.n	19aa <grid_port_process_outbound_usb+0xda>
    1d2c:	2500      	movs	r5, #0
    1d2e:	e63c      	b.n	19aa <grid_port_process_outbound_usb+0xda>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1d30:	4649      	mov	r1, r9
    1d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1d34:	3030      	adds	r0, #48	; 0x30
    1d36:	4b0e      	ldr	r3, [pc, #56]	; (1d70 <grid_port_process_outbound_usb+0x4a0>)
    1d38:	4798      	blx	r3
				
		
	}
	
	
}
    1d3a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
    1d3e:	46bd      	mov	sp, r7
    1d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d44:	2aaaaaab 	.word	0x2aaaaaab
    1d48:	00003ad1 	.word	0x00003ad1
    1d4c:	00003b49 	.word	0x00003b49
    1d50:	0000d96c 	.word	0x0000d96c
    1d54:	0000c855 	.word	0x0000c855
    1d58:	0000c89d 	.word	0x0000c89d
    1d5c:	20003310 	.word	0x20003310
    1d60:	00003c39 	.word	0x00003c39
    1d64:	0000d9b4 	.word	0x0000d9b4
    1d68:	0000d9e0 	.word	0x0000d9e0
    1d6c:	0000c5d1 	.word	0x0000c5d1
    1d70:	0000aad5 	.word	0x0000aad5

00001d74 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d78:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1d7c:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    1d80:	4630      	mov	r0, r6
    1d82:	4b48      	ldr	r3, [pc, #288]	; (1ea4 <grid_port_process_outbound_ui+0x130>)
    1d84:	4798      	blx	r3
	
	if (!length){
    1d86:	b918      	cbnz	r0, 1d90 <grid_port_process_outbound_ui+0x1c>

		
	}
	
	
}
    1d88:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    1d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d90:	4605      	mov	r5, r0
		uint8_t temp[500] = {0};
    1d92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1d96:	2100      	movs	r1, #0
    1d98:	a805      	add	r0, sp, #20
    1d9a:	4b43      	ldr	r3, [pc, #268]	; (1ea8 <grid_port_process_outbound_ui+0x134>)
    1d9c:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    1d9e:	4630      	mov	r0, r6
    1da0:	4b42      	ldr	r3, [pc, #264]	; (1eac <grid_port_process_outbound_ui+0x138>)
    1da2:	4798      	blx	r3
    1da4:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1da6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 1ecc <grid_port_process_outbound_ui+0x158>
    1daa:	af05      	add	r7, sp, #20
    1dac:	4630      	mov	r0, r6
    1dae:	47c0      	blx	r8
    1db0:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<length; i++){
    1db2:	3401      	adds	r4, #1
    1db4:	b2e4      	uxtb	r4, r4
    1db6:	b2a3      	uxth	r3, r4
    1db8:	429d      	cmp	r5, r3
    1dba:	d8f7      	bhi.n	1dac <grid_port_process_outbound_ui+0x38>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1dbc:	4630      	mov	r0, r6
    1dbe:	4b3c      	ldr	r3, [pc, #240]	; (1eb0 <grid_port_process_outbound_ui+0x13c>)
    1dc0:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);
    1dc2:	ac05      	add	r4, sp, #20
    1dc4:	4620      	mov	r0, r4
    1dc6:	4b3b      	ldr	r3, [pc, #236]	; (1eb4 <grid_port_process_outbound_ui+0x140>)
    1dc8:	4798      	blx	r3
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1dca:	4620      	mov	r0, r4
    1dcc:	4b3a      	ldr	r3, [pc, #232]	; (1eb8 <grid_port_process_outbound_ui+0x144>)
    1dce:	4798      	blx	r3
    1dd0:	4681      	mov	r9, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;
    1dd2:	4620      	mov	r0, r4
    1dd4:	4b39      	ldr	r3, [pc, #228]	; (1ebc <grid_port_process_outbound_ui+0x148>)
    1dd6:	4798      	blx	r3
    1dd8:	4682      	mov	sl, r0
		uint8_t age = grid_msg_get_age(temp);
    1dda:	4620      	mov	r0, r4
    1ddc:	4b38      	ldr	r3, [pc, #224]	; (1ec0 <grid_port_process_outbound_ui+0x14c>)
    1dde:	4798      	blx	r3
		uint8_t error_flag = 0;	
    1de0:	2000      	movs	r0, #0
    1de2:	f88d 0013 	strb.w	r0, [sp, #19]
    1de6:	4626      	mov	r6, r4
    1de8:	3d01      	subs	r5, #1
    1dea:	b2ad      	uxth	r5, r5
    1dec:	3501      	adds	r5, #1
    1dee:	4425      	add	r5, r4
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1df0:	4f34      	ldr	r7, [pc, #208]	; (1ec4 <grid_port_process_outbound_ui+0x150>)
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1df2:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1ed0 <grid_port_process_outbound_ui+0x15c>
    1df6:	e004      	b.n	1e02 <grid_port_process_outbound_ui+0x8e>
    1df8:	1ba0      	subs	r0, r4, r6
    1dfa:	b2c0      	uxtb	r0, r0
    1dfc:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    1dfe:	42ac      	cmp	r4, r5
    1e00:	d0c2      	beq.n	1d88 <grid_port_process_outbound_ui+0x14>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1e02:	7823      	ldrb	r3, [r4, #0]
    1e04:	2b02      	cmp	r3, #2
    1e06:	d0f7      	beq.n	1df8 <grid_port_process_outbound_ui+0x84>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1e08:	2b03      	cmp	r3, #3
    1e0a:	d1f7      	bne.n	1dfc <grid_port_process_outbound_ui+0x88>
    1e0c:	2800      	cmp	r0, #0
    1e0e:	d0f5      	beq.n	1dfc <grid_port_process_outbound_ui+0x88>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1e10:	4680      	mov	r8, r0
    1e12:	ab82      	add	r3, sp, #520	; 0x208
    1e14:	4418      	add	r0, r3
    1e16:	f10d 0213 	add.w	r2, sp, #19
    1e1a:	2102      	movs	r1, #2
    1e1c:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    1e20:	47b8      	blx	r7
				if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    1e22:	b2c0      	uxtb	r0, r0
    1e24:	2803      	cmp	r0, #3
    1e26:	d001      	beq.n	1e2c <grid_port_process_outbound_ui+0xb8>
				current_start = 0;
    1e28:	2000      	movs	r0, #0
    1e2a:	e7e7      	b.n	1dfc <grid_port_process_outbound_ui+0x88>
					if (dx == 0 && dy == 0){
    1e2c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    1e30:	d136      	bne.n	1ea0 <grid_port_process_outbound_ui+0x12c>
    1e32:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    1e36:	d001      	beq.n	1e3c <grid_port_process_outbound_ui+0xc8>
				current_start = 0;
    1e38:	2000      	movs	r0, #0
    1e3a:	e7df      	b.n	1dfc <grid_port_process_outbound_ui+0x88>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1e3c:	f108 0003 	add.w	r0, r8, #3
    1e40:	f10d 0213 	add.w	r2, sp, #19
    1e44:	2102      	movs	r1, #2
    1e46:	ab05      	add	r3, sp, #20
    1e48:	4418      	add	r0, r3
    1e4a:	47b8      	blx	r7
    1e4c:	9002      	str	r0, [sp, #8]
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1e4e:	f108 0005 	add.w	r0, r8, #5
    1e52:	f10d 0213 	add.w	r2, sp, #19
    1e56:	2102      	movs	r1, #2
    1e58:	ab05      	add	r3, sp, #20
    1e5a:	4418      	add	r0, r3
    1e5c:	47b8      	blx	r7
    1e5e:	9001      	str	r0, [sp, #4]
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1e60:	f108 0007 	add.w	r0, r8, #7
    1e64:	f10d 0213 	add.w	r2, sp, #19
    1e68:	2102      	movs	r1, #2
    1e6a:	ab05      	add	r3, sp, #20
    1e6c:	4418      	add	r0, r3
    1e6e:	47b8      	blx	r7
    1e70:	9003      	str	r0, [sp, #12]
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1e72:	f108 0009 	add.w	r0, r8, #9
    1e76:	f10d 0213 	add.w	r2, sp, #19
    1e7a:	2102      	movs	r1, #2
    1e7c:	ab05      	add	r3, sp, #20
    1e7e:	4418      	add	r0, r3
    1e80:	47b8      	blx	r7
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1e82:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1e86:	2a63      	cmp	r2, #99	; 0x63
    1e88:	d001      	beq.n	1e8e <grid_port_process_outbound_ui+0x11a>
				current_start = 0;
    1e8a:	2000      	movs	r0, #0
    1e8c:	e7b6      	b.n	1dfc <grid_port_process_outbound_ui+0x88>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1e8e:	b2c3      	uxtb	r3, r0
    1e90:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e94:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1e98:	480b      	ldr	r0, [pc, #44]	; (1ec8 <grid_port_process_outbound_ui+0x154>)
    1e9a:	47d8      	blx	fp
				current_start = 0;
    1e9c:	2000      	movs	r0, #0
    1e9e:	e7ad      	b.n	1dfc <grid_port_process_outbound_ui+0x88>
    1ea0:	2000      	movs	r0, #0
    1ea2:	e7ab      	b.n	1dfc <grid_port_process_outbound_ui+0x88>
    1ea4:	000013d1 	.word	0x000013d1
    1ea8:	0000c467 	.word	0x0000c467
    1eac:	00001443 	.word	0x00001443
    1eb0:	000014f5 	.word	0x000014f5
    1eb4:	00003de1 	.word	0x00003de1
    1eb8:	00003e01 	.word	0x00003e01
    1ebc:	00003e21 	.word	0x00003e21
    1ec0:	00003e41 	.word	0x00003e41
    1ec4:	00003ad1 	.word	0x00003ad1
    1ec8:	20007864 	.word	0x20007864
    1ecc:	000014cd 	.word	0x000014cd
    1ed0:	000020dd 	.word	0x000020dd

00001ed4 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1ed4:	8a03      	ldrh	r3, [r0, #16]
    1ed6:	b103      	cbz	r3, 1eda <grid_port_process_outbound_usart+0x6>
    1ed8:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ede:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1ee0:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    1ee4:	4630      	mov	r0, r6
    1ee6:	4b11      	ldr	r3, [pc, #68]	; (1f2c <grid_port_process_outbound_usart+0x58>)
    1ee8:	4798      	blx	r3
    1eea:	4604      	mov	r4, r0
    1eec:	4607      	mov	r7, r0
		
		if (!packet_size){
    1eee:	b910      	cbnz	r0, 1ef6 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1ef0:	2000      	movs	r0, #0
    1ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1ef6:	4630      	mov	r0, r6
    1ef8:	4b0d      	ldr	r3, [pc, #52]	; (1f30 <grid_port_process_outbound_usart+0x5c>)
    1efa:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1efc:	822c      	strh	r4, [r5, #16]
    1efe:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1f00:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1f3c <grid_port_process_outbound_usart+0x68>
    1f04:	4630      	mov	r0, r6
    1f06:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1f08:	192b      	adds	r3, r5, r4
    1f0a:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
			for (uint8_t i = 0; i<packet_size; i++){
    1f0e:	3401      	adds	r4, #1
    1f10:	b2e4      	uxtb	r4, r4
    1f12:	42a7      	cmp	r7, r4
    1f14:	d8f6      	bhi.n	1f04 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1f16:	4630      	mov	r0, r6
    1f18:	4b06      	ldr	r3, [pc, #24]	; (1f34 <grid_port_process_outbound_usart+0x60>)
    1f1a:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1f1c:	8a2a      	ldrh	r2, [r5, #16]
    1f1e:	f105 0130 	add.w	r1, r5, #48	; 0x30
    1f22:	68a8      	ldr	r0, [r5, #8]
    1f24:	4b04      	ldr	r3, [pc, #16]	; (1f38 <grid_port_process_outbound_usart+0x64>)
    1f26:	4798      	blx	r3
			
		}
		
	}
	
}
    1f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f2c:	000013d1 	.word	0x000013d1
    1f30:	00001443 	.word	0x00001443
    1f34:	000014f5 	.word	0x000014f5
    1f38:	00004c75 	.word	0x00004c75
    1f3c:	000014cd 	.word	0x000014cd

00001f40 <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1f40:	2201      	movs	r2, #1
    1f42:	4b01      	ldr	r3, [pc, #4]	; (1f48 <grid_led_hardware_transfer_complete_cb+0x8>)
    1f44:	701a      	strb	r2, [r3, #0]
    1f46:	4770      	bx	lr
    1f48:	200012a8 	.word	0x200012a8

00001f4c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1f4c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1f4e:	7844      	ldrb	r4, [r0, #1]
    1f50:	428c      	cmp	r4, r1
    1f52:	d802      	bhi.n	1f5a <grid_led_set_color+0xe>
		return -1;		
    1f54:	20ff      	movs	r0, #255	; 0xff
}
    1f56:	bc30      	pop	{r4, r5}
    1f58:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1f5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f5e:	0089      	lsls	r1, r1, #2
    1f60:	4c09      	ldr	r4, [pc, #36]	; (1f88 <grid_led_set_color+0x3c>)
    1f62:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1f66:	68c3      	ldr	r3, [r0, #12]
    1f68:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1f6e:	68c3      	ldr	r3, [r0, #12]
    1f70:	440b      	add	r3, r1
    1f72:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1f74:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1f78:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1f7c:	68c3      	ldr	r3, [r0, #12]
    1f7e:	4419      	add	r1, r3
    1f80:	608a      	str	r2, [r1, #8]
		return 0;
    1f82:	2000      	movs	r0, #0
    1f84:	e7e7      	b.n	1f56 <grid_led_set_color+0xa>
    1f86:	bf00      	nop
    1f88:	200033b0 	.word	0x200033b0

00001f8c <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1f8c:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1f8e:	4c06      	ldr	r4, [pc, #24]	; (1fa8 <grid_led_hardware_init+0x1c>)
    1f90:	f100 0114 	add.w	r1, r0, #20
    1f94:	4620      	mov	r0, r4
    1f96:	4b05      	ldr	r3, [pc, #20]	; (1fac <grid_led_hardware_init+0x20>)
    1f98:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1f9a:	4a05      	ldr	r2, [pc, #20]	; (1fb0 <grid_led_hardware_init+0x24>)
    1f9c:	2100      	movs	r1, #0
    1f9e:	4620      	mov	r0, r4
    1fa0:	4b04      	ldr	r3, [pc, #16]	; (1fb4 <grid_led_hardware_init+0x28>)
    1fa2:	4798      	blx	r3
    1fa4:	bd10      	pop	{r4, pc}
    1fa6:	bf00      	nop
    1fa8:	20001128 	.word	0x20001128
    1fac:	000051cd 	.word	0x000051cd
    1fb0:	00001f41 	.word	0x00001f41
    1fb4:	0000519d 	.word	0x0000519d

00001fb8 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1fb8:	7840      	ldrb	r0, [r0, #1]
    1fba:	4770      	bx	lr

00001fbc <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1fbc:	7843      	ldrb	r3, [r0, #1]
    1fbe:	b1f3      	cbz	r3, 1ffe <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1fc0:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1fc2:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1fc4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1fc8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1fcc:	6902      	ldr	r2, [r0, #16]
    1fce:	440a      	add	r2, r1
    1fd0:	7ad1      	ldrb	r1, [r2, #11]
    1fd2:	7b14      	ldrb	r4, [r2, #12]
    1fd4:	4421      	add	r1, r4
    1fd6:	72d1      	strb	r1, [r2, #11]
    1fd8:	7842      	ldrb	r2, [r0, #1]
    1fda:	441a      	add	r2, r3
    1fdc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1fe0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1fe4:	6901      	ldr	r1, [r0, #16]
    1fe6:	440a      	add	r2, r1
    1fe8:	7ad1      	ldrb	r1, [r2, #11]
    1fea:	7b14      	ldrb	r4, [r2, #12]
    1fec:	4421      	add	r1, r4
    1fee:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1ff0:	3301      	adds	r3, #1
    1ff2:	b2db      	uxtb	r3, r3
    1ff4:	7842      	ldrb	r2, [r0, #1]
    1ff6:	429a      	cmp	r2, r3
    1ff8:	d8e4      	bhi.n	1fc4 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ffe:	4770      	bx	lr

00002000 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2000:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    2002:	7844      	ldrb	r4, [r0, #1]
    2004:	fb02 1404 	mla	r4, r2, r4, r1
    2008:	6905      	ldr	r5, [r0, #16]
    200a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    200e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2012:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    2014:	7843      	ldrb	r3, [r0, #1]
    2016:	fb02 1303 	mla	r3, r2, r3, r1
    201a:	6904      	ldr	r4, [r0, #16]
    201c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2020:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2024:	4423      	add	r3, r4
    2026:	f89d 400c 	ldrb.w	r4, [sp, #12]
    202a:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    202c:	7843      	ldrb	r3, [r0, #1]
    202e:	fb02 1203 	mla	r2, r2, r3, r1
    2032:	6903      	ldr	r3, [r0, #16]
    2034:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2038:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    203c:	441a      	add	r2, r3
    203e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2042:	7093      	strb	r3, [r2, #2]
}
    2044:	bc70      	pop	{r4, r5, r6}
    2046:	4770      	bx	lr

00002048 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2048:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    204a:	7844      	ldrb	r4, [r0, #1]
    204c:	fb02 1404 	mla	r4, r2, r4, r1
    2050:	6905      	ldr	r5, [r0, #16]
    2052:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2056:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    205a:	442c      	add	r4, r5
    205c:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    205e:	7843      	ldrb	r3, [r0, #1]
    2060:	fb02 1303 	mla	r3, r2, r3, r1
    2064:	6904      	ldr	r4, [r0, #16]
    2066:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    206a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    206e:	4423      	add	r3, r4
    2070:	f89d 400c 	ldrb.w	r4, [sp, #12]
    2074:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    2076:	7843      	ldrb	r3, [r0, #1]
    2078:	fb02 1203 	mla	r2, r2, r3, r1
    207c:	6903      	ldr	r3, [r0, #16]
    207e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2082:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2086:	441a      	add	r2, r3
    2088:	f89d 3010 	ldrb.w	r3, [sp, #16]
    208c:	7153      	strb	r3, [r2, #5]
}
    208e:	bc70      	pop	{r4, r5, r6}
    2090:	4770      	bx	lr

00002092 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    2092:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    2094:	7844      	ldrb	r4, [r0, #1]
    2096:	fb02 1404 	mla	r4, r2, r4, r1
    209a:	6905      	ldr	r5, [r0, #16]
    209c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    20a0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    20a4:	442c      	add	r4, r5
    20a6:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    20a8:	7843      	ldrb	r3, [r0, #1]
    20aa:	fb02 1303 	mla	r3, r2, r3, r1
    20ae:	6904      	ldr	r4, [r0, #16]
    20b0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    20b4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    20b8:	4423      	add	r3, r4
    20ba:	f89d 400c 	ldrb.w	r4, [sp, #12]
    20be:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    20c0:	7843      	ldrb	r3, [r0, #1]
    20c2:	fb02 1203 	mla	r2, r2, r3, r1
    20c6:	6903      	ldr	r3, [r0, #16]
    20c8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    20cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    20d0:	441a      	add	r2, r3
    20d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    20d6:	7213      	strb	r3, [r2, #8]
}
    20d8:	bc70      	pop	{r4, r5, r6}
    20da:	4770      	bx	lr

000020dc <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    20dc:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    20de:	7844      	ldrb	r4, [r0, #1]
    20e0:	fb02 1204 	mla	r2, r2, r4, r1
    20e4:	6901      	ldr	r1, [r0, #16]
    20e6:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    20ea:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    20ee:	440a      	add	r2, r1
    20f0:	72d3      	strb	r3, [r2, #11]
}
    20f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    20f6:	4770      	bx	lr

000020f8 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    20f8:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    20fa:	7844      	ldrb	r4, [r0, #1]
    20fc:	fb02 1204 	mla	r2, r2, r4, r1
    2100:	6901      	ldr	r1, [r0, #16]
    2102:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2106:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    210a:	440a      	add	r2, r1
    210c:	7313      	strb	r3, [r2, #12]
}
    210e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2112:	4770      	bx	lr

00002114 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    2114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2118:	b083      	sub	sp, #12
    211a:	4604      	mov	r4, r0
	mod->led_number = length;
    211c:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    211e:	b2cd      	uxtb	r5, r1
    2120:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2124:	0080      	lsls	r0, r0, #2
    2126:	3090      	adds	r0, #144	; 0x90
    2128:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    212a:	4f3e      	ldr	r7, [pc, #248]	; (2224 <grid_led_buffer_init+0x110>)
    212c:	47b8      	blx	r7
    212e:	4606      	mov	r6, r0
    2130:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    2132:	f100 0390 	add.w	r3, r0, #144	; 0x90
    2136:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    2138:	201a      	movs	r0, #26
    213a:	fb00 f005 	mul.w	r0, r0, r5
    213e:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    2140:	2e00      	cmp	r6, #0
    2142:	d06e      	beq.n	2222 <grid_led_buffer_init+0x10e>
    2144:	2800      	cmp	r0, #0
    2146:	d06c      	beq.n	2222 <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    2148:	6120      	str	r0, [r4, #16]
    214a:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    214c:	4619      	mov	r1, r3
    214e:	68a2      	ldr	r2, [r4, #8]
    2150:	54d1      	strb	r1, [r2, r3]
    2152:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    2154:	2b90      	cmp	r3, #144	; 0x90
    2156:	d1fa      	bne.n	214e <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    2158:	7863      	ldrb	r3, [r4, #1]
    215a:	2b00      	cmp	r3, #0
    215c:	d05e      	beq.n	221c <grid_led_buffer_init+0x108>
    215e:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    2160:	462e      	mov	r6, r5
    2162:	4f31      	ldr	r7, [pc, #196]	; (2228 <grid_led_buffer_init+0x114>)
    2164:	9600      	str	r6, [sp, #0]
    2166:	4633      	mov	r3, r6
    2168:	4632      	mov	r2, r6
    216a:	4629      	mov	r1, r5
    216c:	4620      	mov	r0, r4
    216e:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    2170:	3501      	adds	r5, #1
    2172:	7863      	ldrb	r3, [r4, #1]
    2174:	42ab      	cmp	r3, r5
    2176:	d8f5      	bhi.n	2164 <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    2178:	2b00      	cmp	r3, #0
    217a:	d04f      	beq.n	221c <grid_led_buffer_init+0x108>
    217c:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    217e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2230 <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    2182:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2234 <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    2186:	2500      	movs	r5, #0
    2188:	9501      	str	r5, [sp, #4]
    218a:	9500      	str	r5, [sp, #0]
    218c:	462b      	mov	r3, r5
    218e:	462a      	mov	r2, r5
    2190:	4631      	mov	r1, r6
    2192:	4620      	mov	r0, r4
    2194:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    2196:	9501      	str	r5, [sp, #4]
    2198:	237f      	movs	r3, #127	; 0x7f
    219a:	9300      	str	r3, [sp, #0]
    219c:	462b      	mov	r3, r5
    219e:	462a      	mov	r2, r5
    21a0:	4631      	mov	r1, r6
    21a2:	4620      	mov	r0, r4
    21a4:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    21a6:	9501      	str	r5, [sp, #4]
    21a8:	23ff      	movs	r3, #255	; 0xff
    21aa:	9300      	str	r3, [sp, #0]
    21ac:	462b      	mov	r3, r5
    21ae:	462a      	mov	r2, r5
    21b0:	4631      	mov	r1, r6
    21b2:	4620      	mov	r0, r4
    21b4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2238 <grid_led_buffer_init+0x124>
    21b8:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    21ba:	462b      	mov	r3, r5
    21bc:	462a      	mov	r2, r5
    21be:	4631      	mov	r1, r6
    21c0:	4620      	mov	r0, r4
    21c2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 223c <grid_led_buffer_init+0x128>
    21c6:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    21c8:	462b      	mov	r3, r5
    21ca:	462a      	mov	r2, r5
    21cc:	4631      	mov	r1, r6
    21ce:	4620      	mov	r0, r4
    21d0:	4f16      	ldr	r7, [pc, #88]	; (222c <grid_led_buffer_init+0x118>)
    21d2:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    21d4:	9501      	str	r5, [sp, #4]
    21d6:	9500      	str	r5, [sp, #0]
    21d8:	462b      	mov	r3, r5
    21da:	2201      	movs	r2, #1
    21dc:	4631      	mov	r1, r6
    21de:	4620      	mov	r0, r4
    21e0:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    21e2:	9501      	str	r5, [sp, #4]
    21e4:	9500      	str	r5, [sp, #0]
    21e6:	462b      	mov	r3, r5
    21e8:	2201      	movs	r2, #1
    21ea:	4631      	mov	r1, r6
    21ec:	4620      	mov	r0, r4
    21ee:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    21f0:	9501      	str	r5, [sp, #4]
    21f2:	9500      	str	r5, [sp, #0]
    21f4:	462b      	mov	r3, r5
    21f6:	2201      	movs	r2, #1
    21f8:	4631      	mov	r1, r6
    21fa:	4620      	mov	r0, r4
    21fc:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    21fe:	462b      	mov	r3, r5
    2200:	2201      	movs	r2, #1
    2202:	4631      	mov	r1, r6
    2204:	4620      	mov	r0, r4
    2206:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    2208:	462b      	mov	r3, r5
    220a:	2201      	movs	r2, #1
    220c:	4631      	mov	r1, r6
    220e:	4620      	mov	r0, r4
    2210:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    2212:	3601      	adds	r6, #1
    2214:	b2f6      	uxtb	r6, r6
    2216:	7863      	ldrb	r3, [r4, #1]
    2218:	42b3      	cmp	r3, r6
    221a:	d8b4      	bhi.n	2186 <grid_led_buffer_init+0x72>
}
    221c:	b003      	add	sp, #12
    221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2222:	e7fe      	b.n	2222 <grid_led_buffer_init+0x10e>
    2224:	0000c441 	.word	0x0000c441
    2228:	00001f4d 	.word	0x00001f4d
    222c:	000020dd 	.word	0x000020dd
    2230:	00002001 	.word	0x00002001
    2234:	00002049 	.word	0x00002049
    2238:	00002093 	.word	0x00002093
    223c:	000020f9 	.word	0x000020f9

00002240 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    2240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2244:	b083      	sub	sp, #12
    2246:	f890 c001 	ldrb.w	ip, [r0, #1]
    224a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    224e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    2252:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    2256:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    225a:	6904      	ldr	r4, [r0, #16]
    225c:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    225e:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    2260:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    2264:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    2266:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2268:	f8df 8084 	ldr.w	r8, [pc, #132]	; 22f0 <grid_led_render+0xb0>
    226c:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    226e:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2272:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2274:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2278:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    227c:	f894 a000 	ldrb.w	sl, [r4]
    2280:	f894 b003 	ldrb.w	fp, [r4, #3]
    2284:	fb05 fb0b 	mul.w	fp, r5, fp
    2288:	fb09 bb0a 	mla	fp, r9, sl, fp
    228c:	f894 a006 	ldrb.w	sl, [r4, #6]
    2290:	fb06 ba0a 	mla	sl, r6, sl, fp
    2294:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2296:	f894 a001 	ldrb.w	sl, [r4, #1]
    229a:	f894 b004 	ldrb.w	fp, [r4, #4]
    229e:	fb05 fb0b 	mul.w	fp, r5, fp
    22a2:	fb09 bb0a 	mla	fp, r9, sl, fp
    22a6:	f894 a007 	ldrb.w	sl, [r4, #7]
    22aa:	fb06 ba0a 	mla	sl, r6, sl, fp
    22ae:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    22b0:	f894 a002 	ldrb.w	sl, [r4, #2]
    22b4:	f894 b005 	ldrb.w	fp, [r4, #5]
    22b8:	fb05 f50b 	mul.w	r5, r5, fp
    22bc:	fb09 590a 	mla	r9, r9, sl, r5
    22c0:	7a25      	ldrb	r5, [r4, #8]
    22c2:	fb06 9505 	mla	r5, r6, r5, r9
    22c6:	44ae      	add	lr, r5
    22c8:	3f01      	subs	r7, #1
    22ca:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    22cc:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    22d0:	d1cc      	bne.n	226c <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    22d2:	f3ce 2447 	ubfx	r4, lr, #9, #8
    22d6:	9400      	str	r4, [sp, #0]
    22d8:	f3c3 2347 	ubfx	r3, r3, #9, #8
    22dc:	f3c2 2247 	ubfx	r2, r2, #9, #8
    22e0:	4c02      	ldr	r4, [pc, #8]	; (22ec <grid_led_render+0xac>)
    22e2:	47a0      	blx	r4
	
}
    22e4:	b003      	add	sp, #12
    22e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22ea:	bf00      	nop
    22ec:	00001f4d 	.word	0x00001f4d
    22f0:	20000000 	.word	0x20000000

000022f4 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    22f4:	7843      	ldrb	r3, [r0, #1]
    22f6:	b15b      	cbz	r3, 2310 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    22f8:	b570      	push	{r4, r5, r6, lr}
    22fa:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    22fc:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    22fe:	4e05      	ldr	r6, [pc, #20]	; (2314 <grid_led_render_all+0x20>)
    2300:	4621      	mov	r1, r4
    2302:	4628      	mov	r0, r5
    2304:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    2306:	3401      	adds	r4, #1
    2308:	786b      	ldrb	r3, [r5, #1]
    230a:	42a3      	cmp	r3, r4
    230c:	d8f8      	bhi.n	2300 <grid_led_render_all+0xc>
    230e:	bd70      	pop	{r4, r5, r6, pc}
    2310:	4770      	bx	lr
    2312:	bf00      	nop
    2314:	00002241 	.word	0x00002241

00002318 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    2318:	b510      	push	{r4, lr}
    231a:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    231c:	2200      	movs	r2, #0
    231e:	4b08      	ldr	r3, [pc, #32]	; (2340 <grid_led_hardware_start_transfer_blocking+0x28>)
    2320:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2322:	4808      	ldr	r0, [pc, #32]	; (2344 <grid_led_hardware_start_transfer_blocking+0x2c>)
    2324:	4b08      	ldr	r3, [pc, #32]	; (2348 <grid_led_hardware_start_transfer_blocking+0x30>)
    2326:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2328:	88a2      	ldrh	r2, [r4, #4]
    232a:	68a1      	ldr	r1, [r4, #8]
    232c:	6960      	ldr	r0, [r4, #20]
    232e:	4b07      	ldr	r3, [pc, #28]	; (234c <grid_led_hardware_start_transfer_blocking+0x34>)
    2330:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    2332:	4a03      	ldr	r2, [pc, #12]	; (2340 <grid_led_hardware_start_transfer_blocking+0x28>)
    2334:	7813      	ldrb	r3, [r2, #0]
    2336:	b2db      	uxtb	r3, r3
    2338:	2b01      	cmp	r3, #1
    233a:	d1fb      	bne.n	2334 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    233c:	bd10      	pop	{r4, pc}
    233e:	bf00      	nop
    2340:	200012a8 	.word	0x200012a8
    2344:	20001128 	.word	0x20001128
    2348:	00005175 	.word	0x00005175
    234c:	00004c75 	.word	0x00004c75

00002350 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    2350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2354:	b085      	sub	sp, #20
    2356:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    2358:	4b20      	ldr	r3, [pc, #128]	; (23dc <grid_led_startup_animation+0x8c>)
    235a:	781b      	ldrb	r3, [r3, #0]
    235c:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    235e:	2b20      	cmp	r3, #32
    2360:	d00a      	beq.n	2378 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    2362:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    2366:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    236a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    236e:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2372:	f8df 8074 	ldr.w	r8, [pc, #116]	; 23e8 <grid_led_startup_animation+0x98>
    2376:	e01e      	b.n	23b6 <grid_led_startup_animation+0x66>
		s= 2;
    2378:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    237c:	2300      	movs	r3, #0
    237e:	9303      	str	r3, [sp, #12]
    2380:	e7f3      	b.n	236a <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2382:	9500      	str	r5, [sp, #0]
    2384:	462b      	mov	r3, r5
    2386:	463a      	mov	r2, r7
    2388:	4621      	mov	r1, r4
    238a:	4630      	mov	r0, r6
    238c:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    238e:	3401      	adds	r4, #1
    2390:	b2e4      	uxtb	r4, r4
    2392:	7873      	ldrb	r3, [r6, #1]
    2394:	42a3      	cmp	r3, r4
    2396:	d8f4      	bhi.n	2382 <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    2398:	4630      	mov	r0, r6
    239a:	4b11      	ldr	r3, [pc, #68]	; (23e0 <grid_led_startup_animation+0x90>)
    239c:	4798      	blx	r3
		delay_ms(1);
    239e:	2001      	movs	r0, #1
    23a0:	4b10      	ldr	r3, [pc, #64]	; (23e4 <grid_led_startup_animation+0x94>)
    23a2:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    23a4:	f109 0901 	add.w	r9, r9, #1
    23a8:	fa5f f989 	uxtb.w	r9, r9
    23ac:	f10a 3aff 	add.w	sl, sl, #4294967295
    23b0:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    23b4:	d00f      	beq.n	23d6 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    23b6:	7873      	ldrb	r3, [r6, #1]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d0ed      	beq.n	2398 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    23bc:	fb0b f709 	mul.w	r7, fp, r9
    23c0:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    23c4:	9b03      	ldr	r3, [sp, #12]
    23c6:	fb09 f503 	mul.w	r5, r9, r3
    23ca:	fb0b f505 	mul.w	r5, fp, r5
    23ce:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    23d2:	2400      	movs	r4, #0
    23d4:	e7d5      	b.n	2382 <grid_led_startup_animation+0x32>
}
    23d6:	b005      	add	sp, #20
    23d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23dc:	40000c00 	.word	0x40000c00
    23e0:	00002319 	.word	0x00002319
    23e4:	00004ae9 	.word	0x00004ae9
    23e8:	00001f4d 	.word	0x00001f4d

000023ec <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    23ec:	b570      	push	{r4, r5, r6, lr}
    23ee:	4604      	mov	r4, r0
    23f0:	4e2b      	ldr	r6, [pc, #172]	; (24a0 <grid_led_init+0xb4>)
    23f2:	2200      	movs	r2, #0
    23f4:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    23f6:	f003 0001 	and.w	r0, r3, #1
    23fa:	2800      	cmp	r0, #0
    23fc:	bf14      	ite	ne
    23fe:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    2402:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2406:	f3c3 0540 	ubfx	r5, r3, #1, #1
    240a:	2d00      	cmp	r5, #0
    240c:	bf14      	ite	ne
    240e:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    2412:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2416:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2418:	f3c3 0080 	ubfx	r0, r3, #2, #1
    241c:	2800      	cmp	r0, #0
    241e:	bf14      	ite	ne
    2420:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2424:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2428:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    242a:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    242e:	2d00      	cmp	r5, #0
    2430:	bf14      	ite	ne
    2432:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    2436:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    243a:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    243c:	f3c3 1500 	ubfx	r5, r3, #4, #1
    2440:	2d00      	cmp	r5, #0
    2442:	bf14      	ite	ne
    2444:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2448:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    244c:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    244e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    2452:	2800      	cmp	r0, #0
    2454:	bf14      	ite	ne
    2456:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    245a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    245e:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    2460:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2464:	2800      	cmp	r0, #0
    2466:	bf14      	ite	ne
    2468:	200e      	movne	r0, #14
    246a:	2008      	moveq	r0, #8
    246c:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    246e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    2472:	2b00      	cmp	r3, #0
    2474:	bf14      	ite	ne
    2476:	23e0      	movne	r3, #224	; 0xe0
    2478:	2380      	moveq	r3, #128	; 0x80
    247a:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    247c:	f846 3f04 	str.w	r3, [r6, #4]!
    2480:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    2482:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2486:	d1b5      	bne.n	23f4 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    2488:	4620      	mov	r0, r4
    248a:	4b06      	ldr	r3, [pc, #24]	; (24a4 <grid_led_init+0xb8>)
    248c:	4798      	blx	r3
	grid_led_hardware_init(mod);
    248e:	4620      	mov	r0, r4
    2490:	4b05      	ldr	r3, [pc, #20]	; (24a8 <grid_led_init+0xbc>)
    2492:	4798      	blx	r3
	grid_led_startup_animation(mod);
    2494:	4620      	mov	r0, r4
    2496:	4b05      	ldr	r3, [pc, #20]	; (24ac <grid_led_init+0xc0>)
    2498:	4798      	blx	r3
}
    249a:	2000      	movs	r0, #0
    249c:	bd70      	pop	{r4, r5, r6, pc}
    249e:	bf00      	nop
    24a0:	200033ac 	.word	0x200033ac
    24a4:	00002115 	.word	0x00002115
    24a8:	00001f8d 	.word	0x00001f8d
    24ac:	00002351 	.word	0x00002351

000024b0 <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    24b0:	b510      	push	{r4, lr}
    24b2:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    24b4:	2200      	movs	r2, #0
    24b6:	4b05      	ldr	r3, [pc, #20]	; (24cc <grid_led_hardware_start_transfer+0x1c>)
    24b8:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    24ba:	4805      	ldr	r0, [pc, #20]	; (24d0 <grid_led_hardware_start_transfer+0x20>)
    24bc:	4b05      	ldr	r3, [pc, #20]	; (24d4 <grid_led_hardware_start_transfer+0x24>)
    24be:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    24c0:	88a2      	ldrh	r2, [r4, #4]
    24c2:	68a1      	ldr	r1, [r4, #8]
    24c4:	6960      	ldr	r0, [r4, #20]
    24c6:	4b04      	ldr	r3, [pc, #16]	; (24d8 <grid_led_hardware_start_transfer+0x28>)
    24c8:	4798      	blx	r3
    24ca:	bd10      	pop	{r4, pc}
    24cc:	200012a8 	.word	0x200012a8
    24d0:	20001128 	.word	0x20001128
    24d4:	00005175 	.word	0x00005175
    24d8:	00004c75 	.word	0x00004c75

000024dc <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    24dc:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    24e2:	4b13      	ldr	r3, [pc, #76]	; (2530 <grid_module_common_init+0x54>)
    24e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    24e8:	4b12      	ldr	r3, [pc, #72]	; (2534 <grid_module_common_init+0x58>)
    24ea:	4798      	blx	r3
    24ec:	b178      	cbz	r0, 250e <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    24ee:	4b11      	ldr	r3, [pc, #68]	; (2534 <grid_module_common_init+0x58>)
    24f0:	4798      	blx	r3
    24f2:	2880      	cmp	r0, #128	; 0x80
    24f4:	d00f      	beq.n	2516 <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    24f6:	4b0f      	ldr	r3, [pc, #60]	; (2534 <grid_module_common_init+0x58>)
    24f8:	4798      	blx	r3
    24fa:	2840      	cmp	r0, #64	; 0x40
    24fc:	d00f      	beq.n	251e <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    24fe:	4b0d      	ldr	r3, [pc, #52]	; (2534 <grid_module_common_init+0x58>)
    2500:	4798      	blx	r3
    2502:	28c0      	cmp	r0, #192	; 0xc0
    2504:	d00f      	beq.n	2526 <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    2506:	480c      	ldr	r0, [pc, #48]	; (2538 <grid_module_common_init+0x5c>)
    2508:	4b0c      	ldr	r3, [pc, #48]	; (253c <grid_module_common_init+0x60>)
    250a:	4798      	blx	r3
    250c:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    250e:	480c      	ldr	r0, [pc, #48]	; (2540 <grid_module_common_init+0x64>)
    2510:	4b0c      	ldr	r3, [pc, #48]	; (2544 <grid_module_common_init+0x68>)
    2512:	4798      	blx	r3
    2514:	e7eb      	b.n	24ee <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    2516:	480a      	ldr	r0, [pc, #40]	; (2540 <grid_module_common_init+0x64>)
    2518:	4b0b      	ldr	r3, [pc, #44]	; (2548 <grid_module_common_init+0x6c>)
    251a:	4798      	blx	r3
    251c:	e7eb      	b.n	24f6 <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    251e:	4808      	ldr	r0, [pc, #32]	; (2540 <grid_module_common_init+0x64>)
    2520:	4b0a      	ldr	r3, [pc, #40]	; (254c <grid_module_common_init+0x70>)
    2522:	4798      	blx	r3
    2524:	e7eb      	b.n	24fe <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    2526:	4806      	ldr	r0, [pc, #24]	; (2540 <grid_module_common_init+0x64>)
    2528:	4b09      	ldr	r3, [pc, #36]	; (2550 <grid_module_common_init+0x74>)
    252a:	4798      	blx	r3
    252c:	e7eb      	b.n	2506 <grid_module_common_init+0x2a>
    252e:	bf00      	nop
    2530:	41008000 	.word	0x41008000
    2534:	00003b49 	.word	0x00003b49
    2538:	20003310 	.word	0x20003310
    253c:	000039d9 	.word	0x000039d9
    2540:	20003300 	.word	0x20003300
    2544:	0000359d 	.word	0x0000359d
    2548:	000027d5 	.word	0x000027d5
    254c:	0000321d 	.word	0x0000321d
    2550:	00002d09 	.word	0x00002d09

00002554 <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    2554:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2556:	4803      	ldr	r0, [pc, #12]	; (2564 <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    2558:	4c03      	ldr	r4, [pc, #12]	; (2568 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    255a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    255c:	4803      	ldr	r0, [pc, #12]	; (256c <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    255e:	47a0      	blx	r4
    2560:	bd10      	pop	{r4, pc}
    2562:	bf00      	nop
    2564:	20001058 	.word	0x20001058
    2568:	00004a41 	.word	0x00004a41
    256c:	2000122c 	.word	0x2000122c

00002570 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    2570:	4b7d      	ldr	r3, [pc, #500]	; (2768 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    2572:	781b      	ldrb	r3, [r3, #0]
    2574:	2b00      	cmp	r3, #0
    2576:	f000 80e1 	beq.w	273c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    257a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    257e:	b082      	sub	sp, #8
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2580:	2300      	movs	r3, #0
    2582:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2586:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    258a:	4b77      	ldr	r3, [pc, #476]	; (2768 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    258c:	785a      	ldrb	r2, [r3, #1]
    258e:	3208      	adds	r2, #8
    2590:	4976      	ldr	r1, [pc, #472]	; (276c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1fc>)
    2592:	5c8d      	ldrb	r5, [r1, r2]
    2594:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    2596:	785a      	ldrb	r2, [r3, #1]
    2598:	b2d2      	uxtb	r2, r2
    259a:	5c8c      	ldrb	r4, [r1, r2]
    259c:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    259e:	785a      	ldrb	r2, [r3, #1]
    25a0:	3201      	adds	r2, #1
    25a2:	b2d2      	uxtb	r2, r2
    25a4:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    25a6:	785a      	ldrb	r2, [r3, #1]
    25a8:	f002 0207 	and.w	r2, r2, #7
    25ac:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    25ae:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    25b0:	f013 0f01 	tst.w	r3, #1
    25b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    25b8:	4b6d      	ldr	r3, [pc, #436]	; (2770 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x200>)
    25ba:	bf14      	ite	ne
    25bc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25c0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    25c4:	4b68      	ldr	r3, [pc, #416]	; (2768 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    25c6:	785b      	ldrb	r3, [r3, #1]
    25c8:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    25d0:	4b67      	ldr	r3, [pc, #412]	; (2770 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x200>)
    25d2:	bf14      	ite	ne
    25d4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25d8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    25dc:	4b62      	ldr	r3, [pc, #392]	; (2768 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    25de:	785b      	ldrb	r3, [r3, #1]
    25e0:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    25e8:	4b61      	ldr	r3, [pc, #388]	; (2770 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x200>)
    25ea:	bf14      	ite	ne
    25ec:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25f0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    25f4:	2302      	movs	r3, #2
    25f6:	f10d 0206 	add.w	r2, sp, #6
    25fa:	2100      	movs	r1, #0
    25fc:	485d      	ldr	r0, [pc, #372]	; (2774 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x204>)
    25fe:	4e5e      	ldr	r6, [pc, #376]	; (2778 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x208>)
    2600:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2602:	2302      	movs	r3, #2
    2604:	aa01      	add	r2, sp, #4
    2606:	2100      	movs	r1, #0
    2608:	485c      	ldr	r0, [pc, #368]	; (277c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x20c>)
    260a:	47b0      	blx	r6
	
	uint8_t adcresult_0_valid = 0;
	
	if (adcresult_0>60000){
    260c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2610:	f64e 2260 	movw	r2, #60000	; 0xea60
    2614:	4293      	cmp	r3, r2
    2616:	f240 8097 	bls.w	2748 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>
		adcresult_0 = 0;
    261a:	2300      	movs	r3, #0
    261c:	f8ad 3006 	strh.w	r3, [sp, #6]
		adcresult_0_valid = 1;
    2620:	2001      	movs	r0, #1
		adcresult_0_valid = 1;
	}
		
	uint8_t adcresult_1_valid = 0;
	
	if (adcresult_1>60000){
    2622:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2626:	f64e 2260 	movw	r2, #60000	; 0xea60
    262a:	4293      	cmp	r3, r2
    262c:	f240 8094 	bls.w	2758 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>
		adcresult_1 = 0;
    2630:	2300      	movs	r3, #0
    2632:	f8ad 3004 	strh.w	r3, [sp, #4]
		adcresult_1_valid = 1;
    2636:	2601      	movs	r6, #1
		adcresult_1_valid = 1;
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0] && adcresult_0_valid){
    2638:	012f      	lsls	r7, r5, #4
    263a:	4b51      	ldr	r3, [pc, #324]	; (2780 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x210>)
    263c:	689b      	ldr	r3, [r3, #8]
    263e:	443b      	add	r3, r7
    2640:	68da      	ldr	r2, [r3, #12]
    2642:	7812      	ldrb	r2, [r2, #0]
    2644:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2648:	4291      	cmp	r1, r2
    264a:	d035      	beq.n	26b8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x148>
    264c:	2800      	cmp	r0, #0
    264e:	d033      	beq.n	26b8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x148>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2650:	2a00      	cmp	r2, #0
    2652:	bf0c      	ite	eq
    2654:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2658:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    265c:	6858      	ldr	r0, [r3, #4]
    265e:	bf0c      	ite	eq
    2660:	2290      	moveq	r2, #144	; 0x90
    2662:	2280      	movne	r2, #128	; 0x80
    2664:	2102      	movs	r1, #2
    2666:	3005      	adds	r0, #5
    2668:	f8df a11c 	ldr.w	sl, [pc, #284]	; 2788 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x218>
    266c:	47d0      	blx	sl
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    266e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 2780 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x210>
    2672:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2676:	443b      	add	r3, r7
    2678:	6858      	ldr	r0, [r3, #4]
    267a:	462a      	mov	r2, r5
    267c:	2102      	movs	r1, #2
    267e:	3007      	adds	r0, #7
    2680:	47d0      	blx	sl
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    2682:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2686:	443b      	add	r3, r7
    2688:	6858      	ldr	r0, [r3, #4]
    268a:	464a      	mov	r2, r9
    268c:	2102      	movs	r1, #2
    268e:	3009      	adds	r0, #9
    2690:	47d0      	blx	sl
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    2692:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2696:	443b      	add	r3, r7
    2698:	6858      	ldr	r0, [r3, #4]
    269a:	ea4f 0249 	mov.w	r2, r9, lsl #1
    269e:	2102      	movs	r1, #2
    26a0:	3015      	adds	r0, #21
    26a2:	47d0      	blx	sl
		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    26a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    26a8:	441f      	add	r7, r3
    26aa:	68fb      	ldr	r3, [r7, #12]
    26ac:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    26b0:	4629      	mov	r1, r5
    26b2:	4640      	mov	r0, r8
    26b4:	4b33      	ldr	r3, [pc, #204]	; (2784 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    26b6:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0] && adcresult_1_valid){
    26b8:	0125      	lsls	r5, r4, #4
    26ba:	4b31      	ldr	r3, [pc, #196]	; (2780 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x210>)
    26bc:	689b      	ldr	r3, [r3, #8]
    26be:	442b      	add	r3, r5
    26c0:	68da      	ldr	r2, [r3, #12]
    26c2:	7812      	ldrb	r2, [r2, #0]
    26c4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    26c8:	4291      	cmp	r1, r2
    26ca:	d02f      	beq.n	272c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1bc>
    26cc:	2e00      	cmp	r6, #0
    26ce:	d02d      	beq.n	272c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1bc>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    26d0:	2a00      	cmp	r2, #0
    26d2:	bf0c      	ite	eq
    26d4:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    26d8:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    26dc:	6858      	ldr	r0, [r3, #4]
    26de:	bf0c      	ite	eq
    26e0:	2290      	moveq	r2, #144	; 0x90
    26e2:	2280      	movne	r2, #128	; 0x80
    26e4:	2102      	movs	r1, #2
    26e6:	3005      	adds	r0, #5
    26e8:	4f27      	ldr	r7, [pc, #156]	; (2788 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x218>)
    26ea:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    26ec:	4e24      	ldr	r6, [pc, #144]	; (2780 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x210>)
    26ee:	68b3      	ldr	r3, [r6, #8]
    26f0:	442b      	add	r3, r5
    26f2:	6858      	ldr	r0, [r3, #4]
    26f4:	4622      	mov	r2, r4
    26f6:	2102      	movs	r1, #2
    26f8:	3007      	adds	r0, #7
    26fa:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    26fc:	68b3      	ldr	r3, [r6, #8]
    26fe:	442b      	add	r3, r5
    2700:	6858      	ldr	r0, [r3, #4]
    2702:	4642      	mov	r2, r8
    2704:	2102      	movs	r1, #2
    2706:	3009      	adds	r0, #9
    2708:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    270a:	68b3      	ldr	r3, [r6, #8]
    270c:	442b      	add	r3, r5
    270e:	6858      	ldr	r0, [r3, #4]
    2710:	ea4f 0248 	mov.w	r2, r8, lsl #1
    2714:	2102      	movs	r1, #2
    2716:	3015      	adds	r0, #21
    2718:	47b8      	blx	r7
		
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    271a:	68b3      	ldr	r3, [r6, #8]
    271c:	441d      	add	r5, r3
    271e:	68eb      	ldr	r3, [r5, #12]
    2720:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    2724:	4621      	mov	r1, r4
    2726:	4630      	mov	r0, r6
    2728:	4b16      	ldr	r3, [pc, #88]	; (2784 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    272a:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    272c:	2200      	movs	r2, #0
    272e:	4b0e      	ldr	r3, [pc, #56]	; (2768 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    2730:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2732:	4b16      	ldr	r3, [pc, #88]	; (278c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    2734:	4798      	blx	r3
}
    2736:	b002      	add	sp, #8
    2738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    273c:	4a0a      	ldr	r2, [pc, #40]	; (2768 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f8>)
    273e:	7813      	ldrb	r3, [r2, #0]
    2740:	3301      	adds	r3, #1
    2742:	b2db      	uxtb	r3, r3
    2744:	7013      	strb	r3, [r2, #0]
    2746:	4770      	bx	lr
	else if (adcresult_0<200){
    2748:	2bc7      	cmp	r3, #199	; 0xc7
		adcresult_0 = 127;
    274a:	bf9d      	ittte	ls
    274c:	237f      	movls	r3, #127	; 0x7f
    274e:	f8ad 3006 	strhls.w	r3, [sp, #6]
		adcresult_0_valid = 1;
    2752:	2001      	movls	r0, #1
	uint8_t adcresult_0_valid = 0;
    2754:	2000      	movhi	r0, #0
    2756:	e764      	b.n	2622 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xb2>
	else if (adcresult_1<200){
    2758:	2bc7      	cmp	r3, #199	; 0xc7
		adcresult_1 = 127;
    275a:	bf9d      	ittte	ls
    275c:	237f      	movls	r3, #127	; 0x7f
    275e:	f8ad 3004 	strhls.w	r3, [sp, #4]
		adcresult_1_valid = 1;
    2762:	2601      	movls	r6, #1
	uint8_t adcresult_1_valid = 0;
    2764:	2600      	movhi	r6, #0
    2766:	e767      	b.n	2638 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xc8>
    2768:	20000644 	.word	0x20000644
    276c:	20000300 	.word	0x20000300
    2770:	41008000 	.word	0x41008000
    2774:	20001058 	.word	0x20001058
    2778:	00004961 	.word	0x00004961
    277c:	2000122c 	.word	0x2000122c
    2780:	20003300 	.word	0x20003300
    2784:	00004207 	.word	0x00004207
    2788:	00003b11 	.word	0x00003b11
    278c:	00002555 	.word	0x00002555

00002790 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    2790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    2792:	4f0b      	ldr	r7, [pc, #44]	; (27c0 <grid_module_bu16_revb_hardware_init+0x30>)
    2794:	4c0b      	ldr	r4, [pc, #44]	; (27c4 <grid_module_bu16_revb_hardware_init+0x34>)
    2796:	463b      	mov	r3, r7
    2798:	2200      	movs	r2, #0
    279a:	4611      	mov	r1, r2
    279c:	4620      	mov	r0, r4
    279e:	4e0a      	ldr	r6, [pc, #40]	; (27c8 <grid_module_bu16_revb_hardware_init+0x38>)
    27a0:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    27a2:	4d0a      	ldr	r5, [pc, #40]	; (27cc <grid_module_bu16_revb_hardware_init+0x3c>)
    27a4:	463b      	mov	r3, r7
    27a6:	2200      	movs	r2, #0
    27a8:	4611      	mov	r1, r2
    27aa:	4628      	mov	r0, r5
    27ac:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    27ae:	2100      	movs	r1, #0
    27b0:	4620      	mov	r0, r4
    27b2:	4c07      	ldr	r4, [pc, #28]	; (27d0 <grid_module_bu16_revb_hardware_init+0x40>)
    27b4:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    27b6:	2100      	movs	r1, #0
    27b8:	4628      	mov	r0, r5
    27ba:	47a0      	blx	r4
    27bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27be:	bf00      	nop
    27c0:	00002571 	.word	0x00002571
    27c4:	20001058 	.word	0x20001058
    27c8:	000048e1 	.word	0x000048e1
    27cc:	2000122c 	.word	0x2000122c
    27d0:	000048a1 	.word	0x000048a1

000027d4 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    27d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27d8:	b09b      	sub	sp, #108	; 0x6c
    27da:	4681      	mov	r9, r0

	grid_led_init(&grid_led_state, 16);
    27dc:	2110      	movs	r1, #16
    27de:	4827      	ldr	r0, [pc, #156]	; (287c <grid_module_bu16_revb_init+0xa8>)
    27e0:	4b27      	ldr	r3, [pc, #156]	; (2880 <grid_module_bu16_revb_init+0xac>)
    27e2:	4798      	blx	r3
	grid_ui_model_init(mod, 16);
    27e4:	2110      	movs	r1, #16
    27e6:	4648      	mov	r0, r9
    27e8:	4b26      	ldr	r3, [pc, #152]	; (2884 <grid_module_bu16_revb_init+0xb0>)
    27ea:	4798      	blx	r3
    27ec:	f10d 0837 	add.w	r8, sp, #55	; 0x37
    27f0:	2500      	movs	r5, #0
		
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30] = {0};
    27f2:	462c      	mov	r4, r5
    27f4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 28a4 <grid_module_bu16_revb_init+0xd0>
			
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    27f8:	4f23      	ldr	r7, [pc, #140]	; (2888 <grid_module_bu16_revb_init+0xb4>)
		uint8_t payload_template[30] = {0};
    27fa:	221e      	movs	r2, #30
    27fc:	4621      	mov	r1, r4
    27fe:	a812      	add	r0, sp, #72	; 0x48
    2800:	47d0      	blx	sl
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2802:	ae0e      	add	r6, sp, #56	; 0x38
    2804:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    2808:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    280c:	2303      	movs	r3, #3
    280e:	930b      	str	r3, [sp, #44]	; 0x2c
    2810:	940a      	str	r4, [sp, #40]	; 0x28
    2812:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    2816:	9209      	str	r2, [sp, #36]	; 0x24
    2818:	2263      	movs	r2, #99	; 0x63
    281a:	9208      	str	r2, [sp, #32]
    281c:	9407      	str	r4, [sp, #28]
    281e:	9306      	str	r3, [sp, #24]
    2820:	2602      	movs	r6, #2
    2822:	9605      	str	r6, [sp, #20]
    2824:	9304      	str	r3, [sp, #16]
    2826:	9403      	str	r4, [sp, #12]
    2828:	9502      	str	r5, [sp, #8]
    282a:	2390      	movs	r3, #144	; 0x90
    282c:	9301      	str	r3, [sp, #4]
    282e:	9400      	str	r4, [sp, #0]
    2830:	4623      	mov	r3, r4
    2832:	4632      	mov	r2, r6
    2834:	4915      	ldr	r1, [pc, #84]	; (288c <grid_module_bu16_revb_init+0xb8>)
    2836:	a812      	add	r0, sp, #72	; 0x48
    2838:	f8df b06c 	ldr.w	fp, [pc, #108]	; 28a8 <grid_module_bu16_revb_init+0xd4>
    283c:	47d8      	blx	fp

		);
			
		
		
		uint8_t payload_length = strlen(payload_template);
    283e:	a812      	add	r0, sp, #72	; 0x48
    2840:	4b13      	ldr	r3, [pc, #76]	; (2890 <grid_module_bu16_revb_init+0xbc>)
    2842:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2844:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    2848:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    284c:	9602      	str	r6, [sp, #8]
    284e:	ab0d      	add	r3, sp, #52	; 0x34
    2850:	9301      	str	r3, [sp, #4]
    2852:	b2c0      	uxtb	r0, r0
    2854:	9000      	str	r0, [sp, #0]
    2856:	ab12      	add	r3, sp, #72	; 0x48
    2858:	4632      	mov	r2, r6
    285a:	b2e9      	uxtb	r1, r5
    285c:	4648      	mov	r0, r9
    285e:	4e0d      	ldr	r6, [pc, #52]	; (2894 <grid_module_bu16_revb_init+0xc0>)
    2860:	47b0      	blx	r6
    2862:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    2864:	2d10      	cmp	r5, #16
    2866:	d1c8      	bne.n	27fa <grid_module_bu16_revb_init+0x26>
		

	}
	
	grid_report_sys_init(mod);
    2868:	4648      	mov	r0, r9
    286a:	4b0b      	ldr	r3, [pc, #44]	; (2898 <grid_module_bu16_revb_init+0xc4>)
    286c:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    286e:	4b0b      	ldr	r3, [pc, #44]	; (289c <grid_module_bu16_revb_init+0xc8>)
    2870:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    2872:	4b0b      	ldr	r3, [pc, #44]	; (28a0 <grid_module_bu16_revb_init+0xcc>)
    2874:	4798      	blx	r3

};
    2876:	b01b      	add	sp, #108	; 0x6c
    2878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    287c:	20007864 	.word	0x20007864
    2880:	000023ed 	.word	0x000023ed
    2884:	00003ef1 	.word	0x00003ef1
    2888:	0000da30 	.word	0x0000da30
    288c:	0000da40 	.word	0x0000da40
    2890:	0000c89d 	.word	0x0000c89d
    2894:	00003fb5 	.word	0x00003fb5
    2898:	00003fd9 	.word	0x00003fd9
    289c:	00002791 	.word	0x00002791
    28a0:	00002555 	.word	0x00002555
    28a4:	0000c467 	.word	0x0000c467
    28a8:	0000c855 	.word	0x0000c855

000028ac <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    28ac:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    28ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    28b2:	4b06      	ldr	r3, [pc, #24]	; (28cc <grid_module_en16_reva_hardware_start_transfer+0x20>)
    28b4:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    28b6:	4c06      	ldr	r4, [pc, #24]	; (28d0 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    28b8:	4620      	mov	r0, r4
    28ba:	4b06      	ldr	r3, [pc, #24]	; (28d4 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    28bc:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    28be:	2308      	movs	r3, #8
    28c0:	4a05      	ldr	r2, [pc, #20]	; (28d8 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    28c2:	4906      	ldr	r1, [pc, #24]	; (28dc <grid_module_en16_reva_hardware_start_transfer+0x30>)
    28c4:	4620      	mov	r0, r4
    28c6:	4c06      	ldr	r4, [pc, #24]	; (28e0 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    28c8:	47a0      	blx	r4
    28ca:	bd10      	pop	{r4, pc}
    28cc:	41008000 	.word	0x41008000
    28d0:	20000f4c 	.word	0x20000f4c
    28d4:	00004f49 	.word	0x00004f49
    28d8:	200022e8 	.word	0x200022e8
    28dc:	20000310 	.word	0x20000310
    28e0:	00004fe9 	.word	0x00004fe9
    28e4:	00000000 	.word	0x00000000

000028e8 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    28e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28ec:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    28ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    28f2:	4bad      	ldr	r3, [pc, #692]	; (2ba8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    28f4:	615a      	str	r2, [r3, #20]
    28f6:	2700      	movs	r7, #0
    28f8:	e07b      	b.n	29f2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x10a>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    28fa:	49ac      	ldr	r1, [pc, #688]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    28fc:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2900:	78c9      	ldrb	r1, [r1, #3]
    2902:	42d1      	cmn	r1, r2
    2904:	d405      	bmi.n	2912 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a>
						grid_ui_encoder_array[i].rotation_value += xi;
    2906:	4aa9      	ldr	r2, [pc, #676]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2908:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    290c:	440b      	add	r3, r1
    290e:	70d3      	strb	r3, [r2, #3]
    2910:	e00a      	b.n	2928 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    2912:	4ba6      	ldr	r3, [pc, #664]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2914:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2918:	2200      	movs	r2, #0
    291a:	70da      	strb	r2, [r3, #3]
    291c:	e004      	b.n	2928 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    291e:	4ba3      	ldr	r3, [pc, #652]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2920:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2924:	227f      	movs	r2, #127	; 0x7f
    2926:	70da      	strb	r2, [r3, #3]
				
				uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
				
				
				uint8_t value = 0;
				if (0 == grid_report_ui_get_changed_flag(mod, i+16)){
    2928:	f104 0810 	add.w	r8, r4, #16
    292c:	fa5f f888 	uxtb.w	r8, r8
    2930:	4641      	mov	r1, r8
    2932:	489f      	ldr	r0, [pc, #636]	; (2bb0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2934:	4b9f      	ldr	r3, [pc, #636]	; (2bb4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2936:	4798      	blx	r3
    2938:	2800      	cmp	r0, #0
    293a:	f040 8107 	bne.w	2b4c <grid_module_en16_reva_hardware_transfer_complete_cb+0x264>
					value = 64; //CENTER
					mod->report_ui_array[i+16].helper[0] = 0;
    293e:	4b9c      	ldr	r3, [pc, #624]	; (2bb0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2940:	689b      	ldr	r3, [r3, #8]
    2942:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2946:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    294a:	2200      	movs	r2, #0
    294c:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    294e:	2340      	movs	r3, #64	; 0x40
				}
				else{
					value = mod->report_ui_array[i+16].helper[0];
				}
				
				value +=  delta*velocityfactor;
    2950:	fb06 3505 	mla	r5, r6, r5, r3
    2954:	b2ed      	uxtb	r5, r5
				
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
				
				if (value != mod->report_ui_array[i+16].helper[0]){
    2956:	f104 0610 	add.w	r6, r4, #16
    295a:	0136      	lsls	r6, r6, #4
    295c:	4b94      	ldr	r3, [pc, #592]	; (2bb0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    295e:	689b      	ldr	r3, [r3, #8]
    2960:	4433      	add	r3, r6
    2962:	68da      	ldr	r2, [r3, #12]
    2964:	7812      	ldrb	r2, [r2, #0]
    2966:	42aa      	cmp	r2, r5
    2968:	d03f      	beq.n	29ea <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
    296a:	4a90      	ldr	r2, [pc, #576]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    296c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2970:	f892 a003 	ldrb.w	sl, [r2, #3]
    2974:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    2978:	fa5f fa8a 	uxtb.w	sl, sl
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[5], 2, command);
    297c:	6858      	ldr	r0, [r3, #4]
    297e:	22b0      	movs	r2, #176	; 0xb0
    2980:	2102      	movs	r1, #2
    2982:	3005      	adds	r0, #5
    2984:	f8df b264 	ldr.w	fp, [pc, #612]	; 2bec <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    2988:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[7], 2, i);
    298a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 2bb0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    298e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2992:	4433      	add	r3, r6
    2994:	6858      	ldr	r0, [r3, #4]
    2996:	4622      	mov	r2, r4
    2998:	2102      	movs	r1, #2
    299a:	3007      	adds	r0, #7
    299c:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[9], 2, value);
    299e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29a2:	4433      	add	r3, r6
    29a4:	6858      	ldr	r0, [r3, #4]
    29a6:	462a      	mov	r2, r5
    29a8:	2102      	movs	r1, #2
    29aa:	3009      	adds	r0, #9
    29ac:	47d8      	blx	fp
					
					mod->report_ui_array[i+16].helper[0] = value;
    29ae:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29b2:	4433      	add	r3, r6
    29b4:	68db      	ldr	r3, [r3, #12]
    29b6:	701d      	strb	r5, [r3, #0]
					grid_report_ui_set_changed_flag(mod, i+16);
    29b8:	4641      	mov	r1, r8
    29ba:	4648      	mov	r0, r9
    29bc:	4d7e      	ldr	r5, [pc, #504]	; (2bb8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    29be:	47a8      	blx	r5
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, actuator); // LED
    29c0:	f506 7680 	add.w	r6, r6, #256	; 0x100
    29c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29c8:	4433      	add	r3, r6
    29ca:	6858      	ldr	r0, [r3, #4]
    29cc:	4652      	mov	r2, sl
    29ce:	2102      	movs	r1, #2
    29d0:	3009      	adds	r0, #9
    29d2:	47d8      	blx	fp
					mod->report_ui_array[i+16+16].helper[0] = actuator;
    29d4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29d8:	441e      	add	r6, r3
    29da:	68f3      	ldr	r3, [r6, #12]
    29dc:	f883 a000 	strb.w	sl, [r3]
					grid_report_ui_set_changed_flag(mod, i+16+16);
    29e0:	f104 0120 	add.w	r1, r4, #32
    29e4:	b2c9      	uxtb	r1, r1
    29e6:	4648      	mov	r0, r9
    29e8:	47a8      	blx	r5
    29ea:	3701      	adds	r7, #1
	for (uint8_t j=0; j<16; j++){
    29ec:	2f10      	cmp	r7, #16
    29ee:	f000 811e 	beq.w	2c2e <grid_module_en16_reva_hardware_transfer_complete_cb+0x346>
    29f2:	b2f9      	uxtb	r1, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    29f4:	084b      	lsrs	r3, r1, #1
    29f6:	4a71      	ldr	r2, [pc, #452]	; (2bbc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    29f8:	5cd3      	ldrb	r3, [r2, r3]
    29fa:	f001 0201 	and.w	r2, r1, #1
    29fe:	0092      	lsls	r2, r2, #2
    2a00:	4113      	asrs	r3, r2
    2a02:	b2db      	uxtb	r3, r3
    2a04:	f003 000f 	and.w	r0, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    2a08:	4a6d      	ldr	r2, [pc, #436]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    2a0a:	5dd2      	ldrb	r2, [r2, r7]
    2a0c:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    2a0e:	4290      	cmp	r0, r2
    2a10:	d0eb      	beq.n	29ea <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    2a12:	4a6c      	ldr	r2, [pc, #432]	; (2bc4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
    2a14:	5cbc      	ldrb	r4, [r7, r2]
			UI_SPI_DEBUG = j;
    2a16:	4a6c      	ldr	r2, [pc, #432]	; (2bc8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>)
    2a18:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    2a1a:	0882      	lsrs	r2, r0, #2
			uint8_t phase_a = (new_value>>1)&1;
    2a1c:	f3c0 0840 	ubfx	r8, r0, #1, #1
			uint8_t phase_b = (new_value)&1;
    2a20:	f003 0501 	and.w	r5, r3, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    2a24:	4b61      	ldr	r3, [pc, #388]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a26:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2a2a:	785b      	ldrb	r3, [r3, #1]
    2a2c:	4293      	cmp	r3, r2
    2a2e:	d035      	beq.n	2a9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x1b4>
				grid_ui_encoder_array[i].button_changed = 1;
    2a30:	4b5e      	ldr	r3, [pc, #376]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a32:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2a36:	2101      	movs	r1, #1
    2a38:	7099      	strb	r1, [r3, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    2a3a:	705a      	strb	r2, [r3, #1]
					velocity = 0;
    2a3c:	2a00      	cmp	r2, #0
    2a3e:	bf0c      	ite	eq
    2a40:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    2a44:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[5], 2, command);
    2a48:	ea4f 1604 	mov.w	r6, r4, lsl #4
    2a4c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2bb0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    2a50:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a54:	4433      	add	r3, r6
    2a56:	6858      	ldr	r0, [r3, #4]
    2a58:	bf0c      	ite	eq
    2a5a:	2290      	moveq	r2, #144	; 0x90
    2a5c:	2280      	movne	r2, #128	; 0x80
    2a5e:	2102      	movs	r1, #2
    2a60:	3005      	adds	r0, #5
    2a62:	f8df b188 	ldr.w	fp, [pc, #392]	; 2bec <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    2a66:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[7], 2, i);
    2a68:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a6c:	4433      	add	r3, r6
    2a6e:	6858      	ldr	r0, [r3, #4]
    2a70:	4622      	mov	r2, r4
    2a72:	2102      	movs	r1, #2
    2a74:	3007      	adds	r0, #7
    2a76:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[9], 2, velocity);
    2a78:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a7c:	4433      	add	r3, r6
    2a7e:	6858      	ldr	r0, [r3, #4]
    2a80:	4652      	mov	r2, sl
    2a82:	2102      	movs	r1, #2
    2a84:	3009      	adds	r0, #9
    2a86:	47d8      	blx	fp
				mod->report_ui_array[i].helper[0] = velocity;
    2a88:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2a8c:	441e      	add	r6, r3
    2a8e:	68f3      	ldr	r3, [r6, #12]
    2a90:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, i);
    2a94:	4621      	mov	r1, r4
    2a96:	4648      	mov	r0, r9
    2a98:	4b47      	ldr	r3, [pc, #284]	; (2bb8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2a9a:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    2a9c:	4b43      	ldr	r3, [pc, #268]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a9e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
			if (a_now != a_prev){
    2aa2:	7b5b      	ldrb	r3, [r3, #13]
    2aa4:	4543      	cmp	r3, r8
    2aa6:	f000 80ca 	beq.w	2c3e <grid_module_en16_reva_hardware_transfer_complete_cb+0x356>
					delta = +1;
    2aaa:	45a8      	cmp	r8, r5
    2aac:	bf14      	ite	ne
    2aae:	f04f 36ff 	movne.w	r6, #4294967295
    2ab2:	2601      	moveq	r6, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    2ab4:	4b3d      	ldr	r3, [pc, #244]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2ab6:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    2aba:	f882 800d 	strb.w	r8, [r2, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2abe:	7395      	strb	r5, [r2, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i+1].last_real_time);
    2ac0:	6991      	ldr	r1, [r2, #24]
    2ac2:	4842      	ldr	r0, [pc, #264]	; (2bcc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2ac4:	4b42      	ldr	r3, [pc, #264]	; (2bd0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e8>)
    2ac6:	4798      	blx	r3
    2ac8:	9001      	str	r0, [sp, #4]
				if (elapsed_time>400){
    2aca:	9b01      	ldr	r3, [sp, #4]
    2acc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2ad0:	bf84      	itt	hi
    2ad2:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    2ad6:	9301      	strhi	r3, [sp, #4]
				if (elapsed_time<20){
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    2adc:	bf9c      	itt	ls
    2ade:	2314      	movls	r3, #20
    2ae0:	9301      	strls	r3, [sp, #4]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    2ae2:	9b01      	ldr	r3, [sp, #4]
    2ae4:	9801      	ldr	r0, [sp, #4]
    2ae6:	fb00 f003 	mul.w	r0, r0, r3
    2aea:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2aee:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2af2:	4b38      	ldr	r3, [pc, #224]	; (2bd4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ec>)
    2af4:	4798      	blx	r3
    2af6:	a32a      	add	r3, pc, #168	; (adr r3, 2ba0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
    2af8:	e9d3 2300 	ldrd	r2, r3, [r3]
    2afc:	4d36      	ldr	r5, [pc, #216]	; (2bd8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>)
    2afe:	47a8      	blx	r5
    2b00:	2200      	movs	r2, #0
    2b02:	4b36      	ldr	r3, [pc, #216]	; (2bdc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f4>)
    2b04:	4d36      	ldr	r5, [pc, #216]	; (2be0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>)
    2b06:	47a8      	blx	r5
    2b08:	4b36      	ldr	r3, [pc, #216]	; (2be4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    2b0a:	4798      	blx	r3
    2b0c:	b2c5      	uxtb	r5, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2b0e:	482f      	ldr	r0, [pc, #188]	; (2bcc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2b10:	4b35      	ldr	r3, [pc, #212]	; (2be8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    2b12:	4798      	blx	r3
    2b14:	4b25      	ldr	r3, [pc, #148]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2b16:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2b1a:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2b1c:	fb05 6306 	mla	r3, r5, r6, r6
    2b20:	b29b      	uxth	r3, r3
    2b22:	b21a      	sxth	r2, r3
				if (delta<0){
    2b24:	2e00      	cmp	r6, #0
    2b26:	f6ff aee8 	blt.w	28fa <grid_module_en16_reva_hardware_transfer_complete_cb+0x12>
				else if (delta>0){
    2b2a:	2e00      	cmp	r6, #0
    2b2c:	f77f aefc 	ble.w	2928 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    2b30:	491e      	ldr	r1, [pc, #120]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2b32:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2b36:	78c9      	ldrb	r1, [r1, #3]
    2b38:	440a      	add	r2, r1
    2b3a:	2a7f      	cmp	r2, #127	; 0x7f
    2b3c:	f73f aeef 	bgt.w	291e <grid_module_en16_reva_hardware_transfer_complete_cb+0x36>
						grid_ui_encoder_array[i].rotation_value += xi;
    2b40:	4a1a      	ldr	r2, [pc, #104]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2b42:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2b46:	440b      	add	r3, r1
    2b48:	70d3      	strb	r3, [r2, #3]
    2b4a:	e6ed      	b.n	2928 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					value = mod->report_ui_array[i+16].helper[0];
    2b4c:	4b18      	ldr	r3, [pc, #96]	; (2bb0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2b4e:	689b      	ldr	r3, [r3, #8]
    2b50:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2b54:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    2b58:	781b      	ldrb	r3, [r3, #0]
    2b5a:	e6f9      	b.n	2950 <grid_module_en16_reva_hardware_transfer_complete_cb+0x68>
			else{ //DELTA==0

				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
					if (grid_ui_encoder_array[i].rotation_value > 64){

						grid_ui_encoder_array[i].rotation_value--;
    2b5c:	3b01      	subs	r3, #1
    2b5e:	b2db      	uxtb	r3, r3
    2b60:	4a12      	ldr	r2, [pc, #72]	; (2bac <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2b62:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2b66:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2b68:	005b      	lsls	r3, r3, #1
    2b6a:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2b6c:	f104 0820 	add.w	r8, r4, #32
    2b70:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2b74:	4e0e      	ldr	r6, [pc, #56]	; (2bb0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2b76:	68b3      	ldr	r3, [r6, #8]
    2b78:	444b      	add	r3, r9
    2b7a:	6858      	ldr	r0, [r3, #4]
    2b7c:	462a      	mov	r2, r5
    2b7e:	2102      	movs	r1, #2
    2b80:	3009      	adds	r0, #9
    2b82:	4b1a      	ldr	r3, [pc, #104]	; (2bec <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    2b84:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2b86:	68b3      	ldr	r3, [r6, #8]
    2b88:	444b      	add	r3, r9
    2b8a:	68db      	ldr	r3, [r3, #12]
    2b8c:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2b8e:	fa5f f188 	uxtb.w	r1, r8
    2b92:	4630      	mov	r0, r6
    2b94:	4b08      	ldr	r3, [pc, #32]	; (2bb8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2b96:	4798      	blx	r3
    2b98:	e063      	b.n	2c62 <grid_module_en16_reva_hardware_transfer_complete_cb+0x37a>
    2b9a:	bf00      	nop
    2b9c:	f3af 8000 	nop.w
    2ba0:	00000000 	.word	0x00000000
    2ba4:	40e38800 	.word	0x40e38800
    2ba8:	41008000 	.word	0x41008000
    2bac:	20007894 	.word	0x20007894
    2bb0:	20003300 	.word	0x20003300
    2bb4:	000041fb 	.word	0x000041fb
    2bb8:	00004207 	.word	0x00004207
    2bbc:	200022e8 	.word	0x200022e8
    2bc0:	200022d0 	.word	0x200022d0
    2bc4:	20000320 	.word	0x20000320
    2bc8:	200022b4 	.word	0x200022b4
    2bcc:	20003310 	.word	0x20003310
    2bd0:	00003a1d 	.word	0x00003a1d
    2bd4:	0000bea9 	.word	0x0000bea9
    2bd8:	0000c1e9 	.word	0x0000c1e9
    2bdc:	3ff00000 	.word	0x3ff00000
    2be0:	0000bc31 	.word	0x0000bc31
    2be4:	0000c3b9 	.word	0x0000c3b9
    2be8:	00003a19 	.word	0x00003a19
    2bec:	00003b11 	.word	0x00003b11

					}
					if (grid_ui_encoder_array[i].rotation_value < 64){

						grid_ui_encoder_array[i].rotation_value++;
    2bf0:	3301      	adds	r3, #1
    2bf2:	b2db      	uxtb	r3, r3
    2bf4:	4a22      	ldr	r2, [pc, #136]	; (2c80 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2bf6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2bfa:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2bfc:	005b      	lsls	r3, r3, #1
    2bfe:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2c00:	f104 0820 	add.w	r8, r4, #32
    2c04:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2c08:	4e1e      	ldr	r6, [pc, #120]	; (2c84 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>)
    2c0a:	68b3      	ldr	r3, [r6, #8]
    2c0c:	444b      	add	r3, r9
    2c0e:	6858      	ldr	r0, [r3, #4]
    2c10:	462a      	mov	r2, r5
    2c12:	2102      	movs	r1, #2
    2c14:	3009      	adds	r0, #9
    2c16:	4b1c      	ldr	r3, [pc, #112]	; (2c88 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a0>)
    2c18:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2c1a:	68b3      	ldr	r3, [r6, #8]
    2c1c:	444b      	add	r3, r9
    2c1e:	68db      	ldr	r3, [r3, #12]
    2c20:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2c22:	fa5f f188 	uxtb.w	r1, r8
    2c26:	4630      	mov	r0, r6
    2c28:	4b18      	ldr	r3, [pc, #96]	; (2c8c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a4>)
    2c2a:	4798      	blx	r3
    2c2c:	e01f      	b.n	2c6e <grid_module_en16_reva_hardware_transfer_complete_cb+0x386>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    2c2e:	2200      	movs	r2, #0
    2c30:	4b17      	ldr	r3, [pc, #92]	; (2c90 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a8>)
    2c32:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2c34:	4b17      	ldr	r3, [pc, #92]	; (2c94 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ac>)
    2c36:	4798      	blx	r3
}
    2c38:	b003      	add	sp, #12
    2c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2c3e:	4b10      	ldr	r3, [pc, #64]	; (2c80 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2c40:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2c44:	739d      	strb	r5, [r3, #14]
				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
    2c46:	6899      	ldr	r1, [r3, #8]
    2c48:	4813      	ldr	r0, [pc, #76]	; (2c98 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2c4a:	4b14      	ldr	r3, [pc, #80]	; (2c9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b4>)
    2c4c:	4798      	blx	r3
    2c4e:	28c8      	cmp	r0, #200	; 0xc8
    2c50:	f67f aecb 	bls.w	29ea <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
					if (grid_ui_encoder_array[i].rotation_value > 64){
    2c54:	4b0a      	ldr	r3, [pc, #40]	; (2c80 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2c56:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2c5a:	78db      	ldrb	r3, [r3, #3]
    2c5c:	2b40      	cmp	r3, #64	; 0x40
    2c5e:	f63f af7d 	bhi.w	2b5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x274>
					if (grid_ui_encoder_array[i].rotation_value < 64){
    2c62:	4b07      	ldr	r3, [pc, #28]	; (2c80 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2c64:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2c68:	78db      	ldrb	r3, [r3, #3]
    2c6a:	2b3f      	cmp	r3, #63	; 0x3f
    2c6c:	d9c0      	bls.n	2bf0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>
					grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2c6e:	480a      	ldr	r0, [pc, #40]	; (2c98 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2c70:	4b0b      	ldr	r3, [pc, #44]	; (2ca0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b8>)
    2c72:	4798      	blx	r3
    2c74:	4902      	ldr	r1, [pc, #8]	; (2c80 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2c76:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    2c7a:	60a0      	str	r0, [r4, #8]
    2c7c:	e6b5      	b.n	29ea <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
    2c7e:	bf00      	nop
    2c80:	20007894 	.word	0x20007894
    2c84:	20003300 	.word	0x20003300
    2c88:	00003b11 	.word	0x00003b11
    2c8c:	00004207 	.word	0x00004207
    2c90:	20007890 	.word	0x20007890
    2c94:	000028ad 	.word	0x000028ad
    2c98:	20003310 	.word	0x20003310
    2c9c:	00003a1d 	.word	0x00003a1d
    2ca0:	00003a19 	.word	0x00003a19

00002ca4 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2ca4:	b510      	push	{r4, lr}
    2ca6:	4b0e      	ldr	r3, [pc, #56]	; (2ce0 <grid_module_en16_reva_hardware_init+0x3c>)
    2ca8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2cac:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cae:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2cb4:	629a      	str	r2, [r3, #40]	; 0x28
    2cb6:	4a0b      	ldr	r2, [pc, #44]	; (2ce4 <grid_module_en16_reva_hardware_init+0x40>)
    2cb8:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2cba:	4c0b      	ldr	r4, [pc, #44]	; (2ce8 <grid_module_en16_reva_hardware_init+0x44>)
    2cbc:	2103      	movs	r1, #3
    2cbe:	4620      	mov	r0, r4
    2cc0:	4b0a      	ldr	r3, [pc, #40]	; (2cec <grid_module_en16_reva_hardware_init+0x48>)
    2cc2:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2cc4:	490a      	ldr	r1, [pc, #40]	; (2cf0 <grid_module_en16_reva_hardware_init+0x4c>)
    2cc6:	4620      	mov	r0, r4
    2cc8:	4b0a      	ldr	r3, [pc, #40]	; (2cf4 <grid_module_en16_reva_hardware_init+0x50>)
    2cca:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2ccc:	490a      	ldr	r1, [pc, #40]	; (2cf8 <grid_module_en16_reva_hardware_init+0x54>)
    2cce:	4620      	mov	r0, r4
    2cd0:	4b0a      	ldr	r3, [pc, #40]	; (2cfc <grid_module_en16_reva_hardware_init+0x58>)
    2cd2:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2cd4:	4a0a      	ldr	r2, [pc, #40]	; (2d00 <grid_module_en16_reva_hardware_init+0x5c>)
    2cd6:	2100      	movs	r1, #0
    2cd8:	4620      	mov	r0, r4
    2cda:	4b0a      	ldr	r3, [pc, #40]	; (2d04 <grid_module_en16_reva_hardware_init+0x60>)
    2cdc:	4798      	blx	r3
    2cde:	bd10      	pop	{r4, pc}
    2ce0:	41008000 	.word	0x41008000
    2ce4:	c0000020 	.word	0xc0000020
    2ce8:	20000f4c 	.word	0x20000f4c
    2cec:	00004fad 	.word	0x00004fad
    2cf0:	00061a80 	.word	0x00061a80
    2cf4:	00004f71 	.word	0x00004f71
    2cf8:	200022cc 	.word	0x200022cc
    2cfc:	00005095 	.word	0x00005095
    2d00:	000028e9 	.word	0x000028e9
    2d04:	00005051 	.word	0x00005051

00002d08 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d0c:	b091      	sub	sp, #68	; 0x44
    2d0e:	4680      	mov	r8, r0
	
	
	grid_led_init(&grid_led_state, 16);
    2d10:	2110      	movs	r1, #16
    2d12:	4836      	ldr	r0, [pc, #216]	; (2dec <grid_module_en16_reva_init+0xe4>)
    2d14:	4b36      	ldr	r3, [pc, #216]	; (2df0 <grid_module_en16_reva_init+0xe8>)
    2d16:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16);
    2d18:	2130      	movs	r1, #48	; 0x30
    2d1a:	4640      	mov	r0, r8
    2d1c:	4b35      	ldr	r3, [pc, #212]	; (2df4 <grid_module_en16_reva_init+0xec>)
    2d1e:	4798      	blx	r3
    2d20:	2500      	movs	r5, #0
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<16+16+16; i++){
		
		uint8_t payload_template[30] = {0};
    2d22:	462c      	mov	r4, r5
    2d24:	4f34      	ldr	r7, [pc, #208]	; (2df8 <grid_module_en16_reva_init+0xf0>)
    2d26:	e036      	b.n	2d96 <grid_module_en16_reva_init+0x8e>
		

		if (i<16){ // ROTATION
			type = GRID_REPORT_TYPE_BROADCAST;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2d28:	2303      	movs	r3, #3
    2d2a:	9304      	str	r3, [sp, #16]
    2d2c:	9403      	str	r4, [sp, #12]
    2d2e:	9502      	str	r5, [sp, #8]
    2d30:	2390      	movs	r3, #144	; 0x90
    2d32:	9301      	str	r3, [sp, #4]
    2d34:	9400      	str	r4, [sp, #0]
    2d36:	4623      	mov	r3, r4
    2d38:	2202      	movs	r2, #2
    2d3a:	4930      	ldr	r1, [pc, #192]	; (2dfc <grid_module_en16_reva_init+0xf4>)
    2d3c:	a808      	add	r0, sp, #32
    2d3e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2e18 <grid_module_en16_reva_init+0x110>
    2d42:	47c8      	blx	r9
			type = GRID_REPORT_TYPE_BROADCAST;
    2d44:	f04f 0902 	mov.w	r9, #2
    2d48:	e010      	b.n	2d6c <grid_module_en16_reva_init+0x64>
		
		}
		else{ // LED
			type = GRID_REPORT_TYPE_LOCAL;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2d4a:	2303      	movs	r3, #3
    2d4c:	9304      	str	r3, [sp, #16]
    2d4e:	9403      	str	r4, [sp, #12]
    2d50:	f1a5 0220 	sub.w	r2, r5, #32
    2d54:	9202      	str	r2, [sp, #8]
    2d56:	2263      	movs	r2, #99	; 0x63
    2d58:	9201      	str	r2, [sp, #4]
    2d5a:	9400      	str	r4, [sp, #0]
    2d5c:	2202      	movs	r2, #2
    2d5e:	4927      	ldr	r1, [pc, #156]	; (2dfc <grid_module_en16_reva_init+0xf4>)
    2d60:	a808      	add	r0, sp, #32
    2d62:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2e18 <grid_module_en16_reva_init+0x110>
    2d66:	47c8      	blx	r9
			type = GRID_REPORT_TYPE_LOCAL;
    2d68:	f04f 0901 	mov.w	r9, #1
			);
				
		}

		
		uint32_t payload_length = strlen(payload_template);
    2d6c:	a808      	add	r0, sp, #32
    2d6e:	4b24      	ldr	r3, [pc, #144]	; (2e00 <grid_module_en16_reva_init+0xf8>)
    2d70:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2d72:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    2d76:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    2d7a:	2302      	movs	r3, #2
    2d7c:	9302      	str	r3, [sp, #8]
    2d7e:	ab07      	add	r3, sp, #28
    2d80:	9301      	str	r3, [sp, #4]
    2d82:	9000      	str	r0, [sp, #0]
    2d84:	ab08      	add	r3, sp, #32
    2d86:	464a      	mov	r2, r9
    2d88:	4631      	mov	r1, r6
    2d8a:	4640      	mov	r0, r8
    2d8c:	4e1d      	ldr	r6, [pc, #116]	; (2e04 <grid_module_en16_reva_init+0xfc>)
    2d8e:	47b0      	blx	r6
    2d90:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16+16+16; i++){
    2d92:	2d30      	cmp	r5, #48	; 0x30
    2d94:	d019      	beq.n	2dca <grid_module_en16_reva_init+0xc2>
    2d96:	b2ee      	uxtb	r6, r5
		uint8_t payload_template[30] = {0};
    2d98:	221e      	movs	r2, #30
    2d9a:	4621      	mov	r1, r4
    2d9c:	a808      	add	r0, sp, #32
    2d9e:	47b8      	blx	r7
		if (i<16){ // ROTATION
    2da0:	2e0f      	cmp	r6, #15
    2da2:	d9c1      	bls.n	2d28 <grid_module_en16_reva_init+0x20>
		else if (i<16+16){ // BUTTON
    2da4:	2e1f      	cmp	r6, #31
    2da6:	d8d0      	bhi.n	2d4a <grid_module_en16_reva_init+0x42>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2da8:	2303      	movs	r3, #3
    2daa:	9304      	str	r3, [sp, #16]
    2dac:	9403      	str	r4, [sp, #12]
    2dae:	9502      	str	r5, [sp, #8]
    2db0:	2390      	movs	r3, #144	; 0x90
    2db2:	9301      	str	r3, [sp, #4]
    2db4:	9400      	str	r4, [sp, #0]
    2db6:	4623      	mov	r3, r4
    2db8:	2202      	movs	r2, #2
    2dba:	4910      	ldr	r1, [pc, #64]	; (2dfc <grid_module_en16_reva_init+0xf4>)
    2dbc:	a808      	add	r0, sp, #32
    2dbe:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2e18 <grid_module_en16_reva_init+0x110>
    2dc2:	47c8      	blx	r9
			type = GRID_REPORT_TYPE_BROADCAST;
    2dc4:	f04f 0902 	mov.w	r9, #2
    2dc8:	e7d0      	b.n	2d6c <grid_module_en16_reva_init+0x64>
		
	}
	
	grid_report_sys_init(mod);
    2dca:	4640      	mov	r0, r8
    2dcc:	4b0e      	ldr	r3, [pc, #56]	; (2e08 <grid_module_en16_reva_init+0x100>)
    2dce:	4798      	blx	r3
    2dd0:	2300      	movs	r3, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    2dd2:	490e      	ldr	r1, [pc, #56]	; (2e0c <grid_module_en16_reva_init+0x104>)
    2dd4:	011a      	lsls	r2, r3, #4
    2dd6:	5453      	strb	r3, [r2, r1]
    2dd8:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    2dda:	2b10      	cmp	r3, #16
    2ddc:	d1fa      	bne.n	2dd4 <grid_module_en16_reva_init+0xcc>
	}
	
	
	grid_module_en16_reva_hardware_init();
    2dde:	4b0c      	ldr	r3, [pc, #48]	; (2e10 <grid_module_en16_reva_init+0x108>)
    2de0:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2de2:	4b0c      	ldr	r3, [pc, #48]	; (2e14 <grid_module_en16_reva_init+0x10c>)
    2de4:	4798      	blx	r3
	
}
    2de6:	b011      	add	sp, #68	; 0x44
    2de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2dec:	20007864 	.word	0x20007864
    2df0:	000023ed 	.word	0x000023ed
    2df4:	00003ef1 	.word	0x00003ef1
    2df8:	0000c467 	.word	0x0000c467
    2dfc:	0000da58 	.word	0x0000da58
    2e00:	0000c89d 	.word	0x0000c89d
    2e04:	00003fb5 	.word	0x00003fb5
    2e08:	00003fd9 	.word	0x00003fd9
    2e0c:	20007894 	.word	0x20007894
    2e10:	00002ca5 	.word	0x00002ca5
    2e14:	000028ad 	.word	0x000028ad
    2e18:	0000c855 	.word	0x0000c855

00002e1c <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2e1c:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2e1e:	4803      	ldr	r0, [pc, #12]	; (2e2c <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2e20:	4c03      	ldr	r4, [pc, #12]	; (2e30 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2e22:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2e24:	4803      	ldr	r0, [pc, #12]	; (2e34 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2e26:	47a0      	blx	r4
    2e28:	bd10      	pop	{r4, pc}
    2e2a:	bf00      	nop
    2e2c:	20001058 	.word	0x20001058
    2e30:	00004a41 	.word	0x00004a41
    2e34:	2000122c 	.word	0x2000122c

00002e38 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2e38:	4bad      	ldr	r3, [pc, #692]	; (30f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2e3a:	781b      	ldrb	r3, [r3, #0]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	f000 810f 	beq.w	3060 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x228>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e46:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2e48:	2300      	movs	r3, #0
    2e4a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2e4e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2e52:	4ba8      	ldr	r3, [pc, #672]	; (30f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2e54:	781a      	ldrb	r2, [r3, #0]
    2e56:	3208      	adds	r2, #8
    2e58:	48a7      	ldr	r0, [pc, #668]	; (30f8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2e5a:	5c86      	ldrb	r6, [r0, r2]
    2e5c:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2e5e:	781a      	ldrb	r2, [r3, #0]
    2e60:	b2d2      	uxtb	r2, r2
    2e62:	5c85      	ldrb	r5, [r0, r2]
    2e64:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2e66:	781a      	ldrb	r2, [r3, #0]
    2e68:	3201      	adds	r2, #1
    2e6a:	b2d2      	uxtb	r2, r2
    2e6c:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2e6e:	781a      	ldrb	r2, [r3, #0]
    2e70:	f002 0207 	and.w	r2, r2, #7
    2e74:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2e76:	781b      	ldrb	r3, [r3, #0]
    2e78:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2e80:	4b9e      	ldr	r3, [pc, #632]	; (30fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    2e82:	bf14      	ite	ne
    2e84:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e88:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2e8c:	4b99      	ldr	r3, [pc, #612]	; (30f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2e8e:	781b      	ldrb	r3, [r3, #0]
    2e90:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2e98:	4b98      	ldr	r3, [pc, #608]	; (30fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    2e9a:	bf14      	ite	ne
    2e9c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ea0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2ea4:	4b93      	ldr	r3, [pc, #588]	; (30f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2ea6:	781b      	ldrb	r3, [r3, #0]
    2ea8:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2eac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2eb0:	4b92      	ldr	r3, [pc, #584]	; (30fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    2eb2:	bf14      	ite	ne
    2eb4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2eb8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2ebc:	2302      	movs	r3, #2
    2ebe:	f10d 0206 	add.w	r2, sp, #6
    2ec2:	2100      	movs	r1, #0
    2ec4:	488e      	ldr	r0, [pc, #568]	; (3100 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2ec6:	4c8f      	ldr	r4, [pc, #572]	; (3104 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2ec8:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2eca:	2302      	movs	r3, #2
    2ecc:	aa01      	add	r2, sp, #4
    2ece:	2100      	movs	r1, #0
    2ed0:	488d      	ldr	r0, [pc, #564]	; (3108 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2ed2:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2ed4:	f8df b24c 	ldr.w	fp, [pc, #588]	; 3124 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>
    2ed8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2edc:	47d8      	blx	fp
    2ede:	f8df a248 	ldr.w	sl, [pc, #584]	; 3128 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>
    2ee2:	a381      	add	r3, pc, #516	; (adr r3, 30e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ee8:	47d0      	blx	sl
    2eea:	f8df 9240 	ldr.w	r9, [pc, #576]	; 312c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>
    2eee:	47c8      	blx	r9
    2ef0:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2ef4:	42a0      	cmp	r0, r4
    2ef6:	bf28      	it	cs
    2ef8:	4620      	movcs	r0, r4
    2efa:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2efc:	fa1f f880 	uxth.w	r8, r0
    2f00:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2f04:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2f08:	47d8      	blx	fp
    2f0a:	a377      	add	r3, pc, #476	; (adr r3, 30e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f10:	47d0      	blx	sl
    2f12:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2f14:	42a0      	cmp	r0, r4
    2f16:	bf28      	it	cs
    2f18:	4620      	movcs	r0, r4
    2f1a:	b280      	uxth	r0, r0
    2f1c:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2f20:	f1a5 0308 	sub.w	r3, r5, #8
    2f24:	b2db      	uxtb	r3, r3
    2f26:	2b01      	cmp	r3, #1
    2f28:	f240 80c7 	bls.w	30ba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x282>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2f2c:	2e0d      	cmp	r6, #13
    2f2e:	f240 80b0 	bls.w	3092 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x25a>
		
		uint8_t adcresult_0_valid = 0;
	
		if (adcresult_0>60000){
    2f32:	f64e 2360 	movw	r3, #60000	; 0xea60
    2f36:	4598      	cmp	r8, r3
    2f38:	f240 8098 	bls.w	306c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x234>
			adcresult_0 = 0;
    2f3c:	2300      	movs	r3, #0
    2f3e:	f8ad 3006 	strh.w	r3, [sp, #6]
			adcresult_0_valid = 1;
    2f42:	f04f 0e01 	mov.w	lr, #1
			adcresult_0_valid = 1;
		}
		
		uint8_t adcresult_1_valid = 0;
	
		if (adcresult_1>60000){
    2f46:	f64e 2360 	movw	r3, #60000	; 0xea60
    2f4a:	4298      	cmp	r0, r3
    2f4c:	f240 8099 	bls.w	3082 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x24a>
			adcresult_1 = 0;
    2f50:	2300      	movs	r3, #0
    2f52:	f8ad 3004 	strh.w	r3, [sp, #4]
			adcresult_1_valid = 1;
    2f56:	2401      	movs	r4, #1
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0] && adcresult_0_valid){
    2f58:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
    2f5c:	3b04      	subs	r3, #4
    2f5e:	011f      	lsls	r7, r3, #4
    2f60:	4b6a      	ldr	r3, [pc, #424]	; (310c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2f62:	689b      	ldr	r3, [r3, #8]
    2f64:	443b      	add	r3, r7
    2f66:	68da      	ldr	r2, [r3, #12]
    2f68:	7812      	ldrb	r2, [r2, #0]
    2f6a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2f6e:	4291      	cmp	r1, r2
    2f70:	d037      	beq.n	2fe2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1aa>
    2f72:	f1be 0f00 	cmp.w	lr, #0
    2f76:	d034      	beq.n	2fe2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1aa>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2f78:	2a00      	cmp	r2, #0
    2f7a:	bf0c      	ite	eq
    2f7c:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2f80:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    2f84:	6858      	ldr	r0, [r3, #4]
    2f86:	bf0c      	ite	eq
    2f88:	2290      	moveq	r2, #144	; 0x90
    2f8a:	2280      	movne	r2, #128	; 0x80
    2f8c:	2102      	movs	r1, #2
    2f8e:	3005      	adds	r0, #5
    2f90:	f8df a180 	ldr.w	sl, [pc, #384]	; 3114 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>
    2f94:	47d0      	blx	sl
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    2f96:	f8df 8174 	ldr.w	r8, [pc, #372]	; 310c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>
    2f9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2f9e:	443b      	add	r3, r7
    2fa0:	6858      	ldr	r0, [r3, #4]
    2fa2:	4632      	mov	r2, r6
    2fa4:	2102      	movs	r1, #2
    2fa6:	3007      	adds	r0, #7
    2fa8:	47d0      	blx	sl
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    2faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2fae:	443b      	add	r3, r7
    2fb0:	6858      	ldr	r0, [r3, #4]
    2fb2:	464a      	mov	r2, r9
    2fb4:	2102      	movs	r1, #2
    2fb6:	3009      	adds	r0, #9
    2fb8:	47d0      	blx	sl
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[21], 2, actuator);
    2fba:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2fbe:	443b      	add	r3, r7
    2fc0:	6858      	ldr	r0, [r3, #4]
    2fc2:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2fc6:	2102      	movs	r1, #2
    2fc8:	3015      	adds	r0, #21
    2fca:	47d0      	blx	sl
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    2fcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    2fd0:	443b      	add	r3, r7
    2fd2:	68db      	ldr	r3, [r3, #12]
    2fd4:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    2fd8:	1f31      	subs	r1, r6, #4
    2fda:	b2c9      	uxtb	r1, r1
    2fdc:	4640      	mov	r0, r8
    2fde:	4b4c      	ldr	r3, [pc, #304]	; (3110 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    2fe0:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0] && adcresult_1_valid){
    2fe2:	f105 5380 	add.w	r3, r5, #268435456	; 0x10000000
    2fe6:	3b04      	subs	r3, #4
    2fe8:	011e      	lsls	r6, r3, #4
    2fea:	4b48      	ldr	r3, [pc, #288]	; (310c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2fec:	689b      	ldr	r3, [r3, #8]
    2fee:	4433      	add	r3, r6
    2ff0:	68da      	ldr	r2, [r3, #12]
    2ff2:	7812      	ldrb	r2, [r2, #0]
    2ff4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2ff8:	4291      	cmp	r1, r2
    2ffa:	d05e      	beq.n	30ba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x282>
    2ffc:	2c00      	cmp	r4, #0
    2ffe:	d05c      	beq.n	30ba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x282>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    3000:	2a00      	cmp	r2, #0
    3002:	bf0c      	ite	eq
    3004:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    3008:	f04f 0800 	movne.w	r8, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    300c:	6858      	ldr	r0, [r3, #4]
    300e:	bf0c      	ite	eq
    3010:	2290      	moveq	r2, #144	; 0x90
    3012:	2280      	movne	r2, #128	; 0x80
    3014:	2102      	movs	r1, #2
    3016:	3005      	adds	r0, #5
    3018:	4f3e      	ldr	r7, [pc, #248]	; (3114 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    301a:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_1);
    301c:	4c3b      	ldr	r4, [pc, #236]	; (310c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    301e:	68a3      	ldr	r3, [r4, #8]
    3020:	4433      	add	r3, r6
    3022:	6858      	ldr	r0, [r3, #4]
    3024:	462a      	mov	r2, r5
    3026:	2102      	movs	r1, #2
    3028:	3007      	adds	r0, #7
    302a:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);
    302c:	68a3      	ldr	r3, [r4, #8]
    302e:	4433      	add	r3, r6
    3030:	6858      	ldr	r0, [r3, #4]
    3032:	4642      	mov	r2, r8
    3034:	2102      	movs	r1, #2
    3036:	3009      	adds	r0, #9
    3038:	47b8      	blx	r7
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[21], 2, actuator);
    303a:	68a3      	ldr	r3, [r4, #8]
    303c:	4433      	add	r3, r6
    303e:	6858      	ldr	r0, [r3, #4]
    3040:	ea4f 0248 	mov.w	r2, r8, lsl #1
    3044:	2102      	movs	r1, #2
    3046:	3015      	adds	r0, #21
    3048:	47b8      	blx	r7
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;
    304a:	68a3      	ldr	r3, [r4, #8]
    304c:	4433      	add	r3, r6
    304e:	68db      	ldr	r3, [r3, #12]
    3050:	f883 8000 	strb.w	r8, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    3054:	1f29      	subs	r1, r5, #4
    3056:	b2c9      	uxtb	r1, r1
    3058:	4620      	mov	r0, r4
    305a:	4b2d      	ldr	r3, [pc, #180]	; (3110 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    305c:	4798      	blx	r3
    305e:	e02c      	b.n	30ba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x282>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    3060:	4a23      	ldr	r2, [pc, #140]	; (30f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    3062:	7813      	ldrb	r3, [r2, #0]
    3064:	3301      	adds	r3, #1
    3066:	b2db      	uxtb	r3, r3
    3068:	7013      	strb	r3, [r2, #0]
    306a:	4770      	bx	lr
		else if (adcresult_0<200){
    306c:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
			adcresult_0 = 127;
    3070:	bf9d      	ittte	ls
    3072:	237f      	movls	r3, #127	; 0x7f
    3074:	f8ad 3006 	strhls.w	r3, [sp, #6]
			adcresult_0_valid = 1;
    3078:	f04f 0e01 	movls.w	lr, #1
		uint8_t adcresult_0_valid = 0;
    307c:	f04f 0e00 	movhi.w	lr, #0
    3080:	e761      	b.n	2f46 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x10e>
		else if (adcresult_1<200){
    3082:	28c7      	cmp	r0, #199	; 0xc7
			adcresult_1 = 127;
    3084:	bf9d      	ittte	ls
    3086:	237f      	movls	r3, #127	; 0x7f
    3088:	f8ad 3004 	strhls.w	r3, [sp, #4]
			adcresult_1_valid = 1;
    308c:	2401      	movls	r4, #1
		uint8_t adcresult_1_valid = 0;
    308e:	2400      	movhi	r4, #0
    3090:	e762      	b.n	2f58 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x120>
		//CRITICAL_SECTION_LEAVE()

	}
	else{ // POTENTIOMETER OR FADER
		
		if (adc_index_1 == 0 || adc_index_1 == 1){
    3092:	2d01      	cmp	r5, #1
    3094:	d919      	bls.n	30ca <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x292>
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
			
		}
		else{
						
			grid_ain_add_sample(adc_index_0, adcresult_0);
    3096:	b2b9      	uxth	r1, r7
    3098:	4630      	mov	r0, r6
    309a:	4c1f      	ldr	r4, [pc, #124]	; (3118 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    309c:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    309e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    30a2:	4628      	mov	r0, r5
    30a4:	47a0      	blx	r4
			
		
		
		//CRITICAL_SECTION_ENTER()

		if (grid_ain_get_changed(adc_index_0)){
    30a6:	4630      	mov	r0, r6
    30a8:	4b1c      	ldr	r3, [pc, #112]	; (311c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    30aa:	4798      	blx	r3
    30ac:	2800      	cmp	r0, #0
    30ae:	d13f      	bne.n	3130 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>
		//CRITICAL_SECTION_LEAVE()
	
	
		//CRITICAL_SECTION_ENTER()

		if (grid_ain_get_changed(adc_index_1)){
    30b0:	4628      	mov	r0, r5
    30b2:	4b1a      	ldr	r3, [pc, #104]	; (311c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    30b4:	4798      	blx	r3
    30b6:	2800      	cmp	r0, #0
    30b8:	d160      	bne.n	317c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x344>
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    30ba:	2200      	movs	r2, #0
    30bc:	4b0c      	ldr	r3, [pc, #48]	; (30f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    30be:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    30c0:	4b17      	ldr	r3, [pc, #92]	; (3120 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    30c2:	4798      	blx	r3
}
    30c4:	b003      	add	sp, #12
    30c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    30ca:	b2b9      	uxth	r1, r7
    30cc:	f64f 78ff 	movw	r8, #65535	; 0xffff
    30d0:	eba8 0101 	sub.w	r1, r8, r1
    30d4:	4630      	mov	r0, r6
    30d6:	4c10      	ldr	r4, [pc, #64]	; (3118 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    30d8:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    30da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    30de:	eba8 0101 	sub.w	r1, r8, r1
    30e2:	4628      	mov	r0, r5
    30e4:	47a0      	blx	r4
    30e6:	e7de      	b.n	30a6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x26e>
    30e8:	47ae147b 	.word	0x47ae147b
    30ec:	3ff07ae1 	.word	0x3ff07ae1
    30f0:	200022e4 	.word	0x200022e4
    30f4:	200077f9 	.word	0x200077f9
    30f8:	20000334 	.word	0x20000334
    30fc:	41008000 	.word	0x41008000
    3100:	20001058 	.word	0x20001058
    3104:	00004961 	.word	0x00004961
    3108:	2000122c 	.word	0x2000122c
    310c:	20003300 	.word	0x20003300
    3110:	00004207 	.word	0x00004207
    3114:	00003b11 	.word	0x00003b11
    3118:	000011e9 	.word	0x000011e9
    311c:	000012e5 	.word	0x000012e5
    3120:	00002e1d 	.word	0x00002e1d
    3124:	0000bec9 	.word	0x0000bec9
    3128:	0000bf95 	.word	0x0000bf95
    312c:	0000c3b9 	.word	0x0000c3b9
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    3130:	2107      	movs	r1, #7
    3132:	4630      	mov	r0, r6
    3134:	4b24      	ldr	r3, [pc, #144]	; (31c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x390>)
    3136:	4798      	blx	r3
    3138:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    313a:	ea4f 1906 	mov.w	r9, r6, lsl #4
    313e:	4c23      	ldr	r4, [pc, #140]	; (31cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x394>)
    3140:	68a3      	ldr	r3, [r4, #8]
    3142:	444b      	add	r3, r9
    3144:	6858      	ldr	r0, [r3, #4]
    3146:	4632      	mov	r2, r6
    3148:	2102      	movs	r1, #2
    314a:	3007      	adds	r0, #7
    314c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 31d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x39c>
    3150:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    3152:	68a3      	ldr	r3, [r4, #8]
    3154:	444b      	add	r3, r9
    3156:	6858      	ldr	r0, [r3, #4]
    3158:	b2fa      	uxtb	r2, r7
    315a:	2102      	movs	r1, #2
    315c:	3009      	adds	r0, #9
    315e:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    3160:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    3162:	68a3      	ldr	r3, [r4, #8]
    3164:	444b      	add	r3, r9
    3166:	6858      	ldr	r0, [r3, #4]
    3168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    316c:	2102      	movs	r1, #2
    316e:	3015      	adds	r0, #21
    3170:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);
    3172:	4631      	mov	r1, r6
    3174:	4620      	mov	r0, r4
    3176:	4b16      	ldr	r3, [pc, #88]	; (31d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x398>)
    3178:	4798      	blx	r3
    317a:	e799      	b.n	30b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x278>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    317c:	2107      	movs	r1, #7
    317e:	4628      	mov	r0, r5
    3180:	4b11      	ldr	r3, [pc, #68]	; (31c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x390>)
    3182:	4798      	blx	r3
    3184:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    3186:	ea4f 1805 	mov.w	r8, r5, lsl #4
    318a:	4c10      	ldr	r4, [pc, #64]	; (31cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x394>)
    318c:	68a3      	ldr	r3, [r4, #8]
    318e:	4443      	add	r3, r8
    3190:	6858      	ldr	r0, [r3, #4]
    3192:	462a      	mov	r2, r5
    3194:	2102      	movs	r1, #2
    3196:	3007      	adds	r0, #7
    3198:	4f0e      	ldr	r7, [pc, #56]	; (31d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x39c>)
    319a:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    319c:	68a3      	ldr	r3, [r4, #8]
    319e:	4443      	add	r3, r8
    31a0:	6858      	ldr	r0, [r3, #4]
    31a2:	b2f2      	uxtb	r2, r6
    31a4:	2102      	movs	r1, #2
    31a6:	3009      	adds	r0, #9
    31a8:	47b8      	blx	r7
			uint8_t actuator = 2*value;
    31aa:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    31ac:	68a3      	ldr	r3, [r4, #8]
    31ae:	4443      	add	r3, r8
    31b0:	6858      	ldr	r0, [r3, #4]
    31b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    31b6:	2102      	movs	r1, #2
    31b8:	3015      	adds	r0, #21
    31ba:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    31bc:	4629      	mov	r1, r5
    31be:	4620      	mov	r0, r4
    31c0:	4b03      	ldr	r3, [pc, #12]	; (31d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x398>)
    31c2:	4798      	blx	r3
    31c4:	e779      	b.n	30ba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x282>
    31c6:	bf00      	nop
    31c8:	000012f5 	.word	0x000012f5
    31cc:	20003300 	.word	0x20003300
    31d0:	00004207 	.word	0x00004207
    31d4:	00003b11 	.word	0x00003b11

000031d8 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    31d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    31da:	4f0b      	ldr	r7, [pc, #44]	; (3208 <grid_module_pbf4_reva_hardware_init+0x30>)
    31dc:	4c0b      	ldr	r4, [pc, #44]	; (320c <grid_module_pbf4_reva_hardware_init+0x34>)
    31de:	463b      	mov	r3, r7
    31e0:	2200      	movs	r2, #0
    31e2:	4611      	mov	r1, r2
    31e4:	4620      	mov	r0, r4
    31e6:	4e0a      	ldr	r6, [pc, #40]	; (3210 <grid_module_pbf4_reva_hardware_init+0x38>)
    31e8:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    31ea:	4d0a      	ldr	r5, [pc, #40]	; (3214 <grid_module_pbf4_reva_hardware_init+0x3c>)
    31ec:	463b      	mov	r3, r7
    31ee:	2200      	movs	r2, #0
    31f0:	4611      	mov	r1, r2
    31f2:	4628      	mov	r0, r5
    31f4:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    31f6:	2100      	movs	r1, #0
    31f8:	4620      	mov	r0, r4
    31fa:	4c07      	ldr	r4, [pc, #28]	; (3218 <grid_module_pbf4_reva_hardware_init+0x40>)
    31fc:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    31fe:	2100      	movs	r1, #0
    3200:	4628      	mov	r0, r5
    3202:	47a0      	blx	r4
    3204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3206:	bf00      	nop
    3208:	00002e39 	.word	0x00002e39
    320c:	20001058 	.word	0x20001058
    3210:	000048e1 	.word	0x000048e1
    3214:	2000122c 	.word	0x2000122c
    3218:	000048a1 	.word	0x000048a1

0000321c <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    321c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3220:	b097      	sub	sp, #92	; 0x5c
    3222:	4680      	mov	r8, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3224:	2307      	movs	r3, #7
    3226:	220e      	movs	r2, #14
    3228:	2105      	movs	r1, #5
    322a:	2010      	movs	r0, #16
    322c:	4c30      	ldr	r4, [pc, #192]	; (32f0 <grid_module_pbf4_reva_init+0xd4>)
    322e:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    3230:	210c      	movs	r1, #12
    3232:	4830      	ldr	r0, [pc, #192]	; (32f4 <grid_module_pbf4_reva_init+0xd8>)
    3234:	4b30      	ldr	r3, [pc, #192]	; (32f8 <grid_module_pbf4_reva_init+0xdc>)
    3236:	4798      	blx	r3
	
	grid_ui_model_init(mod, 12);
    3238:	210c      	movs	r1, #12
    323a:	4640      	mov	r0, r8
    323c:	4b2f      	ldr	r3, [pc, #188]	; (32fc <grid_module_pbf4_reva_init+0xe0>)
    323e:	4798      	blx	r3
    3240:	2500      	movs	r5, #0
	
	for(uint8_t i=0; i<12; i++){
		
		uint8_t payload_template[30] = {0};
    3242:	462c      	mov	r4, r5
    3244:	4f2e      	ldr	r7, [pc, #184]	; (3300 <grid_module_pbf4_reva_init+0xe4>)
    3246:	e02b      	b.n	32a0 <grid_module_pbf4_reva_init+0x84>
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3248:	2303      	movs	r3, #3
    324a:	930b      	str	r3, [sp, #44]	; 0x2c
    324c:	940a      	str	r4, [sp, #40]	; 0x28
    324e:	9509      	str	r5, [sp, #36]	; 0x24
    3250:	2263      	movs	r2, #99	; 0x63
    3252:	9208      	str	r2, [sp, #32]
    3254:	9407      	str	r4, [sp, #28]
    3256:	9306      	str	r3, [sp, #24]
    3258:	2202      	movs	r2, #2
    325a:	9205      	str	r2, [sp, #20]
    325c:	9304      	str	r3, [sp, #16]
    325e:	9403      	str	r4, [sp, #12]
    3260:	1d2b      	adds	r3, r5, #4
    3262:	9302      	str	r3, [sp, #8]
    3264:	2390      	movs	r3, #144	; 0x90
    3266:	9301      	str	r3, [sp, #4]
    3268:	9400      	str	r4, [sp, #0]
    326a:	4623      	mov	r3, r4
    326c:	4925      	ldr	r1, [pc, #148]	; (3304 <grid_module_pbf4_reva_init+0xe8>)
    326e:	a80e      	add	r0, sp, #56	; 0x38
    3270:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 331c <grid_module_pbf4_reva_init+0x100>
    3274:	47c8      	blx	r9
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3276:	a80e      	add	r0, sp, #56	; 0x38
    3278:	4b23      	ldr	r3, [pc, #140]	; (3308 <grid_module_pbf4_reva_init+0xec>)
    327a:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    327c:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    3280:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    3284:	2202      	movs	r2, #2
    3286:	9202      	str	r2, [sp, #8]
    3288:	ab0d      	add	r3, sp, #52	; 0x34
    328a:	9301      	str	r3, [sp, #4]
    328c:	b2c0      	uxtb	r0, r0
    328e:	9000      	str	r0, [sp, #0]
    3290:	ab0e      	add	r3, sp, #56	; 0x38
    3292:	4631      	mov	r1, r6
    3294:	4640      	mov	r0, r8
    3296:	4e1d      	ldr	r6, [pc, #116]	; (330c <grid_module_pbf4_reva_init+0xf0>)
    3298:	47b0      	blx	r6
    329a:	3501      	adds	r5, #1
	for(uint8_t i=0; i<12; i++){
    329c:	2d0c      	cmp	r5, #12
    329e:	d01d      	beq.n	32dc <grid_module_pbf4_reva_init+0xc0>
    32a0:	b2ee      	uxtb	r6, r5
		uint8_t payload_template[30] = {0};
    32a2:	221e      	movs	r2, #30
    32a4:	4621      	mov	r1, r4
    32a6:	a80e      	add	r0, sp, #56	; 0x38
    32a8:	47b8      	blx	r7
		if (i<8){ // PORENTIOMETERS & FADERS
    32aa:	2e07      	cmp	r6, #7
    32ac:	d8cc      	bhi.n	3248 <grid_module_pbf4_reva_init+0x2c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    32ae:	2303      	movs	r3, #3
    32b0:	930b      	str	r3, [sp, #44]	; 0x2c
    32b2:	940a      	str	r4, [sp, #40]	; 0x28
    32b4:	9509      	str	r5, [sp, #36]	; 0x24
    32b6:	2263      	movs	r2, #99	; 0x63
    32b8:	9208      	str	r2, [sp, #32]
    32ba:	9407      	str	r4, [sp, #28]
    32bc:	9306      	str	r3, [sp, #24]
    32be:	2202      	movs	r2, #2
    32c0:	9205      	str	r2, [sp, #20]
    32c2:	9304      	str	r3, [sp, #16]
    32c4:	9403      	str	r4, [sp, #12]
    32c6:	9502      	str	r5, [sp, #8]
    32c8:	23b0      	movs	r3, #176	; 0xb0
    32ca:	9301      	str	r3, [sp, #4]
    32cc:	9400      	str	r4, [sp, #0]
    32ce:	4623      	mov	r3, r4
    32d0:	490c      	ldr	r1, [pc, #48]	; (3304 <grid_module_pbf4_reva_init+0xe8>)
    32d2:	a80e      	add	r0, sp, #56	; 0x38
    32d4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 331c <grid_module_pbf4_reva_init+0x100>
    32d8:	47c8      	blx	r9
    32da:	e7cc      	b.n	3276 <grid_module_pbf4_reva_init+0x5a>
		
	}
	
	grid_report_sys_init(mod);
    32dc:	4640      	mov	r0, r8
    32de:	4b0c      	ldr	r3, [pc, #48]	; (3310 <grid_module_pbf4_reva_init+0xf4>)
    32e0:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    32e2:	4b0c      	ldr	r3, [pc, #48]	; (3314 <grid_module_pbf4_reva_init+0xf8>)
    32e4:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    32e6:	4b0c      	ldr	r3, [pc, #48]	; (3318 <grid_module_pbf4_reva_init+0xfc>)
    32e8:	4798      	blx	r3
	
    32ea:	b017      	add	sp, #92	; 0x5c
    32ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    32f0:	0000119d 	.word	0x0000119d
    32f4:	20007864 	.word	0x20007864
    32f8:	000023ed 	.word	0x000023ed
    32fc:	00003ef1 	.word	0x00003ef1
    3300:	0000c467 	.word	0x0000c467
    3304:	0000da40 	.word	0x0000da40
    3308:	0000c89d 	.word	0x0000c89d
    330c:	00003fb5 	.word	0x00003fb5
    3310:	00003fd9 	.word	0x00003fd9
    3314:	000031d9 	.word	0x000031d9
    3318:	00002e1d 	.word	0x00002e1d
    331c:	0000c855 	.word	0x0000c855

00003320 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    3320:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    3322:	4803      	ldr	r0, [pc, #12]	; (3330 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    3324:	4c03      	ldr	r4, [pc, #12]	; (3334 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    3326:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3328:	4803      	ldr	r0, [pc, #12]	; (3338 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    332a:	47a0      	blx	r4
    332c:	bd10      	pop	{r4, pc}
    332e:	bf00      	nop
    3330:	20001058 	.word	0x20001058
    3334:	00004a41 	.word	0x00004a41
    3338:	2000122c 	.word	0x2000122c
    333c:	00000000 	.word	0x00000000

00003340 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3340:	4b75      	ldr	r3, [pc, #468]	; (3518 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3342:	781b      	ldrb	r3, [r3, #0]
    3344:	2b00      	cmp	r3, #0
    3346:	f000 8085 	beq.w	3454 <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    334a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    334e:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3350:	2300      	movs	r3, #0
    3352:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    3356:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    335a:	4b6f      	ldr	r3, [pc, #444]	; (3518 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    335c:	785a      	ldrb	r2, [r3, #1]
    335e:	3208      	adds	r2, #8
    3360:	496e      	ldr	r1, [pc, #440]	; (351c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1dc>)
    3362:	5c8d      	ldrb	r5, [r1, r2]
    3364:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    3366:	785a      	ldrb	r2, [r3, #1]
    3368:	b2d2      	uxtb	r2, r2
    336a:	5c8c      	ldrb	r4, [r1, r2]
    336c:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    336e:	785a      	ldrb	r2, [r3, #1]
    3370:	3201      	adds	r2, #1
    3372:	b2d2      	uxtb	r2, r2
    3374:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    3376:	785a      	ldrb	r2, [r3, #1]
    3378:	f002 0207 	and.w	r2, r2, #7
    337c:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    337e:	785b      	ldrb	r3, [r3, #1]
    3380:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3384:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3388:	4b65      	ldr	r3, [pc, #404]	; (3520 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    338a:	bf14      	ite	ne
    338c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3390:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    3394:	4b60      	ldr	r3, [pc, #384]	; (3518 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3396:	785b      	ldrb	r3, [r3, #1]
    3398:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    339c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    33a0:	4b5f      	ldr	r3, [pc, #380]	; (3520 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    33a2:	bf14      	ite	ne
    33a4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33a8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    33ac:	4b5a      	ldr	r3, [pc, #360]	; (3518 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    33ae:	785b      	ldrb	r3, [r3, #1]
    33b0:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    33b8:	4b59      	ldr	r3, [pc, #356]	; (3520 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    33ba:	bf14      	ite	ne
    33bc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33c0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    33c4:	2302      	movs	r3, #2
    33c6:	f10d 0206 	add.w	r2, sp, #6
    33ca:	2100      	movs	r1, #0
    33cc:	4855      	ldr	r0, [pc, #340]	; (3524 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e4>)
    33ce:	4e56      	ldr	r6, [pc, #344]	; (3528 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    33d0:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    33d2:	2302      	movs	r3, #2
    33d4:	aa01      	add	r2, sp, #4
    33d6:	2100      	movs	r1, #0
    33d8:	4854      	ldr	r0, [pc, #336]	; (352c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1ec>)
    33da:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    33dc:	f8df a168 	ldr.w	sl, [pc, #360]	; 3548 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>
    33e0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    33e4:	47d0      	blx	sl
    33e6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 354c <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>
    33ea:	a349      	add	r3, pc, #292	; (adr r3, 3510 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    33ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    33f0:	47c8      	blx	r9
    33f2:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3550 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>
    33f6:	47c0      	blx	r8
    33f8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    33fc:	42b0      	cmp	r0, r6
    33fe:	bf28      	it	cs
    3400:	4630      	movcs	r0, r6
    3402:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    3404:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    3408:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    340c:	47d0      	blx	sl
    340e:	a340      	add	r3, pc, #256	; (adr r3, 3510 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    3410:	e9d3 2300 	ldrd	r2, r3, [r3]
    3414:	47c8      	blx	r9
    3416:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3418:	42b0      	cmp	r0, r6
    341a:	bf28      	it	cs
    341c:	4630      	movcs	r0, r6
    341e:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    3422:	b2b9      	uxth	r1, r7
    3424:	4628      	mov	r0, r5
    3426:	4e42      	ldr	r6, [pc, #264]	; (3530 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3428:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    342a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    342e:	4620      	mov	r0, r4
    3430:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    3432:	4628      	mov	r0, r5
    3434:	4b3f      	ldr	r3, [pc, #252]	; (3534 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    3436:	4798      	blx	r3
    3438:	b990      	cbnz	r0, 3460 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    343a:	4620      	mov	r0, r4
    343c:	4b3d      	ldr	r3, [pc, #244]	; (3534 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    343e:	4798      	blx	r3
    3440:	2800      	cmp	r0, #0
    3442:	d139      	bne.n	34b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x178>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    3444:	2200      	movs	r2, #0
    3446:	4b34      	ldr	r3, [pc, #208]	; (3518 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3448:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    344a:	4b3b      	ldr	r3, [pc, #236]	; (3538 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    344c:	4798      	blx	r3
}
    344e:	b002      	add	sp, #8
    3450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    3454:	4a30      	ldr	r2, [pc, #192]	; (3518 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3456:	7813      	ldrb	r3, [r2, #0]
    3458:	3301      	adds	r3, #1
    345a:	b2db      	uxtb	r3, r3
    345c:	7013      	strb	r3, [r2, #0]
    345e:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3460:	2107      	movs	r1, #7
    3462:	4628      	mov	r0, r5
    3464:	4b35      	ldr	r3, [pc, #212]	; (353c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    3466:	4798      	blx	r3
    3468:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    346c:	012f      	lsls	r7, r5, #4
    346e:	4e34      	ldr	r6, [pc, #208]	; (3540 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    3470:	68b3      	ldr	r3, [r6, #8]
    3472:	443b      	add	r3, r7
    3474:	6858      	ldr	r0, [r3, #4]
    3476:	462a      	mov	r2, r5
    3478:	2102      	movs	r1, #2
    347a:	3007      	adds	r0, #7
    347c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 3554 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    3480:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    3482:	68b3      	ldr	r3, [r6, #8]
    3484:	443b      	add	r3, r7
    3486:	6858      	ldr	r0, [r3, #4]
    3488:	4642      	mov	r2, r8
    348a:	2102      	movs	r1, #2
    348c:	3009      	adds	r0, #9
    348e:	47c8      	blx	r9
		uint8_t actuator = 2*value;
    3490:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    3494:	68b3      	ldr	r3, [r6, #8]
    3496:	443b      	add	r3, r7
    3498:	6858      	ldr	r0, [r3, #4]
    349a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    349e:	2102      	movs	r1, #2
    34a0:	3015      	adds	r0, #21
    34a2:	47c8      	blx	r9
		mod->report_ui_array[adc_index_0].helper[0] = value;
    34a4:	68b3      	ldr	r3, [r6, #8]
    34a6:	441f      	add	r7, r3
    34a8:	68fb      	ldr	r3, [r7, #12]
    34aa:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    34ae:	4629      	mov	r1, r5
    34b0:	4630      	mov	r0, r6
    34b2:	4b24      	ldr	r3, [pc, #144]	; (3544 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    34b4:	4798      	blx	r3
    34b6:	e7c0      	b.n	343a <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    34b8:	2107      	movs	r1, #7
    34ba:	4620      	mov	r0, r4
    34bc:	4b1f      	ldr	r3, [pc, #124]	; (353c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    34be:	4798      	blx	r3
    34c0:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    34c2:	0126      	lsls	r6, r4, #4
    34c4:	4d1e      	ldr	r5, [pc, #120]	; (3540 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    34c6:	68ab      	ldr	r3, [r5, #8]
    34c8:	4433      	add	r3, r6
    34ca:	6858      	ldr	r0, [r3, #4]
    34cc:	4622      	mov	r2, r4
    34ce:	2102      	movs	r1, #2
    34d0:	3007      	adds	r0, #7
    34d2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3554 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    34d6:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    34d8:	68ab      	ldr	r3, [r5, #8]
    34da:	4433      	add	r3, r6
    34dc:	6858      	ldr	r0, [r3, #4]
    34de:	463a      	mov	r2, r7
    34e0:	2102      	movs	r1, #2
    34e2:	3009      	adds	r0, #9
    34e4:	47c0      	blx	r8
		uint8_t actuator = 2*value;
    34e6:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    34e8:	68ab      	ldr	r3, [r5, #8]
    34ea:	4433      	add	r3, r6
    34ec:	6858      	ldr	r0, [r3, #4]
    34ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    34f2:	2102      	movs	r1, #2
    34f4:	3015      	adds	r0, #21
    34f6:	47c0      	blx	r8
		mod->report_ui_array[adc_index_1].helper[0] = value;
    34f8:	68ab      	ldr	r3, [r5, #8]
    34fa:	441e      	add	r6, r3
    34fc:	68f3      	ldr	r3, [r6, #12]
    34fe:	701f      	strb	r7, [r3, #0]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    3500:	4621      	mov	r1, r4
    3502:	4628      	mov	r0, r5
    3504:	4b0f      	ldr	r3, [pc, #60]	; (3544 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    3506:	4798      	blx	r3
    3508:	e79c      	b.n	3444 <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    350a:	bf00      	nop
    350c:	f3af 8000 	nop.w
    3510:	47ae147b 	.word	0x47ae147b
    3514:	3ff07ae1 	.word	0x3ff07ae1
    3518:	20000646 	.word	0x20000646
    351c:	20000344 	.word	0x20000344
    3520:	41008000 	.word	0x41008000
    3524:	20001058 	.word	0x20001058
    3528:	00004961 	.word	0x00004961
    352c:	2000122c 	.word	0x2000122c
    3530:	000011e9 	.word	0x000011e9
    3534:	000012e5 	.word	0x000012e5
    3538:	00003321 	.word	0x00003321
    353c:	000012f5 	.word	0x000012f5
    3540:	20003300 	.word	0x20003300
    3544:	00004207 	.word	0x00004207
    3548:	0000bec9 	.word	0x0000bec9
    354c:	0000bf95 	.word	0x0000bf95
    3550:	0000c3b9 	.word	0x0000c3b9
    3554:	00003b11 	.word	0x00003b11

00003558 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    355a:	4f0b      	ldr	r7, [pc, #44]	; (3588 <grid_module_po16_revb_hardware_init+0x30>)
    355c:	4c0b      	ldr	r4, [pc, #44]	; (358c <grid_module_po16_revb_hardware_init+0x34>)
    355e:	463b      	mov	r3, r7
    3560:	2200      	movs	r2, #0
    3562:	4611      	mov	r1, r2
    3564:	4620      	mov	r0, r4
    3566:	4e0a      	ldr	r6, [pc, #40]	; (3590 <grid_module_po16_revb_hardware_init+0x38>)
    3568:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    356a:	4d0a      	ldr	r5, [pc, #40]	; (3594 <grid_module_po16_revb_hardware_init+0x3c>)
    356c:	463b      	mov	r3, r7
    356e:	2200      	movs	r2, #0
    3570:	4611      	mov	r1, r2
    3572:	4628      	mov	r0, r5
    3574:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    3576:	2100      	movs	r1, #0
    3578:	4620      	mov	r0, r4
    357a:	4c07      	ldr	r4, [pc, #28]	; (3598 <grid_module_po16_revb_hardware_init+0x40>)
    357c:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    357e:	2100      	movs	r1, #0
    3580:	4628      	mov	r0, r5
    3582:	47a0      	blx	r4
    3584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3586:	bf00      	nop
    3588:	00003341 	.word	0x00003341
    358c:	20001058 	.word	0x20001058
    3590:	000048e1 	.word	0x000048e1
    3594:	2000122c 	.word	0x2000122c
    3598:	000048a1 	.word	0x000048a1

0000359c <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    359c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    35a0:	b096      	sub	sp, #88	; 0x58
    35a2:	4681      	mov	r9, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    35a4:	2307      	movs	r3, #7
    35a6:	220e      	movs	r2, #14
    35a8:	2105      	movs	r1, #5
    35aa:	2010      	movs	r0, #16
    35ac:	4c24      	ldr	r4, [pc, #144]	; (3640 <grid_module_po16_revb_init+0xa4>)
    35ae:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    35b0:	2110      	movs	r1, #16
    35b2:	4824      	ldr	r0, [pc, #144]	; (3644 <grid_module_po16_revb_init+0xa8>)
    35b4:	4b24      	ldr	r3, [pc, #144]	; (3648 <grid_module_po16_revb_init+0xac>)
    35b6:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16);
    35b8:	2110      	movs	r1, #16
    35ba:	4648      	mov	r0, r9
    35bc:	4b23      	ldr	r3, [pc, #140]	; (364c <grid_module_po16_revb_init+0xb0>)
    35be:	4798      	blx	r3
    35c0:	2500      	movs	r5, #0
	
	
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30] = {0};
    35c2:	462c      	mov	r4, r5
    35c4:	4f22      	ldr	r7, [pc, #136]	; (3650 <grid_module_po16_revb_init+0xb4>)
		

		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    35c6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3668 <grid_module_po16_revb_init+0xcc>
		uint8_t payload_template[30] = {0};
    35ca:	221e      	movs	r2, #30
    35cc:	4621      	mov	r1, r4
    35ce:	a80e      	add	r0, sp, #56	; 0x38
    35d0:	47b8      	blx	r7
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    35d2:	2303      	movs	r3, #3
    35d4:	930b      	str	r3, [sp, #44]	; 0x2c
    35d6:	940a      	str	r4, [sp, #40]	; 0x28
    35d8:	9509      	str	r5, [sp, #36]	; 0x24
    35da:	2263      	movs	r2, #99	; 0x63
    35dc:	9208      	str	r2, [sp, #32]
    35de:	9407      	str	r4, [sp, #28]
    35e0:	9306      	str	r3, [sp, #24]
    35e2:	2602      	movs	r6, #2
    35e4:	9605      	str	r6, [sp, #20]
    35e6:	9304      	str	r3, [sp, #16]
    35e8:	9403      	str	r4, [sp, #12]
    35ea:	9502      	str	r5, [sp, #8]
    35ec:	23b0      	movs	r3, #176	; 0xb0
    35ee:	9301      	str	r3, [sp, #4]
    35f0:	9400      	str	r4, [sp, #0]
    35f2:	4623      	mov	r3, r4
    35f4:	4632      	mov	r2, r6
    35f6:	4641      	mov	r1, r8
    35f8:	a80e      	add	r0, sp, #56	; 0x38
    35fa:	f8df a070 	ldr.w	sl, [pc, #112]	; 366c <grid_module_po16_revb_init+0xd0>
    35fe:	47d0      	blx	sl
		);
			
		

		
		uint8_t payload_length = strlen(payload_template);
    3600:	a80e      	add	r0, sp, #56	; 0x38
    3602:	4b14      	ldr	r3, [pc, #80]	; (3654 <grid_module_po16_revb_init+0xb8>)
    3604:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3606:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    360a:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    360e:	9602      	str	r6, [sp, #8]
    3610:	ab0d      	add	r3, sp, #52	; 0x34
    3612:	9301      	str	r3, [sp, #4]
    3614:	b2c0      	uxtb	r0, r0
    3616:	9000      	str	r0, [sp, #0]
    3618:	ab0e      	add	r3, sp, #56	; 0x38
    361a:	4632      	mov	r2, r6
    361c:	b2e9      	uxtb	r1, r5
    361e:	4648      	mov	r0, r9
    3620:	4e0d      	ldr	r6, [pc, #52]	; (3658 <grid_module_po16_revb_init+0xbc>)
    3622:	47b0      	blx	r6
    3624:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    3626:	2d10      	cmp	r5, #16
    3628:	d1cf      	bne.n	35ca <grid_module_po16_revb_init+0x2e>
		
	}
	
	grid_report_sys_init(mod);
    362a:	4648      	mov	r0, r9
    362c:	4b0b      	ldr	r3, [pc, #44]	; (365c <grid_module_po16_revb_init+0xc0>)
    362e:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    3630:	4b0b      	ldr	r3, [pc, #44]	; (3660 <grid_module_po16_revb_init+0xc4>)
    3632:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    3634:	4b0b      	ldr	r3, [pc, #44]	; (3664 <grid_module_po16_revb_init+0xc8>)
    3636:	4798      	blx	r3
	
    3638:	b016      	add	sp, #88	; 0x58
    363a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    363e:	bf00      	nop
    3640:	0000119d 	.word	0x0000119d
    3644:	20007864 	.word	0x20007864
    3648:	000023ed 	.word	0x000023ed
    364c:	00003ef1 	.word	0x00003ef1
    3650:	0000c467 	.word	0x0000c467
    3654:	0000c89d 	.word	0x0000c89d
    3658:	00003fb5 	.word	0x00003fb5
    365c:	00003fd9 	.word	0x00003fd9
    3660:	00003559 	.word	0x00003559
    3664:	00003321 	.word	0x00003321
    3668:	0000da40 	.word	0x0000da40
    366c:	0000c855 	.word	0x0000c855

00003670 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    3670:	8a02      	ldrh	r2, [r0, #16]
    3672:	b142      	cbz	r2, 3686 <tx_cb_USART_GRID+0x16>
    3674:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    3678:	322f      	adds	r2, #47	; 0x2f
    367a:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    367c:	2100      	movs	r1, #0
    367e:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    3682:	4293      	cmp	r3, r2
    3684:	d1fb      	bne.n	367e <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    3686:	2300      	movs	r3, #0
    3688:	8203      	strh	r3, [r0, #16]
    368a:	4770      	bx	lr

0000368c <tx_cb_USART_GRID_W>:
{
    368c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    368e:	4802      	ldr	r0, [pc, #8]	; (3698 <tx_cb_USART_GRID_W+0xc>)
    3690:	4b02      	ldr	r3, [pc, #8]	; (369c <tx_cb_USART_GRID_W+0x10>)
    3692:	4798      	blx	r3
    3694:	bd08      	pop	{r3, pc}
    3696:	bf00      	nop
    3698:	200037c0 	.word	0x200037c0
    369c:	00003671 	.word	0x00003671

000036a0 <tx_cb_USART_GRID_S>:
{
    36a0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    36a2:	4802      	ldr	r0, [pc, #8]	; (36ac <tx_cb_USART_GRID_S+0xc>)
    36a4:	4b02      	ldr	r3, [pc, #8]	; (36b0 <tx_cb_USART_GRID_S+0x10>)
    36a6:	4798      	blx	r3
    36a8:	bd08      	pop	{r3, pc}
    36aa:	bf00      	nop
    36ac:	200047dc 	.word	0x200047dc
    36b0:	00003671 	.word	0x00003671

000036b4 <tx_cb_USART_GRID_E>:
{
    36b4:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    36b6:	4802      	ldr	r0, [pc, #8]	; (36c0 <tx_cb_USART_GRID_E+0xc>)
    36b8:	4b02      	ldr	r3, [pc, #8]	; (36c4 <tx_cb_USART_GRID_E+0x10>)
    36ba:	4798      	blx	r3
    36bc:	bd08      	pop	{r3, pc}
    36be:	bf00      	nop
    36c0:	200067f0 	.word	0x200067f0
    36c4:	00003671 	.word	0x00003671

000036c8 <tx_cb_USART_GRID_N>:
{
    36c8:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    36ca:	4802      	ldr	r0, [pc, #8]	; (36d4 <tx_cb_USART_GRID_N+0xc>)
    36cc:	4b02      	ldr	r3, [pc, #8]	; (36d8 <tx_cb_USART_GRID_N+0x10>)
    36ce:	4798      	blx	r3
    36d0:	bd08      	pop	{r3, pc}
    36d2:	bf00      	nop
    36d4:	200012ac 	.word	0x200012ac
    36d8:	00003671 	.word	0x00003671

000036dc <err_cb_USART_GRID>:
{
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
    36dc:	b508      	push	{r3, lr}
	por->usart_error_flag = 1;	
    36de:	2301      	movs	r3, #1
    36e0:	7703      	strb	r3, [r0, #28]
	
	usart_async_disable(por->usart);
    36e2:	6880      	ldr	r0, [r0, #8]
    36e4:	4b01      	ldr	r3, [pc, #4]	; (36ec <err_cb_USART_GRID+0x10>)
    36e6:	4798      	blx	r3
    36e8:	bd08      	pop	{r3, pc}
    36ea:	bf00      	nop
    36ec:	00005671 	.word	0x00005671

000036f0 <err_cb_USART_GRID_W>:
{
    36f0:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_W);
    36f2:	4802      	ldr	r0, [pc, #8]	; (36fc <err_cb_USART_GRID_W+0xc>)
    36f4:	4b02      	ldr	r3, [pc, #8]	; (3700 <err_cb_USART_GRID_W+0x10>)
    36f6:	4798      	blx	r3
    36f8:	bd08      	pop	{r3, pc}
    36fa:	bf00      	nop
    36fc:	200037c0 	.word	0x200037c0
    3700:	000036dd 	.word	0x000036dd

00003704 <err_cb_USART_GRID_S>:
{
    3704:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_S);
    3706:	4802      	ldr	r0, [pc, #8]	; (3710 <err_cb_USART_GRID_S+0xc>)
    3708:	4b02      	ldr	r3, [pc, #8]	; (3714 <err_cb_USART_GRID_S+0x10>)
    370a:	4798      	blx	r3
    370c:	bd08      	pop	{r3, pc}
    370e:	bf00      	nop
    3710:	200047dc 	.word	0x200047dc
    3714:	000036dd 	.word	0x000036dd

00003718 <err_cb_USART_GRID_E>:
{
    3718:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_E);
    371a:	4802      	ldr	r0, [pc, #8]	; (3724 <err_cb_USART_GRID_E+0xc>)
    371c:	4b02      	ldr	r3, [pc, #8]	; (3728 <err_cb_USART_GRID_E+0x10>)
    371e:	4798      	blx	r3
    3720:	bd08      	pop	{r3, pc}
    3722:	bf00      	nop
    3724:	200067f0 	.word	0x200067f0
    3728:	000036dd 	.word	0x000036dd

0000372c <err_cb_USART_GRID_N>:
{
    372c:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_N);
    372e:	4802      	ldr	r0, [pc, #8]	; (3738 <err_cb_USART_GRID_N+0xc>)
    3730:	4b02      	ldr	r3, [pc, #8]	; (373c <err_cb_USART_GRID_N+0x10>)
    3732:	4798      	blx	r3
    3734:	bd08      	pop	{r3, pc}
    3736:	bf00      	nop
    3738:	200012ac 	.word	0x200012ac
    373c:	000036dd 	.word	0x000036dd

00003740 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    3740:	b508      	push	{r3, lr}
    3742:	7b83      	ldrb	r3, [r0, #14]
    3744:	011b      	lsls	r3, r3, #4
    3746:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    374a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    374e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3750:	f022 0202 	bic.w	r2, r2, #2
    3754:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    3756:	2100      	movs	r1, #0
    3758:	7b80      	ldrb	r0, [r0, #14]
    375a:	4b01      	ldr	r3, [pc, #4]	; (3760 <grid_sys_port_reset_dma+0x20>)
    375c:	4798      	blx	r3
    375e:	bd08      	pop	{r3, pc}
    3760:	000066b9 	.word	0x000066b9

00003764 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    3764:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3766:	4802      	ldr	r0, [pc, #8]	; (3770 <dma_transfer_complete_w_cb+0xc>)
    3768:	4b02      	ldr	r3, [pc, #8]	; (3774 <dma_transfer_complete_w_cb+0x10>)
    376a:	4798      	blx	r3
    376c:	bd08      	pop	{r3, pc}
    376e:	bf00      	nop
    3770:	200037c0 	.word	0x200037c0
    3774:	00003741 	.word	0x00003741

00003778 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    3778:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    377a:	4802      	ldr	r0, [pc, #8]	; (3784 <dma_transfer_complete_s_cb+0xc>)
    377c:	4b02      	ldr	r3, [pc, #8]	; (3788 <dma_transfer_complete_s_cb+0x10>)
    377e:	4798      	blx	r3
    3780:	bd08      	pop	{r3, pc}
    3782:	bf00      	nop
    3784:	200047dc 	.word	0x200047dc
    3788:	00003741 	.word	0x00003741

0000378c <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    378c:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    378e:	4802      	ldr	r0, [pc, #8]	; (3798 <dma_transfer_complete_e_cb+0xc>)
    3790:	4b02      	ldr	r3, [pc, #8]	; (379c <dma_transfer_complete_e_cb+0x10>)
    3792:	4798      	blx	r3
    3794:	bd08      	pop	{r3, pc}
    3796:	bf00      	nop
    3798:	200067f0 	.word	0x200067f0
    379c:	00003741 	.word	0x00003741

000037a0 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    37a0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    37a2:	4802      	ldr	r0, [pc, #8]	; (37ac <dma_transfer_complete_n_cb+0xc>)
    37a4:	4b02      	ldr	r3, [pc, #8]	; (37b0 <dma_transfer_complete_n_cb+0x10>)
    37a6:	4798      	blx	r3
    37a8:	bd08      	pop	{r3, pc}
    37aa:	bf00      	nop
    37ac:	200012ac 	.word	0x200012ac
    37b0:	00003741 	.word	0x00003741

000037b4 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    37b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37b8:	4b3e      	ldr	r3, [pc, #248]	; (38b4 <grid_sys_uart_init+0x100>)
    37ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    37be:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    37c2:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    37c6:	f042 0204 	orr.w	r2, r2, #4
    37ca:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37ce:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    37d6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    37da:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    37de:	f042 0204 	orr.w	r2, r2, #4
    37e2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37e6:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    37ee:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    37f2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    37f6:	f042 0204 	orr.w	r2, r2, #4
    37fa:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37fe:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3802:	f44f 7100 	mov.w	r1, #512	; 0x200
    3806:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    380a:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    380e:	f042 0204 	orr.w	r2, r2, #4
    3812:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3816:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    381a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3900 <grid_sys_uart_init+0x14c>
    381e:	4a26      	ldr	r2, [pc, #152]	; (38b8 <grid_sys_uart_init+0x104>)
    3820:	2101      	movs	r1, #1
    3822:	4640      	mov	r0, r8
    3824:	4c25      	ldr	r4, [pc, #148]	; (38bc <grid_sys_uart_init+0x108>)
    3826:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    3828:	4f25      	ldr	r7, [pc, #148]	; (38c0 <grid_sys_uart_init+0x10c>)
    382a:	4a26      	ldr	r2, [pc, #152]	; (38c4 <grid_sys_uart_init+0x110>)
    382c:	2101      	movs	r1, #1
    382e:	4638      	mov	r0, r7
    3830:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    3832:	4e25      	ldr	r6, [pc, #148]	; (38c8 <grid_sys_uart_init+0x114>)
    3834:	4a25      	ldr	r2, [pc, #148]	; (38cc <grid_sys_uart_init+0x118>)
    3836:	2101      	movs	r1, #1
    3838:	4630      	mov	r0, r6
    383a:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    383c:	4d24      	ldr	r5, [pc, #144]	; (38d0 <grid_sys_uart_init+0x11c>)
    383e:	4a25      	ldr	r2, [pc, #148]	; (38d4 <grid_sys_uart_init+0x120>)
    3840:	2101      	movs	r1, #1
    3842:	4628      	mov	r0, r5
    3844:	47a0      	blx	r4
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    3846:	2101      	movs	r1, #1
    3848:	4640      	mov	r0, r8
    384a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3904 <grid_sys_uart_init+0x150>
    384e:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    3850:	2101      	movs	r1, #1
    3852:	4638      	mov	r0, r7
    3854:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    3856:	2101      	movs	r1, #1
    3858:	4630      	mov	r0, r6
    385a:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    385c:	2101      	movs	r1, #1
    385e:	4628      	mov	r0, r5
    3860:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    3862:	4a1d      	ldr	r2, [pc, #116]	; (38d8 <grid_sys_uart_init+0x124>)
    3864:	2102      	movs	r1, #2
    3866:	4640      	mov	r0, r8
    3868:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    386a:	4a1c      	ldr	r2, [pc, #112]	; (38dc <grid_sys_uart_init+0x128>)
    386c:	2102      	movs	r1, #2
    386e:	4638      	mov	r0, r7
    3870:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    3872:	4a1b      	ldr	r2, [pc, #108]	; (38e0 <grid_sys_uart_init+0x12c>)
    3874:	2102      	movs	r1, #2
    3876:	4630      	mov	r0, r6
    3878:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    387a:	4a1a      	ldr	r2, [pc, #104]	; (38e4 <grid_sys_uart_init+0x130>)
    387c:	2102      	movs	r1, #2
    387e:	4628      	mov	r0, r5
    3880:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    3882:	4919      	ldr	r1, [pc, #100]	; (38e8 <grid_sys_uart_init+0x134>)
    3884:	4640      	mov	r0, r8
    3886:	4c19      	ldr	r4, [pc, #100]	; (38ec <grid_sys_uart_init+0x138>)
    3888:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    388a:	4919      	ldr	r1, [pc, #100]	; (38f0 <grid_sys_uart_init+0x13c>)
    388c:	4638      	mov	r0, r7
    388e:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    3890:	4918      	ldr	r1, [pc, #96]	; (38f4 <grid_sys_uart_init+0x140>)
    3892:	4630      	mov	r0, r6
    3894:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    3896:	4918      	ldr	r1, [pc, #96]	; (38f8 <grid_sys_uart_init+0x144>)
    3898:	4628      	mov	r0, r5
    389a:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    389c:	4640      	mov	r0, r8
    389e:	4c17      	ldr	r4, [pc, #92]	; (38fc <grid_sys_uart_init+0x148>)
    38a0:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    38a2:	4638      	mov	r0, r7
    38a4:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    38a6:	4630      	mov	r0, r6
    38a8:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    38aa:	4628      	mov	r0, r5
    38ac:	47a0      	blx	r4
    38ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38b2:	bf00      	nop
    38b4:	41008000 	.word	0x41008000
    38b8:	000036c9 	.word	0x000036c9
    38bc:	000056c5 	.word	0x000056c5
    38c0:	20001084 	.word	0x20001084
    38c4:	000036b5 	.word	0x000036b5
    38c8:	200011dc 	.word	0x200011dc
    38cc:	000036a1 	.word	0x000036a1
    38d0:	2000118c 	.word	0x2000118c
    38d4:	0000368d 	.word	0x0000368d
    38d8:	0000372d 	.word	0x0000372d
    38dc:	00003719 	.word	0x00003719
    38e0:	00003705 	.word	0x00003705
    38e4:	000036f1 	.word	0x000036f1
    38e8:	2000330c 	.word	0x2000330c
    38ec:	0000569d 	.word	0x0000569d
    38f0:	200047c8 	.word	0x200047c8
    38f4:	200057e4 	.word	0x200057e4
    38f8:	2000788c 	.word	0x2000788c
    38fc:	00005645 	.word	0x00005645
    3900:	200010d8 	.word	0x200010d8
    3904:	00005739 	.word	0x00005739

00003908 <grid_sys_dma_rx_init_one>:

}



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3908:	b5f0      	push	{r4, r5, r6, r7, lr}
    390a:	b083      	sub	sp, #12
    390c:	4605      	mov	r5, r0
    390e:	460f      	mov	r7, r1
    3910:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    3912:	7b84      	ldrb	r4, [r0, #14]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    3914:	6883      	ldr	r3, [r0, #8]
    3916:	6a19      	ldr	r1, [r3, #32]
    3918:	3128      	adds	r1, #40	; 0x28
    391a:	4620      	mov	r0, r4
    391c:	4b0d      	ldr	r3, [pc, #52]	; (3954 <grid_sys_dma_rx_init_one+0x4c>)
    391e:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3920:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    3924:	4620      	mov	r0, r4
    3926:	4b0c      	ldr	r3, [pc, #48]	; (3958 <grid_sys_dma_rx_init_one+0x50>)
    3928:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    392a:	4639      	mov	r1, r7
    392c:	4620      	mov	r0, r4
    392e:	4b0b      	ldr	r3, [pc, #44]	; (395c <grid_sys_dma_rx_init_one+0x54>)
    3930:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    3932:	4621      	mov	r1, r4
    3934:	a801      	add	r0, sp, #4
    3936:	4b0a      	ldr	r3, [pc, #40]	; (3960 <grid_sys_dma_rx_init_one+0x58>)
    3938:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    393a:	9b01      	ldr	r3, [sp, #4]
    393c:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    393e:	2201      	movs	r2, #1
    3940:	2100      	movs	r1, #0
    3942:	4620      	mov	r0, r4
    3944:	4b07      	ldr	r3, [pc, #28]	; (3964 <grid_sys_dma_rx_init_one+0x5c>)
    3946:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3948:	2100      	movs	r1, #0
    394a:	4620      	mov	r0, r4
    394c:	4b06      	ldr	r3, [pc, #24]	; (3968 <grid_sys_dma_rx_init_one+0x60>)
    394e:	4798      	blx	r3
	

}
    3950:	b003      	add	sp, #12
    3952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3954:	00006635 	.word	0x00006635
    3958:	00006625 	.word	0x00006625
    395c:	00006661 	.word	0x00006661
    3960:	000066f9 	.word	0x000066f9
    3964:	000065d1 	.word	0x000065d1
    3968:	000066b9 	.word	0x000066b9

0000396c <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    396c:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    396e:	4a10      	ldr	r2, [pc, #64]	; (39b0 <grid_sys_dma_rx_init+0x44>)
    3970:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3974:	480f      	ldr	r0, [pc, #60]	; (39b4 <grid_sys_dma_rx_init+0x48>)
    3976:	4c10      	ldr	r4, [pc, #64]	; (39b8 <grid_sys_dma_rx_init+0x4c>)
    3978:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    397a:	4a10      	ldr	r2, [pc, #64]	; (39bc <grid_sys_dma_rx_init+0x50>)
    397c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3980:	480f      	ldr	r0, [pc, #60]	; (39c0 <grid_sys_dma_rx_init+0x54>)
    3982:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    3984:	4a0f      	ldr	r2, [pc, #60]	; (39c4 <grid_sys_dma_rx_init+0x58>)
    3986:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    398a:	480f      	ldr	r0, [pc, #60]	; (39c8 <grid_sys_dma_rx_init+0x5c>)
    398c:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    398e:	4a0f      	ldr	r2, [pc, #60]	; (39cc <grid_sys_dma_rx_init+0x60>)
    3990:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    3994:	480e      	ldr	r0, [pc, #56]	; (39d0 <grid_sys_dma_rx_init+0x64>)
    3996:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3998:	4b0e      	ldr	r3, [pc, #56]	; (39d4 <grid_sys_dma_rx_init+0x68>)
    399a:	2200      	movs	r2, #0
    399c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    39a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    39a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    39a8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    39ac:	bd10      	pop	{r4, pc}
    39ae:	bf00      	nop
    39b0:	000037a1 	.word	0x000037a1
    39b4:	200012ac 	.word	0x200012ac
    39b8:	00003909 	.word	0x00003909
    39bc:	0000378d 	.word	0x0000378d
    39c0:	200067f0 	.word	0x200067f0
    39c4:	00003779 	.word	0x00003779
    39c8:	200047dc 	.word	0x200047dc
    39cc:	00003765 	.word	0x00003765
    39d0:	200037c0 	.word	0x200037c0
    39d4:	e000e100 	.word	0xe000e100

000039d8 <grid_sys_init>:
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}

void grid_sys_init(struct grid_sys_model* mod){
    39d8:	b510      	push	{r4, lr}
	
	mod->bank_select = 0;
    39da:	2200      	movs	r2, #0
    39dc:	7242      	strb	r2, [r0, #9]
	
	
	mod->bank_color_r[0] = 0;
    39de:	7282      	strb	r2, [r0, #10]
	mod->bank_color_g[0] = 100;
    39e0:	2164      	movs	r1, #100	; 0x64
    39e2:	7381      	strb	r1, [r0, #14]
	mod->bank_color_b[0] = 200;
    39e4:	23c8      	movs	r3, #200	; 0xc8
    39e6:	7483      	strb	r3, [r0, #18]
	
	mod->bank_color_r[1] = 200;
    39e8:	72c3      	strb	r3, [r0, #11]
	mod->bank_color_g[1] = 100;
    39ea:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[1] = 0;
    39ec:	74c2      	strb	r2, [r0, #19]
		
	mod->bank_color_r[2] = 50;
    39ee:	2432      	movs	r4, #50	; 0x32
    39f0:	7304      	strb	r4, [r0, #12]
	mod->bank_color_g[2] = 200;
    39f2:	7403      	strb	r3, [r0, #16]
	mod->bank_color_b[2] = 50;
    39f4:	7504      	strb	r4, [r0, #20]
	
	mod->bank_color_r[3] = 100;
    39f6:	7341      	strb	r1, [r0, #13]
	mod->bank_color_g[3] = 0;
    39f8:	7442      	strb	r2, [r0, #17]
	mod->bank_color_b[3] = 200;
    39fa:	7543      	strb	r3, [r0, #21]
	
	
	grid_port_init_all();
    39fc:	4b03      	ldr	r3, [pc, #12]	; (3a0c <grid_sys_init+0x34>)
    39fe:	4798      	blx	r3
	
	grid_sys_uart_init();
    3a00:	4b03      	ldr	r3, [pc, #12]	; (3a10 <grid_sys_init+0x38>)
    3a02:	4798      	blx	r3
	grid_sys_dma_rx_init();
    3a04:	4b03      	ldr	r3, [pc, #12]	; (3a14 <grid_sys_init+0x3c>)
    3a06:	4798      	blx	r3
    3a08:	bd10      	pop	{r4, pc}
    3a0a:	bf00      	nop
    3a0c:	00001609 	.word	0x00001609
    3a10:	000037b5 	.word	0x000037b5
    3a14:	0000396d 	.word	0x0000396d

00003a18 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3a18:	6980      	ldr	r0, [r0, #24]
    3a1a:	4770      	bx	lr

00003a1c <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    3a1c:	6980      	ldr	r0, [r0, #24]
	
	

}
    3a1e:	1a40      	subs	r0, r0, r1
    3a20:	4770      	bx	lr

00003a22 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3a22:	6983      	ldr	r3, [r0, #24]
    3a24:	3301      	adds	r3, #1
    3a26:	6183      	str	r3, [r0, #24]
    3a28:	4770      	bx	lr

00003a2a <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    3a2a:	7a00      	ldrb	r0, [r0, #8]
    3a2c:	4770      	bx	lr

00003a2e <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    3a2e:	2300      	movs	r3, #0
    3a30:	7203      	strb	r3, [r0, #8]
    3a32:	4770      	bx	lr

00003a34 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3a34:	7983      	ldrb	r3, [r0, #6]
    3a36:	b123      	cbz	r3, 3a42 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3a38:	2b01      	cmp	r3, #1
    3a3a:	d00f      	beq.n	3a5c <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    3a3c:	2b02      	cmp	r3, #2
    3a3e:	d015      	beq.n	3a6c <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3a40:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3a42:	8880      	ldrh	r0, [r0, #4]
    3a44:	0840      	lsrs	r0, r0, #1
    3a46:	387d      	subs	r0, #125	; 0x7d
    3a48:	2800      	cmp	r0, #0
    3a4a:	bfb8      	it	lt
    3a4c:	4240      	neglt	r0, r0
    3a4e:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3a52:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3a56:	f3c0 0047 	ubfx	r0, r0, #1, #8
    3a5a:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    3a5c:	8880      	ldrh	r0, [r0, #4]
    3a5e:	4b06      	ldr	r3, [pc, #24]	; (3a78 <grid_sys_alert_get_color_intensity+0x44>)
    3a60:	fba3 3000 	umull	r3, r0, r3, r0
    3a64:	f340 1000 	sbfx	r0, r0, #4, #1
    3a68:	b2c0      	uxtb	r0, r0
    3a6a:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3a6c:	8880      	ldrh	r0, [r0, #4]
    3a6e:	2864      	cmp	r0, #100	; 0x64
    3a70:	bf8c      	ite	hi
    3a72:	20ff      	movhi	r0, #255	; 0xff
    3a74:	2000      	movls	r0, #0
    3a76:	4770      	bx	lr
    3a78:	10624dd3 	.word	0x10624dd3

00003a7c <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    3a7c:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    3a7e:	2401      	movs	r4, #1
    3a80:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    3a82:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    3a84:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    3a86:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    3a88:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3a8c:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    3a8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3a92:	7183      	strb	r3, [r0, #6]
	
}
    3a94:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a98:	4770      	bx	lr

00003a9a <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    3a9a:	7840      	ldrb	r0, [r0, #1]
    3a9c:	4770      	bx	lr

00003a9e <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    3a9e:	7880      	ldrb	r0, [r0, #2]
    3aa0:	4770      	bx	lr

00003aa2 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    3aa2:	78c0      	ldrb	r0, [r0, #3]
    3aa4:	4770      	bx	lr

00003aa6 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    3aa6:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    3aa8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3aac:	b2d8      	uxtb	r0, r3
    3aae:	2809      	cmp	r0, #9
    3ab0:	d90d      	bls.n	3ace <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    3ab2:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    3ab6:	b2db      	uxtb	r3, r3
    3ab8:	2b05      	cmp	r3, #5
    3aba:	d903      	bls.n	3ac4 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    3abc:	b131      	cbz	r1, 3acc <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    3abe:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    3ac0:	2000      	movs	r0, #0
    3ac2:	4770      	bx	lr
		result = ascii - 97 + 10;
    3ac4:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    3ac8:	b2c0      	uxtb	r0, r0
    3aca:	4770      	bx	lr
	uint8_t result = 0;
    3acc:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    3ace:	4770      	bx	lr

00003ad0 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    3ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    3ad4:	b1c1      	cbz	r1, 3b08 <grid_sys_read_hex_string_value+0x38>
    3ad6:	4690      	mov	r8, r2
    3ad8:	1e45      	subs	r5, r0, #1
    3ada:	1e4b      	subs	r3, r1, #1
    3adc:	009c      	lsls	r4, r3, #2
    3ade:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3ae2:	3f02      	subs	r7, #2
    3ae4:	b2db      	uxtb	r3, r3
    3ae6:	1aff      	subs	r7, r7, r3
    3ae8:	00bf      	lsls	r7, r7, #2
    3aea:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3aec:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3b0c <grid_sys_read_hex_string_value+0x3c>
    3af0:	4641      	mov	r1, r8
    3af2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3af6:	47c8      	blx	r9
    3af8:	40a0      	lsls	r0, r4
    3afa:	4406      	add	r6, r0
    3afc:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    3afe:	42bc      	cmp	r4, r7
    3b00:	d1f6      	bne.n	3af0 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3b02:	4630      	mov	r0, r6
    3b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    3b08:	2600      	movs	r6, #0
	return result;
    3b0a:	e7fa      	b.n	3b02 <grid_sys_read_hex_string_value+0x32>
    3b0c:	00003aa7 	.word	0x00003aa7

00003b10 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3b10:	b530      	push	{r4, r5, lr}
    3b12:	b085      	sub	sp, #20
    3b14:	4605      	mov	r5, r0
    3b16:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    3b18:	4909      	ldr	r1, [pc, #36]	; (3b40 <grid_sys_write_hex_string_value+0x30>)
    3b1a:	a801      	add	r0, sp, #4
    3b1c:	4b09      	ldr	r3, [pc, #36]	; (3b44 <grid_sys_write_hex_string_value+0x34>)
    3b1e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3b20:	b164      	cbz	r4, 3b3c <grid_sys_write_hex_string_value+0x2c>
    3b22:	ab04      	add	r3, sp, #16
    3b24:	1b1a      	subs	r2, r3, r4
    3b26:	3a05      	subs	r2, #5
    3b28:	1e6b      	subs	r3, r5, #1
    3b2a:	1e60      	subs	r0, r4, #1
    3b2c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3b30:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3b34:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3b38:	4283      	cmp	r3, r0
    3b3a:	d1f9      	bne.n	3b30 <grid_sys_write_hex_string_value+0x20>
	}

}
    3b3c:	b005      	add	sp, #20
    3b3e:	bd30      	pop	{r4, r5, pc}
    3b40:	0000da74 	.word	0x0000da74
    3b44:	0000c855 	.word	0x0000c855

00003b48 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3b48:	4b34      	ldr	r3, [pc, #208]	; (3c1c <grid_sys_get_hwcfg+0xd4>)
    3b4a:	681b      	ldr	r3, [r3, #0]
    3b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b50:	d002      	beq.n	3b58 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3b52:	4b32      	ldr	r3, [pc, #200]	; (3c1c <grid_sys_get_hwcfg+0xd4>)
    3b54:	6818      	ldr	r0, [r3, #0]
    3b56:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b5c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3b5e:	4b30      	ldr	r3, [pc, #192]	; (3c20 <grid_sys_get_hwcfg+0xd8>)
    3b60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3b68:	492e      	ldr	r1, [pc, #184]	; (3c24 <grid_sys_get_hwcfg+0xdc>)
    3b6a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3b6e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3b72:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3b76:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    3b7a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3b7e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3b82:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    3b86:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3b8e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3b92:	4925      	ldr	r1, [pc, #148]	; (3c28 <grid_sys_get_hwcfg+0xe0>)
    3b94:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3b98:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    3b9c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ba0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    3ba4:	2001      	movs	r0, #1
    3ba6:	4b21      	ldr	r3, [pc, #132]	; (3c2c <grid_sys_get_hwcfg+0xe4>)
    3ba8:	4798      	blx	r3
    3baa:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    3bac:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3bae:	4d1c      	ldr	r5, [pc, #112]	; (3c20 <grid_sys_get_hwcfg+0xd8>)
    3bb0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    3bb4:	4f1d      	ldr	r7, [pc, #116]	; (3c2c <grid_sys_get_hwcfg+0xe4>)
    3bb6:	e00c      	b.n	3bd2 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    3bb8:	2e07      	cmp	r6, #7
    3bba:	d027      	beq.n	3c0c <grid_sys_get_hwcfg+0xc4>
    3bbc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    3bc0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    3bc4:	2001      	movs	r0, #1
    3bc6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3bc8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    3bcc:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    3bce:	2e08      	cmp	r6, #8
    3bd0:	d01c      	beq.n	3c0c <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3bd2:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    3bd6:	2001      	movs	r0, #1
    3bd8:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3bda:	a801      	add	r0, sp, #4
    3bdc:	4b14      	ldr	r3, [pc, #80]	; (3c30 <grid_sys_get_hwcfg+0xe8>)
    3bde:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3be0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3be4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3be8:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3bec:	405c      	eors	r4, r3
    3bee:	4014      	ands	r4, r2
    3bf0:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3bf2:	a801      	add	r0, sp, #4
    3bf4:	4b0f      	ldr	r3, [pc, #60]	; (3c34 <grid_sys_get_hwcfg+0xec>)
    3bf6:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3bf8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3bfc:	d0dc      	beq.n	3bb8 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3bfe:	2301      	movs	r3, #1
    3c00:	40b3      	lsls	r3, r6
    3c02:	ea43 0808 	orr.w	r8, r3, r8
    3c06:	fa5f f888 	uxtb.w	r8, r8
    3c0a:	e7d5      	b.n	3bb8 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3c0c:	4b03      	ldr	r3, [pc, #12]	; (3c1c <grid_sys_get_hwcfg+0xd4>)
    3c0e:	f8c3 8000 	str.w	r8, [r3]
}
    3c12:	4b02      	ldr	r3, [pc, #8]	; (3c1c <grid_sys_get_hwcfg+0xd4>)
    3c14:	6818      	ldr	r0, [r3, #0]
    3c16:	b003      	add	sp, #12
    3c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c1c:	20000354 	.word	0x20000354
    3c20:	41008000 	.word	0x41008000
    3c24:	40002000 	.word	0x40002000
    3c28:	40028000 	.word	0x40028000
    3c2c:	00004ae9 	.word	0x00004ae9
    3c30:	00004a69 	.word	0x00004a69
    3c34:	00004a77 	.word	0x00004a77

00003c38 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c3c:	b085      	sub	sp, #20
    3c3e:	4681      	mov	r9, r0
    3c40:	460c      	mov	r4, r1
	uint32_t hwtype = grid_sys_get_hwcfg();
    3c42:	4b4d      	ldr	r3, [pc, #308]	; (3d78 <grid_sys_bank_select+0x140>)
    3c44:	4798      	blx	r3
    3c46:	4682      	mov	sl, r0
	if (banknumber == 255){
    3c48:	2cff      	cmp	r4, #255	; 0xff
    3c4a:	d006      	beq.n	3c5a <grid_sys_bank_select+0x22>
		mod->bank_select = banknumber%4;
    3c4c:	f004 0403 	and.w	r4, r4, #3
    3c50:	f889 4009 	strb.w	r4, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c54:	2500      	movs	r5, #0
    3c56:	9503      	str	r5, [sp, #12]
    3c58:	e058      	b.n	3d0c <grid_sys_bank_select+0xd4>
		mod->bank_select = 255;
    3c5a:	23ff      	movs	r3, #255	; 0xff
    3c5c:	f889 3009 	strb.w	r3, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c60:	2500      	movs	r5, #0
    3c62:	f8df b124 	ldr.w	fp, [pc, #292]	; 3d88 <grid_sys_bank_select+0x150>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3c66:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3d8c <grid_sys_bank_select+0x154>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c6a:	e01b      	b.n	3ca4 <grid_sys_bank_select+0x6c>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3c6c:	f04f 09ff 	mov.w	r9, #255	; 0xff
    3c70:	f8cd 9004 	str.w	r9, [sp, #4]
    3c74:	2600      	movs	r6, #0
    3c76:	9600      	str	r6, [sp, #0]
    3c78:	4633      	mov	r3, r6
    3c7a:	4632      	mov	r2, r6
    3c7c:	4621      	mov	r1, r4
    3c7e:	4658      	mov	r0, fp
    3c80:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, 5, 5, 5);
    3c82:	2305      	movs	r3, #5
    3c84:	9301      	str	r3, [sp, #4]
    3c86:	9300      	str	r3, [sp, #0]
    3c88:	4632      	mov	r2, r6
    3c8a:	4621      	mov	r1, r4
    3c8c:	4658      	mov	r0, fp
    3c8e:	4f3b      	ldr	r7, [pc, #236]	; (3d7c <grid_sys_bank_select+0x144>)
    3c90:	47b8      	blx	r7
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3c92:	9601      	str	r6, [sp, #4]
    3c94:	9600      	str	r6, [sp, #0]
    3c96:	464b      	mov	r3, r9
    3c98:	4632      	mov	r2, r6
    3c9a:	4621      	mov	r1, r4
    3c9c:	4658      	mov	r0, fp
    3c9e:	4c38      	ldr	r4, [pc, #224]	; (3d80 <grid_sys_bank_select+0x148>)
    3ca0:	47a0      	blx	r4
    3ca2:	3501      	adds	r5, #1
    3ca4:	b2ec      	uxtb	r4, r5
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3ca6:	4658      	mov	r0, fp
    3ca8:	4b36      	ldr	r3, [pc, #216]	; (3d84 <grid_sys_bank_select+0x14c>)
    3caa:	4798      	blx	r3
    3cac:	42a0      	cmp	r0, r4
    3cae:	d95f      	bls.n	3d70 <grid_sys_bank_select+0x138>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3cb0:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3cb4:	d0da      	beq.n	3c6c <grid_sys_bank_select+0x34>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3cb6:	2306      	movs	r3, #6
    3cb8:	9301      	str	r3, [sp, #4]
    3cba:	9300      	str	r3, [sp, #0]
    3cbc:	2200      	movs	r2, #0
    3cbe:	4621      	mov	r1, r4
    3cc0:	4658      	mov	r0, fp
    3cc2:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3cc4:	233f      	movs	r3, #63	; 0x3f
    3cc6:	9301      	str	r3, [sp, #4]
    3cc8:	9300      	str	r3, [sp, #0]
    3cca:	2200      	movs	r2, #0
    3ccc:	4621      	mov	r1, r4
    3cce:	4658      	mov	r0, fp
    3cd0:	4e2a      	ldr	r6, [pc, #168]	; (3d7c <grid_sys_bank_select+0x144>)
    3cd2:	47b0      	blx	r6
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3cd4:	237f      	movs	r3, #127	; 0x7f
    3cd6:	9301      	str	r3, [sp, #4]
    3cd8:	9300      	str	r3, [sp, #0]
    3cda:	2200      	movs	r2, #0
    3cdc:	4621      	mov	r1, r4
    3cde:	4658      	mov	r0, fp
    3ce0:	4c27      	ldr	r4, [pc, #156]	; (3d80 <grid_sys_bank_select+0x148>)
    3ce2:	47a0      	blx	r4
    3ce4:	e7dd      	b.n	3ca2 <grid_sys_bank_select+0x6a>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3ce6:	f899 2009 	ldrb.w	r2, [r9, #9]
    3cea:	444a      	add	r2, r9
				grid_led_set_mid(&grid_led_state, i, 0, r/32, g/32, b/32);
    3cec:	7a93      	ldrb	r3, [r2, #10]
    3cee:	7c91      	ldrb	r1, [r2, #18]
    3cf0:	0949      	lsrs	r1, r1, #5
    3cf2:	9101      	str	r1, [sp, #4]
    3cf4:	7b92      	ldrb	r2, [r2, #14]
    3cf6:	0952      	lsrs	r2, r2, #5
    3cf8:	9200      	str	r2, [sp, #0]
    3cfa:	095b      	lsrs	r3, r3, #5
    3cfc:	2200      	movs	r2, #0
    3cfe:	4621      	mov	r1, r4
    3d00:	4821      	ldr	r0, [pc, #132]	; (3d88 <grid_sys_bank_select+0x150>)
    3d02:	4c1e      	ldr	r4, [pc, #120]	; (3d7c <grid_sys_bank_select+0x144>)
    3d04:	47a0      	blx	r4
    3d06:	9b03      	ldr	r3, [sp, #12]
    3d08:	3301      	adds	r3, #1
    3d0a:	9303      	str	r3, [sp, #12]
    3d0c:	f89d 400c 	ldrb.w	r4, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3d10:	481d      	ldr	r0, [pc, #116]	; (3d88 <grid_sys_bank_select+0x150>)
    3d12:	4b1c      	ldr	r3, [pc, #112]	; (3d84 <grid_sys_bank_select+0x14c>)
    3d14:	4798      	blx	r3
    3d16:	4284      	cmp	r4, r0
    3d18:	d22a      	bcs.n	3d70 <grid_sys_bank_select+0x138>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3d1a:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3d1e:	d0e2      	beq.n	3ce6 <grid_sys_bank_select+0xae>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3d20:	f899 3009 	ldrb.w	r3, [r9, #9]
    3d24:	444b      	add	r3, r9
    3d26:	7a9e      	ldrb	r6, [r3, #10]
				uint8_t g = mod->bank_color_g[mod->bank_select];
    3d28:	7b9f      	ldrb	r7, [r3, #14]
				uint8_t b = mod->bank_color_b[mod->bank_select];
    3d2a:	f893 8012 	ldrb.w	r8, [r3, #18]
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3d2e:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3d32:	9301      	str	r3, [sp, #4]
    3d34:	097b      	lsrs	r3, r7, #5
    3d36:	9300      	str	r3, [sp, #0]
    3d38:	0973      	lsrs	r3, r6, #5
    3d3a:	2200      	movs	r2, #0
    3d3c:	4621      	mov	r1, r4
    3d3e:	4812      	ldr	r0, [pc, #72]	; (3d88 <grid_sys_bank_select+0x150>)
    3d40:	4d12      	ldr	r5, [pc, #72]	; (3d8c <grid_sys_bank_select+0x154>)
    3d42:	47a8      	blx	r5
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3d44:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3d48:	9301      	str	r3, [sp, #4]
    3d4a:	087b      	lsrs	r3, r7, #1
    3d4c:	9300      	str	r3, [sp, #0]
    3d4e:	0873      	lsrs	r3, r6, #1
    3d50:	2200      	movs	r2, #0
    3d52:	4621      	mov	r1, r4
    3d54:	480c      	ldr	r0, [pc, #48]	; (3d88 <grid_sys_bank_select+0x150>)
    3d56:	f8df b024 	ldr.w	fp, [pc, #36]	; 3d7c <grid_sys_bank_select+0x144>
    3d5a:	47d8      	blx	fp
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3d5c:	f8cd 8004 	str.w	r8, [sp, #4]
    3d60:	9700      	str	r7, [sp, #0]
    3d62:	4633      	mov	r3, r6
    3d64:	2200      	movs	r2, #0
    3d66:	4621      	mov	r1, r4
    3d68:	4807      	ldr	r0, [pc, #28]	; (3d88 <grid_sys_bank_select+0x150>)
    3d6a:	4c05      	ldr	r4, [pc, #20]	; (3d80 <grid_sys_bank_select+0x148>)
    3d6c:	47a0      	blx	r4
    3d6e:	e7ca      	b.n	3d06 <grid_sys_bank_select+0xce>
}
    3d70:	b005      	add	sp, #20
    3d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d76:	bf00      	nop
    3d78:	00003b49 	.word	0x00003b49
    3d7c:	00002049 	.word	0x00002049
    3d80:	00002093 	.word	0x00002093
    3d84:	00001fb9 	.word	0x00001fb9
    3d88:	20007864 	.word	0x20007864
    3d8c:	00002001 	.word	0x00002001

00003d90 <grid_msg_checksum_calculate>:
}

uint8_t grid_msg_checksum_calculate(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3d90:	2903      	cmp	r1, #3
    3d92:	d009      	beq.n	3da8 <grid_msg_checksum_calculate+0x18>
    3d94:	1e43      	subs	r3, r0, #1
    3d96:	3904      	subs	r1, #4
    3d98:	4401      	add	r1, r0
    3d9a:	2000      	movs	r0, #0
		checksum ^= str[i];
    3d9c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3da0:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3da2:	428b      	cmp	r3, r1
    3da4:	d1fa      	bne.n	3d9c <grid_msg_checksum_calculate+0xc>
    3da6:	4770      	bx	lr
	uint8_t checksum = 0;
    3da8:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3daa:	4770      	bx	lr

00003dac <grid_msg_checksum_read>:

uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    3dac:	b500      	push	{lr}
    3dae:	b083      	sub	sp, #12
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    3db0:	1ecb      	subs	r3, r1, #3
    3db2:	f10d 0207 	add.w	r2, sp, #7
    3db6:	2102      	movs	r1, #2
    3db8:	4418      	add	r0, r3
    3dba:	4b03      	ldr	r3, [pc, #12]	; (3dc8 <grid_msg_checksum_read+0x1c>)
    3dbc:	4798      	blx	r3
}
    3dbe:	b2c0      	uxtb	r0, r0
    3dc0:	b003      	add	sp, #12
    3dc2:	f85d fb04 	ldr.w	pc, [sp], #4
    3dc6:	bf00      	nop
    3dc8:	00003ad1 	.word	0x00003ad1

00003dcc <grid_msg_checksum_write>:

void grid_msg_checksum_write(uint8_t* message, uint32_t length, uint8_t checksum){
    3dcc:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3dce:	1ecb      	subs	r3, r1, #3
    3dd0:	2102      	movs	r1, #2
    3dd2:	4418      	add	r0, r3
    3dd4:	4b01      	ldr	r3, [pc, #4]	; (3ddc <grid_msg_checksum_write+0x10>)
    3dd6:	4798      	blx	r3
    3dd8:	bd08      	pop	{r3, pc}
    3dda:	bf00      	nop
    3ddc:	00003b11 	.word	0x00003b11

00003de0 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3de0:	b500      	push	{lr}
    3de2:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3de4:	aa02      	add	r2, sp, #8
    3de6:	2300      	movs	r3, #0
    3de8:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3dec:	2102      	movs	r1, #2
    3dee:	3004      	adds	r0, #4
    3df0:	4b02      	ldr	r3, [pc, #8]	; (3dfc <grid_msg_get_id+0x1c>)
    3df2:	4798      	blx	r3
	
}
    3df4:	b2c0      	uxtb	r0, r0
    3df6:	b003      	add	sp, #12
    3df8:	f85d fb04 	ldr.w	pc, [sp], #4
    3dfc:	00003ad1 	.word	0x00003ad1

00003e00 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3e00:	b500      	push	{lr}
    3e02:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3e04:	aa02      	add	r2, sp, #8
    3e06:	2300      	movs	r3, #0
    3e08:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3e0c:	2102      	movs	r1, #2
    3e0e:	3006      	adds	r0, #6
    3e10:	4b02      	ldr	r3, [pc, #8]	; (3e1c <grid_msg_get_dx+0x1c>)
    3e12:	4798      	blx	r3
	
}
    3e14:	b2c0      	uxtb	r0, r0
    3e16:	b003      	add	sp, #12
    3e18:	f85d fb04 	ldr.w	pc, [sp], #4
    3e1c:	00003ad1 	.word	0x00003ad1

00003e20 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3e20:	b500      	push	{lr}
    3e22:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3e24:	aa02      	add	r2, sp, #8
    3e26:	2300      	movs	r3, #0
    3e28:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3e2c:	2102      	movs	r1, #2
    3e2e:	3008      	adds	r0, #8
    3e30:	4b02      	ldr	r3, [pc, #8]	; (3e3c <grid_msg_get_dy+0x1c>)
    3e32:	4798      	blx	r3

}
    3e34:	b2c0      	uxtb	r0, r0
    3e36:	b003      	add	sp, #12
    3e38:	f85d fb04 	ldr.w	pc, [sp], #4
    3e3c:	00003ad1 	.word	0x00003ad1

00003e40 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3e40:	b500      	push	{lr}
    3e42:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3e44:	aa02      	add	r2, sp, #8
    3e46:	2300      	movs	r3, #0
    3e48:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3e4c:	2102      	movs	r1, #2
    3e4e:	300a      	adds	r0, #10
    3e50:	4b02      	ldr	r3, [pc, #8]	; (3e5c <grid_msg_get_age+0x1c>)
    3e52:	4798      	blx	r3
	
}
    3e54:	b2c0      	uxtb	r0, r0
    3e56:	b003      	add	sp, #12
    3e58:	f85d fb04 	ldr.w	pc, [sp], #4
    3e5c:	00003ad1 	.word	0x00003ad1

00003e60 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3e60:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3e62:	460a      	mov	r2, r1
    3e64:	2102      	movs	r1, #2
    3e66:	3004      	adds	r0, #4
    3e68:	4b01      	ldr	r3, [pc, #4]	; (3e70 <grid_msg_set_id+0x10>)
    3e6a:	4798      	blx	r3
    3e6c:	bd08      	pop	{r3, pc}
    3e6e:	bf00      	nop
    3e70:	00003b11 	.word	0x00003b11

00003e74 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3e74:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3e76:	460a      	mov	r2, r1
    3e78:	2102      	movs	r1, #2
    3e7a:	3006      	adds	r0, #6
    3e7c:	4b01      	ldr	r3, [pc, #4]	; (3e84 <grid_msg_set_dx+0x10>)
    3e7e:	4798      	blx	r3
    3e80:	bd08      	pop	{r3, pc}
    3e82:	bf00      	nop
    3e84:	00003b11 	.word	0x00003b11

00003e88 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3e88:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3e8a:	460a      	mov	r2, r1
    3e8c:	2102      	movs	r1, #2
    3e8e:	3008      	adds	r0, #8
    3e90:	4b01      	ldr	r3, [pc, #4]	; (3e98 <grid_msg_set_dy+0x10>)
    3e92:	4798      	blx	r3
    3e94:	bd08      	pop	{r3, pc}
    3e96:	bf00      	nop
    3e98:	00003b11 	.word	0x00003b11

00003e9c <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3e9c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3e9e:	460a      	mov	r2, r1
    3ea0:	2102      	movs	r1, #2
    3ea2:	300a      	adds	r0, #10
    3ea4:	4b01      	ldr	r3, [pc, #4]	; (3eac <grid_msg_set_age+0x10>)
    3ea6:	4798      	blx	r3
    3ea8:	bd08      	pop	{r3, pc}
    3eaa:	bf00      	nop
    3eac:	00003b11 	.word	0x00003b11

00003eb0 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3eb0:	69c3      	ldr	r3, [r0, #28]
    3eb2:	4299      	cmp	r1, r3
    3eb4:	d00d      	beq.n	3ed2 <grid_msg_find_recent+0x22>
    3eb6:	2301      	movs	r3, #1
    3eb8:	f003 021f 	and.w	r2, r3, #31
    3ebc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3ec0:	69d2      	ldr	r2, [r2, #28]
    3ec2:	428a      	cmp	r2, r1
    3ec4:	d007      	beq.n	3ed6 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    3ec6:	3301      	adds	r3, #1
    3ec8:	b2db      	uxtb	r3, r3
    3eca:	2b20      	cmp	r3, #32
    3ecc:	d1f4      	bne.n	3eb8 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3ece:	2000      	movs	r0, #0
    3ed0:	4770      	bx	lr
			return 1;
    3ed2:	2001      	movs	r0, #1
    3ed4:	4770      	bx	lr
    3ed6:	2001      	movs	r0, #1
}
    3ed8:	4770      	bx	lr

00003eda <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3eda:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    3ede:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3ee0:	f003 031f 	and.w	r3, r3, #31
    3ee4:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3ee8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3eec:	61c1      	str	r1, [r0, #28]
    3eee:	4770      	bx	lr

00003ef0 <grid_ui_model_init>:
	
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3ef0:	b510      	push	{r4, lr}
    3ef2:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    3ef4:	2307      	movs	r3, #7
    3ef6:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    3ef8:	4419      	add	r1, r3
    3efa:	b2c8      	uxtb	r0, r1
    3efc:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    3efe:	0100      	lsls	r0, r0, #4
    3f00:	4b02      	ldr	r3, [pc, #8]	; (3f0c <grid_ui_model_init+0x1c>)
    3f02:	4798      	blx	r3
    3f04:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    3f06:	3070      	adds	r0, #112	; 0x70
    3f08:	60a0      	str	r0, [r4, #8]
		
}
    3f0a:	bd10      	pop	{r4, pc}
    3f0c:	0000c441 	.word	0x0000c441

00003f10 <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3f14:	4605      	mov	r5, r0
    3f16:	4698      	mov	r8, r3
    3f18:	9808      	ldr	r0, [sp, #32]
    3f1a:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    3f1c:	010c      	lsls	r4, r1, #4
    3f1e:	686b      	ldr	r3, [r5, #4]
    3f20:	2100      	movs	r1, #0
    3f22:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    3f24:	686b      	ldr	r3, [r5, #4]
    3f26:	4423      	add	r3, r4
    3f28:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    3f2a:	686b      	ldr	r3, [r5, #4]
    3f2c:	4423      	add	r3, r4
    3f2e:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    3f30:	686b      	ldr	r3, [r5, #4]
    3f32:	4423      	add	r3, r4
    3f34:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    3f38:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3f3a:	686b      	ldr	r3, [r5, #4]
    3f3c:	eb03 0904 	add.w	r9, r3, r4
    3f40:	4f1b      	ldr	r7, [pc, #108]	; (3fb0 <grid_report_init+0xa0>)
    3f42:	47b8      	blx	r7
    3f44:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3f48:	686b      	ldr	r3, [r5, #4]
    3f4a:	eb03 0904 	add.w	r9, r3, r4
    3f4e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3f50:	47b8      	blx	r7
    3f52:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3f56:	686a      	ldr	r2, [r5, #4]
    3f58:	4422      	add	r2, r4
    3f5a:	6853      	ldr	r3, [r2, #4]
    3f5c:	b30b      	cbz	r3, 3fa2 <grid_report_init+0x92>
    3f5e:	68d3      	ldr	r3, [r2, #12]
    3f60:	b313      	cbz	r3, 3fa8 <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3f62:	7893      	ldrb	r3, [r2, #2]
    3f64:	b15b      	cbz	r3, 3f7e <grid_report_init+0x6e>
    3f66:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3f68:	f818 1003 	ldrb.w	r1, [r8, r3]
    3f6c:	6852      	ldr	r2, [r2, #4]
    3f6e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3f70:	3301      	adds	r3, #1
    3f72:	b2db      	uxtb	r3, r3
    3f74:	686a      	ldr	r2, [r5, #4]
    3f76:	4422      	add	r2, r4
    3f78:	7891      	ldrb	r1, [r2, #2]
    3f7a:	4299      	cmp	r1, r3
    3f7c:	d8f4      	bhi.n	3f68 <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3f7e:	686a      	ldr	r2, [r5, #4]
    3f80:	4422      	add	r2, r4
    3f82:	7a10      	ldrb	r0, [r2, #8]
    3f84:	b188      	cbz	r0, 3faa <grid_report_init+0x9a>
    3f86:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3f88:	5cf1      	ldrb	r1, [r6, r3]
    3f8a:	68d2      	ldr	r2, [r2, #12]
    3f8c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3f8e:	3301      	adds	r3, #1
    3f90:	b2db      	uxtb	r3, r3
    3f92:	686a      	ldr	r2, [r5, #4]
    3f94:	4422      	add	r2, r4
    3f96:	7a11      	ldrb	r1, [r2, #8]
    3f98:	4299      	cmp	r1, r3
    3f9a:	d8f5      	bhi.n	3f88 <grid_report_init+0x78>
	}
	
	return 0;
    3f9c:	2000      	movs	r0, #0
    3f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    3fa2:	20ff      	movs	r0, #255	; 0xff
    3fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3fa8:	20ff      	movs	r0, #255	; 0xff
	
}
    3faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3fae:	bf00      	nop
    3fb0:	0000c441 	.word	0x0000c441

00003fb4 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3fb4:	b510      	push	{r4, lr}
    3fb6:	b084      	sub	sp, #16
	
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
    3fb8:	7844      	ldrb	r4, [r0, #1]
    3fba:	4421      	add	r1, r4
    3fbc:	9c08      	ldr	r4, [sp, #32]
    3fbe:	9402      	str	r4, [sp, #8]
    3fc0:	9c07      	ldr	r4, [sp, #28]
    3fc2:	9401      	str	r4, [sp, #4]
    3fc4:	9c06      	ldr	r4, [sp, #24]
    3fc6:	9400      	str	r4, [sp, #0]
    3fc8:	b2c9      	uxtb	r1, r1
    3fca:	4c02      	ldr	r4, [pc, #8]	; (3fd4 <grid_report_ui_init+0x20>)
    3fcc:	47a0      	blx	r4
}
    3fce:	b004      	add	sp, #16
    3fd0:	bd10      	pop	{r4, pc}
    3fd2:	bf00      	nop
    3fd4:	00003f11 	.word	0x00003f11

00003fd8 <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    3fd8:	7843      	ldrb	r3, [r0, #1]
    3fda:	2b00      	cmp	r3, #0
    3fdc:	f000 80e9 	beq.w	41b2 <grid_report_sys_init+0x1da>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    3fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3fe4:	b091      	sub	sp, #68	; 0x44
    3fe6:	4607      	mov	r7, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    3fe8:	2400      	movs	r4, #0
			
		uint8_t payload_template[30] = {0};
    3fea:	4625      	mov	r5, r4
			
			type = GRID_REPORT_TYPE_DIRECT_WEST;
			
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
			
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    3fec:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 41d8 <grid_report_sys_init+0x200>
    3ff0:	e047      	b.n	4082 <grid_report_sys_init+0xaa>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_BANK,	GRID_MSG_COMMAND_SYS_BANK_SELECT, 0, GRID_MSG_END_OF_TEXT);
    3ff2:	2303      	movs	r3, #3
    3ff4:	9303      	str	r3, [sp, #12]
    3ff6:	9502      	str	r5, [sp, #8]
    3ff8:	2365      	movs	r3, #101	; 0x65
    3ffa:	9301      	str	r3, [sp, #4]
    3ffc:	2364      	movs	r3, #100	; 0x64
    3ffe:	9300      	str	r3, [sp, #0]
    4000:	2304      	movs	r3, #4
    4002:	2202      	movs	r2, #2
    4004:	496b      	ldr	r1, [pc, #428]	; (41b4 <grid_report_sys_init+0x1dc>)
    4006:	a808      	add	r0, sp, #32
    4008:	4e6b      	ldr	r6, [pc, #428]	; (41b8 <grid_report_sys_init+0x1e0>)
    400a:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    400c:	2602      	movs	r6, #2
    400e:	e01d      	b.n	404c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_CFG, GRID_MSG_COMMAND_SYS_CFG_REQUEST, GRID_MSG_END_OF_TEXT);
    4010:	2603      	movs	r6, #3
    4012:	9602      	str	r6, [sp, #8]
    4014:	2369      	movs	r3, #105	; 0x69
    4016:	9301      	str	r3, [sp, #4]
    4018:	2368      	movs	r3, #104	; 0x68
    401a:	9300      	str	r3, [sp, #0]
    401c:	2304      	movs	r3, #4
    401e:	2202      	movs	r2, #2
    4020:	4966      	ldr	r1, [pc, #408]	; (41bc <grid_report_sys_init+0x1e4>)
    4022:	a808      	add	r0, sp, #32
    4024:	f8df 9190 	ldr.w	r9, [pc, #400]	; 41b8 <grid_report_sys_init+0x1e0>
    4028:	47c8      	blx	r9
    402a:	e00f      	b.n	404c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_HEARTBEAT, GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE, grid_sys_get_hwcfg(), GRID_MSG_END_OF_TEXT);
    402c:	4b64      	ldr	r3, [pc, #400]	; (41c0 <grid_report_sys_init+0x1e8>)
    402e:	4798      	blx	r3
    4030:	2303      	movs	r3, #3
    4032:	9303      	str	r3, [sp, #12]
    4034:	9002      	str	r0, [sp, #8]
    4036:	2367      	movs	r3, #103	; 0x67
    4038:	9301      	str	r3, [sp, #4]
    403a:	2366      	movs	r3, #102	; 0x66
    403c:	9300      	str	r3, [sp, #0]
    403e:	2304      	movs	r3, #4
    4040:	2202      	movs	r2, #2
    4042:	495c      	ldr	r1, [pc, #368]	; (41b4 <grid_report_sys_init+0x1dc>)
    4044:	a808      	add	r0, sp, #32
    4046:	4e5c      	ldr	r6, [pc, #368]	; (41b8 <grid_report_sys_init+0x1e0>)
    4048:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    404a:	2602      	movs	r6, #2
		}
		
		
		
				
		uint8_t payload_length = strlen(payload_template);
    404c:	a808      	add	r0, sp, #32
    404e:	47c0      	blx	r8

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    4050:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    4054:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    4058:	2302      	movs	r3, #2
    405a:	9302      	str	r3, [sp, #8]
    405c:	ab07      	add	r3, sp, #28
    405e:	9301      	str	r3, [sp, #4]
    4060:	b2c0      	uxtb	r0, r0
    4062:	9000      	str	r0, [sp, #0]
    4064:	ab08      	add	r3, sp, #32
    4066:	4632      	mov	r2, r6
    4068:	4621      	mov	r1, r4
    406a:	4638      	mov	r0, r7
    406c:	4e55      	ldr	r6, [pc, #340]	; (41c4 <grid_report_sys_init+0x1ec>)
    406e:	47b0      	blx	r6
		
		if (error != 0){
    4070:	2800      	cmp	r0, #0
    4072:	f040 809b 	bne.w	41ac <grid_report_sys_init+0x1d4>
	for(uint8_t i=0; i<mod->report_offset; i++){
    4076:	3401      	adds	r4, #1
    4078:	b2e4      	uxtb	r4, r4
    407a:	787b      	ldrb	r3, [r7, #1]
    407c:	42a3      	cmp	r3, r4
    407e:	f240 8095 	bls.w	41ac <grid_report_sys_init+0x1d4>
		uint8_t payload_template[30] = {0};
    4082:	221e      	movs	r2, #30
    4084:	4629      	mov	r1, r5
    4086:	a808      	add	r0, sp, #32
    4088:	4b4f      	ldr	r3, [pc, #316]	; (41c8 <grid_report_sys_init+0x1f0>)
    408a:	4798      	blx	r3
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE
    408c:	2c05      	cmp	r4, #5
    408e:	d0b0      	beq.n	3ff2 <grid_report_sys_init+0x1a>
		else if (i == GRID_REPORT_INDEX_CFG_REQUEST){ // CONFIGURATION REQUEST
    4090:	2c06      	cmp	r4, #6
    4092:	d0bd      	beq.n	4010 <grid_report_sys_init+0x38>
		else if (i == GRID_REPORT_INDEX_HEARTBEAT){ // HEARTBEAT
    4094:	2c00      	cmp	r4, #0
    4096:	d0c9      	beq.n	402c <grid_report_sys_init+0x54>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    4098:	2c01      	cmp	r4, #1
    409a:	d007      	beq.n	40ac <grid_report_sys_init+0xd4>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    409c:	2c02      	cmp	r4, #2
    409e:	d025      	beq.n	40ec <grid_report_sys_init+0x114>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    40a0:	2c03      	cmp	r4, #3
    40a2:	d043      	beq.n	412c <grid_report_sys_init+0x154>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    40a4:	2c04      	cmp	r4, #4
    40a6:	d061      	beq.n	416c <grid_report_sys_init+0x194>
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    40a8:	462e      	mov	r6, r5
    40aa:	e7cf      	b.n	404c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    40ac:	4b44      	ldr	r3, [pc, #272]	; (41c0 <grid_report_sys_init+0x1e8>)
    40ae:	4798      	blx	r3
    40b0:	2604      	movs	r6, #4
    40b2:	9605      	str	r6, [sp, #20]
    40b4:	23ff      	movs	r3, #255	; 0xff
    40b6:	9304      	str	r3, [sp, #16]
    40b8:	9303      	str	r3, [sp, #12]
    40ba:	9002      	str	r0, [sp, #8]
    40bc:	2311      	movs	r3, #17
    40be:	9301      	str	r3, [sp, #4]
    40c0:	2307      	movs	r3, #7
    40c2:	9300      	str	r3, [sp, #0]
    40c4:	230e      	movs	r3, #14
    40c6:	2201      	movs	r2, #1
    40c8:	4940      	ldr	r1, [pc, #256]	; (41cc <grid_report_sys_init+0x1f4>)
    40ca:	a808      	add	r0, sp, #32
    40cc:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 41b8 <grid_report_sys_init+0x1e0>
    40d0:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    40d2:	a808      	add	r0, sp, #32
    40d4:	47c0      	blx	r8
    40d6:	4681      	mov	r9, r0
    40d8:	4601      	mov	r1, r0
    40da:	a808      	add	r0, sp, #32
    40dc:	4b3c      	ldr	r3, [pc, #240]	; (41d0 <grid_report_sys_init+0x1f8>)
    40de:	4798      	blx	r3
    40e0:	4602      	mov	r2, r0
    40e2:	4649      	mov	r1, r9
    40e4:	a808      	add	r0, sp, #32
    40e6:	4b3b      	ldr	r3, [pc, #236]	; (41d4 <grid_report_sys_init+0x1fc>)
    40e8:	4798      	blx	r3
    40ea:	e7af      	b.n	404c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    40ec:	4b34      	ldr	r3, [pc, #208]	; (41c0 <grid_report_sys_init+0x1e8>)
    40ee:	4798      	blx	r3
    40f0:	2304      	movs	r3, #4
    40f2:	9305      	str	r3, [sp, #20]
    40f4:	23ff      	movs	r3, #255	; 0xff
    40f6:	9304      	str	r3, [sp, #16]
    40f8:	9303      	str	r3, [sp, #12]
    40fa:	9002      	str	r0, [sp, #8]
    40fc:	2312      	movs	r3, #18
    40fe:	9301      	str	r3, [sp, #4]
    4100:	2307      	movs	r3, #7
    4102:	9300      	str	r3, [sp, #0]
    4104:	230e      	movs	r3, #14
    4106:	2201      	movs	r2, #1
    4108:	4930      	ldr	r1, [pc, #192]	; (41cc <grid_report_sys_init+0x1f4>)
    410a:	a808      	add	r0, sp, #32
    410c:	4e2a      	ldr	r6, [pc, #168]	; (41b8 <grid_report_sys_init+0x1e0>)
    410e:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4110:	a808      	add	r0, sp, #32
    4112:	47c0      	blx	r8
    4114:	4606      	mov	r6, r0
    4116:	4601      	mov	r1, r0
    4118:	a808      	add	r0, sp, #32
    411a:	4b2d      	ldr	r3, [pc, #180]	; (41d0 <grid_report_sys_init+0x1f8>)
    411c:	4798      	blx	r3
    411e:	4602      	mov	r2, r0
    4120:	4631      	mov	r1, r6
    4122:	a808      	add	r0, sp, #32
    4124:	4b2b      	ldr	r3, [pc, #172]	; (41d4 <grid_report_sys_init+0x1fc>)
    4126:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    4128:	2605      	movs	r6, #5
    412a:	e78f      	b.n	404c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    412c:	4b24      	ldr	r3, [pc, #144]	; (41c0 <grid_report_sys_init+0x1e8>)
    412e:	4798      	blx	r3
    4130:	2304      	movs	r3, #4
    4132:	9305      	str	r3, [sp, #20]
    4134:	23ff      	movs	r3, #255	; 0xff
    4136:	9304      	str	r3, [sp, #16]
    4138:	9303      	str	r3, [sp, #12]
    413a:	9002      	str	r0, [sp, #8]
    413c:	2313      	movs	r3, #19
    413e:	9301      	str	r3, [sp, #4]
    4140:	2307      	movs	r3, #7
    4142:	9300      	str	r3, [sp, #0]
    4144:	230e      	movs	r3, #14
    4146:	2201      	movs	r2, #1
    4148:	4920      	ldr	r1, [pc, #128]	; (41cc <grid_report_sys_init+0x1f4>)
    414a:	a808      	add	r0, sp, #32
    414c:	4e1a      	ldr	r6, [pc, #104]	; (41b8 <grid_report_sys_init+0x1e0>)
    414e:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4150:	a808      	add	r0, sp, #32
    4152:	47c0      	blx	r8
    4154:	4606      	mov	r6, r0
    4156:	4601      	mov	r1, r0
    4158:	a808      	add	r0, sp, #32
    415a:	4b1d      	ldr	r3, [pc, #116]	; (41d0 <grid_report_sys_init+0x1f8>)
    415c:	4798      	blx	r3
    415e:	4602      	mov	r2, r0
    4160:	4631      	mov	r1, r6
    4162:	a808      	add	r0, sp, #32
    4164:	4b1b      	ldr	r3, [pc, #108]	; (41d4 <grid_report_sys_init+0x1fc>)
    4166:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    4168:	2606      	movs	r6, #6
    416a:	e76f      	b.n	404c <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    416c:	4b14      	ldr	r3, [pc, #80]	; (41c0 <grid_report_sys_init+0x1e8>)
    416e:	4798      	blx	r3
    4170:	2304      	movs	r3, #4
    4172:	9305      	str	r3, [sp, #20]
    4174:	23ff      	movs	r3, #255	; 0xff
    4176:	9304      	str	r3, [sp, #16]
    4178:	9303      	str	r3, [sp, #12]
    417a:	9002      	str	r0, [sp, #8]
    417c:	2314      	movs	r3, #20
    417e:	9301      	str	r3, [sp, #4]
    4180:	2607      	movs	r6, #7
    4182:	9600      	str	r6, [sp, #0]
    4184:	230e      	movs	r3, #14
    4186:	2201      	movs	r2, #1
    4188:	4910      	ldr	r1, [pc, #64]	; (41cc <grid_report_sys_init+0x1f4>)
    418a:	a808      	add	r0, sp, #32
    418c:	f8df 9028 	ldr.w	r9, [pc, #40]	; 41b8 <grid_report_sys_init+0x1e0>
    4190:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    4192:	a808      	add	r0, sp, #32
    4194:	47c0      	blx	r8
    4196:	4681      	mov	r9, r0
    4198:	4601      	mov	r1, r0
    419a:	a808      	add	r0, sp, #32
    419c:	4b0c      	ldr	r3, [pc, #48]	; (41d0 <grid_report_sys_init+0x1f8>)
    419e:	4798      	blx	r3
    41a0:	4602      	mov	r2, r0
    41a2:	4649      	mov	r1, r9
    41a4:	a808      	add	r0, sp, #32
    41a6:	4b0b      	ldr	r3, [pc, #44]	; (41d4 <grid_report_sys_init+0x1fc>)
    41a8:	4798      	blx	r3
    41aa:	e74f      	b.n	404c <grid_report_sys_init+0x74>
			}
			
		}
	
	}
}
    41ac:	b011      	add	sp, #68	; 0x44
    41ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    41b2:	4770      	bx	lr
    41b4:	0000db28 	.word	0x0000db28
    41b8:	0000c855 	.word	0x0000c855
    41bc:	0000db40 	.word	0x0000db40
    41c0:	00003b49 	.word	0x00003b49
    41c4:	00003f11 	.word	0x00003f11
    41c8:	0000c467 	.word	0x0000c467
    41cc:	0000db54 	.word	0x0000db54
    41d0:	00003d91 	.word	0x00003d91
    41d4:	00003dcd 	.word	0x00003dcd
    41d8:	0000c89d 	.word	0x0000c89d

000041dc <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    41dc:	6843      	ldr	r3, [r0, #4]
    41de:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    41e2:	7888      	ldrb	r0, [r1, #2]
    41e4:	b140      	cbz	r0, 41f8 <grid_report_render+0x1c>
    41e6:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    41e8:	6848      	ldr	r0, [r1, #4]
    41ea:	5cc0      	ldrb	r0, [r0, r3]
    41ec:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    41ee:	3301      	adds	r3, #1
    41f0:	b2db      	uxtb	r3, r3
    41f2:	7888      	ldrb	r0, [r1, #2]
    41f4:	4298      	cmp	r0, r3
    41f6:	d8f7      	bhi.n	41e8 <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    41f8:	4770      	bx	lr

000041fa <grid_report_ui_get_changed_flag>:

// UI REPORT FLAGS

uint8_t grid_report_ui_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index+mod->report_offset].changed;
    41fa:	7843      	ldrb	r3, [r0, #1]
    41fc:	4419      	add	r1, r3
    41fe:	6843      	ldr	r3, [r0, #4]
    4200:	0109      	lsls	r1, r1, #4
}
    4202:	5c58      	ldrb	r0, [r3, r1]
    4204:	4770      	bx	lr

00004206 <grid_report_ui_set_changed_flag>:

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    4206:	7843      	ldrb	r3, [r0, #1]
    4208:	4419      	add	r1, r3
    420a:	6843      	ldr	r3, [r0, #4]
    420c:	0109      	lsls	r1, r1, #4
    420e:	2201      	movs	r2, #1
    4210:	545a      	strb	r2, [r3, r1]
    4212:	4770      	bx	lr

00004214 <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    4214:	6843      	ldr	r3, [r0, #4]
    4216:	0109      	lsls	r1, r1, #4
    4218:	2201      	movs	r2, #1
    421a:	545a      	strb	r2, [r3, r1]
    421c:	4770      	bx	lr

0000421e <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    421e:	6843      	ldr	r3, [r0, #4]
    4220:	0109      	lsls	r1, r1, #4
    4222:	2200      	movs	r2, #0
    4224:	545a      	strb	r2, [r3, r1]
    4226:	4770      	bx	lr

00004228 <grid_port_process_ui>:
	if (por->cooldown > 15){
    4228:	6803      	ldr	r3, [r0, #0]
    422a:	2b0f      	cmp	r3, #15
    422c:	d812      	bhi.n	4254 <grid_port_process_ui+0x2c>
	else if (por->cooldown>0){
    422e:	b10b      	cbz	r3, 4234 <grid_port_process_ui+0xc>
		por->cooldown--;
    4230:	3b01      	subs	r3, #1
    4232:	6003      	str	r3, [r0, #0]
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4234:	4b84      	ldr	r3, [pc, #528]	; (4448 <grid_port_process_ui+0x220>)
    4236:	781b      	ldrb	r3, [r3, #0]
    4238:	2b00      	cmp	r3, #0
    423a:	f000 821f 	beq.w	467c <grid_port_process_ui+0x454>
void grid_port_process_ui(struct grid_port* por){
    423e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4242:	b0cd      	sub	sp, #308	; 0x134
	return mod->report_array[index].changed;
    4244:	4b80      	ldr	r3, [pc, #512]	; (4448 <grid_port_process_ui+0x220>)
    4246:	6859      	ldr	r1, [r3, #4]
    4248:	2300      	movs	r3, #0
    424a:	469e      	mov	lr, r3
    424c:	461c      	mov	r4, r3
    424e:	461e      	mov	r6, r3
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4250:	4f7d      	ldr	r7, [pc, #500]	; (4448 <grid_port_process_ui+0x220>)
    4252:	e014      	b.n	427e <grid_port_process_ui+0x56>
		por->cooldown--;
    4254:	3b01      	subs	r3, #1
    4256:	6003      	str	r3, [r0, #0]
		return;
    4258:	4770      	bx	lr
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    425a:	f10e 0e01 	add.w	lr, lr, #1
    425e:	fa5f fe8e 	uxtb.w	lr, lr
			(type == GRID_REPORT_TYPE_DIRECT_EAST)?message_direct_available++:1;
    4262:	2a05      	cmp	r2, #5
    4264:	d120      	bne.n	42a8 <grid_port_process_ui+0x80>
    4266:	3401      	adds	r4, #1
    4268:	b2e4      	uxtb	r4, r4
			(type == GRID_REPORT_TYPE_LOCAL)?message_local_available++:1;
    426a:	2a01      	cmp	r2, #1
    426c:	bf04      	itt	eq
    426e:	3601      	addeq	r6, #1
    4270:	b2f6      	uxtbeq	r6, r6
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4272:	3301      	adds	r3, #1
    4274:	b2db      	uxtb	r3, r3
    4276:	783a      	ldrb	r2, [r7, #0]
    4278:	b2d2      	uxtb	r2, r2
    427a:	429a      	cmp	r2, r3
    427c:	d919      	bls.n	42b2 <grid_port_process_ui+0x8a>
	return mod->report_array[index].changed;
    427e:	011a      	lsls	r2, r3, #4
    4280:	188d      	adds	r5, r1, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    4282:	5c8a      	ldrb	r2, [r1, r2]
    4284:	2a00      	cmp	r2, #0
    4286:	d0f4      	beq.n	4272 <grid_port_process_ui+0x4a>
	return mod->report_array[index].type;
    4288:	786a      	ldrb	r2, [r5, #1]
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    428a:	2a02      	cmp	r2, #2
    428c:	d0e5      	beq.n	425a <grid_port_process_ui+0x32>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    428e:	2a03      	cmp	r2, #3
    4290:	d008      	beq.n	42a4 <grid_port_process_ui+0x7c>
			(type == GRID_REPORT_TYPE_DIRECT_NORTH)?message_direct_available++:1;
    4292:	2a04      	cmp	r2, #4
    4294:	d1e5      	bne.n	4262 <grid_port_process_ui+0x3a>
    4296:	3401      	adds	r4, #1
    4298:	b2e4      	uxtb	r4, r4
			(type == GRID_REPORT_TYPE_DIRECT_WEST)?message_direct_available++:1;
    429a:	2a07      	cmp	r2, #7
    429c:	d1e5      	bne.n	426a <grid_port_process_ui+0x42>
    429e:	3401      	adds	r4, #1
    42a0:	b2e4      	uxtb	r4, r4
    42a2:	e7e6      	b.n	4272 <grid_port_process_ui+0x4a>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    42a4:	3401      	adds	r4, #1
    42a6:	b2e4      	uxtb	r4, r4
			(type == GRID_REPORT_TYPE_DIRECT_SOUTH)?message_direct_available++:1;
    42a8:	2a06      	cmp	r2, #6
    42aa:	d1f6      	bne.n	429a <grid_port_process_ui+0x72>
    42ac:	3401      	adds	r4, #1
    42ae:	b2e4      	uxtb	r4, r4
    42b0:	e7df      	b.n	4272 <grid_port_process_ui+0x4a>
    42b2:	9006      	str	r0, [sp, #24]
	if (message_direct_available){
    42b4:	2c00      	cmp	r4, #0
    42b6:	d069      	beq.n	438c <grid_port_process_ui+0x164>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    42b8:	4b63      	ldr	r3, [pc, #396]	; (4448 <grid_port_process_ui+0x220>)
    42ba:	781b      	ldrb	r3, [r3, #0]
    42bc:	2b00      	cmp	r3, #0
    42be:	d06b      	beq.n	4398 <grid_port_process_ui+0x170>
    42c0:	2600      	movs	r6, #0
	return mod->report_array[index].changed;
    42c2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4448 <grid_port_process_ui+0x220>
				uint8_t message[256] = {0};
    42c6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 446c <grid_port_process_ui+0x244>
				CRITICAL_SECTION_ENTER()			
    42ca:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 4480 <grid_port_process_ui+0x258>
    42ce:	e00e      	b.n	42ee <grid_port_process_ui+0xc6>
					target_buffer = &GRID_PORT_U.rx_buffer;
    42d0:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 447c <grid_port_process_ui+0x254>
				if (grid_buffer_write_init(target_buffer, length)){
    42d4:	b2a9      	uxth	r1, r5
    42d6:	4658      	mov	r0, fp
    42d8:	4b5c      	ldr	r3, [pc, #368]	; (444c <grid_port_process_ui+0x224>)
    42da:	4798      	blx	r3
    42dc:	2800      	cmp	r0, #0
    42de:	d13f      	bne.n	4360 <grid_port_process_ui+0x138>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    42e0:	3601      	adds	r6, #1
    42e2:	b2f6      	uxtb	r6, r6
    42e4:	f898 3000 	ldrb.w	r3, [r8]
    42e8:	b2db      	uxtb	r3, r3
    42ea:	42b3      	cmp	r3, r6
    42ec:	d954      	bls.n	4398 <grid_port_process_ui+0x170>
	return mod->report_array[index].changed;
    42ee:	0134      	lsls	r4, r6, #4
    42f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    42f4:	191a      	adds	r2, r3, r4
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_ALL || type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    42f6:	5d1b      	ldrb	r3, [r3, r4]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d0f1      	beq.n	42e0 <grid_port_process_ui+0xb8>
    42fc:	7853      	ldrb	r3, [r2, #1]
    42fe:	3b03      	subs	r3, #3
    4300:	b2db      	uxtb	r3, r3
    4302:	2b04      	cmp	r3, #4
    4304:	d8ec      	bhi.n	42e0 <grid_port_process_ui+0xb8>
				uint8_t message[256] = {0};
    4306:	f44f 7280 	mov.w	r2, #256	; 0x100
    430a:	2100      	movs	r1, #0
    430c:	a80c      	add	r0, sp, #48	; 0x30
    430e:	47d0      	blx	sl
				CRITICAL_SECTION_ENTER()			
    4310:	a80a      	add	r0, sp, #40	; 0x28
    4312:	47c8      	blx	r9
				grid_report_render(mod, i, &message[length]);
    4314:	aa0c      	add	r2, sp, #48	; 0x30
    4316:	4631      	mov	r1, r6
    4318:	4640      	mov	r0, r8
    431a:	4b4d      	ldr	r3, [pc, #308]	; (4450 <grid_port_process_ui+0x228>)
    431c:	4798      	blx	r3
				length += strlen(&message[length]);
    431e:	a80c      	add	r0, sp, #48	; 0x30
    4320:	4b4c      	ldr	r3, [pc, #304]	; (4454 <grid_port_process_ui+0x22c>)
    4322:	4798      	blx	r3
    4324:	4605      	mov	r5, r0
				CRITICAL_SECTION_LEAVE()			
    4326:	a80a      	add	r0, sp, #40	; 0x28
    4328:	4b4b      	ldr	r3, [pc, #300]	; (4458 <grid_port_process_ui+0x230>)
    432a:	4798      	blx	r3
	return mod->report_array[index].type;
    432c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4330:	441c      	add	r4, r3
    4332:	7863      	ldrb	r3, [r4, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_ALL){
    4334:	2b03      	cmp	r3, #3
    4336:	d0cb      	beq.n	42d0 <grid_port_process_ui+0xa8>
				else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    4338:	2b04      	cmp	r3, #4
    433a:	d008      	beq.n	434e <grid_port_process_ui+0x126>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    433c:	2b05      	cmp	r3, #5
    433e:	d009      	beq.n	4354 <grid_port_process_ui+0x12c>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    4340:	2b06      	cmp	r3, #6
    4342:	d00a      	beq.n	435a <grid_port_process_ui+0x132>
					target_buffer = &GRID_PORT_W.tx_buffer;
    4344:	4a45      	ldr	r2, [pc, #276]	; (445c <grid_port_process_ui+0x234>)
    4346:	2b07      	cmp	r3, #7
    4348:	bf08      	it	eq
    434a:	4693      	moveq	fp, r2
    434c:	e7c2      	b.n	42d4 <grid_port_process_ui+0xac>
					target_buffer = &GRID_PORT_N.tx_buffer;
    434e:	f8df b134 	ldr.w	fp, [pc, #308]	; 4484 <grid_port_process_ui+0x25c>
    4352:	e7bf      	b.n	42d4 <grid_port_process_ui+0xac>
					target_buffer = &GRID_PORT_E.tx_buffer;
    4354:	f8df b130 	ldr.w	fp, [pc, #304]	; 4488 <grid_port_process_ui+0x260>
    4358:	e7bc      	b.n	42d4 <grid_port_process_ui+0xac>
					target_buffer = &GRID_PORT_S.tx_buffer;
    435a:	f8df b130 	ldr.w	fp, [pc, #304]	; 448c <grid_port_process_ui+0x264>
    435e:	e7b9      	b.n	42d4 <grid_port_process_ui+0xac>
					grid_report_sys_clear_changed_flag(mod, i);
    4360:	4631      	mov	r1, r6
    4362:	4640      	mov	r0, r8
    4364:	4b3e      	ldr	r3, [pc, #248]	; (4460 <grid_port_process_ui+0x238>)
    4366:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    4368:	b165      	cbz	r5, 4384 <grid_port_process_ui+0x15c>
    436a:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
    436e:	ab4c      	add	r3, sp, #304	; 0x130
    4370:	441d      	add	r5, r3
    4372:	f2a5 1501 	subw	r5, r5, #257	; 0x101
						grid_buffer_write_character(target_buffer, message[i]);
    4376:	4f3b      	ldr	r7, [pc, #236]	; (4464 <grid_port_process_ui+0x23c>)
    4378:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    437c:	4658      	mov	r0, fp
    437e:	47b8      	blx	r7
					for(uint32_t i = 0; i<length; i++){
    4380:	42ac      	cmp	r4, r5
    4382:	d1f9      	bne.n	4378 <grid_port_process_ui+0x150>
					grid_buffer_write_acknowledge(target_buffer);
    4384:	4658      	mov	r0, fp
    4386:	4b38      	ldr	r3, [pc, #224]	; (4468 <grid_port_process_ui+0x240>)
    4388:	4798      	blx	r3
    438a:	e7a9      	b.n	42e0 <grid_port_process_ui+0xb8>
	if (message_broadcast_available){
    438c:	f1be 0f00 	cmp.w	lr, #0
    4390:	d105      	bne.n	439e <grid_port_process_ui+0x176>
	if (message_local_available){
    4392:	2e00      	cmp	r6, #0
    4394:	f040 80d1 	bne.w	453a <grid_port_process_ui+0x312>
}
    4398:	b04d      	add	sp, #308	; 0x134
    439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t message[256] = {0};
    439e:	f44f 7280 	mov.w	r2, #256	; 0x100
    43a2:	2100      	movs	r1, #0
    43a4:	a80c      	add	r0, sp, #48	; 0x30
    43a6:	4b31      	ldr	r3, [pc, #196]	; (446c <grid_port_process_ui+0x244>)
    43a8:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    43aa:	4b31      	ldr	r3, [pc, #196]	; (4470 <grid_port_process_ui+0x248>)
    43ac:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    43b0:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    43b2:	2117      	movs	r1, #23
    43b4:	9105      	str	r1, [sp, #20]
    43b6:	9304      	str	r3, [sp, #16]
    43b8:	237f      	movs	r3, #127	; 0x7f
    43ba:	9303      	str	r3, [sp, #12]
    43bc:	9302      	str	r3, [sp, #8]
    43be:	9201      	str	r2, [sp, #4]
    43c0:	2300      	movs	r3, #0
    43c2:	9300      	str	r3, [sp, #0]
    43c4:	230f      	movs	r3, #15
    43c6:	2201      	movs	r2, #1
    43c8:	492a      	ldr	r1, [pc, #168]	; (4474 <grid_port_process_ui+0x24c>)
    43ca:	a80c      	add	r0, sp, #48	; 0x30
    43cc:	4d2a      	ldr	r5, [pc, #168]	; (4478 <grid_port_process_ui+0x250>)
    43ce:	47a8      	blx	r5
		length += strlen(&message[length]);
    43d0:	a80c      	add	r0, sp, #48	; 0x30
    43d2:	4b20      	ldr	r3, [pc, #128]	; (4454 <grid_port_process_ui+0x22c>)
    43d4:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    43d6:	4b1c      	ldr	r3, [pc, #112]	; (4448 <grid_port_process_ui+0x220>)
    43d8:	781b      	ldrb	r3, [r3, #0]
    43da:	2b00      	cmp	r3, #0
    43dc:	d0d9      	beq.n	4392 <grid_port_process_ui+0x16a>
    43de:	4625      	mov	r5, r4
    43e0:	4627      	mov	r7, r4
    43e2:	4680      	mov	r8, r0
			CRITICAL_SECTION_ENTER()
    43e4:	f8df b098 	ldr.w	fp, [pc, #152]	; 4480 <grid_port_process_ui+0x258>
	return mod->report_array[index].changed;
    43e8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 4448 <grid_port_process_ui+0x220>
			CRITICAL_SECTION_LEAVE()
    43ec:	f8df a068 	ldr.w	sl, [pc, #104]	; 4458 <grid_port_process_ui+0x230>
    43f0:	e008      	b.n	4404 <grid_port_process_ui+0x1dc>
    43f2:	a808      	add	r0, sp, #32
    43f4:	47d0      	blx	sl
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    43f6:	3501      	adds	r5, #1
    43f8:	b2ed      	uxtb	r5, r5
    43fa:	f899 3000 	ldrb.w	r3, [r9]
    43fe:	b2db      	uxtb	r3, r3
    4400:	42ab      	cmp	r3, r5
    4402:	d945      	bls.n	4490 <grid_port_process_ui+0x268>
			if (length>200){
    4404:	f1b8 0fc8 	cmp.w	r8, #200	; 0xc8
    4408:	d8f5      	bhi.n	43f6 <grid_port_process_ui+0x1ce>
			CRITICAL_SECTION_ENTER()
    440a:	a808      	add	r0, sp, #32
    440c:	47d8      	blx	fp
	return mod->report_array[index].changed;
    440e:	012b      	lsls	r3, r5, #4
    4410:	f8d9 2004 	ldr.w	r2, [r9, #4]
    4414:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_BROADCAST){
    4416:	5cd3      	ldrb	r3, [r2, r3]
    4418:	2b00      	cmp	r3, #0
    441a:	d0ea      	beq.n	43f2 <grid_port_process_ui+0x1ca>
    441c:	784b      	ldrb	r3, [r1, #1]
    441e:	2b02      	cmp	r3, #2
    4420:	d1e7      	bne.n	43f2 <grid_port_process_ui+0x1ca>
				packetvalid++;
    4422:	3701      	adds	r7, #1
    4424:	b2ff      	uxtb	r7, r7
				grid_report_render(mod, i, &message[length]);
    4426:	ab0c      	add	r3, sp, #48	; 0x30
    4428:	4443      	add	r3, r8
    442a:	9307      	str	r3, [sp, #28]
    442c:	461a      	mov	r2, r3
    442e:	4629      	mov	r1, r5
    4430:	4648      	mov	r0, r9
    4432:	4b07      	ldr	r3, [pc, #28]	; (4450 <grid_port_process_ui+0x228>)
    4434:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    4436:	4629      	mov	r1, r5
    4438:	4648      	mov	r0, r9
    443a:	4b09      	ldr	r3, [pc, #36]	; (4460 <grid_port_process_ui+0x238>)
    443c:	4798      	blx	r3
				length += strlen(&message[length]);
    443e:	9807      	ldr	r0, [sp, #28]
    4440:	4b04      	ldr	r3, [pc, #16]	; (4454 <grid_port_process_ui+0x22c>)
    4442:	4798      	blx	r3
    4444:	4480      	add	r8, r0
    4446:	e7d4      	b.n	43f2 <grid_port_process_ui+0x1ca>
    4448:	20003300 	.word	0x20003300
    444c:	00001375 	.word	0x00001375
    4450:	000041dd 	.word	0x000041dd
    4454:	0000c89d 	.word	0x0000c89d
    4458:	00004a77 	.word	0x00004a77
    445c:	20004790 	.word	0x20004790
    4460:	0000421f 	.word	0x0000421f
    4464:	000013a5 	.word	0x000013a5
    4468:	000013c1 	.word	0x000013c1
    446c:	0000c467 	.word	0x0000c467
    4470:	20003310 	.word	0x20003310
    4474:	0000db70 	.word	0x0000db70
    4478:	0000c855 	.word	0x0000c855
    447c:	200032e0 	.word	0x200032e0
    4480:	00004a69 	.word	0x00004a69
    4484:	2000227c 	.word	0x2000227c
    4488:	200077c0 	.word	0x200077c0
    448c:	200057ac 	.word	0x200057ac
		if (packetvalid){
    4490:	2f00      	cmp	r7, #0
    4492:	f43f af7e 	beq.w	4392 <grid_port_process_ui+0x16a>
			por->cooldown += (10+por->cooldown);
    4496:	9a06      	ldr	r2, [sp, #24]
    4498:	6813      	ldr	r3, [r2, #0]
    449a:	005b      	lsls	r3, r3, #1
    449c:	330a      	adds	r3, #10
    449e:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    44a0:	4a77      	ldr	r2, [pc, #476]	; (4680 <grid_port_process_ui+0x458>)
    44a2:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    44a6:	3301      	adds	r3, #1
    44a8:	b2db      	uxtb	r3, r3
    44aa:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    44ae:	ad0c      	add	r5, sp, #48	; 0x30
    44b0:	eb05 0908 	add.w	r9, r5, r8
    44b4:	2204      	movs	r2, #4
    44b6:	4973      	ldr	r1, [pc, #460]	; (4684 <grid_port_process_ui+0x45c>)
    44b8:	4648      	mov	r0, r9
    44ba:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 46b4 <grid_port_process_ui+0x48c>
    44be:	47d0      	blx	sl
			length += strlen(&message[length]);
    44c0:	4648      	mov	r0, r9
    44c2:	4f71      	ldr	r7, [pc, #452]	; (4688 <grid_port_process_ui+0x460>)
    44c4:	47b8      	blx	r7
    44c6:	4480      	add	r8, r0
			sprintf(length_string, "%02x", length);
    44c8:	4642      	mov	r2, r8
    44ca:	4970      	ldr	r1, [pc, #448]	; (468c <grid_port_process_ui+0x464>)
    44cc:	a80a      	add	r0, sp, #40	; 0x28
    44ce:	47d0      	blx	sl
			message[2] = length_string[0];
    44d0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    44d4:	70ab      	strb	r3, [r5, #2]
			message[3] = length_string[1];
    44d6:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    44da:	70eb      	strb	r3, [r5, #3]
			sprintf(&message[length], "00\n");
    44dc:	4b6c      	ldr	r3, [pc, #432]	; (4690 <grid_port_process_ui+0x468>)
    44de:	6818      	ldr	r0, [r3, #0]
    44e0:	f845 0008 	str.w	r0, [r5, r8]
			length += strlen(&message[length]);
    44e4:	eb05 0008 	add.w	r0, r5, r8
    44e8:	47b8      	blx	r7
    44ea:	4480      	add	r8, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    44ec:	4641      	mov	r1, r8
    44ee:	4628      	mov	r0, r5
    44f0:	4b68      	ldr	r3, [pc, #416]	; (4694 <grid_port_process_ui+0x46c>)
    44f2:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    44f4:	4602      	mov	r2, r0
    44f6:	4641      	mov	r1, r8
    44f8:	4628      	mov	r0, r5
    44fa:	4b67      	ldr	r3, [pc, #412]	; (4698 <grid_port_process_ui+0x470>)
    44fc:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    44fe:	fa1f f188 	uxth.w	r1, r8
    4502:	4866      	ldr	r0, [pc, #408]	; (469c <grid_port_process_ui+0x474>)
    4504:	4b66      	ldr	r3, [pc, #408]	; (46a0 <grid_port_process_ui+0x478>)
    4506:	4798      	blx	r3
    4508:	2800      	cmp	r0, #0
    450a:	f43f af42 	beq.w	4392 <grid_port_process_ui+0x16a>
				for(uint32_t i = 0; i<length; i++){
    450e:	f1b8 0f00 	cmp.w	r8, #0
    4512:	d00e      	beq.n	4532 <grid_port_process_ui+0x30a>
    4514:	f10d 052f 	add.w	r5, sp, #47	; 0x2f
    4518:	ab4c      	add	r3, sp, #304	; 0x130
    451a:	4498      	add	r8, r3
    451c:	f2a8 1801 	subw	r8, r8, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    4520:	f8df a178 	ldr.w	sl, [pc, #376]	; 469c <grid_port_process_ui+0x474>
    4524:	4f5f      	ldr	r7, [pc, #380]	; (46a4 <grid_port_process_ui+0x47c>)
    4526:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    452a:	4650      	mov	r0, sl
    452c:	47b8      	blx	r7
				for(uint32_t i = 0; i<length; i++){
    452e:	4545      	cmp	r5, r8
    4530:	d1f9      	bne.n	4526 <grid_port_process_ui+0x2fe>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    4532:	485a      	ldr	r0, [pc, #360]	; (469c <grid_port_process_ui+0x474>)
    4534:	4b5c      	ldr	r3, [pc, #368]	; (46a8 <grid_port_process_ui+0x480>)
    4536:	4798      	blx	r3
    4538:	e72b      	b.n	4392 <grid_port_process_ui+0x16a>
		uint8_t message[256] = {0};
    453a:	f44f 7280 	mov.w	r2, #256	; 0x100
    453e:	2100      	movs	r1, #0
    4540:	a80c      	add	r0, sp, #48	; 0x30
    4542:	4b5a      	ldr	r3, [pc, #360]	; (46ac <grid_port_process_ui+0x484>)
    4544:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    4546:	4b4e      	ldr	r3, [pc, #312]	; (4680 <grid_port_process_ui+0x458>)
    4548:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    454c:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    454e:	2117      	movs	r1, #23
    4550:	9105      	str	r1, [sp, #20]
    4552:	9304      	str	r3, [sp, #16]
    4554:	237f      	movs	r3, #127	; 0x7f
    4556:	9303      	str	r3, [sp, #12]
    4558:	9302      	str	r3, [sp, #8]
    455a:	9201      	str	r2, [sp, #4]
    455c:	2300      	movs	r3, #0
    455e:	9300      	str	r3, [sp, #0]
    4560:	230f      	movs	r3, #15
    4562:	2201      	movs	r2, #1
    4564:	4952      	ldr	r1, [pc, #328]	; (46b0 <grid_port_process_ui+0x488>)
    4566:	a80c      	add	r0, sp, #48	; 0x30
    4568:	4d52      	ldr	r5, [pc, #328]	; (46b4 <grid_port_process_ui+0x48c>)
    456a:	47a8      	blx	r5
		length += strlen(&message[length]);
    456c:	a80c      	add	r0, sp, #48	; 0x30
    456e:	4b46      	ldr	r3, [pc, #280]	; (4688 <grid_port_process_ui+0x460>)
    4570:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4572:	4b51      	ldr	r3, [pc, #324]	; (46b8 <grid_port_process_ui+0x490>)
    4574:	781b      	ldrb	r3, [r3, #0]
    4576:	2b00      	cmp	r3, #0
    4578:	f43f af0e 	beq.w	4398 <grid_port_process_ui+0x170>
    457c:	4625      	mov	r5, r4
    457e:	4606      	mov	r6, r0
			CRITICAL_SECTION_ENTER()
    4580:	f8df a144 	ldr.w	sl, [pc, #324]	; 46c8 <grid_port_process_ui+0x4a0>
	return mod->report_array[index].changed;
    4584:	f8df 8130 	ldr.w	r8, [pc, #304]	; 46b8 <grid_port_process_ui+0x490>
			CRITICAL_SECTION_LEAVE()
    4588:	f8df 9140 	ldr.w	r9, [pc, #320]	; 46cc <grid_port_process_ui+0x4a4>
    458c:	e008      	b.n	45a0 <grid_port_process_ui+0x378>
    458e:	a809      	add	r0, sp, #36	; 0x24
    4590:	47c8      	blx	r9
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4592:	3501      	adds	r5, #1
    4594:	b2ed      	uxtb	r5, r5
    4596:	f898 3000 	ldrb.w	r3, [r8]
    459a:	b2db      	uxtb	r3, r3
    459c:	42ab      	cmp	r3, r5
    459e:	d91f      	bls.n	45e0 <grid_port_process_ui+0x3b8>
			if (length>200){
    45a0:	2ec8      	cmp	r6, #200	; 0xc8
    45a2:	d8f6      	bhi.n	4592 <grid_port_process_ui+0x36a>
			CRITICAL_SECTION_ENTER()
    45a4:	a809      	add	r0, sp, #36	; 0x24
    45a6:	47d0      	blx	sl
	return mod->report_array[index].changed;
    45a8:	012b      	lsls	r3, r5, #4
    45aa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    45ae:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_LOCAL){
    45b0:	5cd3      	ldrb	r3, [r2, r3]
    45b2:	2b00      	cmp	r3, #0
    45b4:	d0eb      	beq.n	458e <grid_port_process_ui+0x366>
    45b6:	784b      	ldrb	r3, [r1, #1]
    45b8:	2b01      	cmp	r3, #1
    45ba:	d1e8      	bne.n	458e <grid_port_process_ui+0x366>
				packetvalid++;
    45bc:	3401      	adds	r4, #1
    45be:	b2e4      	uxtb	r4, r4
				grid_report_render(mod, i, &message[length]);
    45c0:	ab0c      	add	r3, sp, #48	; 0x30
    45c2:	199f      	adds	r7, r3, r6
    45c4:	463a      	mov	r2, r7
    45c6:	4629      	mov	r1, r5
    45c8:	4640      	mov	r0, r8
    45ca:	4b3c      	ldr	r3, [pc, #240]	; (46bc <grid_port_process_ui+0x494>)
    45cc:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    45ce:	4629      	mov	r1, r5
    45d0:	4640      	mov	r0, r8
    45d2:	4b3b      	ldr	r3, [pc, #236]	; (46c0 <grid_port_process_ui+0x498>)
    45d4:	4798      	blx	r3
				length += strlen(&message[length]);
    45d6:	4638      	mov	r0, r7
    45d8:	4b2b      	ldr	r3, [pc, #172]	; (4688 <grid_port_process_ui+0x460>)
    45da:	4798      	blx	r3
    45dc:	4406      	add	r6, r0
    45de:	e7d6      	b.n	458e <grid_port_process_ui+0x366>
		if (packetvalid){
    45e0:	2c00      	cmp	r4, #0
    45e2:	f43f aed9 	beq.w	4398 <grid_port_process_ui+0x170>
			por->cooldown += (10+por->cooldown);
    45e6:	9a06      	ldr	r2, [sp, #24]
    45e8:	6813      	ldr	r3, [r2, #0]
    45ea:	005b      	lsls	r3, r3, #1
    45ec:	330a      	adds	r3, #10
    45ee:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    45f0:	4a23      	ldr	r2, [pc, #140]	; (4680 <grid_port_process_ui+0x458>)
    45f2:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    45f6:	3301      	adds	r3, #1
    45f8:	b2db      	uxtb	r3, r3
    45fa:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    45fe:	ac0c      	add	r4, sp, #48	; 0x30
    4600:	19a5      	adds	r5, r4, r6
    4602:	2204      	movs	r2, #4
    4604:	491f      	ldr	r1, [pc, #124]	; (4684 <grid_port_process_ui+0x45c>)
    4606:	4628      	mov	r0, r5
    4608:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 46b4 <grid_port_process_ui+0x48c>
    460c:	47c0      	blx	r8
			length += strlen(&message[length]);
    460e:	4628      	mov	r0, r5
    4610:	4f1d      	ldr	r7, [pc, #116]	; (4688 <grid_port_process_ui+0x460>)
    4612:	47b8      	blx	r7
    4614:	1835      	adds	r5, r6, r0
			sprintf(length_string, "%02x", length);
    4616:	462a      	mov	r2, r5
    4618:	491c      	ldr	r1, [pc, #112]	; (468c <grid_port_process_ui+0x464>)
    461a:	a80a      	add	r0, sp, #40	; 0x28
    461c:	47c0      	blx	r8
			message[2] = length_string[0];
    461e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4622:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    4624:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    4628:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    462a:	4b19      	ldr	r3, [pc, #100]	; (4690 <grid_port_process_ui+0x468>)
    462c:	6818      	ldr	r0, [r3, #0]
    462e:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    4630:	1960      	adds	r0, r4, r5
    4632:	47b8      	blx	r7
    4634:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    4636:	4629      	mov	r1, r5
    4638:	4620      	mov	r0, r4
    463a:	4b16      	ldr	r3, [pc, #88]	; (4694 <grid_port_process_ui+0x46c>)
    463c:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    463e:	4602      	mov	r2, r0
    4640:	4629      	mov	r1, r5
    4642:	4620      	mov	r0, r4
    4644:	4b14      	ldr	r3, [pc, #80]	; (4698 <grid_port_process_ui+0x470>)
    4646:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, length)){
    4648:	b2a9      	uxth	r1, r5
    464a:	481e      	ldr	r0, [pc, #120]	; (46c4 <grid_port_process_ui+0x49c>)
    464c:	4b14      	ldr	r3, [pc, #80]	; (46a0 <grid_port_process_ui+0x478>)
    464e:	4798      	blx	r3
    4650:	2800      	cmp	r0, #0
    4652:	f43f aea1 	beq.w	4398 <grid_port_process_ui+0x170>
				for(uint32_t i = 0; i<length; i++){
    4656:	b16d      	cbz	r5, 4674 <grid_port_process_ui+0x44c>
    4658:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
    465c:	ab4c      	add	r3, sp, #304	; 0x130
    465e:	441d      	add	r5, r3
    4660:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.tx_buffer, message[i]);
    4664:	4f17      	ldr	r7, [pc, #92]	; (46c4 <grid_port_process_ui+0x49c>)
    4666:	4e0f      	ldr	r6, [pc, #60]	; (46a4 <grid_port_process_ui+0x47c>)
    4668:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    466c:	4638      	mov	r0, r7
    466e:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    4670:	42ac      	cmp	r4, r5
    4672:	d1f9      	bne.n	4668 <grid_port_process_ui+0x440>
				grid_buffer_write_acknowledge(&GRID_PORT_U.tx_buffer);
    4674:	4813      	ldr	r0, [pc, #76]	; (46c4 <grid_port_process_ui+0x49c>)
    4676:	4b0c      	ldr	r3, [pc, #48]	; (46a8 <grid_port_process_ui+0x480>)
    4678:	4798      	blx	r3
    467a:	e68d      	b.n	4398 <grid_port_process_ui+0x170>
    467c:	4770      	bx	lr
    467e:	bf00      	nop
    4680:	20003310 	.word	0x20003310
    4684:	0000db88 	.word	0x0000db88
    4688:	0000c89d 	.word	0x0000c89d
    468c:	0000db8c 	.word	0x0000db8c
    4690:	0000db94 	.word	0x0000db94
    4694:	00003d91 	.word	0x00003d91
    4698:	00003dcd 	.word	0x00003dcd
    469c:	200032e0 	.word	0x200032e0
    46a0:	00001375 	.word	0x00001375
    46a4:	000013a5 	.word	0x000013a5
    46a8:	000013c1 	.word	0x000013c1
    46ac:	0000c467 	.word	0x0000c467
    46b0:	0000db70 	.word	0x0000db70
    46b4:	0000c855 	.word	0x0000c855
    46b8:	20003300 	.word	0x20003300
    46bc:	000041dd 	.word	0x000041dd
    46c0:	0000421f 	.word	0x0000421f
    46c4:	200032c8 	.word	0x200032c8
    46c8:	00004a69 	.word	0x00004a69
    46cc:	00004a77 	.word	0x00004a77

000046d0 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    46d0:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    46d2:	6983      	ldr	r3, [r0, #24]
    46d4:	b103      	cbz	r3, 46d8 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    46d6:	4798      	blx	r3
    46d8:	bd08      	pop	{r3, pc}

000046da <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    46da:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    46dc:	69c3      	ldr	r3, [r0, #28]
    46de:	b103      	cbz	r3, 46e2 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    46e0:	4798      	blx	r3
    46e2:	bd08      	pop	{r3, pc}

000046e4 <adc_async_channel_conversion_done>:
{
    46e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    46e8:	4606      	mov	r6, r0
    46ea:	460f      	mov	r7, r1
    46ec:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    46ee:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    46f0:	5c5c      	ldrb	r4, [r3, r1]
    46f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    46f6:	00e4      	lsls	r4, r4, #3
    46f8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    46fc:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    4700:	f105 0a04 	add.w	sl, r5, #4
    4704:	b2d1      	uxtb	r1, r2
    4706:	4650      	mov	r0, sl
    4708:	4b0c      	ldr	r3, [pc, #48]	; (473c <adc_async_channel_conversion_done+0x58>)
    470a:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    470c:	4630      	mov	r0, r6
    470e:	4b0c      	ldr	r3, [pc, #48]	; (4740 <adc_async_channel_conversion_done+0x5c>)
    4710:	4798      	blx	r3
    4712:	2801      	cmp	r0, #1
    4714:	d907      	bls.n	4726 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    4716:	ea4f 2119 	mov.w	r1, r9, lsr #8
    471a:	4650      	mov	r0, sl
    471c:	4b07      	ldr	r3, [pc, #28]	; (473c <adc_async_channel_conversion_done+0x58>)
    471e:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    4720:	8aab      	ldrh	r3, [r5, #20]
    4722:	3301      	adds	r3, #1
    4724:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    4726:	8aab      	ldrh	r3, [r5, #20]
    4728:	3301      	adds	r3, #1
    472a:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    472c:	f858 3004 	ldr.w	r3, [r8, r4]
    4730:	b113      	cbz	r3, 4738 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    4732:	4639      	mov	r1, r7
    4734:	4630      	mov	r0, r6
    4736:	4798      	blx	r3
    4738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    473c:	00005f99 	.word	0x00005f99
    4740:	00006337 	.word	0x00006337

00004744 <adc_async_init>:
{
    4744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4748:	4689      	mov	r9, r1
    474a:	4616      	mov	r6, r2
    474c:	461c      	mov	r4, r3
    474e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    4752:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    4754:	4607      	mov	r7, r0
    4756:	b140      	cbz	r0, 476a <adc_async_init+0x26>
    4758:	b149      	cbz	r1, 476e <adc_async_init+0x2a>
    475a:	b152      	cbz	r2, 4772 <adc_async_init+0x2e>
    475c:	f1b8 0f00 	cmp.w	r8, #0
    4760:	d009      	beq.n	4776 <adc_async_init+0x32>
    4762:	1c28      	adds	r0, r5, #0
    4764:	bf18      	it	ne
    4766:	2001      	movne	r0, #1
    4768:	e006      	b.n	4778 <adc_async_init+0x34>
    476a:	2000      	movs	r0, #0
    476c:	e004      	b.n	4778 <adc_async_init+0x34>
    476e:	2000      	movs	r0, #0
    4770:	e002      	b.n	4778 <adc_async_init+0x34>
    4772:	2000      	movs	r0, #0
    4774:	e000      	b.n	4778 <adc_async_init+0x34>
    4776:	2000      	movs	r0, #0
    4778:	f8df b064 	ldr.w	fp, [pc, #100]	; 47e0 <adc_async_init+0x9c>
    477c:	223f      	movs	r2, #63	; 0x3f
    477e:	4659      	mov	r1, fp
    4780:	f8df a060 	ldr.w	sl, [pc, #96]	; 47e4 <adc_async_init+0xa0>
    4784:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    4786:	1c60      	adds	r0, r4, #1
    4788:	2240      	movs	r2, #64	; 0x40
    478a:	4659      	mov	r1, fp
    478c:	4580      	cmp	r8, r0
    478e:	bfcc      	ite	gt
    4790:	2000      	movgt	r0, #0
    4792:	2001      	movle	r0, #1
    4794:	47d0      	blx	sl
	device = &descr->device;
    4796:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    4798:	21ff      	movs	r1, #255	; 0xff
    479a:	b2da      	uxtb	r2, r3
    479c:	54b1      	strb	r1, [r6, r2]
    479e:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    47a0:	b2da      	uxtb	r2, r3
    47a2:	42a2      	cmp	r2, r4
    47a4:	d9f9      	bls.n	479a <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    47a6:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    47a8:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    47ac:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    47b0:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    47b2:	4649      	mov	r1, r9
    47b4:	4638      	mov	r0, r7
    47b6:	4b06      	ldr	r3, [pc, #24]	; (47d0 <adc_async_init+0x8c>)
    47b8:	4798      	blx	r3
	if (init_status) {
    47ba:	4603      	mov	r3, r0
    47bc:	b928      	cbnz	r0, 47ca <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    47be:	4a05      	ldr	r2, [pc, #20]	; (47d4 <adc_async_init+0x90>)
    47c0:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    47c2:	4a05      	ldr	r2, [pc, #20]	; (47d8 <adc_async_init+0x94>)
    47c4:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    47c6:	4a05      	ldr	r2, [pc, #20]	; (47dc <adc_async_init+0x98>)
    47c8:	607a      	str	r2, [r7, #4]
}
    47ca:	4618      	mov	r0, r3
    47cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47d0:	00006205 	.word	0x00006205
    47d4:	000046e5 	.word	0x000046e5
    47d8:	000046d1 	.word	0x000046d1
    47dc:	000046db 	.word	0x000046db
    47e0:	0000db98 	.word	0x0000db98
    47e4:	00005e5d 	.word	0x00005e5d

000047e8 <adc_async_register_channel_buffer>:
{
    47e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    47ec:	460e      	mov	r6, r1
    47ee:	4617      	mov	r7, r2
    47f0:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    47f2:	4605      	mov	r5, r0
    47f4:	2800      	cmp	r0, #0
    47f6:	d040      	beq.n	487a <adc_async_register_channel_buffer+0x92>
    47f8:	2a00      	cmp	r2, #0
    47fa:	d040      	beq.n	487e <adc_async_register_channel_buffer+0x96>
    47fc:	1c18      	adds	r0, r3, #0
    47fe:	bf18      	it	ne
    4800:	2001      	movne	r0, #1
    4802:	f8df 9098 	ldr.w	r9, [pc, #152]	; 489c <adc_async_register_channel_buffer+0xb4>
    4806:	2266      	movs	r2, #102	; 0x66
    4808:	4649      	mov	r1, r9
    480a:	4c22      	ldr	r4, [pc, #136]	; (4894 <adc_async_register_channel_buffer+0xac>)
    480c:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    480e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4812:	2267      	movs	r2, #103	; 0x67
    4814:	4649      	mov	r1, r9
    4816:	42b0      	cmp	r0, r6
    4818:	bf34      	ite	cc
    481a:	2000      	movcc	r0, #0
    481c:	2001      	movcs	r0, #1
    481e:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    4820:	6a29      	ldr	r1, [r5, #32]
    4822:	5d8b      	ldrb	r3, [r1, r6]
    4824:	2bff      	cmp	r3, #255	; 0xff
    4826:	d12c      	bne.n	4882 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    4828:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    482c:	2300      	movs	r3, #0
    482e:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    4830:	b2da      	uxtb	r2, r3
    4832:	5c8a      	ldrb	r2, [r1, r2]
    4834:	2aff      	cmp	r2, #255	; 0xff
			index++;
    4836:	bf1c      	itt	ne
    4838:	3401      	addne	r4, #1
    483a:	b2e4      	uxtbne	r4, r4
    483c:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    483e:	b2da      	uxtb	r2, r3
    4840:	4282      	cmp	r2, r0
    4842:	d9f5      	bls.n	4830 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    4844:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4848:	42a3      	cmp	r3, r4
    484a:	d31d      	bcc.n	4888 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    484c:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    4850:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    4854:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4856:	4448      	add	r0, r9
    4858:	4642      	mov	r2, r8
    485a:	4639      	mov	r1, r7
    485c:	3004      	adds	r0, #4
    485e:	4b0e      	ldr	r3, [pc, #56]	; (4898 <adc_async_register_channel_buffer+0xb0>)
    4860:	4798      	blx	r3
    4862:	4602      	mov	r2, r0
    4864:	b998      	cbnz	r0, 488e <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    4866:	6a2b      	ldr	r3, [r5, #32]
    4868:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    486a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    486c:	4499      	add	r9, r3
    486e:	2300      	movs	r3, #0
    4870:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    4874:	4610      	mov	r0, r2
    4876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    487a:	2000      	movs	r0, #0
    487c:	e7c1      	b.n	4802 <adc_async_register_channel_buffer+0x1a>
    487e:	2000      	movs	r0, #0
    4880:	e7bf      	b.n	4802 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    4882:	f06f 020c 	mvn.w	r2, #12
    4886:	e7f5      	b.n	4874 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    4888:	f06f 021b 	mvn.w	r2, #27
    488c:	e7f2      	b.n	4874 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    488e:	f06f 020c 	mvn.w	r2, #12
    4892:	e7ef      	b.n	4874 <adc_async_register_channel_buffer+0x8c>
    4894:	00005e5d 	.word	0x00005e5d
    4898:	00005f05 	.word	0x00005f05
    489c:	0000db98 	.word	0x0000db98

000048a0 <adc_async_enable_channel>:
{
    48a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48a2:	460d      	mov	r5, r1
	ASSERT(descr);
    48a4:	4f0b      	ldr	r7, [pc, #44]	; (48d4 <adc_async_enable_channel+0x34>)
    48a6:	4604      	mov	r4, r0
    48a8:	2283      	movs	r2, #131	; 0x83
    48aa:	4639      	mov	r1, r7
    48ac:	3000      	adds	r0, #0
    48ae:	bf18      	it	ne
    48b0:	2001      	movne	r0, #1
    48b2:	4e09      	ldr	r6, [pc, #36]	; (48d8 <adc_async_enable_channel+0x38>)
    48b4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    48b6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    48ba:	2284      	movs	r2, #132	; 0x84
    48bc:	4639      	mov	r1, r7
    48be:	42a8      	cmp	r0, r5
    48c0:	bf34      	ite	cc
    48c2:	2000      	movcc	r0, #0
    48c4:	2001      	movcs	r0, #1
    48c6:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    48c8:	4629      	mov	r1, r5
    48ca:	4620      	mov	r0, r4
    48cc:	4b03      	ldr	r3, [pc, #12]	; (48dc <adc_async_enable_channel+0x3c>)
    48ce:	4798      	blx	r3
}
    48d0:	2000      	movs	r0, #0
    48d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48d4:	0000db98 	.word	0x0000db98
    48d8:	00005e5d 	.word	0x00005e5d
    48dc:	00006321 	.word	0x00006321

000048e0 <adc_async_register_callback>:
{
    48e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    48e4:	460e      	mov	r6, r1
    48e6:	4614      	mov	r4, r2
    48e8:	4699      	mov	r9, r3
	ASSERT(descr);
    48ea:	f8df 8070 	ldr.w	r8, [pc, #112]	; 495c <adc_async_register_callback+0x7c>
    48ee:	4605      	mov	r5, r0
    48f0:	229c      	movs	r2, #156	; 0x9c
    48f2:	4641      	mov	r1, r8
    48f4:	3000      	adds	r0, #0
    48f6:	bf18      	it	ne
    48f8:	2001      	movne	r0, #1
    48fa:	4f16      	ldr	r7, [pc, #88]	; (4954 <adc_async_register_callback+0x74>)
    48fc:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    48fe:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4902:	229d      	movs	r2, #157	; 0x9d
    4904:	4641      	mov	r1, r8
    4906:	42b0      	cmp	r0, r6
    4908:	bf34      	ite	cc
    490a:	2000      	movcc	r0, #0
    490c:	2001      	movcs	r0, #1
    490e:	47b8      	blx	r7
	switch (type) {
    4910:	2c01      	cmp	r4, #1
    4912:	d019      	beq.n	4948 <adc_async_register_callback+0x68>
    4914:	b12c      	cbz	r4, 4922 <adc_async_register_callback+0x42>
    4916:	2c02      	cmp	r4, #2
    4918:	d019      	beq.n	494e <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    491a:	f06f 000c 	mvn.w	r0, #12
}
    491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    4922:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4924:	5d9b      	ldrb	r3, [r3, r6]
    4926:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    492c:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    4930:	f119 0300 	adds.w	r3, r9, #0
    4934:	bf18      	it	ne
    4936:	2301      	movne	r3, #1
    4938:	4622      	mov	r2, r4
    493a:	4631      	mov	r1, r6
    493c:	4628      	mov	r0, r5
    493e:	4c06      	ldr	r4, [pc, #24]	; (4958 <adc_async_register_callback+0x78>)
    4940:	47a0      	blx	r4
	return ERR_NONE;
    4942:	2000      	movs	r0, #0
    4944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    4948:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    494c:	e7f0      	b.n	4930 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    494e:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    4952:	e7ed      	b.n	4930 <adc_async_register_callback+0x50>
    4954:	00005e5d 	.word	0x00005e5d
    4958:	0000635f 	.word	0x0000635f
    495c:	0000db98 	.word	0x0000db98

00004960 <adc_async_read_channel>:
{
    4960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4964:	b083      	sub	sp, #12
    4966:	4688      	mov	r8, r1
    4968:	4691      	mov	r9, r2
    496a:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    496c:	4604      	mov	r4, r0
    496e:	2800      	cmp	r0, #0
    4970:	d04f      	beq.n	4a12 <adc_async_read_channel+0xb2>
    4972:	2a00      	cmp	r2, #0
    4974:	d04f      	beq.n	4a16 <adc_async_read_channel+0xb6>
    4976:	1c18      	adds	r0, r3, #0
    4978:	bf18      	it	ne
    497a:	2001      	movne	r0, #1
    497c:	4f29      	ldr	r7, [pc, #164]	; (4a24 <adc_async_read_channel+0xc4>)
    497e:	22bc      	movs	r2, #188	; 0xbc
    4980:	4639      	mov	r1, r7
    4982:	4e29      	ldr	r6, [pc, #164]	; (4a28 <adc_async_read_channel+0xc8>)
    4984:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    4986:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    498a:	22bd      	movs	r2, #189	; 0xbd
    498c:	4639      	mov	r1, r7
    498e:	4540      	cmp	r0, r8
    4990:	bf34      	ite	cc
    4992:	2000      	movcc	r0, #0
    4994:	2001      	movcs	r0, #1
    4996:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    4998:	4620      	mov	r0, r4
    499a:	4b24      	ldr	r3, [pc, #144]	; (4a2c <adc_async_read_channel+0xcc>)
    499c:	4798      	blx	r3
	ASSERT(!(length % data_size));
    499e:	fb95 f3f0 	sdiv	r3, r5, r0
    49a2:	fb03 5010 	mls	r0, r3, r0, r5
    49a6:	22bf      	movs	r2, #191	; 0xbf
    49a8:	4639      	mov	r1, r7
    49aa:	fab0 f080 	clz	r0, r0
    49ae:	0940      	lsrs	r0, r0, #5
    49b0:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    49b2:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    49b4:	f813 b008 	ldrb.w	fp, [r3, r8]
    49b8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    49bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    49be:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    49c2:	a801      	add	r0, sp, #4
    49c4:	4b1a      	ldr	r3, [pc, #104]	; (4a30 <adc_async_read_channel+0xd0>)
    49c6:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    49c8:	f10b 0a04 	add.w	sl, fp, #4
    49cc:	4650      	mov	r0, sl
    49ce:	4b19      	ldr	r3, [pc, #100]	; (4a34 <adc_async_read_channel+0xd4>)
    49d0:	4798      	blx	r3
    49d2:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    49d4:	a801      	add	r0, sp, #4
    49d6:	4b18      	ldr	r3, [pc, #96]	; (4a38 <adc_async_read_channel+0xd8>)
    49d8:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    49da:	f1b8 0f00 	cmp.w	r8, #0
    49de:	d01c      	beq.n	4a1a <adc_async_read_channel+0xba>
    49e0:	b1ed      	cbz	r5, 4a1e <adc_async_read_channel+0xbe>
    49e2:	3d01      	subs	r5, #1
    49e4:	b2ad      	uxth	r5, r5
    49e6:	3502      	adds	r5, #2
    49e8:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    49ea:	4f14      	ldr	r7, [pc, #80]	; (4a3c <adc_async_read_channel+0xdc>)
    49ec:	b2a6      	uxth	r6, r4
    49ee:	1e61      	subs	r1, r4, #1
    49f0:	4449      	add	r1, r9
    49f2:	4650      	mov	r0, sl
    49f4:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    49f6:	4544      	cmp	r4, r8
    49f8:	d002      	beq.n	4a00 <adc_async_read_channel+0xa0>
    49fa:	3401      	adds	r4, #1
    49fc:	42ac      	cmp	r4, r5
    49fe:	d1f5      	bne.n	49ec <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4a00:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4a04:	1b9b      	subs	r3, r3, r6
    4a06:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    4a0a:	4630      	mov	r0, r6
    4a0c:	b003      	add	sp, #12
    4a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4a12:	2000      	movs	r0, #0
    4a14:	e7b2      	b.n	497c <adc_async_read_channel+0x1c>
    4a16:	2000      	movs	r0, #0
    4a18:	e7b0      	b.n	497c <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    4a1a:	2600      	movs	r6, #0
    4a1c:	e7f0      	b.n	4a00 <adc_async_read_channel+0xa0>
    4a1e:	2600      	movs	r6, #0
    4a20:	e7ee      	b.n	4a00 <adc_async_read_channel+0xa0>
    4a22:	bf00      	nop
    4a24:	0000db98 	.word	0x0000db98
    4a28:	00005e5d 	.word	0x00005e5d
    4a2c:	00006337 	.word	0x00006337
    4a30:	00004a69 	.word	0x00004a69
    4a34:	00005fd9 	.word	0x00005fd9
    4a38:	00004a77 	.word	0x00004a77
    4a3c:	00005f55 	.word	0x00005f55

00004a40 <adc_async_start_conversion>:
{
    4a40:	b510      	push	{r4, lr}
	ASSERT(descr);
    4a42:	4604      	mov	r4, r0
    4a44:	22d6      	movs	r2, #214	; 0xd6
    4a46:	4905      	ldr	r1, [pc, #20]	; (4a5c <adc_async_start_conversion+0x1c>)
    4a48:	3000      	adds	r0, #0
    4a4a:	bf18      	it	ne
    4a4c:	2001      	movne	r0, #1
    4a4e:	4b04      	ldr	r3, [pc, #16]	; (4a60 <adc_async_start_conversion+0x20>)
    4a50:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    4a52:	4620      	mov	r0, r4
    4a54:	4b03      	ldr	r3, [pc, #12]	; (4a64 <adc_async_start_conversion+0x24>)
    4a56:	4798      	blx	r3
}
    4a58:	2000      	movs	r0, #0
    4a5a:	bd10      	pop	{r4, pc}
    4a5c:	0000db98 	.word	0x0000db98
    4a60:	00005e5d 	.word	0x00005e5d
    4a64:	00006349 	.word	0x00006349

00004a68 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4a68:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4a6c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4a6e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4a70:	f3bf 8f5f 	dmb	sy
    4a74:	4770      	bx	lr

00004a76 <atomic_leave_critical>:
    4a76:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    4a7a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4a7c:	f383 8810 	msr	PRIMASK, r3
    4a80:	4770      	bx	lr
	...

00004a84 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4a84:	b538      	push	{r3, r4, r5, lr}
    4a86:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    4a88:	4605      	mov	r5, r0
    4a8a:	b158      	cbz	r0, 4aa4 <crc_sync_init+0x20>
    4a8c:	1c08      	adds	r0, r1, #0
    4a8e:	bf18      	it	ne
    4a90:	2001      	movne	r0, #1
    4a92:	222b      	movs	r2, #43	; 0x2b
    4a94:	4904      	ldr	r1, [pc, #16]	; (4aa8 <crc_sync_init+0x24>)
    4a96:	4b05      	ldr	r3, [pc, #20]	; (4aac <crc_sync_init+0x28>)
    4a98:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4a9a:	4621      	mov	r1, r4
    4a9c:	4628      	mov	r0, r5
    4a9e:	4b04      	ldr	r3, [pc, #16]	; (4ab0 <crc_sync_init+0x2c>)
    4aa0:	4798      	blx	r3
}
    4aa2:	bd38      	pop	{r3, r4, r5, pc}
    4aa4:	2000      	movs	r0, #0
    4aa6:	e7f4      	b.n	4a92 <crc_sync_init+0xe>
    4aa8:	0000dbb4 	.word	0x0000dbb4
    4aac:	00005e5d 	.word	0x00005e5d
    4ab0:	00006749 	.word	0x00006749

00004ab4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    4ab4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    4ab6:	4b02      	ldr	r3, [pc, #8]	; (4ac0 <delay_init+0xc>)
    4ab8:	6018      	str	r0, [r3, #0]
    4aba:	4b02      	ldr	r3, [pc, #8]	; (4ac4 <delay_init+0x10>)
    4abc:	4798      	blx	r3
    4abe:	bd08      	pop	{r3, pc}
    4ac0:	20000648 	.word	0x20000648
    4ac4:	00008149 	.word	0x00008149

00004ac8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4ac8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4aca:	4b04      	ldr	r3, [pc, #16]	; (4adc <delay_us+0x14>)
    4acc:	681c      	ldr	r4, [r3, #0]
    4ace:	4b04      	ldr	r3, [pc, #16]	; (4ae0 <delay_us+0x18>)
    4ad0:	4798      	blx	r3
    4ad2:	4601      	mov	r1, r0
    4ad4:	4620      	mov	r0, r4
    4ad6:	4b03      	ldr	r3, [pc, #12]	; (4ae4 <delay_us+0x1c>)
    4ad8:	4798      	blx	r3
    4ada:	bd10      	pop	{r4, pc}
    4adc:	20000648 	.word	0x20000648
    4ae0:	0000640d 	.word	0x0000640d
    4ae4:	0000815d 	.word	0x0000815d

00004ae8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4ae8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4aea:	4b04      	ldr	r3, [pc, #16]	; (4afc <delay_ms+0x14>)
    4aec:	681c      	ldr	r4, [r3, #0]
    4aee:	4b04      	ldr	r3, [pc, #16]	; (4b00 <delay_ms+0x18>)
    4af0:	4798      	blx	r3
    4af2:	4601      	mov	r1, r0
    4af4:	4620      	mov	r0, r4
    4af6:	4b03      	ldr	r3, [pc, #12]	; (4b04 <delay_ms+0x1c>)
    4af8:	4798      	blx	r3
    4afa:	bd10      	pop	{r4, pc}
    4afc:	20000648 	.word	0x20000648
    4b00:	00006415 	.word	0x00006415
    4b04:	0000815d 	.word	0x0000815d

00004b08 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4b08:	b508      	push	{r3, lr}
	return _event_system_init();
    4b0a:	4b01      	ldr	r3, [pc, #4]	; (4b10 <event_system_init+0x8>)
    4b0c:	4798      	blx	r3
}
    4b0e:	bd08      	pop	{r3, pc}
    4b10:	00006751 	.word	0x00006751

00004b14 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4b14:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    4b16:	6943      	ldr	r3, [r0, #20]
    4b18:	b103      	cbz	r3, 4b1c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    4b1a:	4798      	blx	r3
    4b1c:	bd08      	pop	{r3, pc}

00004b1e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    4b1e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4b20:	6983      	ldr	r3, [r0, #24]
    4b22:	b103      	cbz	r3, 4b26 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4b24:	4798      	blx	r3
    4b26:	bd08      	pop	{r3, pc}

00004b28 <flash_init>:
{
    4b28:	b538      	push	{r3, r4, r5, lr}
    4b2a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4b2c:	4604      	mov	r4, r0
    4b2e:	b190      	cbz	r0, 4b56 <flash_init+0x2e>
    4b30:	1c08      	adds	r0, r1, #0
    4b32:	bf18      	it	ne
    4b34:	2001      	movne	r0, #1
    4b36:	2238      	movs	r2, #56	; 0x38
    4b38:	4908      	ldr	r1, [pc, #32]	; (4b5c <flash_init+0x34>)
    4b3a:	4b09      	ldr	r3, [pc, #36]	; (4b60 <flash_init+0x38>)
    4b3c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    4b3e:	4629      	mov	r1, r5
    4b40:	4620      	mov	r0, r4
    4b42:	4b08      	ldr	r3, [pc, #32]	; (4b64 <flash_init+0x3c>)
    4b44:	4798      	blx	r3
	if (rc) {
    4b46:	4603      	mov	r3, r0
    4b48:	b918      	cbnz	r0, 4b52 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    4b4a:	4a07      	ldr	r2, [pc, #28]	; (4b68 <flash_init+0x40>)
    4b4c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    4b4e:	4a07      	ldr	r2, [pc, #28]	; (4b6c <flash_init+0x44>)
    4b50:	6062      	str	r2, [r4, #4]
}
    4b52:	4618      	mov	r0, r3
    4b54:	bd38      	pop	{r3, r4, r5, pc}
    4b56:	2000      	movs	r0, #0
    4b58:	e7ed      	b.n	4b36 <flash_init+0xe>
    4b5a:	bf00      	nop
    4b5c:	0000dbd0 	.word	0x0000dbd0
    4b60:	00005e5d 	.word	0x00005e5d
    4b64:	0000685d 	.word	0x0000685d
    4b68:	00004b15 	.word	0x00004b15
    4b6c:	00004b1f 	.word	0x00004b1f

00004b70 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4b70:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4b72:	8843      	ldrh	r3, [r0, #2]
    4b74:	f413 7f80 	tst.w	r3, #256	; 0x100
    4b78:	d102      	bne.n	4b80 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    4b7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4b7c:	b103      	cbz	r3, 4b80 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    4b7e:	4798      	blx	r3
    4b80:	bd08      	pop	{r3, pc}

00004b82 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4b82:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4b84:	8843      	ldrh	r3, [r0, #2]
    4b86:	f413 7f80 	tst.w	r3, #256	; 0x100
    4b8a:	d102      	bne.n	4b92 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    4b8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4b8e:	b103      	cbz	r3, 4b92 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    4b90:	4798      	blx	r3
    4b92:	bd08      	pop	{r3, pc}

00004b94 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4b94:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4b96:	8843      	ldrh	r3, [r0, #2]
    4b98:	f413 7f80 	tst.w	r3, #256	; 0x100
    4b9c:	d102      	bne.n	4ba4 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    4b9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4ba0:	b103      	cbz	r3, 4ba4 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    4ba2:	4798      	blx	r3
    4ba4:	bd08      	pop	{r3, pc}
	...

00004ba8 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4ba8:	b510      	push	{r4, lr}
    4baa:	b084      	sub	sp, #16
    4bac:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4bae:	8a83      	ldrh	r3, [r0, #20]
    4bb0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4bb4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    4bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4bba:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    4bbe:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4bc0:	a901      	add	r1, sp, #4
    4bc2:	3828      	subs	r0, #40	; 0x28
    4bc4:	4b03      	ldr	r3, [pc, #12]	; (4bd4 <i2c_m_async_write+0x2c>)
    4bc6:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    4bc8:	2800      	cmp	r0, #0
    4bca:	bf08      	it	eq
    4bcc:	4620      	moveq	r0, r4
    4bce:	b004      	add	sp, #16
    4bd0:	bd10      	pop	{r4, pc}
    4bd2:	bf00      	nop
    4bd4:	00007699 	.word	0x00007699

00004bd8 <i2c_m_async_read>:
{
    4bd8:	b510      	push	{r4, lr}
    4bda:	b084      	sub	sp, #16
    4bdc:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    4bde:	8a83      	ldrh	r3, [r0, #20]
    4be0:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4be4:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4be6:	f248 0301 	movw	r3, #32769	; 0x8001
    4bea:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    4bee:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4bf0:	a901      	add	r1, sp, #4
    4bf2:	3828      	subs	r0, #40	; 0x28
    4bf4:	4b03      	ldr	r3, [pc, #12]	; (4c04 <i2c_m_async_read+0x2c>)
    4bf6:	4798      	blx	r3
}
    4bf8:	2800      	cmp	r0, #0
    4bfa:	bf08      	it	eq
    4bfc:	4620      	moveq	r0, r4
    4bfe:	b004      	add	sp, #16
    4c00:	bd10      	pop	{r4, pc}
    4c02:	bf00      	nop
    4c04:	00007699 	.word	0x00007699

00004c08 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4c08:	b570      	push	{r4, r5, r6, lr}
    4c0a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4c0c:	4604      	mov	r4, r0
    4c0e:	2289      	movs	r2, #137	; 0x89
    4c10:	490f      	ldr	r1, [pc, #60]	; (4c50 <i2c_m_async_init+0x48>)
    4c12:	3000      	adds	r0, #0
    4c14:	bf18      	it	ne
    4c16:	2001      	movne	r0, #1
    4c18:	4b0e      	ldr	r3, [pc, #56]	; (4c54 <i2c_m_async_init+0x4c>)
    4c1a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4c1c:	4629      	mov	r1, r5
    4c1e:	4620      	mov	r0, r4
    4c20:	4b0d      	ldr	r3, [pc, #52]	; (4c58 <i2c_m_async_init+0x50>)
    4c22:	4798      	blx	r3
	if (init_status) {
    4c24:	4605      	mov	r5, r0
    4c26:	b108      	cbz	r0, 4c2c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4c28:	4628      	mov	r0, r5
    4c2a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4c2c:	4b0b      	ldr	r3, [pc, #44]	; (4c5c <i2c_m_async_init+0x54>)
    4c2e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4c30:	4b0b      	ldr	r3, [pc, #44]	; (4c60 <i2c_m_async_init+0x58>)
    4c32:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4c34:	4a0b      	ldr	r2, [pc, #44]	; (4c64 <i2c_m_async_init+0x5c>)
    4c36:	2101      	movs	r1, #1
    4c38:	4620      	mov	r0, r4
    4c3a:	4e0b      	ldr	r6, [pc, #44]	; (4c68 <i2c_m_async_init+0x60>)
    4c3c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4c3e:	4a0b      	ldr	r2, [pc, #44]	; (4c6c <i2c_m_async_init+0x64>)
    4c40:	2102      	movs	r1, #2
    4c42:	4620      	mov	r0, r4
    4c44:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4c46:	4a0a      	ldr	r2, [pc, #40]	; (4c70 <i2c_m_async_init+0x68>)
    4c48:	2100      	movs	r1, #0
    4c4a:	4620      	mov	r0, r4
    4c4c:	47b0      	blx	r6
	return ERR_NONE;
    4c4e:	e7eb      	b.n	4c28 <i2c_m_async_init+0x20>
    4c50:	0000dbe8 	.word	0x0000dbe8
    4c54:	00005e5d 	.word	0x00005e5d
    4c58:	00007619 	.word	0x00007619
    4c5c:	00004bd9 	.word	0x00004bd9
    4c60:	00004ba9 	.word	0x00004ba9
    4c64:	00004b71 	.word	0x00004b71
    4c68:	000077c9 	.word	0x000077c9
    4c6c:	00004b83 	.word	0x00004b83
    4c70:	00004b95 	.word	0x00004b95

00004c74 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4c74:	b570      	push	{r4, r5, r6, lr}
    4c76:	460d      	mov	r5, r1
    4c78:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4c7a:	4604      	mov	r4, r0
    4c7c:	b160      	cbz	r0, 4c98 <io_write+0x24>
    4c7e:	1c08      	adds	r0, r1, #0
    4c80:	bf18      	it	ne
    4c82:	2001      	movne	r0, #1
    4c84:	2234      	movs	r2, #52	; 0x34
    4c86:	4905      	ldr	r1, [pc, #20]	; (4c9c <io_write+0x28>)
    4c88:	4b05      	ldr	r3, [pc, #20]	; (4ca0 <io_write+0x2c>)
    4c8a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4c8c:	6823      	ldr	r3, [r4, #0]
    4c8e:	4632      	mov	r2, r6
    4c90:	4629      	mov	r1, r5
    4c92:	4620      	mov	r0, r4
    4c94:	4798      	blx	r3
}
    4c96:	bd70      	pop	{r4, r5, r6, pc}
    4c98:	2000      	movs	r0, #0
    4c9a:	e7f3      	b.n	4c84 <io_write+0x10>
    4c9c:	0000dc08 	.word	0x0000dc08
    4ca0:	00005e5d 	.word	0x00005e5d

00004ca4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4ca4:	b570      	push	{r4, r5, r6, lr}
    4ca6:	460d      	mov	r5, r1
    4ca8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    4caa:	4604      	mov	r4, r0
    4cac:	b160      	cbz	r0, 4cc8 <io_read+0x24>
    4cae:	1c08      	adds	r0, r1, #0
    4cb0:	bf18      	it	ne
    4cb2:	2001      	movne	r0, #1
    4cb4:	223d      	movs	r2, #61	; 0x3d
    4cb6:	4905      	ldr	r1, [pc, #20]	; (4ccc <io_read+0x28>)
    4cb8:	4b05      	ldr	r3, [pc, #20]	; (4cd0 <io_read+0x2c>)
    4cba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4cbc:	6863      	ldr	r3, [r4, #4]
    4cbe:	4632      	mov	r2, r6
    4cc0:	4629      	mov	r1, r5
    4cc2:	4620      	mov	r0, r4
    4cc4:	4798      	blx	r3
}
    4cc6:	bd70      	pop	{r4, r5, r6, pc}
    4cc8:	2000      	movs	r0, #0
    4cca:	e7f3      	b.n	4cb4 <io_read+0x10>
    4ccc:	0000dc08 	.word	0x0000dc08
    4cd0:	00005e5d 	.word	0x00005e5d

00004cd4 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    4cd4:	b538      	push	{r3, r4, r5, lr}
    4cd6:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    4cd8:	4605      	mov	r5, r0
    4cda:	b158      	cbz	r0, 4cf4 <qspi_dma_init+0x20>
    4cdc:	1c08      	adds	r0, r1, #0
    4cde:	bf18      	it	ne
    4ce0:	2001      	movne	r0, #1
    4ce2:	2231      	movs	r2, #49	; 0x31
    4ce4:	4904      	ldr	r1, [pc, #16]	; (4cf8 <qspi_dma_init+0x24>)
    4ce6:	4b05      	ldr	r3, [pc, #20]	; (4cfc <qspi_dma_init+0x28>)
    4ce8:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    4cea:	4621      	mov	r1, r4
    4cec:	4628      	mov	r0, r5
    4cee:	4b04      	ldr	r3, [pc, #16]	; (4d00 <qspi_dma_init+0x2c>)
    4cf0:	4798      	blx	r3
}
    4cf2:	bd38      	pop	{r3, r4, r5, pc}
    4cf4:	2000      	movs	r0, #0
    4cf6:	e7f4      	b.n	4ce2 <qspi_dma_init+0xe>
    4cf8:	0000dc1c 	.word	0x0000dc1c
    4cfc:	00005e5d 	.word	0x00005e5d
    4d00:	00006a7d 	.word	0x00006a7d

00004d04 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d06:	460f      	mov	r7, r1
    4d08:	4616      	mov	r6, r2
	ASSERT(io);
    4d0a:	4604      	mov	r4, r0
    4d0c:	f240 1227 	movw	r2, #295	; 0x127
    4d10:	4909      	ldr	r1, [pc, #36]	; (4d38 <_spi_m_async_io_write+0x34>)
    4d12:	3000      	adds	r0, #0
    4d14:	bf18      	it	ne
    4d16:	2001      	movne	r0, #1
    4d18:	4b08      	ldr	r3, [pc, #32]	; (4d3c <_spi_m_async_io_write+0x38>)
    4d1a:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    4d1c:	2500      	movs	r5, #0
    4d1e:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4d20:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    4d22:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4d24:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4d26:	2310      	movs	r3, #16
    4d28:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    4d2a:	2101      	movs	r1, #1
    4d2c:	f1a4 0020 	sub.w	r0, r4, #32
    4d30:	4b03      	ldr	r3, [pc, #12]	; (4d40 <_spi_m_async_io_write+0x3c>)
    4d32:	4798      	blx	r3

	return ERR_NONE;
}
    4d34:	4628      	mov	r0, r5
    4d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d38:	0000dc38 	.word	0x0000dc38
    4d3c:	00005e5d 	.word	0x00005e5d
    4d40:	00007c5d 	.word	0x00007c5d

00004d44 <_spi_m_async_io_read>:
{
    4d44:	b570      	push	{r4, r5, r6, lr}
    4d46:	460d      	mov	r5, r1
    4d48:	4616      	mov	r6, r2
	ASSERT(io);
    4d4a:	4604      	mov	r4, r0
    4d4c:	f240 1205 	movw	r2, #261	; 0x105
    4d50:	490c      	ldr	r1, [pc, #48]	; (4d84 <_spi_m_async_io_read+0x40>)
    4d52:	3000      	adds	r0, #0
    4d54:	bf18      	it	ne
    4d56:	2001      	movne	r0, #1
    4d58:	4b0b      	ldr	r3, [pc, #44]	; (4d88 <_spi_m_async_io_read+0x44>)
    4d5a:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    4d5c:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    4d5e:	2500      	movs	r5, #0
    4d60:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    4d62:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4d64:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4d66:	2310      	movs	r3, #16
    4d68:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    4d6a:	3c20      	subs	r4, #32
    4d6c:	2101      	movs	r1, #1
    4d6e:	4620      	mov	r0, r4
    4d70:	4b06      	ldr	r3, [pc, #24]	; (4d8c <_spi_m_async_io_read+0x48>)
    4d72:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4d74:	f240 11ff 	movw	r1, #511	; 0x1ff
    4d78:	4620      	mov	r0, r4
    4d7a:	4b05      	ldr	r3, [pc, #20]	; (4d90 <_spi_m_async_io_read+0x4c>)
    4d7c:	4798      	blx	r3
}
    4d7e:	4628      	mov	r0, r5
    4d80:	bd70      	pop	{r4, r5, r6, pc}
    4d82:	bf00      	nop
    4d84:	0000dc38 	.word	0x0000dc38
    4d88:	00005e5d 	.word	0x00005e5d
    4d8c:	00007c91 	.word	0x00007c91
    4d90:	00007d0d 	.word	0x00007d0d

00004d94 <_spi_dev_error>:
{
    4d94:	b570      	push	{r4, r5, r6, lr}
    4d96:	4604      	mov	r4, r0
    4d98:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4d9a:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    4d9c:	2100      	movs	r1, #0
    4d9e:	4b09      	ldr	r3, [pc, #36]	; (4dc4 <_spi_dev_error+0x30>)
    4da0:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4da2:	2100      	movs	r1, #0
    4da4:	4620      	mov	r0, r4
    4da6:	4b08      	ldr	r3, [pc, #32]	; (4dc8 <_spi_dev_error+0x34>)
    4da8:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4daa:	2100      	movs	r1, #0
    4dac:	4620      	mov	r0, r4
    4dae:	4b07      	ldr	r3, [pc, #28]	; (4dcc <_spi_dev_error+0x38>)
    4db0:	4798      	blx	r3
	spi->stat = 0;
    4db2:	2300      	movs	r3, #0
    4db4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    4db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4dba:	b113      	cbz	r3, 4dc2 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    4dbc:	4631      	mov	r1, r6
    4dbe:	4628      	mov	r0, r5
    4dc0:	4798      	blx	r3
    4dc2:	bd70      	pop	{r4, r5, r6, pc}
    4dc4:	00007c5d 	.word	0x00007c5d
    4dc8:	00007c91 	.word	0x00007c91
    4dcc:	00007cd1 	.word	0x00007cd1

00004dd0 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    4dd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4dd2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4dd4:	429a      	cmp	r2, r3
    4dd6:	d200      	bcs.n	4dda <_spi_dev_complete+0xa>
    4dd8:	4770      	bx	lr
{
    4dda:	b510      	push	{r4, lr}
    4ddc:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    4dde:	2100      	movs	r1, #0
    4de0:	4b04      	ldr	r3, [pc, #16]	; (4df4 <_spi_dev_complete+0x24>)
    4de2:	4798      	blx	r3
		spi->stat = 0;
    4de4:	2300      	movs	r3, #0
    4de6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4dec:	b10b      	cbz	r3, 4df2 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    4dee:	1f20      	subs	r0, r4, #4
    4df0:	4798      	blx	r3
    4df2:	bd10      	pop	{r4, pc}
    4df4:	00007cd1 	.word	0x00007cd1

00004df8 <_spi_dev_tx>:
{
    4df8:	b510      	push	{r4, lr}
    4dfa:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    4dfc:	7903      	ldrb	r3, [r0, #4]
    4dfe:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4e00:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4e02:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4e04:	f103 0101 	add.w	r1, r3, #1
    4e08:	6401      	str	r1, [r0, #64]	; 0x40
    4e0a:	bf94      	ite	ls
    4e0c:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4e0e:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4e12:	4b08      	ldr	r3, [pc, #32]	; (4e34 <_spi_dev_tx+0x3c>)
    4e14:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    4e16:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4e18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4e1a:	429a      	cmp	r2, r3
    4e1c:	d000      	beq.n	4e20 <_spi_dev_tx+0x28>
    4e1e:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4e20:	2100      	movs	r1, #0
    4e22:	4620      	mov	r0, r4
    4e24:	4b04      	ldr	r3, [pc, #16]	; (4e38 <_spi_dev_tx+0x40>)
    4e26:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4e28:	2101      	movs	r1, #1
    4e2a:	4620      	mov	r0, r4
    4e2c:	4b03      	ldr	r3, [pc, #12]	; (4e3c <_spi_dev_tx+0x44>)
    4e2e:	4798      	blx	r3
}
    4e30:	e7f5      	b.n	4e1e <_spi_dev_tx+0x26>
    4e32:	bf00      	nop
    4e34:	00007d0d 	.word	0x00007d0d
    4e38:	00007c5d 	.word	0x00007c5d
    4e3c:	00007cd1 	.word	0x00007cd1

00004e40 <_spi_dev_rx>:
{
    4e40:	b570      	push	{r4, r5, r6, lr}
    4e42:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4e44:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4e46:	b305      	cbz	r5, 4e8a <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    4e48:	7903      	ldrb	r3, [r0, #4]
    4e4a:	2b01      	cmp	r3, #1
    4e4c:	d916      	bls.n	4e7c <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4e4e:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4e50:	1c73      	adds	r3, r6, #1
    4e52:	6403      	str	r3, [r0, #64]	; 0x40
    4e54:	4b18      	ldr	r3, [pc, #96]	; (4eb8 <_spi_dev_rx+0x78>)
    4e56:	4798      	blx	r3
    4e58:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    4e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4e5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4e60:	4293      	cmp	r3, r2
    4e62:	d21d      	bcs.n	4ea0 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4e64:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4e66:	b1b2      	cbz	r2, 4e96 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4e68:	7921      	ldrb	r1, [r4, #4]
    4e6a:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4e6c:	bf94      	ite	ls
    4e6e:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4e70:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4e74:	4620      	mov	r0, r4
    4e76:	4b11      	ldr	r3, [pc, #68]	; (4ebc <_spi_dev_rx+0x7c>)
    4e78:	4798      	blx	r3
    4e7a:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4e7c:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4e7e:	1c73      	adds	r3, r6, #1
    4e80:	6403      	str	r3, [r0, #64]	; 0x40
    4e82:	4b0d      	ldr	r3, [pc, #52]	; (4eb8 <_spi_dev_rx+0x78>)
    4e84:	4798      	blx	r3
    4e86:	55a8      	strb	r0, [r5, r6]
    4e88:	e7e8      	b.n	4e5c <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    4e8a:	4b0b      	ldr	r3, [pc, #44]	; (4eb8 <_spi_dev_rx+0x78>)
    4e8c:	4798      	blx	r3
		spi->xfercnt++;
    4e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4e90:	3301      	adds	r3, #1
    4e92:	6423      	str	r3, [r4, #64]	; 0x40
    4e94:	e7e2      	b.n	4e5c <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4e96:	88e1      	ldrh	r1, [r4, #6]
    4e98:	4620      	mov	r0, r4
    4e9a:	4b08      	ldr	r3, [pc, #32]	; (4ebc <_spi_dev_rx+0x7c>)
    4e9c:	4798      	blx	r3
    4e9e:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    4ea0:	2100      	movs	r1, #0
    4ea2:	4620      	mov	r0, r4
    4ea4:	4b06      	ldr	r3, [pc, #24]	; (4ec0 <_spi_dev_rx+0x80>)
    4ea6:	4798      	blx	r3
		spi->stat = 0;
    4ea8:	2300      	movs	r3, #0
    4eaa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4eb0:	b10b      	cbz	r3, 4eb6 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    4eb2:	1f20      	subs	r0, r4, #4
    4eb4:	4798      	blx	r3
    4eb6:	bd70      	pop	{r4, r5, r6, pc}
    4eb8:	00007d3d 	.word	0x00007d3d
    4ebc:	00007d0d 	.word	0x00007d0d
    4ec0:	00007c91 	.word	0x00007c91

00004ec4 <spi_m_async_init>:
{
    4ec4:	b570      	push	{r4, r5, r6, lr}
    4ec6:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    4ec8:	4606      	mov	r6, r0
    4eca:	b330      	cbz	r0, 4f1a <spi_m_async_init+0x56>
    4ecc:	1c08      	adds	r0, r1, #0
    4ece:	bf18      	it	ne
    4ed0:	2001      	movne	r0, #1
    4ed2:	22a5      	movs	r2, #165	; 0xa5
    4ed4:	4912      	ldr	r1, [pc, #72]	; (4f20 <spi_m_async_init+0x5c>)
    4ed6:	4b13      	ldr	r3, [pc, #76]	; (4f24 <spi_m_async_init+0x60>)
    4ed8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4eda:	4634      	mov	r4, r6
    4edc:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    4ee0:	4629      	mov	r1, r5
    4ee2:	4620      	mov	r0, r4
    4ee4:	4b10      	ldr	r3, [pc, #64]	; (4f28 <spi_m_async_init+0x64>)
    4ee6:	4798      	blx	r3
	if (rc >= 0) {
    4ee8:	2800      	cmp	r0, #0
    4eea:	db15      	blt.n	4f18 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4eec:	4a0f      	ldr	r2, [pc, #60]	; (4f2c <spi_m_async_init+0x68>)
    4eee:	2100      	movs	r1, #0
    4ef0:	4620      	mov	r0, r4
    4ef2:	4d0f      	ldr	r5, [pc, #60]	; (4f30 <spi_m_async_init+0x6c>)
    4ef4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4ef6:	4a0f      	ldr	r2, [pc, #60]	; (4f34 <spi_m_async_init+0x70>)
    4ef8:	2101      	movs	r1, #1
    4efa:	4620      	mov	r0, r4
    4efc:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4efe:	4a0e      	ldr	r2, [pc, #56]	; (4f38 <spi_m_async_init+0x74>)
    4f00:	2102      	movs	r1, #2
    4f02:	4620      	mov	r0, r4
    4f04:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4f06:	4a0d      	ldr	r2, [pc, #52]	; (4f3c <spi_m_async_init+0x78>)
    4f08:	2103      	movs	r1, #3
    4f0a:	4620      	mov	r0, r4
    4f0c:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    4f0e:	4b0c      	ldr	r3, [pc, #48]	; (4f40 <spi_m_async_init+0x7c>)
    4f10:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4f12:	4b0c      	ldr	r3, [pc, #48]	; (4f44 <spi_m_async_init+0x80>)
    4f14:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    4f16:	2000      	movs	r0, #0
}
    4f18:	bd70      	pop	{r4, r5, r6, pc}
    4f1a:	2000      	movs	r0, #0
    4f1c:	e7d9      	b.n	4ed2 <spi_m_async_init+0xe>
    4f1e:	bf00      	nop
    4f20:	0000dc38 	.word	0x0000dc38
    4f24:	00005e5d 	.word	0x00005e5d
    4f28:	00007b55 	.word	0x00007b55
    4f2c:	00004df9 	.word	0x00004df9
    4f30:	00007d69 	.word	0x00007d69
    4f34:	00004e41 	.word	0x00004e41
    4f38:	00004dd1 	.word	0x00004dd1
    4f3c:	00004d95 	.word	0x00004d95
    4f40:	00004d45 	.word	0x00004d45
    4f44:	00004d05 	.word	0x00004d05

00004f48 <spi_m_async_enable>:
{
    4f48:	b510      	push	{r4, lr}
	ASSERT(spi);
    4f4a:	4604      	mov	r4, r0
    4f4c:	22c1      	movs	r2, #193	; 0xc1
    4f4e:	4905      	ldr	r1, [pc, #20]	; (4f64 <spi_m_async_enable+0x1c>)
    4f50:	3000      	adds	r0, #0
    4f52:	bf18      	it	ne
    4f54:	2001      	movne	r0, #1
    4f56:	4b04      	ldr	r3, [pc, #16]	; (4f68 <spi_m_async_enable+0x20>)
    4f58:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    4f5a:	1d20      	adds	r0, r4, #4
    4f5c:	4b03      	ldr	r3, [pc, #12]	; (4f6c <spi_m_async_enable+0x24>)
    4f5e:	4798      	blx	r3
    4f60:	bd10      	pop	{r4, pc}
    4f62:	bf00      	nop
    4f64:	0000dc38 	.word	0x0000dc38
    4f68:	00005e5d 	.word	0x00005e5d
    4f6c:	00007bbd 	.word	0x00007bbd

00004f70 <spi_m_async_set_baudrate>:
{
    4f70:	b538      	push	{r3, r4, r5, lr}
    4f72:	460d      	mov	r5, r1
	ASSERT(spi);
    4f74:	4604      	mov	r4, r0
    4f76:	22cf      	movs	r2, #207	; 0xcf
    4f78:	4909      	ldr	r1, [pc, #36]	; (4fa0 <spi_m_async_set_baudrate+0x30>)
    4f7a:	3000      	adds	r0, #0
    4f7c:	bf18      	it	ne
    4f7e:	2001      	movne	r0, #1
    4f80:	4b08      	ldr	r3, [pc, #32]	; (4fa4 <spi_m_async_set_baudrate+0x34>)
    4f82:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4f84:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4f88:	f013 0f10 	tst.w	r3, #16
    4f8c:	d104      	bne.n	4f98 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    4f8e:	4629      	mov	r1, r5
    4f90:	1d20      	adds	r0, r4, #4
    4f92:	4b05      	ldr	r3, [pc, #20]	; (4fa8 <spi_m_async_set_baudrate+0x38>)
    4f94:	4798      	blx	r3
    4f96:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4f98:	f06f 0003 	mvn.w	r0, #3
}
    4f9c:	bd38      	pop	{r3, r4, r5, pc}
    4f9e:	bf00      	nop
    4fa0:	0000dc38 	.word	0x0000dc38
    4fa4:	00005e5d 	.word	0x00005e5d
    4fa8:	00007c21 	.word	0x00007c21

00004fac <spi_m_async_set_mode>:
{
    4fac:	b538      	push	{r3, r4, r5, lr}
    4fae:	460d      	mov	r5, r1
	ASSERT(spi);
    4fb0:	4604      	mov	r4, r0
    4fb2:	22d9      	movs	r2, #217	; 0xd9
    4fb4:	4909      	ldr	r1, [pc, #36]	; (4fdc <spi_m_async_set_mode+0x30>)
    4fb6:	3000      	adds	r0, #0
    4fb8:	bf18      	it	ne
    4fba:	2001      	movne	r0, #1
    4fbc:	4b08      	ldr	r3, [pc, #32]	; (4fe0 <spi_m_async_set_mode+0x34>)
    4fbe:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4fc0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4fc4:	f013 0f10 	tst.w	r3, #16
    4fc8:	d104      	bne.n	4fd4 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    4fca:	4629      	mov	r1, r5
    4fcc:	1d20      	adds	r0, r4, #4
    4fce:	4b05      	ldr	r3, [pc, #20]	; (4fe4 <spi_m_async_set_mode+0x38>)
    4fd0:	4798      	blx	r3
    4fd2:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4fd4:	f06f 0003 	mvn.w	r0, #3
}
    4fd8:	bd38      	pop	{r3, r4, r5, pc}
    4fda:	bf00      	nop
    4fdc:	0000dc38 	.word	0x0000dc38
    4fe0:	00005e5d 	.word	0x00005e5d
    4fe4:	00007bed 	.word	0x00007bed

00004fe8 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    4fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fea:	460d      	mov	r5, r1
    4fec:	4617      	mov	r7, r2
    4fee:	461e      	mov	r6, r3
	ASSERT(spi);
    4ff0:	4604      	mov	r4, r0
    4ff2:	f44f 729c 	mov.w	r2, #312	; 0x138
    4ff6:	4912      	ldr	r1, [pc, #72]	; (5040 <spi_m_async_transfer+0x58>)
    4ff8:	3000      	adds	r0, #0
    4ffa:	bf18      	it	ne
    4ffc:	2001      	movne	r0, #1
    4ffe:	4b11      	ldr	r3, [pc, #68]	; (5044 <spi_m_async_transfer+0x5c>)
    5000:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    5002:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    5004:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    5006:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    5008:	2300      	movs	r3, #0
    500a:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    500c:	2310      	movs	r3, #16
    500e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    5012:	1d26      	adds	r6, r4, #4
    5014:	2101      	movs	r1, #1
    5016:	4630      	mov	r0, r6
    5018:	4b0b      	ldr	r3, [pc, #44]	; (5048 <spi_m_async_transfer+0x60>)
    501a:	4798      	blx	r3
	if (txbuf) {
    501c:	b15d      	cbz	r5, 5036 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    501e:	7a23      	ldrb	r3, [r4, #8]
    5020:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    5022:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5024:	bf94      	ite	ls
    5026:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    5028:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    502c:	4630      	mov	r0, r6
    502e:	4b07      	ldr	r3, [pc, #28]	; (504c <spi_m_async_transfer+0x64>)
    5030:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    5032:	2000      	movs	r0, #0
    5034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    5036:	8961      	ldrh	r1, [r4, #10]
    5038:	4630      	mov	r0, r6
    503a:	4b04      	ldr	r3, [pc, #16]	; (504c <spi_m_async_transfer+0x64>)
    503c:	4798      	blx	r3
    503e:	e7f8      	b.n	5032 <spi_m_async_transfer+0x4a>
    5040:	0000dc38 	.word	0x0000dc38
    5044:	00005e5d 	.word	0x00005e5d
    5048:	00007c91 	.word	0x00007c91
    504c:	00007d0d 	.word	0x00007d0d

00005050 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    5050:	b570      	push	{r4, r5, r6, lr}
    5052:	460c      	mov	r4, r1
    5054:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    5056:	4605      	mov	r5, r0
    5058:	b158      	cbz	r0, 5072 <spi_m_async_register_callback+0x22>
    505a:	2901      	cmp	r1, #1
    505c:	bf8c      	ite	hi
    505e:	2000      	movhi	r0, #0
    5060:	2001      	movls	r0, #1
    5062:	f240 1263 	movw	r2, #355	; 0x163
    5066:	4908      	ldr	r1, [pc, #32]	; (5088 <spi_m_async_register_callback+0x38>)
    5068:	4b08      	ldr	r3, [pc, #32]	; (508c <spi_m_async_register_callback+0x3c>)
    506a:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    506c:	b91c      	cbnz	r4, 5076 <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    506e:	632e      	str	r6, [r5, #48]	; 0x30
    5070:	bd70      	pop	{r4, r5, r6, pc}
    5072:	2000      	movs	r0, #0
    5074:	e7f5      	b.n	5062 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    5076:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    5078:	1c32      	adds	r2, r6, #0
    507a:	bf18      	it	ne
    507c:	2201      	movne	r2, #1
    507e:	2103      	movs	r1, #3
    5080:	1d28      	adds	r0, r5, #4
    5082:	4b03      	ldr	r3, [pc, #12]	; (5090 <spi_m_async_register_callback+0x40>)
    5084:	4798      	blx	r3
    5086:	bd70      	pop	{r4, r5, r6, pc}
    5088:	0000dc38 	.word	0x0000dc38
    508c:	00005e5d 	.word	0x00005e5d
    5090:	00007d9d 	.word	0x00007d9d

00005094 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    5094:	b538      	push	{r3, r4, r5, lr}
    5096:	460d      	mov	r5, r1
	ASSERT(spi && io);
    5098:	4604      	mov	r4, r0
    509a:	b158      	cbz	r0, 50b4 <spi_m_async_get_io_descriptor+0x20>
    509c:	1c08      	adds	r0, r1, #0
    509e:	bf18      	it	ne
    50a0:	2001      	movne	r0, #1
    50a2:	f240 126f 	movw	r2, #367	; 0x16f
    50a6:	4904      	ldr	r1, [pc, #16]	; (50b8 <spi_m_async_get_io_descriptor+0x24>)
    50a8:	4b04      	ldr	r3, [pc, #16]	; (50bc <spi_m_async_get_io_descriptor+0x28>)
    50aa:	4798      	blx	r3
	*io = &spi->io;
    50ac:	3424      	adds	r4, #36	; 0x24
    50ae:	602c      	str	r4, [r5, #0]
	return 0;
}
    50b0:	2000      	movs	r0, #0
    50b2:	bd38      	pop	{r3, r4, r5, pc}
    50b4:	2000      	movs	r0, #0
    50b6:	e7f4      	b.n	50a2 <spi_m_async_get_io_descriptor+0xe>
    50b8:	0000dc38 	.word	0x0000dc38
    50bc:	00005e5d 	.word	0x00005e5d

000050c0 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    50c0:	b570      	push	{r4, r5, r6, lr}
    50c2:	460d      	mov	r5, r1
    50c4:	4616      	mov	r6, r2
	ASSERT(io);
    50c6:	4604      	mov	r4, r0
    50c8:	2298      	movs	r2, #152	; 0x98
    50ca:	4907      	ldr	r1, [pc, #28]	; (50e8 <_spi_m_dma_io_write+0x28>)
    50cc:	3000      	adds	r0, #0
    50ce:	bf18      	it	ne
    50d0:	2001      	movne	r0, #1
    50d2:	4b06      	ldr	r3, [pc, #24]	; (50ec <_spi_m_dma_io_write+0x2c>)
    50d4:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    50d6:	4633      	mov	r3, r6
    50d8:	2200      	movs	r2, #0
    50da:	4629      	mov	r1, r5
    50dc:	f1a4 001c 	sub.w	r0, r4, #28
    50e0:	4c03      	ldr	r4, [pc, #12]	; (50f0 <_spi_m_dma_io_write+0x30>)
    50e2:	47a0      	blx	r4
}
    50e4:	bd70      	pop	{r4, r5, r6, pc}
    50e6:	bf00      	nop
    50e8:	0000dc58 	.word	0x0000dc58
    50ec:	00005e5d 	.word	0x00005e5d
    50f0:	00007ff1 	.word	0x00007ff1

000050f4 <_spi_m_dma_io_read>:
{
    50f4:	b570      	push	{r4, r5, r6, lr}
    50f6:	460d      	mov	r5, r1
    50f8:	4616      	mov	r6, r2
	ASSERT(io);
    50fa:	4604      	mov	r4, r0
    50fc:	2281      	movs	r2, #129	; 0x81
    50fe:	4907      	ldr	r1, [pc, #28]	; (511c <_spi_m_dma_io_read+0x28>)
    5100:	3000      	adds	r0, #0
    5102:	bf18      	it	ne
    5104:	2001      	movne	r0, #1
    5106:	4b06      	ldr	r3, [pc, #24]	; (5120 <_spi_m_dma_io_read+0x2c>)
    5108:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    510a:	4633      	mov	r3, r6
    510c:	462a      	mov	r2, r5
    510e:	2100      	movs	r1, #0
    5110:	f1a4 001c 	sub.w	r0, r4, #28
    5114:	4c03      	ldr	r4, [pc, #12]	; (5124 <_spi_m_dma_io_read+0x30>)
    5116:	47a0      	blx	r4
}
    5118:	bd70      	pop	{r4, r5, r6, pc}
    511a:	bf00      	nop
    511c:	0000dc58 	.word	0x0000dc58
    5120:	00005e5d 	.word	0x00005e5d
    5124:	00007ff1 	.word	0x00007ff1

00005128 <spi_m_dma_init>:
{
    5128:	b538      	push	{r3, r4, r5, lr}
    512a:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    512c:	4605      	mov	r5, r0
    512e:	b1a0      	cbz	r0, 515a <spi_m_dma_init+0x32>
    5130:	1c08      	adds	r0, r1, #0
    5132:	bf18      	it	ne
    5134:	2001      	movne	r0, #1
    5136:	223b      	movs	r2, #59	; 0x3b
    5138:	4909      	ldr	r1, [pc, #36]	; (5160 <spi_m_dma_init+0x38>)
    513a:	4b0a      	ldr	r3, [pc, #40]	; (5164 <spi_m_dma_init+0x3c>)
    513c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    513e:	4628      	mov	r0, r5
    5140:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    5144:	4621      	mov	r1, r4
    5146:	4b08      	ldr	r3, [pc, #32]	; (5168 <spi_m_dma_init+0x40>)
    5148:	4798      	blx	r3
	if (rc) {
    514a:	4603      	mov	r3, r0
    514c:	b918      	cbnz	r0, 5156 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    514e:	4a07      	ldr	r2, [pc, #28]	; (516c <spi_m_dma_init+0x44>)
    5150:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    5152:	4a07      	ldr	r2, [pc, #28]	; (5170 <spi_m_dma_init+0x48>)
    5154:	622a      	str	r2, [r5, #32]
}
    5156:	4618      	mov	r0, r3
    5158:	bd38      	pop	{r3, r4, r5, pc}
    515a:	2000      	movs	r0, #0
    515c:	e7eb      	b.n	5136 <spi_m_dma_init+0xe>
    515e:	bf00      	nop
    5160:	0000dc58 	.word	0x0000dc58
    5164:	00005e5d 	.word	0x00005e5d
    5168:	00007dd5 	.word	0x00007dd5
    516c:	000050f5 	.word	0x000050f5
    5170:	000050c1 	.word	0x000050c1

00005174 <spi_m_dma_enable>:
{
    5174:	b510      	push	{r4, lr}
	ASSERT(spi);
    5176:	4604      	mov	r4, r0
    5178:	2251      	movs	r2, #81	; 0x51
    517a:	4905      	ldr	r1, [pc, #20]	; (5190 <spi_m_dma_enable+0x1c>)
    517c:	3000      	adds	r0, #0
    517e:	bf18      	it	ne
    5180:	2001      	movne	r0, #1
    5182:	4b04      	ldr	r3, [pc, #16]	; (5194 <spi_m_dma_enable+0x20>)
    5184:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    5186:	1d20      	adds	r0, r4, #4
    5188:	4b03      	ldr	r3, [pc, #12]	; (5198 <spi_m_dma_enable+0x24>)
    518a:	4798      	blx	r3
    518c:	bd10      	pop	{r4, pc}
    518e:	bf00      	nop
    5190:	0000dc58 	.word	0x0000dc58
    5194:	00005e5d 	.word	0x00005e5d
    5198:	00007f51 	.word	0x00007f51

0000519c <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    519c:	b570      	push	{r4, r5, r6, lr}
    519e:	460d      	mov	r5, r1
    51a0:	4616      	mov	r6, r2
	ASSERT(spi);
    51a2:	4604      	mov	r4, r0
    51a4:	22a8      	movs	r2, #168	; 0xa8
    51a6:	4906      	ldr	r1, [pc, #24]	; (51c0 <spi_m_dma_register_callback+0x24>)
    51a8:	3000      	adds	r0, #0
    51aa:	bf18      	it	ne
    51ac:	2001      	movne	r0, #1
    51ae:	4b05      	ldr	r3, [pc, #20]	; (51c4 <spi_m_dma_register_callback+0x28>)
    51b0:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    51b2:	4632      	mov	r2, r6
    51b4:	4629      	mov	r1, r5
    51b6:	1d20      	adds	r0, r4, #4
    51b8:	4b03      	ldr	r3, [pc, #12]	; (51c8 <spi_m_dma_register_callback+0x2c>)
    51ba:	4798      	blx	r3
    51bc:	bd70      	pop	{r4, r5, r6, pc}
    51be:	bf00      	nop
    51c0:	0000dc58 	.word	0x0000dc58
    51c4:	00005e5d 	.word	0x00005e5d
    51c8:	00007f81 	.word	0x00007f81

000051cc <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    51cc:	b538      	push	{r3, r4, r5, lr}
    51ce:	460d      	mov	r5, r1
	ASSERT(spi && io);
    51d0:	4604      	mov	r4, r0
    51d2:	b150      	cbz	r0, 51ea <spi_m_dma_get_io_descriptor+0x1e>
    51d4:	1c08      	adds	r0, r1, #0
    51d6:	bf18      	it	ne
    51d8:	2001      	movne	r0, #1
    51da:	22ae      	movs	r2, #174	; 0xae
    51dc:	4904      	ldr	r1, [pc, #16]	; (51f0 <spi_m_dma_get_io_descriptor+0x24>)
    51de:	4b05      	ldr	r3, [pc, #20]	; (51f4 <spi_m_dma_get_io_descriptor+0x28>)
    51e0:	4798      	blx	r3
	*io = &spi->io;
    51e2:	3420      	adds	r4, #32
    51e4:	602c      	str	r4, [r5, #0]

	return 0;
}
    51e6:	2000      	movs	r0, #0
    51e8:	bd38      	pop	{r3, r4, r5, pc}
    51ea:	2000      	movs	r0, #0
    51ec:	e7f5      	b.n	51da <spi_m_dma_get_io_descriptor+0xe>
    51ee:	bf00      	nop
    51f0:	0000dc58 	.word	0x0000dc58
    51f4:	00005e5d 	.word	0x00005e5d

000051f8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    51f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51fa:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    51fc:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    51fe:	b12f      	cbz	r7, 520c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    5200:	688d      	ldr	r5, [r1, #8]
    5202:	463c      	mov	r4, r7
    5204:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5206:	f1c2 0e01 	rsb	lr, r2, #1
    520a:	e00b      	b.n	5224 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    520c:	4b0e      	ldr	r3, [pc, #56]	; (5248 <timer_add_timer_task+0x50>)
    520e:	4798      	blx	r3
		return;
    5210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5212:	4473      	add	r3, lr
    5214:	68a0      	ldr	r0, [r4, #8]
    5216:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    5218:	42ab      	cmp	r3, r5
    521a:	d20a      	bcs.n	5232 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    521c:	6823      	ldr	r3, [r4, #0]
    521e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5220:	b153      	cbz	r3, 5238 <timer_add_timer_task+0x40>
    5222:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    5224:	6863      	ldr	r3, [r4, #4]
    5226:	4293      	cmp	r3, r2
    5228:	d8f3      	bhi.n	5212 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    522a:	68a0      	ldr	r0, [r4, #8]
    522c:	4403      	add	r3, r0
    522e:	1a9b      	subs	r3, r3, r2
    5230:	e7f2      	b.n	5218 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    5232:	42a7      	cmp	r7, r4
    5234:	d004      	beq.n	5240 <timer_add_timer_task+0x48>
    5236:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    5238:	4620      	mov	r0, r4
    523a:	4b04      	ldr	r3, [pc, #16]	; (524c <timer_add_timer_task+0x54>)
    523c:	4798      	blx	r3
    523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    5240:	4660      	mov	r0, ip
    5242:	4b01      	ldr	r3, [pc, #4]	; (5248 <timer_add_timer_task+0x50>)
    5244:	4798      	blx	r3
    5246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5248:	00005e85 	.word	0x00005e85
    524c:	00005eb1 	.word	0x00005eb1

00005250 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    5254:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    5256:	6907      	ldr	r7, [r0, #16]
    5258:	3701      	adds	r7, #1
    525a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    525c:	7e03      	ldrb	r3, [r0, #24]
    525e:	f013 0f01 	tst.w	r3, #1
    5262:	d113      	bne.n	528c <timer_process_counted+0x3c>
    5264:	7e03      	ldrb	r3, [r0, #24]
    5266:	f013 0f02 	tst.w	r3, #2
    526a:	d10f      	bne.n	528c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    526c:	b354      	cbz	r4, 52c4 <timer_process_counted+0x74>
    526e:	6863      	ldr	r3, [r4, #4]
    5270:	1afb      	subs	r3, r7, r3
    5272:	68a2      	ldr	r2, [r4, #8]
    5274:	4293      	cmp	r3, r2
    5276:	d307      	bcc.n	5288 <timer_process_counted+0x38>
    5278:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    527a:	f100 0814 	add.w	r8, r0, #20
    527e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 52c8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    5282:	f8df a048 	ldr.w	sl, [pc, #72]	; 52cc <timer_process_counted+0x7c>
    5286:	e012      	b.n	52ae <timer_process_counted+0x5e>
    5288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    528c:	7e03      	ldrb	r3, [r0, #24]
    528e:	f043 0302 	orr.w	r3, r3, #2
    5292:	7603      	strb	r3, [r0, #24]
		return;
    5294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5298:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    529a:	68e3      	ldr	r3, [r4, #12]
    529c:	4620      	mov	r0, r4
    529e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    52a0:	b185      	cbz	r5, 52c4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    52a2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    52a4:	686b      	ldr	r3, [r5, #4]
    52a6:	1afb      	subs	r3, r7, r3
    52a8:	68aa      	ldr	r2, [r5, #8]
    52aa:	4293      	cmp	r3, r2
    52ac:	d30a      	bcc.n	52c4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    52ae:	4640      	mov	r0, r8
    52b0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    52b2:	7c23      	ldrb	r3, [r4, #16]
    52b4:	2b01      	cmp	r3, #1
    52b6:	d1ef      	bne.n	5298 <timer_process_counted+0x48>
			tmp->time_label = time;
    52b8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    52ba:	463a      	mov	r2, r7
    52bc:	4621      	mov	r1, r4
    52be:	4640      	mov	r0, r8
    52c0:	47d0      	blx	sl
    52c2:	e7e9      	b.n	5298 <timer_process_counted+0x48>
    52c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52c8:	00005ef9 	.word	0x00005ef9
    52cc:	000051f9 	.word	0x000051f9

000052d0 <timer_init>:
{
    52d0:	b570      	push	{r4, r5, r6, lr}
    52d2:	460e      	mov	r6, r1
    52d4:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    52d6:	4604      	mov	r4, r0
    52d8:	b190      	cbz	r0, 5300 <timer_init+0x30>
    52da:	b199      	cbz	r1, 5304 <timer_init+0x34>
    52dc:	1c10      	adds	r0, r2, #0
    52de:	bf18      	it	ne
    52e0:	2001      	movne	r0, #1
    52e2:	223b      	movs	r2, #59	; 0x3b
    52e4:	4908      	ldr	r1, [pc, #32]	; (5308 <timer_init+0x38>)
    52e6:	4b09      	ldr	r3, [pc, #36]	; (530c <timer_init+0x3c>)
    52e8:	4798      	blx	r3
	descr->func = func;
    52ea:	4620      	mov	r0, r4
    52ec:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    52f0:	682b      	ldr	r3, [r5, #0]
    52f2:	4631      	mov	r1, r6
    52f4:	4798      	blx	r3
	descr->time                           = 0;
    52f6:	2000      	movs	r0, #0
    52f8:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    52fa:	4b05      	ldr	r3, [pc, #20]	; (5310 <timer_init+0x40>)
    52fc:	6063      	str	r3, [r4, #4]
}
    52fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    5300:	2000      	movs	r0, #0
    5302:	e7ee      	b.n	52e2 <timer_init+0x12>
    5304:	2000      	movs	r0, #0
    5306:	e7ec      	b.n	52e2 <timer_init+0x12>
    5308:	0000dc74 	.word	0x0000dc74
    530c:	00005e5d 	.word	0x00005e5d
    5310:	00005251 	.word	0x00005251

00005314 <timer_start>:
{
    5314:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    5316:	4604      	mov	r4, r0
    5318:	b198      	cbz	r0, 5342 <timer_start+0x2e>
    531a:	6800      	ldr	r0, [r0, #0]
    531c:	3000      	adds	r0, #0
    531e:	bf18      	it	ne
    5320:	2001      	movne	r0, #1
    5322:	2254      	movs	r2, #84	; 0x54
    5324:	4909      	ldr	r1, [pc, #36]	; (534c <timer_start+0x38>)
    5326:	4b0a      	ldr	r3, [pc, #40]	; (5350 <timer_start+0x3c>)
    5328:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    532a:	1d25      	adds	r5, r4, #4
    532c:	6823      	ldr	r3, [r4, #0]
    532e:	699b      	ldr	r3, [r3, #24]
    5330:	4628      	mov	r0, r5
    5332:	4798      	blx	r3
    5334:	b938      	cbnz	r0, 5346 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    5336:	6823      	ldr	r3, [r4, #0]
    5338:	689b      	ldr	r3, [r3, #8]
    533a:	4628      	mov	r0, r5
    533c:	4798      	blx	r3
	return ERR_NONE;
    533e:	2000      	movs	r0, #0
    5340:	bd38      	pop	{r3, r4, r5, pc}
    5342:	2000      	movs	r0, #0
    5344:	e7ed      	b.n	5322 <timer_start+0xe>
		return ERR_DENIED;
    5346:	f06f 0010 	mvn.w	r0, #16
}
    534a:	bd38      	pop	{r3, r4, r5, pc}
    534c:	0000dc74 	.word	0x0000dc74
    5350:	00005e5d 	.word	0x00005e5d

00005354 <timer_add_task>:
{
    5354:	b570      	push	{r4, r5, r6, lr}
    5356:	b082      	sub	sp, #8
    5358:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    535a:	4604      	mov	r4, r0
    535c:	b328      	cbz	r0, 53aa <timer_add_task+0x56>
    535e:	b331      	cbz	r1, 53ae <timer_add_task+0x5a>
    5360:	6800      	ldr	r0, [r0, #0]
    5362:	3000      	adds	r0, #0
    5364:	bf18      	it	ne
    5366:	2001      	movne	r0, #1
    5368:	227b      	movs	r2, #123	; 0x7b
    536a:	4920      	ldr	r1, [pc, #128]	; (53ec <timer_add_task+0x98>)
    536c:	4b20      	ldr	r3, [pc, #128]	; (53f0 <timer_add_task+0x9c>)
    536e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5370:	7f23      	ldrb	r3, [r4, #28]
    5372:	f043 0301 	orr.w	r3, r3, #1
    5376:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    5378:	f104 0618 	add.w	r6, r4, #24
    537c:	4629      	mov	r1, r5
    537e:	4630      	mov	r0, r6
    5380:	4b1c      	ldr	r3, [pc, #112]	; (53f4 <timer_add_task+0xa0>)
    5382:	4798      	blx	r3
    5384:	b9a8      	cbnz	r0, 53b2 <timer_add_task+0x5e>
	task->time_label = descr->time;
    5386:	6963      	ldr	r3, [r4, #20]
    5388:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    538a:	6962      	ldr	r2, [r4, #20]
    538c:	4629      	mov	r1, r5
    538e:	4630      	mov	r0, r6
    5390:	4b19      	ldr	r3, [pc, #100]	; (53f8 <timer_add_task+0xa4>)
    5392:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5394:	7f23      	ldrb	r3, [r4, #28]
    5396:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    539a:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    539c:	7f23      	ldrb	r3, [r4, #28]
    539e:	f013 0f02 	tst.w	r3, #2
    53a2:	d112      	bne.n	53ca <timer_add_task+0x76>
	return ERR_NONE;
    53a4:	2000      	movs	r0, #0
}
    53a6:	b002      	add	sp, #8
    53a8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    53aa:	2000      	movs	r0, #0
    53ac:	e7dc      	b.n	5368 <timer_add_task+0x14>
    53ae:	2000      	movs	r0, #0
    53b0:	e7da      	b.n	5368 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    53b2:	7f23      	ldrb	r3, [r4, #28]
    53b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    53b8:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    53ba:	2280      	movs	r2, #128	; 0x80
    53bc:	490b      	ldr	r1, [pc, #44]	; (53ec <timer_add_task+0x98>)
    53be:	2000      	movs	r0, #0
    53c0:	4b0b      	ldr	r3, [pc, #44]	; (53f0 <timer_add_task+0x9c>)
    53c2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    53c4:	f06f 0011 	mvn.w	r0, #17
    53c8:	e7ed      	b.n	53a6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    53ca:	a801      	add	r0, sp, #4
    53cc:	4b0b      	ldr	r3, [pc, #44]	; (53fc <timer_add_task+0xa8>)
    53ce:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    53d0:	7f23      	ldrb	r3, [r4, #28]
    53d2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    53d6:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    53d8:	6823      	ldr	r3, [r4, #0]
    53da:	69db      	ldr	r3, [r3, #28]
    53dc:	1d20      	adds	r0, r4, #4
    53de:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    53e0:	a801      	add	r0, sp, #4
    53e2:	4b07      	ldr	r3, [pc, #28]	; (5400 <timer_add_task+0xac>)
    53e4:	4798      	blx	r3
	return ERR_NONE;
    53e6:	2000      	movs	r0, #0
    53e8:	e7dd      	b.n	53a6 <timer_add_task+0x52>
    53ea:	bf00      	nop
    53ec:	0000dc74 	.word	0x0000dc74
    53f0:	00005e5d 	.word	0x00005e5d
    53f4:	00005e63 	.word	0x00005e63
    53f8:	000051f9 	.word	0x000051f9
    53fc:	00004a69 	.word	0x00004a69
    5400:	00004a77 	.word	0x00004a77

00005404 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    5404:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    5406:	2300      	movs	r3, #0
    5408:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    540a:	69c3      	ldr	r3, [r0, #28]
    540c:	b11b      	cbz	r3, 5416 <usart_transmission_complete+0x12>
    540e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    5412:	4610      	mov	r0, r2
    5414:	4798      	blx	r3
    5416:	bd08      	pop	{r3, pc}

00005418 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    5418:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    541a:	2300      	movs	r3, #0
    541c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    541e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5420:	b11b      	cbz	r3, 542a <usart_error+0x12>
    5422:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    5426:	4610      	mov	r0, r2
    5428:	4798      	blx	r3
    542a:	bd08      	pop	{r3, pc}

0000542c <usart_fill_rx_buffer>:
{
    542c:	b538      	push	{r3, r4, r5, lr}
    542e:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    5430:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    5434:	302c      	adds	r0, #44	; 0x2c
    5436:	4b03      	ldr	r3, [pc, #12]	; (5444 <usart_fill_rx_buffer+0x18>)
    5438:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    543a:	6a23      	ldr	r3, [r4, #32]
    543c:	b10b      	cbz	r3, 5442 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    543e:	4628      	mov	r0, r5
    5440:	4798      	blx	r3
    5442:	bd38      	pop	{r3, r4, r5, pc}
    5444:	00005f99 	.word	0x00005f99

00005448 <usart_async_write>:
{
    5448:	b570      	push	{r4, r5, r6, lr}
    544a:	460e      	mov	r6, r1
    544c:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    544e:	4604      	mov	r4, r0
    5450:	b1e0      	cbz	r0, 548c <usart_async_write+0x44>
    5452:	b1e9      	cbz	r1, 5490 <usart_async_write+0x48>
    5454:	1c10      	adds	r0, r2, #0
    5456:	bf18      	it	ne
    5458:	2001      	movne	r0, #1
    545a:	f240 123b 	movw	r2, #315	; 0x13b
    545e:	490f      	ldr	r1, [pc, #60]	; (549c <usart_async_write+0x54>)
    5460:	4b0f      	ldr	r3, [pc, #60]	; (54a0 <usart_async_write+0x58>)
    5462:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    5464:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    5468:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    546c:	429a      	cmp	r2, r3
    546e:	d111      	bne.n	5494 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    5470:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    5472:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    5476:	2300      	movs	r3, #0
    5478:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    547c:	2301      	movs	r3, #1
    547e:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    5480:	f104 0008 	add.w	r0, r4, #8
    5484:	4b07      	ldr	r3, [pc, #28]	; (54a4 <usart_async_write+0x5c>)
    5486:	4798      	blx	r3
	return (int32_t)length;
    5488:	4628      	mov	r0, r5
    548a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    548c:	2000      	movs	r0, #0
    548e:	e7e4      	b.n	545a <usart_async_write+0x12>
    5490:	2000      	movs	r0, #0
    5492:	e7e2      	b.n	545a <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    5494:	f06f 001b 	mvn.w	r0, #27
}
    5498:	bd70      	pop	{r4, r5, r6, pc}
    549a:	bf00      	nop
    549c:	0000dc8c 	.word	0x0000dc8c
    54a0:	00005e5d 	.word	0x00005e5d
    54a4:	0000759b 	.word	0x0000759b

000054a8 <usart_process_byte_sent>:
{
    54a8:	b510      	push	{r4, lr}
    54aa:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    54ac:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    54ae:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    54b2:	429a      	cmp	r2, r3
    54b4:	d009      	beq.n	54ca <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    54b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    54b8:	1c59      	adds	r1, r3, #1
    54ba:	8781      	strh	r1, [r0, #60]	; 0x3c
    54bc:	5cd1      	ldrb	r1, [r2, r3]
    54be:	4b04      	ldr	r3, [pc, #16]	; (54d0 <usart_process_byte_sent+0x28>)
    54c0:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    54c2:	4620      	mov	r0, r4
    54c4:	4b03      	ldr	r3, [pc, #12]	; (54d4 <usart_process_byte_sent+0x2c>)
    54c6:	4798      	blx	r3
    54c8:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    54ca:	4b03      	ldr	r3, [pc, #12]	; (54d8 <usart_process_byte_sent+0x30>)
    54cc:	4798      	blx	r3
    54ce:	bd10      	pop	{r4, pc}
    54d0:	0000756f 	.word	0x0000756f
    54d4:	0000759b 	.word	0x0000759b
    54d8:	000075a3 	.word	0x000075a3

000054dc <usart_async_read>:
{
    54dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54e0:	b082      	sub	sp, #8
    54e2:	460f      	mov	r7, r1
    54e4:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    54e6:	4606      	mov	r6, r0
    54e8:	b1a0      	cbz	r0, 5514 <usart_async_read+0x38>
    54ea:	b199      	cbz	r1, 5514 <usart_async_read+0x38>
    54ec:	2a00      	cmp	r2, #0
    54ee:	d12d      	bne.n	554c <usart_async_read+0x70>
    54f0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    54f4:	4929      	ldr	r1, [pc, #164]	; (559c <usart_async_read+0xc0>)
    54f6:	2000      	movs	r0, #0
    54f8:	4b29      	ldr	r3, [pc, #164]	; (55a0 <usart_async_read+0xc4>)
    54fa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    54fc:	a801      	add	r0, sp, #4
    54fe:	4b29      	ldr	r3, [pc, #164]	; (55a4 <usart_async_read+0xc8>)
    5500:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5502:	f106 0034 	add.w	r0, r6, #52	; 0x34
    5506:	4b28      	ldr	r3, [pc, #160]	; (55a8 <usart_async_read+0xcc>)
    5508:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    550a:	a801      	add	r0, sp, #4
    550c:	4b27      	ldr	r3, [pc, #156]	; (55ac <usart_async_read+0xd0>)
    550e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5510:	2500      	movs	r5, #0
	return (int32_t)was_read;
    5512:	e03e      	b.n	5592 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5514:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5518:	4920      	ldr	r1, [pc, #128]	; (559c <usart_async_read+0xc0>)
    551a:	2000      	movs	r0, #0
    551c:	4b20      	ldr	r3, [pc, #128]	; (55a0 <usart_async_read+0xc4>)
    551e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5520:	a801      	add	r0, sp, #4
    5522:	4b20      	ldr	r3, [pc, #128]	; (55a4 <usart_async_read+0xc8>)
    5524:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5526:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    552a:	4650      	mov	r0, sl
    552c:	4b1e      	ldr	r3, [pc, #120]	; (55a8 <usart_async_read+0xcc>)
    552e:	4798      	blx	r3
    5530:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    5532:	a801      	add	r0, sp, #4
    5534:	4b1d      	ldr	r3, [pc, #116]	; (55ac <usart_async_read+0xd0>)
    5536:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    5538:	f1b9 0f00 	cmp.w	r9, #0
    553c:	d004      	beq.n	5548 <usart_async_read+0x6c>
    553e:	f1b8 0f00 	cmp.w	r8, #0
    5542:	d119      	bne.n	5578 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    5544:	2500      	movs	r5, #0
    5546:	e024      	b.n	5592 <usart_async_read+0xb6>
    5548:	2500      	movs	r5, #0
    554a:	e022      	b.n	5592 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    554c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5550:	4912      	ldr	r1, [pc, #72]	; (559c <usart_async_read+0xc0>)
    5552:	2001      	movs	r0, #1
    5554:	4b12      	ldr	r3, [pc, #72]	; (55a0 <usart_async_read+0xc4>)
    5556:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5558:	a801      	add	r0, sp, #4
    555a:	4b12      	ldr	r3, [pc, #72]	; (55a4 <usart_async_read+0xc8>)
    555c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    555e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    5562:	4650      	mov	r0, sl
    5564:	4b10      	ldr	r3, [pc, #64]	; (55a8 <usart_async_read+0xcc>)
    5566:	4798      	blx	r3
    5568:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    556a:	a801      	add	r0, sp, #4
    556c:	4b0f      	ldr	r3, [pc, #60]	; (55ac <usart_async_read+0xd0>)
    556e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5570:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    5572:	f1b9 0f00 	cmp.w	r9, #0
    5576:	d00c      	beq.n	5592 <usart_async_read+0xb6>
{
    5578:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    557a:	4e0d      	ldr	r6, [pc, #52]	; (55b0 <usart_async_read+0xd4>)
    557c:	1c60      	adds	r0, r4, #1
    557e:	b285      	uxth	r5, r0
    5580:	1939      	adds	r1, r7, r4
    5582:	4650      	mov	r0, sl
    5584:	47b0      	blx	r6
    5586:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    5588:	454c      	cmp	r4, r9
    558a:	d202      	bcs.n	5592 <usart_async_read+0xb6>
    558c:	b2a3      	uxth	r3, r4
    558e:	4598      	cmp	r8, r3
    5590:	d8f4      	bhi.n	557c <usart_async_read+0xa0>
}
    5592:	4628      	mov	r0, r5
    5594:	b002      	add	sp, #8
    5596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    559a:	bf00      	nop
    559c:	0000dc8c 	.word	0x0000dc8c
    55a0:	00005e5d 	.word	0x00005e5d
    55a4:	00004a69 	.word	0x00004a69
    55a8:	00005fd9 	.word	0x00005fd9
    55ac:	00004a77 	.word	0x00004a77
    55b0:	00005f55 	.word	0x00005f55

000055b4 <usart_async_init>:
{
    55b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55b6:	460d      	mov	r5, r1
    55b8:	4616      	mov	r6, r2
    55ba:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    55bc:	4604      	mov	r4, r0
    55be:	b320      	cbz	r0, 560a <usart_async_init+0x56>
    55c0:	b329      	cbz	r1, 560e <usart_async_init+0x5a>
    55c2:	b332      	cbz	r2, 5612 <usart_async_init+0x5e>
    55c4:	1c18      	adds	r0, r3, #0
    55c6:	bf18      	it	ne
    55c8:	2001      	movne	r0, #1
    55ca:	223a      	movs	r2, #58	; 0x3a
    55cc:	4913      	ldr	r1, [pc, #76]	; (561c <usart_async_init+0x68>)
    55ce:	4b14      	ldr	r3, [pc, #80]	; (5620 <usart_async_init+0x6c>)
    55d0:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    55d2:	463a      	mov	r2, r7
    55d4:	4631      	mov	r1, r6
    55d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    55da:	4b12      	ldr	r3, [pc, #72]	; (5624 <usart_async_init+0x70>)
    55dc:	4798      	blx	r3
    55de:	b9d0      	cbnz	r0, 5616 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    55e0:	4629      	mov	r1, r5
    55e2:	f104 0008 	add.w	r0, r4, #8
    55e6:	4b10      	ldr	r3, [pc, #64]	; (5628 <usart_async_init+0x74>)
    55e8:	4798      	blx	r3
	if (init_status) {
    55ea:	4603      	mov	r3, r0
    55ec:	b958      	cbnz	r0, 5606 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    55ee:	4a0f      	ldr	r2, [pc, #60]	; (562c <usart_async_init+0x78>)
    55f0:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    55f2:	4a0f      	ldr	r2, [pc, #60]	; (5630 <usart_async_init+0x7c>)
    55f4:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    55f6:	4a0f      	ldr	r2, [pc, #60]	; (5634 <usart_async_init+0x80>)
    55f8:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    55fa:	4a0f      	ldr	r2, [pc, #60]	; (5638 <usart_async_init+0x84>)
    55fc:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    55fe:	4a0f      	ldr	r2, [pc, #60]	; (563c <usart_async_init+0x88>)
    5600:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    5602:	4a0f      	ldr	r2, [pc, #60]	; (5640 <usart_async_init+0x8c>)
    5604:	6162      	str	r2, [r4, #20]
}
    5606:	4618      	mov	r0, r3
    5608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    560a:	2000      	movs	r0, #0
    560c:	e7dd      	b.n	55ca <usart_async_init+0x16>
    560e:	2000      	movs	r0, #0
    5610:	e7db      	b.n	55ca <usart_async_init+0x16>
    5612:	2000      	movs	r0, #0
    5614:	e7d9      	b.n	55ca <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    5616:	f06f 030c 	mvn.w	r3, #12
    561a:	e7f4      	b.n	5606 <usart_async_init+0x52>
    561c:	0000dc8c 	.word	0x0000dc8c
    5620:	00005e5d 	.word	0x00005e5d
    5624:	00005f05 	.word	0x00005f05
    5628:	000074a1 	.word	0x000074a1
    562c:	000054dd 	.word	0x000054dd
    5630:	00005449 	.word	0x00005449
    5634:	000054a9 	.word	0x000054a9
    5638:	0000542d 	.word	0x0000542d
    563c:	00005405 	.word	0x00005405
    5640:	00005419 	.word	0x00005419

00005644 <usart_async_enable>:
{
    5644:	b510      	push	{r4, lr}
	ASSERT(descr);
    5646:	4604      	mov	r4, r0
    5648:	2261      	movs	r2, #97	; 0x61
    564a:	4906      	ldr	r1, [pc, #24]	; (5664 <usart_async_enable+0x20>)
    564c:	3000      	adds	r0, #0
    564e:	bf18      	it	ne
    5650:	2001      	movne	r0, #1
    5652:	4b05      	ldr	r3, [pc, #20]	; (5668 <usart_async_enable+0x24>)
    5654:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    5656:	f104 0008 	add.w	r0, r4, #8
    565a:	4b04      	ldr	r3, [pc, #16]	; (566c <usart_async_enable+0x28>)
    565c:	4798      	blx	r3
}
    565e:	2000      	movs	r0, #0
    5660:	bd10      	pop	{r4, pc}
    5662:	bf00      	nop
    5664:	0000dc8c 	.word	0x0000dc8c
    5668:	00005e5d 	.word	0x00005e5d
    566c:	00007531 	.word	0x00007531

00005670 <usart_async_disable>:
{
    5670:	b510      	push	{r4, lr}
	ASSERT(descr);
    5672:	4604      	mov	r4, r0
    5674:	226c      	movs	r2, #108	; 0x6c
    5676:	4906      	ldr	r1, [pc, #24]	; (5690 <usart_async_disable+0x20>)
    5678:	3000      	adds	r0, #0
    567a:	bf18      	it	ne
    567c:	2001      	movne	r0, #1
    567e:	4b05      	ldr	r3, [pc, #20]	; (5694 <usart_async_disable+0x24>)
    5680:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    5682:	f104 0008 	add.w	r0, r4, #8
    5686:	4b04      	ldr	r3, [pc, #16]	; (5698 <usart_async_disable+0x28>)
    5688:	4798      	blx	r3
}
    568a:	2000      	movs	r0, #0
    568c:	bd10      	pop	{r4, pc}
    568e:	bf00      	nop
    5690:	0000dc8c 	.word	0x0000dc8c
    5694:	00005e5d 	.word	0x00005e5d
    5698:	00007545 	.word	0x00007545

0000569c <usart_async_get_io_descriptor>:
{
    569c:	b538      	push	{r3, r4, r5, lr}
    569e:	460c      	mov	r4, r1
	ASSERT(descr && io);
    56a0:	4605      	mov	r5, r0
    56a2:	b148      	cbz	r0, 56b8 <usart_async_get_io_descriptor+0x1c>
    56a4:	1c08      	adds	r0, r1, #0
    56a6:	bf18      	it	ne
    56a8:	2001      	movne	r0, #1
    56aa:	2277      	movs	r2, #119	; 0x77
    56ac:	4903      	ldr	r1, [pc, #12]	; (56bc <usart_async_get_io_descriptor+0x20>)
    56ae:	4b04      	ldr	r3, [pc, #16]	; (56c0 <usart_async_get_io_descriptor+0x24>)
    56b0:	4798      	blx	r3
	*io = &descr->io;
    56b2:	6025      	str	r5, [r4, #0]
}
    56b4:	2000      	movs	r0, #0
    56b6:	bd38      	pop	{r3, r4, r5, pc}
    56b8:	2000      	movs	r0, #0
    56ba:	e7f6      	b.n	56aa <usart_async_get_io_descriptor+0xe>
    56bc:	0000dc8c 	.word	0x0000dc8c
    56c0:	00005e5d 	.word	0x00005e5d

000056c4 <usart_async_register_callback>:
{
    56c4:	b570      	push	{r4, r5, r6, lr}
    56c6:	460c      	mov	r4, r1
    56c8:	4616      	mov	r6, r2
	ASSERT(descr);
    56ca:	4605      	mov	r5, r0
    56cc:	2283      	movs	r2, #131	; 0x83
    56ce:	4917      	ldr	r1, [pc, #92]	; (572c <usart_async_register_callback+0x68>)
    56d0:	3000      	adds	r0, #0
    56d2:	bf18      	it	ne
    56d4:	2001      	movne	r0, #1
    56d6:	4b16      	ldr	r3, [pc, #88]	; (5730 <usart_async_register_callback+0x6c>)
    56d8:	4798      	blx	r3
	switch (type) {
    56da:	2c01      	cmp	r4, #1
    56dc:	d010      	beq.n	5700 <usart_async_register_callback+0x3c>
    56de:	b124      	cbz	r4, 56ea <usart_async_register_callback+0x26>
    56e0:	2c02      	cmp	r4, #2
    56e2:	d018      	beq.n	5716 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    56e4:	f06f 000c 	mvn.w	r0, #12
}
    56e8:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    56ea:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    56ec:	1c32      	adds	r2, r6, #0
    56ee:	bf18      	it	ne
    56f0:	2201      	movne	r2, #1
    56f2:	2101      	movs	r1, #1
    56f4:	f105 0008 	add.w	r0, r5, #8
    56f8:	4b0e      	ldr	r3, [pc, #56]	; (5734 <usart_async_register_callback+0x70>)
    56fa:	4798      	blx	r3
	return ERR_NONE;
    56fc:	2000      	movs	r0, #0
		break;
    56fe:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    5700:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    5702:	1c32      	adds	r2, r6, #0
    5704:	bf18      	it	ne
    5706:	2201      	movne	r2, #1
    5708:	2102      	movs	r1, #2
    570a:	f105 0008 	add.w	r0, r5, #8
    570e:	4b09      	ldr	r3, [pc, #36]	; (5734 <usart_async_register_callback+0x70>)
    5710:	4798      	blx	r3
	return ERR_NONE;
    5712:	2000      	movs	r0, #0
		break;
    5714:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    5716:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5718:	1c32      	adds	r2, r6, #0
    571a:	bf18      	it	ne
    571c:	2201      	movne	r2, #1
    571e:	2103      	movs	r1, #3
    5720:	f105 0008 	add.w	r0, r5, #8
    5724:	4b03      	ldr	r3, [pc, #12]	; (5734 <usart_async_register_callback+0x70>)
    5726:	4798      	blx	r3
	return ERR_NONE;
    5728:	2000      	movs	r0, #0
		break;
    572a:	bd70      	pop	{r4, r5, r6, pc}
    572c:	0000dc8c 	.word	0x0000dc8c
    5730:	00005e5d 	.word	0x00005e5d
    5734:	000075ad 	.word	0x000075ad

00005738 <usart_async_set_parity>:
{
    5738:	b538      	push	{r3, r4, r5, lr}
    573a:	460d      	mov	r5, r1
	ASSERT(descr);
    573c:	4604      	mov	r4, r0
    573e:	22cb      	movs	r2, #203	; 0xcb
    5740:	4906      	ldr	r1, [pc, #24]	; (575c <usart_async_set_parity+0x24>)
    5742:	3000      	adds	r0, #0
    5744:	bf18      	it	ne
    5746:	2001      	movne	r0, #1
    5748:	4b05      	ldr	r3, [pc, #20]	; (5760 <usart_async_set_parity+0x28>)
    574a:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    574c:	4629      	mov	r1, r5
    574e:	f104 0008 	add.w	r0, r4, #8
    5752:	4b04      	ldr	r3, [pc, #16]	; (5764 <usart_async_set_parity+0x2c>)
    5754:	4798      	blx	r3
}
    5756:	2000      	movs	r0, #0
    5758:	bd38      	pop	{r3, r4, r5, pc}
    575a:	bf00      	nop
    575c:	0000dc8c 	.word	0x0000dc8c
    5760:	00005e5d 	.word	0x00005e5d
    5764:	00007559 	.word	0x00007559

00005768 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    576c:	460f      	mov	r7, r1
    576e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    5770:	4604      	mov	r4, r0
    5772:	b328      	cbz	r0, 57c0 <usart_sync_write+0x58>
    5774:	b331      	cbz	r1, 57c4 <usart_sync_write+0x5c>
    5776:	1c10      	adds	r0, r2, #0
    5778:	bf18      	it	ne
    577a:	2001      	movne	r0, #1
    577c:	22f1      	movs	r2, #241	; 0xf1
    577e:	4912      	ldr	r1, [pc, #72]	; (57c8 <usart_sync_write+0x60>)
    5780:	4b12      	ldr	r3, [pc, #72]	; (57cc <usart_sync_write+0x64>)
    5782:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    5784:	3408      	adds	r4, #8
    5786:	4d12      	ldr	r5, [pc, #72]	; (57d0 <usart_sync_write+0x68>)
    5788:	4620      	mov	r0, r4
    578a:	47a8      	blx	r5
    578c:	2800      	cmp	r0, #0
    578e:	d0fb      	beq.n	5788 <usart_sync_write+0x20>
    5790:	3f01      	subs	r7, #1
    5792:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5794:	f8df 9040 	ldr.w	r9, [pc, #64]	; 57d8 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    5798:	4d0d      	ldr	r5, [pc, #52]	; (57d0 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    579a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    579e:	4620      	mov	r0, r4
    57a0:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    57a2:	4620      	mov	r0, r4
    57a4:	47a8      	blx	r5
    57a6:	2800      	cmp	r0, #0
    57a8:	d0fb      	beq.n	57a2 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    57aa:	3601      	adds	r6, #1
    57ac:	4546      	cmp	r6, r8
    57ae:	d3f4      	bcc.n	579a <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    57b0:	4d08      	ldr	r5, [pc, #32]	; (57d4 <usart_sync_write+0x6c>)
    57b2:	4620      	mov	r0, r4
    57b4:	47a8      	blx	r5
    57b6:	2800      	cmp	r0, #0
    57b8:	d0fb      	beq.n	57b2 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    57ba:	4630      	mov	r0, r6
    57bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    57c0:	2000      	movs	r0, #0
    57c2:	e7db      	b.n	577c <usart_sync_write+0x14>
    57c4:	2000      	movs	r0, #0
    57c6:	e7d9      	b.n	577c <usart_sync_write+0x14>
    57c8:	0000dcac 	.word	0x0000dcac
    57cc:	00005e5d 	.word	0x00005e5d
    57d0:	0000757d 	.word	0x0000757d
    57d4:	00007587 	.word	0x00007587
    57d8:	00007569 	.word	0x00007569

000057dc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    57dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    57e0:	460f      	mov	r7, r1
    57e2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    57e4:	4604      	mov	r4, r0
    57e6:	b1e0      	cbz	r0, 5822 <usart_sync_read+0x46>
    57e8:	b1e9      	cbz	r1, 5826 <usart_sync_read+0x4a>
    57ea:	1c10      	adds	r0, r2, #0
    57ec:	bf18      	it	ne
    57ee:	2001      	movne	r0, #1
    57f0:	f44f 7286 	mov.w	r2, #268	; 0x10c
    57f4:	490d      	ldr	r1, [pc, #52]	; (582c <usart_sync_read+0x50>)
    57f6:	4b0e      	ldr	r3, [pc, #56]	; (5830 <usart_sync_read+0x54>)
    57f8:	4798      	blx	r3
    57fa:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    57fc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    57fe:	3408      	adds	r4, #8
    5800:	4d0c      	ldr	r5, [pc, #48]	; (5834 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    5802:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5838 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    5806:	4620      	mov	r0, r4
    5808:	47a8      	blx	r5
    580a:	2800      	cmp	r0, #0
    580c:	d0fb      	beq.n	5806 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    580e:	4620      	mov	r0, r4
    5810:	47c8      	blx	r9
    5812:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    5816:	3601      	adds	r6, #1
    5818:	4546      	cmp	r6, r8
    581a:	d3f4      	bcc.n	5806 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    581c:	4630      	mov	r0, r6
    581e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    5822:	2000      	movs	r0, #0
    5824:	e7e4      	b.n	57f0 <usart_sync_read+0x14>
    5826:	2000      	movs	r0, #0
    5828:	e7e2      	b.n	57f0 <usart_sync_read+0x14>
    582a:	bf00      	nop
    582c:	0000dcac 	.word	0x0000dcac
    5830:	00005e5d 	.word	0x00005e5d
    5834:	00007591 	.word	0x00007591
    5838:	00007575 	.word	0x00007575

0000583c <usart_sync_init>:
{
    583c:	b538      	push	{r3, r4, r5, lr}
    583e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    5840:	4604      	mov	r4, r0
    5842:	b198      	cbz	r0, 586c <usart_sync_init+0x30>
    5844:	1c08      	adds	r0, r1, #0
    5846:	bf18      	it	ne
    5848:	2001      	movne	r0, #1
    584a:	2234      	movs	r2, #52	; 0x34
    584c:	4908      	ldr	r1, [pc, #32]	; (5870 <usart_sync_init+0x34>)
    584e:	4b09      	ldr	r3, [pc, #36]	; (5874 <usart_sync_init+0x38>)
    5850:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    5852:	4629      	mov	r1, r5
    5854:	f104 0008 	add.w	r0, r4, #8
    5858:	4b07      	ldr	r3, [pc, #28]	; (5878 <usart_sync_init+0x3c>)
    585a:	4798      	blx	r3
	if (init_status) {
    585c:	4603      	mov	r3, r0
    585e:	b918      	cbnz	r0, 5868 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    5860:	4a06      	ldr	r2, [pc, #24]	; (587c <usart_sync_init+0x40>)
    5862:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    5864:	4a06      	ldr	r2, [pc, #24]	; (5880 <usart_sync_init+0x44>)
    5866:	6022      	str	r2, [r4, #0]
}
    5868:	4618      	mov	r0, r3
    586a:	bd38      	pop	{r3, r4, r5, pc}
    586c:	2000      	movs	r0, #0
    586e:	e7ec      	b.n	584a <usart_sync_init+0xe>
    5870:	0000dcac 	.word	0x0000dcac
    5874:	00005e5d 	.word	0x00005e5d
    5878:	00007475 	.word	0x00007475
    587c:	000057dd 	.word	0x000057dd
    5880:	00005769 	.word	0x00005769

00005884 <usart_sync_enable>:
{
    5884:	b510      	push	{r4, lr}
	ASSERT(descr);
    5886:	4604      	mov	r4, r0
    5888:	2253      	movs	r2, #83	; 0x53
    588a:	4906      	ldr	r1, [pc, #24]	; (58a4 <usart_sync_enable+0x20>)
    588c:	3000      	adds	r0, #0
    588e:	bf18      	it	ne
    5890:	2001      	movne	r0, #1
    5892:	4b05      	ldr	r3, [pc, #20]	; (58a8 <usart_sync_enable+0x24>)
    5894:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    5896:	f104 0008 	add.w	r0, r4, #8
    589a:	4b04      	ldr	r3, [pc, #16]	; (58ac <usart_sync_enable+0x28>)
    589c:	4798      	blx	r3
}
    589e:	2000      	movs	r0, #0
    58a0:	bd10      	pop	{r4, pc}
    58a2:	bf00      	nop
    58a4:	0000dcac 	.word	0x0000dcac
    58a8:	00005e5d 	.word	0x00005e5d
    58ac:	0000751d 	.word	0x0000751d

000058b0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    58b0:	4b0f      	ldr	r3, [pc, #60]	; (58f0 <_usb_d_find_ep+0x40>)
    58b2:	7859      	ldrb	r1, [r3, #1]
    58b4:	4288      	cmp	r0, r1
    58b6:	d018      	beq.n	58ea <_usb_d_find_ep+0x3a>
{
    58b8:	b430      	push	{r4, r5}
    58ba:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    58bc:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    58be:	f000 050f 	and.w	r5, r0, #15
    58c2:	e007      	b.n	58d4 <_usb_d_find_ep+0x24>
    58c4:	3301      	adds	r3, #1
    58c6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    58c8:	2b0d      	cmp	r3, #13
    58ca:	d009      	beq.n	58e0 <_usb_d_find_ep+0x30>
    58cc:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    58ce:	7851      	ldrb	r1, [r2, #1]
    58d0:	4281      	cmp	r1, r0
    58d2:	d007      	beq.n	58e4 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    58d4:	7814      	ldrb	r4, [r2, #0]
    58d6:	2c00      	cmp	r4, #0
    58d8:	d1f4      	bne.n	58c4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    58da:	428d      	cmp	r5, r1
    58dc:	d1f2      	bne.n	58c4 <_usb_d_find_ep+0x14>
    58de:	e001      	b.n	58e4 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    58e0:	f04f 33ff 	mov.w	r3, #4294967295
}
    58e4:	4618      	mov	r0, r3
    58e6:	bc30      	pop	{r4, r5}
    58e8:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    58ea:	2300      	movs	r3, #0
}
    58ec:	4618      	mov	r0, r3
    58ee:	4770      	bx	lr
    58f0:	2000064c 	.word	0x2000064c

000058f4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    58f4:	2000      	movs	r0, #0
    58f6:	4770      	bx	lr

000058f8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    58f8:	b538      	push	{r3, r4, r5, lr}
    58fa:	4604      	mov	r4, r0
    58fc:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    58fe:	4b09      	ldr	r3, [pc, #36]	; (5924 <usb_d_cb_trans_more+0x2c>)
    5900:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5902:	4b09      	ldr	r3, [pc, #36]	; (5928 <usb_d_cb_trans_more+0x30>)
    5904:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5908:	789b      	ldrb	r3, [r3, #2]
    590a:	2b03      	cmp	r3, #3
    590c:	d001      	beq.n	5912 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    590e:	2000      	movs	r0, #0
}
    5910:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    5912:	4b05      	ldr	r3, [pc, #20]	; (5928 <usb_d_cb_trans_more+0x30>)
    5914:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5918:	6983      	ldr	r3, [r0, #24]
    591a:	4629      	mov	r1, r5
    591c:	4620      	mov	r0, r4
    591e:	4798      	blx	r3
    5920:	bd38      	pop	{r3, r4, r5, pc}
    5922:	bf00      	nop
    5924:	000058b1 	.word	0x000058b1
    5928:	2000064c 	.word	0x2000064c

0000592c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    592c:	b5f0      	push	{r4, r5, r6, r7, lr}
    592e:	b085      	sub	sp, #20
    5930:	4606      	mov	r6, r0
    5932:	460d      	mov	r5, r1
    5934:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5936:	4b4d      	ldr	r3, [pc, #308]	; (5a6c <_usb_d_cb_trans_done+0x140>)
    5938:	4798      	blx	r3
    593a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    593c:	2d00      	cmp	r5, #0
    593e:	d15b      	bne.n	59f8 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5940:	4a4b      	ldr	r2, [pc, #300]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5942:	0143      	lsls	r3, r0, #5
    5944:	18d1      	adds	r1, r2, r3
    5946:	2000      	movs	r0, #0
    5948:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    594a:	5cd3      	ldrb	r3, [r2, r3]
    594c:	b173      	cbz	r3, 596c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    594e:	4b48      	ldr	r3, [pc, #288]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5950:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5954:	2201      	movs	r2, #1
    5956:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5958:	4845      	ldr	r0, [pc, #276]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    595a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    595e:	69c3      	ldr	r3, [r0, #28]
    5960:	463a      	mov	r2, r7
    5962:	78c1      	ldrb	r1, [r0, #3]
    5964:	4630      	mov	r0, r6
    5966:	4798      	blx	r3
}
    5968:	b005      	add	sp, #20
    596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    596c:	788b      	ldrb	r3, [r1, #2]
    596e:	2b03      	cmp	r3, #3
    5970:	d00b      	beq.n	598a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5972:	483f      	ldr	r0, [pc, #252]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5974:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    5978:	4614      	mov	r4, r2
    597a:	69d3      	ldr	r3, [r2, #28]
    597c:	320c      	adds	r2, #12
    597e:	2100      	movs	r1, #0
    5980:	7860      	ldrb	r0, [r4, #1]
    5982:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5984:	2302      	movs	r3, #2
    5986:	70a3      	strb	r3, [r4, #2]
    5988:	e7ee      	b.n	5968 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    598a:	460b      	mov	r3, r1
    598c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5990:	460a      	mov	r2, r1
    5992:	69ce      	ldr	r6, [r1, #28]
    5994:	320c      	adds	r2, #12
    5996:	2101      	movs	r1, #1
    5998:	7858      	ldrb	r0, [r3, #1]
    599a:	47b0      	blx	r6
		if (err) {
    599c:	b1a0      	cbz	r0, 59c8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    599e:	4b34      	ldr	r3, [pc, #208]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    59a0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    59a4:	2205      	movs	r2, #5
    59a6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    59a8:	2202      	movs	r2, #2
    59aa:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    59ac:	2d00      	cmp	r5, #0
    59ae:	db09      	blt.n	59c4 <_usb_d_cb_trans_done+0x98>
    59b0:	482f      	ldr	r0, [pc, #188]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    59b2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    59b6:	7840      	ldrb	r0, [r0, #1]
    59b8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    59bc:	2101      	movs	r1, #1
    59be:	4b2d      	ldr	r3, [pc, #180]	; (5a74 <_usb_d_cb_trans_done+0x148>)
    59c0:	4798      	blx	r3
    59c2:	e7d1      	b.n	5968 <_usb_d_cb_trans_done+0x3c>
    59c4:	7858      	ldrb	r0, [r3, #1]
    59c6:	e7f9      	b.n	59bc <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    59c8:	4829      	ldr	r0, [pc, #164]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    59ca:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    59ce:	2304      	movs	r3, #4
    59d0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    59d2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    59d4:	2200      	movs	r2, #0
    59d6:	9201      	str	r2, [sp, #4]
    59d8:	9202      	str	r2, [sp, #8]
    59da:	4295      	cmp	r5, r2
    59dc:	bfac      	ite	ge
    59de:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    59e2:	f003 030f 	andlt.w	r3, r3, #15
    59e6:	f88d 300c 	strb.w	r3, [sp, #12]
    59ea:	2301      	movs	r3, #1
    59ec:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    59f0:	a801      	add	r0, sp, #4
    59f2:	4b21      	ldr	r3, [pc, #132]	; (5a78 <_usb_d_cb_trans_done+0x14c>)
    59f4:	4798      	blx	r3
    59f6:	e7b7      	b.n	5968 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    59f8:	2d01      	cmp	r5, #1
    59fa:	d00a      	beq.n	5a12 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    59fc:	2d02      	cmp	r5, #2
    59fe:	d01c      	beq.n	5a3a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    5a00:	2d03      	cmp	r5, #3
    5a02:	d02a      	beq.n	5a5a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    5a04:	4b1a      	ldr	r3, [pc, #104]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5a06:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5a0a:	2206      	movs	r2, #6
    5a0c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5a0e:	70da      	strb	r2, [r3, #3]
    5a10:	e7a2      	b.n	5958 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5a12:	4a17      	ldr	r2, [pc, #92]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5a14:	0143      	lsls	r3, r0, #5
    5a16:	18d1      	adds	r1, r2, r3
    5a18:	2002      	movs	r0, #2
    5a1a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5a1c:	5cd3      	ldrb	r3, [r2, r3]
    5a1e:	b12b      	cbz	r3, 5a2c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5a20:	4b13      	ldr	r3, [pc, #76]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5a22:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5a26:	2205      	movs	r2, #5
    5a28:	709a      	strb	r2, [r3, #2]
    5a2a:	e795      	b.n	5958 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5a2c:	460b      	mov	r3, r1
    5a2e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5a30:	2100      	movs	r1, #0
    5a32:	4630      	mov	r0, r6
    5a34:	4b0f      	ldr	r3, [pc, #60]	; (5a74 <_usb_d_cb_trans_done+0x148>)
    5a36:	4798      	blx	r3
    5a38:	e78e      	b.n	5958 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5a3a:	4a0d      	ldr	r2, [pc, #52]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5a3c:	0143      	lsls	r3, r0, #5
    5a3e:	18d1      	adds	r1, r2, r3
    5a40:	2004      	movs	r0, #4
    5a42:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5a44:	5cd3      	ldrb	r3, [r2, r3]
    5a46:	b12b      	cbz	r3, 5a54 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5a48:	4b09      	ldr	r3, [pc, #36]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5a4a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5a4e:	2201      	movs	r2, #1
    5a50:	709a      	strb	r2, [r3, #2]
    5a52:	e781      	b.n	5958 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5a54:	2302      	movs	r3, #2
    5a56:	708b      	strb	r3, [r1, #2]
			return;
    5a58:	e786      	b.n	5968 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5a5a:	4b05      	ldr	r3, [pc, #20]	; (5a70 <_usb_d_cb_trans_done+0x144>)
    5a5c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5a60:	2200      	movs	r2, #0
    5a62:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5a64:	2205      	movs	r2, #5
    5a66:	70da      	strb	r2, [r3, #3]
    5a68:	e776      	b.n	5958 <_usb_d_cb_trans_done+0x2c>
    5a6a:	bf00      	nop
    5a6c:	000058b1 	.word	0x000058b1
    5a70:	2000064c 	.word	0x2000064c
    5a74:	000094e9 	.word	0x000094e9
    5a78:	00009691 	.word	0x00009691

00005a7c <usb_d_cb_trans_setup>:
{
    5a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a80:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5a82:	4b1c      	ldr	r3, [pc, #112]	; (5af4 <usb_d_cb_trans_setup+0x78>)
    5a84:	4798      	blx	r3
    5a86:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    5a88:	4c1b      	ldr	r4, [pc, #108]	; (5af8 <usb_d_cb_trans_setup+0x7c>)
    5a8a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    5a8e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5a90:	4621      	mov	r1, r4
    5a92:	4628      	mov	r0, r5
    5a94:	4b19      	ldr	r3, [pc, #100]	; (5afc <usb_d_cb_trans_setup+0x80>)
    5a96:	4798      	blx	r3
	if (n != 8) {
    5a98:	b2c0      	uxtb	r0, r0
    5a9a:	2808      	cmp	r0, #8
    5a9c:	d009      	beq.n	5ab2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a9e:	2101      	movs	r1, #1
    5aa0:	4628      	mov	r0, r5
    5aa2:	4c17      	ldr	r4, [pc, #92]	; (5b00 <usb_d_cb_trans_setup+0x84>)
    5aa4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5aa6:	2101      	movs	r1, #1
    5aa8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    5aac:	47a0      	blx	r4
		return;
    5aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5ab2:	2100      	movs	r1, #0
    5ab4:	4628      	mov	r0, r5
    5ab6:	4f12      	ldr	r7, [pc, #72]	; (5b00 <usb_d_cb_trans_setup+0x84>)
    5ab8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5aba:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    5abe:	2100      	movs	r1, #0
    5ac0:	4640      	mov	r0, r8
    5ac2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5ac4:	4b0c      	ldr	r3, [pc, #48]	; (5af8 <usb_d_cb_trans_setup+0x7c>)
    5ac6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5aca:	2201      	movs	r2, #1
    5acc:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5ace:	695b      	ldr	r3, [r3, #20]
    5ad0:	4621      	mov	r1, r4
    5ad2:	4628      	mov	r0, r5
    5ad4:	4798      	blx	r3
    5ad6:	b108      	cbz	r0, 5adc <usb_d_cb_trans_setup+0x60>
    5ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5adc:	4b06      	ldr	r3, [pc, #24]	; (5af8 <usb_d_cb_trans_setup+0x7c>)
    5ade:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5ae2:	2305      	movs	r3, #5
    5ae4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5ae6:	2101      	movs	r1, #1
    5ae8:	4628      	mov	r0, r5
    5aea:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5aec:	2101      	movs	r1, #1
    5aee:	4640      	mov	r0, r8
    5af0:	47b8      	blx	r7
    5af2:	e7f1      	b.n	5ad8 <usb_d_cb_trans_setup+0x5c>
    5af4:	000058b1 	.word	0x000058b1
    5af8:	2000064c 	.word	0x2000064c
    5afc:	00009631 	.word	0x00009631
    5b00:	000094e9 	.word	0x000094e9

00005b04 <usb_d_init>:

int32_t usb_d_init(void)
{
    5b04:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    5b06:	4b11      	ldr	r3, [pc, #68]	; (5b4c <usb_d_init+0x48>)
    5b08:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    5b0a:	2800      	cmp	r0, #0
    5b0c:	db1d      	blt.n	5b4a <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5b0e:	4c10      	ldr	r4, [pc, #64]	; (5b50 <usb_d_init+0x4c>)
    5b10:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    5b14:	2100      	movs	r1, #0
    5b16:	4620      	mov	r0, r4
    5b18:	4b0e      	ldr	r3, [pc, #56]	; (5b54 <usb_d_init+0x50>)
    5b1a:	4798      	blx	r3
    5b1c:	4623      	mov	r3, r4
    5b1e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5b22:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5b24:	4a0c      	ldr	r2, [pc, #48]	; (5b58 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5b26:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5b28:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5b2a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5b2c:	61da      	str	r2, [r3, #28]
    5b2e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5b30:	4283      	cmp	r3, r0
    5b32:	d1f8      	bne.n	5b26 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5b34:	4909      	ldr	r1, [pc, #36]	; (5b5c <usb_d_init+0x58>)
    5b36:	2000      	movs	r0, #0
    5b38:	4c09      	ldr	r4, [pc, #36]	; (5b60 <usb_d_init+0x5c>)
    5b3a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5b3c:	4909      	ldr	r1, [pc, #36]	; (5b64 <usb_d_init+0x60>)
    5b3e:	2001      	movs	r0, #1
    5b40:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5b42:	4909      	ldr	r1, [pc, #36]	; (5b68 <usb_d_init+0x64>)
    5b44:	2002      	movs	r0, #2
    5b46:	47a0      	blx	r4
	return ERR_NONE;
    5b48:	2000      	movs	r0, #0
}
    5b4a:	bd10      	pop	{r4, pc}
    5b4c:	00008eb5 	.word	0x00008eb5
    5b50:	2000064c 	.word	0x2000064c
    5b54:	0000c467 	.word	0x0000c467
    5b58:	000058f5 	.word	0x000058f5
    5b5c:	00005a7d 	.word	0x00005a7d
    5b60:	00009899 	.word	0x00009899
    5b64:	000058f9 	.word	0x000058f9
    5b68:	0000592d 	.word	0x0000592d

00005b6c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5b6c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5b6e:	4b01      	ldr	r3, [pc, #4]	; (5b74 <usb_d_register_callback+0x8>)
    5b70:	4798      	blx	r3
    5b72:	bd08      	pop	{r3, pc}
    5b74:	00009871 	.word	0x00009871

00005b78 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    5b78:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    5b7a:	4b01      	ldr	r3, [pc, #4]	; (5b80 <usb_d_enable+0x8>)
    5b7c:	4798      	blx	r3
}
    5b7e:	bd08      	pop	{r3, pc}
    5b80:	00008fbd 	.word	0x00008fbd

00005b84 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5b84:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    5b86:	4b01      	ldr	r3, [pc, #4]	; (5b8c <usb_d_attach+0x8>)
    5b88:	4798      	blx	r3
    5b8a:	bd08      	pop	{r3, pc}
    5b8c:	00009029 	.word	0x00009029

00005b90 <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    5b90:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    5b92:	4b01      	ldr	r3, [pc, #4]	; (5b98 <usb_d_get_frame_num+0x8>)
    5b94:	4798      	blx	r3
}
    5b96:	bd08      	pop	{r3, pc}
    5b98:	00009047 	.word	0x00009047

00005b9c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5b9c:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    5b9e:	4b01      	ldr	r3, [pc, #4]	; (5ba4 <usb_d_set_address+0x8>)
    5ba0:	4798      	blx	r3
    5ba2:	bd08      	pop	{r3, pc}
    5ba4:	0000903b 	.word	0x0000903b

00005ba8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5baa:	4606      	mov	r6, r0
    5bac:	460c      	mov	r4, r1
    5bae:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5bb0:	4b0f      	ldr	r3, [pc, #60]	; (5bf0 <usb_d_ep_init+0x48>)
    5bb2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    5bb4:	2800      	cmp	r0, #0
    5bb6:	da14      	bge.n	5be2 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5bb8:	20ff      	movs	r0, #255	; 0xff
    5bba:	4b0d      	ldr	r3, [pc, #52]	; (5bf0 <usb_d_ep_init+0x48>)
    5bbc:	4798      	blx	r3
		if (ep_index < 0) {
    5bbe:	1e05      	subs	r5, r0, #0
    5bc0:	db12      	blt.n	5be8 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5bc2:	463a      	mov	r2, r7
    5bc4:	4621      	mov	r1, r4
    5bc6:	4630      	mov	r0, r6
    5bc8:	4b0a      	ldr	r3, [pc, #40]	; (5bf4 <usb_d_ep_init+0x4c>)
    5bca:	4798      	blx	r3
	if (rc < 0) {
    5bcc:	2800      	cmp	r0, #0
    5bce:	db0d      	blt.n	5bec <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    5bd0:	4b09      	ldr	r3, [pc, #36]	; (5bf8 <usb_d_ep_init+0x50>)
    5bd2:	0168      	lsls	r0, r5, #5
    5bd4:	181a      	adds	r2, r3, r0
    5bd6:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5bd8:	f004 0403 	and.w	r4, r4, #3
    5bdc:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    5bde:	2000      	movs	r0, #0
    5be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    5be2:	f06f 0013 	mvn.w	r0, #19
    5be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    5be8:	f06f 0014 	mvn.w	r0, #20
}
    5bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bee:	bf00      	nop
    5bf0:	000058b1 	.word	0x000058b1
    5bf4:	00009055 	.word	0x00009055
    5bf8:	2000064c 	.word	0x2000064c

00005bfc <usb_d_ep0_init>:
{
    5bfc:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5bfe:	4602      	mov	r2, r0
    5c00:	2100      	movs	r1, #0
    5c02:	4608      	mov	r0, r1
    5c04:	4b01      	ldr	r3, [pc, #4]	; (5c0c <usb_d_ep0_init+0x10>)
    5c06:	4798      	blx	r3
}
    5c08:	bd08      	pop	{r3, pc}
    5c0a:	bf00      	nop
    5c0c:	00005ba9 	.word	0x00005ba9

00005c10 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5c10:	b538      	push	{r3, r4, r5, lr}
    5c12:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5c14:	4b06      	ldr	r3, [pc, #24]	; (5c30 <usb_d_ep_deinit+0x20>)
    5c16:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5c18:	1e04      	subs	r4, r0, #0
    5c1a:	db07      	blt.n	5c2c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5c1c:	4628      	mov	r0, r5
    5c1e:	4b05      	ldr	r3, [pc, #20]	; (5c34 <usb_d_ep_deinit+0x24>)
    5c20:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5c22:	4805      	ldr	r0, [pc, #20]	; (5c38 <usb_d_ep_deinit+0x28>)
    5c24:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5c28:	23ff      	movs	r3, #255	; 0xff
    5c2a:	7043      	strb	r3, [r0, #1]
    5c2c:	bd38      	pop	{r3, r4, r5, pc}
    5c2e:	bf00      	nop
    5c30:	000058b1 	.word	0x000058b1
    5c34:	0000916d 	.word	0x0000916d
    5c38:	2000064c 	.word	0x2000064c

00005c3c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5c3c:	b538      	push	{r3, r4, r5, lr}
    5c3e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5c40:	4b0e      	ldr	r3, [pc, #56]	; (5c7c <usb_d_ep_enable+0x40>)
    5c42:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5c44:	1e04      	subs	r4, r0, #0
    5c46:	db16      	blt.n	5c76 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5c48:	0163      	lsls	r3, r4, #5
    5c4a:	4a0d      	ldr	r2, [pc, #52]	; (5c80 <usb_d_ep_enable+0x44>)
    5c4c:	5cd3      	ldrb	r3, [r2, r3]
    5c4e:	2b00      	cmp	r3, #0
    5c50:	bf0c      	ite	eq
    5c52:	2202      	moveq	r2, #2
    5c54:	2201      	movne	r2, #1
    5c56:	4b0a      	ldr	r3, [pc, #40]	; (5c80 <usb_d_ep_enable+0x44>)
    5c58:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5c5c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5c5e:	4628      	mov	r0, r5
    5c60:	4b08      	ldr	r3, [pc, #32]	; (5c84 <usb_d_ep_enable+0x48>)
    5c62:	4798      	blx	r3
	if (rc < 0) {
    5c64:	2800      	cmp	r0, #0
    5c66:	db00      	blt.n	5c6a <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5c68:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5c6a:	4b05      	ldr	r3, [pc, #20]	; (5c80 <usb_d_ep_enable+0x44>)
    5c6c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5c70:	2300      	movs	r3, #0
    5c72:	70a3      	strb	r3, [r4, #2]
    5c74:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    5c76:	f06f 0011 	mvn.w	r0, #17
    5c7a:	e7f5      	b.n	5c68 <usb_d_ep_enable+0x2c>
    5c7c:	000058b1 	.word	0x000058b1
    5c80:	2000064c 	.word	0x2000064c
    5c84:	00009231 	.word	0x00009231

00005c88 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c8c:	b086      	sub	sp, #24
    5c8e:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5c90:	7a07      	ldrb	r7, [r0, #8]
    5c92:	4638      	mov	r0, r7
    5c94:	4b3f      	ldr	r3, [pc, #252]	; (5d94 <usb_d_ep_transfer+0x10c>)
    5c96:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5c98:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5c9a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5c9e:	1e06      	subs	r6, r0, #0
    5ca0:	db72      	blt.n	5d88 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    5ca2:	a804      	add	r0, sp, #16
    5ca4:	4b3c      	ldr	r3, [pc, #240]	; (5d98 <usb_d_ep_transfer+0x110>)
    5ca6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5ca8:	4b3c      	ldr	r3, [pc, #240]	; (5d9c <usb_d_ep_transfer+0x114>)
    5caa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5cae:	789b      	ldrb	r3, [r3, #2]
    5cb0:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    5cb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5cb8:	b2db      	uxtb	r3, r3
    5cba:	2b01      	cmp	r3, #1
    5cbc:	d011      	beq.n	5ce2 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    5cbe:	a804      	add	r0, sp, #16
    5cc0:	4b37      	ldr	r3, [pc, #220]	; (5da0 <usb_d_ep_transfer+0x118>)
    5cc2:	4798      	blx	r3
		switch (state) {
    5cc4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5cc8:	b2db      	uxtb	r3, r3
    5cca:	2b05      	cmp	r3, #5
    5ccc:	d05f      	beq.n	5d8e <usb_d_ep_transfer+0x106>
    5cce:	2b06      	cmp	r3, #6
    5cd0:	d023      	beq.n	5d1a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	bf0c      	ite	eq
    5cd6:	f06f 0012 	mvneq.w	r0, #18
    5cda:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    5cdc:	b006      	add	sp, #24
    5cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    5ce2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5d9c <usb_d_ep_transfer+0x114>
    5ce6:	ea4f 1946 	mov.w	r9, r6, lsl #5
    5cea:	eb0a 0309 	add.w	r3, sl, r9
    5cee:	2203      	movs	r2, #3
    5cf0:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5cf2:	a804      	add	r0, sp, #16
    5cf4:	4b2a      	ldr	r3, [pc, #168]	; (5da0 <usb_d_ep_transfer+0x118>)
    5cf6:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5cf8:	f81a 3009 	ldrb.w	r3, [sl, r9]
    5cfc:	b183      	cbz	r3, 5d20 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5cfe:	7a22      	ldrb	r2, [r4, #8]
    5d00:	3500      	adds	r5, #0
    5d02:	bf18      	it	ne
    5d04:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    5d06:	6823      	ldr	r3, [r4, #0]
    5d08:	9301      	str	r3, [sp, #4]
    5d0a:	f8cd 8008 	str.w	r8, [sp, #8]
    5d0e:	f017 0f80 	tst.w	r7, #128	; 0x80
    5d12:	d119      	bne.n	5d48 <usb_d_ep_transfer+0xc0>
    5d14:	f002 030f 	and.w	r3, r2, #15
    5d18:	e018      	b.n	5d4c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    5d1a:	f06f 000f 	mvn.w	r0, #15
    5d1e:	e7dd      	b.n	5cdc <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5d20:	4b1e      	ldr	r3, [pc, #120]	; (5d9c <usb_d_ep_transfer+0x114>)
    5d22:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5d26:	7cda      	ldrb	r2, [r3, #19]
    5d28:	7c9d      	ldrb	r5, [r3, #18]
    5d2a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    5d2e:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    5d30:	b9a5      	cbnz	r5, 5d5c <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5d32:	4b1a      	ldr	r3, [pc, #104]	; (5d9c <usb_d_ep_transfer+0x114>)
    5d34:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5d38:	2304      	movs	r3, #4
    5d3a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5d3c:	2300      	movs	r3, #0
			zlp                 = true;
    5d3e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5d40:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5d42:	6821      	ldr	r1, [r4, #0]
    5d44:	9101      	str	r1, [sp, #4]
    5d46:	9302      	str	r3, [sp, #8]
    5d48:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5d4c:	f88d 300c 	strb.w	r3, [sp, #12]
    5d50:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5d54:	a801      	add	r0, sp, #4
    5d56:	4b13      	ldr	r3, [pc, #76]	; (5da4 <usb_d_ep_transfer+0x11c>)
    5d58:	4798      	blx	r3
	return rc;
    5d5a:	e7bf      	b.n	5cdc <usb_d_ep_transfer+0x54>
    5d5c:	4643      	mov	r3, r8
    5d5e:	45a8      	cmp	r8, r5
    5d60:	bf28      	it	cs
    5d62:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5d64:	4a0d      	ldr	r2, [pc, #52]	; (5d9c <usb_d_ep_transfer+0x114>)
    5d66:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5d6a:	f996 200c 	ldrsb.w	r2, [r6, #12]
    5d6e:	2a00      	cmp	r2, #0
    5d70:	db05      	blt.n	5d7e <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5d72:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5d74:	6821      	ldr	r1, [r4, #0]
    5d76:	9101      	str	r1, [sp, #4]
    5d78:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5d7a:	2500      	movs	r5, #0
    5d7c:	e7ca      	b.n	5d14 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    5d7e:	429d      	cmp	r5, r3
    5d80:	bf94      	ite	ls
    5d82:	2500      	movls	r5, #0
    5d84:	2501      	movhi	r5, #1
    5d86:	e7db      	b.n	5d40 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5d88:	f06f 0011 	mvn.w	r0, #17
    5d8c:	e7a6      	b.n	5cdc <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    5d8e:	2002      	movs	r0, #2
    5d90:	e7a4      	b.n	5cdc <usb_d_ep_transfer+0x54>
    5d92:	bf00      	nop
    5d94:	000058b1 	.word	0x000058b1
    5d98:	00004a69 	.word	0x00004a69
    5d9c:	2000064c 	.word	0x2000064c
    5da0:	00004a77 	.word	0x00004a77
    5da4:	00009691 	.word	0x00009691

00005da8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5da8:	b538      	push	{r3, r4, r5, lr}
    5daa:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5dac:	b141      	cbz	r1, 5dc0 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    5dae:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5db0:	bf0c      	ite	eq
    5db2:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5db4:	2102      	movne	r1, #2
    5db6:	4b13      	ldr	r3, [pc, #76]	; (5e04 <usb_d_ep_halt+0x5c>)
    5db8:	4798      	blx	r3
    5dba:	4603      	mov	r3, r0
	}
}
    5dbc:	4618      	mov	r0, r3
    5dbe:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    5dc0:	4b11      	ldr	r3, [pc, #68]	; (5e08 <usb_d_ep_halt+0x60>)
    5dc2:	4798      	blx	r3
	if (ep_index < 0) {
    5dc4:	1e05      	subs	r5, r0, #0
    5dc6:	db19      	blt.n	5dfc <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5dc8:	2102      	movs	r1, #2
    5dca:	4620      	mov	r0, r4
    5dcc:	4b0d      	ldr	r3, [pc, #52]	; (5e04 <usb_d_ep_halt+0x5c>)
    5dce:	4798      	blx	r3
    5dd0:	4603      	mov	r3, r0
    5dd2:	2800      	cmp	r0, #0
    5dd4:	d0f2      	beq.n	5dbc <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5dd6:	2100      	movs	r1, #0
    5dd8:	4620      	mov	r0, r4
    5dda:	4b0a      	ldr	r3, [pc, #40]	; (5e04 <usb_d_ep_halt+0x5c>)
    5ddc:	4798      	blx	r3
		if (rc < 0) {
    5dde:	1e03      	subs	r3, r0, #0
    5de0:	dbec      	blt.n	5dbc <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5de2:	4b0a      	ldr	r3, [pc, #40]	; (5e0c <usb_d_ep_halt+0x64>)
    5de4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    5de8:	2201      	movs	r2, #1
    5dea:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    5dec:	2103      	movs	r1, #3
    5dee:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5df0:	69db      	ldr	r3, [r3, #28]
    5df2:	2200      	movs	r2, #0
    5df4:	4620      	mov	r0, r4
    5df6:	4798      	blx	r3
	return ERR_NONE;
    5df8:	2300      	movs	r3, #0
    5dfa:	e7df      	b.n	5dbc <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    5dfc:	f06f 0311 	mvn.w	r3, #17
    5e00:	e7dc      	b.n	5dbc <usb_d_ep_halt+0x14>
    5e02:	bf00      	nop
    5e04:	000094e9 	.word	0x000094e9
    5e08:	000058b1 	.word	0x000058b1
    5e0c:	2000064c 	.word	0x2000064c

00005e10 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5e10:	b538      	push	{r3, r4, r5, lr}
    5e12:	460d      	mov	r5, r1
    5e14:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5e16:	4b0e      	ldr	r3, [pc, #56]	; (5e50 <usb_d_ep_register_callback+0x40>)
    5e18:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5e1a:	4b0e      	ldr	r3, [pc, #56]	; (5e54 <usb_d_ep_register_callback+0x44>)
    5e1c:	2c00      	cmp	r4, #0
    5e1e:	bf08      	it	eq
    5e20:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    5e22:	2800      	cmp	r0, #0
    5e24:	db13      	blt.n	5e4e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    5e26:	2d01      	cmp	r5, #1
    5e28:	d008      	beq.n	5e3c <usb_d_ep_register_callback+0x2c>
    5e2a:	b115      	cbz	r5, 5e32 <usb_d_ep_register_callback+0x22>
    5e2c:	2d02      	cmp	r5, #2
    5e2e:	d00a      	beq.n	5e46 <usb_d_ep_register_callback+0x36>
    5e30:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5e32:	4b09      	ldr	r3, [pc, #36]	; (5e58 <usb_d_ep_register_callback+0x48>)
    5e34:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5e38:	6144      	str	r4, [r0, #20]
		break;
    5e3a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5e3c:	4b06      	ldr	r3, [pc, #24]	; (5e58 <usb_d_ep_register_callback+0x48>)
    5e3e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5e42:	6184      	str	r4, [r0, #24]
		break;
    5e44:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5e46:	4b04      	ldr	r3, [pc, #16]	; (5e58 <usb_d_ep_register_callback+0x48>)
    5e48:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5e4c:	61c4      	str	r4, [r0, #28]
    5e4e:	bd38      	pop	{r3, r4, r5, pc}
    5e50:	000058b1 	.word	0x000058b1
    5e54:	000058f5 	.word	0x000058f5
    5e58:	2000064c 	.word	0x2000064c

00005e5c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5e5c:	b900      	cbnz	r0, 5e60 <assert+0x4>
		__asm("BKPT #0");
    5e5e:	be00      	bkpt	0x0000
    5e60:	4770      	bx	lr

00005e62 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5e62:	6803      	ldr	r3, [r0, #0]
    5e64:	b14b      	cbz	r3, 5e7a <is_list_element+0x18>
		if (it == element) {
    5e66:	428b      	cmp	r3, r1
    5e68:	d009      	beq.n	5e7e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	b11b      	cbz	r3, 5e76 <is_list_element+0x14>
		if (it == element) {
    5e6e:	4299      	cmp	r1, r3
    5e70:	d1fb      	bne.n	5e6a <is_list_element+0x8>
			return true;
    5e72:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5e74:	4770      	bx	lr
	return false;
    5e76:	2000      	movs	r0, #0
    5e78:	4770      	bx	lr
    5e7a:	2000      	movs	r0, #0
    5e7c:	4770      	bx	lr
			return true;
    5e7e:	2001      	movs	r0, #1
    5e80:	4770      	bx	lr
	...

00005e84 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5e84:	b538      	push	{r3, r4, r5, lr}
    5e86:	4604      	mov	r4, r0
    5e88:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5e8a:	4b06      	ldr	r3, [pc, #24]	; (5ea4 <list_insert_as_head+0x20>)
    5e8c:	4798      	blx	r3
    5e8e:	f080 0001 	eor.w	r0, r0, #1
    5e92:	2239      	movs	r2, #57	; 0x39
    5e94:	4904      	ldr	r1, [pc, #16]	; (5ea8 <list_insert_as_head+0x24>)
    5e96:	b2c0      	uxtb	r0, r0
    5e98:	4b04      	ldr	r3, [pc, #16]	; (5eac <list_insert_as_head+0x28>)
    5e9a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5e9c:	6823      	ldr	r3, [r4, #0]
    5e9e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5ea0:	6025      	str	r5, [r4, #0]
    5ea2:	bd38      	pop	{r3, r4, r5, pc}
    5ea4:	00005e63 	.word	0x00005e63
    5ea8:	0000dcc8 	.word	0x0000dcc8
    5eac:	00005e5d 	.word	0x00005e5d

00005eb0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5eb0:	6803      	ldr	r3, [r0, #0]
    5eb2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5eb4:	6001      	str	r1, [r0, #0]
    5eb6:	4770      	bx	lr

00005eb8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5eb8:	b570      	push	{r4, r5, r6, lr}
    5eba:	4605      	mov	r5, r0
    5ebc:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    5ebe:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    5ec0:	4b0a      	ldr	r3, [pc, #40]	; (5eec <list_insert_at_end+0x34>)
    5ec2:	4798      	blx	r3
    5ec4:	f080 0001 	eor.w	r0, r0, #1
    5ec8:	224f      	movs	r2, #79	; 0x4f
    5eca:	4909      	ldr	r1, [pc, #36]	; (5ef0 <list_insert_at_end+0x38>)
    5ecc:	b2c0      	uxtb	r0, r0
    5ece:	4b09      	ldr	r3, [pc, #36]	; (5ef4 <list_insert_at_end+0x3c>)
    5ed0:	4798      	blx	r3

	if (!list->head) {
    5ed2:	682b      	ldr	r3, [r5, #0]
    5ed4:	b91b      	cbnz	r3, 5ede <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    5ed6:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    5ed8:	6033      	str	r3, [r6, #0]
		return;
    5eda:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    5edc:	461c      	mov	r4, r3
	while (it->next) {
    5ede:	6823      	ldr	r3, [r4, #0]
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d1fb      	bne.n	5edc <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    5ee4:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    5ee6:	6033      	str	r3, [r6, #0]
    5ee8:	bd70      	pop	{r4, r5, r6, pc}
    5eea:	bf00      	nop
    5eec:	00005e63 	.word	0x00005e63
    5ef0:	0000dcc8 	.word	0x0000dcc8
    5ef4:	00005e5d 	.word	0x00005e5d

00005ef8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    5ef8:	6803      	ldr	r3, [r0, #0]
    5efa:	b10b      	cbz	r3, 5f00 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    5efc:	681a      	ldr	r2, [r3, #0]
    5efe:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    5f00:	4618      	mov	r0, r3
    5f02:	4770      	bx	lr

00005f04 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    5f04:	b570      	push	{r4, r5, r6, lr}
    5f06:	460e      	mov	r6, r1
    5f08:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    5f0a:	4604      	mov	r4, r0
    5f0c:	b178      	cbz	r0, 5f2e <ringbuffer_init+0x2a>
    5f0e:	b181      	cbz	r1, 5f32 <ringbuffer_init+0x2e>
    5f10:	b1a2      	cbz	r2, 5f3c <ringbuffer_init+0x38>
    5f12:	2001      	movs	r0, #1
    5f14:	2228      	movs	r2, #40	; 0x28
    5f16:	490d      	ldr	r1, [pc, #52]	; (5f4c <ringbuffer_init+0x48>)
    5f18:	4b0d      	ldr	r3, [pc, #52]	; (5f50 <ringbuffer_init+0x4c>)
    5f1a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5f1c:	1e6b      	subs	r3, r5, #1
    5f1e:	421d      	tst	r5, r3
    5f20:	d109      	bne.n	5f36 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    5f22:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    5f24:	2000      	movs	r0, #0
    5f26:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    5f28:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    5f2a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5f2c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5f2e:	2000      	movs	r0, #0
    5f30:	e7f0      	b.n	5f14 <ringbuffer_init+0x10>
    5f32:	2000      	movs	r0, #0
    5f34:	e7ee      	b.n	5f14 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    5f36:	f06f 000c 	mvn.w	r0, #12
    5f3a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5f3c:	2228      	movs	r2, #40	; 0x28
    5f3e:	4903      	ldr	r1, [pc, #12]	; (5f4c <ringbuffer_init+0x48>)
    5f40:	2000      	movs	r0, #0
    5f42:	4b03      	ldr	r3, [pc, #12]	; (5f50 <ringbuffer_init+0x4c>)
    5f44:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    5f46:	1e6b      	subs	r3, r5, #1
    5f48:	e7eb      	b.n	5f22 <ringbuffer_init+0x1e>
    5f4a:	bf00      	nop
    5f4c:	0000dce8 	.word	0x0000dce8
    5f50:	00005e5d 	.word	0x00005e5d

00005f54 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5f54:	b538      	push	{r3, r4, r5, lr}
    5f56:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5f58:	4604      	mov	r4, r0
    5f5a:	b1a0      	cbz	r0, 5f86 <ringbuffer_get+0x32>
    5f5c:	1c08      	adds	r0, r1, #0
    5f5e:	bf18      	it	ne
    5f60:	2001      	movne	r0, #1
    5f62:	2240      	movs	r2, #64	; 0x40
    5f64:	490a      	ldr	r1, [pc, #40]	; (5f90 <ringbuffer_get+0x3c>)
    5f66:	4b0b      	ldr	r3, [pc, #44]	; (5f94 <ringbuffer_get+0x40>)
    5f68:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5f6a:	68a3      	ldr	r3, [r4, #8]
    5f6c:	68e2      	ldr	r2, [r4, #12]
    5f6e:	429a      	cmp	r2, r3
    5f70:	d00b      	beq.n	5f8a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    5f72:	6862      	ldr	r2, [r4, #4]
    5f74:	4013      	ands	r3, r2
    5f76:	6822      	ldr	r2, [r4, #0]
    5f78:	5cd3      	ldrb	r3, [r2, r3]
    5f7a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5f7c:	68a3      	ldr	r3, [r4, #8]
    5f7e:	3301      	adds	r3, #1
    5f80:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    5f82:	2000      	movs	r0, #0
    5f84:	bd38      	pop	{r3, r4, r5, pc}
    5f86:	2000      	movs	r0, #0
    5f88:	e7eb      	b.n	5f62 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5f8a:	f06f 0009 	mvn.w	r0, #9
}
    5f8e:	bd38      	pop	{r3, r4, r5, pc}
    5f90:	0000dce8 	.word	0x0000dce8
    5f94:	00005e5d 	.word	0x00005e5d

00005f98 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5f98:	b538      	push	{r3, r4, r5, lr}
    5f9a:	460d      	mov	r5, r1
	ASSERT(rb);
    5f9c:	4604      	mov	r4, r0
    5f9e:	2251      	movs	r2, #81	; 0x51
    5fa0:	490b      	ldr	r1, [pc, #44]	; (5fd0 <ringbuffer_put+0x38>)
    5fa2:	3000      	adds	r0, #0
    5fa4:	bf18      	it	ne
    5fa6:	2001      	movne	r0, #1
    5fa8:	4b0a      	ldr	r3, [pc, #40]	; (5fd4 <ringbuffer_put+0x3c>)
    5faa:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5fac:	68e3      	ldr	r3, [r4, #12]
    5fae:	6862      	ldr	r2, [r4, #4]
    5fb0:	4013      	ands	r3, r2
    5fb2:	6822      	ldr	r2, [r4, #0]
    5fb4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    5fb6:	68e3      	ldr	r3, [r4, #12]
    5fb8:	6861      	ldr	r1, [r4, #4]
    5fba:	68a2      	ldr	r2, [r4, #8]
    5fbc:	1a9a      	subs	r2, r3, r2
    5fbe:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    5fc0:	bf84      	itt	hi
    5fc2:	1a59      	subhi	r1, r3, r1
    5fc4:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    5fc6:	3301      	adds	r3, #1
    5fc8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    5fca:	2000      	movs	r0, #0
    5fcc:	bd38      	pop	{r3, r4, r5, pc}
    5fce:	bf00      	nop
    5fd0:	0000dce8 	.word	0x0000dce8
    5fd4:	00005e5d 	.word	0x00005e5d

00005fd8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    5fd8:	b510      	push	{r4, lr}
	ASSERT(rb);
    5fda:	4604      	mov	r4, r0
    5fdc:	2267      	movs	r2, #103	; 0x67
    5fde:	4905      	ldr	r1, [pc, #20]	; (5ff4 <ringbuffer_num+0x1c>)
    5fe0:	3000      	adds	r0, #0
    5fe2:	bf18      	it	ne
    5fe4:	2001      	movne	r0, #1
    5fe6:	4b04      	ldr	r3, [pc, #16]	; (5ff8 <ringbuffer_num+0x20>)
    5fe8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    5fea:	68e0      	ldr	r0, [r4, #12]
    5fec:	68a3      	ldr	r3, [r4, #8]
}
    5fee:	1ac0      	subs	r0, r0, r3
    5ff0:	bd10      	pop	{r4, pc}
    5ff2:	bf00      	nop
    5ff4:	0000dce8 	.word	0x0000dce8
    5ff8:	00005e5d 	.word	0x00005e5d

00005ffc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    5ffc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    5ffe:	4a06      	ldr	r2, [pc, #24]	; (6018 <_sbrk+0x1c>)
    6000:	6812      	ldr	r2, [r2, #0]
    6002:	b122      	cbz	r2, 600e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6004:	4a04      	ldr	r2, [pc, #16]	; (6018 <_sbrk+0x1c>)
    6006:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6008:	4403      	add	r3, r0
    600a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    600c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    600e:	4903      	ldr	r1, [pc, #12]	; (601c <_sbrk+0x20>)
    6010:	4a01      	ldr	r2, [pc, #4]	; (6018 <_sbrk+0x1c>)
    6012:	6011      	str	r1, [r2, #0]
    6014:	e7f6      	b.n	6004 <_sbrk+0x8>
    6016:	bf00      	nop
    6018:	200007ec 	.word	0x200007ec
    601c:	20017df0 	.word	0x20017df0

00006020 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    6020:	f04f 30ff 	mov.w	r0, #4294967295
    6024:	4770      	bx	lr

00006026 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    6026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    602a:	604b      	str	r3, [r1, #4]

	return 0;
}
    602c:	2000      	movs	r0, #0
    602e:	4770      	bx	lr

00006030 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    6030:	2001      	movs	r0, #1
    6032:	4770      	bx	lr

00006034 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    6034:	2000      	movs	r0, #0
    6036:	4770      	bx	lr

00006038 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    6038:	6940      	ldr	r0, [r0, #20]
    603a:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    603e:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    6042:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    6044:	0040      	lsls	r0, r0, #1
    6046:	3076      	adds	r0, #118	; 0x76
}
    6048:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    604c:	4770      	bx	lr
	...

00006050 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    6050:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    6052:	f013 0f01 	tst.w	r3, #1
    6056:	d11b      	bne.n	6090 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6058:	6b03      	ldr	r3, [r0, #48]	; 0x30
    605a:	f013 0f03 	tst.w	r3, #3
    605e:	d1fb      	bne.n	6058 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    6060:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    6062:	f013 0f02 	tst.w	r3, #2
    6066:	d00d      	beq.n	6084 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    6068:	8803      	ldrh	r3, [r0, #0]
    606a:	f023 0302 	bic.w	r3, r3, #2
    606e:	041b      	lsls	r3, r3, #16
    6070:	0c1b      	lsrs	r3, r3, #16
    6072:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6074:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6076:	f013 0f03 	tst.w	r3, #3
    607a:	d1fb      	bne.n	6074 <_adc_init+0x24>
    607c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    607e:	f013 0f02 	tst.w	r3, #2
    6082:	d1fb      	bne.n	607c <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    6084:	2301      	movs	r3, #1
    6086:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6088:	6b03      	ldr	r3, [r0, #48]	; 0x30
    608a:	f013 0f03 	tst.w	r3, #3
    608e:	d1fb      	bne.n	6088 <_adc_init+0x38>
    6090:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6092:	f013 0f01 	tst.w	r3, #1
    6096:	d1fb      	bne.n	6090 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    6098:	2316      	movs	r3, #22
    609a:	4a37      	ldr	r2, [pc, #220]	; (6178 <_adc_init+0x128>)
    609c:	fb03 2301 	mla	r3, r3, r1, r2
    60a0:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    60a2:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    60a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    60a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    60aa:	2b00      	cmp	r3, #0
    60ac:	d1fa      	bne.n	60a4 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    60ae:	2316      	movs	r3, #22
    60b0:	4a31      	ldr	r2, [pc, #196]	; (6178 <_adc_init+0x128>)
    60b2:	fb03 2301 	mla	r3, r3, r1, r2
    60b6:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    60b8:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    60ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    60bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    60c0:	2b00      	cmp	r3, #0
    60c2:	d1fa      	bne.n	60ba <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    60c4:	2316      	movs	r3, #22
    60c6:	4a2c      	ldr	r2, [pc, #176]	; (6178 <_adc_init+0x128>)
    60c8:	fb03 2301 	mla	r3, r3, r1, r2
    60cc:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    60ce:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    60d0:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    60d2:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    60d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    60d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    60da:	2b00      	cmp	r3, #0
    60dc:	d1fa      	bne.n	60d4 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    60de:	2316      	movs	r3, #22
    60e0:	4a25      	ldr	r2, [pc, #148]	; (6178 <_adc_init+0x128>)
    60e2:	fb03 2301 	mla	r3, r3, r1, r2
    60e6:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    60e8:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    60ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
    60ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
    60f0:	2b00      	cmp	r3, #0
    60f2:	d1fa      	bne.n	60ea <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    60f4:	2316      	movs	r3, #22
    60f6:	4a20      	ldr	r2, [pc, #128]	; (6178 <_adc_init+0x128>)
    60f8:	fb03 2301 	mla	r3, r3, r1, r2
    60fc:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    60fe:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6100:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6102:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6106:	2b00      	cmp	r3, #0
    6108:	d1fa      	bne.n	6100 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    610a:	2316      	movs	r3, #22
    610c:	4a1a      	ldr	r2, [pc, #104]	; (6178 <_adc_init+0x128>)
    610e:	fb03 2301 	mla	r3, r3, r1, r2
    6112:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    6114:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6116:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6118:	f013 0f80 	tst.w	r3, #128	; 0x80
    611c:	d1fb      	bne.n	6116 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    611e:	2316      	movs	r3, #22
    6120:	4a15      	ldr	r2, [pc, #84]	; (6178 <_adc_init+0x128>)
    6122:	fb03 2301 	mla	r3, r3, r1, r2
    6126:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    6128:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    612a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    612c:	f413 7f80 	tst.w	r3, #256	; 0x100
    6130:	d1fb      	bne.n	612a <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    6132:	2316      	movs	r3, #22
    6134:	4a10      	ldr	r2, [pc, #64]	; (6178 <_adc_init+0x128>)
    6136:	fb03 2301 	mla	r3, r3, r1, r2
    613a:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    613c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    613e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6140:	f413 7f00 	tst.w	r3, #512	; 0x200
    6144:	d1fb      	bne.n	613e <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    6146:	2316      	movs	r3, #22
    6148:	4a0b      	ldr	r2, [pc, #44]	; (6178 <_adc_init+0x128>)
    614a:	fb03 2301 	mla	r3, r3, r1, r2
    614e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    6150:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6152:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6154:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6158:	d1fb      	bne.n	6152 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    615a:	2216      	movs	r2, #22
    615c:	4b06      	ldr	r3, [pc, #24]	; (6178 <_adc_init+0x128>)
    615e:	fb02 3101 	mla	r1, r2, r1, r3
    6162:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    6164:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    6166:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    6168:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    616a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    616c:	f013 0f03 	tst.w	r3, #3
    6170:	d1fb      	bne.n	616a <_adc_init+0x11a>

	return ERR_NONE;
}
    6172:	2000      	movs	r0, #0
    6174:	4770      	bx	lr
    6176:	bf00      	nop
    6178:	0000dd0c 	.word	0x0000dd0c

0000617c <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    617c:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    617e:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    6180:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    6184:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    6188:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    618a:	f013 0f01 	tst.w	r3, #1
    618e:	d106      	bne.n	619e <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    6190:	f013 0f02 	tst.w	r3, #2
    6194:	d10d      	bne.n	61b2 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    6196:	f013 0f04 	tst.w	r3, #4
    619a:	d111      	bne.n	61c0 <_adc_interrupt_handler+0x44>
    619c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    619e:	2301      	movs	r3, #1
    61a0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    61a4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    61a8:	6883      	ldr	r3, [r0, #8]
    61aa:	b292      	uxth	r2, r2
    61ac:	2100      	movs	r1, #0
    61ae:	4798      	blx	r3
    61b0:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    61b2:	2302      	movs	r3, #2
    61b4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    61b8:	6843      	ldr	r3, [r0, #4]
    61ba:	2100      	movs	r1, #0
    61bc:	4798      	blx	r3
    61be:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    61c0:	2304      	movs	r3, #4
    61c2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    61c6:	6803      	ldr	r3, [r0, #0]
    61c8:	2100      	movs	r1, #0
    61ca:	4798      	blx	r3
	}
}
    61cc:	e7e6      	b.n	619c <_adc_interrupt_handler+0x20>
	...

000061d0 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    61d0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    61d4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    61d8:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    61dc:	b148      	cbz	r0, 61f2 <_adc_get_regs+0x22>
    61de:	2801      	cmp	r0, #1
    61e0:	d009      	beq.n	61f6 <_adc_get_regs+0x26>
{
    61e2:	b508      	push	{r3, lr}
	ASSERT(false);
    61e4:	228c      	movs	r2, #140	; 0x8c
    61e6:	4905      	ldr	r1, [pc, #20]	; (61fc <_adc_get_regs+0x2c>)
    61e8:	2000      	movs	r0, #0
    61ea:	4b05      	ldr	r3, [pc, #20]	; (6200 <_adc_get_regs+0x30>)
    61ec:	4798      	blx	r3
	return 0;
    61ee:	2000      	movs	r0, #0
    61f0:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    61f2:	2000      	movs	r0, #0
    61f4:	4770      	bx	lr
    61f6:	2001      	movs	r0, #1
    61f8:	4770      	bx	lr
    61fa:	bf00      	nop
    61fc:	0000dd38 	.word	0x0000dd38
    6200:	00005e5d 	.word	0x00005e5d

00006204 <_adc_async_init>:
{
    6204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6208:	460c      	mov	r4, r1
	ASSERT(device);
    620a:	4605      	mov	r5, r0
    620c:	22e6      	movs	r2, #230	; 0xe6
    620e:	493b      	ldr	r1, [pc, #236]	; (62fc <_adc_async_init+0xf8>)
    6210:	3000      	adds	r0, #0
    6212:	bf18      	it	ne
    6214:	2001      	movne	r0, #1
    6216:	4b3a      	ldr	r3, [pc, #232]	; (6300 <_adc_async_init+0xfc>)
    6218:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    621a:	4620      	mov	r0, r4
    621c:	4b39      	ldr	r3, [pc, #228]	; (6304 <_adc_async_init+0x100>)
    621e:	4798      	blx	r3
    6220:	4601      	mov	r1, r0
    6222:	4620      	mov	r0, r4
    6224:	4b38      	ldr	r3, [pc, #224]	; (6308 <_adc_async_init+0x104>)
    6226:	4798      	blx	r3
	if (init_status) {
    6228:	4606      	mov	r6, r0
    622a:	b110      	cbz	r0, 6232 <_adc_async_init+0x2e>
}
    622c:	4630      	mov	r0, r6
    622e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    6232:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    6234:	4b35      	ldr	r3, [pc, #212]	; (630c <_adc_async_init+0x108>)
    6236:	429c      	cmp	r4, r3
    6238:	d05c      	beq.n	62f4 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    623a:	4b35      	ldr	r3, [pc, #212]	; (6310 <_adc_async_init+0x10c>)
    623c:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    623e:	bf04      	itt	eq
    6240:	4b34      	ldreq	r3, [pc, #208]	; (6314 <_adc_async_init+0x110>)
    6242:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    6244:	4628      	mov	r0, r5
    6246:	4f34      	ldr	r7, [pc, #208]	; (6318 <_adc_async_init+0x114>)
    6248:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    624a:	0943      	lsrs	r3, r0, #5
    624c:	f000 001f 	and.w	r0, r0, #31
    6250:	2401      	movs	r4, #1
    6252:	fa04 f000 	lsl.w	r0, r4, r0
    6256:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 631c <_adc_async_init+0x118>
    625a:	3320      	adds	r3, #32
    625c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6260:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6264:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    6268:	4628      	mov	r0, r5
    626a:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    626c:	0943      	lsrs	r3, r0, #5
    626e:	f000 001f 	and.w	r0, r0, #31
    6272:	fa04 f000 	lsl.w	r0, r4, r0
    6276:	3360      	adds	r3, #96	; 0x60
    6278:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    627c:	4628      	mov	r0, r5
    627e:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6280:	0943      	lsrs	r3, r0, #5
    6282:	f000 001f 	and.w	r0, r0, #31
    6286:	4084      	lsls	r4, r0
    6288:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    628c:	4628      	mov	r0, r5
    628e:	47b8      	blx	r7
    6290:	3001      	adds	r0, #1
    6292:	b280      	uxth	r0, r0
    6294:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6296:	2b00      	cmp	r3, #0
    6298:	dbc8      	blt.n	622c <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    629a:	095b      	lsrs	r3, r3, #5
    629c:	f000 001f 	and.w	r0, r0, #31
    62a0:	2201      	movs	r2, #1
    62a2:	fa02 f000 	lsl.w	r0, r2, r0
    62a6:	3320      	adds	r3, #32
    62a8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    62ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    62b0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    62b4:	4628      	mov	r0, r5
    62b6:	47b8      	blx	r7
    62b8:	3001      	adds	r0, #1
    62ba:	b280      	uxth	r0, r0
    62bc:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    62be:	2b00      	cmp	r3, #0
    62c0:	dbb4      	blt.n	622c <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    62c2:	095b      	lsrs	r3, r3, #5
    62c4:	f000 001f 	and.w	r0, r0, #31
    62c8:	2201      	movs	r2, #1
    62ca:	fa02 f000 	lsl.w	r0, r2, r0
    62ce:	3360      	adds	r3, #96	; 0x60
    62d0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    62d4:	4628      	mov	r0, r5
    62d6:	47b8      	blx	r7
    62d8:	3001      	adds	r0, #1
    62da:	b280      	uxth	r0, r0
    62dc:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    62de:	2b00      	cmp	r3, #0
    62e0:	dba4      	blt.n	622c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    62e2:	095b      	lsrs	r3, r3, #5
    62e4:	f000 001f 	and.w	r0, r0, #31
    62e8:	2201      	movs	r2, #1
    62ea:	fa02 f000 	lsl.w	r0, r2, r0
    62ee:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    62f2:	e79b      	b.n	622c <_adc_async_init+0x28>
		_adc0_dev = dev;
    62f4:	4b07      	ldr	r3, [pc, #28]	; (6314 <_adc_async_init+0x110>)
    62f6:	601d      	str	r5, [r3, #0]
    62f8:	e7a4      	b.n	6244 <_adc_async_init+0x40>
    62fa:	bf00      	nop
    62fc:	0000dd38 	.word	0x0000dd38
    6300:	00005e5d 	.word	0x00005e5d
    6304:	000061d1 	.word	0x000061d1
    6308:	00006051 	.word	0x00006051
    630c:	43001c00 	.word	0x43001c00
    6310:	43002000 	.word	0x43002000
    6314:	200007f0 	.word	0x200007f0
    6318:	00006039 	.word	0x00006039
    631c:	e000e100 	.word	0xe000e100

00006320 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    6320:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6322:	8813      	ldrh	r3, [r2, #0]
    6324:	b29b      	uxth	r3, r3
    6326:	f043 0302 	orr.w	r3, r3, #2
    632a:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    632c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    632e:	f013 0f03 	tst.w	r3, #3
    6332:	d1fb      	bne.n	632c <_adc_async_enable_channel+0xc>
}
    6334:	4770      	bx	lr

00006336 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    6336:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    6338:	88db      	ldrh	r3, [r3, #6]
    633a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    633e:	2b03      	cmp	r3, #3
}
    6340:	bf0c      	ite	eq
    6342:	2001      	moveq	r0, #1
    6344:	2002      	movne	r0, #2
    6346:	4770      	bx	lr

00006348 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    6348:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    634a:	7d13      	ldrb	r3, [r2, #20]
    634c:	f043 0302 	orr.w	r3, r3, #2
    6350:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    6352:	6b13      	ldr	r3, [r2, #48]	; 0x30
    6354:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6358:	2b00      	cmp	r3, #0
    635a:	d1fa      	bne.n	6352 <_adc_async_convert+0xa>
}
    635c:	4770      	bx	lr

0000635e <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    635e:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    6360:	2a01      	cmp	r2, #1
    6362:	d007      	beq.n	6374 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    6364:	2a02      	cmp	r2, #2
    6366:	d00e      	beq.n	6386 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    6368:	b91a      	cbnz	r2, 6372 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    636a:	b1ab      	cbz	r3, 6398 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    636c:	2301      	movs	r3, #1
    636e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    6372:	4770      	bx	lr
	if (value == 0x0) {
    6374:	b91b      	cbnz	r3, 637e <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    6376:	2304      	movs	r3, #4
    6378:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    637c:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    637e:	2304      	movs	r3, #4
    6380:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    6384:	4770      	bx	lr
	if (value == 0x0) {
    6386:	b91b      	cbnz	r3, 6390 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    6388:	2302      	movs	r3, #2
    638a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    638e:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    6390:	2302      	movs	r3, #2
    6392:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    6396:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    6398:	2301      	movs	r3, #1
    639a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    639e:	4770      	bx	lr

000063a0 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    63a0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    63a2:	4b02      	ldr	r3, [pc, #8]	; (63ac <ADC0_0_Handler+0xc>)
    63a4:	6818      	ldr	r0, [r3, #0]
    63a6:	4b02      	ldr	r3, [pc, #8]	; (63b0 <ADC0_0_Handler+0x10>)
    63a8:	4798      	blx	r3
    63aa:	bd08      	pop	{r3, pc}
    63ac:	200007f0 	.word	0x200007f0
    63b0:	0000617d 	.word	0x0000617d

000063b4 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    63b4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    63b6:	4b02      	ldr	r3, [pc, #8]	; (63c0 <ADC0_1_Handler+0xc>)
    63b8:	6818      	ldr	r0, [r3, #0]
    63ba:	4b02      	ldr	r3, [pc, #8]	; (63c4 <ADC0_1_Handler+0x10>)
    63bc:	4798      	blx	r3
    63be:	bd08      	pop	{r3, pc}
    63c0:	200007f0 	.word	0x200007f0
    63c4:	0000617d 	.word	0x0000617d

000063c8 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    63c8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    63ca:	4b02      	ldr	r3, [pc, #8]	; (63d4 <ADC1_0_Handler+0xc>)
    63cc:	6858      	ldr	r0, [r3, #4]
    63ce:	4b02      	ldr	r3, [pc, #8]	; (63d8 <ADC1_0_Handler+0x10>)
    63d0:	4798      	blx	r3
    63d2:	bd08      	pop	{r3, pc}
    63d4:	200007f0 	.word	0x200007f0
    63d8:	0000617d 	.word	0x0000617d

000063dc <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    63dc:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    63de:	4b02      	ldr	r3, [pc, #8]	; (63e8 <ADC1_1_Handler+0xc>)
    63e0:	6858      	ldr	r0, [r3, #4]
    63e2:	4b02      	ldr	r3, [pc, #8]	; (63ec <ADC1_1_Handler+0x10>)
    63e4:	4798      	blx	r3
    63e6:	bd08      	pop	{r3, pc}
    63e8:	200007f0 	.word	0x200007f0
    63ec:	0000617d 	.word	0x0000617d

000063f0 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63f0:	0943      	lsrs	r3, r0, #5
    63f2:	f000 001f 	and.w	r0, r0, #31
    63f6:	2201      	movs	r2, #1
    63f8:	fa02 f000 	lsl.w	r0, r2, r0
    63fc:	3340      	adds	r3, #64	; 0x40
    63fe:	4a02      	ldr	r2, [pc, #8]	; (6408 <_irq_set+0x18>)
    6400:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6404:	4770      	bx	lr
    6406:	bf00      	nop
    6408:	e000e100 	.word	0xe000e100

0000640c <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    640c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6410:	00c0      	lsls	r0, r0, #3
    6412:	4770      	bx	lr

00006414 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    6414:	4b01      	ldr	r3, [pc, #4]	; (641c <_get_cycles_for_ms+0x8>)
    6416:	fb03 f000 	mul.w	r0, r3, r0
    641a:	4770      	bx	lr
    641c:	0001d4c0 	.word	0x0001d4c0

00006420 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6420:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6422:	4a0e      	ldr	r2, [pc, #56]	; (645c <_init_chip+0x3c>)
    6424:	8813      	ldrh	r3, [r2, #0]
    6426:	b29b      	uxth	r3, r3
    6428:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    642c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    642e:	4b0c      	ldr	r3, [pc, #48]	; (6460 <_init_chip+0x40>)
    6430:	4798      	blx	r3
	_oscctrl_init_sources();
    6432:	4b0c      	ldr	r3, [pc, #48]	; (6464 <_init_chip+0x44>)
    6434:	4798      	blx	r3
	_mclk_init();
    6436:	4b0c      	ldr	r3, [pc, #48]	; (6468 <_init_chip+0x48>)
    6438:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    643a:	2004      	movs	r0, #4
    643c:	4c0b      	ldr	r4, [pc, #44]	; (646c <_init_chip+0x4c>)
    643e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    6440:	4b0b      	ldr	r3, [pc, #44]	; (6470 <_init_chip+0x50>)
    6442:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6444:	f640 70fb 	movw	r0, #4091	; 0xffb
    6448:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    644a:	4a0a      	ldr	r2, [pc, #40]	; (6474 <_init_chip+0x54>)
    644c:	6913      	ldr	r3, [r2, #16]
    644e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6452:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    6454:	4b08      	ldr	r3, [pc, #32]	; (6478 <_init_chip+0x58>)
    6456:	4798      	blx	r3
    6458:	bd10      	pop	{r4, pc}
    645a:	bf00      	nop
    645c:	41004000 	.word	0x41004000
    6460:	000068fd 	.word	0x000068fd
    6464:	00006911 	.word	0x00006911
    6468:	00006825 	.word	0x00006825
    646c:	000067ad 	.word	0x000067ad
    6470:	00006915 	.word	0x00006915
    6474:	40000800 	.word	0x40000800
    6478:	000064f1 	.word	0x000064f1

0000647c <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    647c:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    647e:	4a1a      	ldr	r2, [pc, #104]	; (64e8 <_dmac_handler+0x6c>)
    6480:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    6482:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    6486:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    648a:	4818      	ldr	r0, [pc, #96]	; (64ec <_dmac_handler+0x70>)
    648c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    6490:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6494:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    6498:	f012 0f01 	tst.w	r2, #1
    649c:	d10a      	bne.n	64b4 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    649e:	011a      	lsls	r2, r3, #4
    64a0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    64a4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    64a8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    64ac:	f012 0f02 	tst.w	r2, #2
    64b0:	d10b      	bne.n	64ca <_dmac_handler+0x4e>
    64b2:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    64b4:	011a      	lsls	r2, r3, #4
    64b6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    64ba:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    64be:	2101      	movs	r1, #1
    64c0:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    64c4:	6843      	ldr	r3, [r0, #4]
    64c6:	4798      	blx	r3
    64c8:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    64ca:	011a      	lsls	r2, r3, #4
    64cc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    64d0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    64d4:	2102      	movs	r1, #2
    64d6:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    64da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    64de:	4a03      	ldr	r2, [pc, #12]	; (64ec <_dmac_handler+0x70>)
    64e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64e4:	4798      	blx	r3
	}
}
    64e6:	e7e4      	b.n	64b2 <_dmac_handler+0x36>
    64e8:	4100a000 	.word	0x4100a000
    64ec:	200007f8 	.word	0x200007f8

000064f0 <_dma_init>:
{
    64f0:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    64f2:	4a32      	ldr	r2, [pc, #200]	; (65bc <_dma_init+0xcc>)
    64f4:	8813      	ldrh	r3, [r2, #0]
    64f6:	f023 0302 	bic.w	r3, r3, #2
    64fa:	041b      	lsls	r3, r3, #16
    64fc:	0c1b      	lsrs	r3, r3, #16
    64fe:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    6500:	8853      	ldrh	r3, [r2, #2]
    6502:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    6506:	041b      	lsls	r3, r3, #16
    6508:	0c1b      	lsrs	r3, r3, #16
    650a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    650c:	8813      	ldrh	r3, [r2, #0]
    650e:	b29b      	uxth	r3, r3
    6510:	f043 0301 	orr.w	r3, r3, #1
    6514:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    6516:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    6518:	f013 0f01 	tst.w	r3, #1
    651c:	d1fb      	bne.n	6516 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    651e:	4b27      	ldr	r3, [pc, #156]	; (65bc <_dma_init+0xcc>)
    6520:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6524:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    6526:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    6528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    652c:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    6530:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    6532:	2100      	movs	r1, #0
    6534:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    6536:	4a22      	ldr	r2, [pc, #136]	; (65c0 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    6538:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    653a:	4a22      	ldr	r2, [pc, #136]	; (65c4 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    653c:	639a      	str	r2, [r3, #56]	; 0x38
    653e:	4b22      	ldr	r3, [pc, #136]	; (65c8 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6540:	4c1f      	ldr	r4, [pc, #124]	; (65c0 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6542:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6544:	681d      	ldr	r5, [r3, #0]
    6546:	0108      	lsls	r0, r1, #4
    6548:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    654c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    6550:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    6552:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6554:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    6558:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    655a:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    655e:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    6560:	1822      	adds	r2, r4, r0
    6562:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6564:	60d6      	str	r6, [r2, #12]
    6566:	3101      	adds	r1, #1
    6568:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    656a:	2920      	cmp	r1, #32
    656c:	d1ea      	bne.n	6544 <_dma_init+0x54>
    656e:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6570:	2001      	movs	r0, #1
    6572:	4916      	ldr	r1, [pc, #88]	; (65cc <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    6574:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    6576:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    657a:	d00b      	beq.n	6594 <_dma_init+0xa4>
    657c:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    657e:	2b24      	cmp	r3, #36	; 0x24
    6580:	d1f8      	bne.n	6574 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    6582:	4a0e      	ldr	r2, [pc, #56]	; (65bc <_dma_init+0xcc>)
    6584:	8813      	ldrh	r3, [r2, #0]
    6586:	b29b      	uxth	r3, r3
    6588:	f043 0302 	orr.w	r3, r3, #2
    658c:	8013      	strh	r3, [r2, #0]
}
    658e:	2000      	movs	r0, #0
    6590:	bc70      	pop	{r4, r5, r6}
    6592:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6594:	095c      	lsrs	r4, r3, #5
    6596:	f002 021f 	and.w	r2, r2, #31
    659a:	fa00 f202 	lsl.w	r2, r0, r2
    659e:	f104 0520 	add.w	r5, r4, #32
    65a2:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    65a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    65aa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65ae:	f104 0560 	add.w	r5, r4, #96	; 0x60
    65b2:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65b6:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    65ba:	e7df      	b.n	657c <_dma_init+0x8c>
    65bc:	4100a000 	.word	0x4100a000
    65c0:	200079a0 	.word	0x200079a0
    65c4:	20007ba0 	.word	0x20007ba0
    65c8:	0000dd50 	.word	0x0000dd50
    65cc:	e000e100 	.word	0xe000e100

000065d0 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    65d0:	b991      	cbnz	r1, 65f8 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    65d2:	b942      	cbnz	r2, 65e6 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    65d4:	0100      	lsls	r0, r0, #4
    65d6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    65da:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    65de:	2302      	movs	r3, #2
    65e0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    65e4:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    65e6:	0100      	lsls	r0, r0, #4
    65e8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    65ec:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    65f0:	2302      	movs	r3, #2
    65f2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    65f6:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    65f8:	2901      	cmp	r1, #1
    65fa:	d000      	beq.n	65fe <_dma_set_irq_state+0x2e>
    65fc:	4770      	bx	lr
	if (value == 0x0) {
    65fe:	b142      	cbz	r2, 6612 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    6600:	0100      	lsls	r0, r0, #4
    6602:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6606:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    660a:	2301      	movs	r3, #1
    660c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    6610:	e7f4      	b.n	65fc <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    6612:	0100      	lsls	r0, r0, #4
    6614:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6618:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    661c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    6620:	4770      	bx	lr
	...

00006624 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6624:	4b02      	ldr	r3, [pc, #8]	; (6630 <_dma_set_destination_address+0xc>)
    6626:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    662a:	6081      	str	r1, [r0, #8]
}
    662c:	2000      	movs	r0, #0
    662e:	4770      	bx	lr
    6630:	200079a0 	.word	0x200079a0

00006634 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6634:	4b02      	ldr	r3, [pc, #8]	; (6640 <_dma_set_source_address+0xc>)
    6636:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    663a:	6041      	str	r1, [r0, #4]
}
    663c:	2000      	movs	r0, #0
    663e:	4770      	bx	lr
    6640:	200079a0 	.word	0x200079a0

00006644 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6644:	4a05      	ldr	r2, [pc, #20]	; (665c <_dma_srcinc_enable+0x18>)
    6646:	0100      	lsls	r0, r0, #4
    6648:	5a13      	ldrh	r3, [r2, r0]
    664a:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    664c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    6650:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6654:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    6656:	5211      	strh	r1, [r2, r0]
}
    6658:	2000      	movs	r0, #0
    665a:	4770      	bx	lr
    665c:	200079a0 	.word	0x200079a0

00006660 <_dma_set_data_amount>:
{
    6660:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    6662:	4c14      	ldr	r4, [pc, #80]	; (66b4 <_dma_set_data_amount+0x54>)
    6664:	0102      	lsls	r2, r0, #4
    6666:	18a3      	adds	r3, r4, r2
    6668:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    666a:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    666c:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6670:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    6672:	f412 6f00 	tst.w	r2, #2048	; 0x800
    6676:	d006      	beq.n	6686 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6678:	fa01 f403 	lsl.w	r4, r1, r3
    667c:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    667e:	4a0d      	ldr	r2, [pc, #52]	; (66b4 <_dma_set_data_amount+0x54>)
    6680:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    6684:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    6686:	4c0b      	ldr	r4, [pc, #44]	; (66b4 <_dma_set_data_amount+0x54>)
    6688:	0102      	lsls	r2, r0, #4
    668a:	18a5      	adds	r5, r4, r2
    668c:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    668e:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    6690:	f412 6f80 	tst.w	r2, #1024	; 0x400
    6694:	d005      	beq.n	66a2 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6696:	fa01 f303 	lsl.w	r3, r1, r3
    669a:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    669c:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    66a0:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    66a2:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    66a4:	4b03      	ldr	r3, [pc, #12]	; (66b4 <_dma_set_data_amount+0x54>)
    66a6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    66aa:	8041      	strh	r1, [r0, #2]
}
    66ac:	2000      	movs	r0, #0
    66ae:	bc30      	pop	{r4, r5}
    66b0:	4770      	bx	lr
    66b2:	bf00      	nop
    66b4:	200079a0 	.word	0x200079a0

000066b8 <_dma_enable_transaction>:
{
    66b8:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    66ba:	4c0d      	ldr	r4, [pc, #52]	; (66f0 <_dma_enable_transaction+0x38>)
    66bc:	0103      	lsls	r3, r0, #4
    66be:	5ae2      	ldrh	r2, [r4, r3]
    66c0:	b292      	uxth	r2, r2
    66c2:	f042 0201 	orr.w	r2, r2, #1
    66c6:	52e2      	strh	r2, [r4, r3]
    66c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    66cc:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    66d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    66d2:	f042 0202 	orr.w	r2, r2, #2
    66d6:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    66d8:	b131      	cbz	r1, 66e8 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    66da:	4a06      	ldr	r2, [pc, #24]	; (66f4 <_dma_enable_transaction+0x3c>)
    66dc:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    66de:	2301      	movs	r3, #1
    66e0:	fa03 f000 	lsl.w	r0, r3, r0
    66e4:	4308      	orrs	r0, r1
    66e6:	6110      	str	r0, [r2, #16]
}
    66e8:	2000      	movs	r0, #0
    66ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    66ee:	4770      	bx	lr
    66f0:	200079a0 	.word	0x200079a0
    66f4:	4100a000 	.word	0x4100a000

000066f8 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    66f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    66fc:	4b02      	ldr	r3, [pc, #8]	; (6708 <_dma_get_channel_resource+0x10>)
    66fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6702:	6001      	str	r1, [r0, #0]
}
    6704:	2000      	movs	r0, #0
    6706:	4770      	bx	lr
    6708:	200007f8 	.word	0x200007f8

0000670c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    670c:	b508      	push	{r3, lr}
	_dmac_handler();
    670e:	4b01      	ldr	r3, [pc, #4]	; (6714 <DMAC_0_Handler+0x8>)
    6710:	4798      	blx	r3
    6712:	bd08      	pop	{r3, pc}
    6714:	0000647d 	.word	0x0000647d

00006718 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6718:	b508      	push	{r3, lr}
	_dmac_handler();
    671a:	4b01      	ldr	r3, [pc, #4]	; (6720 <DMAC_1_Handler+0x8>)
    671c:	4798      	blx	r3
    671e:	bd08      	pop	{r3, pc}
    6720:	0000647d 	.word	0x0000647d

00006724 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6724:	b508      	push	{r3, lr}
	_dmac_handler();
    6726:	4b01      	ldr	r3, [pc, #4]	; (672c <DMAC_2_Handler+0x8>)
    6728:	4798      	blx	r3
    672a:	bd08      	pop	{r3, pc}
    672c:	0000647d 	.word	0x0000647d

00006730 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    6730:	b508      	push	{r3, lr}
	_dmac_handler();
    6732:	4b01      	ldr	r3, [pc, #4]	; (6738 <DMAC_3_Handler+0x8>)
    6734:	4798      	blx	r3
    6736:	bd08      	pop	{r3, pc}
    6738:	0000647d 	.word	0x0000647d

0000673c <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    673c:	b508      	push	{r3, lr}
	_dmac_handler();
    673e:	4b01      	ldr	r3, [pc, #4]	; (6744 <DMAC_4_Handler+0x8>)
    6740:	4798      	blx	r3
    6742:	bd08      	pop	{r3, pc}
    6744:	0000647d 	.word	0x0000647d

00006748 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6748:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    674a:	2000      	movs	r0, #0
    674c:	4770      	bx	lr
	...

00006750 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6750:	b430      	push	{r4, r5}
    6752:	4814      	ldr	r0, [pc, #80]	; (67a4 <_event_system_init+0x54>)
    6754:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6758:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    675a:	4c13      	ldr	r4, [pc, #76]	; (67a8 <_event_system_init+0x58>)
    675c:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    675e:	f813 1b01 	ldrb.w	r1, [r3], #1
    6762:	3248      	adds	r2, #72	; 0x48
    6764:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    6768:	42ab      	cmp	r3, r5
    676a:	d1f7      	bne.n	675c <_event_system_init+0xc>
    676c:	480d      	ldr	r0, [pc, #52]	; (67a4 <_event_system_init+0x54>)
    676e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    6772:	3080      	adds	r0, #128	; 0x80
    6774:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6776:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    677a:	00ca      	lsls	r2, r1, #3
    677c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6780:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6784:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6786:	f850 3f04 	ldr.w	r3, [r0, #4]!
    678a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    678c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6790:	43db      	mvns	r3, r3
    6792:	b2db      	uxtb	r3, r3
    6794:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    6798:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    679a:	2920      	cmp	r1, #32
    679c:	d1eb      	bne.n	6776 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    679e:	2000      	movs	r0, #0
    67a0:	bc30      	pop	{r4, r5}
    67a2:	4770      	bx	lr
    67a4:	0000de50 	.word	0x0000de50
    67a8:	4100e000 	.word	0x4100e000

000067ac <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    67ac:	f010 0f01 	tst.w	r0, #1
    67b0:	d008      	beq.n	67c4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    67b2:	4a17      	ldr	r2, [pc, #92]	; (6810 <_gclk_init_generators_by_fref+0x64>)
    67b4:	4b17      	ldr	r3, [pc, #92]	; (6814 <_gclk_init_generators_by_fref+0x68>)
    67b6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    67b8:	4619      	mov	r1, r3
    67ba:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    67be:	684b      	ldr	r3, [r1, #4]
    67c0:	4213      	tst	r3, r2
    67c2:	d1fc      	bne.n	67be <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    67c4:	f010 0f02 	tst.w	r0, #2
    67c8:	d008      	beq.n	67dc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    67ca:	4a13      	ldr	r2, [pc, #76]	; (6818 <_gclk_init_generators_by_fref+0x6c>)
    67cc:	4b11      	ldr	r3, [pc, #68]	; (6814 <_gclk_init_generators_by_fref+0x68>)
    67ce:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    67d0:	4619      	mov	r1, r3
    67d2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    67d6:	684b      	ldr	r3, [r1, #4]
    67d8:	4213      	tst	r3, r2
    67da:	d1fc      	bne.n	67d6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    67dc:	f010 0f04 	tst.w	r0, #4
    67e0:	d008      	beq.n	67f4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    67e2:	4a0e      	ldr	r2, [pc, #56]	; (681c <_gclk_init_generators_by_fref+0x70>)
    67e4:	4b0b      	ldr	r3, [pc, #44]	; (6814 <_gclk_init_generators_by_fref+0x68>)
    67e6:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    67e8:	4619      	mov	r1, r3
    67ea:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    67ee:	684b      	ldr	r3, [r1, #4]
    67f0:	4213      	tst	r3, r2
    67f2:	d1fc      	bne.n	67ee <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    67f4:	f010 0f08 	tst.w	r0, #8
    67f8:	d008      	beq.n	680c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    67fa:	4a09      	ldr	r2, [pc, #36]	; (6820 <_gclk_init_generators_by_fref+0x74>)
    67fc:	4b05      	ldr	r3, [pc, #20]	; (6814 <_gclk_init_generators_by_fref+0x68>)
    67fe:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6800:	4619      	mov	r1, r3
    6802:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6806:	684b      	ldr	r3, [r1, #4]
    6808:	4213      	tst	r3, r2
    680a:	d1fc      	bne.n	6806 <_gclk_init_generators_by_fref+0x5a>
    680c:	4770      	bx	lr
    680e:	bf00      	nop
    6810:	00010108 	.word	0x00010108
    6814:	40001c00 	.word	0x40001c00
    6818:	00010106 	.word	0x00010106
    681c:	00100106 	.word	0x00100106
    6820:	00010104 	.word	0x00010104

00006824 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    6824:	2201      	movs	r2, #1
    6826:	4b01      	ldr	r3, [pc, #4]	; (682c <_mclk_init+0x8>)
    6828:	715a      	strb	r2, [r3, #5]
    682a:	4770      	bx	lr
    682c:	40000800 	.word	0x40000800

00006830 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    6830:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    6832:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6834:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6836:	f012 0f01 	tst.w	r2, #1
    683a:	d005      	beq.n	6848 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    683c:	2201      	movs	r2, #1
    683e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    6840:	6803      	ldr	r3, [r0, #0]
    6842:	b153      	cbz	r3, 685a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6844:	4798      	blx	r3
    6846:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6848:	8a1a      	ldrh	r2, [r3, #16]
    684a:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    684c:	b12a      	cbz	r2, 685a <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    684e:	f240 225e 	movw	r2, #606	; 0x25e
    6852:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    6854:	6843      	ldr	r3, [r0, #4]
    6856:	b103      	cbz	r3, 685a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    6858:	4798      	blx	r3
    685a:	bd08      	pop	{r3, pc}

0000685c <_flash_init>:
{
    685c:	b538      	push	{r3, r4, r5, lr}
    685e:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    6860:	4605      	mov	r5, r0
    6862:	b350      	cbz	r0, 68ba <_flash_init+0x5e>
    6864:	4816      	ldr	r0, [pc, #88]	; (68c0 <_flash_init+0x64>)
    6866:	4281      	cmp	r1, r0
    6868:	bf14      	ite	ne
    686a:	2000      	movne	r0, #0
    686c:	2001      	moveq	r0, #1
    686e:	224b      	movs	r2, #75	; 0x4b
    6870:	4914      	ldr	r1, [pc, #80]	; (68c4 <_flash_init+0x68>)
    6872:	4b15      	ldr	r3, [pc, #84]	; (68c8 <_flash_init+0x6c>)
    6874:	4798      	blx	r3
	device->hw = hw;
    6876:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    6878:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    687a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    687e:	049b      	lsls	r3, r3, #18
    6880:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    6882:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    6884:	4b11      	ldr	r3, [pc, #68]	; (68cc <_flash_init+0x70>)
    6886:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6888:	4b11      	ldr	r3, [pc, #68]	; (68d0 <_flash_init+0x74>)
    688a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    688e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6896:	f3bf 8f6f 	isb	sy
    689a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    689e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    68a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68a6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68aa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    68ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68b2:	6019      	str	r1, [r3, #0]
    68b4:	601a      	str	r2, [r3, #0]
}
    68b6:	2000      	movs	r0, #0
    68b8:	bd38      	pop	{r3, r4, r5, pc}
    68ba:	2000      	movs	r0, #0
    68bc:	e7d7      	b.n	686e <_flash_init+0x12>
    68be:	bf00      	nop
    68c0:	41004000 	.word	0x41004000
    68c4:	0000df54 	.word	0x0000df54
    68c8:	00005e5d 	.word	0x00005e5d
    68cc:	20000978 	.word	0x20000978
    68d0:	e000e100 	.word	0xe000e100

000068d4 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    68d4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    68d6:	4b02      	ldr	r3, [pc, #8]	; (68e0 <NVMCTRL_0_Handler+0xc>)
    68d8:	6818      	ldr	r0, [r3, #0]
    68da:	4b02      	ldr	r3, [pc, #8]	; (68e4 <NVMCTRL_0_Handler+0x10>)
    68dc:	4798      	blx	r3
    68de:	bd08      	pop	{r3, pc}
    68e0:	20000978 	.word	0x20000978
    68e4:	00006831 	.word	0x00006831

000068e8 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    68e8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    68ea:	4b02      	ldr	r3, [pc, #8]	; (68f4 <NVMCTRL_1_Handler+0xc>)
    68ec:	6818      	ldr	r0, [r3, #0]
    68ee:	4b02      	ldr	r3, [pc, #8]	; (68f8 <NVMCTRL_1_Handler+0x10>)
    68f0:	4798      	blx	r3
    68f2:	bd08      	pop	{r3, pc}
    68f4:	20000978 	.word	0x20000978
    68f8:	00006831 	.word	0x00006831

000068fc <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    68fc:	4b03      	ldr	r3, [pc, #12]	; (690c <_osc32kctrl_init_sources+0x10>)
    68fe:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6900:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6904:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6906:	2201      	movs	r2, #1
    6908:	741a      	strb	r2, [r3, #16]
    690a:	4770      	bx	lr
    690c:	40001400 	.word	0x40001400

00006910 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6910:	4770      	bx	lr
	...

00006914 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6914:	4a47      	ldr	r2, [pc, #284]	; (6a34 <_oscctrl_init_referenced_generators+0x120>)
    6916:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6918:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    691c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6920:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6922:	4611      	mov	r1, r2
    6924:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6928:	684b      	ldr	r3, [r1, #4]
    692a:	4213      	tst	r3, r2
    692c:	d1fc      	bne.n	6928 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    692e:	4a41      	ldr	r2, [pc, #260]	; (6a34 <_oscctrl_init_referenced_generators+0x120>)
    6930:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6932:	f013 0f04 	tst.w	r3, #4
    6936:	d1fb      	bne.n	6930 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6938:	4b3f      	ldr	r3, [pc, #252]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    693a:	2200      	movs	r2, #0
    693c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    693e:	4a3f      	ldr	r2, [pc, #252]	; (6a3c <_oscctrl_init_referenced_generators+0x128>)
    6940:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6942:	461a      	mov	r2, r3
    6944:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6948:	f013 0f10 	tst.w	r3, #16
    694c:	d1fa      	bne.n	6944 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    694e:	2200      	movs	r2, #0
    6950:	4b39      	ldr	r3, [pc, #228]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    6952:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6956:	461a      	mov	r2, r3
    6958:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    695c:	f013 0f04 	tst.w	r3, #4
    6960:	d1fa      	bne.n	6958 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6962:	2202      	movs	r2, #2
    6964:	4b34      	ldr	r3, [pc, #208]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    6966:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6968:	461a      	mov	r2, r3
    696a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    696e:	f013 0f02 	tst.w	r3, #2
    6972:	d1fa      	bne.n	696a <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6974:	4b30      	ldr	r3, [pc, #192]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    6976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6978:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    697a:	461a      	mov	r2, r3
    697c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6980:	f013 0f08 	tst.w	r3, #8
    6984:	d1fa      	bne.n	697c <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6986:	2288      	movs	r2, #136	; 0x88
    6988:	4b2b      	ldr	r3, [pc, #172]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    698a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    698e:	461a      	mov	r2, r3
    6990:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6994:	f013 0f04 	tst.w	r3, #4
    6998:	d1fa      	bne.n	6990 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    699a:	2242      	movs	r2, #66	; 0x42
    699c:	4b25      	ldr	r3, [pc, #148]	; (6a34 <_oscctrl_init_referenced_generators+0x120>)
    699e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    69a2:	2227      	movs	r2, #39	; 0x27
    69a4:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    69a8:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    69aa:	461a      	mov	r2, r3
    69ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
    69ae:	f013 0f06 	tst.w	r3, #6
    69b2:	d1fb      	bne.n	69ac <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    69b4:	4b20      	ldr	r3, [pc, #128]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    69b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    69ba:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    69bc:	2202      	movs	r2, #2
    69be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    69c2:	461a      	mov	r2, r3
    69c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    69c6:	f013 0f02 	tst.w	r3, #2
    69ca:	d1fb      	bne.n	69c4 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    69cc:	4b1a      	ldr	r3, [pc, #104]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    69ce:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    69d2:	f013 0f01 	tst.w	r3, #1
    69d6:	d026      	beq.n	6a26 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    69d8:	4a17      	ldr	r2, [pc, #92]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    69da:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    69dc:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    69e0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    69e4:	d1f9      	bne.n	69da <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    69e6:	4b14      	ldr	r3, [pc, #80]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    69e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    69ea:	f012 0f01 	tst.w	r2, #1
    69ee:	d103      	bne.n	69f8 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    69f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    69f2:	f012 0f02 	tst.w	r2, #2
    69f6:	d0f7      	beq.n	69e8 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    69f8:	4a0e      	ldr	r2, [pc, #56]	; (6a34 <_oscctrl_init_referenced_generators+0x120>)
    69fa:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    69fc:	2b00      	cmp	r3, #0
    69fe:	d1fc      	bne.n	69fa <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6a00:	4a0c      	ldr	r2, [pc, #48]	; (6a34 <_oscctrl_init_referenced_generators+0x120>)
    6a02:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6a04:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6a08:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6a0c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6a0e:	4611      	mov	r1, r2
    6a10:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6a14:	684b      	ldr	r3, [r1, #4]
    6a16:	4213      	tst	r3, r2
    6a18:	d1fc      	bne.n	6a14 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6a1a:	4a06      	ldr	r2, [pc, #24]	; (6a34 <_oscctrl_init_referenced_generators+0x120>)
    6a1c:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6a1e:	f013 0f04 	tst.w	r3, #4
    6a22:	d1fb      	bne.n	6a1c <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    6a24:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6a26:	4a04      	ldr	r2, [pc, #16]	; (6a38 <_oscctrl_init_referenced_generators+0x124>)
    6a28:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6a2a:	f413 7f80 	tst.w	r3, #256	; 0x100
    6a2e:	d0fb      	beq.n	6a28 <_oscctrl_init_referenced_generators+0x114>
    6a30:	e7d9      	b.n	69e6 <_oscctrl_init_referenced_generators+0xd2>
    6a32:	bf00      	nop
    6a34:	40001c00 	.word	0x40001c00
    6a38:	40001000 	.word	0x40001000
    6a3c:	04010000 	.word	0x04010000

00006a40 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    6a40:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6a42:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6a44:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6a46:	4903      	ldr	r1, [pc, #12]	; (6a54 <_qspi_dma_rx_complete+0x14>)
    6a48:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6a4a:	685b      	ldr	r3, [r3, #4]
    6a4c:	b103      	cbz	r3, 6a50 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    6a4e:	4798      	blx	r3
    6a50:	bd08      	pop	{r3, pc}
    6a52:	bf00      	nop
    6a54:	01000002 	.word	0x01000002

00006a58 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    6a58:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6a5a:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6a5c:	681a      	ldr	r2, [r3, #0]
    6a5e:	4903      	ldr	r1, [pc, #12]	; (6a6c <_qspi_dma_tx_complete+0x14>)
    6a60:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6a62:	685b      	ldr	r3, [r3, #4]
    6a64:	b103      	cbz	r3, 6a68 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    6a66:	4798      	blx	r3
    6a68:	bd08      	pop	{r3, pc}
    6a6a:	bf00      	nop
    6a6c:	01000002 	.word	0x01000002

00006a70 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    6a70:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    6a72:	6883      	ldr	r3, [r0, #8]
    6a74:	689b      	ldr	r3, [r3, #8]
    6a76:	b103      	cbz	r3, 6a7a <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    6a78:	4798      	blx	r3
    6a7a:	bd08      	pop	{r3, pc}

00006a7c <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    6a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a7e:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    6a80:	4604      	mov	r4, r0
    6a82:	2800      	cmp	r0, #0
    6a84:	d027      	beq.n	6ad6 <_qspi_dma_init+0x5a>
    6a86:	1c08      	adds	r0, r1, #0
    6a88:	bf18      	it	ne
    6a8a:	2001      	movne	r0, #1
    6a8c:	22cb      	movs	r2, #203	; 0xcb
    6a8e:	4913      	ldr	r1, [pc, #76]	; (6adc <_qspi_dma_init+0x60>)
    6a90:	4b13      	ldr	r3, [pc, #76]	; (6ae0 <_qspi_dma_init+0x64>)
    6a92:	4798      	blx	r3
	dev->prvt = hw;
    6a94:	4626      	mov	r6, r4
    6a96:	f846 5b0c 	str.w	r5, [r6], #12
    6a9a:	2301      	movs	r3, #1
    6a9c:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    6a9e:	4b11      	ldr	r3, [pc, #68]	; (6ae4 <_qspi_dma_init+0x68>)
    6aa0:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    6aa2:	4b11      	ldr	r3, [pc, #68]	; (6ae8 <_qspi_dma_init+0x6c>)
    6aa4:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    6aa6:	211f      	movs	r1, #31
    6aa8:	4630      	mov	r0, r6
    6aaa:	4f10      	ldr	r7, [pc, #64]	; (6aec <_qspi_dma_init+0x70>)
    6aac:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6aae:	68e3      	ldr	r3, [r4, #12]
    6ab0:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    6ab2:	68e3      	ldr	r3, [r4, #12]
    6ab4:	4a0e      	ldr	r2, [pc, #56]	; (6af0 <_qspi_dma_init+0x74>)
    6ab6:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6ab8:	68e3      	ldr	r3, [r4, #12]
    6aba:	4d0e      	ldr	r5, [pc, #56]	; (6af4 <_qspi_dma_init+0x78>)
    6abc:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    6abe:	211e      	movs	r1, #30
    6ac0:	4630      	mov	r0, r6
    6ac2:	47b8      	blx	r7
	dev->resource->back                 = dev;
    6ac4:	68e3      	ldr	r3, [r4, #12]
    6ac6:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    6ac8:	68e3      	ldr	r3, [r4, #12]
    6aca:	4a0b      	ldr	r2, [pc, #44]	; (6af8 <_qspi_dma_init+0x7c>)
    6acc:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6ace:	68e3      	ldr	r3, [r4, #12]
    6ad0:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    6ad2:	2000      	movs	r0, #0
    6ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ad6:	2000      	movs	r0, #0
    6ad8:	e7d8      	b.n	6a8c <_qspi_dma_init+0x10>
    6ada:	bf00      	nop
    6adc:	0000df74 	.word	0x0000df74
    6ae0:	00005e5d 	.word	0x00005e5d
    6ae4:	06000011 	.word	0x06000011
    6ae8:	00243b00 	.word	0x00243b00
    6aec:	000066f9 	.word	0x000066f9
    6af0:	00006a41 	.word	0x00006a41
    6af4:	00006a71 	.word	0x00006a71
    6af8:	00006a59 	.word	0x00006a59

00006afc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    6afc:	b500      	push	{lr}
    6afe:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    6b00:	4b0d      	ldr	r3, [pc, #52]	; (6b38 <RAMECC_Handler+0x3c>)
    6b02:	789b      	ldrb	r3, [r3, #2]
    6b04:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    6b06:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    6b08:	9b01      	ldr	r3, [sp, #4]
    6b0a:	f013 0f02 	tst.w	r3, #2
    6b0e:	d006      	beq.n	6b1e <RAMECC_Handler+0x22>
    6b10:	4b0a      	ldr	r3, [pc, #40]	; (6b3c <RAMECC_Handler+0x40>)
    6b12:	681b      	ldr	r3, [r3, #0]
    6b14:	b11b      	cbz	r3, 6b1e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    6b16:	4a08      	ldr	r2, [pc, #32]	; (6b38 <RAMECC_Handler+0x3c>)
    6b18:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6b1a:	4798      	blx	r3
    6b1c:	e009      	b.n	6b32 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    6b1e:	9b01      	ldr	r3, [sp, #4]
    6b20:	f013 0f01 	tst.w	r3, #1
    6b24:	d005      	beq.n	6b32 <RAMECC_Handler+0x36>
    6b26:	4b05      	ldr	r3, [pc, #20]	; (6b3c <RAMECC_Handler+0x40>)
    6b28:	685b      	ldr	r3, [r3, #4]
    6b2a:	b113      	cbz	r3, 6b32 <RAMECC_Handler+0x36>
    6b2c:	4a02      	ldr	r2, [pc, #8]	; (6b38 <RAMECC_Handler+0x3c>)
    6b2e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6b30:	4798      	blx	r3
	} else {
		return;
	}
}
    6b32:	b003      	add	sp, #12
    6b34:	f85d fb04 	ldr.w	pc, [sp], #4
    6b38:	41020000 	.word	0x41020000
    6b3c:	20007da0 	.word	0x20007da0

00006b40 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    6b40:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6b42:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6b44:	6913      	ldr	r3, [r2, #16]
    6b46:	f013 0f60 	tst.w	r3, #96	; 0x60
    6b4a:	d1fb      	bne.n	6b44 <_rtc_timer_set_period+0x4>
}
    6b4c:	4770      	bx	lr

00006b4e <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    6b4e:	68c2      	ldr	r2, [r0, #12]
    6b50:	6913      	ldr	r3, [r2, #16]
    6b52:	f013 0f60 	tst.w	r3, #96	; 0x60
    6b56:	d1fb      	bne.n	6b50 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    6b58:	6a10      	ldr	r0, [r2, #32]
}
    6b5a:	4770      	bx	lr

00006b5c <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    6b5c:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6b5e:	f248 0103 	movw	r1, #32771	; 0x8003
    6b62:	6913      	ldr	r3, [r2, #16]
    6b64:	420b      	tst	r3, r1
    6b66:	d1fc      	bne.n	6b62 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6b68:	8810      	ldrh	r0, [r2, #0]
}
    6b6a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6b6e:	4770      	bx	lr

00006b70 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    6b70:	4770      	bx	lr
	...

00006b74 <_rtc_timer_init>:
{
    6b74:	b538      	push	{r3, r4, r5, lr}
    6b76:	460c      	mov	r4, r1
	ASSERT(dev);
    6b78:	4605      	mov	r5, r0
    6b7a:	2230      	movs	r2, #48	; 0x30
    6b7c:	4914      	ldr	r1, [pc, #80]	; (6bd0 <_rtc_timer_init+0x5c>)
    6b7e:	3000      	adds	r0, #0
    6b80:	bf18      	it	ne
    6b82:	2001      	movne	r0, #1
    6b84:	4b13      	ldr	r3, [pc, #76]	; (6bd4 <_rtc_timer_init+0x60>)
    6b86:	4798      	blx	r3
	dev->hw = hw;
    6b88:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6b8a:	2301      	movs	r3, #1
    6b8c:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6b8e:	f248 0203 	movw	r2, #32771	; 0x8003
    6b92:	6923      	ldr	r3, [r4, #16]
    6b94:	4213      	tst	r3, r2
    6b96:	d1fc      	bne.n	6b92 <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6b98:	68eb      	ldr	r3, [r5, #12]
    6b9a:	691a      	ldr	r2, [r3, #16]
    6b9c:	f012 0f01 	tst.w	r2, #1
    6ba0:	d1fb      	bne.n	6b9a <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6ba2:	f248 0280 	movw	r2, #32896	; 0x8080
    6ba6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6ba8:	f248 0103 	movw	r1, #32771	; 0x8003
    6bac:	691a      	ldr	r2, [r3, #16]
    6bae:	420a      	tst	r2, r1
    6bb0:	d1fc      	bne.n	6bac <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    6bb2:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6bb4:	2301      	movs	r3, #1
    6bb6:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6bb8:	6913      	ldr	r3, [r2, #16]
    6bba:	f013 0f60 	tst.w	r3, #96	; 0x60
    6bbe:	d1fb      	bne.n	6bb8 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    6bc0:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    6bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
    6bc6:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    6bc8:	4b03      	ldr	r3, [pc, #12]	; (6bd8 <_rtc_timer_init+0x64>)
    6bca:	601d      	str	r5, [r3, #0]
}
    6bcc:	2000      	movs	r0, #0
    6bce:	bd38      	pop	{r3, r4, r5, pc}
    6bd0:	0000df8c 	.word	0x0000df8c
    6bd4:	00005e5d 	.word	0x00005e5d
    6bd8:	2000097c 	.word	0x2000097c

00006bdc <_rtc_timer_deinit>:
{
    6bdc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6bde:	4604      	mov	r4, r0
    6be0:	b1c8      	cbz	r0, 6c16 <_rtc_timer_deinit+0x3a>
    6be2:	68c0      	ldr	r0, [r0, #12]
    6be4:	3000      	adds	r0, #0
    6be6:	bf18      	it	ne
    6be8:	2001      	movne	r0, #1
    6bea:	2252      	movs	r2, #82	; 0x52
    6bec:	490b      	ldr	r1, [pc, #44]	; (6c1c <_rtc_timer_deinit+0x40>)
    6bee:	4b0c      	ldr	r3, [pc, #48]	; (6c20 <_rtc_timer_deinit+0x44>)
    6bf0:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6bf6:	4b0b      	ldr	r3, [pc, #44]	; (6c24 <_rtc_timer_deinit+0x48>)
    6bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6bfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c00:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    6c04:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6c06:	2301      	movs	r3, #1
    6c08:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6c0a:	f248 0103 	movw	r1, #32771	; 0x8003
    6c0e:	6913      	ldr	r3, [r2, #16]
    6c10:	420b      	tst	r3, r1
    6c12:	d1fc      	bne.n	6c0e <_rtc_timer_deinit+0x32>
}
    6c14:	bd10      	pop	{r4, pc}
    6c16:	2000      	movs	r0, #0
    6c18:	e7e7      	b.n	6bea <_rtc_timer_deinit+0xe>
    6c1a:	bf00      	nop
    6c1c:	0000df8c 	.word	0x0000df8c
    6c20:	00005e5d 	.word	0x00005e5d
    6c24:	e000e100 	.word	0xe000e100

00006c28 <_rtc_timer_start>:
{
    6c28:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6c2a:	4604      	mov	r4, r0
    6c2c:	b310      	cbz	r0, 6c74 <_rtc_timer_start+0x4c>
    6c2e:	68c0      	ldr	r0, [r0, #12]
    6c30:	3000      	adds	r0, #0
    6c32:	bf18      	it	ne
    6c34:	2001      	movne	r0, #1
    6c36:	225e      	movs	r2, #94	; 0x5e
    6c38:	490f      	ldr	r1, [pc, #60]	; (6c78 <_rtc_timer_start+0x50>)
    6c3a:	4b10      	ldr	r3, [pc, #64]	; (6c7c <_rtc_timer_start+0x54>)
    6c3c:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6c42:	4b0f      	ldr	r3, [pc, #60]	; (6c80 <_rtc_timer_start+0x58>)
    6c44:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    6c46:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    6c48:	2300      	movs	r3, #0
    6c4a:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6c4c:	6913      	ldr	r3, [r2, #16]
    6c4e:	f013 0f08 	tst.w	r3, #8
    6c52:	d1fb      	bne.n	6c4c <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    6c54:	68e3      	ldr	r3, [r4, #12]
    6c56:	691a      	ldr	r2, [r3, #16]
    6c58:	f012 0f08 	tst.w	r2, #8
    6c5c:	d1fb      	bne.n	6c56 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    6c5e:	881a      	ldrh	r2, [r3, #0]
    6c60:	b292      	uxth	r2, r2
    6c62:	f042 0202 	orr.w	r2, r2, #2
    6c66:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6c68:	f248 0103 	movw	r1, #32771	; 0x8003
    6c6c:	691a      	ldr	r2, [r3, #16]
    6c6e:	420a      	tst	r2, r1
    6c70:	d1fc      	bne.n	6c6c <_rtc_timer_start+0x44>
}
    6c72:	bd10      	pop	{r4, pc}
    6c74:	2000      	movs	r0, #0
    6c76:	e7de      	b.n	6c36 <_rtc_timer_start+0xe>
    6c78:	0000df8c 	.word	0x0000df8c
    6c7c:	00005e5d 	.word	0x00005e5d
    6c80:	e000e100 	.word	0xe000e100

00006c84 <_rtc_timer_stop>:
{
    6c84:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6c86:	4604      	mov	r4, r0
    6c88:	b1a0      	cbz	r0, 6cb4 <_rtc_timer_stop+0x30>
    6c8a:	68c0      	ldr	r0, [r0, #12]
    6c8c:	3000      	adds	r0, #0
    6c8e:	bf18      	it	ne
    6c90:	2001      	movne	r0, #1
    6c92:	226b      	movs	r2, #107	; 0x6b
    6c94:	4908      	ldr	r1, [pc, #32]	; (6cb8 <_rtc_timer_stop+0x34>)
    6c96:	4b09      	ldr	r3, [pc, #36]	; (6cbc <_rtc_timer_stop+0x38>)
    6c98:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6c9a:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6c9c:	8813      	ldrh	r3, [r2, #0]
    6c9e:	f023 0302 	bic.w	r3, r3, #2
    6ca2:	041b      	lsls	r3, r3, #16
    6ca4:	0c1b      	lsrs	r3, r3, #16
    6ca6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6ca8:	f248 0103 	movw	r1, #32771	; 0x8003
    6cac:	6913      	ldr	r3, [r2, #16]
    6cae:	420b      	tst	r3, r1
    6cb0:	d1fc      	bne.n	6cac <_rtc_timer_stop+0x28>
}
    6cb2:	bd10      	pop	{r4, pc}
    6cb4:	2000      	movs	r0, #0
    6cb6:	e7ec      	b.n	6c92 <_rtc_timer_stop+0xe>
    6cb8:	0000df8c 	.word	0x0000df8c
    6cbc:	00005e5d 	.word	0x00005e5d

00006cc0 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    6cc0:	4800      	ldr	r0, [pc, #0]	; (6cc4 <_rtc_get_timer+0x4>)
    6cc2:	4770      	bx	lr
    6cc4:	20000358 	.word	0x20000358

00006cc8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6cc8:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    6cca:	4b08      	ldr	r3, [pc, #32]	; (6cec <RTC_Handler+0x24>)
    6ccc:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6cce:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6cd0:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    6cd2:	f413 7f80 	tst.w	r3, #256	; 0x100
    6cd6:	d007      	beq.n	6ce8 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    6cd8:	6823      	ldr	r3, [r4, #0]
    6cda:	b10b      	cbz	r3, 6ce0 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    6cdc:	4620      	mov	r0, r4
    6cde:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6ce0:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ce6:	819a      	strh	r2, [r3, #12]
    6ce8:	bd10      	pop	{r4, pc}
    6cea:	bf00      	nop
    6cec:	2000097c 	.word	0x2000097c

00006cf0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6cf0:	b470      	push	{r4, r5, r6}
    6cf2:	b089      	sub	sp, #36	; 0x24
    6cf4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6cf6:	466c      	mov	r4, sp
    6cf8:	4d0d      	ldr	r5, [pc, #52]	; (6d30 <_sercom_get_hardware_index+0x40>)
    6cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6cfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6d02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6d06:	9b00      	ldr	r3, [sp, #0]
    6d08:	42b3      	cmp	r3, r6
    6d0a:	d00d      	beq.n	6d28 <_sercom_get_hardware_index+0x38>
    6d0c:	4631      	mov	r1, r6
    6d0e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6d10:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6d12:	f853 2b04 	ldr.w	r2, [r3], #4
    6d16:	428a      	cmp	r2, r1
    6d18:	d007      	beq.n	6d2a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6d1a:	3001      	adds	r0, #1
    6d1c:	2808      	cmp	r0, #8
    6d1e:	d1f8      	bne.n	6d12 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    6d20:	2000      	movs	r0, #0
}
    6d22:	b009      	add	sp, #36	; 0x24
    6d24:	bc70      	pop	{r4, r5, r6}
    6d26:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6d28:	2000      	movs	r0, #0
			return i;
    6d2a:	b2c0      	uxtb	r0, r0
    6d2c:	e7f9      	b.n	6d22 <_sercom_get_hardware_index+0x32>
    6d2e:	bf00      	nop
    6d30:	0000dfa4 	.word	0x0000dfa4

00006d34 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    6d34:	b510      	push	{r4, lr}
	void *hw = device->hw;
    6d36:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6d38:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6d3a:	f013 0f01 	tst.w	r3, #1
    6d3e:	d003      	beq.n	6d48 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    6d40:	7da3      	ldrb	r3, [r4, #22]
    6d42:	f013 0f01 	tst.w	r3, #1
    6d46:	d112      	bne.n	6d6e <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6d48:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    6d4a:	f013 0f02 	tst.w	r3, #2
    6d4e:	d003      	beq.n	6d58 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    6d50:	7da3      	ldrb	r3, [r4, #22]
    6d52:	f013 0f02 	tst.w	r3, #2
    6d56:	d10f      	bne.n	6d78 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6d58:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    6d5a:	f013 0f04 	tst.w	r3, #4
    6d5e:	d015      	beq.n	6d8c <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    6d60:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    6d62:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6d66:	b163      	cbz	r3, 6d82 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6d68:	23ff      	movs	r3, #255	; 0xff
    6d6a:	8363      	strh	r3, [r4, #26]
    6d6c:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    6d6e:	2301      	movs	r3, #1
    6d70:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    6d72:	6803      	ldr	r3, [r0, #0]
    6d74:	4798      	blx	r3
    6d76:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6d78:	2302      	movs	r3, #2
    6d7a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    6d7c:	6883      	ldr	r3, [r0, #8]
    6d7e:	4798      	blx	r3
    6d80:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    6d82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    6d84:	6843      	ldr	r3, [r0, #4]
    6d86:	b2c9      	uxtb	r1, r1
    6d88:	4798      	blx	r3
    6d8a:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    6d8c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    6d8e:	09db      	lsrs	r3, r3, #7
    6d90:	d100      	bne.n	6d94 <_sercom_usart_interrupt_handler+0x60>
    6d92:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    6d94:	2380      	movs	r3, #128	; 0x80
    6d96:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    6d98:	68c3      	ldr	r3, [r0, #12]
    6d9a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    6d9c:	8b63      	ldrh	r3, [r4, #26]
    6d9e:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6da0:	8363      	strh	r3, [r4, #26]
    6da2:	e7f6      	b.n	6d92 <_sercom_usart_interrupt_handler+0x5e>

00006da4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    6da4:	4b11      	ldr	r3, [pc, #68]	; (6dec <_sercom_init_irq_param+0x48>)
    6da6:	4298      	cmp	r0, r3
    6da8:	d011      	beq.n	6dce <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    6daa:	4b11      	ldr	r3, [pc, #68]	; (6df0 <_sercom_init_irq_param+0x4c>)
    6dac:	4298      	cmp	r0, r3
    6dae:	d011      	beq.n	6dd4 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    6db0:	4b10      	ldr	r3, [pc, #64]	; (6df4 <_sercom_init_irq_param+0x50>)
    6db2:	4298      	cmp	r0, r3
    6db4:	d011      	beq.n	6dda <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    6db6:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    6dba:	d011      	beq.n	6de0 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    6dbc:	4b0e      	ldr	r3, [pc, #56]	; (6df8 <_sercom_init_irq_param+0x54>)
    6dbe:	4298      	cmp	r0, r3
    6dc0:	d011      	beq.n	6de6 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    6dc2:	4b0e      	ldr	r3, [pc, #56]	; (6dfc <_sercom_init_irq_param+0x58>)
    6dc4:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    6dc6:	bf04      	itt	eq
    6dc8:	4b0d      	ldreq	r3, [pc, #52]	; (6e00 <_sercom_init_irq_param+0x5c>)
    6dca:	6159      	streq	r1, [r3, #20]
    6dcc:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    6dce:	4b0c      	ldr	r3, [pc, #48]	; (6e00 <_sercom_init_irq_param+0x5c>)
    6dd0:	6019      	str	r1, [r3, #0]
    6dd2:	e7f0      	b.n	6db6 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    6dd4:	4b0a      	ldr	r3, [pc, #40]	; (6e00 <_sercom_init_irq_param+0x5c>)
    6dd6:	6059      	str	r1, [r3, #4]
    6dd8:	e7f0      	b.n	6dbc <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    6dda:	4b09      	ldr	r3, [pc, #36]	; (6e00 <_sercom_init_irq_param+0x5c>)
    6ddc:	6099      	str	r1, [r3, #8]
    6dde:	e7f0      	b.n	6dc2 <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    6de0:	4b07      	ldr	r3, [pc, #28]	; (6e00 <_sercom_init_irq_param+0x5c>)
    6de2:	60d9      	str	r1, [r3, #12]
    6de4:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6de6:	4b06      	ldr	r3, [pc, #24]	; (6e00 <_sercom_init_irq_param+0x5c>)
    6de8:	6119      	str	r1, [r3, #16]
    6dea:	4770      	bx	lr
    6dec:	40003000 	.word	0x40003000
    6df0:	40003400 	.word	0x40003400
    6df4:	41014000 	.word	0x41014000
    6df8:	43000400 	.word	0x43000400
    6dfc:	43000800 	.word	0x43000800
    6e00:	20000980 	.word	0x20000980

00006e04 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6e04:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6e06:	4b03      	ldr	r3, [pc, #12]	; (6e14 <_sercom_get_irq_num+0x10>)
    6e08:	4798      	blx	r3
    6e0a:	0080      	lsls	r0, r0, #2
    6e0c:	302e      	adds	r0, #46	; 0x2e
}
    6e0e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    6e12:	bd08      	pop	{r3, pc}
    6e14:	00006cf1 	.word	0x00006cf1

00006e18 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6e18:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6e1a:	f013 0f01 	tst.w	r3, #1
    6e1e:	d109      	bne.n	6e34 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6e20:	6803      	ldr	r3, [r0, #0]
    6e22:	f043 0302 	orr.w	r3, r3, #2
    6e26:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6e28:	69c3      	ldr	r3, [r0, #28]
    6e2a:	f013 0f03 	tst.w	r3, #3
    6e2e:	d1fb      	bne.n	6e28 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6e30:	2000      	movs	r0, #0
    6e32:	4770      	bx	lr
		return ERR_BUSY;
    6e34:	f06f 0003 	mvn.w	r0, #3
}
    6e38:	4770      	bx	lr
	...

00006e3c <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6e3c:	b538      	push	{r3, r4, r5, lr}
    6e3e:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6e40:	4b0b      	ldr	r3, [pc, #44]	; (6e70 <_spi_async_enable+0x34>)
    6e42:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6e44:	4620      	mov	r0, r4
    6e46:	4b0b      	ldr	r3, [pc, #44]	; (6e74 <_spi_async_enable+0x38>)
    6e48:	4798      	blx	r3
    6e4a:	1d01      	adds	r1, r0, #4
    6e4c:	b2c9      	uxtb	r1, r1
    6e4e:	2501      	movs	r5, #1
    6e50:	4c09      	ldr	r4, [pc, #36]	; (6e78 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    6e52:	1c43      	adds	r3, r0, #1
    6e54:	b2db      	uxtb	r3, r3
    6e56:	0942      	lsrs	r2, r0, #5
    6e58:	f000 001f 	and.w	r0, r0, #31
    6e5c:	fa05 f000 	lsl.w	r0, r5, r0
    6e60:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    6e64:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    6e66:	4299      	cmp	r1, r3
    6e68:	d1f3      	bne.n	6e52 <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    6e6a:	2000      	movs	r0, #0
    6e6c:	bd38      	pop	{r3, r4, r5, pc}
    6e6e:	bf00      	nop
    6e70:	00006e19 	.word	0x00006e19
    6e74:	00006e05 	.word	0x00006e05
    6e78:	e000e100 	.word	0xe000e100

00006e7c <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6e7c:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    6e7e:	f013 0f03 	tst.w	r3, #3
    6e82:	d111      	bne.n	6ea8 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6e84:	69c3      	ldr	r3, [r0, #28]
    6e86:	f013 0f03 	tst.w	r3, #3
    6e8a:	d1fb      	bne.n	6e84 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    6e8c:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    6e8e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    6e92:	0709      	lsls	r1, r1, #28
    6e94:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    6e98:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6e9a:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6e9c:	69c3      	ldr	r3, [r0, #28]
    6e9e:	f013 0f03 	tst.w	r3, #3
    6ea2:	d1fb      	bne.n	6e9c <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    6ea4:	2000      	movs	r0, #0
    6ea6:	4770      	bx	lr
		return ERR_BUSY;
    6ea8:	f06f 0003 	mvn.w	r0, #3
}
    6eac:	4770      	bx	lr

00006eae <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6eae:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6eb0:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6eb2:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6eb4:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6eb6:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6eb8:	f013 0f01 	tst.w	r3, #1
    6ebc:	d109      	bne.n	6ed2 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6ebe:	f013 0f04 	tst.w	r3, #4
    6ec2:	d109      	bne.n	6ed8 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6ec4:	f013 0f02 	tst.w	r3, #2
    6ec8:	d109      	bne.n	6ede <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6eca:	f013 0f80 	tst.w	r3, #128	; 0x80
    6ece:	d10b      	bne.n	6ee8 <_spi_handler+0x3a>
    6ed0:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    6ed2:	6883      	ldr	r3, [r0, #8]
    6ed4:	4798      	blx	r3
    6ed6:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    6ed8:	68c3      	ldr	r3, [r0, #12]
    6eda:	4798      	blx	r3
    6edc:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6ede:	2302      	movs	r3, #2
    6ee0:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    6ee2:	6903      	ldr	r3, [r0, #16]
    6ee4:	4798      	blx	r3
    6ee6:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6ee8:	2304      	movs	r3, #4
    6eea:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6eec:	2380      	movs	r3, #128	; 0x80
    6eee:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6ef0:	6943      	ldr	r3, [r0, #20]
    6ef2:	f06f 0112 	mvn.w	r1, #18
    6ef6:	4798      	blx	r3
	}
}
    6ef8:	e7ea      	b.n	6ed0 <_spi_handler+0x22>
	...

00006efc <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    6efc:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6efe:	4b03      	ldr	r3, [pc, #12]	; (6f0c <_spi_get_tx_dma_channel+0x10>)
    6f00:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    6f02:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6f04:	bf0c      	ite	eq
    6f06:	2008      	moveq	r0, #8
    6f08:	2000      	movne	r0, #0
    6f0a:	bd08      	pop	{r3, pc}
    6f0c:	00006cf1 	.word	0x00006cf1

00006f10 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6f10:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6f12:	4b03      	ldr	r3, [pc, #12]	; (6f20 <_spi_get_rx_dma_channel+0x10>)
    6f14:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6f16:	2807      	cmp	r0, #7
    6f18:	bf8c      	ite	hi
    6f1a:	2000      	movhi	r0, #0
    6f1c:	2001      	movls	r0, #1
    6f1e:	bd08      	pop	{r3, pc}
    6f20:	00006cf1 	.word	0x00006cf1

00006f24 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    6f24:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    6f26:	6883      	ldr	r3, [r0, #8]
    6f28:	689b      	ldr	r3, [r3, #8]
    6f2a:	b103      	cbz	r3, 6f2e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    6f2c:	4798      	blx	r3
    6f2e:	bd08      	pop	{r3, pc}

00006f30 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6f30:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    6f32:	6883      	ldr	r3, [r0, #8]
    6f34:	685b      	ldr	r3, [r3, #4]
    6f36:	b103      	cbz	r3, 6f3a <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6f38:	4798      	blx	r3
    6f3a:	bd08      	pop	{r3, pc}

00006f3c <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    6f3c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    6f3e:	6883      	ldr	r3, [r0, #8]
    6f40:	68db      	ldr	r3, [r3, #12]
    6f42:	b103      	cbz	r3, 6f46 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    6f44:	4798      	blx	r3
    6f46:	bd08      	pop	{r3, pc}

00006f48 <_usart_init>:
{
    6f48:	b510      	push	{r4, lr}
    6f4a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6f4c:	4b48      	ldr	r3, [pc, #288]	; (7070 <_usart_init+0x128>)
    6f4e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6f50:	2800      	cmp	r0, #0
    6f52:	d06a      	beq.n	702a <_usart_init+0xe2>
    6f54:	2801      	cmp	r0, #1
    6f56:	d062      	beq.n	701e <_usart_init+0xd6>
    6f58:	2802      	cmp	r0, #2
    6f5a:	d062      	beq.n	7022 <_usart_init+0xda>
    6f5c:	2804      	cmp	r0, #4
    6f5e:	d062      	beq.n	7026 <_usart_init+0xde>
    6f60:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6f62:	bf08      	it	eq
    6f64:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    6f66:	d006      	beq.n	6f76 <_usart_init+0x2e>
	ASSERT(false);
    6f68:	f240 2276 	movw	r2, #630	; 0x276
    6f6c:	4941      	ldr	r1, [pc, #260]	; (7074 <_usart_init+0x12c>)
    6f6e:	2000      	movs	r0, #0
    6f70:	4b41      	ldr	r3, [pc, #260]	; (7078 <_usart_init+0x130>)
    6f72:	4798      	blx	r3
	return 0;
    6f74:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    6f76:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    6f78:	f013 0f01 	tst.w	r3, #1
    6f7c:	d122      	bne.n	6fc4 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    6f7e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    6f82:	4a3e      	ldr	r2, [pc, #248]	; (707c <_usart_init+0x134>)
    6f84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6f8a:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6f8e:	69e3      	ldr	r3, [r4, #28]
    6f90:	f013 0f03 	tst.w	r3, #3
    6f94:	d1fb      	bne.n	6f8e <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    6f96:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    6f98:	f013 0f02 	tst.w	r3, #2
    6f9c:	d00b      	beq.n	6fb6 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6f9e:	6823      	ldr	r3, [r4, #0]
    6fa0:	f023 0302 	bic.w	r3, r3, #2
    6fa4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6fa6:	69e3      	ldr	r3, [r4, #28]
    6fa8:	f013 0f03 	tst.w	r3, #3
    6fac:	d1fb      	bne.n	6fa6 <_usart_init+0x5e>
    6fae:	69e3      	ldr	r3, [r4, #28]
    6fb0:	f013 0f02 	tst.w	r3, #2
    6fb4:	d1fb      	bne.n	6fae <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    6fb6:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6fba:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6fbc:	69e3      	ldr	r3, [r4, #28]
    6fbe:	f013 0f03 	tst.w	r3, #3
    6fc2:	d1fb      	bne.n	6fbc <_usart_init+0x74>
    6fc4:	69e3      	ldr	r3, [r4, #28]
    6fc6:	f013 0f01 	tst.w	r3, #1
    6fca:	d1fb      	bne.n	6fc4 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    6fcc:	460a      	mov	r2, r1
    6fce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6fd2:	4b2a      	ldr	r3, [pc, #168]	; (707c <_usart_init+0x134>)
    6fd4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6fd8:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6fda:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6fdc:	69e3      	ldr	r3, [r4, #28]
    6fde:	f013 0f03 	tst.w	r3, #3
    6fe2:	d1fb      	bne.n	6fdc <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    6fe4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6fe8:	4924      	ldr	r1, [pc, #144]	; (707c <_usart_init+0x134>)
    6fea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6ff0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6ff2:	69e3      	ldr	r3, [r4, #28]
    6ff4:	f013 0f1f 	tst.w	r3, #31
    6ff8:	d1fb      	bne.n	6ff2 <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    6ffa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6ffe:	491f      	ldr	r1, [pc, #124]	; (707c <_usart_init+0x134>)
    7000:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    7006:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    7008:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    700c:	d10f      	bne.n	702e <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    700e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7012:	491a      	ldr	r1, [pc, #104]	; (707c <_usart_init+0x134>)
    7014:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7018:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    701a:	81a3      	strh	r3, [r4, #12]
    701c:	e016      	b.n	704c <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    701e:	2101      	movs	r1, #1
    7020:	e7a9      	b.n	6f76 <_usart_init+0x2e>
    7022:	2102      	movs	r1, #2
    7024:	e7a7      	b.n	6f76 <_usart_init+0x2e>
    7026:	2103      	movs	r1, #3
    7028:	e7a5      	b.n	6f76 <_usart_init+0x2e>
    702a:	2100      	movs	r1, #0
    702c:	e7a3      	b.n	6f76 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    702e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7032:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7036:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    7038:	89a1      	ldrh	r1, [r4, #12]
    703a:	f360 010c 	bfi	r1, r0, #0, #13
    703e:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    7040:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    7044:	89a3      	ldrh	r3, [r4, #12]
    7046:	f361 334f 	bfi	r3, r1, #13, #3
    704a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    704c:	4b0b      	ldr	r3, [pc, #44]	; (707c <_usart_init+0x134>)
    704e:	0051      	lsls	r1, r2, #1
    7050:	1888      	adds	r0, r1, r2
    7052:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7056:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    705a:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    705c:	440a      	add	r2, r1
    705e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    7066:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    706a:	2000      	movs	r0, #0
    706c:	bd10      	pop	{r4, pc}
    706e:	bf00      	nop
    7070:	00006cf1 	.word	0x00006cf1
    7074:	0000e078 	.word	0x0000e078
    7078:	00005e5d 	.word	0x00005e5d
    707c:	0000dfa4 	.word	0x0000dfa4

00007080 <_get_i2cm_index>:
{
    7080:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7082:	4b07      	ldr	r3, [pc, #28]	; (70a0 <_get_i2cm_index+0x20>)
    7084:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    7086:	2805      	cmp	r0, #5
    7088:	d008      	beq.n	709c <_get_i2cm_index+0x1c>
	ASSERT(false);
    708a:	f240 32ed 	movw	r2, #1005	; 0x3ed
    708e:	4905      	ldr	r1, [pc, #20]	; (70a4 <_get_i2cm_index+0x24>)
    7090:	2000      	movs	r0, #0
    7092:	4b05      	ldr	r3, [pc, #20]	; (70a8 <_get_i2cm_index+0x28>)
    7094:	4798      	blx	r3
	return -1;
    7096:	f04f 30ff 	mov.w	r0, #4294967295
}
    709a:	bd08      	pop	{r3, pc}
			return i;
    709c:	2000      	movs	r0, #0
    709e:	bd08      	pop	{r3, pc}
    70a0:	00006cf1 	.word	0x00006cf1
    70a4:	0000e078 	.word	0x0000e078
    70a8:	00005e5d 	.word	0x00005e5d

000070ac <_i2c_m_sync_init_impl>:
{
    70ac:	b538      	push	{r3, r4, r5, lr}
    70ae:	4605      	mov	r5, r0
    70b0:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    70b2:	4608      	mov	r0, r1
    70b4:	4b34      	ldr	r3, [pc, #208]	; (7188 <_i2c_m_sync_init_impl+0xdc>)
    70b6:	4798      	blx	r3
    70b8:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    70ba:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    70bc:	f013 0f01 	tst.w	r3, #1
    70c0:	d123      	bne.n	710a <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    70c2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    70c6:	4a31      	ldr	r2, [pc, #196]	; (718c <_i2c_m_sync_init_impl+0xe0>)
    70c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    70cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    70d0:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    70d4:	69e3      	ldr	r3, [r4, #28]
    70d6:	f013 0f03 	tst.w	r3, #3
    70da:	d1fb      	bne.n	70d4 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    70dc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    70de:	f013 0f02 	tst.w	r3, #2
    70e2:	d00b      	beq.n	70fc <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    70e4:	6823      	ldr	r3, [r4, #0]
    70e6:	f023 0302 	bic.w	r3, r3, #2
    70ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    70ec:	69e3      	ldr	r3, [r4, #28]
    70ee:	f013 0f03 	tst.w	r3, #3
    70f2:	d1fb      	bne.n	70ec <_i2c_m_sync_init_impl+0x40>
    70f4:	69e3      	ldr	r3, [r4, #28]
    70f6:	f013 0f02 	tst.w	r3, #2
    70fa:	d1fb      	bne.n	70f4 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    70fc:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7100:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7102:	69e3      	ldr	r3, [r4, #28]
    7104:	f013 0f03 	tst.w	r3, #3
    7108:	d1fb      	bne.n	7102 <_i2c_m_sync_init_impl+0x56>
    710a:	69e3      	ldr	r3, [r4, #28]
    710c:	f013 0f01 	tst.w	r3, #1
    7110:	d1fb      	bne.n	710a <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7112:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7116:	4a1d      	ldr	r2, [pc, #116]	; (718c <_i2c_m_sync_init_impl+0xe0>)
    7118:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    711c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7120:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7122:	69e3      	ldr	r3, [r4, #28]
    7124:	f013 0f03 	tst.w	r3, #3
    7128:	d1fb      	bne.n	7122 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    712a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    712e:	4917      	ldr	r1, [pc, #92]	; (718c <_i2c_m_sync_init_impl+0xe0>)
    7130:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7138:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    713a:	69e3      	ldr	r3, [r4, #28]
    713c:	f013 0f04 	tst.w	r3, #4
    7140:	d1fb      	bne.n	713a <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7142:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7146:	4911      	ldr	r1, [pc, #68]	; (718c <_i2c_m_sync_init_impl+0xe0>)
    7148:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    714c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    7150:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    7152:	f3c2 6301 	ubfx	r3, r2, #24, #2
    7156:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7158:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    715a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    715e:	2b01      	cmp	r3, #1
    7160:	bf94      	ite	ls
    7162:	2300      	movls	r3, #0
    7164:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7166:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    716a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    716c:	69e3      	ldr	r3, [r4, #28]
    716e:	f013 0f04 	tst.w	r3, #4
    7172:	d1fb      	bne.n	716c <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    7174:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7178:	4b04      	ldr	r3, [pc, #16]	; (718c <_i2c_m_sync_init_impl+0xe0>)
    717a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    717e:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    7182:	81eb      	strh	r3, [r5, #14]
}
    7184:	2000      	movs	r0, #0
    7186:	bd38      	pop	{r3, r4, r5, pc}
    7188:	00007081 	.word	0x00007081
    718c:	0000dfa4 	.word	0x0000dfa4

00007190 <_sercom_i2c_m_irq_handler>:
{
    7190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7194:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    7196:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7198:	7e26      	ldrb	r6, [r4, #24]
    719a:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    719c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 73d4 <_sercom_i2c_m_irq_handler+0x244>
    71a0:	f240 425f 	movw	r2, #1119	; 0x45f
    71a4:	4641      	mov	r1, r8
    71a6:	3000      	adds	r0, #0
    71a8:	bf18      	it	ne
    71aa:	2001      	movne	r0, #1
    71ac:	4f88      	ldr	r7, [pc, #544]	; (73d0 <_sercom_i2c_m_irq_handler+0x240>)
    71ae:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    71b0:	6928      	ldr	r0, [r5, #16]
    71b2:	f44f 628c 	mov.w	r2, #1120	; 0x460
    71b6:	4641      	mov	r1, r8
    71b8:	3000      	adds	r0, #0
    71ba:	bf18      	it	ne
    71bc:	2001      	movne	r0, #1
    71be:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    71c0:	f016 0f80 	tst.w	r6, #128	; 0x80
    71c4:	f040 80f4 	bne.w	73b0 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    71c8:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    71ca:	69e3      	ldr	r3, [r4, #28]
    71cc:	f013 0f04 	tst.w	r3, #4
    71d0:	d1fb      	bne.n	71ca <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    71d2:	8b63      	ldrh	r3, [r4, #26]
    71d4:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    71d6:	f016 0f01 	tst.w	r6, #1
    71da:	f000 8090 	beq.w	72fe <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    71de:	f013 0f02 	tst.w	r3, #2
    71e2:	d022      	beq.n	722a <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    71e4:	2201      	movs	r2, #1
    71e6:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    71e8:	886a      	ldrh	r2, [r5, #2]
    71ea:	b292      	uxth	r2, r2
    71ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    71f0:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    71f2:	886a      	ldrh	r2, [r5, #2]
    71f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    71f8:	0412      	lsls	r2, r2, #16
    71fa:	0c12      	lsrs	r2, r2, #16
    71fc:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    71fe:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    7202:	2b00      	cmp	r3, #0
    7204:	bf14      	ite	ne
    7206:	f06f 0104 	mvnne.w	r1, #4
    720a:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    720e:	886b      	ldrh	r3, [r5, #2]
    7210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7214:	041b      	lsls	r3, r3, #16
    7216:	0c1b      	lsrs	r3, r3, #16
    7218:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    721a:	696b      	ldr	r3, [r5, #20]
    721c:	2b00      	cmp	r3, #0
    721e:	f000 80c5 	beq.w	73ac <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    7222:	4628      	mov	r0, r5
    7224:	4798      	blx	r3
    7226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    722a:	f013 0f04 	tst.w	r3, #4
    722e:	d124      	bne.n	727a <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    7230:	886b      	ldrh	r3, [r5, #2]
    7232:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7236:	d03e      	beq.n	72b6 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    7238:	882b      	ldrh	r3, [r5, #0]
    723a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    723c:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7240:	69e3      	ldr	r3, [r4, #28]
    7242:	f013 0f04 	tst.w	r3, #4
    7246:	d1fb      	bne.n	7240 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7248:	6a63      	ldr	r3, [r4, #36]	; 0x24
    724a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    724e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    7252:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7254:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7256:	69e3      	ldr	r3, [r4, #28]
    7258:	f013 0f04 	tst.w	r3, #4
    725c:	d1fb      	bne.n	7256 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    725e:	886b      	ldrh	r3, [r5, #2]
    7260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    7264:	041b      	lsls	r3, r3, #16
    7266:	0c1b      	lsrs	r3, r3, #16
    7268:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    726a:	69ab      	ldr	r3, [r5, #24]
    726c:	2b00      	cmp	r3, #0
    726e:	f000 8088 	beq.w	7382 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    7272:	4628      	mov	r0, r5
    7274:	4798      	blx	r3
    7276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    727a:	686b      	ldr	r3, [r5, #4]
    727c:	2b00      	cmp	r3, #0
    727e:	dd04      	ble.n	728a <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    7280:	886b      	ldrh	r3, [r5, #2]
    7282:	b29b      	uxth	r3, r3
    7284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7288:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    728a:	886b      	ldrh	r3, [r5, #2]
    728c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    7290:	d108      	bne.n	72a4 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    7292:	886b      	ldrh	r3, [r5, #2]
    7294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7298:	041b      	lsls	r3, r3, #16
    729a:	0c1b      	lsrs	r3, r3, #16
    729c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    729e:	f06f 0101 	mvn.w	r1, #1
    72a2:	e7b4      	b.n	720e <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    72a4:	6863      	ldr	r3, [r4, #4]
    72a6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    72aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    72ac:	69e3      	ldr	r3, [r4, #28]
    72ae:	f013 0f04 	tst.w	r3, #4
    72b2:	d1fb      	bne.n	72ac <_sercom_i2c_m_irq_handler+0x11c>
    72b4:	e7ed      	b.n	7292 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    72b6:	686b      	ldr	r3, [r5, #4]
    72b8:	b99b      	cbnz	r3, 72e2 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    72ba:	886b      	ldrh	r3, [r5, #2]
    72bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    72c0:	d106      	bne.n	72d0 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    72c2:	886b      	ldrh	r3, [r5, #2]
    72c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    72c8:	041b      	lsls	r3, r3, #16
    72ca:	0c1b      	lsrs	r3, r3, #16
    72cc:	806b      	strh	r3, [r5, #2]
    72ce:	e7cc      	b.n	726a <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    72d0:	6863      	ldr	r3, [r4, #4]
    72d2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    72d6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    72d8:	69e3      	ldr	r3, [r4, #28]
    72da:	f013 0f04 	tst.w	r3, #4
    72de:	d1fb      	bne.n	72d8 <_sercom_i2c_m_irq_handler+0x148>
    72e0:	e7ef      	b.n	72c2 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    72e2:	68ab      	ldr	r3, [r5, #8]
    72e4:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    72e6:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    72e8:	69e3      	ldr	r3, [r4, #28]
    72ea:	f013 0f04 	tst.w	r3, #4
    72ee:	d1fb      	bne.n	72e8 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    72f0:	68ab      	ldr	r3, [r5, #8]
    72f2:	3301      	adds	r3, #1
    72f4:	60ab      	str	r3, [r5, #8]
				msg->len--;
    72f6:	686b      	ldr	r3, [r5, #4]
    72f8:	3b01      	subs	r3, #1
    72fa:	606b      	str	r3, [r5, #4]
    72fc:	e7b5      	b.n	726a <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    72fe:	f016 0f02 	tst.w	r6, #2
    7302:	d041      	beq.n	7388 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    7304:	686a      	ldr	r2, [r5, #4]
    7306:	2a00      	cmp	r2, #0
    7308:	d036      	beq.n	7378 <_sercom_i2c_m_irq_handler+0x1e8>
    730a:	f013 0f04 	tst.w	r3, #4
    730e:	d133      	bne.n	7378 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7310:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    7314:	3a01      	subs	r2, #1
    7316:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7318:	2a00      	cmp	r2, #0
    731a:	d137      	bne.n	738c <_sercom_i2c_m_irq_handler+0x1fc>
    731c:	2900      	cmp	r1, #0
    731e:	d039      	beq.n	7394 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    7320:	886b      	ldrh	r3, [r5, #2]
    7322:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    7326:	d116      	bne.n	7356 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    7328:	886b      	ldrh	r3, [r5, #2]
    732a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    732e:	041b      	lsls	r3, r3, #16
    7330:	0c1b      	lsrs	r3, r3, #16
    7332:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7334:	68aa      	ldr	r2, [r5, #8]
    7336:	1c53      	adds	r3, r2, #1
    7338:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    733a:	69e3      	ldr	r3, [r4, #28]
    733c:	f013 0f04 	tst.w	r3, #4
    7340:	d1fb      	bne.n	733a <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7344:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7346:	2302      	movs	r3, #2
    7348:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    734a:	69eb      	ldr	r3, [r5, #28]
    734c:	b1e3      	cbz	r3, 7388 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    734e:	4628      	mov	r0, r5
    7350:	4798      	blx	r3
    7352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7356:	6863      	ldr	r3, [r4, #4]
    7358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    735c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    735e:	69e3      	ldr	r3, [r4, #28]
    7360:	f013 0f04 	tst.w	r3, #4
    7364:	d1fb      	bne.n	735e <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7366:	6863      	ldr	r3, [r4, #4]
    7368:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    736c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    736e:	69e3      	ldr	r3, [r4, #28]
    7370:	f013 0f04 	tst.w	r3, #4
    7374:	d1fb      	bne.n	736e <_sercom_i2c_m_irq_handler+0x1de>
    7376:	e7d7      	b.n	7328 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7378:	2302      	movs	r3, #2
    737a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    737c:	f06f 0101 	mvn.w	r1, #1
    7380:	e745      	b.n	720e <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    7382:	f016 0f02 	tst.w	r6, #2
    7386:	d1e0      	bne.n	734a <_sercom_i2c_m_irq_handler+0x1ba>
    7388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    738c:	2a01      	cmp	r2, #1
    738e:	d1d1      	bne.n	7334 <_sercom_i2c_m_irq_handler+0x1a4>
    7390:	2900      	cmp	r1, #0
    7392:	d0cf      	beq.n	7334 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7394:	6863      	ldr	r3, [r4, #4]
    7396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    739a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    739c:	69e3      	ldr	r3, [r4, #28]
    739e:	f013 0f04 	tst.w	r3, #4
    73a2:	d1fb      	bne.n	739c <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    73a4:	686b      	ldr	r3, [r5, #4]
    73a6:	2b00      	cmp	r3, #0
    73a8:	d0ba      	beq.n	7320 <_sercom_i2c_m_irq_handler+0x190>
    73aa:	e7c3      	b.n	7334 <_sercom_i2c_m_irq_handler+0x1a4>
    73ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    73b0:	886b      	ldrh	r3, [r5, #2]
    73b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    73b6:	041b      	lsls	r3, r3, #16
    73b8:	0c1b      	lsrs	r3, r3, #16
    73ba:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    73bc:	696b      	ldr	r3, [r5, #20]
    73be:	2b00      	cmp	r3, #0
    73c0:	d0e2      	beq.n	7388 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    73c2:	f06f 0104 	mvn.w	r1, #4
    73c6:	4628      	mov	r0, r5
    73c8:	4798      	blx	r3
    73ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73ce:	bf00      	nop
    73d0:	00005e5d 	.word	0x00005e5d
    73d4:	0000e078 	.word	0x0000e078

000073d8 <_usart_set_parity>:
{
    73d8:	b570      	push	{r4, r5, r6, lr}
    73da:	b082      	sub	sp, #8
    73dc:	4604      	mov	r4, r0
    73de:	460e      	mov	r6, r1
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    73e0:	69e3      	ldr	r3, [r4, #28]
    73e2:	f013 0f03 	tst.w	r3, #3
    73e6:	d1fb      	bne.n	73e0 <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    73e8:	6825      	ldr	r5, [r4, #0]
	return (bool)tmp;
    73ea:	f3c5 0540 	ubfx	r5, r5, #1, #1
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    73ee:	6823      	ldr	r3, [r4, #0]
    73f0:	f023 0302 	bic.w	r3, r3, #2
    73f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    73f6:	69e3      	ldr	r3, [r4, #28]
    73f8:	f013 0f03 	tst.w	r3, #3
    73fc:	d1fb      	bne.n	73f6 <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    73fe:	a801      	add	r0, sp, #4
    7400:	4b1a      	ldr	r3, [pc, #104]	; (746c <_usart_set_parity+0x94>)
    7402:	4798      	blx	r3
    7404:	69e3      	ldr	r3, [r4, #28]
    7406:	f013 0f02 	tst.w	r3, #2
    740a:	d1fb      	bne.n	7404 <_usart_set_parity+0x2c>
	if (USART_PARITY_NONE != parity) {
    740c:	2e02      	cmp	r6, #2
    740e:	d023      	beq.n	7458 <_usart_set_parity+0x80>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    7410:	6823      	ldr	r3, [r4, #0]
    7412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    7416:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7418:	69e3      	ldr	r3, [r4, #28]
    741a:	f013 0f1f 	tst.w	r3, #31
    741e:	d1fb      	bne.n	7418 <_usart_set_parity+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    7420:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    7422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    7426:	3600      	adds	r6, #0
    7428:	bf18      	it	ne
    742a:	2601      	movne	r6, #1
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    742c:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    7430:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7432:	69e3      	ldr	r3, [r4, #28]
    7434:	f013 0f1f 	tst.w	r3, #31
    7438:	d1fb      	bne.n	7432 <_usart_set_parity+0x5a>
	CRITICAL_SECTION_LEAVE()
    743a:	a801      	add	r0, sp, #4
    743c:	4b0c      	ldr	r3, [pc, #48]	; (7470 <_usart_set_parity+0x98>)
    743e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    7440:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    7442:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    7446:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    744a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    744c:	69e3      	ldr	r3, [r4, #28]
    744e:	f013 0f03 	tst.w	r3, #3
    7452:	d1fb      	bne.n	744c <_usart_set_parity+0x74>
}
    7454:	b002      	add	sp, #8
    7456:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    7458:	6823      	ldr	r3, [r4, #0]
    745a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    745e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7460:	69e3      	ldr	r3, [r4, #28]
    7462:	f013 0f1f 	tst.w	r3, #31
    7466:	d1fb      	bne.n	7460 <_usart_set_parity+0x88>
    7468:	e7da      	b.n	7420 <_usart_set_parity+0x48>
    746a:	bf00      	nop
    746c:	00004a69 	.word	0x00004a69
    7470:	00004a77 	.word	0x00004a77

00007474 <_usart_sync_init>:
{
    7474:	b538      	push	{r3, r4, r5, lr}
    7476:	460c      	mov	r4, r1
	ASSERT(device);
    7478:	4605      	mov	r5, r0
    747a:	22c8      	movs	r2, #200	; 0xc8
    747c:	4905      	ldr	r1, [pc, #20]	; (7494 <_usart_sync_init+0x20>)
    747e:	3000      	adds	r0, #0
    7480:	bf18      	it	ne
    7482:	2001      	movne	r0, #1
    7484:	4b04      	ldr	r3, [pc, #16]	; (7498 <_usart_sync_init+0x24>)
    7486:	4798      	blx	r3
	device->hw = hw;
    7488:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    748a:	4620      	mov	r0, r4
    748c:	4b03      	ldr	r3, [pc, #12]	; (749c <_usart_sync_init+0x28>)
    748e:	4798      	blx	r3
}
    7490:	bd38      	pop	{r3, r4, r5, pc}
    7492:	bf00      	nop
    7494:	0000e078 	.word	0x0000e078
    7498:	00005e5d 	.word	0x00005e5d
    749c:	00006f49 	.word	0x00006f49

000074a0 <_usart_async_init>:
{
    74a0:	b570      	push	{r4, r5, r6, lr}
    74a2:	460d      	mov	r5, r1
	ASSERT(device);
    74a4:	4606      	mov	r6, r0
    74a6:	22d6      	movs	r2, #214	; 0xd6
    74a8:	4917      	ldr	r1, [pc, #92]	; (7508 <_usart_async_init+0x68>)
    74aa:	3000      	adds	r0, #0
    74ac:	bf18      	it	ne
    74ae:	2001      	movne	r0, #1
    74b0:	4b16      	ldr	r3, [pc, #88]	; (750c <_usart_async_init+0x6c>)
    74b2:	4798      	blx	r3
	init_status = _usart_init(hw);
    74b4:	4628      	mov	r0, r5
    74b6:	4b16      	ldr	r3, [pc, #88]	; (7510 <_usart_async_init+0x70>)
    74b8:	4798      	blx	r3
	if (init_status) {
    74ba:	4604      	mov	r4, r0
    74bc:	b108      	cbz	r0, 74c2 <_usart_async_init+0x22>
}
    74be:	4620      	mov	r0, r4
    74c0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    74c2:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    74c4:	4631      	mov	r1, r6
    74c6:	4628      	mov	r0, r5
    74c8:	4b12      	ldr	r3, [pc, #72]	; (7514 <_usart_async_init+0x74>)
    74ca:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    74cc:	4628      	mov	r0, r5
    74ce:	4b12      	ldr	r3, [pc, #72]	; (7518 <_usart_async_init+0x78>)
    74d0:	4798      	blx	r3
    74d2:	1d01      	adds	r1, r0, #4
    74d4:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74d6:	2501      	movs	r5, #1
    74d8:	f000 021f 	and.w	r2, r0, #31
    74dc:	fa05 f202 	lsl.w	r2, r5, r2
    74e0:	0943      	lsrs	r3, r0, #5
    74e2:	009b      	lsls	r3, r3, #2
    74e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    74e8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    74ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    74f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    74f4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74fc:	601a      	str	r2, [r3, #0]
		irq++;
    74fe:	3001      	adds	r0, #1
    7500:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7502:	4281      	cmp	r1, r0
    7504:	d1e8      	bne.n	74d8 <_usart_async_init+0x38>
    7506:	e7da      	b.n	74be <_usart_async_init+0x1e>
    7508:	0000e078 	.word	0x0000e078
    750c:	00005e5d 	.word	0x00005e5d
    7510:	00006f49 	.word	0x00006f49
    7514:	00006da5 	.word	0x00006da5
    7518:	00006e05 	.word	0x00006e05

0000751c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    751c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    751e:	6813      	ldr	r3, [r2, #0]
    7520:	f043 0302 	orr.w	r3, r3, #2
    7524:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7526:	69d3      	ldr	r3, [r2, #28]
    7528:	f013 0f03 	tst.w	r3, #3
    752c:	d1fb      	bne.n	7526 <_usart_sync_enable+0xa>
}
    752e:	4770      	bx	lr

00007530 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    7530:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7532:	6813      	ldr	r3, [r2, #0]
    7534:	f043 0302 	orr.w	r3, r3, #2
    7538:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    753a:	69d3      	ldr	r3, [r2, #28]
    753c:	f013 0f03 	tst.w	r3, #3
    7540:	d1fb      	bne.n	753a <_usart_async_enable+0xa>
}
    7542:	4770      	bx	lr

00007544 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    7544:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7546:	6813      	ldr	r3, [r2, #0]
    7548:	f023 0302 	bic.w	r3, r3, #2
    754c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    754e:	69d3      	ldr	r3, [r2, #28]
    7550:	f013 0f03 	tst.w	r3, #3
    7554:	d1fb      	bne.n	754e <_usart_async_disable+0xa>
}
    7556:	4770      	bx	lr

00007558 <_usart_async_set_parity>:
{
    7558:	b508      	push	{r3, lr}
	_usart_set_parity(device->hw, parity);
    755a:	6980      	ldr	r0, [r0, #24]
    755c:	4b01      	ldr	r3, [pc, #4]	; (7564 <_usart_async_set_parity+0xc>)
    755e:	4798      	blx	r3
    7560:	bd08      	pop	{r3, pc}
    7562:	bf00      	nop
    7564:	000073d9 	.word	0x000073d9

00007568 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7568:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    756a:	6299      	str	r1, [r3, #40]	; 0x28
    756c:	4770      	bx	lr

0000756e <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    756e:	6983      	ldr	r3, [r0, #24]
    7570:	6299      	str	r1, [r3, #40]	; 0x28
    7572:	4770      	bx	lr

00007574 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    7574:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    7576:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7578:	b2c0      	uxtb	r0, r0
    757a:	4770      	bx	lr

0000757c <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    757c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    757e:	7e18      	ldrb	r0, [r3, #24]
}
    7580:	f000 0001 	and.w	r0, r0, #1
    7584:	4770      	bx	lr

00007586 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    7586:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    7588:	7e18      	ldrb	r0, [r3, #24]
}
    758a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    758e:	4770      	bx	lr

00007590 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    7590:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    7592:	7e18      	ldrb	r0, [r3, #24]
}
    7594:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7598:	4770      	bx	lr

0000759a <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    759a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    759c:	2201      	movs	r2, #1
    759e:	759a      	strb	r2, [r3, #22]
    75a0:	4770      	bx	lr

000075a2 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    75a2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    75a4:	2202      	movs	r2, #2
    75a6:	759a      	strb	r2, [r3, #22]
    75a8:	4770      	bx	lr
	...

000075ac <_usart_async_set_irq_state>:
{
    75ac:	b570      	push	{r4, r5, r6, lr}
    75ae:	460c      	mov	r4, r1
    75b0:	4616      	mov	r6, r2
	ASSERT(device);
    75b2:	4605      	mov	r5, r0
    75b4:	f240 2236 	movw	r2, #566	; 0x236
    75b8:	4915      	ldr	r1, [pc, #84]	; (7610 <_usart_async_set_irq_state+0x64>)
    75ba:	3000      	adds	r0, #0
    75bc:	bf18      	it	ne
    75be:	2001      	movne	r0, #1
    75c0:	4b14      	ldr	r3, [pc, #80]	; (7614 <_usart_async_set_irq_state+0x68>)
    75c2:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    75c4:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    75c8:	d10d      	bne.n	75e6 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    75ca:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    75cc:	b92e      	cbnz	r6, 75da <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    75ce:	2201      	movs	r2, #1
    75d0:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    75d2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    75d4:	2202      	movs	r2, #2
    75d6:	751a      	strb	r2, [r3, #20]
    75d8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    75da:	2201      	movs	r2, #1
    75dc:	759a      	strb	r2, [r3, #22]
    75de:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    75e0:	2202      	movs	r2, #2
    75e2:	759a      	strb	r2, [r3, #22]
    75e4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    75e6:	2c01      	cmp	r4, #1
    75e8:	d002      	beq.n	75f0 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    75ea:	2c03      	cmp	r4, #3
    75ec:	d008      	beq.n	7600 <_usart_async_set_irq_state+0x54>
    75ee:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    75f0:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    75f2:	b916      	cbnz	r6, 75fa <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    75f4:	2204      	movs	r2, #4
    75f6:	751a      	strb	r2, [r3, #20]
    75f8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    75fa:	2204      	movs	r2, #4
    75fc:	759a      	strb	r2, [r3, #22]
    75fe:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    7600:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7602:	b116      	cbz	r6, 760a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    7604:	2280      	movs	r2, #128	; 0x80
    7606:	759a      	strb	r2, [r3, #22]
}
    7608:	e7f1      	b.n	75ee <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    760a:	2280      	movs	r2, #128	; 0x80
    760c:	751a      	strb	r2, [r3, #20]
    760e:	bd70      	pop	{r4, r5, r6, pc}
    7610:	0000e078 	.word	0x0000e078
    7614:	00005e5d 	.word	0x00005e5d

00007618 <_i2c_m_async_init>:
{
    7618:	b570      	push	{r4, r5, r6, lr}
    761a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    761c:	4606      	mov	r6, r0
    761e:	f240 42d2 	movw	r2, #1234	; 0x4d2
    7622:	4918      	ldr	r1, [pc, #96]	; (7684 <_i2c_m_async_init+0x6c>)
    7624:	3000      	adds	r0, #0
    7626:	bf18      	it	ne
    7628:	2001      	movne	r0, #1
    762a:	4b17      	ldr	r3, [pc, #92]	; (7688 <_i2c_m_async_init+0x70>)
    762c:	4798      	blx	r3
	i2c_dev->hw = hw;
    762e:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7630:	4629      	mov	r1, r5
    7632:	4630      	mov	r0, r6
    7634:	4b15      	ldr	r3, [pc, #84]	; (768c <_i2c_m_async_init+0x74>)
    7636:	4798      	blx	r3
	if (init_status) {
    7638:	4604      	mov	r4, r0
    763a:	b108      	cbz	r0, 7640 <_i2c_m_async_init+0x28>
}
    763c:	4620      	mov	r0, r4
    763e:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7640:	4631      	mov	r1, r6
    7642:	4628      	mov	r0, r5
    7644:	4b12      	ldr	r3, [pc, #72]	; (7690 <_i2c_m_async_init+0x78>)
    7646:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7648:	4628      	mov	r0, r5
    764a:	4b12      	ldr	r3, [pc, #72]	; (7694 <_i2c_m_async_init+0x7c>)
    764c:	4798      	blx	r3
    764e:	1d01      	adds	r1, r0, #4
    7650:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7652:	2501      	movs	r5, #1
    7654:	f000 021f 	and.w	r2, r0, #31
    7658:	fa05 f202 	lsl.w	r2, r5, r2
    765c:	0943      	lsrs	r3, r0, #5
    765e:	009b      	lsls	r3, r3, #2
    7660:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7664:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    766c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7670:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7674:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7678:	601a      	str	r2, [r3, #0]
		irq++;
    767a:	3001      	adds	r0, #1
    767c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    767e:	4281      	cmp	r1, r0
    7680:	d1e8      	bne.n	7654 <_i2c_m_async_init+0x3c>
    7682:	e7db      	b.n	763c <_i2c_m_async_init+0x24>
    7684:	0000e078 	.word	0x0000e078
    7688:	00005e5d 	.word	0x00005e5d
    768c:	000070ad 	.word	0x000070ad
    7690:	00006da5 	.word	0x00006da5
    7694:	00006e05 	.word	0x00006e05

00007698 <_i2c_m_async_transfer>:
{
    7698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    769c:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    769e:	4605      	mov	r5, r0
    76a0:	f110 0800 	adds.w	r8, r0, #0
    76a4:	bf18      	it	ne
    76a6:	f04f 0801 	movne.w	r8, #1
    76aa:	4f45      	ldr	r7, [pc, #276]	; (77c0 <_i2c_m_async_transfer+0x128>)
    76ac:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    76b0:	4639      	mov	r1, r7
    76b2:	4640      	mov	r0, r8
    76b4:	4e43      	ldr	r6, [pc, #268]	; (77c4 <_i2c_m_async_transfer+0x12c>)
    76b6:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    76b8:	6928      	ldr	r0, [r5, #16]
    76ba:	f240 5229 	movw	r2, #1321	; 0x529
    76be:	4639      	mov	r1, r7
    76c0:	3000      	adds	r0, #0
    76c2:	bf18      	it	ne
    76c4:	2001      	movne	r0, #1
    76c6:	47b0      	blx	r6
	ASSERT(msg);
    76c8:	f240 522a 	movw	r2, #1322	; 0x52a
    76cc:	4639      	mov	r1, r7
    76ce:	1c20      	adds	r0, r4, #0
    76d0:	bf18      	it	ne
    76d2:	2001      	movne	r0, #1
    76d4:	47b0      	blx	r6
	if (msg->len == 0) {
    76d6:	6860      	ldr	r0, [r4, #4]
    76d8:	2800      	cmp	r0, #0
    76da:	d06f      	beq.n	77bc <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    76dc:	886b      	ldrh	r3, [r5, #2]
    76de:	f413 7f80 	tst.w	r3, #256	; 0x100
    76e2:	d169      	bne.n	77b8 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    76e4:	8863      	ldrh	r3, [r4, #2]
    76e6:	b29b      	uxth	r3, r3
    76e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    76ec:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    76ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    76f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    76f6:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    76f8:	6853      	ldr	r3, [r2, #4]
    76fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    76fe:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7700:	69d3      	ldr	r3, [r2, #28]
    7702:	f013 0f04 	tst.w	r3, #4
    7706:	d1fb      	bne.n	7700 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    7708:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    770a:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    770c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    7710:	492b      	ldr	r1, [pc, #172]	; (77c0 <_i2c_m_async_transfer+0x128>)
    7712:	4640      	mov	r0, r8
    7714:	4b2b      	ldr	r3, [pc, #172]	; (77c4 <_i2c_m_async_transfer+0x12c>)
    7716:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    7718:	686b      	ldr	r3, [r5, #4]
    771a:	2b01      	cmp	r3, #1
    771c:	d02a      	beq.n	7774 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    771e:	6863      	ldr	r3, [r4, #4]
    7720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    7724:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7726:	69e3      	ldr	r3, [r4, #28]
    7728:	f013 0f04 	tst.w	r3, #4
    772c:	d1fb      	bne.n	7726 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    772e:	882b      	ldrh	r3, [r5, #0]
    7730:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7734:	d02a      	beq.n	778c <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    7736:	886a      	ldrh	r2, [r5, #2]
    7738:	f012 0f01 	tst.w	r2, #1
    773c:	d004      	beq.n	7748 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    773e:	886a      	ldrh	r2, [r5, #2]
    7740:	b292      	uxth	r2, r2
    7742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7746:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7748:	f240 72fe 	movw	r2, #2046	; 0x7fe
    774c:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    7750:	69e3      	ldr	r3, [r4, #28]
    7752:	f013 0f04 	tst.w	r3, #4
    7756:	d1fb      	bne.n	7750 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7758:	6a63      	ldr	r3, [r4, #36]	; 0x24
    775a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    775e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7762:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7764:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7766:	69e3      	ldr	r3, [r4, #28]
    7768:	f013 0f04 	tst.w	r3, #4
    776c:	d1fb      	bne.n	7766 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    776e:	2000      	movs	r0, #0
    7770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    7774:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    7778:	d0d1      	beq.n	771e <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    777a:	6863      	ldr	r3, [r4, #4]
    777c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    7780:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7782:	69e3      	ldr	r3, [r4, #28]
    7784:	f013 0f04 	tst.w	r3, #4
    7788:	d1fb      	bne.n	7782 <_i2c_m_async_transfer+0xea>
    778a:	e7d0      	b.n	772e <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    778c:	8869      	ldrh	r1, [r5, #2]
    778e:	005a      	lsls	r2, r3, #1
    7790:	b2d2      	uxtb	r2, r2
    7792:	f001 0301 	and.w	r3, r1, #1
    7796:	431a      	orrs	r2, r3
    7798:	69e3      	ldr	r3, [r4, #28]
    779a:	f013 0f04 	tst.w	r3, #4
    779e:	d1fb      	bne.n	7798 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    77a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    77a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    77a6:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    77a8:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    77aa:	69e3      	ldr	r3, [r4, #28]
    77ac:	f013 0f04 	tst.w	r3, #4
    77b0:	d1fb      	bne.n	77aa <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    77b2:	2000      	movs	r0, #0
    77b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    77b8:	f06f 0003 	mvn.w	r0, #3
}
    77bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77c0:	0000e078 	.word	0x0000e078
    77c4:	00005e5d 	.word	0x00005e5d

000077c8 <_i2c_m_async_register_callback>:
	switch (type) {
    77c8:	2901      	cmp	r1, #1
    77ca:	d006      	beq.n	77da <_i2c_m_async_register_callback+0x12>
    77cc:	b119      	cbz	r1, 77d6 <_i2c_m_async_register_callback+0xe>
    77ce:	2902      	cmp	r1, #2
    77d0:	d005      	beq.n	77de <_i2c_m_async_register_callback+0x16>
}
    77d2:	2000      	movs	r0, #0
    77d4:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    77d6:	6142      	str	r2, [r0, #20]
		break;
    77d8:	e7fb      	b.n	77d2 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    77da:	6182      	str	r2, [r0, #24]
		break;
    77dc:	e7f9      	b.n	77d2 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    77de:	61c2      	str	r2, [r0, #28]
		break;
    77e0:	e7f7      	b.n	77d2 <_i2c_m_async_register_callback+0xa>
	...

000077e4 <SERCOM0_0_Handler>:
{
    77e4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    77e6:	4b02      	ldr	r3, [pc, #8]	; (77f0 <SERCOM0_0_Handler+0xc>)
    77e8:	6818      	ldr	r0, [r3, #0]
    77ea:	4b02      	ldr	r3, [pc, #8]	; (77f4 <SERCOM0_0_Handler+0x10>)
    77ec:	4798      	blx	r3
    77ee:	bd08      	pop	{r3, pc}
    77f0:	20000980 	.word	0x20000980
    77f4:	00006d35 	.word	0x00006d35

000077f8 <SERCOM0_1_Handler>:
{
    77f8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    77fa:	4b02      	ldr	r3, [pc, #8]	; (7804 <SERCOM0_1_Handler+0xc>)
    77fc:	6818      	ldr	r0, [r3, #0]
    77fe:	4b02      	ldr	r3, [pc, #8]	; (7808 <SERCOM0_1_Handler+0x10>)
    7800:	4798      	blx	r3
    7802:	bd08      	pop	{r3, pc}
    7804:	20000980 	.word	0x20000980
    7808:	00006d35 	.word	0x00006d35

0000780c <SERCOM0_2_Handler>:
{
    780c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    780e:	4b02      	ldr	r3, [pc, #8]	; (7818 <SERCOM0_2_Handler+0xc>)
    7810:	6818      	ldr	r0, [r3, #0]
    7812:	4b02      	ldr	r3, [pc, #8]	; (781c <SERCOM0_2_Handler+0x10>)
    7814:	4798      	blx	r3
    7816:	bd08      	pop	{r3, pc}
    7818:	20000980 	.word	0x20000980
    781c:	00006d35 	.word	0x00006d35

00007820 <SERCOM0_3_Handler>:
{
    7820:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7822:	4b02      	ldr	r3, [pc, #8]	; (782c <SERCOM0_3_Handler+0xc>)
    7824:	6818      	ldr	r0, [r3, #0]
    7826:	4b02      	ldr	r3, [pc, #8]	; (7830 <SERCOM0_3_Handler+0x10>)
    7828:	4798      	blx	r3
    782a:	bd08      	pop	{r3, pc}
    782c:	20000980 	.word	0x20000980
    7830:	00006d35 	.word	0x00006d35

00007834 <SERCOM1_0_Handler>:
{
    7834:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7836:	4b02      	ldr	r3, [pc, #8]	; (7840 <SERCOM1_0_Handler+0xc>)
    7838:	6858      	ldr	r0, [r3, #4]
    783a:	4b02      	ldr	r3, [pc, #8]	; (7844 <SERCOM1_0_Handler+0x10>)
    783c:	4798      	blx	r3
    783e:	bd08      	pop	{r3, pc}
    7840:	20000980 	.word	0x20000980
    7844:	00006d35 	.word	0x00006d35

00007848 <SERCOM1_1_Handler>:
{
    7848:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    784a:	4b02      	ldr	r3, [pc, #8]	; (7854 <SERCOM1_1_Handler+0xc>)
    784c:	6858      	ldr	r0, [r3, #4]
    784e:	4b02      	ldr	r3, [pc, #8]	; (7858 <SERCOM1_1_Handler+0x10>)
    7850:	4798      	blx	r3
    7852:	bd08      	pop	{r3, pc}
    7854:	20000980 	.word	0x20000980
    7858:	00006d35 	.word	0x00006d35

0000785c <SERCOM1_2_Handler>:
{
    785c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    785e:	4b02      	ldr	r3, [pc, #8]	; (7868 <SERCOM1_2_Handler+0xc>)
    7860:	6858      	ldr	r0, [r3, #4]
    7862:	4b02      	ldr	r3, [pc, #8]	; (786c <SERCOM1_2_Handler+0x10>)
    7864:	4798      	blx	r3
    7866:	bd08      	pop	{r3, pc}
    7868:	20000980 	.word	0x20000980
    786c:	00006d35 	.word	0x00006d35

00007870 <SERCOM1_3_Handler>:
{
    7870:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7872:	4b02      	ldr	r3, [pc, #8]	; (787c <SERCOM1_3_Handler+0xc>)
    7874:	6858      	ldr	r0, [r3, #4]
    7876:	4b02      	ldr	r3, [pc, #8]	; (7880 <SERCOM1_3_Handler+0x10>)
    7878:	4798      	blx	r3
    787a:	bd08      	pop	{r3, pc}
    787c:	20000980 	.word	0x20000980
    7880:	00006d35 	.word	0x00006d35

00007884 <SERCOM3_0_Handler>:
{
    7884:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    7886:	4b02      	ldr	r3, [pc, #8]	; (7890 <SERCOM3_0_Handler+0xc>)
    7888:	6898      	ldr	r0, [r3, #8]
    788a:	4b02      	ldr	r3, [pc, #8]	; (7894 <SERCOM3_0_Handler+0x10>)
    788c:	4798      	blx	r3
    788e:	bd08      	pop	{r3, pc}
    7890:	20000980 	.word	0x20000980
    7894:	00006eaf 	.word	0x00006eaf

00007898 <SERCOM3_1_Handler>:
{
    7898:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    789a:	4b02      	ldr	r3, [pc, #8]	; (78a4 <SERCOM3_1_Handler+0xc>)
    789c:	6898      	ldr	r0, [r3, #8]
    789e:	4b02      	ldr	r3, [pc, #8]	; (78a8 <SERCOM3_1_Handler+0x10>)
    78a0:	4798      	blx	r3
    78a2:	bd08      	pop	{r3, pc}
    78a4:	20000980 	.word	0x20000980
    78a8:	00006eaf 	.word	0x00006eaf

000078ac <SERCOM3_2_Handler>:
{
    78ac:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    78ae:	4b02      	ldr	r3, [pc, #8]	; (78b8 <SERCOM3_2_Handler+0xc>)
    78b0:	6898      	ldr	r0, [r3, #8]
    78b2:	4b02      	ldr	r3, [pc, #8]	; (78bc <SERCOM3_2_Handler+0x10>)
    78b4:	4798      	blx	r3
    78b6:	bd08      	pop	{r3, pc}
    78b8:	20000980 	.word	0x20000980
    78bc:	00006eaf 	.word	0x00006eaf

000078c0 <SERCOM3_3_Handler>:
{
    78c0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    78c2:	4b02      	ldr	r3, [pc, #8]	; (78cc <SERCOM3_3_Handler+0xc>)
    78c4:	6898      	ldr	r0, [r3, #8]
    78c6:	4b02      	ldr	r3, [pc, #8]	; (78d0 <SERCOM3_3_Handler+0x10>)
    78c8:	4798      	blx	r3
    78ca:	bd08      	pop	{r3, pc}
    78cc:	20000980 	.word	0x20000980
    78d0:	00006eaf 	.word	0x00006eaf

000078d4 <SERCOM4_0_Handler>:
{
    78d4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    78d6:	4b02      	ldr	r3, [pc, #8]	; (78e0 <SERCOM4_0_Handler+0xc>)
    78d8:	68d8      	ldr	r0, [r3, #12]
    78da:	4b02      	ldr	r3, [pc, #8]	; (78e4 <SERCOM4_0_Handler+0x10>)
    78dc:	4798      	blx	r3
    78de:	bd08      	pop	{r3, pc}
    78e0:	20000980 	.word	0x20000980
    78e4:	00006d35 	.word	0x00006d35

000078e8 <SERCOM4_1_Handler>:
{
    78e8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    78ea:	4b02      	ldr	r3, [pc, #8]	; (78f4 <SERCOM4_1_Handler+0xc>)
    78ec:	68d8      	ldr	r0, [r3, #12]
    78ee:	4b02      	ldr	r3, [pc, #8]	; (78f8 <SERCOM4_1_Handler+0x10>)
    78f0:	4798      	blx	r3
    78f2:	bd08      	pop	{r3, pc}
    78f4:	20000980 	.word	0x20000980
    78f8:	00006d35 	.word	0x00006d35

000078fc <SERCOM4_2_Handler>:
{
    78fc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    78fe:	4b02      	ldr	r3, [pc, #8]	; (7908 <SERCOM4_2_Handler+0xc>)
    7900:	68d8      	ldr	r0, [r3, #12]
    7902:	4b02      	ldr	r3, [pc, #8]	; (790c <SERCOM4_2_Handler+0x10>)
    7904:	4798      	blx	r3
    7906:	bd08      	pop	{r3, pc}
    7908:	20000980 	.word	0x20000980
    790c:	00006d35 	.word	0x00006d35

00007910 <SERCOM4_3_Handler>:
{
    7910:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7912:	4b02      	ldr	r3, [pc, #8]	; (791c <SERCOM4_3_Handler+0xc>)
    7914:	68d8      	ldr	r0, [r3, #12]
    7916:	4b02      	ldr	r3, [pc, #8]	; (7920 <SERCOM4_3_Handler+0x10>)
    7918:	4798      	blx	r3
    791a:	bd08      	pop	{r3, pc}
    791c:	20000980 	.word	0x20000980
    7920:	00006d35 	.word	0x00006d35

00007924 <SERCOM5_0_Handler>:
{
    7924:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7926:	4b02      	ldr	r3, [pc, #8]	; (7930 <SERCOM5_0_Handler+0xc>)
    7928:	6918      	ldr	r0, [r3, #16]
    792a:	4b02      	ldr	r3, [pc, #8]	; (7934 <SERCOM5_0_Handler+0x10>)
    792c:	4798      	blx	r3
    792e:	bd08      	pop	{r3, pc}
    7930:	20000980 	.word	0x20000980
    7934:	00007191 	.word	0x00007191

00007938 <SERCOM5_1_Handler>:
{
    7938:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    793a:	4b02      	ldr	r3, [pc, #8]	; (7944 <SERCOM5_1_Handler+0xc>)
    793c:	6918      	ldr	r0, [r3, #16]
    793e:	4b02      	ldr	r3, [pc, #8]	; (7948 <SERCOM5_1_Handler+0x10>)
    7940:	4798      	blx	r3
    7942:	bd08      	pop	{r3, pc}
    7944:	20000980 	.word	0x20000980
    7948:	00007191 	.word	0x00007191

0000794c <SERCOM5_2_Handler>:
{
    794c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    794e:	4b02      	ldr	r3, [pc, #8]	; (7958 <SERCOM5_2_Handler+0xc>)
    7950:	6918      	ldr	r0, [r3, #16]
    7952:	4b02      	ldr	r3, [pc, #8]	; (795c <SERCOM5_2_Handler+0x10>)
    7954:	4798      	blx	r3
    7956:	bd08      	pop	{r3, pc}
    7958:	20000980 	.word	0x20000980
    795c:	00007191 	.word	0x00007191

00007960 <SERCOM5_3_Handler>:
{
    7960:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7962:	4b02      	ldr	r3, [pc, #8]	; (796c <SERCOM5_3_Handler+0xc>)
    7964:	6918      	ldr	r0, [r3, #16]
    7966:	4b02      	ldr	r3, [pc, #8]	; (7970 <SERCOM5_3_Handler+0x10>)
    7968:	4798      	blx	r3
    796a:	bd08      	pop	{r3, pc}
    796c:	20000980 	.word	0x20000980
    7970:	00007191 	.word	0x00007191

00007974 <SERCOM6_0_Handler>:
{
    7974:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7976:	4b02      	ldr	r3, [pc, #8]	; (7980 <SERCOM6_0_Handler+0xc>)
    7978:	6958      	ldr	r0, [r3, #20]
    797a:	4b02      	ldr	r3, [pc, #8]	; (7984 <SERCOM6_0_Handler+0x10>)
    797c:	4798      	blx	r3
    797e:	bd08      	pop	{r3, pc}
    7980:	20000980 	.word	0x20000980
    7984:	00006d35 	.word	0x00006d35

00007988 <SERCOM6_1_Handler>:
{
    7988:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    798a:	4b02      	ldr	r3, [pc, #8]	; (7994 <SERCOM6_1_Handler+0xc>)
    798c:	6958      	ldr	r0, [r3, #20]
    798e:	4b02      	ldr	r3, [pc, #8]	; (7998 <SERCOM6_1_Handler+0x10>)
    7990:	4798      	blx	r3
    7992:	bd08      	pop	{r3, pc}
    7994:	20000980 	.word	0x20000980
    7998:	00006d35 	.word	0x00006d35

0000799c <SERCOM6_2_Handler>:
{
    799c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    799e:	4b02      	ldr	r3, [pc, #8]	; (79a8 <SERCOM6_2_Handler+0xc>)
    79a0:	6958      	ldr	r0, [r3, #20]
    79a2:	4b02      	ldr	r3, [pc, #8]	; (79ac <SERCOM6_2_Handler+0x10>)
    79a4:	4798      	blx	r3
    79a6:	bd08      	pop	{r3, pc}
    79a8:	20000980 	.word	0x20000980
    79ac:	00006d35 	.word	0x00006d35

000079b0 <SERCOM6_3_Handler>:
{
    79b0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    79b2:	4b02      	ldr	r3, [pc, #8]	; (79bc <SERCOM6_3_Handler+0xc>)
    79b4:	6958      	ldr	r0, [r3, #20]
    79b6:	4b02      	ldr	r3, [pc, #8]	; (79c0 <SERCOM6_3_Handler+0x10>)
    79b8:	4798      	blx	r3
    79ba:	bd08      	pop	{r3, pc}
    79bc:	20000980 	.word	0x20000980
    79c0:	00006d35 	.word	0x00006d35

000079c4 <_spi_m_sync_init>:
{
    79c4:	b570      	push	{r4, r5, r6, lr}
    79c6:	4606      	mov	r6, r0
    79c8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    79ca:	4608      	mov	r0, r1
    79cc:	4b5d      	ldr	r3, [pc, #372]	; (7b44 <_spi_m_sync_init+0x180>)
    79ce:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    79d0:	2803      	cmp	r0, #3
    79d2:	d00c      	beq.n	79ee <_spi_m_sync_init+0x2a>
    79d4:	2807      	cmp	r0, #7
    79d6:	bf08      	it	eq
    79d8:	2301      	moveq	r3, #1
    79da:	d009      	beq.n	79f0 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    79dc:	2e00      	cmp	r6, #0
    79de:	f000 809f 	beq.w	7b20 <_spi_m_sync_init+0x15c>
    79e2:	2c00      	cmp	r4, #0
    79e4:	f040 80a5 	bne.w	7b32 <_spi_m_sync_init+0x16e>
	return NULL;
    79e8:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    79ea:	2000      	movs	r0, #0
    79ec:	e009      	b.n	7a02 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    79ee:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    79f0:	4d55      	ldr	r5, [pc, #340]	; (7b48 <_spi_m_sync_init+0x184>)
    79f2:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    79f6:	441d      	add	r5, r3
	ASSERT(dev && hw);
    79f8:	2e00      	cmp	r6, #0
    79fa:	d0f6      	beq.n	79ea <_spi_m_sync_init+0x26>
    79fc:	2001      	movs	r0, #1
    79fe:	2c00      	cmp	r4, #0
    7a00:	d0f3      	beq.n	79ea <_spi_m_sync_init+0x26>
    7a02:	f640 226e 	movw	r2, #2670	; 0xa6e
    7a06:	4951      	ldr	r1, [pc, #324]	; (7b4c <_spi_m_sync_init+0x188>)
    7a08:	4b51      	ldr	r3, [pc, #324]	; (7b50 <_spi_m_sync_init+0x18c>)
    7a0a:	4798      	blx	r3
	if (regs == NULL) {
    7a0c:	2d00      	cmp	r5, #0
    7a0e:	f000 8084 	beq.w	7b1a <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7a12:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7a14:	f013 0f01 	tst.w	r3, #1
    7a18:	d11d      	bne.n	7a56 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7a1a:	682b      	ldr	r3, [r5, #0]
    7a1c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a20:	69e3      	ldr	r3, [r4, #28]
    7a22:	f013 0f03 	tst.w	r3, #3
    7a26:	d1fb      	bne.n	7a20 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7a28:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7a2a:	f013 0f02 	tst.w	r3, #2
    7a2e:	d00b      	beq.n	7a48 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7a30:	6823      	ldr	r3, [r4, #0]
    7a32:	f023 0302 	bic.w	r3, r3, #2
    7a36:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a38:	69e3      	ldr	r3, [r4, #28]
    7a3a:	f013 0f03 	tst.w	r3, #3
    7a3e:	d1fb      	bne.n	7a38 <_spi_m_sync_init+0x74>
    7a40:	69e3      	ldr	r3, [r4, #28]
    7a42:	f013 0f02 	tst.w	r3, #2
    7a46:	d1fb      	bne.n	7a40 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7a48:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7a4c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a4e:	69e3      	ldr	r3, [r4, #28]
    7a50:	f013 0f03 	tst.w	r3, #3
    7a54:	d1fb      	bne.n	7a4e <_spi_m_sync_init+0x8a>
    7a56:	69e3      	ldr	r3, [r4, #28]
    7a58:	f013 0f01 	tst.w	r3, #1
    7a5c:	d1fb      	bne.n	7a56 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    7a5e:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7a60:	682b      	ldr	r3, [r5, #0]
    7a62:	f003 031c 	and.w	r3, r3, #28
    7a66:	2b08      	cmp	r3, #8
    7a68:	d02e      	beq.n	7ac8 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    7a6a:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7a6e:	4937      	ldr	r1, [pc, #220]	; (7b4c <_spi_m_sync_init+0x188>)
    7a70:	1c20      	adds	r0, r4, #0
    7a72:	bf18      	it	ne
    7a74:	2001      	movne	r0, #1
    7a76:	4b36      	ldr	r3, [pc, #216]	; (7b50 <_spi_m_sync_init+0x18c>)
    7a78:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7a7a:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7a7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7a80:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7a84:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a86:	69e3      	ldr	r3, [r4, #28]
    7a88:	f013 0f03 	tst.w	r3, #3
    7a8c:	d1fb      	bne.n	7a86 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    7a8e:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7a90:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7a94:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7a9c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a9e:	69e3      	ldr	r3, [r4, #28]
    7aa0:	f013 0f17 	tst.w	r3, #23
    7aa4:	d1fb      	bne.n	7a9e <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7aa6:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7aa8:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7aaa:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7aac:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7ab0:	686b      	ldr	r3, [r5, #4]
    7ab2:	f003 0307 	and.w	r3, r3, #7
    7ab6:	2b00      	cmp	r3, #0
    7ab8:	bf0c      	ite	eq
    7aba:	2301      	moveq	r3, #1
    7abc:	2302      	movne	r3, #2
    7abe:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    7ac0:	89eb      	ldrh	r3, [r5, #14]
    7ac2:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    7ac4:	2000      	movs	r0, #0
    7ac6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    7ac8:	f640 1284 	movw	r2, #2436	; 0x984
    7acc:	491f      	ldr	r1, [pc, #124]	; (7b4c <_spi_m_sync_init+0x188>)
    7ace:	1c20      	adds	r0, r4, #0
    7ad0:	bf18      	it	ne
    7ad2:	2001      	movne	r0, #1
    7ad4:	4b1e      	ldr	r3, [pc, #120]	; (7b50 <_spi_m_sync_init+0x18c>)
    7ad6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7ad8:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7ada:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7ade:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7ae2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7ae4:	69e3      	ldr	r3, [r4, #28]
    7ae6:	f013 0f03 	tst.w	r3, #3
    7aea:	d1fb      	bne.n	7ae4 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7aec:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7aee:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7af2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7afa:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7afe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b00:	69e3      	ldr	r3, [r4, #28]
    7b02:	f013 0f17 	tst.w	r3, #23
    7b06:	d1fb      	bne.n	7b00 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7b08:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7b0a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7b0c:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7b0e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7b12:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7b14:	2b00      	cmp	r3, #0
    7b16:	d1fc      	bne.n	7b12 <_spi_m_sync_init+0x14e>
    7b18:	e7ca      	b.n	7ab0 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    7b1a:	f06f 000c 	mvn.w	r0, #12
    7b1e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7b20:	f640 226e 	movw	r2, #2670	; 0xa6e
    7b24:	4909      	ldr	r1, [pc, #36]	; (7b4c <_spi_m_sync_init+0x188>)
    7b26:	2000      	movs	r0, #0
    7b28:	4b09      	ldr	r3, [pc, #36]	; (7b50 <_spi_m_sync_init+0x18c>)
    7b2a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7b2c:	f06f 000c 	mvn.w	r0, #12
    7b30:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    7b32:	f640 226e 	movw	r2, #2670	; 0xa6e
    7b36:	4905      	ldr	r1, [pc, #20]	; (7b4c <_spi_m_sync_init+0x188>)
    7b38:	2001      	movs	r0, #1
    7b3a:	4b05      	ldr	r3, [pc, #20]	; (7b50 <_spi_m_sync_init+0x18c>)
    7b3c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7b3e:	f06f 000c 	mvn.w	r0, #12
    7b42:	bd70      	pop	{r4, r5, r6, pc}
    7b44:	00006cf1 	.word	0x00006cf1
    7b48:	0000e054 	.word	0x0000e054
    7b4c:	0000e078 	.word	0x0000e078
    7b50:	00005e5d 	.word	0x00005e5d

00007b54 <_spi_m_async_init>:
{
    7b54:	b538      	push	{r3, r4, r5, lr}
    7b56:	4604      	mov	r4, r0
    7b58:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7b5a:	4b15      	ldr	r3, [pc, #84]	; (7bb0 <_spi_m_async_init+0x5c>)
    7b5c:	4798      	blx	r3
	if (rc < 0) {
    7b5e:	2800      	cmp	r0, #0
    7b60:	db24      	blt.n	7bac <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    7b62:	4621      	mov	r1, r4
    7b64:	4628      	mov	r0, r5
    7b66:	4b13      	ldr	r3, [pc, #76]	; (7bb4 <_spi_m_async_init+0x60>)
    7b68:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    7b6a:	2300      	movs	r3, #0
    7b6c:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    7b6e:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    7b70:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    7b72:	4628      	mov	r0, r5
    7b74:	4b10      	ldr	r3, [pc, #64]	; (7bb8 <_spi_m_async_init+0x64>)
    7b76:	4798      	blx	r3
    7b78:	1d01      	adds	r1, r0, #4
    7b7a:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b7c:	2401      	movs	r4, #1
    7b7e:	f000 021f 	and.w	r2, r0, #31
    7b82:	fa04 f202 	lsl.w	r2, r4, r2
    7b86:	0943      	lsrs	r3, r0, #5
    7b88:	009b      	lsls	r3, r3, #2
    7b8a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7b8e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7b96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7b9a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b9e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    7ba2:	3001      	adds	r0, #1
    7ba4:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7ba6:	4281      	cmp	r1, r0
    7ba8:	d1e9      	bne.n	7b7e <_spi_m_async_init+0x2a>
	return ERR_NONE;
    7baa:	2000      	movs	r0, #0
}
    7bac:	bd38      	pop	{r3, r4, r5, pc}
    7bae:	bf00      	nop
    7bb0:	000079c5 	.word	0x000079c5
    7bb4:	00006da5 	.word	0x00006da5
    7bb8:	00006e05 	.word	0x00006e05

00007bbc <_spi_m_async_enable>:
{
    7bbc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7bbe:	4604      	mov	r4, r0
    7bc0:	b160      	cbz	r0, 7bdc <_spi_m_async_enable+0x20>
    7bc2:	6800      	ldr	r0, [r0, #0]
    7bc4:	3000      	adds	r0, #0
    7bc6:	bf18      	it	ne
    7bc8:	2001      	movne	r0, #1
    7bca:	f640 22db 	movw	r2, #2779	; 0xadb
    7bce:	4904      	ldr	r1, [pc, #16]	; (7be0 <_spi_m_async_enable+0x24>)
    7bd0:	4b04      	ldr	r3, [pc, #16]	; (7be4 <_spi_m_async_enable+0x28>)
    7bd2:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    7bd4:	6820      	ldr	r0, [r4, #0]
    7bd6:	4b04      	ldr	r3, [pc, #16]	; (7be8 <_spi_m_async_enable+0x2c>)
    7bd8:	4798      	blx	r3
}
    7bda:	bd10      	pop	{r4, pc}
    7bdc:	2000      	movs	r0, #0
    7bde:	e7f4      	b.n	7bca <_spi_m_async_enable+0xe>
    7be0:	0000e078 	.word	0x0000e078
    7be4:	00005e5d 	.word	0x00005e5d
    7be8:	00006e3d 	.word	0x00006e3d

00007bec <_spi_m_async_set_mode>:
{
    7bec:	b538      	push	{r3, r4, r5, lr}
    7bee:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7bf0:	4604      	mov	r4, r0
    7bf2:	b168      	cbz	r0, 7c10 <_spi_m_async_set_mode+0x24>
    7bf4:	6800      	ldr	r0, [r0, #0]
    7bf6:	3000      	adds	r0, #0
    7bf8:	bf18      	it	ne
    7bfa:	2001      	movne	r0, #1
    7bfc:	f640 320c 	movw	r2, #2828	; 0xb0c
    7c00:	4904      	ldr	r1, [pc, #16]	; (7c14 <_spi_m_async_set_mode+0x28>)
    7c02:	4b05      	ldr	r3, [pc, #20]	; (7c18 <_spi_m_async_set_mode+0x2c>)
    7c04:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    7c06:	4629      	mov	r1, r5
    7c08:	6820      	ldr	r0, [r4, #0]
    7c0a:	4b04      	ldr	r3, [pc, #16]	; (7c1c <_spi_m_async_set_mode+0x30>)
    7c0c:	4798      	blx	r3
}
    7c0e:	bd38      	pop	{r3, r4, r5, pc}
    7c10:	2000      	movs	r0, #0
    7c12:	e7f3      	b.n	7bfc <_spi_m_async_set_mode+0x10>
    7c14:	0000e078 	.word	0x0000e078
    7c18:	00005e5d 	.word	0x00005e5d
    7c1c:	00006e7d 	.word	0x00006e7d

00007c20 <_spi_m_async_set_baudrate>:
{
    7c20:	b538      	push	{r3, r4, r5, lr}
    7c22:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    7c24:	4605      	mov	r5, r0
    7c26:	b198      	cbz	r0, 7c50 <_spi_m_async_set_baudrate+0x30>
    7c28:	6800      	ldr	r0, [r0, #0]
    7c2a:	3000      	adds	r0, #0
    7c2c:	bf18      	it	ne
    7c2e:	2001      	movne	r0, #1
    7c30:	f640 323b 	movw	r2, #2875	; 0xb3b
    7c34:	4907      	ldr	r1, [pc, #28]	; (7c54 <_spi_m_async_set_baudrate+0x34>)
    7c36:	4b08      	ldr	r3, [pc, #32]	; (7c58 <_spi_m_async_set_baudrate+0x38>)
    7c38:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    7c3a:	682b      	ldr	r3, [r5, #0]
    7c3c:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7c3e:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    7c42:	bf03      	ittte	eq
    7c44:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7c46:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    7c48:	2000      	moveq	r0, #0
		return ERR_BUSY;
    7c4a:	f06f 0003 	mvnne.w	r0, #3
}
    7c4e:	bd38      	pop	{r3, r4, r5, pc}
    7c50:	2000      	movs	r0, #0
    7c52:	e7ed      	b.n	7c30 <_spi_m_async_set_baudrate+0x10>
    7c54:	0000e078 	.word	0x0000e078
    7c58:	00005e5d 	.word	0x00005e5d

00007c5c <_spi_m_async_enable_tx>:
{
    7c5c:	b538      	push	{r3, r4, r5, lr}
    7c5e:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    7c60:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    7c62:	b160      	cbz	r0, 7c7e <_spi_m_async_enable_tx+0x22>
    7c64:	1c20      	adds	r0, r4, #0
    7c66:	bf18      	it	ne
    7c68:	2001      	movne	r0, #1
    7c6a:	f640 32fe 	movw	r2, #3070	; 0xbfe
    7c6e:	4906      	ldr	r1, [pc, #24]	; (7c88 <_spi_m_async_enable_tx+0x2c>)
    7c70:	4b06      	ldr	r3, [pc, #24]	; (7c8c <_spi_m_async_enable_tx+0x30>)
    7c72:	4798      	blx	r3
	if (state) {
    7c74:	b92d      	cbnz	r5, 7c82 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7c76:	2301      	movs	r3, #1
    7c78:	7523      	strb	r3, [r4, #20]
}
    7c7a:	2000      	movs	r0, #0
    7c7c:	bd38      	pop	{r3, r4, r5, pc}
    7c7e:	2000      	movs	r0, #0
    7c80:	e7f3      	b.n	7c6a <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    7c82:	2301      	movs	r3, #1
    7c84:	75a3      	strb	r3, [r4, #22]
    7c86:	e7f8      	b.n	7c7a <_spi_m_async_enable_tx+0x1e>
    7c88:	0000e078 	.word	0x0000e078
    7c8c:	00005e5d 	.word	0x00005e5d

00007c90 <_spi_m_async_enable_rx>:
{
    7c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c92:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    7c94:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    7c96:	4e0c      	ldr	r6, [pc, #48]	; (7cc8 <_spi_m_async_enable_rx+0x38>)
    7c98:	f640 4212 	movw	r2, #3090	; 0xc12
    7c9c:	4631      	mov	r1, r6
    7c9e:	3000      	adds	r0, #0
    7ca0:	bf18      	it	ne
    7ca2:	2001      	movne	r0, #1
    7ca4:	4d09      	ldr	r5, [pc, #36]	; (7ccc <_spi_m_async_enable_rx+0x3c>)
    7ca6:	47a8      	blx	r5
	ASSERT(hw);
    7ca8:	f640 4213 	movw	r2, #3091	; 0xc13
    7cac:	4631      	mov	r1, r6
    7cae:	1c20      	adds	r0, r4, #0
    7cb0:	bf18      	it	ne
    7cb2:	2001      	movne	r0, #1
    7cb4:	47a8      	blx	r5
	if (state) {
    7cb6:	b91f      	cbnz	r7, 7cc0 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    7cb8:	2304      	movs	r3, #4
    7cba:	7523      	strb	r3, [r4, #20]
}
    7cbc:	2000      	movs	r0, #0
    7cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    7cc0:	2304      	movs	r3, #4
    7cc2:	75a3      	strb	r3, [r4, #22]
    7cc4:	e7fa      	b.n	7cbc <_spi_m_async_enable_rx+0x2c>
    7cc6:	bf00      	nop
    7cc8:	0000e078 	.word	0x0000e078
    7ccc:	00005e5d 	.word	0x00005e5d

00007cd0 <_spi_m_async_enable_tx_complete>:
{
    7cd0:	b538      	push	{r3, r4, r5, lr}
    7cd2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7cd4:	4604      	mov	r4, r0
    7cd6:	b170      	cbz	r0, 7cf6 <_spi_m_async_enable_tx_complete+0x26>
    7cd8:	6800      	ldr	r0, [r0, #0]
    7cda:	3000      	adds	r0, #0
    7cdc:	bf18      	it	ne
    7cde:	2001      	movne	r0, #1
    7ce0:	f640 4225 	movw	r2, #3109	; 0xc25
    7ce4:	4907      	ldr	r1, [pc, #28]	; (7d04 <_spi_m_async_enable_tx_complete+0x34>)
    7ce6:	4b08      	ldr	r3, [pc, #32]	; (7d08 <_spi_m_async_enable_tx_complete+0x38>)
    7ce8:	4798      	blx	r3
	if (state) {
    7cea:	b935      	cbnz	r5, 7cfa <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7cec:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    7cee:	2202      	movs	r2, #2
    7cf0:	751a      	strb	r2, [r3, #20]
}
    7cf2:	2000      	movs	r0, #0
    7cf4:	bd38      	pop	{r3, r4, r5, pc}
    7cf6:	2000      	movs	r0, #0
    7cf8:	e7f2      	b.n	7ce0 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7cfa:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7cfc:	2202      	movs	r2, #2
    7cfe:	759a      	strb	r2, [r3, #22]
    7d00:	e7f7      	b.n	7cf2 <_spi_m_async_enable_tx_complete+0x22>
    7d02:	bf00      	nop
    7d04:	0000e078 	.word	0x0000e078
    7d08:	00005e5d 	.word	0x00005e5d

00007d0c <_spi_m_async_write_one>:
{
    7d0c:	b538      	push	{r3, r4, r5, lr}
    7d0e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7d10:	4604      	mov	r4, r0
    7d12:	b160      	cbz	r0, 7d2e <_spi_m_async_write_one+0x22>
    7d14:	6800      	ldr	r0, [r0, #0]
    7d16:	3000      	adds	r0, #0
    7d18:	bf18      	it	ne
    7d1a:	2001      	movne	r0, #1
    7d1c:	f640 4237 	movw	r2, #3127	; 0xc37
    7d20:	4904      	ldr	r1, [pc, #16]	; (7d34 <_spi_m_async_write_one+0x28>)
    7d22:	4b05      	ldr	r3, [pc, #20]	; (7d38 <_spi_m_async_write_one+0x2c>)
    7d24:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7d26:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    7d28:	629d      	str	r5, [r3, #40]	; 0x28
}
    7d2a:	2000      	movs	r0, #0
    7d2c:	bd38      	pop	{r3, r4, r5, pc}
    7d2e:	2000      	movs	r0, #0
    7d30:	e7f4      	b.n	7d1c <_spi_m_async_write_one+0x10>
    7d32:	bf00      	nop
    7d34:	0000e078 	.word	0x0000e078
    7d38:	00005e5d 	.word	0x00005e5d

00007d3c <_spi_m_async_read_one>:
{
    7d3c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7d3e:	4604      	mov	r4, r0
    7d40:	b160      	cbz	r0, 7d5c <_spi_m_async_read_one+0x20>
    7d42:	6800      	ldr	r0, [r0, #0]
    7d44:	3000      	adds	r0, #0
    7d46:	bf18      	it	ne
    7d48:	2001      	movne	r0, #1
    7d4a:	f640 4252 	movw	r2, #3154	; 0xc52
    7d4e:	4904      	ldr	r1, [pc, #16]	; (7d60 <_spi_m_async_read_one+0x24>)
    7d50:	4b04      	ldr	r3, [pc, #16]	; (7d64 <_spi_m_async_read_one+0x28>)
    7d52:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7d54:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7d56:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7d58:	b280      	uxth	r0, r0
    7d5a:	bd10      	pop	{r4, pc}
    7d5c:	2000      	movs	r0, #0
    7d5e:	e7f4      	b.n	7d4a <_spi_m_async_read_one+0xe>
    7d60:	0000e078 	.word	0x0000e078
    7d64:	00005e5d 	.word	0x00005e5d

00007d68 <_spi_m_async_register_callback>:
{
    7d68:	b570      	push	{r4, r5, r6, lr}
    7d6a:	460d      	mov	r5, r1
    7d6c:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    7d6e:	4604      	mov	r4, r0
    7d70:	b168      	cbz	r0, 7d8e <_spi_m_async_register_callback+0x26>
    7d72:	2903      	cmp	r1, #3
    7d74:	bf8c      	ite	hi
    7d76:	2000      	movhi	r0, #0
    7d78:	2001      	movls	r0, #1
    7d7a:	f640 426b 	movw	r2, #3179	; 0xc6b
    7d7e:	4905      	ldr	r1, [pc, #20]	; (7d94 <_spi_m_async_register_callback+0x2c>)
    7d80:	4b05      	ldr	r3, [pc, #20]	; (7d98 <_spi_m_async_register_callback+0x30>)
    7d82:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    7d84:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    7d88:	60a6      	str	r6, [r4, #8]
}
    7d8a:	2000      	movs	r0, #0
    7d8c:	bd70      	pop	{r4, r5, r6, pc}
    7d8e:	2000      	movs	r0, #0
    7d90:	e7f3      	b.n	7d7a <_spi_m_async_register_callback+0x12>
    7d92:	bf00      	nop
    7d94:	0000e078 	.word	0x0000e078
    7d98:	00005e5d 	.word	0x00005e5d

00007d9c <_spi_m_async_set_irq_state>:
{
    7d9c:	b570      	push	{r4, r5, r6, lr}
    7d9e:	460c      	mov	r4, r1
    7da0:	4615      	mov	r5, r2
	ASSERT(device);
    7da2:	4606      	mov	r6, r0
    7da4:	f640 42ac 	movw	r2, #3244	; 0xcac
    7da8:	4908      	ldr	r1, [pc, #32]	; (7dcc <_spi_m_async_set_irq_state+0x30>)
    7daa:	3000      	adds	r0, #0
    7dac:	bf18      	it	ne
    7dae:	2001      	movne	r0, #1
    7db0:	4b07      	ldr	r3, [pc, #28]	; (7dd0 <_spi_m_async_set_irq_state+0x34>)
    7db2:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    7db4:	2c03      	cmp	r4, #3
    7db6:	d000      	beq.n	7dba <_spi_m_async_set_irq_state+0x1e>
    7db8:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    7dba:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    7dbc:	b115      	cbz	r5, 7dc4 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    7dbe:	2280      	movs	r2, #128	; 0x80
    7dc0:	759a      	strb	r2, [r3, #22]
}
    7dc2:	e7f9      	b.n	7db8 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    7dc4:	2280      	movs	r2, #128	; 0x80
    7dc6:	751a      	strb	r2, [r3, #20]
    7dc8:	bd70      	pop	{r4, r5, r6, pc}
    7dca:	bf00      	nop
    7dcc:	0000e078 	.word	0x0000e078
    7dd0:	00005e5d 	.word	0x00005e5d

00007dd4 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    7dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dd8:	4605      	mov	r5, r0
    7dda:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7ddc:	4608      	mov	r0, r1
    7dde:	4b52      	ldr	r3, [pc, #328]	; (7f28 <_spi_m_dma_init+0x154>)
    7de0:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7de2:	2803      	cmp	r0, #3
    7de4:	d00c      	beq.n	7e00 <_spi_m_dma_init+0x2c>
    7de6:	2807      	cmp	r0, #7
    7de8:	bf08      	it	eq
    7dea:	2301      	moveq	r3, #1
    7dec:	d009      	beq.n	7e02 <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    7dee:	2d00      	cmp	r5, #0
    7df0:	f000 8086 	beq.w	7f00 <_spi_m_dma_init+0x12c>
    7df4:	2c00      	cmp	r4, #0
    7df6:	f040 808d 	bne.w	7f14 <_spi_m_dma_init+0x140>
	return NULL;
    7dfa:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7dfc:	2000      	movs	r0, #0
    7dfe:	e009      	b.n	7e14 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    7e00:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    7e02:	4e4a      	ldr	r6, [pc, #296]	; (7f2c <_spi_m_dma_init+0x158>)
    7e04:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7e08:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7e0a:	2d00      	cmp	r5, #0
    7e0c:	d0f6      	beq.n	7dfc <_spi_m_dma_init+0x28>
    7e0e:	2001      	movs	r0, #1
    7e10:	2c00      	cmp	r4, #0
    7e12:	d0f3      	beq.n	7dfc <_spi_m_dma_init+0x28>
    7e14:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7e18:	4945      	ldr	r1, [pc, #276]	; (7f30 <_spi_m_dma_init+0x15c>)
    7e1a:	4b46      	ldr	r3, [pc, #280]	; (7f34 <_spi_m_dma_init+0x160>)
    7e1c:	4798      	blx	r3

	if (regs == NULL) {
    7e1e:	2e00      	cmp	r6, #0
    7e20:	d06a      	beq.n	7ef8 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7e22:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7e24:	f013 0f01 	tst.w	r3, #1
    7e28:	d11d      	bne.n	7e66 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7e2a:	6833      	ldr	r3, [r6, #0]
    7e2c:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e30:	69e3      	ldr	r3, [r4, #28]
    7e32:	f013 0f03 	tst.w	r3, #3
    7e36:	d1fb      	bne.n	7e30 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7e38:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7e3a:	f013 0f02 	tst.w	r3, #2
    7e3e:	d00b      	beq.n	7e58 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7e40:	6823      	ldr	r3, [r4, #0]
    7e42:	f023 0302 	bic.w	r3, r3, #2
    7e46:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e48:	69e3      	ldr	r3, [r4, #28]
    7e4a:	f013 0f03 	tst.w	r3, #3
    7e4e:	d1fb      	bne.n	7e48 <_spi_m_dma_init+0x74>
    7e50:	69e3      	ldr	r3, [r4, #28]
    7e52:	f013 0f02 	tst.w	r3, #2
    7e56:	d1fb      	bne.n	7e50 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7e58:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7e5c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e5e:	69e3      	ldr	r3, [r4, #28]
    7e60:	f013 0f03 	tst.w	r3, #3
    7e64:	d1fb      	bne.n	7e5e <_spi_m_dma_init+0x8a>
    7e66:	69e3      	ldr	r3, [r4, #28]
    7e68:	f013 0f01 	tst.w	r3, #1
    7e6c:	d1fb      	bne.n	7e66 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    7e6e:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    7e70:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7e74:	492e      	ldr	r1, [pc, #184]	; (7f30 <_spi_m_dma_init+0x15c>)
    7e76:	1c20      	adds	r0, r4, #0
    7e78:	bf18      	it	ne
    7e7a:	2001      	movne	r0, #1
    7e7c:	4b2d      	ldr	r3, [pc, #180]	; (7f34 <_spi_m_dma_init+0x160>)
    7e7e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7e80:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    7e82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7e86:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7e8a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7e8c:	69e3      	ldr	r3, [r4, #28]
    7e8e:	f013 0f03 	tst.w	r3, #3
    7e92:	d1fb      	bne.n	7e8c <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    7e94:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    7e96:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7e9a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7ea2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7ea4:	69e3      	ldr	r3, [r4, #28]
    7ea6:	f013 0f17 	tst.w	r3, #23
    7eaa:	d1fb      	bne.n	7ea4 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7eac:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7eae:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7eb0:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7eb2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    7eb6:	f105 0818 	add.w	r8, r5, #24
    7eba:	4620      	mov	r0, r4
    7ebc:	4b1e      	ldr	r3, [pc, #120]	; (7f38 <_spi_m_dma_init+0x164>)
    7ebe:	4798      	blx	r3
    7ec0:	4601      	mov	r1, r0
    7ec2:	4640      	mov	r0, r8
    7ec4:	4f1d      	ldr	r7, [pc, #116]	; (7f3c <_spi_m_dma_init+0x168>)
    7ec6:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7ec8:	69ab      	ldr	r3, [r5, #24]
    7eca:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    7ecc:	69ab      	ldr	r3, [r5, #24]
    7ece:	4a1c      	ldr	r2, [pc, #112]	; (7f40 <_spi_m_dma_init+0x16c>)
    7ed0:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7ed2:	69ab      	ldr	r3, [r5, #24]
    7ed4:	4e1b      	ldr	r6, [pc, #108]	; (7f44 <_spi_m_dma_init+0x170>)
    7ed6:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    7ed8:	4620      	mov	r0, r4
    7eda:	4b1b      	ldr	r3, [pc, #108]	; (7f48 <_spi_m_dma_init+0x174>)
    7edc:	4798      	blx	r3
    7ede:	4601      	mov	r1, r0
    7ee0:	4640      	mov	r0, r8
    7ee2:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7ee4:	69ab      	ldr	r3, [r5, #24]
    7ee6:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7ee8:	69ab      	ldr	r3, [r5, #24]
    7eea:	4a18      	ldr	r2, [pc, #96]	; (7f4c <_spi_m_dma_init+0x178>)
    7eec:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7eee:	69ab      	ldr	r3, [r5, #24]
    7ef0:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    7ef2:	2000      	movs	r0, #0
    7ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7ef8:	f06f 000c 	mvn.w	r0, #12
    7efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7f00:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7f04:	490a      	ldr	r1, [pc, #40]	; (7f30 <_spi_m_dma_init+0x15c>)
    7f06:	2000      	movs	r0, #0
    7f08:	4b0a      	ldr	r3, [pc, #40]	; (7f34 <_spi_m_dma_init+0x160>)
    7f0a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7f0c:	f06f 000c 	mvn.w	r0, #12
    7f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7f14:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7f18:	4905      	ldr	r1, [pc, #20]	; (7f30 <_spi_m_dma_init+0x15c>)
    7f1a:	2001      	movs	r0, #1
    7f1c:	4b05      	ldr	r3, [pc, #20]	; (7f34 <_spi_m_dma_init+0x160>)
    7f1e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7f20:	f06f 000c 	mvn.w	r0, #12
    7f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f28:	00006cf1 	.word	0x00006cf1
    7f2c:	0000e054 	.word	0x0000e054
    7f30:	0000e078 	.word	0x0000e078
    7f34:	00005e5d 	.word	0x00005e5d
    7f38:	00006f11 	.word	0x00006f11
    7f3c:	000066f9 	.word	0x000066f9
    7f40:	00006f25 	.word	0x00006f25
    7f44:	00006f3d 	.word	0x00006f3d
    7f48:	00006efd 	.word	0x00006efd
    7f4c:	00006f31 	.word	0x00006f31

00007f50 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    7f50:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7f52:	4604      	mov	r4, r0
    7f54:	b160      	cbz	r0, 7f70 <_spi_m_dma_enable+0x20>
    7f56:	6800      	ldr	r0, [r0, #0]
    7f58:	3000      	adds	r0, #0
    7f5a:	bf18      	it	ne
    7f5c:	2001      	movne	r0, #1
    7f5e:	f640 52c9 	movw	r2, #3529	; 0xdc9
    7f62:	4904      	ldr	r1, [pc, #16]	; (7f74 <_spi_m_dma_enable+0x24>)
    7f64:	4b04      	ldr	r3, [pc, #16]	; (7f78 <_spi_m_dma_enable+0x28>)
    7f66:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    7f68:	6820      	ldr	r0, [r4, #0]
    7f6a:	4b04      	ldr	r3, [pc, #16]	; (7f7c <_spi_m_dma_enable+0x2c>)
    7f6c:	4798      	blx	r3
}
    7f6e:	bd10      	pop	{r4, pc}
    7f70:	2000      	movs	r0, #0
    7f72:	e7f4      	b.n	7f5e <_spi_m_dma_enable+0xe>
    7f74:	0000e078 	.word	0x0000e078
    7f78:	00005e5d 	.word	0x00005e5d
    7f7c:	00006e19 	.word	0x00006e19

00007f80 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    7f80:	b570      	push	{r4, r5, r6, lr}
    7f82:	4605      	mov	r5, r0
    7f84:	4614      	mov	r4, r2
	switch (type) {
    7f86:	2901      	cmp	r1, #1
    7f88:	d00e      	beq.n	7fa8 <_spi_m_dma_register_callback+0x28>
    7f8a:	b111      	cbz	r1, 7f92 <_spi_m_dma_register_callback+0x12>
    7f8c:	2902      	cmp	r1, #2
    7f8e:	d016      	beq.n	7fbe <_spi_m_dma_register_callback+0x3e>
    7f90:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    7f92:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7f94:	6800      	ldr	r0, [r0, #0]
    7f96:	4b13      	ldr	r3, [pc, #76]	; (7fe4 <_spi_m_dma_register_callback+0x64>)
    7f98:	4798      	blx	r3
    7f9a:	1c22      	adds	r2, r4, #0
    7f9c:	bf18      	it	ne
    7f9e:	2201      	movne	r2, #1
    7fa0:	2100      	movs	r1, #0
    7fa2:	4b11      	ldr	r3, [pc, #68]	; (7fe8 <_spi_m_dma_register_callback+0x68>)
    7fa4:	4798      	blx	r3
		break;
    7fa6:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    7fa8:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7faa:	6800      	ldr	r0, [r0, #0]
    7fac:	4b0f      	ldr	r3, [pc, #60]	; (7fec <_spi_m_dma_register_callback+0x6c>)
    7fae:	4798      	blx	r3
    7fb0:	1c22      	adds	r2, r4, #0
    7fb2:	bf18      	it	ne
    7fb4:	2201      	movne	r2, #1
    7fb6:	2100      	movs	r1, #0
    7fb8:	4b0b      	ldr	r3, [pc, #44]	; (7fe8 <_spi_m_dma_register_callback+0x68>)
    7fba:	4798      	blx	r3
		break;
    7fbc:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    7fbe:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7fc0:	6800      	ldr	r0, [r0, #0]
    7fc2:	4b0a      	ldr	r3, [pc, #40]	; (7fec <_spi_m_dma_register_callback+0x6c>)
    7fc4:	4798      	blx	r3
    7fc6:	3400      	adds	r4, #0
    7fc8:	bf18      	it	ne
    7fca:	2401      	movne	r4, #1
    7fcc:	4622      	mov	r2, r4
    7fce:	2101      	movs	r1, #1
    7fd0:	4e05      	ldr	r6, [pc, #20]	; (7fe8 <_spi_m_dma_register_callback+0x68>)
    7fd2:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7fd4:	6828      	ldr	r0, [r5, #0]
    7fd6:	4b03      	ldr	r3, [pc, #12]	; (7fe4 <_spi_m_dma_register_callback+0x64>)
    7fd8:	4798      	blx	r3
    7fda:	4622      	mov	r2, r4
    7fdc:	2101      	movs	r1, #1
    7fde:	47b0      	blx	r6
    7fe0:	bd70      	pop	{r4, r5, r6, pc}
    7fe2:	bf00      	nop
    7fe4:	00006efd 	.word	0x00006efd
    7fe8:	000065d1 	.word	0x000065d1
    7fec:	00006f11 	.word	0x00006f11

00007ff0 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    7ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ff4:	4605      	mov	r5, r0
    7ff6:	4689      	mov	r9, r1
    7ff8:	4617      	mov	r7, r2
    7ffa:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7ffc:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8000:	4658      	mov	r0, fp
    8002:	4b46      	ldr	r3, [pc, #280]	; (811c <_spi_m_dma_transfer+0x12c>)
    8004:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    8006:	2803      	cmp	r0, #3
    8008:	d053      	beq.n	80b2 <_spi_m_dma_transfer+0xc2>
    800a:	2807      	cmp	r0, #7
    800c:	bf08      	it	eq
    800e:	2201      	moveq	r2, #1
    8010:	d050      	beq.n	80b4 <_spi_m_dma_transfer+0xc4>
	return NULL;
    8012:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    8016:	4658      	mov	r0, fp
    8018:	4b41      	ldr	r3, [pc, #260]	; (8120 <_spi_m_dma_transfer+0x130>)
    801a:	4798      	blx	r3
    801c:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    801e:	4658      	mov	r0, fp
    8020:	4b40      	ldr	r3, [pc, #256]	; (8124 <_spi_m_dma_transfer+0x134>)
    8022:	4798      	blx	r3
    8024:	4604      	mov	r4, r0

	if (rxbuf) {
    8026:	2f00      	cmp	r7, #0
    8028:	d04b      	beq.n	80c2 <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    802a:	2d00      	cmp	r5, #0
    802c:	d047      	beq.n	80be <_spi_m_dma_transfer+0xce>
    802e:	f11b 0000 	adds.w	r0, fp, #0
    8032:	bf18      	it	ne
    8034:	2001      	movne	r0, #1
    8036:	f640 5213 	movw	r2, #3347	; 0xd13
    803a:	493b      	ldr	r1, [pc, #236]	; (8128 <_spi_m_dma_transfer+0x138>)
    803c:	4b3b      	ldr	r3, [pc, #236]	; (812c <_spi_m_dma_transfer+0x13c>)
    803e:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    8040:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    8042:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    8044:	f013 0f04 	tst.w	r3, #4
    8048:	d107      	bne.n	805a <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    804a:	6853      	ldr	r3, [r2, #4]
    804c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8050:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    8052:	69d3      	ldr	r3, [r2, #28]
    8054:	f013 0f17 	tst.w	r3, #23
    8058:	d1fb      	bne.n	8052 <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    805a:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    805c:	3128      	adds	r1, #40	; 0x28
    805e:	4630      	mov	r0, r6
    8060:	4b33      	ldr	r3, [pc, #204]	; (8130 <_spi_m_dma_transfer+0x140>)
    8062:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    8064:	4639      	mov	r1, r7
    8066:	4630      	mov	r0, r6
    8068:	4b32      	ldr	r3, [pc, #200]	; (8134 <_spi_m_dma_transfer+0x144>)
    806a:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    806c:	4641      	mov	r1, r8
    806e:	4630      	mov	r0, r6
    8070:	4b31      	ldr	r3, [pc, #196]	; (8138 <_spi_m_dma_transfer+0x148>)
    8072:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    8074:	2100      	movs	r1, #0
    8076:	4630      	mov	r0, r6
    8078:	4b30      	ldr	r3, [pc, #192]	; (813c <_spi_m_dma_transfer+0x14c>)
    807a:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    807c:	f1b9 0f00 	cmp.w	r9, #0
    8080:	d039      	beq.n	80f6 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    8082:	4649      	mov	r1, r9
    8084:	4620      	mov	r0, r4
    8086:	4b2a      	ldr	r3, [pc, #168]	; (8130 <_spi_m_dma_transfer+0x140>)
    8088:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    808a:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    808c:	3128      	adds	r1, #40	; 0x28
    808e:	4620      	mov	r0, r4
    8090:	4b28      	ldr	r3, [pc, #160]	; (8134 <_spi_m_dma_transfer+0x144>)
    8092:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    8094:	2101      	movs	r1, #1
    8096:	4620      	mov	r0, r4
    8098:	4b29      	ldr	r3, [pc, #164]	; (8140 <_spi_m_dma_transfer+0x150>)
    809a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    809c:	4641      	mov	r1, r8
    809e:	4620      	mov	r0, r4
    80a0:	4b25      	ldr	r3, [pc, #148]	; (8138 <_spi_m_dma_transfer+0x148>)
    80a2:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    80a4:	2100      	movs	r1, #0
    80a6:	4620      	mov	r0, r4
    80a8:	4b24      	ldr	r3, [pc, #144]	; (813c <_spi_m_dma_transfer+0x14c>)
    80aa:	4798      	blx	r3

	return ERR_NONE;
}
    80ac:	2000      	movs	r0, #0
    80ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    80b2:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    80b4:	4b23      	ldr	r3, [pc, #140]	; (8144 <_spi_m_dma_transfer+0x154>)
    80b6:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    80ba:	4492      	add	sl, r2
    80bc:	e7ab      	b.n	8016 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    80be:	2000      	movs	r0, #0
    80c0:	e7b9      	b.n	8036 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    80c2:	b1b5      	cbz	r5, 80f2 <_spi_m_dma_transfer+0x102>
    80c4:	f11b 0000 	adds.w	r0, fp, #0
    80c8:	bf18      	it	ne
    80ca:	2001      	movne	r0, #1
    80cc:	f640 521a 	movw	r2, #3354	; 0xd1a
    80d0:	4915      	ldr	r1, [pc, #84]	; (8128 <_spi_m_dma_transfer+0x138>)
    80d2:	4b16      	ldr	r3, [pc, #88]	; (812c <_spi_m_dma_transfer+0x13c>)
    80d4:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    80d6:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    80d8:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    80da:	f013 0f04 	tst.w	r3, #4
    80de:	d1cd      	bne.n	807c <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    80e0:	6853      	ldr	r3, [r2, #4]
    80e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    80e6:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    80e8:	69d3      	ldr	r3, [r2, #28]
    80ea:	f013 0f17 	tst.w	r3, #23
    80ee:	d1fb      	bne.n	80e8 <_spi_m_dma_transfer+0xf8>
    80f0:	e7c4      	b.n	807c <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    80f2:	2000      	movs	r0, #0
    80f4:	e7ea      	b.n	80cc <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    80f6:	f10a 010e 	add.w	r1, sl, #14
    80fa:	4620      	mov	r0, r4
    80fc:	4b0c      	ldr	r3, [pc, #48]	; (8130 <_spi_m_dma_transfer+0x140>)
    80fe:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    8100:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    8102:	3128      	adds	r1, #40	; 0x28
    8104:	4620      	mov	r0, r4
    8106:	4b0b      	ldr	r3, [pc, #44]	; (8134 <_spi_m_dma_transfer+0x144>)
    8108:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    810a:	2100      	movs	r1, #0
    810c:	4620      	mov	r0, r4
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <_spi_m_dma_transfer+0x150>)
    8110:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    8112:	4641      	mov	r1, r8
    8114:	4620      	mov	r0, r4
    8116:	4b08      	ldr	r3, [pc, #32]	; (8138 <_spi_m_dma_transfer+0x148>)
    8118:	4798      	blx	r3
    811a:	e7c3      	b.n	80a4 <_spi_m_dma_transfer+0xb4>
    811c:	00006cf1 	.word	0x00006cf1
    8120:	00006f11 	.word	0x00006f11
    8124:	00006efd 	.word	0x00006efd
    8128:	0000e078 	.word	0x0000e078
    812c:	00005e5d 	.word	0x00005e5d
    8130:	00006635 	.word	0x00006635
    8134:	00006625 	.word	0x00006625
    8138:	00006661 	.word	0x00006661
    813c:	000066b9 	.word	0x000066b9
    8140:	00006645 	.word	0x00006645
    8144:	0000e054 	.word	0x0000e054

00008148 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    8148:	4b03      	ldr	r3, [pc, #12]	; (8158 <_delay_init+0x10>)
    814a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    814e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    8150:	2205      	movs	r2, #5
    8152:	601a      	str	r2, [r3, #0]
    8154:	4770      	bx	lr
    8156:	bf00      	nop
    8158:	e000e010 	.word	0xe000e010

0000815c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    815c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    815e:	b303      	cbz	r3, 81a2 <_delay_cycles+0x46>
{
    8160:	b430      	push	{r4, r5}
    8162:	1e5d      	subs	r5, r3, #1
    8164:	b2ed      	uxtb	r5, r5
	while (n--) {
    8166:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    8168:	4a12      	ldr	r2, [pc, #72]	; (81b4 <_delay_cycles+0x58>)
    816a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    816e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    8170:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8172:	6813      	ldr	r3, [r2, #0]
    8174:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8178:	d0fb      	beq.n	8172 <_delay_cycles+0x16>
	while (n--) {
    817a:	3801      	subs	r0, #1
    817c:	b2c0      	uxtb	r0, r0
    817e:	28ff      	cmp	r0, #255	; 0xff
    8180:	d1f5      	bne.n	816e <_delay_cycles+0x12>
    8182:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    8186:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    818a:	3101      	adds	r1, #1
    818c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    818e:	4b09      	ldr	r3, [pc, #36]	; (81b4 <_delay_cycles+0x58>)
    8190:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    8192:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    8194:	461a      	mov	r2, r3
    8196:	6813      	ldr	r3, [r2, #0]
    8198:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    819c:	d0fb      	beq.n	8196 <_delay_cycles+0x3a>
		;
}
    819e:	bc30      	pop	{r4, r5}
    81a0:	4770      	bx	lr
	SysTick->LOAD = buf;
    81a2:	4b04      	ldr	r3, [pc, #16]	; (81b4 <_delay_cycles+0x58>)
    81a4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    81a6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    81a8:	461a      	mov	r2, r3
    81aa:	6813      	ldr	r3, [r2, #0]
    81ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    81b0:	d0fb      	beq.n	81aa <_delay_cycles+0x4e>
    81b2:	4770      	bx	lr
    81b4:	e000e010 	.word	0xe000e010

000081b8 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    81b8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    81ba:	6813      	ldr	r3, [r2, #0]
    81bc:	f043 0302 	orr.w	r3, r3, #2
    81c0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    81c2:	6913      	ldr	r3, [r2, #16]
    81c4:	f013 0f03 	tst.w	r3, #3
    81c8:	d1fb      	bne.n	81c2 <_tc_timer_start+0xa>
}
    81ca:	4770      	bx	lr

000081cc <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    81cc:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    81ce:	6813      	ldr	r3, [r2, #0]
    81d0:	f023 0302 	bic.w	r3, r3, #2
    81d4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    81d6:	6913      	ldr	r3, [r2, #16]
    81d8:	f013 0f03 	tst.w	r3, #3
    81dc:	d1fb      	bne.n	81d6 <_tc_timer_stop+0xa>
}
    81de:	4770      	bx	lr

000081e0 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    81e0:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    81e2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    81e4:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    81e8:	2a02      	cmp	r2, #2
    81ea:	d00a      	beq.n	8202 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    81ec:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    81ee:	f012 0f0c 	tst.w	r2, #12
    81f2:	d10c      	bne.n	820e <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    81f4:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    81f6:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    81f8:	691a      	ldr	r2, [r3, #16]
    81fa:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    81fe:	d1fb      	bne.n	81f8 <_tc_timer_set_period+0x18>
    8200:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8202:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8204:	691a      	ldr	r2, [r3, #16]
    8206:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    820a:	d1fb      	bne.n	8204 <_tc_timer_set_period+0x24>
    820c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    820e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8210:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8214:	2a01      	cmp	r2, #1
    8216:	d000      	beq.n	821a <_tc_timer_set_period+0x3a>
    8218:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    821a:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    821c:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    821e:	691a      	ldr	r2, [r3, #16]
    8220:	f012 0f20 	tst.w	r2, #32
    8224:	d1fb      	bne.n	821e <_tc_timer_set_period+0x3e>
    8226:	e7f7      	b.n	8218 <_tc_timer_set_period+0x38>

00008228 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    8228:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    822a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    822c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8230:	2a02      	cmp	r2, #2
    8232:	d00a      	beq.n	824a <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8234:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8236:	f012 0f0c 	tst.w	r2, #12
    823a:	d10c      	bne.n	8256 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    823c:	691a      	ldr	r2, [r3, #16]
    823e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8242:	d1fb      	bne.n	823c <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8244:	8b98      	ldrh	r0, [r3, #28]
    8246:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    8248:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    824a:	691a      	ldr	r2, [r3, #16]
    824c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8250:	d1fb      	bne.n	824a <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    8252:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    8254:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8256:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8258:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    825c:	2a01      	cmp	r2, #1
    825e:	d001      	beq.n	8264 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    8260:	2000      	movs	r0, #0
}
    8262:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8264:	691a      	ldr	r2, [r3, #16]
    8266:	f012 0f20 	tst.w	r2, #32
    826a:	d1fb      	bne.n	8264 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    826c:	7ed8      	ldrb	r0, [r3, #27]
    826e:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    8270:	4770      	bx	lr

00008272 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8272:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8274:	6913      	ldr	r3, [r2, #16]
    8276:	f013 0f03 	tst.w	r3, #3
    827a:	d1fb      	bne.n	8274 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    827c:	6810      	ldr	r0, [r2, #0]
}
    827e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8282:	4770      	bx	lr

00008284 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8284:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    8286:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8288:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    828a:	f012 0f01 	tst.w	r2, #1
    828e:	d100      	bne.n	8292 <tc_interrupt_handler+0xe>
    8290:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8292:	2201      	movs	r2, #1
    8294:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    8296:	6803      	ldr	r3, [r0, #0]
    8298:	4798      	blx	r3
	}
}
    829a:	e7f9      	b.n	8290 <tc_interrupt_handler+0xc>

0000829c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    829c:	b570      	push	{r4, r5, r6, lr}
    829e:	b088      	sub	sp, #32
    82a0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    82a2:	466c      	mov	r4, sp
    82a4:	4d19      	ldr	r5, [pc, #100]	; (830c <get_tc_index+0x70>)
    82a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    82a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    82aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    82ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    82b2:	9b00      	ldr	r3, [sp, #0]
    82b4:	42b3      	cmp	r3, r6
    82b6:	d00c      	beq.n	82d2 <get_tc_index+0x36>
    82b8:	4630      	mov	r0, r6
    82ba:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    82bc:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    82be:	f852 1b04 	ldr.w	r1, [r2], #4
    82c2:	4281      	cmp	r1, r0
    82c4:	d006      	beq.n	82d4 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    82c6:	3301      	adds	r3, #1
    82c8:	2b08      	cmp	r3, #8
    82ca:	d1f8      	bne.n	82be <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    82cc:	2000      	movs	r0, #0
			return i;
    82ce:	b240      	sxtb	r0, r0
    82d0:	e013      	b.n	82fa <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    82d2:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    82d4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    82d8:	d015      	beq.n	8306 <get_tc_index+0x6a>
    82da:	2b01      	cmp	r3, #1
    82dc:	d00f      	beq.n	82fe <get_tc_index+0x62>
    82de:	2b02      	cmp	r3, #2
    82e0:	d00f      	beq.n	8302 <get_tc_index+0x66>
    82e2:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    82e4:	bf08      	it	eq
    82e6:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    82e8:	d0f1      	beq.n	82ce <get_tc_index+0x32>
	ASSERT(false);
    82ea:	f240 1267 	movw	r2, #359	; 0x167
    82ee:	4908      	ldr	r1, [pc, #32]	; (8310 <get_tc_index+0x74>)
    82f0:	2000      	movs	r0, #0
    82f2:	4b08      	ldr	r3, [pc, #32]	; (8314 <get_tc_index+0x78>)
    82f4:	4798      	blx	r3
	return -1;
    82f6:	f04f 30ff 	mov.w	r0, #4294967295
}
    82fa:	b008      	add	sp, #32
    82fc:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    82fe:	2001      	movs	r0, #1
    8300:	e7e5      	b.n	82ce <get_tc_index+0x32>
    8302:	2002      	movs	r0, #2
    8304:	e7e3      	b.n	82ce <get_tc_index+0x32>
    8306:	2000      	movs	r0, #0
    8308:	e7e1      	b.n	82ce <get_tc_index+0x32>
    830a:	bf00      	nop
    830c:	0000e094 	.word	0x0000e094
    8310:	0000e104 	.word	0x0000e104
    8314:	00005e5d 	.word	0x00005e5d

00008318 <_tc_timer_init>:
{
    8318:	b570      	push	{r4, r5, r6, lr}
    831a:	4606      	mov	r6, r0
    831c:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    831e:	4608      	mov	r0, r1
    8320:	4b71      	ldr	r3, [pc, #452]	; (84e8 <_tc_timer_init+0x1d0>)
    8322:	4798      	blx	r3
    8324:	4605      	mov	r5, r0
	device->hw = hw;
    8326:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8328:	22a0      	movs	r2, #160	; 0xa0
    832a:	4970      	ldr	r1, [pc, #448]	; (84ec <_tc_timer_init+0x1d4>)
    832c:	2001      	movs	r0, #1
    832e:	4b70      	ldr	r3, [pc, #448]	; (84f0 <_tc_timer_init+0x1d8>)
    8330:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    8332:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8334:	f013 0f01 	tst.w	r3, #1
    8338:	d119      	bne.n	836e <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    833a:	6923      	ldr	r3, [r4, #16]
    833c:	f013 0f03 	tst.w	r3, #3
    8340:	d1fb      	bne.n	833a <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8342:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8344:	f013 0f02 	tst.w	r3, #2
    8348:	d00b      	beq.n	8362 <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    834a:	6823      	ldr	r3, [r4, #0]
    834c:	f023 0302 	bic.w	r3, r3, #2
    8350:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8352:	6923      	ldr	r3, [r4, #16]
    8354:	f013 0f03 	tst.w	r3, #3
    8358:	d1fb      	bne.n	8352 <_tc_timer_init+0x3a>
    835a:	6923      	ldr	r3, [r4, #16]
    835c:	f013 0f02 	tst.w	r3, #2
    8360:	d1fb      	bne.n	835a <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    8362:	2301      	movs	r3, #1
    8364:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8366:	6923      	ldr	r3, [r4, #16]
    8368:	f013 0f03 	tst.w	r3, #3
    836c:	d1fb      	bne.n	8366 <_tc_timer_init+0x4e>
    836e:	6923      	ldr	r3, [r4, #16]
    8370:	f013 0f01 	tst.w	r3, #1
    8374:	d1fb      	bne.n	836e <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8376:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    837a:	4a5e      	ldr	r2, [pc, #376]	; (84f4 <_tc_timer_init+0x1dc>)
    837c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    8382:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8384:	6923      	ldr	r3, [r4, #16]
    8386:	f013 0f03 	tst.w	r3, #3
    838a:	d1fb      	bne.n	8384 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    838c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8390:	4958      	ldr	r1, [pc, #352]	; (84f4 <_tc_timer_init+0x1dc>)
    8392:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8396:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    839a:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    839c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    839e:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    83a0:	2301      	movs	r3, #1
    83a2:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    83a4:	f002 020c 	and.w	r2, r2, #12
    83a8:	2a08      	cmp	r2, #8
    83aa:	d056      	beq.n	845a <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    83ac:	2a00      	cmp	r2, #0
    83ae:	d16b      	bne.n	8488 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    83b0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83b4:	4a4f      	ldr	r2, [pc, #316]	; (84f4 <_tc_timer_init+0x1dc>)
    83b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    83bc:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83be:	6923      	ldr	r3, [r4, #16]
    83c0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    83c4:	d1fb      	bne.n	83be <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    83c6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    83ca:	4a4a      	ldr	r2, [pc, #296]	; (84f4 <_tc_timer_init+0x1dc>)
    83cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    83d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    83d2:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    83d4:	6923      	ldr	r3, [r4, #16]
    83d6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    83da:	d1fb      	bne.n	83d4 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    83dc:	2301      	movs	r3, #1
    83de:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    83e0:	4b45      	ldr	r3, [pc, #276]	; (84f8 <_tc_timer_init+0x1e0>)
    83e2:	429c      	cmp	r4, r3
    83e4:	d077      	beq.n	84d6 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    83e6:	4b45      	ldr	r3, [pc, #276]	; (84fc <_tc_timer_init+0x1e4>)
    83e8:	429c      	cmp	r4, r3
    83ea:	d077      	beq.n	84dc <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    83ec:	4b44      	ldr	r3, [pc, #272]	; (8500 <_tc_timer_init+0x1e8>)
    83ee:	429c      	cmp	r4, r3
    83f0:	d077      	beq.n	84e2 <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    83f2:	4b44      	ldr	r3, [pc, #272]	; (8504 <_tc_timer_init+0x1ec>)
    83f4:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    83f6:	bf04      	itt	eq
    83f8:	4b43      	ldreq	r3, [pc, #268]	; (8508 <_tc_timer_init+0x1f0>)
    83fa:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    83fc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8400:	4a3c      	ldr	r2, [pc, #240]	; (84f4 <_tc_timer_init+0x1dc>)
    8402:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8406:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    840a:	2b00      	cmp	r3, #0
    840c:	db23      	blt.n	8456 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    840e:	095a      	lsrs	r2, r3, #5
    8410:	f003 031f 	and.w	r3, r3, #31
    8414:	2101      	movs	r1, #1
    8416:	fa01 f303 	lsl.w	r3, r1, r3
    841a:	3220      	adds	r2, #32
    841c:	493b      	ldr	r1, [pc, #236]	; (850c <_tc_timer_init+0x1f4>)
    841e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8422:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8426:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    842a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    842e:	4b31      	ldr	r3, [pc, #196]	; (84f4 <_tc_timer_init+0x1dc>)
    8430:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8434:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8438:	2b00      	cmp	r3, #0
    843a:	db0c      	blt.n	8456 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    843c:	0959      	lsrs	r1, r3, #5
    843e:	f003 031f 	and.w	r3, r3, #31
    8442:	2201      	movs	r2, #1
    8444:	fa02 f303 	lsl.w	r3, r2, r3
    8448:	4a30      	ldr	r2, [pc, #192]	; (850c <_tc_timer_init+0x1f4>)
    844a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    844e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8452:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    8456:	2000      	movs	r0, #0
    8458:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    845a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    845e:	4a25      	ldr	r2, [pc, #148]	; (84f4 <_tc_timer_init+0x1dc>)
    8460:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8466:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8468:	6923      	ldr	r3, [r4, #16]
    846a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    846e:	d1fb      	bne.n	8468 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8470:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8474:	4a1f      	ldr	r2, [pc, #124]	; (84f4 <_tc_timer_init+0x1dc>)
    8476:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    847a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    847c:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    847e:	6923      	ldr	r3, [r4, #16]
    8480:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    8484:	d1fb      	bne.n	847e <_tc_timer_init+0x166>
    8486:	e7a9      	b.n	83dc <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8488:	2a04      	cmp	r2, #4
    848a:	d1a7      	bne.n	83dc <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    848c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8490:	4a18      	ldr	r2, [pc, #96]	; (84f4 <_tc_timer_init+0x1dc>)
    8492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    849a:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    849c:	6923      	ldr	r3, [r4, #16]
    849e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    84a2:	d1fb      	bne.n	849c <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    84a4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    84a8:	4a12      	ldr	r2, [pc, #72]	; (84f4 <_tc_timer_init+0x1dc>)
    84aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    84ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    84b2:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84b4:	6923      	ldr	r3, [r4, #16]
    84b6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    84ba:	d1fb      	bne.n	84b4 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    84bc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    84c0:	4a0c      	ldr	r2, [pc, #48]	; (84f4 <_tc_timer_init+0x1dc>)
    84c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    84c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    84ca:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    84cc:	6923      	ldr	r3, [r4, #16]
    84ce:	f013 0f20 	tst.w	r3, #32
    84d2:	d1fb      	bne.n	84cc <_tc_timer_init+0x1b4>
    84d4:	e782      	b.n	83dc <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    84d6:	4b0c      	ldr	r3, [pc, #48]	; (8508 <_tc_timer_init+0x1f0>)
    84d8:	601e      	str	r6, [r3, #0]
    84da:	e78a      	b.n	83f2 <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    84dc:	4b0a      	ldr	r3, [pc, #40]	; (8508 <_tc_timer_init+0x1f0>)
    84de:	605e      	str	r6, [r3, #4]
    84e0:	e78c      	b.n	83fc <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    84e2:	4b09      	ldr	r3, [pc, #36]	; (8508 <_tc_timer_init+0x1f0>)
    84e4:	609e      	str	r6, [r3, #8]
    84e6:	e789      	b.n	83fc <_tc_timer_init+0xe4>
    84e8:	0000829d 	.word	0x0000829d
    84ec:	0000e104 	.word	0x0000e104
    84f0:	00005e5d 	.word	0x00005e5d
    84f4:	0000e094 	.word	0x0000e094
    84f8:	40003800 	.word	0x40003800
    84fc:	40003c00 	.word	0x40003c00
    8500:	4101a000 	.word	0x4101a000
    8504:	4101c000 	.word	0x4101c000
    8508:	20000998 	.word	0x20000998
    850c:	e000e100 	.word	0xe000e100

00008510 <_tc_timer_deinit>:
{
    8510:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    8512:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    8514:	4620      	mov	r0, r4
    8516:	4b18      	ldr	r3, [pc, #96]	; (8578 <_tc_timer_deinit+0x68>)
    8518:	4798      	blx	r3
    851a:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    851c:	22cd      	movs	r2, #205	; 0xcd
    851e:	4917      	ldr	r1, [pc, #92]	; (857c <_tc_timer_deinit+0x6c>)
    8520:	2001      	movs	r0, #1
    8522:	4b17      	ldr	r3, [pc, #92]	; (8580 <_tc_timer_deinit+0x70>)
    8524:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8526:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    852a:	4b16      	ldr	r3, [pc, #88]	; (8584 <_tc_timer_deinit+0x74>)
    852c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8530:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8534:	2b00      	cmp	r3, #0
    8536:	db0d      	blt.n	8554 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8538:	095a      	lsrs	r2, r3, #5
    853a:	f003 031f 	and.w	r3, r3, #31
    853e:	2101      	movs	r1, #1
    8540:	fa01 f303 	lsl.w	r3, r1, r3
    8544:	3220      	adds	r2, #32
    8546:	4910      	ldr	r1, [pc, #64]	; (8588 <_tc_timer_deinit+0x78>)
    8548:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    854c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8550:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8554:	6823      	ldr	r3, [r4, #0]
    8556:	f023 0302 	bic.w	r3, r3, #2
    855a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    855c:	6923      	ldr	r3, [r4, #16]
    855e:	f013 0f03 	tst.w	r3, #3
    8562:	d1fb      	bne.n	855c <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8564:	6823      	ldr	r3, [r4, #0]
    8566:	f043 0301 	orr.w	r3, r3, #1
    856a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    856c:	6923      	ldr	r3, [r4, #16]
    856e:	f013 0f01 	tst.w	r3, #1
    8572:	d1fb      	bne.n	856c <_tc_timer_deinit+0x5c>
}
    8574:	bd38      	pop	{r3, r4, r5, pc}
    8576:	bf00      	nop
    8578:	0000829d 	.word	0x0000829d
    857c:	0000e104 	.word	0x0000e104
    8580:	00005e5d 	.word	0x00005e5d
    8584:	0000e094 	.word	0x0000e094
    8588:	e000e100 	.word	0xe000e100

0000858c <_tc_timer_set_irq>:
{
    858c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    858e:	68c0      	ldr	r0, [r0, #12]
    8590:	4b09      	ldr	r3, [pc, #36]	; (85b8 <_tc_timer_set_irq+0x2c>)
    8592:	4798      	blx	r3
    8594:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    8596:	f44f 7291 	mov.w	r2, #290	; 0x122
    859a:	4908      	ldr	r1, [pc, #32]	; (85bc <_tc_timer_set_irq+0x30>)
    859c:	2001      	movs	r0, #1
    859e:	4b08      	ldr	r3, [pc, #32]	; (85c0 <_tc_timer_set_irq+0x34>)
    85a0:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    85a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    85a6:	4b07      	ldr	r3, [pc, #28]	; (85c4 <_tc_timer_set_irq+0x38>)
    85a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    85ac:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    85b0:	4b05      	ldr	r3, [pc, #20]	; (85c8 <_tc_timer_set_irq+0x3c>)
    85b2:	4798      	blx	r3
    85b4:	bd10      	pop	{r4, pc}
    85b6:	bf00      	nop
    85b8:	0000829d 	.word	0x0000829d
    85bc:	0000e104 	.word	0x0000e104
    85c0:	00005e5d 	.word	0x00005e5d
    85c4:	0000e094 	.word	0x0000e094
    85c8:	000063f1 	.word	0x000063f1

000085cc <_tc_get_timer>:
}
    85cc:	4800      	ldr	r0, [pc, #0]	; (85d0 <_tc_get_timer+0x4>)
    85ce:	4770      	bx	lr
    85d0:	20000378 	.word	0x20000378

000085d4 <TC0_Handler>:
{
    85d4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    85d6:	4b02      	ldr	r3, [pc, #8]	; (85e0 <TC0_Handler+0xc>)
    85d8:	6818      	ldr	r0, [r3, #0]
    85da:	4b02      	ldr	r3, [pc, #8]	; (85e4 <TC0_Handler+0x10>)
    85dc:	4798      	blx	r3
    85de:	bd08      	pop	{r3, pc}
    85e0:	20000998 	.word	0x20000998
    85e4:	00008285 	.word	0x00008285

000085e8 <TC1_Handler>:
{
    85e8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    85ea:	4b02      	ldr	r3, [pc, #8]	; (85f4 <TC1_Handler+0xc>)
    85ec:	6858      	ldr	r0, [r3, #4]
    85ee:	4b02      	ldr	r3, [pc, #8]	; (85f8 <TC1_Handler+0x10>)
    85f0:	4798      	blx	r3
    85f2:	bd08      	pop	{r3, pc}
    85f4:	20000998 	.word	0x20000998
    85f8:	00008285 	.word	0x00008285

000085fc <TC2_Handler>:
{
    85fc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    85fe:	4b02      	ldr	r3, [pc, #8]	; (8608 <TC2_Handler+0xc>)
    8600:	6898      	ldr	r0, [r3, #8]
    8602:	4b02      	ldr	r3, [pc, #8]	; (860c <TC2_Handler+0x10>)
    8604:	4798      	blx	r3
    8606:	bd08      	pop	{r3, pc}
    8608:	20000998 	.word	0x20000998
    860c:	00008285 	.word	0x00008285

00008610 <TC3_Handler>:
{
    8610:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    8612:	4b02      	ldr	r3, [pc, #8]	; (861c <TC3_Handler+0xc>)
    8614:	68d8      	ldr	r0, [r3, #12]
    8616:	4b02      	ldr	r3, [pc, #8]	; (8620 <TC3_Handler+0x10>)
    8618:	4798      	blx	r3
    861a:	bd08      	pop	{r3, pc}
    861c:	20000998 	.word	0x20000998
    8620:	00008285 	.word	0x00008285

00008624 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8624:	2000      	movs	r0, #0
    8626:	4770      	bx	lr

00008628 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8628:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    862a:	7c83      	ldrb	r3, [r0, #18]
    862c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8630:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    8632:	f002 0107 	and.w	r1, r2, #7
    8636:	2901      	cmp	r1, #1
    8638:	d00b      	beq.n	8652 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    863a:	015a      	lsls	r2, r3, #5
    863c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8640:	2110      	movs	r1, #16
    8642:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8646:	015b      	lsls	r3, r3, #5
    8648:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    864c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    8650:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8652:	f012 0f40 	tst.w	r2, #64	; 0x40
    8656:	d00c      	beq.n	8672 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    8658:	7cc2      	ldrb	r2, [r0, #19]
    865a:	f36f 1286 	bfc	r2, #6, #1
    865e:	74c2      	strb	r2, [r0, #19]
    8660:	015a      	lsls	r2, r3, #5
    8662:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8666:	2180      	movs	r1, #128	; 0x80
    8668:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    866c:	2140      	movs	r1, #64	; 0x40
    866e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    8672:	7cc2      	ldrb	r2, [r0, #19]
    8674:	f36f 02c3 	bfc	r2, #3, #1
    8678:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    867a:	490a      	ldr	r1, [pc, #40]	; (86a4 <_usb_d_dev_handle_setup+0x7c>)
    867c:	015a      	lsls	r2, r3, #5
    867e:	188c      	adds	r4, r1, r2
    8680:	2500      	movs	r5, #0
    8682:	72a5      	strb	r5, [r4, #10]
    8684:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8686:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    868a:	246f      	movs	r4, #111	; 0x6f
    868c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8690:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8694:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8698:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    869c:	7c80      	ldrb	r0, [r0, #18]
    869e:	4798      	blx	r3
    86a0:	bd38      	pop	{r3, r4, r5, pc}
    86a2:	bf00      	nop
    86a4:	200009a8 	.word	0x200009a8

000086a8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    86a8:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    86aa:	2320      	movs	r3, #32
    86ac:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    86b0:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    86b2:	7c83      	ldrb	r3, [r0, #18]
    86b4:	f003 030f 	and.w	r3, r3, #15
    86b8:	015b      	lsls	r3, r3, #5
    86ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    86be:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    86c2:	4b04      	ldr	r3, [pc, #16]	; (86d4 <_usb_d_dev_handle_stall+0x2c>)
    86c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    86c8:	6882      	ldr	r2, [r0, #8]
    86ca:	2101      	movs	r1, #1
    86cc:	7c80      	ldrb	r0, [r0, #18]
    86ce:	4798      	blx	r3
    86d0:	bd08      	pop	{r3, pc}
    86d2:	bf00      	nop
    86d4:	200009a8 	.word	0x200009a8

000086d8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    86d8:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    86da:	7c84      	ldrb	r4, [r0, #18]
    86dc:	2cff      	cmp	r4, #255	; 0xff
    86de:	d003      	beq.n	86e8 <_usb_d_dev_trans_done+0x10>
    86e0:	7cc3      	ldrb	r3, [r0, #19]
    86e2:	f013 0f40 	tst.w	r3, #64	; 0x40
    86e6:	d100      	bne.n	86ea <_usb_d_dev_trans_done+0x12>
    86e8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    86ea:	7cc2      	ldrb	r2, [r0, #19]
    86ec:	f36f 1286 	bfc	r2, #6, #1
    86f0:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    86f2:	4a03      	ldr	r2, [pc, #12]	; (8700 <_usb_d_dev_trans_done+0x28>)
    86f4:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    86f8:	6882      	ldr	r2, [r0, #8]
    86fa:	4620      	mov	r0, r4
    86fc:	47a8      	blx	r5
    86fe:	e7f3      	b.n	86e8 <_usb_d_dev_trans_done+0x10>
    8700:	200009a8 	.word	0x200009a8

00008704 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8704:	b530      	push	{r4, r5, lr}
    8706:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8708:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    870a:	2425      	movs	r4, #37	; 0x25
    870c:	f88d 4004 	strb.w	r4, [sp, #4]
    8710:	244a      	movs	r4, #74	; 0x4a
    8712:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8716:	2bff      	cmp	r3, #255	; 0xff
    8718:	d01e      	beq.n	8758 <_usb_d_dev_trans_stop+0x54>
    871a:	7cc4      	ldrb	r4, [r0, #19]
    871c:	f014 0f40 	tst.w	r4, #64	; 0x40
    8720:	d01a      	beq.n	8758 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8722:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8726:	b1c9      	cbz	r1, 875c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8728:	0163      	lsls	r3, r4, #5
    872a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    872e:	2580      	movs	r5, #128	; 0x80
    8730:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8734:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8736:	a902      	add	r1, sp, #8
    8738:	440b      	add	r3, r1
    873a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    873e:	0163      	lsls	r3, r4, #5
    8740:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8744:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8748:	0163      	lsls	r3, r4, #5
    874a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    874e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    8752:	4611      	mov	r1, r2
    8754:	4b05      	ldr	r3, [pc, #20]	; (876c <_usb_d_dev_trans_stop+0x68>)
    8756:	4798      	blx	r3
}
    8758:	b003      	add	sp, #12
    875a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    875c:	0163      	lsls	r3, r4, #5
    875e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8762:	2540      	movs	r5, #64	; 0x40
    8764:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    8768:	e7e4      	b.n	8734 <_usb_d_dev_trans_stop+0x30>
    876a:	bf00      	nop
    876c:	000086d9 	.word	0x000086d9

00008770 <_usb_d_dev_handle_trfail>:
{
    8770:	b530      	push	{r4, r5, lr}
    8772:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8774:	7c83      	ldrb	r3, [r0, #18]
    8776:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    877a:	2204      	movs	r2, #4
    877c:	f88d 2004 	strb.w	r2, [sp, #4]
    8780:	2208      	movs	r2, #8
    8782:	f88d 2005 	strb.w	r2, [sp, #5]
    8786:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    8788:	460c      	mov	r4, r1
    878a:	b391      	cbz	r1, 87f2 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    878c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    8790:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8794:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    8798:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    879c:	4a32      	ldr	r2, [pc, #200]	; (8868 <_usb_d_dev_handle_trfail+0xf8>)
    879e:	440a      	add	r2, r1
    87a0:	7a91      	ldrb	r1, [r2, #10]
    87a2:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    87a4:	2d02      	cmp	r5, #2
    87a6:	d02c      	beq.n	8802 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    87a8:	f011 0f02 	tst.w	r1, #2
    87ac:	d045      	beq.n	883a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    87ae:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    87b0:	7a91      	ldrb	r1, [r2, #10]
    87b2:	f36f 0141 	bfc	r1, #1, #1
    87b6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    87b8:	aa02      	add	r2, sp, #8
    87ba:	4422      	add	r2, r4
    87bc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    87c0:	015a      	lsls	r2, r3, #5
    87c2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    87c6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    87ca:	015b      	lsls	r3, r3, #5
    87cc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    87d0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    87d4:	f005 0307 	and.w	r3, r5, #7
    87d8:	2b01      	cmp	r3, #1
    87da:	d143      	bne.n	8864 <_usb_d_dev_handle_trfail+0xf4>
    87dc:	7cc3      	ldrb	r3, [r0, #19]
    87de:	f013 0f40 	tst.w	r3, #64	; 0x40
    87e2:	d03f      	beq.n	8864 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    87e4:	09d9      	lsrs	r1, r3, #7
    87e6:	428c      	cmp	r4, r1
    87e8:	d03c      	beq.n	8864 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    87ea:	2200      	movs	r2, #0
    87ec:	4b1f      	ldr	r3, [pc, #124]	; (886c <_usb_d_dev_handle_trfail+0xfc>)
    87ee:	4798      	blx	r3
    87f0:	e038      	b.n	8864 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    87f2:	0159      	lsls	r1, r3, #5
    87f4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    87f8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    87fc:	f005 0507 	and.w	r5, r5, #7
    8800:	e7ca      	b.n	8798 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8802:	f011 0f01 	tst.w	r1, #1
    8806:	d0cf      	beq.n	87a8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8808:	7a91      	ldrb	r1, [r2, #10]
    880a:	f36f 0100 	bfc	r1, #0, #1
    880e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8810:	aa02      	add	r2, sp, #8
    8812:	4422      	add	r2, r4
    8814:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8818:	015a      	lsls	r2, r3, #5
    881a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    881e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8822:	015b      	lsls	r3, r3, #5
    8824:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8828:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    882c:	2204      	movs	r2, #4
    882e:	1c21      	adds	r1, r4, #0
    8830:	bf18      	it	ne
    8832:	2101      	movne	r1, #1
    8834:	4b0d      	ldr	r3, [pc, #52]	; (886c <_usb_d_dev_handle_trfail+0xfc>)
    8836:	4798      	blx	r3
    8838:	e014      	b.n	8864 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    883a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    883e:	4a0a      	ldr	r2, [pc, #40]	; (8868 <_usb_d_dev_handle_trfail+0xf8>)
    8840:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8844:	2100      	movs	r1, #0
    8846:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8848:	aa02      	add	r2, sp, #8
    884a:	4414      	add	r4, r2
    884c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8850:	015a      	lsls	r2, r3, #5
    8852:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8856:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    885a:	015b      	lsls	r3, r3, #5
    885c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8860:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    8864:	b003      	add	sp, #12
    8866:	bd30      	pop	{r4, r5, pc}
    8868:	200009a8 	.word	0x200009a8
    886c:	00008705 	.word	0x00008705

00008870 <_usb_d_dev_reset_epts>:
{
    8870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8874:	4d0c      	ldr	r5, [pc, #48]	; (88a8 <_usb_d_dev_reset_epts+0x38>)
    8876:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    887a:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    887e:	f04f 0803 	mov.w	r8, #3
    8882:	4f0a      	ldr	r7, [pc, #40]	; (88ac <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    8884:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    8886:	4641      	mov	r1, r8
    8888:	4620      	mov	r0, r4
    888a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    888c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    888e:	2300      	movs	r3, #0
    8890:	74e3      	strb	r3, [r4, #19]
    8892:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8894:	42ac      	cmp	r4, r5
    8896:	d1f6      	bne.n	8886 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    8898:	22c0      	movs	r2, #192	; 0xc0
    889a:	4619      	mov	r1, r3
    889c:	4802      	ldr	r0, [pc, #8]	; (88a8 <_usb_d_dev_reset_epts+0x38>)
    889e:	4b04      	ldr	r3, [pc, #16]	; (88b0 <_usb_d_dev_reset_epts+0x40>)
    88a0:	4798      	blx	r3
    88a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88a6:	bf00      	nop
    88a8:	200009a8 	.word	0x200009a8
    88ac:	000086d9 	.word	0x000086d9
    88b0:	0000c467 	.word	0x0000c467

000088b4 <_usb_d_dev_in_next>:
{
    88b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88b8:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    88ba:	7c84      	ldrb	r4, [r0, #18]
    88bc:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    88c0:	4688      	mov	r8, r1
    88c2:	2900      	cmp	r1, #0
    88c4:	f000 80a0 	beq.w	8a08 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    88c8:	4b58      	ldr	r3, [pc, #352]	; (8a2c <_usb_d_dev_in_next+0x178>)
    88ca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    88ce:	6958      	ldr	r0, [r3, #20]
    88d0:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    88d4:	8a2b      	ldrh	r3, [r5, #16]
    88d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    88da:	4293      	cmp	r3, r2
    88dc:	f000 808e 	beq.w	89fc <_usb_d_dev_in_next+0x148>
    88e0:	3b01      	subs	r3, #1
    88e2:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    88e4:	7cef      	ldrb	r7, [r5, #19]
    88e6:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    88ea:	f1b8 0f00 	cmp.w	r8, #0
    88ee:	d005      	beq.n	88fc <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    88f0:	0162      	lsls	r2, r4, #5
    88f2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    88f6:	2302      	movs	r3, #2
    88f8:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    88fc:	68a9      	ldr	r1, [r5, #8]
    88fe:	eb0e 0301 	add.w	r3, lr, r1
    8902:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8904:	686e      	ldr	r6, [r5, #4]
    8906:	42b3      	cmp	r3, r6
    8908:	d23f      	bcs.n	898a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    890a:	1af6      	subs	r6, r6, r3
    890c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    890e:	7cea      	ldrb	r2, [r5, #19]
    8910:	f012 0f20 	tst.w	r2, #32
    8914:	d02d      	beq.n	8972 <_usb_d_dev_in_next+0xbe>
    8916:	8a2a      	ldrh	r2, [r5, #16]
    8918:	4296      	cmp	r6, r2
    891a:	bf28      	it	cs
    891c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    891e:	6829      	ldr	r1, [r5, #0]
    8920:	4632      	mov	r2, r6
    8922:	4419      	add	r1, r3
    8924:	68e8      	ldr	r0, [r5, #12]
    8926:	4b42      	ldr	r3, [pc, #264]	; (8a30 <_usb_d_dev_in_next+0x17c>)
    8928:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    892a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    892c:	4b3f      	ldr	r3, [pc, #252]	; (8a2c <_usb_d_dev_in_next+0x178>)
    892e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8932:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8934:	4b3d      	ldr	r3, [pc, #244]	; (8a2c <_usb_d_dev_in_next+0x178>)
    8936:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    893a:	695a      	ldr	r2, [r3, #20]
    893c:	f366 020d 	bfi	r2, r6, #0, #14
    8940:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8942:	695a      	ldr	r2, [r3, #20]
    8944:	f36f 329b 	bfc	r2, #14, #14
    8948:	615a      	str	r2, [r3, #20]
	if (!isr) {
    894a:	f1b8 0f00 	cmp.w	r8, #0
    894e:	d108      	bne.n	8962 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    8950:	2f01      	cmp	r7, #1
    8952:	bf0c      	ite	eq
    8954:	224e      	moveq	r2, #78	; 0x4e
    8956:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8958:	0163      	lsls	r3, r4, #5
    895a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    895e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8962:	0164      	lsls	r4, r4, #5
    8964:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8968:	2380      	movs	r3, #128	; 0x80
    896a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    896e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8972:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8976:	bf28      	it	cs
    8978:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    897c:	6829      	ldr	r1, [r5, #0]
    897e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    8980:	4a2a      	ldr	r2, [pc, #168]	; (8a2c <_usb_d_dev_in_next+0x178>)
    8982:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    8986:	6113      	str	r3, [r2, #16]
    8988:	e7d4      	b.n	8934 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    898a:	7ceb      	ldrb	r3, [r5, #19]
    898c:	f013 0f10 	tst.w	r3, #16
    8990:	d00f      	beq.n	89b2 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    8992:	7ceb      	ldrb	r3, [r5, #19]
    8994:	f36f 1304 	bfc	r3, #4, #1
    8998:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    899a:	4b24      	ldr	r3, [pc, #144]	; (8a2c <_usb_d_dev_in_next+0x178>)
    899c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    89a0:	695a      	ldr	r2, [r3, #20]
    89a2:	f36f 020d 	bfc	r2, #0, #14
    89a6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    89a8:	695a      	ldr	r2, [r3, #20]
    89aa:	f36f 329b 	bfc	r2, #14, #14
    89ae:	615a      	str	r2, [r3, #20]
    89b0:	e7cb      	b.n	894a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    89b2:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    89b4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    89b8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    89bc:	bf0c      	ite	eq
    89be:	234b      	moveq	r3, #75	; 0x4b
    89c0:	234a      	movne	r3, #74	; 0x4a
    89c2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    89c6:	8a2a      	ldrh	r2, [r5, #16]
    89c8:	ea00 030e 	and.w	r3, r0, lr
    89cc:	429a      	cmp	r2, r3
    89ce:	d005      	beq.n	89dc <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    89d0:	2100      	movs	r1, #0
    89d2:	4628      	mov	r0, r5
    89d4:	4b17      	ldr	r3, [pc, #92]	; (8a34 <_usb_d_dev_in_next+0x180>)
    89d6:	4798      	blx	r3
	return;
    89d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    89dc:	7ceb      	ldrb	r3, [r5, #19]
    89de:	f36f 1386 	bfc	r3, #6, #1
    89e2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    89e4:	4b11      	ldr	r3, [pc, #68]	; (8a2c <_usb_d_dev_in_next+0x178>)
    89e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    89ea:	68a9      	ldr	r1, [r5, #8]
    89ec:	7ca8      	ldrb	r0, [r5, #18]
    89ee:	4798      	blx	r3
    89f0:	b9d0      	cbnz	r0, 8a28 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    89f2:	7ceb      	ldrb	r3, [r5, #19]
    89f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    89f8:	74eb      	strb	r3, [r5, #19]
    89fa:	e7e9      	b.n	89d0 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    89fc:	7cef      	ldrb	r7, [r5, #19]
    89fe:	f007 0707 	and.w	r7, r7, #7
    8a02:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8a06:	e773      	b.n	88f0 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8a08:	8a03      	ldrh	r3, [r0, #16]
    8a0a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8a0e:	4293      	cmp	r3, r2
    8a10:	d107      	bne.n	8a22 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8a12:	7cef      	ldrb	r7, [r5, #19]
    8a14:	f007 0707 	and.w	r7, r7, #7
    8a18:	f04f 0e00 	mov.w	lr, #0
    8a1c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8a20:	e76c      	b.n	88fc <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8a22:	f04f 0e00 	mov.w	lr, #0
    8a26:	e75b      	b.n	88e0 <_usb_d_dev_in_next+0x2c>
    8a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a2c:	200009a8 	.word	0x200009a8
    8a30:	0000c451 	.word	0x0000c451
    8a34:	000086d9 	.word	0x000086d9

00008a38 <_usb_d_dev_out_next>:
{
    8a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a3c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8a3e:	7c85      	ldrb	r5, [r0, #18]
    8a40:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8a44:	4689      	mov	r9, r1
    8a46:	2900      	cmp	r1, #0
    8a48:	d056      	beq.n	8af8 <_usb_d_dev_out_next+0xc0>
    8a4a:	4b74      	ldr	r3, [pc, #464]	; (8c1c <_usb_d_dev_out_next+0x1e4>)
    8a4c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8a50:	685a      	ldr	r2, [r3, #4]
    8a52:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8a56:	685f      	ldr	r7, [r3, #4]
    8a58:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8a5c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8a5e:	8a06      	ldrh	r6, [r0, #16]
    8a60:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8a64:	429e      	cmp	r6, r3
    8a66:	f000 80ba 	beq.w	8bde <_usb_d_dev_out_next+0x1a6>
    8a6a:	3e01      	subs	r6, #1
    8a6c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    8a6e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8a72:	f894 8013 	ldrb.w	r8, [r4, #19]
    8a76:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8a7a:	f1b9 0f00 	cmp.w	r9, #0
    8a7e:	d005      	beq.n	8a8c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8a80:	016b      	lsls	r3, r5, #5
    8a82:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8a86:	2201      	movs	r2, #1
    8a88:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8a8c:	7ce3      	ldrb	r3, [r4, #19]
    8a8e:	f013 0f20 	tst.w	r3, #32
    8a92:	d00d      	beq.n	8ab0 <_usb_d_dev_out_next+0x78>
    8a94:	6862      	ldr	r2, [r4, #4]
    8a96:	2a00      	cmp	r2, #0
    8a98:	d037      	beq.n	8b0a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8a9a:	68a0      	ldr	r0, [r4, #8]
    8a9c:	1a12      	subs	r2, r2, r0
    8a9e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8aa0:	6823      	ldr	r3, [r4, #0]
    8aa2:	42ba      	cmp	r2, r7
    8aa4:	bf28      	it	cs
    8aa6:	463a      	movcs	r2, r7
    8aa8:	68e1      	ldr	r1, [r4, #12]
    8aaa:	4418      	add	r0, r3
    8aac:	4b5c      	ldr	r3, [pc, #368]	; (8c20 <_usb_d_dev_out_next+0x1e8>)
    8aae:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8ab0:	6863      	ldr	r3, [r4, #4]
    8ab2:	b353      	cbz	r3, 8b0a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    8ab4:	f1b9 0f00 	cmp.w	r9, #0
    8ab8:	d040      	beq.n	8b3c <_usb_d_dev_out_next+0x104>
    8aba:	8a22      	ldrh	r2, [r4, #16]
    8abc:	42ba      	cmp	r2, r7
    8abe:	d93d      	bls.n	8b3c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    8ac0:	7ce3      	ldrb	r3, [r4, #19]
    8ac2:	f36f 1304 	bfc	r3, #4, #1
    8ac6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8ac8:	68a3      	ldr	r3, [r4, #8]
    8aca:	445b      	add	r3, fp
    8acc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    8ace:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8ad2:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8ad6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8ada:	bf0c      	ite	eq
    8adc:	222d      	moveq	r2, #45	; 0x2d
    8ade:	2225      	movne	r2, #37	; 0x25
    8ae0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8ae4:	b915      	cbnz	r5, 8aec <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8ae6:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8ae8:	4b4c      	ldr	r3, [pc, #304]	; (8c1c <_usb_d_dev_out_next+0x1e4>)
    8aea:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8aec:	2100      	movs	r1, #0
    8aee:	4620      	mov	r0, r4
    8af0:	4b4c      	ldr	r3, [pc, #304]	; (8c24 <_usb_d_dev_out_next+0x1ec>)
    8af2:	4798      	blx	r3
	return;
    8af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8af8:	8a06      	ldrh	r6, [r0, #16]
    8afa:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8afe:	429e      	cmp	r6, r3
    8b00:	d07b      	beq.n	8bfa <_usb_d_dev_out_next+0x1c2>
    8b02:	f04f 0b00 	mov.w	fp, #0
    8b06:	46da      	mov	sl, fp
    8b08:	e7af      	b.n	8a6a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8b0a:	7ce3      	ldrb	r3, [r4, #19]
    8b0c:	f013 0f10 	tst.w	r3, #16
    8b10:	d06c      	beq.n	8bec <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    8b12:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8b14:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8b18:	f043 0320 	orr.w	r3, r3, #32
    8b1c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8b1e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8b20:	493e      	ldr	r1, [pc, #248]	; (8c1c <_usb_d_dev_out_next+0x1e4>)
    8b22:	016a      	lsls	r2, r5, #5
    8b24:	188b      	adds	r3, r1, r2
    8b26:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8b28:	8a21      	ldrh	r1, [r4, #16]
    8b2a:	685a      	ldr	r2, [r3, #4]
    8b2c:	f361 329b 	bfi	r2, r1, #14, #14
    8b30:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8b32:	685a      	ldr	r2, [r3, #4]
    8b34:	f36f 020d 	bfc	r2, #0, #14
    8b38:	605a      	str	r2, [r3, #4]
    8b3a:	e01d      	b.n	8b78 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8b3c:	68a2      	ldr	r2, [r4, #8]
    8b3e:	4452      	add	r2, sl
    8b40:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    8b42:	4293      	cmp	r3, r2
    8b44:	d9c3      	bls.n	8ace <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8b46:	1a9b      	subs	r3, r3, r2
    8b48:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8b4a:	7ce1      	ldrb	r1, [r4, #19]
    8b4c:	f011 0f20 	tst.w	r1, #32
    8b50:	d026      	beq.n	8ba0 <_usb_d_dev_out_next+0x168>
    8b52:	8a22      	ldrh	r2, [r4, #16]
    8b54:	4293      	cmp	r3, r2
    8b56:	bf28      	it	cs
    8b58:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8b5a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8b5c:	016a      	lsls	r2, r5, #5
    8b5e:	492f      	ldr	r1, [pc, #188]	; (8c1c <_usb_d_dev_out_next+0x1e4>)
    8b60:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8b62:	4a2e      	ldr	r2, [pc, #184]	; (8c1c <_usb_d_dev_out_next+0x1e4>)
    8b64:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8b68:	6851      	ldr	r1, [r2, #4]
    8b6a:	f363 319b 	bfi	r1, r3, #14, #14
    8b6e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8b70:	6853      	ldr	r3, [r2, #4]
    8b72:	f36f 030d 	bfc	r3, #0, #14
    8b76:	6053      	str	r3, [r2, #4]
	if (!isr) {
    8b78:	f1b9 0f00 	cmp.w	r9, #0
    8b7c:	d108      	bne.n	8b90 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    8b7e:	f1b8 0f01 	cmp.w	r8, #1
    8b82:	d025      	beq.n	8bd0 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    8b84:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8b86:	016b      	lsls	r3, r5, #5
    8b88:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8b8c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8b90:	016d      	lsls	r5, r5, #5
    8b92:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    8b96:	2340      	movs	r3, #64	; 0x40
    8b98:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    8b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    8ba0:	8a21      	ldrh	r1, [r4, #16]
    8ba2:	428b      	cmp	r3, r1
    8ba4:	d90a      	bls.n	8bbc <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8baa:	d80e      	bhi.n	8bca <_usb_d_dev_out_next+0x192>
    8bac:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8bb0:	6821      	ldr	r1, [r4, #0]
    8bb2:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    8bb4:	0169      	lsls	r1, r5, #5
    8bb6:	4819      	ldr	r0, [pc, #100]	; (8c1c <_usb_d_dev_out_next+0x1e4>)
    8bb8:	5042      	str	r2, [r0, r1]
    8bba:	e7d2      	b.n	8b62 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    8bbc:	428b      	cmp	r3, r1
    8bbe:	d2f7      	bcs.n	8bb0 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    8bc0:	7ce1      	ldrb	r1, [r4, #19]
    8bc2:	f041 0120 	orr.w	r1, r1, #32
    8bc6:	74e1      	strb	r1, [r4, #19]
    8bc8:	e7f2      	b.n	8bb0 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    8bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8bce:	e7ef      	b.n	8bb0 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    8bd0:	4b12      	ldr	r3, [pc, #72]	; (8c1c <_usb_d_dev_out_next+0x1e4>)
    8bd2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8bd6:	2200      	movs	r2, #0
    8bd8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8bda:	222d      	movs	r2, #45	; 0x2d
    8bdc:	e7d3      	b.n	8b86 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    8bde:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8be2:	f890 8013 	ldrb.w	r8, [r0, #19]
    8be6:	f008 0807 	and.w	r8, r8, #7
    8bea:	e749      	b.n	8a80 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8bec:	f1b9 0f00 	cmp.w	r9, #0
    8bf0:	d10b      	bne.n	8c0a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    8bf2:	68a3      	ldr	r3, [r4, #8]
    8bf4:	4453      	add	r3, sl
    8bf6:	60a3      	str	r3, [r4, #8]
    8bf8:	e769      	b.n	8ace <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8bfa:	f890 8013 	ldrb.w	r8, [r0, #19]
    8bfe:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    8c02:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8c04:	46bb      	mov	fp, r7
    8c06:	46ba      	mov	sl, r7
    8c08:	e740      	b.n	8a8c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8c0a:	8a23      	ldrh	r3, [r4, #16]
    8c0c:	42bb      	cmp	r3, r7
    8c0e:	f63f af57 	bhi.w	8ac0 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    8c12:	68a3      	ldr	r3, [r4, #8]
    8c14:	4453      	add	r3, sl
    8c16:	60a3      	str	r3, [r4, #8]
    8c18:	e759      	b.n	8ace <_usb_d_dev_out_next+0x96>
    8c1a:	bf00      	nop
    8c1c:	200009a8 	.word	0x200009a8
    8c20:	0000c451 	.word	0x0000c451
    8c24:	000086d9 	.word	0x000086d9

00008c28 <_usb_d_dev_handler>:
{
    8c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8c2c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c30:	8c1e      	ldrh	r6, [r3, #32]
    8c32:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8c34:	b146      	cbz	r6, 8c48 <_usb_d_dev_handler+0x20>
    8c36:	4d96      	ldr	r5, [pc, #600]	; (8e90 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8c38:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8c3a:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    8c3e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8eac <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    8c42:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8eb0 <_usb_d_dev_handler+0x288>
    8c46:	e0de      	b.n	8e06 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8c48:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8c4a:	8b1b      	ldrh	r3, [r3, #24]
    8c4c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8c4e:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8c50:	f013 0f04 	tst.w	r3, #4
    8c54:	d11e      	bne.n	8c94 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8c56:	f413 7f00 	tst.w	r3, #512	; 0x200
    8c5a:	d125      	bne.n	8ca8 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8c5c:	f013 0f80 	tst.w	r3, #128	; 0x80
    8c60:	d14f      	bne.n	8d02 <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8c62:	f013 0f70 	tst.w	r3, #112	; 0x70
    8c66:	d158      	bne.n	8d1a <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8c68:	f013 0f08 	tst.w	r3, #8
    8c6c:	d178      	bne.n	8d60 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8c6e:	f013 0f01 	tst.w	r3, #1
    8c72:	d0e0      	beq.n	8c36 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8c74:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c78:	f240 2201 	movw	r2, #513	; 0x201
    8c7c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8c7e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8c80:	2270      	movs	r2, #112	; 0x70
    8c82:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8c84:	4b83      	ldr	r3, [pc, #524]	; (8e94 <_usb_d_dev_handler+0x26c>)
    8c86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8c8a:	2100      	movs	r1, #0
    8c8c:	2004      	movs	r0, #4
    8c8e:	4798      	blx	r3
    8c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8c94:	2204      	movs	r2, #4
    8c96:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c9a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    8c9c:	4b7d      	ldr	r3, [pc, #500]	; (8e94 <_usb_d_dev_handler+0x26c>)
    8c9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    8ca2:	4798      	blx	r3
    8ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8ca8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8cac:	f240 2201 	movw	r2, #513	; 0x201
    8cb0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8cb2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8cb4:	2270      	movs	r2, #112	; 0x70
    8cb6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8cb8:	4b76      	ldr	r3, [pc, #472]	; (8e94 <_usb_d_dev_handler+0x26c>)
    8cba:	891b      	ldrh	r3, [r3, #8]
    8cbc:	f003 030f 	and.w	r3, r3, #15
    8cc0:	2b03      	cmp	r3, #3
    8cc2:	d014      	beq.n	8cee <_usb_d_dev_handler+0xc6>
    8cc4:	2301      	movs	r3, #1
    8cc6:	4873      	ldr	r0, [pc, #460]	; (8e94 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8cc8:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8cca:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    8cce:	8912      	ldrh	r2, [r2, #8]
    8cd0:	f002 020f 	and.w	r2, r2, #15
    8cd4:	2a03      	cmp	r2, #3
    8cd6:	d00b      	beq.n	8cf0 <_usb_d_dev_handler+0xc8>
    8cd8:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8cda:	2b05      	cmp	r3, #5
    8cdc:	d1f4      	bne.n	8cc8 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    8cde:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8ce0:	4b6c      	ldr	r3, [pc, #432]	; (8e94 <_usb_d_dev_handler+0x26c>)
    8ce2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8ce6:	2003      	movs	r0, #3
    8ce8:	4798      	blx	r3
    8cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8cee:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8cf0:	4b68      	ldr	r3, [pc, #416]	; (8e94 <_usb_d_dev_handler+0x26c>)
    8cf2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8cf6:	8919      	ldrh	r1, [r3, #8]
    8cf8:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8cfc:	2200      	movs	r2, #0
    8cfe:	811a      	strh	r2, [r3, #8]
    8d00:	e7ee      	b.n	8ce0 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8d02:	2280      	movs	r2, #128	; 0x80
    8d04:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d08:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8d0a:	4b62      	ldr	r3, [pc, #392]	; (8e94 <_usb_d_dev_handler+0x26c>)
    8d0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8d10:	2100      	movs	r1, #0
    8d12:	2005      	movs	r0, #5
    8d14:	4798      	blx	r3
    8d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d1e:	2270      	movs	r2, #112	; 0x70
    8d20:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8d22:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8d24:	f240 2201 	movw	r2, #513	; 0x201
    8d28:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8d2a:	4b5b      	ldr	r3, [pc, #364]	; (8e98 <_usb_d_dev_handler+0x270>)
    8d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8d30:	f013 0f01 	tst.w	r3, #1
    8d34:	d00e      	beq.n	8d54 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8d36:	4a58      	ldr	r2, [pc, #352]	; (8e98 <_usb_d_dev_handler+0x270>)
    8d38:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8d3a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8d3e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8d42:	d1f9      	bne.n	8d38 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8d44:	4b53      	ldr	r3, [pc, #332]	; (8e94 <_usb_d_dev_handler+0x26c>)
    8d46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8d4a:	2100      	movs	r1, #0
    8d4c:	2002      	movs	r0, #2
    8d4e:	4798      	blx	r3
    8d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8d54:	4a50      	ldr	r2, [pc, #320]	; (8e98 <_usb_d_dev_handler+0x270>)
    8d56:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8d58:	f413 7f80 	tst.w	r3, #256	; 0x100
    8d5c:	d0fb      	beq.n	8d56 <_usb_d_dev_handler+0x12e>
    8d5e:	e7f1      	b.n	8d44 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8d60:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d64:	2400      	movs	r4, #0
    8d66:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8d6a:	2208      	movs	r2, #8
    8d6c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8d6e:	2270      	movs	r2, #112	; 0x70
    8d70:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8d72:	f240 2201 	movw	r2, #513	; 0x201
    8d76:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    8d78:	4b48      	ldr	r3, [pc, #288]	; (8e9c <_usb_d_dev_handler+0x274>)
    8d7a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8d7c:	4b45      	ldr	r3, [pc, #276]	; (8e94 <_usb_d_dev_handler+0x26c>)
    8d7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8d82:	4621      	mov	r1, r4
    8d84:	2001      	movs	r0, #1
    8d86:	4798      	blx	r3
    8d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8d8c:	f011 0f10 	tst.w	r1, #16
    8d90:	d109      	bne.n	8da6 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8d92:	f011 0f40 	tst.w	r1, #64	; 0x40
    8d96:	d108      	bne.n	8daa <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8d98:	f011 0f20 	tst.w	r1, #32
    8d9c:	d02f      	beq.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8d9e:	2100      	movs	r1, #0
    8da0:	4b3f      	ldr	r3, [pc, #252]	; (8ea0 <_usb_d_dev_handler+0x278>)
    8da2:	4798      	blx	r3
    8da4:	e02b      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    8da6:	47c8      	blx	r9
    8da8:	e029      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8daa:	2101      	movs	r1, #1
    8dac:	4b3c      	ldr	r3, [pc, #240]	; (8ea0 <_usb_d_dev_handler+0x278>)
    8dae:	4798      	blx	r3
    8db0:	e025      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8db2:	f011 0f40 	tst.w	r1, #64	; 0x40
    8db6:	d111      	bne.n	8ddc <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8db8:	f011 0f08 	tst.w	r1, #8
    8dbc:	d112      	bne.n	8de4 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8dbe:	f011 0f02 	tst.w	r1, #2
    8dc2:	d112      	bne.n	8dea <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8dc4:	f003 0307 	and.w	r3, r3, #7
    8dc8:	2b01      	cmp	r3, #1
    8dca:	d118      	bne.n	8dfe <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8dcc:	f011 0f04 	tst.w	r1, #4
    8dd0:	d10f      	bne.n	8df2 <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8dd2:	f011 0f10 	tst.w	r1, #16
    8dd6:	d012      	beq.n	8dfe <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8dd8:	47c8      	blx	r9
    8dda:	e010      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8ddc:	2101      	movs	r1, #1
    8dde:	4b30      	ldr	r3, [pc, #192]	; (8ea0 <_usb_d_dev_handler+0x278>)
    8de0:	4798      	blx	r3
    8de2:	e00c      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8de4:	2101      	movs	r1, #1
    8de6:	47c0      	blx	r8
    8de8:	e009      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8dea:	2101      	movs	r1, #1
    8dec:	4b2d      	ldr	r3, [pc, #180]	; (8ea4 <_usb_d_dev_handler+0x27c>)
    8dee:	4798      	blx	r3
    8df0:	e005      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    8df2:	2100      	movs	r1, #0
    8df4:	47c0      	blx	r8
    8df6:	e002      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8df8:	2100      	movs	r1, #0
    8dfa:	4b29      	ldr	r3, [pc, #164]	; (8ea0 <_usb_d_dev_handler+0x278>)
    8dfc:	4798      	blx	r3
    8dfe:	3401      	adds	r4, #1
    8e00:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    8e02:	2c1b      	cmp	r4, #27
    8e04:	d042      	beq.n	8e8c <_usb_d_dev_handler+0x264>
    8e06:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8e08:	7cab      	ldrb	r3, [r5, #18]
    8e0a:	2bff      	cmp	r3, #255	; 0xff
    8e0c:	d0f7      	beq.n	8dfe <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    8e0e:	f003 030f 	and.w	r3, r3, #15
    8e12:	2101      	movs	r1, #1
    8e14:	4099      	lsls	r1, r3
    8e16:	4231      	tst	r1, r6
    8e18:	d0f1      	beq.n	8dfe <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8e1a:	0159      	lsls	r1, r3, #5
    8e1c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8e20:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8e24:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8e26:	015b      	lsls	r3, r3, #5
    8e28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8e2c:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    8e30:	4019      	ands	r1, r3
    8e32:	d0e4      	beq.n	8dfe <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8e34:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8e38:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8e3c:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    8e40:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8e44:	2a01      	cmp	r2, #1
    8e46:	d0a1      	beq.n	8d8c <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8e48:	f013 0f80 	tst.w	r3, #128	; 0x80
    8e4c:	d1b1      	bne.n	8db2 <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8e4e:	f011 0f20 	tst.w	r1, #32
    8e52:	d1d1      	bne.n	8df8 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8e54:	f011 0f04 	tst.w	r1, #4
    8e58:	d10e      	bne.n	8e78 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8e5a:	f011 0f01 	tst.w	r1, #1
    8e5e:	d10e      	bne.n	8e7e <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8e60:	f003 0307 	and.w	r3, r3, #7
    8e64:	2b01      	cmp	r3, #1
    8e66:	d1ca      	bne.n	8dfe <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8e68:	f011 0f08 	tst.w	r1, #8
    8e6c:	d10b      	bne.n	8e86 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8e6e:	f011 0f10 	tst.w	r1, #16
    8e72:	d0c4      	beq.n	8dfe <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8e74:	47c8      	blx	r9
    8e76:	e7c2      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    8e78:	2100      	movs	r1, #0
    8e7a:	47c0      	blx	r8
    8e7c:	e7bf      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    8e7e:	2101      	movs	r1, #1
    8e80:	4b09      	ldr	r3, [pc, #36]	; (8ea8 <_usb_d_dev_handler+0x280>)
    8e82:	4798      	blx	r3
    8e84:	e7bb      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    8e86:	2101      	movs	r1, #1
    8e88:	47c0      	blx	r8
    8e8a:	e7b8      	b.n	8dfe <_usb_d_dev_handler+0x1d6>
    8e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8e90:	20000a7c 	.word	0x20000a7c
    8e94:	200009a8 	.word	0x200009a8
    8e98:	40001000 	.word	0x40001000
    8e9c:	00008871 	.word	0x00008871
    8ea0:	000086a9 	.word	0x000086a9
    8ea4:	000088b5 	.word	0x000088b5
    8ea8:	00008a39 	.word	0x00008a39
    8eac:	00008629 	.word	0x00008629
    8eb0:	00008771 	.word	0x00008771

00008eb4 <_usb_d_dev_init>:
{
    8eb4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8eb6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8eba:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    8ebc:	f013 0f01 	tst.w	r3, #1
    8ec0:	d124      	bne.n	8f0c <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8ec2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8ec6:	7893      	ldrb	r3, [r2, #2]
    8ec8:	f013 0f03 	tst.w	r3, #3
    8ecc:	d1fb      	bne.n	8ec6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8ece:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ed2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    8ed4:	f013 0f02 	tst.w	r3, #2
    8ed8:	d00f      	beq.n	8efa <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8eda:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8ede:	7813      	ldrb	r3, [r2, #0]
    8ee0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8ee4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8ee6:	7893      	ldrb	r3, [r2, #2]
    8ee8:	f013 0f03 	tst.w	r3, #3
    8eec:	d1fb      	bne.n	8ee6 <_usb_d_dev_init+0x32>
    8eee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8ef2:	7893      	ldrb	r3, [r2, #2]
    8ef4:	f013 0f02 	tst.w	r3, #2
    8ef8:	d1fb      	bne.n	8ef2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8efa:	2201      	movs	r2, #1
    8efc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f00:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8f02:	461a      	mov	r2, r3
    8f04:	7893      	ldrb	r3, [r2, #2]
    8f06:	f013 0f03 	tst.w	r3, #3
    8f0a:	d1fb      	bne.n	8f04 <_usb_d_dev_init+0x50>
    8f0c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8f10:	7893      	ldrb	r3, [r2, #2]
    8f12:	f013 0f01 	tst.w	r3, #1
    8f16:	d1fb      	bne.n	8f10 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8f18:	4b24      	ldr	r3, [pc, #144]	; (8fac <_usb_d_dev_init+0xf8>)
    8f1a:	4a25      	ldr	r2, [pc, #148]	; (8fb0 <_usb_d_dev_init+0xfc>)
    8f1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8f20:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    8f24:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8f28:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8f2c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    8f30:	4b20      	ldr	r3, [pc, #128]	; (8fb4 <_usb_d_dev_init+0x100>)
    8f32:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8f34:	4b20      	ldr	r3, [pc, #128]	; (8fb8 <_usb_d_dev_init+0x104>)
    8f36:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8f38:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8f3c:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8f40:	f011 011f 	ands.w	r1, r1, #31
    8f44:	d02b      	beq.n	8f9e <_usb_d_dev_init+0xea>
		pad_transn = 9;
    8f46:	291f      	cmp	r1, #31
    8f48:	bf08      	it	eq
    8f4a:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8f4c:	b34b      	cbz	r3, 8fa2 <_usb_d_dev_init+0xee>
		pad_transp = 25;
    8f4e:	2b1f      	cmp	r3, #31
    8f50:	bf08      	it	eq
    8f52:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    8f54:	b33a      	cbz	r2, 8fa6 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    8f56:	2a07      	cmp	r2, #7
    8f58:	bf08      	it	eq
    8f5a:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8f5c:	f003 031f 	and.w	r3, r3, #31
    8f60:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    8f64:	0312      	lsls	r2, r2, #12
    8f66:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    8f6a:	4313      	orrs	r3, r2
    8f6c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8f70:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8f72:	78d3      	ldrb	r3, [r2, #3]
    8f74:	f043 0303 	orr.w	r3, r3, #3
    8f78:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8f7a:	78d3      	ldrb	r3, [r2, #3]
    8f7c:	f043 030c 	orr.w	r3, r3, #12
    8f80:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8f82:	2304      	movs	r3, #4
    8f84:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8f86:	7893      	ldrb	r3, [r2, #2]
    8f88:	f013 0f03 	tst.w	r3, #3
    8f8c:	d1fb      	bne.n	8f86 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8f8e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f92:	4a06      	ldr	r2, [pc, #24]	; (8fac <_usb_d_dev_init+0xf8>)
    8f94:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8f96:	2201      	movs	r2, #1
    8f98:	811a      	strh	r2, [r3, #8]
}
    8f9a:	2000      	movs	r0, #0
    8f9c:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    8f9e:	2109      	movs	r1, #9
    8fa0:	e7d4      	b.n	8f4c <_usb_d_dev_init+0x98>
		pad_transp = 25;
    8fa2:	2319      	movs	r3, #25
    8fa4:	e7d6      	b.n	8f54 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    8fa6:	2206      	movs	r2, #6
    8fa8:	e7d8      	b.n	8f5c <_usb_d_dev_init+0xa8>
    8faa:	bf00      	nop
    8fac:	200009a8 	.word	0x200009a8
    8fb0:	00008625 	.word	0x00008625
    8fb4:	00008871 	.word	0x00008871
    8fb8:	00800084 	.word	0x00800084

00008fbc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8fbc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8fc0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    8fc2:	f013 0f03 	tst.w	r3, #3
    8fc6:	d129      	bne.n	901c <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8fc8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8fcc:	7893      	ldrb	r3, [r2, #2]
    8fce:	f013 0f03 	tst.w	r3, #3
    8fd2:	d1fb      	bne.n	8fcc <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8fd4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8fd8:	781b      	ldrb	r3, [r3, #0]
    8fda:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8fdc:	f013 0f02 	tst.w	r3, #2
    8fe0:	d108      	bne.n	8ff4 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    8fe2:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8fe6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8fea:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8fec:	7893      	ldrb	r3, [r2, #2]
    8fee:	f013 0f03 	tst.w	r3, #3
    8ff2:	d1fb      	bne.n	8fec <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ff4:	4b0b      	ldr	r3, [pc, #44]	; (9024 <_usb_d_dev_enable+0x68>)
    8ff6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8ffa:	609a      	str	r2, [r3, #8]
    8ffc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9000:	609a      	str	r2, [r3, #8]
    9002:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9006:	609a      	str	r2, [r3, #8]
    9008:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    900c:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    900e:	f240 228d 	movw	r2, #653	; 0x28d
    9012:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9016:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    9018:	2000      	movs	r0, #0
    901a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    901c:	f06f 0010 	mvn.w	r0, #16
}
    9020:	4770      	bx	lr
    9022:	bf00      	nop
    9024:	e000e100 	.word	0xe000e100

00009028 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9028:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    902c:	8913      	ldrh	r3, [r2, #8]
    902e:	f023 0301 	bic.w	r3, r3, #1
    9032:	041b      	lsls	r3, r3, #16
    9034:	0c1b      	lsrs	r3, r3, #16
    9036:	8113      	strh	r3, [r2, #8]
    9038:	4770      	bx	lr

0000903a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    903a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    903e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9042:	7298      	strb	r0, [r3, #10]
    9044:	4770      	bx	lr

00009046 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    9046:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    904a:	8a18      	ldrh	r0, [r3, #16]
}
    904c:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    9050:	4770      	bx	lr
	...

00009054 <_usb_d_dev_ep_init>:
{
    9054:	b5f0      	push	{r4, r5, r6, r7, lr}
    9056:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    905a:	f010 050f 	ands.w	r5, r0, #15
    905e:	d04d      	beq.n	90fc <_usb_d_dev_ep_init+0xa8>
    9060:	f1be 0f00 	cmp.w	lr, #0
    9064:	bfb4      	ite	lt
    9066:	1d6c      	addlt	r4, r5, #5
    9068:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    906a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    906e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    9070:	2d05      	cmp	r5, #5
    9072:	d947      	bls.n	9104 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    9074:	f06f 0011 	mvn.w	r0, #17
    9078:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    907a:	f1be 0f00 	cmp.w	lr, #0
    907e:	db1b      	blt.n	90b8 <_usb_d_dev_ep_init+0x64>
    9080:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9084:	4e37      	ldr	r6, [pc, #220]	; (9164 <_usb_d_dev_ep_init+0x110>)
    9086:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    908a:	2d00      	cmp	r5, #0
    908c:	d15e      	bne.n	914c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    908e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9092:	4d34      	ldr	r5, [pc, #208]	; (9164 <_usb_d_dev_ep_init+0x110>)
    9094:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    9098:	4d33      	ldr	r5, [pc, #204]	; (9168 <_usb_d_dev_ep_init+0x114>)
    909a:	00a6      	lsls	r6, r4, #2
    909c:	1933      	adds	r3, r6, r4
    909e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    90a2:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    90a6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    90aa:	3101      	adds	r1, #1
    90ac:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    90b0:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    90b4:	2000      	movs	r0, #0
    90b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    90b8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    90bc:	4e29      	ldr	r6, [pc, #164]	; (9164 <_usb_d_dev_ep_init+0x110>)
    90be:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    90c2:	686d      	ldr	r5, [r5, #4]
    90c4:	b935      	cbnz	r5, 90d4 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    90c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    90ca:	4d26      	ldr	r5, [pc, #152]	; (9164 <_usb_d_dev_ep_init+0x110>)
    90cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    90d0:	685f      	ldr	r7, [r3, #4]
    90d2:	e7e1      	b.n	9098 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    90d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    90d8:	4e22      	ldr	r6, [pc, #136]	; (9164 <_usb_d_dev_ep_init+0x110>)
    90da:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    90de:	896d      	ldrh	r5, [r5, #10]
    90e0:	4295      	cmp	r5, r2
    90e2:	daf0      	bge.n	90c6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    90e4:	f06f 0012 	mvn.w	r0, #18
    90e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    90ea:	f06f 0013 	mvn.w	r0, #19
    90ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    90f0:	f06f 0013 	mvn.w	r0, #19
    90f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    90f6:	f06f 0012 	mvn.w	r0, #18
    90fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    90fc:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    9100:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9102:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    9104:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    9108:	4f17      	ldr	r7, [pc, #92]	; (9168 <_usb_d_dev_ep_init+0x114>)
    910a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    910e:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    9112:	2eff      	cmp	r6, #255	; 0xff
    9114:	d1e9      	bne.n	90ea <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9116:	2900      	cmp	r1, #0
    9118:	d1af      	bne.n	907a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    911a:	b125      	cbz	r5, 9126 <_usb_d_dev_ep_init+0xd2>
    911c:	f1be 0f00 	cmp.w	lr, #0
    9120:	bfa4      	itt	ge
    9122:	3505      	addge	r5, #5
    9124:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    9126:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    912a:	4e0f      	ldr	r6, [pc, #60]	; (9168 <_usb_d_dev_ep_init+0x114>)
    912c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9130:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    9134:	2dff      	cmp	r5, #255	; 0xff
    9136:	d1db      	bne.n	90f0 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    9138:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    913c:	4e09      	ldr	r6, [pc, #36]	; (9164 <_usb_d_dev_ep_init+0x110>)
    913e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    9142:	2d00      	cmp	r5, #0
    9144:	d0d7      	beq.n	90f6 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9146:	f1be 0f00 	cmp.w	lr, #0
    914a:	dbb5      	blt.n	90b8 <_usb_d_dev_ep_init+0x64>
    914c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    9150:	4e04      	ldr	r6, [pc, #16]	; (9164 <_usb_d_dev_ep_init+0x110>)
    9152:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9156:	892d      	ldrh	r5, [r5, #8]
    9158:	4295      	cmp	r5, r2
    915a:	da98      	bge.n	908e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    915c:	f06f 0012 	mvn.w	r0, #18
    9160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9162:	bf00      	nop
    9164:	0000e118 	.word	0x0000e118
    9168:	200009a8 	.word	0x200009a8

0000916c <_usb_d_dev_ep_deinit>:
{
    916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    916e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9170:	f010 060f 	ands.w	r6, r0, #15
    9174:	d00e      	beq.n	9194 <_usb_d_dev_ep_deinit+0x28>
    9176:	2f00      	cmp	r7, #0
    9178:	bfb4      	ite	lt
    917a:	1d73      	addlt	r3, r6, #5
    917c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    917e:	2e05      	cmp	r6, #5
    9180:	d900      	bls.n	9184 <_usb_d_dev_ep_deinit+0x18>
    9182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    9184:	461d      	mov	r5, r3
    9186:	3301      	adds	r3, #1
    9188:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    918c:	4a24      	ldr	r2, [pc, #144]	; (9220 <_usb_d_dev_ep_deinit+0xb4>)
    918e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    9192:	e002      	b.n	919a <_usb_d_dev_ep_deinit+0x2e>
    9194:	f8df e094 	ldr.w	lr, [pc, #148]	; 922c <_usb_d_dev_ep_deinit+0xc0>
    9198:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    919a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    919e:	4a21      	ldr	r2, [pc, #132]	; (9224 <_usb_d_dev_ep_deinit+0xb8>)
    91a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    91a4:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    91a8:	2aff      	cmp	r2, #255	; 0xff
    91aa:	d0ea      	beq.n	9182 <_usb_d_dev_ep_deinit+0x16>
    91ac:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    91ae:	2203      	movs	r2, #3
    91b0:	0ff9      	lsrs	r1, r7, #31
    91b2:	4670      	mov	r0, lr
    91b4:	4b1c      	ldr	r3, [pc, #112]	; (9228 <_usb_d_dev_ep_deinit+0xbc>)
    91b6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    91b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    91bc:	4a19      	ldr	r2, [pc, #100]	; (9224 <_usb_d_dev_ep_deinit+0xb8>)
    91be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    91c2:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    91c6:	f003 0307 	and.w	r3, r3, #7
    91ca:	2b01      	cmp	r3, #1
    91cc:	d016      	beq.n	91fc <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    91ce:	2f00      	cmp	r7, #0
    91d0:	db1b      	blt.n	920a <_usb_d_dev_ep_deinit+0x9e>
    91d2:	0160      	lsls	r0, r4, #5
    91d4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    91d8:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    91dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    91e0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    91e4:	4b0f      	ldr	r3, [pc, #60]	; (9224 <_usb_d_dev_ep_deinit+0xb8>)
    91e6:	00aa      	lsls	r2, r5, #2
    91e8:	1951      	adds	r1, r2, r5
    91ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    91ee:	2000      	movs	r0, #0
    91f0:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    91f4:	22ff      	movs	r2, #255	; 0xff
    91f6:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    91fa:	e7c2      	b.n	9182 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    91fc:	0160      	lsls	r0, r4, #5
    91fe:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    9202:	2300      	movs	r3, #0
    9204:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    9208:	e7ec      	b.n	91e4 <_usb_d_dev_ep_deinit+0x78>
    920a:	0176      	lsls	r6, r6, #5
    920c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9210:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    9214:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    9218:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    921c:	e7e2      	b.n	91e4 <_usb_d_dev_ep_deinit+0x78>
    921e:	bf00      	nop
    9220:	20000a68 	.word	0x20000a68
    9224:	200009a8 	.word	0x200009a8
    9228:	00008705 	.word	0x00008705
    922c:	20000a7c 	.word	0x20000a7c

00009230 <_usb_d_dev_ep_enable>:
{
    9230:	b4f0      	push	{r4, r5, r6, r7}
    9232:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9234:	f010 000f 	ands.w	r0, r0, #15
    9238:	f000 80a7 	beq.w	938a <_usb_d_dev_ep_enable+0x15a>
    923c:	2e00      	cmp	r6, #0
    923e:	bfb4      	ite	lt
    9240:	1d43      	addlt	r3, r0, #5
    9242:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9244:	4605      	mov	r5, r0
    9246:	0142      	lsls	r2, r0, #5
    9248:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    924c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    9250:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9252:	2805      	cmp	r0, #5
    9254:	f240 80a0 	bls.w	9398 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    9258:	f06f 0011 	mvn.w	r0, #17
    925c:	e07d      	b.n	935a <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    925e:	f014 0f77 	tst.w	r4, #119	; 0x77
    9262:	f040 8089 	bne.w	9378 <_usb_d_dev_ep_enable+0x148>
    9266:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    926a:	2111      	movs	r1, #17
    926c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9270:	4c9b      	ldr	r4, [pc, #620]	; (94e0 <_usb_d_dev_ep_enable+0x2b0>)
    9272:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    9276:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    927a:	4c9a      	ldr	r4, [pc, #616]	; (94e4 <_usb_d_dev_ep_enable+0x2b4>)
    927c:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9280:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9284:	f200 80cd 	bhi.w	9422 <_usb_d_dev_ep_enable+0x1f2>
    9288:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    928c:	f200 8112 	bhi.w	94b4 <_usb_d_dev_ep_enable+0x284>
    9290:	2980      	cmp	r1, #128	; 0x80
    9292:	f200 8101 	bhi.w	9498 <_usb_d_dev_ep_enable+0x268>
    9296:	2940      	cmp	r1, #64	; 0x40
    9298:	f200 8113 	bhi.w	94c2 <_usb_d_dev_ep_enable+0x292>
    929c:	2920      	cmp	r1, #32
    929e:	f200 8102 	bhi.w	94a6 <_usb_d_dev_ep_enable+0x276>
    92a2:	2910      	cmp	r1, #16
    92a4:	f200 8114 	bhi.w	94d0 <_usb_d_dev_ep_enable+0x2a0>
    92a8:	2908      	cmp	r1, #8
    92aa:	bf94      	ite	ls
    92ac:	2600      	movls	r6, #0
    92ae:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    92b0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    92b4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    92b6:	f3c1 010d 	ubfx	r1, r1, #0, #14
    92ba:	e0b8      	b.n	942e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    92bc:	f014 0f70 	tst.w	r4, #112	; 0x70
    92c0:	d15d      	bne.n	937e <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    92c2:	4e87      	ldr	r6, [pc, #540]	; (94e0 <_usb_d_dev_ep_enable+0x2b0>)
    92c4:	009f      	lsls	r7, r3, #2
    92c6:	18f9      	adds	r1, r7, r3
    92c8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    92cc:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    92d0:	0109      	lsls	r1, r1, #4
    92d2:	f001 0170 	and.w	r1, r1, #112	; 0x70
    92d6:	430c      	orrs	r4, r1
    92d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    92dc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    92e0:	443b      	add	r3, r7
    92e2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    92e6:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    92ea:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    92ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    92f2:	d80f      	bhi.n	9314 <_usb_d_dev_ep_enable+0xe4>
    92f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    92f8:	d819      	bhi.n	932e <_usb_d_dev_ep_enable+0xfe>
    92fa:	2b80      	cmp	r3, #128	; 0x80
    92fc:	d819      	bhi.n	9332 <_usb_d_dev_ep_enable+0x102>
    92fe:	2b40      	cmp	r3, #64	; 0x40
    9300:	d819      	bhi.n	9336 <_usb_d_dev_ep_enable+0x106>
    9302:	2b20      	cmp	r3, #32
    9304:	d819      	bhi.n	933a <_usb_d_dev_ep_enable+0x10a>
    9306:	2b10      	cmp	r3, #16
    9308:	d819      	bhi.n	933e <_usb_d_dev_ep_enable+0x10e>
    930a:	2b08      	cmp	r3, #8
    930c:	bf94      	ite	ls
    930e:	2300      	movls	r3, #0
    9310:	2301      	movhi	r3, #1
    9312:	e000      	b.n	9316 <_usb_d_dev_ep_enable+0xe6>
    9314:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9316:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    931a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    931c:	2380      	movs	r3, #128	; 0x80
    931e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    9322:	4b6f      	ldr	r3, [pc, #444]	; (94e0 <_usb_d_dev_ep_enable+0x2b0>)
    9324:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9328:	2000      	movs	r0, #0
    932a:	76a8      	strb	r0, [r5, #26]
    932c:	e015      	b.n	935a <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    932e:	2306      	movs	r3, #6
    9330:	e7f1      	b.n	9316 <_usb_d_dev_ep_enable+0xe6>
    9332:	2305      	movs	r3, #5
    9334:	e7ef      	b.n	9316 <_usb_d_dev_ep_enable+0xe6>
    9336:	2304      	movs	r3, #4
    9338:	e7ed      	b.n	9316 <_usb_d_dev_ep_enable+0xe6>
    933a:	2303      	movs	r3, #3
    933c:	e7eb      	b.n	9316 <_usb_d_dev_ep_enable+0xe6>
    933e:	2302      	movs	r3, #2
    9340:	e7e9      	b.n	9316 <_usb_d_dev_ep_enable+0xe6>
    9342:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9344:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9348:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    934a:	2340      	movs	r3, #64	; 0x40
    934c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    9350:	4b63      	ldr	r3, [pc, #396]	; (94e0 <_usb_d_dev_ep_enable+0x2b0>)
    9352:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    9356:	2000      	movs	r0, #0
    9358:	72a8      	strb	r0, [r5, #10]
}
    935a:	bcf0      	pop	{r4, r5, r6, r7}
    935c:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    935e:	2106      	movs	r1, #6
    9360:	e7f0      	b.n	9344 <_usb_d_dev_ep_enable+0x114>
    9362:	2105      	movs	r1, #5
    9364:	e7ee      	b.n	9344 <_usb_d_dev_ep_enable+0x114>
    9366:	2104      	movs	r1, #4
    9368:	e7ec      	b.n	9344 <_usb_d_dev_ep_enable+0x114>
    936a:	2103      	movs	r1, #3
    936c:	e7ea      	b.n	9344 <_usb_d_dev_ep_enable+0x114>
    936e:	2102      	movs	r1, #2
    9370:	e7e8      	b.n	9344 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    9372:	f06f 0011 	mvn.w	r0, #17
    9376:	e7f0      	b.n	935a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9378:	f06f 0013 	mvn.w	r0, #19
    937c:	e7ed      	b.n	935a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    937e:	f06f 0013 	mvn.w	r0, #19
    9382:	e7ea      	b.n	935a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    9384:	f06f 0013 	mvn.w	r0, #19
    9388:	e7e7      	b.n	935a <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    938a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    938e:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    9392:	b2e4      	uxtb	r4, r4
    9394:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    9396:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9398:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    939c:	4950      	ldr	r1, [pc, #320]	; (94e0 <_usb_d_dev_ep_enable+0x2b0>)
    939e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    93a2:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    93a6:	2aff      	cmp	r2, #255	; 0xff
    93a8:	d0e3      	beq.n	9372 <_usb_d_dev_ep_enable+0x142>
    93aa:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    93ac:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    93ae:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    93b2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    93b6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    93ba:	f001 0107 	and.w	r1, r1, #7
    93be:	2901      	cmp	r1, #1
    93c0:	f43f af4d 	beq.w	925e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    93c4:	2e00      	cmp	r6, #0
    93c6:	f6ff af79 	blt.w	92bc <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    93ca:	f014 0f07 	tst.w	r4, #7
    93ce:	d1d9      	bne.n	9384 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    93d0:	4e43      	ldr	r6, [pc, #268]	; (94e0 <_usb_d_dev_ep_enable+0x2b0>)
    93d2:	009f      	lsls	r7, r3, #2
    93d4:	18f9      	adds	r1, r7, r3
    93d6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    93da:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    93de:	f001 0107 	and.w	r1, r1, #7
    93e2:	430c      	orrs	r4, r1
    93e4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    93e8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    93ec:	443b      	add	r3, r7
    93ee:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    93f2:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    93f6:	4b3b      	ldr	r3, [pc, #236]	; (94e4 <_usb_d_dev_ep_enable+0x2b4>)
    93f8:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    93fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9400:	d89f      	bhi.n	9342 <_usb_d_dev_ep_enable+0x112>
    9402:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9406:	d8aa      	bhi.n	935e <_usb_d_dev_ep_enable+0x12e>
    9408:	2980      	cmp	r1, #128	; 0x80
    940a:	d8aa      	bhi.n	9362 <_usb_d_dev_ep_enable+0x132>
    940c:	2940      	cmp	r1, #64	; 0x40
    940e:	d8aa      	bhi.n	9366 <_usb_d_dev_ep_enable+0x136>
    9410:	2920      	cmp	r1, #32
    9412:	d8aa      	bhi.n	936a <_usb_d_dev_ep_enable+0x13a>
    9414:	2910      	cmp	r1, #16
    9416:	d8aa      	bhi.n	936e <_usb_d_dev_ep_enable+0x13e>
    9418:	2908      	cmp	r1, #8
    941a:	bf94      	ite	ls
    941c:	2100      	movls	r1, #0
    941e:	2101      	movhi	r1, #1
    9420:	e790      	b.n	9344 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9422:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9426:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9428:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    942c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    942e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    9432:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9434:	2640      	movs	r6, #64	; 0x40
    9436:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    943a:	2180      	movs	r1, #128	; 0x80
    943c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    9440:	4f27      	ldr	r7, [pc, #156]	; (94e0 <_usb_d_dev_ep_enable+0x2b0>)
    9442:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    9446:	2000      	movs	r0, #0
    9448:	72a8      	strb	r0, [r5, #10]
    944a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    944c:	009c      	lsls	r4, r3, #2
    944e:	18e1      	adds	r1, r4, r3
    9450:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    9454:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    9458:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    945c:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    9460:	0152      	lsls	r2, r2, #5
    9462:	18b9      	adds	r1, r7, r2
    9464:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9466:	4423      	add	r3, r4
    9468:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    946c:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    9470:	684b      	ldr	r3, [r1, #4]
    9472:	f364 339b 	bfi	r3, r4, #14, #14
    9476:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9478:	684b      	ldr	r3, [r1, #4]
    947a:	f360 030d 	bfi	r3, r0, #0, #14
    947e:	604b      	str	r3, [r1, #4]
    9480:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    9484:	21b0      	movs	r1, #176	; 0xb0
    9486:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    948a:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    948e:	461a      	mov	r2, r3
    9490:	2310      	movs	r3, #16
    9492:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    9496:	e760      	b.n	935a <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9498:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    949c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    949e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    94a2:	2605      	movs	r6, #5
    94a4:	e7c3      	b.n	942e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94a6:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    94aa:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94ac:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    94b0:	2603      	movs	r6, #3
    94b2:	e7bc      	b.n	942e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94b4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    94b8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94ba:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    94be:	2606      	movs	r6, #6
    94c0:	e7b5      	b.n	942e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94c2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    94c6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94c8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    94cc:	2604      	movs	r6, #4
    94ce:	e7ae      	b.n	942e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94d0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    94d4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    94d6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    94da:	2602      	movs	r6, #2
    94dc:	e7a7      	b.n	942e <_usb_d_dev_ep_enable+0x1fe>
    94de:	bf00      	nop
    94e0:	200009a8 	.word	0x200009a8
    94e4:	0fffc000 	.word	0x0fffc000

000094e8 <_usb_d_dev_ep_stall>:
{
    94e8:	b470      	push	{r4, r5, r6}
    94ea:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    94ec:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    94ee:	f010 000f 	ands.w	r0, r0, #15
    94f2:	d008      	beq.n	9506 <_usb_d_dev_ep_stall+0x1e>
    94f4:	2b00      	cmp	r3, #0
    94f6:	bfb4      	ite	lt
    94f8:	1d43      	addlt	r3, r0, #5
    94fa:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    94fc:	2805      	cmp	r0, #5
    94fe:	d903      	bls.n	9508 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    9500:	f06f 0011 	mvn.w	r0, #17
    9504:	e018      	b.n	9538 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    9506:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    9508:	2901      	cmp	r1, #1
    950a:	d017      	beq.n	953c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    950c:	2900      	cmp	r1, #0
    950e:	d03a      	beq.n	9586 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9510:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9514:	4a45      	ldr	r2, [pc, #276]	; (962c <_usb_d_dev_ep_stall+0x144>)
    9516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    951a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    951e:	f003 030f 	and.w	r3, r3, #15
    9522:	015b      	lsls	r3, r3, #5
    9524:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9528:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    952c:	2310      	movs	r3, #16
    952e:	40a3      	lsls	r3, r4
    9530:	421a      	tst	r2, r3
    9532:	bf14      	ite	ne
    9534:	2001      	movne	r0, #1
    9536:	2000      	moveq	r0, #0
}
    9538:	bc70      	pop	{r4, r5, r6}
    953a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    953c:	2510      	movs	r5, #16
    953e:	40a5      	lsls	r5, r4
    9540:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9542:	493a      	ldr	r1, [pc, #232]	; (962c <_usb_d_dev_ep_stall+0x144>)
    9544:	009e      	lsls	r6, r3, #2
    9546:	18f2      	adds	r2, r6, r3
    9548:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    954c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9550:	f002 020f 	and.w	r2, r2, #15
    9554:	0150      	lsls	r0, r2, #5
    9556:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    955a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    955e:	2020      	movs	r0, #32
    9560:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9564:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9566:	0152      	lsls	r2, r2, #5
    9568:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    956c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    9570:	4433      	add	r3, r6
    9572:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9576:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    957a:	f042 0208 	orr.w	r2, r2, #8
    957e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9582:	2000      	movs	r0, #0
    9584:	e7d8      	b.n	9538 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9586:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    958a:	4928      	ldr	r1, [pc, #160]	; (962c <_usb_d_dev_ep_stall+0x144>)
    958c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9590:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    9594:	f002 020f 	and.w	r2, r2, #15
    9598:	0151      	lsls	r1, r2, #5
    959a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    959e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    95a2:	2010      	movs	r0, #16
    95a4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    95a6:	4205      	tst	r5, r0
    95a8:	d03c      	beq.n	9624 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    95aa:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    95ac:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    95b0:	2020      	movs	r0, #32
    95b2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    95b4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    95b6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    95ba:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    95be:	4202      	tst	r2, r0
    95c0:	d007      	beq.n	95d2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    95c2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    95c6:	2201      	movs	r2, #1
    95c8:	fa02 f404 	lsl.w	r4, r2, r4
    95cc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    95ce:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    95d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    95d6:	4815      	ldr	r0, [pc, #84]	; (962c <_usb_d_dev_ep_stall+0x144>)
    95d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    95dc:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    95e0:	f002 0207 	and.w	r2, r2, #7
    95e4:	2a01      	cmp	r2, #1
    95e6:	d00c      	beq.n	9602 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    95e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    95ec:	4a0f      	ldr	r2, [pc, #60]	; (962c <_usb_d_dev_ep_stall+0x144>)
    95ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    95f2:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    95f6:	f36f 02c3 	bfc	r2, #3, #1
    95fa:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    95fe:	2000      	movs	r0, #0
    9600:	e79a      	b.n	9538 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9602:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9606:	f012 0f30 	tst.w	r2, #48	; 0x30
    960a:	d10d      	bne.n	9628 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    960c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9610:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9614:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9618:	f36f 02c3 	bfc	r2, #3, #1
    961c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9620:	2000      	movs	r0, #0
    9622:	e789      	b.n	9538 <_usb_d_dev_ep_stall+0x50>
    9624:	2000      	movs	r0, #0
    9626:	e787      	b.n	9538 <_usb_d_dev_ep_stall+0x50>
    9628:	2000      	movs	r0, #0
    962a:	e785      	b.n	9538 <_usb_d_dev_ep_stall+0x50>
    962c:	200009a8 	.word	0x200009a8

00009630 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9630:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    9632:	f000 040f 	and.w	r4, r0, #15
    9636:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9638:	4a14      	ldr	r2, [pc, #80]	; (968c <_usb_d_dev_ep_read_req+0x5c>)
    963a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    963c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    963e:	6840      	ldr	r0, [r0, #4]
    9640:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9644:	2c05      	cmp	r4, #5
    9646:	d817      	bhi.n	9678 <_usb_d_dev_ep_read_req+0x48>
    9648:	b1c9      	cbz	r1, 967e <_usb_d_dev_ep_read_req+0x4e>
    964a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    964e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    9652:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9654:	2a11      	cmp	r2, #17
    9656:	d115      	bne.n	9684 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9658:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    965c:	f012 0f10 	tst.w	r2, #16
    9660:	d102      	bne.n	9668 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    9662:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9664:	bc30      	pop	{r4, r5}
    9666:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    9668:	682c      	ldr	r4, [r5, #0]
    966a:	686a      	ldr	r2, [r5, #4]
    966c:	600c      	str	r4, [r1, #0]
    966e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9670:	2210      	movs	r2, #16
    9672:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    9676:	e7f5      	b.n	9664 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    9678:	f06f 0011 	mvn.w	r0, #17
    967c:	e7f2      	b.n	9664 <_usb_d_dev_ep_read_req+0x34>
    967e:	f06f 0011 	mvn.w	r0, #17
    9682:	e7ef      	b.n	9664 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    9684:	f06f 0012 	mvn.w	r0, #18
    9688:	e7ec      	b.n	9664 <_usb_d_dev_ep_read_req+0x34>
    968a:	bf00      	nop
    968c:	200009a8 	.word	0x200009a8

00009690 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9694:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9696:	7a03      	ldrb	r3, [r0, #8]
    9698:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    969a:	f013 030f 	ands.w	r3, r3, #15
    969e:	f000 80c2 	beq.w	9826 <_usb_d_dev_ep_trans+0x196>
    96a2:	2e00      	cmp	r6, #0
    96a4:	bfb4      	ite	lt
    96a6:	1d5a      	addlt	r2, r3, #5
    96a8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    96aa:	4614      	mov	r4, r2
    96ac:	4969      	ldr	r1, [pc, #420]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    96ae:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    96b2:	1c55      	adds	r5, r2, #1
    96b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    96b8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    96bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    96c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    96c4:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    96c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    96cc:	428a      	cmp	r2, r1
    96ce:	d025      	beq.n	971c <_usb_d_dev_ep_trans+0x8c>
    96d0:	1e55      	subs	r5, r2, #1
    96d2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    96d4:	6841      	ldr	r1, [r0, #4]
    96d6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    96d8:	2b05      	cmp	r3, #5
    96da:	f200 8092 	bhi.w	9802 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    96de:	6803      	ldr	r3, [r0, #0]
    96e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    96e4:	d31c      	bcc.n	9720 <_usb_d_dev_ep_trans+0x90>
    96e6:	eb03 0c01 	add.w	ip, r3, r1
    96ea:	f8df e180 	ldr.w	lr, [pc, #384]	; 986c <_usb_d_dev_ep_trans+0x1dc>
    96ee:	45f4      	cmp	ip, lr
    96f0:	d816      	bhi.n	9720 <_usb_d_dev_ep_trans+0x90>
    96f2:	f013 0f03 	tst.w	r3, #3
    96f6:	d113      	bne.n	9720 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    96f8:	2e00      	cmp	r6, #0
    96fa:	db2a      	blt.n	9752 <_usb_d_dev_ep_trans+0xc2>
    96fc:	428a      	cmp	r2, r1
    96fe:	f200 809c 	bhi.w	983a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    9702:	b34d      	cbz	r5, 9758 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9704:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9708:	4a52      	ldr	r2, [pc, #328]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    970a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    970e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9712:	2b00      	cmp	r3, #0
    9714:	d07b      	beq.n	980e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9716:	f04f 0800 	mov.w	r8, #0
    971a:	e00c      	b.n	9736 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    971c:	4615      	mov	r5, r2
    971e:	e7d9      	b.n	96d4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    9720:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9724:	4a4b      	ldr	r2, [pc, #300]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    9726:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    972a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    972e:	2b00      	cmp	r3, #0
    9730:	d06a      	beq.n	9808 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    9732:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9736:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    973a:	4a46      	ldr	r2, [pc, #280]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    973c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9740:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9744:	f013 0f08 	tst.w	r3, #8
    9748:	d009      	beq.n	975e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    974a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    974c:	b003      	add	sp, #12
    974e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    9752:	f04f 0800 	mov.w	r8, #0
    9756:	e7ee      	b.n	9736 <_usb_d_dev_ep_trans+0xa6>
    9758:	f04f 0800 	mov.w	r8, #0
    975c:	e7eb      	b.n	9736 <_usb_d_dev_ep_trans+0xa6>
    975e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    9760:	a801      	add	r0, sp, #4
    9762:	4b3d      	ldr	r3, [pc, #244]	; (9858 <_usb_d_dev_ep_trans+0x1c8>)
    9764:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9766:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    976a:	4a3a      	ldr	r2, [pc, #232]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    976c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9770:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9774:	f013 0f40 	tst.w	r3, #64	; 0x40
    9778:	d13c      	bne.n	97f4 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    977a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    977e:	4b35      	ldr	r3, [pc, #212]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    9780:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    9784:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    9788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    978c:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    9790:	a801      	add	r0, sp, #4
    9792:	4b32      	ldr	r3, [pc, #200]	; (985c <_usb_d_dev_ep_trans+0x1cc>)
    9794:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    9796:	f8da 3000 	ldr.w	r3, [sl]
    979a:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    979e:	f8da 3004 	ldr.w	r3, [sl, #4]
    97a2:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    97a6:	2300      	movs	r3, #0
    97a8:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    97ac:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    97ae:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    97b2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    97b6:	f368 1345 	bfi	r3, r8, #5, #1
    97ba:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    97be:	f89a 3009 	ldrb.w	r3, [sl, #9]
    97c2:	b1e3      	cbz	r3, 97fe <_usb_d_dev_ep_trans+0x16e>
    97c4:	fab5 f585 	clz	r5, r5
    97c8:	096d      	lsrs	r5, r5, #5
    97ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    97ce:	4b21      	ldr	r3, [pc, #132]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    97d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    97d4:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    97d8:	f365 1304 	bfi	r3, r5, #4, #1
    97dc:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    97e0:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    97e2:	f04f 0100 	mov.w	r1, #0
    97e6:	4638      	mov	r0, r7
    97e8:	bfb4      	ite	lt
    97ea:	4b1d      	ldrlt	r3, [pc, #116]	; (9860 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    97ec:	4b1d      	ldrge	r3, [pc, #116]	; (9864 <_usb_d_dev_ep_trans+0x1d4>)
    97ee:	4798      	blx	r3
	return ERR_NONE;
    97f0:	2000      	movs	r0, #0
    97f2:	e7ab      	b.n	974c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    97f4:	a801      	add	r0, sp, #4
    97f6:	4b19      	ldr	r3, [pc, #100]	; (985c <_usb_d_dev_ep_trans+0x1cc>)
    97f8:	4798      	blx	r3
		return USB_BUSY;
    97fa:	2001      	movs	r0, #1
    97fc:	e7a6      	b.n	974c <_usb_d_dev_ep_trans+0xbc>
    97fe:	2500      	movs	r5, #0
    9800:	e7e3      	b.n	97ca <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    9802:	f06f 0011 	mvn.w	r0, #17
    9806:	e7a1      	b.n	974c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9808:	f06f 0012 	mvn.w	r0, #18
    980c:	e79e      	b.n	974c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    980e:	f06f 0011 	mvn.w	r0, #17
    9812:	e79b      	b.n	974c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9814:	f06f 0012 	mvn.w	r0, #18
    9818:	e798      	b.n	974c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    981a:	6841      	ldr	r1, [r0, #4]
    981c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    9820:	4f11      	ldr	r7, [pc, #68]	; (9868 <_usb_d_dev_ep_trans+0x1d8>)
    9822:	2400      	movs	r4, #0
    9824:	e75b      	b.n	96de <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9826:	4a0b      	ldr	r2, [pc, #44]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    9828:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    982c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9830:	428a      	cmp	r2, r1
    9832:	d0f2      	beq.n	981a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9834:	4f0c      	ldr	r7, [pc, #48]	; (9868 <_usb_d_dev_ep_trans+0x1d8>)
    9836:	2400      	movs	r4, #0
    9838:	e74a      	b.n	96d0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    983a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    983e:	4a05      	ldr	r2, [pc, #20]	; (9854 <_usb_d_dev_ep_trans+0x1c4>)
    9840:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9848:	2b00      	cmp	r3, #0
    984a:	d0e3      	beq.n	9814 <_usb_d_dev_ep_trans+0x184>
    984c:	f04f 0801 	mov.w	r8, #1
    9850:	e771      	b.n	9736 <_usb_d_dev_ep_trans+0xa6>
    9852:	bf00      	nop
    9854:	200009a8 	.word	0x200009a8
    9858:	00004a69 	.word	0x00004a69
    985c:	00004a77 	.word	0x00004a77
    9860:	000088b5 	.word	0x000088b5
    9864:	00008a39 	.word	0x00008a39
    9868:	20000a7c 	.word	0x20000a7c
    986c:	20041fff 	.word	0x20041fff

00009870 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9870:	4b07      	ldr	r3, [pc, #28]	; (9890 <_usb_d_dev_register_callback+0x20>)
    9872:	2900      	cmp	r1, #0
    9874:	bf08      	it	eq
    9876:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    9878:	2801      	cmp	r0, #1
    987a:	d004      	beq.n	9886 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    987c:	b910      	cbnz	r0, 9884 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    987e:	4b05      	ldr	r3, [pc, #20]	; (9894 <_usb_d_dev_register_callback+0x24>)
    9880:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    9884:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9886:	4b03      	ldr	r3, [pc, #12]	; (9894 <_usb_d_dev_register_callback+0x24>)
    9888:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    988c:	4770      	bx	lr
    988e:	bf00      	nop
    9890:	00008625 	.word	0x00008625
    9894:	200009a8 	.word	0x200009a8

00009898 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9898:	4b0a      	ldr	r3, [pc, #40]	; (98c4 <_usb_d_dev_register_ep_callback+0x2c>)
    989a:	2900      	cmp	r1, #0
    989c:	bf08      	it	eq
    989e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    98a0:	4603      	mov	r3, r0
    98a2:	b138      	cbz	r0, 98b4 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    98a4:	2801      	cmp	r0, #1
    98a6:	d009      	beq.n	98bc <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    98a8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    98aa:	bf04      	itt	eq
    98ac:	4b06      	ldreq	r3, [pc, #24]	; (98c8 <_usb_d_dev_register_ep_callback+0x30>)
    98ae:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    98b2:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    98b4:	4b04      	ldr	r3, [pc, #16]	; (98c8 <_usb_d_dev_register_ep_callback+0x30>)
    98b6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    98ba:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    98bc:	4b02      	ldr	r3, [pc, #8]	; (98c8 <_usb_d_dev_register_ep_callback+0x30>)
    98be:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    98c2:	4770      	bx	lr
    98c4:	00008625 	.word	0x00008625
    98c8:	200009a8 	.word	0x200009a8

000098cc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    98cc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    98ce:	4b01      	ldr	r3, [pc, #4]	; (98d4 <USB_0_Handler+0x8>)
    98d0:	4798      	blx	r3
    98d2:	bd08      	pop	{r3, pc}
    98d4:	00008c29 	.word	0x00008c29

000098d8 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    98d8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    98da:	4b01      	ldr	r3, [pc, #4]	; (98e0 <USB_1_Handler+0x8>)
    98dc:	4798      	blx	r3
    98de:	bd08      	pop	{r3, pc}
    98e0:	00008c29 	.word	0x00008c29

000098e4 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    98e4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    98e6:	4b01      	ldr	r3, [pc, #4]	; (98ec <USB_2_Handler+0x8>)
    98e8:	4798      	blx	r3
    98ea:	bd08      	pop	{r3, pc}
    98ec:	00008c29 	.word	0x00008c29

000098f0 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    98f0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    98f2:	4b01      	ldr	r3, [pc, #4]	; (98f8 <USB_3_Handler+0x8>)
    98f4:	4798      	blx	r3
    98f6:	bd08      	pop	{r3, pc}
    98f8:	00008c29 	.word	0x00008c29

000098fc <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    98fc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    98fe:	4604      	mov	r4, r0
    9900:	b340      	cbz	r0, 9954 <_wdt_init+0x58>
    9902:	6800      	ldr	r0, [r0, #0]
    9904:	3000      	adds	r0, #0
    9906:	bf18      	it	ne
    9908:	2001      	movne	r0, #1
    990a:	2250      	movs	r2, #80	; 0x50
    990c:	4915      	ldr	r1, [pc, #84]	; (9964 <_wdt_init+0x68>)
    990e:	4b16      	ldr	r3, [pc, #88]	; (9968 <_wdt_init+0x6c>)
    9910:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    9912:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9914:	689a      	ldr	r2, [r3, #8]
    9916:	f012 0f0e 	tst.w	r2, #14
    991a:	d1fb      	bne.n	9914 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    991c:	781a      	ldrb	r2, [r3, #0]
    991e:	09d2      	lsrs	r2, r2, #7
    9920:	d11a      	bne.n	9958 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9922:	689a      	ldr	r2, [r3, #8]
    9924:	f012 0f0e 	tst.w	r2, #14
    9928:	d1fb      	bne.n	9922 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    992a:	781a      	ldrb	r2, [r3, #0]
    992c:	f012 0f02 	tst.w	r2, #2
    9930:	d115      	bne.n	995e <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9932:	781a      	ldrb	r2, [r3, #0]
    9934:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9938:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    993a:	689a      	ldr	r2, [r3, #8]
    993c:	f012 0f0e 	tst.w	r2, #14
    9940:	d1fb      	bne.n	993a <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    9942:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9944:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    994a:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    994e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    9950:	2000      	movs	r0, #0
    9952:	bd10      	pop	{r4, pc}
    9954:	2000      	movs	r0, #0
    9956:	e7d8      	b.n	990a <_wdt_init+0xe>
		return ERR_DENIED;
    9958:	f06f 0010 	mvn.w	r0, #16
    995c:	bd10      	pop	{r4, pc}
    995e:	f06f 0010 	mvn.w	r0, #16
}
    9962:	bd10      	pop	{r4, pc}
    9964:	0000e160 	.word	0x0000e160
    9968:	00005e5d 	.word	0x00005e5d

0000996c <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    996c:	2201      	movs	r2, #1
    996e:	4b01      	ldr	r3, [pc, #4]	; (9974 <RTC_Scheduler_report_cb+0x8>)
    9970:	701a      	strb	r2, [r3, #0]
    9972:	4770      	bx	lr
    9974:	20000d68 	.word	0x20000d68

00009978 <RTC_Scheduler_heartbeat_cb>:
{
    9978:	b508      	push	{r3, lr}
	grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_HEARTBEAT);
    997a:	2100      	movs	r1, #0
    997c:	4801      	ldr	r0, [pc, #4]	; (9984 <RTC_Scheduler_heartbeat_cb+0xc>)
    997e:	4b02      	ldr	r3, [pc, #8]	; (9988 <RTC_Scheduler_heartbeat_cb+0x10>)
    9980:	4798      	blx	r3
    9982:	bd08      	pop	{r3, pc}
    9984:	20003300 	.word	0x20003300
    9988:	00004215 	.word	0x00004215

0000998c <RTC_Scheduler_ping_cb>:
{
    998c:	b508      	push	{r3, lr}
	pingflag++;
    998e:	4a11      	ldr	r2, [pc, #68]	; (99d4 <RTC_Scheduler_ping_cb+0x48>)
    9990:	7853      	ldrb	r3, [r2, #1]
    9992:	3301      	adds	r3, #1
    9994:	b2db      	uxtb	r3, r3
    9996:	7053      	strb	r3, [r2, #1]
	switch (pingflag%4)
    9998:	7853      	ldrb	r3, [r2, #1]
    999a:	f003 0303 	and.w	r3, r3, #3
    999e:	2b03      	cmp	r3, #3
    99a0:	d816      	bhi.n	99d0 <RTC_Scheduler_ping_cb+0x44>
    99a2:	e8df f003 	tbb	[pc, r3]
    99a6:	0702      	.short	0x0702
    99a8:	110c      	.short	0x110c
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_NORTH);
    99aa:	2101      	movs	r1, #1
    99ac:	480a      	ldr	r0, [pc, #40]	; (99d8 <RTC_Scheduler_ping_cb+0x4c>)
    99ae:	4b0b      	ldr	r3, [pc, #44]	; (99dc <RTC_Scheduler_ping_cb+0x50>)
    99b0:	4798      	blx	r3
			break;
    99b2:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_EAST);
    99b4:	2102      	movs	r1, #2
    99b6:	4808      	ldr	r0, [pc, #32]	; (99d8 <RTC_Scheduler_ping_cb+0x4c>)
    99b8:	4b08      	ldr	r3, [pc, #32]	; (99dc <RTC_Scheduler_ping_cb+0x50>)
    99ba:	4798      	blx	r3
			break;
    99bc:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_SOUTH);
    99be:	2103      	movs	r1, #3
    99c0:	4805      	ldr	r0, [pc, #20]	; (99d8 <RTC_Scheduler_ping_cb+0x4c>)
    99c2:	4b06      	ldr	r3, [pc, #24]	; (99dc <RTC_Scheduler_ping_cb+0x50>)
    99c4:	4798      	blx	r3
			break;
    99c6:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_WEST);
    99c8:	2104      	movs	r1, #4
    99ca:	4803      	ldr	r0, [pc, #12]	; (99d8 <RTC_Scheduler_ping_cb+0x4c>)
    99cc:	4b03      	ldr	r3, [pc, #12]	; (99dc <RTC_Scheduler_ping_cb+0x50>)
    99ce:	4798      	blx	r3
    99d0:	bd08      	pop	{r3, pc}
    99d2:	bf00      	nop
    99d4:	20000d68 	.word	0x20000d68
    99d8:	20003300 	.word	0x20003300
    99dc:	00004215 	.word	0x00004215

000099e0 <grid_task_timer_tick>:
void grid_task_timer_tick(struct grid_task_model* mod){
    99e0:	7843      	ldrb	r3, [r0, #1]
    99e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	mod->timer[mod->current_task]++;
    99e6:	6843      	ldr	r3, [r0, #4]
    99e8:	3301      	adds	r3, #1
    99ea:	6043      	str	r3, [r0, #4]
    99ec:	4770      	bx	lr
	...

000099f0 <RTC_Scheduler_realtime_cb>:
{
    99f0:	b510      	push	{r4, lr}
    99f2:	b082      	sub	sp, #8
	grid_sys_rtc_tick_time(&grid_sys_state);	
    99f4:	481b      	ldr	r0, [pc, #108]	; (9a64 <RTC_Scheduler_realtime_cb+0x74>)
    99f6:	4b1c      	ldr	r3, [pc, #112]	; (9a68 <RTC_Scheduler_realtime_cb+0x78>)
    99f8:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    99fa:	481c      	ldr	r0, [pc, #112]	; (9a6c <RTC_Scheduler_realtime_cb+0x7c>)
    99fc:	4b1c      	ldr	r3, [pc, #112]	; (9a70 <RTC_Scheduler_realtime_cb+0x80>)
    99fe:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    9a00:	a801      	add	r0, sp, #4
    9a02:	4b1c      	ldr	r3, [pc, #112]	; (9a74 <RTC_Scheduler_realtime_cb+0x84>)
    9a04:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9a06:	4b1c      	ldr	r3, [pc, #112]	; (9a78 <RTC_Scheduler_realtime_cb+0x88>)
    9a08:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9a0c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9a10:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9a14:	4054      	eors	r4, r2
    9a16:	400c      	ands	r4, r1
    9a18:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    9a1a:	a801      	add	r0, sp, #4
    9a1c:	4b17      	ldr	r3, [pc, #92]	; (9a7c <RTC_Scheduler_realtime_cb+0x8c>)
    9a1e:	4798      	blx	r3
	if (mapmode_value != mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0]){
    9a20:	4b17      	ldr	r3, [pc, #92]	; (9a80 <RTC_Scheduler_realtime_cb+0x90>)
    9a22:	685b      	ldr	r3, [r3, #4]
    9a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    9a26:	781a      	ldrb	r2, [r3, #0]
    9a28:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    9a2c:	4294      	cmp	r4, r2
    9a2e:	d002      	beq.n	9a36 <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] == 0){
    9a30:	b91a      	cbnz	r2, 9a3a <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 1;
    9a32:	2201      	movs	r2, #1
    9a34:	701a      	strb	r2, [r3, #0]
}
    9a36:	b002      	add	sp, #8
    9a38:	bd10      	pop	{r4, pc}
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 0;
    9a3a:	2200      	movs	r2, #0
    9a3c:	701a      	strb	r2, [r3, #0]
 			grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    9a3e:	4b09      	ldr	r3, [pc, #36]	; (9a64 <RTC_Scheduler_realtime_cb+0x74>)
    9a40:	7a5a      	ldrb	r2, [r3, #9]
    9a42:	3201      	adds	r2, #1
    9a44:	f002 0201 	and.w	r2, r2, #1
    9a48:	4c0d      	ldr	r4, [pc, #52]	; (9a80 <RTC_Scheduler_realtime_cb+0x90>)
    9a4a:	6863      	ldr	r3, [r4, #4]
    9a4c:	6d58      	ldr	r0, [r3, #84]	; 0x54
    9a4e:	bf48      	it	mi
    9a50:	4252      	negmi	r2, r2
    9a52:	2102      	movs	r1, #2
    9a54:	3007      	adds	r0, #7
    9a56:	4b0b      	ldr	r3, [pc, #44]	; (9a84 <RTC_Scheduler_realtime_cb+0x94>)
    9a58:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    9a5a:	2105      	movs	r1, #5
    9a5c:	4620      	mov	r0, r4
    9a5e:	4b0a      	ldr	r3, [pc, #40]	; (9a88 <RTC_Scheduler_realtime_cb+0x98>)
    9a60:	4798      	blx	r3
}
    9a62:	e7e8      	b.n	9a36 <RTC_Scheduler_realtime_cb+0x46>
    9a64:	20003310 	.word	0x20003310
    9a68:	00003a23 	.word	0x00003a23
    9a6c:	20007db8 	.word	0x20007db8
    9a70:	000099e1 	.word	0x000099e1
    9a74:	00004a69 	.word	0x00004a69
    9a78:	41008000 	.word	0x41008000
    9a7c:	00004a77 	.word	0x00004a77
    9a80:	20003300 	.word	0x20003300
    9a84:	00003b11 	.word	0x00003b11
    9a88:	00004215 	.word	0x00004215

00009a8c <grid_task_timer_reset>:
void grid_task_timer_reset(struct grid_task_model* mod){
    9a8c:	1d03      	adds	r3, r0, #4
    9a8e:	3024      	adds	r0, #36	; 0x24
		mod->timer[i] = 0;
    9a90:	2200      	movs	r2, #0
    9a92:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    9a96:	4283      	cmp	r3, r0
    9a98:	d1fb      	bne.n	9a92 <grid_task_timer_reset+0x6>
}
    9a9a:	4770      	bx	lr

00009a9c <grid_port_reset_receiver>:
void grid_port_reset_receiver(struct grid_port* por){
    9a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a9e:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    9aa0:	6880      	ldr	r0, [r0, #8]
    9aa2:	4b19      	ldr	r3, [pc, #100]	; (9b08 <grid_port_reset_receiver+0x6c>)
    9aa4:	4798      	blx	r3
	por->rx_double_buffer_seek_start_index = 0;
    9aa6:	2500      	movs	r5, #0
    9aa8:	62a5      	str	r5, [r4, #40]	; 0x28
	por->rx_double_buffer_read_start_index = 0;
    9aaa:	62e5      	str	r5, [r4, #44]	; 0x2c
	por->partner_status = 0;
    9aac:	f241 0307 	movw	r3, #4103	; 0x1007
    9ab0:	54e5      	strb	r5, [r4, r3]
	struct grid_ui_report* stored_report = por->ping_report;
    9ab2:	6866      	ldr	r6, [r4, #4]
	grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    9ab4:	6870      	ldr	r0, [r6, #4]
    9ab6:	22ff      	movs	r2, #255	; 0xff
    9ab8:	2102      	movs	r1, #2
    9aba:	3008      	adds	r0, #8
    9abc:	4f13      	ldr	r7, [pc, #76]	; (9b0c <grid_port_reset_receiver+0x70>)
    9abe:	47b8      	blx	r7
	grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    9ac0:	6870      	ldr	r0, [r6, #4]
    9ac2:	22ff      	movs	r2, #255	; 0xff
    9ac4:	2102      	movs	r1, #2
    9ac6:	3006      	adds	r0, #6
    9ac8:	47b8      	blx	r7
	grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    9aca:	6877      	ldr	r7, [r6, #4]
    9acc:	78b6      	ldrb	r6, [r6, #2]
    9ace:	4631      	mov	r1, r6
    9ad0:	4638      	mov	r0, r7
    9ad2:	4b0f      	ldr	r3, [pc, #60]	; (9b10 <grid_port_reset_receiver+0x74>)
    9ad4:	4798      	blx	r3
    9ad6:	4602      	mov	r2, r0
    9ad8:	4631      	mov	r1, r6
    9ada:	4638      	mov	r0, r7
    9adc:	4b0d      	ldr	r3, [pc, #52]	; (9b14 <grid_port_reset_receiver+0x78>)
    9ade:	4798      	blx	r3
	por->rx_double_buffer_timeout = 0;
    9ae0:	6225      	str	r5, [r4, #32]
	grid_sys_port_reset_dma(por);
    9ae2:	4620      	mov	r0, r4
    9ae4:	4b0c      	ldr	r3, [pc, #48]	; (9b18 <grid_port_reset_receiver+0x7c>)
    9ae6:	4798      	blx	r3
		por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    9ae8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9aea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    9aee:	3b01      	subs	r3, #1
    9af0:	b29b      	uxth	r3, r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    9af2:	2b00      	cmp	r3, #0
    9af4:	d1fb      	bne.n	9aee <grid_port_reset_receiver+0x52>
    9af6:	18a3      	adds	r3, r4, r2
    9af8:	2200      	movs	r2, #0
    9afa:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	usart_async_enable(por->usart);
    9afe:	68a0      	ldr	r0, [r4, #8]
    9b00:	4b06      	ldr	r3, [pc, #24]	; (9b1c <grid_port_reset_receiver+0x80>)
    9b02:	4798      	blx	r3
    9b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b06:	bf00      	nop
    9b08:	00005671 	.word	0x00005671
    9b0c:	00003b11 	.word	0x00003b11
    9b10:	00003d91 	.word	0x00003d91
    9b14:	00003dcd 	.word	0x00003dcd
    9b18:	00003741 	.word	0x00003741
    9b1c:	00005645 	.word	0x00005645

00009b20 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    9b20:	6a43      	ldr	r3, [r0, #36]	; 0x24
    9b22:	2b00      	cmp	r3, #0
    9b24:	f040 80a8 	bne.w	9c78 <grid_port_receive_task+0x158>
void grid_port_receive_task(struct grid_port* por){
    9b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b2c:	b082      	sub	sp, #8
    9b2e:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 1000){
    9b30:	6a03      	ldr	r3, [r0, #32]
    9b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    9b36:	d92c      	bls.n	9b92 <grid_port_receive_task+0x72>
		if (por->partner_status == 1){
    9b38:	f241 0307 	movw	r3, #4103	; 0x1007
    9b3c:	5cc3      	ldrb	r3, [r0, r3]
    9b3e:	2b01      	cmp	r3, #1
    9b40:	d015      	beq.n	9b6e <grid_port_receive_task+0x4e>
			if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    9b42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    9b44:	b90b      	cbnz	r3, 9b4a <grid_port_receive_task+0x2a>
    9b46:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9b48:	b32b      	cbz	r3, 9b96 <grid_port_receive_task+0x76>
				GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    9b4a:	494c      	ldr	r1, [pc, #304]	; (9c7c <grid_port_receive_task+0x15c>)
    9b4c:	484c      	ldr	r0, [pc, #304]	; (9c80 <grid_port_receive_task+0x160>)
    9b4e:	4b4d      	ldr	r3, [pc, #308]	; (9c84 <grid_port_receive_task+0x164>)
    9b50:	4798      	blx	r3
				grid_port_reset_receiver(por);
    9b52:	4620      	mov	r0, r4
    9b54:	4b4c      	ldr	r3, [pc, #304]	; (9c88 <grid_port_receive_task+0x168>)
    9b56:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9b58:	23c8      	movs	r3, #200	; 0xc8
    9b5a:	9301      	str	r3, [sp, #4]
    9b5c:	2302      	movs	r3, #2
    9b5e:	9300      	str	r3, [sp, #0]
    9b60:	23ff      	movs	r3, #255	; 0xff
    9b62:	461a      	mov	r2, r3
    9b64:	4619      	mov	r1, r3
    9b66:	4849      	ldr	r0, [pc, #292]	; (9c8c <grid_port_receive_task+0x16c>)
    9b68:	4d49      	ldr	r5, [pc, #292]	; (9c90 <grid_port_receive_task+0x170>)
    9b6a:	47a8      	blx	r5
    9b6c:	e013      	b.n	9b96 <grid_port_receive_task+0x76>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    9b6e:	4949      	ldr	r1, [pc, #292]	; (9c94 <grid_port_receive_task+0x174>)
    9b70:	4843      	ldr	r0, [pc, #268]	; (9c80 <grid_port_receive_task+0x160>)
    9b72:	4b44      	ldr	r3, [pc, #272]	; (9c84 <grid_port_receive_task+0x164>)
    9b74:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    9b76:	4620      	mov	r0, r4
    9b78:	4b43      	ldr	r3, [pc, #268]	; (9c88 <grid_port_receive_task+0x168>)
    9b7a:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9b7c:	23c8      	movs	r3, #200	; 0xc8
    9b7e:	9301      	str	r3, [sp, #4]
    9b80:	2302      	movs	r3, #2
    9b82:	9300      	str	r3, [sp, #0]
    9b84:	23ff      	movs	r3, #255	; 0xff
    9b86:	461a      	mov	r2, r3
    9b88:	4619      	mov	r1, r3
    9b8a:	4840      	ldr	r0, [pc, #256]	; (9c8c <grid_port_receive_task+0x16c>)
    9b8c:	4d40      	ldr	r5, [pc, #256]	; (9c90 <grid_port_receive_task+0x170>)
    9b8e:	47a8      	blx	r5
    9b90:	e001      	b.n	9b96 <grid_port_receive_task+0x76>
		por->rx_double_buffer_timeout++;
    9b92:	3301      	adds	r3, #1
    9b94:	6203      	str	r3, [r0, #32]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    9b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9b98:	18e2      	adds	r2, r4, r3
    9b9a:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    9b9e:	2a0a      	cmp	r2, #10
    9ba0:	d00f      	beq.n	9bc2 <grid_port_receive_task+0xa2>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9ba2:	b192      	cbz	r2, 9bca <grid_port_receive_task+0xaa>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    9ba4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9ba6:	1e51      	subs	r1, r2, #1
    9ba8:	428b      	cmp	r3, r1
    9baa:	d011      	beq.n	9bd0 <grid_port_receive_task+0xb0>
    9bac:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9bb0:	f240 7ecf 	movw	lr, #1999	; 0x7cf
			por->rx_double_buffer_timeout = 0;
    9bb4:	2500      	movs	r5, #0
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9bb6:	4f38      	ldr	r7, [pc, #224]	; (9c98 <grid_port_receive_task+0x178>)
    9bb8:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9bbc:	f240 7cce 	movw	ip, #1998	; 0x7ce
    9bc0:	e030      	b.n	9c24 <grid_port_receive_task+0x104>
			por->rx_double_buffer_status = 1;
    9bc2:	2301      	movs	r3, #1
    9bc4:	6263      	str	r3, [r4, #36]	; 0x24
			por->rx_double_buffer_timeout = 0;
    9bc6:	2300      	movs	r3, #0
    9bc8:	6223      	str	r3, [r4, #32]
}
    9bca:	b002      	add	sp, #8
    9bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9bd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9bd4:	4b31      	ldr	r3, [pc, #196]	; (9c9c <grid_port_receive_task+0x17c>)
    9bd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			GRID_DEBUG_TRAP(GRID_DEBUG_CONTEXT_TRAP, "{\"type\":\"TRAP\", \"data\": [\"rx_double_buffer overrun\"]}\r\n");
    9bda:	4e31      	ldr	r6, [pc, #196]	; (9ca0 <grid_port_receive_task+0x180>)
    9bdc:	4d31      	ldr	r5, [pc, #196]	; (9ca4 <grid_port_receive_task+0x184>)
    9bde:	4c32      	ldr	r4, [pc, #200]	; (9ca8 <grid_port_receive_task+0x188>)
    9be0:	4630      	mov	r0, r6
    9be2:	47a8      	blx	r5
    9be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9be8:	47a0      	blx	r4
    9bea:	e7f9      	b.n	9be0 <grid_port_receive_task+0xc0>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9bec:	b36a      	cbz	r2, 9c4a <grid_port_receive_task+0x12a>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9bee:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    9bf2:	fba7 1302 	umull	r1, r3, r7, r2
    9bf6:	09db      	lsrs	r3, r3, #7
    9bf8:	fb06 2213 	mls	r2, r6, r3, r2
    9bfc:	18a3      	adds	r3, r4, r2
    9bfe:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
    9c02:	bb83      	cbnz	r3, 9c66 <grid_port_receive_task+0x146>
			por->rx_double_buffer_timeout = 0;
    9c04:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    9c06:	62a5      	str	r5, [r4, #40]	; 0x28
	for(uint32_t i = 0; i<490; i++){
    9c08:	3801      	subs	r0, #1
    9c0a:	d0de      	beq.n	9bca <grid_port_receive_task+0xaa>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    9c0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9c0e:	18e2      	adds	r2, r4, r3
    9c10:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    9c14:	2a0a      	cmp	r2, #10
    9c16:	d0d4      	beq.n	9bc2 <grid_port_receive_task+0xa2>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9c18:	2a00      	cmp	r2, #0
    9c1a:	d0d6      	beq.n	9bca <grid_port_receive_task+0xaa>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    9c1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9c1e:	1e51      	subs	r1, r2, #1
    9c20:	428b      	cmp	r3, r1
    9c22:	d0d5      	beq.n	9bd0 <grid_port_receive_task+0xb0>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9c24:	4573      	cmp	r3, lr
    9c26:	d0e1      	beq.n	9bec <grid_port_receive_task+0xcc>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9c28:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    9c2c:	fba7 8102 	umull	r8, r1, r7, r2
    9c30:	09c9      	lsrs	r1, r1, #7
    9c32:	fb06 2211 	mls	r2, r6, r1, r2
    9c36:	4422      	add	r2, r4
    9c38:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    9c3c:	b99a      	cbnz	r2, 9c66 <grid_port_receive_task+0x146>
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9c3e:	4563      	cmp	r3, ip
    9c40:	d8e0      	bhi.n	9c04 <grid_port_receive_task+0xe4>
			por->rx_double_buffer_timeout = 0;
    9c42:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index++;			
    9c44:	3301      	adds	r3, #1
    9c46:	62a3      	str	r3, [r4, #40]	; 0x28
    9c48:	e7de      	b.n	9c08 <grid_port_receive_task+0xe8>
    9c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9c4e:	4b13      	ldr	r3, [pc, #76]	; (9c9c <grid_port_receive_task+0x17c>)
    9c50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			GRID_DEBUG_TRAP(GRID_DEBUG_CONTEXT_TRAP, "{\"type\":\"TRAP\", \"data\": [\"rx_double_buffer overrun\"]}\r\n");
    9c54:	4e12      	ldr	r6, [pc, #72]	; (9ca0 <grid_port_receive_task+0x180>)
    9c56:	4d13      	ldr	r5, [pc, #76]	; (9ca4 <grid_port_receive_task+0x184>)
    9c58:	4c13      	ldr	r4, [pc, #76]	; (9ca8 <grid_port_receive_task+0x188>)
    9c5a:	4630      	mov	r0, r6
    9c5c:	47a8      	blx	r5
    9c5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9c62:	47a0      	blx	r4
    9c64:	e7f9      	b.n	9c5a <grid_port_receive_task+0x13a>
			GRID_DEBUG_TRAP(GRID_DEBUG_CONTEXT_WARNING, "{\"type\":\"WARNING\", \"data\": [\"rx_double_buffer overrun\"]}\r\n");
    9c66:	4e11      	ldr	r6, [pc, #68]	; (9cac <grid_port_receive_task+0x18c>)
    9c68:	4d0e      	ldr	r5, [pc, #56]	; (9ca4 <grid_port_receive_task+0x184>)
    9c6a:	4c0f      	ldr	r4, [pc, #60]	; (9ca8 <grid_port_receive_task+0x188>)
    9c6c:	4630      	mov	r0, r6
    9c6e:	47a8      	blx	r5
    9c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9c74:	47a0      	blx	r4
    9c76:	e7f9      	b.n	9c6c <grid_port_receive_task+0x14c>
    9c78:	4770      	bx	lr
    9c7a:	bf00      	nop
    9c7c:	0000e1c4 	.word	0x0000e1c4
    9c80:	0000e19c 	.word	0x0000e19c
    9c84:	0000c5d1 	.word	0x0000c5d1
    9c88:	00009a9d 	.word	0x00009a9d
    9c8c:	20003310 	.word	0x20003310
    9c90:	00003a7d 	.word	0x00003a7d
    9c94:	0000e178 	.word	0x0000e178
    9c98:	10624dd3 	.word	0x10624dd3
    9c9c:	41008000 	.word	0x41008000
    9ca0:	0000e1e0 	.word	0x0000e1e0
    9ca4:	0000c6b9 	.word	0x0000c6b9
    9ca8:	00004ae9 	.word	0x00004ae9
    9cac:	0000e218 	.word	0x0000e218

00009cb0 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t len){
    9cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cb4:	b087      	sub	sp, #28
    9cb6:	af02      	add	r7, sp, #8
    9cb8:	4606      	mov	r6, r0
    9cba:	4690      	mov	r8, r2
	uint8_t buffer[length];			
    9cbc:	1dd3      	adds	r3, r2, #7
    9cbe:	f023 0307 	bic.w	r3, r3, #7
    9cc2:	ebad 0d03 	sub.w	sp, sp, r3
    9cc6:	ad02      	add	r5, sp, #8
	for (uint32_t i = 0; i<length; i++){
    9cc8:	2a00      	cmp	r2, #0
    9cca:	f000 8239 	beq.w	a140 <grid_port_receive_decode+0x490>
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9cce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    9cd0:	eb05 0908 	add.w	r9, r5, r8
    9cd4:	4629      	mov	r1, r5
    9cd6:	eba2 0c05 	sub.w	ip, r2, r5
    9cda:	f8df e2ec 	ldr.w	lr, [pc, #748]	; 9fc8 <grid_port_receive_decode+0x318>
    9cde:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    9ce2:	2000      	movs	r0, #0
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9ce4:	eb0c 0a01 	add.w	sl, ip, r1
    9ce8:	fbae b30a 	umull	fp, r3, lr, sl
    9cec:	09db      	lsrs	r3, r3, #7
    9cee:	fb04 a313 	mls	r3, r4, r3, sl
    9cf2:	4433      	add	r3, r6
    9cf4:	f893 a800 	ldrb.w	sl, [r3, #2048]	; 0x800
    9cf8:	f801 ab01 	strb.w	sl, [r1], #1
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    9cfc:	f883 0800 	strb.w	r0, [r3, #2048]	; 0x800
	for (uint32_t i = 0; i<length; i++){
    9d00:	4549      	cmp	r1, r9
    9d02:	d1ef      	bne.n	9ce4 <grid_port_receive_decode+0x34>
	message = &buffer[0];
    9d04:	46aa      	mov	sl, r5
    9d06:	eb08 0e02 	add.w	lr, r8, r2
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    9d0a:	4caf      	ldr	r4, [pc, #700]	; (9fc8 <grid_port_receive_decode+0x318>)
    9d0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    9d10:	2100      	movs	r1, #0
    9d12:	fba4 c302 	umull	ip, r3, r4, r2
    9d16:	09db      	lsrs	r3, r3, #7
    9d18:	fb00 2313 	mls	r3, r0, r3, r2
    9d1c:	4433      	add	r3, r6
    9d1e:	f883 1800 	strb.w	r1, [r3, #2048]	; 0x800
    9d22:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    9d24:	4572      	cmp	r2, lr
    9d26:	d1f4      	bne.n	9d12 <grid_port_receive_decode+0x62>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    9d28:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    9d2a:	4442      	add	r2, r8
    9d2c:	4ba6      	ldr	r3, [pc, #664]	; (9fc8 <grid_port_receive_decode+0x318>)
    9d2e:	fba3 1302 	umull	r1, r3, r3, r2
    9d32:	09db      	lsrs	r3, r3, #7
    9d34:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    9d38:	fb01 2313 	mls	r3, r1, r3, r2
    9d3c:	62f3      	str	r3, [r6, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    9d3e:	62b3      	str	r3, [r6, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    9d40:	2300      	movs	r3, #0
    9d42:	6273      	str	r3, [r6, #36]	; 0x24
 	for (uint32_t i = 1; i<length; i++){
    9d44:	f1b8 0f01 	cmp.w	r8, #1
    9d48:	f240 8209 	bls.w	a15e <grid_port_receive_decode+0x4ae>
    9d4c:	2401      	movs	r4, #1
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    9d4e:	f8df b2e0 	ldr.w	fp, [pc, #736]	; a030 <grid_port_receive_decode+0x380>
    9d52:	f8df 929c 	ldr.w	r9, [pc, #668]	; 9ff0 <grid_port_receive_decode+0x340>
    9d56:	e003      	b.n	9d60 <grid_port_receive_decode+0xb0>
 	for (uint32_t i = 1; i<length; i++){
    9d58:	3401      	adds	r4, #1
    9d5a:	45a0      	cmp	r8, r4
    9d5c:	f240 81ff 	bls.w	a15e <grid_port_receive_decode+0x4ae>
 		if (buffer[i] == GRID_MSG_START_OF_HEADING){
    9d60:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    9d64:	2b01      	cmp	r3, #1
    9d66:	d1f7      	bne.n	9d58 <grid_port_receive_decode+0xa8>
 			length -= i;
    9d68:	eba8 0804 	sub.w	r8, r8, r4
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    9d6c:	4659      	mov	r1, fp
    9d6e:	4897      	ldr	r0, [pc, #604]	; (9fcc <grid_port_receive_decode+0x31c>)
    9d70:	47c8      	blx	r9
 			message = &buffer[i];
    9d72:	46aa      	mov	sl, r5
    9d74:	e7f0      	b.n	9d58 <grid_port_receive_decode+0xa8>
	if (message[0] == 1 && message [length-1] == 10){
    9d76:	eb0a 0308 	add.w	r3, sl, r8
    9d7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9d7e:	2b0a      	cmp	r3, #10
    9d80:	f040 81f2 	bne.w	a168 <grid_port_receive_decode+0x4b8>
		checksum_received = grid_msg_checksum_read(message, length);
    9d84:	4641      	mov	r1, r8
    9d86:	4650      	mov	r0, sl
    9d88:	4b91      	ldr	r3, [pc, #580]	; (9fd0 <grid_port_receive_decode+0x320>)
    9d8a:	4798      	blx	r3
    9d8c:	4604      	mov	r4, r0
		checksum_calculated = grid_msg_checksum_calculate(message, length);
    9d8e:	4641      	mov	r1, r8
    9d90:	4650      	mov	r0, sl
    9d92:	4b90      	ldr	r3, [pc, #576]	; (9fd4 <grid_port_receive_decode+0x324>)
    9d94:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    9d96:	4284      	cmp	r4, r0
    9d98:	f040 81c4 	bne.w	a124 <grid_port_receive_decode+0x474>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9d9c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    9da0:	2b0f      	cmp	r3, #15
    9da2:	f000 808b 	beq.w	9ebc <grid_port_receive_decode+0x20c>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    9da6:	2b0e      	cmp	r3, #14
    9da8:	f040 81ae 	bne.w	a108 <grid_port_receive_decode+0x458>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    9dac:	f89a 3002 	ldrb.w	r3, [sl, #2]
    9db0:	2b07      	cmp	r3, #7
    9db2:	f040 81e6 	bne.w	a182 <grid_port_receive_decode+0x4d2>
					struct grid_ui_report* stored_report = por->ping_report;
    9db6:	6874      	ldr	r4, [r6, #4]
					local_stored = grid_sys_read_hex_string_value(&stored_report->payload[6], 2, error_flag);
    9db8:	6860      	ldr	r0, [r4, #4]
    9dba:	2200      	movs	r2, #0
    9dbc:	2102      	movs	r1, #2
    9dbe:	3006      	adds	r0, #6
    9dc0:	f8df 921c 	ldr.w	r9, [pc, #540]	; 9fe0 <grid_port_receive_decode+0x330>
    9dc4:	47c8      	blx	r9
    9dc6:	b2c5      	uxtb	r5, r0
					remote_stored = grid_sys_read_hex_string_value(&stored_report->payload[8], 2, error_flag);
    9dc8:	6860      	ldr	r0, [r4, #4]
    9dca:	2200      	movs	r2, #0
    9dcc:	2102      	movs	r1, #2
    9dce:	3008      	adds	r0, #8
    9dd0:	47c8      	blx	r9
    9dd2:	b2c3      	uxtb	r3, r0
    9dd4:	60fb      	str	r3, [r7, #12]
					local_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    9dd6:	2200      	movs	r2, #0
    9dd8:	2102      	movs	r1, #2
    9dda:	f10a 0008 	add.w	r0, sl, #8
    9dde:	47c8      	blx	r9
    9de0:	fa5f fb80 	uxtb.w	fp, r0
					remote_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    9de4:	2200      	movs	r2, #0
    9de6:	2102      	movs	r1, #2
    9de8:	f10a 0006 	add.w	r0, sl, #6
    9dec:	47c8      	blx	r9
    9dee:	60b8      	str	r0, [r7, #8]
    9df0:	fa5f f980 	uxtb.w	r9, r0
					if (por->partner_status == 0){
    9df4:	f241 0307 	movw	r3, #4103	; 0x1007
    9df8:	5cf3      	ldrb	r3, [r6, r3]
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	f040 8135 	bne.w	a06a <grid_port_receive_decode+0x3ba>
						if (local_stored == 255){ // I have no clue				
    9e00:	2dff      	cmp	r5, #255	; 0xff
    9e02:	f000 8119 	beq.w	a038 <grid_port_receive_decode+0x388>
						if (remote_received != remote_stored){
    9e06:	68fb      	ldr	r3, [r7, #12]
    9e08:	454b      	cmp	r3, r9
    9e0a:	d011      	beq.n	9e30 <grid_port_receive_decode+0x180>
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, remote_received);
    9e0c:	6860      	ldr	r0, [r4, #4]
    9e0e:	7a3a      	ldrb	r2, [r7, #8]
    9e10:	2102      	movs	r1, #2
    9e12:	3008      	adds	r0, #8
    9e14:	4b70      	ldr	r3, [pc, #448]	; (9fd8 <grid_port_receive_decode+0x328>)
    9e16:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    9e18:	f8d4 9004 	ldr.w	r9, [r4, #4]
    9e1c:	78a4      	ldrb	r4, [r4, #2]
    9e1e:	4621      	mov	r1, r4
    9e20:	4648      	mov	r0, r9
    9e22:	4b6c      	ldr	r3, [pc, #432]	; (9fd4 <grid_port_receive_decode+0x324>)
    9e24:	4798      	blx	r3
    9e26:	4602      	mov	r2, r0
    9e28:	4621      	mov	r1, r4
    9e2a:	4648      	mov	r0, r9
    9e2c:	4b6b      	ldr	r3, [pc, #428]	; (9fdc <grid_port_receive_decode+0x32c>)
    9e2e:	4798      	blx	r3
						if (local_stored != local_received){
    9e30:	455d      	cmp	r5, fp
    9e32:	f040 81a6 	bne.w	a182 <grid_port_receive_decode+0x4d2>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    9e36:	f89a 3003 	ldrb.w	r3, [sl, #3]
    9e3a:	7b72      	ldrb	r2, [r6, #13]
    9e3c:	1a9b      	subs	r3, r3, r2
    9e3e:	3306      	adds	r3, #6
    9e40:	425a      	negs	r2, r3
    9e42:	f003 0303 	and.w	r3, r3, #3
    9e46:	f002 0203 	and.w	r2, r2, #3
    9e4a:	bf58      	it	pl
    9e4c:	4253      	negpl	r3, r2
    9e4e:	f241 0204 	movw	r2, #4100	; 0x1004
    9e52:	54b3      	strb	r3, [r6, r2]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    9e54:	f1a8 000a 	sub.w	r0, r8, #10
    9e58:	2200      	movs	r2, #0
    9e5a:	2102      	movs	r1, #2
    9e5c:	4450      	add	r0, sl
    9e5e:	4b60      	ldr	r3, [pc, #384]	; (9fe0 <grid_port_receive_decode+0x330>)
    9e60:	4798      	blx	r3
    9e62:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
    9e66:	6018      	str	r0, [r3, #0]
							por->partner_status = 1;
    9e68:	2201      	movs	r2, #1
    9e6a:	f241 0307 	movw	r3, #4103	; 0x1007
    9e6e:	54f2      	strb	r2, [r6, r3]
							grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    9e70:	4c5c      	ldr	r4, [pc, #368]	; (9fe4 <grid_port_receive_decode+0x334>)
    9e72:	4620      	mov	r0, r4
    9e74:	4b5c      	ldr	r3, [pc, #368]	; (9fe8 <grid_port_receive_decode+0x338>)
    9e76:	4798      	blx	r3
    9e78:	b2c0      	uxtb	r0, r0
    9e7a:	7020      	strb	r0, [r4, #0]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    9e7c:	495b      	ldr	r1, [pc, #364]	; (9fec <grid_port_receive_decode+0x33c>)
    9e7e:	4853      	ldr	r0, [pc, #332]	; (9fcc <grid_port_receive_decode+0x31c>)
    9e80:	4b5b      	ldr	r3, [pc, #364]	; (9ff0 <grid_port_receive_decode+0x340>)
    9e82:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    9e84:	23c8      	movs	r3, #200	; 0xc8
    9e86:	9301      	str	r3, [sp, #4]
    9e88:	2302      	movs	r3, #2
    9e8a:	9300      	str	r3, [sp, #0]
    9e8c:	2300      	movs	r3, #0
    9e8e:	22ff      	movs	r2, #255	; 0xff
    9e90:	4619      	mov	r1, r3
    9e92:	4620      	mov	r0, r4
    9e94:	4d57      	ldr	r5, [pc, #348]	; (9ff4 <grid_port_receive_decode+0x344>)
    9e96:	47a8      	blx	r5
							if (grid_sys_state.bank_select!=255){
    9e98:	7a63      	ldrb	r3, [r4, #9]
    9e9a:	b2db      	uxtb	r3, r3
    9e9c:	2bff      	cmp	r3, #255	; 0xff
    9e9e:	f000 8170 	beq.w	a182 <grid_port_receive_decode+0x4d2>
								grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    9ea2:	7a62      	ldrb	r2, [r4, #9]
    9ea4:	4c54      	ldr	r4, [pc, #336]	; (9ff8 <grid_port_receive_decode+0x348>)
    9ea6:	6863      	ldr	r3, [r4, #4]
    9ea8:	6d58      	ldr	r0, [r3, #84]	; 0x54
    9eaa:	2102      	movs	r1, #2
    9eac:	3007      	adds	r0, #7
    9eae:	4b4a      	ldr	r3, [pc, #296]	; (9fd8 <grid_port_receive_decode+0x328>)
    9eb0:	4798      	blx	r3
								grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    9eb2:	2105      	movs	r1, #5
    9eb4:	4620      	mov	r0, r4
    9eb6:	4b51      	ldr	r3, [pc, #324]	; (9ffc <grid_port_receive_decode+0x34c>)
    9eb8:	4798      	blx	r3
    9eba:	e162      	b.n	a182 <grid_port_receive_decode+0x4d2>
				uint8_t received_id  = grid_msg_get_id(message);;			
    9ebc:	4650      	mov	r0, sl
    9ebe:	4b50      	ldr	r3, [pc, #320]	; (a000 <grid_port_receive_decode+0x350>)
    9ec0:	4798      	blx	r3
    9ec2:	4683      	mov	fp, r0
				uint8_t received_age = grid_msg_get_age(message);
    9ec4:	4650      	mov	r0, sl
    9ec6:	4b4f      	ldr	r3, [pc, #316]	; (a004 <grid_port_receive_decode+0x354>)
    9ec8:	4798      	blx	r3
    9eca:	4681      	mov	r9, r0
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    9ecc:	4650      	mov	r0, sl
    9ece:	4b4e      	ldr	r3, [pc, #312]	; (a008 <grid_port_receive_decode+0x358>)
    9ed0:	4798      	blx	r3
    9ed2:	4605      	mov	r5, r0
    9ed4:	f1a0 047f 	sub.w	r4, r0, #127	; 0x7f
    9ed8:	b264      	sxtb	r4, r4
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    9eda:	4650      	mov	r0, sl
    9edc:	4b4b      	ldr	r3, [pc, #300]	; (a00c <grid_port_receive_decode+0x35c>)
    9ede:	4798      	blx	r3
    9ee0:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    9ee4:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    9ee6:	f241 0204 	movw	r2, #4100	; 0x1004
    9eea:	5cb2      	ldrb	r2, [r6, r2]
    9eec:	b12a      	cbz	r2, 9efa <grid_port_receive_decode+0x24a>
				else if(por->partner_fi == 1){ // 90 deg
    9eee:	2a01      	cmp	r2, #1
    9ef0:	d157      	bne.n	9fa2 <grid_port_receive_decode+0x2f2>
					rotated_dx  -= received_dy;
    9ef2:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    9ef6:	4623      	mov	r3, r4
					rotated_dx  -= received_dy;
    9ef8:	b244      	sxtb	r4, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    9efa:	f241 0205 	movw	r2, #4101	; 0x1005
    9efe:	5cb5      	ldrb	r5, [r6, r2]
    9f00:	357f      	adds	r5, #127	; 0x7f
    9f02:	442c      	add	r4, r5
    9f04:	b2e5      	uxtb	r5, r4
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    9f06:	f241 0206 	movw	r2, #4102	; 0x1006
    9f0a:	5cb4      	ldrb	r4, [r6, r2]
    9f0c:	347f      	adds	r4, #127	; 0x7f
    9f0e:	441c      	add	r4, r3
    9f10:	b2e4      	uxtb	r4, r4
				grid_msg_set_id(message, updated_id);
    9f12:	4659      	mov	r1, fp
    9f14:	4650      	mov	r0, sl
    9f16:	4b3e      	ldr	r3, [pc, #248]	; (a010 <grid_port_receive_decode+0x360>)
    9f18:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    9f1a:	4629      	mov	r1, r5
    9f1c:	4650      	mov	r0, sl
    9f1e:	4b3d      	ldr	r3, [pc, #244]	; (a014 <grid_port_receive_decode+0x364>)
    9f20:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    9f22:	4621      	mov	r1, r4
    9f24:	4650      	mov	r0, sl
    9f26:	4b3c      	ldr	r3, [pc, #240]	; (a018 <grid_port_receive_decode+0x368>)
    9f28:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    9f2a:	4649      	mov	r1, r9
    9f2c:	4650      	mov	r0, sl
    9f2e:	4b3b      	ldr	r3, [pc, #236]	; (a01c <grid_port_receive_decode+0x36c>)
    9f30:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    9f32:	eb05 250b 	add.w	r5, r5, fp, lsl #8
    9f36:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    9f3a:	eb09 2404 	add.w	r4, r9, r4, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    9f3e:	4621      	mov	r1, r4
    9f40:	4828      	ldr	r0, [pc, #160]	; (9fe4 <grid_port_receive_decode+0x334>)
    9f42:	4b37      	ldr	r3, [pc, #220]	; (a020 <grid_port_receive_decode+0x370>)
    9f44:	4798      	blx	r3
    9f46:	2800      	cmp	r0, #0
    9f48:	f040 811b 	bne.w	a182 <grid_port_receive_decode+0x4d2>
					grid_msg_checksum_write(message, length, grid_msg_checksum_calculate(message, length));
    9f4c:	4641      	mov	r1, r8
    9f4e:	4650      	mov	r0, sl
    9f50:	4b20      	ldr	r3, [pc, #128]	; (9fd4 <grid_port_receive_decode+0x324>)
    9f52:	4798      	blx	r3
    9f54:	4602      	mov	r2, r0
    9f56:	4641      	mov	r1, r8
    9f58:	4650      	mov	r0, sl
    9f5a:	4b20      	ldr	r3, [pc, #128]	; (9fdc <grid_port_receive_decode+0x32c>)
    9f5c:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    9f5e:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
    9f62:	fa1f f188 	uxth.w	r1, r8
    9f66:	4630      	mov	r0, r6
    9f68:	4b2e      	ldr	r3, [pc, #184]	; (a024 <grid_port_receive_decode+0x374>)
    9f6a:	4798      	blx	r3
    9f6c:	2800      	cmp	r0, #0
    9f6e:	f000 8108 	beq.w	a182 <grid_port_receive_decode+0x4d2>
						for (uint8_t i=0; i<length; i++){
    9f72:	f1b8 0f00 	cmp.w	r8, #0
    9f76:	d00c      	beq.n	9f92 <grid_port_receive_decode+0x2e2>
    9f78:	2300      	movs	r3, #0
    9f7a:	461d      	mov	r5, r3
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    9f7c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a034 <grid_port_receive_decode+0x384>
    9f80:	f81a 1003 	ldrb.w	r1, [sl, r3]
    9f84:	4630      	mov	r0, r6
    9f86:	47c8      	blx	r9
						for (uint8_t i=0; i<length; i++){
    9f88:	3501      	adds	r5, #1
    9f8a:	b2ed      	uxtb	r5, r5
    9f8c:	462b      	mov	r3, r5
    9f8e:	4545      	cmp	r5, r8
    9f90:	d3f6      	bcc.n	9f80 <grid_port_receive_decode+0x2d0>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    9f92:	4630      	mov	r0, r6
    9f94:	4b24      	ldr	r3, [pc, #144]	; (a028 <grid_port_receive_decode+0x378>)
    9f96:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);										
    9f98:	4621      	mov	r1, r4
    9f9a:	4812      	ldr	r0, [pc, #72]	; (9fe4 <grid_port_receive_decode+0x334>)
    9f9c:	4b23      	ldr	r3, [pc, #140]	; (a02c <grid_port_receive_decode+0x37c>)
    9f9e:	4798      	blx	r3
    9fa0:	e0ef      	b.n	a182 <grid_port_receive_decode+0x4d2>
				else if(por->partner_fi == 2){ // 180 deg
    9fa2:	2a02      	cmp	r2, #2
    9fa4:	d106      	bne.n	9fb4 <grid_port_receive_decode+0x304>
					rotated_dx  -= received_dx;
    9fa6:	f1c5 047f 	rsb	r4, r5, #127	; 0x7f
    9faa:	b264      	sxtb	r4, r4
					rotated_dy  -= received_dy;
    9fac:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
    9fb0:	b243      	sxtb	r3, r0
    9fb2:	e7a2      	b.n	9efa <grid_port_receive_decode+0x24a>
				else if(por->partner_fi == 3){ // 270 deg
    9fb4:	2a03      	cmp	r2, #3
    9fb6:	d002      	beq.n	9fbe <grid_port_receive_decode+0x30e>
				int8_t rotated_dy = 0;
    9fb8:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    9fba:	461c      	mov	r4, r3
    9fbc:	e79d      	b.n	9efa <grid_port_receive_decode+0x24a>
					rotated_dy  -= received_dx;
    9fbe:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
					rotated_dx  += received_dy;
    9fc2:	461c      	mov	r4, r3
					rotated_dy  -= received_dx;
    9fc4:	b26b      	sxtb	r3, r5
    9fc6:	e798      	b.n	9efa <grid_port_receive_decode+0x24a>
    9fc8:	10624dd3 	.word	0x10624dd3
    9fcc:	0000e19c 	.word	0x0000e19c
    9fd0:	00003dad 	.word	0x00003dad
    9fd4:	00003d91 	.word	0x00003d91
    9fd8:	00003b11 	.word	0x00003b11
    9fdc:	00003dcd 	.word	0x00003dcd
    9fe0:	00003ad1 	.word	0x00003ad1
    9fe4:	20003310 	.word	0x20003310
    9fe8:	00003a19 	.word	0x00003a19
    9fec:	0000e268 	.word	0x0000e268
    9ff0:	0000c5d1 	.word	0x0000c5d1
    9ff4:	00003a7d 	.word	0x00003a7d
    9ff8:	20003300 	.word	0x20003300
    9ffc:	00004215 	.word	0x00004215
    a000:	00003de1 	.word	0x00003de1
    a004:	00003e41 	.word	0x00003e41
    a008:	00003e01 	.word	0x00003e01
    a00c:	00003e21 	.word	0x00003e21
    a010:	00003e61 	.word	0x00003e61
    a014:	00003e75 	.word	0x00003e75
    a018:	00003e89 	.word	0x00003e89
    a01c:	00003e9d 	.word	0x00003e9d
    a020:	00003eb1 	.word	0x00003eb1
    a024:	00001375 	.word	0x00001375
    a028:	000013c1 	.word	0x000013c1
    a02c:	00003edb 	.word	0x00003edb
    a030:	0000e254 	.word	0x0000e254
    a034:	000013a5 	.word	0x000013a5
							uint8_t new_local = grid_sys_rtc_get_time(&grid_sys_state)%128;
    a038:	4854      	ldr	r0, [pc, #336]	; (a18c <grid_port_receive_decode+0x4dc>)
    a03a:	4b55      	ldr	r3, [pc, #340]	; (a190 <grid_port_receive_decode+0x4e0>)
    a03c:	4798      	blx	r3
    a03e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, new_local);
    a042:	6860      	ldr	r0, [r4, #4]
    a044:	462a      	mov	r2, r5
    a046:	2102      	movs	r1, #2
    a048:	3006      	adds	r0, #6
    a04a:	4b52      	ldr	r3, [pc, #328]	; (a194 <grid_port_receive_decode+0x4e4>)
    a04c:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    a04e:	6863      	ldr	r3, [r4, #4]
    a050:	78a2      	ldrb	r2, [r4, #2]
    a052:	603a      	str	r2, [r7, #0]
    a054:	4611      	mov	r1, r2
    a056:	607b      	str	r3, [r7, #4]
    a058:	4618      	mov	r0, r3
    a05a:	4b4f      	ldr	r3, [pc, #316]	; (a198 <grid_port_receive_decode+0x4e8>)
    a05c:	4798      	blx	r3
    a05e:	4602      	mov	r2, r0
    a060:	6839      	ldr	r1, [r7, #0]
    a062:	6878      	ldr	r0, [r7, #4]
    a064:	4b4d      	ldr	r3, [pc, #308]	; (a19c <grid_port_receive_decode+0x4ec>)
    a066:	4798      	blx	r3
    a068:	e6cd      	b.n	9e06 <grid_port_receive_decode+0x156>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    a06a:	f89a 3003 	ldrb.w	r3, [sl, #3]
    a06e:	7b72      	ldrb	r2, [r6, #13]
    a070:	1a9b      	subs	r3, r3, r2
    a072:	3306      	adds	r3, #6
    a074:	425a      	negs	r2, r3
    a076:	f003 0303 	and.w	r3, r3, #3
    a07a:	f002 0203 	and.w	r2, r2, #3
    a07e:	bf58      	it	pl
    a080:	4253      	negpl	r3, r2
    a082:	f241 0204 	movw	r2, #4100	; 0x1004
    a086:	5cb2      	ldrb	r2, [r6, r2]
    a088:	68f9      	ldr	r1, [r7, #12]
    a08a:	455d      	cmp	r5, fp
    a08c:	bf08      	it	eq
    a08e:	4549      	cmpeq	r1, r9
    a090:	bf0c      	ite	eq
    a092:	2501      	moveq	r5, #1
    a094:	2500      	movne	r5, #0
    a096:	4293      	cmp	r3, r2
    a098:	bf14      	ite	ne
    a09a:	2500      	movne	r5, #0
    a09c:	f005 0501 	andeq.w	r5, r5, #1
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    a0a0:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
    a0a4:	f8d3 9000 	ldr.w	r9, [r3]
    a0a8:	f1a8 000a 	sub.w	r0, r8, #10
    a0ac:	2200      	movs	r2, #0
    a0ae:	2102      	movs	r1, #2
    a0b0:	4450      	add	r0, sl
    a0b2:	4b3b      	ldr	r3, [pc, #236]	; (a1a0 <grid_port_receive_decode+0x4f0>)
    a0b4:	4798      	blx	r3
						if (validator == 1){
    a0b6:	4548      	cmp	r0, r9
    a0b8:	d101      	bne.n	a0be <grid_port_receive_decode+0x40e>
    a0ba:	2d00      	cmp	r5, #0
    a0bc:	d161      	bne.n	a182 <grid_port_receive_decode+0x4d2>
							por->partner_status = 0;
    a0be:	2200      	movs	r2, #0
    a0c0:	f241 0307 	movw	r3, #4103	; 0x1007
    a0c4:	54f2      	strb	r2, [r6, r3]
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    a0c6:	6860      	ldr	r0, [r4, #4]
    a0c8:	22ff      	movs	r2, #255	; 0xff
    a0ca:	2102      	movs	r1, #2
    a0cc:	3008      	adds	r0, #8
    a0ce:	4d31      	ldr	r5, [pc, #196]	; (a194 <grid_port_receive_decode+0x4e4>)
    a0d0:	47a8      	blx	r5
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    a0d2:	6860      	ldr	r0, [r4, #4]
    a0d4:	22ff      	movs	r2, #255	; 0xff
    a0d6:	2102      	movs	r1, #2
    a0d8:	3006      	adds	r0, #6
    a0da:	47a8      	blx	r5
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));														
    a0dc:	6865      	ldr	r5, [r4, #4]
    a0de:	78a4      	ldrb	r4, [r4, #2]
    a0e0:	4621      	mov	r1, r4
    a0e2:	4628      	mov	r0, r5
    a0e4:	4b2c      	ldr	r3, [pc, #176]	; (a198 <grid_port_receive_decode+0x4e8>)
    a0e6:	4798      	blx	r3
    a0e8:	4602      	mov	r2, r0
    a0ea:	4621      	mov	r1, r4
    a0ec:	4628      	mov	r0, r5
    a0ee:	4b2b      	ldr	r3, [pc, #172]	; (a19c <grid_port_receive_decode+0x4ec>)
    a0f0:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    a0f2:	23c8      	movs	r3, #200	; 0xc8
    a0f4:	9301      	str	r3, [sp, #4]
    a0f6:	2302      	movs	r3, #2
    a0f8:	9300      	str	r3, [sp, #0]
    a0fa:	23ff      	movs	r3, #255	; 0xff
    a0fc:	461a      	mov	r2, r3
    a0fe:	4619      	mov	r1, r3
    a100:	4822      	ldr	r0, [pc, #136]	; (a18c <grid_port_receive_decode+0x4dc>)
    a102:	4c28      	ldr	r4, [pc, #160]	; (a1a4 <grid_port_receive_decode+0x4f4>)
    a104:	47a0      	blx	r4
    a106:	e03c      	b.n	a182 <grid_port_receive_decode+0x4d2>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    a108:	23c8      	movs	r3, #200	; 0xc8
    a10a:	9301      	str	r3, [sp, #4]
    a10c:	2302      	movs	r3, #2
    a10e:	9300      	str	r3, [sp, #0]
    a110:	2300      	movs	r3, #0
    a112:	461a      	mov	r2, r3
    a114:	21ff      	movs	r1, #255	; 0xff
    a116:	481d      	ldr	r0, [pc, #116]	; (a18c <grid_port_receive_decode+0x4dc>)
    a118:	4c22      	ldr	r4, [pc, #136]	; (a1a4 <grid_port_receive_decode+0x4f4>)
    a11a:	47a0      	blx	r4
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    a11c:	4822      	ldr	r0, [pc, #136]	; (a1a8 <grid_port_receive_decode+0x4f8>)
    a11e:	4b23      	ldr	r3, [pc, #140]	; (a1ac <grid_port_receive_decode+0x4fc>)
    a120:	4798      	blx	r3
    a122:	e02e      	b.n	a182 <grid_port_receive_decode+0x4d2>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    a124:	4822      	ldr	r0, [pc, #136]	; (a1b0 <grid_port_receive_decode+0x500>)
    a126:	4b21      	ldr	r3, [pc, #132]	; (a1ac <grid_port_receive_decode+0x4fc>)
    a128:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    a12a:	23c8      	movs	r3, #200	; 0xc8
    a12c:	9301      	str	r3, [sp, #4]
    a12e:	2301      	movs	r3, #1
    a130:	9300      	str	r3, [sp, #0]
    a132:	23ff      	movs	r3, #255	; 0xff
    a134:	2200      	movs	r2, #0
    a136:	2114      	movs	r1, #20
    a138:	4814      	ldr	r0, [pc, #80]	; (a18c <grid_port_receive_decode+0x4dc>)
    a13a:	4c1a      	ldr	r4, [pc, #104]	; (a1a4 <grid_port_receive_decode+0x4f4>)
    a13c:	47a0      	blx	r4
    a13e:	e020      	b.n	a182 <grid_port_receive_decode+0x4d2>
	message = &buffer[0];
    a140:	46aa      	mov	sl, r5
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    a142:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    a144:	4442      	add	r2, r8
    a146:	4b1b      	ldr	r3, [pc, #108]	; (a1b4 <grid_port_receive_decode+0x504>)
    a148:	fba3 1302 	umull	r1, r3, r3, r2
    a14c:	09db      	lsrs	r3, r3, #7
    a14e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    a152:	fb01 2313 	mls	r3, r1, r3, r2
    a156:	62c3      	str	r3, [r0, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    a158:	6283      	str	r3, [r0, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    a15a:	2300      	movs	r3, #0
    a15c:	6243      	str	r3, [r0, #36]	; 0x24
	if (message[0] == 1 && message [length-1] == 10){
    a15e:	f89a 3000 	ldrb.w	r3, [sl]
    a162:	2b01      	cmp	r3, #1
    a164:	f43f ae07 	beq.w	9d76 <grid_port_receive_decode+0xc6>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    a168:	23c8      	movs	r3, #200	; 0xc8
    a16a:	9301      	str	r3, [sp, #4]
    a16c:	2302      	movs	r3, #2
    a16e:	9300      	str	r3, [sp, #0]
    a170:	2314      	movs	r3, #20
    a172:	2200      	movs	r2, #0
    a174:	4611      	mov	r1, r2
    a176:	4805      	ldr	r0, [pc, #20]	; (a18c <grid_port_receive_decode+0x4dc>)
    a178:	4c0a      	ldr	r4, [pc, #40]	; (a1a4 <grid_port_receive_decode+0x4f4>)
    a17a:	47a0      	blx	r4
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    a17c:	480e      	ldr	r0, [pc, #56]	; (a1b8 <grid_port_receive_decode+0x508>)
    a17e:	4b0b      	ldr	r3, [pc, #44]	; (a1ac <grid_port_receive_decode+0x4fc>)
    a180:	4798      	blx	r3
}
    a182:	3714      	adds	r7, #20
    a184:	46bd      	mov	sp, r7
    a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a18a:	bf00      	nop
    a18c:	20003310 	.word	0x20003310
    a190:	00003a19 	.word	0x00003a19
    a194:	00003b11 	.word	0x00003b11
    a198:	00003d91 	.word	0x00003d91
    a19c:	00003dcd 	.word	0x00003dcd
    a1a0:	00003ad1 	.word	0x00003ad1
    a1a4:	00003a7d 	.word	0x00003a7d
    a1a8:	0000e270 	.word	0x0000e270
    a1ac:	0000c6b9 	.word	0x0000c6b9
    a1b0:	0000e2a8 	.word	0x0000e2a8
    a1b4:	10624dd3 	.word	0x10624dd3
    a1b8:	0000e2dc 	.word	0x0000e2dc

0000a1bc <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    a1bc:	b530      	push	{r4, r5, lr}
    a1be:	b083      	sub	sp, #12
    a1c0:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    a1c2:	7f03      	ldrb	r3, [r0, #28]
    a1c4:	2b01      	cmp	r3, #1
    a1c6:	d013      	beq.n	a1f0 <grid_port_receive_complete_task+0x34>
	grid_port_receive_task(por);	
    a1c8:	4620      	mov	r0, r4
    a1ca:	4b12      	ldr	r3, [pc, #72]	; (a214 <grid_port_receive_complete_task+0x58>)
    a1cc:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    a1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a1d0:	b163      	cbz	r3, a1ec <grid_port_receive_complete_task+0x30>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    a1d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a1d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a1d6:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    a1d8:	bf34      	ite	cc
    a1da:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    a1dc:	f202 72d1 	addwcs	r2, r2, #2001	; 0x7d1
    a1e0:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    a1e2:	4620      	mov	r0, r4
    a1e4:	4b0c      	ldr	r3, [pc, #48]	; (a218 <grid_port_receive_complete_task+0x5c>)
    a1e6:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    a1e8:	2300      	movs	r3, #0
    a1ea:	6263      	str	r3, [r4, #36]	; 0x24
}
    a1ec:	b003      	add	sp, #12
    a1ee:	bd30      	pop	{r4, r5, pc}
		por->usart_error_flag = 0;
    a1f0:	2300      	movs	r3, #0
    a1f2:	7703      	strb	r3, [r0, #28]
		grid_port_reset_receiver(por);			
    a1f4:	4b09      	ldr	r3, [pc, #36]	; (a21c <grid_port_receive_complete_task+0x60>)
    a1f6:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    a1f8:	23c8      	movs	r3, #200	; 0xc8
    a1fa:	9301      	str	r3, [sp, #4]
    a1fc:	2302      	movs	r3, #2
    a1fe:	9300      	str	r3, [sp, #0]
    a200:	23ff      	movs	r3, #255	; 0xff
    a202:	461a      	mov	r2, r3
    a204:	4619      	mov	r1, r3
    a206:	4806      	ldr	r0, [pc, #24]	; (a220 <grid_port_receive_complete_task+0x64>)
    a208:	4d06      	ldr	r5, [pc, #24]	; (a224 <grid_port_receive_complete_task+0x68>)
    a20a:	47a8      	blx	r5
		printf("{\"type\": \"ERROR\", \"data\": [\"Parity Error\"]}\r\n");
    a20c:	4806      	ldr	r0, [pc, #24]	; (a228 <grid_port_receive_complete_task+0x6c>)
    a20e:	4b07      	ldr	r3, [pc, #28]	; (a22c <grid_port_receive_complete_task+0x70>)
    a210:	4798      	blx	r3
    a212:	e7d9      	b.n	a1c8 <grid_port_receive_complete_task+0xc>
    a214:	00009b21 	.word	0x00009b21
    a218:	00009cb1 	.word	0x00009cb1
    a21c:	00009a9d 	.word	0x00009a9d
    a220:	20003310 	.word	0x20003310
    a224:	00003a7d 	.word	0x00003a7d
    a228:	0000e308 	.word	0x0000e308
    a22c:	0000c6b9 	.word	0x0000c6b9

0000a230 <init_timer>:
#define RTC1SEC 16384

#define RTC1MS (RTC1SEC/1000)

void init_timer(void)
{
    a230:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20;
    a232:	4c18      	ldr	r4, [pc, #96]	; (a294 <init_timer+0x64>)
    a234:	f240 3333 	movw	r3, #819	; 0x333
    a238:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    a23a:	4b17      	ldr	r3, [pc, #92]	; (a298 <init_timer+0x68>)
    a23c:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    a23e:	2301      	movs	r3, #1
    a240:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1SEC;
    a242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a246:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    a248:	4a14      	ldr	r2, [pc, #80]	; (a29c <init_timer+0x6c>)
    a24a:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    a24c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    a250:	f240 6266 	movw	r2, #1638	; 0x666
    a254:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    a256:	4a12      	ldr	r2, [pc, #72]	; (a2a0 <init_timer+0x70>)
    a258:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    a25a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    a25e:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    a260:	4a10      	ldr	r2, [pc, #64]	; (a2a4 <init_timer+0x74>)
    a262:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    a264:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    a268:	4d0f      	ldr	r5, [pc, #60]	; (a2a8 <init_timer+0x78>)
    a26a:	1d21      	adds	r1, r4, #4
    a26c:	4628      	mov	r0, r5
    a26e:	4e0f      	ldr	r6, [pc, #60]	; (a2ac <init_timer+0x7c>)
    a270:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    a272:	f104 0118 	add.w	r1, r4, #24
    a276:	4628      	mov	r0, r5
    a278:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    a27a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a27e:	4628      	mov	r0, r5
    a280:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    a282:	f104 0140 	add.w	r1, r4, #64	; 0x40
    a286:	4628      	mov	r0, r5
    a288:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    a28a:	4628      	mov	r0, r5
    a28c:	4b08      	ldr	r3, [pc, #32]	; (a2b0 <init_timer+0x80>)
    a28e:	4798      	blx	r3
    a290:	bd70      	pop	{r4, r5, r6, pc}
    a292:	bf00      	nop
    a294:	20000d68 	.word	0x20000d68
    a298:	0000998d 	.word	0x0000998d
    a29c:	00009979 	.word	0x00009979
    a2a0:	0000996d 	.word	0x0000996d
    a2a4:	000099f1 	.word	0x000099f1
    a2a8:	20000f94 	.word	0x20000f94
    a2ac:	00005355 	.word	0x00005355
    a2b0:	00005315 	.word	0x00005315

0000a2b4 <main>:




int main(void)
{
    a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2b8:	b097      	sub	sp, #92	; 0x5c

	atmel_start_init();	
    a2ba:	4b7a      	ldr	r3, [pc, #488]	; (a4a4 <main+0x1f0>)
    a2bc:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    a2be:	4d7a      	ldr	r5, [pc, #488]	; (a4a8 <main+0x1f4>)
    a2c0:	497a      	ldr	r1, [pc, #488]	; (a4ac <main+0x1f8>)
    a2c2:	4628      	mov	r0, r5
    a2c4:	4c7a      	ldr	r4, [pc, #488]	; (a4b0 <main+0x1fc>)
    a2c6:	47a0      	blx	r4
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Unknow Reset Source");
    a2c8:	497a      	ldr	r1, [pc, #488]	; (a4b4 <main+0x200>)
    a2ca:	4628      	mov	r0, r5
    a2cc:	47a0      	blx	r4
		{
		}
		
	#else	
	
		GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    a2ce:	4e7a      	ldr	r6, [pc, #488]	; (a4b8 <main+0x204>)
    a2d0:	497a      	ldr	r1, [pc, #488]	; (a4bc <main+0x208>)
    a2d2:	4630      	mov	r0, r6
    a2d4:	47a0      	blx	r4
		while (1)
		{
		}
	#else
	
		GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    a2d6:	497a      	ldr	r1, [pc, #488]	; (a4c0 <main+0x20c>)
    a2d8:	4630      	mov	r0, r6
    a2da:	47a0      	blx	r4
//	wdt_disable(&WDT_0);
	

	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    a2dc:	4b79      	ldr	r3, [pc, #484]	; (a4c4 <main+0x210>)
    a2de:	4798      	blx	r3


	composite_device_start();
    a2e0:	4b79      	ldr	r3, [pc, #484]	; (a4c8 <main+0x214>)
    a2e2:	4798      	blx	r3

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    a2e4:	4979      	ldr	r1, [pc, #484]	; (a4cc <main+0x218>)
    a2e6:	4628      	mov	r0, r5
    a2e8:	47a0      	blx	r4
		
	grid_module_common_init();
    a2ea:	4b79      	ldr	r3, [pc, #484]	; (a4d0 <main+0x21c>)
    a2ec:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    a2ee:	4979      	ldr	r1, [pc, #484]	; (a4d4 <main+0x220>)
    a2f0:	4628      	mov	r0, r5
    a2f2:	47a0      	blx	r4
		

	uint32_t loopstart = 0;

					
	uint32_t hwtype = grid_sys_get_hwcfg();
    a2f4:	4b78      	ldr	r3, [pc, #480]	; (a4d8 <main+0x224>)
    a2f6:	4798      	blx	r3
    a2f8:	4682      	mov	sl, r0
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    a2fa:	2600      	movs	r6, #0
    a2fc:	f8df 9238 	ldr.w	r9, [pc, #568]	; a538 <main+0x284>
	{

		if (hwtype == GRID_MODULE_EN16_RevA){	
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    a300:	f8df 8220 	ldr.w	r8, [pc, #544]	; a524 <main+0x270>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    a304:	e003      	b.n	a30e <main+0x5a>
		if (hwtype == GRID_MODULE_EN16_RevA){	
    a306:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    a30a:	d01f      	beq.n	a34c <main+0x98>
    a30c:	3601      	adds	r6, #1
    a30e:	b2f5      	uxtb	r5, r6
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    a310:	4872      	ldr	r0, [pc, #456]	; (a4dc <main+0x228>)
    a312:	47c8      	blx	r9
    a314:	42a8      	cmp	r0, r5
    a316:	d8f6      	bhi.n	a306 <main+0x52>
	}
		
		
		

	grid_sys_bank_select(&grid_sys_state, 255);
    a318:	21ff      	movs	r1, #255	; 0xff
    a31a:	4871      	ldr	r0, [pc, #452]	; (a4e0 <main+0x22c>)
    a31c:	4b71      	ldr	r3, [pc, #452]	; (a4e4 <main+0x230>)
    a31e:	4798      	blx	r3
	
	init_timer();
    a320:	4b71      	ldr	r3, [pc, #452]	; (a4e8 <main+0x234>)
    a322:	4798      	blx	r3
	 
	 
 	//spi_nor_flash_test();
	

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Entering Main Loop");
    a324:	4971      	ldr	r1, [pc, #452]	; (a4ec <main+0x238>)
    a326:	4860      	ldr	r0, [pc, #384]	; (a4a8 <main+0x1f4>)
    a328:	4b61      	ldr	r3, [pc, #388]	; (a4b0 <main+0x1fc>)
    a32a:	4798      	blx	r3
	
	uint8_t usb_init_variable = 0;
    a32c:	2300      	movs	r3, #0
    a32e:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t loopwarp = 0;
    a330:	9304      	str	r3, [sp, #16]
	uint32_t loopfast = 0;
    a332:	9307      	str	r3, [sp, #28]
	uint32_t loopslow = 0;
    a334:	9306      	str	r3, [sp, #24]
	uint32_t loopcounter = 0;
    a336:	9303      	str	r3, [sp, #12]
	mod->current_task = next_task;
    a338:	f8df a200 	ldr.w	sl, [pc, #512]	; a53c <main+0x288>
    a33c:	f04f 0301 	mov.w	r3, #1
    a340:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
		
		if (scheduler_report_flag){
			
			scheduler_report_flag=0;
    a344:	2400      	movs	r4, #0
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a346:	f8df b194 	ldr.w	fp, [pc, #404]	; a4dc <main+0x228>
    a34a:	e102      	b.n	a552 <main+0x29e>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    a34c:	27ff      	movs	r7, #255	; 0xff
    a34e:	9701      	str	r7, [sp, #4]
    a350:	2400      	movs	r4, #0
    a352:	9400      	str	r4, [sp, #0]
    a354:	4623      	mov	r3, r4
    a356:	4622      	mov	r2, r4
    a358:	4629      	mov	r1, r5
    a35a:	4860      	ldr	r0, [pc, #384]	; (a4dc <main+0x228>)
    a35c:	47c0      	blx	r8
			grid_led_set_mid(&grid_led_state, i, 0, 5, 5, 5);
    a35e:	2305      	movs	r3, #5
    a360:	9301      	str	r3, [sp, #4]
    a362:	9300      	str	r3, [sp, #0]
    a364:	4622      	mov	r2, r4
    a366:	4629      	mov	r1, r5
    a368:	485c      	ldr	r0, [pc, #368]	; (a4dc <main+0x228>)
    a36a:	f8df b1c8 	ldr.w	fp, [pc, #456]	; a534 <main+0x280>
    a36e:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    a370:	9401      	str	r4, [sp, #4]
    a372:	9400      	str	r4, [sp, #0]
    a374:	463b      	mov	r3, r7
    a376:	4622      	mov	r2, r4
    a378:	4629      	mov	r1, r5
    a37a:	4858      	ldr	r0, [pc, #352]	; (a4dc <main+0x228>)
    a37c:	4c5c      	ldr	r4, [pc, #368]	; (a4f0 <main+0x23c>)
    a37e:	47a0      	blx	r4
    a380:	e7c4      	b.n	a30c <main+0x58>
			if (usb_d_get_frame_num() == 0){
    a382:	4b5c      	ldr	r3, [pc, #368]	; (a4f4 <main+0x240>)
    a384:	4798      	blx	r3
    a386:	2800      	cmp	r0, #0
    a388:	f000 80eb 	beq.w	a562 <main+0x2ae>
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    a38c:	495a      	ldr	r1, [pc, #360]	; (a4f8 <main+0x244>)
    a38e:	4846      	ldr	r0, [pc, #280]	; (a4a8 <main+0x1f4>)
    a390:	4b47      	ldr	r3, [pc, #284]	; (a4b0 <main+0x1fc>)
    a392:	4798      	blx	r3
				grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    a394:	4b52      	ldr	r3, [pc, #328]	; (a4e0 <main+0x22c>)
    a396:	7a5b      	ldrb	r3, [r3, #9]
    a398:	3301      	adds	r3, #1
    a39a:	f003 0201 	and.w	r2, r3, #1
    a39e:	4d57      	ldr	r5, [pc, #348]	; (a4fc <main+0x248>)
    a3a0:	686b      	ldr	r3, [r5, #4]
    a3a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
    a3a4:	bf48      	it	mi
    a3a6:	4252      	negmi	r2, r2
    a3a8:	2102      	movs	r1, #2
    a3aa:	3007      	adds	r0, #7
    a3ac:	4b54      	ldr	r3, [pc, #336]	; (a500 <main+0x24c>)
    a3ae:	4798      	blx	r3
				grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    a3b0:	2105      	movs	r1, #5
    a3b2:	4628      	mov	r0, r5
    a3b4:	4b53      	ldr	r3, [pc, #332]	; (a504 <main+0x250>)
    a3b6:	4798      	blx	r3
				usb_init_variable = 1;
    a3b8:	2301      	movs	r3, #1
    a3ba:	930c      	str	r3, [sp, #48]	; 0x30
    a3bc:	e0d1      	b.n	a562 <main+0x2ae>
			grid_sys_state.alert_state--;
    a3be:	4b48      	ldr	r3, [pc, #288]	; (a4e0 <main+0x22c>)
    a3c0:	889b      	ldrh	r3, [r3, #4]
    a3c2:	3b01      	subs	r3, #1
    a3c4:	b29b      	uxth	r3, r3
    a3c6:	4a46      	ldr	r2, [pc, #280]	; (a4e0 <main+0x22c>)
    a3c8:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    a3ca:	4610      	mov	r0, r2
    a3cc:	4b4e      	ldr	r3, [pc, #312]	; (a508 <main+0x254>)
    a3ce:	4798      	blx	r3
    a3d0:	b9b0      	cbnz	r0, a400 <main+0x14c>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    a3d2:	4843      	ldr	r0, [pc, #268]	; (a4e0 <main+0x22c>)
    a3d4:	4b4d      	ldr	r3, [pc, #308]	; (a50c <main+0x258>)
    a3d6:	4798      	blx	r3
    a3d8:	4606      	mov	r6, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a3da:	f89b 3001 	ldrb.w	r3, [fp, #1]
    a3de:	2b00      	cmp	r3, #0
    a3e0:	f000 8148 	beq.w	a674 <main+0x3c0>
    a3e4:	4625      	mov	r5, r4
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    a3e6:	4f4a      	ldr	r7, [pc, #296]	; (a510 <main+0x25c>)
    a3e8:	4633      	mov	r3, r6
    a3ea:	2201      	movs	r2, #1
    a3ec:	4629      	mov	r1, r5
    a3ee:	4658      	mov	r0, fp
    a3f0:	47b8      	blx	r7
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    a3f2:	3501      	adds	r5, #1
    a3f4:	b2ed      	uxtb	r5, r5
    a3f6:	f89b 3001 	ldrb.w	r3, [fp, #1]
    a3fa:	42ab      	cmp	r3, r5
    a3fc:	d8f4      	bhi.n	a3e8 <main+0x134>
    a3fe:	e139      	b.n	a674 <main+0x3c0>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    a400:	4837      	ldr	r0, [pc, #220]	; (a4e0 <main+0x22c>)
    a402:	4b44      	ldr	r3, [pc, #272]	; (a514 <main+0x260>)
    a404:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    a406:	4836      	ldr	r0, [pc, #216]	; (a4e0 <main+0x22c>)
    a408:	4b43      	ldr	r3, [pc, #268]	; (a518 <main+0x264>)
    a40a:	4798      	blx	r3
    a40c:	9008      	str	r0, [sp, #32]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    a40e:	4834      	ldr	r0, [pc, #208]	; (a4e0 <main+0x22c>)
    a410:	4b42      	ldr	r3, [pc, #264]	; (a51c <main+0x268>)
    a412:	4798      	blx	r3
    a414:	9009      	str	r0, [sp, #36]	; 0x24
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    a416:	4832      	ldr	r0, [pc, #200]	; (a4e0 <main+0x22c>)
    a418:	4b41      	ldr	r3, [pc, #260]	; (a520 <main+0x26c>)
    a41a:	4798      	blx	r3
    a41c:	900a      	str	r0, [sp, #40]	; 0x28
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a41e:	f04f 0900 	mov.w	r9, #0
    a422:	e033      	b.n	a48c <main+0x1d8>
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    a424:	9401      	str	r4, [sp, #4]
    a426:	9400      	str	r4, [sp, #0]
    a428:	4623      	mov	r3, r4
    a42a:	2201      	movs	r2, #1
    a42c:	4629      	mov	r1, r5
    a42e:	4658      	mov	r0, fp
    a430:	4e3c      	ldr	r6, [pc, #240]	; (a524 <main+0x270>)
    a432:	47b0      	blx	r6
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    a434:	f8df 8108 	ldr.w	r8, [pc, #264]	; a540 <main+0x28c>
    a438:	9808      	ldr	r0, [sp, #32]
    a43a:	47c0      	blx	r8
    a43c:	4f3a      	ldr	r7, [pc, #232]	; (a528 <main+0x274>)
    a43e:	2200      	movs	r2, #0
    a440:	4b3a      	ldr	r3, [pc, #232]	; (a52c <main+0x278>)
    a442:	47b8      	blx	r7
    a444:	4e3a      	ldr	r6, [pc, #232]	; (a530 <main+0x27c>)
    a446:	47b0      	blx	r6
    a448:	b2c2      	uxtb	r2, r0
    a44a:	920b      	str	r2, [sp, #44]	; 0x2c
    a44c:	980a      	ldr	r0, [sp, #40]	; 0x28
    a44e:	47c0      	blx	r8
    a450:	2200      	movs	r2, #0
    a452:	4b36      	ldr	r3, [pc, #216]	; (a52c <main+0x278>)
    a454:	47b8      	blx	r7
    a456:	47b0      	blx	r6
    a458:	b2c0      	uxtb	r0, r0
    a45a:	9001      	str	r0, [sp, #4]
    a45c:	9809      	ldr	r0, [sp, #36]	; 0x24
    a45e:	47c0      	blx	r8
    a460:	2200      	movs	r2, #0
    a462:	4b32      	ldr	r3, [pc, #200]	; (a52c <main+0x278>)
    a464:	47b8      	blx	r7
    a466:	47b0      	blx	r6
    a468:	b2c0      	uxtb	r0, r0
    a46a:	9000      	str	r0, [sp, #0]
    a46c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a46e:	2201      	movs	r2, #1
    a470:	4629      	mov	r1, r5
    a472:	4658      	mov	r0, fp
    a474:	4e2f      	ldr	r6, [pc, #188]	; (a534 <main+0x280>)
    a476:	47b0      	blx	r6
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    a478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a47a:	9201      	str	r2, [sp, #4]
    a47c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a47e:	9200      	str	r2, [sp, #0]
    a480:	9b08      	ldr	r3, [sp, #32]
    a482:	2201      	movs	r2, #1
    a484:	4629      	mov	r1, r5
    a486:	4658      	mov	r0, fp
    a488:	4d19      	ldr	r5, [pc, #100]	; (a4f0 <main+0x23c>)
    a48a:	47a8      	blx	r5
    a48c:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    a490:	4658      	mov	r0, fp
    a492:	4b29      	ldr	r3, [pc, #164]	; (a538 <main+0x284>)
    a494:	4798      	blx	r3
    a496:	f109 0901 	add.w	r9, r9, #1
    a49a:	42a8      	cmp	r0, r5
    a49c:	d8c2      	bhi.n	a424 <main+0x170>
    a49e:	e798      	b.n	a3d2 <main+0x11e>
					if ((RTC1MS - elapsed)<loopwarp){				
						loopwarp-=(RTC1MS - elapsed);
						loopstart-=(RTC1MS - elapsed);
					}
					else{
						loopwarp-=loopwarp;
    a4a0:	9404      	str	r4, [sp, #16]
    a4a2:	e10e      	b.n	a6c2 <main+0x40e>
    a4a4:	000002d1 	.word	0x000002d1
    a4a8:	0000e40c 	.word	0x0000e40c
    a4ac:	0000e3f8 	.word	0x0000e3f8
    a4b0:	0000c5d1 	.word	0x0000c5d1
    a4b4:	0000e430 	.word	0x0000e430
    a4b8:	0000e19c 	.word	0x0000e19c
    a4bc:	0000e444 	.word	0x0000e444
    a4c0:	0000e454 	.word	0x0000e454
    a4c4:	0000b255 	.word	0x0000b255
    a4c8:	0000bbfd 	.word	0x0000bbfd
    a4cc:	0000e468 	.word	0x0000e468
    a4d0:	000024dd 	.word	0x000024dd
    a4d4:	0000e488 	.word	0x0000e488
    a4d8:	00003b49 	.word	0x00003b49
    a4dc:	20007864 	.word	0x20007864
    a4e0:	20003310 	.word	0x20003310
    a4e4:	00003c39 	.word	0x00003c39
    a4e8:	0000a231 	.word	0x0000a231
    a4ec:	0000e4a0 	.word	0x0000e4a0
    a4f0:	00002093 	.word	0x00002093
    a4f4:	00005b91 	.word	0x00005b91
    a4f8:	0000e4b4 	.word	0x0000e4b4
    a4fc:	20003300 	.word	0x20003300
    a500:	00003b11 	.word	0x00003b11
    a504:	00004215 	.word	0x00004215
    a508:	00003a2b 	.word	0x00003a2b
    a50c:	00003a35 	.word	0x00003a35
    a510:	000020dd 	.word	0x000020dd
    a514:	00003a2f 	.word	0x00003a2f
    a518:	00003a9b 	.word	0x00003a9b
    a51c:	00003a9f 	.word	0x00003a9f
    a520:	00003aa3 	.word	0x00003aa3
    a524:	00002001 	.word	0x00002001
    a528:	0000bf95 	.word	0x0000bf95
    a52c:	3fe00000 	.word	0x3fe00000
    a530:	0000c3b9 	.word	0x0000c3b9
    a534:	00002049 	.word	0x00002049
    a538:	00001fb9 	.word	0x00001fb9
    a53c:	20007db8 	.word	0x20007db8
    a540:	0000bec9 	.word	0x0000bec9
				}
			}
			
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
					
				delay_us(1);			
    a544:	2001      	movs	r0, #1
    a546:	47b0      	blx	r6
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    a548:	4639      	mov	r1, r7
    a54a:	4865      	ldr	r0, [pc, #404]	; (a6e0 <main+0x42c>)
    a54c:	47a8      	blx	r5
    a54e:	280f      	cmp	r0, #15
    a550:	d9f8      	bls.n	a544 <main+0x290>
	mod->current_task = next_task;
    a552:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a556:	f88a 3001 	strb.w	r3, [sl, #1]
		if (usb_init_variable == 0){
    a55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a55c:	2b00      	cmp	r3, #0
    a55e:	f43f af10 	beq.w	a382 <main+0xce>
		loopcounter++;
    a562:	9b03      	ldr	r3, [sp, #12]
    a564:	3301      	adds	r3, #1
    a566:	9303      	str	r3, [sp, #12]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    a568:	485d      	ldr	r0, [pc, #372]	; (a6e0 <main+0x42c>)
    a56a:	4b5e      	ldr	r3, [pc, #376]	; (a6e4 <main+0x430>)
    a56c:	4798      	blx	r3
    a56e:	9005      	str	r0, [sp, #20]
		if (scheduler_report_flag){
    a570:	4b5d      	ldr	r3, [pc, #372]	; (a6e8 <main+0x434>)
    a572:	781b      	ldrb	r3, [r3, #0]
    a574:	2b00      	cmp	r3, #0
    a576:	d037      	beq.n	a5e8 <main+0x334>
			scheduler_report_flag=0;
    a578:	4b5b      	ldr	r3, [pc, #364]	; (a6e8 <main+0x434>)
    a57a:	701c      	strb	r4, [r3, #0]
			uint32_t task_val[GRID_TASK_NUMBER] = {0};
    a57c:	2220      	movs	r2, #32
    a57e:	4621      	mov	r1, r4
    a580:	a80e      	add	r0, sp, #56	; 0x38
    a582:	4b5a      	ldr	r3, [pc, #360]	; (a6ec <main+0x438>)
    a584:	4798      	blx	r3
    a586:	4b5a      	ldr	r3, [pc, #360]	; (a6f0 <main+0x43c>)
    a588:	aa0d      	add	r2, sp, #52	; 0x34
    a58a:	f103 0020 	add.w	r0, r3, #32
	return 	mod->timer[task];
    a58e:	f853 1b04 	ldr.w	r1, [r3], #4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    a592:	f842 1f04 	str.w	r1, [r2, #4]!
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    a596:	4298      	cmp	r0, r3
    a598:	d1f9      	bne.n	a58e <main+0x2da>
			grid_task_timer_reset(&grid_task_state);
    a59a:	4650      	mov	r0, sl
    a59c:	4b55      	ldr	r3, [pc, #340]	; (a6f4 <main+0x440>)
    a59e:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [");
    a5a0:	4855      	ldr	r0, [pc, #340]	; (a6f8 <main+0x444>)
    a5a2:	4d56      	ldr	r5, [pc, #344]	; (a6fc <main+0x448>)
    a5a4:	47a8      	blx	r5
				printf("\"%d\"", task_val[i]);
    a5a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    a5a8:	4855      	ldr	r0, [pc, #340]	; (a700 <main+0x44c>)
    a5aa:	47a8      	blx	r5
    a5ac:	ad0f      	add	r5, sp, #60	; 0x3c
    a5ae:	f10d 0958 	add.w	r9, sp, #88	; 0x58
					printf(", ");
    a5b2:	f8df 8198 	ldr.w	r8, [pc, #408]	; a74c <main+0x498>
    a5b6:	4e51      	ldr	r6, [pc, #324]	; (a6fc <main+0x448>)
				printf("\"%d\"", task_val[i]);
    a5b8:	4f51      	ldr	r7, [pc, #324]	; (a700 <main+0x44c>)
					printf(", ");
    a5ba:	4640      	mov	r0, r8
    a5bc:	47b0      	blx	r6
				printf("\"%d\"", task_val[i]);
    a5be:	f855 1b04 	ldr.w	r1, [r5], #4
    a5c2:	4638      	mov	r0, r7
    a5c4:	47b0      	blx	r6
				if (i != GRID_TASK_NUMBER-1){
    a5c6:	454d      	cmp	r5, r9
    a5c8:	d1f7      	bne.n	a5ba <main+0x306>
			printf("]}\r\n");
    a5ca:	484e      	ldr	r0, [pc, #312]	; (a704 <main+0x450>)
    a5cc:	4b4e      	ldr	r3, [pc, #312]	; (a708 <main+0x454>)
    a5ce:	4798      	blx	r3
			printf("{\"type\":\"LOOP\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", loopcounter, loopslow, loopfast, loopwarp);
    a5d0:	9b04      	ldr	r3, [sp, #16]
    a5d2:	9300      	str	r3, [sp, #0]
    a5d4:	9b07      	ldr	r3, [sp, #28]
    a5d6:	9a06      	ldr	r2, [sp, #24]
    a5d8:	9903      	ldr	r1, [sp, #12]
    a5da:	484c      	ldr	r0, [pc, #304]	; (a70c <main+0x458>)
    a5dc:	4d47      	ldr	r5, [pc, #284]	; (a6fc <main+0x448>)
    a5de:	47a8      	blx	r5
			loopwarp = 0;
    a5e0:	9404      	str	r4, [sp, #16]
			loopfast = 0;
    a5e2:	9407      	str	r4, [sp, #28]
			loopslow = 0;
    a5e4:	9406      	str	r4, [sp, #24]
			loopcounter = 0;
    a5e6:	9403      	str	r4, [sp, #12]
	mod->current_task = next_task;
    a5e8:	2302      	movs	r3, #2
    a5ea:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    a5ee:	4848      	ldr	r0, [pc, #288]	; (a710 <main+0x45c>)
    a5f0:	4d48      	ldr	r5, [pc, #288]	; (a714 <main+0x460>)
    a5f2:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    a5f4:	f8df 9158 	ldr.w	r9, [pc, #344]	; a750 <main+0x49c>
    a5f8:	4648      	mov	r0, r9
    a5fa:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    a5fc:	f8df 8154 	ldr.w	r8, [pc, #340]	; a754 <main+0x4a0>
    a600:	4640      	mov	r0, r8
    a602:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    a604:	4f44      	ldr	r7, [pc, #272]	; (a718 <main+0x464>)
    a606:	4638      	mov	r0, r7
    a608:	47a8      	blx	r5
	mod->current_task = next_task;
    a60a:	2303      	movs	r3, #3
    a60c:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_ui(&GRID_PORT_U);
    a610:	4e42      	ldr	r6, [pc, #264]	; (a71c <main+0x468>)
    a612:	4630      	mov	r0, r6
    a614:	4b42      	ldr	r3, [pc, #264]	; (a720 <main+0x46c>)
    a616:	4798      	blx	r3
	mod->current_task = next_task;
    a618:	2304      	movs	r3, #4
    a61a:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    a61e:	2101      	movs	r1, #1
    a620:	4630      	mov	r0, r6
    a622:	4d40      	ldr	r5, [pc, #256]	; (a724 <main+0x470>)
    a624:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    a626:	4621      	mov	r1, r4
    a628:	4839      	ldr	r0, [pc, #228]	; (a710 <main+0x45c>)
    a62a:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    a62c:	4621      	mov	r1, r4
    a62e:	4648      	mov	r0, r9
    a630:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);		
    a632:	4621      	mov	r1, r4
    a634:	4640      	mov	r0, r8
    a636:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);						
    a638:	4621      	mov	r1, r4
    a63a:	4638      	mov	r0, r7
    a63c:	47a8      	blx	r5
	mod->current_task = next_task;
    a63e:	2305      	movs	r3, #5
    a640:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_outbound_usart(&GRID_PORT_N);
    a644:	4832      	ldr	r0, [pc, #200]	; (a710 <main+0x45c>)
    a646:	4d38      	ldr	r5, [pc, #224]	; (a728 <main+0x474>)
    a648:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    a64a:	4648      	mov	r0, r9
    a64c:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    a64e:	4640      	mov	r0, r8
    a650:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    a652:	4638      	mov	r0, r7
    a654:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    a656:	4835      	ldr	r0, [pc, #212]	; (a72c <main+0x478>)
    a658:	4b35      	ldr	r3, [pc, #212]	; (a730 <main+0x47c>)
    a65a:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    a65c:	4630      	mov	r0, r6
    a65e:	4b35      	ldr	r3, [pc, #212]	; (a734 <main+0x480>)
    a660:	4798      	blx	r3
	mod->current_task = next_task;
    a662:	2307      	movs	r3, #7
    a664:	f88a 3001 	strb.w	r3, [sl, #1]
		if (grid_sys_state.alert_state){
    a668:	4b1d      	ldr	r3, [pc, #116]	; (a6e0 <main+0x42c>)
    a66a:	889b      	ldrh	r3, [r3, #4]
    a66c:	b29b      	uxth	r3, r3
    a66e:	2b00      	cmp	r3, #0
    a670:	f47f aea5 	bne.w	a3be <main+0x10a>
	mod->current_task = next_task;
    a674:	2306      	movs	r3, #6
    a676:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_led_tick(&grid_led_state);
    a67a:	4658      	mov	r0, fp
    a67c:	4b2e      	ldr	r3, [pc, #184]	; (a738 <main+0x484>)
    a67e:	4798      	blx	r3
			grid_led_render_all(&grid_led_state);	
    a680:	4658      	mov	r0, fp
    a682:	4b2e      	ldr	r3, [pc, #184]	; (a73c <main+0x488>)
    a684:	4798      	blx	r3
			grid_led_hardware_start_transfer(&grid_led_state);
    a686:	4658      	mov	r0, fp
    a688:	4b2d      	ldr	r3, [pc, #180]	; (a740 <main+0x48c>)
    a68a:	4798      	blx	r3
	mod->current_task = next_task;
    a68c:	f88a 4001 	strb.w	r4, [sl, #1]
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    a690:	9d05      	ldr	r5, [sp, #20]
    a692:	4629      	mov	r1, r5
    a694:	4812      	ldr	r0, [pc, #72]	; (a6e0 <main+0x42c>)
    a696:	4b2b      	ldr	r3, [pc, #172]	; (a744 <main+0x490>)
    a698:	4798      	blx	r3
		if (elapsed < RTC1MS){
    a69a:	280f      	cmp	r0, #15
    a69c:	d818      	bhi.n	a6d0 <main+0x41c>
			if (loopwarp>5){
    a69e:	9904      	ldr	r1, [sp, #16]
    a6a0:	2905      	cmp	r1, #5
    a6a2:	d911      	bls.n	a6c8 <main+0x414>
				if (RTC1MS - elapsed > 0){
    a6a4:	2810      	cmp	r0, #16
    a6a6:	d00f      	beq.n	a6c8 <main+0x414>
					if ((RTC1MS - elapsed)<loopwarp){				
    a6a8:	f1c0 0310 	rsb	r3, r0, #16
    a6ac:	4299      	cmp	r1, r3
    a6ae:	f67f aef7 	bls.w	a4a0 <main+0x1ec>
    a6b2:	f1a1 0310 	sub.w	r3, r1, #16
						loopwarp-=(RTC1MS - elapsed);
    a6b6:	4403      	add	r3, r0
    a6b8:	9304      	str	r3, [sp, #16]
    a6ba:	f1a5 0310 	sub.w	r3, r5, #16
						loopstart-=(RTC1MS - elapsed);
    a6be:	18c3      	adds	r3, r0, r3
    a6c0:	9305      	str	r3, [sp, #20]
					loopfast++;
    a6c2:	9b07      	ldr	r3, [sp, #28]
    a6c4:	3301      	adds	r3, #1
    a6c6:	9307      	str	r3, [sp, #28]
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    a6c8:	4d1e      	ldr	r5, [pc, #120]	; (a744 <main+0x490>)
				delay_us(1);			
    a6ca:	4e1f      	ldr	r6, [pc, #124]	; (a748 <main+0x494>)
    a6cc:	9f05      	ldr	r7, [sp, #20]
    a6ce:	e73b      	b.n	a548 <main+0x294>
    a6d0:	9b04      	ldr	r3, [sp, #16]
    a6d2:	3b10      	subs	r3, #16
			}	
					
		}
		else{
			loopwarp+= elapsed - RTC1MS;
    a6d4:	18c3      	adds	r3, r0, r3
    a6d6:	9304      	str	r3, [sp, #16]
			
			loopslow++;
    a6d8:	9b06      	ldr	r3, [sp, #24]
    a6da:	3301      	adds	r3, #1
    a6dc:	9306      	str	r3, [sp, #24]
    a6de:	e738      	b.n	a552 <main+0x29e>
    a6e0:	20003310 	.word	0x20003310
    a6e4:	00003a19 	.word	0x00003a19
    a6e8:	20000d68 	.word	0x20000d68
    a6ec:	0000c467 	.word	0x0000c467
    a6f0:	20007dbc 	.word	0x20007dbc
    a6f4:	00009a8d 	.word	0x00009a8d
    a6f8:	0000e4d0 	.word	0x0000e4d0
    a6fc:	0000c5d1 	.word	0x0000c5d1
    a700:	0000e4ec 	.word	0x0000e4ec
    a704:	0000e304 	.word	0x0000e304
    a708:	0000c6b9 	.word	0x0000c6b9
    a70c:	0000e4f8 	.word	0x0000e4f8
    a710:	200012ac 	.word	0x200012ac
    a714:	0000a1bd 	.word	0x0000a1bd
    a718:	200037c0 	.word	0x200037c0
    a71c:	200022f8 	.word	0x200022f8
    a720:	00004229 	.word	0x00004229
    a724:	00001701 	.word	0x00001701
    a728:	00001ed5 	.word	0x00001ed5
    a72c:	200057e8 	.word	0x200057e8
    a730:	000018d1 	.word	0x000018d1
    a734:	00001d75 	.word	0x00001d75
    a738:	00001fbd 	.word	0x00001fbd
    a73c:	000022f5 	.word	0x000022f5
    a740:	000024b1 	.word	0x000024b1
    a744:	00003a1d 	.word	0x00003a1d
    a748:	00004ac9 	.word	0x00004ac9
    a74c:	0000e4f4 	.word	0x0000e4f4
    a750:	200067f0 	.word	0x200067f0
    a754:	200047dc 	.word	0x200047dc

0000a758 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    a758:	b940      	cbnz	r0, a76c <_read+0x14>
{
    a75a:	b508      	push	{r3, lr}
    a75c:	460b      	mov	r3, r1
    a75e:	4611      	mov	r1, r2
    a760:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    a762:	4b04      	ldr	r3, [pc, #16]	; (a774 <_read+0x1c>)
    a764:	4798      	blx	r3
    a766:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a76a:	bd08      	pop	{r3, pc}
		return -1;
    a76c:	f04f 30ff 	mov.w	r0, #4294967295
    a770:	4770      	bx	lr
    a772:	bf00      	nop
    a774:	0000a7c9 	.word	0x0000a7c9

0000a778 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    a778:	3801      	subs	r0, #1
    a77a:	2802      	cmp	r0, #2
    a77c:	d808      	bhi.n	a790 <_write+0x18>
{
    a77e:	b508      	push	{r3, lr}
    a780:	460b      	mov	r3, r1
    a782:	4611      	mov	r1, r2
    a784:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    a786:	4b04      	ldr	r3, [pc, #16]	; (a798 <_write+0x20>)
    a788:	4798      	blx	r3
    a78a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a78e:	bd08      	pop	{r3, pc}
		return -1;
    a790:	f04f 30ff 	mov.w	r0, #4294967295
    a794:	4770      	bx	lr
    a796:	bf00      	nop
    a798:	0000a7ed 	.word	0x0000a7ed

0000a79c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    a79c:	b570      	push	{r4, r5, r6, lr}
    a79e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    a7a0:	4d06      	ldr	r5, [pc, #24]	; (a7bc <stdio_io_init+0x20>)
    a7a2:	682b      	ldr	r3, [r5, #0]
    a7a4:	2100      	movs	r1, #0
    a7a6:	6898      	ldr	r0, [r3, #8]
    a7a8:	4c05      	ldr	r4, [pc, #20]	; (a7c0 <stdio_io_init+0x24>)
    a7aa:	47a0      	blx	r4
	setbuf(stdin, NULL);
    a7ac:	682b      	ldr	r3, [r5, #0]
    a7ae:	2100      	movs	r1, #0
    a7b0:	6858      	ldr	r0, [r3, #4]
    a7b2:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    a7b4:	4b03      	ldr	r3, [pc, #12]	; (a7c4 <stdio_io_init+0x28>)
    a7b6:	601e      	str	r6, [r3, #0]
    a7b8:	bd70      	pop	{r4, r5, r6, pc}
    a7ba:	bf00      	nop
    a7bc:	20000558 	.word	0x20000558
    a7c0:	0000c6e9 	.word	0x0000c6e9
    a7c4:	20000e50 	.word	0x20000e50

0000a7c8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    a7c8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a7ca:	4b06      	ldr	r3, [pc, #24]	; (a7e4 <stdio_io_read+0x1c>)
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	b133      	cbz	r3, a7de <stdio_io_read+0x16>
    a7d0:	460a      	mov	r2, r1
    a7d2:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    a7d4:	b292      	uxth	r2, r2
    a7d6:	4618      	mov	r0, r3
    a7d8:	4b03      	ldr	r3, [pc, #12]	; (a7e8 <stdio_io_read+0x20>)
    a7da:	4798      	blx	r3
    a7dc:	bd08      	pop	{r3, pc}
		return 0;
    a7de:	2000      	movs	r0, #0
}
    a7e0:	bd08      	pop	{r3, pc}
    a7e2:	bf00      	nop
    a7e4:	20000e50 	.word	0x20000e50
    a7e8:	00004ca5 	.word	0x00004ca5

0000a7ec <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    a7ec:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a7ee:	4b06      	ldr	r3, [pc, #24]	; (a808 <stdio_io_write+0x1c>)
    a7f0:	681b      	ldr	r3, [r3, #0]
    a7f2:	b133      	cbz	r3, a802 <stdio_io_write+0x16>
    a7f4:	460a      	mov	r2, r1
    a7f6:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    a7f8:	b292      	uxth	r2, r2
    a7fa:	4618      	mov	r0, r3
    a7fc:	4b03      	ldr	r3, [pc, #12]	; (a80c <stdio_io_write+0x20>)
    a7fe:	4798      	blx	r3
    a800:	bd08      	pop	{r3, pc}
		return 0;
    a802:	2000      	movs	r0, #0
}
    a804:	bd08      	pop	{r3, pc}
    a806:	bf00      	nop
    a808:	20000e50 	.word	0x20000e50
    a80c:	00004c75 	.word	0x00004c75

0000a810 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    a810:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    a812:	4c04      	ldr	r4, [pc, #16]	; (a824 <stdio_redirect_init+0x14>)
    a814:	4620      	mov	r0, r4
    a816:	4b04      	ldr	r3, [pc, #16]	; (a828 <stdio_redirect_init+0x18>)
    a818:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    a81a:	4620      	mov	r0, r4
    a81c:	4b03      	ldr	r3, [pc, #12]	; (a82c <stdio_redirect_init+0x1c>)
    a81e:	4798      	blx	r3
    a820:	bd10      	pop	{r4, pc}
    a822:	bf00      	nop
    a824:	2000104c 	.word	0x2000104c
    a828:	00005885 	.word	0x00005885
    a82c:	0000a79d 	.word	0x0000a79d

0000a830 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a830:	b5f0      	push	{r4, r5, r6, r7, lr}
    a832:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a834:	780b      	ldrb	r3, [r1, #0]
    a836:	f3c3 1441 	ubfx	r4, r3, #5, #2
    a83a:	2c01      	cmp	r4, #1
    a83c:	d15e      	bne.n	a8fc <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a83e:	888c      	ldrh	r4, [r1, #4]
    a840:	4d35      	ldr	r5, [pc, #212]	; (a918 <cdcdf_acm_req+0xe8>)
    a842:	782d      	ldrb	r5, [r5, #0]
    a844:	42a5      	cmp	r5, r4
    a846:	d003      	beq.n	a850 <cdcdf_acm_req+0x20>
    a848:	4d33      	ldr	r5, [pc, #204]	; (a918 <cdcdf_acm_req+0xe8>)
    a84a:	786d      	ldrb	r5, [r5, #1]
    a84c:	42a5      	cmp	r5, r4
    a84e:	d158      	bne.n	a902 <cdcdf_acm_req+0xd2>
    a850:	4616      	mov	r6, r2
    a852:	460c      	mov	r4, r1
    a854:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a856:	f013 0f80 	tst.w	r3, #128	; 0x80
    a85a:	d10c      	bne.n	a876 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    a85c:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a85e:	4b2f      	ldr	r3, [pc, #188]	; (a91c <cdcdf_acm_req+0xec>)
    a860:	4798      	blx	r3
    a862:	4601      	mov	r1, r0
	switch (req->bRequest) {
    a864:	7863      	ldrb	r3, [r4, #1]
    a866:	2b20      	cmp	r3, #32
    a868:	d013      	beq.n	a892 <cdcdf_acm_req+0x62>
    a86a:	2b22      	cmp	r3, #34	; 0x22
    a86c:	d032      	beq.n	a8d4 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    a86e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    a872:	b003      	add	sp, #12
    a874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    a876:	2a01      	cmp	r2, #1
    a878:	d046      	beq.n	a908 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    a87a:	784b      	ldrb	r3, [r1, #1]
    a87c:	2b21      	cmp	r3, #33	; 0x21
    a87e:	d145      	bne.n	a90c <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a880:	88cb      	ldrh	r3, [r1, #6]
    a882:	2b07      	cmp	r3, #7
    a884:	d145      	bne.n	a912 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a886:	2300      	movs	r3, #0
    a888:	2207      	movs	r2, #7
    a88a:	4925      	ldr	r1, [pc, #148]	; (a920 <cdcdf_acm_req+0xf0>)
    a88c:	4c25      	ldr	r4, [pc, #148]	; (a924 <cdcdf_acm_req+0xf4>)
    a88e:	47a0      	blx	r4
    a890:	e7ef      	b.n	a872 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a892:	2f07      	cmp	r7, #7
    a894:	d12b      	bne.n	a8ee <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    a896:	b1be      	cbz	r6, a8c8 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a898:	6800      	ldr	r0, [r0, #0]
    a89a:	9000      	str	r0, [sp, #0]
    a89c:	888a      	ldrh	r2, [r1, #4]
    a89e:	798b      	ldrb	r3, [r1, #6]
    a8a0:	f8ad 2004 	strh.w	r2, [sp, #4]
    a8a4:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a8a8:	4b1b      	ldr	r3, [pc, #108]	; (a918 <cdcdf_acm_req+0xe8>)
    a8aa:	691b      	ldr	r3, [r3, #16]
    a8ac:	b113      	cbz	r3, a8b4 <cdcdf_acm_req+0x84>
    a8ae:	4668      	mov	r0, sp
    a8b0:	4798      	blx	r3
    a8b2:	b1f8      	cbz	r0, a8f4 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    a8b4:	4b18      	ldr	r3, [pc, #96]	; (a918 <cdcdf_acm_req+0xe8>)
    a8b6:	aa02      	add	r2, sp, #8
    a8b8:	e912 0003 	ldmdb	r2, {r0, r1}
    a8bc:	6098      	str	r0, [r3, #8]
    a8be:	8199      	strh	r1, [r3, #12]
    a8c0:	0c09      	lsrs	r1, r1, #16
    a8c2:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    a8c4:	2000      	movs	r0, #0
    a8c6:	e7d4      	b.n	a872 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a8c8:	2300      	movs	r3, #0
    a8ca:	2207      	movs	r2, #7
    a8cc:	4628      	mov	r0, r5
    a8ce:	4c15      	ldr	r4, [pc, #84]	; (a924 <cdcdf_acm_req+0xf4>)
    a8d0:	47a0      	blx	r4
    a8d2:	e7ce      	b.n	a872 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    a8d4:	2300      	movs	r3, #0
    a8d6:	461a      	mov	r2, r3
    a8d8:	4619      	mov	r1, r3
    a8da:	4618      	mov	r0, r3
    a8dc:	4d11      	ldr	r5, [pc, #68]	; (a924 <cdcdf_acm_req+0xf4>)
    a8de:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    a8e0:	4b0d      	ldr	r3, [pc, #52]	; (a918 <cdcdf_acm_req+0xe8>)
    a8e2:	695b      	ldr	r3, [r3, #20]
    a8e4:	b143      	cbz	r3, a8f8 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    a8e6:	8860      	ldrh	r0, [r4, #2]
    a8e8:	4798      	blx	r3
		return ERR_NONE;
    a8ea:	2000      	movs	r0, #0
    a8ec:	e7c1      	b.n	a872 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a8ee:	f04f 30ff 	mov.w	r0, #4294967295
    a8f2:	e7be      	b.n	a872 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    a8f4:	2000      	movs	r0, #0
    a8f6:	e7bc      	b.n	a872 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a8f8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    a8fa:	e7ba      	b.n	a872 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a8fc:	f06f 0009 	mvn.w	r0, #9
    a900:	e7b7      	b.n	a872 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a902:	f06f 0009 	mvn.w	r0, #9
    a906:	e7b4      	b.n	a872 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a908:	2000      	movs	r0, #0
    a90a:	e7b2      	b.n	a872 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    a90c:	f06f 000c 	mvn.w	r0, #12
    a910:	e7af      	b.n	a872 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a912:	f04f 30ff 	mov.w	r0, #4294967295
    a916:	e7ac      	b.n	a872 <cdcdf_acm_req+0x42>
    a918:	20000e54 	.word	0x20000e54
    a91c:	0000b979 	.word	0x0000b979
    a920:	20000e5c 	.word	0x20000e5c
    a924:	0000b455 	.word	0x0000b455

0000a928 <cdcdf_acm_ctrl>:
{
    a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a92c:	b083      	sub	sp, #12
    a92e:	4616      	mov	r6, r2
	switch (ctrl) {
    a930:	2901      	cmp	r1, #1
    a932:	d066      	beq.n	aa02 <cdcdf_acm_ctrl+0xda>
    a934:	b141      	cbz	r1, a948 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    a936:	2902      	cmp	r1, #2
    a938:	bf0c      	ite	eq
    a93a:	f06f 001a 	mvneq.w	r0, #26
    a93e:	f06f 000c 	mvnne.w	r0, #12
}
    a942:	b003      	add	sp, #12
    a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a948:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    a94c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a94e:	2800      	cmp	r0, #0
    a950:	f000 8085 	beq.w	aa5e <cdcdf_acm_ctrl+0x136>
    a954:	f10a 3bff 	add.w	fp, sl, #4294967295
    a958:	f10a 0301 	add.w	r3, sl, #1
    a95c:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a95e:	4f46      	ldr	r7, [pc, #280]	; (aa78 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    a960:	f8df 9124 	ldr.w	r9, [pc, #292]	; aa88 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a964:	f8df 8124 	ldr.w	r8, [pc, #292]	; aa8c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    a968:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a96a:	7943      	ldrb	r3, [r0, #5]
    a96c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a970:	2b02      	cmp	r3, #2
    a972:	d002      	beq.n	a97a <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    a974:	f06f 0009 	mvn.w	r0, #9
    a978:	e7e3      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
    a97a:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a97e:	f89b 3000 	ldrb.w	r3, [fp]
    a982:	429a      	cmp	r2, r3
    a984:	d06e      	beq.n	aa64 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a986:	2bff      	cmp	r3, #255	; 0xff
    a988:	d16f      	bne.n	aa6a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a98a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a98e:	2205      	movs	r2, #5
    a990:	6871      	ldr	r1, [r6, #4]
    a992:	4b3a      	ldr	r3, [pc, #232]	; (aa7c <cdcdf_acm_ctrl+0x154>)
    a994:	4798      	blx	r3
		while (NULL != ep) {
    a996:	4604      	mov	r4, r0
    a998:	b1f8      	cbz	r0, a9da <cdcdf_acm_ctrl+0xb2>
    a99a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    a99e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    a9a0:	7963      	ldrb	r3, [r4, #5]
    a9a2:	7922      	ldrb	r2, [r4, #4]
    a9a4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a9a8:	b292      	uxth	r2, r2
    a9aa:	78e1      	ldrb	r1, [r4, #3]
    a9ac:	4628      	mov	r0, r5
    a9ae:	47b8      	blx	r7
    a9b0:	2800      	cmp	r0, #0
    a9b2:	d15d      	bne.n	aa70 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a9b4:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a9b8:	bf14      	ite	ne
    a9ba:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a9be:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a9c2:	4628      	mov	r0, r5
    a9c4:	47c8      	blx	r9
			desc->sod = ep;
    a9c6:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a9c8:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a9ca:	6871      	ldr	r1, [r6, #4]
    a9cc:	4420      	add	r0, r4
    a9ce:	47c0      	blx	r8
		while (NULL != ep) {
    a9d0:	4604      	mov	r4, r0
    a9d2:	2800      	cmp	r0, #0
    a9d4:	d1e3      	bne.n	a99e <cdcdf_acm_ctrl+0x76>
    a9d6:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a9da:	6833      	ldr	r3, [r6, #0]
    a9dc:	7818      	ldrb	r0, [r3, #0]
    a9de:	2204      	movs	r2, #4
    a9e0:	6871      	ldr	r1, [r6, #4]
    a9e2:	4418      	add	r0, r3
    a9e4:	4b25      	ldr	r3, [pc, #148]	; (aa7c <cdcdf_acm_ctrl+0x154>)
    a9e6:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    a9e8:	9b00      	ldr	r3, [sp, #0]
    a9ea:	459b      	cmp	fp, r3
    a9ec:	d004      	beq.n	a9f8 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    a9ee:	2800      	cmp	r0, #0
    a9f0:	d1ba      	bne.n	a968 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    a9f2:	f06f 0009 	mvn.w	r0, #9
    a9f6:	e7a4      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    a9f8:	2201      	movs	r2, #1
    a9fa:	4b21      	ldr	r3, [pc, #132]	; (aa80 <cdcdf_acm_ctrl+0x158>)
    a9fc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a9fe:	2000      	movs	r0, #0
    aa00:	e79f      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    aa02:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    aa04:	b142      	cbz	r2, aa18 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    aa06:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    aa08:	795b      	ldrb	r3, [r3, #5]
    aa0a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    aa0e:	2b02      	cmp	r3, #2
    aa10:	d002      	beq.n	aa18 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    aa12:	f06f 0009 	mvn.w	r0, #9
    aa16:	e794      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    aa18:	7823      	ldrb	r3, [r4, #0]
    aa1a:	2bff      	cmp	r3, #255	; 0xff
    aa1c:	d008      	beq.n	aa30 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    aa1e:	23ff      	movs	r3, #255	; 0xff
    aa20:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    aa22:	78a0      	ldrb	r0, [r4, #2]
    aa24:	4298      	cmp	r0, r3
    aa26:	d003      	beq.n	aa30 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    aa28:	4b16      	ldr	r3, [pc, #88]	; (aa84 <cdcdf_acm_ctrl+0x15c>)
    aa2a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    aa2c:	23ff      	movs	r3, #255	; 0xff
    aa2e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    aa30:	7863      	ldrb	r3, [r4, #1]
    aa32:	2bff      	cmp	r3, #255	; 0xff
    aa34:	d008      	beq.n	aa48 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    aa36:	23ff      	movs	r3, #255	; 0xff
    aa38:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    aa3a:	78e0      	ldrb	r0, [r4, #3]
    aa3c:	4298      	cmp	r0, r3
    aa3e:	d003      	beq.n	aa48 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    aa40:	4b10      	ldr	r3, [pc, #64]	; (aa84 <cdcdf_acm_ctrl+0x15c>)
    aa42:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    aa44:	23ff      	movs	r3, #255	; 0xff
    aa46:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    aa48:	7920      	ldrb	r0, [r4, #4]
    aa4a:	28ff      	cmp	r0, #255	; 0xff
    aa4c:	d003      	beq.n	aa56 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    aa4e:	4b0d      	ldr	r3, [pc, #52]	; (aa84 <cdcdf_acm_ctrl+0x15c>)
    aa50:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    aa52:	23ff      	movs	r3, #255	; 0xff
    aa54:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    aa56:	2000      	movs	r0, #0
    aa58:	4b09      	ldr	r3, [pc, #36]	; (aa80 <cdcdf_acm_ctrl+0x158>)
    aa5a:	7158      	strb	r0, [r3, #5]
    aa5c:	e771      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    aa5e:	f06f 0009 	mvn.w	r0, #9
    aa62:	e76e      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    aa64:	f06f 0011 	mvn.w	r0, #17
    aa68:	e76b      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    aa6a:	f06f 001b 	mvn.w	r0, #27
    aa6e:	e768      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    aa70:	f06f 0013 	mvn.w	r0, #19
    aa74:	e765      	b.n	a942 <cdcdf_acm_ctrl+0x1a>
    aa76:	bf00      	nop
    aa78:	00005ba9 	.word	0x00005ba9
    aa7c:	0000b999 	.word	0x0000b999
    aa80:	20000e54 	.word	0x20000e54
    aa84:	00005c11 	.word	0x00005c11
    aa88:	00005c3d 	.word	0x00005c3d
    aa8c:	0000b9d3 	.word	0x0000b9d3

0000aa90 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    aa90:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    aa92:	4b0a      	ldr	r3, [pc, #40]	; (aabc <cdcdf_acm_init+0x2c>)
    aa94:	4798      	blx	r3
    aa96:	2801      	cmp	r0, #1
    aa98:	d80c      	bhi.n	aab4 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    aa9a:	4809      	ldr	r0, [pc, #36]	; (aac0 <cdcdf_acm_init+0x30>)
    aa9c:	4b09      	ldr	r3, [pc, #36]	; (aac4 <cdcdf_acm_init+0x34>)
    aa9e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    aaa0:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    aaa2:	3018      	adds	r0, #24
    aaa4:	4b08      	ldr	r3, [pc, #32]	; (aac8 <cdcdf_acm_init+0x38>)
    aaa6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    aaa8:	4908      	ldr	r1, [pc, #32]	; (aacc <cdcdf_acm_init+0x3c>)
    aaaa:	2001      	movs	r0, #1
    aaac:	4b08      	ldr	r3, [pc, #32]	; (aad0 <cdcdf_acm_init+0x40>)
    aaae:	4798      	blx	r3
	return ERR_NONE;
    aab0:	2000      	movs	r0, #0
    aab2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    aab4:	f06f 0010 	mvn.w	r0, #16
}
    aab8:	bd08      	pop	{r3, pc}
    aaba:	bf00      	nop
    aabc:	0000b985 	.word	0x0000b985
    aac0:	20000e54 	.word	0x20000e54
    aac4:	0000a929 	.word	0x0000a929
    aac8:	0000b925 	.word	0x0000b925
    aacc:	20000398 	.word	0x20000398
    aad0:	0000b891 	.word	0x0000b891

0000aad4 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    aad4:	4b07      	ldr	r3, [pc, #28]	; (aaf4 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    aad6:	795b      	ldrb	r3, [r3, #5]
    aad8:	b143      	cbz	r3, aaec <cdcdf_acm_write+0x18>
{
    aada:	b510      	push	{r4, lr}
    aadc:	460a      	mov	r2, r1
    aade:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    aae0:	2301      	movs	r3, #1
    aae2:	4804      	ldr	r0, [pc, #16]	; (aaf4 <cdcdf_acm_write+0x20>)
    aae4:	78c0      	ldrb	r0, [r0, #3]
    aae6:	4c04      	ldr	r4, [pc, #16]	; (aaf8 <cdcdf_acm_write+0x24>)
    aae8:	47a0      	blx	r4
    aaea:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    aaec:	f06f 0010 	mvn.w	r0, #16
    aaf0:	4770      	bx	lr
    aaf2:	bf00      	nop
    aaf4:	20000e54 	.word	0x20000e54
    aaf8:	0000b455 	.word	0x0000b455

0000aafc <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    aafc:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    aafe:	780b      	ldrb	r3, [r1, #0]
    ab00:	2b81      	cmp	r3, #129	; 0x81
    ab02:	d010      	beq.n	ab26 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ab04:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ab08:	2b01      	cmp	r3, #1
    ab0a:	d13f      	bne.n	ab8c <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    ab0c:	888a      	ldrh	r2, [r1, #4]
    ab0e:	4b22      	ldr	r3, [pc, #136]	; (ab98 <hid_keyboard_req+0x9c>)
    ab10:	7b1b      	ldrb	r3, [r3, #12]
    ab12:	429a      	cmp	r2, r3
    ab14:	d13d      	bne.n	ab92 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    ab16:	784b      	ldrb	r3, [r1, #1]
    ab18:	2b03      	cmp	r3, #3
    ab1a:	d028      	beq.n	ab6e <hid_keyboard_req+0x72>
    ab1c:	2b0b      	cmp	r3, #11
    ab1e:	d02c      	beq.n	ab7a <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    ab20:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    ab24:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    ab26:	784b      	ldrb	r3, [r1, #1]
    ab28:	2b06      	cmp	r3, #6
    ab2a:	d002      	beq.n	ab32 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    ab2c:	f06f 0009 	mvn.w	r0, #9
    ab30:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    ab32:	888a      	ldrh	r2, [r1, #4]
    ab34:	4b18      	ldr	r3, [pc, #96]	; (ab98 <hid_keyboard_req+0x9c>)
    ab36:	7b1b      	ldrb	r3, [r3, #12]
    ab38:	429a      	cmp	r2, r3
    ab3a:	d002      	beq.n	ab42 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    ab3c:	f06f 0009 	mvn.w	r0, #9
    ab40:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    ab42:	884b      	ldrh	r3, [r1, #2]
    ab44:	0a1b      	lsrs	r3, r3, #8
    ab46:	2b21      	cmp	r3, #33	; 0x21
    ab48:	d004      	beq.n	ab54 <hid_keyboard_req+0x58>
    ab4a:	2b22      	cmp	r3, #34	; 0x22
    ab4c:	d009      	beq.n	ab62 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    ab4e:	f06f 000c 	mvn.w	r0, #12
    ab52:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    ab54:	4b10      	ldr	r3, [pc, #64]	; (ab98 <hid_keyboard_req+0x9c>)
    ab56:	6819      	ldr	r1, [r3, #0]
    ab58:	2300      	movs	r3, #0
    ab5a:	780a      	ldrb	r2, [r1, #0]
    ab5c:	4c0f      	ldr	r4, [pc, #60]	; (ab9c <hid_keyboard_req+0xa0>)
    ab5e:	47a0      	blx	r4
    ab60:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    ab62:	2300      	movs	r3, #0
    ab64:	223b      	movs	r2, #59	; 0x3b
    ab66:	490e      	ldr	r1, [pc, #56]	; (aba0 <hid_keyboard_req+0xa4>)
    ab68:	4c0c      	ldr	r4, [pc, #48]	; (ab9c <hid_keyboard_req+0xa0>)
    ab6a:	47a0      	blx	r4
    ab6c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    ab6e:	2300      	movs	r3, #0
    ab70:	2201      	movs	r2, #1
    ab72:	490c      	ldr	r1, [pc, #48]	; (aba4 <hid_keyboard_req+0xa8>)
    ab74:	4c09      	ldr	r4, [pc, #36]	; (ab9c <hid_keyboard_req+0xa0>)
    ab76:	47a0      	blx	r4
    ab78:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    ab7a:	884a      	ldrh	r2, [r1, #2]
    ab7c:	4b06      	ldr	r3, [pc, #24]	; (ab98 <hid_keyboard_req+0x9c>)
    ab7e:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    ab80:	2300      	movs	r3, #0
    ab82:	461a      	mov	r2, r3
    ab84:	4619      	mov	r1, r3
    ab86:	4c05      	ldr	r4, [pc, #20]	; (ab9c <hid_keyboard_req+0xa0>)
    ab88:	47a0      	blx	r4
    ab8a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    ab8c:	f06f 0009 	mvn.w	r0, #9
    ab90:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    ab92:	f06f 0009 	mvn.w	r0, #9
    ab96:	bd10      	pop	{r4, pc}
    ab98:	20000e78 	.word	0x20000e78
    ab9c:	0000b455 	.word	0x0000b455
    aba0:	0000e52c 	.word	0x0000e52c
    aba4:	20000e87 	.word	0x20000e87

0000aba8 <hid_keyboard_ctrl>:
{
    aba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abac:	4614      	mov	r4, r2
	switch (ctrl) {
    abae:	2901      	cmp	r1, #1
    abb0:	d050      	beq.n	ac54 <hid_keyboard_ctrl+0xac>
    abb2:	b141      	cbz	r1, abc6 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    abb4:	2902      	cmp	r1, #2
    abb6:	bf0c      	ite	eq
    abb8:	f06f 051a 	mvneq.w	r5, #26
    abbc:	f06f 050c 	mvnne.w	r5, #12
}
    abc0:	4628      	mov	r0, r5
    abc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    abc6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    abca:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    abcc:	2b00      	cmp	r3, #0
    abce:	d05e      	beq.n	ac8e <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    abd0:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    abd2:	795b      	ldrb	r3, [r3, #5]
    abd4:	2b03      	cmp	r3, #3
    abd6:	d15d      	bne.n	ac94 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    abd8:	f898 300c 	ldrb.w	r3, [r8, #12]
    abdc:	429a      	cmp	r2, r3
    abde:	d05c      	beq.n	ac9a <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    abe0:	2bff      	cmp	r3, #255	; 0xff
    abe2:	d15d      	bne.n	aca0 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    abe4:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    abe8:	6823      	ldr	r3, [r4, #0]
    abea:	7818      	ldrb	r0, [r3, #0]
    abec:	2221      	movs	r2, #33	; 0x21
    abee:	6861      	ldr	r1, [r4, #4]
    abf0:	4418      	add	r0, r3
    abf2:	4b31      	ldr	r3, [pc, #196]	; (acb8 <hid_keyboard_ctrl+0x110>)
    abf4:	4798      	blx	r3
    abf6:	4b31      	ldr	r3, [pc, #196]	; (acbc <hid_keyboard_ctrl+0x114>)
    abf8:	6018      	str	r0, [r3, #0]
    abfa:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    abfc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; acc4 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ac00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; acc8 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    ac04:	f8df b0c4 	ldr.w	fp, [pc, #196]	; accc <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ac08:	6823      	ldr	r3, [r4, #0]
    ac0a:	7818      	ldrb	r0, [r3, #0]
    ac0c:	6861      	ldr	r1, [r4, #4]
    ac0e:	4418      	add	r0, r3
    ac10:	47c8      	blx	r9
		desc->sod = ep;
    ac12:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    ac14:	2800      	cmp	r0, #0
    ac16:	d046      	beq.n	aca6 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    ac18:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    ac1a:	7943      	ldrb	r3, [r0, #5]
    ac1c:	7902      	ldrb	r2, [r0, #4]
    ac1e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ac22:	b292      	uxth	r2, r2
    ac24:	78c1      	ldrb	r1, [r0, #3]
    ac26:	4638      	mov	r0, r7
    ac28:	47d0      	blx	sl
    ac2a:	4605      	mov	r5, r0
    ac2c:	2800      	cmp	r0, #0
    ac2e:	d13d      	bne.n	acac <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ac30:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    ac34:	bf14      	ite	ne
    ac36:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ac3a:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    ac3e:	4638      	mov	r0, r7
    ac40:	47d8      	blx	fp
    ac42:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    ac44:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    ac48:	d1de      	bne.n	ac08 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    ac4a:	4b1c      	ldr	r3, [pc, #112]	; (acbc <hid_keyboard_ctrl+0x114>)
    ac4c:	2201      	movs	r2, #1
    ac4e:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    ac50:	741a      	strb	r2, [r3, #16]
    ac52:	e7b5      	b.n	abc0 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    ac54:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    ac56:	b11a      	cbz	r2, ac60 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ac58:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    ac5a:	795b      	ldrb	r3, [r3, #5]
    ac5c:	2b03      	cmp	r3, #3
    ac5e:	d128      	bne.n	acb2 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    ac60:	7b2b      	ldrb	r3, [r5, #12]
    ac62:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    ac64:	bf1c      	itt	ne
    ac66:	23ff      	movne	r3, #255	; 0xff
    ac68:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    ac6a:	7b68      	ldrb	r0, [r5, #13]
    ac6c:	28ff      	cmp	r0, #255	; 0xff
    ac6e:	d003      	beq.n	ac78 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    ac70:	4b13      	ldr	r3, [pc, #76]	; (acc0 <hid_keyboard_ctrl+0x118>)
    ac72:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ac74:	23ff      	movs	r3, #255	; 0xff
    ac76:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    ac78:	7ba8      	ldrb	r0, [r5, #14]
    ac7a:	28ff      	cmp	r0, #255	; 0xff
    ac7c:	d003      	beq.n	ac86 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    ac7e:	4b10      	ldr	r3, [pc, #64]	; (acc0 <hid_keyboard_ctrl+0x118>)
    ac80:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ac82:	23ff      	movs	r3, #255	; 0xff
    ac84:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    ac86:	2500      	movs	r5, #0
    ac88:	4b0c      	ldr	r3, [pc, #48]	; (acbc <hid_keyboard_ctrl+0x114>)
    ac8a:	741d      	strb	r5, [r3, #16]
    ac8c:	e798      	b.n	abc0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    ac8e:	f06f 0509 	mvn.w	r5, #9
    ac92:	e795      	b.n	abc0 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    ac94:	f06f 0509 	mvn.w	r5, #9
    ac98:	e792      	b.n	abc0 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    ac9a:	f06f 0511 	mvn.w	r5, #17
    ac9e:	e78f      	b.n	abc0 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    aca0:	f06f 051b 	mvn.w	r5, #27
    aca4:	e78c      	b.n	abc0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    aca6:	f06f 0509 	mvn.w	r5, #9
    acaa:	e789      	b.n	abc0 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    acac:	f06f 0513 	mvn.w	r5, #19
    acb0:	e786      	b.n	abc0 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    acb2:	f06f 0509 	mvn.w	r5, #9
    acb6:	e783      	b.n	abc0 <hid_keyboard_ctrl+0x18>
    acb8:	0000b999 	.word	0x0000b999
    acbc:	20000e78 	.word	0x20000e78
    acc0:	00005c11 	.word	0x00005c11
    acc4:	0000b9d3 	.word	0x0000b9d3
    acc8:	00005ba9 	.word	0x00005ba9
    accc:	00005c3d 	.word	0x00005c3d

0000acd0 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    acd0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    acd2:	4b0a      	ldr	r3, [pc, #40]	; (acfc <hiddf_keyboard_init+0x2c>)
    acd4:	4798      	blx	r3
    acd6:	2801      	cmp	r0, #1
    acd8:	d80c      	bhi.n	acf4 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    acda:	4809      	ldr	r0, [pc, #36]	; (ad00 <hiddf_keyboard_init+0x30>)
    acdc:	4b09      	ldr	r3, [pc, #36]	; (ad04 <hiddf_keyboard_init+0x34>)
    acde:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    ace0:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    ace2:	3014      	adds	r0, #20
    ace4:	4b08      	ldr	r3, [pc, #32]	; (ad08 <hiddf_keyboard_init+0x38>)
    ace6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    ace8:	4908      	ldr	r1, [pc, #32]	; (ad0c <hiddf_keyboard_init+0x3c>)
    acea:	2001      	movs	r0, #1
    acec:	4b08      	ldr	r3, [pc, #32]	; (ad10 <hiddf_keyboard_init+0x40>)
    acee:	4798      	blx	r3
	return ERR_NONE;
    acf0:	2000      	movs	r0, #0
    acf2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    acf4:	f06f 0010 	mvn.w	r0, #16
}
    acf8:	bd08      	pop	{r3, pc}
    acfa:	bf00      	nop
    acfc:	0000b985 	.word	0x0000b985
    ad00:	20000e78 	.word	0x20000e78
    ad04:	0000aba9 	.word	0x0000aba9
    ad08:	0000b925 	.word	0x0000b925
    ad0c:	200003a0 	.word	0x200003a0
    ad10:	0000b891 	.word	0x0000b891

0000ad14 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    ad14:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    ad16:	4b26      	ldr	r3, [pc, #152]	; (adb0 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    ad18:	7c1b      	ldrb	r3, [r3, #16]
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d045      	beq.n	adaa <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    ad1e:	4a24      	ldr	r2, [pc, #144]	; (adb0 <hiddf_keyboard_keys_state_change+0x9c>)
    ad20:	2300      	movs	r3, #0
    ad22:	6053      	str	r3, [r2, #4]
    ad24:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    ad26:	b329      	cbz	r1, ad74 <hiddf_keyboard_keys_state_change+0x60>
    ad28:	4603      	mov	r3, r0
    ad2a:	1e4d      	subs	r5, r1, #1
    ad2c:	b2ed      	uxtb	r5, r5
    ad2e:	3501      	adds	r5, #1
    ad30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ad34:	4405      	add	r5, r0
    ad36:	2200      	movs	r2, #0
    ad38:	e002      	b.n	ad40 <hiddf_keyboard_keys_state_change+0x2c>
    ad3a:	3303      	adds	r3, #3
    ad3c:	42ab      	cmp	r3, r5
    ad3e:	d005      	beq.n	ad4c <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    ad40:	785c      	ldrb	r4, [r3, #1]
    ad42:	2c00      	cmp	r4, #0
    ad44:	d0f9      	beq.n	ad3a <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    ad46:	3201      	adds	r2, #1
    ad48:	b2d2      	uxtb	r2, r2
    ad4a:	e7f6      	b.n	ad3a <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    ad4c:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    ad4e:	b2d2      	uxtb	r2, r2
    ad50:	2a06      	cmp	r2, #6
    ad52:	d809      	bhi.n	ad68 <hiddf_keyboard_keys_state_change+0x54>
    ad54:	4603      	mov	r3, r0
    ad56:	1e4a      	subs	r2, r1, #1
    ad58:	b2d2      	uxtb	r2, r2
    ad5a:	3201      	adds	r2, #1
    ad5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ad60:	4410      	add	r0, r2
    ad62:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    ad64:	4d12      	ldr	r5, [pc, #72]	; (adb0 <hiddf_keyboard_keys_state_change+0x9c>)
    ad66:	e015      	b.n	ad94 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    ad68:	4b11      	ldr	r3, [pc, #68]	; (adb0 <hiddf_keyboard_keys_state_change+0x9c>)
    ad6a:	f04f 32ff 	mov.w	r2, #4294967295
    ad6e:	f8c3 2006 	str.w	r2, [r3, #6]
    ad72:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    ad74:	480e      	ldr	r0, [pc, #56]	; (adb0 <hiddf_keyboard_keys_state_change+0x9c>)
    ad76:	2300      	movs	r3, #0
    ad78:	2208      	movs	r2, #8
    ad7a:	1d01      	adds	r1, r0, #4
    ad7c:	7b40      	ldrb	r0, [r0, #13]
    ad7e:	4c0d      	ldr	r4, [pc, #52]	; (adb4 <hiddf_keyboard_keys_state_change+0xa0>)
    ad80:	47a0      	blx	r4
    ad82:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    ad84:	1c62      	adds	r2, r4, #1
    ad86:	7819      	ldrb	r1, [r3, #0]
    ad88:	442c      	add	r4, r5
    ad8a:	7121      	strb	r1, [r4, #4]
    ad8c:	b2d4      	uxtb	r4, r2
    ad8e:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    ad90:	4283      	cmp	r3, r0
    ad92:	d0ef      	beq.n	ad74 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    ad94:	789a      	ldrb	r2, [r3, #2]
    ad96:	2a01      	cmp	r2, #1
    ad98:	d1f9      	bne.n	ad8e <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    ad9a:	785a      	ldrb	r2, [r3, #1]
    ad9c:	2a00      	cmp	r2, #0
    ad9e:	d0f1      	beq.n	ad84 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    ada0:	792a      	ldrb	r2, [r5, #4]
    ada2:	7819      	ldrb	r1, [r3, #0]
    ada4:	430a      	orrs	r2, r1
    ada6:	712a      	strb	r2, [r5, #4]
    ada8:	e7f1      	b.n	ad8e <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    adaa:	f06f 0010 	mvn.w	r0, #16
}
    adae:	bd38      	pop	{r3, r4, r5, pc}
    adb0:	20000e78 	.word	0x20000e78
    adb4:	0000b455 	.word	0x0000b455

0000adb8 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    adb8:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    adba:	780b      	ldrb	r3, [r1, #0]
    adbc:	2b81      	cmp	r3, #129	; 0x81
    adbe:	d010      	beq.n	ade2 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    adc0:	f3c3 1341 	ubfx	r3, r3, #5, #2
    adc4:	2b01      	cmp	r3, #1
    adc6:	d13f      	bne.n	ae48 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    adc8:	888a      	ldrh	r2, [r1, #4]
    adca:	4b22      	ldr	r3, [pc, #136]	; (ae54 <hid_mouse_req+0x9c>)
    adcc:	7a1b      	ldrb	r3, [r3, #8]
    adce:	429a      	cmp	r2, r3
    add0:	d13d      	bne.n	ae4e <hid_mouse_req+0x96>
			switch (req->bRequest) {
    add2:	784b      	ldrb	r3, [r1, #1]
    add4:	2b03      	cmp	r3, #3
    add6:	d028      	beq.n	ae2a <hid_mouse_req+0x72>
    add8:	2b0b      	cmp	r3, #11
    adda:	d02c      	beq.n	ae36 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    addc:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    ade0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    ade2:	784b      	ldrb	r3, [r1, #1]
    ade4:	2b06      	cmp	r3, #6
    ade6:	d002      	beq.n	adee <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    ade8:	f06f 0009 	mvn.w	r0, #9
    adec:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    adee:	888a      	ldrh	r2, [r1, #4]
    adf0:	4b18      	ldr	r3, [pc, #96]	; (ae54 <hid_mouse_req+0x9c>)
    adf2:	7a1b      	ldrb	r3, [r3, #8]
    adf4:	429a      	cmp	r2, r3
    adf6:	d002      	beq.n	adfe <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    adf8:	f06f 0009 	mvn.w	r0, #9
    adfc:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    adfe:	884b      	ldrh	r3, [r1, #2]
    ae00:	0a1b      	lsrs	r3, r3, #8
    ae02:	2b21      	cmp	r3, #33	; 0x21
    ae04:	d004      	beq.n	ae10 <hid_mouse_req+0x58>
    ae06:	2b22      	cmp	r3, #34	; 0x22
    ae08:	d009      	beq.n	ae1e <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    ae0a:	f06f 000c 	mvn.w	r0, #12
    ae0e:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    ae10:	4b10      	ldr	r3, [pc, #64]	; (ae54 <hid_mouse_req+0x9c>)
    ae12:	6819      	ldr	r1, [r3, #0]
    ae14:	2300      	movs	r3, #0
    ae16:	780a      	ldrb	r2, [r1, #0]
    ae18:	4c0f      	ldr	r4, [pc, #60]	; (ae58 <hid_mouse_req+0xa0>)
    ae1a:	47a0      	blx	r4
    ae1c:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    ae1e:	2300      	movs	r3, #0
    ae20:	2234      	movs	r2, #52	; 0x34
    ae22:	490e      	ldr	r1, [pc, #56]	; (ae5c <hid_mouse_req+0xa4>)
    ae24:	4c0c      	ldr	r4, [pc, #48]	; (ae58 <hid_mouse_req+0xa0>)
    ae26:	47a0      	blx	r4
    ae28:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    ae2a:	2300      	movs	r3, #0
    ae2c:	2201      	movs	r2, #1
    ae2e:	490c      	ldr	r1, [pc, #48]	; (ae60 <hid_mouse_req+0xa8>)
    ae30:	4c09      	ldr	r4, [pc, #36]	; (ae58 <hid_mouse_req+0xa0>)
    ae32:	47a0      	blx	r4
    ae34:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    ae36:	884a      	ldrh	r2, [r1, #2]
    ae38:	4b06      	ldr	r3, [pc, #24]	; (ae54 <hid_mouse_req+0x9c>)
    ae3a:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    ae3c:	2300      	movs	r3, #0
    ae3e:	461a      	mov	r2, r3
    ae40:	4619      	mov	r1, r3
    ae42:	4c05      	ldr	r4, [pc, #20]	; (ae58 <hid_mouse_req+0xa0>)
    ae44:	47a0      	blx	r4
    ae46:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    ae48:	f06f 0009 	mvn.w	r0, #9
    ae4c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    ae4e:	f06f 0009 	mvn.w	r0, #9
    ae52:	bd10      	pop	{r4, pc}
    ae54:	20000e98 	.word	0x20000e98
    ae58:	0000b455 	.word	0x0000b455
    ae5c:	0000e568 	.word	0x0000e568
    ae60:	20000ea2 	.word	0x20000ea2

0000ae64 <hid_mouse_ctrl>:
{
    ae64:	b570      	push	{r4, r5, r6, lr}
    ae66:	4614      	mov	r4, r2
	switch (ctrl) {
    ae68:	2901      	cmp	r1, #1
    ae6a:	d040      	beq.n	aeee <hid_mouse_ctrl+0x8a>
    ae6c:	b139      	cbz	r1, ae7e <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    ae6e:	2902      	cmp	r1, #2
    ae70:	bf0c      	ite	eq
    ae72:	f06f 041a 	mvneq.w	r4, #26
    ae76:	f06f 040c 	mvnne.w	r4, #12
}
    ae7a:	4620      	mov	r0, r4
    ae7c:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    ae7e:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    ae80:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    ae82:	2b00      	cmp	r3, #0
    ae84:	d049      	beq.n	af1a <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    ae86:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    ae88:	795b      	ldrb	r3, [r3, #5]
    ae8a:	2b03      	cmp	r3, #3
    ae8c:	d148      	bne.n	af20 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    ae8e:	7a2b      	ldrb	r3, [r5, #8]
    ae90:	429a      	cmp	r2, r3
    ae92:	d048      	beq.n	af26 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    ae94:	2bff      	cmp	r3, #255	; 0xff
    ae96:	d149      	bne.n	af2c <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    ae98:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    ae9a:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    ae9c:	7818      	ldrb	r0, [r3, #0]
    ae9e:	2221      	movs	r2, #33	; 0x21
    aea0:	6861      	ldr	r1, [r4, #4]
    aea2:	4418      	add	r0, r3
    aea4:	4b29      	ldr	r3, [pc, #164]	; (af4c <hid_mouse_ctrl+0xe8>)
    aea6:	4798      	blx	r3
    aea8:	4b29      	ldr	r3, [pc, #164]	; (af50 <hid_mouse_ctrl+0xec>)
    aeaa:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    aeac:	6823      	ldr	r3, [r4, #0]
    aeae:	7818      	ldrb	r0, [r3, #0]
    aeb0:	6861      	ldr	r1, [r4, #4]
    aeb2:	4418      	add	r0, r3
    aeb4:	4b27      	ldr	r3, [pc, #156]	; (af54 <hid_mouse_ctrl+0xf0>)
    aeb6:	4798      	blx	r3
	desc->sod = ep;
    aeb8:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    aeba:	2800      	cmp	r0, #0
    aebc:	d039      	beq.n	af32 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    aebe:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    aec0:	7943      	ldrb	r3, [r0, #5]
    aec2:	7902      	ldrb	r2, [r0, #4]
    aec4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    aec8:	b292      	uxth	r2, r2
    aeca:	78c1      	ldrb	r1, [r0, #3]
    aecc:	4630      	mov	r0, r6
    aece:	4b22      	ldr	r3, [pc, #136]	; (af58 <hid_mouse_ctrl+0xf4>)
    aed0:	4798      	blx	r3
    aed2:	4604      	mov	r4, r0
    aed4:	bb80      	cbnz	r0, af38 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    aed6:	f016 0f80 	tst.w	r6, #128	; 0x80
    aeda:	d030      	beq.n	af3e <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    aedc:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    aede:	4630      	mov	r0, r6
    aee0:	4b1e      	ldr	r3, [pc, #120]	; (af5c <hid_mouse_ctrl+0xf8>)
    aee2:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    aee4:	4b1a      	ldr	r3, [pc, #104]	; (af50 <hid_mouse_ctrl+0xec>)
    aee6:	2201      	movs	r2, #1
    aee8:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    aeea:	72da      	strb	r2, [r3, #11]
    aeec:	e7c5      	b.n	ae7a <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    aeee:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    aef0:	b11a      	cbz	r2, aefa <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    aef2:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    aef4:	795b      	ldrb	r3, [r3, #5]
    aef6:	2b03      	cmp	r3, #3
    aef8:	d124      	bne.n	af44 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    aefa:	7a2b      	ldrb	r3, [r5, #8]
    aefc:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    aefe:	bf1c      	itt	ne
    af00:	23ff      	movne	r3, #255	; 0xff
    af02:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    af04:	7a68      	ldrb	r0, [r5, #9]
    af06:	28ff      	cmp	r0, #255	; 0xff
    af08:	d003      	beq.n	af12 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    af0a:	4b15      	ldr	r3, [pc, #84]	; (af60 <hid_mouse_ctrl+0xfc>)
    af0c:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    af0e:	23ff      	movs	r3, #255	; 0xff
    af10:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    af12:	2400      	movs	r4, #0
    af14:	4b0e      	ldr	r3, [pc, #56]	; (af50 <hid_mouse_ctrl+0xec>)
    af16:	72dc      	strb	r4, [r3, #11]
    af18:	e7af      	b.n	ae7a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    af1a:	f06f 0409 	mvn.w	r4, #9
    af1e:	e7ac      	b.n	ae7a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    af20:	f06f 0409 	mvn.w	r4, #9
    af24:	e7a9      	b.n	ae7a <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    af26:	f06f 0411 	mvn.w	r4, #17
    af2a:	e7a6      	b.n	ae7a <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    af2c:	f06f 041b 	mvn.w	r4, #27
    af30:	e7a3      	b.n	ae7a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    af32:	f06f 0409 	mvn.w	r4, #9
    af36:	e7a0      	b.n	ae7a <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    af38:	f06f 0413 	mvn.w	r4, #19
    af3c:	e79d      	b.n	ae7a <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    af3e:	f04f 34ff 	mov.w	r4, #4294967295
    af42:	e79a      	b.n	ae7a <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    af44:	f06f 0409 	mvn.w	r4, #9
    af48:	e797      	b.n	ae7a <hid_mouse_ctrl+0x16>
    af4a:	bf00      	nop
    af4c:	0000b999 	.word	0x0000b999
    af50:	20000e98 	.word	0x20000e98
    af54:	0000b9d3 	.word	0x0000b9d3
    af58:	00005ba9 	.word	0x00005ba9
    af5c:	00005c3d 	.word	0x00005c3d
    af60:	00005c11 	.word	0x00005c11

0000af64 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    af64:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    af66:	4b0a      	ldr	r3, [pc, #40]	; (af90 <hiddf_mouse_init+0x2c>)
    af68:	4798      	blx	r3
    af6a:	2801      	cmp	r0, #1
    af6c:	d80c      	bhi.n	af88 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    af6e:	4809      	ldr	r0, [pc, #36]	; (af94 <hiddf_mouse_init+0x30>)
    af70:	4b09      	ldr	r3, [pc, #36]	; (af98 <hiddf_mouse_init+0x34>)
    af72:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    af74:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    af76:	300c      	adds	r0, #12
    af78:	4b08      	ldr	r3, [pc, #32]	; (af9c <hiddf_mouse_init+0x38>)
    af7a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    af7c:	4908      	ldr	r1, [pc, #32]	; (afa0 <hiddf_mouse_init+0x3c>)
    af7e:	2001      	movs	r0, #1
    af80:	4b08      	ldr	r3, [pc, #32]	; (afa4 <hiddf_mouse_init+0x40>)
    af82:	4798      	blx	r3
	return ERR_NONE;
    af84:	2000      	movs	r0, #0
    af86:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    af88:	f06f 0010 	mvn.w	r0, #16
}
    af8c:	bd08      	pop	{r3, pc}
    af8e:	bf00      	nop
    af90:	0000b985 	.word	0x0000b985
    af94:	20000e98 	.word	0x20000e98
    af98:	0000ae65 	.word	0x0000ae65
    af9c:	0000b925 	.word	0x0000b925
    afa0:	200003a8 	.word	0x200003a8
    afa4:	0000b891 	.word	0x0000b891

0000afa8 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    afa8:	2200      	movs	r2, #0
    afaa:	4b0d      	ldr	r3, [pc, #52]	; (afe0 <hiddf_mouse_move+0x38>)
    afac:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    afae:	2901      	cmp	r1, #1
    afb0:	d00e      	beq.n	afd0 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    afb2:	2902      	cmp	r1, #2
    afb4:	d00e      	beq.n	afd4 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    afb6:	2903      	cmp	r1, #3
    afb8:	d10f      	bne.n	afda <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    afba:	4b09      	ldr	r3, [pc, #36]	; (afe0 <hiddf_mouse_move+0x38>)
    afbc:	71d8      	strb	r0, [r3, #7]
{
    afbe:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    afc0:	4807      	ldr	r0, [pc, #28]	; (afe0 <hiddf_mouse_move+0x38>)
    afc2:	2300      	movs	r3, #0
    afc4:	2204      	movs	r2, #4
    afc6:	1881      	adds	r1, r0, r2
    afc8:	7a40      	ldrb	r0, [r0, #9]
    afca:	4c06      	ldr	r4, [pc, #24]	; (afe4 <hiddf_mouse_move+0x3c>)
    afcc:	47a0      	blx	r4
    afce:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    afd0:	7158      	strb	r0, [r3, #5]
    afd2:	e7f4      	b.n	afbe <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    afd4:	4b02      	ldr	r3, [pc, #8]	; (afe0 <hiddf_mouse_move+0x38>)
    afd6:	7198      	strb	r0, [r3, #6]
    afd8:	e7f1      	b.n	afbe <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    afda:	f06f 000c 	mvn.w	r0, #12
    afde:	4770      	bx	lr
    afe0:	20000e98 	.word	0x20000e98
    afe4:	0000b455 	.word	0x0000b455

0000afe8 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    afe8:	4770      	bx	lr

0000afea <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    afea:	e7fe      	b.n	afea <midi_cb_ep_bulk_out>

0000afec <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    afec:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    afee:	780b      	ldrb	r3, [r1, #0]
    aff0:	2b81      	cmp	r3, #129	; 0x81
    aff2:	d014      	beq.n	b01e <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    aff4:	f3c3 1341 	ubfx	r3, r3, #5, #2
    aff8:	2b01      	cmp	r3, #1
    affa:	d132      	bne.n	b062 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    affc:	888b      	ldrh	r3, [r1, #4]
    affe:	4a1c      	ldr	r2, [pc, #112]	; (b070 <audio_midi_req+0x84>)
    b000:	7912      	ldrb	r2, [r2, #4]
    b002:	429a      	cmp	r2, r3
    b004:	d003      	beq.n	b00e <audio_midi_req+0x22>
    b006:	4a1a      	ldr	r2, [pc, #104]	; (b070 <audio_midi_req+0x84>)
    b008:	7952      	ldrb	r2, [r2, #5]
    b00a:	429a      	cmp	r2, r3
    b00c:	d12c      	bne.n	b068 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    b00e:	784b      	ldrb	r3, [r1, #1]
    b010:	2b03      	cmp	r3, #3
    b012:	d017      	beq.n	b044 <audio_midi_req+0x58>
    b014:	2b0b      	cmp	r3, #11
    b016:	d01b      	beq.n	b050 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    b018:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    b01c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    b01e:	888b      	ldrh	r3, [r1, #4]
    b020:	4a13      	ldr	r2, [pc, #76]	; (b070 <audio_midi_req+0x84>)
    b022:	7912      	ldrb	r2, [r2, #4]
    b024:	429a      	cmp	r2, r3
    b026:	d006      	beq.n	b036 <audio_midi_req+0x4a>
    b028:	4a11      	ldr	r2, [pc, #68]	; (b070 <audio_midi_req+0x84>)
    b02a:	7952      	ldrb	r2, [r2, #5]
    b02c:	429a      	cmp	r2, r3
    b02e:	d002      	beq.n	b036 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    b030:	f06f 0009 	mvn.w	r0, #9
    b034:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    b036:	4b0e      	ldr	r3, [pc, #56]	; (b070 <audio_midi_req+0x84>)
    b038:	6819      	ldr	r1, [r3, #0]
    b03a:	2300      	movs	r3, #0
    b03c:	780a      	ldrb	r2, [r1, #0]
    b03e:	4c0d      	ldr	r4, [pc, #52]	; (b074 <audio_midi_req+0x88>)
    b040:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    b042:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    b044:	2300      	movs	r3, #0
    b046:	2201      	movs	r2, #1
    b048:	490b      	ldr	r1, [pc, #44]	; (b078 <audio_midi_req+0x8c>)
    b04a:	4c0a      	ldr	r4, [pc, #40]	; (b074 <audio_midi_req+0x88>)
    b04c:	47a0      	blx	r4
    b04e:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    b050:	884a      	ldrh	r2, [r1, #2]
    b052:	4b07      	ldr	r3, [pc, #28]	; (b070 <audio_midi_req+0x84>)
    b054:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    b056:	2300      	movs	r3, #0
    b058:	461a      	mov	r2, r3
    b05a:	4619      	mov	r1, r3
    b05c:	4c05      	ldr	r4, [pc, #20]	; (b074 <audio_midi_req+0x88>)
    b05e:	47a0      	blx	r4
    b060:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    b062:	f06f 0009 	mvn.w	r0, #9
    b066:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    b068:	f06f 0009 	mvn.w	r0, #9
    b06c:	bd10      	pop	{r4, pc}
    b06e:	bf00      	nop
    b070:	20000eb0 	.word	0x20000eb0
    b074:	0000b455 	.word	0x0000b455
    b078:	20000eb8 	.word	0x20000eb8

0000b07c <audio_midi_ctrl>:
{
    b07c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b080:	b083      	sub	sp, #12
    b082:	4615      	mov	r5, r2
	switch (ctrl) {
    b084:	2901      	cmp	r1, #1
    b086:	f000 8092 	beq.w	b1ae <audio_midi_ctrl+0x132>
    b08a:	b141      	cbz	r1, b09e <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    b08c:	2902      	cmp	r1, #2
    b08e:	bf0c      	ite	eq
    b090:	f06f 001a 	mvneq.w	r0, #26
    b094:	f06f 000c 	mvnne.w	r0, #12
}
    b098:	b003      	add	sp, #12
    b09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    b09e:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    b0a2:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    b0a4:	2800      	cmp	r0, #0
    b0a6:	f000 80a9 	beq.w	b1fc <audio_midi_ctrl+0x180>
    b0aa:	f109 0604 	add.w	r6, r9, #4
    b0ae:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b0b0:	f04f 0804 	mov.w	r8, #4
    b0b4:	4f5d      	ldr	r7, [pc, #372]	; (b22c <audio_midi_ctrl+0x1b0>)
    b0b6:	e019      	b.n	b0ec <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b0b8:	f816 3b01 	ldrb.w	r3, [r6], #1
    b0bc:	429a      	cmp	r2, r3
    b0be:	f000 80a3 	beq.w	b208 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b0c2:	2bff      	cmp	r3, #255	; 0xff
    b0c4:	f040 80a3 	bne.w	b20e <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b0c8:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    b0cc:	2c01      	cmp	r4, #1
    b0ce:	d016      	beq.n	b0fe <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b0d0:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    b0d2:	7818      	ldrb	r0, [r3, #0]
    b0d4:	4642      	mov	r2, r8
    b0d6:	6869      	ldr	r1, [r5, #4]
    b0d8:	4418      	add	r0, r3
    b0da:	47b8      	blx	r7
    b0dc:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    b0de:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    b0e2:	f000 809e 	beq.w	b222 <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    b0e6:	2800      	cmp	r0, #0
    b0e8:	f000 808b 	beq.w	b202 <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    b0ec:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    b0ee:	7943      	ldrb	r3, [r0, #5]
    b0f0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b0f4:	2b01      	cmp	r3, #1
    b0f6:	d0df      	beq.n	b0b8 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    b0f8:	f06f 0009 	mvn.w	r0, #9
    b0fc:	e7cc      	b.n	b098 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b0fe:	2205      	movs	r2, #5
    b100:	6869      	ldr	r1, [r5, #4]
    b102:	4b4a      	ldr	r3, [pc, #296]	; (b22c <audio_midi_ctrl+0x1b0>)
    b104:	4798      	blx	r3
    b106:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    b108:	4e49      	ldr	r6, [pc, #292]	; (b230 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b10a:	f8df 8144 	ldr.w	r8, [pc, #324]	; b250 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    b10e:	4f49      	ldr	r7, [pc, #292]	; (b234 <audio_midi_ctrl+0x1b8>)
    b110:	e01a      	b.n	b148 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    b112:	4a47      	ldr	r2, [pc, #284]	; (b230 <audio_midi_ctrl+0x1b4>)
    b114:	7953      	ldrb	r3, [r2, #5]
    b116:	425b      	negs	r3, r3
    b118:	b2db      	uxtb	r3, r3
    b11a:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    b11c:	f06f 0013 	mvn.w	r0, #19
    b120:	e7ba      	b.n	b098 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    b122:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b126:	b2c0      	uxtb	r0, r0
    b128:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    b12c:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    b12e:	4a42      	ldr	r2, [pc, #264]	; (b238 <audio_midi_ctrl+0x1bc>)
    b130:	2102      	movs	r1, #2
    b132:	f899 0006 	ldrb.w	r0, [r9, #6]
    b136:	4b41      	ldr	r3, [pc, #260]	; (b23c <audio_midi_ctrl+0x1c0>)
    b138:	4798      	blx	r3
				desc->sod = ep;
    b13a:	602c      	str	r4, [r5, #0]
    b13c:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b13e:	6869      	ldr	r1, [r5, #4]
    b140:	4420      	add	r0, r4
    b142:	4b3f      	ldr	r3, [pc, #252]	; (b240 <audio_midi_ctrl+0x1c4>)
    b144:	4798      	blx	r3
    b146:	4604      	mov	r4, r0
			while (NULL != ep) {
    b148:	2c00      	cmp	r4, #0
    b14a:	d063      	beq.n	b214 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    b14c:	78a3      	ldrb	r3, [r4, #2]
    b14e:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    b152:	78e3      	ldrb	r3, [r4, #3]
    b154:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    b158:	7962      	ldrb	r2, [r4, #5]
    b15a:	7923      	ldrb	r3, [r4, #4]
    b15c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    b160:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b162:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    b166:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b16a:	b2db      	uxtb	r3, r3
    b16c:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    b16e:	2301      	movs	r3, #1
    b170:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b172:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b176:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b17a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b17e:	b292      	uxth	r2, r2
    b180:	47c0      	blx	r8
    b182:	b2c0      	uxtb	r0, r0
    b184:	7170      	strb	r0, [r6, #5]
    b186:	2800      	cmp	r0, #0
    b188:	d1c3      	bne.n	b112 <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b18a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b18e:	f013 0f80 	tst.w	r3, #128	; 0x80
    b192:	d1c6      	bne.n	b122 <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    b194:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b198:	b2c0      	uxtb	r0, r0
    b19a:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    b19e:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    b1a0:	4a28      	ldr	r2, [pc, #160]	; (b244 <audio_midi_ctrl+0x1c8>)
    b1a2:	2102      	movs	r1, #2
    b1a4:	f899 0007 	ldrb.w	r0, [r9, #7]
    b1a8:	4b24      	ldr	r3, [pc, #144]	; (b23c <audio_midi_ctrl+0x1c0>)
    b1aa:	4798      	blx	r3
    b1ac:	e7c5      	b.n	b13a <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    b1ae:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    b1b0:	b142      	cbz	r2, b1c4 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b1b2:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    b1b4:	795b      	ldrb	r3, [r3, #5]
    b1b6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b1ba:	2b01      	cmp	r3, #1
    b1bc:	d002      	beq.n	b1c4 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    b1be:	f06f 0009 	mvn.w	r0, #9
    b1c2:	e769      	b.n	b098 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    b1c4:	7923      	ldrb	r3, [r4, #4]
    b1c6:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    b1c8:	bf1c      	itt	ne
    b1ca:	23ff      	movne	r3, #255	; 0xff
    b1cc:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    b1ce:	7963      	ldrb	r3, [r4, #5]
    b1d0:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    b1d2:	bf1c      	itt	ne
    b1d4:	23ff      	movne	r3, #255	; 0xff
    b1d6:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    b1d8:	79a0      	ldrb	r0, [r4, #6]
    b1da:	28ff      	cmp	r0, #255	; 0xff
    b1dc:	d003      	beq.n	b1e6 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    b1de:	4b1a      	ldr	r3, [pc, #104]	; (b248 <audio_midi_ctrl+0x1cc>)
    b1e0:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    b1e2:	23ff      	movs	r3, #255	; 0xff
    b1e4:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    b1e6:	79e0      	ldrb	r0, [r4, #7]
    b1e8:	28ff      	cmp	r0, #255	; 0xff
    b1ea:	d003      	beq.n	b1f4 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    b1ec:	4b16      	ldr	r3, [pc, #88]	; (b248 <audio_midi_ctrl+0x1cc>)
    b1ee:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b1f0:	23ff      	movs	r3, #255	; 0xff
    b1f2:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    b1f4:	2000      	movs	r0, #0
    b1f6:	4b15      	ldr	r3, [pc, #84]	; (b24c <audio_midi_ctrl+0x1d0>)
    b1f8:	7358      	strb	r0, [r3, #13]
    b1fa:	e74d      	b.n	b098 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    b1fc:	f06f 0009 	mvn.w	r0, #9
    b200:	e74a      	b.n	b098 <audio_midi_ctrl+0x1c>
    b202:	f06f 0009 	mvn.w	r0, #9
    b206:	e747      	b.n	b098 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    b208:	f06f 0011 	mvn.w	r0, #17
    b20c:	e744      	b.n	b098 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    b20e:	f06f 001b 	mvn.w	r0, #27
    b212:	e741      	b.n	b098 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    b214:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    b216:	7818      	ldrb	r0, [r3, #0]
    b218:	2204      	movs	r2, #4
    b21a:	6869      	ldr	r1, [r5, #4]
    b21c:	4418      	add	r0, r3
    b21e:	4b03      	ldr	r3, [pc, #12]	; (b22c <audio_midi_ctrl+0x1b0>)
    b220:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    b222:	2201      	movs	r2, #1
    b224:	4b09      	ldr	r3, [pc, #36]	; (b24c <audio_midi_ctrl+0x1d0>)
    b226:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b228:	2000      	movs	r0, #0
    b22a:	e735      	b.n	b098 <audio_midi_ctrl+0x1c>
    b22c:	0000b999 	.word	0x0000b999
    b230:	20007ddc 	.word	0x20007ddc
    b234:	00005c3d 	.word	0x00005c3d
    b238:	0000afe9 	.word	0x0000afe9
    b23c:	00005e11 	.word	0x00005e11
    b240:	0000b9d3 	.word	0x0000b9d3
    b244:	0000afeb 	.word	0x0000afeb
    b248:	00005c11 	.word	0x00005c11
    b24c:	20000eb0 	.word	0x20000eb0
    b250:	00005ba9 	.word	0x00005ba9

0000b254 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    b254:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    b256:	4b0a      	ldr	r3, [pc, #40]	; (b280 <audiodf_midi_init+0x2c>)
    b258:	4798      	blx	r3
    b25a:	2801      	cmp	r0, #1
    b25c:	d80c      	bhi.n	b278 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    b25e:	4809      	ldr	r0, [pc, #36]	; (b284 <audiodf_midi_init+0x30>)
    b260:	4b09      	ldr	r3, [pc, #36]	; (b288 <audiodf_midi_init+0x34>)
    b262:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    b264:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    b266:	3010      	adds	r0, #16
    b268:	4b08      	ldr	r3, [pc, #32]	; (b28c <audiodf_midi_init+0x38>)
    b26a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    b26c:	4908      	ldr	r1, [pc, #32]	; (b290 <audiodf_midi_init+0x3c>)
    b26e:	2001      	movs	r0, #1
    b270:	4b08      	ldr	r3, [pc, #32]	; (b294 <audiodf_midi_init+0x40>)
    b272:	4798      	blx	r3
	return ERR_NONE;
    b274:	2000      	movs	r0, #0
    b276:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b278:	f06f 0010 	mvn.w	r0, #16
}
    b27c:	bd08      	pop	{r3, pc}
    b27e:	bf00      	nop
    b280:	0000b985 	.word	0x0000b985
    b284:	20000eb0 	.word	0x20000eb0
    b288:	0000b07d 	.word	0x0000b07d
    b28c:	0000b925 	.word	0x0000b925
    b290:	200003b0 	.word	0x200003b0
    b294:	0000b891 	.word	0x0000b891

0000b298 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    b298:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    b29a:	4c06      	ldr	r4, [pc, #24]	; (b2b4 <audiodf_midi_xfer_packet+0x1c>)
    b29c:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    b29e:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    b2a0:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    b2a2:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    b2a4:	2300      	movs	r3, #0
    b2a6:	2204      	movs	r2, #4
    b2a8:	f104 0109 	add.w	r1, r4, #9
    b2ac:	79a0      	ldrb	r0, [r4, #6]
    b2ae:	4c02      	ldr	r4, [pc, #8]	; (b2b8 <audiodf_midi_xfer_packet+0x20>)
    b2b0:	47a0      	blx	r4
	
	
}
    b2b2:	bd10      	pop	{r4, pc}
    b2b4:	20000eb0 	.word	0x20000eb0
    b2b8:	0000b455 	.word	0x0000b455

0000b2bc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    b2bc:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b2be:	4b07      	ldr	r3, [pc, #28]	; (b2dc <usbdc_unconfig+0x20>)
    b2c0:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    b2c2:	b14c      	cbz	r4, b2d8 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    b2c4:	2600      	movs	r6, #0
    b2c6:	2501      	movs	r5, #1
    b2c8:	6863      	ldr	r3, [r4, #4]
    b2ca:	4632      	mov	r2, r6
    b2cc:	4629      	mov	r1, r5
    b2ce:	4620      	mov	r0, r4
    b2d0:	4798      	blx	r3
		func = func->next;
    b2d2:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    b2d4:	2c00      	cmp	r4, #0
    b2d6:	d1f7      	bne.n	b2c8 <usbdc_unconfig+0xc>
    b2d8:	bd70      	pop	{r4, r5, r6, pc}
    b2da:	bf00      	nop
    b2dc:	20000ecc 	.word	0x20000ecc

0000b2e0 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    b2e0:	b570      	push	{r4, r5, r6, lr}
    b2e2:	4606      	mov	r6, r0
    b2e4:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    b2e6:	4b07      	ldr	r3, [pc, #28]	; (b304 <usbdc_change_notify+0x24>)
    b2e8:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    b2ea:	b91c      	cbnz	r4, b2f4 <usbdc_change_notify+0x14>
    b2ec:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    b2ee:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    b2f0:	2c00      	cmp	r4, #0
    b2f2:	d0fb      	beq.n	b2ec <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    b2f4:	6863      	ldr	r3, [r4, #4]
    b2f6:	2b00      	cmp	r3, #0
    b2f8:	d0f9      	beq.n	b2ee <usbdc_change_notify+0xe>
			cg->cb(change, value);
    b2fa:	4629      	mov	r1, r5
    b2fc:	4630      	mov	r0, r6
    b2fe:	4798      	blx	r3
    b300:	e7f5      	b.n	b2ee <usbdc_change_notify+0xe>
    b302:	bf00      	nop
    b304:	20000ecc 	.word	0x20000ecc

0000b308 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b30a:	4607      	mov	r7, r0
    b30c:	460e      	mov	r6, r1
    b30e:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    b310:	4b0c      	ldr	r3, [pc, #48]	; (b344 <usbdc_request_handler+0x3c>)
    b312:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    b314:	b91c      	cbnz	r4, b31e <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    b316:	2000      	movs	r0, #0
    b318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    b31a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    b31c:	b16c      	cbz	r4, b33a <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    b31e:	6863      	ldr	r3, [r4, #4]
    b320:	2b00      	cmp	r3, #0
    b322:	d0fa      	beq.n	b31a <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    b324:	462a      	mov	r2, r5
    b326:	4631      	mov	r1, r6
    b328:	4638      	mov	r0, r7
    b32a:	4798      	blx	r3
			if (0 == rc) {
    b32c:	b138      	cbz	r0, b33e <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    b32e:	f110 0f0a 	cmn.w	r0, #10
    b332:	d0f2      	beq.n	b31a <usbdc_request_handler+0x12>
				return -1;
    b334:	f04f 30ff 	mov.w	r0, #4294967295
}
    b338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    b33a:	2000      	movs	r0, #0
    b33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    b33e:	2001      	movs	r0, #1
    b340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b342:	bf00      	nop
    b344:	20000ecc 	.word	0x20000ecc

0000b348 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    b348:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    b34a:	4b06      	ldr	r3, [pc, #24]	; (b364 <usbd_sof_cb+0x1c>)
    b34c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    b34e:	b91c      	cbnz	r4, b358 <usbd_sof_cb+0x10>
    b350:	bd10      	pop	{r4, pc}
		sof = sof->next;
    b352:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    b354:	2c00      	cmp	r4, #0
    b356:	d0fb      	beq.n	b350 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    b358:	6863      	ldr	r3, [r4, #4]
    b35a:	2b00      	cmp	r3, #0
    b35c:	d0f9      	beq.n	b352 <usbd_sof_cb+0xa>
			sof->cb();
    b35e:	4798      	blx	r3
    b360:	e7f7      	b.n	b352 <usbd_sof_cb+0xa>
    b362:	bf00      	nop
    b364:	20000ecc 	.word	0x20000ecc

0000b368 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    b368:	b510      	push	{r4, lr}
    b36a:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    b36c:	b119      	cbz	r1, b376 <usbdc_cb_ctl_done+0xe>
    b36e:	2901      	cmp	r1, #1
    b370:	d026      	beq.n	b3c0 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    b372:	2000      	movs	r0, #0
    b374:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    b376:	7813      	ldrb	r3, [r2, #0]
    b378:	2b00      	cmp	r3, #0
    b37a:	d1fa      	bne.n	b372 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    b37c:	7853      	ldrb	r3, [r2, #1]
    b37e:	2b05      	cmp	r3, #5
    b380:	d00f      	beq.n	b3a2 <usbdc_cb_ctl_done+0x3a>
    b382:	2b09      	cmp	r3, #9
    b384:	d1f5      	bne.n	b372 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    b386:	8852      	ldrh	r2, [r2, #2]
    b388:	4b10      	ldr	r3, [pc, #64]	; (b3cc <usbdc_cb_ctl_done+0x64>)
    b38a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    b38c:	8863      	ldrh	r3, [r4, #2]
    b38e:	2b00      	cmp	r3, #0
    b390:	bf14      	ite	ne
    b392:	2104      	movne	r1, #4
    b394:	2103      	moveq	r1, #3
    b396:	4b0d      	ldr	r3, [pc, #52]	; (b3cc <usbdc_cb_ctl_done+0x64>)
    b398:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b39a:	2001      	movs	r0, #1
    b39c:	4b0c      	ldr	r3, [pc, #48]	; (b3d0 <usbdc_cb_ctl_done+0x68>)
    b39e:	4798      	blx	r3
    b3a0:	e7e7      	b.n	b372 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    b3a2:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    b3a4:	b2c0      	uxtb	r0, r0
    b3a6:	4b0b      	ldr	r3, [pc, #44]	; (b3d4 <usbdc_cb_ctl_done+0x6c>)
    b3a8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    b3aa:	8863      	ldrh	r3, [r4, #2]
    b3ac:	2b00      	cmp	r3, #0
    b3ae:	bf14      	ite	ne
    b3b0:	2103      	movne	r1, #3
    b3b2:	2102      	moveq	r1, #2
    b3b4:	4b05      	ldr	r3, [pc, #20]	; (b3cc <usbdc_cb_ctl_done+0x64>)
    b3b6:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    b3b8:	2001      	movs	r0, #1
    b3ba:	4b05      	ldr	r3, [pc, #20]	; (b3d0 <usbdc_cb_ctl_done+0x68>)
    b3bc:	4798      	blx	r3
    b3be:	e7d8      	b.n	b372 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    b3c0:	2201      	movs	r2, #1
    b3c2:	4621      	mov	r1, r4
    b3c4:	2000      	movs	r0, #0
    b3c6:	4b04      	ldr	r3, [pc, #16]	; (b3d8 <usbdc_cb_ctl_done+0x70>)
    b3c8:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    b3ca:	e7d2      	b.n	b372 <usbdc_cb_ctl_done+0xa>
    b3cc:	20000ecc 	.word	0x20000ecc
    b3d0:	0000b2e1 	.word	0x0000b2e1
    b3d4:	00005b9d 	.word	0x00005b9d
    b3d8:	0000b309 	.word	0x0000b309

0000b3dc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    b3dc:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    b3de:	4b0d      	ldr	r3, [pc, #52]	; (b414 <usbdc_reset+0x38>)
    b3e0:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    b3e2:	4d0d      	ldr	r5, [pc, #52]	; (b418 <usbdc_reset+0x3c>)
    b3e4:	2602      	movs	r6, #2
    b3e6:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    b3e8:	2400      	movs	r4, #0
    b3ea:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    b3ec:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    b3ee:	4620      	mov	r0, r4
    b3f0:	4b0a      	ldr	r3, [pc, #40]	; (b41c <usbdc_reset+0x40>)
    b3f2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    b3f4:	7f28      	ldrb	r0, [r5, #28]
    b3f6:	4b0a      	ldr	r3, [pc, #40]	; (b420 <usbdc_reset+0x44>)
    b3f8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    b3fa:	4a0a      	ldr	r2, [pc, #40]	; (b424 <usbdc_reset+0x48>)
    b3fc:	4621      	mov	r1, r4
    b3fe:	4620      	mov	r0, r4
    b400:	4d09      	ldr	r5, [pc, #36]	; (b428 <usbdc_reset+0x4c>)
    b402:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    b404:	4a09      	ldr	r2, [pc, #36]	; (b42c <usbdc_reset+0x50>)
    b406:	4631      	mov	r1, r6
    b408:	4620      	mov	r0, r4
    b40a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    b40c:	4620      	mov	r0, r4
    b40e:	4b08      	ldr	r3, [pc, #32]	; (b430 <usbdc_reset+0x54>)
    b410:	4798      	blx	r3
    b412:	bd70      	pop	{r4, r5, r6, pc}
    b414:	0000b2bd 	.word	0x0000b2bd
    b418:	20000ecc 	.word	0x20000ecc
    b41c:	00005c11 	.word	0x00005c11
    b420:	00005bfd 	.word	0x00005bfd
    b424:	0000b475 	.word	0x0000b475
    b428:	00005e11 	.word	0x00005e11
    b42c:	0000b369 	.word	0x0000b369
    b430:	00005c3d 	.word	0x00005c3d

0000b434 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    b434:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    b436:	b110      	cbz	r0, b43e <usbd_event_cb+0xa>
    b438:	2801      	cmp	r0, #1
    b43a:	d004      	beq.n	b446 <usbd_event_cb+0x12>
    b43c:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    b43e:	2000      	movs	r0, #0
    b440:	4b02      	ldr	r3, [pc, #8]	; (b44c <usbd_event_cb+0x18>)
    b442:	4798      	blx	r3
		break;
    b444:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    b446:	4b02      	ldr	r3, [pc, #8]	; (b450 <usbd_event_cb+0x1c>)
    b448:	4798      	blx	r3
    b44a:	bd08      	pop	{r3, pc}
    b44c:	0000b2e1 	.word	0x0000b2e1
    b450:	0000b3dd 	.word	0x0000b3dd

0000b454 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    b454:	b500      	push	{lr}
    b456:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b458:	9101      	str	r1, [sp, #4]
    b45a:	9202      	str	r2, [sp, #8]
    b45c:	f88d 000c 	strb.w	r0, [sp, #12]
    b460:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    b464:	a801      	add	r0, sp, #4
    b466:	4b02      	ldr	r3, [pc, #8]	; (b470 <usbdc_xfer+0x1c>)
    b468:	4798      	blx	r3
}
    b46a:	b005      	add	sp, #20
    b46c:	f85d fb04 	ldr.w	pc, [sp], #4
    b470:	00005c89 	.word	0x00005c89

0000b474 <usbdc_cb_ctl_req>:
{
    b474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b478:	b083      	sub	sp, #12
    b47a:	4605      	mov	r5, r0
    b47c:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    b47e:	2200      	movs	r2, #0
    b480:	4b9b      	ldr	r3, [pc, #620]	; (b6f0 <usbdc_cb_ctl_req+0x27c>)
    b482:	4798      	blx	r3
    b484:	f1b0 3fff 	cmp.w	r0, #4294967295
    b488:	d00b      	beq.n	b4a2 <usbdc_cb_ctl_req+0x2e>
    b48a:	2801      	cmp	r0, #1
    b48c:	f000 81e3 	beq.w	b856 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    b490:	7823      	ldrb	r3, [r4, #0]
    b492:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    b496:	d008      	beq.n	b4aa <usbdc_cb_ctl_req+0x36>
    b498:	2a80      	cmp	r2, #128	; 0x80
    b49a:	f000 80f4 	beq.w	b686 <usbdc_cb_ctl_req+0x212>
		return false;
    b49e:	2000      	movs	r0, #0
    b4a0:	e000      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b4a2:	2000      	movs	r0, #0
}
    b4a4:	b003      	add	sp, #12
    b4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    b4aa:	7862      	ldrb	r2, [r4, #1]
    b4ac:	3a01      	subs	r2, #1
    b4ae:	2a0a      	cmp	r2, #10
    b4b0:	f200 81d3 	bhi.w	b85a <usbdc_cb_ctl_req+0x3e6>
    b4b4:	e8df f012 	tbh	[pc, r2, lsl #1]
    b4b8:	01d10060 	.word	0x01d10060
    b4bc:	01d10076 	.word	0x01d10076
    b4c0:	01d1000b 	.word	0x01d1000b
    b4c4:	01d101d1 	.word	0x01d101d1
    b4c8:	01d10015 	.word	0x01d10015
    b4cc:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b4ce:	2301      	movs	r3, #1
    b4d0:	2200      	movs	r2, #0
    b4d2:	4611      	mov	r1, r2
    b4d4:	4628      	mov	r0, r5
    b4d6:	4c87      	ldr	r4, [pc, #540]	; (b6f4 <usbdc_cb_ctl_req+0x280>)
    b4d8:	47a0      	blx	r4
    b4da:	fab0 f080 	clz	r0, r0
    b4de:	0940      	lsrs	r0, r0, #5
    b4e0:	e7e0      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    b4e2:	8862      	ldrh	r2, [r4, #2]
    b4e4:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    b4e6:	b1ca      	cbz	r2, b51c <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    b4e8:	4b83      	ldr	r3, [pc, #524]	; (b6f8 <usbdc_cb_ctl_req+0x284>)
    b4ea:	681b      	ldr	r3, [r3, #0]
    b4ec:	6859      	ldr	r1, [r3, #4]
    b4ee:	6818      	ldr	r0, [r3, #0]
    b4f0:	4b82      	ldr	r3, [pc, #520]	; (b6fc <usbdc_cb_ctl_req+0x288>)
    b4f2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b4f4:	2800      	cmp	r0, #0
    b4f6:	f000 81be 	beq.w	b876 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    b4fa:	78c2      	ldrb	r2, [r0, #3]
    b4fc:	7881      	ldrb	r1, [r0, #2]
    b4fe:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    b502:	fa10 f181 	uxtah	r1, r0, r1
    b506:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    b508:	2204      	movs	r2, #4
    b50a:	4b7d      	ldr	r3, [pc, #500]	; (b700 <usbdc_cb_ctl_req+0x28c>)
    b50c:	4798      	blx	r3
    b50e:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b510:	b130      	cbz	r0, b520 <usbdc_cb_ctl_req+0xac>
    b512:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b514:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b6f8 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b518:	4f79      	ldr	r7, [pc, #484]	; (b700 <usbdc_cb_ctl_req+0x28c>)
    b51a:	e018      	b.n	b54e <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    b51c:	4b79      	ldr	r3, [pc, #484]	; (b704 <usbdc_cb_ctl_req+0x290>)
    b51e:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b520:	2301      	movs	r3, #1
    b522:	2200      	movs	r2, #0
    b524:	4611      	mov	r1, r2
    b526:	4628      	mov	r0, r5
    b528:	4c72      	ldr	r4, [pc, #456]	; (b6f4 <usbdc_cb_ctl_req+0x280>)
    b52a:	47a0      	blx	r4
    b52c:	fab0 f080 	clz	r0, r0
    b530:	0940      	lsrs	r0, r0, #5
    b532:	e7b7      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    b534:	464c      	mov	r4, r9
    b536:	e000      	b.n	b53a <usbdc_cb_ctl_req+0xc6>
    b538:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    b53a:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b53c:	7803      	ldrb	r3, [r0, #0]
    b53e:	4418      	add	r0, r3
    b540:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b542:	2204      	movs	r2, #4
    b544:	9901      	ldr	r1, [sp, #4]
    b546:	47b8      	blx	r7
    b548:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    b54a:	2800      	cmp	r0, #0
    b54c:	d0e8      	beq.n	b520 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    b54e:	f890 9002 	ldrb.w	r9, [r0, #2]
    b552:	45a1      	cmp	r9, r4
    b554:	d0f1      	beq.n	b53a <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b556:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    b55a:	2c00      	cmp	r4, #0
    b55c:	d0ea      	beq.n	b534 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    b55e:	2600      	movs	r6, #0
    b560:	6863      	ldr	r3, [r4, #4]
    b562:	466a      	mov	r2, sp
    b564:	4631      	mov	r1, r6
    b566:	4620      	mov	r0, r4
    b568:	4798      	blx	r3
    b56a:	2800      	cmp	r0, #0
    b56c:	d0e4      	beq.n	b538 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    b56e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    b570:	2c00      	cmp	r4, #0
    b572:	d1f5      	bne.n	b560 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    b574:	464c      	mov	r4, r9
    b576:	e7e0      	b.n	b53a <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b578:	f003 031f 	and.w	r3, r3, #31
    b57c:	2b02      	cmp	r3, #2
    b57e:	f040 816e 	bne.w	b85e <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    b582:	88e3      	ldrh	r3, [r4, #6]
    b584:	b10b      	cbz	r3, b58a <usbdc_cb_ctl_req+0x116>
			return false;
    b586:	2000      	movs	r0, #0
    b588:	e78c      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    b58a:	88a0      	ldrh	r0, [r4, #4]
    b58c:	2100      	movs	r1, #0
    b58e:	b2c0      	uxtb	r0, r0
    b590:	4b5d      	ldr	r3, [pc, #372]	; (b708 <usbdc_cb_ctl_req+0x294>)
    b592:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    b594:	2301      	movs	r3, #1
    b596:	2200      	movs	r2, #0
    b598:	4611      	mov	r1, r2
    b59a:	4628      	mov	r0, r5
    b59c:	4c55      	ldr	r4, [pc, #340]	; (b6f4 <usbdc_cb_ctl_req+0x280>)
    b59e:	47a0      	blx	r4
		return true;
    b5a0:	2001      	movs	r0, #1
    b5a2:	e77f      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b5a4:	f003 031f 	and.w	r3, r3, #31
    b5a8:	2b02      	cmp	r3, #2
    b5aa:	f040 815a 	bne.w	b862 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    b5ae:	88e3      	ldrh	r3, [r4, #6]
    b5b0:	b10b      	cbz	r3, b5b6 <usbdc_cb_ctl_req+0x142>
			return false;
    b5b2:	2000      	movs	r0, #0
    b5b4:	e776      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    b5b6:	88a0      	ldrh	r0, [r4, #4]
    b5b8:	2101      	movs	r1, #1
    b5ba:	b2c0      	uxtb	r0, r0
    b5bc:	4b52      	ldr	r3, [pc, #328]	; (b708 <usbdc_cb_ctl_req+0x294>)
    b5be:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    b5c0:	2301      	movs	r3, #1
    b5c2:	2200      	movs	r2, #0
    b5c4:	4611      	mov	r1, r2
    b5c6:	4628      	mov	r0, r5
    b5c8:	4c4a      	ldr	r4, [pc, #296]	; (b6f4 <usbdc_cb_ctl_req+0x280>)
    b5ca:	47a0      	blx	r4
		return true;
    b5cc:	2001      	movs	r0, #1
    b5ce:	e769      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    b5d0:	8866      	ldrh	r6, [r4, #2]
    b5d2:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    b5d4:	4a48      	ldr	r2, [pc, #288]	; (b6f8 <usbdc_cb_ctl_req+0x284>)
    b5d6:	6813      	ldr	r3, [r2, #0]
    b5d8:	7ed2      	ldrb	r2, [r2, #27]
    b5da:	6859      	ldr	r1, [r3, #4]
    b5dc:	6818      	ldr	r0, [r3, #0]
    b5de:	4b47      	ldr	r3, [pc, #284]	; (b6fc <usbdc_cb_ctl_req+0x288>)
    b5e0:	4798      	blx	r3
	if (NULL == ifc) {
    b5e2:	2800      	cmp	r0, #0
    b5e4:	d045      	beq.n	b672 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    b5e6:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    b5e8:	78c2      	ldrb	r2, [r0, #3]
    b5ea:	7881      	ldrb	r1, [r0, #2]
    b5ec:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    b5f0:	fa10 f181 	uxtah	r1, r0, r1
    b5f4:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    b5f6:	2204      	movs	r2, #4
    b5f8:	4b41      	ldr	r3, [pc, #260]	; (b700 <usbdc_cb_ctl_req+0x28c>)
    b5fa:	4798      	blx	r3
    b5fc:	4603      	mov	r3, r0
    b5fe:	2800      	cmp	r0, #0
    b600:	d039      	beq.n	b676 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b602:	2704      	movs	r7, #4
    b604:	4d3e      	ldr	r5, [pc, #248]	; (b700 <usbdc_cb_ctl_req+0x28c>)
    b606:	e008      	b.n	b61a <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    b608:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    b60a:	7803      	ldrb	r3, [r0, #0]
    b60c:	4418      	add	r0, r3
    b60e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b610:	463a      	mov	r2, r7
    b612:	9901      	ldr	r1, [sp, #4]
    b614:	47a8      	blx	r5
		if (NULL == ifc) {
    b616:	4603      	mov	r3, r0
    b618:	b378      	cbz	r0, b67a <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    b61a:	789a      	ldrb	r2, [r3, #2]
    b61c:	42a2      	cmp	r2, r4
    b61e:	d1f3      	bne.n	b608 <usbdc_cb_ctl_req+0x194>
    b620:	78da      	ldrb	r2, [r3, #3]
    b622:	42b2      	cmp	r2, r6
    b624:	d1f0      	bne.n	b608 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    b626:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    b628:	4b33      	ldr	r3, [pc, #204]	; (b6f8 <usbdc_cb_ctl_req+0x284>)
    b62a:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    b62c:	b33d      	cbz	r5, b67e <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    b62e:	2701      	movs	r7, #1
    b630:	686b      	ldr	r3, [r5, #4]
    b632:	466a      	mov	r2, sp
    b634:	4639      	mov	r1, r7
    b636:	4628      	mov	r0, r5
    b638:	4798      	blx	r3
    b63a:	b120      	cbz	r0, b646 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    b63c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b63e:	2d00      	cmp	r5, #0
    b640:	d1f6      	bne.n	b630 <usbdc_cb_ctl_req+0x1bc>
	return false;
    b642:	2000      	movs	r0, #0
    b644:	e72e      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    b646:	686b      	ldr	r3, [r5, #4]
    b648:	466a      	mov	r2, sp
    b64a:	2100      	movs	r1, #0
    b64c:	4628      	mov	r0, r5
    b64e:	4798      	blx	r3
    b650:	b9b8      	cbnz	r0, b682 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    b652:	b136      	cbz	r6, b662 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    b654:	4a28      	ldr	r2, [pc, #160]	; (b6f8 <usbdc_cb_ctl_req+0x284>)
    b656:	2301      	movs	r3, #1
    b658:	fa03 f404 	lsl.w	r4, r3, r4
    b65c:	7f53      	ldrb	r3, [r2, #29]
    b65e:	4323      	orrs	r3, r4
    b660:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    b662:	2300      	movs	r3, #0
    b664:	461a      	mov	r2, r3
    b666:	4619      	mov	r1, r3
    b668:	4618      	mov	r0, r3
    b66a:	4c22      	ldr	r4, [pc, #136]	; (b6f4 <usbdc_cb_ctl_req+0x280>)
    b66c:	47a0      	blx	r4
			return true;
    b66e:	2001      	movs	r0, #1
    b670:	e718      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b672:	2000      	movs	r0, #0
    b674:	e716      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b676:	2000      	movs	r0, #0
    b678:	e714      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
			return false;
    b67a:	2000      	movs	r0, #0
    b67c:	e712      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
	return false;
    b67e:	2000      	movs	r0, #0
    b680:	e710      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
			return false;
    b682:	2000      	movs	r0, #0
    b684:	e70e      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    b686:	7862      	ldrb	r2, [r4, #1]
    b688:	2a0a      	cmp	r2, #10
    b68a:	f200 80ec 	bhi.w	b866 <usbdc_cb_ctl_req+0x3f2>
    b68e:	e8df f012 	tbh	[pc, r2, lsl #1]
    b692:	008e      	.short	0x008e
    b694:	00ea00ea 	.word	0x00ea00ea
    b698:	00ea00ea 	.word	0x00ea00ea
    b69c:	000b00ea 	.word	0x000b00ea
    b6a0:	008200ea 	.word	0x008200ea
    b6a4:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b6a8:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    b6aa:	0a13      	lsrs	r3, r2, #8
    b6ac:	2b02      	cmp	r3, #2
    b6ae:	d02d      	beq.n	b70c <usbdc_cb_ctl_req+0x298>
    b6b0:	2b03      	cmp	r3, #3
    b6b2:	d050      	beq.n	b756 <usbdc_cb_ctl_req+0x2e2>
    b6b4:	2b01      	cmp	r3, #1
    b6b6:	d001      	beq.n	b6bc <usbdc_cb_ctl_req+0x248>
	return false;
    b6b8:	2000      	movs	r0, #0
    b6ba:	e6f3      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    b6bc:	88e2      	ldrh	r2, [r4, #6]
    b6be:	2a12      	cmp	r2, #18
    b6c0:	bf28      	it	cs
    b6c2:	2212      	movcs	r2, #18
    b6c4:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b6c6:	4b0c      	ldr	r3, [pc, #48]	; (b6f8 <usbdc_cb_ctl_req+0x284>)
    b6c8:	681b      	ldr	r3, [r3, #0]
    b6ca:	2201      	movs	r2, #1
    b6cc:	6859      	ldr	r1, [r3, #4]
    b6ce:	6818      	ldr	r0, [r3, #0]
    b6d0:	4b0b      	ldr	r3, [pc, #44]	; (b700 <usbdc_cb_ctl_req+0x28c>)
    b6d2:	4798      	blx	r3
	if (!dev_desc) {
    b6d4:	4601      	mov	r1, r0
    b6d6:	2800      	cmp	r0, #0
    b6d8:	f000 80c7 	beq.w	b86a <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b6dc:	2300      	movs	r3, #0
    b6de:	4622      	mov	r2, r4
    b6e0:	4628      	mov	r0, r5
    b6e2:	4c04      	ldr	r4, [pc, #16]	; (b6f4 <usbdc_cb_ctl_req+0x280>)
    b6e4:	47a0      	blx	r4
    b6e6:	fab0 f080 	clz	r0, r0
    b6ea:	0940      	lsrs	r0, r0, #5
    b6ec:	e6da      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
    b6ee:	bf00      	nop
    b6f0:	0000b309 	.word	0x0000b309
    b6f4:	0000b455 	.word	0x0000b455
    b6f8:	20000ecc 	.word	0x20000ecc
    b6fc:	0000ba19 	.word	0x0000ba19
    b700:	0000b999 	.word	0x0000b999
    b704:	0000b2bd 	.word	0x0000b2bd
    b708:	00005da9 	.word	0x00005da9
	uint16_t length   = req->wLength;
    b70c:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b70e:	4b5b      	ldr	r3, [pc, #364]	; (b87c <usbdc_cb_ctl_req+0x408>)
    b710:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b712:	681b      	ldr	r3, [r3, #0]
    b714:	3201      	adds	r2, #1
    b716:	b2d2      	uxtb	r2, r2
    b718:	6859      	ldr	r1, [r3, #4]
    b71a:	6818      	ldr	r0, [r3, #0]
    b71c:	4b58      	ldr	r3, [pc, #352]	; (b880 <usbdc_cb_ctl_req+0x40c>)
    b71e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b720:	4601      	mov	r1, r0
    b722:	2800      	cmp	r0, #0
    b724:	f000 80a3 	beq.w	b86e <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    b728:	78c3      	ldrb	r3, [r0, #3]
    b72a:	7882      	ldrb	r2, [r0, #2]
    b72c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    b730:	b292      	uxth	r2, r2
	if (length <= total_len) {
    b732:	4294      	cmp	r4, r2
    b734:	d90d      	bls.n	b752 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b736:	3e01      	subs	r6, #1
    b738:	4226      	tst	r6, r4
    b73a:	bf0c      	ite	eq
    b73c:	2301      	moveq	r3, #1
    b73e:	2300      	movne	r3, #0
		length = total_len;
    b740:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b742:	4622      	mov	r2, r4
    b744:	4628      	mov	r0, r5
    b746:	4c4f      	ldr	r4, [pc, #316]	; (b884 <usbdc_cb_ctl_req+0x410>)
    b748:	47a0      	blx	r4
    b74a:	fab0 f080 	clz	r0, r0
    b74e:	0940      	lsrs	r0, r0, #5
    b750:	e6a8      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b752:	2300      	movs	r3, #0
    b754:	e7f5      	b.n	b742 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    b756:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b758:	4b48      	ldr	r3, [pc, #288]	; (b87c <usbdc_cb_ctl_req+0x408>)
    b75a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b75c:	681b      	ldr	r3, [r3, #0]
    b75e:	b2d2      	uxtb	r2, r2
    b760:	6859      	ldr	r1, [r3, #4]
    b762:	6818      	ldr	r0, [r3, #0]
    b764:	4b48      	ldr	r3, [pc, #288]	; (b888 <usbdc_cb_ctl_req+0x414>)
    b766:	4798      	blx	r3
	if (NULL == str_desc) {
    b768:	4601      	mov	r1, r0
    b76a:	2800      	cmp	r0, #0
    b76c:	f000 8081 	beq.w	b872 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    b770:	7802      	ldrb	r2, [r0, #0]
    b772:	4294      	cmp	r4, r2
    b774:	d90d      	bls.n	b792 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b776:	3e01      	subs	r6, #1
    b778:	4226      	tst	r6, r4
    b77a:	bf0c      	ite	eq
    b77c:	2301      	moveq	r3, #1
    b77e:	2300      	movne	r3, #0
		length = str_desc[0];
    b780:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b782:	4622      	mov	r2, r4
    b784:	4628      	mov	r0, r5
    b786:	4c3f      	ldr	r4, [pc, #252]	; (b884 <usbdc_cb_ctl_req+0x410>)
    b788:	47a0      	blx	r4
    b78a:	fab0 f080 	clz	r0, r0
    b78e:	0940      	lsrs	r0, r0, #5
    b790:	e688      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b792:	2300      	movs	r3, #0
    b794:	e7f5      	b.n	b782 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b796:	4939      	ldr	r1, [pc, #228]	; (b87c <usbdc_cb_ctl_req+0x408>)
    b798:	694b      	ldr	r3, [r1, #20]
    b79a:	7eca      	ldrb	r2, [r1, #27]
    b79c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    b79e:	2300      	movs	r3, #0
    b7a0:	2201      	movs	r2, #1
    b7a2:	6949      	ldr	r1, [r1, #20]
    b7a4:	4628      	mov	r0, r5
    b7a6:	4c37      	ldr	r4, [pc, #220]	; (b884 <usbdc_cb_ctl_req+0x410>)
    b7a8:	47a0      	blx	r4
		return true;
    b7aa:	2001      	movs	r0, #1
    b7ac:	e67a      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b7ae:	f003 031f 	and.w	r3, r3, #31
    b7b2:	2b01      	cmp	r3, #1
    b7b4:	d903      	bls.n	b7be <usbdc_cb_ctl_req+0x34a>
    b7b6:	2b02      	cmp	r3, #2
    b7b8:	d010      	beq.n	b7dc <usbdc_cb_ctl_req+0x368>
		return false;
    b7ba:	2000      	movs	r0, #0
    b7bc:	e672      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		st = 0;
    b7be:	2300      	movs	r3, #0
    b7c0:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    b7c2:	492e      	ldr	r1, [pc, #184]	; (b87c <usbdc_cb_ctl_req+0x408>)
    b7c4:	694b      	ldr	r3, [r1, #20]
    b7c6:	f8bd 2000 	ldrh.w	r2, [sp]
    b7ca:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b7cc:	2300      	movs	r3, #0
    b7ce:	2202      	movs	r2, #2
    b7d0:	6949      	ldr	r1, [r1, #20]
    b7d2:	4628      	mov	r0, r5
    b7d4:	4c2b      	ldr	r4, [pc, #172]	; (b884 <usbdc_cb_ctl_req+0x410>)
    b7d6:	47a0      	blx	r4
	return true;
    b7d8:	2001      	movs	r0, #1
    b7da:	e663      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b7dc:	88a0      	ldrh	r0, [r4, #4]
    b7de:	2102      	movs	r1, #2
    b7e0:	b2c0      	uxtb	r0, r0
    b7e2:	4b2a      	ldr	r3, [pc, #168]	; (b88c <usbdc_cb_ctl_req+0x418>)
    b7e4:	4798      	blx	r3
		if (st < 0) {
    b7e6:	2800      	cmp	r0, #0
    b7e8:	db03      	blt.n	b7f2 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    b7ea:	f000 0001 	and.w	r0, r0, #1
    b7ee:	9000      	str	r0, [sp, #0]
    b7f0:	e7e7      	b.n	b7c2 <usbdc_cb_ctl_req+0x34e>
			return false;
    b7f2:	2000      	movs	r0, #0
    b7f4:	e656      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b7f6:	4b21      	ldr	r3, [pc, #132]	; (b87c <usbdc_cb_ctl_req+0x408>)
    b7f8:	7f5b      	ldrb	r3, [r3, #29]
    b7fa:	88a2      	ldrh	r2, [r4, #4]
    b7fc:	4113      	asrs	r3, r2
    b7fe:	f013 0f01 	tst.w	r3, #1
    b802:	d012      	beq.n	b82a <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b804:	4b1d      	ldr	r3, [pc, #116]	; (b87c <usbdc_cb_ctl_req+0x408>)
    b806:	691d      	ldr	r5, [r3, #16]
	return false;
    b808:	2000      	movs	r0, #0
	while (NULL != func) {
    b80a:	2d00      	cmp	r5, #0
    b80c:	f43f ae4a 	beq.w	b4a4 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b810:	2602      	movs	r6, #2
    b812:	686b      	ldr	r3, [r5, #4]
    b814:	4622      	mov	r2, r4
    b816:	4631      	mov	r1, r6
    b818:	4628      	mov	r0, r5
    b81a:	4798      	blx	r3
    b81c:	2800      	cmp	r0, #0
    b81e:	da0f      	bge.n	b840 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    b820:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b822:	2d00      	cmp	r5, #0
    b824:	d1f5      	bne.n	b812 <usbdc_cb_ctl_req+0x39e>
	return false;
    b826:	2000      	movs	r0, #0
    b828:	e63c      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    b82a:	4914      	ldr	r1, [pc, #80]	; (b87c <usbdc_cb_ctl_req+0x408>)
    b82c:	694b      	ldr	r3, [r1, #20]
    b82e:	2000      	movs	r0, #0
    b830:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b832:	4603      	mov	r3, r0
    b834:	2201      	movs	r2, #1
    b836:	6949      	ldr	r1, [r1, #20]
    b838:	4c12      	ldr	r4, [pc, #72]	; (b884 <usbdc_cb_ctl_req+0x410>)
    b83a:	47a0      	blx	r4
		return true;
    b83c:	2001      	movs	r0, #1
    b83e:	e631      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b840:	490e      	ldr	r1, [pc, #56]	; (b87c <usbdc_cb_ctl_req+0x408>)
    b842:	694b      	ldr	r3, [r1, #20]
    b844:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b846:	2300      	movs	r3, #0
    b848:	2201      	movs	r2, #1
    b84a:	6949      	ldr	r1, [r1, #20]
    b84c:	4618      	mov	r0, r3
    b84e:	4c0d      	ldr	r4, [pc, #52]	; (b884 <usbdc_cb_ctl_req+0x410>)
    b850:	47a0      	blx	r4
			return true;
    b852:	2001      	movs	r0, #1
    b854:	e626      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return true;
    b856:	2001      	movs	r0, #1
    b858:	e624      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b85a:	2000      	movs	r0, #0
    b85c:	e622      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b85e:	2000      	movs	r0, #0
    b860:	e620      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b862:	2000      	movs	r0, #0
    b864:	e61e      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b866:	2000      	movs	r0, #0
    b868:	e61c      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b86a:	2000      	movs	r0, #0
    b86c:	e61a      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b86e:	2000      	movs	r0, #0
    b870:	e618      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
		return false;
    b872:	2000      	movs	r0, #0
    b874:	e616      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
			return false;
    b876:	2000      	movs	r0, #0
    b878:	e614      	b.n	b4a4 <usbdc_cb_ctl_req+0x30>
    b87a:	bf00      	nop
    b87c:	20000ecc 	.word	0x20000ecc
    b880:	0000ba19 	.word	0x0000ba19
    b884:	0000b455 	.word	0x0000b455
    b888:	0000ba81 	.word	0x0000ba81
    b88c:	00005da9 	.word	0x00005da9

0000b890 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    b890:	b508      	push	{r3, lr}
	switch (type) {
    b892:	2801      	cmp	r0, #1
    b894:	d007      	beq.n	b8a6 <usbdc_register_handler+0x16>
    b896:	b110      	cbz	r0, b89e <usbdc_register_handler+0xe>
    b898:	2802      	cmp	r0, #2
    b89a:	d008      	beq.n	b8ae <usbdc_register_handler+0x1e>
    b89c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    b89e:	4806      	ldr	r0, [pc, #24]	; (b8b8 <usbdc_register_handler+0x28>)
    b8a0:	4b06      	ldr	r3, [pc, #24]	; (b8bc <usbdc_register_handler+0x2c>)
    b8a2:	4798      	blx	r3
		break;
    b8a4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    b8a6:	4806      	ldr	r0, [pc, #24]	; (b8c0 <usbdc_register_handler+0x30>)
    b8a8:	4b04      	ldr	r3, [pc, #16]	; (b8bc <usbdc_register_handler+0x2c>)
    b8aa:	4798      	blx	r3
		break;
    b8ac:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    b8ae:	4805      	ldr	r0, [pc, #20]	; (b8c4 <usbdc_register_handler+0x34>)
    b8b0:	4b02      	ldr	r3, [pc, #8]	; (b8bc <usbdc_register_handler+0x2c>)
    b8b2:	4798      	blx	r3
    b8b4:	bd08      	pop	{r3, pc}
    b8b6:	bf00      	nop
    b8b8:	20000ed0 	.word	0x20000ed0
    b8bc:	00005eb9 	.word	0x00005eb9
    b8c0:	20000ed4 	.word	0x20000ed4
    b8c4:	20000ed8 	.word	0x20000ed8

0000b8c8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    b8c8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    b8ca:	4605      	mov	r5, r0
    b8cc:	f240 3255 	movw	r2, #853	; 0x355
    b8d0:	490c      	ldr	r1, [pc, #48]	; (b904 <usbdc_init+0x3c>)
    b8d2:	3000      	adds	r0, #0
    b8d4:	bf18      	it	ne
    b8d6:	2001      	movne	r0, #1
    b8d8:	4b0b      	ldr	r3, [pc, #44]	; (b908 <usbdc_init+0x40>)
    b8da:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    b8dc:	4b0b      	ldr	r3, [pc, #44]	; (b90c <usbdc_init+0x44>)
    b8de:	4798      	blx	r3
	if (rc < 0) {
    b8e0:	2800      	cmp	r0, #0
    b8e2:	db0e      	blt.n	b902 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    b8e4:	4c0a      	ldr	r4, [pc, #40]	; (b910 <usbdc_init+0x48>)
    b8e6:	2220      	movs	r2, #32
    b8e8:	2100      	movs	r1, #0
    b8ea:	4620      	mov	r0, r4
    b8ec:	4b09      	ldr	r3, [pc, #36]	; (b914 <usbdc_init+0x4c>)
    b8ee:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    b8f0:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    b8f2:	4909      	ldr	r1, [pc, #36]	; (b918 <usbdc_init+0x50>)
    b8f4:	2000      	movs	r0, #0
    b8f6:	4c09      	ldr	r4, [pc, #36]	; (b91c <usbdc_init+0x54>)
    b8f8:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    b8fa:	4909      	ldr	r1, [pc, #36]	; (b920 <usbdc_init+0x58>)
    b8fc:	2001      	movs	r0, #1
    b8fe:	47a0      	blx	r4

	return 0;
    b900:	2000      	movs	r0, #0
}
    b902:	bd38      	pop	{r3, r4, r5, pc}
    b904:	0000e59c 	.word	0x0000e59c
    b908:	00005e5d 	.word	0x00005e5d
    b90c:	00005b05 	.word	0x00005b05
    b910:	20000ecc 	.word	0x20000ecc
    b914:	0000c467 	.word	0x0000c467
    b918:	0000b349 	.word	0x0000b349
    b91c:	00005b6d 	.word	0x00005b6d
    b920:	0000b435 	.word	0x0000b435

0000b924 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    b924:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    b926:	4601      	mov	r1, r0
    b928:	4801      	ldr	r0, [pc, #4]	; (b930 <usbdc_register_function+0xc>)
    b92a:	4b02      	ldr	r3, [pc, #8]	; (b934 <usbdc_register_function+0x10>)
    b92c:	4798      	blx	r3
    b92e:	bd08      	pop	{r3, pc}
    b930:	20000edc 	.word	0x20000edc
    b934:	00005eb9 	.word	0x00005eb9

0000b938 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    b938:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    b93a:	4b0a      	ldr	r3, [pc, #40]	; (b964 <usbdc_start+0x2c>)
    b93c:	7e9b      	ldrb	r3, [r3, #26]
    b93e:	b95b      	cbnz	r3, b958 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    b940:	b168      	cbz	r0, b95e <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    b942:	4b08      	ldr	r3, [pc, #32]	; (b964 <usbdc_start+0x2c>)
    b944:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    b946:	6802      	ldr	r2, [r0, #0]
    b948:	79d2      	ldrb	r2, [r2, #7]
    b94a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    b94c:	2201      	movs	r2, #1
    b94e:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    b950:	4b05      	ldr	r3, [pc, #20]	; (b968 <usbdc_start+0x30>)
    b952:	4798      	blx	r3
	return ERR_NONE;
    b954:	2000      	movs	r0, #0
    b956:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    b958:	f06f 0003 	mvn.w	r0, #3
    b95c:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    b95e:	f06f 0008 	mvn.w	r0, #8
}
    b962:	bd08      	pop	{r3, pc}
    b964:	20000ecc 	.word	0x20000ecc
    b968:	00005b79 	.word	0x00005b79

0000b96c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    b96c:	b508      	push	{r3, lr}
	usb_d_attach();
    b96e:	4b01      	ldr	r3, [pc, #4]	; (b974 <usbdc_attach+0x8>)
    b970:	4798      	blx	r3
    b972:	bd08      	pop	{r3, pc}
    b974:	00005b85 	.word	0x00005b85

0000b978 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    b978:	4b01      	ldr	r3, [pc, #4]	; (b980 <usbdc_get_ctrl_buffer+0x8>)
    b97a:	6958      	ldr	r0, [r3, #20]
    b97c:	4770      	bx	lr
    b97e:	bf00      	nop
    b980:	20000ecc 	.word	0x20000ecc

0000b984 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    b984:	4b03      	ldr	r3, [pc, #12]	; (b994 <usbdc_get_state+0x10>)
    b986:	7e98      	ldrb	r0, [r3, #26]
    b988:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    b98c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    b98e:	bf18      	it	ne
    b990:	2010      	movne	r0, #16
    b992:	4770      	bx	lr
    b994:	20000ecc 	.word	0x20000ecc

0000b998 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b998:	4288      	cmp	r0, r1
    b99a:	d214      	bcs.n	b9c6 <usb_find_desc+0x2e>
	return desc[0];
    b99c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b99e:	2b01      	cmp	r3, #1
    b9a0:	d913      	bls.n	b9ca <usb_find_desc+0x32>
{
    b9a2:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    b9a4:	7844      	ldrb	r4, [r0, #1]
    b9a6:	4294      	cmp	r4, r2
    b9a8:	d00a      	beq.n	b9c0 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    b9aa:	4418      	add	r0, r3
	while (desc < eof) {
    b9ac:	4281      	cmp	r1, r0
    b9ae:	d906      	bls.n	b9be <usb_find_desc+0x26>
	return desc[0];
    b9b0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b9b2:	2b01      	cmp	r3, #1
    b9b4:	d90b      	bls.n	b9ce <usb_find_desc+0x36>
	return desc[1];
    b9b6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    b9b8:	4294      	cmp	r4, r2
    b9ba:	d1f6      	bne.n	b9aa <usb_find_desc+0x12>
    b9bc:	e000      	b.n	b9c0 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b9be:	2000      	movs	r0, #0
}
    b9c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    b9c4:	4770      	bx	lr
	return NULL;
    b9c6:	2000      	movs	r0, #0
    b9c8:	4770      	bx	lr
		_desc_len_check();
    b9ca:	2000      	movs	r0, #0
    b9cc:	4770      	bx	lr
    b9ce:	2000      	movs	r0, #0
    b9d0:	e7f6      	b.n	b9c0 <usb_find_desc+0x28>

0000b9d2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b9d2:	4288      	cmp	r0, r1
    b9d4:	d216      	bcs.n	ba04 <usb_find_ep_desc+0x32>
	return desc[0];
    b9d6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b9d8:	2b01      	cmp	r3, #1
    b9da:	d915      	bls.n	ba08 <usb_find_ep_desc+0x36>
	return desc[1];
    b9dc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b9de:	2a04      	cmp	r2, #4
    b9e0:	d014      	beq.n	ba0c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b9e2:	2a05      	cmp	r2, #5
    b9e4:	d00b      	beq.n	b9fe <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    b9e6:	4418      	add	r0, r3
	while (desc < eof) {
    b9e8:	4281      	cmp	r1, r0
    b9ea:	d909      	bls.n	ba00 <usb_find_ep_desc+0x2e>
	return desc[0];
    b9ec:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b9ee:	2b01      	cmp	r3, #1
    b9f0:	d90e      	bls.n	ba10 <usb_find_ep_desc+0x3e>
	return desc[1];
    b9f2:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b9f4:	2a04      	cmp	r2, #4
    b9f6:	d00d      	beq.n	ba14 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b9f8:	2a05      	cmp	r2, #5
    b9fa:	d1f4      	bne.n	b9e6 <usb_find_ep_desc+0x14>
    b9fc:	e00b      	b.n	ba16 <usb_find_ep_desc+0x44>
    b9fe:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    ba00:	2000      	movs	r0, #0
    ba02:	4770      	bx	lr
    ba04:	2000      	movs	r0, #0
    ba06:	4770      	bx	lr
		_desc_len_check();
    ba08:	2000      	movs	r0, #0
    ba0a:	4770      	bx	lr
	return NULL;
    ba0c:	2000      	movs	r0, #0
    ba0e:	4770      	bx	lr
		_desc_len_check();
    ba10:	2000      	movs	r0, #0
    ba12:	4770      	bx	lr
	return NULL;
    ba14:	2000      	movs	r0, #0
}
    ba16:	4770      	bx	lr

0000ba18 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ba18:	b538      	push	{r3, r4, r5, lr}
    ba1a:	460c      	mov	r4, r1
    ba1c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ba1e:	2202      	movs	r2, #2
    ba20:	4b16      	ldr	r3, [pc, #88]	; (ba7c <usb_find_cfg_desc+0x64>)
    ba22:	4798      	blx	r3
	if (!desc) {
    ba24:	4603      	mov	r3, r0
    ba26:	b1e8      	cbz	r0, ba64 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    ba28:	4284      	cmp	r4, r0
    ba2a:	d91d      	bls.n	ba68 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    ba2c:	7802      	ldrb	r2, [r0, #0]
    ba2e:	2a01      	cmp	r2, #1
    ba30:	d91c      	bls.n	ba6c <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    ba32:	7842      	ldrb	r2, [r0, #1]
    ba34:	2a02      	cmp	r2, #2
    ba36:	d11b      	bne.n	ba70 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    ba38:	7942      	ldrb	r2, [r0, #5]
    ba3a:	42aa      	cmp	r2, r5
    ba3c:	d012      	beq.n	ba64 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    ba3e:	78d9      	ldrb	r1, [r3, #3]
    ba40:	789a      	ldrb	r2, [r3, #2]
    ba42:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ba46:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    ba4a:	429c      	cmp	r4, r3
    ba4c:	d909      	bls.n	ba62 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    ba4e:	781a      	ldrb	r2, [r3, #0]
    ba50:	2a01      	cmp	r2, #1
    ba52:	d90f      	bls.n	ba74 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    ba54:	785a      	ldrb	r2, [r3, #1]
    ba56:	2a02      	cmp	r2, #2
    ba58:	d10e      	bne.n	ba78 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    ba5a:	795a      	ldrb	r2, [r3, #5]
    ba5c:	42aa      	cmp	r2, r5
    ba5e:	d1ee      	bne.n	ba3e <usb_find_cfg_desc+0x26>
    ba60:	e000      	b.n	ba64 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    ba62:	2300      	movs	r3, #0
}
    ba64:	4618      	mov	r0, r3
    ba66:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    ba68:	2300      	movs	r3, #0
    ba6a:	e7fb      	b.n	ba64 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    ba6c:	2300      	movs	r3, #0
    ba6e:	e7f9      	b.n	ba64 <usb_find_cfg_desc+0x4c>
	return NULL;
    ba70:	2300      	movs	r3, #0
    ba72:	e7f7      	b.n	ba64 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    ba74:	2300      	movs	r3, #0
    ba76:	e7f5      	b.n	ba64 <usb_find_cfg_desc+0x4c>
	return NULL;
    ba78:	2300      	movs	r3, #0
    ba7a:	e7f3      	b.n	ba64 <usb_find_cfg_desc+0x4c>
    ba7c:	0000b999 	.word	0x0000b999

0000ba80 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ba80:	4288      	cmp	r0, r1
    ba82:	d217      	bcs.n	bab4 <usb_find_str_desc+0x34>
{
    ba84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba88:	460d      	mov	r5, r1
    ba8a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    ba8c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ba8e:	f04f 0803 	mov.w	r8, #3
    ba92:	4f0c      	ldr	r7, [pc, #48]	; (bac4 <usb_find_str_desc+0x44>)
    ba94:	4642      	mov	r2, r8
    ba96:	4629      	mov	r1, r5
    ba98:	47b8      	blx	r7
		if (desc) {
    ba9a:	4603      	mov	r3, r0
    ba9c:	b170      	cbz	r0, babc <usb_find_str_desc+0x3c>
	return desc[0];
    ba9e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    baa0:	2801      	cmp	r0, #1
    baa2:	d90a      	bls.n	baba <usb_find_str_desc+0x3a>
			if (i == str_index) {
    baa4:	42a6      	cmp	r6, r4
    baa6:	d009      	beq.n	babc <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    baa8:	4418      	add	r0, r3
    baaa:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    baac:	4285      	cmp	r5, r0
    baae:	d8f1      	bhi.n	ba94 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    bab0:	2300      	movs	r3, #0
    bab2:	e003      	b.n	babc <usb_find_str_desc+0x3c>
    bab4:	2300      	movs	r3, #0
}
    bab6:	4618      	mov	r0, r3
    bab8:	4770      	bx	lr
			_desc_len_check();
    baba:	2300      	movs	r3, #0
}
    babc:	4618      	mov	r0, r3
    babe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bac2:	bf00      	nop
    bac4:	0000b999 	.word	0x0000b999

0000bac8 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    bac8:	4b3a      	ldr	r3, [pc, #232]	; (bbb4 <hiddf_demo_sof_event+0xec>)
    baca:	791b      	ldrb	r3, [r3, #4]
    bacc:	2b0a      	cmp	r3, #10
    bace:	d803      	bhi.n	bad8 <hiddf_demo_sof_event+0x10>
    bad0:	3301      	adds	r3, #1
    bad2:	4a38      	ldr	r2, [pc, #224]	; (bbb4 <hiddf_demo_sof_event+0xec>)
    bad4:	7113      	strb	r3, [r2, #4]
    bad6:	4770      	bx	lr
{
    bad8:	b570      	push	{r4, r5, r6, lr}
    bada:	b084      	sub	sp, #16
		interval = 0;
    badc:	4b35      	ldr	r3, [pc, #212]	; (bbb4 <hiddf_demo_sof_event+0xec>)
    bade:	2200      	movs	r2, #0
    bae0:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    bae2:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    bae4:	a801      	add	r0, sp, #4
    bae6:	4b34      	ldr	r3, [pc, #208]	; (bbb8 <hiddf_demo_sof_event+0xf0>)
    bae8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    baea:	096b      	lsrs	r3, r5, #5
    baec:	4933      	ldr	r1, [pc, #204]	; (bbbc <hiddf_demo_sof_event+0xf4>)
    baee:	01db      	lsls	r3, r3, #7
    baf0:	18ca      	adds	r2, r1, r3
    baf2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    baf4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    baf6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    baf8:	405c      	eors	r4, r3
    bafa:	400c      	ands	r4, r1
    bafc:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bafe:	a801      	add	r0, sp, #4
    bb00:	4b2f      	ldr	r3, [pc, #188]	; (bbc0 <hiddf_demo_sof_event+0xf8>)
    bb02:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    bb04:	f005 051f 	and.w	r5, r5, #31
    bb08:	2301      	movs	r3, #1
    bb0a:	fa03 f505 	lsl.w	r5, r3, r5
    bb0e:	4225      	tst	r5, r4
    bb10:	d040      	beq.n	bb94 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    bb12:	4b28      	ldr	r3, [pc, #160]	; (bbb4 <hiddf_demo_sof_event+0xec>)
    bb14:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    bb16:	a802      	add	r0, sp, #8
    bb18:	4b27      	ldr	r3, [pc, #156]	; (bbb8 <hiddf_demo_sof_event+0xf0>)
    bb1a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bb1c:	096b      	lsrs	r3, r5, #5
    bb1e:	4927      	ldr	r1, [pc, #156]	; (bbbc <hiddf_demo_sof_event+0xf4>)
    bb20:	01db      	lsls	r3, r3, #7
    bb22:	18ca      	adds	r2, r1, r3
    bb24:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bb26:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bb28:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bb2a:	405c      	eors	r4, r3
    bb2c:	400c      	ands	r4, r1
    bb2e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bb30:	a802      	add	r0, sp, #8
    bb32:	4b23      	ldr	r3, [pc, #140]	; (bbc0 <hiddf_demo_sof_event+0xf8>)
    bb34:	4798      	blx	r3
    bb36:	f005 051f 	and.w	r5, r5, #31
    bb3a:	2301      	movs	r3, #1
    bb3c:	fa03 f505 	lsl.w	r5, r3, r5
    bb40:	4225      	tst	r5, r4
    bb42:	d02d      	beq.n	bba0 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    bb44:	4d1b      	ldr	r5, [pc, #108]	; (bbb4 <hiddf_demo_sof_event+0xec>)
    bb46:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    bb48:	a803      	add	r0, sp, #12
    bb4a:	4b1b      	ldr	r3, [pc, #108]	; (bbb8 <hiddf_demo_sof_event+0xf0>)
    bb4c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bb4e:	0973      	lsrs	r3, r6, #5
    bb50:	491a      	ldr	r1, [pc, #104]	; (bbbc <hiddf_demo_sof_event+0xf4>)
    bb52:	01db      	lsls	r3, r3, #7
    bb54:	18ca      	adds	r2, r1, r3
    bb56:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bb58:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bb5a:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bb5c:	405c      	eors	r4, r3
    bb5e:	400c      	ands	r4, r1
    bb60:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    bb62:	a803      	add	r0, sp, #12
    bb64:	4b16      	ldr	r3, [pc, #88]	; (bbc0 <hiddf_demo_sof_event+0xf8>)
    bb66:	4798      	blx	r3
    bb68:	f006 061f 	and.w	r6, r6, #31
    bb6c:	2301      	movs	r3, #1
    bb6e:	40b3      	lsls	r3, r6
    bb70:	401c      	ands	r4, r3
    bb72:	bf0c      	ite	eq
    bb74:	2301      	moveq	r3, #1
    bb76:	2300      	movne	r3, #0
    bb78:	7d2a      	ldrb	r2, [r5, #20]
    bb7a:	429a      	cmp	r2, r3
    bb7c:	d008      	beq.n	bb90 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    bb7e:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    bb80:	b19c      	cbz	r4, bbaa <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    bb82:	2200      	movs	r2, #0
    bb84:	4b0f      	ldr	r3, [pc, #60]	; (bbc4 <hiddf_demo_sof_event+0xfc>)
    bb86:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    bb88:	2101      	movs	r1, #1
    bb8a:	480e      	ldr	r0, [pc, #56]	; (bbc4 <hiddf_demo_sof_event+0xfc>)
    bb8c:	4b0e      	ldr	r3, [pc, #56]	; (bbc8 <hiddf_demo_sof_event+0x100>)
    bb8e:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    bb90:	b004      	add	sp, #16
    bb92:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    bb94:	4619      	mov	r1, r3
    bb96:	f06f 0004 	mvn.w	r0, #4
    bb9a:	4b0c      	ldr	r3, [pc, #48]	; (bbcc <hiddf_demo_sof_event+0x104>)
    bb9c:	4798      	blx	r3
    bb9e:	e7b8      	b.n	bb12 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    bba0:	4619      	mov	r1, r3
    bba2:	2005      	movs	r0, #5
    bba4:	4b09      	ldr	r3, [pc, #36]	; (bbcc <hiddf_demo_sof_event+0x104>)
    bba6:	4798      	blx	r3
    bba8:	e7cc      	b.n	bb44 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    bbaa:	2201      	movs	r2, #1
    bbac:	4b05      	ldr	r3, [pc, #20]	; (bbc4 <hiddf_demo_sof_event+0xfc>)
    bbae:	709a      	strb	r2, [r3, #2]
    bbb0:	e7ea      	b.n	bb88 <hiddf_demo_sof_event+0xc0>
    bbb2:	bf00      	nop
    bbb4:	20000eec 	.word	0x20000eec
    bbb8:	00004a69 	.word	0x00004a69
    bbbc:	41008000 	.word	0x41008000
    bbc0:	00004a77 	.word	0x00004a77
    bbc4:	200003b8 	.word	0x200003b8
    bbc8:	0000ad15 	.word	0x0000ad15
    bbcc:	0000afa9 	.word	0x0000afa9

0000bbd0 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    bbd0:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bbd2:	4805      	ldr	r0, [pc, #20]	; (bbe8 <composite_device_init+0x18>)
    bbd4:	4b05      	ldr	r3, [pc, #20]	; (bbec <composite_device_init+0x1c>)
    bbd6:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    bbd8:	4b05      	ldr	r3, [pc, #20]	; (bbf0 <composite_device_init+0x20>)
    bbda:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    bbdc:	4b05      	ldr	r3, [pc, #20]	; (bbf4 <composite_device_init+0x24>)
    bbde:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    bbe0:	4b05      	ldr	r3, [pc, #20]	; (bbf8 <composite_device_init+0x28>)
    bbe2:	4798      	blx	r3
    bbe4:	bd08      	pop	{r3, pc}
    bbe6:	bf00      	nop
    bbe8:	20000f04 	.word	0x20000f04
    bbec:	0000b8c9 	.word	0x0000b8c9
    bbf0:	0000aa91 	.word	0x0000aa91
    bbf4:	0000af65 	.word	0x0000af65
    bbf8:	0000acd1 	.word	0x0000acd1

0000bbfc <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    bbfc:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    bbfe:	4803      	ldr	r0, [pc, #12]	; (bc0c <composite_device_start+0x10>)
    bc00:	4b03      	ldr	r3, [pc, #12]	; (bc10 <composite_device_start+0x14>)
    bc02:	4798      	blx	r3
	usbdc_attach();
    bc04:	4b03      	ldr	r3, [pc, #12]	; (bc14 <composite_device_start+0x18>)
    bc06:	4798      	blx	r3
    bc08:	bd08      	pop	{r3, pc}
    bc0a:	bf00      	nop
    bc0c:	200003c4 	.word	0x200003c4
    bc10:	0000b939 	.word	0x0000b939
    bc14:	0000b96d 	.word	0x0000b96d

0000bc18 <usb_init>:
		}
	}
}

void usb_init(void)
{
    bc18:	b508      	push	{r3, lr}

	composite_device_init();
    bc1a:	4b01      	ldr	r3, [pc, #4]	; (bc20 <usb_init+0x8>)
    bc1c:	4798      	blx	r3
    bc1e:	bd08      	pop	{r3, pc}
    bc20:	0000bbd1 	.word	0x0000bbd1

0000bc24 <__aeabi_drsub>:
    bc24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    bc28:	e002      	b.n	bc30 <__adddf3>
    bc2a:	bf00      	nop

0000bc2c <__aeabi_dsub>:
    bc2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000bc30 <__adddf3>:
    bc30:	b530      	push	{r4, r5, lr}
    bc32:	ea4f 0441 	mov.w	r4, r1, lsl #1
    bc36:	ea4f 0543 	mov.w	r5, r3, lsl #1
    bc3a:	ea94 0f05 	teq	r4, r5
    bc3e:	bf08      	it	eq
    bc40:	ea90 0f02 	teqeq	r0, r2
    bc44:	bf1f      	itttt	ne
    bc46:	ea54 0c00 	orrsne.w	ip, r4, r0
    bc4a:	ea55 0c02 	orrsne.w	ip, r5, r2
    bc4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    bc52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bc56:	f000 80e2 	beq.w	be1e <__adddf3+0x1ee>
    bc5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    bc5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    bc62:	bfb8      	it	lt
    bc64:	426d      	neglt	r5, r5
    bc66:	dd0c      	ble.n	bc82 <__adddf3+0x52>
    bc68:	442c      	add	r4, r5
    bc6a:	ea80 0202 	eor.w	r2, r0, r2
    bc6e:	ea81 0303 	eor.w	r3, r1, r3
    bc72:	ea82 0000 	eor.w	r0, r2, r0
    bc76:	ea83 0101 	eor.w	r1, r3, r1
    bc7a:	ea80 0202 	eor.w	r2, r0, r2
    bc7e:	ea81 0303 	eor.w	r3, r1, r3
    bc82:	2d36      	cmp	r5, #54	; 0x36
    bc84:	bf88      	it	hi
    bc86:	bd30      	pophi	{r4, r5, pc}
    bc88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bc8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bc90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    bc94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    bc98:	d002      	beq.n	bca0 <__adddf3+0x70>
    bc9a:	4240      	negs	r0, r0
    bc9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bca0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    bca4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bca8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    bcac:	d002      	beq.n	bcb4 <__adddf3+0x84>
    bcae:	4252      	negs	r2, r2
    bcb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    bcb4:	ea94 0f05 	teq	r4, r5
    bcb8:	f000 80a7 	beq.w	be0a <__adddf3+0x1da>
    bcbc:	f1a4 0401 	sub.w	r4, r4, #1
    bcc0:	f1d5 0e20 	rsbs	lr, r5, #32
    bcc4:	db0d      	blt.n	bce2 <__adddf3+0xb2>
    bcc6:	fa02 fc0e 	lsl.w	ip, r2, lr
    bcca:	fa22 f205 	lsr.w	r2, r2, r5
    bcce:	1880      	adds	r0, r0, r2
    bcd0:	f141 0100 	adc.w	r1, r1, #0
    bcd4:	fa03 f20e 	lsl.w	r2, r3, lr
    bcd8:	1880      	adds	r0, r0, r2
    bcda:	fa43 f305 	asr.w	r3, r3, r5
    bcde:	4159      	adcs	r1, r3
    bce0:	e00e      	b.n	bd00 <__adddf3+0xd0>
    bce2:	f1a5 0520 	sub.w	r5, r5, #32
    bce6:	f10e 0e20 	add.w	lr, lr, #32
    bcea:	2a01      	cmp	r2, #1
    bcec:	fa03 fc0e 	lsl.w	ip, r3, lr
    bcf0:	bf28      	it	cs
    bcf2:	f04c 0c02 	orrcs.w	ip, ip, #2
    bcf6:	fa43 f305 	asr.w	r3, r3, r5
    bcfa:	18c0      	adds	r0, r0, r3
    bcfc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    bd00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bd04:	d507      	bpl.n	bd16 <__adddf3+0xe6>
    bd06:	f04f 0e00 	mov.w	lr, #0
    bd0a:	f1dc 0c00 	rsbs	ip, ip, #0
    bd0e:	eb7e 0000 	sbcs.w	r0, lr, r0
    bd12:	eb6e 0101 	sbc.w	r1, lr, r1
    bd16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    bd1a:	d31b      	bcc.n	bd54 <__adddf3+0x124>
    bd1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    bd20:	d30c      	bcc.n	bd3c <__adddf3+0x10c>
    bd22:	0849      	lsrs	r1, r1, #1
    bd24:	ea5f 0030 	movs.w	r0, r0, rrx
    bd28:	ea4f 0c3c 	mov.w	ip, ip, rrx
    bd2c:	f104 0401 	add.w	r4, r4, #1
    bd30:	ea4f 5244 	mov.w	r2, r4, lsl #21
    bd34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    bd38:	f080 809a 	bcs.w	be70 <__adddf3+0x240>
    bd3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    bd40:	bf08      	it	eq
    bd42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bd46:	f150 0000 	adcs.w	r0, r0, #0
    bd4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bd4e:	ea41 0105 	orr.w	r1, r1, r5
    bd52:	bd30      	pop	{r4, r5, pc}
    bd54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    bd58:	4140      	adcs	r0, r0
    bd5a:	eb41 0101 	adc.w	r1, r1, r1
    bd5e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bd62:	f1a4 0401 	sub.w	r4, r4, #1
    bd66:	d1e9      	bne.n	bd3c <__adddf3+0x10c>
    bd68:	f091 0f00 	teq	r1, #0
    bd6c:	bf04      	itt	eq
    bd6e:	4601      	moveq	r1, r0
    bd70:	2000      	moveq	r0, #0
    bd72:	fab1 f381 	clz	r3, r1
    bd76:	bf08      	it	eq
    bd78:	3320      	addeq	r3, #32
    bd7a:	f1a3 030b 	sub.w	r3, r3, #11
    bd7e:	f1b3 0220 	subs.w	r2, r3, #32
    bd82:	da0c      	bge.n	bd9e <__adddf3+0x16e>
    bd84:	320c      	adds	r2, #12
    bd86:	dd08      	ble.n	bd9a <__adddf3+0x16a>
    bd88:	f102 0c14 	add.w	ip, r2, #20
    bd8c:	f1c2 020c 	rsb	r2, r2, #12
    bd90:	fa01 f00c 	lsl.w	r0, r1, ip
    bd94:	fa21 f102 	lsr.w	r1, r1, r2
    bd98:	e00c      	b.n	bdb4 <__adddf3+0x184>
    bd9a:	f102 0214 	add.w	r2, r2, #20
    bd9e:	bfd8      	it	le
    bda0:	f1c2 0c20 	rsble	ip, r2, #32
    bda4:	fa01 f102 	lsl.w	r1, r1, r2
    bda8:	fa20 fc0c 	lsr.w	ip, r0, ip
    bdac:	bfdc      	itt	le
    bdae:	ea41 010c 	orrle.w	r1, r1, ip
    bdb2:	4090      	lslle	r0, r2
    bdb4:	1ae4      	subs	r4, r4, r3
    bdb6:	bfa2      	ittt	ge
    bdb8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    bdbc:	4329      	orrge	r1, r5
    bdbe:	bd30      	popge	{r4, r5, pc}
    bdc0:	ea6f 0404 	mvn.w	r4, r4
    bdc4:	3c1f      	subs	r4, #31
    bdc6:	da1c      	bge.n	be02 <__adddf3+0x1d2>
    bdc8:	340c      	adds	r4, #12
    bdca:	dc0e      	bgt.n	bdea <__adddf3+0x1ba>
    bdcc:	f104 0414 	add.w	r4, r4, #20
    bdd0:	f1c4 0220 	rsb	r2, r4, #32
    bdd4:	fa20 f004 	lsr.w	r0, r0, r4
    bdd8:	fa01 f302 	lsl.w	r3, r1, r2
    bddc:	ea40 0003 	orr.w	r0, r0, r3
    bde0:	fa21 f304 	lsr.w	r3, r1, r4
    bde4:	ea45 0103 	orr.w	r1, r5, r3
    bde8:	bd30      	pop	{r4, r5, pc}
    bdea:	f1c4 040c 	rsb	r4, r4, #12
    bdee:	f1c4 0220 	rsb	r2, r4, #32
    bdf2:	fa20 f002 	lsr.w	r0, r0, r2
    bdf6:	fa01 f304 	lsl.w	r3, r1, r4
    bdfa:	ea40 0003 	orr.w	r0, r0, r3
    bdfe:	4629      	mov	r1, r5
    be00:	bd30      	pop	{r4, r5, pc}
    be02:	fa21 f004 	lsr.w	r0, r1, r4
    be06:	4629      	mov	r1, r5
    be08:	bd30      	pop	{r4, r5, pc}
    be0a:	f094 0f00 	teq	r4, #0
    be0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    be12:	bf06      	itte	eq
    be14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    be18:	3401      	addeq	r4, #1
    be1a:	3d01      	subne	r5, #1
    be1c:	e74e      	b.n	bcbc <__adddf3+0x8c>
    be1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    be22:	bf18      	it	ne
    be24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    be28:	d029      	beq.n	be7e <__adddf3+0x24e>
    be2a:	ea94 0f05 	teq	r4, r5
    be2e:	bf08      	it	eq
    be30:	ea90 0f02 	teqeq	r0, r2
    be34:	d005      	beq.n	be42 <__adddf3+0x212>
    be36:	ea54 0c00 	orrs.w	ip, r4, r0
    be3a:	bf04      	itt	eq
    be3c:	4619      	moveq	r1, r3
    be3e:	4610      	moveq	r0, r2
    be40:	bd30      	pop	{r4, r5, pc}
    be42:	ea91 0f03 	teq	r1, r3
    be46:	bf1e      	ittt	ne
    be48:	2100      	movne	r1, #0
    be4a:	2000      	movne	r0, #0
    be4c:	bd30      	popne	{r4, r5, pc}
    be4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    be52:	d105      	bne.n	be60 <__adddf3+0x230>
    be54:	0040      	lsls	r0, r0, #1
    be56:	4149      	adcs	r1, r1
    be58:	bf28      	it	cs
    be5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    be5e:	bd30      	pop	{r4, r5, pc}
    be60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    be64:	bf3c      	itt	cc
    be66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    be6a:	bd30      	popcc	{r4, r5, pc}
    be6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    be70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    be74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    be78:	f04f 0000 	mov.w	r0, #0
    be7c:	bd30      	pop	{r4, r5, pc}
    be7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    be82:	bf1a      	itte	ne
    be84:	4619      	movne	r1, r3
    be86:	4610      	movne	r0, r2
    be88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    be8c:	bf1c      	itt	ne
    be8e:	460b      	movne	r3, r1
    be90:	4602      	movne	r2, r0
    be92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    be96:	bf06      	itte	eq
    be98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    be9c:	ea91 0f03 	teqeq	r1, r3
    bea0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    bea4:	bd30      	pop	{r4, r5, pc}
    bea6:	bf00      	nop

0000bea8 <__aeabi_ui2d>:
    bea8:	f090 0f00 	teq	r0, #0
    beac:	bf04      	itt	eq
    beae:	2100      	moveq	r1, #0
    beb0:	4770      	bxeq	lr
    beb2:	b530      	push	{r4, r5, lr}
    beb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    beb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bebc:	f04f 0500 	mov.w	r5, #0
    bec0:	f04f 0100 	mov.w	r1, #0
    bec4:	e750      	b.n	bd68 <__adddf3+0x138>
    bec6:	bf00      	nop

0000bec8 <__aeabi_i2d>:
    bec8:	f090 0f00 	teq	r0, #0
    becc:	bf04      	itt	eq
    bece:	2100      	moveq	r1, #0
    bed0:	4770      	bxeq	lr
    bed2:	b530      	push	{r4, r5, lr}
    bed4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bed8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bedc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    bee0:	bf48      	it	mi
    bee2:	4240      	negmi	r0, r0
    bee4:	f04f 0100 	mov.w	r1, #0
    bee8:	e73e      	b.n	bd68 <__adddf3+0x138>
    beea:	bf00      	nop

0000beec <__aeabi_f2d>:
    beec:	0042      	lsls	r2, r0, #1
    beee:	ea4f 01e2 	mov.w	r1, r2, asr #3
    bef2:	ea4f 0131 	mov.w	r1, r1, rrx
    bef6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    befa:	bf1f      	itttt	ne
    befc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    bf00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bf04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    bf08:	4770      	bxne	lr
    bf0a:	f092 0f00 	teq	r2, #0
    bf0e:	bf14      	ite	ne
    bf10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bf14:	4770      	bxeq	lr
    bf16:	b530      	push	{r4, r5, lr}
    bf18:	f44f 7460 	mov.w	r4, #896	; 0x380
    bf1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bf20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bf24:	e720      	b.n	bd68 <__adddf3+0x138>
    bf26:	bf00      	nop

0000bf28 <__aeabi_ul2d>:
    bf28:	ea50 0201 	orrs.w	r2, r0, r1
    bf2c:	bf08      	it	eq
    bf2e:	4770      	bxeq	lr
    bf30:	b530      	push	{r4, r5, lr}
    bf32:	f04f 0500 	mov.w	r5, #0
    bf36:	e00a      	b.n	bf4e <__aeabi_l2d+0x16>

0000bf38 <__aeabi_l2d>:
    bf38:	ea50 0201 	orrs.w	r2, r0, r1
    bf3c:	bf08      	it	eq
    bf3e:	4770      	bxeq	lr
    bf40:	b530      	push	{r4, r5, lr}
    bf42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    bf46:	d502      	bpl.n	bf4e <__aeabi_l2d+0x16>
    bf48:	4240      	negs	r0, r0
    bf4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bf4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bf52:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bf56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    bf5a:	f43f aedc 	beq.w	bd16 <__adddf3+0xe6>
    bf5e:	f04f 0203 	mov.w	r2, #3
    bf62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bf66:	bf18      	it	ne
    bf68:	3203      	addne	r2, #3
    bf6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bf6e:	bf18      	it	ne
    bf70:	3203      	addne	r2, #3
    bf72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    bf76:	f1c2 0320 	rsb	r3, r2, #32
    bf7a:	fa00 fc03 	lsl.w	ip, r0, r3
    bf7e:	fa20 f002 	lsr.w	r0, r0, r2
    bf82:	fa01 fe03 	lsl.w	lr, r1, r3
    bf86:	ea40 000e 	orr.w	r0, r0, lr
    bf8a:	fa21 f102 	lsr.w	r1, r1, r2
    bf8e:	4414      	add	r4, r2
    bf90:	e6c1      	b.n	bd16 <__adddf3+0xe6>
    bf92:	bf00      	nop

0000bf94 <__aeabi_dmul>:
    bf94:	b570      	push	{r4, r5, r6, lr}
    bf96:	f04f 0cff 	mov.w	ip, #255	; 0xff
    bf9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    bf9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    bfa2:	bf1d      	ittte	ne
    bfa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bfa8:	ea94 0f0c 	teqne	r4, ip
    bfac:	ea95 0f0c 	teqne	r5, ip
    bfb0:	f000 f8de 	bleq	c170 <__aeabi_dmul+0x1dc>
    bfb4:	442c      	add	r4, r5
    bfb6:	ea81 0603 	eor.w	r6, r1, r3
    bfba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    bfbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    bfc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    bfc6:	bf18      	it	ne
    bfc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    bfcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bfd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    bfd4:	d038      	beq.n	c048 <__aeabi_dmul+0xb4>
    bfd6:	fba0 ce02 	umull	ip, lr, r0, r2
    bfda:	f04f 0500 	mov.w	r5, #0
    bfde:	fbe1 e502 	umlal	lr, r5, r1, r2
    bfe2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    bfe6:	fbe0 e503 	umlal	lr, r5, r0, r3
    bfea:	f04f 0600 	mov.w	r6, #0
    bfee:	fbe1 5603 	umlal	r5, r6, r1, r3
    bff2:	f09c 0f00 	teq	ip, #0
    bff6:	bf18      	it	ne
    bff8:	f04e 0e01 	orrne.w	lr, lr, #1
    bffc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c000:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c004:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c008:	d204      	bcs.n	c014 <__aeabi_dmul+0x80>
    c00a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c00e:	416d      	adcs	r5, r5
    c010:	eb46 0606 	adc.w	r6, r6, r6
    c014:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c018:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c01c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c020:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c024:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c028:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c02c:	bf88      	it	hi
    c02e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c032:	d81e      	bhi.n	c072 <__aeabi_dmul+0xde>
    c034:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c038:	bf08      	it	eq
    c03a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c03e:	f150 0000 	adcs.w	r0, r0, #0
    c042:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c046:	bd70      	pop	{r4, r5, r6, pc}
    c048:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c04c:	ea46 0101 	orr.w	r1, r6, r1
    c050:	ea40 0002 	orr.w	r0, r0, r2
    c054:	ea81 0103 	eor.w	r1, r1, r3
    c058:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c05c:	bfc2      	ittt	gt
    c05e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c062:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c066:	bd70      	popgt	{r4, r5, r6, pc}
    c068:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c06c:	f04f 0e00 	mov.w	lr, #0
    c070:	3c01      	subs	r4, #1
    c072:	f300 80ab 	bgt.w	c1cc <__aeabi_dmul+0x238>
    c076:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c07a:	bfde      	ittt	le
    c07c:	2000      	movle	r0, #0
    c07e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c082:	bd70      	pople	{r4, r5, r6, pc}
    c084:	f1c4 0400 	rsb	r4, r4, #0
    c088:	3c20      	subs	r4, #32
    c08a:	da35      	bge.n	c0f8 <__aeabi_dmul+0x164>
    c08c:	340c      	adds	r4, #12
    c08e:	dc1b      	bgt.n	c0c8 <__aeabi_dmul+0x134>
    c090:	f104 0414 	add.w	r4, r4, #20
    c094:	f1c4 0520 	rsb	r5, r4, #32
    c098:	fa00 f305 	lsl.w	r3, r0, r5
    c09c:	fa20 f004 	lsr.w	r0, r0, r4
    c0a0:	fa01 f205 	lsl.w	r2, r1, r5
    c0a4:	ea40 0002 	orr.w	r0, r0, r2
    c0a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c0ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c0b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c0b4:	fa21 f604 	lsr.w	r6, r1, r4
    c0b8:	eb42 0106 	adc.w	r1, r2, r6
    c0bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c0c0:	bf08      	it	eq
    c0c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c0c6:	bd70      	pop	{r4, r5, r6, pc}
    c0c8:	f1c4 040c 	rsb	r4, r4, #12
    c0cc:	f1c4 0520 	rsb	r5, r4, #32
    c0d0:	fa00 f304 	lsl.w	r3, r0, r4
    c0d4:	fa20 f005 	lsr.w	r0, r0, r5
    c0d8:	fa01 f204 	lsl.w	r2, r1, r4
    c0dc:	ea40 0002 	orr.w	r0, r0, r2
    c0e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c0e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c0e8:	f141 0100 	adc.w	r1, r1, #0
    c0ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c0f0:	bf08      	it	eq
    c0f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c0f6:	bd70      	pop	{r4, r5, r6, pc}
    c0f8:	f1c4 0520 	rsb	r5, r4, #32
    c0fc:	fa00 f205 	lsl.w	r2, r0, r5
    c100:	ea4e 0e02 	orr.w	lr, lr, r2
    c104:	fa20 f304 	lsr.w	r3, r0, r4
    c108:	fa01 f205 	lsl.w	r2, r1, r5
    c10c:	ea43 0302 	orr.w	r3, r3, r2
    c110:	fa21 f004 	lsr.w	r0, r1, r4
    c114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c118:	fa21 f204 	lsr.w	r2, r1, r4
    c11c:	ea20 0002 	bic.w	r0, r0, r2
    c120:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c124:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c128:	bf08      	it	eq
    c12a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c12e:	bd70      	pop	{r4, r5, r6, pc}
    c130:	f094 0f00 	teq	r4, #0
    c134:	d10f      	bne.n	c156 <__aeabi_dmul+0x1c2>
    c136:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c13a:	0040      	lsls	r0, r0, #1
    c13c:	eb41 0101 	adc.w	r1, r1, r1
    c140:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c144:	bf08      	it	eq
    c146:	3c01      	subeq	r4, #1
    c148:	d0f7      	beq.n	c13a <__aeabi_dmul+0x1a6>
    c14a:	ea41 0106 	orr.w	r1, r1, r6
    c14e:	f095 0f00 	teq	r5, #0
    c152:	bf18      	it	ne
    c154:	4770      	bxne	lr
    c156:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c15a:	0052      	lsls	r2, r2, #1
    c15c:	eb43 0303 	adc.w	r3, r3, r3
    c160:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c164:	bf08      	it	eq
    c166:	3d01      	subeq	r5, #1
    c168:	d0f7      	beq.n	c15a <__aeabi_dmul+0x1c6>
    c16a:	ea43 0306 	orr.w	r3, r3, r6
    c16e:	4770      	bx	lr
    c170:	ea94 0f0c 	teq	r4, ip
    c174:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c178:	bf18      	it	ne
    c17a:	ea95 0f0c 	teqne	r5, ip
    c17e:	d00c      	beq.n	c19a <__aeabi_dmul+0x206>
    c180:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c184:	bf18      	it	ne
    c186:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c18a:	d1d1      	bne.n	c130 <__aeabi_dmul+0x19c>
    c18c:	ea81 0103 	eor.w	r1, r1, r3
    c190:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c194:	f04f 0000 	mov.w	r0, #0
    c198:	bd70      	pop	{r4, r5, r6, pc}
    c19a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c19e:	bf06      	itte	eq
    c1a0:	4610      	moveq	r0, r2
    c1a2:	4619      	moveq	r1, r3
    c1a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c1a8:	d019      	beq.n	c1de <__aeabi_dmul+0x24a>
    c1aa:	ea94 0f0c 	teq	r4, ip
    c1ae:	d102      	bne.n	c1b6 <__aeabi_dmul+0x222>
    c1b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c1b4:	d113      	bne.n	c1de <__aeabi_dmul+0x24a>
    c1b6:	ea95 0f0c 	teq	r5, ip
    c1ba:	d105      	bne.n	c1c8 <__aeabi_dmul+0x234>
    c1bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c1c0:	bf1c      	itt	ne
    c1c2:	4610      	movne	r0, r2
    c1c4:	4619      	movne	r1, r3
    c1c6:	d10a      	bne.n	c1de <__aeabi_dmul+0x24a>
    c1c8:	ea81 0103 	eor.w	r1, r1, r3
    c1cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c1d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c1d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c1d8:	f04f 0000 	mov.w	r0, #0
    c1dc:	bd70      	pop	{r4, r5, r6, pc}
    c1de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c1e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c1e6:	bd70      	pop	{r4, r5, r6, pc}

0000c1e8 <__aeabi_ddiv>:
    c1e8:	b570      	push	{r4, r5, r6, lr}
    c1ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c1ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c1f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c1f6:	bf1d      	ittte	ne
    c1f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c1fc:	ea94 0f0c 	teqne	r4, ip
    c200:	ea95 0f0c 	teqne	r5, ip
    c204:	f000 f8a7 	bleq	c356 <__aeabi_ddiv+0x16e>
    c208:	eba4 0405 	sub.w	r4, r4, r5
    c20c:	ea81 0e03 	eor.w	lr, r1, r3
    c210:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c214:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c218:	f000 8088 	beq.w	c32c <__aeabi_ddiv+0x144>
    c21c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c220:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c224:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c228:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c22c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c230:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c234:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c238:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c23c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c240:	429d      	cmp	r5, r3
    c242:	bf08      	it	eq
    c244:	4296      	cmpeq	r6, r2
    c246:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c24a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c24e:	d202      	bcs.n	c256 <__aeabi_ddiv+0x6e>
    c250:	085b      	lsrs	r3, r3, #1
    c252:	ea4f 0232 	mov.w	r2, r2, rrx
    c256:	1ab6      	subs	r6, r6, r2
    c258:	eb65 0503 	sbc.w	r5, r5, r3
    c25c:	085b      	lsrs	r3, r3, #1
    c25e:	ea4f 0232 	mov.w	r2, r2, rrx
    c262:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c266:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c26a:	ebb6 0e02 	subs.w	lr, r6, r2
    c26e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c272:	bf22      	ittt	cs
    c274:	1ab6      	subcs	r6, r6, r2
    c276:	4675      	movcs	r5, lr
    c278:	ea40 000c 	orrcs.w	r0, r0, ip
    c27c:	085b      	lsrs	r3, r3, #1
    c27e:	ea4f 0232 	mov.w	r2, r2, rrx
    c282:	ebb6 0e02 	subs.w	lr, r6, r2
    c286:	eb75 0e03 	sbcs.w	lr, r5, r3
    c28a:	bf22      	ittt	cs
    c28c:	1ab6      	subcs	r6, r6, r2
    c28e:	4675      	movcs	r5, lr
    c290:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c294:	085b      	lsrs	r3, r3, #1
    c296:	ea4f 0232 	mov.w	r2, r2, rrx
    c29a:	ebb6 0e02 	subs.w	lr, r6, r2
    c29e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c2a2:	bf22      	ittt	cs
    c2a4:	1ab6      	subcs	r6, r6, r2
    c2a6:	4675      	movcs	r5, lr
    c2a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c2ac:	085b      	lsrs	r3, r3, #1
    c2ae:	ea4f 0232 	mov.w	r2, r2, rrx
    c2b2:	ebb6 0e02 	subs.w	lr, r6, r2
    c2b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c2ba:	bf22      	ittt	cs
    c2bc:	1ab6      	subcs	r6, r6, r2
    c2be:	4675      	movcs	r5, lr
    c2c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c2c4:	ea55 0e06 	orrs.w	lr, r5, r6
    c2c8:	d018      	beq.n	c2fc <__aeabi_ddiv+0x114>
    c2ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c2ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c2d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c2d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c2da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c2de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c2e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c2e6:	d1c0      	bne.n	c26a <__aeabi_ddiv+0x82>
    c2e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c2ec:	d10b      	bne.n	c306 <__aeabi_ddiv+0x11e>
    c2ee:	ea41 0100 	orr.w	r1, r1, r0
    c2f2:	f04f 0000 	mov.w	r0, #0
    c2f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c2fa:	e7b6      	b.n	c26a <__aeabi_ddiv+0x82>
    c2fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c300:	bf04      	itt	eq
    c302:	4301      	orreq	r1, r0
    c304:	2000      	moveq	r0, #0
    c306:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c30a:	bf88      	it	hi
    c30c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c310:	f63f aeaf 	bhi.w	c072 <__aeabi_dmul+0xde>
    c314:	ebb5 0c03 	subs.w	ip, r5, r3
    c318:	bf04      	itt	eq
    c31a:	ebb6 0c02 	subseq.w	ip, r6, r2
    c31e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c322:	f150 0000 	adcs.w	r0, r0, #0
    c326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c32a:	bd70      	pop	{r4, r5, r6, pc}
    c32c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c330:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c334:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c338:	bfc2      	ittt	gt
    c33a:	ebd4 050c 	rsbsgt	r5, r4, ip
    c33e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c342:	bd70      	popgt	{r4, r5, r6, pc}
    c344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c348:	f04f 0e00 	mov.w	lr, #0
    c34c:	3c01      	subs	r4, #1
    c34e:	e690      	b.n	c072 <__aeabi_dmul+0xde>
    c350:	ea45 0e06 	orr.w	lr, r5, r6
    c354:	e68d      	b.n	c072 <__aeabi_dmul+0xde>
    c356:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c35a:	ea94 0f0c 	teq	r4, ip
    c35e:	bf08      	it	eq
    c360:	ea95 0f0c 	teqeq	r5, ip
    c364:	f43f af3b 	beq.w	c1de <__aeabi_dmul+0x24a>
    c368:	ea94 0f0c 	teq	r4, ip
    c36c:	d10a      	bne.n	c384 <__aeabi_ddiv+0x19c>
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	f47f af34 	bne.w	c1de <__aeabi_dmul+0x24a>
    c376:	ea95 0f0c 	teq	r5, ip
    c37a:	f47f af25 	bne.w	c1c8 <__aeabi_dmul+0x234>
    c37e:	4610      	mov	r0, r2
    c380:	4619      	mov	r1, r3
    c382:	e72c      	b.n	c1de <__aeabi_dmul+0x24a>
    c384:	ea95 0f0c 	teq	r5, ip
    c388:	d106      	bne.n	c398 <__aeabi_ddiv+0x1b0>
    c38a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c38e:	f43f aefd 	beq.w	c18c <__aeabi_dmul+0x1f8>
    c392:	4610      	mov	r0, r2
    c394:	4619      	mov	r1, r3
    c396:	e722      	b.n	c1de <__aeabi_dmul+0x24a>
    c398:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c39c:	bf18      	it	ne
    c39e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c3a2:	f47f aec5 	bne.w	c130 <__aeabi_dmul+0x19c>
    c3a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c3aa:	f47f af0d 	bne.w	c1c8 <__aeabi_dmul+0x234>
    c3ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c3b2:	f47f aeeb 	bne.w	c18c <__aeabi_dmul+0x1f8>
    c3b6:	e712      	b.n	c1de <__aeabi_dmul+0x24a>

0000c3b8 <__aeabi_d2uiz>:
    c3b8:	004a      	lsls	r2, r1, #1
    c3ba:	d211      	bcs.n	c3e0 <__aeabi_d2uiz+0x28>
    c3bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c3c0:	d211      	bcs.n	c3e6 <__aeabi_d2uiz+0x2e>
    c3c2:	d50d      	bpl.n	c3e0 <__aeabi_d2uiz+0x28>
    c3c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c3c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c3cc:	d40e      	bmi.n	c3ec <__aeabi_d2uiz+0x34>
    c3ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c3d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c3d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c3da:	fa23 f002 	lsr.w	r0, r3, r2
    c3de:	4770      	bx	lr
    c3e0:	f04f 0000 	mov.w	r0, #0
    c3e4:	4770      	bx	lr
    c3e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c3ea:	d102      	bne.n	c3f2 <__aeabi_d2uiz+0x3a>
    c3ec:	f04f 30ff 	mov.w	r0, #4294967295
    c3f0:	4770      	bx	lr
    c3f2:	f04f 0000 	mov.w	r0, #0
    c3f6:	4770      	bx	lr

0000c3f8 <__libc_init_array>:
    c3f8:	b570      	push	{r4, r5, r6, lr}
    c3fa:	4e0d      	ldr	r6, [pc, #52]	; (c430 <__libc_init_array+0x38>)
    c3fc:	4c0d      	ldr	r4, [pc, #52]	; (c434 <__libc_init_array+0x3c>)
    c3fe:	1ba4      	subs	r4, r4, r6
    c400:	10a4      	asrs	r4, r4, #2
    c402:	2500      	movs	r5, #0
    c404:	42a5      	cmp	r5, r4
    c406:	d109      	bne.n	c41c <__libc_init_array+0x24>
    c408:	4e0b      	ldr	r6, [pc, #44]	; (c438 <__libc_init_array+0x40>)
    c40a:	4c0c      	ldr	r4, [pc, #48]	; (c43c <__libc_init_array+0x44>)
    c40c:	f002 f91e 	bl	e64c <_init>
    c410:	1ba4      	subs	r4, r4, r6
    c412:	10a4      	asrs	r4, r4, #2
    c414:	2500      	movs	r5, #0
    c416:	42a5      	cmp	r5, r4
    c418:	d105      	bne.n	c426 <__libc_init_array+0x2e>
    c41a:	bd70      	pop	{r4, r5, r6, pc}
    c41c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c420:	4798      	blx	r3
    c422:	3501      	adds	r5, #1
    c424:	e7ee      	b.n	c404 <__libc_init_array+0xc>
    c426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c42a:	4798      	blx	r3
    c42c:	3501      	adds	r5, #1
    c42e:	e7f2      	b.n	c416 <__libc_init_array+0x1e>
    c430:	0000e658 	.word	0x0000e658
    c434:	0000e658 	.word	0x0000e658
    c438:	0000e658 	.word	0x0000e658
    c43c:	0000e65c 	.word	0x0000e65c

0000c440 <malloc>:
    c440:	4b02      	ldr	r3, [pc, #8]	; (c44c <malloc+0xc>)
    c442:	4601      	mov	r1, r0
    c444:	6818      	ldr	r0, [r3, #0]
    c446:	f000 b865 	b.w	c514 <_malloc_r>
    c44a:	bf00      	nop
    c44c:	20000558 	.word	0x20000558

0000c450 <memcpy>:
    c450:	b510      	push	{r4, lr}
    c452:	1e43      	subs	r3, r0, #1
    c454:	440a      	add	r2, r1
    c456:	4291      	cmp	r1, r2
    c458:	d100      	bne.n	c45c <memcpy+0xc>
    c45a:	bd10      	pop	{r4, pc}
    c45c:	f811 4b01 	ldrb.w	r4, [r1], #1
    c460:	f803 4f01 	strb.w	r4, [r3, #1]!
    c464:	e7f7      	b.n	c456 <memcpy+0x6>

0000c466 <memset>:
    c466:	4402      	add	r2, r0
    c468:	4603      	mov	r3, r0
    c46a:	4293      	cmp	r3, r2
    c46c:	d100      	bne.n	c470 <memset+0xa>
    c46e:	4770      	bx	lr
    c470:	f803 1b01 	strb.w	r1, [r3], #1
    c474:	e7f9      	b.n	c46a <memset+0x4>
	...

0000c478 <_free_r>:
    c478:	b538      	push	{r3, r4, r5, lr}
    c47a:	4605      	mov	r5, r0
    c47c:	2900      	cmp	r1, #0
    c47e:	d045      	beq.n	c50c <_free_r+0x94>
    c480:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c484:	1f0c      	subs	r4, r1, #4
    c486:	2b00      	cmp	r3, #0
    c488:	bfb8      	it	lt
    c48a:	18e4      	addlt	r4, r4, r3
    c48c:	f000 fcae 	bl	cdec <__malloc_lock>
    c490:	4a1f      	ldr	r2, [pc, #124]	; (c510 <_free_r+0x98>)
    c492:	6813      	ldr	r3, [r2, #0]
    c494:	4610      	mov	r0, r2
    c496:	b933      	cbnz	r3, c4a6 <_free_r+0x2e>
    c498:	6063      	str	r3, [r4, #4]
    c49a:	6014      	str	r4, [r2, #0]
    c49c:	4628      	mov	r0, r5
    c49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c4a2:	f000 bca4 	b.w	cdee <__malloc_unlock>
    c4a6:	42a3      	cmp	r3, r4
    c4a8:	d90c      	bls.n	c4c4 <_free_r+0x4c>
    c4aa:	6821      	ldr	r1, [r4, #0]
    c4ac:	1862      	adds	r2, r4, r1
    c4ae:	4293      	cmp	r3, r2
    c4b0:	bf04      	itt	eq
    c4b2:	681a      	ldreq	r2, [r3, #0]
    c4b4:	685b      	ldreq	r3, [r3, #4]
    c4b6:	6063      	str	r3, [r4, #4]
    c4b8:	bf04      	itt	eq
    c4ba:	1852      	addeq	r2, r2, r1
    c4bc:	6022      	streq	r2, [r4, #0]
    c4be:	6004      	str	r4, [r0, #0]
    c4c0:	e7ec      	b.n	c49c <_free_r+0x24>
    c4c2:	4613      	mov	r3, r2
    c4c4:	685a      	ldr	r2, [r3, #4]
    c4c6:	b10a      	cbz	r2, c4cc <_free_r+0x54>
    c4c8:	42a2      	cmp	r2, r4
    c4ca:	d9fa      	bls.n	c4c2 <_free_r+0x4a>
    c4cc:	6819      	ldr	r1, [r3, #0]
    c4ce:	1858      	adds	r0, r3, r1
    c4d0:	42a0      	cmp	r0, r4
    c4d2:	d10b      	bne.n	c4ec <_free_r+0x74>
    c4d4:	6820      	ldr	r0, [r4, #0]
    c4d6:	4401      	add	r1, r0
    c4d8:	1858      	adds	r0, r3, r1
    c4da:	4282      	cmp	r2, r0
    c4dc:	6019      	str	r1, [r3, #0]
    c4de:	d1dd      	bne.n	c49c <_free_r+0x24>
    c4e0:	6810      	ldr	r0, [r2, #0]
    c4e2:	6852      	ldr	r2, [r2, #4]
    c4e4:	605a      	str	r2, [r3, #4]
    c4e6:	4401      	add	r1, r0
    c4e8:	6019      	str	r1, [r3, #0]
    c4ea:	e7d7      	b.n	c49c <_free_r+0x24>
    c4ec:	d902      	bls.n	c4f4 <_free_r+0x7c>
    c4ee:	230c      	movs	r3, #12
    c4f0:	602b      	str	r3, [r5, #0]
    c4f2:	e7d3      	b.n	c49c <_free_r+0x24>
    c4f4:	6820      	ldr	r0, [r4, #0]
    c4f6:	1821      	adds	r1, r4, r0
    c4f8:	428a      	cmp	r2, r1
    c4fa:	bf04      	itt	eq
    c4fc:	6811      	ldreq	r1, [r2, #0]
    c4fe:	6852      	ldreq	r2, [r2, #4]
    c500:	6062      	str	r2, [r4, #4]
    c502:	bf04      	itt	eq
    c504:	1809      	addeq	r1, r1, r0
    c506:	6021      	streq	r1, [r4, #0]
    c508:	605c      	str	r4, [r3, #4]
    c50a:	e7c7      	b.n	c49c <_free_r+0x24>
    c50c:	bd38      	pop	{r3, r4, r5, pc}
    c50e:	bf00      	nop
    c510:	20000f44 	.word	0x20000f44

0000c514 <_malloc_r>:
    c514:	b570      	push	{r4, r5, r6, lr}
    c516:	1ccd      	adds	r5, r1, #3
    c518:	f025 0503 	bic.w	r5, r5, #3
    c51c:	3508      	adds	r5, #8
    c51e:	2d0c      	cmp	r5, #12
    c520:	bf38      	it	cc
    c522:	250c      	movcc	r5, #12
    c524:	2d00      	cmp	r5, #0
    c526:	4606      	mov	r6, r0
    c528:	db01      	blt.n	c52e <_malloc_r+0x1a>
    c52a:	42a9      	cmp	r1, r5
    c52c:	d903      	bls.n	c536 <_malloc_r+0x22>
    c52e:	230c      	movs	r3, #12
    c530:	6033      	str	r3, [r6, #0]
    c532:	2000      	movs	r0, #0
    c534:	bd70      	pop	{r4, r5, r6, pc}
    c536:	f000 fc59 	bl	cdec <__malloc_lock>
    c53a:	4a23      	ldr	r2, [pc, #140]	; (c5c8 <_malloc_r+0xb4>)
    c53c:	6814      	ldr	r4, [r2, #0]
    c53e:	4621      	mov	r1, r4
    c540:	b991      	cbnz	r1, c568 <_malloc_r+0x54>
    c542:	4c22      	ldr	r4, [pc, #136]	; (c5cc <_malloc_r+0xb8>)
    c544:	6823      	ldr	r3, [r4, #0]
    c546:	b91b      	cbnz	r3, c550 <_malloc_r+0x3c>
    c548:	4630      	mov	r0, r6
    c54a:	f000 f8bd 	bl	c6c8 <_sbrk_r>
    c54e:	6020      	str	r0, [r4, #0]
    c550:	4629      	mov	r1, r5
    c552:	4630      	mov	r0, r6
    c554:	f000 f8b8 	bl	c6c8 <_sbrk_r>
    c558:	1c43      	adds	r3, r0, #1
    c55a:	d126      	bne.n	c5aa <_malloc_r+0x96>
    c55c:	230c      	movs	r3, #12
    c55e:	6033      	str	r3, [r6, #0]
    c560:	4630      	mov	r0, r6
    c562:	f000 fc44 	bl	cdee <__malloc_unlock>
    c566:	e7e4      	b.n	c532 <_malloc_r+0x1e>
    c568:	680b      	ldr	r3, [r1, #0]
    c56a:	1b5b      	subs	r3, r3, r5
    c56c:	d41a      	bmi.n	c5a4 <_malloc_r+0x90>
    c56e:	2b0b      	cmp	r3, #11
    c570:	d90f      	bls.n	c592 <_malloc_r+0x7e>
    c572:	600b      	str	r3, [r1, #0]
    c574:	50cd      	str	r5, [r1, r3]
    c576:	18cc      	adds	r4, r1, r3
    c578:	4630      	mov	r0, r6
    c57a:	f000 fc38 	bl	cdee <__malloc_unlock>
    c57e:	f104 000b 	add.w	r0, r4, #11
    c582:	1d23      	adds	r3, r4, #4
    c584:	f020 0007 	bic.w	r0, r0, #7
    c588:	1ac3      	subs	r3, r0, r3
    c58a:	d01b      	beq.n	c5c4 <_malloc_r+0xb0>
    c58c:	425a      	negs	r2, r3
    c58e:	50e2      	str	r2, [r4, r3]
    c590:	bd70      	pop	{r4, r5, r6, pc}
    c592:	428c      	cmp	r4, r1
    c594:	bf0d      	iteet	eq
    c596:	6863      	ldreq	r3, [r4, #4]
    c598:	684b      	ldrne	r3, [r1, #4]
    c59a:	6063      	strne	r3, [r4, #4]
    c59c:	6013      	streq	r3, [r2, #0]
    c59e:	bf18      	it	ne
    c5a0:	460c      	movne	r4, r1
    c5a2:	e7e9      	b.n	c578 <_malloc_r+0x64>
    c5a4:	460c      	mov	r4, r1
    c5a6:	6849      	ldr	r1, [r1, #4]
    c5a8:	e7ca      	b.n	c540 <_malloc_r+0x2c>
    c5aa:	1cc4      	adds	r4, r0, #3
    c5ac:	f024 0403 	bic.w	r4, r4, #3
    c5b0:	42a0      	cmp	r0, r4
    c5b2:	d005      	beq.n	c5c0 <_malloc_r+0xac>
    c5b4:	1a21      	subs	r1, r4, r0
    c5b6:	4630      	mov	r0, r6
    c5b8:	f000 f886 	bl	c6c8 <_sbrk_r>
    c5bc:	3001      	adds	r0, #1
    c5be:	d0cd      	beq.n	c55c <_malloc_r+0x48>
    c5c0:	6025      	str	r5, [r4, #0]
    c5c2:	e7d9      	b.n	c578 <_malloc_r+0x64>
    c5c4:	bd70      	pop	{r4, r5, r6, pc}
    c5c6:	bf00      	nop
    c5c8:	20000f44 	.word	0x20000f44
    c5cc:	20000f48 	.word	0x20000f48

0000c5d0 <iprintf>:
    c5d0:	b40f      	push	{r0, r1, r2, r3}
    c5d2:	4b0a      	ldr	r3, [pc, #40]	; (c5fc <iprintf+0x2c>)
    c5d4:	b513      	push	{r0, r1, r4, lr}
    c5d6:	681c      	ldr	r4, [r3, #0]
    c5d8:	b124      	cbz	r4, c5e4 <iprintf+0x14>
    c5da:	69a3      	ldr	r3, [r4, #24]
    c5dc:	b913      	cbnz	r3, c5e4 <iprintf+0x14>
    c5de:	4620      	mov	r0, r4
    c5e0:	f000 fb16 	bl	cc10 <__sinit>
    c5e4:	ab05      	add	r3, sp, #20
    c5e6:	9a04      	ldr	r2, [sp, #16]
    c5e8:	68a1      	ldr	r1, [r4, #8]
    c5ea:	9301      	str	r3, [sp, #4]
    c5ec:	4620      	mov	r0, r4
    c5ee:	f000 fd77 	bl	d0e0 <_vfiprintf_r>
    c5f2:	b002      	add	sp, #8
    c5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c5f8:	b004      	add	sp, #16
    c5fa:	4770      	bx	lr
    c5fc:	20000558 	.word	0x20000558

0000c600 <_puts_r>:
    c600:	b570      	push	{r4, r5, r6, lr}
    c602:	460e      	mov	r6, r1
    c604:	4605      	mov	r5, r0
    c606:	b118      	cbz	r0, c610 <_puts_r+0x10>
    c608:	6983      	ldr	r3, [r0, #24]
    c60a:	b90b      	cbnz	r3, c610 <_puts_r+0x10>
    c60c:	f000 fb00 	bl	cc10 <__sinit>
    c610:	69ab      	ldr	r3, [r5, #24]
    c612:	68ac      	ldr	r4, [r5, #8]
    c614:	b913      	cbnz	r3, c61c <_puts_r+0x1c>
    c616:	4628      	mov	r0, r5
    c618:	f000 fafa 	bl	cc10 <__sinit>
    c61c:	4b23      	ldr	r3, [pc, #140]	; (c6ac <_puts_r+0xac>)
    c61e:	429c      	cmp	r4, r3
    c620:	d117      	bne.n	c652 <_puts_r+0x52>
    c622:	686c      	ldr	r4, [r5, #4]
    c624:	89a3      	ldrh	r3, [r4, #12]
    c626:	071b      	lsls	r3, r3, #28
    c628:	d51d      	bpl.n	c666 <_puts_r+0x66>
    c62a:	6923      	ldr	r3, [r4, #16]
    c62c:	b1db      	cbz	r3, c666 <_puts_r+0x66>
    c62e:	3e01      	subs	r6, #1
    c630:	68a3      	ldr	r3, [r4, #8]
    c632:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    c636:	3b01      	subs	r3, #1
    c638:	60a3      	str	r3, [r4, #8]
    c63a:	b9e9      	cbnz	r1, c678 <_puts_r+0x78>
    c63c:	2b00      	cmp	r3, #0
    c63e:	da2e      	bge.n	c69e <_puts_r+0x9e>
    c640:	4622      	mov	r2, r4
    c642:	210a      	movs	r1, #10
    c644:	4628      	mov	r0, r5
    c646:	f000 f931 	bl	c8ac <__swbuf_r>
    c64a:	3001      	adds	r0, #1
    c64c:	d011      	beq.n	c672 <_puts_r+0x72>
    c64e:	200a      	movs	r0, #10
    c650:	bd70      	pop	{r4, r5, r6, pc}
    c652:	4b17      	ldr	r3, [pc, #92]	; (c6b0 <_puts_r+0xb0>)
    c654:	429c      	cmp	r4, r3
    c656:	d101      	bne.n	c65c <_puts_r+0x5c>
    c658:	68ac      	ldr	r4, [r5, #8]
    c65a:	e7e3      	b.n	c624 <_puts_r+0x24>
    c65c:	4b15      	ldr	r3, [pc, #84]	; (c6b4 <_puts_r+0xb4>)
    c65e:	429c      	cmp	r4, r3
    c660:	bf08      	it	eq
    c662:	68ec      	ldreq	r4, [r5, #12]
    c664:	e7de      	b.n	c624 <_puts_r+0x24>
    c666:	4621      	mov	r1, r4
    c668:	4628      	mov	r0, r5
    c66a:	f000 f971 	bl	c950 <__swsetup_r>
    c66e:	2800      	cmp	r0, #0
    c670:	d0dd      	beq.n	c62e <_puts_r+0x2e>
    c672:	f04f 30ff 	mov.w	r0, #4294967295
    c676:	bd70      	pop	{r4, r5, r6, pc}
    c678:	2b00      	cmp	r3, #0
    c67a:	da04      	bge.n	c686 <_puts_r+0x86>
    c67c:	69a2      	ldr	r2, [r4, #24]
    c67e:	4293      	cmp	r3, r2
    c680:	db06      	blt.n	c690 <_puts_r+0x90>
    c682:	290a      	cmp	r1, #10
    c684:	d004      	beq.n	c690 <_puts_r+0x90>
    c686:	6823      	ldr	r3, [r4, #0]
    c688:	1c5a      	adds	r2, r3, #1
    c68a:	6022      	str	r2, [r4, #0]
    c68c:	7019      	strb	r1, [r3, #0]
    c68e:	e7cf      	b.n	c630 <_puts_r+0x30>
    c690:	4622      	mov	r2, r4
    c692:	4628      	mov	r0, r5
    c694:	f000 f90a 	bl	c8ac <__swbuf_r>
    c698:	3001      	adds	r0, #1
    c69a:	d1c9      	bne.n	c630 <_puts_r+0x30>
    c69c:	e7e9      	b.n	c672 <_puts_r+0x72>
    c69e:	6823      	ldr	r3, [r4, #0]
    c6a0:	200a      	movs	r0, #10
    c6a2:	1c5a      	adds	r2, r3, #1
    c6a4:	6022      	str	r2, [r4, #0]
    c6a6:	7018      	strb	r0, [r3, #0]
    c6a8:	bd70      	pop	{r4, r5, r6, pc}
    c6aa:	bf00      	nop
    c6ac:	0000e5d8 	.word	0x0000e5d8
    c6b0:	0000e5f8 	.word	0x0000e5f8
    c6b4:	0000e5b8 	.word	0x0000e5b8

0000c6b8 <puts>:
    c6b8:	4b02      	ldr	r3, [pc, #8]	; (c6c4 <puts+0xc>)
    c6ba:	4601      	mov	r1, r0
    c6bc:	6818      	ldr	r0, [r3, #0]
    c6be:	f7ff bf9f 	b.w	c600 <_puts_r>
    c6c2:	bf00      	nop
    c6c4:	20000558 	.word	0x20000558

0000c6c8 <_sbrk_r>:
    c6c8:	b538      	push	{r3, r4, r5, lr}
    c6ca:	4c06      	ldr	r4, [pc, #24]	; (c6e4 <_sbrk_r+0x1c>)
    c6cc:	2300      	movs	r3, #0
    c6ce:	4605      	mov	r5, r0
    c6d0:	4608      	mov	r0, r1
    c6d2:	6023      	str	r3, [r4, #0]
    c6d4:	f7f9 fc92 	bl	5ffc <_sbrk>
    c6d8:	1c43      	adds	r3, r0, #1
    c6da:	d102      	bne.n	c6e2 <_sbrk_r+0x1a>
    c6dc:	6823      	ldr	r3, [r4, #0]
    c6de:	b103      	cbz	r3, c6e2 <_sbrk_r+0x1a>
    c6e0:	602b      	str	r3, [r5, #0]
    c6e2:	bd38      	pop	{r3, r4, r5, pc}
    c6e4:	20007de8 	.word	0x20007de8

0000c6e8 <setbuf>:
    c6e8:	2900      	cmp	r1, #0
    c6ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c6ee:	bf0c      	ite	eq
    c6f0:	2202      	moveq	r2, #2
    c6f2:	2200      	movne	r2, #0
    c6f4:	f000 b800 	b.w	c6f8 <setvbuf>

0000c6f8 <setvbuf>:
    c6f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c6fc:	461d      	mov	r5, r3
    c6fe:	4b51      	ldr	r3, [pc, #324]	; (c844 <setvbuf+0x14c>)
    c700:	681e      	ldr	r6, [r3, #0]
    c702:	4604      	mov	r4, r0
    c704:	460f      	mov	r7, r1
    c706:	4690      	mov	r8, r2
    c708:	b126      	cbz	r6, c714 <setvbuf+0x1c>
    c70a:	69b3      	ldr	r3, [r6, #24]
    c70c:	b913      	cbnz	r3, c714 <setvbuf+0x1c>
    c70e:	4630      	mov	r0, r6
    c710:	f000 fa7e 	bl	cc10 <__sinit>
    c714:	4b4c      	ldr	r3, [pc, #304]	; (c848 <setvbuf+0x150>)
    c716:	429c      	cmp	r4, r3
    c718:	d152      	bne.n	c7c0 <setvbuf+0xc8>
    c71a:	6874      	ldr	r4, [r6, #4]
    c71c:	f1b8 0f02 	cmp.w	r8, #2
    c720:	d006      	beq.n	c730 <setvbuf+0x38>
    c722:	f1b8 0f01 	cmp.w	r8, #1
    c726:	f200 8089 	bhi.w	c83c <setvbuf+0x144>
    c72a:	2d00      	cmp	r5, #0
    c72c:	f2c0 8086 	blt.w	c83c <setvbuf+0x144>
    c730:	4621      	mov	r1, r4
    c732:	4630      	mov	r0, r6
    c734:	f000 fa02 	bl	cb3c <_fflush_r>
    c738:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c73a:	b141      	cbz	r1, c74e <setvbuf+0x56>
    c73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c740:	4299      	cmp	r1, r3
    c742:	d002      	beq.n	c74a <setvbuf+0x52>
    c744:	4630      	mov	r0, r6
    c746:	f7ff fe97 	bl	c478 <_free_r>
    c74a:	2300      	movs	r3, #0
    c74c:	6363      	str	r3, [r4, #52]	; 0x34
    c74e:	2300      	movs	r3, #0
    c750:	61a3      	str	r3, [r4, #24]
    c752:	6063      	str	r3, [r4, #4]
    c754:	89a3      	ldrh	r3, [r4, #12]
    c756:	061b      	lsls	r3, r3, #24
    c758:	d503      	bpl.n	c762 <setvbuf+0x6a>
    c75a:	6921      	ldr	r1, [r4, #16]
    c75c:	4630      	mov	r0, r6
    c75e:	f7ff fe8b 	bl	c478 <_free_r>
    c762:	89a3      	ldrh	r3, [r4, #12]
    c764:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    c768:	f023 0303 	bic.w	r3, r3, #3
    c76c:	f1b8 0f02 	cmp.w	r8, #2
    c770:	81a3      	strh	r3, [r4, #12]
    c772:	d05d      	beq.n	c830 <setvbuf+0x138>
    c774:	ab01      	add	r3, sp, #4
    c776:	466a      	mov	r2, sp
    c778:	4621      	mov	r1, r4
    c77a:	4630      	mov	r0, r6
    c77c:	f000 fad2 	bl	cd24 <__swhatbuf_r>
    c780:	89a3      	ldrh	r3, [r4, #12]
    c782:	4318      	orrs	r0, r3
    c784:	81a0      	strh	r0, [r4, #12]
    c786:	bb2d      	cbnz	r5, c7d4 <setvbuf+0xdc>
    c788:	9d00      	ldr	r5, [sp, #0]
    c78a:	4628      	mov	r0, r5
    c78c:	f7ff fe58 	bl	c440 <malloc>
    c790:	4607      	mov	r7, r0
    c792:	2800      	cmp	r0, #0
    c794:	d14e      	bne.n	c834 <setvbuf+0x13c>
    c796:	f8dd 9000 	ldr.w	r9, [sp]
    c79a:	45a9      	cmp	r9, r5
    c79c:	d13c      	bne.n	c818 <setvbuf+0x120>
    c79e:	f04f 30ff 	mov.w	r0, #4294967295
    c7a2:	89a3      	ldrh	r3, [r4, #12]
    c7a4:	f043 0302 	orr.w	r3, r3, #2
    c7a8:	81a3      	strh	r3, [r4, #12]
    c7aa:	2300      	movs	r3, #0
    c7ac:	60a3      	str	r3, [r4, #8]
    c7ae:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c7b2:	6023      	str	r3, [r4, #0]
    c7b4:	6123      	str	r3, [r4, #16]
    c7b6:	2301      	movs	r3, #1
    c7b8:	6163      	str	r3, [r4, #20]
    c7ba:	b003      	add	sp, #12
    c7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c7c0:	4b22      	ldr	r3, [pc, #136]	; (c84c <setvbuf+0x154>)
    c7c2:	429c      	cmp	r4, r3
    c7c4:	d101      	bne.n	c7ca <setvbuf+0xd2>
    c7c6:	68b4      	ldr	r4, [r6, #8]
    c7c8:	e7a8      	b.n	c71c <setvbuf+0x24>
    c7ca:	4b21      	ldr	r3, [pc, #132]	; (c850 <setvbuf+0x158>)
    c7cc:	429c      	cmp	r4, r3
    c7ce:	bf08      	it	eq
    c7d0:	68f4      	ldreq	r4, [r6, #12]
    c7d2:	e7a3      	b.n	c71c <setvbuf+0x24>
    c7d4:	2f00      	cmp	r7, #0
    c7d6:	d0d8      	beq.n	c78a <setvbuf+0x92>
    c7d8:	69b3      	ldr	r3, [r6, #24]
    c7da:	b913      	cbnz	r3, c7e2 <setvbuf+0xea>
    c7dc:	4630      	mov	r0, r6
    c7de:	f000 fa17 	bl	cc10 <__sinit>
    c7e2:	f1b8 0f01 	cmp.w	r8, #1
    c7e6:	bf08      	it	eq
    c7e8:	89a3      	ldrheq	r3, [r4, #12]
    c7ea:	6027      	str	r7, [r4, #0]
    c7ec:	bf04      	itt	eq
    c7ee:	f043 0301 	orreq.w	r3, r3, #1
    c7f2:	81a3      	strheq	r3, [r4, #12]
    c7f4:	89a3      	ldrh	r3, [r4, #12]
    c7f6:	6127      	str	r7, [r4, #16]
    c7f8:	f013 0008 	ands.w	r0, r3, #8
    c7fc:	6165      	str	r5, [r4, #20]
    c7fe:	d01b      	beq.n	c838 <setvbuf+0x140>
    c800:	f013 0001 	ands.w	r0, r3, #1
    c804:	bf18      	it	ne
    c806:	426d      	negne	r5, r5
    c808:	f04f 0300 	mov.w	r3, #0
    c80c:	bf1d      	ittte	ne
    c80e:	60a3      	strne	r3, [r4, #8]
    c810:	61a5      	strne	r5, [r4, #24]
    c812:	4618      	movne	r0, r3
    c814:	60a5      	streq	r5, [r4, #8]
    c816:	e7d0      	b.n	c7ba <setvbuf+0xc2>
    c818:	4648      	mov	r0, r9
    c81a:	f7ff fe11 	bl	c440 <malloc>
    c81e:	4607      	mov	r7, r0
    c820:	2800      	cmp	r0, #0
    c822:	d0bc      	beq.n	c79e <setvbuf+0xa6>
    c824:	89a3      	ldrh	r3, [r4, #12]
    c826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c82a:	81a3      	strh	r3, [r4, #12]
    c82c:	464d      	mov	r5, r9
    c82e:	e7d3      	b.n	c7d8 <setvbuf+0xe0>
    c830:	2000      	movs	r0, #0
    c832:	e7b6      	b.n	c7a2 <setvbuf+0xaa>
    c834:	46a9      	mov	r9, r5
    c836:	e7f5      	b.n	c824 <setvbuf+0x12c>
    c838:	60a0      	str	r0, [r4, #8]
    c83a:	e7be      	b.n	c7ba <setvbuf+0xc2>
    c83c:	f04f 30ff 	mov.w	r0, #4294967295
    c840:	e7bb      	b.n	c7ba <setvbuf+0xc2>
    c842:	bf00      	nop
    c844:	20000558 	.word	0x20000558
    c848:	0000e5d8 	.word	0x0000e5d8
    c84c:	0000e5f8 	.word	0x0000e5f8
    c850:	0000e5b8 	.word	0x0000e5b8

0000c854 <siprintf>:
    c854:	b40e      	push	{r1, r2, r3}
    c856:	b500      	push	{lr}
    c858:	b09c      	sub	sp, #112	; 0x70
    c85a:	f44f 7102 	mov.w	r1, #520	; 0x208
    c85e:	ab1d      	add	r3, sp, #116	; 0x74
    c860:	f8ad 1014 	strh.w	r1, [sp, #20]
    c864:	9002      	str	r0, [sp, #8]
    c866:	9006      	str	r0, [sp, #24]
    c868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c86c:	480a      	ldr	r0, [pc, #40]	; (c898 <siprintf+0x44>)
    c86e:	9104      	str	r1, [sp, #16]
    c870:	9107      	str	r1, [sp, #28]
    c872:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c876:	f853 2b04 	ldr.w	r2, [r3], #4
    c87a:	f8ad 1016 	strh.w	r1, [sp, #22]
    c87e:	6800      	ldr	r0, [r0, #0]
    c880:	9301      	str	r3, [sp, #4]
    c882:	a902      	add	r1, sp, #8
    c884:	f000 fb10 	bl	cea8 <_svfiprintf_r>
    c888:	9b02      	ldr	r3, [sp, #8]
    c88a:	2200      	movs	r2, #0
    c88c:	701a      	strb	r2, [r3, #0]
    c88e:	b01c      	add	sp, #112	; 0x70
    c890:	f85d eb04 	ldr.w	lr, [sp], #4
    c894:	b003      	add	sp, #12
    c896:	4770      	bx	lr
    c898:	20000558 	.word	0x20000558

0000c89c <strlen>:
    c89c:	4603      	mov	r3, r0
    c89e:	f813 2b01 	ldrb.w	r2, [r3], #1
    c8a2:	2a00      	cmp	r2, #0
    c8a4:	d1fb      	bne.n	c89e <strlen+0x2>
    c8a6:	1a18      	subs	r0, r3, r0
    c8a8:	3801      	subs	r0, #1
    c8aa:	4770      	bx	lr

0000c8ac <__swbuf_r>:
    c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8ae:	460e      	mov	r6, r1
    c8b0:	4614      	mov	r4, r2
    c8b2:	4605      	mov	r5, r0
    c8b4:	b118      	cbz	r0, c8be <__swbuf_r+0x12>
    c8b6:	6983      	ldr	r3, [r0, #24]
    c8b8:	b90b      	cbnz	r3, c8be <__swbuf_r+0x12>
    c8ba:	f000 f9a9 	bl	cc10 <__sinit>
    c8be:	4b21      	ldr	r3, [pc, #132]	; (c944 <__swbuf_r+0x98>)
    c8c0:	429c      	cmp	r4, r3
    c8c2:	d12a      	bne.n	c91a <__swbuf_r+0x6e>
    c8c4:	686c      	ldr	r4, [r5, #4]
    c8c6:	69a3      	ldr	r3, [r4, #24]
    c8c8:	60a3      	str	r3, [r4, #8]
    c8ca:	89a3      	ldrh	r3, [r4, #12]
    c8cc:	071a      	lsls	r2, r3, #28
    c8ce:	d52e      	bpl.n	c92e <__swbuf_r+0x82>
    c8d0:	6923      	ldr	r3, [r4, #16]
    c8d2:	b363      	cbz	r3, c92e <__swbuf_r+0x82>
    c8d4:	6923      	ldr	r3, [r4, #16]
    c8d6:	6820      	ldr	r0, [r4, #0]
    c8d8:	1ac0      	subs	r0, r0, r3
    c8da:	6963      	ldr	r3, [r4, #20]
    c8dc:	b2f6      	uxtb	r6, r6
    c8de:	4298      	cmp	r0, r3
    c8e0:	4637      	mov	r7, r6
    c8e2:	db04      	blt.n	c8ee <__swbuf_r+0x42>
    c8e4:	4621      	mov	r1, r4
    c8e6:	4628      	mov	r0, r5
    c8e8:	f000 f928 	bl	cb3c <_fflush_r>
    c8ec:	bb28      	cbnz	r0, c93a <__swbuf_r+0x8e>
    c8ee:	68a3      	ldr	r3, [r4, #8]
    c8f0:	3b01      	subs	r3, #1
    c8f2:	60a3      	str	r3, [r4, #8]
    c8f4:	6823      	ldr	r3, [r4, #0]
    c8f6:	1c5a      	adds	r2, r3, #1
    c8f8:	6022      	str	r2, [r4, #0]
    c8fa:	701e      	strb	r6, [r3, #0]
    c8fc:	6963      	ldr	r3, [r4, #20]
    c8fe:	3001      	adds	r0, #1
    c900:	4298      	cmp	r0, r3
    c902:	d004      	beq.n	c90e <__swbuf_r+0x62>
    c904:	89a3      	ldrh	r3, [r4, #12]
    c906:	07db      	lsls	r3, r3, #31
    c908:	d519      	bpl.n	c93e <__swbuf_r+0x92>
    c90a:	2e0a      	cmp	r6, #10
    c90c:	d117      	bne.n	c93e <__swbuf_r+0x92>
    c90e:	4621      	mov	r1, r4
    c910:	4628      	mov	r0, r5
    c912:	f000 f913 	bl	cb3c <_fflush_r>
    c916:	b190      	cbz	r0, c93e <__swbuf_r+0x92>
    c918:	e00f      	b.n	c93a <__swbuf_r+0x8e>
    c91a:	4b0b      	ldr	r3, [pc, #44]	; (c948 <__swbuf_r+0x9c>)
    c91c:	429c      	cmp	r4, r3
    c91e:	d101      	bne.n	c924 <__swbuf_r+0x78>
    c920:	68ac      	ldr	r4, [r5, #8]
    c922:	e7d0      	b.n	c8c6 <__swbuf_r+0x1a>
    c924:	4b09      	ldr	r3, [pc, #36]	; (c94c <__swbuf_r+0xa0>)
    c926:	429c      	cmp	r4, r3
    c928:	bf08      	it	eq
    c92a:	68ec      	ldreq	r4, [r5, #12]
    c92c:	e7cb      	b.n	c8c6 <__swbuf_r+0x1a>
    c92e:	4621      	mov	r1, r4
    c930:	4628      	mov	r0, r5
    c932:	f000 f80d 	bl	c950 <__swsetup_r>
    c936:	2800      	cmp	r0, #0
    c938:	d0cc      	beq.n	c8d4 <__swbuf_r+0x28>
    c93a:	f04f 37ff 	mov.w	r7, #4294967295
    c93e:	4638      	mov	r0, r7
    c940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c942:	bf00      	nop
    c944:	0000e5d8 	.word	0x0000e5d8
    c948:	0000e5f8 	.word	0x0000e5f8
    c94c:	0000e5b8 	.word	0x0000e5b8

0000c950 <__swsetup_r>:
    c950:	4b32      	ldr	r3, [pc, #200]	; (ca1c <__swsetup_r+0xcc>)
    c952:	b570      	push	{r4, r5, r6, lr}
    c954:	681d      	ldr	r5, [r3, #0]
    c956:	4606      	mov	r6, r0
    c958:	460c      	mov	r4, r1
    c95a:	b125      	cbz	r5, c966 <__swsetup_r+0x16>
    c95c:	69ab      	ldr	r3, [r5, #24]
    c95e:	b913      	cbnz	r3, c966 <__swsetup_r+0x16>
    c960:	4628      	mov	r0, r5
    c962:	f000 f955 	bl	cc10 <__sinit>
    c966:	4b2e      	ldr	r3, [pc, #184]	; (ca20 <__swsetup_r+0xd0>)
    c968:	429c      	cmp	r4, r3
    c96a:	d10f      	bne.n	c98c <__swsetup_r+0x3c>
    c96c:	686c      	ldr	r4, [r5, #4]
    c96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c972:	b29a      	uxth	r2, r3
    c974:	0715      	lsls	r5, r2, #28
    c976:	d42c      	bmi.n	c9d2 <__swsetup_r+0x82>
    c978:	06d0      	lsls	r0, r2, #27
    c97a:	d411      	bmi.n	c9a0 <__swsetup_r+0x50>
    c97c:	2209      	movs	r2, #9
    c97e:	6032      	str	r2, [r6, #0]
    c980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c984:	81a3      	strh	r3, [r4, #12]
    c986:	f04f 30ff 	mov.w	r0, #4294967295
    c98a:	bd70      	pop	{r4, r5, r6, pc}
    c98c:	4b25      	ldr	r3, [pc, #148]	; (ca24 <__swsetup_r+0xd4>)
    c98e:	429c      	cmp	r4, r3
    c990:	d101      	bne.n	c996 <__swsetup_r+0x46>
    c992:	68ac      	ldr	r4, [r5, #8]
    c994:	e7eb      	b.n	c96e <__swsetup_r+0x1e>
    c996:	4b24      	ldr	r3, [pc, #144]	; (ca28 <__swsetup_r+0xd8>)
    c998:	429c      	cmp	r4, r3
    c99a:	bf08      	it	eq
    c99c:	68ec      	ldreq	r4, [r5, #12]
    c99e:	e7e6      	b.n	c96e <__swsetup_r+0x1e>
    c9a0:	0751      	lsls	r1, r2, #29
    c9a2:	d512      	bpl.n	c9ca <__swsetup_r+0x7a>
    c9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c9a6:	b141      	cbz	r1, c9ba <__swsetup_r+0x6a>
    c9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c9ac:	4299      	cmp	r1, r3
    c9ae:	d002      	beq.n	c9b6 <__swsetup_r+0x66>
    c9b0:	4630      	mov	r0, r6
    c9b2:	f7ff fd61 	bl	c478 <_free_r>
    c9b6:	2300      	movs	r3, #0
    c9b8:	6363      	str	r3, [r4, #52]	; 0x34
    c9ba:	89a3      	ldrh	r3, [r4, #12]
    c9bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c9c0:	81a3      	strh	r3, [r4, #12]
    c9c2:	2300      	movs	r3, #0
    c9c4:	6063      	str	r3, [r4, #4]
    c9c6:	6923      	ldr	r3, [r4, #16]
    c9c8:	6023      	str	r3, [r4, #0]
    c9ca:	89a3      	ldrh	r3, [r4, #12]
    c9cc:	f043 0308 	orr.w	r3, r3, #8
    c9d0:	81a3      	strh	r3, [r4, #12]
    c9d2:	6923      	ldr	r3, [r4, #16]
    c9d4:	b94b      	cbnz	r3, c9ea <__swsetup_r+0x9a>
    c9d6:	89a3      	ldrh	r3, [r4, #12]
    c9d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c9dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c9e0:	d003      	beq.n	c9ea <__swsetup_r+0x9a>
    c9e2:	4621      	mov	r1, r4
    c9e4:	4630      	mov	r0, r6
    c9e6:	f000 f9c1 	bl	cd6c <__smakebuf_r>
    c9ea:	89a2      	ldrh	r2, [r4, #12]
    c9ec:	f012 0301 	ands.w	r3, r2, #1
    c9f0:	d00c      	beq.n	ca0c <__swsetup_r+0xbc>
    c9f2:	2300      	movs	r3, #0
    c9f4:	60a3      	str	r3, [r4, #8]
    c9f6:	6963      	ldr	r3, [r4, #20]
    c9f8:	425b      	negs	r3, r3
    c9fa:	61a3      	str	r3, [r4, #24]
    c9fc:	6923      	ldr	r3, [r4, #16]
    c9fe:	b953      	cbnz	r3, ca16 <__swsetup_r+0xc6>
    ca00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ca04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    ca08:	d1ba      	bne.n	c980 <__swsetup_r+0x30>
    ca0a:	bd70      	pop	{r4, r5, r6, pc}
    ca0c:	0792      	lsls	r2, r2, #30
    ca0e:	bf58      	it	pl
    ca10:	6963      	ldrpl	r3, [r4, #20]
    ca12:	60a3      	str	r3, [r4, #8]
    ca14:	e7f2      	b.n	c9fc <__swsetup_r+0xac>
    ca16:	2000      	movs	r0, #0
    ca18:	e7f7      	b.n	ca0a <__swsetup_r+0xba>
    ca1a:	bf00      	nop
    ca1c:	20000558 	.word	0x20000558
    ca20:	0000e5d8 	.word	0x0000e5d8
    ca24:	0000e5f8 	.word	0x0000e5f8
    ca28:	0000e5b8 	.word	0x0000e5b8

0000ca2c <__sflush_r>:
    ca2c:	898a      	ldrh	r2, [r1, #12]
    ca2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca32:	4605      	mov	r5, r0
    ca34:	0710      	lsls	r0, r2, #28
    ca36:	460c      	mov	r4, r1
    ca38:	d45a      	bmi.n	caf0 <__sflush_r+0xc4>
    ca3a:	684b      	ldr	r3, [r1, #4]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	dc05      	bgt.n	ca4c <__sflush_r+0x20>
    ca40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    ca42:	2b00      	cmp	r3, #0
    ca44:	dc02      	bgt.n	ca4c <__sflush_r+0x20>
    ca46:	2000      	movs	r0, #0
    ca48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    ca4e:	2e00      	cmp	r6, #0
    ca50:	d0f9      	beq.n	ca46 <__sflush_r+0x1a>
    ca52:	2300      	movs	r3, #0
    ca54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    ca58:	682f      	ldr	r7, [r5, #0]
    ca5a:	602b      	str	r3, [r5, #0]
    ca5c:	d033      	beq.n	cac6 <__sflush_r+0x9a>
    ca5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    ca60:	89a3      	ldrh	r3, [r4, #12]
    ca62:	075a      	lsls	r2, r3, #29
    ca64:	d505      	bpl.n	ca72 <__sflush_r+0x46>
    ca66:	6863      	ldr	r3, [r4, #4]
    ca68:	1ac0      	subs	r0, r0, r3
    ca6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ca6c:	b10b      	cbz	r3, ca72 <__sflush_r+0x46>
    ca6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ca70:	1ac0      	subs	r0, r0, r3
    ca72:	2300      	movs	r3, #0
    ca74:	4602      	mov	r2, r0
    ca76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    ca78:	6a21      	ldr	r1, [r4, #32]
    ca7a:	4628      	mov	r0, r5
    ca7c:	47b0      	blx	r6
    ca7e:	1c43      	adds	r3, r0, #1
    ca80:	89a3      	ldrh	r3, [r4, #12]
    ca82:	d106      	bne.n	ca92 <__sflush_r+0x66>
    ca84:	6829      	ldr	r1, [r5, #0]
    ca86:	291d      	cmp	r1, #29
    ca88:	d84b      	bhi.n	cb22 <__sflush_r+0xf6>
    ca8a:	4a2b      	ldr	r2, [pc, #172]	; (cb38 <__sflush_r+0x10c>)
    ca8c:	40ca      	lsrs	r2, r1
    ca8e:	07d6      	lsls	r6, r2, #31
    ca90:	d547      	bpl.n	cb22 <__sflush_r+0xf6>
    ca92:	2200      	movs	r2, #0
    ca94:	6062      	str	r2, [r4, #4]
    ca96:	04d9      	lsls	r1, r3, #19
    ca98:	6922      	ldr	r2, [r4, #16]
    ca9a:	6022      	str	r2, [r4, #0]
    ca9c:	d504      	bpl.n	caa8 <__sflush_r+0x7c>
    ca9e:	1c42      	adds	r2, r0, #1
    caa0:	d101      	bne.n	caa6 <__sflush_r+0x7a>
    caa2:	682b      	ldr	r3, [r5, #0]
    caa4:	b903      	cbnz	r3, caa8 <__sflush_r+0x7c>
    caa6:	6560      	str	r0, [r4, #84]	; 0x54
    caa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    caaa:	602f      	str	r7, [r5, #0]
    caac:	2900      	cmp	r1, #0
    caae:	d0ca      	beq.n	ca46 <__sflush_r+0x1a>
    cab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    cab4:	4299      	cmp	r1, r3
    cab6:	d002      	beq.n	cabe <__sflush_r+0x92>
    cab8:	4628      	mov	r0, r5
    caba:	f7ff fcdd 	bl	c478 <_free_r>
    cabe:	2000      	movs	r0, #0
    cac0:	6360      	str	r0, [r4, #52]	; 0x34
    cac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cac6:	6a21      	ldr	r1, [r4, #32]
    cac8:	2301      	movs	r3, #1
    caca:	4628      	mov	r0, r5
    cacc:	47b0      	blx	r6
    cace:	1c41      	adds	r1, r0, #1
    cad0:	d1c6      	bne.n	ca60 <__sflush_r+0x34>
    cad2:	682b      	ldr	r3, [r5, #0]
    cad4:	2b00      	cmp	r3, #0
    cad6:	d0c3      	beq.n	ca60 <__sflush_r+0x34>
    cad8:	2b1d      	cmp	r3, #29
    cada:	d001      	beq.n	cae0 <__sflush_r+0xb4>
    cadc:	2b16      	cmp	r3, #22
    cade:	d101      	bne.n	cae4 <__sflush_r+0xb8>
    cae0:	602f      	str	r7, [r5, #0]
    cae2:	e7b0      	b.n	ca46 <__sflush_r+0x1a>
    cae4:	89a3      	ldrh	r3, [r4, #12]
    cae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    caea:	81a3      	strh	r3, [r4, #12]
    caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    caf0:	690f      	ldr	r7, [r1, #16]
    caf2:	2f00      	cmp	r7, #0
    caf4:	d0a7      	beq.n	ca46 <__sflush_r+0x1a>
    caf6:	0793      	lsls	r3, r2, #30
    caf8:	680e      	ldr	r6, [r1, #0]
    cafa:	bf08      	it	eq
    cafc:	694b      	ldreq	r3, [r1, #20]
    cafe:	600f      	str	r7, [r1, #0]
    cb00:	bf18      	it	ne
    cb02:	2300      	movne	r3, #0
    cb04:	eba6 0807 	sub.w	r8, r6, r7
    cb08:	608b      	str	r3, [r1, #8]
    cb0a:	f1b8 0f00 	cmp.w	r8, #0
    cb0e:	dd9a      	ble.n	ca46 <__sflush_r+0x1a>
    cb10:	4643      	mov	r3, r8
    cb12:	463a      	mov	r2, r7
    cb14:	6a21      	ldr	r1, [r4, #32]
    cb16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    cb18:	4628      	mov	r0, r5
    cb1a:	47b0      	blx	r6
    cb1c:	2800      	cmp	r0, #0
    cb1e:	dc07      	bgt.n	cb30 <__sflush_r+0x104>
    cb20:	89a3      	ldrh	r3, [r4, #12]
    cb22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cb26:	81a3      	strh	r3, [r4, #12]
    cb28:	f04f 30ff 	mov.w	r0, #4294967295
    cb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb30:	4407      	add	r7, r0
    cb32:	eba8 0800 	sub.w	r8, r8, r0
    cb36:	e7e8      	b.n	cb0a <__sflush_r+0xde>
    cb38:	20400001 	.word	0x20400001

0000cb3c <_fflush_r>:
    cb3c:	b538      	push	{r3, r4, r5, lr}
    cb3e:	690b      	ldr	r3, [r1, #16]
    cb40:	4605      	mov	r5, r0
    cb42:	460c      	mov	r4, r1
    cb44:	b1db      	cbz	r3, cb7e <_fflush_r+0x42>
    cb46:	b118      	cbz	r0, cb50 <_fflush_r+0x14>
    cb48:	6983      	ldr	r3, [r0, #24]
    cb4a:	b90b      	cbnz	r3, cb50 <_fflush_r+0x14>
    cb4c:	f000 f860 	bl	cc10 <__sinit>
    cb50:	4b0c      	ldr	r3, [pc, #48]	; (cb84 <_fflush_r+0x48>)
    cb52:	429c      	cmp	r4, r3
    cb54:	d109      	bne.n	cb6a <_fflush_r+0x2e>
    cb56:	686c      	ldr	r4, [r5, #4]
    cb58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cb5c:	b17b      	cbz	r3, cb7e <_fflush_r+0x42>
    cb5e:	4621      	mov	r1, r4
    cb60:	4628      	mov	r0, r5
    cb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cb66:	f7ff bf61 	b.w	ca2c <__sflush_r>
    cb6a:	4b07      	ldr	r3, [pc, #28]	; (cb88 <_fflush_r+0x4c>)
    cb6c:	429c      	cmp	r4, r3
    cb6e:	d101      	bne.n	cb74 <_fflush_r+0x38>
    cb70:	68ac      	ldr	r4, [r5, #8]
    cb72:	e7f1      	b.n	cb58 <_fflush_r+0x1c>
    cb74:	4b05      	ldr	r3, [pc, #20]	; (cb8c <_fflush_r+0x50>)
    cb76:	429c      	cmp	r4, r3
    cb78:	bf08      	it	eq
    cb7a:	68ec      	ldreq	r4, [r5, #12]
    cb7c:	e7ec      	b.n	cb58 <_fflush_r+0x1c>
    cb7e:	2000      	movs	r0, #0
    cb80:	bd38      	pop	{r3, r4, r5, pc}
    cb82:	bf00      	nop
    cb84:	0000e5d8 	.word	0x0000e5d8
    cb88:	0000e5f8 	.word	0x0000e5f8
    cb8c:	0000e5b8 	.word	0x0000e5b8

0000cb90 <_cleanup_r>:
    cb90:	4901      	ldr	r1, [pc, #4]	; (cb98 <_cleanup_r+0x8>)
    cb92:	f000 b8a9 	b.w	cce8 <_fwalk_reent>
    cb96:	bf00      	nop
    cb98:	0000cb3d 	.word	0x0000cb3d

0000cb9c <std.isra.0>:
    cb9c:	2300      	movs	r3, #0
    cb9e:	b510      	push	{r4, lr}
    cba0:	4604      	mov	r4, r0
    cba2:	6003      	str	r3, [r0, #0]
    cba4:	6043      	str	r3, [r0, #4]
    cba6:	6083      	str	r3, [r0, #8]
    cba8:	8181      	strh	r1, [r0, #12]
    cbaa:	6643      	str	r3, [r0, #100]	; 0x64
    cbac:	81c2      	strh	r2, [r0, #14]
    cbae:	6103      	str	r3, [r0, #16]
    cbb0:	6143      	str	r3, [r0, #20]
    cbb2:	6183      	str	r3, [r0, #24]
    cbb4:	4619      	mov	r1, r3
    cbb6:	2208      	movs	r2, #8
    cbb8:	305c      	adds	r0, #92	; 0x5c
    cbba:	f7ff fc54 	bl	c466 <memset>
    cbbe:	4b05      	ldr	r3, [pc, #20]	; (cbd4 <std.isra.0+0x38>)
    cbc0:	6263      	str	r3, [r4, #36]	; 0x24
    cbc2:	4b05      	ldr	r3, [pc, #20]	; (cbd8 <std.isra.0+0x3c>)
    cbc4:	62a3      	str	r3, [r4, #40]	; 0x28
    cbc6:	4b05      	ldr	r3, [pc, #20]	; (cbdc <std.isra.0+0x40>)
    cbc8:	62e3      	str	r3, [r4, #44]	; 0x2c
    cbca:	4b05      	ldr	r3, [pc, #20]	; (cbe0 <std.isra.0+0x44>)
    cbcc:	6224      	str	r4, [r4, #32]
    cbce:	6323      	str	r3, [r4, #48]	; 0x30
    cbd0:	bd10      	pop	{r4, pc}
    cbd2:	bf00      	nop
    cbd4:	0000d639 	.word	0x0000d639
    cbd8:	0000d65b 	.word	0x0000d65b
    cbdc:	0000d693 	.word	0x0000d693
    cbe0:	0000d6b7 	.word	0x0000d6b7

0000cbe4 <__sfmoreglue>:
    cbe4:	b570      	push	{r4, r5, r6, lr}
    cbe6:	1e4a      	subs	r2, r1, #1
    cbe8:	2568      	movs	r5, #104	; 0x68
    cbea:	4355      	muls	r5, r2
    cbec:	460e      	mov	r6, r1
    cbee:	f105 0174 	add.w	r1, r5, #116	; 0x74
    cbf2:	f7ff fc8f 	bl	c514 <_malloc_r>
    cbf6:	4604      	mov	r4, r0
    cbf8:	b140      	cbz	r0, cc0c <__sfmoreglue+0x28>
    cbfa:	2100      	movs	r1, #0
    cbfc:	e880 0042 	stmia.w	r0, {r1, r6}
    cc00:	300c      	adds	r0, #12
    cc02:	60a0      	str	r0, [r4, #8]
    cc04:	f105 0268 	add.w	r2, r5, #104	; 0x68
    cc08:	f7ff fc2d 	bl	c466 <memset>
    cc0c:	4620      	mov	r0, r4
    cc0e:	bd70      	pop	{r4, r5, r6, pc}

0000cc10 <__sinit>:
    cc10:	6983      	ldr	r3, [r0, #24]
    cc12:	b510      	push	{r4, lr}
    cc14:	4604      	mov	r4, r0
    cc16:	bb33      	cbnz	r3, cc66 <__sinit+0x56>
    cc18:	6483      	str	r3, [r0, #72]	; 0x48
    cc1a:	64c3      	str	r3, [r0, #76]	; 0x4c
    cc1c:	6503      	str	r3, [r0, #80]	; 0x50
    cc1e:	4b12      	ldr	r3, [pc, #72]	; (cc68 <__sinit+0x58>)
    cc20:	4a12      	ldr	r2, [pc, #72]	; (cc6c <__sinit+0x5c>)
    cc22:	681b      	ldr	r3, [r3, #0]
    cc24:	6282      	str	r2, [r0, #40]	; 0x28
    cc26:	4298      	cmp	r0, r3
    cc28:	bf04      	itt	eq
    cc2a:	2301      	moveq	r3, #1
    cc2c:	6183      	streq	r3, [r0, #24]
    cc2e:	f000 f81f 	bl	cc70 <__sfp>
    cc32:	6060      	str	r0, [r4, #4]
    cc34:	4620      	mov	r0, r4
    cc36:	f000 f81b 	bl	cc70 <__sfp>
    cc3a:	60a0      	str	r0, [r4, #8]
    cc3c:	4620      	mov	r0, r4
    cc3e:	f000 f817 	bl	cc70 <__sfp>
    cc42:	2200      	movs	r2, #0
    cc44:	60e0      	str	r0, [r4, #12]
    cc46:	2104      	movs	r1, #4
    cc48:	6860      	ldr	r0, [r4, #4]
    cc4a:	f7ff ffa7 	bl	cb9c <std.isra.0>
    cc4e:	2201      	movs	r2, #1
    cc50:	2109      	movs	r1, #9
    cc52:	68a0      	ldr	r0, [r4, #8]
    cc54:	f7ff ffa2 	bl	cb9c <std.isra.0>
    cc58:	2202      	movs	r2, #2
    cc5a:	2112      	movs	r1, #18
    cc5c:	68e0      	ldr	r0, [r4, #12]
    cc5e:	f7ff ff9d 	bl	cb9c <std.isra.0>
    cc62:	2301      	movs	r3, #1
    cc64:	61a3      	str	r3, [r4, #24]
    cc66:	bd10      	pop	{r4, pc}
    cc68:	0000e5b4 	.word	0x0000e5b4
    cc6c:	0000cb91 	.word	0x0000cb91

0000cc70 <__sfp>:
    cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc72:	4b1c      	ldr	r3, [pc, #112]	; (cce4 <__sfp+0x74>)
    cc74:	681e      	ldr	r6, [r3, #0]
    cc76:	69b3      	ldr	r3, [r6, #24]
    cc78:	4607      	mov	r7, r0
    cc7a:	b913      	cbnz	r3, cc82 <__sfp+0x12>
    cc7c:	4630      	mov	r0, r6
    cc7e:	f7ff ffc7 	bl	cc10 <__sinit>
    cc82:	3648      	adds	r6, #72	; 0x48
    cc84:	68b4      	ldr	r4, [r6, #8]
    cc86:	6873      	ldr	r3, [r6, #4]
    cc88:	3b01      	subs	r3, #1
    cc8a:	d503      	bpl.n	cc94 <__sfp+0x24>
    cc8c:	6833      	ldr	r3, [r6, #0]
    cc8e:	b133      	cbz	r3, cc9e <__sfp+0x2e>
    cc90:	6836      	ldr	r6, [r6, #0]
    cc92:	e7f7      	b.n	cc84 <__sfp+0x14>
    cc94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    cc98:	b16d      	cbz	r5, ccb6 <__sfp+0x46>
    cc9a:	3468      	adds	r4, #104	; 0x68
    cc9c:	e7f4      	b.n	cc88 <__sfp+0x18>
    cc9e:	2104      	movs	r1, #4
    cca0:	4638      	mov	r0, r7
    cca2:	f7ff ff9f 	bl	cbe4 <__sfmoreglue>
    cca6:	6030      	str	r0, [r6, #0]
    cca8:	2800      	cmp	r0, #0
    ccaa:	d1f1      	bne.n	cc90 <__sfp+0x20>
    ccac:	230c      	movs	r3, #12
    ccae:	603b      	str	r3, [r7, #0]
    ccb0:	4604      	mov	r4, r0
    ccb2:	4620      	mov	r0, r4
    ccb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ccb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ccba:	81e3      	strh	r3, [r4, #14]
    ccbc:	2301      	movs	r3, #1
    ccbe:	81a3      	strh	r3, [r4, #12]
    ccc0:	6665      	str	r5, [r4, #100]	; 0x64
    ccc2:	6025      	str	r5, [r4, #0]
    ccc4:	60a5      	str	r5, [r4, #8]
    ccc6:	6065      	str	r5, [r4, #4]
    ccc8:	6125      	str	r5, [r4, #16]
    ccca:	6165      	str	r5, [r4, #20]
    cccc:	61a5      	str	r5, [r4, #24]
    ccce:	2208      	movs	r2, #8
    ccd0:	4629      	mov	r1, r5
    ccd2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    ccd6:	f7ff fbc6 	bl	c466 <memset>
    ccda:	6365      	str	r5, [r4, #52]	; 0x34
    ccdc:	63a5      	str	r5, [r4, #56]	; 0x38
    ccde:	64a5      	str	r5, [r4, #72]	; 0x48
    cce0:	64e5      	str	r5, [r4, #76]	; 0x4c
    cce2:	e7e6      	b.n	ccb2 <__sfp+0x42>
    cce4:	0000e5b4 	.word	0x0000e5b4

0000cce8 <_fwalk_reent>:
    cce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ccec:	4680      	mov	r8, r0
    ccee:	4689      	mov	r9, r1
    ccf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
    ccf4:	2600      	movs	r6, #0
    ccf6:	b914      	cbnz	r4, ccfe <_fwalk_reent+0x16>
    ccf8:	4630      	mov	r0, r6
    ccfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ccfe:	68a5      	ldr	r5, [r4, #8]
    cd00:	6867      	ldr	r7, [r4, #4]
    cd02:	3f01      	subs	r7, #1
    cd04:	d501      	bpl.n	cd0a <_fwalk_reent+0x22>
    cd06:	6824      	ldr	r4, [r4, #0]
    cd08:	e7f5      	b.n	ccf6 <_fwalk_reent+0xe>
    cd0a:	89ab      	ldrh	r3, [r5, #12]
    cd0c:	2b01      	cmp	r3, #1
    cd0e:	d907      	bls.n	cd20 <_fwalk_reent+0x38>
    cd10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    cd14:	3301      	adds	r3, #1
    cd16:	d003      	beq.n	cd20 <_fwalk_reent+0x38>
    cd18:	4629      	mov	r1, r5
    cd1a:	4640      	mov	r0, r8
    cd1c:	47c8      	blx	r9
    cd1e:	4306      	orrs	r6, r0
    cd20:	3568      	adds	r5, #104	; 0x68
    cd22:	e7ee      	b.n	cd02 <_fwalk_reent+0x1a>

0000cd24 <__swhatbuf_r>:
    cd24:	b570      	push	{r4, r5, r6, lr}
    cd26:	460e      	mov	r6, r1
    cd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cd2c:	2900      	cmp	r1, #0
    cd2e:	b090      	sub	sp, #64	; 0x40
    cd30:	4614      	mov	r4, r2
    cd32:	461d      	mov	r5, r3
    cd34:	da07      	bge.n	cd46 <__swhatbuf_r+0x22>
    cd36:	2300      	movs	r3, #0
    cd38:	602b      	str	r3, [r5, #0]
    cd3a:	89b3      	ldrh	r3, [r6, #12]
    cd3c:	061a      	lsls	r2, r3, #24
    cd3e:	d410      	bmi.n	cd62 <__swhatbuf_r+0x3e>
    cd40:	f44f 6380 	mov.w	r3, #1024	; 0x400
    cd44:	e00e      	b.n	cd64 <__swhatbuf_r+0x40>
    cd46:	aa01      	add	r2, sp, #4
    cd48:	f000 fcdc 	bl	d704 <_fstat_r>
    cd4c:	2800      	cmp	r0, #0
    cd4e:	dbf2      	blt.n	cd36 <__swhatbuf_r+0x12>
    cd50:	9a02      	ldr	r2, [sp, #8]
    cd52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    cd56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    cd5a:	425a      	negs	r2, r3
    cd5c:	415a      	adcs	r2, r3
    cd5e:	602a      	str	r2, [r5, #0]
    cd60:	e7ee      	b.n	cd40 <__swhatbuf_r+0x1c>
    cd62:	2340      	movs	r3, #64	; 0x40
    cd64:	2000      	movs	r0, #0
    cd66:	6023      	str	r3, [r4, #0]
    cd68:	b010      	add	sp, #64	; 0x40
    cd6a:	bd70      	pop	{r4, r5, r6, pc}

0000cd6c <__smakebuf_r>:
    cd6c:	898b      	ldrh	r3, [r1, #12]
    cd6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    cd70:	079d      	lsls	r5, r3, #30
    cd72:	4606      	mov	r6, r0
    cd74:	460c      	mov	r4, r1
    cd76:	d507      	bpl.n	cd88 <__smakebuf_r+0x1c>
    cd78:	f104 0347 	add.w	r3, r4, #71	; 0x47
    cd7c:	6023      	str	r3, [r4, #0]
    cd7e:	6123      	str	r3, [r4, #16]
    cd80:	2301      	movs	r3, #1
    cd82:	6163      	str	r3, [r4, #20]
    cd84:	b002      	add	sp, #8
    cd86:	bd70      	pop	{r4, r5, r6, pc}
    cd88:	ab01      	add	r3, sp, #4
    cd8a:	466a      	mov	r2, sp
    cd8c:	f7ff ffca 	bl	cd24 <__swhatbuf_r>
    cd90:	9900      	ldr	r1, [sp, #0]
    cd92:	4605      	mov	r5, r0
    cd94:	4630      	mov	r0, r6
    cd96:	f7ff fbbd 	bl	c514 <_malloc_r>
    cd9a:	b948      	cbnz	r0, cdb0 <__smakebuf_r+0x44>
    cd9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cda0:	059a      	lsls	r2, r3, #22
    cda2:	d4ef      	bmi.n	cd84 <__smakebuf_r+0x18>
    cda4:	f023 0303 	bic.w	r3, r3, #3
    cda8:	f043 0302 	orr.w	r3, r3, #2
    cdac:	81a3      	strh	r3, [r4, #12]
    cdae:	e7e3      	b.n	cd78 <__smakebuf_r+0xc>
    cdb0:	4b0d      	ldr	r3, [pc, #52]	; (cde8 <__smakebuf_r+0x7c>)
    cdb2:	62b3      	str	r3, [r6, #40]	; 0x28
    cdb4:	89a3      	ldrh	r3, [r4, #12]
    cdb6:	6020      	str	r0, [r4, #0]
    cdb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cdbc:	81a3      	strh	r3, [r4, #12]
    cdbe:	9b00      	ldr	r3, [sp, #0]
    cdc0:	6163      	str	r3, [r4, #20]
    cdc2:	9b01      	ldr	r3, [sp, #4]
    cdc4:	6120      	str	r0, [r4, #16]
    cdc6:	b15b      	cbz	r3, cde0 <__smakebuf_r+0x74>
    cdc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cdcc:	4630      	mov	r0, r6
    cdce:	f000 fcab 	bl	d728 <_isatty_r>
    cdd2:	b128      	cbz	r0, cde0 <__smakebuf_r+0x74>
    cdd4:	89a3      	ldrh	r3, [r4, #12]
    cdd6:	f023 0303 	bic.w	r3, r3, #3
    cdda:	f043 0301 	orr.w	r3, r3, #1
    cdde:	81a3      	strh	r3, [r4, #12]
    cde0:	89a3      	ldrh	r3, [r4, #12]
    cde2:	431d      	orrs	r5, r3
    cde4:	81a5      	strh	r5, [r4, #12]
    cde6:	e7cd      	b.n	cd84 <__smakebuf_r+0x18>
    cde8:	0000cb91 	.word	0x0000cb91

0000cdec <__malloc_lock>:
    cdec:	4770      	bx	lr

0000cdee <__malloc_unlock>:
    cdee:	4770      	bx	lr

0000cdf0 <__ssputs_r>:
    cdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdf4:	688e      	ldr	r6, [r1, #8]
    cdf6:	429e      	cmp	r6, r3
    cdf8:	4682      	mov	sl, r0
    cdfa:	460c      	mov	r4, r1
    cdfc:	4691      	mov	r9, r2
    cdfe:	4698      	mov	r8, r3
    ce00:	d835      	bhi.n	ce6e <__ssputs_r+0x7e>
    ce02:	898a      	ldrh	r2, [r1, #12]
    ce04:	f412 6f90 	tst.w	r2, #1152	; 0x480
    ce08:	d031      	beq.n	ce6e <__ssputs_r+0x7e>
    ce0a:	6825      	ldr	r5, [r4, #0]
    ce0c:	6909      	ldr	r1, [r1, #16]
    ce0e:	1a6f      	subs	r7, r5, r1
    ce10:	6965      	ldr	r5, [r4, #20]
    ce12:	2302      	movs	r3, #2
    ce14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ce18:	fb95 f5f3 	sdiv	r5, r5, r3
    ce1c:	f108 0301 	add.w	r3, r8, #1
    ce20:	443b      	add	r3, r7
    ce22:	429d      	cmp	r5, r3
    ce24:	bf38      	it	cc
    ce26:	461d      	movcc	r5, r3
    ce28:	0553      	lsls	r3, r2, #21
    ce2a:	d531      	bpl.n	ce90 <__ssputs_r+0xa0>
    ce2c:	4629      	mov	r1, r5
    ce2e:	f7ff fb71 	bl	c514 <_malloc_r>
    ce32:	4606      	mov	r6, r0
    ce34:	b950      	cbnz	r0, ce4c <__ssputs_r+0x5c>
    ce36:	230c      	movs	r3, #12
    ce38:	f8ca 3000 	str.w	r3, [sl]
    ce3c:	89a3      	ldrh	r3, [r4, #12]
    ce3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ce42:	81a3      	strh	r3, [r4, #12]
    ce44:	f04f 30ff 	mov.w	r0, #4294967295
    ce48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce4c:	463a      	mov	r2, r7
    ce4e:	6921      	ldr	r1, [r4, #16]
    ce50:	f7ff fafe 	bl	c450 <memcpy>
    ce54:	89a3      	ldrh	r3, [r4, #12]
    ce56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    ce5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ce5e:	81a3      	strh	r3, [r4, #12]
    ce60:	6126      	str	r6, [r4, #16]
    ce62:	6165      	str	r5, [r4, #20]
    ce64:	443e      	add	r6, r7
    ce66:	1bed      	subs	r5, r5, r7
    ce68:	6026      	str	r6, [r4, #0]
    ce6a:	60a5      	str	r5, [r4, #8]
    ce6c:	4646      	mov	r6, r8
    ce6e:	4546      	cmp	r6, r8
    ce70:	bf28      	it	cs
    ce72:	4646      	movcs	r6, r8
    ce74:	4632      	mov	r2, r6
    ce76:	4649      	mov	r1, r9
    ce78:	6820      	ldr	r0, [r4, #0]
    ce7a:	f000 fcc9 	bl	d810 <memmove>
    ce7e:	68a3      	ldr	r3, [r4, #8]
    ce80:	1b9b      	subs	r3, r3, r6
    ce82:	60a3      	str	r3, [r4, #8]
    ce84:	6823      	ldr	r3, [r4, #0]
    ce86:	441e      	add	r6, r3
    ce88:	6026      	str	r6, [r4, #0]
    ce8a:	2000      	movs	r0, #0
    ce8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce90:	462a      	mov	r2, r5
    ce92:	f000 fcd7 	bl	d844 <_realloc_r>
    ce96:	4606      	mov	r6, r0
    ce98:	2800      	cmp	r0, #0
    ce9a:	d1e1      	bne.n	ce60 <__ssputs_r+0x70>
    ce9c:	6921      	ldr	r1, [r4, #16]
    ce9e:	4650      	mov	r0, sl
    cea0:	f7ff faea 	bl	c478 <_free_r>
    cea4:	e7c7      	b.n	ce36 <__ssputs_r+0x46>
	...

0000cea8 <_svfiprintf_r>:
    cea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ceac:	b09d      	sub	sp, #116	; 0x74
    ceae:	4680      	mov	r8, r0
    ceb0:	9303      	str	r3, [sp, #12]
    ceb2:	898b      	ldrh	r3, [r1, #12]
    ceb4:	061c      	lsls	r4, r3, #24
    ceb6:	460d      	mov	r5, r1
    ceb8:	4616      	mov	r6, r2
    ceba:	d50f      	bpl.n	cedc <_svfiprintf_r+0x34>
    cebc:	690b      	ldr	r3, [r1, #16]
    cebe:	b96b      	cbnz	r3, cedc <_svfiprintf_r+0x34>
    cec0:	2140      	movs	r1, #64	; 0x40
    cec2:	f7ff fb27 	bl	c514 <_malloc_r>
    cec6:	6028      	str	r0, [r5, #0]
    cec8:	6128      	str	r0, [r5, #16]
    ceca:	b928      	cbnz	r0, ced8 <_svfiprintf_r+0x30>
    cecc:	230c      	movs	r3, #12
    cece:	f8c8 3000 	str.w	r3, [r8]
    ced2:	f04f 30ff 	mov.w	r0, #4294967295
    ced6:	e0c5      	b.n	d064 <_svfiprintf_r+0x1bc>
    ced8:	2340      	movs	r3, #64	; 0x40
    ceda:	616b      	str	r3, [r5, #20]
    cedc:	2300      	movs	r3, #0
    cede:	9309      	str	r3, [sp, #36]	; 0x24
    cee0:	2320      	movs	r3, #32
    cee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    cee6:	2330      	movs	r3, #48	; 0x30
    cee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    ceec:	f04f 0b01 	mov.w	fp, #1
    cef0:	4637      	mov	r7, r6
    cef2:	463c      	mov	r4, r7
    cef4:	f814 3b01 	ldrb.w	r3, [r4], #1
    cef8:	2b00      	cmp	r3, #0
    cefa:	d13c      	bne.n	cf76 <_svfiprintf_r+0xce>
    cefc:	ebb7 0a06 	subs.w	sl, r7, r6
    cf00:	d00b      	beq.n	cf1a <_svfiprintf_r+0x72>
    cf02:	4653      	mov	r3, sl
    cf04:	4632      	mov	r2, r6
    cf06:	4629      	mov	r1, r5
    cf08:	4640      	mov	r0, r8
    cf0a:	f7ff ff71 	bl	cdf0 <__ssputs_r>
    cf0e:	3001      	adds	r0, #1
    cf10:	f000 80a3 	beq.w	d05a <_svfiprintf_r+0x1b2>
    cf14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf16:	4453      	add	r3, sl
    cf18:	9309      	str	r3, [sp, #36]	; 0x24
    cf1a:	783b      	ldrb	r3, [r7, #0]
    cf1c:	2b00      	cmp	r3, #0
    cf1e:	f000 809c 	beq.w	d05a <_svfiprintf_r+0x1b2>
    cf22:	2300      	movs	r3, #0
    cf24:	f04f 32ff 	mov.w	r2, #4294967295
    cf28:	9304      	str	r3, [sp, #16]
    cf2a:	9307      	str	r3, [sp, #28]
    cf2c:	9205      	str	r2, [sp, #20]
    cf2e:	9306      	str	r3, [sp, #24]
    cf30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    cf34:	931a      	str	r3, [sp, #104]	; 0x68
    cf36:	2205      	movs	r2, #5
    cf38:	7821      	ldrb	r1, [r4, #0]
    cf3a:	4850      	ldr	r0, [pc, #320]	; (d07c <_svfiprintf_r+0x1d4>)
    cf3c:	f000 fc18 	bl	d770 <memchr>
    cf40:	1c67      	adds	r7, r4, #1
    cf42:	9b04      	ldr	r3, [sp, #16]
    cf44:	b9d8      	cbnz	r0, cf7e <_svfiprintf_r+0xd6>
    cf46:	06d9      	lsls	r1, r3, #27
    cf48:	bf44      	itt	mi
    cf4a:	2220      	movmi	r2, #32
    cf4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cf50:	071a      	lsls	r2, r3, #28
    cf52:	bf44      	itt	mi
    cf54:	222b      	movmi	r2, #43	; 0x2b
    cf56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cf5a:	7822      	ldrb	r2, [r4, #0]
    cf5c:	2a2a      	cmp	r2, #42	; 0x2a
    cf5e:	d016      	beq.n	cf8e <_svfiprintf_r+0xe6>
    cf60:	9a07      	ldr	r2, [sp, #28]
    cf62:	2100      	movs	r1, #0
    cf64:	200a      	movs	r0, #10
    cf66:	4627      	mov	r7, r4
    cf68:	3401      	adds	r4, #1
    cf6a:	783b      	ldrb	r3, [r7, #0]
    cf6c:	3b30      	subs	r3, #48	; 0x30
    cf6e:	2b09      	cmp	r3, #9
    cf70:	d951      	bls.n	d016 <_svfiprintf_r+0x16e>
    cf72:	b1c9      	cbz	r1, cfa8 <_svfiprintf_r+0x100>
    cf74:	e011      	b.n	cf9a <_svfiprintf_r+0xf2>
    cf76:	2b25      	cmp	r3, #37	; 0x25
    cf78:	d0c0      	beq.n	cefc <_svfiprintf_r+0x54>
    cf7a:	4627      	mov	r7, r4
    cf7c:	e7b9      	b.n	cef2 <_svfiprintf_r+0x4a>
    cf7e:	4a3f      	ldr	r2, [pc, #252]	; (d07c <_svfiprintf_r+0x1d4>)
    cf80:	1a80      	subs	r0, r0, r2
    cf82:	fa0b f000 	lsl.w	r0, fp, r0
    cf86:	4318      	orrs	r0, r3
    cf88:	9004      	str	r0, [sp, #16]
    cf8a:	463c      	mov	r4, r7
    cf8c:	e7d3      	b.n	cf36 <_svfiprintf_r+0x8e>
    cf8e:	9a03      	ldr	r2, [sp, #12]
    cf90:	1d11      	adds	r1, r2, #4
    cf92:	6812      	ldr	r2, [r2, #0]
    cf94:	9103      	str	r1, [sp, #12]
    cf96:	2a00      	cmp	r2, #0
    cf98:	db01      	blt.n	cf9e <_svfiprintf_r+0xf6>
    cf9a:	9207      	str	r2, [sp, #28]
    cf9c:	e004      	b.n	cfa8 <_svfiprintf_r+0x100>
    cf9e:	4252      	negs	r2, r2
    cfa0:	f043 0302 	orr.w	r3, r3, #2
    cfa4:	9207      	str	r2, [sp, #28]
    cfa6:	9304      	str	r3, [sp, #16]
    cfa8:	783b      	ldrb	r3, [r7, #0]
    cfaa:	2b2e      	cmp	r3, #46	; 0x2e
    cfac:	d10e      	bne.n	cfcc <_svfiprintf_r+0x124>
    cfae:	787b      	ldrb	r3, [r7, #1]
    cfb0:	2b2a      	cmp	r3, #42	; 0x2a
    cfb2:	f107 0101 	add.w	r1, r7, #1
    cfb6:	d132      	bne.n	d01e <_svfiprintf_r+0x176>
    cfb8:	9b03      	ldr	r3, [sp, #12]
    cfba:	1d1a      	adds	r2, r3, #4
    cfbc:	681b      	ldr	r3, [r3, #0]
    cfbe:	9203      	str	r2, [sp, #12]
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	bfb8      	it	lt
    cfc4:	f04f 33ff 	movlt.w	r3, #4294967295
    cfc8:	3702      	adds	r7, #2
    cfca:	9305      	str	r3, [sp, #20]
    cfcc:	4c2c      	ldr	r4, [pc, #176]	; (d080 <_svfiprintf_r+0x1d8>)
    cfce:	7839      	ldrb	r1, [r7, #0]
    cfd0:	2203      	movs	r2, #3
    cfd2:	4620      	mov	r0, r4
    cfd4:	f000 fbcc 	bl	d770 <memchr>
    cfd8:	b138      	cbz	r0, cfea <_svfiprintf_r+0x142>
    cfda:	2340      	movs	r3, #64	; 0x40
    cfdc:	1b00      	subs	r0, r0, r4
    cfde:	fa03 f000 	lsl.w	r0, r3, r0
    cfe2:	9b04      	ldr	r3, [sp, #16]
    cfe4:	4303      	orrs	r3, r0
    cfe6:	9304      	str	r3, [sp, #16]
    cfe8:	3701      	adds	r7, #1
    cfea:	7839      	ldrb	r1, [r7, #0]
    cfec:	4825      	ldr	r0, [pc, #148]	; (d084 <_svfiprintf_r+0x1dc>)
    cfee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    cff2:	2206      	movs	r2, #6
    cff4:	1c7e      	adds	r6, r7, #1
    cff6:	f000 fbbb 	bl	d770 <memchr>
    cffa:	2800      	cmp	r0, #0
    cffc:	d035      	beq.n	d06a <_svfiprintf_r+0x1c2>
    cffe:	4b22      	ldr	r3, [pc, #136]	; (d088 <_svfiprintf_r+0x1e0>)
    d000:	b9fb      	cbnz	r3, d042 <_svfiprintf_r+0x19a>
    d002:	9b03      	ldr	r3, [sp, #12]
    d004:	3307      	adds	r3, #7
    d006:	f023 0307 	bic.w	r3, r3, #7
    d00a:	3308      	adds	r3, #8
    d00c:	9303      	str	r3, [sp, #12]
    d00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d010:	444b      	add	r3, r9
    d012:	9309      	str	r3, [sp, #36]	; 0x24
    d014:	e76c      	b.n	cef0 <_svfiprintf_r+0x48>
    d016:	fb00 3202 	mla	r2, r0, r2, r3
    d01a:	2101      	movs	r1, #1
    d01c:	e7a3      	b.n	cf66 <_svfiprintf_r+0xbe>
    d01e:	2300      	movs	r3, #0
    d020:	9305      	str	r3, [sp, #20]
    d022:	4618      	mov	r0, r3
    d024:	240a      	movs	r4, #10
    d026:	460f      	mov	r7, r1
    d028:	3101      	adds	r1, #1
    d02a:	783a      	ldrb	r2, [r7, #0]
    d02c:	3a30      	subs	r2, #48	; 0x30
    d02e:	2a09      	cmp	r2, #9
    d030:	d903      	bls.n	d03a <_svfiprintf_r+0x192>
    d032:	2b00      	cmp	r3, #0
    d034:	d0ca      	beq.n	cfcc <_svfiprintf_r+0x124>
    d036:	9005      	str	r0, [sp, #20]
    d038:	e7c8      	b.n	cfcc <_svfiprintf_r+0x124>
    d03a:	fb04 2000 	mla	r0, r4, r0, r2
    d03e:	2301      	movs	r3, #1
    d040:	e7f1      	b.n	d026 <_svfiprintf_r+0x17e>
    d042:	ab03      	add	r3, sp, #12
    d044:	9300      	str	r3, [sp, #0]
    d046:	462a      	mov	r2, r5
    d048:	4b10      	ldr	r3, [pc, #64]	; (d08c <_svfiprintf_r+0x1e4>)
    d04a:	a904      	add	r1, sp, #16
    d04c:	4640      	mov	r0, r8
    d04e:	f3af 8000 	nop.w
    d052:	f1b0 3fff 	cmp.w	r0, #4294967295
    d056:	4681      	mov	r9, r0
    d058:	d1d9      	bne.n	d00e <_svfiprintf_r+0x166>
    d05a:	89ab      	ldrh	r3, [r5, #12]
    d05c:	065b      	lsls	r3, r3, #25
    d05e:	f53f af38 	bmi.w	ced2 <_svfiprintf_r+0x2a>
    d062:	9809      	ldr	r0, [sp, #36]	; 0x24
    d064:	b01d      	add	sp, #116	; 0x74
    d066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d06a:	ab03      	add	r3, sp, #12
    d06c:	9300      	str	r3, [sp, #0]
    d06e:	462a      	mov	r2, r5
    d070:	4b06      	ldr	r3, [pc, #24]	; (d08c <_svfiprintf_r+0x1e4>)
    d072:	a904      	add	r1, sp, #16
    d074:	4640      	mov	r0, r8
    d076:	f000 f9bf 	bl	d3f8 <_printf_i>
    d07a:	e7ea      	b.n	d052 <_svfiprintf_r+0x1aa>
    d07c:	0000e618 	.word	0x0000e618
    d080:	0000e61e 	.word	0x0000e61e
    d084:	0000e622 	.word	0x0000e622
    d088:	00000000 	.word	0x00000000
    d08c:	0000cdf1 	.word	0x0000cdf1

0000d090 <__sfputc_r>:
    d090:	6893      	ldr	r3, [r2, #8]
    d092:	3b01      	subs	r3, #1
    d094:	2b00      	cmp	r3, #0
    d096:	b410      	push	{r4}
    d098:	6093      	str	r3, [r2, #8]
    d09a:	da08      	bge.n	d0ae <__sfputc_r+0x1e>
    d09c:	6994      	ldr	r4, [r2, #24]
    d09e:	42a3      	cmp	r3, r4
    d0a0:	db02      	blt.n	d0a8 <__sfputc_r+0x18>
    d0a2:	b2cb      	uxtb	r3, r1
    d0a4:	2b0a      	cmp	r3, #10
    d0a6:	d102      	bne.n	d0ae <__sfputc_r+0x1e>
    d0a8:	bc10      	pop	{r4}
    d0aa:	f7ff bbff 	b.w	c8ac <__swbuf_r>
    d0ae:	6813      	ldr	r3, [r2, #0]
    d0b0:	1c58      	adds	r0, r3, #1
    d0b2:	6010      	str	r0, [r2, #0]
    d0b4:	7019      	strb	r1, [r3, #0]
    d0b6:	b2c8      	uxtb	r0, r1
    d0b8:	bc10      	pop	{r4}
    d0ba:	4770      	bx	lr

0000d0bc <__sfputs_r>:
    d0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0be:	4606      	mov	r6, r0
    d0c0:	460f      	mov	r7, r1
    d0c2:	4614      	mov	r4, r2
    d0c4:	18d5      	adds	r5, r2, r3
    d0c6:	42ac      	cmp	r4, r5
    d0c8:	d101      	bne.n	d0ce <__sfputs_r+0x12>
    d0ca:	2000      	movs	r0, #0
    d0cc:	e007      	b.n	d0de <__sfputs_r+0x22>
    d0ce:	463a      	mov	r2, r7
    d0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
    d0d4:	4630      	mov	r0, r6
    d0d6:	f7ff ffdb 	bl	d090 <__sfputc_r>
    d0da:	1c43      	adds	r3, r0, #1
    d0dc:	d1f3      	bne.n	d0c6 <__sfputs_r+0xa>
    d0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d0e0 <_vfiprintf_r>:
    d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0e4:	b09d      	sub	sp, #116	; 0x74
    d0e6:	460c      	mov	r4, r1
    d0e8:	4617      	mov	r7, r2
    d0ea:	9303      	str	r3, [sp, #12]
    d0ec:	4606      	mov	r6, r0
    d0ee:	b118      	cbz	r0, d0f8 <_vfiprintf_r+0x18>
    d0f0:	6983      	ldr	r3, [r0, #24]
    d0f2:	b90b      	cbnz	r3, d0f8 <_vfiprintf_r+0x18>
    d0f4:	f7ff fd8c 	bl	cc10 <__sinit>
    d0f8:	4b7c      	ldr	r3, [pc, #496]	; (d2ec <_vfiprintf_r+0x20c>)
    d0fa:	429c      	cmp	r4, r3
    d0fc:	d157      	bne.n	d1ae <_vfiprintf_r+0xce>
    d0fe:	6874      	ldr	r4, [r6, #4]
    d100:	89a3      	ldrh	r3, [r4, #12]
    d102:	0718      	lsls	r0, r3, #28
    d104:	d55d      	bpl.n	d1c2 <_vfiprintf_r+0xe2>
    d106:	6923      	ldr	r3, [r4, #16]
    d108:	2b00      	cmp	r3, #0
    d10a:	d05a      	beq.n	d1c2 <_vfiprintf_r+0xe2>
    d10c:	2300      	movs	r3, #0
    d10e:	9309      	str	r3, [sp, #36]	; 0x24
    d110:	2320      	movs	r3, #32
    d112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    d116:	2330      	movs	r3, #48	; 0x30
    d118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    d11c:	f04f 0b01 	mov.w	fp, #1
    d120:	46b8      	mov	r8, r7
    d122:	4645      	mov	r5, r8
    d124:	f815 3b01 	ldrb.w	r3, [r5], #1
    d128:	2b00      	cmp	r3, #0
    d12a:	d155      	bne.n	d1d8 <_vfiprintf_r+0xf8>
    d12c:	ebb8 0a07 	subs.w	sl, r8, r7
    d130:	d00b      	beq.n	d14a <_vfiprintf_r+0x6a>
    d132:	4653      	mov	r3, sl
    d134:	463a      	mov	r2, r7
    d136:	4621      	mov	r1, r4
    d138:	4630      	mov	r0, r6
    d13a:	f7ff ffbf 	bl	d0bc <__sfputs_r>
    d13e:	3001      	adds	r0, #1
    d140:	f000 80c4 	beq.w	d2cc <_vfiprintf_r+0x1ec>
    d144:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d146:	4453      	add	r3, sl
    d148:	9309      	str	r3, [sp, #36]	; 0x24
    d14a:	f898 3000 	ldrb.w	r3, [r8]
    d14e:	2b00      	cmp	r3, #0
    d150:	f000 80bc 	beq.w	d2cc <_vfiprintf_r+0x1ec>
    d154:	2300      	movs	r3, #0
    d156:	f04f 32ff 	mov.w	r2, #4294967295
    d15a:	9304      	str	r3, [sp, #16]
    d15c:	9307      	str	r3, [sp, #28]
    d15e:	9205      	str	r2, [sp, #20]
    d160:	9306      	str	r3, [sp, #24]
    d162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    d166:	931a      	str	r3, [sp, #104]	; 0x68
    d168:	2205      	movs	r2, #5
    d16a:	7829      	ldrb	r1, [r5, #0]
    d16c:	4860      	ldr	r0, [pc, #384]	; (d2f0 <_vfiprintf_r+0x210>)
    d16e:	f000 faff 	bl	d770 <memchr>
    d172:	f105 0801 	add.w	r8, r5, #1
    d176:	9b04      	ldr	r3, [sp, #16]
    d178:	2800      	cmp	r0, #0
    d17a:	d131      	bne.n	d1e0 <_vfiprintf_r+0x100>
    d17c:	06d9      	lsls	r1, r3, #27
    d17e:	bf44      	itt	mi
    d180:	2220      	movmi	r2, #32
    d182:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d186:	071a      	lsls	r2, r3, #28
    d188:	bf44      	itt	mi
    d18a:	222b      	movmi	r2, #43	; 0x2b
    d18c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    d190:	782a      	ldrb	r2, [r5, #0]
    d192:	2a2a      	cmp	r2, #42	; 0x2a
    d194:	d02c      	beq.n	d1f0 <_vfiprintf_r+0x110>
    d196:	9a07      	ldr	r2, [sp, #28]
    d198:	2100      	movs	r1, #0
    d19a:	200a      	movs	r0, #10
    d19c:	46a8      	mov	r8, r5
    d19e:	3501      	adds	r5, #1
    d1a0:	f898 3000 	ldrb.w	r3, [r8]
    d1a4:	3b30      	subs	r3, #48	; 0x30
    d1a6:	2b09      	cmp	r3, #9
    d1a8:	d96d      	bls.n	d286 <_vfiprintf_r+0x1a6>
    d1aa:	b371      	cbz	r1, d20a <_vfiprintf_r+0x12a>
    d1ac:	e026      	b.n	d1fc <_vfiprintf_r+0x11c>
    d1ae:	4b51      	ldr	r3, [pc, #324]	; (d2f4 <_vfiprintf_r+0x214>)
    d1b0:	429c      	cmp	r4, r3
    d1b2:	d101      	bne.n	d1b8 <_vfiprintf_r+0xd8>
    d1b4:	68b4      	ldr	r4, [r6, #8]
    d1b6:	e7a3      	b.n	d100 <_vfiprintf_r+0x20>
    d1b8:	4b4f      	ldr	r3, [pc, #316]	; (d2f8 <_vfiprintf_r+0x218>)
    d1ba:	429c      	cmp	r4, r3
    d1bc:	bf08      	it	eq
    d1be:	68f4      	ldreq	r4, [r6, #12]
    d1c0:	e79e      	b.n	d100 <_vfiprintf_r+0x20>
    d1c2:	4621      	mov	r1, r4
    d1c4:	4630      	mov	r0, r6
    d1c6:	f7ff fbc3 	bl	c950 <__swsetup_r>
    d1ca:	2800      	cmp	r0, #0
    d1cc:	d09e      	beq.n	d10c <_vfiprintf_r+0x2c>
    d1ce:	f04f 30ff 	mov.w	r0, #4294967295
    d1d2:	b01d      	add	sp, #116	; 0x74
    d1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1d8:	2b25      	cmp	r3, #37	; 0x25
    d1da:	d0a7      	beq.n	d12c <_vfiprintf_r+0x4c>
    d1dc:	46a8      	mov	r8, r5
    d1de:	e7a0      	b.n	d122 <_vfiprintf_r+0x42>
    d1e0:	4a43      	ldr	r2, [pc, #268]	; (d2f0 <_vfiprintf_r+0x210>)
    d1e2:	1a80      	subs	r0, r0, r2
    d1e4:	fa0b f000 	lsl.w	r0, fp, r0
    d1e8:	4318      	orrs	r0, r3
    d1ea:	9004      	str	r0, [sp, #16]
    d1ec:	4645      	mov	r5, r8
    d1ee:	e7bb      	b.n	d168 <_vfiprintf_r+0x88>
    d1f0:	9a03      	ldr	r2, [sp, #12]
    d1f2:	1d11      	adds	r1, r2, #4
    d1f4:	6812      	ldr	r2, [r2, #0]
    d1f6:	9103      	str	r1, [sp, #12]
    d1f8:	2a00      	cmp	r2, #0
    d1fa:	db01      	blt.n	d200 <_vfiprintf_r+0x120>
    d1fc:	9207      	str	r2, [sp, #28]
    d1fe:	e004      	b.n	d20a <_vfiprintf_r+0x12a>
    d200:	4252      	negs	r2, r2
    d202:	f043 0302 	orr.w	r3, r3, #2
    d206:	9207      	str	r2, [sp, #28]
    d208:	9304      	str	r3, [sp, #16]
    d20a:	f898 3000 	ldrb.w	r3, [r8]
    d20e:	2b2e      	cmp	r3, #46	; 0x2e
    d210:	d110      	bne.n	d234 <_vfiprintf_r+0x154>
    d212:	f898 3001 	ldrb.w	r3, [r8, #1]
    d216:	2b2a      	cmp	r3, #42	; 0x2a
    d218:	f108 0101 	add.w	r1, r8, #1
    d21c:	d137      	bne.n	d28e <_vfiprintf_r+0x1ae>
    d21e:	9b03      	ldr	r3, [sp, #12]
    d220:	1d1a      	adds	r2, r3, #4
    d222:	681b      	ldr	r3, [r3, #0]
    d224:	9203      	str	r2, [sp, #12]
    d226:	2b00      	cmp	r3, #0
    d228:	bfb8      	it	lt
    d22a:	f04f 33ff 	movlt.w	r3, #4294967295
    d22e:	f108 0802 	add.w	r8, r8, #2
    d232:	9305      	str	r3, [sp, #20]
    d234:	4d31      	ldr	r5, [pc, #196]	; (d2fc <_vfiprintf_r+0x21c>)
    d236:	f898 1000 	ldrb.w	r1, [r8]
    d23a:	2203      	movs	r2, #3
    d23c:	4628      	mov	r0, r5
    d23e:	f000 fa97 	bl	d770 <memchr>
    d242:	b140      	cbz	r0, d256 <_vfiprintf_r+0x176>
    d244:	2340      	movs	r3, #64	; 0x40
    d246:	1b40      	subs	r0, r0, r5
    d248:	fa03 f000 	lsl.w	r0, r3, r0
    d24c:	9b04      	ldr	r3, [sp, #16]
    d24e:	4303      	orrs	r3, r0
    d250:	9304      	str	r3, [sp, #16]
    d252:	f108 0801 	add.w	r8, r8, #1
    d256:	f898 1000 	ldrb.w	r1, [r8]
    d25a:	4829      	ldr	r0, [pc, #164]	; (d300 <_vfiprintf_r+0x220>)
    d25c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d260:	2206      	movs	r2, #6
    d262:	f108 0701 	add.w	r7, r8, #1
    d266:	f000 fa83 	bl	d770 <memchr>
    d26a:	2800      	cmp	r0, #0
    d26c:	d034      	beq.n	d2d8 <_vfiprintf_r+0x1f8>
    d26e:	4b25      	ldr	r3, [pc, #148]	; (d304 <_vfiprintf_r+0x224>)
    d270:	bb03      	cbnz	r3, d2b4 <_vfiprintf_r+0x1d4>
    d272:	9b03      	ldr	r3, [sp, #12]
    d274:	3307      	adds	r3, #7
    d276:	f023 0307 	bic.w	r3, r3, #7
    d27a:	3308      	adds	r3, #8
    d27c:	9303      	str	r3, [sp, #12]
    d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d280:	444b      	add	r3, r9
    d282:	9309      	str	r3, [sp, #36]	; 0x24
    d284:	e74c      	b.n	d120 <_vfiprintf_r+0x40>
    d286:	fb00 3202 	mla	r2, r0, r2, r3
    d28a:	2101      	movs	r1, #1
    d28c:	e786      	b.n	d19c <_vfiprintf_r+0xbc>
    d28e:	2300      	movs	r3, #0
    d290:	9305      	str	r3, [sp, #20]
    d292:	4618      	mov	r0, r3
    d294:	250a      	movs	r5, #10
    d296:	4688      	mov	r8, r1
    d298:	3101      	adds	r1, #1
    d29a:	f898 2000 	ldrb.w	r2, [r8]
    d29e:	3a30      	subs	r2, #48	; 0x30
    d2a0:	2a09      	cmp	r2, #9
    d2a2:	d903      	bls.n	d2ac <_vfiprintf_r+0x1cc>
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	d0c5      	beq.n	d234 <_vfiprintf_r+0x154>
    d2a8:	9005      	str	r0, [sp, #20]
    d2aa:	e7c3      	b.n	d234 <_vfiprintf_r+0x154>
    d2ac:	fb05 2000 	mla	r0, r5, r0, r2
    d2b0:	2301      	movs	r3, #1
    d2b2:	e7f0      	b.n	d296 <_vfiprintf_r+0x1b6>
    d2b4:	ab03      	add	r3, sp, #12
    d2b6:	9300      	str	r3, [sp, #0]
    d2b8:	4622      	mov	r2, r4
    d2ba:	4b13      	ldr	r3, [pc, #76]	; (d308 <_vfiprintf_r+0x228>)
    d2bc:	a904      	add	r1, sp, #16
    d2be:	4630      	mov	r0, r6
    d2c0:	f3af 8000 	nop.w
    d2c4:	f1b0 3fff 	cmp.w	r0, #4294967295
    d2c8:	4681      	mov	r9, r0
    d2ca:	d1d8      	bne.n	d27e <_vfiprintf_r+0x19e>
    d2cc:	89a3      	ldrh	r3, [r4, #12]
    d2ce:	065b      	lsls	r3, r3, #25
    d2d0:	f53f af7d 	bmi.w	d1ce <_vfiprintf_r+0xee>
    d2d4:	9809      	ldr	r0, [sp, #36]	; 0x24
    d2d6:	e77c      	b.n	d1d2 <_vfiprintf_r+0xf2>
    d2d8:	ab03      	add	r3, sp, #12
    d2da:	9300      	str	r3, [sp, #0]
    d2dc:	4622      	mov	r2, r4
    d2de:	4b0a      	ldr	r3, [pc, #40]	; (d308 <_vfiprintf_r+0x228>)
    d2e0:	a904      	add	r1, sp, #16
    d2e2:	4630      	mov	r0, r6
    d2e4:	f000 f888 	bl	d3f8 <_printf_i>
    d2e8:	e7ec      	b.n	d2c4 <_vfiprintf_r+0x1e4>
    d2ea:	bf00      	nop
    d2ec:	0000e5d8 	.word	0x0000e5d8
    d2f0:	0000e618 	.word	0x0000e618
    d2f4:	0000e5f8 	.word	0x0000e5f8
    d2f8:	0000e5b8 	.word	0x0000e5b8
    d2fc:	0000e61e 	.word	0x0000e61e
    d300:	0000e622 	.word	0x0000e622
    d304:	00000000 	.word	0x00000000
    d308:	0000d0bd 	.word	0x0000d0bd

0000d30c <_printf_common>:
    d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d310:	4691      	mov	r9, r2
    d312:	461f      	mov	r7, r3
    d314:	688a      	ldr	r2, [r1, #8]
    d316:	690b      	ldr	r3, [r1, #16]
    d318:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d31c:	4293      	cmp	r3, r2
    d31e:	bfb8      	it	lt
    d320:	4613      	movlt	r3, r2
    d322:	f8c9 3000 	str.w	r3, [r9]
    d326:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d32a:	4606      	mov	r6, r0
    d32c:	460c      	mov	r4, r1
    d32e:	b112      	cbz	r2, d336 <_printf_common+0x2a>
    d330:	3301      	adds	r3, #1
    d332:	f8c9 3000 	str.w	r3, [r9]
    d336:	6823      	ldr	r3, [r4, #0]
    d338:	0699      	lsls	r1, r3, #26
    d33a:	bf42      	ittt	mi
    d33c:	f8d9 3000 	ldrmi.w	r3, [r9]
    d340:	3302      	addmi	r3, #2
    d342:	f8c9 3000 	strmi.w	r3, [r9]
    d346:	6825      	ldr	r5, [r4, #0]
    d348:	f015 0506 	ands.w	r5, r5, #6
    d34c:	d107      	bne.n	d35e <_printf_common+0x52>
    d34e:	f104 0a19 	add.w	sl, r4, #25
    d352:	68e3      	ldr	r3, [r4, #12]
    d354:	f8d9 2000 	ldr.w	r2, [r9]
    d358:	1a9b      	subs	r3, r3, r2
    d35a:	429d      	cmp	r5, r3
    d35c:	db29      	blt.n	d3b2 <_printf_common+0xa6>
    d35e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    d362:	6822      	ldr	r2, [r4, #0]
    d364:	3300      	adds	r3, #0
    d366:	bf18      	it	ne
    d368:	2301      	movne	r3, #1
    d36a:	0692      	lsls	r2, r2, #26
    d36c:	d42e      	bmi.n	d3cc <_printf_common+0xc0>
    d36e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    d372:	4639      	mov	r1, r7
    d374:	4630      	mov	r0, r6
    d376:	47c0      	blx	r8
    d378:	3001      	adds	r0, #1
    d37a:	d021      	beq.n	d3c0 <_printf_common+0xb4>
    d37c:	6823      	ldr	r3, [r4, #0]
    d37e:	68e5      	ldr	r5, [r4, #12]
    d380:	f8d9 2000 	ldr.w	r2, [r9]
    d384:	f003 0306 	and.w	r3, r3, #6
    d388:	2b04      	cmp	r3, #4
    d38a:	bf08      	it	eq
    d38c:	1aad      	subeq	r5, r5, r2
    d38e:	68a3      	ldr	r3, [r4, #8]
    d390:	6922      	ldr	r2, [r4, #16]
    d392:	bf0c      	ite	eq
    d394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    d398:	2500      	movne	r5, #0
    d39a:	4293      	cmp	r3, r2
    d39c:	bfc4      	itt	gt
    d39e:	1a9b      	subgt	r3, r3, r2
    d3a0:	18ed      	addgt	r5, r5, r3
    d3a2:	f04f 0900 	mov.w	r9, #0
    d3a6:	341a      	adds	r4, #26
    d3a8:	454d      	cmp	r5, r9
    d3aa:	d11b      	bne.n	d3e4 <_printf_common+0xd8>
    d3ac:	2000      	movs	r0, #0
    d3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3b2:	2301      	movs	r3, #1
    d3b4:	4652      	mov	r2, sl
    d3b6:	4639      	mov	r1, r7
    d3b8:	4630      	mov	r0, r6
    d3ba:	47c0      	blx	r8
    d3bc:	3001      	adds	r0, #1
    d3be:	d103      	bne.n	d3c8 <_printf_common+0xbc>
    d3c0:	f04f 30ff 	mov.w	r0, #4294967295
    d3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3c8:	3501      	adds	r5, #1
    d3ca:	e7c2      	b.n	d352 <_printf_common+0x46>
    d3cc:	18e1      	adds	r1, r4, r3
    d3ce:	1c5a      	adds	r2, r3, #1
    d3d0:	2030      	movs	r0, #48	; 0x30
    d3d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d3d6:	4422      	add	r2, r4
    d3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    d3dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    d3e0:	3302      	adds	r3, #2
    d3e2:	e7c4      	b.n	d36e <_printf_common+0x62>
    d3e4:	2301      	movs	r3, #1
    d3e6:	4622      	mov	r2, r4
    d3e8:	4639      	mov	r1, r7
    d3ea:	4630      	mov	r0, r6
    d3ec:	47c0      	blx	r8
    d3ee:	3001      	adds	r0, #1
    d3f0:	d0e6      	beq.n	d3c0 <_printf_common+0xb4>
    d3f2:	f109 0901 	add.w	r9, r9, #1
    d3f6:	e7d7      	b.n	d3a8 <_printf_common+0x9c>

0000d3f8 <_printf_i>:
    d3f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d3fc:	4617      	mov	r7, r2
    d3fe:	7e0a      	ldrb	r2, [r1, #24]
    d400:	b085      	sub	sp, #20
    d402:	2a6e      	cmp	r2, #110	; 0x6e
    d404:	4698      	mov	r8, r3
    d406:	4606      	mov	r6, r0
    d408:	460c      	mov	r4, r1
    d40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d40c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    d410:	f000 80bc 	beq.w	d58c <_printf_i+0x194>
    d414:	d81a      	bhi.n	d44c <_printf_i+0x54>
    d416:	2a63      	cmp	r2, #99	; 0x63
    d418:	d02e      	beq.n	d478 <_printf_i+0x80>
    d41a:	d80a      	bhi.n	d432 <_printf_i+0x3a>
    d41c:	2a00      	cmp	r2, #0
    d41e:	f000 80c8 	beq.w	d5b2 <_printf_i+0x1ba>
    d422:	2a58      	cmp	r2, #88	; 0x58
    d424:	f000 808a 	beq.w	d53c <_printf_i+0x144>
    d428:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d42c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    d430:	e02a      	b.n	d488 <_printf_i+0x90>
    d432:	2a64      	cmp	r2, #100	; 0x64
    d434:	d001      	beq.n	d43a <_printf_i+0x42>
    d436:	2a69      	cmp	r2, #105	; 0x69
    d438:	d1f6      	bne.n	d428 <_printf_i+0x30>
    d43a:	6821      	ldr	r1, [r4, #0]
    d43c:	681a      	ldr	r2, [r3, #0]
    d43e:	f011 0f80 	tst.w	r1, #128	; 0x80
    d442:	d023      	beq.n	d48c <_printf_i+0x94>
    d444:	1d11      	adds	r1, r2, #4
    d446:	6019      	str	r1, [r3, #0]
    d448:	6813      	ldr	r3, [r2, #0]
    d44a:	e027      	b.n	d49c <_printf_i+0xa4>
    d44c:	2a73      	cmp	r2, #115	; 0x73
    d44e:	f000 80b4 	beq.w	d5ba <_printf_i+0x1c2>
    d452:	d808      	bhi.n	d466 <_printf_i+0x6e>
    d454:	2a6f      	cmp	r2, #111	; 0x6f
    d456:	d02a      	beq.n	d4ae <_printf_i+0xb6>
    d458:	2a70      	cmp	r2, #112	; 0x70
    d45a:	d1e5      	bne.n	d428 <_printf_i+0x30>
    d45c:	680a      	ldr	r2, [r1, #0]
    d45e:	f042 0220 	orr.w	r2, r2, #32
    d462:	600a      	str	r2, [r1, #0]
    d464:	e003      	b.n	d46e <_printf_i+0x76>
    d466:	2a75      	cmp	r2, #117	; 0x75
    d468:	d021      	beq.n	d4ae <_printf_i+0xb6>
    d46a:	2a78      	cmp	r2, #120	; 0x78
    d46c:	d1dc      	bne.n	d428 <_printf_i+0x30>
    d46e:	2278      	movs	r2, #120	; 0x78
    d470:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    d474:	496e      	ldr	r1, [pc, #440]	; (d630 <_printf_i+0x238>)
    d476:	e064      	b.n	d542 <_printf_i+0x14a>
    d478:	681a      	ldr	r2, [r3, #0]
    d47a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    d47e:	1d11      	adds	r1, r2, #4
    d480:	6019      	str	r1, [r3, #0]
    d482:	6813      	ldr	r3, [r2, #0]
    d484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d488:	2301      	movs	r3, #1
    d48a:	e0a3      	b.n	d5d4 <_printf_i+0x1dc>
    d48c:	f011 0f40 	tst.w	r1, #64	; 0x40
    d490:	f102 0104 	add.w	r1, r2, #4
    d494:	6019      	str	r1, [r3, #0]
    d496:	d0d7      	beq.n	d448 <_printf_i+0x50>
    d498:	f9b2 3000 	ldrsh.w	r3, [r2]
    d49c:	2b00      	cmp	r3, #0
    d49e:	da03      	bge.n	d4a8 <_printf_i+0xb0>
    d4a0:	222d      	movs	r2, #45	; 0x2d
    d4a2:	425b      	negs	r3, r3
    d4a4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    d4a8:	4962      	ldr	r1, [pc, #392]	; (d634 <_printf_i+0x23c>)
    d4aa:	220a      	movs	r2, #10
    d4ac:	e017      	b.n	d4de <_printf_i+0xe6>
    d4ae:	6820      	ldr	r0, [r4, #0]
    d4b0:	6819      	ldr	r1, [r3, #0]
    d4b2:	f010 0f80 	tst.w	r0, #128	; 0x80
    d4b6:	d003      	beq.n	d4c0 <_printf_i+0xc8>
    d4b8:	1d08      	adds	r0, r1, #4
    d4ba:	6018      	str	r0, [r3, #0]
    d4bc:	680b      	ldr	r3, [r1, #0]
    d4be:	e006      	b.n	d4ce <_printf_i+0xd6>
    d4c0:	f010 0f40 	tst.w	r0, #64	; 0x40
    d4c4:	f101 0004 	add.w	r0, r1, #4
    d4c8:	6018      	str	r0, [r3, #0]
    d4ca:	d0f7      	beq.n	d4bc <_printf_i+0xc4>
    d4cc:	880b      	ldrh	r3, [r1, #0]
    d4ce:	4959      	ldr	r1, [pc, #356]	; (d634 <_printf_i+0x23c>)
    d4d0:	2a6f      	cmp	r2, #111	; 0x6f
    d4d2:	bf14      	ite	ne
    d4d4:	220a      	movne	r2, #10
    d4d6:	2208      	moveq	r2, #8
    d4d8:	2000      	movs	r0, #0
    d4da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    d4de:	6865      	ldr	r5, [r4, #4]
    d4e0:	60a5      	str	r5, [r4, #8]
    d4e2:	2d00      	cmp	r5, #0
    d4e4:	f2c0 809c 	blt.w	d620 <_printf_i+0x228>
    d4e8:	6820      	ldr	r0, [r4, #0]
    d4ea:	f020 0004 	bic.w	r0, r0, #4
    d4ee:	6020      	str	r0, [r4, #0]
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d13f      	bne.n	d574 <_printf_i+0x17c>
    d4f4:	2d00      	cmp	r5, #0
    d4f6:	f040 8095 	bne.w	d624 <_printf_i+0x22c>
    d4fa:	4675      	mov	r5, lr
    d4fc:	2a08      	cmp	r2, #8
    d4fe:	d10b      	bne.n	d518 <_printf_i+0x120>
    d500:	6823      	ldr	r3, [r4, #0]
    d502:	07da      	lsls	r2, r3, #31
    d504:	d508      	bpl.n	d518 <_printf_i+0x120>
    d506:	6923      	ldr	r3, [r4, #16]
    d508:	6862      	ldr	r2, [r4, #4]
    d50a:	429a      	cmp	r2, r3
    d50c:	bfde      	ittt	le
    d50e:	2330      	movle	r3, #48	; 0x30
    d510:	f805 3c01 	strble.w	r3, [r5, #-1]
    d514:	f105 35ff 	addle.w	r5, r5, #4294967295
    d518:	ebae 0305 	sub.w	r3, lr, r5
    d51c:	6123      	str	r3, [r4, #16]
    d51e:	f8cd 8000 	str.w	r8, [sp]
    d522:	463b      	mov	r3, r7
    d524:	aa03      	add	r2, sp, #12
    d526:	4621      	mov	r1, r4
    d528:	4630      	mov	r0, r6
    d52a:	f7ff feef 	bl	d30c <_printf_common>
    d52e:	3001      	adds	r0, #1
    d530:	d155      	bne.n	d5de <_printf_i+0x1e6>
    d532:	f04f 30ff 	mov.w	r0, #4294967295
    d536:	b005      	add	sp, #20
    d538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d53c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    d540:	493c      	ldr	r1, [pc, #240]	; (d634 <_printf_i+0x23c>)
    d542:	6822      	ldr	r2, [r4, #0]
    d544:	6818      	ldr	r0, [r3, #0]
    d546:	f012 0f80 	tst.w	r2, #128	; 0x80
    d54a:	f100 0504 	add.w	r5, r0, #4
    d54e:	601d      	str	r5, [r3, #0]
    d550:	d001      	beq.n	d556 <_printf_i+0x15e>
    d552:	6803      	ldr	r3, [r0, #0]
    d554:	e002      	b.n	d55c <_printf_i+0x164>
    d556:	0655      	lsls	r5, r2, #25
    d558:	d5fb      	bpl.n	d552 <_printf_i+0x15a>
    d55a:	8803      	ldrh	r3, [r0, #0]
    d55c:	07d0      	lsls	r0, r2, #31
    d55e:	bf44      	itt	mi
    d560:	f042 0220 	orrmi.w	r2, r2, #32
    d564:	6022      	strmi	r2, [r4, #0]
    d566:	b91b      	cbnz	r3, d570 <_printf_i+0x178>
    d568:	6822      	ldr	r2, [r4, #0]
    d56a:	f022 0220 	bic.w	r2, r2, #32
    d56e:	6022      	str	r2, [r4, #0]
    d570:	2210      	movs	r2, #16
    d572:	e7b1      	b.n	d4d8 <_printf_i+0xe0>
    d574:	4675      	mov	r5, lr
    d576:	fbb3 f0f2 	udiv	r0, r3, r2
    d57a:	fb02 3310 	mls	r3, r2, r0, r3
    d57e:	5ccb      	ldrb	r3, [r1, r3]
    d580:	f805 3d01 	strb.w	r3, [r5, #-1]!
    d584:	4603      	mov	r3, r0
    d586:	2800      	cmp	r0, #0
    d588:	d1f5      	bne.n	d576 <_printf_i+0x17e>
    d58a:	e7b7      	b.n	d4fc <_printf_i+0x104>
    d58c:	6808      	ldr	r0, [r1, #0]
    d58e:	681a      	ldr	r2, [r3, #0]
    d590:	6949      	ldr	r1, [r1, #20]
    d592:	f010 0f80 	tst.w	r0, #128	; 0x80
    d596:	d004      	beq.n	d5a2 <_printf_i+0x1aa>
    d598:	1d10      	adds	r0, r2, #4
    d59a:	6018      	str	r0, [r3, #0]
    d59c:	6813      	ldr	r3, [r2, #0]
    d59e:	6019      	str	r1, [r3, #0]
    d5a0:	e007      	b.n	d5b2 <_printf_i+0x1ba>
    d5a2:	f010 0f40 	tst.w	r0, #64	; 0x40
    d5a6:	f102 0004 	add.w	r0, r2, #4
    d5aa:	6018      	str	r0, [r3, #0]
    d5ac:	6813      	ldr	r3, [r2, #0]
    d5ae:	d0f6      	beq.n	d59e <_printf_i+0x1a6>
    d5b0:	8019      	strh	r1, [r3, #0]
    d5b2:	2300      	movs	r3, #0
    d5b4:	6123      	str	r3, [r4, #16]
    d5b6:	4675      	mov	r5, lr
    d5b8:	e7b1      	b.n	d51e <_printf_i+0x126>
    d5ba:	681a      	ldr	r2, [r3, #0]
    d5bc:	1d11      	adds	r1, r2, #4
    d5be:	6019      	str	r1, [r3, #0]
    d5c0:	6815      	ldr	r5, [r2, #0]
    d5c2:	6862      	ldr	r2, [r4, #4]
    d5c4:	2100      	movs	r1, #0
    d5c6:	4628      	mov	r0, r5
    d5c8:	f000 f8d2 	bl	d770 <memchr>
    d5cc:	b108      	cbz	r0, d5d2 <_printf_i+0x1da>
    d5ce:	1b40      	subs	r0, r0, r5
    d5d0:	6060      	str	r0, [r4, #4]
    d5d2:	6863      	ldr	r3, [r4, #4]
    d5d4:	6123      	str	r3, [r4, #16]
    d5d6:	2300      	movs	r3, #0
    d5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d5dc:	e79f      	b.n	d51e <_printf_i+0x126>
    d5de:	6923      	ldr	r3, [r4, #16]
    d5e0:	462a      	mov	r2, r5
    d5e2:	4639      	mov	r1, r7
    d5e4:	4630      	mov	r0, r6
    d5e6:	47c0      	blx	r8
    d5e8:	3001      	adds	r0, #1
    d5ea:	d0a2      	beq.n	d532 <_printf_i+0x13a>
    d5ec:	6823      	ldr	r3, [r4, #0]
    d5ee:	079b      	lsls	r3, r3, #30
    d5f0:	d507      	bpl.n	d602 <_printf_i+0x20a>
    d5f2:	2500      	movs	r5, #0
    d5f4:	f104 0919 	add.w	r9, r4, #25
    d5f8:	68e3      	ldr	r3, [r4, #12]
    d5fa:	9a03      	ldr	r2, [sp, #12]
    d5fc:	1a9b      	subs	r3, r3, r2
    d5fe:	429d      	cmp	r5, r3
    d600:	db05      	blt.n	d60e <_printf_i+0x216>
    d602:	68e0      	ldr	r0, [r4, #12]
    d604:	9b03      	ldr	r3, [sp, #12]
    d606:	4298      	cmp	r0, r3
    d608:	bfb8      	it	lt
    d60a:	4618      	movlt	r0, r3
    d60c:	e793      	b.n	d536 <_printf_i+0x13e>
    d60e:	2301      	movs	r3, #1
    d610:	464a      	mov	r2, r9
    d612:	4639      	mov	r1, r7
    d614:	4630      	mov	r0, r6
    d616:	47c0      	blx	r8
    d618:	3001      	adds	r0, #1
    d61a:	d08a      	beq.n	d532 <_printf_i+0x13a>
    d61c:	3501      	adds	r5, #1
    d61e:	e7eb      	b.n	d5f8 <_printf_i+0x200>
    d620:	2b00      	cmp	r3, #0
    d622:	d1a7      	bne.n	d574 <_printf_i+0x17c>
    d624:	780b      	ldrb	r3, [r1, #0]
    d626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d62a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d62e:	e765      	b.n	d4fc <_printf_i+0x104>
    d630:	0000e63a 	.word	0x0000e63a
    d634:	0000e629 	.word	0x0000e629

0000d638 <__sread>:
    d638:	b510      	push	{r4, lr}
    d63a:	460c      	mov	r4, r1
    d63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d640:	f000 f926 	bl	d890 <_read_r>
    d644:	2800      	cmp	r0, #0
    d646:	bfab      	itete	ge
    d648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    d64a:	89a3      	ldrhlt	r3, [r4, #12]
    d64c:	181b      	addge	r3, r3, r0
    d64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    d652:	bfac      	ite	ge
    d654:	6563      	strge	r3, [r4, #84]	; 0x54
    d656:	81a3      	strhlt	r3, [r4, #12]
    d658:	bd10      	pop	{r4, pc}

0000d65a <__swrite>:
    d65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d65e:	461f      	mov	r7, r3
    d660:	898b      	ldrh	r3, [r1, #12]
    d662:	05db      	lsls	r3, r3, #23
    d664:	4605      	mov	r5, r0
    d666:	460c      	mov	r4, r1
    d668:	4616      	mov	r6, r2
    d66a:	d505      	bpl.n	d678 <__swrite+0x1e>
    d66c:	2302      	movs	r3, #2
    d66e:	2200      	movs	r2, #0
    d670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d674:	f000 f868 	bl	d748 <_lseek_r>
    d678:	89a3      	ldrh	r3, [r4, #12]
    d67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d682:	81a3      	strh	r3, [r4, #12]
    d684:	4632      	mov	r2, r6
    d686:	463b      	mov	r3, r7
    d688:	4628      	mov	r0, r5
    d68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d68e:	f000 b817 	b.w	d6c0 <_write_r>

0000d692 <__sseek>:
    d692:	b510      	push	{r4, lr}
    d694:	460c      	mov	r4, r1
    d696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d69a:	f000 f855 	bl	d748 <_lseek_r>
    d69e:	1c43      	adds	r3, r0, #1
    d6a0:	89a3      	ldrh	r3, [r4, #12]
    d6a2:	bf15      	itete	ne
    d6a4:	6560      	strne	r0, [r4, #84]	; 0x54
    d6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    d6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    d6ae:	81a3      	strheq	r3, [r4, #12]
    d6b0:	bf18      	it	ne
    d6b2:	81a3      	strhne	r3, [r4, #12]
    d6b4:	bd10      	pop	{r4, pc}

0000d6b6 <__sclose>:
    d6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d6ba:	f000 b813 	b.w	d6e4 <_close_r>
	...

0000d6c0 <_write_r>:
    d6c0:	b538      	push	{r3, r4, r5, lr}
    d6c2:	4c07      	ldr	r4, [pc, #28]	; (d6e0 <_write_r+0x20>)
    d6c4:	4605      	mov	r5, r0
    d6c6:	4608      	mov	r0, r1
    d6c8:	4611      	mov	r1, r2
    d6ca:	2200      	movs	r2, #0
    d6cc:	6022      	str	r2, [r4, #0]
    d6ce:	461a      	mov	r2, r3
    d6d0:	f7fd f852 	bl	a778 <_write>
    d6d4:	1c43      	adds	r3, r0, #1
    d6d6:	d102      	bne.n	d6de <_write_r+0x1e>
    d6d8:	6823      	ldr	r3, [r4, #0]
    d6da:	b103      	cbz	r3, d6de <_write_r+0x1e>
    d6dc:	602b      	str	r3, [r5, #0]
    d6de:	bd38      	pop	{r3, r4, r5, pc}
    d6e0:	20007de8 	.word	0x20007de8

0000d6e4 <_close_r>:
    d6e4:	b538      	push	{r3, r4, r5, lr}
    d6e6:	4c06      	ldr	r4, [pc, #24]	; (d700 <_close_r+0x1c>)
    d6e8:	2300      	movs	r3, #0
    d6ea:	4605      	mov	r5, r0
    d6ec:	4608      	mov	r0, r1
    d6ee:	6023      	str	r3, [r4, #0]
    d6f0:	f7f8 fc96 	bl	6020 <_close>
    d6f4:	1c43      	adds	r3, r0, #1
    d6f6:	d102      	bne.n	d6fe <_close_r+0x1a>
    d6f8:	6823      	ldr	r3, [r4, #0]
    d6fa:	b103      	cbz	r3, d6fe <_close_r+0x1a>
    d6fc:	602b      	str	r3, [r5, #0]
    d6fe:	bd38      	pop	{r3, r4, r5, pc}
    d700:	20007de8 	.word	0x20007de8

0000d704 <_fstat_r>:
    d704:	b538      	push	{r3, r4, r5, lr}
    d706:	4c07      	ldr	r4, [pc, #28]	; (d724 <_fstat_r+0x20>)
    d708:	2300      	movs	r3, #0
    d70a:	4605      	mov	r5, r0
    d70c:	4608      	mov	r0, r1
    d70e:	4611      	mov	r1, r2
    d710:	6023      	str	r3, [r4, #0]
    d712:	f7f8 fc88 	bl	6026 <_fstat>
    d716:	1c43      	adds	r3, r0, #1
    d718:	d102      	bne.n	d720 <_fstat_r+0x1c>
    d71a:	6823      	ldr	r3, [r4, #0]
    d71c:	b103      	cbz	r3, d720 <_fstat_r+0x1c>
    d71e:	602b      	str	r3, [r5, #0]
    d720:	bd38      	pop	{r3, r4, r5, pc}
    d722:	bf00      	nop
    d724:	20007de8 	.word	0x20007de8

0000d728 <_isatty_r>:
    d728:	b538      	push	{r3, r4, r5, lr}
    d72a:	4c06      	ldr	r4, [pc, #24]	; (d744 <_isatty_r+0x1c>)
    d72c:	2300      	movs	r3, #0
    d72e:	4605      	mov	r5, r0
    d730:	4608      	mov	r0, r1
    d732:	6023      	str	r3, [r4, #0]
    d734:	f7f8 fc7c 	bl	6030 <_isatty>
    d738:	1c43      	adds	r3, r0, #1
    d73a:	d102      	bne.n	d742 <_isatty_r+0x1a>
    d73c:	6823      	ldr	r3, [r4, #0]
    d73e:	b103      	cbz	r3, d742 <_isatty_r+0x1a>
    d740:	602b      	str	r3, [r5, #0]
    d742:	bd38      	pop	{r3, r4, r5, pc}
    d744:	20007de8 	.word	0x20007de8

0000d748 <_lseek_r>:
    d748:	b538      	push	{r3, r4, r5, lr}
    d74a:	4c07      	ldr	r4, [pc, #28]	; (d768 <_lseek_r+0x20>)
    d74c:	4605      	mov	r5, r0
    d74e:	4608      	mov	r0, r1
    d750:	4611      	mov	r1, r2
    d752:	2200      	movs	r2, #0
    d754:	6022      	str	r2, [r4, #0]
    d756:	461a      	mov	r2, r3
    d758:	f7f8 fc6c 	bl	6034 <_lseek>
    d75c:	1c43      	adds	r3, r0, #1
    d75e:	d102      	bne.n	d766 <_lseek_r+0x1e>
    d760:	6823      	ldr	r3, [r4, #0]
    d762:	b103      	cbz	r3, d766 <_lseek_r+0x1e>
    d764:	602b      	str	r3, [r5, #0]
    d766:	bd38      	pop	{r3, r4, r5, pc}
    d768:	20007de8 	.word	0x20007de8
    d76c:	00000000 	.word	0x00000000

0000d770 <memchr>:
    d770:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d774:	2a10      	cmp	r2, #16
    d776:	db2b      	blt.n	d7d0 <memchr+0x60>
    d778:	f010 0f07 	tst.w	r0, #7
    d77c:	d008      	beq.n	d790 <memchr+0x20>
    d77e:	f810 3b01 	ldrb.w	r3, [r0], #1
    d782:	3a01      	subs	r2, #1
    d784:	428b      	cmp	r3, r1
    d786:	d02d      	beq.n	d7e4 <memchr+0x74>
    d788:	f010 0f07 	tst.w	r0, #7
    d78c:	b342      	cbz	r2, d7e0 <memchr+0x70>
    d78e:	d1f6      	bne.n	d77e <memchr+0xe>
    d790:	b4f0      	push	{r4, r5, r6, r7}
    d792:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d796:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d79a:	f022 0407 	bic.w	r4, r2, #7
    d79e:	f07f 0700 	mvns.w	r7, #0
    d7a2:	2300      	movs	r3, #0
    d7a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    d7a8:	3c08      	subs	r4, #8
    d7aa:	ea85 0501 	eor.w	r5, r5, r1
    d7ae:	ea86 0601 	eor.w	r6, r6, r1
    d7b2:	fa85 f547 	uadd8	r5, r5, r7
    d7b6:	faa3 f587 	sel	r5, r3, r7
    d7ba:	fa86 f647 	uadd8	r6, r6, r7
    d7be:	faa5 f687 	sel	r6, r5, r7
    d7c2:	b98e      	cbnz	r6, d7e8 <memchr+0x78>
    d7c4:	d1ee      	bne.n	d7a4 <memchr+0x34>
    d7c6:	bcf0      	pop	{r4, r5, r6, r7}
    d7c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d7cc:	f002 0207 	and.w	r2, r2, #7
    d7d0:	b132      	cbz	r2, d7e0 <memchr+0x70>
    d7d2:	f810 3b01 	ldrb.w	r3, [r0], #1
    d7d6:	3a01      	subs	r2, #1
    d7d8:	ea83 0301 	eor.w	r3, r3, r1
    d7dc:	b113      	cbz	r3, d7e4 <memchr+0x74>
    d7de:	d1f8      	bne.n	d7d2 <memchr+0x62>
    d7e0:	2000      	movs	r0, #0
    d7e2:	4770      	bx	lr
    d7e4:	3801      	subs	r0, #1
    d7e6:	4770      	bx	lr
    d7e8:	2d00      	cmp	r5, #0
    d7ea:	bf06      	itte	eq
    d7ec:	4635      	moveq	r5, r6
    d7ee:	3803      	subeq	r0, #3
    d7f0:	3807      	subne	r0, #7
    d7f2:	f015 0f01 	tst.w	r5, #1
    d7f6:	d107      	bne.n	d808 <memchr+0x98>
    d7f8:	3001      	adds	r0, #1
    d7fa:	f415 7f80 	tst.w	r5, #256	; 0x100
    d7fe:	bf02      	ittt	eq
    d800:	3001      	addeq	r0, #1
    d802:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    d806:	3001      	addeq	r0, #1
    d808:	bcf0      	pop	{r4, r5, r6, r7}
    d80a:	3801      	subs	r0, #1
    d80c:	4770      	bx	lr
    d80e:	bf00      	nop

0000d810 <memmove>:
    d810:	4288      	cmp	r0, r1
    d812:	b510      	push	{r4, lr}
    d814:	eb01 0302 	add.w	r3, r1, r2
    d818:	d803      	bhi.n	d822 <memmove+0x12>
    d81a:	1e42      	subs	r2, r0, #1
    d81c:	4299      	cmp	r1, r3
    d81e:	d10c      	bne.n	d83a <memmove+0x2a>
    d820:	bd10      	pop	{r4, pc}
    d822:	4298      	cmp	r0, r3
    d824:	d2f9      	bcs.n	d81a <memmove+0xa>
    d826:	1881      	adds	r1, r0, r2
    d828:	1ad2      	subs	r2, r2, r3
    d82a:	42d3      	cmn	r3, r2
    d82c:	d100      	bne.n	d830 <memmove+0x20>
    d82e:	bd10      	pop	{r4, pc}
    d830:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    d834:	f801 4d01 	strb.w	r4, [r1, #-1]!
    d838:	e7f7      	b.n	d82a <memmove+0x1a>
    d83a:	f811 4b01 	ldrb.w	r4, [r1], #1
    d83e:	f802 4f01 	strb.w	r4, [r2, #1]!
    d842:	e7eb      	b.n	d81c <memmove+0xc>

0000d844 <_realloc_r>:
    d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d846:	4607      	mov	r7, r0
    d848:	4614      	mov	r4, r2
    d84a:	460e      	mov	r6, r1
    d84c:	b921      	cbnz	r1, d858 <_realloc_r+0x14>
    d84e:	4611      	mov	r1, r2
    d850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d854:	f7fe be5e 	b.w	c514 <_malloc_r>
    d858:	b922      	cbnz	r2, d864 <_realloc_r+0x20>
    d85a:	f7fe fe0d 	bl	c478 <_free_r>
    d85e:	4625      	mov	r5, r4
    d860:	4628      	mov	r0, r5
    d862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d864:	f000 f826 	bl	d8b4 <_malloc_usable_size_r>
    d868:	4284      	cmp	r4, r0
    d86a:	d90f      	bls.n	d88c <_realloc_r+0x48>
    d86c:	4621      	mov	r1, r4
    d86e:	4638      	mov	r0, r7
    d870:	f7fe fe50 	bl	c514 <_malloc_r>
    d874:	4605      	mov	r5, r0
    d876:	2800      	cmp	r0, #0
    d878:	d0f2      	beq.n	d860 <_realloc_r+0x1c>
    d87a:	4631      	mov	r1, r6
    d87c:	4622      	mov	r2, r4
    d87e:	f7fe fde7 	bl	c450 <memcpy>
    d882:	4631      	mov	r1, r6
    d884:	4638      	mov	r0, r7
    d886:	f7fe fdf7 	bl	c478 <_free_r>
    d88a:	e7e9      	b.n	d860 <_realloc_r+0x1c>
    d88c:	4635      	mov	r5, r6
    d88e:	e7e7      	b.n	d860 <_realloc_r+0x1c>

0000d890 <_read_r>:
    d890:	b538      	push	{r3, r4, r5, lr}
    d892:	4c07      	ldr	r4, [pc, #28]	; (d8b0 <_read_r+0x20>)
    d894:	4605      	mov	r5, r0
    d896:	4608      	mov	r0, r1
    d898:	4611      	mov	r1, r2
    d89a:	2200      	movs	r2, #0
    d89c:	6022      	str	r2, [r4, #0]
    d89e:	461a      	mov	r2, r3
    d8a0:	f7fc ff5a 	bl	a758 <_read>
    d8a4:	1c43      	adds	r3, r0, #1
    d8a6:	d102      	bne.n	d8ae <_read_r+0x1e>
    d8a8:	6823      	ldr	r3, [r4, #0]
    d8aa:	b103      	cbz	r3, d8ae <_read_r+0x1e>
    d8ac:	602b      	str	r3, [r5, #0]
    d8ae:	bd38      	pop	{r3, r4, r5, pc}
    d8b0:	20007de8 	.word	0x20007de8

0000d8b4 <_malloc_usable_size_r>:
    d8b4:	f851 0c04 	ldr.w	r0, [r1, #-4]
    d8b8:	2800      	cmp	r0, #0
    d8ba:	f1a0 0004 	sub.w	r0, r0, #4
    d8be:	bfbc      	itt	lt
    d8c0:	580b      	ldrlt	r3, [r1, r0]
    d8c2:	18c0      	addlt	r0, r0, r3
    d8c4:	4770      	bx	lr
    d8c6:	0000      	movs	r0, r0
    d8c8:	682f2e2e 	.word	0x682f2e2e
    d8cc:	692f6c61 	.word	0x692f6c61
    d8d0:	756c636e 	.word	0x756c636e
    d8d4:	682f6564 	.word	0x682f6564
    d8d8:	775f6c61 	.word	0x775f6c61
    d8dc:	682e7464 	.word	0x682e7464
    d8e0:	00000000 	.word	0x00000000
    d8e4:	7974227b 	.word	0x7974227b
    d8e8:	3a226570 	.word	0x3a226570
    d8ec:	44494d22 	.word	0x44494d22
    d8f0:	202c2249 	.word	0x202c2249
    d8f4:	74616422 	.word	0x74616422
    d8f8:	203a2261 	.word	0x203a2261
    d8fc:	6425225b 	.word	0x6425225b
    d900:	22202c22 	.word	0x22202c22
    d904:	2c226425 	.word	0x2c226425
    d908:	64252220 	.word	0x64252220
    d90c:	22202c22 	.word	0x22202c22
    d910:	2c226425 	.word	0x2c226425
    d914:	64252220 	.word	0x64252220
    d918:	22202c22 	.word	0x22202c22
    d91c:	5d226425 	.word	0x5d226425
    d920:	000a0d7d 	.word	0x000a0d7d
    d924:	4952475b 	.word	0x4952475b
    d928:	25205d44 	.word	0x25205d44
    d92c:	25206433 	.word	0x25206433
    d930:	25206434 	.word	0x25206434
    d934:	25206434 	.word	0x25206434
    d938:	4d5b2064 	.word	0x4d5b2064
    d93c:	5d494449 	.word	0x5d494449
    d940:	3a684320 	.word	0x3a684320
    d944:	20642520 	.word	0x20642520
    d948:	646d4320 	.word	0x646d4320
    d94c:	6425203a 	.word	0x6425203a
    d950:	61502020 	.word	0x61502020
    d954:	316d6172 	.word	0x316d6172
    d958:	6425203a 	.word	0x6425203a
    d95c:	61502020 	.word	0x61502020
    d960:	326d6172 	.word	0x326d6172
    d964:	6425203a 	.word	0x6425203a
    d968:	0000000a 	.word	0x0000000a
    d96c:	4952475b 	.word	0x4952475b
    d970:	25205d44 	.word	0x25205d44
    d974:	25206433 	.word	0x25206433
    d978:	25206434 	.word	0x25206434
    d97c:	25206434 	.word	0x25206434
    d980:	4b5b2064 	.word	0x4b5b2064
    d984:	4f425945 	.word	0x4f425945
    d988:	5d445241 	.word	0x5d445241
    d98c:	79654b20 	.word	0x79654b20
    d990:	6425203a 	.word	0x6425203a
    d994:	646f4d20 	.word	0x646f4d20
    d998:	6425203a 	.word	0x6425203a
    d99c:	646d4320 	.word	0x646d4320
    d9a0:	6425203a 	.word	0x6425203a
    d9a4:	4357480a 	.word	0x4357480a
    d9a8:	203a4746 	.word	0x203a4746
    d9ac:	78383025 	.word	0x78383025
    d9b0:	0000000a 	.word	0x0000000a
    d9b4:	4952475b 	.word	0x4952475b
    d9b8:	25205d44 	.word	0x25205d44
    d9bc:	25206433 	.word	0x25206433
    d9c0:	25206434 	.word	0x25206434
    d9c4:	25206434 	.word	0x25206434
    d9c8:	535b2064 	.word	0x535b2064
    d9cc:	205d5359 	.word	0x205d5359
    d9d0:	20643325 	.word	0x20643325
    d9d4:	20643325 	.word	0x20643325
    d9d8:	0a643325 	.word	0x0a643325
    d9dc:	00000000 	.word	0x00000000
    d9e0:	7974227b 	.word	0x7974227b
    d9e4:	3a226570 	.word	0x3a226570
    d9e8:	41454822 	.word	0x41454822
    d9ec:	45425452 	.word	0x45425452
    d9f0:	2c225441 	.word	0x2c225441
    d9f4:	61642220 	.word	0x61642220
    d9f8:	3a226174 	.word	0x3a226174
    d9fc:	25225b20 	.word	0x25225b20
    da00:	202c2264 	.word	0x202c2264
    da04:	22642522 	.word	0x22642522
    da08:	2522202c 	.word	0x2522202c
    da0c:	7d5d2264 	.word	0x7d5d2264
    da10:	00000a0d 	.word	0x00000a0d
    da14:	4b4e555b 	.word	0x4b4e555b
    da18:	4e574f4e 	.word	0x4e574f4e
    da1c:	3e2d205d 	.word	0x3e2d205d
    da20:	6f725020 	.word	0x6f725020
    da24:	6f636f74 	.word	0x6f636f74
    da28:	25203a6c 	.word	0x25203a6c
    da2c:	00000a64 	.word	0x00000a64
    da30:	0f0e0d0c 	.word	0x0f0e0d0c
    da34:	0b0a0908 	.word	0x0b0a0908
    da38:	07060504 	.word	0x07060504
    da3c:	03020100 	.word	0x03020100
    da40:	30256325 	.word	0x30256325
    da44:	30257832 	.word	0x30257832
    da48:	30257832 	.word	0x30257832
    da4c:	30257832 	.word	0x30257832
    da50:	30257832 	.word	0x30257832
    da54:	63257832 	.word	0x63257832
    da58:	30256325 	.word	0x30256325
    da5c:	30257832 	.word	0x30257832
    da60:	30257832 	.word	0x30257832
    da64:	30257832 	.word	0x30257832
    da68:	30257832 	.word	0x30257832
    da6c:	63257832 	.word	0x63257832
    da70:	00000000 	.word	0x00000000
    da74:	78383025 	.word	0x78383025
    da78:	00000000 	.word	0x00000000
    da7c:	64697267 	.word	0x64697267
    da80:	7379735f 	.word	0x7379735f
    da84:	68633a3a 	.word	0x68633a3a
    da88:	736b6365 	.word	0x736b6365
    da8c:	00006d75 	.word	0x00006d75
    da90:	63656843 	.word	0x63656843
    da94:	6d75736b 	.word	0x6d75736b
    da98:	61655220 	.word	0x61655220
    da9c:	61432f64 	.word	0x61432f64
    daa0:	6c75636c 	.word	0x6c75636c
    daa4:	00657461 	.word	0x00657461
    daa8:	6b636170 	.word	0x6b636170
    daac:	257b7465 	.word	0x257b7465
    dab0:	25202c64 	.word	0x25202c64
    dab4:	25202c64 	.word	0x25202c64
    dab8:	25202c64 	.word	0x25202c64
    dabc:	25202c64 	.word	0x25202c64
    dac0:	25202c64 	.word	0x25202c64
    dac4:	25202c64 	.word	0x25202c64
    dac8:	25202c64 	.word	0x25202c64
    dacc:	52207d64 	.word	0x52207d64
    dad0:	3a646165 	.word	0x3a646165
    dad4:	2c642520 	.word	0x2c642520
    dad8:	6c614320 	.word	0x6c614320
    dadc:	616c7563 	.word	0x616c7563
    dae0:	203a6574 	.word	0x203a6574
    dae4:	00006425 	.word	0x00006425
    dae8:	63656843 	.word	0x63656843
    daec:	6d75736b 	.word	0x6d75736b
    daf0:	69725720 	.word	0x69725720
    daf4:	432f6574 	.word	0x432f6574
    daf8:	75636c61 	.word	0x75636c61
    dafc:	6574616c 	.word	0x6574616c
    db00:	00000000 	.word	0x00000000
    db04:	63656843 	.word	0x63656843
    db08:	6d75736b 	.word	0x6d75736b
    db0c:	65764f20 	.word	0x65764f20
    db10:	69727772 	.word	0x69727772
    db14:	00006574 	.word	0x00006574
    db18:	61726150 	.word	0x61726150
    db1c:	72706170 	.word	0x72706170
    db20:	73616b69 	.word	0x73616b69
    db24:	00000000 	.word	0x00000000
    db28:	30256325 	.word	0x30256325
    db2c:	30257832 	.word	0x30257832
    db30:	30257832 	.word	0x30257832
    db34:	30257832 	.word	0x30257832
    db38:	63257832 	.word	0x63257832
    db3c:	00000000 	.word	0x00000000
    db40:	30256325 	.word	0x30256325
    db44:	30257832 	.word	0x30257832
    db48:	30257832 	.word	0x30257832
    db4c:	63257832 	.word	0x63257832
    db50:	00000000 	.word	0x00000000
    db54:	63256325 	.word	0x63256325
    db58:	63256325 	.word	0x63256325
    db5c:	78323025 	.word	0x78323025
    db60:	78323025 	.word	0x78323025
    db64:	78323025 	.word	0x78323025
    db68:	30306325 	.word	0x30306325
    db6c:	0000000a 	.word	0x0000000a
    db70:	63256325 	.word	0x63256325
    db74:	78323025 	.word	0x78323025
    db78:	78323025 	.word	0x78323025
    db7c:	78323025 	.word	0x78323025
    db80:	78323025 	.word	0x78323025
    db84:	78323025 	.word	0x78323025
    db88:	00006325 	.word	0x00006325
    db8c:	78323025 	.word	0x78323025
    db90:	00000000 	.word	0x00000000
    db94:	000a3030 	.word	0x000a3030
    db98:	682f2e2e 	.word	0x682f2e2e
    db9c:	732f6c61 	.word	0x732f6c61
    dba0:	682f6372 	.word	0x682f6372
    dba4:	615f6c61 	.word	0x615f6c61
    dba8:	615f6364 	.word	0x615f6364
    dbac:	636e7973 	.word	0x636e7973
    dbb0:	0000632e 	.word	0x0000632e
    dbb4:	682f2e2e 	.word	0x682f2e2e
    dbb8:	732f6c61 	.word	0x732f6c61
    dbbc:	682f6372 	.word	0x682f6372
    dbc0:	635f6c61 	.word	0x635f6c61
    dbc4:	735f6372 	.word	0x735f6372
    dbc8:	2e636e79 	.word	0x2e636e79
    dbcc:	00000063 	.word	0x00000063
    dbd0:	682f2e2e 	.word	0x682f2e2e
    dbd4:	732f6c61 	.word	0x732f6c61
    dbd8:	682f6372 	.word	0x682f6372
    dbdc:	665f6c61 	.word	0x665f6c61
    dbe0:	6873616c 	.word	0x6873616c
    dbe4:	0000632e 	.word	0x0000632e
    dbe8:	682f2e2e 	.word	0x682f2e2e
    dbec:	732f6c61 	.word	0x732f6c61
    dbf0:	682f6372 	.word	0x682f6372
    dbf4:	695f6c61 	.word	0x695f6c61
    dbf8:	6d5f6332 	.word	0x6d5f6332
    dbfc:	7973615f 	.word	0x7973615f
    dc00:	632e636e 	.word	0x632e636e
    dc04:	00000000 	.word	0x00000000
    dc08:	682f2e2e 	.word	0x682f2e2e
    dc0c:	732f6c61 	.word	0x732f6c61
    dc10:	682f6372 	.word	0x682f6372
    dc14:	695f6c61 	.word	0x695f6c61
    dc18:	00632e6f 	.word	0x00632e6f
    dc1c:	682f2e2e 	.word	0x682f2e2e
    dc20:	732f6c61 	.word	0x732f6c61
    dc24:	682f6372 	.word	0x682f6372
    dc28:	715f6c61 	.word	0x715f6c61
    dc2c:	5f697073 	.word	0x5f697073
    dc30:	2e616d64 	.word	0x2e616d64
    dc34:	00000063 	.word	0x00000063
    dc38:	682f2e2e 	.word	0x682f2e2e
    dc3c:	732f6c61 	.word	0x732f6c61
    dc40:	682f6372 	.word	0x682f6372
    dc44:	735f6c61 	.word	0x735f6c61
    dc48:	6d5f6970 	.word	0x6d5f6970
    dc4c:	7973615f 	.word	0x7973615f
    dc50:	632e636e 	.word	0x632e636e
    dc54:	00000000 	.word	0x00000000
    dc58:	682f2e2e 	.word	0x682f2e2e
    dc5c:	732f6c61 	.word	0x732f6c61
    dc60:	682f6372 	.word	0x682f6372
    dc64:	735f6c61 	.word	0x735f6c61
    dc68:	6d5f6970 	.word	0x6d5f6970
    dc6c:	616d645f 	.word	0x616d645f
    dc70:	0000632e 	.word	0x0000632e
    dc74:	682f2e2e 	.word	0x682f2e2e
    dc78:	732f6c61 	.word	0x732f6c61
    dc7c:	682f6372 	.word	0x682f6372
    dc80:	745f6c61 	.word	0x745f6c61
    dc84:	72656d69 	.word	0x72656d69
    dc88:	0000632e 	.word	0x0000632e
    dc8c:	682f2e2e 	.word	0x682f2e2e
    dc90:	732f6c61 	.word	0x732f6c61
    dc94:	682f6372 	.word	0x682f6372
    dc98:	755f6c61 	.word	0x755f6c61
    dc9c:	74726173 	.word	0x74726173
    dca0:	7973615f 	.word	0x7973615f
    dca4:	632e636e 	.word	0x632e636e
    dca8:	00000000 	.word	0x00000000
    dcac:	682f2e2e 	.word	0x682f2e2e
    dcb0:	732f6c61 	.word	0x732f6c61
    dcb4:	682f6372 	.word	0x682f6372
    dcb8:	755f6c61 	.word	0x755f6c61
    dcbc:	74726173 	.word	0x74726173
    dcc0:	6e79735f 	.word	0x6e79735f
    dcc4:	00632e63 	.word	0x00632e63
    dcc8:	682f2e2e 	.word	0x682f2e2e
    dccc:	752f6c61 	.word	0x752f6c61
    dcd0:	736c6974 	.word	0x736c6974
    dcd4:	6372732f 	.word	0x6372732f
    dcd8:	6974752f 	.word	0x6974752f
    dcdc:	6c5f736c 	.word	0x6c5f736c
    dce0:	2e747369 	.word	0x2e747369
    dce4:	00000063 	.word	0x00000063
    dce8:	682f2e2e 	.word	0x682f2e2e
    dcec:	752f6c61 	.word	0x752f6c61
    dcf0:	736c6974 	.word	0x736c6974
    dcf4:	6372732f 	.word	0x6372732f
    dcf8:	6974752f 	.word	0x6974752f
    dcfc:	725f736c 	.word	0x725f736c
    dd00:	62676e69 	.word	0x62676e69
    dd04:	65666675 	.word	0x65666675
    dd08:	00632e72 	.word	0x00632e72

0000dd0c <_adcs>:
    dd0c:	01000000 0003000c 00041807 00000000     ................
    dd1c:	0014080b 00010000 000c0100 18040003     ................
    dd2c:	00000004 080b0000 00000014 682f2e2e     ............../h
    dd3c:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    dd4c:	00000000                                ....

0000dd50 <_cfgs>:
    dd50:	00200600 08068000 00200400 08068000     .. ....... .....
    dd60:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    dd80:	00200b00 14000003 00200a00 08000002     .. ....... .....
    dd90:	00201300 14000003 00000000 00000000     .. .............
	...
    de40:	00005400 1c000000 00005300 0c000000     .T.......S......

0000de50 <user_mux_confs>:
	...
    de7c:	04030201 04030201 00000000 00000000     ................
	...

0000de94 <channel_confs>:
    de94:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000ded4 <interrupt_cfg>:
    ded4:	00000002 00000002 00000002 00000002     ................
	...
    df54:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    df64:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    df74:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    df84:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    df94:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    dfa4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    dfb4:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000dfc4 <_usarts>:
    dfc4:	00000000 40100004 00030000 00700002     .......@......p.
    dfd4:	0000aaaa 00000000 00000001 40100004     ...............@
    dfe4:	00030000 00700002 0000aaaa 00000000     ......p.........
    dff4:	00000002 40100004 00030000 00700002     .......@......p.
    e004:	00005555 00000000 00000004 40100004     UU.............@
    e014:	00030000 00700002 0000aaaa 00000000     ......p.........
    e024:	00000006 40100004 00030000 00700002     .......@......p.
    e034:	0000aaaa 00000000                       ........

0000e03c <_i2cms>:
    e03c:	00000005 00200014 00000100 0000e6e5     ...... .........
    e04c:	00d70000 02dc6c00                       .....l..

0000e054 <sercomspi_regs>:
    e054:	3020000c 00020000 00000000 01ff0005     .. 0............
    e064:	20000c03 00000000 00000000 ff000600     ... ............
    e074:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    e084:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    e094:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    e0a4:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000e0b4 <_tcs>:
    e0b4:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    e0c4:	00000000 006c0001 00000308 00000021     ......l.....!...
    e0d4:	00003a98 00000000 006d0002 00000308     .:........m.....
    e0e4:	00000021 00003a98 00000000 006e0003     !....:........n.
    e0f4:	00000308 00000021 00003a98 00000000     ....!....:......
    e104:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    e114:	0000632e                                .c..

0000e118 <_usb_ep_cfgs>:
    e118:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    e130:	20000d20 00000000 00000008 20000ce0      .. ........... 
    e140:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    e158:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    e168:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    e178:	656d6954 2074756f 63736944 656e6e6f     Timeout Disconne
    e188:	26207463 73655220 52207465 69656365     ct & Reset Recei
    e198:	00726576 7974227b 3a226570 52415722     ver.{"type":"WAR
    e1a8:	474e494e 22202c22 61746164 5b203a22     NING", "data": [
    e1b8:	22732522 0a0d7d5d 00000000 656d6954     "%s"]}......Time
    e1c8:	2074756f 65522026 20746573 65636552     out & Reset Rece
    e1d8:	72657669 00000000 7974227b 3a226570     iver....{"type":
    e1e8:	41525422 202c2250 74616422 203a2261     "TRAP", "data": 
    e1f8:	7872225b 756f645f 5f656c62 66667562     ["rx_double_buff
    e208:	6f207265 72726576 5d226e75 00000d7d     er overrun"]}...
    e218:	7974227b 3a226570 52415722 474e494e     {"type":"WARNING
    e228:	22202c22 61746164 5b203a22 5f787222     ", "data": ["rx_
    e238:	62756f64 625f656c 65666675 766f2072     double_buffer ov
    e248:	75727265 7d5d226e 0000000d 6d617246     errun"]}....Fram
    e258:	74532065 20747261 7366664f 00007465     e Start Offset..
    e268:	6e6e6f43 00746365 7974227b 3a226570     Connect.{"type":
    e278:	41572220 4e494e52 202c2247 74616422      "WARNING", "dat
    e288:	203a2261 6e55225b 776f6e6b 73654d20     a": ["Unknow Mes
    e298:	65676173 70795420 7d5d2265 0000000d     sage Type"]}....
    e2a8:	7974227b 3a226570 41572220 4e494e52     {"type": "WARNIN
    e2b8:	202c2247 74616422 203a2261 6e49225b     G", "data": ["In
    e2c8:	696c6176 68432064 736b6365 5d226d75     valid Checksum"]
    e2d8:	00000d7d 7974227b 3a226570 52452220     }...{"type": "ER
    e2e8:	22524f52 6422202c 22617461 225b203a     ROR", "data": ["
    e2f8:	6d617246 72452065 22726f72 000d7d5d     Frame Error"]}..
    e308:	7974227b 3a226570 52452220 22524f52     {"type": "ERROR"
    e318:	6422202c 22617461 225b203a 69726150     , "data": ["Pari
    e328:	45207974 726f7272 0d7d5d22 00000000     ty Error"]}.....
    e338:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
    e348:	64657472 00000d0a 73616c46 72652068     rted....Flash er
    e358:	20657361 63637573 66737365 0d0a6c75     ase successful..
    e368:	00000000 73616c46 72772068 20657469     ....Flash write 
    e378:	63637573 66737365 0d0a6c75 00000000     successful......
    e388:	73616c46 65722068 73206461 65636375     Flash read succe
    e398:	75667373 000d0a6c 73616c46 61642068     ssful...Flash da
    e3a8:	76206174 66697265 74616369 206e6f69     ta verification 
    e3b8:	6c696166 0a2e6465 0000000d 74697257     failed......Writ
    e3c8:	202d2065 64616552 20736920 63637573     e - Read is succ
    e3d8:	66737365 69206c75 5351206e 46204950     essful in QSPI F
    e3e8:	6873616c 6d656d20 2e79726f 00000d0a     lash memory.....
    e3f8:	72617453 6e492074 61697469 657a696c     Start Initialize
    e408:	00000064 7974227b 3a226570 474f4c22     d...{"type":"LOG
    e418:	22202c22 61746164 5b203a22 22732522     ", "data": ["%s"
    e428:	0a0d7d5d 00000000 6e6b6e55 5220776f     ]}......Unknow R
    e438:	74657365 756f5320 00656372 55206f4e     eset Source.No U
    e448:	2074696e 74736554 00000000 48206f4e     nit Test....No H
    e458:	77647261 20657261 74736554 00000000     ardware Test....
    e468:	706d6f43 7469736f 65442065 65636976     Composite Device
    e478:	696e4920 6c616974 64657a69 00000000      Initialized....
    e488:	64697247 646f4d20 20656c75 74696e49     Grid Module Init
    e498:	696c6169 0064657a 65746e45 676e6972     ialized.Entering
    e4a8:	69614d20 6f4c206e 0000706f 706d6f43      Main Loop..Comp
    e4b8:	7469736f 65442065 65636976 6e6f4320     osite Device Con
    e4c8:	7463656e 00006465 7974227b 3a226570     nected..{"type":
    e4d8:	53415422 202c224b 74616422 203a2261     "TASK", "data": 
    e4e8:	0000005b 22642522 00000000 0000202c     [..."%d"...., ..
    e4f8:	7974227b 3a226570 4f4f4c22 202c2250     {"type":"LOOP", 
    e508:	74616422 203a2261 6425225b 22202c22     "data": ["%d", "
    e518:	2c226425 64252220 22202c22 5d226425     %d", "%d", "%d"]
    e528:	000a0d7d                                }...

0000e52c <keyboard_report_desc>:
    e52c:	06090105 070501a1 e729e019 01250015     ..........)...%.
    e53c:	08950175 01810281 65290019 65250015     u.........)e..%e
    e54c:	06950875 08050081 05290119 01250015     u.........)...%.
    e55c:	05950175 03950291 00c00191              u...........

0000e568 <mouse_report_desc>:
    e568:	02090105 010901a1 090500a1 03290119     ..............).
    e578:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    e588:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    e598:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    e5a8:	73752f65 2e636462 00000063              e/usbdc.c...

0000e5b4 <_global_impure_ptr>:
    e5b4:	2000055c                                \.. 

0000e5b8 <__sf_fake_stderr>:
	...

0000e5d8 <__sf_fake_stdin>:
	...

0000e5f8 <__sf_fake_stdout>:
	...
    e618:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    e628:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    e638:	31300046 35343332 39383736 64636261     F.0123456789abcd
    e648:	00006665                                ef..

0000e64c <_init>:
    e64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e64e:	bf00      	nop
    e650:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e652:	bc08      	pop	{r3}
    e654:	469e      	mov	lr, r3
    e656:	4770      	bx	lr

0000e658 <__init_array_start>:
    e658:	00000289 	.word	0x00000289

0000e65c <_fini>:
    e65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e65e:	bf00      	nop
    e660:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e662:	bc08      	pop	{r3}
    e664:	469e      	mov	lr, r3
    e666:	4770      	bx	lr

0000e668 <__fini_array_start>:
    e668:	00000265 	.word	0x00000265
