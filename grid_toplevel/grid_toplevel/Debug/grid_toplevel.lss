
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d4c0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000d4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          000037a0  200005c0  0000da80  000205bc  2**4
                  ALLOC
  5 .stack        00010000  20003d60  00011220  000205bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008cfdb  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bcd9  00000000  00000000  000ad61e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f78e  00000000  00000000  000b92f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002250  00000000  00000000  000e8a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000030a8  00000000  00000000  000eacd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000478e0  00000000  00000000  000edd7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003ea04  00000000  00000000  0013565d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a158  00000000  00000000  00174061  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000064d0  00000000  00000000  0028e1bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 3d 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     `=. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	c5 67 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .g..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 d1 63 00 00 e5 63 00 00     .........c...c..
      bc:	09 62 00 00 15 62 00 00 21 62 00 00 2d 62 00 00     .b...b..!b..-b..
      cc:	39 62 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     9b..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	f9 65 00 00 21 72 00 00 35 72 00 00 49 72 00 00     .e..!r..5r..Ir..
     104:	5d 72 00 00 71 72 00 00 85 72 00 00 99 72 00 00     ]r..qr...r...r..
     114:	ad 72 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .r..............
     124:	ed 02 00 00 c1 72 00 00 d5 72 00 00 e9 72 00 00     .....r...r...r..
     134:	fd 72 00 00 11 73 00 00 25 73 00 00 39 73 00 00     .r...s..%s..9s..
     144:	4d 73 00 00 61 73 00 00 75 73 00 00 89 73 00 00     Ms..as..us...s..
     154:	9d 73 00 00 b1 73 00 00 c5 73 00 00 d9 73 00 00     .s...s...s...s..
     164:	ed 73 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .s..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 fd 92 00 00     ................
     184:	09 93 00 00 15 93 00 00 21 93 00 00 00 00 00 00     ........!.......
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 11 80 00 00 25 80 00 00     ............%...
     1f4:	39 80 00 00 4d 80 00 00 ed 02 00 00 ed 02 00 00     9...M...........
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 9d 5e 00 00 b1 5e 00 00 c5 5e 00 00     .....^...^...^..
     224:	d9 5e 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .^..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000d4c0 	.word	0x0000d4c0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000d4c0 	.word	0x0000d4c0
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000d4c0 	.word	0x0000d4c0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000b175 	.word	0x0000b175
     2e8:	00009d6d 	.word	0x00009d6d

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000d4c0 	.word	0x0000d4c0
     36c:	200005bc 	.word	0x200005bc
     370:	20003d60 	.word	0x20003d60
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000b955 	.word	0x0000b955
     384:	00009961 	.word	0x00009961

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20001030 	.word	0x20001030
     40c:	2000112c 	.word	0x2000112c
     410:	43001c00 	.word	0x43001c00
     414:	000042a9 	.word	0x000042a9
     418:	0000434d 	.word	0x0000434d
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	20001204 	.word	0x20001204
     4b0:	20000fcc 	.word	0x20000fcc
     4b4:	43002000 	.word	0x43002000
     4b8:	000042a9 	.word	0x000042a9
     4bc:	0000434d 	.word	0x0000434d
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000fc8 	.word	0x20000fc8
     4e8:	000045e9 	.word	0x000045e9

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	0000466d 	.word	0x0000466d

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fac 	.word	0x20000fac
     54c:	0000468d 	.word	0x0000468d

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001270 	.word	0x20001270
     718:	00004839 	.word	0x00004839
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	2000105c 	.word	0x2000105c
     7bc:	00005119 	.word	0x00005119
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	200010b0 	.word	0x200010b0
     860:	00005119 	.word	0x00005119
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20001024 	.word	0x20001024
     8f8:	00005345 	.word	0x00005345
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f24 	.word	0x20000f24
     a04:	00004a29 	.word	0x00004a29
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	20001164 	.word	0x20001164
     aa8:	00005119 	.word	0x00005119
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20000fe4 	.word	0x20000fe4
     b54:	0000476d 	.word	0x0000476d
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	200011b4 	.word	0x200011b4
     bf8:	00005119 	.word	0x00005119
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001100 	.word	0x20001100
     cfc:	00004c8d 	.word	0x00004c8d
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00004619 	.word	0x00004619

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	0000560d 	.word	0x0000560d
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000cb78 	.word	0x0000cb78
     e14:	00005959 	.word	0x00005959
     e18:	200010ac 	.word	0x200010ac
     e1c:	40002000 	.word	0x40002000
     e20:	0000932d 	.word	0x0000932d

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00005f1d 	.word	0x00005f1d
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	000067bd 	.word	0x000067bd
    1100:	40002400 	.word	0x40002400
    1104:	20000f6c 	.word	0x20000f6c
    1108:	00004e35 	.word	0x00004e35
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	00008009 	.word	0x00008009
    1134:	40003800 	.word	0x40003800
    1138:	20001250 	.word	0x20001250
    113c:	40003c00 	.word	0x40003c00
    1140:	20001144 	.word	0x20001144
    1144:	4101a000 	.word	0x4101a000
    1148:	20000f8c 	.word	0x20000f8c
    114c:	4101c000 	.word	0x4101c000
    1150:	20001230 	.word	0x20001230
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4604      	mov	r4, r0
    1164:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1166:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1168:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    116a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    116c:	2300      	movs	r3, #0
    116e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1170:	0048      	lsls	r0, r1, #1
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <grid_ain_channel_init+0x38>)
    1174:	4798      	blx	r3
    1176:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1178:	b14d      	cbz	r5, 118e <grid_ain_channel_init+0x2e>
    117a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    117c:	4619      	mov	r1, r3
    117e:	6822      	ldr	r2, [r4, #0]
    1180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	7922      	ldrb	r2, [r4, #4]
    118a:	429a      	cmp	r2, r3
    118c:	d8f7      	bhi.n	117e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    118e:	2000      	movs	r0, #0
    1190:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    1192:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	bf00      	nop
    1198:	0000b99d 	.word	0x0000b99d

0000119c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11a0:	4605      	mov	r5, r0
    11a2:	4689      	mov	r9, r1
    11a4:	4617      	mov	r7, r2
    11a6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11a8:	0100      	lsls	r0, r0, #4
    11aa:	4b0c      	ldr	r3, [pc, #48]	; (11dc <grid_ain_init+0x40>)
    11ac:	4798      	blx	r3
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <grid_ain_init+0x44>)
    11b0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11b2:	b185      	cbz	r5, 11d6 <grid_ain_init+0x3a>
    11b4:	3d01      	subs	r5, #1
    11b6:	b2ed      	uxtb	r5, r5
    11b8:	3501      	adds	r5, #1
    11ba:	012d      	lsls	r5, r5, #4
    11bc:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11be:	469a      	mov	sl, r3
    11c0:	4e08      	ldr	r6, [pc, #32]	; (11e4 <grid_ain_init+0x48>)
    11c2:	4643      	mov	r3, r8
    11c4:	463a      	mov	r2, r7
    11c6:	4649      	mov	r1, r9
    11c8:	f8da 0000 	ldr.w	r0, [sl]
    11cc:	4420      	add	r0, r4
    11ce:	47b0      	blx	r6
    11d0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    11d2:	42ac      	cmp	r4, r5
    11d4:	d1f5      	bne.n	11c2 <grid_ain_init+0x26>
	}

	return 0;
}
    11d6:	2000      	movs	r0, #0
    11d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11dc:	0000b99d 	.word	0x0000b99d
    11e0:	200017bc 	.word	0x200017bc
    11e4:	00001161 	.word	0x00001161

000011e8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    11e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    11ec:	0100      	lsls	r0, r0, #4
    11ee:	4b3c      	ldr	r3, [pc, #240]	; (12e0 <grid_ain_add_sample+0xf8>)
    11f0:	f8d3 a000 	ldr.w	sl, [r3]
    11f4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    11f8:	f89c 6004 	ldrb.w	r6, [ip, #4]
    11fc:	2e00      	cmp	r6, #0
    11fe:	d05b      	beq.n	12b8 <grid_ain_add_sample+0xd0>
    1200:	f85a 5000 	ldr.w	r5, [sl, r0]
    1204:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1206:	2200      	movs	r2, #0
    1208:	4690      	mov	r8, r2
    120a:	4691      	mov	r9, r2
    120c:	4696      	mov	lr, r2
    120e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1212:	4614      	mov	r4, r2
    1214:	fa5f fb82 	uxtb.w	fp, r2
    1218:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    121c:	441c      	add	r4, r3
		
		if (current > maximum){
    121e:	4573      	cmp	r3, lr
    1220:	bf84      	itt	hi
    1222:	46d8      	movhi	r8, fp
			maximum = current;
    1224:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1226:	42bb      	cmp	r3, r7
    1228:	bf3c      	itt	cc
    122a:	46d9      	movcc	r9, fp
			minimum = current;
    122c:	461f      	movcc	r7, r3
    122e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1230:	b2d3      	uxtb	r3, r2
    1232:	42b3      	cmp	r3, r6
    1234:	d3ee      	bcc.n	1214 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1236:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    123a:	b2b6      	uxth	r6, r6
    123c:	428e      	cmp	r6, r1
    123e:	d23f      	bcs.n	12c0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1240:	f85a 3000 	ldr.w	r3, [sl, r0]
    1244:	440c      	add	r4, r1
    1246:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    124a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    124c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1250:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1254:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1258:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    125c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1260:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1262:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1266:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1268:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    126a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    126c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1270:	b29b      	uxth	r3, r3
    1272:	408b      	lsls	r3, r1
    1274:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1276:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    127a:	1b92      	subs	r2, r2, r6
    127c:	2a00      	cmp	r2, #0
    127e:	bfb8      	it	lt
    1280:	4252      	neglt	r2, r2
    1282:	2601      	movs	r6, #1
    1284:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1288:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    128c:	42be      	cmp	r6, r7
    128e:	d020      	beq.n	12d2 <grid_ain_add_sample+0xea>
    1290:	4282      	cmp	r2, r0
    1292:	dc08      	bgt.n	12a6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1294:	2201      	movs	r2, #1
    1296:	fa02 f505 	lsl.w	r5, r2, r5
    129a:	fa02 f101 	lsl.w	r1, r2, r1
    129e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12a0:	428f      	cmp	r7, r1
    12a2:	d000      	beq.n	12a6 <grid_ain_add_sample+0xbe>
    12a4:	b9c7      	cbnz	r7, 12d8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12a6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12aa:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12ae:	2001      	movs	r0, #1
    12b0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12b8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12ba:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12bc:	2400      	movs	r4, #0
    12be:	e7ba      	b.n	1236 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    12c0:	f85a 3000 	ldr.w	r3, [sl, r0]
    12c4:	440c      	add	r4, r1
    12c6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    12ca:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    12cc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    12d0:	e7be      	b.n	1250 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    12d2:	2000      	movs	r0, #0
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	2000      	movs	r0, #0
	}
	
}
    12da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12de:	bf00      	nop
    12e0:	200017bc 	.word	0x200017bc

000012e4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    12e4:	4b02      	ldr	r3, [pc, #8]	; (12f0 <grid_ain_get_changed+0xc>)
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    12ec:	7b00      	ldrb	r0, [r0, #12]
    12ee:	4770      	bx	lr
    12f0:	200017bc 	.word	0x200017bc

000012f4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <grid_ain_get_average+0x28>)
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    12fc:	2300      	movs	r3, #0
    12fe:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1300:	1fcb      	subs	r3, r1, #7
    1302:	b2db      	uxtb	r3, r3
    1304:	2b07      	cmp	r3, #7
    1306:	d806      	bhi.n	1316 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1308:	8903      	ldrh	r3, [r0, #8]
    130a:	7940      	ldrb	r0, [r0, #5]
    130c:	1a40      	subs	r0, r0, r1
    130e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1312:	b280      	uxth	r0, r0
    1314:	4770      	bx	lr
    1316:	2000      	movs	r0, #0
    1318:	e7fb      	b.n	1312 <grid_ain_get_average+0x1e>
    131a:	bf00      	nop
    131c:	200017bc 	.word	0x200017bc

00001320 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4604      	mov	r4, r0
    1324:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1326:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1328:	2300      	movs	r3, #0
    132a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    132c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    132e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1330:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1332:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1334:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1336:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1338:	4608      	mov	r0, r1
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <grid_buffer_init+0x3c>)
    133c:	4798      	blx	r3
    133e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1340:	b900      	cbnz	r0, 1344 <grid_buffer_init+0x24>
    1342:	e7fe      	b.n	1342 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1344:	b145      	cbz	r5, 1358 <grid_buffer_init+0x38>
    1346:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1348:	4619      	mov	r1, r3
    134a:	6862      	ldr	r2, [r4, #4]
    134c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    134e:	3301      	adds	r3, #1
    1350:	b29b      	uxth	r3, r3
    1352:	8822      	ldrh	r2, [r4, #0]
    1354:	429a      	cmp	r2, r3
    1356:	d8f8      	bhi.n	134a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1358:	2001      	movs	r0, #1
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	0000b99d 	.word	0x0000b99d

00001360 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1360:	8903      	ldrh	r3, [r0, #8]
    1362:	8a02      	ldrh	r2, [r0, #16]
    1364:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1366:	bf8f      	iteee	hi
    1368:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    136a:	8800      	ldrhls	r0, [r0, #0]
    136c:	18c0      	addls	r0, r0, r3
    136e:	1a80      	subls	r0, r0, r2
    1370:	b280      	uxth	r0, r0

	return space;

	
	
}
    1372:	4770      	bx	lr

00001374 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    1374:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1376:	8903      	ldrh	r3, [r0, #8]
    1378:	8a02      	ldrh	r2, [r0, #16]
    137a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    137c:	bf9c      	itt	ls
    137e:	8804      	ldrhls	r4, [r0, #0]
    1380:	191b      	addls	r3, r3, r4
    1382:	1a9b      	subs	r3, r3, r2
    1384:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    1386:	428b      	cmp	r3, r1
    1388:	d90a      	bls.n	13a0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    138a:	440a      	add	r2, r1
    138c:	8804      	ldrh	r4, [r0, #0]
    138e:	fb92 f3f4 	sdiv	r3, r2, r4
    1392:	fb04 2213 	mls	r2, r4, r3, r2
    1396:	8242      	strh	r2, [r0, #18]
		
		return length;
    1398:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    139a:	f85d 4b04 	ldr.w	r4, [sp], #4
    139e:	4770      	bx	lr
		return 0; // failed
    13a0:	2000      	movs	r0, #0
    13a2:	e7fa      	b.n	139a <grid_buffer_write_init+0x26>

000013a4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    13a4:	8a83      	ldrh	r3, [r0, #20]
    13a6:	6842      	ldr	r2, [r0, #4]
    13a8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    13aa:	8a83      	ldrh	r3, [r0, #20]
    13ac:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    13ae:	b29b      	uxth	r3, r3
    13b0:	8801      	ldrh	r1, [r0, #0]
    13b2:	fbb3 f2f1 	udiv	r2, r3, r1
    13b6:	fb01 3312 	mls	r3, r1, r2, r3
    13ba:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    13bc:	2001      	movs	r0, #1
    13be:	4770      	bx	lr

000013c0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    13c0:	8a83      	ldrh	r3, [r0, #20]
    13c2:	8a42      	ldrh	r2, [r0, #18]
    13c4:	429a      	cmp	r2, r3
    13c6:	d000      	beq.n	13ca <grid_buffer_write_acknowledge+0xa>
    13c8:	e7fe      	b.n	13c8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    13ca:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    13cc:	2001      	movs	r0, #1
    13ce:	4770      	bx	lr

000013d0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    13d0:	8983      	ldrh	r3, [r0, #12]
    13d2:	8942      	ldrh	r2, [r0, #10]
    13d4:	429a      	cmp	r2, r3
    13d6:	d000      	beq.n	13da <grid_buffer_read_size+0xa>
    13d8:	e7fe      	b.n	13d8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    13da:	8902      	ldrh	r2, [r0, #8]
    13dc:	429a      	cmp	r2, r3
    13de:	d000      	beq.n	13e2 <grid_buffer_read_size+0x12>
    13e0:	e7fe      	b.n	13e0 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    13e2:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    13e4:	8a05      	ldrh	r5, [r0, #16]
    13e6:	42ab      	cmp	r3, r5
    13e8:	d025      	beq.n	1436 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    13ea:	8804      	ldrh	r4, [r0, #0]
    13ec:	b1fc      	cbz	r4, 142e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    13ee:	4626      	mov	r6, r4
    13f0:	fb93 f2f4 	sdiv	r2, r3, r4
    13f4:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    13f8:	b291      	uxth	r1, r2
    13fa:	428d      	cmp	r5, r1
    13fc:	d01d      	beq.n	143a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    13fe:	6840      	ldr	r0, [r0, #4]
    1400:	5c42      	ldrb	r2, [r0, r1]
    1402:	2a0a      	cmp	r2, #10
    1404:	d114      	bne.n	1430 <grid_buffer_read_size+0x60>
    1406:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1408:	3301      	adds	r3, #1
    140a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    140c:	bcf0      	pop	{r4, r5, r6, r7}
    140e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1410:	fb92 f1f6 	sdiv	r1, r2, r6
    1414:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1418:	b28f      	uxth	r7, r1
    141a:	42bd      	cmp	r5, r7
    141c:	d00f      	beq.n	143e <grid_buffer_read_size+0x6e>
    141e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1420:	5dc1      	ldrb	r1, [r0, r7]
    1422:	290a      	cmp	r1, #10
    1424:	d0f0      	beq.n	1408 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1426:	3301      	adds	r3, #1
    1428:	b29b      	uxth	r3, r3
    142a:	42a3      	cmp	r3, r4
    142c:	d1f0      	bne.n	1410 <grid_buffer_read_size+0x40>
    142e:	e7fe      	b.n	142e <grid_buffer_read_size+0x5e>
    1430:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1432:	2300      	movs	r3, #0
    1434:	e7f7      	b.n	1426 <grid_buffer_read_size+0x56>
		return 0;
    1436:	2000      	movs	r0, #0
    1438:	e7e8      	b.n	140c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    143a:	2000      	movs	r0, #0
    143c:	e7e6      	b.n	140c <grid_buffer_read_size+0x3c>
    143e:	2000      	movs	r0, #0
    1440:	e7e4      	b.n	140c <grid_buffer_read_size+0x3c>

00001442 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1442:	8982      	ldrh	r2, [r0, #12]
    1444:	8943      	ldrh	r3, [r0, #10]
    1446:	4293      	cmp	r3, r2
    1448:	d000      	beq.n	144c <grid_buffer_read_init+0xa>
    144a:	e7fe      	b.n	144a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    144c:	8903      	ldrh	r3, [r0, #8]
    144e:	4293      	cmp	r3, r2
    1450:	d000      	beq.n	1454 <grid_buffer_read_init+0x12>
    1452:	e7fe      	b.n	1452 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1456:	8a05      	ldrh	r5, [r0, #16]
    1458:	42aa      	cmp	r2, r5
    145a:	d031      	beq.n	14c0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    145c:	8804      	ldrh	r4, [r0, #0]
    145e:	b35c      	cbz	r4, 14b8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1460:	4626      	mov	r6, r4
    1462:	fb92 f3f4 	sdiv	r3, r2, r4
    1466:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    146a:	b299      	uxth	r1, r3
    146c:	428d      	cmp	r5, r1
    146e:	d029      	beq.n	14c4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1470:	6847      	ldr	r7, [r0, #4]
    1472:	460b      	mov	r3, r1
    1474:	5c79      	ldrb	r1, [r7, r1]
    1476:	290a      	cmp	r1, #10
    1478:	d11f      	bne.n	14ba <grid_buffer_read_init+0x78>
    147a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    147c:	3301      	adds	r3, #1
    147e:	fb93 f2f4 	sdiv	r2, r3, r4
    1482:	fb04 3312 	mls	r3, r4, r2, r3
    1486:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1488:	1c4b      	adds	r3, r1, #1
    148a:	b29b      	uxth	r3, r3
    148c:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    148e:	4618      	mov	r0, r3
    1490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1492:	fb92 f3f6 	sdiv	r3, r2, r6
    1496:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    149a:	fa1f fe83 	uxth.w	lr, r3
    149e:	4575      	cmp	r5, lr
    14a0:	d012      	beq.n	14c8 <grid_buffer_read_init+0x86>
    14a2:	4673      	mov	r3, lr
    14a4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14a6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    14aa:	f1be 0f0a 	cmp.w	lr, #10
    14ae:	d0e5      	beq.n	147c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    14b0:	3101      	adds	r1, #1
    14b2:	b289      	uxth	r1, r1
    14b4:	42a1      	cmp	r1, r4
    14b6:	d1ec      	bne.n	1492 <grid_buffer_read_init+0x50>
    14b8:	e7fe      	b.n	14b8 <grid_buffer_read_init+0x76>
    14ba:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14bc:	2100      	movs	r1, #0
    14be:	e7f7      	b.n	14b0 <grid_buffer_read_init+0x6e>
		return 0;
    14c0:	2300      	movs	r3, #0
    14c2:	e7e4      	b.n	148e <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    14c4:	2300      	movs	r3, #0
    14c6:	e7e2      	b.n	148e <grid_buffer_read_init+0x4c>
    14c8:	2300      	movs	r3, #0
    14ca:	e7e0      	b.n	148e <grid_buffer_read_init+0x4c>

000014cc <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    14cc:	8983      	ldrh	r3, [r0, #12]
    14ce:	8941      	ldrh	r1, [r0, #10]
    14d0:	4299      	cmp	r1, r3
    14d2:	d00e      	beq.n	14f2 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    14d4:	b410      	push	{r4}
    14d6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    14d8:	6841      	ldr	r1, [r0, #4]
    14da:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    14dc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    14de:	b29b      	uxth	r3, r3
    14e0:	8814      	ldrh	r4, [r2, #0]
    14e2:	fbb3 f1f4 	udiv	r1, r3, r4
    14e6:	fb04 3311 	mls	r3, r4, r1, r3
    14ea:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    14ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    14f0:	4770      	bx	lr
    14f2:	e7fe      	b.n	14f2 <grid_buffer_read_character+0x26>

000014f4 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    14f4:	8983      	ldrh	r3, [r0, #12]
    14f6:	8942      	ldrh	r2, [r0, #10]
    14f8:	429a      	cmp	r2, r3
    14fa:	d000      	beq.n	14fe <grid_buffer_read_acknowledge+0xa>
    14fc:	e7fe      	b.n	14fc <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    14fe:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1500:	2001      	movs	r0, #1
    1502:	4770      	bx	lr

00001504 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    1504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1508:	4604      	mov	r4, r0
    150a:	4690      	mov	r8, r2
    150c:	461f      	mov	r7, r3
    150e:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1512:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1516:	4e33      	ldr	r6, [pc, #204]	; (15e4 <grid_port_init+0xe0>)
    1518:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    151a:	4641      	mov	r1, r8
    151c:	f504 609e 	add.w	r0, r4, #1264	; 0x4f0
    1520:	47b0      	blx	r6
	
	por->cooldown = 0;
    1522:	2300      	movs	r3, #0
    1524:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1526:	f89d 2020 	ldrb.w	r2, [sp, #32]
    152a:	72a2      	strb	r2, [r4, #10]
	
	por->direction = dir;
    152c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1530:	7262      	strb	r2, [r4, #9]
	
	por->usart	= usart;
    1532:	6067      	str	r7, [r4, #4]
	por->type		= type;
    1534:	7225      	strb	r5, [r4, #8]
	
	por->tx_double_buffer_status	= 0;
    1536:	81a3      	strh	r3, [r4, #12]
	por->rx_double_buffer_status	= 0;
    1538:	61e3      	str	r3, [r4, #28]
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    153a:	4619      	mov	r1, r3
    153c:	18e2      	adds	r2, r4, r3
    153e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1542:	3301      	adds	r3, #1
    1544:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1548:	d1f8      	bne.n	153c <grid_port_init+0x38>
    154a:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    154c:	4619      	mov	r1, r3
    154e:	18e2      	adds	r2, r4, r3
    1550:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1554:	3301      	adds	r3, #1
    1556:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    155a:	d1f8      	bne.n	154e <grid_port_init+0x4a>
	}
	
	por->partner_fi = 0;
    155c:	2300      	movs	r3, #0
    155e:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
	
	por->partner_hwcfg = 0;
    1562:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	por->partner_status = 1;
    1566:	2301      	movs	r3, #1
    1568:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    156c:	429d      	cmp	r5, r3
    156e:	d004      	beq.n	157a <grid_port_init+0x76>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1570:	2301      	movs	r3, #1
    1572:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
    1576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    157a:	2300      	movs	r3, #0
    157c:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
		por->partner_fi = 0;
    1580:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
		if (por->direction == GRID_MSG_NORTH){
    1584:	7a63      	ldrb	r3, [r4, #9]
    1586:	b2db      	uxtb	r3, r3
    1588:	2b11      	cmp	r3, #17
    158a:	d013      	beq.n	15b4 <grid_port_init+0xb0>
		else if (por->direction == GRID_MSG_EAST){
    158c:	7a63      	ldrb	r3, [r4, #9]
    158e:	b2db      	uxtb	r3, r3
    1590:	2b12      	cmp	r3, #18
    1592:	d017      	beq.n	15c4 <grid_port_init+0xc0>
		else if (por->direction == GRID_MSG_SOUTH){
    1594:	7a63      	ldrb	r3, [r4, #9]
    1596:	b2db      	uxtb	r3, r3
    1598:	2b13      	cmp	r3, #19
    159a:	d01b      	beq.n	15d4 <grid_port_init+0xd0>
		else if (por->direction == GRID_MSG_WEST){
    159c:	7a63      	ldrb	r3, [r4, #9]
    159e:	b2db      	uxtb	r3, r3
    15a0:	2b14      	cmp	r3, #20
    15a2:	d1e8      	bne.n	1576 <grid_port_init+0x72>
			por->dx = -1;
    15a4:	23ff      	movs	r3, #255	; 0xff
    15a6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    15aa:	2300      	movs	r3, #0
    15ac:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15b4:	2300      	movs	r3, #0
    15b6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 1;
    15ba:	2301      	movs	r3, #1
    15bc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    15c4:	2301      	movs	r3, #1
    15c6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    15ca:	2300      	movs	r3, #0
    15cc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15d4:	2300      	movs	r3, #0
    15d6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = -1;
    15da:	23ff      	movs	r3, #255	; 0xff
    15dc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15e4:	00001321 	.word	0x00001321

000015e8 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    15e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15ec:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    15ee:	2600      	movs	r6, #0
    15f0:	9602      	str	r6, [sp, #8]
    15f2:	2311      	movs	r3, #17
    15f4:	9301      	str	r3, [sp, #4]
    15f6:	2401      	movs	r4, #1
    15f8:	9400      	str	r4, [sp, #0]
    15fa:	4b25      	ldr	r3, [pc, #148]	; (1690 <grid_port_init_all+0xa8>)
    15fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1600:	4611      	mov	r1, r2
    1602:	4824      	ldr	r0, [pc, #144]	; (1694 <grid_port_init_all+0xac>)
    1604:	4d24      	ldr	r5, [pc, #144]	; (1698 <grid_port_init_all+0xb0>)
    1606:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1608:	9402      	str	r4, [sp, #8]
    160a:	2312      	movs	r3, #18
    160c:	9301      	str	r3, [sp, #4]
    160e:	9400      	str	r4, [sp, #0]
    1610:	4b22      	ldr	r3, [pc, #136]	; (169c <grid_port_init_all+0xb4>)
    1612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1616:	4611      	mov	r1, r2
    1618:	4821      	ldr	r0, [pc, #132]	; (16a0 <grid_port_init_all+0xb8>)
    161a:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    161c:	f04f 0902 	mov.w	r9, #2
    1620:	f8cd 9008 	str.w	r9, [sp, #8]
    1624:	2313      	movs	r3, #19
    1626:	9301      	str	r3, [sp, #4]
    1628:	9400      	str	r4, [sp, #0]
    162a:	4b1e      	ldr	r3, [pc, #120]	; (16a4 <grid_port_init_all+0xbc>)
    162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1630:	4611      	mov	r1, r2
    1632:	481d      	ldr	r0, [pc, #116]	; (16a8 <grid_port_init_all+0xc0>)
    1634:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    1636:	2703      	movs	r7, #3
    1638:	9702      	str	r7, [sp, #8]
    163a:	2314      	movs	r3, #20
    163c:	9301      	str	r3, [sp, #4]
    163e:	9400      	str	r4, [sp, #0]
    1640:	4b1a      	ldr	r3, [pc, #104]	; (16ac <grid_port_init_all+0xc4>)
    1642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1646:	4611      	mov	r1, r2
    1648:	4819      	ldr	r0, [pc, #100]	; (16b0 <grid_port_init_all+0xc8>)
    164a:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1);
    164c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 16b8 <grid_port_init_all+0xd0>
    1650:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1654:	f8cd a008 	str.w	sl, [sp, #8]
    1658:	9601      	str	r6, [sp, #4]
    165a:	9700      	str	r7, [sp, #0]
    165c:	4633      	mov	r3, r6
    165e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1662:	4611      	mov	r1, r2
    1664:	4640      	mov	r0, r8
    1666:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    1668:	4f12      	ldr	r7, [pc, #72]	; (16b4 <grid_port_init_all+0xcc>)
    166a:	f8cd a008 	str.w	sl, [sp, #8]
    166e:	9601      	str	r6, [sp, #4]
    1670:	f8cd 9000 	str.w	r9, [sp]
    1674:	4633      	mov	r3, r6
    1676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    167a:	4611      	mov	r1, r2
    167c:	4638      	mov	r0, r7
    167e:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    1680:	f888 450f 	strb.w	r4, [r8, #1295]	; 0x50f
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    1684:	f887 450f 	strb.w	r4, [r7, #1295]	; 0x50f
	
	
}
    1688:	b004      	add	sp, #16
    168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    168e:	bf00      	nop
    1690:	200010b0 	.word	0x200010b0
    1694:	20001284 	.word	0x20001284
    1698:	00001505 	.word	0x00001505
    169c:	2000105c 	.word	0x2000105c
    16a0:	200030e8 	.word	0x200030e8
    16a4:	200011b4 	.word	0x200011b4
    16a8:	200026c4 	.word	0x200026c4
    16ac:	20001164 	.word	0x20001164
    16b0:	200021a0 	.word	0x200021a0
    16b4:	20002bd8 	.word	0x20002bd8
    16b8:	200017d4 	.word	0x200017d4

000016bc <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por){
    16bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c0:	b091      	sub	sp, #68	; 0x44
    16c2:	af02      	add	r7, sp, #8
    16c4:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    16c6:	f500 699e 	add.w	r9, r0, #1264	; 0x4f0
    16ca:	4648      	mov	r0, r9
    16cc:	4b54      	ldr	r3, [pc, #336]	; (1820 <grid_port_process_inbound+0x164>)
    16ce:	4798      	blx	r3
	
	if (!packet_size){
    16d0:	b920      	cbnz	r0, 16dc <grid_port_process_inbound+0x20>
    16d2:	2000      	movs	r0, #0
		}	

		
	}
		
}
    16d4:	373c      	adds	r7, #60	; 0x3c
    16d6:	46bd      	mov	sp, r7
    16d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16dc:	4680      	mov	r8, r0
	}else{
    16de:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    16e2:	4b50      	ldr	r3, [pc, #320]	; (1824 <grid_port_process_inbound+0x168>)
    16e4:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    16e6:	4b50      	ldr	r3, [pc, #320]	; (1828 <grid_port_process_inbound+0x16c>)
    16e8:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    16ea:	4b50      	ldr	r3, [pc, #320]	; (182c <grid_port_process_inbound+0x170>)
    16ec:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    16ee:	4b50      	ldr	r3, [pc, #320]	; (1830 <grid_port_process_inbound+0x174>)
    16f0:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    16f2:	4b50      	ldr	r3, [pc, #320]	; (1834 <grid_port_process_inbound+0x178>)
    16f4:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    16f6:	4b50      	ldr	r3, [pc, #320]	; (1838 <grid_port_process_inbound+0x17c>)
    16f8:	61fb      	str	r3, [r7, #28]
    16fa:	f107 0308 	add.w	r3, r7, #8
    16fe:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    1702:	2600      	movs	r6, #0
    1704:	e001      	b.n	170a <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    1706:	428b      	cmp	r3, r1
    1708:	d00e      	beq.n	1728 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    170a:	f853 2b04 	ldr.w	r2, [r3], #4
    170e:	f892 050f 	ldrb.w	r0, [r2, #1295]	; 0x50f
    1712:	2800      	cmp	r0, #0
    1714:	d0f7      	beq.n	1706 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    1716:	f107 0038 	add.w	r0, r7, #56	; 0x38
    171a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    171e:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    1722:	3601      	adds	r6, #1
    1724:	b2f6      	uxtb	r6, r6
    1726:	e7ee      	b.n	1706 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    1728:	2e00      	cmp	r6, #0
    172a:	d068      	beq.n	17fe <grid_port_process_inbound+0x142>
    172c:	f107 0a20 	add.w	sl, r7, #32
    1730:	1e74      	subs	r4, r6, #1
    1732:	b2e4      	uxtb	r4, r4
    1734:	3401      	adds	r4, #1
    1736:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    173a:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    173c:	f8df b118 	ldr.w	fp, [pc, #280]	; 1858 <grid_port_process_inbound+0x19c>
    1740:	e001      	b.n	1746 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    1742:	42a5      	cmp	r5, r4
    1744:	d016      	beq.n	1774 <grid_port_process_inbound+0xb8>
			if (port_array[i] != por){
    1746:	f855 0b04 	ldr.w	r0, [r5], #4
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	4283      	cmp	r3, r0
    174e:	d0f8      	beq.n	1742 <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    1750:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1754:	47d8      	blx	fp
    1756:	4580      	cmp	r8, r0
    1758:	d9f3      	bls.n	1742 <grid_port_process_inbound+0x86>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    175a:	23c8      	movs	r3, #200	; 0xc8
    175c:	9301      	str	r3, [sp, #4]
    175e:	2302      	movs	r3, #2
    1760:	9300      	str	r3, [sp, #0]
    1762:	2300      	movs	r3, #0
    1764:	2264      	movs	r2, #100	; 0x64
    1766:	4611      	mov	r1, r2
    1768:	4834      	ldr	r0, [pc, #208]	; (183c <grid_port_process_inbound+0x180>)
    176a:	4c35      	ldr	r4, [pc, #212]	; (1840 <grid_port_process_inbound+0x184>)
    176c:	47a0      	blx	r4
    176e:	f8d7 d000 	ldr.w	sp, [r7]
    1772:	e7ae      	b.n	16d2 <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1774:	4648      	mov	r0, r9
    1776:	4b33      	ldr	r3, [pc, #204]	; (1844 <grid_port_process_inbound+0x188>)
    1778:	4798      	blx	r3
    177a:	4580      	cmp	r8, r0
    177c:	d000      	beq.n	1780 <grid_port_process_inbound+0xc4>
    177e:	e7fe      	b.n	177e <grid_port_process_inbound+0xc2>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1780:	4c31      	ldr	r4, [pc, #196]	; (1848 <grid_port_process_inbound+0x18c>)
    1782:	e001      	b.n	1788 <grid_port_process_inbound+0xcc>
		for (uint8_t i=0; i<port_count; i++)
    1784:	45aa      	cmp	sl, r5
    1786:	d03f      	beq.n	1808 <grid_port_process_inbound+0x14c>
			if (port_array[i] != por){
    1788:	f85a 0b04 	ldr.w	r0, [sl], #4
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	4283      	cmp	r3, r0
    1790:	d0f8      	beq.n	1784 <grid_port_process_inbound+0xc8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1792:	4641      	mov	r1, r8
    1794:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1798:	47a0      	blx	r4
    179a:	e7f3      	b.n	1784 <grid_port_process_inbound+0xc8>
			for (uint8_t i=0; i<port_count; i++){
    179c:	42a5      	cmp	r5, r4
    179e:	d009      	beq.n	17b4 <grid_port_process_inbound+0xf8>
				if (port_array[i] != por){
    17a0:	f854 0b04 	ldr.w	r0, [r4], #4
    17a4:	687b      	ldr	r3, [r7, #4]
    17a6:	4283      	cmp	r3, r0
    17a8:	d0f8      	beq.n	179c <grid_port_process_inbound+0xe0>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    17aa:	6839      	ldr	r1, [r7, #0]
    17ac:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    17b0:	47d8      	blx	fp
    17b2:	e7f3      	b.n	179c <grid_port_process_inbound+0xe0>
    17b4:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    17b8:	fa1f f38a 	uxth.w	r3, sl
    17bc:	4543      	cmp	r3, r8
    17be:	d208      	bcs.n	17d2 <grid_port_process_inbound+0x116>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    17c0:	4648      	mov	r0, r9
    17c2:	4b22      	ldr	r3, [pc, #136]	; (184c <grid_port_process_inbound+0x190>)
    17c4:	4798      	blx	r3
    17c6:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    17c8:	2e00      	cmp	r6, #0
    17ca:	d0f3      	beq.n	17b4 <grid_port_process_inbound+0xf8>
    17cc:	f107 0420 	add.w	r4, r7, #32
    17d0:	e7e6      	b.n	17a0 <grid_port_process_inbound+0xe4>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    17d2:	4648      	mov	r0, r9
    17d4:	4b1e      	ldr	r3, [pc, #120]	; (1850 <grid_port_process_inbound+0x194>)
    17d6:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    17d8:	2e00      	cmp	r6, #0
    17da:	f43f af7b 	beq.w	16d4 <grid_port_process_inbound+0x18>
    17de:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    17e2:	4e1c      	ldr	r6, [pc, #112]	; (1854 <grid_port_process_inbound+0x198>)
    17e4:	e002      	b.n	17ec <grid_port_process_inbound+0x130>
		for (uint8_t i=0; i<port_count; i++)
    17e6:	42a5      	cmp	r5, r4
    17e8:	f43f af74 	beq.w	16d4 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    17ec:	f854 0b04 	ldr.w	r0, [r4], #4
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	4283      	cmp	r3, r0
    17f4:	d0f7      	beq.n	17e6 <grid_port_process_inbound+0x12a>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    17f6:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    17fa:	47b0      	blx	r6
    17fc:	e7f3      	b.n	17e6 <grid_port_process_inbound+0x12a>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    17fe:	4648      	mov	r0, r9
    1800:	4b10      	ldr	r3, [pc, #64]	; (1844 <grid_port_process_inbound+0x188>)
    1802:	4798      	blx	r3
    1804:	4540      	cmp	r0, r8
    1806:	d1ba      	bne.n	177e <grid_port_process_inbound+0xc2>
    1808:	1e75      	subs	r5, r6, #1
    180a:	b2ed      	uxtb	r5, r5
    180c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1810:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1814:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    1816:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    181a:	f8df b040 	ldr.w	fp, [pc, #64]	; 185c <grid_port_process_inbound+0x1a0>
    181e:	e7cf      	b.n	17c0 <grid_port_process_inbound+0x104>
    1820:	000013d1 	.word	0x000013d1
    1824:	20001284 	.word	0x20001284
    1828:	200030e8 	.word	0x200030e8
    182c:	200026c4 	.word	0x200026c4
    1830:	200021a0 	.word	0x200021a0
    1834:	200017d4 	.word	0x200017d4
    1838:	20002bd8 	.word	0x20002bd8
    183c:	20001cf0 	.word	0x20001cf0
    1840:	00003a8d 	.word	0x00003a8d
    1844:	00001443 	.word	0x00001443
    1848:	00001375 	.word	0x00001375
    184c:	000014cd 	.word	0x000014cd
    1850:	000014f5 	.word	0x000014f5
    1854:	000013c1 	.word	0x000013c1
    1858:	00001361 	.word	0x00001361
    185c:	000013a5 	.word	0x000013a5

00001860 <grid_port_process_outbound_usb>:

volatile uint8_t temp[500];

volatile uint8_t usb_debug[10];

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1864:	b09b      	sub	sp, #108	; 0x6c
    1866:	af06      	add	r7, sp, #24
    1868:	6438      	str	r0, [r7, #64]	; 0x40
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    186a:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    186e:	4630      	mov	r0, r6
    1870:	4b8f      	ldr	r3, [pc, #572]	; (1ab0 <grid_port_process_outbound_usb+0x250>)
    1872:	4798      	blx	r3
	
	if (!length){		
    1874:	b918      	cbnz	r0, 187e <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    1876:	3754      	adds	r7, #84	; 0x54
    1878:	46bd      	mov	sp, r7
    187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    187e:	4604      	mov	r4, r0
		grid_buffer_read_init(&por->tx_buffer);
    1880:	4630      	mov	r0, r6
    1882:	4b8c      	ldr	r3, [pc, #560]	; (1ab4 <grid_port_process_outbound_usb+0x254>)
    1884:	4798      	blx	r3
    1886:	2500      	movs	r5, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1888:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1af4 <grid_port_process_outbound_usb+0x294>
    188c:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1abc <grid_port_process_outbound_usb+0x25c>
    1890:	4630      	mov	r0, r6
    1892:	47c8      	blx	r9
    1894:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    1898:	3501      	adds	r5, #1
    189a:	b2ed      	uxtb	r5, r5
    189c:	b2ab      	uxth	r3, r5
    189e:	429c      	cmp	r4, r3
    18a0:	d8f6      	bhi.n	1890 <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    18a2:	4630      	mov	r0, r6
    18a4:	4b84      	ldr	r3, [pc, #528]	; (1ab8 <grid_port_process_outbound_usb+0x258>)
    18a6:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    18a8:	4d84      	ldr	r5, [pc, #528]	; (1abc <grid_port_process_outbound_usb+0x25c>)
    18aa:	4628      	mov	r0, r5
    18ac:	4b84      	ldr	r3, [pc, #528]	; (1ac0 <grid_port_process_outbound_usb+0x260>)
    18ae:	4798      	blx	r3
    18b0:	63b8      	str	r0, [r7, #56]	; 0x38
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    18b2:	4628      	mov	r0, r5
    18b4:	4b83      	ldr	r3, [pc, #524]	; (1ac4 <grid_port_process_outbound_usb+0x264>)
    18b6:	4798      	blx	r3
    18b8:	387f      	subs	r0, #127	; 0x7f
    18ba:	b243      	sxtb	r3, r0
    18bc:	461e      	mov	r6, r3
    18be:	617b      	str	r3, [r7, #20]
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    18c0:	4628      	mov	r0, r5
    18c2:	4b81      	ldr	r3, [pc, #516]	; (1ac8 <grid_port_process_outbound_usb+0x268>)
    18c4:	4798      	blx	r3
    18c6:	387f      	subs	r0, #127	; 0x7f
    18c8:	b243      	sxtb	r3, r0
    18ca:	61bb      	str	r3, [r7, #24]
		uint8_t age = grid_msg_get_age(temp);
    18cc:	4628      	mov	r0, r5
    18ce:	4b7f      	ldr	r3, [pc, #508]	; (1acc <grid_port_process_outbound_usb+0x26c>)
    18d0:	4798      	blx	r3
    18d2:	6378      	str	r0, [r7, #52]	; 0x34
		uint8_t error_flag = 0;
    18d4:	2500      	movs	r5, #0
    18d6:	f887 504f 	strb.w	r5, [r7, #79]	; 0x4f
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    18da:	69bb      	ldr	r3, [r7, #24]
    18dc:	633b      	str	r3, [r7, #48]	; 0x30
    18de:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    18e2:	009b      	lsls	r3, r3, #2
    18e4:	623b      	str	r3, [r7, #32]
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    18e6:	62fe      	str	r6, [r7, #44]	; 0x2c
    18e8:	0173      	lsls	r3, r6, #5
    18ea:	61fb      	str	r3, [r7, #28]
    18ec:	1e63      	subs	r3, r4, #1
    18ee:	b29b      	uxth	r3, r3
    18f0:	f103 0b01 	add.w	fp, r3, #1
    18f4:	46aa      	mov	sl, r5
    18f6:	647d      	str	r5, [r7, #68]	; 0x44
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    18f8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1abc <grid_port_process_outbound_usb+0x25c>
    18fc:	e006      	b.n	190c <grid_port_process_outbound_usb+0xac>
				current_start = i;
    18fe:	fa5f f58a 	uxtb.w	r5, sl
    1902:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t i=0; i<length; i++){
    1906:	45da      	cmp	sl, fp
    1908:	f000 81ab 	beq.w	1c62 <grid_port_process_outbound_usb+0x402>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    190c:	f819 300a 	ldrb.w	r3, [r9, sl]
    1910:	b2db      	uxtb	r3, r3
    1912:	2b02      	cmp	r3, #2
    1914:	d0f3      	beq.n	18fe <grid_port_process_outbound_usb+0x9e>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1916:	f819 300a 	ldrb.w	r3, [r9, sl]
    191a:	b2db      	uxtb	r3, r3
    191c:	2b03      	cmp	r3, #3
    191e:	d1f0      	bne.n	1902 <grid_port_process_outbound_usb+0xa2>
    1920:	2d00      	cmp	r5, #0
    1922:	d0ee      	beq.n	1902 <grid_port_process_outbound_usb+0xa2>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    1924:	462c      	mov	r4, r5
    1926:	1c68      	adds	r0, r5, #1
    1928:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    192c:	2102      	movs	r1, #2
    192e:	4448      	add	r0, r9
    1930:	4b67      	ldr	r3, [pc, #412]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1932:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1934:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1938:	d01f      	beq.n	197a <grid_port_process_outbound_usb+0x11a>
				else if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    193a:	2e03      	cmp	r6, #3
    193c:	f000 8082 	beq.w	1a44 <grid_port_process_outbound_usb+0x1e4>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1940:	2e01      	cmp	r6, #1
    1942:	f000 80d9 	beq.w	1af8 <grid_port_process_outbound_usb+0x298>
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    1946:	2e04      	cmp	r6, #4
    1948:	f000 8160 	beq.w	1c0c <grid_port_process_outbound_usb+0x3ac>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    194c:	2e02      	cmp	r6, #2
    194e:	f000 8186 	beq.w	1c5e <grid_port_process_outbound_usb+0x3fe>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1952:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    1954:	f105 0428 	add.w	r4, r5, #40	; 0x28
    1958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    195a:	441c      	add	r4, r3
    195c:	b2c2      	uxtb	r2, r0
    195e:	495d      	ldr	r1, [pc, #372]	; (1ad4 <grid_port_process_outbound_usb+0x274>)
    1960:	4620      	mov	r0, r4
    1962:	4b5d      	ldr	r3, [pc, #372]	; (1ad8 <grid_port_process_outbound_usb+0x278>)
    1964:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1966:	4620      	mov	r0, r4
    1968:	4b5c      	ldr	r3, [pc, #368]	; (1adc <grid_port_process_outbound_usb+0x27c>)
    196a:	4798      	blx	r3
    196c:	eb05 0800 	add.w	r8, r5, r0
    1970:	fa5f f388 	uxtb.w	r3, r8
    1974:	647b      	str	r3, [r7, #68]	; 0x44
				current_start = 0;
    1976:	2500      	movs	r5, #0
    1978:	e7c3      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    197a:	1ce8      	adds	r0, r5, #3
    197c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1980:	2102      	movs	r1, #2
    1982:	4448      	add	r0, r9
    1984:	4b52      	ldr	r3, [pc, #328]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1986:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1988:	1d68      	adds	r0, r5, #5
    198a:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    198e:	2102      	movs	r1, #2
    1990:	4448      	add	r0, r9
    1992:	4b4f      	ldr	r3, [pc, #316]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1994:	4798      	blx	r3
    1996:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    199a:	1de8      	adds	r0, r5, #7
    199c:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    19a0:	2102      	movs	r1, #2
    19a2:	4448      	add	r0, r9
    19a4:	4b4a      	ldr	r3, [pc, #296]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    19a6:	4798      	blx	r3
    19a8:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    19aa:	f105 0009 	add.w	r0, r5, #9
    19ae:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    19b2:	2102      	movs	r1, #2
    19b4:	4448      	add	r0, r9
    19b6:	4b46      	ldr	r3, [pc, #280]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    19b8:	4798      	blx	r3
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    19ba:	4b49      	ldr	r3, [pc, #292]	; (1ae0 <grid_port_process_outbound_usb+0x280>)
    19bc:	7a59      	ldrb	r1, [r3, #9]
    19be:	6a3b      	ldr	r3, [r7, #32]
    19c0:	4419      	add	r1, r3
    19c2:	424b      	negs	r3, r1
    19c4:	f001 020f 	and.w	r2, r1, #15
    19c8:	f003 030f 	and.w	r3, r3, #15
    19cc:	bf58      	it	pl
    19ce:	425a      	negpl	r2, r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    19d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    19d2:	3328      	adds	r3, #40	; 0x28
    19d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
    19d6:	4419      	add	r1, r3
    19d8:	460d      	mov	r5, r1
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    19da:	b2e4      	uxtb	r4, r4
    19dc:	f504 7480 	add.w	r4, r4, #256	; 0x100
    19e0:	69fb      	ldr	r3, [r7, #28]
    19e2:	441c      	add	r4, r3
    19e4:	4263      	negs	r3, r4
    19e6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    19ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    19ee:	bf58      	it	pl
    19f0:	425c      	negpl	r4, r3
    19f2:	b2e4      	uxtb	r4, r4
    19f4:	b2c1      	uxtb	r1, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    19f6:	62b9      	str	r1, [r7, #40]	; 0x28
    19f8:	9105      	str	r1, [sp, #20]
    19fa:	9404      	str	r4, [sp, #16]
    19fc:	f8cd 800c 	str.w	r8, [sp, #12]
    1a00:	63fa      	str	r2, [r7, #60]	; 0x3c
    1a02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    1a06:	9302      	str	r3, [sp, #8]
    1a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
    1a0a:	9001      	str	r0, [sp, #4]
    1a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1a0e:	9000      	str	r0, [sp, #0]
    1a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1a14:	4933      	ldr	r1, [pc, #204]	; (1ae4 <grid_port_process_outbound_usb+0x284>)
    1a16:	627d      	str	r5, [r7, #36]	; 0x24
    1a18:	4628      	mov	r0, r5
    1a1a:	4d2f      	ldr	r5, [pc, #188]	; (1ad8 <grid_port_process_outbound_usb+0x278>)
    1a1c:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1a20:	4b2e      	ldr	r3, [pc, #184]	; (1adc <grid_port_process_outbound_usb+0x27c>)
    1a22:	4798      	blx	r3
    1a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1a26:	4410      	add	r0, r2
    1a28:	b2c2      	uxtb	r2, r0
    1a2a:	647a      	str	r2, [r7, #68]	; 0x44
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a2e:	ea48 0102 	orr.w	r1, r8, r2
    1a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a34:	4622      	mov	r2, r4
    1a36:	b2c9      	uxtb	r1, r1
    1a38:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1a3c:	4c2a      	ldr	r4, [pc, #168]	; (1ae8 <grid_port_process_outbound_usb+0x288>)
    1a3e:	47a0      	blx	r4
				current_start = 0;
    1a40:	4635      	mov	r5, r6
    1a42:	e75e      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					if (dx == 0 && dy == 0){
    1a44:	697b      	ldr	r3, [r7, #20]
    1a46:	2b00      	cmp	r3, #0
    1a48:	f040 8107 	bne.w	1c5a <grid_port_process_outbound_usb+0x3fa>
    1a4c:	69bb      	ldr	r3, [r7, #24]
    1a4e:	b10b      	cbz	r3, 1a54 <grid_port_process_outbound_usb+0x1f4>
				current_start = 0;
    1a50:	2500      	movs	r5, #0
    1a52:	e756      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1a54:	1ce8      	adds	r0, r5, #3
    1a56:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a5a:	2102      	movs	r1, #2
    1a5c:	4448      	add	r0, r9
    1a5e:	4b1c      	ldr	r3, [pc, #112]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a60:	4798      	blx	r3
    1a62:	4606      	mov	r6, r0
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1a64:	1d68      	adds	r0, r5, #5
    1a66:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a6a:	2102      	movs	r1, #2
    1a6c:	4448      	add	r0, r9
    1a6e:	4b18      	ldr	r3, [pc, #96]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a70:	4798      	blx	r3
    1a72:	4605      	mov	r5, r0
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1a74:	1de0      	adds	r0, r4, #7
    1a76:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a7a:	2102      	movs	r1, #2
    1a7c:	4448      	add	r0, r9
    1a7e:	4b14      	ldr	r3, [pc, #80]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a80:	4798      	blx	r3
    1a82:	4680      	mov	r8, r0
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1a84:	f104 0009 	add.w	r0, r4, #9
    1a88:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1a8c:	2102      	movs	r1, #2
    1a8e:	4448      	add	r0, r9
    1a90:	4b0f      	ldr	r3, [pc, #60]	; (1ad0 <grid_port_process_outbound_usb+0x270>)
    1a92:	4798      	blx	r3
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1a94:	b2ed      	uxtb	r5, r5
    1a96:	2d63      	cmp	r5, #99	; 0x63
    1a98:	d001      	beq.n	1a9e <grid_port_process_outbound_usb+0x23e>
				current_start = 0;
    1a9a:	2500      	movs	r5, #0
    1a9c:	e731      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1a9e:	b2c3      	uxtb	r3, r0
    1aa0:	b2f2      	uxtb	r2, r6
    1aa2:	fa5f f188 	uxtb.w	r1, r8
    1aa6:	4811      	ldr	r0, [pc, #68]	; (1aec <grid_port_process_outbound_usb+0x28c>)
    1aa8:	4c11      	ldr	r4, [pc, #68]	; (1af0 <grid_port_process_outbound_usb+0x290>)
    1aaa:	47a0      	blx	r4
				current_start = 0;
    1aac:	2500      	movs	r5, #0
    1aae:	e728      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1ab0:	000013d1 	.word	0x000013d1
    1ab4:	00001443 	.word	0x00001443
    1ab8:	000014f5 	.word	0x000014f5
    1abc:	2000362c 	.word	0x2000362c
    1ac0:	00003de9 	.word	0x00003de9
    1ac4:	00003e09 	.word	0x00003e09
    1ac8:	00003e29 	.word	0x00003e29
    1acc:	00003e49 	.word	0x00003e49
    1ad0:	00003ae1 	.word	0x00003ae1
    1ad4:	0000cc24 	.word	0x0000cc24
    1ad8:	0000bd81 	.word	0x0000bd81
    1adc:	0000bdc9 	.word	0x0000bdc9
    1ae0:	20001cf0 	.word	0x20001cf0
    1ae4:	0000cb94 	.word	0x0000cb94
    1ae8:	0000a7f5 	.word	0x0000a7f5
    1aec:	200035fc 	.word	0x200035fc
    1af0:	00001ee9 	.word	0x00001ee9
    1af4:	000014cd 	.word	0x000014cd
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1af8:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1afc:	fa5f f38a 	uxtb.w	r3, sl
    1b00:	1b5b      	subs	r3, r3, r5
    1b02:	3b03      	subs	r3, #3
    1b04:	4a5a      	ldr	r2, [pc, #360]	; (1c70 <grid_port_process_outbound_usb+0x410>)
    1b06:	fb82 1203 	smull	r1, r2, r2, r3
    1b0a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	4619      	mov	r1, r3
    1b12:	613b      	str	r3, [r7, #16]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1b14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b18:	3307      	adds	r3, #7
    1b1a:	f023 0307 	bic.w	r3, r3, #7
    1b1e:	ebad 0d03 	sub.w	sp, sp, r3
    1b22:	ab06      	add	r3, sp, #24
    1b24:	461e      	mov	r6, r3
    1b26:	60fb      	str	r3, [r7, #12]
					for(uint8_t j=0; j<key_array_length; j++){
    1b28:	2900      	cmp	r1, #0
    1b2a:	d064      	beq.n	1bf6 <grid_port_process_outbound_usb+0x396>
    1b2c:	3403      	adds	r4, #3
    1b2e:	eb04 0809 	add.w	r8, r4, r9
    1b32:	1e4b      	subs	r3, r1, #1
    1b34:	b2db      	uxtb	r3, r3
    1b36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b3a:	3509      	adds	r5, #9
    1b3c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1b40:	444b      	add	r3, r9
    1b42:	62bb      	str	r3, [r7, #40]	; 0x28
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b44:	63fe      	str	r6, [r7, #60]	; 0x3c
    1b46:	f8c7 a008 	str.w	sl, [r7, #8]
    1b4a:	f8c7 b004 	str.w	fp, [r7, #4]
    1b4e:	f8d7 b044 	ldr.w	fp, [r7, #68]	; 0x44
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1b52:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b56:	2102      	movs	r1, #2
    1b58:	4640      	mov	r0, r8
    1b5a:	4b46      	ldr	r3, [pc, #280]	; (1c74 <grid_port_process_outbound_usb+0x414>)
    1b5c:	4798      	blx	r3
    1b5e:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1b60:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b64:	2102      	movs	r1, #2
    1b66:	eb08 0001 	add.w	r0, r8, r1
    1b6a:	4b42      	ldr	r3, [pc, #264]	; (1c74 <grid_port_process_outbound_usb+0x414>)
    1b6c:	4798      	blx	r3
    1b6e:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1b70:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1b74:	2102      	movs	r1, #2
    1b76:	f108 0004 	add.w	r0, r8, #4
    1b7a:	4b3e      	ldr	r3, [pc, #248]	; (1c74 <grid_port_process_outbound_usb+0x414>)
    1b7c:	4798      	blx	r3
    1b7e:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b80:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
    1b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1b86:	449a      	add	sl, r3
    1b88:	4b3b      	ldr	r3, [pc, #236]	; (1c78 <grid_port_process_outbound_usb+0x418>)
    1b8a:	4798      	blx	r3
    1b8c:	9005      	str	r0, [sp, #20]
    1b8e:	b2e4      	uxtb	r4, r4
    1b90:	9404      	str	r4, [sp, #16]
    1b92:	b2ed      	uxtb	r5, r5
    1b94:	9503      	str	r5, [sp, #12]
    1b96:	647e      	str	r6, [r7, #68]	; 0x44
    1b98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1b9c:	9302      	str	r3, [sp, #8]
    1b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ba0:	9301      	str	r3, [sp, #4]
    1ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1ba4:	9300      	str	r3, [sp, #0]
    1ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1baa:	4934      	ldr	r1, [pc, #208]	; (1c7c <grid_port_process_outbound_usb+0x41c>)
    1bac:	4650      	mov	r0, sl
    1bae:	4e34      	ldr	r6, [pc, #208]	; (1c80 <grid_port_process_outbound_usb+0x420>)
    1bb0:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1bb2:	4650      	mov	r0, sl
    1bb4:	4b33      	ldr	r3, [pc, #204]	; (1c84 <grid_port_process_outbound_usb+0x424>)
    1bb6:	4798      	blx	r3
    1bb8:	4483      	add	fp, r0
    1bba:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1bbe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1bc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    1bc4:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1bc6:	2d82      	cmp	r5, #130	; 0x82
    1bc8:	bf14      	ite	ne
    1bca:	2500      	movne	r5, #0
    1bcc:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    1bce:	460b      	mov	r3, r1
    1bd0:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1bd2:	2c80      	cmp	r4, #128	; 0x80
    1bd4:	bf14      	ite	ne
    1bd6:	2400      	movne	r4, #0
    1bd8:	2401      	moveq	r4, #1
    1bda:	708c      	strb	r4, [r1, #2]
    1bdc:	f108 0806 	add.w	r8, r8, #6
    1be0:	3303      	adds	r3, #3
    1be2:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint8_t j=0; j<key_array_length; j++){
    1be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1be6:	4598      	cmp	r8, r3
    1be8:	d1b3      	bne.n	1b52 <grid_port_process_outbound_usb+0x2f2>
    1bea:	f8c7 b044 	str.w	fp, [r7, #68]	; 0x44
    1bee:	f8d7 a008 	ldr.w	sl, [r7, #8]
    1bf2:	f8d7 b004 	ldr.w	fp, [r7, #4]
					usb_debug[1] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
    1bf6:	6939      	ldr	r1, [r7, #16]
    1bf8:	68f8      	ldr	r0, [r7, #12]
    1bfa:	4b23      	ldr	r3, [pc, #140]	; (1c88 <grid_port_process_outbound_usb+0x428>)
    1bfc:	4798      	blx	r3
    1bfe:	b2c0      	uxtb	r0, r0
    1c00:	4b22      	ldr	r3, [pc, #136]	; (1c8c <grid_port_process_outbound_usb+0x42c>)
    1c02:	7058      	strb	r0, [r3, #1]
    1c04:	f8d7 d024 	ldr.w	sp, [r7, #36]	; 0x24
				current_start = 0;
    1c08:	2500      	movs	r5, #0
    1c0a:	e67a      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					uint8_t sys_bank		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1c0c:	1ce8      	adds	r0, r5, #3
    1c0e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c12:	2102      	movs	r1, #2
    1c14:	4448      	add	r0, r9
    1c16:	4b17      	ldr	r3, [pc, #92]	; (1c74 <grid_port_process_outbound_usb+0x414>)
    1c18:	4798      	blx	r3
    1c1a:	4605      	mov	r5, r0
					uint8_t sys_bank_select = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1c1c:	1d60      	adds	r0, r4, #5
    1c1e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c22:	2102      	movs	r1, #2
    1c24:	4448      	add	r0, r9
    1c26:	4b13      	ldr	r3, [pc, #76]	; (1c74 <grid_port_process_outbound_usb+0x414>)
    1c28:	4798      	blx	r3
    1c2a:	4606      	mov	r6, r0
					uint8_t sys_bank_value  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1c2c:	1de0      	adds	r0, r4, #7
    1c2e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
    1c32:	2102      	movs	r1, #2
    1c34:	4448      	add	r0, r9
    1c36:	4b0f      	ldr	r3, [pc, #60]	; (1c74 <grid_port_process_outbound_usb+0x414>)
    1c38:	4798      	blx	r3
					if (sys_bank == GRID_MSG_COMMAND_SYS_BANK && sys_bank_select == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c3a:	b2ed      	uxtb	r5, r5
    1c3c:	2d64      	cmp	r5, #100	; 0x64
    1c3e:	d001      	beq.n	1c44 <grid_port_process_outbound_usb+0x3e4>
				current_start = 0;
    1c40:	2500      	movs	r5, #0
    1c42:	e65e      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
					if (sys_bank == GRID_MSG_COMMAND_SYS_BANK && sys_bank_select == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c44:	b2f6      	uxtb	r6, r6
    1c46:	2e65      	cmp	r6, #101	; 0x65
    1c48:	d001      	beq.n	1c4e <grid_port_process_outbound_usb+0x3ee>
				current_start = 0;
    1c4a:	2500      	movs	r5, #0
    1c4c:	e659      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
						grid_sys_bank_select(&grid_sys_state, sys_bank_value);		
    1c4e:	b2c1      	uxtb	r1, r0
    1c50:	480f      	ldr	r0, [pc, #60]	; (1c90 <grid_port_process_outbound_usb+0x430>)
    1c52:	4b10      	ldr	r3, [pc, #64]	; (1c94 <grid_port_process_outbound_usb+0x434>)
    1c54:	4798      	blx	r3
				current_start = 0;
    1c56:	2500      	movs	r5, #0
    1c58:	e653      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1c5a:	2500      	movs	r5, #0
    1c5c:	e651      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
    1c5e:	2500      	movs	r5, #0
    1c60:	e64f      	b.n	1902 <grid_port_process_outbound_usb+0xa2>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
    1c64:	6c38      	ldr	r0, [r7, #64]	; 0x40
    1c66:	3028      	adds	r0, #40	; 0x28
    1c68:	4b0b      	ldr	r3, [pc, #44]	; (1c98 <grid_port_process_outbound_usb+0x438>)
    1c6a:	4798      	blx	r3
}
    1c6c:	e603      	b.n	1876 <grid_port_process_outbound_usb+0x16>
    1c6e:	bf00      	nop
    1c70:	2aaaaaab 	.word	0x2aaaaaab
    1c74:	00003ae1 	.word	0x00003ae1
    1c78:	00003b59 	.word	0x00003b59
    1c7c:	0000cbdc 	.word	0x0000cbdc
    1c80:	0000bd81 	.word	0x0000bd81
    1c84:	0000bdc9 	.word	0x0000bdc9
    1c88:	0000a271 	.word	0x0000a271
    1c8c:	20003820 	.word	0x20003820
    1c90:	20001cf0 	.word	0x20001cf0
    1c94:	00003c49 	.word	0x00003c49
    1c98:	0000a031 	.word	0x0000a031

00001c9c <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1c9e:	f500 659b 	add.w	r5, r0, #1240	; 0x4d8
    1ca2:	4628      	mov	r0, r5
    1ca4:	4b0a      	ldr	r3, [pc, #40]	; (1cd0 <grid_port_process_outbound_ui+0x34>)
    1ca6:	4798      	blx	r3
	
	if (!packet_size){
    1ca8:	b900      	cbnz	r0, 1cac <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    1caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cac:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    1cae:	4628      	mov	r0, r5
    1cb0:	4b08      	ldr	r3, [pc, #32]	; (1cd4 <grid_port_process_outbound_ui+0x38>)
    1cb2:	4798      	blx	r3
    1cb4:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1cb6:	4f08      	ldr	r7, [pc, #32]	; (1cd8 <grid_port_process_outbound_ui+0x3c>)
    1cb8:	4628      	mov	r0, r5
    1cba:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    1cbc:	3401      	adds	r4, #1
    1cbe:	b2e4      	uxtb	r4, r4
    1cc0:	b2a3      	uxth	r3, r4
    1cc2:	429e      	cmp	r6, r3
    1cc4:	d8f8      	bhi.n	1cb8 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1cc6:	4628      	mov	r0, r5
    1cc8:	4b04      	ldr	r3, [pc, #16]	; (1cdc <grid_port_process_outbound_ui+0x40>)
    1cca:	4798      	blx	r3
}
    1ccc:	e7ed      	b.n	1caa <grid_port_process_outbound_ui+0xe>
    1cce:	bf00      	nop
    1cd0:	000013d1 	.word	0x000013d1
    1cd4:	00001443 	.word	0x00001443
    1cd8:	000014cd 	.word	0x000014cd
    1cdc:	000014f5 	.word	0x000014f5

00001ce0 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1ce0:	8983      	ldrh	r3, [r0, #12]
    1ce2:	b103      	cbz	r3, 1ce6 <grid_port_process_outbound_usart+0x6>
    1ce4:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cea:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1cec:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    1cf0:	4630      	mov	r0, r6
    1cf2:	4b11      	ldr	r3, [pc, #68]	; (1d38 <grid_port_process_outbound_usart+0x58>)
    1cf4:	4798      	blx	r3
    1cf6:	4604      	mov	r4, r0
    1cf8:	4607      	mov	r7, r0
		
		if (!packet_size){
    1cfa:	b910      	cbnz	r0, 1d02 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1cfc:	2000      	movs	r0, #0
    1cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1d02:	4630      	mov	r0, r6
    1d04:	4b0d      	ldr	r3, [pc, #52]	; (1d3c <grid_port_process_outbound_usart+0x5c>)
    1d06:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1d08:	81ac      	strh	r4, [r5, #12]
    1d0a:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1d0c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1d48 <grid_port_process_outbound_usart+0x68>
    1d10:	4630      	mov	r0, r6
    1d12:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1d14:	192b      	adds	r3, r5, r4
    1d16:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
			for (uint8_t i = 0; i<packet_size; i++){
    1d1a:	3401      	adds	r4, #1
    1d1c:	b2e4      	uxtb	r4, r4
    1d1e:	42a7      	cmp	r7, r4
    1d20:	d8f6      	bhi.n	1d10 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1d22:	4630      	mov	r0, r6
    1d24:	4b06      	ldr	r3, [pc, #24]	; (1d40 <grid_port_process_outbound_usart+0x60>)
    1d26:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1d28:	89aa      	ldrh	r2, [r5, #12]
    1d2a:	f105 0128 	add.w	r1, r5, #40	; 0x28
    1d2e:	6868      	ldr	r0, [r5, #4]
    1d30:	4b04      	ldr	r3, [pc, #16]	; (1d44 <grid_port_process_outbound_usart+0x64>)
    1d32:	4798      	blx	r3
			
		}
		
	}
	
}
    1d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d38:	000013d1 	.word	0x000013d1
    1d3c:	00001443 	.word	0x00001443
    1d40:	000014f5 	.word	0x000014f5
    1d44:	000047d9 	.word	0x000047d9
    1d48:	000014cd 	.word	0x000014cd

00001d4c <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1d4c:	2201      	movs	r2, #1
    1d4e:	4b01      	ldr	r3, [pc, #4]	; (1d54 <grid_led_hardware_transfer_complete_cb+0x8>)
    1d50:	701a      	strb	r2, [r3, #0]
    1d52:	4770      	bx	lr
    1d54:	20001280 	.word	0x20001280

00001d58 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1d58:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1d5a:	7844      	ldrb	r4, [r0, #1]
    1d5c:	428c      	cmp	r4, r1
    1d5e:	d802      	bhi.n	1d66 <grid_led_set_color+0xe>
		return -1;		
    1d60:	20ff      	movs	r0, #255	; 0xff
}
    1d62:	bc30      	pop	{r4, r5}
    1d64:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1d66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1d6a:	0089      	lsls	r1, r1, #2
    1d6c:	4c09      	ldr	r4, [pc, #36]	; (1d94 <grid_led_set_color+0x3c>)
    1d6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1d72:	68c3      	ldr	r3, [r0, #12]
    1d74:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1d7a:	68c3      	ldr	r3, [r0, #12]
    1d7c:	440b      	add	r3, r1
    1d7e:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1d80:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1d84:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1d88:	68c3      	ldr	r3, [r0, #12]
    1d8a:	4419      	add	r1, r3
    1d8c:	608a      	str	r2, [r1, #8]
		return 0;
    1d8e:	2000      	movs	r0, #0
    1d90:	e7e7      	b.n	1d62 <grid_led_set_color+0xa>
    1d92:	bf00      	nop
    1d94:	20001d90 	.word	0x20001d90

00001d98 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1d98:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1d9a:	4c06      	ldr	r4, [pc, #24]	; (1db4 <grid_led_hardware_init+0x1c>)
    1d9c:	f100 0114 	add.w	r1, r0, #20
    1da0:	4620      	mov	r0, r4
    1da2:	4b05      	ldr	r3, [pc, #20]	; (1db8 <grid_led_hardware_init+0x20>)
    1da4:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1da6:	4a05      	ldr	r2, [pc, #20]	; (1dbc <grid_led_hardware_init+0x24>)
    1da8:	2100      	movs	r1, #0
    1daa:	4620      	mov	r0, r4
    1dac:	4b04      	ldr	r3, [pc, #16]	; (1dc0 <grid_led_hardware_init+0x28>)
    1dae:	4798      	blx	r3
    1db0:	bd10      	pop	{r4, pc}
    1db2:	bf00      	nop
    1db4:	20001100 	.word	0x20001100
    1db8:	00004d31 	.word	0x00004d31
    1dbc:	00001d4d 	.word	0x00001d4d
    1dc0:	00004d01 	.word	0x00004d01

00001dc4 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1dc4:	7840      	ldrb	r0, [r0, #1]
    1dc6:	4770      	bx	lr

00001dc8 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1dc8:	7843      	ldrb	r3, [r0, #1]
    1dca:	b1f3      	cbz	r3, 1e0a <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1dcc:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1dce:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1dd0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1dd4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1dd8:	6902      	ldr	r2, [r0, #16]
    1dda:	440a      	add	r2, r1
    1ddc:	7ad1      	ldrb	r1, [r2, #11]
    1dde:	7b14      	ldrb	r4, [r2, #12]
    1de0:	4421      	add	r1, r4
    1de2:	72d1      	strb	r1, [r2, #11]
    1de4:	7842      	ldrb	r2, [r0, #1]
    1de6:	441a      	add	r2, r3
    1de8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1dec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1df0:	6901      	ldr	r1, [r0, #16]
    1df2:	440a      	add	r2, r1
    1df4:	7ad1      	ldrb	r1, [r2, #11]
    1df6:	7b14      	ldrb	r4, [r2, #12]
    1df8:	4421      	add	r1, r4
    1dfa:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1dfc:	3301      	adds	r3, #1
    1dfe:	b2db      	uxtb	r3, r3
    1e00:	7842      	ldrb	r2, [r0, #1]
    1e02:	429a      	cmp	r2, r3
    1e04:	d8e4      	bhi.n	1dd0 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1e06:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e0a:	4770      	bx	lr

00001e0c <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1e0c:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1e0e:	7844      	ldrb	r4, [r0, #1]
    1e10:	fb02 1404 	mla	r4, r2, r4, r1
    1e14:	6905      	ldr	r5, [r0, #16]
    1e16:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1e1a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1e1e:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1e20:	7843      	ldrb	r3, [r0, #1]
    1e22:	fb02 1303 	mla	r3, r2, r3, r1
    1e26:	6904      	ldr	r4, [r0, #16]
    1e28:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1e2c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1e30:	4423      	add	r3, r4
    1e32:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1e36:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1e38:	7843      	ldrb	r3, [r0, #1]
    1e3a:	fb02 1203 	mla	r2, r2, r3, r1
    1e3e:	6903      	ldr	r3, [r0, #16]
    1e40:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1e44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1e48:	441a      	add	r2, r3
    1e4a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1e4e:	7093      	strb	r3, [r2, #2]
}
    1e50:	bc70      	pop	{r4, r5, r6}
    1e52:	4770      	bx	lr

00001e54 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1e54:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1e56:	7844      	ldrb	r4, [r0, #1]
    1e58:	fb02 1404 	mla	r4, r2, r4, r1
    1e5c:	6905      	ldr	r5, [r0, #16]
    1e5e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1e62:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1e66:	442c      	add	r4, r5
    1e68:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1e6a:	7843      	ldrb	r3, [r0, #1]
    1e6c:	fb02 1303 	mla	r3, r2, r3, r1
    1e70:	6904      	ldr	r4, [r0, #16]
    1e72:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1e76:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1e7a:	4423      	add	r3, r4
    1e7c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1e80:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1e82:	7843      	ldrb	r3, [r0, #1]
    1e84:	fb02 1203 	mla	r2, r2, r3, r1
    1e88:	6903      	ldr	r3, [r0, #16]
    1e8a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1e8e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1e92:	441a      	add	r2, r3
    1e94:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1e98:	7153      	strb	r3, [r2, #5]
}
    1e9a:	bc70      	pop	{r4, r5, r6}
    1e9c:	4770      	bx	lr

00001e9e <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1e9e:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    1ea0:	7844      	ldrb	r4, [r0, #1]
    1ea2:	fb02 1404 	mla	r4, r2, r4, r1
    1ea6:	6905      	ldr	r5, [r0, #16]
    1ea8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1eac:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1eb0:	442c      	add	r4, r5
    1eb2:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    1eb4:	7843      	ldrb	r3, [r0, #1]
    1eb6:	fb02 1303 	mla	r3, r2, r3, r1
    1eba:	6904      	ldr	r4, [r0, #16]
    1ebc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1ec0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1ec4:	4423      	add	r3, r4
    1ec6:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1eca:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    1ecc:	7843      	ldrb	r3, [r0, #1]
    1ece:	fb02 1203 	mla	r2, r2, r3, r1
    1ed2:	6903      	ldr	r3, [r0, #16]
    1ed4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1ed8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1edc:	441a      	add	r2, r3
    1ede:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1ee2:	7213      	strb	r3, [r2, #8]
}
    1ee4:	bc70      	pop	{r4, r5, r6}
    1ee6:	4770      	bx	lr

00001ee8 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1ee8:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    1eea:	7844      	ldrb	r4, [r0, #1]
    1eec:	fb02 1204 	mla	r2, r2, r4, r1
    1ef0:	6901      	ldr	r1, [r0, #16]
    1ef2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1ef6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1efa:	440a      	add	r2, r1
    1efc:	72d3      	strb	r3, [r2, #11]
}
    1efe:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f02:	4770      	bx	lr

00001f04 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    1f04:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    1f06:	7844      	ldrb	r4, [r0, #1]
    1f08:	fb02 1204 	mla	r2, r2, r4, r1
    1f0c:	6901      	ldr	r1, [r0, #16]
    1f0e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1f12:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1f16:	440a      	add	r2, r1
    1f18:	7313      	strb	r3, [r2, #12]
}
    1f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f1e:	4770      	bx	lr

00001f20 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    1f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f24:	b083      	sub	sp, #12
    1f26:	4604      	mov	r4, r0
	mod->led_number = length;
    1f28:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    1f2a:	b2cd      	uxtb	r5, r1
    1f2c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1f30:	0080      	lsls	r0, r0, #2
    1f32:	3090      	adds	r0, #144	; 0x90
    1f34:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    1f36:	4f3e      	ldr	r7, [pc, #248]	; (2030 <grid_led_buffer_init+0x110>)
    1f38:	47b8      	blx	r7
    1f3a:	4606      	mov	r6, r0
    1f3c:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    1f3e:	f100 0390 	add.w	r3, r0, #144	; 0x90
    1f42:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1f44:	201a      	movs	r0, #26
    1f46:	fb00 f005 	mul.w	r0, r0, r5
    1f4a:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    1f4c:	2e00      	cmp	r6, #0
    1f4e:	d06e      	beq.n	202e <grid_led_buffer_init+0x10e>
    1f50:	2800      	cmp	r0, #0
    1f52:	d06c      	beq.n	202e <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    1f54:	6120      	str	r0, [r4, #16]
    1f56:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    1f58:	4619      	mov	r1, r3
    1f5a:	68a2      	ldr	r2, [r4, #8]
    1f5c:	54d1      	strb	r1, [r2, r3]
    1f5e:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    1f60:	2b90      	cmp	r3, #144	; 0x90
    1f62:	d1fa      	bne.n	1f5a <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    1f64:	7863      	ldrb	r3, [r4, #1]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d05e      	beq.n	2028 <grid_led_buffer_init+0x108>
    1f6a:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    1f6c:	462e      	mov	r6, r5
    1f6e:	4f31      	ldr	r7, [pc, #196]	; (2034 <grid_led_buffer_init+0x114>)
    1f70:	9600      	str	r6, [sp, #0]
    1f72:	4633      	mov	r3, r6
    1f74:	4632      	mov	r2, r6
    1f76:	4629      	mov	r1, r5
    1f78:	4620      	mov	r0, r4
    1f7a:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    1f7c:	3501      	adds	r5, #1
    1f7e:	7863      	ldrb	r3, [r4, #1]
    1f80:	42ab      	cmp	r3, r5
    1f82:	d8f5      	bhi.n	1f70 <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    1f84:	2b00      	cmp	r3, #0
    1f86:	d04f      	beq.n	2028 <grid_led_buffer_init+0x108>
    1f88:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1f8a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 203c <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1f8e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2040 <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    1f92:	2500      	movs	r5, #0
    1f94:	9501      	str	r5, [sp, #4]
    1f96:	9500      	str	r5, [sp, #0]
    1f98:	462b      	mov	r3, r5
    1f9a:	462a      	mov	r2, r5
    1f9c:	4631      	mov	r1, r6
    1f9e:	4620      	mov	r0, r4
    1fa0:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    1fa2:	9501      	str	r5, [sp, #4]
    1fa4:	237f      	movs	r3, #127	; 0x7f
    1fa6:	9300      	str	r3, [sp, #0]
    1fa8:	462b      	mov	r3, r5
    1faa:	462a      	mov	r2, r5
    1fac:	4631      	mov	r1, r6
    1fae:	4620      	mov	r0, r4
    1fb0:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    1fb2:	9501      	str	r5, [sp, #4]
    1fb4:	23ff      	movs	r3, #255	; 0xff
    1fb6:	9300      	str	r3, [sp, #0]
    1fb8:	462b      	mov	r3, r5
    1fba:	462a      	mov	r2, r5
    1fbc:	4631      	mov	r1, r6
    1fbe:	4620      	mov	r0, r4
    1fc0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2044 <grid_led_buffer_init+0x124>
    1fc4:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    1fc6:	462b      	mov	r3, r5
    1fc8:	462a      	mov	r2, r5
    1fca:	4631      	mov	r1, r6
    1fcc:	4620      	mov	r0, r4
    1fce:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2048 <grid_led_buffer_init+0x128>
    1fd2:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    1fd4:	462b      	mov	r3, r5
    1fd6:	462a      	mov	r2, r5
    1fd8:	4631      	mov	r1, r6
    1fda:	4620      	mov	r0, r4
    1fdc:	4f16      	ldr	r7, [pc, #88]	; (2038 <grid_led_buffer_init+0x118>)
    1fde:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    1fe0:	9501      	str	r5, [sp, #4]
    1fe2:	9500      	str	r5, [sp, #0]
    1fe4:	462b      	mov	r3, r5
    1fe6:	2201      	movs	r2, #1
    1fe8:	4631      	mov	r1, r6
    1fea:	4620      	mov	r0, r4
    1fec:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    1fee:	9501      	str	r5, [sp, #4]
    1ff0:	9500      	str	r5, [sp, #0]
    1ff2:	462b      	mov	r3, r5
    1ff4:	2201      	movs	r2, #1
    1ff6:	4631      	mov	r1, r6
    1ff8:	4620      	mov	r0, r4
    1ffa:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    1ffc:	9501      	str	r5, [sp, #4]
    1ffe:	9500      	str	r5, [sp, #0]
    2000:	462b      	mov	r3, r5
    2002:	2201      	movs	r2, #1
    2004:	4631      	mov	r1, r6
    2006:	4620      	mov	r0, r4
    2008:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    200a:	462b      	mov	r3, r5
    200c:	2201      	movs	r2, #1
    200e:	4631      	mov	r1, r6
    2010:	4620      	mov	r0, r4
    2012:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    2014:	462b      	mov	r3, r5
    2016:	2201      	movs	r2, #1
    2018:	4631      	mov	r1, r6
    201a:	4620      	mov	r0, r4
    201c:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    201e:	3601      	adds	r6, #1
    2020:	b2f6      	uxtb	r6, r6
    2022:	7863      	ldrb	r3, [r4, #1]
    2024:	42b3      	cmp	r3, r6
    2026:	d8b4      	bhi.n	1f92 <grid_led_buffer_init+0x72>
}
    2028:	b003      	add	sp, #12
    202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    202e:	e7fe      	b.n	202e <grid_led_buffer_init+0x10e>
    2030:	0000b99d 	.word	0x0000b99d
    2034:	00001d59 	.word	0x00001d59
    2038:	00001ee9 	.word	0x00001ee9
    203c:	00001e0d 	.word	0x00001e0d
    2040:	00001e55 	.word	0x00001e55
    2044:	00001e9f 	.word	0x00001e9f
    2048:	00001f05 	.word	0x00001f05

0000204c <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2050:	b083      	sub	sp, #12
    2052:	f890 c001 	ldrb.w	ip, [r0, #1]
    2056:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    205a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    205e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    2062:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    2066:	6904      	ldr	r4, [r0, #16]
    2068:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    206a:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    206c:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    2070:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    2072:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    2074:	f8df 8084 	ldr.w	r8, [pc, #132]	; 20fc <grid_led_render+0xb0>
    2078:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    207a:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    207e:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    2080:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    2084:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    2088:	f894 a000 	ldrb.w	sl, [r4]
    208c:	f894 b003 	ldrb.w	fp, [r4, #3]
    2090:	fb05 fb0b 	mul.w	fp, r5, fp
    2094:	fb09 bb0a 	mla	fp, r9, sl, fp
    2098:	f894 a006 	ldrb.w	sl, [r4, #6]
    209c:	fb06 ba0a 	mla	sl, r6, sl, fp
    20a0:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    20a2:	f894 a001 	ldrb.w	sl, [r4, #1]
    20a6:	f894 b004 	ldrb.w	fp, [r4, #4]
    20aa:	fb05 fb0b 	mul.w	fp, r5, fp
    20ae:	fb09 bb0a 	mla	fp, r9, sl, fp
    20b2:	f894 a007 	ldrb.w	sl, [r4, #7]
    20b6:	fb06 ba0a 	mla	sl, r6, sl, fp
    20ba:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    20bc:	f894 a002 	ldrb.w	sl, [r4, #2]
    20c0:	f894 b005 	ldrb.w	fp, [r4, #5]
    20c4:	fb05 f50b 	mul.w	r5, r5, fp
    20c8:	fb09 590a 	mla	r9, r9, sl, r5
    20cc:	7a25      	ldrb	r5, [r4, #8]
    20ce:	fb06 9505 	mla	r5, r6, r5, r9
    20d2:	44ae      	add	lr, r5
    20d4:	3f01      	subs	r7, #1
    20d6:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    20d8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    20dc:	d1cc      	bne.n	2078 <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    20de:	f3ce 2447 	ubfx	r4, lr, #9, #8
    20e2:	9400      	str	r4, [sp, #0]
    20e4:	f3c3 2347 	ubfx	r3, r3, #9, #8
    20e8:	f3c2 2247 	ubfx	r2, r2, #9, #8
    20ec:	4c02      	ldr	r4, [pc, #8]	; (20f8 <grid_led_render+0xac>)
    20ee:	47a0      	blx	r4
	
}
    20f0:	b003      	add	sp, #12
    20f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20f6:	bf00      	nop
    20f8:	00001d59 	.word	0x00001d59
    20fc:	20000000 	.word	0x20000000

00002100 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2100:	7843      	ldrb	r3, [r0, #1]
    2102:	b15b      	cbz	r3, 211c <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    2104:	b570      	push	{r4, r5, r6, lr}
    2106:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    2108:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    210a:	4e05      	ldr	r6, [pc, #20]	; (2120 <grid_led_render_all+0x20>)
    210c:	4621      	mov	r1, r4
    210e:	4628      	mov	r0, r5
    2110:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    2112:	3401      	adds	r4, #1
    2114:	786b      	ldrb	r3, [r5, #1]
    2116:	42a3      	cmp	r3, r4
    2118:	d8f8      	bhi.n	210c <grid_led_render_all+0xc>
    211a:	bd70      	pop	{r4, r5, r6, pc}
    211c:	4770      	bx	lr
    211e:	bf00      	nop
    2120:	0000204d 	.word	0x0000204d

00002124 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    2124:	b510      	push	{r4, lr}
    2126:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2128:	2200      	movs	r2, #0
    212a:	4b08      	ldr	r3, [pc, #32]	; (214c <grid_led_hardware_start_transfer_blocking+0x28>)
    212c:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    212e:	4808      	ldr	r0, [pc, #32]	; (2150 <grid_led_hardware_start_transfer_blocking+0x2c>)
    2130:	4b08      	ldr	r3, [pc, #32]	; (2154 <grid_led_hardware_start_transfer_blocking+0x30>)
    2132:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2134:	88a2      	ldrh	r2, [r4, #4]
    2136:	68a1      	ldr	r1, [r4, #8]
    2138:	6960      	ldr	r0, [r4, #20]
    213a:	4b07      	ldr	r3, [pc, #28]	; (2158 <grid_led_hardware_start_transfer_blocking+0x34>)
    213c:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    213e:	4a03      	ldr	r2, [pc, #12]	; (214c <grid_led_hardware_start_transfer_blocking+0x28>)
    2140:	7813      	ldrb	r3, [r2, #0]
    2142:	b2db      	uxtb	r3, r3
    2144:	2b01      	cmp	r3, #1
    2146:	d1fb      	bne.n	2140 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    2148:	bd10      	pop	{r4, pc}
    214a:	bf00      	nop
    214c:	20001280 	.word	0x20001280
    2150:	20001100 	.word	0x20001100
    2154:	00004cd9 	.word	0x00004cd9
    2158:	000047d9 	.word	0x000047d9

0000215c <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2160:	b085      	sub	sp, #20
    2162:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    2164:	4b20      	ldr	r3, [pc, #128]	; (21e8 <grid_led_startup_animation+0x8c>)
    2166:	781b      	ldrb	r3, [r3, #0]
    2168:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    216a:	2b20      	cmp	r3, #32
    216c:	d00a      	beq.n	2184 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    216e:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    2172:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2176:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    217a:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    217e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 21f4 <grid_led_startup_animation+0x98>
    2182:	e01e      	b.n	21c2 <grid_led_startup_animation+0x66>
		s= 2;
    2184:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    2188:	2300      	movs	r3, #0
    218a:	9303      	str	r3, [sp, #12]
    218c:	e7f3      	b.n	2176 <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    218e:	9500      	str	r5, [sp, #0]
    2190:	462b      	mov	r3, r5
    2192:	463a      	mov	r2, r7
    2194:	4621      	mov	r1, r4
    2196:	4630      	mov	r0, r6
    2198:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    219a:	3401      	adds	r4, #1
    219c:	b2e4      	uxtb	r4, r4
    219e:	7873      	ldrb	r3, [r6, #1]
    21a0:	42a3      	cmp	r3, r4
    21a2:	d8f4      	bhi.n	218e <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    21a4:	4630      	mov	r0, r6
    21a6:	4b11      	ldr	r3, [pc, #68]	; (21ec <grid_led_startup_animation+0x90>)
    21a8:	4798      	blx	r3
		delay_ms(1);
    21aa:	2001      	movs	r0, #1
    21ac:	4b10      	ldr	r3, [pc, #64]	; (21f0 <grid_led_startup_animation+0x94>)
    21ae:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    21b0:	f109 0901 	add.w	r9, r9, #1
    21b4:	fa5f f989 	uxtb.w	r9, r9
    21b8:	f10a 3aff 	add.w	sl, sl, #4294967295
    21bc:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    21c0:	d00f      	beq.n	21e2 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    21c2:	7873      	ldrb	r3, [r6, #1]
    21c4:	2b00      	cmp	r3, #0
    21c6:	d0ed      	beq.n	21a4 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    21c8:	fb0b f709 	mul.w	r7, fp, r9
    21cc:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    21d0:	9b03      	ldr	r3, [sp, #12]
    21d2:	fb09 f503 	mul.w	r5, r9, r3
    21d6:	fb0b f505 	mul.w	r5, fp, r5
    21da:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    21de:	2400      	movs	r4, #0
    21e0:	e7d5      	b.n	218e <grid_led_startup_animation+0x32>
}
    21e2:	b005      	add	sp, #20
    21e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21e8:	40000c00 	.word	0x40000c00
    21ec:	00002125 	.word	0x00002125
    21f0:	0000464d 	.word	0x0000464d
    21f4:	00001d59 	.word	0x00001d59

000021f8 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    21f8:	b570      	push	{r4, r5, r6, lr}
    21fa:	4604      	mov	r4, r0
    21fc:	4e2b      	ldr	r6, [pc, #172]	; (22ac <grid_led_init+0xb4>)
    21fe:	2200      	movs	r2, #0
    2200:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2202:	f003 0001 	and.w	r0, r3, #1
    2206:	2800      	cmp	r0, #0
    2208:	bf14      	ite	ne
    220a:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    220e:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2212:	f3c3 0540 	ubfx	r5, r3, #1, #1
    2216:	2d00      	cmp	r5, #0
    2218:	bf14      	ite	ne
    221a:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    221e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2222:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2224:	f3c3 0080 	ubfx	r0, r3, #2, #1
    2228:	2800      	cmp	r0, #0
    222a:	bf14      	ite	ne
    222c:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2230:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2234:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2236:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    223a:	2d00      	cmp	r5, #0
    223c:	bf14      	ite	ne
    223e:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    2242:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    2246:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    2248:	f3c3 1500 	ubfx	r5, r3, #4, #1
    224c:	2d00      	cmp	r5, #0
    224e:	bf14      	ite	ne
    2250:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    2254:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    2258:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    225a:	f3c3 1040 	ubfx	r0, r3, #5, #1
    225e:	2800      	cmp	r0, #0
    2260:	bf14      	ite	ne
    2262:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    2266:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    226a:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    226c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2270:	2800      	cmp	r0, #0
    2272:	bf14      	ite	ne
    2274:	200e      	movne	r0, #14
    2276:	2008      	moveq	r0, #8
    2278:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    227a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    227e:	2b00      	cmp	r3, #0
    2280:	bf14      	ite	ne
    2282:	23e0      	movne	r3, #224	; 0xe0
    2284:	2380      	moveq	r3, #128	; 0x80
    2286:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    2288:	f846 3f04 	str.w	r3, [r6, #4]!
    228c:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    228e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    2292:	d1b5      	bne.n	2200 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    2294:	4620      	mov	r0, r4
    2296:	4b06      	ldr	r3, [pc, #24]	; (22b0 <grid_led_init+0xb8>)
    2298:	4798      	blx	r3
	grid_led_hardware_init(mod);
    229a:	4620      	mov	r0, r4
    229c:	4b05      	ldr	r3, [pc, #20]	; (22b4 <grid_led_init+0xbc>)
    229e:	4798      	blx	r3
	grid_led_startup_animation(mod);
    22a0:	4620      	mov	r0, r4
    22a2:	4b05      	ldr	r3, [pc, #20]	; (22b8 <grid_led_init+0xc0>)
    22a4:	4798      	blx	r3
}
    22a6:	2000      	movs	r0, #0
    22a8:	bd70      	pop	{r4, r5, r6, pc}
    22aa:	bf00      	nop
    22ac:	20001d8c 	.word	0x20001d8c
    22b0:	00001f21 	.word	0x00001f21
    22b4:	00001d99 	.word	0x00001d99
    22b8:	0000215d 	.word	0x0000215d

000022bc <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    22bc:	b510      	push	{r4, lr}
    22be:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    22c0:	2200      	movs	r2, #0
    22c2:	4b05      	ldr	r3, [pc, #20]	; (22d8 <grid_led_hardware_start_transfer+0x1c>)
    22c4:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    22c6:	4805      	ldr	r0, [pc, #20]	; (22dc <grid_led_hardware_start_transfer+0x20>)
    22c8:	4b05      	ldr	r3, [pc, #20]	; (22e0 <grid_led_hardware_start_transfer+0x24>)
    22ca:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    22cc:	88a2      	ldrh	r2, [r4, #4]
    22ce:	68a1      	ldr	r1, [r4, #8]
    22d0:	6960      	ldr	r0, [r4, #20]
    22d2:	4b04      	ldr	r3, [pc, #16]	; (22e4 <grid_led_hardware_start_transfer+0x28>)
    22d4:	4798      	blx	r3
    22d6:	bd10      	pop	{r4, pc}
    22d8:	20001280 	.word	0x20001280
    22dc:	20001100 	.word	0x20001100
    22e0:	00004cd9 	.word	0x00004cd9
    22e4:	000047d9 	.word	0x000047d9

000022e8 <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    22e8:	4b01      	ldr	r3, [pc, #4]	; (22f0 <grid_led_hardware_is_transfer_completed+0x8>)
    22ea:	7818      	ldrb	r0, [r3, #0]
	
    22ec:	4770      	bx	lr
    22ee:	bf00      	nop
    22f0:	20001280 	.word	0x20001280

000022f4 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    22f4:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    22fa:	4b13      	ldr	r3, [pc, #76]	; (2348 <grid_module_common_init+0x54>)
    22fc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    2300:	4b12      	ldr	r3, [pc, #72]	; (234c <grid_module_common_init+0x58>)
    2302:	4798      	blx	r3
    2304:	b178      	cbz	r0, 2326 <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    2306:	4b11      	ldr	r3, [pc, #68]	; (234c <grid_module_common_init+0x58>)
    2308:	4798      	blx	r3
    230a:	2880      	cmp	r0, #128	; 0x80
    230c:	d00f      	beq.n	232e <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    230e:	4b0f      	ldr	r3, [pc, #60]	; (234c <grid_module_common_init+0x58>)
    2310:	4798      	blx	r3
    2312:	2840      	cmp	r0, #64	; 0x40
    2314:	d00f      	beq.n	2336 <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    2316:	4b0d      	ldr	r3, [pc, #52]	; (234c <grid_module_common_init+0x58>)
    2318:	4798      	blx	r3
    231a:	28c0      	cmp	r0, #192	; 0xc0
    231c:	d00f      	beq.n	233e <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    231e:	480c      	ldr	r0, [pc, #48]	; (2350 <grid_module_common_init+0x5c>)
    2320:	4b0c      	ldr	r3, [pc, #48]	; (2354 <grid_module_common_init+0x60>)
    2322:	4798      	blx	r3
    2324:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    2326:	480c      	ldr	r0, [pc, #48]	; (2358 <grid_module_common_init+0x64>)
    2328:	4b0c      	ldr	r3, [pc, #48]	; (235c <grid_module_common_init+0x68>)
    232a:	4798      	blx	r3
    232c:	e7eb      	b.n	2306 <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    232e:	480a      	ldr	r0, [pc, #40]	; (2358 <grid_module_common_init+0x64>)
    2330:	4b0b      	ldr	r3, [pc, #44]	; (2360 <grid_module_common_init+0x6c>)
    2332:	4798      	blx	r3
    2334:	e7eb      	b.n	230e <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    2336:	4808      	ldr	r0, [pc, #32]	; (2358 <grid_module_common_init+0x64>)
    2338:	4b0a      	ldr	r3, [pc, #40]	; (2364 <grid_module_common_init+0x70>)
    233a:	4798      	blx	r3
    233c:	e7eb      	b.n	2316 <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    233e:	4806      	ldr	r0, [pc, #24]	; (2358 <grid_module_common_init+0x64>)
    2340:	4b09      	ldr	r3, [pc, #36]	; (2368 <grid_module_common_init+0x74>)
    2342:	4798      	blx	r3
    2344:	e7eb      	b.n	231e <grid_module_common_init+0x2a>
    2346:	bf00      	nop
    2348:	41008000 	.word	0x41008000
    234c:	00003b59 	.word	0x00003b59
    2350:	20001cf0 	.word	0x20001cf0
    2354:	000039e1 	.word	0x000039e1
    2358:	20001ce4 	.word	0x20001ce4
    235c:	00003629 	.word	0x00003629
    2360:	00002639 	.word	0x00002639
    2364:	00003235 	.word	0x00003235
    2368:	00002c99 	.word	0x00002c99

0000236c <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    236c:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    236e:	4803      	ldr	r0, [pc, #12]	; (237c <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    2370:	4c03      	ldr	r4, [pc, #12]	; (2380 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    2372:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2374:	4803      	ldr	r0, [pc, #12]	; (2384 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    2376:	47a0      	blx	r4
    2378:	bd10      	pop	{r4, pc}
    237a:	bf00      	nop
    237c:	20001030 	.word	0x20001030
    2380:	000045a5 	.word	0x000045a5
    2384:	20001204 	.word	0x20001204

00002388 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    2388:	4b8d      	ldr	r3, [pc, #564]	; (25c0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    238a:	781b      	ldrb	r3, [r3, #0]
    238c:	b92b      	cbnz	r3, 239a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x12>
		grid_module_bu16_revb_hardware_transfer_complete++;
    238e:	4a8c      	ldr	r2, [pc, #560]	; (25c0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    2390:	7813      	ldrb	r3, [r2, #0]
    2392:	3301      	adds	r3, #1
    2394:	b2db      	uxtb	r3, r3
    2396:	7013      	strb	r3, [r2, #0]
    2398:	4770      	bx	lr
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    239a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    239e:	b083      	sub	sp, #12
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    23a0:	4668      	mov	r0, sp
    23a2:	4b88      	ldr	r3, [pc, #544]	; (25c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23c>)
    23a4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    23a6:	4b88      	ldr	r3, [pc, #544]	; (25c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    23a8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23ac:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    23b0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    23b4:	4054      	eors	r4, r2
    23b6:	400c      	ands	r4, r1
    23b8:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    23ba:	4668      	mov	r0, sp
    23bc:	4b83      	ldr	r3, [pc, #524]	; (25cc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x244>)
    23be:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    23c0:	4b83      	ldr	r3, [pc, #524]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    23c2:	685b      	ldr	r3, [r3, #4]
    23c4:	68db      	ldr	r3, [r3, #12]
    23c6:	781a      	ldrb	r2, [r3, #0]
    23c8:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    23cc:	4294      	cmp	r4, r2
    23ce:	d004      	beq.n	23da <grid_module_bu16_revb_hardware_transfer_complete_cb+0x52>
		
		uint8_t value;
		
		if (mod->report_array[report_index].helper[0] == 0){
    23d0:	2a00      	cmp	r2, #0
    23d2:	f040 80d9 	bne.w	2588 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x200>
			
			mod->report_array[report_index].helper[0] = 1;
    23d6:	2201      	movs	r2, #1
    23d8:	701a      	strb	r2, [r3, #0]


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    23da:	2300      	movs	r3, #0
    23dc:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    23e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    23e4:	4b76      	ldr	r3, [pc, #472]	; (25c0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    23e6:	785a      	ldrb	r2, [r3, #1]
    23e8:	3208      	adds	r2, #8
    23ea:	487a      	ldr	r0, [pc, #488]	; (25d4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x24c>)
    23ec:	5c85      	ldrb	r5, [r0, r2]
    23ee:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    23f0:	785a      	ldrb	r2, [r3, #1]
    23f2:	b2d2      	uxtb	r2, r2
    23f4:	5c84      	ldrb	r4, [r0, r2]
    23f6:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    23f8:	785a      	ldrb	r2, [r3, #1]
    23fa:	3201      	adds	r2, #1
    23fc:	b2d2      	uxtb	r2, r2
    23fe:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    2400:	785a      	ldrb	r2, [r3, #1]
    2402:	f002 0207 	and.w	r2, r2, #7
    2406:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    2408:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    240a:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    240e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2412:	4b6d      	ldr	r3, [pc, #436]	; (25c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    2414:	bf14      	ite	ne
    2416:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    241a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    241e:	4b68      	ldr	r3, [pc, #416]	; (25c0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    2420:	785b      	ldrb	r3, [r3, #1]
    2422:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2426:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    242a:	4b67      	ldr	r3, [pc, #412]	; (25c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    242c:	bf14      	ite	ne
    242e:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2432:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    2436:	4b62      	ldr	r3, [pc, #392]	; (25c0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    2438:	785b      	ldrb	r3, [r3, #1]
    243a:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    243e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2442:	4b61      	ldr	r3, [pc, #388]	; (25c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x240>)
    2444:	bf14      	ite	ne
    2446:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    244a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    244e:	2302      	movs	r3, #2
    2450:	f10d 0206 	add.w	r2, sp, #6
    2454:	2100      	movs	r1, #0
    2456:	4860      	ldr	r0, [pc, #384]	; (25d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x250>)
    2458:	4e60      	ldr	r6, [pc, #384]	; (25dc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>)
    245a:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    245c:	2302      	movs	r3, #2
    245e:	aa01      	add	r2, sp, #4
    2460:	2100      	movs	r1, #0
    2462:	485f      	ldr	r0, [pc, #380]	; (25e0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x258>)
    2464:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    2466:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    246a:	f242 7310 	movw	r3, #10000	; 0x2710
    246e:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    2470:	bf8c      	ite	hi
    2472:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    2474:	237f      	movls	r3, #127	; 0x7f
    2476:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	
	if (adcresult_1>10000){
    247a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    247e:	f242 7310 	movw	r3, #10000	; 0x2710
    2482:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    2484:	bf8c      	ite	hi
    2486:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    2488:	237f      	movls	r3, #127	; 0x7f
    248a:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_array[adc_index_0+1].helper[0]){
    248e:	1c6e      	adds	r6, r5, #1
    2490:	0136      	lsls	r6, r6, #4
    2492:	4b4f      	ldr	r3, [pc, #316]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    2494:	685b      	ldr	r3, [r3, #4]
    2496:	4433      	add	r3, r6
    2498:	68da      	ldr	r2, [r3, #12]
    249a:	7812      	ldrb	r2, [r2, #0]
    249c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    24a0:	4291      	cmp	r1, r2
    24a2:	d02f      	beq.n	2504 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x17c>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    24a4:	2a00      	cmp	r2, #0
    24a6:	bf0c      	ite	eq
    24a8:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    24ac:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[5], 2, command);
    24b0:	6858      	ldr	r0, [r3, #4]
    24b2:	bf0c      	ite	eq
    24b4:	2290      	moveq	r2, #144	; 0x90
    24b6:	2280      	movne	r2, #128	; 0x80
    24b8:	2102      	movs	r1, #2
    24ba:	3005      	adds	r0, #5
    24bc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 25e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x260>
    24c0:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    24c2:	4f43      	ldr	r7, [pc, #268]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	4433      	add	r3, r6
    24c8:	6858      	ldr	r0, [r3, #4]
    24ca:	462a      	mov	r2, r5
    24cc:	2102      	movs	r1, #2
    24ce:	3007      	adds	r0, #7
    24d0:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, velocity);
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	4433      	add	r3, r6
    24d6:	6858      	ldr	r0, [r3, #4]
    24d8:	464a      	mov	r2, r9
    24da:	2102      	movs	r1, #2
    24dc:	3009      	adds	r0, #9
    24de:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    24e0:	687b      	ldr	r3, [r7, #4]
    24e2:	4433      	add	r3, r6
    24e4:	6858      	ldr	r0, [r3, #4]
    24e6:	ea4f 0249 	mov.w	r2, r9, lsl #1
    24ea:	2102      	movs	r1, #2
    24ec:	3015      	adds	r0, #21
    24ee:	47c0      	blx	r8
		mod->report_array[adc_index_0+1].helper[0] = velocity;
    24f0:	687b      	ldr	r3, [r7, #4]
    24f2:	441e      	add	r6, r3
    24f4:	68f3      	ldr	r3, [r6, #12]
    24f6:	f883 9000 	strb.w	r9, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    24fa:	1c69      	adds	r1, r5, #1
    24fc:	b2c9      	uxtb	r1, r1
    24fe:	4638      	mov	r0, r7
    2500:	4b38      	ldr	r3, [pc, #224]	; (25e4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    2502:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_array[adc_index_1+1].helper[0]){
    2504:	1c65      	adds	r5, r4, #1
    2506:	012d      	lsls	r5, r5, #4
    2508:	4b31      	ldr	r3, [pc, #196]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    250a:	685b      	ldr	r3, [r3, #4]
    250c:	442b      	add	r3, r5
    250e:	68da      	ldr	r2, [r3, #12]
    2510:	7812      	ldrb	r2, [r2, #0]
    2512:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2516:	4291      	cmp	r1, r2
    2518:	d02e      	beq.n	2578 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f0>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    251a:	2a00      	cmp	r2, #0
    251c:	bf0c      	ite	eq
    251e:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    2522:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[5], 2, command);
    2526:	6858      	ldr	r0, [r3, #4]
    2528:	bf0c      	ite	eq
    252a:	2290      	moveq	r2, #144	; 0x90
    252c:	2280      	movne	r2, #128	; 0x80
    252e:	2102      	movs	r1, #2
    2530:	3005      	adds	r0, #5
    2532:	4f2d      	ldr	r7, [pc, #180]	; (25e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x260>)
    2534:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    2536:	4e26      	ldr	r6, [pc, #152]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    2538:	6873      	ldr	r3, [r6, #4]
    253a:	442b      	add	r3, r5
    253c:	6858      	ldr	r0, [r3, #4]
    253e:	4622      	mov	r2, r4
    2540:	2102      	movs	r1, #2
    2542:	3007      	adds	r0, #7
    2544:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, velocity);
    2546:	6873      	ldr	r3, [r6, #4]
    2548:	442b      	add	r3, r5
    254a:	6858      	ldr	r0, [r3, #4]
    254c:	4642      	mov	r2, r8
    254e:	2102      	movs	r1, #2
    2550:	3009      	adds	r0, #9
    2552:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    2554:	6873      	ldr	r3, [r6, #4]
    2556:	442b      	add	r3, r5
    2558:	6858      	ldr	r0, [r3, #4]
    255a:	ea4f 0248 	mov.w	r2, r8, lsl #1
    255e:	2102      	movs	r1, #2
    2560:	3015      	adds	r0, #21
    2562:	47b8      	blx	r7
		
		mod->report_array[adc_index_1+1].helper[0] = velocity;
    2564:	6873      	ldr	r3, [r6, #4]
    2566:	441d      	add	r5, r3
    2568:	68eb      	ldr	r3, [r5, #12]
    256a:	f883 8000 	strb.w	r8, [r3]
		
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    256e:	1c61      	adds	r1, r4, #1
    2570:	b2c9      	uxtb	r1, r1
    2572:	4630      	mov	r0, r6
    2574:	4b1b      	ldr	r3, [pc, #108]	; (25e4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    2576:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    2578:	2200      	movs	r2, #0
    257a:	4b11      	ldr	r3, [pc, #68]	; (25c0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>)
    257c:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    257e:	4b1b      	ldr	r3, [pc, #108]	; (25ec <grid_module_bu16_revb_hardware_transfer_complete_cb+0x264>)
    2580:	4798      	blx	r3
}
    2582:	b003      	add	sp, #12
    2584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mod->report_array[report_index].helper[0] = 0;
    2588:	2400      	movs	r4, #0
    258a:	701c      	strb	r4, [r3, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    258c:	4a18      	ldr	r2, [pc, #96]	; (25f0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x268>)
    258e:	7a53      	ldrb	r3, [r2, #9]
    2590:	3301      	adds	r3, #1
    2592:	1ae1      	subs	r1, r4, r3
    2594:	f003 0303 	and.w	r3, r3, #3
    2598:	f001 0103 	and.w	r1, r1, #3
    259c:	bf58      	it	pl
    259e:	424b      	negpl	r3, r1
    25a0:	b2db      	uxtb	r3, r3
    25a2:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    25a4:	7a53      	ldrb	r3, [r2, #9]
			grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_state.bank_select);
    25a6:	7a52      	ldrb	r2, [r2, #9]
    25a8:	4d09      	ldr	r5, [pc, #36]	; (25d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>)
    25aa:	686b      	ldr	r3, [r5, #4]
    25ac:	6858      	ldr	r0, [r3, #4]
    25ae:	2102      	movs	r1, #2
    25b0:	3007      	adds	r0, #7
    25b2:	4b0d      	ldr	r3, [pc, #52]	; (25e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x260>)
    25b4:	4798      	blx	r3
			grid_ui_report_set_changed_flag(mod, report_index);
    25b6:	4621      	mov	r1, r4
    25b8:	4628      	mov	r0, r5
    25ba:	4b0a      	ldr	r3, [pc, #40]	; (25e4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>)
    25bc:	4798      	blx	r3
    25be:	e70c      	b.n	23da <grid_module_bu16_revb_hardware_transfer_complete_cb+0x52>
    25c0:	20000644 	.word	0x20000644
    25c4:	000045cd 	.word	0x000045cd
    25c8:	41008000 	.word	0x41008000
    25cc:	000045db 	.word	0x000045db
    25d0:	20001ce4 	.word	0x20001ce4
    25d4:	20000300 	.word	0x20000300
    25d8:	20001030 	.word	0x20001030
    25dc:	000044c5 	.word	0x000044c5
    25e0:	20001204 	.word	0x20001204
    25e4:	0000408f 	.word	0x0000408f
    25e8:	00003b21 	.word	0x00003b21
    25ec:	0000236d 	.word	0x0000236d
    25f0:	20001cf0 	.word	0x20001cf0

000025f4 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    25f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    25f6:	4f0b      	ldr	r7, [pc, #44]	; (2624 <grid_module_bu16_revb_hardware_init+0x30>)
    25f8:	4c0b      	ldr	r4, [pc, #44]	; (2628 <grid_module_bu16_revb_hardware_init+0x34>)
    25fa:	463b      	mov	r3, r7
    25fc:	2200      	movs	r2, #0
    25fe:	4611      	mov	r1, r2
    2600:	4620      	mov	r0, r4
    2602:	4e0a      	ldr	r6, [pc, #40]	; (262c <grid_module_bu16_revb_hardware_init+0x38>)
    2604:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    2606:	4d0a      	ldr	r5, [pc, #40]	; (2630 <grid_module_bu16_revb_hardware_init+0x3c>)
    2608:	463b      	mov	r3, r7
    260a:	2200      	movs	r2, #0
    260c:	4611      	mov	r1, r2
    260e:	4628      	mov	r0, r5
    2610:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    2612:	2100      	movs	r1, #0
    2614:	4620      	mov	r0, r4
    2616:	4c07      	ldr	r4, [pc, #28]	; (2634 <grid_module_bu16_revb_hardware_init+0x40>)
    2618:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    261a:	2100      	movs	r1, #0
    261c:	4628      	mov	r0, r5
    261e:	47a0      	blx	r4
    2620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2622:	bf00      	nop
    2624:	00002389 	.word	0x00002389
    2628:	20001030 	.word	0x20001030
    262c:	00004445 	.word	0x00004445
    2630:	20001204 	.word	0x20001204
    2634:	00004405 	.word	0x00004405

00002638 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    2638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    263c:	b09b      	sub	sp, #108	; 0x6c
    263e:	4604      	mov	r4, r0
    2640:	900d      	str	r0, [sp, #52]	; 0x34

	grid_led_init(&grid_led_state, 16);
    2642:	2110      	movs	r1, #16
    2644:	483b      	ldr	r0, [pc, #236]	; (2734 <grid_module_bu16_revb_init+0xfc>)
    2646:	4b3c      	ldr	r3, [pc, #240]	; (2738 <grid_module_bu16_revb_init+0x100>)
    2648:	4798      	blx	r3
	grid_ui_model_init(mod, 17);
    264a:	2111      	movs	r1, #17
    264c:	4620      	mov	r0, r4
    264e:	4b3b      	ldr	r3, [pc, #236]	; (273c <grid_module_bu16_revb_init+0x104>)
    2650:	4798      	blx	r3

 	
	if (mod->report_array == NULL)	{
    2652:	6863      	ldr	r3, [r4, #4]
    2654:	2b00      	cmp	r3, #0
    2656:	d06a      	beq.n	272e <grid_module_bu16_revb_init+0xf6>
    2658:	f04f 39ff 	mov.w	r9, #4294967295
    265c:	2601      	movs	r6, #1
    265e:	f04f 0800 	mov.w	r8, #0

			);
			
		}
		else{
			uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2662:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 275c <grid_module_bu16_revb_init+0x124>
    2666:	960c      	str	r6, [sp, #48]	; 0x30
    2668:	e028      	b.n	26bc <grid_module_bu16_revb_init+0x84>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    266a:	2303      	movs	r3, #3
    266c:	9303      	str	r3, [sp, #12]
    266e:	2400      	movs	r4, #0
    2670:	9402      	str	r4, [sp, #8]
    2672:	2365      	movs	r3, #101	; 0x65
    2674:	9301      	str	r3, [sp, #4]
    2676:	2364      	movs	r3, #100	; 0x64
    2678:	9300      	str	r3, [sp, #0]
    267a:	2304      	movs	r3, #4
    267c:	2202      	movs	r2, #2
    267e:	4930      	ldr	r1, [pc, #192]	; (2740 <grid_module_bu16_revb_init+0x108>)
    2680:	a812      	add	r0, sp, #72	; 0x48
    2682:	4d30      	ldr	r5, [pc, #192]	; (2744 <grid_module_bu16_revb_init+0x10c>)
    2684:	47a8      	blx	r5

			);
			
		}
		
		uint8_t payload_length = strlen(payload_template);
    2686:	a812      	add	r0, sp, #72	; 0x48
    2688:	4b2f      	ldr	r3, [pc, #188]	; (2748 <grid_module_bu16_revb_init+0x110>)
    268a:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    268c:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
		helper_template[1] = 0;
    2690:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2694:	2302      	movs	r3, #2
    2696:	9301      	str	r3, [sp, #4]
    2698:	ab0e      	add	r3, sp, #56	; 0x38
    269a:	9300      	str	r3, [sp, #0]
    269c:	b2c3      	uxtb	r3, r0
    269e:	aa12      	add	r2, sp, #72	; 0x48
    26a0:	4621      	mov	r1, r4
    26a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    26a4:	4c29      	ldr	r4, [pc, #164]	; (274c <grid_module_bu16_revb_init+0x114>)
    26a6:	47a0      	blx	r4
		
		if (error != 0){
    26a8:	2800      	cmp	r0, #0
    26aa:	d140      	bne.n	272e <grid_module_bu16_revb_init+0xf6>
    26ac:	f108 0801 	add.w	r8, r8, #1
    26b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    26b2:	3601      	adds	r6, #1
    26b4:	b2f3      	uxtb	r3, r6
    26b6:	930c      	str	r3, [sp, #48]	; 0x30
    26b8:	f109 0901 	add.w	r9, r9, #1
		if (i == 0){
    26bc:	f018 0aff 	ands.w	sl, r8, #255	; 0xff
    26c0:	d0d3      	beq.n	266a <grid_module_bu16_revb_init+0x32>
			uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    26c2:	ad0e      	add	r5, sp, #56	; 0x38
    26c4:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
    26c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    26cc:	2303      	movs	r3, #3
    26ce:	930b      	str	r3, [sp, #44]	; 0x2c
    26d0:	2400      	movs	r4, #0
    26d2:	940a      	str	r4, [sp, #40]	; 0x28
    26d4:	f819 2005 	ldrb.w	r2, [r9, r5]
    26d8:	9209      	str	r2, [sp, #36]	; 0x24
    26da:	2263      	movs	r2, #99	; 0x63
    26dc:	9208      	str	r2, [sp, #32]
    26de:	9407      	str	r4, [sp, #28]
    26e0:	9306      	str	r3, [sp, #24]
    26e2:	2702      	movs	r7, #2
    26e4:	9705      	str	r7, [sp, #20]
    26e6:	9304      	str	r3, [sp, #16]
    26e8:	9403      	str	r4, [sp, #12]
    26ea:	f8cd 9008 	str.w	r9, [sp, #8]
    26ee:	2390      	movs	r3, #144	; 0x90
    26f0:	9301      	str	r3, [sp, #4]
    26f2:	9400      	str	r4, [sp, #0]
    26f4:	4623      	mov	r3, r4
    26f6:	463a      	mov	r2, r7
    26f8:	4915      	ldr	r1, [pc, #84]	; (2750 <grid_module_bu16_revb_init+0x118>)
    26fa:	a812      	add	r0, sp, #72	; 0x48
    26fc:	4e11      	ldr	r6, [pc, #68]	; (2744 <grid_module_bu16_revb_init+0x10c>)
    26fe:	47b0      	blx	r6
		uint8_t payload_length = strlen(payload_template);
    2700:	a812      	add	r0, sp, #72	; 0x48
    2702:	4b11      	ldr	r3, [pc, #68]	; (2748 <grid_module_bu16_revb_init+0x110>)
    2704:	4798      	blx	r3
		helper_template[0] = 0;
    2706:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
		helper_template[1] = 0;
    270a:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
		uint8_t error = grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    270e:	9701      	str	r7, [sp, #4]
    2710:	9500      	str	r5, [sp, #0]
    2712:	b2c3      	uxtb	r3, r0
    2714:	aa12      	add	r2, sp, #72	; 0x48
    2716:	4651      	mov	r1, sl
    2718:	980d      	ldr	r0, [sp, #52]	; 0x34
    271a:	4c0c      	ldr	r4, [pc, #48]	; (274c <grid_module_bu16_revb_init+0x114>)
    271c:	47a0      	blx	r4
		if (error != 0){
    271e:	b930      	cbnz	r0, 272e <grid_module_bu16_revb_init+0xf6>
	for(uint8_t i=0; i<17; i++){
    2720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2722:	2b10      	cmp	r3, #16
    2724:	d9c2      	bls.n	26ac <grid_module_bu16_revb_init+0x74>
			
		}

	}
			
	grid_module_bu16_revb_hardware_init();
    2726:	4b0b      	ldr	r3, [pc, #44]	; (2754 <grid_module_bu16_revb_init+0x11c>)
    2728:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    272a:	4b0b      	ldr	r3, [pc, #44]	; (2758 <grid_module_bu16_revb_init+0x120>)
    272c:	4798      	blx	r3

};
    272e:	b01b      	add	sp, #108	; 0x6c
    2730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2734:	200035fc 	.word	0x200035fc
    2738:	000021f9 	.word	0x000021f9
    273c:	00003fb5 	.word	0x00003fb5
    2740:	0000cc50 	.word	0x0000cc50
    2744:	0000bd81 	.word	0x0000bd81
    2748:	0000bdc9 	.word	0x0000bdc9
    274c:	00003fcd 	.word	0x00003fcd
    2750:	0000cc68 	.word	0x0000cc68
    2754:	000025f5 	.word	0x000025f5
    2758:	0000236d 	.word	0x0000236d
    275c:	0000cc40 	.word	0x0000cc40

00002760 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    2760:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2762:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2766:	4b06      	ldr	r3, [pc, #24]	; (2780 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    2768:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    276a:	4c06      	ldr	r4, [pc, #24]	; (2784 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    276c:	4620      	mov	r0, r4
    276e:	4b06      	ldr	r3, [pc, #24]	; (2788 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    2770:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    2772:	2308      	movs	r3, #8
    2774:	4a05      	ldr	r2, [pc, #20]	; (278c <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    2776:	4906      	ldr	r1, [pc, #24]	; (2790 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    2778:	4620      	mov	r0, r4
    277a:	4c06      	ldr	r4, [pc, #24]	; (2794 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    277c:	47a0      	blx	r4
    277e:	bd10      	pop	{r4, pc}
    2780:	41008000 	.word	0x41008000
    2784:	20000f24 	.word	0x20000f24
    2788:	00004aad 	.word	0x00004aad
    278c:	200017c4 	.word	0x200017c4
    2790:	20000310 	.word	0x20000310
    2794:	00004b4d 	.word	0x00004b4d

00002798 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    2798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    279c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    279e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    27a2:	4bad      	ldr	r3, [pc, #692]	; (2a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    27a4:	615a      	str	r2, [r3, #20]
    27a6:	4ead      	ldr	r6, [pc, #692]	; (2a5c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    27a8:	f04f 0800 	mov.w	r8, #0
    27ac:	e087      	b.n	28be <grid_module_en16_reva_hardware_transfer_complete_cb+0x126>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi >= 0){
    27ae:	7838      	ldrb	r0, [r7, #0]
    27b0:	49ab      	ldr	r1, [pc, #684]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    27b2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    27b6:	78c9      	ldrb	r1, [r1, #3]
    27b8:	42d1      	cmn	r1, r2
    27ba:	d405      	bmi.n	27c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x30>
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
    27bc:	4aa8      	ldr	r2, [pc, #672]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    27be:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    27c2:	440b      	add	r3, r1
    27c4:	70c3      	strb	r3, [r0, #3]
    27c6:	e00a      	b.n	27de <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					}
					else{
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value = 0;
    27c8:	4ba5      	ldr	r3, [pc, #660]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    27ca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    27ce:	2300      	movs	r3, #0
    27d0:	70c3      	strb	r3, [r0, #3]
    27d2:	e004      	b.n	27de <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
				else if (delta>0){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi <= 127){
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value = 127;
    27d4:	4ba2      	ldr	r3, [pc, #648]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    27d6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    27da:	237f      	movs	r3, #127	; 0x7f
    27dc:	70c3      	strb	r3, [r0, #3]
				
				uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
				
				
				uint8_t value = 0;
				if (0 == grid_ui_report_get_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16)){
    27de:	7839      	ldrb	r1, [r7, #0]
    27e0:	3111      	adds	r1, #17
    27e2:	b2c9      	uxtb	r1, r1
    27e4:	489f      	ldr	r0, [pc, #636]	; (2a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    27e6:	4ba0      	ldr	r3, [pc, #640]	; (2a68 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    27e8:	4798      	blx	r3
    27ea:	2800      	cmp	r0, #0
    27ec:	f040 8124 	bne.w	2a38 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a0>
					value = 64; //CENTER
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = 0;
    27f0:	783a      	ldrb	r2, [r7, #0]
    27f2:	4b9c      	ldr	r3, [pc, #624]	; (2a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    27fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    27fe:	2200      	movs	r2, #0
    2800:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    2802:	2340      	movs	r3, #64	; 0x40
				}
				else{
					value = mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0];
				}
				
				value +=  delta*velocityfactor;
    2804:	fb09 3404 	mla	r4, r9, r4, r3
    2808:	b2e4      	uxtb	r4, r4
				
				uint8_t actuator = 2*grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    280a:	783a      	ldrb	r2, [r7, #0]
				
				if (value != mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0]){
    280c:	f102 0111 	add.w	r1, r2, #17
    2810:	4b94      	ldr	r3, [pc, #592]	; (2a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2812:	685b      	ldr	r3, [r3, #4]
    2814:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    2818:	68d9      	ldr	r1, [r3, #12]
    281a:	7809      	ldrb	r1, [r1, #0]
    281c:	42a1      	cmp	r1, r4
    281e:	d047      	beq.n	28b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
				uint8_t actuator = 2*grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    2820:	498f      	ldr	r1, [pc, #572]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2822:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    2826:	f892 9003 	ldrb.w	r9, [r2, #3]
    282a:	ea4f 0949 	mov.w	r9, r9, lsl #1
    282e:	fa5f f989 	uxtb.w	r9, r9
					
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[5], 2, command);
    2832:	6858      	ldr	r0, [r3, #4]
    2834:	22b0      	movs	r2, #176	; 0xb0
    2836:	2102      	movs	r1, #2
    2838:	3005      	adds	r0, #5
    283a:	f8df a260 	ldr.w	sl, [pc, #608]	; 2a9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    283e:	47d0      	blx	sl
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    2840:	783a      	ldrb	r2, [r7, #0]
    2842:	4d88      	ldr	r5, [pc, #544]	; (2a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2844:	686b      	ldr	r3, [r5, #4]
    2846:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    284a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    284e:	2102      	movs	r1, #2
    2850:	3007      	adds	r0, #7
    2852:	47d0      	blx	sl
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].payload[9], 2, value);
    2854:	783a      	ldrb	r2, [r7, #0]
    2856:	686b      	ldr	r3, [r5, #4]
    2858:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    285c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    2860:	4622      	mov	r2, r4
    2862:	2102      	movs	r1, #2
    2864:	3009      	adds	r0, #9
    2866:	47d0      	blx	sl
					
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0] = value;
    2868:	783a      	ldrb	r2, [r7, #0]
    286a:	686b      	ldr	r3, [r5, #4]
    286c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2870:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    2874:	701c      	strb	r4, [r3, #0]
					grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16);
    2876:	7839      	ldrb	r1, [r7, #0]
    2878:	3111      	adds	r1, #17
    287a:	b2c9      	uxtb	r1, r1
    287c:	4628      	mov	r0, r5
    287e:	4c7b      	ldr	r4, [pc, #492]	; (2a6c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    2880:	47a0      	blx	r4
					
					
					
					grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].payload[9], 2, actuator); // LED
    2882:	783a      	ldrb	r2, [r7, #0]
    2884:	686b      	ldr	r3, [r5, #4]
    2886:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    288a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
    288e:	464a      	mov	r2, r9
    2890:	2102      	movs	r1, #2
    2892:	3009      	adds	r0, #9
    2894:	47d0      	blx	sl
					mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].helper[0] = actuator;
    2896:	783a      	ldrb	r2, [r7, #0]
    2898:	686b      	ldr	r3, [r5, #4]
    289a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    289e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
    28a2:	f883 9000 	strb.w	r9, [r3]
					grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16+16);
    28a6:	7839      	ldrb	r1, [r7, #0]
    28a8:	3121      	adds	r1, #33	; 0x21
    28aa:	b2c9      	uxtb	r1, r1
    28ac:	4628      	mov	r0, r5
    28ae:	47a0      	blx	r4
    28b0:	f108 0801 	add.w	r8, r8, #1
    28b4:	3601      	adds	r6, #1
	for (uint8_t i=0; i<16; i++){
    28b6:	f1b8 0f10 	cmp.w	r8, #16
    28ba:	f000 8133 	beq.w	2b24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x38c>
    28be:	fa5f f188 	uxtb.w	r1, r8
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    28c2:	084b      	lsrs	r3, r1, #1
    28c4:	4a6a      	ldr	r2, [pc, #424]	; (2a70 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    28c6:	5cd3      	ldrb	r3, [r2, r3]
    28c8:	f001 0201 	and.w	r2, r1, #1
    28cc:	0092      	lsls	r2, r2, #2
    28ce:	4113      	asrs	r3, r2
    28d0:	b2db      	uxtb	r3, r3
    28d2:	f003 000f 	and.w	r0, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    28d6:	4a67      	ldr	r2, [pc, #412]	; (2a74 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
    28d8:	f812 2008 	ldrb.w	r2, [r2, r8]
    28dc:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    28de:	4290      	cmp	r0, r2
    28e0:	d0e6      	beq.n	28b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
			UI_SPI_DEBUG = i;
    28e2:	4a65      	ldr	r2, [pc, #404]	; (2a78 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>)
    28e4:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    28e6:	0881      	lsrs	r1, r0, #2
			uint8_t phase_a = (new_value>>1)&1;
    28e8:	f3c0 0540 	ubfx	r5, r0, #1, #1
			uint8_t phase_b = (new_value)&1;
    28ec:	f003 0401 	and.w	r4, r3, #1
    28f0:	4637      	mov	r7, r6
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    28f2:	7833      	ldrb	r3, [r6, #0]
    28f4:	4a5a      	ldr	r2, [pc, #360]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    28f6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    28fa:	7852      	ldrb	r2, [r2, #1]
    28fc:	428a      	cmp	r2, r1
    28fe:	d03e      	beq.n	297e <grid_module_en16_reva_hardware_transfer_complete_cb+0x1e6>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_changed = 1;
    2900:	4a57      	ldr	r2, [pc, #348]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2902:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2906:	2001      	movs	r0, #1
    2908:	7090      	strb	r0, [r2, #2]
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value = new_value>>2;
    290a:	7051      	strb	r1, [r2, #1]
				if (mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] == 0){
    290c:	4403      	add	r3, r0
    290e:	4a55      	ldr	r2, [pc, #340]	; (2a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2910:	6852      	ldr	r2, [r2, #4]
    2912:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2916:	68da      	ldr	r2, [r3, #12]
    2918:	7812      	ldrb	r2, [r2, #0]
					velocity = 0;
    291a:	2a00      	cmp	r2, #0
    291c:	bf0c      	ite	eq
    291e:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    2922:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[5], 2, command);
    2926:	6858      	ldr	r0, [r3, #4]
    2928:	bf0c      	ite	eq
    292a:	2290      	moveq	r2, #144	; 0x90
    292c:	2280      	movne	r2, #128	; 0x80
    292e:	2102      	movs	r1, #2
    2930:	3005      	adds	r0, #5
    2932:	f8df b168 	ldr.w	fp, [pc, #360]	; 2a9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    2936:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[7], 2, UI_ENCODER_LOOKUP[i]);
    2938:	7832      	ldrb	r2, [r6, #0]
    293a:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>
    293e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2942:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2946:	6958      	ldr	r0, [r3, #20]
    2948:	2102      	movs	r1, #2
    294a:	3007      	adds	r0, #7
    294c:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1].payload[9], 2, velocity);
    294e:	7832      	ldrb	r2, [r6, #0]
    2950:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2954:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2958:	6958      	ldr	r0, [r3, #20]
    295a:	4652      	mov	r2, sl
    295c:	2102      	movs	r1, #2
    295e:	3009      	adds	r0, #9
    2960:	47d8      	blx	fp
				mod->report_array[UI_ENCODER_LOOKUP[i]+1].helper[0] = velocity;
    2962:	7832      	ldrb	r2, [r6, #0]
    2964:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2968:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    296c:	69db      	ldr	r3, [r3, #28]
    296e:	f883 a000 	strb.w	sl, [r3]
				grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1);
    2972:	7831      	ldrb	r1, [r6, #0]
    2974:	3101      	adds	r1, #1
    2976:	b2c9      	uxtb	r1, r1
    2978:	4648      	mov	r0, r9
    297a:	4b3c      	ldr	r3, [pc, #240]	; (2a6c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    297c:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous;
    297e:	783a      	ldrb	r2, [r7, #0]
    2980:	4b37      	ldr	r3, [pc, #220]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2982:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			if (a_now != a_prev){
    2986:	7b5b      	ldrb	r3, [r3, #13]
    2988:	42ab      	cmp	r3, r5
    298a:	f000 8116 	beq.w	2bba <grid_module_en16_reva_hardware_transfer_complete_cb+0x422>
					delta = +1;
    298e:	42a5      	cmp	r5, r4
    2990:	bf14      	ite	ne
    2992:	f04f 39ff 	movne.w	r9, #4294967295
    2996:	f04f 0901 	moveq.w	r9, #1
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous = a_now;
    299a:	4b31      	ldr	r3, [pc, #196]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    299c:	eb03 1102 	add.w	r1, r3, r2, lsl #4
    29a0:	734d      	strb	r5, [r1, #13]
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = b_now;
    29a2:	738c      	strb	r4, [r1, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]+1].last_real_time);
    29a4:	6989      	ldr	r1, [r1, #24]
    29a6:	4835      	ldr	r0, [pc, #212]	; (2a7c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    29a8:	4b35      	ldr	r3, [pc, #212]	; (2a80 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e8>)
    29aa:	4798      	blx	r3
    29ac:	9000      	str	r0, [sp, #0]
				if (elapsed_time>400){
    29ae:	9b00      	ldr	r3, [sp, #0]
    29b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    29b4:	bf84      	itt	hi
    29b6:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    29ba:	9300      	strhi	r3, [sp, #0]
				if (elapsed_time<20){
    29bc:	9b00      	ldr	r3, [sp, #0]
    29be:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    29c0:	bf9c      	itt	ls
    29c2:	2314      	movls	r3, #20
    29c4:	9300      	strls	r3, [sp, #0]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    29c6:	9b00      	ldr	r3, [sp, #0]
    29c8:	9800      	ldr	r0, [sp, #0]
    29ca:	fb00 f003 	mul.w	r0, r0, r3
    29ce:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    29d2:	f500 7080 	add.w	r0, r0, #256	; 0x100
    29d6:	4b2b      	ldr	r3, [pc, #172]	; (2a84 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ec>)
    29d8:	4798      	blx	r3
    29da:	a31d      	add	r3, pc, #116	; (adr r3, 2a50 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
    29dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    29e0:	4c29      	ldr	r4, [pc, #164]	; (2a88 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>)
    29e2:	47a0      	blx	r4
    29e4:	2200      	movs	r2, #0
    29e6:	4b29      	ldr	r3, [pc, #164]	; (2a8c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f4>)
    29e8:	4c29      	ldr	r4, [pc, #164]	; (2a90 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>)
    29ea:	47a0      	blx	r4
    29ec:	4b29      	ldr	r3, [pc, #164]	; (2a94 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    29ee:	4798      	blx	r3
    29f0:	b2c4      	uxtb	r4, r0
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    29f2:	783d      	ldrb	r5, [r7, #0]
    29f4:	4821      	ldr	r0, [pc, #132]	; (2a7c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    29f6:	4b28      	ldr	r3, [pc, #160]	; (2a98 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    29f8:	4798      	blx	r3
    29fa:	4b19      	ldr	r3, [pc, #100]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    29fc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2a00:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2a02:	fb04 9309 	mla	r3, r4, r9, r9
    2a06:	b29b      	uxth	r3, r3
    2a08:	b21a      	sxth	r2, r3
				if (delta<0){
    2a0a:	f1b9 0f00 	cmp.w	r9, #0
    2a0e:	f6ff aece 	blt.w	27ae <grid_module_en16_reva_hardware_transfer_complete_cb+0x16>
				else if (delta>0){
    2a12:	f1b9 0f00 	cmp.w	r9, #0
    2a16:	f77f aee2 	ble.w	27de <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value + xi <= 127){
    2a1a:	7838      	ldrb	r0, [r7, #0]
    2a1c:	4910      	ldr	r1, [pc, #64]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2a1e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2a22:	78c9      	ldrb	r1, [r1, #3]
    2a24:	440a      	add	r2, r1
    2a26:	2a7f      	cmp	r2, #127	; 0x7f
    2a28:	f73f aed4 	bgt.w	27d4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c>
						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += xi;
    2a2c:	4a0c      	ldr	r2, [pc, #48]	; (2a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2a2e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    2a32:	440b      	add	r3, r1
    2a34:	70c3      	strb	r3, [r0, #3]
    2a36:	e6d2      	b.n	27de <grid_module_en16_reva_hardware_transfer_complete_cb+0x46>
					value = mod->report_array[UI_ENCODER_LOOKUP[i]+1+16].helper[0];
    2a38:	783a      	ldrb	r2, [r7, #0]
    2a3a:	4b0a      	ldr	r3, [pc, #40]	; (2a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2a3c:	685b      	ldr	r3, [r3, #4]
    2a3e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2a42:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    2a46:	781b      	ldrb	r3, [r3, #0]
    2a48:	e6dc      	b.n	2804 <grid_module_en16_reva_hardware_transfer_complete_cb+0x6c>
    2a4a:	bf00      	nop
    2a4c:	f3af 8000 	nop.w
    2a50:	00000000 	.word	0x00000000
    2a54:	40e38800 	.word	0x40e38800
    2a58:	41008000 	.word	0x41008000
    2a5c:	20000320 	.word	0x20000320
    2a60:	2000382c 	.word	0x2000382c
    2a64:	20001ce4 	.word	0x20001ce4
    2a68:	00004087 	.word	0x00004087
    2a6c:	0000408f 	.word	0x0000408f
    2a70:	200017c4 	.word	0x200017c4
    2a74:	200017ac 	.word	0x200017ac
    2a78:	20001794 	.word	0x20001794
    2a7c:	20001cf0 	.word	0x20001cf0
    2a80:	00003a25 	.word	0x00003a25
    2a84:	0000b405 	.word	0x0000b405
    2a88:	0000b745 	.word	0x0000b745
    2a8c:	3ff00000 	.word	0x3ff00000
    2a90:	0000b18d 	.word	0x0000b18d
    2a94:	0000b915 	.word	0x0000b915
    2a98:	00003a21 	.word	0x00003a21
    2a9c:	00003b21 	.word	0x00003b21
			else{ //DELTA==0

				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time)>200){
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value > 64){

						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value--;
    2aa0:	3b01      	subs	r3, #1
    2aa2:	b2db      	uxtb	r3, r3
    2aa4:	4957      	ldr	r1, [pc, #348]	; (2c04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x46c>)
    2aa6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
    2aaa:	70cb      	strb	r3, [r1, #3]
						uint8_t v = 2 * grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    2aac:	005b      	lsls	r3, r3, #1
    2aae:	b2dc      	uxtb	r4, r3

						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].payload[9], 2, v); // LED
    2ab0:	4d55      	ldr	r5, [pc, #340]	; (2c08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x470>)
    2ab2:	686b      	ldr	r3, [r5, #4]
    2ab4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2ab8:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
    2abc:	4622      	mov	r2, r4
    2abe:	2102      	movs	r1, #2
    2ac0:	3009      	adds	r0, #9
    2ac2:	4b52      	ldr	r3, [pc, #328]	; (2c0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x474>)
    2ac4:	4798      	blx	r3
						mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].helper[0] = v;
    2ac6:	783a      	ldrb	r2, [r7, #0]
    2ac8:	686b      	ldr	r3, [r5, #4]
    2aca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2ace:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
    2ad2:	701c      	strb	r4, [r3, #0]
						grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16+16);
    2ad4:	7839      	ldrb	r1, [r7, #0]
    2ad6:	3121      	adds	r1, #33	; 0x21
    2ad8:	b2c9      	uxtb	r1, r1
    2ada:	4628      	mov	r0, r5
    2adc:	4b4c      	ldr	r3, [pc, #304]	; (2c10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x478>)
    2ade:	4798      	blx	r3
    2ae0:	e07e      	b.n	2be0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x448>

					}
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value < 64){

						grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value++;
    2ae2:	3301      	adds	r3, #1
    2ae4:	b2db      	uxtb	r3, r3
    2ae6:	4947      	ldr	r1, [pc, #284]	; (2c04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x46c>)
    2ae8:	eb01 1102 	add.w	r1, r1, r2, lsl #4
    2aec:	70cb      	strb	r3, [r1, #3]
						uint8_t v = 2 * grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value;
    2aee:	005b      	lsls	r3, r3, #1
    2af0:	b2dc      	uxtb	r4, r3

						grid_sys_write_hex_string_value(&mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].payload[9], 2, v); // LED
    2af2:	4d45      	ldr	r5, [pc, #276]	; (2c08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x470>)
    2af4:	686b      	ldr	r3, [r5, #4]
    2af6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2afa:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
    2afe:	4622      	mov	r2, r4
    2b00:	2102      	movs	r1, #2
    2b02:	3009      	adds	r0, #9
    2b04:	4b41      	ldr	r3, [pc, #260]	; (2c0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x474>)
    2b06:	4798      	blx	r3
						mod->report_array[UI_ENCODER_LOOKUP[i]+1+16+16].helper[0] = v;
    2b08:	783a      	ldrb	r2, [r7, #0]
    2b0a:	686b      	ldr	r3, [r5, #4]
    2b0c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2b10:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
    2b14:	701c      	strb	r4, [r3, #0]
						grid_ui_report_set_changed_flag(mod, UI_ENCODER_LOOKUP[i]+1+16+16);
    2b16:	7839      	ldrb	r1, [r7, #0]
    2b18:	3121      	adds	r1, #33	; 0x21
    2b1a:	b2c9      	uxtb	r1, r1
    2b1c:	4628      	mov	r0, r5
    2b1e:	4b3c      	ldr	r3, [pc, #240]	; (2c10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x478>)
    2b20:	4798      	blx	r3
    2b22:	e065      	b.n	2bf0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x458>
	CRITICAL_SECTION_ENTER();
    2b24:	a801      	add	r0, sp, #4
    2b26:	4b3b      	ldr	r3, [pc, #236]	; (2c14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x47c>)
    2b28:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2b2a:	4b3b      	ldr	r3, [pc, #236]	; (2c18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x480>)
    2b2c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2b30:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b34:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2b38:	4054      	eors	r4, r2
    2b3a:	400c      	ands	r4, r1
    2b3c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b3e:	a801      	add	r0, sp, #4
    2b40:	4b36      	ldr	r3, [pc, #216]	; (2c1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x484>)
    2b42:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2b44:	4b30      	ldr	r3, [pc, #192]	; (2c08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x470>)
    2b46:	685b      	ldr	r3, [r3, #4]
    2b48:	68da      	ldr	r2, [r3, #12]
    2b4a:	7813      	ldrb	r3, [r2, #0]
    2b4c:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2b50:	429c      	cmp	r4, r3
    2b52:	d00e      	beq.n	2b72 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3da>
		
		uint8_t command;
		uint8_t value;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2b54:	b9ab      	cbnz	r3, 2b82 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ea>
			
			mod->report_array[report_index].helper[0] = 1;
    2b56:	2301      	movs	r3, #1
    2b58:	7013      	strb	r3, [r2, #0]
			grid_ui_report_set_changed_flag(mod, report_index);
		}
		
		
		
		grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[3], 2, command);
    2b5a:	4c2b      	ldr	r4, [pc, #172]	; (2c08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x470>)
    2b5c:	6863      	ldr	r3, [r4, #4]
    2b5e:	6858      	ldr	r0, [r3, #4]
    2b60:	2200      	movs	r2, #0
    2b62:	2102      	movs	r1, #2
    2b64:	3003      	adds	r0, #3
    2b66:	4b29      	ldr	r3, [pc, #164]	; (2c0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x474>)
    2b68:	4798      	blx	r3
		
		grid_ui_report_set_changed_flag(mod, report_index);
    2b6a:	2100      	movs	r1, #0
    2b6c:	4620      	mov	r0, r4
    2b6e:	4b28      	ldr	r3, [pc, #160]	; (2c10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x478>)
    2b70:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()




	grid_module_en16_reva_hardware_transfer_complete = 0;
    2b72:	2200      	movs	r2, #0
    2b74:	4b2a      	ldr	r3, [pc, #168]	; (2c20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x488>)
    2b76:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2b78:	4b2a      	ldr	r3, [pc, #168]	; (2c24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x48c>)
    2b7a:	4798      	blx	r3
}
    2b7c:	b003      	add	sp, #12
    2b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;
    2b82:	2400      	movs	r4, #0
    2b84:	7014      	strb	r4, [r2, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    2b86:	4a28      	ldr	r2, [pc, #160]	; (2c28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x490>)
    2b88:	7a53      	ldrb	r3, [r2, #9]
    2b8a:	3301      	adds	r3, #1
    2b8c:	1ae1      	subs	r1, r4, r3
    2b8e:	f003 0303 	and.w	r3, r3, #3
    2b92:	f001 0103 	and.w	r1, r1, #3
    2b96:	bf58      	it	pl
    2b98:	424b      	negpl	r3, r1
    2b9a:	b2db      	uxtb	r3, r3
    2b9c:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    2b9e:	7a53      	ldrb	r3, [r2, #9]
			grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_state.bank_select);
    2ba0:	7a52      	ldrb	r2, [r2, #9]
    2ba2:	4d19      	ldr	r5, [pc, #100]	; (2c08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x470>)
    2ba4:	686b      	ldr	r3, [r5, #4]
    2ba6:	6858      	ldr	r0, [r3, #4]
    2ba8:	2102      	movs	r1, #2
    2baa:	3007      	adds	r0, #7
    2bac:	4b17      	ldr	r3, [pc, #92]	; (2c0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x474>)
    2bae:	4798      	blx	r3
			grid_ui_report_set_changed_flag(mod, report_index);
    2bb0:	4621      	mov	r1, r4
    2bb2:	4628      	mov	r0, r5
    2bb4:	4b16      	ldr	r3, [pc, #88]	; (2c10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x478>)
    2bb6:	4798      	blx	r3
    2bb8:	e7cf      	b.n	2b5a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c2>
			grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = b_now;
    2bba:	4b12      	ldr	r3, [pc, #72]	; (2c04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x46c>)
    2bbc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2bc0:	7394      	strb	r4, [r2, #14]
				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time)>200){
    2bc2:	6891      	ldr	r1, [r2, #8]
    2bc4:	4818      	ldr	r0, [pc, #96]	; (2c28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x490>)
    2bc6:	4b19      	ldr	r3, [pc, #100]	; (2c2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x494>)
    2bc8:	4798      	blx	r3
    2bca:	28c8      	cmp	r0, #200	; 0xc8
    2bcc:	f67f ae70 	bls.w	28b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value > 64){
    2bd0:	783a      	ldrb	r2, [r7, #0]
    2bd2:	4b0c      	ldr	r3, [pc, #48]	; (2c04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x46c>)
    2bd4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2bd8:	78db      	ldrb	r3, [r3, #3]
    2bda:	2b40      	cmp	r3, #64	; 0x40
    2bdc:	f63f af60 	bhi.w	2aa0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>
					if (grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value < 64){
    2be0:	783a      	ldrb	r2, [r7, #0]
    2be2:	4b08      	ldr	r3, [pc, #32]	; (2c04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x46c>)
    2be4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2be8:	78db      	ldrb	r3, [r3, #3]
    2bea:	2b3f      	cmp	r3, #63	; 0x3f
    2bec:	f67f af79 	bls.w	2ae2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x34a>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2bf0:	783c      	ldrb	r4, [r7, #0]
    2bf2:	480d      	ldr	r0, [pc, #52]	; (2c28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x490>)
    2bf4:	4b0e      	ldr	r3, [pc, #56]	; (2c30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x498>)
    2bf6:	4798      	blx	r3
    2bf8:	4b02      	ldr	r3, [pc, #8]	; (2c04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x46c>)
    2bfa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2bfe:	6098      	str	r0, [r3, #8]
    2c00:	e656      	b.n	28b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x118>
    2c02:	bf00      	nop
    2c04:	2000382c 	.word	0x2000382c
    2c08:	20001ce4 	.word	0x20001ce4
    2c0c:	00003b21 	.word	0x00003b21
    2c10:	0000408f 	.word	0x0000408f
    2c14:	000045cd 	.word	0x000045cd
    2c18:	41008000 	.word	0x41008000
    2c1c:	000045db 	.word	0x000045db
    2c20:	20003628 	.word	0x20003628
    2c24:	00002761 	.word	0x00002761
    2c28:	20001cf0 	.word	0x20001cf0
    2c2c:	00003a25 	.word	0x00003a25
    2c30:	00003a21 	.word	0x00003a21

00002c34 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2c34:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c36:	4b0e      	ldr	r3, [pc, #56]	; (2c70 <grid_module_en16_reva_hardware_init+0x3c>)
    2c38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2c3c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c3e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c44:	629a      	str	r2, [r3, #40]	; 0x28
    2c46:	4a0b      	ldr	r2, [pc, #44]	; (2c74 <grid_module_en16_reva_hardware_init+0x40>)
    2c48:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2c4a:	4c0b      	ldr	r4, [pc, #44]	; (2c78 <grid_module_en16_reva_hardware_init+0x44>)
    2c4c:	2103      	movs	r1, #3
    2c4e:	4620      	mov	r0, r4
    2c50:	4b0a      	ldr	r3, [pc, #40]	; (2c7c <grid_module_en16_reva_hardware_init+0x48>)
    2c52:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2c54:	490a      	ldr	r1, [pc, #40]	; (2c80 <grid_module_en16_reva_hardware_init+0x4c>)
    2c56:	4620      	mov	r0, r4
    2c58:	4b0a      	ldr	r3, [pc, #40]	; (2c84 <grid_module_en16_reva_hardware_init+0x50>)
    2c5a:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2c5c:	490a      	ldr	r1, [pc, #40]	; (2c88 <grid_module_en16_reva_hardware_init+0x54>)
    2c5e:	4620      	mov	r0, r4
    2c60:	4b0a      	ldr	r3, [pc, #40]	; (2c8c <grid_module_en16_reva_hardware_init+0x58>)
    2c62:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2c64:	4a0a      	ldr	r2, [pc, #40]	; (2c90 <grid_module_en16_reva_hardware_init+0x5c>)
    2c66:	2100      	movs	r1, #0
    2c68:	4620      	mov	r0, r4
    2c6a:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <grid_module_en16_reva_hardware_init+0x60>)
    2c6c:	4798      	blx	r3
    2c6e:	bd10      	pop	{r4, pc}
    2c70:	41008000 	.word	0x41008000
    2c74:	c0000020 	.word	0xc0000020
    2c78:	20000f24 	.word	0x20000f24
    2c7c:	00004b11 	.word	0x00004b11
    2c80:	00061a80 	.word	0x00061a80
    2c84:	00004ad5 	.word	0x00004ad5
    2c88:	200017a8 	.word	0x200017a8
    2c8c:	00004bf9 	.word	0x00004bf9
    2c90:	00002799 	.word	0x00002799
    2c94:	00004bb5 	.word	0x00004bb5

00002c98 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c9c:	b091      	sub	sp, #68	; 0x44
    2c9e:	4681      	mov	r9, r0
	
	mod->report_length = 1+16+16+16;
    2ca0:	2331      	movs	r3, #49	; 0x31
    2ca2:	7003      	strb	r3, [r0, #0]
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    2ca4:	f44f 7044 	mov.w	r0, #784	; 0x310
    2ca8:	4b44      	ldr	r3, [pc, #272]	; (2dbc <grid_module_en16_reva_init+0x124>)
    2caa:	4798      	blx	r3
    2cac:	f8c9 0004 	str.w	r0, [r9, #4]
    2cb0:	f04f 37ff 	mov.w	r7, #4294967295
    2cb4:	2401      	movs	r4, #1
    2cb6:	2500      	movs	r5, #0
			);
				
		}

		
		uint32_t payload_length = strlen(payload_template);
    2cb8:	f8df b120 	ldr.w	fp, [pc, #288]	; 2ddc <grid_module_en16_reva_init+0x144>
		helper_template[0] = 0;
		helper_template[1] = 0;
		
		uint8_t helper_length = 2;

		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2cbc:	f8df a120 	ldr.w	sl, [pc, #288]	; 2de0 <grid_module_en16_reva_init+0x148>
    2cc0:	e053      	b.n	2d6a <grid_module_en16_reva_init+0xd2>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    2cc2:	2303      	movs	r3, #3
    2cc4:	9303      	str	r3, [sp, #12]
    2cc6:	2600      	movs	r6, #0
    2cc8:	9602      	str	r6, [sp, #8]
    2cca:	2365      	movs	r3, #101	; 0x65
    2ccc:	9301      	str	r3, [sp, #4]
    2cce:	2364      	movs	r3, #100	; 0x64
    2cd0:	9300      	str	r3, [sp, #0]
    2cd2:	2304      	movs	r3, #4
    2cd4:	2202      	movs	r2, #2
    2cd6:	493a      	ldr	r1, [pc, #232]	; (2dc0 <grid_module_en16_reva_init+0x128>)
    2cd8:	a808      	add	r0, sp, #32
    2cda:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2de4 <grid_module_en16_reva_init+0x14c>
    2cde:	47c0      	blx	r8
		uint32_t payload_length = strlen(payload_template);
    2ce0:	a808      	add	r0, sp, #32
    2ce2:	47d8      	blx	fp
		helper_template[0] = 0;
    2ce4:	f88d 601c 	strb.w	r6, [sp, #28]
		helper_template[1] = 0;
    2ce8:	f88d 601d 	strb.w	r6, [sp, #29]
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2cec:	2302      	movs	r3, #2
    2cee:	9301      	str	r3, [sp, #4]
    2cf0:	ab07      	add	r3, sp, #28
    2cf2:	9300      	str	r3, [sp, #0]
    2cf4:	4603      	mov	r3, r0
    2cf6:	aa08      	add	r2, sp, #32
    2cf8:	4631      	mov	r1, r6
    2cfa:	4648      	mov	r0, r9
    2cfc:	47d0      	blx	sl
    2cfe:	e030      	b.n	2d62 <grid_module_en16_reva_init+0xca>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2d00:	2303      	movs	r3, #3
    2d02:	9304      	str	r3, [sp, #16]
    2d04:	2300      	movs	r3, #0
    2d06:	9303      	str	r3, [sp, #12]
    2d08:	9702      	str	r7, [sp, #8]
    2d0a:	2290      	movs	r2, #144	; 0x90
    2d0c:	9201      	str	r2, [sp, #4]
    2d0e:	9300      	str	r3, [sp, #0]
    2d10:	2202      	movs	r2, #2
    2d12:	492c      	ldr	r1, [pc, #176]	; (2dc4 <grid_module_en16_reva_init+0x12c>)
    2d14:	a808      	add	r0, sp, #32
    2d16:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 2de4 <grid_module_en16_reva_init+0x14c>
    2d1a:	47c0      	blx	r8
    2d1c:	e00f      	b.n	2d3e <grid_module_en16_reva_init+0xa6>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2d1e:	2303      	movs	r3, #3
    2d20:	9304      	str	r3, [sp, #16]
    2d22:	2200      	movs	r2, #0
    2d24:	9203      	str	r2, [sp, #12]
    2d26:	f1a5 0121 	sub.w	r1, r5, #33	; 0x21
    2d2a:	9102      	str	r1, [sp, #8]
    2d2c:	2163      	movs	r1, #99	; 0x63
    2d2e:	9101      	str	r1, [sp, #4]
    2d30:	9200      	str	r2, [sp, #0]
    2d32:	2202      	movs	r2, #2
    2d34:	4923      	ldr	r1, [pc, #140]	; (2dc4 <grid_module_en16_reva_init+0x12c>)
    2d36:	a808      	add	r0, sp, #32
    2d38:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2de4 <grid_module_en16_reva_init+0x14c>
    2d3c:	47c0      	blx	r8
		uint32_t payload_length = strlen(payload_template);
    2d3e:	a808      	add	r0, sp, #32
    2d40:	47d8      	blx	fp
		helper_template[0] = 0;
    2d42:	2300      	movs	r3, #0
    2d44:	f88d 301c 	strb.w	r3, [sp, #28]
		helper_template[1] = 0;
    2d48:	f88d 301d 	strb.w	r3, [sp, #29]
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    2d4c:	2302      	movs	r3, #2
    2d4e:	9301      	str	r3, [sp, #4]
    2d50:	ab07      	add	r3, sp, #28
    2d52:	9300      	str	r3, [sp, #0]
    2d54:	4603      	mov	r3, r0
    2d56:	aa08      	add	r2, sp, #32
    2d58:	4631      	mov	r1, r6
    2d5a:	4648      	mov	r0, r9
    2d5c:	47d0      	blx	sl
	for(uint8_t i=0; i<1+16+16+16; i++){
    2d5e:	2c30      	cmp	r4, #48	; 0x30
    2d60:	d819      	bhi.n	2d96 <grid_module_en16_reva_init+0xfe>
    2d62:	3501      	adds	r5, #1
    2d64:	3401      	adds	r4, #1
    2d66:	b2e4      	uxtb	r4, r4
    2d68:	3701      	adds	r7, #1
		if (i == 0){
    2d6a:	f015 06ff 	ands.w	r6, r5, #255	; 0xff
    2d6e:	d0a8      	beq.n	2cc2 <grid_module_en16_reva_init+0x2a>
		else if (i<1+16){ // ROTATION
    2d70:	2e10      	cmp	r6, #16
    2d72:	d9c5      	bls.n	2d00 <grid_module_en16_reva_init+0x68>
		else if (i<1+16+16){ // BUTTON
    2d74:	2e20      	cmp	r6, #32
    2d76:	d8d2      	bhi.n	2d1e <grid_module_en16_reva_init+0x86>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2d78:	2303      	movs	r3, #3
    2d7a:	9304      	str	r3, [sp, #16]
    2d7c:	2300      	movs	r3, #0
    2d7e:	9303      	str	r3, [sp, #12]
    2d80:	9702      	str	r7, [sp, #8]
    2d82:	2290      	movs	r2, #144	; 0x90
    2d84:	9201      	str	r2, [sp, #4]
    2d86:	9300      	str	r3, [sp, #0]
    2d88:	2202      	movs	r2, #2
    2d8a:	490e      	ldr	r1, [pc, #56]	; (2dc4 <grid_module_en16_reva_init+0x12c>)
    2d8c:	a808      	add	r0, sp, #32
    2d8e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2de4 <grid_module_en16_reva_init+0x14c>
    2d92:	47c0      	blx	r8
    2d94:	e7d3      	b.n	2d3e <grid_module_en16_reva_init+0xa6>
    2d96:	2300      	movs	r3, #0
		
	}

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    2d98:	490b      	ldr	r1, [pc, #44]	; (2dc8 <grid_module_en16_reva_init+0x130>)
    2d9a:	011a      	lsls	r2, r3, #4
    2d9c:	5453      	strb	r3, [r2, r1]
    2d9e:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    2da0:	2b10      	cmp	r3, #16
    2da2:	d1fa      	bne.n	2d9a <grid_module_en16_reva_init+0x102>
	}
	
	
	grid_led_init(&grid_led_state, 16);
    2da4:	2110      	movs	r1, #16
    2da6:	4809      	ldr	r0, [pc, #36]	; (2dcc <grid_module_en16_reva_init+0x134>)
    2da8:	4b09      	ldr	r3, [pc, #36]	; (2dd0 <grid_module_en16_reva_init+0x138>)
    2daa:	4798      	blx	r3
	
	grid_module_en16_reva_hardware_init();
    2dac:	4b09      	ldr	r3, [pc, #36]	; (2dd4 <grid_module_en16_reva_init+0x13c>)
    2dae:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2db0:	4b09      	ldr	r3, [pc, #36]	; (2dd8 <grid_module_en16_reva_init+0x140>)
    2db2:	4798      	blx	r3
	
}
    2db4:	b011      	add	sp, #68	; 0x44
    2db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dba:	bf00      	nop
    2dbc:	0000b99d 	.word	0x0000b99d
    2dc0:	0000cc50 	.word	0x0000cc50
    2dc4:	0000cc80 	.word	0x0000cc80
    2dc8:	2000382c 	.word	0x2000382c
    2dcc:	200035fc 	.word	0x200035fc
    2dd0:	000021f9 	.word	0x000021f9
    2dd4:	00002c35 	.word	0x00002c35
    2dd8:	00002761 	.word	0x00002761
    2ddc:	0000bdc9 	.word	0x0000bdc9
    2de0:	00003fcd 	.word	0x00003fcd
    2de4:	0000bd81 	.word	0x0000bd81

00002de8 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2de8:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2dea:	4803      	ldr	r0, [pc, #12]	; (2df8 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2dec:	4c03      	ldr	r4, [pc, #12]	; (2dfc <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2dee:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2df0:	4803      	ldr	r0, [pc, #12]	; (2e00 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2df2:	47a0      	blx	r4
    2df4:	bd10      	pop	{r4, pc}
    2df6:	bf00      	nop
    2df8:	20001030 	.word	0x20001030
    2dfc:	000045a5 	.word	0x000045a5
    2e00:	20001204 	.word	0x20001204
    2e04:	00000000 	.word	0x00000000

00002e08 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2e08:	4ba9      	ldr	r3, [pc, #676]	; (30b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    2e0a:	781b      	ldrb	r3, [r3, #0]
    2e0c:	b92b      	cbnz	r3, 2e1a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x12>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    2e0e:	4aa8      	ldr	r2, [pc, #672]	; (30b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    2e10:	7813      	ldrb	r3, [r2, #0]
    2e12:	3301      	adds	r3, #1
    2e14:	b2db      	uxtb	r3, r3
    2e16:	7013      	strb	r3, [r2, #0]
    2e18:	4770      	bx	lr
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2e1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e1e:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    2e20:	4668      	mov	r0, sp
    2e22:	4ba4      	ldr	r3, [pc, #656]	; (30b4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    2e24:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2e26:	4ba4      	ldr	r3, [pc, #656]	; (30b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2e28:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2e2c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2e30:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2e34:	4054      	eors	r4, r2
    2e36:	400c      	ands	r4, r1
    2e38:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2e3a:	4668      	mov	r0, sp
    2e3c:	4b9f      	ldr	r3, [pc, #636]	; (30bc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    2e3e:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = !gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2e40:	4b9f      	ldr	r3, [pc, #636]	; (30c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2e42:	685b      	ldr	r3, [r3, #4]
    2e44:	68db      	ldr	r3, [r3, #12]
    2e46:	781a      	ldrb	r2, [r3, #0]
	uint8_t mapmode_value = !gpio_get_pin_level(MAP_MODE);
    2e48:	f484 6400 	eor.w	r4, r4, #2048	; 0x800
	if (mapmode_value != mod->report_array[report_index].helper[0]){
    2e4c:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    2e50:	4294      	cmp	r4, r2
    2e52:	d004      	beq.n	2e5e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x56>
		
		uint8_t value;
		
		if (mod->report_array[report_index].helper[0] == 0){
    2e54:	2a00      	cmp	r2, #0
    2e56:	f040 8109 	bne.w	306c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x264>
			
			mod->report_array[report_index].helper[0] = 1;
    2e5a:	2201      	movs	r2, #1
    2e5c:	701a      	strb	r2, [r3, #0]


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2e5e:	2300      	movs	r3, #0
    2e60:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2e64:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2e68:	4b96      	ldr	r3, [pc, #600]	; (30c4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2e6a:	781a      	ldrb	r2, [r3, #0]
    2e6c:	3208      	adds	r2, #8
    2e6e:	4996      	ldr	r1, [pc, #600]	; (30c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2e70:	5c8e      	ldrb	r6, [r1, r2]
    2e72:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2e74:	781a      	ldrb	r2, [r3, #0]
    2e76:	b2d2      	uxtb	r2, r2
    2e78:	5c8d      	ldrb	r5, [r1, r2]
    2e7a:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2e7c:	781a      	ldrb	r2, [r3, #0]
    2e7e:	3201      	adds	r2, #1
    2e80:	b2d2      	uxtb	r2, r2
    2e82:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2e84:	781a      	ldrb	r2, [r3, #0]
    2e86:	f002 0207 	and.w	r2, r2, #7
    2e8a:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2e8c:	781b      	ldrb	r3, [r3, #0]
	if (level) {
    2e8e:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2e96:	4b88      	ldr	r3, [pc, #544]	; (30b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2e98:	bf14      	ite	ne
    2e9a:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e9e:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2ea2:	4b88      	ldr	r3, [pc, #544]	; (30c4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2ea4:	781b      	ldrb	r3, [r3, #0]
    2ea6:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2eae:	4b82      	ldr	r3, [pc, #520]	; (30b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2eb0:	bf14      	ite	ne
    2eb2:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2eb6:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2eba:	4b82      	ldr	r3, [pc, #520]	; (30c4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
    2ebc:	781b      	ldrb	r3, [r3, #0]
    2ebe:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ec2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2ec6:	4b7c      	ldr	r3, [pc, #496]	; (30b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    2ec8:	bf14      	ite	ne
    2eca:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ece:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2ed2:	2302      	movs	r3, #2
    2ed4:	f10d 0206 	add.w	r2, sp, #6
    2ed8:	2100      	movs	r1, #0
    2eda:	487c      	ldr	r0, [pc, #496]	; (30cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    2edc:	4c7c      	ldr	r4, [pc, #496]	; (30d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2ede:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2ee0:	2302      	movs	r3, #2
    2ee2:	aa01      	add	r2, sp, #4
    2ee4:	2100      	movs	r1, #0
    2ee6:	487b      	ldr	r0, [pc, #492]	; (30d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2ee8:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2eea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 30e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>
    2eee:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2ef2:	47d8      	blx	fp
    2ef4:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 30ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>
    2ef8:	a36b      	add	r3, pc, #428	; (adr r3, 30a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    2efa:	e9d3 2300 	ldrd	r2, r3, [r3]
    2efe:	47d0      	blx	sl
    2f00:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 30f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>
    2f04:	47c8      	blx	r9
    2f06:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2f0a:	42a0      	cmp	r0, r4
    2f0c:	bf28      	it	cs
    2f0e:	4620      	movcs	r0, r4
    2f10:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2f12:	fa1f f880 	uxth.w	r8, r0
    2f16:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2f1a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2f1e:	47d8      	blx	fp
    2f20:	a361      	add	r3, pc, #388	; (adr r3, 30a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    2f22:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f26:	47d0      	blx	sl
    2f28:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2f2a:	42a0      	cmp	r0, r4
    2f2c:	bf28      	it	cs
    2f2e:	4620      	movcs	r0, r4
    2f30:	b280      	uxth	r0, r0
    2f32:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2f36:	f1a5 0308 	sub.w	r3, r5, #8
    2f3a:	b2db      	uxtb	r3, r3
    2f3c:	2b01      	cmp	r3, #1
    2f3e:	f240 808d 	bls.w	305c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x254>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2f42:	2e0d      	cmp	r6, #13
    2f44:	f240 80d6 	bls.w	30f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>
		
		if (adcresult_0>10000){
    2f48:	f242 7310 	movw	r3, #10000	; 0x2710
    2f4c:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2f4e:	bf8c      	ite	hi
    2f50:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2f52:	237f      	movls	r3, #127	; 0x7f
    2f54:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
			
		if (adcresult_1>10000){
    2f58:	f242 7310 	movw	r3, #10000	; 0x2710
    2f5c:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2f5e:	bf8c      	ite	hi
    2f60:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2f62:	237f      	movls	r3, #127	; 0x7f
    2f64:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_array[adc_index_0+1-4].helper[0]){
    2f68:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2f6c:	3c03      	subs	r4, #3
    2f6e:	0124      	lsls	r4, r4, #4
    2f70:	4b53      	ldr	r3, [pc, #332]	; (30c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2f72:	685b      	ldr	r3, [r3, #4]
    2f74:	4423      	add	r3, r4
    2f76:	68da      	ldr	r2, [r3, #12]
    2f78:	7812      	ldrb	r2, [r2, #0]
    2f7a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2f7e:	4291      	cmp	r1, r2
    2f80:	d02f      	beq.n	2fe2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1da>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2f82:	2a00      	cmp	r2, #0
    2f84:	bf0c      	ite	eq
    2f86:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2f8a:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[5], 2, command);
    2f8e:	6858      	ldr	r0, [r3, #4]
    2f90:	bf0c      	ite	eq
    2f92:	2290      	moveq	r2, #144	; 0x90
    2f94:	2280      	movne	r2, #128	; 0x80
    2f96:	2102      	movs	r1, #2
    2f98:	3005      	adds	r0, #5
    2f9a:	f8df 8148 	ldr.w	r8, [pc, #328]	; 30e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>
    2f9e:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[7], 2, adc_index_0);
    2fa0:	4f47      	ldr	r7, [pc, #284]	; (30c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	4423      	add	r3, r4
    2fa6:	6858      	ldr	r0, [r3, #4]
    2fa8:	4632      	mov	r2, r6
    2faa:	2102      	movs	r1, #2
    2fac:	3007      	adds	r0, #7
    2fae:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[9], 2, velocity);
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	4423      	add	r3, r4
    2fb4:	6858      	ldr	r0, [r3, #4]
    2fb6:	464a      	mov	r2, r9
    2fb8:	2102      	movs	r1, #2
    2fba:	3009      	adds	r0, #9
    2fbc:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1-4].payload[21], 2, actuator);
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	4423      	add	r3, r4
    2fc2:	6858      	ldr	r0, [r3, #4]
    2fc4:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2fc8:	2102      	movs	r1, #2
    2fca:	3015      	adds	r0, #21
    2fcc:	47c0      	blx	r8
			mod->report_array[adc_index_0+1-4].helper[0] = velocity;
    2fce:	687b      	ldr	r3, [r7, #4]
    2fd0:	441c      	add	r4, r3
    2fd2:	68e3      	ldr	r3, [r4, #12]
    2fd4:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_0+1-4);
    2fd8:	1ef1      	subs	r1, r6, #3
    2fda:	b2c9      	uxtb	r1, r1
    2fdc:	4638      	mov	r0, r7
    2fde:	4b3e      	ldr	r3, [pc, #248]	; (30d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2fe0:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_array[adc_index_1+1-4].helper[0]){
    2fe2:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2fe6:	3c03      	subs	r4, #3
    2fe8:	0124      	lsls	r4, r4, #4
    2fea:	4b35      	ldr	r3, [pc, #212]	; (30c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    2fec:	685b      	ldr	r3, [r3, #4]
    2fee:	4423      	add	r3, r4
    2ff0:	68da      	ldr	r2, [r3, #12]
    2ff2:	7812      	ldrb	r2, [r2, #0]
    2ff4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2ff8:	4291      	cmp	r1, r2
    2ffa:	d02f      	beq.n	305c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x254>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2ffc:	2a00      	cmp	r2, #0
    2ffe:	bf0c      	ite	eq
    3000:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    3004:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[5], 2, command);
    3008:	6858      	ldr	r0, [r3, #4]
    300a:	bf0c      	ite	eq
    300c:	2290      	moveq	r2, #144	; 0x90
    300e:	2280      	movne	r2, #128	; 0x80
    3010:	2102      	movs	r1, #2
    3012:	3005      	adds	r0, #5
    3014:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 30e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>
    3018:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[7], 2, adc_index_0);
    301a:	4f29      	ldr	r7, [pc, #164]	; (30c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	4423      	add	r3, r4
    3020:	6858      	ldr	r0, [r3, #4]
    3022:	4632      	mov	r2, r6
    3024:	2102      	movs	r1, #2
    3026:	3007      	adds	r0, #7
    3028:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[9], 2, velocity);
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	4423      	add	r3, r4
    302e:	6858      	ldr	r0, [r3, #4]
    3030:	464a      	mov	r2, r9
    3032:	2102      	movs	r1, #2
    3034:	3009      	adds	r0, #9
    3036:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1-4].payload[21], 2, actuator);
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	4423      	add	r3, r4
    303c:	6858      	ldr	r0, [r3, #4]
    303e:	ea4f 0249 	mov.w	r2, r9, lsl #1
    3042:	2102      	movs	r1, #2
    3044:	3015      	adds	r0, #21
    3046:	47c0      	blx	r8
			mod->report_array[adc_index_1+1-4].helper[0] = velocity;
    3048:	687b      	ldr	r3, [r7, #4]
    304a:	441c      	add	r4, r3
    304c:	68e3      	ldr	r3, [r4, #12]
    304e:	f883 9000 	strb.w	r9, [r3]
			
			grid_ui_report_set_changed_flag(mod, adc_index_1+1-4);
    3052:	1ee9      	subs	r1, r5, #3
    3054:	b2c9      	uxtb	r1, r1
    3056:	4638      	mov	r0, r7
    3058:	4b1f      	ldr	r3, [pc, #124]	; (30d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    305a:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    305c:	2200      	movs	r2, #0
    305e:	4b14      	ldr	r3, [pc, #80]	; (30b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    3060:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    3062:	4b1e      	ldr	r3, [pc, #120]	; (30dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    3064:	4798      	blx	r3
}
    3066:	b003      	add	sp, #12
    3068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod->report_array[report_index].helper[0] = 0;			
    306c:	2400      	movs	r4, #0
    306e:	701c      	strb	r4, [r3, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    3070:	4a1b      	ldr	r2, [pc, #108]	; (30e0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    3072:	7a53      	ldrb	r3, [r2, #9]
    3074:	3301      	adds	r3, #1
    3076:	1ae1      	subs	r1, r4, r3
    3078:	f003 0303 	and.w	r3, r3, #3
    307c:	f001 0103 	and.w	r1, r1, #3
    3080:	bf58      	it	pl
    3082:	424b      	negpl	r3, r1
    3084:	b2db      	uxtb	r3, r3
    3086:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    3088:	7a53      	ldrb	r3, [r2, #9]
			grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_state.bank_select);
    308a:	7a52      	ldrb	r2, [r2, #9]
    308c:	4d0c      	ldr	r5, [pc, #48]	; (30c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    308e:	686b      	ldr	r3, [r5, #4]
    3090:	6858      	ldr	r0, [r3, #4]
    3092:	2102      	movs	r1, #2
    3094:	3007      	adds	r0, #7
    3096:	4b13      	ldr	r3, [pc, #76]	; (30e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    3098:	4798      	blx	r3
			grid_ui_report_set_changed_flag(mod, report_index);
    309a:	4621      	mov	r1, r4
    309c:	4628      	mov	r0, r5
    309e:	4b0e      	ldr	r3, [pc, #56]	; (30d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    30a0:	4798      	blx	r3
    30a2:	e6dc      	b.n	2e5e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x56>
    30a4:	f3af 8000 	nop.w
    30a8:	47ae147b 	.word	0x47ae147b
    30ac:	3ff07ae1 	.word	0x3ff07ae1
    30b0:	200017c0 	.word	0x200017c0
    30b4:	000045cd 	.word	0x000045cd
    30b8:	41008000 	.word	0x41008000
    30bc:	000045db 	.word	0x000045db
    30c0:	20001ce4 	.word	0x20001ce4
    30c4:	200035f8 	.word	0x200035f8
    30c8:	20000334 	.word	0x20000334
    30cc:	20001030 	.word	0x20001030
    30d0:	000044c5 	.word	0x000044c5
    30d4:	20001204 	.word	0x20001204
    30d8:	0000408f 	.word	0x0000408f
    30dc:	00002de9 	.word	0x00002de9
    30e0:	20001cf0 	.word	0x20001cf0
    30e4:	00003b21 	.word	0x00003b21
    30e8:	0000b425 	.word	0x0000b425
    30ec:	0000b4f1 	.word	0x0000b4f1
    30f0:	0000b915 	.word	0x0000b915
		if (adc_index_1 == 0 || adc_index_1 == 1){
    30f4:	2d01      	cmp	r5, #1
    30f6:	d937      	bls.n	3168 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x360>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    30f8:	b2b9      	uxth	r1, r7
    30fa:	4630      	mov	r0, r6
    30fc:	4c36      	ldr	r4, [pc, #216]	; (31d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    30fe:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    3100:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3104:	4628      	mov	r0, r5
    3106:	47a0      	blx	r4
		if (grid_ain_get_changed(adc_index_0)){
    3108:	4630      	mov	r0, r6
    310a:	4b34      	ldr	r3, [pc, #208]	; (31dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>)
    310c:	4798      	blx	r3
    310e:	2800      	cmp	r0, #0
    3110:	d139      	bne.n	3186 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x37e>
		if (grid_ain_get_changed(adc_index_1)){
    3112:	4628      	mov	r0, r5
    3114:	4b31      	ldr	r3, [pc, #196]	; (31dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>)
    3116:	4798      	blx	r3
    3118:	2800      	cmp	r0, #0
    311a:	d09f      	beq.n	305c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x254>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    311c:	2107      	movs	r1, #7
    311e:	4628      	mov	r0, r5
    3120:	4b2f      	ldr	r3, [pc, #188]	; (31e0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d8>)
    3122:	4798      	blx	r3
    3124:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    3126:	1c6f      	adds	r7, r5, #1
    3128:	ea4f 1807 	mov.w	r8, r7, lsl #4
    312c:	4c2d      	ldr	r4, [pc, #180]	; (31e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3dc>)
    312e:	6863      	ldr	r3, [r4, #4]
    3130:	4443      	add	r3, r8
    3132:	6858      	ldr	r0, [r3, #4]
    3134:	462a      	mov	r2, r5
    3136:	2102      	movs	r1, #2
    3138:	3007      	adds	r0, #7
    313a:	4d2b      	ldr	r5, [pc, #172]	; (31e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3e0>)
    313c:	47a8      	blx	r5
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    313e:	6863      	ldr	r3, [r4, #4]
    3140:	4443      	add	r3, r8
    3142:	6858      	ldr	r0, [r3, #4]
    3144:	b2f2      	uxtb	r2, r6
    3146:	2102      	movs	r1, #2
    3148:	3009      	adds	r0, #9
    314a:	47a8      	blx	r5
			uint8_t actuator = 2*value;
    314c:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    314e:	6863      	ldr	r3, [r4, #4]
    3150:	4443      	add	r3, r8
    3152:	6858      	ldr	r0, [r3, #4]
    3154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3158:	2102      	movs	r1, #2
    315a:	3015      	adds	r0, #21
    315c:	47a8      	blx	r5
			grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    315e:	b2f9      	uxtb	r1, r7
    3160:	4620      	mov	r0, r4
    3162:	4b22      	ldr	r3, [pc, #136]	; (31ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3e4>)
    3164:	4798      	blx	r3
    3166:	e779      	b.n	305c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x254>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    3168:	b2b9      	uxth	r1, r7
    316a:	f64f 78ff 	movw	r8, #65535	; 0xffff
    316e:	eba8 0101 	sub.w	r1, r8, r1
    3172:	4630      	mov	r0, r6
    3174:	4c18      	ldr	r4, [pc, #96]	; (31d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    3176:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    3178:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    317c:	eba8 0101 	sub.w	r1, r8, r1
    3180:	4628      	mov	r0, r5
    3182:	47a0      	blx	r4
    3184:	e7c0      	b.n	3108 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    3186:	2107      	movs	r1, #7
    3188:	4630      	mov	r0, r6
    318a:	4b15      	ldr	r3, [pc, #84]	; (31e0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d8>)
    318c:	4798      	blx	r3
    318e:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    3190:	f106 0801 	add.w	r8, r6, #1
    3194:	ea4f 1908 	mov.w	r9, r8, lsl #4
    3198:	4c12      	ldr	r4, [pc, #72]	; (31e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3dc>)
    319a:	6863      	ldr	r3, [r4, #4]
    319c:	444b      	add	r3, r9
    319e:	6858      	ldr	r0, [r3, #4]
    31a0:	4632      	mov	r2, r6
    31a2:	2102      	movs	r1, #2
    31a4:	3007      	adds	r0, #7
    31a6:	4e10      	ldr	r6, [pc, #64]	; (31e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3e0>)
    31a8:	47b0      	blx	r6
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    31aa:	6863      	ldr	r3, [r4, #4]
    31ac:	444b      	add	r3, r9
    31ae:	6858      	ldr	r0, [r3, #4]
    31b0:	b2fa      	uxtb	r2, r7
    31b2:	2102      	movs	r1, #2
    31b4:	3009      	adds	r0, #9
    31b6:	47b0      	blx	r6
			uint8_t actuator = 2*value;
    31b8:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    31ba:	6863      	ldr	r3, [r4, #4]
    31bc:	444b      	add	r3, r9
    31be:	6858      	ldr	r0, [r3, #4]
    31c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    31c4:	2102      	movs	r1, #2
    31c6:	3015      	adds	r0, #21
    31c8:	47b0      	blx	r6
			grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    31ca:	fa5f f188 	uxtb.w	r1, r8
    31ce:	4620      	mov	r0, r4
    31d0:	4b06      	ldr	r3, [pc, #24]	; (31ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3e4>)
    31d2:	4798      	blx	r3
    31d4:	e79d      	b.n	3112 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30a>
    31d6:	bf00      	nop
    31d8:	000011e9 	.word	0x000011e9
    31dc:	000012e5 	.word	0x000012e5
    31e0:	000012f5 	.word	0x000012f5
    31e4:	20001ce4 	.word	0x20001ce4
    31e8:	00003b21 	.word	0x00003b21
    31ec:	0000408f 	.word	0x0000408f

000031f0 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    31f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    31f2:	4f0b      	ldr	r7, [pc, #44]	; (3220 <grid_module_pbf4_reva_hardware_init+0x30>)
    31f4:	4c0b      	ldr	r4, [pc, #44]	; (3224 <grid_module_pbf4_reva_hardware_init+0x34>)
    31f6:	463b      	mov	r3, r7
    31f8:	2200      	movs	r2, #0
    31fa:	4611      	mov	r1, r2
    31fc:	4620      	mov	r0, r4
    31fe:	4e0a      	ldr	r6, [pc, #40]	; (3228 <grid_module_pbf4_reva_hardware_init+0x38>)
    3200:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    3202:	4d0a      	ldr	r5, [pc, #40]	; (322c <grid_module_pbf4_reva_hardware_init+0x3c>)
    3204:	463b      	mov	r3, r7
    3206:	2200      	movs	r2, #0
    3208:	4611      	mov	r1, r2
    320a:	4628      	mov	r0, r5
    320c:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    320e:	2100      	movs	r1, #0
    3210:	4620      	mov	r0, r4
    3212:	4c07      	ldr	r4, [pc, #28]	; (3230 <grid_module_pbf4_reva_hardware_init+0x40>)
    3214:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3216:	2100      	movs	r1, #0
    3218:	4628      	mov	r0, r5
    321a:	47a0      	blx	r4
    321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    321e:	bf00      	nop
    3220:	00002e09 	.word	0x00002e09
    3224:	20001030 	.word	0x20001030
    3228:	00004445 	.word	0x00004445
    322c:	20001204 	.word	0x20001204
    3230:	00004405 	.word	0x00004405

00003234 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    3234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3238:	b096      	sub	sp, #88	; 0x58
    323a:	4606      	mov	r6, r0
	
	grid_ui_model_init(mod, 13);
    323c:	210d      	movs	r1, #13
    323e:	4b2f      	ldr	r3, [pc, #188]	; (32fc <grid_module_pbf4_reva_init+0xc8>)
    3240:	4798      	blx	r3
	
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<mod->report_length; i++){
    3242:	7833      	ldrb	r3, [r6, #0]
    3244:	2b00      	cmp	r3, #0
    3246:	d047      	beq.n	32d8 <grid_module_pbf4_reva_init+0xa4>
    3248:	2400      	movs	r4, #0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    324a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 3324 <grid_module_pbf4_reva_init+0xf0>
    324e:	4625      	mov	r5, r4
    3250:	e022      	b.n	3298 <grid_module_pbf4_reva_init+0x64>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    3252:	2303      	movs	r3, #3
    3254:	9303      	str	r3, [sp, #12]
    3256:	9502      	str	r5, [sp, #8]
    3258:	2365      	movs	r3, #101	; 0x65
    325a:	9301      	str	r3, [sp, #4]
    325c:	2364      	movs	r3, #100	; 0x64
    325e:	9300      	str	r3, [sp, #0]
    3260:	2304      	movs	r3, #4
    3262:	2202      	movs	r2, #2
    3264:	4926      	ldr	r1, [pc, #152]	; (3300 <grid_module_pbf4_reva_init+0xcc>)
    3266:	a80e      	add	r0, sp, #56	; 0x38
    3268:	4f26      	ldr	r7, [pc, #152]	; (3304 <grid_module_pbf4_reva_init+0xd0>)
    326a:	47b8      	blx	r7
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    326c:	a80e      	add	r0, sp, #56	; 0x38
    326e:	4b26      	ldr	r3, [pc, #152]	; (3308 <grid_module_pbf4_reva_init+0xd4>)
    3270:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3272:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
		helper_template[1] = 0;
    3276:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
			
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    327a:	2302      	movs	r3, #2
    327c:	9301      	str	r3, [sp, #4]
    327e:	ab0d      	add	r3, sp, #52	; 0x34
    3280:	9300      	str	r3, [sp, #0]
    3282:	b2c3      	uxtb	r3, r0
    3284:	aa0e      	add	r2, sp, #56	; 0x38
    3286:	4621      	mov	r1, r4
    3288:	4630      	mov	r0, r6
    328a:	4f20      	ldr	r7, [pc, #128]	; (330c <grid_module_pbf4_reva_init+0xd8>)
    328c:	47b8      	blx	r7
	for(uint8_t i=0; i<mod->report_length; i++){
    328e:	3401      	adds	r4, #1
    3290:	b2e4      	uxtb	r4, r4
    3292:	7833      	ldrb	r3, [r6, #0]
    3294:	42a3      	cmp	r3, r4
    3296:	d91f      	bls.n	32d8 <grid_module_pbf4_reva_init+0xa4>
		if (i == 0){
    3298:	2c00      	cmp	r4, #0
    329a:	d0da      	beq.n	3252 <grid_module_pbf4_reva_init+0x1e>
		else if (i<9){ // PORENTIOMETERS & FADERS
    329c:	2c08      	cmp	r4, #8
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    329e:	f104 31ff 	add.w	r1, r4, #4294967295
    32a2:	f04f 0303 	mov.w	r3, #3
    32a6:	930b      	str	r3, [sp, #44]	; 0x2c
    32a8:	950a      	str	r5, [sp, #40]	; 0x28
    32aa:	9109      	str	r1, [sp, #36]	; 0x24
    32ac:	f04f 0263 	mov.w	r2, #99	; 0x63
    32b0:	9208      	str	r2, [sp, #32]
    32b2:	9507      	str	r5, [sp, #28]
    32b4:	9306      	str	r3, [sp, #24]
    32b6:	f04f 0202 	mov.w	r2, #2
    32ba:	9205      	str	r2, [sp, #20]
    32bc:	9304      	str	r3, [sp, #16]
    32be:	9503      	str	r5, [sp, #12]
    32c0:	9102      	str	r1, [sp, #8]
    32c2:	bf94      	ite	ls
    32c4:	23b0      	movls	r3, #176	; 0xb0
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    32c6:	2390      	movhi	r3, #144	; 0x90
    32c8:	9301      	str	r3, [sp, #4]
    32ca:	9500      	str	r5, [sp, #0]
    32cc:	462b      	mov	r3, r5
    32ce:	4641      	mov	r1, r8
    32d0:	a80e      	add	r0, sp, #56	; 0x38
    32d2:	4f0c      	ldr	r7, [pc, #48]	; (3304 <grid_module_pbf4_reva_init+0xd0>)
    32d4:	47b8      	blx	r7
    32d6:	e7c9      	b.n	326c <grid_module_pbf4_reva_init+0x38>
		
	}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    32d8:	2307      	movs	r3, #7
    32da:	220e      	movs	r2, #14
    32dc:	2105      	movs	r1, #5
    32de:	2010      	movs	r0, #16
    32e0:	4c0b      	ldr	r4, [pc, #44]	; (3310 <grid_module_pbf4_reva_init+0xdc>)
    32e2:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    32e4:	210c      	movs	r1, #12
    32e6:	480b      	ldr	r0, [pc, #44]	; (3314 <grid_module_pbf4_reva_init+0xe0>)
    32e8:	4b0b      	ldr	r3, [pc, #44]	; (3318 <grid_module_pbf4_reva_init+0xe4>)
    32ea:	4798      	blx	r3
	
	grid_module_pbf4_reva_hardware_init();
    32ec:	4b0b      	ldr	r3, [pc, #44]	; (331c <grid_module_pbf4_reva_init+0xe8>)
    32ee:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    32f0:	4b0b      	ldr	r3, [pc, #44]	; (3320 <grid_module_pbf4_reva_init+0xec>)
    32f2:	4798      	blx	r3
	
    32f4:	b016      	add	sp, #88	; 0x58
    32f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32fa:	bf00      	nop
    32fc:	00003fb5 	.word	0x00003fb5
    3300:	0000cc50 	.word	0x0000cc50
    3304:	0000bd81 	.word	0x0000bd81
    3308:	0000bdc9 	.word	0x0000bdc9
    330c:	00003fcd 	.word	0x00003fcd
    3310:	0000119d 	.word	0x0000119d
    3314:	200035fc 	.word	0x200035fc
    3318:	000021f9 	.word	0x000021f9
    331c:	000031f1 	.word	0x000031f1
    3320:	00002de9 	.word	0x00002de9
    3324:	0000cc68 	.word	0x0000cc68

00003328 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    3328:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    332a:	4803      	ldr	r0, [pc, #12]	; (3338 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    332c:	4c03      	ldr	r4, [pc, #12]	; (333c <grid_module_po16_revb_hardware_start_transfer+0x14>)
    332e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3330:	4803      	ldr	r0, [pc, #12]	; (3340 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    3332:	47a0      	blx	r4
    3334:	bd10      	pop	{r4, pc}
    3336:	bf00      	nop
    3338:	20001030 	.word	0x20001030
    333c:	000045a5 	.word	0x000045a5
    3340:	20001204 	.word	0x20001204
    3344:	00000000 	.word	0x00000000

00003348 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3348:	4b93      	ldr	r3, [pc, #588]	; (3598 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    334a:	781b      	ldrb	r3, [r3, #0]
    334c:	b92b      	cbnz	r3, 335a <grid_module_po16_revb_hardware_transfer_complete_cb+0x12>
		grid_module_po16_revb_hardware_transfer_complete++;
    334e:	4a92      	ldr	r2, [pc, #584]	; (3598 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    3350:	7813      	ldrb	r3, [r2, #0]
    3352:	3301      	adds	r3, #1
    3354:	b2db      	uxtb	r3, r3
    3356:	7013      	strb	r3, [r2, #0]
    3358:	4770      	bx	lr
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    335a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    335e:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    3360:	4668      	mov	r0, sp
    3362:	4b8e      	ldr	r3, [pc, #568]	; (359c <grid_module_po16_revb_hardware_transfer_complete_cb+0x254>)
    3364:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3366:	4b8e      	ldr	r3, [pc, #568]	; (35a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    3368:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    336c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3370:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3374:	4054      	eors	r4, r2
    3376:	400c      	ands	r4, r1
    3378:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    337a:	4668      	mov	r0, sp
    337c:	4b89      	ldr	r3, [pc, #548]	; (35a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>)
    337e:	4798      	blx	r3

	uint8_t report_index = 0;

	uint8_t mapmode_value = !gpio_get_pin_level(MAP_MODE);

	if (mapmode_value != mod->report_array[report_index].helper[0]){
    3380:	4b89      	ldr	r3, [pc, #548]	; (35a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    3382:	685b      	ldr	r3, [r3, #4]
    3384:	68db      	ldr	r3, [r3, #12]
    3386:	781a      	ldrb	r2, [r3, #0]
	uint8_t mapmode_value = !gpio_get_pin_level(MAP_MODE);
    3388:	f484 6400 	eor.w	r4, r4, #2048	; 0x800
	if (mapmode_value != mod->report_array[report_index].helper[0]){
    338c:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    3390:	4294      	cmp	r4, r2
    3392:	d004      	beq.n	339e <grid_module_po16_revb_hardware_transfer_complete_cb+0x56>
		
		uint8_t value;
		
		if (mod->report_array[report_index].helper[0] == 0){
    3394:	2a00      	cmp	r2, #0
    3396:	f040 8084 	bne.w	34a2 <grid_module_po16_revb_hardware_transfer_complete_cb+0x15a>
			
			mod->report_array[report_index].helper[0] = 1;
    339a:	2201      	movs	r2, #1
    339c:	701a      	strb	r2, [r3, #0]


	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    339e:	2300      	movs	r3, #0
    33a0:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    33a4:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    33a8:	4b7b      	ldr	r3, [pc, #492]	; (3598 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    33aa:	785a      	ldrb	r2, [r3, #1]
    33ac:	3208      	adds	r2, #8
    33ae:	497f      	ldr	r1, [pc, #508]	; (35ac <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>)
    33b0:	5c8d      	ldrb	r5, [r1, r2]
    33b2:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    33b4:	785a      	ldrb	r2, [r3, #1]
    33b6:	b2d2      	uxtb	r2, r2
    33b8:	5c8c      	ldrb	r4, [r1, r2]
    33ba:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    33bc:	785a      	ldrb	r2, [r3, #1]
    33be:	3201      	adds	r2, #1
    33c0:	b2d2      	uxtb	r2, r2
    33c2:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    33c4:	785a      	ldrb	r2, [r3, #1]
    33c6:	f002 0207 	and.w	r2, r2, #7
    33ca:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    33cc:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    33ce:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    33d6:	4b72      	ldr	r3, [pc, #456]	; (35a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    33d8:	bf14      	ite	ne
    33da:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33de:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    33e2:	4b6d      	ldr	r3, [pc, #436]	; (3598 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    33e4:	785b      	ldrb	r3, [r3, #1]
    33e6:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    33ee:	4b6c      	ldr	r3, [pc, #432]	; (35a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    33f0:	bf14      	ite	ne
    33f2:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33f6:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    33fa:	4b67      	ldr	r3, [pc, #412]	; (3598 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    33fc:	785b      	ldrb	r3, [r3, #1]
    33fe:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3402:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3406:	4b66      	ldr	r3, [pc, #408]	; (35a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    3408:	bf14      	ite	ne
    340a:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    340e:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    3412:	2302      	movs	r3, #2
    3414:	f10d 0206 	add.w	r2, sp, #6
    3418:	2100      	movs	r1, #0
    341a:	4865      	ldr	r0, [pc, #404]	; (35b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>)
    341c:	4e65      	ldr	r6, [pc, #404]	; (35b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>)
    341e:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    3420:	2302      	movs	r3, #2
    3422:	aa01      	add	r2, sp, #4
    3424:	2100      	movs	r1, #0
    3426:	4864      	ldr	r0, [pc, #400]	; (35b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>)
    3428:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    342a:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 35d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x290>
    342e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    3432:	47d0      	blx	sl
    3434:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 35dc <grid_module_po16_revb_hardware_transfer_complete_cb+0x294>
    3438:	a355      	add	r3, pc, #340	; (adr r3, 3590 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    343a:	e9d3 2300 	ldrd	r2, r3, [r3]
    343e:	47c8      	blx	r9
    3440:	f8df 819c 	ldr.w	r8, [pc, #412]	; 35e0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x298>
    3444:	47c0      	blx	r8
    3446:	f64f 76ff 	movw	r6, #65535	; 0xffff
    344a:	42b0      	cmp	r0, r6
    344c:	bf28      	it	cs
    344e:	4630      	movcs	r0, r6
    3450:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    3452:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    3456:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    345a:	47d0      	blx	sl
    345c:	a34c      	add	r3, pc, #304	; (adr r3, 3590 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    345e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3462:	47c8      	blx	r9
    3464:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    3466:	42b0      	cmp	r0, r6
    3468:	bf28      	it	cs
    346a:	4630      	movcs	r0, r6
    346c:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    3470:	b2b9      	uxth	r1, r7
    3472:	4628      	mov	r0, r5
    3474:	4e51      	ldr	r6, [pc, #324]	; (35bc <grid_module_po16_revb_hardware_transfer_complete_cb+0x274>)
    3476:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    3478:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    347c:	4620      	mov	r0, r4
    347e:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    3480:	4628      	mov	r0, r5
    3482:	4b4f      	ldr	r3, [pc, #316]	; (35c0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x278>)
    3484:	4798      	blx	r3
    3486:	bb40      	cbnz	r0, 34da <grid_module_po16_revb_hardware_transfer_complete_cb+0x192>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    3488:	4620      	mov	r0, r4
    348a:	4b4d      	ldr	r3, [pc, #308]	; (35c0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x278>)
    348c:	4798      	blx	r3
    348e:	2800      	cmp	r0, #0
    3490:	d152      	bne.n	3538 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    3492:	2200      	movs	r2, #0
    3494:	4b40      	ldr	r3, [pc, #256]	; (3598 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    3496:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    3498:	4b4a      	ldr	r3, [pc, #296]	; (35c4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x27c>)
    349a:	4798      	blx	r3
}
    349c:	b002      	add	sp, #8
    349e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			mod->report_array[report_index].helper[0] = 0;			
    34a2:	2400      	movs	r4, #0
    34a4:	701c      	strb	r4, [r3, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    34a6:	4a48      	ldr	r2, [pc, #288]	; (35c8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x280>)
    34a8:	7a53      	ldrb	r3, [r2, #9]
    34aa:	3301      	adds	r3, #1
    34ac:	1ae1      	subs	r1, r4, r3
    34ae:	f003 0303 	and.w	r3, r3, #3
    34b2:	f001 0103 	and.w	r1, r1, #3
    34b6:	bf58      	it	pl
    34b8:	424b      	negpl	r3, r1
    34ba:	b2db      	uxtb	r3, r3
    34bc:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    34be:	7a53      	ldrb	r3, [r2, #9]
			grid_sys_write_hex_string_value(&mod->report_array[report_index].payload[7], 2, grid_sys_state.bank_select);
    34c0:	7a52      	ldrb	r2, [r2, #9]
    34c2:	4d39      	ldr	r5, [pc, #228]	; (35a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    34c4:	686b      	ldr	r3, [r5, #4]
    34c6:	6858      	ldr	r0, [r3, #4]
    34c8:	2102      	movs	r1, #2
    34ca:	3007      	adds	r0, #7
    34cc:	4b3f      	ldr	r3, [pc, #252]	; (35cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x284>)
    34ce:	4798      	blx	r3
			grid_ui_report_set_changed_flag(mod, report_index);
    34d0:	4621      	mov	r1, r4
    34d2:	4628      	mov	r0, r5
    34d4:	4b3e      	ldr	r3, [pc, #248]	; (35d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x288>)
    34d6:	4798      	blx	r3
    34d8:	e761      	b.n	339e <grid_module_po16_revb_hardware_transfer_complete_cb+0x56>
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    34da:	2107      	movs	r1, #7
    34dc:	4628      	mov	r0, r5
    34de:	4b3d      	ldr	r3, [pc, #244]	; (35d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x28c>)
    34e0:	4798      	blx	r3
    34e2:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[7], 2, adc_index_0);
    34e6:	f105 0901 	add.w	r9, r5, #1
    34ea:	ea4f 1709 	mov.w	r7, r9, lsl #4
    34ee:	4e2e      	ldr	r6, [pc, #184]	; (35a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    34f0:	6873      	ldr	r3, [r6, #4]
    34f2:	443b      	add	r3, r7
    34f4:	6858      	ldr	r0, [r3, #4]
    34f6:	462a      	mov	r2, r5
    34f8:	2102      	movs	r1, #2
    34fa:	3007      	adds	r0, #7
    34fc:	4d33      	ldr	r5, [pc, #204]	; (35cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x284>)
    34fe:	47a8      	blx	r5
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[9], 2, value);
    3500:	6873      	ldr	r3, [r6, #4]
    3502:	443b      	add	r3, r7
    3504:	6858      	ldr	r0, [r3, #4]
    3506:	4642      	mov	r2, r8
    3508:	2102      	movs	r1, #2
    350a:	3009      	adds	r0, #9
    350c:	47a8      	blx	r5
		uint8_t actuator = 2*value;
    350e:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_0+1].payload[21], 2, actuator);
    3512:	6873      	ldr	r3, [r6, #4]
    3514:	443b      	add	r3, r7
    3516:	6858      	ldr	r0, [r3, #4]
    3518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    351c:	2102      	movs	r1, #2
    351e:	3015      	adds	r0, #21
    3520:	47a8      	blx	r5
		grid_ui_report_set_changed_flag(mod, adc_index_0+1);
    3522:	fa5f f189 	uxtb.w	r1, r9
    3526:	4630      	mov	r0, r6
    3528:	4b29      	ldr	r3, [pc, #164]	; (35d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x288>)
    352a:	4798      	blx	r3
		mod->report_array[adc_index_0+1].helper[0] = value;
    352c:	6873      	ldr	r3, [r6, #4]
    352e:	441f      	add	r7, r3
    3530:	68fb      	ldr	r3, [r7, #12]
    3532:	f883 8000 	strb.w	r8, [r3]
    3536:	e7a7      	b.n	3488 <grid_module_po16_revb_hardware_transfer_complete_cb+0x140>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3538:	2107      	movs	r1, #7
    353a:	4620      	mov	r0, r4
    353c:	4b25      	ldr	r3, [pc, #148]	; (35d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x28c>)
    353e:	4798      	blx	r3
    3540:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[7], 2, adc_index_1);
    3542:	f104 0801 	add.w	r8, r4, #1
    3546:	ea4f 1608 	mov.w	r6, r8, lsl #4
    354a:	4d17      	ldr	r5, [pc, #92]	; (35a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>)
    354c:	686b      	ldr	r3, [r5, #4]
    354e:	4433      	add	r3, r6
    3550:	6858      	ldr	r0, [r3, #4]
    3552:	4622      	mov	r2, r4
    3554:	2102      	movs	r1, #2
    3556:	3007      	adds	r0, #7
    3558:	4c1c      	ldr	r4, [pc, #112]	; (35cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x284>)
    355a:	47a0      	blx	r4
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[9], 2, value);
    355c:	686b      	ldr	r3, [r5, #4]
    355e:	4433      	add	r3, r6
    3560:	6858      	ldr	r0, [r3, #4]
    3562:	463a      	mov	r2, r7
    3564:	2102      	movs	r1, #2
    3566:	3009      	adds	r0, #9
    3568:	47a0      	blx	r4
		uint8_t actuator = 2*value;
    356a:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_array[adc_index_1+1].payload[21], 2, actuator);
    356c:	686b      	ldr	r3, [r5, #4]
    356e:	4433      	add	r3, r6
    3570:	6858      	ldr	r0, [r3, #4]
    3572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3576:	2102      	movs	r1, #2
    3578:	3015      	adds	r0, #21
    357a:	47a0      	blx	r4
		grid_ui_report_set_changed_flag(mod, adc_index_1+1);
    357c:	fa5f f188 	uxtb.w	r1, r8
    3580:	4628      	mov	r0, r5
    3582:	4b13      	ldr	r3, [pc, #76]	; (35d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x288>)
    3584:	4798      	blx	r3
		mod->report_array[adc_index_1+1].helper[0] = value;
    3586:	686b      	ldr	r3, [r5, #4]
    3588:	441e      	add	r6, r3
    358a:	68f3      	ldr	r3, [r6, #12]
    358c:	701f      	strb	r7, [r3, #0]
    358e:	e780      	b.n	3492 <grid_module_po16_revb_hardware_transfer_complete_cb+0x14a>
    3590:	47ae147b 	.word	0x47ae147b
    3594:	3ff07ae1 	.word	0x3ff07ae1
    3598:	20000646 	.word	0x20000646
    359c:	000045cd 	.word	0x000045cd
    35a0:	41008000 	.word	0x41008000
    35a4:	000045db 	.word	0x000045db
    35a8:	20001ce4 	.word	0x20001ce4
    35ac:	20000344 	.word	0x20000344
    35b0:	20001030 	.word	0x20001030
    35b4:	000044c5 	.word	0x000044c5
    35b8:	20001204 	.word	0x20001204
    35bc:	000011e9 	.word	0x000011e9
    35c0:	000012e5 	.word	0x000012e5
    35c4:	00003329 	.word	0x00003329
    35c8:	20001cf0 	.word	0x20001cf0
    35cc:	00003b21 	.word	0x00003b21
    35d0:	0000408f 	.word	0x0000408f
    35d4:	000012f5 	.word	0x000012f5
    35d8:	0000b425 	.word	0x0000b425
    35dc:	0000b4f1 	.word	0x0000b4f1
    35e0:	0000b915 	.word	0x0000b915

000035e4 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    35e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    35e6:	4f0b      	ldr	r7, [pc, #44]	; (3614 <grid_module_po16_revb_hardware_init+0x30>)
    35e8:	4c0b      	ldr	r4, [pc, #44]	; (3618 <grid_module_po16_revb_hardware_init+0x34>)
    35ea:	463b      	mov	r3, r7
    35ec:	2200      	movs	r2, #0
    35ee:	4611      	mov	r1, r2
    35f0:	4620      	mov	r0, r4
    35f2:	4e0a      	ldr	r6, [pc, #40]	; (361c <grid_module_po16_revb_hardware_init+0x38>)
    35f4:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    35f6:	4d0a      	ldr	r5, [pc, #40]	; (3620 <grid_module_po16_revb_hardware_init+0x3c>)
    35f8:	463b      	mov	r3, r7
    35fa:	2200      	movs	r2, #0
    35fc:	4611      	mov	r1, r2
    35fe:	4628      	mov	r0, r5
    3600:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    3602:	2100      	movs	r1, #0
    3604:	4620      	mov	r0, r4
    3606:	4c07      	ldr	r4, [pc, #28]	; (3624 <grid_module_po16_revb_hardware_init+0x40>)
    3608:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    360a:	2100      	movs	r1, #0
    360c:	4628      	mov	r0, r5
    360e:	47a0      	blx	r4
    3610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3612:	bf00      	nop
    3614:	00003349 	.word	0x00003349
    3618:	20001030 	.word	0x20001030
    361c:	00004445 	.word	0x00004445
    3620:	20001204 	.word	0x20001204
    3624:	00004405 	.word	0x00004405

00003628 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    3628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    362c:	b099      	sub	sp, #100	; 0x64
    362e:	900d      	str	r0, [sp, #52]	; 0x34
	

	grid_ui_model_init(mod, 17);
    3630:	2111      	movs	r1, #17
    3632:	4b33      	ldr	r3, [pc, #204]	; (3700 <grid_module_po16_revb_init+0xd8>)
    3634:	4798      	blx	r3
    3636:	2601      	movs	r6, #1
    3638:	2500      	movs	r5, #0
			);
			
		}
		else{
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    363a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 3720 <grid_module_po16_revb_init+0xf8>
    363e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 3724 <grid_module_po16_revb_init+0xfc>
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3642:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 3728 <grid_module_po16_revb_init+0x100>
    3646:	e01f      	b.n	3688 <grid_module_po16_revb_init+0x60>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c",
    3648:	2303      	movs	r3, #3
    364a:	9303      	str	r3, [sp, #12]
    364c:	2400      	movs	r4, #0
    364e:	9402      	str	r4, [sp, #8]
    3650:	2365      	movs	r3, #101	; 0x65
    3652:	9301      	str	r3, [sp, #4]
    3654:	2364      	movs	r3, #100	; 0x64
    3656:	9300      	str	r3, [sp, #0]
    3658:	2304      	movs	r3, #4
    365a:	2202      	movs	r2, #2
    365c:	4929      	ldr	r1, [pc, #164]	; (3704 <grid_module_po16_revb_init+0xdc>)
    365e:	a810      	add	r0, sp, #64	; 0x40
    3660:	47d0      	blx	sl
		uint8_t payload_length = strlen(payload_template);
    3662:	a810      	add	r0, sp, #64	; 0x40
    3664:	47c8      	blx	r9

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3666:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
		helper_template[1] = 0;
    366a:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
		
		uint8_t helper_length = 2;
		
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    366e:	2302      	movs	r3, #2
    3670:	9301      	str	r3, [sp, #4]
    3672:	ab0f      	add	r3, sp, #60	; 0x3c
    3674:	9300      	str	r3, [sp, #0]
    3676:	b2c3      	uxtb	r3, r0
    3678:	aa10      	add	r2, sp, #64	; 0x40
    367a:	4621      	mov	r1, r4
    367c:	980d      	ldr	r0, [sp, #52]	; 0x34
    367e:	4c22      	ldr	r4, [pc, #136]	; (3708 <grid_module_po16_revb_init+0xe0>)
    3680:	47a0      	blx	r4
    3682:	3501      	adds	r5, #1
    3684:	3601      	adds	r6, #1
    3686:	b2f6      	uxtb	r6, r6
		if (i == 0){
    3688:	f015 08ff 	ands.w	r8, r5, #255	; 0xff
    368c:	d0dc      	beq.n	3648 <grid_module_po16_revb_init+0x20>
    368e:	1e6a      	subs	r2, r5, #1
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3690:	2303      	movs	r3, #3
    3692:	930b      	str	r3, [sp, #44]	; 0x2c
    3694:	2400      	movs	r4, #0
    3696:	940a      	str	r4, [sp, #40]	; 0x28
    3698:	9209      	str	r2, [sp, #36]	; 0x24
    369a:	2163      	movs	r1, #99	; 0x63
    369c:	9108      	str	r1, [sp, #32]
    369e:	9407      	str	r4, [sp, #28]
    36a0:	9306      	str	r3, [sp, #24]
    36a2:	2702      	movs	r7, #2
    36a4:	9705      	str	r7, [sp, #20]
    36a6:	9304      	str	r3, [sp, #16]
    36a8:	9403      	str	r4, [sp, #12]
    36aa:	9202      	str	r2, [sp, #8]
    36ac:	23b0      	movs	r3, #176	; 0xb0
    36ae:	9301      	str	r3, [sp, #4]
    36b0:	9400      	str	r4, [sp, #0]
    36b2:	4623      	mov	r3, r4
    36b4:	463a      	mov	r2, r7
    36b6:	4659      	mov	r1, fp
    36b8:	a810      	add	r0, sp, #64	; 0x40
    36ba:	47d0      	blx	sl
		uint8_t payload_length = strlen(payload_template);
    36bc:	a810      	add	r0, sp, #64	; 0x40
    36be:	47c8      	blx	r9
		helper_template[0] = 0;
    36c0:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
		helper_template[1] = 0;
    36c4:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
		grid_ui_report_init(mod, i, payload_template, payload_length, helper_template, helper_length);
    36c8:	9701      	str	r7, [sp, #4]
    36ca:	ab0f      	add	r3, sp, #60	; 0x3c
    36cc:	9300      	str	r3, [sp, #0]
    36ce:	b2c3      	uxtb	r3, r0
    36d0:	aa10      	add	r2, sp, #64	; 0x40
    36d2:	4641      	mov	r1, r8
    36d4:	980d      	ldr	r0, [sp, #52]	; 0x34
    36d6:	4c0c      	ldr	r4, [pc, #48]	; (3708 <grid_module_po16_revb_init+0xe0>)
    36d8:	47a0      	blx	r4
	for(uint8_t i=0; i<17; i++){
    36da:	2e10      	cmp	r6, #16
    36dc:	d9d1      	bls.n	3682 <grid_module_po16_revb_init+0x5a>
	

		
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    36de:	2307      	movs	r3, #7
    36e0:	220e      	movs	r2, #14
    36e2:	2105      	movs	r1, #5
    36e4:	2010      	movs	r0, #16
    36e6:	4c09      	ldr	r4, [pc, #36]	; (370c <grid_module_po16_revb_init+0xe4>)
    36e8:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 16);
    36ea:	2110      	movs	r1, #16
    36ec:	4808      	ldr	r0, [pc, #32]	; (3710 <grid_module_po16_revb_init+0xe8>)
    36ee:	4b09      	ldr	r3, [pc, #36]	; (3714 <grid_module_po16_revb_init+0xec>)
    36f0:	4798      	blx	r3
	
	grid_module_po16_revb_hardware_init();
    36f2:	4b09      	ldr	r3, [pc, #36]	; (3718 <grid_module_po16_revb_init+0xf0>)
    36f4:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    36f6:	4b09      	ldr	r3, [pc, #36]	; (371c <grid_module_po16_revb_init+0xf4>)
    36f8:	4798      	blx	r3
	
    36fa:	b019      	add	sp, #100	; 0x64
    36fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3700:	00003fb5 	.word	0x00003fb5
    3704:	0000cc50 	.word	0x0000cc50
    3708:	00003fcd 	.word	0x00003fcd
    370c:	0000119d 	.word	0x0000119d
    3710:	200035fc 	.word	0x200035fc
    3714:	000021f9 	.word	0x000021f9
    3718:	000035e5 	.word	0x000035e5
    371c:	00003329 	.word	0x00003329
    3720:	0000cc68 	.word	0x0000cc68
    3724:	0000bd81 	.word	0x0000bd81
    3728:	0000bdc9 	.word	0x0000bdc9

0000372c <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    372c:	8982      	ldrh	r2, [r0, #12]
    372e:	b142      	cbz	r2, 3742 <tx_cb_USART_GRID+0x16>
    3730:	f100 0327 	add.w	r3, r0, #39	; 0x27
    3734:	3227      	adds	r2, #39	; 0x27
    3736:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    3738:	2100      	movs	r1, #0
    373a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    373e:	4293      	cmp	r3, r2
    3740:	d1fb      	bne.n	373a <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    3742:	2300      	movs	r3, #0
    3744:	8183      	strh	r3, [r0, #12]
    3746:	4770      	bx	lr

00003748 <tx_cb_USART_GRID_W>:
{
    3748:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    374a:	4802      	ldr	r0, [pc, #8]	; (3754 <tx_cb_USART_GRID_W+0xc>)
    374c:	4b02      	ldr	r3, [pc, #8]	; (3758 <tx_cb_USART_GRID_W+0x10>)
    374e:	4798      	blx	r3
    3750:	bd08      	pop	{r3, pc}
    3752:	bf00      	nop
    3754:	200021a0 	.word	0x200021a0
    3758:	0000372d 	.word	0x0000372d

0000375c <tx_cb_USART_GRID_S>:
{
    375c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    375e:	4802      	ldr	r0, [pc, #8]	; (3768 <tx_cb_USART_GRID_S+0xc>)
    3760:	4b02      	ldr	r3, [pc, #8]	; (376c <tx_cb_USART_GRID_S+0x10>)
    3762:	4798      	blx	r3
    3764:	bd08      	pop	{r3, pc}
    3766:	bf00      	nop
    3768:	200026c4 	.word	0x200026c4
    376c:	0000372d 	.word	0x0000372d

00003770 <tx_cb_USART_GRID_E>:
{
    3770:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    3772:	4802      	ldr	r0, [pc, #8]	; (377c <tx_cb_USART_GRID_E+0xc>)
    3774:	4b02      	ldr	r3, [pc, #8]	; (3780 <tx_cb_USART_GRID_E+0x10>)
    3776:	4798      	blx	r3
    3778:	bd08      	pop	{r3, pc}
    377a:	bf00      	nop
    377c:	200030e8 	.word	0x200030e8
    3780:	0000372d 	.word	0x0000372d

00003784 <tx_cb_USART_GRID_N>:
{
    3784:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    3786:	4802      	ldr	r0, [pc, #8]	; (3790 <tx_cb_USART_GRID_N+0xc>)
    3788:	4b02      	ldr	r3, [pc, #8]	; (3794 <tx_cb_USART_GRID_N+0x10>)
    378a:	4798      	blx	r3
    378c:	bd08      	pop	{r3, pc}
    378e:	bf00      	nop
    3790:	20001284 	.word	0x20001284
    3794:	0000372d 	.word	0x0000372d

00003798 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    3798:	b508      	push	{r3, lr}
    379a:	7a83      	ldrb	r3, [r0, #10]
    379c:	011b      	lsls	r3, r3, #4
    379e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    37a2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    37a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    37a8:	f022 0202 	bic.w	r2, r2, #2
    37ac:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    37ae:	2100      	movs	r1, #0
    37b0:	7a80      	ldrb	r0, [r0, #10]
    37b2:	4b01      	ldr	r3, [pc, #4]	; (37b8 <grid_sys_port_reset_dma+0x20>)
    37b4:	4798      	blx	r3
    37b6:	bd08      	pop	{r3, pc}
    37b8:	000061b5 	.word	0x000061b5

000037bc <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    37bc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    37be:	4802      	ldr	r0, [pc, #8]	; (37c8 <dma_transfer_complete_w_cb+0xc>)
    37c0:	4b02      	ldr	r3, [pc, #8]	; (37cc <dma_transfer_complete_w_cb+0x10>)
    37c2:	4798      	blx	r3
    37c4:	bd08      	pop	{r3, pc}
    37c6:	bf00      	nop
    37c8:	200021a0 	.word	0x200021a0
    37cc:	00003799 	.word	0x00003799

000037d0 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    37d0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    37d2:	4802      	ldr	r0, [pc, #8]	; (37dc <dma_transfer_complete_s_cb+0xc>)
    37d4:	4b02      	ldr	r3, [pc, #8]	; (37e0 <dma_transfer_complete_s_cb+0x10>)
    37d6:	4798      	blx	r3
    37d8:	bd08      	pop	{r3, pc}
    37da:	bf00      	nop
    37dc:	200026c4 	.word	0x200026c4
    37e0:	00003799 	.word	0x00003799

000037e4 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    37e4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    37e6:	4802      	ldr	r0, [pc, #8]	; (37f0 <dma_transfer_complete_e_cb+0xc>)
    37e8:	4b02      	ldr	r3, [pc, #8]	; (37f4 <dma_transfer_complete_e_cb+0x10>)
    37ea:	4798      	blx	r3
    37ec:	bd08      	pop	{r3, pc}
    37ee:	bf00      	nop
    37f0:	200030e8 	.word	0x200030e8
    37f4:	00003799 	.word	0x00003799

000037f8 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    37f8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    37fa:	4802      	ldr	r0, [pc, #8]	; (3804 <dma_transfer_complete_n_cb+0xc>)
    37fc:	4b02      	ldr	r3, [pc, #8]	; (3808 <dma_transfer_complete_n_cb+0x10>)
    37fe:	4798      	blx	r3
    3800:	bd08      	pop	{r3, pc}
    3802:	bf00      	nop
    3804:	20001284 	.word	0x20001284
    3808:	00003799 	.word	0x00003799

0000380c <grid_sys_uart_init>:

}

void grid_sys_uart_init(){
    380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3810:	4b2f      	ldr	r3, [pc, #188]	; (38d0 <grid_sys_uart_init+0xc4>)
    3812:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3816:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    381a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    381e:	f042 0204 	orr.w	r2, r2, #4
    3822:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3826:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    382a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    382e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3832:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3836:	f042 0204 	orr.w	r2, r2, #4
    383a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    383e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3846:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    384a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    384e:	f042 0204 	orr.w	r2, r2, #4
    3852:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3856:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    385a:	f44f 7100 	mov.w	r1, #512	; 0x200
    385e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3862:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3866:	f042 0204 	orr.w	r2, r2, #4
    386a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    386e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    3872:	f8df 8098 	ldr.w	r8, [pc, #152]	; 390c <grid_sys_uart_init+0x100>
    3876:	4a17      	ldr	r2, [pc, #92]	; (38d4 <grid_sys_uart_init+0xc8>)
    3878:	2101      	movs	r1, #1
    387a:	4640      	mov	r0, r8
    387c:	4c16      	ldr	r4, [pc, #88]	; (38d8 <grid_sys_uart_init+0xcc>)
    387e:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    3880:	4f16      	ldr	r7, [pc, #88]	; (38dc <grid_sys_uart_init+0xd0>)
    3882:	4a17      	ldr	r2, [pc, #92]	; (38e0 <grid_sys_uart_init+0xd4>)
    3884:	2101      	movs	r1, #1
    3886:	4638      	mov	r0, r7
    3888:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    388a:	4e16      	ldr	r6, [pc, #88]	; (38e4 <grid_sys_uart_init+0xd8>)
    388c:	4a16      	ldr	r2, [pc, #88]	; (38e8 <grid_sys_uart_init+0xdc>)
    388e:	2101      	movs	r1, #1
    3890:	4630      	mov	r0, r6
    3892:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    3894:	4d15      	ldr	r5, [pc, #84]	; (38ec <grid_sys_uart_init+0xe0>)
    3896:	4a16      	ldr	r2, [pc, #88]	; (38f0 <grid_sys_uart_init+0xe4>)
    3898:	2101      	movs	r1, #1
    389a:	4628      	mov	r0, r5
    389c:	47a0      	blx	r4
	//  	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
	//  	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
	//  	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
	//  	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    389e:	4915      	ldr	r1, [pc, #84]	; (38f4 <grid_sys_uart_init+0xe8>)
    38a0:	4640      	mov	r0, r8
    38a2:	4c15      	ldr	r4, [pc, #84]	; (38f8 <grid_sys_uart_init+0xec>)
    38a4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    38a6:	4915      	ldr	r1, [pc, #84]	; (38fc <grid_sys_uart_init+0xf0>)
    38a8:	4638      	mov	r0, r7
    38aa:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    38ac:	4914      	ldr	r1, [pc, #80]	; (3900 <grid_sys_uart_init+0xf4>)
    38ae:	4630      	mov	r0, r6
    38b0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    38b2:	4914      	ldr	r1, [pc, #80]	; (3904 <grid_sys_uart_init+0xf8>)
    38b4:	4628      	mov	r0, r5
    38b6:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    38b8:	4640      	mov	r0, r8
    38ba:	4c13      	ldr	r4, [pc, #76]	; (3908 <grid_sys_uart_init+0xfc>)
    38bc:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    38be:	4638      	mov	r0, r7
    38c0:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    38c2:	4630      	mov	r0, r6
    38c4:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    38c6:	4628      	mov	r0, r5
    38c8:	47a0      	blx	r4
    38ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38ce:	bf00      	nop
    38d0:	41008000 	.word	0x41008000
    38d4:	00003785 	.word	0x00003785
    38d8:	000051fd 	.word	0x000051fd
    38dc:	2000105c 	.word	0x2000105c
    38e0:	00003771 	.word	0x00003771
    38e4:	200011b4 	.word	0x200011b4
    38e8:	0000375d 	.word	0x0000375d
    38ec:	20001164 	.word	0x20001164
    38f0:	00003749 	.word	0x00003749
    38f4:	20001cec 	.word	0x20001cec
    38f8:	000051d5 	.word	0x000051d5
    38fc:	200026b0 	.word	0x200026b0
    3900:	20002bd4 	.word	0x20002bd4
    3904:	20003624 	.word	0x20003624
    3908:	000051a9 	.word	0x000051a9
    390c:	200010b0 	.word	0x200010b0

00003910 <grid_sys_dma_rx_init_one>:



}

void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    3910:	b5f0      	push	{r4, r5, r6, r7, lr}
    3912:	b083      	sub	sp, #12
    3914:	4605      	mov	r5, r0
    3916:	460f      	mov	r7, r1
    3918:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    391a:	7a84      	ldrb	r4, [r0, #10]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    391c:	6843      	ldr	r3, [r0, #4]
    391e:	6a19      	ldr	r1, [r3, #32]
    3920:	3128      	adds	r1, #40	; 0x28
    3922:	4620      	mov	r0, r4
    3924:	4b0d      	ldr	r3, [pc, #52]	; (395c <grid_sys_dma_rx_init_one+0x4c>)
    3926:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3928:	f505 7120 	add.w	r1, r5, #640	; 0x280
    392c:	4620      	mov	r0, r4
    392e:	4b0c      	ldr	r3, [pc, #48]	; (3960 <grid_sys_dma_rx_init_one+0x50>)
    3930:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    3932:	4639      	mov	r1, r7
    3934:	4620      	mov	r0, r4
    3936:	4b0b      	ldr	r3, [pc, #44]	; (3964 <grid_sys_dma_rx_init_one+0x54>)
    3938:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    393a:	4621      	mov	r1, r4
    393c:	a801      	add	r0, sp, #4
    393e:	4b0a      	ldr	r3, [pc, #40]	; (3968 <grid_sys_dma_rx_init_one+0x58>)
    3940:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    3942:	9b01      	ldr	r3, [sp, #4]
    3944:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3946:	2201      	movs	r2, #1
    3948:	2100      	movs	r1, #0
    394a:	4620      	mov	r0, r4
    394c:	4b07      	ldr	r3, [pc, #28]	; (396c <grid_sys_dma_rx_init_one+0x5c>)
    394e:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    3950:	2100      	movs	r1, #0
    3952:	4620      	mov	r0, r4
    3954:	4b06      	ldr	r3, [pc, #24]	; (3970 <grid_sys_dma_rx_init_one+0x60>)
    3956:	4798      	blx	r3
	

}
    3958:	b003      	add	sp, #12
    395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    395c:	00006131 	.word	0x00006131
    3960:	00006121 	.word	0x00006121
    3964:	0000615d 	.word	0x0000615d
    3968:	000061f5 	.word	0x000061f5
    396c:	000060cd 	.word	0x000060cd
    3970:	000061b5 	.word	0x000061b5

00003974 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    3974:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3976:	4a10      	ldr	r2, [pc, #64]	; (39b8 <grid_sys_dma_rx_init+0x44>)
    3978:	f44f 7116 	mov.w	r1, #600	; 0x258
    397c:	480f      	ldr	r0, [pc, #60]	; (39bc <grid_sys_dma_rx_init+0x48>)
    397e:	4c10      	ldr	r4, [pc, #64]	; (39c0 <grid_sys_dma_rx_init+0x4c>)
    3980:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    3982:	4a10      	ldr	r2, [pc, #64]	; (39c4 <grid_sys_dma_rx_init+0x50>)
    3984:	f44f 7116 	mov.w	r1, #600	; 0x258
    3988:	480f      	ldr	r0, [pc, #60]	; (39c8 <grid_sys_dma_rx_init+0x54>)
    398a:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    398c:	4a0f      	ldr	r2, [pc, #60]	; (39cc <grid_sys_dma_rx_init+0x58>)
    398e:	f44f 7116 	mov.w	r1, #600	; 0x258
    3992:	480f      	ldr	r0, [pc, #60]	; (39d0 <grid_sys_dma_rx_init+0x5c>)
    3994:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    3996:	4a0f      	ldr	r2, [pc, #60]	; (39d4 <grid_sys_dma_rx_init+0x60>)
    3998:	f44f 7116 	mov.w	r1, #600	; 0x258
    399c:	480e      	ldr	r0, [pc, #56]	; (39d8 <grid_sys_dma_rx_init+0x64>)
    399e:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    39a0:	4b0e      	ldr	r3, [pc, #56]	; (39dc <grid_sys_dma_rx_init+0x68>)
    39a2:	2200      	movs	r2, #0
    39a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    39a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    39ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    39b0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    39b4:	bd10      	pop	{r4, pc}
    39b6:	bf00      	nop
    39b8:	000037f9 	.word	0x000037f9
    39bc:	20001284 	.word	0x20001284
    39c0:	00003911 	.word	0x00003911
    39c4:	000037e5 	.word	0x000037e5
    39c8:	200030e8 	.word	0x200030e8
    39cc:	000037d1 	.word	0x000037d1
    39d0:	200026c4 	.word	0x200026c4
    39d4:	000037bd 	.word	0x000037bd
    39d8:	200021a0 	.word	0x200021a0
    39dc:	e000e100 	.word	0xe000e100

000039e0 <grid_sys_init>:
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}

void grid_sys_init(struct grid_sys_model* mod){
    39e0:	b510      	push	{r4, lr}
	
	mod->bank_select = 0;
    39e2:	2200      	movs	r2, #0
    39e4:	7242      	strb	r2, [r0, #9]
	
	mod->bank_color_r[0] = 200;
    39e6:	23c8      	movs	r3, #200	; 0xc8
    39e8:	7283      	strb	r3, [r0, #10]
	mod->bank_color_g[0] = 100;
    39ea:	2164      	movs	r1, #100	; 0x64
    39ec:	7381      	strb	r1, [r0, #14]
	mod->bank_color_b[0] = 0;
    39ee:	7482      	strb	r2, [r0, #18]
	
	mod->bank_color_r[1] = 0;
    39f0:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[1] = 100;
    39f2:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[1] = 200;
    39f4:	74c3      	strb	r3, [r0, #19]
	
	mod->bank_color_r[2] = 50;
    39f6:	2432      	movs	r4, #50	; 0x32
    39f8:	7304      	strb	r4, [r0, #12]
	mod->bank_color_g[2] = 200;
    39fa:	7403      	strb	r3, [r0, #16]
	mod->bank_color_b[2] = 50;
    39fc:	7504      	strb	r4, [r0, #20]
	
	mod->bank_color_r[3] = 100;
    39fe:	7341      	strb	r1, [r0, #13]
	mod->bank_color_g[3] = 0;
    3a00:	7442      	strb	r2, [r0, #17]
	mod->bank_color_b[3] = 200;
    3a02:	7543      	strb	r3, [r0, #21]
	
	
	grid_port_init_all();
    3a04:	4b03      	ldr	r3, [pc, #12]	; (3a14 <grid_sys_init+0x34>)
    3a06:	4798      	blx	r3
	
	grid_sys_uart_init();
    3a08:	4b03      	ldr	r3, [pc, #12]	; (3a18 <grid_sys_init+0x38>)
    3a0a:	4798      	blx	r3
	grid_sys_dma_rx_init();
    3a0c:	4b03      	ldr	r3, [pc, #12]	; (3a1c <grid_sys_init+0x3c>)
    3a0e:	4798      	blx	r3
    3a10:	bd10      	pop	{r4, pc}
    3a12:	bf00      	nop
    3a14:	000015e9 	.word	0x000015e9
    3a18:	0000380d 	.word	0x0000380d
    3a1c:	00003975 	.word	0x00003975

00003a20 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    3a20:	6980      	ldr	r0, [r0, #24]
    3a22:	4770      	bx	lr

00003a24 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t told){
	
	if (mod->realtime>told){
    3a24:	6980      	ldr	r0, [r0, #24]
    3a26:	4288      	cmp	r0, r1
		return mod->realtime-told;
    3a28:	bf8e      	itee	hi
    3a2a:	1a40      	subhi	r0, r0, r1
	}
	else{
		return (1<<32)-1 - told + mod->realtime;
    3a2c:	43c9      	mvnls	r1, r1
    3a2e:	1840      	addls	r0, r0, r1
	}
	

}
    3a30:	4770      	bx	lr

00003a32 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3a32:	6983      	ldr	r3, [r0, #24]
    3a34:	3301      	adds	r3, #1
    3a36:	6183      	str	r3, [r0, #24]
    3a38:	4770      	bx	lr

00003a3a <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    3a3a:	7a00      	ldrb	r0, [r0, #8]
    3a3c:	4770      	bx	lr

00003a3e <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    3a3e:	2300      	movs	r3, #0
    3a40:	7203      	strb	r3, [r0, #8]
    3a42:	4770      	bx	lr

00003a44 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3a44:	7983      	ldrb	r3, [r0, #6]
    3a46:	b123      	cbz	r3, 3a52 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    3a48:	2b01      	cmp	r3, #1
    3a4a:	d00f      	beq.n	3a6c <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    3a4c:	2b02      	cmp	r3, #2
    3a4e:	d015      	beq.n	3a7c <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3a50:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3a52:	8880      	ldrh	r0, [r0, #4]
    3a54:	0840      	lsrs	r0, r0, #1
    3a56:	387d      	subs	r0, #125	; 0x7d
    3a58:	2800      	cmp	r0, #0
    3a5a:	bfb8      	it	lt
    3a5c:	4240      	neglt	r0, r0
    3a5e:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3a62:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3a66:	f3c0 0047 	ubfx	r0, r0, #1, #8
    3a6a:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    3a6c:	8880      	ldrh	r0, [r0, #4]
    3a6e:	4b06      	ldr	r3, [pc, #24]	; (3a88 <grid_sys_alert_get_color_intensity+0x44>)
    3a70:	fba3 3000 	umull	r3, r0, r3, r0
    3a74:	f340 1000 	sbfx	r0, r0, #4, #1
    3a78:	b2c0      	uxtb	r0, r0
    3a7a:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3a7c:	8880      	ldrh	r0, [r0, #4]
    3a7e:	2864      	cmp	r0, #100	; 0x64
    3a80:	bf8c      	ite	hi
    3a82:	20ff      	movhi	r0, #255	; 0xff
    3a84:	2000      	movls	r0, #0
    3a86:	4770      	bx	lr
    3a88:	10624dd3 	.word	0x10624dd3

00003a8c <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    3a8c:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    3a8e:	2401      	movs	r4, #1
    3a90:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    3a92:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    3a94:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    3a96:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    3a98:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3a9c:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    3a9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3aa2:	7183      	strb	r3, [r0, #6]
	
}
    3aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
    3aa8:	4770      	bx	lr

00003aaa <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    3aaa:	7840      	ldrb	r0, [r0, #1]
    3aac:	4770      	bx	lr

00003aae <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    3aae:	7880      	ldrb	r0, [r0, #2]
    3ab0:	4770      	bx	lr

00003ab2 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    3ab2:	78c0      	ldrb	r0, [r0, #3]
    3ab4:	4770      	bx	lr

00003ab6 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    3ab6:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    3ab8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3abc:	b2d8      	uxtb	r0, r3
    3abe:	2809      	cmp	r0, #9
    3ac0:	d90d      	bls.n	3ade <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    3ac2:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    3ac6:	b2db      	uxtb	r3, r3
    3ac8:	2b05      	cmp	r3, #5
    3aca:	d903      	bls.n	3ad4 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    3acc:	b131      	cbz	r1, 3adc <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    3ace:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    3ad0:	2000      	movs	r0, #0
    3ad2:	4770      	bx	lr
		result = ascii - 97 + 10;
    3ad4:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    3ad8:	b2c0      	uxtb	r0, r0
    3ada:	4770      	bx	lr
	uint8_t result = 0;
    3adc:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    3ade:	4770      	bx	lr

00003ae0 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    3ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    3ae4:	b1c1      	cbz	r1, 3b18 <grid_sys_read_hex_string_value+0x38>
    3ae6:	4690      	mov	r8, r2
    3ae8:	1e45      	subs	r5, r0, #1
    3aea:	1e4b      	subs	r3, r1, #1
    3aec:	009c      	lsls	r4, r3, #2
    3aee:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3af2:	3f02      	subs	r7, #2
    3af4:	b2db      	uxtb	r3, r3
    3af6:	1aff      	subs	r7, r7, r3
    3af8:	00bf      	lsls	r7, r7, #2
    3afa:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3afc:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3b1c <grid_sys_read_hex_string_value+0x3c>
    3b00:	4641      	mov	r1, r8
    3b02:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3b06:	47c8      	blx	r9
    3b08:	40a0      	lsls	r0, r4
    3b0a:	4406      	add	r6, r0
    3b0c:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    3b0e:	42bc      	cmp	r4, r7
    3b10:	d1f6      	bne.n	3b00 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3b12:	4630      	mov	r0, r6
    3b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    3b18:	2600      	movs	r6, #0
	return result;
    3b1a:	e7fa      	b.n	3b12 <grid_sys_read_hex_string_value+0x32>
    3b1c:	00003ab7 	.word	0x00003ab7

00003b20 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3b20:	b530      	push	{r4, r5, lr}
    3b22:	b085      	sub	sp, #20
    3b24:	4605      	mov	r5, r0
    3b26:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    3b28:	4909      	ldr	r1, [pc, #36]	; (3b50 <grid_sys_write_hex_string_value+0x30>)
    3b2a:	a801      	add	r0, sp, #4
    3b2c:	4b09      	ldr	r3, [pc, #36]	; (3b54 <grid_sys_write_hex_string_value+0x34>)
    3b2e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3b30:	b164      	cbz	r4, 3b4c <grid_sys_write_hex_string_value+0x2c>
    3b32:	ab04      	add	r3, sp, #16
    3b34:	1b1a      	subs	r2, r3, r4
    3b36:	3a05      	subs	r2, #5
    3b38:	1e6b      	subs	r3, r5, #1
    3b3a:	1e60      	subs	r0, r4, #1
    3b3c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3b40:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3b44:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    3b48:	4283      	cmp	r3, r0
    3b4a:	d1f9      	bne.n	3b40 <grid_sys_write_hex_string_value+0x20>
	}

}
    3b4c:	b005      	add	sp, #20
    3b4e:	bd30      	pop	{r4, r5, pc}
    3b50:	0000cc9c 	.word	0x0000cc9c
    3b54:	0000bd81 	.word	0x0000bd81

00003b58 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    3b58:	4b34      	ldr	r3, [pc, #208]	; (3c2c <grid_sys_get_hwcfg+0xd4>)
    3b5a:	681b      	ldr	r3, [r3, #0]
    3b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b60:	d002      	beq.n	3b68 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3b62:	4b32      	ldr	r3, [pc, #200]	; (3c2c <grid_sys_get_hwcfg+0xd4>)
    3b64:	6818      	ldr	r0, [r3, #0]
    3b66:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    3b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b6c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3b6e:	4b30      	ldr	r3, [pc, #192]	; (3c30 <grid_sys_get_hwcfg+0xd8>)
    3b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3b78:	492e      	ldr	r1, [pc, #184]	; (3c34 <grid_sys_get_hwcfg+0xdc>)
    3b7a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3b7e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3b82:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3b86:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    3b8a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3b8e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3b92:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    3b96:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3b9e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3ba2:	4925      	ldr	r1, [pc, #148]	; (3c38 <grid_sys_get_hwcfg+0xe0>)
    3ba4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3ba8:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    3bac:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3bb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    3bb4:	2001      	movs	r0, #1
    3bb6:	4b21      	ldr	r3, [pc, #132]	; (3c3c <grid_sys_get_hwcfg+0xe4>)
    3bb8:	4798      	blx	r3
    3bba:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    3bbc:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3bbe:	4d1c      	ldr	r5, [pc, #112]	; (3c30 <grid_sys_get_hwcfg+0xd8>)
    3bc0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    3bc4:	4f1d      	ldr	r7, [pc, #116]	; (3c3c <grid_sys_get_hwcfg+0xe4>)
    3bc6:	e00c      	b.n	3be2 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    3bc8:	2e07      	cmp	r6, #7
    3bca:	d027      	beq.n	3c1c <grid_sys_get_hwcfg+0xc4>
    3bcc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    3bd0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    3bd4:	2001      	movs	r0, #1
    3bd6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3bd8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    3bdc:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    3bde:	2e08      	cmp	r6, #8
    3be0:	d01c      	beq.n	3c1c <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3be2:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    3be6:	2001      	movs	r0, #1
    3be8:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    3bea:	a801      	add	r0, sp, #4
    3bec:	4b14      	ldr	r3, [pc, #80]	; (3c40 <grid_sys_get_hwcfg+0xe8>)
    3bee:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3bf0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3bf4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3bf8:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3bfc:	405c      	eors	r4, r3
    3bfe:	4014      	ands	r4, r2
    3c00:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3c02:	a801      	add	r0, sp, #4
    3c04:	4b0f      	ldr	r3, [pc, #60]	; (3c44 <grid_sys_get_hwcfg+0xec>)
    3c06:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3c08:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3c0c:	d0dc      	beq.n	3bc8 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3c0e:	2301      	movs	r3, #1
    3c10:	40b3      	lsls	r3, r6
    3c12:	ea43 0808 	orr.w	r8, r3, r8
    3c16:	fa5f f888 	uxtb.w	r8, r8
    3c1a:	e7d5      	b.n	3bc8 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3c1c:	4b03      	ldr	r3, [pc, #12]	; (3c2c <grid_sys_get_hwcfg+0xd4>)
    3c1e:	f8c3 8000 	str.w	r8, [r3]
}
    3c22:	4b02      	ldr	r3, [pc, #8]	; (3c2c <grid_sys_get_hwcfg+0xd4>)
    3c24:	6818      	ldr	r0, [r3, #0]
    3c26:	b003      	add	sp, #12
    3c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c2c:	20000354 	.word	0x20000354
    3c30:	41008000 	.word	0x41008000
    3c34:	40002000 	.word	0x40002000
    3c38:	40028000 	.word	0x40028000
    3c3c:	0000464d 	.word	0x0000464d
    3c40:	000045cd 	.word	0x000045cd
    3c44:	000045db 	.word	0x000045db

00003c48 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c4c:	b085      	sub	sp, #20
    3c4e:	4681      	mov	r9, r0
    3c50:	460c      	mov	r4, r1
	uint32_t hwtype = grid_sys_get_hwcfg();
    3c52:	4b53      	ldr	r3, [pc, #332]	; (3da0 <grid_sys_bank_select+0x158>)
    3c54:	4798      	blx	r3
    3c56:	4682      	mov	sl, r0
	if (banknumber == 255){
    3c58:	2cff      	cmp	r4, #255	; 0xff
    3c5a:	d008      	beq.n	3c6e <grid_sys_bank_select+0x26>
		mod->bank_select = banknumber%4;
    3c5c:	f004 0403 	and.w	r4, r4, #3
    3c60:	f889 4009 	strb.w	r4, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c64:	2500      	movs	r5, #0
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3c66:	f8df b14c 	ldr.w	fp, [pc, #332]	; 3db4 <grid_sys_bank_select+0x16c>
    3c6a:	9503      	str	r5, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c6c:	e064      	b.n	3d38 <grid_sys_bank_select+0xf0>
		mod->bank_select = 255;
    3c6e:	23ff      	movs	r3, #255	; 0xff
    3c70:	f889 3009 	strb.w	r3, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c74:	2500      	movs	r5, #0
    3c76:	f8df b138 	ldr.w	fp, [pc, #312]	; 3db0 <grid_sys_bank_select+0x168>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3c7a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3db4 <grid_sys_bank_select+0x16c>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3c7e:	e01c      	b.n	3cba <grid_sys_bank_select+0x72>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3c80:	f04f 09ff 	mov.w	r9, #255	; 0xff
    3c84:	f8cd 9004 	str.w	r9, [sp, #4]
    3c88:	2600      	movs	r6, #0
    3c8a:	9600      	str	r6, [sp, #0]
    3c8c:	4633      	mov	r3, r6
    3c8e:	4632      	mov	r2, r6
    3c90:	4621      	mov	r1, r4
    3c92:	4658      	mov	r0, fp
    3c94:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3c96:	9601      	str	r6, [sp, #4]
    3c98:	2305      	movs	r3, #5
    3c9a:	9300      	str	r3, [sp, #0]
    3c9c:	4633      	mov	r3, r6
    3c9e:	4632      	mov	r2, r6
    3ca0:	4621      	mov	r1, r4
    3ca2:	4658      	mov	r0, fp
    3ca4:	4f3f      	ldr	r7, [pc, #252]	; (3da4 <grid_sys_bank_select+0x15c>)
    3ca6:	47b8      	blx	r7
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3ca8:	9601      	str	r6, [sp, #4]
    3caa:	9600      	str	r6, [sp, #0]
    3cac:	464b      	mov	r3, r9
    3cae:	4632      	mov	r2, r6
    3cb0:	4621      	mov	r1, r4
    3cb2:	4658      	mov	r0, fp
    3cb4:	4c3c      	ldr	r4, [pc, #240]	; (3da8 <grid_sys_bank_select+0x160>)
    3cb6:	47a0      	blx	r4
    3cb8:	3501      	adds	r5, #1
    3cba:	b2ec      	uxtb	r4, r5
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3cbc:	4658      	mov	r0, fp
    3cbe:	4b3b      	ldr	r3, [pc, #236]	; (3dac <grid_sys_bank_select+0x164>)
    3cc0:	4798      	blx	r3
    3cc2:	42a0      	cmp	r0, r4
    3cc4:	d968      	bls.n	3d98 <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3cc6:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3cca:	d0d9      	beq.n	3c80 <grid_sys_bank_select+0x38>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3ccc:	2306      	movs	r3, #6
    3cce:	9301      	str	r3, [sp, #4]
    3cd0:	9300      	str	r3, [sp, #0]
    3cd2:	2200      	movs	r2, #0
    3cd4:	4621      	mov	r1, r4
    3cd6:	4658      	mov	r0, fp
    3cd8:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3cda:	233f      	movs	r3, #63	; 0x3f
    3cdc:	9301      	str	r3, [sp, #4]
    3cde:	9300      	str	r3, [sp, #0]
    3ce0:	2200      	movs	r2, #0
    3ce2:	4621      	mov	r1, r4
    3ce4:	4658      	mov	r0, fp
    3ce6:	4e2f      	ldr	r6, [pc, #188]	; (3da4 <grid_sys_bank_select+0x15c>)
    3ce8:	47b0      	blx	r6
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3cea:	237f      	movs	r3, #127	; 0x7f
    3cec:	9301      	str	r3, [sp, #4]
    3cee:	9300      	str	r3, [sp, #0]
    3cf0:	2200      	movs	r2, #0
    3cf2:	4621      	mov	r1, r4
    3cf4:	4658      	mov	r0, fp
    3cf6:	4c2c      	ldr	r4, [pc, #176]	; (3da8 <grid_sys_bank_select+0x160>)
    3cf8:	47a0      	blx	r4
    3cfa:	e7dd      	b.n	3cb8 <grid_sys_bank_select+0x70>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3cfc:	27ff      	movs	r7, #255	; 0xff
    3cfe:	9701      	str	r7, [sp, #4]
    3d00:	2600      	movs	r6, #0
    3d02:	9600      	str	r6, [sp, #0]
    3d04:	4633      	mov	r3, r6
    3d06:	4632      	mov	r2, r6
    3d08:	4621      	mov	r1, r4
    3d0a:	4829      	ldr	r0, [pc, #164]	; (3db0 <grid_sys_bank_select+0x168>)
    3d0c:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3d0e:	9601      	str	r6, [sp, #4]
    3d10:	2305      	movs	r3, #5
    3d12:	9300      	str	r3, [sp, #0]
    3d14:	4633      	mov	r3, r6
    3d16:	4632      	mov	r2, r6
    3d18:	4621      	mov	r1, r4
    3d1a:	4825      	ldr	r0, [pc, #148]	; (3db0 <grid_sys_bank_select+0x168>)
    3d1c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3da4 <grid_sys_bank_select+0x15c>
    3d20:	47c0      	blx	r8
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3d22:	9601      	str	r6, [sp, #4]
    3d24:	9600      	str	r6, [sp, #0]
    3d26:	463b      	mov	r3, r7
    3d28:	4632      	mov	r2, r6
    3d2a:	4621      	mov	r1, r4
    3d2c:	4820      	ldr	r0, [pc, #128]	; (3db0 <grid_sys_bank_select+0x168>)
    3d2e:	4c1e      	ldr	r4, [pc, #120]	; (3da8 <grid_sys_bank_select+0x160>)
    3d30:	47a0      	blx	r4
    3d32:	9b03      	ldr	r3, [sp, #12]
    3d34:	3301      	adds	r3, #1
    3d36:	9303      	str	r3, [sp, #12]
    3d38:	f89d 400c 	ldrb.w	r4, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3d3c:	481c      	ldr	r0, [pc, #112]	; (3db0 <grid_sys_bank_select+0x168>)
    3d3e:	4b1b      	ldr	r3, [pc, #108]	; (3dac <grid_sys_bank_select+0x164>)
    3d40:	4798      	blx	r3
    3d42:	4284      	cmp	r4, r0
    3d44:	d228      	bcs.n	3d98 <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3d46:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3d4a:	d0d7      	beq.n	3cfc <grid_sys_bank_select+0xb4>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3d4c:	f899 3009 	ldrb.w	r3, [r9, #9]
    3d50:	444b      	add	r3, r9
    3d52:	7a9e      	ldrb	r6, [r3, #10]
				uint8_t g = mod->bank_color_g[mod->bank_select];
    3d54:	7b9f      	ldrb	r7, [r3, #14]
				uint8_t b = mod->bank_color_b[mod->bank_select];
    3d56:	f893 8012 	ldrb.w	r8, [r3, #18]
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3d5a:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3d5e:	9301      	str	r3, [sp, #4]
    3d60:	097b      	lsrs	r3, r7, #5
    3d62:	9300      	str	r3, [sp, #0]
    3d64:	0973      	lsrs	r3, r6, #5
    3d66:	2200      	movs	r2, #0
    3d68:	4621      	mov	r1, r4
    3d6a:	4811      	ldr	r0, [pc, #68]	; (3db0 <grid_sys_bank_select+0x168>)
    3d6c:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3d6e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3d72:	9301      	str	r3, [sp, #4]
    3d74:	087b      	lsrs	r3, r7, #1
    3d76:	9300      	str	r3, [sp, #0]
    3d78:	0873      	lsrs	r3, r6, #1
    3d7a:	2200      	movs	r2, #0
    3d7c:	4621      	mov	r1, r4
    3d7e:	480c      	ldr	r0, [pc, #48]	; (3db0 <grid_sys_bank_select+0x168>)
    3d80:	4d08      	ldr	r5, [pc, #32]	; (3da4 <grid_sys_bank_select+0x15c>)
    3d82:	47a8      	blx	r5
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3d84:	f8cd 8004 	str.w	r8, [sp, #4]
    3d88:	9700      	str	r7, [sp, #0]
    3d8a:	4633      	mov	r3, r6
    3d8c:	2200      	movs	r2, #0
    3d8e:	4621      	mov	r1, r4
    3d90:	4807      	ldr	r0, [pc, #28]	; (3db0 <grid_sys_bank_select+0x168>)
    3d92:	4c05      	ldr	r4, [pc, #20]	; (3da8 <grid_sys_bank_select+0x160>)
    3d94:	47a0      	blx	r4
    3d96:	e7cc      	b.n	3d32 <grid_sys_bank_select+0xea>
}
    3d98:	b005      	add	sp, #20
    3d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d9e:	bf00      	nop
    3da0:	00003b59 	.word	0x00003b59
    3da4:	00001e55 	.word	0x00001e55
    3da8:	00001e9f 	.word	0x00001e9f
    3dac:	00001dc5 	.word	0x00001dc5
    3db0:	200035fc 	.word	0x200035fc
    3db4:	00001e0d 	.word	0x00001e0d

00003db8 <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3db8:	2903      	cmp	r1, #3
    3dba:	d009      	beq.n	3dd0 <grid_msg_get_checksum+0x18>
    3dbc:	1e43      	subs	r3, r0, #1
    3dbe:	3904      	subs	r1, #4
    3dc0:	4401      	add	r1, r0
    3dc2:	2000      	movs	r0, #0
		checksum ^= str[i];
    3dc4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3dc8:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3dca:	428b      	cmp	r3, r1
    3dcc:	d1fa      	bne.n	3dc4 <grid_msg_get_checksum+0xc>
    3dce:	4770      	bx	lr
	uint8_t checksum = 0;
    3dd0:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3dd2:	4770      	bx	lr

00003dd4 <grid_msg_set_checksum>:

void grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    3dd4:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3dd6:	1ecb      	subs	r3, r1, #3
    3dd8:	2102      	movs	r1, #2
    3dda:	4418      	add	r0, r3
    3ddc:	4b01      	ldr	r3, [pc, #4]	; (3de4 <grid_msg_set_checksum+0x10>)
    3dde:	4798      	blx	r3
    3de0:	bd08      	pop	{r3, pc}
    3de2:	bf00      	nop
    3de4:	00003b21 	.word	0x00003b21

00003de8 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3de8:	b500      	push	{lr}
    3dea:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3dec:	aa02      	add	r2, sp, #8
    3dee:	2300      	movs	r3, #0
    3df0:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3df4:	2102      	movs	r1, #2
    3df6:	3004      	adds	r0, #4
    3df8:	4b02      	ldr	r3, [pc, #8]	; (3e04 <grid_msg_get_id+0x1c>)
    3dfa:	4798      	blx	r3
	
}
    3dfc:	b2c0      	uxtb	r0, r0
    3dfe:	b003      	add	sp, #12
    3e00:	f85d fb04 	ldr.w	pc, [sp], #4
    3e04:	00003ae1 	.word	0x00003ae1

00003e08 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3e08:	b500      	push	{lr}
    3e0a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3e0c:	aa02      	add	r2, sp, #8
    3e0e:	2300      	movs	r3, #0
    3e10:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3e14:	2102      	movs	r1, #2
    3e16:	3006      	adds	r0, #6
    3e18:	4b02      	ldr	r3, [pc, #8]	; (3e24 <grid_msg_get_dx+0x1c>)
    3e1a:	4798      	blx	r3
	
}
    3e1c:	b2c0      	uxtb	r0, r0
    3e1e:	b003      	add	sp, #12
    3e20:	f85d fb04 	ldr.w	pc, [sp], #4
    3e24:	00003ae1 	.word	0x00003ae1

00003e28 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3e28:	b500      	push	{lr}
    3e2a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3e2c:	aa02      	add	r2, sp, #8
    3e2e:	2300      	movs	r3, #0
    3e30:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3e34:	2102      	movs	r1, #2
    3e36:	3008      	adds	r0, #8
    3e38:	4b02      	ldr	r3, [pc, #8]	; (3e44 <grid_msg_get_dy+0x1c>)
    3e3a:	4798      	blx	r3

}
    3e3c:	b2c0      	uxtb	r0, r0
    3e3e:	b003      	add	sp, #12
    3e40:	f85d fb04 	ldr.w	pc, [sp], #4
    3e44:	00003ae1 	.word	0x00003ae1

00003e48 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3e48:	b500      	push	{lr}
    3e4a:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3e4c:	aa02      	add	r2, sp, #8
    3e4e:	2300      	movs	r3, #0
    3e50:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3e54:	2102      	movs	r1, #2
    3e56:	300a      	adds	r0, #10
    3e58:	4b02      	ldr	r3, [pc, #8]	; (3e64 <grid_msg_get_age+0x1c>)
    3e5a:	4798      	blx	r3
	
}
    3e5c:	b2c0      	uxtb	r0, r0
    3e5e:	b003      	add	sp, #12
    3e60:	f85d fb04 	ldr.w	pc, [sp], #4
    3e64:	00003ae1 	.word	0x00003ae1

00003e68 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3e68:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3e6a:	460a      	mov	r2, r1
    3e6c:	2102      	movs	r1, #2
    3e6e:	3004      	adds	r0, #4
    3e70:	4b01      	ldr	r3, [pc, #4]	; (3e78 <grid_msg_set_id+0x10>)
    3e72:	4798      	blx	r3
    3e74:	bd08      	pop	{r3, pc}
    3e76:	bf00      	nop
    3e78:	00003b21 	.word	0x00003b21

00003e7c <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3e7c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3e7e:	460a      	mov	r2, r1
    3e80:	2102      	movs	r1, #2
    3e82:	3006      	adds	r0, #6
    3e84:	4b01      	ldr	r3, [pc, #4]	; (3e8c <grid_msg_set_dx+0x10>)
    3e86:	4798      	blx	r3
    3e88:	bd08      	pop	{r3, pc}
    3e8a:	bf00      	nop
    3e8c:	00003b21 	.word	0x00003b21

00003e90 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3e90:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3e92:	460a      	mov	r2, r1
    3e94:	2102      	movs	r1, #2
    3e96:	3008      	adds	r0, #8
    3e98:	4b01      	ldr	r3, [pc, #4]	; (3ea0 <grid_msg_set_dy+0x10>)
    3e9a:	4798      	blx	r3
    3e9c:	bd08      	pop	{r3, pc}
    3e9e:	bf00      	nop
    3ea0:	00003b21 	.word	0x00003b21

00003ea4 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3ea4:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3ea6:	460a      	mov	r2, r1
    3ea8:	2102      	movs	r1, #2
    3eaa:	300a      	adds	r0, #10
    3eac:	4b01      	ldr	r3, [pc, #4]	; (3eb4 <grid_msg_set_age+0x10>)
    3eae:	4798      	blx	r3
    3eb0:	bd08      	pop	{r3, pc}
    3eb2:	bf00      	nop
    3eb4:	00003b21 	.word	0x00003b21

00003eb8 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3eb8:	69c3      	ldr	r3, [r0, #28]
    3eba:	4299      	cmp	r1, r3
    3ebc:	d00d      	beq.n	3eda <grid_msg_find_recent+0x22>
    3ebe:	2301      	movs	r3, #1
    3ec0:	f003 021f 	and.w	r2, r3, #31
    3ec4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3ec8:	69d2      	ldr	r2, [r2, #28]
    3eca:	428a      	cmp	r2, r1
    3ecc:	d007      	beq.n	3ede <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    3ece:	3301      	adds	r3, #1
    3ed0:	b2db      	uxtb	r3, r3
    3ed2:	2b20      	cmp	r3, #32
    3ed4:	d1f4      	bne.n	3ec0 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3ed6:	2000      	movs	r0, #0
    3ed8:	4770      	bx	lr
			return 1;
    3eda:	2001      	movs	r0, #1
    3edc:	4770      	bx	lr
    3ede:	2001      	movs	r0, #1
}
    3ee0:	4770      	bx	lr

00003ee2 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3ee2:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    3ee6:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3ee8:	f003 031f 	and.w	r3, r3, #31
    3eec:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3ef0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3ef4:	61c1      	str	r1, [r0, #28]
    3ef6:	4770      	bx	lr

00003ef8 <grid_sys_ping>:
	
}


void grid_sys_ping(struct grid_port* por){
    3ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3efa:	b085      	sub	sp, #20
    3efc:	4605      	mov	r5, r0
		
		
	uint8_t length = 16;
	uint32_t hwcfg = grid_sys_get_hwcfg();
    3efe:	4b27      	ldr	r3, [pc, #156]	; (3f9c <grid_sys_ping+0xa4>)
    3f00:	4798      	blx	r3
	char message[16] = {GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction, '0','0','0','0','0','0','0','0',GRID_MSG_END_OF_TRANSMISSION,'0','0','\n'};
    3f02:	2301      	movs	r3, #1
    3f04:	f88d 3000 	strb.w	r3, [sp]
    3f08:	230e      	movs	r3, #14
    3f0a:	f88d 3001 	strb.w	r3, [sp, #1]
    3f0e:	2307      	movs	r3, #7
    3f10:	f88d 3002 	strb.w	r3, [sp, #2]
    3f14:	7a6b      	ldrb	r3, [r5, #9]
    3f16:	f88d 3003 	strb.w	r3, [sp, #3]
    3f1a:	2330      	movs	r3, #48	; 0x30
    3f1c:	f88d 3004 	strb.w	r3, [sp, #4]
    3f20:	f88d 3005 	strb.w	r3, [sp, #5]
    3f24:	f88d 3006 	strb.w	r3, [sp, #6]
    3f28:	f88d 3007 	strb.w	r3, [sp, #7]
    3f2c:	f88d 3008 	strb.w	r3, [sp, #8]
    3f30:	f88d 3009 	strb.w	r3, [sp, #9]
    3f34:	f88d 300a 	strb.w	r3, [sp, #10]
    3f38:	f88d 300b 	strb.w	r3, [sp, #11]
    3f3c:	2204      	movs	r2, #4
    3f3e:	f88d 200c 	strb.w	r2, [sp, #12]
    3f42:	f88d 300d 	strb.w	r3, [sp, #13]
    3f46:	f88d 300e 	strb.w	r3, [sp, #14]
    3f4a:	230a      	movs	r3, #10
    3f4c:	f88d 300f 	strb.w	r3, [sp, #15]
	// Create the packet
	//sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,hwcfg, GRID_MSG_END_OF_TRANSMISSION);
	//length = strlen(message);
	

	grid_sys_write_hex_string_value(&message[4], 8, hwcfg);
    3f50:	4602      	mov	r2, r0
    3f52:	2108      	movs	r1, #8
    3f54:	a801      	add	r0, sp, #4
    3f56:	4c12      	ldr	r4, [pc, #72]	; (3fa0 <grid_sys_ping+0xa8>)
    3f58:	47a0      	blx	r4
	

	
 	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    3f5a:	2110      	movs	r1, #16
    3f5c:	4668      	mov	r0, sp
    3f5e:	4b11      	ldr	r3, [pc, #68]	; (3fa4 <grid_sys_ping+0xac>)
    3f60:	4798      	blx	r3
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3f62:	4602      	mov	r2, r0
    3f64:	2102      	movs	r1, #2
    3f66:	f10d 000d 	add.w	r0, sp, #13
    3f6a:	47a0      	blx	r4
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    3f6c:	f505 659b 	add.w	r5, r5, #1240	; 0x4d8
    3f70:	2110      	movs	r1, #16
    3f72:	4628      	mov	r0, r5
    3f74:	4b0c      	ldr	r3, [pc, #48]	; (3fa8 <grid_sys_ping+0xb0>)
    3f76:	4798      	blx	r3
    3f78:	b168      	cbz	r0, 3f96 <grid_sys_ping+0x9e>
    3f7a:	f10d 34ff 	add.w	r4, sp, #4294967295
    3f7e:	f10d 070f 	add.w	r7, sp, #15
		
		for(uint16_t i = 0; i<length; i++){
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    3f82:	4e0a      	ldr	r6, [pc, #40]	; (3fac <grid_sys_ping+0xb4>)
    3f84:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3f88:	4628      	mov	r0, r5
    3f8a:	47b0      	blx	r6
		for(uint16_t i = 0; i<length; i++){
    3f8c:	42bc      	cmp	r4, r7
    3f8e:	d1f9      	bne.n	3f84 <grid_sys_ping+0x8c>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    3f90:	4628      	mov	r0, r5
    3f92:	4b07      	ldr	r3, [pc, #28]	; (3fb0 <grid_sys_ping+0xb8>)
    3f94:	4798      	blx	r3
	}
				
}
    3f96:	b005      	add	sp, #20
    3f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f9a:	bf00      	nop
    3f9c:	00003b59 	.word	0x00003b59
    3fa0:	00003b21 	.word	0x00003b21
    3fa4:	00003db9 	.word	0x00003db9
    3fa8:	00001375 	.word	0x00001375
    3fac:	000013a5 	.word	0x000013a5
    3fb0:	000013c1 	.word	0x000013c1

00003fb4 <grid_ui_model_init>:
	}
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3fb4:	b538      	push	{r3, r4, r5, lr}
    3fb6:	4604      	mov	r4, r0
    3fb8:	460d      	mov	r5, r1
	
	mod->report_array = malloc(len*sizeof(struct grid_ui_report));
    3fba:	0108      	lsls	r0, r1, #4
    3fbc:	4b02      	ldr	r3, [pc, #8]	; (3fc8 <grid_ui_model_init+0x14>)
    3fbe:	4798      	blx	r3
    3fc0:	6060      	str	r0, [r4, #4]
	mod->report_length = len;
    3fc2:	7025      	strb	r5, [r4, #0]
	
}
    3fc4:	bd38      	pop	{r3, r4, r5, pc}
    3fc6:	bf00      	nop
    3fc8:	0000b99d 	.word	0x0000b99d

00003fcc <grid_ui_report_init>:

uint8_t grid_ui_report_init(struct grid_ui_model* mod, uint8_t index, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3fd0:	4605      	mov	r5, r0
    3fd2:	4690      	mov	r8, r2
    3fd4:	9e08      	ldr	r6, [sp, #32]

	mod->report_array[index].changed = 0;
    3fd6:	010c      	lsls	r4, r1, #4
    3fd8:	6842      	ldr	r2, [r0, #4]
    3fda:	2100      	movs	r1, #0
    3fdc:	5511      	strb	r1, [r2, r4]
	mod->report_array[index].payload_length = p_len;
    3fde:	6842      	ldr	r2, [r0, #4]
    3fe0:	4422      	add	r2, r4
    3fe2:	7053      	strb	r3, [r2, #1]
	mod->report_array[index].helper_length = h_len;
    3fe4:	6842      	ldr	r2, [r0, #4]
    3fe6:	4422      	add	r2, r4
    3fe8:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    3fec:	7211      	strb	r1, [r2, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3fee:	6842      	ldr	r2, [r0, #4]
    3ff0:	eb02 0904 	add.w	r9, r2, r4
    3ff4:	4618      	mov	r0, r3
    3ff6:	4f1b      	ldr	r7, [pc, #108]	; (4064 <grid_ui_report_init+0x98>)
    3ff8:	47b8      	blx	r7
    3ffa:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3ffe:	686b      	ldr	r3, [r5, #4]
    4000:	eb03 0904 	add.w	r9, r3, r4
    4004:	9809      	ldr	r0, [sp, #36]	; 0x24
    4006:	47b8      	blx	r7
    4008:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    400c:	686a      	ldr	r2, [r5, #4]
    400e:	4422      	add	r2, r4
    4010:	6853      	ldr	r3, [r2, #4]
    4012:	b30b      	cbz	r3, 4058 <grid_ui_report_init+0x8c>
    4014:	68d3      	ldr	r3, [r2, #12]
    4016:	b313      	cbz	r3, 405e <grid_ui_report_init+0x92>
		return -1;
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    4018:	7853      	ldrb	r3, [r2, #1]
    401a:	b15b      	cbz	r3, 4034 <grid_ui_report_init+0x68>
    401c:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    401e:	f818 1003 	ldrb.w	r1, [r8, r3]
    4022:	6852      	ldr	r2, [r2, #4]
    4024:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    4026:	3301      	adds	r3, #1
    4028:	b2db      	uxtb	r3, r3
    402a:	686a      	ldr	r2, [r5, #4]
    402c:	4422      	add	r2, r4
    402e:	7851      	ldrb	r1, [r2, #1]
    4030:	4299      	cmp	r1, r3
    4032:	d8f4      	bhi.n	401e <grid_ui_report_init+0x52>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    4034:	686a      	ldr	r2, [r5, #4]
    4036:	4422      	add	r2, r4
    4038:	7a10      	ldrb	r0, [r2, #8]
    403a:	b188      	cbz	r0, 4060 <grid_ui_report_init+0x94>
    403c:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    403e:	5cf1      	ldrb	r1, [r6, r3]
    4040:	68d2      	ldr	r2, [r2, #12]
    4042:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    4044:	3301      	adds	r3, #1
    4046:	b2db      	uxtb	r3, r3
    4048:	686a      	ldr	r2, [r5, #4]
    404a:	4422      	add	r2, r4
    404c:	7a11      	ldrb	r1, [r2, #8]
    404e:	4299      	cmp	r1, r3
    4050:	d8f5      	bhi.n	403e <grid_ui_report_init+0x72>
	}
	
	return 0;
    4052:	2000      	movs	r0, #0
    4054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    4058:	20ff      	movs	r0, #255	; 0xff
    405a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    405e:	20ff      	movs	r0, #255	; 0xff
	
}
    4060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4064:	0000b99d 	.word	0x0000b99d

00004068 <grid_ui_report_render>:

uint8_t grid_ui_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    4068:	6843      	ldr	r3, [r0, #4]
    406a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    406e:	7848      	ldrb	r0, [r1, #1]
    4070:	b140      	cbz	r0, 4084 <grid_ui_report_render+0x1c>
    4072:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    4074:	6848      	ldr	r0, [r1, #4]
    4076:	5cc0      	ldrb	r0, [r0, r3]
    4078:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    407a:	3301      	adds	r3, #1
    407c:	b2db      	uxtb	r3, r3
    407e:	7848      	ldrb	r0, [r1, #1]
    4080:	4298      	cmp	r0, r3
    4082:	d8f7      	bhi.n	4074 <grid_ui_report_render+0xc>
	}
	
	return rep->payload_length;
}
    4084:	4770      	bx	lr

00004086 <grid_ui_report_get_changed_flag>:

uint8_t grid_ui_report_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index].changed;
    4086:	6843      	ldr	r3, [r0, #4]
    4088:	0109      	lsls	r1, r1, #4
}
    408a:	5c58      	ldrb	r0, [r3, r1]
    408c:	4770      	bx	lr

0000408e <grid_ui_report_set_changed_flag>:

void grid_ui_report_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    408e:	6843      	ldr	r3, [r0, #4]
    4090:	0109      	lsls	r1, r1, #4
    4092:	2201      	movs	r2, #1
    4094:	545a      	strb	r2, [r3, r1]
    4096:	4770      	bx	lr

00004098 <grid_ui_report_clear_changed_flag>:
}

void grid_ui_report_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    4098:	6843      	ldr	r3, [r0, #4]
    409a:	0109      	lsls	r1, r1, #4
    409c:	2200      	movs	r2, #0
    409e:	545a      	strb	r2, [r3, r1]
    40a0:	4770      	bx	lr
	...

000040a4 <grid_port_process_ui>:
	if (por->cooldown > 15){
    40a4:	6803      	ldr	r3, [r0, #0]
    40a6:	2b0f      	cmp	r3, #15
    40a8:	d829      	bhi.n	40fe <grid_port_process_ui+0x5a>
void grid_port_process_ui(struct grid_port* por){
    40aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40ae:	b0cb      	sub	sp, #300	; 0x12c
	else if (por->cooldown>0){
    40b0:	b10b      	cbz	r3, 40b6 <grid_port_process_ui+0x12>
		por->cooldown--;
    40b2:	3b01      	subs	r3, #1
    40b4:	6003      	str	r3, [r0, #0]
    40b6:	4607      	mov	r7, r0
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    40b8:	4b4c      	ldr	r3, [pc, #304]	; (41ec <grid_port_process_ui+0x148>)
    40ba:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
	uint8_t age = grid_sys_state.age;
    40be:	781b      	ldrb	r3, [r3, #0]
	sprintf(&message[length],
    40c0:	2117      	movs	r1, #23
    40c2:	9105      	str	r1, [sp, #20]
    40c4:	9304      	str	r3, [sp, #16]
    40c6:	237f      	movs	r3, #127	; 0x7f
    40c8:	9303      	str	r3, [sp, #12]
    40ca:	9302      	str	r3, [sp, #8]
    40cc:	9201      	str	r2, [sp, #4]
    40ce:	2300      	movs	r3, #0
    40d0:	9300      	str	r3, [sp, #0]
    40d2:	230f      	movs	r3, #15
    40d4:	2201      	movs	r2, #1
    40d6:	4946      	ldr	r1, [pc, #280]	; (41f0 <grid_port_process_ui+0x14c>)
    40d8:	a80a      	add	r0, sp, #40	; 0x28
    40da:	4c46      	ldr	r4, [pc, #280]	; (41f4 <grid_port_process_ui+0x150>)
    40dc:	47a0      	blx	r4
	length += strlen(&message[length]);
    40de:	a80a      	add	r0, sp, #40	; 0x28
    40e0:	4b45      	ldr	r3, [pc, #276]	; (41f8 <grid_port_process_ui+0x154>)
    40e2:	4798      	blx	r3
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    40e4:	4b45      	ldr	r3, [pc, #276]	; (41fc <grid_port_process_ui+0x158>)
    40e6:	781b      	ldrb	r3, [r3, #0]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d034      	beq.n	4156 <grid_port_process_ui+0xb2>
    40ec:	4605      	mov	r5, r0
    40ee:	2400      	movs	r4, #0
    40f0:	46a0      	mov	r8, r4
		CRITICAL_SECTION_ENTER()
    40f2:	f8df a138 	ldr.w	sl, [pc, #312]	; 422c <grid_port_process_ui+0x188>
	return mod->report_array[index].changed;
    40f6:	4e41      	ldr	r6, [pc, #260]	; (41fc <grid_port_process_ui+0x158>)
		CRITICAL_SECTION_LEAVE()
    40f8:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4230 <grid_port_process_ui+0x18c>
    40fc:	e00a      	b.n	4114 <grid_port_process_ui+0x70>
		por->cooldown--;
    40fe:	3b01      	subs	r3, #1
    4100:	6003      	str	r3, [r0, #0]
    4102:	4770      	bx	lr
		CRITICAL_SECTION_LEAVE()
    4104:	a807      	add	r0, sp, #28
    4106:	47c8      	blx	r9
	for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    4108:	3401      	adds	r4, #1
    410a:	b2e4      	uxtb	r4, r4
    410c:	7833      	ldrb	r3, [r6, #0]
    410e:	b2db      	uxtb	r3, r3
    4110:	42a3      	cmp	r3, r4
    4112:	d91d      	bls.n	4150 <grid_port_process_ui+0xac>
		if (length>200){
    4114:	2dc8      	cmp	r5, #200	; 0xc8
    4116:	d8f7      	bhi.n	4108 <grid_port_process_ui+0x64>
		CRITICAL_SECTION_ENTER()
    4118:	a807      	add	r0, sp, #28
    411a:	47d0      	blx	sl
	return mod->report_array[index].changed;
    411c:	6872      	ldr	r2, [r6, #4]
    411e:	0123      	lsls	r3, r4, #4
		if (grid_ui_report_get_changed_flag(&grid_ui_state, i)){
    4120:	5cd3      	ldrb	r3, [r2, r3]
    4122:	2b00      	cmp	r3, #0
    4124:	d0ee      	beq.n	4104 <grid_port_process_ui+0x60>
			packetvalid++;
    4126:	f108 0801 	add.w	r8, r8, #1
    412a:	fa5f f888 	uxtb.w	r8, r8
			grid_ui_report_render(&grid_ui_state, i, &message[length]);
    412e:	ab0a      	add	r3, sp, #40	; 0x28
    4130:	eb03 0b05 	add.w	fp, r3, r5
    4134:	465a      	mov	r2, fp
    4136:	4621      	mov	r1, r4
    4138:	4630      	mov	r0, r6
    413a:	4b31      	ldr	r3, [pc, #196]	; (4200 <grid_port_process_ui+0x15c>)
    413c:	4798      	blx	r3
			grid_ui_report_clear_changed_flag(&grid_ui_state, i);
    413e:	4621      	mov	r1, r4
    4140:	4630      	mov	r0, r6
    4142:	4b30      	ldr	r3, [pc, #192]	; (4204 <grid_port_process_ui+0x160>)
    4144:	4798      	blx	r3
			length += strlen(&message[length]);
    4146:	4658      	mov	r0, fp
    4148:	4b2b      	ldr	r3, [pc, #172]	; (41f8 <grid_port_process_ui+0x154>)
    414a:	4798      	blx	r3
    414c:	4405      	add	r5, r0
    414e:	e7d9      	b.n	4104 <grid_port_process_ui+0x60>
	if (packetvalid){
    4150:	f1b8 0f00 	cmp.w	r8, #0
    4154:	d102      	bne.n	415c <grid_port_process_ui+0xb8>
}
    4156:	b04b      	add	sp, #300	; 0x12c
    4158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		por->cooldown += (10+por->cooldown);
    415c:	683b      	ldr	r3, [r7, #0]
    415e:	005b      	lsls	r3, r3, #1
    4160:	330a      	adds	r3, #10
    4162:	603b      	str	r3, [r7, #0]
		grid_sys_state.next_broadcast_message_id++;
    4164:	4a21      	ldr	r2, [pc, #132]	; (41ec <grid_port_process_ui+0x148>)
    4166:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    416a:	3301      	adds	r3, #1
    416c:	b2db      	uxtb	r3, r3
    416e:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    4172:	ac0a      	add	r4, sp, #40	; 0x28
    4174:	1966      	adds	r6, r4, r5
    4176:	2204      	movs	r2, #4
    4178:	4923      	ldr	r1, [pc, #140]	; (4208 <grid_port_process_ui+0x164>)
    417a:	4630      	mov	r0, r6
    417c:	4f1d      	ldr	r7, [pc, #116]	; (41f4 <grid_port_process_ui+0x150>)
    417e:	47b8      	blx	r7
		length += strlen(&message[length]);
    4180:	4630      	mov	r0, r6
    4182:	4e1d      	ldr	r6, [pc, #116]	; (41f8 <grid_port_process_ui+0x154>)
    4184:	47b0      	blx	r6
    4186:	4405      	add	r5, r0
		sprintf(length_string, "%02x", length);
    4188:	462a      	mov	r2, r5
    418a:	4920      	ldr	r1, [pc, #128]	; (420c <grid_port_process_ui+0x168>)
    418c:	a808      	add	r0, sp, #32
    418e:	47b8      	blx	r7
		message[2] = length_string[0];
    4190:	f89d 3020 	ldrb.w	r3, [sp, #32]
    4194:	70a3      	strb	r3, [r4, #2]
		message[3] = length_string[1];
    4196:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    419a:	70e3      	strb	r3, [r4, #3]
		sprintf(&message[length], "00\n");
    419c:	4b1c      	ldr	r3, [pc, #112]	; (4210 <grid_port_process_ui+0x16c>)
    419e:	6818      	ldr	r0, [r3, #0]
    41a0:	5160      	str	r0, [r4, r5]
		length += strlen(&message[length]);
    41a2:	1960      	adds	r0, r4, r5
    41a4:	47b0      	blx	r6
    41a6:	4405      	add	r5, r0
		uint8_t checksum = grid_msg_get_checksum(message, length);
    41a8:	4629      	mov	r1, r5
    41aa:	4620      	mov	r0, r4
    41ac:	4b19      	ldr	r3, [pc, #100]	; (4214 <grid_port_process_ui+0x170>)
    41ae:	4798      	blx	r3
		grid_msg_set_checksum(message, length, checksum);
    41b0:	b2c2      	uxtb	r2, r0
    41b2:	4629      	mov	r1, r5
    41b4:	4620      	mov	r0, r4
    41b6:	4b18      	ldr	r3, [pc, #96]	; (4218 <grid_port_process_ui+0x174>)
    41b8:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    41ba:	b2a9      	uxth	r1, r5
    41bc:	4817      	ldr	r0, [pc, #92]	; (421c <grid_port_process_ui+0x178>)
    41be:	4b18      	ldr	r3, [pc, #96]	; (4220 <grid_port_process_ui+0x17c>)
    41c0:	4798      	blx	r3
    41c2:	2800      	cmp	r0, #0
    41c4:	d0c7      	beq.n	4156 <grid_port_process_ui+0xb2>
			for(uint32_t i = 0; i<length; i++){
    41c6:	b16d      	cbz	r5, 41e4 <grid_port_process_ui+0x140>
    41c8:	f10d 0427 	add.w	r4, sp, #39	; 0x27
    41cc:	ab4a      	add	r3, sp, #296	; 0x128
    41ce:	441d      	add	r5, r3
    41d0:	f2a5 1501 	subw	r5, r5, #257	; 0x101
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    41d4:	4f11      	ldr	r7, [pc, #68]	; (421c <grid_port_process_ui+0x178>)
    41d6:	4e13      	ldr	r6, [pc, #76]	; (4224 <grid_port_process_ui+0x180>)
    41d8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    41dc:	4638      	mov	r0, r7
    41de:	47b0      	blx	r6
			for(uint32_t i = 0; i<length; i++){
    41e0:	42a5      	cmp	r5, r4
    41e2:	d1f9      	bne.n	41d8 <grid_port_process_ui+0x134>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    41e4:	480d      	ldr	r0, [pc, #52]	; (421c <grid_port_process_ui+0x178>)
    41e6:	4b10      	ldr	r3, [pc, #64]	; (4228 <grid_port_process_ui+0x184>)
    41e8:	4798      	blx	r3
    41ea:	e7b4      	b.n	4156 <grid_port_process_ui+0xb2>
    41ec:	20001cf0 	.word	0x20001cf0
    41f0:	0000cca4 	.word	0x0000cca4
    41f4:	0000bd81 	.word	0x0000bd81
    41f8:	0000bdc9 	.word	0x0000bdc9
    41fc:	20001ce4 	.word	0x20001ce4
    4200:	00004069 	.word	0x00004069
    4204:	00004099 	.word	0x00004099
    4208:	0000ccbc 	.word	0x0000ccbc
    420c:	0000ccc0 	.word	0x0000ccc0
    4210:	0000ccc8 	.word	0x0000ccc8
    4214:	00003db9 	.word	0x00003db9
    4218:	00003dd5 	.word	0x00003dd5
    421c:	20001cc4 	.word	0x20001cc4
    4220:	00001375 	.word	0x00001375
    4224:	000013a5 	.word	0x000013a5
    4228:	000013c1 	.word	0x000013c1
    422c:	000045cd 	.word	0x000045cd
    4230:	000045db 	.word	0x000045db

00004234 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    4234:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    4236:	6983      	ldr	r3, [r0, #24]
    4238:	b103      	cbz	r3, 423c <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    423a:	4798      	blx	r3
    423c:	bd08      	pop	{r3, pc}

0000423e <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    423e:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    4240:	69c3      	ldr	r3, [r0, #28]
    4242:	b103      	cbz	r3, 4246 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    4244:	4798      	blx	r3
    4246:	bd08      	pop	{r3, pc}

00004248 <adc_async_channel_conversion_done>:
{
    4248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    424c:	4606      	mov	r6, r0
    424e:	460f      	mov	r7, r1
    4250:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    4252:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4254:	5c5c      	ldrb	r4, [r3, r1]
    4256:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    425a:	00e4      	lsls	r4, r4, #3
    425c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    4260:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    4264:	f105 0a04 	add.w	sl, r5, #4
    4268:	b2d1      	uxtb	r1, r2
    426a:	4650      	mov	r0, sl
    426c:	4b0c      	ldr	r3, [pc, #48]	; (42a0 <adc_async_channel_conversion_done+0x58>)
    426e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    4270:	4630      	mov	r0, r6
    4272:	4b0c      	ldr	r3, [pc, #48]	; (42a4 <adc_async_channel_conversion_done+0x5c>)
    4274:	4798      	blx	r3
    4276:	2801      	cmp	r0, #1
    4278:	d907      	bls.n	428a <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    427a:	ea4f 2119 	mov.w	r1, r9, lsr #8
    427e:	4650      	mov	r0, sl
    4280:	4b07      	ldr	r3, [pc, #28]	; (42a0 <adc_async_channel_conversion_done+0x58>)
    4282:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    4284:	8aab      	ldrh	r3, [r5, #20]
    4286:	3301      	adds	r3, #1
    4288:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    428a:	8aab      	ldrh	r3, [r5, #20]
    428c:	3301      	adds	r3, #1
    428e:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    4290:	f858 3004 	ldr.w	r3, [r8, r4]
    4294:	b113      	cbz	r3, 429c <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    4296:	4639      	mov	r1, r7
    4298:	4630      	mov	r0, r6
    429a:	4798      	blx	r3
    429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42a0:	00005a95 	.word	0x00005a95
    42a4:	00005e33 	.word	0x00005e33

000042a8 <adc_async_init>:
{
    42a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42ac:	4689      	mov	r9, r1
    42ae:	4616      	mov	r6, r2
    42b0:	461c      	mov	r4, r3
    42b2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    42b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    42b8:	4607      	mov	r7, r0
    42ba:	b140      	cbz	r0, 42ce <adc_async_init+0x26>
    42bc:	b149      	cbz	r1, 42d2 <adc_async_init+0x2a>
    42be:	b152      	cbz	r2, 42d6 <adc_async_init+0x2e>
    42c0:	f1b8 0f00 	cmp.w	r8, #0
    42c4:	d009      	beq.n	42da <adc_async_init+0x32>
    42c6:	1c28      	adds	r0, r5, #0
    42c8:	bf18      	it	ne
    42ca:	2001      	movne	r0, #1
    42cc:	e006      	b.n	42dc <adc_async_init+0x34>
    42ce:	2000      	movs	r0, #0
    42d0:	e004      	b.n	42dc <adc_async_init+0x34>
    42d2:	2000      	movs	r0, #0
    42d4:	e002      	b.n	42dc <adc_async_init+0x34>
    42d6:	2000      	movs	r0, #0
    42d8:	e000      	b.n	42dc <adc_async_init+0x34>
    42da:	2000      	movs	r0, #0
    42dc:	f8df b064 	ldr.w	fp, [pc, #100]	; 4344 <adc_async_init+0x9c>
    42e0:	223f      	movs	r2, #63	; 0x3f
    42e2:	4659      	mov	r1, fp
    42e4:	f8df a060 	ldr.w	sl, [pc, #96]	; 4348 <adc_async_init+0xa0>
    42e8:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    42ea:	1c60      	adds	r0, r4, #1
    42ec:	2240      	movs	r2, #64	; 0x40
    42ee:	4659      	mov	r1, fp
    42f0:	4580      	cmp	r8, r0
    42f2:	bfcc      	ite	gt
    42f4:	2000      	movgt	r0, #0
    42f6:	2001      	movle	r0, #1
    42f8:	47d0      	blx	sl
	device = &descr->device;
    42fa:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    42fc:	21ff      	movs	r1, #255	; 0xff
    42fe:	b2da      	uxtb	r2, r3
    4300:	54b1      	strb	r1, [r6, r2]
    4302:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    4304:	b2da      	uxtb	r2, r3
    4306:	42a2      	cmp	r2, r4
    4308:	d9f9      	bls.n	42fe <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    430a:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    430c:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    4310:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    4314:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    4316:	4649      	mov	r1, r9
    4318:	4638      	mov	r0, r7
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <adc_async_init+0x8c>)
    431c:	4798      	blx	r3
	if (init_status) {
    431e:	4603      	mov	r3, r0
    4320:	b928      	cbnz	r0, 432e <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    4322:	4a05      	ldr	r2, [pc, #20]	; (4338 <adc_async_init+0x90>)
    4324:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    4326:	4a05      	ldr	r2, [pc, #20]	; (433c <adc_async_init+0x94>)
    4328:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    432a:	4a05      	ldr	r2, [pc, #20]	; (4340 <adc_async_init+0x98>)
    432c:	607a      	str	r2, [r7, #4]
}
    432e:	4618      	mov	r0, r3
    4330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4334:	00005d01 	.word	0x00005d01
    4338:	00004249 	.word	0x00004249
    433c:	00004235 	.word	0x00004235
    4340:	0000423f 	.word	0x0000423f
    4344:	0000cccc 	.word	0x0000cccc
    4348:	00005959 	.word	0x00005959

0000434c <adc_async_register_channel_buffer>:
{
    434c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4350:	460e      	mov	r6, r1
    4352:	4617      	mov	r7, r2
    4354:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    4356:	4605      	mov	r5, r0
    4358:	2800      	cmp	r0, #0
    435a:	d040      	beq.n	43de <adc_async_register_channel_buffer+0x92>
    435c:	2a00      	cmp	r2, #0
    435e:	d040      	beq.n	43e2 <adc_async_register_channel_buffer+0x96>
    4360:	1c18      	adds	r0, r3, #0
    4362:	bf18      	it	ne
    4364:	2001      	movne	r0, #1
    4366:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4400 <adc_async_register_channel_buffer+0xb4>
    436a:	2266      	movs	r2, #102	; 0x66
    436c:	4649      	mov	r1, r9
    436e:	4c22      	ldr	r4, [pc, #136]	; (43f8 <adc_async_register_channel_buffer+0xac>)
    4370:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    4372:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4376:	2267      	movs	r2, #103	; 0x67
    4378:	4649      	mov	r1, r9
    437a:	42b0      	cmp	r0, r6
    437c:	bf34      	ite	cc
    437e:	2000      	movcc	r0, #0
    4380:	2001      	movcs	r0, #1
    4382:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    4384:	6a29      	ldr	r1, [r5, #32]
    4386:	5d8b      	ldrb	r3, [r1, r6]
    4388:	2bff      	cmp	r3, #255	; 0xff
    438a:	d12c      	bne.n	43e6 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    438c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4390:	2300      	movs	r3, #0
    4392:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    4394:	b2da      	uxtb	r2, r3
    4396:	5c8a      	ldrb	r2, [r1, r2]
    4398:	2aff      	cmp	r2, #255	; 0xff
			index++;
    439a:	bf1c      	itt	ne
    439c:	3401      	addne	r4, #1
    439e:	b2e4      	uxtbne	r4, r4
    43a0:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    43a2:	b2da      	uxtb	r2, r3
    43a4:	4282      	cmp	r2, r0
    43a6:	d9f5      	bls.n	4394 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    43a8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    43ac:	42a3      	cmp	r3, r4
    43ae:	d31d      	bcc.n	43ec <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    43b0:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    43b4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    43b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    43ba:	4448      	add	r0, r9
    43bc:	4642      	mov	r2, r8
    43be:	4639      	mov	r1, r7
    43c0:	3004      	adds	r0, #4
    43c2:	4b0e      	ldr	r3, [pc, #56]	; (43fc <adc_async_register_channel_buffer+0xb0>)
    43c4:	4798      	blx	r3
    43c6:	4602      	mov	r2, r0
    43c8:	b998      	cbnz	r0, 43f2 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    43ca:	6a2b      	ldr	r3, [r5, #32]
    43cc:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    43ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43d0:	4499      	add	r9, r3
    43d2:	2300      	movs	r3, #0
    43d4:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    43d8:	4610      	mov	r0, r2
    43da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    43de:	2000      	movs	r0, #0
    43e0:	e7c1      	b.n	4366 <adc_async_register_channel_buffer+0x1a>
    43e2:	2000      	movs	r0, #0
    43e4:	e7bf      	b.n	4366 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    43e6:	f06f 020c 	mvn.w	r2, #12
    43ea:	e7f5      	b.n	43d8 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    43ec:	f06f 021b 	mvn.w	r2, #27
    43f0:	e7f2      	b.n	43d8 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    43f2:	f06f 020c 	mvn.w	r2, #12
    43f6:	e7ef      	b.n	43d8 <adc_async_register_channel_buffer+0x8c>
    43f8:	00005959 	.word	0x00005959
    43fc:	00005a01 	.word	0x00005a01
    4400:	0000cccc 	.word	0x0000cccc

00004404 <adc_async_enable_channel>:
{
    4404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4406:	460d      	mov	r5, r1
	ASSERT(descr);
    4408:	4f0b      	ldr	r7, [pc, #44]	; (4438 <adc_async_enable_channel+0x34>)
    440a:	4604      	mov	r4, r0
    440c:	2283      	movs	r2, #131	; 0x83
    440e:	4639      	mov	r1, r7
    4410:	3000      	adds	r0, #0
    4412:	bf18      	it	ne
    4414:	2001      	movne	r0, #1
    4416:	4e09      	ldr	r6, [pc, #36]	; (443c <adc_async_enable_channel+0x38>)
    4418:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    441a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    441e:	2284      	movs	r2, #132	; 0x84
    4420:	4639      	mov	r1, r7
    4422:	42a8      	cmp	r0, r5
    4424:	bf34      	ite	cc
    4426:	2000      	movcc	r0, #0
    4428:	2001      	movcs	r0, #1
    442a:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    442c:	4629      	mov	r1, r5
    442e:	4620      	mov	r0, r4
    4430:	4b03      	ldr	r3, [pc, #12]	; (4440 <adc_async_enable_channel+0x3c>)
    4432:	4798      	blx	r3
}
    4434:	2000      	movs	r0, #0
    4436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4438:	0000cccc 	.word	0x0000cccc
    443c:	00005959 	.word	0x00005959
    4440:	00005e1d 	.word	0x00005e1d

00004444 <adc_async_register_callback>:
{
    4444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4448:	460e      	mov	r6, r1
    444a:	4614      	mov	r4, r2
    444c:	4699      	mov	r9, r3
	ASSERT(descr);
    444e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 44c0 <adc_async_register_callback+0x7c>
    4452:	4605      	mov	r5, r0
    4454:	229c      	movs	r2, #156	; 0x9c
    4456:	4641      	mov	r1, r8
    4458:	3000      	adds	r0, #0
    445a:	bf18      	it	ne
    445c:	2001      	movne	r0, #1
    445e:	4f16      	ldr	r7, [pc, #88]	; (44b8 <adc_async_register_callback+0x74>)
    4460:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    4462:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4466:	229d      	movs	r2, #157	; 0x9d
    4468:	4641      	mov	r1, r8
    446a:	42b0      	cmp	r0, r6
    446c:	bf34      	ite	cc
    446e:	2000      	movcc	r0, #0
    4470:	2001      	movcs	r0, #1
    4472:	47b8      	blx	r7
	switch (type) {
    4474:	2c01      	cmp	r4, #1
    4476:	d019      	beq.n	44ac <adc_async_register_callback+0x68>
    4478:	b12c      	cbz	r4, 4486 <adc_async_register_callback+0x42>
    447a:	2c02      	cmp	r4, #2
    447c:	d019      	beq.n	44b2 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    447e:	f06f 000c 	mvn.w	r0, #12
}
    4482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    4486:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    4488:	5d9b      	ldrb	r3, [r3, r6]
    448a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    448c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4490:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    4494:	f119 0300 	adds.w	r3, r9, #0
    4498:	bf18      	it	ne
    449a:	2301      	movne	r3, #1
    449c:	4622      	mov	r2, r4
    449e:	4631      	mov	r1, r6
    44a0:	4628      	mov	r0, r5
    44a2:	4c06      	ldr	r4, [pc, #24]	; (44bc <adc_async_register_callback+0x78>)
    44a4:	47a0      	blx	r4
	return ERR_NONE;
    44a6:	2000      	movs	r0, #0
    44a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    44ac:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    44b0:	e7f0      	b.n	4494 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    44b2:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    44b6:	e7ed      	b.n	4494 <adc_async_register_callback+0x50>
    44b8:	00005959 	.word	0x00005959
    44bc:	00005e5b 	.word	0x00005e5b
    44c0:	0000cccc 	.word	0x0000cccc

000044c4 <adc_async_read_channel>:
{
    44c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44c8:	b083      	sub	sp, #12
    44ca:	4688      	mov	r8, r1
    44cc:	4691      	mov	r9, r2
    44ce:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    44d0:	4604      	mov	r4, r0
    44d2:	2800      	cmp	r0, #0
    44d4:	d04f      	beq.n	4576 <adc_async_read_channel+0xb2>
    44d6:	2a00      	cmp	r2, #0
    44d8:	d04f      	beq.n	457a <adc_async_read_channel+0xb6>
    44da:	1c18      	adds	r0, r3, #0
    44dc:	bf18      	it	ne
    44de:	2001      	movne	r0, #1
    44e0:	4f29      	ldr	r7, [pc, #164]	; (4588 <adc_async_read_channel+0xc4>)
    44e2:	22bc      	movs	r2, #188	; 0xbc
    44e4:	4639      	mov	r1, r7
    44e6:	4e29      	ldr	r6, [pc, #164]	; (458c <adc_async_read_channel+0xc8>)
    44e8:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    44ea:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    44ee:	22bd      	movs	r2, #189	; 0xbd
    44f0:	4639      	mov	r1, r7
    44f2:	4540      	cmp	r0, r8
    44f4:	bf34      	ite	cc
    44f6:	2000      	movcc	r0, #0
    44f8:	2001      	movcs	r0, #1
    44fa:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    44fc:	4620      	mov	r0, r4
    44fe:	4b24      	ldr	r3, [pc, #144]	; (4590 <adc_async_read_channel+0xcc>)
    4500:	4798      	blx	r3
	ASSERT(!(length % data_size));
    4502:	fb95 f3f0 	sdiv	r3, r5, r0
    4506:	fb03 5010 	mls	r0, r3, r0, r5
    450a:	22bf      	movs	r2, #191	; 0xbf
    450c:	4639      	mov	r1, r7
    450e:	fab0 f080 	clz	r0, r0
    4512:	0940      	lsrs	r0, r0, #5
    4514:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    4516:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4518:	f813 b008 	ldrb.w	fp, [r3, r8]
    451c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    4520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4522:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    4526:	a801      	add	r0, sp, #4
    4528:	4b1a      	ldr	r3, [pc, #104]	; (4594 <adc_async_read_channel+0xd0>)
    452a:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    452c:	f10b 0a04 	add.w	sl, fp, #4
    4530:	4650      	mov	r0, sl
    4532:	4b19      	ldr	r3, [pc, #100]	; (4598 <adc_async_read_channel+0xd4>)
    4534:	4798      	blx	r3
    4536:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    4538:	a801      	add	r0, sp, #4
    453a:	4b18      	ldr	r3, [pc, #96]	; (459c <adc_async_read_channel+0xd8>)
    453c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    453e:	f1b8 0f00 	cmp.w	r8, #0
    4542:	d01c      	beq.n	457e <adc_async_read_channel+0xba>
    4544:	b1ed      	cbz	r5, 4582 <adc_async_read_channel+0xbe>
    4546:	3d01      	subs	r5, #1
    4548:	b2ad      	uxth	r5, r5
    454a:	3502      	adds	r5, #2
    454c:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    454e:	4f14      	ldr	r7, [pc, #80]	; (45a0 <adc_async_read_channel+0xdc>)
    4550:	b2a6      	uxth	r6, r4
    4552:	1e61      	subs	r1, r4, #1
    4554:	4449      	add	r1, r9
    4556:	4650      	mov	r0, sl
    4558:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    455a:	4544      	cmp	r4, r8
    455c:	d002      	beq.n	4564 <adc_async_read_channel+0xa0>
    455e:	3401      	adds	r4, #1
    4560:	42ac      	cmp	r4, r5
    4562:	d1f5      	bne.n	4550 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4564:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4568:	1b9b      	subs	r3, r3, r6
    456a:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    456e:	4630      	mov	r0, r6
    4570:	b003      	add	sp, #12
    4572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    4576:	2000      	movs	r0, #0
    4578:	e7b2      	b.n	44e0 <adc_async_read_channel+0x1c>
    457a:	2000      	movs	r0, #0
    457c:	e7b0      	b.n	44e0 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    457e:	2600      	movs	r6, #0
    4580:	e7f0      	b.n	4564 <adc_async_read_channel+0xa0>
    4582:	2600      	movs	r6, #0
    4584:	e7ee      	b.n	4564 <adc_async_read_channel+0xa0>
    4586:	bf00      	nop
    4588:	0000cccc 	.word	0x0000cccc
    458c:	00005959 	.word	0x00005959
    4590:	00005e33 	.word	0x00005e33
    4594:	000045cd 	.word	0x000045cd
    4598:	00005ad5 	.word	0x00005ad5
    459c:	000045db 	.word	0x000045db
    45a0:	00005a51 	.word	0x00005a51

000045a4 <adc_async_start_conversion>:
{
    45a4:	b510      	push	{r4, lr}
	ASSERT(descr);
    45a6:	4604      	mov	r4, r0
    45a8:	22d6      	movs	r2, #214	; 0xd6
    45aa:	4905      	ldr	r1, [pc, #20]	; (45c0 <adc_async_start_conversion+0x1c>)
    45ac:	3000      	adds	r0, #0
    45ae:	bf18      	it	ne
    45b0:	2001      	movne	r0, #1
    45b2:	4b04      	ldr	r3, [pc, #16]	; (45c4 <adc_async_start_conversion+0x20>)
    45b4:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    45b6:	4620      	mov	r0, r4
    45b8:	4b03      	ldr	r3, [pc, #12]	; (45c8 <adc_async_start_conversion+0x24>)
    45ba:	4798      	blx	r3
}
    45bc:	2000      	movs	r0, #0
    45be:	bd10      	pop	{r4, pc}
    45c0:	0000cccc 	.word	0x0000cccc
    45c4:	00005959 	.word	0x00005959
    45c8:	00005e45 	.word	0x00005e45

000045cc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    45cc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    45d0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    45d2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    45d4:	f3bf 8f5f 	dmb	sy
    45d8:	4770      	bx	lr

000045da <atomic_leave_critical>:
    45da:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    45de:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    45e0:	f383 8810 	msr	PRIMASK, r3
    45e4:	4770      	bx	lr
	...

000045e8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    45e8:	b538      	push	{r3, r4, r5, lr}
    45ea:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    45ec:	4605      	mov	r5, r0
    45ee:	b158      	cbz	r0, 4608 <crc_sync_init+0x20>
    45f0:	1c08      	adds	r0, r1, #0
    45f2:	bf18      	it	ne
    45f4:	2001      	movne	r0, #1
    45f6:	222b      	movs	r2, #43	; 0x2b
    45f8:	4904      	ldr	r1, [pc, #16]	; (460c <crc_sync_init+0x24>)
    45fa:	4b05      	ldr	r3, [pc, #20]	; (4610 <crc_sync_init+0x28>)
    45fc:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    45fe:	4621      	mov	r1, r4
    4600:	4628      	mov	r0, r5
    4602:	4b04      	ldr	r3, [pc, #16]	; (4614 <crc_sync_init+0x2c>)
    4604:	4798      	blx	r3
}
    4606:	bd38      	pop	{r3, r4, r5, pc}
    4608:	2000      	movs	r0, #0
    460a:	e7f4      	b.n	45f6 <crc_sync_init+0xe>
    460c:	0000cce8 	.word	0x0000cce8
    4610:	00005959 	.word	0x00005959
    4614:	00006245 	.word	0x00006245

00004618 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    4618:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    461a:	4b02      	ldr	r3, [pc, #8]	; (4624 <delay_init+0xc>)
    461c:	6018      	str	r0, [r3, #0]
    461e:	4b02      	ldr	r3, [pc, #8]	; (4628 <delay_init+0x10>)
    4620:	4798      	blx	r3
    4622:	bd08      	pop	{r3, pc}
    4624:	20000648 	.word	0x20000648
    4628:	00007b85 	.word	0x00007b85

0000462c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    462c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    462e:	4b04      	ldr	r3, [pc, #16]	; (4640 <delay_us+0x14>)
    4630:	681c      	ldr	r4, [r3, #0]
    4632:	4b04      	ldr	r3, [pc, #16]	; (4644 <delay_us+0x18>)
    4634:	4798      	blx	r3
    4636:	4601      	mov	r1, r0
    4638:	4620      	mov	r0, r4
    463a:	4b03      	ldr	r3, [pc, #12]	; (4648 <delay_us+0x1c>)
    463c:	4798      	blx	r3
    463e:	bd10      	pop	{r4, pc}
    4640:	20000648 	.word	0x20000648
    4644:	00005f09 	.word	0x00005f09
    4648:	00007b99 	.word	0x00007b99

0000464c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    464c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    464e:	4b04      	ldr	r3, [pc, #16]	; (4660 <delay_ms+0x14>)
    4650:	681c      	ldr	r4, [r3, #0]
    4652:	4b04      	ldr	r3, [pc, #16]	; (4664 <delay_ms+0x18>)
    4654:	4798      	blx	r3
    4656:	4601      	mov	r1, r0
    4658:	4620      	mov	r0, r4
    465a:	4b03      	ldr	r3, [pc, #12]	; (4668 <delay_ms+0x1c>)
    465c:	4798      	blx	r3
    465e:	bd10      	pop	{r4, pc}
    4660:	20000648 	.word	0x20000648
    4664:	00005f11 	.word	0x00005f11
    4668:	00007b99 	.word	0x00007b99

0000466c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    466c:	b508      	push	{r3, lr}
	return _event_system_init();
    466e:	4b01      	ldr	r3, [pc, #4]	; (4674 <event_system_init+0x8>)
    4670:	4798      	blx	r3
}
    4672:	bd08      	pop	{r3, pc}
    4674:	0000624d 	.word	0x0000624d

00004678 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    4678:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    467a:	6943      	ldr	r3, [r0, #20]
    467c:	b103      	cbz	r3, 4680 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    467e:	4798      	blx	r3
    4680:	bd08      	pop	{r3, pc}

00004682 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    4682:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4684:	6983      	ldr	r3, [r0, #24]
    4686:	b103      	cbz	r3, 468a <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    4688:	4798      	blx	r3
    468a:	bd08      	pop	{r3, pc}

0000468c <flash_init>:
{
    468c:	b538      	push	{r3, r4, r5, lr}
    468e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4690:	4604      	mov	r4, r0
    4692:	b190      	cbz	r0, 46ba <flash_init+0x2e>
    4694:	1c08      	adds	r0, r1, #0
    4696:	bf18      	it	ne
    4698:	2001      	movne	r0, #1
    469a:	2238      	movs	r2, #56	; 0x38
    469c:	4908      	ldr	r1, [pc, #32]	; (46c0 <flash_init+0x34>)
    469e:	4b09      	ldr	r3, [pc, #36]	; (46c4 <flash_init+0x38>)
    46a0:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    46a2:	4629      	mov	r1, r5
    46a4:	4620      	mov	r0, r4
    46a6:	4b08      	ldr	r3, [pc, #32]	; (46c8 <flash_init+0x3c>)
    46a8:	4798      	blx	r3
	if (rc) {
    46aa:	4603      	mov	r3, r0
    46ac:	b918      	cbnz	r0, 46b6 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    46ae:	4a07      	ldr	r2, [pc, #28]	; (46cc <flash_init+0x40>)
    46b0:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    46b2:	4a07      	ldr	r2, [pc, #28]	; (46d0 <flash_init+0x44>)
    46b4:	6062      	str	r2, [r4, #4]
}
    46b6:	4618      	mov	r0, r3
    46b8:	bd38      	pop	{r3, r4, r5, pc}
    46ba:	2000      	movs	r0, #0
    46bc:	e7ed      	b.n	469a <flash_init+0xe>
    46be:	bf00      	nop
    46c0:	0000cd04 	.word	0x0000cd04
    46c4:	00005959 	.word	0x00005959
    46c8:	00006359 	.word	0x00006359
    46cc:	00004679 	.word	0x00004679
    46d0:	00004683 	.word	0x00004683

000046d4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    46d4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    46d6:	8843      	ldrh	r3, [r0, #2]
    46d8:	f413 7f80 	tst.w	r3, #256	; 0x100
    46dc:	d102      	bne.n	46e4 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    46de:	6b43      	ldr	r3, [r0, #52]	; 0x34
    46e0:	b103      	cbz	r3, 46e4 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    46e2:	4798      	blx	r3
    46e4:	bd08      	pop	{r3, pc}

000046e6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    46e6:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    46e8:	8843      	ldrh	r3, [r0, #2]
    46ea:	f413 7f80 	tst.w	r3, #256	; 0x100
    46ee:	d102      	bne.n	46f6 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    46f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    46f2:	b103      	cbz	r3, 46f6 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    46f4:	4798      	blx	r3
    46f6:	bd08      	pop	{r3, pc}

000046f8 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    46f8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    46fa:	8843      	ldrh	r3, [r0, #2]
    46fc:	f413 7f80 	tst.w	r3, #256	; 0x100
    4700:	d102      	bne.n	4708 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    4702:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4704:	b103      	cbz	r3, 4708 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    4706:	4798      	blx	r3
    4708:	bd08      	pop	{r3, pc}
	...

0000470c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    470c:	b510      	push	{r4, lr}
    470e:	b084      	sub	sp, #16
    4710:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4712:	8a83      	ldrh	r3, [r0, #20]
    4714:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4718:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    471a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    471e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    4722:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4724:	a901      	add	r1, sp, #4
    4726:	3828      	subs	r0, #40	; 0x28
    4728:	4b03      	ldr	r3, [pc, #12]	; (4738 <i2c_m_async_write+0x2c>)
    472a:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    472c:	2800      	cmp	r0, #0
    472e:	bf08      	it	eq
    4730:	4620      	moveq	r0, r4
    4732:	b004      	add	sp, #16
    4734:	bd10      	pop	{r4, pc}
    4736:	bf00      	nop
    4738:	000070d5 	.word	0x000070d5

0000473c <i2c_m_async_read>:
{
    473c:	b510      	push	{r4, lr}
    473e:	b084      	sub	sp, #16
    4740:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    4742:	8a83      	ldrh	r3, [r0, #20]
    4744:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    4748:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    474a:	f248 0301 	movw	r3, #32769	; 0x8001
    474e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    4752:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4754:	a901      	add	r1, sp, #4
    4756:	3828      	subs	r0, #40	; 0x28
    4758:	4b03      	ldr	r3, [pc, #12]	; (4768 <i2c_m_async_read+0x2c>)
    475a:	4798      	blx	r3
}
    475c:	2800      	cmp	r0, #0
    475e:	bf08      	it	eq
    4760:	4620      	moveq	r0, r4
    4762:	b004      	add	sp, #16
    4764:	bd10      	pop	{r4, pc}
    4766:	bf00      	nop
    4768:	000070d5 	.word	0x000070d5

0000476c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    476c:	b570      	push	{r4, r5, r6, lr}
    476e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4770:	4604      	mov	r4, r0
    4772:	2289      	movs	r2, #137	; 0x89
    4774:	490f      	ldr	r1, [pc, #60]	; (47b4 <i2c_m_async_init+0x48>)
    4776:	3000      	adds	r0, #0
    4778:	bf18      	it	ne
    477a:	2001      	movne	r0, #1
    477c:	4b0e      	ldr	r3, [pc, #56]	; (47b8 <i2c_m_async_init+0x4c>)
    477e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4780:	4629      	mov	r1, r5
    4782:	4620      	mov	r0, r4
    4784:	4b0d      	ldr	r3, [pc, #52]	; (47bc <i2c_m_async_init+0x50>)
    4786:	4798      	blx	r3
	if (init_status) {
    4788:	4605      	mov	r5, r0
    478a:	b108      	cbz	r0, 4790 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    478c:	4628      	mov	r0, r5
    478e:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4790:	4b0b      	ldr	r3, [pc, #44]	; (47c0 <i2c_m_async_init+0x54>)
    4792:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4794:	4b0b      	ldr	r3, [pc, #44]	; (47c4 <i2c_m_async_init+0x58>)
    4796:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4798:	4a0b      	ldr	r2, [pc, #44]	; (47c8 <i2c_m_async_init+0x5c>)
    479a:	2101      	movs	r1, #1
    479c:	4620      	mov	r0, r4
    479e:	4e0b      	ldr	r6, [pc, #44]	; (47cc <i2c_m_async_init+0x60>)
    47a0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    47a2:	4a0b      	ldr	r2, [pc, #44]	; (47d0 <i2c_m_async_init+0x64>)
    47a4:	2102      	movs	r1, #2
    47a6:	4620      	mov	r0, r4
    47a8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    47aa:	4a0a      	ldr	r2, [pc, #40]	; (47d4 <i2c_m_async_init+0x68>)
    47ac:	2100      	movs	r1, #0
    47ae:	4620      	mov	r0, r4
    47b0:	47b0      	blx	r6
	return ERR_NONE;
    47b2:	e7eb      	b.n	478c <i2c_m_async_init+0x20>
    47b4:	0000cd1c 	.word	0x0000cd1c
    47b8:	00005959 	.word	0x00005959
    47bc:	00007055 	.word	0x00007055
    47c0:	0000473d 	.word	0x0000473d
    47c4:	0000470d 	.word	0x0000470d
    47c8:	000046d5 	.word	0x000046d5
    47cc:	00007205 	.word	0x00007205
    47d0:	000046e7 	.word	0x000046e7
    47d4:	000046f9 	.word	0x000046f9

000047d8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    47d8:	b570      	push	{r4, r5, r6, lr}
    47da:	460d      	mov	r5, r1
    47dc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    47de:	4604      	mov	r4, r0
    47e0:	b160      	cbz	r0, 47fc <io_write+0x24>
    47e2:	1c08      	adds	r0, r1, #0
    47e4:	bf18      	it	ne
    47e6:	2001      	movne	r0, #1
    47e8:	2234      	movs	r2, #52	; 0x34
    47ea:	4905      	ldr	r1, [pc, #20]	; (4800 <io_write+0x28>)
    47ec:	4b05      	ldr	r3, [pc, #20]	; (4804 <io_write+0x2c>)
    47ee:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    47f0:	6823      	ldr	r3, [r4, #0]
    47f2:	4632      	mov	r2, r6
    47f4:	4629      	mov	r1, r5
    47f6:	4620      	mov	r0, r4
    47f8:	4798      	blx	r3
}
    47fa:	bd70      	pop	{r4, r5, r6, pc}
    47fc:	2000      	movs	r0, #0
    47fe:	e7f3      	b.n	47e8 <io_write+0x10>
    4800:	0000cd3c 	.word	0x0000cd3c
    4804:	00005959 	.word	0x00005959

00004808 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4808:	b570      	push	{r4, r5, r6, lr}
    480a:	460d      	mov	r5, r1
    480c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    480e:	4604      	mov	r4, r0
    4810:	b160      	cbz	r0, 482c <io_read+0x24>
    4812:	1c08      	adds	r0, r1, #0
    4814:	bf18      	it	ne
    4816:	2001      	movne	r0, #1
    4818:	223d      	movs	r2, #61	; 0x3d
    481a:	4905      	ldr	r1, [pc, #20]	; (4830 <io_read+0x28>)
    481c:	4b05      	ldr	r3, [pc, #20]	; (4834 <io_read+0x2c>)
    481e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4820:	6863      	ldr	r3, [r4, #4]
    4822:	4632      	mov	r2, r6
    4824:	4629      	mov	r1, r5
    4826:	4620      	mov	r0, r4
    4828:	4798      	blx	r3
}
    482a:	bd70      	pop	{r4, r5, r6, pc}
    482c:	2000      	movs	r0, #0
    482e:	e7f3      	b.n	4818 <io_read+0x10>
    4830:	0000cd3c 	.word	0x0000cd3c
    4834:	00005959 	.word	0x00005959

00004838 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    4838:	b538      	push	{r3, r4, r5, lr}
    483a:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    483c:	4605      	mov	r5, r0
    483e:	b158      	cbz	r0, 4858 <qspi_dma_init+0x20>
    4840:	1c08      	adds	r0, r1, #0
    4842:	bf18      	it	ne
    4844:	2001      	movne	r0, #1
    4846:	2231      	movs	r2, #49	; 0x31
    4848:	4904      	ldr	r1, [pc, #16]	; (485c <qspi_dma_init+0x24>)
    484a:	4b05      	ldr	r3, [pc, #20]	; (4860 <qspi_dma_init+0x28>)
    484c:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    484e:	4621      	mov	r1, r4
    4850:	4628      	mov	r0, r5
    4852:	4b04      	ldr	r3, [pc, #16]	; (4864 <qspi_dma_init+0x2c>)
    4854:	4798      	blx	r3
}
    4856:	bd38      	pop	{r3, r4, r5, pc}
    4858:	2000      	movs	r0, #0
    485a:	e7f4      	b.n	4846 <qspi_dma_init+0xe>
    485c:	0000cd50 	.word	0x0000cd50
    4860:	00005959 	.word	0x00005959
    4864:	00006579 	.word	0x00006579

00004868 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    486a:	460f      	mov	r7, r1
    486c:	4616      	mov	r6, r2
	ASSERT(io);
    486e:	4604      	mov	r4, r0
    4870:	f240 1227 	movw	r2, #295	; 0x127
    4874:	4909      	ldr	r1, [pc, #36]	; (489c <_spi_m_async_io_write+0x34>)
    4876:	3000      	adds	r0, #0
    4878:	bf18      	it	ne
    487a:	2001      	movne	r0, #1
    487c:	4b08      	ldr	r3, [pc, #32]	; (48a0 <_spi_m_async_io_write+0x38>)
    487e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    4880:	2500      	movs	r5, #0
    4882:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4884:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    4886:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    4888:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    488a:	2310      	movs	r3, #16
    488c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    488e:	2101      	movs	r1, #1
    4890:	f1a4 0020 	sub.w	r0, r4, #32
    4894:	4b03      	ldr	r3, [pc, #12]	; (48a4 <_spi_m_async_io_write+0x3c>)
    4896:	4798      	blx	r3

	return ERR_NONE;
}
    4898:	4628      	mov	r0, r5
    489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    489c:	0000cd6c 	.word	0x0000cd6c
    48a0:	00005959 	.word	0x00005959
    48a4:	00007699 	.word	0x00007699

000048a8 <_spi_m_async_io_read>:
{
    48a8:	b570      	push	{r4, r5, r6, lr}
    48aa:	460d      	mov	r5, r1
    48ac:	4616      	mov	r6, r2
	ASSERT(io);
    48ae:	4604      	mov	r4, r0
    48b0:	f240 1205 	movw	r2, #261	; 0x105
    48b4:	490c      	ldr	r1, [pc, #48]	; (48e8 <_spi_m_async_io_read+0x40>)
    48b6:	3000      	adds	r0, #0
    48b8:	bf18      	it	ne
    48ba:	2001      	movne	r0, #1
    48bc:	4b0b      	ldr	r3, [pc, #44]	; (48ec <_spi_m_async_io_read+0x44>)
    48be:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    48c0:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    48c2:	2500      	movs	r5, #0
    48c4:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    48c6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    48c8:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    48ca:	2310      	movs	r3, #16
    48cc:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    48ce:	3c20      	subs	r4, #32
    48d0:	2101      	movs	r1, #1
    48d2:	4620      	mov	r0, r4
    48d4:	4b06      	ldr	r3, [pc, #24]	; (48f0 <_spi_m_async_io_read+0x48>)
    48d6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    48d8:	f240 11ff 	movw	r1, #511	; 0x1ff
    48dc:	4620      	mov	r0, r4
    48de:	4b05      	ldr	r3, [pc, #20]	; (48f4 <_spi_m_async_io_read+0x4c>)
    48e0:	4798      	blx	r3
}
    48e2:	4628      	mov	r0, r5
    48e4:	bd70      	pop	{r4, r5, r6, pc}
    48e6:	bf00      	nop
    48e8:	0000cd6c 	.word	0x0000cd6c
    48ec:	00005959 	.word	0x00005959
    48f0:	000076cd 	.word	0x000076cd
    48f4:	00007749 	.word	0x00007749

000048f8 <_spi_dev_error>:
{
    48f8:	b570      	push	{r4, r5, r6, lr}
    48fa:	4604      	mov	r4, r0
    48fc:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    48fe:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    4900:	2100      	movs	r1, #0
    4902:	4b09      	ldr	r3, [pc, #36]	; (4928 <_spi_dev_error+0x30>)
    4904:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4906:	2100      	movs	r1, #0
    4908:	4620      	mov	r0, r4
    490a:	4b08      	ldr	r3, [pc, #32]	; (492c <_spi_dev_error+0x34>)
    490c:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    490e:	2100      	movs	r1, #0
    4910:	4620      	mov	r0, r4
    4912:	4b07      	ldr	r3, [pc, #28]	; (4930 <_spi_dev_error+0x38>)
    4914:	4798      	blx	r3
	spi->stat = 0;
    4916:	2300      	movs	r3, #0
    4918:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    491c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    491e:	b113      	cbz	r3, 4926 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    4920:	4631      	mov	r1, r6
    4922:	4628      	mov	r0, r5
    4924:	4798      	blx	r3
    4926:	bd70      	pop	{r4, r5, r6, pc}
    4928:	00007699 	.word	0x00007699
    492c:	000076cd 	.word	0x000076cd
    4930:	0000770d 	.word	0x0000770d

00004934 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    4934:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4936:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4938:	429a      	cmp	r2, r3
    493a:	d200      	bcs.n	493e <_spi_dev_complete+0xa>
    493c:	4770      	bx	lr
{
    493e:	b510      	push	{r4, lr}
    4940:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    4942:	2100      	movs	r1, #0
    4944:	4b04      	ldr	r3, [pc, #16]	; (4958 <_spi_dev_complete+0x24>)
    4946:	4798      	blx	r3
		spi->stat = 0;
    4948:	2300      	movs	r3, #0
    494a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    494e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4950:	b10b      	cbz	r3, 4956 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    4952:	1f20      	subs	r0, r4, #4
    4954:	4798      	blx	r3
    4956:	bd10      	pop	{r4, pc}
    4958:	0000770d 	.word	0x0000770d

0000495c <_spi_dev_tx>:
{
    495c:	b510      	push	{r4, lr}
    495e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    4960:	7903      	ldrb	r3, [r0, #4]
    4962:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4964:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4966:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4968:	f103 0101 	add.w	r1, r3, #1
    496c:	6401      	str	r1, [r0, #64]	; 0x40
    496e:	bf94      	ite	ls
    4970:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4972:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4976:	4b08      	ldr	r3, [pc, #32]	; (4998 <_spi_dev_tx+0x3c>)
    4978:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    497a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    497c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    497e:	429a      	cmp	r2, r3
    4980:	d000      	beq.n	4984 <_spi_dev_tx+0x28>
    4982:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4984:	2100      	movs	r1, #0
    4986:	4620      	mov	r0, r4
    4988:	4b04      	ldr	r3, [pc, #16]	; (499c <_spi_dev_tx+0x40>)
    498a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    498c:	2101      	movs	r1, #1
    498e:	4620      	mov	r0, r4
    4990:	4b03      	ldr	r3, [pc, #12]	; (49a0 <_spi_dev_tx+0x44>)
    4992:	4798      	blx	r3
}
    4994:	e7f5      	b.n	4982 <_spi_dev_tx+0x26>
    4996:	bf00      	nop
    4998:	00007749 	.word	0x00007749
    499c:	00007699 	.word	0x00007699
    49a0:	0000770d 	.word	0x0000770d

000049a4 <_spi_dev_rx>:
{
    49a4:	b570      	push	{r4, r5, r6, lr}
    49a6:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    49a8:	6b85      	ldr	r5, [r0, #56]	; 0x38
    49aa:	b305      	cbz	r5, 49ee <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    49ac:	7903      	ldrb	r3, [r0, #4]
    49ae:	2b01      	cmp	r3, #1
    49b0:	d916      	bls.n	49e0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    49b2:	6c06      	ldr	r6, [r0, #64]	; 0x40
    49b4:	1c73      	adds	r3, r6, #1
    49b6:	6403      	str	r3, [r0, #64]	; 0x40
    49b8:	4b18      	ldr	r3, [pc, #96]	; (4a1c <_spi_dev_rx+0x78>)
    49ba:	4798      	blx	r3
    49bc:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    49c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    49c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    49c4:	4293      	cmp	r3, r2
    49c6:	d21d      	bcs.n	4a04 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    49c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    49ca:	b1b2      	cbz	r2, 49fa <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    49cc:	7921      	ldrb	r1, [r4, #4]
    49ce:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    49d0:	bf94      	ite	ls
    49d2:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    49d4:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    49d8:	4620      	mov	r0, r4
    49da:	4b11      	ldr	r3, [pc, #68]	; (4a20 <_spi_dev_rx+0x7c>)
    49dc:	4798      	blx	r3
    49de:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    49e0:	6c06      	ldr	r6, [r0, #64]	; 0x40
    49e2:	1c73      	adds	r3, r6, #1
    49e4:	6403      	str	r3, [r0, #64]	; 0x40
    49e6:	4b0d      	ldr	r3, [pc, #52]	; (4a1c <_spi_dev_rx+0x78>)
    49e8:	4798      	blx	r3
    49ea:	55a8      	strb	r0, [r5, r6]
    49ec:	e7e8      	b.n	49c0 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    49ee:	4b0b      	ldr	r3, [pc, #44]	; (4a1c <_spi_dev_rx+0x78>)
    49f0:	4798      	blx	r3
		spi->xfercnt++;
    49f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    49f4:	3301      	adds	r3, #1
    49f6:	6423      	str	r3, [r4, #64]	; 0x40
    49f8:	e7e2      	b.n	49c0 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    49fa:	88e1      	ldrh	r1, [r4, #6]
    49fc:	4620      	mov	r0, r4
    49fe:	4b08      	ldr	r3, [pc, #32]	; (4a20 <_spi_dev_rx+0x7c>)
    4a00:	4798      	blx	r3
    4a02:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    4a04:	2100      	movs	r1, #0
    4a06:	4620      	mov	r0, r4
    4a08:	4b06      	ldr	r3, [pc, #24]	; (4a24 <_spi_dev_rx+0x80>)
    4a0a:	4798      	blx	r3
		spi->stat = 0;
    4a0c:	2300      	movs	r3, #0
    4a0e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4a12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4a14:	b10b      	cbz	r3, 4a1a <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    4a16:	1f20      	subs	r0, r4, #4
    4a18:	4798      	blx	r3
    4a1a:	bd70      	pop	{r4, r5, r6, pc}
    4a1c:	00007779 	.word	0x00007779
    4a20:	00007749 	.word	0x00007749
    4a24:	000076cd 	.word	0x000076cd

00004a28 <spi_m_async_init>:
{
    4a28:	b570      	push	{r4, r5, r6, lr}
    4a2a:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    4a2c:	4606      	mov	r6, r0
    4a2e:	b330      	cbz	r0, 4a7e <spi_m_async_init+0x56>
    4a30:	1c08      	adds	r0, r1, #0
    4a32:	bf18      	it	ne
    4a34:	2001      	movne	r0, #1
    4a36:	22a5      	movs	r2, #165	; 0xa5
    4a38:	4912      	ldr	r1, [pc, #72]	; (4a84 <spi_m_async_init+0x5c>)
    4a3a:	4b13      	ldr	r3, [pc, #76]	; (4a88 <spi_m_async_init+0x60>)
    4a3c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4a3e:	4634      	mov	r4, r6
    4a40:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    4a44:	4629      	mov	r1, r5
    4a46:	4620      	mov	r0, r4
    4a48:	4b10      	ldr	r3, [pc, #64]	; (4a8c <spi_m_async_init+0x64>)
    4a4a:	4798      	blx	r3
	if (rc >= 0) {
    4a4c:	2800      	cmp	r0, #0
    4a4e:	db15      	blt.n	4a7c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4a50:	4a0f      	ldr	r2, [pc, #60]	; (4a90 <spi_m_async_init+0x68>)
    4a52:	2100      	movs	r1, #0
    4a54:	4620      	mov	r0, r4
    4a56:	4d0f      	ldr	r5, [pc, #60]	; (4a94 <spi_m_async_init+0x6c>)
    4a58:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4a5a:	4a0f      	ldr	r2, [pc, #60]	; (4a98 <spi_m_async_init+0x70>)
    4a5c:	2101      	movs	r1, #1
    4a5e:	4620      	mov	r0, r4
    4a60:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4a62:	4a0e      	ldr	r2, [pc, #56]	; (4a9c <spi_m_async_init+0x74>)
    4a64:	2102      	movs	r1, #2
    4a66:	4620      	mov	r0, r4
    4a68:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4a6a:	4a0d      	ldr	r2, [pc, #52]	; (4aa0 <spi_m_async_init+0x78>)
    4a6c:	2103      	movs	r1, #3
    4a6e:	4620      	mov	r0, r4
    4a70:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    4a72:	4b0c      	ldr	r3, [pc, #48]	; (4aa4 <spi_m_async_init+0x7c>)
    4a74:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4a76:	4b0c      	ldr	r3, [pc, #48]	; (4aa8 <spi_m_async_init+0x80>)
    4a78:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    4a7a:	2000      	movs	r0, #0
}
    4a7c:	bd70      	pop	{r4, r5, r6, pc}
    4a7e:	2000      	movs	r0, #0
    4a80:	e7d9      	b.n	4a36 <spi_m_async_init+0xe>
    4a82:	bf00      	nop
    4a84:	0000cd6c 	.word	0x0000cd6c
    4a88:	00005959 	.word	0x00005959
    4a8c:	00007591 	.word	0x00007591
    4a90:	0000495d 	.word	0x0000495d
    4a94:	000077a5 	.word	0x000077a5
    4a98:	000049a5 	.word	0x000049a5
    4a9c:	00004935 	.word	0x00004935
    4aa0:	000048f9 	.word	0x000048f9
    4aa4:	000048a9 	.word	0x000048a9
    4aa8:	00004869 	.word	0x00004869

00004aac <spi_m_async_enable>:
{
    4aac:	b510      	push	{r4, lr}
	ASSERT(spi);
    4aae:	4604      	mov	r4, r0
    4ab0:	22c1      	movs	r2, #193	; 0xc1
    4ab2:	4905      	ldr	r1, [pc, #20]	; (4ac8 <spi_m_async_enable+0x1c>)
    4ab4:	3000      	adds	r0, #0
    4ab6:	bf18      	it	ne
    4ab8:	2001      	movne	r0, #1
    4aba:	4b04      	ldr	r3, [pc, #16]	; (4acc <spi_m_async_enable+0x20>)
    4abc:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    4abe:	1d20      	adds	r0, r4, #4
    4ac0:	4b03      	ldr	r3, [pc, #12]	; (4ad0 <spi_m_async_enable+0x24>)
    4ac2:	4798      	blx	r3
    4ac4:	bd10      	pop	{r4, pc}
    4ac6:	bf00      	nop
    4ac8:	0000cd6c 	.word	0x0000cd6c
    4acc:	00005959 	.word	0x00005959
    4ad0:	000075f9 	.word	0x000075f9

00004ad4 <spi_m_async_set_baudrate>:
{
    4ad4:	b538      	push	{r3, r4, r5, lr}
    4ad6:	460d      	mov	r5, r1
	ASSERT(spi);
    4ad8:	4604      	mov	r4, r0
    4ada:	22cf      	movs	r2, #207	; 0xcf
    4adc:	4909      	ldr	r1, [pc, #36]	; (4b04 <spi_m_async_set_baudrate+0x30>)
    4ade:	3000      	adds	r0, #0
    4ae0:	bf18      	it	ne
    4ae2:	2001      	movne	r0, #1
    4ae4:	4b08      	ldr	r3, [pc, #32]	; (4b08 <spi_m_async_set_baudrate+0x34>)
    4ae6:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4ae8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4aec:	f013 0f10 	tst.w	r3, #16
    4af0:	d104      	bne.n	4afc <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    4af2:	4629      	mov	r1, r5
    4af4:	1d20      	adds	r0, r4, #4
    4af6:	4b05      	ldr	r3, [pc, #20]	; (4b0c <spi_m_async_set_baudrate+0x38>)
    4af8:	4798      	blx	r3
    4afa:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4afc:	f06f 0003 	mvn.w	r0, #3
}
    4b00:	bd38      	pop	{r3, r4, r5, pc}
    4b02:	bf00      	nop
    4b04:	0000cd6c 	.word	0x0000cd6c
    4b08:	00005959 	.word	0x00005959
    4b0c:	0000765d 	.word	0x0000765d

00004b10 <spi_m_async_set_mode>:
{
    4b10:	b538      	push	{r3, r4, r5, lr}
    4b12:	460d      	mov	r5, r1
	ASSERT(spi);
    4b14:	4604      	mov	r4, r0
    4b16:	22d9      	movs	r2, #217	; 0xd9
    4b18:	4909      	ldr	r1, [pc, #36]	; (4b40 <spi_m_async_set_mode+0x30>)
    4b1a:	3000      	adds	r0, #0
    4b1c:	bf18      	it	ne
    4b1e:	2001      	movne	r0, #1
    4b20:	4b08      	ldr	r3, [pc, #32]	; (4b44 <spi_m_async_set_mode+0x34>)
    4b22:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4b24:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4b28:	f013 0f10 	tst.w	r3, #16
    4b2c:	d104      	bne.n	4b38 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    4b2e:	4629      	mov	r1, r5
    4b30:	1d20      	adds	r0, r4, #4
    4b32:	4b05      	ldr	r3, [pc, #20]	; (4b48 <spi_m_async_set_mode+0x38>)
    4b34:	4798      	blx	r3
    4b36:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4b38:	f06f 0003 	mvn.w	r0, #3
}
    4b3c:	bd38      	pop	{r3, r4, r5, pc}
    4b3e:	bf00      	nop
    4b40:	0000cd6c 	.word	0x0000cd6c
    4b44:	00005959 	.word	0x00005959
    4b48:	00007629 	.word	0x00007629

00004b4c <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    4b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b4e:	460d      	mov	r5, r1
    4b50:	4617      	mov	r7, r2
    4b52:	461e      	mov	r6, r3
	ASSERT(spi);
    4b54:	4604      	mov	r4, r0
    4b56:	f44f 729c 	mov.w	r2, #312	; 0x138
    4b5a:	4912      	ldr	r1, [pc, #72]	; (4ba4 <spi_m_async_transfer+0x58>)
    4b5c:	3000      	adds	r0, #0
    4b5e:	bf18      	it	ne
    4b60:	2001      	movne	r0, #1
    4b62:	4b11      	ldr	r3, [pc, #68]	; (4ba8 <spi_m_async_transfer+0x5c>)
    4b64:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    4b66:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    4b68:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    4b6a:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    4b6c:	2300      	movs	r3, #0
    4b6e:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4b70:	2310      	movs	r3, #16
    4b72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4b76:	1d26      	adds	r6, r4, #4
    4b78:	2101      	movs	r1, #1
    4b7a:	4630      	mov	r0, r6
    4b7c:	4b0b      	ldr	r3, [pc, #44]	; (4bac <spi_m_async_transfer+0x60>)
    4b7e:	4798      	blx	r3
	if (txbuf) {
    4b80:	b15d      	cbz	r5, 4b9a <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    4b82:	7a23      	ldrb	r3, [r4, #8]
    4b84:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    4b86:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4b88:	bf94      	ite	ls
    4b8a:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    4b8c:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    4b90:	4630      	mov	r0, r6
    4b92:	4b07      	ldr	r3, [pc, #28]	; (4bb0 <spi_m_async_transfer+0x64>)
    4b94:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    4b96:	2000      	movs	r0, #0
    4b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    4b9a:	8961      	ldrh	r1, [r4, #10]
    4b9c:	4630      	mov	r0, r6
    4b9e:	4b04      	ldr	r3, [pc, #16]	; (4bb0 <spi_m_async_transfer+0x64>)
    4ba0:	4798      	blx	r3
    4ba2:	e7f8      	b.n	4b96 <spi_m_async_transfer+0x4a>
    4ba4:	0000cd6c 	.word	0x0000cd6c
    4ba8:	00005959 	.word	0x00005959
    4bac:	000076cd 	.word	0x000076cd
    4bb0:	00007749 	.word	0x00007749

00004bb4 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    4bb4:	b570      	push	{r4, r5, r6, lr}
    4bb6:	460c      	mov	r4, r1
    4bb8:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    4bba:	4605      	mov	r5, r0
    4bbc:	b158      	cbz	r0, 4bd6 <spi_m_async_register_callback+0x22>
    4bbe:	2901      	cmp	r1, #1
    4bc0:	bf8c      	ite	hi
    4bc2:	2000      	movhi	r0, #0
    4bc4:	2001      	movls	r0, #1
    4bc6:	f240 1263 	movw	r2, #355	; 0x163
    4bca:	4908      	ldr	r1, [pc, #32]	; (4bec <spi_m_async_register_callback+0x38>)
    4bcc:	4b08      	ldr	r3, [pc, #32]	; (4bf0 <spi_m_async_register_callback+0x3c>)
    4bce:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4bd0:	b91c      	cbnz	r4, 4bda <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    4bd2:	632e      	str	r6, [r5, #48]	; 0x30
    4bd4:	bd70      	pop	{r4, r5, r6, pc}
    4bd6:	2000      	movs	r0, #0
    4bd8:	e7f5      	b.n	4bc6 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    4bda:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    4bdc:	1c32      	adds	r2, r6, #0
    4bde:	bf18      	it	ne
    4be0:	2201      	movne	r2, #1
    4be2:	2103      	movs	r1, #3
    4be4:	1d28      	adds	r0, r5, #4
    4be6:	4b03      	ldr	r3, [pc, #12]	; (4bf4 <spi_m_async_register_callback+0x40>)
    4be8:	4798      	blx	r3
    4bea:	bd70      	pop	{r4, r5, r6, pc}
    4bec:	0000cd6c 	.word	0x0000cd6c
    4bf0:	00005959 	.word	0x00005959
    4bf4:	000077d9 	.word	0x000077d9

00004bf8 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4bf8:	b538      	push	{r3, r4, r5, lr}
    4bfa:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4bfc:	4604      	mov	r4, r0
    4bfe:	b158      	cbz	r0, 4c18 <spi_m_async_get_io_descriptor+0x20>
    4c00:	1c08      	adds	r0, r1, #0
    4c02:	bf18      	it	ne
    4c04:	2001      	movne	r0, #1
    4c06:	f240 126f 	movw	r2, #367	; 0x16f
    4c0a:	4904      	ldr	r1, [pc, #16]	; (4c1c <spi_m_async_get_io_descriptor+0x24>)
    4c0c:	4b04      	ldr	r3, [pc, #16]	; (4c20 <spi_m_async_get_io_descriptor+0x28>)
    4c0e:	4798      	blx	r3
	*io = &spi->io;
    4c10:	3424      	adds	r4, #36	; 0x24
    4c12:	602c      	str	r4, [r5, #0]
	return 0;
}
    4c14:	2000      	movs	r0, #0
    4c16:	bd38      	pop	{r3, r4, r5, pc}
    4c18:	2000      	movs	r0, #0
    4c1a:	e7f4      	b.n	4c06 <spi_m_async_get_io_descriptor+0xe>
    4c1c:	0000cd6c 	.word	0x0000cd6c
    4c20:	00005959 	.word	0x00005959

00004c24 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4c24:	b570      	push	{r4, r5, r6, lr}
    4c26:	460d      	mov	r5, r1
    4c28:	4616      	mov	r6, r2
	ASSERT(io);
    4c2a:	4604      	mov	r4, r0
    4c2c:	2298      	movs	r2, #152	; 0x98
    4c2e:	4907      	ldr	r1, [pc, #28]	; (4c4c <_spi_m_dma_io_write+0x28>)
    4c30:	3000      	adds	r0, #0
    4c32:	bf18      	it	ne
    4c34:	2001      	movne	r0, #1
    4c36:	4b06      	ldr	r3, [pc, #24]	; (4c50 <_spi_m_dma_io_write+0x2c>)
    4c38:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    4c3a:	4633      	mov	r3, r6
    4c3c:	2200      	movs	r2, #0
    4c3e:	4629      	mov	r1, r5
    4c40:	f1a4 001c 	sub.w	r0, r4, #28
    4c44:	4c03      	ldr	r4, [pc, #12]	; (4c54 <_spi_m_dma_io_write+0x30>)
    4c46:	47a0      	blx	r4
}
    4c48:	bd70      	pop	{r4, r5, r6, pc}
    4c4a:	bf00      	nop
    4c4c:	0000cd8c 	.word	0x0000cd8c
    4c50:	00005959 	.word	0x00005959
    4c54:	00007a2d 	.word	0x00007a2d

00004c58 <_spi_m_dma_io_read>:
{
    4c58:	b570      	push	{r4, r5, r6, lr}
    4c5a:	460d      	mov	r5, r1
    4c5c:	4616      	mov	r6, r2
	ASSERT(io);
    4c5e:	4604      	mov	r4, r0
    4c60:	2281      	movs	r2, #129	; 0x81
    4c62:	4907      	ldr	r1, [pc, #28]	; (4c80 <_spi_m_dma_io_read+0x28>)
    4c64:	3000      	adds	r0, #0
    4c66:	bf18      	it	ne
    4c68:	2001      	movne	r0, #1
    4c6a:	4b06      	ldr	r3, [pc, #24]	; (4c84 <_spi_m_dma_io_read+0x2c>)
    4c6c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    4c6e:	4633      	mov	r3, r6
    4c70:	462a      	mov	r2, r5
    4c72:	2100      	movs	r1, #0
    4c74:	f1a4 001c 	sub.w	r0, r4, #28
    4c78:	4c03      	ldr	r4, [pc, #12]	; (4c88 <_spi_m_dma_io_read+0x30>)
    4c7a:	47a0      	blx	r4
}
    4c7c:	bd70      	pop	{r4, r5, r6, pc}
    4c7e:	bf00      	nop
    4c80:	0000cd8c 	.word	0x0000cd8c
    4c84:	00005959 	.word	0x00005959
    4c88:	00007a2d 	.word	0x00007a2d

00004c8c <spi_m_dma_init>:
{
    4c8c:	b538      	push	{r3, r4, r5, lr}
    4c8e:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    4c90:	4605      	mov	r5, r0
    4c92:	b1a0      	cbz	r0, 4cbe <spi_m_dma_init+0x32>
    4c94:	1c08      	adds	r0, r1, #0
    4c96:	bf18      	it	ne
    4c98:	2001      	movne	r0, #1
    4c9a:	223b      	movs	r2, #59	; 0x3b
    4c9c:	4909      	ldr	r1, [pc, #36]	; (4cc4 <spi_m_dma_init+0x38>)
    4c9e:	4b0a      	ldr	r3, [pc, #40]	; (4cc8 <spi_m_dma_init+0x3c>)
    4ca0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4ca2:	4628      	mov	r0, r5
    4ca4:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    4ca8:	4621      	mov	r1, r4
    4caa:	4b08      	ldr	r3, [pc, #32]	; (4ccc <spi_m_dma_init+0x40>)
    4cac:	4798      	blx	r3
	if (rc) {
    4cae:	4603      	mov	r3, r0
    4cb0:	b918      	cbnz	r0, 4cba <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    4cb2:	4a07      	ldr	r2, [pc, #28]	; (4cd0 <spi_m_dma_init+0x44>)
    4cb4:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    4cb6:	4a07      	ldr	r2, [pc, #28]	; (4cd4 <spi_m_dma_init+0x48>)
    4cb8:	622a      	str	r2, [r5, #32]
}
    4cba:	4618      	mov	r0, r3
    4cbc:	bd38      	pop	{r3, r4, r5, pc}
    4cbe:	2000      	movs	r0, #0
    4cc0:	e7eb      	b.n	4c9a <spi_m_dma_init+0xe>
    4cc2:	bf00      	nop
    4cc4:	0000cd8c 	.word	0x0000cd8c
    4cc8:	00005959 	.word	0x00005959
    4ccc:	00007811 	.word	0x00007811
    4cd0:	00004c59 	.word	0x00004c59
    4cd4:	00004c25 	.word	0x00004c25

00004cd8 <spi_m_dma_enable>:
{
    4cd8:	b510      	push	{r4, lr}
	ASSERT(spi);
    4cda:	4604      	mov	r4, r0
    4cdc:	2251      	movs	r2, #81	; 0x51
    4cde:	4905      	ldr	r1, [pc, #20]	; (4cf4 <spi_m_dma_enable+0x1c>)
    4ce0:	3000      	adds	r0, #0
    4ce2:	bf18      	it	ne
    4ce4:	2001      	movne	r0, #1
    4ce6:	4b04      	ldr	r3, [pc, #16]	; (4cf8 <spi_m_dma_enable+0x20>)
    4ce8:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    4cea:	1d20      	adds	r0, r4, #4
    4cec:	4b03      	ldr	r3, [pc, #12]	; (4cfc <spi_m_dma_enable+0x24>)
    4cee:	4798      	blx	r3
    4cf0:	bd10      	pop	{r4, pc}
    4cf2:	bf00      	nop
    4cf4:	0000cd8c 	.word	0x0000cd8c
    4cf8:	00005959 	.word	0x00005959
    4cfc:	0000798d 	.word	0x0000798d

00004d00 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4d00:	b570      	push	{r4, r5, r6, lr}
    4d02:	460d      	mov	r5, r1
    4d04:	4616      	mov	r6, r2
	ASSERT(spi);
    4d06:	4604      	mov	r4, r0
    4d08:	22a8      	movs	r2, #168	; 0xa8
    4d0a:	4906      	ldr	r1, [pc, #24]	; (4d24 <spi_m_dma_register_callback+0x24>)
    4d0c:	3000      	adds	r0, #0
    4d0e:	bf18      	it	ne
    4d10:	2001      	movne	r0, #1
    4d12:	4b05      	ldr	r3, [pc, #20]	; (4d28 <spi_m_dma_register_callback+0x28>)
    4d14:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    4d16:	4632      	mov	r2, r6
    4d18:	4629      	mov	r1, r5
    4d1a:	1d20      	adds	r0, r4, #4
    4d1c:	4b03      	ldr	r3, [pc, #12]	; (4d2c <spi_m_dma_register_callback+0x2c>)
    4d1e:	4798      	blx	r3
    4d20:	bd70      	pop	{r4, r5, r6, pc}
    4d22:	bf00      	nop
    4d24:	0000cd8c 	.word	0x0000cd8c
    4d28:	00005959 	.word	0x00005959
    4d2c:	000079bd 	.word	0x000079bd

00004d30 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4d30:	b538      	push	{r3, r4, r5, lr}
    4d32:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4d34:	4604      	mov	r4, r0
    4d36:	b150      	cbz	r0, 4d4e <spi_m_dma_get_io_descriptor+0x1e>
    4d38:	1c08      	adds	r0, r1, #0
    4d3a:	bf18      	it	ne
    4d3c:	2001      	movne	r0, #1
    4d3e:	22ae      	movs	r2, #174	; 0xae
    4d40:	4904      	ldr	r1, [pc, #16]	; (4d54 <spi_m_dma_get_io_descriptor+0x24>)
    4d42:	4b05      	ldr	r3, [pc, #20]	; (4d58 <spi_m_dma_get_io_descriptor+0x28>)
    4d44:	4798      	blx	r3
	*io = &spi->io;
    4d46:	3420      	adds	r4, #32
    4d48:	602c      	str	r4, [r5, #0]

	return 0;
}
    4d4a:	2000      	movs	r0, #0
    4d4c:	bd38      	pop	{r3, r4, r5, pc}
    4d4e:	2000      	movs	r0, #0
    4d50:	e7f5      	b.n	4d3e <spi_m_dma_get_io_descriptor+0xe>
    4d52:	bf00      	nop
    4d54:	0000cd8c 	.word	0x0000cd8c
    4d58:	00005959 	.word	0x00005959

00004d5c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d5e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    4d60:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    4d62:	b12f      	cbz	r7, 4d70 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    4d64:	688d      	ldr	r5, [r1, #8]
    4d66:	463c      	mov	r4, r7
    4d68:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4d6a:	f1c2 0e01 	rsb	lr, r2, #1
    4d6e:	e00b      	b.n	4d88 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    4d70:	4b0e      	ldr	r3, [pc, #56]	; (4dac <timer_add_timer_task+0x50>)
    4d72:	4798      	blx	r3
		return;
    4d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4d76:	4473      	add	r3, lr
    4d78:	68a0      	ldr	r0, [r4, #8]
    4d7a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    4d7c:	42ab      	cmp	r3, r5
    4d7e:	d20a      	bcs.n	4d96 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    4d80:	6823      	ldr	r3, [r4, #0]
    4d82:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4d84:	b153      	cbz	r3, 4d9c <timer_add_timer_task+0x40>
    4d86:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    4d88:	6863      	ldr	r3, [r4, #4]
    4d8a:	4293      	cmp	r3, r2
    4d8c:	d8f3      	bhi.n	4d76 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    4d8e:	68a0      	ldr	r0, [r4, #8]
    4d90:	4403      	add	r3, r0
    4d92:	1a9b      	subs	r3, r3, r2
    4d94:	e7f2      	b.n	4d7c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    4d96:	42a7      	cmp	r7, r4
    4d98:	d004      	beq.n	4da4 <timer_add_timer_task+0x48>
    4d9a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    4d9c:	4620      	mov	r0, r4
    4d9e:	4b04      	ldr	r3, [pc, #16]	; (4db0 <timer_add_timer_task+0x54>)
    4da0:	4798      	blx	r3
    4da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    4da4:	4660      	mov	r0, ip
    4da6:	4b01      	ldr	r3, [pc, #4]	; (4dac <timer_add_timer_task+0x50>)
    4da8:	4798      	blx	r3
    4daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4dac:	00005981 	.word	0x00005981
    4db0:	000059ad 	.word	0x000059ad

00004db4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    4db8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    4dba:	6907      	ldr	r7, [r0, #16]
    4dbc:	3701      	adds	r7, #1
    4dbe:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4dc0:	7e03      	ldrb	r3, [r0, #24]
    4dc2:	f013 0f01 	tst.w	r3, #1
    4dc6:	d113      	bne.n	4df0 <timer_process_counted+0x3c>
    4dc8:	7e03      	ldrb	r3, [r0, #24]
    4dca:	f013 0f02 	tst.w	r3, #2
    4dce:	d10f      	bne.n	4df0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4dd0:	b354      	cbz	r4, 4e28 <timer_process_counted+0x74>
    4dd2:	6863      	ldr	r3, [r4, #4]
    4dd4:	1afb      	subs	r3, r7, r3
    4dd6:	68a2      	ldr	r2, [r4, #8]
    4dd8:	4293      	cmp	r3, r2
    4dda:	d307      	bcc.n	4dec <timer_process_counted+0x38>
    4ddc:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    4dde:	f100 0814 	add.w	r8, r0, #20
    4de2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4e2c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    4de6:	f8df a048 	ldr.w	sl, [pc, #72]	; 4e30 <timer_process_counted+0x7c>
    4dea:	e012      	b.n	4e12 <timer_process_counted+0x5e>
    4dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4df0:	7e03      	ldrb	r3, [r0, #24]
    4df2:	f043 0302 	orr.w	r3, r3, #2
    4df6:	7603      	strb	r3, [r0, #24]
		return;
    4df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dfc:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    4dfe:	68e3      	ldr	r3, [r4, #12]
    4e00:	4620      	mov	r0, r4
    4e02:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4e04:	b185      	cbz	r5, 4e28 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4e06:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4e08:	686b      	ldr	r3, [r5, #4]
    4e0a:	1afb      	subs	r3, r7, r3
    4e0c:	68aa      	ldr	r2, [r5, #8]
    4e0e:	4293      	cmp	r3, r2
    4e10:	d30a      	bcc.n	4e28 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    4e12:	4640      	mov	r0, r8
    4e14:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4e16:	7c23      	ldrb	r3, [r4, #16]
    4e18:	2b01      	cmp	r3, #1
    4e1a:	d1ef      	bne.n	4dfc <timer_process_counted+0x48>
			tmp->time_label = time;
    4e1c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4e1e:	463a      	mov	r2, r7
    4e20:	4621      	mov	r1, r4
    4e22:	4640      	mov	r0, r8
    4e24:	47d0      	blx	sl
    4e26:	e7e9      	b.n	4dfc <timer_process_counted+0x48>
    4e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e2c:	000059f5 	.word	0x000059f5
    4e30:	00004d5d 	.word	0x00004d5d

00004e34 <timer_init>:
{
    4e34:	b570      	push	{r4, r5, r6, lr}
    4e36:	460e      	mov	r6, r1
    4e38:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    4e3a:	4604      	mov	r4, r0
    4e3c:	b190      	cbz	r0, 4e64 <timer_init+0x30>
    4e3e:	b199      	cbz	r1, 4e68 <timer_init+0x34>
    4e40:	1c10      	adds	r0, r2, #0
    4e42:	bf18      	it	ne
    4e44:	2001      	movne	r0, #1
    4e46:	223b      	movs	r2, #59	; 0x3b
    4e48:	4908      	ldr	r1, [pc, #32]	; (4e6c <timer_init+0x38>)
    4e4a:	4b09      	ldr	r3, [pc, #36]	; (4e70 <timer_init+0x3c>)
    4e4c:	4798      	blx	r3
	descr->func = func;
    4e4e:	4620      	mov	r0, r4
    4e50:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    4e54:	682b      	ldr	r3, [r5, #0]
    4e56:	4631      	mov	r1, r6
    4e58:	4798      	blx	r3
	descr->time                           = 0;
    4e5a:	2000      	movs	r0, #0
    4e5c:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4e5e:	4b05      	ldr	r3, [pc, #20]	; (4e74 <timer_init+0x40>)
    4e60:	6063      	str	r3, [r4, #4]
}
    4e62:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    4e64:	2000      	movs	r0, #0
    4e66:	e7ee      	b.n	4e46 <timer_init+0x12>
    4e68:	2000      	movs	r0, #0
    4e6a:	e7ec      	b.n	4e46 <timer_init+0x12>
    4e6c:	0000cda8 	.word	0x0000cda8
    4e70:	00005959 	.word	0x00005959
    4e74:	00004db5 	.word	0x00004db5

00004e78 <timer_start>:
{
    4e78:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    4e7a:	4604      	mov	r4, r0
    4e7c:	b198      	cbz	r0, 4ea6 <timer_start+0x2e>
    4e7e:	6800      	ldr	r0, [r0, #0]
    4e80:	3000      	adds	r0, #0
    4e82:	bf18      	it	ne
    4e84:	2001      	movne	r0, #1
    4e86:	2254      	movs	r2, #84	; 0x54
    4e88:	4909      	ldr	r1, [pc, #36]	; (4eb0 <timer_start+0x38>)
    4e8a:	4b0a      	ldr	r3, [pc, #40]	; (4eb4 <timer_start+0x3c>)
    4e8c:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    4e8e:	1d25      	adds	r5, r4, #4
    4e90:	6823      	ldr	r3, [r4, #0]
    4e92:	699b      	ldr	r3, [r3, #24]
    4e94:	4628      	mov	r0, r5
    4e96:	4798      	blx	r3
    4e98:	b938      	cbnz	r0, 4eaa <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    4e9a:	6823      	ldr	r3, [r4, #0]
    4e9c:	689b      	ldr	r3, [r3, #8]
    4e9e:	4628      	mov	r0, r5
    4ea0:	4798      	blx	r3
	return ERR_NONE;
    4ea2:	2000      	movs	r0, #0
    4ea4:	bd38      	pop	{r3, r4, r5, pc}
    4ea6:	2000      	movs	r0, #0
    4ea8:	e7ed      	b.n	4e86 <timer_start+0xe>
		return ERR_DENIED;
    4eaa:	f06f 0010 	mvn.w	r0, #16
}
    4eae:	bd38      	pop	{r3, r4, r5, pc}
    4eb0:	0000cda8 	.word	0x0000cda8
    4eb4:	00005959 	.word	0x00005959

00004eb8 <timer_add_task>:
{
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	b082      	sub	sp, #8
    4ebc:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    4ebe:	4604      	mov	r4, r0
    4ec0:	b328      	cbz	r0, 4f0e <timer_add_task+0x56>
    4ec2:	b331      	cbz	r1, 4f12 <timer_add_task+0x5a>
    4ec4:	6800      	ldr	r0, [r0, #0]
    4ec6:	3000      	adds	r0, #0
    4ec8:	bf18      	it	ne
    4eca:	2001      	movne	r0, #1
    4ecc:	227b      	movs	r2, #123	; 0x7b
    4ece:	4920      	ldr	r1, [pc, #128]	; (4f50 <timer_add_task+0x98>)
    4ed0:	4b20      	ldr	r3, [pc, #128]	; (4f54 <timer_add_task+0x9c>)
    4ed2:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4ed4:	7f23      	ldrb	r3, [r4, #28]
    4ed6:	f043 0301 	orr.w	r3, r3, #1
    4eda:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    4edc:	f104 0618 	add.w	r6, r4, #24
    4ee0:	4629      	mov	r1, r5
    4ee2:	4630      	mov	r0, r6
    4ee4:	4b1c      	ldr	r3, [pc, #112]	; (4f58 <timer_add_task+0xa0>)
    4ee6:	4798      	blx	r3
    4ee8:	b9a8      	cbnz	r0, 4f16 <timer_add_task+0x5e>
	task->time_label = descr->time;
    4eea:	6963      	ldr	r3, [r4, #20]
    4eec:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4eee:	6962      	ldr	r2, [r4, #20]
    4ef0:	4629      	mov	r1, r5
    4ef2:	4630      	mov	r0, r6
    4ef4:	4b19      	ldr	r3, [pc, #100]	; (4f5c <timer_add_task+0xa4>)
    4ef6:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4ef8:	7f23      	ldrb	r3, [r4, #28]
    4efa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4efe:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4f00:	7f23      	ldrb	r3, [r4, #28]
    4f02:	f013 0f02 	tst.w	r3, #2
    4f06:	d112      	bne.n	4f2e <timer_add_task+0x76>
	return ERR_NONE;
    4f08:	2000      	movs	r0, #0
}
    4f0a:	b002      	add	sp, #8
    4f0c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    4f0e:	2000      	movs	r0, #0
    4f10:	e7dc      	b.n	4ecc <timer_add_task+0x14>
    4f12:	2000      	movs	r0, #0
    4f14:	e7da      	b.n	4ecc <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4f16:	7f23      	ldrb	r3, [r4, #28]
    4f18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4f1c:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    4f1e:	2280      	movs	r2, #128	; 0x80
    4f20:	490b      	ldr	r1, [pc, #44]	; (4f50 <timer_add_task+0x98>)
    4f22:	2000      	movs	r0, #0
    4f24:	4b0b      	ldr	r3, [pc, #44]	; (4f54 <timer_add_task+0x9c>)
    4f26:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4f28:	f06f 0011 	mvn.w	r0, #17
    4f2c:	e7ed      	b.n	4f0a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    4f2e:	a801      	add	r0, sp, #4
    4f30:	4b0b      	ldr	r3, [pc, #44]	; (4f60 <timer_add_task+0xa8>)
    4f32:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4f34:	7f23      	ldrb	r3, [r4, #28]
    4f36:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4f3a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    4f3c:	6823      	ldr	r3, [r4, #0]
    4f3e:	69db      	ldr	r3, [r3, #28]
    4f40:	1d20      	adds	r0, r4, #4
    4f42:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4f44:	a801      	add	r0, sp, #4
    4f46:	4b07      	ldr	r3, [pc, #28]	; (4f64 <timer_add_task+0xac>)
    4f48:	4798      	blx	r3
	return ERR_NONE;
    4f4a:	2000      	movs	r0, #0
    4f4c:	e7dd      	b.n	4f0a <timer_add_task+0x52>
    4f4e:	bf00      	nop
    4f50:	0000cda8 	.word	0x0000cda8
    4f54:	00005959 	.word	0x00005959
    4f58:	0000595f 	.word	0x0000595f
    4f5c:	00004d5d 	.word	0x00004d5d
    4f60:	000045cd 	.word	0x000045cd
    4f64:	000045db 	.word	0x000045db

00004f68 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    4f68:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    4f6a:	2300      	movs	r3, #0
    4f6c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    4f6e:	69c3      	ldr	r3, [r0, #28]
    4f70:	b11b      	cbz	r3, 4f7a <usart_transmission_complete+0x12>
    4f72:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    4f76:	4610      	mov	r0, r2
    4f78:	4798      	blx	r3
    4f7a:	bd08      	pop	{r3, pc}

00004f7c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    4f7c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    4f7e:	2300      	movs	r3, #0
    4f80:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    4f82:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4f84:	b11b      	cbz	r3, 4f8e <usart_error+0x12>
    4f86:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    4f8a:	4610      	mov	r0, r2
    4f8c:	4798      	blx	r3
    4f8e:	bd08      	pop	{r3, pc}

00004f90 <usart_fill_rx_buffer>:
{
    4f90:	b538      	push	{r3, r4, r5, lr}
    4f92:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    4f94:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    4f98:	302c      	adds	r0, #44	; 0x2c
    4f9a:	4b03      	ldr	r3, [pc, #12]	; (4fa8 <usart_fill_rx_buffer+0x18>)
    4f9c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    4f9e:	6a23      	ldr	r3, [r4, #32]
    4fa0:	b10b      	cbz	r3, 4fa6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    4fa2:	4628      	mov	r0, r5
    4fa4:	4798      	blx	r3
    4fa6:	bd38      	pop	{r3, r4, r5, pc}
    4fa8:	00005a95 	.word	0x00005a95

00004fac <usart_async_write>:
{
    4fac:	b570      	push	{r4, r5, r6, lr}
    4fae:	460e      	mov	r6, r1
    4fb0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    4fb2:	4604      	mov	r4, r0
    4fb4:	b1e0      	cbz	r0, 4ff0 <usart_async_write+0x44>
    4fb6:	b1e9      	cbz	r1, 4ff4 <usart_async_write+0x48>
    4fb8:	1c10      	adds	r0, r2, #0
    4fba:	bf18      	it	ne
    4fbc:	2001      	movne	r0, #1
    4fbe:	f240 123b 	movw	r2, #315	; 0x13b
    4fc2:	490f      	ldr	r1, [pc, #60]	; (5000 <usart_async_write+0x54>)
    4fc4:	4b0f      	ldr	r3, [pc, #60]	; (5004 <usart_async_write+0x58>)
    4fc6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    4fc8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    4fcc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    4fd0:	429a      	cmp	r2, r3
    4fd2:	d111      	bne.n	4ff8 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    4fd4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    4fd6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    4fda:	2300      	movs	r3, #0
    4fdc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    4fe0:	2301      	movs	r3, #1
    4fe2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    4fe4:	f104 0008 	add.w	r0, r4, #8
    4fe8:	4b07      	ldr	r3, [pc, #28]	; (5008 <usart_async_write+0x5c>)
    4fea:	4798      	blx	r3
	return (int32_t)length;
    4fec:	4628      	mov	r0, r5
    4fee:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    4ff0:	2000      	movs	r0, #0
    4ff2:	e7e4      	b.n	4fbe <usart_async_write+0x12>
    4ff4:	2000      	movs	r0, #0
    4ff6:	e7e2      	b.n	4fbe <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    4ff8:	f06f 001b 	mvn.w	r0, #27
}
    4ffc:	bd70      	pop	{r4, r5, r6, pc}
    4ffe:	bf00      	nop
    5000:	0000cdc0 	.word	0x0000cdc0
    5004:	00005959 	.word	0x00005959
    5008:	00006fd7 	.word	0x00006fd7

0000500c <usart_process_byte_sent>:
{
    500c:	b510      	push	{r4, lr}
    500e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    5010:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    5012:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    5016:	429a      	cmp	r2, r3
    5018:	d009      	beq.n	502e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    501a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    501c:	1c59      	adds	r1, r3, #1
    501e:	8781      	strh	r1, [r0, #60]	; 0x3c
    5020:	5cd1      	ldrb	r1, [r2, r3]
    5022:	4b04      	ldr	r3, [pc, #16]	; (5034 <usart_process_byte_sent+0x28>)
    5024:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    5026:	4620      	mov	r0, r4
    5028:	4b03      	ldr	r3, [pc, #12]	; (5038 <usart_process_byte_sent+0x2c>)
    502a:	4798      	blx	r3
    502c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    502e:	4b03      	ldr	r3, [pc, #12]	; (503c <usart_process_byte_sent+0x30>)
    5030:	4798      	blx	r3
    5032:	bd10      	pop	{r4, pc}
    5034:	00006fab 	.word	0x00006fab
    5038:	00006fd7 	.word	0x00006fd7
    503c:	00006fdf 	.word	0x00006fdf

00005040 <usart_async_read>:
{
    5040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5044:	b082      	sub	sp, #8
    5046:	460f      	mov	r7, r1
    5048:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    504a:	4606      	mov	r6, r0
    504c:	b1a0      	cbz	r0, 5078 <usart_async_read+0x38>
    504e:	b199      	cbz	r1, 5078 <usart_async_read+0x38>
    5050:	2a00      	cmp	r2, #0
    5052:	d12d      	bne.n	50b0 <usart_async_read+0x70>
    5054:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5058:	4929      	ldr	r1, [pc, #164]	; (5100 <usart_async_read+0xc0>)
    505a:	2000      	movs	r0, #0
    505c:	4b29      	ldr	r3, [pc, #164]	; (5104 <usart_async_read+0xc4>)
    505e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5060:	a801      	add	r0, sp, #4
    5062:	4b29      	ldr	r3, [pc, #164]	; (5108 <usart_async_read+0xc8>)
    5064:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5066:	f106 0034 	add.w	r0, r6, #52	; 0x34
    506a:	4b28      	ldr	r3, [pc, #160]	; (510c <usart_async_read+0xcc>)
    506c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    506e:	a801      	add	r0, sp, #4
    5070:	4b27      	ldr	r3, [pc, #156]	; (5110 <usart_async_read+0xd0>)
    5072:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5074:	2500      	movs	r5, #0
	return (int32_t)was_read;
    5076:	e03e      	b.n	50f6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5078:	f44f 72ac 	mov.w	r2, #344	; 0x158
    507c:	4920      	ldr	r1, [pc, #128]	; (5100 <usart_async_read+0xc0>)
    507e:	2000      	movs	r0, #0
    5080:	4b20      	ldr	r3, [pc, #128]	; (5104 <usart_async_read+0xc4>)
    5082:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5084:	a801      	add	r0, sp, #4
    5086:	4b20      	ldr	r3, [pc, #128]	; (5108 <usart_async_read+0xc8>)
    5088:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    508a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    508e:	4650      	mov	r0, sl
    5090:	4b1e      	ldr	r3, [pc, #120]	; (510c <usart_async_read+0xcc>)
    5092:	4798      	blx	r3
    5094:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    5096:	a801      	add	r0, sp, #4
    5098:	4b1d      	ldr	r3, [pc, #116]	; (5110 <usart_async_read+0xd0>)
    509a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    509c:	f1b9 0f00 	cmp.w	r9, #0
    50a0:	d004      	beq.n	50ac <usart_async_read+0x6c>
    50a2:	f1b8 0f00 	cmp.w	r8, #0
    50a6:	d119      	bne.n	50dc <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    50a8:	2500      	movs	r5, #0
    50aa:	e024      	b.n	50f6 <usart_async_read+0xb6>
    50ac:	2500      	movs	r5, #0
    50ae:	e022      	b.n	50f6 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    50b0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    50b4:	4912      	ldr	r1, [pc, #72]	; (5100 <usart_async_read+0xc0>)
    50b6:	2001      	movs	r0, #1
    50b8:	4b12      	ldr	r3, [pc, #72]	; (5104 <usart_async_read+0xc4>)
    50ba:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    50bc:	a801      	add	r0, sp, #4
    50be:	4b12      	ldr	r3, [pc, #72]	; (5108 <usart_async_read+0xc8>)
    50c0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    50c2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    50c6:	4650      	mov	r0, sl
    50c8:	4b10      	ldr	r3, [pc, #64]	; (510c <usart_async_read+0xcc>)
    50ca:	4798      	blx	r3
    50cc:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    50ce:	a801      	add	r0, sp, #4
    50d0:	4b0f      	ldr	r3, [pc, #60]	; (5110 <usart_async_read+0xd0>)
    50d2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    50d4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    50d6:	f1b9 0f00 	cmp.w	r9, #0
    50da:	d00c      	beq.n	50f6 <usart_async_read+0xb6>
{
    50dc:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    50de:	4e0d      	ldr	r6, [pc, #52]	; (5114 <usart_async_read+0xd4>)
    50e0:	1c60      	adds	r0, r4, #1
    50e2:	b285      	uxth	r5, r0
    50e4:	1939      	adds	r1, r7, r4
    50e6:	4650      	mov	r0, sl
    50e8:	47b0      	blx	r6
    50ea:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    50ec:	454c      	cmp	r4, r9
    50ee:	d202      	bcs.n	50f6 <usart_async_read+0xb6>
    50f0:	b2a3      	uxth	r3, r4
    50f2:	4598      	cmp	r8, r3
    50f4:	d8f4      	bhi.n	50e0 <usart_async_read+0xa0>
}
    50f6:	4628      	mov	r0, r5
    50f8:	b002      	add	sp, #8
    50fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    50fe:	bf00      	nop
    5100:	0000cdc0 	.word	0x0000cdc0
    5104:	00005959 	.word	0x00005959
    5108:	000045cd 	.word	0x000045cd
    510c:	00005ad5 	.word	0x00005ad5
    5110:	000045db 	.word	0x000045db
    5114:	00005a51 	.word	0x00005a51

00005118 <usart_async_init>:
{
    5118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    511a:	460d      	mov	r5, r1
    511c:	4616      	mov	r6, r2
    511e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    5120:	4604      	mov	r4, r0
    5122:	b320      	cbz	r0, 516e <usart_async_init+0x56>
    5124:	b329      	cbz	r1, 5172 <usart_async_init+0x5a>
    5126:	b332      	cbz	r2, 5176 <usart_async_init+0x5e>
    5128:	1c18      	adds	r0, r3, #0
    512a:	bf18      	it	ne
    512c:	2001      	movne	r0, #1
    512e:	223a      	movs	r2, #58	; 0x3a
    5130:	4913      	ldr	r1, [pc, #76]	; (5180 <usart_async_init+0x68>)
    5132:	4b14      	ldr	r3, [pc, #80]	; (5184 <usart_async_init+0x6c>)
    5134:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    5136:	463a      	mov	r2, r7
    5138:	4631      	mov	r1, r6
    513a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    513e:	4b12      	ldr	r3, [pc, #72]	; (5188 <usart_async_init+0x70>)
    5140:	4798      	blx	r3
    5142:	b9d0      	cbnz	r0, 517a <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    5144:	4629      	mov	r1, r5
    5146:	f104 0008 	add.w	r0, r4, #8
    514a:	4b10      	ldr	r3, [pc, #64]	; (518c <usart_async_init+0x74>)
    514c:	4798      	blx	r3
	if (init_status) {
    514e:	4603      	mov	r3, r0
    5150:	b958      	cbnz	r0, 516a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    5152:	4a0f      	ldr	r2, [pc, #60]	; (5190 <usart_async_init+0x78>)
    5154:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    5156:	4a0f      	ldr	r2, [pc, #60]	; (5194 <usart_async_init+0x7c>)
    5158:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    515a:	4a0f      	ldr	r2, [pc, #60]	; (5198 <usart_async_init+0x80>)
    515c:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    515e:	4a0f      	ldr	r2, [pc, #60]	; (519c <usart_async_init+0x84>)
    5160:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    5162:	4a0f      	ldr	r2, [pc, #60]	; (51a0 <usart_async_init+0x88>)
    5164:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    5166:	4a0f      	ldr	r2, [pc, #60]	; (51a4 <usart_async_init+0x8c>)
    5168:	6162      	str	r2, [r4, #20]
}
    516a:	4618      	mov	r0, r3
    516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    516e:	2000      	movs	r0, #0
    5170:	e7dd      	b.n	512e <usart_async_init+0x16>
    5172:	2000      	movs	r0, #0
    5174:	e7db      	b.n	512e <usart_async_init+0x16>
    5176:	2000      	movs	r0, #0
    5178:	e7d9      	b.n	512e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    517a:	f06f 030c 	mvn.w	r3, #12
    517e:	e7f4      	b.n	516a <usart_async_init+0x52>
    5180:	0000cdc0 	.word	0x0000cdc0
    5184:	00005959 	.word	0x00005959
    5188:	00005a01 	.word	0x00005a01
    518c:	00006f01 	.word	0x00006f01
    5190:	00005041 	.word	0x00005041
    5194:	00004fad 	.word	0x00004fad
    5198:	0000500d 	.word	0x0000500d
    519c:	00004f91 	.word	0x00004f91
    51a0:	00004f69 	.word	0x00004f69
    51a4:	00004f7d 	.word	0x00004f7d

000051a8 <usart_async_enable>:
{
    51a8:	b510      	push	{r4, lr}
	ASSERT(descr);
    51aa:	4604      	mov	r4, r0
    51ac:	2261      	movs	r2, #97	; 0x61
    51ae:	4906      	ldr	r1, [pc, #24]	; (51c8 <usart_async_enable+0x20>)
    51b0:	3000      	adds	r0, #0
    51b2:	bf18      	it	ne
    51b4:	2001      	movne	r0, #1
    51b6:	4b05      	ldr	r3, [pc, #20]	; (51cc <usart_async_enable+0x24>)
    51b8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    51ba:	f104 0008 	add.w	r0, r4, #8
    51be:	4b04      	ldr	r3, [pc, #16]	; (51d0 <usart_async_enable+0x28>)
    51c0:	4798      	blx	r3
}
    51c2:	2000      	movs	r0, #0
    51c4:	bd10      	pop	{r4, pc}
    51c6:	bf00      	nop
    51c8:	0000cdc0 	.word	0x0000cdc0
    51cc:	00005959 	.word	0x00005959
    51d0:	00006f91 	.word	0x00006f91

000051d4 <usart_async_get_io_descriptor>:
{
    51d4:	b538      	push	{r3, r4, r5, lr}
    51d6:	460c      	mov	r4, r1
	ASSERT(descr && io);
    51d8:	4605      	mov	r5, r0
    51da:	b148      	cbz	r0, 51f0 <usart_async_get_io_descriptor+0x1c>
    51dc:	1c08      	adds	r0, r1, #0
    51de:	bf18      	it	ne
    51e0:	2001      	movne	r0, #1
    51e2:	2277      	movs	r2, #119	; 0x77
    51e4:	4903      	ldr	r1, [pc, #12]	; (51f4 <usart_async_get_io_descriptor+0x20>)
    51e6:	4b04      	ldr	r3, [pc, #16]	; (51f8 <usart_async_get_io_descriptor+0x24>)
    51e8:	4798      	blx	r3
	*io = &descr->io;
    51ea:	6025      	str	r5, [r4, #0]
}
    51ec:	2000      	movs	r0, #0
    51ee:	bd38      	pop	{r3, r4, r5, pc}
    51f0:	2000      	movs	r0, #0
    51f2:	e7f6      	b.n	51e2 <usart_async_get_io_descriptor+0xe>
    51f4:	0000cdc0 	.word	0x0000cdc0
    51f8:	00005959 	.word	0x00005959

000051fc <usart_async_register_callback>:
{
    51fc:	b570      	push	{r4, r5, r6, lr}
    51fe:	460c      	mov	r4, r1
    5200:	4616      	mov	r6, r2
	ASSERT(descr);
    5202:	4605      	mov	r5, r0
    5204:	2283      	movs	r2, #131	; 0x83
    5206:	4917      	ldr	r1, [pc, #92]	; (5264 <usart_async_register_callback+0x68>)
    5208:	3000      	adds	r0, #0
    520a:	bf18      	it	ne
    520c:	2001      	movne	r0, #1
    520e:	4b16      	ldr	r3, [pc, #88]	; (5268 <usart_async_register_callback+0x6c>)
    5210:	4798      	blx	r3
	switch (type) {
    5212:	2c01      	cmp	r4, #1
    5214:	d010      	beq.n	5238 <usart_async_register_callback+0x3c>
    5216:	b124      	cbz	r4, 5222 <usart_async_register_callback+0x26>
    5218:	2c02      	cmp	r4, #2
    521a:	d018      	beq.n	524e <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    521c:	f06f 000c 	mvn.w	r0, #12
}
    5220:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    5222:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    5224:	1c32      	adds	r2, r6, #0
    5226:	bf18      	it	ne
    5228:	2201      	movne	r2, #1
    522a:	2101      	movs	r1, #1
    522c:	f105 0008 	add.w	r0, r5, #8
    5230:	4b0e      	ldr	r3, [pc, #56]	; (526c <usart_async_register_callback+0x70>)
    5232:	4798      	blx	r3
	return ERR_NONE;
    5234:	2000      	movs	r0, #0
		break;
    5236:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    5238:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    523a:	1c32      	adds	r2, r6, #0
    523c:	bf18      	it	ne
    523e:	2201      	movne	r2, #1
    5240:	2102      	movs	r1, #2
    5242:	f105 0008 	add.w	r0, r5, #8
    5246:	4b09      	ldr	r3, [pc, #36]	; (526c <usart_async_register_callback+0x70>)
    5248:	4798      	blx	r3
	return ERR_NONE;
    524a:	2000      	movs	r0, #0
		break;
    524c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    524e:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5250:	1c32      	adds	r2, r6, #0
    5252:	bf18      	it	ne
    5254:	2201      	movne	r2, #1
    5256:	2103      	movs	r1, #3
    5258:	f105 0008 	add.w	r0, r5, #8
    525c:	4b03      	ldr	r3, [pc, #12]	; (526c <usart_async_register_callback+0x70>)
    525e:	4798      	blx	r3
	return ERR_NONE;
    5260:	2000      	movs	r0, #0
		break;
    5262:	bd70      	pop	{r4, r5, r6, pc}
    5264:	0000cdc0 	.word	0x0000cdc0
    5268:	00005959 	.word	0x00005959
    526c:	00006fe9 	.word	0x00006fe9

00005270 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5274:	460f      	mov	r7, r1
    5276:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    5278:	4604      	mov	r4, r0
    527a:	b328      	cbz	r0, 52c8 <usart_sync_write+0x58>
    527c:	b331      	cbz	r1, 52cc <usart_sync_write+0x5c>
    527e:	1c10      	adds	r0, r2, #0
    5280:	bf18      	it	ne
    5282:	2001      	movne	r0, #1
    5284:	22f1      	movs	r2, #241	; 0xf1
    5286:	4912      	ldr	r1, [pc, #72]	; (52d0 <usart_sync_write+0x60>)
    5288:	4b12      	ldr	r3, [pc, #72]	; (52d4 <usart_sync_write+0x64>)
    528a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    528c:	3408      	adds	r4, #8
    528e:	4d12      	ldr	r5, [pc, #72]	; (52d8 <usart_sync_write+0x68>)
    5290:	4620      	mov	r0, r4
    5292:	47a8      	blx	r5
    5294:	2800      	cmp	r0, #0
    5296:	d0fb      	beq.n	5290 <usart_sync_write+0x20>
    5298:	3f01      	subs	r7, #1
    529a:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    529c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 52e0 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    52a0:	4d0d      	ldr	r5, [pc, #52]	; (52d8 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    52a2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    52a6:	4620      	mov	r0, r4
    52a8:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    52aa:	4620      	mov	r0, r4
    52ac:	47a8      	blx	r5
    52ae:	2800      	cmp	r0, #0
    52b0:	d0fb      	beq.n	52aa <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    52b2:	3601      	adds	r6, #1
    52b4:	4546      	cmp	r6, r8
    52b6:	d3f4      	bcc.n	52a2 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    52b8:	4d08      	ldr	r5, [pc, #32]	; (52dc <usart_sync_write+0x6c>)
    52ba:	4620      	mov	r0, r4
    52bc:	47a8      	blx	r5
    52be:	2800      	cmp	r0, #0
    52c0:	d0fb      	beq.n	52ba <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    52c2:	4630      	mov	r0, r6
    52c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    52c8:	2000      	movs	r0, #0
    52ca:	e7db      	b.n	5284 <usart_sync_write+0x14>
    52cc:	2000      	movs	r0, #0
    52ce:	e7d9      	b.n	5284 <usart_sync_write+0x14>
    52d0:	0000cde0 	.word	0x0000cde0
    52d4:	00005959 	.word	0x00005959
    52d8:	00006fb9 	.word	0x00006fb9
    52dc:	00006fc3 	.word	0x00006fc3
    52e0:	00006fa5 	.word	0x00006fa5

000052e4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    52e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52e8:	460f      	mov	r7, r1
    52ea:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    52ec:	4604      	mov	r4, r0
    52ee:	b1e0      	cbz	r0, 532a <usart_sync_read+0x46>
    52f0:	b1e9      	cbz	r1, 532e <usart_sync_read+0x4a>
    52f2:	1c10      	adds	r0, r2, #0
    52f4:	bf18      	it	ne
    52f6:	2001      	movne	r0, #1
    52f8:	f44f 7286 	mov.w	r2, #268	; 0x10c
    52fc:	490d      	ldr	r1, [pc, #52]	; (5334 <usart_sync_read+0x50>)
    52fe:	4b0e      	ldr	r3, [pc, #56]	; (5338 <usart_sync_read+0x54>)
    5300:	4798      	blx	r3
    5302:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    5304:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    5306:	3408      	adds	r4, #8
    5308:	4d0c      	ldr	r5, [pc, #48]	; (533c <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    530a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5340 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    530e:	4620      	mov	r0, r4
    5310:	47a8      	blx	r5
    5312:	2800      	cmp	r0, #0
    5314:	d0fb      	beq.n	530e <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    5316:	4620      	mov	r0, r4
    5318:	47c8      	blx	r9
    531a:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    531e:	3601      	adds	r6, #1
    5320:	4546      	cmp	r6, r8
    5322:	d3f4      	bcc.n	530e <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    5324:	4630      	mov	r0, r6
    5326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    532a:	2000      	movs	r0, #0
    532c:	e7e4      	b.n	52f8 <usart_sync_read+0x14>
    532e:	2000      	movs	r0, #0
    5330:	e7e2      	b.n	52f8 <usart_sync_read+0x14>
    5332:	bf00      	nop
    5334:	0000cde0 	.word	0x0000cde0
    5338:	00005959 	.word	0x00005959
    533c:	00006fcd 	.word	0x00006fcd
    5340:	00006fb1 	.word	0x00006fb1

00005344 <usart_sync_init>:
{
    5344:	b538      	push	{r3, r4, r5, lr}
    5346:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    5348:	4604      	mov	r4, r0
    534a:	b198      	cbz	r0, 5374 <usart_sync_init+0x30>
    534c:	1c08      	adds	r0, r1, #0
    534e:	bf18      	it	ne
    5350:	2001      	movne	r0, #1
    5352:	2234      	movs	r2, #52	; 0x34
    5354:	4908      	ldr	r1, [pc, #32]	; (5378 <usart_sync_init+0x34>)
    5356:	4b09      	ldr	r3, [pc, #36]	; (537c <usart_sync_init+0x38>)
    5358:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    535a:	4629      	mov	r1, r5
    535c:	f104 0008 	add.w	r0, r4, #8
    5360:	4b07      	ldr	r3, [pc, #28]	; (5380 <usart_sync_init+0x3c>)
    5362:	4798      	blx	r3
	if (init_status) {
    5364:	4603      	mov	r3, r0
    5366:	b918      	cbnz	r0, 5370 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    5368:	4a06      	ldr	r2, [pc, #24]	; (5384 <usart_sync_init+0x40>)
    536a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    536c:	4a06      	ldr	r2, [pc, #24]	; (5388 <usart_sync_init+0x44>)
    536e:	6022      	str	r2, [r4, #0]
}
    5370:	4618      	mov	r0, r3
    5372:	bd38      	pop	{r3, r4, r5, pc}
    5374:	2000      	movs	r0, #0
    5376:	e7ec      	b.n	5352 <usart_sync_init+0xe>
    5378:	0000cde0 	.word	0x0000cde0
    537c:	00005959 	.word	0x00005959
    5380:	00006ed5 	.word	0x00006ed5
    5384:	000052e5 	.word	0x000052e5
    5388:	00005271 	.word	0x00005271

0000538c <usart_sync_enable>:
{
    538c:	b510      	push	{r4, lr}
	ASSERT(descr);
    538e:	4604      	mov	r4, r0
    5390:	2253      	movs	r2, #83	; 0x53
    5392:	4906      	ldr	r1, [pc, #24]	; (53ac <usart_sync_enable+0x20>)
    5394:	3000      	adds	r0, #0
    5396:	bf18      	it	ne
    5398:	2001      	movne	r0, #1
    539a:	4b05      	ldr	r3, [pc, #20]	; (53b0 <usart_sync_enable+0x24>)
    539c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    539e:	f104 0008 	add.w	r0, r4, #8
    53a2:	4b04      	ldr	r3, [pc, #16]	; (53b4 <usart_sync_enable+0x28>)
    53a4:	4798      	blx	r3
}
    53a6:	2000      	movs	r0, #0
    53a8:	bd10      	pop	{r4, pc}
    53aa:	bf00      	nop
    53ac:	0000cde0 	.word	0x0000cde0
    53b0:	00005959 	.word	0x00005959
    53b4:	00006f7d 	.word	0x00006f7d

000053b8 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    53b8:	4b0f      	ldr	r3, [pc, #60]	; (53f8 <_usb_d_find_ep+0x40>)
    53ba:	7859      	ldrb	r1, [r3, #1]
    53bc:	4288      	cmp	r0, r1
    53be:	d018      	beq.n	53f2 <_usb_d_find_ep+0x3a>
{
    53c0:	b430      	push	{r4, r5}
    53c2:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    53c4:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    53c6:	f000 050f 	and.w	r5, r0, #15
    53ca:	e007      	b.n	53dc <_usb_d_find_ep+0x24>
    53cc:	3301      	adds	r3, #1
    53ce:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    53d0:	2b0d      	cmp	r3, #13
    53d2:	d009      	beq.n	53e8 <_usb_d_find_ep+0x30>
    53d4:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    53d6:	7851      	ldrb	r1, [r2, #1]
    53d8:	4281      	cmp	r1, r0
    53da:	d007      	beq.n	53ec <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    53dc:	7814      	ldrb	r4, [r2, #0]
    53de:	2c00      	cmp	r4, #0
    53e0:	d1f4      	bne.n	53cc <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    53e2:	428d      	cmp	r5, r1
    53e4:	d1f2      	bne.n	53cc <_usb_d_find_ep+0x14>
    53e6:	e001      	b.n	53ec <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    53e8:	f04f 33ff 	mov.w	r3, #4294967295
}
    53ec:	4618      	mov	r0, r3
    53ee:	bc30      	pop	{r4, r5}
    53f0:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    53f2:	2300      	movs	r3, #0
}
    53f4:	4618      	mov	r0, r3
    53f6:	4770      	bx	lr
    53f8:	2000064c 	.word	0x2000064c

000053fc <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    53fc:	2000      	movs	r0, #0
    53fe:	4770      	bx	lr

00005400 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5400:	b538      	push	{r3, r4, r5, lr}
    5402:	4604      	mov	r4, r0
    5404:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    5406:	4b09      	ldr	r3, [pc, #36]	; (542c <usb_d_cb_trans_more+0x2c>)
    5408:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    540a:	4b09      	ldr	r3, [pc, #36]	; (5430 <usb_d_cb_trans_more+0x30>)
    540c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5410:	789b      	ldrb	r3, [r3, #2]
    5412:	2b03      	cmp	r3, #3
    5414:	d001      	beq.n	541a <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    5416:	2000      	movs	r0, #0
}
    5418:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    541a:	4b05      	ldr	r3, [pc, #20]	; (5430 <usb_d_cb_trans_more+0x30>)
    541c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5420:	6983      	ldr	r3, [r0, #24]
    5422:	4629      	mov	r1, r5
    5424:	4620      	mov	r0, r4
    5426:	4798      	blx	r3
    5428:	bd38      	pop	{r3, r4, r5, pc}
    542a:	bf00      	nop
    542c:	000053b9 	.word	0x000053b9
    5430:	2000064c 	.word	0x2000064c

00005434 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5434:	b5f0      	push	{r4, r5, r6, r7, lr}
    5436:	b085      	sub	sp, #20
    5438:	4606      	mov	r6, r0
    543a:	460d      	mov	r5, r1
    543c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    543e:	4b4d      	ldr	r3, [pc, #308]	; (5574 <_usb_d_cb_trans_done+0x140>)
    5440:	4798      	blx	r3
    5442:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    5444:	2d00      	cmp	r5, #0
    5446:	d15b      	bne.n	5500 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5448:	4a4b      	ldr	r2, [pc, #300]	; (5578 <_usb_d_cb_trans_done+0x144>)
    544a:	0143      	lsls	r3, r0, #5
    544c:	18d1      	adds	r1, r2, r3
    544e:	2000      	movs	r0, #0
    5450:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5452:	5cd3      	ldrb	r3, [r2, r3]
    5454:	b173      	cbz	r3, 5474 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5456:	4b48      	ldr	r3, [pc, #288]	; (5578 <_usb_d_cb_trans_done+0x144>)
    5458:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    545c:	2201      	movs	r2, #1
    545e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5460:	4845      	ldr	r0, [pc, #276]	; (5578 <_usb_d_cb_trans_done+0x144>)
    5462:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5466:	69c3      	ldr	r3, [r0, #28]
    5468:	463a      	mov	r2, r7
    546a:	78c1      	ldrb	r1, [r0, #3]
    546c:	4630      	mov	r0, r6
    546e:	4798      	blx	r3
}
    5470:	b005      	add	sp, #20
    5472:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    5474:	788b      	ldrb	r3, [r1, #2]
    5476:	2b03      	cmp	r3, #3
    5478:	d00b      	beq.n	5492 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    547a:	483f      	ldr	r0, [pc, #252]	; (5578 <_usb_d_cb_trans_done+0x144>)
    547c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    5480:	4614      	mov	r4, r2
    5482:	69d3      	ldr	r3, [r2, #28]
    5484:	320c      	adds	r2, #12
    5486:	2100      	movs	r1, #0
    5488:	7860      	ldrb	r0, [r4, #1]
    548a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    548c:	2302      	movs	r3, #2
    548e:	70a3      	strb	r3, [r4, #2]
    5490:	e7ee      	b.n	5470 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5492:	460b      	mov	r3, r1
    5494:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5498:	460a      	mov	r2, r1
    549a:	69ce      	ldr	r6, [r1, #28]
    549c:	320c      	adds	r2, #12
    549e:	2101      	movs	r1, #1
    54a0:	7858      	ldrb	r0, [r3, #1]
    54a2:	47b0      	blx	r6
		if (err) {
    54a4:	b1a0      	cbz	r0, 54d0 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    54a6:	4b34      	ldr	r3, [pc, #208]	; (5578 <_usb_d_cb_trans_done+0x144>)
    54a8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    54ac:	2205      	movs	r2, #5
    54ae:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    54b0:	2202      	movs	r2, #2
    54b2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    54b4:	2d00      	cmp	r5, #0
    54b6:	db09      	blt.n	54cc <_usb_d_cb_trans_done+0x98>
    54b8:	482f      	ldr	r0, [pc, #188]	; (5578 <_usb_d_cb_trans_done+0x144>)
    54ba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    54be:	7840      	ldrb	r0, [r0, #1]
    54c0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    54c4:	2101      	movs	r1, #1
    54c6:	4b2d      	ldr	r3, [pc, #180]	; (557c <_usb_d_cb_trans_done+0x148>)
    54c8:	4798      	blx	r3
    54ca:	e7d1      	b.n	5470 <_usb_d_cb_trans_done+0x3c>
    54cc:	7858      	ldrb	r0, [r3, #1]
    54ce:	e7f9      	b.n	54c4 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    54d0:	4829      	ldr	r0, [pc, #164]	; (5578 <_usb_d_cb_trans_done+0x144>)
    54d2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    54d6:	2304      	movs	r3, #4
    54d8:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    54da:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    54dc:	2200      	movs	r2, #0
    54de:	9201      	str	r2, [sp, #4]
    54e0:	9202      	str	r2, [sp, #8]
    54e2:	4295      	cmp	r5, r2
    54e4:	bfac      	ite	ge
    54e6:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    54ea:	f003 030f 	andlt.w	r3, r3, #15
    54ee:	f88d 300c 	strb.w	r3, [sp, #12]
    54f2:	2301      	movs	r3, #1
    54f4:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    54f8:	a801      	add	r0, sp, #4
    54fa:	4b21      	ldr	r3, [pc, #132]	; (5580 <_usb_d_cb_trans_done+0x14c>)
    54fc:	4798      	blx	r3
    54fe:	e7b7      	b.n	5470 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    5500:	2d01      	cmp	r5, #1
    5502:	d00a      	beq.n	551a <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    5504:	2d02      	cmp	r5, #2
    5506:	d01c      	beq.n	5542 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    5508:	2d03      	cmp	r5, #3
    550a:	d02a      	beq.n	5562 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    550c:	4b1a      	ldr	r3, [pc, #104]	; (5578 <_usb_d_cb_trans_done+0x144>)
    550e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5512:	2206      	movs	r2, #6
    5514:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5516:	70da      	strb	r2, [r3, #3]
    5518:	e7a2      	b.n	5460 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    551a:	4a17      	ldr	r2, [pc, #92]	; (5578 <_usb_d_cb_trans_done+0x144>)
    551c:	0143      	lsls	r3, r0, #5
    551e:	18d1      	adds	r1, r2, r3
    5520:	2002      	movs	r0, #2
    5522:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5524:	5cd3      	ldrb	r3, [r2, r3]
    5526:	b12b      	cbz	r3, 5534 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5528:	4b13      	ldr	r3, [pc, #76]	; (5578 <_usb_d_cb_trans_done+0x144>)
    552a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    552e:	2205      	movs	r2, #5
    5530:	709a      	strb	r2, [r3, #2]
    5532:	e795      	b.n	5460 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5534:	460b      	mov	r3, r1
    5536:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5538:	2100      	movs	r1, #0
    553a:	4630      	mov	r0, r6
    553c:	4b0f      	ldr	r3, [pc, #60]	; (557c <_usb_d_cb_trans_done+0x148>)
    553e:	4798      	blx	r3
    5540:	e78e      	b.n	5460 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5542:	4a0d      	ldr	r2, [pc, #52]	; (5578 <_usb_d_cb_trans_done+0x144>)
    5544:	0143      	lsls	r3, r0, #5
    5546:	18d1      	adds	r1, r2, r3
    5548:	2004      	movs	r0, #4
    554a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    554c:	5cd3      	ldrb	r3, [r2, r3]
    554e:	b12b      	cbz	r3, 555c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5550:	4b09      	ldr	r3, [pc, #36]	; (5578 <_usb_d_cb_trans_done+0x144>)
    5552:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5556:	2201      	movs	r2, #1
    5558:	709a      	strb	r2, [r3, #2]
    555a:	e781      	b.n	5460 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    555c:	2302      	movs	r3, #2
    555e:	708b      	strb	r3, [r1, #2]
			return;
    5560:	e786      	b.n	5470 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5562:	4b05      	ldr	r3, [pc, #20]	; (5578 <_usb_d_cb_trans_done+0x144>)
    5564:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    5568:	2200      	movs	r2, #0
    556a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    556c:	2205      	movs	r2, #5
    556e:	70da      	strb	r2, [r3, #3]
    5570:	e776      	b.n	5460 <_usb_d_cb_trans_done+0x2c>
    5572:	bf00      	nop
    5574:	000053b9 	.word	0x000053b9
    5578:	2000064c 	.word	0x2000064c
    557c:	00008f19 	.word	0x00008f19
    5580:	000090c1 	.word	0x000090c1

00005584 <usb_d_cb_trans_setup>:
{
    5584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5588:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    558a:	4b1c      	ldr	r3, [pc, #112]	; (55fc <usb_d_cb_trans_setup+0x78>)
    558c:	4798      	blx	r3
    558e:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    5590:	4c1b      	ldr	r4, [pc, #108]	; (5600 <usb_d_cb_trans_setup+0x7c>)
    5592:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    5596:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5598:	4621      	mov	r1, r4
    559a:	4628      	mov	r0, r5
    559c:	4b19      	ldr	r3, [pc, #100]	; (5604 <usb_d_cb_trans_setup+0x80>)
    559e:	4798      	blx	r3
	if (n != 8) {
    55a0:	b2c0      	uxtb	r0, r0
    55a2:	2808      	cmp	r0, #8
    55a4:	d009      	beq.n	55ba <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    55a6:	2101      	movs	r1, #1
    55a8:	4628      	mov	r0, r5
    55aa:	4c17      	ldr	r4, [pc, #92]	; (5608 <usb_d_cb_trans_setup+0x84>)
    55ac:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    55ae:	2101      	movs	r1, #1
    55b0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    55b4:	47a0      	blx	r4
		return;
    55b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    55ba:	2100      	movs	r1, #0
    55bc:	4628      	mov	r0, r5
    55be:	4f12      	ldr	r7, [pc, #72]	; (5608 <usb_d_cb_trans_setup+0x84>)
    55c0:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    55c2:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    55c6:	2100      	movs	r1, #0
    55c8:	4640      	mov	r0, r8
    55ca:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    55cc:	4b0c      	ldr	r3, [pc, #48]	; (5600 <usb_d_cb_trans_setup+0x7c>)
    55ce:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    55d2:	2201      	movs	r2, #1
    55d4:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    55d6:	695b      	ldr	r3, [r3, #20]
    55d8:	4621      	mov	r1, r4
    55da:	4628      	mov	r0, r5
    55dc:	4798      	blx	r3
    55de:	b108      	cbz	r0, 55e4 <usb_d_cb_trans_setup+0x60>
    55e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    55e4:	4b06      	ldr	r3, [pc, #24]	; (5600 <usb_d_cb_trans_setup+0x7c>)
    55e6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    55ea:	2305      	movs	r3, #5
    55ec:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    55ee:	2101      	movs	r1, #1
    55f0:	4628      	mov	r0, r5
    55f2:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    55f4:	2101      	movs	r1, #1
    55f6:	4640      	mov	r0, r8
    55f8:	47b8      	blx	r7
    55fa:	e7f1      	b.n	55e0 <usb_d_cb_trans_setup+0x5c>
    55fc:	000053b9 	.word	0x000053b9
    5600:	2000064c 	.word	0x2000064c
    5604:	00009061 	.word	0x00009061
    5608:	00008f19 	.word	0x00008f19

0000560c <usb_d_init>:

int32_t usb_d_init(void)
{
    560c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    560e:	4b11      	ldr	r3, [pc, #68]	; (5654 <usb_d_init+0x48>)
    5610:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    5612:	2800      	cmp	r0, #0
    5614:	db1d      	blt.n	5652 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5616:	4c10      	ldr	r4, [pc, #64]	; (5658 <usb_d_init+0x4c>)
    5618:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    561c:	2100      	movs	r1, #0
    561e:	4620      	mov	r0, r4
    5620:	4b0e      	ldr	r3, [pc, #56]	; (565c <usb_d_init+0x50>)
    5622:	4798      	blx	r3
    5624:	4623      	mov	r3, r4
    5626:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    562a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    562c:	4a0c      	ldr	r2, [pc, #48]	; (5660 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    562e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5630:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5632:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5634:	61da      	str	r2, [r3, #28]
    5636:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5638:	4283      	cmp	r3, r0
    563a:	d1f8      	bne.n	562e <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    563c:	4909      	ldr	r1, [pc, #36]	; (5664 <usb_d_init+0x58>)
    563e:	2000      	movs	r0, #0
    5640:	4c09      	ldr	r4, [pc, #36]	; (5668 <usb_d_init+0x5c>)
    5642:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5644:	4909      	ldr	r1, [pc, #36]	; (566c <usb_d_init+0x60>)
    5646:	2001      	movs	r0, #1
    5648:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    564a:	4909      	ldr	r1, [pc, #36]	; (5670 <usb_d_init+0x64>)
    564c:	2002      	movs	r0, #2
    564e:	47a0      	blx	r4
	return ERR_NONE;
    5650:	2000      	movs	r0, #0
}
    5652:	bd10      	pop	{r4, pc}
    5654:	000088f1 	.word	0x000088f1
    5658:	2000064c 	.word	0x2000064c
    565c:	0000b9c3 	.word	0x0000b9c3
    5660:	000053fd 	.word	0x000053fd
    5664:	00005585 	.word	0x00005585
    5668:	000092c9 	.word	0x000092c9
    566c:	00005401 	.word	0x00005401
    5670:	00005435 	.word	0x00005435

00005674 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5674:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5676:	4b01      	ldr	r3, [pc, #4]	; (567c <usb_d_register_callback+0x8>)
    5678:	4798      	blx	r3
    567a:	bd08      	pop	{r3, pc}
    567c:	000092a1 	.word	0x000092a1

00005680 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    5680:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    5682:	4b01      	ldr	r3, [pc, #4]	; (5688 <usb_d_enable+0x8>)
    5684:	4798      	blx	r3
}
    5686:	bd08      	pop	{r3, pc}
    5688:	000089f9 	.word	0x000089f9

0000568c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    568c:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    568e:	4b01      	ldr	r3, [pc, #4]	; (5694 <usb_d_attach+0x8>)
    5690:	4798      	blx	r3
    5692:	bd08      	pop	{r3, pc}
    5694:	00008a65 	.word	0x00008a65

00005698 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5698:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    569a:	4b01      	ldr	r3, [pc, #4]	; (56a0 <usb_d_set_address+0x8>)
    569c:	4798      	blx	r3
    569e:	bd08      	pop	{r3, pc}
    56a0:	00008a77 	.word	0x00008a77

000056a4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    56a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56a6:	4606      	mov	r6, r0
    56a8:	460c      	mov	r4, r1
    56aa:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    56ac:	4b0f      	ldr	r3, [pc, #60]	; (56ec <usb_d_ep_init+0x48>)
    56ae:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    56b0:	2800      	cmp	r0, #0
    56b2:	da14      	bge.n	56de <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    56b4:	20ff      	movs	r0, #255	; 0xff
    56b6:	4b0d      	ldr	r3, [pc, #52]	; (56ec <usb_d_ep_init+0x48>)
    56b8:	4798      	blx	r3
		if (ep_index < 0) {
    56ba:	1e05      	subs	r5, r0, #0
    56bc:	db12      	blt.n	56e4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    56be:	463a      	mov	r2, r7
    56c0:	4621      	mov	r1, r4
    56c2:	4630      	mov	r0, r6
    56c4:	4b0a      	ldr	r3, [pc, #40]	; (56f0 <usb_d_ep_init+0x4c>)
    56c6:	4798      	blx	r3
	if (rc < 0) {
    56c8:	2800      	cmp	r0, #0
    56ca:	db0d      	blt.n	56e8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    56cc:	4b09      	ldr	r3, [pc, #36]	; (56f4 <usb_d_ep_init+0x50>)
    56ce:	0168      	lsls	r0, r5, #5
    56d0:	181a      	adds	r2, r3, r0
    56d2:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    56d4:	f004 0403 	and.w	r4, r4, #3
    56d8:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    56da:	2000      	movs	r0, #0
    56dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    56de:	f06f 0013 	mvn.w	r0, #19
    56e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    56e4:	f06f 0014 	mvn.w	r0, #20
}
    56e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56ea:	bf00      	nop
    56ec:	000053b9 	.word	0x000053b9
    56f0:	00008a85 	.word	0x00008a85
    56f4:	2000064c 	.word	0x2000064c

000056f8 <usb_d_ep0_init>:
{
    56f8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    56fa:	4602      	mov	r2, r0
    56fc:	2100      	movs	r1, #0
    56fe:	4608      	mov	r0, r1
    5700:	4b01      	ldr	r3, [pc, #4]	; (5708 <usb_d_ep0_init+0x10>)
    5702:	4798      	blx	r3
}
    5704:	bd08      	pop	{r3, pc}
    5706:	bf00      	nop
    5708:	000056a5 	.word	0x000056a5

0000570c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    570c:	b538      	push	{r3, r4, r5, lr}
    570e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    5710:	4b06      	ldr	r3, [pc, #24]	; (572c <usb_d_ep_deinit+0x20>)
    5712:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    5714:	1e04      	subs	r4, r0, #0
    5716:	db07      	blt.n	5728 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5718:	4628      	mov	r0, r5
    571a:	4b05      	ldr	r3, [pc, #20]	; (5730 <usb_d_ep_deinit+0x24>)
    571c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    571e:	4805      	ldr	r0, [pc, #20]	; (5734 <usb_d_ep_deinit+0x28>)
    5720:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5724:	23ff      	movs	r3, #255	; 0xff
    5726:	7043      	strb	r3, [r0, #1]
    5728:	bd38      	pop	{r3, r4, r5, pc}
    572a:	bf00      	nop
    572c:	000053b9 	.word	0x000053b9
    5730:	00008b9d 	.word	0x00008b9d
    5734:	2000064c 	.word	0x2000064c

00005738 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5738:	b538      	push	{r3, r4, r5, lr}
    573a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    573c:	4b0e      	ldr	r3, [pc, #56]	; (5778 <usb_d_ep_enable+0x40>)
    573e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5740:	1e04      	subs	r4, r0, #0
    5742:	db16      	blt.n	5772 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5744:	0163      	lsls	r3, r4, #5
    5746:	4a0d      	ldr	r2, [pc, #52]	; (577c <usb_d_ep_enable+0x44>)
    5748:	5cd3      	ldrb	r3, [r2, r3]
    574a:	2b00      	cmp	r3, #0
    574c:	bf0c      	ite	eq
    574e:	2202      	moveq	r2, #2
    5750:	2201      	movne	r2, #1
    5752:	4b0a      	ldr	r3, [pc, #40]	; (577c <usb_d_ep_enable+0x44>)
    5754:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5758:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    575a:	4628      	mov	r0, r5
    575c:	4b08      	ldr	r3, [pc, #32]	; (5780 <usb_d_ep_enable+0x48>)
    575e:	4798      	blx	r3
	if (rc < 0) {
    5760:	2800      	cmp	r0, #0
    5762:	db00      	blt.n	5766 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5764:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5766:	4b05      	ldr	r3, [pc, #20]	; (577c <usb_d_ep_enable+0x44>)
    5768:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    576c:	2300      	movs	r3, #0
    576e:	70a3      	strb	r3, [r4, #2]
    5770:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    5772:	f06f 0011 	mvn.w	r0, #17
    5776:	e7f5      	b.n	5764 <usb_d_ep_enable+0x2c>
    5778:	000053b9 	.word	0x000053b9
    577c:	2000064c 	.word	0x2000064c
    5780:	00008c61 	.word	0x00008c61

00005784 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5788:	b086      	sub	sp, #24
    578a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    578c:	7a07      	ldrb	r7, [r0, #8]
    578e:	4638      	mov	r0, r7
    5790:	4b3f      	ldr	r3, [pc, #252]	; (5890 <usb_d_ep_transfer+0x10c>)
    5792:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5794:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5796:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    579a:	1e06      	subs	r6, r0, #0
    579c:	db72      	blt.n	5884 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    579e:	a804      	add	r0, sp, #16
    57a0:	4b3c      	ldr	r3, [pc, #240]	; (5894 <usb_d_ep_transfer+0x110>)
    57a2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    57a4:	4b3c      	ldr	r3, [pc, #240]	; (5898 <usb_d_ep_transfer+0x114>)
    57a6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    57aa:	789b      	ldrb	r3, [r3, #2]
    57ac:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    57b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    57b4:	b2db      	uxtb	r3, r3
    57b6:	2b01      	cmp	r3, #1
    57b8:	d011      	beq.n	57de <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    57ba:	a804      	add	r0, sp, #16
    57bc:	4b37      	ldr	r3, [pc, #220]	; (589c <usb_d_ep_transfer+0x118>)
    57be:	4798      	blx	r3
		switch (state) {
    57c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    57c4:	b2db      	uxtb	r3, r3
    57c6:	2b05      	cmp	r3, #5
    57c8:	d05f      	beq.n	588a <usb_d_ep_transfer+0x106>
    57ca:	2b06      	cmp	r3, #6
    57cc:	d023      	beq.n	5816 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    57ce:	2b00      	cmp	r3, #0
    57d0:	bf0c      	ite	eq
    57d2:	f06f 0012 	mvneq.w	r0, #18
    57d6:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    57d8:	b006      	add	sp, #24
    57da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    57de:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5898 <usb_d_ep_transfer+0x114>
    57e2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    57e6:	eb0a 0309 	add.w	r3, sl, r9
    57ea:	2203      	movs	r2, #3
    57ec:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    57ee:	a804      	add	r0, sp, #16
    57f0:	4b2a      	ldr	r3, [pc, #168]	; (589c <usb_d_ep_transfer+0x118>)
    57f2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    57f4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    57f8:	b183      	cbz	r3, 581c <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    57fa:	7a22      	ldrb	r2, [r4, #8]
    57fc:	3500      	adds	r5, #0
    57fe:	bf18      	it	ne
    5800:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    5802:	6823      	ldr	r3, [r4, #0]
    5804:	9301      	str	r3, [sp, #4]
    5806:	f8cd 8008 	str.w	r8, [sp, #8]
    580a:	f017 0f80 	tst.w	r7, #128	; 0x80
    580e:	d119      	bne.n	5844 <usb_d_ep_transfer+0xc0>
    5810:	f002 030f 	and.w	r3, r2, #15
    5814:	e018      	b.n	5848 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    5816:	f06f 000f 	mvn.w	r0, #15
    581a:	e7dd      	b.n	57d8 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    581c:	4b1e      	ldr	r3, [pc, #120]	; (5898 <usb_d_ep_transfer+0x114>)
    581e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5822:	7cda      	ldrb	r2, [r3, #19]
    5824:	7c9d      	ldrb	r5, [r3, #18]
    5826:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    582a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    582c:	b9a5      	cbnz	r5, 5858 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    582e:	4b1a      	ldr	r3, [pc, #104]	; (5898 <usb_d_ep_transfer+0x114>)
    5830:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5834:	2304      	movs	r3, #4
    5836:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5838:	2300      	movs	r3, #0
			zlp                 = true;
    583a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    583c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    583e:	6821      	ldr	r1, [r4, #0]
    5840:	9101      	str	r1, [sp, #4]
    5842:	9302      	str	r3, [sp, #8]
    5844:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5848:	f88d 300c 	strb.w	r3, [sp, #12]
    584c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5850:	a801      	add	r0, sp, #4
    5852:	4b13      	ldr	r3, [pc, #76]	; (58a0 <usb_d_ep_transfer+0x11c>)
    5854:	4798      	blx	r3
	return rc;
    5856:	e7bf      	b.n	57d8 <usb_d_ep_transfer+0x54>
    5858:	4643      	mov	r3, r8
    585a:	45a8      	cmp	r8, r5
    585c:	bf28      	it	cs
    585e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5860:	4a0d      	ldr	r2, [pc, #52]	; (5898 <usb_d_ep_transfer+0x114>)
    5862:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5866:	f996 200c 	ldrsb.w	r2, [r6, #12]
    586a:	2a00      	cmp	r2, #0
    586c:	db05      	blt.n	587a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    586e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5870:	6821      	ldr	r1, [r4, #0]
    5872:	9101      	str	r1, [sp, #4]
    5874:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5876:	2500      	movs	r5, #0
    5878:	e7ca      	b.n	5810 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    587a:	429d      	cmp	r5, r3
    587c:	bf94      	ite	ls
    587e:	2500      	movls	r5, #0
    5880:	2501      	movhi	r5, #1
    5882:	e7db      	b.n	583c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5884:	f06f 0011 	mvn.w	r0, #17
    5888:	e7a6      	b.n	57d8 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    588a:	2002      	movs	r0, #2
    588c:	e7a4      	b.n	57d8 <usb_d_ep_transfer+0x54>
    588e:	bf00      	nop
    5890:	000053b9 	.word	0x000053b9
    5894:	000045cd 	.word	0x000045cd
    5898:	2000064c 	.word	0x2000064c
    589c:	000045db 	.word	0x000045db
    58a0:	000090c1 	.word	0x000090c1

000058a4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    58a4:	b538      	push	{r3, r4, r5, lr}
    58a6:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    58a8:	b141      	cbz	r1, 58bc <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    58aa:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    58ac:	bf0c      	ite	eq
    58ae:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    58b0:	2102      	movne	r1, #2
    58b2:	4b13      	ldr	r3, [pc, #76]	; (5900 <usb_d_ep_halt+0x5c>)
    58b4:	4798      	blx	r3
    58b6:	4603      	mov	r3, r0
	}
}
    58b8:	4618      	mov	r0, r3
    58ba:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    58bc:	4b11      	ldr	r3, [pc, #68]	; (5904 <usb_d_ep_halt+0x60>)
    58be:	4798      	blx	r3
	if (ep_index < 0) {
    58c0:	1e05      	subs	r5, r0, #0
    58c2:	db19      	blt.n	58f8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    58c4:	2102      	movs	r1, #2
    58c6:	4620      	mov	r0, r4
    58c8:	4b0d      	ldr	r3, [pc, #52]	; (5900 <usb_d_ep_halt+0x5c>)
    58ca:	4798      	blx	r3
    58cc:	4603      	mov	r3, r0
    58ce:	2800      	cmp	r0, #0
    58d0:	d0f2      	beq.n	58b8 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    58d2:	2100      	movs	r1, #0
    58d4:	4620      	mov	r0, r4
    58d6:	4b0a      	ldr	r3, [pc, #40]	; (5900 <usb_d_ep_halt+0x5c>)
    58d8:	4798      	blx	r3
		if (rc < 0) {
    58da:	1e03      	subs	r3, r0, #0
    58dc:	dbec      	blt.n	58b8 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    58de:	4b0a      	ldr	r3, [pc, #40]	; (5908 <usb_d_ep_halt+0x64>)
    58e0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    58e4:	2201      	movs	r2, #1
    58e6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    58e8:	2103      	movs	r1, #3
    58ea:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    58ec:	69db      	ldr	r3, [r3, #28]
    58ee:	2200      	movs	r2, #0
    58f0:	4620      	mov	r0, r4
    58f2:	4798      	blx	r3
	return ERR_NONE;
    58f4:	2300      	movs	r3, #0
    58f6:	e7df      	b.n	58b8 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    58f8:	f06f 0311 	mvn.w	r3, #17
    58fc:	e7dc      	b.n	58b8 <usb_d_ep_halt+0x14>
    58fe:	bf00      	nop
    5900:	00008f19 	.word	0x00008f19
    5904:	000053b9 	.word	0x000053b9
    5908:	2000064c 	.word	0x2000064c

0000590c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    590c:	b538      	push	{r3, r4, r5, lr}
    590e:	460d      	mov	r5, r1
    5910:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5912:	4b0e      	ldr	r3, [pc, #56]	; (594c <usb_d_ep_register_callback+0x40>)
    5914:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5916:	4b0e      	ldr	r3, [pc, #56]	; (5950 <usb_d_ep_register_callback+0x44>)
    5918:	2c00      	cmp	r4, #0
    591a:	bf08      	it	eq
    591c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    591e:	2800      	cmp	r0, #0
    5920:	db13      	blt.n	594a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    5922:	2d01      	cmp	r5, #1
    5924:	d008      	beq.n	5938 <usb_d_ep_register_callback+0x2c>
    5926:	b115      	cbz	r5, 592e <usb_d_ep_register_callback+0x22>
    5928:	2d02      	cmp	r5, #2
    592a:	d00a      	beq.n	5942 <usb_d_ep_register_callback+0x36>
    592c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    592e:	4b09      	ldr	r3, [pc, #36]	; (5954 <usb_d_ep_register_callback+0x48>)
    5930:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5934:	6144      	str	r4, [r0, #20]
		break;
    5936:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5938:	4b06      	ldr	r3, [pc, #24]	; (5954 <usb_d_ep_register_callback+0x48>)
    593a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    593e:	6184      	str	r4, [r0, #24]
		break;
    5940:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5942:	4b04      	ldr	r3, [pc, #16]	; (5954 <usb_d_ep_register_callback+0x48>)
    5944:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5948:	61c4      	str	r4, [r0, #28]
    594a:	bd38      	pop	{r3, r4, r5, pc}
    594c:	000053b9 	.word	0x000053b9
    5950:	000053fd 	.word	0x000053fd
    5954:	2000064c 	.word	0x2000064c

00005958 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5958:	b900      	cbnz	r0, 595c <assert+0x4>
		__asm("BKPT #0");
    595a:	be00      	bkpt	0x0000
    595c:	4770      	bx	lr

0000595e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    595e:	6803      	ldr	r3, [r0, #0]
    5960:	b14b      	cbz	r3, 5976 <is_list_element+0x18>
		if (it == element) {
    5962:	428b      	cmp	r3, r1
    5964:	d009      	beq.n	597a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5966:	681b      	ldr	r3, [r3, #0]
    5968:	b11b      	cbz	r3, 5972 <is_list_element+0x14>
		if (it == element) {
    596a:	4299      	cmp	r1, r3
    596c:	d1fb      	bne.n	5966 <is_list_element+0x8>
			return true;
    596e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5970:	4770      	bx	lr
	return false;
    5972:	2000      	movs	r0, #0
    5974:	4770      	bx	lr
    5976:	2000      	movs	r0, #0
    5978:	4770      	bx	lr
			return true;
    597a:	2001      	movs	r0, #1
    597c:	4770      	bx	lr
	...

00005980 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5980:	b538      	push	{r3, r4, r5, lr}
    5982:	4604      	mov	r4, r0
    5984:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5986:	4b06      	ldr	r3, [pc, #24]	; (59a0 <list_insert_as_head+0x20>)
    5988:	4798      	blx	r3
    598a:	f080 0001 	eor.w	r0, r0, #1
    598e:	2239      	movs	r2, #57	; 0x39
    5990:	4904      	ldr	r1, [pc, #16]	; (59a4 <list_insert_as_head+0x24>)
    5992:	b2c0      	uxtb	r0, r0
    5994:	4b04      	ldr	r3, [pc, #16]	; (59a8 <list_insert_as_head+0x28>)
    5996:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5998:	6823      	ldr	r3, [r4, #0]
    599a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    599c:	6025      	str	r5, [r4, #0]
    599e:	bd38      	pop	{r3, r4, r5, pc}
    59a0:	0000595f 	.word	0x0000595f
    59a4:	0000cdfc 	.word	0x0000cdfc
    59a8:	00005959 	.word	0x00005959

000059ac <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    59ac:	6803      	ldr	r3, [r0, #0]
    59ae:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    59b0:	6001      	str	r1, [r0, #0]
    59b2:	4770      	bx	lr

000059b4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    59b4:	b570      	push	{r4, r5, r6, lr}
    59b6:	4605      	mov	r5, r0
    59b8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    59ba:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    59bc:	4b0a      	ldr	r3, [pc, #40]	; (59e8 <list_insert_at_end+0x34>)
    59be:	4798      	blx	r3
    59c0:	f080 0001 	eor.w	r0, r0, #1
    59c4:	224f      	movs	r2, #79	; 0x4f
    59c6:	4909      	ldr	r1, [pc, #36]	; (59ec <list_insert_at_end+0x38>)
    59c8:	b2c0      	uxtb	r0, r0
    59ca:	4b09      	ldr	r3, [pc, #36]	; (59f0 <list_insert_at_end+0x3c>)
    59cc:	4798      	blx	r3

	if (!list->head) {
    59ce:	682b      	ldr	r3, [r5, #0]
    59d0:	b91b      	cbnz	r3, 59da <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    59d2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    59d4:	6033      	str	r3, [r6, #0]
		return;
    59d6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    59d8:	461c      	mov	r4, r3
	while (it->next) {
    59da:	6823      	ldr	r3, [r4, #0]
    59dc:	2b00      	cmp	r3, #0
    59de:	d1fb      	bne.n	59d8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    59e0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    59e2:	6033      	str	r3, [r6, #0]
    59e4:	bd70      	pop	{r4, r5, r6, pc}
    59e6:	bf00      	nop
    59e8:	0000595f 	.word	0x0000595f
    59ec:	0000cdfc 	.word	0x0000cdfc
    59f0:	00005959 	.word	0x00005959

000059f4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    59f4:	6803      	ldr	r3, [r0, #0]
    59f6:	b10b      	cbz	r3, 59fc <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    59f8:	681a      	ldr	r2, [r3, #0]
    59fa:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    59fc:	4618      	mov	r0, r3
    59fe:	4770      	bx	lr

00005a00 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    5a00:	b570      	push	{r4, r5, r6, lr}
    5a02:	460e      	mov	r6, r1
    5a04:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    5a06:	4604      	mov	r4, r0
    5a08:	b178      	cbz	r0, 5a2a <ringbuffer_init+0x2a>
    5a0a:	b181      	cbz	r1, 5a2e <ringbuffer_init+0x2e>
    5a0c:	b1a2      	cbz	r2, 5a38 <ringbuffer_init+0x38>
    5a0e:	2001      	movs	r0, #1
    5a10:	2228      	movs	r2, #40	; 0x28
    5a12:	490d      	ldr	r1, [pc, #52]	; (5a48 <ringbuffer_init+0x48>)
    5a14:	4b0d      	ldr	r3, [pc, #52]	; (5a4c <ringbuffer_init+0x4c>)
    5a16:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5a18:	1e6b      	subs	r3, r5, #1
    5a1a:	421d      	tst	r5, r3
    5a1c:	d109      	bne.n	5a32 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    5a1e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    5a20:	2000      	movs	r0, #0
    5a22:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    5a24:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    5a26:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5a28:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5a2a:	2000      	movs	r0, #0
    5a2c:	e7f0      	b.n	5a10 <ringbuffer_init+0x10>
    5a2e:	2000      	movs	r0, #0
    5a30:	e7ee      	b.n	5a10 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    5a32:	f06f 000c 	mvn.w	r0, #12
    5a36:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5a38:	2228      	movs	r2, #40	; 0x28
    5a3a:	4903      	ldr	r1, [pc, #12]	; (5a48 <ringbuffer_init+0x48>)
    5a3c:	2000      	movs	r0, #0
    5a3e:	4b03      	ldr	r3, [pc, #12]	; (5a4c <ringbuffer_init+0x4c>)
    5a40:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    5a42:	1e6b      	subs	r3, r5, #1
    5a44:	e7eb      	b.n	5a1e <ringbuffer_init+0x1e>
    5a46:	bf00      	nop
    5a48:	0000ce1c 	.word	0x0000ce1c
    5a4c:	00005959 	.word	0x00005959

00005a50 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5a50:	b538      	push	{r3, r4, r5, lr}
    5a52:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5a54:	4604      	mov	r4, r0
    5a56:	b1a0      	cbz	r0, 5a82 <ringbuffer_get+0x32>
    5a58:	1c08      	adds	r0, r1, #0
    5a5a:	bf18      	it	ne
    5a5c:	2001      	movne	r0, #1
    5a5e:	2240      	movs	r2, #64	; 0x40
    5a60:	490a      	ldr	r1, [pc, #40]	; (5a8c <ringbuffer_get+0x3c>)
    5a62:	4b0b      	ldr	r3, [pc, #44]	; (5a90 <ringbuffer_get+0x40>)
    5a64:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5a66:	68a3      	ldr	r3, [r4, #8]
    5a68:	68e2      	ldr	r2, [r4, #12]
    5a6a:	429a      	cmp	r2, r3
    5a6c:	d00b      	beq.n	5a86 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    5a6e:	6862      	ldr	r2, [r4, #4]
    5a70:	4013      	ands	r3, r2
    5a72:	6822      	ldr	r2, [r4, #0]
    5a74:	5cd3      	ldrb	r3, [r2, r3]
    5a76:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5a78:	68a3      	ldr	r3, [r4, #8]
    5a7a:	3301      	adds	r3, #1
    5a7c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    5a7e:	2000      	movs	r0, #0
    5a80:	bd38      	pop	{r3, r4, r5, pc}
    5a82:	2000      	movs	r0, #0
    5a84:	e7eb      	b.n	5a5e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5a86:	f06f 0009 	mvn.w	r0, #9
}
    5a8a:	bd38      	pop	{r3, r4, r5, pc}
    5a8c:	0000ce1c 	.word	0x0000ce1c
    5a90:	00005959 	.word	0x00005959

00005a94 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5a94:	b538      	push	{r3, r4, r5, lr}
    5a96:	460d      	mov	r5, r1
	ASSERT(rb);
    5a98:	4604      	mov	r4, r0
    5a9a:	2251      	movs	r2, #81	; 0x51
    5a9c:	490b      	ldr	r1, [pc, #44]	; (5acc <ringbuffer_put+0x38>)
    5a9e:	3000      	adds	r0, #0
    5aa0:	bf18      	it	ne
    5aa2:	2001      	movne	r0, #1
    5aa4:	4b0a      	ldr	r3, [pc, #40]	; (5ad0 <ringbuffer_put+0x3c>)
    5aa6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5aa8:	68e3      	ldr	r3, [r4, #12]
    5aaa:	6862      	ldr	r2, [r4, #4]
    5aac:	4013      	ands	r3, r2
    5aae:	6822      	ldr	r2, [r4, #0]
    5ab0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    5ab2:	68e3      	ldr	r3, [r4, #12]
    5ab4:	6861      	ldr	r1, [r4, #4]
    5ab6:	68a2      	ldr	r2, [r4, #8]
    5ab8:	1a9a      	subs	r2, r3, r2
    5aba:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    5abc:	bf84      	itt	hi
    5abe:	1a59      	subhi	r1, r3, r1
    5ac0:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    5ac2:	3301      	adds	r3, #1
    5ac4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    5ac6:	2000      	movs	r0, #0
    5ac8:	bd38      	pop	{r3, r4, r5, pc}
    5aca:	bf00      	nop
    5acc:	0000ce1c 	.word	0x0000ce1c
    5ad0:	00005959 	.word	0x00005959

00005ad4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    5ad4:	b510      	push	{r4, lr}
	ASSERT(rb);
    5ad6:	4604      	mov	r4, r0
    5ad8:	2267      	movs	r2, #103	; 0x67
    5ada:	4905      	ldr	r1, [pc, #20]	; (5af0 <ringbuffer_num+0x1c>)
    5adc:	3000      	adds	r0, #0
    5ade:	bf18      	it	ne
    5ae0:	2001      	movne	r0, #1
    5ae2:	4b04      	ldr	r3, [pc, #16]	; (5af4 <ringbuffer_num+0x20>)
    5ae4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    5ae6:	68e0      	ldr	r0, [r4, #12]
    5ae8:	68a3      	ldr	r3, [r4, #8]
}
    5aea:	1ac0      	subs	r0, r0, r3
    5aec:	bd10      	pop	{r4, pc}
    5aee:	bf00      	nop
    5af0:	0000ce1c 	.word	0x0000ce1c
    5af4:	00005959 	.word	0x00005959

00005af8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    5af8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    5afa:	4a06      	ldr	r2, [pc, #24]	; (5b14 <_sbrk+0x1c>)
    5afc:	6812      	ldr	r2, [r2, #0]
    5afe:	b122      	cbz	r2, 5b0a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5b00:	4a04      	ldr	r2, [pc, #16]	; (5b14 <_sbrk+0x1c>)
    5b02:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5b04:	4403      	add	r3, r0
    5b06:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    5b08:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5b0a:	4903      	ldr	r1, [pc, #12]	; (5b18 <_sbrk+0x20>)
    5b0c:	4a01      	ldr	r2, [pc, #4]	; (5b14 <_sbrk+0x1c>)
    5b0e:	6011      	str	r1, [r2, #0]
    5b10:	e7f6      	b.n	5b00 <_sbrk+0x8>
    5b12:	bf00      	nop
    5b14:	200007ec 	.word	0x200007ec
    5b18:	20013d60 	.word	0x20013d60

00005b1c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    5b1c:	f04f 30ff 	mov.w	r0, #4294967295
    5b20:	4770      	bx	lr

00005b22 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    5b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5b26:	604b      	str	r3, [r1, #4]

	return 0;
}
    5b28:	2000      	movs	r0, #0
    5b2a:	4770      	bx	lr

00005b2c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    5b2c:	2001      	movs	r0, #1
    5b2e:	4770      	bx	lr

00005b30 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    5b30:	2000      	movs	r0, #0
    5b32:	4770      	bx	lr

00005b34 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5b34:	6940      	ldr	r0, [r0, #20]
    5b36:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5b3a:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5b3e:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5b40:	0040      	lsls	r0, r0, #1
    5b42:	3076      	adds	r0, #118	; 0x76
}
    5b44:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5b48:	4770      	bx	lr
	...

00005b4c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    5b4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    5b4e:	f013 0f01 	tst.w	r3, #1
    5b52:	d11b      	bne.n	5b8c <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b54:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b56:	f013 0f03 	tst.w	r3, #3
    5b5a:	d1fb      	bne.n	5b54 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    5b5c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    5b5e:	f013 0f02 	tst.w	r3, #2
    5b62:	d00d      	beq.n	5b80 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5b64:	8803      	ldrh	r3, [r0, #0]
    5b66:	f023 0302 	bic.w	r3, r3, #2
    5b6a:	041b      	lsls	r3, r3, #16
    5b6c:	0c1b      	lsrs	r3, r3, #16
    5b6e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b70:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b72:	f013 0f03 	tst.w	r3, #3
    5b76:	d1fb      	bne.n	5b70 <_adc_init+0x24>
    5b78:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b7a:	f013 0f02 	tst.w	r3, #2
    5b7e:	d1fb      	bne.n	5b78 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5b80:	2301      	movs	r3, #1
    5b82:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5b84:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b86:	f013 0f03 	tst.w	r3, #3
    5b8a:	d1fb      	bne.n	5b84 <_adc_init+0x38>
    5b8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5b8e:	f013 0f01 	tst.w	r3, #1
    5b92:	d1fb      	bne.n	5b8c <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5b94:	2316      	movs	r3, #22
    5b96:	4a37      	ldr	r2, [pc, #220]	; (5c74 <_adc_init+0x128>)
    5b98:	fb03 2301 	mla	r3, r3, r1, r2
    5b9c:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    5b9e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5ba0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d1fa      	bne.n	5ba0 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    5baa:	2316      	movs	r3, #22
    5bac:	4a31      	ldr	r2, [pc, #196]	; (5c74 <_adc_init+0x128>)
    5bae:	fb03 2301 	mla	r3, r3, r1, r2
    5bb2:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    5bb4:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5bb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d1fa      	bne.n	5bb6 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    5bc0:	2316      	movs	r3, #22
    5bc2:	4a2c      	ldr	r2, [pc, #176]	; (5c74 <_adc_init+0x128>)
    5bc4:	fb03 2301 	mla	r3, r3, r1, r2
    5bc8:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    5bca:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    5bcc:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    5bce:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5bd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5bd6:	2b00      	cmp	r3, #0
    5bd8:	d1fa      	bne.n	5bd0 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    5bda:	2316      	movs	r3, #22
    5bdc:	4a25      	ldr	r2, [pc, #148]	; (5c74 <_adc_init+0x128>)
    5bde:	fb03 2301 	mla	r3, r3, r1, r2
    5be2:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    5be4:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5be6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5bec:	2b00      	cmp	r3, #0
    5bee:	d1fa      	bne.n	5be6 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    5bf0:	2316      	movs	r3, #22
    5bf2:	4a20      	ldr	r2, [pc, #128]	; (5c74 <_adc_init+0x128>)
    5bf4:	fb03 2301 	mla	r3, r3, r1, r2
    5bf8:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    5bfa:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5bfc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5c02:	2b00      	cmp	r3, #0
    5c04:	d1fa      	bne.n	5bfc <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    5c06:	2316      	movs	r3, #22
    5c08:	4a1a      	ldr	r2, [pc, #104]	; (5c74 <_adc_init+0x128>)
    5c0a:	fb03 2301 	mla	r3, r3, r1, r2
    5c0e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    5c10:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c12:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c14:	f013 0f80 	tst.w	r3, #128	; 0x80
    5c18:	d1fb      	bne.n	5c12 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    5c1a:	2316      	movs	r3, #22
    5c1c:	4a15      	ldr	r2, [pc, #84]	; (5c74 <_adc_init+0x128>)
    5c1e:	fb03 2301 	mla	r3, r3, r1, r2
    5c22:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    5c24:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c26:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c28:	f413 7f80 	tst.w	r3, #256	; 0x100
    5c2c:	d1fb      	bne.n	5c26 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    5c2e:	2316      	movs	r3, #22
    5c30:	4a10      	ldr	r2, [pc, #64]	; (5c74 <_adc_init+0x128>)
    5c32:	fb03 2301 	mla	r3, r3, r1, r2
    5c36:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    5c38:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c3c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5c40:	d1fb      	bne.n	5c3a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    5c42:	2316      	movs	r3, #22
    5c44:	4a0b      	ldr	r2, [pc, #44]	; (5c74 <_adc_init+0x128>)
    5c46:	fb03 2301 	mla	r3, r3, r1, r2
    5c4a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    5c4c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c50:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5c54:	d1fb      	bne.n	5c4e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    5c56:	2216      	movs	r2, #22
    5c58:	4b06      	ldr	r3, [pc, #24]	; (5c74 <_adc_init+0x128>)
    5c5a:	fb02 3101 	mla	r1, r2, r1, r3
    5c5e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5c60:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    5c62:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    5c64:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c66:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c68:	f013 0f03 	tst.w	r3, #3
    5c6c:	d1fb      	bne.n	5c66 <_adc_init+0x11a>

	return ERR_NONE;
}
    5c6e:	2000      	movs	r0, #0
    5c70:	4770      	bx	lr
    5c72:	bf00      	nop
    5c74:	0000ce40 	.word	0x0000ce40

00005c78 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    5c78:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    5c7a:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    5c7c:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5c80:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    5c84:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    5c86:	f013 0f01 	tst.w	r3, #1
    5c8a:	d106      	bne.n	5c9a <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    5c8c:	f013 0f02 	tst.w	r3, #2
    5c90:	d10d      	bne.n	5cae <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    5c92:	f013 0f04 	tst.w	r3, #4
    5c96:	d111      	bne.n	5cbc <_adc_interrupt_handler+0x44>
    5c98:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    5c9a:	2301      	movs	r3, #1
    5c9c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    5ca0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    5ca4:	6883      	ldr	r3, [r0, #8]
    5ca6:	b292      	uxth	r2, r2
    5ca8:	2100      	movs	r1, #0
    5caa:	4798      	blx	r3
    5cac:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    5cae:	2302      	movs	r3, #2
    5cb0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    5cb4:	6843      	ldr	r3, [r0, #4]
    5cb6:	2100      	movs	r1, #0
    5cb8:	4798      	blx	r3
    5cba:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    5cbc:	2304      	movs	r3, #4
    5cbe:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    5cc2:	6803      	ldr	r3, [r0, #0]
    5cc4:	2100      	movs	r1, #0
    5cc6:	4798      	blx	r3
	}
}
    5cc8:	e7e6      	b.n	5c98 <_adc_interrupt_handler+0x20>
	...

00005ccc <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5ccc:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5cd0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5cd4:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    5cd8:	b148      	cbz	r0, 5cee <_adc_get_regs+0x22>
    5cda:	2801      	cmp	r0, #1
    5cdc:	d009      	beq.n	5cf2 <_adc_get_regs+0x26>
{
    5cde:	b508      	push	{r3, lr}
	ASSERT(false);
    5ce0:	228c      	movs	r2, #140	; 0x8c
    5ce2:	4905      	ldr	r1, [pc, #20]	; (5cf8 <_adc_get_regs+0x2c>)
    5ce4:	2000      	movs	r0, #0
    5ce6:	4b05      	ldr	r3, [pc, #20]	; (5cfc <_adc_get_regs+0x30>)
    5ce8:	4798      	blx	r3
	return 0;
    5cea:	2000      	movs	r0, #0
    5cec:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    5cee:	2000      	movs	r0, #0
    5cf0:	4770      	bx	lr
    5cf2:	2001      	movs	r0, #1
    5cf4:	4770      	bx	lr
    5cf6:	bf00      	nop
    5cf8:	0000ce6c 	.word	0x0000ce6c
    5cfc:	00005959 	.word	0x00005959

00005d00 <_adc_async_init>:
{
    5d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d04:	460c      	mov	r4, r1
	ASSERT(device);
    5d06:	4605      	mov	r5, r0
    5d08:	22e6      	movs	r2, #230	; 0xe6
    5d0a:	493b      	ldr	r1, [pc, #236]	; (5df8 <_adc_async_init+0xf8>)
    5d0c:	3000      	adds	r0, #0
    5d0e:	bf18      	it	ne
    5d10:	2001      	movne	r0, #1
    5d12:	4b3a      	ldr	r3, [pc, #232]	; (5dfc <_adc_async_init+0xfc>)
    5d14:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    5d16:	4620      	mov	r0, r4
    5d18:	4b39      	ldr	r3, [pc, #228]	; (5e00 <_adc_async_init+0x100>)
    5d1a:	4798      	blx	r3
    5d1c:	4601      	mov	r1, r0
    5d1e:	4620      	mov	r0, r4
    5d20:	4b38      	ldr	r3, [pc, #224]	; (5e04 <_adc_async_init+0x104>)
    5d22:	4798      	blx	r3
	if (init_status) {
    5d24:	4606      	mov	r6, r0
    5d26:	b110      	cbz	r0, 5d2e <_adc_async_init+0x2e>
}
    5d28:	4630      	mov	r0, r6
    5d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    5d2e:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5d30:	4b35      	ldr	r3, [pc, #212]	; (5e08 <_adc_async_init+0x108>)
    5d32:	429c      	cmp	r4, r3
    5d34:	d05c      	beq.n	5df0 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    5d36:	4b35      	ldr	r3, [pc, #212]	; (5e0c <_adc_async_init+0x10c>)
    5d38:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    5d3a:	bf04      	itt	eq
    5d3c:	4b34      	ldreq	r3, [pc, #208]	; (5e10 <_adc_async_init+0x110>)
    5d3e:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5d40:	4628      	mov	r0, r5
    5d42:	4f34      	ldr	r7, [pc, #208]	; (5e14 <_adc_async_init+0x114>)
    5d44:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d46:	0943      	lsrs	r3, r0, #5
    5d48:	f000 001f 	and.w	r0, r0, #31
    5d4c:	2401      	movs	r4, #1
    5d4e:	fa04 f000 	lsl.w	r0, r4, r0
    5d52:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5e18 <_adc_async_init+0x118>
    5d56:	3320      	adds	r3, #32
    5d58:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d60:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    5d64:	4628      	mov	r0, r5
    5d66:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d68:	0943      	lsrs	r3, r0, #5
    5d6a:	f000 001f 	and.w	r0, r0, #31
    5d6e:	fa04 f000 	lsl.w	r0, r4, r0
    5d72:	3360      	adds	r3, #96	; 0x60
    5d74:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5d78:	4628      	mov	r0, r5
    5d7a:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d7c:	0943      	lsrs	r3, r0, #5
    5d7e:	f000 001f 	and.w	r0, r0, #31
    5d82:	4084      	lsls	r4, r0
    5d84:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5d88:	4628      	mov	r0, r5
    5d8a:	47b8      	blx	r7
    5d8c:	3001      	adds	r0, #1
    5d8e:	b280      	uxth	r0, r0
    5d90:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5d92:	2b00      	cmp	r3, #0
    5d94:	dbc8      	blt.n	5d28 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d96:	095b      	lsrs	r3, r3, #5
    5d98:	f000 001f 	and.w	r0, r0, #31
    5d9c:	2201      	movs	r2, #1
    5d9e:	fa02 f000 	lsl.w	r0, r2, r0
    5da2:	3320      	adds	r3, #32
    5da4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5da8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5dac:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    5db0:	4628      	mov	r0, r5
    5db2:	47b8      	blx	r7
    5db4:	3001      	adds	r0, #1
    5db6:	b280      	uxth	r0, r0
    5db8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5dba:	2b00      	cmp	r3, #0
    5dbc:	dbb4      	blt.n	5d28 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5dbe:	095b      	lsrs	r3, r3, #5
    5dc0:	f000 001f 	and.w	r0, r0, #31
    5dc4:	2201      	movs	r2, #1
    5dc6:	fa02 f000 	lsl.w	r0, r2, r0
    5dca:	3360      	adds	r3, #96	; 0x60
    5dcc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    5dd0:	4628      	mov	r0, r5
    5dd2:	47b8      	blx	r7
    5dd4:	3001      	adds	r0, #1
    5dd6:	b280      	uxth	r0, r0
    5dd8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5dda:	2b00      	cmp	r3, #0
    5ddc:	dba4      	blt.n	5d28 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5dde:	095b      	lsrs	r3, r3, #5
    5de0:	f000 001f 	and.w	r0, r0, #31
    5de4:	2201      	movs	r2, #1
    5de6:	fa02 f000 	lsl.w	r0, r2, r0
    5dea:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    5dee:	e79b      	b.n	5d28 <_adc_async_init+0x28>
		_adc0_dev = dev;
    5df0:	4b07      	ldr	r3, [pc, #28]	; (5e10 <_adc_async_init+0x110>)
    5df2:	601d      	str	r5, [r3, #0]
    5df4:	e7a4      	b.n	5d40 <_adc_async_init+0x40>
    5df6:	bf00      	nop
    5df8:	0000ce6c 	.word	0x0000ce6c
    5dfc:	00005959 	.word	0x00005959
    5e00:	00005ccd 	.word	0x00005ccd
    5e04:	00005b4d 	.word	0x00005b4d
    5e08:	43001c00 	.word	0x43001c00
    5e0c:	43002000 	.word	0x43002000
    5e10:	200007f0 	.word	0x200007f0
    5e14:	00005b35 	.word	0x00005b35
    5e18:	e000e100 	.word	0xe000e100

00005e1c <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    5e1c:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5e1e:	8813      	ldrh	r3, [r2, #0]
    5e20:	b29b      	uxth	r3, r3
    5e22:	f043 0302 	orr.w	r3, r3, #2
    5e26:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5e28:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5e2a:	f013 0f03 	tst.w	r3, #3
    5e2e:	d1fb      	bne.n	5e28 <_adc_async_enable_channel+0xc>
}
    5e30:	4770      	bx	lr

00005e32 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    5e32:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    5e34:	88db      	ldrh	r3, [r3, #6]
    5e36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    5e3a:	2b03      	cmp	r3, #3
}
    5e3c:	bf0c      	ite	eq
    5e3e:	2001      	moveq	r0, #1
    5e40:	2002      	movne	r0, #2
    5e42:	4770      	bx	lr

00005e44 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    5e44:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    5e46:	7d13      	ldrb	r3, [r2, #20]
    5e48:	f043 0302 	orr.w	r3, r3, #2
    5e4c:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5e4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5e54:	2b00      	cmp	r3, #0
    5e56:	d1fa      	bne.n	5e4e <_adc_async_convert+0xa>
}
    5e58:	4770      	bx	lr

00005e5a <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    5e5a:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    5e5c:	2a01      	cmp	r2, #1
    5e5e:	d007      	beq.n	5e70 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    5e60:	2a02      	cmp	r2, #2
    5e62:	d00e      	beq.n	5e82 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    5e64:	b91a      	cbnz	r2, 5e6e <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    5e66:	b1ab      	cbz	r3, 5e94 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    5e68:	2301      	movs	r3, #1
    5e6a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5e6e:	4770      	bx	lr
	if (value == 0x0) {
    5e70:	b91b      	cbnz	r3, 5e7a <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    5e72:	2304      	movs	r3, #4
    5e74:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5e78:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    5e7a:	2304      	movs	r3, #4
    5e7c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5e80:	4770      	bx	lr
	if (value == 0x0) {
    5e82:	b91b      	cbnz	r3, 5e8c <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    5e84:	2302      	movs	r3, #2
    5e86:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5e8a:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    5e8c:	2302      	movs	r3, #2
    5e8e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5e92:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    5e94:	2301      	movs	r3, #1
    5e96:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5e9a:	4770      	bx	lr

00005e9c <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    5e9c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5e9e:	4b02      	ldr	r3, [pc, #8]	; (5ea8 <ADC0_0_Handler+0xc>)
    5ea0:	6818      	ldr	r0, [r3, #0]
    5ea2:	4b02      	ldr	r3, [pc, #8]	; (5eac <ADC0_0_Handler+0x10>)
    5ea4:	4798      	blx	r3
    5ea6:	bd08      	pop	{r3, pc}
    5ea8:	200007f0 	.word	0x200007f0
    5eac:	00005c79 	.word	0x00005c79

00005eb0 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    5eb0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5eb2:	4b02      	ldr	r3, [pc, #8]	; (5ebc <ADC0_1_Handler+0xc>)
    5eb4:	6818      	ldr	r0, [r3, #0]
    5eb6:	4b02      	ldr	r3, [pc, #8]	; (5ec0 <ADC0_1_Handler+0x10>)
    5eb8:	4798      	blx	r3
    5eba:	bd08      	pop	{r3, pc}
    5ebc:	200007f0 	.word	0x200007f0
    5ec0:	00005c79 	.word	0x00005c79

00005ec4 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    5ec4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5ec6:	4b02      	ldr	r3, [pc, #8]	; (5ed0 <ADC1_0_Handler+0xc>)
    5ec8:	6858      	ldr	r0, [r3, #4]
    5eca:	4b02      	ldr	r3, [pc, #8]	; (5ed4 <ADC1_0_Handler+0x10>)
    5ecc:	4798      	blx	r3
    5ece:	bd08      	pop	{r3, pc}
    5ed0:	200007f0 	.word	0x200007f0
    5ed4:	00005c79 	.word	0x00005c79

00005ed8 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    5ed8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5eda:	4b02      	ldr	r3, [pc, #8]	; (5ee4 <ADC1_1_Handler+0xc>)
    5edc:	6858      	ldr	r0, [r3, #4]
    5ede:	4b02      	ldr	r3, [pc, #8]	; (5ee8 <ADC1_1_Handler+0x10>)
    5ee0:	4798      	blx	r3
    5ee2:	bd08      	pop	{r3, pc}
    5ee4:	200007f0 	.word	0x200007f0
    5ee8:	00005c79 	.word	0x00005c79

00005eec <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5eec:	0943      	lsrs	r3, r0, #5
    5eee:	f000 001f 	and.w	r0, r0, #31
    5ef2:	2201      	movs	r2, #1
    5ef4:	fa02 f000 	lsl.w	r0, r2, r0
    5ef8:	3340      	adds	r3, #64	; 0x40
    5efa:	4a02      	ldr	r2, [pc, #8]	; (5f04 <_irq_set+0x18>)
    5efc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5f00:	4770      	bx	lr
    5f02:	bf00      	nop
    5f04:	e000e100 	.word	0xe000e100

00005f08 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    5f08:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5f0c:	00c0      	lsls	r0, r0, #3
    5f0e:	4770      	bx	lr

00005f10 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5f10:	4b01      	ldr	r3, [pc, #4]	; (5f18 <_get_cycles_for_ms+0x8>)
    5f12:	fb03 f000 	mul.w	r0, r3, r0
    5f16:	4770      	bx	lr
    5f18:	0001d4c0 	.word	0x0001d4c0

00005f1c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5f1c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5f1e:	4a0e      	ldr	r2, [pc, #56]	; (5f58 <_init_chip+0x3c>)
    5f20:	8813      	ldrh	r3, [r2, #0]
    5f22:	b29b      	uxth	r3, r3
    5f24:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    5f28:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    5f2a:	4b0c      	ldr	r3, [pc, #48]	; (5f5c <_init_chip+0x40>)
    5f2c:	4798      	blx	r3
	_oscctrl_init_sources();
    5f2e:	4b0c      	ldr	r3, [pc, #48]	; (5f60 <_init_chip+0x44>)
    5f30:	4798      	blx	r3
	_mclk_init();
    5f32:	4b0c      	ldr	r3, [pc, #48]	; (5f64 <_init_chip+0x48>)
    5f34:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5f36:	2004      	movs	r0, #4
    5f38:	4c0b      	ldr	r4, [pc, #44]	; (5f68 <_init_chip+0x4c>)
    5f3a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    5f3c:	4b0b      	ldr	r3, [pc, #44]	; (5f6c <_init_chip+0x50>)
    5f3e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5f40:	f640 70fb 	movw	r0, #4091	; 0xffb
    5f44:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    5f46:	4a0a      	ldr	r2, [pc, #40]	; (5f70 <_init_chip+0x54>)
    5f48:	6913      	ldr	r3, [r2, #16]
    5f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5f4e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    5f50:	4b08      	ldr	r3, [pc, #32]	; (5f74 <_init_chip+0x58>)
    5f52:	4798      	blx	r3
    5f54:	bd10      	pop	{r4, pc}
    5f56:	bf00      	nop
    5f58:	41004000 	.word	0x41004000
    5f5c:	000063f9 	.word	0x000063f9
    5f60:	0000640d 	.word	0x0000640d
    5f64:	00006321 	.word	0x00006321
    5f68:	000062a9 	.word	0x000062a9
    5f6c:	00006411 	.word	0x00006411
    5f70:	40000800 	.word	0x40000800
    5f74:	00005fed 	.word	0x00005fed

00005f78 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    5f78:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    5f7a:	4a1a      	ldr	r2, [pc, #104]	; (5fe4 <_dmac_handler+0x6c>)
    5f7c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    5f7e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    5f82:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5f86:	4818      	ldr	r0, [pc, #96]	; (5fe8 <_dmac_handler+0x70>)
    5f88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    5f8c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5f90:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    5f94:	f012 0f01 	tst.w	r2, #1
    5f98:	d10a      	bne.n	5fb0 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    5f9a:	011a      	lsls	r2, r3, #4
    5f9c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5fa0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5fa4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    5fa8:	f012 0f02 	tst.w	r2, #2
    5fac:	d10b      	bne.n	5fc6 <_dmac_handler+0x4e>
    5fae:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    5fb0:	011a      	lsls	r2, r3, #4
    5fb2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5fb6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5fba:	2101      	movs	r1, #1
    5fbc:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    5fc0:	6843      	ldr	r3, [r0, #4]
    5fc2:	4798      	blx	r3
    5fc4:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    5fc6:	011a      	lsls	r2, r3, #4
    5fc8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5fcc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    5fd0:	2102      	movs	r1, #2
    5fd2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    5fd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5fda:	4a03      	ldr	r2, [pc, #12]	; (5fe8 <_dmac_handler+0x70>)
    5fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fe0:	4798      	blx	r3
	}
}
    5fe2:	e7e4      	b.n	5fae <_dmac_handler+0x36>
    5fe4:	4100a000 	.word	0x4100a000
    5fe8:	200007f8 	.word	0x200007f8

00005fec <_dma_init>:
{
    5fec:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    5fee:	4a32      	ldr	r2, [pc, #200]	; (60b8 <_dma_init+0xcc>)
    5ff0:	8813      	ldrh	r3, [r2, #0]
    5ff2:	f023 0302 	bic.w	r3, r3, #2
    5ff6:	041b      	lsls	r3, r3, #16
    5ff8:	0c1b      	lsrs	r3, r3, #16
    5ffa:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    5ffc:	8853      	ldrh	r3, [r2, #2]
    5ffe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    6002:	041b      	lsls	r3, r3, #16
    6004:	0c1b      	lsrs	r3, r3, #16
    6006:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    6008:	8813      	ldrh	r3, [r2, #0]
    600a:	b29b      	uxth	r3, r3
    600c:	f043 0301 	orr.w	r3, r3, #1
    6010:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    6012:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    6014:	f013 0f01 	tst.w	r3, #1
    6018:	d1fb      	bne.n	6012 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    601a:	4b27      	ldr	r3, [pc, #156]	; (60b8 <_dma_init+0xcc>)
    601c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6020:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    6022:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    6024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    6028:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    602c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    602e:	2100      	movs	r1, #0
    6030:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    6032:	4a22      	ldr	r2, [pc, #136]	; (60bc <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    6034:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    6036:	4a22      	ldr	r2, [pc, #136]	; (60c0 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    6038:	639a      	str	r2, [r3, #56]	; 0x38
    603a:	4b22      	ldr	r3, [pc, #136]	; (60c4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    603c:	4c1f      	ldr	r4, [pc, #124]	; (60bc <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    603e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6040:	681d      	ldr	r5, [r3, #0]
    6042:	0108      	lsls	r0, r1, #4
    6044:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    6048:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    604c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    604e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6050:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    6054:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    6056:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    605a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    605c:	1822      	adds	r2, r4, r0
    605e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6060:	60d6      	str	r6, [r2, #12]
    6062:	3101      	adds	r1, #1
    6064:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    6066:	2920      	cmp	r1, #32
    6068:	d1ea      	bne.n	6040 <_dma_init+0x54>
    606a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    606c:	2001      	movs	r0, #1
    606e:	4916      	ldr	r1, [pc, #88]	; (60c8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    6070:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    6072:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6076:	d00b      	beq.n	6090 <_dma_init+0xa4>
    6078:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    607a:	2b24      	cmp	r3, #36	; 0x24
    607c:	d1f8      	bne.n	6070 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    607e:	4a0e      	ldr	r2, [pc, #56]	; (60b8 <_dma_init+0xcc>)
    6080:	8813      	ldrh	r3, [r2, #0]
    6082:	b29b      	uxth	r3, r3
    6084:	f043 0302 	orr.w	r3, r3, #2
    6088:	8013      	strh	r3, [r2, #0]
}
    608a:	2000      	movs	r0, #0
    608c:	bc70      	pop	{r4, r5, r6}
    608e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6090:	095c      	lsrs	r4, r3, #5
    6092:	f002 021f 	and.w	r2, r2, #31
    6096:	fa00 f202 	lsl.w	r2, r0, r2
    609a:	f104 0520 	add.w	r5, r4, #32
    609e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    60a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    60a6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60aa:	f104 0560 	add.w	r5, r4, #96	; 0x60
    60ae:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60b2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    60b6:	e7df      	b.n	6078 <_dma_init+0x8c>
    60b8:	4100a000 	.word	0x4100a000
    60bc:	20003940 	.word	0x20003940
    60c0:	20003b40 	.word	0x20003b40
    60c4:	0000ce84 	.word	0x0000ce84
    60c8:	e000e100 	.word	0xe000e100

000060cc <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    60cc:	b991      	cbnz	r1, 60f4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    60ce:	b942      	cbnz	r2, 60e2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    60d0:	0100      	lsls	r0, r0, #4
    60d2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    60d6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    60da:	2302      	movs	r3, #2
    60dc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    60e0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    60e2:	0100      	lsls	r0, r0, #4
    60e4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    60e8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    60ec:	2302      	movs	r3, #2
    60ee:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    60f2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    60f4:	2901      	cmp	r1, #1
    60f6:	d000      	beq.n	60fa <_dma_set_irq_state+0x2e>
    60f8:	4770      	bx	lr
	if (value == 0x0) {
    60fa:	b142      	cbz	r2, 610e <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    60fc:	0100      	lsls	r0, r0, #4
    60fe:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6102:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6106:	2301      	movs	r3, #1
    6108:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    610c:	e7f4      	b.n	60f8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    610e:	0100      	lsls	r0, r0, #4
    6110:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6114:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    6118:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    611c:	4770      	bx	lr
	...

00006120 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6120:	4b02      	ldr	r3, [pc, #8]	; (612c <_dma_set_destination_address+0xc>)
    6122:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6126:	6081      	str	r1, [r0, #8]
}
    6128:	2000      	movs	r0, #0
    612a:	4770      	bx	lr
    612c:	20003940 	.word	0x20003940

00006130 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6130:	4b02      	ldr	r3, [pc, #8]	; (613c <_dma_set_source_address+0xc>)
    6132:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6136:	6041      	str	r1, [r0, #4]
}
    6138:	2000      	movs	r0, #0
    613a:	4770      	bx	lr
    613c:	20003940 	.word	0x20003940

00006140 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6140:	4a05      	ldr	r2, [pc, #20]	; (6158 <_dma_srcinc_enable+0x18>)
    6142:	0100      	lsls	r0, r0, #4
    6144:	5a13      	ldrh	r3, [r2, r0]
    6146:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    6148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    614c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6150:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    6152:	5211      	strh	r1, [r2, r0]
}
    6154:	2000      	movs	r0, #0
    6156:	4770      	bx	lr
    6158:	20003940 	.word	0x20003940

0000615c <_dma_set_data_amount>:
{
    615c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    615e:	4c14      	ldr	r4, [pc, #80]	; (61b0 <_dma_set_data_amount+0x54>)
    6160:	0102      	lsls	r2, r0, #4
    6162:	18a3      	adds	r3, r4, r2
    6164:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6166:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    6168:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    616c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    616e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    6172:	d006      	beq.n	6182 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6174:	fa01 f403 	lsl.w	r4, r1, r3
    6178:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    617a:	4a0d      	ldr	r2, [pc, #52]	; (61b0 <_dma_set_data_amount+0x54>)
    617c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    6180:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    6182:	4c0b      	ldr	r4, [pc, #44]	; (61b0 <_dma_set_data_amount+0x54>)
    6184:	0102      	lsls	r2, r0, #4
    6186:	18a5      	adds	r5, r4, r2
    6188:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    618a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    618c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    6190:	d005      	beq.n	619e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6192:	fa01 f303 	lsl.w	r3, r1, r3
    6196:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6198:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    619c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    619e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    61a0:	4b03      	ldr	r3, [pc, #12]	; (61b0 <_dma_set_data_amount+0x54>)
    61a2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    61a6:	8041      	strh	r1, [r0, #2]
}
    61a8:	2000      	movs	r0, #0
    61aa:	bc30      	pop	{r4, r5}
    61ac:	4770      	bx	lr
    61ae:	bf00      	nop
    61b0:	20003940 	.word	0x20003940

000061b4 <_dma_enable_transaction>:
{
    61b4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    61b6:	4c0d      	ldr	r4, [pc, #52]	; (61ec <_dma_enable_transaction+0x38>)
    61b8:	0103      	lsls	r3, r0, #4
    61ba:	5ae2      	ldrh	r2, [r4, r3]
    61bc:	b292      	uxth	r2, r2
    61be:	f042 0201 	orr.w	r2, r2, #1
    61c2:	52e2      	strh	r2, [r4, r3]
    61c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    61c8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    61cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    61ce:	f042 0202 	orr.w	r2, r2, #2
    61d2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    61d4:	b131      	cbz	r1, 61e4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    61d6:	4a06      	ldr	r2, [pc, #24]	; (61f0 <_dma_enable_transaction+0x3c>)
    61d8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    61da:	2301      	movs	r3, #1
    61dc:	fa03 f000 	lsl.w	r0, r3, r0
    61e0:	4308      	orrs	r0, r1
    61e2:	6110      	str	r0, [r2, #16]
}
    61e4:	2000      	movs	r0, #0
    61e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    61ea:	4770      	bx	lr
    61ec:	20003940 	.word	0x20003940
    61f0:	4100a000 	.word	0x4100a000

000061f4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    61f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    61f8:	4b02      	ldr	r3, [pc, #8]	; (6204 <_dma_get_channel_resource+0x10>)
    61fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    61fe:	6001      	str	r1, [r0, #0]
}
    6200:	2000      	movs	r0, #0
    6202:	4770      	bx	lr
    6204:	200007f8 	.word	0x200007f8

00006208 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    6208:	b508      	push	{r3, lr}
	_dmac_handler();
    620a:	4b01      	ldr	r3, [pc, #4]	; (6210 <DMAC_0_Handler+0x8>)
    620c:	4798      	blx	r3
    620e:	bd08      	pop	{r3, pc}
    6210:	00005f79 	.word	0x00005f79

00006214 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    6214:	b508      	push	{r3, lr}
	_dmac_handler();
    6216:	4b01      	ldr	r3, [pc, #4]	; (621c <DMAC_1_Handler+0x8>)
    6218:	4798      	blx	r3
    621a:	bd08      	pop	{r3, pc}
    621c:	00005f79 	.word	0x00005f79

00006220 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6220:	b508      	push	{r3, lr}
	_dmac_handler();
    6222:	4b01      	ldr	r3, [pc, #4]	; (6228 <DMAC_2_Handler+0x8>)
    6224:	4798      	blx	r3
    6226:	bd08      	pop	{r3, pc}
    6228:	00005f79 	.word	0x00005f79

0000622c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    622c:	b508      	push	{r3, lr}
	_dmac_handler();
    622e:	4b01      	ldr	r3, [pc, #4]	; (6234 <DMAC_3_Handler+0x8>)
    6230:	4798      	blx	r3
    6232:	bd08      	pop	{r3, pc}
    6234:	00005f79 	.word	0x00005f79

00006238 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6238:	b508      	push	{r3, lr}
	_dmac_handler();
    623a:	4b01      	ldr	r3, [pc, #4]	; (6240 <DMAC_4_Handler+0x8>)
    623c:	4798      	blx	r3
    623e:	bd08      	pop	{r3, pc}
    6240:	00005f79 	.word	0x00005f79

00006244 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6244:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    6246:	2000      	movs	r0, #0
    6248:	4770      	bx	lr
	...

0000624c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    624c:	b430      	push	{r4, r5}
    624e:	4814      	ldr	r0, [pc, #80]	; (62a0 <_event_system_init+0x54>)
    6250:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6254:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6256:	4c13      	ldr	r4, [pc, #76]	; (62a4 <_event_system_init+0x58>)
    6258:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    625a:	f813 1b01 	ldrb.w	r1, [r3], #1
    625e:	3248      	adds	r2, #72	; 0x48
    6260:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    6264:	42ab      	cmp	r3, r5
    6266:	d1f7      	bne.n	6258 <_event_system_init+0xc>
    6268:	480d      	ldr	r0, [pc, #52]	; (62a0 <_event_system_init+0x54>)
    626a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    626e:	3080      	adds	r0, #128	; 0x80
    6270:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6272:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6276:	00ca      	lsls	r2, r1, #3
    6278:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    627c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6280:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6282:	f850 3f04 	ldr.w	r3, [r0, #4]!
    6286:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6288:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    628c:	43db      	mvns	r3, r3
    628e:	b2db      	uxtb	r3, r3
    6290:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    6294:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6296:	2920      	cmp	r1, #32
    6298:	d1eb      	bne.n	6272 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    629a:	2000      	movs	r0, #0
    629c:	bc30      	pop	{r4, r5}
    629e:	4770      	bx	lr
    62a0:	0000cf84 	.word	0x0000cf84
    62a4:	4100e000 	.word	0x4100e000

000062a8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    62a8:	f010 0f01 	tst.w	r0, #1
    62ac:	d008      	beq.n	62c0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    62ae:	4a17      	ldr	r2, [pc, #92]	; (630c <_gclk_init_generators_by_fref+0x64>)
    62b0:	4b17      	ldr	r3, [pc, #92]	; (6310 <_gclk_init_generators_by_fref+0x68>)
    62b2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    62b4:	4619      	mov	r1, r3
    62b6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    62ba:	684b      	ldr	r3, [r1, #4]
    62bc:	4213      	tst	r3, r2
    62be:	d1fc      	bne.n	62ba <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    62c0:	f010 0f02 	tst.w	r0, #2
    62c4:	d008      	beq.n	62d8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    62c6:	4a13      	ldr	r2, [pc, #76]	; (6314 <_gclk_init_generators_by_fref+0x6c>)
    62c8:	4b11      	ldr	r3, [pc, #68]	; (6310 <_gclk_init_generators_by_fref+0x68>)
    62ca:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    62cc:	4619      	mov	r1, r3
    62ce:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    62d2:	684b      	ldr	r3, [r1, #4]
    62d4:	4213      	tst	r3, r2
    62d6:	d1fc      	bne.n	62d2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    62d8:	f010 0f04 	tst.w	r0, #4
    62dc:	d008      	beq.n	62f0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    62de:	4a0e      	ldr	r2, [pc, #56]	; (6318 <_gclk_init_generators_by_fref+0x70>)
    62e0:	4b0b      	ldr	r3, [pc, #44]	; (6310 <_gclk_init_generators_by_fref+0x68>)
    62e2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    62e4:	4619      	mov	r1, r3
    62e6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    62ea:	684b      	ldr	r3, [r1, #4]
    62ec:	4213      	tst	r3, r2
    62ee:	d1fc      	bne.n	62ea <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    62f0:	f010 0f08 	tst.w	r0, #8
    62f4:	d008      	beq.n	6308 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    62f6:	4a09      	ldr	r2, [pc, #36]	; (631c <_gclk_init_generators_by_fref+0x74>)
    62f8:	4b05      	ldr	r3, [pc, #20]	; (6310 <_gclk_init_generators_by_fref+0x68>)
    62fa:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    62fc:	4619      	mov	r1, r3
    62fe:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6302:	684b      	ldr	r3, [r1, #4]
    6304:	4213      	tst	r3, r2
    6306:	d1fc      	bne.n	6302 <_gclk_init_generators_by_fref+0x5a>
    6308:	4770      	bx	lr
    630a:	bf00      	nop
    630c:	00010108 	.word	0x00010108
    6310:	40001c00 	.word	0x40001c00
    6314:	00010106 	.word	0x00010106
    6318:	00100106 	.word	0x00100106
    631c:	00010104 	.word	0x00010104

00006320 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    6320:	2201      	movs	r2, #1
    6322:	4b01      	ldr	r3, [pc, #4]	; (6328 <_mclk_init+0x8>)
    6324:	715a      	strb	r2, [r3, #5]
    6326:	4770      	bx	lr
    6328:	40000800 	.word	0x40000800

0000632c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    632c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    632e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6330:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6332:	f012 0f01 	tst.w	r2, #1
    6336:	d005      	beq.n	6344 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    6338:	2201      	movs	r2, #1
    633a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    633c:	6803      	ldr	r3, [r0, #0]
    633e:	b153      	cbz	r3, 6356 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6340:	4798      	blx	r3
    6342:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6344:	8a1a      	ldrh	r2, [r3, #16]
    6346:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    6348:	b12a      	cbz	r2, 6356 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    634a:	f240 225e 	movw	r2, #606	; 0x25e
    634e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    6350:	6843      	ldr	r3, [r0, #4]
    6352:	b103      	cbz	r3, 6356 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    6354:	4798      	blx	r3
    6356:	bd08      	pop	{r3, pc}

00006358 <_flash_init>:
{
    6358:	b538      	push	{r3, r4, r5, lr}
    635a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    635c:	4605      	mov	r5, r0
    635e:	b350      	cbz	r0, 63b6 <_flash_init+0x5e>
    6360:	4816      	ldr	r0, [pc, #88]	; (63bc <_flash_init+0x64>)
    6362:	4281      	cmp	r1, r0
    6364:	bf14      	ite	ne
    6366:	2000      	movne	r0, #0
    6368:	2001      	moveq	r0, #1
    636a:	224b      	movs	r2, #75	; 0x4b
    636c:	4914      	ldr	r1, [pc, #80]	; (63c0 <_flash_init+0x68>)
    636e:	4b15      	ldr	r3, [pc, #84]	; (63c4 <_flash_init+0x6c>)
    6370:	4798      	blx	r3
	device->hw = hw;
    6372:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    6374:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    6376:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    637a:	049b      	lsls	r3, r3, #18
    637c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    637e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    6380:	4b11      	ldr	r3, [pc, #68]	; (63c8 <_flash_init+0x70>)
    6382:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6384:	4b11      	ldr	r3, [pc, #68]	; (63cc <_flash_init+0x74>)
    6386:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    638a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    638e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6392:	f3bf 8f6f 	isb	sy
    6396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    639a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    639e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    63a2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63a6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    63aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63ae:	6019      	str	r1, [r3, #0]
    63b0:	601a      	str	r2, [r3, #0]
}
    63b2:	2000      	movs	r0, #0
    63b4:	bd38      	pop	{r3, r4, r5, pc}
    63b6:	2000      	movs	r0, #0
    63b8:	e7d7      	b.n	636a <_flash_init+0x12>
    63ba:	bf00      	nop
    63bc:	41004000 	.word	0x41004000
    63c0:	0000d088 	.word	0x0000d088
    63c4:	00005959 	.word	0x00005959
    63c8:	20000978 	.word	0x20000978
    63cc:	e000e100 	.word	0xe000e100

000063d0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    63d0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    63d2:	4b02      	ldr	r3, [pc, #8]	; (63dc <NVMCTRL_0_Handler+0xc>)
    63d4:	6818      	ldr	r0, [r3, #0]
    63d6:	4b02      	ldr	r3, [pc, #8]	; (63e0 <NVMCTRL_0_Handler+0x10>)
    63d8:	4798      	blx	r3
    63da:	bd08      	pop	{r3, pc}
    63dc:	20000978 	.word	0x20000978
    63e0:	0000632d 	.word	0x0000632d

000063e4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    63e4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    63e6:	4b02      	ldr	r3, [pc, #8]	; (63f0 <NVMCTRL_1_Handler+0xc>)
    63e8:	6818      	ldr	r0, [r3, #0]
    63ea:	4b02      	ldr	r3, [pc, #8]	; (63f4 <NVMCTRL_1_Handler+0x10>)
    63ec:	4798      	blx	r3
    63ee:	bd08      	pop	{r3, pc}
    63f0:	20000978 	.word	0x20000978
    63f4:	0000632d 	.word	0x0000632d

000063f8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    63f8:	4b03      	ldr	r3, [pc, #12]	; (6408 <_osc32kctrl_init_sources+0x10>)
    63fa:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    63fc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6400:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6402:	2201      	movs	r2, #1
    6404:	741a      	strb	r2, [r3, #16]
    6406:	4770      	bx	lr
    6408:	40001400 	.word	0x40001400

0000640c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    640c:	4770      	bx	lr
	...

00006410 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6410:	4a47      	ldr	r2, [pc, #284]	; (6530 <_oscctrl_init_referenced_generators+0x120>)
    6412:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6414:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6418:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    641c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    641e:	4611      	mov	r1, r2
    6420:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6424:	684b      	ldr	r3, [r1, #4]
    6426:	4213      	tst	r3, r2
    6428:	d1fc      	bne.n	6424 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    642a:	4a41      	ldr	r2, [pc, #260]	; (6530 <_oscctrl_init_referenced_generators+0x120>)
    642c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    642e:	f013 0f04 	tst.w	r3, #4
    6432:	d1fb      	bne.n	642c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6434:	4b3f      	ldr	r3, [pc, #252]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    6436:	2200      	movs	r2, #0
    6438:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    643a:	4a3f      	ldr	r2, [pc, #252]	; (6538 <_oscctrl_init_referenced_generators+0x128>)
    643c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    643e:	461a      	mov	r2, r3
    6440:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6444:	f013 0f10 	tst.w	r3, #16
    6448:	d1fa      	bne.n	6440 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    644a:	2200      	movs	r2, #0
    644c:	4b39      	ldr	r3, [pc, #228]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    644e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6452:	461a      	mov	r2, r3
    6454:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6458:	f013 0f04 	tst.w	r3, #4
    645c:	d1fa      	bne.n	6454 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    645e:	2202      	movs	r2, #2
    6460:	4b34      	ldr	r3, [pc, #208]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    6462:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6464:	461a      	mov	r2, r3
    6466:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    646a:	f013 0f02 	tst.w	r3, #2
    646e:	d1fa      	bne.n	6466 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6470:	4b30      	ldr	r3, [pc, #192]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    6472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6474:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6476:	461a      	mov	r2, r3
    6478:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    647c:	f013 0f08 	tst.w	r3, #8
    6480:	d1fa      	bne.n	6478 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6482:	2288      	movs	r2, #136	; 0x88
    6484:	4b2b      	ldr	r3, [pc, #172]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    6486:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    648a:	461a      	mov	r2, r3
    648c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6490:	f013 0f04 	tst.w	r3, #4
    6494:	d1fa      	bne.n	648c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6496:	2242      	movs	r2, #66	; 0x42
    6498:	4b25      	ldr	r3, [pc, #148]	; (6530 <_oscctrl_init_referenced_generators+0x120>)
    649a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    649e:	2227      	movs	r2, #39	; 0x27
    64a0:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    64a4:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    64a6:	461a      	mov	r2, r3
    64a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
    64aa:	f013 0f06 	tst.w	r3, #6
    64ae:	d1fb      	bne.n	64a8 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    64b0:	4b20      	ldr	r3, [pc, #128]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    64b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    64b6:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    64b8:	2202      	movs	r2, #2
    64ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    64be:	461a      	mov	r2, r3
    64c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    64c2:	f013 0f02 	tst.w	r3, #2
    64c6:	d1fb      	bne.n	64c0 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    64c8:	4b1a      	ldr	r3, [pc, #104]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    64ca:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    64ce:	f013 0f01 	tst.w	r3, #1
    64d2:	d026      	beq.n	6522 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    64d4:	4a17      	ldr	r2, [pc, #92]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    64d6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    64d8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    64dc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    64e0:	d1f9      	bne.n	64d6 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    64e2:	4b14      	ldr	r3, [pc, #80]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    64e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    64e6:	f012 0f01 	tst.w	r2, #1
    64ea:	d103      	bne.n	64f4 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    64ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64ee:	f012 0f02 	tst.w	r2, #2
    64f2:	d0f7      	beq.n	64e4 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    64f4:	4a0e      	ldr	r2, [pc, #56]	; (6530 <_oscctrl_init_referenced_generators+0x120>)
    64f6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    64f8:	2b00      	cmp	r3, #0
    64fa:	d1fc      	bne.n	64f6 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    64fc:	4a0c      	ldr	r2, [pc, #48]	; (6530 <_oscctrl_init_referenced_generators+0x120>)
    64fe:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6500:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    6504:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6508:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    650a:	4611      	mov	r1, r2
    650c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6510:	684b      	ldr	r3, [r1, #4]
    6512:	4213      	tst	r3, r2
    6514:	d1fc      	bne.n	6510 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6516:	4a06      	ldr	r2, [pc, #24]	; (6530 <_oscctrl_init_referenced_generators+0x120>)
    6518:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    651a:	f013 0f04 	tst.w	r3, #4
    651e:	d1fb      	bne.n	6518 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    6520:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6522:	4a04      	ldr	r2, [pc, #16]	; (6534 <_oscctrl_init_referenced_generators+0x124>)
    6524:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6526:	f413 7f80 	tst.w	r3, #256	; 0x100
    652a:	d0fb      	beq.n	6524 <_oscctrl_init_referenced_generators+0x114>
    652c:	e7d9      	b.n	64e2 <_oscctrl_init_referenced_generators+0xd2>
    652e:	bf00      	nop
    6530:	40001c00 	.word	0x40001c00
    6534:	40001000 	.word	0x40001000
    6538:	04010000 	.word	0x04010000

0000653c <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    653c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    653e:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6540:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6542:	4903      	ldr	r1, [pc, #12]	; (6550 <_qspi_dma_rx_complete+0x14>)
    6544:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6546:	685b      	ldr	r3, [r3, #4]
    6548:	b103      	cbz	r3, 654c <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    654a:	4798      	blx	r3
    654c:	bd08      	pop	{r3, pc}
    654e:	bf00      	nop
    6550:	01000002 	.word	0x01000002

00006554 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    6554:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6556:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6558:	681a      	ldr	r2, [r3, #0]
    655a:	4903      	ldr	r1, [pc, #12]	; (6568 <_qspi_dma_tx_complete+0x14>)
    655c:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    655e:	685b      	ldr	r3, [r3, #4]
    6560:	b103      	cbz	r3, 6564 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    6562:	4798      	blx	r3
    6564:	bd08      	pop	{r3, pc}
    6566:	bf00      	nop
    6568:	01000002 	.word	0x01000002

0000656c <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    656c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    656e:	6883      	ldr	r3, [r0, #8]
    6570:	689b      	ldr	r3, [r3, #8]
    6572:	b103      	cbz	r3, 6576 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    6574:	4798      	blx	r3
    6576:	bd08      	pop	{r3, pc}

00006578 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    6578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    657a:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    657c:	4604      	mov	r4, r0
    657e:	2800      	cmp	r0, #0
    6580:	d027      	beq.n	65d2 <_qspi_dma_init+0x5a>
    6582:	1c08      	adds	r0, r1, #0
    6584:	bf18      	it	ne
    6586:	2001      	movne	r0, #1
    6588:	22cb      	movs	r2, #203	; 0xcb
    658a:	4913      	ldr	r1, [pc, #76]	; (65d8 <_qspi_dma_init+0x60>)
    658c:	4b13      	ldr	r3, [pc, #76]	; (65dc <_qspi_dma_init+0x64>)
    658e:	4798      	blx	r3
	dev->prvt = hw;
    6590:	4626      	mov	r6, r4
    6592:	f846 5b0c 	str.w	r5, [r6], #12
    6596:	2301      	movs	r3, #1
    6598:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    659a:	4b11      	ldr	r3, [pc, #68]	; (65e0 <_qspi_dma_init+0x68>)
    659c:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    659e:	4b11      	ldr	r3, [pc, #68]	; (65e4 <_qspi_dma_init+0x6c>)
    65a0:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    65a2:	211f      	movs	r1, #31
    65a4:	4630      	mov	r0, r6
    65a6:	4f10      	ldr	r7, [pc, #64]	; (65e8 <_qspi_dma_init+0x70>)
    65a8:	47b8      	blx	r7
	dev->resource->back                 = dev;
    65aa:	68e3      	ldr	r3, [r4, #12]
    65ac:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    65ae:	68e3      	ldr	r3, [r4, #12]
    65b0:	4a0e      	ldr	r2, [pc, #56]	; (65ec <_qspi_dma_init+0x74>)
    65b2:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    65b4:	68e3      	ldr	r3, [r4, #12]
    65b6:	4d0e      	ldr	r5, [pc, #56]	; (65f0 <_qspi_dma_init+0x78>)
    65b8:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    65ba:	211e      	movs	r1, #30
    65bc:	4630      	mov	r0, r6
    65be:	47b8      	blx	r7
	dev->resource->back                 = dev;
    65c0:	68e3      	ldr	r3, [r4, #12]
    65c2:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    65c4:	68e3      	ldr	r3, [r4, #12]
    65c6:	4a0b      	ldr	r2, [pc, #44]	; (65f4 <_qspi_dma_init+0x7c>)
    65c8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    65ca:	68e3      	ldr	r3, [r4, #12]
    65cc:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    65ce:	2000      	movs	r0, #0
    65d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65d2:	2000      	movs	r0, #0
    65d4:	e7d8      	b.n	6588 <_qspi_dma_init+0x10>
    65d6:	bf00      	nop
    65d8:	0000d0a8 	.word	0x0000d0a8
    65dc:	00005959 	.word	0x00005959
    65e0:	06000011 	.word	0x06000011
    65e4:	00243b00 	.word	0x00243b00
    65e8:	000061f5 	.word	0x000061f5
    65ec:	0000653d 	.word	0x0000653d
    65f0:	0000656d 	.word	0x0000656d
    65f4:	00006555 	.word	0x00006555

000065f8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    65f8:	b500      	push	{lr}
    65fa:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    65fc:	4b0d      	ldr	r3, [pc, #52]	; (6634 <RAMECC_Handler+0x3c>)
    65fe:	789b      	ldrb	r3, [r3, #2]
    6600:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    6602:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    6604:	9b01      	ldr	r3, [sp, #4]
    6606:	f013 0f02 	tst.w	r3, #2
    660a:	d006      	beq.n	661a <RAMECC_Handler+0x22>
    660c:	4b0a      	ldr	r3, [pc, #40]	; (6638 <RAMECC_Handler+0x40>)
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	b11b      	cbz	r3, 661a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    6612:	4a08      	ldr	r2, [pc, #32]	; (6634 <RAMECC_Handler+0x3c>)
    6614:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    6616:	4798      	blx	r3
    6618:	e009      	b.n	662e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    661a:	9b01      	ldr	r3, [sp, #4]
    661c:	f013 0f01 	tst.w	r3, #1
    6620:	d005      	beq.n	662e <RAMECC_Handler+0x36>
    6622:	4b05      	ldr	r3, [pc, #20]	; (6638 <RAMECC_Handler+0x40>)
    6624:	685b      	ldr	r3, [r3, #4]
    6626:	b113      	cbz	r3, 662e <RAMECC_Handler+0x36>
    6628:	4a02      	ldr	r2, [pc, #8]	; (6634 <RAMECC_Handler+0x3c>)
    662a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    662c:	4798      	blx	r3
	} else {
		return;
	}
}
    662e:	b003      	add	sp, #12
    6630:	f85d fb04 	ldr.w	pc, [sp], #4
    6634:	41020000 	.word	0x41020000
    6638:	20003d40 	.word	0x20003d40

0000663c <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    663c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    663e:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6640:	6913      	ldr	r3, [r2, #16]
    6642:	f013 0f60 	tst.w	r3, #96	; 0x60
    6646:	d1fb      	bne.n	6640 <_rtc_timer_set_period+0x4>
}
    6648:	4770      	bx	lr

0000664a <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    664a:	68c2      	ldr	r2, [r0, #12]
    664c:	6913      	ldr	r3, [r2, #16]
    664e:	f013 0f60 	tst.w	r3, #96	; 0x60
    6652:	d1fb      	bne.n	664c <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    6654:	6a10      	ldr	r0, [r2, #32]
}
    6656:	4770      	bx	lr

00006658 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    6658:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    665a:	f248 0103 	movw	r1, #32771	; 0x8003
    665e:	6913      	ldr	r3, [r2, #16]
    6660:	420b      	tst	r3, r1
    6662:	d1fc      	bne.n	665e <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6664:	8810      	ldrh	r0, [r2, #0]
}
    6666:	f3c0 0040 	ubfx	r0, r0, #1, #1
    666a:	4770      	bx	lr

0000666c <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    666c:	4770      	bx	lr
	...

00006670 <_rtc_timer_init>:
{
    6670:	b538      	push	{r3, r4, r5, lr}
    6672:	460c      	mov	r4, r1
	ASSERT(dev);
    6674:	4605      	mov	r5, r0
    6676:	2230      	movs	r2, #48	; 0x30
    6678:	4914      	ldr	r1, [pc, #80]	; (66cc <_rtc_timer_init+0x5c>)
    667a:	3000      	adds	r0, #0
    667c:	bf18      	it	ne
    667e:	2001      	movne	r0, #1
    6680:	4b13      	ldr	r3, [pc, #76]	; (66d0 <_rtc_timer_init+0x60>)
    6682:	4798      	blx	r3
	dev->hw = hw;
    6684:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6686:	2301      	movs	r3, #1
    6688:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    668a:	f248 0203 	movw	r2, #32771	; 0x8003
    668e:	6923      	ldr	r3, [r4, #16]
    6690:	4213      	tst	r3, r2
    6692:	d1fc      	bne.n	668e <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6694:	68eb      	ldr	r3, [r5, #12]
    6696:	691a      	ldr	r2, [r3, #16]
    6698:	f012 0f01 	tst.w	r2, #1
    669c:	d1fb      	bne.n	6696 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    669e:	f248 0280 	movw	r2, #32896	; 0x8080
    66a2:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    66a4:	f248 0103 	movw	r1, #32771	; 0x8003
    66a8:	691a      	ldr	r2, [r3, #16]
    66aa:	420a      	tst	r2, r1
    66ac:	d1fc      	bne.n	66a8 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    66ae:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    66b0:	2301      	movs	r3, #1
    66b2:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    66b4:	6913      	ldr	r3, [r2, #16]
    66b6:	f013 0f60 	tst.w	r3, #96	; 0x60
    66ba:	d1fb      	bne.n	66b4 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    66bc:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    66be:	f44f 7280 	mov.w	r2, #256	; 0x100
    66c2:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    66c4:	4b03      	ldr	r3, [pc, #12]	; (66d4 <_rtc_timer_init+0x64>)
    66c6:	601d      	str	r5, [r3, #0]
}
    66c8:	2000      	movs	r0, #0
    66ca:	bd38      	pop	{r3, r4, r5, pc}
    66cc:	0000d0c0 	.word	0x0000d0c0
    66d0:	00005959 	.word	0x00005959
    66d4:	2000097c 	.word	0x2000097c

000066d8 <_rtc_timer_deinit>:
{
    66d8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    66da:	4604      	mov	r4, r0
    66dc:	b1c8      	cbz	r0, 6712 <_rtc_timer_deinit+0x3a>
    66de:	68c0      	ldr	r0, [r0, #12]
    66e0:	3000      	adds	r0, #0
    66e2:	bf18      	it	ne
    66e4:	2001      	movne	r0, #1
    66e6:	2252      	movs	r2, #82	; 0x52
    66e8:	490b      	ldr	r1, [pc, #44]	; (6718 <_rtc_timer_deinit+0x40>)
    66ea:	4b0c      	ldr	r3, [pc, #48]	; (671c <_rtc_timer_deinit+0x44>)
    66ec:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
    66f2:	4b0b      	ldr	r3, [pc, #44]	; (6720 <_rtc_timer_deinit+0x48>)
    66f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    66f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    66fc:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    6700:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6702:	2301      	movs	r3, #1
    6704:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6706:	f248 0103 	movw	r1, #32771	; 0x8003
    670a:	6913      	ldr	r3, [r2, #16]
    670c:	420b      	tst	r3, r1
    670e:	d1fc      	bne.n	670a <_rtc_timer_deinit+0x32>
}
    6710:	bd10      	pop	{r4, pc}
    6712:	2000      	movs	r0, #0
    6714:	e7e7      	b.n	66e6 <_rtc_timer_deinit+0xe>
    6716:	bf00      	nop
    6718:	0000d0c0 	.word	0x0000d0c0
    671c:	00005959 	.word	0x00005959
    6720:	e000e100 	.word	0xe000e100

00006724 <_rtc_timer_start>:
{
    6724:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6726:	4604      	mov	r4, r0
    6728:	b310      	cbz	r0, 6770 <_rtc_timer_start+0x4c>
    672a:	68c0      	ldr	r0, [r0, #12]
    672c:	3000      	adds	r0, #0
    672e:	bf18      	it	ne
    6730:	2001      	movne	r0, #1
    6732:	225e      	movs	r2, #94	; 0x5e
    6734:	490f      	ldr	r1, [pc, #60]	; (6774 <_rtc_timer_start+0x50>)
    6736:	4b10      	ldr	r3, [pc, #64]	; (6778 <_rtc_timer_start+0x54>)
    6738:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    673a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    673e:	4b0f      	ldr	r3, [pc, #60]	; (677c <_rtc_timer_start+0x58>)
    6740:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    6742:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    6744:	2300      	movs	r3, #0
    6746:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6748:	6913      	ldr	r3, [r2, #16]
    674a:	f013 0f08 	tst.w	r3, #8
    674e:	d1fb      	bne.n	6748 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    6750:	68e3      	ldr	r3, [r4, #12]
    6752:	691a      	ldr	r2, [r3, #16]
    6754:	f012 0f08 	tst.w	r2, #8
    6758:	d1fb      	bne.n	6752 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    675a:	881a      	ldrh	r2, [r3, #0]
    675c:	b292      	uxth	r2, r2
    675e:	f042 0202 	orr.w	r2, r2, #2
    6762:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6764:	f248 0103 	movw	r1, #32771	; 0x8003
    6768:	691a      	ldr	r2, [r3, #16]
    676a:	420a      	tst	r2, r1
    676c:	d1fc      	bne.n	6768 <_rtc_timer_start+0x44>
}
    676e:	bd10      	pop	{r4, pc}
    6770:	2000      	movs	r0, #0
    6772:	e7de      	b.n	6732 <_rtc_timer_start+0xe>
    6774:	0000d0c0 	.word	0x0000d0c0
    6778:	00005959 	.word	0x00005959
    677c:	e000e100 	.word	0xe000e100

00006780 <_rtc_timer_stop>:
{
    6780:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6782:	4604      	mov	r4, r0
    6784:	b1a0      	cbz	r0, 67b0 <_rtc_timer_stop+0x30>
    6786:	68c0      	ldr	r0, [r0, #12]
    6788:	3000      	adds	r0, #0
    678a:	bf18      	it	ne
    678c:	2001      	movne	r0, #1
    678e:	226b      	movs	r2, #107	; 0x6b
    6790:	4908      	ldr	r1, [pc, #32]	; (67b4 <_rtc_timer_stop+0x34>)
    6792:	4b09      	ldr	r3, [pc, #36]	; (67b8 <_rtc_timer_stop+0x38>)
    6794:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6796:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6798:	8813      	ldrh	r3, [r2, #0]
    679a:	f023 0302 	bic.w	r3, r3, #2
    679e:	041b      	lsls	r3, r3, #16
    67a0:	0c1b      	lsrs	r3, r3, #16
    67a2:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    67a4:	f248 0103 	movw	r1, #32771	; 0x8003
    67a8:	6913      	ldr	r3, [r2, #16]
    67aa:	420b      	tst	r3, r1
    67ac:	d1fc      	bne.n	67a8 <_rtc_timer_stop+0x28>
}
    67ae:	bd10      	pop	{r4, pc}
    67b0:	2000      	movs	r0, #0
    67b2:	e7ec      	b.n	678e <_rtc_timer_stop+0xe>
    67b4:	0000d0c0 	.word	0x0000d0c0
    67b8:	00005959 	.word	0x00005959

000067bc <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    67bc:	4800      	ldr	r0, [pc, #0]	; (67c0 <_rtc_get_timer+0x4>)
    67be:	4770      	bx	lr
    67c0:	20000358 	.word	0x20000358

000067c4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    67c4:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    67c6:	4b08      	ldr	r3, [pc, #32]	; (67e8 <RTC_Handler+0x24>)
    67c8:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    67ca:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    67cc:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    67ce:	f413 7f80 	tst.w	r3, #256	; 0x100
    67d2:	d007      	beq.n	67e4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    67d4:	6823      	ldr	r3, [r4, #0]
    67d6:	b10b      	cbz	r3, 67dc <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    67d8:	4620      	mov	r0, r4
    67da:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    67dc:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    67de:	f44f 7280 	mov.w	r2, #256	; 0x100
    67e2:	819a      	strh	r2, [r3, #12]
    67e4:	bd10      	pop	{r4, pc}
    67e6:	bf00      	nop
    67e8:	2000097c 	.word	0x2000097c

000067ec <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    67ec:	b470      	push	{r4, r5, r6}
    67ee:	b089      	sub	sp, #36	; 0x24
    67f0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    67f2:	466c      	mov	r4, sp
    67f4:	4d0d      	ldr	r5, [pc, #52]	; (682c <_sercom_get_hardware_index+0x40>)
    67f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    67f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    67fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    67fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6802:	9b00      	ldr	r3, [sp, #0]
    6804:	42b3      	cmp	r3, r6
    6806:	d00d      	beq.n	6824 <_sercom_get_hardware_index+0x38>
    6808:	4631      	mov	r1, r6
    680a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    680c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    680e:	f853 2b04 	ldr.w	r2, [r3], #4
    6812:	428a      	cmp	r2, r1
    6814:	d007      	beq.n	6826 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6816:	3001      	adds	r0, #1
    6818:	2808      	cmp	r0, #8
    681a:	d1f8      	bne.n	680e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    681c:	2000      	movs	r0, #0
}
    681e:	b009      	add	sp, #36	; 0x24
    6820:	bc70      	pop	{r4, r5, r6}
    6822:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6824:	2000      	movs	r0, #0
			return i;
    6826:	b2c0      	uxtb	r0, r0
    6828:	e7f9      	b.n	681e <_sercom_get_hardware_index+0x32>
    682a:	bf00      	nop
    682c:	0000d0d8 	.word	0x0000d0d8

00006830 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    6830:	b510      	push	{r4, lr}
	void *hw = device->hw;
    6832:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6834:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6836:	f013 0f01 	tst.w	r3, #1
    683a:	d003      	beq.n	6844 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    683c:	7da3      	ldrb	r3, [r4, #22]
    683e:	f013 0f01 	tst.w	r3, #1
    6842:	d112      	bne.n	686a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6844:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    6846:	f013 0f02 	tst.w	r3, #2
    684a:	d003      	beq.n	6854 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    684c:	7da3      	ldrb	r3, [r4, #22]
    684e:	f013 0f02 	tst.w	r3, #2
    6852:	d10f      	bne.n	6874 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6854:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    6856:	f013 0f04 	tst.w	r3, #4
    685a:	d015      	beq.n	6888 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    685c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    685e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6862:	b163      	cbz	r3, 687e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6864:	23ff      	movs	r3, #255	; 0xff
    6866:	8363      	strh	r3, [r4, #26]
    6868:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    686a:	2301      	movs	r3, #1
    686c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    686e:	6803      	ldr	r3, [r0, #0]
    6870:	4798      	blx	r3
    6872:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6874:	2302      	movs	r3, #2
    6876:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    6878:	6883      	ldr	r3, [r0, #8]
    687a:	4798      	blx	r3
    687c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    687e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    6880:	6843      	ldr	r3, [r0, #4]
    6882:	b2c9      	uxtb	r1, r1
    6884:	4798      	blx	r3
    6886:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    6888:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    688a:	09db      	lsrs	r3, r3, #7
    688c:	d100      	bne.n	6890 <_sercom_usart_interrupt_handler+0x60>
    688e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    6890:	2380      	movs	r3, #128	; 0x80
    6892:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    6894:	68c3      	ldr	r3, [r0, #12]
    6896:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    6898:	8b63      	ldrh	r3, [r4, #26]
    689a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    689c:	8363      	strh	r3, [r4, #26]
    689e:	e7f6      	b.n	688e <_sercom_usart_interrupt_handler+0x5e>

000068a0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    68a0:	4b11      	ldr	r3, [pc, #68]	; (68e8 <_sercom_init_irq_param+0x48>)
    68a2:	4298      	cmp	r0, r3
    68a4:	d011      	beq.n	68ca <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    68a6:	4b11      	ldr	r3, [pc, #68]	; (68ec <_sercom_init_irq_param+0x4c>)
    68a8:	4298      	cmp	r0, r3
    68aa:	d011      	beq.n	68d0 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    68ac:	4b10      	ldr	r3, [pc, #64]	; (68f0 <_sercom_init_irq_param+0x50>)
    68ae:	4298      	cmp	r0, r3
    68b0:	d011      	beq.n	68d6 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    68b2:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    68b6:	d011      	beq.n	68dc <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    68b8:	4b0e      	ldr	r3, [pc, #56]	; (68f4 <_sercom_init_irq_param+0x54>)
    68ba:	4298      	cmp	r0, r3
    68bc:	d011      	beq.n	68e2 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    68be:	4b0e      	ldr	r3, [pc, #56]	; (68f8 <_sercom_init_irq_param+0x58>)
    68c0:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    68c2:	bf04      	itt	eq
    68c4:	4b0d      	ldreq	r3, [pc, #52]	; (68fc <_sercom_init_irq_param+0x5c>)
    68c6:	6159      	streq	r1, [r3, #20]
    68c8:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    68ca:	4b0c      	ldr	r3, [pc, #48]	; (68fc <_sercom_init_irq_param+0x5c>)
    68cc:	6019      	str	r1, [r3, #0]
    68ce:	e7f0      	b.n	68b2 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    68d0:	4b0a      	ldr	r3, [pc, #40]	; (68fc <_sercom_init_irq_param+0x5c>)
    68d2:	6059      	str	r1, [r3, #4]
    68d4:	e7f0      	b.n	68b8 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    68d6:	4b09      	ldr	r3, [pc, #36]	; (68fc <_sercom_init_irq_param+0x5c>)
    68d8:	6099      	str	r1, [r3, #8]
    68da:	e7f0      	b.n	68be <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    68dc:	4b07      	ldr	r3, [pc, #28]	; (68fc <_sercom_init_irq_param+0x5c>)
    68de:	60d9      	str	r1, [r3, #12]
    68e0:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    68e2:	4b06      	ldr	r3, [pc, #24]	; (68fc <_sercom_init_irq_param+0x5c>)
    68e4:	6119      	str	r1, [r3, #16]
    68e6:	4770      	bx	lr
    68e8:	40003000 	.word	0x40003000
    68ec:	40003400 	.word	0x40003400
    68f0:	41014000 	.word	0x41014000
    68f4:	43000400 	.word	0x43000400
    68f8:	43000800 	.word	0x43000800
    68fc:	20000980 	.word	0x20000980

00006900 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6900:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6902:	4b03      	ldr	r3, [pc, #12]	; (6910 <_sercom_get_irq_num+0x10>)
    6904:	4798      	blx	r3
    6906:	0080      	lsls	r0, r0, #2
    6908:	302e      	adds	r0, #46	; 0x2e
}
    690a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    690e:	bd08      	pop	{r3, pc}
    6910:	000067ed 	.word	0x000067ed

00006914 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6914:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6916:	f013 0f01 	tst.w	r3, #1
    691a:	d109      	bne.n	6930 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    691c:	6803      	ldr	r3, [r0, #0]
    691e:	f043 0302 	orr.w	r3, r3, #2
    6922:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6924:	69c3      	ldr	r3, [r0, #28]
    6926:	f013 0f03 	tst.w	r3, #3
    692a:	d1fb      	bne.n	6924 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    692c:	2000      	movs	r0, #0
    692e:	4770      	bx	lr
		return ERR_BUSY;
    6930:	f06f 0003 	mvn.w	r0, #3
}
    6934:	4770      	bx	lr
	...

00006938 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6938:	b538      	push	{r3, r4, r5, lr}
    693a:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    693c:	4b0b      	ldr	r3, [pc, #44]	; (696c <_spi_async_enable+0x34>)
    693e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6940:	4620      	mov	r0, r4
    6942:	4b0b      	ldr	r3, [pc, #44]	; (6970 <_spi_async_enable+0x38>)
    6944:	4798      	blx	r3
    6946:	1d01      	adds	r1, r0, #4
    6948:	b2c9      	uxtb	r1, r1
    694a:	2501      	movs	r5, #1
    694c:	4c09      	ldr	r4, [pc, #36]	; (6974 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    694e:	1c43      	adds	r3, r0, #1
    6950:	b2db      	uxtb	r3, r3
    6952:	0942      	lsrs	r2, r0, #5
    6954:	f000 001f 	and.w	r0, r0, #31
    6958:	fa05 f000 	lsl.w	r0, r5, r0
    695c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    6960:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    6962:	4299      	cmp	r1, r3
    6964:	d1f3      	bne.n	694e <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    6966:	2000      	movs	r0, #0
    6968:	bd38      	pop	{r3, r4, r5, pc}
    696a:	bf00      	nop
    696c:	00006915 	.word	0x00006915
    6970:	00006901 	.word	0x00006901
    6974:	e000e100 	.word	0xe000e100

00006978 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6978:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    697a:	f013 0f03 	tst.w	r3, #3
    697e:	d111      	bne.n	69a4 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6980:	69c3      	ldr	r3, [r0, #28]
    6982:	f013 0f03 	tst.w	r3, #3
    6986:	d1fb      	bne.n	6980 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    6988:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    698a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    698e:	0709      	lsls	r1, r1, #28
    6990:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    6994:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6996:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6998:	69c3      	ldr	r3, [r0, #28]
    699a:	f013 0f03 	tst.w	r3, #3
    699e:	d1fb      	bne.n	6998 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    69a0:	2000      	movs	r0, #0
    69a2:	4770      	bx	lr
		return ERR_BUSY;
    69a4:	f06f 0003 	mvn.w	r0, #3
}
    69a8:	4770      	bx	lr

000069aa <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    69aa:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    69ac:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    69ae:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    69b0:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    69b2:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    69b4:	f013 0f01 	tst.w	r3, #1
    69b8:	d109      	bne.n	69ce <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    69ba:	f013 0f04 	tst.w	r3, #4
    69be:	d109      	bne.n	69d4 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    69c0:	f013 0f02 	tst.w	r3, #2
    69c4:	d109      	bne.n	69da <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    69c6:	f013 0f80 	tst.w	r3, #128	; 0x80
    69ca:	d10b      	bne.n	69e4 <_spi_handler+0x3a>
    69cc:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    69ce:	6883      	ldr	r3, [r0, #8]
    69d0:	4798      	blx	r3
    69d2:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    69d4:	68c3      	ldr	r3, [r0, #12]
    69d6:	4798      	blx	r3
    69d8:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    69da:	2302      	movs	r3, #2
    69dc:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    69de:	6903      	ldr	r3, [r0, #16]
    69e0:	4798      	blx	r3
    69e2:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    69e4:	2304      	movs	r3, #4
    69e6:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    69e8:	2380      	movs	r3, #128	; 0x80
    69ea:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    69ec:	6943      	ldr	r3, [r0, #20]
    69ee:	f06f 0112 	mvn.w	r1, #18
    69f2:	4798      	blx	r3
	}
}
    69f4:	e7ea      	b.n	69cc <_spi_handler+0x22>
	...

000069f8 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    69f8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    69fa:	4b03      	ldr	r3, [pc, #12]	; (6a08 <_spi_get_tx_dma_channel+0x10>)
    69fc:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    69fe:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6a00:	bf0c      	ite	eq
    6a02:	2008      	moveq	r0, #8
    6a04:	2000      	movne	r0, #0
    6a06:	bd08      	pop	{r3, pc}
    6a08:	000067ed 	.word	0x000067ed

00006a0c <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6a0c:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6a0e:	4b03      	ldr	r3, [pc, #12]	; (6a1c <_spi_get_rx_dma_channel+0x10>)
    6a10:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6a12:	2807      	cmp	r0, #7
    6a14:	bf8c      	ite	hi
    6a16:	2000      	movhi	r0, #0
    6a18:	2001      	movls	r0, #1
    6a1a:	bd08      	pop	{r3, pc}
    6a1c:	000067ed 	.word	0x000067ed

00006a20 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    6a20:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    6a22:	6883      	ldr	r3, [r0, #8]
    6a24:	689b      	ldr	r3, [r3, #8]
    6a26:	b103      	cbz	r3, 6a2a <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    6a28:	4798      	blx	r3
    6a2a:	bd08      	pop	{r3, pc}

00006a2c <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6a2c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    6a2e:	6883      	ldr	r3, [r0, #8]
    6a30:	685b      	ldr	r3, [r3, #4]
    6a32:	b103      	cbz	r3, 6a36 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6a34:	4798      	blx	r3
    6a36:	bd08      	pop	{r3, pc}

00006a38 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    6a38:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    6a3a:	6883      	ldr	r3, [r0, #8]
    6a3c:	68db      	ldr	r3, [r3, #12]
    6a3e:	b103      	cbz	r3, 6a42 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    6a40:	4798      	blx	r3
    6a42:	bd08      	pop	{r3, pc}

00006a44 <_usart_init>:
{
    6a44:	b510      	push	{r4, lr}
    6a46:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6a48:	4b48      	ldr	r3, [pc, #288]	; (6b6c <_usart_init+0x128>)
    6a4a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6a4c:	2800      	cmp	r0, #0
    6a4e:	d06a      	beq.n	6b26 <_usart_init+0xe2>
    6a50:	2801      	cmp	r0, #1
    6a52:	d062      	beq.n	6b1a <_usart_init+0xd6>
    6a54:	2802      	cmp	r0, #2
    6a56:	d062      	beq.n	6b1e <_usart_init+0xda>
    6a58:	2804      	cmp	r0, #4
    6a5a:	d062      	beq.n	6b22 <_usart_init+0xde>
    6a5c:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6a5e:	bf08      	it	eq
    6a60:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    6a62:	d006      	beq.n	6a72 <_usart_init+0x2e>
	ASSERT(false);
    6a64:	f240 2276 	movw	r2, #630	; 0x276
    6a68:	4941      	ldr	r1, [pc, #260]	; (6b70 <_usart_init+0x12c>)
    6a6a:	2000      	movs	r0, #0
    6a6c:	4b41      	ldr	r3, [pc, #260]	; (6b74 <_usart_init+0x130>)
    6a6e:	4798      	blx	r3
	return 0;
    6a70:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    6a72:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    6a74:	f013 0f01 	tst.w	r3, #1
    6a78:	d122      	bne.n	6ac0 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    6a7a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    6a7e:	4a3e      	ldr	r2, [pc, #248]	; (6b78 <_usart_init+0x134>)
    6a80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6a86:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6a8a:	69e3      	ldr	r3, [r4, #28]
    6a8c:	f013 0f03 	tst.w	r3, #3
    6a90:	d1fb      	bne.n	6a8a <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    6a92:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    6a94:	f013 0f02 	tst.w	r3, #2
    6a98:	d00b      	beq.n	6ab2 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6a9a:	6823      	ldr	r3, [r4, #0]
    6a9c:	f023 0302 	bic.w	r3, r3, #2
    6aa0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6aa2:	69e3      	ldr	r3, [r4, #28]
    6aa4:	f013 0f03 	tst.w	r3, #3
    6aa8:	d1fb      	bne.n	6aa2 <_usart_init+0x5e>
    6aaa:	69e3      	ldr	r3, [r4, #28]
    6aac:	f013 0f02 	tst.w	r3, #2
    6ab0:	d1fb      	bne.n	6aaa <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    6ab2:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6ab6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6ab8:	69e3      	ldr	r3, [r4, #28]
    6aba:	f013 0f03 	tst.w	r3, #3
    6abe:	d1fb      	bne.n	6ab8 <_usart_init+0x74>
    6ac0:	69e3      	ldr	r3, [r4, #28]
    6ac2:	f013 0f01 	tst.w	r3, #1
    6ac6:	d1fb      	bne.n	6ac0 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    6ac8:	460a      	mov	r2, r1
    6aca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6ace:	4b2a      	ldr	r3, [pc, #168]	; (6b78 <_usart_init+0x134>)
    6ad0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6ad4:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6ad6:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6ad8:	69e3      	ldr	r3, [r4, #28]
    6ada:	f013 0f03 	tst.w	r3, #3
    6ade:	d1fb      	bne.n	6ad8 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    6ae0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6ae4:	4924      	ldr	r1, [pc, #144]	; (6b78 <_usart_init+0x134>)
    6ae6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6aec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6aee:	69e3      	ldr	r3, [r4, #28]
    6af0:	f013 0f1f 	tst.w	r3, #31
    6af4:	d1fb      	bne.n	6aee <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    6af6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6afa:	491f      	ldr	r1, [pc, #124]	; (6b78 <_usart_init+0x134>)
    6afc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    6b02:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6b04:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    6b08:	d10f      	bne.n	6b2a <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    6b0a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6b0e:	491a      	ldr	r1, [pc, #104]	; (6b78 <_usart_init+0x134>)
    6b10:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6b14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    6b16:	81a3      	strh	r3, [r4, #12]
    6b18:	e016      	b.n	6b48 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6b1a:	2101      	movs	r1, #1
    6b1c:	e7a9      	b.n	6a72 <_usart_init+0x2e>
    6b1e:	2102      	movs	r1, #2
    6b20:	e7a7      	b.n	6a72 <_usart_init+0x2e>
    6b22:	2103      	movs	r1, #3
    6b24:	e7a5      	b.n	6a72 <_usart_init+0x2e>
    6b26:	2100      	movs	r1, #0
    6b28:	e7a3      	b.n	6a72 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    6b2a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6b2e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6b32:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6b34:	89a1      	ldrh	r1, [r4, #12]
    6b36:	f360 010c 	bfi	r1, r0, #0, #13
    6b3a:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6b3c:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    6b40:	89a3      	ldrh	r3, [r4, #12]
    6b42:	f361 334f 	bfi	r3, r1, #13, #3
    6b46:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    6b48:	4b0b      	ldr	r3, [pc, #44]	; (6b78 <_usart_init+0x134>)
    6b4a:	0051      	lsls	r1, r2, #1
    6b4c:	1888      	adds	r0, r1, r2
    6b4e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6b52:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    6b56:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    6b58:	440a      	add	r2, r1
    6b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    6b62:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    6b66:	2000      	movs	r0, #0
    6b68:	bd10      	pop	{r4, pc}
    6b6a:	bf00      	nop
    6b6c:	000067ed 	.word	0x000067ed
    6b70:	0000d1ac 	.word	0x0000d1ac
    6b74:	00005959 	.word	0x00005959
    6b78:	0000d0d8 	.word	0x0000d0d8

00006b7c <_get_i2cm_index>:
{
    6b7c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6b7e:	4b07      	ldr	r3, [pc, #28]	; (6b9c <_get_i2cm_index+0x20>)
    6b80:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    6b82:	2805      	cmp	r0, #5
    6b84:	d008      	beq.n	6b98 <_get_i2cm_index+0x1c>
	ASSERT(false);
    6b86:	f240 32ed 	movw	r2, #1005	; 0x3ed
    6b8a:	4905      	ldr	r1, [pc, #20]	; (6ba0 <_get_i2cm_index+0x24>)
    6b8c:	2000      	movs	r0, #0
    6b8e:	4b05      	ldr	r3, [pc, #20]	; (6ba4 <_get_i2cm_index+0x28>)
    6b90:	4798      	blx	r3
	return -1;
    6b92:	f04f 30ff 	mov.w	r0, #4294967295
}
    6b96:	bd08      	pop	{r3, pc}
			return i;
    6b98:	2000      	movs	r0, #0
    6b9a:	bd08      	pop	{r3, pc}
    6b9c:	000067ed 	.word	0x000067ed
    6ba0:	0000d1ac 	.word	0x0000d1ac
    6ba4:	00005959 	.word	0x00005959

00006ba8 <_i2c_m_sync_init_impl>:
{
    6ba8:	b538      	push	{r3, r4, r5, lr}
    6baa:	4605      	mov	r5, r0
    6bac:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    6bae:	4608      	mov	r0, r1
    6bb0:	4b34      	ldr	r3, [pc, #208]	; (6c84 <_i2c_m_sync_init_impl+0xdc>)
    6bb2:	4798      	blx	r3
    6bb4:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6bb6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6bb8:	f013 0f01 	tst.w	r3, #1
    6bbc:	d123      	bne.n	6c06 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6bbe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6bc2:	4a31      	ldr	r2, [pc, #196]	; (6c88 <_i2c_m_sync_init_impl+0xe0>)
    6bc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6bc8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6bcc:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6bd0:	69e3      	ldr	r3, [r4, #28]
    6bd2:	f013 0f03 	tst.w	r3, #3
    6bd6:	d1fb      	bne.n	6bd0 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6bd8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6bda:	f013 0f02 	tst.w	r3, #2
    6bde:	d00b      	beq.n	6bf8 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6be0:	6823      	ldr	r3, [r4, #0]
    6be2:	f023 0302 	bic.w	r3, r3, #2
    6be6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6be8:	69e3      	ldr	r3, [r4, #28]
    6bea:	f013 0f03 	tst.w	r3, #3
    6bee:	d1fb      	bne.n	6be8 <_i2c_m_sync_init_impl+0x40>
    6bf0:	69e3      	ldr	r3, [r4, #28]
    6bf2:	f013 0f02 	tst.w	r3, #2
    6bf6:	d1fb      	bne.n	6bf0 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6bf8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6bfc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6bfe:	69e3      	ldr	r3, [r4, #28]
    6c00:	f013 0f03 	tst.w	r3, #3
    6c04:	d1fb      	bne.n	6bfe <_i2c_m_sync_init_impl+0x56>
    6c06:	69e3      	ldr	r3, [r4, #28]
    6c08:	f013 0f01 	tst.w	r3, #1
    6c0c:	d1fb      	bne.n	6c06 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6c0e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6c12:	4a1d      	ldr	r2, [pc, #116]	; (6c88 <_i2c_m_sync_init_impl+0xe0>)
    6c14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6c18:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6c1c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c1e:	69e3      	ldr	r3, [r4, #28]
    6c20:	f013 0f03 	tst.w	r3, #3
    6c24:	d1fb      	bne.n	6c1e <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6c26:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6c2a:	4917      	ldr	r1, [pc, #92]	; (6c88 <_i2c_m_sync_init_impl+0xe0>)
    6c2c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6c30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6c34:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c36:	69e3      	ldr	r3, [r4, #28]
    6c38:	f013 0f04 	tst.w	r3, #4
    6c3c:	d1fb      	bne.n	6c36 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6c3e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6c42:	4911      	ldr	r1, [pc, #68]	; (6c88 <_i2c_m_sync_init_impl+0xe0>)
    6c44:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6c4c:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6c4e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    6c52:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6c54:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6c56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6c5a:	2b01      	cmp	r3, #1
    6c5c:	bf94      	ite	ls
    6c5e:	2300      	movls	r3, #0
    6c60:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6c62:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6c66:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6c68:	69e3      	ldr	r3, [r4, #28]
    6c6a:	f013 0f04 	tst.w	r3, #4
    6c6e:	d1fb      	bne.n	6c68 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    6c70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6c74:	4b04      	ldr	r3, [pc, #16]	; (6c88 <_i2c_m_sync_init_impl+0xe0>)
    6c76:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6c7a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    6c7e:	81eb      	strh	r3, [r5, #14]
}
    6c80:	2000      	movs	r0, #0
    6c82:	bd38      	pop	{r3, r4, r5, pc}
    6c84:	00006b7d 	.word	0x00006b7d
    6c88:	0000d0d8 	.word	0x0000d0d8

00006c8c <_sercom_i2c_m_irq_handler>:
{
    6c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c90:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    6c92:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6c94:	7e26      	ldrb	r6, [r4, #24]
    6c96:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    6c98:	f8df 8234 	ldr.w	r8, [pc, #564]	; 6ed0 <_sercom_i2c_m_irq_handler+0x244>
    6c9c:	f240 425f 	movw	r2, #1119	; 0x45f
    6ca0:	4641      	mov	r1, r8
    6ca2:	3000      	adds	r0, #0
    6ca4:	bf18      	it	ne
    6ca6:	2001      	movne	r0, #1
    6ca8:	4f88      	ldr	r7, [pc, #544]	; (6ecc <_sercom_i2c_m_irq_handler+0x240>)
    6caa:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    6cac:	6928      	ldr	r0, [r5, #16]
    6cae:	f44f 628c 	mov.w	r2, #1120	; 0x460
    6cb2:	4641      	mov	r1, r8
    6cb4:	3000      	adds	r0, #0
    6cb6:	bf18      	it	ne
    6cb8:	2001      	movne	r0, #1
    6cba:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    6cbc:	f016 0f80 	tst.w	r6, #128	; 0x80
    6cc0:	f040 80f4 	bne.w	6eac <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6cc4:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6cc6:	69e3      	ldr	r3, [r4, #28]
    6cc8:	f013 0f04 	tst.w	r3, #4
    6ccc:	d1fb      	bne.n	6cc6 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6cce:	8b63      	ldrh	r3, [r4, #26]
    6cd0:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    6cd2:	f016 0f01 	tst.w	r6, #1
    6cd6:	f000 8090 	beq.w	6dfa <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6cda:	f013 0f02 	tst.w	r3, #2
    6cde:	d022      	beq.n	6d26 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6ce0:	2201      	movs	r2, #1
    6ce2:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6ce4:	886a      	ldrh	r2, [r5, #2]
    6ce6:	b292      	uxth	r2, r2
    6ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6cec:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    6cee:	886a      	ldrh	r2, [r5, #2]
    6cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6cf4:	0412      	lsls	r2, r2, #16
    6cf6:	0c12      	lsrs	r2, r2, #16
    6cf8:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6cfa:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    6cfe:	2b00      	cmp	r3, #0
    6d00:	bf14      	ite	ne
    6d02:	f06f 0104 	mvnne.w	r1, #4
    6d06:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6d0a:	886b      	ldrh	r3, [r5, #2]
    6d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d10:	041b      	lsls	r3, r3, #16
    6d12:	0c1b      	lsrs	r3, r3, #16
    6d14:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6d16:	696b      	ldr	r3, [r5, #20]
    6d18:	2b00      	cmp	r3, #0
    6d1a:	f000 80c5 	beq.w	6ea8 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    6d1e:	4628      	mov	r0, r5
    6d20:	4798      	blx	r3
    6d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6d26:	f013 0f04 	tst.w	r3, #4
    6d2a:	d124      	bne.n	6d76 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6d2c:	886b      	ldrh	r3, [r5, #2]
    6d2e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6d32:	d03e      	beq.n	6db2 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6d34:	882b      	ldrh	r3, [r5, #0]
    6d36:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d38:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d3c:	69e3      	ldr	r3, [r4, #28]
    6d3e:	f013 0f04 	tst.w	r3, #4
    6d42:	d1fb      	bne.n	6d3c <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    6d4a:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6d4e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6d50:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d52:	69e3      	ldr	r3, [r4, #28]
    6d54:	f013 0f04 	tst.w	r3, #4
    6d58:	d1fb      	bne.n	6d52 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    6d5a:	886b      	ldrh	r3, [r5, #2]
    6d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6d60:	041b      	lsls	r3, r3, #16
    6d62:	0c1b      	lsrs	r3, r3, #16
    6d64:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6d66:	69ab      	ldr	r3, [r5, #24]
    6d68:	2b00      	cmp	r3, #0
    6d6a:	f000 8088 	beq.w	6e7e <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    6d6e:	4628      	mov	r0, r5
    6d70:	4798      	blx	r3
    6d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    6d76:	686b      	ldr	r3, [r5, #4]
    6d78:	2b00      	cmp	r3, #0
    6d7a:	dd04      	ble.n	6d86 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    6d7c:	886b      	ldrh	r3, [r5, #2]
    6d7e:	b29b      	uxth	r3, r3
    6d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d84:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    6d86:	886b      	ldrh	r3, [r5, #2]
    6d88:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6d8c:	d108      	bne.n	6da0 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    6d8e:	886b      	ldrh	r3, [r5, #2]
    6d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d94:	041b      	lsls	r3, r3, #16
    6d96:	0c1b      	lsrs	r3, r3, #16
    6d98:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    6d9a:	f06f 0101 	mvn.w	r1, #1
    6d9e:	e7b4      	b.n	6d0a <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6da0:	6863      	ldr	r3, [r4, #4]
    6da2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6da6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6da8:	69e3      	ldr	r3, [r4, #28]
    6daa:	f013 0f04 	tst.w	r3, #4
    6dae:	d1fb      	bne.n	6da8 <_sercom_i2c_m_irq_handler+0x11c>
    6db0:	e7ed      	b.n	6d8e <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    6db2:	686b      	ldr	r3, [r5, #4]
    6db4:	b99b      	cbnz	r3, 6dde <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    6db6:	886b      	ldrh	r3, [r5, #2]
    6db8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6dbc:	d106      	bne.n	6dcc <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    6dbe:	886b      	ldrh	r3, [r5, #2]
    6dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6dc4:	041b      	lsls	r3, r3, #16
    6dc6:	0c1b      	lsrs	r3, r3, #16
    6dc8:	806b      	strh	r3, [r5, #2]
    6dca:	e7cc      	b.n	6d66 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6dcc:	6863      	ldr	r3, [r4, #4]
    6dce:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6dd2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6dd4:	69e3      	ldr	r3, [r4, #28]
    6dd6:	f013 0f04 	tst.w	r3, #4
    6dda:	d1fb      	bne.n	6dd4 <_sercom_i2c_m_irq_handler+0x148>
    6ddc:	e7ef      	b.n	6dbe <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6dde:	68ab      	ldr	r3, [r5, #8]
    6de0:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6de2:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6de4:	69e3      	ldr	r3, [r4, #28]
    6de6:	f013 0f04 	tst.w	r3, #4
    6dea:	d1fb      	bne.n	6de4 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6dec:	68ab      	ldr	r3, [r5, #8]
    6dee:	3301      	adds	r3, #1
    6df0:	60ab      	str	r3, [r5, #8]
				msg->len--;
    6df2:	686b      	ldr	r3, [r5, #4]
    6df4:	3b01      	subs	r3, #1
    6df6:	606b      	str	r3, [r5, #4]
    6df8:	e7b5      	b.n	6d66 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    6dfa:	f016 0f02 	tst.w	r6, #2
    6dfe:	d041      	beq.n	6e84 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6e00:	686a      	ldr	r2, [r5, #4]
    6e02:	2a00      	cmp	r2, #0
    6e04:	d036      	beq.n	6e74 <_sercom_i2c_m_irq_handler+0x1e8>
    6e06:	f013 0f04 	tst.w	r3, #4
    6e0a:	d133      	bne.n	6e74 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6e0c:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    6e10:	3a01      	subs	r2, #1
    6e12:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6e14:	2a00      	cmp	r2, #0
    6e16:	d137      	bne.n	6e88 <_sercom_i2c_m_irq_handler+0x1fc>
    6e18:	2900      	cmp	r1, #0
    6e1a:	d039      	beq.n	6e90 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    6e1c:	886b      	ldrh	r3, [r5, #2]
    6e1e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6e22:	d116      	bne.n	6e52 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    6e24:	886b      	ldrh	r3, [r5, #2]
    6e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e2a:	041b      	lsls	r3, r3, #16
    6e2c:	0c1b      	lsrs	r3, r3, #16
    6e2e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6e30:	68aa      	ldr	r2, [r5, #8]
    6e32:	1c53      	adds	r3, r2, #1
    6e34:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e36:	69e3      	ldr	r3, [r4, #28]
    6e38:	f013 0f04 	tst.w	r3, #4
    6e3c:	d1fb      	bne.n	6e36 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6e40:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6e42:	2302      	movs	r3, #2
    6e44:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6e46:	69eb      	ldr	r3, [r5, #28]
    6e48:	b1e3      	cbz	r3, 6e84 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6e4a:	4628      	mov	r0, r5
    6e4c:	4798      	blx	r3
    6e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6e52:	6863      	ldr	r3, [r4, #4]
    6e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e58:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e5a:	69e3      	ldr	r3, [r4, #28]
    6e5c:	f013 0f04 	tst.w	r3, #4
    6e60:	d1fb      	bne.n	6e5a <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6e62:	6863      	ldr	r3, [r4, #4]
    6e64:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6e68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e6a:	69e3      	ldr	r3, [r4, #28]
    6e6c:	f013 0f04 	tst.w	r3, #4
    6e70:	d1fb      	bne.n	6e6a <_sercom_i2c_m_irq_handler+0x1de>
    6e72:	e7d7      	b.n	6e24 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6e74:	2302      	movs	r3, #2
    6e76:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    6e78:	f06f 0101 	mvn.w	r1, #1
    6e7c:	e745      	b.n	6d0a <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6e7e:	f016 0f02 	tst.w	r6, #2
    6e82:	d1e0      	bne.n	6e46 <_sercom_i2c_m_irq_handler+0x1ba>
    6e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6e88:	2a01      	cmp	r2, #1
    6e8a:	d1d1      	bne.n	6e30 <_sercom_i2c_m_irq_handler+0x1a4>
    6e8c:	2900      	cmp	r1, #0
    6e8e:	d0cf      	beq.n	6e30 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6e90:	6863      	ldr	r3, [r4, #4]
    6e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    6e96:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e98:	69e3      	ldr	r3, [r4, #28]
    6e9a:	f013 0f04 	tst.w	r3, #4
    6e9e:	d1fb      	bne.n	6e98 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    6ea0:	686b      	ldr	r3, [r5, #4]
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	d0ba      	beq.n	6e1c <_sercom_i2c_m_irq_handler+0x190>
    6ea6:	e7c3      	b.n	6e30 <_sercom_i2c_m_irq_handler+0x1a4>
    6ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6eac:	886b      	ldrh	r3, [r5, #2]
    6eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6eb2:	041b      	lsls	r3, r3, #16
    6eb4:	0c1b      	lsrs	r3, r3, #16
    6eb6:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6eb8:	696b      	ldr	r3, [r5, #20]
    6eba:	2b00      	cmp	r3, #0
    6ebc:	d0e2      	beq.n	6e84 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6ebe:	f06f 0104 	mvn.w	r1, #4
    6ec2:	4628      	mov	r0, r5
    6ec4:	4798      	blx	r3
    6ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6eca:	bf00      	nop
    6ecc:	00005959 	.word	0x00005959
    6ed0:	0000d1ac 	.word	0x0000d1ac

00006ed4 <_usart_sync_init>:
{
    6ed4:	b538      	push	{r3, r4, r5, lr}
    6ed6:	460c      	mov	r4, r1
	ASSERT(device);
    6ed8:	4605      	mov	r5, r0
    6eda:	22c8      	movs	r2, #200	; 0xc8
    6edc:	4905      	ldr	r1, [pc, #20]	; (6ef4 <_usart_sync_init+0x20>)
    6ede:	3000      	adds	r0, #0
    6ee0:	bf18      	it	ne
    6ee2:	2001      	movne	r0, #1
    6ee4:	4b04      	ldr	r3, [pc, #16]	; (6ef8 <_usart_sync_init+0x24>)
    6ee6:	4798      	blx	r3
	device->hw = hw;
    6ee8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    6eea:	4620      	mov	r0, r4
    6eec:	4b03      	ldr	r3, [pc, #12]	; (6efc <_usart_sync_init+0x28>)
    6eee:	4798      	blx	r3
}
    6ef0:	bd38      	pop	{r3, r4, r5, pc}
    6ef2:	bf00      	nop
    6ef4:	0000d1ac 	.word	0x0000d1ac
    6ef8:	00005959 	.word	0x00005959
    6efc:	00006a45 	.word	0x00006a45

00006f00 <_usart_async_init>:
{
    6f00:	b570      	push	{r4, r5, r6, lr}
    6f02:	460d      	mov	r5, r1
	ASSERT(device);
    6f04:	4606      	mov	r6, r0
    6f06:	22d6      	movs	r2, #214	; 0xd6
    6f08:	4917      	ldr	r1, [pc, #92]	; (6f68 <_usart_async_init+0x68>)
    6f0a:	3000      	adds	r0, #0
    6f0c:	bf18      	it	ne
    6f0e:	2001      	movne	r0, #1
    6f10:	4b16      	ldr	r3, [pc, #88]	; (6f6c <_usart_async_init+0x6c>)
    6f12:	4798      	blx	r3
	init_status = _usart_init(hw);
    6f14:	4628      	mov	r0, r5
    6f16:	4b16      	ldr	r3, [pc, #88]	; (6f70 <_usart_async_init+0x70>)
    6f18:	4798      	blx	r3
	if (init_status) {
    6f1a:	4604      	mov	r4, r0
    6f1c:	b108      	cbz	r0, 6f22 <_usart_async_init+0x22>
}
    6f1e:	4620      	mov	r0, r4
    6f20:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    6f22:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    6f24:	4631      	mov	r1, r6
    6f26:	4628      	mov	r0, r5
    6f28:	4b12      	ldr	r3, [pc, #72]	; (6f74 <_usart_async_init+0x74>)
    6f2a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6f2c:	4628      	mov	r0, r5
    6f2e:	4b12      	ldr	r3, [pc, #72]	; (6f78 <_usart_async_init+0x78>)
    6f30:	4798      	blx	r3
    6f32:	1d01      	adds	r1, r0, #4
    6f34:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f36:	2501      	movs	r5, #1
    6f38:	f000 021f 	and.w	r2, r0, #31
    6f3c:	fa05 f202 	lsl.w	r2, r5, r2
    6f40:	0943      	lsrs	r3, r0, #5
    6f42:	009b      	lsls	r3, r3, #2
    6f44:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6f48:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    6f50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6f54:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f58:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f5c:	601a      	str	r2, [r3, #0]
		irq++;
    6f5e:	3001      	adds	r0, #1
    6f60:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    6f62:	4281      	cmp	r1, r0
    6f64:	d1e8      	bne.n	6f38 <_usart_async_init+0x38>
    6f66:	e7da      	b.n	6f1e <_usart_async_init+0x1e>
    6f68:	0000d1ac 	.word	0x0000d1ac
    6f6c:	00005959 	.word	0x00005959
    6f70:	00006a45 	.word	0x00006a45
    6f74:	000068a1 	.word	0x000068a1
    6f78:	00006901 	.word	0x00006901

00006f7c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    6f7c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6f7e:	6813      	ldr	r3, [r2, #0]
    6f80:	f043 0302 	orr.w	r3, r3, #2
    6f84:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6f86:	69d3      	ldr	r3, [r2, #28]
    6f88:	f013 0f03 	tst.w	r3, #3
    6f8c:	d1fb      	bne.n	6f86 <_usart_sync_enable+0xa>
}
    6f8e:	4770      	bx	lr

00006f90 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    6f90:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6f92:	6813      	ldr	r3, [r2, #0]
    6f94:	f043 0302 	orr.w	r3, r3, #2
    6f98:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6f9a:	69d3      	ldr	r3, [r2, #28]
    6f9c:	f013 0f03 	tst.w	r3, #3
    6fa0:	d1fb      	bne.n	6f9a <_usart_async_enable+0xa>
}
    6fa2:	4770      	bx	lr

00006fa4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    6fa4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    6fa6:	6299      	str	r1, [r3, #40]	; 0x28
    6fa8:	4770      	bx	lr

00006faa <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    6faa:	6983      	ldr	r3, [r0, #24]
    6fac:	6299      	str	r1, [r3, #40]	; 0x28
    6fae:	4770      	bx	lr

00006fb0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    6fb0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    6fb2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    6fb4:	b2c0      	uxtb	r0, r0
    6fb6:	4770      	bx	lr

00006fb8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    6fb8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6fba:	7e18      	ldrb	r0, [r3, #24]
}
    6fbc:	f000 0001 	and.w	r0, r0, #1
    6fc0:	4770      	bx	lr

00006fc2 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    6fc2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6fc4:	7e18      	ldrb	r0, [r3, #24]
}
    6fc6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6fca:	4770      	bx	lr

00006fcc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    6fcc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6fce:	7e18      	ldrb	r0, [r3, #24]
}
    6fd0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6fd4:	4770      	bx	lr

00006fd6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    6fd6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    6fd8:	2201      	movs	r2, #1
    6fda:	759a      	strb	r2, [r3, #22]
    6fdc:	4770      	bx	lr

00006fde <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    6fde:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    6fe0:	2202      	movs	r2, #2
    6fe2:	759a      	strb	r2, [r3, #22]
    6fe4:	4770      	bx	lr
	...

00006fe8 <_usart_async_set_irq_state>:
{
    6fe8:	b570      	push	{r4, r5, r6, lr}
    6fea:	460c      	mov	r4, r1
    6fec:	4616      	mov	r6, r2
	ASSERT(device);
    6fee:	4605      	mov	r5, r0
    6ff0:	f240 2236 	movw	r2, #566	; 0x236
    6ff4:	4915      	ldr	r1, [pc, #84]	; (704c <_usart_async_set_irq_state+0x64>)
    6ff6:	3000      	adds	r0, #0
    6ff8:	bf18      	it	ne
    6ffa:	2001      	movne	r0, #1
    6ffc:	4b14      	ldr	r3, [pc, #80]	; (7050 <_usart_async_set_irq_state+0x68>)
    6ffe:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    7000:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    7004:	d10d      	bne.n	7022 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    7006:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    7008:	b92e      	cbnz	r6, 7016 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    700a:	2201      	movs	r2, #1
    700c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    700e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    7010:	2202      	movs	r2, #2
    7012:	751a      	strb	r2, [r3, #20]
    7014:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    7016:	2201      	movs	r2, #1
    7018:	759a      	strb	r2, [r3, #22]
    701a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    701c:	2202      	movs	r2, #2
    701e:	759a      	strb	r2, [r3, #22]
    7020:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    7022:	2c01      	cmp	r4, #1
    7024:	d002      	beq.n	702c <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    7026:	2c03      	cmp	r4, #3
    7028:	d008      	beq.n	703c <_usart_async_set_irq_state+0x54>
    702a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    702c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    702e:	b916      	cbnz	r6, 7036 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    7030:	2204      	movs	r2, #4
    7032:	751a      	strb	r2, [r3, #20]
    7034:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    7036:	2204      	movs	r2, #4
    7038:	759a      	strb	r2, [r3, #22]
    703a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    703c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    703e:	b116      	cbz	r6, 7046 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    7040:	2280      	movs	r2, #128	; 0x80
    7042:	759a      	strb	r2, [r3, #22]
}
    7044:	e7f1      	b.n	702a <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    7046:	2280      	movs	r2, #128	; 0x80
    7048:	751a      	strb	r2, [r3, #20]
    704a:	bd70      	pop	{r4, r5, r6, pc}
    704c:	0000d1ac 	.word	0x0000d1ac
    7050:	00005959 	.word	0x00005959

00007054 <_i2c_m_async_init>:
{
    7054:	b570      	push	{r4, r5, r6, lr}
    7056:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    7058:	4606      	mov	r6, r0
    705a:	f240 42d2 	movw	r2, #1234	; 0x4d2
    705e:	4918      	ldr	r1, [pc, #96]	; (70c0 <_i2c_m_async_init+0x6c>)
    7060:	3000      	adds	r0, #0
    7062:	bf18      	it	ne
    7064:	2001      	movne	r0, #1
    7066:	4b17      	ldr	r3, [pc, #92]	; (70c4 <_i2c_m_async_init+0x70>)
    7068:	4798      	blx	r3
	i2c_dev->hw = hw;
    706a:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    706c:	4629      	mov	r1, r5
    706e:	4630      	mov	r0, r6
    7070:	4b15      	ldr	r3, [pc, #84]	; (70c8 <_i2c_m_async_init+0x74>)
    7072:	4798      	blx	r3
	if (init_status) {
    7074:	4604      	mov	r4, r0
    7076:	b108      	cbz	r0, 707c <_i2c_m_async_init+0x28>
}
    7078:	4620      	mov	r0, r4
    707a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    707c:	4631      	mov	r1, r6
    707e:	4628      	mov	r0, r5
    7080:	4b12      	ldr	r3, [pc, #72]	; (70cc <_i2c_m_async_init+0x78>)
    7082:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7084:	4628      	mov	r0, r5
    7086:	4b12      	ldr	r3, [pc, #72]	; (70d0 <_i2c_m_async_init+0x7c>)
    7088:	4798      	blx	r3
    708a:	1d01      	adds	r1, r0, #4
    708c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    708e:	2501      	movs	r5, #1
    7090:	f000 021f 	and.w	r2, r0, #31
    7094:	fa05 f202 	lsl.w	r2, r5, r2
    7098:	0943      	lsrs	r3, r0, #5
    709a:	009b      	lsls	r3, r3, #2
    709c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    70a0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    70a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    70a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70ac:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70b4:	601a      	str	r2, [r3, #0]
		irq++;
    70b6:	3001      	adds	r0, #1
    70b8:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    70ba:	4281      	cmp	r1, r0
    70bc:	d1e8      	bne.n	7090 <_i2c_m_async_init+0x3c>
    70be:	e7db      	b.n	7078 <_i2c_m_async_init+0x24>
    70c0:	0000d1ac 	.word	0x0000d1ac
    70c4:	00005959 	.word	0x00005959
    70c8:	00006ba9 	.word	0x00006ba9
    70cc:	000068a1 	.word	0x000068a1
    70d0:	00006901 	.word	0x00006901

000070d4 <_i2c_m_async_transfer>:
{
    70d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70d8:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    70da:	4605      	mov	r5, r0
    70dc:	f110 0800 	adds.w	r8, r0, #0
    70e0:	bf18      	it	ne
    70e2:	f04f 0801 	movne.w	r8, #1
    70e6:	4f45      	ldr	r7, [pc, #276]	; (71fc <_i2c_m_async_transfer+0x128>)
    70e8:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    70ec:	4639      	mov	r1, r7
    70ee:	4640      	mov	r0, r8
    70f0:	4e43      	ldr	r6, [pc, #268]	; (7200 <_i2c_m_async_transfer+0x12c>)
    70f2:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    70f4:	6928      	ldr	r0, [r5, #16]
    70f6:	f240 5229 	movw	r2, #1321	; 0x529
    70fa:	4639      	mov	r1, r7
    70fc:	3000      	adds	r0, #0
    70fe:	bf18      	it	ne
    7100:	2001      	movne	r0, #1
    7102:	47b0      	blx	r6
	ASSERT(msg);
    7104:	f240 522a 	movw	r2, #1322	; 0x52a
    7108:	4639      	mov	r1, r7
    710a:	1c20      	adds	r0, r4, #0
    710c:	bf18      	it	ne
    710e:	2001      	movne	r0, #1
    7110:	47b0      	blx	r6
	if (msg->len == 0) {
    7112:	6860      	ldr	r0, [r4, #4]
    7114:	2800      	cmp	r0, #0
    7116:	d06f      	beq.n	71f8 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7118:	886b      	ldrh	r3, [r5, #2]
    711a:	f413 7f80 	tst.w	r3, #256	; 0x100
    711e:	d169      	bne.n	71f4 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    7120:	8863      	ldrh	r3, [r4, #2]
    7122:	b29b      	uxth	r3, r3
    7124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7128:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    712a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    712e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7132:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7134:	6853      	ldr	r3, [r2, #4]
    7136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    713a:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    713c:	69d3      	ldr	r3, [r2, #28]
    713e:	f013 0f04 	tst.w	r3, #4
    7142:	d1fb      	bne.n	713c <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    7144:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7146:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    7148:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    714c:	492b      	ldr	r1, [pc, #172]	; (71fc <_i2c_m_async_transfer+0x128>)
    714e:	4640      	mov	r0, r8
    7150:	4b2b      	ldr	r3, [pc, #172]	; (7200 <_i2c_m_async_transfer+0x12c>)
    7152:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    7154:	686b      	ldr	r3, [r5, #4]
    7156:	2b01      	cmp	r3, #1
    7158:	d02a      	beq.n	71b0 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    715a:	6863      	ldr	r3, [r4, #4]
    715c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    7160:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7162:	69e3      	ldr	r3, [r4, #28]
    7164:	f013 0f04 	tst.w	r3, #4
    7168:	d1fb      	bne.n	7162 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    716a:	882b      	ldrh	r3, [r5, #0]
    716c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7170:	d02a      	beq.n	71c8 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    7172:	886a      	ldrh	r2, [r5, #2]
    7174:	f012 0f01 	tst.w	r2, #1
    7178:	d004      	beq.n	7184 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    717a:	886a      	ldrh	r2, [r5, #2]
    717c:	b292      	uxth	r2, r2
    717e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7182:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7184:	f240 72fe 	movw	r2, #2046	; 0x7fe
    7188:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    718c:	69e3      	ldr	r3, [r4, #28]
    718e:	f013 0f04 	tst.w	r3, #4
    7192:	d1fb      	bne.n	718c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7194:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    719a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    719e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    71a0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    71a2:	69e3      	ldr	r3, [r4, #28]
    71a4:	f013 0f04 	tst.w	r3, #4
    71a8:	d1fb      	bne.n	71a2 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    71aa:	2000      	movs	r0, #0
    71ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    71b0:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    71b4:	d0d1      	beq.n	715a <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    71b6:	6863      	ldr	r3, [r4, #4]
    71b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    71bc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    71be:	69e3      	ldr	r3, [r4, #28]
    71c0:	f013 0f04 	tst.w	r3, #4
    71c4:	d1fb      	bne.n	71be <_i2c_m_async_transfer+0xea>
    71c6:	e7d0      	b.n	716a <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    71c8:	8869      	ldrh	r1, [r5, #2]
    71ca:	005a      	lsls	r2, r3, #1
    71cc:	b2d2      	uxtb	r2, r2
    71ce:	f001 0301 	and.w	r3, r1, #1
    71d2:	431a      	orrs	r2, r3
    71d4:	69e3      	ldr	r3, [r4, #28]
    71d6:	f013 0f04 	tst.w	r3, #4
    71da:	d1fb      	bne.n	71d4 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    71dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    71de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    71e2:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    71e4:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    71e6:	69e3      	ldr	r3, [r4, #28]
    71e8:	f013 0f04 	tst.w	r3, #4
    71ec:	d1fb      	bne.n	71e6 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    71ee:	2000      	movs	r0, #0
    71f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    71f4:	f06f 0003 	mvn.w	r0, #3
}
    71f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71fc:	0000d1ac 	.word	0x0000d1ac
    7200:	00005959 	.word	0x00005959

00007204 <_i2c_m_async_register_callback>:
	switch (type) {
    7204:	2901      	cmp	r1, #1
    7206:	d006      	beq.n	7216 <_i2c_m_async_register_callback+0x12>
    7208:	b119      	cbz	r1, 7212 <_i2c_m_async_register_callback+0xe>
    720a:	2902      	cmp	r1, #2
    720c:	d005      	beq.n	721a <_i2c_m_async_register_callback+0x16>
}
    720e:	2000      	movs	r0, #0
    7210:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    7212:	6142      	str	r2, [r0, #20]
		break;
    7214:	e7fb      	b.n	720e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7216:	6182      	str	r2, [r0, #24]
		break;
    7218:	e7f9      	b.n	720e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    721a:	61c2      	str	r2, [r0, #28]
		break;
    721c:	e7f7      	b.n	720e <_i2c_m_async_register_callback+0xa>
	...

00007220 <SERCOM0_0_Handler>:
{
    7220:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7222:	4b02      	ldr	r3, [pc, #8]	; (722c <SERCOM0_0_Handler+0xc>)
    7224:	6818      	ldr	r0, [r3, #0]
    7226:	4b02      	ldr	r3, [pc, #8]	; (7230 <SERCOM0_0_Handler+0x10>)
    7228:	4798      	blx	r3
    722a:	bd08      	pop	{r3, pc}
    722c:	20000980 	.word	0x20000980
    7230:	00006831 	.word	0x00006831

00007234 <SERCOM0_1_Handler>:
{
    7234:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7236:	4b02      	ldr	r3, [pc, #8]	; (7240 <SERCOM0_1_Handler+0xc>)
    7238:	6818      	ldr	r0, [r3, #0]
    723a:	4b02      	ldr	r3, [pc, #8]	; (7244 <SERCOM0_1_Handler+0x10>)
    723c:	4798      	blx	r3
    723e:	bd08      	pop	{r3, pc}
    7240:	20000980 	.word	0x20000980
    7244:	00006831 	.word	0x00006831

00007248 <SERCOM0_2_Handler>:
{
    7248:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    724a:	4b02      	ldr	r3, [pc, #8]	; (7254 <SERCOM0_2_Handler+0xc>)
    724c:	6818      	ldr	r0, [r3, #0]
    724e:	4b02      	ldr	r3, [pc, #8]	; (7258 <SERCOM0_2_Handler+0x10>)
    7250:	4798      	blx	r3
    7252:	bd08      	pop	{r3, pc}
    7254:	20000980 	.word	0x20000980
    7258:	00006831 	.word	0x00006831

0000725c <SERCOM0_3_Handler>:
{
    725c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    725e:	4b02      	ldr	r3, [pc, #8]	; (7268 <SERCOM0_3_Handler+0xc>)
    7260:	6818      	ldr	r0, [r3, #0]
    7262:	4b02      	ldr	r3, [pc, #8]	; (726c <SERCOM0_3_Handler+0x10>)
    7264:	4798      	blx	r3
    7266:	bd08      	pop	{r3, pc}
    7268:	20000980 	.word	0x20000980
    726c:	00006831 	.word	0x00006831

00007270 <SERCOM1_0_Handler>:
{
    7270:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7272:	4b02      	ldr	r3, [pc, #8]	; (727c <SERCOM1_0_Handler+0xc>)
    7274:	6858      	ldr	r0, [r3, #4]
    7276:	4b02      	ldr	r3, [pc, #8]	; (7280 <SERCOM1_0_Handler+0x10>)
    7278:	4798      	blx	r3
    727a:	bd08      	pop	{r3, pc}
    727c:	20000980 	.word	0x20000980
    7280:	00006831 	.word	0x00006831

00007284 <SERCOM1_1_Handler>:
{
    7284:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7286:	4b02      	ldr	r3, [pc, #8]	; (7290 <SERCOM1_1_Handler+0xc>)
    7288:	6858      	ldr	r0, [r3, #4]
    728a:	4b02      	ldr	r3, [pc, #8]	; (7294 <SERCOM1_1_Handler+0x10>)
    728c:	4798      	blx	r3
    728e:	bd08      	pop	{r3, pc}
    7290:	20000980 	.word	0x20000980
    7294:	00006831 	.word	0x00006831

00007298 <SERCOM1_2_Handler>:
{
    7298:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    729a:	4b02      	ldr	r3, [pc, #8]	; (72a4 <SERCOM1_2_Handler+0xc>)
    729c:	6858      	ldr	r0, [r3, #4]
    729e:	4b02      	ldr	r3, [pc, #8]	; (72a8 <SERCOM1_2_Handler+0x10>)
    72a0:	4798      	blx	r3
    72a2:	bd08      	pop	{r3, pc}
    72a4:	20000980 	.word	0x20000980
    72a8:	00006831 	.word	0x00006831

000072ac <SERCOM1_3_Handler>:
{
    72ac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    72ae:	4b02      	ldr	r3, [pc, #8]	; (72b8 <SERCOM1_3_Handler+0xc>)
    72b0:	6858      	ldr	r0, [r3, #4]
    72b2:	4b02      	ldr	r3, [pc, #8]	; (72bc <SERCOM1_3_Handler+0x10>)
    72b4:	4798      	blx	r3
    72b6:	bd08      	pop	{r3, pc}
    72b8:	20000980 	.word	0x20000980
    72bc:	00006831 	.word	0x00006831

000072c0 <SERCOM3_0_Handler>:
{
    72c0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    72c2:	4b02      	ldr	r3, [pc, #8]	; (72cc <SERCOM3_0_Handler+0xc>)
    72c4:	6898      	ldr	r0, [r3, #8]
    72c6:	4b02      	ldr	r3, [pc, #8]	; (72d0 <SERCOM3_0_Handler+0x10>)
    72c8:	4798      	blx	r3
    72ca:	bd08      	pop	{r3, pc}
    72cc:	20000980 	.word	0x20000980
    72d0:	000069ab 	.word	0x000069ab

000072d4 <SERCOM3_1_Handler>:
{
    72d4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    72d6:	4b02      	ldr	r3, [pc, #8]	; (72e0 <SERCOM3_1_Handler+0xc>)
    72d8:	6898      	ldr	r0, [r3, #8]
    72da:	4b02      	ldr	r3, [pc, #8]	; (72e4 <SERCOM3_1_Handler+0x10>)
    72dc:	4798      	blx	r3
    72de:	bd08      	pop	{r3, pc}
    72e0:	20000980 	.word	0x20000980
    72e4:	000069ab 	.word	0x000069ab

000072e8 <SERCOM3_2_Handler>:
{
    72e8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    72ea:	4b02      	ldr	r3, [pc, #8]	; (72f4 <SERCOM3_2_Handler+0xc>)
    72ec:	6898      	ldr	r0, [r3, #8]
    72ee:	4b02      	ldr	r3, [pc, #8]	; (72f8 <SERCOM3_2_Handler+0x10>)
    72f0:	4798      	blx	r3
    72f2:	bd08      	pop	{r3, pc}
    72f4:	20000980 	.word	0x20000980
    72f8:	000069ab 	.word	0x000069ab

000072fc <SERCOM3_3_Handler>:
{
    72fc:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    72fe:	4b02      	ldr	r3, [pc, #8]	; (7308 <SERCOM3_3_Handler+0xc>)
    7300:	6898      	ldr	r0, [r3, #8]
    7302:	4b02      	ldr	r3, [pc, #8]	; (730c <SERCOM3_3_Handler+0x10>)
    7304:	4798      	blx	r3
    7306:	bd08      	pop	{r3, pc}
    7308:	20000980 	.word	0x20000980
    730c:	000069ab 	.word	0x000069ab

00007310 <SERCOM4_0_Handler>:
{
    7310:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7312:	4b02      	ldr	r3, [pc, #8]	; (731c <SERCOM4_0_Handler+0xc>)
    7314:	68d8      	ldr	r0, [r3, #12]
    7316:	4b02      	ldr	r3, [pc, #8]	; (7320 <SERCOM4_0_Handler+0x10>)
    7318:	4798      	blx	r3
    731a:	bd08      	pop	{r3, pc}
    731c:	20000980 	.word	0x20000980
    7320:	00006831 	.word	0x00006831

00007324 <SERCOM4_1_Handler>:
{
    7324:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7326:	4b02      	ldr	r3, [pc, #8]	; (7330 <SERCOM4_1_Handler+0xc>)
    7328:	68d8      	ldr	r0, [r3, #12]
    732a:	4b02      	ldr	r3, [pc, #8]	; (7334 <SERCOM4_1_Handler+0x10>)
    732c:	4798      	blx	r3
    732e:	bd08      	pop	{r3, pc}
    7330:	20000980 	.word	0x20000980
    7334:	00006831 	.word	0x00006831

00007338 <SERCOM4_2_Handler>:
{
    7338:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    733a:	4b02      	ldr	r3, [pc, #8]	; (7344 <SERCOM4_2_Handler+0xc>)
    733c:	68d8      	ldr	r0, [r3, #12]
    733e:	4b02      	ldr	r3, [pc, #8]	; (7348 <SERCOM4_2_Handler+0x10>)
    7340:	4798      	blx	r3
    7342:	bd08      	pop	{r3, pc}
    7344:	20000980 	.word	0x20000980
    7348:	00006831 	.word	0x00006831

0000734c <SERCOM4_3_Handler>:
{
    734c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    734e:	4b02      	ldr	r3, [pc, #8]	; (7358 <SERCOM4_3_Handler+0xc>)
    7350:	68d8      	ldr	r0, [r3, #12]
    7352:	4b02      	ldr	r3, [pc, #8]	; (735c <SERCOM4_3_Handler+0x10>)
    7354:	4798      	blx	r3
    7356:	bd08      	pop	{r3, pc}
    7358:	20000980 	.word	0x20000980
    735c:	00006831 	.word	0x00006831

00007360 <SERCOM5_0_Handler>:
{
    7360:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7362:	4b02      	ldr	r3, [pc, #8]	; (736c <SERCOM5_0_Handler+0xc>)
    7364:	6918      	ldr	r0, [r3, #16]
    7366:	4b02      	ldr	r3, [pc, #8]	; (7370 <SERCOM5_0_Handler+0x10>)
    7368:	4798      	blx	r3
    736a:	bd08      	pop	{r3, pc}
    736c:	20000980 	.word	0x20000980
    7370:	00006c8d 	.word	0x00006c8d

00007374 <SERCOM5_1_Handler>:
{
    7374:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7376:	4b02      	ldr	r3, [pc, #8]	; (7380 <SERCOM5_1_Handler+0xc>)
    7378:	6918      	ldr	r0, [r3, #16]
    737a:	4b02      	ldr	r3, [pc, #8]	; (7384 <SERCOM5_1_Handler+0x10>)
    737c:	4798      	blx	r3
    737e:	bd08      	pop	{r3, pc}
    7380:	20000980 	.word	0x20000980
    7384:	00006c8d 	.word	0x00006c8d

00007388 <SERCOM5_2_Handler>:
{
    7388:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    738a:	4b02      	ldr	r3, [pc, #8]	; (7394 <SERCOM5_2_Handler+0xc>)
    738c:	6918      	ldr	r0, [r3, #16]
    738e:	4b02      	ldr	r3, [pc, #8]	; (7398 <SERCOM5_2_Handler+0x10>)
    7390:	4798      	blx	r3
    7392:	bd08      	pop	{r3, pc}
    7394:	20000980 	.word	0x20000980
    7398:	00006c8d 	.word	0x00006c8d

0000739c <SERCOM5_3_Handler>:
{
    739c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    739e:	4b02      	ldr	r3, [pc, #8]	; (73a8 <SERCOM5_3_Handler+0xc>)
    73a0:	6918      	ldr	r0, [r3, #16]
    73a2:	4b02      	ldr	r3, [pc, #8]	; (73ac <SERCOM5_3_Handler+0x10>)
    73a4:	4798      	blx	r3
    73a6:	bd08      	pop	{r3, pc}
    73a8:	20000980 	.word	0x20000980
    73ac:	00006c8d 	.word	0x00006c8d

000073b0 <SERCOM6_0_Handler>:
{
    73b0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    73b2:	4b02      	ldr	r3, [pc, #8]	; (73bc <SERCOM6_0_Handler+0xc>)
    73b4:	6958      	ldr	r0, [r3, #20]
    73b6:	4b02      	ldr	r3, [pc, #8]	; (73c0 <SERCOM6_0_Handler+0x10>)
    73b8:	4798      	blx	r3
    73ba:	bd08      	pop	{r3, pc}
    73bc:	20000980 	.word	0x20000980
    73c0:	00006831 	.word	0x00006831

000073c4 <SERCOM6_1_Handler>:
{
    73c4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    73c6:	4b02      	ldr	r3, [pc, #8]	; (73d0 <SERCOM6_1_Handler+0xc>)
    73c8:	6958      	ldr	r0, [r3, #20]
    73ca:	4b02      	ldr	r3, [pc, #8]	; (73d4 <SERCOM6_1_Handler+0x10>)
    73cc:	4798      	blx	r3
    73ce:	bd08      	pop	{r3, pc}
    73d0:	20000980 	.word	0x20000980
    73d4:	00006831 	.word	0x00006831

000073d8 <SERCOM6_2_Handler>:
{
    73d8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    73da:	4b02      	ldr	r3, [pc, #8]	; (73e4 <SERCOM6_2_Handler+0xc>)
    73dc:	6958      	ldr	r0, [r3, #20]
    73de:	4b02      	ldr	r3, [pc, #8]	; (73e8 <SERCOM6_2_Handler+0x10>)
    73e0:	4798      	blx	r3
    73e2:	bd08      	pop	{r3, pc}
    73e4:	20000980 	.word	0x20000980
    73e8:	00006831 	.word	0x00006831

000073ec <SERCOM6_3_Handler>:
{
    73ec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    73ee:	4b02      	ldr	r3, [pc, #8]	; (73f8 <SERCOM6_3_Handler+0xc>)
    73f0:	6958      	ldr	r0, [r3, #20]
    73f2:	4b02      	ldr	r3, [pc, #8]	; (73fc <SERCOM6_3_Handler+0x10>)
    73f4:	4798      	blx	r3
    73f6:	bd08      	pop	{r3, pc}
    73f8:	20000980 	.word	0x20000980
    73fc:	00006831 	.word	0x00006831

00007400 <_spi_m_sync_init>:
{
    7400:	b570      	push	{r4, r5, r6, lr}
    7402:	4606      	mov	r6, r0
    7404:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7406:	4608      	mov	r0, r1
    7408:	4b5d      	ldr	r3, [pc, #372]	; (7580 <_spi_m_sync_init+0x180>)
    740a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    740c:	2803      	cmp	r0, #3
    740e:	d00c      	beq.n	742a <_spi_m_sync_init+0x2a>
    7410:	2807      	cmp	r0, #7
    7412:	bf08      	it	eq
    7414:	2301      	moveq	r3, #1
    7416:	d009      	beq.n	742c <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    7418:	2e00      	cmp	r6, #0
    741a:	f000 809f 	beq.w	755c <_spi_m_sync_init+0x15c>
    741e:	2c00      	cmp	r4, #0
    7420:	f040 80a5 	bne.w	756e <_spi_m_sync_init+0x16e>
	return NULL;
    7424:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    7426:	2000      	movs	r0, #0
    7428:	e009      	b.n	743e <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    742a:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    742c:	4d55      	ldr	r5, [pc, #340]	; (7584 <_spi_m_sync_init+0x184>)
    742e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    7432:	441d      	add	r5, r3
	ASSERT(dev && hw);
    7434:	2e00      	cmp	r6, #0
    7436:	d0f6      	beq.n	7426 <_spi_m_sync_init+0x26>
    7438:	2001      	movs	r0, #1
    743a:	2c00      	cmp	r4, #0
    743c:	d0f3      	beq.n	7426 <_spi_m_sync_init+0x26>
    743e:	f640 226e 	movw	r2, #2670	; 0xa6e
    7442:	4951      	ldr	r1, [pc, #324]	; (7588 <_spi_m_sync_init+0x188>)
    7444:	4b51      	ldr	r3, [pc, #324]	; (758c <_spi_m_sync_init+0x18c>)
    7446:	4798      	blx	r3
	if (regs == NULL) {
    7448:	2d00      	cmp	r5, #0
    744a:	f000 8084 	beq.w	7556 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    744e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7450:	f013 0f01 	tst.w	r3, #1
    7454:	d11d      	bne.n	7492 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7456:	682b      	ldr	r3, [r5, #0]
    7458:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    745c:	69e3      	ldr	r3, [r4, #28]
    745e:	f013 0f03 	tst.w	r3, #3
    7462:	d1fb      	bne.n	745c <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7464:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7466:	f013 0f02 	tst.w	r3, #2
    746a:	d00b      	beq.n	7484 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    746c:	6823      	ldr	r3, [r4, #0]
    746e:	f023 0302 	bic.w	r3, r3, #2
    7472:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7474:	69e3      	ldr	r3, [r4, #28]
    7476:	f013 0f03 	tst.w	r3, #3
    747a:	d1fb      	bne.n	7474 <_spi_m_sync_init+0x74>
    747c:	69e3      	ldr	r3, [r4, #28]
    747e:	f013 0f02 	tst.w	r3, #2
    7482:	d1fb      	bne.n	747c <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7484:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7488:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    748a:	69e3      	ldr	r3, [r4, #28]
    748c:	f013 0f03 	tst.w	r3, #3
    7490:	d1fb      	bne.n	748a <_spi_m_sync_init+0x8a>
    7492:	69e3      	ldr	r3, [r4, #28]
    7494:	f013 0f01 	tst.w	r3, #1
    7498:	d1fb      	bne.n	7492 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    749a:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    749c:	682b      	ldr	r3, [r5, #0]
    749e:	f003 031c 	and.w	r3, r3, #28
    74a2:	2b08      	cmp	r3, #8
    74a4:	d02e      	beq.n	7504 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    74a6:	f44f 6217 	mov.w	r2, #2416	; 0x970
    74aa:	4937      	ldr	r1, [pc, #220]	; (7588 <_spi_m_sync_init+0x188>)
    74ac:	1c20      	adds	r0, r4, #0
    74ae:	bf18      	it	ne
    74b0:	2001      	movne	r0, #1
    74b2:	4b36      	ldr	r3, [pc, #216]	; (758c <_spi_m_sync_init+0x18c>)
    74b4:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    74b6:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    74b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    74bc:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    74c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    74c2:	69e3      	ldr	r3, [r4, #28]
    74c4:	f013 0f03 	tst.w	r3, #3
    74c8:	d1fb      	bne.n	74c2 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    74ca:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    74cc:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    74d0:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    74d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    74d8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    74da:	69e3      	ldr	r3, [r4, #28]
    74dc:	f013 0f17 	tst.w	r3, #23
    74e0:	d1fb      	bne.n	74da <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    74e2:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    74e4:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    74e6:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    74e8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    74ec:	686b      	ldr	r3, [r5, #4]
    74ee:	f003 0307 	and.w	r3, r3, #7
    74f2:	2b00      	cmp	r3, #0
    74f4:	bf0c      	ite	eq
    74f6:	2301      	moveq	r3, #1
    74f8:	2302      	movne	r3, #2
    74fa:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    74fc:	89eb      	ldrh	r3, [r5, #14]
    74fe:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    7500:	2000      	movs	r0, #0
    7502:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    7504:	f640 1284 	movw	r2, #2436	; 0x984
    7508:	491f      	ldr	r1, [pc, #124]	; (7588 <_spi_m_sync_init+0x188>)
    750a:	1c20      	adds	r0, r4, #0
    750c:	bf18      	it	ne
    750e:	2001      	movne	r0, #1
    7510:	4b1e      	ldr	r3, [pc, #120]	; (758c <_spi_m_sync_init+0x18c>)
    7512:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7514:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7516:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    751a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    751e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7520:	69e3      	ldr	r3, [r4, #28]
    7522:	f013 0f03 	tst.w	r3, #3
    7526:	d1fb      	bne.n	7520 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7528:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    752a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    752e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7536:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    753a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    753c:	69e3      	ldr	r3, [r4, #28]
    753e:	f013 0f17 	tst.w	r3, #23
    7542:	d1fb      	bne.n	753c <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7544:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7546:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7548:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    754a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    754e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7550:	2b00      	cmp	r3, #0
    7552:	d1fc      	bne.n	754e <_spi_m_sync_init+0x14e>
    7554:	e7ca      	b.n	74ec <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    7556:	f06f 000c 	mvn.w	r0, #12
    755a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    755c:	f640 226e 	movw	r2, #2670	; 0xa6e
    7560:	4909      	ldr	r1, [pc, #36]	; (7588 <_spi_m_sync_init+0x188>)
    7562:	2000      	movs	r0, #0
    7564:	4b09      	ldr	r3, [pc, #36]	; (758c <_spi_m_sync_init+0x18c>)
    7566:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7568:	f06f 000c 	mvn.w	r0, #12
    756c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    756e:	f640 226e 	movw	r2, #2670	; 0xa6e
    7572:	4905      	ldr	r1, [pc, #20]	; (7588 <_spi_m_sync_init+0x188>)
    7574:	2001      	movs	r0, #1
    7576:	4b05      	ldr	r3, [pc, #20]	; (758c <_spi_m_sync_init+0x18c>)
    7578:	4798      	blx	r3
		return ERR_INVALID_ARG;
    757a:	f06f 000c 	mvn.w	r0, #12
    757e:	bd70      	pop	{r4, r5, r6, pc}
    7580:	000067ed 	.word	0x000067ed
    7584:	0000d188 	.word	0x0000d188
    7588:	0000d1ac 	.word	0x0000d1ac
    758c:	00005959 	.word	0x00005959

00007590 <_spi_m_async_init>:
{
    7590:	b538      	push	{r3, r4, r5, lr}
    7592:	4604      	mov	r4, r0
    7594:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7596:	4b15      	ldr	r3, [pc, #84]	; (75ec <_spi_m_async_init+0x5c>)
    7598:	4798      	blx	r3
	if (rc < 0) {
    759a:	2800      	cmp	r0, #0
    759c:	db24      	blt.n	75e8 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    759e:	4621      	mov	r1, r4
    75a0:	4628      	mov	r0, r5
    75a2:	4b13      	ldr	r3, [pc, #76]	; (75f0 <_spi_m_async_init+0x60>)
    75a4:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    75a6:	2300      	movs	r3, #0
    75a8:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    75aa:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    75ac:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    75ae:	4628      	mov	r0, r5
    75b0:	4b10      	ldr	r3, [pc, #64]	; (75f4 <_spi_m_async_init+0x64>)
    75b2:	4798      	blx	r3
    75b4:	1d01      	adds	r1, r0, #4
    75b6:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75b8:	2401      	movs	r4, #1
    75ba:	f000 021f 	and.w	r2, r0, #31
    75be:	fa04 f202 	lsl.w	r2, r4, r2
    75c2:	0943      	lsrs	r3, r0, #5
    75c4:	009b      	lsls	r3, r3, #2
    75c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    75ca:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    75ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    75d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    75d6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    75de:	3001      	adds	r0, #1
    75e0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    75e2:	4281      	cmp	r1, r0
    75e4:	d1e9      	bne.n	75ba <_spi_m_async_init+0x2a>
	return ERR_NONE;
    75e6:	2000      	movs	r0, #0
}
    75e8:	bd38      	pop	{r3, r4, r5, pc}
    75ea:	bf00      	nop
    75ec:	00007401 	.word	0x00007401
    75f0:	000068a1 	.word	0x000068a1
    75f4:	00006901 	.word	0x00006901

000075f8 <_spi_m_async_enable>:
{
    75f8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    75fa:	4604      	mov	r4, r0
    75fc:	b160      	cbz	r0, 7618 <_spi_m_async_enable+0x20>
    75fe:	6800      	ldr	r0, [r0, #0]
    7600:	3000      	adds	r0, #0
    7602:	bf18      	it	ne
    7604:	2001      	movne	r0, #1
    7606:	f640 22db 	movw	r2, #2779	; 0xadb
    760a:	4904      	ldr	r1, [pc, #16]	; (761c <_spi_m_async_enable+0x24>)
    760c:	4b04      	ldr	r3, [pc, #16]	; (7620 <_spi_m_async_enable+0x28>)
    760e:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    7610:	6820      	ldr	r0, [r4, #0]
    7612:	4b04      	ldr	r3, [pc, #16]	; (7624 <_spi_m_async_enable+0x2c>)
    7614:	4798      	blx	r3
}
    7616:	bd10      	pop	{r4, pc}
    7618:	2000      	movs	r0, #0
    761a:	e7f4      	b.n	7606 <_spi_m_async_enable+0xe>
    761c:	0000d1ac 	.word	0x0000d1ac
    7620:	00005959 	.word	0x00005959
    7624:	00006939 	.word	0x00006939

00007628 <_spi_m_async_set_mode>:
{
    7628:	b538      	push	{r3, r4, r5, lr}
    762a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    762c:	4604      	mov	r4, r0
    762e:	b168      	cbz	r0, 764c <_spi_m_async_set_mode+0x24>
    7630:	6800      	ldr	r0, [r0, #0]
    7632:	3000      	adds	r0, #0
    7634:	bf18      	it	ne
    7636:	2001      	movne	r0, #1
    7638:	f640 320c 	movw	r2, #2828	; 0xb0c
    763c:	4904      	ldr	r1, [pc, #16]	; (7650 <_spi_m_async_set_mode+0x28>)
    763e:	4b05      	ldr	r3, [pc, #20]	; (7654 <_spi_m_async_set_mode+0x2c>)
    7640:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    7642:	4629      	mov	r1, r5
    7644:	6820      	ldr	r0, [r4, #0]
    7646:	4b04      	ldr	r3, [pc, #16]	; (7658 <_spi_m_async_set_mode+0x30>)
    7648:	4798      	blx	r3
}
    764a:	bd38      	pop	{r3, r4, r5, pc}
    764c:	2000      	movs	r0, #0
    764e:	e7f3      	b.n	7638 <_spi_m_async_set_mode+0x10>
    7650:	0000d1ac 	.word	0x0000d1ac
    7654:	00005959 	.word	0x00005959
    7658:	00006979 	.word	0x00006979

0000765c <_spi_m_async_set_baudrate>:
{
    765c:	b538      	push	{r3, r4, r5, lr}
    765e:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    7660:	4605      	mov	r5, r0
    7662:	b198      	cbz	r0, 768c <_spi_m_async_set_baudrate+0x30>
    7664:	6800      	ldr	r0, [r0, #0]
    7666:	3000      	adds	r0, #0
    7668:	bf18      	it	ne
    766a:	2001      	movne	r0, #1
    766c:	f640 323b 	movw	r2, #2875	; 0xb3b
    7670:	4907      	ldr	r1, [pc, #28]	; (7690 <_spi_m_async_set_baudrate+0x34>)
    7672:	4b08      	ldr	r3, [pc, #32]	; (7694 <_spi_m_async_set_baudrate+0x38>)
    7674:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    7676:	682b      	ldr	r3, [r5, #0]
    7678:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    767a:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    767e:	bf03      	ittte	eq
    7680:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7682:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    7684:	2000      	moveq	r0, #0
		return ERR_BUSY;
    7686:	f06f 0003 	mvnne.w	r0, #3
}
    768a:	bd38      	pop	{r3, r4, r5, pc}
    768c:	2000      	movs	r0, #0
    768e:	e7ed      	b.n	766c <_spi_m_async_set_baudrate+0x10>
    7690:	0000d1ac 	.word	0x0000d1ac
    7694:	00005959 	.word	0x00005959

00007698 <_spi_m_async_enable_tx>:
{
    7698:	b538      	push	{r3, r4, r5, lr}
    769a:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    769c:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    769e:	b160      	cbz	r0, 76ba <_spi_m_async_enable_tx+0x22>
    76a0:	1c20      	adds	r0, r4, #0
    76a2:	bf18      	it	ne
    76a4:	2001      	movne	r0, #1
    76a6:	f640 32fe 	movw	r2, #3070	; 0xbfe
    76aa:	4906      	ldr	r1, [pc, #24]	; (76c4 <_spi_m_async_enable_tx+0x2c>)
    76ac:	4b06      	ldr	r3, [pc, #24]	; (76c8 <_spi_m_async_enable_tx+0x30>)
    76ae:	4798      	blx	r3
	if (state) {
    76b0:	b92d      	cbnz	r5, 76be <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    76b2:	2301      	movs	r3, #1
    76b4:	7523      	strb	r3, [r4, #20]
}
    76b6:	2000      	movs	r0, #0
    76b8:	bd38      	pop	{r3, r4, r5, pc}
    76ba:	2000      	movs	r0, #0
    76bc:	e7f3      	b.n	76a6 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    76be:	2301      	movs	r3, #1
    76c0:	75a3      	strb	r3, [r4, #22]
    76c2:	e7f8      	b.n	76b6 <_spi_m_async_enable_tx+0x1e>
    76c4:	0000d1ac 	.word	0x0000d1ac
    76c8:	00005959 	.word	0x00005959

000076cc <_spi_m_async_enable_rx>:
{
    76cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76ce:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    76d0:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    76d2:	4e0c      	ldr	r6, [pc, #48]	; (7704 <_spi_m_async_enable_rx+0x38>)
    76d4:	f640 4212 	movw	r2, #3090	; 0xc12
    76d8:	4631      	mov	r1, r6
    76da:	3000      	adds	r0, #0
    76dc:	bf18      	it	ne
    76de:	2001      	movne	r0, #1
    76e0:	4d09      	ldr	r5, [pc, #36]	; (7708 <_spi_m_async_enable_rx+0x3c>)
    76e2:	47a8      	blx	r5
	ASSERT(hw);
    76e4:	f640 4213 	movw	r2, #3091	; 0xc13
    76e8:	4631      	mov	r1, r6
    76ea:	1c20      	adds	r0, r4, #0
    76ec:	bf18      	it	ne
    76ee:	2001      	movne	r0, #1
    76f0:	47a8      	blx	r5
	if (state) {
    76f2:	b91f      	cbnz	r7, 76fc <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    76f4:	2304      	movs	r3, #4
    76f6:	7523      	strb	r3, [r4, #20]
}
    76f8:	2000      	movs	r0, #0
    76fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    76fc:	2304      	movs	r3, #4
    76fe:	75a3      	strb	r3, [r4, #22]
    7700:	e7fa      	b.n	76f8 <_spi_m_async_enable_rx+0x2c>
    7702:	bf00      	nop
    7704:	0000d1ac 	.word	0x0000d1ac
    7708:	00005959 	.word	0x00005959

0000770c <_spi_m_async_enable_tx_complete>:
{
    770c:	b538      	push	{r3, r4, r5, lr}
    770e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    7710:	4604      	mov	r4, r0
    7712:	b170      	cbz	r0, 7732 <_spi_m_async_enable_tx_complete+0x26>
    7714:	6800      	ldr	r0, [r0, #0]
    7716:	3000      	adds	r0, #0
    7718:	bf18      	it	ne
    771a:	2001      	movne	r0, #1
    771c:	f640 4225 	movw	r2, #3109	; 0xc25
    7720:	4907      	ldr	r1, [pc, #28]	; (7740 <_spi_m_async_enable_tx_complete+0x34>)
    7722:	4b08      	ldr	r3, [pc, #32]	; (7744 <_spi_m_async_enable_tx_complete+0x38>)
    7724:	4798      	blx	r3
	if (state) {
    7726:	b935      	cbnz	r5, 7736 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7728:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    772a:	2202      	movs	r2, #2
    772c:	751a      	strb	r2, [r3, #20]
}
    772e:	2000      	movs	r0, #0
    7730:	bd38      	pop	{r3, r4, r5, pc}
    7732:	2000      	movs	r0, #0
    7734:	e7f2      	b.n	771c <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7736:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7738:	2202      	movs	r2, #2
    773a:	759a      	strb	r2, [r3, #22]
    773c:	e7f7      	b.n	772e <_spi_m_async_enable_tx_complete+0x22>
    773e:	bf00      	nop
    7740:	0000d1ac 	.word	0x0000d1ac
    7744:	00005959 	.word	0x00005959

00007748 <_spi_m_async_write_one>:
{
    7748:	b538      	push	{r3, r4, r5, lr}
    774a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    774c:	4604      	mov	r4, r0
    774e:	b160      	cbz	r0, 776a <_spi_m_async_write_one+0x22>
    7750:	6800      	ldr	r0, [r0, #0]
    7752:	3000      	adds	r0, #0
    7754:	bf18      	it	ne
    7756:	2001      	movne	r0, #1
    7758:	f640 4237 	movw	r2, #3127	; 0xc37
    775c:	4904      	ldr	r1, [pc, #16]	; (7770 <_spi_m_async_write_one+0x28>)
    775e:	4b05      	ldr	r3, [pc, #20]	; (7774 <_spi_m_async_write_one+0x2c>)
    7760:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7762:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    7764:	629d      	str	r5, [r3, #40]	; 0x28
}
    7766:	2000      	movs	r0, #0
    7768:	bd38      	pop	{r3, r4, r5, pc}
    776a:	2000      	movs	r0, #0
    776c:	e7f4      	b.n	7758 <_spi_m_async_write_one+0x10>
    776e:	bf00      	nop
    7770:	0000d1ac 	.word	0x0000d1ac
    7774:	00005959 	.word	0x00005959

00007778 <_spi_m_async_read_one>:
{
    7778:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    777a:	4604      	mov	r4, r0
    777c:	b160      	cbz	r0, 7798 <_spi_m_async_read_one+0x20>
    777e:	6800      	ldr	r0, [r0, #0]
    7780:	3000      	adds	r0, #0
    7782:	bf18      	it	ne
    7784:	2001      	movne	r0, #1
    7786:	f640 4252 	movw	r2, #3154	; 0xc52
    778a:	4904      	ldr	r1, [pc, #16]	; (779c <_spi_m_async_read_one+0x24>)
    778c:	4b04      	ldr	r3, [pc, #16]	; (77a0 <_spi_m_async_read_one+0x28>)
    778e:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7790:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7792:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7794:	b280      	uxth	r0, r0
    7796:	bd10      	pop	{r4, pc}
    7798:	2000      	movs	r0, #0
    779a:	e7f4      	b.n	7786 <_spi_m_async_read_one+0xe>
    779c:	0000d1ac 	.word	0x0000d1ac
    77a0:	00005959 	.word	0x00005959

000077a4 <_spi_m_async_register_callback>:
{
    77a4:	b570      	push	{r4, r5, r6, lr}
    77a6:	460d      	mov	r5, r1
    77a8:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    77aa:	4604      	mov	r4, r0
    77ac:	b168      	cbz	r0, 77ca <_spi_m_async_register_callback+0x26>
    77ae:	2903      	cmp	r1, #3
    77b0:	bf8c      	ite	hi
    77b2:	2000      	movhi	r0, #0
    77b4:	2001      	movls	r0, #1
    77b6:	f640 426b 	movw	r2, #3179	; 0xc6b
    77ba:	4905      	ldr	r1, [pc, #20]	; (77d0 <_spi_m_async_register_callback+0x2c>)
    77bc:	4b05      	ldr	r3, [pc, #20]	; (77d4 <_spi_m_async_register_callback+0x30>)
    77be:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    77c0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    77c4:	60a6      	str	r6, [r4, #8]
}
    77c6:	2000      	movs	r0, #0
    77c8:	bd70      	pop	{r4, r5, r6, pc}
    77ca:	2000      	movs	r0, #0
    77cc:	e7f3      	b.n	77b6 <_spi_m_async_register_callback+0x12>
    77ce:	bf00      	nop
    77d0:	0000d1ac 	.word	0x0000d1ac
    77d4:	00005959 	.word	0x00005959

000077d8 <_spi_m_async_set_irq_state>:
{
    77d8:	b570      	push	{r4, r5, r6, lr}
    77da:	460c      	mov	r4, r1
    77dc:	4615      	mov	r5, r2
	ASSERT(device);
    77de:	4606      	mov	r6, r0
    77e0:	f640 42ac 	movw	r2, #3244	; 0xcac
    77e4:	4908      	ldr	r1, [pc, #32]	; (7808 <_spi_m_async_set_irq_state+0x30>)
    77e6:	3000      	adds	r0, #0
    77e8:	bf18      	it	ne
    77ea:	2001      	movne	r0, #1
    77ec:	4b07      	ldr	r3, [pc, #28]	; (780c <_spi_m_async_set_irq_state+0x34>)
    77ee:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    77f0:	2c03      	cmp	r4, #3
    77f2:	d000      	beq.n	77f6 <_spi_m_async_set_irq_state+0x1e>
    77f4:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    77f6:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    77f8:	b115      	cbz	r5, 7800 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    77fa:	2280      	movs	r2, #128	; 0x80
    77fc:	759a      	strb	r2, [r3, #22]
}
    77fe:	e7f9      	b.n	77f4 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    7800:	2280      	movs	r2, #128	; 0x80
    7802:	751a      	strb	r2, [r3, #20]
    7804:	bd70      	pop	{r4, r5, r6, pc}
    7806:	bf00      	nop
    7808:	0000d1ac 	.word	0x0000d1ac
    780c:	00005959 	.word	0x00005959

00007810 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    7810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7814:	4605      	mov	r5, r0
    7816:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7818:	4608      	mov	r0, r1
    781a:	4b52      	ldr	r3, [pc, #328]	; (7964 <_spi_m_dma_init+0x154>)
    781c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    781e:	2803      	cmp	r0, #3
    7820:	d00c      	beq.n	783c <_spi_m_dma_init+0x2c>
    7822:	2807      	cmp	r0, #7
    7824:	bf08      	it	eq
    7826:	2301      	moveq	r3, #1
    7828:	d009      	beq.n	783e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    782a:	2d00      	cmp	r5, #0
    782c:	f000 8086 	beq.w	793c <_spi_m_dma_init+0x12c>
    7830:	2c00      	cmp	r4, #0
    7832:	f040 808d 	bne.w	7950 <_spi_m_dma_init+0x140>
	return NULL;
    7836:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7838:	2000      	movs	r0, #0
    783a:	e009      	b.n	7850 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    783c:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    783e:	4e4a      	ldr	r6, [pc, #296]	; (7968 <_spi_m_dma_init+0x158>)
    7840:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7844:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7846:	2d00      	cmp	r5, #0
    7848:	d0f6      	beq.n	7838 <_spi_m_dma_init+0x28>
    784a:	2001      	movs	r0, #1
    784c:	2c00      	cmp	r4, #0
    784e:	d0f3      	beq.n	7838 <_spi_m_dma_init+0x28>
    7850:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7854:	4945      	ldr	r1, [pc, #276]	; (796c <_spi_m_dma_init+0x15c>)
    7856:	4b46      	ldr	r3, [pc, #280]	; (7970 <_spi_m_dma_init+0x160>)
    7858:	4798      	blx	r3

	if (regs == NULL) {
    785a:	2e00      	cmp	r6, #0
    785c:	d06a      	beq.n	7934 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    785e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7860:	f013 0f01 	tst.w	r3, #1
    7864:	d11d      	bne.n	78a2 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7866:	6833      	ldr	r3, [r6, #0]
    7868:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    786c:	69e3      	ldr	r3, [r4, #28]
    786e:	f013 0f03 	tst.w	r3, #3
    7872:	d1fb      	bne.n	786c <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7874:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7876:	f013 0f02 	tst.w	r3, #2
    787a:	d00b      	beq.n	7894 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    787c:	6823      	ldr	r3, [r4, #0]
    787e:	f023 0302 	bic.w	r3, r3, #2
    7882:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7884:	69e3      	ldr	r3, [r4, #28]
    7886:	f013 0f03 	tst.w	r3, #3
    788a:	d1fb      	bne.n	7884 <_spi_m_dma_init+0x74>
    788c:	69e3      	ldr	r3, [r4, #28]
    788e:	f013 0f02 	tst.w	r3, #2
    7892:	d1fb      	bne.n	788c <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7894:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7898:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    789a:	69e3      	ldr	r3, [r4, #28]
    789c:	f013 0f03 	tst.w	r3, #3
    78a0:	d1fb      	bne.n	789a <_spi_m_dma_init+0x8a>
    78a2:	69e3      	ldr	r3, [r4, #28]
    78a4:	f013 0f01 	tst.w	r3, #1
    78a8:	d1fb      	bne.n	78a2 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    78aa:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    78ac:	f44f 6217 	mov.w	r2, #2416	; 0x970
    78b0:	492e      	ldr	r1, [pc, #184]	; (796c <_spi_m_dma_init+0x15c>)
    78b2:	1c20      	adds	r0, r4, #0
    78b4:	bf18      	it	ne
    78b6:	2001      	movne	r0, #1
    78b8:	4b2d      	ldr	r3, [pc, #180]	; (7970 <_spi_m_dma_init+0x160>)
    78ba:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    78bc:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    78be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    78c2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    78c6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    78c8:	69e3      	ldr	r3, [r4, #28]
    78ca:	f013 0f03 	tst.w	r3, #3
    78ce:	d1fb      	bne.n	78c8 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    78d0:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    78d2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    78d6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    78da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    78de:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    78e0:	69e3      	ldr	r3, [r4, #28]
    78e2:	f013 0f17 	tst.w	r3, #23
    78e6:	d1fb      	bne.n	78e0 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    78e8:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    78ea:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    78ec:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    78ee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    78f2:	f105 0818 	add.w	r8, r5, #24
    78f6:	4620      	mov	r0, r4
    78f8:	4b1e      	ldr	r3, [pc, #120]	; (7974 <_spi_m_dma_init+0x164>)
    78fa:	4798      	blx	r3
    78fc:	4601      	mov	r1, r0
    78fe:	4640      	mov	r0, r8
    7900:	4f1d      	ldr	r7, [pc, #116]	; (7978 <_spi_m_dma_init+0x168>)
    7902:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7904:	69ab      	ldr	r3, [r5, #24]
    7906:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    7908:	69ab      	ldr	r3, [r5, #24]
    790a:	4a1c      	ldr	r2, [pc, #112]	; (797c <_spi_m_dma_init+0x16c>)
    790c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    790e:	69ab      	ldr	r3, [r5, #24]
    7910:	4e1b      	ldr	r6, [pc, #108]	; (7980 <_spi_m_dma_init+0x170>)
    7912:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    7914:	4620      	mov	r0, r4
    7916:	4b1b      	ldr	r3, [pc, #108]	; (7984 <_spi_m_dma_init+0x174>)
    7918:	4798      	blx	r3
    791a:	4601      	mov	r1, r0
    791c:	4640      	mov	r0, r8
    791e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7920:	69ab      	ldr	r3, [r5, #24]
    7922:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7924:	69ab      	ldr	r3, [r5, #24]
    7926:	4a18      	ldr	r2, [pc, #96]	; (7988 <_spi_m_dma_init+0x178>)
    7928:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    792a:	69ab      	ldr	r3, [r5, #24]
    792c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    792e:	2000      	movs	r0, #0
    7930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7934:	f06f 000c 	mvn.w	r0, #12
    7938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    793c:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7940:	490a      	ldr	r1, [pc, #40]	; (796c <_spi_m_dma_init+0x15c>)
    7942:	2000      	movs	r0, #0
    7944:	4b0a      	ldr	r3, [pc, #40]	; (7970 <_spi_m_dma_init+0x160>)
    7946:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7948:	f06f 000c 	mvn.w	r0, #12
    794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7950:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7954:	4905      	ldr	r1, [pc, #20]	; (796c <_spi_m_dma_init+0x15c>)
    7956:	2001      	movs	r0, #1
    7958:	4b05      	ldr	r3, [pc, #20]	; (7970 <_spi_m_dma_init+0x160>)
    795a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    795c:	f06f 000c 	mvn.w	r0, #12
    7960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7964:	000067ed 	.word	0x000067ed
    7968:	0000d188 	.word	0x0000d188
    796c:	0000d1ac 	.word	0x0000d1ac
    7970:	00005959 	.word	0x00005959
    7974:	00006a0d 	.word	0x00006a0d
    7978:	000061f5 	.word	0x000061f5
    797c:	00006a21 	.word	0x00006a21
    7980:	00006a39 	.word	0x00006a39
    7984:	000069f9 	.word	0x000069f9
    7988:	00006a2d 	.word	0x00006a2d

0000798c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    798c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    798e:	4604      	mov	r4, r0
    7990:	b160      	cbz	r0, 79ac <_spi_m_dma_enable+0x20>
    7992:	6800      	ldr	r0, [r0, #0]
    7994:	3000      	adds	r0, #0
    7996:	bf18      	it	ne
    7998:	2001      	movne	r0, #1
    799a:	f640 52c9 	movw	r2, #3529	; 0xdc9
    799e:	4904      	ldr	r1, [pc, #16]	; (79b0 <_spi_m_dma_enable+0x24>)
    79a0:	4b04      	ldr	r3, [pc, #16]	; (79b4 <_spi_m_dma_enable+0x28>)
    79a2:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    79a4:	6820      	ldr	r0, [r4, #0]
    79a6:	4b04      	ldr	r3, [pc, #16]	; (79b8 <_spi_m_dma_enable+0x2c>)
    79a8:	4798      	blx	r3
}
    79aa:	bd10      	pop	{r4, pc}
    79ac:	2000      	movs	r0, #0
    79ae:	e7f4      	b.n	799a <_spi_m_dma_enable+0xe>
    79b0:	0000d1ac 	.word	0x0000d1ac
    79b4:	00005959 	.word	0x00005959
    79b8:	00006915 	.word	0x00006915

000079bc <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    79bc:	b570      	push	{r4, r5, r6, lr}
    79be:	4605      	mov	r5, r0
    79c0:	4614      	mov	r4, r2
	switch (type) {
    79c2:	2901      	cmp	r1, #1
    79c4:	d00e      	beq.n	79e4 <_spi_m_dma_register_callback+0x28>
    79c6:	b111      	cbz	r1, 79ce <_spi_m_dma_register_callback+0x12>
    79c8:	2902      	cmp	r1, #2
    79ca:	d016      	beq.n	79fa <_spi_m_dma_register_callback+0x3e>
    79cc:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    79ce:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    79d0:	6800      	ldr	r0, [r0, #0]
    79d2:	4b13      	ldr	r3, [pc, #76]	; (7a20 <_spi_m_dma_register_callback+0x64>)
    79d4:	4798      	blx	r3
    79d6:	1c22      	adds	r2, r4, #0
    79d8:	bf18      	it	ne
    79da:	2201      	movne	r2, #1
    79dc:	2100      	movs	r1, #0
    79de:	4b11      	ldr	r3, [pc, #68]	; (7a24 <_spi_m_dma_register_callback+0x68>)
    79e0:	4798      	blx	r3
		break;
    79e2:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    79e4:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    79e6:	6800      	ldr	r0, [r0, #0]
    79e8:	4b0f      	ldr	r3, [pc, #60]	; (7a28 <_spi_m_dma_register_callback+0x6c>)
    79ea:	4798      	blx	r3
    79ec:	1c22      	adds	r2, r4, #0
    79ee:	bf18      	it	ne
    79f0:	2201      	movne	r2, #1
    79f2:	2100      	movs	r1, #0
    79f4:	4b0b      	ldr	r3, [pc, #44]	; (7a24 <_spi_m_dma_register_callback+0x68>)
    79f6:	4798      	blx	r3
		break;
    79f8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    79fa:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    79fc:	6800      	ldr	r0, [r0, #0]
    79fe:	4b0a      	ldr	r3, [pc, #40]	; (7a28 <_spi_m_dma_register_callback+0x6c>)
    7a00:	4798      	blx	r3
    7a02:	3400      	adds	r4, #0
    7a04:	bf18      	it	ne
    7a06:	2401      	movne	r4, #1
    7a08:	4622      	mov	r2, r4
    7a0a:	2101      	movs	r1, #1
    7a0c:	4e05      	ldr	r6, [pc, #20]	; (7a24 <_spi_m_dma_register_callback+0x68>)
    7a0e:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7a10:	6828      	ldr	r0, [r5, #0]
    7a12:	4b03      	ldr	r3, [pc, #12]	; (7a20 <_spi_m_dma_register_callback+0x64>)
    7a14:	4798      	blx	r3
    7a16:	4622      	mov	r2, r4
    7a18:	2101      	movs	r1, #1
    7a1a:	47b0      	blx	r6
    7a1c:	bd70      	pop	{r4, r5, r6, pc}
    7a1e:	bf00      	nop
    7a20:	000069f9 	.word	0x000069f9
    7a24:	000060cd 	.word	0x000060cd
    7a28:	00006a0d 	.word	0x00006a0d

00007a2c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    7a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a30:	4605      	mov	r5, r0
    7a32:	4689      	mov	r9, r1
    7a34:	4617      	mov	r7, r2
    7a36:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7a38:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7a3c:	4658      	mov	r0, fp
    7a3e:	4b46      	ldr	r3, [pc, #280]	; (7b58 <_spi_m_dma_transfer+0x12c>)
    7a40:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7a42:	2803      	cmp	r0, #3
    7a44:	d053      	beq.n	7aee <_spi_m_dma_transfer+0xc2>
    7a46:	2807      	cmp	r0, #7
    7a48:	bf08      	it	eq
    7a4a:	2201      	moveq	r2, #1
    7a4c:	d050      	beq.n	7af0 <_spi_m_dma_transfer+0xc4>
	return NULL;
    7a4e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    7a52:	4658      	mov	r0, fp
    7a54:	4b41      	ldr	r3, [pc, #260]	; (7b5c <_spi_m_dma_transfer+0x130>)
    7a56:	4798      	blx	r3
    7a58:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    7a5a:	4658      	mov	r0, fp
    7a5c:	4b40      	ldr	r3, [pc, #256]	; (7b60 <_spi_m_dma_transfer+0x134>)
    7a5e:	4798      	blx	r3
    7a60:	4604      	mov	r4, r0

	if (rxbuf) {
    7a62:	2f00      	cmp	r7, #0
    7a64:	d04b      	beq.n	7afe <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7a66:	2d00      	cmp	r5, #0
    7a68:	d047      	beq.n	7afa <_spi_m_dma_transfer+0xce>
    7a6a:	f11b 0000 	adds.w	r0, fp, #0
    7a6e:	bf18      	it	ne
    7a70:	2001      	movne	r0, #1
    7a72:	f640 5213 	movw	r2, #3347	; 0xd13
    7a76:	493b      	ldr	r1, [pc, #236]	; (7b64 <_spi_m_dma_transfer+0x138>)
    7a78:	4b3b      	ldr	r3, [pc, #236]	; (7b68 <_spi_m_dma_transfer+0x13c>)
    7a7a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    7a7c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7a7e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7a80:	f013 0f04 	tst.w	r3, #4
    7a84:	d107      	bne.n	7a96 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    7a86:	6853      	ldr	r3, [r2, #4]
    7a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7a8c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a8e:	69d3      	ldr	r3, [r2, #28]
    7a90:	f013 0f17 	tst.w	r3, #23
    7a94:	d1fb      	bne.n	7a8e <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7a96:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    7a98:	3128      	adds	r1, #40	; 0x28
    7a9a:	4630      	mov	r0, r6
    7a9c:	4b33      	ldr	r3, [pc, #204]	; (7b6c <_spi_m_dma_transfer+0x140>)
    7a9e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    7aa0:	4639      	mov	r1, r7
    7aa2:	4630      	mov	r0, r6
    7aa4:	4b32      	ldr	r3, [pc, #200]	; (7b70 <_spi_m_dma_transfer+0x144>)
    7aa6:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    7aa8:	4641      	mov	r1, r8
    7aaa:	4630      	mov	r0, r6
    7aac:	4b31      	ldr	r3, [pc, #196]	; (7b74 <_spi_m_dma_transfer+0x148>)
    7aae:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    7ab0:	2100      	movs	r1, #0
    7ab2:	4630      	mov	r0, r6
    7ab4:	4b30      	ldr	r3, [pc, #192]	; (7b78 <_spi_m_dma_transfer+0x14c>)
    7ab6:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    7ab8:	f1b9 0f00 	cmp.w	r9, #0
    7abc:	d039      	beq.n	7b32 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    7abe:	4649      	mov	r1, r9
    7ac0:	4620      	mov	r0, r4
    7ac2:	4b2a      	ldr	r3, [pc, #168]	; (7b6c <_spi_m_dma_transfer+0x140>)
    7ac4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7ac6:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7ac8:	3128      	adds	r1, #40	; 0x28
    7aca:	4620      	mov	r0, r4
    7acc:	4b28      	ldr	r3, [pc, #160]	; (7b70 <_spi_m_dma_transfer+0x144>)
    7ace:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    7ad0:	2101      	movs	r1, #1
    7ad2:	4620      	mov	r0, r4
    7ad4:	4b29      	ldr	r3, [pc, #164]	; (7b7c <_spi_m_dma_transfer+0x150>)
    7ad6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7ad8:	4641      	mov	r1, r8
    7ada:	4620      	mov	r0, r4
    7adc:	4b25      	ldr	r3, [pc, #148]	; (7b74 <_spi_m_dma_transfer+0x148>)
    7ade:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    7ae0:	2100      	movs	r1, #0
    7ae2:	4620      	mov	r0, r4
    7ae4:	4b24      	ldr	r3, [pc, #144]	; (7b78 <_spi_m_dma_transfer+0x14c>)
    7ae6:	4798      	blx	r3

	return ERR_NONE;
}
    7ae8:	2000      	movs	r0, #0
    7aea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    7aee:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    7af0:	4b23      	ldr	r3, [pc, #140]	; (7b80 <_spi_m_dma_transfer+0x154>)
    7af2:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    7af6:	4492      	add	sl, r2
    7af8:	e7ab      	b.n	7a52 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    7afa:	2000      	movs	r0, #0
    7afc:	e7b9      	b.n	7a72 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    7afe:	b1b5      	cbz	r5, 7b2e <_spi_m_dma_transfer+0x102>
    7b00:	f11b 0000 	adds.w	r0, fp, #0
    7b04:	bf18      	it	ne
    7b06:	2001      	movne	r0, #1
    7b08:	f640 521a 	movw	r2, #3354	; 0xd1a
    7b0c:	4915      	ldr	r1, [pc, #84]	; (7b64 <_spi_m_dma_transfer+0x138>)
    7b0e:	4b16      	ldr	r3, [pc, #88]	; (7b68 <_spi_m_dma_transfer+0x13c>)
    7b10:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    7b12:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7b14:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7b16:	f013 0f04 	tst.w	r3, #4
    7b1a:	d1cd      	bne.n	7ab8 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    7b1c:	6853      	ldr	r3, [r2, #4]
    7b1e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    7b22:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b24:	69d3      	ldr	r3, [r2, #28]
    7b26:	f013 0f17 	tst.w	r3, #23
    7b2a:	d1fb      	bne.n	7b24 <_spi_m_dma_transfer+0xf8>
    7b2c:	e7c4      	b.n	7ab8 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    7b2e:	2000      	movs	r0, #0
    7b30:	e7ea      	b.n	7b08 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    7b32:	f10a 010e 	add.w	r1, sl, #14
    7b36:	4620      	mov	r0, r4
    7b38:	4b0c      	ldr	r3, [pc, #48]	; (7b6c <_spi_m_dma_transfer+0x140>)
    7b3a:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7b3c:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7b3e:	3128      	adds	r1, #40	; 0x28
    7b40:	4620      	mov	r0, r4
    7b42:	4b0b      	ldr	r3, [pc, #44]	; (7b70 <_spi_m_dma_transfer+0x144>)
    7b44:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7b46:	2100      	movs	r1, #0
    7b48:	4620      	mov	r0, r4
    7b4a:	4b0c      	ldr	r3, [pc, #48]	; (7b7c <_spi_m_dma_transfer+0x150>)
    7b4c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7b4e:	4641      	mov	r1, r8
    7b50:	4620      	mov	r0, r4
    7b52:	4b08      	ldr	r3, [pc, #32]	; (7b74 <_spi_m_dma_transfer+0x148>)
    7b54:	4798      	blx	r3
    7b56:	e7c3      	b.n	7ae0 <_spi_m_dma_transfer+0xb4>
    7b58:	000067ed 	.word	0x000067ed
    7b5c:	00006a0d 	.word	0x00006a0d
    7b60:	000069f9 	.word	0x000069f9
    7b64:	0000d1ac 	.word	0x0000d1ac
    7b68:	00005959 	.word	0x00005959
    7b6c:	00006131 	.word	0x00006131
    7b70:	00006121 	.word	0x00006121
    7b74:	0000615d 	.word	0x0000615d
    7b78:	000061b5 	.word	0x000061b5
    7b7c:	00006141 	.word	0x00006141
    7b80:	0000d188 	.word	0x0000d188

00007b84 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    7b84:	4b03      	ldr	r3, [pc, #12]	; (7b94 <_delay_init+0x10>)
    7b86:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    7b8a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    7b8c:	2205      	movs	r2, #5
    7b8e:	601a      	str	r2, [r3, #0]
    7b90:	4770      	bx	lr
    7b92:	bf00      	nop
    7b94:	e000e010 	.word	0xe000e010

00007b98 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    7b98:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    7b9a:	b303      	cbz	r3, 7bde <_delay_cycles+0x46>
{
    7b9c:	b430      	push	{r4, r5}
    7b9e:	1e5d      	subs	r5, r3, #1
    7ba0:	b2ed      	uxtb	r5, r5
	while (n--) {
    7ba2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    7ba4:	4a12      	ldr	r2, [pc, #72]	; (7bf0 <_delay_cycles+0x58>)
    7ba6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    7baa:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    7bac:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7bae:	6813      	ldr	r3, [r2, #0]
    7bb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7bb4:	d0fb      	beq.n	7bae <_delay_cycles+0x16>
	while (n--) {
    7bb6:	3801      	subs	r0, #1
    7bb8:	b2c0      	uxtb	r0, r0
    7bba:	28ff      	cmp	r0, #255	; 0xff
    7bbc:	d1f5      	bne.n	7baa <_delay_cycles+0x12>
    7bbe:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    7bc2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    7bc6:	3101      	adds	r1, #1
    7bc8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    7bca:	4b09      	ldr	r3, [pc, #36]	; (7bf0 <_delay_cycles+0x58>)
    7bcc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7bce:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7bd0:	461a      	mov	r2, r3
    7bd2:	6813      	ldr	r3, [r2, #0]
    7bd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7bd8:	d0fb      	beq.n	7bd2 <_delay_cycles+0x3a>
		;
}
    7bda:	bc30      	pop	{r4, r5}
    7bdc:	4770      	bx	lr
	SysTick->LOAD = buf;
    7bde:	4b04      	ldr	r3, [pc, #16]	; (7bf0 <_delay_cycles+0x58>)
    7be0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7be2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7be4:	461a      	mov	r2, r3
    7be6:	6813      	ldr	r3, [r2, #0]
    7be8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7bec:	d0fb      	beq.n	7be6 <_delay_cycles+0x4e>
    7bee:	4770      	bx	lr
    7bf0:	e000e010 	.word	0xe000e010

00007bf4 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7bf4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7bf6:	6813      	ldr	r3, [r2, #0]
    7bf8:	f043 0302 	orr.w	r3, r3, #2
    7bfc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7bfe:	6913      	ldr	r3, [r2, #16]
    7c00:	f013 0f03 	tst.w	r3, #3
    7c04:	d1fb      	bne.n	7bfe <_tc_timer_start+0xa>
}
    7c06:	4770      	bx	lr

00007c08 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7c08:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7c0a:	6813      	ldr	r3, [r2, #0]
    7c0c:	f023 0302 	bic.w	r3, r3, #2
    7c10:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c12:	6913      	ldr	r3, [r2, #16]
    7c14:	f013 0f03 	tst.w	r3, #3
    7c18:	d1fb      	bne.n	7c12 <_tc_timer_stop+0xa>
}
    7c1a:	4770      	bx	lr

00007c1c <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    7c1c:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c1e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7c20:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c24:	2a02      	cmp	r2, #2
    7c26:	d00a      	beq.n	7c3e <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c28:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c2a:	f012 0f0c 	tst.w	r2, #12
    7c2e:	d10c      	bne.n	7c4a <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7c30:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7c32:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c34:	691a      	ldr	r2, [r3, #16]
    7c36:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7c3a:	d1fb      	bne.n	7c34 <_tc_timer_set_period+0x18>
    7c3c:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7c3e:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c40:	691a      	ldr	r2, [r3, #16]
    7c42:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7c46:	d1fb      	bne.n	7c40 <_tc_timer_set_period+0x24>
    7c48:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c4a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7c4c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c50:	2a01      	cmp	r2, #1
    7c52:	d000      	beq.n	7c56 <_tc_timer_set_period+0x3a>
    7c54:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7c56:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    7c58:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c5a:	691a      	ldr	r2, [r3, #16]
    7c5c:	f012 0f20 	tst.w	r2, #32
    7c60:	d1fb      	bne.n	7c5a <_tc_timer_set_period+0x3e>
    7c62:	e7f7      	b.n	7c54 <_tc_timer_set_period+0x38>

00007c64 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    7c64:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c66:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7c68:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c6c:	2a02      	cmp	r2, #2
    7c6e:	d00a      	beq.n	7c86 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c70:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c72:	f012 0f0c 	tst.w	r2, #12
    7c76:	d10c      	bne.n	7c92 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c78:	691a      	ldr	r2, [r3, #16]
    7c7a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7c7e:	d1fb      	bne.n	7c78 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7c80:	8b98      	ldrh	r0, [r3, #28]
    7c82:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    7c84:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c86:	691a      	ldr	r2, [r3, #16]
    7c88:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7c8c:	d1fb      	bne.n	7c86 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7c8e:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    7c90:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7c92:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7c94:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c98:	2a01      	cmp	r2, #1
    7c9a:	d001      	beq.n	7ca0 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    7c9c:	2000      	movs	r0, #0
}
    7c9e:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ca0:	691a      	ldr	r2, [r3, #16]
    7ca2:	f012 0f20 	tst.w	r2, #32
    7ca6:	d1fb      	bne.n	7ca0 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    7ca8:	7ed8      	ldrb	r0, [r3, #27]
    7caa:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    7cac:	4770      	bx	lr

00007cae <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7cae:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7cb0:	6913      	ldr	r3, [r2, #16]
    7cb2:	f013 0f03 	tst.w	r3, #3
    7cb6:	d1fb      	bne.n	7cb0 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7cb8:	6810      	ldr	r0, [r2, #0]
}
    7cba:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7cbe:	4770      	bx	lr

00007cc0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7cc0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    7cc2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7cc4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7cc6:	f012 0f01 	tst.w	r2, #1
    7cca:	d100      	bne.n	7cce <tc_interrupt_handler+0xe>
    7ccc:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7cce:	2201      	movs	r2, #1
    7cd0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    7cd2:	6803      	ldr	r3, [r0, #0]
    7cd4:	4798      	blx	r3
	}
}
    7cd6:	e7f9      	b.n	7ccc <tc_interrupt_handler+0xc>

00007cd8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7cd8:	b570      	push	{r4, r5, r6, lr}
    7cda:	b088      	sub	sp, #32
    7cdc:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7cde:	466c      	mov	r4, sp
    7ce0:	4d19      	ldr	r5, [pc, #100]	; (7d48 <get_tc_index+0x70>)
    7ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7ce6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7cea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7cee:	9b00      	ldr	r3, [sp, #0]
    7cf0:	42b3      	cmp	r3, r6
    7cf2:	d00c      	beq.n	7d0e <get_tc_index+0x36>
    7cf4:	4630      	mov	r0, r6
    7cf6:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7cf8:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7cfa:	f852 1b04 	ldr.w	r1, [r2], #4
    7cfe:	4281      	cmp	r1, r0
    7d00:	d006      	beq.n	7d10 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7d02:	3301      	adds	r3, #1
    7d04:	2b08      	cmp	r3, #8
    7d06:	d1f8      	bne.n	7cfa <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7d08:	2000      	movs	r0, #0
			return i;
    7d0a:	b240      	sxtb	r0, r0
    7d0c:	e013      	b.n	7d36 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7d0e:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    7d10:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7d14:	d015      	beq.n	7d42 <get_tc_index+0x6a>
    7d16:	2b01      	cmp	r3, #1
    7d18:	d00f      	beq.n	7d3a <get_tc_index+0x62>
    7d1a:	2b02      	cmp	r3, #2
    7d1c:	d00f      	beq.n	7d3e <get_tc_index+0x66>
    7d1e:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7d20:	bf08      	it	eq
    7d22:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    7d24:	d0f1      	beq.n	7d0a <get_tc_index+0x32>
	ASSERT(false);
    7d26:	f240 1267 	movw	r2, #359	; 0x167
    7d2a:	4908      	ldr	r1, [pc, #32]	; (7d4c <get_tc_index+0x74>)
    7d2c:	2000      	movs	r0, #0
    7d2e:	4b08      	ldr	r3, [pc, #32]	; (7d50 <get_tc_index+0x78>)
    7d30:	4798      	blx	r3
	return -1;
    7d32:	f04f 30ff 	mov.w	r0, #4294967295
}
    7d36:	b008      	add	sp, #32
    7d38:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7d3a:	2001      	movs	r0, #1
    7d3c:	e7e5      	b.n	7d0a <get_tc_index+0x32>
    7d3e:	2002      	movs	r0, #2
    7d40:	e7e3      	b.n	7d0a <get_tc_index+0x32>
    7d42:	2000      	movs	r0, #0
    7d44:	e7e1      	b.n	7d0a <get_tc_index+0x32>
    7d46:	bf00      	nop
    7d48:	0000d1c8 	.word	0x0000d1c8
    7d4c:	0000d238 	.word	0x0000d238
    7d50:	00005959 	.word	0x00005959

00007d54 <_tc_timer_init>:
{
    7d54:	b570      	push	{r4, r5, r6, lr}
    7d56:	4606      	mov	r6, r0
    7d58:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    7d5a:	4608      	mov	r0, r1
    7d5c:	4b71      	ldr	r3, [pc, #452]	; (7f24 <_tc_timer_init+0x1d0>)
    7d5e:	4798      	blx	r3
    7d60:	4605      	mov	r5, r0
	device->hw = hw;
    7d62:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7d64:	22a0      	movs	r2, #160	; 0xa0
    7d66:	4970      	ldr	r1, [pc, #448]	; (7f28 <_tc_timer_init+0x1d4>)
    7d68:	2001      	movs	r0, #1
    7d6a:	4b70      	ldr	r3, [pc, #448]	; (7f2c <_tc_timer_init+0x1d8>)
    7d6c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7d6e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7d70:	f013 0f01 	tst.w	r3, #1
    7d74:	d119      	bne.n	7daa <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d76:	6923      	ldr	r3, [r4, #16]
    7d78:	f013 0f03 	tst.w	r3, #3
    7d7c:	d1fb      	bne.n	7d76 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d7e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7d80:	f013 0f02 	tst.w	r3, #2
    7d84:	d00b      	beq.n	7d9e <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7d86:	6823      	ldr	r3, [r4, #0]
    7d88:	f023 0302 	bic.w	r3, r3, #2
    7d8c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d8e:	6923      	ldr	r3, [r4, #16]
    7d90:	f013 0f03 	tst.w	r3, #3
    7d94:	d1fb      	bne.n	7d8e <_tc_timer_init+0x3a>
    7d96:	6923      	ldr	r3, [r4, #16]
    7d98:	f013 0f02 	tst.w	r3, #2
    7d9c:	d1fb      	bne.n	7d96 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7d9e:	2301      	movs	r3, #1
    7da0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7da2:	6923      	ldr	r3, [r4, #16]
    7da4:	f013 0f03 	tst.w	r3, #3
    7da8:	d1fb      	bne.n	7da2 <_tc_timer_init+0x4e>
    7daa:	6923      	ldr	r3, [r4, #16]
    7dac:	f013 0f01 	tst.w	r3, #1
    7db0:	d1fb      	bne.n	7daa <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7db2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7db6:	4a5e      	ldr	r2, [pc, #376]	; (7f30 <_tc_timer_init+0x1dc>)
    7db8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7dbe:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7dc0:	6923      	ldr	r3, [r4, #16]
    7dc2:	f013 0f03 	tst.w	r3, #3
    7dc6:	d1fb      	bne.n	7dc0 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7dc8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7dcc:	4958      	ldr	r1, [pc, #352]	; (7f30 <_tc_timer_init+0x1dc>)
    7dce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7dd2:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7dd6:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7dda:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7ddc:	2301      	movs	r3, #1
    7dde:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7de0:	f002 020c 	and.w	r2, r2, #12
    7de4:	2a08      	cmp	r2, #8
    7de6:	d056      	beq.n	7e96 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7de8:	2a00      	cmp	r2, #0
    7dea:	d16b      	bne.n	7ec4 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7dec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7df0:	4a4f      	ldr	r2, [pc, #316]	; (7f30 <_tc_timer_init+0x1dc>)
    7df2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7df6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7df8:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7dfa:	6923      	ldr	r3, [r4, #16]
    7dfc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7e00:	d1fb      	bne.n	7dfa <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7e02:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7e06:	4a4a      	ldr	r2, [pc, #296]	; (7f30 <_tc_timer_init+0x1dc>)
    7e08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7e0c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7e0e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e10:	6923      	ldr	r3, [r4, #16]
    7e12:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7e16:	d1fb      	bne.n	7e10 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7e18:	2301      	movs	r3, #1
    7e1a:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    7e1c:	4b45      	ldr	r3, [pc, #276]	; (7f34 <_tc_timer_init+0x1e0>)
    7e1e:	429c      	cmp	r4, r3
    7e20:	d077      	beq.n	7f12 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    7e22:	4b45      	ldr	r3, [pc, #276]	; (7f38 <_tc_timer_init+0x1e4>)
    7e24:	429c      	cmp	r4, r3
    7e26:	d077      	beq.n	7f18 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    7e28:	4b44      	ldr	r3, [pc, #272]	; (7f3c <_tc_timer_init+0x1e8>)
    7e2a:	429c      	cmp	r4, r3
    7e2c:	d077      	beq.n	7f1e <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    7e2e:	4b44      	ldr	r3, [pc, #272]	; (7f40 <_tc_timer_init+0x1ec>)
    7e30:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    7e32:	bf04      	itt	eq
    7e34:	4b43      	ldreq	r3, [pc, #268]	; (7f44 <_tc_timer_init+0x1f0>)
    7e36:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    7e38:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7e3c:	4a3c      	ldr	r2, [pc, #240]	; (7f30 <_tc_timer_init+0x1dc>)
    7e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7e42:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7e46:	2b00      	cmp	r3, #0
    7e48:	db23      	blt.n	7e92 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e4a:	095a      	lsrs	r2, r3, #5
    7e4c:	f003 031f 	and.w	r3, r3, #31
    7e50:	2101      	movs	r1, #1
    7e52:	fa01 f303 	lsl.w	r3, r1, r3
    7e56:	3220      	adds	r2, #32
    7e58:	493b      	ldr	r1, [pc, #236]	; (7f48 <_tc_timer_init+0x1f4>)
    7e5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7e5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e62:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7e66:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7e6a:	4b31      	ldr	r3, [pc, #196]	; (7f30 <_tc_timer_init+0x1dc>)
    7e6c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7e70:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7e74:	2b00      	cmp	r3, #0
    7e76:	db0c      	blt.n	7e92 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e78:	0959      	lsrs	r1, r3, #5
    7e7a:	f003 031f 	and.w	r3, r3, #31
    7e7e:	2201      	movs	r2, #1
    7e80:	fa02 f303 	lsl.w	r3, r2, r3
    7e84:	4a30      	ldr	r2, [pc, #192]	; (7f48 <_tc_timer_init+0x1f4>)
    7e86:	f101 0060 	add.w	r0, r1, #96	; 0x60
    7e8a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    7e92:	2000      	movs	r0, #0
    7e94:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7e96:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7e9a:	4a25      	ldr	r2, [pc, #148]	; (7f30 <_tc_timer_init+0x1dc>)
    7e9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7ea2:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ea4:	6923      	ldr	r3, [r4, #16]
    7ea6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7eaa:	d1fb      	bne.n	7ea4 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7eac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7eb0:	4a1f      	ldr	r2, [pc, #124]	; (7f30 <_tc_timer_init+0x1dc>)
    7eb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7eb8:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7eba:	6923      	ldr	r3, [r4, #16]
    7ebc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ec0:	d1fb      	bne.n	7eba <_tc_timer_init+0x166>
    7ec2:	e7a9      	b.n	7e18 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7ec4:	2a04      	cmp	r2, #4
    7ec6:	d1a7      	bne.n	7e18 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7ec8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7ecc:	4a18      	ldr	r2, [pc, #96]	; (7f30 <_tc_timer_init+0x1dc>)
    7ece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7ed2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7ed6:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ed8:	6923      	ldr	r3, [r4, #16]
    7eda:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ede:	d1fb      	bne.n	7ed8 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7ee0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7ee4:	4a12      	ldr	r2, [pc, #72]	; (7f30 <_tc_timer_init+0x1dc>)
    7ee6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7eee:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ef0:	6923      	ldr	r3, [r4, #16]
    7ef2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ef6:	d1fb      	bne.n	7ef0 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7ef8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7efc:	4a0c      	ldr	r2, [pc, #48]	; (7f30 <_tc_timer_init+0x1dc>)
    7efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7f02:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    7f06:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f08:	6923      	ldr	r3, [r4, #16]
    7f0a:	f013 0f20 	tst.w	r3, #32
    7f0e:	d1fb      	bne.n	7f08 <_tc_timer_init+0x1b4>
    7f10:	e782      	b.n	7e18 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    7f12:	4b0c      	ldr	r3, [pc, #48]	; (7f44 <_tc_timer_init+0x1f0>)
    7f14:	601e      	str	r6, [r3, #0]
    7f16:	e78a      	b.n	7e2e <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    7f18:	4b0a      	ldr	r3, [pc, #40]	; (7f44 <_tc_timer_init+0x1f0>)
    7f1a:	605e      	str	r6, [r3, #4]
    7f1c:	e78c      	b.n	7e38 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    7f1e:	4b09      	ldr	r3, [pc, #36]	; (7f44 <_tc_timer_init+0x1f0>)
    7f20:	609e      	str	r6, [r3, #8]
    7f22:	e789      	b.n	7e38 <_tc_timer_init+0xe4>
    7f24:	00007cd9 	.word	0x00007cd9
    7f28:	0000d238 	.word	0x0000d238
    7f2c:	00005959 	.word	0x00005959
    7f30:	0000d1c8 	.word	0x0000d1c8
    7f34:	40003800 	.word	0x40003800
    7f38:	40003c00 	.word	0x40003c00
    7f3c:	4101a000 	.word	0x4101a000
    7f40:	4101c000 	.word	0x4101c000
    7f44:	20000998 	.word	0x20000998
    7f48:	e000e100 	.word	0xe000e100

00007f4c <_tc_timer_deinit>:
{
    7f4c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    7f4e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    7f50:	4620      	mov	r0, r4
    7f52:	4b18      	ldr	r3, [pc, #96]	; (7fb4 <_tc_timer_deinit+0x68>)
    7f54:	4798      	blx	r3
    7f56:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7f58:	22cd      	movs	r2, #205	; 0xcd
    7f5a:	4917      	ldr	r1, [pc, #92]	; (7fb8 <_tc_timer_deinit+0x6c>)
    7f5c:	2001      	movs	r0, #1
    7f5e:	4b17      	ldr	r3, [pc, #92]	; (7fbc <_tc_timer_deinit+0x70>)
    7f60:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7f62:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7f66:	4b16      	ldr	r3, [pc, #88]	; (7fc0 <_tc_timer_deinit+0x74>)
    7f68:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7f6c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7f70:	2b00      	cmp	r3, #0
    7f72:	db0d      	blt.n	7f90 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f74:	095a      	lsrs	r2, r3, #5
    7f76:	f003 031f 	and.w	r3, r3, #31
    7f7a:	2101      	movs	r1, #1
    7f7c:	fa01 f303 	lsl.w	r3, r1, r3
    7f80:	3220      	adds	r2, #32
    7f82:	4910      	ldr	r1, [pc, #64]	; (7fc4 <_tc_timer_deinit+0x78>)
    7f84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7f88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7f8c:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7f90:	6823      	ldr	r3, [r4, #0]
    7f92:	f023 0302 	bic.w	r3, r3, #2
    7f96:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f98:	6923      	ldr	r3, [r4, #16]
    7f9a:	f013 0f03 	tst.w	r3, #3
    7f9e:	d1fb      	bne.n	7f98 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7fa0:	6823      	ldr	r3, [r4, #0]
    7fa2:	f043 0301 	orr.w	r3, r3, #1
    7fa6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7fa8:	6923      	ldr	r3, [r4, #16]
    7faa:	f013 0f01 	tst.w	r3, #1
    7fae:	d1fb      	bne.n	7fa8 <_tc_timer_deinit+0x5c>
}
    7fb0:	bd38      	pop	{r3, r4, r5, pc}
    7fb2:	bf00      	nop
    7fb4:	00007cd9 	.word	0x00007cd9
    7fb8:	0000d238 	.word	0x0000d238
    7fbc:	00005959 	.word	0x00005959
    7fc0:	0000d1c8 	.word	0x0000d1c8
    7fc4:	e000e100 	.word	0xe000e100

00007fc8 <_tc_timer_set_irq>:
{
    7fc8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    7fca:	68c0      	ldr	r0, [r0, #12]
    7fcc:	4b09      	ldr	r3, [pc, #36]	; (7ff4 <_tc_timer_set_irq+0x2c>)
    7fce:	4798      	blx	r3
    7fd0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    7fd2:	f44f 7291 	mov.w	r2, #290	; 0x122
    7fd6:	4908      	ldr	r1, [pc, #32]	; (7ff8 <_tc_timer_set_irq+0x30>)
    7fd8:	2001      	movs	r0, #1
    7fda:	4b08      	ldr	r3, [pc, #32]	; (7ffc <_tc_timer_set_irq+0x34>)
    7fdc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    7fde:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7fe2:	4b07      	ldr	r3, [pc, #28]	; (8000 <_tc_timer_set_irq+0x38>)
    7fe4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    7fe8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    7fec:	4b05      	ldr	r3, [pc, #20]	; (8004 <_tc_timer_set_irq+0x3c>)
    7fee:	4798      	blx	r3
    7ff0:	bd10      	pop	{r4, pc}
    7ff2:	bf00      	nop
    7ff4:	00007cd9 	.word	0x00007cd9
    7ff8:	0000d238 	.word	0x0000d238
    7ffc:	00005959 	.word	0x00005959
    8000:	0000d1c8 	.word	0x0000d1c8
    8004:	00005eed 	.word	0x00005eed

00008008 <_tc_get_timer>:
}
    8008:	4800      	ldr	r0, [pc, #0]	; (800c <_tc_get_timer+0x4>)
    800a:	4770      	bx	lr
    800c:	20000378 	.word	0x20000378

00008010 <TC0_Handler>:
{
    8010:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    8012:	4b02      	ldr	r3, [pc, #8]	; (801c <TC0_Handler+0xc>)
    8014:	6818      	ldr	r0, [r3, #0]
    8016:	4b02      	ldr	r3, [pc, #8]	; (8020 <TC0_Handler+0x10>)
    8018:	4798      	blx	r3
    801a:	bd08      	pop	{r3, pc}
    801c:	20000998 	.word	0x20000998
    8020:	00007cc1 	.word	0x00007cc1

00008024 <TC1_Handler>:
{
    8024:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    8026:	4b02      	ldr	r3, [pc, #8]	; (8030 <TC1_Handler+0xc>)
    8028:	6858      	ldr	r0, [r3, #4]
    802a:	4b02      	ldr	r3, [pc, #8]	; (8034 <TC1_Handler+0x10>)
    802c:	4798      	blx	r3
    802e:	bd08      	pop	{r3, pc}
    8030:	20000998 	.word	0x20000998
    8034:	00007cc1 	.word	0x00007cc1

00008038 <TC2_Handler>:
{
    8038:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    803a:	4b02      	ldr	r3, [pc, #8]	; (8044 <TC2_Handler+0xc>)
    803c:	6898      	ldr	r0, [r3, #8]
    803e:	4b02      	ldr	r3, [pc, #8]	; (8048 <TC2_Handler+0x10>)
    8040:	4798      	blx	r3
    8042:	bd08      	pop	{r3, pc}
    8044:	20000998 	.word	0x20000998
    8048:	00007cc1 	.word	0x00007cc1

0000804c <TC3_Handler>:
{
    804c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    804e:	4b02      	ldr	r3, [pc, #8]	; (8058 <TC3_Handler+0xc>)
    8050:	68d8      	ldr	r0, [r3, #12]
    8052:	4b02      	ldr	r3, [pc, #8]	; (805c <TC3_Handler+0x10>)
    8054:	4798      	blx	r3
    8056:	bd08      	pop	{r3, pc}
    8058:	20000998 	.word	0x20000998
    805c:	00007cc1 	.word	0x00007cc1

00008060 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8060:	2000      	movs	r0, #0
    8062:	4770      	bx	lr

00008064 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8064:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8066:	7c83      	ldrb	r3, [r0, #18]
    8068:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    806c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    806e:	f002 0107 	and.w	r1, r2, #7
    8072:	2901      	cmp	r1, #1
    8074:	d00b      	beq.n	808e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8076:	015a      	lsls	r2, r3, #5
    8078:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    807c:	2110      	movs	r1, #16
    807e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8082:	015b      	lsls	r3, r3, #5
    8084:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8088:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    808c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    808e:	f012 0f40 	tst.w	r2, #64	; 0x40
    8092:	d00c      	beq.n	80ae <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    8094:	7cc2      	ldrb	r2, [r0, #19]
    8096:	f36f 1286 	bfc	r2, #6, #1
    809a:	74c2      	strb	r2, [r0, #19]
    809c:	015a      	lsls	r2, r3, #5
    809e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    80a2:	2180      	movs	r1, #128	; 0x80
    80a4:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    80a8:	2140      	movs	r1, #64	; 0x40
    80aa:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    80ae:	7cc2      	ldrb	r2, [r0, #19]
    80b0:	f36f 02c3 	bfc	r2, #3, #1
    80b4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    80b6:	490a      	ldr	r1, [pc, #40]	; (80e0 <_usb_d_dev_handle_setup+0x7c>)
    80b8:	015a      	lsls	r2, r3, #5
    80ba:	188c      	adds	r4, r1, r2
    80bc:	2500      	movs	r5, #0
    80be:	72a5      	strb	r5, [r4, #10]
    80c0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    80c2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    80c6:	246f      	movs	r4, #111	; 0x6f
    80c8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    80cc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    80d0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    80d4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    80d8:	7c80      	ldrb	r0, [r0, #18]
    80da:	4798      	blx	r3
    80dc:	bd38      	pop	{r3, r4, r5, pc}
    80de:	bf00      	nop
    80e0:	200009a8 	.word	0x200009a8

000080e4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    80e4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    80e6:	2320      	movs	r3, #32
    80e8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    80ec:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    80ee:	7c83      	ldrb	r3, [r0, #18]
    80f0:	f003 030f 	and.w	r3, r3, #15
    80f4:	015b      	lsls	r3, r3, #5
    80f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    80fa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    80fe:	4b04      	ldr	r3, [pc, #16]	; (8110 <_usb_d_dev_handle_stall+0x2c>)
    8100:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8104:	6882      	ldr	r2, [r0, #8]
    8106:	2101      	movs	r1, #1
    8108:	7c80      	ldrb	r0, [r0, #18]
    810a:	4798      	blx	r3
    810c:	bd08      	pop	{r3, pc}
    810e:	bf00      	nop
    8110:	200009a8 	.word	0x200009a8

00008114 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    8114:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8116:	7c84      	ldrb	r4, [r0, #18]
    8118:	2cff      	cmp	r4, #255	; 0xff
    811a:	d003      	beq.n	8124 <_usb_d_dev_trans_done+0x10>
    811c:	7cc3      	ldrb	r3, [r0, #19]
    811e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8122:	d100      	bne.n	8126 <_usb_d_dev_trans_done+0x12>
    8124:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    8126:	7cc2      	ldrb	r2, [r0, #19]
    8128:	f36f 1286 	bfc	r2, #6, #1
    812c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    812e:	4a03      	ldr	r2, [pc, #12]	; (813c <_usb_d_dev_trans_done+0x28>)
    8130:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    8134:	6882      	ldr	r2, [r0, #8]
    8136:	4620      	mov	r0, r4
    8138:	47a8      	blx	r5
    813a:	e7f3      	b.n	8124 <_usb_d_dev_trans_done+0x10>
    813c:	200009a8 	.word	0x200009a8

00008140 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8140:	b530      	push	{r4, r5, lr}
    8142:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8144:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    8146:	2425      	movs	r4, #37	; 0x25
    8148:	f88d 4004 	strb.w	r4, [sp, #4]
    814c:	244a      	movs	r4, #74	; 0x4a
    814e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8152:	2bff      	cmp	r3, #255	; 0xff
    8154:	d01e      	beq.n	8194 <_usb_d_dev_trans_stop+0x54>
    8156:	7cc4      	ldrb	r4, [r0, #19]
    8158:	f014 0f40 	tst.w	r4, #64	; 0x40
    815c:	d01a      	beq.n	8194 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    815e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8162:	b1c9      	cbz	r1, 8198 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8164:	0163      	lsls	r3, r4, #5
    8166:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    816a:	2580      	movs	r5, #128	; 0x80
    816c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8170:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8172:	a902      	add	r1, sp, #8
    8174:	440b      	add	r3, r1
    8176:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    817a:	0163      	lsls	r3, r4, #5
    817c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8180:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8184:	0163      	lsls	r3, r4, #5
    8186:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    818a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    818e:	4611      	mov	r1, r2
    8190:	4b05      	ldr	r3, [pc, #20]	; (81a8 <_usb_d_dev_trans_stop+0x68>)
    8192:	4798      	blx	r3
}
    8194:	b003      	add	sp, #12
    8196:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8198:	0163      	lsls	r3, r4, #5
    819a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    819e:	2540      	movs	r5, #64	; 0x40
    81a0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    81a4:	e7e4      	b.n	8170 <_usb_d_dev_trans_stop+0x30>
    81a6:	bf00      	nop
    81a8:	00008115 	.word	0x00008115

000081ac <_usb_d_dev_handle_trfail>:
{
    81ac:	b530      	push	{r4, r5, lr}
    81ae:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    81b0:	7c83      	ldrb	r3, [r0, #18]
    81b2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    81b6:	2204      	movs	r2, #4
    81b8:	f88d 2004 	strb.w	r2, [sp, #4]
    81bc:	2208      	movs	r2, #8
    81be:	f88d 2005 	strb.w	r2, [sp, #5]
    81c2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    81c4:	460c      	mov	r4, r1
    81c6:	b391      	cbz	r1, 822e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    81c8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    81cc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    81d0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    81d4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    81d8:	4a32      	ldr	r2, [pc, #200]	; (82a4 <_usb_d_dev_handle_trfail+0xf8>)
    81da:	440a      	add	r2, r1
    81dc:	7a91      	ldrb	r1, [r2, #10]
    81de:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    81e0:	2d02      	cmp	r5, #2
    81e2:	d02c      	beq.n	823e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    81e4:	f011 0f02 	tst.w	r1, #2
    81e8:	d045      	beq.n	8276 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    81ea:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    81ec:	7a91      	ldrb	r1, [r2, #10]
    81ee:	f36f 0141 	bfc	r1, #1, #1
    81f2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    81f4:	aa02      	add	r2, sp, #8
    81f6:	4422      	add	r2, r4
    81f8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    81fc:	015a      	lsls	r2, r3, #5
    81fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8202:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8206:	015b      	lsls	r3, r3, #5
    8208:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    820c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8210:	f005 0307 	and.w	r3, r5, #7
    8214:	2b01      	cmp	r3, #1
    8216:	d143      	bne.n	82a0 <_usb_d_dev_handle_trfail+0xf4>
    8218:	7cc3      	ldrb	r3, [r0, #19]
    821a:	f013 0f40 	tst.w	r3, #64	; 0x40
    821e:	d03f      	beq.n	82a0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8220:	09d9      	lsrs	r1, r3, #7
    8222:	428c      	cmp	r4, r1
    8224:	d03c      	beq.n	82a0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8226:	2200      	movs	r2, #0
    8228:	4b1f      	ldr	r3, [pc, #124]	; (82a8 <_usb_d_dev_handle_trfail+0xfc>)
    822a:	4798      	blx	r3
    822c:	e038      	b.n	82a0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    822e:	0159      	lsls	r1, r3, #5
    8230:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8234:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8238:	f005 0507 	and.w	r5, r5, #7
    823c:	e7ca      	b.n	81d4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    823e:	f011 0f01 	tst.w	r1, #1
    8242:	d0cf      	beq.n	81e4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8244:	7a91      	ldrb	r1, [r2, #10]
    8246:	f36f 0100 	bfc	r1, #0, #1
    824a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    824c:	aa02      	add	r2, sp, #8
    824e:	4422      	add	r2, r4
    8250:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8254:	015a      	lsls	r2, r3, #5
    8256:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    825a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    825e:	015b      	lsls	r3, r3, #5
    8260:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8264:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8268:	2204      	movs	r2, #4
    826a:	1c21      	adds	r1, r4, #0
    826c:	bf18      	it	ne
    826e:	2101      	movne	r1, #1
    8270:	4b0d      	ldr	r3, [pc, #52]	; (82a8 <_usb_d_dev_handle_trfail+0xfc>)
    8272:	4798      	blx	r3
    8274:	e014      	b.n	82a0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    8276:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    827a:	4a0a      	ldr	r2, [pc, #40]	; (82a4 <_usb_d_dev_handle_trfail+0xf8>)
    827c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8280:	2100      	movs	r1, #0
    8282:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8284:	aa02      	add	r2, sp, #8
    8286:	4414      	add	r4, r2
    8288:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    828c:	015a      	lsls	r2, r3, #5
    828e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8292:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8296:	015b      	lsls	r3, r3, #5
    8298:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    829c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    82a0:	b003      	add	sp, #12
    82a2:	bd30      	pop	{r4, r5, pc}
    82a4:	200009a8 	.word	0x200009a8
    82a8:	00008141 	.word	0x00008141

000082ac <_usb_d_dev_reset_epts>:
{
    82ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82b0:	4d0c      	ldr	r5, [pc, #48]	; (82e4 <_usb_d_dev_reset_epts+0x38>)
    82b2:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    82b6:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    82ba:	f04f 0803 	mov.w	r8, #3
    82be:	4f0a      	ldr	r7, [pc, #40]	; (82e8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    82c0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    82c2:	4641      	mov	r1, r8
    82c4:	4620      	mov	r0, r4
    82c6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    82c8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    82ca:	2300      	movs	r3, #0
    82cc:	74e3      	strb	r3, [r4, #19]
    82ce:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    82d0:	42ac      	cmp	r4, r5
    82d2:	d1f6      	bne.n	82c2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    82d4:	22c0      	movs	r2, #192	; 0xc0
    82d6:	4619      	mov	r1, r3
    82d8:	4802      	ldr	r0, [pc, #8]	; (82e4 <_usb_d_dev_reset_epts+0x38>)
    82da:	4b04      	ldr	r3, [pc, #16]	; (82ec <_usb_d_dev_reset_epts+0x40>)
    82dc:	4798      	blx	r3
    82de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82e2:	bf00      	nop
    82e4:	200009a8 	.word	0x200009a8
    82e8:	00008115 	.word	0x00008115
    82ec:	0000b9c3 	.word	0x0000b9c3

000082f0 <_usb_d_dev_in_next>:
{
    82f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82f4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    82f6:	7c84      	ldrb	r4, [r0, #18]
    82f8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    82fc:	4688      	mov	r8, r1
    82fe:	2900      	cmp	r1, #0
    8300:	f000 80a0 	beq.w	8444 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8304:	4b58      	ldr	r3, [pc, #352]	; (8468 <_usb_d_dev_in_next+0x178>)
    8306:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    830a:	6958      	ldr	r0, [r3, #20]
    830c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8310:	8a2b      	ldrh	r3, [r5, #16]
    8312:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8316:	4293      	cmp	r3, r2
    8318:	f000 808e 	beq.w	8438 <_usb_d_dev_in_next+0x148>
    831c:	3b01      	subs	r3, #1
    831e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8320:	7cef      	ldrb	r7, [r5, #19]
    8322:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    8326:	f1b8 0f00 	cmp.w	r8, #0
    832a:	d005      	beq.n	8338 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    832c:	0162      	lsls	r2, r4, #5
    832e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8332:	2302      	movs	r3, #2
    8334:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8338:	68a9      	ldr	r1, [r5, #8]
    833a:	eb0e 0301 	add.w	r3, lr, r1
    833e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8340:	686e      	ldr	r6, [r5, #4]
    8342:	42b3      	cmp	r3, r6
    8344:	d23f      	bcs.n	83c6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    8346:	1af6      	subs	r6, r6, r3
    8348:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    834a:	7cea      	ldrb	r2, [r5, #19]
    834c:	f012 0f20 	tst.w	r2, #32
    8350:	d02d      	beq.n	83ae <_usb_d_dev_in_next+0xbe>
    8352:	8a2a      	ldrh	r2, [r5, #16]
    8354:	4296      	cmp	r6, r2
    8356:	bf28      	it	cs
    8358:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    835a:	6829      	ldr	r1, [r5, #0]
    835c:	4632      	mov	r2, r6
    835e:	4419      	add	r1, r3
    8360:	68e8      	ldr	r0, [r5, #12]
    8362:	4b42      	ldr	r3, [pc, #264]	; (846c <_usb_d_dev_in_next+0x17c>)
    8364:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8366:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8368:	4b3f      	ldr	r3, [pc, #252]	; (8468 <_usb_d_dev_in_next+0x178>)
    836a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    836e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8370:	4b3d      	ldr	r3, [pc, #244]	; (8468 <_usb_d_dev_in_next+0x178>)
    8372:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8376:	695a      	ldr	r2, [r3, #20]
    8378:	f366 020d 	bfi	r2, r6, #0, #14
    837c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    837e:	695a      	ldr	r2, [r3, #20]
    8380:	f36f 329b 	bfc	r2, #14, #14
    8384:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8386:	f1b8 0f00 	cmp.w	r8, #0
    838a:	d108      	bne.n	839e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    838c:	2f01      	cmp	r7, #1
    838e:	bf0c      	ite	eq
    8390:	224e      	moveq	r2, #78	; 0x4e
    8392:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8394:	0163      	lsls	r3, r4, #5
    8396:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    839a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    839e:	0164      	lsls	r4, r4, #5
    83a0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    83a4:	2380      	movs	r3, #128	; 0x80
    83a6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    83aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83ae:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    83b2:	bf28      	it	cs
    83b4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    83b8:	6829      	ldr	r1, [r5, #0]
    83ba:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    83bc:	4a2a      	ldr	r2, [pc, #168]	; (8468 <_usb_d_dev_in_next+0x178>)
    83be:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    83c2:	6113      	str	r3, [r2, #16]
    83c4:	e7d4      	b.n	8370 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    83c6:	7ceb      	ldrb	r3, [r5, #19]
    83c8:	f013 0f10 	tst.w	r3, #16
    83cc:	d00f      	beq.n	83ee <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    83ce:	7ceb      	ldrb	r3, [r5, #19]
    83d0:	f36f 1304 	bfc	r3, #4, #1
    83d4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    83d6:	4b24      	ldr	r3, [pc, #144]	; (8468 <_usb_d_dev_in_next+0x178>)
    83d8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    83dc:	695a      	ldr	r2, [r3, #20]
    83de:	f36f 020d 	bfc	r2, #0, #14
    83e2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    83e4:	695a      	ldr	r2, [r3, #20]
    83e6:	f36f 329b 	bfc	r2, #14, #14
    83ea:	615a      	str	r2, [r3, #20]
    83ec:	e7cb      	b.n	8386 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    83ee:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    83f0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    83f4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    83f8:	bf0c      	ite	eq
    83fa:	234b      	moveq	r3, #75	; 0x4b
    83fc:	234a      	movne	r3, #74	; 0x4a
    83fe:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    8402:	8a2a      	ldrh	r2, [r5, #16]
    8404:	ea00 030e 	and.w	r3, r0, lr
    8408:	429a      	cmp	r2, r3
    840a:	d005      	beq.n	8418 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    840c:	2100      	movs	r1, #0
    840e:	4628      	mov	r0, r5
    8410:	4b17      	ldr	r3, [pc, #92]	; (8470 <_usb_d_dev_in_next+0x180>)
    8412:	4798      	blx	r3
	return;
    8414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    8418:	7ceb      	ldrb	r3, [r5, #19]
    841a:	f36f 1386 	bfc	r3, #6, #1
    841e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8420:	4b11      	ldr	r3, [pc, #68]	; (8468 <_usb_d_dev_in_next+0x178>)
    8422:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8426:	68a9      	ldr	r1, [r5, #8]
    8428:	7ca8      	ldrb	r0, [r5, #18]
    842a:	4798      	blx	r3
    842c:	b9d0      	cbnz	r0, 8464 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    842e:	7ceb      	ldrb	r3, [r5, #19]
    8430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8434:	74eb      	strb	r3, [r5, #19]
    8436:	e7e9      	b.n	840c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8438:	7cef      	ldrb	r7, [r5, #19]
    843a:	f007 0707 	and.w	r7, r7, #7
    843e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8442:	e773      	b.n	832c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8444:	8a03      	ldrh	r3, [r0, #16]
    8446:	f240 32ff 	movw	r2, #1023	; 0x3ff
    844a:	4293      	cmp	r3, r2
    844c:	d107      	bne.n	845e <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    844e:	7cef      	ldrb	r7, [r5, #19]
    8450:	f007 0707 	and.w	r7, r7, #7
    8454:	f04f 0e00 	mov.w	lr, #0
    8458:	f240 30ff 	movw	r0, #1023	; 0x3ff
    845c:	e76c      	b.n	8338 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    845e:	f04f 0e00 	mov.w	lr, #0
    8462:	e75b      	b.n	831c <_usb_d_dev_in_next+0x2c>
    8464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8468:	200009a8 	.word	0x200009a8
    846c:	0000b9ad 	.word	0x0000b9ad
    8470:	00008115 	.word	0x00008115

00008474 <_usb_d_dev_out_next>:
{
    8474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8478:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    847a:	7c85      	ldrb	r5, [r0, #18]
    847c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8480:	4689      	mov	r9, r1
    8482:	2900      	cmp	r1, #0
    8484:	d056      	beq.n	8534 <_usb_d_dev_out_next+0xc0>
    8486:	4b74      	ldr	r3, [pc, #464]	; (8658 <_usb_d_dev_out_next+0x1e4>)
    8488:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    848c:	685a      	ldr	r2, [r3, #4]
    848e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8492:	685f      	ldr	r7, [r3, #4]
    8494:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8498:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    849a:	8a06      	ldrh	r6, [r0, #16]
    849c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    84a0:	429e      	cmp	r6, r3
    84a2:	f000 80ba 	beq.w	861a <_usb_d_dev_out_next+0x1a6>
    84a6:	3e01      	subs	r6, #1
    84a8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    84aa:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    84ae:	f894 8013 	ldrb.w	r8, [r4, #19]
    84b2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    84b6:	f1b9 0f00 	cmp.w	r9, #0
    84ba:	d005      	beq.n	84c8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    84bc:	016b      	lsls	r3, r5, #5
    84be:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    84c2:	2201      	movs	r2, #1
    84c4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    84c8:	7ce3      	ldrb	r3, [r4, #19]
    84ca:	f013 0f20 	tst.w	r3, #32
    84ce:	d00d      	beq.n	84ec <_usb_d_dev_out_next+0x78>
    84d0:	6862      	ldr	r2, [r4, #4]
    84d2:	2a00      	cmp	r2, #0
    84d4:	d037      	beq.n	8546 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    84d6:	68a0      	ldr	r0, [r4, #8]
    84d8:	1a12      	subs	r2, r2, r0
    84da:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    84dc:	6823      	ldr	r3, [r4, #0]
    84de:	42ba      	cmp	r2, r7
    84e0:	bf28      	it	cs
    84e2:	463a      	movcs	r2, r7
    84e4:	68e1      	ldr	r1, [r4, #12]
    84e6:	4418      	add	r0, r3
    84e8:	4b5c      	ldr	r3, [pc, #368]	; (865c <_usb_d_dev_out_next+0x1e8>)
    84ea:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    84ec:	6863      	ldr	r3, [r4, #4]
    84ee:	b353      	cbz	r3, 8546 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    84f0:	f1b9 0f00 	cmp.w	r9, #0
    84f4:	d040      	beq.n	8578 <_usb_d_dev_out_next+0x104>
    84f6:	8a22      	ldrh	r2, [r4, #16]
    84f8:	42ba      	cmp	r2, r7
    84fa:	d93d      	bls.n	8578 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    84fc:	7ce3      	ldrb	r3, [r4, #19]
    84fe:	f36f 1304 	bfc	r3, #4, #1
    8502:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    8504:	68a3      	ldr	r3, [r4, #8]
    8506:	445b      	add	r3, fp
    8508:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    850a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    850e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    8512:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8516:	bf0c      	ite	eq
    8518:	222d      	moveq	r2, #45	; 0x2d
    851a:	2225      	movne	r2, #37	; 0x25
    851c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8520:	b915      	cbnz	r5, 8528 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8522:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8524:	4b4c      	ldr	r3, [pc, #304]	; (8658 <_usb_d_dev_out_next+0x1e4>)
    8526:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8528:	2100      	movs	r1, #0
    852a:	4620      	mov	r0, r4
    852c:	4b4c      	ldr	r3, [pc, #304]	; (8660 <_usb_d_dev_out_next+0x1ec>)
    852e:	4798      	blx	r3
	return;
    8530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8534:	8a06      	ldrh	r6, [r0, #16]
    8536:	f240 33ff 	movw	r3, #1023	; 0x3ff
    853a:	429e      	cmp	r6, r3
    853c:	d07b      	beq.n	8636 <_usb_d_dev_out_next+0x1c2>
    853e:	f04f 0b00 	mov.w	fp, #0
    8542:	46da      	mov	sl, fp
    8544:	e7af      	b.n	84a6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8546:	7ce3      	ldrb	r3, [r4, #19]
    8548:	f013 0f10 	tst.w	r3, #16
    854c:	d06c      	beq.n	8628 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    854e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8550:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8554:	f043 0320 	orr.w	r3, r3, #32
    8558:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    855a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    855c:	493e      	ldr	r1, [pc, #248]	; (8658 <_usb_d_dev_out_next+0x1e4>)
    855e:	016a      	lsls	r2, r5, #5
    8560:	188b      	adds	r3, r1, r2
    8562:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8564:	8a21      	ldrh	r1, [r4, #16]
    8566:	685a      	ldr	r2, [r3, #4]
    8568:	f361 329b 	bfi	r2, r1, #14, #14
    856c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    856e:	685a      	ldr	r2, [r3, #4]
    8570:	f36f 020d 	bfc	r2, #0, #14
    8574:	605a      	str	r2, [r3, #4]
    8576:	e01d      	b.n	85b4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8578:	68a2      	ldr	r2, [r4, #8]
    857a:	4452      	add	r2, sl
    857c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    857e:	4293      	cmp	r3, r2
    8580:	d9c3      	bls.n	850a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8582:	1a9b      	subs	r3, r3, r2
    8584:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8586:	7ce1      	ldrb	r1, [r4, #19]
    8588:	f011 0f20 	tst.w	r1, #32
    858c:	d026      	beq.n	85dc <_usb_d_dev_out_next+0x168>
    858e:	8a22      	ldrh	r2, [r4, #16]
    8590:	4293      	cmp	r3, r2
    8592:	bf28      	it	cs
    8594:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8596:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8598:	016a      	lsls	r2, r5, #5
    859a:	492f      	ldr	r1, [pc, #188]	; (8658 <_usb_d_dev_out_next+0x1e4>)
    859c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    859e:	4a2e      	ldr	r2, [pc, #184]	; (8658 <_usb_d_dev_out_next+0x1e4>)
    85a0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    85a4:	6851      	ldr	r1, [r2, #4]
    85a6:	f363 319b 	bfi	r1, r3, #14, #14
    85aa:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    85ac:	6853      	ldr	r3, [r2, #4]
    85ae:	f36f 030d 	bfc	r3, #0, #14
    85b2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    85b4:	f1b9 0f00 	cmp.w	r9, #0
    85b8:	d108      	bne.n	85cc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    85ba:	f1b8 0f01 	cmp.w	r8, #1
    85be:	d025      	beq.n	860c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    85c0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    85c2:	016b      	lsls	r3, r5, #5
    85c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    85c8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    85cc:	016d      	lsls	r5, r5, #5
    85ce:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    85d2:	2340      	movs	r3, #64	; 0x40
    85d4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    85d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    85dc:	8a21      	ldrh	r1, [r4, #16]
    85de:	428b      	cmp	r3, r1
    85e0:	d90a      	bls.n	85f8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    85e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    85e6:	d80e      	bhi.n	8606 <_usb_d_dev_out_next+0x192>
    85e8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    85ec:	6821      	ldr	r1, [r4, #0]
    85ee:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    85f0:	0169      	lsls	r1, r5, #5
    85f2:	4819      	ldr	r0, [pc, #100]	; (8658 <_usb_d_dev_out_next+0x1e4>)
    85f4:	5042      	str	r2, [r0, r1]
    85f6:	e7d2      	b.n	859e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    85f8:	428b      	cmp	r3, r1
    85fa:	d2f7      	bcs.n	85ec <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    85fc:	7ce1      	ldrb	r1, [r4, #19]
    85fe:	f041 0120 	orr.w	r1, r1, #32
    8602:	74e1      	strb	r1, [r4, #19]
    8604:	e7f2      	b.n	85ec <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    8606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    860a:	e7ef      	b.n	85ec <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    860c:	4b12      	ldr	r3, [pc, #72]	; (8658 <_usb_d_dev_out_next+0x1e4>)
    860e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    8612:	2200      	movs	r2, #0
    8614:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8616:	222d      	movs	r2, #45	; 0x2d
    8618:	e7d3      	b.n	85c2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    861a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    861e:	f890 8013 	ldrb.w	r8, [r0, #19]
    8622:	f008 0807 	and.w	r8, r8, #7
    8626:	e749      	b.n	84bc <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8628:	f1b9 0f00 	cmp.w	r9, #0
    862c:	d10b      	bne.n	8646 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    862e:	68a3      	ldr	r3, [r4, #8]
    8630:	4453      	add	r3, sl
    8632:	60a3      	str	r3, [r4, #8]
    8634:	e769      	b.n	850a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8636:	f890 8013 	ldrb.w	r8, [r0, #19]
    863a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    863e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8640:	46bb      	mov	fp, r7
    8642:	46ba      	mov	sl, r7
    8644:	e740      	b.n	84c8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8646:	8a23      	ldrh	r3, [r4, #16]
    8648:	42bb      	cmp	r3, r7
    864a:	f63f af57 	bhi.w	84fc <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    864e:	68a3      	ldr	r3, [r4, #8]
    8650:	4453      	add	r3, sl
    8652:	60a3      	str	r3, [r4, #8]
    8654:	e759      	b.n	850a <_usb_d_dev_out_next+0x96>
    8656:	bf00      	nop
    8658:	200009a8 	.word	0x200009a8
    865c:	0000b9ad 	.word	0x0000b9ad
    8660:	00008115 	.word	0x00008115

00008664 <_usb_d_dev_handler>:
{
    8664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8668:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    866c:	8c1e      	ldrh	r6, [r3, #32]
    866e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8670:	b146      	cbz	r6, 8684 <_usb_d_dev_handler+0x20>
    8672:	4d96      	ldr	r5, [pc, #600]	; (88cc <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8674:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8676:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    867a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 88e8 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    867e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 88ec <_usb_d_dev_handler+0x288>
    8682:	e0de      	b.n	8842 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8684:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8686:	8b1b      	ldrh	r3, [r3, #24]
    8688:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    868a:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    868c:	f013 0f04 	tst.w	r3, #4
    8690:	d11e      	bne.n	86d0 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8692:	f413 7f00 	tst.w	r3, #512	; 0x200
    8696:	d125      	bne.n	86e4 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8698:	f013 0f80 	tst.w	r3, #128	; 0x80
    869c:	d14f      	bne.n	873e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    869e:	f013 0f70 	tst.w	r3, #112	; 0x70
    86a2:	d158      	bne.n	8756 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    86a4:	f013 0f08 	tst.w	r3, #8
    86a8:	d178      	bne.n	879c <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    86aa:	f013 0f01 	tst.w	r3, #1
    86ae:	d0e0      	beq.n	8672 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    86b0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86b4:	f240 2201 	movw	r2, #513	; 0x201
    86b8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    86ba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    86bc:	2270      	movs	r2, #112	; 0x70
    86be:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    86c0:	4b83      	ldr	r3, [pc, #524]	; (88d0 <_usb_d_dev_handler+0x26c>)
    86c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    86c6:	2100      	movs	r1, #0
    86c8:	2004      	movs	r0, #4
    86ca:	4798      	blx	r3
    86cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    86d0:	2204      	movs	r2, #4
    86d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86d6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    86d8:	4b7d      	ldr	r3, [pc, #500]	; (88d0 <_usb_d_dev_handler+0x26c>)
    86da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    86de:	4798      	blx	r3
    86e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    86e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86e8:	f240 2201 	movw	r2, #513	; 0x201
    86ec:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    86ee:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    86f0:	2270      	movs	r2, #112	; 0x70
    86f2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    86f4:	4b76      	ldr	r3, [pc, #472]	; (88d0 <_usb_d_dev_handler+0x26c>)
    86f6:	891b      	ldrh	r3, [r3, #8]
    86f8:	f003 030f 	and.w	r3, r3, #15
    86fc:	2b03      	cmp	r3, #3
    86fe:	d014      	beq.n	872a <_usb_d_dev_handler+0xc6>
    8700:	2301      	movs	r3, #1
    8702:	4873      	ldr	r0, [pc, #460]	; (88d0 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8704:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8706:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    870a:	8912      	ldrh	r2, [r2, #8]
    870c:	f002 020f 	and.w	r2, r2, #15
    8710:	2a03      	cmp	r2, #3
    8712:	d00b      	beq.n	872c <_usb_d_dev_handler+0xc8>
    8714:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8716:	2b05      	cmp	r3, #5
    8718:	d1f4      	bne.n	8704 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    871a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    871c:	4b6c      	ldr	r3, [pc, #432]	; (88d0 <_usb_d_dev_handler+0x26c>)
    871e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8722:	2003      	movs	r0, #3
    8724:	4798      	blx	r3
    8726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    872a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    872c:	4b68      	ldr	r3, [pc, #416]	; (88d0 <_usb_d_dev_handler+0x26c>)
    872e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8732:	8919      	ldrh	r1, [r3, #8]
    8734:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8738:	2200      	movs	r2, #0
    873a:	811a      	strh	r2, [r3, #8]
    873c:	e7ee      	b.n	871c <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    873e:	2280      	movs	r2, #128	; 0x80
    8740:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8744:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8746:	4b62      	ldr	r3, [pc, #392]	; (88d0 <_usb_d_dev_handler+0x26c>)
    8748:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    874c:	2100      	movs	r1, #0
    874e:	2005      	movs	r0, #5
    8750:	4798      	blx	r3
    8752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8756:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    875a:	2270      	movs	r2, #112	; 0x70
    875c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    875e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8760:	f240 2201 	movw	r2, #513	; 0x201
    8764:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8766:	4b5b      	ldr	r3, [pc, #364]	; (88d4 <_usb_d_dev_handler+0x270>)
    8768:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    876c:	f013 0f01 	tst.w	r3, #1
    8770:	d00e      	beq.n	8790 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8772:	4a58      	ldr	r2, [pc, #352]	; (88d4 <_usb_d_dev_handler+0x270>)
    8774:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8776:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    877a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    877e:	d1f9      	bne.n	8774 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8780:	4b53      	ldr	r3, [pc, #332]	; (88d0 <_usb_d_dev_handler+0x26c>)
    8782:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8786:	2100      	movs	r1, #0
    8788:	2002      	movs	r0, #2
    878a:	4798      	blx	r3
    878c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8790:	4a50      	ldr	r2, [pc, #320]	; (88d4 <_usb_d_dev_handler+0x270>)
    8792:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8794:	f413 7f80 	tst.w	r3, #256	; 0x100
    8798:	d0fb      	beq.n	8792 <_usb_d_dev_handler+0x12e>
    879a:	e7f1      	b.n	8780 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    879c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    87a0:	2400      	movs	r4, #0
    87a2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    87a6:	2208      	movs	r2, #8
    87a8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    87aa:	2270      	movs	r2, #112	; 0x70
    87ac:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    87ae:	f240 2201 	movw	r2, #513	; 0x201
    87b2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    87b4:	4b48      	ldr	r3, [pc, #288]	; (88d8 <_usb_d_dev_handler+0x274>)
    87b6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    87b8:	4b45      	ldr	r3, [pc, #276]	; (88d0 <_usb_d_dev_handler+0x26c>)
    87ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    87be:	4621      	mov	r1, r4
    87c0:	2001      	movs	r0, #1
    87c2:	4798      	blx	r3
    87c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    87c8:	f011 0f10 	tst.w	r1, #16
    87cc:	d109      	bne.n	87e2 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    87ce:	f011 0f40 	tst.w	r1, #64	; 0x40
    87d2:	d108      	bne.n	87e6 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    87d4:	f011 0f20 	tst.w	r1, #32
    87d8:	d02f      	beq.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    87da:	2100      	movs	r1, #0
    87dc:	4b3f      	ldr	r3, [pc, #252]	; (88dc <_usb_d_dev_handler+0x278>)
    87de:	4798      	blx	r3
    87e0:	e02b      	b.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    87e2:	47c8      	blx	r9
    87e4:	e029      	b.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    87e6:	2101      	movs	r1, #1
    87e8:	4b3c      	ldr	r3, [pc, #240]	; (88dc <_usb_d_dev_handler+0x278>)
    87ea:	4798      	blx	r3
    87ec:	e025      	b.n	883a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    87ee:	f011 0f40 	tst.w	r1, #64	; 0x40
    87f2:	d111      	bne.n	8818 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    87f4:	f011 0f08 	tst.w	r1, #8
    87f8:	d112      	bne.n	8820 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    87fa:	f011 0f02 	tst.w	r1, #2
    87fe:	d112      	bne.n	8826 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8800:	f003 0307 	and.w	r3, r3, #7
    8804:	2b01      	cmp	r3, #1
    8806:	d118      	bne.n	883a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8808:	f011 0f04 	tst.w	r1, #4
    880c:	d10f      	bne.n	882e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    880e:	f011 0f10 	tst.w	r1, #16
    8812:	d012      	beq.n	883a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8814:	47c8      	blx	r9
    8816:	e010      	b.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    8818:	2101      	movs	r1, #1
    881a:	4b30      	ldr	r3, [pc, #192]	; (88dc <_usb_d_dev_handler+0x278>)
    881c:	4798      	blx	r3
    881e:	e00c      	b.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8820:	2101      	movs	r1, #1
    8822:	47c0      	blx	r8
    8824:	e009      	b.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8826:	2101      	movs	r1, #1
    8828:	4b2d      	ldr	r3, [pc, #180]	; (88e0 <_usb_d_dev_handler+0x27c>)
    882a:	4798      	blx	r3
    882c:	e005      	b.n	883a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    882e:	2100      	movs	r1, #0
    8830:	47c0      	blx	r8
    8832:	e002      	b.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8834:	2100      	movs	r1, #0
    8836:	4b29      	ldr	r3, [pc, #164]	; (88dc <_usb_d_dev_handler+0x278>)
    8838:	4798      	blx	r3
    883a:	3401      	adds	r4, #1
    883c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    883e:	2c1b      	cmp	r4, #27
    8840:	d042      	beq.n	88c8 <_usb_d_dev_handler+0x264>
    8842:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8844:	7cab      	ldrb	r3, [r5, #18]
    8846:	2bff      	cmp	r3, #255	; 0xff
    8848:	d0f7      	beq.n	883a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    884a:	f003 030f 	and.w	r3, r3, #15
    884e:	2101      	movs	r1, #1
    8850:	4099      	lsls	r1, r3
    8852:	4231      	tst	r1, r6
    8854:	d0f1      	beq.n	883a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8856:	0159      	lsls	r1, r3, #5
    8858:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    885c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8860:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8862:	015b      	lsls	r3, r3, #5
    8864:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8868:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    886c:	4019      	ands	r1, r3
    886e:	d0e4      	beq.n	883a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8870:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8874:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8878:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    887c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8880:	2a01      	cmp	r2, #1
    8882:	d0a1      	beq.n	87c8 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8884:	f013 0f80 	tst.w	r3, #128	; 0x80
    8888:	d1b1      	bne.n	87ee <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    888a:	f011 0f20 	tst.w	r1, #32
    888e:	d1d1      	bne.n	8834 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8890:	f011 0f04 	tst.w	r1, #4
    8894:	d10e      	bne.n	88b4 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8896:	f011 0f01 	tst.w	r1, #1
    889a:	d10e      	bne.n	88ba <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    889c:	f003 0307 	and.w	r3, r3, #7
    88a0:	2b01      	cmp	r3, #1
    88a2:	d1ca      	bne.n	883a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    88a4:	f011 0f08 	tst.w	r1, #8
    88a8:	d10b      	bne.n	88c2 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    88aa:	f011 0f10 	tst.w	r1, #16
    88ae:	d0c4      	beq.n	883a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    88b0:	47c8      	blx	r9
    88b2:	e7c2      	b.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    88b4:	2100      	movs	r1, #0
    88b6:	47c0      	blx	r8
    88b8:	e7bf      	b.n	883a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    88ba:	2101      	movs	r1, #1
    88bc:	4b09      	ldr	r3, [pc, #36]	; (88e4 <_usb_d_dev_handler+0x280>)
    88be:	4798      	blx	r3
    88c0:	e7bb      	b.n	883a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    88c2:	2101      	movs	r1, #1
    88c4:	47c0      	blx	r8
    88c6:	e7b8      	b.n	883a <_usb_d_dev_handler+0x1d6>
    88c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    88cc:	20000a7c 	.word	0x20000a7c
    88d0:	200009a8 	.word	0x200009a8
    88d4:	40001000 	.word	0x40001000
    88d8:	000082ad 	.word	0x000082ad
    88dc:	000080e5 	.word	0x000080e5
    88e0:	000082f1 	.word	0x000082f1
    88e4:	00008475 	.word	0x00008475
    88e8:	00008065 	.word	0x00008065
    88ec:	000081ad 	.word	0x000081ad

000088f0 <_usb_d_dev_init>:
{
    88f0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    88f2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    88f6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    88f8:	f013 0f01 	tst.w	r3, #1
    88fc:	d124      	bne.n	8948 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    88fe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8902:	7893      	ldrb	r3, [r2, #2]
    8904:	f013 0f03 	tst.w	r3, #3
    8908:	d1fb      	bne.n	8902 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    890a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    890e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    8910:	f013 0f02 	tst.w	r3, #2
    8914:	d00f      	beq.n	8936 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8916:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    891a:	7813      	ldrb	r3, [r2, #0]
    891c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8920:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8922:	7893      	ldrb	r3, [r2, #2]
    8924:	f013 0f03 	tst.w	r3, #3
    8928:	d1fb      	bne.n	8922 <_usb_d_dev_init+0x32>
    892a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    892e:	7893      	ldrb	r3, [r2, #2]
    8930:	f013 0f02 	tst.w	r3, #2
    8934:	d1fb      	bne.n	892e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8936:	2201      	movs	r2, #1
    8938:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    893c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    893e:	461a      	mov	r2, r3
    8940:	7893      	ldrb	r3, [r2, #2]
    8942:	f013 0f03 	tst.w	r3, #3
    8946:	d1fb      	bne.n	8940 <_usb_d_dev_init+0x50>
    8948:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    894c:	7893      	ldrb	r3, [r2, #2]
    894e:	f013 0f01 	tst.w	r3, #1
    8952:	d1fb      	bne.n	894c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8954:	4b24      	ldr	r3, [pc, #144]	; (89e8 <_usb_d_dev_init+0xf8>)
    8956:	4a25      	ldr	r2, [pc, #148]	; (89ec <_usb_d_dev_init+0xfc>)
    8958:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    895c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    8960:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8964:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8968:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    896c:	4b20      	ldr	r3, [pc, #128]	; (89f0 <_usb_d_dev_init+0x100>)
    896e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8970:	4b20      	ldr	r3, [pc, #128]	; (89f4 <_usb_d_dev_init+0x104>)
    8972:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8974:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8978:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    897c:	f011 011f 	ands.w	r1, r1, #31
    8980:	d02b      	beq.n	89da <_usb_d_dev_init+0xea>
		pad_transn = 9;
    8982:	291f      	cmp	r1, #31
    8984:	bf08      	it	eq
    8986:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8988:	b34b      	cbz	r3, 89de <_usb_d_dev_init+0xee>
		pad_transp = 25;
    898a:	2b1f      	cmp	r3, #31
    898c:	bf08      	it	eq
    898e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    8990:	b33a      	cbz	r2, 89e2 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    8992:	2a07      	cmp	r2, #7
    8994:	bf08      	it	eq
    8996:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8998:	f003 031f 	and.w	r3, r3, #31
    899c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    89a0:	0312      	lsls	r2, r2, #12
    89a2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    89a6:	4313      	orrs	r3, r2
    89a8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    89ac:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    89ae:	78d3      	ldrb	r3, [r2, #3]
    89b0:	f043 0303 	orr.w	r3, r3, #3
    89b4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    89b6:	78d3      	ldrb	r3, [r2, #3]
    89b8:	f043 030c 	orr.w	r3, r3, #12
    89bc:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    89be:	2304      	movs	r3, #4
    89c0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    89c2:	7893      	ldrb	r3, [r2, #2]
    89c4:	f013 0f03 	tst.w	r3, #3
    89c8:	d1fb      	bne.n	89c2 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    89ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89ce:	4a06      	ldr	r2, [pc, #24]	; (89e8 <_usb_d_dev_init+0xf8>)
    89d0:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    89d2:	2201      	movs	r2, #1
    89d4:	811a      	strh	r2, [r3, #8]
}
    89d6:	2000      	movs	r0, #0
    89d8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    89da:	2109      	movs	r1, #9
    89dc:	e7d4      	b.n	8988 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    89de:	2319      	movs	r3, #25
    89e0:	e7d6      	b.n	8990 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    89e2:	2206      	movs	r2, #6
    89e4:	e7d8      	b.n	8998 <_usb_d_dev_init+0xa8>
    89e6:	bf00      	nop
    89e8:	200009a8 	.word	0x200009a8
    89ec:	00008061 	.word	0x00008061
    89f0:	000082ad 	.word	0x000082ad
    89f4:	00800084 	.word	0x00800084

000089f8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    89f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89fc:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    89fe:	f013 0f03 	tst.w	r3, #3
    8a02:	d129      	bne.n	8a58 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8a04:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8a08:	7893      	ldrb	r3, [r2, #2]
    8a0a:	f013 0f03 	tst.w	r3, #3
    8a0e:	d1fb      	bne.n	8a08 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8a10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a14:	781b      	ldrb	r3, [r3, #0]
    8a16:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8a18:	f013 0f02 	tst.w	r3, #2
    8a1c:	d108      	bne.n	8a30 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    8a1e:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8a22:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8a26:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8a28:	7893      	ldrb	r3, [r2, #2]
    8a2a:	f013 0f03 	tst.w	r3, #3
    8a2e:	d1fb      	bne.n	8a28 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8a30:	4b0b      	ldr	r3, [pc, #44]	; (8a60 <_usb_d_dev_enable+0x68>)
    8a32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8a36:	609a      	str	r2, [r3, #8]
    8a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8a3c:	609a      	str	r2, [r3, #8]
    8a3e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8a42:	609a      	str	r2, [r3, #8]
    8a44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8a48:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8a4a:	f240 228d 	movw	r2, #653	; 0x28d
    8a4e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a52:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8a54:	2000      	movs	r0, #0
    8a56:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8a58:	f06f 0010 	mvn.w	r0, #16
}
    8a5c:	4770      	bx	lr
    8a5e:	bf00      	nop
    8a60:	e000e100 	.word	0xe000e100

00008a64 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8a64:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8a68:	8913      	ldrh	r3, [r2, #8]
    8a6a:	f023 0301 	bic.w	r3, r3, #1
    8a6e:	041b      	lsls	r3, r3, #16
    8a70:	0c1b      	lsrs	r3, r3, #16
    8a72:	8113      	strh	r3, [r2, #8]
    8a74:	4770      	bx	lr

00008a76 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8a76:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8a7a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a7e:	7298      	strb	r0, [r3, #10]
    8a80:	4770      	bx	lr
	...

00008a84 <_usb_d_dev_ep_init>:
{
    8a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a86:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8a8a:	f010 050f 	ands.w	r5, r0, #15
    8a8e:	d04d      	beq.n	8b2c <_usb_d_dev_ep_init+0xa8>
    8a90:	f1be 0f00 	cmp.w	lr, #0
    8a94:	bfb4      	ite	lt
    8a96:	1d6c      	addlt	r4, r5, #5
    8a98:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8a9a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8a9e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    8aa0:	2d05      	cmp	r5, #5
    8aa2:	d947      	bls.n	8b34 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    8aa4:	f06f 0011 	mvn.w	r0, #17
    8aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8aaa:	f1be 0f00 	cmp.w	lr, #0
    8aae:	db1b      	blt.n	8ae8 <_usb_d_dev_ep_init+0x64>
    8ab0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8ab4:	4e37      	ldr	r6, [pc, #220]	; (8b94 <_usb_d_dev_ep_init+0x110>)
    8ab6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8aba:	2d00      	cmp	r5, #0
    8abc:	d15e      	bne.n	8b7c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8abe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8ac2:	4d34      	ldr	r5, [pc, #208]	; (8b94 <_usb_d_dev_ep_init+0x110>)
    8ac4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    8ac8:	4d33      	ldr	r5, [pc, #204]	; (8b98 <_usb_d_dev_ep_init+0x114>)
    8aca:	00a6      	lsls	r6, r4, #2
    8acc:	1933      	adds	r3, r6, r4
    8ace:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8ad2:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    8ad6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    8ada:	3101      	adds	r1, #1
    8adc:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    8ae0:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    8ae4:	2000      	movs	r0, #0
    8ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8ae8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8aec:	4e29      	ldr	r6, [pc, #164]	; (8b94 <_usb_d_dev_ep_init+0x110>)
    8aee:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8af2:	686d      	ldr	r5, [r5, #4]
    8af4:	b935      	cbnz	r5, 8b04 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8af6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8afa:	4d26      	ldr	r5, [pc, #152]	; (8b94 <_usb_d_dev_ep_init+0x110>)
    8afc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8b00:	685f      	ldr	r7, [r3, #4]
    8b02:	e7e1      	b.n	8ac8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8b04:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8b08:	4e22      	ldr	r6, [pc, #136]	; (8b94 <_usb_d_dev_ep_init+0x110>)
    8b0a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8b0e:	896d      	ldrh	r5, [r5, #10]
    8b10:	4295      	cmp	r5, r2
    8b12:	daf0      	bge.n	8af6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    8b14:	f06f 0012 	mvn.w	r0, #18
    8b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    8b1a:	f06f 0013 	mvn.w	r0, #19
    8b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    8b20:	f06f 0013 	mvn.w	r0, #19
    8b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    8b26:	f06f 0012 	mvn.w	r0, #18
    8b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8b2c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    8b30:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8b32:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    8b34:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8b38:	4f17      	ldr	r7, [pc, #92]	; (8b98 <_usb_d_dev_ep_init+0x114>)
    8b3a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    8b3e:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    8b42:	2eff      	cmp	r6, #255	; 0xff
    8b44:	d1e9      	bne.n	8b1a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8b46:	2900      	cmp	r1, #0
    8b48:	d1af      	bne.n	8aaa <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8b4a:	b125      	cbz	r5, 8b56 <_usb_d_dev_ep_init+0xd2>
    8b4c:	f1be 0f00 	cmp.w	lr, #0
    8b50:	bfa4      	itt	ge
    8b52:	3505      	addge	r5, #5
    8b54:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    8b56:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8b5a:	4e0f      	ldr	r6, [pc, #60]	; (8b98 <_usb_d_dev_ep_init+0x114>)
    8b5c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8b60:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    8b64:	2dff      	cmp	r5, #255	; 0xff
    8b66:	d1db      	bne.n	8b20 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    8b68:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8b6c:	4e09      	ldr	r6, [pc, #36]	; (8b94 <_usb_d_dev_ep_init+0x110>)
    8b6e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8b72:	2d00      	cmp	r5, #0
    8b74:	d0d7      	beq.n	8b26 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8b76:	f1be 0f00 	cmp.w	lr, #0
    8b7a:	dbb5      	blt.n	8ae8 <_usb_d_dev_ep_init+0x64>
    8b7c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8b80:	4e04      	ldr	r6, [pc, #16]	; (8b94 <_usb_d_dev_ep_init+0x110>)
    8b82:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8b86:	892d      	ldrh	r5, [r5, #8]
    8b88:	4295      	cmp	r5, r2
    8b8a:	da98      	bge.n	8abe <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    8b8c:	f06f 0012 	mvn.w	r0, #18
    8b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b92:	bf00      	nop
    8b94:	0000d24c 	.word	0x0000d24c
    8b98:	200009a8 	.word	0x200009a8

00008b9c <_usb_d_dev_ep_deinit>:
{
    8b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b9e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8ba0:	f010 060f 	ands.w	r6, r0, #15
    8ba4:	d00e      	beq.n	8bc4 <_usb_d_dev_ep_deinit+0x28>
    8ba6:	2f00      	cmp	r7, #0
    8ba8:	bfb4      	ite	lt
    8baa:	1d73      	addlt	r3, r6, #5
    8bac:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8bae:	2e05      	cmp	r6, #5
    8bb0:	d900      	bls.n	8bb4 <_usb_d_dev_ep_deinit+0x18>
    8bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    8bb4:	461d      	mov	r5, r3
    8bb6:	3301      	adds	r3, #1
    8bb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8bbc:	4a24      	ldr	r2, [pc, #144]	; (8c50 <_usb_d_dev_ep_deinit+0xb4>)
    8bbe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    8bc2:	e002      	b.n	8bca <_usb_d_dev_ep_deinit+0x2e>
    8bc4:	f8df e094 	ldr.w	lr, [pc, #148]	; 8c5c <_usb_d_dev_ep_deinit+0xc0>
    8bc8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8bca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8bce:	4a21      	ldr	r2, [pc, #132]	; (8c54 <_usb_d_dev_ep_deinit+0xb8>)
    8bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8bd4:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    8bd8:	2aff      	cmp	r2, #255	; 0xff
    8bda:	d0ea      	beq.n	8bb2 <_usb_d_dev_ep_deinit+0x16>
    8bdc:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    8bde:	2203      	movs	r2, #3
    8be0:	0ff9      	lsrs	r1, r7, #31
    8be2:	4670      	mov	r0, lr
    8be4:	4b1c      	ldr	r3, [pc, #112]	; (8c58 <_usb_d_dev_ep_deinit+0xbc>)
    8be6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8be8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8bec:	4a19      	ldr	r2, [pc, #100]	; (8c54 <_usb_d_dev_ep_deinit+0xb8>)
    8bee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8bf2:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8bf6:	f003 0307 	and.w	r3, r3, #7
    8bfa:	2b01      	cmp	r3, #1
    8bfc:	d016      	beq.n	8c2c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    8bfe:	2f00      	cmp	r7, #0
    8c00:	db1b      	blt.n	8c3a <_usb_d_dev_ep_deinit+0x9e>
    8c02:	0160      	lsls	r0, r4, #5
    8c04:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8c08:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    8c0c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8c10:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    8c14:	4b0f      	ldr	r3, [pc, #60]	; (8c54 <_usb_d_dev_ep_deinit+0xb8>)
    8c16:	00aa      	lsls	r2, r5, #2
    8c18:	1951      	adds	r1, r2, r5
    8c1a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8c1e:	2000      	movs	r0, #0
    8c20:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    8c24:	22ff      	movs	r2, #255	; 0xff
    8c26:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    8c2a:	e7c2      	b.n	8bb2 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    8c2c:	0160      	lsls	r0, r4, #5
    8c2e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8c32:	2300      	movs	r3, #0
    8c34:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8c38:	e7ec      	b.n	8c14 <_usb_d_dev_ep_deinit+0x78>
    8c3a:	0176      	lsls	r6, r6, #5
    8c3c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    8c40:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8c44:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8c48:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    8c4c:	e7e2      	b.n	8c14 <_usb_d_dev_ep_deinit+0x78>
    8c4e:	bf00      	nop
    8c50:	20000a68 	.word	0x20000a68
    8c54:	200009a8 	.word	0x200009a8
    8c58:	00008141 	.word	0x00008141
    8c5c:	20000a7c 	.word	0x20000a7c

00008c60 <_usb_d_dev_ep_enable>:
{
    8c60:	b4f0      	push	{r4, r5, r6, r7}
    8c62:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8c64:	f010 000f 	ands.w	r0, r0, #15
    8c68:	f000 80a7 	beq.w	8dba <_usb_d_dev_ep_enable+0x15a>
    8c6c:	2e00      	cmp	r6, #0
    8c6e:	bfb4      	ite	lt
    8c70:	1d43      	addlt	r3, r0, #5
    8c72:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8c74:	4605      	mov	r5, r0
    8c76:	0142      	lsls	r2, r0, #5
    8c78:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8c7c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    8c80:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8c82:	2805      	cmp	r0, #5
    8c84:	f240 80a0 	bls.w	8dc8 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    8c88:	f06f 0011 	mvn.w	r0, #17
    8c8c:	e07d      	b.n	8d8a <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    8c8e:	f014 0f77 	tst.w	r4, #119	; 0x77
    8c92:	f040 8089 	bne.w	8da8 <_usb_d_dev_ep_enable+0x148>
    8c96:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8c9a:	2111      	movs	r1, #17
    8c9c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ca0:	4c9b      	ldr	r4, [pc, #620]	; (8f10 <_usb_d_dev_ep_enable+0x2b0>)
    8ca2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    8ca6:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    8caa:	4c9a      	ldr	r4, [pc, #616]	; (8f14 <_usb_d_dev_ep_enable+0x2b4>)
    8cac:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8cb0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8cb4:	f200 80cd 	bhi.w	8e52 <_usb_d_dev_ep_enable+0x1f2>
    8cb8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8cbc:	f200 8112 	bhi.w	8ee4 <_usb_d_dev_ep_enable+0x284>
    8cc0:	2980      	cmp	r1, #128	; 0x80
    8cc2:	f200 8101 	bhi.w	8ec8 <_usb_d_dev_ep_enable+0x268>
    8cc6:	2940      	cmp	r1, #64	; 0x40
    8cc8:	f200 8113 	bhi.w	8ef2 <_usb_d_dev_ep_enable+0x292>
    8ccc:	2920      	cmp	r1, #32
    8cce:	f200 8102 	bhi.w	8ed6 <_usb_d_dev_ep_enable+0x276>
    8cd2:	2910      	cmp	r1, #16
    8cd4:	f200 8114 	bhi.w	8f00 <_usb_d_dev_ep_enable+0x2a0>
    8cd8:	2908      	cmp	r1, #8
    8cda:	bf94      	ite	ls
    8cdc:	2600      	movls	r6, #0
    8cde:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ce0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ce4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ce6:	f3c1 010d 	ubfx	r1, r1, #0, #14
    8cea:	e0b8      	b.n	8e5e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    8cec:	f014 0f70 	tst.w	r4, #112	; 0x70
    8cf0:	d15d      	bne.n	8dae <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    8cf2:	4e87      	ldr	r6, [pc, #540]	; (8f10 <_usb_d_dev_ep_enable+0x2b0>)
    8cf4:	009f      	lsls	r7, r3, #2
    8cf6:	18f9      	adds	r1, r7, r3
    8cf8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8cfc:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8d00:	0109      	lsls	r1, r1, #4
    8d02:	f001 0170 	and.w	r1, r1, #112	; 0x70
    8d06:	430c      	orrs	r4, r1
    8d08:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8d0c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8d10:	443b      	add	r3, r7
    8d12:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8d16:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    8d1a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8d22:	d80f      	bhi.n	8d44 <_usb_d_dev_ep_enable+0xe4>
    8d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8d28:	d819      	bhi.n	8d5e <_usb_d_dev_ep_enable+0xfe>
    8d2a:	2b80      	cmp	r3, #128	; 0x80
    8d2c:	d819      	bhi.n	8d62 <_usb_d_dev_ep_enable+0x102>
    8d2e:	2b40      	cmp	r3, #64	; 0x40
    8d30:	d819      	bhi.n	8d66 <_usb_d_dev_ep_enable+0x106>
    8d32:	2b20      	cmp	r3, #32
    8d34:	d819      	bhi.n	8d6a <_usb_d_dev_ep_enable+0x10a>
    8d36:	2b10      	cmp	r3, #16
    8d38:	d819      	bhi.n	8d6e <_usb_d_dev_ep_enable+0x10e>
    8d3a:	2b08      	cmp	r3, #8
    8d3c:	bf94      	ite	ls
    8d3e:	2300      	movls	r3, #0
    8d40:	2301      	movhi	r3, #1
    8d42:	e000      	b.n	8d46 <_usb_d_dev_ep_enable+0xe6>
    8d44:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8d46:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    8d4a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8d4c:	2380      	movs	r3, #128	; 0x80
    8d4e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8d52:	4b6f      	ldr	r3, [pc, #444]	; (8f10 <_usb_d_dev_ep_enable+0x2b0>)
    8d54:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8d58:	2000      	movs	r0, #0
    8d5a:	76a8      	strb	r0, [r5, #26]
    8d5c:	e015      	b.n	8d8a <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8d5e:	2306      	movs	r3, #6
    8d60:	e7f1      	b.n	8d46 <_usb_d_dev_ep_enable+0xe6>
    8d62:	2305      	movs	r3, #5
    8d64:	e7ef      	b.n	8d46 <_usb_d_dev_ep_enable+0xe6>
    8d66:	2304      	movs	r3, #4
    8d68:	e7ed      	b.n	8d46 <_usb_d_dev_ep_enable+0xe6>
    8d6a:	2303      	movs	r3, #3
    8d6c:	e7eb      	b.n	8d46 <_usb_d_dev_ep_enable+0xe6>
    8d6e:	2302      	movs	r3, #2
    8d70:	e7e9      	b.n	8d46 <_usb_d_dev_ep_enable+0xe6>
    8d72:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8d74:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8d78:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8d7a:	2340      	movs	r3, #64	; 0x40
    8d7c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    8d80:	4b63      	ldr	r3, [pc, #396]	; (8f10 <_usb_d_dev_ep_enable+0x2b0>)
    8d82:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8d86:	2000      	movs	r0, #0
    8d88:	72a8      	strb	r0, [r5, #10]
}
    8d8a:	bcf0      	pop	{r4, r5, r6, r7}
    8d8c:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8d8e:	2106      	movs	r1, #6
    8d90:	e7f0      	b.n	8d74 <_usb_d_dev_ep_enable+0x114>
    8d92:	2105      	movs	r1, #5
    8d94:	e7ee      	b.n	8d74 <_usb_d_dev_ep_enable+0x114>
    8d96:	2104      	movs	r1, #4
    8d98:	e7ec      	b.n	8d74 <_usb_d_dev_ep_enable+0x114>
    8d9a:	2103      	movs	r1, #3
    8d9c:	e7ea      	b.n	8d74 <_usb_d_dev_ep_enable+0x114>
    8d9e:	2102      	movs	r1, #2
    8da0:	e7e8      	b.n	8d74 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    8da2:	f06f 0011 	mvn.w	r0, #17
    8da6:	e7f0      	b.n	8d8a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8da8:	f06f 0013 	mvn.w	r0, #19
    8dac:	e7ed      	b.n	8d8a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8dae:	f06f 0013 	mvn.w	r0, #19
    8db2:	e7ea      	b.n	8d8a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8db4:	f06f 0013 	mvn.w	r0, #19
    8db8:	e7e7      	b.n	8d8a <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8dba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8dbe:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    8dc2:	b2e4      	uxtb	r4, r4
    8dc4:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    8dc6:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8dc8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8dcc:	4950      	ldr	r1, [pc, #320]	; (8f10 <_usb_d_dev_ep_enable+0x2b0>)
    8dce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8dd2:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8dd6:	2aff      	cmp	r2, #255	; 0xff
    8dd8:	d0e3      	beq.n	8da2 <_usb_d_dev_ep_enable+0x142>
    8dda:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    8ddc:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    8dde:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    8de2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    8de6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8dea:	f001 0107 	and.w	r1, r1, #7
    8dee:	2901      	cmp	r1, #1
    8df0:	f43f af4d 	beq.w	8c8e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    8df4:	2e00      	cmp	r6, #0
    8df6:	f6ff af79 	blt.w	8cec <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    8dfa:	f014 0f07 	tst.w	r4, #7
    8dfe:	d1d9      	bne.n	8db4 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    8e00:	4e43      	ldr	r6, [pc, #268]	; (8f10 <_usb_d_dev_ep_enable+0x2b0>)
    8e02:	009f      	lsls	r7, r3, #2
    8e04:	18f9      	adds	r1, r7, r3
    8e06:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8e0a:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8e0e:	f001 0107 	and.w	r1, r1, #7
    8e12:	430c      	orrs	r4, r1
    8e14:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8e18:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8e1c:	443b      	add	r3, r7
    8e1e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8e22:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    8e26:	4b3b      	ldr	r3, [pc, #236]	; (8f14 <_usb_d_dev_ep_enable+0x2b4>)
    8e28:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8e2c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8e30:	d89f      	bhi.n	8d72 <_usb_d_dev_ep_enable+0x112>
    8e32:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8e36:	d8aa      	bhi.n	8d8e <_usb_d_dev_ep_enable+0x12e>
    8e38:	2980      	cmp	r1, #128	; 0x80
    8e3a:	d8aa      	bhi.n	8d92 <_usb_d_dev_ep_enable+0x132>
    8e3c:	2940      	cmp	r1, #64	; 0x40
    8e3e:	d8aa      	bhi.n	8d96 <_usb_d_dev_ep_enable+0x136>
    8e40:	2920      	cmp	r1, #32
    8e42:	d8aa      	bhi.n	8d9a <_usb_d_dev_ep_enable+0x13a>
    8e44:	2910      	cmp	r1, #16
    8e46:	d8aa      	bhi.n	8d9e <_usb_d_dev_ep_enable+0x13e>
    8e48:	2908      	cmp	r1, #8
    8e4a:	bf94      	ite	ls
    8e4c:	2100      	movls	r1, #0
    8e4e:	2101      	movhi	r1, #1
    8e50:	e790      	b.n	8d74 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e52:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8e56:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e58:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8e5c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e5e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    8e62:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8e64:	2640      	movs	r6, #64	; 0x40
    8e66:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8e6a:	2180      	movs	r1, #128	; 0x80
    8e6c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8e70:	4f27      	ldr	r7, [pc, #156]	; (8f10 <_usb_d_dev_ep_enable+0x2b0>)
    8e72:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    8e76:	2000      	movs	r0, #0
    8e78:	72a8      	strb	r0, [r5, #10]
    8e7a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8e7c:	009c      	lsls	r4, r3, #2
    8e7e:	18e1      	adds	r1, r4, r3
    8e80:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    8e84:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    8e88:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8e8c:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    8e90:	0152      	lsls	r2, r2, #5
    8e92:	18b9      	adds	r1, r7, r2
    8e94:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8e96:	4423      	add	r3, r4
    8e98:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8e9c:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    8ea0:	684b      	ldr	r3, [r1, #4]
    8ea2:	f364 339b 	bfi	r3, r4, #14, #14
    8ea6:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8ea8:	684b      	ldr	r3, [r1, #4]
    8eaa:	f360 030d 	bfi	r3, r0, #0, #14
    8eae:	604b      	str	r3, [r1, #4]
    8eb0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8eb4:	21b0      	movs	r1, #176	; 0xb0
    8eb6:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8eba:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8ebe:	461a      	mov	r2, r3
    8ec0:	2310      	movs	r3, #16
    8ec2:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    8ec6:	e760      	b.n	8d8a <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ec8:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ecc:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ece:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ed2:	2605      	movs	r6, #5
    8ed4:	e7c3      	b.n	8e5e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ed6:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8eda:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8edc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ee0:	2603      	movs	r6, #3
    8ee2:	e7bc      	b.n	8e5e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ee4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ee8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8eea:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8eee:	2606      	movs	r6, #6
    8ef0:	e7b5      	b.n	8e5e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ef2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ef6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ef8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8efc:	2604      	movs	r6, #4
    8efe:	e7ae      	b.n	8e5e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8f00:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8f04:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8f06:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8f0a:	2602      	movs	r6, #2
    8f0c:	e7a7      	b.n	8e5e <_usb_d_dev_ep_enable+0x1fe>
    8f0e:	bf00      	nop
    8f10:	200009a8 	.word	0x200009a8
    8f14:	0fffc000 	.word	0x0fffc000

00008f18 <_usb_d_dev_ep_stall>:
{
    8f18:	b470      	push	{r4, r5, r6}
    8f1a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    8f1c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8f1e:	f010 000f 	ands.w	r0, r0, #15
    8f22:	d008      	beq.n	8f36 <_usb_d_dev_ep_stall+0x1e>
    8f24:	2b00      	cmp	r3, #0
    8f26:	bfb4      	ite	lt
    8f28:	1d43      	addlt	r3, r0, #5
    8f2a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    8f2c:	2805      	cmp	r0, #5
    8f2e:	d903      	bls.n	8f38 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    8f30:	f06f 0011 	mvn.w	r0, #17
    8f34:	e018      	b.n	8f68 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    8f36:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    8f38:	2901      	cmp	r1, #1
    8f3a:	d017      	beq.n	8f6c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    8f3c:	2900      	cmp	r1, #0
    8f3e:	d03a      	beq.n	8fb6 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8f40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8f44:	4a45      	ldr	r2, [pc, #276]	; (905c <_usb_d_dev_ep_stall+0x144>)
    8f46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8f4a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8f4e:	f003 030f 	and.w	r3, r3, #15
    8f52:	015b      	lsls	r3, r3, #5
    8f54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f58:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8f5c:	2310      	movs	r3, #16
    8f5e:	40a3      	lsls	r3, r4
    8f60:	421a      	tst	r2, r3
    8f62:	bf14      	ite	ne
    8f64:	2001      	movne	r0, #1
    8f66:	2000      	moveq	r0, #0
}
    8f68:	bc70      	pop	{r4, r5, r6}
    8f6a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8f6c:	2510      	movs	r5, #16
    8f6e:	40a5      	lsls	r5, r4
    8f70:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8f72:	493a      	ldr	r1, [pc, #232]	; (905c <_usb_d_dev_ep_stall+0x144>)
    8f74:	009e      	lsls	r6, r3, #2
    8f76:	18f2      	adds	r2, r6, r3
    8f78:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8f7c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8f80:	f002 020f 	and.w	r2, r2, #15
    8f84:	0150      	lsls	r0, r2, #5
    8f86:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8f8a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8f8e:	2020      	movs	r0, #32
    8f90:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8f94:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8f96:	0152      	lsls	r2, r2, #5
    8f98:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8f9c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    8fa0:	4433      	add	r3, r6
    8fa2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8fa6:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    8faa:	f042 0208 	orr.w	r2, r2, #8
    8fae:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    8fb2:	2000      	movs	r0, #0
    8fb4:	e7d8      	b.n	8f68 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    8fb6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8fba:	4928      	ldr	r1, [pc, #160]	; (905c <_usb_d_dev_ep_stall+0x144>)
    8fbc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8fc0:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8fc4:	f002 020f 	and.w	r2, r2, #15
    8fc8:	0151      	lsls	r1, r2, #5
    8fca:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8fce:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8fd2:	2010      	movs	r0, #16
    8fd4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    8fd6:	4205      	tst	r5, r0
    8fd8:	d03c      	beq.n	9054 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8fda:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8fdc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    8fe0:	2020      	movs	r0, #32
    8fe2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8fe4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8fe6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8fea:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    8fee:	4202      	tst	r2, r0
    8ff0:	d007      	beq.n	9002 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8ff2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8ff6:	2201      	movs	r2, #1
    8ff8:	fa02 f404 	lsl.w	r4, r2, r4
    8ffc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8ffe:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9002:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9006:	4815      	ldr	r0, [pc, #84]	; (905c <_usb_d_dev_ep_stall+0x144>)
    9008:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    900c:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    9010:	f002 0207 	and.w	r2, r2, #7
    9014:	2a01      	cmp	r2, #1
    9016:	d00c      	beq.n	9032 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    9018:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    901c:	4a0f      	ldr	r2, [pc, #60]	; (905c <_usb_d_dev_ep_stall+0x144>)
    901e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9022:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9026:	f36f 02c3 	bfc	r2, #3, #1
    902a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    902e:	2000      	movs	r0, #0
    9030:	e79a      	b.n	8f68 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9032:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9036:	f012 0f30 	tst.w	r2, #48	; 0x30
    903a:	d10d      	bne.n	9058 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    903c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9040:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9044:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9048:	f36f 02c3 	bfc	r2, #3, #1
    904c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9050:	2000      	movs	r0, #0
    9052:	e789      	b.n	8f68 <_usb_d_dev_ep_stall+0x50>
    9054:	2000      	movs	r0, #0
    9056:	e787      	b.n	8f68 <_usb_d_dev_ep_stall+0x50>
    9058:	2000      	movs	r0, #0
    905a:	e785      	b.n	8f68 <_usb_d_dev_ep_stall+0x50>
    905c:	200009a8 	.word	0x200009a8

00009060 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9060:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    9062:	f000 040f 	and.w	r4, r0, #15
    9066:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9068:	4a14      	ldr	r2, [pc, #80]	; (90bc <_usb_d_dev_ep_read_req+0x5c>)
    906a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    906c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    906e:	6840      	ldr	r0, [r0, #4]
    9070:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9074:	2c05      	cmp	r4, #5
    9076:	d817      	bhi.n	90a8 <_usb_d_dev_ep_read_req+0x48>
    9078:	b1c9      	cbz	r1, 90ae <_usb_d_dev_ep_read_req+0x4e>
    907a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    907e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    9082:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9084:	2a11      	cmp	r2, #17
    9086:	d115      	bne.n	90b4 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9088:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    908c:	f012 0f10 	tst.w	r2, #16
    9090:	d102      	bne.n	9098 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    9092:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9094:	bc30      	pop	{r4, r5}
    9096:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    9098:	682c      	ldr	r4, [r5, #0]
    909a:	686a      	ldr	r2, [r5, #4]
    909c:	600c      	str	r4, [r1, #0]
    909e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    90a0:	2210      	movs	r2, #16
    90a2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    90a6:	e7f5      	b.n	9094 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    90a8:	f06f 0011 	mvn.w	r0, #17
    90ac:	e7f2      	b.n	9094 <_usb_d_dev_ep_read_req+0x34>
    90ae:	f06f 0011 	mvn.w	r0, #17
    90b2:	e7ef      	b.n	9094 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    90b4:	f06f 0012 	mvn.w	r0, #18
    90b8:	e7ec      	b.n	9094 <_usb_d_dev_ep_read_req+0x34>
    90ba:	bf00      	nop
    90bc:	200009a8 	.word	0x200009a8

000090c0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    90c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90c4:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    90c6:	7a03      	ldrb	r3, [r0, #8]
    90c8:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    90ca:	f013 030f 	ands.w	r3, r3, #15
    90ce:	f000 80c2 	beq.w	9256 <_usb_d_dev_ep_trans+0x196>
    90d2:	2e00      	cmp	r6, #0
    90d4:	bfb4      	ite	lt
    90d6:	1d5a      	addlt	r2, r3, #5
    90d8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    90da:	4614      	mov	r4, r2
    90dc:	4969      	ldr	r1, [pc, #420]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    90de:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    90e2:	1c55      	adds	r5, r2, #1
    90e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    90e8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    90ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    90f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    90f4:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    90f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    90fc:	428a      	cmp	r2, r1
    90fe:	d025      	beq.n	914c <_usb_d_dev_ep_trans+0x8c>
    9100:	1e55      	subs	r5, r2, #1
    9102:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    9104:	6841      	ldr	r1, [r0, #4]
    9106:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9108:	2b05      	cmp	r3, #5
    910a:	f200 8092 	bhi.w	9232 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    910e:	6803      	ldr	r3, [r0, #0]
    9110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9114:	d31c      	bcc.n	9150 <_usb_d_dev_ep_trans+0x90>
    9116:	eb03 0c01 	add.w	ip, r3, r1
    911a:	f8df e180 	ldr.w	lr, [pc, #384]	; 929c <_usb_d_dev_ep_trans+0x1dc>
    911e:	45f4      	cmp	ip, lr
    9120:	d816      	bhi.n	9150 <_usb_d_dev_ep_trans+0x90>
    9122:	f013 0f03 	tst.w	r3, #3
    9126:	d113      	bne.n	9150 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    9128:	2e00      	cmp	r6, #0
    912a:	db2a      	blt.n	9182 <_usb_d_dev_ep_trans+0xc2>
    912c:	428a      	cmp	r2, r1
    912e:	f200 809c 	bhi.w	926a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    9132:	b34d      	cbz	r5, 9188 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9134:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9138:	4a52      	ldr	r2, [pc, #328]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    913a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    913e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9142:	2b00      	cmp	r3, #0
    9144:	d07b      	beq.n	923e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9146:	f04f 0800 	mov.w	r8, #0
    914a:	e00c      	b.n	9166 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    914c:	4615      	mov	r5, r2
    914e:	e7d9      	b.n	9104 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    9150:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9154:	4a4b      	ldr	r2, [pc, #300]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    9156:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    915a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    915e:	2b00      	cmp	r3, #0
    9160:	d06a      	beq.n	9238 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    9162:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9166:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    916a:	4a46      	ldr	r2, [pc, #280]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    916c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9170:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9174:	f013 0f08 	tst.w	r3, #8
    9178:	d009      	beq.n	918e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    917a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    917c:	b003      	add	sp, #12
    917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    9182:	f04f 0800 	mov.w	r8, #0
    9186:	e7ee      	b.n	9166 <_usb_d_dev_ep_trans+0xa6>
    9188:	f04f 0800 	mov.w	r8, #0
    918c:	e7eb      	b.n	9166 <_usb_d_dev_ep_trans+0xa6>
    918e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    9190:	a801      	add	r0, sp, #4
    9192:	4b3d      	ldr	r3, [pc, #244]	; (9288 <_usb_d_dev_ep_trans+0x1c8>)
    9194:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9196:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    919a:	4a3a      	ldr	r2, [pc, #232]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    919c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    91a0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    91a4:	f013 0f40 	tst.w	r3, #64	; 0x40
    91a8:	d13c      	bne.n	9224 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    91aa:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    91ae:	4b35      	ldr	r3, [pc, #212]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    91b0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    91b4:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    91b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    91bc:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    91c0:	a801      	add	r0, sp, #4
    91c2:	4b32      	ldr	r3, [pc, #200]	; (928c <_usb_d_dev_ep_trans+0x1cc>)
    91c4:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    91c6:	f8da 3000 	ldr.w	r3, [sl]
    91ca:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    91ce:	f8da 3004 	ldr.w	r3, [sl, #4]
    91d2:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    91d6:	2300      	movs	r3, #0
    91d8:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    91dc:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    91de:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    91e2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    91e6:	f368 1345 	bfi	r3, r8, #5, #1
    91ea:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    91ee:	f89a 3009 	ldrb.w	r3, [sl, #9]
    91f2:	b1e3      	cbz	r3, 922e <_usb_d_dev_ep_trans+0x16e>
    91f4:	fab5 f585 	clz	r5, r5
    91f8:	096d      	lsrs	r5, r5, #5
    91fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    91fe:	4b21      	ldr	r3, [pc, #132]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    9200:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    9204:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    9208:	f365 1304 	bfi	r3, r5, #4, #1
    920c:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    9210:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    9212:	f04f 0100 	mov.w	r1, #0
    9216:	4638      	mov	r0, r7
    9218:	bfb4      	ite	lt
    921a:	4b1d      	ldrlt	r3, [pc, #116]	; (9290 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    921c:	4b1d      	ldrge	r3, [pc, #116]	; (9294 <_usb_d_dev_ep_trans+0x1d4>)
    921e:	4798      	blx	r3
	return ERR_NONE;
    9220:	2000      	movs	r0, #0
    9222:	e7ab      	b.n	917c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    9224:	a801      	add	r0, sp, #4
    9226:	4b19      	ldr	r3, [pc, #100]	; (928c <_usb_d_dev_ep_trans+0x1cc>)
    9228:	4798      	blx	r3
		return USB_BUSY;
    922a:	2001      	movs	r0, #1
    922c:	e7a6      	b.n	917c <_usb_d_dev_ep_trans+0xbc>
    922e:	2500      	movs	r5, #0
    9230:	e7e3      	b.n	91fa <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    9232:	f06f 0011 	mvn.w	r0, #17
    9236:	e7a1      	b.n	917c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9238:	f06f 0012 	mvn.w	r0, #18
    923c:	e79e      	b.n	917c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    923e:	f06f 0011 	mvn.w	r0, #17
    9242:	e79b      	b.n	917c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9244:	f06f 0012 	mvn.w	r0, #18
    9248:	e798      	b.n	917c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    924a:	6841      	ldr	r1, [r0, #4]
    924c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    9250:	4f11      	ldr	r7, [pc, #68]	; (9298 <_usb_d_dev_ep_trans+0x1d8>)
    9252:	2400      	movs	r4, #0
    9254:	e75b      	b.n	910e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9256:	4a0b      	ldr	r2, [pc, #44]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    9258:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    925c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    9260:	428a      	cmp	r2, r1
    9262:	d0f2      	beq.n	924a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9264:	4f0c      	ldr	r7, [pc, #48]	; (9298 <_usb_d_dev_ep_trans+0x1d8>)
    9266:	2400      	movs	r4, #0
    9268:	e74a      	b.n	9100 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    926a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    926e:	4a05      	ldr	r2, [pc, #20]	; (9284 <_usb_d_dev_ep_trans+0x1c4>)
    9270:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9278:	2b00      	cmp	r3, #0
    927a:	d0e3      	beq.n	9244 <_usb_d_dev_ep_trans+0x184>
    927c:	f04f 0801 	mov.w	r8, #1
    9280:	e771      	b.n	9166 <_usb_d_dev_ep_trans+0xa6>
    9282:	bf00      	nop
    9284:	200009a8 	.word	0x200009a8
    9288:	000045cd 	.word	0x000045cd
    928c:	000045db 	.word	0x000045db
    9290:	000082f1 	.word	0x000082f1
    9294:	00008475 	.word	0x00008475
    9298:	20000a7c 	.word	0x20000a7c
    929c:	20041fff 	.word	0x20041fff

000092a0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    92a0:	4b07      	ldr	r3, [pc, #28]	; (92c0 <_usb_d_dev_register_callback+0x20>)
    92a2:	2900      	cmp	r1, #0
    92a4:	bf08      	it	eq
    92a6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    92a8:	2801      	cmp	r0, #1
    92aa:	d004      	beq.n	92b6 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    92ac:	b910      	cbnz	r0, 92b4 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    92ae:	4b05      	ldr	r3, [pc, #20]	; (92c4 <_usb_d_dev_register_callback+0x24>)
    92b0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    92b4:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    92b6:	4b03      	ldr	r3, [pc, #12]	; (92c4 <_usb_d_dev_register_callback+0x24>)
    92b8:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    92bc:	4770      	bx	lr
    92be:	bf00      	nop
    92c0:	00008061 	.word	0x00008061
    92c4:	200009a8 	.word	0x200009a8

000092c8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    92c8:	4b0a      	ldr	r3, [pc, #40]	; (92f4 <_usb_d_dev_register_ep_callback+0x2c>)
    92ca:	2900      	cmp	r1, #0
    92cc:	bf08      	it	eq
    92ce:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    92d0:	4603      	mov	r3, r0
    92d2:	b138      	cbz	r0, 92e4 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    92d4:	2801      	cmp	r0, #1
    92d6:	d009      	beq.n	92ec <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    92d8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    92da:	bf04      	itt	eq
    92dc:	4b06      	ldreq	r3, [pc, #24]	; (92f8 <_usb_d_dev_register_ep_callback+0x30>)
    92de:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    92e2:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    92e4:	4b04      	ldr	r3, [pc, #16]	; (92f8 <_usb_d_dev_register_ep_callback+0x30>)
    92e6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    92ea:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    92ec:	4b02      	ldr	r3, [pc, #8]	; (92f8 <_usb_d_dev_register_ep_callback+0x30>)
    92ee:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    92f2:	4770      	bx	lr
    92f4:	00008061 	.word	0x00008061
    92f8:	200009a8 	.word	0x200009a8

000092fc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    92fc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    92fe:	4b01      	ldr	r3, [pc, #4]	; (9304 <USB_0_Handler+0x8>)
    9300:	4798      	blx	r3
    9302:	bd08      	pop	{r3, pc}
    9304:	00008665 	.word	0x00008665

00009308 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    9308:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    930a:	4b01      	ldr	r3, [pc, #4]	; (9310 <USB_1_Handler+0x8>)
    930c:	4798      	blx	r3
    930e:	bd08      	pop	{r3, pc}
    9310:	00008665 	.word	0x00008665

00009314 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    9314:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9316:	4b01      	ldr	r3, [pc, #4]	; (931c <USB_2_Handler+0x8>)
    9318:	4798      	blx	r3
    931a:	bd08      	pop	{r3, pc}
    931c:	00008665 	.word	0x00008665

00009320 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9320:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9322:	4b01      	ldr	r3, [pc, #4]	; (9328 <USB_3_Handler+0x8>)
    9324:	4798      	blx	r3
    9326:	bd08      	pop	{r3, pc}
    9328:	00008665 	.word	0x00008665

0000932c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    932c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    932e:	4604      	mov	r4, r0
    9330:	b340      	cbz	r0, 9384 <_wdt_init+0x58>
    9332:	6800      	ldr	r0, [r0, #0]
    9334:	3000      	adds	r0, #0
    9336:	bf18      	it	ne
    9338:	2001      	movne	r0, #1
    933a:	2250      	movs	r2, #80	; 0x50
    933c:	4915      	ldr	r1, [pc, #84]	; (9394 <_wdt_init+0x68>)
    933e:	4b16      	ldr	r3, [pc, #88]	; (9398 <_wdt_init+0x6c>)
    9340:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    9342:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9344:	689a      	ldr	r2, [r3, #8]
    9346:	f012 0f0e 	tst.w	r2, #14
    934a:	d1fb      	bne.n	9344 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    934c:	781a      	ldrb	r2, [r3, #0]
    934e:	09d2      	lsrs	r2, r2, #7
    9350:	d11a      	bne.n	9388 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9352:	689a      	ldr	r2, [r3, #8]
    9354:	f012 0f0e 	tst.w	r2, #14
    9358:	d1fb      	bne.n	9352 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    935a:	781a      	ldrb	r2, [r3, #0]
    935c:	f012 0f02 	tst.w	r2, #2
    9360:	d115      	bne.n	938e <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9362:	781a      	ldrb	r2, [r3, #0]
    9364:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9368:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    936a:	689a      	ldr	r2, [r3, #8]
    936c:	f012 0f0e 	tst.w	r2, #14
    9370:	d1fb      	bne.n	936a <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    9372:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9374:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    937a:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    937e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    9380:	2000      	movs	r0, #0
    9382:	bd10      	pop	{r4, pc}
    9384:	2000      	movs	r0, #0
    9386:	e7d8      	b.n	933a <_wdt_init+0xe>
		return ERR_DENIED;
    9388:	f06f 0010 	mvn.w	r0, #16
    938c:	bd10      	pop	{r4, pc}
    938e:	f06f 0010 	mvn.w	r0, #16
}
    9392:	bd10      	pop	{r4, pc}
    9394:	0000d294 	.word	0x0000d294
    9398:	00005959 	.word	0x00005959

0000939c <RTC_Scheduler_ping_cb>:
}


static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag++;
    939c:	4a04      	ldr	r2, [pc, #16]	; (93b0 <RTC_Scheduler_ping_cb+0x14>)
    939e:	7813      	ldrb	r3, [r2, #0]
    93a0:	3301      	adds	r3, #1
    93a2:	b2db      	uxtb	r3, r3
    93a4:	7013      	strb	r3, [r2, #0]
	pingflag_active++;
    93a6:	7853      	ldrb	r3, [r2, #1]
    93a8:	3301      	adds	r3, #1
    93aa:	b2db      	uxtb	r3, r3
    93ac:	7053      	strb	r3, [r2, #1]
    93ae:	4770      	bx	lr
    93b0:	20000d68 	.word	0x20000d68

000093b4 <RTC_Scheduler_realtime_cb>:
}


static void RTC_Scheduler_realtime_cb(const struct timer_task *const timer_task)
{
    93b4:	b508      	push	{r3, lr}
	grid_sys_rtc_tick_time(&grid_sys_state);
    93b6:	4802      	ldr	r0, [pc, #8]	; (93c0 <RTC_Scheduler_realtime_cb+0xc>)
    93b8:	4b02      	ldr	r3, [pc, #8]	; (93c4 <RTC_Scheduler_realtime_cb+0x10>)
    93ba:	4798      	blx	r3
    93bc:	bd08      	pop	{r3, pc}
    93be:	bf00      	nop
    93c0:	20001cf0 	.word	0x20001cf0
    93c4:	00003a33 	.word	0x00003a33

000093c8 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    93c8:	69c3      	ldr	r3, [r0, #28]
    93ca:	2b00      	cmp	r3, #0
    93cc:	d147      	bne.n	945e <grid_port_receive_task+0x96>
void grid_port_receive_task(struct grid_port* por){
    93ce:	b530      	push	{r4, r5, lr}
    93d0:	b083      	sub	sp, #12
    93d2:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 2000){
    93d4:	6983      	ldr	r3, [r0, #24]
    93d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    93da:	d91c      	bls.n	9416 <grid_port_receive_task+0x4e>
		if (por->partner_status == 1){
    93dc:	f890 350f 	ldrb.w	r3, [r0, #1295]	; 0x50f
    93e0:	2b01      	cmp	r3, #1
    93e2:	d005      	beq.n	93f0 <grid_port_receive_task+0x28>
			por->rx_double_buffer_seek_start_index = 0;
    93e4:	2300      	movs	r3, #0
    93e6:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    93e8:	6243      	str	r3, [r0, #36]	; 0x24
			grid_sys_port_reset_dma(por);
    93ea:	4b1d      	ldr	r3, [pc, #116]	; (9460 <grid_port_receive_task+0x98>)
    93ec:	4798      	blx	r3
    93ee:	e014      	b.n	941a <grid_port_receive_task+0x52>
			por->rx_double_buffer_seek_start_index = 0;
    93f0:	2300      	movs	r3, #0
    93f2:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    93f4:	6243      	str	r3, [r0, #36]	; 0x24
			por->partner_status = 0;
    93f6:	f880 350f 	strb.w	r3, [r0, #1295]	; 0x50f
			por->rx_double_buffer_timeout =0;
    93fa:	6183      	str	r3, [r0, #24]
			grid_sys_port_reset_dma(por);
    93fc:	4b18      	ldr	r3, [pc, #96]	; (9460 <grid_port_receive_task+0x98>)
    93fe:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9400:	23c8      	movs	r3, #200	; 0xc8
    9402:	9301      	str	r3, [sp, #4]
    9404:	2302      	movs	r3, #2
    9406:	9300      	str	r3, [sp, #0]
    9408:	23ff      	movs	r3, #255	; 0xff
    940a:	461a      	mov	r2, r3
    940c:	4619      	mov	r1, r3
    940e:	4815      	ldr	r0, [pc, #84]	; (9464 <grid_port_receive_task+0x9c>)
    9410:	4d15      	ldr	r5, [pc, #84]	; (9468 <grid_port_receive_task+0xa0>)
    9412:	47a8      	blx	r5
    9414:	e001      	b.n	941a <grid_port_receive_task+0x52>
		por->rx_double_buffer_timeout++;
    9416:	3301      	adds	r3, #1
    9418:	6183      	str	r3, [r0, #24]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    941a:	6a23      	ldr	r3, [r4, #32]
    941c:	18e2      	adds	r2, r4, r3
    941e:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
    9422:	2a0a      	cmp	r2, #10
    9424:	d015      	beq.n	9452 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9426:	b1c2      	cbz	r2, 945a <grid_port_receive_task+0x92>
    9428:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    942c:	f240 2056 	movw	r0, #598	; 0x256
			por->rx_double_buffer_seek_start_index=0;
    9430:	2500      	movs	r5, #0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9432:	4283      	cmp	r3, r0
			por->rx_double_buffer_seek_start_index++;			
    9434:	bf9a      	itte	ls
    9436:	3301      	addls	r3, #1
    9438:	6223      	strls	r3, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    943a:	6225      	strhi	r5, [r4, #32]
	for(uint32_t i = 0; i<490; i++){
    943c:	3a01      	subs	r2, #1
    943e:	d00c      	beq.n	945a <grid_port_receive_task+0x92>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    9440:	6a23      	ldr	r3, [r4, #32]
    9442:	18e1      	adds	r1, r4, r3
    9444:	f891 1280 	ldrb.w	r1, [r1, #640]	; 0x280
    9448:	290a      	cmp	r1, #10
    944a:	d002      	beq.n	9452 <grid_port_receive_task+0x8a>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    944c:	2900      	cmp	r1, #0
    944e:	d1f0      	bne.n	9432 <grid_port_receive_task+0x6a>
    9450:	e003      	b.n	945a <grid_port_receive_task+0x92>
			por->rx_double_buffer_status = 1;
    9452:	2301      	movs	r3, #1
    9454:	61e3      	str	r3, [r4, #28]
			por->rx_double_buffer_timeout = 0;
    9456:	2300      	movs	r3, #0
    9458:	61a3      	str	r3, [r4, #24]
}
    945a:	b003      	add	sp, #12
    945c:	bd30      	pop	{r4, r5, pc}
    945e:	4770      	bx	lr
    9460:	00003799 	.word	0x00003799
    9464:	20001cf0 	.word	0x20001cf0
    9468:	00003a8d 	.word	0x00003a8d

0000946c <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t length){
    946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9470:	b08b      	sub	sp, #44	; 0x2c
    9472:	af02      	add	r7, sp, #8
    9474:	4604      	mov	r4, r0
    9476:	4615      	mov	r5, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    9478:	2301      	movs	r3, #1
    947a:	753b      	strb	r3, [r7, #20]
	response[1] = GRID_MSG_DIRECT;
    947c:	230e      	movs	r3, #14
    947e:	757b      	strb	r3, [r7, #21]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    9480:	2315      	movs	r3, #21
    9482:	75bb      	strb	r3, [r7, #22]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    9484:	2304      	movs	r3, #4
    9486:	75fb      	strb	r3, [r7, #23]
	response[4] = '0'; //checksum
    9488:	2330      	movs	r3, #48	; 0x30
    948a:	763b      	strb	r3, [r7, #24]
	response[5] = '0'; //checksum
    948c:	767b      	strb	r3, [r7, #25]
	response[6] = '\n';
    948e:	230a      	movs	r3, #10
    9490:	76bb      	strb	r3, [r7, #26]
	response[7] = 0;
    9492:	2300      	movs	r3, #0
    9494:	76fb      	strb	r3, [r7, #27]
	response[8] = 0;
    9496:	773b      	strb	r3, [r7, #28]
	response[9] = 0;
    9498:	777b      	strb	r3, [r7, #29]
	uint8_t error_flag = 0;
    949a:	74fb      	strb	r3, [r7, #19]
	uint8_t message[length];
    949c:	1dd3      	adds	r3, r2, #7
    949e:	f023 0307 	bic.w	r3, r3, #7
    94a2:	ebad 0d03 	sub.w	sp, sp, r3
    94a6:	ae02      	add	r6, sp, #8
    94a8:	46b0      	mov	r8, r6
	for (uint32_t i = 0; i<length; i++){
    94aa:	b1b2      	cbz	r2, 94da <grid_port_receive_decode+0x6e>
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    94ac:	6a41      	ldr	r1, [r0, #36]	; 0x24
    94ae:	eb06 0c02 	add.w	ip, r6, r2
    94b2:	4632      	mov	r2, r6
    94b4:	1b89      	subs	r1, r1, r6
    94b6:	f8df e288 	ldr.w	lr, [pc, #648]	; 9740 <grid_port_receive_decode+0x2d4>
    94ba:	f44f 7016 	mov.w	r0, #600	; 0x258
    94be:	eb01 0902 	add.w	r9, r1, r2
    94c2:	fbae a309 	umull	sl, r3, lr, r9
    94c6:	099b      	lsrs	r3, r3, #6
    94c8:	fb00 9313 	mls	r3, r0, r3, r9
    94cc:	4423      	add	r3, r4
    94ce:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
    94d2:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i = 0; i<length; i++){
    94d6:	4594      	cmp	ip, r2
    94d8:	d1f1      	bne.n	94be <grid_port_receive_decode+0x52>
	if (message[0] == 1 && message [length-1] == 10){
    94da:	7833      	ldrb	r3, [r6, #0]
    94dc:	2b01      	cmp	r3, #1
    94de:	d02e      	beq.n	953e <grid_port_receive_decode+0xd2>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    94e0:	23c8      	movs	r3, #200	; 0xc8
    94e2:	9301      	str	r3, [sp, #4]
    94e4:	2302      	movs	r3, #2
    94e6:	9300      	str	r3, [sp, #0]
    94e8:	2314      	movs	r3, #20
    94ea:	2200      	movs	r2, #0
    94ec:	4611      	mov	r1, r2
    94ee:	4892      	ldr	r0, [pc, #584]	; (9738 <grid_port_receive_decode+0x2cc>)
    94f0:	4e92      	ldr	r6, [pc, #584]	; (973c <grid_port_receive_decode+0x2d0>)
    94f2:	47b0      	blx	r6
	for (uint32_t i = 0; i<length; i++){
    94f4:	b18d      	cbz	r5, 951a <grid_port_receive_decode+0xae>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    94f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    94f8:	eb05 0e02 	add.w	lr, r5, r2
    94fc:	4e90      	ldr	r6, [pc, #576]	; (9740 <grid_port_receive_decode+0x2d4>)
    94fe:	f44f 7016 	mov.w	r0, #600	; 0x258
    9502:	2100      	movs	r1, #0
    9504:	fba6 c302 	umull	ip, r3, r6, r2
    9508:	099b      	lsrs	r3, r3, #6
    950a:	fb00 2313 	mls	r3, r0, r3, r2
    950e:	4423      	add	r3, r4
    9510:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
    9514:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    9516:	4596      	cmp	lr, r2
    9518:	d1f4      	bne.n	9504 <grid_port_receive_decode+0x98>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    951a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    951c:	441d      	add	r5, r3
    951e:	4b88      	ldr	r3, [pc, #544]	; (9740 <grid_port_receive_decode+0x2d4>)
    9520:	fba3 2305 	umull	r2, r3, r3, r5
    9524:	099b      	lsrs	r3, r3, #6
    9526:	f44f 7216 	mov.w	r2, #600	; 0x258
    952a:	fb02 5313 	mls	r3, r2, r3, r5
    952e:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    9530:	6223      	str	r3, [r4, #32]
	por->rx_double_buffer_status = 0;
    9532:	2300      	movs	r3, #0
    9534:	61e3      	str	r3, [r4, #28]
}
    9536:	3724      	adds	r7, #36	; 0x24
    9538:	46bd      	mov	sp, r7
    953a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (message[0] == 1 && message [length-1] == 10){
    953e:	1973      	adds	r3, r6, r5
    9540:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9544:	2b0a      	cmp	r3, #10
    9546:	d1cb      	bne.n	94e0 <grid_port_receive_decode+0x74>
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    9548:	1ee8      	subs	r0, r5, #3
    954a:	f107 0213 	add.w	r2, r7, #19
    954e:	2102      	movs	r1, #2
    9550:	4430      	add	r0, r6
    9552:	4b7c      	ldr	r3, [pc, #496]	; (9744 <grid_port_receive_decode+0x2d8>)
    9554:	4798      	blx	r3
    9556:	4681      	mov	r9, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    9558:	4629      	mov	r1, r5
    955a:	4630      	mov	r0, r6
    955c:	4b7a      	ldr	r3, [pc, #488]	; (9748 <grid_port_receive_decode+0x2dc>)
    955e:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    9560:	fa5f f989 	uxtb.w	r9, r9
    9564:	b2c0      	uxtb	r0, r0
    9566:	4581      	cmp	r9, r0
    9568:	d00e      	beq.n	9588 <grid_port_receive_decode+0x11c>
			if (error_flag != 0){		
    956a:	7cfb      	ldrb	r3, [r7, #19]
    956c:	2b00      	cmp	r3, #0
    956e:	f040 819d 	bne.w	98ac <grid_port_receive_decode+0x440>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // PURPLE BLINKY
    9572:	23c8      	movs	r3, #200	; 0xc8
    9574:	9301      	str	r3, [sp, #4]
    9576:	2301      	movs	r3, #1
    9578:	9300      	str	r3, [sp, #0]
    957a:	23ff      	movs	r3, #255	; 0xff
    957c:	2200      	movs	r2, #0
    957e:	2114      	movs	r1, #20
    9580:	486d      	ldr	r0, [pc, #436]	; (9738 <grid_port_receive_decode+0x2cc>)
    9582:	4e6e      	ldr	r6, [pc, #440]	; (973c <grid_port_receive_decode+0x2d0>)
    9584:	47b0      	blx	r6
    9586:	e7b5      	b.n	94f4 <grid_port_receive_decode+0x88>
		if (checksum_calculated == checksum_received && error_flag == 0){
    9588:	f897 b013 	ldrb.w	fp, [r7, #19]
    958c:	f1bb 0f00 	cmp.w	fp, #0
    9590:	f040 818c 	bne.w	98ac <grid_port_receive_decode+0x440>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9594:	7873      	ldrb	r3, [r6, #1]
    9596:	2b0f      	cmp	r3, #15
    9598:	d00d      	beq.n	95b6 <grid_port_receive_decode+0x14a>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    959a:	2b0e      	cmp	r3, #14
    959c:	f000 80f6 	beq.w	978c <grid_port_receive_decode+0x320>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    95a0:	23c8      	movs	r3, #200	; 0xc8
    95a2:	9301      	str	r3, [sp, #4]
    95a4:	2302      	movs	r3, #2
    95a6:	9300      	str	r3, [sp, #0]
    95a8:	2300      	movs	r3, #0
    95aa:	461a      	mov	r2, r3
    95ac:	21ff      	movs	r1, #255	; 0xff
    95ae:	4862      	ldr	r0, [pc, #392]	; (9738 <grid_port_receive_decode+0x2cc>)
    95b0:	4e62      	ldr	r6, [pc, #392]	; (973c <grid_port_receive_decode+0x2d0>)
    95b2:	47b0      	blx	r6
    95b4:	e79e      	b.n	94f4 <grid_port_receive_decode+0x88>
				uint8_t received_id  = grid_msg_get_id(message);;			
    95b6:	4630      	mov	r0, r6
    95b8:	4b64      	ldr	r3, [pc, #400]	; (974c <grid_port_receive_decode+0x2e0>)
    95ba:	4798      	blx	r3
    95bc:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_age(message);
    95be:	4630      	mov	r0, r6
    95c0:	4b63      	ldr	r3, [pc, #396]	; (9750 <grid_port_receive_decode+0x2e4>)
    95c2:	4798      	blx	r3
    95c4:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    95c6:	4630      	mov	r0, r6
    95c8:	4b62      	ldr	r3, [pc, #392]	; (9754 <grid_port_receive_decode+0x2e8>)
    95ca:	4798      	blx	r3
    95cc:	4682      	mov	sl, r0
    95ce:	f1a0 097f 	sub.w	r9, r0, #127	; 0x7f
    95d2:	fa4f f989 	sxtb.w	r9, r9
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    95d6:	4630      	mov	r0, r6
    95d8:	4b5f      	ldr	r3, [pc, #380]	; (9758 <grid_port_receive_decode+0x2ec>)
    95da:	4798      	blx	r3
    95dc:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    95e0:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    95e2:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
    95e6:	b182      	cbz	r2, 960a <grid_port_receive_decode+0x19e>
				else if(por->partner_fi == 1){ // 90 deg
    95e8:	2a01      	cmp	r2, #1
    95ea:	d009      	beq.n	9600 <grid_port_receive_decode+0x194>
				else if(por->partner_fi == 2){ // 180 deg
    95ec:	2a02      	cmp	r2, #2
    95ee:	d162      	bne.n	96b6 <grid_port_receive_decode+0x24a>
					rotated_dx  -= received_dx;
    95f0:	f1ca 097f 	rsb	r9, sl, #127	; 0x7f
    95f4:	fa4f f989 	sxtb.w	r9, r9
					rotated_dy  -= received_dy;
    95f8:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    95fc:	b25b      	sxtb	r3, r3
    95fe:	e004      	b.n	960a <grid_port_receive_decode+0x19e>
					rotated_dx  -= received_dy;
    9600:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    9604:	464b      	mov	r3, r9
					rotated_dx  -= received_dy;
    9606:	fa4f f980 	sxtb.w	r9, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    960a:	f894 a50d 	ldrb.w	sl, [r4, #1293]	; 0x50d
    960e:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    9612:	44d1      	add	r9, sl
    9614:	fa5f fa89 	uxtb.w	sl, r9
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    9618:	f894 950e 	ldrb.w	r9, [r4, #1294]	; 0x50e
    961c:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    9620:	444b      	add	r3, r9
    9622:	fa5f f983 	uxtb.w	r9, r3
				grid_msg_set_id(message, updated_id);
    9626:	6879      	ldr	r1, [r7, #4]
    9628:	4630      	mov	r0, r6
    962a:	4b4c      	ldr	r3, [pc, #304]	; (975c <grid_port_receive_decode+0x2f0>)
    962c:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    962e:	4651      	mov	r1, sl
    9630:	4630      	mov	r0, r6
    9632:	4b4b      	ldr	r3, [pc, #300]	; (9760 <grid_port_receive_decode+0x2f4>)
    9634:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    9636:	4649      	mov	r1, r9
    9638:	4630      	mov	r0, r6
    963a:	4b4a      	ldr	r3, [pc, #296]	; (9764 <grid_port_receive_decode+0x2f8>)
    963c:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    963e:	6839      	ldr	r1, [r7, #0]
    9640:	4630      	mov	r0, r6
    9642:	4b49      	ldr	r3, [pc, #292]	; (9768 <grid_port_receive_decode+0x2fc>)
    9644:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    9646:	687b      	ldr	r3, [r7, #4]
    9648:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
    964c:	eb09 290a 	add.w	r9, r9, sl, lsl #8
    9650:	683b      	ldr	r3, [r7, #0]
    9652:	eb03 2909 	add.w	r9, r3, r9, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    9656:	4649      	mov	r1, r9
    9658:	4837      	ldr	r0, [pc, #220]	; (9738 <grid_port_receive_decode+0x2cc>)
    965a:	4b44      	ldr	r3, [pc, #272]	; (976c <grid_port_receive_decode+0x300>)
    965c:	4798      	blx	r3
    965e:	2800      	cmp	r0, #0
    9660:	d134      	bne.n	96cc <grid_port_receive_decode+0x260>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    9662:	4629      	mov	r1, r5
    9664:	4630      	mov	r0, r6
    9666:	4b38      	ldr	r3, [pc, #224]	; (9748 <grid_port_receive_decode+0x2dc>)
    9668:	4798      	blx	r3
    966a:	4602      	mov	r2, r0
    966c:	4629      	mov	r1, r5
    966e:	4630      	mov	r0, r6
    9670:	4b3f      	ldr	r3, [pc, #252]	; (9770 <grid_port_receive_decode+0x304>)
    9672:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    9674:	f504 669e 	add.w	r6, r4, #1264	; 0x4f0
    9678:	b2a9      	uxth	r1, r5
    967a:	4630      	mov	r0, r6
    967c:	4b3d      	ldr	r3, [pc, #244]	; (9774 <grid_port_receive_decode+0x308>)
    967e:	4798      	blx	r3
    9680:	b380      	cbz	r0, 96e4 <grid_port_receive_decode+0x278>
						for (uint8_t i=0; i<length; i++){
    9682:	b15d      	cbz	r5, 969c <grid_port_receive_decode+0x230>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    9684:	f8df a100 	ldr.w	sl, [pc, #256]	; 9788 <grid_port_receive_decode+0x31c>
    9688:	f818 100b 	ldrb.w	r1, [r8, fp]
    968c:	4630      	mov	r0, r6
    968e:	47d0      	blx	sl
						for (uint8_t i=0; i<length; i++){
    9690:	f10b 0b01 	add.w	fp, fp, #1
    9694:	fa5f fb8b 	uxtb.w	fp, fp
    9698:	455d      	cmp	r5, fp
    969a:	d8f5      	bhi.n	9688 <grid_port_receive_decode+0x21c>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    969c:	4630      	mov	r0, r6
    969e:	4b36      	ldr	r3, [pc, #216]	; (9778 <grid_port_receive_decode+0x30c>)
    96a0:	4798      	blx	r3
						grid_port_process_inbound(por);
    96a2:	4620      	mov	r0, r4
    96a4:	4b35      	ldr	r3, [pc, #212]	; (977c <grid_port_receive_decode+0x310>)
    96a6:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    96a8:	4649      	mov	r1, r9
    96aa:	4823      	ldr	r0, [pc, #140]	; (9738 <grid_port_receive_decode+0x2cc>)
    96ac:	4b34      	ldr	r3, [pc, #208]	; (9780 <grid_port_receive_decode+0x314>)
    96ae:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    96b0:	2306      	movs	r3, #6
    96b2:	75bb      	strb	r3, [r7, #22]
    96b4:	e016      	b.n	96e4 <grid_port_receive_decode+0x278>
				else if(por->partner_fi == 3){ // 270 deg
    96b6:	2a03      	cmp	r2, #3
    96b8:	d105      	bne.n	96c6 <grid_port_receive_decode+0x25a>
					rotated_dy  -= received_dx;
    96ba:	f1ca 0a7f 	rsb	sl, sl, #127	; 0x7f
					rotated_dx  += received_dy;
    96be:	4699      	mov	r9, r3
					rotated_dy  -= received_dx;
    96c0:	fa4f f38a 	sxtb.w	r3, sl
    96c4:	e7a1      	b.n	960a <grid_port_receive_decode+0x19e>
				int8_t rotated_dy = 0;
    96c6:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    96c8:	4699      	mov	r9, r3
    96ca:	e79e      	b.n	960a <grid_port_receive_decode+0x19e>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    96cc:	2306      	movs	r3, #6
    96ce:	75bb      	strb	r3, [r7, #22]
					grid_sys_alert_set_alert(&grid_sys_state, 50, 50, 50, 2, 200); // WHITE
    96d0:	23c8      	movs	r3, #200	; 0xc8
    96d2:	9301      	str	r3, [sp, #4]
    96d4:	2302      	movs	r3, #2
    96d6:	9300      	str	r3, [sp, #0]
    96d8:	2332      	movs	r3, #50	; 0x32
    96da:	461a      	mov	r2, r3
    96dc:	4619      	mov	r1, r3
    96de:	4816      	ldr	r0, [pc, #88]	; (9738 <grid_port_receive_decode+0x2cc>)
    96e0:	4e16      	ldr	r6, [pc, #88]	; (973c <grid_port_receive_decode+0x2d0>)
    96e2:	47b0      	blx	r6
				uint32_t response_length = strlen(response);
    96e4:	f107 0014 	add.w	r0, r7, #20
    96e8:	4b26      	ldr	r3, [pc, #152]	; (9784 <grid_port_receive_decode+0x318>)
    96ea:	4798      	blx	r3
    96ec:	4606      	mov	r6, r0
				if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    96ee:	f504 699b 	add.w	r9, r4, #1240	; 0x4d8
    96f2:	b281      	uxth	r1, r0
    96f4:	4648      	mov	r0, r9
    96f6:	4b1f      	ldr	r3, [pc, #124]	; (9774 <grid_port_receive_decode+0x308>)
    96f8:	4798      	blx	r3
    96fa:	2800      	cmp	r0, #0
    96fc:	f43f aefa 	beq.w	94f4 <grid_port_receive_decode+0x88>
					uint8_t checksum = grid_msg_get_checksum(response, response_length);
    9700:	4631      	mov	r1, r6
    9702:	f107 0014 	add.w	r0, r7, #20
    9706:	4b10      	ldr	r3, [pc, #64]	; (9748 <grid_port_receive_decode+0x2dc>)
    9708:	4798      	blx	r3
					grid_msg_set_checksum(response, response_length, checksum);
    970a:	b2c2      	uxtb	r2, r0
    970c:	4631      	mov	r1, r6
    970e:	f107 0014 	add.w	r0, r7, #20
    9712:	4b17      	ldr	r3, [pc, #92]	; (9770 <grid_port_receive_decode+0x304>)
    9714:	4798      	blx	r3
					for (uint32_t i=0; i<response_length; i++)
    9716:	b156      	cbz	r6, 972e <grid_port_receive_decode+0x2c2>
    9718:	f107 0814 	add.w	r8, r7, #20
    971c:	4446      	add	r6, r8
						grid_buffer_write_character(&por->tx_buffer, response[i]);
    971e:	f8df a068 	ldr.w	sl, [pc, #104]	; 9788 <grid_port_receive_decode+0x31c>
    9722:	f818 1b01 	ldrb.w	r1, [r8], #1
    9726:	4648      	mov	r0, r9
    9728:	47d0      	blx	sl
					for (uint32_t i=0; i<response_length; i++)
    972a:	4546      	cmp	r6, r8
    972c:	d1f9      	bne.n	9722 <grid_port_receive_decode+0x2b6>
					grid_buffer_write_acknowledge(&por->tx_buffer);
    972e:	4648      	mov	r0, r9
    9730:	4b11      	ldr	r3, [pc, #68]	; (9778 <grid_port_receive_decode+0x30c>)
    9732:	4798      	blx	r3
    9734:	e6de      	b.n	94f4 <grid_port_receive_decode+0x88>
    9736:	bf00      	nop
    9738:	20001cf0 	.word	0x20001cf0
    973c:	00003a8d 	.word	0x00003a8d
    9740:	1b4e81b5 	.word	0x1b4e81b5
    9744:	00003ae1 	.word	0x00003ae1
    9748:	00003db9 	.word	0x00003db9
    974c:	00003de9 	.word	0x00003de9
    9750:	00003e49 	.word	0x00003e49
    9754:	00003e09 	.word	0x00003e09
    9758:	00003e29 	.word	0x00003e29
    975c:	00003e69 	.word	0x00003e69
    9760:	00003e7d 	.word	0x00003e7d
    9764:	00003e91 	.word	0x00003e91
    9768:	00003ea5 	.word	0x00003ea5
    976c:	00003eb9 	.word	0x00003eb9
    9770:	00003dd5 	.word	0x00003dd5
    9774:	00001375 	.word	0x00001375
    9778:	000013c1 	.word	0x000013c1
    977c:	000016bd 	.word	0x000016bd
    9780:	00003ee3 	.word	0x00003ee3
    9784:	0000bdc9 	.word	0x0000bdc9
    9788:	000013a5 	.word	0x000013a5
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    978c:	78b3      	ldrb	r3, [r6, #2]
    978e:	2b06      	cmp	r3, #6
    9790:	d044      	beq.n	981c <grid_port_receive_decode+0x3b0>
				else if (message[2] == GRID_MSG_NACKNOWLEDGE){
    9792:	2b15      	cmp	r3, #21
    9794:	d04d      	beq.n	9832 <grid_port_receive_decode+0x3c6>
				else if (message[2] == GRID_MSG_BELL){
    9796:	2b07      	cmp	r3, #7
    9798:	f47f aeac 	bne.w	94f4 <grid_port_receive_decode+0x88>
					if (por->partner_status == 0){
    979c:	f894 350f 	ldrb.w	r3, [r4, #1295]	; 0x50f
    97a0:	2b00      	cmp	r3, #0
    97a2:	d150      	bne.n	9846 <grid_port_receive_decode+0x3da>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    97a4:	78f3      	ldrb	r3, [r6, #3]
    97a6:	7a62      	ldrb	r2, [r4, #9]
    97a8:	1a9b      	subs	r3, r3, r2
    97aa:	3306      	adds	r3, #6
    97ac:	425a      	negs	r2, r3
    97ae:	f003 0303 	and.w	r3, r3, #3
    97b2:	f002 0203 	and.w	r2, r2, #3
    97b6:	bf58      	it	pl
    97b8:	4253      	negpl	r3, r2
    97ba:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    97be:	f1a5 000c 	sub.w	r0, r5, #12
    97c2:	2200      	movs	r2, #0
    97c4:	2108      	movs	r1, #8
    97c6:	4430      	add	r0, r6
    97c8:	4b3e      	ldr	r3, [pc, #248]	; (98c4 <grid_port_receive_decode+0x458>)
    97ca:	4798      	blx	r3
    97cc:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
						por->partner_status = 1;
    97d0:	2301      	movs	r3, #1
    97d2:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
						grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    97d6:	4e3c      	ldr	r6, [pc, #240]	; (98c8 <grid_port_receive_decode+0x45c>)
    97d8:	4630      	mov	r0, r6
    97da:	4b3c      	ldr	r3, [pc, #240]	; (98cc <grid_port_receive_decode+0x460>)
    97dc:	4798      	blx	r3
    97de:	b2c0      	uxtb	r0, r0
    97e0:	7030      	strb	r0, [r6, #0]
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    97e2:	23c8      	movs	r3, #200	; 0xc8
    97e4:	9301      	str	r3, [sp, #4]
    97e6:	2302      	movs	r3, #2
    97e8:	9300      	str	r3, [sp, #0]
    97ea:	2300      	movs	r3, #0
    97ec:	22ff      	movs	r2, #255	; 0xff
    97ee:	4619      	mov	r1, r3
    97f0:	4630      	mov	r0, r6
    97f2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 98dc <grid_port_receive_decode+0x470>
    97f6:	47c0      	blx	r8
						if (grid_sys_state.bank_select!=255){
    97f8:	7a73      	ldrb	r3, [r6, #9]
    97fa:	b2db      	uxtb	r3, r3
    97fc:	2bff      	cmp	r3, #255	; 0xff
    97fe:	f43f ae79 	beq.w	94f4 <grid_port_receive_decode+0x88>
							grid_sys_write_hex_string_value(&mod->report_array[0].payload[7], 2, grid_sys_state.bank_select);
    9802:	7a72      	ldrb	r2, [r6, #9]
    9804:	4e32      	ldr	r6, [pc, #200]	; (98d0 <grid_port_receive_decode+0x464>)
    9806:	6873      	ldr	r3, [r6, #4]
    9808:	6858      	ldr	r0, [r3, #4]
    980a:	2102      	movs	r1, #2
    980c:	3007      	adds	r0, #7
    980e:	4b31      	ldr	r3, [pc, #196]	; (98d4 <grid_port_receive_decode+0x468>)
    9810:	4798      	blx	r3
							grid_ui_report_set_changed_flag(mod, 0);												
    9812:	2100      	movs	r1, #0
    9814:	4630      	mov	r0, r6
    9816:	4b30      	ldr	r3, [pc, #192]	; (98d8 <grid_port_receive_decode+0x46c>)
    9818:	4798      	blx	r3
    981a:	e66b      	b.n	94f4 <grid_port_receive_decode+0x88>
					grid_sys_alert_set_alert(&grid_sys_state, 30, 30, 30, 0, 250); // LIGHT WHITE PULSE
    981c:	23fa      	movs	r3, #250	; 0xfa
    981e:	9301      	str	r3, [sp, #4]
    9820:	2300      	movs	r3, #0
    9822:	9300      	str	r3, [sp, #0]
    9824:	231e      	movs	r3, #30
    9826:	461a      	mov	r2, r3
    9828:	4619      	mov	r1, r3
    982a:	4827      	ldr	r0, [pc, #156]	; (98c8 <grid_port_receive_decode+0x45c>)
    982c:	4e2b      	ldr	r6, [pc, #172]	; (98dc <grid_port_receive_decode+0x470>)
    982e:	47b0      	blx	r6
    9830:	e660      	b.n	94f4 <grid_port_receive_decode+0x88>
					grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 0, 250); // LIGHT RED PULSE
    9832:	23fa      	movs	r3, #250	; 0xfa
    9834:	9301      	str	r3, [sp, #4]
    9836:	2200      	movs	r2, #0
    9838:	9200      	str	r2, [sp, #0]
    983a:	4613      	mov	r3, r2
    983c:	2132      	movs	r1, #50	; 0x32
    983e:	4822      	ldr	r0, [pc, #136]	; (98c8 <grid_port_receive_decode+0x45c>)
    9840:	4e26      	ldr	r6, [pc, #152]	; (98dc <grid_port_receive_decode+0x470>)
    9842:	47b0      	blx	r6
    9844:	e656      	b.n	94f4 <grid_port_receive_decode+0x88>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    9846:	78f3      	ldrb	r3, [r6, #3]
    9848:	7a62      	ldrb	r2, [r4, #9]
    984a:	1a9b      	subs	r3, r3, r2
    984c:	3306      	adds	r3, #6
    984e:	425a      	negs	r2, r3
    9850:	f003 0303 	and.w	r3, r3, #3
    9854:	f002 0203 	and.w	r2, r2, #3
    9858:	bf58      	it	pl
    985a:	4253      	negpl	r3, r2
    985c:	f894 850c 	ldrb.w	r8, [r4, #1292]	; 0x50c
    9860:	4543      	cmp	r3, r8
    9862:	bf14      	ite	ne
    9864:	f04f 0800 	movne.w	r8, #0
    9868:	f04f 0801 	moveq.w	r8, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    986c:	f1a5 000c 	sub.w	r0, r5, #12
    9870:	2200      	movs	r2, #0
    9872:	2108      	movs	r1, #8
    9874:	4430      	add	r0, r6
    9876:	4b13      	ldr	r3, [pc, #76]	; (98c4 <grid_port_receive_decode+0x458>)
    9878:	4798      	blx	r3
    987a:	60b8      	str	r0, [r7, #8]
						volatile uint32_t debug2 = por->partner_hwcfg;
    987c:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    9880:	60fb      	str	r3, [r7, #12]
						validator &= (por->partner_hwcfg == debug);									
    9882:	68ba      	ldr	r2, [r7, #8]
						if (validator == 0){
    9884:	4293      	cmp	r3, r2
    9886:	d103      	bne.n	9890 <grid_port_receive_decode+0x424>
    9888:	f1b8 0f00 	cmp.w	r8, #0
    988c:	f47f ae32 	bne.w	94f4 <grid_port_receive_decode+0x88>
							por->partner_status = 0;	
    9890:	2300      	movs	r3, #0
    9892:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    9896:	23c8      	movs	r3, #200	; 0xc8
    9898:	9301      	str	r3, [sp, #4]
    989a:	2302      	movs	r3, #2
    989c:	9300      	str	r3, [sp, #0]
    989e:	23ff      	movs	r3, #255	; 0xff
    98a0:	461a      	mov	r2, r3
    98a2:	4619      	mov	r1, r3
    98a4:	4808      	ldr	r0, [pc, #32]	; (98c8 <grid_port_receive_decode+0x45c>)
    98a6:	4e0d      	ldr	r6, [pc, #52]	; (98dc <grid_port_receive_decode+0x470>)
    98a8:	47b0      	blx	r6
    98aa:	e623      	b.n	94f4 <grid_port_receive_decode+0x88>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 0, 1, 200); // PURPLE BLINKY
    98ac:	23c8      	movs	r3, #200	; 0xc8
    98ae:	9301      	str	r3, [sp, #4]
    98b0:	2301      	movs	r3, #1
    98b2:	9300      	str	r3, [sp, #0]
    98b4:	2300      	movs	r3, #0
    98b6:	461a      	mov	r2, r3
    98b8:	2114      	movs	r1, #20
    98ba:	4803      	ldr	r0, [pc, #12]	; (98c8 <grid_port_receive_decode+0x45c>)
    98bc:	4e07      	ldr	r6, [pc, #28]	; (98dc <grid_port_receive_decode+0x470>)
    98be:	47b0      	blx	r6
    98c0:	e618      	b.n	94f4 <grid_port_receive_decode+0x88>
    98c2:	bf00      	nop
    98c4:	00003ae1 	.word	0x00003ae1
    98c8:	20001cf0 	.word	0x20001cf0
    98cc:	00003a21 	.word	0x00003a21
    98d0:	20001ce4 	.word	0x20001ce4
    98d4:	00003b21 	.word	0x00003b21
    98d8:	0000408f 	.word	0x0000408f
    98dc:	00003a8d 	.word	0x00003a8d

000098e0 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    98e0:	b510      	push	{r4, lr}
    98e2:	4604      	mov	r4, r0
	grid_port_receive_task(por);	
    98e4:	4b08      	ldr	r3, [pc, #32]	; (9908 <grid_port_receive_complete_task+0x28>)
    98e6:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    98e8:	69e3      	ldr	r3, [r4, #28]
    98ea:	b163      	cbz	r3, 9906 <grid_port_receive_complete_task+0x26>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    98ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
    98ee:	6a22      	ldr	r2, [r4, #32]
    98f0:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    98f2:	bf34      	ite	cc
    98f4:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    98f6:	f202 2259 	addwcs	r2, r2, #601	; 0x259
    98fa:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    98fc:	4620      	mov	r0, r4
    98fe:	4b03      	ldr	r3, [pc, #12]	; (990c <grid_port_receive_complete_task+0x2c>)
    9900:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    9902:	2300      	movs	r3, #0
    9904:	61e3      	str	r3, [r4, #28]
    9906:	bd10      	pop	{r4, pc}
    9908:	000093c9 	.word	0x000093c9
    990c:	0000946d 	.word	0x0000946d

00009910 <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    9910:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20; //was /5: 200ms
    9912:	4c0d      	ldr	r4, [pc, #52]	; (9948 <init_timer+0x38>)
    9914:	f240 3333 	movw	r3, #819	; 0x333
    9918:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    991a:	4b0c      	ldr	r3, [pc, #48]	; (994c <init_timer+0x3c>)
    991c:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    991e:	2301      	movs	r3, #1
    9920:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_realtime.interval = 1;
    9922:	6223      	str	r3, [r4, #32]
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    9924:	4a0a      	ldr	r2, [pc, #40]	; (9950 <init_timer+0x40>)
    9926:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    9928:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    992c:	4d09      	ldr	r5, [pc, #36]	; (9954 <init_timer+0x44>)
    992e:	1d21      	adds	r1, r4, #4
    9930:	4628      	mov	r0, r5
    9932:	4e09      	ldr	r6, [pc, #36]	; (9958 <init_timer+0x48>)
    9934:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    9936:	f104 0118 	add.w	r1, r4, #24
    993a:	4628      	mov	r0, r5
    993c:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    993e:	4628      	mov	r0, r5
    9940:	4b06      	ldr	r3, [pc, #24]	; (995c <init_timer+0x4c>)
    9942:	4798      	blx	r3
    9944:	bd70      	pop	{r4, r5, r6, pc}
    9946:	bf00      	nop
    9948:	20000d68 	.word	0x20000d68
    994c:	0000939d 	.word	0x0000939d
    9950:	000093b5 	.word	0x000093b5
    9954:	20000f6c 	.word	0x20000f6c
    9958:	00004eb9 	.word	0x00004eb9
    995c:	00004e79 	.word	0x00004e79

00009960 <main>:




int main(void)
{
    9960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9964:	b087      	sub	sp, #28

	atmel_start_init();	
    9966:	4b61      	ldr	r3, [pc, #388]	; (9aec <main+0x18c>)
    9968:	4798      	blx	r3
//	wdt_disable(&WDT_0);
	

	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    996a:	4b61      	ldr	r3, [pc, #388]	; (9af0 <main+0x190>)
    996c:	4798      	blx	r3


	composite_device_start();
    996e:	4b61      	ldr	r3, [pc, #388]	; (9af4 <main+0x194>)
    9970:	4798      	blx	r3

	grid_module_common_init();
    9972:	4b61      	ldr	r3, [pc, #388]	; (9af8 <main+0x198>)
    9974:	4798      	blx	r3

	
	uint32_t loopstart = 0;

					
	uint32_t hwtype = grid_sys_get_hwcfg();
    9976:	4b61      	ldr	r3, [pc, #388]	; (9afc <main+0x19c>)
    9978:	4798      	blx	r3
    997a:	4682      	mov	sl, r0
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    997c:	2600      	movs	r6, #0
    997e:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 9b50 <main+0x1f0>
	{

		if (hwtype == GRID_MODULE_EN16_RevA){	
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9982:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 9b38 <main+0x1d8>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9986:	e003      	b.n	9990 <main+0x30>
		if (hwtype == GRID_MODULE_EN16_RevA){	
    9988:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    998c:	d01f      	beq.n	99ce <main+0x6e>
    998e:	3601      	adds	r6, #1
    9990:	b2f5      	uxtb	r5, r6
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9992:	485b      	ldr	r0, [pc, #364]	; (9b00 <main+0x1a0>)
    9994:	47c8      	blx	r9
    9996:	42a8      	cmp	r0, r5
    9998:	d8f6      	bhi.n	9988 <main+0x28>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    999a:	4b5a      	ldr	r3, [pc, #360]	; (9b04 <main+0x1a4>)
    999c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    99a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    99a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    99a8:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    99ac:	4956      	ldr	r1, [pc, #344]	; (9b08 <main+0x1a8>)
    99ae:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    99b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		
		
	gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(PIN_GRID_SYNC_1, false);	
	
	init_timer();
    99b6:	4b55      	ldr	r3, [pc, #340]	; (9b0c <main+0x1ac>)
    99b8:	4798      	blx	r3
	
	uint32_t loopcounter = 0;

	
	
	grid_sys_bank_select(&grid_sys_state, 255);
    99ba:	21ff      	movs	r1, #255	; 0xff
    99bc:	4854      	ldr	r0, [pc, #336]	; (9b10 <main+0x1b0>)
    99be:	4b55      	ldr	r3, [pc, #340]	; (9b14 <main+0x1b4>)
    99c0:	4798      	blx	r3
	 
	 
 	//spi_nor_flash_test();


	printf("Entering Main Loop\r\n");
    99c2:	4855      	ldr	r0, [pc, #340]	; (9b18 <main+0x1b8>)
    99c4:	4b55      	ldr	r3, [pc, #340]	; (9b1c <main+0x1bc>)
    99c6:	4798      	blx	r3
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    99c8:	f8df 9134 	ldr.w	r9, [pc, #308]	; 9b00 <main+0x1a0>
    99cc:	e0d9      	b.n	9b82 <main+0x222>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    99ce:	27ff      	movs	r7, #255	; 0xff
    99d0:	9701      	str	r7, [sp, #4]
    99d2:	2400      	movs	r4, #0
    99d4:	9400      	str	r4, [sp, #0]
    99d6:	4623      	mov	r3, r4
    99d8:	4622      	mov	r2, r4
    99da:	4629      	mov	r1, r5
    99dc:	4848      	ldr	r0, [pc, #288]	; (9b00 <main+0x1a0>)
    99de:	47c0      	blx	r8
			grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    99e0:	9401      	str	r4, [sp, #4]
    99e2:	2305      	movs	r3, #5
    99e4:	9300      	str	r3, [sp, #0]
    99e6:	4623      	mov	r3, r4
    99e8:	4622      	mov	r2, r4
    99ea:	4629      	mov	r1, r5
    99ec:	4844      	ldr	r0, [pc, #272]	; (9b00 <main+0x1a0>)
    99ee:	f8df b15c 	ldr.w	fp, [pc, #348]	; 9b4c <main+0x1ec>
    99f2:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    99f4:	9401      	str	r4, [sp, #4]
    99f6:	9400      	str	r4, [sp, #0]
    99f8:	463b      	mov	r3, r7
    99fa:	4622      	mov	r2, r4
    99fc:	4629      	mov	r1, r5
    99fe:	4840      	ldr	r0, [pc, #256]	; (9b00 <main+0x1a0>)
    9a00:	4c47      	ldr	r4, [pc, #284]	; (9b20 <main+0x1c0>)
    9a02:	47a0      	blx	r4
    9a04:	e7c3      	b.n	998e <main+0x2e>
				grid_sys_ping(&GRID_PORT_N);
    9a06:	4847      	ldr	r0, [pc, #284]	; (9b24 <main+0x1c4>)
    9a08:	4b47      	ldr	r3, [pc, #284]	; (9b28 <main+0x1c8>)
    9a0a:	4798      	blx	r3
    9a0c:	e0c6      	b.n	9b9c <main+0x23c>
				grid_sys_ping(&GRID_PORT_E);
    9a0e:	4847      	ldr	r0, [pc, #284]	; (9b2c <main+0x1cc>)
    9a10:	4b45      	ldr	r3, [pc, #276]	; (9b28 <main+0x1c8>)
    9a12:	4798      	blx	r3
    9a14:	e0c9      	b.n	9baa <main+0x24a>
				grid_sys_ping(&GRID_PORT_S);
    9a16:	4846      	ldr	r0, [pc, #280]	; (9b30 <main+0x1d0>)
    9a18:	4b43      	ldr	r3, [pc, #268]	; (9b28 <main+0x1c8>)
    9a1a:	4798      	blx	r3
    9a1c:	e0cc      	b.n	9bb8 <main+0x258>
				grid_sys_ping(&GRID_PORT_W);
    9a1e:	4845      	ldr	r0, [pc, #276]	; (9b34 <main+0x1d4>)
    9a20:	4b41      	ldr	r3, [pc, #260]	; (9b28 <main+0x1c8>)
    9a22:	4798      	blx	r3
    9a24:	e0cf      	b.n	9bc6 <main+0x266>
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    9a26:	2300      	movs	r3, #0
    9a28:	9301      	str	r3, [sp, #4]
    9a2a:	9300      	str	r3, [sp, #0]
    9a2c:	2201      	movs	r2, #1
    9a2e:	4621      	mov	r1, r4
    9a30:	4648      	mov	r0, r9
    9a32:	4d41      	ldr	r5, [pc, #260]	; (9b38 <main+0x1d8>)
    9a34:	47a8      	blx	r5
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    9a36:	4f41      	ldr	r7, [pc, #260]	; (9b3c <main+0x1dc>)
    9a38:	9803      	ldr	r0, [sp, #12]
    9a3a:	47b8      	blx	r7
    9a3c:	4e40      	ldr	r6, [pc, #256]	; (9b40 <main+0x1e0>)
    9a3e:	2200      	movs	r2, #0
    9a40:	4b40      	ldr	r3, [pc, #256]	; (9b44 <main+0x1e4>)
    9a42:	47b0      	blx	r6
    9a44:	4d40      	ldr	r5, [pc, #256]	; (9b48 <main+0x1e8>)
    9a46:	47a8      	blx	r5
    9a48:	fa5f fb80 	uxtb.w	fp, r0
    9a4c:	9804      	ldr	r0, [sp, #16]
    9a4e:	47b8      	blx	r7
    9a50:	2200      	movs	r2, #0
    9a52:	4b3c      	ldr	r3, [pc, #240]	; (9b44 <main+0x1e4>)
    9a54:	47b0      	blx	r6
    9a56:	47a8      	blx	r5
    9a58:	b2c0      	uxtb	r0, r0
    9a5a:	9001      	str	r0, [sp, #4]
    9a5c:	4650      	mov	r0, sl
    9a5e:	47b8      	blx	r7
    9a60:	2200      	movs	r2, #0
    9a62:	4b38      	ldr	r3, [pc, #224]	; (9b44 <main+0x1e4>)
    9a64:	47b0      	blx	r6
    9a66:	47a8      	blx	r5
    9a68:	b2c0      	uxtb	r0, r0
    9a6a:	9000      	str	r0, [sp, #0]
    9a6c:	465b      	mov	r3, fp
    9a6e:	2201      	movs	r2, #1
    9a70:	4621      	mov	r1, r4
    9a72:	4648      	mov	r0, r9
    9a74:	4d35      	ldr	r5, [pc, #212]	; (9b4c <main+0x1ec>)
    9a76:	47a8      	blx	r5
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    9a78:	9a04      	ldr	r2, [sp, #16]
    9a7a:	9201      	str	r2, [sp, #4]
    9a7c:	f8cd a000 	str.w	sl, [sp]
    9a80:	9b03      	ldr	r3, [sp, #12]
    9a82:	2201      	movs	r2, #1
    9a84:	4621      	mov	r1, r4
    9a86:	4648      	mov	r0, r9
    9a88:	4c25      	ldr	r4, [pc, #148]	; (9b20 <main+0x1c0>)
    9a8a:	47a0      	blx	r4
    9a8c:	fa5f f488 	uxtb.w	r4, r8
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9a90:	4648      	mov	r0, r9
    9a92:	4b2f      	ldr	r3, [pc, #188]	; (9b50 <main+0x1f0>)
    9a94:	4798      	blx	r3
    9a96:	f108 0801 	add.w	r8, r8, #1
    9a9a:	4284      	cmp	r4, r0
    9a9c:	d3c3      	bcc.n	9a26 <main+0xc6>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    9a9e:	481c      	ldr	r0, [pc, #112]	; (9b10 <main+0x1b0>)
    9aa0:	4b2c      	ldr	r3, [pc, #176]	; (9b54 <main+0x1f4>)
    9aa2:	4798      	blx	r3
    9aa4:	4605      	mov	r5, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9aa6:	f899 3001 	ldrb.w	r3, [r9, #1]
    9aaa:	b16b      	cbz	r3, 9ac8 <main+0x168>
    9aac:	2400      	movs	r4, #0
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    9aae:	2701      	movs	r7, #1
    9ab0:	4e29      	ldr	r6, [pc, #164]	; (9b58 <main+0x1f8>)
    9ab2:	462b      	mov	r3, r5
    9ab4:	463a      	mov	r2, r7
    9ab6:	4621      	mov	r1, r4
    9ab8:	4648      	mov	r0, r9
    9aba:	47b0      	blx	r6
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9abc:	3401      	adds	r4, #1
    9abe:	b2e4      	uxtb	r4, r4
    9ac0:	f899 3001 	ldrb.w	r3, [r9, #1]
    9ac4:	42a3      	cmp	r3, r4
    9ac6:	d8f4      	bhi.n	9ab2 <main+0x152>
			
		}
		
		
	
		grid_led_tick(&grid_led_state);
    9ac8:	4648      	mov	r0, r9
    9aca:	4b24      	ldr	r3, [pc, #144]	; (9b5c <main+0x1fc>)
    9acc:	4798      	blx	r3
			
			
		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
    9ace:	4c24      	ldr	r4, [pc, #144]	; (9b60 <main+0x200>)
    9ad0:	4648      	mov	r0, r9
    9ad2:	47a0      	blx	r4
    9ad4:	2801      	cmp	r0, #1
    9ad6:	d1fb      	bne.n	9ad0 <main+0x170>
			
		}
		
		grid_led_render_all(&grid_led_state);
    9ad8:	4648      	mov	r0, r9
    9ada:	4b22      	ldr	r3, [pc, #136]	; (9b64 <main+0x204>)
    9adc:	4798      	blx	r3
				

					
		grid_led_hardware_start_transfer(&grid_led_state);
    9ade:	4648      	mov	r0, r9
    9ae0:	4b21      	ldr	r3, [pc, #132]	; (9b68 <main+0x208>)
    9ae2:	4798      	blx	r3
	
	
	

		// IDLETASK
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9ae4:	4c21      	ldr	r4, [pc, #132]	; (9b6c <main+0x20c>)
			
			delay_us(10);
    9ae6:	4d22      	ldr	r5, [pc, #136]	; (9b70 <main+0x210>)
    9ae8:	9e05      	ldr	r6, [sp, #20]
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9aea:	e045      	b.n	9b78 <main+0x218>
    9aec:	000002d1 	.word	0x000002d1
    9af0:	0000a7b1 	.word	0x0000a7b1
    9af4:	0000b159 	.word	0x0000b159
    9af8:	000022f5 	.word	0x000022f5
    9afc:	00003b59 	.word	0x00003b59
    9b00:	200035fc 	.word	0x200035fc
    9b04:	41008000 	.word	0x41008000
    9b08:	c0000004 	.word	0xc0000004
    9b0c:	00009911 	.word	0x00009911
    9b10:	20001cf0 	.word	0x20001cf0
    9b14:	00003c49 	.word	0x00003c49
    9b18:	0000d36c 	.word	0x0000d36c
    9b1c:	0000bbe5 	.word	0x0000bbe5
    9b20:	00001e9f 	.word	0x00001e9f
    9b24:	20001284 	.word	0x20001284
    9b28:	00003ef9 	.word	0x00003ef9
    9b2c:	200030e8 	.word	0x200030e8
    9b30:	200026c4 	.word	0x200026c4
    9b34:	200021a0 	.word	0x200021a0
    9b38:	00001e0d 	.word	0x00001e0d
    9b3c:	0000b425 	.word	0x0000b425
    9b40:	0000b4f1 	.word	0x0000b4f1
    9b44:	3fe00000 	.word	0x3fe00000
    9b48:	0000b915 	.word	0x0000b915
    9b4c:	00001e55 	.word	0x00001e55
    9b50:	00001dc5 	.word	0x00001dc5
    9b54:	00003a45 	.word	0x00003a45
    9b58:	00001ee9 	.word	0x00001ee9
    9b5c:	00001dc9 	.word	0x00001dc9
    9b60:	000022e9 	.word	0x000022e9
    9b64:	00002101 	.word	0x00002101
    9b68:	000022bd 	.word	0x000022bd
    9b6c:	00003a25 	.word	0x00003a25
    9b70:	0000462d 	.word	0x0000462d
			delay_us(10);
    9b74:	200a      	movs	r0, #10
    9b76:	47a8      	blx	r5
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9b78:	4631      	mov	r1, r6
    9b7a:	483a      	ldr	r0, [pc, #232]	; (9c64 <main+0x304>)
    9b7c:	47a0      	blx	r4
    9b7e:	280f      	cmp	r0, #15
    9b80:	d9f8      	bls.n	9b74 <main+0x214>
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    9b82:	4838      	ldr	r0, [pc, #224]	; (9c64 <main+0x304>)
    9b84:	4b38      	ldr	r3, [pc, #224]	; (9c68 <main+0x308>)
    9b86:	4798      	blx	r3
    9b88:	9005      	str	r0, [sp, #20]
		if (pingflag_active){
    9b8a:	4b38      	ldr	r3, [pc, #224]	; (9c6c <main+0x30c>)
    9b8c:	785b      	ldrb	r3, [r3, #1]
    9b8e:	b1eb      	cbz	r3, 9bcc <main+0x26c>
			if (pingflag%4 == 0){
    9b90:	4b36      	ldr	r3, [pc, #216]	; (9c6c <main+0x30c>)
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	f013 0f03 	tst.w	r3, #3
    9b98:	f43f af35 	beq.w	9a06 <main+0xa6>
			if (pingflag%4 == 1){
    9b9c:	4b33      	ldr	r3, [pc, #204]	; (9c6c <main+0x30c>)
    9b9e:	781b      	ldrb	r3, [r3, #0]
    9ba0:	f003 0303 	and.w	r3, r3, #3
    9ba4:	2b01      	cmp	r3, #1
    9ba6:	f43f af32 	beq.w	9a0e <main+0xae>
			if (pingflag%4 == 2){
    9baa:	4b30      	ldr	r3, [pc, #192]	; (9c6c <main+0x30c>)
    9bac:	781b      	ldrb	r3, [r3, #0]
    9bae:	f003 0303 	and.w	r3, r3, #3
    9bb2:	2b02      	cmp	r3, #2
    9bb4:	f43f af2f 	beq.w	9a16 <main+0xb6>
			if (pingflag%4 == 3){
    9bb8:	4b2c      	ldr	r3, [pc, #176]	; (9c6c <main+0x30c>)
    9bba:	781b      	ldrb	r3, [r3, #0]
    9bbc:	f003 0303 	and.w	r3, r3, #3
    9bc0:	2b03      	cmp	r3, #3
    9bc2:	f43f af2c 	beq.w	9a1e <main+0xbe>
			pingflag_active = 0;
    9bc6:	2200      	movs	r2, #0
    9bc8:	4b28      	ldr	r3, [pc, #160]	; (9c6c <main+0x30c>)
    9bca:	705a      	strb	r2, [r3, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    9bcc:	4828      	ldr	r0, [pc, #160]	; (9c70 <main+0x310>)
    9bce:	4c29      	ldr	r4, [pc, #164]	; (9c74 <main+0x314>)
    9bd0:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    9bd2:	4829      	ldr	r0, [pc, #164]	; (9c78 <main+0x318>)
    9bd4:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    9bd6:	4829      	ldr	r0, [pc, #164]	; (9c7c <main+0x31c>)
    9bd8:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    9bda:	4829      	ldr	r0, [pc, #164]	; (9c80 <main+0x320>)
    9bdc:	47a0      	blx	r4
		grid_port_process_ui(&GRID_PORT_U);
    9bde:	4d29      	ldr	r5, [pc, #164]	; (9c84 <main+0x324>)
    9be0:	4628      	mov	r0, r5
    9be2:	4b29      	ldr	r3, [pc, #164]	; (9c88 <main+0x328>)
    9be4:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    9be6:	4628      	mov	r0, r5
    9be8:	4c28      	ldr	r4, [pc, #160]	; (9c8c <main+0x32c>)
    9bea:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    9bec:	4820      	ldr	r0, [pc, #128]	; (9c70 <main+0x310>)
    9bee:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    9bf0:	4821      	ldr	r0, [pc, #132]	; (9c78 <main+0x318>)
    9bf2:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    9bf4:	4821      	ldr	r0, [pc, #132]	; (9c7c <main+0x31c>)
    9bf6:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);						
    9bf8:	4821      	ldr	r0, [pc, #132]	; (9c80 <main+0x320>)
    9bfa:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    9bfc:	481c      	ldr	r0, [pc, #112]	; (9c70 <main+0x310>)
    9bfe:	4c24      	ldr	r4, [pc, #144]	; (9c90 <main+0x330>)
    9c00:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    9c02:	481d      	ldr	r0, [pc, #116]	; (9c78 <main+0x318>)
    9c04:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    9c06:	481d      	ldr	r0, [pc, #116]	; (9c7c <main+0x31c>)
    9c08:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    9c0a:	481d      	ldr	r0, [pc, #116]	; (9c80 <main+0x320>)
    9c0c:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    9c0e:	4821      	ldr	r0, [pc, #132]	; (9c94 <main+0x334>)
    9c10:	4b21      	ldr	r3, [pc, #132]	; (9c98 <main+0x338>)
    9c12:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    9c14:	4628      	mov	r0, r5
    9c16:	4b21      	ldr	r3, [pc, #132]	; (9c9c <main+0x33c>)
    9c18:	4798      	blx	r3
		if (grid_sys_state.alert_state){
    9c1a:	4b12      	ldr	r3, [pc, #72]	; (9c64 <main+0x304>)
    9c1c:	889b      	ldrh	r3, [r3, #4]
    9c1e:	b29b      	uxth	r3, r3
    9c20:	2b00      	cmp	r3, #0
    9c22:	f43f af51 	beq.w	9ac8 <main+0x168>
			grid_sys_state.alert_state--;
    9c26:	4b0f      	ldr	r3, [pc, #60]	; (9c64 <main+0x304>)
    9c28:	889b      	ldrh	r3, [r3, #4]
    9c2a:	3b01      	subs	r3, #1
    9c2c:	b29b      	uxth	r3, r3
    9c2e:	4a0d      	ldr	r2, [pc, #52]	; (9c64 <main+0x304>)
    9c30:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    9c32:	4610      	mov	r0, r2
    9c34:	4b1a      	ldr	r3, [pc, #104]	; (9ca0 <main+0x340>)
    9c36:	4798      	blx	r3
    9c38:	2800      	cmp	r0, #0
    9c3a:	f43f af30 	beq.w	9a9e <main+0x13e>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    9c3e:	4809      	ldr	r0, [pc, #36]	; (9c64 <main+0x304>)
    9c40:	4b18      	ldr	r3, [pc, #96]	; (9ca4 <main+0x344>)
    9c42:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    9c44:	4807      	ldr	r0, [pc, #28]	; (9c64 <main+0x304>)
    9c46:	4b18      	ldr	r3, [pc, #96]	; (9ca8 <main+0x348>)
    9c48:	4798      	blx	r3
    9c4a:	9003      	str	r0, [sp, #12]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    9c4c:	4805      	ldr	r0, [pc, #20]	; (9c64 <main+0x304>)
    9c4e:	4b17      	ldr	r3, [pc, #92]	; (9cac <main+0x34c>)
    9c50:	4798      	blx	r3
    9c52:	4682      	mov	sl, r0
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    9c54:	4803      	ldr	r0, [pc, #12]	; (9c64 <main+0x304>)
    9c56:	4b16      	ldr	r3, [pc, #88]	; (9cb0 <main+0x350>)
    9c58:	4798      	blx	r3
    9c5a:	9004      	str	r0, [sp, #16]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9c5c:	f04f 0800 	mov.w	r8, #0
    9c60:	e714      	b.n	9a8c <main+0x12c>
    9c62:	bf00      	nop
    9c64:	20001cf0 	.word	0x20001cf0
    9c68:	00003a21 	.word	0x00003a21
    9c6c:	20000d68 	.word	0x20000d68
    9c70:	20001284 	.word	0x20001284
    9c74:	000098e1 	.word	0x000098e1
    9c78:	200030e8 	.word	0x200030e8
    9c7c:	200026c4 	.word	0x200026c4
    9c80:	200021a0 	.word	0x200021a0
    9c84:	200017d4 	.word	0x200017d4
    9c88:	000040a5 	.word	0x000040a5
    9c8c:	000016bd 	.word	0x000016bd
    9c90:	00001ce1 	.word	0x00001ce1
    9c94:	20002bd8 	.word	0x20002bd8
    9c98:	00001861 	.word	0x00001861
    9c9c:	00001c9d 	.word	0x00001c9d
    9ca0:	00003a3b 	.word	0x00003a3b
    9ca4:	00003a3f 	.word	0x00003a3f
    9ca8:	00003aab 	.word	0x00003aab
    9cac:	00003aaf 	.word	0x00003aaf
    9cb0:	00003ab3 	.word	0x00003ab3

00009cb4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    9cb4:	b940      	cbnz	r0, 9cc8 <_read+0x14>
{
    9cb6:	b508      	push	{r3, lr}
    9cb8:	460b      	mov	r3, r1
    9cba:	4611      	mov	r1, r2
    9cbc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    9cbe:	4b04      	ldr	r3, [pc, #16]	; (9cd0 <_read+0x1c>)
    9cc0:	4798      	blx	r3
    9cc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9cc6:	bd08      	pop	{r3, pc}
		return -1;
    9cc8:	f04f 30ff 	mov.w	r0, #4294967295
    9ccc:	4770      	bx	lr
    9cce:	bf00      	nop
    9cd0:	00009d25 	.word	0x00009d25

00009cd4 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    9cd4:	3801      	subs	r0, #1
    9cd6:	2802      	cmp	r0, #2
    9cd8:	d808      	bhi.n	9cec <_write+0x18>
{
    9cda:	b508      	push	{r3, lr}
    9cdc:	460b      	mov	r3, r1
    9cde:	4611      	mov	r1, r2
    9ce0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    9ce2:	4b04      	ldr	r3, [pc, #16]	; (9cf4 <_write+0x20>)
    9ce4:	4798      	blx	r3
    9ce6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    9cea:	bd08      	pop	{r3, pc}
		return -1;
    9cec:	f04f 30ff 	mov.w	r0, #4294967295
    9cf0:	4770      	bx	lr
    9cf2:	bf00      	nop
    9cf4:	00009d49 	.word	0x00009d49

00009cf8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    9cf8:	b570      	push	{r4, r5, r6, lr}
    9cfa:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    9cfc:	4d06      	ldr	r5, [pc, #24]	; (9d18 <stdio_io_init+0x20>)
    9cfe:	682b      	ldr	r3, [r5, #0]
    9d00:	2100      	movs	r1, #0
    9d02:	6898      	ldr	r0, [r3, #8]
    9d04:	4c05      	ldr	r4, [pc, #20]	; (9d1c <stdio_io_init+0x24>)
    9d06:	47a0      	blx	r4
	setbuf(stdin, NULL);
    9d08:	682b      	ldr	r3, [r5, #0]
    9d0a:	2100      	movs	r1, #0
    9d0c:	6858      	ldr	r0, [r3, #4]
    9d0e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    9d10:	4b03      	ldr	r3, [pc, #12]	; (9d20 <stdio_io_init+0x28>)
    9d12:	601e      	str	r6, [r3, #0]
    9d14:	bd70      	pop	{r4, r5, r6, pc}
    9d16:	bf00      	nop
    9d18:	20000558 	.word	0x20000558
    9d1c:	0000bc15 	.word	0x0000bc15
    9d20:	20000e28 	.word	0x20000e28

00009d24 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    9d24:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9d26:	4b06      	ldr	r3, [pc, #24]	; (9d40 <stdio_io_read+0x1c>)
    9d28:	681b      	ldr	r3, [r3, #0]
    9d2a:	b133      	cbz	r3, 9d3a <stdio_io_read+0x16>
    9d2c:	460a      	mov	r2, r1
    9d2e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    9d30:	b292      	uxth	r2, r2
    9d32:	4618      	mov	r0, r3
    9d34:	4b03      	ldr	r3, [pc, #12]	; (9d44 <stdio_io_read+0x20>)
    9d36:	4798      	blx	r3
    9d38:	bd08      	pop	{r3, pc}
		return 0;
    9d3a:	2000      	movs	r0, #0
}
    9d3c:	bd08      	pop	{r3, pc}
    9d3e:	bf00      	nop
    9d40:	20000e28 	.word	0x20000e28
    9d44:	00004809 	.word	0x00004809

00009d48 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    9d48:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    9d4a:	4b06      	ldr	r3, [pc, #24]	; (9d64 <stdio_io_write+0x1c>)
    9d4c:	681b      	ldr	r3, [r3, #0]
    9d4e:	b133      	cbz	r3, 9d5e <stdio_io_write+0x16>
    9d50:	460a      	mov	r2, r1
    9d52:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    9d54:	b292      	uxth	r2, r2
    9d56:	4618      	mov	r0, r3
    9d58:	4b03      	ldr	r3, [pc, #12]	; (9d68 <stdio_io_write+0x20>)
    9d5a:	4798      	blx	r3
    9d5c:	bd08      	pop	{r3, pc}
		return 0;
    9d5e:	2000      	movs	r0, #0
}
    9d60:	bd08      	pop	{r3, pc}
    9d62:	bf00      	nop
    9d64:	20000e28 	.word	0x20000e28
    9d68:	000047d9 	.word	0x000047d9

00009d6c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    9d6c:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    9d6e:	4c04      	ldr	r4, [pc, #16]	; (9d80 <stdio_redirect_init+0x14>)
    9d70:	4620      	mov	r0, r4
    9d72:	4b04      	ldr	r3, [pc, #16]	; (9d84 <stdio_redirect_init+0x18>)
    9d74:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    9d76:	4620      	mov	r0, r4
    9d78:	4b03      	ldr	r3, [pc, #12]	; (9d88 <stdio_redirect_init+0x1c>)
    9d7a:	4798      	blx	r3
    9d7c:	bd10      	pop	{r4, pc}
    9d7e:	bf00      	nop
    9d80:	20001024 	.word	0x20001024
    9d84:	0000538d 	.word	0x0000538d
    9d88:	00009cf9 	.word	0x00009cf9

00009d8c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d8e:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    9d90:	780b      	ldrb	r3, [r1, #0]
    9d92:	f3c3 1441 	ubfx	r4, r3, #5, #2
    9d96:	2c01      	cmp	r4, #1
    9d98:	d15e      	bne.n	9e58 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    9d9a:	888c      	ldrh	r4, [r1, #4]
    9d9c:	4d35      	ldr	r5, [pc, #212]	; (9e74 <cdcdf_acm_req+0xe8>)
    9d9e:	782d      	ldrb	r5, [r5, #0]
    9da0:	42a5      	cmp	r5, r4
    9da2:	d003      	beq.n	9dac <cdcdf_acm_req+0x20>
    9da4:	4d33      	ldr	r5, [pc, #204]	; (9e74 <cdcdf_acm_req+0xe8>)
    9da6:	786d      	ldrb	r5, [r5, #1]
    9da8:	42a5      	cmp	r5, r4
    9daa:	d158      	bne.n	9e5e <cdcdf_acm_req+0xd2>
    9dac:	4616      	mov	r6, r2
    9dae:	460c      	mov	r4, r1
    9db0:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    9db2:	f013 0f80 	tst.w	r3, #128	; 0x80
    9db6:	d10c      	bne.n	9dd2 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    9db8:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    9dba:	4b2f      	ldr	r3, [pc, #188]	; (9e78 <cdcdf_acm_req+0xec>)
    9dbc:	4798      	blx	r3
    9dbe:	4601      	mov	r1, r0
	switch (req->bRequest) {
    9dc0:	7863      	ldrb	r3, [r4, #1]
    9dc2:	2b20      	cmp	r3, #32
    9dc4:	d013      	beq.n	9dee <cdcdf_acm_req+0x62>
    9dc6:	2b22      	cmp	r3, #34	; 0x22
    9dc8:	d032      	beq.n	9e30 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    9dca:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    9dce:	b003      	add	sp, #12
    9dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    9dd2:	2a01      	cmp	r2, #1
    9dd4:	d046      	beq.n	9e64 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    9dd6:	784b      	ldrb	r3, [r1, #1]
    9dd8:	2b21      	cmp	r3, #33	; 0x21
    9dda:	d145      	bne.n	9e68 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9ddc:	88cb      	ldrh	r3, [r1, #6]
    9dde:	2b07      	cmp	r3, #7
    9de0:	d145      	bne.n	9e6e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    9de2:	2300      	movs	r3, #0
    9de4:	2207      	movs	r2, #7
    9de6:	4925      	ldr	r1, [pc, #148]	; (9e7c <cdcdf_acm_req+0xf0>)
    9de8:	4c25      	ldr	r4, [pc, #148]	; (9e80 <cdcdf_acm_req+0xf4>)
    9dea:	47a0      	blx	r4
    9dec:	e7ef      	b.n	9dce <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    9dee:	2f07      	cmp	r7, #7
    9df0:	d12b      	bne.n	9e4a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    9df2:	b1be      	cbz	r6, 9e24 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    9df4:	6800      	ldr	r0, [r0, #0]
    9df6:	9000      	str	r0, [sp, #0]
    9df8:	888a      	ldrh	r2, [r1, #4]
    9dfa:	798b      	ldrb	r3, [r1, #6]
    9dfc:	f8ad 2004 	strh.w	r2, [sp, #4]
    9e00:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    9e04:	4b1b      	ldr	r3, [pc, #108]	; (9e74 <cdcdf_acm_req+0xe8>)
    9e06:	691b      	ldr	r3, [r3, #16]
    9e08:	b113      	cbz	r3, 9e10 <cdcdf_acm_req+0x84>
    9e0a:	4668      	mov	r0, sp
    9e0c:	4798      	blx	r3
    9e0e:	b1f8      	cbz	r0, 9e50 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    9e10:	4b18      	ldr	r3, [pc, #96]	; (9e74 <cdcdf_acm_req+0xe8>)
    9e12:	aa02      	add	r2, sp, #8
    9e14:	e912 0003 	ldmdb	r2, {r0, r1}
    9e18:	6098      	str	r0, [r3, #8]
    9e1a:	8199      	strh	r1, [r3, #12]
    9e1c:	0c09      	lsrs	r1, r1, #16
    9e1e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    9e20:	2000      	movs	r0, #0
    9e22:	e7d4      	b.n	9dce <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    9e24:	2300      	movs	r3, #0
    9e26:	2207      	movs	r2, #7
    9e28:	4628      	mov	r0, r5
    9e2a:	4c15      	ldr	r4, [pc, #84]	; (9e80 <cdcdf_acm_req+0xf4>)
    9e2c:	47a0      	blx	r4
    9e2e:	e7ce      	b.n	9dce <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    9e30:	2300      	movs	r3, #0
    9e32:	461a      	mov	r2, r3
    9e34:	4619      	mov	r1, r3
    9e36:	4618      	mov	r0, r3
    9e38:	4d11      	ldr	r5, [pc, #68]	; (9e80 <cdcdf_acm_req+0xf4>)
    9e3a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    9e3c:	4b0d      	ldr	r3, [pc, #52]	; (9e74 <cdcdf_acm_req+0xe8>)
    9e3e:	695b      	ldr	r3, [r3, #20]
    9e40:	b143      	cbz	r3, 9e54 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    9e42:	8860      	ldrh	r0, [r4, #2]
    9e44:	4798      	blx	r3
		return ERR_NONE;
    9e46:	2000      	movs	r0, #0
    9e48:	e7c1      	b.n	9dce <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9e4a:	f04f 30ff 	mov.w	r0, #4294967295
    9e4e:	e7be      	b.n	9dce <cdcdf_acm_req+0x42>
			return ERR_NONE;
    9e50:	2000      	movs	r0, #0
    9e52:	e7bc      	b.n	9dce <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9e54:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    9e56:	e7ba      	b.n	9dce <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9e58:	f06f 0009 	mvn.w	r0, #9
    9e5c:	e7b7      	b.n	9dce <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    9e5e:	f06f 0009 	mvn.w	r0, #9
    9e62:	e7b4      	b.n	9dce <cdcdf_acm_req+0x42>
		return ERR_NONE;
    9e64:	2000      	movs	r0, #0
    9e66:	e7b2      	b.n	9dce <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    9e68:	f06f 000c 	mvn.w	r0, #12
    9e6c:	e7af      	b.n	9dce <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    9e6e:	f04f 30ff 	mov.w	r0, #4294967295
    9e72:	e7ac      	b.n	9dce <cdcdf_acm_req+0x42>
    9e74:	20000e2c 	.word	0x20000e2c
    9e78:	0000aed5 	.word	0x0000aed5
    9e7c:	20000e34 	.word	0x20000e34
    9e80:	0000a9b1 	.word	0x0000a9b1

00009e84 <cdcdf_acm_ctrl>:
{
    9e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e88:	b083      	sub	sp, #12
    9e8a:	4616      	mov	r6, r2
	switch (ctrl) {
    9e8c:	2901      	cmp	r1, #1
    9e8e:	d066      	beq.n	9f5e <cdcdf_acm_ctrl+0xda>
    9e90:	b141      	cbz	r1, 9ea4 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    9e92:	2902      	cmp	r1, #2
    9e94:	bf0c      	ite	eq
    9e96:	f06f 001a 	mvneq.w	r0, #26
    9e9a:	f06f 000c 	mvnne.w	r0, #12
}
    9e9e:	b003      	add	sp, #12
    9ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9ea4:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    9ea8:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    9eaa:	2800      	cmp	r0, #0
    9eac:	f000 8085 	beq.w	9fba <cdcdf_acm_ctrl+0x136>
    9eb0:	f10a 3bff 	add.w	fp, sl, #4294967295
    9eb4:	f10a 0301 	add.w	r3, sl, #1
    9eb8:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9eba:	4f46      	ldr	r7, [pc, #280]	; (9fd4 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    9ebc:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9fe4 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9ec0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 9fe8 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    9ec4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    9ec6:	7943      	ldrb	r3, [r0, #5]
    9ec8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9ecc:	2b02      	cmp	r3, #2
    9ece:	d002      	beq.n	9ed6 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    9ed0:	f06f 0009 	mvn.w	r0, #9
    9ed4:	e7e3      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
    9ed6:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    9eda:	f89b 3000 	ldrb.w	r3, [fp]
    9ede:	429a      	cmp	r2, r3
    9ee0:	d06e      	beq.n	9fc0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    9ee2:	2bff      	cmp	r3, #255	; 0xff
    9ee4:	d16f      	bne.n	9fc6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    9ee6:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    9eea:	2205      	movs	r2, #5
    9eec:	6871      	ldr	r1, [r6, #4]
    9eee:	4b3a      	ldr	r3, [pc, #232]	; (9fd8 <cdcdf_acm_ctrl+0x154>)
    9ef0:	4798      	blx	r3
		while (NULL != ep) {
    9ef2:	4604      	mov	r4, r0
    9ef4:	b1f8      	cbz	r0, 9f36 <cdcdf_acm_ctrl+0xb2>
    9ef6:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    9efa:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    9efc:	7963      	ldrb	r3, [r4, #5]
    9efe:	7922      	ldrb	r2, [r4, #4]
    9f00:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    9f04:	b292      	uxth	r2, r2
    9f06:	78e1      	ldrb	r1, [r4, #3]
    9f08:	4628      	mov	r0, r5
    9f0a:	47b8      	blx	r7
    9f0c:	2800      	cmp	r0, #0
    9f0e:	d15d      	bne.n	9fcc <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    9f10:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    9f14:	bf14      	ite	ne
    9f16:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    9f1a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    9f1e:	4628      	mov	r0, r5
    9f20:	47c8      	blx	r9
			desc->sod = ep;
    9f22:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    9f24:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    9f26:	6871      	ldr	r1, [r6, #4]
    9f28:	4420      	add	r0, r4
    9f2a:	47c0      	blx	r8
		while (NULL != ep) {
    9f2c:	4604      	mov	r4, r0
    9f2e:	2800      	cmp	r0, #0
    9f30:	d1e3      	bne.n	9efa <cdcdf_acm_ctrl+0x76>
    9f32:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    9f36:	6833      	ldr	r3, [r6, #0]
    9f38:	7818      	ldrb	r0, [r3, #0]
    9f3a:	2204      	movs	r2, #4
    9f3c:	6871      	ldr	r1, [r6, #4]
    9f3e:	4418      	add	r0, r3
    9f40:	4b25      	ldr	r3, [pc, #148]	; (9fd8 <cdcdf_acm_ctrl+0x154>)
    9f42:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    9f44:	9b00      	ldr	r3, [sp, #0]
    9f46:	459b      	cmp	fp, r3
    9f48:	d004      	beq.n	9f54 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    9f4a:	2800      	cmp	r0, #0
    9f4c:	d1ba      	bne.n	9ec4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    9f4e:	f06f 0009 	mvn.w	r0, #9
    9f52:	e7a4      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    9f54:	2201      	movs	r2, #1
    9f56:	4b21      	ldr	r3, [pc, #132]	; (9fdc <cdcdf_acm_ctrl+0x158>)
    9f58:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    9f5a:	2000      	movs	r0, #0
    9f5c:	e79f      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    9f5e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    9f60:	b142      	cbz	r2, 9f74 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    9f62:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    9f64:	795b      	ldrb	r3, [r3, #5]
    9f66:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9f6a:	2b02      	cmp	r3, #2
    9f6c:	d002      	beq.n	9f74 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    9f6e:	f06f 0009 	mvn.w	r0, #9
    9f72:	e794      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    9f74:	7823      	ldrb	r3, [r4, #0]
    9f76:	2bff      	cmp	r3, #255	; 0xff
    9f78:	d008      	beq.n	9f8c <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    9f7a:	23ff      	movs	r3, #255	; 0xff
    9f7c:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    9f7e:	78a0      	ldrb	r0, [r4, #2]
    9f80:	4298      	cmp	r0, r3
    9f82:	d003      	beq.n	9f8c <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9f84:	4b16      	ldr	r3, [pc, #88]	; (9fe0 <cdcdf_acm_ctrl+0x15c>)
    9f86:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9f88:	23ff      	movs	r3, #255	; 0xff
    9f8a:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    9f8c:	7863      	ldrb	r3, [r4, #1]
    9f8e:	2bff      	cmp	r3, #255	; 0xff
    9f90:	d008      	beq.n	9fa4 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    9f92:	23ff      	movs	r3, #255	; 0xff
    9f94:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    9f96:	78e0      	ldrb	r0, [r4, #3]
    9f98:	4298      	cmp	r0, r3
    9f9a:	d003      	beq.n	9fa4 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    9f9c:	4b10      	ldr	r3, [pc, #64]	; (9fe0 <cdcdf_acm_ctrl+0x15c>)
    9f9e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    9fa0:	23ff      	movs	r3, #255	; 0xff
    9fa2:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    9fa4:	7920      	ldrb	r0, [r4, #4]
    9fa6:	28ff      	cmp	r0, #255	; 0xff
    9fa8:	d003      	beq.n	9fb2 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    9faa:	4b0d      	ldr	r3, [pc, #52]	; (9fe0 <cdcdf_acm_ctrl+0x15c>)
    9fac:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    9fae:	23ff      	movs	r3, #255	; 0xff
    9fb0:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    9fb2:	2000      	movs	r0, #0
    9fb4:	4b09      	ldr	r3, [pc, #36]	; (9fdc <cdcdf_acm_ctrl+0x158>)
    9fb6:	7158      	strb	r0, [r3, #5]
    9fb8:	e771      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    9fba:	f06f 0009 	mvn.w	r0, #9
    9fbe:	e76e      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    9fc0:	f06f 0011 	mvn.w	r0, #17
    9fc4:	e76b      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    9fc6:	f06f 001b 	mvn.w	r0, #27
    9fca:	e768      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    9fcc:	f06f 0013 	mvn.w	r0, #19
    9fd0:	e765      	b.n	9e9e <cdcdf_acm_ctrl+0x1a>
    9fd2:	bf00      	nop
    9fd4:	000056a5 	.word	0x000056a5
    9fd8:	0000aef5 	.word	0x0000aef5
    9fdc:	20000e2c 	.word	0x20000e2c
    9fe0:	0000570d 	.word	0x0000570d
    9fe4:	00005739 	.word	0x00005739
    9fe8:	0000af2f 	.word	0x0000af2f

00009fec <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    9fec:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    9fee:	4b0a      	ldr	r3, [pc, #40]	; (a018 <cdcdf_acm_init+0x2c>)
    9ff0:	4798      	blx	r3
    9ff2:	2801      	cmp	r0, #1
    9ff4:	d80c      	bhi.n	a010 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    9ff6:	4809      	ldr	r0, [pc, #36]	; (a01c <cdcdf_acm_init+0x30>)
    9ff8:	4b09      	ldr	r3, [pc, #36]	; (a020 <cdcdf_acm_init+0x34>)
    9ffa:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    9ffc:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    9ffe:	3018      	adds	r0, #24
    a000:	4b08      	ldr	r3, [pc, #32]	; (a024 <cdcdf_acm_init+0x38>)
    a002:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a004:	4908      	ldr	r1, [pc, #32]	; (a028 <cdcdf_acm_init+0x3c>)
    a006:	2001      	movs	r0, #1
    a008:	4b08      	ldr	r3, [pc, #32]	; (a02c <cdcdf_acm_init+0x40>)
    a00a:	4798      	blx	r3
	return ERR_NONE;
    a00c:	2000      	movs	r0, #0
    a00e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a010:	f06f 0010 	mvn.w	r0, #16
}
    a014:	bd08      	pop	{r3, pc}
    a016:	bf00      	nop
    a018:	0000aee1 	.word	0x0000aee1
    a01c:	20000e2c 	.word	0x20000e2c
    a020:	00009e85 	.word	0x00009e85
    a024:	0000ae81 	.word	0x0000ae81
    a028:	20000398 	.word	0x20000398
    a02c:	0000aded 	.word	0x0000aded

0000a030 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    a030:	4b07      	ldr	r3, [pc, #28]	; (a050 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a032:	795b      	ldrb	r3, [r3, #5]
    a034:	b143      	cbz	r3, a048 <cdcdf_acm_write+0x18>
{
    a036:	b510      	push	{r4, lr}
    a038:	460a      	mov	r2, r1
    a03a:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a03c:	2301      	movs	r3, #1
    a03e:	4804      	ldr	r0, [pc, #16]	; (a050 <cdcdf_acm_write+0x20>)
    a040:	78c0      	ldrb	r0, [r0, #3]
    a042:	4c04      	ldr	r4, [pc, #16]	; (a054 <cdcdf_acm_write+0x24>)
    a044:	47a0      	blx	r4
    a046:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    a048:	f06f 0010 	mvn.w	r0, #16
    a04c:	4770      	bx	lr
    a04e:	bf00      	nop
    a050:	20000e2c 	.word	0x20000e2c
    a054:	0000a9b1 	.word	0x0000a9b1

0000a058 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a058:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a05a:	780b      	ldrb	r3, [r1, #0]
    a05c:	2b81      	cmp	r3, #129	; 0x81
    a05e:	d010      	beq.n	a082 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a060:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a064:	2b01      	cmp	r3, #1
    a066:	d13f      	bne.n	a0e8 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    a068:	888a      	ldrh	r2, [r1, #4]
    a06a:	4b22      	ldr	r3, [pc, #136]	; (a0f4 <hid_keyboard_req+0x9c>)
    a06c:	7b1b      	ldrb	r3, [r3, #12]
    a06e:	429a      	cmp	r2, r3
    a070:	d13d      	bne.n	a0ee <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    a072:	784b      	ldrb	r3, [r1, #1]
    a074:	2b03      	cmp	r3, #3
    a076:	d028      	beq.n	a0ca <hid_keyboard_req+0x72>
    a078:	2b0b      	cmp	r3, #11
    a07a:	d02c      	beq.n	a0d6 <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a07c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a080:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a082:	784b      	ldrb	r3, [r1, #1]
    a084:	2b06      	cmp	r3, #6
    a086:	d002      	beq.n	a08e <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    a088:	f06f 0009 	mvn.w	r0, #9
    a08c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a08e:	888a      	ldrh	r2, [r1, #4]
    a090:	4b18      	ldr	r3, [pc, #96]	; (a0f4 <hid_keyboard_req+0x9c>)
    a092:	7b1b      	ldrb	r3, [r3, #12]
    a094:	429a      	cmp	r2, r3
    a096:	d002      	beq.n	a09e <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    a098:	f06f 0009 	mvn.w	r0, #9
    a09c:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a09e:	884b      	ldrh	r3, [r1, #2]
    a0a0:	0a1b      	lsrs	r3, r3, #8
    a0a2:	2b21      	cmp	r3, #33	; 0x21
    a0a4:	d004      	beq.n	a0b0 <hid_keyboard_req+0x58>
    a0a6:	2b22      	cmp	r3, #34	; 0x22
    a0a8:	d009      	beq.n	a0be <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    a0aa:	f06f 000c 	mvn.w	r0, #12
    a0ae:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    a0b0:	4b10      	ldr	r3, [pc, #64]	; (a0f4 <hid_keyboard_req+0x9c>)
    a0b2:	6819      	ldr	r1, [r3, #0]
    a0b4:	2300      	movs	r3, #0
    a0b6:	780a      	ldrb	r2, [r1, #0]
    a0b8:	4c0f      	ldr	r4, [pc, #60]	; (a0f8 <hid_keyboard_req+0xa0>)
    a0ba:	47a0      	blx	r4
    a0bc:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    a0be:	2300      	movs	r3, #0
    a0c0:	223b      	movs	r2, #59	; 0x3b
    a0c2:	490e      	ldr	r1, [pc, #56]	; (a0fc <hid_keyboard_req+0xa4>)
    a0c4:	4c0c      	ldr	r4, [pc, #48]	; (a0f8 <hid_keyboard_req+0xa0>)
    a0c6:	47a0      	blx	r4
    a0c8:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    a0ca:	2300      	movs	r3, #0
    a0cc:	2201      	movs	r2, #1
    a0ce:	490c      	ldr	r1, [pc, #48]	; (a100 <hid_keyboard_req+0xa8>)
    a0d0:	4c09      	ldr	r4, [pc, #36]	; (a0f8 <hid_keyboard_req+0xa0>)
    a0d2:	47a0      	blx	r4
    a0d4:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    a0d6:	884a      	ldrh	r2, [r1, #2]
    a0d8:	4b06      	ldr	r3, [pc, #24]	; (a0f4 <hid_keyboard_req+0x9c>)
    a0da:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    a0dc:	2300      	movs	r3, #0
    a0de:	461a      	mov	r2, r3
    a0e0:	4619      	mov	r1, r3
    a0e2:	4c05      	ldr	r4, [pc, #20]	; (a0f8 <hid_keyboard_req+0xa0>)
    a0e4:	47a0      	blx	r4
    a0e6:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a0e8:	f06f 0009 	mvn.w	r0, #9
    a0ec:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a0ee:	f06f 0009 	mvn.w	r0, #9
    a0f2:	bd10      	pop	{r4, pc}
    a0f4:	20000e50 	.word	0x20000e50
    a0f8:	0000a9b1 	.word	0x0000a9b1
    a0fc:	0000d380 	.word	0x0000d380
    a100:	20000e5f 	.word	0x20000e5f

0000a104 <hid_keyboard_ctrl>:
{
    a104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a108:	4614      	mov	r4, r2
	switch (ctrl) {
    a10a:	2901      	cmp	r1, #1
    a10c:	d050      	beq.n	a1b0 <hid_keyboard_ctrl+0xac>
    a10e:	b141      	cbz	r1, a122 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    a110:	2902      	cmp	r1, #2
    a112:	bf0c      	ite	eq
    a114:	f06f 051a 	mvneq.w	r5, #26
    a118:	f06f 050c 	mvnne.w	r5, #12
}
    a11c:	4628      	mov	r0, r5
    a11e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a122:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    a126:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a128:	2b00      	cmp	r3, #0
    a12a:	d05e      	beq.n	a1ea <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a12c:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a12e:	795b      	ldrb	r3, [r3, #5]
    a130:	2b03      	cmp	r3, #3
    a132:	d15d      	bne.n	a1f0 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a134:	f898 300c 	ldrb.w	r3, [r8, #12]
    a138:	429a      	cmp	r2, r3
    a13a:	d05c      	beq.n	a1f6 <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a13c:	2bff      	cmp	r3, #255	; 0xff
    a13e:	d15d      	bne.n	a1fc <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a140:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a144:	6823      	ldr	r3, [r4, #0]
    a146:	7818      	ldrb	r0, [r3, #0]
    a148:	2221      	movs	r2, #33	; 0x21
    a14a:	6861      	ldr	r1, [r4, #4]
    a14c:	4418      	add	r0, r3
    a14e:	4b31      	ldr	r3, [pc, #196]	; (a214 <hid_keyboard_ctrl+0x110>)
    a150:	4798      	blx	r3
    a152:	4b31      	ldr	r3, [pc, #196]	; (a218 <hid_keyboard_ctrl+0x114>)
    a154:	6018      	str	r0, [r3, #0]
    a156:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a158:	f8df 90c4 	ldr.w	r9, [pc, #196]	; a220 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a15c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; a224 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    a160:	f8df b0c4 	ldr.w	fp, [pc, #196]	; a228 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a164:	6823      	ldr	r3, [r4, #0]
    a166:	7818      	ldrb	r0, [r3, #0]
    a168:	6861      	ldr	r1, [r4, #4]
    a16a:	4418      	add	r0, r3
    a16c:	47c8      	blx	r9
		desc->sod = ep;
    a16e:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    a170:	2800      	cmp	r0, #0
    a172:	d046      	beq.n	a202 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    a174:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a176:	7943      	ldrb	r3, [r0, #5]
    a178:	7902      	ldrb	r2, [r0, #4]
    a17a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a17e:	b292      	uxth	r2, r2
    a180:	78c1      	ldrb	r1, [r0, #3]
    a182:	4638      	mov	r0, r7
    a184:	47d0      	blx	sl
    a186:	4605      	mov	r5, r0
    a188:	2800      	cmp	r0, #0
    a18a:	d13d      	bne.n	a208 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a18c:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    a190:	bf14      	ite	ne
    a192:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a196:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    a19a:	4638      	mov	r0, r7
    a19c:	47d8      	blx	fp
    a19e:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    a1a0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a1a4:	d1de      	bne.n	a164 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    a1a6:	4b1c      	ldr	r3, [pc, #112]	; (a218 <hid_keyboard_ctrl+0x114>)
    a1a8:	2201      	movs	r2, #1
    a1aa:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    a1ac:	741a      	strb	r2, [r3, #16]
    a1ae:	e7b5      	b.n	a11c <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a1b0:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a1b2:	b11a      	cbz	r2, a1bc <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a1b4:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a1b6:	795b      	ldrb	r3, [r3, #5]
    a1b8:	2b03      	cmp	r3, #3
    a1ba:	d128      	bne.n	a20e <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    a1bc:	7b2b      	ldrb	r3, [r5, #12]
    a1be:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a1c0:	bf1c      	itt	ne
    a1c2:	23ff      	movne	r3, #255	; 0xff
    a1c4:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    a1c6:	7b68      	ldrb	r0, [r5, #13]
    a1c8:	28ff      	cmp	r0, #255	; 0xff
    a1ca:	d003      	beq.n	a1d4 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    a1cc:	4b13      	ldr	r3, [pc, #76]	; (a21c <hid_keyboard_ctrl+0x118>)
    a1ce:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a1d0:	23ff      	movs	r3, #255	; 0xff
    a1d2:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    a1d4:	7ba8      	ldrb	r0, [r5, #14]
    a1d6:	28ff      	cmp	r0, #255	; 0xff
    a1d8:	d003      	beq.n	a1e2 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    a1da:	4b10      	ldr	r3, [pc, #64]	; (a21c <hid_keyboard_ctrl+0x118>)
    a1dc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a1de:	23ff      	movs	r3, #255	; 0xff
    a1e0:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    a1e2:	2500      	movs	r5, #0
    a1e4:	4b0c      	ldr	r3, [pc, #48]	; (a218 <hid_keyboard_ctrl+0x114>)
    a1e6:	741d      	strb	r5, [r3, #16]
    a1e8:	e798      	b.n	a11c <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a1ea:	f06f 0509 	mvn.w	r5, #9
    a1ee:	e795      	b.n	a11c <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a1f0:	f06f 0509 	mvn.w	r5, #9
    a1f4:	e792      	b.n	a11c <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    a1f6:	f06f 0511 	mvn.w	r5, #17
    a1fa:	e78f      	b.n	a11c <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    a1fc:	f06f 051b 	mvn.w	r5, #27
    a200:	e78c      	b.n	a11c <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a202:	f06f 0509 	mvn.w	r5, #9
    a206:	e789      	b.n	a11c <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    a208:	f06f 0513 	mvn.w	r5, #19
    a20c:	e786      	b.n	a11c <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a20e:	f06f 0509 	mvn.w	r5, #9
    a212:	e783      	b.n	a11c <hid_keyboard_ctrl+0x18>
    a214:	0000aef5 	.word	0x0000aef5
    a218:	20000e50 	.word	0x20000e50
    a21c:	0000570d 	.word	0x0000570d
    a220:	0000af2f 	.word	0x0000af2f
    a224:	000056a5 	.word	0x000056a5
    a228:	00005739 	.word	0x00005739

0000a22c <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    a22c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a22e:	4b0a      	ldr	r3, [pc, #40]	; (a258 <hiddf_keyboard_init+0x2c>)
    a230:	4798      	blx	r3
    a232:	2801      	cmp	r0, #1
    a234:	d80c      	bhi.n	a250 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    a236:	4809      	ldr	r0, [pc, #36]	; (a25c <hiddf_keyboard_init+0x30>)
    a238:	4b09      	ldr	r3, [pc, #36]	; (a260 <hiddf_keyboard_init+0x34>)
    a23a:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    a23c:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    a23e:	3014      	adds	r0, #20
    a240:	4b08      	ldr	r3, [pc, #32]	; (a264 <hiddf_keyboard_init+0x38>)
    a242:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    a244:	4908      	ldr	r1, [pc, #32]	; (a268 <hiddf_keyboard_init+0x3c>)
    a246:	2001      	movs	r0, #1
    a248:	4b08      	ldr	r3, [pc, #32]	; (a26c <hiddf_keyboard_init+0x40>)
    a24a:	4798      	blx	r3
	return ERR_NONE;
    a24c:	2000      	movs	r0, #0
    a24e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a250:	f06f 0010 	mvn.w	r0, #16
}
    a254:	bd08      	pop	{r3, pc}
    a256:	bf00      	nop
    a258:	0000aee1 	.word	0x0000aee1
    a25c:	20000e50 	.word	0x20000e50
    a260:	0000a105 	.word	0x0000a105
    a264:	0000ae81 	.word	0x0000ae81
    a268:	200003a0 	.word	0x200003a0
    a26c:	0000aded 	.word	0x0000aded

0000a270 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    a270:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    a272:	4b26      	ldr	r3, [pc, #152]	; (a30c <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    a274:	7c1b      	ldrb	r3, [r3, #16]
    a276:	2b00      	cmp	r3, #0
    a278:	d045      	beq.n	a306 <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    a27a:	4a24      	ldr	r2, [pc, #144]	; (a30c <hiddf_keyboard_keys_state_change+0x9c>)
    a27c:	2300      	movs	r3, #0
    a27e:	6053      	str	r3, [r2, #4]
    a280:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    a282:	b329      	cbz	r1, a2d0 <hiddf_keyboard_keys_state_change+0x60>
    a284:	4603      	mov	r3, r0
    a286:	1e4d      	subs	r5, r1, #1
    a288:	b2ed      	uxtb	r5, r5
    a28a:	3501      	adds	r5, #1
    a28c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a290:	4405      	add	r5, r0
    a292:	2200      	movs	r2, #0
    a294:	e002      	b.n	a29c <hiddf_keyboard_keys_state_change+0x2c>
    a296:	3303      	adds	r3, #3
    a298:	42ab      	cmp	r3, r5
    a29a:	d005      	beq.n	a2a8 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    a29c:	785c      	ldrb	r4, [r3, #1]
    a29e:	2c00      	cmp	r4, #0
    a2a0:	d0f9      	beq.n	a296 <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    a2a2:	3201      	adds	r2, #1
    a2a4:	b2d2      	uxtb	r2, r2
    a2a6:	e7f6      	b.n	a296 <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    a2a8:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    a2aa:	b2d2      	uxtb	r2, r2
    a2ac:	2a06      	cmp	r2, #6
    a2ae:	d809      	bhi.n	a2c4 <hiddf_keyboard_keys_state_change+0x54>
    a2b0:	4603      	mov	r3, r0
    a2b2:	1e4a      	subs	r2, r1, #1
    a2b4:	b2d2      	uxtb	r2, r2
    a2b6:	3201      	adds	r2, #1
    a2b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a2bc:	4410      	add	r0, r2
    a2be:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a2c0:	4d12      	ldr	r5, [pc, #72]	; (a30c <hiddf_keyboard_keys_state_change+0x9c>)
    a2c2:	e015      	b.n	a2f0 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    a2c4:	4b11      	ldr	r3, [pc, #68]	; (a30c <hiddf_keyboard_keys_state_change+0x9c>)
    a2c6:	f04f 32ff 	mov.w	r2, #4294967295
    a2ca:	f8c3 2006 	str.w	r2, [r3, #6]
    a2ce:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    a2d0:	480e      	ldr	r0, [pc, #56]	; (a30c <hiddf_keyboard_keys_state_change+0x9c>)
    a2d2:	2300      	movs	r3, #0
    a2d4:	2208      	movs	r2, #8
    a2d6:	1d01      	adds	r1, r0, #4
    a2d8:	7b40      	ldrb	r0, [r0, #13]
    a2da:	4c0d      	ldr	r4, [pc, #52]	; (a310 <hiddf_keyboard_keys_state_change+0xa0>)
    a2dc:	47a0      	blx	r4
    a2de:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a2e0:	1c62      	adds	r2, r4, #1
    a2e2:	7819      	ldrb	r1, [r3, #0]
    a2e4:	442c      	add	r4, r5
    a2e6:	7121      	strb	r1, [r4, #4]
    a2e8:	b2d4      	uxtb	r4, r2
    a2ea:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    a2ec:	4283      	cmp	r3, r0
    a2ee:	d0ef      	beq.n	a2d0 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    a2f0:	789a      	ldrb	r2, [r3, #2]
    a2f2:	2a01      	cmp	r2, #1
    a2f4:	d1f9      	bne.n	a2ea <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    a2f6:	785a      	ldrb	r2, [r3, #1]
    a2f8:	2a00      	cmp	r2, #0
    a2fa:	d0f1      	beq.n	a2e0 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    a2fc:	792a      	ldrb	r2, [r5, #4]
    a2fe:	7819      	ldrb	r1, [r3, #0]
    a300:	430a      	orrs	r2, r1
    a302:	712a      	strb	r2, [r5, #4]
    a304:	e7f1      	b.n	a2ea <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    a306:	f06f 0010 	mvn.w	r0, #16
}
    a30a:	bd38      	pop	{r3, r4, r5, pc}
    a30c:	20000e50 	.word	0x20000e50
    a310:	0000a9b1 	.word	0x0000a9b1

0000a314 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a314:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a316:	780b      	ldrb	r3, [r1, #0]
    a318:	2b81      	cmp	r3, #129	; 0x81
    a31a:	d010      	beq.n	a33e <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a31c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a320:	2b01      	cmp	r3, #1
    a322:	d13f      	bne.n	a3a4 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    a324:	888a      	ldrh	r2, [r1, #4]
    a326:	4b22      	ldr	r3, [pc, #136]	; (a3b0 <hid_mouse_req+0x9c>)
    a328:	7a1b      	ldrb	r3, [r3, #8]
    a32a:	429a      	cmp	r2, r3
    a32c:	d13d      	bne.n	a3aa <hid_mouse_req+0x96>
			switch (req->bRequest) {
    a32e:	784b      	ldrb	r3, [r1, #1]
    a330:	2b03      	cmp	r3, #3
    a332:	d028      	beq.n	a386 <hid_mouse_req+0x72>
    a334:	2b0b      	cmp	r3, #11
    a336:	d02c      	beq.n	a392 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a338:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a33c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a33e:	784b      	ldrb	r3, [r1, #1]
    a340:	2b06      	cmp	r3, #6
    a342:	d002      	beq.n	a34a <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    a344:	f06f 0009 	mvn.w	r0, #9
    a348:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a34a:	888a      	ldrh	r2, [r1, #4]
    a34c:	4b18      	ldr	r3, [pc, #96]	; (a3b0 <hid_mouse_req+0x9c>)
    a34e:	7a1b      	ldrb	r3, [r3, #8]
    a350:	429a      	cmp	r2, r3
    a352:	d002      	beq.n	a35a <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    a354:	f06f 0009 	mvn.w	r0, #9
    a358:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a35a:	884b      	ldrh	r3, [r1, #2]
    a35c:	0a1b      	lsrs	r3, r3, #8
    a35e:	2b21      	cmp	r3, #33	; 0x21
    a360:	d004      	beq.n	a36c <hid_mouse_req+0x58>
    a362:	2b22      	cmp	r3, #34	; 0x22
    a364:	d009      	beq.n	a37a <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    a366:	f06f 000c 	mvn.w	r0, #12
    a36a:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    a36c:	4b10      	ldr	r3, [pc, #64]	; (a3b0 <hid_mouse_req+0x9c>)
    a36e:	6819      	ldr	r1, [r3, #0]
    a370:	2300      	movs	r3, #0
    a372:	780a      	ldrb	r2, [r1, #0]
    a374:	4c0f      	ldr	r4, [pc, #60]	; (a3b4 <hid_mouse_req+0xa0>)
    a376:	47a0      	blx	r4
    a378:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    a37a:	2300      	movs	r3, #0
    a37c:	2234      	movs	r2, #52	; 0x34
    a37e:	490e      	ldr	r1, [pc, #56]	; (a3b8 <hid_mouse_req+0xa4>)
    a380:	4c0c      	ldr	r4, [pc, #48]	; (a3b4 <hid_mouse_req+0xa0>)
    a382:	47a0      	blx	r4
    a384:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    a386:	2300      	movs	r3, #0
    a388:	2201      	movs	r2, #1
    a38a:	490c      	ldr	r1, [pc, #48]	; (a3bc <hid_mouse_req+0xa8>)
    a38c:	4c09      	ldr	r4, [pc, #36]	; (a3b4 <hid_mouse_req+0xa0>)
    a38e:	47a0      	blx	r4
    a390:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    a392:	884a      	ldrh	r2, [r1, #2]
    a394:	4b06      	ldr	r3, [pc, #24]	; (a3b0 <hid_mouse_req+0x9c>)
    a396:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    a398:	2300      	movs	r3, #0
    a39a:	461a      	mov	r2, r3
    a39c:	4619      	mov	r1, r3
    a39e:	4c05      	ldr	r4, [pc, #20]	; (a3b4 <hid_mouse_req+0xa0>)
    a3a0:	47a0      	blx	r4
    a3a2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a3a4:	f06f 0009 	mvn.w	r0, #9
    a3a8:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a3aa:	f06f 0009 	mvn.w	r0, #9
    a3ae:	bd10      	pop	{r4, pc}
    a3b0:	20000e70 	.word	0x20000e70
    a3b4:	0000a9b1 	.word	0x0000a9b1
    a3b8:	0000d3bc 	.word	0x0000d3bc
    a3bc:	20000e7a 	.word	0x20000e7a

0000a3c0 <hid_mouse_ctrl>:
{
    a3c0:	b570      	push	{r4, r5, r6, lr}
    a3c2:	4614      	mov	r4, r2
	switch (ctrl) {
    a3c4:	2901      	cmp	r1, #1
    a3c6:	d040      	beq.n	a44a <hid_mouse_ctrl+0x8a>
    a3c8:	b139      	cbz	r1, a3da <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    a3ca:	2902      	cmp	r1, #2
    a3cc:	bf0c      	ite	eq
    a3ce:	f06f 041a 	mvneq.w	r4, #26
    a3d2:	f06f 040c 	mvnne.w	r4, #12
}
    a3d6:	4620      	mov	r0, r4
    a3d8:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a3da:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    a3dc:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d049      	beq.n	a476 <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a3e2:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a3e4:	795b      	ldrb	r3, [r3, #5]
    a3e6:	2b03      	cmp	r3, #3
    a3e8:	d148      	bne.n	a47c <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a3ea:	7a2b      	ldrb	r3, [r5, #8]
    a3ec:	429a      	cmp	r2, r3
    a3ee:	d048      	beq.n	a482 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a3f0:	2bff      	cmp	r3, #255	; 0xff
    a3f2:	d149      	bne.n	a488 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a3f4:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a3f6:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    a3f8:	7818      	ldrb	r0, [r3, #0]
    a3fa:	2221      	movs	r2, #33	; 0x21
    a3fc:	6861      	ldr	r1, [r4, #4]
    a3fe:	4418      	add	r0, r3
    a400:	4b29      	ldr	r3, [pc, #164]	; (a4a8 <hid_mouse_ctrl+0xe8>)
    a402:	4798      	blx	r3
    a404:	4b29      	ldr	r3, [pc, #164]	; (a4ac <hid_mouse_ctrl+0xec>)
    a406:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a408:	6823      	ldr	r3, [r4, #0]
    a40a:	7818      	ldrb	r0, [r3, #0]
    a40c:	6861      	ldr	r1, [r4, #4]
    a40e:	4418      	add	r0, r3
    a410:	4b27      	ldr	r3, [pc, #156]	; (a4b0 <hid_mouse_ctrl+0xf0>)
    a412:	4798      	blx	r3
	desc->sod = ep;
    a414:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    a416:	2800      	cmp	r0, #0
    a418:	d039      	beq.n	a48e <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    a41a:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a41c:	7943      	ldrb	r3, [r0, #5]
    a41e:	7902      	ldrb	r2, [r0, #4]
    a420:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a424:	b292      	uxth	r2, r2
    a426:	78c1      	ldrb	r1, [r0, #3]
    a428:	4630      	mov	r0, r6
    a42a:	4b22      	ldr	r3, [pc, #136]	; (a4b4 <hid_mouse_ctrl+0xf4>)
    a42c:	4798      	blx	r3
    a42e:	4604      	mov	r4, r0
    a430:	bb80      	cbnz	r0, a494 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a432:	f016 0f80 	tst.w	r6, #128	; 0x80
    a436:	d030      	beq.n	a49a <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    a438:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    a43a:	4630      	mov	r0, r6
    a43c:	4b1e      	ldr	r3, [pc, #120]	; (a4b8 <hid_mouse_ctrl+0xf8>)
    a43e:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    a440:	4b1a      	ldr	r3, [pc, #104]	; (a4ac <hid_mouse_ctrl+0xec>)
    a442:	2201      	movs	r2, #1
    a444:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    a446:	72da      	strb	r2, [r3, #11]
    a448:	e7c5      	b.n	a3d6 <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a44a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a44c:	b11a      	cbz	r2, a456 <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a44e:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a450:	795b      	ldrb	r3, [r3, #5]
    a452:	2b03      	cmp	r3, #3
    a454:	d124      	bne.n	a4a0 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    a456:	7a2b      	ldrb	r3, [r5, #8]
    a458:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a45a:	bf1c      	itt	ne
    a45c:	23ff      	movne	r3, #255	; 0xff
    a45e:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    a460:	7a68      	ldrb	r0, [r5, #9]
    a462:	28ff      	cmp	r0, #255	; 0xff
    a464:	d003      	beq.n	a46e <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    a466:	4b15      	ldr	r3, [pc, #84]	; (a4bc <hid_mouse_ctrl+0xfc>)
    a468:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a46a:	23ff      	movs	r3, #255	; 0xff
    a46c:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    a46e:	2400      	movs	r4, #0
    a470:	4b0e      	ldr	r3, [pc, #56]	; (a4ac <hid_mouse_ctrl+0xec>)
    a472:	72dc      	strb	r4, [r3, #11]
    a474:	e7af      	b.n	a3d6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a476:	f06f 0409 	mvn.w	r4, #9
    a47a:	e7ac      	b.n	a3d6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a47c:	f06f 0409 	mvn.w	r4, #9
    a480:	e7a9      	b.n	a3d6 <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    a482:	f06f 0411 	mvn.w	r4, #17
    a486:	e7a6      	b.n	a3d6 <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    a488:	f06f 041b 	mvn.w	r4, #27
    a48c:	e7a3      	b.n	a3d6 <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a48e:	f06f 0409 	mvn.w	r4, #9
    a492:	e7a0      	b.n	a3d6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    a494:	f06f 0413 	mvn.w	r4, #19
    a498:	e79d      	b.n	a3d6 <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    a49a:	f04f 34ff 	mov.w	r4, #4294967295
    a49e:	e79a      	b.n	a3d6 <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    a4a0:	f06f 0409 	mvn.w	r4, #9
    a4a4:	e797      	b.n	a3d6 <hid_mouse_ctrl+0x16>
    a4a6:	bf00      	nop
    a4a8:	0000aef5 	.word	0x0000aef5
    a4ac:	20000e70 	.word	0x20000e70
    a4b0:	0000af2f 	.word	0x0000af2f
    a4b4:	000056a5 	.word	0x000056a5
    a4b8:	00005739 	.word	0x00005739
    a4bc:	0000570d 	.word	0x0000570d

0000a4c0 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    a4c0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a4c2:	4b0a      	ldr	r3, [pc, #40]	; (a4ec <hiddf_mouse_init+0x2c>)
    a4c4:	4798      	blx	r3
    a4c6:	2801      	cmp	r0, #1
    a4c8:	d80c      	bhi.n	a4e4 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    a4ca:	4809      	ldr	r0, [pc, #36]	; (a4f0 <hiddf_mouse_init+0x30>)
    a4cc:	4b09      	ldr	r3, [pc, #36]	; (a4f4 <hiddf_mouse_init+0x34>)
    a4ce:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    a4d0:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    a4d2:	300c      	adds	r0, #12
    a4d4:	4b08      	ldr	r3, [pc, #32]	; (a4f8 <hiddf_mouse_init+0x38>)
    a4d6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    a4d8:	4908      	ldr	r1, [pc, #32]	; (a4fc <hiddf_mouse_init+0x3c>)
    a4da:	2001      	movs	r0, #1
    a4dc:	4b08      	ldr	r3, [pc, #32]	; (a500 <hiddf_mouse_init+0x40>)
    a4de:	4798      	blx	r3
	return ERR_NONE;
    a4e0:	2000      	movs	r0, #0
    a4e2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a4e4:	f06f 0010 	mvn.w	r0, #16
}
    a4e8:	bd08      	pop	{r3, pc}
    a4ea:	bf00      	nop
    a4ec:	0000aee1 	.word	0x0000aee1
    a4f0:	20000e70 	.word	0x20000e70
    a4f4:	0000a3c1 	.word	0x0000a3c1
    a4f8:	0000ae81 	.word	0x0000ae81
    a4fc:	200003a8 	.word	0x200003a8
    a500:	0000aded 	.word	0x0000aded

0000a504 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    a504:	2200      	movs	r2, #0
    a506:	4b0d      	ldr	r3, [pc, #52]	; (a53c <hiddf_mouse_move+0x38>)
    a508:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    a50a:	2901      	cmp	r1, #1
    a50c:	d00e      	beq.n	a52c <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    a50e:	2902      	cmp	r1, #2
    a510:	d00e      	beq.n	a530 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    a512:	2903      	cmp	r1, #3
    a514:	d10f      	bne.n	a536 <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    a516:	4b09      	ldr	r3, [pc, #36]	; (a53c <hiddf_mouse_move+0x38>)
    a518:	71d8      	strb	r0, [r3, #7]
{
    a51a:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    a51c:	4807      	ldr	r0, [pc, #28]	; (a53c <hiddf_mouse_move+0x38>)
    a51e:	2300      	movs	r3, #0
    a520:	2204      	movs	r2, #4
    a522:	1881      	adds	r1, r0, r2
    a524:	7a40      	ldrb	r0, [r0, #9]
    a526:	4c06      	ldr	r4, [pc, #24]	; (a540 <hiddf_mouse_move+0x3c>)
    a528:	47a0      	blx	r4
    a52a:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    a52c:	7158      	strb	r0, [r3, #5]
    a52e:	e7f4      	b.n	a51a <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    a530:	4b02      	ldr	r3, [pc, #8]	; (a53c <hiddf_mouse_move+0x38>)
    a532:	7198      	strb	r0, [r3, #6]
    a534:	e7f1      	b.n	a51a <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    a536:	f06f 000c 	mvn.w	r0, #12
    a53a:	4770      	bx	lr
    a53c:	20000e70 	.word	0x20000e70
    a540:	0000a9b1 	.word	0x0000a9b1

0000a544 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    a544:	4770      	bx	lr

0000a546 <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    a546:	e7fe      	b.n	a546 <midi_cb_ep_bulk_out>

0000a548 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a548:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a54a:	780b      	ldrb	r3, [r1, #0]
    a54c:	2b81      	cmp	r3, #129	; 0x81
    a54e:	d014      	beq.n	a57a <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a550:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a554:	2b01      	cmp	r3, #1
    a556:	d132      	bne.n	a5be <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    a558:	888b      	ldrh	r3, [r1, #4]
    a55a:	4a1c      	ldr	r2, [pc, #112]	; (a5cc <audio_midi_req+0x84>)
    a55c:	7912      	ldrb	r2, [r2, #4]
    a55e:	429a      	cmp	r2, r3
    a560:	d003      	beq.n	a56a <audio_midi_req+0x22>
    a562:	4a1a      	ldr	r2, [pc, #104]	; (a5cc <audio_midi_req+0x84>)
    a564:	7952      	ldrb	r2, [r2, #5]
    a566:	429a      	cmp	r2, r3
    a568:	d12c      	bne.n	a5c4 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    a56a:	784b      	ldrb	r3, [r1, #1]
    a56c:	2b03      	cmp	r3, #3
    a56e:	d017      	beq.n	a5a0 <audio_midi_req+0x58>
    a570:	2b0b      	cmp	r3, #11
    a572:	d01b      	beq.n	a5ac <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    a574:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a578:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a57a:	888b      	ldrh	r3, [r1, #4]
    a57c:	4a13      	ldr	r2, [pc, #76]	; (a5cc <audio_midi_req+0x84>)
    a57e:	7912      	ldrb	r2, [r2, #4]
    a580:	429a      	cmp	r2, r3
    a582:	d006      	beq.n	a592 <audio_midi_req+0x4a>
    a584:	4a11      	ldr	r2, [pc, #68]	; (a5cc <audio_midi_req+0x84>)
    a586:	7952      	ldrb	r2, [r2, #5]
    a588:	429a      	cmp	r2, r3
    a58a:	d002      	beq.n	a592 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a58c:	f06f 0009 	mvn.w	r0, #9
    a590:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    a592:	4b0e      	ldr	r3, [pc, #56]	; (a5cc <audio_midi_req+0x84>)
    a594:	6819      	ldr	r1, [r3, #0]
    a596:	2300      	movs	r3, #0
    a598:	780a      	ldrb	r2, [r1, #0]
    a59a:	4c0d      	ldr	r4, [pc, #52]	; (a5d0 <audio_midi_req+0x88>)
    a59c:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    a59e:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    a5a0:	2300      	movs	r3, #0
    a5a2:	2201      	movs	r2, #1
    a5a4:	490b      	ldr	r1, [pc, #44]	; (a5d4 <audio_midi_req+0x8c>)
    a5a6:	4c0a      	ldr	r4, [pc, #40]	; (a5d0 <audio_midi_req+0x88>)
    a5a8:	47a0      	blx	r4
    a5aa:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    a5ac:	884a      	ldrh	r2, [r1, #2]
    a5ae:	4b07      	ldr	r3, [pc, #28]	; (a5cc <audio_midi_req+0x84>)
    a5b0:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    a5b2:	2300      	movs	r3, #0
    a5b4:	461a      	mov	r2, r3
    a5b6:	4619      	mov	r1, r3
    a5b8:	4c05      	ldr	r4, [pc, #20]	; (a5d0 <audio_midi_req+0x88>)
    a5ba:	47a0      	blx	r4
    a5bc:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a5be:	f06f 0009 	mvn.w	r0, #9
    a5c2:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a5c4:	f06f 0009 	mvn.w	r0, #9
    a5c8:	bd10      	pop	{r4, pc}
    a5ca:	bf00      	nop
    a5cc:	20000e88 	.word	0x20000e88
    a5d0:	0000a9b1 	.word	0x0000a9b1
    a5d4:	20000e90 	.word	0x20000e90

0000a5d8 <audio_midi_ctrl>:
{
    a5d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a5dc:	b083      	sub	sp, #12
    a5de:	4615      	mov	r5, r2
	switch (ctrl) {
    a5e0:	2901      	cmp	r1, #1
    a5e2:	f000 8092 	beq.w	a70a <audio_midi_ctrl+0x132>
    a5e6:	b141      	cbz	r1, a5fa <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    a5e8:	2902      	cmp	r1, #2
    a5ea:	bf0c      	ite	eq
    a5ec:	f06f 001a 	mvneq.w	r0, #26
    a5f0:	f06f 000c 	mvnne.w	r0, #12
}
    a5f4:	b003      	add	sp, #12
    a5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a5fa:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    a5fe:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a600:	2800      	cmp	r0, #0
    a602:	f000 80a9 	beq.w	a758 <audio_midi_ctrl+0x180>
    a606:	f109 0604 	add.w	r6, r9, #4
    a60a:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a60c:	f04f 0804 	mov.w	r8, #4
    a610:	4f5d      	ldr	r7, [pc, #372]	; (a788 <audio_midi_ctrl+0x1b0>)
    a612:	e019      	b.n	a648 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a614:	f816 3b01 	ldrb.w	r3, [r6], #1
    a618:	429a      	cmp	r2, r3
    a61a:	f000 80a3 	beq.w	a764 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a61e:	2bff      	cmp	r3, #255	; 0xff
    a620:	f040 80a3 	bne.w	a76a <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a624:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    a628:	2c01      	cmp	r4, #1
    a62a:	d016      	beq.n	a65a <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a62c:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a62e:	7818      	ldrb	r0, [r3, #0]
    a630:	4642      	mov	r2, r8
    a632:	6869      	ldr	r1, [r5, #4]
    a634:	4418      	add	r0, r3
    a636:	47b8      	blx	r7
    a638:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    a63a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    a63e:	f000 809e 	beq.w	a77e <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    a642:	2800      	cmp	r0, #0
    a644:	f000 808b 	beq.w	a75e <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    a648:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    a64a:	7943      	ldrb	r3, [r0, #5]
    a64c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a650:	2b01      	cmp	r3, #1
    a652:	d0df      	beq.n	a614 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    a654:	f06f 0009 	mvn.w	r0, #9
    a658:	e7cc      	b.n	a5f4 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a65a:	2205      	movs	r2, #5
    a65c:	6869      	ldr	r1, [r5, #4]
    a65e:	4b4a      	ldr	r3, [pc, #296]	; (a788 <audio_midi_ctrl+0x1b0>)
    a660:	4798      	blx	r3
    a662:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    a664:	4e49      	ldr	r6, [pc, #292]	; (a78c <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a666:	f8df 8144 	ldr.w	r8, [pc, #324]	; a7ac <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    a66a:	4f49      	ldr	r7, [pc, #292]	; (a790 <audio_midi_ctrl+0x1b8>)
    a66c:	e01a      	b.n	a6a4 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    a66e:	4a47      	ldr	r2, [pc, #284]	; (a78c <audio_midi_ctrl+0x1b4>)
    a670:	7953      	ldrb	r3, [r2, #5]
    a672:	425b      	negs	r3, r3
    a674:	b2db      	uxtb	r3, r3
    a676:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    a678:	f06f 0013 	mvn.w	r0, #19
    a67c:	e7ba      	b.n	a5f4 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    a67e:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a682:	b2c0      	uxtb	r0, r0
    a684:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    a688:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    a68a:	4a42      	ldr	r2, [pc, #264]	; (a794 <audio_midi_ctrl+0x1bc>)
    a68c:	2102      	movs	r1, #2
    a68e:	f899 0006 	ldrb.w	r0, [r9, #6]
    a692:	4b41      	ldr	r3, [pc, #260]	; (a798 <audio_midi_ctrl+0x1c0>)
    a694:	4798      	blx	r3
				desc->sod = ep;
    a696:	602c      	str	r4, [r5, #0]
    a698:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a69a:	6869      	ldr	r1, [r5, #4]
    a69c:	4420      	add	r0, r4
    a69e:	4b3f      	ldr	r3, [pc, #252]	; (a79c <audio_midi_ctrl+0x1c4>)
    a6a0:	4798      	blx	r3
    a6a2:	4604      	mov	r4, r0
			while (NULL != ep) {
    a6a4:	2c00      	cmp	r4, #0
    a6a6:	d063      	beq.n	a770 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    a6a8:	78a3      	ldrb	r3, [r4, #2]
    a6aa:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    a6ae:	78e3      	ldrb	r3, [r4, #3]
    a6b0:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    a6b4:	7962      	ldrb	r2, [r4, #5]
    a6b6:	7923      	ldrb	r3, [r4, #4]
    a6b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    a6bc:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    a6be:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    a6c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a6c6:	b2db      	uxtb	r3, r3
    a6c8:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    a6ca:	2301      	movs	r3, #1
    a6cc:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a6ce:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a6d2:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a6d6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a6da:	b292      	uxth	r2, r2
    a6dc:	47c0      	blx	r8
    a6de:	b2c0      	uxtb	r0, r0
    a6e0:	7170      	strb	r0, [r6, #5]
    a6e2:	2800      	cmp	r0, #0
    a6e4:	d1c3      	bne.n	a66e <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a6e6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a6ea:	f013 0f80 	tst.w	r3, #128	; 0x80
    a6ee:	d1c6      	bne.n	a67e <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    a6f0:	f89d 0002 	ldrb.w	r0, [sp, #2]
    a6f4:	b2c0      	uxtb	r0, r0
    a6f6:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    a6fa:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    a6fc:	4a28      	ldr	r2, [pc, #160]	; (a7a0 <audio_midi_ctrl+0x1c8>)
    a6fe:	2102      	movs	r1, #2
    a700:	f899 0007 	ldrb.w	r0, [r9, #7]
    a704:	4b24      	ldr	r3, [pc, #144]	; (a798 <audio_midi_ctrl+0x1c0>)
    a706:	4798      	blx	r3
    a708:	e7c5      	b.n	a696 <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a70a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a70c:	b142      	cbz	r2, a720 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a70e:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    a710:	795b      	ldrb	r3, [r3, #5]
    a712:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a716:	2b01      	cmp	r3, #1
    a718:	d002      	beq.n	a720 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    a71a:	f06f 0009 	mvn.w	r0, #9
    a71e:	e769      	b.n	a5f4 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    a720:	7923      	ldrb	r3, [r4, #4]
    a722:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    a724:	bf1c      	itt	ne
    a726:	23ff      	movne	r3, #255	; 0xff
    a728:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    a72a:	7963      	ldrb	r3, [r4, #5]
    a72c:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    a72e:	bf1c      	itt	ne
    a730:	23ff      	movne	r3, #255	; 0xff
    a732:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    a734:	79a0      	ldrb	r0, [r4, #6]
    a736:	28ff      	cmp	r0, #255	; 0xff
    a738:	d003      	beq.n	a742 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    a73a:	4b1a      	ldr	r3, [pc, #104]	; (a7a4 <audio_midi_ctrl+0x1cc>)
    a73c:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a73e:	23ff      	movs	r3, #255	; 0xff
    a740:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    a742:	79e0      	ldrb	r0, [r4, #7]
    a744:	28ff      	cmp	r0, #255	; 0xff
    a746:	d003      	beq.n	a750 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    a748:	4b16      	ldr	r3, [pc, #88]	; (a7a4 <audio_midi_ctrl+0x1cc>)
    a74a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a74c:	23ff      	movs	r3, #255	; 0xff
    a74e:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    a750:	2000      	movs	r0, #0
    a752:	4b15      	ldr	r3, [pc, #84]	; (a7a8 <audio_midi_ctrl+0x1d0>)
    a754:	7358      	strb	r0, [r3, #13]
    a756:	e74d      	b.n	a5f4 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    a758:	f06f 0009 	mvn.w	r0, #9
    a75c:	e74a      	b.n	a5f4 <audio_midi_ctrl+0x1c>
    a75e:	f06f 0009 	mvn.w	r0, #9
    a762:	e747      	b.n	a5f4 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    a764:	f06f 0011 	mvn.w	r0, #17
    a768:	e744      	b.n	a5f4 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    a76a:	f06f 001b 	mvn.w	r0, #27
    a76e:	e741      	b.n	a5f4 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    a770:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    a772:	7818      	ldrb	r0, [r3, #0]
    a774:	2204      	movs	r2, #4
    a776:	6869      	ldr	r1, [r5, #4]
    a778:	4418      	add	r0, r3
    a77a:	4b03      	ldr	r3, [pc, #12]	; (a788 <audio_midi_ctrl+0x1b0>)
    a77c:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    a77e:	2201      	movs	r2, #1
    a780:	4b09      	ldr	r3, [pc, #36]	; (a7a8 <audio_midi_ctrl+0x1d0>)
    a782:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a784:	2000      	movs	r0, #0
    a786:	e735      	b.n	a5f4 <audio_midi_ctrl+0x1c>
    a788:	0000aef5 	.word	0x0000aef5
    a78c:	20003d50 	.word	0x20003d50
    a790:	00005739 	.word	0x00005739
    a794:	0000a545 	.word	0x0000a545
    a798:	0000590d 	.word	0x0000590d
    a79c:	0000af2f 	.word	0x0000af2f
    a7a0:	0000a547 	.word	0x0000a547
    a7a4:	0000570d 	.word	0x0000570d
    a7a8:	20000e88 	.word	0x20000e88
    a7ac:	000056a5 	.word	0x000056a5

0000a7b0 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    a7b0:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    a7b2:	4b0a      	ldr	r3, [pc, #40]	; (a7dc <audiodf_midi_init+0x2c>)
    a7b4:	4798      	blx	r3
    a7b6:	2801      	cmp	r0, #1
    a7b8:	d80c      	bhi.n	a7d4 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    a7ba:	4809      	ldr	r0, [pc, #36]	; (a7e0 <audiodf_midi_init+0x30>)
    a7bc:	4b09      	ldr	r3, [pc, #36]	; (a7e4 <audiodf_midi_init+0x34>)
    a7be:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    a7c0:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    a7c2:	3010      	adds	r0, #16
    a7c4:	4b08      	ldr	r3, [pc, #32]	; (a7e8 <audiodf_midi_init+0x38>)
    a7c6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    a7c8:	4908      	ldr	r1, [pc, #32]	; (a7ec <audiodf_midi_init+0x3c>)
    a7ca:	2001      	movs	r0, #1
    a7cc:	4b08      	ldr	r3, [pc, #32]	; (a7f0 <audiodf_midi_init+0x40>)
    a7ce:	4798      	blx	r3
	return ERR_NONE;
    a7d0:	2000      	movs	r0, #0
    a7d2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a7d4:	f06f 0010 	mvn.w	r0, #16
}
    a7d8:	bd08      	pop	{r3, pc}
    a7da:	bf00      	nop
    a7dc:	0000aee1 	.word	0x0000aee1
    a7e0:	20000e88 	.word	0x20000e88
    a7e4:	0000a5d9 	.word	0x0000a5d9
    a7e8:	0000ae81 	.word	0x0000ae81
    a7ec:	200003b0 	.word	0x200003b0
    a7f0:	0000aded 	.word	0x0000aded

0000a7f4 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    a7f4:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    a7f6:	4c06      	ldr	r4, [pc, #24]	; (a810 <audiodf_midi_xfer_packet+0x1c>)
    a7f8:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    a7fa:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    a7fc:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    a7fe:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    a800:	2300      	movs	r3, #0
    a802:	2204      	movs	r2, #4
    a804:	f104 0109 	add.w	r1, r4, #9
    a808:	79a0      	ldrb	r0, [r4, #6]
    a80a:	4c02      	ldr	r4, [pc, #8]	; (a814 <audiodf_midi_xfer_packet+0x20>)
    a80c:	47a0      	blx	r4
	
	
}
    a80e:	bd10      	pop	{r4, pc}
    a810:	20000e88 	.word	0x20000e88
    a814:	0000a9b1 	.word	0x0000a9b1

0000a818 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    a818:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a81a:	4b07      	ldr	r3, [pc, #28]	; (a838 <usbdc_unconfig+0x20>)
    a81c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a81e:	b14c      	cbz	r4, a834 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    a820:	2600      	movs	r6, #0
    a822:	2501      	movs	r5, #1
    a824:	6863      	ldr	r3, [r4, #4]
    a826:	4632      	mov	r2, r6
    a828:	4629      	mov	r1, r5
    a82a:	4620      	mov	r0, r4
    a82c:	4798      	blx	r3
		func = func->next;
    a82e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    a830:	2c00      	cmp	r4, #0
    a832:	d1f7      	bne.n	a824 <usbdc_unconfig+0xc>
    a834:	bd70      	pop	{r4, r5, r6, pc}
    a836:	bf00      	nop
    a838:	20000ea4 	.word	0x20000ea4

0000a83c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    a83c:	b570      	push	{r4, r5, r6, lr}
    a83e:	4606      	mov	r6, r0
    a840:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a842:	4b07      	ldr	r3, [pc, #28]	; (a860 <usbdc_change_notify+0x24>)
    a844:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    a846:	b91c      	cbnz	r4, a850 <usbdc_change_notify+0x14>
    a848:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    a84a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    a84c:	2c00      	cmp	r4, #0
    a84e:	d0fb      	beq.n	a848 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    a850:	6863      	ldr	r3, [r4, #4]
    a852:	2b00      	cmp	r3, #0
    a854:	d0f9      	beq.n	a84a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    a856:	4629      	mov	r1, r5
    a858:	4630      	mov	r0, r6
    a85a:	4798      	blx	r3
    a85c:	e7f5      	b.n	a84a <usbdc_change_notify+0xe>
    a85e:	bf00      	nop
    a860:	20000ea4 	.word	0x20000ea4

0000a864 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a866:	4607      	mov	r7, r0
    a868:	460e      	mov	r6, r1
    a86a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a86c:	4b0c      	ldr	r3, [pc, #48]	; (a8a0 <usbdc_request_handler+0x3c>)
    a86e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    a870:	b91c      	cbnz	r4, a87a <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a872:	2000      	movs	r0, #0
    a874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    a876:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    a878:	b16c      	cbz	r4, a896 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    a87a:	6863      	ldr	r3, [r4, #4]
    a87c:	2b00      	cmp	r3, #0
    a87e:	d0fa      	beq.n	a876 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    a880:	462a      	mov	r2, r5
    a882:	4631      	mov	r1, r6
    a884:	4638      	mov	r0, r7
    a886:	4798      	blx	r3
			if (0 == rc) {
    a888:	b138      	cbz	r0, a89a <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    a88a:	f110 0f0a 	cmn.w	r0, #10
    a88e:	d0f2      	beq.n	a876 <usbdc_request_handler+0x12>
				return -1;
    a890:	f04f 30ff 	mov.w	r0, #4294967295
}
    a894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a896:	2000      	movs	r0, #0
    a898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a89a:	2001      	movs	r0, #1
    a89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a89e:	bf00      	nop
    a8a0:	20000ea4 	.word	0x20000ea4

0000a8a4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a8a4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a8a6:	4b06      	ldr	r3, [pc, #24]	; (a8c0 <usbd_sof_cb+0x1c>)
    a8a8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a8aa:	b91c      	cbnz	r4, a8b4 <usbd_sof_cb+0x10>
    a8ac:	bd10      	pop	{r4, pc}
		sof = sof->next;
    a8ae:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    a8b0:	2c00      	cmp	r4, #0
    a8b2:	d0fb      	beq.n	a8ac <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    a8b4:	6863      	ldr	r3, [r4, #4]
    a8b6:	2b00      	cmp	r3, #0
    a8b8:	d0f9      	beq.n	a8ae <usbd_sof_cb+0xa>
			sof->cb();
    a8ba:	4798      	blx	r3
    a8bc:	e7f7      	b.n	a8ae <usbd_sof_cb+0xa>
    a8be:	bf00      	nop
    a8c0:	20000ea4 	.word	0x20000ea4

0000a8c4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a8c4:	b510      	push	{r4, lr}
    a8c6:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a8c8:	b119      	cbz	r1, a8d2 <usbdc_cb_ctl_done+0xe>
    a8ca:	2901      	cmp	r1, #1
    a8cc:	d026      	beq.n	a91c <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a8ce:	2000      	movs	r0, #0
    a8d0:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a8d2:	7813      	ldrb	r3, [r2, #0]
    a8d4:	2b00      	cmp	r3, #0
    a8d6:	d1fa      	bne.n	a8ce <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    a8d8:	7853      	ldrb	r3, [r2, #1]
    a8da:	2b05      	cmp	r3, #5
    a8dc:	d00f      	beq.n	a8fe <usbdc_cb_ctl_done+0x3a>
    a8de:	2b09      	cmp	r3, #9
    a8e0:	d1f5      	bne.n	a8ce <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    a8e2:	8852      	ldrh	r2, [r2, #2]
    a8e4:	4b10      	ldr	r3, [pc, #64]	; (a928 <usbdc_cb_ctl_done+0x64>)
    a8e6:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a8e8:	8863      	ldrh	r3, [r4, #2]
    a8ea:	2b00      	cmp	r3, #0
    a8ec:	bf14      	ite	ne
    a8ee:	2104      	movne	r1, #4
    a8f0:	2103      	moveq	r1, #3
    a8f2:	4b0d      	ldr	r3, [pc, #52]	; (a928 <usbdc_cb_ctl_done+0x64>)
    a8f4:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a8f6:	2001      	movs	r0, #1
    a8f8:	4b0c      	ldr	r3, [pc, #48]	; (a92c <usbdc_cb_ctl_done+0x68>)
    a8fa:	4798      	blx	r3
    a8fc:	e7e7      	b.n	a8ce <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    a8fe:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    a900:	b2c0      	uxtb	r0, r0
    a902:	4b0b      	ldr	r3, [pc, #44]	; (a930 <usbdc_cb_ctl_done+0x6c>)
    a904:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a906:	8863      	ldrh	r3, [r4, #2]
    a908:	2b00      	cmp	r3, #0
    a90a:	bf14      	ite	ne
    a90c:	2103      	movne	r1, #3
    a90e:	2102      	moveq	r1, #2
    a910:	4b05      	ldr	r3, [pc, #20]	; (a928 <usbdc_cb_ctl_done+0x64>)
    a912:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a914:	2001      	movs	r0, #1
    a916:	4b05      	ldr	r3, [pc, #20]	; (a92c <usbdc_cb_ctl_done+0x68>)
    a918:	4798      	blx	r3
    a91a:	e7d8      	b.n	a8ce <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a91c:	2201      	movs	r2, #1
    a91e:	4621      	mov	r1, r4
    a920:	2000      	movs	r0, #0
    a922:	4b04      	ldr	r3, [pc, #16]	; (a934 <usbdc_cb_ctl_done+0x70>)
    a924:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a926:	e7d2      	b.n	a8ce <usbdc_cb_ctl_done+0xa>
    a928:	20000ea4 	.word	0x20000ea4
    a92c:	0000a83d 	.word	0x0000a83d
    a930:	00005699 	.word	0x00005699
    a934:	0000a865 	.word	0x0000a865

0000a938 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a938:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a93a:	4b0d      	ldr	r3, [pc, #52]	; (a970 <usbdc_reset+0x38>)
    a93c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    a93e:	4d0d      	ldr	r5, [pc, #52]	; (a974 <usbdc_reset+0x3c>)
    a940:	2602      	movs	r6, #2
    a942:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a944:	2400      	movs	r4, #0
    a946:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a948:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    a94a:	4620      	mov	r0, r4
    a94c:	4b0a      	ldr	r3, [pc, #40]	; (a978 <usbdc_reset+0x40>)
    a94e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a950:	7f28      	ldrb	r0, [r5, #28]
    a952:	4b0a      	ldr	r3, [pc, #40]	; (a97c <usbdc_reset+0x44>)
    a954:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a956:	4a0a      	ldr	r2, [pc, #40]	; (a980 <usbdc_reset+0x48>)
    a958:	4621      	mov	r1, r4
    a95a:	4620      	mov	r0, r4
    a95c:	4d09      	ldr	r5, [pc, #36]	; (a984 <usbdc_reset+0x4c>)
    a95e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a960:	4a09      	ldr	r2, [pc, #36]	; (a988 <usbdc_reset+0x50>)
    a962:	4631      	mov	r1, r6
    a964:	4620      	mov	r0, r4
    a966:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a968:	4620      	mov	r0, r4
    a96a:	4b08      	ldr	r3, [pc, #32]	; (a98c <usbdc_reset+0x54>)
    a96c:	4798      	blx	r3
    a96e:	bd70      	pop	{r4, r5, r6, pc}
    a970:	0000a819 	.word	0x0000a819
    a974:	20000ea4 	.word	0x20000ea4
    a978:	0000570d 	.word	0x0000570d
    a97c:	000056f9 	.word	0x000056f9
    a980:	0000a9d1 	.word	0x0000a9d1
    a984:	0000590d 	.word	0x0000590d
    a988:	0000a8c5 	.word	0x0000a8c5
    a98c:	00005739 	.word	0x00005739

0000a990 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    a990:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    a992:	b110      	cbz	r0, a99a <usbd_event_cb+0xa>
    a994:	2801      	cmp	r0, #1
    a996:	d004      	beq.n	a9a2 <usbd_event_cb+0x12>
    a998:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a99a:	2000      	movs	r0, #0
    a99c:	4b02      	ldr	r3, [pc, #8]	; (a9a8 <usbd_event_cb+0x18>)
    a99e:	4798      	blx	r3
		break;
    a9a0:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    a9a2:	4b02      	ldr	r3, [pc, #8]	; (a9ac <usbd_event_cb+0x1c>)
    a9a4:	4798      	blx	r3
    a9a6:	bd08      	pop	{r3, pc}
    a9a8:	0000a83d 	.word	0x0000a83d
    a9ac:	0000a939 	.word	0x0000a939

0000a9b0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a9b0:	b500      	push	{lr}
    a9b2:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a9b4:	9101      	str	r1, [sp, #4]
    a9b6:	9202      	str	r2, [sp, #8]
    a9b8:	f88d 000c 	strb.w	r0, [sp, #12]
    a9bc:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a9c0:	a801      	add	r0, sp, #4
    a9c2:	4b02      	ldr	r3, [pc, #8]	; (a9cc <usbdc_xfer+0x1c>)
    a9c4:	4798      	blx	r3
}
    a9c6:	b005      	add	sp, #20
    a9c8:	f85d fb04 	ldr.w	pc, [sp], #4
    a9cc:	00005785 	.word	0x00005785

0000a9d0 <usbdc_cb_ctl_req>:
{
    a9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a9d4:	b083      	sub	sp, #12
    a9d6:	4605      	mov	r5, r0
    a9d8:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a9da:	2200      	movs	r2, #0
    a9dc:	4b9b      	ldr	r3, [pc, #620]	; (ac4c <usbdc_cb_ctl_req+0x27c>)
    a9de:	4798      	blx	r3
    a9e0:	f1b0 3fff 	cmp.w	r0, #4294967295
    a9e4:	d00b      	beq.n	a9fe <usbdc_cb_ctl_req+0x2e>
    a9e6:	2801      	cmp	r0, #1
    a9e8:	f000 81e3 	beq.w	adb2 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a9ec:	7823      	ldrb	r3, [r4, #0]
    a9ee:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    a9f2:	d008      	beq.n	aa06 <usbdc_cb_ctl_req+0x36>
    a9f4:	2a80      	cmp	r2, #128	; 0x80
    a9f6:	f000 80f4 	beq.w	abe2 <usbdc_cb_ctl_req+0x212>
		return false;
    a9fa:	2000      	movs	r0, #0
    a9fc:	e000      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    a9fe:	2000      	movs	r0, #0
}
    aa00:	b003      	add	sp, #12
    aa02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    aa06:	7862      	ldrb	r2, [r4, #1]
    aa08:	3a01      	subs	r2, #1
    aa0a:	2a0a      	cmp	r2, #10
    aa0c:	f200 81d3 	bhi.w	adb6 <usbdc_cb_ctl_req+0x3e6>
    aa10:	e8df f012 	tbh	[pc, r2, lsl #1]
    aa14:	01d10060 	.word	0x01d10060
    aa18:	01d10076 	.word	0x01d10076
    aa1c:	01d1000b 	.word	0x01d1000b
    aa20:	01d101d1 	.word	0x01d101d1
    aa24:	01d10015 	.word	0x01d10015
    aa28:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    aa2a:	2301      	movs	r3, #1
    aa2c:	2200      	movs	r2, #0
    aa2e:	4611      	mov	r1, r2
    aa30:	4628      	mov	r0, r5
    aa32:	4c87      	ldr	r4, [pc, #540]	; (ac50 <usbdc_cb_ctl_req+0x280>)
    aa34:	47a0      	blx	r4
    aa36:	fab0 f080 	clz	r0, r0
    aa3a:	0940      	lsrs	r0, r0, #5
    aa3c:	e7e0      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    aa3e:	8862      	ldrh	r2, [r4, #2]
    aa40:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    aa42:	b1ca      	cbz	r2, aa78 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    aa44:	4b83      	ldr	r3, [pc, #524]	; (ac54 <usbdc_cb_ctl_req+0x284>)
    aa46:	681b      	ldr	r3, [r3, #0]
    aa48:	6859      	ldr	r1, [r3, #4]
    aa4a:	6818      	ldr	r0, [r3, #0]
    aa4c:	4b82      	ldr	r3, [pc, #520]	; (ac58 <usbdc_cb_ctl_req+0x288>)
    aa4e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    aa50:	2800      	cmp	r0, #0
    aa52:	f000 81be 	beq.w	add2 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    aa56:	78c2      	ldrb	r2, [r0, #3]
    aa58:	7881      	ldrb	r1, [r0, #2]
    aa5a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    aa5e:	fa10 f181 	uxtah	r1, r0, r1
    aa62:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    aa64:	2204      	movs	r2, #4
    aa66:	4b7d      	ldr	r3, [pc, #500]	; (ac5c <usbdc_cb_ctl_req+0x28c>)
    aa68:	4798      	blx	r3
    aa6a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    aa6c:	b130      	cbz	r0, aa7c <usbdc_cb_ctl_req+0xac>
    aa6e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    aa70:	f8df 81e0 	ldr.w	r8, [pc, #480]	; ac54 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    aa74:	4f79      	ldr	r7, [pc, #484]	; (ac5c <usbdc_cb_ctl_req+0x28c>)
    aa76:	e018      	b.n	aaaa <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    aa78:	4b79      	ldr	r3, [pc, #484]	; (ac60 <usbdc_cb_ctl_req+0x290>)
    aa7a:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    aa7c:	2301      	movs	r3, #1
    aa7e:	2200      	movs	r2, #0
    aa80:	4611      	mov	r1, r2
    aa82:	4628      	mov	r0, r5
    aa84:	4c72      	ldr	r4, [pc, #456]	; (ac50 <usbdc_cb_ctl_req+0x280>)
    aa86:	47a0      	blx	r4
    aa88:	fab0 f080 	clz	r0, r0
    aa8c:	0940      	lsrs	r0, r0, #5
    aa8e:	e7b7      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    aa90:	464c      	mov	r4, r9
    aa92:	e000      	b.n	aa96 <usbdc_cb_ctl_req+0xc6>
    aa94:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    aa96:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    aa98:	7803      	ldrb	r3, [r0, #0]
    aa9a:	4418      	add	r0, r3
    aa9c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    aa9e:	2204      	movs	r2, #4
    aaa0:	9901      	ldr	r1, [sp, #4]
    aaa2:	47b8      	blx	r7
    aaa4:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    aaa6:	2800      	cmp	r0, #0
    aaa8:	d0e8      	beq.n	aa7c <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    aaaa:	f890 9002 	ldrb.w	r9, [r0, #2]
    aaae:	45a1      	cmp	r9, r4
    aab0:	d0f1      	beq.n	aa96 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    aab2:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    aab6:	2c00      	cmp	r4, #0
    aab8:	d0ea      	beq.n	aa90 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    aaba:	2600      	movs	r6, #0
    aabc:	6863      	ldr	r3, [r4, #4]
    aabe:	466a      	mov	r2, sp
    aac0:	4631      	mov	r1, r6
    aac2:	4620      	mov	r0, r4
    aac4:	4798      	blx	r3
    aac6:	2800      	cmp	r0, #0
    aac8:	d0e4      	beq.n	aa94 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    aaca:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    aacc:	2c00      	cmp	r4, #0
    aace:	d1f5      	bne.n	aabc <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    aad0:	464c      	mov	r4, r9
    aad2:	e7e0      	b.n	aa96 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    aad4:	f003 031f 	and.w	r3, r3, #31
    aad8:	2b02      	cmp	r3, #2
    aada:	f040 816e 	bne.w	adba <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    aade:	88e3      	ldrh	r3, [r4, #6]
    aae0:	b10b      	cbz	r3, aae6 <usbdc_cb_ctl_req+0x116>
			return false;
    aae2:	2000      	movs	r0, #0
    aae4:	e78c      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    aae6:	88a0      	ldrh	r0, [r4, #4]
    aae8:	2100      	movs	r1, #0
    aaea:	b2c0      	uxtb	r0, r0
    aaec:	4b5d      	ldr	r3, [pc, #372]	; (ac64 <usbdc_cb_ctl_req+0x294>)
    aaee:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    aaf0:	2301      	movs	r3, #1
    aaf2:	2200      	movs	r2, #0
    aaf4:	4611      	mov	r1, r2
    aaf6:	4628      	mov	r0, r5
    aaf8:	4c55      	ldr	r4, [pc, #340]	; (ac50 <usbdc_cb_ctl_req+0x280>)
    aafa:	47a0      	blx	r4
		return true;
    aafc:	2001      	movs	r0, #1
    aafe:	e77f      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ab00:	f003 031f 	and.w	r3, r3, #31
    ab04:	2b02      	cmp	r3, #2
    ab06:	f040 815a 	bne.w	adbe <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    ab0a:	88e3      	ldrh	r3, [r4, #6]
    ab0c:	b10b      	cbz	r3, ab12 <usbdc_cb_ctl_req+0x142>
			return false;
    ab0e:	2000      	movs	r0, #0
    ab10:	e776      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ab12:	88a0      	ldrh	r0, [r4, #4]
    ab14:	2101      	movs	r1, #1
    ab16:	b2c0      	uxtb	r0, r0
    ab18:	4b52      	ldr	r3, [pc, #328]	; (ac64 <usbdc_cb_ctl_req+0x294>)
    ab1a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ab1c:	2301      	movs	r3, #1
    ab1e:	2200      	movs	r2, #0
    ab20:	4611      	mov	r1, r2
    ab22:	4628      	mov	r0, r5
    ab24:	4c4a      	ldr	r4, [pc, #296]	; (ac50 <usbdc_cb_ctl_req+0x280>)
    ab26:	47a0      	blx	r4
		return true;
    ab28:	2001      	movs	r0, #1
    ab2a:	e769      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    ab2c:	8866      	ldrh	r6, [r4, #2]
    ab2e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ab30:	4a48      	ldr	r2, [pc, #288]	; (ac54 <usbdc_cb_ctl_req+0x284>)
    ab32:	6813      	ldr	r3, [r2, #0]
    ab34:	7ed2      	ldrb	r2, [r2, #27]
    ab36:	6859      	ldr	r1, [r3, #4]
    ab38:	6818      	ldr	r0, [r3, #0]
    ab3a:	4b47      	ldr	r3, [pc, #284]	; (ac58 <usbdc_cb_ctl_req+0x288>)
    ab3c:	4798      	blx	r3
	if (NULL == ifc) {
    ab3e:	2800      	cmp	r0, #0
    ab40:	d045      	beq.n	abce <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    ab42:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    ab44:	78c2      	ldrb	r2, [r0, #3]
    ab46:	7881      	ldrb	r1, [r0, #2]
    ab48:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ab4c:	fa10 f181 	uxtah	r1, r0, r1
    ab50:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ab52:	2204      	movs	r2, #4
    ab54:	4b41      	ldr	r3, [pc, #260]	; (ac5c <usbdc_cb_ctl_req+0x28c>)
    ab56:	4798      	blx	r3
    ab58:	4603      	mov	r3, r0
    ab5a:	2800      	cmp	r0, #0
    ab5c:	d039      	beq.n	abd2 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ab5e:	2704      	movs	r7, #4
    ab60:	4d3e      	ldr	r5, [pc, #248]	; (ac5c <usbdc_cb_ctl_req+0x28c>)
    ab62:	e008      	b.n	ab76 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    ab64:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    ab66:	7803      	ldrb	r3, [r0, #0]
    ab68:	4418      	add	r0, r3
    ab6a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ab6c:	463a      	mov	r2, r7
    ab6e:	9901      	ldr	r1, [sp, #4]
    ab70:	47a8      	blx	r5
		if (NULL == ifc) {
    ab72:	4603      	mov	r3, r0
    ab74:	b378      	cbz	r0, abd6 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    ab76:	789a      	ldrb	r2, [r3, #2]
    ab78:	42a2      	cmp	r2, r4
    ab7a:	d1f3      	bne.n	ab64 <usbdc_cb_ctl_req+0x194>
    ab7c:	78da      	ldrb	r2, [r3, #3]
    ab7e:	42b2      	cmp	r2, r6
    ab80:	d1f0      	bne.n	ab64 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    ab82:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    ab84:	4b33      	ldr	r3, [pc, #204]	; (ac54 <usbdc_cb_ctl_req+0x284>)
    ab86:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    ab88:	b33d      	cbz	r5, abda <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    ab8a:	2701      	movs	r7, #1
    ab8c:	686b      	ldr	r3, [r5, #4]
    ab8e:	466a      	mov	r2, sp
    ab90:	4639      	mov	r1, r7
    ab92:	4628      	mov	r0, r5
    ab94:	4798      	blx	r3
    ab96:	b120      	cbz	r0, aba2 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    ab98:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    ab9a:	2d00      	cmp	r5, #0
    ab9c:	d1f6      	bne.n	ab8c <usbdc_cb_ctl_req+0x1bc>
	return false;
    ab9e:	2000      	movs	r0, #0
    aba0:	e72e      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    aba2:	686b      	ldr	r3, [r5, #4]
    aba4:	466a      	mov	r2, sp
    aba6:	2100      	movs	r1, #0
    aba8:	4628      	mov	r0, r5
    abaa:	4798      	blx	r3
    abac:	b9b8      	cbnz	r0, abde <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    abae:	b136      	cbz	r6, abbe <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    abb0:	4a28      	ldr	r2, [pc, #160]	; (ac54 <usbdc_cb_ctl_req+0x284>)
    abb2:	2301      	movs	r3, #1
    abb4:	fa03 f404 	lsl.w	r4, r3, r4
    abb8:	7f53      	ldrb	r3, [r2, #29]
    abba:	4323      	orrs	r3, r4
    abbc:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    abbe:	2300      	movs	r3, #0
    abc0:	461a      	mov	r2, r3
    abc2:	4619      	mov	r1, r3
    abc4:	4618      	mov	r0, r3
    abc6:	4c22      	ldr	r4, [pc, #136]	; (ac50 <usbdc_cb_ctl_req+0x280>)
    abc8:	47a0      	blx	r4
			return true;
    abca:	2001      	movs	r0, #1
    abcc:	e718      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    abce:	2000      	movs	r0, #0
    abd0:	e716      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    abd2:	2000      	movs	r0, #0
    abd4:	e714      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
			return false;
    abd6:	2000      	movs	r0, #0
    abd8:	e712      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
	return false;
    abda:	2000      	movs	r0, #0
    abdc:	e710      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
			return false;
    abde:	2000      	movs	r0, #0
    abe0:	e70e      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    abe2:	7862      	ldrb	r2, [r4, #1]
    abe4:	2a0a      	cmp	r2, #10
    abe6:	f200 80ec 	bhi.w	adc2 <usbdc_cb_ctl_req+0x3f2>
    abea:	e8df f012 	tbh	[pc, r2, lsl #1]
    abee:	008e      	.short	0x008e
    abf0:	00ea00ea 	.word	0x00ea00ea
    abf4:	00ea00ea 	.word	0x00ea00ea
    abf8:	000b00ea 	.word	0x000b00ea
    abfc:	008200ea 	.word	0x008200ea
    ac00:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ac04:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    ac06:	0a13      	lsrs	r3, r2, #8
    ac08:	2b02      	cmp	r3, #2
    ac0a:	d02d      	beq.n	ac68 <usbdc_cb_ctl_req+0x298>
    ac0c:	2b03      	cmp	r3, #3
    ac0e:	d050      	beq.n	acb2 <usbdc_cb_ctl_req+0x2e2>
    ac10:	2b01      	cmp	r3, #1
    ac12:	d001      	beq.n	ac18 <usbdc_cb_ctl_req+0x248>
	return false;
    ac14:	2000      	movs	r0, #0
    ac16:	e6f3      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    ac18:	88e2      	ldrh	r2, [r4, #6]
    ac1a:	2a12      	cmp	r2, #18
    ac1c:	bf28      	it	cs
    ac1e:	2212      	movcs	r2, #18
    ac20:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ac22:	4b0c      	ldr	r3, [pc, #48]	; (ac54 <usbdc_cb_ctl_req+0x284>)
    ac24:	681b      	ldr	r3, [r3, #0]
    ac26:	2201      	movs	r2, #1
    ac28:	6859      	ldr	r1, [r3, #4]
    ac2a:	6818      	ldr	r0, [r3, #0]
    ac2c:	4b0b      	ldr	r3, [pc, #44]	; (ac5c <usbdc_cb_ctl_req+0x28c>)
    ac2e:	4798      	blx	r3
	if (!dev_desc) {
    ac30:	4601      	mov	r1, r0
    ac32:	2800      	cmp	r0, #0
    ac34:	f000 80c7 	beq.w	adc6 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ac38:	2300      	movs	r3, #0
    ac3a:	4622      	mov	r2, r4
    ac3c:	4628      	mov	r0, r5
    ac3e:	4c04      	ldr	r4, [pc, #16]	; (ac50 <usbdc_cb_ctl_req+0x280>)
    ac40:	47a0      	blx	r4
    ac42:	fab0 f080 	clz	r0, r0
    ac46:	0940      	lsrs	r0, r0, #5
    ac48:	e6da      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
    ac4a:	bf00      	nop
    ac4c:	0000a865 	.word	0x0000a865
    ac50:	0000a9b1 	.word	0x0000a9b1
    ac54:	20000ea4 	.word	0x20000ea4
    ac58:	0000af75 	.word	0x0000af75
    ac5c:	0000aef5 	.word	0x0000aef5
    ac60:	0000a819 	.word	0x0000a819
    ac64:	000058a5 	.word	0x000058a5
	uint16_t length   = req->wLength;
    ac68:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ac6a:	4b5b      	ldr	r3, [pc, #364]	; (add8 <usbdc_cb_ctl_req+0x408>)
    ac6c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ac6e:	681b      	ldr	r3, [r3, #0]
    ac70:	3201      	adds	r2, #1
    ac72:	b2d2      	uxtb	r2, r2
    ac74:	6859      	ldr	r1, [r3, #4]
    ac76:	6818      	ldr	r0, [r3, #0]
    ac78:	4b58      	ldr	r3, [pc, #352]	; (addc <usbdc_cb_ctl_req+0x40c>)
    ac7a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    ac7c:	4601      	mov	r1, r0
    ac7e:	2800      	cmp	r0, #0
    ac80:	f000 80a3 	beq.w	adca <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    ac84:	78c3      	ldrb	r3, [r0, #3]
    ac86:	7882      	ldrb	r2, [r0, #2]
    ac88:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    ac8c:	b292      	uxth	r2, r2
	if (length <= total_len) {
    ac8e:	4294      	cmp	r4, r2
    ac90:	d90d      	bls.n	acae <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ac92:	3e01      	subs	r6, #1
    ac94:	4226      	tst	r6, r4
    ac96:	bf0c      	ite	eq
    ac98:	2301      	moveq	r3, #1
    ac9a:	2300      	movne	r3, #0
		length = total_len;
    ac9c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    ac9e:	4622      	mov	r2, r4
    aca0:	4628      	mov	r0, r5
    aca2:	4c4f      	ldr	r4, [pc, #316]	; (ade0 <usbdc_cb_ctl_req+0x410>)
    aca4:	47a0      	blx	r4
    aca6:	fab0 f080 	clz	r0, r0
    acaa:	0940      	lsrs	r0, r0, #5
    acac:	e6a8      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    acae:	2300      	movs	r3, #0
    acb0:	e7f5      	b.n	ac9e <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    acb2:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    acb4:	4b48      	ldr	r3, [pc, #288]	; (add8 <usbdc_cb_ctl_req+0x408>)
    acb6:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    acb8:	681b      	ldr	r3, [r3, #0]
    acba:	b2d2      	uxtb	r2, r2
    acbc:	6859      	ldr	r1, [r3, #4]
    acbe:	6818      	ldr	r0, [r3, #0]
    acc0:	4b48      	ldr	r3, [pc, #288]	; (ade4 <usbdc_cb_ctl_req+0x414>)
    acc2:	4798      	blx	r3
	if (NULL == str_desc) {
    acc4:	4601      	mov	r1, r0
    acc6:	2800      	cmp	r0, #0
    acc8:	f000 8081 	beq.w	adce <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    accc:	7802      	ldrb	r2, [r0, #0]
    acce:	4294      	cmp	r4, r2
    acd0:	d90d      	bls.n	acee <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    acd2:	3e01      	subs	r6, #1
    acd4:	4226      	tst	r6, r4
    acd6:	bf0c      	ite	eq
    acd8:	2301      	moveq	r3, #1
    acda:	2300      	movne	r3, #0
		length = str_desc[0];
    acdc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    acde:	4622      	mov	r2, r4
    ace0:	4628      	mov	r0, r5
    ace2:	4c3f      	ldr	r4, [pc, #252]	; (ade0 <usbdc_cb_ctl_req+0x410>)
    ace4:	47a0      	blx	r4
    ace6:	fab0 f080 	clz	r0, r0
    acea:	0940      	lsrs	r0, r0, #5
    acec:	e688      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    acee:	2300      	movs	r3, #0
    acf0:	e7f5      	b.n	acde <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    acf2:	4939      	ldr	r1, [pc, #228]	; (add8 <usbdc_cb_ctl_req+0x408>)
    acf4:	694b      	ldr	r3, [r1, #20]
    acf6:	7eca      	ldrb	r2, [r1, #27]
    acf8:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    acfa:	2300      	movs	r3, #0
    acfc:	2201      	movs	r2, #1
    acfe:	6949      	ldr	r1, [r1, #20]
    ad00:	4628      	mov	r0, r5
    ad02:	4c37      	ldr	r4, [pc, #220]	; (ade0 <usbdc_cb_ctl_req+0x410>)
    ad04:	47a0      	blx	r4
		return true;
    ad06:	2001      	movs	r0, #1
    ad08:	e67a      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ad0a:	f003 031f 	and.w	r3, r3, #31
    ad0e:	2b01      	cmp	r3, #1
    ad10:	d903      	bls.n	ad1a <usbdc_cb_ctl_req+0x34a>
    ad12:	2b02      	cmp	r3, #2
    ad14:	d010      	beq.n	ad38 <usbdc_cb_ctl_req+0x368>
		return false;
    ad16:	2000      	movs	r0, #0
    ad18:	e672      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		st = 0;
    ad1a:	2300      	movs	r3, #0
    ad1c:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    ad1e:	492e      	ldr	r1, [pc, #184]	; (add8 <usbdc_cb_ctl_req+0x408>)
    ad20:	694b      	ldr	r3, [r1, #20]
    ad22:	f8bd 2000 	ldrh.w	r2, [sp]
    ad26:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ad28:	2300      	movs	r3, #0
    ad2a:	2202      	movs	r2, #2
    ad2c:	6949      	ldr	r1, [r1, #20]
    ad2e:	4628      	mov	r0, r5
    ad30:	4c2b      	ldr	r4, [pc, #172]	; (ade0 <usbdc_cb_ctl_req+0x410>)
    ad32:	47a0      	blx	r4
	return true;
    ad34:	2001      	movs	r0, #1
    ad36:	e663      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ad38:	88a0      	ldrh	r0, [r4, #4]
    ad3a:	2102      	movs	r1, #2
    ad3c:	b2c0      	uxtb	r0, r0
    ad3e:	4b2a      	ldr	r3, [pc, #168]	; (ade8 <usbdc_cb_ctl_req+0x418>)
    ad40:	4798      	blx	r3
		if (st < 0) {
    ad42:	2800      	cmp	r0, #0
    ad44:	db03      	blt.n	ad4e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    ad46:	f000 0001 	and.w	r0, r0, #1
    ad4a:	9000      	str	r0, [sp, #0]
    ad4c:	e7e7      	b.n	ad1e <usbdc_cb_ctl_req+0x34e>
			return false;
    ad4e:	2000      	movs	r0, #0
    ad50:	e656      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ad52:	4b21      	ldr	r3, [pc, #132]	; (add8 <usbdc_cb_ctl_req+0x408>)
    ad54:	7f5b      	ldrb	r3, [r3, #29]
    ad56:	88a2      	ldrh	r2, [r4, #4]
    ad58:	4113      	asrs	r3, r2
    ad5a:	f013 0f01 	tst.w	r3, #1
    ad5e:	d012      	beq.n	ad86 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ad60:	4b1d      	ldr	r3, [pc, #116]	; (add8 <usbdc_cb_ctl_req+0x408>)
    ad62:	691d      	ldr	r5, [r3, #16]
	return false;
    ad64:	2000      	movs	r0, #0
	while (NULL != func) {
    ad66:	2d00      	cmp	r5, #0
    ad68:	f43f ae4a 	beq.w	aa00 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ad6c:	2602      	movs	r6, #2
    ad6e:	686b      	ldr	r3, [r5, #4]
    ad70:	4622      	mov	r2, r4
    ad72:	4631      	mov	r1, r6
    ad74:	4628      	mov	r0, r5
    ad76:	4798      	blx	r3
    ad78:	2800      	cmp	r0, #0
    ad7a:	da0f      	bge.n	ad9c <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    ad7c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    ad7e:	2d00      	cmp	r5, #0
    ad80:	d1f5      	bne.n	ad6e <usbdc_cb_ctl_req+0x39e>
	return false;
    ad82:	2000      	movs	r0, #0
    ad84:	e63c      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    ad86:	4914      	ldr	r1, [pc, #80]	; (add8 <usbdc_cb_ctl_req+0x408>)
    ad88:	694b      	ldr	r3, [r1, #20]
    ad8a:	2000      	movs	r0, #0
    ad8c:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ad8e:	4603      	mov	r3, r0
    ad90:	2201      	movs	r2, #1
    ad92:	6949      	ldr	r1, [r1, #20]
    ad94:	4c12      	ldr	r4, [pc, #72]	; (ade0 <usbdc_cb_ctl_req+0x410>)
    ad96:	47a0      	blx	r4
		return true;
    ad98:	2001      	movs	r0, #1
    ad9a:	e631      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    ad9c:	490e      	ldr	r1, [pc, #56]	; (add8 <usbdc_cb_ctl_req+0x408>)
    ad9e:	694b      	ldr	r3, [r1, #20]
    ada0:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ada2:	2300      	movs	r3, #0
    ada4:	2201      	movs	r2, #1
    ada6:	6949      	ldr	r1, [r1, #20]
    ada8:	4618      	mov	r0, r3
    adaa:	4c0d      	ldr	r4, [pc, #52]	; (ade0 <usbdc_cb_ctl_req+0x410>)
    adac:	47a0      	blx	r4
			return true;
    adae:	2001      	movs	r0, #1
    adb0:	e626      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return true;
    adb2:	2001      	movs	r0, #1
    adb4:	e624      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    adb6:	2000      	movs	r0, #0
    adb8:	e622      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    adba:	2000      	movs	r0, #0
    adbc:	e620      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    adbe:	2000      	movs	r0, #0
    adc0:	e61e      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    adc2:	2000      	movs	r0, #0
    adc4:	e61c      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    adc6:	2000      	movs	r0, #0
    adc8:	e61a      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    adca:	2000      	movs	r0, #0
    adcc:	e618      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
		return false;
    adce:	2000      	movs	r0, #0
    add0:	e616      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
			return false;
    add2:	2000      	movs	r0, #0
    add4:	e614      	b.n	aa00 <usbdc_cb_ctl_req+0x30>
    add6:	bf00      	nop
    add8:	20000ea4 	.word	0x20000ea4
    addc:	0000af75 	.word	0x0000af75
    ade0:	0000a9b1 	.word	0x0000a9b1
    ade4:	0000afdd 	.word	0x0000afdd
    ade8:	000058a5 	.word	0x000058a5

0000adec <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    adec:	b508      	push	{r3, lr}
	switch (type) {
    adee:	2801      	cmp	r0, #1
    adf0:	d007      	beq.n	ae02 <usbdc_register_handler+0x16>
    adf2:	b110      	cbz	r0, adfa <usbdc_register_handler+0xe>
    adf4:	2802      	cmp	r0, #2
    adf6:	d008      	beq.n	ae0a <usbdc_register_handler+0x1e>
    adf8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    adfa:	4806      	ldr	r0, [pc, #24]	; (ae14 <usbdc_register_handler+0x28>)
    adfc:	4b06      	ldr	r3, [pc, #24]	; (ae18 <usbdc_register_handler+0x2c>)
    adfe:	4798      	blx	r3
		break;
    ae00:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    ae02:	4806      	ldr	r0, [pc, #24]	; (ae1c <usbdc_register_handler+0x30>)
    ae04:	4b04      	ldr	r3, [pc, #16]	; (ae18 <usbdc_register_handler+0x2c>)
    ae06:	4798      	blx	r3
		break;
    ae08:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    ae0a:	4805      	ldr	r0, [pc, #20]	; (ae20 <usbdc_register_handler+0x34>)
    ae0c:	4b02      	ldr	r3, [pc, #8]	; (ae18 <usbdc_register_handler+0x2c>)
    ae0e:	4798      	blx	r3
    ae10:	bd08      	pop	{r3, pc}
    ae12:	bf00      	nop
    ae14:	20000ea8 	.word	0x20000ea8
    ae18:	000059b5 	.word	0x000059b5
    ae1c:	20000eac 	.word	0x20000eac
    ae20:	20000eb0 	.word	0x20000eb0

0000ae24 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    ae24:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    ae26:	4605      	mov	r5, r0
    ae28:	f240 3255 	movw	r2, #853	; 0x355
    ae2c:	490c      	ldr	r1, [pc, #48]	; (ae60 <usbdc_init+0x3c>)
    ae2e:	3000      	adds	r0, #0
    ae30:	bf18      	it	ne
    ae32:	2001      	movne	r0, #1
    ae34:	4b0b      	ldr	r3, [pc, #44]	; (ae64 <usbdc_init+0x40>)
    ae36:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    ae38:	4b0b      	ldr	r3, [pc, #44]	; (ae68 <usbdc_init+0x44>)
    ae3a:	4798      	blx	r3
	if (rc < 0) {
    ae3c:	2800      	cmp	r0, #0
    ae3e:	db0e      	blt.n	ae5e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ae40:	4c0a      	ldr	r4, [pc, #40]	; (ae6c <usbdc_init+0x48>)
    ae42:	2220      	movs	r2, #32
    ae44:	2100      	movs	r1, #0
    ae46:	4620      	mov	r0, r4
    ae48:	4b09      	ldr	r3, [pc, #36]	; (ae70 <usbdc_init+0x4c>)
    ae4a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ae4c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    ae4e:	4909      	ldr	r1, [pc, #36]	; (ae74 <usbdc_init+0x50>)
    ae50:	2000      	movs	r0, #0
    ae52:	4c09      	ldr	r4, [pc, #36]	; (ae78 <usbdc_init+0x54>)
    ae54:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    ae56:	4909      	ldr	r1, [pc, #36]	; (ae7c <usbdc_init+0x58>)
    ae58:	2001      	movs	r0, #1
    ae5a:	47a0      	blx	r4

	return 0;
    ae5c:	2000      	movs	r0, #0
}
    ae5e:	bd38      	pop	{r3, r4, r5, pc}
    ae60:	0000d3f0 	.word	0x0000d3f0
    ae64:	00005959 	.word	0x00005959
    ae68:	0000560d 	.word	0x0000560d
    ae6c:	20000ea4 	.word	0x20000ea4
    ae70:	0000b9c3 	.word	0x0000b9c3
    ae74:	0000a8a5 	.word	0x0000a8a5
    ae78:	00005675 	.word	0x00005675
    ae7c:	0000a991 	.word	0x0000a991

0000ae80 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ae80:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    ae82:	4601      	mov	r1, r0
    ae84:	4801      	ldr	r0, [pc, #4]	; (ae8c <usbdc_register_function+0xc>)
    ae86:	4b02      	ldr	r3, [pc, #8]	; (ae90 <usbdc_register_function+0x10>)
    ae88:	4798      	blx	r3
    ae8a:	bd08      	pop	{r3, pc}
    ae8c:	20000eb4 	.word	0x20000eb4
    ae90:	000059b5 	.word	0x000059b5

0000ae94 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ae94:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    ae96:	4b0a      	ldr	r3, [pc, #40]	; (aec0 <usbdc_start+0x2c>)
    ae98:	7e9b      	ldrb	r3, [r3, #26]
    ae9a:	b95b      	cbnz	r3, aeb4 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    ae9c:	b168      	cbz	r0, aeba <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    ae9e:	4b08      	ldr	r3, [pc, #32]	; (aec0 <usbdc_start+0x2c>)
    aea0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    aea2:	6802      	ldr	r2, [r0, #0]
    aea4:	79d2      	ldrb	r2, [r2, #7]
    aea6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    aea8:	2201      	movs	r2, #1
    aeaa:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    aeac:	4b05      	ldr	r3, [pc, #20]	; (aec4 <usbdc_start+0x30>)
    aeae:	4798      	blx	r3
	return ERR_NONE;
    aeb0:	2000      	movs	r0, #0
    aeb2:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    aeb4:	f06f 0003 	mvn.w	r0, #3
    aeb8:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    aeba:	f06f 0008 	mvn.w	r0, #8
}
    aebe:	bd08      	pop	{r3, pc}
    aec0:	20000ea4 	.word	0x20000ea4
    aec4:	00005681 	.word	0x00005681

0000aec8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    aec8:	b508      	push	{r3, lr}
	usb_d_attach();
    aeca:	4b01      	ldr	r3, [pc, #4]	; (aed0 <usbdc_attach+0x8>)
    aecc:	4798      	blx	r3
    aece:	bd08      	pop	{r3, pc}
    aed0:	0000568d 	.word	0x0000568d

0000aed4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    aed4:	4b01      	ldr	r3, [pc, #4]	; (aedc <usbdc_get_ctrl_buffer+0x8>)
    aed6:	6958      	ldr	r0, [r3, #20]
    aed8:	4770      	bx	lr
    aeda:	bf00      	nop
    aedc:	20000ea4 	.word	0x20000ea4

0000aee0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    aee0:	4b03      	ldr	r3, [pc, #12]	; (aef0 <usbdc_get_state+0x10>)
    aee2:	7e98      	ldrb	r0, [r3, #26]
    aee4:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    aee8:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    aeea:	bf18      	it	ne
    aeec:	2010      	movne	r0, #16
    aeee:	4770      	bx	lr
    aef0:	20000ea4 	.word	0x20000ea4

0000aef4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    aef4:	4288      	cmp	r0, r1
    aef6:	d214      	bcs.n	af22 <usb_find_desc+0x2e>
	return desc[0];
    aef8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    aefa:	2b01      	cmp	r3, #1
    aefc:	d913      	bls.n	af26 <usb_find_desc+0x32>
{
    aefe:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    af00:	7844      	ldrb	r4, [r0, #1]
    af02:	4294      	cmp	r4, r2
    af04:	d00a      	beq.n	af1c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    af06:	4418      	add	r0, r3
	while (desc < eof) {
    af08:	4281      	cmp	r1, r0
    af0a:	d906      	bls.n	af1a <usb_find_desc+0x26>
	return desc[0];
    af0c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    af0e:	2b01      	cmp	r3, #1
    af10:	d90b      	bls.n	af2a <usb_find_desc+0x36>
	return desc[1];
    af12:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    af14:	4294      	cmp	r4, r2
    af16:	d1f6      	bne.n	af06 <usb_find_desc+0x12>
    af18:	e000      	b.n	af1c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    af1a:	2000      	movs	r0, #0
}
    af1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    af20:	4770      	bx	lr
	return NULL;
    af22:	2000      	movs	r0, #0
    af24:	4770      	bx	lr
		_desc_len_check();
    af26:	2000      	movs	r0, #0
    af28:	4770      	bx	lr
    af2a:	2000      	movs	r0, #0
    af2c:	e7f6      	b.n	af1c <usb_find_desc+0x28>

0000af2e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    af2e:	4288      	cmp	r0, r1
    af30:	d216      	bcs.n	af60 <usb_find_ep_desc+0x32>
	return desc[0];
    af32:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    af34:	2b01      	cmp	r3, #1
    af36:	d915      	bls.n	af64 <usb_find_ep_desc+0x36>
	return desc[1];
    af38:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    af3a:	2a04      	cmp	r2, #4
    af3c:	d014      	beq.n	af68 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    af3e:	2a05      	cmp	r2, #5
    af40:	d00b      	beq.n	af5a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    af42:	4418      	add	r0, r3
	while (desc < eof) {
    af44:	4281      	cmp	r1, r0
    af46:	d909      	bls.n	af5c <usb_find_ep_desc+0x2e>
	return desc[0];
    af48:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    af4a:	2b01      	cmp	r3, #1
    af4c:	d90e      	bls.n	af6c <usb_find_ep_desc+0x3e>
	return desc[1];
    af4e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    af50:	2a04      	cmp	r2, #4
    af52:	d00d      	beq.n	af70 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    af54:	2a05      	cmp	r2, #5
    af56:	d1f4      	bne.n	af42 <usb_find_ep_desc+0x14>
    af58:	e00b      	b.n	af72 <usb_find_ep_desc+0x44>
    af5a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    af5c:	2000      	movs	r0, #0
    af5e:	4770      	bx	lr
    af60:	2000      	movs	r0, #0
    af62:	4770      	bx	lr
		_desc_len_check();
    af64:	2000      	movs	r0, #0
    af66:	4770      	bx	lr
	return NULL;
    af68:	2000      	movs	r0, #0
    af6a:	4770      	bx	lr
		_desc_len_check();
    af6c:	2000      	movs	r0, #0
    af6e:	4770      	bx	lr
	return NULL;
    af70:	2000      	movs	r0, #0
}
    af72:	4770      	bx	lr

0000af74 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    af74:	b538      	push	{r3, r4, r5, lr}
    af76:	460c      	mov	r4, r1
    af78:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    af7a:	2202      	movs	r2, #2
    af7c:	4b16      	ldr	r3, [pc, #88]	; (afd8 <usb_find_cfg_desc+0x64>)
    af7e:	4798      	blx	r3
	if (!desc) {
    af80:	4603      	mov	r3, r0
    af82:	b1e8      	cbz	r0, afc0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    af84:	4284      	cmp	r4, r0
    af86:	d91d      	bls.n	afc4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    af88:	7802      	ldrb	r2, [r0, #0]
    af8a:	2a01      	cmp	r2, #1
    af8c:	d91c      	bls.n	afc8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    af8e:	7842      	ldrb	r2, [r0, #1]
    af90:	2a02      	cmp	r2, #2
    af92:	d11b      	bne.n	afcc <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    af94:	7942      	ldrb	r2, [r0, #5]
    af96:	42aa      	cmp	r2, r5
    af98:	d012      	beq.n	afc0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    af9a:	78d9      	ldrb	r1, [r3, #3]
    af9c:	789a      	ldrb	r2, [r3, #2]
    af9e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    afa2:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    afa6:	429c      	cmp	r4, r3
    afa8:	d909      	bls.n	afbe <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    afaa:	781a      	ldrb	r2, [r3, #0]
    afac:	2a01      	cmp	r2, #1
    afae:	d90f      	bls.n	afd0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    afb0:	785a      	ldrb	r2, [r3, #1]
    afb2:	2a02      	cmp	r2, #2
    afb4:	d10e      	bne.n	afd4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    afb6:	795a      	ldrb	r2, [r3, #5]
    afb8:	42aa      	cmp	r2, r5
    afba:	d1ee      	bne.n	af9a <usb_find_cfg_desc+0x26>
    afbc:	e000      	b.n	afc0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    afbe:	2300      	movs	r3, #0
}
    afc0:	4618      	mov	r0, r3
    afc2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    afc4:	2300      	movs	r3, #0
    afc6:	e7fb      	b.n	afc0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    afc8:	2300      	movs	r3, #0
    afca:	e7f9      	b.n	afc0 <usb_find_cfg_desc+0x4c>
	return NULL;
    afcc:	2300      	movs	r3, #0
    afce:	e7f7      	b.n	afc0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    afd0:	2300      	movs	r3, #0
    afd2:	e7f5      	b.n	afc0 <usb_find_cfg_desc+0x4c>
	return NULL;
    afd4:	2300      	movs	r3, #0
    afd6:	e7f3      	b.n	afc0 <usb_find_cfg_desc+0x4c>
    afd8:	0000aef5 	.word	0x0000aef5

0000afdc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    afdc:	4288      	cmp	r0, r1
    afde:	d217      	bcs.n	b010 <usb_find_str_desc+0x34>
{
    afe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afe4:	460d      	mov	r5, r1
    afe6:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    afe8:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    afea:	f04f 0803 	mov.w	r8, #3
    afee:	4f0c      	ldr	r7, [pc, #48]	; (b020 <usb_find_str_desc+0x44>)
    aff0:	4642      	mov	r2, r8
    aff2:	4629      	mov	r1, r5
    aff4:	47b8      	blx	r7
		if (desc) {
    aff6:	4603      	mov	r3, r0
    aff8:	b170      	cbz	r0, b018 <usb_find_str_desc+0x3c>
	return desc[0];
    affa:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    affc:	2801      	cmp	r0, #1
    affe:	d90a      	bls.n	b016 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    b000:	42a6      	cmp	r6, r4
    b002:	d009      	beq.n	b018 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    b004:	4418      	add	r0, r3
    b006:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    b008:	4285      	cmp	r5, r0
    b00a:	d8f1      	bhi.n	aff0 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    b00c:	2300      	movs	r3, #0
    b00e:	e003      	b.n	b018 <usb_find_str_desc+0x3c>
    b010:	2300      	movs	r3, #0
}
    b012:	4618      	mov	r0, r3
    b014:	4770      	bx	lr
			_desc_len_check();
    b016:	2300      	movs	r3, #0
}
    b018:	4618      	mov	r0, r3
    b01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b01e:	bf00      	nop
    b020:	0000aef5 	.word	0x0000aef5

0000b024 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    b024:	4b3a      	ldr	r3, [pc, #232]	; (b110 <hiddf_demo_sof_event+0xec>)
    b026:	791b      	ldrb	r3, [r3, #4]
    b028:	2b0a      	cmp	r3, #10
    b02a:	d803      	bhi.n	b034 <hiddf_demo_sof_event+0x10>
    b02c:	3301      	adds	r3, #1
    b02e:	4a38      	ldr	r2, [pc, #224]	; (b110 <hiddf_demo_sof_event+0xec>)
    b030:	7113      	strb	r3, [r2, #4]
    b032:	4770      	bx	lr
{
    b034:	b570      	push	{r4, r5, r6, lr}
    b036:	b084      	sub	sp, #16
		interval = 0;
    b038:	4b35      	ldr	r3, [pc, #212]	; (b110 <hiddf_demo_sof_event+0xec>)
    b03a:	2200      	movs	r2, #0
    b03c:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    b03e:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    b040:	a801      	add	r0, sp, #4
    b042:	4b34      	ldr	r3, [pc, #208]	; (b114 <hiddf_demo_sof_event+0xf0>)
    b044:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b046:	096b      	lsrs	r3, r5, #5
    b048:	4933      	ldr	r1, [pc, #204]	; (b118 <hiddf_demo_sof_event+0xf4>)
    b04a:	01db      	lsls	r3, r3, #7
    b04c:	18ca      	adds	r2, r1, r3
    b04e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b050:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b052:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b054:	405c      	eors	r4, r3
    b056:	400c      	ands	r4, r1
    b058:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b05a:	a801      	add	r0, sp, #4
    b05c:	4b2f      	ldr	r3, [pc, #188]	; (b11c <hiddf_demo_sof_event+0xf8>)
    b05e:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    b060:	f005 051f 	and.w	r5, r5, #31
    b064:	2301      	movs	r3, #1
    b066:	fa03 f505 	lsl.w	r5, r3, r5
    b06a:	4225      	tst	r5, r4
    b06c:	d040      	beq.n	b0f0 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    b06e:	4b28      	ldr	r3, [pc, #160]	; (b110 <hiddf_demo_sof_event+0xec>)
    b070:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    b072:	a802      	add	r0, sp, #8
    b074:	4b27      	ldr	r3, [pc, #156]	; (b114 <hiddf_demo_sof_event+0xf0>)
    b076:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b078:	096b      	lsrs	r3, r5, #5
    b07a:	4927      	ldr	r1, [pc, #156]	; (b118 <hiddf_demo_sof_event+0xf4>)
    b07c:	01db      	lsls	r3, r3, #7
    b07e:	18ca      	adds	r2, r1, r3
    b080:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b082:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b084:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b086:	405c      	eors	r4, r3
    b088:	400c      	ands	r4, r1
    b08a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b08c:	a802      	add	r0, sp, #8
    b08e:	4b23      	ldr	r3, [pc, #140]	; (b11c <hiddf_demo_sof_event+0xf8>)
    b090:	4798      	blx	r3
    b092:	f005 051f 	and.w	r5, r5, #31
    b096:	2301      	movs	r3, #1
    b098:	fa03 f505 	lsl.w	r5, r3, r5
    b09c:	4225      	tst	r5, r4
    b09e:	d02d      	beq.n	b0fc <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    b0a0:	4d1b      	ldr	r5, [pc, #108]	; (b110 <hiddf_demo_sof_event+0xec>)
    b0a2:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    b0a4:	a803      	add	r0, sp, #12
    b0a6:	4b1b      	ldr	r3, [pc, #108]	; (b114 <hiddf_demo_sof_event+0xf0>)
    b0a8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b0aa:	0973      	lsrs	r3, r6, #5
    b0ac:	491a      	ldr	r1, [pc, #104]	; (b118 <hiddf_demo_sof_event+0xf4>)
    b0ae:	01db      	lsls	r3, r3, #7
    b0b0:	18ca      	adds	r2, r1, r3
    b0b2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b0b4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b0b6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b0b8:	405c      	eors	r4, r3
    b0ba:	400c      	ands	r4, r1
    b0bc:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b0be:	a803      	add	r0, sp, #12
    b0c0:	4b16      	ldr	r3, [pc, #88]	; (b11c <hiddf_demo_sof_event+0xf8>)
    b0c2:	4798      	blx	r3
    b0c4:	f006 061f 	and.w	r6, r6, #31
    b0c8:	2301      	movs	r3, #1
    b0ca:	40b3      	lsls	r3, r6
    b0cc:	401c      	ands	r4, r3
    b0ce:	bf0c      	ite	eq
    b0d0:	2301      	moveq	r3, #1
    b0d2:	2300      	movne	r3, #0
    b0d4:	7d2a      	ldrb	r2, [r5, #20]
    b0d6:	429a      	cmp	r2, r3
    b0d8:	d008      	beq.n	b0ec <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    b0da:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    b0dc:	b19c      	cbz	r4, b106 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    b0de:	2200      	movs	r2, #0
    b0e0:	4b0f      	ldr	r3, [pc, #60]	; (b120 <hiddf_demo_sof_event+0xfc>)
    b0e2:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    b0e4:	2101      	movs	r1, #1
    b0e6:	480e      	ldr	r0, [pc, #56]	; (b120 <hiddf_demo_sof_event+0xfc>)
    b0e8:	4b0e      	ldr	r3, [pc, #56]	; (b124 <hiddf_demo_sof_event+0x100>)
    b0ea:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    b0ec:	b004      	add	sp, #16
    b0ee:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    b0f0:	4619      	mov	r1, r3
    b0f2:	f06f 0004 	mvn.w	r0, #4
    b0f6:	4b0c      	ldr	r3, [pc, #48]	; (b128 <hiddf_demo_sof_event+0x104>)
    b0f8:	4798      	blx	r3
    b0fa:	e7b8      	b.n	b06e <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    b0fc:	4619      	mov	r1, r3
    b0fe:	2005      	movs	r0, #5
    b100:	4b09      	ldr	r3, [pc, #36]	; (b128 <hiddf_demo_sof_event+0x104>)
    b102:	4798      	blx	r3
    b104:	e7cc      	b.n	b0a0 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    b106:	2201      	movs	r2, #1
    b108:	4b05      	ldr	r3, [pc, #20]	; (b120 <hiddf_demo_sof_event+0xfc>)
    b10a:	709a      	strb	r2, [r3, #2]
    b10c:	e7ea      	b.n	b0e4 <hiddf_demo_sof_event+0xc0>
    b10e:	bf00      	nop
    b110:	20000ec4 	.word	0x20000ec4
    b114:	000045cd 	.word	0x000045cd
    b118:	41008000 	.word	0x41008000
    b11c:	000045db 	.word	0x000045db
    b120:	200003b8 	.word	0x200003b8
    b124:	0000a271 	.word	0x0000a271
    b128:	0000a505 	.word	0x0000a505

0000b12c <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    b12c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b12e:	4805      	ldr	r0, [pc, #20]	; (b144 <composite_device_init+0x18>)
    b130:	4b05      	ldr	r3, [pc, #20]	; (b148 <composite_device_init+0x1c>)
    b132:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    b134:	4b05      	ldr	r3, [pc, #20]	; (b14c <composite_device_init+0x20>)
    b136:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    b138:	4b05      	ldr	r3, [pc, #20]	; (b150 <composite_device_init+0x24>)
    b13a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    b13c:	4b05      	ldr	r3, [pc, #20]	; (b154 <composite_device_init+0x28>)
    b13e:	4798      	blx	r3
    b140:	bd08      	pop	{r3, pc}
    b142:	bf00      	nop
    b144:	20000edc 	.word	0x20000edc
    b148:	0000ae25 	.word	0x0000ae25
    b14c:	00009fed 	.word	0x00009fed
    b150:	0000a4c1 	.word	0x0000a4c1
    b154:	0000a22d 	.word	0x0000a22d

0000b158 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    b158:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    b15a:	4803      	ldr	r0, [pc, #12]	; (b168 <composite_device_start+0x10>)
    b15c:	4b03      	ldr	r3, [pc, #12]	; (b16c <composite_device_start+0x14>)
    b15e:	4798      	blx	r3
	usbdc_attach();
    b160:	4b03      	ldr	r3, [pc, #12]	; (b170 <composite_device_start+0x18>)
    b162:	4798      	blx	r3
    b164:	bd08      	pop	{r3, pc}
    b166:	bf00      	nop
    b168:	200003c4 	.word	0x200003c4
    b16c:	0000ae95 	.word	0x0000ae95
    b170:	0000aec9 	.word	0x0000aec9

0000b174 <usb_init>:
		}
	}
}

void usb_init(void)
{
    b174:	b508      	push	{r3, lr}

	composite_device_init();
    b176:	4b01      	ldr	r3, [pc, #4]	; (b17c <usb_init+0x8>)
    b178:	4798      	blx	r3
    b17a:	bd08      	pop	{r3, pc}
    b17c:	0000b12d 	.word	0x0000b12d

0000b180 <__aeabi_drsub>:
    b180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b184:	e002      	b.n	b18c <__adddf3>
    b186:	bf00      	nop

0000b188 <__aeabi_dsub>:
    b188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b18c <__adddf3>:
    b18c:	b530      	push	{r4, r5, lr}
    b18e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b192:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b196:	ea94 0f05 	teq	r4, r5
    b19a:	bf08      	it	eq
    b19c:	ea90 0f02 	teqeq	r0, r2
    b1a0:	bf1f      	itttt	ne
    b1a2:	ea54 0c00 	orrsne.w	ip, r4, r0
    b1a6:	ea55 0c02 	orrsne.w	ip, r5, r2
    b1aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b1ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b1b2:	f000 80e2 	beq.w	b37a <__adddf3+0x1ee>
    b1b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b1ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b1be:	bfb8      	it	lt
    b1c0:	426d      	neglt	r5, r5
    b1c2:	dd0c      	ble.n	b1de <__adddf3+0x52>
    b1c4:	442c      	add	r4, r5
    b1c6:	ea80 0202 	eor.w	r2, r0, r2
    b1ca:	ea81 0303 	eor.w	r3, r1, r3
    b1ce:	ea82 0000 	eor.w	r0, r2, r0
    b1d2:	ea83 0101 	eor.w	r1, r3, r1
    b1d6:	ea80 0202 	eor.w	r2, r0, r2
    b1da:	ea81 0303 	eor.w	r3, r1, r3
    b1de:	2d36      	cmp	r5, #54	; 0x36
    b1e0:	bf88      	it	hi
    b1e2:	bd30      	pophi	{r4, r5, pc}
    b1e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b1e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b1ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b1f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b1f4:	d002      	beq.n	b1fc <__adddf3+0x70>
    b1f6:	4240      	negs	r0, r0
    b1f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b1fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b200:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b208:	d002      	beq.n	b210 <__adddf3+0x84>
    b20a:	4252      	negs	r2, r2
    b20c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b210:	ea94 0f05 	teq	r4, r5
    b214:	f000 80a7 	beq.w	b366 <__adddf3+0x1da>
    b218:	f1a4 0401 	sub.w	r4, r4, #1
    b21c:	f1d5 0e20 	rsbs	lr, r5, #32
    b220:	db0d      	blt.n	b23e <__adddf3+0xb2>
    b222:	fa02 fc0e 	lsl.w	ip, r2, lr
    b226:	fa22 f205 	lsr.w	r2, r2, r5
    b22a:	1880      	adds	r0, r0, r2
    b22c:	f141 0100 	adc.w	r1, r1, #0
    b230:	fa03 f20e 	lsl.w	r2, r3, lr
    b234:	1880      	adds	r0, r0, r2
    b236:	fa43 f305 	asr.w	r3, r3, r5
    b23a:	4159      	adcs	r1, r3
    b23c:	e00e      	b.n	b25c <__adddf3+0xd0>
    b23e:	f1a5 0520 	sub.w	r5, r5, #32
    b242:	f10e 0e20 	add.w	lr, lr, #32
    b246:	2a01      	cmp	r2, #1
    b248:	fa03 fc0e 	lsl.w	ip, r3, lr
    b24c:	bf28      	it	cs
    b24e:	f04c 0c02 	orrcs.w	ip, ip, #2
    b252:	fa43 f305 	asr.w	r3, r3, r5
    b256:	18c0      	adds	r0, r0, r3
    b258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b25c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b260:	d507      	bpl.n	b272 <__adddf3+0xe6>
    b262:	f04f 0e00 	mov.w	lr, #0
    b266:	f1dc 0c00 	rsbs	ip, ip, #0
    b26a:	eb7e 0000 	sbcs.w	r0, lr, r0
    b26e:	eb6e 0101 	sbc.w	r1, lr, r1
    b272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b276:	d31b      	bcc.n	b2b0 <__adddf3+0x124>
    b278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b27c:	d30c      	bcc.n	b298 <__adddf3+0x10c>
    b27e:	0849      	lsrs	r1, r1, #1
    b280:	ea5f 0030 	movs.w	r0, r0, rrx
    b284:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b288:	f104 0401 	add.w	r4, r4, #1
    b28c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b294:	f080 809a 	bcs.w	b3cc <__adddf3+0x240>
    b298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b29c:	bf08      	it	eq
    b29e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b2a2:	f150 0000 	adcs.w	r0, r0, #0
    b2a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b2aa:	ea41 0105 	orr.w	r1, r1, r5
    b2ae:	bd30      	pop	{r4, r5, pc}
    b2b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b2b4:	4140      	adcs	r0, r0
    b2b6:	eb41 0101 	adc.w	r1, r1, r1
    b2ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b2be:	f1a4 0401 	sub.w	r4, r4, #1
    b2c2:	d1e9      	bne.n	b298 <__adddf3+0x10c>
    b2c4:	f091 0f00 	teq	r1, #0
    b2c8:	bf04      	itt	eq
    b2ca:	4601      	moveq	r1, r0
    b2cc:	2000      	moveq	r0, #0
    b2ce:	fab1 f381 	clz	r3, r1
    b2d2:	bf08      	it	eq
    b2d4:	3320      	addeq	r3, #32
    b2d6:	f1a3 030b 	sub.w	r3, r3, #11
    b2da:	f1b3 0220 	subs.w	r2, r3, #32
    b2de:	da0c      	bge.n	b2fa <__adddf3+0x16e>
    b2e0:	320c      	adds	r2, #12
    b2e2:	dd08      	ble.n	b2f6 <__adddf3+0x16a>
    b2e4:	f102 0c14 	add.w	ip, r2, #20
    b2e8:	f1c2 020c 	rsb	r2, r2, #12
    b2ec:	fa01 f00c 	lsl.w	r0, r1, ip
    b2f0:	fa21 f102 	lsr.w	r1, r1, r2
    b2f4:	e00c      	b.n	b310 <__adddf3+0x184>
    b2f6:	f102 0214 	add.w	r2, r2, #20
    b2fa:	bfd8      	it	le
    b2fc:	f1c2 0c20 	rsble	ip, r2, #32
    b300:	fa01 f102 	lsl.w	r1, r1, r2
    b304:	fa20 fc0c 	lsr.w	ip, r0, ip
    b308:	bfdc      	itt	le
    b30a:	ea41 010c 	orrle.w	r1, r1, ip
    b30e:	4090      	lslle	r0, r2
    b310:	1ae4      	subs	r4, r4, r3
    b312:	bfa2      	ittt	ge
    b314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b318:	4329      	orrge	r1, r5
    b31a:	bd30      	popge	{r4, r5, pc}
    b31c:	ea6f 0404 	mvn.w	r4, r4
    b320:	3c1f      	subs	r4, #31
    b322:	da1c      	bge.n	b35e <__adddf3+0x1d2>
    b324:	340c      	adds	r4, #12
    b326:	dc0e      	bgt.n	b346 <__adddf3+0x1ba>
    b328:	f104 0414 	add.w	r4, r4, #20
    b32c:	f1c4 0220 	rsb	r2, r4, #32
    b330:	fa20 f004 	lsr.w	r0, r0, r4
    b334:	fa01 f302 	lsl.w	r3, r1, r2
    b338:	ea40 0003 	orr.w	r0, r0, r3
    b33c:	fa21 f304 	lsr.w	r3, r1, r4
    b340:	ea45 0103 	orr.w	r1, r5, r3
    b344:	bd30      	pop	{r4, r5, pc}
    b346:	f1c4 040c 	rsb	r4, r4, #12
    b34a:	f1c4 0220 	rsb	r2, r4, #32
    b34e:	fa20 f002 	lsr.w	r0, r0, r2
    b352:	fa01 f304 	lsl.w	r3, r1, r4
    b356:	ea40 0003 	orr.w	r0, r0, r3
    b35a:	4629      	mov	r1, r5
    b35c:	bd30      	pop	{r4, r5, pc}
    b35e:	fa21 f004 	lsr.w	r0, r1, r4
    b362:	4629      	mov	r1, r5
    b364:	bd30      	pop	{r4, r5, pc}
    b366:	f094 0f00 	teq	r4, #0
    b36a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b36e:	bf06      	itte	eq
    b370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b374:	3401      	addeq	r4, #1
    b376:	3d01      	subne	r5, #1
    b378:	e74e      	b.n	b218 <__adddf3+0x8c>
    b37a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b37e:	bf18      	it	ne
    b380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b384:	d029      	beq.n	b3da <__adddf3+0x24e>
    b386:	ea94 0f05 	teq	r4, r5
    b38a:	bf08      	it	eq
    b38c:	ea90 0f02 	teqeq	r0, r2
    b390:	d005      	beq.n	b39e <__adddf3+0x212>
    b392:	ea54 0c00 	orrs.w	ip, r4, r0
    b396:	bf04      	itt	eq
    b398:	4619      	moveq	r1, r3
    b39a:	4610      	moveq	r0, r2
    b39c:	bd30      	pop	{r4, r5, pc}
    b39e:	ea91 0f03 	teq	r1, r3
    b3a2:	bf1e      	ittt	ne
    b3a4:	2100      	movne	r1, #0
    b3a6:	2000      	movne	r0, #0
    b3a8:	bd30      	popne	{r4, r5, pc}
    b3aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b3ae:	d105      	bne.n	b3bc <__adddf3+0x230>
    b3b0:	0040      	lsls	r0, r0, #1
    b3b2:	4149      	adcs	r1, r1
    b3b4:	bf28      	it	cs
    b3b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b3ba:	bd30      	pop	{r4, r5, pc}
    b3bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b3c0:	bf3c      	itt	cc
    b3c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b3c6:	bd30      	popcc	{r4, r5, pc}
    b3c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b3cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b3d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b3d4:	f04f 0000 	mov.w	r0, #0
    b3d8:	bd30      	pop	{r4, r5, pc}
    b3da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b3de:	bf1a      	itte	ne
    b3e0:	4619      	movne	r1, r3
    b3e2:	4610      	movne	r0, r2
    b3e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b3e8:	bf1c      	itt	ne
    b3ea:	460b      	movne	r3, r1
    b3ec:	4602      	movne	r2, r0
    b3ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b3f2:	bf06      	itte	eq
    b3f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b3f8:	ea91 0f03 	teqeq	r1, r3
    b3fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b400:	bd30      	pop	{r4, r5, pc}
    b402:	bf00      	nop

0000b404 <__aeabi_ui2d>:
    b404:	f090 0f00 	teq	r0, #0
    b408:	bf04      	itt	eq
    b40a:	2100      	moveq	r1, #0
    b40c:	4770      	bxeq	lr
    b40e:	b530      	push	{r4, r5, lr}
    b410:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b414:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b418:	f04f 0500 	mov.w	r5, #0
    b41c:	f04f 0100 	mov.w	r1, #0
    b420:	e750      	b.n	b2c4 <__adddf3+0x138>
    b422:	bf00      	nop

0000b424 <__aeabi_i2d>:
    b424:	f090 0f00 	teq	r0, #0
    b428:	bf04      	itt	eq
    b42a:	2100      	moveq	r1, #0
    b42c:	4770      	bxeq	lr
    b42e:	b530      	push	{r4, r5, lr}
    b430:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b434:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b43c:	bf48      	it	mi
    b43e:	4240      	negmi	r0, r0
    b440:	f04f 0100 	mov.w	r1, #0
    b444:	e73e      	b.n	b2c4 <__adddf3+0x138>
    b446:	bf00      	nop

0000b448 <__aeabi_f2d>:
    b448:	0042      	lsls	r2, r0, #1
    b44a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b44e:	ea4f 0131 	mov.w	r1, r1, rrx
    b452:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b456:	bf1f      	itttt	ne
    b458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b45c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b464:	4770      	bxne	lr
    b466:	f092 0f00 	teq	r2, #0
    b46a:	bf14      	ite	ne
    b46c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b470:	4770      	bxeq	lr
    b472:	b530      	push	{r4, r5, lr}
    b474:	f44f 7460 	mov.w	r4, #896	; 0x380
    b478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b47c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b480:	e720      	b.n	b2c4 <__adddf3+0x138>
    b482:	bf00      	nop

0000b484 <__aeabi_ul2d>:
    b484:	ea50 0201 	orrs.w	r2, r0, r1
    b488:	bf08      	it	eq
    b48a:	4770      	bxeq	lr
    b48c:	b530      	push	{r4, r5, lr}
    b48e:	f04f 0500 	mov.w	r5, #0
    b492:	e00a      	b.n	b4aa <__aeabi_l2d+0x16>

0000b494 <__aeabi_l2d>:
    b494:	ea50 0201 	orrs.w	r2, r0, r1
    b498:	bf08      	it	eq
    b49a:	4770      	bxeq	lr
    b49c:	b530      	push	{r4, r5, lr}
    b49e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b4a2:	d502      	bpl.n	b4aa <__aeabi_l2d+0x16>
    b4a4:	4240      	negs	r0, r0
    b4a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b4aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b4ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b4b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b4b6:	f43f aedc 	beq.w	b272 <__adddf3+0xe6>
    b4ba:	f04f 0203 	mov.w	r2, #3
    b4be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b4c2:	bf18      	it	ne
    b4c4:	3203      	addne	r2, #3
    b4c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b4ca:	bf18      	it	ne
    b4cc:	3203      	addne	r2, #3
    b4ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b4d2:	f1c2 0320 	rsb	r3, r2, #32
    b4d6:	fa00 fc03 	lsl.w	ip, r0, r3
    b4da:	fa20 f002 	lsr.w	r0, r0, r2
    b4de:	fa01 fe03 	lsl.w	lr, r1, r3
    b4e2:	ea40 000e 	orr.w	r0, r0, lr
    b4e6:	fa21 f102 	lsr.w	r1, r1, r2
    b4ea:	4414      	add	r4, r2
    b4ec:	e6c1      	b.n	b272 <__adddf3+0xe6>
    b4ee:	bf00      	nop

0000b4f0 <__aeabi_dmul>:
    b4f0:	b570      	push	{r4, r5, r6, lr}
    b4f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b4f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b4fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b4fe:	bf1d      	ittte	ne
    b500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b504:	ea94 0f0c 	teqne	r4, ip
    b508:	ea95 0f0c 	teqne	r5, ip
    b50c:	f000 f8de 	bleq	b6cc <__aeabi_dmul+0x1dc>
    b510:	442c      	add	r4, r5
    b512:	ea81 0603 	eor.w	r6, r1, r3
    b516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b51a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b51e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b522:	bf18      	it	ne
    b524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b52c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b530:	d038      	beq.n	b5a4 <__aeabi_dmul+0xb4>
    b532:	fba0 ce02 	umull	ip, lr, r0, r2
    b536:	f04f 0500 	mov.w	r5, #0
    b53a:	fbe1 e502 	umlal	lr, r5, r1, r2
    b53e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b542:	fbe0 e503 	umlal	lr, r5, r0, r3
    b546:	f04f 0600 	mov.w	r6, #0
    b54a:	fbe1 5603 	umlal	r5, r6, r1, r3
    b54e:	f09c 0f00 	teq	ip, #0
    b552:	bf18      	it	ne
    b554:	f04e 0e01 	orrne.w	lr, lr, #1
    b558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b55c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b564:	d204      	bcs.n	b570 <__aeabi_dmul+0x80>
    b566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b56a:	416d      	adcs	r5, r5
    b56c:	eb46 0606 	adc.w	r6, r6, r6
    b570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b57c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b588:	bf88      	it	hi
    b58a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b58e:	d81e      	bhi.n	b5ce <__aeabi_dmul+0xde>
    b590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b594:	bf08      	it	eq
    b596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b59a:	f150 0000 	adcs.w	r0, r0, #0
    b59e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b5a2:	bd70      	pop	{r4, r5, r6, pc}
    b5a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b5a8:	ea46 0101 	orr.w	r1, r6, r1
    b5ac:	ea40 0002 	orr.w	r0, r0, r2
    b5b0:	ea81 0103 	eor.w	r1, r1, r3
    b5b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b5b8:	bfc2      	ittt	gt
    b5ba:	ebd4 050c 	rsbsgt	r5, r4, ip
    b5be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b5c2:	bd70      	popgt	{r4, r5, r6, pc}
    b5c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b5c8:	f04f 0e00 	mov.w	lr, #0
    b5cc:	3c01      	subs	r4, #1
    b5ce:	f300 80ab 	bgt.w	b728 <__aeabi_dmul+0x238>
    b5d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b5d6:	bfde      	ittt	le
    b5d8:	2000      	movle	r0, #0
    b5da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b5de:	bd70      	pople	{r4, r5, r6, pc}
    b5e0:	f1c4 0400 	rsb	r4, r4, #0
    b5e4:	3c20      	subs	r4, #32
    b5e6:	da35      	bge.n	b654 <__aeabi_dmul+0x164>
    b5e8:	340c      	adds	r4, #12
    b5ea:	dc1b      	bgt.n	b624 <__aeabi_dmul+0x134>
    b5ec:	f104 0414 	add.w	r4, r4, #20
    b5f0:	f1c4 0520 	rsb	r5, r4, #32
    b5f4:	fa00 f305 	lsl.w	r3, r0, r5
    b5f8:	fa20 f004 	lsr.w	r0, r0, r4
    b5fc:	fa01 f205 	lsl.w	r2, r1, r5
    b600:	ea40 0002 	orr.w	r0, r0, r2
    b604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b60c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b610:	fa21 f604 	lsr.w	r6, r1, r4
    b614:	eb42 0106 	adc.w	r1, r2, r6
    b618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b61c:	bf08      	it	eq
    b61e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b622:	bd70      	pop	{r4, r5, r6, pc}
    b624:	f1c4 040c 	rsb	r4, r4, #12
    b628:	f1c4 0520 	rsb	r5, r4, #32
    b62c:	fa00 f304 	lsl.w	r3, r0, r4
    b630:	fa20 f005 	lsr.w	r0, r0, r5
    b634:	fa01 f204 	lsl.w	r2, r1, r4
    b638:	ea40 0002 	orr.w	r0, r0, r2
    b63c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b644:	f141 0100 	adc.w	r1, r1, #0
    b648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b64c:	bf08      	it	eq
    b64e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b652:	bd70      	pop	{r4, r5, r6, pc}
    b654:	f1c4 0520 	rsb	r5, r4, #32
    b658:	fa00 f205 	lsl.w	r2, r0, r5
    b65c:	ea4e 0e02 	orr.w	lr, lr, r2
    b660:	fa20 f304 	lsr.w	r3, r0, r4
    b664:	fa01 f205 	lsl.w	r2, r1, r5
    b668:	ea43 0302 	orr.w	r3, r3, r2
    b66c:	fa21 f004 	lsr.w	r0, r1, r4
    b670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b674:	fa21 f204 	lsr.w	r2, r1, r4
    b678:	ea20 0002 	bic.w	r0, r0, r2
    b67c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b684:	bf08      	it	eq
    b686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b68a:	bd70      	pop	{r4, r5, r6, pc}
    b68c:	f094 0f00 	teq	r4, #0
    b690:	d10f      	bne.n	b6b2 <__aeabi_dmul+0x1c2>
    b692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b696:	0040      	lsls	r0, r0, #1
    b698:	eb41 0101 	adc.w	r1, r1, r1
    b69c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b6a0:	bf08      	it	eq
    b6a2:	3c01      	subeq	r4, #1
    b6a4:	d0f7      	beq.n	b696 <__aeabi_dmul+0x1a6>
    b6a6:	ea41 0106 	orr.w	r1, r1, r6
    b6aa:	f095 0f00 	teq	r5, #0
    b6ae:	bf18      	it	ne
    b6b0:	4770      	bxne	lr
    b6b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b6b6:	0052      	lsls	r2, r2, #1
    b6b8:	eb43 0303 	adc.w	r3, r3, r3
    b6bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b6c0:	bf08      	it	eq
    b6c2:	3d01      	subeq	r5, #1
    b6c4:	d0f7      	beq.n	b6b6 <__aeabi_dmul+0x1c6>
    b6c6:	ea43 0306 	orr.w	r3, r3, r6
    b6ca:	4770      	bx	lr
    b6cc:	ea94 0f0c 	teq	r4, ip
    b6d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b6d4:	bf18      	it	ne
    b6d6:	ea95 0f0c 	teqne	r5, ip
    b6da:	d00c      	beq.n	b6f6 <__aeabi_dmul+0x206>
    b6dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b6e0:	bf18      	it	ne
    b6e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b6e6:	d1d1      	bne.n	b68c <__aeabi_dmul+0x19c>
    b6e8:	ea81 0103 	eor.w	r1, r1, r3
    b6ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b6f0:	f04f 0000 	mov.w	r0, #0
    b6f4:	bd70      	pop	{r4, r5, r6, pc}
    b6f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b6fa:	bf06      	itte	eq
    b6fc:	4610      	moveq	r0, r2
    b6fe:	4619      	moveq	r1, r3
    b700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b704:	d019      	beq.n	b73a <__aeabi_dmul+0x24a>
    b706:	ea94 0f0c 	teq	r4, ip
    b70a:	d102      	bne.n	b712 <__aeabi_dmul+0x222>
    b70c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b710:	d113      	bne.n	b73a <__aeabi_dmul+0x24a>
    b712:	ea95 0f0c 	teq	r5, ip
    b716:	d105      	bne.n	b724 <__aeabi_dmul+0x234>
    b718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b71c:	bf1c      	itt	ne
    b71e:	4610      	movne	r0, r2
    b720:	4619      	movne	r1, r3
    b722:	d10a      	bne.n	b73a <__aeabi_dmul+0x24a>
    b724:	ea81 0103 	eor.w	r1, r1, r3
    b728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b72c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b734:	f04f 0000 	mov.w	r0, #0
    b738:	bd70      	pop	{r4, r5, r6, pc}
    b73a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b73e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b742:	bd70      	pop	{r4, r5, r6, pc}

0000b744 <__aeabi_ddiv>:
    b744:	b570      	push	{r4, r5, r6, lr}
    b746:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b74a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b74e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b752:	bf1d      	ittte	ne
    b754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b758:	ea94 0f0c 	teqne	r4, ip
    b75c:	ea95 0f0c 	teqne	r5, ip
    b760:	f000 f8a7 	bleq	b8b2 <__aeabi_ddiv+0x16e>
    b764:	eba4 0405 	sub.w	r4, r4, r5
    b768:	ea81 0e03 	eor.w	lr, r1, r3
    b76c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b770:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b774:	f000 8088 	beq.w	b888 <__aeabi_ddiv+0x144>
    b778:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b77c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b788:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b78c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b794:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b79c:	429d      	cmp	r5, r3
    b79e:	bf08      	it	eq
    b7a0:	4296      	cmpeq	r6, r2
    b7a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b7a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b7aa:	d202      	bcs.n	b7b2 <__aeabi_ddiv+0x6e>
    b7ac:	085b      	lsrs	r3, r3, #1
    b7ae:	ea4f 0232 	mov.w	r2, r2, rrx
    b7b2:	1ab6      	subs	r6, r6, r2
    b7b4:	eb65 0503 	sbc.w	r5, r5, r3
    b7b8:	085b      	lsrs	r3, r3, #1
    b7ba:	ea4f 0232 	mov.w	r2, r2, rrx
    b7be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b7c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b7c6:	ebb6 0e02 	subs.w	lr, r6, r2
    b7ca:	eb75 0e03 	sbcs.w	lr, r5, r3
    b7ce:	bf22      	ittt	cs
    b7d0:	1ab6      	subcs	r6, r6, r2
    b7d2:	4675      	movcs	r5, lr
    b7d4:	ea40 000c 	orrcs.w	r0, r0, ip
    b7d8:	085b      	lsrs	r3, r3, #1
    b7da:	ea4f 0232 	mov.w	r2, r2, rrx
    b7de:	ebb6 0e02 	subs.w	lr, r6, r2
    b7e2:	eb75 0e03 	sbcs.w	lr, r5, r3
    b7e6:	bf22      	ittt	cs
    b7e8:	1ab6      	subcs	r6, r6, r2
    b7ea:	4675      	movcs	r5, lr
    b7ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b7f0:	085b      	lsrs	r3, r3, #1
    b7f2:	ea4f 0232 	mov.w	r2, r2, rrx
    b7f6:	ebb6 0e02 	subs.w	lr, r6, r2
    b7fa:	eb75 0e03 	sbcs.w	lr, r5, r3
    b7fe:	bf22      	ittt	cs
    b800:	1ab6      	subcs	r6, r6, r2
    b802:	4675      	movcs	r5, lr
    b804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b808:	085b      	lsrs	r3, r3, #1
    b80a:	ea4f 0232 	mov.w	r2, r2, rrx
    b80e:	ebb6 0e02 	subs.w	lr, r6, r2
    b812:	eb75 0e03 	sbcs.w	lr, r5, r3
    b816:	bf22      	ittt	cs
    b818:	1ab6      	subcs	r6, r6, r2
    b81a:	4675      	movcs	r5, lr
    b81c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b820:	ea55 0e06 	orrs.w	lr, r5, r6
    b824:	d018      	beq.n	b858 <__aeabi_ddiv+0x114>
    b826:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b82a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b82e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b83a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b83e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b842:	d1c0      	bne.n	b7c6 <__aeabi_ddiv+0x82>
    b844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b848:	d10b      	bne.n	b862 <__aeabi_ddiv+0x11e>
    b84a:	ea41 0100 	orr.w	r1, r1, r0
    b84e:	f04f 0000 	mov.w	r0, #0
    b852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b856:	e7b6      	b.n	b7c6 <__aeabi_ddiv+0x82>
    b858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b85c:	bf04      	itt	eq
    b85e:	4301      	orreq	r1, r0
    b860:	2000      	moveq	r0, #0
    b862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b866:	bf88      	it	hi
    b868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b86c:	f63f aeaf 	bhi.w	b5ce <__aeabi_dmul+0xde>
    b870:	ebb5 0c03 	subs.w	ip, r5, r3
    b874:	bf04      	itt	eq
    b876:	ebb6 0c02 	subseq.w	ip, r6, r2
    b87a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b87e:	f150 0000 	adcs.w	r0, r0, #0
    b882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b886:	bd70      	pop	{r4, r5, r6, pc}
    b888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b88c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b894:	bfc2      	ittt	gt
    b896:	ebd4 050c 	rsbsgt	r5, r4, ip
    b89a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b89e:	bd70      	popgt	{r4, r5, r6, pc}
    b8a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b8a4:	f04f 0e00 	mov.w	lr, #0
    b8a8:	3c01      	subs	r4, #1
    b8aa:	e690      	b.n	b5ce <__aeabi_dmul+0xde>
    b8ac:	ea45 0e06 	orr.w	lr, r5, r6
    b8b0:	e68d      	b.n	b5ce <__aeabi_dmul+0xde>
    b8b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b8b6:	ea94 0f0c 	teq	r4, ip
    b8ba:	bf08      	it	eq
    b8bc:	ea95 0f0c 	teqeq	r5, ip
    b8c0:	f43f af3b 	beq.w	b73a <__aeabi_dmul+0x24a>
    b8c4:	ea94 0f0c 	teq	r4, ip
    b8c8:	d10a      	bne.n	b8e0 <__aeabi_ddiv+0x19c>
    b8ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b8ce:	f47f af34 	bne.w	b73a <__aeabi_dmul+0x24a>
    b8d2:	ea95 0f0c 	teq	r5, ip
    b8d6:	f47f af25 	bne.w	b724 <__aeabi_dmul+0x234>
    b8da:	4610      	mov	r0, r2
    b8dc:	4619      	mov	r1, r3
    b8de:	e72c      	b.n	b73a <__aeabi_dmul+0x24a>
    b8e0:	ea95 0f0c 	teq	r5, ip
    b8e4:	d106      	bne.n	b8f4 <__aeabi_ddiv+0x1b0>
    b8e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b8ea:	f43f aefd 	beq.w	b6e8 <__aeabi_dmul+0x1f8>
    b8ee:	4610      	mov	r0, r2
    b8f0:	4619      	mov	r1, r3
    b8f2:	e722      	b.n	b73a <__aeabi_dmul+0x24a>
    b8f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b8f8:	bf18      	it	ne
    b8fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b8fe:	f47f aec5 	bne.w	b68c <__aeabi_dmul+0x19c>
    b902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b906:	f47f af0d 	bne.w	b724 <__aeabi_dmul+0x234>
    b90a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b90e:	f47f aeeb 	bne.w	b6e8 <__aeabi_dmul+0x1f8>
    b912:	e712      	b.n	b73a <__aeabi_dmul+0x24a>

0000b914 <__aeabi_d2uiz>:
    b914:	004a      	lsls	r2, r1, #1
    b916:	d211      	bcs.n	b93c <__aeabi_d2uiz+0x28>
    b918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b91c:	d211      	bcs.n	b942 <__aeabi_d2uiz+0x2e>
    b91e:	d50d      	bpl.n	b93c <__aeabi_d2uiz+0x28>
    b920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b928:	d40e      	bmi.n	b948 <__aeabi_d2uiz+0x34>
    b92a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b92e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b936:	fa23 f002 	lsr.w	r0, r3, r2
    b93a:	4770      	bx	lr
    b93c:	f04f 0000 	mov.w	r0, #0
    b940:	4770      	bx	lr
    b942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b946:	d102      	bne.n	b94e <__aeabi_d2uiz+0x3a>
    b948:	f04f 30ff 	mov.w	r0, #4294967295
    b94c:	4770      	bx	lr
    b94e:	f04f 0000 	mov.w	r0, #0
    b952:	4770      	bx	lr

0000b954 <__libc_init_array>:
    b954:	b570      	push	{r4, r5, r6, lr}
    b956:	4e0d      	ldr	r6, [pc, #52]	; (b98c <__libc_init_array+0x38>)
    b958:	4c0d      	ldr	r4, [pc, #52]	; (b990 <__libc_init_array+0x3c>)
    b95a:	1ba4      	subs	r4, r4, r6
    b95c:	10a4      	asrs	r4, r4, #2
    b95e:	2500      	movs	r5, #0
    b960:	42a5      	cmp	r5, r4
    b962:	d109      	bne.n	b978 <__libc_init_array+0x24>
    b964:	4e0b      	ldr	r6, [pc, #44]	; (b994 <__libc_init_array+0x40>)
    b966:	4c0c      	ldr	r4, [pc, #48]	; (b998 <__libc_init_array+0x44>)
    b968:	f001 fd9a 	bl	d4a0 <_init>
    b96c:	1ba4      	subs	r4, r4, r6
    b96e:	10a4      	asrs	r4, r4, #2
    b970:	2500      	movs	r5, #0
    b972:	42a5      	cmp	r5, r4
    b974:	d105      	bne.n	b982 <__libc_init_array+0x2e>
    b976:	bd70      	pop	{r4, r5, r6, pc}
    b978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b97c:	4798      	blx	r3
    b97e:	3501      	adds	r5, #1
    b980:	e7ee      	b.n	b960 <__libc_init_array+0xc>
    b982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b986:	4798      	blx	r3
    b988:	3501      	adds	r5, #1
    b98a:	e7f2      	b.n	b972 <__libc_init_array+0x1e>
    b98c:	0000d4ac 	.word	0x0000d4ac
    b990:	0000d4ac 	.word	0x0000d4ac
    b994:	0000d4ac 	.word	0x0000d4ac
    b998:	0000d4b0 	.word	0x0000d4b0

0000b99c <malloc>:
    b99c:	4b02      	ldr	r3, [pc, #8]	; (b9a8 <malloc+0xc>)
    b99e:	4601      	mov	r1, r0
    b9a0:	6818      	ldr	r0, [r3, #0]
    b9a2:	f000 b865 	b.w	ba70 <_malloc_r>
    b9a6:	bf00      	nop
    b9a8:	20000558 	.word	0x20000558

0000b9ac <memcpy>:
    b9ac:	b510      	push	{r4, lr}
    b9ae:	1e43      	subs	r3, r0, #1
    b9b0:	440a      	add	r2, r1
    b9b2:	4291      	cmp	r1, r2
    b9b4:	d100      	bne.n	b9b8 <memcpy+0xc>
    b9b6:	bd10      	pop	{r4, pc}
    b9b8:	f811 4b01 	ldrb.w	r4, [r1], #1
    b9bc:	f803 4f01 	strb.w	r4, [r3, #1]!
    b9c0:	e7f7      	b.n	b9b2 <memcpy+0x6>

0000b9c2 <memset>:
    b9c2:	4402      	add	r2, r0
    b9c4:	4603      	mov	r3, r0
    b9c6:	4293      	cmp	r3, r2
    b9c8:	d100      	bne.n	b9cc <memset+0xa>
    b9ca:	4770      	bx	lr
    b9cc:	f803 1b01 	strb.w	r1, [r3], #1
    b9d0:	e7f9      	b.n	b9c6 <memset+0x4>
	...

0000b9d4 <_free_r>:
    b9d4:	b538      	push	{r3, r4, r5, lr}
    b9d6:	4605      	mov	r5, r0
    b9d8:	2900      	cmp	r1, #0
    b9da:	d045      	beq.n	ba68 <_free_r+0x94>
    b9dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b9e0:	1f0c      	subs	r4, r1, #4
    b9e2:	2b00      	cmp	r3, #0
    b9e4:	bfb8      	it	lt
    b9e6:	18e4      	addlt	r4, r4, r3
    b9e8:	f000 fc96 	bl	c318 <__malloc_lock>
    b9ec:	4a1f      	ldr	r2, [pc, #124]	; (ba6c <_free_r+0x98>)
    b9ee:	6813      	ldr	r3, [r2, #0]
    b9f0:	4610      	mov	r0, r2
    b9f2:	b933      	cbnz	r3, ba02 <_free_r+0x2e>
    b9f4:	6063      	str	r3, [r4, #4]
    b9f6:	6014      	str	r4, [r2, #0]
    b9f8:	4628      	mov	r0, r5
    b9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b9fe:	f000 bc8c 	b.w	c31a <__malloc_unlock>
    ba02:	42a3      	cmp	r3, r4
    ba04:	d90c      	bls.n	ba20 <_free_r+0x4c>
    ba06:	6821      	ldr	r1, [r4, #0]
    ba08:	1862      	adds	r2, r4, r1
    ba0a:	4293      	cmp	r3, r2
    ba0c:	bf04      	itt	eq
    ba0e:	681a      	ldreq	r2, [r3, #0]
    ba10:	685b      	ldreq	r3, [r3, #4]
    ba12:	6063      	str	r3, [r4, #4]
    ba14:	bf04      	itt	eq
    ba16:	1852      	addeq	r2, r2, r1
    ba18:	6022      	streq	r2, [r4, #0]
    ba1a:	6004      	str	r4, [r0, #0]
    ba1c:	e7ec      	b.n	b9f8 <_free_r+0x24>
    ba1e:	4613      	mov	r3, r2
    ba20:	685a      	ldr	r2, [r3, #4]
    ba22:	b10a      	cbz	r2, ba28 <_free_r+0x54>
    ba24:	42a2      	cmp	r2, r4
    ba26:	d9fa      	bls.n	ba1e <_free_r+0x4a>
    ba28:	6819      	ldr	r1, [r3, #0]
    ba2a:	1858      	adds	r0, r3, r1
    ba2c:	42a0      	cmp	r0, r4
    ba2e:	d10b      	bne.n	ba48 <_free_r+0x74>
    ba30:	6820      	ldr	r0, [r4, #0]
    ba32:	4401      	add	r1, r0
    ba34:	1858      	adds	r0, r3, r1
    ba36:	4282      	cmp	r2, r0
    ba38:	6019      	str	r1, [r3, #0]
    ba3a:	d1dd      	bne.n	b9f8 <_free_r+0x24>
    ba3c:	6810      	ldr	r0, [r2, #0]
    ba3e:	6852      	ldr	r2, [r2, #4]
    ba40:	605a      	str	r2, [r3, #4]
    ba42:	4401      	add	r1, r0
    ba44:	6019      	str	r1, [r3, #0]
    ba46:	e7d7      	b.n	b9f8 <_free_r+0x24>
    ba48:	d902      	bls.n	ba50 <_free_r+0x7c>
    ba4a:	230c      	movs	r3, #12
    ba4c:	602b      	str	r3, [r5, #0]
    ba4e:	e7d3      	b.n	b9f8 <_free_r+0x24>
    ba50:	6820      	ldr	r0, [r4, #0]
    ba52:	1821      	adds	r1, r4, r0
    ba54:	428a      	cmp	r2, r1
    ba56:	bf04      	itt	eq
    ba58:	6811      	ldreq	r1, [r2, #0]
    ba5a:	6852      	ldreq	r2, [r2, #4]
    ba5c:	6062      	str	r2, [r4, #4]
    ba5e:	bf04      	itt	eq
    ba60:	1809      	addeq	r1, r1, r0
    ba62:	6021      	streq	r1, [r4, #0]
    ba64:	605c      	str	r4, [r3, #4]
    ba66:	e7c7      	b.n	b9f8 <_free_r+0x24>
    ba68:	bd38      	pop	{r3, r4, r5, pc}
    ba6a:	bf00      	nop
    ba6c:	20000f1c 	.word	0x20000f1c

0000ba70 <_malloc_r>:
    ba70:	b570      	push	{r4, r5, r6, lr}
    ba72:	1ccd      	adds	r5, r1, #3
    ba74:	f025 0503 	bic.w	r5, r5, #3
    ba78:	3508      	adds	r5, #8
    ba7a:	2d0c      	cmp	r5, #12
    ba7c:	bf38      	it	cc
    ba7e:	250c      	movcc	r5, #12
    ba80:	2d00      	cmp	r5, #0
    ba82:	4606      	mov	r6, r0
    ba84:	db01      	blt.n	ba8a <_malloc_r+0x1a>
    ba86:	42a9      	cmp	r1, r5
    ba88:	d903      	bls.n	ba92 <_malloc_r+0x22>
    ba8a:	230c      	movs	r3, #12
    ba8c:	6033      	str	r3, [r6, #0]
    ba8e:	2000      	movs	r0, #0
    ba90:	bd70      	pop	{r4, r5, r6, pc}
    ba92:	f000 fc41 	bl	c318 <__malloc_lock>
    ba96:	4a23      	ldr	r2, [pc, #140]	; (bb24 <_malloc_r+0xb4>)
    ba98:	6814      	ldr	r4, [r2, #0]
    ba9a:	4621      	mov	r1, r4
    ba9c:	b991      	cbnz	r1, bac4 <_malloc_r+0x54>
    ba9e:	4c22      	ldr	r4, [pc, #136]	; (bb28 <_malloc_r+0xb8>)
    baa0:	6823      	ldr	r3, [r4, #0]
    baa2:	b91b      	cbnz	r3, baac <_malloc_r+0x3c>
    baa4:	4630      	mov	r0, r6
    baa6:	f000 f8a5 	bl	bbf4 <_sbrk_r>
    baaa:	6020      	str	r0, [r4, #0]
    baac:	4629      	mov	r1, r5
    baae:	4630      	mov	r0, r6
    bab0:	f000 f8a0 	bl	bbf4 <_sbrk_r>
    bab4:	1c43      	adds	r3, r0, #1
    bab6:	d126      	bne.n	bb06 <_malloc_r+0x96>
    bab8:	230c      	movs	r3, #12
    baba:	6033      	str	r3, [r6, #0]
    babc:	4630      	mov	r0, r6
    babe:	f000 fc2c 	bl	c31a <__malloc_unlock>
    bac2:	e7e4      	b.n	ba8e <_malloc_r+0x1e>
    bac4:	680b      	ldr	r3, [r1, #0]
    bac6:	1b5b      	subs	r3, r3, r5
    bac8:	d41a      	bmi.n	bb00 <_malloc_r+0x90>
    baca:	2b0b      	cmp	r3, #11
    bacc:	d90f      	bls.n	baee <_malloc_r+0x7e>
    bace:	600b      	str	r3, [r1, #0]
    bad0:	50cd      	str	r5, [r1, r3]
    bad2:	18cc      	adds	r4, r1, r3
    bad4:	4630      	mov	r0, r6
    bad6:	f000 fc20 	bl	c31a <__malloc_unlock>
    bada:	f104 000b 	add.w	r0, r4, #11
    bade:	1d23      	adds	r3, r4, #4
    bae0:	f020 0007 	bic.w	r0, r0, #7
    bae4:	1ac3      	subs	r3, r0, r3
    bae6:	d01b      	beq.n	bb20 <_malloc_r+0xb0>
    bae8:	425a      	negs	r2, r3
    baea:	50e2      	str	r2, [r4, r3]
    baec:	bd70      	pop	{r4, r5, r6, pc}
    baee:	428c      	cmp	r4, r1
    baf0:	bf0d      	iteet	eq
    baf2:	6863      	ldreq	r3, [r4, #4]
    baf4:	684b      	ldrne	r3, [r1, #4]
    baf6:	6063      	strne	r3, [r4, #4]
    baf8:	6013      	streq	r3, [r2, #0]
    bafa:	bf18      	it	ne
    bafc:	460c      	movne	r4, r1
    bafe:	e7e9      	b.n	bad4 <_malloc_r+0x64>
    bb00:	460c      	mov	r4, r1
    bb02:	6849      	ldr	r1, [r1, #4]
    bb04:	e7ca      	b.n	ba9c <_malloc_r+0x2c>
    bb06:	1cc4      	adds	r4, r0, #3
    bb08:	f024 0403 	bic.w	r4, r4, #3
    bb0c:	42a0      	cmp	r0, r4
    bb0e:	d005      	beq.n	bb1c <_malloc_r+0xac>
    bb10:	1a21      	subs	r1, r4, r0
    bb12:	4630      	mov	r0, r6
    bb14:	f000 f86e 	bl	bbf4 <_sbrk_r>
    bb18:	3001      	adds	r0, #1
    bb1a:	d0cd      	beq.n	bab8 <_malloc_r+0x48>
    bb1c:	6025      	str	r5, [r4, #0]
    bb1e:	e7d9      	b.n	bad4 <_malloc_r+0x64>
    bb20:	bd70      	pop	{r4, r5, r6, pc}
    bb22:	bf00      	nop
    bb24:	20000f1c 	.word	0x20000f1c
    bb28:	20000f20 	.word	0x20000f20

0000bb2c <_puts_r>:
    bb2c:	b570      	push	{r4, r5, r6, lr}
    bb2e:	460e      	mov	r6, r1
    bb30:	4605      	mov	r5, r0
    bb32:	b118      	cbz	r0, bb3c <_puts_r+0x10>
    bb34:	6983      	ldr	r3, [r0, #24]
    bb36:	b90b      	cbnz	r3, bb3c <_puts_r+0x10>
    bb38:	f000 fb00 	bl	c13c <__sinit>
    bb3c:	69ab      	ldr	r3, [r5, #24]
    bb3e:	68ac      	ldr	r4, [r5, #8]
    bb40:	b913      	cbnz	r3, bb48 <_puts_r+0x1c>
    bb42:	4628      	mov	r0, r5
    bb44:	f000 fafa 	bl	c13c <__sinit>
    bb48:	4b23      	ldr	r3, [pc, #140]	; (bbd8 <_puts_r+0xac>)
    bb4a:	429c      	cmp	r4, r3
    bb4c:	d117      	bne.n	bb7e <_puts_r+0x52>
    bb4e:	686c      	ldr	r4, [r5, #4]
    bb50:	89a3      	ldrh	r3, [r4, #12]
    bb52:	071b      	lsls	r3, r3, #28
    bb54:	d51d      	bpl.n	bb92 <_puts_r+0x66>
    bb56:	6923      	ldr	r3, [r4, #16]
    bb58:	b1db      	cbz	r3, bb92 <_puts_r+0x66>
    bb5a:	3e01      	subs	r6, #1
    bb5c:	68a3      	ldr	r3, [r4, #8]
    bb5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    bb62:	3b01      	subs	r3, #1
    bb64:	60a3      	str	r3, [r4, #8]
    bb66:	b9e9      	cbnz	r1, bba4 <_puts_r+0x78>
    bb68:	2b00      	cmp	r3, #0
    bb6a:	da2e      	bge.n	bbca <_puts_r+0x9e>
    bb6c:	4622      	mov	r2, r4
    bb6e:	210a      	movs	r1, #10
    bb70:	4628      	mov	r0, r5
    bb72:	f000 f931 	bl	bdd8 <__swbuf_r>
    bb76:	3001      	adds	r0, #1
    bb78:	d011      	beq.n	bb9e <_puts_r+0x72>
    bb7a:	200a      	movs	r0, #10
    bb7c:	bd70      	pop	{r4, r5, r6, pc}
    bb7e:	4b17      	ldr	r3, [pc, #92]	; (bbdc <_puts_r+0xb0>)
    bb80:	429c      	cmp	r4, r3
    bb82:	d101      	bne.n	bb88 <_puts_r+0x5c>
    bb84:	68ac      	ldr	r4, [r5, #8]
    bb86:	e7e3      	b.n	bb50 <_puts_r+0x24>
    bb88:	4b15      	ldr	r3, [pc, #84]	; (bbe0 <_puts_r+0xb4>)
    bb8a:	429c      	cmp	r4, r3
    bb8c:	bf08      	it	eq
    bb8e:	68ec      	ldreq	r4, [r5, #12]
    bb90:	e7de      	b.n	bb50 <_puts_r+0x24>
    bb92:	4621      	mov	r1, r4
    bb94:	4628      	mov	r0, r5
    bb96:	f000 f971 	bl	be7c <__swsetup_r>
    bb9a:	2800      	cmp	r0, #0
    bb9c:	d0dd      	beq.n	bb5a <_puts_r+0x2e>
    bb9e:	f04f 30ff 	mov.w	r0, #4294967295
    bba2:	bd70      	pop	{r4, r5, r6, pc}
    bba4:	2b00      	cmp	r3, #0
    bba6:	da04      	bge.n	bbb2 <_puts_r+0x86>
    bba8:	69a2      	ldr	r2, [r4, #24]
    bbaa:	4293      	cmp	r3, r2
    bbac:	db06      	blt.n	bbbc <_puts_r+0x90>
    bbae:	290a      	cmp	r1, #10
    bbb0:	d004      	beq.n	bbbc <_puts_r+0x90>
    bbb2:	6823      	ldr	r3, [r4, #0]
    bbb4:	1c5a      	adds	r2, r3, #1
    bbb6:	6022      	str	r2, [r4, #0]
    bbb8:	7019      	strb	r1, [r3, #0]
    bbba:	e7cf      	b.n	bb5c <_puts_r+0x30>
    bbbc:	4622      	mov	r2, r4
    bbbe:	4628      	mov	r0, r5
    bbc0:	f000 f90a 	bl	bdd8 <__swbuf_r>
    bbc4:	3001      	adds	r0, #1
    bbc6:	d1c9      	bne.n	bb5c <_puts_r+0x30>
    bbc8:	e7e9      	b.n	bb9e <_puts_r+0x72>
    bbca:	6823      	ldr	r3, [r4, #0]
    bbcc:	200a      	movs	r0, #10
    bbce:	1c5a      	adds	r2, r3, #1
    bbd0:	6022      	str	r2, [r4, #0]
    bbd2:	7018      	strb	r0, [r3, #0]
    bbd4:	bd70      	pop	{r4, r5, r6, pc}
    bbd6:	bf00      	nop
    bbd8:	0000d42c 	.word	0x0000d42c
    bbdc:	0000d44c 	.word	0x0000d44c
    bbe0:	0000d40c 	.word	0x0000d40c

0000bbe4 <puts>:
    bbe4:	4b02      	ldr	r3, [pc, #8]	; (bbf0 <puts+0xc>)
    bbe6:	4601      	mov	r1, r0
    bbe8:	6818      	ldr	r0, [r3, #0]
    bbea:	f7ff bf9f 	b.w	bb2c <_puts_r>
    bbee:	bf00      	nop
    bbf0:	20000558 	.word	0x20000558

0000bbf4 <_sbrk_r>:
    bbf4:	b538      	push	{r3, r4, r5, lr}
    bbf6:	4c06      	ldr	r4, [pc, #24]	; (bc10 <_sbrk_r+0x1c>)
    bbf8:	2300      	movs	r3, #0
    bbfa:	4605      	mov	r5, r0
    bbfc:	4608      	mov	r0, r1
    bbfe:	6023      	str	r3, [r4, #0]
    bc00:	f7f9 ff7a 	bl	5af8 <_sbrk>
    bc04:	1c43      	adds	r3, r0, #1
    bc06:	d102      	bne.n	bc0e <_sbrk_r+0x1a>
    bc08:	6823      	ldr	r3, [r4, #0]
    bc0a:	b103      	cbz	r3, bc0e <_sbrk_r+0x1a>
    bc0c:	602b      	str	r3, [r5, #0]
    bc0e:	bd38      	pop	{r3, r4, r5, pc}
    bc10:	20003d5c 	.word	0x20003d5c

0000bc14 <setbuf>:
    bc14:	2900      	cmp	r1, #0
    bc16:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bc1a:	bf0c      	ite	eq
    bc1c:	2202      	moveq	r2, #2
    bc1e:	2200      	movne	r2, #0
    bc20:	f000 b800 	b.w	bc24 <setvbuf>

0000bc24 <setvbuf>:
    bc24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bc28:	461d      	mov	r5, r3
    bc2a:	4b51      	ldr	r3, [pc, #324]	; (bd70 <setvbuf+0x14c>)
    bc2c:	681e      	ldr	r6, [r3, #0]
    bc2e:	4604      	mov	r4, r0
    bc30:	460f      	mov	r7, r1
    bc32:	4690      	mov	r8, r2
    bc34:	b126      	cbz	r6, bc40 <setvbuf+0x1c>
    bc36:	69b3      	ldr	r3, [r6, #24]
    bc38:	b913      	cbnz	r3, bc40 <setvbuf+0x1c>
    bc3a:	4630      	mov	r0, r6
    bc3c:	f000 fa7e 	bl	c13c <__sinit>
    bc40:	4b4c      	ldr	r3, [pc, #304]	; (bd74 <setvbuf+0x150>)
    bc42:	429c      	cmp	r4, r3
    bc44:	d152      	bne.n	bcec <setvbuf+0xc8>
    bc46:	6874      	ldr	r4, [r6, #4]
    bc48:	f1b8 0f02 	cmp.w	r8, #2
    bc4c:	d006      	beq.n	bc5c <setvbuf+0x38>
    bc4e:	f1b8 0f01 	cmp.w	r8, #1
    bc52:	f200 8089 	bhi.w	bd68 <setvbuf+0x144>
    bc56:	2d00      	cmp	r5, #0
    bc58:	f2c0 8086 	blt.w	bd68 <setvbuf+0x144>
    bc5c:	4621      	mov	r1, r4
    bc5e:	4630      	mov	r0, r6
    bc60:	f000 fa02 	bl	c068 <_fflush_r>
    bc64:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bc66:	b141      	cbz	r1, bc7a <setvbuf+0x56>
    bc68:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bc6c:	4299      	cmp	r1, r3
    bc6e:	d002      	beq.n	bc76 <setvbuf+0x52>
    bc70:	4630      	mov	r0, r6
    bc72:	f7ff feaf 	bl	b9d4 <_free_r>
    bc76:	2300      	movs	r3, #0
    bc78:	6363      	str	r3, [r4, #52]	; 0x34
    bc7a:	2300      	movs	r3, #0
    bc7c:	61a3      	str	r3, [r4, #24]
    bc7e:	6063      	str	r3, [r4, #4]
    bc80:	89a3      	ldrh	r3, [r4, #12]
    bc82:	061b      	lsls	r3, r3, #24
    bc84:	d503      	bpl.n	bc8e <setvbuf+0x6a>
    bc86:	6921      	ldr	r1, [r4, #16]
    bc88:	4630      	mov	r0, r6
    bc8a:	f7ff fea3 	bl	b9d4 <_free_r>
    bc8e:	89a3      	ldrh	r3, [r4, #12]
    bc90:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    bc94:	f023 0303 	bic.w	r3, r3, #3
    bc98:	f1b8 0f02 	cmp.w	r8, #2
    bc9c:	81a3      	strh	r3, [r4, #12]
    bc9e:	d05d      	beq.n	bd5c <setvbuf+0x138>
    bca0:	ab01      	add	r3, sp, #4
    bca2:	466a      	mov	r2, sp
    bca4:	4621      	mov	r1, r4
    bca6:	4630      	mov	r0, r6
    bca8:	f000 fad2 	bl	c250 <__swhatbuf_r>
    bcac:	89a3      	ldrh	r3, [r4, #12]
    bcae:	4318      	orrs	r0, r3
    bcb0:	81a0      	strh	r0, [r4, #12]
    bcb2:	bb2d      	cbnz	r5, bd00 <setvbuf+0xdc>
    bcb4:	9d00      	ldr	r5, [sp, #0]
    bcb6:	4628      	mov	r0, r5
    bcb8:	f7ff fe70 	bl	b99c <malloc>
    bcbc:	4607      	mov	r7, r0
    bcbe:	2800      	cmp	r0, #0
    bcc0:	d14e      	bne.n	bd60 <setvbuf+0x13c>
    bcc2:	f8dd 9000 	ldr.w	r9, [sp]
    bcc6:	45a9      	cmp	r9, r5
    bcc8:	d13c      	bne.n	bd44 <setvbuf+0x120>
    bcca:	f04f 30ff 	mov.w	r0, #4294967295
    bcce:	89a3      	ldrh	r3, [r4, #12]
    bcd0:	f043 0302 	orr.w	r3, r3, #2
    bcd4:	81a3      	strh	r3, [r4, #12]
    bcd6:	2300      	movs	r3, #0
    bcd8:	60a3      	str	r3, [r4, #8]
    bcda:	f104 0347 	add.w	r3, r4, #71	; 0x47
    bcde:	6023      	str	r3, [r4, #0]
    bce0:	6123      	str	r3, [r4, #16]
    bce2:	2301      	movs	r3, #1
    bce4:	6163      	str	r3, [r4, #20]
    bce6:	b003      	add	sp, #12
    bce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bcec:	4b22      	ldr	r3, [pc, #136]	; (bd78 <setvbuf+0x154>)
    bcee:	429c      	cmp	r4, r3
    bcf0:	d101      	bne.n	bcf6 <setvbuf+0xd2>
    bcf2:	68b4      	ldr	r4, [r6, #8]
    bcf4:	e7a8      	b.n	bc48 <setvbuf+0x24>
    bcf6:	4b21      	ldr	r3, [pc, #132]	; (bd7c <setvbuf+0x158>)
    bcf8:	429c      	cmp	r4, r3
    bcfa:	bf08      	it	eq
    bcfc:	68f4      	ldreq	r4, [r6, #12]
    bcfe:	e7a3      	b.n	bc48 <setvbuf+0x24>
    bd00:	2f00      	cmp	r7, #0
    bd02:	d0d8      	beq.n	bcb6 <setvbuf+0x92>
    bd04:	69b3      	ldr	r3, [r6, #24]
    bd06:	b913      	cbnz	r3, bd0e <setvbuf+0xea>
    bd08:	4630      	mov	r0, r6
    bd0a:	f000 fa17 	bl	c13c <__sinit>
    bd0e:	f1b8 0f01 	cmp.w	r8, #1
    bd12:	bf08      	it	eq
    bd14:	89a3      	ldrheq	r3, [r4, #12]
    bd16:	6027      	str	r7, [r4, #0]
    bd18:	bf04      	itt	eq
    bd1a:	f043 0301 	orreq.w	r3, r3, #1
    bd1e:	81a3      	strheq	r3, [r4, #12]
    bd20:	89a3      	ldrh	r3, [r4, #12]
    bd22:	6127      	str	r7, [r4, #16]
    bd24:	f013 0008 	ands.w	r0, r3, #8
    bd28:	6165      	str	r5, [r4, #20]
    bd2a:	d01b      	beq.n	bd64 <setvbuf+0x140>
    bd2c:	f013 0001 	ands.w	r0, r3, #1
    bd30:	bf18      	it	ne
    bd32:	426d      	negne	r5, r5
    bd34:	f04f 0300 	mov.w	r3, #0
    bd38:	bf1d      	ittte	ne
    bd3a:	60a3      	strne	r3, [r4, #8]
    bd3c:	61a5      	strne	r5, [r4, #24]
    bd3e:	4618      	movne	r0, r3
    bd40:	60a5      	streq	r5, [r4, #8]
    bd42:	e7d0      	b.n	bce6 <setvbuf+0xc2>
    bd44:	4648      	mov	r0, r9
    bd46:	f7ff fe29 	bl	b99c <malloc>
    bd4a:	4607      	mov	r7, r0
    bd4c:	2800      	cmp	r0, #0
    bd4e:	d0bc      	beq.n	bcca <setvbuf+0xa6>
    bd50:	89a3      	ldrh	r3, [r4, #12]
    bd52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd56:	81a3      	strh	r3, [r4, #12]
    bd58:	464d      	mov	r5, r9
    bd5a:	e7d3      	b.n	bd04 <setvbuf+0xe0>
    bd5c:	2000      	movs	r0, #0
    bd5e:	e7b6      	b.n	bcce <setvbuf+0xaa>
    bd60:	46a9      	mov	r9, r5
    bd62:	e7f5      	b.n	bd50 <setvbuf+0x12c>
    bd64:	60a0      	str	r0, [r4, #8]
    bd66:	e7be      	b.n	bce6 <setvbuf+0xc2>
    bd68:	f04f 30ff 	mov.w	r0, #4294967295
    bd6c:	e7bb      	b.n	bce6 <setvbuf+0xc2>
    bd6e:	bf00      	nop
    bd70:	20000558 	.word	0x20000558
    bd74:	0000d42c 	.word	0x0000d42c
    bd78:	0000d44c 	.word	0x0000d44c
    bd7c:	0000d40c 	.word	0x0000d40c

0000bd80 <siprintf>:
    bd80:	b40e      	push	{r1, r2, r3}
    bd82:	b500      	push	{lr}
    bd84:	b09c      	sub	sp, #112	; 0x70
    bd86:	f44f 7102 	mov.w	r1, #520	; 0x208
    bd8a:	ab1d      	add	r3, sp, #116	; 0x74
    bd8c:	f8ad 1014 	strh.w	r1, [sp, #20]
    bd90:	9002      	str	r0, [sp, #8]
    bd92:	9006      	str	r0, [sp, #24]
    bd94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bd98:	480a      	ldr	r0, [pc, #40]	; (bdc4 <siprintf+0x44>)
    bd9a:	9104      	str	r1, [sp, #16]
    bd9c:	9107      	str	r1, [sp, #28]
    bd9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bda2:	f853 2b04 	ldr.w	r2, [r3], #4
    bda6:	f8ad 1016 	strh.w	r1, [sp, #22]
    bdaa:	6800      	ldr	r0, [r0, #0]
    bdac:	9301      	str	r3, [sp, #4]
    bdae:	a902      	add	r1, sp, #8
    bdb0:	f000 fb10 	bl	c3d4 <_svfiprintf_r>
    bdb4:	9b02      	ldr	r3, [sp, #8]
    bdb6:	2200      	movs	r2, #0
    bdb8:	701a      	strb	r2, [r3, #0]
    bdba:	b01c      	add	sp, #112	; 0x70
    bdbc:	f85d eb04 	ldr.w	lr, [sp], #4
    bdc0:	b003      	add	sp, #12
    bdc2:	4770      	bx	lr
    bdc4:	20000558 	.word	0x20000558

0000bdc8 <strlen>:
    bdc8:	4603      	mov	r3, r0
    bdca:	f813 2b01 	ldrb.w	r2, [r3], #1
    bdce:	2a00      	cmp	r2, #0
    bdd0:	d1fb      	bne.n	bdca <strlen+0x2>
    bdd2:	1a18      	subs	r0, r3, r0
    bdd4:	3801      	subs	r0, #1
    bdd6:	4770      	bx	lr

0000bdd8 <__swbuf_r>:
    bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdda:	460e      	mov	r6, r1
    bddc:	4614      	mov	r4, r2
    bdde:	4605      	mov	r5, r0
    bde0:	b118      	cbz	r0, bdea <__swbuf_r+0x12>
    bde2:	6983      	ldr	r3, [r0, #24]
    bde4:	b90b      	cbnz	r3, bdea <__swbuf_r+0x12>
    bde6:	f000 f9a9 	bl	c13c <__sinit>
    bdea:	4b21      	ldr	r3, [pc, #132]	; (be70 <__swbuf_r+0x98>)
    bdec:	429c      	cmp	r4, r3
    bdee:	d12a      	bne.n	be46 <__swbuf_r+0x6e>
    bdf0:	686c      	ldr	r4, [r5, #4]
    bdf2:	69a3      	ldr	r3, [r4, #24]
    bdf4:	60a3      	str	r3, [r4, #8]
    bdf6:	89a3      	ldrh	r3, [r4, #12]
    bdf8:	071a      	lsls	r2, r3, #28
    bdfa:	d52e      	bpl.n	be5a <__swbuf_r+0x82>
    bdfc:	6923      	ldr	r3, [r4, #16]
    bdfe:	b363      	cbz	r3, be5a <__swbuf_r+0x82>
    be00:	6923      	ldr	r3, [r4, #16]
    be02:	6820      	ldr	r0, [r4, #0]
    be04:	1ac0      	subs	r0, r0, r3
    be06:	6963      	ldr	r3, [r4, #20]
    be08:	b2f6      	uxtb	r6, r6
    be0a:	4298      	cmp	r0, r3
    be0c:	4637      	mov	r7, r6
    be0e:	db04      	blt.n	be1a <__swbuf_r+0x42>
    be10:	4621      	mov	r1, r4
    be12:	4628      	mov	r0, r5
    be14:	f000 f928 	bl	c068 <_fflush_r>
    be18:	bb28      	cbnz	r0, be66 <__swbuf_r+0x8e>
    be1a:	68a3      	ldr	r3, [r4, #8]
    be1c:	3b01      	subs	r3, #1
    be1e:	60a3      	str	r3, [r4, #8]
    be20:	6823      	ldr	r3, [r4, #0]
    be22:	1c5a      	adds	r2, r3, #1
    be24:	6022      	str	r2, [r4, #0]
    be26:	701e      	strb	r6, [r3, #0]
    be28:	6963      	ldr	r3, [r4, #20]
    be2a:	3001      	adds	r0, #1
    be2c:	4298      	cmp	r0, r3
    be2e:	d004      	beq.n	be3a <__swbuf_r+0x62>
    be30:	89a3      	ldrh	r3, [r4, #12]
    be32:	07db      	lsls	r3, r3, #31
    be34:	d519      	bpl.n	be6a <__swbuf_r+0x92>
    be36:	2e0a      	cmp	r6, #10
    be38:	d117      	bne.n	be6a <__swbuf_r+0x92>
    be3a:	4621      	mov	r1, r4
    be3c:	4628      	mov	r0, r5
    be3e:	f000 f913 	bl	c068 <_fflush_r>
    be42:	b190      	cbz	r0, be6a <__swbuf_r+0x92>
    be44:	e00f      	b.n	be66 <__swbuf_r+0x8e>
    be46:	4b0b      	ldr	r3, [pc, #44]	; (be74 <__swbuf_r+0x9c>)
    be48:	429c      	cmp	r4, r3
    be4a:	d101      	bne.n	be50 <__swbuf_r+0x78>
    be4c:	68ac      	ldr	r4, [r5, #8]
    be4e:	e7d0      	b.n	bdf2 <__swbuf_r+0x1a>
    be50:	4b09      	ldr	r3, [pc, #36]	; (be78 <__swbuf_r+0xa0>)
    be52:	429c      	cmp	r4, r3
    be54:	bf08      	it	eq
    be56:	68ec      	ldreq	r4, [r5, #12]
    be58:	e7cb      	b.n	bdf2 <__swbuf_r+0x1a>
    be5a:	4621      	mov	r1, r4
    be5c:	4628      	mov	r0, r5
    be5e:	f000 f80d 	bl	be7c <__swsetup_r>
    be62:	2800      	cmp	r0, #0
    be64:	d0cc      	beq.n	be00 <__swbuf_r+0x28>
    be66:	f04f 37ff 	mov.w	r7, #4294967295
    be6a:	4638      	mov	r0, r7
    be6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be6e:	bf00      	nop
    be70:	0000d42c 	.word	0x0000d42c
    be74:	0000d44c 	.word	0x0000d44c
    be78:	0000d40c 	.word	0x0000d40c

0000be7c <__swsetup_r>:
    be7c:	4b32      	ldr	r3, [pc, #200]	; (bf48 <__swsetup_r+0xcc>)
    be7e:	b570      	push	{r4, r5, r6, lr}
    be80:	681d      	ldr	r5, [r3, #0]
    be82:	4606      	mov	r6, r0
    be84:	460c      	mov	r4, r1
    be86:	b125      	cbz	r5, be92 <__swsetup_r+0x16>
    be88:	69ab      	ldr	r3, [r5, #24]
    be8a:	b913      	cbnz	r3, be92 <__swsetup_r+0x16>
    be8c:	4628      	mov	r0, r5
    be8e:	f000 f955 	bl	c13c <__sinit>
    be92:	4b2e      	ldr	r3, [pc, #184]	; (bf4c <__swsetup_r+0xd0>)
    be94:	429c      	cmp	r4, r3
    be96:	d10f      	bne.n	beb8 <__swsetup_r+0x3c>
    be98:	686c      	ldr	r4, [r5, #4]
    be9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    be9e:	b29a      	uxth	r2, r3
    bea0:	0715      	lsls	r5, r2, #28
    bea2:	d42c      	bmi.n	befe <__swsetup_r+0x82>
    bea4:	06d0      	lsls	r0, r2, #27
    bea6:	d411      	bmi.n	becc <__swsetup_r+0x50>
    bea8:	2209      	movs	r2, #9
    beaa:	6032      	str	r2, [r6, #0]
    beac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    beb0:	81a3      	strh	r3, [r4, #12]
    beb2:	f04f 30ff 	mov.w	r0, #4294967295
    beb6:	bd70      	pop	{r4, r5, r6, pc}
    beb8:	4b25      	ldr	r3, [pc, #148]	; (bf50 <__swsetup_r+0xd4>)
    beba:	429c      	cmp	r4, r3
    bebc:	d101      	bne.n	bec2 <__swsetup_r+0x46>
    bebe:	68ac      	ldr	r4, [r5, #8]
    bec0:	e7eb      	b.n	be9a <__swsetup_r+0x1e>
    bec2:	4b24      	ldr	r3, [pc, #144]	; (bf54 <__swsetup_r+0xd8>)
    bec4:	429c      	cmp	r4, r3
    bec6:	bf08      	it	eq
    bec8:	68ec      	ldreq	r4, [r5, #12]
    beca:	e7e6      	b.n	be9a <__swsetup_r+0x1e>
    becc:	0751      	lsls	r1, r2, #29
    bece:	d512      	bpl.n	bef6 <__swsetup_r+0x7a>
    bed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bed2:	b141      	cbz	r1, bee6 <__swsetup_r+0x6a>
    bed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bed8:	4299      	cmp	r1, r3
    beda:	d002      	beq.n	bee2 <__swsetup_r+0x66>
    bedc:	4630      	mov	r0, r6
    bede:	f7ff fd79 	bl	b9d4 <_free_r>
    bee2:	2300      	movs	r3, #0
    bee4:	6363      	str	r3, [r4, #52]	; 0x34
    bee6:	89a3      	ldrh	r3, [r4, #12]
    bee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    beec:	81a3      	strh	r3, [r4, #12]
    beee:	2300      	movs	r3, #0
    bef0:	6063      	str	r3, [r4, #4]
    bef2:	6923      	ldr	r3, [r4, #16]
    bef4:	6023      	str	r3, [r4, #0]
    bef6:	89a3      	ldrh	r3, [r4, #12]
    bef8:	f043 0308 	orr.w	r3, r3, #8
    befc:	81a3      	strh	r3, [r4, #12]
    befe:	6923      	ldr	r3, [r4, #16]
    bf00:	b94b      	cbnz	r3, bf16 <__swsetup_r+0x9a>
    bf02:	89a3      	ldrh	r3, [r4, #12]
    bf04:	f403 7320 	and.w	r3, r3, #640	; 0x280
    bf08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bf0c:	d003      	beq.n	bf16 <__swsetup_r+0x9a>
    bf0e:	4621      	mov	r1, r4
    bf10:	4630      	mov	r0, r6
    bf12:	f000 f9c1 	bl	c298 <__smakebuf_r>
    bf16:	89a2      	ldrh	r2, [r4, #12]
    bf18:	f012 0301 	ands.w	r3, r2, #1
    bf1c:	d00c      	beq.n	bf38 <__swsetup_r+0xbc>
    bf1e:	2300      	movs	r3, #0
    bf20:	60a3      	str	r3, [r4, #8]
    bf22:	6963      	ldr	r3, [r4, #20]
    bf24:	425b      	negs	r3, r3
    bf26:	61a3      	str	r3, [r4, #24]
    bf28:	6923      	ldr	r3, [r4, #16]
    bf2a:	b953      	cbnz	r3, bf42 <__swsetup_r+0xc6>
    bf2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bf30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    bf34:	d1ba      	bne.n	beac <__swsetup_r+0x30>
    bf36:	bd70      	pop	{r4, r5, r6, pc}
    bf38:	0792      	lsls	r2, r2, #30
    bf3a:	bf58      	it	pl
    bf3c:	6963      	ldrpl	r3, [r4, #20]
    bf3e:	60a3      	str	r3, [r4, #8]
    bf40:	e7f2      	b.n	bf28 <__swsetup_r+0xac>
    bf42:	2000      	movs	r0, #0
    bf44:	e7f7      	b.n	bf36 <__swsetup_r+0xba>
    bf46:	bf00      	nop
    bf48:	20000558 	.word	0x20000558
    bf4c:	0000d42c 	.word	0x0000d42c
    bf50:	0000d44c 	.word	0x0000d44c
    bf54:	0000d40c 	.word	0x0000d40c

0000bf58 <__sflush_r>:
    bf58:	898a      	ldrh	r2, [r1, #12]
    bf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf5e:	4605      	mov	r5, r0
    bf60:	0710      	lsls	r0, r2, #28
    bf62:	460c      	mov	r4, r1
    bf64:	d45a      	bmi.n	c01c <__sflush_r+0xc4>
    bf66:	684b      	ldr	r3, [r1, #4]
    bf68:	2b00      	cmp	r3, #0
    bf6a:	dc05      	bgt.n	bf78 <__sflush_r+0x20>
    bf6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    bf6e:	2b00      	cmp	r3, #0
    bf70:	dc02      	bgt.n	bf78 <__sflush_r+0x20>
    bf72:	2000      	movs	r0, #0
    bf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    bf7a:	2e00      	cmp	r6, #0
    bf7c:	d0f9      	beq.n	bf72 <__sflush_r+0x1a>
    bf7e:	2300      	movs	r3, #0
    bf80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    bf84:	682f      	ldr	r7, [r5, #0]
    bf86:	602b      	str	r3, [r5, #0]
    bf88:	d033      	beq.n	bff2 <__sflush_r+0x9a>
    bf8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    bf8c:	89a3      	ldrh	r3, [r4, #12]
    bf8e:	075a      	lsls	r2, r3, #29
    bf90:	d505      	bpl.n	bf9e <__sflush_r+0x46>
    bf92:	6863      	ldr	r3, [r4, #4]
    bf94:	1ac0      	subs	r0, r0, r3
    bf96:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bf98:	b10b      	cbz	r3, bf9e <__sflush_r+0x46>
    bf9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    bf9c:	1ac0      	subs	r0, r0, r3
    bf9e:	2300      	movs	r3, #0
    bfa0:	4602      	mov	r2, r0
    bfa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    bfa4:	6a21      	ldr	r1, [r4, #32]
    bfa6:	4628      	mov	r0, r5
    bfa8:	47b0      	blx	r6
    bfaa:	1c43      	adds	r3, r0, #1
    bfac:	89a3      	ldrh	r3, [r4, #12]
    bfae:	d106      	bne.n	bfbe <__sflush_r+0x66>
    bfb0:	6829      	ldr	r1, [r5, #0]
    bfb2:	291d      	cmp	r1, #29
    bfb4:	d84b      	bhi.n	c04e <__sflush_r+0xf6>
    bfb6:	4a2b      	ldr	r2, [pc, #172]	; (c064 <__sflush_r+0x10c>)
    bfb8:	40ca      	lsrs	r2, r1
    bfba:	07d6      	lsls	r6, r2, #31
    bfbc:	d547      	bpl.n	c04e <__sflush_r+0xf6>
    bfbe:	2200      	movs	r2, #0
    bfc0:	6062      	str	r2, [r4, #4]
    bfc2:	04d9      	lsls	r1, r3, #19
    bfc4:	6922      	ldr	r2, [r4, #16]
    bfc6:	6022      	str	r2, [r4, #0]
    bfc8:	d504      	bpl.n	bfd4 <__sflush_r+0x7c>
    bfca:	1c42      	adds	r2, r0, #1
    bfcc:	d101      	bne.n	bfd2 <__sflush_r+0x7a>
    bfce:	682b      	ldr	r3, [r5, #0]
    bfd0:	b903      	cbnz	r3, bfd4 <__sflush_r+0x7c>
    bfd2:	6560      	str	r0, [r4, #84]	; 0x54
    bfd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bfd6:	602f      	str	r7, [r5, #0]
    bfd8:	2900      	cmp	r1, #0
    bfda:	d0ca      	beq.n	bf72 <__sflush_r+0x1a>
    bfdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bfe0:	4299      	cmp	r1, r3
    bfe2:	d002      	beq.n	bfea <__sflush_r+0x92>
    bfe4:	4628      	mov	r0, r5
    bfe6:	f7ff fcf5 	bl	b9d4 <_free_r>
    bfea:	2000      	movs	r0, #0
    bfec:	6360      	str	r0, [r4, #52]	; 0x34
    bfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bff2:	6a21      	ldr	r1, [r4, #32]
    bff4:	2301      	movs	r3, #1
    bff6:	4628      	mov	r0, r5
    bff8:	47b0      	blx	r6
    bffa:	1c41      	adds	r1, r0, #1
    bffc:	d1c6      	bne.n	bf8c <__sflush_r+0x34>
    bffe:	682b      	ldr	r3, [r5, #0]
    c000:	2b00      	cmp	r3, #0
    c002:	d0c3      	beq.n	bf8c <__sflush_r+0x34>
    c004:	2b1d      	cmp	r3, #29
    c006:	d001      	beq.n	c00c <__sflush_r+0xb4>
    c008:	2b16      	cmp	r3, #22
    c00a:	d101      	bne.n	c010 <__sflush_r+0xb8>
    c00c:	602f      	str	r7, [r5, #0]
    c00e:	e7b0      	b.n	bf72 <__sflush_r+0x1a>
    c010:	89a3      	ldrh	r3, [r4, #12]
    c012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c016:	81a3      	strh	r3, [r4, #12]
    c018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c01c:	690f      	ldr	r7, [r1, #16]
    c01e:	2f00      	cmp	r7, #0
    c020:	d0a7      	beq.n	bf72 <__sflush_r+0x1a>
    c022:	0793      	lsls	r3, r2, #30
    c024:	680e      	ldr	r6, [r1, #0]
    c026:	bf08      	it	eq
    c028:	694b      	ldreq	r3, [r1, #20]
    c02a:	600f      	str	r7, [r1, #0]
    c02c:	bf18      	it	ne
    c02e:	2300      	movne	r3, #0
    c030:	eba6 0807 	sub.w	r8, r6, r7
    c034:	608b      	str	r3, [r1, #8]
    c036:	f1b8 0f00 	cmp.w	r8, #0
    c03a:	dd9a      	ble.n	bf72 <__sflush_r+0x1a>
    c03c:	4643      	mov	r3, r8
    c03e:	463a      	mov	r2, r7
    c040:	6a21      	ldr	r1, [r4, #32]
    c042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c044:	4628      	mov	r0, r5
    c046:	47b0      	blx	r6
    c048:	2800      	cmp	r0, #0
    c04a:	dc07      	bgt.n	c05c <__sflush_r+0x104>
    c04c:	89a3      	ldrh	r3, [r4, #12]
    c04e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c052:	81a3      	strh	r3, [r4, #12]
    c054:	f04f 30ff 	mov.w	r0, #4294967295
    c058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c05c:	4407      	add	r7, r0
    c05e:	eba8 0800 	sub.w	r8, r8, r0
    c062:	e7e8      	b.n	c036 <__sflush_r+0xde>
    c064:	20400001 	.word	0x20400001

0000c068 <_fflush_r>:
    c068:	b538      	push	{r3, r4, r5, lr}
    c06a:	690b      	ldr	r3, [r1, #16]
    c06c:	4605      	mov	r5, r0
    c06e:	460c      	mov	r4, r1
    c070:	b1db      	cbz	r3, c0aa <_fflush_r+0x42>
    c072:	b118      	cbz	r0, c07c <_fflush_r+0x14>
    c074:	6983      	ldr	r3, [r0, #24]
    c076:	b90b      	cbnz	r3, c07c <_fflush_r+0x14>
    c078:	f000 f860 	bl	c13c <__sinit>
    c07c:	4b0c      	ldr	r3, [pc, #48]	; (c0b0 <_fflush_r+0x48>)
    c07e:	429c      	cmp	r4, r3
    c080:	d109      	bne.n	c096 <_fflush_r+0x2e>
    c082:	686c      	ldr	r4, [r5, #4]
    c084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c088:	b17b      	cbz	r3, c0aa <_fflush_r+0x42>
    c08a:	4621      	mov	r1, r4
    c08c:	4628      	mov	r0, r5
    c08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c092:	f7ff bf61 	b.w	bf58 <__sflush_r>
    c096:	4b07      	ldr	r3, [pc, #28]	; (c0b4 <_fflush_r+0x4c>)
    c098:	429c      	cmp	r4, r3
    c09a:	d101      	bne.n	c0a0 <_fflush_r+0x38>
    c09c:	68ac      	ldr	r4, [r5, #8]
    c09e:	e7f1      	b.n	c084 <_fflush_r+0x1c>
    c0a0:	4b05      	ldr	r3, [pc, #20]	; (c0b8 <_fflush_r+0x50>)
    c0a2:	429c      	cmp	r4, r3
    c0a4:	bf08      	it	eq
    c0a6:	68ec      	ldreq	r4, [r5, #12]
    c0a8:	e7ec      	b.n	c084 <_fflush_r+0x1c>
    c0aa:	2000      	movs	r0, #0
    c0ac:	bd38      	pop	{r3, r4, r5, pc}
    c0ae:	bf00      	nop
    c0b0:	0000d42c 	.word	0x0000d42c
    c0b4:	0000d44c 	.word	0x0000d44c
    c0b8:	0000d40c 	.word	0x0000d40c

0000c0bc <_cleanup_r>:
    c0bc:	4901      	ldr	r1, [pc, #4]	; (c0c4 <_cleanup_r+0x8>)
    c0be:	f000 b8a9 	b.w	c214 <_fwalk_reent>
    c0c2:	bf00      	nop
    c0c4:	0000c069 	.word	0x0000c069

0000c0c8 <std.isra.0>:
    c0c8:	2300      	movs	r3, #0
    c0ca:	b510      	push	{r4, lr}
    c0cc:	4604      	mov	r4, r0
    c0ce:	6003      	str	r3, [r0, #0]
    c0d0:	6043      	str	r3, [r0, #4]
    c0d2:	6083      	str	r3, [r0, #8]
    c0d4:	8181      	strh	r1, [r0, #12]
    c0d6:	6643      	str	r3, [r0, #100]	; 0x64
    c0d8:	81c2      	strh	r2, [r0, #14]
    c0da:	6103      	str	r3, [r0, #16]
    c0dc:	6143      	str	r3, [r0, #20]
    c0de:	6183      	str	r3, [r0, #24]
    c0e0:	4619      	mov	r1, r3
    c0e2:	2208      	movs	r2, #8
    c0e4:	305c      	adds	r0, #92	; 0x5c
    c0e6:	f7ff fc6c 	bl	b9c2 <memset>
    c0ea:	4b05      	ldr	r3, [pc, #20]	; (c100 <std.isra.0+0x38>)
    c0ec:	6263      	str	r3, [r4, #36]	; 0x24
    c0ee:	4b05      	ldr	r3, [pc, #20]	; (c104 <std.isra.0+0x3c>)
    c0f0:	62a3      	str	r3, [r4, #40]	; 0x28
    c0f2:	4b05      	ldr	r3, [pc, #20]	; (c108 <std.isra.0+0x40>)
    c0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    c0f6:	4b05      	ldr	r3, [pc, #20]	; (c10c <std.isra.0+0x44>)
    c0f8:	6224      	str	r4, [r4, #32]
    c0fa:	6323      	str	r3, [r4, #48]	; 0x30
    c0fc:	bd10      	pop	{r4, pc}
    c0fe:	bf00      	nop
    c100:	0000c8e9 	.word	0x0000c8e9
    c104:	0000c90b 	.word	0x0000c90b
    c108:	0000c943 	.word	0x0000c943
    c10c:	0000c967 	.word	0x0000c967

0000c110 <__sfmoreglue>:
    c110:	b570      	push	{r4, r5, r6, lr}
    c112:	1e4a      	subs	r2, r1, #1
    c114:	2568      	movs	r5, #104	; 0x68
    c116:	4355      	muls	r5, r2
    c118:	460e      	mov	r6, r1
    c11a:	f105 0174 	add.w	r1, r5, #116	; 0x74
    c11e:	f7ff fca7 	bl	ba70 <_malloc_r>
    c122:	4604      	mov	r4, r0
    c124:	b140      	cbz	r0, c138 <__sfmoreglue+0x28>
    c126:	2100      	movs	r1, #0
    c128:	e880 0042 	stmia.w	r0, {r1, r6}
    c12c:	300c      	adds	r0, #12
    c12e:	60a0      	str	r0, [r4, #8]
    c130:	f105 0268 	add.w	r2, r5, #104	; 0x68
    c134:	f7ff fc45 	bl	b9c2 <memset>
    c138:	4620      	mov	r0, r4
    c13a:	bd70      	pop	{r4, r5, r6, pc}

0000c13c <__sinit>:
    c13c:	6983      	ldr	r3, [r0, #24]
    c13e:	b510      	push	{r4, lr}
    c140:	4604      	mov	r4, r0
    c142:	bb33      	cbnz	r3, c192 <__sinit+0x56>
    c144:	6483      	str	r3, [r0, #72]	; 0x48
    c146:	64c3      	str	r3, [r0, #76]	; 0x4c
    c148:	6503      	str	r3, [r0, #80]	; 0x50
    c14a:	4b12      	ldr	r3, [pc, #72]	; (c194 <__sinit+0x58>)
    c14c:	4a12      	ldr	r2, [pc, #72]	; (c198 <__sinit+0x5c>)
    c14e:	681b      	ldr	r3, [r3, #0]
    c150:	6282      	str	r2, [r0, #40]	; 0x28
    c152:	4298      	cmp	r0, r3
    c154:	bf04      	itt	eq
    c156:	2301      	moveq	r3, #1
    c158:	6183      	streq	r3, [r0, #24]
    c15a:	f000 f81f 	bl	c19c <__sfp>
    c15e:	6060      	str	r0, [r4, #4]
    c160:	4620      	mov	r0, r4
    c162:	f000 f81b 	bl	c19c <__sfp>
    c166:	60a0      	str	r0, [r4, #8]
    c168:	4620      	mov	r0, r4
    c16a:	f000 f817 	bl	c19c <__sfp>
    c16e:	2200      	movs	r2, #0
    c170:	60e0      	str	r0, [r4, #12]
    c172:	2104      	movs	r1, #4
    c174:	6860      	ldr	r0, [r4, #4]
    c176:	f7ff ffa7 	bl	c0c8 <std.isra.0>
    c17a:	2201      	movs	r2, #1
    c17c:	2109      	movs	r1, #9
    c17e:	68a0      	ldr	r0, [r4, #8]
    c180:	f7ff ffa2 	bl	c0c8 <std.isra.0>
    c184:	2202      	movs	r2, #2
    c186:	2112      	movs	r1, #18
    c188:	68e0      	ldr	r0, [r4, #12]
    c18a:	f7ff ff9d 	bl	c0c8 <std.isra.0>
    c18e:	2301      	movs	r3, #1
    c190:	61a3      	str	r3, [r4, #24]
    c192:	bd10      	pop	{r4, pc}
    c194:	0000d408 	.word	0x0000d408
    c198:	0000c0bd 	.word	0x0000c0bd

0000c19c <__sfp>:
    c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c19e:	4b1c      	ldr	r3, [pc, #112]	; (c210 <__sfp+0x74>)
    c1a0:	681e      	ldr	r6, [r3, #0]
    c1a2:	69b3      	ldr	r3, [r6, #24]
    c1a4:	4607      	mov	r7, r0
    c1a6:	b913      	cbnz	r3, c1ae <__sfp+0x12>
    c1a8:	4630      	mov	r0, r6
    c1aa:	f7ff ffc7 	bl	c13c <__sinit>
    c1ae:	3648      	adds	r6, #72	; 0x48
    c1b0:	68b4      	ldr	r4, [r6, #8]
    c1b2:	6873      	ldr	r3, [r6, #4]
    c1b4:	3b01      	subs	r3, #1
    c1b6:	d503      	bpl.n	c1c0 <__sfp+0x24>
    c1b8:	6833      	ldr	r3, [r6, #0]
    c1ba:	b133      	cbz	r3, c1ca <__sfp+0x2e>
    c1bc:	6836      	ldr	r6, [r6, #0]
    c1be:	e7f7      	b.n	c1b0 <__sfp+0x14>
    c1c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    c1c4:	b16d      	cbz	r5, c1e2 <__sfp+0x46>
    c1c6:	3468      	adds	r4, #104	; 0x68
    c1c8:	e7f4      	b.n	c1b4 <__sfp+0x18>
    c1ca:	2104      	movs	r1, #4
    c1cc:	4638      	mov	r0, r7
    c1ce:	f7ff ff9f 	bl	c110 <__sfmoreglue>
    c1d2:	6030      	str	r0, [r6, #0]
    c1d4:	2800      	cmp	r0, #0
    c1d6:	d1f1      	bne.n	c1bc <__sfp+0x20>
    c1d8:	230c      	movs	r3, #12
    c1da:	603b      	str	r3, [r7, #0]
    c1dc:	4604      	mov	r4, r0
    c1de:	4620      	mov	r0, r4
    c1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c1e6:	81e3      	strh	r3, [r4, #14]
    c1e8:	2301      	movs	r3, #1
    c1ea:	81a3      	strh	r3, [r4, #12]
    c1ec:	6665      	str	r5, [r4, #100]	; 0x64
    c1ee:	6025      	str	r5, [r4, #0]
    c1f0:	60a5      	str	r5, [r4, #8]
    c1f2:	6065      	str	r5, [r4, #4]
    c1f4:	6125      	str	r5, [r4, #16]
    c1f6:	6165      	str	r5, [r4, #20]
    c1f8:	61a5      	str	r5, [r4, #24]
    c1fa:	2208      	movs	r2, #8
    c1fc:	4629      	mov	r1, r5
    c1fe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c202:	f7ff fbde 	bl	b9c2 <memset>
    c206:	6365      	str	r5, [r4, #52]	; 0x34
    c208:	63a5      	str	r5, [r4, #56]	; 0x38
    c20a:	64a5      	str	r5, [r4, #72]	; 0x48
    c20c:	64e5      	str	r5, [r4, #76]	; 0x4c
    c20e:	e7e6      	b.n	c1de <__sfp+0x42>
    c210:	0000d408 	.word	0x0000d408

0000c214 <_fwalk_reent>:
    c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c218:	4680      	mov	r8, r0
    c21a:	4689      	mov	r9, r1
    c21c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    c220:	2600      	movs	r6, #0
    c222:	b914      	cbnz	r4, c22a <_fwalk_reent+0x16>
    c224:	4630      	mov	r0, r6
    c226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c22a:	68a5      	ldr	r5, [r4, #8]
    c22c:	6867      	ldr	r7, [r4, #4]
    c22e:	3f01      	subs	r7, #1
    c230:	d501      	bpl.n	c236 <_fwalk_reent+0x22>
    c232:	6824      	ldr	r4, [r4, #0]
    c234:	e7f5      	b.n	c222 <_fwalk_reent+0xe>
    c236:	89ab      	ldrh	r3, [r5, #12]
    c238:	2b01      	cmp	r3, #1
    c23a:	d907      	bls.n	c24c <_fwalk_reent+0x38>
    c23c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c240:	3301      	adds	r3, #1
    c242:	d003      	beq.n	c24c <_fwalk_reent+0x38>
    c244:	4629      	mov	r1, r5
    c246:	4640      	mov	r0, r8
    c248:	47c8      	blx	r9
    c24a:	4306      	orrs	r6, r0
    c24c:	3568      	adds	r5, #104	; 0x68
    c24e:	e7ee      	b.n	c22e <_fwalk_reent+0x1a>

0000c250 <__swhatbuf_r>:
    c250:	b570      	push	{r4, r5, r6, lr}
    c252:	460e      	mov	r6, r1
    c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c258:	2900      	cmp	r1, #0
    c25a:	b090      	sub	sp, #64	; 0x40
    c25c:	4614      	mov	r4, r2
    c25e:	461d      	mov	r5, r3
    c260:	da07      	bge.n	c272 <__swhatbuf_r+0x22>
    c262:	2300      	movs	r3, #0
    c264:	602b      	str	r3, [r5, #0]
    c266:	89b3      	ldrh	r3, [r6, #12]
    c268:	061a      	lsls	r2, r3, #24
    c26a:	d410      	bmi.n	c28e <__swhatbuf_r+0x3e>
    c26c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c270:	e00e      	b.n	c290 <__swhatbuf_r+0x40>
    c272:	aa01      	add	r2, sp, #4
    c274:	f000 fb9e 	bl	c9b4 <_fstat_r>
    c278:	2800      	cmp	r0, #0
    c27a:	dbf2      	blt.n	c262 <__swhatbuf_r+0x12>
    c27c:	9a02      	ldr	r2, [sp, #8]
    c27e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    c282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    c286:	425a      	negs	r2, r3
    c288:	415a      	adcs	r2, r3
    c28a:	602a      	str	r2, [r5, #0]
    c28c:	e7ee      	b.n	c26c <__swhatbuf_r+0x1c>
    c28e:	2340      	movs	r3, #64	; 0x40
    c290:	2000      	movs	r0, #0
    c292:	6023      	str	r3, [r4, #0]
    c294:	b010      	add	sp, #64	; 0x40
    c296:	bd70      	pop	{r4, r5, r6, pc}

0000c298 <__smakebuf_r>:
    c298:	898b      	ldrh	r3, [r1, #12]
    c29a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c29c:	079d      	lsls	r5, r3, #30
    c29e:	4606      	mov	r6, r0
    c2a0:	460c      	mov	r4, r1
    c2a2:	d507      	bpl.n	c2b4 <__smakebuf_r+0x1c>
    c2a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c2a8:	6023      	str	r3, [r4, #0]
    c2aa:	6123      	str	r3, [r4, #16]
    c2ac:	2301      	movs	r3, #1
    c2ae:	6163      	str	r3, [r4, #20]
    c2b0:	b002      	add	sp, #8
    c2b2:	bd70      	pop	{r4, r5, r6, pc}
    c2b4:	ab01      	add	r3, sp, #4
    c2b6:	466a      	mov	r2, sp
    c2b8:	f7ff ffca 	bl	c250 <__swhatbuf_r>
    c2bc:	9900      	ldr	r1, [sp, #0]
    c2be:	4605      	mov	r5, r0
    c2c0:	4630      	mov	r0, r6
    c2c2:	f7ff fbd5 	bl	ba70 <_malloc_r>
    c2c6:	b948      	cbnz	r0, c2dc <__smakebuf_r+0x44>
    c2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c2cc:	059a      	lsls	r2, r3, #22
    c2ce:	d4ef      	bmi.n	c2b0 <__smakebuf_r+0x18>
    c2d0:	f023 0303 	bic.w	r3, r3, #3
    c2d4:	f043 0302 	orr.w	r3, r3, #2
    c2d8:	81a3      	strh	r3, [r4, #12]
    c2da:	e7e3      	b.n	c2a4 <__smakebuf_r+0xc>
    c2dc:	4b0d      	ldr	r3, [pc, #52]	; (c314 <__smakebuf_r+0x7c>)
    c2de:	62b3      	str	r3, [r6, #40]	; 0x28
    c2e0:	89a3      	ldrh	r3, [r4, #12]
    c2e2:	6020      	str	r0, [r4, #0]
    c2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c2e8:	81a3      	strh	r3, [r4, #12]
    c2ea:	9b00      	ldr	r3, [sp, #0]
    c2ec:	6163      	str	r3, [r4, #20]
    c2ee:	9b01      	ldr	r3, [sp, #4]
    c2f0:	6120      	str	r0, [r4, #16]
    c2f2:	b15b      	cbz	r3, c30c <__smakebuf_r+0x74>
    c2f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c2f8:	4630      	mov	r0, r6
    c2fa:	f000 fb6d 	bl	c9d8 <_isatty_r>
    c2fe:	b128      	cbz	r0, c30c <__smakebuf_r+0x74>
    c300:	89a3      	ldrh	r3, [r4, #12]
    c302:	f023 0303 	bic.w	r3, r3, #3
    c306:	f043 0301 	orr.w	r3, r3, #1
    c30a:	81a3      	strh	r3, [r4, #12]
    c30c:	89a3      	ldrh	r3, [r4, #12]
    c30e:	431d      	orrs	r5, r3
    c310:	81a5      	strh	r5, [r4, #12]
    c312:	e7cd      	b.n	c2b0 <__smakebuf_r+0x18>
    c314:	0000c0bd 	.word	0x0000c0bd

0000c318 <__malloc_lock>:
    c318:	4770      	bx	lr

0000c31a <__malloc_unlock>:
    c31a:	4770      	bx	lr

0000c31c <__ssputs_r>:
    c31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c320:	688e      	ldr	r6, [r1, #8]
    c322:	429e      	cmp	r6, r3
    c324:	4682      	mov	sl, r0
    c326:	460c      	mov	r4, r1
    c328:	4691      	mov	r9, r2
    c32a:	4698      	mov	r8, r3
    c32c:	d835      	bhi.n	c39a <__ssputs_r+0x7e>
    c32e:	898a      	ldrh	r2, [r1, #12]
    c330:	f412 6f90 	tst.w	r2, #1152	; 0x480
    c334:	d031      	beq.n	c39a <__ssputs_r+0x7e>
    c336:	6825      	ldr	r5, [r4, #0]
    c338:	6909      	ldr	r1, [r1, #16]
    c33a:	1a6f      	subs	r7, r5, r1
    c33c:	6965      	ldr	r5, [r4, #20]
    c33e:	2302      	movs	r3, #2
    c340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c344:	fb95 f5f3 	sdiv	r5, r5, r3
    c348:	f108 0301 	add.w	r3, r8, #1
    c34c:	443b      	add	r3, r7
    c34e:	429d      	cmp	r5, r3
    c350:	bf38      	it	cc
    c352:	461d      	movcc	r5, r3
    c354:	0553      	lsls	r3, r2, #21
    c356:	d531      	bpl.n	c3bc <__ssputs_r+0xa0>
    c358:	4629      	mov	r1, r5
    c35a:	f7ff fb89 	bl	ba70 <_malloc_r>
    c35e:	4606      	mov	r6, r0
    c360:	b950      	cbnz	r0, c378 <__ssputs_r+0x5c>
    c362:	230c      	movs	r3, #12
    c364:	f8ca 3000 	str.w	r3, [sl]
    c368:	89a3      	ldrh	r3, [r4, #12]
    c36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c36e:	81a3      	strh	r3, [r4, #12]
    c370:	f04f 30ff 	mov.w	r0, #4294967295
    c374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c378:	463a      	mov	r2, r7
    c37a:	6921      	ldr	r1, [r4, #16]
    c37c:	f7ff fb16 	bl	b9ac <memcpy>
    c380:	89a3      	ldrh	r3, [r4, #12]
    c382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    c386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c38a:	81a3      	strh	r3, [r4, #12]
    c38c:	6126      	str	r6, [r4, #16]
    c38e:	6165      	str	r5, [r4, #20]
    c390:	443e      	add	r6, r7
    c392:	1bed      	subs	r5, r5, r7
    c394:	6026      	str	r6, [r4, #0]
    c396:	60a5      	str	r5, [r4, #8]
    c398:	4646      	mov	r6, r8
    c39a:	4546      	cmp	r6, r8
    c39c:	bf28      	it	cs
    c39e:	4646      	movcs	r6, r8
    c3a0:	4632      	mov	r2, r6
    c3a2:	4649      	mov	r1, r9
    c3a4:	6820      	ldr	r0, [r4, #0]
    c3a6:	f000 fb8b 	bl	cac0 <memmove>
    c3aa:	68a3      	ldr	r3, [r4, #8]
    c3ac:	1b9b      	subs	r3, r3, r6
    c3ae:	60a3      	str	r3, [r4, #8]
    c3b0:	6823      	ldr	r3, [r4, #0]
    c3b2:	441e      	add	r6, r3
    c3b4:	6026      	str	r6, [r4, #0]
    c3b6:	2000      	movs	r0, #0
    c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3bc:	462a      	mov	r2, r5
    c3be:	f000 fb99 	bl	caf4 <_realloc_r>
    c3c2:	4606      	mov	r6, r0
    c3c4:	2800      	cmp	r0, #0
    c3c6:	d1e1      	bne.n	c38c <__ssputs_r+0x70>
    c3c8:	6921      	ldr	r1, [r4, #16]
    c3ca:	4650      	mov	r0, sl
    c3cc:	f7ff fb02 	bl	b9d4 <_free_r>
    c3d0:	e7c7      	b.n	c362 <__ssputs_r+0x46>
	...

0000c3d4 <_svfiprintf_r>:
    c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3d8:	b09d      	sub	sp, #116	; 0x74
    c3da:	4680      	mov	r8, r0
    c3dc:	9303      	str	r3, [sp, #12]
    c3de:	898b      	ldrh	r3, [r1, #12]
    c3e0:	061c      	lsls	r4, r3, #24
    c3e2:	460d      	mov	r5, r1
    c3e4:	4616      	mov	r6, r2
    c3e6:	d50f      	bpl.n	c408 <_svfiprintf_r+0x34>
    c3e8:	690b      	ldr	r3, [r1, #16]
    c3ea:	b96b      	cbnz	r3, c408 <_svfiprintf_r+0x34>
    c3ec:	2140      	movs	r1, #64	; 0x40
    c3ee:	f7ff fb3f 	bl	ba70 <_malloc_r>
    c3f2:	6028      	str	r0, [r5, #0]
    c3f4:	6128      	str	r0, [r5, #16]
    c3f6:	b928      	cbnz	r0, c404 <_svfiprintf_r+0x30>
    c3f8:	230c      	movs	r3, #12
    c3fa:	f8c8 3000 	str.w	r3, [r8]
    c3fe:	f04f 30ff 	mov.w	r0, #4294967295
    c402:	e0c5      	b.n	c590 <_svfiprintf_r+0x1bc>
    c404:	2340      	movs	r3, #64	; 0x40
    c406:	616b      	str	r3, [r5, #20]
    c408:	2300      	movs	r3, #0
    c40a:	9309      	str	r3, [sp, #36]	; 0x24
    c40c:	2320      	movs	r3, #32
    c40e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c412:	2330      	movs	r3, #48	; 0x30
    c414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c418:	f04f 0b01 	mov.w	fp, #1
    c41c:	4637      	mov	r7, r6
    c41e:	463c      	mov	r4, r7
    c420:	f814 3b01 	ldrb.w	r3, [r4], #1
    c424:	2b00      	cmp	r3, #0
    c426:	d13c      	bne.n	c4a2 <_svfiprintf_r+0xce>
    c428:	ebb7 0a06 	subs.w	sl, r7, r6
    c42c:	d00b      	beq.n	c446 <_svfiprintf_r+0x72>
    c42e:	4653      	mov	r3, sl
    c430:	4632      	mov	r2, r6
    c432:	4629      	mov	r1, r5
    c434:	4640      	mov	r0, r8
    c436:	f7ff ff71 	bl	c31c <__ssputs_r>
    c43a:	3001      	adds	r0, #1
    c43c:	f000 80a3 	beq.w	c586 <_svfiprintf_r+0x1b2>
    c440:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c442:	4453      	add	r3, sl
    c444:	9309      	str	r3, [sp, #36]	; 0x24
    c446:	783b      	ldrb	r3, [r7, #0]
    c448:	2b00      	cmp	r3, #0
    c44a:	f000 809c 	beq.w	c586 <_svfiprintf_r+0x1b2>
    c44e:	2300      	movs	r3, #0
    c450:	f04f 32ff 	mov.w	r2, #4294967295
    c454:	9304      	str	r3, [sp, #16]
    c456:	9307      	str	r3, [sp, #28]
    c458:	9205      	str	r2, [sp, #20]
    c45a:	9306      	str	r3, [sp, #24]
    c45c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c460:	931a      	str	r3, [sp, #104]	; 0x68
    c462:	2205      	movs	r2, #5
    c464:	7821      	ldrb	r1, [r4, #0]
    c466:	4850      	ldr	r0, [pc, #320]	; (c5a8 <_svfiprintf_r+0x1d4>)
    c468:	f000 fada 	bl	ca20 <memchr>
    c46c:	1c67      	adds	r7, r4, #1
    c46e:	9b04      	ldr	r3, [sp, #16]
    c470:	b9d8      	cbnz	r0, c4aa <_svfiprintf_r+0xd6>
    c472:	06d9      	lsls	r1, r3, #27
    c474:	bf44      	itt	mi
    c476:	2220      	movmi	r2, #32
    c478:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c47c:	071a      	lsls	r2, r3, #28
    c47e:	bf44      	itt	mi
    c480:	222b      	movmi	r2, #43	; 0x2b
    c482:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c486:	7822      	ldrb	r2, [r4, #0]
    c488:	2a2a      	cmp	r2, #42	; 0x2a
    c48a:	d016      	beq.n	c4ba <_svfiprintf_r+0xe6>
    c48c:	9a07      	ldr	r2, [sp, #28]
    c48e:	2100      	movs	r1, #0
    c490:	200a      	movs	r0, #10
    c492:	4627      	mov	r7, r4
    c494:	3401      	adds	r4, #1
    c496:	783b      	ldrb	r3, [r7, #0]
    c498:	3b30      	subs	r3, #48	; 0x30
    c49a:	2b09      	cmp	r3, #9
    c49c:	d951      	bls.n	c542 <_svfiprintf_r+0x16e>
    c49e:	b1c9      	cbz	r1, c4d4 <_svfiprintf_r+0x100>
    c4a0:	e011      	b.n	c4c6 <_svfiprintf_r+0xf2>
    c4a2:	2b25      	cmp	r3, #37	; 0x25
    c4a4:	d0c0      	beq.n	c428 <_svfiprintf_r+0x54>
    c4a6:	4627      	mov	r7, r4
    c4a8:	e7b9      	b.n	c41e <_svfiprintf_r+0x4a>
    c4aa:	4a3f      	ldr	r2, [pc, #252]	; (c5a8 <_svfiprintf_r+0x1d4>)
    c4ac:	1a80      	subs	r0, r0, r2
    c4ae:	fa0b f000 	lsl.w	r0, fp, r0
    c4b2:	4318      	orrs	r0, r3
    c4b4:	9004      	str	r0, [sp, #16]
    c4b6:	463c      	mov	r4, r7
    c4b8:	e7d3      	b.n	c462 <_svfiprintf_r+0x8e>
    c4ba:	9a03      	ldr	r2, [sp, #12]
    c4bc:	1d11      	adds	r1, r2, #4
    c4be:	6812      	ldr	r2, [r2, #0]
    c4c0:	9103      	str	r1, [sp, #12]
    c4c2:	2a00      	cmp	r2, #0
    c4c4:	db01      	blt.n	c4ca <_svfiprintf_r+0xf6>
    c4c6:	9207      	str	r2, [sp, #28]
    c4c8:	e004      	b.n	c4d4 <_svfiprintf_r+0x100>
    c4ca:	4252      	negs	r2, r2
    c4cc:	f043 0302 	orr.w	r3, r3, #2
    c4d0:	9207      	str	r2, [sp, #28]
    c4d2:	9304      	str	r3, [sp, #16]
    c4d4:	783b      	ldrb	r3, [r7, #0]
    c4d6:	2b2e      	cmp	r3, #46	; 0x2e
    c4d8:	d10e      	bne.n	c4f8 <_svfiprintf_r+0x124>
    c4da:	787b      	ldrb	r3, [r7, #1]
    c4dc:	2b2a      	cmp	r3, #42	; 0x2a
    c4de:	f107 0101 	add.w	r1, r7, #1
    c4e2:	d132      	bne.n	c54a <_svfiprintf_r+0x176>
    c4e4:	9b03      	ldr	r3, [sp, #12]
    c4e6:	1d1a      	adds	r2, r3, #4
    c4e8:	681b      	ldr	r3, [r3, #0]
    c4ea:	9203      	str	r2, [sp, #12]
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	bfb8      	it	lt
    c4f0:	f04f 33ff 	movlt.w	r3, #4294967295
    c4f4:	3702      	adds	r7, #2
    c4f6:	9305      	str	r3, [sp, #20]
    c4f8:	4c2c      	ldr	r4, [pc, #176]	; (c5ac <_svfiprintf_r+0x1d8>)
    c4fa:	7839      	ldrb	r1, [r7, #0]
    c4fc:	2203      	movs	r2, #3
    c4fe:	4620      	mov	r0, r4
    c500:	f000 fa8e 	bl	ca20 <memchr>
    c504:	b138      	cbz	r0, c516 <_svfiprintf_r+0x142>
    c506:	2340      	movs	r3, #64	; 0x40
    c508:	1b00      	subs	r0, r0, r4
    c50a:	fa03 f000 	lsl.w	r0, r3, r0
    c50e:	9b04      	ldr	r3, [sp, #16]
    c510:	4303      	orrs	r3, r0
    c512:	9304      	str	r3, [sp, #16]
    c514:	3701      	adds	r7, #1
    c516:	7839      	ldrb	r1, [r7, #0]
    c518:	4825      	ldr	r0, [pc, #148]	; (c5b0 <_svfiprintf_r+0x1dc>)
    c51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c51e:	2206      	movs	r2, #6
    c520:	1c7e      	adds	r6, r7, #1
    c522:	f000 fa7d 	bl	ca20 <memchr>
    c526:	2800      	cmp	r0, #0
    c528:	d035      	beq.n	c596 <_svfiprintf_r+0x1c2>
    c52a:	4b22      	ldr	r3, [pc, #136]	; (c5b4 <_svfiprintf_r+0x1e0>)
    c52c:	b9fb      	cbnz	r3, c56e <_svfiprintf_r+0x19a>
    c52e:	9b03      	ldr	r3, [sp, #12]
    c530:	3307      	adds	r3, #7
    c532:	f023 0307 	bic.w	r3, r3, #7
    c536:	3308      	adds	r3, #8
    c538:	9303      	str	r3, [sp, #12]
    c53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c53c:	444b      	add	r3, r9
    c53e:	9309      	str	r3, [sp, #36]	; 0x24
    c540:	e76c      	b.n	c41c <_svfiprintf_r+0x48>
    c542:	fb00 3202 	mla	r2, r0, r2, r3
    c546:	2101      	movs	r1, #1
    c548:	e7a3      	b.n	c492 <_svfiprintf_r+0xbe>
    c54a:	2300      	movs	r3, #0
    c54c:	9305      	str	r3, [sp, #20]
    c54e:	4618      	mov	r0, r3
    c550:	240a      	movs	r4, #10
    c552:	460f      	mov	r7, r1
    c554:	3101      	adds	r1, #1
    c556:	783a      	ldrb	r2, [r7, #0]
    c558:	3a30      	subs	r2, #48	; 0x30
    c55a:	2a09      	cmp	r2, #9
    c55c:	d903      	bls.n	c566 <_svfiprintf_r+0x192>
    c55e:	2b00      	cmp	r3, #0
    c560:	d0ca      	beq.n	c4f8 <_svfiprintf_r+0x124>
    c562:	9005      	str	r0, [sp, #20]
    c564:	e7c8      	b.n	c4f8 <_svfiprintf_r+0x124>
    c566:	fb04 2000 	mla	r0, r4, r0, r2
    c56a:	2301      	movs	r3, #1
    c56c:	e7f1      	b.n	c552 <_svfiprintf_r+0x17e>
    c56e:	ab03      	add	r3, sp, #12
    c570:	9300      	str	r3, [sp, #0]
    c572:	462a      	mov	r2, r5
    c574:	4b10      	ldr	r3, [pc, #64]	; (c5b8 <_svfiprintf_r+0x1e4>)
    c576:	a904      	add	r1, sp, #16
    c578:	4640      	mov	r0, r8
    c57a:	f3af 8000 	nop.w
    c57e:	f1b0 3fff 	cmp.w	r0, #4294967295
    c582:	4681      	mov	r9, r0
    c584:	d1d9      	bne.n	c53a <_svfiprintf_r+0x166>
    c586:	89ab      	ldrh	r3, [r5, #12]
    c588:	065b      	lsls	r3, r3, #25
    c58a:	f53f af38 	bmi.w	c3fe <_svfiprintf_r+0x2a>
    c58e:	9809      	ldr	r0, [sp, #36]	; 0x24
    c590:	b01d      	add	sp, #116	; 0x74
    c592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c596:	ab03      	add	r3, sp, #12
    c598:	9300      	str	r3, [sp, #0]
    c59a:	462a      	mov	r2, r5
    c59c:	4b06      	ldr	r3, [pc, #24]	; (c5b8 <_svfiprintf_r+0x1e4>)
    c59e:	a904      	add	r1, sp, #16
    c5a0:	4640      	mov	r0, r8
    c5a2:	f000 f881 	bl	c6a8 <_printf_i>
    c5a6:	e7ea      	b.n	c57e <_svfiprintf_r+0x1aa>
    c5a8:	0000d46c 	.word	0x0000d46c
    c5ac:	0000d472 	.word	0x0000d472
    c5b0:	0000d476 	.word	0x0000d476
    c5b4:	00000000 	.word	0x00000000
    c5b8:	0000c31d 	.word	0x0000c31d

0000c5bc <_printf_common>:
    c5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5c0:	4691      	mov	r9, r2
    c5c2:	461f      	mov	r7, r3
    c5c4:	688a      	ldr	r2, [r1, #8]
    c5c6:	690b      	ldr	r3, [r1, #16]
    c5c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    c5cc:	4293      	cmp	r3, r2
    c5ce:	bfb8      	it	lt
    c5d0:	4613      	movlt	r3, r2
    c5d2:	f8c9 3000 	str.w	r3, [r9]
    c5d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c5da:	4606      	mov	r6, r0
    c5dc:	460c      	mov	r4, r1
    c5de:	b112      	cbz	r2, c5e6 <_printf_common+0x2a>
    c5e0:	3301      	adds	r3, #1
    c5e2:	f8c9 3000 	str.w	r3, [r9]
    c5e6:	6823      	ldr	r3, [r4, #0]
    c5e8:	0699      	lsls	r1, r3, #26
    c5ea:	bf42      	ittt	mi
    c5ec:	f8d9 3000 	ldrmi.w	r3, [r9]
    c5f0:	3302      	addmi	r3, #2
    c5f2:	f8c9 3000 	strmi.w	r3, [r9]
    c5f6:	6825      	ldr	r5, [r4, #0]
    c5f8:	f015 0506 	ands.w	r5, r5, #6
    c5fc:	d107      	bne.n	c60e <_printf_common+0x52>
    c5fe:	f104 0a19 	add.w	sl, r4, #25
    c602:	68e3      	ldr	r3, [r4, #12]
    c604:	f8d9 2000 	ldr.w	r2, [r9]
    c608:	1a9b      	subs	r3, r3, r2
    c60a:	429d      	cmp	r5, r3
    c60c:	db29      	blt.n	c662 <_printf_common+0xa6>
    c60e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    c612:	6822      	ldr	r2, [r4, #0]
    c614:	3300      	adds	r3, #0
    c616:	bf18      	it	ne
    c618:	2301      	movne	r3, #1
    c61a:	0692      	lsls	r2, r2, #26
    c61c:	d42e      	bmi.n	c67c <_printf_common+0xc0>
    c61e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c622:	4639      	mov	r1, r7
    c624:	4630      	mov	r0, r6
    c626:	47c0      	blx	r8
    c628:	3001      	adds	r0, #1
    c62a:	d021      	beq.n	c670 <_printf_common+0xb4>
    c62c:	6823      	ldr	r3, [r4, #0]
    c62e:	68e5      	ldr	r5, [r4, #12]
    c630:	f8d9 2000 	ldr.w	r2, [r9]
    c634:	f003 0306 	and.w	r3, r3, #6
    c638:	2b04      	cmp	r3, #4
    c63a:	bf08      	it	eq
    c63c:	1aad      	subeq	r5, r5, r2
    c63e:	68a3      	ldr	r3, [r4, #8]
    c640:	6922      	ldr	r2, [r4, #16]
    c642:	bf0c      	ite	eq
    c644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    c648:	2500      	movne	r5, #0
    c64a:	4293      	cmp	r3, r2
    c64c:	bfc4      	itt	gt
    c64e:	1a9b      	subgt	r3, r3, r2
    c650:	18ed      	addgt	r5, r5, r3
    c652:	f04f 0900 	mov.w	r9, #0
    c656:	341a      	adds	r4, #26
    c658:	454d      	cmp	r5, r9
    c65a:	d11b      	bne.n	c694 <_printf_common+0xd8>
    c65c:	2000      	movs	r0, #0
    c65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c662:	2301      	movs	r3, #1
    c664:	4652      	mov	r2, sl
    c666:	4639      	mov	r1, r7
    c668:	4630      	mov	r0, r6
    c66a:	47c0      	blx	r8
    c66c:	3001      	adds	r0, #1
    c66e:	d103      	bne.n	c678 <_printf_common+0xbc>
    c670:	f04f 30ff 	mov.w	r0, #4294967295
    c674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c678:	3501      	adds	r5, #1
    c67a:	e7c2      	b.n	c602 <_printf_common+0x46>
    c67c:	18e1      	adds	r1, r4, r3
    c67e:	1c5a      	adds	r2, r3, #1
    c680:	2030      	movs	r0, #48	; 0x30
    c682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    c686:	4422      	add	r2, r4
    c688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    c68c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    c690:	3302      	adds	r3, #2
    c692:	e7c4      	b.n	c61e <_printf_common+0x62>
    c694:	2301      	movs	r3, #1
    c696:	4622      	mov	r2, r4
    c698:	4639      	mov	r1, r7
    c69a:	4630      	mov	r0, r6
    c69c:	47c0      	blx	r8
    c69e:	3001      	adds	r0, #1
    c6a0:	d0e6      	beq.n	c670 <_printf_common+0xb4>
    c6a2:	f109 0901 	add.w	r9, r9, #1
    c6a6:	e7d7      	b.n	c658 <_printf_common+0x9c>

0000c6a8 <_printf_i>:
    c6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c6ac:	4617      	mov	r7, r2
    c6ae:	7e0a      	ldrb	r2, [r1, #24]
    c6b0:	b085      	sub	sp, #20
    c6b2:	2a6e      	cmp	r2, #110	; 0x6e
    c6b4:	4698      	mov	r8, r3
    c6b6:	4606      	mov	r6, r0
    c6b8:	460c      	mov	r4, r1
    c6ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c6bc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    c6c0:	f000 80bc 	beq.w	c83c <_printf_i+0x194>
    c6c4:	d81a      	bhi.n	c6fc <_printf_i+0x54>
    c6c6:	2a63      	cmp	r2, #99	; 0x63
    c6c8:	d02e      	beq.n	c728 <_printf_i+0x80>
    c6ca:	d80a      	bhi.n	c6e2 <_printf_i+0x3a>
    c6cc:	2a00      	cmp	r2, #0
    c6ce:	f000 80c8 	beq.w	c862 <_printf_i+0x1ba>
    c6d2:	2a58      	cmp	r2, #88	; 0x58
    c6d4:	f000 808a 	beq.w	c7ec <_printf_i+0x144>
    c6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    c6dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    c6e0:	e02a      	b.n	c738 <_printf_i+0x90>
    c6e2:	2a64      	cmp	r2, #100	; 0x64
    c6e4:	d001      	beq.n	c6ea <_printf_i+0x42>
    c6e6:	2a69      	cmp	r2, #105	; 0x69
    c6e8:	d1f6      	bne.n	c6d8 <_printf_i+0x30>
    c6ea:	6821      	ldr	r1, [r4, #0]
    c6ec:	681a      	ldr	r2, [r3, #0]
    c6ee:	f011 0f80 	tst.w	r1, #128	; 0x80
    c6f2:	d023      	beq.n	c73c <_printf_i+0x94>
    c6f4:	1d11      	adds	r1, r2, #4
    c6f6:	6019      	str	r1, [r3, #0]
    c6f8:	6813      	ldr	r3, [r2, #0]
    c6fa:	e027      	b.n	c74c <_printf_i+0xa4>
    c6fc:	2a73      	cmp	r2, #115	; 0x73
    c6fe:	f000 80b4 	beq.w	c86a <_printf_i+0x1c2>
    c702:	d808      	bhi.n	c716 <_printf_i+0x6e>
    c704:	2a6f      	cmp	r2, #111	; 0x6f
    c706:	d02a      	beq.n	c75e <_printf_i+0xb6>
    c708:	2a70      	cmp	r2, #112	; 0x70
    c70a:	d1e5      	bne.n	c6d8 <_printf_i+0x30>
    c70c:	680a      	ldr	r2, [r1, #0]
    c70e:	f042 0220 	orr.w	r2, r2, #32
    c712:	600a      	str	r2, [r1, #0]
    c714:	e003      	b.n	c71e <_printf_i+0x76>
    c716:	2a75      	cmp	r2, #117	; 0x75
    c718:	d021      	beq.n	c75e <_printf_i+0xb6>
    c71a:	2a78      	cmp	r2, #120	; 0x78
    c71c:	d1dc      	bne.n	c6d8 <_printf_i+0x30>
    c71e:	2278      	movs	r2, #120	; 0x78
    c720:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    c724:	496e      	ldr	r1, [pc, #440]	; (c8e0 <_printf_i+0x238>)
    c726:	e064      	b.n	c7f2 <_printf_i+0x14a>
    c728:	681a      	ldr	r2, [r3, #0]
    c72a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    c72e:	1d11      	adds	r1, r2, #4
    c730:	6019      	str	r1, [r3, #0]
    c732:	6813      	ldr	r3, [r2, #0]
    c734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    c738:	2301      	movs	r3, #1
    c73a:	e0a3      	b.n	c884 <_printf_i+0x1dc>
    c73c:	f011 0f40 	tst.w	r1, #64	; 0x40
    c740:	f102 0104 	add.w	r1, r2, #4
    c744:	6019      	str	r1, [r3, #0]
    c746:	d0d7      	beq.n	c6f8 <_printf_i+0x50>
    c748:	f9b2 3000 	ldrsh.w	r3, [r2]
    c74c:	2b00      	cmp	r3, #0
    c74e:	da03      	bge.n	c758 <_printf_i+0xb0>
    c750:	222d      	movs	r2, #45	; 0x2d
    c752:	425b      	negs	r3, r3
    c754:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    c758:	4962      	ldr	r1, [pc, #392]	; (c8e4 <_printf_i+0x23c>)
    c75a:	220a      	movs	r2, #10
    c75c:	e017      	b.n	c78e <_printf_i+0xe6>
    c75e:	6820      	ldr	r0, [r4, #0]
    c760:	6819      	ldr	r1, [r3, #0]
    c762:	f010 0f80 	tst.w	r0, #128	; 0x80
    c766:	d003      	beq.n	c770 <_printf_i+0xc8>
    c768:	1d08      	adds	r0, r1, #4
    c76a:	6018      	str	r0, [r3, #0]
    c76c:	680b      	ldr	r3, [r1, #0]
    c76e:	e006      	b.n	c77e <_printf_i+0xd6>
    c770:	f010 0f40 	tst.w	r0, #64	; 0x40
    c774:	f101 0004 	add.w	r0, r1, #4
    c778:	6018      	str	r0, [r3, #0]
    c77a:	d0f7      	beq.n	c76c <_printf_i+0xc4>
    c77c:	880b      	ldrh	r3, [r1, #0]
    c77e:	4959      	ldr	r1, [pc, #356]	; (c8e4 <_printf_i+0x23c>)
    c780:	2a6f      	cmp	r2, #111	; 0x6f
    c782:	bf14      	ite	ne
    c784:	220a      	movne	r2, #10
    c786:	2208      	moveq	r2, #8
    c788:	2000      	movs	r0, #0
    c78a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    c78e:	6865      	ldr	r5, [r4, #4]
    c790:	60a5      	str	r5, [r4, #8]
    c792:	2d00      	cmp	r5, #0
    c794:	f2c0 809c 	blt.w	c8d0 <_printf_i+0x228>
    c798:	6820      	ldr	r0, [r4, #0]
    c79a:	f020 0004 	bic.w	r0, r0, #4
    c79e:	6020      	str	r0, [r4, #0]
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d13f      	bne.n	c824 <_printf_i+0x17c>
    c7a4:	2d00      	cmp	r5, #0
    c7a6:	f040 8095 	bne.w	c8d4 <_printf_i+0x22c>
    c7aa:	4675      	mov	r5, lr
    c7ac:	2a08      	cmp	r2, #8
    c7ae:	d10b      	bne.n	c7c8 <_printf_i+0x120>
    c7b0:	6823      	ldr	r3, [r4, #0]
    c7b2:	07da      	lsls	r2, r3, #31
    c7b4:	d508      	bpl.n	c7c8 <_printf_i+0x120>
    c7b6:	6923      	ldr	r3, [r4, #16]
    c7b8:	6862      	ldr	r2, [r4, #4]
    c7ba:	429a      	cmp	r2, r3
    c7bc:	bfde      	ittt	le
    c7be:	2330      	movle	r3, #48	; 0x30
    c7c0:	f805 3c01 	strble.w	r3, [r5, #-1]
    c7c4:	f105 35ff 	addle.w	r5, r5, #4294967295
    c7c8:	ebae 0305 	sub.w	r3, lr, r5
    c7cc:	6123      	str	r3, [r4, #16]
    c7ce:	f8cd 8000 	str.w	r8, [sp]
    c7d2:	463b      	mov	r3, r7
    c7d4:	aa03      	add	r2, sp, #12
    c7d6:	4621      	mov	r1, r4
    c7d8:	4630      	mov	r0, r6
    c7da:	f7ff feef 	bl	c5bc <_printf_common>
    c7de:	3001      	adds	r0, #1
    c7e0:	d155      	bne.n	c88e <_printf_i+0x1e6>
    c7e2:	f04f 30ff 	mov.w	r0, #4294967295
    c7e6:	b005      	add	sp, #20
    c7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c7ec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    c7f0:	493c      	ldr	r1, [pc, #240]	; (c8e4 <_printf_i+0x23c>)
    c7f2:	6822      	ldr	r2, [r4, #0]
    c7f4:	6818      	ldr	r0, [r3, #0]
    c7f6:	f012 0f80 	tst.w	r2, #128	; 0x80
    c7fa:	f100 0504 	add.w	r5, r0, #4
    c7fe:	601d      	str	r5, [r3, #0]
    c800:	d001      	beq.n	c806 <_printf_i+0x15e>
    c802:	6803      	ldr	r3, [r0, #0]
    c804:	e002      	b.n	c80c <_printf_i+0x164>
    c806:	0655      	lsls	r5, r2, #25
    c808:	d5fb      	bpl.n	c802 <_printf_i+0x15a>
    c80a:	8803      	ldrh	r3, [r0, #0]
    c80c:	07d0      	lsls	r0, r2, #31
    c80e:	bf44      	itt	mi
    c810:	f042 0220 	orrmi.w	r2, r2, #32
    c814:	6022      	strmi	r2, [r4, #0]
    c816:	b91b      	cbnz	r3, c820 <_printf_i+0x178>
    c818:	6822      	ldr	r2, [r4, #0]
    c81a:	f022 0220 	bic.w	r2, r2, #32
    c81e:	6022      	str	r2, [r4, #0]
    c820:	2210      	movs	r2, #16
    c822:	e7b1      	b.n	c788 <_printf_i+0xe0>
    c824:	4675      	mov	r5, lr
    c826:	fbb3 f0f2 	udiv	r0, r3, r2
    c82a:	fb02 3310 	mls	r3, r2, r0, r3
    c82e:	5ccb      	ldrb	r3, [r1, r3]
    c830:	f805 3d01 	strb.w	r3, [r5, #-1]!
    c834:	4603      	mov	r3, r0
    c836:	2800      	cmp	r0, #0
    c838:	d1f5      	bne.n	c826 <_printf_i+0x17e>
    c83a:	e7b7      	b.n	c7ac <_printf_i+0x104>
    c83c:	6808      	ldr	r0, [r1, #0]
    c83e:	681a      	ldr	r2, [r3, #0]
    c840:	6949      	ldr	r1, [r1, #20]
    c842:	f010 0f80 	tst.w	r0, #128	; 0x80
    c846:	d004      	beq.n	c852 <_printf_i+0x1aa>
    c848:	1d10      	adds	r0, r2, #4
    c84a:	6018      	str	r0, [r3, #0]
    c84c:	6813      	ldr	r3, [r2, #0]
    c84e:	6019      	str	r1, [r3, #0]
    c850:	e007      	b.n	c862 <_printf_i+0x1ba>
    c852:	f010 0f40 	tst.w	r0, #64	; 0x40
    c856:	f102 0004 	add.w	r0, r2, #4
    c85a:	6018      	str	r0, [r3, #0]
    c85c:	6813      	ldr	r3, [r2, #0]
    c85e:	d0f6      	beq.n	c84e <_printf_i+0x1a6>
    c860:	8019      	strh	r1, [r3, #0]
    c862:	2300      	movs	r3, #0
    c864:	6123      	str	r3, [r4, #16]
    c866:	4675      	mov	r5, lr
    c868:	e7b1      	b.n	c7ce <_printf_i+0x126>
    c86a:	681a      	ldr	r2, [r3, #0]
    c86c:	1d11      	adds	r1, r2, #4
    c86e:	6019      	str	r1, [r3, #0]
    c870:	6815      	ldr	r5, [r2, #0]
    c872:	6862      	ldr	r2, [r4, #4]
    c874:	2100      	movs	r1, #0
    c876:	4628      	mov	r0, r5
    c878:	f000 f8d2 	bl	ca20 <memchr>
    c87c:	b108      	cbz	r0, c882 <_printf_i+0x1da>
    c87e:	1b40      	subs	r0, r0, r5
    c880:	6060      	str	r0, [r4, #4]
    c882:	6863      	ldr	r3, [r4, #4]
    c884:	6123      	str	r3, [r4, #16]
    c886:	2300      	movs	r3, #0
    c888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    c88c:	e79f      	b.n	c7ce <_printf_i+0x126>
    c88e:	6923      	ldr	r3, [r4, #16]
    c890:	462a      	mov	r2, r5
    c892:	4639      	mov	r1, r7
    c894:	4630      	mov	r0, r6
    c896:	47c0      	blx	r8
    c898:	3001      	adds	r0, #1
    c89a:	d0a2      	beq.n	c7e2 <_printf_i+0x13a>
    c89c:	6823      	ldr	r3, [r4, #0]
    c89e:	079b      	lsls	r3, r3, #30
    c8a0:	d507      	bpl.n	c8b2 <_printf_i+0x20a>
    c8a2:	2500      	movs	r5, #0
    c8a4:	f104 0919 	add.w	r9, r4, #25
    c8a8:	68e3      	ldr	r3, [r4, #12]
    c8aa:	9a03      	ldr	r2, [sp, #12]
    c8ac:	1a9b      	subs	r3, r3, r2
    c8ae:	429d      	cmp	r5, r3
    c8b0:	db05      	blt.n	c8be <_printf_i+0x216>
    c8b2:	68e0      	ldr	r0, [r4, #12]
    c8b4:	9b03      	ldr	r3, [sp, #12]
    c8b6:	4298      	cmp	r0, r3
    c8b8:	bfb8      	it	lt
    c8ba:	4618      	movlt	r0, r3
    c8bc:	e793      	b.n	c7e6 <_printf_i+0x13e>
    c8be:	2301      	movs	r3, #1
    c8c0:	464a      	mov	r2, r9
    c8c2:	4639      	mov	r1, r7
    c8c4:	4630      	mov	r0, r6
    c8c6:	47c0      	blx	r8
    c8c8:	3001      	adds	r0, #1
    c8ca:	d08a      	beq.n	c7e2 <_printf_i+0x13a>
    c8cc:	3501      	adds	r5, #1
    c8ce:	e7eb      	b.n	c8a8 <_printf_i+0x200>
    c8d0:	2b00      	cmp	r3, #0
    c8d2:	d1a7      	bne.n	c824 <_printf_i+0x17c>
    c8d4:	780b      	ldrb	r3, [r1, #0]
    c8d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    c8da:	f104 0542 	add.w	r5, r4, #66	; 0x42
    c8de:	e765      	b.n	c7ac <_printf_i+0x104>
    c8e0:	0000d48e 	.word	0x0000d48e
    c8e4:	0000d47d 	.word	0x0000d47d

0000c8e8 <__sread>:
    c8e8:	b510      	push	{r4, lr}
    c8ea:	460c      	mov	r4, r1
    c8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c8f0:	f000 f926 	bl	cb40 <_read_r>
    c8f4:	2800      	cmp	r0, #0
    c8f6:	bfab      	itete	ge
    c8f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    c8fa:	89a3      	ldrhlt	r3, [r4, #12]
    c8fc:	181b      	addge	r3, r3, r0
    c8fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    c902:	bfac      	ite	ge
    c904:	6563      	strge	r3, [r4, #84]	; 0x54
    c906:	81a3      	strhlt	r3, [r4, #12]
    c908:	bd10      	pop	{r4, pc}

0000c90a <__swrite>:
    c90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c90e:	461f      	mov	r7, r3
    c910:	898b      	ldrh	r3, [r1, #12]
    c912:	05db      	lsls	r3, r3, #23
    c914:	4605      	mov	r5, r0
    c916:	460c      	mov	r4, r1
    c918:	4616      	mov	r6, r2
    c91a:	d505      	bpl.n	c928 <__swrite+0x1e>
    c91c:	2302      	movs	r3, #2
    c91e:	2200      	movs	r2, #0
    c920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c924:	f000 f868 	bl	c9f8 <_lseek_r>
    c928:	89a3      	ldrh	r3, [r4, #12]
    c92a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c92e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c932:	81a3      	strh	r3, [r4, #12]
    c934:	4632      	mov	r2, r6
    c936:	463b      	mov	r3, r7
    c938:	4628      	mov	r0, r5
    c93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c93e:	f000 b817 	b.w	c970 <_write_r>

0000c942 <__sseek>:
    c942:	b510      	push	{r4, lr}
    c944:	460c      	mov	r4, r1
    c946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c94a:	f000 f855 	bl	c9f8 <_lseek_r>
    c94e:	1c43      	adds	r3, r0, #1
    c950:	89a3      	ldrh	r3, [r4, #12]
    c952:	bf15      	itete	ne
    c954:	6560      	strne	r0, [r4, #84]	; 0x54
    c956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    c95a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    c95e:	81a3      	strheq	r3, [r4, #12]
    c960:	bf18      	it	ne
    c962:	81a3      	strhne	r3, [r4, #12]
    c964:	bd10      	pop	{r4, pc}

0000c966 <__sclose>:
    c966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c96a:	f000 b813 	b.w	c994 <_close_r>
	...

0000c970 <_write_r>:
    c970:	b538      	push	{r3, r4, r5, lr}
    c972:	4c07      	ldr	r4, [pc, #28]	; (c990 <_write_r+0x20>)
    c974:	4605      	mov	r5, r0
    c976:	4608      	mov	r0, r1
    c978:	4611      	mov	r1, r2
    c97a:	2200      	movs	r2, #0
    c97c:	6022      	str	r2, [r4, #0]
    c97e:	461a      	mov	r2, r3
    c980:	f7fd f9a8 	bl	9cd4 <_write>
    c984:	1c43      	adds	r3, r0, #1
    c986:	d102      	bne.n	c98e <_write_r+0x1e>
    c988:	6823      	ldr	r3, [r4, #0]
    c98a:	b103      	cbz	r3, c98e <_write_r+0x1e>
    c98c:	602b      	str	r3, [r5, #0]
    c98e:	bd38      	pop	{r3, r4, r5, pc}
    c990:	20003d5c 	.word	0x20003d5c

0000c994 <_close_r>:
    c994:	b538      	push	{r3, r4, r5, lr}
    c996:	4c06      	ldr	r4, [pc, #24]	; (c9b0 <_close_r+0x1c>)
    c998:	2300      	movs	r3, #0
    c99a:	4605      	mov	r5, r0
    c99c:	4608      	mov	r0, r1
    c99e:	6023      	str	r3, [r4, #0]
    c9a0:	f7f9 f8bc 	bl	5b1c <_close>
    c9a4:	1c43      	adds	r3, r0, #1
    c9a6:	d102      	bne.n	c9ae <_close_r+0x1a>
    c9a8:	6823      	ldr	r3, [r4, #0]
    c9aa:	b103      	cbz	r3, c9ae <_close_r+0x1a>
    c9ac:	602b      	str	r3, [r5, #0]
    c9ae:	bd38      	pop	{r3, r4, r5, pc}
    c9b0:	20003d5c 	.word	0x20003d5c

0000c9b4 <_fstat_r>:
    c9b4:	b538      	push	{r3, r4, r5, lr}
    c9b6:	4c07      	ldr	r4, [pc, #28]	; (c9d4 <_fstat_r+0x20>)
    c9b8:	2300      	movs	r3, #0
    c9ba:	4605      	mov	r5, r0
    c9bc:	4608      	mov	r0, r1
    c9be:	4611      	mov	r1, r2
    c9c0:	6023      	str	r3, [r4, #0]
    c9c2:	f7f9 f8ae 	bl	5b22 <_fstat>
    c9c6:	1c43      	adds	r3, r0, #1
    c9c8:	d102      	bne.n	c9d0 <_fstat_r+0x1c>
    c9ca:	6823      	ldr	r3, [r4, #0]
    c9cc:	b103      	cbz	r3, c9d0 <_fstat_r+0x1c>
    c9ce:	602b      	str	r3, [r5, #0]
    c9d0:	bd38      	pop	{r3, r4, r5, pc}
    c9d2:	bf00      	nop
    c9d4:	20003d5c 	.word	0x20003d5c

0000c9d8 <_isatty_r>:
    c9d8:	b538      	push	{r3, r4, r5, lr}
    c9da:	4c06      	ldr	r4, [pc, #24]	; (c9f4 <_isatty_r+0x1c>)
    c9dc:	2300      	movs	r3, #0
    c9de:	4605      	mov	r5, r0
    c9e0:	4608      	mov	r0, r1
    c9e2:	6023      	str	r3, [r4, #0]
    c9e4:	f7f9 f8a2 	bl	5b2c <_isatty>
    c9e8:	1c43      	adds	r3, r0, #1
    c9ea:	d102      	bne.n	c9f2 <_isatty_r+0x1a>
    c9ec:	6823      	ldr	r3, [r4, #0]
    c9ee:	b103      	cbz	r3, c9f2 <_isatty_r+0x1a>
    c9f0:	602b      	str	r3, [r5, #0]
    c9f2:	bd38      	pop	{r3, r4, r5, pc}
    c9f4:	20003d5c 	.word	0x20003d5c

0000c9f8 <_lseek_r>:
    c9f8:	b538      	push	{r3, r4, r5, lr}
    c9fa:	4c07      	ldr	r4, [pc, #28]	; (ca18 <_lseek_r+0x20>)
    c9fc:	4605      	mov	r5, r0
    c9fe:	4608      	mov	r0, r1
    ca00:	4611      	mov	r1, r2
    ca02:	2200      	movs	r2, #0
    ca04:	6022      	str	r2, [r4, #0]
    ca06:	461a      	mov	r2, r3
    ca08:	f7f9 f892 	bl	5b30 <_lseek>
    ca0c:	1c43      	adds	r3, r0, #1
    ca0e:	d102      	bne.n	ca16 <_lseek_r+0x1e>
    ca10:	6823      	ldr	r3, [r4, #0]
    ca12:	b103      	cbz	r3, ca16 <_lseek_r+0x1e>
    ca14:	602b      	str	r3, [r5, #0]
    ca16:	bd38      	pop	{r3, r4, r5, pc}
    ca18:	20003d5c 	.word	0x20003d5c
    ca1c:	00000000 	.word	0x00000000

0000ca20 <memchr>:
    ca20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ca24:	2a10      	cmp	r2, #16
    ca26:	db2b      	blt.n	ca80 <memchr+0x60>
    ca28:	f010 0f07 	tst.w	r0, #7
    ca2c:	d008      	beq.n	ca40 <memchr+0x20>
    ca2e:	f810 3b01 	ldrb.w	r3, [r0], #1
    ca32:	3a01      	subs	r2, #1
    ca34:	428b      	cmp	r3, r1
    ca36:	d02d      	beq.n	ca94 <memchr+0x74>
    ca38:	f010 0f07 	tst.w	r0, #7
    ca3c:	b342      	cbz	r2, ca90 <memchr+0x70>
    ca3e:	d1f6      	bne.n	ca2e <memchr+0xe>
    ca40:	b4f0      	push	{r4, r5, r6, r7}
    ca42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ca46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ca4a:	f022 0407 	bic.w	r4, r2, #7
    ca4e:	f07f 0700 	mvns.w	r7, #0
    ca52:	2300      	movs	r3, #0
    ca54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ca58:	3c08      	subs	r4, #8
    ca5a:	ea85 0501 	eor.w	r5, r5, r1
    ca5e:	ea86 0601 	eor.w	r6, r6, r1
    ca62:	fa85 f547 	uadd8	r5, r5, r7
    ca66:	faa3 f587 	sel	r5, r3, r7
    ca6a:	fa86 f647 	uadd8	r6, r6, r7
    ca6e:	faa5 f687 	sel	r6, r5, r7
    ca72:	b98e      	cbnz	r6, ca98 <memchr+0x78>
    ca74:	d1ee      	bne.n	ca54 <memchr+0x34>
    ca76:	bcf0      	pop	{r4, r5, r6, r7}
    ca78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ca7c:	f002 0207 	and.w	r2, r2, #7
    ca80:	b132      	cbz	r2, ca90 <memchr+0x70>
    ca82:	f810 3b01 	ldrb.w	r3, [r0], #1
    ca86:	3a01      	subs	r2, #1
    ca88:	ea83 0301 	eor.w	r3, r3, r1
    ca8c:	b113      	cbz	r3, ca94 <memchr+0x74>
    ca8e:	d1f8      	bne.n	ca82 <memchr+0x62>
    ca90:	2000      	movs	r0, #0
    ca92:	4770      	bx	lr
    ca94:	3801      	subs	r0, #1
    ca96:	4770      	bx	lr
    ca98:	2d00      	cmp	r5, #0
    ca9a:	bf06      	itte	eq
    ca9c:	4635      	moveq	r5, r6
    ca9e:	3803      	subeq	r0, #3
    caa0:	3807      	subne	r0, #7
    caa2:	f015 0f01 	tst.w	r5, #1
    caa6:	d107      	bne.n	cab8 <memchr+0x98>
    caa8:	3001      	adds	r0, #1
    caaa:	f415 7f80 	tst.w	r5, #256	; 0x100
    caae:	bf02      	ittt	eq
    cab0:	3001      	addeq	r0, #1
    cab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    cab6:	3001      	addeq	r0, #1
    cab8:	bcf0      	pop	{r4, r5, r6, r7}
    caba:	3801      	subs	r0, #1
    cabc:	4770      	bx	lr
    cabe:	bf00      	nop

0000cac0 <memmove>:
    cac0:	4288      	cmp	r0, r1
    cac2:	b510      	push	{r4, lr}
    cac4:	eb01 0302 	add.w	r3, r1, r2
    cac8:	d803      	bhi.n	cad2 <memmove+0x12>
    caca:	1e42      	subs	r2, r0, #1
    cacc:	4299      	cmp	r1, r3
    cace:	d10c      	bne.n	caea <memmove+0x2a>
    cad0:	bd10      	pop	{r4, pc}
    cad2:	4298      	cmp	r0, r3
    cad4:	d2f9      	bcs.n	caca <memmove+0xa>
    cad6:	1881      	adds	r1, r0, r2
    cad8:	1ad2      	subs	r2, r2, r3
    cada:	42d3      	cmn	r3, r2
    cadc:	d100      	bne.n	cae0 <memmove+0x20>
    cade:	bd10      	pop	{r4, pc}
    cae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    cae4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    cae8:	e7f7      	b.n	cada <memmove+0x1a>
    caea:	f811 4b01 	ldrb.w	r4, [r1], #1
    caee:	f802 4f01 	strb.w	r4, [r2, #1]!
    caf2:	e7eb      	b.n	cacc <memmove+0xc>

0000caf4 <_realloc_r>:
    caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    caf6:	4607      	mov	r7, r0
    caf8:	4614      	mov	r4, r2
    cafa:	460e      	mov	r6, r1
    cafc:	b921      	cbnz	r1, cb08 <_realloc_r+0x14>
    cafe:	4611      	mov	r1, r2
    cb00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cb04:	f7fe bfb4 	b.w	ba70 <_malloc_r>
    cb08:	b922      	cbnz	r2, cb14 <_realloc_r+0x20>
    cb0a:	f7fe ff63 	bl	b9d4 <_free_r>
    cb0e:	4625      	mov	r5, r4
    cb10:	4628      	mov	r0, r5
    cb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb14:	f000 f826 	bl	cb64 <_malloc_usable_size_r>
    cb18:	4284      	cmp	r4, r0
    cb1a:	d90f      	bls.n	cb3c <_realloc_r+0x48>
    cb1c:	4621      	mov	r1, r4
    cb1e:	4638      	mov	r0, r7
    cb20:	f7fe ffa6 	bl	ba70 <_malloc_r>
    cb24:	4605      	mov	r5, r0
    cb26:	2800      	cmp	r0, #0
    cb28:	d0f2      	beq.n	cb10 <_realloc_r+0x1c>
    cb2a:	4631      	mov	r1, r6
    cb2c:	4622      	mov	r2, r4
    cb2e:	f7fe ff3d 	bl	b9ac <memcpy>
    cb32:	4631      	mov	r1, r6
    cb34:	4638      	mov	r0, r7
    cb36:	f7fe ff4d 	bl	b9d4 <_free_r>
    cb3a:	e7e9      	b.n	cb10 <_realloc_r+0x1c>
    cb3c:	4635      	mov	r5, r6
    cb3e:	e7e7      	b.n	cb10 <_realloc_r+0x1c>

0000cb40 <_read_r>:
    cb40:	b538      	push	{r3, r4, r5, lr}
    cb42:	4c07      	ldr	r4, [pc, #28]	; (cb60 <_read_r+0x20>)
    cb44:	4605      	mov	r5, r0
    cb46:	4608      	mov	r0, r1
    cb48:	4611      	mov	r1, r2
    cb4a:	2200      	movs	r2, #0
    cb4c:	6022      	str	r2, [r4, #0]
    cb4e:	461a      	mov	r2, r3
    cb50:	f7fd f8b0 	bl	9cb4 <_read>
    cb54:	1c43      	adds	r3, r0, #1
    cb56:	d102      	bne.n	cb5e <_read_r+0x1e>
    cb58:	6823      	ldr	r3, [r4, #0]
    cb5a:	b103      	cbz	r3, cb5e <_read_r+0x1e>
    cb5c:	602b      	str	r3, [r5, #0]
    cb5e:	bd38      	pop	{r3, r4, r5, pc}
    cb60:	20003d5c 	.word	0x20003d5c

0000cb64 <_malloc_usable_size_r>:
    cb64:	f851 0c04 	ldr.w	r0, [r1, #-4]
    cb68:	2800      	cmp	r0, #0
    cb6a:	f1a0 0004 	sub.w	r0, r0, #4
    cb6e:	bfbc      	itt	lt
    cb70:	580b      	ldrlt	r3, [r1, r0]
    cb72:	18c0      	addlt	r0, r0, r3
    cb74:	4770      	bx	lr
    cb76:	0000      	movs	r0, r0
    cb78:	682f2e2e 	.word	0x682f2e2e
    cb7c:	692f6c61 	.word	0x692f6c61
    cb80:	756c636e 	.word	0x756c636e
    cb84:	682f6564 	.word	0x682f6564
    cb88:	775f6c61 	.word	0x775f6c61
    cb8c:	682e7464 	.word	0x682e7464
    cb90:	00000000 	.word	0x00000000
    cb94:	4952475b 	.word	0x4952475b
    cb98:	25205d44 	.word	0x25205d44
    cb9c:	25206433 	.word	0x25206433
    cba0:	25206434 	.word	0x25206434
    cba4:	25206434 	.word	0x25206434
    cba8:	4d5b2064 	.word	0x4d5b2064
    cbac:	5d494449 	.word	0x5d494449
    cbb0:	3a684320 	.word	0x3a684320
    cbb4:	20642520 	.word	0x20642520
    cbb8:	646d4320 	.word	0x646d4320
    cbbc:	6425203a 	.word	0x6425203a
    cbc0:	61502020 	.word	0x61502020
    cbc4:	316d6172 	.word	0x316d6172
    cbc8:	6425203a 	.word	0x6425203a
    cbcc:	61502020 	.word	0x61502020
    cbd0:	326d6172 	.word	0x326d6172
    cbd4:	6425203a 	.word	0x6425203a
    cbd8:	0000000a 	.word	0x0000000a
    cbdc:	4952475b 	.word	0x4952475b
    cbe0:	25205d44 	.word	0x25205d44
    cbe4:	25206433 	.word	0x25206433
    cbe8:	25206434 	.word	0x25206434
    cbec:	25206434 	.word	0x25206434
    cbf0:	4b5b2064 	.word	0x4b5b2064
    cbf4:	4f425945 	.word	0x4f425945
    cbf8:	5d445241 	.word	0x5d445241
    cbfc:	79654b20 	.word	0x79654b20
    cc00:	6425203a 	.word	0x6425203a
    cc04:	646f4d20 	.word	0x646f4d20
    cc08:	6425203a 	.word	0x6425203a
    cc0c:	646d4320 	.word	0x646d4320
    cc10:	6425203a 	.word	0x6425203a
    cc14:	4357480a 	.word	0x4357480a
    cc18:	203a4746 	.word	0x203a4746
    cc1c:	78383025 	.word	0x78383025
    cc20:	0000000a 	.word	0x0000000a
    cc24:	4b4e555b 	.word	0x4b4e555b
    cc28:	4e574f4e 	.word	0x4e574f4e
    cc2c:	3e2d205d 	.word	0x3e2d205d
    cc30:	6f725020 	.word	0x6f725020
    cc34:	6f636f74 	.word	0x6f636f74
    cc38:	25203a6c 	.word	0x25203a6c
    cc3c:	00000a64 	.word	0x00000a64
    cc40:	0f0e0d0c 	.word	0x0f0e0d0c
    cc44:	0b0a0908 	.word	0x0b0a0908
    cc48:	07060504 	.word	0x07060504
    cc4c:	03020100 	.word	0x03020100
    cc50:	30256325 	.word	0x30256325
    cc54:	30257832 	.word	0x30257832
    cc58:	30257832 	.word	0x30257832
    cc5c:	30257832 	.word	0x30257832
    cc60:	63257832 	.word	0x63257832
    cc64:	00000000 	.word	0x00000000
    cc68:	30256325 	.word	0x30256325
    cc6c:	30257832 	.word	0x30257832
    cc70:	30257832 	.word	0x30257832
    cc74:	30257832 	.word	0x30257832
    cc78:	30257832 	.word	0x30257832
    cc7c:	63257832 	.word	0x63257832
    cc80:	30256325 	.word	0x30256325
    cc84:	30257832 	.word	0x30257832
    cc88:	30257832 	.word	0x30257832
    cc8c:	30257832 	.word	0x30257832
    cc90:	30257832 	.word	0x30257832
    cc94:	63257832 	.word	0x63257832
    cc98:	00000000 	.word	0x00000000
    cc9c:	78383025 	.word	0x78383025
    cca0:	00000000 	.word	0x00000000
    cca4:	63256325 	.word	0x63256325
    cca8:	78323025 	.word	0x78323025
    ccac:	78323025 	.word	0x78323025
    ccb0:	78323025 	.word	0x78323025
    ccb4:	78323025 	.word	0x78323025
    ccb8:	78323025 	.word	0x78323025
    ccbc:	00006325 	.word	0x00006325
    ccc0:	78323025 	.word	0x78323025
    ccc4:	00000000 	.word	0x00000000
    ccc8:	000a3030 	.word	0x000a3030
    cccc:	682f2e2e 	.word	0x682f2e2e
    ccd0:	732f6c61 	.word	0x732f6c61
    ccd4:	682f6372 	.word	0x682f6372
    ccd8:	615f6c61 	.word	0x615f6c61
    ccdc:	615f6364 	.word	0x615f6364
    cce0:	636e7973 	.word	0x636e7973
    cce4:	0000632e 	.word	0x0000632e
    cce8:	682f2e2e 	.word	0x682f2e2e
    ccec:	732f6c61 	.word	0x732f6c61
    ccf0:	682f6372 	.word	0x682f6372
    ccf4:	635f6c61 	.word	0x635f6c61
    ccf8:	735f6372 	.word	0x735f6372
    ccfc:	2e636e79 	.word	0x2e636e79
    cd00:	00000063 	.word	0x00000063
    cd04:	682f2e2e 	.word	0x682f2e2e
    cd08:	732f6c61 	.word	0x732f6c61
    cd0c:	682f6372 	.word	0x682f6372
    cd10:	665f6c61 	.word	0x665f6c61
    cd14:	6873616c 	.word	0x6873616c
    cd18:	0000632e 	.word	0x0000632e
    cd1c:	682f2e2e 	.word	0x682f2e2e
    cd20:	732f6c61 	.word	0x732f6c61
    cd24:	682f6372 	.word	0x682f6372
    cd28:	695f6c61 	.word	0x695f6c61
    cd2c:	6d5f6332 	.word	0x6d5f6332
    cd30:	7973615f 	.word	0x7973615f
    cd34:	632e636e 	.word	0x632e636e
    cd38:	00000000 	.word	0x00000000
    cd3c:	682f2e2e 	.word	0x682f2e2e
    cd40:	732f6c61 	.word	0x732f6c61
    cd44:	682f6372 	.word	0x682f6372
    cd48:	695f6c61 	.word	0x695f6c61
    cd4c:	00632e6f 	.word	0x00632e6f
    cd50:	682f2e2e 	.word	0x682f2e2e
    cd54:	732f6c61 	.word	0x732f6c61
    cd58:	682f6372 	.word	0x682f6372
    cd5c:	715f6c61 	.word	0x715f6c61
    cd60:	5f697073 	.word	0x5f697073
    cd64:	2e616d64 	.word	0x2e616d64
    cd68:	00000063 	.word	0x00000063
    cd6c:	682f2e2e 	.word	0x682f2e2e
    cd70:	732f6c61 	.word	0x732f6c61
    cd74:	682f6372 	.word	0x682f6372
    cd78:	735f6c61 	.word	0x735f6c61
    cd7c:	6d5f6970 	.word	0x6d5f6970
    cd80:	7973615f 	.word	0x7973615f
    cd84:	632e636e 	.word	0x632e636e
    cd88:	00000000 	.word	0x00000000
    cd8c:	682f2e2e 	.word	0x682f2e2e
    cd90:	732f6c61 	.word	0x732f6c61
    cd94:	682f6372 	.word	0x682f6372
    cd98:	735f6c61 	.word	0x735f6c61
    cd9c:	6d5f6970 	.word	0x6d5f6970
    cda0:	616d645f 	.word	0x616d645f
    cda4:	0000632e 	.word	0x0000632e
    cda8:	682f2e2e 	.word	0x682f2e2e
    cdac:	732f6c61 	.word	0x732f6c61
    cdb0:	682f6372 	.word	0x682f6372
    cdb4:	745f6c61 	.word	0x745f6c61
    cdb8:	72656d69 	.word	0x72656d69
    cdbc:	0000632e 	.word	0x0000632e
    cdc0:	682f2e2e 	.word	0x682f2e2e
    cdc4:	732f6c61 	.word	0x732f6c61
    cdc8:	682f6372 	.word	0x682f6372
    cdcc:	755f6c61 	.word	0x755f6c61
    cdd0:	74726173 	.word	0x74726173
    cdd4:	7973615f 	.word	0x7973615f
    cdd8:	632e636e 	.word	0x632e636e
    cddc:	00000000 	.word	0x00000000
    cde0:	682f2e2e 	.word	0x682f2e2e
    cde4:	732f6c61 	.word	0x732f6c61
    cde8:	682f6372 	.word	0x682f6372
    cdec:	755f6c61 	.word	0x755f6c61
    cdf0:	74726173 	.word	0x74726173
    cdf4:	6e79735f 	.word	0x6e79735f
    cdf8:	00632e63 	.word	0x00632e63
    cdfc:	682f2e2e 	.word	0x682f2e2e
    ce00:	752f6c61 	.word	0x752f6c61
    ce04:	736c6974 	.word	0x736c6974
    ce08:	6372732f 	.word	0x6372732f
    ce0c:	6974752f 	.word	0x6974752f
    ce10:	6c5f736c 	.word	0x6c5f736c
    ce14:	2e747369 	.word	0x2e747369
    ce18:	00000063 	.word	0x00000063
    ce1c:	682f2e2e 	.word	0x682f2e2e
    ce20:	752f6c61 	.word	0x752f6c61
    ce24:	736c6974 	.word	0x736c6974
    ce28:	6372732f 	.word	0x6372732f
    ce2c:	6974752f 	.word	0x6974752f
    ce30:	725f736c 	.word	0x725f736c
    ce34:	62676e69 	.word	0x62676e69
    ce38:	65666675 	.word	0x65666675
    ce3c:	00632e72 	.word	0x00632e72

0000ce40 <_adcs>:
    ce40:	01000000 0003000c 00041807 00000000     ................
    ce50:	0014080b 00010000 000c0100 18040003     ................
    ce60:	00000004 080b0000 00000014 682f2e2e     ............../h
    ce70:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    ce80:	00000000                                ....

0000ce84 <_cfgs>:
    ce84:	00200600 08068000 00200400 08068000     .. ....... .....
    ce94:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    ceb4:	00200b00 14000003 00200a00 08000002     .. ....... .....
    cec4:	00201300 14000003 00000000 00000000     .. .............
	...
    cf74:	00005400 1c000000 00005300 0c000000     .T.......S......

0000cf84 <user_mux_confs>:
	...
    cfb0:	04030201 04030201 00000000 00000000     ................
	...

0000cfc8 <channel_confs>:
    cfc8:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000d008 <interrupt_cfg>:
    d008:	00000002 00000002 00000002 00000002     ................
	...
    d088:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    d098:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    d0a8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    d0b8:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    d0c8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    d0d8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    d0e8:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000d0f8 <_usarts>:
    d0f8:	00000000 40100004 00030000 00700002     .......@......p.
    d108:	0000aaaa 00000000 00000001 40100004     ...............@
    d118:	00030000 00700002 0000aaaa 00000000     ......p.........
    d128:	00000002 40100004 00030000 00700002     .......@......p.
    d138:	00005555 00000000 00000004 40100004     UU.............@
    d148:	00030000 00700002 0000aaaa 00000000     ......p.........
    d158:	00000006 40100004 00030000 00700002     .......@......p.
    d168:	0000aaaa 00000000                       ........

0000d170 <_i2cms>:
    d170:	00000005 00200014 00000100 0000e6e5     ...... .........
    d180:	00d70000 02dc6c00                       .....l..

0000d188 <sercomspi_regs>:
    d188:	3020000c 00020000 00000000 01ff0005     .. 0............
    d198:	20000c03 00000000 00000000 ff000600     ... ............
    d1a8:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    d1b8:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    d1c8:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    d1d8:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000d1e8 <_tcs>:
    d1e8:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    d1f8:	00000000 006c0001 00000308 00000021     ......l.....!...
    d208:	00003a98 00000000 006d0002 00000308     .:........m.....
    d218:	00000021 00003a98 00000000 006e0003     !....:........n.
    d228:	00000308 00000021 00003a98 00000000     ....!....:......
    d238:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    d248:	0000632e                                .c..

0000d24c <_usb_ep_cfgs>:
    d24c:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    d264:	20000d20 00000000 00000008 20000ce0      .. ........... 
    d274:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    d28c:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    d29c:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    d2ac:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
    d2bc:	64657472 00000d0a 73616c46 72652068     rted....Flash er
    d2cc:	20657361 63637573 66737365 0d0a6c75     ase successful..
    d2dc:	00000000 73616c46 72772068 20657469     ....Flash write 
    d2ec:	63637573 66737365 0d0a6c75 00000000     successful......
    d2fc:	73616c46 65722068 73206461 65636375     Flash read succe
    d30c:	75667373 000d0a6c 73616c46 61642068     ssful...Flash da
    d31c:	76206174 66697265 74616369 206e6f69     ta verification 
    d32c:	6c696166 0a2e6465 0000000d 74697257     failed......Writ
    d33c:	202d2065 64616552 20736920 63637573     e - Read is succ
    d34c:	66737365 69206c75 5351206e 46204950     essful in QSPI F
    d35c:	6873616c 6d656d20 2e79726f 00000d0a     lash memory.....
    d36c:	65746e45 676e6972 69614d20 6f4c206e     Entering Main Lo
    d37c:	000d706f                                op..

0000d380 <keyboard_report_desc>:
    d380:	06090105 070501a1 e729e019 01250015     ..........)...%.
    d390:	08950175 01810281 65290019 65250015     u.........)e..%e
    d3a0:	06950875 08050081 05290119 01250015     u.........)...%.
    d3b0:	05950175 03950291 00c00191              u...........

0000d3bc <mouse_report_desc>:
    d3bc:	02090105 010901a1 090500a1 03290119     ..............).
    d3cc:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    d3dc:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    d3ec:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    d3fc:	73752f65 2e636462 00000063              e/usbdc.c...

0000d408 <_global_impure_ptr>:
    d408:	2000055c                                \.. 

0000d40c <__sf_fake_stderr>:
	...

0000d42c <__sf_fake_stdin>:
	...

0000d44c <__sf_fake_stdout>:
	...
    d46c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    d47c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    d48c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    d49c:	00006665                                ef..

0000d4a0 <_init>:
    d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4a2:	bf00      	nop
    d4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d4a6:	bc08      	pop	{r3}
    d4a8:	469e      	mov	lr, r3
    d4aa:	4770      	bx	lr

0000d4ac <__init_array_start>:
    d4ac:	00000289 	.word	0x00000289

0000d4b0 <_fini>:
    d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4b2:	bf00      	nop
    d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d4b6:	bc08      	pop	{r3}
    d4b8:	469e      	mov	lr, r3
    d4ba:	4770      	bx	lr

0000d4bc <__fini_array_start>:
    d4bc:	00000265 	.word	0x00000265
