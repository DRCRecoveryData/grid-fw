
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000de0c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  0000de0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          000035ec  200005c0  0000e3d0  000205c0  2**4
                  ALLOC
  5 .stack        00010004  20003bac  000119bc  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008def9  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bcf4  00000000  00000000  000ae53c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030213  00000000  00000000  000ba230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022b0  00000000  00000000  000ea443  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000031e8  00000000  00000000  000ec6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000478ff  00000000  00000000  000ef8db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003ec40  00000000  00000000  001371da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a64e  00000000  00000000  00175e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006744  00000000  00000000  00290468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 3b 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     .;. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	a5 68 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .h..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 b1 64 00 00 c5 64 00 00     .........d...d..
      bc:	e9 62 00 00 f5 62 00 00 01 63 00 00 0d 63 00 00     .b...b...c...c..
      cc:	19 63 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .c..............
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	d9 66 00 00 01 73 00 00 15 73 00 00 29 73 00 00     .f...s...s..)s..
     104:	3d 73 00 00 51 73 00 00 65 73 00 00 79 73 00 00     =s..Qs..es..ys..
     114:	8d 73 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .s..............
     124:	ed 02 00 00 a1 73 00 00 b5 73 00 00 c9 73 00 00     .....s...s...s..
     134:	dd 73 00 00 f1 73 00 00 05 74 00 00 19 74 00 00     .s...s...t...t..
     144:	2d 74 00 00 41 74 00 00 55 74 00 00 69 74 00 00     -t..At..Ut..it..
     154:	7d 74 00 00 91 74 00 00 a5 74 00 00 b9 74 00 00     }t...t...t...t..
     164:	cd 74 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .t..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 e9 93 00 00     ................
     184:	f5 93 00 00 01 94 00 00 0d 94 00 00 00 00 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 f1 80 00 00 05 81 00 00     ................
     1f4:	19 81 00 00 2d 81 00 00 ed 02 00 00 ed 02 00 00     ....-...........
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 7d 5f 00 00 91 5f 00 00 a5 5f 00 00     ....}_..._..._..
     224:	b9 5f 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ._..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200005c0 	.word	0x200005c0
     280:	00000000 	.word	0x00000000
     284:	0000de0c 	.word	0x0000de0c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000de0c 	.word	0x0000de0c
     2c4:	200005c4 	.word	0x200005c4
     2c8:	0000de0c 	.word	0x0000de0c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	0000b569 	.word	0x0000b569
     2e8:	0000a161 	.word	0x0000a161

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	0000de0c 	.word	0x0000de0c
     36c:	200005bc 	.word	0x200005bc
     370:	20003bac 	.word	0x20003bac
     374:	200005c0 	.word	0x200005c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	0000bd49 	.word	0x0000bd49
     384:	00009c79 	.word	0x00009c79

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200005dc 	.word	0x200005dc
     408:	20001058 	.word	0x20001058
     40c:	20001154 	.word	0x20001154
     410:	43001c00 	.word	0x43001c00
     414:	0000437d 	.word	0x0000437d
     418:	00004421 	.word	0x00004421
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200005dc 	.word	0x200005dc
     4ac:	2000122c 	.word	0x2000122c
     4b0:	20000ff4 	.word	0x20000ff4
     4b4:	43002000 	.word	0x43002000
     4b8:	0000437d 	.word	0x0000437d
     4bc:	00004421 	.word	0x00004421
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	20000ff0 	.word	0x20000ff0
     4e8:	000046bd 	.word	0x000046bd

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	00004741 	.word	0x00004741

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	20000fd4 	.word	0x20000fd4
     54c:	00004761 	.word	0x00004761

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20001298 	.word	0x20001298
     718:	0000490d 	.word	0x0000490d
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000604 	.word	0x20000604
     7b4:	40003000 	.word	0x40003000
     7b8:	20001084 	.word	0x20001084
     7bc:	000051ed 	.word	0x000051ed
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000614 	.word	0x20000614
     858:	40003400 	.word	0x40003400
     85c:	200010d8 	.word	0x200010d8
     860:	000051ed 	.word	0x000051ed
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	2000104c 	.word	0x2000104c
     8f8:	00005419 	.word	0x00005419
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000f4c 	.word	0x20000f4c
     a04:	00004afd 	.word	0x00004afd
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000624 	.word	0x20000624
     aa4:	2000118c 	.word	0x2000118c
     aa8:	000051ed 	.word	0x000051ed
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	2000100c 	.word	0x2000100c
     b54:	00004841 	.word	0x00004841
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000634 	.word	0x20000634
     bf0:	43000800 	.word	0x43000800
     bf4:	200011dc 	.word	0x200011dc
     bf8:	000051ed 	.word	0x000051ed
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20001128 	.word	0x20001128
     cfc:	00004d61 	.word	0x00004d61
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	000046ed 	.word	0x000046ed

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	000056e1 	.word	0x000056e1
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	0000d218 	.word	0x0000d218
     e14:	00005a39 	.word	0x00005a39
     e18:	200010d4 	.word	0x200010d4
     e1c:	40002000 	.word	0x40002000
     e20:	00009419 	.word	0x00009419

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00005ffd 	.word	0x00005ffd
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	0000689d 	.word	0x0000689d
    1100:	40002400 	.word	0x40002400
    1104:	20000f94 	.word	0x20000f94
    1108:	00004f09 	.word	0x00004f09
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	000080e9 	.word	0x000080e9
    1134:	40003800 	.word	0x40003800
    1138:	20001278 	.word	0x20001278
    113c:	40003c00 	.word	0x40003c00
    1140:	2000116c 	.word	0x2000116c
    1144:	4101a000 	.word	0x4101a000
    1148:	20000fb4 	.word	0x20000fb4
    114c:	4101c000 	.word	0x4101c000
    1150:	20001258 	.word	0x20001258
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4604      	mov	r4, r0
    1164:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    1166:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    1168:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    116a:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    116c:	2300      	movs	r3, #0
    116e:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    1170:	0048      	lsls	r0, r1, #1
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <grid_ain_channel_init+0x38>)
    1174:	4798      	blx	r3
    1176:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1178:	b14d      	cbz	r5, 118e <grid_ain_channel_init+0x2e>
    117a:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    117c:	4619      	mov	r1, r3
    117e:	6822      	ldr	r2, [r4, #0]
    1180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	7922      	ldrb	r2, [r4, #4]
    118a:	429a      	cmp	r2, r3
    118c:	d8f7      	bhi.n	117e <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    118e:	2000      	movs	r0, #0
    1190:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    1192:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	bf00      	nop
    1198:	0000bd91 	.word	0x0000bd91

0000119c <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11a0:	4605      	mov	r5, r0
    11a2:	4689      	mov	r9, r1
    11a4:	4617      	mov	r7, r2
    11a6:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    11a8:	0100      	lsls	r0, r0, #4
    11aa:	4b0c      	ldr	r3, [pc, #48]	; (11dc <grid_ain_init+0x40>)
    11ac:	4798      	blx	r3
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <grid_ain_init+0x44>)
    11b0:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    11b2:	b185      	cbz	r5, 11d6 <grid_ain_init+0x3a>
    11b4:	3d01      	subs	r5, #1
    11b6:	b2ed      	uxtb	r5, r5
    11b8:	3501      	adds	r5, #1
    11ba:	012d      	lsls	r5, r5, #4
    11bc:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    11be:	469a      	mov	sl, r3
    11c0:	4e08      	ldr	r6, [pc, #32]	; (11e4 <grid_ain_init+0x48>)
    11c2:	4643      	mov	r3, r8
    11c4:	463a      	mov	r2, r7
    11c6:	4649      	mov	r1, r9
    11c8:	f8da 0000 	ldr.w	r0, [sl]
    11cc:	4420      	add	r0, r4
    11ce:	47b0      	blx	r6
    11d0:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    11d2:	42ac      	cmp	r4, r5
    11d4:	d1f5      	bne.n	11c2 <grid_ain_init+0x26>
	}

	return 0;
}
    11d6:	2000      	movs	r0, #0
    11d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11dc:	0000bd91 	.word	0x0000bd91
    11e0:	200017e4 	.word	0x200017e4
    11e4:	00001161 	.word	0x00001161

000011e8 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    11e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    11ec:	0100      	lsls	r0, r0, #4
    11ee:	4b3c      	ldr	r3, [pc, #240]	; (12e0 <grid_ain_add_sample+0xf8>)
    11f0:	f8d3 a000 	ldr.w	sl, [r3]
    11f4:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    11f8:	f89c 6004 	ldrb.w	r6, [ip, #4]
    11fc:	2e00      	cmp	r6, #0
    11fe:	d05b      	beq.n	12b8 <grid_ain_add_sample+0xd0>
    1200:	f85a 5000 	ldr.w	r5, [sl, r0]
    1204:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    1206:	2200      	movs	r2, #0
    1208:	4690      	mov	r8, r2
    120a:	4691      	mov	r9, r2
    120c:	4696      	mov	lr, r2
    120e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1212:	4614      	mov	r4, r2
    1214:	fa5f fb82 	uxtb.w	fp, r2
    1218:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    121c:	441c      	add	r4, r3
		
		if (current > maximum){
    121e:	4573      	cmp	r3, lr
    1220:	bf84      	itt	hi
    1222:	46d8      	movhi	r8, fp
			maximum = current;
    1224:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    1226:	42bb      	cmp	r3, r7
    1228:	bf3c      	itt	cc
    122a:	46d9      	movcc	r9, fp
			minimum = current;
    122c:	461f      	movcc	r7, r3
    122e:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    1230:	b2d3      	uxtb	r3, r2
    1232:	42b3      	cmp	r3, r6
    1234:	d3ee      	bcc.n	1214 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    1236:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    123a:	b2b6      	uxth	r6, r6
    123c:	428e      	cmp	r6, r1
    123e:	d23f      	bcs.n	12c0 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    1240:	f85a 3000 	ldr.w	r3, [sl, r0]
    1244:	440c      	add	r4, r1
    1246:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    124a:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    124c:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    1250:	f89c 3004 	ldrb.w	r3, [ip, #4]
    1254:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    1258:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    125c:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    1260:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    1262:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    1266:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    1268:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    126a:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    126c:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    1270:	b29b      	uxth	r3, r3
    1272:	408b      	lsls	r3, r1
    1274:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    1276:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    127a:	1b92      	subs	r2, r2, r6
    127c:	2a00      	cmp	r2, #0
    127e:	bfb8      	it	lt
    1280:	4252      	neglt	r2, r2
    1282:	2601      	movs	r6, #1
    1284:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    1288:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    128c:	42be      	cmp	r6, r7
    128e:	d020      	beq.n	12d2 <grid_ain_add_sample+0xea>
    1290:	4282      	cmp	r2, r0
    1292:	dc08      	bgt.n	12a6 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    1294:	2201      	movs	r2, #1
    1296:	fa02 f505 	lsl.w	r5, r2, r5
    129a:	fa02 f101 	lsl.w	r1, r2, r1
    129e:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    12a0:	428f      	cmp	r7, r1
    12a2:	d000      	beq.n	12a6 <grid_ain_add_sample+0xbe>
    12a4:	b9c7      	cbnz	r7, 12d8 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    12a6:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    12aa:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    12ae:	2001      	movs	r0, #1
    12b0:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    12b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    12b8:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    12ba:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    12bc:	2400      	movs	r4, #0
    12be:	e7ba      	b.n	1236 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    12c0:	f85a 3000 	ldr.w	r3, [sl, r0]
    12c4:	440c      	add	r4, r1
    12c6:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    12ca:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    12cc:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    12d0:	e7be      	b.n	1250 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    12d2:	2000      	movs	r0, #0
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	2000      	movs	r0, #0
	}
	
}
    12da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12de:	bf00      	nop
    12e0:	200017e4 	.word	0x200017e4

000012e4 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    12e4:	4b02      	ldr	r3, [pc, #8]	; (12f0 <grid_ain_get_changed+0xc>)
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    12ec:	7b00      	ldrb	r0, [r0, #12]
    12ee:	4770      	bx	lr
    12f0:	200017e4 	.word	0x200017e4

000012f4 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <grid_ain_get_average+0x28>)
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    12fc:	2300      	movs	r3, #0
    12fe:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    1300:	1fcb      	subs	r3, r1, #7
    1302:	b2db      	uxtb	r3, r3
    1304:	2b07      	cmp	r3, #7
    1306:	d806      	bhi.n	1316 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    1308:	8903      	ldrh	r3, [r0, #8]
    130a:	7940      	ldrb	r0, [r0, #5]
    130c:	1a40      	subs	r0, r0, r1
    130e:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    1312:	b280      	uxth	r0, r0
    1314:	4770      	bx	lr
    1316:	2000      	movs	r0, #0
    1318:	e7fb      	b.n	1312 <grid_ain_get_average+0x1e>
    131a:	bf00      	nop
    131c:	200017e4 	.word	0x200017e4

00001320 <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4604      	mov	r4, r0
    1324:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    1326:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    1328:	2300      	movs	r3, #0
    132a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    132c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    132e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    1330:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    1332:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    1334:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    1336:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    1338:	4608      	mov	r0, r1
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <grid_buffer_init+0x3c>)
    133c:	4798      	blx	r3
    133e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    1340:	b900      	cbnz	r0, 1344 <grid_buffer_init+0x24>
    1342:	e7fe      	b.n	1342 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    1344:	b145      	cbz	r5, 1358 <grid_buffer_init+0x38>
    1346:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    1348:	4619      	mov	r1, r3
    134a:	6862      	ldr	r2, [r4, #4]
    134c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    134e:	3301      	adds	r3, #1
    1350:	b29b      	uxth	r3, r3
    1352:	8822      	ldrh	r2, [r4, #0]
    1354:	429a      	cmp	r2, r3
    1356:	d8f8      	bhi.n	134a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    1358:	2001      	movs	r0, #1
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	0000bd91 	.word	0x0000bd91

00001360 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1360:	8903      	ldrh	r3, [r0, #8]
    1362:	8a02      	ldrh	r2, [r0, #16]
    1364:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    1366:	bf8f      	iteee	hi
    1368:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    136a:	8800      	ldrhls	r0, [r0, #0]
    136c:	18c0      	addls	r0, r0, r3
    136e:	1a80      	subls	r0, r0, r2
    1370:	b280      	uxth	r0, r0

	return space;

	
	
}
    1372:	4770      	bx	lr

00001374 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    1374:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    1376:	8903      	ldrh	r3, [r0, #8]
    1378:	8a02      	ldrh	r2, [r0, #16]
    137a:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    137c:	bf9c      	itt	ls
    137e:	8804      	ldrhls	r4, [r0, #0]
    1380:	191b      	addls	r3, r3, r4
    1382:	1a9b      	subs	r3, r3, r2
    1384:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    1386:	428b      	cmp	r3, r1
    1388:	d90a      	bls.n	13a0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    138a:	440a      	add	r2, r1
    138c:	8804      	ldrh	r4, [r0, #0]
    138e:	fb92 f3f4 	sdiv	r3, r2, r4
    1392:	fb04 2213 	mls	r2, r4, r3, r2
    1396:	8242      	strh	r2, [r0, #18]
		
		return length;
    1398:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    139a:	f85d 4b04 	ldr.w	r4, [sp], #4
    139e:	4770      	bx	lr
		return 0; // failed
    13a0:	2000      	movs	r0, #0
    13a2:	e7fa      	b.n	139a <grid_buffer_write_init+0x26>

000013a4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    13a4:	8a83      	ldrh	r3, [r0, #20]
    13a6:	6842      	ldr	r2, [r0, #4]
    13a8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    13aa:	8a83      	ldrh	r3, [r0, #20]
    13ac:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    13ae:	b29b      	uxth	r3, r3
    13b0:	8801      	ldrh	r1, [r0, #0]
    13b2:	fbb3 f2f1 	udiv	r2, r3, r1
    13b6:	fb01 3312 	mls	r3, r1, r2, r3
    13ba:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    13bc:	2001      	movs	r0, #1
    13be:	4770      	bx	lr

000013c0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    13c0:	8a83      	ldrh	r3, [r0, #20]
    13c2:	8a42      	ldrh	r2, [r0, #18]
    13c4:	429a      	cmp	r2, r3
    13c6:	d000      	beq.n	13ca <grid_buffer_write_acknowledge+0xa>
    13c8:	e7fe      	b.n	13c8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    13ca:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    13cc:	2001      	movs	r0, #1
    13ce:	4770      	bx	lr

000013d0 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    13d0:	8983      	ldrh	r3, [r0, #12]
    13d2:	8942      	ldrh	r2, [r0, #10]
    13d4:	429a      	cmp	r2, r3
    13d6:	d000      	beq.n	13da <grid_buffer_read_size+0xa>
    13d8:	e7fe      	b.n	13d8 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    13da:	8902      	ldrh	r2, [r0, #8]
    13dc:	429a      	cmp	r2, r3
    13de:	d000      	beq.n	13e2 <grid_buffer_read_size+0x12>
    13e0:	e7fe      	b.n	13e0 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    13e2:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    13e4:	8a05      	ldrh	r5, [r0, #16]
    13e6:	42ab      	cmp	r3, r5
    13e8:	d025      	beq.n	1436 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    13ea:	8804      	ldrh	r4, [r0, #0]
    13ec:	b1fc      	cbz	r4, 142e <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    13ee:	4626      	mov	r6, r4
    13f0:	fb93 f2f4 	sdiv	r2, r3, r4
    13f4:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    13f8:	b291      	uxth	r1, r2
    13fa:	428d      	cmp	r5, r1
    13fc:	d01d      	beq.n	143a <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    13fe:	6840      	ldr	r0, [r0, #4]
    1400:	5c42      	ldrb	r2, [r0, r1]
    1402:	2a0a      	cmp	r2, #10
    1404:	d114      	bne.n	1430 <grid_buffer_read_size+0x60>
    1406:	2300      	movs	r3, #0
						
			return i+1; // packet length
    1408:	3301      	adds	r3, #1
    140a:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    140c:	bcf0      	pop	{r4, r5, r6, r7}
    140e:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1410:	fb92 f1f6 	sdiv	r1, r2, r6
    1414:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    1418:	b28f      	uxth	r7, r1
    141a:	42bd      	cmp	r5, r7
    141c:	d00f      	beq.n	143e <grid_buffer_read_size+0x6e>
    141e:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    1420:	5dc1      	ldrb	r1, [r0, r7]
    1422:	290a      	cmp	r1, #10
    1424:	d0f0      	beq.n	1408 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    1426:	3301      	adds	r3, #1
    1428:	b29b      	uxth	r3, r3
    142a:	42a3      	cmp	r3, r4
    142c:	d1f0      	bne.n	1410 <grid_buffer_read_size+0x40>
    142e:	e7fe      	b.n	142e <grid_buffer_read_size+0x5e>
    1430:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    1432:	2300      	movs	r3, #0
    1434:	e7f7      	b.n	1426 <grid_buffer_read_size+0x56>
		return 0;
    1436:	2000      	movs	r0, #0
    1438:	e7e8      	b.n	140c <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    143a:	2000      	movs	r0, #0
    143c:	e7e6      	b.n	140c <grid_buffer_read_size+0x3c>
    143e:	2000      	movs	r0, #0
    1440:	e7e4      	b.n	140c <grid_buffer_read_size+0x3c>

00001442 <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    1442:	8982      	ldrh	r2, [r0, #12]
    1444:	8943      	ldrh	r3, [r0, #10]
    1446:	4293      	cmp	r3, r2
    1448:	d000      	beq.n	144c <grid_buffer_read_init+0xa>
    144a:	e7fe      	b.n	144a <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    144c:	8903      	ldrh	r3, [r0, #8]
    144e:	4293      	cmp	r3, r2
    1450:	d000      	beq.n	1454 <grid_buffer_read_init+0x12>
    1452:	e7fe      	b.n	1452 <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    1456:	8a05      	ldrh	r5, [r0, #16]
    1458:	42aa      	cmp	r2, r5
    145a:	d031      	beq.n	14c0 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    145c:	8804      	ldrh	r4, [r0, #0]
    145e:	b35c      	cbz	r4, 14b8 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1460:	4626      	mov	r6, r4
    1462:	fb92 f3f4 	sdiv	r3, r2, r4
    1466:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    146a:	b299      	uxth	r1, r3
    146c:	428d      	cmp	r5, r1
    146e:	d029      	beq.n	14c4 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    1470:	6847      	ldr	r7, [r0, #4]
    1472:	460b      	mov	r3, r1
    1474:	5c79      	ldrb	r1, [r7, r1]
    1476:	290a      	cmp	r1, #10
    1478:	d11f      	bne.n	14ba <grid_buffer_read_init+0x78>
    147a:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    147c:	3301      	adds	r3, #1
    147e:	fb93 f2f4 	sdiv	r2, r3, r4
    1482:	fb04 3312 	mls	r3, r4, r2, r3
    1486:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    1488:	1c4b      	adds	r3, r1, #1
    148a:	b29b      	uxth	r3, r3
    148c:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    148e:	4618      	mov	r0, r3
    1490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    1492:	fb92 f3f6 	sdiv	r3, r2, r6
    1496:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    149a:	fa1f fe83 	uxth.w	lr, r3
    149e:	4575      	cmp	r5, lr
    14a0:	d012      	beq.n	14c8 <grid_buffer_read_init+0x86>
    14a2:	4673      	mov	r3, lr
    14a4:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14a6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    14aa:	f1be 0f0a 	cmp.w	lr, #10
    14ae:	d0e5      	beq.n	147c <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    14b0:	3101      	adds	r1, #1
    14b2:	b289      	uxth	r1, r1
    14b4:	42a1      	cmp	r1, r4
    14b6:	d1ec      	bne.n	1492 <grid_buffer_read_init+0x50>
    14b8:	e7fe      	b.n	14b8 <grid_buffer_read_init+0x76>
    14ba:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    14bc:	2100      	movs	r1, #0
    14be:	e7f7      	b.n	14b0 <grid_buffer_read_init+0x6e>
		return 0;
    14c0:	2300      	movs	r3, #0
    14c2:	e7e4      	b.n	148e <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    14c4:	2300      	movs	r3, #0
    14c6:	e7e2      	b.n	148e <grid_buffer_read_init+0x4c>
    14c8:	2300      	movs	r3, #0
    14ca:	e7e0      	b.n	148e <grid_buffer_read_init+0x4c>

000014cc <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    14cc:	8983      	ldrh	r3, [r0, #12]
    14ce:	8941      	ldrh	r1, [r0, #10]
    14d0:	4299      	cmp	r1, r3
    14d2:	d00e      	beq.n	14f2 <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    14d4:	b410      	push	{r4}
    14d6:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    14d8:	6841      	ldr	r1, [r0, #4]
    14da:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    14dc:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    14de:	b29b      	uxth	r3, r3
    14e0:	8814      	ldrh	r4, [r2, #0]
    14e2:	fbb3 f1f4 	udiv	r1, r3, r4
    14e6:	fb04 3311 	mls	r3, r4, r1, r3
    14ea:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    14ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    14f0:	4770      	bx	lr
    14f2:	e7fe      	b.n	14f2 <grid_buffer_read_character+0x26>

000014f4 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    14f4:	8983      	ldrh	r3, [r0, #12]
    14f6:	8942      	ldrh	r2, [r0, #10]
    14f8:	429a      	cmp	r2, r3
    14fa:	d000      	beq.n	14fe <grid_buffer_read_acknowledge+0xa>
    14fc:	e7fe      	b.n	14fc <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    14fe:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    1500:	2001      	movs	r0, #1
    1502:	4770      	bx	lr

00001504 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    1504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1508:	4604      	mov	r4, r0
    150a:	4690      	mov	r8, r2
    150c:	461f      	mov	r7, r3
    150e:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    1512:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1516:	4e33      	ldr	r6, [pc, #204]	; (15e4 <grid_port_init+0xe0>)
    1518:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    151a:	4641      	mov	r1, r8
    151c:	f504 609e 	add.w	r0, r4, #1264	; 0x4f0
    1520:	47b0      	blx	r6
	
	por->cooldown = 0;
    1522:	2300      	movs	r3, #0
    1524:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    1526:	f89d 2020 	ldrb.w	r2, [sp, #32]
    152a:	72a2      	strb	r2, [r4, #10]
	
	por->direction = dir;
    152c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1530:	7262      	strb	r2, [r4, #9]
	
	por->usart	= usart;
    1532:	6067      	str	r7, [r4, #4]
	por->type		= type;
    1534:	7225      	strb	r5, [r4, #8]
	
	por->tx_double_buffer_status	= 0;
    1536:	81a3      	strh	r3, [r4, #12]
	por->rx_double_buffer_status	= 0;
    1538:	61e3      	str	r3, [r4, #28]
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    153a:	4619      	mov	r1, r3
    153c:	18e2      	adds	r2, r4, r3
    153e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    1542:	3301      	adds	r3, #1
    1544:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1548:	d1f8      	bne.n	153c <grid_port_init+0x38>
    154a:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    154c:	4619      	mov	r1, r3
    154e:	18e2      	adds	r2, r4, r3
    1550:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    1554:	3301      	adds	r3, #1
    1556:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    155a:	d1f8      	bne.n	154e <grid_port_init+0x4a>
	}
	
	por->partner_fi = 0;
    155c:	2300      	movs	r3, #0
    155e:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
	
	por->partner_hwcfg = 0;
    1562:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	por->partner_status = 1;
    1566:	2301      	movs	r3, #1
    1568:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    156c:	429d      	cmp	r5, r3
    156e:	d004      	beq.n	157a <grid_port_init+0x76>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    1570:	2301      	movs	r3, #1
    1572:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
    1576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    157a:	2300      	movs	r3, #0
    157c:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
		por->partner_fi = 0;
    1580:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
		if (por->direction == GRID_MSG_NORTH){
    1584:	7a63      	ldrb	r3, [r4, #9]
    1586:	b2db      	uxtb	r3, r3
    1588:	2b11      	cmp	r3, #17
    158a:	d013      	beq.n	15b4 <grid_port_init+0xb0>
		else if (por->direction == GRID_MSG_EAST){
    158c:	7a63      	ldrb	r3, [r4, #9]
    158e:	b2db      	uxtb	r3, r3
    1590:	2b12      	cmp	r3, #18
    1592:	d017      	beq.n	15c4 <grid_port_init+0xc0>
		else if (por->direction == GRID_MSG_SOUTH){
    1594:	7a63      	ldrb	r3, [r4, #9]
    1596:	b2db      	uxtb	r3, r3
    1598:	2b13      	cmp	r3, #19
    159a:	d01b      	beq.n	15d4 <grid_port_init+0xd0>
		else if (por->direction == GRID_MSG_WEST){
    159c:	7a63      	ldrb	r3, [r4, #9]
    159e:	b2db      	uxtb	r3, r3
    15a0:	2b14      	cmp	r3, #20
    15a2:	d1e8      	bne.n	1576 <grid_port_init+0x72>
			por->dx = -1;
    15a4:	23ff      	movs	r3, #255	; 0xff
    15a6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    15aa:	2300      	movs	r3, #0
    15ac:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15b4:	2300      	movs	r3, #0
    15b6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 1;
    15ba:	2301      	movs	r3, #1
    15bc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    15c4:	2301      	movs	r3, #1
    15c6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = 0;
    15ca:	2300      	movs	r3, #0
    15cc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    15d4:	2300      	movs	r3, #0
    15d6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
			por->dy = -1;
    15da:	23ff      	movs	r3, #255	; 0xff
    15dc:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    15e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15e4:	00001321 	.word	0x00001321

000015e8 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    15e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15ec:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    15ee:	2600      	movs	r6, #0
    15f0:	9602      	str	r6, [sp, #8]
    15f2:	2311      	movs	r3, #17
    15f4:	9301      	str	r3, [sp, #4]
    15f6:	2401      	movs	r4, #1
    15f8:	9400      	str	r4, [sp, #0]
    15fa:	4b25      	ldr	r3, [pc, #148]	; (1690 <grid_port_init_all+0xa8>)
    15fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1600:	4611      	mov	r1, r2
    1602:	4824      	ldr	r0, [pc, #144]	; (1694 <grid_port_init_all+0xac>)
    1604:	4d24      	ldr	r5, [pc, #144]	; (1698 <grid_port_init_all+0xb0>)
    1606:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    1608:	9402      	str	r4, [sp, #8]
    160a:	2312      	movs	r3, #18
    160c:	9301      	str	r3, [sp, #4]
    160e:	9400      	str	r4, [sp, #0]
    1610:	4b22      	ldr	r3, [pc, #136]	; (169c <grid_port_init_all+0xb4>)
    1612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1616:	4611      	mov	r1, r2
    1618:	4821      	ldr	r0, [pc, #132]	; (16a0 <grid_port_init_all+0xb8>)
    161a:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    161c:	f04f 0902 	mov.w	r9, #2
    1620:	f8cd 9008 	str.w	r9, [sp, #8]
    1624:	2313      	movs	r3, #19
    1626:	9301      	str	r3, [sp, #4]
    1628:	9400      	str	r4, [sp, #0]
    162a:	4b1e      	ldr	r3, [pc, #120]	; (16a4 <grid_port_init_all+0xbc>)
    162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1630:	4611      	mov	r1, r2
    1632:	481d      	ldr	r0, [pc, #116]	; (16a8 <grid_port_init_all+0xc0>)
    1634:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    1636:	2703      	movs	r7, #3
    1638:	9702      	str	r7, [sp, #8]
    163a:	2314      	movs	r3, #20
    163c:	9301      	str	r3, [sp, #4]
    163e:	9400      	str	r4, [sp, #0]
    1640:	4b1a      	ldr	r3, [pc, #104]	; (16ac <grid_port_init_all+0xc4>)
    1642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1646:	4611      	mov	r1, r2
    1648:	4819      	ldr	r0, [pc, #100]	; (16b0 <grid_port_init_all+0xc8>)
    164a:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1);
    164c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 16b8 <grid_port_init_all+0xd0>
    1650:	f04f 0aff 	mov.w	sl, #255	; 0xff
    1654:	f8cd a008 	str.w	sl, [sp, #8]
    1658:	9601      	str	r6, [sp, #4]
    165a:	9700      	str	r7, [sp, #0]
    165c:	4633      	mov	r3, r6
    165e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1662:	4611      	mov	r1, r2
    1664:	4640      	mov	r0, r8
    1666:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    1668:	4f12      	ldr	r7, [pc, #72]	; (16b4 <grid_port_init_all+0xcc>)
    166a:	f8cd a008 	str.w	sl, [sp, #8]
    166e:	9601      	str	r6, [sp, #4]
    1670:	f8cd 9000 	str.w	r9, [sp]
    1674:	4633      	mov	r3, r6
    1676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    167a:	4611      	mov	r1, r2
    167c:	4638      	mov	r0, r7
    167e:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    1680:	f888 450f 	strb.w	r4, [r8, #1295]	; 0x50f
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    1684:	f887 450f 	strb.w	r4, [r7, #1295]	; 0x50f
	
	
}
    1688:	b004      	add	sp, #16
    168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    168e:	bf00      	nop
    1690:	200010d8 	.word	0x200010d8
    1694:	200012ac 	.word	0x200012ac
    1698:	00001505 	.word	0x00001505
    169c:	20001084 	.word	0x20001084
    16a0:	20003114 	.word	0x20003114
    16a4:	200011dc 	.word	0x200011dc
    16a8:	200026f0 	.word	0x200026f0
    16ac:	2000118c 	.word	0x2000118c
    16b0:	200021cc 	.word	0x200021cc
    16b4:	20002c04 	.word	0x20002c04
    16b8:	200017fc 	.word	0x200017fc

000016bc <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    16bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c0:	b093      	sub	sp, #76	; 0x4c
    16c2:	af02      	add	r7, sp, #8
    16c4:	4605      	mov	r5, r0
    16c6:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    16c8:	f500 639e 	add.w	r3, r0, #1264	; 0x4f0
    16cc:	60bb      	str	r3, [r7, #8]
    16ce:	4618      	mov	r0, r3
    16d0:	4b5d      	ldr	r3, [pc, #372]	; (1848 <grid_port_process_inbound+0x18c>)
    16d2:	4798      	blx	r3
	
	if (!packet_size){
    16d4:	b920      	cbnz	r0, 16e0 <grid_port_process_inbound+0x24>
    16d6:	2000      	movs	r0, #0
		}	

		
	}
		
}
    16d8:	3744      	adds	r7, #68	; 0x44
    16da:	46bd      	mov	sp, r7
    16dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16e0:	4680      	mov	r8, r0
	}else{
    16e2:	f8c7 d004 	str.w	sp, [r7, #4]
		port_array_default[0] = &GRID_PORT_N;
    16e6:	4b59      	ldr	r3, [pc, #356]	; (184c <grid_port_process_inbound+0x190>)
    16e8:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    16ea:	4b59      	ldr	r3, [pc, #356]	; (1850 <grid_port_process_inbound+0x194>)
    16ec:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    16ee:	4b59      	ldr	r3, [pc, #356]	; (1854 <grid_port_process_inbound+0x198>)
    16f0:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    16f2:	4b59      	ldr	r3, [pc, #356]	; (1858 <grid_port_process_inbound+0x19c>)
    16f4:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    16f6:	4b59      	ldr	r3, [pc, #356]	; (185c <grid_port_process_inbound+0x1a0>)
    16f8:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    16fa:	4b59      	ldr	r3, [pc, #356]	; (1860 <grid_port_process_inbound+0x1a4>)
    16fc:	627b      	str	r3, [r7, #36]	; 0x24
    16fe:	f107 0310 	add.w	r3, r7, #16
    1702:	f107 0128 	add.w	r1, r7, #40	; 0x28
		uint8_t j=0;
    1706:	2400      	movs	r4, #0
    1708:	e001      	b.n	170e <grid_port_process_inbound+0x52>
		for(uint8_t i=0; i<port_count; i++){
    170a:	428b      	cmp	r3, r1
    170c:	d00e      	beq.n	172c <grid_port_process_inbound+0x70>
			if (port_array_default[i]->partner_status != 0){
    170e:	f853 2b04 	ldr.w	r2, [r3], #4
    1712:	f892 050f 	ldrb.w	r0, [r2, #1295]	; 0x50f
    1716:	2800      	cmp	r0, #0
    1718:	d0f7      	beq.n	170a <grid_port_process_inbound+0x4e>
				port_array[j] = port_array_default[i];
    171a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    171e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1722:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    1726:	3401      	adds	r4, #1
    1728:	b2e4      	uxtb	r4, r4
    172a:	e7ee      	b.n	170a <grid_port_process_inbound+0x4e>
		for (uint8_t i=0; i<port_count; i++)
    172c:	2c00      	cmp	r4, #0
    172e:	d079      	beq.n	1824 <grid_port_process_inbound+0x168>
    1730:	f107 0928 	add.w	r9, r7, #40	; 0x28
    1734:	1e66      	subs	r6, r4, #1
    1736:	b2f6      	uxtb	r6, r6
    1738:	3601      	adds	r6, #1
    173a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    173e:	f8df b140 	ldr.w	fp, [pc, #320]	; 1880 <grid_port_process_inbound+0x1c4>
    1742:	f8c7 900c 	str.w	r9, [r7, #12]
    1746:	e007      	b.n	1758 <grid_port_process_inbound+0x9c>
    1748:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    174c:	47d8      	blx	fp
    174e:	4580      	cmp	r8, r0
    1750:	d80c      	bhi.n	176c <grid_port_process_inbound+0xb0>
		for (uint8_t i=0; i<port_count; i++)
    1752:	68fb      	ldr	r3, [r7, #12]
    1754:	42b3      	cmp	r3, r6
    1756:	d016      	beq.n	1786 <grid_port_process_inbound+0xca>
			if (port_array[i] != por || loopback){
    1758:	68fb      	ldr	r3, [r7, #12]
    175a:	f853 0b04 	ldr.w	r0, [r3], #4
    175e:	60fb      	str	r3, [r7, #12]
    1760:	4285      	cmp	r5, r0
    1762:	d1f1      	bne.n	1748 <grid_port_process_inbound+0x8c>
    1764:	f1ba 0f00 	cmp.w	sl, #0
    1768:	d0f3      	beq.n	1752 <grid_port_process_inbound+0x96>
    176a:	e7ed      	b.n	1748 <grid_port_process_inbound+0x8c>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    176c:	23c8      	movs	r3, #200	; 0xc8
    176e:	9301      	str	r3, [sp, #4]
    1770:	2302      	movs	r3, #2
    1772:	9300      	str	r3, [sp, #0]
    1774:	2300      	movs	r3, #0
    1776:	2264      	movs	r2, #100	; 0x64
    1778:	4611      	mov	r1, r2
    177a:	483a      	ldr	r0, [pc, #232]	; (1864 <grid_port_process_inbound+0x1a8>)
    177c:	4c3a      	ldr	r4, [pc, #232]	; (1868 <grid_port_process_inbound+0x1ac>)
    177e:	47a0      	blx	r4
    1780:	f8d7 d004 	ldr.w	sp, [r7, #4]
    1784:	e7a7      	b.n	16d6 <grid_port_process_inbound+0x1a>
    1786:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1788:	68b8      	ldr	r0, [r7, #8]
    178a:	4b38      	ldr	r3, [pc, #224]	; (186c <grid_port_process_inbound+0x1b0>)
    178c:	4798      	blx	r3
    178e:	4580      	cmp	r8, r0
    1790:	d000      	beq.n	1794 <grid_port_process_inbound+0xd8>
    1792:	e7fe      	b.n	1792 <grid_port_process_inbound+0xd6>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    1794:	4e36      	ldr	r6, [pc, #216]	; (1870 <grid_port_process_inbound+0x1b4>)
    1796:	e004      	b.n	17a2 <grid_port_process_inbound+0xe6>
			if (port_array[i] != por || loopback){
    1798:	f1ba 0f00 	cmp.w	sl, #0
    179c:	d105      	bne.n	17aa <grid_port_process_inbound+0xee>
		for (uint8_t i=0; i<port_count; i++)
    179e:	45d9      	cmp	r9, fp
    17a0:	d045      	beq.n	182e <grid_port_process_inbound+0x172>
			if (port_array[i] != por || loopback){
    17a2:	f859 0b04 	ldr.w	r0, [r9], #4
    17a6:	4285      	cmp	r5, r0
    17a8:	d0f6      	beq.n	1798 <grid_port_process_inbound+0xdc>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    17aa:	4641      	mov	r1, r8
    17ac:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    17b0:	47b0      	blx	r6
    17b2:	e7f4      	b.n	179e <grid_port_process_inbound+0xe2>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    17b4:	6879      	ldr	r1, [r7, #4]
    17b6:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    17ba:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	42b3      	cmp	r3, r6
    17c0:	d007      	beq.n	17d2 <grid_port_process_inbound+0x116>
				if (port_array[i] != por || loopback){
    17c2:	f856 0b04 	ldr.w	r0, [r6], #4
    17c6:	4285      	cmp	r5, r0
    17c8:	d1f4      	bne.n	17b4 <grid_port_process_inbound+0xf8>
    17ca:	f1ba 0f00 	cmp.w	sl, #0
    17ce:	d0f5      	beq.n	17bc <grid_port_process_inbound+0x100>
    17d0:	e7f0      	b.n	17b4 <grid_port_process_inbound+0xf8>
    17d2:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    17d6:	fa1f f38b 	uxth.w	r3, fp
    17da:	4543      	cmp	r3, r8
    17dc:	d208      	bcs.n	17f0 <grid_port_process_inbound+0x134>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    17de:	68b8      	ldr	r0, [r7, #8]
    17e0:	4b24      	ldr	r3, [pc, #144]	; (1874 <grid_port_process_inbound+0x1b8>)
    17e2:	4798      	blx	r3
    17e4:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    17e6:	2c00      	cmp	r4, #0
    17e8:	d0f3      	beq.n	17d2 <grid_port_process_inbound+0x116>
    17ea:	f107 0628 	add.w	r6, r7, #40	; 0x28
    17ee:	e7e8      	b.n	17c2 <grid_port_process_inbound+0x106>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    17f0:	68b8      	ldr	r0, [r7, #8]
    17f2:	4b21      	ldr	r3, [pc, #132]	; (1878 <grid_port_process_inbound+0x1bc>)
    17f4:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    17f6:	2c00      	cmp	r4, #0
    17f8:	f43f af6e 	beq.w	16d8 <grid_port_process_inbound+0x1c>
    17fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    1800:	4e1e      	ldr	r6, [pc, #120]	; (187c <grid_port_process_inbound+0x1c0>)
    1802:	68fb      	ldr	r3, [r7, #12]
    1804:	4698      	mov	r8, r3
    1806:	e005      	b.n	1814 <grid_port_process_inbound+0x158>
			if (port_array[i] != por || loopback){
    1808:	f1ba 0f00 	cmp.w	sl, #0
    180c:	d106      	bne.n	181c <grid_port_process_inbound+0x160>
		for (uint8_t i=0; i<port_count; i++)
    180e:	45a0      	cmp	r8, r4
    1810:	f43f af62 	beq.w	16d8 <grid_port_process_inbound+0x1c>
			if (port_array[i] != por || loopback){
    1814:	f854 0b04 	ldr.w	r0, [r4], #4
    1818:	4285      	cmp	r5, r0
    181a:	d0f5      	beq.n	1808 <grid_port_process_inbound+0x14c>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    181c:	f500 609b 	add.w	r0, r0, #1240	; 0x4d8
    1820:	47b0      	blx	r6
    1822:	e7f4      	b.n	180e <grid_port_process_inbound+0x152>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    1824:	68b8      	ldr	r0, [r7, #8]
    1826:	4b11      	ldr	r3, [pc, #68]	; (186c <grid_port_process_inbound+0x1b0>)
    1828:	4798      	blx	r3
    182a:	4540      	cmp	r0, r8
    182c:	d1b1      	bne.n	1792 <grid_port_process_inbound+0xd6>
    182e:	1e63      	subs	r3, r4, #1
    1830:	b2db      	uxtb	r3, r3
    1832:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    183a:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    183c:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    1840:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1884 <grid_port_process_inbound+0x1c8>
    1844:	60fb      	str	r3, [r7, #12]
    1846:	e7ca      	b.n	17de <grid_port_process_inbound+0x122>
    1848:	000013d1 	.word	0x000013d1
    184c:	200012ac 	.word	0x200012ac
    1850:	20003114 	.word	0x20003114
    1854:	200026f0 	.word	0x200026f0
    1858:	200021cc 	.word	0x200021cc
    185c:	200017fc 	.word	0x200017fc
    1860:	20002c04 	.word	0x20002c04
    1864:	20001d1c 	.word	0x20001d1c
    1868:	000038a1 	.word	0x000038a1
    186c:	00001443 	.word	0x00001443
    1870:	00001375 	.word	0x00001375
    1874:	000014cd 	.word	0x000014cd
    1878:	000014f5 	.word	0x000014f5
    187c:	000013c1 	.word	0x000013c1
    1880:	00001361 	.word	0x00001361
    1884:	000013a5 	.word	0x000013a5

00001888 <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    1888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    188c:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    1890:	af06      	add	r7, sp, #24
    1892:	62f8      	str	r0, [r7, #44]	; 0x2c
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1894:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    1898:	4630      	mov	r0, r6
    189a:	4b7e      	ldr	r3, [pc, #504]	; (1a94 <grid_port_process_outbound_usb+0x20c>)
    189c:	4798      	blx	r3
	
	if (!length){		
    189e:	2800      	cmp	r0, #0
    18a0:	f000 8209 	beq.w	1cb6 <grid_port_process_outbound_usb+0x42e>
    18a4:	4604      	mov	r4, r0
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4613      	mov	r3, r2
    18aa:	3327      	adds	r3, #39	; 0x27
    18ac:	f202 217f 	addw	r1, r2, #639	; 0x27f


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    18b0:	2200      	movs	r2, #0
    18b2:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    18b6:	428b      	cmp	r3, r1
    18b8:	d1fb      	bne.n	18b2 <grid_port_process_outbound_usb+0x2a>
		}
		
		
		
		uint8_t temp[500] = {0};
    18ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    18be:	2100      	movs	r1, #0
    18c0:	f107 0034 	add.w	r0, r7, #52	; 0x34
    18c4:	4b74      	ldr	r3, [pc, #464]	; (1a98 <grid_port_process_outbound_usb+0x210>)
    18c6:	4798      	blx	r3
			
		
		//uint8_t temp[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    18c8:	4630      	mov	r0, r6
    18ca:	4b74      	ldr	r3, [pc, #464]	; (1a9c <grid_port_process_outbound_usb+0x214>)
    18cc:	4798      	blx	r3
    18ce:	2500      	movs	r5, #0
		
		for (uint8_t i = 0; i<length; i++){
			
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    18d0:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 1ad0 <grid_port_process_outbound_usb+0x248>
    18d4:	f107 0834 	add.w	r8, r7, #52	; 0x34
    18d8:	4630      	mov	r0, r6
    18da:	47c8      	blx	r9
    18dc:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    18e0:	3501      	adds	r5, #1
    18e2:	b2ed      	uxtb	r5, r5
    18e4:	b2ab      	uxth	r3, r5
    18e6:	429c      	cmp	r4, r3
    18e8:	d8f6      	bhi.n	18d8 <grid_port_process_outbound_usb+0x50>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    18ea:	4630      	mov	r0, r6
    18ec:	4b6c      	ldr	r3, [pc, #432]	; (1aa0 <grid_port_process_outbound_usb+0x218>)
    18ee:	4798      	blx	r3
		

		// GRID-2-HOST TRANSLATOR
		uint8_t id = grid_msg_get_id(temp);		
    18f0:	f107 0034 	add.w	r0, r7, #52	; 0x34
    18f4:	4b6b      	ldr	r3, [pc, #428]	; (1aa4 <grid_port_process_outbound_usb+0x21c>)
    18f6:	4798      	blx	r3
    18f8:	61f8      	str	r0, [r7, #28]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    18fa:	f107 0034 	add.w	r0, r7, #52	; 0x34
    18fe:	4b6a      	ldr	r3, [pc, #424]	; (1aa8 <grid_port_process_outbound_usb+0x220>)
    1900:	4798      	blx	r3
    1902:	4606      	mov	r6, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    1904:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1908:	4b68      	ldr	r3, [pc, #416]	; (1aac <grid_port_process_outbound_usb+0x224>)
    190a:	4798      	blx	r3
    190c:	4680      	mov	r8, r0
		uint8_t age = grid_msg_get_age(temp);
    190e:	f107 0034 	add.w	r0, r7, #52	; 0x34
    1912:	4b67      	ldr	r3, [pc, #412]	; (1ab0 <grid_port_process_outbound_usb+0x228>)
    1914:	4798      	blx	r3
    1916:	61b8      	str	r0, [r7, #24]
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		uint8_t output_cursor = 0;
		
		uint8_t error_flag = 0;
    1918:	2500      	movs	r5, #0
    191a:	f887 5033 	strb.w	r5, [r7, #51]	; 0x33
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    191e:	f1a8 087f 	sub.w	r8, r8, #127	; 0x7f
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
					
					
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    1922:	fa4f f388 	sxtb.w	r3, r8
    1926:	627b      	str	r3, [r7, #36]	; 0x24
    1928:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    192c:	009b      	lsls	r3, r3, #2
    192e:	60fb      	str	r3, [r7, #12]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1930:	3e7f      	subs	r6, #127	; 0x7f
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    1932:	b273      	sxtb	r3, r6
    1934:	623b      	str	r3, [r7, #32]
    1936:	015b      	lsls	r3, r3, #5
    1938:	60bb      	str	r3, [r7, #8]
    193a:	1e63      	subs	r3, r4, #1
    193c:	b29b      	uxth	r3, r3
    193e:	f103 0901 	add.w	r9, r3, #1
    1942:	46ab      	mov	fp, r5
    1944:	46aa      	mov	sl, r5
    1946:	e006      	b.n	1956 <grid_port_process_outbound_usb+0xce>
				current_start = i;
    1948:	fa5f f58b 	uxtb.w	r5, fp
    194c:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    1950:	45cb      	cmp	fp, r9
    1952:	f000 81ab 	beq.w	1cac <grid_port_process_outbound_usb+0x424>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1956:	f107 0334 	add.w	r3, r7, #52	; 0x34
    195a:	f81b 3003 	ldrb.w	r3, [fp, r3]
    195e:	2b02      	cmp	r3, #2
    1960:	d0f2      	beq.n	1948 <grid_port_process_outbound_usb+0xc0>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1962:	2b03      	cmp	r3, #3
    1964:	d1f2      	bne.n	194c <grid_port_process_outbound_usb+0xc4>
    1966:	2d00      	cmp	r5, #0
    1968:	d0f0      	beq.n	194c <grid_port_process_outbound_usb+0xc4>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    196a:	462c      	mov	r4, r5
    196c:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1970:	2102      	movs	r1, #2
    1972:	f507 730a 	add.w	r3, r7, #552	; 0x228
    1976:	1958      	adds	r0, r3, r5
    1978:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    197c:	4b4d      	ldr	r3, [pc, #308]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    197e:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    1980:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    1984:	d019      	beq.n	19ba <grid_port_process_outbound_usb+0x132>
								
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
					
									
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1986:	2e01      	cmp	r6, #1
    1988:	f000 80a4 	beq.w	1ad4 <grid_port_process_outbound_usb+0x24c>
					//usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
		
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    198c:	2e04      	cmp	r6, #4
    198e:	f000 811a 	beq.w	1bc6 <grid_port_process_outbound_usb+0x33e>

					}
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    1992:	2e02      	cmp	r6, #2
    1994:	f000 8188 	beq.w	1ca8 <grid_port_process_outbound_usb+0x420>
					
					//hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
					
				}	
				else{
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    1998:	f10a 0428 	add.w	r4, sl, #40	; 0x28
    199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    199e:	441c      	add	r4, r3
    19a0:	b2c2      	uxtb	r2, r0
    19a2:	4945      	ldr	r1, [pc, #276]	; (1ab8 <grid_port_process_outbound_usb+0x230>)
    19a4:	4620      	mov	r0, r4
    19a6:	4b45      	ldr	r3, [pc, #276]	; (1abc <grid_port_process_outbound_usb+0x234>)
    19a8:	4798      	blx	r3
					
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    19aa:	4620      	mov	r0, r4
    19ac:	4b44      	ldr	r3, [pc, #272]	; (1ac0 <grid_port_process_outbound_usb+0x238>)
    19ae:	4798      	blx	r3
    19b0:	4482      	add	sl, r0
    19b2:	fa5f fa8a 	uxtb.w	sl, sl
				}
				
				current_start = 0;
    19b6:	2500      	movs	r5, #0
    19b8:	e7c8      	b.n	194c <grid_port_process_outbound_usb+0xc4>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    19ba:	1ce8      	adds	r0, r5, #3
    19bc:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19c0:	2102      	movs	r1, #2
    19c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
    19c6:	4418      	add	r0, r3
    19c8:	4b3a      	ldr	r3, [pc, #232]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    19ca:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    19cc:	1d68      	adds	r0, r5, #5
    19ce:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19d2:	2102      	movs	r1, #2
    19d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    19d8:	4418      	add	r0, r3
    19da:	4b36      	ldr	r3, [pc, #216]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    19dc:	4798      	blx	r3
    19de:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    19e2:	1de8      	adds	r0, r5, #7
    19e4:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19e8:	2102      	movs	r1, #2
    19ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
    19ee:	4418      	add	r0, r3
    19f0:	4b30      	ldr	r3, [pc, #192]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    19f2:	4798      	blx	r3
    19f4:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    19f6:	f105 0009 	add.w	r0, r5, #9
    19fa:	f107 0233 	add.w	r2, r7, #51	; 0x33
    19fe:	2102      	movs	r1, #2
    1a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1a04:	4418      	add	r0, r3
    1a06:	4b2b      	ldr	r3, [pc, #172]	; (1ab4 <grid_port_process_outbound_usb+0x22c>)
    1a08:	4798      	blx	r3
					midi_channel = (256-dy*4+grid_sys_state.bank_select)%16;
    1a0a:	4b2e      	ldr	r3, [pc, #184]	; (1ac4 <grid_port_process_outbound_usb+0x23c>)
    1a0c:	7a59      	ldrb	r1, [r3, #9]
    1a0e:	68fb      	ldr	r3, [r7, #12]
    1a10:	4419      	add	r1, r3
    1a12:	424b      	negs	r3, r1
    1a14:	f001 020f 	and.w	r2, r1, #15
    1a18:	f003 030f 	and.w	r3, r3, #15
    1a1c:	bf58      	it	pl
    1a1e:	425a      	negpl	r2, r3
    1a20:	4611      	mov	r1, r2
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1a22:	f10a 0328 	add.w	r3, sl, #40	; 0x28
    1a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a28:	18d3      	adds	r3, r2, r3
    1a2a:	461d      	mov	r5, r3
					midi_param1  = (256+midi_param1 + 32*dx)%128;
    1a2c:	b2e4      	uxtb	r4, r4
    1a2e:	f504 7480 	add.w	r4, r4, #256	; 0x100
    1a32:	68ba      	ldr	r2, [r7, #8]
    1a34:	4414      	add	r4, r2
    1a36:	4263      	negs	r3, r4
    1a38:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1a40:	bf58      	it	pl
    1a42:	425c      	negpl	r4, r3
    1a44:	b2e4      	uxtb	r4, r4
    1a46:	b2c3      	uxtb	r3, r0
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    1a48:	617b      	str	r3, [r7, #20]
    1a4a:	9305      	str	r3, [sp, #20]
    1a4c:	9404      	str	r4, [sp, #16]
    1a4e:	f8cd 800c 	str.w	r8, [sp, #12]
    1a52:	62b9      	str	r1, [r7, #40]	; 0x28
    1a54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1a58:	9302      	str	r3, [sp, #8]
    1a5a:	69ba      	ldr	r2, [r7, #24]
    1a5c:	9201      	str	r2, [sp, #4]
    1a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a60:	9200      	str	r2, [sp, #0]
    1a62:	6a3b      	ldr	r3, [r7, #32]
    1a64:	69fa      	ldr	r2, [r7, #28]
    1a66:	4918      	ldr	r1, [pc, #96]	; (1ac8 <grid_port_process_outbound_usb+0x240>)
    1a68:	613d      	str	r5, [r7, #16]
    1a6a:	4628      	mov	r0, r5
    1a6c:	4d13      	ldr	r5, [pc, #76]	; (1abc <grid_port_process_outbound_usb+0x234>)
    1a6e:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1a70:	6938      	ldr	r0, [r7, #16]
    1a72:	4b13      	ldr	r3, [pc, #76]	; (1ac0 <grid_port_process_outbound_usb+0x238>)
    1a74:	4798      	blx	r3
    1a76:	4482      	add	sl, r0
    1a78:	fa5f fa8a 	uxtb.w	sl, sl
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    1a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1a7e:	ea48 0101 	orr.w	r1, r8, r1
    1a82:	697b      	ldr	r3, [r7, #20]
    1a84:	4622      	mov	r2, r4
    1a86:	b2c9      	uxtb	r1, r1
    1a88:	ea4f 1018 	mov.w	r0, r8, lsr #4
    1a8c:	4c0f      	ldr	r4, [pc, #60]	; (1acc <grid_port_process_outbound_usb+0x244>)
    1a8e:	47a0      	blx	r4
				current_start = 0;
    1a90:	4635      	mov	r5, r6
    1a92:	e75b      	b.n	194c <grid_port_process_outbound_usb+0xc4>
    1a94:	000013d1 	.word	0x000013d1
    1a98:	0000bdb7 	.word	0x0000bdb7
    1a9c:	00001443 	.word	0x00001443
    1aa0:	000014f5 	.word	0x000014f5
    1aa4:	00003bfd 	.word	0x00003bfd
    1aa8:	00003c1d 	.word	0x00003c1d
    1aac:	00003c3d 	.word	0x00003c3d
    1ab0:	00003c5d 	.word	0x00003c5d
    1ab4:	000038f5 	.word	0x000038f5
    1ab8:	0000d324 	.word	0x0000d324
    1abc:	0000c1a5 	.word	0x0000c1a5
    1ac0:	0000c1ed 	.word	0x0000c1ed
    1ac4:	20001d1c 	.word	0x20001d1c
    1ac8:	0000d234 	.word	0x0000d234
    1acc:	0000abe9 	.word	0x0000abe9
    1ad0:	000014cd 	.word	0x000014cd
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    1ad4:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    1ad8:	fa5f f38b 	uxtb.w	r3, fp
    1adc:	1b5b      	subs	r3, r3, r5
    1ade:	1eda      	subs	r2, r3, #3
    1ae0:	4b77      	ldr	r3, [pc, #476]	; (1cc0 <grid_port_process_outbound_usb+0x438>)
    1ae2:	fb83 1302 	smull	r1, r3, r3, r2
    1ae6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    1aea:	b2db      	uxtb	r3, r3
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    1aec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1af0:	3207      	adds	r2, #7
    1af2:	f022 0207 	bic.w	r2, r2, #7
    1af6:	ebad 0d02 	sub.w	sp, sp, r2
    1afa:	aa06      	add	r2, sp, #24
					for(uint8_t j=0; j<key_array_length; j++){
    1afc:	2b00      	cmp	r3, #0
    1afe:	d05e      	beq.n	1bbe <grid_port_process_outbound_usb+0x336>
    1b00:	3403      	adds	r4, #3
    1b02:	f107 0134 	add.w	r1, r7, #52	; 0x34
    1b06:	440c      	add	r4, r1
    1b08:	4690      	mov	r8, r2
    1b0a:	3b01      	subs	r3, #1
    1b0c:	b2db      	uxtb	r3, r3
    1b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b12:	3509      	adds	r5, #9
    1b14:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1b18:	18cb      	adds	r3, r1, r3
    1b1a:	617b      	str	r3, [r7, #20]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b1c:	f8c7 b004 	str.w	fp, [r7, #4]
    1b20:	f8c7 9000 	str.w	r9, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    1b24:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1b28:	2102      	movs	r1, #2
    1b2a:	4620      	mov	r0, r4
    1b2c:	4b65      	ldr	r3, [pc, #404]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1b2e:	4798      	blx	r3
    1b30:	4605      	mov	r5, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    1b32:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1b36:	2102      	movs	r1, #2
    1b38:	1860      	adds	r0, r4, r1
    1b3a:	4b62      	ldr	r3, [pc, #392]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1b3c:	4798      	blx	r3
    1b3e:	4606      	mov	r6, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1b40:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1b44:	2102      	movs	r1, #2
    1b46:	1d20      	adds	r0, r4, #4
    1b48:	4b5e      	ldr	r3, [pc, #376]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1b4a:	4798      	blx	r3
    1b4c:	4683      	mov	fp, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    1b4e:	f10a 0928 	add.w	r9, sl, #40	; 0x28
    1b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b54:	4499      	add	r9, r3
    1b56:	4b5c      	ldr	r3, [pc, #368]	; (1cc8 <grid_port_process_outbound_usb+0x440>)
    1b58:	4798      	blx	r3
    1b5a:	9005      	str	r0, [sp, #20]
    1b5c:	b2eb      	uxtb	r3, r5
    1b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    1b60:	9304      	str	r3, [sp, #16]
    1b62:	b2f6      	uxtb	r6, r6
    1b64:	9603      	str	r6, [sp, #12]
    1b66:	fa5f f38b 	uxtb.w	r3, fp
    1b6a:	9302      	str	r3, [sp, #8]
    1b6c:	69bb      	ldr	r3, [r7, #24]
    1b6e:	9301      	str	r3, [sp, #4]
    1b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b72:	9300      	str	r3, [sp, #0]
    1b74:	6a3b      	ldr	r3, [r7, #32]
    1b76:	69fa      	ldr	r2, [r7, #28]
    1b78:	4954      	ldr	r1, [pc, #336]	; (1ccc <grid_port_process_outbound_usb+0x444>)
    1b7a:	4648      	mov	r0, r9
    1b7c:	4d54      	ldr	r5, [pc, #336]	; (1cd0 <grid_port_process_outbound_usb+0x448>)
    1b7e:	47a8      	blx	r5
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1b80:	4648      	mov	r0, r9
    1b82:	4b54      	ldr	r3, [pc, #336]	; (1cd4 <grid_port_process_outbound_usb+0x44c>)
    1b84:	4798      	blx	r3
    1b86:	4482      	add	sl, r0
    1b88:	fa5f fa8a 	uxtb.w	sl, sl
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    1b8c:	f888 b000 	strb.w	fp, [r8]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1b90:	2e82      	cmp	r6, #130	; 0x82
    1b92:	bf14      	ite	ne
    1b94:	2600      	movne	r6, #0
    1b96:	2601      	moveq	r6, #1
						key_array[j] = current_key;
    1b98:	f888 6001 	strb.w	r6, [r8, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    1b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b9e:	2b80      	cmp	r3, #128	; 0x80
    1ba0:	bf14      	ite	ne
    1ba2:	2500      	movne	r5, #0
    1ba4:	2501      	moveq	r5, #1
    1ba6:	f888 5002 	strb.w	r5, [r8, #2]
    1baa:	3406      	adds	r4, #6
    1bac:	f108 0803 	add.w	r8, r8, #3
					for(uint8_t j=0; j<key_array_length; j++){
    1bb0:	697b      	ldr	r3, [r7, #20]
    1bb2:	429c      	cmp	r4, r3
    1bb4:	d1b6      	bne.n	1b24 <grid_port_process_outbound_usb+0x29c>
    1bb6:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1bba:	f8d7 9000 	ldr.w	r9, [r7]
    1bbe:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    1bc2:	2500      	movs	r5, #0
    1bc4:	e6c2      	b.n	194c <grid_port_process_outbound_usb+0xc4>
					uint8_t sys_command		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1bc6:	1ce8      	adds	r0, r5, #3
    1bc8:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bcc:	2102      	movs	r1, #2
    1bce:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1bd2:	4418      	add	r0, r3
    1bd4:	4b3b      	ldr	r3, [pc, #236]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1bd6:	4798      	blx	r3
    1bd8:	62b8      	str	r0, [r7, #40]	; 0x28
    1bda:	b2c5      	uxtb	r5, r0
					uint8_t sys_subcommand  = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1bdc:	1d60      	adds	r0, r4, #5
    1bde:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1be2:	2102      	movs	r1, #2
    1be4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1be8:	4418      	add	r0, r3
    1bea:	4b36      	ldr	r3, [pc, #216]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1bec:	4798      	blx	r3
    1bee:	4680      	mov	r8, r0
    1bf0:	b2c6      	uxtb	r6, r0
					uint8_t sys_value	    = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1bf2:	1de0      	adds	r0, r4, #7
    1bf4:	f107 0233 	add.w	r2, r7, #51	; 0x33
    1bf8:	2102      	movs	r1, #2
    1bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1bfe:	4418      	add	r0, r3
    1c00:	4b30      	ldr	r3, [pc, #192]	; (1cc4 <grid_port_process_outbound_usb+0x43c>)
    1c02:	4798      	blx	r3
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c04:	2d64      	cmp	r5, #100	; 0x64
    1c06:	d003      	beq.n	1c10 <grid_port_process_outbound_usb+0x388>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1c08:	2d66      	cmp	r5, #102	; 0x66
    1c0a:	d025      	beq.n	1c58 <grid_port_process_outbound_usb+0x3d0>
				current_start = 0;
    1c0c:	2500      	movs	r5, #0
    1c0e:	e69d      	b.n	194c <grid_port_process_outbound_usb+0xc4>
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c10:	2e65      	cmp	r6, #101	; 0x65
    1c12:	d001      	beq.n	1c18 <grid_port_process_outbound_usb+0x390>
				current_start = 0;
    1c14:	2500      	movs	r5, #0
    1c16:	e699      	b.n	194c <grid_port_process_outbound_usb+0xc4>
    1c18:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_value);		
    1c1a:	4621      	mov	r1, r4
    1c1c:	482e      	ldr	r0, [pc, #184]	; (1cd8 <grid_port_process_outbound_usb+0x450>)
    1c1e:	4b2f      	ldr	r3, [pc, #188]	; (1cdc <grid_port_process_outbound_usb+0x454>)
    1c20:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1c22:	f10a 0528 	add.w	r5, sl, #40	; 0x28
    1c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c28:	441d      	add	r5, r3
    1c2a:	9404      	str	r4, [sp, #16]
    1c2c:	9603      	str	r6, [sp, #12]
    1c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1c32:	9302      	str	r3, [sp, #8]
    1c34:	69bb      	ldr	r3, [r7, #24]
    1c36:	9301      	str	r3, [sp, #4]
    1c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c3a:	9300      	str	r3, [sp, #0]
    1c3c:	6a3b      	ldr	r3, [r7, #32]
    1c3e:	69fa      	ldr	r2, [r7, #28]
    1c40:	4927      	ldr	r1, [pc, #156]	; (1ce0 <grid_port_process_outbound_usb+0x458>)
    1c42:	4628      	mov	r0, r5
    1c44:	4c22      	ldr	r4, [pc, #136]	; (1cd0 <grid_port_process_outbound_usb+0x448>)
    1c46:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    1c48:	4628      	mov	r0, r5
    1c4a:	4b22      	ldr	r3, [pc, #136]	; (1cd4 <grid_port_process_outbound_usb+0x44c>)
    1c4c:	4798      	blx	r3
    1c4e:	4482      	add	sl, r0
    1c50:	fa5f fa8a 	uxtb.w	sl, sl
				current_start = 0;
    1c54:	2500      	movs	r5, #0
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    1c56:	e679      	b.n	194c <grid_port_process_outbound_usb+0xc4>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    1c58:	2e67      	cmp	r6, #103	; 0x67
    1c5a:	d001      	beq.n	1c60 <grid_port_process_outbound_usb+0x3d8>
				current_start = 0;
    1c5c:	2500      	movs	r5, #0
    1c5e:	e675      	b.n	194c <grid_port_process_outbound_usb+0xc4>
    1c60:	b2c5      	uxtb	r5, r0
						printf("{\"type\":\"HEARTBEAT\", \"data\": [\"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, sys_value);		
    1c62:	462b      	mov	r3, r5
    1c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1c66:	6a39      	ldr	r1, [r7, #32]
    1c68:	481e      	ldr	r0, [pc, #120]	; (1ce4 <grid_port_process_outbound_usb+0x45c>)
    1c6a:	4c1f      	ldr	r4, [pc, #124]	; (1ce8 <grid_port_process_outbound_usb+0x460>)
    1c6c:	47a0      	blx	r4
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    1c6e:	f10a 0628 	add.w	r6, sl, #40	; 0x28
    1c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c74:	4416      	add	r6, r2
    1c76:	9504      	str	r5, [sp, #16]
    1c78:	fa5f f388 	uxtb.w	r3, r8
    1c7c:	9303      	str	r3, [sp, #12]
    1c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1c82:	9302      	str	r3, [sp, #8]
    1c84:	69ba      	ldr	r2, [r7, #24]
    1c86:	9201      	str	r2, [sp, #4]
    1c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1c8a:	9200      	str	r2, [sp, #0]
    1c8c:	6a3b      	ldr	r3, [r7, #32]
    1c8e:	69fa      	ldr	r2, [r7, #28]
    1c90:	4913      	ldr	r1, [pc, #76]	; (1ce0 <grid_port_process_outbound_usb+0x458>)
    1c92:	4630      	mov	r0, r6
    1c94:	4c0e      	ldr	r4, [pc, #56]	; (1cd0 <grid_port_process_outbound_usb+0x448>)
    1c96:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    1c98:	4630      	mov	r0, r6
    1c9a:	4b0e      	ldr	r3, [pc, #56]	; (1cd4 <grid_port_process_outbound_usb+0x44c>)
    1c9c:	4798      	blx	r3
    1c9e:	4482      	add	sl, r0
    1ca0:	fa5f fa8a 	uxtb.w	sl, sl
				current_start = 0;
    1ca4:	2500      	movs	r5, #0
    1ca6:	e651      	b.n	194c <grid_port_process_outbound_usb+0xc4>
    1ca8:	2500      	movs	r5, #0
    1caa:	e64f      	b.n	194c <grid_port_process_outbound_usb+0xc4>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    1cac:	4651      	mov	r1, sl
    1cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1cb0:	3028      	adds	r0, #40	; 0x28
    1cb2:	4b0e      	ldr	r3, [pc, #56]	; (1cec <grid_port_process_outbound_usb+0x464>)
    1cb4:	4798      	blx	r3
				
		
	}
	
	
}
    1cb6:	f507 770b 	add.w	r7, r7, #556	; 0x22c
    1cba:	46bd      	mov	sp, r7
    1cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cc0:	2aaaaaab 	.word	0x2aaaaaab
    1cc4:	000038f5 	.word	0x000038f5
    1cc8:	0000396d 	.word	0x0000396d
    1ccc:	0000d27c 	.word	0x0000d27c
    1cd0:	0000c1a5 	.word	0x0000c1a5
    1cd4:	0000c1ed 	.word	0x0000c1ed
    1cd8:	20001d1c 	.word	0x20001d1c
    1cdc:	00003a5d 	.word	0x00003a5d
    1ce0:	0000d2c4 	.word	0x0000d2c4
    1ce4:	0000d2f0 	.word	0x0000d2f0
    1ce8:	0000bf21 	.word	0x0000bf21
    1cec:	0000a425 	.word	0x0000a425

00001cf0 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    1cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cf4:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    1cf8:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    1cfc:	4630      	mov	r0, r6
    1cfe:	4b45      	ldr	r3, [pc, #276]	; (1e14 <grid_port_process_outbound_ui+0x124>)
    1d00:	4798      	blx	r3
	
	if (!length){
    1d02:	b918      	cbnz	r0, 1d0c <grid_port_process_outbound_ui+0x1c>

		
	}
	
	
}
    1d04:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    1d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d0c:	4605      	mov	r5, r0
		grid_buffer_read_init(&por->tx_buffer);
    1d0e:	4630      	mov	r0, r6
    1d10:	4b41      	ldr	r3, [pc, #260]	; (1e18 <grid_port_process_outbound_ui+0x128>)
    1d12:	4798      	blx	r3
    1d14:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    1d16:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1e38 <grid_port_process_outbound_ui+0x148>
    1d1a:	af05      	add	r7, sp, #20
    1d1c:	4630      	mov	r0, r6
    1d1e:	47c0      	blx	r8
    1d20:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<length; i++){
    1d22:	3401      	adds	r4, #1
    1d24:	b2e4      	uxtb	r4, r4
    1d26:	b2a3      	uxth	r3, r4
    1d28:	429d      	cmp	r5, r3
    1d2a:	d8f7      	bhi.n	1d1c <grid_port_process_outbound_ui+0x2c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    1d2c:	4630      	mov	r0, r6
    1d2e:	4b3b      	ldr	r3, [pc, #236]	; (1e1c <grid_port_process_outbound_ui+0x12c>)
    1d30:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);
    1d32:	ac05      	add	r4, sp, #20
    1d34:	4620      	mov	r0, r4
    1d36:	4b3a      	ldr	r3, [pc, #232]	; (1e20 <grid_port_process_outbound_ui+0x130>)
    1d38:	4798      	blx	r3
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    1d3a:	4620      	mov	r0, r4
    1d3c:	4b39      	ldr	r3, [pc, #228]	; (1e24 <grid_port_process_outbound_ui+0x134>)
    1d3e:	4798      	blx	r3
    1d40:	4681      	mov	r9, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;
    1d42:	4620      	mov	r0, r4
    1d44:	4b38      	ldr	r3, [pc, #224]	; (1e28 <grid_port_process_outbound_ui+0x138>)
    1d46:	4798      	blx	r3
    1d48:	4682      	mov	sl, r0
		uint8_t age = grid_msg_get_age(temp);
    1d4a:	4620      	mov	r0, r4
    1d4c:	4b37      	ldr	r3, [pc, #220]	; (1e2c <grid_port_process_outbound_ui+0x13c>)
    1d4e:	4798      	blx	r3
		uint8_t error_flag = 0;	
    1d50:	2000      	movs	r0, #0
    1d52:	f88d 0013 	strb.w	r0, [sp, #19]
    1d56:	4626      	mov	r6, r4
    1d58:	3d01      	subs	r5, #1
    1d5a:	b2ad      	uxth	r5, r5
    1d5c:	3501      	adds	r5, #1
    1d5e:	4425      	add	r5, r4
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1d60:	4f33      	ldr	r7, [pc, #204]	; (1e30 <grid_port_process_outbound_ui+0x140>)
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1d62:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1e3c <grid_port_process_outbound_ui+0x14c>
    1d66:	e004      	b.n	1d72 <grid_port_process_outbound_ui+0x82>
    1d68:	1ba0      	subs	r0, r4, r6
    1d6a:	b2c0      	uxtb	r0, r0
    1d6c:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    1d6e:	42ac      	cmp	r4, r5
    1d70:	d0c8      	beq.n	1d04 <grid_port_process_outbound_ui+0x14>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    1d72:	7823      	ldrb	r3, [r4, #0]
    1d74:	2b02      	cmp	r3, #2
    1d76:	d0f7      	beq.n	1d68 <grid_port_process_outbound_ui+0x78>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    1d78:	2b03      	cmp	r3, #3
    1d7a:	d1f7      	bne.n	1d6c <grid_port_process_outbound_ui+0x7c>
    1d7c:	2800      	cmp	r0, #0
    1d7e:	d0f5      	beq.n	1d6c <grid_port_process_outbound_ui+0x7c>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    1d80:	4680      	mov	r8, r0
    1d82:	ab82      	add	r3, sp, #520	; 0x208
    1d84:	4418      	add	r0, r3
    1d86:	f10d 0213 	add.w	r2, sp, #19
    1d8a:	2102      	movs	r1, #2
    1d8c:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    1d90:	47b8      	blx	r7
				if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    1d92:	b2c0      	uxtb	r0, r0
    1d94:	2803      	cmp	r0, #3
    1d96:	d001      	beq.n	1d9c <grid_port_process_outbound_ui+0xac>
				current_start = 0;
    1d98:	2000      	movs	r0, #0
    1d9a:	e7e7      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
					if (dx == 0 && dy == 0){
    1d9c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    1da0:	d136      	bne.n	1e10 <grid_port_process_outbound_ui+0x120>
    1da2:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    1da6:	d001      	beq.n	1dac <grid_port_process_outbound_ui+0xbc>
				current_start = 0;
    1da8:	2000      	movs	r0, #0
    1daa:	e7df      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    1dac:	f108 0003 	add.w	r0, r8, #3
    1db0:	f10d 0213 	add.w	r2, sp, #19
    1db4:	2102      	movs	r1, #2
    1db6:	ab05      	add	r3, sp, #20
    1db8:	4418      	add	r0, r3
    1dba:	47b8      	blx	r7
    1dbc:	9002      	str	r0, [sp, #8]
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    1dbe:	f108 0005 	add.w	r0, r8, #5
    1dc2:	f10d 0213 	add.w	r2, sp, #19
    1dc6:	2102      	movs	r1, #2
    1dc8:	ab05      	add	r3, sp, #20
    1dca:	4418      	add	r0, r3
    1dcc:	47b8      	blx	r7
    1dce:	9001      	str	r0, [sp, #4]
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    1dd0:	f108 0007 	add.w	r0, r8, #7
    1dd4:	f10d 0213 	add.w	r2, sp, #19
    1dd8:	2102      	movs	r1, #2
    1dda:	ab05      	add	r3, sp, #20
    1ddc:	4418      	add	r0, r3
    1dde:	47b8      	blx	r7
    1de0:	9003      	str	r0, [sp, #12]
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    1de2:	f108 0009 	add.w	r0, r8, #9
    1de6:	f10d 0213 	add.w	r2, sp, #19
    1dea:	2102      	movs	r1, #2
    1dec:	ab05      	add	r3, sp, #20
    1dee:	4418      	add	r0, r3
    1df0:	47b8      	blx	r7
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    1df2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1df6:	2a63      	cmp	r2, #99	; 0x63
    1df8:	d001      	beq.n	1dfe <grid_port_process_outbound_ui+0x10e>
				current_start = 0;
    1dfa:	2000      	movs	r0, #0
    1dfc:	e7b6      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    1dfe:	b2c3      	uxtb	r3, r0
    1e00:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e04:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1e08:	480a      	ldr	r0, [pc, #40]	; (1e34 <grid_port_process_outbound_ui+0x144>)
    1e0a:	47d8      	blx	fp
				current_start = 0;
    1e0c:	2000      	movs	r0, #0
    1e0e:	e7ad      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
    1e10:	2000      	movs	r0, #0
    1e12:	e7ab      	b.n	1d6c <grid_port_process_outbound_ui+0x7c>
    1e14:	000013d1 	.word	0x000013d1
    1e18:	00001443 	.word	0x00001443
    1e1c:	000014f5 	.word	0x000014f5
    1e20:	00003bfd 	.word	0x00003bfd
    1e24:	00003c1d 	.word	0x00003c1d
    1e28:	00003c3d 	.word	0x00003c3d
    1e2c:	00003c5d 	.word	0x00003c5d
    1e30:	000038f5 	.word	0x000038f5
    1e34:	20003628 	.word	0x20003628
    1e38:	000014cd 	.word	0x000014cd
    1e3c:	00002049 	.word	0x00002049

00001e40 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    1e40:	8983      	ldrh	r3, [r0, #12]
    1e42:	b103      	cbz	r3, 1e46 <grid_port_process_outbound_usart+0x6>
    1e44:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    1e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e4a:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    1e4c:	f500 669b 	add.w	r6, r0, #1240	; 0x4d8
    1e50:	4630      	mov	r0, r6
    1e52:	4b11      	ldr	r3, [pc, #68]	; (1e98 <grid_port_process_outbound_usart+0x58>)
    1e54:	4798      	blx	r3
    1e56:	4604      	mov	r4, r0
    1e58:	4607      	mov	r7, r0
		
		if (!packet_size){
    1e5a:	b910      	cbnz	r0, 1e62 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    1e5c:	2000      	movs	r0, #0
    1e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    1e62:	4630      	mov	r0, r6
    1e64:	4b0d      	ldr	r3, [pc, #52]	; (1e9c <grid_port_process_outbound_usart+0x5c>)
    1e66:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    1e68:	81ac      	strh	r4, [r5, #12]
    1e6a:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    1e6c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1ea8 <grid_port_process_outbound_usart+0x68>
    1e70:	4630      	mov	r0, r6
    1e72:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    1e74:	192b      	adds	r3, r5, r4
    1e76:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
			for (uint8_t i = 0; i<packet_size; i++){
    1e7a:	3401      	adds	r4, #1
    1e7c:	b2e4      	uxtb	r4, r4
    1e7e:	42a7      	cmp	r7, r4
    1e80:	d8f6      	bhi.n	1e70 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    1e82:	4630      	mov	r0, r6
    1e84:	4b06      	ldr	r3, [pc, #24]	; (1ea0 <grid_port_process_outbound_usart+0x60>)
    1e86:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    1e88:	89aa      	ldrh	r2, [r5, #12]
    1e8a:	f105 0128 	add.w	r1, r5, #40	; 0x28
    1e8e:	6868      	ldr	r0, [r5, #4]
    1e90:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <grid_port_process_outbound_usart+0x64>)
    1e92:	4798      	blx	r3
			
		}
		
	}
	
}
    1e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e98:	000013d1 	.word	0x000013d1
    1e9c:	00001443 	.word	0x00001443
    1ea0:	000014f5 	.word	0x000014f5
    1ea4:	000048ad 	.word	0x000048ad
    1ea8:	000014cd 	.word	0x000014cd

00001eac <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    1eac:	2201      	movs	r2, #1
    1eae:	4b01      	ldr	r3, [pc, #4]	; (1eb4 <grid_led_hardware_transfer_complete_cb+0x8>)
    1eb0:	701a      	strb	r2, [r3, #0]
    1eb2:	4770      	bx	lr
    1eb4:	200012a8 	.word	0x200012a8

00001eb8 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    1eb8:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    1eba:	7844      	ldrb	r4, [r0, #1]
    1ebc:	428c      	cmp	r4, r1
    1ebe:	d802      	bhi.n	1ec6 <grid_led_set_color+0xe>
		return -1;		
    1ec0:	20ff      	movs	r0, #255	; 0xff
}
    1ec2:	bc30      	pop	{r4, r5}
    1ec4:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    1ec6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1eca:	0089      	lsls	r1, r1, #2
    1ecc:	4c09      	ldr	r4, [pc, #36]	; (1ef4 <grid_led_set_color+0x3c>)
    1ece:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    1ed2:	68c3      	ldr	r3, [r0, #12]
    1ed4:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    1ed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1eda:	68c3      	ldr	r3, [r0, #12]
    1edc:	440b      	add	r3, r1
    1ede:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    1ee0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1ee4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    1ee8:	68c3      	ldr	r3, [r0, #12]
    1eea:	4419      	add	r1, r3
    1eec:	608a      	str	r2, [r1, #8]
		return 0;
    1eee:	2000      	movs	r0, #0
    1ef0:	e7e7      	b.n	1ec2 <grid_led_set_color+0xa>
    1ef2:	bf00      	nop
    1ef4:	20001dbc 	.word	0x20001dbc

00001ef8 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    1ef8:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    1efa:	4c06      	ldr	r4, [pc, #24]	; (1f14 <grid_led_hardware_init+0x1c>)
    1efc:	f100 0114 	add.w	r1, r0, #20
    1f00:	4620      	mov	r0, r4
    1f02:	4b05      	ldr	r3, [pc, #20]	; (1f18 <grid_led_hardware_init+0x20>)
    1f04:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    1f06:	4a05      	ldr	r2, [pc, #20]	; (1f1c <grid_led_hardware_init+0x24>)
    1f08:	2100      	movs	r1, #0
    1f0a:	4620      	mov	r0, r4
    1f0c:	4b04      	ldr	r3, [pc, #16]	; (1f20 <grid_led_hardware_init+0x28>)
    1f0e:	4798      	blx	r3
    1f10:	bd10      	pop	{r4, pc}
    1f12:	bf00      	nop
    1f14:	20001128 	.word	0x20001128
    1f18:	00004e05 	.word	0x00004e05
    1f1c:	00001ead 	.word	0x00001ead
    1f20:	00004dd5 	.word	0x00004dd5

00001f24 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    1f24:	7840      	ldrb	r0, [r0, #1]
    1f26:	4770      	bx	lr

00001f28 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    1f28:	7843      	ldrb	r3, [r0, #1]
    1f2a:	b1f3      	cbz	r3, 1f6a <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    1f2c:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    1f2e:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    1f30:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1f34:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1f38:	6902      	ldr	r2, [r0, #16]
    1f3a:	440a      	add	r2, r1
    1f3c:	7ad1      	ldrb	r1, [r2, #11]
    1f3e:	7b14      	ldrb	r4, [r2, #12]
    1f40:	4421      	add	r1, r4
    1f42:	72d1      	strb	r1, [r2, #11]
    1f44:	7842      	ldrb	r2, [r0, #1]
    1f46:	441a      	add	r2, r3
    1f48:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1f4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1f50:	6901      	ldr	r1, [r0, #16]
    1f52:	440a      	add	r2, r1
    1f54:	7ad1      	ldrb	r1, [r2, #11]
    1f56:	7b14      	ldrb	r4, [r2, #12]
    1f58:	4421      	add	r1, r4
    1f5a:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    1f5c:	3301      	adds	r3, #1
    1f5e:	b2db      	uxtb	r3, r3
    1f60:	7842      	ldrb	r2, [r0, #1]
    1f62:	429a      	cmp	r2, r3
    1f64:	d8e4      	bhi.n	1f30 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    1f66:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f6a:	4770      	bx	lr

00001f6c <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1f6c:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    1f6e:	7844      	ldrb	r4, [r0, #1]
    1f70:	fb02 1404 	mla	r4, r2, r4, r1
    1f74:	6905      	ldr	r5, [r0, #16]
    1f76:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1f7a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1f7e:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    1f80:	7843      	ldrb	r3, [r0, #1]
    1f82:	fb02 1303 	mla	r3, r2, r3, r1
    1f86:	6904      	ldr	r4, [r0, #16]
    1f88:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1f8c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1f90:	4423      	add	r3, r4
    1f92:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1f96:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    1f98:	7843      	ldrb	r3, [r0, #1]
    1f9a:	fb02 1203 	mla	r2, r2, r3, r1
    1f9e:	6903      	ldr	r3, [r0, #16]
    1fa0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1fa4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1fa8:	441a      	add	r2, r3
    1faa:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1fae:	7093      	strb	r3, [r2, #2]
}
    1fb0:	bc70      	pop	{r4, r5, r6}
    1fb2:	4770      	bx	lr

00001fb4 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1fb4:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    1fb6:	7844      	ldrb	r4, [r0, #1]
    1fb8:	fb02 1404 	mla	r4, r2, r4, r1
    1fbc:	6905      	ldr	r5, [r0, #16]
    1fbe:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1fc2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1fc6:	442c      	add	r4, r5
    1fc8:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    1fca:	7843      	ldrb	r3, [r0, #1]
    1fcc:	fb02 1303 	mla	r3, r2, r3, r1
    1fd0:	6904      	ldr	r4, [r0, #16]
    1fd2:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1fd6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1fda:	4423      	add	r3, r4
    1fdc:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1fe0:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    1fe2:	7843      	ldrb	r3, [r0, #1]
    1fe4:	fb02 1203 	mla	r2, r2, r3, r1
    1fe8:	6903      	ldr	r3, [r0, #16]
    1fea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1fee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1ff2:	441a      	add	r2, r3
    1ff4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1ff8:	7153      	strb	r3, [r2, #5]
}
    1ffa:	bc70      	pop	{r4, r5, r6}
    1ffc:	4770      	bx	lr

00001ffe <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    1ffe:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    2000:	7844      	ldrb	r4, [r0, #1]
    2002:	fb02 1404 	mla	r4, r2, r4, r1
    2006:	6905      	ldr	r5, [r0, #16]
    2008:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    200c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    2010:	442c      	add	r4, r5
    2012:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    2014:	7843      	ldrb	r3, [r0, #1]
    2016:	fb02 1303 	mla	r3, r2, r3, r1
    201a:	6904      	ldr	r4, [r0, #16]
    201c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2020:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2024:	4423      	add	r3, r4
    2026:	f89d 400c 	ldrb.w	r4, [sp, #12]
    202a:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    202c:	7843      	ldrb	r3, [r0, #1]
    202e:	fb02 1203 	mla	r2, r2, r3, r1
    2032:	6903      	ldr	r3, [r0, #16]
    2034:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    2038:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    203c:	441a      	add	r2, r3
    203e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2042:	7213      	strb	r3, [r2, #8]
}
    2044:	bc70      	pop	{r4, r5, r6}
    2046:	4770      	bx	lr

00002048 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    2048:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    204a:	7844      	ldrb	r4, [r0, #1]
    204c:	fb02 1204 	mla	r2, r2, r4, r1
    2050:	6901      	ldr	r1, [r0, #16]
    2052:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2056:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    205a:	440a      	add	r2, r1
    205c:	72d3      	strb	r3, [r2, #11]
}
    205e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2062:	4770      	bx	lr

00002064 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    2064:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    2066:	7844      	ldrb	r4, [r0, #1]
    2068:	fb02 1204 	mla	r2, r2, r4, r1
    206c:	6901      	ldr	r1, [r0, #16]
    206e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    2072:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2076:	440a      	add	r2, r1
    2078:	7313      	strb	r3, [r2, #12]
}
    207a:	f85d 4b04 	ldr.w	r4, [sp], #4
    207e:	4770      	bx	lr

00002080 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    2080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2084:	b083      	sub	sp, #12
    2086:	4604      	mov	r4, r0
	mod->led_number = length;
    2088:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    208a:	b2cd      	uxtb	r5, r1
    208c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2090:	0080      	lsls	r0, r0, #2
    2092:	3090      	adds	r0, #144	; 0x90
    2094:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    2096:	4f3e      	ldr	r7, [pc, #248]	; (2190 <grid_led_buffer_init+0x110>)
    2098:	47b8      	blx	r7
    209a:	4606      	mov	r6, r0
    209c:	60a0      	str	r0, [r4, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    209e:	f100 0390 	add.w	r3, r0, #144	; 0x90
    20a2:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    20a4:	201a      	movs	r0, #26
    20a6:	fb00 f005 	mul.w	r0, r0, r5
    20aa:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    20ac:	2e00      	cmp	r6, #0
    20ae:	d06e      	beq.n	218e <grid_led_buffer_init+0x10e>
    20b0:	2800      	cmp	r0, #0
    20b2:	d06c      	beq.n	218e <grid_led_buffer_init+0x10e>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    20b4:	6120      	str	r0, [r4, #16]
    20b6:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    20b8:	4619      	mov	r1, r3
    20ba:	68a2      	ldr	r2, [r4, #8]
    20bc:	54d1      	strb	r1, [r2, r3]
    20be:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    20c0:	2b90      	cmp	r3, #144	; 0x90
    20c2:	d1fa      	bne.n	20ba <grid_led_buffer_init+0x3a>
	for (uint32_t i = 0; i<mod->led_number; i++){
    20c4:	7863      	ldrb	r3, [r4, #1]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d05e      	beq.n	2188 <grid_led_buffer_init+0x108>
    20ca:	2500      	movs	r5, #0
		grid_led_set_color(mod,i,0,0,0);
    20cc:	462e      	mov	r6, r5
    20ce:	4f31      	ldr	r7, [pc, #196]	; (2194 <grid_led_buffer_init+0x114>)
    20d0:	9600      	str	r6, [sp, #0]
    20d2:	4633      	mov	r3, r6
    20d4:	4632      	mov	r2, r6
    20d6:	4629      	mov	r1, r5
    20d8:	4620      	mov	r0, r4
    20da:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    20dc:	3501      	adds	r5, #1
    20de:	7863      	ldrb	r3, [r4, #1]
    20e0:	42ab      	cmp	r3, r5
    20e2:	d8f5      	bhi.n	20d0 <grid_led_buffer_init+0x50>
	for(uint8_t i = 0; i<mod->led_number; i++){
    20e4:	2b00      	cmp	r3, #0
    20e6:	d04f      	beq.n	2188 <grid_led_buffer_init+0x108>
    20e8:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    20ea:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 219c <grid_led_buffer_init+0x11c>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    20ee:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 21a0 <grid_led_buffer_init+0x120>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    20f2:	2500      	movs	r5, #0
    20f4:	9501      	str	r5, [sp, #4]
    20f6:	9500      	str	r5, [sp, #0]
    20f8:	462b      	mov	r3, r5
    20fa:	462a      	mov	r2, r5
    20fc:	4631      	mov	r1, r6
    20fe:	4620      	mov	r0, r4
    2100:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    2102:	9501      	str	r5, [sp, #4]
    2104:	237f      	movs	r3, #127	; 0x7f
    2106:	9300      	str	r3, [sp, #0]
    2108:	462b      	mov	r3, r5
    210a:	462a      	mov	r2, r5
    210c:	4631      	mov	r1, r6
    210e:	4620      	mov	r0, r4
    2110:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    2112:	9501      	str	r5, [sp, #4]
    2114:	23ff      	movs	r3, #255	; 0xff
    2116:	9300      	str	r3, [sp, #0]
    2118:	462b      	mov	r3, r5
    211a:	462a      	mov	r2, r5
    211c:	4631      	mov	r1, r6
    211e:	4620      	mov	r0, r4
    2120:	f8df 9080 	ldr.w	r9, [pc, #128]	; 21a4 <grid_led_buffer_init+0x124>
    2124:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    2126:	462b      	mov	r3, r5
    2128:	462a      	mov	r2, r5
    212a:	4631      	mov	r1, r6
    212c:	4620      	mov	r0, r4
    212e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 21a8 <grid_led_buffer_init+0x128>
    2132:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    2134:	462b      	mov	r3, r5
    2136:	462a      	mov	r2, r5
    2138:	4631      	mov	r1, r6
    213a:	4620      	mov	r0, r4
    213c:	4f16      	ldr	r7, [pc, #88]	; (2198 <grid_led_buffer_init+0x118>)
    213e:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    2140:	9501      	str	r5, [sp, #4]
    2142:	9500      	str	r5, [sp, #0]
    2144:	462b      	mov	r3, r5
    2146:	2201      	movs	r2, #1
    2148:	4631      	mov	r1, r6
    214a:	4620      	mov	r0, r4
    214c:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    214e:	9501      	str	r5, [sp, #4]
    2150:	9500      	str	r5, [sp, #0]
    2152:	462b      	mov	r3, r5
    2154:	2201      	movs	r2, #1
    2156:	4631      	mov	r1, r6
    2158:	4620      	mov	r0, r4
    215a:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    215c:	9501      	str	r5, [sp, #4]
    215e:	9500      	str	r5, [sp, #0]
    2160:	462b      	mov	r3, r5
    2162:	2201      	movs	r2, #1
    2164:	4631      	mov	r1, r6
    2166:	4620      	mov	r0, r4
    2168:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    216a:	462b      	mov	r3, r5
    216c:	2201      	movs	r2, #1
    216e:	4631      	mov	r1, r6
    2170:	4620      	mov	r0, r4
    2172:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    2174:	462b      	mov	r3, r5
    2176:	2201      	movs	r2, #1
    2178:	4631      	mov	r1, r6
    217a:	4620      	mov	r0, r4
    217c:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    217e:	3601      	adds	r6, #1
    2180:	b2f6      	uxtb	r6, r6
    2182:	7863      	ldrb	r3, [r4, #1]
    2184:	42b3      	cmp	r3, r6
    2186:	d8b4      	bhi.n	20f2 <grid_led_buffer_init+0x72>
}
    2188:	b003      	add	sp, #12
    218a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    218e:	e7fe      	b.n	218e <grid_led_buffer_init+0x10e>
    2190:	0000bd91 	.word	0x0000bd91
    2194:	00001eb9 	.word	0x00001eb9
    2198:	00002049 	.word	0x00002049
    219c:	00001f6d 	.word	0x00001f6d
    21a0:	00001fb5 	.word	0x00001fb5
    21a4:	00001fff 	.word	0x00001fff
    21a8:	00002065 	.word	0x00002065

000021ac <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    21ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b0:	b083      	sub	sp, #12
    21b2:	f890 c001 	ldrb.w	ip, [r0, #1]
    21b6:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    21ba:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    21be:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    21c2:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    21c6:	6904      	ldr	r4, [r0, #16]
    21c8:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    21ca:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    21cc:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    21d0:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    21d2:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    21d4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 225c <grid_led_render+0xb0>
    21d8:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    21da:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    21de:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    21e0:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    21e4:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    21e8:	f894 a000 	ldrb.w	sl, [r4]
    21ec:	f894 b003 	ldrb.w	fp, [r4, #3]
    21f0:	fb05 fb0b 	mul.w	fp, r5, fp
    21f4:	fb09 bb0a 	mla	fp, r9, sl, fp
    21f8:	f894 a006 	ldrb.w	sl, [r4, #6]
    21fc:	fb06 ba0a 	mla	sl, r6, sl, fp
    2200:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    2202:	f894 a001 	ldrb.w	sl, [r4, #1]
    2206:	f894 b004 	ldrb.w	fp, [r4, #4]
    220a:	fb05 fb0b 	mul.w	fp, r5, fp
    220e:	fb09 bb0a 	mla	fp, r9, sl, fp
    2212:	f894 a007 	ldrb.w	sl, [r4, #7]
    2216:	fb06 ba0a 	mla	sl, r6, sl, fp
    221a:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    221c:	f894 a002 	ldrb.w	sl, [r4, #2]
    2220:	f894 b005 	ldrb.w	fp, [r4, #5]
    2224:	fb05 f50b 	mul.w	r5, r5, fp
    2228:	fb09 590a 	mla	r9, r9, sl, r5
    222c:	7a25      	ldrb	r5, [r4, #8]
    222e:	fb06 9505 	mla	r5, r6, r5, r9
    2232:	44ae      	add	lr, r5
    2234:	3f01      	subs	r7, #1
    2236:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    2238:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    223c:	d1cc      	bne.n	21d8 <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    223e:	f3ce 2447 	ubfx	r4, lr, #9, #8
    2242:	9400      	str	r4, [sp, #0]
    2244:	f3c3 2347 	ubfx	r3, r3, #9, #8
    2248:	f3c2 2247 	ubfx	r2, r2, #9, #8
    224c:	4c02      	ldr	r4, [pc, #8]	; (2258 <grid_led_render+0xac>)
    224e:	47a0      	blx	r4
	
}
    2250:	b003      	add	sp, #12
    2252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2256:	bf00      	nop
    2258:	00001eb9 	.word	0x00001eb9
    225c:	20000000 	.word	0x20000000

00002260 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    2260:	7843      	ldrb	r3, [r0, #1]
    2262:	b15b      	cbz	r3, 227c <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    2264:	b570      	push	{r4, r5, r6, lr}
    2266:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    2268:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    226a:	4e05      	ldr	r6, [pc, #20]	; (2280 <grid_led_render_all+0x20>)
    226c:	4621      	mov	r1, r4
    226e:	4628      	mov	r0, r5
    2270:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    2272:	3401      	adds	r4, #1
    2274:	786b      	ldrb	r3, [r5, #1]
    2276:	42a3      	cmp	r3, r4
    2278:	d8f8      	bhi.n	226c <grid_led_render_all+0xc>
    227a:	bd70      	pop	{r4, r5, r6, pc}
    227c:	4770      	bx	lr
    227e:	bf00      	nop
    2280:	000021ad 	.word	0x000021ad

00002284 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    2284:	b510      	push	{r4, lr}
    2286:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2288:	2200      	movs	r2, #0
    228a:	4b08      	ldr	r3, [pc, #32]	; (22ac <grid_led_hardware_start_transfer_blocking+0x28>)
    228c:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    228e:	4808      	ldr	r0, [pc, #32]	; (22b0 <grid_led_hardware_start_transfer_blocking+0x2c>)
    2290:	4b08      	ldr	r3, [pc, #32]	; (22b4 <grid_led_hardware_start_transfer_blocking+0x30>)
    2292:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    2294:	88a2      	ldrh	r2, [r4, #4]
    2296:	68a1      	ldr	r1, [r4, #8]
    2298:	6960      	ldr	r0, [r4, #20]
    229a:	4b07      	ldr	r3, [pc, #28]	; (22b8 <grid_led_hardware_start_transfer_blocking+0x34>)
    229c:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    229e:	4a03      	ldr	r2, [pc, #12]	; (22ac <grid_led_hardware_start_transfer_blocking+0x28>)
    22a0:	7813      	ldrb	r3, [r2, #0]
    22a2:	b2db      	uxtb	r3, r3
    22a4:	2b01      	cmp	r3, #1
    22a6:	d1fb      	bne.n	22a0 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    22a8:	bd10      	pop	{r4, pc}
    22aa:	bf00      	nop
    22ac:	200012a8 	.word	0x200012a8
    22b0:	20001128 	.word	0x20001128
    22b4:	00004dad 	.word	0x00004dad
    22b8:	000048ad 	.word	0x000048ad

000022bc <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    22bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22c0:	b085      	sub	sp, #20
    22c2:	4606      	mov	r6, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    22c4:	4b20      	ldr	r3, [pc, #128]	; (2348 <grid_led_startup_animation+0x8c>)
    22c6:	781b      	ldrb	r3, [r3, #0]
    22c8:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    22ca:	2b20      	cmp	r3, #32
    22cc:	d00a      	beq.n	22e4 <grid_led_startup_animation+0x28>
	uint8_t s		  = 1;
    22ce:	f04f 0b01 	mov.w	fp, #1
	uint8_t color_g   = 1;
    22d2:	f8cd b00c 	str.w	fp, [sp, #12]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    22d6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for (uint8_t i = 0; i<255; i++){
    22da:	f04f 0900 	mov.w	r9, #0
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    22de:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2354 <grid_led_startup_animation+0x98>
    22e2:	e01e      	b.n	2322 <grid_led_startup_animation+0x66>
		s= 2;
    22e4:	f04f 0b02 	mov.w	fp, #2
		color_g = 0;
    22e8:	2300      	movs	r3, #0
    22ea:	9303      	str	r3, [sp, #12]
    22ec:	e7f3      	b.n	22d6 <grid_led_startup_animation+0x1a>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    22ee:	9500      	str	r5, [sp, #0]
    22f0:	462b      	mov	r3, r5
    22f2:	463a      	mov	r2, r7
    22f4:	4621      	mov	r1, r4
    22f6:	4630      	mov	r0, r6
    22f8:	47c0      	blx	r8
		for (uint8_t j=0; j<mod->led_number; j++){
    22fa:	3401      	adds	r4, #1
    22fc:	b2e4      	uxtb	r4, r4
    22fe:	7873      	ldrb	r3, [r6, #1]
    2300:	42a3      	cmp	r3, r4
    2302:	d8f4      	bhi.n	22ee <grid_led_startup_animation+0x32>
		grid_led_hardware_start_transfer_blocking(mod);
    2304:	4630      	mov	r0, r6
    2306:	4b11      	ldr	r3, [pc, #68]	; (234c <grid_led_startup_animation+0x90>)
    2308:	4798      	blx	r3
		delay_ms(1);
    230a:	2001      	movs	r0, #1
    230c:	4b10      	ldr	r3, [pc, #64]	; (2350 <grid_led_startup_animation+0x94>)
    230e:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    2310:	f109 0901 	add.w	r9, r9, #1
    2314:	fa5f f989 	uxtb.w	r9, r9
    2318:	f10a 3aff 	add.w	sl, sl, #4294967295
    231c:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    2320:	d00f      	beq.n	2342 <grid_led_startup_animation+0x86>
		for (uint8_t j=0; j<mod->led_number; j++){
    2322:	7873      	ldrb	r3, [r6, #1]
    2324:	2b00      	cmp	r3, #0
    2326:	d0ed      	beq.n	2304 <grid_led_startup_animation+0x48>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256);
    2328:	fb0b f709 	mul.w	r7, fp, r9
    232c:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    2330:	9b03      	ldr	r3, [sp, #12]
    2332:	fb09 f503 	mul.w	r5, r9, r3
    2336:	fb0b f505 	mul.w	r5, fp, r5
    233a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    233e:	2400      	movs	r4, #0
    2340:	e7d5      	b.n	22ee <grid_led_startup_animation+0x32>
}
    2342:	b005      	add	sp, #20
    2344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2348:	40000c00 	.word	0x40000c00
    234c:	00002285 	.word	0x00002285
    2350:	00004721 	.word	0x00004721
    2354:	00001eb9 	.word	0x00001eb9

00002358 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    2358:	b570      	push	{r4, r5, r6, lr}
    235a:	4604      	mov	r4, r0
    235c:	4e2b      	ldr	r6, [pc, #172]	; (240c <grid_led_init+0xb4>)
    235e:	2200      	movs	r2, #0
    2360:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    2362:	f003 0001 	and.w	r0, r3, #1
    2366:	2800      	cmp	r0, #0
    2368:	bf14      	ite	ne
    236a:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    236e:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    2372:	f3c3 0540 	ubfx	r5, r3, #1, #1
    2376:	2d00      	cmp	r5, #0
    2378:	bf14      	ite	ne
    237a:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    237e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2382:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    2384:	f3c3 0080 	ubfx	r0, r3, #2, #1
    2388:	2800      	cmp	r0, #0
    238a:	bf14      	ite	ne
    238c:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    2390:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    2394:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    2396:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    239a:	2d00      	cmp	r5, #0
    239c:	bf14      	ite	ne
    239e:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    23a2:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    23a6:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    23a8:	f3c3 1500 	ubfx	r5, r3, #4, #1
    23ac:	2d00      	cmp	r5, #0
    23ae:	bf14      	ite	ne
    23b0:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    23b4:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    23b8:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    23ba:	f3c3 1040 	ubfx	r0, r3, #5, #1
    23be:	2800      	cmp	r0, #0
    23c0:	bf14      	ite	ne
    23c2:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    23c6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    23ca:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    23cc:	f3c3 1080 	ubfx	r0, r3, #6, #1
    23d0:	2800      	cmp	r0, #0
    23d2:	bf14      	ite	ne
    23d4:	200e      	movne	r0, #14
    23d6:	2008      	moveq	r0, #8
    23d8:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    23da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    23de:	2b00      	cmp	r3, #0
    23e0:	bf14      	ite	ne
    23e2:	23e0      	movne	r3, #224	; 0xe0
    23e4:	2380      	moveq	r3, #128	; 0x80
    23e6:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    23e8:	f846 3f04 	str.w	r3, [r6, #4]!
    23ec:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    23ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    23f2:	d1b5      	bne.n	2360 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    23f4:	4620      	mov	r0, r4
    23f6:	4b06      	ldr	r3, [pc, #24]	; (2410 <grid_led_init+0xb8>)
    23f8:	4798      	blx	r3
	grid_led_hardware_init(mod);
    23fa:	4620      	mov	r0, r4
    23fc:	4b05      	ldr	r3, [pc, #20]	; (2414 <grid_led_init+0xbc>)
    23fe:	4798      	blx	r3
	grid_led_startup_animation(mod);
    2400:	4620      	mov	r0, r4
    2402:	4b05      	ldr	r3, [pc, #20]	; (2418 <grid_led_init+0xc0>)
    2404:	4798      	blx	r3
}
    2406:	2000      	movs	r0, #0
    2408:	bd70      	pop	{r4, r5, r6, pc}
    240a:	bf00      	nop
    240c:	20001db8 	.word	0x20001db8
    2410:	00002081 	.word	0x00002081
    2414:	00001ef9 	.word	0x00001ef9
    2418:	000022bd 	.word	0x000022bd

0000241c <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    241c:	b510      	push	{r4, lr}
    241e:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    2420:	2200      	movs	r2, #0
    2422:	4b05      	ldr	r3, [pc, #20]	; (2438 <grid_led_hardware_start_transfer+0x1c>)
    2424:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    2426:	4805      	ldr	r0, [pc, #20]	; (243c <grid_led_hardware_start_transfer+0x20>)
    2428:	4b05      	ldr	r3, [pc, #20]	; (2440 <grid_led_hardware_start_transfer+0x24>)
    242a:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    242c:	88a2      	ldrh	r2, [r4, #4]
    242e:	68a1      	ldr	r1, [r4, #8]
    2430:	6960      	ldr	r0, [r4, #20]
    2432:	4b04      	ldr	r3, [pc, #16]	; (2444 <grid_led_hardware_start_transfer+0x28>)
    2434:	4798      	blx	r3
    2436:	bd10      	pop	{r4, pc}
    2438:	200012a8 	.word	0x200012a8
    243c:	20001128 	.word	0x20001128
    2440:	00004dad 	.word	0x00004dad
    2444:	000048ad 	.word	0x000048ad

00002448 <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    2448:	4b01      	ldr	r3, [pc, #4]	; (2450 <grid_led_hardware_is_transfer_completed+0x8>)
    244a:	7818      	ldrb	r0, [r3, #0]
	
    244c:	4770      	bx	lr
    244e:	bf00      	nop
    2450:	200012a8 	.word	0x200012a8

00002454 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    2454:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    245a:	4b13      	ldr	r3, [pc, #76]	; (24a8 <grid_module_common_init+0x54>)
    245c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    2460:	4b12      	ldr	r3, [pc, #72]	; (24ac <grid_module_common_init+0x58>)
    2462:	4798      	blx	r3
    2464:	b178      	cbz	r0, 2486 <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    2466:	4b11      	ldr	r3, [pc, #68]	; (24ac <grid_module_common_init+0x58>)
    2468:	4798      	blx	r3
    246a:	2880      	cmp	r0, #128	; 0x80
    246c:	d00f      	beq.n	248e <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    246e:	4b0f      	ldr	r3, [pc, #60]	; (24ac <grid_module_common_init+0x58>)
    2470:	4798      	blx	r3
    2472:	2840      	cmp	r0, #64	; 0x40
    2474:	d00f      	beq.n	2496 <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    2476:	4b0d      	ldr	r3, [pc, #52]	; (24ac <grid_module_common_init+0x58>)
    2478:	4798      	blx	r3
    247a:	28c0      	cmp	r0, #192	; 0xc0
    247c:	d00f      	beq.n	249e <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    247e:	480c      	ldr	r0, [pc, #48]	; (24b0 <grid_module_common_init+0x5c>)
    2480:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <grid_module_common_init+0x60>)
    2482:	4798      	blx	r3
    2484:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    2486:	480c      	ldr	r0, [pc, #48]	; (24b8 <grid_module_common_init+0x64>)
    2488:	4b0c      	ldr	r3, [pc, #48]	; (24bc <grid_module_common_init+0x68>)
    248a:	4798      	blx	r3
    248c:	e7eb      	b.n	2466 <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    248e:	480a      	ldr	r0, [pc, #40]	; (24b8 <grid_module_common_init+0x64>)
    2490:	4b0b      	ldr	r3, [pc, #44]	; (24c0 <grid_module_common_init+0x6c>)
    2492:	4798      	blx	r3
    2494:	e7eb      	b.n	246e <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    2496:	4808      	ldr	r0, [pc, #32]	; (24b8 <grid_module_common_init+0x64>)
    2498:	4b0a      	ldr	r3, [pc, #40]	; (24c4 <grid_module_common_init+0x70>)
    249a:	4798      	blx	r3
    249c:	e7eb      	b.n	2476 <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    249e:	4806      	ldr	r0, [pc, #24]	; (24b8 <grid_module_common_init+0x64>)
    24a0:	4b09      	ldr	r3, [pc, #36]	; (24c8 <grid_module_common_init+0x74>)
    24a2:	4798      	blx	r3
    24a4:	e7eb      	b.n	247e <grid_module_common_init+0x2a>
    24a6:	bf00      	nop
    24a8:	41008000 	.word	0x41008000
    24ac:	0000396d 	.word	0x0000396d
    24b0:	20001d1c 	.word	0x20001d1c
    24b4:	000037fd 	.word	0x000037fd
    24b8:	20001d0c 	.word	0x20001d0c
    24bc:	00003475 	.word	0x00003475
    24c0:	00002719 	.word	0x00002719
    24c4:	0000311d 	.word	0x0000311d
    24c8:	00002c49 	.word	0x00002c49

000024cc <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    24cc:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    24ce:	4803      	ldr	r0, [pc, #12]	; (24dc <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    24d0:	4c03      	ldr	r4, [pc, #12]	; (24e0 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    24d2:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    24d4:	4803      	ldr	r0, [pc, #12]	; (24e4 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    24d6:	47a0      	blx	r4
    24d8:	bd10      	pop	{r4, pc}
    24da:	bf00      	nop
    24dc:	20001058 	.word	0x20001058
    24e0:	00004679 	.word	0x00004679
    24e4:	2000122c 	.word	0x2000122c

000024e8 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    24e8:	4b70      	ldr	r3, [pc, #448]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	2b00      	cmp	r3, #0
    24ee:	f000 80d6 	beq.w	269e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1b6>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    24f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24f6:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    24f8:	2300      	movs	r3, #0
    24fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    24fe:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    2502:	4b6a      	ldr	r3, [pc, #424]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2504:	785a      	ldrb	r2, [r3, #1]
    2506:	3208      	adds	r2, #8
    2508:	4969      	ldr	r1, [pc, #420]	; (26b0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c8>)
    250a:	5c8d      	ldrb	r5, [r1, r2]
    250c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    250e:	785a      	ldrb	r2, [r3, #1]
    2510:	b2d2      	uxtb	r2, r2
    2512:	5c8c      	ldrb	r4, [r1, r2]
    2514:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    2516:	785a      	ldrb	r2, [r3, #1]
    2518:	3201      	adds	r2, #1
    251a:	b2d2      	uxtb	r2, r2
    251c:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    251e:	785a      	ldrb	r2, [r3, #1]
    2520:	f002 0207 	and.w	r2, r2, #7
    2524:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    2526:	785b      	ldrb	r3, [r3, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2528:	f013 0f01 	tst.w	r3, #1
    252c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2530:	4b60      	ldr	r3, [pc, #384]	; (26b4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    2532:	bf14      	ite	ne
    2534:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2538:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    253c:	4b5b      	ldr	r3, [pc, #364]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    253e:	785b      	ldrb	r3, [r3, #1]
    2540:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2544:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2548:	4b5a      	ldr	r3, [pc, #360]	; (26b4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    254a:	bf14      	ite	ne
    254c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2550:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    2554:	4b55      	ldr	r3, [pc, #340]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2556:	785b      	ldrb	r3, [r3, #1]
    2558:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    255c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2560:	4b54      	ldr	r3, [pc, #336]	; (26b4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1cc>)
    2562:	bf14      	ite	ne
    2564:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2568:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    256c:	2302      	movs	r3, #2
    256e:	f10d 0206 	add.w	r2, sp, #6
    2572:	2100      	movs	r1, #0
    2574:	4850      	ldr	r0, [pc, #320]	; (26b8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d0>)
    2576:	4e51      	ldr	r6, [pc, #324]	; (26bc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d4>)
    2578:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    257a:	2302      	movs	r3, #2
    257c:	aa01      	add	r2, sp, #4
    257e:	2100      	movs	r1, #0
    2580:	484f      	ldr	r0, [pc, #316]	; (26c0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>)
    2582:	47b0      	blx	r6
	

	
	if (adcresult_0>10000){
    2584:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2588:	f242 7310 	movw	r3, #10000	; 0x2710
    258c:	429a      	cmp	r2, r3
		adcresult_0 = 0;
    258e:	bf8c      	ite	hi
    2590:	2300      	movhi	r3, #0
	}
	else{
		adcresult_0 = 127;
    2592:	237f      	movls	r3, #127	; 0x7f
    2594:	f8ad 3006 	strh.w	r3, [sp, #6]
	}
	
	if (adcresult_1>10000){
    2598:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    259c:	f242 7310 	movw	r3, #10000	; 0x2710
    25a0:	429a      	cmp	r2, r3
		adcresult_1 = 0;
    25a2:	bf8c      	ite	hi
    25a4:	2300      	movhi	r3, #0
	}
	else{
		adcresult_1 = 127;
    25a6:	237f      	movls	r3, #127	; 0x7f
    25a8:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0]){
    25ac:	012e      	lsls	r6, r5, #4
    25ae:	4b45      	ldr	r3, [pc, #276]	; (26c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    25b0:	689b      	ldr	r3, [r3, #8]
    25b2:	4433      	add	r3, r6
    25b4:	68da      	ldr	r2, [r3, #12]
    25b6:	7812      	ldrb	r2, [r2, #0]
    25b8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    25bc:	4291      	cmp	r1, r2
    25be:	d02e      	beq.n	261e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x136>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    25c0:	2a00      	cmp	r2, #0
    25c2:	bf0c      	ite	eq
    25c4:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    25c8:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    25cc:	6858      	ldr	r0, [r3, #4]
    25ce:	bf0c      	ite	eq
    25d0:	2290      	moveq	r2, #144	; 0x90
    25d2:	2280      	movne	r2, #128	; 0x80
    25d4:	2102      	movs	r1, #2
    25d6:	3005      	adds	r0, #5
    25d8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 26cc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>
    25dc:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    25de:	4f39      	ldr	r7, [pc, #228]	; (26c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    25e0:	68bb      	ldr	r3, [r7, #8]
    25e2:	4433      	add	r3, r6
    25e4:	6858      	ldr	r0, [r3, #4]
    25e6:	462a      	mov	r2, r5
    25e8:	2102      	movs	r1, #2
    25ea:	3007      	adds	r0, #7
    25ec:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    25ee:	68bb      	ldr	r3, [r7, #8]
    25f0:	4433      	add	r3, r6
    25f2:	6858      	ldr	r0, [r3, #4]
    25f4:	464a      	mov	r2, r9
    25f6:	2102      	movs	r1, #2
    25f8:	3009      	adds	r0, #9
    25fa:	47c0      	blx	r8
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    25fc:	68bb      	ldr	r3, [r7, #8]
    25fe:	4433      	add	r3, r6
    2600:	6858      	ldr	r0, [r3, #4]
    2602:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2606:	2102      	movs	r1, #2
    2608:	3015      	adds	r0, #21
    260a:	47c0      	blx	r8
		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    260c:	68bb      	ldr	r3, [r7, #8]
    260e:	441e      	add	r6, r3
    2610:	68f3      	ldr	r3, [r6, #12]
    2612:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    2616:	4629      	mov	r1, r5
    2618:	4638      	mov	r0, r7
    261a:	4b2b      	ldr	r3, [pc, #172]	; (26c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    261c:	4798      	blx	r3
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0]){
    261e:	0125      	lsls	r5, r4, #4
    2620:	4b28      	ldr	r3, [pc, #160]	; (26c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2622:	689b      	ldr	r3, [r3, #8]
    2624:	442b      	add	r3, r5
    2626:	68da      	ldr	r2, [r3, #12]
    2628:	7812      	ldrb	r2, [r2, #0]
    262a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    262e:	4291      	cmp	r1, r2
    2630:	d02d      	beq.n	268e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1a6>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    2632:	2a00      	cmp	r2, #0
    2634:	bf0c      	ite	eq
    2636:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    263a:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    263e:	6858      	ldr	r0, [r3, #4]
    2640:	bf0c      	ite	eq
    2642:	2290      	moveq	r2, #144	; 0x90
    2644:	2280      	movne	r2, #128	; 0x80
    2646:	2102      	movs	r1, #2
    2648:	3005      	adds	r0, #5
    264a:	4f20      	ldr	r7, [pc, #128]	; (26cc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e4>)
    264c:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    264e:	4e1d      	ldr	r6, [pc, #116]	; (26c4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1dc>)
    2650:	68b3      	ldr	r3, [r6, #8]
    2652:	442b      	add	r3, r5
    2654:	6858      	ldr	r0, [r3, #4]
    2656:	4622      	mov	r2, r4
    2658:	2102      	movs	r1, #2
    265a:	3007      	adds	r0, #7
    265c:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    265e:	68b3      	ldr	r3, [r6, #8]
    2660:	442b      	add	r3, r5
    2662:	6858      	ldr	r0, [r3, #4]
    2664:	4642      	mov	r2, r8
    2666:	2102      	movs	r1, #2
    2668:	3009      	adds	r0, #9
    266a:	47b8      	blx	r7
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    266c:	68b3      	ldr	r3, [r6, #8]
    266e:	442b      	add	r3, r5
    2670:	6858      	ldr	r0, [r3, #4]
    2672:	ea4f 0248 	mov.w	r2, r8, lsl #1
    2676:	2102      	movs	r1, #2
    2678:	3015      	adds	r0, #21
    267a:	47b8      	blx	r7
		
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    267c:	68b3      	ldr	r3, [r6, #8]
    267e:	441d      	add	r5, r3
    2680:	68eb      	ldr	r3, [r5, #12]
    2682:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    2686:	4621      	mov	r1, r4
    2688:	4630      	mov	r0, r6
    268a:	4b0f      	ldr	r3, [pc, #60]	; (26c8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e0>)
    268c:	4798      	blx	r3
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    268e:	2200      	movs	r2, #0
    2690:	4b06      	ldr	r3, [pc, #24]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    2692:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    2694:	4b0e      	ldr	r3, [pc, #56]	; (26d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>)
    2696:	4798      	blx	r3
}
    2698:	b003      	add	sp, #12
    269a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    269e:	4a03      	ldr	r2, [pc, #12]	; (26ac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c4>)
    26a0:	7813      	ldrb	r3, [r2, #0]
    26a2:	3301      	adds	r3, #1
    26a4:	b2db      	uxtb	r3, r3
    26a6:	7013      	strb	r3, [r2, #0]
    26a8:	4770      	bx	lr
    26aa:	bf00      	nop
    26ac:	20000644 	.word	0x20000644
    26b0:	20000300 	.word	0x20000300
    26b4:	41008000 	.word	0x41008000
    26b8:	20001058 	.word	0x20001058
    26bc:	00004599 	.word	0x00004599
    26c0:	2000122c 	.word	0x2000122c
    26c4:	20001d0c 	.word	0x20001d0c
    26c8:	00003fe7 	.word	0x00003fe7
    26cc:	00003935 	.word	0x00003935
    26d0:	000024cd 	.word	0x000024cd

000026d4 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    26d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    26d6:	4f0b      	ldr	r7, [pc, #44]	; (2704 <grid_module_bu16_revb_hardware_init+0x30>)
    26d8:	4c0b      	ldr	r4, [pc, #44]	; (2708 <grid_module_bu16_revb_hardware_init+0x34>)
    26da:	463b      	mov	r3, r7
    26dc:	2200      	movs	r2, #0
    26de:	4611      	mov	r1, r2
    26e0:	4620      	mov	r0, r4
    26e2:	4e0a      	ldr	r6, [pc, #40]	; (270c <grid_module_bu16_revb_hardware_init+0x38>)
    26e4:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    26e6:	4d0a      	ldr	r5, [pc, #40]	; (2710 <grid_module_bu16_revb_hardware_init+0x3c>)
    26e8:	463b      	mov	r3, r7
    26ea:	2200      	movs	r2, #0
    26ec:	4611      	mov	r1, r2
    26ee:	4628      	mov	r0, r5
    26f0:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    26f2:	2100      	movs	r1, #0
    26f4:	4620      	mov	r0, r4
    26f6:	4c07      	ldr	r4, [pc, #28]	; (2714 <grid_module_bu16_revb_hardware_init+0x40>)
    26f8:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    26fa:	2100      	movs	r1, #0
    26fc:	4628      	mov	r0, r5
    26fe:	47a0      	blx	r4
    2700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2702:	bf00      	nop
    2704:	000024e9 	.word	0x000024e9
    2708:	20001058 	.word	0x20001058
    270c:	00004519 	.word	0x00004519
    2710:	2000122c 	.word	0x2000122c
    2714:	000044d9 	.word	0x000044d9

00002718 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    2718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    271c:	b09b      	sub	sp, #108	; 0x6c
    271e:	4681      	mov	r9, r0

	grid_led_init(&grid_led_state, 16);
    2720:	2110      	movs	r1, #16
    2722:	4827      	ldr	r0, [pc, #156]	; (27c0 <grid_module_bu16_revb_init+0xa8>)
    2724:	4b27      	ldr	r3, [pc, #156]	; (27c4 <grid_module_bu16_revb_init+0xac>)
    2726:	4798      	blx	r3
	grid_ui_model_init(mod, 16);
    2728:	2110      	movs	r1, #16
    272a:	4648      	mov	r0, r9
    272c:	4b26      	ldr	r3, [pc, #152]	; (27c8 <grid_module_bu16_revb_init+0xb0>)
    272e:	4798      	blx	r3
    2730:	f10d 0837 	add.w	r8, sp, #55	; 0x37
    2734:	2500      	movs	r5, #0
		
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30] = {0};
    2736:	462c      	mov	r4, r5
    2738:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 27e8 <grid_module_bu16_revb_init+0xd0>
			
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    273c:	4f23      	ldr	r7, [pc, #140]	; (27cc <grid_module_bu16_revb_init+0xb4>)
		uint8_t payload_template[30] = {0};
    273e:	221e      	movs	r2, #30
    2740:	4621      	mov	r1, r4
    2742:	a812      	add	r0, sp, #72	; 0x48
    2744:	47d0      	blx	sl
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    2746:	ae0e      	add	r6, sp, #56	; 0x38
    2748:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    274c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    2750:	2303      	movs	r3, #3
    2752:	930b      	str	r3, [sp, #44]	; 0x2c
    2754:	940a      	str	r4, [sp, #40]	; 0x28
    2756:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    275a:	9209      	str	r2, [sp, #36]	; 0x24
    275c:	2263      	movs	r2, #99	; 0x63
    275e:	9208      	str	r2, [sp, #32]
    2760:	9407      	str	r4, [sp, #28]
    2762:	9306      	str	r3, [sp, #24]
    2764:	2602      	movs	r6, #2
    2766:	9605      	str	r6, [sp, #20]
    2768:	9304      	str	r3, [sp, #16]
    276a:	9403      	str	r4, [sp, #12]
    276c:	9502      	str	r5, [sp, #8]
    276e:	2390      	movs	r3, #144	; 0x90
    2770:	9301      	str	r3, [sp, #4]
    2772:	9400      	str	r4, [sp, #0]
    2774:	4623      	mov	r3, r4
    2776:	4632      	mov	r2, r6
    2778:	4915      	ldr	r1, [pc, #84]	; (27d0 <grid_module_bu16_revb_init+0xb8>)
    277a:	a812      	add	r0, sp, #72	; 0x48
    277c:	f8df b06c 	ldr.w	fp, [pc, #108]	; 27ec <grid_module_bu16_revb_init+0xd4>
    2780:	47d8      	blx	fp

		);
			
		
		
		uint8_t payload_length = strlen(payload_template);
    2782:	a812      	add	r0, sp, #72	; 0x48
    2784:	4b13      	ldr	r3, [pc, #76]	; (27d4 <grid_module_bu16_revb_init+0xbc>)
    2786:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2788:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    278c:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    2790:	9602      	str	r6, [sp, #8]
    2792:	ab0d      	add	r3, sp, #52	; 0x34
    2794:	9301      	str	r3, [sp, #4]
    2796:	b2c0      	uxtb	r0, r0
    2798:	9000      	str	r0, [sp, #0]
    279a:	ab12      	add	r3, sp, #72	; 0x48
    279c:	4632      	mov	r2, r6
    279e:	b2e9      	uxtb	r1, r5
    27a0:	4648      	mov	r0, r9
    27a2:	4e0d      	ldr	r6, [pc, #52]	; (27d8 <grid_module_bu16_revb_init+0xc0>)
    27a4:	47b0      	blx	r6
    27a6:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    27a8:	2d10      	cmp	r5, #16
    27aa:	d1c8      	bne.n	273e <grid_module_bu16_revb_init+0x26>
		

	}
	
	grid_report_sys_init(mod);
    27ac:	4648      	mov	r0, r9
    27ae:	4b0b      	ldr	r3, [pc, #44]	; (27dc <grid_module_bu16_revb_init+0xc4>)
    27b0:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    27b2:	4b0b      	ldr	r3, [pc, #44]	; (27e0 <grid_module_bu16_revb_init+0xc8>)
    27b4:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    27b6:	4b0b      	ldr	r3, [pc, #44]	; (27e4 <grid_module_bu16_revb_init+0xcc>)
    27b8:	4798      	blx	r3

};
    27ba:	b01b      	add	sp, #108	; 0x6c
    27bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27c0:	20003628 	.word	0x20003628
    27c4:	00002359 	.word	0x00002359
    27c8:	00003d0d 	.word	0x00003d0d
    27cc:	0000d340 	.word	0x0000d340
    27d0:	0000d350 	.word	0x0000d350
    27d4:	0000c1ed 	.word	0x0000c1ed
    27d8:	00003dd1 	.word	0x00003dd1
    27dc:	00003df5 	.word	0x00003df5
    27e0:	000026d5 	.word	0x000026d5
    27e4:	000024cd 	.word	0x000024cd
    27e8:	0000bdb7 	.word	0x0000bdb7
    27ec:	0000c1a5 	.word	0x0000c1a5

000027f0 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    27f0:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    27f6:	4b06      	ldr	r3, [pc, #24]	; (2810 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    27f8:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    27fa:	4c06      	ldr	r4, [pc, #24]	; (2814 <grid_module_en16_reva_hardware_start_transfer+0x24>)
    27fc:	4620      	mov	r0, r4
    27fe:	4b06      	ldr	r3, [pc, #24]	; (2818 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    2800:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    2802:	2308      	movs	r3, #8
    2804:	4a05      	ldr	r2, [pc, #20]	; (281c <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    2806:	4906      	ldr	r1, [pc, #24]	; (2820 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    2808:	4620      	mov	r0, r4
    280a:	4c06      	ldr	r4, [pc, #24]	; (2824 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    280c:	47a0      	blx	r4
    280e:	bd10      	pop	{r4, pc}
    2810:	41008000 	.word	0x41008000
    2814:	20000f4c 	.word	0x20000f4c
    2818:	00004b81 	.word	0x00004b81
    281c:	200017ec 	.word	0x200017ec
    2820:	20000310 	.word	0x20000310
    2824:	00004c21 	.word	0x00004c21

00002828 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    2828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    282c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    282e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2832:	4bad      	ldr	r3, [pc, #692]	; (2ae8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    2834:	615a      	str	r2, [r3, #20]
    2836:	2700      	movs	r7, #0
    2838:	e07b      	b.n	2932 <grid_module_en16_reva_hardware_transfer_complete_cb+0x10a>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    283a:	49ac      	ldr	r1, [pc, #688]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    283c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2840:	78c9      	ldrb	r1, [r1, #3]
    2842:	42d1      	cmn	r1, r2
    2844:	d405      	bmi.n	2852 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a>
						grid_ui_encoder_array[i].rotation_value += xi;
    2846:	4aa9      	ldr	r2, [pc, #676]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2848:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    284c:	440b      	add	r3, r1
    284e:	70d3      	strb	r3, [r2, #3]
    2850:	e00a      	b.n	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    2852:	4ba6      	ldr	r3, [pc, #664]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2854:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2858:	2200      	movs	r2, #0
    285a:	70da      	strb	r2, [r3, #3]
    285c:	e004      	b.n	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    285e:	4ba3      	ldr	r3, [pc, #652]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2860:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2864:	227f      	movs	r2, #127	; 0x7f
    2866:	70da      	strb	r2, [r3, #3]
				
				uint8_t command = GRID_MSG_COMMAND_MIDI_CONTROLCHANGE;
				
				
				uint8_t value = 0;
				if (0 == grid_report_ui_get_changed_flag(mod, i+16)){
    2868:	f104 0810 	add.w	r8, r4, #16
    286c:	fa5f f888 	uxtb.w	r8, r8
    2870:	4641      	mov	r1, r8
    2872:	489f      	ldr	r0, [pc, #636]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2874:	4b9f      	ldr	r3, [pc, #636]	; (2af4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
    2876:	4798      	blx	r3
    2878:	2800      	cmp	r0, #0
    287a:	f040 8107 	bne.w	2a8c <grid_module_en16_reva_hardware_transfer_complete_cb+0x264>
					value = 64; //CENTER
					mod->report_ui_array[i+16].helper[0] = 0;
    287e:	4b9c      	ldr	r3, [pc, #624]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2880:	689b      	ldr	r3, [r3, #8]
    2882:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2886:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    288a:	2200      	movs	r2, #0
    288c:	701a      	strb	r2, [r3, #0]
					value = 64; //CENTER
    288e:	2340      	movs	r3, #64	; 0x40
				}
				else{
					value = mod->report_ui_array[i+16].helper[0];
				}
				
				value +=  delta*velocityfactor;
    2890:	fb06 3505 	mla	r5, r6, r5, r3
    2894:	b2ed      	uxtb	r5, r5
				
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
				
				if (value != mod->report_ui_array[i+16].helper[0]){
    2896:	f104 0610 	add.w	r6, r4, #16
    289a:	0136      	lsls	r6, r6, #4
    289c:	4b94      	ldr	r3, [pc, #592]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    289e:	689b      	ldr	r3, [r3, #8]
    28a0:	4433      	add	r3, r6
    28a2:	68da      	ldr	r2, [r3, #12]
    28a4:	7812      	ldrb	r2, [r2, #0]
    28a6:	42aa      	cmp	r2, r5
    28a8:	d03f      	beq.n	292a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
				uint8_t actuator = 2*grid_ui_encoder_array[i].rotation_value;
    28aa:	4a90      	ldr	r2, [pc, #576]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    28ac:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    28b0:	f892 a003 	ldrb.w	sl, [r2, #3]
    28b4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    28b8:	fa5f fa8a 	uxtb.w	sl, sl
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[5], 2, command);
    28bc:	6858      	ldr	r0, [r3, #4]
    28be:	22b0      	movs	r2, #176	; 0xb0
    28c0:	2102      	movs	r1, #2
    28c2:	3005      	adds	r0, #5
    28c4:	f8df b264 	ldr.w	fp, [pc, #612]	; 2b2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    28c8:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[7], 2, i);
    28ca:	f8df 9224 	ldr.w	r9, [pc, #548]	; 2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    28ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28d2:	4433      	add	r3, r6
    28d4:	6858      	ldr	r0, [r3, #4]
    28d6:	4622      	mov	r2, r4
    28d8:	2102      	movs	r1, #2
    28da:	3007      	adds	r0, #7
    28dc:	47d8      	blx	fp
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[9], 2, value);
    28de:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28e2:	4433      	add	r3, r6
    28e4:	6858      	ldr	r0, [r3, #4]
    28e6:	462a      	mov	r2, r5
    28e8:	2102      	movs	r1, #2
    28ea:	3009      	adds	r0, #9
    28ec:	47d8      	blx	fp
					
					mod->report_ui_array[i+16].helper[0] = value;
    28ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
    28f2:	4433      	add	r3, r6
    28f4:	68db      	ldr	r3, [r3, #12]
    28f6:	701d      	strb	r5, [r3, #0]
					grid_report_ui_set_changed_flag(mod, i+16);
    28f8:	4641      	mov	r1, r8
    28fa:	4648      	mov	r0, r9
    28fc:	4d7e      	ldr	r5, [pc, #504]	; (2af8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    28fe:	47a8      	blx	r5
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, actuator); // LED
    2900:	f506 7680 	add.w	r6, r6, #256	; 0x100
    2904:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2908:	4433      	add	r3, r6
    290a:	6858      	ldr	r0, [r3, #4]
    290c:	4652      	mov	r2, sl
    290e:	2102      	movs	r1, #2
    2910:	3009      	adds	r0, #9
    2912:	47d8      	blx	fp
					mod->report_ui_array[i+16+16].helper[0] = actuator;
    2914:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2918:	441e      	add	r6, r3
    291a:	68f3      	ldr	r3, [r6, #12]
    291c:	f883 a000 	strb.w	sl, [r3]
					grid_report_ui_set_changed_flag(mod, i+16+16);
    2920:	f104 0120 	add.w	r1, r4, #32
    2924:	b2c9      	uxtb	r1, r1
    2926:	4648      	mov	r0, r9
    2928:	47a8      	blx	r5
    292a:	3701      	adds	r7, #1
	for (uint8_t j=0; j<16; j++){
    292c:	2f10      	cmp	r7, #16
    292e:	f000 811e 	beq.w	2b6e <grid_module_en16_reva_hardware_transfer_complete_cb+0x346>
    2932:	b2f9      	uxtb	r1, r7
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    2934:	084b      	lsrs	r3, r1, #1
    2936:	4a71      	ldr	r2, [pc, #452]	; (2afc <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
    2938:	5cd3      	ldrb	r3, [r2, r3]
    293a:	f001 0201 	and.w	r2, r1, #1
    293e:	0092      	lsls	r2, r2, #2
    2940:	4113      	asrs	r3, r2
    2942:	b2db      	uxtb	r3, r3
    2944:	f003 000f 	and.w	r0, r3, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    2948:	4a6d      	ldr	r2, [pc, #436]	; (2b00 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    294a:	5dd2      	ldrb	r2, [r2, r7]
    294c:	b2d2      	uxtb	r2, r2
		if (old_value != new_value){
    294e:	4290      	cmp	r0, r2
    2950:	d0eb      	beq.n	292a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    2952:	4a6c      	ldr	r2, [pc, #432]	; (2b04 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
    2954:	5cbc      	ldrb	r4, [r7, r2]
			UI_SPI_DEBUG = j;
    2956:	4a6c      	ldr	r2, [pc, #432]	; (2b08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>)
    2958:	7011      	strb	r1, [r2, #0]
			uint8_t button_value = new_value>>2;
    295a:	0882      	lsrs	r2, r0, #2
			uint8_t phase_a = (new_value>>1)&1;
    295c:	f3c0 0840 	ubfx	r8, r0, #1, #1
			uint8_t phase_b = (new_value)&1;
    2960:	f003 0501 	and.w	r5, r3, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    2964:	4b61      	ldr	r3, [pc, #388]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2966:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    296a:	785b      	ldrb	r3, [r3, #1]
    296c:	4293      	cmp	r3, r2
    296e:	d035      	beq.n	29dc <grid_module_en16_reva_hardware_transfer_complete_cb+0x1b4>
				grid_ui_encoder_array[i].button_changed = 1;
    2970:	4b5e      	ldr	r3, [pc, #376]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2972:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2976:	2101      	movs	r1, #1
    2978:	7099      	strb	r1, [r3, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    297a:	705a      	strb	r2, [r3, #1]
					velocity = 0;
    297c:	2a00      	cmp	r2, #0
    297e:	bf0c      	ite	eq
    2980:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    2984:	f04f 0a00 	movne.w	sl, #0
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[5], 2, command);
    2988:	ea4f 1604 	mov.w	r6, r4, lsl #4
    298c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>
    2990:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2994:	4433      	add	r3, r6
    2996:	6858      	ldr	r0, [r3, #4]
    2998:	bf0c      	ite	eq
    299a:	2290      	moveq	r2, #144	; 0x90
    299c:	2280      	movne	r2, #128	; 0x80
    299e:	2102      	movs	r1, #2
    29a0:	3005      	adds	r0, #5
    29a2:	f8df b188 	ldr.w	fp, [pc, #392]	; 2b2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>
    29a6:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[7], 2, i);
    29a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29ac:	4433      	add	r3, r6
    29ae:	6858      	ldr	r0, [r3, #4]
    29b0:	4622      	mov	r2, r4
    29b2:	2102      	movs	r1, #2
    29b4:	3007      	adds	r0, #7
    29b6:	47d8      	blx	fp
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[9], 2, velocity);
    29b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29bc:	4433      	add	r3, r6
    29be:	6858      	ldr	r0, [r3, #4]
    29c0:	4652      	mov	r2, sl
    29c2:	2102      	movs	r1, #2
    29c4:	3009      	adds	r0, #9
    29c6:	47d8      	blx	fp
				mod->report_ui_array[i].helper[0] = velocity;
    29c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    29cc:	441e      	add	r6, r3
    29ce:	68f3      	ldr	r3, [r6, #12]
    29d0:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, i);
    29d4:	4621      	mov	r1, r4
    29d6:	4648      	mov	r0, r9
    29d8:	4b47      	ldr	r3, [pc, #284]	; (2af8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    29da:	4798      	blx	r3
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    29dc:	4b43      	ldr	r3, [pc, #268]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    29de:	eb03 1304 	add.w	r3, r3, r4, lsl #4
			if (a_now != a_prev){
    29e2:	7b5b      	ldrb	r3, [r3, #13]
    29e4:	4543      	cmp	r3, r8
    29e6:	f000 80ca 	beq.w	2b7e <grid_module_en16_reva_hardware_transfer_complete_cb+0x356>
					delta = +1;
    29ea:	45a8      	cmp	r8, r5
    29ec:	bf14      	ite	ne
    29ee:	f04f 36ff 	movne.w	r6, #4294967295
    29f2:	2601      	moveq	r6, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    29f4:	4b3d      	ldr	r3, [pc, #244]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    29f6:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    29fa:	f882 800d 	strb.w	r8, [r2, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    29fe:	7395      	strb	r5, [r2, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i+1].last_real_time);
    2a00:	6991      	ldr	r1, [r2, #24]
    2a02:	4842      	ldr	r0, [pc, #264]	; (2b0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2a04:	4b42      	ldr	r3, [pc, #264]	; (2b10 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e8>)
    2a06:	4798      	blx	r3
    2a08:	9001      	str	r0, [sp, #4]
				if (elapsed_time>400){
    2a0a:	9b01      	ldr	r3, [sp, #4]
    2a0c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    2a10:	bf84      	itt	hi
    2a12:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    2a16:	9301      	strhi	r3, [sp, #4]
				if (elapsed_time<20){
    2a18:	9b01      	ldr	r3, [sp, #4]
    2a1a:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    2a1c:	bf9c      	itt	ls
    2a1e:	2314      	movls	r3, #20
    2a20:	9301      	strls	r3, [sp, #4]
				uint8_t velocityfactor = (160000-elapsed_time*elapsed_time)/40000.0 + 1;
    2a22:	9b01      	ldr	r3, [sp, #4]
    2a24:	9801      	ldr	r0, [sp, #4]
    2a26:	fb00 f003 	mul.w	r0, r0, r3
    2a2a:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    2a2e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2a32:	4b38      	ldr	r3, [pc, #224]	; (2b14 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ec>)
    2a34:	4798      	blx	r3
    2a36:	a32a      	add	r3, pc, #168	; (adr r3, 2ae0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
    2a38:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a3c:	4d36      	ldr	r5, [pc, #216]	; (2b18 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f0>)
    2a3e:	47a8      	blx	r5
    2a40:	2200      	movs	r2, #0
    2a42:	4b36      	ldr	r3, [pc, #216]	; (2b1c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f4>)
    2a44:	4d36      	ldr	r5, [pc, #216]	; (2b20 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>)
    2a46:	47a8      	blx	r5
    2a48:	4b36      	ldr	r3, [pc, #216]	; (2b24 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2fc>)
    2a4a:	4798      	blx	r3
    2a4c:	b2c5      	uxtb	r5, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2a4e:	482f      	ldr	r0, [pc, #188]	; (2b0c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>)
    2a50:	4b35      	ldr	r3, [pc, #212]	; (2b28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>)
    2a52:	4798      	blx	r3
    2a54:	4b25      	ldr	r3, [pc, #148]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a56:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2a5a:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    2a5c:	fb05 6306 	mla	r3, r5, r6, r6
    2a60:	b29b      	uxth	r3, r3
    2a62:	b21a      	sxth	r2, r3
				if (delta<0){
    2a64:	2e00      	cmp	r6, #0
    2a66:	f6ff aee8 	blt.w	283a <grid_module_en16_reva_hardware_transfer_complete_cb+0x12>
				else if (delta>0){
    2a6a:	2e00      	cmp	r6, #0
    2a6c:	f77f aefc 	ble.w	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    2a70:	491e      	ldr	r1, [pc, #120]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a72:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2a76:	78c9      	ldrb	r1, [r1, #3]
    2a78:	440a      	add	r2, r1
    2a7a:	2a7f      	cmp	r2, #127	; 0x7f
    2a7c:	f73f aeef 	bgt.w	285e <grid_module_en16_reva_hardware_transfer_complete_cb+0x36>
						grid_ui_encoder_array[i].rotation_value += xi;
    2a80:	4a1a      	ldr	r2, [pc, #104]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2a82:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2a86:	440b      	add	r3, r1
    2a88:	70d3      	strb	r3, [r2, #3]
    2a8a:	e6ed      	b.n	2868 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
					value = mod->report_ui_array[i+16].helper[0];
    2a8c:	4b18      	ldr	r3, [pc, #96]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2a8e:	689b      	ldr	r3, [r3, #8]
    2a90:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2a94:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    2a98:	781b      	ldrb	r3, [r3, #0]
    2a9a:	e6f9      	b.n	2890 <grid_module_en16_reva_hardware_transfer_complete_cb+0x68>
			else{ //DELTA==0

				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
					if (grid_ui_encoder_array[i].rotation_value > 64){

						grid_ui_encoder_array[i].rotation_value--;
    2a9c:	3b01      	subs	r3, #1
    2a9e:	b2db      	uxtb	r3, r3
    2aa0:	4a12      	ldr	r2, [pc, #72]	; (2aec <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    2aa2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2aa6:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2aa8:	005b      	lsls	r3, r3, #1
    2aaa:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2aac:	f104 0820 	add.w	r8, r4, #32
    2ab0:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2ab4:	4e0e      	ldr	r6, [pc, #56]	; (2af0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    2ab6:	68b3      	ldr	r3, [r6, #8]
    2ab8:	444b      	add	r3, r9
    2aba:	6858      	ldr	r0, [r3, #4]
    2abc:	462a      	mov	r2, r5
    2abe:	2102      	movs	r1, #2
    2ac0:	3009      	adds	r0, #9
    2ac2:	4b1a      	ldr	r3, [pc, #104]	; (2b2c <grid_module_en16_reva_hardware_transfer_complete_cb+0x304>)
    2ac4:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2ac6:	68b3      	ldr	r3, [r6, #8]
    2ac8:	444b      	add	r3, r9
    2aca:	68db      	ldr	r3, [r3, #12]
    2acc:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2ace:	fa5f f188 	uxtb.w	r1, r8
    2ad2:	4630      	mov	r0, r6
    2ad4:	4b08      	ldr	r3, [pc, #32]	; (2af8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
    2ad6:	4798      	blx	r3
    2ad8:	e063      	b.n	2ba2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x37a>
    2ada:	bf00      	nop
    2adc:	f3af 8000 	nop.w
    2ae0:	00000000 	.word	0x00000000
    2ae4:	40e38800 	.word	0x40e38800
    2ae8:	41008000 	.word	0x41008000
    2aec:	20003658 	.word	0x20003658
    2af0:	20001d0c 	.word	0x20001d0c
    2af4:	00003fdb 	.word	0x00003fdb
    2af8:	00003fe7 	.word	0x00003fe7
    2afc:	200017ec 	.word	0x200017ec
    2b00:	200017d4 	.word	0x200017d4
    2b04:	20000320 	.word	0x20000320
    2b08:	200017bc 	.word	0x200017bc
    2b0c:	20001d1c 	.word	0x20001d1c
    2b10:	00003841 	.word	0x00003841
    2b14:	0000b7f9 	.word	0x0000b7f9
    2b18:	0000bb39 	.word	0x0000bb39
    2b1c:	3ff00000 	.word	0x3ff00000
    2b20:	0000b581 	.word	0x0000b581
    2b24:	0000bd09 	.word	0x0000bd09
    2b28:	0000383d 	.word	0x0000383d
    2b2c:	00003935 	.word	0x00003935

					}
					if (grid_ui_encoder_array[i].rotation_value < 64){

						grid_ui_encoder_array[i].rotation_value++;
    2b30:	3301      	adds	r3, #1
    2b32:	b2db      	uxtb	r3, r3
    2b34:	4a22      	ldr	r2, [pc, #136]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2b36:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2b3a:	70d3      	strb	r3, [r2, #3]
						uint8_t v = 2 * grid_ui_encoder_array[i].rotation_value;
    2b3c:	005b      	lsls	r3, r3, #1
    2b3e:	b2dd      	uxtb	r5, r3

						grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, v); // LED
    2b40:	f104 0820 	add.w	r8, r4, #32
    2b44:	ea4f 1908 	mov.w	r9, r8, lsl #4
    2b48:	4e1e      	ldr	r6, [pc, #120]	; (2bc4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x39c>)
    2b4a:	68b3      	ldr	r3, [r6, #8]
    2b4c:	444b      	add	r3, r9
    2b4e:	6858      	ldr	r0, [r3, #4]
    2b50:	462a      	mov	r2, r5
    2b52:	2102      	movs	r1, #2
    2b54:	3009      	adds	r0, #9
    2b56:	4b1c      	ldr	r3, [pc, #112]	; (2bc8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a0>)
    2b58:	4798      	blx	r3
						mod->report_ui_array[i+16+16].helper[0] = v;
    2b5a:	68b3      	ldr	r3, [r6, #8]
    2b5c:	444b      	add	r3, r9
    2b5e:	68db      	ldr	r3, [r3, #12]
    2b60:	701d      	strb	r5, [r3, #0]
						grid_report_ui_set_changed_flag(mod, i+16+16);
    2b62:	fa5f f188 	uxtb.w	r1, r8
    2b66:	4630      	mov	r0, r6
    2b68:	4b18      	ldr	r3, [pc, #96]	; (2bcc <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a4>)
    2b6a:	4798      	blx	r3
    2b6c:	e01f      	b.n	2bae <grid_module_en16_reva_hardware_transfer_complete_cb+0x386>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    2b6e:	2200      	movs	r2, #0
    2b70:	4b17      	ldr	r3, [pc, #92]	; (2bd0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a8>)
    2b72:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    2b74:	4b17      	ldr	r3, [pc, #92]	; (2bd4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ac>)
    2b76:	4798      	blx	r3
}
    2b78:	b003      	add	sp, #12
    2b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    2b7e:	4b10      	ldr	r3, [pc, #64]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2b80:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2b84:	739d      	strb	r5, [r3, #14]
				if (grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time)>200){
    2b86:	6899      	ldr	r1, [r3, #8]
    2b88:	4813      	ldr	r0, [pc, #76]	; (2bd8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2b8a:	4b14      	ldr	r3, [pc, #80]	; (2bdc <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b4>)
    2b8c:	4798      	blx	r3
    2b8e:	28c8      	cmp	r0, #200	; 0xc8
    2b90:	f67f aecb 	bls.w	292a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
					if (grid_ui_encoder_array[i].rotation_value > 64){
    2b94:	4b0a      	ldr	r3, [pc, #40]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2b96:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2b9a:	78db      	ldrb	r3, [r3, #3]
    2b9c:	2b40      	cmp	r3, #64	; 0x40
    2b9e:	f63f af7d 	bhi.w	2a9c <grid_module_en16_reva_hardware_transfer_complete_cb+0x274>
					if (grid_ui_encoder_array[i].rotation_value < 64){
    2ba2:	4b07      	ldr	r3, [pc, #28]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2ba4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2ba8:	78db      	ldrb	r3, [r3, #3]
    2baa:	2b3f      	cmp	r3, #63	; 0x3f
    2bac:	d9c0      	bls.n	2b30 <grid_module_en16_reva_hardware_transfer_complete_cb+0x308>
					grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    2bae:	480a      	ldr	r0, [pc, #40]	; (2bd8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b0>)
    2bb0:	4b0b      	ldr	r3, [pc, #44]	; (2be0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b8>)
    2bb2:	4798      	blx	r3
    2bb4:	4902      	ldr	r1, [pc, #8]	; (2bc0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x398>)
    2bb6:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    2bba:	60a0      	str	r0, [r4, #8]
    2bbc:	e6b5      	b.n	292a <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
    2bbe:	bf00      	nop
    2bc0:	20003658 	.word	0x20003658
    2bc4:	20001d0c 	.word	0x20001d0c
    2bc8:	00003935 	.word	0x00003935
    2bcc:	00003fe7 	.word	0x00003fe7
    2bd0:	20003654 	.word	0x20003654
    2bd4:	000027f1 	.word	0x000027f1
    2bd8:	20001d1c 	.word	0x20001d1c
    2bdc:	00003841 	.word	0x00003841
    2be0:	0000383d 	.word	0x0000383d

00002be4 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    2be4:	b510      	push	{r4, lr}
    2be6:	4b0e      	ldr	r3, [pc, #56]	; (2c20 <grid_module_en16_reva_hardware_init+0x3c>)
    2be8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2bec:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2bee:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2bf4:	629a      	str	r2, [r3, #40]	; 0x28
    2bf6:	4a0b      	ldr	r2, [pc, #44]	; (2c24 <grid_module_en16_reva_hardware_init+0x40>)
    2bf8:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    2bfa:	4c0b      	ldr	r4, [pc, #44]	; (2c28 <grid_module_en16_reva_hardware_init+0x44>)
    2bfc:	2103      	movs	r1, #3
    2bfe:	4620      	mov	r0, r4
    2c00:	4b0a      	ldr	r3, [pc, #40]	; (2c2c <grid_module_en16_reva_hardware_init+0x48>)
    2c02:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    2c04:	490a      	ldr	r1, [pc, #40]	; (2c30 <grid_module_en16_reva_hardware_init+0x4c>)
    2c06:	4620      	mov	r0, r4
    2c08:	4b0a      	ldr	r3, [pc, #40]	; (2c34 <grid_module_en16_reva_hardware_init+0x50>)
    2c0a:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    2c0c:	490a      	ldr	r1, [pc, #40]	; (2c38 <grid_module_en16_reva_hardware_init+0x54>)
    2c0e:	4620      	mov	r0, r4
    2c10:	4b0a      	ldr	r3, [pc, #40]	; (2c3c <grid_module_en16_reva_hardware_init+0x58>)
    2c12:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    2c14:	4a0a      	ldr	r2, [pc, #40]	; (2c40 <grid_module_en16_reva_hardware_init+0x5c>)
    2c16:	2100      	movs	r1, #0
    2c18:	4620      	mov	r0, r4
    2c1a:	4b0a      	ldr	r3, [pc, #40]	; (2c44 <grid_module_en16_reva_hardware_init+0x60>)
    2c1c:	4798      	blx	r3
    2c1e:	bd10      	pop	{r4, pc}
    2c20:	41008000 	.word	0x41008000
    2c24:	c0000020 	.word	0xc0000020
    2c28:	20000f4c 	.word	0x20000f4c
    2c2c:	00004be5 	.word	0x00004be5
    2c30:	00061a80 	.word	0x00061a80
    2c34:	00004ba9 	.word	0x00004ba9
    2c38:	200017d0 	.word	0x200017d0
    2c3c:	00004ccd 	.word	0x00004ccd
    2c40:	00002829 	.word	0x00002829
    2c44:	00004c89 	.word	0x00004c89

00002c48 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    2c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2c4c:	b091      	sub	sp, #68	; 0x44
    2c4e:	4680      	mov	r8, r0
	
	
	grid_led_init(&grid_led_state, 16);
    2c50:	2110      	movs	r1, #16
    2c52:	4833      	ldr	r0, [pc, #204]	; (2d20 <grid_module_en16_reva_init+0xd8>)
    2c54:	4b33      	ldr	r3, [pc, #204]	; (2d24 <grid_module_en16_reva_init+0xdc>)
    2c56:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16);
    2c58:	2130      	movs	r1, #48	; 0x30
    2c5a:	4640      	mov	r0, r8
    2c5c:	4b32      	ldr	r3, [pc, #200]	; (2d28 <grid_module_en16_reva_init+0xe0>)
    2c5e:	4798      	blx	r3
    2c60:	2500      	movs	r5, #0
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<16+16+16; i++){
		
		uint8_t payload_template[30] = {0};
    2c62:	462c      	mov	r4, r5
    2c64:	4f31      	ldr	r7, [pc, #196]	; (2d2c <grid_module_en16_reva_init+0xe4>)
    2c66:	e031      	b.n	2ccc <grid_module_en16_reva_init+0x84>
		

		if (i<16){ // ROTATION
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2c68:	2303      	movs	r3, #3
    2c6a:	9304      	str	r3, [sp, #16]
    2c6c:	9403      	str	r4, [sp, #12]
    2c6e:	9502      	str	r5, [sp, #8]
    2c70:	2390      	movs	r3, #144	; 0x90
    2c72:	9301      	str	r3, [sp, #4]
    2c74:	9400      	str	r4, [sp, #0]
    2c76:	4623      	mov	r3, r4
    2c78:	2202      	movs	r2, #2
    2c7a:	492d      	ldr	r1, [pc, #180]	; (2d30 <grid_module_en16_reva_init+0xe8>)
    2c7c:	a808      	add	r0, sp, #32
    2c7e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2d4c <grid_module_en16_reva_init+0x104>
    2c82:	47c8      	blx	r9
    2c84:	e00e      	b.n	2ca4 <grid_module_en16_reva_init+0x5c>
			);
		
		}
		else{ // LED
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2c86:	2303      	movs	r3, #3
    2c88:	9304      	str	r3, [sp, #16]
    2c8a:	9403      	str	r4, [sp, #12]
    2c8c:	f1a5 0220 	sub.w	r2, r5, #32
    2c90:	9202      	str	r2, [sp, #8]
    2c92:	2263      	movs	r2, #99	; 0x63
    2c94:	9201      	str	r2, [sp, #4]
    2c96:	9400      	str	r4, [sp, #0]
    2c98:	2202      	movs	r2, #2
    2c9a:	4925      	ldr	r1, [pc, #148]	; (2d30 <grid_module_en16_reva_init+0xe8>)
    2c9c:	a808      	add	r0, sp, #32
    2c9e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2d4c <grid_module_en16_reva_init+0x104>
    2ca2:	47c8      	blx	r9
			);
				
		}

		
		uint32_t payload_length = strlen(payload_template);
    2ca4:	a808      	add	r0, sp, #32
    2ca6:	4b23      	ldr	r3, [pc, #140]	; (2d34 <grid_module_en16_reva_init+0xec>)
    2ca8:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    2caa:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    2cae:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    2cb2:	2202      	movs	r2, #2
    2cb4:	9202      	str	r2, [sp, #8]
    2cb6:	ab07      	add	r3, sp, #28
    2cb8:	9301      	str	r3, [sp, #4]
    2cba:	9000      	str	r0, [sp, #0]
    2cbc:	ab08      	add	r3, sp, #32
    2cbe:	4631      	mov	r1, r6
    2cc0:	4640      	mov	r0, r8
    2cc2:	4e1d      	ldr	r6, [pc, #116]	; (2d38 <grid_module_en16_reva_init+0xf0>)
    2cc4:	47b0      	blx	r6
    2cc6:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16+16+16; i++){
    2cc8:	2d30      	cmp	r5, #48	; 0x30
    2cca:	d017      	beq.n	2cfc <grid_module_en16_reva_init+0xb4>
    2ccc:	b2ee      	uxtb	r6, r5
		uint8_t payload_template[30] = {0};
    2cce:	221e      	movs	r2, #30
    2cd0:	4621      	mov	r1, r4
    2cd2:	a808      	add	r0, sp, #32
    2cd4:	47b8      	blx	r7
		if (i<16){ // ROTATION
    2cd6:	2e0f      	cmp	r6, #15
    2cd8:	d9c6      	bls.n	2c68 <grid_module_en16_reva_init+0x20>
		else if (i<16+16){ // BUTTON
    2cda:	2e1f      	cmp	r6, #31
    2cdc:	d8d3      	bhi.n	2c86 <grid_module_en16_reva_init+0x3e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    2cde:	2303      	movs	r3, #3
    2ce0:	9304      	str	r3, [sp, #16]
    2ce2:	9403      	str	r4, [sp, #12]
    2ce4:	9502      	str	r5, [sp, #8]
    2ce6:	2390      	movs	r3, #144	; 0x90
    2ce8:	9301      	str	r3, [sp, #4]
    2cea:	9400      	str	r4, [sp, #0]
    2cec:	4623      	mov	r3, r4
    2cee:	2202      	movs	r2, #2
    2cf0:	490f      	ldr	r1, [pc, #60]	; (2d30 <grid_module_en16_reva_init+0xe8>)
    2cf2:	a808      	add	r0, sp, #32
    2cf4:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2d4c <grid_module_en16_reva_init+0x104>
    2cf8:	47c8      	blx	r9
    2cfa:	e7d3      	b.n	2ca4 <grid_module_en16_reva_init+0x5c>
		
	}
	
	grid_report_sys_init(mod);
    2cfc:	4640      	mov	r0, r8
    2cfe:	4b0f      	ldr	r3, [pc, #60]	; (2d3c <grid_module_en16_reva_init+0xf4>)
    2d00:	4798      	blx	r3
    2d02:	2300      	movs	r3, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
    2d04:	490e      	ldr	r1, [pc, #56]	; (2d40 <grid_module_en16_reva_init+0xf8>)
    2d06:	011a      	lsls	r2, r3, #4
    2d08:	5453      	strb	r3, [r2, r1]
    2d0a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<16; i++)
    2d0c:	2b10      	cmp	r3, #16
    2d0e:	d1fa      	bne.n	2d06 <grid_module_en16_reva_init+0xbe>
	}
	
	
	grid_module_en16_reva_hardware_init();
    2d10:	4b0c      	ldr	r3, [pc, #48]	; (2d44 <grid_module_en16_reva_init+0xfc>)
    2d12:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    2d14:	4b0c      	ldr	r3, [pc, #48]	; (2d48 <grid_module_en16_reva_init+0x100>)
    2d16:	4798      	blx	r3
	
}
    2d18:	b011      	add	sp, #68	; 0x44
    2d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2d1e:	bf00      	nop
    2d20:	20003628 	.word	0x20003628
    2d24:	00002359 	.word	0x00002359
    2d28:	00003d0d 	.word	0x00003d0d
    2d2c:	0000bdb7 	.word	0x0000bdb7
    2d30:	0000d368 	.word	0x0000d368
    2d34:	0000c1ed 	.word	0x0000c1ed
    2d38:	00003dd1 	.word	0x00003dd1
    2d3c:	00003df5 	.word	0x00003df5
    2d40:	20003658 	.word	0x20003658
    2d44:	00002be5 	.word	0x00002be5
    2d48:	000027f1 	.word	0x000027f1
    2d4c:	0000c1a5 	.word	0x0000c1a5

00002d50 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    2d50:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    2d52:	4803      	ldr	r0, [pc, #12]	; (2d60 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    2d54:	4c03      	ldr	r4, [pc, #12]	; (2d64 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    2d56:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    2d58:	4803      	ldr	r0, [pc, #12]	; (2d68 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    2d5a:	47a0      	blx	r4
    2d5c:	bd10      	pop	{r4, pc}
    2d5e:	bf00      	nop
    2d60:	20001058 	.word	0x20001058
    2d64:	00004679 	.word	0x00004679
    2d68:	2000122c 	.word	0x2000122c
    2d6c:	00000000 	.word	0x00000000

00002d70 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    2d70:	4bb1      	ldr	r3, [pc, #708]	; (3038 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	2b00      	cmp	r3, #0
    2d76:	f000 810a 	beq.w	2f8e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x21e>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    2d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d7e:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    2d80:	2300      	movs	r3, #0
    2d82:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    2d86:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    2d8a:	4bac      	ldr	r3, [pc, #688]	; (303c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2d8c:	781a      	ldrb	r2, [r3, #0]
    2d8e:	3208      	adds	r2, #8
    2d90:	49ab      	ldr	r1, [pc, #684]	; (3040 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    2d92:	5c8e      	ldrb	r6, [r1, r2]
    2d94:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    2d96:	781a      	ldrb	r2, [r3, #0]
    2d98:	b2d2      	uxtb	r2, r2
    2d9a:	5c8d      	ldrb	r5, [r1, r2]
    2d9c:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    2d9e:	781a      	ldrb	r2, [r3, #0]
    2da0:	3201      	adds	r2, #1
    2da2:	b2d2      	uxtb	r2, r2
    2da4:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    2da6:	781a      	ldrb	r2, [r3, #0]
    2da8:	f002 0207 	and.w	r2, r2, #7
    2dac:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    2dae:	781b      	ldrb	r3, [r3, #0]
    2db0:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2db4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2db8:	4ba2      	ldr	r3, [pc, #648]	; (3044 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2dba:	bf14      	ite	ne
    2dbc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2dc0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    2dc4:	4b9d      	ldr	r3, [pc, #628]	; (303c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2dc6:	781b      	ldrb	r3, [r3, #0]
    2dc8:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2dcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2dd0:	4b9c      	ldr	r3, [pc, #624]	; (3044 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2dd2:	bf14      	ite	ne
    2dd4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2dd8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    2ddc:	4b97      	ldr	r3, [pc, #604]	; (303c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2de4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2de8:	4b96      	ldr	r3, [pc, #600]	; (3044 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    2dea:	bf14      	ite	ne
    2dec:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2df0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    2df4:	2302      	movs	r3, #2
    2df6:	f10d 0206 	add.w	r2, sp, #6
    2dfa:	2100      	movs	r1, #0
    2dfc:	4892      	ldr	r0, [pc, #584]	; (3048 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    2dfe:	4c93      	ldr	r4, [pc, #588]	; (304c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    2e00:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    2e02:	2302      	movs	r3, #2
    2e04:	aa01      	add	r2, sp, #4
    2e06:	2100      	movs	r1, #0
    2e08:	4891      	ldr	r0, [pc, #580]	; (3050 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    2e0a:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    2e0c:	f8df b260 	ldr.w	fp, [pc, #608]	; 3070 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>
    2e10:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2e14:	47d8      	blx	fp
    2e16:	f8df a25c 	ldr.w	sl, [pc, #604]	; 3074 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
    2e1a:	a385      	add	r3, pc, #532	; (adr r3, 3030 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e20:	47d0      	blx	sl
    2e22:	f8df 9254 	ldr.w	r9, [pc, #596]	; 3078 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x308>
    2e26:	47c8      	blx	r9
    2e28:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2e2c:	42a0      	cmp	r0, r4
    2e2e:	bf28      	it	cs
    2e30:	4620      	movcs	r0, r4
    2e32:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    2e34:	fa1f f880 	uxth.w	r8, r0
    2e38:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    2e3c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2e40:	47d8      	blx	fp
    2e42:	a37b      	add	r3, pc, #492	; (adr r3, 3030 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
    2e44:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e48:	47d0      	blx	sl
    2e4a:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    2e4c:	42a0      	cmp	r0, r4
    2e4e:	bf28      	it	cs
    2e50:	4620      	movcs	r0, r4
    2e52:	b280      	uxth	r0, r0
    2e54:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    2e58:	f1a5 0308 	sub.w	r3, r5, #8
    2e5c:	b2db      	uxtb	r3, r3
    2e5e:	2b01      	cmp	r3, #1
    2e60:	f240 808d 	bls.w	2f7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    2e64:	2e0d      	cmp	r6, #13
    2e66:	f240 8098 	bls.w	2f9a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x22a>
		
		if (adcresult_0>10000){
    2e6a:	f242 7310 	movw	r3, #10000	; 0x2710
    2e6e:	4598      	cmp	r8, r3
			adcresult_0 = 0;
    2e70:	bf8c      	ite	hi
    2e72:	2300      	movhi	r3, #0
		}
		else{
			adcresult_0 = 127;
    2e74:	237f      	movls	r3, #127	; 0x7f
    2e76:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
			
		if (adcresult_1>10000){
    2e7a:	f242 7310 	movw	r3, #10000	; 0x2710
    2e7e:	4298      	cmp	r0, r3
			adcresult_1 = 0;
    2e80:	bf8c      	ite	hi
    2e82:	2300      	movhi	r3, #0
		}
		else{
			adcresult_1 = 127;
    2e84:	237f      	movls	r3, #127	; 0x7f
    2e86:	f8ad 3004 	strh.w	r3, [sp, #4]
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0]){
    2e8a:	f106 5480 	add.w	r4, r6, #268435456	; 0x10000000
    2e8e:	3c04      	subs	r4, #4
    2e90:	0124      	lsls	r4, r4, #4
    2e92:	4b70      	ldr	r3, [pc, #448]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2e94:	689b      	ldr	r3, [r3, #8]
    2e96:	4423      	add	r3, r4
    2e98:	68da      	ldr	r2, [r3, #12]
    2e9a:	7812      	ldrb	r2, [r2, #0]
    2e9c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2ea0:	4291      	cmp	r1, r2
    2ea2:	d02f      	beq.n	2f04 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x194>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2ea4:	2a00      	cmp	r2, #0
    2ea6:	bf0c      	ite	eq
    2ea8:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2eac:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    2eb0:	6858      	ldr	r0, [r3, #4]
    2eb2:	bf0c      	ite	eq
    2eb4:	2290      	moveq	r2, #144	; 0x90
    2eb6:	2280      	movne	r2, #128	; 0x80
    2eb8:	2102      	movs	r1, #2
    2eba:	3005      	adds	r0, #5
    2ebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 306c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2ec0:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    2ec2:	4f64      	ldr	r7, [pc, #400]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2ec4:	68bb      	ldr	r3, [r7, #8]
    2ec6:	4423      	add	r3, r4
    2ec8:	6858      	ldr	r0, [r3, #4]
    2eca:	4632      	mov	r2, r6
    2ecc:	2102      	movs	r1, #2
    2ece:	3007      	adds	r0, #7
    2ed0:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    2ed2:	68bb      	ldr	r3, [r7, #8]
    2ed4:	4423      	add	r3, r4
    2ed6:	6858      	ldr	r0, [r3, #4]
    2ed8:	464a      	mov	r2, r9
    2eda:	2102      	movs	r1, #2
    2edc:	3009      	adds	r0, #9
    2ede:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[21], 2, actuator);
    2ee0:	68bb      	ldr	r3, [r7, #8]
    2ee2:	4423      	add	r3, r4
    2ee4:	6858      	ldr	r0, [r3, #4]
    2ee6:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2eea:	2102      	movs	r1, #2
    2eec:	3015      	adds	r0, #21
    2eee:	47c0      	blx	r8
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    2ef0:	68bb      	ldr	r3, [r7, #8]
    2ef2:	441c      	add	r4, r3
    2ef4:	68e3      	ldr	r3, [r4, #12]
    2ef6:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    2efa:	1f31      	subs	r1, r6, #4
    2efc:	b2c9      	uxtb	r1, r1
    2efe:	4638      	mov	r0, r7
    2f00:	4b55      	ldr	r3, [pc, #340]	; (3058 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2f02:	4798      	blx	r3
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0]){
    2f04:	f105 5480 	add.w	r4, r5, #268435456	; 0x10000000
    2f08:	3c04      	subs	r4, #4
    2f0a:	0124      	lsls	r4, r4, #4
    2f0c:	4b51      	ldr	r3, [pc, #324]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f0e:	689b      	ldr	r3, [r3, #8]
    2f10:	4423      	add	r3, r4
    2f12:	68da      	ldr	r2, [r3, #12]
    2f14:	7812      	ldrb	r2, [r2, #0]
    2f16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2f1a:	4291      	cmp	r1, r2
    2f1c:	d02f      	beq.n	2f7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    2f1e:	2a00      	cmp	r2, #0
    2f20:	bf0c      	ite	eq
    2f22:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    2f26:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    2f2a:	6858      	ldr	r0, [r3, #4]
    2f2c:	bf0c      	ite	eq
    2f2e:	2290      	moveq	r2, #144	; 0x90
    2f30:	2280      	movne	r2, #128	; 0x80
    2f32:	2102      	movs	r1, #2
    2f34:	3005      	adds	r0, #5
    2f36:	f8df 8134 	ldr.w	r8, [pc, #308]	; 306c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>
    2f3a:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_0);
    2f3c:	4f45      	ldr	r7, [pc, #276]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2f3e:	68bb      	ldr	r3, [r7, #8]
    2f40:	4423      	add	r3, r4
    2f42:	6858      	ldr	r0, [r3, #4]
    2f44:	4632      	mov	r2, r6
    2f46:	2102      	movs	r1, #2
    2f48:	3007      	adds	r0, #7
    2f4a:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);
    2f4c:	68bb      	ldr	r3, [r7, #8]
    2f4e:	4423      	add	r3, r4
    2f50:	6858      	ldr	r0, [r3, #4]
    2f52:	464a      	mov	r2, r9
    2f54:	2102      	movs	r1, #2
    2f56:	3009      	adds	r0, #9
    2f58:	47c0      	blx	r8
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[21], 2, actuator);
    2f5a:	68bb      	ldr	r3, [r7, #8]
    2f5c:	4423      	add	r3, r4
    2f5e:	6858      	ldr	r0, [r3, #4]
    2f60:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2f64:	2102      	movs	r1, #2
    2f66:	3015      	adds	r0, #21
    2f68:	47c0      	blx	r8
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;
    2f6a:	68bb      	ldr	r3, [r7, #8]
    2f6c:	441c      	add	r4, r3
    2f6e:	68e3      	ldr	r3, [r4, #12]
    2f70:	f883 9000 	strb.w	r9, [r3]
			
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    2f74:	1f29      	subs	r1, r5, #4
    2f76:	b2c9      	uxtb	r1, r1
    2f78:	4638      	mov	r0, r7
    2f7a:	4b37      	ldr	r3, [pc, #220]	; (3058 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    2f7c:	4798      	blx	r3
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    2f7e:	2200      	movs	r2, #0
    2f80:	4b2d      	ldr	r3, [pc, #180]	; (3038 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2f82:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    2f84:	4b35      	ldr	r3, [pc, #212]	; (305c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>)
    2f86:	4798      	blx	r3
}
    2f88:	b003      	add	sp, #12
    2f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_pbf4_reva_hardware_transfer_complete++;
    2f8e:	4a2a      	ldr	r2, [pc, #168]	; (3038 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
    2f90:	7813      	ldrb	r3, [r2, #0]
    2f92:	3301      	adds	r3, #1
    2f94:	b2db      	uxtb	r3, r3
    2f96:	7013      	strb	r3, [r2, #0]
    2f98:	4770      	bx	lr
		if (adc_index_1 == 0 || adc_index_1 == 1){
    2f9a:	2d01      	cmp	r5, #1
    2f9c:	d936      	bls.n	300c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29c>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    2f9e:	b2b9      	uxth	r1, r7
    2fa0:	4630      	mov	r0, r6
    2fa2:	4c2f      	ldr	r4, [pc, #188]	; (3060 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    2fa4:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    2fa6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2faa:	4628      	mov	r0, r5
    2fac:	47a0      	blx	r4
		if (grid_ain_get_changed(adc_index_0)){
    2fae:	4630      	mov	r0, r6
    2fb0:	4b2c      	ldr	r3, [pc, #176]	; (3064 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    2fb2:	4798      	blx	r3
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d161      	bne.n	307c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30c>
		if (grid_ain_get_changed(adc_index_1)){
    2fb8:	4628      	mov	r0, r5
    2fba:	4b2a      	ldr	r3, [pc, #168]	; (3064 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    2fbc:	4798      	blx	r3
    2fbe:	2800      	cmp	r0, #0
    2fc0:	d0dd      	beq.n	2f7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    2fc2:	2107      	movs	r1, #7
    2fc4:	4628      	mov	r0, r5
    2fc6:	4b28      	ldr	r3, [pc, #160]	; (3068 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>)
    2fc8:	4798      	blx	r3
    2fca:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    2fcc:	ea4f 1805 	mov.w	r8, r5, lsl #4
    2fd0:	4c20      	ldr	r4, [pc, #128]	; (3054 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    2fd2:	68a3      	ldr	r3, [r4, #8]
    2fd4:	4443      	add	r3, r8
    2fd6:	6858      	ldr	r0, [r3, #4]
    2fd8:	462a      	mov	r2, r5
    2fda:	2102      	movs	r1, #2
    2fdc:	3007      	adds	r0, #7
    2fde:	4f23      	ldr	r7, [pc, #140]	; (306c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    2fe0:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    2fe2:	68a3      	ldr	r3, [r4, #8]
    2fe4:	4443      	add	r3, r8
    2fe6:	6858      	ldr	r0, [r3, #4]
    2fe8:	b2f2      	uxtb	r2, r6
    2fea:	2102      	movs	r1, #2
    2fec:	3009      	adds	r0, #9
    2fee:	47b8      	blx	r7
			uint8_t actuator = 2*value;
    2ff0:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    2ff2:	68a3      	ldr	r3, [r4, #8]
    2ff4:	4443      	add	r3, r8
    2ff6:	6858      	ldr	r0, [r3, #4]
    2ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    2ffc:	2102      	movs	r1, #2
    2ffe:	3015      	adds	r0, #21
    3000:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    3002:	4629      	mov	r1, r5
    3004:	4620      	mov	r0, r4
    3006:	4b14      	ldr	r3, [pc, #80]	; (3058 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    3008:	4798      	blx	r3
    300a:	e7b8      	b.n	2f7e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x20e>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    300c:	b2b9      	uxth	r1, r7
    300e:	f64f 78ff 	movw	r8, #65535	; 0xffff
    3012:	eba8 0101 	sub.w	r1, r8, r1
    3016:	4630      	mov	r0, r6
    3018:	4c11      	ldr	r4, [pc, #68]	; (3060 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    301a:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    301c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3020:	eba8 0101 	sub.w	r1, r8, r1
    3024:	4628      	mov	r0, r5
    3026:	47a0      	blx	r4
    3028:	e7c1      	b.n	2fae <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x23e>
    302a:	bf00      	nop
    302c:	f3af 8000 	nop.w
    3030:	47ae147b 	.word	0x47ae147b
    3034:	3ff07ae1 	.word	0x3ff07ae1
    3038:	200017e8 	.word	0x200017e8
    303c:	20003624 	.word	0x20003624
    3040:	20000334 	.word	0x20000334
    3044:	41008000 	.word	0x41008000
    3048:	20001058 	.word	0x20001058
    304c:	00004599 	.word	0x00004599
    3050:	2000122c 	.word	0x2000122c
    3054:	20001d0c 	.word	0x20001d0c
    3058:	00003fe7 	.word	0x00003fe7
    305c:	00002d51 	.word	0x00002d51
    3060:	000011e9 	.word	0x000011e9
    3064:	000012e5 	.word	0x000012e5
    3068:	000012f5 	.word	0x000012f5
    306c:	00003935 	.word	0x00003935
    3070:	0000b819 	.word	0x0000b819
    3074:	0000b8e5 	.word	0x0000b8e5
    3078:	0000bd09 	.word	0x0000bd09
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    307c:	2107      	movs	r1, #7
    307e:	4630      	mov	r0, r6
    3080:	4b11      	ldr	r3, [pc, #68]	; (30c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x358>)
    3082:	4798      	blx	r3
    3084:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    3086:	ea4f 1906 	mov.w	r9, r6, lsl #4
    308a:	4c10      	ldr	r4, [pc, #64]	; (30cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x35c>)
    308c:	68a3      	ldr	r3, [r4, #8]
    308e:	444b      	add	r3, r9
    3090:	6858      	ldr	r0, [r3, #4]
    3092:	4632      	mov	r2, r6
    3094:	2102      	movs	r1, #2
    3096:	3007      	adds	r0, #7
    3098:	f8df 8038 	ldr.w	r8, [pc, #56]	; 30d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x364>
    309c:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    309e:	68a3      	ldr	r3, [r4, #8]
    30a0:	444b      	add	r3, r9
    30a2:	6858      	ldr	r0, [r3, #4]
    30a4:	b2fa      	uxtb	r2, r7
    30a6:	2102      	movs	r1, #2
    30a8:	3009      	adds	r0, #9
    30aa:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    30ac:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    30ae:	68a3      	ldr	r3, [r4, #8]
    30b0:	444b      	add	r3, r9
    30b2:	6858      	ldr	r0, [r3, #4]
    30b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    30b8:	2102      	movs	r1, #2
    30ba:	3015      	adds	r0, #21
    30bc:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);
    30be:	4631      	mov	r1, r6
    30c0:	4620      	mov	r0, r4
    30c2:	4b03      	ldr	r3, [pc, #12]	; (30d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x360>)
    30c4:	4798      	blx	r3
    30c6:	e777      	b.n	2fb8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x248>
    30c8:	000012f5 	.word	0x000012f5
    30cc:	20001d0c 	.word	0x20001d0c
    30d0:	00003fe7 	.word	0x00003fe7
    30d4:	00003935 	.word	0x00003935

000030d8 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    30d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    30da:	4f0b      	ldr	r7, [pc, #44]	; (3108 <grid_module_pbf4_reva_hardware_init+0x30>)
    30dc:	4c0b      	ldr	r4, [pc, #44]	; (310c <grid_module_pbf4_reva_hardware_init+0x34>)
    30de:	463b      	mov	r3, r7
    30e0:	2200      	movs	r2, #0
    30e2:	4611      	mov	r1, r2
    30e4:	4620      	mov	r0, r4
    30e6:	4e0a      	ldr	r6, [pc, #40]	; (3110 <grid_module_pbf4_reva_hardware_init+0x38>)
    30e8:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    30ea:	4d0a      	ldr	r5, [pc, #40]	; (3114 <grid_module_pbf4_reva_hardware_init+0x3c>)
    30ec:	463b      	mov	r3, r7
    30ee:	2200      	movs	r2, #0
    30f0:	4611      	mov	r1, r2
    30f2:	4628      	mov	r0, r5
    30f4:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    30f6:	2100      	movs	r1, #0
    30f8:	4620      	mov	r0, r4
    30fa:	4c07      	ldr	r4, [pc, #28]	; (3118 <grid_module_pbf4_reva_hardware_init+0x40>)
    30fc:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    30fe:	2100      	movs	r1, #0
    3100:	4628      	mov	r0, r5
    3102:	47a0      	blx	r4
    3104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3106:	bf00      	nop
    3108:	00002d71 	.word	0x00002d71
    310c:	20001058 	.word	0x20001058
    3110:	00004519 	.word	0x00004519
    3114:	2000122c 	.word	0x2000122c
    3118:	000044d9 	.word	0x000044d9

0000311c <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    311c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3120:	b097      	sub	sp, #92	; 0x5c
    3122:	4680      	mov	r8, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    3124:	2307      	movs	r3, #7
    3126:	220e      	movs	r2, #14
    3128:	2105      	movs	r1, #5
    312a:	2010      	movs	r0, #16
    312c:	4c26      	ldr	r4, [pc, #152]	; (31c8 <grid_module_pbf4_reva_init+0xac>)
    312e:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    3130:	210c      	movs	r1, #12
    3132:	4826      	ldr	r0, [pc, #152]	; (31cc <grid_module_pbf4_reva_init+0xb0>)
    3134:	4b26      	ldr	r3, [pc, #152]	; (31d0 <grid_module_pbf4_reva_init+0xb4>)
    3136:	4798      	blx	r3
	
	grid_ui_model_init(mod, 12);
    3138:	210c      	movs	r1, #12
    313a:	4640      	mov	r0, r8
    313c:	4b25      	ldr	r3, [pc, #148]	; (31d4 <grid_module_pbf4_reva_init+0xb8>)
    313e:	4798      	blx	r3
    3140:	2500      	movs	r5, #0
	
	for(uint8_t i=0; i<12; i++){
		
		uint8_t payload_template[30] = {0};
    3142:	462c      	mov	r4, r5
    3144:	4f24      	ldr	r7, [pc, #144]	; (31d8 <grid_module_pbf4_reva_init+0xbc>)
    3146:	b2ee      	uxtb	r6, r5
    3148:	221e      	movs	r2, #30
    314a:	4621      	mov	r1, r4
    314c:	a80e      	add	r0, sp, #56	; 0x38
    314e:	47b8      	blx	r7
		
		if (i<8){ // PORENTIOMETERS & FADERS
    3150:	2e07      	cmp	r6, #7
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3152:	f04f 0303 	mov.w	r3, #3
    3156:	930b      	str	r3, [sp, #44]	; 0x2c
    3158:	940a      	str	r4, [sp, #40]	; 0x28
    315a:	9509      	str	r5, [sp, #36]	; 0x24
    315c:	f04f 0263 	mov.w	r2, #99	; 0x63
    3160:	9208      	str	r2, [sp, #32]
    3162:	9407      	str	r4, [sp, #28]
    3164:	9306      	str	r3, [sp, #24]
    3166:	f04f 0202 	mov.w	r2, #2
    316a:	9205      	str	r2, [sp, #20]
    316c:	9304      	str	r3, [sp, #16]
    316e:	9403      	str	r4, [sp, #12]
    3170:	9502      	str	r5, [sp, #8]
    3172:	bf94      	ite	ls
    3174:	23b0      	movls	r3, #176	; 0xb0
			);
			
		}
		else{ // BUTTONS
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    3176:	2390      	movhi	r3, #144	; 0x90
    3178:	9301      	str	r3, [sp, #4]
    317a:	9400      	str	r4, [sp, #0]
    317c:	4623      	mov	r3, r4
    317e:	4917      	ldr	r1, [pc, #92]	; (31dc <grid_module_pbf4_reva_init+0xc0>)
    3180:	a80e      	add	r0, sp, #56	; 0x38
    3182:	f8df 9070 	ldr.w	r9, [pc, #112]	; 31f4 <grid_module_pbf4_reva_init+0xd8>
    3186:	47c8      	blx	r9
			);
			
		}

		
		uint8_t payload_length = strlen(payload_template);
    3188:	a80e      	add	r0, sp, #56	; 0x38
    318a:	4b15      	ldr	r3, [pc, #84]	; (31e0 <grid_module_pbf4_reva_init+0xc4>)
    318c:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    318e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    3192:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    3196:	2202      	movs	r2, #2
    3198:	9202      	str	r2, [sp, #8]
    319a:	ab0d      	add	r3, sp, #52	; 0x34
    319c:	9301      	str	r3, [sp, #4]
    319e:	b2c0      	uxtb	r0, r0
    31a0:	9000      	str	r0, [sp, #0]
    31a2:	ab0e      	add	r3, sp, #56	; 0x38
    31a4:	4631      	mov	r1, r6
    31a6:	4640      	mov	r0, r8
    31a8:	4e0e      	ldr	r6, [pc, #56]	; (31e4 <grid_module_pbf4_reva_init+0xc8>)
    31aa:	47b0      	blx	r6
    31ac:	3501      	adds	r5, #1
	for(uint8_t i=0; i<12; i++){
    31ae:	2d0c      	cmp	r5, #12
    31b0:	d1c9      	bne.n	3146 <grid_module_pbf4_reva_init+0x2a>
		
	}
	
	grid_report_sys_init(mod);
    31b2:	4640      	mov	r0, r8
    31b4:	4b0c      	ldr	r3, [pc, #48]	; (31e8 <grid_module_pbf4_reva_init+0xcc>)
    31b6:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    31b8:	4b0c      	ldr	r3, [pc, #48]	; (31ec <grid_module_pbf4_reva_init+0xd0>)
    31ba:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    31bc:	4b0c      	ldr	r3, [pc, #48]	; (31f0 <grid_module_pbf4_reva_init+0xd4>)
    31be:	4798      	blx	r3
	
    31c0:	b017      	add	sp, #92	; 0x5c
    31c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    31c6:	bf00      	nop
    31c8:	0000119d 	.word	0x0000119d
    31cc:	20003628 	.word	0x20003628
    31d0:	00002359 	.word	0x00002359
    31d4:	00003d0d 	.word	0x00003d0d
    31d8:	0000bdb7 	.word	0x0000bdb7
    31dc:	0000d350 	.word	0x0000d350
    31e0:	0000c1ed 	.word	0x0000c1ed
    31e4:	00003dd1 	.word	0x00003dd1
    31e8:	00003df5 	.word	0x00003df5
    31ec:	000030d9 	.word	0x000030d9
    31f0:	00002d51 	.word	0x00002d51
    31f4:	0000c1a5 	.word	0x0000c1a5

000031f8 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    31f8:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    31fa:	4803      	ldr	r0, [pc, #12]	; (3208 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    31fc:	4c03      	ldr	r4, [pc, #12]	; (320c <grid_module_po16_revb_hardware_start_transfer+0x14>)
    31fe:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    3200:	4803      	ldr	r0, [pc, #12]	; (3210 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    3202:	47a0      	blx	r4
    3204:	bd10      	pop	{r4, pc}
    3206:	bf00      	nop
    3208:	20001058 	.word	0x20001058
    320c:	00004679 	.word	0x00004679
    3210:	2000122c 	.word	0x2000122c
    3214:	00000000 	.word	0x00000000

00003218 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    3218:	4b75      	ldr	r3, [pc, #468]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	2b00      	cmp	r3, #0
    321e:	f000 8085 	beq.w	332c <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    3222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3226:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    3228:	2300      	movs	r3, #0
    322a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    322e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    3232:	4b6f      	ldr	r3, [pc, #444]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3234:	785a      	ldrb	r2, [r3, #1]
    3236:	3208      	adds	r2, #8
    3238:	496e      	ldr	r1, [pc, #440]	; (33f4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1dc>)
    323a:	5c8d      	ldrb	r5, [r1, r2]
    323c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    323e:	785a      	ldrb	r2, [r3, #1]
    3240:	b2d2      	uxtb	r2, r2
    3242:	5c8c      	ldrb	r4, [r1, r2]
    3244:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    3246:	785a      	ldrb	r2, [r3, #1]
    3248:	3201      	adds	r2, #1
    324a:	b2d2      	uxtb	r2, r2
    324c:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    324e:	785a      	ldrb	r2, [r3, #1]
    3250:	f002 0207 	and.w	r2, r2, #7
    3254:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    3256:	785b      	ldrb	r3, [r3, #1]
    3258:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    325c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3260:	4b65      	ldr	r3, [pc, #404]	; (33f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    3262:	bf14      	ite	ne
    3264:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3268:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    326c:	4b60      	ldr	r3, [pc, #384]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    326e:	785b      	ldrb	r3, [r3, #1]
    3270:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3274:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3278:	4b5f      	ldr	r3, [pc, #380]	; (33f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    327a:	bf14      	ite	ne
    327c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3280:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    3284:	4b5a      	ldr	r3, [pc, #360]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3286:	785b      	ldrb	r3, [r3, #1]
    3288:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    328c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3290:	4b59      	ldr	r3, [pc, #356]	; (33f8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e0>)
    3292:	bf14      	ite	ne
    3294:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3298:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    329c:	2302      	movs	r3, #2
    329e:	f10d 0206 	add.w	r2, sp, #6
    32a2:	2100      	movs	r1, #0
    32a4:	4855      	ldr	r0, [pc, #340]	; (33fc <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e4>)
    32a6:	4e56      	ldr	r6, [pc, #344]	; (3400 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    32a8:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    32aa:	2302      	movs	r3, #2
    32ac:	aa01      	add	r2, sp, #4
    32ae:	2100      	movs	r1, #0
    32b0:	4854      	ldr	r0, [pc, #336]	; (3404 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1ec>)
    32b2:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    32b4:	f8df a168 	ldr.w	sl, [pc, #360]	; 3420 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>
    32b8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    32bc:	47d0      	blx	sl
    32be:	f8df 9164 	ldr.w	r9, [pc, #356]	; 3424 <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>
    32c2:	a349      	add	r3, pc, #292	; (adr r3, 33e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    32c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    32c8:	47c8      	blx	r9
    32ca:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3428 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>
    32ce:	47c0      	blx	r8
    32d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    32d4:	42b0      	cmp	r0, r6
    32d6:	bf28      	it	cs
    32d8:	4630      	movcs	r0, r6
    32da:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    32dc:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    32e0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    32e4:	47d0      	blx	sl
    32e6:	a340      	add	r3, pc, #256	; (adr r3, 33e8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d0>)
    32e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    32ec:	47c8      	blx	r9
    32ee:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    32f0:	42b0      	cmp	r0, r6
    32f2:	bf28      	it	cs
    32f4:	4630      	movcs	r0, r6
    32f6:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    32fa:	b2b9      	uxth	r1, r7
    32fc:	4628      	mov	r0, r5
    32fe:	4e42      	ldr	r6, [pc, #264]	; (3408 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    3300:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    3302:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3306:	4620      	mov	r0, r4
    3308:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    330a:	4628      	mov	r0, r5
    330c:	4b3f      	ldr	r3, [pc, #252]	; (340c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    330e:	4798      	blx	r3
    3310:	b990      	cbnz	r0, 3338 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    3312:	4620      	mov	r0, r4
    3314:	4b3d      	ldr	r3, [pc, #244]	; (340c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    3316:	4798      	blx	r3
    3318:	2800      	cmp	r0, #0
    331a:	d139      	bne.n	3390 <grid_module_po16_revb_hardware_transfer_complete_cb+0x178>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    331c:	2200      	movs	r2, #0
    331e:	4b34      	ldr	r3, [pc, #208]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    3320:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    3322:	4b3b      	ldr	r3, [pc, #236]	; (3410 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    3324:	4798      	blx	r3
}
    3326:	b002      	add	sp, #8
    3328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    332c:	4a30      	ldr	r2, [pc, #192]	; (33f0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1d8>)
    332e:	7813      	ldrb	r3, [r2, #0]
    3330:	3301      	adds	r3, #1
    3332:	b2db      	uxtb	r3, r3
    3334:	7013      	strb	r3, [r2, #0]
    3336:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    3338:	2107      	movs	r1, #7
    333a:	4628      	mov	r0, r5
    333c:	4b35      	ldr	r3, [pc, #212]	; (3414 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    333e:	4798      	blx	r3
    3340:	fa5f f880 	uxtb.w	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    3344:	012f      	lsls	r7, r5, #4
    3346:	4e34      	ldr	r6, [pc, #208]	; (3418 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    3348:	68b3      	ldr	r3, [r6, #8]
    334a:	443b      	add	r3, r7
    334c:	6858      	ldr	r0, [r3, #4]
    334e:	462a      	mov	r2, r5
    3350:	2102      	movs	r1, #2
    3352:	3007      	adds	r0, #7
    3354:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 342c <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    3358:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    335a:	68b3      	ldr	r3, [r6, #8]
    335c:	443b      	add	r3, r7
    335e:	6858      	ldr	r0, [r3, #4]
    3360:	4642      	mov	r2, r8
    3362:	2102      	movs	r1, #2
    3364:	3009      	adds	r0, #9
    3366:	47c8      	blx	r9
		uint8_t actuator = 2*value;
    3368:	ea4f 0248 	mov.w	r2, r8, lsl #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[21], 2, actuator);
    336c:	68b3      	ldr	r3, [r6, #8]
    336e:	443b      	add	r3, r7
    3370:	6858      	ldr	r0, [r3, #4]
    3372:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    3376:	2102      	movs	r1, #2
    3378:	3015      	adds	r0, #21
    337a:	47c8      	blx	r9
		mod->report_ui_array[adc_index_0].helper[0] = value;
    337c:	68b3      	ldr	r3, [r6, #8]
    337e:	441f      	add	r7, r3
    3380:	68fb      	ldr	r3, [r7, #12]
    3382:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    3386:	4629      	mov	r1, r5
    3388:	4630      	mov	r0, r6
    338a:	4b24      	ldr	r3, [pc, #144]	; (341c <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    338c:	4798      	blx	r3
    338e:	e7c0      	b.n	3312 <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    3390:	2107      	movs	r1, #7
    3392:	4620      	mov	r0, r4
    3394:	4b1f      	ldr	r3, [pc, #124]	; (3414 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    3396:	4798      	blx	r3
    3398:	b2c7      	uxtb	r7, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    339a:	0126      	lsls	r6, r4, #4
    339c:	4d1e      	ldr	r5, [pc, #120]	; (3418 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    339e:	68ab      	ldr	r3, [r5, #8]
    33a0:	4433      	add	r3, r6
    33a2:	6858      	ldr	r0, [r3, #4]
    33a4:	4622      	mov	r2, r4
    33a6:	2102      	movs	r1, #2
    33a8:	3007      	adds	r0, #7
    33aa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 342c <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>
    33ae:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    33b0:	68ab      	ldr	r3, [r5, #8]
    33b2:	4433      	add	r3, r6
    33b4:	6858      	ldr	r0, [r3, #4]
    33b6:	463a      	mov	r2, r7
    33b8:	2102      	movs	r1, #2
    33ba:	3009      	adds	r0, #9
    33bc:	47c0      	blx	r8
		uint8_t actuator = 2*value;
    33be:	007a      	lsls	r2, r7, #1
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[21], 2, actuator);
    33c0:	68ab      	ldr	r3, [r5, #8]
    33c2:	4433      	add	r3, r6
    33c4:	6858      	ldr	r0, [r3, #4]
    33c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    33ca:	2102      	movs	r1, #2
    33cc:	3015      	adds	r0, #21
    33ce:	47c0      	blx	r8
		mod->report_ui_array[adc_index_1].helper[0] = value;
    33d0:	68ab      	ldr	r3, [r5, #8]
    33d2:	441e      	add	r6, r3
    33d4:	68f3      	ldr	r3, [r6, #12]
    33d6:	701f      	strb	r7, [r3, #0]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    33d8:	4621      	mov	r1, r4
    33da:	4628      	mov	r0, r5
    33dc:	4b0f      	ldr	r3, [pc, #60]	; (341c <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    33de:	4798      	blx	r3
    33e0:	e79c      	b.n	331c <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    33e2:	bf00      	nop
    33e4:	f3af 8000 	nop.w
    33e8:	47ae147b 	.word	0x47ae147b
    33ec:	3ff07ae1 	.word	0x3ff07ae1
    33f0:	20000646 	.word	0x20000646
    33f4:	20000344 	.word	0x20000344
    33f8:	41008000 	.word	0x41008000
    33fc:	20001058 	.word	0x20001058
    3400:	00004599 	.word	0x00004599
    3404:	2000122c 	.word	0x2000122c
    3408:	000011e9 	.word	0x000011e9
    340c:	000012e5 	.word	0x000012e5
    3410:	000031f9 	.word	0x000031f9
    3414:	000012f5 	.word	0x000012f5
    3418:	20001d0c 	.word	0x20001d0c
    341c:	00003fe7 	.word	0x00003fe7
    3420:	0000b819 	.word	0x0000b819
    3424:	0000b8e5 	.word	0x0000b8e5
    3428:	0000bd09 	.word	0x0000bd09
    342c:	00003935 	.word	0x00003935

00003430 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    3430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    3432:	4f0b      	ldr	r7, [pc, #44]	; (3460 <grid_module_po16_revb_hardware_init+0x30>)
    3434:	4c0b      	ldr	r4, [pc, #44]	; (3464 <grid_module_po16_revb_hardware_init+0x34>)
    3436:	463b      	mov	r3, r7
    3438:	2200      	movs	r2, #0
    343a:	4611      	mov	r1, r2
    343c:	4620      	mov	r0, r4
    343e:	4e0a      	ldr	r6, [pc, #40]	; (3468 <grid_module_po16_revb_hardware_init+0x38>)
    3440:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    3442:	4d0a      	ldr	r5, [pc, #40]	; (346c <grid_module_po16_revb_hardware_init+0x3c>)
    3444:	463b      	mov	r3, r7
    3446:	2200      	movs	r2, #0
    3448:	4611      	mov	r1, r2
    344a:	4628      	mov	r0, r5
    344c:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    344e:	2100      	movs	r1, #0
    3450:	4620      	mov	r0, r4
    3452:	4c07      	ldr	r4, [pc, #28]	; (3470 <grid_module_po16_revb_hardware_init+0x40>)
    3454:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    3456:	2100      	movs	r1, #0
    3458:	4628      	mov	r0, r5
    345a:	47a0      	blx	r4
    345c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    345e:	bf00      	nop
    3460:	00003219 	.word	0x00003219
    3464:	20001058 	.word	0x20001058
    3468:	00004519 	.word	0x00004519
    346c:	2000122c 	.word	0x2000122c
    3470:	000044d9 	.word	0x000044d9

00003474 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    3474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3478:	b096      	sub	sp, #88	; 0x58
    347a:	4681      	mov	r9, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    347c:	2307      	movs	r3, #7
    347e:	220e      	movs	r2, #14
    3480:	2105      	movs	r1, #5
    3482:	2010      	movs	r0, #16
    3484:	4c24      	ldr	r4, [pc, #144]	; (3518 <grid_module_po16_revb_init+0xa4>)
    3486:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    3488:	2110      	movs	r1, #16
    348a:	4824      	ldr	r0, [pc, #144]	; (351c <grid_module_po16_revb_init+0xa8>)
    348c:	4b24      	ldr	r3, [pc, #144]	; (3520 <grid_module_po16_revb_init+0xac>)
    348e:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16);
    3490:	2110      	movs	r1, #16
    3492:	4648      	mov	r0, r9
    3494:	4b23      	ldr	r3, [pc, #140]	; (3524 <grid_module_po16_revb_init+0xb0>)
    3496:	4798      	blx	r3
    3498:	2500      	movs	r5, #0
	
	
	for(uint8_t i=0; i<16; i++){
		
		uint8_t payload_template[30] = {0};
    349a:	462c      	mov	r4, r5
    349c:	4f22      	ldr	r7, [pc, #136]	; (3528 <grid_module_po16_revb_init+0xb4>)
		

		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    349e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3540 <grid_module_po16_revb_init+0xcc>
		uint8_t payload_template[30] = {0};
    34a2:	221e      	movs	r2, #30
    34a4:	4621      	mov	r1, r4
    34a6:	a80e      	add	r0, sp, #56	; 0x38
    34a8:	47b8      	blx	r7
		sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c%c%02x%02x%02x%02x%02x%c",
    34aa:	2303      	movs	r3, #3
    34ac:	930b      	str	r3, [sp, #44]	; 0x2c
    34ae:	940a      	str	r4, [sp, #40]	; 0x28
    34b0:	9509      	str	r5, [sp, #36]	; 0x24
    34b2:	2263      	movs	r2, #99	; 0x63
    34b4:	9208      	str	r2, [sp, #32]
    34b6:	9407      	str	r4, [sp, #28]
    34b8:	9306      	str	r3, [sp, #24]
    34ba:	2602      	movs	r6, #2
    34bc:	9605      	str	r6, [sp, #20]
    34be:	9304      	str	r3, [sp, #16]
    34c0:	9403      	str	r4, [sp, #12]
    34c2:	9502      	str	r5, [sp, #8]
    34c4:	23b0      	movs	r3, #176	; 0xb0
    34c6:	9301      	str	r3, [sp, #4]
    34c8:	9400      	str	r4, [sp, #0]
    34ca:	4623      	mov	r3, r4
    34cc:	4632      	mov	r2, r6
    34ce:	4641      	mov	r1, r8
    34d0:	a80e      	add	r0, sp, #56	; 0x38
    34d2:	f8df a070 	ldr.w	sl, [pc, #112]	; 3544 <grid_module_po16_revb_init+0xd0>
    34d6:	47d0      	blx	sl
		);
			
		

		
		uint8_t payload_length = strlen(payload_template);
    34d8:	a80e      	add	r0, sp, #56	; 0x38
    34da:	4b14      	ldr	r3, [pc, #80]	; (352c <grid_module_po16_revb_init+0xb8>)
    34dc:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    34de:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		helper_template[1] = 0;
    34e2:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, GRID_REPORT_TYPE_BROADCAST, payload_template, payload_length, helper_template, helper_length);
    34e6:	9602      	str	r6, [sp, #8]
    34e8:	ab0d      	add	r3, sp, #52	; 0x34
    34ea:	9301      	str	r3, [sp, #4]
    34ec:	b2c0      	uxtb	r0, r0
    34ee:	9000      	str	r0, [sp, #0]
    34f0:	ab0e      	add	r3, sp, #56	; 0x38
    34f2:	4632      	mov	r2, r6
    34f4:	b2e9      	uxtb	r1, r5
    34f6:	4648      	mov	r0, r9
    34f8:	4e0d      	ldr	r6, [pc, #52]	; (3530 <grid_module_po16_revb_init+0xbc>)
    34fa:	47b0      	blx	r6
    34fc:	3501      	adds	r5, #1
	for(uint8_t i=0; i<16; i++){
    34fe:	2d10      	cmp	r5, #16
    3500:	d1cf      	bne.n	34a2 <grid_module_po16_revb_init+0x2e>
		
	}
	
	grid_report_sys_init(mod);
    3502:	4648      	mov	r0, r9
    3504:	4b0b      	ldr	r3, [pc, #44]	; (3534 <grid_module_po16_revb_init+0xc0>)
    3506:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    3508:	4b0b      	ldr	r3, [pc, #44]	; (3538 <grid_module_po16_revb_init+0xc4>)
    350a:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    350c:	4b0b      	ldr	r3, [pc, #44]	; (353c <grid_module_po16_revb_init+0xc8>)
    350e:	4798      	blx	r3
	
    3510:	b016      	add	sp, #88	; 0x58
    3512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3516:	bf00      	nop
    3518:	0000119d 	.word	0x0000119d
    351c:	20003628 	.word	0x20003628
    3520:	00002359 	.word	0x00002359
    3524:	00003d0d 	.word	0x00003d0d
    3528:	0000bdb7 	.word	0x0000bdb7
    352c:	0000c1ed 	.word	0x0000c1ed
    3530:	00003dd1 	.word	0x00003dd1
    3534:	00003df5 	.word	0x00003df5
    3538:	00003431 	.word	0x00003431
    353c:	000031f9 	.word	0x000031f9
    3540:	0000d350 	.word	0x0000d350
    3544:	0000c1a5 	.word	0x0000c1a5

00003548 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    3548:	8982      	ldrh	r2, [r0, #12]
    354a:	b142      	cbz	r2, 355e <tx_cb_USART_GRID+0x16>
    354c:	f100 0327 	add.w	r3, r0, #39	; 0x27
    3550:	3227      	adds	r2, #39	; 0x27
    3552:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    3554:	2100      	movs	r1, #0
    3556:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    355a:	4293      	cmp	r3, r2
    355c:	d1fb      	bne.n	3556 <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    355e:	2300      	movs	r3, #0
    3560:	8183      	strh	r3, [r0, #12]
    3562:	4770      	bx	lr

00003564 <tx_cb_USART_GRID_W>:
{
    3564:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    3566:	4802      	ldr	r0, [pc, #8]	; (3570 <tx_cb_USART_GRID_W+0xc>)
    3568:	4b02      	ldr	r3, [pc, #8]	; (3574 <tx_cb_USART_GRID_W+0x10>)
    356a:	4798      	blx	r3
    356c:	bd08      	pop	{r3, pc}
    356e:	bf00      	nop
    3570:	200021cc 	.word	0x200021cc
    3574:	00003549 	.word	0x00003549

00003578 <tx_cb_USART_GRID_S>:
{
    3578:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    357a:	4802      	ldr	r0, [pc, #8]	; (3584 <tx_cb_USART_GRID_S+0xc>)
    357c:	4b02      	ldr	r3, [pc, #8]	; (3588 <tx_cb_USART_GRID_S+0x10>)
    357e:	4798      	blx	r3
    3580:	bd08      	pop	{r3, pc}
    3582:	bf00      	nop
    3584:	200026f0 	.word	0x200026f0
    3588:	00003549 	.word	0x00003549

0000358c <tx_cb_USART_GRID_E>:
{
    358c:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    358e:	4802      	ldr	r0, [pc, #8]	; (3598 <tx_cb_USART_GRID_E+0xc>)
    3590:	4b02      	ldr	r3, [pc, #8]	; (359c <tx_cb_USART_GRID_E+0x10>)
    3592:	4798      	blx	r3
    3594:	bd08      	pop	{r3, pc}
    3596:	bf00      	nop
    3598:	20003114 	.word	0x20003114
    359c:	00003549 	.word	0x00003549

000035a0 <tx_cb_USART_GRID_N>:
{
    35a0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    35a2:	4802      	ldr	r0, [pc, #8]	; (35ac <tx_cb_USART_GRID_N+0xc>)
    35a4:	4b02      	ldr	r3, [pc, #8]	; (35b0 <tx_cb_USART_GRID_N+0x10>)
    35a6:	4798      	blx	r3
    35a8:	bd08      	pop	{r3, pc}
    35aa:	bf00      	nop
    35ac:	200012ac 	.word	0x200012ac
    35b0:	00003549 	.word	0x00003549

000035b4 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    35b4:	b508      	push	{r3, lr}
    35b6:	7a83      	ldrb	r3, [r0, #10]
    35b8:	011b      	lsls	r3, r3, #4
    35ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    35be:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    35c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    35c4:	f022 0202 	bic.w	r2, r2, #2
    35c8:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    35ca:	2100      	movs	r1, #0
    35cc:	7a80      	ldrb	r0, [r0, #10]
    35ce:	4b01      	ldr	r3, [pc, #4]	; (35d4 <grid_sys_port_reset_dma+0x20>)
    35d0:	4798      	blx	r3
    35d2:	bd08      	pop	{r3, pc}
    35d4:	00006295 	.word	0x00006295

000035d8 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    35d8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    35da:	4802      	ldr	r0, [pc, #8]	; (35e4 <dma_transfer_complete_w_cb+0xc>)
    35dc:	4b02      	ldr	r3, [pc, #8]	; (35e8 <dma_transfer_complete_w_cb+0x10>)
    35de:	4798      	blx	r3
    35e0:	bd08      	pop	{r3, pc}
    35e2:	bf00      	nop
    35e4:	200021cc 	.word	0x200021cc
    35e8:	000035b5 	.word	0x000035b5

000035ec <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    35ec:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    35ee:	4802      	ldr	r0, [pc, #8]	; (35f8 <dma_transfer_complete_s_cb+0xc>)
    35f0:	4b02      	ldr	r3, [pc, #8]	; (35fc <dma_transfer_complete_s_cb+0x10>)
    35f2:	4798      	blx	r3
    35f4:	bd08      	pop	{r3, pc}
    35f6:	bf00      	nop
    35f8:	200026f0 	.word	0x200026f0
    35fc:	000035b5 	.word	0x000035b5

00003600 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    3600:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3602:	4802      	ldr	r0, [pc, #8]	; (360c <dma_transfer_complete_e_cb+0xc>)
    3604:	4b02      	ldr	r3, [pc, #8]	; (3610 <dma_transfer_complete_e_cb+0x10>)
    3606:	4798      	blx	r3
    3608:	bd08      	pop	{r3, pc}
    360a:	bf00      	nop
    360c:	20003114 	.word	0x20003114
    3610:	000035b5 	.word	0x000035b5

00003614 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    3614:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    3616:	4802      	ldr	r0, [pc, #8]	; (3620 <dma_transfer_complete_n_cb+0xc>)
    3618:	4b02      	ldr	r3, [pc, #8]	; (3624 <dma_transfer_complete_n_cb+0x10>)
    361a:	4798      	blx	r3
    361c:	bd08      	pop	{r3, pc}
    361e:	bf00      	nop
    3620:	200012ac 	.word	0x200012ac
    3624:	000035b5 	.word	0x000035b5

00003628 <grid_sys_uart_init>:

}

void grid_sys_uart_init(){
    3628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    362c:	4b2f      	ldr	r3, [pc, #188]	; (36ec <grid_sys_uart_init+0xc4>)
    362e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3632:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3636:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    363a:	f042 0204 	orr.w	r2, r2, #4
    363e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3642:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3646:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    364a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    364e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    3652:	f042 0204 	orr.w	r2, r2, #4
    3656:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    365a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    365e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3662:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3666:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    366a:	f042 0204 	orr.w	r2, r2, #4
    366e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3672:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3676:	f44f 7100 	mov.w	r1, #512	; 0x200
    367a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    367e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    3682:	f042 0204 	orr.w	r2, r2, #4
    3686:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    368a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	


	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    368e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3728 <grid_sys_uart_init+0x100>
    3692:	4a17      	ldr	r2, [pc, #92]	; (36f0 <grid_sys_uart_init+0xc8>)
    3694:	2101      	movs	r1, #1
    3696:	4640      	mov	r0, r8
    3698:	4c16      	ldr	r4, [pc, #88]	; (36f4 <grid_sys_uart_init+0xcc>)
    369a:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    369c:	4f16      	ldr	r7, [pc, #88]	; (36f8 <grid_sys_uart_init+0xd0>)
    369e:	4a17      	ldr	r2, [pc, #92]	; (36fc <grid_sys_uart_init+0xd4>)
    36a0:	2101      	movs	r1, #1
    36a2:	4638      	mov	r0, r7
    36a4:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    36a6:	4e16      	ldr	r6, [pc, #88]	; (3700 <grid_sys_uart_init+0xd8>)
    36a8:	4a16      	ldr	r2, [pc, #88]	; (3704 <grid_sys_uart_init+0xdc>)
    36aa:	2101      	movs	r1, #1
    36ac:	4630      	mov	r0, r6
    36ae:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    36b0:	4d15      	ldr	r5, [pc, #84]	; (3708 <grid_sys_uart_init+0xe0>)
    36b2:	4a16      	ldr	r2, [pc, #88]	; (370c <grid_sys_uart_init+0xe4>)
    36b4:	2101      	movs	r1, #1
    36b6:	4628      	mov	r0, r5
    36b8:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_NORTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_N);
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);
	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    36ba:	4915      	ldr	r1, [pc, #84]	; (3710 <grid_sys_uart_init+0xe8>)
    36bc:	4640      	mov	r0, r8
    36be:	4c15      	ldr	r4, [pc, #84]	; (3714 <grid_sys_uart_init+0xec>)
    36c0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    36c2:	4915      	ldr	r1, [pc, #84]	; (3718 <grid_sys_uart_init+0xf0>)
    36c4:	4638      	mov	r0, r7
    36c6:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    36c8:	4914      	ldr	r1, [pc, #80]	; (371c <grid_sys_uart_init+0xf4>)
    36ca:	4630      	mov	r0, r6
    36cc:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    36ce:	4914      	ldr	r1, [pc, #80]	; (3720 <grid_sys_uart_init+0xf8>)
    36d0:	4628      	mov	r0, r5
    36d2:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    36d4:	4640      	mov	r0, r8
    36d6:	4c13      	ldr	r4, [pc, #76]	; (3724 <grid_sys_uart_init+0xfc>)
    36d8:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    36da:	4638      	mov	r0, r7
    36dc:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    36de:	4630      	mov	r0, r6
    36e0:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    36e2:	4628      	mov	r0, r5
    36e4:	47a0      	blx	r4
    36e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36ea:	bf00      	nop
    36ec:	41008000 	.word	0x41008000
    36f0:	000035a1 	.word	0x000035a1
    36f4:	000052d1 	.word	0x000052d1
    36f8:	20001084 	.word	0x20001084
    36fc:	0000358d 	.word	0x0000358d
    3700:	200011dc 	.word	0x200011dc
    3704:	00003579 	.word	0x00003579
    3708:	2000118c 	.word	0x2000118c
    370c:	00003565 	.word	0x00003565
    3710:	20001d18 	.word	0x20001d18
    3714:	000052a9 	.word	0x000052a9
    3718:	200026dc 	.word	0x200026dc
    371c:	20002c00 	.word	0x20002c00
    3720:	20003650 	.word	0x20003650
    3724:	0000527d 	.word	0x0000527d
    3728:	200010d8 	.word	0x200010d8

0000372c <grid_sys_dma_rx_init_one>:



}

void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    372c:	b5f0      	push	{r4, r5, r6, r7, lr}
    372e:	b083      	sub	sp, #12
    3730:	4605      	mov	r5, r0
    3732:	460f      	mov	r7, r1
    3734:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    3736:	7a84      	ldrb	r4, [r0, #10]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    3738:	6843      	ldr	r3, [r0, #4]
    373a:	6a19      	ldr	r1, [r3, #32]
    373c:	3128      	adds	r1, #40	; 0x28
    373e:	4620      	mov	r0, r4
    3740:	4b0d      	ldr	r3, [pc, #52]	; (3778 <grid_sys_dma_rx_init_one+0x4c>)
    3742:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    3744:	f505 7120 	add.w	r1, r5, #640	; 0x280
    3748:	4620      	mov	r0, r4
    374a:	4b0c      	ldr	r3, [pc, #48]	; (377c <grid_sys_dma_rx_init_one+0x50>)
    374c:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    374e:	4639      	mov	r1, r7
    3750:	4620      	mov	r0, r4
    3752:	4b0b      	ldr	r3, [pc, #44]	; (3780 <grid_sys_dma_rx_init_one+0x54>)
    3754:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    3756:	4621      	mov	r1, r4
    3758:	a801      	add	r0, sp, #4
    375a:	4b0a      	ldr	r3, [pc, #40]	; (3784 <grid_sys_dma_rx_init_one+0x58>)
    375c:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    375e:	9b01      	ldr	r3, [sp, #4]
    3760:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    3762:	2201      	movs	r2, #1
    3764:	2100      	movs	r1, #0
    3766:	4620      	mov	r0, r4
    3768:	4b07      	ldr	r3, [pc, #28]	; (3788 <grid_sys_dma_rx_init_one+0x5c>)
    376a:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    376c:	2100      	movs	r1, #0
    376e:	4620      	mov	r0, r4
    3770:	4b06      	ldr	r3, [pc, #24]	; (378c <grid_sys_dma_rx_init_one+0x60>)
    3772:	4798      	blx	r3
	

}
    3774:	b003      	add	sp, #12
    3776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3778:	00006211 	.word	0x00006211
    377c:	00006201 	.word	0x00006201
    3780:	0000623d 	.word	0x0000623d
    3784:	000062d5 	.word	0x000062d5
    3788:	000061ad 	.word	0x000061ad
    378c:	00006295 	.word	0x00006295

00003790 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    3790:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    3792:	4a10      	ldr	r2, [pc, #64]	; (37d4 <grid_sys_dma_rx_init+0x44>)
    3794:	f44f 7116 	mov.w	r1, #600	; 0x258
    3798:	480f      	ldr	r0, [pc, #60]	; (37d8 <grid_sys_dma_rx_init+0x48>)
    379a:	4c10      	ldr	r4, [pc, #64]	; (37dc <grid_sys_dma_rx_init+0x4c>)
    379c:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    379e:	4a10      	ldr	r2, [pc, #64]	; (37e0 <grid_sys_dma_rx_init+0x50>)
    37a0:	f44f 7116 	mov.w	r1, #600	; 0x258
    37a4:	480f      	ldr	r0, [pc, #60]	; (37e4 <grid_sys_dma_rx_init+0x54>)
    37a6:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    37a8:	4a0f      	ldr	r2, [pc, #60]	; (37e8 <grid_sys_dma_rx_init+0x58>)
    37aa:	f44f 7116 	mov.w	r1, #600	; 0x258
    37ae:	480f      	ldr	r0, [pc, #60]	; (37ec <grid_sys_dma_rx_init+0x5c>)
    37b0:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    37b2:	4a0f      	ldr	r2, [pc, #60]	; (37f0 <grid_sys_dma_rx_init+0x60>)
    37b4:	f44f 7116 	mov.w	r1, #600	; 0x258
    37b8:	480e      	ldr	r0, [pc, #56]	; (37f4 <grid_sys_dma_rx_init+0x64>)
    37ba:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37bc:	4b0e      	ldr	r3, [pc, #56]	; (37f8 <grid_sys_dma_rx_init+0x68>)
    37be:	2200      	movs	r2, #0
    37c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    37c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    37c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    37cc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    37d0:	bd10      	pop	{r4, pc}
    37d2:	bf00      	nop
    37d4:	00003615 	.word	0x00003615
    37d8:	200012ac 	.word	0x200012ac
    37dc:	0000372d 	.word	0x0000372d
    37e0:	00003601 	.word	0x00003601
    37e4:	20003114 	.word	0x20003114
    37e8:	000035ed 	.word	0x000035ed
    37ec:	200026f0 	.word	0x200026f0
    37f0:	000035d9 	.word	0x000035d9
    37f4:	200021cc 	.word	0x200021cc
    37f8:	e000e100 	.word	0xe000e100

000037fc <grid_sys_init>:
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}

void grid_sys_init(struct grid_sys_model* mod){
    37fc:	b510      	push	{r4, lr}
	
	mod->bank_select = 0;
    37fe:	2200      	movs	r2, #0
    3800:	7242      	strb	r2, [r0, #9]
	
	mod->bank_color_r[0] = 200;
    3802:	23c8      	movs	r3, #200	; 0xc8
    3804:	7283      	strb	r3, [r0, #10]
	mod->bank_color_g[0] = 100;
    3806:	2164      	movs	r1, #100	; 0x64
    3808:	7381      	strb	r1, [r0, #14]
	mod->bank_color_b[0] = 0;
    380a:	7482      	strb	r2, [r0, #18]
	
	mod->bank_color_r[1] = 0;
    380c:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[1] = 100;
    380e:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[1] = 200;
    3810:	74c3      	strb	r3, [r0, #19]
	
	mod->bank_color_r[2] = 50;
    3812:	2432      	movs	r4, #50	; 0x32
    3814:	7304      	strb	r4, [r0, #12]
	mod->bank_color_g[2] = 200;
    3816:	7403      	strb	r3, [r0, #16]
	mod->bank_color_b[2] = 50;
    3818:	7504      	strb	r4, [r0, #20]
	
	mod->bank_color_r[3] = 100;
    381a:	7341      	strb	r1, [r0, #13]
	mod->bank_color_g[3] = 0;
    381c:	7442      	strb	r2, [r0, #17]
	mod->bank_color_b[3] = 200;
    381e:	7543      	strb	r3, [r0, #21]
	
	
	grid_port_init_all();
    3820:	4b03      	ldr	r3, [pc, #12]	; (3830 <grid_sys_init+0x34>)
    3822:	4798      	blx	r3
	
	grid_sys_uart_init();
    3824:	4b03      	ldr	r3, [pc, #12]	; (3834 <grid_sys_init+0x38>)
    3826:	4798      	blx	r3
	grid_sys_dma_rx_init();
    3828:	4b03      	ldr	r3, [pc, #12]	; (3838 <grid_sys_init+0x3c>)
    382a:	4798      	blx	r3
    382c:	bd10      	pop	{r4, pc}
    382e:	bf00      	nop
    3830:	000015e9 	.word	0x000015e9
    3834:	00003629 	.word	0x00003629
    3838:	00003791 	.word	0x00003791

0000383c <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    383c:	6980      	ldr	r0, [r0, #24]
    383e:	4770      	bx	lr

00003840 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    3840:	6980      	ldr	r0, [r0, #24]
	
	

}
    3842:	1a40      	subs	r0, r0, r1
    3844:	4770      	bx	lr

00003846 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    3846:	6983      	ldr	r3, [r0, #24]
    3848:	3301      	adds	r3, #1
    384a:	6183      	str	r3, [r0, #24]
    384c:	4770      	bx	lr

0000384e <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    384e:	7a00      	ldrb	r0, [r0, #8]
    3850:	4770      	bx	lr

00003852 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    3852:	2300      	movs	r3, #0
    3854:	7203      	strb	r3, [r0, #8]
    3856:	4770      	bx	lr

00003858 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    3858:	7983      	ldrb	r3, [r0, #6]
    385a:	b123      	cbz	r3, 3866 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    385c:	2b01      	cmp	r3, #1
    385e:	d00f      	beq.n	3880 <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    3860:	2b02      	cmp	r3, #2
    3862:	d015      	beq.n	3890 <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    3864:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    3866:	8880      	ldrh	r0, [r0, #4]
    3868:	0840      	lsrs	r0, r0, #1
    386a:	387d      	subs	r0, #125	; 0x7d
    386c:	2800      	cmp	r0, #0
    386e:	bfb8      	it	lt
    3870:	4240      	neglt	r0, r0
    3872:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    3876:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    387a:	f3c0 0047 	ubfx	r0, r0, #1, #8
    387e:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    3880:	8880      	ldrh	r0, [r0, #4]
    3882:	4b06      	ldr	r3, [pc, #24]	; (389c <grid_sys_alert_get_color_intensity+0x44>)
    3884:	fba3 3000 	umull	r3, r0, r3, r0
    3888:	f340 1000 	sbfx	r0, r0, #4, #1
    388c:	b2c0      	uxtb	r0, r0
    388e:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    3890:	8880      	ldrh	r0, [r0, #4]
    3892:	2864      	cmp	r0, #100	; 0x64
    3894:	bf8c      	ite	hi
    3896:	20ff      	movhi	r0, #255	; 0xff
    3898:	2000      	movls	r0, #0
    389a:	4770      	bx	lr
    389c:	10624dd3 	.word	0x10624dd3

000038a0 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    38a0:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    38a2:	2401      	movs	r4, #1
    38a4:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    38a6:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    38a8:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    38aa:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    38ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    38b0:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    38b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    38b6:	7183      	strb	r3, [r0, #6]
	
}
    38b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    38bc:	4770      	bx	lr

000038be <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    38be:	7840      	ldrb	r0, [r0, #1]
    38c0:	4770      	bx	lr

000038c2 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    38c2:	7880      	ldrb	r0, [r0, #2]
    38c4:	4770      	bx	lr

000038c6 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    38c6:	78c0      	ldrb	r0, [r0, #3]
    38c8:	4770      	bx	lr

000038ca <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    38ca:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    38cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    38d0:	b2d8      	uxtb	r0, r3
    38d2:	2809      	cmp	r0, #9
    38d4:	d90d      	bls.n	38f2 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    38d6:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    38da:	b2db      	uxtb	r3, r3
    38dc:	2b05      	cmp	r3, #5
    38de:	d903      	bls.n	38e8 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    38e0:	b131      	cbz	r1, 38f0 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    38e2:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    38e4:	2000      	movs	r0, #0
    38e6:	4770      	bx	lr
		result = ascii - 97 + 10;
    38e8:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    38ec:	b2c0      	uxtb	r0, r0
    38ee:	4770      	bx	lr
	uint8_t result = 0;
    38f0:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    38f2:	4770      	bx	lr

000038f4 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    38f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    38f8:	b1c1      	cbz	r1, 392c <grid_sys_read_hex_string_value+0x38>
    38fa:	4690      	mov	r8, r2
    38fc:	1e45      	subs	r5, r0, #1
    38fe:	1e4b      	subs	r3, r1, #1
    3900:	009c      	lsls	r4, r3, #2
    3902:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    3906:	3f02      	subs	r7, #2
    3908:	b2db      	uxtb	r3, r3
    390a:	1aff      	subs	r7, r7, r3
    390c:	00bf      	lsls	r7, r7, #2
    390e:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    3910:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3930 <grid_sys_read_hex_string_value+0x3c>
    3914:	4641      	mov	r1, r8
    3916:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    391a:	47c8      	blx	r9
    391c:	40a0      	lsls	r0, r4
    391e:	4406      	add	r6, r0
    3920:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    3922:	42bc      	cmp	r4, r7
    3924:	d1f6      	bne.n	3914 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    3926:	4630      	mov	r0, r6
    3928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    392c:	2600      	movs	r6, #0
	return result;
    392e:	e7fa      	b.n	3926 <grid_sys_read_hex_string_value+0x32>
    3930:	000038cb 	.word	0x000038cb

00003934 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    3934:	b530      	push	{r4, r5, lr}
    3936:	b085      	sub	sp, #20
    3938:	4605      	mov	r5, r0
    393a:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    393c:	4909      	ldr	r1, [pc, #36]	; (3964 <grid_sys_write_hex_string_value+0x30>)
    393e:	a801      	add	r0, sp, #4
    3940:	4b09      	ldr	r3, [pc, #36]	; (3968 <grid_sys_write_hex_string_value+0x34>)
    3942:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    3944:	b164      	cbz	r4, 3960 <grid_sys_write_hex_string_value+0x2c>
    3946:	ab04      	add	r3, sp, #16
    3948:	1b1a      	subs	r2, r3, r4
    394a:	3a05      	subs	r2, #5
    394c:	1e6b      	subs	r3, r5, #1
    394e:	1e60      	subs	r0, r4, #1
    3950:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    3954:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3958:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    395c:	4283      	cmp	r3, r0
    395e:	d1f9      	bne.n	3954 <grid_sys_write_hex_string_value+0x20>
	}

}
    3960:	b005      	add	sp, #20
    3962:	bd30      	pop	{r4, r5, pc}
    3964:	0000d384 	.word	0x0000d384
    3968:	0000c1a5 	.word	0x0000c1a5

0000396c <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    396c:	4b34      	ldr	r3, [pc, #208]	; (3a40 <grid_sys_get_hwcfg+0xd4>)
    396e:	681b      	ldr	r3, [r3, #0]
    3970:	f1b3 3fff 	cmp.w	r3, #4294967295
    3974:	d002      	beq.n	397c <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    3976:	4b32      	ldr	r3, [pc, #200]	; (3a40 <grid_sys_get_hwcfg+0xd4>)
    3978:	6818      	ldr	r0, [r3, #0]
    397a:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    397c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3980:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3982:	4b30      	ldr	r3, [pc, #192]	; (3a44 <grid_sys_get_hwcfg+0xd8>)
    3984:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    398c:	492e      	ldr	r1, [pc, #184]	; (3a48 <grid_sys_get_hwcfg+0xdc>)
    398e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3992:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3996:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    399a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    399e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    39a2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    39a6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    39aa:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    39ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    39b2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    39b6:	4925      	ldr	r1, [pc, #148]	; (3a4c <grid_sys_get_hwcfg+0xe0>)
    39b8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    39bc:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    39c0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    39c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    39c8:	2001      	movs	r0, #1
    39ca:	4b21      	ldr	r3, [pc, #132]	; (3a50 <grid_sys_get_hwcfg+0xe4>)
    39cc:	4798      	blx	r3
    39ce:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    39d0:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    39d2:	4d1c      	ldr	r5, [pc, #112]	; (3a44 <grid_sys_get_hwcfg+0xd8>)
    39d4:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    39d8:	4f1d      	ldr	r7, [pc, #116]	; (3a50 <grid_sys_get_hwcfg+0xe4>)
    39da:	e00c      	b.n	39f6 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    39dc:	2e07      	cmp	r6, #7
    39de:	d027      	beq.n	3a30 <grid_sys_get_hwcfg+0xc4>
    39e0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    39e4:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    39e8:	2001      	movs	r0, #1
    39ea:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    39ec:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    39f0:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    39f2:	2e08      	cmp	r6, #8
    39f4:	d01c      	beq.n	3a30 <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    39f6:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    39fa:	2001      	movs	r0, #1
    39fc:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    39fe:	a801      	add	r0, sp, #4
    3a00:	4b14      	ldr	r3, [pc, #80]	; (3a54 <grid_sys_get_hwcfg+0xe8>)
    3a02:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3a04:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3a08:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3a0c:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3a10:	405c      	eors	r4, r3
    3a12:	4014      	ands	r4, r2
    3a14:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3a16:	a801      	add	r0, sp, #4
    3a18:	4b0f      	ldr	r3, [pc, #60]	; (3a58 <grid_sys_get_hwcfg+0xec>)
    3a1a:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    3a1c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3a20:	d0dc      	beq.n	39dc <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    3a22:	2301      	movs	r3, #1
    3a24:	40b3      	lsls	r3, r6
    3a26:	ea43 0808 	orr.w	r8, r3, r8
    3a2a:	fa5f f888 	uxtb.w	r8, r8
    3a2e:	e7d5      	b.n	39dc <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    3a30:	4b03      	ldr	r3, [pc, #12]	; (3a40 <grid_sys_get_hwcfg+0xd4>)
    3a32:	f8c3 8000 	str.w	r8, [r3]
}
    3a36:	4b02      	ldr	r3, [pc, #8]	; (3a40 <grid_sys_get_hwcfg+0xd4>)
    3a38:	6818      	ldr	r0, [r3, #0]
    3a3a:	b003      	add	sp, #12
    3a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3a40:	20000354 	.word	0x20000354
    3a44:	41008000 	.word	0x41008000
    3a48:	40002000 	.word	0x40002000
    3a4c:	40028000 	.word	0x40028000
    3a50:	00004721 	.word	0x00004721
    3a54:	000046a1 	.word	0x000046a1
    3a58:	000046af 	.word	0x000046af

00003a5c <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    3a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a60:	b085      	sub	sp, #20
    3a62:	4681      	mov	r9, r0
    3a64:	460c      	mov	r4, r1
	uint32_t hwtype = grid_sys_get_hwcfg();
    3a66:	4b53      	ldr	r3, [pc, #332]	; (3bb4 <grid_sys_bank_select+0x158>)
    3a68:	4798      	blx	r3
    3a6a:	4682      	mov	sl, r0
	if (banknumber == 255){
    3a6c:	2cff      	cmp	r4, #255	; 0xff
    3a6e:	d008      	beq.n	3a82 <grid_sys_bank_select+0x26>
		mod->bank_select = banknumber%4;
    3a70:	f004 0403 	and.w	r4, r4, #3
    3a74:	f889 4009 	strb.w	r4, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3a78:	2500      	movs	r5, #0
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3a7a:	f8df b14c 	ldr.w	fp, [pc, #332]	; 3bc8 <grid_sys_bank_select+0x16c>
    3a7e:	9503      	str	r5, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3a80:	e064      	b.n	3b4c <grid_sys_bank_select+0xf0>
		mod->bank_select = 255;
    3a82:	23ff      	movs	r3, #255	; 0xff
    3a84:	f889 3009 	strb.w	r3, [r9, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3a88:	2500      	movs	r5, #0
    3a8a:	f8df b138 	ldr.w	fp, [pc, #312]	; 3bc4 <grid_sys_bank_select+0x168>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3a8e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3bc8 <grid_sys_bank_select+0x16c>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3a92:	e01c      	b.n	3ace <grid_sys_bank_select+0x72>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3a94:	f04f 09ff 	mov.w	r9, #255	; 0xff
    3a98:	f8cd 9004 	str.w	r9, [sp, #4]
    3a9c:	2600      	movs	r6, #0
    3a9e:	9600      	str	r6, [sp, #0]
    3aa0:	4633      	mov	r3, r6
    3aa2:	4632      	mov	r2, r6
    3aa4:	4621      	mov	r1, r4
    3aa6:	4658      	mov	r0, fp
    3aa8:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3aaa:	9601      	str	r6, [sp, #4]
    3aac:	2305      	movs	r3, #5
    3aae:	9300      	str	r3, [sp, #0]
    3ab0:	4633      	mov	r3, r6
    3ab2:	4632      	mov	r2, r6
    3ab4:	4621      	mov	r1, r4
    3ab6:	4658      	mov	r0, fp
    3ab8:	4f3f      	ldr	r7, [pc, #252]	; (3bb8 <grid_sys_bank_select+0x15c>)
    3aba:	47b8      	blx	r7
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3abc:	9601      	str	r6, [sp, #4]
    3abe:	9600      	str	r6, [sp, #0]
    3ac0:	464b      	mov	r3, r9
    3ac2:	4632      	mov	r2, r6
    3ac4:	4621      	mov	r1, r4
    3ac6:	4658      	mov	r0, fp
    3ac8:	4c3c      	ldr	r4, [pc, #240]	; (3bbc <grid_sys_bank_select+0x160>)
    3aca:	47a0      	blx	r4
    3acc:	3501      	adds	r5, #1
    3ace:	b2ec      	uxtb	r4, r5
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3ad0:	4658      	mov	r0, fp
    3ad2:	4b3b      	ldr	r3, [pc, #236]	; (3bc0 <grid_sys_bank_select+0x164>)
    3ad4:	4798      	blx	r3
    3ad6:	42a0      	cmp	r0, r4
    3ad8:	d968      	bls.n	3bac <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3ada:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3ade:	d0d9      	beq.n	3a94 <grid_sys_bank_select+0x38>
				grid_led_set_min(&grid_led_state, i, 0, r/20, g/20, b/20);
    3ae0:	2306      	movs	r3, #6
    3ae2:	9301      	str	r3, [sp, #4]
    3ae4:	9300      	str	r3, [sp, #0]
    3ae6:	2200      	movs	r2, #0
    3ae8:	4621      	mov	r1, r4
    3aea:	4658      	mov	r0, fp
    3aec:	47c0      	blx	r8
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3aee:	233f      	movs	r3, #63	; 0x3f
    3af0:	9301      	str	r3, [sp, #4]
    3af2:	9300      	str	r3, [sp, #0]
    3af4:	2200      	movs	r2, #0
    3af6:	4621      	mov	r1, r4
    3af8:	4658      	mov	r0, fp
    3afa:	4e2f      	ldr	r6, [pc, #188]	; (3bb8 <grid_sys_bank_select+0x15c>)
    3afc:	47b0      	blx	r6
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3afe:	237f      	movs	r3, #127	; 0x7f
    3b00:	9301      	str	r3, [sp, #4]
    3b02:	9300      	str	r3, [sp, #0]
    3b04:	2200      	movs	r2, #0
    3b06:	4621      	mov	r1, r4
    3b08:	4658      	mov	r0, fp
    3b0a:	4c2c      	ldr	r4, [pc, #176]	; (3bbc <grid_sys_bank_select+0x160>)
    3b0c:	47a0      	blx	r4
    3b0e:	e7dd      	b.n	3acc <grid_sys_bank_select+0x70>
				grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    3b10:	27ff      	movs	r7, #255	; 0xff
    3b12:	9701      	str	r7, [sp, #4]
    3b14:	2600      	movs	r6, #0
    3b16:	9600      	str	r6, [sp, #0]
    3b18:	4633      	mov	r3, r6
    3b1a:	4632      	mov	r2, r6
    3b1c:	4621      	mov	r1, r4
    3b1e:	4829      	ldr	r0, [pc, #164]	; (3bc4 <grid_sys_bank_select+0x168>)
    3b20:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    3b22:	9601      	str	r6, [sp, #4]
    3b24:	2305      	movs	r3, #5
    3b26:	9300      	str	r3, [sp, #0]
    3b28:	4633      	mov	r3, r6
    3b2a:	4632      	mov	r2, r6
    3b2c:	4621      	mov	r1, r4
    3b2e:	4825      	ldr	r0, [pc, #148]	; (3bc4 <grid_sys_bank_select+0x168>)
    3b30:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3bb8 <grid_sys_bank_select+0x15c>
    3b34:	47c0      	blx	r8
				grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    3b36:	9601      	str	r6, [sp, #4]
    3b38:	9600      	str	r6, [sp, #0]
    3b3a:	463b      	mov	r3, r7
    3b3c:	4632      	mov	r2, r6
    3b3e:	4621      	mov	r1, r4
    3b40:	4820      	ldr	r0, [pc, #128]	; (3bc4 <grid_sys_bank_select+0x168>)
    3b42:	4c1e      	ldr	r4, [pc, #120]	; (3bbc <grid_sys_bank_select+0x160>)
    3b44:	47a0      	blx	r4
    3b46:	9b03      	ldr	r3, [sp, #12]
    3b48:	3301      	adds	r3, #1
    3b4a:	9303      	str	r3, [sp, #12]
    3b4c:	f89d 400c 	ldrb.w	r4, [sp, #12]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    3b50:	481c      	ldr	r0, [pc, #112]	; (3bc4 <grid_sys_bank_select+0x168>)
    3b52:	4b1b      	ldr	r3, [pc, #108]	; (3bc0 <grid_sys_bank_select+0x164>)
    3b54:	4798      	blx	r3
    3b56:	4284      	cmp	r4, r0
    3b58:	d228      	bcs.n	3bac <grid_sys_bank_select+0x150>
			if (hwtype == GRID_MODULE_EN16_RevA){
    3b5a:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    3b5e:	d0d7      	beq.n	3b10 <grid_sys_bank_select+0xb4>
				uint8_t r = mod->bank_color_r[mod->bank_select];
    3b60:	f899 3009 	ldrb.w	r3, [r9, #9]
    3b64:	444b      	add	r3, r9
    3b66:	7a9e      	ldrb	r6, [r3, #10]
				uint8_t g = mod->bank_color_g[mod->bank_select];
    3b68:	7b9f      	ldrb	r7, [r3, #14]
				uint8_t b = mod->bank_color_b[mod->bank_select];
    3b6a:	f893 8012 	ldrb.w	r8, [r3, #18]
				grid_led_set_min(&grid_led_state, i, 0, r/32, g/32, b/32);
    3b6e:	ea4f 1358 	mov.w	r3, r8, lsr #5
    3b72:	9301      	str	r3, [sp, #4]
    3b74:	097b      	lsrs	r3, r7, #5
    3b76:	9300      	str	r3, [sp, #0]
    3b78:	0973      	lsrs	r3, r6, #5
    3b7a:	2200      	movs	r2, #0
    3b7c:	4621      	mov	r1, r4
    3b7e:	4811      	ldr	r0, [pc, #68]	; (3bc4 <grid_sys_bank_select+0x168>)
    3b80:	47d8      	blx	fp
				grid_led_set_mid(&grid_led_state, i, 0, r/2, g/2, b/2);
    3b82:	ea4f 0358 	mov.w	r3, r8, lsr #1
    3b86:	9301      	str	r3, [sp, #4]
    3b88:	087b      	lsrs	r3, r7, #1
    3b8a:	9300      	str	r3, [sp, #0]
    3b8c:	0873      	lsrs	r3, r6, #1
    3b8e:	2200      	movs	r2, #0
    3b90:	4621      	mov	r1, r4
    3b92:	480c      	ldr	r0, [pc, #48]	; (3bc4 <grid_sys_bank_select+0x168>)
    3b94:	4d08      	ldr	r5, [pc, #32]	; (3bb8 <grid_sys_bank_select+0x15c>)
    3b96:	47a8      	blx	r5
				grid_led_set_max(&grid_led_state, i, 0, r, g, b);
    3b98:	f8cd 8004 	str.w	r8, [sp, #4]
    3b9c:	9700      	str	r7, [sp, #0]
    3b9e:	4633      	mov	r3, r6
    3ba0:	2200      	movs	r2, #0
    3ba2:	4621      	mov	r1, r4
    3ba4:	4807      	ldr	r0, [pc, #28]	; (3bc4 <grid_sys_bank_select+0x168>)
    3ba6:	4c05      	ldr	r4, [pc, #20]	; (3bbc <grid_sys_bank_select+0x160>)
    3ba8:	47a0      	blx	r4
    3baa:	e7cc      	b.n	3b46 <grid_sys_bank_select+0xea>
}
    3bac:	b005      	add	sp, #20
    3bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bb2:	bf00      	nop
    3bb4:	0000396d 	.word	0x0000396d
    3bb8:	00001fb5 	.word	0x00001fb5
    3bbc:	00001fff 	.word	0x00001fff
    3bc0:	00001f25 	.word	0x00001f25
    3bc4:	20003628 	.word	0x20003628
    3bc8:	00001f6d 	.word	0x00001f6d

00003bcc <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    3bcc:	2903      	cmp	r1, #3
    3bce:	d009      	beq.n	3be4 <grid_msg_get_checksum+0x18>
    3bd0:	1e43      	subs	r3, r0, #1
    3bd2:	3904      	subs	r1, #4
    3bd4:	4401      	add	r1, r0
    3bd6:	2000      	movs	r0, #0
		checksum ^= str[i];
    3bd8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3bdc:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    3bde:	428b      	cmp	r3, r1
    3be0:	d1fa      	bne.n	3bd8 <grid_msg_get_checksum+0xc>
    3be2:	4770      	bx	lr
	uint8_t checksum = 0;
    3be4:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    3be6:	4770      	bx	lr

00003be8 <grid_msg_set_checksum>:

void grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    3be8:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    3bea:	1ecb      	subs	r3, r1, #3
    3bec:	2102      	movs	r1, #2
    3bee:	4418      	add	r0, r3
    3bf0:	4b01      	ldr	r3, [pc, #4]	; (3bf8 <grid_msg_set_checksum+0x10>)
    3bf2:	4798      	blx	r3
    3bf4:	bd08      	pop	{r3, pc}
    3bf6:	bf00      	nop
    3bf8:	00003935 	.word	0x00003935

00003bfc <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    3bfc:	b500      	push	{lr}
    3bfe:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3c00:	aa02      	add	r2, sp, #8
    3c02:	2300      	movs	r3, #0
    3c04:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    3c08:	2102      	movs	r1, #2
    3c0a:	3004      	adds	r0, #4
    3c0c:	4b02      	ldr	r3, [pc, #8]	; (3c18 <grid_msg_get_id+0x1c>)
    3c0e:	4798      	blx	r3
	
}
    3c10:	b2c0      	uxtb	r0, r0
    3c12:	b003      	add	sp, #12
    3c14:	f85d fb04 	ldr.w	pc, [sp], #4
    3c18:	000038f5 	.word	0x000038f5

00003c1c <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    3c1c:	b500      	push	{lr}
    3c1e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3c20:	aa02      	add	r2, sp, #8
    3c22:	2300      	movs	r3, #0
    3c24:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    3c28:	2102      	movs	r1, #2
    3c2a:	3006      	adds	r0, #6
    3c2c:	4b02      	ldr	r3, [pc, #8]	; (3c38 <grid_msg_get_dx+0x1c>)
    3c2e:	4798      	blx	r3
	
}
    3c30:	b2c0      	uxtb	r0, r0
    3c32:	b003      	add	sp, #12
    3c34:	f85d fb04 	ldr.w	pc, [sp], #4
    3c38:	000038f5 	.word	0x000038f5

00003c3c <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    3c3c:	b500      	push	{lr}
    3c3e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3c40:	aa02      	add	r2, sp, #8
    3c42:	2300      	movs	r3, #0
    3c44:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    3c48:	2102      	movs	r1, #2
    3c4a:	3008      	adds	r0, #8
    3c4c:	4b02      	ldr	r3, [pc, #8]	; (3c58 <grid_msg_get_dy+0x1c>)
    3c4e:	4798      	blx	r3

}
    3c50:	b2c0      	uxtb	r0, r0
    3c52:	b003      	add	sp, #12
    3c54:	f85d fb04 	ldr.w	pc, [sp], #4
    3c58:	000038f5 	.word	0x000038f5

00003c5c <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    3c5c:	b500      	push	{lr}
    3c5e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    3c60:	aa02      	add	r2, sp, #8
    3c62:	2300      	movs	r3, #0
    3c64:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    3c68:	2102      	movs	r1, #2
    3c6a:	300a      	adds	r0, #10
    3c6c:	4b02      	ldr	r3, [pc, #8]	; (3c78 <grid_msg_get_age+0x1c>)
    3c6e:	4798      	blx	r3
	
}
    3c70:	b2c0      	uxtb	r0, r0
    3c72:	b003      	add	sp, #12
    3c74:	f85d fb04 	ldr.w	pc, [sp], #4
    3c78:	000038f5 	.word	0x000038f5

00003c7c <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    3c7c:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    3c7e:	460a      	mov	r2, r1
    3c80:	2102      	movs	r1, #2
    3c82:	3004      	adds	r0, #4
    3c84:	4b01      	ldr	r3, [pc, #4]	; (3c8c <grid_msg_set_id+0x10>)
    3c86:	4798      	blx	r3
    3c88:	bd08      	pop	{r3, pc}
    3c8a:	bf00      	nop
    3c8c:	00003935 	.word	0x00003935

00003c90 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    3c90:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    3c92:	460a      	mov	r2, r1
    3c94:	2102      	movs	r1, #2
    3c96:	3006      	adds	r0, #6
    3c98:	4b01      	ldr	r3, [pc, #4]	; (3ca0 <grid_msg_set_dx+0x10>)
    3c9a:	4798      	blx	r3
    3c9c:	bd08      	pop	{r3, pc}
    3c9e:	bf00      	nop
    3ca0:	00003935 	.word	0x00003935

00003ca4 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    3ca4:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    3ca6:	460a      	mov	r2, r1
    3ca8:	2102      	movs	r1, #2
    3caa:	3008      	adds	r0, #8
    3cac:	4b01      	ldr	r3, [pc, #4]	; (3cb4 <grid_msg_set_dy+0x10>)
    3cae:	4798      	blx	r3
    3cb0:	bd08      	pop	{r3, pc}
    3cb2:	bf00      	nop
    3cb4:	00003935 	.word	0x00003935

00003cb8 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    3cb8:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    3cba:	460a      	mov	r2, r1
    3cbc:	2102      	movs	r1, #2
    3cbe:	300a      	adds	r0, #10
    3cc0:	4b01      	ldr	r3, [pc, #4]	; (3cc8 <grid_msg_set_age+0x10>)
    3cc2:	4798      	blx	r3
    3cc4:	bd08      	pop	{r3, pc}
    3cc6:	bf00      	nop
    3cc8:	00003935 	.word	0x00003935

00003ccc <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    3ccc:	69c3      	ldr	r3, [r0, #28]
    3cce:	4299      	cmp	r1, r3
    3cd0:	d00d      	beq.n	3cee <grid_msg_find_recent+0x22>
    3cd2:	2301      	movs	r3, #1
    3cd4:	f003 021f 	and.w	r2, r3, #31
    3cd8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3cdc:	69d2      	ldr	r2, [r2, #28]
    3cde:	428a      	cmp	r2, r1
    3ce0:	d007      	beq.n	3cf2 <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    3ce2:	3301      	adds	r3, #1
    3ce4:	b2db      	uxtb	r3, r3
    3ce6:	2b20      	cmp	r3, #32
    3ce8:	d1f4      	bne.n	3cd4 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    3cea:	2000      	movs	r0, #0
    3cec:	4770      	bx	lr
			return 1;
    3cee:	2001      	movs	r0, #1
    3cf0:	4770      	bx	lr
    3cf2:	2001      	movs	r0, #1
}
    3cf4:	4770      	bx	lr

00003cf6 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    3cf6:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    3cfa:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    3cfc:	f003 031f 	and.w	r3, r3, #31
    3d00:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    3d04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3d08:	61c1      	str	r1, [r0, #28]
    3d0a:	4770      	bx	lr

00003d0c <grid_ui_model_init>:
	
	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    3d0c:	b510      	push	{r4, lr}
    3d0e:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    3d10:	2306      	movs	r3, #6
    3d12:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    3d14:	4419      	add	r1, r3
    3d16:	b2c8      	uxtb	r0, r1
    3d18:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    3d1a:	0100      	lsls	r0, r0, #4
    3d1c:	4b02      	ldr	r3, [pc, #8]	; (3d28 <grid_ui_model_init+0x1c>)
    3d1e:	4798      	blx	r3
    3d20:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    3d22:	3060      	adds	r0, #96	; 0x60
    3d24:	60a0      	str	r0, [r4, #8]
		
}
    3d26:	bd10      	pop	{r4, pc}
    3d28:	0000bd91 	.word	0x0000bd91

00003d2c <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d30:	4605      	mov	r5, r0
    3d32:	4698      	mov	r8, r3
    3d34:	9808      	ldr	r0, [sp, #32]
    3d36:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    3d38:	010c      	lsls	r4, r1, #4
    3d3a:	686b      	ldr	r3, [r5, #4]
    3d3c:	2100      	movs	r1, #0
    3d3e:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    3d40:	686b      	ldr	r3, [r5, #4]
    3d42:	4423      	add	r3, r4
    3d44:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    3d46:	686b      	ldr	r3, [r5, #4]
    3d48:	4423      	add	r3, r4
    3d4a:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    3d4c:	686b      	ldr	r3, [r5, #4]
    3d4e:	4423      	add	r3, r4
    3d50:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    3d54:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    3d56:	686b      	ldr	r3, [r5, #4]
    3d58:	eb03 0904 	add.w	r9, r3, r4
    3d5c:	4f1b      	ldr	r7, [pc, #108]	; (3dcc <grid_report_init+0xa0>)
    3d5e:	47b8      	blx	r7
    3d60:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    3d64:	686b      	ldr	r3, [r5, #4]
    3d66:	eb03 0904 	add.w	r9, r3, r4
    3d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
    3d6c:	47b8      	blx	r7
    3d6e:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    3d72:	686a      	ldr	r2, [r5, #4]
    3d74:	4422      	add	r2, r4
    3d76:	6853      	ldr	r3, [r2, #4]
    3d78:	b30b      	cbz	r3, 3dbe <grid_report_init+0x92>
    3d7a:	68d3      	ldr	r3, [r2, #12]
    3d7c:	b313      	cbz	r3, 3dc4 <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3d7e:	7893      	ldrb	r3, [r2, #2]
    3d80:	b15b      	cbz	r3, 3d9a <grid_report_init+0x6e>
    3d82:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    3d84:	f818 1003 	ldrb.w	r1, [r8, r3]
    3d88:	6852      	ldr	r2, [r2, #4]
    3d8a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    3d8c:	3301      	adds	r3, #1
    3d8e:	b2db      	uxtb	r3, r3
    3d90:	686a      	ldr	r2, [r5, #4]
    3d92:	4422      	add	r2, r4
    3d94:	7891      	ldrb	r1, [r2, #2]
    3d96:	4299      	cmp	r1, r3
    3d98:	d8f4      	bhi.n	3d84 <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3d9a:	686a      	ldr	r2, [r5, #4]
    3d9c:	4422      	add	r2, r4
    3d9e:	7a10      	ldrb	r0, [r2, #8]
    3da0:	b188      	cbz	r0, 3dc6 <grid_report_init+0x9a>
    3da2:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    3da4:	5cf1      	ldrb	r1, [r6, r3]
    3da6:	68d2      	ldr	r2, [r2, #12]
    3da8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    3daa:	3301      	adds	r3, #1
    3dac:	b2db      	uxtb	r3, r3
    3dae:	686a      	ldr	r2, [r5, #4]
    3db0:	4422      	add	r2, r4
    3db2:	7a11      	ldrb	r1, [r2, #8]
    3db4:	4299      	cmp	r1, r3
    3db6:	d8f5      	bhi.n	3da4 <grid_report_init+0x78>
	}
	
	return 0;
    3db8:	2000      	movs	r0, #0
    3dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    3dbe:	20ff      	movs	r0, #255	; 0xff
    3dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3dc4:	20ff      	movs	r0, #255	; 0xff
	
}
    3dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3dca:	bf00      	nop
    3dcc:	0000bd91 	.word	0x0000bd91

00003dd0 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    3dd0:	b510      	push	{r4, lr}
    3dd2:	b084      	sub	sp, #16
	
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
    3dd4:	7844      	ldrb	r4, [r0, #1]
    3dd6:	4421      	add	r1, r4
    3dd8:	9c08      	ldr	r4, [sp, #32]
    3dda:	9402      	str	r4, [sp, #8]
    3ddc:	9c07      	ldr	r4, [sp, #28]
    3dde:	9401      	str	r4, [sp, #4]
    3de0:	9c06      	ldr	r4, [sp, #24]
    3de2:	9400      	str	r4, [sp, #0]
    3de4:	b2c9      	uxtb	r1, r1
    3de6:	4c02      	ldr	r4, [pc, #8]	; (3df0 <grid_report_ui_init+0x20>)
    3de8:	47a0      	blx	r4
}
    3dea:	b004      	add	sp, #16
    3dec:	bd10      	pop	{r4, pc}
    3dee:	bf00      	nop
    3df0:	00003d2d 	.word	0x00003d2d

00003df4 <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    3df4:	7843      	ldrb	r3, [r0, #1]
    3df6:	2b00      	cmp	r3, #0
    3df8:	f000 80cd 	beq.w	3f96 <grid_report_sys_init+0x1a2>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    3dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e00:	b08f      	sub	sp, #60	; 0x3c
    3e02:	4607      	mov	r7, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    3e04:	2400      	movs	r4, #0
			
		uint8_t payload_template[30] = {0};
    3e06:	4625      	mov	r5, r4
			
			type = GRID_REPORT_TYPE_DIRECT_WEST;
			
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
			
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3e08:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 3fb8 <grid_report_sys_init+0x1c4>
    3e0c:	e039      	b.n	3e82 <grid_report_sys_init+0x8e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_BANK,	GRID_MSG_COMMAND_SYS_BANK_SELECT, 0, GRID_MSG_END_OF_TEXT);
    3e0e:	2303      	movs	r3, #3
    3e10:	9303      	str	r3, [sp, #12]
    3e12:	9502      	str	r5, [sp, #8]
    3e14:	2365      	movs	r3, #101	; 0x65
    3e16:	9301      	str	r3, [sp, #4]
    3e18:	2364      	movs	r3, #100	; 0x64
    3e1a:	9300      	str	r3, [sp, #0]
    3e1c:	2304      	movs	r3, #4
    3e1e:	2202      	movs	r2, #2
    3e20:	495d      	ldr	r1, [pc, #372]	; (3f98 <grid_report_sys_init+0x1a4>)
    3e22:	a806      	add	r0, sp, #24
    3e24:	4e5d      	ldr	r6, [pc, #372]	; (3f9c <grid_report_sys_init+0x1a8>)
    3e26:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3e28:	2602      	movs	r6, #2
    3e2a:	e00f      	b.n	3e4c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_HEARTBEAT, GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE, grid_sys_get_hwcfg(), GRID_MSG_END_OF_TEXT);
    3e2c:	4b5c      	ldr	r3, [pc, #368]	; (3fa0 <grid_report_sys_init+0x1ac>)
    3e2e:	4798      	blx	r3
    3e30:	2303      	movs	r3, #3
    3e32:	9303      	str	r3, [sp, #12]
    3e34:	9002      	str	r0, [sp, #8]
    3e36:	2367      	movs	r3, #103	; 0x67
    3e38:	9301      	str	r3, [sp, #4]
    3e3a:	2366      	movs	r3, #102	; 0x66
    3e3c:	9300      	str	r3, [sp, #0]
    3e3e:	2304      	movs	r3, #4
    3e40:	2202      	movs	r2, #2
    3e42:	4955      	ldr	r1, [pc, #340]	; (3f98 <grid_report_sys_init+0x1a4>)
    3e44:	a806      	add	r0, sp, #24
    3e46:	4e55      	ldr	r6, [pc, #340]	; (3f9c <grid_report_sys_init+0x1a8>)
    3e48:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    3e4a:	2602      	movs	r6, #2
		}
		
		
		
				
		uint8_t payload_length = strlen(payload_template);
    3e4c:	a806      	add	r0, sp, #24
    3e4e:	47c0      	blx	r8

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    3e50:	f88d 5014 	strb.w	r5, [sp, #20]
		helper_template[1] = 0;
    3e54:	f88d 5015 	strb.w	r5, [sp, #21]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    3e58:	2302      	movs	r3, #2
    3e5a:	9302      	str	r3, [sp, #8]
    3e5c:	ab05      	add	r3, sp, #20
    3e5e:	9301      	str	r3, [sp, #4]
    3e60:	b2c0      	uxtb	r0, r0
    3e62:	9000      	str	r0, [sp, #0]
    3e64:	ab06      	add	r3, sp, #24
    3e66:	4632      	mov	r2, r6
    3e68:	4621      	mov	r1, r4
    3e6a:	4638      	mov	r0, r7
    3e6c:	4e4d      	ldr	r6, [pc, #308]	; (3fa4 <grid_report_sys_init+0x1b0>)
    3e6e:	47b0      	blx	r6
		
		if (error != 0){
    3e70:	2800      	cmp	r0, #0
    3e72:	f040 808d 	bne.w	3f90 <grid_report_sys_init+0x19c>
	for(uint8_t i=0; i<mod->report_offset; i++){
    3e76:	3401      	adds	r4, #1
    3e78:	b2e4      	uxtb	r4, r4
    3e7a:	787b      	ldrb	r3, [r7, #1]
    3e7c:	42a3      	cmp	r3, r4
    3e7e:	f240 8087 	bls.w	3f90 <grid_report_sys_init+0x19c>
		uint8_t payload_template[30] = {0};
    3e82:	221e      	movs	r2, #30
    3e84:	4629      	mov	r1, r5
    3e86:	a806      	add	r0, sp, #24
    3e88:	4b47      	ldr	r3, [pc, #284]	; (3fa8 <grid_report_sys_init+0x1b4>)
    3e8a:	4798      	blx	r3
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE
    3e8c:	2c05      	cmp	r4, #5
    3e8e:	d0be      	beq.n	3e0e <grid_report_sys_init+0x1a>
		else if (i == GRID_REPORT_INDEX_HEARTBEAT){ // HEARTBEAT
    3e90:	2c00      	cmp	r4, #0
    3e92:	d0cb      	beq.n	3e2c <grid_report_sys_init+0x38>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    3e94:	2c01      	cmp	r4, #1
    3e96:	d007      	beq.n	3ea8 <grid_report_sys_init+0xb4>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    3e98:	2c02      	cmp	r4, #2
    3e9a:	d022      	beq.n	3ee2 <grid_report_sys_init+0xee>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    3e9c:	2c03      	cmp	r4, #3
    3e9e:	d03d      	beq.n	3f1c <grid_report_sys_init+0x128>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    3ea0:	2c04      	cmp	r4, #4
    3ea2:	d058      	beq.n	3f56 <grid_report_sys_init+0x162>
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    3ea4:	462e      	mov	r6, r5
    3ea6:	e7d1      	b.n	3e4c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3ea8:	4b3d      	ldr	r3, [pc, #244]	; (3fa0 <grid_report_sys_init+0x1ac>)
    3eaa:	4798      	blx	r3
    3eac:	2604      	movs	r6, #4
    3eae:	9603      	str	r6, [sp, #12]
    3eb0:	9002      	str	r0, [sp, #8]
    3eb2:	2311      	movs	r3, #17
    3eb4:	9301      	str	r3, [sp, #4]
    3eb6:	2307      	movs	r3, #7
    3eb8:	9300      	str	r3, [sp, #0]
    3eba:	230e      	movs	r3, #14
    3ebc:	2201      	movs	r2, #1
    3ebe:	493b      	ldr	r1, [pc, #236]	; (3fac <grid_report_sys_init+0x1b8>)
    3ec0:	a806      	add	r0, sp, #24
    3ec2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3f9c <grid_report_sys_init+0x1a8>
    3ec6:	47c8      	blx	r9
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3ec8:	a806      	add	r0, sp, #24
    3eca:	47c0      	blx	r8
    3ecc:	4681      	mov	r9, r0
    3ece:	4601      	mov	r1, r0
    3ed0:	a806      	add	r0, sp, #24
    3ed2:	4b37      	ldr	r3, [pc, #220]	; (3fb0 <grid_report_sys_init+0x1bc>)
    3ed4:	4798      	blx	r3
    3ed6:	4602      	mov	r2, r0
    3ed8:	4649      	mov	r1, r9
    3eda:	a806      	add	r0, sp, #24
    3edc:	4b35      	ldr	r3, [pc, #212]	; (3fb4 <grid_report_sys_init+0x1c0>)
    3ede:	4798      	blx	r3
    3ee0:	e7b4      	b.n	3e4c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3ee2:	4b2f      	ldr	r3, [pc, #188]	; (3fa0 <grid_report_sys_init+0x1ac>)
    3ee4:	4798      	blx	r3
    3ee6:	2304      	movs	r3, #4
    3ee8:	9303      	str	r3, [sp, #12]
    3eea:	9002      	str	r0, [sp, #8]
    3eec:	2312      	movs	r3, #18
    3eee:	9301      	str	r3, [sp, #4]
    3ef0:	2307      	movs	r3, #7
    3ef2:	9300      	str	r3, [sp, #0]
    3ef4:	230e      	movs	r3, #14
    3ef6:	2201      	movs	r2, #1
    3ef8:	492c      	ldr	r1, [pc, #176]	; (3fac <grid_report_sys_init+0x1b8>)
    3efa:	a806      	add	r0, sp, #24
    3efc:	4e27      	ldr	r6, [pc, #156]	; (3f9c <grid_report_sys_init+0x1a8>)
    3efe:	47b0      	blx	r6
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3f00:	a806      	add	r0, sp, #24
    3f02:	47c0      	blx	r8
    3f04:	4606      	mov	r6, r0
    3f06:	4601      	mov	r1, r0
    3f08:	a806      	add	r0, sp, #24
    3f0a:	4b29      	ldr	r3, [pc, #164]	; (3fb0 <grid_report_sys_init+0x1bc>)
    3f0c:	4798      	blx	r3
    3f0e:	4602      	mov	r2, r0
    3f10:	4631      	mov	r1, r6
    3f12:	a806      	add	r0, sp, #24
    3f14:	4b27      	ldr	r3, [pc, #156]	; (3fb4 <grid_report_sys_init+0x1c0>)
    3f16:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    3f18:	2605      	movs	r6, #5
    3f1a:	e797      	b.n	3e4c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3f1c:	4b20      	ldr	r3, [pc, #128]	; (3fa0 <grid_report_sys_init+0x1ac>)
    3f1e:	4798      	blx	r3
    3f20:	2304      	movs	r3, #4
    3f22:	9303      	str	r3, [sp, #12]
    3f24:	9002      	str	r0, [sp, #8]
    3f26:	2313      	movs	r3, #19
    3f28:	9301      	str	r3, [sp, #4]
    3f2a:	2307      	movs	r3, #7
    3f2c:	9300      	str	r3, [sp, #0]
    3f2e:	230e      	movs	r3, #14
    3f30:	2201      	movs	r2, #1
    3f32:	491e      	ldr	r1, [pc, #120]	; (3fac <grid_report_sys_init+0x1b8>)
    3f34:	a806      	add	r0, sp, #24
    3f36:	4e19      	ldr	r6, [pc, #100]	; (3f9c <grid_report_sys_init+0x1a8>)
    3f38:	47b0      	blx	r6
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3f3a:	a806      	add	r0, sp, #24
    3f3c:	47c0      	blx	r8
    3f3e:	4606      	mov	r6, r0
    3f40:	4601      	mov	r1, r0
    3f42:	a806      	add	r0, sp, #24
    3f44:	4b1a      	ldr	r3, [pc, #104]	; (3fb0 <grid_report_sys_init+0x1bc>)
    3f46:	4798      	blx	r3
    3f48:	4602      	mov	r2, r0
    3f4a:	4631      	mov	r1, r6
    3f4c:	a806      	add	r0, sp, #24
    3f4e:	4b19      	ldr	r3, [pc, #100]	; (3fb4 <grid_report_sys_init+0x1c0>)
    3f50:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    3f52:	2606      	movs	r6, #6
    3f54:	e77a      	b.n	3e4c <grid_report_sys_init+0x58>
			sprintf(payload_template, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(),	GRID_MSG_END_OF_TRANSMISSION);
    3f56:	4b12      	ldr	r3, [pc, #72]	; (3fa0 <grid_report_sys_init+0x1ac>)
    3f58:	4798      	blx	r3
    3f5a:	2304      	movs	r3, #4
    3f5c:	9303      	str	r3, [sp, #12]
    3f5e:	9002      	str	r0, [sp, #8]
    3f60:	2314      	movs	r3, #20
    3f62:	9301      	str	r3, [sp, #4]
    3f64:	2607      	movs	r6, #7
    3f66:	9600      	str	r6, [sp, #0]
    3f68:	230e      	movs	r3, #14
    3f6a:	2201      	movs	r2, #1
    3f6c:	490f      	ldr	r1, [pc, #60]	; (3fac <grid_report_sys_init+0x1b8>)
    3f6e:	a806      	add	r0, sp, #24
    3f70:	f8df 9028 	ldr.w	r9, [pc, #40]	; 3f9c <grid_report_sys_init+0x1a8>
    3f74:	47c8      	blx	r9
			grid_msg_set_checksum(payload_template, strlen(payload_template), grid_msg_get_checksum(payload_template, strlen(payload_template)));
    3f76:	a806      	add	r0, sp, #24
    3f78:	47c0      	blx	r8
    3f7a:	4681      	mov	r9, r0
    3f7c:	4601      	mov	r1, r0
    3f7e:	a806      	add	r0, sp, #24
    3f80:	4b0b      	ldr	r3, [pc, #44]	; (3fb0 <grid_report_sys_init+0x1bc>)
    3f82:	4798      	blx	r3
    3f84:	4602      	mov	r2, r0
    3f86:	4649      	mov	r1, r9
    3f88:	a806      	add	r0, sp, #24
    3f8a:	4b0a      	ldr	r3, [pc, #40]	; (3fb4 <grid_report_sys_init+0x1c0>)
    3f8c:	4798      	blx	r3
    3f8e:	e75d      	b.n	3e4c <grid_report_sys_init+0x58>
			}
			
		}
	
	}
}
    3f90:	b00f      	add	sp, #60	; 0x3c
    3f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f96:	4770      	bx	lr
    3f98:	0000d38c 	.word	0x0000d38c
    3f9c:	0000c1a5 	.word	0x0000c1a5
    3fa0:	0000396d 	.word	0x0000396d
    3fa4:	00003d2d 	.word	0x00003d2d
    3fa8:	0000bdb7 	.word	0x0000bdb7
    3fac:	0000d3a4 	.word	0x0000d3a4
    3fb0:	00003bcd 	.word	0x00003bcd
    3fb4:	00003be9 	.word	0x00003be9
    3fb8:	0000c1ed 	.word	0x0000c1ed

00003fbc <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    3fbc:	6843      	ldr	r3, [r0, #4]
    3fbe:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    3fc2:	7888      	ldrb	r0, [r1, #2]
    3fc4:	b140      	cbz	r0, 3fd8 <grid_report_render+0x1c>
    3fc6:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    3fc8:	6848      	ldr	r0, [r1, #4]
    3fca:	5cc0      	ldrb	r0, [r0, r3]
    3fcc:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    3fce:	3301      	adds	r3, #1
    3fd0:	b2db      	uxtb	r3, r3
    3fd2:	7888      	ldrb	r0, [r1, #2]
    3fd4:	4298      	cmp	r0, r3
    3fd6:	d8f7      	bhi.n	3fc8 <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    3fd8:	4770      	bx	lr

00003fda <grid_report_ui_get_changed_flag>:

// UI REPORT FLAGS

uint8_t grid_report_ui_get_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	return mod->report_array[index+mod->report_offset].changed;
    3fda:	7843      	ldrb	r3, [r0, #1]
    3fdc:	4419      	add	r1, r3
    3fde:	6843      	ldr	r3, [r0, #4]
    3fe0:	0109      	lsls	r1, r1, #4
}
    3fe2:	5c58      	ldrb	r0, [r3, r1]
    3fe4:	4770      	bx	lr

00003fe6 <grid_report_ui_set_changed_flag>:

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    3fe6:	7843      	ldrb	r3, [r0, #1]
    3fe8:	4419      	add	r1, r3
    3fea:	6843      	ldr	r3, [r0, #4]
    3fec:	0109      	lsls	r1, r1, #4
    3fee:	2201      	movs	r2, #1
    3ff0:	545a      	strb	r2, [r3, r1]
    3ff2:	4770      	bx	lr

00003ff4 <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    3ff4:	6843      	ldr	r3, [r0, #4]
    3ff6:	0109      	lsls	r1, r1, #4
    3ff8:	2201      	movs	r2, #1
    3ffa:	545a      	strb	r2, [r3, r1]
    3ffc:	4770      	bx	lr

00003ffe <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    3ffe:	6843      	ldr	r3, [r0, #4]
    4000:	0109      	lsls	r1, r1, #4
    4002:	2200      	movs	r2, #0
    4004:	545a      	strb	r2, [r3, r1]
    4006:	4770      	bx	lr

00004008 <grid_port_process_ui>:
	if (por->cooldown > 15){
    4008:	6803      	ldr	r3, [r0, #0]
    400a:	2b0f      	cmp	r3, #15
    400c:	d811      	bhi.n	4032 <grid_port_process_ui+0x2a>
	else if (por->cooldown>0){
    400e:	b10b      	cbz	r3, 4014 <grid_port_process_ui+0xc>
		por->cooldown--;
    4010:	3b01      	subs	r3, #1
    4012:	6003      	str	r3, [r0, #0]
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4014:	4ba4      	ldr	r3, [pc, #656]	; (42a8 <grid_port_process_ui+0x2a0>)
    4016:	781b      	ldrb	r3, [r3, #0]
    4018:	2b00      	cmp	r3, #0
    401a:	f000 8173 	beq.w	4304 <grid_port_process_ui+0x2fc>
void grid_port_process_ui(struct grid_port* por){
    401e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4022:	b0cb      	sub	sp, #300	; 0x12c
	return mod->report_array[index].changed;
    4024:	4ba0      	ldr	r3, [pc, #640]	; (42a8 <grid_port_process_ui+0x2a0>)
    4026:	6859      	ldr	r1, [r3, #4]
    4028:	2300      	movs	r3, #0
    402a:	469e      	mov	lr, r3
    402c:	461c      	mov	r4, r3
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    402e:	4e9e      	ldr	r6, [pc, #632]	; (42a8 <grid_port_process_ui+0x2a0>)
    4030:	e00c      	b.n	404c <grid_port_process_ui+0x44>
		por->cooldown--;
    4032:	3b01      	subs	r3, #1
    4034:	6003      	str	r3, [r0, #0]
		return;
    4036:	4770      	bx	lr
				message_broadcast_available++;	
    4038:	f10e 0e01 	add.w	lr, lr, #1
    403c:	fa5f fe8e 	uxtb.w	lr, lr
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4040:	3301      	adds	r3, #1
    4042:	b2db      	uxtb	r3, r3
    4044:	7832      	ldrb	r2, [r6, #0]
    4046:	b2d2      	uxtb	r2, r2
    4048:	429a      	cmp	r2, r3
    404a:	d920      	bls.n	408e <grid_port_process_ui+0x86>
	return mod->report_array[index].changed;
    404c:	011a      	lsls	r2, r3, #4
    404e:	188d      	adds	r5, r1, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    4050:	5c8a      	ldrb	r2, [r1, r2]
    4052:	2a00      	cmp	r2, #0
    4054:	d0f4      	beq.n	4040 <grid_port_process_ui+0x38>
	return mod->report_array[index].type;
    4056:	786a      	ldrb	r2, [r5, #1]
			if (type == GRID_REPORT_TYPE_BROADCAST){
    4058:	2a02      	cmp	r2, #2
    405a:	d0ed      	beq.n	4038 <grid_port_process_ui+0x30>
			else if (type == GRID_REPORT_TYPE_DIRECT_ALL){	
    405c:	2a03      	cmp	r2, #3
    405e:	d00a      	beq.n	4076 <grid_port_process_ui+0x6e>
			else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    4060:	2a04      	cmp	r2, #4
    4062:	d00b      	beq.n	407c <grid_port_process_ui+0x74>
			else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    4064:	2a05      	cmp	r2, #5
    4066:	d00c      	beq.n	4082 <grid_port_process_ui+0x7a>
			else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    4068:	2a06      	cmp	r2, #6
    406a:	d00d      	beq.n	4088 <grid_port_process_ui+0x80>
			else if (type == GRID_REPORT_TYPE_DIRECT_WEST){
    406c:	2a07      	cmp	r2, #7
				message_direct_available++;
    406e:	bf04      	itt	eq
    4070:	3401      	addeq	r4, #1
    4072:	b2e4      	uxtbeq	r4, r4
    4074:	e7e4      	b.n	4040 <grid_port_process_ui+0x38>
				message_direct_available++;	
    4076:	3401      	adds	r4, #1
    4078:	b2e4      	uxtb	r4, r4
    407a:	e7e1      	b.n	4040 <grid_port_process_ui+0x38>
				message_direct_available++;
    407c:	3401      	adds	r4, #1
    407e:	b2e4      	uxtb	r4, r4
    4080:	e7de      	b.n	4040 <grid_port_process_ui+0x38>
				message_direct_available++;
    4082:	3401      	adds	r4, #1
    4084:	b2e4      	uxtb	r4, r4
    4086:	e7db      	b.n	4040 <grid_port_process_ui+0x38>
				message_direct_available++;
    4088:	3401      	adds	r4, #1
    408a:	b2e4      	uxtb	r4, r4
    408c:	e7d8      	b.n	4040 <grid_port_process_ui+0x38>
    408e:	4680      	mov	r8, r0
	if (message_direct_available){
    4090:	2c00      	cmp	r4, #0
    4092:	d069      	beq.n	4168 <grid_port_process_ui+0x160>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    4094:	4b84      	ldr	r3, [pc, #528]	; (42a8 <grid_port_process_ui+0x2a0>)
    4096:	781b      	ldrb	r3, [r3, #0]
    4098:	2b00      	cmp	r3, #0
    409a:	d068      	beq.n	416e <grid_port_process_ui+0x166>
    409c:	2500      	movs	r5, #0
	return mod->report_array[index].changed;
    409e:	f8df 8208 	ldr.w	r8, [pc, #520]	; 42a8 <grid_port_process_ui+0x2a0>
				uint8_t message[256] = {0};
    40a2:	f8df a228 	ldr.w	sl, [pc, #552]	; 42cc <grid_port_process_ui+0x2c4>
				CRITICAL_SECTION_ENTER()			
    40a6:	f8df 924c 	ldr.w	r9, [pc, #588]	; 42f4 <grid_port_process_ui+0x2ec>
    40aa:	e00e      	b.n	40ca <grid_port_process_ui+0xc2>
					target_buffer = &GRID_PORT_U.rx_buffer;
    40ac:	f8df b240 	ldr.w	fp, [pc, #576]	; 42f0 <grid_port_process_ui+0x2e8>
				if (grid_buffer_write_init(target_buffer, length)){
    40b0:	b2b1      	uxth	r1, r6
    40b2:	4658      	mov	r0, fp
    40b4:	4b7d      	ldr	r3, [pc, #500]	; (42ac <grid_port_process_ui+0x2a4>)
    40b6:	4798      	blx	r3
    40b8:	2800      	cmp	r0, #0
    40ba:	d13f      	bne.n	413c <grid_port_process_ui+0x134>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    40bc:	3501      	adds	r5, #1
    40be:	b2ed      	uxtb	r5, r5
    40c0:	f898 3000 	ldrb.w	r3, [r8]
    40c4:	b2db      	uxtb	r3, r3
    40c6:	42ab      	cmp	r3, r5
    40c8:	d951      	bls.n	416e <grid_port_process_ui+0x166>
	return mod->report_array[index].changed;
    40ca:	012c      	lsls	r4, r5, #4
    40cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    40d0:	191a      	adds	r2, r3, r4
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_ALL || type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    40d2:	5d1b      	ldrb	r3, [r3, r4]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d0f1      	beq.n	40bc <grid_port_process_ui+0xb4>
    40d8:	7853      	ldrb	r3, [r2, #1]
    40da:	3b03      	subs	r3, #3
    40dc:	b2db      	uxtb	r3, r3
    40de:	2b04      	cmp	r3, #4
    40e0:	d8ec      	bhi.n	40bc <grid_port_process_ui+0xb4>
				uint8_t message[256] = {0};
    40e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    40e6:	2100      	movs	r1, #0
    40e8:	a80a      	add	r0, sp, #40	; 0x28
    40ea:	47d0      	blx	sl
				CRITICAL_SECTION_ENTER()			
    40ec:	a808      	add	r0, sp, #32
    40ee:	47c8      	blx	r9
				grid_report_render(mod, i, &message[length]);
    40f0:	aa0a      	add	r2, sp, #40	; 0x28
    40f2:	4629      	mov	r1, r5
    40f4:	4640      	mov	r0, r8
    40f6:	4b6e      	ldr	r3, [pc, #440]	; (42b0 <grid_port_process_ui+0x2a8>)
    40f8:	4798      	blx	r3
				length += strlen(&message[length]);
    40fa:	a80a      	add	r0, sp, #40	; 0x28
    40fc:	4b6d      	ldr	r3, [pc, #436]	; (42b4 <grid_port_process_ui+0x2ac>)
    40fe:	4798      	blx	r3
    4100:	4606      	mov	r6, r0
				CRITICAL_SECTION_LEAVE()			
    4102:	a808      	add	r0, sp, #32
    4104:	4b6c      	ldr	r3, [pc, #432]	; (42b8 <grid_port_process_ui+0x2b0>)
    4106:	4798      	blx	r3
	return mod->report_array[index].type;
    4108:	f8d8 3004 	ldr.w	r3, [r8, #4]
    410c:	441c      	add	r4, r3
    410e:	7863      	ldrb	r3, [r4, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_ALL){
    4110:	2b03      	cmp	r3, #3
    4112:	d0cb      	beq.n	40ac <grid_port_process_ui+0xa4>
				else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    4114:	2b04      	cmp	r3, #4
    4116:	d008      	beq.n	412a <grid_port_process_ui+0x122>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    4118:	2b05      	cmp	r3, #5
    411a:	d009      	beq.n	4130 <grid_port_process_ui+0x128>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    411c:	2b06      	cmp	r3, #6
    411e:	d00a      	beq.n	4136 <grid_port_process_ui+0x12e>
					target_buffer = &GRID_PORT_W.tx_buffer;
    4120:	4a66      	ldr	r2, [pc, #408]	; (42bc <grid_port_process_ui+0x2b4>)
    4122:	2b07      	cmp	r3, #7
    4124:	bf08      	it	eq
    4126:	4693      	moveq	fp, r2
    4128:	e7c2      	b.n	40b0 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_N.tx_buffer;
    412a:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 42f8 <grid_port_process_ui+0x2f0>
    412e:	e7bf      	b.n	40b0 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_E.tx_buffer;
    4130:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 42fc <grid_port_process_ui+0x2f4>
    4134:	e7bc      	b.n	40b0 <grid_port_process_ui+0xa8>
					target_buffer = &GRID_PORT_S.tx_buffer;
    4136:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 4300 <grid_port_process_ui+0x2f8>
    413a:	e7b9      	b.n	40b0 <grid_port_process_ui+0xa8>
					grid_report_sys_clear_changed_flag(mod, i);
    413c:	4629      	mov	r1, r5
    413e:	4640      	mov	r0, r8
    4140:	4b5f      	ldr	r3, [pc, #380]	; (42c0 <grid_port_process_ui+0x2b8>)
    4142:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    4144:	b166      	cbz	r6, 4160 <grid_port_process_ui+0x158>
    4146:	f10d 0427 	add.w	r4, sp, #39	; 0x27
    414a:	ab4a      	add	r3, sp, #296	; 0x128
    414c:	441e      	add	r6, r3
    414e:	f2a6 1601 	subw	r6, r6, #257	; 0x101
						grid_buffer_write_character(target_buffer, message[i]);
    4152:	4f5c      	ldr	r7, [pc, #368]	; (42c4 <grid_port_process_ui+0x2bc>)
    4154:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4158:	4658      	mov	r0, fp
    415a:	47b8      	blx	r7
					for(uint32_t i = 0; i<length; i++){
    415c:	42b4      	cmp	r4, r6
    415e:	d1f9      	bne.n	4154 <grid_port_process_ui+0x14c>
					grid_buffer_write_acknowledge(target_buffer);
    4160:	4658      	mov	r0, fp
    4162:	4b59      	ldr	r3, [pc, #356]	; (42c8 <grid_port_process_ui+0x2c0>)
    4164:	4798      	blx	r3
    4166:	e7a9      	b.n	40bc <grid_port_process_ui+0xb4>
	if (message_broadcast_available){
    4168:	f1be 0f00 	cmp.w	lr, #0
    416c:	d102      	bne.n	4174 <grid_port_process_ui+0x16c>
}
    416e:	b04b      	add	sp, #300	; 0x12c
    4170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t message[256] = {0};
    4174:	f44f 7280 	mov.w	r2, #256	; 0x100
    4178:	2100      	movs	r1, #0
    417a:	a80a      	add	r0, sp, #40	; 0x28
    417c:	4b53      	ldr	r3, [pc, #332]	; (42cc <grid_port_process_ui+0x2c4>)
    417e:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    4180:	4b53      	ldr	r3, [pc, #332]	; (42d0 <grid_port_process_ui+0x2c8>)
    4182:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    4186:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    4188:	2117      	movs	r1, #23
    418a:	9105      	str	r1, [sp, #20]
    418c:	9304      	str	r3, [sp, #16]
    418e:	237f      	movs	r3, #127	; 0x7f
    4190:	9303      	str	r3, [sp, #12]
    4192:	9302      	str	r3, [sp, #8]
    4194:	9201      	str	r2, [sp, #4]
    4196:	2300      	movs	r3, #0
    4198:	9300      	str	r3, [sp, #0]
    419a:	230f      	movs	r3, #15
    419c:	2201      	movs	r2, #1
    419e:	494d      	ldr	r1, [pc, #308]	; (42d4 <grid_port_process_ui+0x2cc>)
    41a0:	a80a      	add	r0, sp, #40	; 0x28
    41a2:	4d4d      	ldr	r5, [pc, #308]	; (42d8 <grid_port_process_ui+0x2d0>)
    41a4:	47a8      	blx	r5
		length += strlen(&message[length]);
    41a6:	a80a      	add	r0, sp, #40	; 0x28
    41a8:	4b42      	ldr	r3, [pc, #264]	; (42b4 <grid_port_process_ui+0x2ac>)
    41aa:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    41ac:	4b3e      	ldr	r3, [pc, #248]	; (42a8 <grid_port_process_ui+0x2a0>)
    41ae:	781b      	ldrb	r3, [r3, #0]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d0dc      	beq.n	416e <grid_port_process_ui+0x166>
    41b4:	4625      	mov	r5, r4
    41b6:	4606      	mov	r6, r0
			CRITICAL_SECTION_ENTER()
    41b8:	f8df a138 	ldr.w	sl, [pc, #312]	; 42f4 <grid_port_process_ui+0x2ec>
	return mod->report_array[index].changed;
    41bc:	4f3a      	ldr	r7, [pc, #232]	; (42a8 <grid_port_process_ui+0x2a0>)
			CRITICAL_SECTION_LEAVE()
    41be:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 42b8 <grid_port_process_ui+0x2b0>
    41c2:	e007      	b.n	41d4 <grid_port_process_ui+0x1cc>
    41c4:	a807      	add	r0, sp, #28
    41c6:	47c8      	blx	r9
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    41c8:	3501      	adds	r5, #1
    41ca:	b2ed      	uxtb	r5, r5
    41cc:	783b      	ldrb	r3, [r7, #0]
    41ce:	b2db      	uxtb	r3, r3
    41d0:	42ab      	cmp	r3, r5
    41d2:	d91b      	bls.n	420c <grid_port_process_ui+0x204>
			if (length>200){
    41d4:	2ec8      	cmp	r6, #200	; 0xc8
    41d6:	d8f7      	bhi.n	41c8 <grid_port_process_ui+0x1c0>
			CRITICAL_SECTION_ENTER()
    41d8:	a807      	add	r0, sp, #28
    41da:	47d0      	blx	sl
	return mod->report_array[index].changed;
    41dc:	687a      	ldr	r2, [r7, #4]
    41de:	012b      	lsls	r3, r5, #4
			if (grid_report_sys_get_changed_flag(mod, i)){
    41e0:	5cd3      	ldrb	r3, [r2, r3]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d0ee      	beq.n	41c4 <grid_port_process_ui+0x1bc>
				packetvalid++;
    41e6:	3401      	adds	r4, #1
    41e8:	b2e4      	uxtb	r4, r4
				grid_report_render(mod, i, &message[length]);
    41ea:	ab0a      	add	r3, sp, #40	; 0x28
    41ec:	eb03 0b06 	add.w	fp, r3, r6
    41f0:	465a      	mov	r2, fp
    41f2:	4629      	mov	r1, r5
    41f4:	4638      	mov	r0, r7
    41f6:	4b2e      	ldr	r3, [pc, #184]	; (42b0 <grid_port_process_ui+0x2a8>)
    41f8:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    41fa:	4629      	mov	r1, r5
    41fc:	4638      	mov	r0, r7
    41fe:	4b30      	ldr	r3, [pc, #192]	; (42c0 <grid_port_process_ui+0x2b8>)
    4200:	4798      	blx	r3
				length += strlen(&message[length]);
    4202:	4658      	mov	r0, fp
    4204:	4b2b      	ldr	r3, [pc, #172]	; (42b4 <grid_port_process_ui+0x2ac>)
    4206:	4798      	blx	r3
    4208:	4406      	add	r6, r0
    420a:	e7db      	b.n	41c4 <grid_port_process_ui+0x1bc>
		if (packetvalid){
    420c:	2c00      	cmp	r4, #0
    420e:	d0ae      	beq.n	416e <grid_port_process_ui+0x166>
			por->cooldown += (10+por->cooldown);
    4210:	f8d8 3000 	ldr.w	r3, [r8]
    4214:	005b      	lsls	r3, r3, #1
    4216:	330a      	adds	r3, #10
    4218:	f8c8 3000 	str.w	r3, [r8]
			grid_sys_state.next_broadcast_message_id++;
    421c:	4a2c      	ldr	r2, [pc, #176]	; (42d0 <grid_port_process_ui+0x2c8>)
    421e:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    4222:	3301      	adds	r3, #1
    4224:	b2db      	uxtb	r3, r3
    4226:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    422a:	ac0a      	add	r4, sp, #40	; 0x28
    422c:	19a5      	adds	r5, r4, r6
    422e:	2204      	movs	r2, #4
    4230:	492a      	ldr	r1, [pc, #168]	; (42dc <grid_port_process_ui+0x2d4>)
    4232:	4628      	mov	r0, r5
    4234:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 42d8 <grid_port_process_ui+0x2d0>
    4238:	47c0      	blx	r8
			length += strlen(&message[length]);
    423a:	4628      	mov	r0, r5
    423c:	4f1d      	ldr	r7, [pc, #116]	; (42b4 <grid_port_process_ui+0x2ac>)
    423e:	47b8      	blx	r7
    4240:	1835      	adds	r5, r6, r0
			sprintf(length_string, "%02x", length);
    4242:	462a      	mov	r2, r5
    4244:	4926      	ldr	r1, [pc, #152]	; (42e0 <grid_port_process_ui+0x2d8>)
    4246:	a808      	add	r0, sp, #32
    4248:	47c0      	blx	r8
			message[2] = length_string[0];
    424a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    424e:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    4250:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    4254:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    4256:	4b23      	ldr	r3, [pc, #140]	; (42e4 <grid_port_process_ui+0x2dc>)
    4258:	6818      	ldr	r0, [r3, #0]
    425a:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    425c:	1960      	adds	r0, r4, r5
    425e:	47b8      	blx	r7
    4260:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_get_checksum(message, length);
    4262:	4629      	mov	r1, r5
    4264:	4620      	mov	r0, r4
    4266:	4b20      	ldr	r3, [pc, #128]	; (42e8 <grid_port_process_ui+0x2e0>)
    4268:	4798      	blx	r3
			grid_msg_set_checksum(message, length, checksum);
    426a:	b2c2      	uxtb	r2, r0
    426c:	4629      	mov	r1, r5
    426e:	4620      	mov	r0, r4
    4270:	4b1e      	ldr	r3, [pc, #120]	; (42ec <grid_port_process_ui+0x2e4>)
    4272:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    4274:	b2a9      	uxth	r1, r5
    4276:	481e      	ldr	r0, [pc, #120]	; (42f0 <grid_port_process_ui+0x2e8>)
    4278:	4b0c      	ldr	r3, [pc, #48]	; (42ac <grid_port_process_ui+0x2a4>)
    427a:	4798      	blx	r3
    427c:	2800      	cmp	r0, #0
    427e:	f43f af76 	beq.w	416e <grid_port_process_ui+0x166>
				for(uint32_t i = 0; i<length; i++){
    4282:	b16d      	cbz	r5, 42a0 <grid_port_process_ui+0x298>
    4284:	f10d 0427 	add.w	r4, sp, #39	; 0x27
    4288:	ab4a      	add	r3, sp, #296	; 0x128
    428a:	441d      	add	r5, r3
    428c:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    4290:	4f17      	ldr	r7, [pc, #92]	; (42f0 <grid_port_process_ui+0x2e8>)
    4292:	4e0c      	ldr	r6, [pc, #48]	; (42c4 <grid_port_process_ui+0x2bc>)
    4294:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4298:	4638      	mov	r0, r7
    429a:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    429c:	42a5      	cmp	r5, r4
    429e:	d1f9      	bne.n	4294 <grid_port_process_ui+0x28c>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    42a0:	4813      	ldr	r0, [pc, #76]	; (42f0 <grid_port_process_ui+0x2e8>)
    42a2:	4b09      	ldr	r3, [pc, #36]	; (42c8 <grid_port_process_ui+0x2c0>)
    42a4:	4798      	blx	r3
    42a6:	e762      	b.n	416e <grid_port_process_ui+0x166>
    42a8:	20001d0c 	.word	0x20001d0c
    42ac:	00001375 	.word	0x00001375
    42b0:	00003fbd 	.word	0x00003fbd
    42b4:	0000c1ed 	.word	0x0000c1ed
    42b8:	000046af 	.word	0x000046af
    42bc:	200026a4 	.word	0x200026a4
    42c0:	00003fff 	.word	0x00003fff
    42c4:	000013a5 	.word	0x000013a5
    42c8:	000013c1 	.word	0x000013c1
    42cc:	0000bdb7 	.word	0x0000bdb7
    42d0:	20001d1c 	.word	0x20001d1c
    42d4:	0000d3b8 	.word	0x0000d3b8
    42d8:	0000c1a5 	.word	0x0000c1a5
    42dc:	0000d3d0 	.word	0x0000d3d0
    42e0:	0000d3d4 	.word	0x0000d3d4
    42e4:	0000d3dc 	.word	0x0000d3dc
    42e8:	00003bcd 	.word	0x00003bcd
    42ec:	00003be9 	.word	0x00003be9
    42f0:	20001cec 	.word	0x20001cec
    42f4:	000046a1 	.word	0x000046a1
    42f8:	20001784 	.word	0x20001784
    42fc:	200035ec 	.word	0x200035ec
    4300:	20002bc8 	.word	0x20002bc8
    4304:	4770      	bx	lr
    4306:	bf00      	nop

00004308 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    4308:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    430a:	6983      	ldr	r3, [r0, #24]
    430c:	b103      	cbz	r3, 4310 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    430e:	4798      	blx	r3
    4310:	bd08      	pop	{r3, pc}

00004312 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    4312:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    4314:	69c3      	ldr	r3, [r0, #28]
    4316:	b103      	cbz	r3, 431a <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    4318:	4798      	blx	r3
    431a:	bd08      	pop	{r3, pc}

0000431c <adc_async_channel_conversion_done>:
{
    431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4320:	4606      	mov	r6, r0
    4322:	460f      	mov	r7, r1
    4324:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    4326:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    4328:	5c5c      	ldrb	r4, [r3, r1]
    432a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    432e:	00e4      	lsls	r4, r4, #3
    4330:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    4334:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    4338:	f105 0a04 	add.w	sl, r5, #4
    433c:	b2d1      	uxtb	r1, r2
    433e:	4650      	mov	r0, sl
    4340:	4b0c      	ldr	r3, [pc, #48]	; (4374 <adc_async_channel_conversion_done+0x58>)
    4342:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    4344:	4630      	mov	r0, r6
    4346:	4b0c      	ldr	r3, [pc, #48]	; (4378 <adc_async_channel_conversion_done+0x5c>)
    4348:	4798      	blx	r3
    434a:	2801      	cmp	r0, #1
    434c:	d907      	bls.n	435e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    434e:	ea4f 2119 	mov.w	r1, r9, lsr #8
    4352:	4650      	mov	r0, sl
    4354:	4b07      	ldr	r3, [pc, #28]	; (4374 <adc_async_channel_conversion_done+0x58>)
    4356:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    4358:	8aab      	ldrh	r3, [r5, #20]
    435a:	3301      	adds	r3, #1
    435c:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    435e:	8aab      	ldrh	r3, [r5, #20]
    4360:	3301      	adds	r3, #1
    4362:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    4364:	f858 3004 	ldr.w	r3, [r8, r4]
    4368:	b113      	cbz	r3, 4370 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    436a:	4639      	mov	r1, r7
    436c:	4630      	mov	r0, r6
    436e:	4798      	blx	r3
    4370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4374:	00005b75 	.word	0x00005b75
    4378:	00005f13 	.word	0x00005f13

0000437c <adc_async_init>:
{
    437c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4380:	4689      	mov	r9, r1
    4382:	4616      	mov	r6, r2
    4384:	461c      	mov	r4, r3
    4386:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    438a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    438c:	4607      	mov	r7, r0
    438e:	b140      	cbz	r0, 43a2 <adc_async_init+0x26>
    4390:	b149      	cbz	r1, 43a6 <adc_async_init+0x2a>
    4392:	b152      	cbz	r2, 43aa <adc_async_init+0x2e>
    4394:	f1b8 0f00 	cmp.w	r8, #0
    4398:	d009      	beq.n	43ae <adc_async_init+0x32>
    439a:	1c28      	adds	r0, r5, #0
    439c:	bf18      	it	ne
    439e:	2001      	movne	r0, #1
    43a0:	e006      	b.n	43b0 <adc_async_init+0x34>
    43a2:	2000      	movs	r0, #0
    43a4:	e004      	b.n	43b0 <adc_async_init+0x34>
    43a6:	2000      	movs	r0, #0
    43a8:	e002      	b.n	43b0 <adc_async_init+0x34>
    43aa:	2000      	movs	r0, #0
    43ac:	e000      	b.n	43b0 <adc_async_init+0x34>
    43ae:	2000      	movs	r0, #0
    43b0:	f8df b064 	ldr.w	fp, [pc, #100]	; 4418 <adc_async_init+0x9c>
    43b4:	223f      	movs	r2, #63	; 0x3f
    43b6:	4659      	mov	r1, fp
    43b8:	f8df a060 	ldr.w	sl, [pc, #96]	; 441c <adc_async_init+0xa0>
    43bc:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    43be:	1c60      	adds	r0, r4, #1
    43c0:	2240      	movs	r2, #64	; 0x40
    43c2:	4659      	mov	r1, fp
    43c4:	4580      	cmp	r8, r0
    43c6:	bfcc      	ite	gt
    43c8:	2000      	movgt	r0, #0
    43ca:	2001      	movle	r0, #1
    43cc:	47d0      	blx	sl
	device = &descr->device;
    43ce:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    43d0:	21ff      	movs	r1, #255	; 0xff
    43d2:	b2da      	uxtb	r2, r3
    43d4:	54b1      	strb	r1, [r6, r2]
    43d6:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    43d8:	b2da      	uxtb	r2, r3
    43da:	42a2      	cmp	r2, r4
    43dc:	d9f9      	bls.n	43d2 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    43de:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    43e0:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    43e4:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    43e8:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    43ea:	4649      	mov	r1, r9
    43ec:	4638      	mov	r0, r7
    43ee:	4b06      	ldr	r3, [pc, #24]	; (4408 <adc_async_init+0x8c>)
    43f0:	4798      	blx	r3
	if (init_status) {
    43f2:	4603      	mov	r3, r0
    43f4:	b928      	cbnz	r0, 4402 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    43f6:	4a05      	ldr	r2, [pc, #20]	; (440c <adc_async_init+0x90>)
    43f8:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    43fa:	4a05      	ldr	r2, [pc, #20]	; (4410 <adc_async_init+0x94>)
    43fc:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    43fe:	4a05      	ldr	r2, [pc, #20]	; (4414 <adc_async_init+0x98>)
    4400:	607a      	str	r2, [r7, #4]
}
    4402:	4618      	mov	r0, r3
    4404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4408:	00005de1 	.word	0x00005de1
    440c:	0000431d 	.word	0x0000431d
    4410:	00004309 	.word	0x00004309
    4414:	00004313 	.word	0x00004313
    4418:	0000d3e0 	.word	0x0000d3e0
    441c:	00005a39 	.word	0x00005a39

00004420 <adc_async_register_channel_buffer>:
{
    4420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4424:	460e      	mov	r6, r1
    4426:	4617      	mov	r7, r2
    4428:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    442a:	4605      	mov	r5, r0
    442c:	2800      	cmp	r0, #0
    442e:	d040      	beq.n	44b2 <adc_async_register_channel_buffer+0x92>
    4430:	2a00      	cmp	r2, #0
    4432:	d040      	beq.n	44b6 <adc_async_register_channel_buffer+0x96>
    4434:	1c18      	adds	r0, r3, #0
    4436:	bf18      	it	ne
    4438:	2001      	movne	r0, #1
    443a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 44d4 <adc_async_register_channel_buffer+0xb4>
    443e:	2266      	movs	r2, #102	; 0x66
    4440:	4649      	mov	r1, r9
    4442:	4c22      	ldr	r4, [pc, #136]	; (44cc <adc_async_register_channel_buffer+0xac>)
    4444:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    4446:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    444a:	2267      	movs	r2, #103	; 0x67
    444c:	4649      	mov	r1, r9
    444e:	42b0      	cmp	r0, r6
    4450:	bf34      	ite	cc
    4452:	2000      	movcc	r0, #0
    4454:	2001      	movcs	r0, #1
    4456:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    4458:	6a29      	ldr	r1, [r5, #32]
    445a:	5d8b      	ldrb	r3, [r1, r6]
    445c:	2bff      	cmp	r3, #255	; 0xff
    445e:	d12c      	bne.n	44ba <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    4460:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    4464:	2300      	movs	r3, #0
    4466:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    4468:	b2da      	uxtb	r2, r3
    446a:	5c8a      	ldrb	r2, [r1, r2]
    446c:	2aff      	cmp	r2, #255	; 0xff
			index++;
    446e:	bf1c      	itt	ne
    4470:	3401      	addne	r4, #1
    4472:	b2e4      	uxtbne	r4, r4
    4474:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    4476:	b2da      	uxtb	r2, r3
    4478:	4282      	cmp	r2, r0
    447a:	d9f5      	bls.n	4468 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    447c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4480:	42a3      	cmp	r3, r4
    4482:	d31d      	bcc.n	44c0 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    4484:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    4488:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    448c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    448e:	4448      	add	r0, r9
    4490:	4642      	mov	r2, r8
    4492:	4639      	mov	r1, r7
    4494:	3004      	adds	r0, #4
    4496:	4b0e      	ldr	r3, [pc, #56]	; (44d0 <adc_async_register_channel_buffer+0xb0>)
    4498:	4798      	blx	r3
    449a:	4602      	mov	r2, r0
    449c:	b998      	cbnz	r0, 44c6 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    449e:	6a2b      	ldr	r3, [r5, #32]
    44a0:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    44a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44a4:	4499      	add	r9, r3
    44a6:	2300      	movs	r3, #0
    44a8:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    44ac:	4610      	mov	r0, r2
    44ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    44b2:	2000      	movs	r0, #0
    44b4:	e7c1      	b.n	443a <adc_async_register_channel_buffer+0x1a>
    44b6:	2000      	movs	r0, #0
    44b8:	e7bf      	b.n	443a <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    44ba:	f06f 020c 	mvn.w	r2, #12
    44be:	e7f5      	b.n	44ac <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    44c0:	f06f 021b 	mvn.w	r2, #27
    44c4:	e7f2      	b.n	44ac <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    44c6:	f06f 020c 	mvn.w	r2, #12
    44ca:	e7ef      	b.n	44ac <adc_async_register_channel_buffer+0x8c>
    44cc:	00005a39 	.word	0x00005a39
    44d0:	00005ae1 	.word	0x00005ae1
    44d4:	0000d3e0 	.word	0x0000d3e0

000044d8 <adc_async_enable_channel>:
{
    44d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44da:	460d      	mov	r5, r1
	ASSERT(descr);
    44dc:	4f0b      	ldr	r7, [pc, #44]	; (450c <adc_async_enable_channel+0x34>)
    44de:	4604      	mov	r4, r0
    44e0:	2283      	movs	r2, #131	; 0x83
    44e2:	4639      	mov	r1, r7
    44e4:	3000      	adds	r0, #0
    44e6:	bf18      	it	ne
    44e8:	2001      	movne	r0, #1
    44ea:	4e09      	ldr	r6, [pc, #36]	; (4510 <adc_async_enable_channel+0x38>)
    44ec:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    44ee:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    44f2:	2284      	movs	r2, #132	; 0x84
    44f4:	4639      	mov	r1, r7
    44f6:	42a8      	cmp	r0, r5
    44f8:	bf34      	ite	cc
    44fa:	2000      	movcc	r0, #0
    44fc:	2001      	movcs	r0, #1
    44fe:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    4500:	4629      	mov	r1, r5
    4502:	4620      	mov	r0, r4
    4504:	4b03      	ldr	r3, [pc, #12]	; (4514 <adc_async_enable_channel+0x3c>)
    4506:	4798      	blx	r3
}
    4508:	2000      	movs	r0, #0
    450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    450c:	0000d3e0 	.word	0x0000d3e0
    4510:	00005a39 	.word	0x00005a39
    4514:	00005efd 	.word	0x00005efd

00004518 <adc_async_register_callback>:
{
    4518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    451c:	460e      	mov	r6, r1
    451e:	4614      	mov	r4, r2
    4520:	4699      	mov	r9, r3
	ASSERT(descr);
    4522:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4594 <adc_async_register_callback+0x7c>
    4526:	4605      	mov	r5, r0
    4528:	229c      	movs	r2, #156	; 0x9c
    452a:	4641      	mov	r1, r8
    452c:	3000      	adds	r0, #0
    452e:	bf18      	it	ne
    4530:	2001      	movne	r0, #1
    4532:	4f16      	ldr	r7, [pc, #88]	; (458c <adc_async_register_callback+0x74>)
    4534:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    4536:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    453a:	229d      	movs	r2, #157	; 0x9d
    453c:	4641      	mov	r1, r8
    453e:	42b0      	cmp	r0, r6
    4540:	bf34      	ite	cc
    4542:	2000      	movcc	r0, #0
    4544:	2001      	movcs	r0, #1
    4546:	47b8      	blx	r7
	switch (type) {
    4548:	2c01      	cmp	r4, #1
    454a:	d019      	beq.n	4580 <adc_async_register_callback+0x68>
    454c:	b12c      	cbz	r4, 455a <adc_async_register_callback+0x42>
    454e:	2c02      	cmp	r4, #2
    4550:	d019      	beq.n	4586 <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    4552:	f06f 000c 	mvn.w	r0, #12
}
    4556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    455a:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    455c:	5d9b      	ldrb	r3, [r3, r6]
    455e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4560:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4564:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    4568:	f119 0300 	adds.w	r3, r9, #0
    456c:	bf18      	it	ne
    456e:	2301      	movne	r3, #1
    4570:	4622      	mov	r2, r4
    4572:	4631      	mov	r1, r6
    4574:	4628      	mov	r0, r5
    4576:	4c06      	ldr	r4, [pc, #24]	; (4590 <adc_async_register_callback+0x78>)
    4578:	47a0      	blx	r4
	return ERR_NONE;
    457a:	2000      	movs	r0, #0
    457c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    4580:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    4584:	e7f0      	b.n	4568 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    4586:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    458a:	e7ed      	b.n	4568 <adc_async_register_callback+0x50>
    458c:	00005a39 	.word	0x00005a39
    4590:	00005f3b 	.word	0x00005f3b
    4594:	0000d3e0 	.word	0x0000d3e0

00004598 <adc_async_read_channel>:
{
    4598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    459c:	b083      	sub	sp, #12
    459e:	4688      	mov	r8, r1
    45a0:	4691      	mov	r9, r2
    45a2:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    45a4:	4604      	mov	r4, r0
    45a6:	2800      	cmp	r0, #0
    45a8:	d04f      	beq.n	464a <adc_async_read_channel+0xb2>
    45aa:	2a00      	cmp	r2, #0
    45ac:	d04f      	beq.n	464e <adc_async_read_channel+0xb6>
    45ae:	1c18      	adds	r0, r3, #0
    45b0:	bf18      	it	ne
    45b2:	2001      	movne	r0, #1
    45b4:	4f29      	ldr	r7, [pc, #164]	; (465c <adc_async_read_channel+0xc4>)
    45b6:	22bc      	movs	r2, #188	; 0xbc
    45b8:	4639      	mov	r1, r7
    45ba:	4e29      	ldr	r6, [pc, #164]	; (4660 <adc_async_read_channel+0xc8>)
    45bc:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    45be:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    45c2:	22bd      	movs	r2, #189	; 0xbd
    45c4:	4639      	mov	r1, r7
    45c6:	4540      	cmp	r0, r8
    45c8:	bf34      	ite	cc
    45ca:	2000      	movcc	r0, #0
    45cc:	2001      	movcs	r0, #1
    45ce:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    45d0:	4620      	mov	r0, r4
    45d2:	4b24      	ldr	r3, [pc, #144]	; (4664 <adc_async_read_channel+0xcc>)
    45d4:	4798      	blx	r3
	ASSERT(!(length % data_size));
    45d6:	fb95 f3f0 	sdiv	r3, r5, r0
    45da:	fb03 5010 	mls	r0, r3, r0, r5
    45de:	22bf      	movs	r2, #191	; 0xbf
    45e0:	4639      	mov	r1, r7
    45e2:	fab0 f080 	clz	r0, r0
    45e6:	0940      	lsrs	r0, r0, #5
    45e8:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    45ea:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    45ec:	f813 b008 	ldrb.w	fp, [r3, r8]
    45f0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    45f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    45f6:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    45fa:	a801      	add	r0, sp, #4
    45fc:	4b1a      	ldr	r3, [pc, #104]	; (4668 <adc_async_read_channel+0xd0>)
    45fe:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    4600:	f10b 0a04 	add.w	sl, fp, #4
    4604:	4650      	mov	r0, sl
    4606:	4b19      	ldr	r3, [pc, #100]	; (466c <adc_async_read_channel+0xd4>)
    4608:	4798      	blx	r3
    460a:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    460c:	a801      	add	r0, sp, #4
    460e:	4b18      	ldr	r3, [pc, #96]	; (4670 <adc_async_read_channel+0xd8>)
    4610:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    4612:	f1b8 0f00 	cmp.w	r8, #0
    4616:	d01c      	beq.n	4652 <adc_async_read_channel+0xba>
    4618:	b1ed      	cbz	r5, 4656 <adc_async_read_channel+0xbe>
    461a:	3d01      	subs	r5, #1
    461c:	b2ad      	uxth	r5, r5
    461e:	3502      	adds	r5, #2
    4620:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    4622:	4f14      	ldr	r7, [pc, #80]	; (4674 <adc_async_read_channel+0xdc>)
    4624:	b2a6      	uxth	r6, r4
    4626:	1e61      	subs	r1, r4, #1
    4628:	4449      	add	r1, r9
    462a:	4650      	mov	r0, sl
    462c:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    462e:	4544      	cmp	r4, r8
    4630:	d002      	beq.n	4638 <adc_async_read_channel+0xa0>
    4632:	3401      	adds	r4, #1
    4634:	42ac      	cmp	r4, r5
    4636:	d1f5      	bne.n	4624 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    4638:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    463c:	1b9b      	subs	r3, r3, r6
    463e:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    4642:	4630      	mov	r0, r6
    4644:	b003      	add	sp, #12
    4646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    464a:	2000      	movs	r0, #0
    464c:	e7b2      	b.n	45b4 <adc_async_read_channel+0x1c>
    464e:	2000      	movs	r0, #0
    4650:	e7b0      	b.n	45b4 <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    4652:	2600      	movs	r6, #0
    4654:	e7f0      	b.n	4638 <adc_async_read_channel+0xa0>
    4656:	2600      	movs	r6, #0
    4658:	e7ee      	b.n	4638 <adc_async_read_channel+0xa0>
    465a:	bf00      	nop
    465c:	0000d3e0 	.word	0x0000d3e0
    4660:	00005a39 	.word	0x00005a39
    4664:	00005f13 	.word	0x00005f13
    4668:	000046a1 	.word	0x000046a1
    466c:	00005bb5 	.word	0x00005bb5
    4670:	000046af 	.word	0x000046af
    4674:	00005b31 	.word	0x00005b31

00004678 <adc_async_start_conversion>:
{
    4678:	b510      	push	{r4, lr}
	ASSERT(descr);
    467a:	4604      	mov	r4, r0
    467c:	22d6      	movs	r2, #214	; 0xd6
    467e:	4905      	ldr	r1, [pc, #20]	; (4694 <adc_async_start_conversion+0x1c>)
    4680:	3000      	adds	r0, #0
    4682:	bf18      	it	ne
    4684:	2001      	movne	r0, #1
    4686:	4b04      	ldr	r3, [pc, #16]	; (4698 <adc_async_start_conversion+0x20>)
    4688:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    468a:	4620      	mov	r0, r4
    468c:	4b03      	ldr	r3, [pc, #12]	; (469c <adc_async_start_conversion+0x24>)
    468e:	4798      	blx	r3
}
    4690:	2000      	movs	r0, #0
    4692:	bd10      	pop	{r4, pc}
    4694:	0000d3e0 	.word	0x0000d3e0
    4698:	00005a39 	.word	0x00005a39
    469c:	00005f25 	.word	0x00005f25

000046a0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    46a0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    46a4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    46a6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    46a8:	f3bf 8f5f 	dmb	sy
    46ac:	4770      	bx	lr

000046ae <atomic_leave_critical>:
    46ae:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    46b2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    46b4:	f383 8810 	msr	PRIMASK, r3
    46b8:	4770      	bx	lr
	...

000046bc <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    46bc:	b538      	push	{r3, r4, r5, lr}
    46be:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    46c0:	4605      	mov	r5, r0
    46c2:	b158      	cbz	r0, 46dc <crc_sync_init+0x20>
    46c4:	1c08      	adds	r0, r1, #0
    46c6:	bf18      	it	ne
    46c8:	2001      	movne	r0, #1
    46ca:	222b      	movs	r2, #43	; 0x2b
    46cc:	4904      	ldr	r1, [pc, #16]	; (46e0 <crc_sync_init+0x24>)
    46ce:	4b05      	ldr	r3, [pc, #20]	; (46e4 <crc_sync_init+0x28>)
    46d0:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    46d2:	4621      	mov	r1, r4
    46d4:	4628      	mov	r0, r5
    46d6:	4b04      	ldr	r3, [pc, #16]	; (46e8 <crc_sync_init+0x2c>)
    46d8:	4798      	blx	r3
}
    46da:	bd38      	pop	{r3, r4, r5, pc}
    46dc:	2000      	movs	r0, #0
    46de:	e7f4      	b.n	46ca <crc_sync_init+0xe>
    46e0:	0000d3fc 	.word	0x0000d3fc
    46e4:	00005a39 	.word	0x00005a39
    46e8:	00006325 	.word	0x00006325

000046ec <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    46ec:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    46ee:	4b02      	ldr	r3, [pc, #8]	; (46f8 <delay_init+0xc>)
    46f0:	6018      	str	r0, [r3, #0]
    46f2:	4b02      	ldr	r3, [pc, #8]	; (46fc <delay_init+0x10>)
    46f4:	4798      	blx	r3
    46f6:	bd08      	pop	{r3, pc}
    46f8:	20000648 	.word	0x20000648
    46fc:	00007c65 	.word	0x00007c65

00004700 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4700:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4702:	4b04      	ldr	r3, [pc, #16]	; (4714 <delay_us+0x14>)
    4704:	681c      	ldr	r4, [r3, #0]
    4706:	4b04      	ldr	r3, [pc, #16]	; (4718 <delay_us+0x18>)
    4708:	4798      	blx	r3
    470a:	4601      	mov	r1, r0
    470c:	4620      	mov	r0, r4
    470e:	4b03      	ldr	r3, [pc, #12]	; (471c <delay_us+0x1c>)
    4710:	4798      	blx	r3
    4712:	bd10      	pop	{r4, pc}
    4714:	20000648 	.word	0x20000648
    4718:	00005fe9 	.word	0x00005fe9
    471c:	00007c79 	.word	0x00007c79

00004720 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4720:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4722:	4b04      	ldr	r3, [pc, #16]	; (4734 <delay_ms+0x14>)
    4724:	681c      	ldr	r4, [r3, #0]
    4726:	4b04      	ldr	r3, [pc, #16]	; (4738 <delay_ms+0x18>)
    4728:	4798      	blx	r3
    472a:	4601      	mov	r1, r0
    472c:	4620      	mov	r0, r4
    472e:	4b03      	ldr	r3, [pc, #12]	; (473c <delay_ms+0x1c>)
    4730:	4798      	blx	r3
    4732:	bd10      	pop	{r4, pc}
    4734:	20000648 	.word	0x20000648
    4738:	00005ff1 	.word	0x00005ff1
    473c:	00007c79 	.word	0x00007c79

00004740 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4740:	b508      	push	{r3, lr}
	return _event_system_init();
    4742:	4b01      	ldr	r3, [pc, #4]	; (4748 <event_system_init+0x8>)
    4744:	4798      	blx	r3
}
    4746:	bd08      	pop	{r3, pc}
    4748:	0000632d 	.word	0x0000632d

0000474c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    474c:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    474e:	6943      	ldr	r3, [r0, #20]
    4750:	b103      	cbz	r3, 4754 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    4752:	4798      	blx	r3
    4754:	bd08      	pop	{r3, pc}

00004756 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    4756:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    4758:	6983      	ldr	r3, [r0, #24]
    475a:	b103      	cbz	r3, 475e <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    475c:	4798      	blx	r3
    475e:	bd08      	pop	{r3, pc}

00004760 <flash_init>:
{
    4760:	b538      	push	{r3, r4, r5, lr}
    4762:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    4764:	4604      	mov	r4, r0
    4766:	b190      	cbz	r0, 478e <flash_init+0x2e>
    4768:	1c08      	adds	r0, r1, #0
    476a:	bf18      	it	ne
    476c:	2001      	movne	r0, #1
    476e:	2238      	movs	r2, #56	; 0x38
    4770:	4908      	ldr	r1, [pc, #32]	; (4794 <flash_init+0x34>)
    4772:	4b09      	ldr	r3, [pc, #36]	; (4798 <flash_init+0x38>)
    4774:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    4776:	4629      	mov	r1, r5
    4778:	4620      	mov	r0, r4
    477a:	4b08      	ldr	r3, [pc, #32]	; (479c <flash_init+0x3c>)
    477c:	4798      	blx	r3
	if (rc) {
    477e:	4603      	mov	r3, r0
    4780:	b918      	cbnz	r0, 478a <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    4782:	4a07      	ldr	r2, [pc, #28]	; (47a0 <flash_init+0x40>)
    4784:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    4786:	4a07      	ldr	r2, [pc, #28]	; (47a4 <flash_init+0x44>)
    4788:	6062      	str	r2, [r4, #4]
}
    478a:	4618      	mov	r0, r3
    478c:	bd38      	pop	{r3, r4, r5, pc}
    478e:	2000      	movs	r0, #0
    4790:	e7ed      	b.n	476e <flash_init+0xe>
    4792:	bf00      	nop
    4794:	0000d418 	.word	0x0000d418
    4798:	00005a39 	.word	0x00005a39
    479c:	00006439 	.word	0x00006439
    47a0:	0000474d 	.word	0x0000474d
    47a4:	00004757 	.word	0x00004757

000047a8 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    47a8:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    47aa:	8843      	ldrh	r3, [r0, #2]
    47ac:	f413 7f80 	tst.w	r3, #256	; 0x100
    47b0:	d102      	bne.n	47b8 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    47b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    47b4:	b103      	cbz	r3, 47b8 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    47b6:	4798      	blx	r3
    47b8:	bd08      	pop	{r3, pc}

000047ba <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    47ba:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    47bc:	8843      	ldrh	r3, [r0, #2]
    47be:	f413 7f80 	tst.w	r3, #256	; 0x100
    47c2:	d102      	bne.n	47ca <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    47c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    47c6:	b103      	cbz	r3, 47ca <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    47c8:	4798      	blx	r3
    47ca:	bd08      	pop	{r3, pc}

000047cc <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    47cc:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    47ce:	8843      	ldrh	r3, [r0, #2]
    47d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    47d4:	d102      	bne.n	47dc <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    47d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    47d8:	b103      	cbz	r3, 47dc <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    47da:	4798      	blx	r3
    47dc:	bd08      	pop	{r3, pc}
	...

000047e0 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    47e0:	b510      	push	{r4, lr}
    47e2:	b084      	sub	sp, #16
    47e4:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    47e6:	8a83      	ldrh	r3, [r0, #20]
    47e8:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    47ec:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    47ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    47f2:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    47f6:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    47f8:	a901      	add	r1, sp, #4
    47fa:	3828      	subs	r0, #40	; 0x28
    47fc:	4b03      	ldr	r3, [pc, #12]	; (480c <i2c_m_async_write+0x2c>)
    47fe:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    4800:	2800      	cmp	r0, #0
    4802:	bf08      	it	eq
    4804:	4620      	moveq	r0, r4
    4806:	b004      	add	sp, #16
    4808:	bd10      	pop	{r4, pc}
    480a:	bf00      	nop
    480c:	000071b5 	.word	0x000071b5

00004810 <i2c_m_async_read>:
{
    4810:	b510      	push	{r4, lr}
    4812:	b084      	sub	sp, #16
    4814:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    4816:	8a83      	ldrh	r3, [r0, #20]
    4818:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    481c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    481e:	f248 0301 	movw	r3, #32769	; 0x8001
    4822:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    4826:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4828:	a901      	add	r1, sp, #4
    482a:	3828      	subs	r0, #40	; 0x28
    482c:	4b03      	ldr	r3, [pc, #12]	; (483c <i2c_m_async_read+0x2c>)
    482e:	4798      	blx	r3
}
    4830:	2800      	cmp	r0, #0
    4832:	bf08      	it	eq
    4834:	4620      	moveq	r0, r4
    4836:	b004      	add	sp, #16
    4838:	bd10      	pop	{r4, pc}
    483a:	bf00      	nop
    483c:	000071b5 	.word	0x000071b5

00004840 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    4840:	b570      	push	{r4, r5, r6, lr}
    4842:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    4844:	4604      	mov	r4, r0
    4846:	2289      	movs	r2, #137	; 0x89
    4848:	490f      	ldr	r1, [pc, #60]	; (4888 <i2c_m_async_init+0x48>)
    484a:	3000      	adds	r0, #0
    484c:	bf18      	it	ne
    484e:	2001      	movne	r0, #1
    4850:	4b0e      	ldr	r3, [pc, #56]	; (488c <i2c_m_async_init+0x4c>)
    4852:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4854:	4629      	mov	r1, r5
    4856:	4620      	mov	r0, r4
    4858:	4b0d      	ldr	r3, [pc, #52]	; (4890 <i2c_m_async_init+0x50>)
    485a:	4798      	blx	r3
	if (init_status) {
    485c:	4605      	mov	r5, r0
    485e:	b108      	cbz	r0, 4864 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    4860:	4628      	mov	r0, r5
    4862:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    4864:	4b0b      	ldr	r3, [pc, #44]	; (4894 <i2c_m_async_init+0x54>)
    4866:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4868:	4b0b      	ldr	r3, [pc, #44]	; (4898 <i2c_m_async_init+0x58>)
    486a:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    486c:	4a0b      	ldr	r2, [pc, #44]	; (489c <i2c_m_async_init+0x5c>)
    486e:	2101      	movs	r1, #1
    4870:	4620      	mov	r0, r4
    4872:	4e0b      	ldr	r6, [pc, #44]	; (48a0 <i2c_m_async_init+0x60>)
    4874:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    4876:	4a0b      	ldr	r2, [pc, #44]	; (48a4 <i2c_m_async_init+0x64>)
    4878:	2102      	movs	r1, #2
    487a:	4620      	mov	r0, r4
    487c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    487e:	4a0a      	ldr	r2, [pc, #40]	; (48a8 <i2c_m_async_init+0x68>)
    4880:	2100      	movs	r1, #0
    4882:	4620      	mov	r0, r4
    4884:	47b0      	blx	r6
	return ERR_NONE;
    4886:	e7eb      	b.n	4860 <i2c_m_async_init+0x20>
    4888:	0000d430 	.word	0x0000d430
    488c:	00005a39 	.word	0x00005a39
    4890:	00007135 	.word	0x00007135
    4894:	00004811 	.word	0x00004811
    4898:	000047e1 	.word	0x000047e1
    489c:	000047a9 	.word	0x000047a9
    48a0:	000072e5 	.word	0x000072e5
    48a4:	000047bb 	.word	0x000047bb
    48a8:	000047cd 	.word	0x000047cd

000048ac <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    48ac:	b570      	push	{r4, r5, r6, lr}
    48ae:	460d      	mov	r5, r1
    48b0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    48b2:	4604      	mov	r4, r0
    48b4:	b160      	cbz	r0, 48d0 <io_write+0x24>
    48b6:	1c08      	adds	r0, r1, #0
    48b8:	bf18      	it	ne
    48ba:	2001      	movne	r0, #1
    48bc:	2234      	movs	r2, #52	; 0x34
    48be:	4905      	ldr	r1, [pc, #20]	; (48d4 <io_write+0x28>)
    48c0:	4b05      	ldr	r3, [pc, #20]	; (48d8 <io_write+0x2c>)
    48c2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    48c4:	6823      	ldr	r3, [r4, #0]
    48c6:	4632      	mov	r2, r6
    48c8:	4629      	mov	r1, r5
    48ca:	4620      	mov	r0, r4
    48cc:	4798      	blx	r3
}
    48ce:	bd70      	pop	{r4, r5, r6, pc}
    48d0:	2000      	movs	r0, #0
    48d2:	e7f3      	b.n	48bc <io_write+0x10>
    48d4:	0000d450 	.word	0x0000d450
    48d8:	00005a39 	.word	0x00005a39

000048dc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    48dc:	b570      	push	{r4, r5, r6, lr}
    48de:	460d      	mov	r5, r1
    48e0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    48e2:	4604      	mov	r4, r0
    48e4:	b160      	cbz	r0, 4900 <io_read+0x24>
    48e6:	1c08      	adds	r0, r1, #0
    48e8:	bf18      	it	ne
    48ea:	2001      	movne	r0, #1
    48ec:	223d      	movs	r2, #61	; 0x3d
    48ee:	4905      	ldr	r1, [pc, #20]	; (4904 <io_read+0x28>)
    48f0:	4b05      	ldr	r3, [pc, #20]	; (4908 <io_read+0x2c>)
    48f2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    48f4:	6863      	ldr	r3, [r4, #4]
    48f6:	4632      	mov	r2, r6
    48f8:	4629      	mov	r1, r5
    48fa:	4620      	mov	r0, r4
    48fc:	4798      	blx	r3
}
    48fe:	bd70      	pop	{r4, r5, r6, pc}
    4900:	2000      	movs	r0, #0
    4902:	e7f3      	b.n	48ec <io_read+0x10>
    4904:	0000d450 	.word	0x0000d450
    4908:	00005a39 	.word	0x00005a39

0000490c <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    490c:	b538      	push	{r3, r4, r5, lr}
    490e:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    4910:	4605      	mov	r5, r0
    4912:	b158      	cbz	r0, 492c <qspi_dma_init+0x20>
    4914:	1c08      	adds	r0, r1, #0
    4916:	bf18      	it	ne
    4918:	2001      	movne	r0, #1
    491a:	2231      	movs	r2, #49	; 0x31
    491c:	4904      	ldr	r1, [pc, #16]	; (4930 <qspi_dma_init+0x24>)
    491e:	4b05      	ldr	r3, [pc, #20]	; (4934 <qspi_dma_init+0x28>)
    4920:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    4922:	4621      	mov	r1, r4
    4924:	4628      	mov	r0, r5
    4926:	4b04      	ldr	r3, [pc, #16]	; (4938 <qspi_dma_init+0x2c>)
    4928:	4798      	blx	r3
}
    492a:	bd38      	pop	{r3, r4, r5, pc}
    492c:	2000      	movs	r0, #0
    492e:	e7f4      	b.n	491a <qspi_dma_init+0xe>
    4930:	0000d464 	.word	0x0000d464
    4934:	00005a39 	.word	0x00005a39
    4938:	00006659 	.word	0x00006659

0000493c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    493e:	460f      	mov	r7, r1
    4940:	4616      	mov	r6, r2
	ASSERT(io);
    4942:	4604      	mov	r4, r0
    4944:	f240 1227 	movw	r2, #295	; 0x127
    4948:	4909      	ldr	r1, [pc, #36]	; (4970 <_spi_m_async_io_write+0x34>)
    494a:	3000      	adds	r0, #0
    494c:	bf18      	it	ne
    494e:	2001      	movne	r0, #1
    4950:	4b08      	ldr	r3, [pc, #32]	; (4974 <_spi_m_async_io_write+0x38>)
    4952:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    4954:	2500      	movs	r5, #0
    4956:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    4958:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    495a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    495c:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    495e:	2310      	movs	r3, #16
    4960:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    4962:	2101      	movs	r1, #1
    4964:	f1a4 0020 	sub.w	r0, r4, #32
    4968:	4b03      	ldr	r3, [pc, #12]	; (4978 <_spi_m_async_io_write+0x3c>)
    496a:	4798      	blx	r3

	return ERR_NONE;
}
    496c:	4628      	mov	r0, r5
    496e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4970:	0000d480 	.word	0x0000d480
    4974:	00005a39 	.word	0x00005a39
    4978:	00007779 	.word	0x00007779

0000497c <_spi_m_async_io_read>:
{
    497c:	b570      	push	{r4, r5, r6, lr}
    497e:	460d      	mov	r5, r1
    4980:	4616      	mov	r6, r2
	ASSERT(io);
    4982:	4604      	mov	r4, r0
    4984:	f240 1205 	movw	r2, #261	; 0x105
    4988:	490c      	ldr	r1, [pc, #48]	; (49bc <_spi_m_async_io_read+0x40>)
    498a:	3000      	adds	r0, #0
    498c:	bf18      	it	ne
    498e:	2001      	movne	r0, #1
    4990:	4b0b      	ldr	r3, [pc, #44]	; (49c0 <_spi_m_async_io_read+0x44>)
    4992:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    4994:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    4996:	2500      	movs	r5, #0
    4998:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    499a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    499c:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    499e:	2310      	movs	r3, #16
    49a0:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    49a2:	3c20      	subs	r4, #32
    49a4:	2101      	movs	r1, #1
    49a6:	4620      	mov	r0, r4
    49a8:	4b06      	ldr	r3, [pc, #24]	; (49c4 <_spi_m_async_io_read+0x48>)
    49aa:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    49ac:	f240 11ff 	movw	r1, #511	; 0x1ff
    49b0:	4620      	mov	r0, r4
    49b2:	4b05      	ldr	r3, [pc, #20]	; (49c8 <_spi_m_async_io_read+0x4c>)
    49b4:	4798      	blx	r3
}
    49b6:	4628      	mov	r0, r5
    49b8:	bd70      	pop	{r4, r5, r6, pc}
    49ba:	bf00      	nop
    49bc:	0000d480 	.word	0x0000d480
    49c0:	00005a39 	.word	0x00005a39
    49c4:	000077ad 	.word	0x000077ad
    49c8:	00007829 	.word	0x00007829

000049cc <_spi_dev_error>:
{
    49cc:	b570      	push	{r4, r5, r6, lr}
    49ce:	4604      	mov	r4, r0
    49d0:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    49d2:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    49d4:	2100      	movs	r1, #0
    49d6:	4b09      	ldr	r3, [pc, #36]	; (49fc <_spi_dev_error+0x30>)
    49d8:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    49da:	2100      	movs	r1, #0
    49dc:	4620      	mov	r0, r4
    49de:	4b08      	ldr	r3, [pc, #32]	; (4a00 <_spi_dev_error+0x34>)
    49e0:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    49e2:	2100      	movs	r1, #0
    49e4:	4620      	mov	r0, r4
    49e6:	4b07      	ldr	r3, [pc, #28]	; (4a04 <_spi_dev_error+0x38>)
    49e8:	4798      	blx	r3
	spi->stat = 0;
    49ea:	2300      	movs	r3, #0
    49ec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    49f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    49f2:	b113      	cbz	r3, 49fa <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    49f4:	4631      	mov	r1, r6
    49f6:	4628      	mov	r0, r5
    49f8:	4798      	blx	r3
    49fa:	bd70      	pop	{r4, r5, r6, pc}
    49fc:	00007779 	.word	0x00007779
    4a00:	000077ad 	.word	0x000077ad
    4a04:	000077ed 	.word	0x000077ed

00004a08 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    4a08:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4a0a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4a0c:	429a      	cmp	r2, r3
    4a0e:	d200      	bcs.n	4a12 <_spi_dev_complete+0xa>
    4a10:	4770      	bx	lr
{
    4a12:	b510      	push	{r4, lr}
    4a14:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    4a16:	2100      	movs	r1, #0
    4a18:	4b04      	ldr	r3, [pc, #16]	; (4a2c <_spi_dev_complete+0x24>)
    4a1a:	4798      	blx	r3
		spi->stat = 0;
    4a1c:	2300      	movs	r3, #0
    4a1e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4a22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4a24:	b10b      	cbz	r3, 4a2a <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    4a26:	1f20      	subs	r0, r4, #4
    4a28:	4798      	blx	r3
    4a2a:	bd10      	pop	{r4, pc}
    4a2c:	000077ed 	.word	0x000077ed

00004a30 <_spi_dev_tx>:
{
    4a30:	b510      	push	{r4, lr}
    4a32:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    4a34:	7903      	ldrb	r3, [r0, #4]
    4a36:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4a38:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4a3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4a3c:	f103 0101 	add.w	r1, r3, #1
    4a40:	6401      	str	r1, [r0, #64]	; 0x40
    4a42:	bf94      	ite	ls
    4a44:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4a46:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4a4a:	4b08      	ldr	r3, [pc, #32]	; (4a6c <_spi_dev_tx+0x3c>)
    4a4c:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    4a4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4a52:	429a      	cmp	r2, r3
    4a54:	d000      	beq.n	4a58 <_spi_dev_tx+0x28>
    4a56:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    4a58:	2100      	movs	r1, #0
    4a5a:	4620      	mov	r0, r4
    4a5c:	4b04      	ldr	r3, [pc, #16]	; (4a70 <_spi_dev_tx+0x40>)
    4a5e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4a60:	2101      	movs	r1, #1
    4a62:	4620      	mov	r0, r4
    4a64:	4b03      	ldr	r3, [pc, #12]	; (4a74 <_spi_dev_tx+0x44>)
    4a66:	4798      	blx	r3
}
    4a68:	e7f5      	b.n	4a56 <_spi_dev_tx+0x26>
    4a6a:	bf00      	nop
    4a6c:	00007829 	.word	0x00007829
    4a70:	00007779 	.word	0x00007779
    4a74:	000077ed 	.word	0x000077ed

00004a78 <_spi_dev_rx>:
{
    4a78:	b570      	push	{r4, r5, r6, lr}
    4a7a:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    4a7c:	6b85      	ldr	r5, [r0, #56]	; 0x38
    4a7e:	b305      	cbz	r5, 4ac2 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    4a80:	7903      	ldrb	r3, [r0, #4]
    4a82:	2b01      	cmp	r3, #1
    4a84:	d916      	bls.n	4ab4 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4a86:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4a88:	1c73      	adds	r3, r6, #1
    4a8a:	6403      	str	r3, [r0, #64]	; 0x40
    4a8c:	4b18      	ldr	r3, [pc, #96]	; (4af0 <_spi_dev_rx+0x78>)
    4a8e:	4798      	blx	r3
    4a90:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    4a94:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4a96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4a98:	4293      	cmp	r3, r2
    4a9a:	d21d      	bcs.n	4ad8 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    4a9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4a9e:	b1b2      	cbz	r2, 4ace <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    4aa0:	7921      	ldrb	r1, [r4, #4]
    4aa2:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4aa4:	bf94      	ite	ls
    4aa6:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4aa8:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    4aac:	4620      	mov	r0, r4
    4aae:	4b11      	ldr	r3, [pc, #68]	; (4af4 <_spi_dev_rx+0x7c>)
    4ab0:	4798      	blx	r3
    4ab2:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4ab4:	6c06      	ldr	r6, [r0, #64]	; 0x40
    4ab6:	1c73      	adds	r3, r6, #1
    4ab8:	6403      	str	r3, [r0, #64]	; 0x40
    4aba:	4b0d      	ldr	r3, [pc, #52]	; (4af0 <_spi_dev_rx+0x78>)
    4abc:	4798      	blx	r3
    4abe:	55a8      	strb	r0, [r5, r6]
    4ac0:	e7e8      	b.n	4a94 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    4ac2:	4b0b      	ldr	r3, [pc, #44]	; (4af0 <_spi_dev_rx+0x78>)
    4ac4:	4798      	blx	r3
		spi->xfercnt++;
    4ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4ac8:	3301      	adds	r3, #1
    4aca:	6423      	str	r3, [r4, #64]	; 0x40
    4acc:	e7e2      	b.n	4a94 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4ace:	88e1      	ldrh	r1, [r4, #6]
    4ad0:	4620      	mov	r0, r4
    4ad2:	4b08      	ldr	r3, [pc, #32]	; (4af4 <_spi_dev_rx+0x7c>)
    4ad4:	4798      	blx	r3
    4ad6:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    4ad8:	2100      	movs	r1, #0
    4ada:	4620      	mov	r0, r4
    4adc:	4b06      	ldr	r3, [pc, #24]	; (4af8 <_spi_dev_rx+0x80>)
    4ade:	4798      	blx	r3
		spi->stat = 0;
    4ae0:	2300      	movs	r3, #0
    4ae2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    4ae6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4ae8:	b10b      	cbz	r3, 4aee <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    4aea:	1f20      	subs	r0, r4, #4
    4aec:	4798      	blx	r3
    4aee:	bd70      	pop	{r4, r5, r6, pc}
    4af0:	00007859 	.word	0x00007859
    4af4:	00007829 	.word	0x00007829
    4af8:	000077ad 	.word	0x000077ad

00004afc <spi_m_async_init>:
{
    4afc:	b570      	push	{r4, r5, r6, lr}
    4afe:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    4b00:	4606      	mov	r6, r0
    4b02:	b330      	cbz	r0, 4b52 <spi_m_async_init+0x56>
    4b04:	1c08      	adds	r0, r1, #0
    4b06:	bf18      	it	ne
    4b08:	2001      	movne	r0, #1
    4b0a:	22a5      	movs	r2, #165	; 0xa5
    4b0c:	4912      	ldr	r1, [pc, #72]	; (4b58 <spi_m_async_init+0x5c>)
    4b0e:	4b13      	ldr	r3, [pc, #76]	; (4b5c <spi_m_async_init+0x60>)
    4b10:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4b12:	4634      	mov	r4, r6
    4b14:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    4b18:	4629      	mov	r1, r5
    4b1a:	4620      	mov	r0, r4
    4b1c:	4b10      	ldr	r3, [pc, #64]	; (4b60 <spi_m_async_init+0x64>)
    4b1e:	4798      	blx	r3
	if (rc >= 0) {
    4b20:	2800      	cmp	r0, #0
    4b22:	db15      	blt.n	4b50 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4b24:	4a0f      	ldr	r2, [pc, #60]	; (4b64 <spi_m_async_init+0x68>)
    4b26:	2100      	movs	r1, #0
    4b28:	4620      	mov	r0, r4
    4b2a:	4d0f      	ldr	r5, [pc, #60]	; (4b68 <spi_m_async_init+0x6c>)
    4b2c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4b2e:	4a0f      	ldr	r2, [pc, #60]	; (4b6c <spi_m_async_init+0x70>)
    4b30:	2101      	movs	r1, #1
    4b32:	4620      	mov	r0, r4
    4b34:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4b36:	4a0e      	ldr	r2, [pc, #56]	; (4b70 <spi_m_async_init+0x74>)
    4b38:	2102      	movs	r1, #2
    4b3a:	4620      	mov	r0, r4
    4b3c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4b3e:	4a0d      	ldr	r2, [pc, #52]	; (4b74 <spi_m_async_init+0x78>)
    4b40:	2103      	movs	r1, #3
    4b42:	4620      	mov	r0, r4
    4b44:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    4b46:	4b0c      	ldr	r3, [pc, #48]	; (4b78 <spi_m_async_init+0x7c>)
    4b48:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4b4a:	4b0c      	ldr	r3, [pc, #48]	; (4b7c <spi_m_async_init+0x80>)
    4b4c:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    4b4e:	2000      	movs	r0, #0
}
    4b50:	bd70      	pop	{r4, r5, r6, pc}
    4b52:	2000      	movs	r0, #0
    4b54:	e7d9      	b.n	4b0a <spi_m_async_init+0xe>
    4b56:	bf00      	nop
    4b58:	0000d480 	.word	0x0000d480
    4b5c:	00005a39 	.word	0x00005a39
    4b60:	00007671 	.word	0x00007671
    4b64:	00004a31 	.word	0x00004a31
    4b68:	00007885 	.word	0x00007885
    4b6c:	00004a79 	.word	0x00004a79
    4b70:	00004a09 	.word	0x00004a09
    4b74:	000049cd 	.word	0x000049cd
    4b78:	0000497d 	.word	0x0000497d
    4b7c:	0000493d 	.word	0x0000493d

00004b80 <spi_m_async_enable>:
{
    4b80:	b510      	push	{r4, lr}
	ASSERT(spi);
    4b82:	4604      	mov	r4, r0
    4b84:	22c1      	movs	r2, #193	; 0xc1
    4b86:	4905      	ldr	r1, [pc, #20]	; (4b9c <spi_m_async_enable+0x1c>)
    4b88:	3000      	adds	r0, #0
    4b8a:	bf18      	it	ne
    4b8c:	2001      	movne	r0, #1
    4b8e:	4b04      	ldr	r3, [pc, #16]	; (4ba0 <spi_m_async_enable+0x20>)
    4b90:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    4b92:	1d20      	adds	r0, r4, #4
    4b94:	4b03      	ldr	r3, [pc, #12]	; (4ba4 <spi_m_async_enable+0x24>)
    4b96:	4798      	blx	r3
    4b98:	bd10      	pop	{r4, pc}
    4b9a:	bf00      	nop
    4b9c:	0000d480 	.word	0x0000d480
    4ba0:	00005a39 	.word	0x00005a39
    4ba4:	000076d9 	.word	0x000076d9

00004ba8 <spi_m_async_set_baudrate>:
{
    4ba8:	b538      	push	{r3, r4, r5, lr}
    4baa:	460d      	mov	r5, r1
	ASSERT(spi);
    4bac:	4604      	mov	r4, r0
    4bae:	22cf      	movs	r2, #207	; 0xcf
    4bb0:	4909      	ldr	r1, [pc, #36]	; (4bd8 <spi_m_async_set_baudrate+0x30>)
    4bb2:	3000      	adds	r0, #0
    4bb4:	bf18      	it	ne
    4bb6:	2001      	movne	r0, #1
    4bb8:	4b08      	ldr	r3, [pc, #32]	; (4bdc <spi_m_async_set_baudrate+0x34>)
    4bba:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4bbc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4bc0:	f013 0f10 	tst.w	r3, #16
    4bc4:	d104      	bne.n	4bd0 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    4bc6:	4629      	mov	r1, r5
    4bc8:	1d20      	adds	r0, r4, #4
    4bca:	4b05      	ldr	r3, [pc, #20]	; (4be0 <spi_m_async_set_baudrate+0x38>)
    4bcc:	4798      	blx	r3
    4bce:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4bd0:	f06f 0003 	mvn.w	r0, #3
}
    4bd4:	bd38      	pop	{r3, r4, r5, pc}
    4bd6:	bf00      	nop
    4bd8:	0000d480 	.word	0x0000d480
    4bdc:	00005a39 	.word	0x00005a39
    4be0:	0000773d 	.word	0x0000773d

00004be4 <spi_m_async_set_mode>:
{
    4be4:	b538      	push	{r3, r4, r5, lr}
    4be6:	460d      	mov	r5, r1
	ASSERT(spi);
    4be8:	4604      	mov	r4, r0
    4bea:	22d9      	movs	r2, #217	; 0xd9
    4bec:	4909      	ldr	r1, [pc, #36]	; (4c14 <spi_m_async_set_mode+0x30>)
    4bee:	3000      	adds	r0, #0
    4bf0:	bf18      	it	ne
    4bf2:	2001      	movne	r0, #1
    4bf4:	4b08      	ldr	r3, [pc, #32]	; (4c18 <spi_m_async_set_mode+0x34>)
    4bf6:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    4bf8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4bfc:	f013 0f10 	tst.w	r3, #16
    4c00:	d104      	bne.n	4c0c <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    4c02:	4629      	mov	r1, r5
    4c04:	1d20      	adds	r0, r4, #4
    4c06:	4b05      	ldr	r3, [pc, #20]	; (4c1c <spi_m_async_set_mode+0x38>)
    4c08:	4798      	blx	r3
    4c0a:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    4c0c:	f06f 0003 	mvn.w	r0, #3
}
    4c10:	bd38      	pop	{r3, r4, r5, pc}
    4c12:	bf00      	nop
    4c14:	0000d480 	.word	0x0000d480
    4c18:	00005a39 	.word	0x00005a39
    4c1c:	00007709 	.word	0x00007709

00004c20 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    4c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c22:	460d      	mov	r5, r1
    4c24:	4617      	mov	r7, r2
    4c26:	461e      	mov	r6, r3
	ASSERT(spi);
    4c28:	4604      	mov	r4, r0
    4c2a:	f44f 729c 	mov.w	r2, #312	; 0x138
    4c2e:	4912      	ldr	r1, [pc, #72]	; (4c78 <spi_m_async_transfer+0x58>)
    4c30:	3000      	adds	r0, #0
    4c32:	bf18      	it	ne
    4c34:	2001      	movne	r0, #1
    4c36:	4b11      	ldr	r3, [pc, #68]	; (4c7c <spi_m_async_transfer+0x5c>)
    4c38:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    4c3a:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    4c3c:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    4c3e:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    4c40:	2300      	movs	r3, #0
    4c42:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4c44:	2310      	movs	r3, #16
    4c46:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4c4a:	1d26      	adds	r6, r4, #4
    4c4c:	2101      	movs	r1, #1
    4c4e:	4630      	mov	r0, r6
    4c50:	4b0b      	ldr	r3, [pc, #44]	; (4c80 <spi_m_async_transfer+0x60>)
    4c52:	4798      	blx	r3
	if (txbuf) {
    4c54:	b15d      	cbz	r5, 4c6e <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    4c56:	7a23      	ldrb	r3, [r4, #8]
    4c58:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    4c5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4c5c:	bf94      	ite	ls
    4c5e:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    4c60:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    4c64:	4630      	mov	r0, r6
    4c66:	4b07      	ldr	r3, [pc, #28]	; (4c84 <spi_m_async_transfer+0x64>)
    4c68:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    4c6a:	2000      	movs	r0, #0
    4c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    4c6e:	8961      	ldrh	r1, [r4, #10]
    4c70:	4630      	mov	r0, r6
    4c72:	4b04      	ldr	r3, [pc, #16]	; (4c84 <spi_m_async_transfer+0x64>)
    4c74:	4798      	blx	r3
    4c76:	e7f8      	b.n	4c6a <spi_m_async_transfer+0x4a>
    4c78:	0000d480 	.word	0x0000d480
    4c7c:	00005a39 	.word	0x00005a39
    4c80:	000077ad 	.word	0x000077ad
    4c84:	00007829 	.word	0x00007829

00004c88 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    4c88:	b570      	push	{r4, r5, r6, lr}
    4c8a:	460c      	mov	r4, r1
    4c8c:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    4c8e:	4605      	mov	r5, r0
    4c90:	b158      	cbz	r0, 4caa <spi_m_async_register_callback+0x22>
    4c92:	2901      	cmp	r1, #1
    4c94:	bf8c      	ite	hi
    4c96:	2000      	movhi	r0, #0
    4c98:	2001      	movls	r0, #1
    4c9a:	f240 1263 	movw	r2, #355	; 0x163
    4c9e:	4908      	ldr	r1, [pc, #32]	; (4cc0 <spi_m_async_register_callback+0x38>)
    4ca0:	4b08      	ldr	r3, [pc, #32]	; (4cc4 <spi_m_async_register_callback+0x3c>)
    4ca2:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    4ca4:	b91c      	cbnz	r4, 4cae <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    4ca6:	632e      	str	r6, [r5, #48]	; 0x30
    4ca8:	bd70      	pop	{r4, r5, r6, pc}
    4caa:	2000      	movs	r0, #0
    4cac:	e7f5      	b.n	4c9a <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    4cae:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    4cb0:	1c32      	adds	r2, r6, #0
    4cb2:	bf18      	it	ne
    4cb4:	2201      	movne	r2, #1
    4cb6:	2103      	movs	r1, #3
    4cb8:	1d28      	adds	r0, r5, #4
    4cba:	4b03      	ldr	r3, [pc, #12]	; (4cc8 <spi_m_async_register_callback+0x40>)
    4cbc:	4798      	blx	r3
    4cbe:	bd70      	pop	{r4, r5, r6, pc}
    4cc0:	0000d480 	.word	0x0000d480
    4cc4:	00005a39 	.word	0x00005a39
    4cc8:	000078b9 	.word	0x000078b9

00004ccc <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    4ccc:	b538      	push	{r3, r4, r5, lr}
    4cce:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4cd0:	4604      	mov	r4, r0
    4cd2:	b158      	cbz	r0, 4cec <spi_m_async_get_io_descriptor+0x20>
    4cd4:	1c08      	adds	r0, r1, #0
    4cd6:	bf18      	it	ne
    4cd8:	2001      	movne	r0, #1
    4cda:	f240 126f 	movw	r2, #367	; 0x16f
    4cde:	4904      	ldr	r1, [pc, #16]	; (4cf0 <spi_m_async_get_io_descriptor+0x24>)
    4ce0:	4b04      	ldr	r3, [pc, #16]	; (4cf4 <spi_m_async_get_io_descriptor+0x28>)
    4ce2:	4798      	blx	r3
	*io = &spi->io;
    4ce4:	3424      	adds	r4, #36	; 0x24
    4ce6:	602c      	str	r4, [r5, #0]
	return 0;
}
    4ce8:	2000      	movs	r0, #0
    4cea:	bd38      	pop	{r3, r4, r5, pc}
    4cec:	2000      	movs	r0, #0
    4cee:	e7f4      	b.n	4cda <spi_m_async_get_io_descriptor+0xe>
    4cf0:	0000d480 	.word	0x0000d480
    4cf4:	00005a39 	.word	0x00005a39

00004cf8 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4cf8:	b570      	push	{r4, r5, r6, lr}
    4cfa:	460d      	mov	r5, r1
    4cfc:	4616      	mov	r6, r2
	ASSERT(io);
    4cfe:	4604      	mov	r4, r0
    4d00:	2298      	movs	r2, #152	; 0x98
    4d02:	4907      	ldr	r1, [pc, #28]	; (4d20 <_spi_m_dma_io_write+0x28>)
    4d04:	3000      	adds	r0, #0
    4d06:	bf18      	it	ne
    4d08:	2001      	movne	r0, #1
    4d0a:	4b06      	ldr	r3, [pc, #24]	; (4d24 <_spi_m_dma_io_write+0x2c>)
    4d0c:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    4d0e:	4633      	mov	r3, r6
    4d10:	2200      	movs	r2, #0
    4d12:	4629      	mov	r1, r5
    4d14:	f1a4 001c 	sub.w	r0, r4, #28
    4d18:	4c03      	ldr	r4, [pc, #12]	; (4d28 <_spi_m_dma_io_write+0x30>)
    4d1a:	47a0      	blx	r4
}
    4d1c:	bd70      	pop	{r4, r5, r6, pc}
    4d1e:	bf00      	nop
    4d20:	0000d4a0 	.word	0x0000d4a0
    4d24:	00005a39 	.word	0x00005a39
    4d28:	00007b0d 	.word	0x00007b0d

00004d2c <_spi_m_dma_io_read>:
{
    4d2c:	b570      	push	{r4, r5, r6, lr}
    4d2e:	460d      	mov	r5, r1
    4d30:	4616      	mov	r6, r2
	ASSERT(io);
    4d32:	4604      	mov	r4, r0
    4d34:	2281      	movs	r2, #129	; 0x81
    4d36:	4907      	ldr	r1, [pc, #28]	; (4d54 <_spi_m_dma_io_read+0x28>)
    4d38:	3000      	adds	r0, #0
    4d3a:	bf18      	it	ne
    4d3c:	2001      	movne	r0, #1
    4d3e:	4b06      	ldr	r3, [pc, #24]	; (4d58 <_spi_m_dma_io_read+0x2c>)
    4d40:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    4d42:	4633      	mov	r3, r6
    4d44:	462a      	mov	r2, r5
    4d46:	2100      	movs	r1, #0
    4d48:	f1a4 001c 	sub.w	r0, r4, #28
    4d4c:	4c03      	ldr	r4, [pc, #12]	; (4d5c <_spi_m_dma_io_read+0x30>)
    4d4e:	47a0      	blx	r4
}
    4d50:	bd70      	pop	{r4, r5, r6, pc}
    4d52:	bf00      	nop
    4d54:	0000d4a0 	.word	0x0000d4a0
    4d58:	00005a39 	.word	0x00005a39
    4d5c:	00007b0d 	.word	0x00007b0d

00004d60 <spi_m_dma_init>:
{
    4d60:	b538      	push	{r3, r4, r5, lr}
    4d62:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    4d64:	4605      	mov	r5, r0
    4d66:	b1a0      	cbz	r0, 4d92 <spi_m_dma_init+0x32>
    4d68:	1c08      	adds	r0, r1, #0
    4d6a:	bf18      	it	ne
    4d6c:	2001      	movne	r0, #1
    4d6e:	223b      	movs	r2, #59	; 0x3b
    4d70:	4909      	ldr	r1, [pc, #36]	; (4d98 <spi_m_dma_init+0x38>)
    4d72:	4b0a      	ldr	r3, [pc, #40]	; (4d9c <spi_m_dma_init+0x3c>)
    4d74:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4d76:	4628      	mov	r0, r5
    4d78:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    4d7c:	4621      	mov	r1, r4
    4d7e:	4b08      	ldr	r3, [pc, #32]	; (4da0 <spi_m_dma_init+0x40>)
    4d80:	4798      	blx	r3
	if (rc) {
    4d82:	4603      	mov	r3, r0
    4d84:	b918      	cbnz	r0, 4d8e <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    4d86:	4a07      	ldr	r2, [pc, #28]	; (4da4 <spi_m_dma_init+0x44>)
    4d88:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    4d8a:	4a07      	ldr	r2, [pc, #28]	; (4da8 <spi_m_dma_init+0x48>)
    4d8c:	622a      	str	r2, [r5, #32]
}
    4d8e:	4618      	mov	r0, r3
    4d90:	bd38      	pop	{r3, r4, r5, pc}
    4d92:	2000      	movs	r0, #0
    4d94:	e7eb      	b.n	4d6e <spi_m_dma_init+0xe>
    4d96:	bf00      	nop
    4d98:	0000d4a0 	.word	0x0000d4a0
    4d9c:	00005a39 	.word	0x00005a39
    4da0:	000078f1 	.word	0x000078f1
    4da4:	00004d2d 	.word	0x00004d2d
    4da8:	00004cf9 	.word	0x00004cf9

00004dac <spi_m_dma_enable>:
{
    4dac:	b510      	push	{r4, lr}
	ASSERT(spi);
    4dae:	4604      	mov	r4, r0
    4db0:	2251      	movs	r2, #81	; 0x51
    4db2:	4905      	ldr	r1, [pc, #20]	; (4dc8 <spi_m_dma_enable+0x1c>)
    4db4:	3000      	adds	r0, #0
    4db6:	bf18      	it	ne
    4db8:	2001      	movne	r0, #1
    4dba:	4b04      	ldr	r3, [pc, #16]	; (4dcc <spi_m_dma_enable+0x20>)
    4dbc:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    4dbe:	1d20      	adds	r0, r4, #4
    4dc0:	4b03      	ldr	r3, [pc, #12]	; (4dd0 <spi_m_dma_enable+0x24>)
    4dc2:	4798      	blx	r3
    4dc4:	bd10      	pop	{r4, pc}
    4dc6:	bf00      	nop
    4dc8:	0000d4a0 	.word	0x0000d4a0
    4dcc:	00005a39 	.word	0x00005a39
    4dd0:	00007a6d 	.word	0x00007a6d

00004dd4 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    4dd4:	b570      	push	{r4, r5, r6, lr}
    4dd6:	460d      	mov	r5, r1
    4dd8:	4616      	mov	r6, r2
	ASSERT(spi);
    4dda:	4604      	mov	r4, r0
    4ddc:	22a8      	movs	r2, #168	; 0xa8
    4dde:	4906      	ldr	r1, [pc, #24]	; (4df8 <spi_m_dma_register_callback+0x24>)
    4de0:	3000      	adds	r0, #0
    4de2:	bf18      	it	ne
    4de4:	2001      	movne	r0, #1
    4de6:	4b05      	ldr	r3, [pc, #20]	; (4dfc <spi_m_dma_register_callback+0x28>)
    4de8:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    4dea:	4632      	mov	r2, r6
    4dec:	4629      	mov	r1, r5
    4dee:	1d20      	adds	r0, r4, #4
    4df0:	4b03      	ldr	r3, [pc, #12]	; (4e00 <spi_m_dma_register_callback+0x2c>)
    4df2:	4798      	blx	r3
    4df4:	bd70      	pop	{r4, r5, r6, pc}
    4df6:	bf00      	nop
    4df8:	0000d4a0 	.word	0x0000d4a0
    4dfc:	00005a39 	.word	0x00005a39
    4e00:	00007a9d 	.word	0x00007a9d

00004e04 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    4e04:	b538      	push	{r3, r4, r5, lr}
    4e06:	460d      	mov	r5, r1
	ASSERT(spi && io);
    4e08:	4604      	mov	r4, r0
    4e0a:	b150      	cbz	r0, 4e22 <spi_m_dma_get_io_descriptor+0x1e>
    4e0c:	1c08      	adds	r0, r1, #0
    4e0e:	bf18      	it	ne
    4e10:	2001      	movne	r0, #1
    4e12:	22ae      	movs	r2, #174	; 0xae
    4e14:	4904      	ldr	r1, [pc, #16]	; (4e28 <spi_m_dma_get_io_descriptor+0x24>)
    4e16:	4b05      	ldr	r3, [pc, #20]	; (4e2c <spi_m_dma_get_io_descriptor+0x28>)
    4e18:	4798      	blx	r3
	*io = &spi->io;
    4e1a:	3420      	adds	r4, #32
    4e1c:	602c      	str	r4, [r5, #0]

	return 0;
}
    4e1e:	2000      	movs	r0, #0
    4e20:	bd38      	pop	{r3, r4, r5, pc}
    4e22:	2000      	movs	r0, #0
    4e24:	e7f5      	b.n	4e12 <spi_m_dma_get_io_descriptor+0xe>
    4e26:	bf00      	nop
    4e28:	0000d4a0 	.word	0x0000d4a0
    4e2c:	00005a39 	.word	0x00005a39

00004e30 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e32:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    4e34:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    4e36:	b12f      	cbz	r7, 4e44 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    4e38:	688d      	ldr	r5, [r1, #8]
    4e3a:	463c      	mov	r4, r7
    4e3c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4e3e:	f1c2 0e01 	rsb	lr, r2, #1
    4e42:	e00b      	b.n	4e5c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    4e44:	4b0e      	ldr	r3, [pc, #56]	; (4e80 <timer_add_timer_task+0x50>)
    4e46:	4798      	blx	r3
		return;
    4e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4e4a:	4473      	add	r3, lr
    4e4c:	68a0      	ldr	r0, [r4, #8]
    4e4e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    4e50:	42ab      	cmp	r3, r5
    4e52:	d20a      	bcs.n	4e6a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    4e54:	6823      	ldr	r3, [r4, #0]
    4e56:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4e58:	b153      	cbz	r3, 4e70 <timer_add_timer_task+0x40>
    4e5a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    4e5c:	6863      	ldr	r3, [r4, #4]
    4e5e:	4293      	cmp	r3, r2
    4e60:	d8f3      	bhi.n	4e4a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    4e62:	68a0      	ldr	r0, [r4, #8]
    4e64:	4403      	add	r3, r0
    4e66:	1a9b      	subs	r3, r3, r2
    4e68:	e7f2      	b.n	4e50 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    4e6a:	42a7      	cmp	r7, r4
    4e6c:	d004      	beq.n	4e78 <timer_add_timer_task+0x48>
    4e6e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    4e70:	4620      	mov	r0, r4
    4e72:	4b04      	ldr	r3, [pc, #16]	; (4e84 <timer_add_timer_task+0x54>)
    4e74:	4798      	blx	r3
    4e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    4e78:	4660      	mov	r0, ip
    4e7a:	4b01      	ldr	r3, [pc, #4]	; (4e80 <timer_add_timer_task+0x50>)
    4e7c:	4798      	blx	r3
    4e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e80:	00005a61 	.word	0x00005a61
    4e84:	00005a8d 	.word	0x00005a8d

00004e88 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    4e8c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    4e8e:	6907      	ldr	r7, [r0, #16]
    4e90:	3701      	adds	r7, #1
    4e92:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4e94:	7e03      	ldrb	r3, [r0, #24]
    4e96:	f013 0f01 	tst.w	r3, #1
    4e9a:	d113      	bne.n	4ec4 <timer_process_counted+0x3c>
    4e9c:	7e03      	ldrb	r3, [r0, #24]
    4e9e:	f013 0f02 	tst.w	r3, #2
    4ea2:	d10f      	bne.n	4ec4 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    4ea4:	b354      	cbz	r4, 4efc <timer_process_counted+0x74>
    4ea6:	6863      	ldr	r3, [r4, #4]
    4ea8:	1afb      	subs	r3, r7, r3
    4eaa:	68a2      	ldr	r2, [r4, #8]
    4eac:	4293      	cmp	r3, r2
    4eae:	d307      	bcc.n	4ec0 <timer_process_counted+0x38>
    4eb0:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    4eb2:	f100 0814 	add.w	r8, r0, #20
    4eb6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4f00 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    4eba:	f8df a048 	ldr.w	sl, [pc, #72]	; 4f04 <timer_process_counted+0x7c>
    4ebe:	e012      	b.n	4ee6 <timer_process_counted+0x5e>
    4ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4ec4:	7e03      	ldrb	r3, [r0, #24]
    4ec6:	f043 0302 	orr.w	r3, r3, #2
    4eca:	7603      	strb	r3, [r0, #24]
		return;
    4ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ed0:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    4ed2:	68e3      	ldr	r3, [r4, #12]
    4ed4:	4620      	mov	r0, r4
    4ed6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4ed8:	b185      	cbz	r5, 4efc <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4eda:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    4edc:	686b      	ldr	r3, [r5, #4]
    4ede:	1afb      	subs	r3, r7, r3
    4ee0:	68aa      	ldr	r2, [r5, #8]
    4ee2:	4293      	cmp	r3, r2
    4ee4:	d30a      	bcc.n	4efc <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    4ee6:	4640      	mov	r0, r8
    4ee8:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4eea:	7c23      	ldrb	r3, [r4, #16]
    4eec:	2b01      	cmp	r3, #1
    4eee:	d1ef      	bne.n	4ed0 <timer_process_counted+0x48>
			tmp->time_label = time;
    4ef0:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4ef2:	463a      	mov	r2, r7
    4ef4:	4621      	mov	r1, r4
    4ef6:	4640      	mov	r0, r8
    4ef8:	47d0      	blx	sl
    4efa:	e7e9      	b.n	4ed0 <timer_process_counted+0x48>
    4efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f00:	00005ad5 	.word	0x00005ad5
    4f04:	00004e31 	.word	0x00004e31

00004f08 <timer_init>:
{
    4f08:	b570      	push	{r4, r5, r6, lr}
    4f0a:	460e      	mov	r6, r1
    4f0c:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    4f0e:	4604      	mov	r4, r0
    4f10:	b190      	cbz	r0, 4f38 <timer_init+0x30>
    4f12:	b199      	cbz	r1, 4f3c <timer_init+0x34>
    4f14:	1c10      	adds	r0, r2, #0
    4f16:	bf18      	it	ne
    4f18:	2001      	movne	r0, #1
    4f1a:	223b      	movs	r2, #59	; 0x3b
    4f1c:	4908      	ldr	r1, [pc, #32]	; (4f40 <timer_init+0x38>)
    4f1e:	4b09      	ldr	r3, [pc, #36]	; (4f44 <timer_init+0x3c>)
    4f20:	4798      	blx	r3
	descr->func = func;
    4f22:	4620      	mov	r0, r4
    4f24:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    4f28:	682b      	ldr	r3, [r5, #0]
    4f2a:	4631      	mov	r1, r6
    4f2c:	4798      	blx	r3
	descr->time                           = 0;
    4f2e:	2000      	movs	r0, #0
    4f30:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4f32:	4b05      	ldr	r3, [pc, #20]	; (4f48 <timer_init+0x40>)
    4f34:	6063      	str	r3, [r4, #4]
}
    4f36:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    4f38:	2000      	movs	r0, #0
    4f3a:	e7ee      	b.n	4f1a <timer_init+0x12>
    4f3c:	2000      	movs	r0, #0
    4f3e:	e7ec      	b.n	4f1a <timer_init+0x12>
    4f40:	0000d4bc 	.word	0x0000d4bc
    4f44:	00005a39 	.word	0x00005a39
    4f48:	00004e89 	.word	0x00004e89

00004f4c <timer_start>:
{
    4f4c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    4f4e:	4604      	mov	r4, r0
    4f50:	b198      	cbz	r0, 4f7a <timer_start+0x2e>
    4f52:	6800      	ldr	r0, [r0, #0]
    4f54:	3000      	adds	r0, #0
    4f56:	bf18      	it	ne
    4f58:	2001      	movne	r0, #1
    4f5a:	2254      	movs	r2, #84	; 0x54
    4f5c:	4909      	ldr	r1, [pc, #36]	; (4f84 <timer_start+0x38>)
    4f5e:	4b0a      	ldr	r3, [pc, #40]	; (4f88 <timer_start+0x3c>)
    4f60:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    4f62:	1d25      	adds	r5, r4, #4
    4f64:	6823      	ldr	r3, [r4, #0]
    4f66:	699b      	ldr	r3, [r3, #24]
    4f68:	4628      	mov	r0, r5
    4f6a:	4798      	blx	r3
    4f6c:	b938      	cbnz	r0, 4f7e <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    4f6e:	6823      	ldr	r3, [r4, #0]
    4f70:	689b      	ldr	r3, [r3, #8]
    4f72:	4628      	mov	r0, r5
    4f74:	4798      	blx	r3
	return ERR_NONE;
    4f76:	2000      	movs	r0, #0
    4f78:	bd38      	pop	{r3, r4, r5, pc}
    4f7a:	2000      	movs	r0, #0
    4f7c:	e7ed      	b.n	4f5a <timer_start+0xe>
		return ERR_DENIED;
    4f7e:	f06f 0010 	mvn.w	r0, #16
}
    4f82:	bd38      	pop	{r3, r4, r5, pc}
    4f84:	0000d4bc 	.word	0x0000d4bc
    4f88:	00005a39 	.word	0x00005a39

00004f8c <timer_add_task>:
{
    4f8c:	b570      	push	{r4, r5, r6, lr}
    4f8e:	b082      	sub	sp, #8
    4f90:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    4f92:	4604      	mov	r4, r0
    4f94:	b328      	cbz	r0, 4fe2 <timer_add_task+0x56>
    4f96:	b331      	cbz	r1, 4fe6 <timer_add_task+0x5a>
    4f98:	6800      	ldr	r0, [r0, #0]
    4f9a:	3000      	adds	r0, #0
    4f9c:	bf18      	it	ne
    4f9e:	2001      	movne	r0, #1
    4fa0:	227b      	movs	r2, #123	; 0x7b
    4fa2:	4920      	ldr	r1, [pc, #128]	; (5024 <timer_add_task+0x98>)
    4fa4:	4b20      	ldr	r3, [pc, #128]	; (5028 <timer_add_task+0x9c>)
    4fa6:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4fa8:	7f23      	ldrb	r3, [r4, #28]
    4faa:	f043 0301 	orr.w	r3, r3, #1
    4fae:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    4fb0:	f104 0618 	add.w	r6, r4, #24
    4fb4:	4629      	mov	r1, r5
    4fb6:	4630      	mov	r0, r6
    4fb8:	4b1c      	ldr	r3, [pc, #112]	; (502c <timer_add_task+0xa0>)
    4fba:	4798      	blx	r3
    4fbc:	b9a8      	cbnz	r0, 4fea <timer_add_task+0x5e>
	task->time_label = descr->time;
    4fbe:	6963      	ldr	r3, [r4, #20]
    4fc0:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4fc2:	6962      	ldr	r2, [r4, #20]
    4fc4:	4629      	mov	r1, r5
    4fc6:	4630      	mov	r0, r6
    4fc8:	4b19      	ldr	r3, [pc, #100]	; (5030 <timer_add_task+0xa4>)
    4fca:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4fcc:	7f23      	ldrb	r3, [r4, #28]
    4fce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4fd2:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4fd4:	7f23      	ldrb	r3, [r4, #28]
    4fd6:	f013 0f02 	tst.w	r3, #2
    4fda:	d112      	bne.n	5002 <timer_add_task+0x76>
	return ERR_NONE;
    4fdc:	2000      	movs	r0, #0
}
    4fde:	b002      	add	sp, #8
    4fe0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    4fe2:	2000      	movs	r0, #0
    4fe4:	e7dc      	b.n	4fa0 <timer_add_task+0x14>
    4fe6:	2000      	movs	r0, #0
    4fe8:	e7da      	b.n	4fa0 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4fea:	7f23      	ldrb	r3, [r4, #28]
    4fec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4ff0:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    4ff2:	2280      	movs	r2, #128	; 0x80
    4ff4:	490b      	ldr	r1, [pc, #44]	; (5024 <timer_add_task+0x98>)
    4ff6:	2000      	movs	r0, #0
    4ff8:	4b0b      	ldr	r3, [pc, #44]	; (5028 <timer_add_task+0x9c>)
    4ffa:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4ffc:	f06f 0011 	mvn.w	r0, #17
    5000:	e7ed      	b.n	4fde <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    5002:	a801      	add	r0, sp, #4
    5004:	4b0b      	ldr	r3, [pc, #44]	; (5034 <timer_add_task+0xa8>)
    5006:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5008:	7f23      	ldrb	r3, [r4, #28]
    500a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    500e:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    5010:	6823      	ldr	r3, [r4, #0]
    5012:	69db      	ldr	r3, [r3, #28]
    5014:	1d20      	adds	r0, r4, #4
    5016:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5018:	a801      	add	r0, sp, #4
    501a:	4b07      	ldr	r3, [pc, #28]	; (5038 <timer_add_task+0xac>)
    501c:	4798      	blx	r3
	return ERR_NONE;
    501e:	2000      	movs	r0, #0
    5020:	e7dd      	b.n	4fde <timer_add_task+0x52>
    5022:	bf00      	nop
    5024:	0000d4bc 	.word	0x0000d4bc
    5028:	00005a39 	.word	0x00005a39
    502c:	00005a3f 	.word	0x00005a3f
    5030:	00004e31 	.word	0x00004e31
    5034:	000046a1 	.word	0x000046a1
    5038:	000046af 	.word	0x000046af

0000503c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    503c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    503e:	2300      	movs	r3, #0
    5040:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    5042:	69c3      	ldr	r3, [r0, #28]
    5044:	b11b      	cbz	r3, 504e <usart_transmission_complete+0x12>
    5046:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    504a:	4610      	mov	r0, r2
    504c:	4798      	blx	r3
    504e:	bd08      	pop	{r3, pc}

00005050 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    5050:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    5052:	2300      	movs	r3, #0
    5054:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    5056:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5058:	b11b      	cbz	r3, 5062 <usart_error+0x12>
    505a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    505e:	4610      	mov	r0, r2
    5060:	4798      	blx	r3
    5062:	bd08      	pop	{r3, pc}

00005064 <usart_fill_rx_buffer>:
{
    5064:	b538      	push	{r3, r4, r5, lr}
    5066:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    5068:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    506c:	302c      	adds	r0, #44	; 0x2c
    506e:	4b03      	ldr	r3, [pc, #12]	; (507c <usart_fill_rx_buffer+0x18>)
    5070:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    5072:	6a23      	ldr	r3, [r4, #32]
    5074:	b10b      	cbz	r3, 507a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    5076:	4628      	mov	r0, r5
    5078:	4798      	blx	r3
    507a:	bd38      	pop	{r3, r4, r5, pc}
    507c:	00005b75 	.word	0x00005b75

00005080 <usart_async_write>:
{
    5080:	b570      	push	{r4, r5, r6, lr}
    5082:	460e      	mov	r6, r1
    5084:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    5086:	4604      	mov	r4, r0
    5088:	b1e0      	cbz	r0, 50c4 <usart_async_write+0x44>
    508a:	b1e9      	cbz	r1, 50c8 <usart_async_write+0x48>
    508c:	1c10      	adds	r0, r2, #0
    508e:	bf18      	it	ne
    5090:	2001      	movne	r0, #1
    5092:	f240 123b 	movw	r2, #315	; 0x13b
    5096:	490f      	ldr	r1, [pc, #60]	; (50d4 <usart_async_write+0x54>)
    5098:	4b0f      	ldr	r3, [pc, #60]	; (50d8 <usart_async_write+0x58>)
    509a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    509c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    50a0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    50a4:	429a      	cmp	r2, r3
    50a6:	d111      	bne.n	50cc <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    50a8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    50aa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    50ae:	2300      	movs	r3, #0
    50b0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    50b4:	2301      	movs	r3, #1
    50b6:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    50b8:	f104 0008 	add.w	r0, r4, #8
    50bc:	4b07      	ldr	r3, [pc, #28]	; (50dc <usart_async_write+0x5c>)
    50be:	4798      	blx	r3
	return (int32_t)length;
    50c0:	4628      	mov	r0, r5
    50c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    50c4:	2000      	movs	r0, #0
    50c6:	e7e4      	b.n	5092 <usart_async_write+0x12>
    50c8:	2000      	movs	r0, #0
    50ca:	e7e2      	b.n	5092 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    50cc:	f06f 001b 	mvn.w	r0, #27
}
    50d0:	bd70      	pop	{r4, r5, r6, pc}
    50d2:	bf00      	nop
    50d4:	0000d4d4 	.word	0x0000d4d4
    50d8:	00005a39 	.word	0x00005a39
    50dc:	000070b7 	.word	0x000070b7

000050e0 <usart_process_byte_sent>:
{
    50e0:	b510      	push	{r4, lr}
    50e2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    50e4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    50e6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    50ea:	429a      	cmp	r2, r3
    50ec:	d009      	beq.n	5102 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    50ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
    50f0:	1c59      	adds	r1, r3, #1
    50f2:	8781      	strh	r1, [r0, #60]	; 0x3c
    50f4:	5cd1      	ldrb	r1, [r2, r3]
    50f6:	4b04      	ldr	r3, [pc, #16]	; (5108 <usart_process_byte_sent+0x28>)
    50f8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    50fa:	4620      	mov	r0, r4
    50fc:	4b03      	ldr	r3, [pc, #12]	; (510c <usart_process_byte_sent+0x2c>)
    50fe:	4798      	blx	r3
    5100:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    5102:	4b03      	ldr	r3, [pc, #12]	; (5110 <usart_process_byte_sent+0x30>)
    5104:	4798      	blx	r3
    5106:	bd10      	pop	{r4, pc}
    5108:	0000708b 	.word	0x0000708b
    510c:	000070b7 	.word	0x000070b7
    5110:	000070bf 	.word	0x000070bf

00005114 <usart_async_read>:
{
    5114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5118:	b082      	sub	sp, #8
    511a:	460f      	mov	r7, r1
    511c:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    511e:	4606      	mov	r6, r0
    5120:	b1a0      	cbz	r0, 514c <usart_async_read+0x38>
    5122:	b199      	cbz	r1, 514c <usart_async_read+0x38>
    5124:	2a00      	cmp	r2, #0
    5126:	d12d      	bne.n	5184 <usart_async_read+0x70>
    5128:	f44f 72ac 	mov.w	r2, #344	; 0x158
    512c:	4929      	ldr	r1, [pc, #164]	; (51d4 <usart_async_read+0xc0>)
    512e:	2000      	movs	r0, #0
    5130:	4b29      	ldr	r3, [pc, #164]	; (51d8 <usart_async_read+0xc4>)
    5132:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5134:	a801      	add	r0, sp, #4
    5136:	4b29      	ldr	r3, [pc, #164]	; (51dc <usart_async_read+0xc8>)
    5138:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    513a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    513e:	4b28      	ldr	r3, [pc, #160]	; (51e0 <usart_async_read+0xcc>)
    5140:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    5142:	a801      	add	r0, sp, #4
    5144:	4b27      	ldr	r3, [pc, #156]	; (51e4 <usart_async_read+0xd0>)
    5146:	4798      	blx	r3
	uint16_t                       was_read = 0;
    5148:	2500      	movs	r5, #0
	return (int32_t)was_read;
    514a:	e03e      	b.n	51ca <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    514c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5150:	4920      	ldr	r1, [pc, #128]	; (51d4 <usart_async_read+0xc0>)
    5152:	2000      	movs	r0, #0
    5154:	4b20      	ldr	r3, [pc, #128]	; (51d8 <usart_async_read+0xc4>)
    5156:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5158:	a801      	add	r0, sp, #4
    515a:	4b20      	ldr	r3, [pc, #128]	; (51dc <usart_async_read+0xc8>)
    515c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    515e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    5162:	4650      	mov	r0, sl
    5164:	4b1e      	ldr	r3, [pc, #120]	; (51e0 <usart_async_read+0xcc>)
    5166:	4798      	blx	r3
    5168:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    516a:	a801      	add	r0, sp, #4
    516c:	4b1d      	ldr	r3, [pc, #116]	; (51e4 <usart_async_read+0xd0>)
    516e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    5170:	f1b9 0f00 	cmp.w	r9, #0
    5174:	d004      	beq.n	5180 <usart_async_read+0x6c>
    5176:	f1b8 0f00 	cmp.w	r8, #0
    517a:	d119      	bne.n	51b0 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    517c:	2500      	movs	r5, #0
    517e:	e024      	b.n	51ca <usart_async_read+0xb6>
    5180:	2500      	movs	r5, #0
    5182:	e022      	b.n	51ca <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    5184:	f44f 72ac 	mov.w	r2, #344	; 0x158
    5188:	4912      	ldr	r1, [pc, #72]	; (51d4 <usart_async_read+0xc0>)
    518a:	2001      	movs	r0, #1
    518c:	4b12      	ldr	r3, [pc, #72]	; (51d8 <usart_async_read+0xc4>)
    518e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    5190:	a801      	add	r0, sp, #4
    5192:	4b12      	ldr	r3, [pc, #72]	; (51dc <usart_async_read+0xc8>)
    5194:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    5196:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    519a:	4650      	mov	r0, sl
    519c:	4b10      	ldr	r3, [pc, #64]	; (51e0 <usart_async_read+0xcc>)
    519e:	4798      	blx	r3
    51a0:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    51a2:	a801      	add	r0, sp, #4
    51a4:	4b0f      	ldr	r3, [pc, #60]	; (51e4 <usart_async_read+0xd0>)
    51a6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    51a8:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    51aa:	f1b9 0f00 	cmp.w	r9, #0
    51ae:	d00c      	beq.n	51ca <usart_async_read+0xb6>
{
    51b0:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    51b2:	4e0d      	ldr	r6, [pc, #52]	; (51e8 <usart_async_read+0xd4>)
    51b4:	1c60      	adds	r0, r4, #1
    51b6:	b285      	uxth	r5, r0
    51b8:	1939      	adds	r1, r7, r4
    51ba:	4650      	mov	r0, sl
    51bc:	47b0      	blx	r6
    51be:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    51c0:	454c      	cmp	r4, r9
    51c2:	d202      	bcs.n	51ca <usart_async_read+0xb6>
    51c4:	b2a3      	uxth	r3, r4
    51c6:	4598      	cmp	r8, r3
    51c8:	d8f4      	bhi.n	51b4 <usart_async_read+0xa0>
}
    51ca:	4628      	mov	r0, r5
    51cc:	b002      	add	sp, #8
    51ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51d2:	bf00      	nop
    51d4:	0000d4d4 	.word	0x0000d4d4
    51d8:	00005a39 	.word	0x00005a39
    51dc:	000046a1 	.word	0x000046a1
    51e0:	00005bb5 	.word	0x00005bb5
    51e4:	000046af 	.word	0x000046af
    51e8:	00005b31 	.word	0x00005b31

000051ec <usart_async_init>:
{
    51ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51ee:	460d      	mov	r5, r1
    51f0:	4616      	mov	r6, r2
    51f2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    51f4:	4604      	mov	r4, r0
    51f6:	b320      	cbz	r0, 5242 <usart_async_init+0x56>
    51f8:	b329      	cbz	r1, 5246 <usart_async_init+0x5a>
    51fa:	b332      	cbz	r2, 524a <usart_async_init+0x5e>
    51fc:	1c18      	adds	r0, r3, #0
    51fe:	bf18      	it	ne
    5200:	2001      	movne	r0, #1
    5202:	223a      	movs	r2, #58	; 0x3a
    5204:	4913      	ldr	r1, [pc, #76]	; (5254 <usart_async_init+0x68>)
    5206:	4b14      	ldr	r3, [pc, #80]	; (5258 <usart_async_init+0x6c>)
    5208:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    520a:	463a      	mov	r2, r7
    520c:	4631      	mov	r1, r6
    520e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5212:	4b12      	ldr	r3, [pc, #72]	; (525c <usart_async_init+0x70>)
    5214:	4798      	blx	r3
    5216:	b9d0      	cbnz	r0, 524e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    5218:	4629      	mov	r1, r5
    521a:	f104 0008 	add.w	r0, r4, #8
    521e:	4b10      	ldr	r3, [pc, #64]	; (5260 <usart_async_init+0x74>)
    5220:	4798      	blx	r3
	if (init_status) {
    5222:	4603      	mov	r3, r0
    5224:	b958      	cbnz	r0, 523e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    5226:	4a0f      	ldr	r2, [pc, #60]	; (5264 <usart_async_init+0x78>)
    5228:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    522a:	4a0f      	ldr	r2, [pc, #60]	; (5268 <usart_async_init+0x7c>)
    522c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    522e:	4a0f      	ldr	r2, [pc, #60]	; (526c <usart_async_init+0x80>)
    5230:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    5232:	4a0f      	ldr	r2, [pc, #60]	; (5270 <usart_async_init+0x84>)
    5234:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    5236:	4a0f      	ldr	r2, [pc, #60]	; (5274 <usart_async_init+0x88>)
    5238:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    523a:	4a0f      	ldr	r2, [pc, #60]	; (5278 <usart_async_init+0x8c>)
    523c:	6162      	str	r2, [r4, #20]
}
    523e:	4618      	mov	r0, r3
    5240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    5242:	2000      	movs	r0, #0
    5244:	e7dd      	b.n	5202 <usart_async_init+0x16>
    5246:	2000      	movs	r0, #0
    5248:	e7db      	b.n	5202 <usart_async_init+0x16>
    524a:	2000      	movs	r0, #0
    524c:	e7d9      	b.n	5202 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    524e:	f06f 030c 	mvn.w	r3, #12
    5252:	e7f4      	b.n	523e <usart_async_init+0x52>
    5254:	0000d4d4 	.word	0x0000d4d4
    5258:	00005a39 	.word	0x00005a39
    525c:	00005ae1 	.word	0x00005ae1
    5260:	00006fe1 	.word	0x00006fe1
    5264:	00005115 	.word	0x00005115
    5268:	00005081 	.word	0x00005081
    526c:	000050e1 	.word	0x000050e1
    5270:	00005065 	.word	0x00005065
    5274:	0000503d 	.word	0x0000503d
    5278:	00005051 	.word	0x00005051

0000527c <usart_async_enable>:
{
    527c:	b510      	push	{r4, lr}
	ASSERT(descr);
    527e:	4604      	mov	r4, r0
    5280:	2261      	movs	r2, #97	; 0x61
    5282:	4906      	ldr	r1, [pc, #24]	; (529c <usart_async_enable+0x20>)
    5284:	3000      	adds	r0, #0
    5286:	bf18      	it	ne
    5288:	2001      	movne	r0, #1
    528a:	4b05      	ldr	r3, [pc, #20]	; (52a0 <usart_async_enable+0x24>)
    528c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    528e:	f104 0008 	add.w	r0, r4, #8
    5292:	4b04      	ldr	r3, [pc, #16]	; (52a4 <usart_async_enable+0x28>)
    5294:	4798      	blx	r3
}
    5296:	2000      	movs	r0, #0
    5298:	bd10      	pop	{r4, pc}
    529a:	bf00      	nop
    529c:	0000d4d4 	.word	0x0000d4d4
    52a0:	00005a39 	.word	0x00005a39
    52a4:	00007071 	.word	0x00007071

000052a8 <usart_async_get_io_descriptor>:
{
    52a8:	b538      	push	{r3, r4, r5, lr}
    52aa:	460c      	mov	r4, r1
	ASSERT(descr && io);
    52ac:	4605      	mov	r5, r0
    52ae:	b148      	cbz	r0, 52c4 <usart_async_get_io_descriptor+0x1c>
    52b0:	1c08      	adds	r0, r1, #0
    52b2:	bf18      	it	ne
    52b4:	2001      	movne	r0, #1
    52b6:	2277      	movs	r2, #119	; 0x77
    52b8:	4903      	ldr	r1, [pc, #12]	; (52c8 <usart_async_get_io_descriptor+0x20>)
    52ba:	4b04      	ldr	r3, [pc, #16]	; (52cc <usart_async_get_io_descriptor+0x24>)
    52bc:	4798      	blx	r3
	*io = &descr->io;
    52be:	6025      	str	r5, [r4, #0]
}
    52c0:	2000      	movs	r0, #0
    52c2:	bd38      	pop	{r3, r4, r5, pc}
    52c4:	2000      	movs	r0, #0
    52c6:	e7f6      	b.n	52b6 <usart_async_get_io_descriptor+0xe>
    52c8:	0000d4d4 	.word	0x0000d4d4
    52cc:	00005a39 	.word	0x00005a39

000052d0 <usart_async_register_callback>:
{
    52d0:	b570      	push	{r4, r5, r6, lr}
    52d2:	460c      	mov	r4, r1
    52d4:	4616      	mov	r6, r2
	ASSERT(descr);
    52d6:	4605      	mov	r5, r0
    52d8:	2283      	movs	r2, #131	; 0x83
    52da:	4917      	ldr	r1, [pc, #92]	; (5338 <usart_async_register_callback+0x68>)
    52dc:	3000      	adds	r0, #0
    52de:	bf18      	it	ne
    52e0:	2001      	movne	r0, #1
    52e2:	4b16      	ldr	r3, [pc, #88]	; (533c <usart_async_register_callback+0x6c>)
    52e4:	4798      	blx	r3
	switch (type) {
    52e6:	2c01      	cmp	r4, #1
    52e8:	d010      	beq.n	530c <usart_async_register_callback+0x3c>
    52ea:	b124      	cbz	r4, 52f6 <usart_async_register_callback+0x26>
    52ec:	2c02      	cmp	r4, #2
    52ee:	d018      	beq.n	5322 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    52f0:	f06f 000c 	mvn.w	r0, #12
}
    52f4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    52f6:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    52f8:	1c32      	adds	r2, r6, #0
    52fa:	bf18      	it	ne
    52fc:	2201      	movne	r2, #1
    52fe:	2101      	movs	r1, #1
    5300:	f105 0008 	add.w	r0, r5, #8
    5304:	4b0e      	ldr	r3, [pc, #56]	; (5340 <usart_async_register_callback+0x70>)
    5306:	4798      	blx	r3
	return ERR_NONE;
    5308:	2000      	movs	r0, #0
		break;
    530a:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    530c:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    530e:	1c32      	adds	r2, r6, #0
    5310:	bf18      	it	ne
    5312:	2201      	movne	r2, #1
    5314:	2102      	movs	r1, #2
    5316:	f105 0008 	add.w	r0, r5, #8
    531a:	4b09      	ldr	r3, [pc, #36]	; (5340 <usart_async_register_callback+0x70>)
    531c:	4798      	blx	r3
	return ERR_NONE;
    531e:	2000      	movs	r0, #0
		break;
    5320:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    5322:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    5324:	1c32      	adds	r2, r6, #0
    5326:	bf18      	it	ne
    5328:	2201      	movne	r2, #1
    532a:	2103      	movs	r1, #3
    532c:	f105 0008 	add.w	r0, r5, #8
    5330:	4b03      	ldr	r3, [pc, #12]	; (5340 <usart_async_register_callback+0x70>)
    5332:	4798      	blx	r3
	return ERR_NONE;
    5334:	2000      	movs	r0, #0
		break;
    5336:	bd70      	pop	{r4, r5, r6, pc}
    5338:	0000d4d4 	.word	0x0000d4d4
    533c:	00005a39 	.word	0x00005a39
    5340:	000070c9 	.word	0x000070c9

00005344 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5348:	460f      	mov	r7, r1
    534a:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    534c:	4604      	mov	r4, r0
    534e:	b328      	cbz	r0, 539c <usart_sync_write+0x58>
    5350:	b331      	cbz	r1, 53a0 <usart_sync_write+0x5c>
    5352:	1c10      	adds	r0, r2, #0
    5354:	bf18      	it	ne
    5356:	2001      	movne	r0, #1
    5358:	22f1      	movs	r2, #241	; 0xf1
    535a:	4912      	ldr	r1, [pc, #72]	; (53a4 <usart_sync_write+0x60>)
    535c:	4b12      	ldr	r3, [pc, #72]	; (53a8 <usart_sync_write+0x64>)
    535e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    5360:	3408      	adds	r4, #8
    5362:	4d12      	ldr	r5, [pc, #72]	; (53ac <usart_sync_write+0x68>)
    5364:	4620      	mov	r0, r4
    5366:	47a8      	blx	r5
    5368:	2800      	cmp	r0, #0
    536a:	d0fb      	beq.n	5364 <usart_sync_write+0x20>
    536c:	3f01      	subs	r7, #1
    536e:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5370:	f8df 9040 	ldr.w	r9, [pc, #64]	; 53b4 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    5374:	4d0d      	ldr	r5, [pc, #52]	; (53ac <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    5376:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    537a:	4620      	mov	r0, r4
    537c:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    537e:	4620      	mov	r0, r4
    5380:	47a8      	blx	r5
    5382:	2800      	cmp	r0, #0
    5384:	d0fb      	beq.n	537e <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    5386:	3601      	adds	r6, #1
    5388:	4546      	cmp	r6, r8
    538a:	d3f4      	bcc.n	5376 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    538c:	4d08      	ldr	r5, [pc, #32]	; (53b0 <usart_sync_write+0x6c>)
    538e:	4620      	mov	r0, r4
    5390:	47a8      	blx	r5
    5392:	2800      	cmp	r0, #0
    5394:	d0fb      	beq.n	538e <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    5396:	4630      	mov	r0, r6
    5398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    539c:	2000      	movs	r0, #0
    539e:	e7db      	b.n	5358 <usart_sync_write+0x14>
    53a0:	2000      	movs	r0, #0
    53a2:	e7d9      	b.n	5358 <usart_sync_write+0x14>
    53a4:	0000d4f4 	.word	0x0000d4f4
    53a8:	00005a39 	.word	0x00005a39
    53ac:	00007099 	.word	0x00007099
    53b0:	000070a3 	.word	0x000070a3
    53b4:	00007085 	.word	0x00007085

000053b8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    53b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    53bc:	460f      	mov	r7, r1
    53be:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    53c0:	4604      	mov	r4, r0
    53c2:	b1e0      	cbz	r0, 53fe <usart_sync_read+0x46>
    53c4:	b1e9      	cbz	r1, 5402 <usart_sync_read+0x4a>
    53c6:	1c10      	adds	r0, r2, #0
    53c8:	bf18      	it	ne
    53ca:	2001      	movne	r0, #1
    53cc:	f44f 7286 	mov.w	r2, #268	; 0x10c
    53d0:	490d      	ldr	r1, [pc, #52]	; (5408 <usart_sync_read+0x50>)
    53d2:	4b0e      	ldr	r3, [pc, #56]	; (540c <usart_sync_read+0x54>)
    53d4:	4798      	blx	r3
    53d6:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    53d8:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    53da:	3408      	adds	r4, #8
    53dc:	4d0c      	ldr	r5, [pc, #48]	; (5410 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    53de:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5414 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    53e2:	4620      	mov	r0, r4
    53e4:	47a8      	blx	r5
    53e6:	2800      	cmp	r0, #0
    53e8:	d0fb      	beq.n	53e2 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    53ea:	4620      	mov	r0, r4
    53ec:	47c8      	blx	r9
    53ee:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    53f2:	3601      	adds	r6, #1
    53f4:	4546      	cmp	r6, r8
    53f6:	d3f4      	bcc.n	53e2 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    53f8:	4630      	mov	r0, r6
    53fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    53fe:	2000      	movs	r0, #0
    5400:	e7e4      	b.n	53cc <usart_sync_read+0x14>
    5402:	2000      	movs	r0, #0
    5404:	e7e2      	b.n	53cc <usart_sync_read+0x14>
    5406:	bf00      	nop
    5408:	0000d4f4 	.word	0x0000d4f4
    540c:	00005a39 	.word	0x00005a39
    5410:	000070ad 	.word	0x000070ad
    5414:	00007091 	.word	0x00007091

00005418 <usart_sync_init>:
{
    5418:	b538      	push	{r3, r4, r5, lr}
    541a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    541c:	4604      	mov	r4, r0
    541e:	b198      	cbz	r0, 5448 <usart_sync_init+0x30>
    5420:	1c08      	adds	r0, r1, #0
    5422:	bf18      	it	ne
    5424:	2001      	movne	r0, #1
    5426:	2234      	movs	r2, #52	; 0x34
    5428:	4908      	ldr	r1, [pc, #32]	; (544c <usart_sync_init+0x34>)
    542a:	4b09      	ldr	r3, [pc, #36]	; (5450 <usart_sync_init+0x38>)
    542c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    542e:	4629      	mov	r1, r5
    5430:	f104 0008 	add.w	r0, r4, #8
    5434:	4b07      	ldr	r3, [pc, #28]	; (5454 <usart_sync_init+0x3c>)
    5436:	4798      	blx	r3
	if (init_status) {
    5438:	4603      	mov	r3, r0
    543a:	b918      	cbnz	r0, 5444 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    543c:	4a06      	ldr	r2, [pc, #24]	; (5458 <usart_sync_init+0x40>)
    543e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    5440:	4a06      	ldr	r2, [pc, #24]	; (545c <usart_sync_init+0x44>)
    5442:	6022      	str	r2, [r4, #0]
}
    5444:	4618      	mov	r0, r3
    5446:	bd38      	pop	{r3, r4, r5, pc}
    5448:	2000      	movs	r0, #0
    544a:	e7ec      	b.n	5426 <usart_sync_init+0xe>
    544c:	0000d4f4 	.word	0x0000d4f4
    5450:	00005a39 	.word	0x00005a39
    5454:	00006fb5 	.word	0x00006fb5
    5458:	000053b9 	.word	0x000053b9
    545c:	00005345 	.word	0x00005345

00005460 <usart_sync_enable>:
{
    5460:	b510      	push	{r4, lr}
	ASSERT(descr);
    5462:	4604      	mov	r4, r0
    5464:	2253      	movs	r2, #83	; 0x53
    5466:	4906      	ldr	r1, [pc, #24]	; (5480 <usart_sync_enable+0x20>)
    5468:	3000      	adds	r0, #0
    546a:	bf18      	it	ne
    546c:	2001      	movne	r0, #1
    546e:	4b05      	ldr	r3, [pc, #20]	; (5484 <usart_sync_enable+0x24>)
    5470:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    5472:	f104 0008 	add.w	r0, r4, #8
    5476:	4b04      	ldr	r3, [pc, #16]	; (5488 <usart_sync_enable+0x28>)
    5478:	4798      	blx	r3
}
    547a:	2000      	movs	r0, #0
    547c:	bd10      	pop	{r4, pc}
    547e:	bf00      	nop
    5480:	0000d4f4 	.word	0x0000d4f4
    5484:	00005a39 	.word	0x00005a39
    5488:	0000705d 	.word	0x0000705d

0000548c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    548c:	4b0f      	ldr	r3, [pc, #60]	; (54cc <_usb_d_find_ep+0x40>)
    548e:	7859      	ldrb	r1, [r3, #1]
    5490:	4288      	cmp	r0, r1
    5492:	d018      	beq.n	54c6 <_usb_d_find_ep+0x3a>
{
    5494:	b430      	push	{r4, r5}
    5496:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5498:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    549a:	f000 050f 	and.w	r5, r0, #15
    549e:	e007      	b.n	54b0 <_usb_d_find_ep+0x24>
    54a0:	3301      	adds	r3, #1
    54a2:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    54a4:	2b0d      	cmp	r3, #13
    54a6:	d009      	beq.n	54bc <_usb_d_find_ep+0x30>
    54a8:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    54aa:	7851      	ldrb	r1, [r2, #1]
    54ac:	4281      	cmp	r1, r0
    54ae:	d007      	beq.n	54c0 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    54b0:	7814      	ldrb	r4, [r2, #0]
    54b2:	2c00      	cmp	r4, #0
    54b4:	d1f4      	bne.n	54a0 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    54b6:	428d      	cmp	r5, r1
    54b8:	d1f2      	bne.n	54a0 <_usb_d_find_ep+0x14>
    54ba:	e001      	b.n	54c0 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    54bc:	f04f 33ff 	mov.w	r3, #4294967295
}
    54c0:	4618      	mov	r0, r3
    54c2:	bc30      	pop	{r4, r5}
    54c4:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    54c6:	2300      	movs	r3, #0
}
    54c8:	4618      	mov	r0, r3
    54ca:	4770      	bx	lr
    54cc:	2000064c 	.word	0x2000064c

000054d0 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    54d0:	2000      	movs	r0, #0
    54d2:	4770      	bx	lr

000054d4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    54d4:	b538      	push	{r3, r4, r5, lr}
    54d6:	4604      	mov	r4, r0
    54d8:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    54da:	4b09      	ldr	r3, [pc, #36]	; (5500 <usb_d_cb_trans_more+0x2c>)
    54dc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    54de:	4b09      	ldr	r3, [pc, #36]	; (5504 <usb_d_cb_trans_more+0x30>)
    54e0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    54e4:	789b      	ldrb	r3, [r3, #2]
    54e6:	2b03      	cmp	r3, #3
    54e8:	d001      	beq.n	54ee <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    54ea:	2000      	movs	r0, #0
}
    54ec:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    54ee:	4b05      	ldr	r3, [pc, #20]	; (5504 <usb_d_cb_trans_more+0x30>)
    54f0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    54f4:	6983      	ldr	r3, [r0, #24]
    54f6:	4629      	mov	r1, r5
    54f8:	4620      	mov	r0, r4
    54fa:	4798      	blx	r3
    54fc:	bd38      	pop	{r3, r4, r5, pc}
    54fe:	bf00      	nop
    5500:	0000548d 	.word	0x0000548d
    5504:	2000064c 	.word	0x2000064c

00005508 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5508:	b5f0      	push	{r4, r5, r6, r7, lr}
    550a:	b085      	sub	sp, #20
    550c:	4606      	mov	r6, r0
    550e:	460d      	mov	r5, r1
    5510:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    5512:	4b4d      	ldr	r3, [pc, #308]	; (5648 <_usb_d_cb_trans_done+0x140>)
    5514:	4798      	blx	r3
    5516:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    5518:	2d00      	cmp	r5, #0
    551a:	d15b      	bne.n	55d4 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    551c:	4a4b      	ldr	r2, [pc, #300]	; (564c <_usb_d_cb_trans_done+0x144>)
    551e:	0143      	lsls	r3, r0, #5
    5520:	18d1      	adds	r1, r2, r3
    5522:	2000      	movs	r0, #0
    5524:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5526:	5cd3      	ldrb	r3, [r2, r3]
    5528:	b173      	cbz	r3, 5548 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    552a:	4b48      	ldr	r3, [pc, #288]	; (564c <_usb_d_cb_trans_done+0x144>)
    552c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5530:	2201      	movs	r2, #1
    5532:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5534:	4845      	ldr	r0, [pc, #276]	; (564c <_usb_d_cb_trans_done+0x144>)
    5536:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    553a:	69c3      	ldr	r3, [r0, #28]
    553c:	463a      	mov	r2, r7
    553e:	78c1      	ldrb	r1, [r0, #3]
    5540:	4630      	mov	r0, r6
    5542:	4798      	blx	r3
}
    5544:	b005      	add	sp, #20
    5546:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    5548:	788b      	ldrb	r3, [r1, #2]
    554a:	2b03      	cmp	r3, #3
    554c:	d00b      	beq.n	5566 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    554e:	483f      	ldr	r0, [pc, #252]	; (564c <_usb_d_cb_trans_done+0x144>)
    5550:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    5554:	4614      	mov	r4, r2
    5556:	69d3      	ldr	r3, [r2, #28]
    5558:	320c      	adds	r2, #12
    555a:	2100      	movs	r1, #0
    555c:	7860      	ldrb	r0, [r4, #1]
    555e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5560:	2302      	movs	r3, #2
    5562:	70a3      	strb	r3, [r4, #2]
    5564:	e7ee      	b.n	5544 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5566:	460b      	mov	r3, r1
    5568:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    556c:	460a      	mov	r2, r1
    556e:	69ce      	ldr	r6, [r1, #28]
    5570:	320c      	adds	r2, #12
    5572:	2101      	movs	r1, #1
    5574:	7858      	ldrb	r0, [r3, #1]
    5576:	47b0      	blx	r6
		if (err) {
    5578:	b1a0      	cbz	r0, 55a4 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    557a:	4b34      	ldr	r3, [pc, #208]	; (564c <_usb_d_cb_trans_done+0x144>)
    557c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5580:	2205      	movs	r2, #5
    5582:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5584:	2202      	movs	r2, #2
    5586:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5588:	2d00      	cmp	r5, #0
    558a:	db09      	blt.n	55a0 <_usb_d_cb_trans_done+0x98>
    558c:	482f      	ldr	r0, [pc, #188]	; (564c <_usb_d_cb_trans_done+0x144>)
    558e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5592:	7840      	ldrb	r0, [r0, #1]
    5594:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    5598:	2101      	movs	r1, #1
    559a:	4b2d      	ldr	r3, [pc, #180]	; (5650 <_usb_d_cb_trans_done+0x148>)
    559c:	4798      	blx	r3
    559e:	e7d1      	b.n	5544 <_usb_d_cb_trans_done+0x3c>
    55a0:	7858      	ldrb	r0, [r3, #1]
    55a2:	e7f9      	b.n	5598 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    55a4:	4829      	ldr	r0, [pc, #164]	; (564c <_usb_d_cb_trans_done+0x144>)
    55a6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    55aa:	2304      	movs	r3, #4
    55ac:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    55ae:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    55b0:	2200      	movs	r2, #0
    55b2:	9201      	str	r2, [sp, #4]
    55b4:	9202      	str	r2, [sp, #8]
    55b6:	4295      	cmp	r5, r2
    55b8:	bfac      	ite	ge
    55ba:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    55be:	f003 030f 	andlt.w	r3, r3, #15
    55c2:	f88d 300c 	strb.w	r3, [sp, #12]
    55c6:	2301      	movs	r3, #1
    55c8:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    55cc:	a801      	add	r0, sp, #4
    55ce:	4b21      	ldr	r3, [pc, #132]	; (5654 <_usb_d_cb_trans_done+0x14c>)
    55d0:	4798      	blx	r3
    55d2:	e7b7      	b.n	5544 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    55d4:	2d01      	cmp	r5, #1
    55d6:	d00a      	beq.n	55ee <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    55d8:	2d02      	cmp	r5, #2
    55da:	d01c      	beq.n	5616 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    55dc:	2d03      	cmp	r5, #3
    55de:	d02a      	beq.n	5636 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    55e0:	4b1a      	ldr	r3, [pc, #104]	; (564c <_usb_d_cb_trans_done+0x144>)
    55e2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    55e6:	2206      	movs	r2, #6
    55e8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    55ea:	70da      	strb	r2, [r3, #3]
    55ec:	e7a2      	b.n	5534 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    55ee:	4a17      	ldr	r2, [pc, #92]	; (564c <_usb_d_cb_trans_done+0x144>)
    55f0:	0143      	lsls	r3, r0, #5
    55f2:	18d1      	adds	r1, r2, r3
    55f4:	2002      	movs	r0, #2
    55f6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    55f8:	5cd3      	ldrb	r3, [r2, r3]
    55fa:	b12b      	cbz	r3, 5608 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    55fc:	4b13      	ldr	r3, [pc, #76]	; (564c <_usb_d_cb_trans_done+0x144>)
    55fe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5602:	2205      	movs	r2, #5
    5604:	709a      	strb	r2, [r3, #2]
    5606:	e795      	b.n	5534 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5608:	460b      	mov	r3, r1
    560a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    560c:	2100      	movs	r1, #0
    560e:	4630      	mov	r0, r6
    5610:	4b0f      	ldr	r3, [pc, #60]	; (5650 <_usb_d_cb_trans_done+0x148>)
    5612:	4798      	blx	r3
    5614:	e78e      	b.n	5534 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5616:	4a0d      	ldr	r2, [pc, #52]	; (564c <_usb_d_cb_trans_done+0x144>)
    5618:	0143      	lsls	r3, r0, #5
    561a:	18d1      	adds	r1, r2, r3
    561c:	2004      	movs	r0, #4
    561e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5620:	5cd3      	ldrb	r3, [r2, r3]
    5622:	b12b      	cbz	r3, 5630 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5624:	4b09      	ldr	r3, [pc, #36]	; (564c <_usb_d_cb_trans_done+0x144>)
    5626:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    562a:	2201      	movs	r2, #1
    562c:	709a      	strb	r2, [r3, #2]
    562e:	e781      	b.n	5534 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5630:	2302      	movs	r3, #2
    5632:	708b      	strb	r3, [r1, #2]
			return;
    5634:	e786      	b.n	5544 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    5636:	4b05      	ldr	r3, [pc, #20]	; (564c <_usb_d_cb_trans_done+0x144>)
    5638:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    563c:	2200      	movs	r2, #0
    563e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5640:	2205      	movs	r2, #5
    5642:	70da      	strb	r2, [r3, #3]
    5644:	e776      	b.n	5534 <_usb_d_cb_trans_done+0x2c>
    5646:	bf00      	nop
    5648:	0000548d 	.word	0x0000548d
    564c:	2000064c 	.word	0x2000064c
    5650:	00009005 	.word	0x00009005
    5654:	000091ad 	.word	0x000091ad

00005658 <usb_d_cb_trans_setup>:
{
    5658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    565c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    565e:	4b1c      	ldr	r3, [pc, #112]	; (56d0 <usb_d_cb_trans_setup+0x78>)
    5660:	4798      	blx	r3
    5662:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    5664:	4c1b      	ldr	r4, [pc, #108]	; (56d4 <usb_d_cb_trans_setup+0x7c>)
    5666:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    566a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    566c:	4621      	mov	r1, r4
    566e:	4628      	mov	r0, r5
    5670:	4b19      	ldr	r3, [pc, #100]	; (56d8 <usb_d_cb_trans_setup+0x80>)
    5672:	4798      	blx	r3
	if (n != 8) {
    5674:	b2c0      	uxtb	r0, r0
    5676:	2808      	cmp	r0, #8
    5678:	d009      	beq.n	568e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    567a:	2101      	movs	r1, #1
    567c:	4628      	mov	r0, r5
    567e:	4c17      	ldr	r4, [pc, #92]	; (56dc <usb_d_cb_trans_setup+0x84>)
    5680:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5682:	2101      	movs	r1, #1
    5684:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    5688:	47a0      	blx	r4
		return;
    568a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    568e:	2100      	movs	r1, #0
    5690:	4628      	mov	r0, r5
    5692:	4f12      	ldr	r7, [pc, #72]	; (56dc <usb_d_cb_trans_setup+0x84>)
    5694:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5696:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    569a:	2100      	movs	r1, #0
    569c:	4640      	mov	r0, r8
    569e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    56a0:	4b0c      	ldr	r3, [pc, #48]	; (56d4 <usb_d_cb_trans_setup+0x7c>)
    56a2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    56a6:	2201      	movs	r2, #1
    56a8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    56aa:	695b      	ldr	r3, [r3, #20]
    56ac:	4621      	mov	r1, r4
    56ae:	4628      	mov	r0, r5
    56b0:	4798      	blx	r3
    56b2:	b108      	cbz	r0, 56b8 <usb_d_cb_trans_setup+0x60>
    56b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    56b8:	4b06      	ldr	r3, [pc, #24]	; (56d4 <usb_d_cb_trans_setup+0x7c>)
    56ba:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    56be:	2305      	movs	r3, #5
    56c0:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    56c2:	2101      	movs	r1, #1
    56c4:	4628      	mov	r0, r5
    56c6:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    56c8:	2101      	movs	r1, #1
    56ca:	4640      	mov	r0, r8
    56cc:	47b8      	blx	r7
    56ce:	e7f1      	b.n	56b4 <usb_d_cb_trans_setup+0x5c>
    56d0:	0000548d 	.word	0x0000548d
    56d4:	2000064c 	.word	0x2000064c
    56d8:	0000914d 	.word	0x0000914d
    56dc:	00009005 	.word	0x00009005

000056e0 <usb_d_init>:

int32_t usb_d_init(void)
{
    56e0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    56e2:	4b11      	ldr	r3, [pc, #68]	; (5728 <usb_d_init+0x48>)
    56e4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    56e6:	2800      	cmp	r0, #0
    56e8:	db1d      	blt.n	5726 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    56ea:	4c10      	ldr	r4, [pc, #64]	; (572c <usb_d_init+0x4c>)
    56ec:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    56f0:	2100      	movs	r1, #0
    56f2:	4620      	mov	r0, r4
    56f4:	4b0e      	ldr	r3, [pc, #56]	; (5730 <usb_d_init+0x50>)
    56f6:	4798      	blx	r3
    56f8:	4623      	mov	r3, r4
    56fa:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    56fe:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5700:	4a0c      	ldr	r2, [pc, #48]	; (5734 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5702:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5704:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5706:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5708:	61da      	str	r2, [r3, #28]
    570a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    570c:	4283      	cmp	r3, r0
    570e:	d1f8      	bne.n	5702 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5710:	4909      	ldr	r1, [pc, #36]	; (5738 <usb_d_init+0x58>)
    5712:	2000      	movs	r0, #0
    5714:	4c09      	ldr	r4, [pc, #36]	; (573c <usb_d_init+0x5c>)
    5716:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5718:	4909      	ldr	r1, [pc, #36]	; (5740 <usb_d_init+0x60>)
    571a:	2001      	movs	r0, #1
    571c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    571e:	4909      	ldr	r1, [pc, #36]	; (5744 <usb_d_init+0x64>)
    5720:	2002      	movs	r0, #2
    5722:	47a0      	blx	r4
	return ERR_NONE;
    5724:	2000      	movs	r0, #0
}
    5726:	bd10      	pop	{r4, pc}
    5728:	000089d1 	.word	0x000089d1
    572c:	2000064c 	.word	0x2000064c
    5730:	0000bdb7 	.word	0x0000bdb7
    5734:	000054d1 	.word	0x000054d1
    5738:	00005659 	.word	0x00005659
    573c:	000093b5 	.word	0x000093b5
    5740:	000054d5 	.word	0x000054d5
    5744:	00005509 	.word	0x00005509

00005748 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5748:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    574a:	4b01      	ldr	r3, [pc, #4]	; (5750 <usb_d_register_callback+0x8>)
    574c:	4798      	blx	r3
    574e:	bd08      	pop	{r3, pc}
    5750:	0000938d 	.word	0x0000938d

00005754 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    5754:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    5756:	4b01      	ldr	r3, [pc, #4]	; (575c <usb_d_enable+0x8>)
    5758:	4798      	blx	r3
}
    575a:	bd08      	pop	{r3, pc}
    575c:	00008ad9 	.word	0x00008ad9

00005760 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5760:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    5762:	4b01      	ldr	r3, [pc, #4]	; (5768 <usb_d_attach+0x8>)
    5764:	4798      	blx	r3
    5766:	bd08      	pop	{r3, pc}
    5768:	00008b45 	.word	0x00008b45

0000576c <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    576c:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    576e:	4b01      	ldr	r3, [pc, #4]	; (5774 <usb_d_get_frame_num+0x8>)
    5770:	4798      	blx	r3
}
    5772:	bd08      	pop	{r3, pc}
    5774:	00008b63 	.word	0x00008b63

00005778 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5778:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    577a:	4b01      	ldr	r3, [pc, #4]	; (5780 <usb_d_set_address+0x8>)
    577c:	4798      	blx	r3
    577e:	bd08      	pop	{r3, pc}
    5780:	00008b57 	.word	0x00008b57

00005784 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5786:	4606      	mov	r6, r0
    5788:	460c      	mov	r4, r1
    578a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    578c:	4b0f      	ldr	r3, [pc, #60]	; (57cc <usb_d_ep_init+0x48>)
    578e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    5790:	2800      	cmp	r0, #0
    5792:	da14      	bge.n	57be <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5794:	20ff      	movs	r0, #255	; 0xff
    5796:	4b0d      	ldr	r3, [pc, #52]	; (57cc <usb_d_ep_init+0x48>)
    5798:	4798      	blx	r3
		if (ep_index < 0) {
    579a:	1e05      	subs	r5, r0, #0
    579c:	db12      	blt.n	57c4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    579e:	463a      	mov	r2, r7
    57a0:	4621      	mov	r1, r4
    57a2:	4630      	mov	r0, r6
    57a4:	4b0a      	ldr	r3, [pc, #40]	; (57d0 <usb_d_ep_init+0x4c>)
    57a6:	4798      	blx	r3
	if (rc < 0) {
    57a8:	2800      	cmp	r0, #0
    57aa:	db0d      	blt.n	57c8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    57ac:	4b09      	ldr	r3, [pc, #36]	; (57d4 <usb_d_ep_init+0x50>)
    57ae:	0168      	lsls	r0, r5, #5
    57b0:	181a      	adds	r2, r3, r0
    57b2:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    57b4:	f004 0403 	and.w	r4, r4, #3
    57b8:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    57ba:	2000      	movs	r0, #0
    57bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    57be:	f06f 0013 	mvn.w	r0, #19
    57c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    57c4:	f06f 0014 	mvn.w	r0, #20
}
    57c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57ca:	bf00      	nop
    57cc:	0000548d 	.word	0x0000548d
    57d0:	00008b71 	.word	0x00008b71
    57d4:	2000064c 	.word	0x2000064c

000057d8 <usb_d_ep0_init>:
{
    57d8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    57da:	4602      	mov	r2, r0
    57dc:	2100      	movs	r1, #0
    57de:	4608      	mov	r0, r1
    57e0:	4b01      	ldr	r3, [pc, #4]	; (57e8 <usb_d_ep0_init+0x10>)
    57e2:	4798      	blx	r3
}
    57e4:	bd08      	pop	{r3, pc}
    57e6:	bf00      	nop
    57e8:	00005785 	.word	0x00005785

000057ec <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    57ec:	b538      	push	{r3, r4, r5, lr}
    57ee:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    57f0:	4b06      	ldr	r3, [pc, #24]	; (580c <usb_d_ep_deinit+0x20>)
    57f2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    57f4:	1e04      	subs	r4, r0, #0
    57f6:	db07      	blt.n	5808 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    57f8:	4628      	mov	r0, r5
    57fa:	4b05      	ldr	r3, [pc, #20]	; (5810 <usb_d_ep_deinit+0x24>)
    57fc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    57fe:	4805      	ldr	r0, [pc, #20]	; (5814 <usb_d_ep_deinit+0x28>)
    5800:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5804:	23ff      	movs	r3, #255	; 0xff
    5806:	7043      	strb	r3, [r0, #1]
    5808:	bd38      	pop	{r3, r4, r5, pc}
    580a:	bf00      	nop
    580c:	0000548d 	.word	0x0000548d
    5810:	00008c89 	.word	0x00008c89
    5814:	2000064c 	.word	0x2000064c

00005818 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5818:	b538      	push	{r3, r4, r5, lr}
    581a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    581c:	4b0e      	ldr	r3, [pc, #56]	; (5858 <usb_d_ep_enable+0x40>)
    581e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    5820:	1e04      	subs	r4, r0, #0
    5822:	db16      	blt.n	5852 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5824:	0163      	lsls	r3, r4, #5
    5826:	4a0d      	ldr	r2, [pc, #52]	; (585c <usb_d_ep_enable+0x44>)
    5828:	5cd3      	ldrb	r3, [r2, r3]
    582a:	2b00      	cmp	r3, #0
    582c:	bf0c      	ite	eq
    582e:	2202      	moveq	r2, #2
    5830:	2201      	movne	r2, #1
    5832:	4b0a      	ldr	r3, [pc, #40]	; (585c <usb_d_ep_enable+0x44>)
    5834:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    5838:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    583a:	4628      	mov	r0, r5
    583c:	4b08      	ldr	r3, [pc, #32]	; (5860 <usb_d_ep_enable+0x48>)
    583e:	4798      	blx	r3
	if (rc < 0) {
    5840:	2800      	cmp	r0, #0
    5842:	db00      	blt.n	5846 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    5844:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5846:	4b05      	ldr	r3, [pc, #20]	; (585c <usb_d_ep_enable+0x44>)
    5848:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    584c:	2300      	movs	r3, #0
    584e:	70a3      	strb	r3, [r4, #2]
    5850:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    5852:	f06f 0011 	mvn.w	r0, #17
    5856:	e7f5      	b.n	5844 <usb_d_ep_enable+0x2c>
    5858:	0000548d 	.word	0x0000548d
    585c:	2000064c 	.word	0x2000064c
    5860:	00008d4d 	.word	0x00008d4d

00005864 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5868:	b086      	sub	sp, #24
    586a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    586c:	7a07      	ldrb	r7, [r0, #8]
    586e:	4638      	mov	r0, r7
    5870:	4b3f      	ldr	r3, [pc, #252]	; (5970 <usb_d_ep_transfer+0x10c>)
    5872:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5874:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    5876:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    587a:	1e06      	subs	r6, r0, #0
    587c:	db72      	blt.n	5964 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    587e:	a804      	add	r0, sp, #16
    5880:	4b3c      	ldr	r3, [pc, #240]	; (5974 <usb_d_ep_transfer+0x110>)
    5882:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5884:	4b3c      	ldr	r3, [pc, #240]	; (5978 <usb_d_ep_transfer+0x114>)
    5886:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    588a:	789b      	ldrb	r3, [r3, #2]
    588c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    5890:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5894:	b2db      	uxtb	r3, r3
    5896:	2b01      	cmp	r3, #1
    5898:	d011      	beq.n	58be <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    589a:	a804      	add	r0, sp, #16
    589c:	4b37      	ldr	r3, [pc, #220]	; (597c <usb_d_ep_transfer+0x118>)
    589e:	4798      	blx	r3
		switch (state) {
    58a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    58a4:	b2db      	uxtb	r3, r3
    58a6:	2b05      	cmp	r3, #5
    58a8:	d05f      	beq.n	596a <usb_d_ep_transfer+0x106>
    58aa:	2b06      	cmp	r3, #6
    58ac:	d023      	beq.n	58f6 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    58ae:	2b00      	cmp	r3, #0
    58b0:	bf0c      	ite	eq
    58b2:	f06f 0012 	mvneq.w	r0, #18
    58b6:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    58b8:	b006      	add	sp, #24
    58ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    58be:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5978 <usb_d_ep_transfer+0x114>
    58c2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    58c6:	eb0a 0309 	add.w	r3, sl, r9
    58ca:	2203      	movs	r2, #3
    58cc:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    58ce:	a804      	add	r0, sp, #16
    58d0:	4b2a      	ldr	r3, [pc, #168]	; (597c <usb_d_ep_transfer+0x118>)
    58d2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    58d4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    58d8:	b183      	cbz	r3, 58fc <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    58da:	7a22      	ldrb	r2, [r4, #8]
    58dc:	3500      	adds	r5, #0
    58de:	bf18      	it	ne
    58e0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    58e2:	6823      	ldr	r3, [r4, #0]
    58e4:	9301      	str	r3, [sp, #4]
    58e6:	f8cd 8008 	str.w	r8, [sp, #8]
    58ea:	f017 0f80 	tst.w	r7, #128	; 0x80
    58ee:	d119      	bne.n	5924 <usb_d_ep_transfer+0xc0>
    58f0:	f002 030f 	and.w	r3, r2, #15
    58f4:	e018      	b.n	5928 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    58f6:	f06f 000f 	mvn.w	r0, #15
    58fa:	e7dd      	b.n	58b8 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    58fc:	4b1e      	ldr	r3, [pc, #120]	; (5978 <usb_d_ep_transfer+0x114>)
    58fe:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    5902:	7cda      	ldrb	r2, [r3, #19]
    5904:	7c9d      	ldrb	r5, [r3, #18]
    5906:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    590a:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    590c:	b9a5      	cbnz	r5, 5938 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    590e:	4b1a      	ldr	r3, [pc, #104]	; (5978 <usb_d_ep_transfer+0x114>)
    5910:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    5914:	2304      	movs	r3, #4
    5916:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    5918:	2300      	movs	r3, #0
			zlp                 = true;
    591a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    591c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    591e:	6821      	ldr	r1, [r4, #0]
    5920:	9101      	str	r1, [sp, #4]
    5922:	9302      	str	r3, [sp, #8]
    5924:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    5928:	f88d 300c 	strb.w	r3, [sp, #12]
    592c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    5930:	a801      	add	r0, sp, #4
    5932:	4b13      	ldr	r3, [pc, #76]	; (5980 <usb_d_ep_transfer+0x11c>)
    5934:	4798      	blx	r3
	return rc;
    5936:	e7bf      	b.n	58b8 <usb_d_ep_transfer+0x54>
    5938:	4643      	mov	r3, r8
    593a:	45a8      	cmp	r8, r5
    593c:	bf28      	it	cs
    593e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5940:	4a0d      	ldr	r2, [pc, #52]	; (5978 <usb_d_ep_transfer+0x114>)
    5942:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    5946:	f996 200c 	ldrsb.w	r2, [r6, #12]
    594a:	2a00      	cmp	r2, #0
    594c:	db05      	blt.n	595a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    594e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    5950:	6821      	ldr	r1, [r4, #0]
    5952:	9101      	str	r1, [sp, #4]
    5954:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5956:	2500      	movs	r5, #0
    5958:	e7ca      	b.n	58f0 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    595a:	429d      	cmp	r5, r3
    595c:	bf94      	ite	ls
    595e:	2500      	movls	r5, #0
    5960:	2501      	movhi	r5, #1
    5962:	e7db      	b.n	591c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    5964:	f06f 0011 	mvn.w	r0, #17
    5968:	e7a6      	b.n	58b8 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    596a:	2002      	movs	r0, #2
    596c:	e7a4      	b.n	58b8 <usb_d_ep_transfer+0x54>
    596e:	bf00      	nop
    5970:	0000548d 	.word	0x0000548d
    5974:	000046a1 	.word	0x000046a1
    5978:	2000064c 	.word	0x2000064c
    597c:	000046af 	.word	0x000046af
    5980:	000091ad 	.word	0x000091ad

00005984 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5984:	b538      	push	{r3, r4, r5, lr}
    5986:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    5988:	b141      	cbz	r1, 599c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    598a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    598c:	bf0c      	ite	eq
    598e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5990:	2102      	movne	r1, #2
    5992:	4b13      	ldr	r3, [pc, #76]	; (59e0 <usb_d_ep_halt+0x5c>)
    5994:	4798      	blx	r3
    5996:	4603      	mov	r3, r0
	}
}
    5998:	4618      	mov	r0, r3
    599a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    599c:	4b11      	ldr	r3, [pc, #68]	; (59e4 <usb_d_ep_halt+0x60>)
    599e:	4798      	blx	r3
	if (ep_index < 0) {
    59a0:	1e05      	subs	r5, r0, #0
    59a2:	db19      	blt.n	59d8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    59a4:	2102      	movs	r1, #2
    59a6:	4620      	mov	r0, r4
    59a8:	4b0d      	ldr	r3, [pc, #52]	; (59e0 <usb_d_ep_halt+0x5c>)
    59aa:	4798      	blx	r3
    59ac:	4603      	mov	r3, r0
    59ae:	2800      	cmp	r0, #0
    59b0:	d0f2      	beq.n	5998 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    59b2:	2100      	movs	r1, #0
    59b4:	4620      	mov	r0, r4
    59b6:	4b0a      	ldr	r3, [pc, #40]	; (59e0 <usb_d_ep_halt+0x5c>)
    59b8:	4798      	blx	r3
		if (rc < 0) {
    59ba:	1e03      	subs	r3, r0, #0
    59bc:	dbec      	blt.n	5998 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    59be:	4b0a      	ldr	r3, [pc, #40]	; (59e8 <usb_d_ep_halt+0x64>)
    59c0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    59c4:	2201      	movs	r2, #1
    59c6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    59c8:	2103      	movs	r1, #3
    59ca:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    59cc:	69db      	ldr	r3, [r3, #28]
    59ce:	2200      	movs	r2, #0
    59d0:	4620      	mov	r0, r4
    59d2:	4798      	blx	r3
	return ERR_NONE;
    59d4:	2300      	movs	r3, #0
    59d6:	e7df      	b.n	5998 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    59d8:	f06f 0311 	mvn.w	r3, #17
    59dc:	e7dc      	b.n	5998 <usb_d_ep_halt+0x14>
    59de:	bf00      	nop
    59e0:	00009005 	.word	0x00009005
    59e4:	0000548d 	.word	0x0000548d
    59e8:	2000064c 	.word	0x2000064c

000059ec <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    59ec:	b538      	push	{r3, r4, r5, lr}
    59ee:	460d      	mov	r5, r1
    59f0:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    59f2:	4b0e      	ldr	r3, [pc, #56]	; (5a2c <usb_d_ep_register_callback+0x40>)
    59f4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    59f6:	4b0e      	ldr	r3, [pc, #56]	; (5a30 <usb_d_ep_register_callback+0x44>)
    59f8:	2c00      	cmp	r4, #0
    59fa:	bf08      	it	eq
    59fc:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    59fe:	2800      	cmp	r0, #0
    5a00:	db13      	blt.n	5a2a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    5a02:	2d01      	cmp	r5, #1
    5a04:	d008      	beq.n	5a18 <usb_d_ep_register_callback+0x2c>
    5a06:	b115      	cbz	r5, 5a0e <usb_d_ep_register_callback+0x22>
    5a08:	2d02      	cmp	r5, #2
    5a0a:	d00a      	beq.n	5a22 <usb_d_ep_register_callback+0x36>
    5a0c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5a0e:	4b09      	ldr	r3, [pc, #36]	; (5a34 <usb_d_ep_register_callback+0x48>)
    5a10:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5a14:	6144      	str	r4, [r0, #20]
		break;
    5a16:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5a18:	4b06      	ldr	r3, [pc, #24]	; (5a34 <usb_d_ep_register_callback+0x48>)
    5a1a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5a1e:	6184      	str	r4, [r0, #24]
		break;
    5a20:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5a22:	4b04      	ldr	r3, [pc, #16]	; (5a34 <usb_d_ep_register_callback+0x48>)
    5a24:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5a28:	61c4      	str	r4, [r0, #28]
    5a2a:	bd38      	pop	{r3, r4, r5, pc}
    5a2c:	0000548d 	.word	0x0000548d
    5a30:	000054d1 	.word	0x000054d1
    5a34:	2000064c 	.word	0x2000064c

00005a38 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    5a38:	b900      	cbnz	r0, 5a3c <assert+0x4>
		__asm("BKPT #0");
    5a3a:	be00      	bkpt	0x0000
    5a3c:	4770      	bx	lr

00005a3e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5a3e:	6803      	ldr	r3, [r0, #0]
    5a40:	b14b      	cbz	r3, 5a56 <is_list_element+0x18>
		if (it == element) {
    5a42:	428b      	cmp	r3, r1
    5a44:	d009      	beq.n	5a5a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    5a46:	681b      	ldr	r3, [r3, #0]
    5a48:	b11b      	cbz	r3, 5a52 <is_list_element+0x14>
		if (it == element) {
    5a4a:	4299      	cmp	r1, r3
    5a4c:	d1fb      	bne.n	5a46 <is_list_element+0x8>
			return true;
    5a4e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    5a50:	4770      	bx	lr
	return false;
    5a52:	2000      	movs	r0, #0
    5a54:	4770      	bx	lr
    5a56:	2000      	movs	r0, #0
    5a58:	4770      	bx	lr
			return true;
    5a5a:	2001      	movs	r0, #1
    5a5c:	4770      	bx	lr
	...

00005a60 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5a60:	b538      	push	{r3, r4, r5, lr}
    5a62:	4604      	mov	r4, r0
    5a64:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    5a66:	4b06      	ldr	r3, [pc, #24]	; (5a80 <list_insert_as_head+0x20>)
    5a68:	4798      	blx	r3
    5a6a:	f080 0001 	eor.w	r0, r0, #1
    5a6e:	2239      	movs	r2, #57	; 0x39
    5a70:	4904      	ldr	r1, [pc, #16]	; (5a84 <list_insert_as_head+0x24>)
    5a72:	b2c0      	uxtb	r0, r0
    5a74:	4b04      	ldr	r3, [pc, #16]	; (5a88 <list_insert_as_head+0x28>)
    5a76:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5a78:	6823      	ldr	r3, [r4, #0]
    5a7a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    5a7c:	6025      	str	r5, [r4, #0]
    5a7e:	bd38      	pop	{r3, r4, r5, pc}
    5a80:	00005a3f 	.word	0x00005a3f
    5a84:	0000d510 	.word	0x0000d510
    5a88:	00005a39 	.word	0x00005a39

00005a8c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5a8c:	6803      	ldr	r3, [r0, #0]
    5a8e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5a90:	6001      	str	r1, [r0, #0]
    5a92:	4770      	bx	lr

00005a94 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5a94:	b570      	push	{r4, r5, r6, lr}
    5a96:	4605      	mov	r5, r0
    5a98:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    5a9a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    5a9c:	4b0a      	ldr	r3, [pc, #40]	; (5ac8 <list_insert_at_end+0x34>)
    5a9e:	4798      	blx	r3
    5aa0:	f080 0001 	eor.w	r0, r0, #1
    5aa4:	224f      	movs	r2, #79	; 0x4f
    5aa6:	4909      	ldr	r1, [pc, #36]	; (5acc <list_insert_at_end+0x38>)
    5aa8:	b2c0      	uxtb	r0, r0
    5aaa:	4b09      	ldr	r3, [pc, #36]	; (5ad0 <list_insert_at_end+0x3c>)
    5aac:	4798      	blx	r3

	if (!list->head) {
    5aae:	682b      	ldr	r3, [r5, #0]
    5ab0:	b91b      	cbnz	r3, 5aba <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    5ab2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    5ab4:	6033      	str	r3, [r6, #0]
		return;
    5ab6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    5ab8:	461c      	mov	r4, r3
	while (it->next) {
    5aba:	6823      	ldr	r3, [r4, #0]
    5abc:	2b00      	cmp	r3, #0
    5abe:	d1fb      	bne.n	5ab8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    5ac0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    5ac2:	6033      	str	r3, [r6, #0]
    5ac4:	bd70      	pop	{r4, r5, r6, pc}
    5ac6:	bf00      	nop
    5ac8:	00005a3f 	.word	0x00005a3f
    5acc:	0000d510 	.word	0x0000d510
    5ad0:	00005a39 	.word	0x00005a39

00005ad4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    5ad4:	6803      	ldr	r3, [r0, #0]
    5ad6:	b10b      	cbz	r3, 5adc <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    5ad8:	681a      	ldr	r2, [r3, #0]
    5ada:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    5adc:	4618      	mov	r0, r3
    5ade:	4770      	bx	lr

00005ae0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    5ae0:	b570      	push	{r4, r5, r6, lr}
    5ae2:	460e      	mov	r6, r1
    5ae4:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    5ae6:	4604      	mov	r4, r0
    5ae8:	b178      	cbz	r0, 5b0a <ringbuffer_init+0x2a>
    5aea:	b181      	cbz	r1, 5b0e <ringbuffer_init+0x2e>
    5aec:	b1a2      	cbz	r2, 5b18 <ringbuffer_init+0x38>
    5aee:	2001      	movs	r0, #1
    5af0:	2228      	movs	r2, #40	; 0x28
    5af2:	490d      	ldr	r1, [pc, #52]	; (5b28 <ringbuffer_init+0x48>)
    5af4:	4b0d      	ldr	r3, [pc, #52]	; (5b2c <ringbuffer_init+0x4c>)
    5af6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    5af8:	1e6b      	subs	r3, r5, #1
    5afa:	421d      	tst	r5, r3
    5afc:	d109      	bne.n	5b12 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    5afe:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    5b00:	2000      	movs	r0, #0
    5b02:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    5b04:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    5b06:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    5b08:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5b0a:	2000      	movs	r0, #0
    5b0c:	e7f0      	b.n	5af0 <ringbuffer_init+0x10>
    5b0e:	2000      	movs	r0, #0
    5b10:	e7ee      	b.n	5af0 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    5b12:	f06f 000c 	mvn.w	r0, #12
    5b16:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    5b18:	2228      	movs	r2, #40	; 0x28
    5b1a:	4903      	ldr	r1, [pc, #12]	; (5b28 <ringbuffer_init+0x48>)
    5b1c:	2000      	movs	r0, #0
    5b1e:	4b03      	ldr	r3, [pc, #12]	; (5b2c <ringbuffer_init+0x4c>)
    5b20:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    5b22:	1e6b      	subs	r3, r5, #1
    5b24:	e7eb      	b.n	5afe <ringbuffer_init+0x1e>
    5b26:	bf00      	nop
    5b28:	0000d530 	.word	0x0000d530
    5b2c:	00005a39 	.word	0x00005a39

00005b30 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    5b30:	b538      	push	{r3, r4, r5, lr}
    5b32:	460d      	mov	r5, r1
	ASSERT(rb && data);
    5b34:	4604      	mov	r4, r0
    5b36:	b1a0      	cbz	r0, 5b62 <ringbuffer_get+0x32>
    5b38:	1c08      	adds	r0, r1, #0
    5b3a:	bf18      	it	ne
    5b3c:	2001      	movne	r0, #1
    5b3e:	2240      	movs	r2, #64	; 0x40
    5b40:	490a      	ldr	r1, [pc, #40]	; (5b6c <ringbuffer_get+0x3c>)
    5b42:	4b0b      	ldr	r3, [pc, #44]	; (5b70 <ringbuffer_get+0x40>)
    5b44:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    5b46:	68a3      	ldr	r3, [r4, #8]
    5b48:	68e2      	ldr	r2, [r4, #12]
    5b4a:	429a      	cmp	r2, r3
    5b4c:	d00b      	beq.n	5b66 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    5b4e:	6862      	ldr	r2, [r4, #4]
    5b50:	4013      	ands	r3, r2
    5b52:	6822      	ldr	r2, [r4, #0]
    5b54:	5cd3      	ldrb	r3, [r2, r3]
    5b56:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    5b58:	68a3      	ldr	r3, [r4, #8]
    5b5a:	3301      	adds	r3, #1
    5b5c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    5b5e:	2000      	movs	r0, #0
    5b60:	bd38      	pop	{r3, r4, r5, pc}
    5b62:	2000      	movs	r0, #0
    5b64:	e7eb      	b.n	5b3e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    5b66:	f06f 0009 	mvn.w	r0, #9
}
    5b6a:	bd38      	pop	{r3, r4, r5, pc}
    5b6c:	0000d530 	.word	0x0000d530
    5b70:	00005a39 	.word	0x00005a39

00005b74 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    5b74:	b538      	push	{r3, r4, r5, lr}
    5b76:	460d      	mov	r5, r1
	ASSERT(rb);
    5b78:	4604      	mov	r4, r0
    5b7a:	2251      	movs	r2, #81	; 0x51
    5b7c:	490b      	ldr	r1, [pc, #44]	; (5bac <ringbuffer_put+0x38>)
    5b7e:	3000      	adds	r0, #0
    5b80:	bf18      	it	ne
    5b82:	2001      	movne	r0, #1
    5b84:	4b0a      	ldr	r3, [pc, #40]	; (5bb0 <ringbuffer_put+0x3c>)
    5b86:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    5b88:	68e3      	ldr	r3, [r4, #12]
    5b8a:	6862      	ldr	r2, [r4, #4]
    5b8c:	4013      	ands	r3, r2
    5b8e:	6822      	ldr	r2, [r4, #0]
    5b90:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    5b92:	68e3      	ldr	r3, [r4, #12]
    5b94:	6861      	ldr	r1, [r4, #4]
    5b96:	68a2      	ldr	r2, [r4, #8]
    5b98:	1a9a      	subs	r2, r3, r2
    5b9a:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    5b9c:	bf84      	itt	hi
    5b9e:	1a59      	subhi	r1, r3, r1
    5ba0:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    5ba2:	3301      	adds	r3, #1
    5ba4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    5ba6:	2000      	movs	r0, #0
    5ba8:	bd38      	pop	{r3, r4, r5, pc}
    5baa:	bf00      	nop
    5bac:	0000d530 	.word	0x0000d530
    5bb0:	00005a39 	.word	0x00005a39

00005bb4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    5bb4:	b510      	push	{r4, lr}
	ASSERT(rb);
    5bb6:	4604      	mov	r4, r0
    5bb8:	2267      	movs	r2, #103	; 0x67
    5bba:	4905      	ldr	r1, [pc, #20]	; (5bd0 <ringbuffer_num+0x1c>)
    5bbc:	3000      	adds	r0, #0
    5bbe:	bf18      	it	ne
    5bc0:	2001      	movne	r0, #1
    5bc2:	4b04      	ldr	r3, [pc, #16]	; (5bd4 <ringbuffer_num+0x20>)
    5bc4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    5bc6:	68e0      	ldr	r0, [r4, #12]
    5bc8:	68a3      	ldr	r3, [r4, #8]
}
    5bca:	1ac0      	subs	r0, r0, r3
    5bcc:	bd10      	pop	{r4, pc}
    5bce:	bf00      	nop
    5bd0:	0000d530 	.word	0x0000d530
    5bd4:	00005a39 	.word	0x00005a39

00005bd8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    5bd8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    5bda:	4a06      	ldr	r2, [pc, #24]	; (5bf4 <_sbrk+0x1c>)
    5bdc:	6812      	ldr	r2, [r2, #0]
    5bde:	b122      	cbz	r2, 5bea <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5be0:	4a04      	ldr	r2, [pc, #16]	; (5bf4 <_sbrk+0x1c>)
    5be2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5be4:	4403      	add	r3, r0
    5be6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    5be8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5bea:	4903      	ldr	r1, [pc, #12]	; (5bf8 <_sbrk+0x20>)
    5bec:	4a01      	ldr	r2, [pc, #4]	; (5bf4 <_sbrk+0x1c>)
    5bee:	6011      	str	r1, [r2, #0]
    5bf0:	e7f6      	b.n	5be0 <_sbrk+0x8>
    5bf2:	bf00      	nop
    5bf4:	200007ec 	.word	0x200007ec
    5bf8:	20013bb0 	.word	0x20013bb0

00005bfc <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    5bfc:	f04f 30ff 	mov.w	r0, #4294967295
    5c00:	4770      	bx	lr

00005c02 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    5c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5c06:	604b      	str	r3, [r1, #4]

	return 0;
}
    5c08:	2000      	movs	r0, #0
    5c0a:	4770      	bx	lr

00005c0c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    5c0c:	2001      	movs	r0, #1
    5c0e:	4770      	bx	lr

00005c10 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    5c10:	2000      	movs	r0, #0
    5c12:	4770      	bx	lr

00005c14 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5c14:	6940      	ldr	r0, [r0, #20]
    5c16:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5c1a:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5c1e:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    5c20:	0040      	lsls	r0, r0, #1
    5c22:	3076      	adds	r0, #118	; 0x76
}
    5c24:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    5c28:	4770      	bx	lr
	...

00005c2c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    5c2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    5c2e:	f013 0f01 	tst.w	r3, #1
    5c32:	d11b      	bne.n	5c6c <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c34:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c36:	f013 0f03 	tst.w	r3, #3
    5c3a:	d1fb      	bne.n	5c34 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    5c3c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    5c3e:	f013 0f02 	tst.w	r3, #2
    5c42:	d00d      	beq.n	5c60 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    5c44:	8803      	ldrh	r3, [r0, #0]
    5c46:	f023 0302 	bic.w	r3, r3, #2
    5c4a:	041b      	lsls	r3, r3, #16
    5c4c:	0c1b      	lsrs	r3, r3, #16
    5c4e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c50:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c52:	f013 0f03 	tst.w	r3, #3
    5c56:	d1fb      	bne.n	5c50 <_adc_init+0x24>
    5c58:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c5a:	f013 0f02 	tst.w	r3, #2
    5c5e:	d1fb      	bne.n	5c58 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    5c60:	2301      	movs	r3, #1
    5c62:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c64:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c66:	f013 0f03 	tst.w	r3, #3
    5c6a:	d1fb      	bne.n	5c64 <_adc_init+0x38>
    5c6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c6e:	f013 0f01 	tst.w	r3, #1
    5c72:	d1fb      	bne.n	5c6c <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    5c74:	2316      	movs	r3, #22
    5c76:	4a37      	ldr	r2, [pc, #220]	; (5d54 <_adc_init+0x128>)
    5c78:	fb03 2301 	mla	r3, r3, r1, r2
    5c7c:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    5c7e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c80:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5c86:	2b00      	cmp	r3, #0
    5c88:	d1fa      	bne.n	5c80 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    5c8a:	2316      	movs	r3, #22
    5c8c:	4a31      	ldr	r2, [pc, #196]	; (5d54 <_adc_init+0x128>)
    5c8e:	fb03 2301 	mla	r3, r3, r1, r2
    5c92:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    5c94:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5c96:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d1fa      	bne.n	5c96 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    5ca0:	2316      	movs	r3, #22
    5ca2:	4a2c      	ldr	r2, [pc, #176]	; (5d54 <_adc_init+0x128>)
    5ca4:	fb03 2301 	mla	r3, r3, r1, r2
    5ca8:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    5caa:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    5cac:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    5cae:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5cb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d1fa      	bne.n	5cb0 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    5cba:	2316      	movs	r3, #22
    5cbc:	4a25      	ldr	r2, [pc, #148]	; (5d54 <_adc_init+0x128>)
    5cbe:	fb03 2301 	mla	r3, r3, r1, r2
    5cc2:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    5cc4:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5cc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5ccc:	2b00      	cmp	r3, #0
    5cce:	d1fa      	bne.n	5cc6 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    5cd0:	2316      	movs	r3, #22
    5cd2:	4a20      	ldr	r2, [pc, #128]	; (5d54 <_adc_init+0x128>)
    5cd4:	fb03 2301 	mla	r3, r3, r1, r2
    5cd8:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    5cda:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5cdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d1fa      	bne.n	5cdc <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    5ce6:	2316      	movs	r3, #22
    5ce8:	4a1a      	ldr	r2, [pc, #104]	; (5d54 <_adc_init+0x128>)
    5cea:	fb03 2301 	mla	r3, r3, r1, r2
    5cee:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    5cf0:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5cf2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5cf4:	f013 0f80 	tst.w	r3, #128	; 0x80
    5cf8:	d1fb      	bne.n	5cf2 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    5cfa:	2316      	movs	r3, #22
    5cfc:	4a15      	ldr	r2, [pc, #84]	; (5d54 <_adc_init+0x128>)
    5cfe:	fb03 2301 	mla	r3, r3, r1, r2
    5d02:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    5d04:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5d06:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d08:	f413 7f80 	tst.w	r3, #256	; 0x100
    5d0c:	d1fb      	bne.n	5d06 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    5d0e:	2316      	movs	r3, #22
    5d10:	4a10      	ldr	r2, [pc, #64]	; (5d54 <_adc_init+0x128>)
    5d12:	fb03 2301 	mla	r3, r3, r1, r2
    5d16:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    5d18:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5d1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d1c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5d20:	d1fb      	bne.n	5d1a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    5d22:	2316      	movs	r3, #22
    5d24:	4a0b      	ldr	r2, [pc, #44]	; (5d54 <_adc_init+0x128>)
    5d26:	fb03 2301 	mla	r3, r3, r1, r2
    5d2a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    5d2c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5d2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d30:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5d34:	d1fb      	bne.n	5d2e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    5d36:	2216      	movs	r2, #22
    5d38:	4b06      	ldr	r3, [pc, #24]	; (5d54 <_adc_init+0x128>)
    5d3a:	fb02 3101 	mla	r1, r2, r1, r3
    5d3e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    5d40:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    5d42:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    5d44:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5d46:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d48:	f013 0f03 	tst.w	r3, #3
    5d4c:	d1fb      	bne.n	5d46 <_adc_init+0x11a>

	return ERR_NONE;
}
    5d4e:	2000      	movs	r0, #0
    5d50:	4770      	bx	lr
    5d52:	bf00      	nop
    5d54:	0000d554 	.word	0x0000d554

00005d58 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    5d58:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    5d5a:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    5d5c:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    5d60:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    5d64:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    5d66:	f013 0f01 	tst.w	r3, #1
    5d6a:	d106      	bne.n	5d7a <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    5d6c:	f013 0f02 	tst.w	r3, #2
    5d70:	d10d      	bne.n	5d8e <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    5d72:	f013 0f04 	tst.w	r3, #4
    5d76:	d111      	bne.n	5d9c <_adc_interrupt_handler+0x44>
    5d78:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    5d7a:	2301      	movs	r3, #1
    5d7c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    5d80:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    5d84:	6883      	ldr	r3, [r0, #8]
    5d86:	b292      	uxth	r2, r2
    5d88:	2100      	movs	r1, #0
    5d8a:	4798      	blx	r3
    5d8c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    5d8e:	2302      	movs	r3, #2
    5d90:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    5d94:	6843      	ldr	r3, [r0, #4]
    5d96:	2100      	movs	r1, #0
    5d98:	4798      	blx	r3
    5d9a:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    5d9c:	2304      	movs	r3, #4
    5d9e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    5da2:	6803      	ldr	r3, [r0, #0]
    5da4:	2100      	movs	r1, #0
    5da6:	4798      	blx	r3
	}
}
    5da8:	e7e6      	b.n	5d78 <_adc_interrupt_handler+0x20>
	...

00005dac <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    5dac:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    5db0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    5db4:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    5db8:	b148      	cbz	r0, 5dce <_adc_get_regs+0x22>
    5dba:	2801      	cmp	r0, #1
    5dbc:	d009      	beq.n	5dd2 <_adc_get_regs+0x26>
{
    5dbe:	b508      	push	{r3, lr}
	ASSERT(false);
    5dc0:	228c      	movs	r2, #140	; 0x8c
    5dc2:	4905      	ldr	r1, [pc, #20]	; (5dd8 <_adc_get_regs+0x2c>)
    5dc4:	2000      	movs	r0, #0
    5dc6:	4b05      	ldr	r3, [pc, #20]	; (5ddc <_adc_get_regs+0x30>)
    5dc8:	4798      	blx	r3
	return 0;
    5dca:	2000      	movs	r0, #0
    5dcc:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    5dce:	2000      	movs	r0, #0
    5dd0:	4770      	bx	lr
    5dd2:	2001      	movs	r0, #1
    5dd4:	4770      	bx	lr
    5dd6:	bf00      	nop
    5dd8:	0000d580 	.word	0x0000d580
    5ddc:	00005a39 	.word	0x00005a39

00005de0 <_adc_async_init>:
{
    5de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5de4:	460c      	mov	r4, r1
	ASSERT(device);
    5de6:	4605      	mov	r5, r0
    5de8:	22e6      	movs	r2, #230	; 0xe6
    5dea:	493b      	ldr	r1, [pc, #236]	; (5ed8 <_adc_async_init+0xf8>)
    5dec:	3000      	adds	r0, #0
    5dee:	bf18      	it	ne
    5df0:	2001      	movne	r0, #1
    5df2:	4b3a      	ldr	r3, [pc, #232]	; (5edc <_adc_async_init+0xfc>)
    5df4:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    5df6:	4620      	mov	r0, r4
    5df8:	4b39      	ldr	r3, [pc, #228]	; (5ee0 <_adc_async_init+0x100>)
    5dfa:	4798      	blx	r3
    5dfc:	4601      	mov	r1, r0
    5dfe:	4620      	mov	r0, r4
    5e00:	4b38      	ldr	r3, [pc, #224]	; (5ee4 <_adc_async_init+0x104>)
    5e02:	4798      	blx	r3
	if (init_status) {
    5e04:	4606      	mov	r6, r0
    5e06:	b110      	cbz	r0, 5e0e <_adc_async_init+0x2e>
}
    5e08:	4630      	mov	r0, r6
    5e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    5e0e:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    5e10:	4b35      	ldr	r3, [pc, #212]	; (5ee8 <_adc_async_init+0x108>)
    5e12:	429c      	cmp	r4, r3
    5e14:	d05c      	beq.n	5ed0 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    5e16:	4b35      	ldr	r3, [pc, #212]	; (5eec <_adc_async_init+0x10c>)
    5e18:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    5e1a:	bf04      	itt	eq
    5e1c:	4b34      	ldreq	r3, [pc, #208]	; (5ef0 <_adc_async_init+0x110>)
    5e1e:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    5e20:	4628      	mov	r0, r5
    5e22:	4f34      	ldr	r7, [pc, #208]	; (5ef4 <_adc_async_init+0x114>)
    5e24:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e26:	0943      	lsrs	r3, r0, #5
    5e28:	f000 001f 	and.w	r0, r0, #31
    5e2c:	2401      	movs	r4, #1
    5e2e:	fa04 f000 	lsl.w	r0, r4, r0
    5e32:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5ef8 <_adc_async_init+0x118>
    5e36:	3320      	adds	r3, #32
    5e38:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e40:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    5e44:	4628      	mov	r0, r5
    5e46:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e48:	0943      	lsrs	r3, r0, #5
    5e4a:	f000 001f 	and.w	r0, r0, #31
    5e4e:	fa04 f000 	lsl.w	r0, r4, r0
    5e52:	3360      	adds	r3, #96	; 0x60
    5e54:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    5e58:	4628      	mov	r0, r5
    5e5a:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e5c:	0943      	lsrs	r3, r0, #5
    5e5e:	f000 001f 	and.w	r0, r0, #31
    5e62:	4084      	lsls	r4, r0
    5e64:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    5e68:	4628      	mov	r0, r5
    5e6a:	47b8      	blx	r7
    5e6c:	3001      	adds	r0, #1
    5e6e:	b280      	uxth	r0, r0
    5e70:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5e72:	2b00      	cmp	r3, #0
    5e74:	dbc8      	blt.n	5e08 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e76:	095b      	lsrs	r3, r3, #5
    5e78:	f000 001f 	and.w	r0, r0, #31
    5e7c:	2201      	movs	r2, #1
    5e7e:	fa02 f000 	lsl.w	r0, r2, r0
    5e82:	3320      	adds	r3, #32
    5e84:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5e88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e8c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    5e90:	4628      	mov	r0, r5
    5e92:	47b8      	blx	r7
    5e94:	3001      	adds	r0, #1
    5e96:	b280      	uxth	r0, r0
    5e98:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5e9a:	2b00      	cmp	r3, #0
    5e9c:	dbb4      	blt.n	5e08 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e9e:	095b      	lsrs	r3, r3, #5
    5ea0:	f000 001f 	and.w	r0, r0, #31
    5ea4:	2201      	movs	r2, #1
    5ea6:	fa02 f000 	lsl.w	r0, r2, r0
    5eaa:	3360      	adds	r3, #96	; 0x60
    5eac:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    5eb0:	4628      	mov	r0, r5
    5eb2:	47b8      	blx	r7
    5eb4:	3001      	adds	r0, #1
    5eb6:	b280      	uxth	r0, r0
    5eb8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5eba:	2b00      	cmp	r3, #0
    5ebc:	dba4      	blt.n	5e08 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5ebe:	095b      	lsrs	r3, r3, #5
    5ec0:	f000 001f 	and.w	r0, r0, #31
    5ec4:	2201      	movs	r2, #1
    5ec6:	fa02 f000 	lsl.w	r0, r2, r0
    5eca:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    5ece:	e79b      	b.n	5e08 <_adc_async_init+0x28>
		_adc0_dev = dev;
    5ed0:	4b07      	ldr	r3, [pc, #28]	; (5ef0 <_adc_async_init+0x110>)
    5ed2:	601d      	str	r5, [r3, #0]
    5ed4:	e7a4      	b.n	5e20 <_adc_async_init+0x40>
    5ed6:	bf00      	nop
    5ed8:	0000d580 	.word	0x0000d580
    5edc:	00005a39 	.word	0x00005a39
    5ee0:	00005dad 	.word	0x00005dad
    5ee4:	00005c2d 	.word	0x00005c2d
    5ee8:	43001c00 	.word	0x43001c00
    5eec:	43002000 	.word	0x43002000
    5ef0:	200007f0 	.word	0x200007f0
    5ef4:	00005c15 	.word	0x00005c15
    5ef8:	e000e100 	.word	0xe000e100

00005efc <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    5efc:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5efe:	8813      	ldrh	r3, [r2, #0]
    5f00:	b29b      	uxth	r3, r3
    5f02:	f043 0302 	orr.w	r3, r3, #2
    5f06:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5f08:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5f0a:	f013 0f03 	tst.w	r3, #3
    5f0e:	d1fb      	bne.n	5f08 <_adc_async_enable_channel+0xc>
}
    5f10:	4770      	bx	lr

00005f12 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    5f12:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    5f14:	88db      	ldrh	r3, [r3, #6]
    5f16:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    5f1a:	2b03      	cmp	r3, #3
}
    5f1c:	bf0c      	ite	eq
    5f1e:	2001      	moveq	r0, #1
    5f20:	2002      	movne	r0, #2
    5f22:	4770      	bx	lr

00005f24 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    5f24:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    5f26:	7d13      	ldrb	r3, [r2, #20]
    5f28:	f043 0302 	orr.w	r3, r3, #2
    5f2c:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    5f2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5f34:	2b00      	cmp	r3, #0
    5f36:	d1fa      	bne.n	5f2e <_adc_async_convert+0xa>
}
    5f38:	4770      	bx	lr

00005f3a <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    5f3a:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    5f3c:	2a01      	cmp	r2, #1
    5f3e:	d007      	beq.n	5f50 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    5f40:	2a02      	cmp	r2, #2
    5f42:	d00e      	beq.n	5f62 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    5f44:	b91a      	cbnz	r2, 5f4e <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    5f46:	b1ab      	cbz	r3, 5f74 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    5f48:	2301      	movs	r3, #1
    5f4a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5f4e:	4770      	bx	lr
	if (value == 0x0) {
    5f50:	b91b      	cbnz	r3, 5f5a <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    5f52:	2304      	movs	r3, #4
    5f54:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5f58:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    5f5a:	2304      	movs	r3, #4
    5f5c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5f60:	4770      	bx	lr
	if (value == 0x0) {
    5f62:	b91b      	cbnz	r3, 5f6c <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    5f64:	2302      	movs	r3, #2
    5f66:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5f6a:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    5f6c:	2302      	movs	r3, #2
    5f6e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    5f72:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    5f74:	2301      	movs	r3, #1
    5f76:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    5f7a:	4770      	bx	lr

00005f7c <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    5f7c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5f7e:	4b02      	ldr	r3, [pc, #8]	; (5f88 <ADC0_0_Handler+0xc>)
    5f80:	6818      	ldr	r0, [r3, #0]
    5f82:	4b02      	ldr	r3, [pc, #8]	; (5f8c <ADC0_0_Handler+0x10>)
    5f84:	4798      	blx	r3
    5f86:	bd08      	pop	{r3, pc}
    5f88:	200007f0 	.word	0x200007f0
    5f8c:	00005d59 	.word	0x00005d59

00005f90 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    5f90:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    5f92:	4b02      	ldr	r3, [pc, #8]	; (5f9c <ADC0_1_Handler+0xc>)
    5f94:	6818      	ldr	r0, [r3, #0]
    5f96:	4b02      	ldr	r3, [pc, #8]	; (5fa0 <ADC0_1_Handler+0x10>)
    5f98:	4798      	blx	r3
    5f9a:	bd08      	pop	{r3, pc}
    5f9c:	200007f0 	.word	0x200007f0
    5fa0:	00005d59 	.word	0x00005d59

00005fa4 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    5fa4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5fa6:	4b02      	ldr	r3, [pc, #8]	; (5fb0 <ADC1_0_Handler+0xc>)
    5fa8:	6858      	ldr	r0, [r3, #4]
    5faa:	4b02      	ldr	r3, [pc, #8]	; (5fb4 <ADC1_0_Handler+0x10>)
    5fac:	4798      	blx	r3
    5fae:	bd08      	pop	{r3, pc}
    5fb0:	200007f0 	.word	0x200007f0
    5fb4:	00005d59 	.word	0x00005d59

00005fb8 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    5fb8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    5fba:	4b02      	ldr	r3, [pc, #8]	; (5fc4 <ADC1_1_Handler+0xc>)
    5fbc:	6858      	ldr	r0, [r3, #4]
    5fbe:	4b02      	ldr	r3, [pc, #8]	; (5fc8 <ADC1_1_Handler+0x10>)
    5fc0:	4798      	blx	r3
    5fc2:	bd08      	pop	{r3, pc}
    5fc4:	200007f0 	.word	0x200007f0
    5fc8:	00005d59 	.word	0x00005d59

00005fcc <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fcc:	0943      	lsrs	r3, r0, #5
    5fce:	f000 001f 	and.w	r0, r0, #31
    5fd2:	2201      	movs	r2, #1
    5fd4:	fa02 f000 	lsl.w	r0, r2, r0
    5fd8:	3340      	adds	r3, #64	; 0x40
    5fda:	4a02      	ldr	r2, [pc, #8]	; (5fe4 <_irq_set+0x18>)
    5fdc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5fe0:	4770      	bx	lr
    5fe2:	bf00      	nop
    5fe4:	e000e100 	.word	0xe000e100

00005fe8 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    5fe8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5fec:	00c0      	lsls	r0, r0, #3
    5fee:	4770      	bx	lr

00005ff0 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    5ff0:	4b01      	ldr	r3, [pc, #4]	; (5ff8 <_get_cycles_for_ms+0x8>)
    5ff2:	fb03 f000 	mul.w	r0, r3, r0
    5ff6:	4770      	bx	lr
    5ff8:	0001d4c0 	.word	0x0001d4c0

00005ffc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5ffc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5ffe:	4a0e      	ldr	r2, [pc, #56]	; (6038 <_init_chip+0x3c>)
    6000:	8813      	ldrh	r3, [r2, #0]
    6002:	b29b      	uxth	r3, r3
    6004:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    6008:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    600a:	4b0c      	ldr	r3, [pc, #48]	; (603c <_init_chip+0x40>)
    600c:	4798      	blx	r3
	_oscctrl_init_sources();
    600e:	4b0c      	ldr	r3, [pc, #48]	; (6040 <_init_chip+0x44>)
    6010:	4798      	blx	r3
	_mclk_init();
    6012:	4b0c      	ldr	r3, [pc, #48]	; (6044 <_init_chip+0x48>)
    6014:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6016:	2004      	movs	r0, #4
    6018:	4c0b      	ldr	r4, [pc, #44]	; (6048 <_init_chip+0x4c>)
    601a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    601c:	4b0b      	ldr	r3, [pc, #44]	; (604c <_init_chip+0x50>)
    601e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6020:	f640 70fb 	movw	r0, #4091	; 0xffb
    6024:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    6026:	4a0a      	ldr	r2, [pc, #40]	; (6050 <_init_chip+0x54>)
    6028:	6913      	ldr	r3, [r2, #16]
    602a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    602e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    6030:	4b08      	ldr	r3, [pc, #32]	; (6054 <_init_chip+0x58>)
    6032:	4798      	blx	r3
    6034:	bd10      	pop	{r4, pc}
    6036:	bf00      	nop
    6038:	41004000 	.word	0x41004000
    603c:	000064d9 	.word	0x000064d9
    6040:	000064ed 	.word	0x000064ed
    6044:	00006401 	.word	0x00006401
    6048:	00006389 	.word	0x00006389
    604c:	000064f1 	.word	0x000064f1
    6050:	40000800 	.word	0x40000800
    6054:	000060cd 	.word	0x000060cd

00006058 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    6058:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    605a:	4a1a      	ldr	r2, [pc, #104]	; (60c4 <_dmac_handler+0x6c>)
    605c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    605e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    6062:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    6066:	4818      	ldr	r0, [pc, #96]	; (60c8 <_dmac_handler+0x70>)
    6068:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    606c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6070:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    6074:	f012 0f01 	tst.w	r2, #1
    6078:	d10a      	bne.n	6090 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    607a:	011a      	lsls	r2, r3, #4
    607c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6080:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    6084:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    6088:	f012 0f02 	tst.w	r2, #2
    608c:	d10b      	bne.n	60a6 <_dmac_handler+0x4e>
    608e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    6090:	011a      	lsls	r2, r3, #4
    6092:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    6096:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    609a:	2101      	movs	r1, #1
    609c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    60a0:	6843      	ldr	r3, [r0, #4]
    60a2:	4798      	blx	r3
    60a4:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    60a6:	011a      	lsls	r2, r3, #4
    60a8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    60ac:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    60b0:	2102      	movs	r1, #2
    60b2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    60b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    60ba:	4a03      	ldr	r2, [pc, #12]	; (60c8 <_dmac_handler+0x70>)
    60bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60c0:	4798      	blx	r3
	}
}
    60c2:	e7e4      	b.n	608e <_dmac_handler+0x36>
    60c4:	4100a000 	.word	0x4100a000
    60c8:	200007f8 	.word	0x200007f8

000060cc <_dma_init>:
{
    60cc:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    60ce:	4a32      	ldr	r2, [pc, #200]	; (6198 <_dma_init+0xcc>)
    60d0:	8813      	ldrh	r3, [r2, #0]
    60d2:	f023 0302 	bic.w	r3, r3, #2
    60d6:	041b      	lsls	r3, r3, #16
    60d8:	0c1b      	lsrs	r3, r3, #16
    60da:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    60dc:	8853      	ldrh	r3, [r2, #2]
    60de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    60e2:	041b      	lsls	r3, r3, #16
    60e4:	0c1b      	lsrs	r3, r3, #16
    60e6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    60e8:	8813      	ldrh	r3, [r2, #0]
    60ea:	b29b      	uxth	r3, r3
    60ec:	f043 0301 	orr.w	r3, r3, #1
    60f0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    60f2:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    60f4:	f013 0f01 	tst.w	r3, #1
    60f8:	d1fb      	bne.n	60f2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    60fa:	4b27      	ldr	r3, [pc, #156]	; (6198 <_dma_init+0xcc>)
    60fc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    6100:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    6102:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    6104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    6108:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    610c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    610e:	2100      	movs	r1, #0
    6110:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    6112:	4a22      	ldr	r2, [pc, #136]	; (619c <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    6114:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    6116:	4a22      	ldr	r2, [pc, #136]	; (61a0 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    6118:	639a      	str	r2, [r3, #56]	; 0x38
    611a:	4b22      	ldr	r3, [pc, #136]	; (61a4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    611c:	4c1f      	ldr	r4, [pc, #124]	; (619c <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    611e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    6120:	681d      	ldr	r5, [r3, #0]
    6122:	0108      	lsls	r0, r1, #4
    6124:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    6128:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    612c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    612e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    6130:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    6134:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    6136:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    613a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    613c:	1822      	adds	r2, r4, r0
    613e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    6140:	60d6      	str	r6, [r2, #12]
    6142:	3101      	adds	r1, #1
    6144:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    6146:	2920      	cmp	r1, #32
    6148:	d1ea      	bne.n	6120 <_dma_init+0x54>
    614a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    614c:	2001      	movs	r0, #1
    614e:	4916      	ldr	r1, [pc, #88]	; (61a8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    6150:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    6152:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6156:	d00b      	beq.n	6170 <_dma_init+0xa4>
    6158:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    615a:	2b24      	cmp	r3, #36	; 0x24
    615c:	d1f8      	bne.n	6150 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    615e:	4a0e      	ldr	r2, [pc, #56]	; (6198 <_dma_init+0xcc>)
    6160:	8813      	ldrh	r3, [r2, #0]
    6162:	b29b      	uxth	r3, r3
    6164:	f043 0302 	orr.w	r3, r3, #2
    6168:	8013      	strh	r3, [r2, #0]
}
    616a:	2000      	movs	r0, #0
    616c:	bc70      	pop	{r4, r5, r6}
    616e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6170:	095c      	lsrs	r4, r3, #5
    6172:	f002 021f 	and.w	r2, r2, #31
    6176:	fa00 f202 	lsl.w	r2, r0, r2
    617a:	f104 0520 	add.w	r5, r4, #32
    617e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6182:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6186:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    618a:	f104 0560 	add.w	r5, r4, #96	; 0x60
    618e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6192:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    6196:	e7df      	b.n	6158 <_dma_init+0x8c>
    6198:	4100a000 	.word	0x4100a000
    619c:	20003760 	.word	0x20003760
    61a0:	20003960 	.word	0x20003960
    61a4:	0000d598 	.word	0x0000d598
    61a8:	e000e100 	.word	0xe000e100

000061ac <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    61ac:	b991      	cbnz	r1, 61d4 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    61ae:	b942      	cbnz	r2, 61c2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    61b0:	0100      	lsls	r0, r0, #4
    61b2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    61b6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    61ba:	2302      	movs	r3, #2
    61bc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    61c0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    61c2:	0100      	lsls	r0, r0, #4
    61c4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    61c8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    61cc:	2302      	movs	r3, #2
    61ce:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    61d2:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    61d4:	2901      	cmp	r1, #1
    61d6:	d000      	beq.n	61da <_dma_set_irq_state+0x2e>
    61d8:	4770      	bx	lr
	if (value == 0x0) {
    61da:	b142      	cbz	r2, 61ee <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    61dc:	0100      	lsls	r0, r0, #4
    61de:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    61e2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    61e6:	2301      	movs	r3, #1
    61e8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    61ec:	e7f4      	b.n	61d8 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    61ee:	0100      	lsls	r0, r0, #4
    61f0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    61f4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    61f8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    61fc:	4770      	bx	lr
	...

00006200 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    6200:	4b02      	ldr	r3, [pc, #8]	; (620c <_dma_set_destination_address+0xc>)
    6202:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6206:	6081      	str	r1, [r0, #8]
}
    6208:	2000      	movs	r0, #0
    620a:	4770      	bx	lr
    620c:	20003760 	.word	0x20003760

00006210 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6210:	4b02      	ldr	r3, [pc, #8]	; (621c <_dma_set_source_address+0xc>)
    6212:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6216:	6041      	str	r1, [r0, #4]
}
    6218:	2000      	movs	r0, #0
    621a:	4770      	bx	lr
    621c:	20003760 	.word	0x20003760

00006220 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6220:	4a05      	ldr	r2, [pc, #20]	; (6238 <_dma_srcinc_enable+0x18>)
    6222:	0100      	lsls	r0, r0, #4
    6224:	5a13      	ldrh	r3, [r2, r0]
    6226:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    6228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    622c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    6230:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    6232:	5211      	strh	r1, [r2, r0]
}
    6234:	2000      	movs	r0, #0
    6236:	4770      	bx	lr
    6238:	20003760 	.word	0x20003760

0000623c <_dma_set_data_amount>:
{
    623c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    623e:	4c14      	ldr	r4, [pc, #80]	; (6290 <_dma_set_data_amount+0x54>)
    6240:	0102      	lsls	r2, r0, #4
    6242:	18a3      	adds	r3, r4, r2
    6244:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    6246:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    6248:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    624c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    624e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    6252:	d006      	beq.n	6262 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6254:	fa01 f403 	lsl.w	r4, r1, r3
    6258:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    625a:	4a0d      	ldr	r2, [pc, #52]	; (6290 <_dma_set_data_amount+0x54>)
    625c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    6260:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    6262:	4c0b      	ldr	r4, [pc, #44]	; (6290 <_dma_set_data_amount+0x54>)
    6264:	0102      	lsls	r2, r0, #4
    6266:	18a5      	adds	r5, r4, r2
    6268:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    626a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    626c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    6270:	d005      	beq.n	627e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    6272:	fa01 f303 	lsl.w	r3, r1, r3
    6276:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    6278:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    627c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    627e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    6280:	4b03      	ldr	r3, [pc, #12]	; (6290 <_dma_set_data_amount+0x54>)
    6282:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6286:	8041      	strh	r1, [r0, #2]
}
    6288:	2000      	movs	r0, #0
    628a:	bc30      	pop	{r4, r5}
    628c:	4770      	bx	lr
    628e:	bf00      	nop
    6290:	20003760 	.word	0x20003760

00006294 <_dma_enable_transaction>:
{
    6294:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    6296:	4c0d      	ldr	r4, [pc, #52]	; (62cc <_dma_enable_transaction+0x38>)
    6298:	0103      	lsls	r3, r0, #4
    629a:	5ae2      	ldrh	r2, [r4, r3]
    629c:	b292      	uxth	r2, r2
    629e:	f042 0201 	orr.w	r2, r2, #1
    62a2:	52e2      	strh	r2, [r4, r3]
    62a4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    62a8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    62ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    62ae:	f042 0202 	orr.w	r2, r2, #2
    62b2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    62b4:	b131      	cbz	r1, 62c4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    62b6:	4a06      	ldr	r2, [pc, #24]	; (62d0 <_dma_enable_transaction+0x3c>)
    62b8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    62ba:	2301      	movs	r3, #1
    62bc:	fa03 f000 	lsl.w	r0, r3, r0
    62c0:	4308      	orrs	r0, r1
    62c2:	6110      	str	r0, [r2, #16]
}
    62c4:	2000      	movs	r0, #0
    62c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    62ca:	4770      	bx	lr
    62cc:	20003760 	.word	0x20003760
    62d0:	4100a000 	.word	0x4100a000

000062d4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    62d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    62d8:	4b02      	ldr	r3, [pc, #8]	; (62e4 <_dma_get_channel_resource+0x10>)
    62da:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    62de:	6001      	str	r1, [r0, #0]
}
    62e0:	2000      	movs	r0, #0
    62e2:	4770      	bx	lr
    62e4:	200007f8 	.word	0x200007f8

000062e8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    62e8:	b508      	push	{r3, lr}
	_dmac_handler();
    62ea:	4b01      	ldr	r3, [pc, #4]	; (62f0 <DMAC_0_Handler+0x8>)
    62ec:	4798      	blx	r3
    62ee:	bd08      	pop	{r3, pc}
    62f0:	00006059 	.word	0x00006059

000062f4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    62f4:	b508      	push	{r3, lr}
	_dmac_handler();
    62f6:	4b01      	ldr	r3, [pc, #4]	; (62fc <DMAC_1_Handler+0x8>)
    62f8:	4798      	blx	r3
    62fa:	bd08      	pop	{r3, pc}
    62fc:	00006059 	.word	0x00006059

00006300 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    6300:	b508      	push	{r3, lr}
	_dmac_handler();
    6302:	4b01      	ldr	r3, [pc, #4]	; (6308 <DMAC_2_Handler+0x8>)
    6304:	4798      	blx	r3
    6306:	bd08      	pop	{r3, pc}
    6308:	00006059 	.word	0x00006059

0000630c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    630c:	b508      	push	{r3, lr}
	_dmac_handler();
    630e:	4b01      	ldr	r3, [pc, #4]	; (6314 <DMAC_3_Handler+0x8>)
    6310:	4798      	blx	r3
    6312:	bd08      	pop	{r3, pc}
    6314:	00006059 	.word	0x00006059

00006318 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    6318:	b508      	push	{r3, lr}
	_dmac_handler();
    631a:	4b01      	ldr	r3, [pc, #4]	; (6320 <DMAC_4_Handler+0x8>)
    631c:	4798      	blx	r3
    631e:	bd08      	pop	{r3, pc}
    6320:	00006059 	.word	0x00006059

00006324 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    6324:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    6326:	2000      	movs	r0, #0
    6328:	4770      	bx	lr
	...

0000632c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    632c:	b430      	push	{r4, r5}
    632e:	4814      	ldr	r0, [pc, #80]	; (6380 <_event_system_init+0x54>)
    6330:	f100 0543 	add.w	r5, r0, #67	; 0x43
    6334:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6336:	4c13      	ldr	r4, [pc, #76]	; (6384 <_event_system_init+0x58>)
    6338:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    633a:	f813 1b01 	ldrb.w	r1, [r3], #1
    633e:	3248      	adds	r2, #72	; 0x48
    6340:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    6344:	42ab      	cmp	r3, r5
    6346:	d1f7      	bne.n	6338 <_event_system_init+0xc>
    6348:	480d      	ldr	r0, [pc, #52]	; (6380 <_event_system_init+0x54>)
    634a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    634e:	3080      	adds	r0, #128	; 0x80
    6350:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6352:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6356:	00ca      	lsls	r2, r1, #3
    6358:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    635c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6360:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6362:	f850 3f04 	ldr.w	r3, [r0, #4]!
    6366:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6368:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    636c:	43db      	mvns	r3, r3
    636e:	b2db      	uxtb	r3, r3
    6370:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    6374:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6376:	2920      	cmp	r1, #32
    6378:	d1eb      	bne.n	6352 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    637a:	2000      	movs	r0, #0
    637c:	bc30      	pop	{r4, r5}
    637e:	4770      	bx	lr
    6380:	0000d698 	.word	0x0000d698
    6384:	4100e000 	.word	0x4100e000

00006388 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6388:	f010 0f01 	tst.w	r0, #1
    638c:	d008      	beq.n	63a0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    638e:	4a17      	ldr	r2, [pc, #92]	; (63ec <_gclk_init_generators_by_fref+0x64>)
    6390:	4b17      	ldr	r3, [pc, #92]	; (63f0 <_gclk_init_generators_by_fref+0x68>)
    6392:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6394:	4619      	mov	r1, r3
    6396:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    639a:	684b      	ldr	r3, [r1, #4]
    639c:	4213      	tst	r3, r2
    639e:	d1fc      	bne.n	639a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    63a0:	f010 0f02 	tst.w	r0, #2
    63a4:	d008      	beq.n	63b8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    63a6:	4a13      	ldr	r2, [pc, #76]	; (63f4 <_gclk_init_generators_by_fref+0x6c>)
    63a8:	4b11      	ldr	r3, [pc, #68]	; (63f0 <_gclk_init_generators_by_fref+0x68>)
    63aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    63ac:	4619      	mov	r1, r3
    63ae:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    63b2:	684b      	ldr	r3, [r1, #4]
    63b4:	4213      	tst	r3, r2
    63b6:	d1fc      	bne.n	63b2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    63b8:	f010 0f04 	tst.w	r0, #4
    63bc:	d008      	beq.n	63d0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    63be:	4a0e      	ldr	r2, [pc, #56]	; (63f8 <_gclk_init_generators_by_fref+0x70>)
    63c0:	4b0b      	ldr	r3, [pc, #44]	; (63f0 <_gclk_init_generators_by_fref+0x68>)
    63c2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    63c4:	4619      	mov	r1, r3
    63c6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    63ca:	684b      	ldr	r3, [r1, #4]
    63cc:	4213      	tst	r3, r2
    63ce:	d1fc      	bne.n	63ca <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    63d0:	f010 0f08 	tst.w	r0, #8
    63d4:	d008      	beq.n	63e8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    63d6:	4a09      	ldr	r2, [pc, #36]	; (63fc <_gclk_init_generators_by_fref+0x74>)
    63d8:	4b05      	ldr	r3, [pc, #20]	; (63f0 <_gclk_init_generators_by_fref+0x68>)
    63da:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    63dc:	4619      	mov	r1, r3
    63de:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    63e2:	684b      	ldr	r3, [r1, #4]
    63e4:	4213      	tst	r3, r2
    63e6:	d1fc      	bne.n	63e2 <_gclk_init_generators_by_fref+0x5a>
    63e8:	4770      	bx	lr
    63ea:	bf00      	nop
    63ec:	00010108 	.word	0x00010108
    63f0:	40001c00 	.word	0x40001c00
    63f4:	00010106 	.word	0x00010106
    63f8:	00100106 	.word	0x00100106
    63fc:	00010104 	.word	0x00010104

00006400 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    6400:	2201      	movs	r2, #1
    6402:	4b01      	ldr	r3, [pc, #4]	; (6408 <_mclk_init+0x8>)
    6404:	715a      	strb	r2, [r3, #5]
    6406:	4770      	bx	lr
    6408:	40000800 	.word	0x40000800

0000640c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    640c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    640e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    6410:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    6412:	f012 0f01 	tst.w	r2, #1
    6416:	d005      	beq.n	6424 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    6418:	2201      	movs	r2, #1
    641a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    641c:	6803      	ldr	r3, [r0, #0]
    641e:	b153      	cbz	r3, 6436 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    6420:	4798      	blx	r3
    6422:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    6424:	8a1a      	ldrh	r2, [r3, #16]
    6426:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    6428:	b12a      	cbz	r2, 6436 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    642a:	f240 225e 	movw	r2, #606	; 0x25e
    642e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    6430:	6843      	ldr	r3, [r0, #4]
    6432:	b103      	cbz	r3, 6436 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    6434:	4798      	blx	r3
    6436:	bd08      	pop	{r3, pc}

00006438 <_flash_init>:
{
    6438:	b538      	push	{r3, r4, r5, lr}
    643a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    643c:	4605      	mov	r5, r0
    643e:	b350      	cbz	r0, 6496 <_flash_init+0x5e>
    6440:	4816      	ldr	r0, [pc, #88]	; (649c <_flash_init+0x64>)
    6442:	4281      	cmp	r1, r0
    6444:	bf14      	ite	ne
    6446:	2000      	movne	r0, #0
    6448:	2001      	moveq	r0, #1
    644a:	224b      	movs	r2, #75	; 0x4b
    644c:	4914      	ldr	r1, [pc, #80]	; (64a0 <_flash_init+0x68>)
    644e:	4b15      	ldr	r3, [pc, #84]	; (64a4 <_flash_init+0x6c>)
    6450:	4798      	blx	r3
	device->hw = hw;
    6452:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    6454:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    6456:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    645a:	049b      	lsls	r3, r3, #18
    645c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    645e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    6460:	4b11      	ldr	r3, [pc, #68]	; (64a8 <_flash_init+0x70>)
    6462:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6464:	4b11      	ldr	r3, [pc, #68]	; (64ac <_flash_init+0x74>)
    6466:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    646a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    646e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6472:	f3bf 8f6f 	isb	sy
    6476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    647a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    647e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6482:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6486:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    648a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    648e:	6019      	str	r1, [r3, #0]
    6490:	601a      	str	r2, [r3, #0]
}
    6492:	2000      	movs	r0, #0
    6494:	bd38      	pop	{r3, r4, r5, pc}
    6496:	2000      	movs	r0, #0
    6498:	e7d7      	b.n	644a <_flash_init+0x12>
    649a:	bf00      	nop
    649c:	41004000 	.word	0x41004000
    64a0:	0000d79c 	.word	0x0000d79c
    64a4:	00005a39 	.word	0x00005a39
    64a8:	20000978 	.word	0x20000978
    64ac:	e000e100 	.word	0xe000e100

000064b0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    64b0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    64b2:	4b02      	ldr	r3, [pc, #8]	; (64bc <NVMCTRL_0_Handler+0xc>)
    64b4:	6818      	ldr	r0, [r3, #0]
    64b6:	4b02      	ldr	r3, [pc, #8]	; (64c0 <NVMCTRL_0_Handler+0x10>)
    64b8:	4798      	blx	r3
    64ba:	bd08      	pop	{r3, pc}
    64bc:	20000978 	.word	0x20000978
    64c0:	0000640d 	.word	0x0000640d

000064c4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    64c4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    64c6:	4b02      	ldr	r3, [pc, #8]	; (64d0 <NVMCTRL_1_Handler+0xc>)
    64c8:	6818      	ldr	r0, [r3, #0]
    64ca:	4b02      	ldr	r3, [pc, #8]	; (64d4 <NVMCTRL_1_Handler+0x10>)
    64cc:	4798      	blx	r3
    64ce:	bd08      	pop	{r3, pc}
    64d0:	20000978 	.word	0x20000978
    64d4:	0000640d 	.word	0x0000640d

000064d8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    64d8:	4b03      	ldr	r3, [pc, #12]	; (64e8 <_osc32kctrl_init_sources+0x10>)
    64da:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    64dc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    64e0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    64e2:	2201      	movs	r2, #1
    64e4:	741a      	strb	r2, [r3, #16]
    64e6:	4770      	bx	lr
    64e8:	40001400 	.word	0x40001400

000064ec <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    64ec:	4770      	bx	lr
	...

000064f0 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    64f0:	4a47      	ldr	r2, [pc, #284]	; (6610 <_oscctrl_init_referenced_generators+0x120>)
    64f2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    64f4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    64f8:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    64fc:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    64fe:	4611      	mov	r1, r2
    6500:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    6504:	684b      	ldr	r3, [r1, #4]
    6506:	4213      	tst	r3, r2
    6508:	d1fc      	bne.n	6504 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    650a:	4a41      	ldr	r2, [pc, #260]	; (6610 <_oscctrl_init_referenced_generators+0x120>)
    650c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    650e:	f013 0f04 	tst.w	r3, #4
    6512:	d1fb      	bne.n	650c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6514:	4b3f      	ldr	r3, [pc, #252]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    6516:	2200      	movs	r2, #0
    6518:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    651a:	4a3f      	ldr	r2, [pc, #252]	; (6618 <_oscctrl_init_referenced_generators+0x128>)
    651c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    651e:	461a      	mov	r2, r3
    6520:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6524:	f013 0f10 	tst.w	r3, #16
    6528:	d1fa      	bne.n	6520 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    652a:	2200      	movs	r2, #0
    652c:	4b39      	ldr	r3, [pc, #228]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    652e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6532:	461a      	mov	r2, r3
    6534:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6538:	f013 0f04 	tst.w	r3, #4
    653c:	d1fa      	bne.n	6534 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    653e:	2202      	movs	r2, #2
    6540:	4b34      	ldr	r3, [pc, #208]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    6542:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6544:	461a      	mov	r2, r3
    6546:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    654a:	f013 0f02 	tst.w	r3, #2
    654e:	d1fa      	bne.n	6546 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6550:	4b30      	ldr	r3, [pc, #192]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    6552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6554:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6556:	461a      	mov	r2, r3
    6558:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    655c:	f013 0f08 	tst.w	r3, #8
    6560:	d1fa      	bne.n	6558 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6562:	2288      	movs	r2, #136	; 0x88
    6564:	4b2b      	ldr	r3, [pc, #172]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    6566:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    656a:	461a      	mov	r2, r3
    656c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6570:	f013 0f04 	tst.w	r3, #4
    6574:	d1fa      	bne.n	656c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6576:	2242      	movs	r2, #66	; 0x42
    6578:	4b25      	ldr	r3, [pc, #148]	; (6610 <_oscctrl_init_referenced_generators+0x120>)
    657a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    657e:	2227      	movs	r2, #39	; 0x27
    6580:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    6584:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6586:	461a      	mov	r2, r3
    6588:	6d13      	ldr	r3, [r2, #80]	; 0x50
    658a:	f013 0f06 	tst.w	r3, #6
    658e:	d1fb      	bne.n	6588 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6590:	4b20      	ldr	r3, [pc, #128]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    6592:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6596:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6598:	2202      	movs	r2, #2
    659a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    659e:	461a      	mov	r2, r3
    65a0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    65a2:	f013 0f02 	tst.w	r3, #2
    65a6:	d1fb      	bne.n	65a0 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    65a8:	4b1a      	ldr	r3, [pc, #104]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    65aa:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    65ae:	f013 0f01 	tst.w	r3, #1
    65b2:	d026      	beq.n	6602 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    65b4:	4a17      	ldr	r2, [pc, #92]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    65b6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    65b8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    65bc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    65c0:	d1f9      	bne.n	65b6 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    65c2:	4b14      	ldr	r3, [pc, #80]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    65c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    65c6:	f012 0f01 	tst.w	r2, #1
    65ca:	d103      	bne.n	65d4 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    65cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    65ce:	f012 0f02 	tst.w	r2, #2
    65d2:	d0f7      	beq.n	65c4 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    65d4:	4a0e      	ldr	r2, [pc, #56]	; (6610 <_oscctrl_init_referenced_generators+0x120>)
    65d6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    65d8:	2b00      	cmp	r3, #0
    65da:	d1fc      	bne.n	65d6 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    65dc:	4a0c      	ldr	r2, [pc, #48]	; (6610 <_oscctrl_init_referenced_generators+0x120>)
    65de:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    65e0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    65e4:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    65e8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    65ea:	4611      	mov	r1, r2
    65ec:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    65f0:	684b      	ldr	r3, [r1, #4]
    65f2:	4213      	tst	r3, r2
    65f4:	d1fc      	bne.n	65f0 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    65f6:	4a06      	ldr	r2, [pc, #24]	; (6610 <_oscctrl_init_referenced_generators+0x120>)
    65f8:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    65fa:	f013 0f04 	tst.w	r3, #4
    65fe:	d1fb      	bne.n	65f8 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    6600:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6602:	4a04      	ldr	r2, [pc, #16]	; (6614 <_oscctrl_init_referenced_generators+0x124>)
    6604:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6606:	f413 7f80 	tst.w	r3, #256	; 0x100
    660a:	d0fb      	beq.n	6604 <_oscctrl_init_referenced_generators+0x114>
    660c:	e7d9      	b.n	65c2 <_oscctrl_init_referenced_generators+0xd2>
    660e:	bf00      	nop
    6610:	40001c00 	.word	0x40001c00
    6614:	40001000 	.word	0x40001000
    6618:	04010000 	.word	0x04010000

0000661c <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    661c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    661e:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6620:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6622:	4903      	ldr	r1, [pc, #12]	; (6630 <_qspi_dma_rx_complete+0x14>)
    6624:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    6626:	685b      	ldr	r3, [r3, #4]
    6628:	b103      	cbz	r3, 662c <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    662a:	4798      	blx	r3
    662c:	bd08      	pop	{r3, pc}
    662e:	bf00      	nop
    6630:	01000002 	.word	0x01000002

00006634 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    6634:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    6636:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    6638:	681a      	ldr	r2, [r3, #0]
    663a:	4903      	ldr	r1, [pc, #12]	; (6648 <_qspi_dma_tx_complete+0x14>)
    663c:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    663e:	685b      	ldr	r3, [r3, #4]
    6640:	b103      	cbz	r3, 6644 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    6642:	4798      	blx	r3
    6644:	bd08      	pop	{r3, pc}
    6646:	bf00      	nop
    6648:	01000002 	.word	0x01000002

0000664c <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    664c:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    664e:	6883      	ldr	r3, [r0, #8]
    6650:	689b      	ldr	r3, [r3, #8]
    6652:	b103      	cbz	r3, 6656 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    6654:	4798      	blx	r3
    6656:	bd08      	pop	{r3, pc}

00006658 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    6658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    665a:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    665c:	4604      	mov	r4, r0
    665e:	2800      	cmp	r0, #0
    6660:	d027      	beq.n	66b2 <_qspi_dma_init+0x5a>
    6662:	1c08      	adds	r0, r1, #0
    6664:	bf18      	it	ne
    6666:	2001      	movne	r0, #1
    6668:	22cb      	movs	r2, #203	; 0xcb
    666a:	4913      	ldr	r1, [pc, #76]	; (66b8 <_qspi_dma_init+0x60>)
    666c:	4b13      	ldr	r3, [pc, #76]	; (66bc <_qspi_dma_init+0x64>)
    666e:	4798      	blx	r3
	dev->prvt = hw;
    6670:	4626      	mov	r6, r4
    6672:	f846 5b0c 	str.w	r5, [r6], #12
    6676:	2301      	movs	r3, #1
    6678:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    667a:	4b11      	ldr	r3, [pc, #68]	; (66c0 <_qspi_dma_init+0x68>)
    667c:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    667e:	4b11      	ldr	r3, [pc, #68]	; (66c4 <_qspi_dma_init+0x6c>)
    6680:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    6682:	211f      	movs	r1, #31
    6684:	4630      	mov	r0, r6
    6686:	4f10      	ldr	r7, [pc, #64]	; (66c8 <_qspi_dma_init+0x70>)
    6688:	47b8      	blx	r7
	dev->resource->back                 = dev;
    668a:	68e3      	ldr	r3, [r4, #12]
    668c:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    668e:	68e3      	ldr	r3, [r4, #12]
    6690:	4a0e      	ldr	r2, [pc, #56]	; (66cc <_qspi_dma_init+0x74>)
    6692:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    6694:	68e3      	ldr	r3, [r4, #12]
    6696:	4d0e      	ldr	r5, [pc, #56]	; (66d0 <_qspi_dma_init+0x78>)
    6698:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    669a:	211e      	movs	r1, #30
    669c:	4630      	mov	r0, r6
    669e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    66a0:	68e3      	ldr	r3, [r4, #12]
    66a2:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    66a4:	68e3      	ldr	r3, [r4, #12]
    66a6:	4a0b      	ldr	r2, [pc, #44]	; (66d4 <_qspi_dma_init+0x7c>)
    66a8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    66aa:	68e3      	ldr	r3, [r4, #12]
    66ac:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    66ae:	2000      	movs	r0, #0
    66b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66b2:	2000      	movs	r0, #0
    66b4:	e7d8      	b.n	6668 <_qspi_dma_init+0x10>
    66b6:	bf00      	nop
    66b8:	0000d7bc 	.word	0x0000d7bc
    66bc:	00005a39 	.word	0x00005a39
    66c0:	06000011 	.word	0x06000011
    66c4:	00243b00 	.word	0x00243b00
    66c8:	000062d5 	.word	0x000062d5
    66cc:	0000661d 	.word	0x0000661d
    66d0:	0000664d 	.word	0x0000664d
    66d4:	00006635 	.word	0x00006635

000066d8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    66d8:	b500      	push	{lr}
    66da:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    66dc:	4b0d      	ldr	r3, [pc, #52]	; (6714 <RAMECC_Handler+0x3c>)
    66de:	789b      	ldrb	r3, [r3, #2]
    66e0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    66e2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    66e4:	9b01      	ldr	r3, [sp, #4]
    66e6:	f013 0f02 	tst.w	r3, #2
    66ea:	d006      	beq.n	66fa <RAMECC_Handler+0x22>
    66ec:	4b0a      	ldr	r3, [pc, #40]	; (6718 <RAMECC_Handler+0x40>)
    66ee:	681b      	ldr	r3, [r3, #0]
    66f0:	b11b      	cbz	r3, 66fa <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    66f2:	4a08      	ldr	r2, [pc, #32]	; (6714 <RAMECC_Handler+0x3c>)
    66f4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    66f6:	4798      	blx	r3
    66f8:	e009      	b.n	670e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    66fa:	9b01      	ldr	r3, [sp, #4]
    66fc:	f013 0f01 	tst.w	r3, #1
    6700:	d005      	beq.n	670e <RAMECC_Handler+0x36>
    6702:	4b05      	ldr	r3, [pc, #20]	; (6718 <RAMECC_Handler+0x40>)
    6704:	685b      	ldr	r3, [r3, #4]
    6706:	b113      	cbz	r3, 670e <RAMECC_Handler+0x36>
    6708:	4a02      	ldr	r2, [pc, #8]	; (6714 <RAMECC_Handler+0x3c>)
    670a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    670c:	4798      	blx	r3
	} else {
		return;
	}
}
    670e:	b003      	add	sp, #12
    6710:	f85d fb04 	ldr.w	pc, [sp], #4
    6714:	41020000 	.word	0x41020000
    6718:	20003b60 	.word	0x20003b60

0000671c <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    671c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    671e:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6720:	6913      	ldr	r3, [r2, #16]
    6722:	f013 0f60 	tst.w	r3, #96	; 0x60
    6726:	d1fb      	bne.n	6720 <_rtc_timer_set_period+0x4>
}
    6728:	4770      	bx	lr

0000672a <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    672a:	68c2      	ldr	r2, [r0, #12]
    672c:	6913      	ldr	r3, [r2, #16]
    672e:	f013 0f60 	tst.w	r3, #96	; 0x60
    6732:	d1fb      	bne.n	672c <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    6734:	6a10      	ldr	r0, [r2, #32]
}
    6736:	4770      	bx	lr

00006738 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    6738:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    673a:	f248 0103 	movw	r1, #32771	; 0x8003
    673e:	6913      	ldr	r3, [r2, #16]
    6740:	420b      	tst	r3, r1
    6742:	d1fc      	bne.n	673e <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6744:	8810      	ldrh	r0, [r2, #0]
}
    6746:	f3c0 0040 	ubfx	r0, r0, #1, #1
    674a:	4770      	bx	lr

0000674c <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    674c:	4770      	bx	lr
	...

00006750 <_rtc_timer_init>:
{
    6750:	b538      	push	{r3, r4, r5, lr}
    6752:	460c      	mov	r4, r1
	ASSERT(dev);
    6754:	4605      	mov	r5, r0
    6756:	2230      	movs	r2, #48	; 0x30
    6758:	4914      	ldr	r1, [pc, #80]	; (67ac <_rtc_timer_init+0x5c>)
    675a:	3000      	adds	r0, #0
    675c:	bf18      	it	ne
    675e:	2001      	movne	r0, #1
    6760:	4b13      	ldr	r3, [pc, #76]	; (67b0 <_rtc_timer_init+0x60>)
    6762:	4798      	blx	r3
	dev->hw = hw;
    6764:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6766:	2301      	movs	r3, #1
    6768:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    676a:	f248 0203 	movw	r2, #32771	; 0x8003
    676e:	6923      	ldr	r3, [r4, #16]
    6770:	4213      	tst	r3, r2
    6772:	d1fc      	bne.n	676e <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6774:	68eb      	ldr	r3, [r5, #12]
    6776:	691a      	ldr	r2, [r3, #16]
    6778:	f012 0f01 	tst.w	r2, #1
    677c:	d1fb      	bne.n	6776 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    677e:	f248 0280 	movw	r2, #32896	; 0x8080
    6782:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6784:	f248 0103 	movw	r1, #32771	; 0x8003
    6788:	691a      	ldr	r2, [r3, #16]
    678a:	420a      	tst	r2, r1
    678c:	d1fc      	bne.n	6788 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    678e:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    6790:	2301      	movs	r3, #1
    6792:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6794:	6913      	ldr	r3, [r2, #16]
    6796:	f013 0f60 	tst.w	r3, #96	; 0x60
    679a:	d1fb      	bne.n	6794 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    679c:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    679e:	f44f 7280 	mov.w	r2, #256	; 0x100
    67a2:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    67a4:	4b03      	ldr	r3, [pc, #12]	; (67b4 <_rtc_timer_init+0x64>)
    67a6:	601d      	str	r5, [r3, #0]
}
    67a8:	2000      	movs	r0, #0
    67aa:	bd38      	pop	{r3, r4, r5, pc}
    67ac:	0000d7d4 	.word	0x0000d7d4
    67b0:	00005a39 	.word	0x00005a39
    67b4:	2000097c 	.word	0x2000097c

000067b8 <_rtc_timer_deinit>:
{
    67b8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    67ba:	4604      	mov	r4, r0
    67bc:	b1c8      	cbz	r0, 67f2 <_rtc_timer_deinit+0x3a>
    67be:	68c0      	ldr	r0, [r0, #12]
    67c0:	3000      	adds	r0, #0
    67c2:	bf18      	it	ne
    67c4:	2001      	movne	r0, #1
    67c6:	2252      	movs	r2, #82	; 0x52
    67c8:	490b      	ldr	r1, [pc, #44]	; (67f8 <_rtc_timer_deinit+0x40>)
    67ca:	4b0c      	ldr	r3, [pc, #48]	; (67fc <_rtc_timer_deinit+0x44>)
    67cc:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    67ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
    67d2:	4b0b      	ldr	r3, [pc, #44]	; (6800 <_rtc_timer_deinit+0x48>)
    67d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    67d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    67dc:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    67e0:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    67e2:	2301      	movs	r3, #1
    67e4:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    67e6:	f248 0103 	movw	r1, #32771	; 0x8003
    67ea:	6913      	ldr	r3, [r2, #16]
    67ec:	420b      	tst	r3, r1
    67ee:	d1fc      	bne.n	67ea <_rtc_timer_deinit+0x32>
}
    67f0:	bd10      	pop	{r4, pc}
    67f2:	2000      	movs	r0, #0
    67f4:	e7e7      	b.n	67c6 <_rtc_timer_deinit+0xe>
    67f6:	bf00      	nop
    67f8:	0000d7d4 	.word	0x0000d7d4
    67fc:	00005a39 	.word	0x00005a39
    6800:	e000e100 	.word	0xe000e100

00006804 <_rtc_timer_start>:
{
    6804:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6806:	4604      	mov	r4, r0
    6808:	b310      	cbz	r0, 6850 <_rtc_timer_start+0x4c>
    680a:	68c0      	ldr	r0, [r0, #12]
    680c:	3000      	adds	r0, #0
    680e:	bf18      	it	ne
    6810:	2001      	movne	r0, #1
    6812:	225e      	movs	r2, #94	; 0x5e
    6814:	490f      	ldr	r1, [pc, #60]	; (6854 <_rtc_timer_start+0x50>)
    6816:	4b10      	ldr	r3, [pc, #64]	; (6858 <_rtc_timer_start+0x54>)
    6818:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    681a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    681e:	4b0f      	ldr	r3, [pc, #60]	; (685c <_rtc_timer_start+0x58>)
    6820:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    6822:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    6824:	2300      	movs	r3, #0
    6826:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6828:	6913      	ldr	r3, [r2, #16]
    682a:	f013 0f08 	tst.w	r3, #8
    682e:	d1fb      	bne.n	6828 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    6830:	68e3      	ldr	r3, [r4, #12]
    6832:	691a      	ldr	r2, [r3, #16]
    6834:	f012 0f08 	tst.w	r2, #8
    6838:	d1fb      	bne.n	6832 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    683a:	881a      	ldrh	r2, [r3, #0]
    683c:	b292      	uxth	r2, r2
    683e:	f042 0202 	orr.w	r2, r2, #2
    6842:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6844:	f248 0103 	movw	r1, #32771	; 0x8003
    6848:	691a      	ldr	r2, [r3, #16]
    684a:	420a      	tst	r2, r1
    684c:	d1fc      	bne.n	6848 <_rtc_timer_start+0x44>
}
    684e:	bd10      	pop	{r4, pc}
    6850:	2000      	movs	r0, #0
    6852:	e7de      	b.n	6812 <_rtc_timer_start+0xe>
    6854:	0000d7d4 	.word	0x0000d7d4
    6858:	00005a39 	.word	0x00005a39
    685c:	e000e100 	.word	0xe000e100

00006860 <_rtc_timer_stop>:
{
    6860:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    6862:	4604      	mov	r4, r0
    6864:	b1a0      	cbz	r0, 6890 <_rtc_timer_stop+0x30>
    6866:	68c0      	ldr	r0, [r0, #12]
    6868:	3000      	adds	r0, #0
    686a:	bf18      	it	ne
    686c:	2001      	movne	r0, #1
    686e:	226b      	movs	r2, #107	; 0x6b
    6870:	4908      	ldr	r1, [pc, #32]	; (6894 <_rtc_timer_stop+0x34>)
    6872:	4b09      	ldr	r3, [pc, #36]	; (6898 <_rtc_timer_stop+0x38>)
    6874:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6876:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6878:	8813      	ldrh	r3, [r2, #0]
    687a:	f023 0302 	bic.w	r3, r3, #2
    687e:	041b      	lsls	r3, r3, #16
    6880:	0c1b      	lsrs	r3, r3, #16
    6882:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6884:	f248 0103 	movw	r1, #32771	; 0x8003
    6888:	6913      	ldr	r3, [r2, #16]
    688a:	420b      	tst	r3, r1
    688c:	d1fc      	bne.n	6888 <_rtc_timer_stop+0x28>
}
    688e:	bd10      	pop	{r4, pc}
    6890:	2000      	movs	r0, #0
    6892:	e7ec      	b.n	686e <_rtc_timer_stop+0xe>
    6894:	0000d7d4 	.word	0x0000d7d4
    6898:	00005a39 	.word	0x00005a39

0000689c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    689c:	4800      	ldr	r0, [pc, #0]	; (68a0 <_rtc_get_timer+0x4>)
    689e:	4770      	bx	lr
    68a0:	20000358 	.word	0x20000358

000068a4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    68a4:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    68a6:	4b08      	ldr	r3, [pc, #32]	; (68c8 <RTC_Handler+0x24>)
    68a8:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    68aa:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    68ac:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    68ae:	f413 7f80 	tst.w	r3, #256	; 0x100
    68b2:	d007      	beq.n	68c4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    68b4:	6823      	ldr	r3, [r4, #0]
    68b6:	b10b      	cbz	r3, 68bc <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    68b8:	4620      	mov	r0, r4
    68ba:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    68bc:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    68be:	f44f 7280 	mov.w	r2, #256	; 0x100
    68c2:	819a      	strh	r2, [r3, #12]
    68c4:	bd10      	pop	{r4, pc}
    68c6:	bf00      	nop
    68c8:	2000097c 	.word	0x2000097c

000068cc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    68cc:	b470      	push	{r4, r5, r6}
    68ce:	b089      	sub	sp, #36	; 0x24
    68d0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    68d2:	466c      	mov	r4, sp
    68d4:	4d0d      	ldr	r5, [pc, #52]	; (690c <_sercom_get_hardware_index+0x40>)
    68d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    68d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    68da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    68de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    68e2:	9b00      	ldr	r3, [sp, #0]
    68e4:	42b3      	cmp	r3, r6
    68e6:	d00d      	beq.n	6904 <_sercom_get_hardware_index+0x38>
    68e8:	4631      	mov	r1, r6
    68ea:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    68ec:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    68ee:	f853 2b04 	ldr.w	r2, [r3], #4
    68f2:	428a      	cmp	r2, r1
    68f4:	d007      	beq.n	6906 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    68f6:	3001      	adds	r0, #1
    68f8:	2808      	cmp	r0, #8
    68fa:	d1f8      	bne.n	68ee <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    68fc:	2000      	movs	r0, #0
}
    68fe:	b009      	add	sp, #36	; 0x24
    6900:	bc70      	pop	{r4, r5, r6}
    6902:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6904:	2000      	movs	r0, #0
			return i;
    6906:	b2c0      	uxtb	r0, r0
    6908:	e7f9      	b.n	68fe <_sercom_get_hardware_index+0x32>
    690a:	bf00      	nop
    690c:	0000d7ec 	.word	0x0000d7ec

00006910 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    6910:	b510      	push	{r4, lr}
	void *hw = device->hw;
    6912:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    6914:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    6916:	f013 0f01 	tst.w	r3, #1
    691a:	d003      	beq.n	6924 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    691c:	7da3      	ldrb	r3, [r4, #22]
    691e:	f013 0f01 	tst.w	r3, #1
    6922:	d112      	bne.n	694a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    6924:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    6926:	f013 0f02 	tst.w	r3, #2
    692a:	d003      	beq.n	6934 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    692c:	7da3      	ldrb	r3, [r4, #22]
    692e:	f013 0f02 	tst.w	r3, #2
    6932:	d10f      	bne.n	6954 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    6934:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    6936:	f013 0f04 	tst.w	r3, #4
    693a:	d015      	beq.n	6968 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    693c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    693e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6942:	b163      	cbz	r3, 695e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    6944:	23ff      	movs	r3, #255	; 0xff
    6946:	8363      	strh	r3, [r4, #26]
    6948:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    694a:	2301      	movs	r3, #1
    694c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    694e:	6803      	ldr	r3, [r0, #0]
    6950:	4798      	blx	r3
    6952:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    6954:	2302      	movs	r3, #2
    6956:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    6958:	6883      	ldr	r3, [r0, #8]
    695a:	4798      	blx	r3
    695c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    695e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    6960:	6843      	ldr	r3, [r0, #4]
    6962:	b2c9      	uxtb	r1, r1
    6964:	4798      	blx	r3
    6966:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    6968:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    696a:	09db      	lsrs	r3, r3, #7
    696c:	d100      	bne.n	6970 <_sercom_usart_interrupt_handler+0x60>
    696e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    6970:	2380      	movs	r3, #128	; 0x80
    6972:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    6974:	68c3      	ldr	r3, [r0, #12]
    6976:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    6978:	8b63      	ldrh	r3, [r4, #26]
    697a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    697c:	8363      	strh	r3, [r4, #26]
    697e:	e7f6      	b.n	696e <_sercom_usart_interrupt_handler+0x5e>

00006980 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    6980:	4b11      	ldr	r3, [pc, #68]	; (69c8 <_sercom_init_irq_param+0x48>)
    6982:	4298      	cmp	r0, r3
    6984:	d011      	beq.n	69aa <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    6986:	4b11      	ldr	r3, [pc, #68]	; (69cc <_sercom_init_irq_param+0x4c>)
    6988:	4298      	cmp	r0, r3
    698a:	d011      	beq.n	69b0 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    698c:	4b10      	ldr	r3, [pc, #64]	; (69d0 <_sercom_init_irq_param+0x50>)
    698e:	4298      	cmp	r0, r3
    6990:	d011      	beq.n	69b6 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    6992:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    6996:	d011      	beq.n	69bc <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    6998:	4b0e      	ldr	r3, [pc, #56]	; (69d4 <_sercom_init_irq_param+0x54>)
    699a:	4298      	cmp	r0, r3
    699c:	d011      	beq.n	69c2 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    699e:	4b0e      	ldr	r3, [pc, #56]	; (69d8 <_sercom_init_irq_param+0x58>)
    69a0:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    69a2:	bf04      	itt	eq
    69a4:	4b0d      	ldreq	r3, [pc, #52]	; (69dc <_sercom_init_irq_param+0x5c>)
    69a6:	6159      	streq	r1, [r3, #20]
    69a8:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    69aa:	4b0c      	ldr	r3, [pc, #48]	; (69dc <_sercom_init_irq_param+0x5c>)
    69ac:	6019      	str	r1, [r3, #0]
    69ae:	e7f0      	b.n	6992 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    69b0:	4b0a      	ldr	r3, [pc, #40]	; (69dc <_sercom_init_irq_param+0x5c>)
    69b2:	6059      	str	r1, [r3, #4]
    69b4:	e7f0      	b.n	6998 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    69b6:	4b09      	ldr	r3, [pc, #36]	; (69dc <_sercom_init_irq_param+0x5c>)
    69b8:	6099      	str	r1, [r3, #8]
    69ba:	e7f0      	b.n	699e <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    69bc:	4b07      	ldr	r3, [pc, #28]	; (69dc <_sercom_init_irq_param+0x5c>)
    69be:	60d9      	str	r1, [r3, #12]
    69c0:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    69c2:	4b06      	ldr	r3, [pc, #24]	; (69dc <_sercom_init_irq_param+0x5c>)
    69c4:	6119      	str	r1, [r3, #16]
    69c6:	4770      	bx	lr
    69c8:	40003000 	.word	0x40003000
    69cc:	40003400 	.word	0x40003400
    69d0:	41014000 	.word	0x41014000
    69d4:	43000400 	.word	0x43000400
    69d8:	43000800 	.word	0x43000800
    69dc:	20000980 	.word	0x20000980

000069e0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    69e0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    69e2:	4b03      	ldr	r3, [pc, #12]	; (69f0 <_sercom_get_irq_num+0x10>)
    69e4:	4798      	blx	r3
    69e6:	0080      	lsls	r0, r0, #2
    69e8:	302e      	adds	r0, #46	; 0x2e
}
    69ea:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    69ee:	bd08      	pop	{r3, pc}
    69f0:	000068cd 	.word	0x000068cd

000069f4 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    69f4:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    69f6:	f013 0f01 	tst.w	r3, #1
    69fa:	d109      	bne.n	6a10 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    69fc:	6803      	ldr	r3, [r0, #0]
    69fe:	f043 0302 	orr.w	r3, r3, #2
    6a02:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6a04:	69c3      	ldr	r3, [r0, #28]
    6a06:	f013 0f03 	tst.w	r3, #3
    6a0a:	d1fb      	bne.n	6a04 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    6a0c:	2000      	movs	r0, #0
    6a0e:	4770      	bx	lr
		return ERR_BUSY;
    6a10:	f06f 0003 	mvn.w	r0, #3
}
    6a14:	4770      	bx	lr
	...

00006a18 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    6a18:	b538      	push	{r3, r4, r5, lr}
    6a1a:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    6a1c:	4b0b      	ldr	r3, [pc, #44]	; (6a4c <_spi_async_enable+0x34>)
    6a1e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6a20:	4620      	mov	r0, r4
    6a22:	4b0b      	ldr	r3, [pc, #44]	; (6a50 <_spi_async_enable+0x38>)
    6a24:	4798      	blx	r3
    6a26:	1d01      	adds	r1, r0, #4
    6a28:	b2c9      	uxtb	r1, r1
    6a2a:	2501      	movs	r5, #1
    6a2c:	4c09      	ldr	r4, [pc, #36]	; (6a54 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    6a2e:	1c43      	adds	r3, r0, #1
    6a30:	b2db      	uxtb	r3, r3
    6a32:	0942      	lsrs	r2, r0, #5
    6a34:	f000 001f 	and.w	r0, r0, #31
    6a38:	fa05 f000 	lsl.w	r0, r5, r0
    6a3c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    6a40:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    6a42:	4299      	cmp	r1, r3
    6a44:	d1f3      	bne.n	6a2e <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    6a46:	2000      	movs	r0, #0
    6a48:	bd38      	pop	{r3, r4, r5, pc}
    6a4a:	bf00      	nop
    6a4c:	000069f5 	.word	0x000069f5
    6a50:	000069e1 	.word	0x000069e1
    6a54:	e000e100 	.word	0xe000e100

00006a58 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6a58:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    6a5a:	f013 0f03 	tst.w	r3, #3
    6a5e:	d111      	bne.n	6a84 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6a60:	69c3      	ldr	r3, [r0, #28]
    6a62:	f013 0f03 	tst.w	r3, #3
    6a66:	d1fb      	bne.n	6a60 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    6a68:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    6a6a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    6a6e:	0709      	lsls	r1, r1, #28
    6a70:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    6a74:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6a76:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6a78:	69c3      	ldr	r3, [r0, #28]
    6a7a:	f013 0f03 	tst.w	r3, #3
    6a7e:	d1fb      	bne.n	6a78 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    6a80:	2000      	movs	r0, #0
    6a82:	4770      	bx	lr
		return ERR_BUSY;
    6a84:	f06f 0003 	mvn.w	r0, #3
}
    6a88:	4770      	bx	lr

00006a8a <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6a8a:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    6a8c:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6a8e:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6a90:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6a92:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6a94:	f013 0f01 	tst.w	r3, #1
    6a98:	d109      	bne.n	6aae <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6a9a:	f013 0f04 	tst.w	r3, #4
    6a9e:	d109      	bne.n	6ab4 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6aa0:	f013 0f02 	tst.w	r3, #2
    6aa4:	d109      	bne.n	6aba <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6aa6:	f013 0f80 	tst.w	r3, #128	; 0x80
    6aaa:	d10b      	bne.n	6ac4 <_spi_handler+0x3a>
    6aac:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    6aae:	6883      	ldr	r3, [r0, #8]
    6ab0:	4798      	blx	r3
    6ab2:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    6ab4:	68c3      	ldr	r3, [r0, #12]
    6ab6:	4798      	blx	r3
    6ab8:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6aba:	2302      	movs	r3, #2
    6abc:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    6abe:	6903      	ldr	r3, [r0, #16]
    6ac0:	4798      	blx	r3
    6ac2:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6ac4:	2304      	movs	r3, #4
    6ac6:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6ac8:	2380      	movs	r3, #128	; 0x80
    6aca:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6acc:	6943      	ldr	r3, [r0, #20]
    6ace:	f06f 0112 	mvn.w	r1, #18
    6ad2:	4798      	blx	r3
	}
}
    6ad4:	e7ea      	b.n	6aac <_spi_handler+0x22>
	...

00006ad8 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    6ad8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6ada:	4b03      	ldr	r3, [pc, #12]	; (6ae8 <_spi_get_tx_dma_channel+0x10>)
    6adc:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    6ade:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6ae0:	bf0c      	ite	eq
    6ae2:	2008      	moveq	r0, #8
    6ae4:	2000      	movne	r0, #0
    6ae6:	bd08      	pop	{r3, pc}
    6ae8:	000068cd 	.word	0x000068cd

00006aec <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    6aec:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    6aee:	4b03      	ldr	r3, [pc, #12]	; (6afc <_spi_get_rx_dma_channel+0x10>)
    6af0:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    6af2:	2807      	cmp	r0, #7
    6af4:	bf8c      	ite	hi
    6af6:	2000      	movhi	r0, #0
    6af8:	2001      	movls	r0, #1
    6afa:	bd08      	pop	{r3, pc}
    6afc:	000068cd 	.word	0x000068cd

00006b00 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    6b00:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    6b02:	6883      	ldr	r3, [r0, #8]
    6b04:	689b      	ldr	r3, [r3, #8]
    6b06:	b103      	cbz	r3, 6b0a <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    6b08:	4798      	blx	r3
    6b0a:	bd08      	pop	{r3, pc}

00006b0c <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    6b0c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    6b0e:	6883      	ldr	r3, [r0, #8]
    6b10:	685b      	ldr	r3, [r3, #4]
    6b12:	b103      	cbz	r3, 6b16 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    6b14:	4798      	blx	r3
    6b16:	bd08      	pop	{r3, pc}

00006b18 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    6b18:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    6b1a:	6883      	ldr	r3, [r0, #8]
    6b1c:	68db      	ldr	r3, [r3, #12]
    6b1e:	b103      	cbz	r3, 6b22 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    6b20:	4798      	blx	r3
    6b22:	bd08      	pop	{r3, pc}

00006b24 <_usart_init>:
{
    6b24:	b510      	push	{r4, lr}
    6b26:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6b28:	4b48      	ldr	r3, [pc, #288]	; (6c4c <_usart_init+0x128>)
    6b2a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    6b2c:	2800      	cmp	r0, #0
    6b2e:	d06a      	beq.n	6c06 <_usart_init+0xe2>
    6b30:	2801      	cmp	r0, #1
    6b32:	d062      	beq.n	6bfa <_usart_init+0xd6>
    6b34:	2802      	cmp	r0, #2
    6b36:	d062      	beq.n	6bfe <_usart_init+0xda>
    6b38:	2804      	cmp	r0, #4
    6b3a:	d062      	beq.n	6c02 <_usart_init+0xde>
    6b3c:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6b3e:	bf08      	it	eq
    6b40:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    6b42:	d006      	beq.n	6b52 <_usart_init+0x2e>
	ASSERT(false);
    6b44:	f240 2276 	movw	r2, #630	; 0x276
    6b48:	4941      	ldr	r1, [pc, #260]	; (6c50 <_usart_init+0x12c>)
    6b4a:	2000      	movs	r0, #0
    6b4c:	4b41      	ldr	r3, [pc, #260]	; (6c54 <_usart_init+0x130>)
    6b4e:	4798      	blx	r3
	return 0;
    6b50:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    6b52:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    6b54:	f013 0f01 	tst.w	r3, #1
    6b58:	d122      	bne.n	6ba0 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    6b5a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    6b5e:	4a3e      	ldr	r2, [pc, #248]	; (6c58 <_usart_init+0x134>)
    6b60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6b66:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6b6a:	69e3      	ldr	r3, [r4, #28]
    6b6c:	f013 0f03 	tst.w	r3, #3
    6b70:	d1fb      	bne.n	6b6a <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    6b72:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    6b74:	f013 0f02 	tst.w	r3, #2
    6b78:	d00b      	beq.n	6b92 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6b7a:	6823      	ldr	r3, [r4, #0]
    6b7c:	f023 0302 	bic.w	r3, r3, #2
    6b80:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6b82:	69e3      	ldr	r3, [r4, #28]
    6b84:	f013 0f03 	tst.w	r3, #3
    6b88:	d1fb      	bne.n	6b82 <_usart_init+0x5e>
    6b8a:	69e3      	ldr	r3, [r4, #28]
    6b8c:	f013 0f02 	tst.w	r3, #2
    6b90:	d1fb      	bne.n	6b8a <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    6b92:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6b96:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6b98:	69e3      	ldr	r3, [r4, #28]
    6b9a:	f013 0f03 	tst.w	r3, #3
    6b9e:	d1fb      	bne.n	6b98 <_usart_init+0x74>
    6ba0:	69e3      	ldr	r3, [r4, #28]
    6ba2:	f013 0f01 	tst.w	r3, #1
    6ba6:	d1fb      	bne.n	6ba0 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    6ba8:	460a      	mov	r2, r1
    6baa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6bae:	4b2a      	ldr	r3, [pc, #168]	; (6c58 <_usart_init+0x134>)
    6bb0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6bb4:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    6bb6:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6bb8:	69e3      	ldr	r3, [r4, #28]
    6bba:	f013 0f03 	tst.w	r3, #3
    6bbe:	d1fb      	bne.n	6bb8 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    6bc0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6bc4:	4924      	ldr	r1, [pc, #144]	; (6c58 <_usart_init+0x134>)
    6bc6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    6bcc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    6bce:	69e3      	ldr	r3, [r4, #28]
    6bd0:	f013 0f1f 	tst.w	r3, #31
    6bd4:	d1fb      	bne.n	6bce <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    6bd6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6bda:	491f      	ldr	r1, [pc, #124]	; (6c58 <_usart_init+0x134>)
    6bdc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    6be2:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    6be4:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    6be8:	d10f      	bne.n	6c0a <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    6bea:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6bee:	491a      	ldr	r1, [pc, #104]	; (6c58 <_usart_init+0x134>)
    6bf0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6bf4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    6bf6:	81a3      	strh	r3, [r4, #12]
    6bf8:	e016      	b.n	6c28 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    6bfa:	2101      	movs	r1, #1
    6bfc:	e7a9      	b.n	6b52 <_usart_init+0x2e>
    6bfe:	2102      	movs	r1, #2
    6c00:	e7a7      	b.n	6b52 <_usart_init+0x2e>
    6c02:	2103      	movs	r1, #3
    6c04:	e7a5      	b.n	6b52 <_usart_init+0x2e>
    6c06:	2100      	movs	r1, #0
    6c08:	e7a3      	b.n	6b52 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    6c0a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6c0e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6c12:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    6c14:	89a1      	ldrh	r1, [r4, #12]
    6c16:	f360 010c 	bfi	r1, r0, #0, #13
    6c1a:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    6c1c:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    6c20:	89a3      	ldrh	r3, [r4, #12]
    6c22:	f361 334f 	bfi	r3, r1, #13, #3
    6c26:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    6c28:	4b0b      	ldr	r3, [pc, #44]	; (6c58 <_usart_init+0x134>)
    6c2a:	0051      	lsls	r1, r2, #1
    6c2c:	1888      	adds	r0, r1, r2
    6c2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6c32:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    6c36:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    6c38:	440a      	add	r2, r1
    6c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    6c42:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    6c46:	2000      	movs	r0, #0
    6c48:	bd10      	pop	{r4, pc}
    6c4a:	bf00      	nop
    6c4c:	000068cd 	.word	0x000068cd
    6c50:	0000d8c0 	.word	0x0000d8c0
    6c54:	00005a39 	.word	0x00005a39
    6c58:	0000d7ec 	.word	0x0000d7ec

00006c5c <_get_i2cm_index>:
{
    6c5c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6c5e:	4b07      	ldr	r3, [pc, #28]	; (6c7c <_get_i2cm_index+0x20>)
    6c60:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    6c62:	2805      	cmp	r0, #5
    6c64:	d008      	beq.n	6c78 <_get_i2cm_index+0x1c>
	ASSERT(false);
    6c66:	f240 32ed 	movw	r2, #1005	; 0x3ed
    6c6a:	4905      	ldr	r1, [pc, #20]	; (6c80 <_get_i2cm_index+0x24>)
    6c6c:	2000      	movs	r0, #0
    6c6e:	4b05      	ldr	r3, [pc, #20]	; (6c84 <_get_i2cm_index+0x28>)
    6c70:	4798      	blx	r3
	return -1;
    6c72:	f04f 30ff 	mov.w	r0, #4294967295
}
    6c76:	bd08      	pop	{r3, pc}
			return i;
    6c78:	2000      	movs	r0, #0
    6c7a:	bd08      	pop	{r3, pc}
    6c7c:	000068cd 	.word	0x000068cd
    6c80:	0000d8c0 	.word	0x0000d8c0
    6c84:	00005a39 	.word	0x00005a39

00006c88 <_i2c_m_sync_init_impl>:
{
    6c88:	b538      	push	{r3, r4, r5, lr}
    6c8a:	4605      	mov	r5, r0
    6c8c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    6c8e:	4608      	mov	r0, r1
    6c90:	4b34      	ldr	r3, [pc, #208]	; (6d64 <_i2c_m_sync_init_impl+0xdc>)
    6c92:	4798      	blx	r3
    6c94:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6c96:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6c98:	f013 0f01 	tst.w	r3, #1
    6c9c:	d123      	bne.n	6ce6 <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6c9e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6ca2:	4a31      	ldr	r2, [pc, #196]	; (6d68 <_i2c_m_sync_init_impl+0xe0>)
    6ca4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6ca8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6cac:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6cb0:	69e3      	ldr	r3, [r4, #28]
    6cb2:	f013 0f03 	tst.w	r3, #3
    6cb6:	d1fb      	bne.n	6cb0 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6cb8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6cba:	f013 0f02 	tst.w	r3, #2
    6cbe:	d00b      	beq.n	6cd8 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6cc0:	6823      	ldr	r3, [r4, #0]
    6cc2:	f023 0302 	bic.w	r3, r3, #2
    6cc6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6cc8:	69e3      	ldr	r3, [r4, #28]
    6cca:	f013 0f03 	tst.w	r3, #3
    6cce:	d1fb      	bne.n	6cc8 <_i2c_m_sync_init_impl+0x40>
    6cd0:	69e3      	ldr	r3, [r4, #28]
    6cd2:	f013 0f02 	tst.w	r3, #2
    6cd6:	d1fb      	bne.n	6cd0 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6cd8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6cdc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6cde:	69e3      	ldr	r3, [r4, #28]
    6ce0:	f013 0f03 	tst.w	r3, #3
    6ce4:	d1fb      	bne.n	6cde <_i2c_m_sync_init_impl+0x56>
    6ce6:	69e3      	ldr	r3, [r4, #28]
    6ce8:	f013 0f01 	tst.w	r3, #1
    6cec:	d1fb      	bne.n	6ce6 <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6cee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6cf2:	4a1d      	ldr	r2, [pc, #116]	; (6d68 <_i2c_m_sync_init_impl+0xe0>)
    6cf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6cf8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6cfc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6cfe:	69e3      	ldr	r3, [r4, #28]
    6d00:	f013 0f03 	tst.w	r3, #3
    6d04:	d1fb      	bne.n	6cfe <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6d06:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6d0a:	4917      	ldr	r1, [pc, #92]	; (6d68 <_i2c_m_sync_init_impl+0xe0>)
    6d0c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6d10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6d14:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d16:	69e3      	ldr	r3, [r4, #28]
    6d18:	f013 0f04 	tst.w	r3, #4
    6d1c:	d1fb      	bne.n	6d16 <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6d1e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6d22:	4911      	ldr	r1, [pc, #68]	; (6d68 <_i2c_m_sync_init_impl+0xe0>)
    6d24:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    6d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6d2c:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6d2e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    6d32:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6d34:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6d36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6d3a:	2b01      	cmp	r3, #1
    6d3c:	bf94      	ite	ls
    6d3e:	2300      	movls	r3, #0
    6d40:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6d42:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6d46:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6d48:	69e3      	ldr	r3, [r4, #28]
    6d4a:	f013 0f04 	tst.w	r3, #4
    6d4e:	d1fb      	bne.n	6d48 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    6d50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6d54:	4b04      	ldr	r3, [pc, #16]	; (6d68 <_i2c_m_sync_init_impl+0xe0>)
    6d56:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6d5a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    6d5e:	81eb      	strh	r3, [r5, #14]
}
    6d60:	2000      	movs	r0, #0
    6d62:	bd38      	pop	{r3, r4, r5, pc}
    6d64:	00006c5d 	.word	0x00006c5d
    6d68:	0000d7ec 	.word	0x0000d7ec

00006d6c <_sercom_i2c_m_irq_handler>:
{
    6d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d70:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    6d72:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6d74:	7e26      	ldrb	r6, [r4, #24]
    6d76:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    6d78:	f8df 8234 	ldr.w	r8, [pc, #564]	; 6fb0 <_sercom_i2c_m_irq_handler+0x244>
    6d7c:	f240 425f 	movw	r2, #1119	; 0x45f
    6d80:	4641      	mov	r1, r8
    6d82:	3000      	adds	r0, #0
    6d84:	bf18      	it	ne
    6d86:	2001      	movne	r0, #1
    6d88:	4f88      	ldr	r7, [pc, #544]	; (6fac <_sercom_i2c_m_irq_handler+0x240>)
    6d8a:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    6d8c:	6928      	ldr	r0, [r5, #16]
    6d8e:	f44f 628c 	mov.w	r2, #1120	; 0x460
    6d92:	4641      	mov	r1, r8
    6d94:	3000      	adds	r0, #0
    6d96:	bf18      	it	ne
    6d98:	2001      	movne	r0, #1
    6d9a:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    6d9c:	f016 0f80 	tst.w	r6, #128	; 0x80
    6da0:	f040 80f4 	bne.w	6f8c <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6da4:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6da6:	69e3      	ldr	r3, [r4, #28]
    6da8:	f013 0f04 	tst.w	r3, #4
    6dac:	d1fb      	bne.n	6da6 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6dae:	8b63      	ldrh	r3, [r4, #26]
    6db0:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    6db2:	f016 0f01 	tst.w	r6, #1
    6db6:	f000 8090 	beq.w	6eda <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6dba:	f013 0f02 	tst.w	r3, #2
    6dbe:	d022      	beq.n	6e06 <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6dc0:	2201      	movs	r2, #1
    6dc2:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    6dc4:	886a      	ldrh	r2, [r5, #2]
    6dc6:	b292      	uxth	r2, r2
    6dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6dcc:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    6dce:	886a      	ldrh	r2, [r5, #2]
    6dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6dd4:	0412      	lsls	r2, r2, #16
    6dd6:	0c12      	lsrs	r2, r2, #16
    6dd8:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6dda:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    6dde:	2b00      	cmp	r3, #0
    6de0:	bf14      	ite	ne
    6de2:	f06f 0104 	mvnne.w	r1, #4
    6de6:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6dea:	886b      	ldrh	r3, [r5, #2]
    6dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6df0:	041b      	lsls	r3, r3, #16
    6df2:	0c1b      	lsrs	r3, r3, #16
    6df4:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6df6:	696b      	ldr	r3, [r5, #20]
    6df8:	2b00      	cmp	r3, #0
    6dfa:	f000 80c5 	beq.w	6f88 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    6dfe:	4628      	mov	r0, r5
    6e00:	4798      	blx	r3
    6e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6e06:	f013 0f04 	tst.w	r3, #4
    6e0a:	d124      	bne.n	6e56 <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    6e0c:	886b      	ldrh	r3, [r5, #2]
    6e0e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    6e12:	d03e      	beq.n	6e92 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6e14:	882b      	ldrh	r3, [r5, #0]
    6e16:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6e18:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e1c:	69e3      	ldr	r3, [r4, #28]
    6e1e:	f013 0f04 	tst.w	r3, #4
    6e22:	d1fb      	bne.n	6e1c <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    6e2a:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6e2e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6e30:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e32:	69e3      	ldr	r3, [r4, #28]
    6e34:	f013 0f04 	tst.w	r3, #4
    6e38:	d1fb      	bne.n	6e32 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    6e3a:	886b      	ldrh	r3, [r5, #2]
    6e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6e40:	041b      	lsls	r3, r3, #16
    6e42:	0c1b      	lsrs	r3, r3, #16
    6e44:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6e46:	69ab      	ldr	r3, [r5, #24]
    6e48:	2b00      	cmp	r3, #0
    6e4a:	f000 8088 	beq.w	6f5e <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    6e4e:	4628      	mov	r0, r5
    6e50:	4798      	blx	r3
    6e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    6e56:	686b      	ldr	r3, [r5, #4]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	dd04      	ble.n	6e66 <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    6e5c:	886b      	ldrh	r3, [r5, #2]
    6e5e:	b29b      	uxth	r3, r3
    6e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6e64:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    6e66:	886b      	ldrh	r3, [r5, #2]
    6e68:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6e6c:	d108      	bne.n	6e80 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    6e6e:	886b      	ldrh	r3, [r5, #2]
    6e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e74:	041b      	lsls	r3, r3, #16
    6e76:	0c1b      	lsrs	r3, r3, #16
    6e78:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    6e7a:	f06f 0101 	mvn.w	r1, #1
    6e7e:	e7b4      	b.n	6dea <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6e80:	6863      	ldr	r3, [r4, #4]
    6e82:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6e86:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6e88:	69e3      	ldr	r3, [r4, #28]
    6e8a:	f013 0f04 	tst.w	r3, #4
    6e8e:	d1fb      	bne.n	6e88 <_sercom_i2c_m_irq_handler+0x11c>
    6e90:	e7ed      	b.n	6e6e <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    6e92:	686b      	ldr	r3, [r5, #4]
    6e94:	b99b      	cbnz	r3, 6ebe <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    6e96:	886b      	ldrh	r3, [r5, #2]
    6e98:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6e9c:	d106      	bne.n	6eac <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    6e9e:	886b      	ldrh	r3, [r5, #2]
    6ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ea4:	041b      	lsls	r3, r3, #16
    6ea6:	0c1b      	lsrs	r3, r3, #16
    6ea8:	806b      	strh	r3, [r5, #2]
    6eaa:	e7cc      	b.n	6e46 <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6eac:	6863      	ldr	r3, [r4, #4]
    6eae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6eb2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6eb4:	69e3      	ldr	r3, [r4, #28]
    6eb6:	f013 0f04 	tst.w	r3, #4
    6eba:	d1fb      	bne.n	6eb4 <_sercom_i2c_m_irq_handler+0x148>
    6ebc:	e7ef      	b.n	6e9e <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6ebe:	68ab      	ldr	r3, [r5, #8]
    6ec0:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6ec2:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6ec4:	69e3      	ldr	r3, [r4, #28]
    6ec6:	f013 0f04 	tst.w	r3, #4
    6eca:	d1fb      	bne.n	6ec4 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    6ecc:	68ab      	ldr	r3, [r5, #8]
    6ece:	3301      	adds	r3, #1
    6ed0:	60ab      	str	r3, [r5, #8]
				msg->len--;
    6ed2:	686b      	ldr	r3, [r5, #4]
    6ed4:	3b01      	subs	r3, #1
    6ed6:	606b      	str	r3, [r5, #4]
    6ed8:	e7b5      	b.n	6e46 <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    6eda:	f016 0f02 	tst.w	r6, #2
    6ede:	d041      	beq.n	6f64 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6ee0:	686a      	ldr	r2, [r5, #4]
    6ee2:	2a00      	cmp	r2, #0
    6ee4:	d036      	beq.n	6f54 <_sercom_i2c_m_irq_handler+0x1e8>
    6ee6:	f013 0f04 	tst.w	r3, #4
    6eea:	d133      	bne.n	6f54 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6eec:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    6ef0:	3a01      	subs	r2, #1
    6ef2:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6ef4:	2a00      	cmp	r2, #0
    6ef6:	d137      	bne.n	6f68 <_sercom_i2c_m_irq_handler+0x1fc>
    6ef8:	2900      	cmp	r1, #0
    6efa:	d039      	beq.n	6f70 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    6efc:	886b      	ldrh	r3, [r5, #2]
    6efe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6f02:	d116      	bne.n	6f32 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    6f04:	886b      	ldrh	r3, [r5, #2]
    6f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f0a:	041b      	lsls	r3, r3, #16
    6f0c:	0c1b      	lsrs	r3, r3, #16
    6f0e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6f10:	68aa      	ldr	r2, [r5, #8]
    6f12:	1c53      	adds	r3, r2, #1
    6f14:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f16:	69e3      	ldr	r3, [r4, #28]
    6f18:	f013 0f04 	tst.w	r3, #4
    6f1c:	d1fb      	bne.n	6f16 <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6f20:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6f22:	2302      	movs	r3, #2
    6f24:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6f26:	69eb      	ldr	r3, [r5, #28]
    6f28:	b1e3      	cbz	r3, 6f64 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6f2a:	4628      	mov	r0, r5
    6f2c:	4798      	blx	r3
    6f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6f32:	6863      	ldr	r3, [r4, #4]
    6f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f38:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f3a:	69e3      	ldr	r3, [r4, #28]
    6f3c:	f013 0f04 	tst.w	r3, #4
    6f40:	d1fb      	bne.n	6f3a <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6f42:	6863      	ldr	r3, [r4, #4]
    6f44:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    6f48:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f4a:	69e3      	ldr	r3, [r4, #28]
    6f4c:	f013 0f04 	tst.w	r3, #4
    6f50:	d1fb      	bne.n	6f4a <_sercom_i2c_m_irq_handler+0x1de>
    6f52:	e7d7      	b.n	6f04 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6f54:	2302      	movs	r3, #2
    6f56:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    6f58:	f06f 0101 	mvn.w	r1, #1
    6f5c:	e745      	b.n	6dea <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6f5e:	f016 0f02 	tst.w	r6, #2
    6f62:	d1e0      	bne.n	6f26 <_sercom_i2c_m_irq_handler+0x1ba>
    6f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6f68:	2a01      	cmp	r2, #1
    6f6a:	d1d1      	bne.n	6f10 <_sercom_i2c_m_irq_handler+0x1a4>
    6f6c:	2900      	cmp	r1, #0
    6f6e:	d0cf      	beq.n	6f10 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6f70:	6863      	ldr	r3, [r4, #4]
    6f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    6f76:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6f78:	69e3      	ldr	r3, [r4, #28]
    6f7a:	f013 0f04 	tst.w	r3, #4
    6f7e:	d1fb      	bne.n	6f78 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    6f80:	686b      	ldr	r3, [r5, #4]
    6f82:	2b00      	cmp	r3, #0
    6f84:	d0ba      	beq.n	6efc <_sercom_i2c_m_irq_handler+0x190>
    6f86:	e7c3      	b.n	6f10 <_sercom_i2c_m_irq_handler+0x1a4>
    6f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6f8c:	886b      	ldrh	r3, [r5, #2]
    6f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f92:	041b      	lsls	r3, r3, #16
    6f94:	0c1b      	lsrs	r3, r3, #16
    6f96:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    6f98:	696b      	ldr	r3, [r5, #20]
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d0e2      	beq.n	6f64 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6f9e:	f06f 0104 	mvn.w	r1, #4
    6fa2:	4628      	mov	r0, r5
    6fa4:	4798      	blx	r3
    6fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6faa:	bf00      	nop
    6fac:	00005a39 	.word	0x00005a39
    6fb0:	0000d8c0 	.word	0x0000d8c0

00006fb4 <_usart_sync_init>:
{
    6fb4:	b538      	push	{r3, r4, r5, lr}
    6fb6:	460c      	mov	r4, r1
	ASSERT(device);
    6fb8:	4605      	mov	r5, r0
    6fba:	22c8      	movs	r2, #200	; 0xc8
    6fbc:	4905      	ldr	r1, [pc, #20]	; (6fd4 <_usart_sync_init+0x20>)
    6fbe:	3000      	adds	r0, #0
    6fc0:	bf18      	it	ne
    6fc2:	2001      	movne	r0, #1
    6fc4:	4b04      	ldr	r3, [pc, #16]	; (6fd8 <_usart_sync_init+0x24>)
    6fc6:	4798      	blx	r3
	device->hw = hw;
    6fc8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    6fca:	4620      	mov	r0, r4
    6fcc:	4b03      	ldr	r3, [pc, #12]	; (6fdc <_usart_sync_init+0x28>)
    6fce:	4798      	blx	r3
}
    6fd0:	bd38      	pop	{r3, r4, r5, pc}
    6fd2:	bf00      	nop
    6fd4:	0000d8c0 	.word	0x0000d8c0
    6fd8:	00005a39 	.word	0x00005a39
    6fdc:	00006b25 	.word	0x00006b25

00006fe0 <_usart_async_init>:
{
    6fe0:	b570      	push	{r4, r5, r6, lr}
    6fe2:	460d      	mov	r5, r1
	ASSERT(device);
    6fe4:	4606      	mov	r6, r0
    6fe6:	22d6      	movs	r2, #214	; 0xd6
    6fe8:	4917      	ldr	r1, [pc, #92]	; (7048 <_usart_async_init+0x68>)
    6fea:	3000      	adds	r0, #0
    6fec:	bf18      	it	ne
    6fee:	2001      	movne	r0, #1
    6ff0:	4b16      	ldr	r3, [pc, #88]	; (704c <_usart_async_init+0x6c>)
    6ff2:	4798      	blx	r3
	init_status = _usart_init(hw);
    6ff4:	4628      	mov	r0, r5
    6ff6:	4b16      	ldr	r3, [pc, #88]	; (7050 <_usart_async_init+0x70>)
    6ff8:	4798      	blx	r3
	if (init_status) {
    6ffa:	4604      	mov	r4, r0
    6ffc:	b108      	cbz	r0, 7002 <_usart_async_init+0x22>
}
    6ffe:	4620      	mov	r0, r4
    7000:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    7002:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    7004:	4631      	mov	r1, r6
    7006:	4628      	mov	r0, r5
    7008:	4b12      	ldr	r3, [pc, #72]	; (7054 <_usart_async_init+0x74>)
    700a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    700c:	4628      	mov	r0, r5
    700e:	4b12      	ldr	r3, [pc, #72]	; (7058 <_usart_async_init+0x78>)
    7010:	4798      	blx	r3
    7012:	1d01      	adds	r1, r0, #4
    7014:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7016:	2501      	movs	r5, #1
    7018:	f000 021f 	and.w	r2, r0, #31
    701c:	fa05 f202 	lsl.w	r2, r5, r2
    7020:	0943      	lsrs	r3, r0, #5
    7022:	009b      	lsls	r3, r3, #2
    7024:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7028:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    702c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7034:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7038:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    703c:	601a      	str	r2, [r3, #0]
		irq++;
    703e:	3001      	adds	r0, #1
    7040:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    7042:	4281      	cmp	r1, r0
    7044:	d1e8      	bne.n	7018 <_usart_async_init+0x38>
    7046:	e7da      	b.n	6ffe <_usart_async_init+0x1e>
    7048:	0000d8c0 	.word	0x0000d8c0
    704c:	00005a39 	.word	0x00005a39
    7050:	00006b25 	.word	0x00006b25
    7054:	00006981 	.word	0x00006981
    7058:	000069e1 	.word	0x000069e1

0000705c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    705c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    705e:	6813      	ldr	r3, [r2, #0]
    7060:	f043 0302 	orr.w	r3, r3, #2
    7064:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    7066:	69d3      	ldr	r3, [r2, #28]
    7068:	f013 0f03 	tst.w	r3, #3
    706c:	d1fb      	bne.n	7066 <_usart_sync_enable+0xa>
}
    706e:	4770      	bx	lr

00007070 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    7070:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7072:	6813      	ldr	r3, [r2, #0]
    7074:	f043 0302 	orr.w	r3, r3, #2
    7078:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    707a:	69d3      	ldr	r3, [r2, #28]
    707c:	f013 0f03 	tst.w	r3, #3
    7080:	d1fb      	bne.n	707a <_usart_async_enable+0xa>
}
    7082:	4770      	bx	lr

00007084 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    7084:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    7086:	6299      	str	r1, [r3, #40]	; 0x28
    7088:	4770      	bx	lr

0000708a <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    708a:	6983      	ldr	r3, [r0, #24]
    708c:	6299      	str	r1, [r3, #40]	; 0x28
    708e:	4770      	bx	lr

00007090 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    7090:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    7092:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7094:	b2c0      	uxtb	r0, r0
    7096:	4770      	bx	lr

00007098 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    7098:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    709a:	7e18      	ldrb	r0, [r3, #24]
}
    709c:	f000 0001 	and.w	r0, r0, #1
    70a0:	4770      	bx	lr

000070a2 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    70a2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    70a4:	7e18      	ldrb	r0, [r3, #24]
}
    70a6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    70aa:	4770      	bx	lr

000070ac <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    70ac:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    70ae:	7e18      	ldrb	r0, [r3, #24]
}
    70b0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    70b4:	4770      	bx	lr

000070b6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    70b6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    70b8:	2201      	movs	r2, #1
    70ba:	759a      	strb	r2, [r3, #22]
    70bc:	4770      	bx	lr

000070be <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    70be:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    70c0:	2202      	movs	r2, #2
    70c2:	759a      	strb	r2, [r3, #22]
    70c4:	4770      	bx	lr
	...

000070c8 <_usart_async_set_irq_state>:
{
    70c8:	b570      	push	{r4, r5, r6, lr}
    70ca:	460c      	mov	r4, r1
    70cc:	4616      	mov	r6, r2
	ASSERT(device);
    70ce:	4605      	mov	r5, r0
    70d0:	f240 2236 	movw	r2, #566	; 0x236
    70d4:	4915      	ldr	r1, [pc, #84]	; (712c <_usart_async_set_irq_state+0x64>)
    70d6:	3000      	adds	r0, #0
    70d8:	bf18      	it	ne
    70da:	2001      	movne	r0, #1
    70dc:	4b14      	ldr	r3, [pc, #80]	; (7130 <_usart_async_set_irq_state+0x68>)
    70de:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    70e0:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    70e4:	d10d      	bne.n	7102 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    70e6:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    70e8:	b92e      	cbnz	r6, 70f6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    70ea:	2201      	movs	r2, #1
    70ec:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    70ee:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    70f0:	2202      	movs	r2, #2
    70f2:	751a      	strb	r2, [r3, #20]
    70f4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    70f6:	2201      	movs	r2, #1
    70f8:	759a      	strb	r2, [r3, #22]
    70fa:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    70fc:	2202      	movs	r2, #2
    70fe:	759a      	strb	r2, [r3, #22]
    7100:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    7102:	2c01      	cmp	r4, #1
    7104:	d002      	beq.n	710c <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    7106:	2c03      	cmp	r4, #3
    7108:	d008      	beq.n	711c <_usart_async_set_irq_state+0x54>
    710a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    710c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    710e:	b916      	cbnz	r6, 7116 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    7110:	2204      	movs	r2, #4
    7112:	751a      	strb	r2, [r3, #20]
    7114:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    7116:	2204      	movs	r2, #4
    7118:	759a      	strb	r2, [r3, #22]
    711a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    711c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    711e:	b116      	cbz	r6, 7126 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    7120:	2280      	movs	r2, #128	; 0x80
    7122:	759a      	strb	r2, [r3, #22]
}
    7124:	e7f1      	b.n	710a <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    7126:	2280      	movs	r2, #128	; 0x80
    7128:	751a      	strb	r2, [r3, #20]
    712a:	bd70      	pop	{r4, r5, r6, pc}
    712c:	0000d8c0 	.word	0x0000d8c0
    7130:	00005a39 	.word	0x00005a39

00007134 <_i2c_m_async_init>:
{
    7134:	b570      	push	{r4, r5, r6, lr}
    7136:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    7138:	4606      	mov	r6, r0
    713a:	f240 42d2 	movw	r2, #1234	; 0x4d2
    713e:	4918      	ldr	r1, [pc, #96]	; (71a0 <_i2c_m_async_init+0x6c>)
    7140:	3000      	adds	r0, #0
    7142:	bf18      	it	ne
    7144:	2001      	movne	r0, #1
    7146:	4b17      	ldr	r3, [pc, #92]	; (71a4 <_i2c_m_async_init+0x70>)
    7148:	4798      	blx	r3
	i2c_dev->hw = hw;
    714a:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    714c:	4629      	mov	r1, r5
    714e:	4630      	mov	r0, r6
    7150:	4b15      	ldr	r3, [pc, #84]	; (71a8 <_i2c_m_async_init+0x74>)
    7152:	4798      	blx	r3
	if (init_status) {
    7154:	4604      	mov	r4, r0
    7156:	b108      	cbz	r0, 715c <_i2c_m_async_init+0x28>
}
    7158:	4620      	mov	r0, r4
    715a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    715c:	4631      	mov	r1, r6
    715e:	4628      	mov	r0, r5
    7160:	4b12      	ldr	r3, [pc, #72]	; (71ac <_i2c_m_async_init+0x78>)
    7162:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7164:	4628      	mov	r0, r5
    7166:	4b12      	ldr	r3, [pc, #72]	; (71b0 <_i2c_m_async_init+0x7c>)
    7168:	4798      	blx	r3
    716a:	1d01      	adds	r1, r0, #4
    716c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    716e:	2501      	movs	r5, #1
    7170:	f000 021f 	and.w	r2, r0, #31
    7174:	fa05 f202 	lsl.w	r2, r5, r2
    7178:	0943      	lsrs	r3, r0, #5
    717a:	009b      	lsls	r3, r3, #2
    717c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7180:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    7188:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    718c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7190:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7194:	601a      	str	r2, [r3, #0]
		irq++;
    7196:	3001      	adds	r0, #1
    7198:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    719a:	4281      	cmp	r1, r0
    719c:	d1e8      	bne.n	7170 <_i2c_m_async_init+0x3c>
    719e:	e7db      	b.n	7158 <_i2c_m_async_init+0x24>
    71a0:	0000d8c0 	.word	0x0000d8c0
    71a4:	00005a39 	.word	0x00005a39
    71a8:	00006c89 	.word	0x00006c89
    71ac:	00006981 	.word	0x00006981
    71b0:	000069e1 	.word	0x000069e1

000071b4 <_i2c_m_async_transfer>:
{
    71b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71b8:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    71ba:	4605      	mov	r5, r0
    71bc:	f110 0800 	adds.w	r8, r0, #0
    71c0:	bf18      	it	ne
    71c2:	f04f 0801 	movne.w	r8, #1
    71c6:	4f45      	ldr	r7, [pc, #276]	; (72dc <_i2c_m_async_transfer+0x128>)
    71c8:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    71cc:	4639      	mov	r1, r7
    71ce:	4640      	mov	r0, r8
    71d0:	4e43      	ldr	r6, [pc, #268]	; (72e0 <_i2c_m_async_transfer+0x12c>)
    71d2:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    71d4:	6928      	ldr	r0, [r5, #16]
    71d6:	f240 5229 	movw	r2, #1321	; 0x529
    71da:	4639      	mov	r1, r7
    71dc:	3000      	adds	r0, #0
    71de:	bf18      	it	ne
    71e0:	2001      	movne	r0, #1
    71e2:	47b0      	blx	r6
	ASSERT(msg);
    71e4:	f240 522a 	movw	r2, #1322	; 0x52a
    71e8:	4639      	mov	r1, r7
    71ea:	1c20      	adds	r0, r4, #0
    71ec:	bf18      	it	ne
    71ee:	2001      	movne	r0, #1
    71f0:	47b0      	blx	r6
	if (msg->len == 0) {
    71f2:	6860      	ldr	r0, [r4, #4]
    71f4:	2800      	cmp	r0, #0
    71f6:	d06f      	beq.n	72d8 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    71f8:	886b      	ldrh	r3, [r5, #2]
    71fa:	f413 7f80 	tst.w	r3, #256	; 0x100
    71fe:	d169      	bne.n	72d4 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    7200:	8863      	ldrh	r3, [r4, #2]
    7202:	b29b      	uxth	r3, r3
    7204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7208:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    720a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    720e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7212:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7214:	6853      	ldr	r3, [r2, #4]
    7216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    721a:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    721c:	69d3      	ldr	r3, [r2, #28]
    721e:	f013 0f04 	tst.w	r3, #4
    7222:	d1fb      	bne.n	721c <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    7224:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7226:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    7228:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    722c:	492b      	ldr	r1, [pc, #172]	; (72dc <_i2c_m_async_transfer+0x128>)
    722e:	4640      	mov	r0, r8
    7230:	4b2b      	ldr	r3, [pc, #172]	; (72e0 <_i2c_m_async_transfer+0x12c>)
    7232:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    7234:	686b      	ldr	r3, [r5, #4]
    7236:	2b01      	cmp	r3, #1
    7238:	d02a      	beq.n	7290 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    723a:	6863      	ldr	r3, [r4, #4]
    723c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    7240:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7242:	69e3      	ldr	r3, [r4, #28]
    7244:	f013 0f04 	tst.w	r3, #4
    7248:	d1fb      	bne.n	7242 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    724a:	882b      	ldrh	r3, [r5, #0]
    724c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7250:	d02a      	beq.n	72a8 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    7252:	886a      	ldrh	r2, [r5, #2]
    7254:	f012 0f01 	tst.w	r2, #1
    7258:	d004      	beq.n	7264 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    725a:	886a      	ldrh	r2, [r5, #2]
    725c:	b292      	uxth	r2, r2
    725e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7262:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7264:	f240 72fe 	movw	r2, #2046	; 0x7fe
    7268:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    726c:	69e3      	ldr	r3, [r4, #28]
    726e:	f013 0f04 	tst.w	r3, #4
    7272:	d1fb      	bne.n	726c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7274:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    727a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    727e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7280:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7282:	69e3      	ldr	r3, [r4, #28]
    7284:	f013 0f04 	tst.w	r3, #4
    7288:	d1fb      	bne.n	7282 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    728a:	2000      	movs	r0, #0
    728c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    7290:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    7294:	d0d1      	beq.n	723a <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7296:	6863      	ldr	r3, [r4, #4]
    7298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    729c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    729e:	69e3      	ldr	r3, [r4, #28]
    72a0:	f013 0f04 	tst.w	r3, #4
    72a4:	d1fb      	bne.n	729e <_i2c_m_async_transfer+0xea>
    72a6:	e7d0      	b.n	724a <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    72a8:	8869      	ldrh	r1, [r5, #2]
    72aa:	005a      	lsls	r2, r3, #1
    72ac:	b2d2      	uxtb	r2, r2
    72ae:	f001 0301 	and.w	r3, r1, #1
    72b2:	431a      	orrs	r2, r3
    72b4:	69e3      	ldr	r3, [r4, #28]
    72b6:	f013 0f04 	tst.w	r3, #4
    72ba:	d1fb      	bne.n	72b4 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    72bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    72be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    72c2:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    72c4:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    72c6:	69e3      	ldr	r3, [r4, #28]
    72c8:	f013 0f04 	tst.w	r3, #4
    72cc:	d1fb      	bne.n	72c6 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    72ce:	2000      	movs	r0, #0
    72d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    72d4:	f06f 0003 	mvn.w	r0, #3
}
    72d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72dc:	0000d8c0 	.word	0x0000d8c0
    72e0:	00005a39 	.word	0x00005a39

000072e4 <_i2c_m_async_register_callback>:
	switch (type) {
    72e4:	2901      	cmp	r1, #1
    72e6:	d006      	beq.n	72f6 <_i2c_m_async_register_callback+0x12>
    72e8:	b119      	cbz	r1, 72f2 <_i2c_m_async_register_callback+0xe>
    72ea:	2902      	cmp	r1, #2
    72ec:	d005      	beq.n	72fa <_i2c_m_async_register_callback+0x16>
}
    72ee:	2000      	movs	r0, #0
    72f0:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    72f2:	6142      	str	r2, [r0, #20]
		break;
    72f4:	e7fb      	b.n	72ee <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    72f6:	6182      	str	r2, [r0, #24]
		break;
    72f8:	e7f9      	b.n	72ee <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    72fa:	61c2      	str	r2, [r0, #28]
		break;
    72fc:	e7f7      	b.n	72ee <_i2c_m_async_register_callback+0xa>
	...

00007300 <SERCOM0_0_Handler>:
{
    7300:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7302:	4b02      	ldr	r3, [pc, #8]	; (730c <SERCOM0_0_Handler+0xc>)
    7304:	6818      	ldr	r0, [r3, #0]
    7306:	4b02      	ldr	r3, [pc, #8]	; (7310 <SERCOM0_0_Handler+0x10>)
    7308:	4798      	blx	r3
    730a:	bd08      	pop	{r3, pc}
    730c:	20000980 	.word	0x20000980
    7310:	00006911 	.word	0x00006911

00007314 <SERCOM0_1_Handler>:
{
    7314:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    7316:	4b02      	ldr	r3, [pc, #8]	; (7320 <SERCOM0_1_Handler+0xc>)
    7318:	6818      	ldr	r0, [r3, #0]
    731a:	4b02      	ldr	r3, [pc, #8]	; (7324 <SERCOM0_1_Handler+0x10>)
    731c:	4798      	blx	r3
    731e:	bd08      	pop	{r3, pc}
    7320:	20000980 	.word	0x20000980
    7324:	00006911 	.word	0x00006911

00007328 <SERCOM0_2_Handler>:
{
    7328:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    732a:	4b02      	ldr	r3, [pc, #8]	; (7334 <SERCOM0_2_Handler+0xc>)
    732c:	6818      	ldr	r0, [r3, #0]
    732e:	4b02      	ldr	r3, [pc, #8]	; (7338 <SERCOM0_2_Handler+0x10>)
    7330:	4798      	blx	r3
    7332:	bd08      	pop	{r3, pc}
    7334:	20000980 	.word	0x20000980
    7338:	00006911 	.word	0x00006911

0000733c <SERCOM0_3_Handler>:
{
    733c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    733e:	4b02      	ldr	r3, [pc, #8]	; (7348 <SERCOM0_3_Handler+0xc>)
    7340:	6818      	ldr	r0, [r3, #0]
    7342:	4b02      	ldr	r3, [pc, #8]	; (734c <SERCOM0_3_Handler+0x10>)
    7344:	4798      	blx	r3
    7346:	bd08      	pop	{r3, pc}
    7348:	20000980 	.word	0x20000980
    734c:	00006911 	.word	0x00006911

00007350 <SERCOM1_0_Handler>:
{
    7350:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7352:	4b02      	ldr	r3, [pc, #8]	; (735c <SERCOM1_0_Handler+0xc>)
    7354:	6858      	ldr	r0, [r3, #4]
    7356:	4b02      	ldr	r3, [pc, #8]	; (7360 <SERCOM1_0_Handler+0x10>)
    7358:	4798      	blx	r3
    735a:	bd08      	pop	{r3, pc}
    735c:	20000980 	.word	0x20000980
    7360:	00006911 	.word	0x00006911

00007364 <SERCOM1_1_Handler>:
{
    7364:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    7366:	4b02      	ldr	r3, [pc, #8]	; (7370 <SERCOM1_1_Handler+0xc>)
    7368:	6858      	ldr	r0, [r3, #4]
    736a:	4b02      	ldr	r3, [pc, #8]	; (7374 <SERCOM1_1_Handler+0x10>)
    736c:	4798      	blx	r3
    736e:	bd08      	pop	{r3, pc}
    7370:	20000980 	.word	0x20000980
    7374:	00006911 	.word	0x00006911

00007378 <SERCOM1_2_Handler>:
{
    7378:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    737a:	4b02      	ldr	r3, [pc, #8]	; (7384 <SERCOM1_2_Handler+0xc>)
    737c:	6858      	ldr	r0, [r3, #4]
    737e:	4b02      	ldr	r3, [pc, #8]	; (7388 <SERCOM1_2_Handler+0x10>)
    7380:	4798      	blx	r3
    7382:	bd08      	pop	{r3, pc}
    7384:	20000980 	.word	0x20000980
    7388:	00006911 	.word	0x00006911

0000738c <SERCOM1_3_Handler>:
{
    738c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    738e:	4b02      	ldr	r3, [pc, #8]	; (7398 <SERCOM1_3_Handler+0xc>)
    7390:	6858      	ldr	r0, [r3, #4]
    7392:	4b02      	ldr	r3, [pc, #8]	; (739c <SERCOM1_3_Handler+0x10>)
    7394:	4798      	blx	r3
    7396:	bd08      	pop	{r3, pc}
    7398:	20000980 	.word	0x20000980
    739c:	00006911 	.word	0x00006911

000073a0 <SERCOM3_0_Handler>:
{
    73a0:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    73a2:	4b02      	ldr	r3, [pc, #8]	; (73ac <SERCOM3_0_Handler+0xc>)
    73a4:	6898      	ldr	r0, [r3, #8]
    73a6:	4b02      	ldr	r3, [pc, #8]	; (73b0 <SERCOM3_0_Handler+0x10>)
    73a8:	4798      	blx	r3
    73aa:	bd08      	pop	{r3, pc}
    73ac:	20000980 	.word	0x20000980
    73b0:	00006a8b 	.word	0x00006a8b

000073b4 <SERCOM3_1_Handler>:
{
    73b4:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    73b6:	4b02      	ldr	r3, [pc, #8]	; (73c0 <SERCOM3_1_Handler+0xc>)
    73b8:	6898      	ldr	r0, [r3, #8]
    73ba:	4b02      	ldr	r3, [pc, #8]	; (73c4 <SERCOM3_1_Handler+0x10>)
    73bc:	4798      	blx	r3
    73be:	bd08      	pop	{r3, pc}
    73c0:	20000980 	.word	0x20000980
    73c4:	00006a8b 	.word	0x00006a8b

000073c8 <SERCOM3_2_Handler>:
{
    73c8:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    73ca:	4b02      	ldr	r3, [pc, #8]	; (73d4 <SERCOM3_2_Handler+0xc>)
    73cc:	6898      	ldr	r0, [r3, #8]
    73ce:	4b02      	ldr	r3, [pc, #8]	; (73d8 <SERCOM3_2_Handler+0x10>)
    73d0:	4798      	blx	r3
    73d2:	bd08      	pop	{r3, pc}
    73d4:	20000980 	.word	0x20000980
    73d8:	00006a8b 	.word	0x00006a8b

000073dc <SERCOM3_3_Handler>:
{
    73dc:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    73de:	4b02      	ldr	r3, [pc, #8]	; (73e8 <SERCOM3_3_Handler+0xc>)
    73e0:	6898      	ldr	r0, [r3, #8]
    73e2:	4b02      	ldr	r3, [pc, #8]	; (73ec <SERCOM3_3_Handler+0x10>)
    73e4:	4798      	blx	r3
    73e6:	bd08      	pop	{r3, pc}
    73e8:	20000980 	.word	0x20000980
    73ec:	00006a8b 	.word	0x00006a8b

000073f0 <SERCOM4_0_Handler>:
{
    73f0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    73f2:	4b02      	ldr	r3, [pc, #8]	; (73fc <SERCOM4_0_Handler+0xc>)
    73f4:	68d8      	ldr	r0, [r3, #12]
    73f6:	4b02      	ldr	r3, [pc, #8]	; (7400 <SERCOM4_0_Handler+0x10>)
    73f8:	4798      	blx	r3
    73fa:	bd08      	pop	{r3, pc}
    73fc:	20000980 	.word	0x20000980
    7400:	00006911 	.word	0x00006911

00007404 <SERCOM4_1_Handler>:
{
    7404:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    7406:	4b02      	ldr	r3, [pc, #8]	; (7410 <SERCOM4_1_Handler+0xc>)
    7408:	68d8      	ldr	r0, [r3, #12]
    740a:	4b02      	ldr	r3, [pc, #8]	; (7414 <SERCOM4_1_Handler+0x10>)
    740c:	4798      	blx	r3
    740e:	bd08      	pop	{r3, pc}
    7410:	20000980 	.word	0x20000980
    7414:	00006911 	.word	0x00006911

00007418 <SERCOM4_2_Handler>:
{
    7418:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    741a:	4b02      	ldr	r3, [pc, #8]	; (7424 <SERCOM4_2_Handler+0xc>)
    741c:	68d8      	ldr	r0, [r3, #12]
    741e:	4b02      	ldr	r3, [pc, #8]	; (7428 <SERCOM4_2_Handler+0x10>)
    7420:	4798      	blx	r3
    7422:	bd08      	pop	{r3, pc}
    7424:	20000980 	.word	0x20000980
    7428:	00006911 	.word	0x00006911

0000742c <SERCOM4_3_Handler>:
{
    742c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    742e:	4b02      	ldr	r3, [pc, #8]	; (7438 <SERCOM4_3_Handler+0xc>)
    7430:	68d8      	ldr	r0, [r3, #12]
    7432:	4b02      	ldr	r3, [pc, #8]	; (743c <SERCOM4_3_Handler+0x10>)
    7434:	4798      	blx	r3
    7436:	bd08      	pop	{r3, pc}
    7438:	20000980 	.word	0x20000980
    743c:	00006911 	.word	0x00006911

00007440 <SERCOM5_0_Handler>:
{
    7440:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7442:	4b02      	ldr	r3, [pc, #8]	; (744c <SERCOM5_0_Handler+0xc>)
    7444:	6918      	ldr	r0, [r3, #16]
    7446:	4b02      	ldr	r3, [pc, #8]	; (7450 <SERCOM5_0_Handler+0x10>)
    7448:	4798      	blx	r3
    744a:	bd08      	pop	{r3, pc}
    744c:	20000980 	.word	0x20000980
    7450:	00006d6d 	.word	0x00006d6d

00007454 <SERCOM5_1_Handler>:
{
    7454:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    7456:	4b02      	ldr	r3, [pc, #8]	; (7460 <SERCOM5_1_Handler+0xc>)
    7458:	6918      	ldr	r0, [r3, #16]
    745a:	4b02      	ldr	r3, [pc, #8]	; (7464 <SERCOM5_1_Handler+0x10>)
    745c:	4798      	blx	r3
    745e:	bd08      	pop	{r3, pc}
    7460:	20000980 	.word	0x20000980
    7464:	00006d6d 	.word	0x00006d6d

00007468 <SERCOM5_2_Handler>:
{
    7468:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    746a:	4b02      	ldr	r3, [pc, #8]	; (7474 <SERCOM5_2_Handler+0xc>)
    746c:	6918      	ldr	r0, [r3, #16]
    746e:	4b02      	ldr	r3, [pc, #8]	; (7478 <SERCOM5_2_Handler+0x10>)
    7470:	4798      	blx	r3
    7472:	bd08      	pop	{r3, pc}
    7474:	20000980 	.word	0x20000980
    7478:	00006d6d 	.word	0x00006d6d

0000747c <SERCOM5_3_Handler>:
{
    747c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    747e:	4b02      	ldr	r3, [pc, #8]	; (7488 <SERCOM5_3_Handler+0xc>)
    7480:	6918      	ldr	r0, [r3, #16]
    7482:	4b02      	ldr	r3, [pc, #8]	; (748c <SERCOM5_3_Handler+0x10>)
    7484:	4798      	blx	r3
    7486:	bd08      	pop	{r3, pc}
    7488:	20000980 	.word	0x20000980
    748c:	00006d6d 	.word	0x00006d6d

00007490 <SERCOM6_0_Handler>:
{
    7490:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    7492:	4b02      	ldr	r3, [pc, #8]	; (749c <SERCOM6_0_Handler+0xc>)
    7494:	6958      	ldr	r0, [r3, #20]
    7496:	4b02      	ldr	r3, [pc, #8]	; (74a0 <SERCOM6_0_Handler+0x10>)
    7498:	4798      	blx	r3
    749a:	bd08      	pop	{r3, pc}
    749c:	20000980 	.word	0x20000980
    74a0:	00006911 	.word	0x00006911

000074a4 <SERCOM6_1_Handler>:
{
    74a4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    74a6:	4b02      	ldr	r3, [pc, #8]	; (74b0 <SERCOM6_1_Handler+0xc>)
    74a8:	6958      	ldr	r0, [r3, #20]
    74aa:	4b02      	ldr	r3, [pc, #8]	; (74b4 <SERCOM6_1_Handler+0x10>)
    74ac:	4798      	blx	r3
    74ae:	bd08      	pop	{r3, pc}
    74b0:	20000980 	.word	0x20000980
    74b4:	00006911 	.word	0x00006911

000074b8 <SERCOM6_2_Handler>:
{
    74b8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    74ba:	4b02      	ldr	r3, [pc, #8]	; (74c4 <SERCOM6_2_Handler+0xc>)
    74bc:	6958      	ldr	r0, [r3, #20]
    74be:	4b02      	ldr	r3, [pc, #8]	; (74c8 <SERCOM6_2_Handler+0x10>)
    74c0:	4798      	blx	r3
    74c2:	bd08      	pop	{r3, pc}
    74c4:	20000980 	.word	0x20000980
    74c8:	00006911 	.word	0x00006911

000074cc <SERCOM6_3_Handler>:
{
    74cc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    74ce:	4b02      	ldr	r3, [pc, #8]	; (74d8 <SERCOM6_3_Handler+0xc>)
    74d0:	6958      	ldr	r0, [r3, #20]
    74d2:	4b02      	ldr	r3, [pc, #8]	; (74dc <SERCOM6_3_Handler+0x10>)
    74d4:	4798      	blx	r3
    74d6:	bd08      	pop	{r3, pc}
    74d8:	20000980 	.word	0x20000980
    74dc:	00006911 	.word	0x00006911

000074e0 <_spi_m_sync_init>:
{
    74e0:	b570      	push	{r4, r5, r6, lr}
    74e2:	4606      	mov	r6, r0
    74e4:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    74e6:	4608      	mov	r0, r1
    74e8:	4b5d      	ldr	r3, [pc, #372]	; (7660 <_spi_m_sync_init+0x180>)
    74ea:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    74ec:	2803      	cmp	r0, #3
    74ee:	d00c      	beq.n	750a <_spi_m_sync_init+0x2a>
    74f0:	2807      	cmp	r0, #7
    74f2:	bf08      	it	eq
    74f4:	2301      	moveq	r3, #1
    74f6:	d009      	beq.n	750c <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    74f8:	2e00      	cmp	r6, #0
    74fa:	f000 809f 	beq.w	763c <_spi_m_sync_init+0x15c>
    74fe:	2c00      	cmp	r4, #0
    7500:	f040 80a5 	bne.w	764e <_spi_m_sync_init+0x16e>
	return NULL;
    7504:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    7506:	2000      	movs	r0, #0
    7508:	e009      	b.n	751e <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    750a:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    750c:	4d55      	ldr	r5, [pc, #340]	; (7664 <_spi_m_sync_init+0x184>)
    750e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    7512:	441d      	add	r5, r3
	ASSERT(dev && hw);
    7514:	2e00      	cmp	r6, #0
    7516:	d0f6      	beq.n	7506 <_spi_m_sync_init+0x26>
    7518:	2001      	movs	r0, #1
    751a:	2c00      	cmp	r4, #0
    751c:	d0f3      	beq.n	7506 <_spi_m_sync_init+0x26>
    751e:	f640 226e 	movw	r2, #2670	; 0xa6e
    7522:	4951      	ldr	r1, [pc, #324]	; (7668 <_spi_m_sync_init+0x188>)
    7524:	4b51      	ldr	r3, [pc, #324]	; (766c <_spi_m_sync_init+0x18c>)
    7526:	4798      	blx	r3
	if (regs == NULL) {
    7528:	2d00      	cmp	r5, #0
    752a:	f000 8084 	beq.w	7636 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    752e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7530:	f013 0f01 	tst.w	r3, #1
    7534:	d11d      	bne.n	7572 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7536:	682b      	ldr	r3, [r5, #0]
    7538:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    753c:	69e3      	ldr	r3, [r4, #28]
    753e:	f013 0f03 	tst.w	r3, #3
    7542:	d1fb      	bne.n	753c <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7544:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7546:	f013 0f02 	tst.w	r3, #2
    754a:	d00b      	beq.n	7564 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    754c:	6823      	ldr	r3, [r4, #0]
    754e:	f023 0302 	bic.w	r3, r3, #2
    7552:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7554:	69e3      	ldr	r3, [r4, #28]
    7556:	f013 0f03 	tst.w	r3, #3
    755a:	d1fb      	bne.n	7554 <_spi_m_sync_init+0x74>
    755c:	69e3      	ldr	r3, [r4, #28]
    755e:	f013 0f02 	tst.w	r3, #2
    7562:	d1fb      	bne.n	755c <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7564:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7568:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    756a:	69e3      	ldr	r3, [r4, #28]
    756c:	f013 0f03 	tst.w	r3, #3
    7570:	d1fb      	bne.n	756a <_spi_m_sync_init+0x8a>
    7572:	69e3      	ldr	r3, [r4, #28]
    7574:	f013 0f01 	tst.w	r3, #1
    7578:	d1fb      	bne.n	7572 <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    757a:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    757c:	682b      	ldr	r3, [r5, #0]
    757e:	f003 031c 	and.w	r3, r3, #28
    7582:	2b08      	cmp	r3, #8
    7584:	d02e      	beq.n	75e4 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    7586:	f44f 6217 	mov.w	r2, #2416	; 0x970
    758a:	4937      	ldr	r1, [pc, #220]	; (7668 <_spi_m_sync_init+0x188>)
    758c:	1c20      	adds	r0, r4, #0
    758e:	bf18      	it	ne
    7590:	2001      	movne	r0, #1
    7592:	4b36      	ldr	r3, [pc, #216]	; (766c <_spi_m_sync_init+0x18c>)
    7594:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7596:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    7598:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    759c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    75a0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    75a2:	69e3      	ldr	r3, [r4, #28]
    75a4:	f013 0f03 	tst.w	r3, #3
    75a8:	d1fb      	bne.n	75a2 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    75aa:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    75ac:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    75b0:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    75b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    75b8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    75ba:	69e3      	ldr	r3, [r4, #28]
    75bc:	f013 0f17 	tst.w	r3, #23
    75c0:	d1fb      	bne.n	75ba <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    75c2:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    75c4:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    75c6:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    75c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    75cc:	686b      	ldr	r3, [r5, #4]
    75ce:	f003 0307 	and.w	r3, r3, #7
    75d2:	2b00      	cmp	r3, #0
    75d4:	bf0c      	ite	eq
    75d6:	2301      	moveq	r3, #1
    75d8:	2302      	movne	r3, #2
    75da:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    75dc:	89eb      	ldrh	r3, [r5, #14]
    75de:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    75e0:	2000      	movs	r0, #0
    75e2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    75e4:	f640 1284 	movw	r2, #2436	; 0x984
    75e8:	491f      	ldr	r1, [pc, #124]	; (7668 <_spi_m_sync_init+0x188>)
    75ea:	1c20      	adds	r0, r4, #0
    75ec:	bf18      	it	ne
    75ee:	2001      	movne	r0, #1
    75f0:	4b1e      	ldr	r3, [pc, #120]	; (766c <_spi_m_sync_init+0x18c>)
    75f2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    75f4:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    75f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    75fa:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    75fe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7600:	69e3      	ldr	r3, [r4, #28]
    7602:	f013 0f03 	tst.w	r3, #3
    7606:	d1fb      	bne.n	7600 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    7608:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    760a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    760e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    7612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7616:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    761a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    761c:	69e3      	ldr	r3, [r4, #28]
    761e:	f013 0f17 	tst.w	r3, #23
    7622:	d1fb      	bne.n	761c <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7624:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7626:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7628:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    762a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    762e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7630:	2b00      	cmp	r3, #0
    7632:	d1fc      	bne.n	762e <_spi_m_sync_init+0x14e>
    7634:	e7ca      	b.n	75cc <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    7636:	f06f 000c 	mvn.w	r0, #12
    763a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    763c:	f640 226e 	movw	r2, #2670	; 0xa6e
    7640:	4909      	ldr	r1, [pc, #36]	; (7668 <_spi_m_sync_init+0x188>)
    7642:	2000      	movs	r0, #0
    7644:	4b09      	ldr	r3, [pc, #36]	; (766c <_spi_m_sync_init+0x18c>)
    7646:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7648:	f06f 000c 	mvn.w	r0, #12
    764c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    764e:	f640 226e 	movw	r2, #2670	; 0xa6e
    7652:	4905      	ldr	r1, [pc, #20]	; (7668 <_spi_m_sync_init+0x188>)
    7654:	2001      	movs	r0, #1
    7656:	4b05      	ldr	r3, [pc, #20]	; (766c <_spi_m_sync_init+0x18c>)
    7658:	4798      	blx	r3
		return ERR_INVALID_ARG;
    765a:	f06f 000c 	mvn.w	r0, #12
    765e:	bd70      	pop	{r4, r5, r6, pc}
    7660:	000068cd 	.word	0x000068cd
    7664:	0000d89c 	.word	0x0000d89c
    7668:	0000d8c0 	.word	0x0000d8c0
    766c:	00005a39 	.word	0x00005a39

00007670 <_spi_m_async_init>:
{
    7670:	b538      	push	{r3, r4, r5, lr}
    7672:	4604      	mov	r4, r0
    7674:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    7676:	4b15      	ldr	r3, [pc, #84]	; (76cc <_spi_m_async_init+0x5c>)
    7678:	4798      	blx	r3
	if (rc < 0) {
    767a:	2800      	cmp	r0, #0
    767c:	db24      	blt.n	76c8 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    767e:	4621      	mov	r1, r4
    7680:	4628      	mov	r0, r5
    7682:	4b13      	ldr	r3, [pc, #76]	; (76d0 <_spi_m_async_init+0x60>)
    7684:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    7686:	2300      	movs	r3, #0
    7688:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    768a:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    768c:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    768e:	4628      	mov	r0, r5
    7690:	4b10      	ldr	r3, [pc, #64]	; (76d4 <_spi_m_async_init+0x64>)
    7692:	4798      	blx	r3
    7694:	1d01      	adds	r1, r0, #4
    7696:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7698:	2401      	movs	r4, #1
    769a:	f000 021f 	and.w	r2, r0, #31
    769e:	fa04 f202 	lsl.w	r2, r4, r2
    76a2:	0943      	lsrs	r3, r0, #5
    76a4:	009b      	lsls	r3, r3, #2
    76a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    76aa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    76ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    76b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    76b6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    76be:	3001      	adds	r0, #1
    76c0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    76c2:	4281      	cmp	r1, r0
    76c4:	d1e9      	bne.n	769a <_spi_m_async_init+0x2a>
	return ERR_NONE;
    76c6:	2000      	movs	r0, #0
}
    76c8:	bd38      	pop	{r3, r4, r5, pc}
    76ca:	bf00      	nop
    76cc:	000074e1 	.word	0x000074e1
    76d0:	00006981 	.word	0x00006981
    76d4:	000069e1 	.word	0x000069e1

000076d8 <_spi_m_async_enable>:
{
    76d8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    76da:	4604      	mov	r4, r0
    76dc:	b160      	cbz	r0, 76f8 <_spi_m_async_enable+0x20>
    76de:	6800      	ldr	r0, [r0, #0]
    76e0:	3000      	adds	r0, #0
    76e2:	bf18      	it	ne
    76e4:	2001      	movne	r0, #1
    76e6:	f640 22db 	movw	r2, #2779	; 0xadb
    76ea:	4904      	ldr	r1, [pc, #16]	; (76fc <_spi_m_async_enable+0x24>)
    76ec:	4b04      	ldr	r3, [pc, #16]	; (7700 <_spi_m_async_enable+0x28>)
    76ee:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    76f0:	6820      	ldr	r0, [r4, #0]
    76f2:	4b04      	ldr	r3, [pc, #16]	; (7704 <_spi_m_async_enable+0x2c>)
    76f4:	4798      	blx	r3
}
    76f6:	bd10      	pop	{r4, pc}
    76f8:	2000      	movs	r0, #0
    76fa:	e7f4      	b.n	76e6 <_spi_m_async_enable+0xe>
    76fc:	0000d8c0 	.word	0x0000d8c0
    7700:	00005a39 	.word	0x00005a39
    7704:	00006a19 	.word	0x00006a19

00007708 <_spi_m_async_set_mode>:
{
    7708:	b538      	push	{r3, r4, r5, lr}
    770a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    770c:	4604      	mov	r4, r0
    770e:	b168      	cbz	r0, 772c <_spi_m_async_set_mode+0x24>
    7710:	6800      	ldr	r0, [r0, #0]
    7712:	3000      	adds	r0, #0
    7714:	bf18      	it	ne
    7716:	2001      	movne	r0, #1
    7718:	f640 320c 	movw	r2, #2828	; 0xb0c
    771c:	4904      	ldr	r1, [pc, #16]	; (7730 <_spi_m_async_set_mode+0x28>)
    771e:	4b05      	ldr	r3, [pc, #20]	; (7734 <_spi_m_async_set_mode+0x2c>)
    7720:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    7722:	4629      	mov	r1, r5
    7724:	6820      	ldr	r0, [r4, #0]
    7726:	4b04      	ldr	r3, [pc, #16]	; (7738 <_spi_m_async_set_mode+0x30>)
    7728:	4798      	blx	r3
}
    772a:	bd38      	pop	{r3, r4, r5, pc}
    772c:	2000      	movs	r0, #0
    772e:	e7f3      	b.n	7718 <_spi_m_async_set_mode+0x10>
    7730:	0000d8c0 	.word	0x0000d8c0
    7734:	00005a39 	.word	0x00005a39
    7738:	00006a59 	.word	0x00006a59

0000773c <_spi_m_async_set_baudrate>:
{
    773c:	b538      	push	{r3, r4, r5, lr}
    773e:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    7740:	4605      	mov	r5, r0
    7742:	b198      	cbz	r0, 776c <_spi_m_async_set_baudrate+0x30>
    7744:	6800      	ldr	r0, [r0, #0]
    7746:	3000      	adds	r0, #0
    7748:	bf18      	it	ne
    774a:	2001      	movne	r0, #1
    774c:	f640 323b 	movw	r2, #2875	; 0xb3b
    7750:	4907      	ldr	r1, [pc, #28]	; (7770 <_spi_m_async_set_baudrate+0x34>)
    7752:	4b08      	ldr	r3, [pc, #32]	; (7774 <_spi_m_async_set_baudrate+0x38>)
    7754:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
    7756:	682b      	ldr	r3, [r5, #0]
    7758:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    775a:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    775e:	bf03      	ittte	eq
    7760:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7762:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    7764:	2000      	moveq	r0, #0
		return ERR_BUSY;
    7766:	f06f 0003 	mvnne.w	r0, #3
}
    776a:	bd38      	pop	{r3, r4, r5, pc}
    776c:	2000      	movs	r0, #0
    776e:	e7ed      	b.n	774c <_spi_m_async_set_baudrate+0x10>
    7770:	0000d8c0 	.word	0x0000d8c0
    7774:	00005a39 	.word	0x00005a39

00007778 <_spi_m_async_enable_tx>:
{
    7778:	b538      	push	{r3, r4, r5, lr}
    777a:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    777c:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    777e:	b160      	cbz	r0, 779a <_spi_m_async_enable_tx+0x22>
    7780:	1c20      	adds	r0, r4, #0
    7782:	bf18      	it	ne
    7784:	2001      	movne	r0, #1
    7786:	f640 32fe 	movw	r2, #3070	; 0xbfe
    778a:	4906      	ldr	r1, [pc, #24]	; (77a4 <_spi_m_async_enable_tx+0x2c>)
    778c:	4b06      	ldr	r3, [pc, #24]	; (77a8 <_spi_m_async_enable_tx+0x30>)
    778e:	4798      	blx	r3
	if (state) {
    7790:	b92d      	cbnz	r5, 779e <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7792:	2301      	movs	r3, #1
    7794:	7523      	strb	r3, [r4, #20]
}
    7796:	2000      	movs	r0, #0
    7798:	bd38      	pop	{r3, r4, r5, pc}
    779a:	2000      	movs	r0, #0
    779c:	e7f3      	b.n	7786 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    779e:	2301      	movs	r3, #1
    77a0:	75a3      	strb	r3, [r4, #22]
    77a2:	e7f8      	b.n	7796 <_spi_m_async_enable_tx+0x1e>
    77a4:	0000d8c0 	.word	0x0000d8c0
    77a8:	00005a39 	.word	0x00005a39

000077ac <_spi_m_async_enable_rx>:
{
    77ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77ae:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    77b0:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    77b2:	4e0c      	ldr	r6, [pc, #48]	; (77e4 <_spi_m_async_enable_rx+0x38>)
    77b4:	f640 4212 	movw	r2, #3090	; 0xc12
    77b8:	4631      	mov	r1, r6
    77ba:	3000      	adds	r0, #0
    77bc:	bf18      	it	ne
    77be:	2001      	movne	r0, #1
    77c0:	4d09      	ldr	r5, [pc, #36]	; (77e8 <_spi_m_async_enable_rx+0x3c>)
    77c2:	47a8      	blx	r5
	ASSERT(hw);
    77c4:	f640 4213 	movw	r2, #3091	; 0xc13
    77c8:	4631      	mov	r1, r6
    77ca:	1c20      	adds	r0, r4, #0
    77cc:	bf18      	it	ne
    77ce:	2001      	movne	r0, #1
    77d0:	47a8      	blx	r5
	if (state) {
    77d2:	b91f      	cbnz	r7, 77dc <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    77d4:	2304      	movs	r3, #4
    77d6:	7523      	strb	r3, [r4, #20]
}
    77d8:	2000      	movs	r0, #0
    77da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    77dc:	2304      	movs	r3, #4
    77de:	75a3      	strb	r3, [r4, #22]
    77e0:	e7fa      	b.n	77d8 <_spi_m_async_enable_rx+0x2c>
    77e2:	bf00      	nop
    77e4:	0000d8c0 	.word	0x0000d8c0
    77e8:	00005a39 	.word	0x00005a39

000077ec <_spi_m_async_enable_tx_complete>:
{
    77ec:	b538      	push	{r3, r4, r5, lr}
    77ee:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    77f0:	4604      	mov	r4, r0
    77f2:	b170      	cbz	r0, 7812 <_spi_m_async_enable_tx_complete+0x26>
    77f4:	6800      	ldr	r0, [r0, #0]
    77f6:	3000      	adds	r0, #0
    77f8:	bf18      	it	ne
    77fa:	2001      	movne	r0, #1
    77fc:	f640 4225 	movw	r2, #3109	; 0xc25
    7800:	4907      	ldr	r1, [pc, #28]	; (7820 <_spi_m_async_enable_tx_complete+0x34>)
    7802:	4b08      	ldr	r3, [pc, #32]	; (7824 <_spi_m_async_enable_tx_complete+0x38>)
    7804:	4798      	blx	r3
	if (state) {
    7806:	b935      	cbnz	r5, 7816 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7808:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    780a:	2202      	movs	r2, #2
    780c:	751a      	strb	r2, [r3, #20]
}
    780e:	2000      	movs	r0, #0
    7810:	bd38      	pop	{r3, r4, r5, pc}
    7812:	2000      	movs	r0, #0
    7814:	e7f2      	b.n	77fc <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7816:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7818:	2202      	movs	r2, #2
    781a:	759a      	strb	r2, [r3, #22]
    781c:	e7f7      	b.n	780e <_spi_m_async_enable_tx_complete+0x22>
    781e:	bf00      	nop
    7820:	0000d8c0 	.word	0x0000d8c0
    7824:	00005a39 	.word	0x00005a39

00007828 <_spi_m_async_write_one>:
{
    7828:	b538      	push	{r3, r4, r5, lr}
    782a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    782c:	4604      	mov	r4, r0
    782e:	b160      	cbz	r0, 784a <_spi_m_async_write_one+0x22>
    7830:	6800      	ldr	r0, [r0, #0]
    7832:	3000      	adds	r0, #0
    7834:	bf18      	it	ne
    7836:	2001      	movne	r0, #1
    7838:	f640 4237 	movw	r2, #3127	; 0xc37
    783c:	4904      	ldr	r1, [pc, #16]	; (7850 <_spi_m_async_write_one+0x28>)
    783e:	4b05      	ldr	r3, [pc, #20]	; (7854 <_spi_m_async_write_one+0x2c>)
    7840:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7842:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    7844:	629d      	str	r5, [r3, #40]	; 0x28
}
    7846:	2000      	movs	r0, #0
    7848:	bd38      	pop	{r3, r4, r5, pc}
    784a:	2000      	movs	r0, #0
    784c:	e7f4      	b.n	7838 <_spi_m_async_write_one+0x10>
    784e:	bf00      	nop
    7850:	0000d8c0 	.word	0x0000d8c0
    7854:	00005a39 	.word	0x00005a39

00007858 <_spi_m_async_read_one>:
{
    7858:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    785a:	4604      	mov	r4, r0
    785c:	b160      	cbz	r0, 7878 <_spi_m_async_read_one+0x20>
    785e:	6800      	ldr	r0, [r0, #0]
    7860:	3000      	adds	r0, #0
    7862:	bf18      	it	ne
    7864:	2001      	movne	r0, #1
    7866:	f640 4252 	movw	r2, #3154	; 0xc52
    786a:	4904      	ldr	r1, [pc, #16]	; (787c <_spi_m_async_read_one+0x24>)
    786c:	4b04      	ldr	r3, [pc, #16]	; (7880 <_spi_m_async_read_one+0x28>)
    786e:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7870:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7872:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    7874:	b280      	uxth	r0, r0
    7876:	bd10      	pop	{r4, pc}
    7878:	2000      	movs	r0, #0
    787a:	e7f4      	b.n	7866 <_spi_m_async_read_one+0xe>
    787c:	0000d8c0 	.word	0x0000d8c0
    7880:	00005a39 	.word	0x00005a39

00007884 <_spi_m_async_register_callback>:
{
    7884:	b570      	push	{r4, r5, r6, lr}
    7886:	460d      	mov	r5, r1
    7888:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    788a:	4604      	mov	r4, r0
    788c:	b168      	cbz	r0, 78aa <_spi_m_async_register_callback+0x26>
    788e:	2903      	cmp	r1, #3
    7890:	bf8c      	ite	hi
    7892:	2000      	movhi	r0, #0
    7894:	2001      	movls	r0, #1
    7896:	f640 426b 	movw	r2, #3179	; 0xc6b
    789a:	4905      	ldr	r1, [pc, #20]	; (78b0 <_spi_m_async_register_callback+0x2c>)
    789c:	4b05      	ldr	r3, [pc, #20]	; (78b4 <_spi_m_async_register_callback+0x30>)
    789e:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    78a0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    78a4:	60a6      	str	r6, [r4, #8]
}
    78a6:	2000      	movs	r0, #0
    78a8:	bd70      	pop	{r4, r5, r6, pc}
    78aa:	2000      	movs	r0, #0
    78ac:	e7f3      	b.n	7896 <_spi_m_async_register_callback+0x12>
    78ae:	bf00      	nop
    78b0:	0000d8c0 	.word	0x0000d8c0
    78b4:	00005a39 	.word	0x00005a39

000078b8 <_spi_m_async_set_irq_state>:
{
    78b8:	b570      	push	{r4, r5, r6, lr}
    78ba:	460c      	mov	r4, r1
    78bc:	4615      	mov	r5, r2
	ASSERT(device);
    78be:	4606      	mov	r6, r0
    78c0:	f640 42ac 	movw	r2, #3244	; 0xcac
    78c4:	4908      	ldr	r1, [pc, #32]	; (78e8 <_spi_m_async_set_irq_state+0x30>)
    78c6:	3000      	adds	r0, #0
    78c8:	bf18      	it	ne
    78ca:	2001      	movne	r0, #1
    78cc:	4b07      	ldr	r3, [pc, #28]	; (78ec <_spi_m_async_set_irq_state+0x34>)
    78ce:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    78d0:	2c03      	cmp	r4, #3
    78d2:	d000      	beq.n	78d6 <_spi_m_async_set_irq_state+0x1e>
    78d4:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    78d6:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    78d8:	b115      	cbz	r5, 78e0 <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    78da:	2280      	movs	r2, #128	; 0x80
    78dc:	759a      	strb	r2, [r3, #22]
}
    78de:	e7f9      	b.n	78d4 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    78e0:	2280      	movs	r2, #128	; 0x80
    78e2:	751a      	strb	r2, [r3, #20]
    78e4:	bd70      	pop	{r4, r5, r6, pc}
    78e6:	bf00      	nop
    78e8:	0000d8c0 	.word	0x0000d8c0
    78ec:	00005a39 	.word	0x00005a39

000078f0 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    78f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78f4:	4605      	mov	r5, r0
    78f6:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    78f8:	4608      	mov	r0, r1
    78fa:	4b52      	ldr	r3, [pc, #328]	; (7a44 <_spi_m_dma_init+0x154>)
    78fc:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    78fe:	2803      	cmp	r0, #3
    7900:	d00c      	beq.n	791c <_spi_m_dma_init+0x2c>
    7902:	2807      	cmp	r0, #7
    7904:	bf08      	it	eq
    7906:	2301      	moveq	r3, #1
    7908:	d009      	beq.n	791e <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    790a:	2d00      	cmp	r5, #0
    790c:	f000 8086 	beq.w	7a1c <_spi_m_dma_init+0x12c>
    7910:	2c00      	cmp	r4, #0
    7912:	f040 808d 	bne.w	7a30 <_spi_m_dma_init+0x140>
	return NULL;
    7916:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    7918:	2000      	movs	r0, #0
    791a:	e009      	b.n	7930 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    791c:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    791e:	4e4a      	ldr	r6, [pc, #296]	; (7a48 <_spi_m_dma_init+0x158>)
    7920:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    7924:	441e      	add	r6, r3
	ASSERT(dev && hw);
    7926:	2d00      	cmp	r5, #0
    7928:	d0f6      	beq.n	7918 <_spi_m_dma_init+0x28>
    792a:	2001      	movs	r0, #1
    792c:	2c00      	cmp	r4, #0
    792e:	d0f3      	beq.n	7918 <_spi_m_dma_init+0x28>
    7930:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7934:	4945      	ldr	r1, [pc, #276]	; (7a4c <_spi_m_dma_init+0x15c>)
    7936:	4b46      	ldr	r3, [pc, #280]	; (7a50 <_spi_m_dma_init+0x160>)
    7938:	4798      	blx	r3

	if (regs == NULL) {
    793a:	2e00      	cmp	r6, #0
    793c:	d06a      	beq.n	7a14 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    793e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7940:	f013 0f01 	tst.w	r3, #1
    7944:	d11d      	bne.n	7982 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7946:	6833      	ldr	r3, [r6, #0]
    7948:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    794c:	69e3      	ldr	r3, [r4, #28]
    794e:	f013 0f03 	tst.w	r3, #3
    7952:	d1fb      	bne.n	794c <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7954:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7956:	f013 0f02 	tst.w	r3, #2
    795a:	d00b      	beq.n	7974 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    795c:	6823      	ldr	r3, [r4, #0]
    795e:	f023 0302 	bic.w	r3, r3, #2
    7962:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7964:	69e3      	ldr	r3, [r4, #28]
    7966:	f013 0f03 	tst.w	r3, #3
    796a:	d1fb      	bne.n	7964 <_spi_m_dma_init+0x74>
    796c:	69e3      	ldr	r3, [r4, #28]
    796e:	f013 0f02 	tst.w	r3, #2
    7972:	d1fb      	bne.n	796c <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7974:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7978:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    797a:	69e3      	ldr	r3, [r4, #28]
    797c:	f013 0f03 	tst.w	r3, #3
    7980:	d1fb      	bne.n	797a <_spi_m_dma_init+0x8a>
    7982:	69e3      	ldr	r3, [r4, #28]
    7984:	f013 0f01 	tst.w	r3, #1
    7988:	d1fb      	bne.n	7982 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    798a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    798c:	f44f 6217 	mov.w	r2, #2416	; 0x970
    7990:	492e      	ldr	r1, [pc, #184]	; (7a4c <_spi_m_dma_init+0x15c>)
    7992:	1c20      	adds	r0, r4, #0
    7994:	bf18      	it	ne
    7996:	2001      	movne	r0, #1
    7998:	4b2d      	ldr	r3, [pc, #180]	; (7a50 <_spi_m_dma_init+0x160>)
    799a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    799c:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    799e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    79a2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    79a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    79a8:	69e3      	ldr	r3, [r4, #28]
    79aa:	f013 0f03 	tst.w	r3, #3
    79ae:	d1fb      	bne.n	79a8 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    79b0:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    79b2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    79b6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    79ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    79be:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    79c0:	69e3      	ldr	r3, [r4, #28]
    79c2:	f013 0f17 	tst.w	r3, #23
    79c6:	d1fb      	bne.n	79c0 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    79c8:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    79ca:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    79cc:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    79ce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    79d2:	f105 0818 	add.w	r8, r5, #24
    79d6:	4620      	mov	r0, r4
    79d8:	4b1e      	ldr	r3, [pc, #120]	; (7a54 <_spi_m_dma_init+0x164>)
    79da:	4798      	blx	r3
    79dc:	4601      	mov	r1, r0
    79de:	4640      	mov	r0, r8
    79e0:	4f1d      	ldr	r7, [pc, #116]	; (7a58 <_spi_m_dma_init+0x168>)
    79e2:	47b8      	blx	r7
	dev->resource->back                 = dev;
    79e4:	69ab      	ldr	r3, [r5, #24]
    79e6:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    79e8:	69ab      	ldr	r3, [r5, #24]
    79ea:	4a1c      	ldr	r2, [pc, #112]	; (7a5c <_spi_m_dma_init+0x16c>)
    79ec:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    79ee:	69ab      	ldr	r3, [r5, #24]
    79f0:	4e1b      	ldr	r6, [pc, #108]	; (7a60 <_spi_m_dma_init+0x170>)
    79f2:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    79f4:	4620      	mov	r0, r4
    79f6:	4b1b      	ldr	r3, [pc, #108]	; (7a64 <_spi_m_dma_init+0x174>)
    79f8:	4798      	blx	r3
    79fa:	4601      	mov	r1, r0
    79fc:	4640      	mov	r0, r8
    79fe:	47b8      	blx	r7
	dev->resource->back                 = dev;
    7a00:	69ab      	ldr	r3, [r5, #24]
    7a02:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    7a04:	69ab      	ldr	r3, [r5, #24]
    7a06:	4a18      	ldr	r2, [pc, #96]	; (7a68 <_spi_m_dma_init+0x178>)
    7a08:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    7a0a:	69ab      	ldr	r3, [r5, #24]
    7a0c:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    7a0e:	2000      	movs	r0, #0
    7a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    7a14:	f06f 000c 	mvn.w	r0, #12
    7a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7a1c:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7a20:	490a      	ldr	r1, [pc, #40]	; (7a4c <_spi_m_dma_init+0x15c>)
    7a22:	2000      	movs	r0, #0
    7a24:	4b0a      	ldr	r3, [pc, #40]	; (7a50 <_spi_m_dma_init+0x160>)
    7a26:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7a28:	f06f 000c 	mvn.w	r0, #12
    7a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    7a30:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    7a34:	4905      	ldr	r1, [pc, #20]	; (7a4c <_spi_m_dma_init+0x15c>)
    7a36:	2001      	movs	r0, #1
    7a38:	4b05      	ldr	r3, [pc, #20]	; (7a50 <_spi_m_dma_init+0x160>)
    7a3a:	4798      	blx	r3
		return ERR_INVALID_ARG;
    7a3c:	f06f 000c 	mvn.w	r0, #12
    7a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a44:	000068cd 	.word	0x000068cd
    7a48:	0000d89c 	.word	0x0000d89c
    7a4c:	0000d8c0 	.word	0x0000d8c0
    7a50:	00005a39 	.word	0x00005a39
    7a54:	00006aed 	.word	0x00006aed
    7a58:	000062d5 	.word	0x000062d5
    7a5c:	00006b01 	.word	0x00006b01
    7a60:	00006b19 	.word	0x00006b19
    7a64:	00006ad9 	.word	0x00006ad9
    7a68:	00006b0d 	.word	0x00006b0d

00007a6c <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    7a6c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    7a6e:	4604      	mov	r4, r0
    7a70:	b160      	cbz	r0, 7a8c <_spi_m_dma_enable+0x20>
    7a72:	6800      	ldr	r0, [r0, #0]
    7a74:	3000      	adds	r0, #0
    7a76:	bf18      	it	ne
    7a78:	2001      	movne	r0, #1
    7a7a:	f640 52c9 	movw	r2, #3529	; 0xdc9
    7a7e:	4904      	ldr	r1, [pc, #16]	; (7a90 <_spi_m_dma_enable+0x24>)
    7a80:	4b04      	ldr	r3, [pc, #16]	; (7a94 <_spi_m_dma_enable+0x28>)
    7a82:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    7a84:	6820      	ldr	r0, [r4, #0]
    7a86:	4b04      	ldr	r3, [pc, #16]	; (7a98 <_spi_m_dma_enable+0x2c>)
    7a88:	4798      	blx	r3
}
    7a8a:	bd10      	pop	{r4, pc}
    7a8c:	2000      	movs	r0, #0
    7a8e:	e7f4      	b.n	7a7a <_spi_m_dma_enable+0xe>
    7a90:	0000d8c0 	.word	0x0000d8c0
    7a94:	00005a39 	.word	0x00005a39
    7a98:	000069f5 	.word	0x000069f5

00007a9c <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    7a9c:	b570      	push	{r4, r5, r6, lr}
    7a9e:	4605      	mov	r5, r0
    7aa0:	4614      	mov	r4, r2
	switch (type) {
    7aa2:	2901      	cmp	r1, #1
    7aa4:	d00e      	beq.n	7ac4 <_spi_m_dma_register_callback+0x28>
    7aa6:	b111      	cbz	r1, 7aae <_spi_m_dma_register_callback+0x12>
    7aa8:	2902      	cmp	r1, #2
    7aaa:	d016      	beq.n	7ada <_spi_m_dma_register_callback+0x3e>
    7aac:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    7aae:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7ab0:	6800      	ldr	r0, [r0, #0]
    7ab2:	4b13      	ldr	r3, [pc, #76]	; (7b00 <_spi_m_dma_register_callback+0x64>)
    7ab4:	4798      	blx	r3
    7ab6:	1c22      	adds	r2, r4, #0
    7ab8:	bf18      	it	ne
    7aba:	2201      	movne	r2, #1
    7abc:	2100      	movs	r1, #0
    7abe:	4b11      	ldr	r3, [pc, #68]	; (7b04 <_spi_m_dma_register_callback+0x68>)
    7ac0:	4798      	blx	r3
		break;
    7ac2:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    7ac4:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    7ac6:	6800      	ldr	r0, [r0, #0]
    7ac8:	4b0f      	ldr	r3, [pc, #60]	; (7b08 <_spi_m_dma_register_callback+0x6c>)
    7aca:	4798      	blx	r3
    7acc:	1c22      	adds	r2, r4, #0
    7ace:	bf18      	it	ne
    7ad0:	2201      	movne	r2, #1
    7ad2:	2100      	movs	r1, #0
    7ad4:	4b0b      	ldr	r3, [pc, #44]	; (7b04 <_spi_m_dma_register_callback+0x68>)
    7ad6:	4798      	blx	r3
		break;
    7ad8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    7ada:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7adc:	6800      	ldr	r0, [r0, #0]
    7ade:	4b0a      	ldr	r3, [pc, #40]	; (7b08 <_spi_m_dma_register_callback+0x6c>)
    7ae0:	4798      	blx	r3
    7ae2:	3400      	adds	r4, #0
    7ae4:	bf18      	it	ne
    7ae6:	2401      	movne	r4, #1
    7ae8:	4622      	mov	r2, r4
    7aea:	2101      	movs	r1, #1
    7aec:	4e05      	ldr	r6, [pc, #20]	; (7b04 <_spi_m_dma_register_callback+0x68>)
    7aee:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    7af0:	6828      	ldr	r0, [r5, #0]
    7af2:	4b03      	ldr	r3, [pc, #12]	; (7b00 <_spi_m_dma_register_callback+0x64>)
    7af4:	4798      	blx	r3
    7af6:	4622      	mov	r2, r4
    7af8:	2101      	movs	r1, #1
    7afa:	47b0      	blx	r6
    7afc:	bd70      	pop	{r4, r5, r6, pc}
    7afe:	bf00      	nop
    7b00:	00006ad9 	.word	0x00006ad9
    7b04:	000061ad 	.word	0x000061ad
    7b08:	00006aed 	.word	0x00006aed

00007b0c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    7b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b10:	4605      	mov	r5, r0
    7b12:	4689      	mov	r9, r1
    7b14:	4617      	mov	r7, r2
    7b16:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    7b18:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7b1c:	4658      	mov	r0, fp
    7b1e:	4b46      	ldr	r3, [pc, #280]	; (7c38 <_spi_m_dma_transfer+0x12c>)
    7b20:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    7b22:	2803      	cmp	r0, #3
    7b24:	d053      	beq.n	7bce <_spi_m_dma_transfer+0xc2>
    7b26:	2807      	cmp	r0, #7
    7b28:	bf08      	it	eq
    7b2a:	2201      	moveq	r2, #1
    7b2c:	d050      	beq.n	7bd0 <_spi_m_dma_transfer+0xc4>
	return NULL;
    7b2e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    7b32:	4658      	mov	r0, fp
    7b34:	4b41      	ldr	r3, [pc, #260]	; (7c3c <_spi_m_dma_transfer+0x130>)
    7b36:	4798      	blx	r3
    7b38:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    7b3a:	4658      	mov	r0, fp
    7b3c:	4b40      	ldr	r3, [pc, #256]	; (7c40 <_spi_m_dma_transfer+0x134>)
    7b3e:	4798      	blx	r3
    7b40:	4604      	mov	r4, r0

	if (rxbuf) {
    7b42:	2f00      	cmp	r7, #0
    7b44:	d04b      	beq.n	7bde <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    7b46:	2d00      	cmp	r5, #0
    7b48:	d047      	beq.n	7bda <_spi_m_dma_transfer+0xce>
    7b4a:	f11b 0000 	adds.w	r0, fp, #0
    7b4e:	bf18      	it	ne
    7b50:	2001      	movne	r0, #1
    7b52:	f640 5213 	movw	r2, #3347	; 0xd13
    7b56:	493b      	ldr	r1, [pc, #236]	; (7c44 <_spi_m_dma_transfer+0x138>)
    7b58:	4b3b      	ldr	r3, [pc, #236]	; (7c48 <_spi_m_dma_transfer+0x13c>)
    7b5a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    7b5c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7b5e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7b60:	f013 0f04 	tst.w	r3, #4
    7b64:	d107      	bne.n	7b76 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    7b66:	6853      	ldr	r3, [r2, #4]
    7b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7b6c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7b6e:	69d3      	ldr	r3, [r2, #28]
    7b70:	f013 0f17 	tst.w	r3, #23
    7b74:	d1fb      	bne.n	7b6e <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7b76:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    7b78:	3128      	adds	r1, #40	; 0x28
    7b7a:	4630      	mov	r0, r6
    7b7c:	4b33      	ldr	r3, [pc, #204]	; (7c4c <_spi_m_dma_transfer+0x140>)
    7b7e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    7b80:	4639      	mov	r1, r7
    7b82:	4630      	mov	r0, r6
    7b84:	4b32      	ldr	r3, [pc, #200]	; (7c50 <_spi_m_dma_transfer+0x144>)
    7b86:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    7b88:	4641      	mov	r1, r8
    7b8a:	4630      	mov	r0, r6
    7b8c:	4b31      	ldr	r3, [pc, #196]	; (7c54 <_spi_m_dma_transfer+0x148>)
    7b8e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    7b90:	2100      	movs	r1, #0
    7b92:	4630      	mov	r0, r6
    7b94:	4b30      	ldr	r3, [pc, #192]	; (7c58 <_spi_m_dma_transfer+0x14c>)
    7b96:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    7b98:	f1b9 0f00 	cmp.w	r9, #0
    7b9c:	d039      	beq.n	7c12 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    7b9e:	4649      	mov	r1, r9
    7ba0:	4620      	mov	r0, r4
    7ba2:	4b2a      	ldr	r3, [pc, #168]	; (7c4c <_spi_m_dma_transfer+0x140>)
    7ba4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7ba6:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7ba8:	3128      	adds	r1, #40	; 0x28
    7baa:	4620      	mov	r0, r4
    7bac:	4b28      	ldr	r3, [pc, #160]	; (7c50 <_spi_m_dma_transfer+0x144>)
    7bae:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    7bb0:	2101      	movs	r1, #1
    7bb2:	4620      	mov	r0, r4
    7bb4:	4b29      	ldr	r3, [pc, #164]	; (7c5c <_spi_m_dma_transfer+0x150>)
    7bb6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7bb8:	4641      	mov	r1, r8
    7bba:	4620      	mov	r0, r4
    7bbc:	4b25      	ldr	r3, [pc, #148]	; (7c54 <_spi_m_dma_transfer+0x148>)
    7bbe:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    7bc0:	2100      	movs	r1, #0
    7bc2:	4620      	mov	r0, r4
    7bc4:	4b24      	ldr	r3, [pc, #144]	; (7c58 <_spi_m_dma_transfer+0x14c>)
    7bc6:	4798      	blx	r3

	return ERR_NONE;
}
    7bc8:	2000      	movs	r0, #0
    7bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    7bce:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    7bd0:	4b23      	ldr	r3, [pc, #140]	; (7c60 <_spi_m_dma_transfer+0x154>)
    7bd2:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    7bd6:	4492      	add	sl, r2
    7bd8:	e7ab      	b.n	7b32 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    7bda:	2000      	movs	r0, #0
    7bdc:	e7b9      	b.n	7b52 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    7bde:	b1b5      	cbz	r5, 7c0e <_spi_m_dma_transfer+0x102>
    7be0:	f11b 0000 	adds.w	r0, fp, #0
    7be4:	bf18      	it	ne
    7be6:	2001      	movne	r0, #1
    7be8:	f640 521a 	movw	r2, #3354	; 0xd1a
    7bec:	4915      	ldr	r1, [pc, #84]	; (7c44 <_spi_m_dma_transfer+0x138>)
    7bee:	4b16      	ldr	r3, [pc, #88]	; (7c48 <_spi_m_dma_transfer+0x13c>)
    7bf0:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    7bf2:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7bf4:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    7bf6:	f013 0f04 	tst.w	r3, #4
    7bfa:	d1cd      	bne.n	7b98 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    7bfc:	6853      	ldr	r3, [r2, #4]
    7bfe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    7c02:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7c04:	69d3      	ldr	r3, [r2, #28]
    7c06:	f013 0f17 	tst.w	r3, #23
    7c0a:	d1fb      	bne.n	7c04 <_spi_m_dma_transfer+0xf8>
    7c0c:	e7c4      	b.n	7b98 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    7c0e:	2000      	movs	r0, #0
    7c10:	e7ea      	b.n	7be8 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    7c12:	f10a 010e 	add.w	r1, sl, #14
    7c16:	4620      	mov	r0, r4
    7c18:	4b0c      	ldr	r3, [pc, #48]	; (7c4c <_spi_m_dma_transfer+0x140>)
    7c1a:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    7c1c:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    7c1e:	3128      	adds	r1, #40	; 0x28
    7c20:	4620      	mov	r0, r4
    7c22:	4b0b      	ldr	r3, [pc, #44]	; (7c50 <_spi_m_dma_transfer+0x144>)
    7c24:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    7c26:	2100      	movs	r1, #0
    7c28:	4620      	mov	r0, r4
    7c2a:	4b0c      	ldr	r3, [pc, #48]	; (7c5c <_spi_m_dma_transfer+0x150>)
    7c2c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    7c2e:	4641      	mov	r1, r8
    7c30:	4620      	mov	r0, r4
    7c32:	4b08      	ldr	r3, [pc, #32]	; (7c54 <_spi_m_dma_transfer+0x148>)
    7c34:	4798      	blx	r3
    7c36:	e7c3      	b.n	7bc0 <_spi_m_dma_transfer+0xb4>
    7c38:	000068cd 	.word	0x000068cd
    7c3c:	00006aed 	.word	0x00006aed
    7c40:	00006ad9 	.word	0x00006ad9
    7c44:	0000d8c0 	.word	0x0000d8c0
    7c48:	00005a39 	.word	0x00005a39
    7c4c:	00006211 	.word	0x00006211
    7c50:	00006201 	.word	0x00006201
    7c54:	0000623d 	.word	0x0000623d
    7c58:	00006295 	.word	0x00006295
    7c5c:	00006221 	.word	0x00006221
    7c60:	0000d89c 	.word	0x0000d89c

00007c64 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    7c64:	4b03      	ldr	r3, [pc, #12]	; (7c74 <_delay_init+0x10>)
    7c66:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    7c6a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    7c6c:	2205      	movs	r2, #5
    7c6e:	601a      	str	r2, [r3, #0]
    7c70:	4770      	bx	lr
    7c72:	bf00      	nop
    7c74:	e000e010 	.word	0xe000e010

00007c78 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    7c78:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    7c7a:	b303      	cbz	r3, 7cbe <_delay_cycles+0x46>
{
    7c7c:	b430      	push	{r4, r5}
    7c7e:	1e5d      	subs	r5, r3, #1
    7c80:	b2ed      	uxtb	r5, r5
	while (n--) {
    7c82:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    7c84:	4a12      	ldr	r2, [pc, #72]	; (7cd0 <_delay_cycles+0x58>)
    7c86:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    7c8a:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    7c8c:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7c8e:	6813      	ldr	r3, [r2, #0]
    7c90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7c94:	d0fb      	beq.n	7c8e <_delay_cycles+0x16>
	while (n--) {
    7c96:	3801      	subs	r0, #1
    7c98:	b2c0      	uxtb	r0, r0
    7c9a:	28ff      	cmp	r0, #255	; 0xff
    7c9c:	d1f5      	bne.n	7c8a <_delay_cycles+0x12>
    7c9e:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    7ca2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    7ca6:	3101      	adds	r1, #1
    7ca8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    7caa:	4b09      	ldr	r3, [pc, #36]	; (7cd0 <_delay_cycles+0x58>)
    7cac:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7cae:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7cb0:	461a      	mov	r2, r3
    7cb2:	6813      	ldr	r3, [r2, #0]
    7cb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7cb8:	d0fb      	beq.n	7cb2 <_delay_cycles+0x3a>
		;
}
    7cba:	bc30      	pop	{r4, r5}
    7cbc:	4770      	bx	lr
	SysTick->LOAD = buf;
    7cbe:	4b04      	ldr	r3, [pc, #16]	; (7cd0 <_delay_cycles+0x58>)
    7cc0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    7cc2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    7cc4:	461a      	mov	r2, r3
    7cc6:	6813      	ldr	r3, [r2, #0]
    7cc8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7ccc:	d0fb      	beq.n	7cc6 <_delay_cycles+0x4e>
    7cce:	4770      	bx	lr
    7cd0:	e000e010 	.word	0xe000e010

00007cd4 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7cd4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7cd6:	6813      	ldr	r3, [r2, #0]
    7cd8:	f043 0302 	orr.w	r3, r3, #2
    7cdc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7cde:	6913      	ldr	r3, [r2, #16]
    7ce0:	f013 0f03 	tst.w	r3, #3
    7ce4:	d1fb      	bne.n	7cde <_tc_timer_start+0xa>
}
    7ce6:	4770      	bx	lr

00007ce8 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7ce8:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7cea:	6813      	ldr	r3, [r2, #0]
    7cec:	f023 0302 	bic.w	r3, r3, #2
    7cf0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7cf2:	6913      	ldr	r3, [r2, #16]
    7cf4:	f013 0f03 	tst.w	r3, #3
    7cf8:	d1fb      	bne.n	7cf2 <_tc_timer_stop+0xa>
}
    7cfa:	4770      	bx	lr

00007cfc <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    7cfc:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7cfe:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7d00:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d04:	2a02      	cmp	r2, #2
    7d06:	d00a      	beq.n	7d1e <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d08:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d0a:	f012 0f0c 	tst.w	r2, #12
    7d0e:	d10c      	bne.n	7d2a <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7d10:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7d12:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d14:	691a      	ldr	r2, [r3, #16]
    7d16:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7d1a:	d1fb      	bne.n	7d14 <_tc_timer_set_period+0x18>
    7d1c:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7d1e:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d20:	691a      	ldr	r2, [r3, #16]
    7d22:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7d26:	d1fb      	bne.n	7d20 <_tc_timer_set_period+0x24>
    7d28:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d2a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7d2c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d30:	2a01      	cmp	r2, #1
    7d32:	d000      	beq.n	7d36 <_tc_timer_set_period+0x3a>
    7d34:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7d36:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    7d38:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d3a:	691a      	ldr	r2, [r3, #16]
    7d3c:	f012 0f20 	tst.w	r2, #32
    7d40:	d1fb      	bne.n	7d3a <_tc_timer_set_period+0x3e>
    7d42:	e7f7      	b.n	7d34 <_tc_timer_set_period+0x38>

00007d44 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    7d44:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d46:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7d48:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d4c:	2a02      	cmp	r2, #2
    7d4e:	d00a      	beq.n	7d66 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d50:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d52:	f012 0f0c 	tst.w	r2, #12
    7d56:	d10c      	bne.n	7d72 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d58:	691a      	ldr	r2, [r3, #16]
    7d5a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7d5e:	d1fb      	bne.n	7d58 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7d60:	8b98      	ldrh	r0, [r3, #28]
    7d62:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    7d64:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d66:	691a      	ldr	r2, [r3, #16]
    7d68:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    7d6c:	d1fb      	bne.n	7d66 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7d6e:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    7d70:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d72:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7d74:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d78:	2a01      	cmp	r2, #1
    7d7a:	d001      	beq.n	7d80 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    7d7c:	2000      	movs	r0, #0
}
    7d7e:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d80:	691a      	ldr	r2, [r3, #16]
    7d82:	f012 0f20 	tst.w	r2, #32
    7d86:	d1fb      	bne.n	7d80 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    7d88:	7ed8      	ldrb	r0, [r3, #27]
    7d8a:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    7d8c:	4770      	bx	lr

00007d8e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7d8e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7d90:	6913      	ldr	r3, [r2, #16]
    7d92:	f013 0f03 	tst.w	r3, #3
    7d96:	d1fb      	bne.n	7d90 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d98:	6810      	ldr	r0, [r2, #0]
}
    7d9a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7d9e:	4770      	bx	lr

00007da0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7da0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    7da2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7da4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7da6:	f012 0f01 	tst.w	r2, #1
    7daa:	d100      	bne.n	7dae <tc_interrupt_handler+0xe>
    7dac:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7dae:	2201      	movs	r2, #1
    7db0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    7db2:	6803      	ldr	r3, [r0, #0]
    7db4:	4798      	blx	r3
	}
}
    7db6:	e7f9      	b.n	7dac <tc_interrupt_handler+0xc>

00007db8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7db8:	b570      	push	{r4, r5, r6, lr}
    7dba:	b088      	sub	sp, #32
    7dbc:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7dbe:	466c      	mov	r4, sp
    7dc0:	4d19      	ldr	r5, [pc, #100]	; (7e28 <get_tc_index+0x70>)
    7dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7dc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7dce:	9b00      	ldr	r3, [sp, #0]
    7dd0:	42b3      	cmp	r3, r6
    7dd2:	d00c      	beq.n	7dee <get_tc_index+0x36>
    7dd4:	4630      	mov	r0, r6
    7dd6:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7dd8:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7dda:	f852 1b04 	ldr.w	r1, [r2], #4
    7dde:	4281      	cmp	r1, r0
    7de0:	d006      	beq.n	7df0 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7de2:	3301      	adds	r3, #1
    7de4:	2b08      	cmp	r3, #8
    7de6:	d1f8      	bne.n	7dda <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7de8:	2000      	movs	r0, #0
			return i;
    7dea:	b240      	sxtb	r0, r0
    7dec:	e013      	b.n	7e16 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7dee:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    7df0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7df4:	d015      	beq.n	7e22 <get_tc_index+0x6a>
    7df6:	2b01      	cmp	r3, #1
    7df8:	d00f      	beq.n	7e1a <get_tc_index+0x62>
    7dfa:	2b02      	cmp	r3, #2
    7dfc:	d00f      	beq.n	7e1e <get_tc_index+0x66>
    7dfe:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7e00:	bf08      	it	eq
    7e02:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    7e04:	d0f1      	beq.n	7dea <get_tc_index+0x32>
	ASSERT(false);
    7e06:	f240 1267 	movw	r2, #359	; 0x167
    7e0a:	4908      	ldr	r1, [pc, #32]	; (7e2c <get_tc_index+0x74>)
    7e0c:	2000      	movs	r0, #0
    7e0e:	4b08      	ldr	r3, [pc, #32]	; (7e30 <get_tc_index+0x78>)
    7e10:	4798      	blx	r3
	return -1;
    7e12:	f04f 30ff 	mov.w	r0, #4294967295
}
    7e16:	b008      	add	sp, #32
    7e18:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7e1a:	2001      	movs	r0, #1
    7e1c:	e7e5      	b.n	7dea <get_tc_index+0x32>
    7e1e:	2002      	movs	r0, #2
    7e20:	e7e3      	b.n	7dea <get_tc_index+0x32>
    7e22:	2000      	movs	r0, #0
    7e24:	e7e1      	b.n	7dea <get_tc_index+0x32>
    7e26:	bf00      	nop
    7e28:	0000d8dc 	.word	0x0000d8dc
    7e2c:	0000d94c 	.word	0x0000d94c
    7e30:	00005a39 	.word	0x00005a39

00007e34 <_tc_timer_init>:
{
    7e34:	b570      	push	{r4, r5, r6, lr}
    7e36:	4606      	mov	r6, r0
    7e38:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    7e3a:	4608      	mov	r0, r1
    7e3c:	4b71      	ldr	r3, [pc, #452]	; (8004 <_tc_timer_init+0x1d0>)
    7e3e:	4798      	blx	r3
    7e40:	4605      	mov	r5, r0
	device->hw = hw;
    7e42:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7e44:	22a0      	movs	r2, #160	; 0xa0
    7e46:	4970      	ldr	r1, [pc, #448]	; (8008 <_tc_timer_init+0x1d4>)
    7e48:	2001      	movs	r0, #1
    7e4a:	4b70      	ldr	r3, [pc, #448]	; (800c <_tc_timer_init+0x1d8>)
    7e4c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7e4e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7e50:	f013 0f01 	tst.w	r3, #1
    7e54:	d119      	bne.n	7e8a <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e56:	6923      	ldr	r3, [r4, #16]
    7e58:	f013 0f03 	tst.w	r3, #3
    7e5c:	d1fb      	bne.n	7e56 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7e5e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7e60:	f013 0f02 	tst.w	r3, #2
    7e64:	d00b      	beq.n	7e7e <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7e66:	6823      	ldr	r3, [r4, #0]
    7e68:	f023 0302 	bic.w	r3, r3, #2
    7e6c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e6e:	6923      	ldr	r3, [r4, #16]
    7e70:	f013 0f03 	tst.w	r3, #3
    7e74:	d1fb      	bne.n	7e6e <_tc_timer_init+0x3a>
    7e76:	6923      	ldr	r3, [r4, #16]
    7e78:	f013 0f02 	tst.w	r3, #2
    7e7c:	d1fb      	bne.n	7e76 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7e7e:	2301      	movs	r3, #1
    7e80:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e82:	6923      	ldr	r3, [r4, #16]
    7e84:	f013 0f03 	tst.w	r3, #3
    7e88:	d1fb      	bne.n	7e82 <_tc_timer_init+0x4e>
    7e8a:	6923      	ldr	r3, [r4, #16]
    7e8c:	f013 0f01 	tst.w	r3, #1
    7e90:	d1fb      	bne.n	7e8a <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7e92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7e96:	4a5e      	ldr	r2, [pc, #376]	; (8010 <_tc_timer_init+0x1dc>)
    7e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7e9e:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ea0:	6923      	ldr	r3, [r4, #16]
    7ea2:	f013 0f03 	tst.w	r3, #3
    7ea6:	d1fb      	bne.n	7ea0 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7ea8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7eac:	4958      	ldr	r1, [pc, #352]	; (8010 <_tc_timer_init+0x1dc>)
    7eae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7eb2:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7eb6:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7eba:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7ebc:	2301      	movs	r3, #1
    7ebe:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7ec0:	f002 020c 	and.w	r2, r2, #12
    7ec4:	2a08      	cmp	r2, #8
    7ec6:	d056      	beq.n	7f76 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7ec8:	2a00      	cmp	r2, #0
    7eca:	d16b      	bne.n	7fa4 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7ecc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7ed0:	4a4f      	ldr	r2, [pc, #316]	; (8010 <_tc_timer_init+0x1dc>)
    7ed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7ed6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7ed8:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7eda:	6923      	ldr	r3, [r4, #16]
    7edc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ee0:	d1fb      	bne.n	7eda <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7ee2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7ee6:	4a4a      	ldr	r2, [pc, #296]	; (8010 <_tc_timer_init+0x1dc>)
    7ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7eec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7eee:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7ef0:	6923      	ldr	r3, [r4, #16]
    7ef2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7ef6:	d1fb      	bne.n	7ef0 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7ef8:	2301      	movs	r3, #1
    7efa:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    7efc:	4b45      	ldr	r3, [pc, #276]	; (8014 <_tc_timer_init+0x1e0>)
    7efe:	429c      	cmp	r4, r3
    7f00:	d077      	beq.n	7ff2 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    7f02:	4b45      	ldr	r3, [pc, #276]	; (8018 <_tc_timer_init+0x1e4>)
    7f04:	429c      	cmp	r4, r3
    7f06:	d077      	beq.n	7ff8 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    7f08:	4b44      	ldr	r3, [pc, #272]	; (801c <_tc_timer_init+0x1e8>)
    7f0a:	429c      	cmp	r4, r3
    7f0c:	d077      	beq.n	7ffe <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    7f0e:	4b44      	ldr	r3, [pc, #272]	; (8020 <_tc_timer_init+0x1ec>)
    7f10:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    7f12:	bf04      	itt	eq
    7f14:	4b43      	ldreq	r3, [pc, #268]	; (8024 <_tc_timer_init+0x1f0>)
    7f16:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    7f18:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7f1c:	4a3c      	ldr	r2, [pc, #240]	; (8010 <_tc_timer_init+0x1dc>)
    7f1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7f22:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7f26:	2b00      	cmp	r3, #0
    7f28:	db23      	blt.n	7f72 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f2a:	095a      	lsrs	r2, r3, #5
    7f2c:	f003 031f 	and.w	r3, r3, #31
    7f30:	2101      	movs	r1, #1
    7f32:	fa01 f303 	lsl.w	r3, r1, r3
    7f36:	3220      	adds	r2, #32
    7f38:	493b      	ldr	r1, [pc, #236]	; (8028 <_tc_timer_init+0x1f4>)
    7f3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7f42:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7f46:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7f4a:	4b31      	ldr	r3, [pc, #196]	; (8010 <_tc_timer_init+0x1dc>)
    7f4c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7f50:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    7f54:	2b00      	cmp	r3, #0
    7f56:	db0c      	blt.n	7f72 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f58:	0959      	lsrs	r1, r3, #5
    7f5a:	f003 031f 	and.w	r3, r3, #31
    7f5e:	2201      	movs	r2, #1
    7f60:	fa02 f303 	lsl.w	r3, r2, r3
    7f64:	4a30      	ldr	r2, [pc, #192]	; (8028 <_tc_timer_init+0x1f4>)
    7f66:	f101 0060 	add.w	r0, r1, #96	; 0x60
    7f6a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    7f72:	2000      	movs	r0, #0
    7f74:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7f76:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7f7a:	4a25      	ldr	r2, [pc, #148]	; (8010 <_tc_timer_init+0x1dc>)
    7f7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7f82:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f84:	6923      	ldr	r3, [r4, #16]
    7f86:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7f8a:	d1fb      	bne.n	7f84 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7f8c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7f90:	4a1f      	ldr	r2, [pc, #124]	; (8010 <_tc_timer_init+0x1dc>)
    7f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7f98:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7f9a:	6923      	ldr	r3, [r4, #16]
    7f9c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7fa0:	d1fb      	bne.n	7f9a <_tc_timer_init+0x166>
    7fa2:	e7a9      	b.n	7ef8 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7fa4:	2a04      	cmp	r2, #4
    7fa6:	d1a7      	bne.n	7ef8 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7fa8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7fac:	4a18      	ldr	r2, [pc, #96]	; (8010 <_tc_timer_init+0x1dc>)
    7fae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7fb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7fb6:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7fb8:	6923      	ldr	r3, [r4, #16]
    7fba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7fbe:	d1fb      	bne.n	7fb8 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7fc0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7fc4:	4a12      	ldr	r2, [pc, #72]	; (8010 <_tc_timer_init+0x1dc>)
    7fc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7fca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7fce:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7fd0:	6923      	ldr	r3, [r4, #16]
    7fd2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7fd6:	d1fb      	bne.n	7fd0 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7fd8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7fdc:	4a0c      	ldr	r2, [pc, #48]	; (8010 <_tc_timer_init+0x1dc>)
    7fde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7fe2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    7fe6:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7fe8:	6923      	ldr	r3, [r4, #16]
    7fea:	f013 0f20 	tst.w	r3, #32
    7fee:	d1fb      	bne.n	7fe8 <_tc_timer_init+0x1b4>
    7ff0:	e782      	b.n	7ef8 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    7ff2:	4b0c      	ldr	r3, [pc, #48]	; (8024 <_tc_timer_init+0x1f0>)
    7ff4:	601e      	str	r6, [r3, #0]
    7ff6:	e78a      	b.n	7f0e <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    7ff8:	4b0a      	ldr	r3, [pc, #40]	; (8024 <_tc_timer_init+0x1f0>)
    7ffa:	605e      	str	r6, [r3, #4]
    7ffc:	e78c      	b.n	7f18 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    7ffe:	4b09      	ldr	r3, [pc, #36]	; (8024 <_tc_timer_init+0x1f0>)
    8000:	609e      	str	r6, [r3, #8]
    8002:	e789      	b.n	7f18 <_tc_timer_init+0xe4>
    8004:	00007db9 	.word	0x00007db9
    8008:	0000d94c 	.word	0x0000d94c
    800c:	00005a39 	.word	0x00005a39
    8010:	0000d8dc 	.word	0x0000d8dc
    8014:	40003800 	.word	0x40003800
    8018:	40003c00 	.word	0x40003c00
    801c:	4101a000 	.word	0x4101a000
    8020:	4101c000 	.word	0x4101c000
    8024:	20000998 	.word	0x20000998
    8028:	e000e100 	.word	0xe000e100

0000802c <_tc_timer_deinit>:
{
    802c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    802e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    8030:	4620      	mov	r0, r4
    8032:	4b18      	ldr	r3, [pc, #96]	; (8094 <_tc_timer_deinit+0x68>)
    8034:	4798      	blx	r3
    8036:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    8038:	22cd      	movs	r2, #205	; 0xcd
    803a:	4917      	ldr	r1, [pc, #92]	; (8098 <_tc_timer_deinit+0x6c>)
    803c:	2001      	movs	r0, #1
    803e:	4b17      	ldr	r3, [pc, #92]	; (809c <_tc_timer_deinit+0x70>)
    8040:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8042:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8046:	4b16      	ldr	r3, [pc, #88]	; (80a0 <_tc_timer_deinit+0x74>)
    8048:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    804c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    8050:	2b00      	cmp	r3, #0
    8052:	db0d      	blt.n	8070 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8054:	095a      	lsrs	r2, r3, #5
    8056:	f003 031f 	and.w	r3, r3, #31
    805a:	2101      	movs	r1, #1
    805c:	fa01 f303 	lsl.w	r3, r1, r3
    8060:	3220      	adds	r2, #32
    8062:	4910      	ldr	r1, [pc, #64]	; (80a4 <_tc_timer_deinit+0x78>)
    8064:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8068:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    806c:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8070:	6823      	ldr	r3, [r4, #0]
    8072:	f023 0302 	bic.w	r3, r3, #2
    8076:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8078:	6923      	ldr	r3, [r4, #16]
    807a:	f013 0f03 	tst.w	r3, #3
    807e:	d1fb      	bne.n	8078 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8080:	6823      	ldr	r3, [r4, #0]
    8082:	f043 0301 	orr.w	r3, r3, #1
    8086:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8088:	6923      	ldr	r3, [r4, #16]
    808a:	f013 0f01 	tst.w	r3, #1
    808e:	d1fb      	bne.n	8088 <_tc_timer_deinit+0x5c>
}
    8090:	bd38      	pop	{r3, r4, r5, pc}
    8092:	bf00      	nop
    8094:	00007db9 	.word	0x00007db9
    8098:	0000d94c 	.word	0x0000d94c
    809c:	00005a39 	.word	0x00005a39
    80a0:	0000d8dc 	.word	0x0000d8dc
    80a4:	e000e100 	.word	0xe000e100

000080a8 <_tc_timer_set_irq>:
{
    80a8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    80aa:	68c0      	ldr	r0, [r0, #12]
    80ac:	4b09      	ldr	r3, [pc, #36]	; (80d4 <_tc_timer_set_irq+0x2c>)
    80ae:	4798      	blx	r3
    80b0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    80b2:	f44f 7291 	mov.w	r2, #290	; 0x122
    80b6:	4908      	ldr	r1, [pc, #32]	; (80d8 <_tc_timer_set_irq+0x30>)
    80b8:	2001      	movs	r0, #1
    80ba:	4b08      	ldr	r3, [pc, #32]	; (80dc <_tc_timer_set_irq+0x34>)
    80bc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    80be:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    80c2:	4b07      	ldr	r3, [pc, #28]	; (80e0 <_tc_timer_set_irq+0x38>)
    80c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    80c8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    80cc:	4b05      	ldr	r3, [pc, #20]	; (80e4 <_tc_timer_set_irq+0x3c>)
    80ce:	4798      	blx	r3
    80d0:	bd10      	pop	{r4, pc}
    80d2:	bf00      	nop
    80d4:	00007db9 	.word	0x00007db9
    80d8:	0000d94c 	.word	0x0000d94c
    80dc:	00005a39 	.word	0x00005a39
    80e0:	0000d8dc 	.word	0x0000d8dc
    80e4:	00005fcd 	.word	0x00005fcd

000080e8 <_tc_get_timer>:
}
    80e8:	4800      	ldr	r0, [pc, #0]	; (80ec <_tc_get_timer+0x4>)
    80ea:	4770      	bx	lr
    80ec:	20000378 	.word	0x20000378

000080f0 <TC0_Handler>:
{
    80f0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    80f2:	4b02      	ldr	r3, [pc, #8]	; (80fc <TC0_Handler+0xc>)
    80f4:	6818      	ldr	r0, [r3, #0]
    80f6:	4b02      	ldr	r3, [pc, #8]	; (8100 <TC0_Handler+0x10>)
    80f8:	4798      	blx	r3
    80fa:	bd08      	pop	{r3, pc}
    80fc:	20000998 	.word	0x20000998
    8100:	00007da1 	.word	0x00007da1

00008104 <TC1_Handler>:
{
    8104:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    8106:	4b02      	ldr	r3, [pc, #8]	; (8110 <TC1_Handler+0xc>)
    8108:	6858      	ldr	r0, [r3, #4]
    810a:	4b02      	ldr	r3, [pc, #8]	; (8114 <TC1_Handler+0x10>)
    810c:	4798      	blx	r3
    810e:	bd08      	pop	{r3, pc}
    8110:	20000998 	.word	0x20000998
    8114:	00007da1 	.word	0x00007da1

00008118 <TC2_Handler>:
{
    8118:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    811a:	4b02      	ldr	r3, [pc, #8]	; (8124 <TC2_Handler+0xc>)
    811c:	6898      	ldr	r0, [r3, #8]
    811e:	4b02      	ldr	r3, [pc, #8]	; (8128 <TC2_Handler+0x10>)
    8120:	4798      	blx	r3
    8122:	bd08      	pop	{r3, pc}
    8124:	20000998 	.word	0x20000998
    8128:	00007da1 	.word	0x00007da1

0000812c <TC3_Handler>:
{
    812c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    812e:	4b02      	ldr	r3, [pc, #8]	; (8138 <TC3_Handler+0xc>)
    8130:	68d8      	ldr	r0, [r3, #12]
    8132:	4b02      	ldr	r3, [pc, #8]	; (813c <TC3_Handler+0x10>)
    8134:	4798      	blx	r3
    8136:	bd08      	pop	{r3, pc}
    8138:	20000998 	.word	0x20000998
    813c:	00007da1 	.word	0x00007da1

00008140 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    8140:	2000      	movs	r0, #0
    8142:	4770      	bx	lr

00008144 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8144:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8146:	7c83      	ldrb	r3, [r0, #18]
    8148:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    814c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    814e:	f002 0107 	and.w	r1, r2, #7
    8152:	2901      	cmp	r1, #1
    8154:	d00b      	beq.n	816e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8156:	015a      	lsls	r2, r3, #5
    8158:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    815c:	2110      	movs	r1, #16
    815e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8162:	015b      	lsls	r3, r3, #5
    8164:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8168:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    816c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    816e:	f012 0f40 	tst.w	r2, #64	; 0x40
    8172:	d00c      	beq.n	818e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    8174:	7cc2      	ldrb	r2, [r0, #19]
    8176:	f36f 1286 	bfc	r2, #6, #1
    817a:	74c2      	strb	r2, [r0, #19]
    817c:	015a      	lsls	r2, r3, #5
    817e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8182:	2180      	movs	r1, #128	; 0x80
    8184:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8188:	2140      	movs	r1, #64	; 0x40
    818a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    818e:	7cc2      	ldrb	r2, [r0, #19]
    8190:	f36f 02c3 	bfc	r2, #3, #1
    8194:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    8196:	490a      	ldr	r1, [pc, #40]	; (81c0 <_usb_d_dev_handle_setup+0x7c>)
    8198:	015a      	lsls	r2, r3, #5
    819a:	188c      	adds	r4, r1, r2
    819c:	2500      	movs	r5, #0
    819e:	72a5      	strb	r5, [r4, #10]
    81a0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    81a2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    81a6:	246f      	movs	r4, #111	; 0x6f
    81a8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    81ac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    81b0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    81b4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    81b8:	7c80      	ldrb	r0, [r0, #18]
    81ba:	4798      	blx	r3
    81bc:	bd38      	pop	{r3, r4, r5, pc}
    81be:	bf00      	nop
    81c0:	200009a8 	.word	0x200009a8

000081c4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    81c4:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    81c6:	2320      	movs	r3, #32
    81c8:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    81cc:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    81ce:	7c83      	ldrb	r3, [r0, #18]
    81d0:	f003 030f 	and.w	r3, r3, #15
    81d4:	015b      	lsls	r3, r3, #5
    81d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    81da:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    81de:	4b04      	ldr	r3, [pc, #16]	; (81f0 <_usb_d_dev_handle_stall+0x2c>)
    81e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    81e4:	6882      	ldr	r2, [r0, #8]
    81e6:	2101      	movs	r1, #1
    81e8:	7c80      	ldrb	r0, [r0, #18]
    81ea:	4798      	blx	r3
    81ec:	bd08      	pop	{r3, pc}
    81ee:	bf00      	nop
    81f0:	200009a8 	.word	0x200009a8

000081f4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    81f4:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    81f6:	7c84      	ldrb	r4, [r0, #18]
    81f8:	2cff      	cmp	r4, #255	; 0xff
    81fa:	d003      	beq.n	8204 <_usb_d_dev_trans_done+0x10>
    81fc:	7cc3      	ldrb	r3, [r0, #19]
    81fe:	f013 0f40 	tst.w	r3, #64	; 0x40
    8202:	d100      	bne.n	8206 <_usb_d_dev_trans_done+0x12>
    8204:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    8206:	7cc2      	ldrb	r2, [r0, #19]
    8208:	f36f 1286 	bfc	r2, #6, #1
    820c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    820e:	4a03      	ldr	r2, [pc, #12]	; (821c <_usb_d_dev_trans_done+0x28>)
    8210:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    8214:	6882      	ldr	r2, [r0, #8]
    8216:	4620      	mov	r0, r4
    8218:	47a8      	blx	r5
    821a:	e7f3      	b.n	8204 <_usb_d_dev_trans_done+0x10>
    821c:	200009a8 	.word	0x200009a8

00008220 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    8220:	b530      	push	{r4, r5, lr}
    8222:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8224:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    8226:	2425      	movs	r4, #37	; 0x25
    8228:	f88d 4004 	strb.w	r4, [sp, #4]
    822c:	244a      	movs	r4, #74	; 0x4a
    822e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    8232:	2bff      	cmp	r3, #255	; 0xff
    8234:	d01e      	beq.n	8274 <_usb_d_dev_trans_stop+0x54>
    8236:	7cc4      	ldrb	r4, [r0, #19]
    8238:	f014 0f40 	tst.w	r4, #64	; 0x40
    823c:	d01a      	beq.n	8274 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    823e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    8242:	b1c9      	cbz	r1, 8278 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8244:	0163      	lsls	r3, r4, #5
    8246:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    824a:	2580      	movs	r5, #128	; 0x80
    824c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    8250:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    8252:	a902      	add	r1, sp, #8
    8254:	440b      	add	r3, r1
    8256:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    825a:	0163      	lsls	r3, r4, #5
    825c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8260:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8264:	0163      	lsls	r3, r4, #5
    8266:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    826a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    826e:	4611      	mov	r1, r2
    8270:	4b05      	ldr	r3, [pc, #20]	; (8288 <_usb_d_dev_trans_stop+0x68>)
    8272:	4798      	blx	r3
}
    8274:	b003      	add	sp, #12
    8276:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8278:	0163      	lsls	r3, r4, #5
    827a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    827e:	2540      	movs	r5, #64	; 0x40
    8280:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    8284:	e7e4      	b.n	8250 <_usb_d_dev_trans_stop+0x30>
    8286:	bf00      	nop
    8288:	000081f5 	.word	0x000081f5

0000828c <_usb_d_dev_handle_trfail>:
{
    828c:	b530      	push	{r4, r5, lr}
    828e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8290:	7c83      	ldrb	r3, [r0, #18]
    8292:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8296:	2204      	movs	r2, #4
    8298:	f88d 2004 	strb.w	r2, [sp, #4]
    829c:	2208      	movs	r2, #8
    829e:	f88d 2005 	strb.w	r2, [sp, #5]
    82a2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    82a4:	460c      	mov	r4, r1
    82a6:	b391      	cbz	r1, 830e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    82a8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    82ac:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    82b0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    82b4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    82b8:	4a32      	ldr	r2, [pc, #200]	; (8384 <_usb_d_dev_handle_trfail+0xf8>)
    82ba:	440a      	add	r2, r1
    82bc:	7a91      	ldrb	r1, [r2, #10]
    82be:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    82c0:	2d02      	cmp	r5, #2
    82c2:	d02c      	beq.n	831e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    82c4:	f011 0f02 	tst.w	r1, #2
    82c8:	d045      	beq.n	8356 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    82ca:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    82cc:	7a91      	ldrb	r1, [r2, #10]
    82ce:	f36f 0141 	bfc	r1, #1, #1
    82d2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    82d4:	aa02      	add	r2, sp, #8
    82d6:	4422      	add	r2, r4
    82d8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    82dc:	015a      	lsls	r2, r3, #5
    82de:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    82e2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    82e6:	015b      	lsls	r3, r3, #5
    82e8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    82ec:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    82f0:	f005 0307 	and.w	r3, r5, #7
    82f4:	2b01      	cmp	r3, #1
    82f6:	d143      	bne.n	8380 <_usb_d_dev_handle_trfail+0xf4>
    82f8:	7cc3      	ldrb	r3, [r0, #19]
    82fa:	f013 0f40 	tst.w	r3, #64	; 0x40
    82fe:	d03f      	beq.n	8380 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8300:	09d9      	lsrs	r1, r3, #7
    8302:	428c      	cmp	r4, r1
    8304:	d03c      	beq.n	8380 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8306:	2200      	movs	r2, #0
    8308:	4b1f      	ldr	r3, [pc, #124]	; (8388 <_usb_d_dev_handle_trfail+0xfc>)
    830a:	4798      	blx	r3
    830c:	e038      	b.n	8380 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    830e:	0159      	lsls	r1, r3, #5
    8310:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    8314:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8318:	f005 0507 	and.w	r5, r5, #7
    831c:	e7ca      	b.n	82b4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    831e:	f011 0f01 	tst.w	r1, #1
    8322:	d0cf      	beq.n	82c4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8324:	7a91      	ldrb	r1, [r2, #10]
    8326:	f36f 0100 	bfc	r1, #0, #1
    832a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    832c:	aa02      	add	r2, sp, #8
    832e:	4422      	add	r2, r4
    8330:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8334:	015a      	lsls	r2, r3, #5
    8336:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    833a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    833e:	015b      	lsls	r3, r3, #5
    8340:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8344:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8348:	2204      	movs	r2, #4
    834a:	1c21      	adds	r1, r4, #0
    834c:	bf18      	it	ne
    834e:	2101      	movne	r1, #1
    8350:	4b0d      	ldr	r3, [pc, #52]	; (8388 <_usb_d_dev_handle_trfail+0xfc>)
    8352:	4798      	blx	r3
    8354:	e014      	b.n	8380 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    8356:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    835a:	4a0a      	ldr	r2, [pc, #40]	; (8384 <_usb_d_dev_handle_trfail+0xf8>)
    835c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    8360:	2100      	movs	r1, #0
    8362:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8364:	aa02      	add	r2, sp, #8
    8366:	4414      	add	r4, r2
    8368:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    836c:	015a      	lsls	r2, r3, #5
    836e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8372:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8376:	015b      	lsls	r3, r3, #5
    8378:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    837c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    8380:	b003      	add	sp, #12
    8382:	bd30      	pop	{r4, r5, pc}
    8384:	200009a8 	.word	0x200009a8
    8388:	00008221 	.word	0x00008221

0000838c <_usb_d_dev_reset_epts>:
{
    838c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8390:	4d0c      	ldr	r5, [pc, #48]	; (83c4 <_usb_d_dev_reset_epts+0x38>)
    8392:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    8396:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    839a:	f04f 0803 	mov.w	r8, #3
    839e:	4f0a      	ldr	r7, [pc, #40]	; (83c8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    83a0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    83a2:	4641      	mov	r1, r8
    83a4:	4620      	mov	r0, r4
    83a6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    83a8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    83aa:	2300      	movs	r3, #0
    83ac:	74e3      	strb	r3, [r4, #19]
    83ae:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    83b0:	42ac      	cmp	r4, r5
    83b2:	d1f6      	bne.n	83a2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    83b4:	22c0      	movs	r2, #192	; 0xc0
    83b6:	4619      	mov	r1, r3
    83b8:	4802      	ldr	r0, [pc, #8]	; (83c4 <_usb_d_dev_reset_epts+0x38>)
    83ba:	4b04      	ldr	r3, [pc, #16]	; (83cc <_usb_d_dev_reset_epts+0x40>)
    83bc:	4798      	blx	r3
    83be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83c2:	bf00      	nop
    83c4:	200009a8 	.word	0x200009a8
    83c8:	000081f5 	.word	0x000081f5
    83cc:	0000bdb7 	.word	0x0000bdb7

000083d0 <_usb_d_dev_in_next>:
{
    83d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83d4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    83d6:	7c84      	ldrb	r4, [r0, #18]
    83d8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    83dc:	4688      	mov	r8, r1
    83de:	2900      	cmp	r1, #0
    83e0:	f000 80a0 	beq.w	8524 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    83e4:	4b58      	ldr	r3, [pc, #352]	; (8548 <_usb_d_dev_in_next+0x178>)
    83e6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    83ea:	6958      	ldr	r0, [r3, #20]
    83ec:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    83f0:	8a2b      	ldrh	r3, [r5, #16]
    83f2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    83f6:	4293      	cmp	r3, r2
    83f8:	f000 808e 	beq.w	8518 <_usb_d_dev_in_next+0x148>
    83fc:	3b01      	subs	r3, #1
    83fe:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8400:	7cef      	ldrb	r7, [r5, #19]
    8402:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    8406:	f1b8 0f00 	cmp.w	r8, #0
    840a:	d005      	beq.n	8418 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    840c:	0162      	lsls	r2, r4, #5
    840e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8412:	2302      	movs	r3, #2
    8414:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    8418:	68a9      	ldr	r1, [r5, #8]
    841a:	eb0e 0301 	add.w	r3, lr, r1
    841e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    8420:	686e      	ldr	r6, [r5, #4]
    8422:	42b3      	cmp	r3, r6
    8424:	d23f      	bcs.n	84a6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    8426:	1af6      	subs	r6, r6, r3
    8428:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    842a:	7cea      	ldrb	r2, [r5, #19]
    842c:	f012 0f20 	tst.w	r2, #32
    8430:	d02d      	beq.n	848e <_usb_d_dev_in_next+0xbe>
    8432:	8a2a      	ldrh	r2, [r5, #16]
    8434:	4296      	cmp	r6, r2
    8436:	bf28      	it	cs
    8438:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    843a:	6829      	ldr	r1, [r5, #0]
    843c:	4632      	mov	r2, r6
    843e:	4419      	add	r1, r3
    8440:	68e8      	ldr	r0, [r5, #12]
    8442:	4b42      	ldr	r3, [pc, #264]	; (854c <_usb_d_dev_in_next+0x17c>)
    8444:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8446:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    8448:	4b3f      	ldr	r3, [pc, #252]	; (8548 <_usb_d_dev_in_next+0x178>)
    844a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    844e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8450:	4b3d      	ldr	r3, [pc, #244]	; (8548 <_usb_d_dev_in_next+0x178>)
    8452:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    8456:	695a      	ldr	r2, [r3, #20]
    8458:	f366 020d 	bfi	r2, r6, #0, #14
    845c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    845e:	695a      	ldr	r2, [r3, #20]
    8460:	f36f 329b 	bfc	r2, #14, #14
    8464:	615a      	str	r2, [r3, #20]
	if (!isr) {
    8466:	f1b8 0f00 	cmp.w	r8, #0
    846a:	d108      	bne.n	847e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    846c:	2f01      	cmp	r7, #1
    846e:	bf0c      	ite	eq
    8470:	224e      	moveq	r2, #78	; 0x4e
    8472:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8474:	0163      	lsls	r3, r4, #5
    8476:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    847a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    847e:	0164      	lsls	r4, r4, #5
    8480:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    8484:	2380      	movs	r3, #128	; 0x80
    8486:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    848e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    8492:	bf28      	it	cs
    8494:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8498:	6829      	ldr	r1, [r5, #0]
    849a:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    849c:	4a2a      	ldr	r2, [pc, #168]	; (8548 <_usb_d_dev_in_next+0x178>)
    849e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    84a2:	6113      	str	r3, [r2, #16]
    84a4:	e7d4      	b.n	8450 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    84a6:	7ceb      	ldrb	r3, [r5, #19]
    84a8:	f013 0f10 	tst.w	r3, #16
    84ac:	d00f      	beq.n	84ce <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    84ae:	7ceb      	ldrb	r3, [r5, #19]
    84b0:	f36f 1304 	bfc	r3, #4, #1
    84b4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    84b6:	4b24      	ldr	r3, [pc, #144]	; (8548 <_usb_d_dev_in_next+0x178>)
    84b8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    84bc:	695a      	ldr	r2, [r3, #20]
    84be:	f36f 020d 	bfc	r2, #0, #14
    84c2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    84c4:	695a      	ldr	r2, [r3, #20]
    84c6:	f36f 329b 	bfc	r2, #14, #14
    84ca:	615a      	str	r2, [r3, #20]
    84cc:	e7cb      	b.n	8466 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    84ce:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    84d0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    84d4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    84d8:	bf0c      	ite	eq
    84da:	234b      	moveq	r3, #75	; 0x4b
    84dc:	234a      	movne	r3, #74	; 0x4a
    84de:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    84e2:	8a2a      	ldrh	r2, [r5, #16]
    84e4:	ea00 030e 	and.w	r3, r0, lr
    84e8:	429a      	cmp	r2, r3
    84ea:	d005      	beq.n	84f8 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    84ec:	2100      	movs	r1, #0
    84ee:	4628      	mov	r0, r5
    84f0:	4b17      	ldr	r3, [pc, #92]	; (8550 <_usb_d_dev_in_next+0x180>)
    84f2:	4798      	blx	r3
	return;
    84f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    84f8:	7ceb      	ldrb	r3, [r5, #19]
    84fa:	f36f 1386 	bfc	r3, #6, #1
    84fe:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8500:	4b11      	ldr	r3, [pc, #68]	; (8548 <_usb_d_dev_in_next+0x178>)
    8502:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    8506:	68a9      	ldr	r1, [r5, #8]
    8508:	7ca8      	ldrb	r0, [r5, #18]
    850a:	4798      	blx	r3
    850c:	b9d0      	cbnz	r0, 8544 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    850e:	7ceb      	ldrb	r3, [r5, #19]
    8510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8514:	74eb      	strb	r3, [r5, #19]
    8516:	e7e9      	b.n	84ec <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8518:	7cef      	ldrb	r7, [r5, #19]
    851a:	f007 0707 	and.w	r7, r7, #7
    851e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    8522:	e773      	b.n	840c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8524:	8a03      	ldrh	r3, [r0, #16]
    8526:	f240 32ff 	movw	r2, #1023	; 0x3ff
    852a:	4293      	cmp	r3, r2
    852c:	d107      	bne.n	853e <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    852e:	7cef      	ldrb	r7, [r5, #19]
    8530:	f007 0707 	and.w	r7, r7, #7
    8534:	f04f 0e00 	mov.w	lr, #0
    8538:	f240 30ff 	movw	r0, #1023	; 0x3ff
    853c:	e76c      	b.n	8418 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    853e:	f04f 0e00 	mov.w	lr, #0
    8542:	e75b      	b.n	83fc <_usb_d_dev_in_next+0x2c>
    8544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8548:	200009a8 	.word	0x200009a8
    854c:	0000bda1 	.word	0x0000bda1
    8550:	000081f5 	.word	0x000081f5

00008554 <_usb_d_dev_out_next>:
{
    8554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8558:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    855a:	7c85      	ldrb	r5, [r0, #18]
    855c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8560:	4689      	mov	r9, r1
    8562:	2900      	cmp	r1, #0
    8564:	d056      	beq.n	8614 <_usb_d_dev_out_next+0xc0>
    8566:	4b74      	ldr	r3, [pc, #464]	; (8738 <_usb_d_dev_out_next+0x1e4>)
    8568:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    856c:	685a      	ldr	r2, [r3, #4]
    856e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8572:	685f      	ldr	r7, [r3, #4]
    8574:	f3c7 070d 	ubfx	r7, r7, #0, #14
    8578:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    857a:	8a06      	ldrh	r6, [r0, #16]
    857c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8580:	429e      	cmp	r6, r3
    8582:	f000 80ba 	beq.w	86fa <_usb_d_dev_out_next+0x1a6>
    8586:	3e01      	subs	r6, #1
    8588:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    858a:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    858e:	f894 8013 	ldrb.w	r8, [r4, #19]
    8592:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    8596:	f1b9 0f00 	cmp.w	r9, #0
    859a:	d005      	beq.n	85a8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    859c:	016b      	lsls	r3, r5, #5
    859e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    85a2:	2201      	movs	r2, #1
    85a4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    85a8:	7ce3      	ldrb	r3, [r4, #19]
    85aa:	f013 0f20 	tst.w	r3, #32
    85ae:	d00d      	beq.n	85cc <_usb_d_dev_out_next+0x78>
    85b0:	6862      	ldr	r2, [r4, #4]
    85b2:	2a00      	cmp	r2, #0
    85b4:	d037      	beq.n	8626 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    85b6:	68a0      	ldr	r0, [r4, #8]
    85b8:	1a12      	subs	r2, r2, r0
    85ba:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    85bc:	6823      	ldr	r3, [r4, #0]
    85be:	42ba      	cmp	r2, r7
    85c0:	bf28      	it	cs
    85c2:	463a      	movcs	r2, r7
    85c4:	68e1      	ldr	r1, [r4, #12]
    85c6:	4418      	add	r0, r3
    85c8:	4b5c      	ldr	r3, [pc, #368]	; (873c <_usb_d_dev_out_next+0x1e8>)
    85ca:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    85cc:	6863      	ldr	r3, [r4, #4]
    85ce:	b353      	cbz	r3, 8626 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    85d0:	f1b9 0f00 	cmp.w	r9, #0
    85d4:	d040      	beq.n	8658 <_usb_d_dev_out_next+0x104>
    85d6:	8a22      	ldrh	r2, [r4, #16]
    85d8:	42ba      	cmp	r2, r7
    85da:	d93d      	bls.n	8658 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    85dc:	7ce3      	ldrb	r3, [r4, #19]
    85de:	f36f 1304 	bfc	r3, #4, #1
    85e2:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    85e4:	68a3      	ldr	r3, [r4, #8]
    85e6:	445b      	add	r3, fp
    85e8:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    85ea:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    85ee:	ea4f 1345 	mov.w	r3, r5, lsl #5
    85f2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    85f6:	bf0c      	ite	eq
    85f8:	222d      	moveq	r2, #45	; 0x2d
    85fa:	2225      	movne	r2, #37	; 0x25
    85fc:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    8600:	b915      	cbnz	r5, 8608 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8602:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    8604:	4b4c      	ldr	r3, [pc, #304]	; (8738 <_usb_d_dev_out_next+0x1e4>)
    8606:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8608:	2100      	movs	r1, #0
    860a:	4620      	mov	r0, r4
    860c:	4b4c      	ldr	r3, [pc, #304]	; (8740 <_usb_d_dev_out_next+0x1ec>)
    860e:	4798      	blx	r3
	return;
    8610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8614:	8a06      	ldrh	r6, [r0, #16]
    8616:	f240 33ff 	movw	r3, #1023	; 0x3ff
    861a:	429e      	cmp	r6, r3
    861c:	d07b      	beq.n	8716 <_usb_d_dev_out_next+0x1c2>
    861e:	f04f 0b00 	mov.w	fp, #0
    8622:	46da      	mov	sl, fp
    8624:	e7af      	b.n	8586 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8626:	7ce3      	ldrb	r3, [r4, #19]
    8628:	f013 0f10 	tst.w	r3, #16
    862c:	d06c      	beq.n	8708 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    862e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    8630:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8634:	f043 0320 	orr.w	r3, r3, #32
    8638:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    863a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    863c:	493e      	ldr	r1, [pc, #248]	; (8738 <_usb_d_dev_out_next+0x1e4>)
    863e:	016a      	lsls	r2, r5, #5
    8640:	188b      	adds	r3, r1, r2
    8642:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8644:	8a21      	ldrh	r1, [r4, #16]
    8646:	685a      	ldr	r2, [r3, #4]
    8648:	f361 329b 	bfi	r2, r1, #14, #14
    864c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    864e:	685a      	ldr	r2, [r3, #4]
    8650:	f36f 020d 	bfc	r2, #0, #14
    8654:	605a      	str	r2, [r3, #4]
    8656:	e01d      	b.n	8694 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    8658:	68a2      	ldr	r2, [r4, #8]
    865a:	4452      	add	r2, sl
    865c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    865e:	4293      	cmp	r3, r2
    8660:	d9c3      	bls.n	85ea <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    8662:	1a9b      	subs	r3, r3, r2
    8664:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    8666:	7ce1      	ldrb	r1, [r4, #19]
    8668:	f011 0f20 	tst.w	r1, #32
    866c:	d026      	beq.n	86bc <_usb_d_dev_out_next+0x168>
    866e:	8a22      	ldrh	r2, [r4, #16]
    8670:	4293      	cmp	r3, r2
    8672:	bf28      	it	cs
    8674:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8676:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    8678:	016a      	lsls	r2, r5, #5
    867a:	492f      	ldr	r1, [pc, #188]	; (8738 <_usb_d_dev_out_next+0x1e4>)
    867c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    867e:	4a2e      	ldr	r2, [pc, #184]	; (8738 <_usb_d_dev_out_next+0x1e4>)
    8680:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    8684:	6851      	ldr	r1, [r2, #4]
    8686:	f363 319b 	bfi	r1, r3, #14, #14
    868a:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    868c:	6853      	ldr	r3, [r2, #4]
    868e:	f36f 030d 	bfc	r3, #0, #14
    8692:	6053      	str	r3, [r2, #4]
	if (!isr) {
    8694:	f1b9 0f00 	cmp.w	r9, #0
    8698:	d108      	bne.n	86ac <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    869a:	f1b8 0f01 	cmp.w	r8, #1
    869e:	d025      	beq.n	86ec <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    86a0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    86a2:	016b      	lsls	r3, r5, #5
    86a4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    86a8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    86ac:	016d      	lsls	r5, r5, #5
    86ae:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    86b2:	2340      	movs	r3, #64	; 0x40
    86b4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    86b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    86bc:	8a21      	ldrh	r1, [r4, #16]
    86be:	428b      	cmp	r3, r1
    86c0:	d90a      	bls.n	86d8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    86c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    86c6:	d80e      	bhi.n	86e6 <_usb_d_dev_out_next+0x192>
    86c8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    86cc:	6821      	ldr	r1, [r4, #0]
    86ce:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    86d0:	0169      	lsls	r1, r5, #5
    86d2:	4819      	ldr	r0, [pc, #100]	; (8738 <_usb_d_dev_out_next+0x1e4>)
    86d4:	5042      	str	r2, [r0, r1]
    86d6:	e7d2      	b.n	867e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    86d8:	428b      	cmp	r3, r1
    86da:	d2f7      	bcs.n	86cc <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    86dc:	7ce1      	ldrb	r1, [r4, #19]
    86de:	f041 0120 	orr.w	r1, r1, #32
    86e2:	74e1      	strb	r1, [r4, #19]
    86e4:	e7f2      	b.n	86cc <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    86e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    86ea:	e7ef      	b.n	86cc <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    86ec:	4b12      	ldr	r3, [pc, #72]	; (8738 <_usb_d_dev_out_next+0x1e4>)
    86ee:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    86f2:	2200      	movs	r2, #0
    86f4:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    86f6:	222d      	movs	r2, #45	; 0x2d
    86f8:	e7d3      	b.n	86a2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    86fa:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    86fe:	f890 8013 	ldrb.w	r8, [r0, #19]
    8702:	f008 0807 	and.w	r8, r8, #7
    8706:	e749      	b.n	859c <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    8708:	f1b9 0f00 	cmp.w	r9, #0
    870c:	d10b      	bne.n	8726 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    870e:	68a3      	ldr	r3, [r4, #8]
    8710:	4453      	add	r3, sl
    8712:	60a3      	str	r3, [r4, #8]
    8714:	e769      	b.n	85ea <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8716:	f890 8013 	ldrb.w	r8, [r0, #19]
    871a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    871e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8720:	46bb      	mov	fp, r7
    8722:	46ba      	mov	sl, r7
    8724:	e740      	b.n	85a8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    8726:	8a23      	ldrh	r3, [r4, #16]
    8728:	42bb      	cmp	r3, r7
    872a:	f63f af57 	bhi.w	85dc <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    872e:	68a3      	ldr	r3, [r4, #8]
    8730:	4453      	add	r3, sl
    8732:	60a3      	str	r3, [r4, #8]
    8734:	e759      	b.n	85ea <_usb_d_dev_out_next+0x96>
    8736:	bf00      	nop
    8738:	200009a8 	.word	0x200009a8
    873c:	0000bda1 	.word	0x0000bda1
    8740:	000081f5 	.word	0x000081f5

00008744 <_usb_d_dev_handler>:
{
    8744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    8748:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    874c:	8c1e      	ldrh	r6, [r3, #32]
    874e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    8750:	b146      	cbz	r6, 8764 <_usb_d_dev_handler+0x20>
    8752:	4d96      	ldr	r5, [pc, #600]	; (89ac <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    8754:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8756:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    875a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 89c8 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    875e:	f8df 826c 	ldr.w	r8, [pc, #620]	; 89cc <_usb_d_dev_handler+0x288>
    8762:	e0de      	b.n	8922 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8764:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8766:	8b1b      	ldrh	r3, [r3, #24]
    8768:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    876a:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    876c:	f013 0f04 	tst.w	r3, #4
    8770:	d11e      	bne.n	87b0 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8772:	f413 7f00 	tst.w	r3, #512	; 0x200
    8776:	d125      	bne.n	87c4 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8778:	f013 0f80 	tst.w	r3, #128	; 0x80
    877c:	d14f      	bne.n	881e <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    877e:	f013 0f70 	tst.w	r3, #112	; 0x70
    8782:	d158      	bne.n	8836 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8784:	f013 0f08 	tst.w	r3, #8
    8788:	d178      	bne.n	887c <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    878a:	f013 0f01 	tst.w	r3, #1
    878e:	d0e0      	beq.n	8752 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8790:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8794:	f240 2201 	movw	r2, #513	; 0x201
    8798:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    879a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    879c:	2270      	movs	r2, #112	; 0x70
    879e:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    87a0:	4b83      	ldr	r3, [pc, #524]	; (89b0 <_usb_d_dev_handler+0x26c>)
    87a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    87a6:	2100      	movs	r1, #0
    87a8:	2004      	movs	r0, #4
    87aa:	4798      	blx	r3
    87ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    87b0:	2204      	movs	r2, #4
    87b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    87b6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    87b8:	4b7d      	ldr	r3, [pc, #500]	; (89b0 <_usb_d_dev_handler+0x26c>)
    87ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    87be:	4798      	blx	r3
    87c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    87c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    87c8:	f240 2201 	movw	r2, #513	; 0x201
    87cc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    87ce:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    87d0:	2270      	movs	r2, #112	; 0x70
    87d2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    87d4:	4b76      	ldr	r3, [pc, #472]	; (89b0 <_usb_d_dev_handler+0x26c>)
    87d6:	891b      	ldrh	r3, [r3, #8]
    87d8:	f003 030f 	and.w	r3, r3, #15
    87dc:	2b03      	cmp	r3, #3
    87de:	d014      	beq.n	880a <_usb_d_dev_handler+0xc6>
    87e0:	2301      	movs	r3, #1
    87e2:	4873      	ldr	r0, [pc, #460]	; (89b0 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    87e4:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    87e6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    87ea:	8912      	ldrh	r2, [r2, #8]
    87ec:	f002 020f 	and.w	r2, r2, #15
    87f0:	2a03      	cmp	r2, #3
    87f2:	d00b      	beq.n	880c <_usb_d_dev_handler+0xc8>
    87f4:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    87f6:	2b05      	cmp	r3, #5
    87f8:	d1f4      	bne.n	87e4 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    87fa:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    87fc:	4b6c      	ldr	r3, [pc, #432]	; (89b0 <_usb_d_dev_handler+0x26c>)
    87fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8802:	2003      	movs	r0, #3
    8804:	4798      	blx	r3
    8806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    880a:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    880c:	4b68      	ldr	r3, [pc, #416]	; (89b0 <_usb_d_dev_handler+0x26c>)
    880e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8812:	8919      	ldrh	r1, [r3, #8]
    8814:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    8818:	2200      	movs	r2, #0
    881a:	811a      	strh	r2, [r3, #8]
    881c:	e7ee      	b.n	87fc <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    881e:	2280      	movs	r2, #128	; 0x80
    8820:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8824:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8826:	4b62      	ldr	r3, [pc, #392]	; (89b0 <_usb_d_dev_handler+0x26c>)
    8828:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    882c:	2100      	movs	r1, #0
    882e:	2005      	movs	r0, #5
    8830:	4798      	blx	r3
    8832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8836:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    883a:	2270      	movs	r2, #112	; 0x70
    883c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    883e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8840:	f240 2201 	movw	r2, #513	; 0x201
    8844:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8846:	4b5b      	ldr	r3, [pc, #364]	; (89b4 <_usb_d_dev_handler+0x270>)
    8848:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    884c:	f013 0f01 	tst.w	r3, #1
    8850:	d00e      	beq.n	8870 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8852:	4a58      	ldr	r2, [pc, #352]	; (89b4 <_usb_d_dev_handler+0x270>)
    8854:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    8856:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    885a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    885e:	d1f9      	bne.n	8854 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8860:	4b53      	ldr	r3, [pc, #332]	; (89b0 <_usb_d_dev_handler+0x26c>)
    8862:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8866:	2100      	movs	r1, #0
    8868:	2002      	movs	r0, #2
    886a:	4798      	blx	r3
    886c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8870:	4a50      	ldr	r2, [pc, #320]	; (89b4 <_usb_d_dev_handler+0x270>)
    8872:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8874:	f413 7f80 	tst.w	r3, #256	; 0x100
    8878:	d0fb      	beq.n	8872 <_usb_d_dev_handler+0x12e>
    887a:	e7f1      	b.n	8860 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    887c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8880:	2400      	movs	r4, #0
    8882:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8886:	2208      	movs	r2, #8
    8888:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    888a:	2270      	movs	r2, #112	; 0x70
    888c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    888e:	f240 2201 	movw	r2, #513	; 0x201
    8892:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    8894:	4b48      	ldr	r3, [pc, #288]	; (89b8 <_usb_d_dev_handler+0x274>)
    8896:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8898:	4b45      	ldr	r3, [pc, #276]	; (89b0 <_usb_d_dev_handler+0x26c>)
    889a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    889e:	4621      	mov	r1, r4
    88a0:	2001      	movs	r0, #1
    88a2:	4798      	blx	r3
    88a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    88a8:	f011 0f10 	tst.w	r1, #16
    88ac:	d109      	bne.n	88c2 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    88ae:	f011 0f40 	tst.w	r1, #64	; 0x40
    88b2:	d108      	bne.n	88c6 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    88b4:	f011 0f20 	tst.w	r1, #32
    88b8:	d02f      	beq.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    88ba:	2100      	movs	r1, #0
    88bc:	4b3f      	ldr	r3, [pc, #252]	; (89bc <_usb_d_dev_handler+0x278>)
    88be:	4798      	blx	r3
    88c0:	e02b      	b.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    88c2:	47c8      	blx	r9
    88c4:	e029      	b.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    88c6:	2101      	movs	r1, #1
    88c8:	4b3c      	ldr	r3, [pc, #240]	; (89bc <_usb_d_dev_handler+0x278>)
    88ca:	4798      	blx	r3
    88cc:	e025      	b.n	891a <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    88ce:	f011 0f40 	tst.w	r1, #64	; 0x40
    88d2:	d111      	bne.n	88f8 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    88d4:	f011 0f08 	tst.w	r1, #8
    88d8:	d112      	bne.n	8900 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    88da:	f011 0f02 	tst.w	r1, #2
    88de:	d112      	bne.n	8906 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    88e0:	f003 0307 	and.w	r3, r3, #7
    88e4:	2b01      	cmp	r3, #1
    88e6:	d118      	bne.n	891a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    88e8:	f011 0f04 	tst.w	r1, #4
    88ec:	d10f      	bne.n	890e <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    88ee:	f011 0f10 	tst.w	r1, #16
    88f2:	d012      	beq.n	891a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    88f4:	47c8      	blx	r9
    88f6:	e010      	b.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    88f8:	2101      	movs	r1, #1
    88fa:	4b30      	ldr	r3, [pc, #192]	; (89bc <_usb_d_dev_handler+0x278>)
    88fc:	4798      	blx	r3
    88fe:	e00c      	b.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    8900:	2101      	movs	r1, #1
    8902:	47c0      	blx	r8
    8904:	e009      	b.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    8906:	2101      	movs	r1, #1
    8908:	4b2d      	ldr	r3, [pc, #180]	; (89c0 <_usb_d_dev_handler+0x27c>)
    890a:	4798      	blx	r3
    890c:	e005      	b.n	891a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    890e:	2100      	movs	r1, #0
    8910:	47c0      	blx	r8
    8912:	e002      	b.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    8914:	2100      	movs	r1, #0
    8916:	4b29      	ldr	r3, [pc, #164]	; (89bc <_usb_d_dev_handler+0x278>)
    8918:	4798      	blx	r3
    891a:	3401      	adds	r4, #1
    891c:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    891e:	2c1b      	cmp	r4, #27
    8920:	d042      	beq.n	89a8 <_usb_d_dev_handler+0x264>
    8922:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    8924:	7cab      	ldrb	r3, [r5, #18]
    8926:	2bff      	cmp	r3, #255	; 0xff
    8928:	d0f7      	beq.n	891a <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    892a:	f003 030f 	and.w	r3, r3, #15
    892e:	2101      	movs	r1, #1
    8930:	4099      	lsls	r1, r3
    8932:	4231      	tst	r1, r6
    8934:	d0f1      	beq.n	891a <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    8936:	0159      	lsls	r1, r3, #5
    8938:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    893c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    8940:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    8942:	015b      	lsls	r3, r3, #5
    8944:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8948:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    894c:	4019      	ands	r1, r3
    894e:	d0e4      	beq.n	891a <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    8950:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8954:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    8958:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    895c:	f003 0247 	and.w	r2, r3, #71	; 0x47
    8960:	2a01      	cmp	r2, #1
    8962:	d0a1      	beq.n	88a8 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    8964:	f013 0f80 	tst.w	r3, #128	; 0x80
    8968:	d1b1      	bne.n	88ce <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    896a:	f011 0f20 	tst.w	r1, #32
    896e:	d1d1      	bne.n	8914 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8970:	f011 0f04 	tst.w	r1, #4
    8974:	d10e      	bne.n	8994 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    8976:	f011 0f01 	tst.w	r1, #1
    897a:	d10e      	bne.n	899a <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    897c:	f003 0307 	and.w	r3, r3, #7
    8980:	2b01      	cmp	r3, #1
    8982:	d1ca      	bne.n	891a <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8984:	f011 0f08 	tst.w	r1, #8
    8988:	d10b      	bne.n	89a2 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    898a:	f011 0f10 	tst.w	r1, #16
    898e:	d0c4      	beq.n	891a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    8990:	47c8      	blx	r9
    8992:	e7c2      	b.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    8994:	2100      	movs	r1, #0
    8996:	47c0      	blx	r8
    8998:	e7bf      	b.n	891a <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    899a:	2101      	movs	r1, #1
    899c:	4b09      	ldr	r3, [pc, #36]	; (89c4 <_usb_d_dev_handler+0x280>)
    899e:	4798      	blx	r3
    89a0:	e7bb      	b.n	891a <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    89a2:	2101      	movs	r1, #1
    89a4:	47c0      	blx	r8
    89a6:	e7b8      	b.n	891a <_usb_d_dev_handler+0x1d6>
    89a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    89ac:	20000a7c 	.word	0x20000a7c
    89b0:	200009a8 	.word	0x200009a8
    89b4:	40001000 	.word	0x40001000
    89b8:	0000838d 	.word	0x0000838d
    89bc:	000081c5 	.word	0x000081c5
    89c0:	000083d1 	.word	0x000083d1
    89c4:	00008555 	.word	0x00008555
    89c8:	00008145 	.word	0x00008145
    89cc:	0000828d 	.word	0x0000828d

000089d0 <_usb_d_dev_init>:
{
    89d0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    89d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89d6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    89d8:	f013 0f01 	tst.w	r3, #1
    89dc:	d124      	bne.n	8a28 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    89de:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    89e2:	7893      	ldrb	r3, [r2, #2]
    89e4:	f013 0f03 	tst.w	r3, #3
    89e8:	d1fb      	bne.n	89e2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    89ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89ee:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    89f0:	f013 0f02 	tst.w	r3, #2
    89f4:	d00f      	beq.n	8a16 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    89f6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    89fa:	7813      	ldrb	r3, [r2, #0]
    89fc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8a00:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8a02:	7893      	ldrb	r3, [r2, #2]
    8a04:	f013 0f03 	tst.w	r3, #3
    8a08:	d1fb      	bne.n	8a02 <_usb_d_dev_init+0x32>
    8a0a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8a0e:	7893      	ldrb	r3, [r2, #2]
    8a10:	f013 0f02 	tst.w	r3, #2
    8a14:	d1fb      	bne.n	8a0e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8a16:	2201      	movs	r2, #1
    8a18:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a1c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8a1e:	461a      	mov	r2, r3
    8a20:	7893      	ldrb	r3, [r2, #2]
    8a22:	f013 0f03 	tst.w	r3, #3
    8a26:	d1fb      	bne.n	8a20 <_usb_d_dev_init+0x50>
    8a28:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8a2c:	7893      	ldrb	r3, [r2, #2]
    8a2e:	f013 0f01 	tst.w	r3, #1
    8a32:	d1fb      	bne.n	8a2c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    8a34:	4b24      	ldr	r3, [pc, #144]	; (8ac8 <_usb_d_dev_init+0xf8>)
    8a36:	4a25      	ldr	r2, [pc, #148]	; (8acc <_usb_d_dev_init+0xfc>)
    8a38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    8a3c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    8a40:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    8a44:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    8a48:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    8a4c:	4b20      	ldr	r3, [pc, #128]	; (8ad0 <_usb_d_dev_init+0x100>)
    8a4e:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8a50:	4b20      	ldr	r3, [pc, #128]	; (8ad4 <_usb_d_dev_init+0x104>)
    8a52:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    8a54:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8a58:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8a5c:	f011 011f 	ands.w	r1, r1, #31
    8a60:	d02b      	beq.n	8aba <_usb_d_dev_init+0xea>
		pad_transn = 9;
    8a62:	291f      	cmp	r1, #31
    8a64:	bf08      	it	eq
    8a66:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8a68:	b34b      	cbz	r3, 8abe <_usb_d_dev_init+0xee>
		pad_transp = 25;
    8a6a:	2b1f      	cmp	r3, #31
    8a6c:	bf08      	it	eq
    8a6e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    8a70:	b33a      	cbz	r2, 8ac2 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    8a72:	2a07      	cmp	r2, #7
    8a74:	bf08      	it	eq
    8a76:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8a78:	f003 031f 	and.w	r3, r3, #31
    8a7c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    8a80:	0312      	lsls	r2, r2, #12
    8a82:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    8a86:	4313      	orrs	r3, r2
    8a88:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8a8c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8a8e:	78d3      	ldrb	r3, [r2, #3]
    8a90:	f043 0303 	orr.w	r3, r3, #3
    8a94:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8a96:	78d3      	ldrb	r3, [r2, #3]
    8a98:	f043 030c 	orr.w	r3, r3, #12
    8a9c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8a9e:	2304      	movs	r3, #4
    8aa0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8aa2:	7893      	ldrb	r3, [r2, #2]
    8aa4:	f013 0f03 	tst.w	r3, #3
    8aa8:	d1fb      	bne.n	8aa2 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8aaa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8aae:	4a06      	ldr	r2, [pc, #24]	; (8ac8 <_usb_d_dev_init+0xf8>)
    8ab0:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8ab2:	2201      	movs	r2, #1
    8ab4:	811a      	strh	r2, [r3, #8]
}
    8ab6:	2000      	movs	r0, #0
    8ab8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    8aba:	2109      	movs	r1, #9
    8abc:	e7d4      	b.n	8a68 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    8abe:	2319      	movs	r3, #25
    8ac0:	e7d6      	b.n	8a70 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    8ac2:	2206      	movs	r2, #6
    8ac4:	e7d8      	b.n	8a78 <_usb_d_dev_init+0xa8>
    8ac6:	bf00      	nop
    8ac8:	200009a8 	.word	0x200009a8
    8acc:	00008141 	.word	0x00008141
    8ad0:	0000838d 	.word	0x0000838d
    8ad4:	00800084 	.word	0x00800084

00008ad8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8ad8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8adc:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    8ade:	f013 0f03 	tst.w	r3, #3
    8ae2:	d129      	bne.n	8b38 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8ae4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8ae8:	7893      	ldrb	r3, [r2, #2]
    8aea:	f013 0f03 	tst.w	r3, #3
    8aee:	d1fb      	bne.n	8ae8 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8af0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8af4:	781b      	ldrb	r3, [r3, #0]
    8af6:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    8af8:	f013 0f02 	tst.w	r3, #2
    8afc:	d108      	bne.n	8b10 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    8afe:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8b02:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8b06:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8b08:	7893      	ldrb	r3, [r2, #2]
    8b0a:	f013 0f03 	tst.w	r3, #3
    8b0e:	d1fb      	bne.n	8b08 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8b10:	4b0b      	ldr	r3, [pc, #44]	; (8b40 <_usb_d_dev_enable+0x68>)
    8b12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8b16:	609a      	str	r2, [r3, #8]
    8b18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8b1c:	609a      	str	r2, [r3, #8]
    8b1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8b22:	609a      	str	r2, [r3, #8]
    8b24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8b28:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8b2a:	f240 228d 	movw	r2, #653	; 0x28d
    8b2e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b32:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    8b34:	2000      	movs	r0, #0
    8b36:	4770      	bx	lr
		return -USB_ERR_DENIED;
    8b38:	f06f 0010 	mvn.w	r0, #16
}
    8b3c:	4770      	bx	lr
    8b3e:	bf00      	nop
    8b40:	e000e100 	.word	0xe000e100

00008b44 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8b44:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    8b48:	8913      	ldrh	r3, [r2, #8]
    8b4a:	f023 0301 	bic.w	r3, r3, #1
    8b4e:	041b      	lsls	r3, r3, #16
    8b50:	0c1b      	lsrs	r3, r3, #16
    8b52:	8113      	strh	r3, [r2, #8]
    8b54:	4770      	bx	lr

00008b56 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    8b56:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8b5a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b5e:	7298      	strb	r0, [r3, #10]
    8b60:	4770      	bx	lr

00008b62 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    8b62:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b66:	8a18      	ldrh	r0, [r3, #16]
}
    8b68:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    8b6c:	4770      	bx	lr
	...

00008b70 <_usb_d_dev_ep_init>:
{
    8b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b72:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8b76:	f010 050f 	ands.w	r5, r0, #15
    8b7a:	d04d      	beq.n	8c18 <_usb_d_dev_ep_init+0xa8>
    8b7c:	f1be 0f00 	cmp.w	lr, #0
    8b80:	bfb4      	ite	lt
    8b82:	1d6c      	addlt	r4, r5, #5
    8b84:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8b86:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8b8a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    8b8c:	2d05      	cmp	r5, #5
    8b8e:	d947      	bls.n	8c20 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    8b90:	f06f 0011 	mvn.w	r0, #17
    8b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8b96:	f1be 0f00 	cmp.w	lr, #0
    8b9a:	db1b      	blt.n	8bd4 <_usb_d_dev_ep_init+0x64>
    8b9c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8ba0:	4e37      	ldr	r6, [pc, #220]	; (8c80 <_usb_d_dev_ep_init+0x110>)
    8ba2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8ba6:	2d00      	cmp	r5, #0
    8ba8:	d15e      	bne.n	8c68 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8baa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8bae:	4d34      	ldr	r5, [pc, #208]	; (8c80 <_usb_d_dev_ep_init+0x110>)
    8bb0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    8bb4:	4d33      	ldr	r5, [pc, #204]	; (8c84 <_usb_d_dev_ep_init+0x114>)
    8bb6:	00a6      	lsls	r6, r4, #2
    8bb8:	1933      	adds	r3, r6, r4
    8bba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8bbe:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    8bc2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    8bc6:	3101      	adds	r1, #1
    8bc8:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    8bcc:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    8bd0:	2000      	movs	r0, #0
    8bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8bd4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8bd8:	4e29      	ldr	r6, [pc, #164]	; (8c80 <_usb_d_dev_ep_init+0x110>)
    8bda:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8bde:	686d      	ldr	r5, [r5, #4]
    8be0:	b935      	cbnz	r5, 8bf0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    8be2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8be6:	4d26      	ldr	r5, [pc, #152]	; (8c80 <_usb_d_dev_ep_init+0x110>)
    8be8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8bec:	685f      	ldr	r7, [r3, #4]
    8bee:	e7e1      	b.n	8bb4 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8bf0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8bf4:	4e22      	ldr	r6, [pc, #136]	; (8c80 <_usb_d_dev_ep_init+0x110>)
    8bf6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8bfa:	896d      	ldrh	r5, [r5, #10]
    8bfc:	4295      	cmp	r5, r2
    8bfe:	daf0      	bge.n	8be2 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    8c00:	f06f 0012 	mvn.w	r0, #18
    8c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    8c06:	f06f 0013 	mvn.w	r0, #19
    8c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    8c0c:	f06f 0013 	mvn.w	r0, #19
    8c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    8c12:	f06f 0012 	mvn.w	r0, #18
    8c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    8c18:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    8c1c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    8c1e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    8c20:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8c24:	4f17      	ldr	r7, [pc, #92]	; (8c84 <_usb_d_dev_ep_init+0x114>)
    8c26:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    8c2a:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    8c2e:	2eff      	cmp	r6, #255	; 0xff
    8c30:	d1e9      	bne.n	8c06 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    8c32:	2900      	cmp	r1, #0
    8c34:	d1af      	bne.n	8b96 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8c36:	b125      	cbz	r5, 8c42 <_usb_d_dev_ep_init+0xd2>
    8c38:	f1be 0f00 	cmp.w	lr, #0
    8c3c:	bfa4      	itt	ge
    8c3e:	3505      	addge	r5, #5
    8c40:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    8c42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8c46:	4e0f      	ldr	r6, [pc, #60]	; (8c84 <_usb_d_dev_ep_init+0x114>)
    8c48:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8c4c:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    8c50:	2dff      	cmp	r5, #255	; 0xff
    8c52:	d1db      	bne.n	8c0c <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    8c54:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8c58:	4e09      	ldr	r6, [pc, #36]	; (8c80 <_usb_d_dev_ep_init+0x110>)
    8c5a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    8c5e:	2d00      	cmp	r5, #0
    8c60:	d0d7      	beq.n	8c12 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    8c62:	f1be 0f00 	cmp.w	lr, #0
    8c66:	dbb5      	blt.n	8bd4 <_usb_d_dev_ep_init+0x64>
    8c68:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    8c6c:	4e04      	ldr	r6, [pc, #16]	; (8c80 <_usb_d_dev_ep_init+0x110>)
    8c6e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8c72:	892d      	ldrh	r5, [r5, #8]
    8c74:	4295      	cmp	r5, r2
    8c76:	da98      	bge.n	8baa <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    8c78:	f06f 0012 	mvn.w	r0, #18
    8c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c7e:	bf00      	nop
    8c80:	0000d960 	.word	0x0000d960
    8c84:	200009a8 	.word	0x200009a8

00008c88 <_usb_d_dev_ep_deinit>:
{
    8c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c8a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8c8c:	f010 060f 	ands.w	r6, r0, #15
    8c90:	d00e      	beq.n	8cb0 <_usb_d_dev_ep_deinit+0x28>
    8c92:	2f00      	cmp	r7, #0
    8c94:	bfb4      	ite	lt
    8c96:	1d73      	addlt	r3, r6, #5
    8c98:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8c9a:	2e05      	cmp	r6, #5
    8c9c:	d900      	bls.n	8ca0 <_usb_d_dev_ep_deinit+0x18>
    8c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    8ca0:	461d      	mov	r5, r3
    8ca2:	3301      	adds	r3, #1
    8ca4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8ca8:	4a24      	ldr	r2, [pc, #144]	; (8d3c <_usb_d_dev_ep_deinit+0xb4>)
    8caa:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    8cae:	e002      	b.n	8cb6 <_usb_d_dev_ep_deinit+0x2e>
    8cb0:	f8df e094 	ldr.w	lr, [pc, #148]	; 8d48 <_usb_d_dev_ep_deinit+0xc0>
    8cb4:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8cb6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8cba:	4a21      	ldr	r2, [pc, #132]	; (8d40 <_usb_d_dev_ep_deinit+0xb8>)
    8cbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8cc0:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    8cc4:	2aff      	cmp	r2, #255	; 0xff
    8cc6:	d0ea      	beq.n	8c9e <_usb_d_dev_ep_deinit+0x16>
    8cc8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    8cca:	2203      	movs	r2, #3
    8ccc:	0ff9      	lsrs	r1, r7, #31
    8cce:	4670      	mov	r0, lr
    8cd0:	4b1c      	ldr	r3, [pc, #112]	; (8d44 <_usb_d_dev_ep_deinit+0xbc>)
    8cd2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    8cd4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8cd8:	4a19      	ldr	r2, [pc, #100]	; (8d40 <_usb_d_dev_ep_deinit+0xb8>)
    8cda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8cde:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    8ce2:	f003 0307 	and.w	r3, r3, #7
    8ce6:	2b01      	cmp	r3, #1
    8ce8:	d016      	beq.n	8d18 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    8cea:	2f00      	cmp	r7, #0
    8cec:	db1b      	blt.n	8d26 <_usb_d_dev_ep_deinit+0x9e>
    8cee:	0160      	lsls	r0, r4, #5
    8cf0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    8cf4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    8cf8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8cfc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    8d00:	4b0f      	ldr	r3, [pc, #60]	; (8d40 <_usb_d_dev_ep_deinit+0xb8>)
    8d02:	00aa      	lsls	r2, r5, #2
    8d04:	1951      	adds	r1, r2, r5
    8d06:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8d0a:	2000      	movs	r0, #0
    8d0c:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    8d10:	22ff      	movs	r2, #255	; 0xff
    8d12:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    8d16:	e7c2      	b.n	8c9e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    8d18:	0160      	lsls	r0, r4, #5
    8d1a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8d1e:	2300      	movs	r3, #0
    8d20:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    8d24:	e7ec      	b.n	8d00 <_usb_d_dev_ep_deinit+0x78>
    8d26:	0176      	lsls	r6, r6, #5
    8d28:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    8d2c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8d30:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    8d34:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    8d38:	e7e2      	b.n	8d00 <_usb_d_dev_ep_deinit+0x78>
    8d3a:	bf00      	nop
    8d3c:	20000a68 	.word	0x20000a68
    8d40:	200009a8 	.word	0x200009a8
    8d44:	00008221 	.word	0x00008221
    8d48:	20000a7c 	.word	0x20000a7c

00008d4c <_usb_d_dev_ep_enable>:
{
    8d4c:	b4f0      	push	{r4, r5, r6, r7}
    8d4e:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8d50:	f010 000f 	ands.w	r0, r0, #15
    8d54:	f000 80a7 	beq.w	8ea6 <_usb_d_dev_ep_enable+0x15a>
    8d58:	2e00      	cmp	r6, #0
    8d5a:	bfb4      	ite	lt
    8d5c:	1d43      	addlt	r3, r0, #5
    8d5e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8d60:	4605      	mov	r5, r0
    8d62:	0142      	lsls	r2, r0, #5
    8d64:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8d68:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    8d6c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8d6e:	2805      	cmp	r0, #5
    8d70:	f240 80a0 	bls.w	8eb4 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    8d74:	f06f 0011 	mvn.w	r0, #17
    8d78:	e07d      	b.n	8e76 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    8d7a:	f014 0f77 	tst.w	r4, #119	; 0x77
    8d7e:	f040 8089 	bne.w	8e94 <_usb_d_dev_ep_enable+0x148>
    8d82:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8d86:	2111      	movs	r1, #17
    8d88:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8d8c:	4c9b      	ldr	r4, [pc, #620]	; (8ffc <_usb_d_dev_ep_enable+0x2b0>)
    8d8e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    8d92:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    8d96:	4c9a      	ldr	r4, [pc, #616]	; (9000 <_usb_d_dev_ep_enable+0x2b4>)
    8d98:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8d9c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8da0:	f200 80cd 	bhi.w	8f3e <_usb_d_dev_ep_enable+0x1f2>
    8da4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8da8:	f200 8112 	bhi.w	8fd0 <_usb_d_dev_ep_enable+0x284>
    8dac:	2980      	cmp	r1, #128	; 0x80
    8dae:	f200 8101 	bhi.w	8fb4 <_usb_d_dev_ep_enable+0x268>
    8db2:	2940      	cmp	r1, #64	; 0x40
    8db4:	f200 8113 	bhi.w	8fde <_usb_d_dev_ep_enable+0x292>
    8db8:	2920      	cmp	r1, #32
    8dba:	f200 8102 	bhi.w	8fc2 <_usb_d_dev_ep_enable+0x276>
    8dbe:	2910      	cmp	r1, #16
    8dc0:	f200 8114 	bhi.w	8fec <_usb_d_dev_ep_enable+0x2a0>
    8dc4:	2908      	cmp	r1, #8
    8dc6:	bf94      	ite	ls
    8dc8:	2600      	movls	r6, #0
    8dca:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8dcc:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8dd0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8dd2:	f3c1 010d 	ubfx	r1, r1, #0, #14
    8dd6:	e0b8      	b.n	8f4a <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    8dd8:	f014 0f70 	tst.w	r4, #112	; 0x70
    8ddc:	d15d      	bne.n	8e9a <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    8dde:	4e87      	ldr	r6, [pc, #540]	; (8ffc <_usb_d_dev_ep_enable+0x2b0>)
    8de0:	009f      	lsls	r7, r3, #2
    8de2:	18f9      	adds	r1, r7, r3
    8de4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8de8:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8dec:	0109      	lsls	r1, r1, #4
    8dee:	f001 0170 	and.w	r1, r1, #112	; 0x70
    8df2:	430c      	orrs	r4, r1
    8df4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    8df8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8dfc:	443b      	add	r3, r7
    8dfe:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8e02:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    8e06:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8e0e:	d80f      	bhi.n	8e30 <_usb_d_dev_ep_enable+0xe4>
    8e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8e14:	d819      	bhi.n	8e4a <_usb_d_dev_ep_enable+0xfe>
    8e16:	2b80      	cmp	r3, #128	; 0x80
    8e18:	d819      	bhi.n	8e4e <_usb_d_dev_ep_enable+0x102>
    8e1a:	2b40      	cmp	r3, #64	; 0x40
    8e1c:	d819      	bhi.n	8e52 <_usb_d_dev_ep_enable+0x106>
    8e1e:	2b20      	cmp	r3, #32
    8e20:	d819      	bhi.n	8e56 <_usb_d_dev_ep_enable+0x10a>
    8e22:	2b10      	cmp	r3, #16
    8e24:	d819      	bhi.n	8e5a <_usb_d_dev_ep_enable+0x10e>
    8e26:	2b08      	cmp	r3, #8
    8e28:	bf94      	ite	ls
    8e2a:	2300      	movls	r3, #0
    8e2c:	2301      	movhi	r3, #1
    8e2e:	e000      	b.n	8e32 <_usb_d_dev_ep_enable+0xe6>
    8e30:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e32:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    8e36:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8e38:	2380      	movs	r3, #128	; 0x80
    8e3a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8e3e:	4b6f      	ldr	r3, [pc, #444]	; (8ffc <_usb_d_dev_ep_enable+0x2b0>)
    8e40:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8e44:	2000      	movs	r0, #0
    8e46:	76a8      	strb	r0, [r5, #26]
    8e48:	e015      	b.n	8e76 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8e4a:	2306      	movs	r3, #6
    8e4c:	e7f1      	b.n	8e32 <_usb_d_dev_ep_enable+0xe6>
    8e4e:	2305      	movs	r3, #5
    8e50:	e7ef      	b.n	8e32 <_usb_d_dev_ep_enable+0xe6>
    8e52:	2304      	movs	r3, #4
    8e54:	e7ed      	b.n	8e32 <_usb_d_dev_ep_enable+0xe6>
    8e56:	2303      	movs	r3, #3
    8e58:	e7eb      	b.n	8e32 <_usb_d_dev_ep_enable+0xe6>
    8e5a:	2302      	movs	r3, #2
    8e5c:	e7e9      	b.n	8e32 <_usb_d_dev_ep_enable+0xe6>
    8e5e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8e60:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8e64:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8e66:	2340      	movs	r3, #64	; 0x40
    8e68:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    8e6c:	4b63      	ldr	r3, [pc, #396]	; (8ffc <_usb_d_dev_ep_enable+0x2b0>)
    8e6e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    8e72:	2000      	movs	r0, #0
    8e74:	72a8      	strb	r0, [r5, #10]
}
    8e76:	bcf0      	pop	{r4, r5, r6, r7}
    8e78:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8e7a:	2106      	movs	r1, #6
    8e7c:	e7f0      	b.n	8e60 <_usb_d_dev_ep_enable+0x114>
    8e7e:	2105      	movs	r1, #5
    8e80:	e7ee      	b.n	8e60 <_usb_d_dev_ep_enable+0x114>
    8e82:	2104      	movs	r1, #4
    8e84:	e7ec      	b.n	8e60 <_usb_d_dev_ep_enable+0x114>
    8e86:	2103      	movs	r1, #3
    8e88:	e7ea      	b.n	8e60 <_usb_d_dev_ep_enable+0x114>
    8e8a:	2102      	movs	r1, #2
    8e8c:	e7e8      	b.n	8e60 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    8e8e:	f06f 0011 	mvn.w	r0, #17
    8e92:	e7f0      	b.n	8e76 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8e94:	f06f 0013 	mvn.w	r0, #19
    8e98:	e7ed      	b.n	8e76 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8e9a:	f06f 0013 	mvn.w	r0, #19
    8e9e:	e7ea      	b.n	8e76 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    8ea0:	f06f 0013 	mvn.w	r0, #19
    8ea4:	e7e7      	b.n	8e76 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8ea6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8eaa:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    8eae:	b2e4      	uxtb	r4, r4
    8eb0:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    8eb2:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    8eb4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8eb8:	4950      	ldr	r1, [pc, #320]	; (8ffc <_usb_d_dev_ep_enable+0x2b0>)
    8eba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8ebe:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    8ec2:	2aff      	cmp	r2, #255	; 0xff
    8ec4:	d0e3      	beq.n	8e8e <_usb_d_dev_ep_enable+0x142>
    8ec6:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    8ec8:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    8eca:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    8ece:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    8ed2:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8ed6:	f001 0107 	and.w	r1, r1, #7
    8eda:	2901      	cmp	r1, #1
    8edc:	f43f af4d 	beq.w	8d7a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    8ee0:	2e00      	cmp	r6, #0
    8ee2:	f6ff af79 	blt.w	8dd8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    8ee6:	f014 0f07 	tst.w	r4, #7
    8eea:	d1d9      	bne.n	8ea0 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    8eec:	4e43      	ldr	r6, [pc, #268]	; (8ffc <_usb_d_dev_ep_enable+0x2b0>)
    8eee:	009f      	lsls	r7, r3, #2
    8ef0:	18f9      	adds	r1, r7, r3
    8ef2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8ef6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    8efa:	f001 0107 	and.w	r1, r1, #7
    8efe:	430c      	orrs	r4, r1
    8f00:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8f04:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8f08:	443b      	add	r3, r7
    8f0a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    8f0e:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    8f12:	4b3b      	ldr	r3, [pc, #236]	; (9000 <_usb_d_dev_ep_enable+0x2b4>)
    8f14:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8f18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8f1c:	d89f      	bhi.n	8e5e <_usb_d_dev_ep_enable+0x112>
    8f1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8f22:	d8aa      	bhi.n	8e7a <_usb_d_dev_ep_enable+0x12e>
    8f24:	2980      	cmp	r1, #128	; 0x80
    8f26:	d8aa      	bhi.n	8e7e <_usb_d_dev_ep_enable+0x132>
    8f28:	2940      	cmp	r1, #64	; 0x40
    8f2a:	d8aa      	bhi.n	8e82 <_usb_d_dev_ep_enable+0x136>
    8f2c:	2920      	cmp	r1, #32
    8f2e:	d8aa      	bhi.n	8e86 <_usb_d_dev_ep_enable+0x13a>
    8f30:	2910      	cmp	r1, #16
    8f32:	d8aa      	bhi.n	8e8a <_usb_d_dev_ep_enable+0x13e>
    8f34:	2908      	cmp	r1, #8
    8f36:	bf94      	ite	ls
    8f38:	2100      	movls	r1, #0
    8f3a:	2101      	movhi	r1, #1
    8f3c:	e790      	b.n	8e60 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8f3e:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8f42:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8f44:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8f48:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8f4a:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    8f4e:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8f50:	2640      	movs	r6, #64	; 0x40
    8f52:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8f56:	2180      	movs	r1, #128	; 0x80
    8f58:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    8f5c:	4f27      	ldr	r7, [pc, #156]	; (8ffc <_usb_d_dev_ep_enable+0x2b0>)
    8f5e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    8f62:	2000      	movs	r0, #0
    8f64:	72a8      	strb	r0, [r5, #10]
    8f66:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8f68:	009c      	lsls	r4, r3, #2
    8f6a:	18e1      	adds	r1, r4, r3
    8f6c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    8f70:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    8f74:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8f78:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    8f7c:	0152      	lsls	r2, r2, #5
    8f7e:	18b9      	adds	r1, r7, r2
    8f80:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8f82:	4423      	add	r3, r4
    8f84:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8f88:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    8f8c:	684b      	ldr	r3, [r1, #4]
    8f8e:	f364 339b 	bfi	r3, r4, #14, #14
    8f92:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8f94:	684b      	ldr	r3, [r1, #4]
    8f96:	f360 030d 	bfi	r3, r0, #0, #14
    8f9a:	604b      	str	r3, [r1, #4]
    8f9c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    8fa0:	21b0      	movs	r1, #176	; 0xb0
    8fa2:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8fa6:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8faa:	461a      	mov	r2, r3
    8fac:	2310      	movs	r3, #16
    8fae:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    8fb2:	e760      	b.n	8e76 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fb4:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8fb8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fba:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8fbe:	2605      	movs	r6, #5
    8fc0:	e7c3      	b.n	8f4a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fc2:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8fc6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fc8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8fcc:	2603      	movs	r6, #3
    8fce:	e7bc      	b.n	8f4a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fd0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8fd4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fd6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8fda:	2606      	movs	r6, #6
    8fdc:	e7b5      	b.n	8f4a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fde:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8fe2:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fe4:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8fe8:	2604      	movs	r6, #4
    8fea:	e7ae      	b.n	8f4a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8fec:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    8ff0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    8ff2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ff6:	2602      	movs	r6, #2
    8ff8:	e7a7      	b.n	8f4a <_usb_d_dev_ep_enable+0x1fe>
    8ffa:	bf00      	nop
    8ffc:	200009a8 	.word	0x200009a8
    9000:	0fffc000 	.word	0x0fffc000

00009004 <_usb_d_dev_ep_stall>:
{
    9004:	b470      	push	{r4, r5, r6}
    9006:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    9008:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    900a:	f010 000f 	ands.w	r0, r0, #15
    900e:	d008      	beq.n	9022 <_usb_d_dev_ep_stall+0x1e>
    9010:	2b00      	cmp	r3, #0
    9012:	bfb4      	ite	lt
    9014:	1d43      	addlt	r3, r0, #5
    9016:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    9018:	2805      	cmp	r0, #5
    901a:	d903      	bls.n	9024 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    901c:	f06f 0011 	mvn.w	r0, #17
    9020:	e018      	b.n	9054 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    9022:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    9024:	2901      	cmp	r1, #1
    9026:	d017      	beq.n	9058 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9028:	2900      	cmp	r1, #0
    902a:	d03a      	beq.n	90a2 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    902c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9030:	4a45      	ldr	r2, [pc, #276]	; (9148 <_usb_d_dev_ep_stall+0x144>)
    9032:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9036:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    903a:	f003 030f 	and.w	r3, r3, #15
    903e:	015b      	lsls	r3, r3, #5
    9040:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9044:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9048:	2310      	movs	r3, #16
    904a:	40a3      	lsls	r3, r4
    904c:	421a      	tst	r2, r3
    904e:	bf14      	ite	ne
    9050:	2001      	movne	r0, #1
    9052:	2000      	moveq	r0, #0
}
    9054:	bc70      	pop	{r4, r5, r6}
    9056:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9058:	2510      	movs	r5, #16
    905a:	40a5      	lsls	r5, r4
    905c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    905e:	493a      	ldr	r1, [pc, #232]	; (9148 <_usb_d_dev_ep_stall+0x144>)
    9060:	009e      	lsls	r6, r3, #2
    9062:	18f2      	adds	r2, r6, r3
    9064:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    9068:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    906c:	f002 020f 	and.w	r2, r2, #15
    9070:	0150      	lsls	r0, r2, #5
    9072:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    9076:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    907a:	2020      	movs	r0, #32
    907c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9080:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9082:	0152      	lsls	r2, r2, #5
    9084:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    9088:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    908c:	4433      	add	r3, r6
    908e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9092:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9096:	f042 0208 	orr.w	r2, r2, #8
    909a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    909e:	2000      	movs	r0, #0
    90a0:	e7d8      	b.n	9054 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    90a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    90a6:	4928      	ldr	r1, [pc, #160]	; (9148 <_usb_d_dev_ep_stall+0x144>)
    90a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    90ac:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    90b0:	f002 020f 	and.w	r2, r2, #15
    90b4:	0151      	lsls	r1, r2, #5
    90b6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    90ba:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    90be:	2010      	movs	r0, #16
    90c0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    90c2:	4205      	tst	r5, r0
    90c4:	d03c      	beq.n	9140 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    90c6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    90c8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    90cc:	2020      	movs	r0, #32
    90ce:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    90d0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    90d2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    90d6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    90da:	4202      	tst	r2, r0
    90dc:	d007      	beq.n	90ee <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    90de:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    90e2:	2201      	movs	r2, #1
    90e4:	fa02 f404 	lsl.w	r4, r2, r4
    90e8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    90ea:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    90ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    90f2:	4815      	ldr	r0, [pc, #84]	; (9148 <_usb_d_dev_ep_stall+0x144>)
    90f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    90f8:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    90fc:	f002 0207 	and.w	r2, r2, #7
    9100:	2a01      	cmp	r2, #1
    9102:	d00c      	beq.n	911e <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    9104:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9108:	4a0f      	ldr	r2, [pc, #60]	; (9148 <_usb_d_dev_ep_stall+0x144>)
    910a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    910e:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9112:	f36f 02c3 	bfc	r2, #3, #1
    9116:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    911a:	2000      	movs	r0, #0
    911c:	e79a      	b.n	9054 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    911e:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9122:	f012 0f30 	tst.w	r2, #48	; 0x30
    9126:	d10d      	bne.n	9144 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    9128:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    912c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9130:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    9134:	f36f 02c3 	bfc	r2, #3, #1
    9138:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    913c:	2000      	movs	r0, #0
    913e:	e789      	b.n	9054 <_usb_d_dev_ep_stall+0x50>
    9140:	2000      	movs	r0, #0
    9142:	e787      	b.n	9054 <_usb_d_dev_ep_stall+0x50>
    9144:	2000      	movs	r0, #0
    9146:	e785      	b.n	9054 <_usb_d_dev_ep_stall+0x50>
    9148:	200009a8 	.word	0x200009a8

0000914c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    914c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    914e:	f000 040f 	and.w	r4, r0, #15
    9152:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9154:	4a14      	ldr	r2, [pc, #80]	; (91a8 <_usb_d_dev_ep_read_req+0x5c>)
    9156:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    9158:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    915a:	6840      	ldr	r0, [r0, #4]
    915c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9160:	2c05      	cmp	r4, #5
    9162:	d817      	bhi.n	9194 <_usb_d_dev_ep_read_req+0x48>
    9164:	b1c9      	cbz	r1, 919a <_usb_d_dev_ep_read_req+0x4e>
    9166:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    916a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    916e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9170:	2a11      	cmp	r2, #17
    9172:	d115      	bne.n	91a0 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9174:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    9178:	f012 0f10 	tst.w	r2, #16
    917c:	d102      	bne.n	9184 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    917e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    9180:	bc30      	pop	{r4, r5}
    9182:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    9184:	682c      	ldr	r4, [r5, #0]
    9186:	686a      	ldr	r2, [r5, #4]
    9188:	600c      	str	r4, [r1, #0]
    918a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    918c:	2210      	movs	r2, #16
    918e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    9192:	e7f5      	b.n	9180 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    9194:	f06f 0011 	mvn.w	r0, #17
    9198:	e7f2      	b.n	9180 <_usb_d_dev_ep_read_req+0x34>
    919a:	f06f 0011 	mvn.w	r0, #17
    919e:	e7ef      	b.n	9180 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    91a0:	f06f 0012 	mvn.w	r0, #18
    91a4:	e7ec      	b.n	9180 <_usb_d_dev_ep_read_req+0x34>
    91a6:	bf00      	nop
    91a8:	200009a8 	.word	0x200009a8

000091ac <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    91ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91b0:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    91b2:	7a03      	ldrb	r3, [r0, #8]
    91b4:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    91b6:	f013 030f 	ands.w	r3, r3, #15
    91ba:	f000 80c2 	beq.w	9342 <_usb_d_dev_ep_trans+0x196>
    91be:	2e00      	cmp	r6, #0
    91c0:	bfb4      	ite	lt
    91c2:	1d5a      	addlt	r2, r3, #5
    91c4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    91c6:	4614      	mov	r4, r2
    91c8:	4969      	ldr	r1, [pc, #420]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    91ca:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    91ce:	1c55      	adds	r5, r2, #1
    91d0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    91d4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    91d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    91dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    91e0:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    91e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    91e8:	428a      	cmp	r2, r1
    91ea:	d025      	beq.n	9238 <_usb_d_dev_ep_trans+0x8c>
    91ec:	1e55      	subs	r5, r2, #1
    91ee:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    91f0:	6841      	ldr	r1, [r0, #4]
    91f2:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    91f4:	2b05      	cmp	r3, #5
    91f6:	f200 8092 	bhi.w	931e <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    91fa:	6803      	ldr	r3, [r0, #0]
    91fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9200:	d31c      	bcc.n	923c <_usb_d_dev_ep_trans+0x90>
    9202:	eb03 0c01 	add.w	ip, r3, r1
    9206:	f8df e180 	ldr.w	lr, [pc, #384]	; 9388 <_usb_d_dev_ep_trans+0x1dc>
    920a:	45f4      	cmp	ip, lr
    920c:	d816      	bhi.n	923c <_usb_d_dev_ep_trans+0x90>
    920e:	f013 0f03 	tst.w	r3, #3
    9212:	d113      	bne.n	923c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    9214:	2e00      	cmp	r6, #0
    9216:	db2a      	blt.n	926e <_usb_d_dev_ep_trans+0xc2>
    9218:	428a      	cmp	r2, r1
    921a:	f200 809c 	bhi.w	9356 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    921e:	b34d      	cbz	r5, 9274 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    9220:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9224:	4a52      	ldr	r2, [pc, #328]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    9226:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    922a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    922e:	2b00      	cmp	r3, #0
    9230:	d07b      	beq.n	932a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    9232:	f04f 0800 	mov.w	r8, #0
    9236:	e00c      	b.n	9252 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9238:	4615      	mov	r5, r2
    923a:	e7d9      	b.n	91f0 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    923c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9240:	4a4b      	ldr	r2, [pc, #300]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    9242:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    924a:	2b00      	cmp	r3, #0
    924c:	d06a      	beq.n	9324 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    924e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9252:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9256:	4a46      	ldr	r2, [pc, #280]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    9258:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    925c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9260:	f013 0f08 	tst.w	r3, #8
    9264:	d009      	beq.n	927a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    9266:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    9268:	b003      	add	sp, #12
    926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    926e:	f04f 0800 	mov.w	r8, #0
    9272:	e7ee      	b.n	9252 <_usb_d_dev_ep_trans+0xa6>
    9274:	f04f 0800 	mov.w	r8, #0
    9278:	e7eb      	b.n	9252 <_usb_d_dev_ep_trans+0xa6>
    927a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    927c:	a801      	add	r0, sp, #4
    927e:	4b3d      	ldr	r3, [pc, #244]	; (9374 <_usb_d_dev_ep_trans+0x1c8>)
    9280:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9282:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9286:	4a3a      	ldr	r2, [pc, #232]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    9288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    928c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    9290:	f013 0f40 	tst.w	r3, #64	; 0x40
    9294:	d13c      	bne.n	9310 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    9296:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    929a:	4b35      	ldr	r3, [pc, #212]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    929c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    92a0:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    92a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    92a8:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    92ac:	a801      	add	r0, sp, #4
    92ae:	4b32      	ldr	r3, [pc, #200]	; (9378 <_usb_d_dev_ep_trans+0x1cc>)
    92b0:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    92b2:	f8da 3000 	ldr.w	r3, [sl]
    92b6:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    92ba:	f8da 3004 	ldr.w	r3, [sl, #4]
    92be:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    92c2:	2300      	movs	r3, #0
    92c4:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    92c8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    92ca:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    92ce:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    92d2:	f368 1345 	bfi	r3, r8, #5, #1
    92d6:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    92da:	f89a 3009 	ldrb.w	r3, [sl, #9]
    92de:	b1e3      	cbz	r3, 931a <_usb_d_dev_ep_trans+0x16e>
    92e0:	fab5 f585 	clz	r5, r5
    92e4:	096d      	lsrs	r5, r5, #5
    92e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    92ea:	4b21      	ldr	r3, [pc, #132]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    92ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    92f0:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    92f4:	f365 1304 	bfi	r3, r5, #4, #1
    92f8:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    92fc:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    92fe:	f04f 0100 	mov.w	r1, #0
    9302:	4638      	mov	r0, r7
    9304:	bfb4      	ite	lt
    9306:	4b1d      	ldrlt	r3, [pc, #116]	; (937c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    9308:	4b1d      	ldrge	r3, [pc, #116]	; (9380 <_usb_d_dev_ep_trans+0x1d4>)
    930a:	4798      	blx	r3
	return ERR_NONE;
    930c:	2000      	movs	r0, #0
    930e:	e7ab      	b.n	9268 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    9310:	a801      	add	r0, sp, #4
    9312:	4b19      	ldr	r3, [pc, #100]	; (9378 <_usb_d_dev_ep_trans+0x1cc>)
    9314:	4798      	blx	r3
		return USB_BUSY;
    9316:	2001      	movs	r0, #1
    9318:	e7a6      	b.n	9268 <_usb_d_dev_ep_trans+0xbc>
    931a:	2500      	movs	r5, #0
    931c:	e7e3      	b.n	92e6 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    931e:	f06f 0011 	mvn.w	r0, #17
    9322:	e7a1      	b.n	9268 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9324:	f06f 0012 	mvn.w	r0, #18
    9328:	e79e      	b.n	9268 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    932a:	f06f 0011 	mvn.w	r0, #17
    932e:	e79b      	b.n	9268 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    9330:	f06f 0012 	mvn.w	r0, #18
    9334:	e798      	b.n	9268 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    9336:	6841      	ldr	r1, [r0, #4]
    9338:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    933c:	4f11      	ldr	r7, [pc, #68]	; (9384 <_usb_d_dev_ep_trans+0x1d8>)
    933e:	2400      	movs	r4, #0
    9340:	e75b      	b.n	91fa <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9342:	4a0b      	ldr	r2, [pc, #44]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    9344:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    9348:	f240 31ff 	movw	r1, #1023	; 0x3ff
    934c:	428a      	cmp	r2, r1
    934e:	d0f2      	beq.n	9336 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    9350:	4f0c      	ldr	r7, [pc, #48]	; (9384 <_usb_d_dev_ep_trans+0x1d8>)
    9352:	2400      	movs	r4, #0
    9354:	e74a      	b.n	91ec <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    9356:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    935a:	4a05      	ldr	r2, [pc, #20]	; (9370 <_usb_d_dev_ep_trans+0x1c4>)
    935c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9364:	2b00      	cmp	r3, #0
    9366:	d0e3      	beq.n	9330 <_usb_d_dev_ep_trans+0x184>
    9368:	f04f 0801 	mov.w	r8, #1
    936c:	e771      	b.n	9252 <_usb_d_dev_ep_trans+0xa6>
    936e:	bf00      	nop
    9370:	200009a8 	.word	0x200009a8
    9374:	000046a1 	.word	0x000046a1
    9378:	000046af 	.word	0x000046af
    937c:	000083d1 	.word	0x000083d1
    9380:	00008555 	.word	0x00008555
    9384:	20000a7c 	.word	0x20000a7c
    9388:	20041fff 	.word	0x20041fff

0000938c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    938c:	4b07      	ldr	r3, [pc, #28]	; (93ac <_usb_d_dev_register_callback+0x20>)
    938e:	2900      	cmp	r1, #0
    9390:	bf08      	it	eq
    9392:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    9394:	2801      	cmp	r0, #1
    9396:	d004      	beq.n	93a2 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    9398:	b910      	cbnz	r0, 93a0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    939a:	4b05      	ldr	r3, [pc, #20]	; (93b0 <_usb_d_dev_register_callback+0x24>)
    939c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    93a0:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    93a2:	4b03      	ldr	r3, [pc, #12]	; (93b0 <_usb_d_dev_register_callback+0x24>)
    93a4:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    93a8:	4770      	bx	lr
    93aa:	bf00      	nop
    93ac:	00008141 	.word	0x00008141
    93b0:	200009a8 	.word	0x200009a8

000093b4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    93b4:	4b0a      	ldr	r3, [pc, #40]	; (93e0 <_usb_d_dev_register_ep_callback+0x2c>)
    93b6:	2900      	cmp	r1, #0
    93b8:	bf08      	it	eq
    93ba:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    93bc:	4603      	mov	r3, r0
    93be:	b138      	cbz	r0, 93d0 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    93c0:	2801      	cmp	r0, #1
    93c2:	d009      	beq.n	93d8 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    93c4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    93c6:	bf04      	itt	eq
    93c8:	4b06      	ldreq	r3, [pc, #24]	; (93e4 <_usb_d_dev_register_ep_callback+0x30>)
    93ca:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    93ce:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    93d0:	4b04      	ldr	r3, [pc, #16]	; (93e4 <_usb_d_dev_register_ep_callback+0x30>)
    93d2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    93d6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    93d8:	4b02      	ldr	r3, [pc, #8]	; (93e4 <_usb_d_dev_register_ep_callback+0x30>)
    93da:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    93de:	4770      	bx	lr
    93e0:	00008141 	.word	0x00008141
    93e4:	200009a8 	.word	0x200009a8

000093e8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    93e8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    93ea:	4b01      	ldr	r3, [pc, #4]	; (93f0 <USB_0_Handler+0x8>)
    93ec:	4798      	blx	r3
    93ee:	bd08      	pop	{r3, pc}
    93f0:	00008745 	.word	0x00008745

000093f4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    93f4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    93f6:	4b01      	ldr	r3, [pc, #4]	; (93fc <USB_1_Handler+0x8>)
    93f8:	4798      	blx	r3
    93fa:	bd08      	pop	{r3, pc}
    93fc:	00008745 	.word	0x00008745

00009400 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    9400:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    9402:	4b01      	ldr	r3, [pc, #4]	; (9408 <USB_2_Handler+0x8>)
    9404:	4798      	blx	r3
    9406:	bd08      	pop	{r3, pc}
    9408:	00008745 	.word	0x00008745

0000940c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    940c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    940e:	4b01      	ldr	r3, [pc, #4]	; (9414 <USB_3_Handler+0x8>)
    9410:	4798      	blx	r3
    9412:	bd08      	pop	{r3, pc}
    9414:	00008745 	.word	0x00008745

00009418 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    9418:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    941a:	4604      	mov	r4, r0
    941c:	b340      	cbz	r0, 9470 <_wdt_init+0x58>
    941e:	6800      	ldr	r0, [r0, #0]
    9420:	3000      	adds	r0, #0
    9422:	bf18      	it	ne
    9424:	2001      	movne	r0, #1
    9426:	2250      	movs	r2, #80	; 0x50
    9428:	4915      	ldr	r1, [pc, #84]	; (9480 <_wdt_init+0x68>)
    942a:	4b16      	ldr	r3, [pc, #88]	; (9484 <_wdt_init+0x6c>)
    942c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    942e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9430:	689a      	ldr	r2, [r3, #8]
    9432:	f012 0f0e 	tst.w	r2, #14
    9436:	d1fb      	bne.n	9430 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9438:	781a      	ldrb	r2, [r3, #0]
    943a:	09d2      	lsrs	r2, r2, #7
    943c:	d11a      	bne.n	9474 <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    943e:	689a      	ldr	r2, [r3, #8]
    9440:	f012 0f0e 	tst.w	r2, #14
    9444:	d1fb      	bne.n	943e <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9446:	781a      	ldrb	r2, [r3, #0]
    9448:	f012 0f02 	tst.w	r2, #2
    944c:	d115      	bne.n	947a <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    944e:	781a      	ldrb	r2, [r3, #0]
    9450:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    9454:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9456:	689a      	ldr	r2, [r3, #8]
    9458:	f012 0f0e 	tst.w	r2, #14
    945c:	d1fb      	bne.n	9456 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    945e:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9460:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    9466:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    946a:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    946c:	2000      	movs	r0, #0
    946e:	bd10      	pop	{r4, pc}
    9470:	2000      	movs	r0, #0
    9472:	e7d8      	b.n	9426 <_wdt_init+0xe>
		return ERR_DENIED;
    9474:	f06f 0010 	mvn.w	r0, #16
    9478:	bd10      	pop	{r4, pc}
    947a:	f06f 0010 	mvn.w	r0, #16
}
    947e:	bd10      	pop	{r4, pc}
    9480:	0000d9a8 	.word	0x0000d9a8
    9484:	00005a39 	.word	0x00005a39

00009488 <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    9488:	2201      	movs	r2, #1
    948a:	4b01      	ldr	r3, [pc, #4]	; (9490 <RTC_Scheduler_report_cb+0x8>)
    948c:	701a      	strb	r2, [r3, #0]
    948e:	4770      	bx	lr
    9490:	20000d68 	.word	0x20000d68

00009494 <RTC_Scheduler_heartbeat_cb>:
{
    9494:	b508      	push	{r3, lr}
	grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_HEARTBEAT);
    9496:	2100      	movs	r1, #0
    9498:	4801      	ldr	r0, [pc, #4]	; (94a0 <RTC_Scheduler_heartbeat_cb+0xc>)
    949a:	4b02      	ldr	r3, [pc, #8]	; (94a4 <RTC_Scheduler_heartbeat_cb+0x10>)
    949c:	4798      	blx	r3
    949e:	bd08      	pop	{r3, pc}
    94a0:	20001d0c 	.word	0x20001d0c
    94a4:	00003ff5 	.word	0x00003ff5

000094a8 <RTC_Scheduler_ping_cb>:
{
    94a8:	b508      	push	{r3, lr}
	pingflag++;
    94aa:	4a11      	ldr	r2, [pc, #68]	; (94f0 <RTC_Scheduler_ping_cb+0x48>)
    94ac:	7853      	ldrb	r3, [r2, #1]
    94ae:	3301      	adds	r3, #1
    94b0:	b2db      	uxtb	r3, r3
    94b2:	7053      	strb	r3, [r2, #1]
	switch (pingflag%4)
    94b4:	7853      	ldrb	r3, [r2, #1]
    94b6:	f003 0303 	and.w	r3, r3, #3
    94ba:	2b03      	cmp	r3, #3
    94bc:	d816      	bhi.n	94ec <RTC_Scheduler_ping_cb+0x44>
    94be:	e8df f003 	tbb	[pc, r3]
    94c2:	0702      	.short	0x0702
    94c4:	110c      	.short	0x110c
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_NORTH);
    94c6:	2101      	movs	r1, #1
    94c8:	480a      	ldr	r0, [pc, #40]	; (94f4 <RTC_Scheduler_ping_cb+0x4c>)
    94ca:	4b0b      	ldr	r3, [pc, #44]	; (94f8 <RTC_Scheduler_ping_cb+0x50>)
    94cc:	4798      	blx	r3
			break;
    94ce:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_EAST);
    94d0:	2102      	movs	r1, #2
    94d2:	4808      	ldr	r0, [pc, #32]	; (94f4 <RTC_Scheduler_ping_cb+0x4c>)
    94d4:	4b08      	ldr	r3, [pc, #32]	; (94f8 <RTC_Scheduler_ping_cb+0x50>)
    94d6:	4798      	blx	r3
			break;
    94d8:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_SOUTH);
    94da:	2103      	movs	r1, #3
    94dc:	4805      	ldr	r0, [pc, #20]	; (94f4 <RTC_Scheduler_ping_cb+0x4c>)
    94de:	4b06      	ldr	r3, [pc, #24]	; (94f8 <RTC_Scheduler_ping_cb+0x50>)
    94e0:	4798      	blx	r3
			break;
    94e2:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_WEST);
    94e4:	2104      	movs	r1, #4
    94e6:	4803      	ldr	r0, [pc, #12]	; (94f4 <RTC_Scheduler_ping_cb+0x4c>)
    94e8:	4b03      	ldr	r3, [pc, #12]	; (94f8 <RTC_Scheduler_ping_cb+0x50>)
    94ea:	4798      	blx	r3
    94ec:	bd08      	pop	{r3, pc}
    94ee:	bf00      	nop
    94f0:	20000d68 	.word	0x20000d68
    94f4:	20001d0c 	.word	0x20001d0c
    94f8:	00003ff5 	.word	0x00003ff5

000094fc <grid_task_timer_tick>:
void grid_task_timer_tick(struct grid_task_model* mod){
    94fc:	7843      	ldrb	r3, [r0, #1]
    94fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	mod->timer[mod->current_task]++;
    9502:	6843      	ldr	r3, [r0, #4]
    9504:	3301      	adds	r3, #1
    9506:	6043      	str	r3, [r0, #4]
    9508:	4770      	bx	lr
	...

0000950c <RTC_Scheduler_realtime_cb>:
{
    950c:	b510      	push	{r4, lr}
    950e:	b082      	sub	sp, #8
	grid_sys_rtc_tick_time(&grid_sys_state);	
    9510:	481f      	ldr	r0, [pc, #124]	; (9590 <RTC_Scheduler_realtime_cb+0x84>)
    9512:	4b20      	ldr	r3, [pc, #128]	; (9594 <RTC_Scheduler_realtime_cb+0x88>)
    9514:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    9516:	4820      	ldr	r0, [pc, #128]	; (9598 <RTC_Scheduler_realtime_cb+0x8c>)
    9518:	4b20      	ldr	r3, [pc, #128]	; (959c <RTC_Scheduler_realtime_cb+0x90>)
    951a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    951c:	a801      	add	r0, sp, #4
    951e:	4b20      	ldr	r3, [pc, #128]	; (95a0 <RTC_Scheduler_realtime_cb+0x94>)
    9520:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9522:	4b20      	ldr	r3, [pc, #128]	; (95a4 <RTC_Scheduler_realtime_cb+0x98>)
    9524:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9528:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    952c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9530:	4054      	eors	r4, r2
    9532:	400c      	ands	r4, r1
    9534:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    9536:	a801      	add	r0, sp, #4
    9538:	4b1b      	ldr	r3, [pc, #108]	; (95a8 <RTC_Scheduler_realtime_cb+0x9c>)
    953a:	4798      	blx	r3
	if (mapmode_value != mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0]){
    953c:	4b1b      	ldr	r3, [pc, #108]	; (95ac <RTC_Scheduler_realtime_cb+0xa0>)
    953e:	685b      	ldr	r3, [r3, #4]
    9540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    9542:	781a      	ldrb	r2, [r3, #0]
    9544:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    9548:	4294      	cmp	r4, r2
    954a:	d002      	beq.n	9552 <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] == 0){
    954c:	b91a      	cbnz	r2, 9556 <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 1;
    954e:	2201      	movs	r2, #1
    9550:	701a      	strb	r2, [r3, #0]
}
    9552:	b002      	add	sp, #8
    9554:	bd10      	pop	{r4, pc}
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 0;
    9556:	2200      	movs	r2, #0
    9558:	701a      	strb	r2, [r3, #0]
			grid_sys_state.bank_select = (grid_sys_state.bank_select+1)%4;
    955a:	4a0d      	ldr	r2, [pc, #52]	; (9590 <RTC_Scheduler_realtime_cb+0x84>)
    955c:	7a53      	ldrb	r3, [r2, #9]
    955e:	3301      	adds	r3, #1
    9560:	4259      	negs	r1, r3
    9562:	f003 0303 	and.w	r3, r3, #3
    9566:	f001 0103 	and.w	r1, r1, #3
    956a:	bf58      	it	pl
    956c:	424b      	negpl	r3, r1
    956e:	b2db      	uxtb	r3, r3
    9570:	7253      	strb	r3, [r2, #9]
			value = grid_sys_state.bank_select;
    9572:	7a53      	ldrb	r3, [r2, #9]
 			grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    9574:	7a52      	ldrb	r2, [r2, #9]
    9576:	4c0d      	ldr	r4, [pc, #52]	; (95ac <RTC_Scheduler_realtime_cb+0xa0>)
    9578:	6863      	ldr	r3, [r4, #4]
    957a:	6d58      	ldr	r0, [r3, #84]	; 0x54
    957c:	2102      	movs	r1, #2
    957e:	3007      	adds	r0, #7
    9580:	4b0b      	ldr	r3, [pc, #44]	; (95b0 <RTC_Scheduler_realtime_cb+0xa4>)
    9582:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    9584:	2105      	movs	r1, #5
    9586:	4620      	mov	r0, r4
    9588:	4b0a      	ldr	r3, [pc, #40]	; (95b4 <RTC_Scheduler_realtime_cb+0xa8>)
    958a:	4798      	blx	r3
}
    958c:	e7e1      	b.n	9552 <RTC_Scheduler_realtime_cb+0x46>
    958e:	bf00      	nop
    9590:	20001d1c 	.word	0x20001d1c
    9594:	00003847 	.word	0x00003847
    9598:	20003b78 	.word	0x20003b78
    959c:	000094fd 	.word	0x000094fd
    95a0:	000046a1 	.word	0x000046a1
    95a4:	41008000 	.word	0x41008000
    95a8:	000046af 	.word	0x000046af
    95ac:	20001d0c 	.word	0x20001d0c
    95b0:	00003935 	.word	0x00003935
    95b4:	00003ff5 	.word	0x00003ff5

000095b8 <grid_task_timer_reset>:
void grid_task_timer_reset(struct grid_task_model* mod){
    95b8:	1d03      	adds	r3, r0, #4
    95ba:	3024      	adds	r0, #36	; 0x24
		mod->timer[i] = 0;
    95bc:	2200      	movs	r2, #0
    95be:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    95c2:	4283      	cmp	r3, r0
    95c4:	d1fb      	bne.n	95be <grid_task_timer_reset+0x6>
}
    95c6:	4770      	bx	lr

000095c8 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    95c8:	69c3      	ldr	r3, [r0, #28]
    95ca:	2b00      	cmp	r3, #0
    95cc:	f040 80ae 	bne.w	972c <grid_port_receive_task+0x164>
void grid_port_receive_task(struct grid_port* por){
    95d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    95d4:	b083      	sub	sp, #12
    95d6:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 2000){
    95d8:	6983      	ldr	r3, [r0, #24]
    95da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    95de:	d92b      	bls.n	9638 <grid_port_receive_task+0x70>
		if (por->partner_status == 1){
    95e0:	f890 350f 	ldrb.w	r3, [r0, #1295]	; 0x50f
    95e4:	2b01      	cmp	r3, #1
    95e6:	d121      	bne.n	962c <grid_port_receive_task+0x64>
			printf("{\"type\":\"PORT\", \"data\": [\"Timeout: Disconnect\"]}\r\n");
    95e8:	4851      	ldr	r0, [pc, #324]	; (9730 <grid_port_receive_task+0x168>)
    95ea:	4b52      	ldr	r3, [pc, #328]	; (9734 <grid_port_receive_task+0x16c>)
    95ec:	4798      	blx	r3
			por->rx_double_buffer_seek_start_index = 0;
    95ee:	2300      	movs	r3, #0
    95f0:	6223      	str	r3, [r4, #32]
			por->rx_double_buffer_read_start_index = 0;
    95f2:	6263      	str	r3, [r4, #36]	; 0x24
			por->partner_status = 0;
    95f4:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
			por->rx_double_buffer_timeout = 0;
    95f8:	61a3      	str	r3, [r4, #24]
			grid_sys_port_reset_dma(por);
    95fa:	4620      	mov	r0, r4
    95fc:	4b4e      	ldr	r3, [pc, #312]	; (9738 <grid_port_receive_task+0x170>)
    95fe:	4798      	blx	r3
				por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    9600:	6a22      	ldr	r2, [r4, #32]
    9602:	f44f 7316 	mov.w	r3, #600	; 0x258
    9606:	3b01      	subs	r3, #1
    9608:	b29b      	uxth	r3, r3
			for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    960a:	2b00      	cmp	r3, #0
    960c:	d1fb      	bne.n	9606 <grid_port_receive_task+0x3e>
    960e:	18a3      	adds	r3, r4, r2
    9610:	2200      	movs	r2, #0
    9612:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    9616:	23c8      	movs	r3, #200	; 0xc8
    9618:	9301      	str	r3, [sp, #4]
    961a:	2302      	movs	r3, #2
    961c:	9300      	str	r3, [sp, #0]
    961e:	23ff      	movs	r3, #255	; 0xff
    9620:	461a      	mov	r2, r3
    9622:	4619      	mov	r1, r3
    9624:	4845      	ldr	r0, [pc, #276]	; (973c <grid_port_receive_task+0x174>)
    9626:	4d46      	ldr	r5, [pc, #280]	; (9740 <grid_port_receive_task+0x178>)
    9628:	47a8      	blx	r5
    962a:	e007      	b.n	963c <grid_port_receive_task+0x74>
			por->rx_double_buffer_seek_start_index = 0;
    962c:	2300      	movs	r3, #0
    962e:	6203      	str	r3, [r0, #32]
			por->rx_double_buffer_read_start_index = 0;
    9630:	6243      	str	r3, [r0, #36]	; 0x24
			grid_sys_port_reset_dma(por);
    9632:	4b41      	ldr	r3, [pc, #260]	; (9738 <grid_port_receive_task+0x170>)
    9634:	4798      	blx	r3
    9636:	e001      	b.n	963c <grid_port_receive_task+0x74>
		por->rx_double_buffer_timeout++;
    9638:	3301      	adds	r3, #1
    963a:	6183      	str	r3, [r0, #24]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    963c:	6a22      	ldr	r2, [r4, #32]
    963e:	18a3      	adds	r3, r4, r2
    9640:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
    9644:	2b0a      	cmp	r3, #10
    9646:	d00b      	beq.n	9660 <grid_port_receive_task+0x98>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    9648:	b173      	cbz	r3, 9668 <grid_port_receive_task+0xa0>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    964a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    964c:	1e59      	subs	r1, r3, #1
    964e:	428a      	cmp	r2, r1
    9650:	d00d      	beq.n	966e <grid_port_receive_task+0xa6>
    9652:	f44f 75f5 	mov.w	r5, #490	; 0x1ea
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    9656:	4e3b      	ldr	r6, [pc, #236]	; (9744 <grid_port_receive_task+0x17c>)
			printf("{\"type\":\"ERROR\", \"data\": [\"Buffer Overrun\"]}\r\n");
    9658:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 9754 <grid_port_receive_task+0x18c>
    965c:	4f35      	ldr	r7, [pc, #212]	; (9734 <grid_port_receive_task+0x16c>)
    965e:	e03e      	b.n	96de <grid_port_receive_task+0x116>
			por->rx_double_buffer_status = 1;
    9660:	2301      	movs	r3, #1
    9662:	61e3      	str	r3, [r4, #28]
			por->rx_double_buffer_timeout = 0;
    9664:	2300      	movs	r3, #0
    9666:	61a3      	str	r3, [r4, #24]
}
    9668:	b003      	add	sp, #12
    966a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    966e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9672:	4b35      	ldr	r3, [pc, #212]	; (9748 <grid_port_receive_task+0x180>)
    9674:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			printf("{\"type\":\"TRAP\", \"data\": [\"TRAP1\"]}\r\n");
    9678:	4834      	ldr	r0, [pc, #208]	; (974c <grid_port_receive_task+0x184>)
    967a:	4b2e      	ldr	r3, [pc, #184]	; (9734 <grid_port_receive_task+0x16c>)
    967c:	4798      	blx	r3
    967e:	e7fe      	b.n	967e <grid_port_receive_task+0xb6>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    9680:	2b00      	cmp	r3, #0
    9682:	d130      	bne.n	96e6 <grid_port_receive_task+0x11e>
    9684:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9688:	4b2f      	ldr	r3, [pc, #188]	; (9748 <grid_port_receive_task+0x180>)
    968a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			printf("{\"type\":\"TRAP\", \"data\": [\"TRAP2\"]}\r\n");
    968e:	4830      	ldr	r0, [pc, #192]	; (9750 <grid_port_receive_task+0x188>)
    9690:	4b28      	ldr	r3, [pc, #160]	; (9734 <grid_port_receive_task+0x16c>)
    9692:	4798      	blx	r3
    9694:	e7fe      	b.n	9694 <grid_port_receive_task+0xcc>
			printf("{\"type\":\"ERROR\", \"data\": [\"Buffer Overrun\"]}\r\n");
    9696:	4640      	mov	r0, r8
    9698:	47b8      	blx	r7
			por->rx_double_buffer_timeout = 0;
    969a:	2300      	movs	r3, #0
    969c:	61a3      	str	r3, [r4, #24]
			grid_sys_port_reset_dma(por);
    969e:	4620      	mov	r0, r4
    96a0:	4b25      	ldr	r3, [pc, #148]	; (9738 <grid_port_receive_task+0x170>)
    96a2:	4798      	blx	r3
				por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    96a4:	6a22      	ldr	r2, [r4, #32]
    96a6:	f44f 7316 	mov.w	r3, #600	; 0x258
    96aa:	3b01      	subs	r3, #1
    96ac:	b29b      	uxth	r3, r3
			for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    96ae:	2b00      	cmp	r3, #0
    96b0:	d1fb      	bne.n	96aa <grid_port_receive_task+0xe2>
    96b2:	18a3      	adds	r3, r4, r2
    96b4:	2200      	movs	r2, #0
    96b6:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    96ba:	e022      	b.n	9702 <grid_port_receive_task+0x13a>
			por->rx_double_buffer_timeout = 0;
    96bc:	2300      	movs	r3, #0
    96be:	61a3      	str	r3, [r4, #24]
			por->rx_double_buffer_seek_start_index=0;
    96c0:	6223      	str	r3, [r4, #32]
	for(uint32_t i = 0; i<490; i++){
    96c2:	3d01      	subs	r5, #1
    96c4:	d0d0      	beq.n	9668 <grid_port_receive_task+0xa0>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    96c6:	6a22      	ldr	r2, [r4, #32]
    96c8:	18a3      	adds	r3, r4, r2
    96ca:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
    96ce:	2b0a      	cmp	r3, #10
    96d0:	d0c6      	beq.n	9660 <grid_port_receive_task+0x98>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    96d2:	2b00      	cmp	r3, #0
    96d4:	d0c8      	beq.n	9668 <grid_port_receive_task+0xa0>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    96d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    96d8:	1e59      	subs	r1, r3, #1
    96da:	428a      	cmp	r2, r1
    96dc:	d0c7      	beq.n	966e <grid_port_receive_task+0xa6>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    96de:	f240 2157 	movw	r1, #599	; 0x257
    96e2:	428a      	cmp	r2, r1
    96e4:	d0cc      	beq.n	9680 <grid_port_receive_task+0xb8>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    96e6:	f203 2257 	addw	r2, r3, #599	; 0x257
    96ea:	fba6 1302 	umull	r1, r3, r6, r2
    96ee:	099b      	lsrs	r3, r3, #6
    96f0:	f44f 7116 	mov.w	r1, #600	; 0x258
    96f4:	fb01 2313 	mls	r3, r1, r3, r2
    96f8:	4423      	add	r3, r4
    96fa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
    96fe:	2b00      	cmp	r3, #0
    9700:	d1c9      	bne.n	9696 <grid_port_receive_task+0xce>
		grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 2, 200); // red
    9702:	23c8      	movs	r3, #200	; 0xc8
    9704:	9301      	str	r3, [sp, #4]
    9706:	2302      	movs	r3, #2
    9708:	9300      	str	r3, [sp, #0]
    970a:	2300      	movs	r3, #0
    970c:	461a      	mov	r2, r3
    970e:	2132      	movs	r1, #50	; 0x32
    9710:	480a      	ldr	r0, [pc, #40]	; (973c <grid_port_receive_task+0x174>)
    9712:	f8df 902c 	ldr.w	r9, [pc, #44]	; 9740 <grid_port_receive_task+0x178>
    9716:	47c8      	blx	r9
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    9718:	6a23      	ldr	r3, [r4, #32]
    971a:	f240 2256 	movw	r2, #598	; 0x256
    971e:	4293      	cmp	r3, r2
    9720:	d8cc      	bhi.n	96bc <grid_port_receive_task+0xf4>
			por->rx_double_buffer_timeout = 0;
    9722:	2200      	movs	r2, #0
    9724:	61a2      	str	r2, [r4, #24]
			por->rx_double_buffer_seek_start_index++;			
    9726:	3301      	adds	r3, #1
    9728:	6223      	str	r3, [r4, #32]
    972a:	e7ca      	b.n	96c2 <grid_port_receive_task+0xfa>
    972c:	4770      	bx	lr
    972e:	bf00      	nop
    9730:	0000d9c0 	.word	0x0000d9c0
    9734:	0000c009 	.word	0x0000c009
    9738:	000035b5 	.word	0x000035b5
    973c:	20001d1c 	.word	0x20001d1c
    9740:	000038a1 	.word	0x000038a1
    9744:	1b4e81b5 	.word	0x1b4e81b5
    9748:	41008000 	.word	0x41008000
    974c:	0000d9f4 	.word	0x0000d9f4
    9750:	0000da18 	.word	0x0000da18
    9754:	0000da3c 	.word	0x0000da3c

00009758 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t len){
    9758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    975c:	b089      	sub	sp, #36	; 0x24
    975e:	af02      	add	r7, sp, #8
    9760:	4604      	mov	r4, r0
    9762:	4615      	mov	r5, r2
	printf("{\"type\":\"PORT\", \"data\": [\"Decode\"]}\r\n");
    9764:	48ba      	ldr	r0, [pc, #744]	; (9a50 <grid_port_receive_decode+0x2f8>)
    9766:	4bbb      	ldr	r3, [pc, #748]	; (9a54 <grid_port_receive_decode+0x2fc>)
    9768:	4798      	blx	r3
	uint8_t error_flag = 0;
    976a:	2300      	movs	r3, #0
    976c:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[length];			
    976e:	1deb      	adds	r3, r5, #7
    9770:	f023 0307 	bic.w	r3, r3, #7
    9774:	ebad 0d03 	sub.w	sp, sp, r3
    9778:	a802      	add	r0, sp, #8
	for (uint32_t i = 0; i<length; i++){
    977a:	2d00      	cmp	r5, #0
    977c:	f000 81ed 	beq.w	9b5a <grid_port_receive_decode+0x402>
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9780:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9782:	eb00 0905 	add.w	r9, r0, r5
    9786:	4601      	mov	r1, r0
    9788:	eba2 0800 	sub.w	r8, r2, r0
    978c:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 9a58 <grid_port_receive_decode+0x300>
    9790:	f44f 7e16 	mov.w	lr, #600	; 0x258
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    9794:	2600      	movs	r6, #0
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    9796:	eb08 0a01 	add.w	sl, r8, r1
    979a:	fbac b30a 	umull	fp, r3, ip, sl
    979e:	099b      	lsrs	r3, r3, #6
    97a0:	fb0e a313 	mls	r3, lr, r3, sl
    97a4:	4423      	add	r3, r4
    97a6:	f893 a280 	ldrb.w	sl, [r3, #640]	; 0x280
    97aa:	f801 ab01 	strb.w	sl, [r1], #1
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    97ae:	f883 6280 	strb.w	r6, [r3, #640]	; 0x280
	for (uint32_t i = 0; i<length; i++){
    97b2:	4549      	cmp	r1, r9
    97b4:	d1ef      	bne.n	9796 <grid_port_receive_decode+0x3e>
	message = &buffer[0];
    97b6:	4606      	mov	r6, r0
    97b8:	eb05 0802 	add.w	r8, r5, r2
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    97bc:	f8df c298 	ldr.w	ip, [pc, #664]	; 9a58 <grid_port_receive_decode+0x300>
    97c0:	f44f 7e16 	mov.w	lr, #600	; 0x258
    97c4:	2100      	movs	r1, #0
    97c6:	fbac 9302 	umull	r9, r3, ip, r2
    97ca:	099b      	lsrs	r3, r3, #6
    97cc:	fb0e 2313 	mls	r3, lr, r3, r2
    97d0:	4423      	add	r3, r4
    97d2:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
    97d6:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    97d8:	4542      	cmp	r2, r8
    97da:	d1f4      	bne.n	97c6 <grid_port_receive_decode+0x6e>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    97dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    97de:	442a      	add	r2, r5
    97e0:	4b9d      	ldr	r3, [pc, #628]	; (9a58 <grid_port_receive_decode+0x300>)
    97e2:	fba3 1302 	umull	r1, r3, r3, r2
    97e6:	099b      	lsrs	r3, r3, #6
    97e8:	f44f 7116 	mov.w	r1, #600	; 0x258
    97ec:	fb01 2313 	mls	r3, r1, r3, r2
    97f0:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    97f2:	6223      	str	r3, [r4, #32]
	por->rx_double_buffer_status = 0;
    97f4:	2300      	movs	r3, #0
    97f6:	61e3      	str	r3, [r4, #28]
 	for (uint32_t i = 1; i<length; i++){
    97f8:	2d01      	cmp	r5, #1
    97fa:	f240 81bd 	bls.w	9b78 <grid_port_receive_decode+0x420>
    97fe:	4681      	mov	r9, r0
    9800:	f04f 0801 	mov.w	r8, #1
			printf("{\"type\": \"WARNING\", \"data\": [\"Frame Start Offset\"]}\r\n");		
    9804:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 9ab4 <grid_port_receive_decode+0x35c>
    9808:	f8df a248 	ldr.w	sl, [pc, #584]	; 9a54 <grid_port_receive_decode+0x2fc>
    980c:	e004      	b.n	9818 <grid_port_receive_decode+0xc0>
 	for (uint32_t i = 1; i<length; i++){
    980e:	f108 0801 	add.w	r8, r8, #1
    9812:	4545      	cmp	r5, r8
    9814:	f240 81b0 	bls.w	9b78 <grid_port_receive_decode+0x420>
 		if (buffer[i] == GRID_MSG_START_OF_HEADING){
    9818:	f819 3f01 	ldrb.w	r3, [r9, #1]!
    981c:	2b01      	cmp	r3, #1
    981e:	d1f6      	bne.n	980e <grid_port_receive_decode+0xb6>
 			length -= i;
    9820:	eba5 0508 	sub.w	r5, r5, r8
			printf("{\"type\": \"WARNING\", \"data\": [\"Frame Start Offset\"]}\r\n");		
    9824:	4658      	mov	r0, fp
    9826:	47d0      	blx	sl
 			message = &buffer[i];
    9828:	464e      	mov	r6, r9
    982a:	e7f0      	b.n	980e <grid_port_receive_decode+0xb6>
	if (message[0] == 1 && message [length-1] == 10){
    982c:	1973      	adds	r3, r6, r5
    982e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    9832:	2b0a      	cmp	r3, #10
    9834:	f040 81a4 	bne.w	9b80 <grid_port_receive_decode+0x428>
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    9838:	1ee8      	subs	r0, r5, #3
    983a:	f107 0217 	add.w	r2, r7, #23
    983e:	2102      	movs	r1, #2
    9840:	4430      	add	r0, r6
    9842:	4b86      	ldr	r3, [pc, #536]	; (9a5c <grid_port_receive_decode+0x304>)
    9844:	4798      	blx	r3
    9846:	4680      	mov	r8, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    9848:	4629      	mov	r1, r5
    984a:	4630      	mov	r0, r6
    984c:	4b84      	ldr	r3, [pc, #528]	; (9a60 <grid_port_receive_decode+0x308>)
    984e:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    9850:	fa5f f888 	uxtb.w	r8, r8
    9854:	b2c0      	uxtb	r0, r0
    9856:	4580      	cmp	r8, r0
    9858:	d00e      	beq.n	9878 <grid_port_receive_decode+0x120>
			if (error_flag != 0){		
    985a:	7dfb      	ldrb	r3, [r7, #23]
    985c:	2b00      	cmp	r3, #0
    985e:	f040 8171 	bne.w	9b44 <grid_port_receive_decode+0x3ec>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    9862:	23c8      	movs	r3, #200	; 0xc8
    9864:	9301      	str	r3, [sp, #4]
    9866:	2301      	movs	r3, #1
    9868:	9300      	str	r3, [sp, #0]
    986a:	23ff      	movs	r3, #255	; 0xff
    986c:	2200      	movs	r2, #0
    986e:	2114      	movs	r1, #20
    9870:	487c      	ldr	r0, [pc, #496]	; (9a64 <grid_port_receive_decode+0x30c>)
    9872:	4c7d      	ldr	r4, [pc, #500]	; (9a68 <grid_port_receive_decode+0x310>)
    9874:	47a0      	blx	r4
    9876:	e190      	b.n	9b9a <grid_port_receive_decode+0x442>
		if (checksum_calculated == checksum_received && error_flag == 0){
    9878:	f897 a017 	ldrb.w	sl, [r7, #23]
    987c:	f1ba 0f00 	cmp.w	sl, #0
    9880:	f040 8160 	bne.w	9b44 <grid_port_receive_decode+0x3ec>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    9884:	7873      	ldrb	r3, [r6, #1]
    9886:	2b0f      	cmp	r3, #15
    9888:	d04f      	beq.n	992a <grid_port_receive_decode+0x1d2>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    988a:	2b0e      	cmp	r3, #14
    988c:	f040 814f 	bne.w	9b2e <grid_port_receive_decode+0x3d6>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    9890:	78b3      	ldrb	r3, [r6, #2]
    9892:	2b06      	cmp	r3, #6
    9894:	f000 8181 	beq.w	9b9a <grid_port_receive_decode+0x442>
				else if (message[2] == GRID_MSG_NACKNOWLEDGE){
    9898:	2b15      	cmp	r3, #21
    989a:	f000 80cf 	beq.w	9a3c <grid_port_receive_decode+0x2e4>
				else if (message[2] == GRID_MSG_BELL){
    989e:	2b07      	cmp	r3, #7
    98a0:	f040 817b 	bne.w	9b9a <grid_port_receive_decode+0x442>
					if (por->partner_status == 0){
    98a4:	f894 350f 	ldrb.w	r3, [r4, #1295]	; 0x50f
    98a8:	2b00      	cmp	r3, #0
    98aa:	f040 8107 	bne.w	9abc <grid_port_receive_decode+0x364>
						printf("{\"type\":\"PORT\", \"data\": [\"Connect: Connect\"]}\r\n");
    98ae:	486f      	ldr	r0, [pc, #444]	; (9a6c <grid_port_receive_decode+0x314>)
    98b0:	4b68      	ldr	r3, [pc, #416]	; (9a54 <grid_port_receive_decode+0x2fc>)
    98b2:	4798      	blx	r3
						por->partner_fi = (message[3] - por->direction + 6)%4;
    98b4:	78f3      	ldrb	r3, [r6, #3]
    98b6:	7a62      	ldrb	r2, [r4, #9]
    98b8:	1a9b      	subs	r3, r3, r2
    98ba:	3306      	adds	r3, #6
    98bc:	425a      	negs	r2, r3
    98be:	f003 0303 	and.w	r3, r3, #3
    98c2:	f002 0203 	and.w	r2, r2, #3
    98c6:	bf58      	it	pl
    98c8:	4253      	negpl	r3, r2
    98ca:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    98ce:	f1a5 000c 	sub.w	r0, r5, #12
    98d2:	7dfa      	ldrb	r2, [r7, #23]
    98d4:	2108      	movs	r1, #8
    98d6:	4430      	add	r0, r6
    98d8:	4b60      	ldr	r3, [pc, #384]	; (9a5c <grid_port_receive_decode+0x304>)
    98da:	4798      	blx	r3
    98dc:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
						por->partner_status = 1;
    98e0:	2301      	movs	r3, #1
    98e2:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
						grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    98e6:	4c5f      	ldr	r4, [pc, #380]	; (9a64 <grid_port_receive_decode+0x30c>)
    98e8:	4620      	mov	r0, r4
    98ea:	4b61      	ldr	r3, [pc, #388]	; (9a70 <grid_port_receive_decode+0x318>)
    98ec:	4798      	blx	r3
    98ee:	b2c0      	uxtb	r0, r0
    98f0:	7020      	strb	r0, [r4, #0]
						grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    98f2:	23c8      	movs	r3, #200	; 0xc8
    98f4:	9301      	str	r3, [sp, #4]
    98f6:	2302      	movs	r3, #2
    98f8:	9300      	str	r3, [sp, #0]
    98fa:	2300      	movs	r3, #0
    98fc:	22ff      	movs	r2, #255	; 0xff
    98fe:	4619      	mov	r1, r3
    9900:	4620      	mov	r0, r4
    9902:	4d59      	ldr	r5, [pc, #356]	; (9a68 <grid_port_receive_decode+0x310>)
    9904:	47a8      	blx	r5
						if (grid_sys_state.bank_select!=255){
    9906:	7a63      	ldrb	r3, [r4, #9]
    9908:	b2db      	uxtb	r3, r3
    990a:	2bff      	cmp	r3, #255	; 0xff
    990c:	f000 8145 	beq.w	9b9a <grid_port_receive_decode+0x442>
							grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    9910:	7a62      	ldrb	r2, [r4, #9]
    9912:	4c58      	ldr	r4, [pc, #352]	; (9a74 <grid_port_receive_decode+0x31c>)
    9914:	6863      	ldr	r3, [r4, #4]
    9916:	6d58      	ldr	r0, [r3, #84]	; 0x54
    9918:	2102      	movs	r1, #2
    991a:	3007      	adds	r0, #7
    991c:	4b56      	ldr	r3, [pc, #344]	; (9a78 <grid_port_receive_decode+0x320>)
    991e:	4798      	blx	r3
							grid_report_sys_set_changed_flag(mod, 0);												
    9920:	2100      	movs	r1, #0
    9922:	4620      	mov	r0, r4
    9924:	4b55      	ldr	r3, [pc, #340]	; (9a7c <grid_port_receive_decode+0x324>)
    9926:	4798      	blx	r3
    9928:	e137      	b.n	9b9a <grid_port_receive_decode+0x442>
				uint8_t received_id  = grid_msg_get_id(message);;			
    992a:	4630      	mov	r0, r6
    992c:	4b54      	ldr	r3, [pc, #336]	; (9a80 <grid_port_receive_decode+0x328>)
    992e:	4798      	blx	r3
    9930:	4683      	mov	fp, r0
				uint8_t received_age = grid_msg_get_age(message);
    9932:	4630      	mov	r0, r6
    9934:	4b53      	ldr	r3, [pc, #332]	; (9a84 <grid_port_receive_decode+0x32c>)
    9936:	4798      	blx	r3
    9938:	6078      	str	r0, [r7, #4]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    993a:	4630      	mov	r0, r6
    993c:	4b52      	ldr	r3, [pc, #328]	; (9a88 <grid_port_receive_decode+0x330>)
    993e:	4798      	blx	r3
    9940:	4681      	mov	r9, r0
    9942:	f1a0 087f 	sub.w	r8, r0, #127	; 0x7f
    9946:	fa4f f888 	sxtb.w	r8, r8
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    994a:	4630      	mov	r0, r6
    994c:	4b4f      	ldr	r3, [pc, #316]	; (9a8c <grid_port_receive_decode+0x334>)
    994e:	4798      	blx	r3
    9950:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    9954:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    9956:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
    995a:	b182      	cbz	r2, 997e <grid_port_receive_decode+0x226>
				else if(por->partner_fi == 1){ // 90 deg
    995c:	2a01      	cmp	r2, #1
    995e:	d009      	beq.n	9974 <grid_port_receive_decode+0x21c>
				else if(por->partner_fi == 2){ // 180 deg
    9960:	2a02      	cmp	r2, #2
    9962:	d160      	bne.n	9a26 <grid_port_receive_decode+0x2ce>
					rotated_dx  -= received_dx;
    9964:	f1c9 087f 	rsb	r8, r9, #127	; 0x7f
    9968:	fa4f f888 	sxtb.w	r8, r8
					rotated_dy  -= received_dy;
    996c:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    9970:	b25b      	sxtb	r3, r3
    9972:	e004      	b.n	997e <grid_port_receive_decode+0x226>
					rotated_dx  -= received_dy;
    9974:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    9978:	4643      	mov	r3, r8
					rotated_dx  -= received_dy;
    997a:	fa4f f880 	sxtb.w	r8, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    997e:	f894 950d 	ldrb.w	r9, [r4, #1293]	; 0x50d
    9982:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    9986:	44c8      	add	r8, r9
    9988:	fa5f f988 	uxtb.w	r9, r8
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    998c:	f894 850e 	ldrb.w	r8, [r4, #1294]	; 0x50e
    9990:	f108 087f 	add.w	r8, r8, #127	; 0x7f
    9994:	4443      	add	r3, r8
    9996:	fa5f f883 	uxtb.w	r8, r3
				grid_msg_set_id(message, updated_id);
    999a:	4659      	mov	r1, fp
    999c:	4630      	mov	r0, r6
    999e:	4b3c      	ldr	r3, [pc, #240]	; (9a90 <grid_port_receive_decode+0x338>)
    99a0:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    99a2:	4649      	mov	r1, r9
    99a4:	4630      	mov	r0, r6
    99a6:	4b3b      	ldr	r3, [pc, #236]	; (9a94 <grid_port_receive_decode+0x33c>)
    99a8:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    99aa:	4641      	mov	r1, r8
    99ac:	4630      	mov	r0, r6
    99ae:	4b3a      	ldr	r3, [pc, #232]	; (9a98 <grid_port_receive_decode+0x340>)
    99b0:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    99b2:	6879      	ldr	r1, [r7, #4]
    99b4:	4630      	mov	r0, r6
    99b6:	4b39      	ldr	r3, [pc, #228]	; (9a9c <grid_port_receive_decode+0x344>)
    99b8:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    99ba:	eb09 290b 	add.w	r9, r9, fp, lsl #8
    99be:	eb08 2809 	add.w	r8, r8, r9, lsl #8
    99c2:	687b      	ldr	r3, [r7, #4]
    99c4:	eb03 2808 	add.w	r8, r3, r8, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    99c8:	4641      	mov	r1, r8
    99ca:	4826      	ldr	r0, [pc, #152]	; (9a64 <grid_port_receive_decode+0x30c>)
    99cc:	4b34      	ldr	r3, [pc, #208]	; (9aa0 <grid_port_receive_decode+0x348>)
    99ce:	4798      	blx	r3
    99d0:	2800      	cmp	r0, #0
    99d2:	f040 80e2 	bne.w	9b9a <grid_port_receive_decode+0x442>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    99d6:	4629      	mov	r1, r5
    99d8:	4630      	mov	r0, r6
    99da:	4b21      	ldr	r3, [pc, #132]	; (9a60 <grid_port_receive_decode+0x308>)
    99dc:	4798      	blx	r3
    99de:	4602      	mov	r2, r0
    99e0:	4629      	mov	r1, r5
    99e2:	4630      	mov	r0, r6
    99e4:	4b2f      	ldr	r3, [pc, #188]	; (9aa4 <grid_port_receive_decode+0x34c>)
    99e6:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    99e8:	f504 649e 	add.w	r4, r4, #1264	; 0x4f0
    99ec:	b2a9      	uxth	r1, r5
    99ee:	4620      	mov	r0, r4
    99f0:	4b2d      	ldr	r3, [pc, #180]	; (9aa8 <grid_port_receive_decode+0x350>)
    99f2:	4798      	blx	r3
    99f4:	2800      	cmp	r0, #0
    99f6:	f000 80d0 	beq.w	9b9a <grid_port_receive_decode+0x442>
						for (uint8_t i=0; i<length; i++){
    99fa:	b165      	cbz	r5, 9a16 <grid_port_receive_decode+0x2be>
    99fc:	2300      	movs	r3, #0
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    99fe:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 9ab8 <grid_port_receive_decode+0x360>
    9a02:	5cf1      	ldrb	r1, [r6, r3]
    9a04:	4620      	mov	r0, r4
    9a06:	47c8      	blx	r9
						for (uint8_t i=0; i<length; i++){
    9a08:	f10a 0a01 	add.w	sl, sl, #1
    9a0c:	fa5f fa8a 	uxtb.w	sl, sl
    9a10:	4653      	mov	r3, sl
    9a12:	45aa      	cmp	sl, r5
    9a14:	d3f5      	bcc.n	9a02 <grid_port_receive_decode+0x2aa>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    9a16:	4620      	mov	r0, r4
    9a18:	4b24      	ldr	r3, [pc, #144]	; (9aac <grid_port_receive_decode+0x354>)
    9a1a:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);										
    9a1c:	4641      	mov	r1, r8
    9a1e:	4811      	ldr	r0, [pc, #68]	; (9a64 <grid_port_receive_decode+0x30c>)
    9a20:	4b23      	ldr	r3, [pc, #140]	; (9ab0 <grid_port_receive_decode+0x358>)
    9a22:	4798      	blx	r3
    9a24:	e0b9      	b.n	9b9a <grid_port_receive_decode+0x442>
				else if(por->partner_fi == 3){ // 270 deg
    9a26:	2a03      	cmp	r2, #3
    9a28:	d105      	bne.n	9a36 <grid_port_receive_decode+0x2de>
					rotated_dy  -= received_dx;
    9a2a:	f1c9 097f 	rsb	r9, r9, #127	; 0x7f
					rotated_dx  += received_dy;
    9a2e:	4698      	mov	r8, r3
					rotated_dy  -= received_dx;
    9a30:	fa4f f389 	sxtb.w	r3, r9
    9a34:	e7a3      	b.n	997e <grid_port_receive_decode+0x226>
				int8_t rotated_dy = 0;
    9a36:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    9a38:	4698      	mov	r8, r3
    9a3a:	e7a0      	b.n	997e <grid_port_receive_decode+0x226>
					grid_sys_alert_set_alert(&grid_sys_state, 50, 0, 0, 0, 250); // LIGHT RED PULSE
    9a3c:	23fa      	movs	r3, #250	; 0xfa
    9a3e:	9301      	str	r3, [sp, #4]
    9a40:	2200      	movs	r2, #0
    9a42:	9200      	str	r2, [sp, #0]
    9a44:	4613      	mov	r3, r2
    9a46:	2132      	movs	r1, #50	; 0x32
    9a48:	4806      	ldr	r0, [pc, #24]	; (9a64 <grid_port_receive_decode+0x30c>)
    9a4a:	4c07      	ldr	r4, [pc, #28]	; (9a68 <grid_port_receive_decode+0x310>)
    9a4c:	47a0      	blx	r4
    9a4e:	e0a4      	b.n	9b9a <grid_port_receive_decode+0x442>
    9a50:	0000da6c 	.word	0x0000da6c
    9a54:	0000c009 	.word	0x0000c009
    9a58:	1b4e81b5 	.word	0x1b4e81b5
    9a5c:	000038f5 	.word	0x000038f5
    9a60:	00003bcd 	.word	0x00003bcd
    9a64:	20001d1c 	.word	0x20001d1c
    9a68:	000038a1 	.word	0x000038a1
    9a6c:	0000dacc 	.word	0x0000dacc
    9a70:	0000383d 	.word	0x0000383d
    9a74:	20001d0c 	.word	0x20001d0c
    9a78:	00003935 	.word	0x00003935
    9a7c:	00003ff5 	.word	0x00003ff5
    9a80:	00003bfd 	.word	0x00003bfd
    9a84:	00003c5d 	.word	0x00003c5d
    9a88:	00003c1d 	.word	0x00003c1d
    9a8c:	00003c3d 	.word	0x00003c3d
    9a90:	00003c7d 	.word	0x00003c7d
    9a94:	00003c91 	.word	0x00003c91
    9a98:	00003ca5 	.word	0x00003ca5
    9a9c:	00003cb9 	.word	0x00003cb9
    9aa0:	00003ccd 	.word	0x00003ccd
    9aa4:	00003be9 	.word	0x00003be9
    9aa8:	00001375 	.word	0x00001375
    9aac:	000013c1 	.word	0x000013c1
    9ab0:	00003cf7 	.word	0x00003cf7
    9ab4:	0000da94 	.word	0x0000da94
    9ab8:	000013a5 	.word	0x000013a5
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    9abc:	78f3      	ldrb	r3, [r6, #3]
    9abe:	7a62      	ldrb	r2, [r4, #9]
    9ac0:	1a9b      	subs	r3, r3, r2
    9ac2:	3306      	adds	r3, #6
    9ac4:	425a      	negs	r2, r3
    9ac6:	f003 0303 	and.w	r3, r3, #3
    9aca:	f002 0203 	and.w	r2, r2, #3
    9ace:	bf58      	it	pl
    9ad0:	4253      	negpl	r3, r2
    9ad2:	f894 850c 	ldrb.w	r8, [r4, #1292]	; 0x50c
    9ad6:	4543      	cmp	r3, r8
    9ad8:	bf14      	ite	ne
    9ada:	f04f 0800 	movne.w	r8, #0
    9ade:	f04f 0801 	moveq.w	r8, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    9ae2:	f1a5 000c 	sub.w	r0, r5, #12
    9ae6:	2200      	movs	r2, #0
    9ae8:	2108      	movs	r1, #8
    9aea:	4430      	add	r0, r6
    9aec:	4b2d      	ldr	r3, [pc, #180]	; (9ba4 <grid_port_receive_decode+0x44c>)
    9aee:	4798      	blx	r3
    9af0:	60f8      	str	r0, [r7, #12]
						volatile uint32_t debug2 = por->partner_hwcfg;
    9af2:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    9af6:	613b      	str	r3, [r7, #16]
						validator &= (por->partner_hwcfg == debug);									
    9af8:	68fa      	ldr	r2, [r7, #12]
						if (validator == 0){
    9afa:	4293      	cmp	r3, r2
    9afc:	d102      	bne.n	9b04 <grid_port_receive_decode+0x3ac>
    9afe:	f1b8 0f00 	cmp.w	r8, #0
    9b02:	d110      	bne.n	9b26 <grid_port_receive_decode+0x3ce>
							por->partner_status = 0;	
    9b04:	2300      	movs	r3, #0
    9b06:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    9b0a:	23c8      	movs	r3, #200	; 0xc8
    9b0c:	9301      	str	r3, [sp, #4]
    9b0e:	2302      	movs	r3, #2
    9b10:	9300      	str	r3, [sp, #0]
    9b12:	23ff      	movs	r3, #255	; 0xff
    9b14:	461a      	mov	r2, r3
    9b16:	4619      	mov	r1, r3
    9b18:	4823      	ldr	r0, [pc, #140]	; (9ba8 <grid_port_receive_decode+0x450>)
    9b1a:	4c24      	ldr	r4, [pc, #144]	; (9bac <grid_port_receive_decode+0x454>)
    9b1c:	47a0      	blx	r4
							printf("{\"type\":\"PORT\", \"data\": [\"Connect: Disconnect\"]}\r\n");
    9b1e:	4824      	ldr	r0, [pc, #144]	; (9bb0 <grid_port_receive_decode+0x458>)
    9b20:	4b24      	ldr	r3, [pc, #144]	; (9bb4 <grid_port_receive_decode+0x45c>)
    9b22:	4798      	blx	r3
    9b24:	e039      	b.n	9b9a <grid_port_receive_decode+0x442>
							printf("{\"type\":\"PORT\", \"data\": [\"Connect: Validate\"]}\r\n");
    9b26:	4824      	ldr	r0, [pc, #144]	; (9bb8 <grid_port_receive_decode+0x460>)
    9b28:	4b22      	ldr	r3, [pc, #136]	; (9bb4 <grid_port_receive_decode+0x45c>)
    9b2a:	4798      	blx	r3
    9b2c:	e035      	b.n	9b9a <grid_port_receive_decode+0x442>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    9b2e:	23c8      	movs	r3, #200	; 0xc8
    9b30:	9301      	str	r3, [sp, #4]
    9b32:	2302      	movs	r3, #2
    9b34:	9300      	str	r3, [sp, #0]
    9b36:	2300      	movs	r3, #0
    9b38:	461a      	mov	r2, r3
    9b3a:	21ff      	movs	r1, #255	; 0xff
    9b3c:	481a      	ldr	r0, [pc, #104]	; (9ba8 <grid_port_receive_decode+0x450>)
    9b3e:	4c1b      	ldr	r4, [pc, #108]	; (9bac <grid_port_receive_decode+0x454>)
    9b40:	47a0      	blx	r4
    9b42:	e02a      	b.n	9b9a <grid_port_receive_decode+0x442>
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 0, 1, 200); // PURPLE BLINKY
    9b44:	23c8      	movs	r3, #200	; 0xc8
    9b46:	9301      	str	r3, [sp, #4]
    9b48:	2301      	movs	r3, #1
    9b4a:	9300      	str	r3, [sp, #0]
    9b4c:	2300      	movs	r3, #0
    9b4e:	461a      	mov	r2, r3
    9b50:	2114      	movs	r1, #20
    9b52:	4815      	ldr	r0, [pc, #84]	; (9ba8 <grid_port_receive_decode+0x450>)
    9b54:	4c15      	ldr	r4, [pc, #84]	; (9bac <grid_port_receive_decode+0x454>)
    9b56:	47a0      	blx	r4
    9b58:	e01f      	b.n	9b9a <grid_port_receive_decode+0x442>
	message = &buffer[0];
    9b5a:	4606      	mov	r6, r0
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    9b5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9b5e:	442a      	add	r2, r5
    9b60:	4b16      	ldr	r3, [pc, #88]	; (9bbc <grid_port_receive_decode+0x464>)
    9b62:	fba3 1302 	umull	r1, r3, r3, r2
    9b66:	099b      	lsrs	r3, r3, #6
    9b68:	f44f 7116 	mov.w	r1, #600	; 0x258
    9b6c:	fb01 2313 	mls	r3, r1, r3, r2
    9b70:	6263      	str	r3, [r4, #36]	; 0x24
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    9b72:	6223      	str	r3, [r4, #32]
	por->rx_double_buffer_status = 0;
    9b74:	2300      	movs	r3, #0
    9b76:	61e3      	str	r3, [r4, #28]
	if (message[0] == 1 && message [length-1] == 10){
    9b78:	7833      	ldrb	r3, [r6, #0]
    9b7a:	2b01      	cmp	r3, #1
    9b7c:	f43f ae56 	beq.w	982c <grid_port_receive_decode+0xd4>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    9b80:	23c8      	movs	r3, #200	; 0xc8
    9b82:	9301      	str	r3, [sp, #4]
    9b84:	2302      	movs	r3, #2
    9b86:	9300      	str	r3, [sp, #0]
    9b88:	2314      	movs	r3, #20
    9b8a:	2200      	movs	r2, #0
    9b8c:	4611      	mov	r1, r2
    9b8e:	4806      	ldr	r0, [pc, #24]	; (9ba8 <grid_port_receive_decode+0x450>)
    9b90:	4c06      	ldr	r4, [pc, #24]	; (9bac <grid_port_receive_decode+0x454>)
    9b92:	47a0      	blx	r4
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    9b94:	480a      	ldr	r0, [pc, #40]	; (9bc0 <grid_port_receive_decode+0x468>)
    9b96:	4b07      	ldr	r3, [pc, #28]	; (9bb4 <grid_port_receive_decode+0x45c>)
    9b98:	4798      	blx	r3
}
    9b9a:	371c      	adds	r7, #28
    9b9c:	46bd      	mov	sp, r7
    9b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ba2:	bf00      	nop
    9ba4:	000038f5 	.word	0x000038f5
    9ba8:	20001d1c 	.word	0x20001d1c
    9bac:	000038a1 	.word	0x000038a1
    9bb0:	0000dafc 	.word	0x0000dafc
    9bb4:	0000c009 	.word	0x0000c009
    9bb8:	0000db30 	.word	0x0000db30
    9bbc:	1b4e81b5 	.word	0x1b4e81b5
    9bc0:	0000db60 	.word	0x0000db60

00009bc4 <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    9bc4:	b510      	push	{r4, lr}
    9bc6:	4604      	mov	r4, r0
	grid_port_receive_task(por);	
    9bc8:	4b08      	ldr	r3, [pc, #32]	; (9bec <grid_port_receive_complete_task+0x28>)
    9bca:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    9bcc:	69e3      	ldr	r3, [r4, #28]
    9bce:	b163      	cbz	r3, 9bea <grid_port_receive_complete_task+0x26>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    9bd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9bd2:	6a22      	ldr	r2, [r4, #32]
    9bd4:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9bd6:	bf34      	ite	cc
    9bd8:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    9bda:	f202 2259 	addwcs	r2, r2, #601	; 0x259
    9bde:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    9be0:	4620      	mov	r0, r4
    9be2:	4b03      	ldr	r3, [pc, #12]	; (9bf0 <grid_port_receive_complete_task+0x2c>)
    9be4:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    9be6:	2300      	movs	r3, #0
    9be8:	61e3      	str	r3, [r4, #28]
    9bea:	bd10      	pop	{r4, pc}
    9bec:	000095c9 	.word	0x000095c9
    9bf0:	00009759 	.word	0x00009759

00009bf4 <init_timer>:


#define RTC1SEC 16384

void init_timer(void)
{
    9bf4:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20;
    9bf6:	4c18      	ldr	r4, [pc, #96]	; (9c58 <init_timer+0x64>)
    9bf8:	f240 3333 	movw	r3, #819	; 0x333
    9bfc:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    9bfe:	4b17      	ldr	r3, [pc, #92]	; (9c5c <init_timer+0x68>)
    9c00:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    9c02:	2301      	movs	r3, #1
    9c04:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1SEC;
    9c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9c0a:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    9c0c:	4a14      	ldr	r2, [pc, #80]	; (9c60 <init_timer+0x6c>)
    9c0e:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    9c10:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    9c14:	f240 6266 	movw	r2, #1638	; 0x666
    9c18:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    9c1a:	4a12      	ldr	r2, [pc, #72]	; (9c64 <init_timer+0x70>)
    9c1c:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    9c1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    9c22:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    9c24:	4a10      	ldr	r2, [pc, #64]	; (9c68 <init_timer+0x74>)
    9c26:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    9c28:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    9c2c:	4d0f      	ldr	r5, [pc, #60]	; (9c6c <init_timer+0x78>)
    9c2e:	1d21      	adds	r1, r4, #4
    9c30:	4628      	mov	r0, r5
    9c32:	4e0f      	ldr	r6, [pc, #60]	; (9c70 <init_timer+0x7c>)
    9c34:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    9c36:	f104 0118 	add.w	r1, r4, #24
    9c3a:	4628      	mov	r0, r5
    9c3c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    9c3e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    9c42:	4628      	mov	r0, r5
    9c44:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    9c46:	f104 0140 	add.w	r1, r4, #64	; 0x40
    9c4a:	4628      	mov	r0, r5
    9c4c:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    9c4e:	4628      	mov	r0, r5
    9c50:	4b08      	ldr	r3, [pc, #32]	; (9c74 <init_timer+0x80>)
    9c52:	4798      	blx	r3
    9c54:	bd70      	pop	{r4, r5, r6, pc}
    9c56:	bf00      	nop
    9c58:	20000d68 	.word	0x20000d68
    9c5c:	000094a9 	.word	0x000094a9
    9c60:	00009495 	.word	0x00009495
    9c64:	00009489 	.word	0x00009489
    9c68:	0000950d 	.word	0x0000950d
    9c6c:	20000f94 	.word	0x20000f94
    9c70:	00004f8d 	.word	0x00004f8d
    9c74:	00004f4d 	.word	0x00004f4d

00009c78 <main>:




int main(void)
{
    9c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c7c:	b093      	sub	sp, #76	; 0x4c



	atmel_start_init();	
    9c7e:	4b66      	ldr	r3, [pc, #408]	; (9e18 <main+0x1a0>)
    9c80:	4798      	blx	r3

	
	printf("Initialization\r\n");
    9c82:	4866      	ldr	r0, [pc, #408]	; (9e1c <main+0x1a4>)
    9c84:	4b66      	ldr	r3, [pc, #408]	; (9e20 <main+0x1a8>)
    9c86:	4798      	blx	r3
//	wdt_disable(&WDT_0);
	

	//TIMER_0_example2();
	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    9c88:	4b66      	ldr	r3, [pc, #408]	; (9e24 <main+0x1ac>)
    9c8a:	4798      	blx	r3


	composite_device_start();
    9c8c:	4b66      	ldr	r3, [pc, #408]	; (9e28 <main+0x1b0>)
    9c8e:	4798      	blx	r3

	grid_module_common_init();
    9c90:	4b66      	ldr	r3, [pc, #408]	; (9e2c <main+0x1b4>)
    9c92:	4798      	blx	r3


	uint32_t loopstart = 0;

					
	uint32_t hwtype = grid_sys_get_hwcfg();
    9c94:	4b66      	ldr	r3, [pc, #408]	; (9e30 <main+0x1b8>)
    9c96:	4798      	blx	r3
    9c98:	4682      	mov	sl, r0
	
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9c9a:	2600      	movs	r6, #0
    9c9c:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 9e84 <main+0x20c>
	{

		if (hwtype == GRID_MODULE_EN16_RevA){	
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9ca0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 9e70 <main+0x1f8>
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9ca4:	e003      	b.n	9cae <main+0x36>
		if (hwtype == GRID_MODULE_EN16_RevA){	
    9ca6:	f1ba 0fc0 	cmp.w	sl, #192	; 0xc0
    9caa:	d01b      	beq.n	9ce4 <main+0x6c>
    9cac:	3601      	adds	r6, #1
    9cae:	b2f5      	uxtb	r5, r6
	for (uint8_t i = 0; i<grid_led_get_led_number(&grid_led_state); i++)
    9cb0:	4860      	ldr	r0, [pc, #384]	; (9e34 <main+0x1bc>)
    9cb2:	47c8      	blx	r9
    9cb4:	42a8      	cmp	r0, r5
    9cb6:	d8f6      	bhi.n	9ca6 <main+0x2e>
	}
		
		
		

	grid_sys_bank_select(&grid_sys_state, 255);
    9cb8:	21ff      	movs	r1, #255	; 0xff
    9cba:	485f      	ldr	r0, [pc, #380]	; (9e38 <main+0x1c0>)
    9cbc:	4b5f      	ldr	r3, [pc, #380]	; (9e3c <main+0x1c4>)
    9cbe:	4798      	blx	r3
	
	init_timer();
    9cc0:	4b5f      	ldr	r3, [pc, #380]	; (9e40 <main+0x1c8>)
    9cc2:	4798      	blx	r3
	 
	 
 	//spi_nor_flash_test();
	

	printf("Entering Main Loop\r\n");
    9cc4:	485f      	ldr	r0, [pc, #380]	; (9e44 <main+0x1cc>)
    9cc6:	4b56      	ldr	r3, [pc, #344]	; (9e20 <main+0x1a8>)
    9cc8:	4798      	blx	r3
	
	uint8_t usb_init_variable = 0;
    9cca:	2300      	movs	r3, #0
    9ccc:	9308      	str	r3, [sp, #32]
	uint32_t loopcounter = 0;
    9cce:	9302      	str	r3, [sp, #8]
	mod->current_task = next_task;
    9cd0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 9e88 <main+0x210>
    9cd4:	f04f 0301 	mov.w	r3, #1
    9cd8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9cdc:	4c55      	ldr	r4, [pc, #340]	; (9e34 <main+0x1bc>)
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    9cde:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 9e8c <main+0x214>
    9ce2:	e0e1      	b.n	9ea8 <main+0x230>
			grid_led_set_min(&grid_led_state, i, 0, 0, 0, 255);
    9ce4:	27ff      	movs	r7, #255	; 0xff
    9ce6:	9701      	str	r7, [sp, #4]
    9ce8:	2400      	movs	r4, #0
    9cea:	9400      	str	r4, [sp, #0]
    9cec:	4623      	mov	r3, r4
    9cee:	4622      	mov	r2, r4
    9cf0:	4629      	mov	r1, r5
    9cf2:	4850      	ldr	r0, [pc, #320]	; (9e34 <main+0x1bc>)
    9cf4:	47c0      	blx	r8
			grid_led_set_mid(&grid_led_state, i, 0, 0, 5, 0);
    9cf6:	9401      	str	r4, [sp, #4]
    9cf8:	2305      	movs	r3, #5
    9cfa:	9300      	str	r3, [sp, #0]
    9cfc:	4623      	mov	r3, r4
    9cfe:	4622      	mov	r2, r4
    9d00:	4629      	mov	r1, r5
    9d02:	484c      	ldr	r0, [pc, #304]	; (9e34 <main+0x1bc>)
    9d04:	f8df b178 	ldr.w	fp, [pc, #376]	; 9e80 <main+0x208>
    9d08:	47d8      	blx	fp
			grid_led_set_max(&grid_led_state, i, 0, 255, 0, 0);
    9d0a:	9401      	str	r4, [sp, #4]
    9d0c:	9400      	str	r4, [sp, #0]
    9d0e:	463b      	mov	r3, r7
    9d10:	4622      	mov	r2, r4
    9d12:	4629      	mov	r1, r5
    9d14:	4847      	ldr	r0, [pc, #284]	; (9e34 <main+0x1bc>)
    9d16:	4c4c      	ldr	r4, [pc, #304]	; (9e48 <main+0x1d0>)
    9d18:	47a0      	blx	r4
    9d1a:	e7c7      	b.n	9cac <main+0x34>
			if (usb_d_get_frame_num() == 0){
    9d1c:	4b4b      	ldr	r3, [pc, #300]	; (9e4c <main+0x1d4>)
    9d1e:	4798      	blx	r3
    9d20:	2800      	cmp	r0, #0
    9d22:	f000 80c9 	beq.w	9eb8 <main+0x240>
				printf("USB Connected\r\n");
    9d26:	484a      	ldr	r0, [pc, #296]	; (9e50 <main+0x1d8>)
    9d28:	4b3d      	ldr	r3, [pc, #244]	; (9e20 <main+0x1a8>)
    9d2a:	4798      	blx	r3
				grid_sys_bank_select(&grid_sys_state, 0);
    9d2c:	2100      	movs	r1, #0
    9d2e:	4842      	ldr	r0, [pc, #264]	; (9e38 <main+0x1c0>)
    9d30:	4b42      	ldr	r3, [pc, #264]	; (9e3c <main+0x1c4>)
    9d32:	4798      	blx	r3
				usb_init_variable = 1;
    9d34:	2301      	movs	r3, #1
    9d36:	9308      	str	r3, [sp, #32]
    9d38:	e0be      	b.n	9eb8 <main+0x240>
			grid_sys_state.alert_state--;
    9d3a:	4b3f      	ldr	r3, [pc, #252]	; (9e38 <main+0x1c0>)
    9d3c:	889b      	ldrh	r3, [r3, #4]
    9d3e:	3b01      	subs	r3, #1
    9d40:	b29b      	uxth	r3, r3
    9d42:	4a3d      	ldr	r2, [pc, #244]	; (9e38 <main+0x1c0>)
    9d44:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    9d46:	4610      	mov	r0, r2
    9d48:	4b42      	ldr	r3, [pc, #264]	; (9e54 <main+0x1dc>)
    9d4a:	4798      	blx	r3
    9d4c:	b9a0      	cbnz	r0, 9d78 <main+0x100>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    9d4e:	483a      	ldr	r0, [pc, #232]	; (9e38 <main+0x1c0>)
    9d50:	4b41      	ldr	r3, [pc, #260]	; (9e58 <main+0x1e0>)
    9d52:	4798      	blx	r3
    9d54:	4606      	mov	r6, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9d56:	7863      	ldrb	r3, [r4, #1]
    9d58:	2b00      	cmp	r3, #0
    9d5a:	f000 8132 	beq.w	9fc2 <main+0x34a>
    9d5e:	2500      	movs	r5, #0
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    9d60:	4f3e      	ldr	r7, [pc, #248]	; (9e5c <main+0x1e4>)
    9d62:	4633      	mov	r3, r6
    9d64:	2201      	movs	r2, #1
    9d66:	4629      	mov	r1, r5
    9d68:	4620      	mov	r0, r4
    9d6a:	47b8      	blx	r7
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    9d6c:	3501      	adds	r5, #1
    9d6e:	b2ed      	uxtb	r5, r5
    9d70:	7863      	ldrb	r3, [r4, #1]
    9d72:	42ab      	cmp	r3, r5
    9d74:	d8f5      	bhi.n	9d62 <main+0xea>
    9d76:	e124      	b.n	9fc2 <main+0x34a>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    9d78:	482f      	ldr	r0, [pc, #188]	; (9e38 <main+0x1c0>)
    9d7a:	4b39      	ldr	r3, [pc, #228]	; (9e60 <main+0x1e8>)
    9d7c:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    9d7e:	482e      	ldr	r0, [pc, #184]	; (9e38 <main+0x1c0>)
    9d80:	4b38      	ldr	r3, [pc, #224]	; (9e64 <main+0x1ec>)
    9d82:	4798      	blx	r3
    9d84:	9004      	str	r0, [sp, #16]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    9d86:	482c      	ldr	r0, [pc, #176]	; (9e38 <main+0x1c0>)
    9d88:	4b37      	ldr	r3, [pc, #220]	; (9e68 <main+0x1f0>)
    9d8a:	4798      	blx	r3
    9d8c:	9005      	str	r0, [sp, #20]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    9d8e:	482a      	ldr	r0, [pc, #168]	; (9e38 <main+0x1c0>)
    9d90:	4b36      	ldr	r3, [pc, #216]	; (9e6c <main+0x1f4>)
    9d92:	4798      	blx	r3
    9d94:	9006      	str	r0, [sp, #24]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9d96:	f04f 0900 	mov.w	r9, #0
    9d9a:	e033      	b.n	9e04 <main+0x18c>
						grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    9d9c:	2300      	movs	r3, #0
    9d9e:	9301      	str	r3, [sp, #4]
    9da0:	9300      	str	r3, [sp, #0]
    9da2:	2201      	movs	r2, #1
    9da4:	4629      	mov	r1, r5
    9da6:	4620      	mov	r0, r4
    9da8:	4e31      	ldr	r6, [pc, #196]	; (9e70 <main+0x1f8>)
    9daa:	47b0      	blx	r6
						grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    9dac:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 9e90 <main+0x218>
    9db0:	9804      	ldr	r0, [sp, #16]
    9db2:	47c0      	blx	r8
    9db4:	4f2f      	ldr	r7, [pc, #188]	; (9e74 <main+0x1fc>)
    9db6:	2200      	movs	r2, #0
    9db8:	4b2f      	ldr	r3, [pc, #188]	; (9e78 <main+0x200>)
    9dba:	47b8      	blx	r7
    9dbc:	4e2f      	ldr	r6, [pc, #188]	; (9e7c <main+0x204>)
    9dbe:	47b0      	blx	r6
    9dc0:	b2c2      	uxtb	r2, r0
    9dc2:	9207      	str	r2, [sp, #28]
    9dc4:	9806      	ldr	r0, [sp, #24]
    9dc6:	47c0      	blx	r8
    9dc8:	2200      	movs	r2, #0
    9dca:	4b2b      	ldr	r3, [pc, #172]	; (9e78 <main+0x200>)
    9dcc:	47b8      	blx	r7
    9dce:	47b0      	blx	r6
    9dd0:	b2c0      	uxtb	r0, r0
    9dd2:	9001      	str	r0, [sp, #4]
    9dd4:	9805      	ldr	r0, [sp, #20]
    9dd6:	47c0      	blx	r8
    9dd8:	2200      	movs	r2, #0
    9dda:	4b27      	ldr	r3, [pc, #156]	; (9e78 <main+0x200>)
    9ddc:	47b8      	blx	r7
    9dde:	47b0      	blx	r6
    9de0:	b2c0      	uxtb	r0, r0
    9de2:	9000      	str	r0, [sp, #0]
    9de4:	9b07      	ldr	r3, [sp, #28]
    9de6:	2201      	movs	r2, #1
    9de8:	4629      	mov	r1, r5
    9dea:	4620      	mov	r0, r4
    9dec:	4e24      	ldr	r6, [pc, #144]	; (9e80 <main+0x208>)
    9dee:	47b0      	blx	r6
						grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    9df0:	9a06      	ldr	r2, [sp, #24]
    9df2:	9201      	str	r2, [sp, #4]
    9df4:	9a05      	ldr	r2, [sp, #20]
    9df6:	9200      	str	r2, [sp, #0]
    9df8:	9b04      	ldr	r3, [sp, #16]
    9dfa:	2201      	movs	r2, #1
    9dfc:	4629      	mov	r1, r5
    9dfe:	4620      	mov	r0, r4
    9e00:	4d11      	ldr	r5, [pc, #68]	; (9e48 <main+0x1d0>)
    9e02:	47a8      	blx	r5
    9e04:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    9e08:	4620      	mov	r0, r4
    9e0a:	4b1e      	ldr	r3, [pc, #120]	; (9e84 <main+0x20c>)
    9e0c:	4798      	blx	r3
    9e0e:	f109 0901 	add.w	r9, r9, #1
    9e12:	42a8      	cmp	r0, r5
    9e14:	d8c2      	bhi.n	9d9c <main+0x124>
    9e16:	e79a      	b.n	9d4e <main+0xd6>
    9e18:	000002d1 	.word	0x000002d1
    9e1c:	0000dc4c 	.word	0x0000dc4c
    9e20:	0000c009 	.word	0x0000c009
    9e24:	0000aba5 	.word	0x0000aba5
    9e28:	0000b54d 	.word	0x0000b54d
    9e2c:	00002455 	.word	0x00002455
    9e30:	0000396d 	.word	0x0000396d
    9e34:	20003628 	.word	0x20003628
    9e38:	20001d1c 	.word	0x20001d1c
    9e3c:	00003a5d 	.word	0x00003a5d
    9e40:	00009bf5 	.word	0x00009bf5
    9e44:	0000dc5c 	.word	0x0000dc5c
    9e48:	00001fff 	.word	0x00001fff
    9e4c:	0000576d 	.word	0x0000576d
    9e50:	0000dc70 	.word	0x0000dc70
    9e54:	0000384f 	.word	0x0000384f
    9e58:	00003859 	.word	0x00003859
    9e5c:	00002049 	.word	0x00002049
    9e60:	00003853 	.word	0x00003853
    9e64:	000038bf 	.word	0x000038bf
    9e68:	000038c3 	.word	0x000038c3
    9e6c:	000038c7 	.word	0x000038c7
    9e70:	00001f6d 	.word	0x00001f6d
    9e74:	0000b8e5 	.word	0x0000b8e5
    9e78:	3fe00000 	.word	0x3fe00000
    9e7c:	0000bd09 	.word	0x0000bd09
    9e80:	00001fb5 	.word	0x00001fb5
    9e84:	00001f25 	.word	0x00001f25
    9e88:	20003b78 	.word	0x20003b78
    9e8c:	41008000 	.word	0x41008000
    9e90:	0000b819 	.word	0x0000b819
		gpio_set_pin_level(PIN_GRID_SYNC_2, true);

		// IDLETASK
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
			
			delay_us(1);
    9e94:	2001      	movs	r0, #1
    9e96:	47b0      	blx	r6
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    9e98:	4639      	mov	r1, r7
    9e9a:	4863      	ldr	r0, [pc, #396]	; (a028 <main+0x3b0>)
    9e9c:	47a8      	blx	r5
    9e9e:	280f      	cmp	r0, #15
    9ea0:	d9f8      	bls.n	9e94 <main+0x21c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9ea2:	2380      	movs	r3, #128	; 0x80
    9ea4:	f8cb 3094 	str.w	r3, [fp, #148]	; 0x94
	mod->current_task = next_task;
    9ea8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9eac:	f88a 3001 	strb.w	r3, [sl, #1]
		if (usb_init_variable == 0){
    9eb0:	9b08      	ldr	r3, [sp, #32]
    9eb2:	2b00      	cmp	r3, #0
    9eb4:	f43f af32 	beq.w	9d1c <main+0xa4>
		loopcounter++;
    9eb8:	9b02      	ldr	r3, [sp, #8]
    9eba:	3301      	adds	r3, #1
    9ebc:	9302      	str	r3, [sp, #8]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    9ebe:	485a      	ldr	r0, [pc, #360]	; (a028 <main+0x3b0>)
    9ec0:	4b5a      	ldr	r3, [pc, #360]	; (a02c <main+0x3b4>)
    9ec2:	4798      	blx	r3
    9ec4:	9003      	str	r0, [sp, #12]
		if (scheduler_report_flag){
    9ec6:	4b5a      	ldr	r3, [pc, #360]	; (a030 <main+0x3b8>)
    9ec8:	781b      	ldrb	r3, [r3, #0]
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d033      	beq.n	9f36 <main+0x2be>
			scheduler_report_flag=0;
    9ece:	4b58      	ldr	r3, [pc, #352]	; (a030 <main+0x3b8>)
    9ed0:	f04f 0200 	mov.w	r2, #0
    9ed4:	701a      	strb	r2, [r3, #0]
			uint32_t task_val[GRID_TASK_NUMBER] = {0};
    9ed6:	2220      	movs	r2, #32
    9ed8:	2100      	movs	r1, #0
    9eda:	a80a      	add	r0, sp, #40	; 0x28
    9edc:	4b55      	ldr	r3, [pc, #340]	; (a034 <main+0x3bc>)
    9ede:	4798      	blx	r3
    9ee0:	4b55      	ldr	r3, [pc, #340]	; (a038 <main+0x3c0>)
    9ee2:	aa09      	add	r2, sp, #36	; 0x24
    9ee4:	f103 0020 	add.w	r0, r3, #32
	return 	mod->timer[task];
    9ee8:	f853 1b04 	ldr.w	r1, [r3], #4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    9eec:	f842 1f04 	str.w	r1, [r2, #4]!
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    9ef0:	4283      	cmp	r3, r0
    9ef2:	d1f9      	bne.n	9ee8 <main+0x270>
			grid_task_timer_reset(&grid_task_state);
    9ef4:	4650      	mov	r0, sl
    9ef6:	4b51      	ldr	r3, [pc, #324]	; (a03c <main+0x3c4>)
    9ef8:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [");
    9efa:	4851      	ldr	r0, [pc, #324]	; (a040 <main+0x3c8>)
    9efc:	4d51      	ldr	r5, [pc, #324]	; (a044 <main+0x3cc>)
    9efe:	47a8      	blx	r5
				printf("\"%d\"", task_val[i]);
    9f00:	990a      	ldr	r1, [sp, #40]	; 0x28
    9f02:	4851      	ldr	r0, [pc, #324]	; (a048 <main+0x3d0>)
    9f04:	47a8      	blx	r5
    9f06:	ad0b      	add	r5, sp, #44	; 0x2c
    9f08:	f10d 0948 	add.w	r9, sp, #72	; 0x48
					printf(", ");
    9f0c:	f8df 818c 	ldr.w	r8, [pc, #396]	; a09c <main+0x424>
    9f10:	4e4c      	ldr	r6, [pc, #304]	; (a044 <main+0x3cc>)
				printf("\"%d\"", task_val[i]);
    9f12:	4f4d      	ldr	r7, [pc, #308]	; (a048 <main+0x3d0>)
					printf(", ");
    9f14:	4640      	mov	r0, r8
    9f16:	47b0      	blx	r6
				printf("\"%d\"", task_val[i]);
    9f18:	f855 1b04 	ldr.w	r1, [r5], #4
    9f1c:	4638      	mov	r0, r7
    9f1e:	47b0      	blx	r6
				if (i != GRID_TASK_NUMBER-1){
    9f20:	454d      	cmp	r5, r9
    9f22:	d1f7      	bne.n	9f14 <main+0x29c>
			printf("]}\r\n");
    9f24:	4849      	ldr	r0, [pc, #292]	; (a04c <main+0x3d4>)
    9f26:	4b4a      	ldr	r3, [pc, #296]	; (a050 <main+0x3d8>)
    9f28:	4798      	blx	r3
			printf("{\"type\":\"LOOP\", \"data\": [\"%d\"]}\r\n", loopcounter);
    9f2a:	9902      	ldr	r1, [sp, #8]
    9f2c:	4849      	ldr	r0, [pc, #292]	; (a054 <main+0x3dc>)
    9f2e:	4b45      	ldr	r3, [pc, #276]	; (a044 <main+0x3cc>)
    9f30:	4798      	blx	r3
			loopcounter = 0;
    9f32:	2300      	movs	r3, #0
    9f34:	9302      	str	r3, [sp, #8]
	mod->current_task = next_task;
    9f36:	2302      	movs	r3, #2
    9f38:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    9f3c:	f8df 9160 	ldr.w	r9, [pc, #352]	; a0a0 <main+0x428>
    9f40:	4648      	mov	r0, r9
    9f42:	4d45      	ldr	r5, [pc, #276]	; (a058 <main+0x3e0>)
    9f44:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    9f46:	4845      	ldr	r0, [pc, #276]	; (a05c <main+0x3e4>)
    9f48:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    9f4a:	f8df 8158 	ldr.w	r8, [pc, #344]	; a0a4 <main+0x42c>
    9f4e:	4640      	mov	r0, r8
    9f50:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    9f52:	4f43      	ldr	r7, [pc, #268]	; (a060 <main+0x3e8>)
    9f54:	4638      	mov	r0, r7
    9f56:	47a8      	blx	r5
	mod->current_task = next_task;
    9f58:	2303      	movs	r3, #3
    9f5a:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_ui(&GRID_PORT_U);
    9f5e:	4e41      	ldr	r6, [pc, #260]	; (a064 <main+0x3ec>)
    9f60:	4630      	mov	r0, r6
    9f62:	4b41      	ldr	r3, [pc, #260]	; (a068 <main+0x3f0>)
    9f64:	4798      	blx	r3
	mod->current_task = next_task;
    9f66:	2304      	movs	r3, #4
    9f68:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    9f6c:	2101      	movs	r1, #1
    9f6e:	4630      	mov	r0, r6
    9f70:	4d3e      	ldr	r5, [pc, #248]	; (a06c <main+0x3f4>)
    9f72:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    9f74:	2100      	movs	r1, #0
    9f76:	4648      	mov	r0, r9
    9f78:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    9f7a:	2100      	movs	r1, #0
    9f7c:	4837      	ldr	r0, [pc, #220]	; (a05c <main+0x3e4>)
    9f7e:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);		
    9f80:	2100      	movs	r1, #0
    9f82:	4640      	mov	r0, r8
    9f84:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);						
    9f86:	2100      	movs	r1, #0
    9f88:	4638      	mov	r0, r7
    9f8a:	47a8      	blx	r5
	mod->current_task = next_task;
    9f8c:	2305      	movs	r3, #5
    9f8e:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_outbound_usart(&GRID_PORT_N);
    9f92:	4648      	mov	r0, r9
    9f94:	4d36      	ldr	r5, [pc, #216]	; (a070 <main+0x3f8>)
    9f96:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    9f98:	4830      	ldr	r0, [pc, #192]	; (a05c <main+0x3e4>)
    9f9a:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    9f9c:	4640      	mov	r0, r8
    9f9e:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    9fa0:	4638      	mov	r0, r7
    9fa2:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    9fa4:	4833      	ldr	r0, [pc, #204]	; (a074 <main+0x3fc>)
    9fa6:	4b34      	ldr	r3, [pc, #208]	; (a078 <main+0x400>)
    9fa8:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    9faa:	4630      	mov	r0, r6
    9fac:	4b33      	ldr	r3, [pc, #204]	; (a07c <main+0x404>)
    9fae:	4798      	blx	r3
	mod->current_task = next_task;
    9fb0:	2307      	movs	r3, #7
    9fb2:	f88a 3001 	strb.w	r3, [sl, #1]
		if (grid_sys_state.alert_state){
    9fb6:	4b1c      	ldr	r3, [pc, #112]	; (a028 <main+0x3b0>)
    9fb8:	889b      	ldrh	r3, [r3, #4]
    9fba:	b29b      	uxth	r3, r3
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	f47f aebc 	bne.w	9d3a <main+0xc2>
	mod->current_task = next_task;
    9fc2:	2306      	movs	r3, #6
    9fc4:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_led_tick(&grid_led_state);
    9fc8:	4620      	mov	r0, r4
    9fca:	4b2d      	ldr	r3, [pc, #180]	; (a080 <main+0x408>)
    9fcc:	4798      	blx	r3
			grid_led_render_all(&grid_led_state);	
    9fce:	4620      	mov	r0, r4
    9fd0:	4b2c      	ldr	r3, [pc, #176]	; (a084 <main+0x40c>)
    9fd2:	4798      	blx	r3
	 		while(grid_led_hardware_is_transfer_completed(&grid_led_state) != 1){
    9fd4:	4d2c      	ldr	r5, [pc, #176]	; (a088 <main+0x410>)
    9fd6:	4620      	mov	r0, r4
    9fd8:	47a8      	blx	r5
    9fda:	2801      	cmp	r0, #1
    9fdc:	d1fb      	bne.n	9fd6 <main+0x35e>
			grid_led_hardware_start_transfer(&grid_led_state);
    9fde:	4620      	mov	r0, r4
    9fe0:	4b2a      	ldr	r3, [pc, #168]	; (a08c <main+0x414>)
    9fe2:	4798      	blx	r3
	mod->current_task = next_task;
    9fe4:	f04f 0300 	mov.w	r3, #0
    9fe8:	f88a 3001 	strb.w	r3, [sl, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    9fec:	f89b 30c7 	ldrb.w	r3, [fp, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    9ff0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    9ff4:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    9ff8:	f88b 30c7 	strb.w	r3, [fp, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    9ffc:	f89b 30b3 	ldrb.w	r3, [fp, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a000:	f003 030f 	and.w	r3, r3, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a004:	f88b 30b3 	strb.w	r3, [fp, #179]	; 0xb3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a008:	2380      	movs	r3, #128	; 0x80
    a00a:	f8cb 3088 	str.w	r3, [fp, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a00e:	4a20      	ldr	r2, [pc, #128]	; (a090 <main+0x418>)
    a010:	f8cb 20a8 	str.w	r2, [fp, #168]	; 0xa8
    a014:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    a018:	f8cb 20a8 	str.w	r2, [fp, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a01c:	f8cb 3098 	str.w	r3, [fp, #152]	; 0x98
		while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){
    a020:	4d1c      	ldr	r5, [pc, #112]	; (a094 <main+0x41c>)
			delay_us(1);
    a022:	4e1d      	ldr	r6, [pc, #116]	; (a098 <main+0x420>)
    a024:	9f03      	ldr	r7, [sp, #12]
    a026:	e737      	b.n	9e98 <main+0x220>
    a028:	20001d1c 	.word	0x20001d1c
    a02c:	0000383d 	.word	0x0000383d
    a030:	20000d68 	.word	0x20000d68
    a034:	0000bdb7 	.word	0x0000bdb7
    a038:	20003b7c 	.word	0x20003b7c
    a03c:	000095b9 	.word	0x000095b9
    a040:	0000dc80 	.word	0x0000dc80
    a044:	0000bf21 	.word	0x0000bf21
    a048:	0000dc9c 	.word	0x0000dc9c
    a04c:	0000da14 	.word	0x0000da14
    a050:	0000c009 	.word	0x0000c009
    a054:	0000dca8 	.word	0x0000dca8
    a058:	00009bc5 	.word	0x00009bc5
    a05c:	20003114 	.word	0x20003114
    a060:	200021cc 	.word	0x200021cc
    a064:	200017fc 	.word	0x200017fc
    a068:	00004009 	.word	0x00004009
    a06c:	000016bd 	.word	0x000016bd
    a070:	00001e41 	.word	0x00001e41
    a074:	20002c04 	.word	0x20002c04
    a078:	00001889 	.word	0x00001889
    a07c:	00001cf1 	.word	0x00001cf1
    a080:	00001f29 	.word	0x00001f29
    a084:	00002261 	.word	0x00002261
    a088:	00002449 	.word	0x00002449
    a08c:	0000241d 	.word	0x0000241d
    a090:	40000080 	.word	0x40000080
    a094:	00003841 	.word	0x00003841
    a098:	00004701 	.word	0x00004701
    a09c:	0000dca4 	.word	0x0000dca4
    a0a0:	200012ac 	.word	0x200012ac
    a0a4:	200026f0 	.word	0x200026f0

0000a0a8 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    a0a8:	b940      	cbnz	r0, a0bc <_read+0x14>
{
    a0aa:	b508      	push	{r3, lr}
    a0ac:	460b      	mov	r3, r1
    a0ae:	4611      	mov	r1, r2
    a0b0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    a0b2:	4b04      	ldr	r3, [pc, #16]	; (a0c4 <_read+0x1c>)
    a0b4:	4798      	blx	r3
    a0b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a0ba:	bd08      	pop	{r3, pc}
		return -1;
    a0bc:	f04f 30ff 	mov.w	r0, #4294967295
    a0c0:	4770      	bx	lr
    a0c2:	bf00      	nop
    a0c4:	0000a119 	.word	0x0000a119

0000a0c8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    a0c8:	3801      	subs	r0, #1
    a0ca:	2802      	cmp	r0, #2
    a0cc:	d808      	bhi.n	a0e0 <_write+0x18>
{
    a0ce:	b508      	push	{r3, lr}
    a0d0:	460b      	mov	r3, r1
    a0d2:	4611      	mov	r1, r2
    a0d4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    a0d6:	4b04      	ldr	r3, [pc, #16]	; (a0e8 <_write+0x20>)
    a0d8:	4798      	blx	r3
    a0da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    a0de:	bd08      	pop	{r3, pc}
		return -1;
    a0e0:	f04f 30ff 	mov.w	r0, #4294967295
    a0e4:	4770      	bx	lr
    a0e6:	bf00      	nop
    a0e8:	0000a13d 	.word	0x0000a13d

0000a0ec <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    a0ec:	b570      	push	{r4, r5, r6, lr}
    a0ee:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    a0f0:	4d06      	ldr	r5, [pc, #24]	; (a10c <stdio_io_init+0x20>)
    a0f2:	682b      	ldr	r3, [r5, #0]
    a0f4:	2100      	movs	r1, #0
    a0f6:	6898      	ldr	r0, [r3, #8]
    a0f8:	4c05      	ldr	r4, [pc, #20]	; (a110 <stdio_io_init+0x24>)
    a0fa:	47a0      	blx	r4
	setbuf(stdin, NULL);
    a0fc:	682b      	ldr	r3, [r5, #0]
    a0fe:	2100      	movs	r1, #0
    a100:	6858      	ldr	r0, [r3, #4]
    a102:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    a104:	4b03      	ldr	r3, [pc, #12]	; (a114 <stdio_io_init+0x28>)
    a106:	601e      	str	r6, [r3, #0]
    a108:	bd70      	pop	{r4, r5, r6, pc}
    a10a:	bf00      	nop
    a10c:	20000558 	.word	0x20000558
    a110:	0000c039 	.word	0x0000c039
    a114:	20000e50 	.word	0x20000e50

0000a118 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    a118:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a11a:	4b06      	ldr	r3, [pc, #24]	; (a134 <stdio_io_read+0x1c>)
    a11c:	681b      	ldr	r3, [r3, #0]
    a11e:	b133      	cbz	r3, a12e <stdio_io_read+0x16>
    a120:	460a      	mov	r2, r1
    a122:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    a124:	b292      	uxth	r2, r2
    a126:	4618      	mov	r0, r3
    a128:	4b03      	ldr	r3, [pc, #12]	; (a138 <stdio_io_read+0x20>)
    a12a:	4798      	blx	r3
    a12c:	bd08      	pop	{r3, pc}
		return 0;
    a12e:	2000      	movs	r0, #0
}
    a130:	bd08      	pop	{r3, pc}
    a132:	bf00      	nop
    a134:	20000e50 	.word	0x20000e50
    a138:	000048dd 	.word	0x000048dd

0000a13c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    a13c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a13e:	4b06      	ldr	r3, [pc, #24]	; (a158 <stdio_io_write+0x1c>)
    a140:	681b      	ldr	r3, [r3, #0]
    a142:	b133      	cbz	r3, a152 <stdio_io_write+0x16>
    a144:	460a      	mov	r2, r1
    a146:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    a148:	b292      	uxth	r2, r2
    a14a:	4618      	mov	r0, r3
    a14c:	4b03      	ldr	r3, [pc, #12]	; (a15c <stdio_io_write+0x20>)
    a14e:	4798      	blx	r3
    a150:	bd08      	pop	{r3, pc}
		return 0;
    a152:	2000      	movs	r0, #0
}
    a154:	bd08      	pop	{r3, pc}
    a156:	bf00      	nop
    a158:	20000e50 	.word	0x20000e50
    a15c:	000048ad 	.word	0x000048ad

0000a160 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    a160:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    a162:	4c04      	ldr	r4, [pc, #16]	; (a174 <stdio_redirect_init+0x14>)
    a164:	4620      	mov	r0, r4
    a166:	4b04      	ldr	r3, [pc, #16]	; (a178 <stdio_redirect_init+0x18>)
    a168:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    a16a:	4620      	mov	r0, r4
    a16c:	4b03      	ldr	r3, [pc, #12]	; (a17c <stdio_redirect_init+0x1c>)
    a16e:	4798      	blx	r3
    a170:	bd10      	pop	{r4, pc}
    a172:	bf00      	nop
    a174:	2000104c 	.word	0x2000104c
    a178:	00005461 	.word	0x00005461
    a17c:	0000a0ed 	.word	0x0000a0ed

0000a180 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a180:	b5f0      	push	{r4, r5, r6, r7, lr}
    a182:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a184:	780b      	ldrb	r3, [r1, #0]
    a186:	f3c3 1441 	ubfx	r4, r3, #5, #2
    a18a:	2c01      	cmp	r4, #1
    a18c:	d15e      	bne.n	a24c <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a18e:	888c      	ldrh	r4, [r1, #4]
    a190:	4d35      	ldr	r5, [pc, #212]	; (a268 <cdcdf_acm_req+0xe8>)
    a192:	782d      	ldrb	r5, [r5, #0]
    a194:	42a5      	cmp	r5, r4
    a196:	d003      	beq.n	a1a0 <cdcdf_acm_req+0x20>
    a198:	4d33      	ldr	r5, [pc, #204]	; (a268 <cdcdf_acm_req+0xe8>)
    a19a:	786d      	ldrb	r5, [r5, #1]
    a19c:	42a5      	cmp	r5, r4
    a19e:	d158      	bne.n	a252 <cdcdf_acm_req+0xd2>
    a1a0:	4616      	mov	r6, r2
    a1a2:	460c      	mov	r4, r1
    a1a4:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a1a6:	f013 0f80 	tst.w	r3, #128	; 0x80
    a1aa:	d10c      	bne.n	a1c6 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    a1ac:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a1ae:	4b2f      	ldr	r3, [pc, #188]	; (a26c <cdcdf_acm_req+0xec>)
    a1b0:	4798      	blx	r3
    a1b2:	4601      	mov	r1, r0
	switch (req->bRequest) {
    a1b4:	7863      	ldrb	r3, [r4, #1]
    a1b6:	2b20      	cmp	r3, #32
    a1b8:	d013      	beq.n	a1e2 <cdcdf_acm_req+0x62>
    a1ba:	2b22      	cmp	r3, #34	; 0x22
    a1bc:	d032      	beq.n	a224 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    a1be:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    a1c2:	b003      	add	sp, #12
    a1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    a1c6:	2a01      	cmp	r2, #1
    a1c8:	d046      	beq.n	a258 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    a1ca:	784b      	ldrb	r3, [r1, #1]
    a1cc:	2b21      	cmp	r3, #33	; 0x21
    a1ce:	d145      	bne.n	a25c <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a1d0:	88cb      	ldrh	r3, [r1, #6]
    a1d2:	2b07      	cmp	r3, #7
    a1d4:	d145      	bne.n	a262 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a1d6:	2300      	movs	r3, #0
    a1d8:	2207      	movs	r2, #7
    a1da:	4925      	ldr	r1, [pc, #148]	; (a270 <cdcdf_acm_req+0xf0>)
    a1dc:	4c25      	ldr	r4, [pc, #148]	; (a274 <cdcdf_acm_req+0xf4>)
    a1de:	47a0      	blx	r4
    a1e0:	e7ef      	b.n	a1c2 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a1e2:	2f07      	cmp	r7, #7
    a1e4:	d12b      	bne.n	a23e <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    a1e6:	b1be      	cbz	r6, a218 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a1e8:	6800      	ldr	r0, [r0, #0]
    a1ea:	9000      	str	r0, [sp, #0]
    a1ec:	888a      	ldrh	r2, [r1, #4]
    a1ee:	798b      	ldrb	r3, [r1, #6]
    a1f0:	f8ad 2004 	strh.w	r2, [sp, #4]
    a1f4:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a1f8:	4b1b      	ldr	r3, [pc, #108]	; (a268 <cdcdf_acm_req+0xe8>)
    a1fa:	691b      	ldr	r3, [r3, #16]
    a1fc:	b113      	cbz	r3, a204 <cdcdf_acm_req+0x84>
    a1fe:	4668      	mov	r0, sp
    a200:	4798      	blx	r3
    a202:	b1f8      	cbz	r0, a244 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    a204:	4b18      	ldr	r3, [pc, #96]	; (a268 <cdcdf_acm_req+0xe8>)
    a206:	aa02      	add	r2, sp, #8
    a208:	e912 0003 	ldmdb	r2, {r0, r1}
    a20c:	6098      	str	r0, [r3, #8]
    a20e:	8199      	strh	r1, [r3, #12]
    a210:	0c09      	lsrs	r1, r1, #16
    a212:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    a214:	2000      	movs	r0, #0
    a216:	e7d4      	b.n	a1c2 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a218:	2300      	movs	r3, #0
    a21a:	2207      	movs	r2, #7
    a21c:	4628      	mov	r0, r5
    a21e:	4c15      	ldr	r4, [pc, #84]	; (a274 <cdcdf_acm_req+0xf4>)
    a220:	47a0      	blx	r4
    a222:	e7ce      	b.n	a1c2 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    a224:	2300      	movs	r3, #0
    a226:	461a      	mov	r2, r3
    a228:	4619      	mov	r1, r3
    a22a:	4618      	mov	r0, r3
    a22c:	4d11      	ldr	r5, [pc, #68]	; (a274 <cdcdf_acm_req+0xf4>)
    a22e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    a230:	4b0d      	ldr	r3, [pc, #52]	; (a268 <cdcdf_acm_req+0xe8>)
    a232:	695b      	ldr	r3, [r3, #20]
    a234:	b143      	cbz	r3, a248 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    a236:	8860      	ldrh	r0, [r4, #2]
    a238:	4798      	blx	r3
		return ERR_NONE;
    a23a:	2000      	movs	r0, #0
    a23c:	e7c1      	b.n	a1c2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a23e:	f04f 30ff 	mov.w	r0, #4294967295
    a242:	e7be      	b.n	a1c2 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    a244:	2000      	movs	r0, #0
    a246:	e7bc      	b.n	a1c2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a248:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    a24a:	e7ba      	b.n	a1c2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a24c:	f06f 0009 	mvn.w	r0, #9
    a250:	e7b7      	b.n	a1c2 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    a252:	f06f 0009 	mvn.w	r0, #9
    a256:	e7b4      	b.n	a1c2 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    a258:	2000      	movs	r0, #0
    a25a:	e7b2      	b.n	a1c2 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    a25c:	f06f 000c 	mvn.w	r0, #12
    a260:	e7af      	b.n	a1c2 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    a262:	f04f 30ff 	mov.w	r0, #4294967295
    a266:	e7ac      	b.n	a1c2 <cdcdf_acm_req+0x42>
    a268:	20000e54 	.word	0x20000e54
    a26c:	0000b2c9 	.word	0x0000b2c9
    a270:	20000e5c 	.word	0x20000e5c
    a274:	0000ada5 	.word	0x0000ada5

0000a278 <cdcdf_acm_ctrl>:
{
    a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a27c:	b083      	sub	sp, #12
    a27e:	4616      	mov	r6, r2
	switch (ctrl) {
    a280:	2901      	cmp	r1, #1
    a282:	d066      	beq.n	a352 <cdcdf_acm_ctrl+0xda>
    a284:	b141      	cbz	r1, a298 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    a286:	2902      	cmp	r1, #2
    a288:	bf0c      	ite	eq
    a28a:	f06f 001a 	mvneq.w	r0, #26
    a28e:	f06f 000c 	mvnne.w	r0, #12
}
    a292:	b003      	add	sp, #12
    a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a298:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    a29c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a29e:	2800      	cmp	r0, #0
    a2a0:	f000 8085 	beq.w	a3ae <cdcdf_acm_ctrl+0x136>
    a2a4:	f10a 3bff 	add.w	fp, sl, #4294967295
    a2a8:	f10a 0301 	add.w	r3, sl, #1
    a2ac:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a2ae:	4f46      	ldr	r7, [pc, #280]	; (a3c8 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    a2b0:	f8df 9124 	ldr.w	r9, [pc, #292]	; a3d8 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a2b4:	f8df 8124 	ldr.w	r8, [pc, #292]	; a3dc <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    a2b8:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a2ba:	7943      	ldrb	r3, [r0, #5]
    a2bc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a2c0:	2b02      	cmp	r3, #2
    a2c2:	d002      	beq.n	a2ca <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    a2c4:	f06f 0009 	mvn.w	r0, #9
    a2c8:	e7e3      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
    a2ca:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a2ce:	f89b 3000 	ldrb.w	r3, [fp]
    a2d2:	429a      	cmp	r2, r3
    a2d4:	d06e      	beq.n	a3b4 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a2d6:	2bff      	cmp	r3, #255	; 0xff
    a2d8:	d16f      	bne.n	a3ba <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a2da:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a2de:	2205      	movs	r2, #5
    a2e0:	6871      	ldr	r1, [r6, #4]
    a2e2:	4b3a      	ldr	r3, [pc, #232]	; (a3cc <cdcdf_acm_ctrl+0x154>)
    a2e4:	4798      	blx	r3
		while (NULL != ep) {
    a2e6:	4604      	mov	r4, r0
    a2e8:	b1f8      	cbz	r0, a32a <cdcdf_acm_ctrl+0xb2>
    a2ea:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    a2ee:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    a2f0:	7963      	ldrb	r3, [r4, #5]
    a2f2:	7922      	ldrb	r2, [r4, #4]
    a2f4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a2f8:	b292      	uxth	r2, r2
    a2fa:	78e1      	ldrb	r1, [r4, #3]
    a2fc:	4628      	mov	r0, r5
    a2fe:	47b8      	blx	r7
    a300:	2800      	cmp	r0, #0
    a302:	d15d      	bne.n	a3c0 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a304:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a308:	bf14      	ite	ne
    a30a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a30e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a312:	4628      	mov	r0, r5
    a314:	47c8      	blx	r9
			desc->sod = ep;
    a316:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a318:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a31a:	6871      	ldr	r1, [r6, #4]
    a31c:	4420      	add	r0, r4
    a31e:	47c0      	blx	r8
		while (NULL != ep) {
    a320:	4604      	mov	r4, r0
    a322:	2800      	cmp	r0, #0
    a324:	d1e3      	bne.n	a2ee <cdcdf_acm_ctrl+0x76>
    a326:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a32a:	6833      	ldr	r3, [r6, #0]
    a32c:	7818      	ldrb	r0, [r3, #0]
    a32e:	2204      	movs	r2, #4
    a330:	6871      	ldr	r1, [r6, #4]
    a332:	4418      	add	r0, r3
    a334:	4b25      	ldr	r3, [pc, #148]	; (a3cc <cdcdf_acm_ctrl+0x154>)
    a336:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    a338:	9b00      	ldr	r3, [sp, #0]
    a33a:	459b      	cmp	fp, r3
    a33c:	d004      	beq.n	a348 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    a33e:	2800      	cmp	r0, #0
    a340:	d1ba      	bne.n	a2b8 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    a342:	f06f 0009 	mvn.w	r0, #9
    a346:	e7a4      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    a348:	2201      	movs	r2, #1
    a34a:	4b21      	ldr	r3, [pc, #132]	; (a3d0 <cdcdf_acm_ctrl+0x158>)
    a34c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a34e:	2000      	movs	r0, #0
    a350:	e79f      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    a352:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a354:	b142      	cbz	r2, a368 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a356:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a358:	795b      	ldrb	r3, [r3, #5]
    a35a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a35e:	2b02      	cmp	r3, #2
    a360:	d002      	beq.n	a368 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    a362:	f06f 0009 	mvn.w	r0, #9
    a366:	e794      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    a368:	7823      	ldrb	r3, [r4, #0]
    a36a:	2bff      	cmp	r3, #255	; 0xff
    a36c:	d008      	beq.n	a380 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    a36e:	23ff      	movs	r3, #255	; 0xff
    a370:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    a372:	78a0      	ldrb	r0, [r4, #2]
    a374:	4298      	cmp	r0, r3
    a376:	d003      	beq.n	a380 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a378:	4b16      	ldr	r3, [pc, #88]	; (a3d4 <cdcdf_acm_ctrl+0x15c>)
    a37a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a37c:	23ff      	movs	r3, #255	; 0xff
    a37e:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    a380:	7863      	ldrb	r3, [r4, #1]
    a382:	2bff      	cmp	r3, #255	; 0xff
    a384:	d008      	beq.n	a398 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    a386:	23ff      	movs	r3, #255	; 0xff
    a388:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    a38a:	78e0      	ldrb	r0, [r4, #3]
    a38c:	4298      	cmp	r0, r3
    a38e:	d003      	beq.n	a398 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a390:	4b10      	ldr	r3, [pc, #64]	; (a3d4 <cdcdf_acm_ctrl+0x15c>)
    a392:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a394:	23ff      	movs	r3, #255	; 0xff
    a396:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    a398:	7920      	ldrb	r0, [r4, #4]
    a39a:	28ff      	cmp	r0, #255	; 0xff
    a39c:	d003      	beq.n	a3a6 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    a39e:	4b0d      	ldr	r3, [pc, #52]	; (a3d4 <cdcdf_acm_ctrl+0x15c>)
    a3a0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a3a2:	23ff      	movs	r3, #255	; 0xff
    a3a4:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    a3a6:	2000      	movs	r0, #0
    a3a8:	4b09      	ldr	r3, [pc, #36]	; (a3d0 <cdcdf_acm_ctrl+0x158>)
    a3aa:	7158      	strb	r0, [r3, #5]
    a3ac:	e771      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    a3ae:	f06f 0009 	mvn.w	r0, #9
    a3b2:	e76e      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    a3b4:	f06f 0011 	mvn.w	r0, #17
    a3b8:	e76b      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    a3ba:	f06f 001b 	mvn.w	r0, #27
    a3be:	e768      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    a3c0:	f06f 0013 	mvn.w	r0, #19
    a3c4:	e765      	b.n	a292 <cdcdf_acm_ctrl+0x1a>
    a3c6:	bf00      	nop
    a3c8:	00005785 	.word	0x00005785
    a3cc:	0000b2e9 	.word	0x0000b2e9
    a3d0:	20000e54 	.word	0x20000e54
    a3d4:	000057ed 	.word	0x000057ed
    a3d8:	00005819 	.word	0x00005819
    a3dc:	0000b323 	.word	0x0000b323

0000a3e0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a3e0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a3e2:	4b0a      	ldr	r3, [pc, #40]	; (a40c <cdcdf_acm_init+0x2c>)
    a3e4:	4798      	blx	r3
    a3e6:	2801      	cmp	r0, #1
    a3e8:	d80c      	bhi.n	a404 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a3ea:	4809      	ldr	r0, [pc, #36]	; (a410 <cdcdf_acm_init+0x30>)
    a3ec:	4b09      	ldr	r3, [pc, #36]	; (a414 <cdcdf_acm_init+0x34>)
    a3ee:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a3f0:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    a3f2:	3018      	adds	r0, #24
    a3f4:	4b08      	ldr	r3, [pc, #32]	; (a418 <cdcdf_acm_init+0x38>)
    a3f6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a3f8:	4908      	ldr	r1, [pc, #32]	; (a41c <cdcdf_acm_init+0x3c>)
    a3fa:	2001      	movs	r0, #1
    a3fc:	4b08      	ldr	r3, [pc, #32]	; (a420 <cdcdf_acm_init+0x40>)
    a3fe:	4798      	blx	r3
	return ERR_NONE;
    a400:	2000      	movs	r0, #0
    a402:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a404:	f06f 0010 	mvn.w	r0, #16
}
    a408:	bd08      	pop	{r3, pc}
    a40a:	bf00      	nop
    a40c:	0000b2d5 	.word	0x0000b2d5
    a410:	20000e54 	.word	0x20000e54
    a414:	0000a279 	.word	0x0000a279
    a418:	0000b275 	.word	0x0000b275
    a41c:	20000398 	.word	0x20000398
    a420:	0000b1e1 	.word	0x0000b1e1

0000a424 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    a424:	4b07      	ldr	r3, [pc, #28]	; (a444 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a426:	795b      	ldrb	r3, [r3, #5]
    a428:	b143      	cbz	r3, a43c <cdcdf_acm_write+0x18>
{
    a42a:	b510      	push	{r4, lr}
    a42c:	460a      	mov	r2, r1
    a42e:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a430:	2301      	movs	r3, #1
    a432:	4804      	ldr	r0, [pc, #16]	; (a444 <cdcdf_acm_write+0x20>)
    a434:	78c0      	ldrb	r0, [r0, #3]
    a436:	4c04      	ldr	r4, [pc, #16]	; (a448 <cdcdf_acm_write+0x24>)
    a438:	47a0      	blx	r4
    a43a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    a43c:	f06f 0010 	mvn.w	r0, #16
    a440:	4770      	bx	lr
    a442:	bf00      	nop
    a444:	20000e54 	.word	0x20000e54
    a448:	0000ada5 	.word	0x0000ada5

0000a44c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a44c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a44e:	780b      	ldrb	r3, [r1, #0]
    a450:	2b81      	cmp	r3, #129	; 0x81
    a452:	d010      	beq.n	a476 <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a454:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a458:	2b01      	cmp	r3, #1
    a45a:	d13f      	bne.n	a4dc <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    a45c:	888a      	ldrh	r2, [r1, #4]
    a45e:	4b22      	ldr	r3, [pc, #136]	; (a4e8 <hid_keyboard_req+0x9c>)
    a460:	7b1b      	ldrb	r3, [r3, #12]
    a462:	429a      	cmp	r2, r3
    a464:	d13d      	bne.n	a4e2 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    a466:	784b      	ldrb	r3, [r1, #1]
    a468:	2b03      	cmp	r3, #3
    a46a:	d028      	beq.n	a4be <hid_keyboard_req+0x72>
    a46c:	2b0b      	cmp	r3, #11
    a46e:	d02c      	beq.n	a4ca <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a470:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a474:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a476:	784b      	ldrb	r3, [r1, #1]
    a478:	2b06      	cmp	r3, #6
    a47a:	d002      	beq.n	a482 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    a47c:	f06f 0009 	mvn.w	r0, #9
    a480:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    a482:	888a      	ldrh	r2, [r1, #4]
    a484:	4b18      	ldr	r3, [pc, #96]	; (a4e8 <hid_keyboard_req+0x9c>)
    a486:	7b1b      	ldrb	r3, [r3, #12]
    a488:	429a      	cmp	r2, r3
    a48a:	d002      	beq.n	a492 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    a48c:	f06f 0009 	mvn.w	r0, #9
    a490:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a492:	884b      	ldrh	r3, [r1, #2]
    a494:	0a1b      	lsrs	r3, r3, #8
    a496:	2b21      	cmp	r3, #33	; 0x21
    a498:	d004      	beq.n	a4a4 <hid_keyboard_req+0x58>
    a49a:	2b22      	cmp	r3, #34	; 0x22
    a49c:	d009      	beq.n	a4b2 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    a49e:	f06f 000c 	mvn.w	r0, #12
    a4a2:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    a4a4:	4b10      	ldr	r3, [pc, #64]	; (a4e8 <hid_keyboard_req+0x9c>)
    a4a6:	6819      	ldr	r1, [r3, #0]
    a4a8:	2300      	movs	r3, #0
    a4aa:	780a      	ldrb	r2, [r1, #0]
    a4ac:	4c0f      	ldr	r4, [pc, #60]	; (a4ec <hid_keyboard_req+0xa0>)
    a4ae:	47a0      	blx	r4
    a4b0:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    a4b2:	2300      	movs	r3, #0
    a4b4:	223b      	movs	r2, #59	; 0x3b
    a4b6:	490e      	ldr	r1, [pc, #56]	; (a4f0 <hid_keyboard_req+0xa4>)
    a4b8:	4c0c      	ldr	r4, [pc, #48]	; (a4ec <hid_keyboard_req+0xa0>)
    a4ba:	47a0      	blx	r4
    a4bc:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    a4be:	2300      	movs	r3, #0
    a4c0:	2201      	movs	r2, #1
    a4c2:	490c      	ldr	r1, [pc, #48]	; (a4f4 <hid_keyboard_req+0xa8>)
    a4c4:	4c09      	ldr	r4, [pc, #36]	; (a4ec <hid_keyboard_req+0xa0>)
    a4c6:	47a0      	blx	r4
    a4c8:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    a4ca:	884a      	ldrh	r2, [r1, #2]
    a4cc:	4b06      	ldr	r3, [pc, #24]	; (a4e8 <hid_keyboard_req+0x9c>)
    a4ce:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    a4d0:	2300      	movs	r3, #0
    a4d2:	461a      	mov	r2, r3
    a4d4:	4619      	mov	r1, r3
    a4d6:	4c05      	ldr	r4, [pc, #20]	; (a4ec <hid_keyboard_req+0xa0>)
    a4d8:	47a0      	blx	r4
    a4da:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a4dc:	f06f 0009 	mvn.w	r0, #9
    a4e0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a4e2:	f06f 0009 	mvn.w	r0, #9
    a4e6:	bd10      	pop	{r4, pc}
    a4e8:	20000e78 	.word	0x20000e78
    a4ec:	0000ada5 	.word	0x0000ada5
    a4f0:	0000dccc 	.word	0x0000dccc
    a4f4:	20000e87 	.word	0x20000e87

0000a4f8 <hid_keyboard_ctrl>:
{
    a4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4fc:	4614      	mov	r4, r2
	switch (ctrl) {
    a4fe:	2901      	cmp	r1, #1
    a500:	d050      	beq.n	a5a4 <hid_keyboard_ctrl+0xac>
    a502:	b141      	cbz	r1, a516 <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    a504:	2902      	cmp	r1, #2
    a506:	bf0c      	ite	eq
    a508:	f06f 051a 	mvneq.w	r5, #26
    a50c:	f06f 050c 	mvnne.w	r5, #12
}
    a510:	4628      	mov	r0, r5
    a512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a516:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    a51a:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a51c:	2b00      	cmp	r3, #0
    a51e:	d05e      	beq.n	a5de <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a520:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a522:	795b      	ldrb	r3, [r3, #5]
    a524:	2b03      	cmp	r3, #3
    a526:	d15d      	bne.n	a5e4 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a528:	f898 300c 	ldrb.w	r3, [r8, #12]
    a52c:	429a      	cmp	r2, r3
    a52e:	d05c      	beq.n	a5ea <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a530:	2bff      	cmp	r3, #255	; 0xff
    a532:	d15d      	bne.n	a5f0 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a534:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a538:	6823      	ldr	r3, [r4, #0]
    a53a:	7818      	ldrb	r0, [r3, #0]
    a53c:	2221      	movs	r2, #33	; 0x21
    a53e:	6861      	ldr	r1, [r4, #4]
    a540:	4418      	add	r0, r3
    a542:	4b31      	ldr	r3, [pc, #196]	; (a608 <hid_keyboard_ctrl+0x110>)
    a544:	4798      	blx	r3
    a546:	4b31      	ldr	r3, [pc, #196]	; (a60c <hid_keyboard_ctrl+0x114>)
    a548:	6018      	str	r0, [r3, #0]
    a54a:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a54c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; a614 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a550:	f8df a0c4 	ldr.w	sl, [pc, #196]	; a618 <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    a554:	f8df b0c4 	ldr.w	fp, [pc, #196]	; a61c <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a558:	6823      	ldr	r3, [r4, #0]
    a55a:	7818      	ldrb	r0, [r3, #0]
    a55c:	6861      	ldr	r1, [r4, #4]
    a55e:	4418      	add	r0, r3
    a560:	47c8      	blx	r9
		desc->sod = ep;
    a562:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    a564:	2800      	cmp	r0, #0
    a566:	d046      	beq.n	a5f6 <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    a568:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a56a:	7943      	ldrb	r3, [r0, #5]
    a56c:	7902      	ldrb	r2, [r0, #4]
    a56e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a572:	b292      	uxth	r2, r2
    a574:	78c1      	ldrb	r1, [r0, #3]
    a576:	4638      	mov	r0, r7
    a578:	47d0      	blx	sl
    a57a:	4605      	mov	r5, r0
    a57c:	2800      	cmp	r0, #0
    a57e:	d13d      	bne.n	a5fc <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a580:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    a584:	bf14      	ite	ne
    a586:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a58a:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    a58e:	4638      	mov	r0, r7
    a590:	47d8      	blx	fp
    a592:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    a594:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a598:	d1de      	bne.n	a558 <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    a59a:	4b1c      	ldr	r3, [pc, #112]	; (a60c <hid_keyboard_ctrl+0x114>)
    a59c:	2201      	movs	r2, #1
    a59e:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    a5a0:	741a      	strb	r2, [r3, #16]
    a5a2:	e7b5      	b.n	a510 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    a5a4:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a5a6:	b11a      	cbz	r2, a5b0 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a5a8:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a5aa:	795b      	ldrb	r3, [r3, #5]
    a5ac:	2b03      	cmp	r3, #3
    a5ae:	d128      	bne.n	a602 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    a5b0:	7b2b      	ldrb	r3, [r5, #12]
    a5b2:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a5b4:	bf1c      	itt	ne
    a5b6:	23ff      	movne	r3, #255	; 0xff
    a5b8:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    a5ba:	7b68      	ldrb	r0, [r5, #13]
    a5bc:	28ff      	cmp	r0, #255	; 0xff
    a5be:	d003      	beq.n	a5c8 <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    a5c0:	4b13      	ldr	r3, [pc, #76]	; (a610 <hid_keyboard_ctrl+0x118>)
    a5c2:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a5c4:	23ff      	movs	r3, #255	; 0xff
    a5c6:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    a5c8:	7ba8      	ldrb	r0, [r5, #14]
    a5ca:	28ff      	cmp	r0, #255	; 0xff
    a5cc:	d003      	beq.n	a5d6 <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    a5ce:	4b10      	ldr	r3, [pc, #64]	; (a610 <hid_keyboard_ctrl+0x118>)
    a5d0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a5d2:	23ff      	movs	r3, #255	; 0xff
    a5d4:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    a5d6:	2500      	movs	r5, #0
    a5d8:	4b0c      	ldr	r3, [pc, #48]	; (a60c <hid_keyboard_ctrl+0x114>)
    a5da:	741d      	strb	r5, [r3, #16]
    a5dc:	e798      	b.n	a510 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a5de:	f06f 0509 	mvn.w	r5, #9
    a5e2:	e795      	b.n	a510 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    a5e4:	f06f 0509 	mvn.w	r5, #9
    a5e8:	e792      	b.n	a510 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    a5ea:	f06f 0511 	mvn.w	r5, #17
    a5ee:	e78f      	b.n	a510 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    a5f0:	f06f 051b 	mvn.w	r5, #27
    a5f4:	e78c      	b.n	a510 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a5f6:	f06f 0509 	mvn.w	r5, #9
    a5fa:	e789      	b.n	a510 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    a5fc:	f06f 0513 	mvn.w	r5, #19
    a600:	e786      	b.n	a510 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    a602:	f06f 0509 	mvn.w	r5, #9
    a606:	e783      	b.n	a510 <hid_keyboard_ctrl+0x18>
    a608:	0000b2e9 	.word	0x0000b2e9
    a60c:	20000e78 	.word	0x20000e78
    a610:	000057ed 	.word	0x000057ed
    a614:	0000b323 	.word	0x0000b323
    a618:	00005785 	.word	0x00005785
    a61c:	00005819 	.word	0x00005819

0000a620 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    a620:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a622:	4b0a      	ldr	r3, [pc, #40]	; (a64c <hiddf_keyboard_init+0x2c>)
    a624:	4798      	blx	r3
    a626:	2801      	cmp	r0, #1
    a628:	d80c      	bhi.n	a644 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    a62a:	4809      	ldr	r0, [pc, #36]	; (a650 <hiddf_keyboard_init+0x30>)
    a62c:	4b09      	ldr	r3, [pc, #36]	; (a654 <hiddf_keyboard_init+0x34>)
    a62e:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    a630:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    a632:	3014      	adds	r0, #20
    a634:	4b08      	ldr	r3, [pc, #32]	; (a658 <hiddf_keyboard_init+0x38>)
    a636:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    a638:	4908      	ldr	r1, [pc, #32]	; (a65c <hiddf_keyboard_init+0x3c>)
    a63a:	2001      	movs	r0, #1
    a63c:	4b08      	ldr	r3, [pc, #32]	; (a660 <hiddf_keyboard_init+0x40>)
    a63e:	4798      	blx	r3
	return ERR_NONE;
    a640:	2000      	movs	r0, #0
    a642:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a644:	f06f 0010 	mvn.w	r0, #16
}
    a648:	bd08      	pop	{r3, pc}
    a64a:	bf00      	nop
    a64c:	0000b2d5 	.word	0x0000b2d5
    a650:	20000e78 	.word	0x20000e78
    a654:	0000a4f9 	.word	0x0000a4f9
    a658:	0000b275 	.word	0x0000b275
    a65c:	200003a0 	.word	0x200003a0
    a660:	0000b1e1 	.word	0x0000b1e1

0000a664 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    a664:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    a666:	4b26      	ldr	r3, [pc, #152]	; (a700 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    a668:	7c1b      	ldrb	r3, [r3, #16]
    a66a:	2b00      	cmp	r3, #0
    a66c:	d045      	beq.n	a6fa <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    a66e:	4a24      	ldr	r2, [pc, #144]	; (a700 <hiddf_keyboard_keys_state_change+0x9c>)
    a670:	2300      	movs	r3, #0
    a672:	6053      	str	r3, [r2, #4]
    a674:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    a676:	b329      	cbz	r1, a6c4 <hiddf_keyboard_keys_state_change+0x60>
    a678:	4603      	mov	r3, r0
    a67a:	1e4d      	subs	r5, r1, #1
    a67c:	b2ed      	uxtb	r5, r5
    a67e:	3501      	adds	r5, #1
    a680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a684:	4405      	add	r5, r0
    a686:	2200      	movs	r2, #0
    a688:	e002      	b.n	a690 <hiddf_keyboard_keys_state_change+0x2c>
    a68a:	3303      	adds	r3, #3
    a68c:	42ab      	cmp	r3, r5
    a68e:	d005      	beq.n	a69c <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    a690:	785c      	ldrb	r4, [r3, #1]
    a692:	2c00      	cmp	r4, #0
    a694:	d0f9      	beq.n	a68a <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    a696:	3201      	adds	r2, #1
    a698:	b2d2      	uxtb	r2, r2
    a69a:	e7f6      	b.n	a68a <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    a69c:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    a69e:	b2d2      	uxtb	r2, r2
    a6a0:	2a06      	cmp	r2, #6
    a6a2:	d809      	bhi.n	a6b8 <hiddf_keyboard_keys_state_change+0x54>
    a6a4:	4603      	mov	r3, r0
    a6a6:	1e4a      	subs	r2, r1, #1
    a6a8:	b2d2      	uxtb	r2, r2
    a6aa:	3201      	adds	r2, #1
    a6ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a6b0:	4410      	add	r0, r2
    a6b2:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a6b4:	4d12      	ldr	r5, [pc, #72]	; (a700 <hiddf_keyboard_keys_state_change+0x9c>)
    a6b6:	e015      	b.n	a6e4 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    a6b8:	4b11      	ldr	r3, [pc, #68]	; (a700 <hiddf_keyboard_keys_state_change+0x9c>)
    a6ba:	f04f 32ff 	mov.w	r2, #4294967295
    a6be:	f8c3 2006 	str.w	r2, [r3, #6]
    a6c2:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    a6c4:	480e      	ldr	r0, [pc, #56]	; (a700 <hiddf_keyboard_keys_state_change+0x9c>)
    a6c6:	2300      	movs	r3, #0
    a6c8:	2208      	movs	r2, #8
    a6ca:	1d01      	adds	r1, r0, #4
    a6cc:	7b40      	ldrb	r0, [r0, #13]
    a6ce:	4c0d      	ldr	r4, [pc, #52]	; (a704 <hiddf_keyboard_keys_state_change+0xa0>)
    a6d0:	47a0      	blx	r4
    a6d2:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    a6d4:	1c62      	adds	r2, r4, #1
    a6d6:	7819      	ldrb	r1, [r3, #0]
    a6d8:	442c      	add	r4, r5
    a6da:	7121      	strb	r1, [r4, #4]
    a6dc:	b2d4      	uxtb	r4, r2
    a6de:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    a6e0:	4283      	cmp	r3, r0
    a6e2:	d0ef      	beq.n	a6c4 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    a6e4:	789a      	ldrb	r2, [r3, #2]
    a6e6:	2a01      	cmp	r2, #1
    a6e8:	d1f9      	bne.n	a6de <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    a6ea:	785a      	ldrb	r2, [r3, #1]
    a6ec:	2a00      	cmp	r2, #0
    a6ee:	d0f1      	beq.n	a6d4 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    a6f0:	792a      	ldrb	r2, [r5, #4]
    a6f2:	7819      	ldrb	r1, [r3, #0]
    a6f4:	430a      	orrs	r2, r1
    a6f6:	712a      	strb	r2, [r5, #4]
    a6f8:	e7f1      	b.n	a6de <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    a6fa:	f06f 0010 	mvn.w	r0, #16
}
    a6fe:	bd38      	pop	{r3, r4, r5, pc}
    a700:	20000e78 	.word	0x20000e78
    a704:	0000ada5 	.word	0x0000ada5

0000a708 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a708:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a70a:	780b      	ldrb	r3, [r1, #0]
    a70c:	2b81      	cmp	r3, #129	; 0x81
    a70e:	d010      	beq.n	a732 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a710:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a714:	2b01      	cmp	r3, #1
    a716:	d13f      	bne.n	a798 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    a718:	888a      	ldrh	r2, [r1, #4]
    a71a:	4b22      	ldr	r3, [pc, #136]	; (a7a4 <hid_mouse_req+0x9c>)
    a71c:	7a1b      	ldrb	r3, [r3, #8]
    a71e:	429a      	cmp	r2, r3
    a720:	d13d      	bne.n	a79e <hid_mouse_req+0x96>
			switch (req->bRequest) {
    a722:	784b      	ldrb	r3, [r1, #1]
    a724:	2b03      	cmp	r3, #3
    a726:	d028      	beq.n	a77a <hid_mouse_req+0x72>
    a728:	2b0b      	cmp	r3, #11
    a72a:	d02c      	beq.n	a786 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    a72c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a730:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a732:	784b      	ldrb	r3, [r1, #1]
    a734:	2b06      	cmp	r3, #6
    a736:	d002      	beq.n	a73e <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    a738:	f06f 0009 	mvn.w	r0, #9
    a73c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    a73e:	888a      	ldrh	r2, [r1, #4]
    a740:	4b18      	ldr	r3, [pc, #96]	; (a7a4 <hid_mouse_req+0x9c>)
    a742:	7a1b      	ldrb	r3, [r3, #8]
    a744:	429a      	cmp	r2, r3
    a746:	d002      	beq.n	a74e <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    a748:	f06f 0009 	mvn.w	r0, #9
    a74c:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    a74e:	884b      	ldrh	r3, [r1, #2]
    a750:	0a1b      	lsrs	r3, r3, #8
    a752:	2b21      	cmp	r3, #33	; 0x21
    a754:	d004      	beq.n	a760 <hid_mouse_req+0x58>
    a756:	2b22      	cmp	r3, #34	; 0x22
    a758:	d009      	beq.n	a76e <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    a75a:	f06f 000c 	mvn.w	r0, #12
    a75e:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    a760:	4b10      	ldr	r3, [pc, #64]	; (a7a4 <hid_mouse_req+0x9c>)
    a762:	6819      	ldr	r1, [r3, #0]
    a764:	2300      	movs	r3, #0
    a766:	780a      	ldrb	r2, [r1, #0]
    a768:	4c0f      	ldr	r4, [pc, #60]	; (a7a8 <hid_mouse_req+0xa0>)
    a76a:	47a0      	blx	r4
    a76c:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    a76e:	2300      	movs	r3, #0
    a770:	2234      	movs	r2, #52	; 0x34
    a772:	490e      	ldr	r1, [pc, #56]	; (a7ac <hid_mouse_req+0xa4>)
    a774:	4c0c      	ldr	r4, [pc, #48]	; (a7a8 <hid_mouse_req+0xa0>)
    a776:	47a0      	blx	r4
    a778:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    a77a:	2300      	movs	r3, #0
    a77c:	2201      	movs	r2, #1
    a77e:	490c      	ldr	r1, [pc, #48]	; (a7b0 <hid_mouse_req+0xa8>)
    a780:	4c09      	ldr	r4, [pc, #36]	; (a7a8 <hid_mouse_req+0xa0>)
    a782:	47a0      	blx	r4
    a784:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    a786:	884a      	ldrh	r2, [r1, #2]
    a788:	4b06      	ldr	r3, [pc, #24]	; (a7a4 <hid_mouse_req+0x9c>)
    a78a:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    a78c:	2300      	movs	r3, #0
    a78e:	461a      	mov	r2, r3
    a790:	4619      	mov	r1, r3
    a792:	4c05      	ldr	r4, [pc, #20]	; (a7a8 <hid_mouse_req+0xa0>)
    a794:	47a0      	blx	r4
    a796:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a798:	f06f 0009 	mvn.w	r0, #9
    a79c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a79e:	f06f 0009 	mvn.w	r0, #9
    a7a2:	bd10      	pop	{r4, pc}
    a7a4:	20000e98 	.word	0x20000e98
    a7a8:	0000ada5 	.word	0x0000ada5
    a7ac:	0000dd08 	.word	0x0000dd08
    a7b0:	20000ea2 	.word	0x20000ea2

0000a7b4 <hid_mouse_ctrl>:
{
    a7b4:	b570      	push	{r4, r5, r6, lr}
    a7b6:	4614      	mov	r4, r2
	switch (ctrl) {
    a7b8:	2901      	cmp	r1, #1
    a7ba:	d040      	beq.n	a83e <hid_mouse_ctrl+0x8a>
    a7bc:	b139      	cbz	r1, a7ce <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    a7be:	2902      	cmp	r1, #2
    a7c0:	bf0c      	ite	eq
    a7c2:	f06f 041a 	mvneq.w	r4, #26
    a7c6:	f06f 040c 	mvnne.w	r4, #12
}
    a7ca:	4620      	mov	r0, r4
    a7cc:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a7ce:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    a7d0:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d049      	beq.n	a86a <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    a7d6:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    a7d8:	795b      	ldrb	r3, [r3, #5]
    a7da:	2b03      	cmp	r3, #3
    a7dc:	d148      	bne.n	a870 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    a7de:	7a2b      	ldrb	r3, [r5, #8]
    a7e0:	429a      	cmp	r2, r3
    a7e2:	d048      	beq.n	a876 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    a7e4:	2bff      	cmp	r3, #255	; 0xff
    a7e6:	d149      	bne.n	a87c <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    a7e8:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    a7ea:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    a7ec:	7818      	ldrb	r0, [r3, #0]
    a7ee:	2221      	movs	r2, #33	; 0x21
    a7f0:	6861      	ldr	r1, [r4, #4]
    a7f2:	4418      	add	r0, r3
    a7f4:	4b29      	ldr	r3, [pc, #164]	; (a89c <hid_mouse_ctrl+0xe8>)
    a7f6:	4798      	blx	r3
    a7f8:	4b29      	ldr	r3, [pc, #164]	; (a8a0 <hid_mouse_ctrl+0xec>)
    a7fa:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a7fc:	6823      	ldr	r3, [r4, #0]
    a7fe:	7818      	ldrb	r0, [r3, #0]
    a800:	6861      	ldr	r1, [r4, #4]
    a802:	4418      	add	r0, r3
    a804:	4b27      	ldr	r3, [pc, #156]	; (a8a4 <hid_mouse_ctrl+0xf0>)
    a806:	4798      	blx	r3
	desc->sod = ep;
    a808:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    a80a:	2800      	cmp	r0, #0
    a80c:	d039      	beq.n	a882 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    a80e:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    a810:	7943      	ldrb	r3, [r0, #5]
    a812:	7902      	ldrb	r2, [r0, #4]
    a814:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a818:	b292      	uxth	r2, r2
    a81a:	78c1      	ldrb	r1, [r0, #3]
    a81c:	4630      	mov	r0, r6
    a81e:	4b22      	ldr	r3, [pc, #136]	; (a8a8 <hid_mouse_ctrl+0xf4>)
    a820:	4798      	blx	r3
    a822:	4604      	mov	r4, r0
    a824:	bb80      	cbnz	r0, a888 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a826:	f016 0f80 	tst.w	r6, #128	; 0x80
    a82a:	d030      	beq.n	a88e <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    a82c:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    a82e:	4630      	mov	r0, r6
    a830:	4b1e      	ldr	r3, [pc, #120]	; (a8ac <hid_mouse_ctrl+0xf8>)
    a832:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    a834:	4b1a      	ldr	r3, [pc, #104]	; (a8a0 <hid_mouse_ctrl+0xec>)
    a836:	2201      	movs	r2, #1
    a838:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    a83a:	72da      	strb	r2, [r3, #11]
    a83c:	e7c5      	b.n	a7ca <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    a83e:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    a840:	b11a      	cbz	r2, a84a <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a842:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    a844:	795b      	ldrb	r3, [r3, #5]
    a846:	2b03      	cmp	r3, #3
    a848:	d124      	bne.n	a894 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    a84a:	7a2b      	ldrb	r3, [r5, #8]
    a84c:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    a84e:	bf1c      	itt	ne
    a850:	23ff      	movne	r3, #255	; 0xff
    a852:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    a854:	7a68      	ldrb	r0, [r5, #9]
    a856:	28ff      	cmp	r0, #255	; 0xff
    a858:	d003      	beq.n	a862 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    a85a:	4b15      	ldr	r3, [pc, #84]	; (a8b0 <hid_mouse_ctrl+0xfc>)
    a85c:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    a85e:	23ff      	movs	r3, #255	; 0xff
    a860:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    a862:	2400      	movs	r4, #0
    a864:	4b0e      	ldr	r3, [pc, #56]	; (a8a0 <hid_mouse_ctrl+0xec>)
    a866:	72dc      	strb	r4, [r3, #11]
    a868:	e7af      	b.n	a7ca <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a86a:	f06f 0409 	mvn.w	r4, #9
    a86e:	e7ac      	b.n	a7ca <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a870:	f06f 0409 	mvn.w	r4, #9
    a874:	e7a9      	b.n	a7ca <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    a876:	f06f 0411 	mvn.w	r4, #17
    a87a:	e7a6      	b.n	a7ca <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    a87c:	f06f 041b 	mvn.w	r4, #27
    a880:	e7a3      	b.n	a7ca <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    a882:	f06f 0409 	mvn.w	r4, #9
    a886:	e7a0      	b.n	a7ca <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    a888:	f06f 0413 	mvn.w	r4, #19
    a88c:	e79d      	b.n	a7ca <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    a88e:	f04f 34ff 	mov.w	r4, #4294967295
    a892:	e79a      	b.n	a7ca <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    a894:	f06f 0409 	mvn.w	r4, #9
    a898:	e797      	b.n	a7ca <hid_mouse_ctrl+0x16>
    a89a:	bf00      	nop
    a89c:	0000b2e9 	.word	0x0000b2e9
    a8a0:	20000e98 	.word	0x20000e98
    a8a4:	0000b323 	.word	0x0000b323
    a8a8:	00005785 	.word	0x00005785
    a8ac:	00005819 	.word	0x00005819
    a8b0:	000057ed 	.word	0x000057ed

0000a8b4 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    a8b4:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a8b6:	4b0a      	ldr	r3, [pc, #40]	; (a8e0 <hiddf_mouse_init+0x2c>)
    a8b8:	4798      	blx	r3
    a8ba:	2801      	cmp	r0, #1
    a8bc:	d80c      	bhi.n	a8d8 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    a8be:	4809      	ldr	r0, [pc, #36]	; (a8e4 <hiddf_mouse_init+0x30>)
    a8c0:	4b09      	ldr	r3, [pc, #36]	; (a8e8 <hiddf_mouse_init+0x34>)
    a8c2:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    a8c4:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    a8c6:	300c      	adds	r0, #12
    a8c8:	4b08      	ldr	r3, [pc, #32]	; (a8ec <hiddf_mouse_init+0x38>)
    a8ca:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    a8cc:	4908      	ldr	r1, [pc, #32]	; (a8f0 <hiddf_mouse_init+0x3c>)
    a8ce:	2001      	movs	r0, #1
    a8d0:	4b08      	ldr	r3, [pc, #32]	; (a8f4 <hiddf_mouse_init+0x40>)
    a8d2:	4798      	blx	r3
	return ERR_NONE;
    a8d4:	2000      	movs	r0, #0
    a8d6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a8d8:	f06f 0010 	mvn.w	r0, #16
}
    a8dc:	bd08      	pop	{r3, pc}
    a8de:	bf00      	nop
    a8e0:	0000b2d5 	.word	0x0000b2d5
    a8e4:	20000e98 	.word	0x20000e98
    a8e8:	0000a7b5 	.word	0x0000a7b5
    a8ec:	0000b275 	.word	0x0000b275
    a8f0:	200003a8 	.word	0x200003a8
    a8f4:	0000b1e1 	.word	0x0000b1e1

0000a8f8 <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    a8f8:	2200      	movs	r2, #0
    a8fa:	4b0d      	ldr	r3, [pc, #52]	; (a930 <hiddf_mouse_move+0x38>)
    a8fc:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    a8fe:	2901      	cmp	r1, #1
    a900:	d00e      	beq.n	a920 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    a902:	2902      	cmp	r1, #2
    a904:	d00e      	beq.n	a924 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    a906:	2903      	cmp	r1, #3
    a908:	d10f      	bne.n	a92a <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    a90a:	4b09      	ldr	r3, [pc, #36]	; (a930 <hiddf_mouse_move+0x38>)
    a90c:	71d8      	strb	r0, [r3, #7]
{
    a90e:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    a910:	4807      	ldr	r0, [pc, #28]	; (a930 <hiddf_mouse_move+0x38>)
    a912:	2300      	movs	r3, #0
    a914:	2204      	movs	r2, #4
    a916:	1881      	adds	r1, r0, r2
    a918:	7a40      	ldrb	r0, [r0, #9]
    a91a:	4c06      	ldr	r4, [pc, #24]	; (a934 <hiddf_mouse_move+0x3c>)
    a91c:	47a0      	blx	r4
    a91e:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    a920:	7158      	strb	r0, [r3, #5]
    a922:	e7f4      	b.n	a90e <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    a924:	4b02      	ldr	r3, [pc, #8]	; (a930 <hiddf_mouse_move+0x38>)
    a926:	7198      	strb	r0, [r3, #6]
    a928:	e7f1      	b.n	a90e <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    a92a:	f06f 000c 	mvn.w	r0, #12
    a92e:	4770      	bx	lr
    a930:	20000e98 	.word	0x20000e98
    a934:	0000ada5 	.word	0x0000ada5

0000a938 <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    a938:	4770      	bx	lr

0000a93a <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    a93a:	e7fe      	b.n	a93a <midi_cb_ep_bulk_out>

0000a93c <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a93c:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a93e:	780b      	ldrb	r3, [r1, #0]
    a940:	2b81      	cmp	r3, #129	; 0x81
    a942:	d014      	beq.n	a96e <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a944:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a948:	2b01      	cmp	r3, #1
    a94a:	d132      	bne.n	a9b2 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    a94c:	888b      	ldrh	r3, [r1, #4]
    a94e:	4a1c      	ldr	r2, [pc, #112]	; (a9c0 <audio_midi_req+0x84>)
    a950:	7912      	ldrb	r2, [r2, #4]
    a952:	429a      	cmp	r2, r3
    a954:	d003      	beq.n	a95e <audio_midi_req+0x22>
    a956:	4a1a      	ldr	r2, [pc, #104]	; (a9c0 <audio_midi_req+0x84>)
    a958:	7952      	ldrb	r2, [r2, #5]
    a95a:	429a      	cmp	r2, r3
    a95c:	d12c      	bne.n	a9b8 <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    a95e:	784b      	ldrb	r3, [r1, #1]
    a960:	2b03      	cmp	r3, #3
    a962:	d017      	beq.n	a994 <audio_midi_req+0x58>
    a964:	2b0b      	cmp	r3, #11
    a966:	d01b      	beq.n	a9a0 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    a968:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    a96c:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    a96e:	888b      	ldrh	r3, [r1, #4]
    a970:	4a13      	ldr	r2, [pc, #76]	; (a9c0 <audio_midi_req+0x84>)
    a972:	7912      	ldrb	r2, [r2, #4]
    a974:	429a      	cmp	r2, r3
    a976:	d006      	beq.n	a986 <audio_midi_req+0x4a>
    a978:	4a11      	ldr	r2, [pc, #68]	; (a9c0 <audio_midi_req+0x84>)
    a97a:	7952      	ldrb	r2, [r2, #5]
    a97c:	429a      	cmp	r2, r3
    a97e:	d002      	beq.n	a986 <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a980:	f06f 0009 	mvn.w	r0, #9
    a984:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    a986:	4b0e      	ldr	r3, [pc, #56]	; (a9c0 <audio_midi_req+0x84>)
    a988:	6819      	ldr	r1, [r3, #0]
    a98a:	2300      	movs	r3, #0
    a98c:	780a      	ldrb	r2, [r1, #0]
    a98e:	4c0d      	ldr	r4, [pc, #52]	; (a9c4 <audio_midi_req+0x88>)
    a990:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    a992:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    a994:	2300      	movs	r3, #0
    a996:	2201      	movs	r2, #1
    a998:	490b      	ldr	r1, [pc, #44]	; (a9c8 <audio_midi_req+0x8c>)
    a99a:	4c0a      	ldr	r4, [pc, #40]	; (a9c4 <audio_midi_req+0x88>)
    a99c:	47a0      	blx	r4
    a99e:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    a9a0:	884a      	ldrh	r2, [r1, #2]
    a9a2:	4b07      	ldr	r3, [pc, #28]	; (a9c0 <audio_midi_req+0x84>)
    a9a4:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    a9a6:	2300      	movs	r3, #0
    a9a8:	461a      	mov	r2, r3
    a9aa:	4619      	mov	r1, r3
    a9ac:	4c05      	ldr	r4, [pc, #20]	; (a9c4 <audio_midi_req+0x88>)
    a9ae:	47a0      	blx	r4
    a9b0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    a9b2:	f06f 0009 	mvn.w	r0, #9
    a9b6:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    a9b8:	f06f 0009 	mvn.w	r0, #9
    a9bc:	bd10      	pop	{r4, pc}
    a9be:	bf00      	nop
    a9c0:	20000eb0 	.word	0x20000eb0
    a9c4:	0000ada5 	.word	0x0000ada5
    a9c8:	20000eb8 	.word	0x20000eb8

0000a9cc <audio_midi_ctrl>:
{
    a9cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a9d0:	b083      	sub	sp, #12
    a9d2:	4615      	mov	r5, r2
	switch (ctrl) {
    a9d4:	2901      	cmp	r1, #1
    a9d6:	f000 8092 	beq.w	aafe <audio_midi_ctrl+0x132>
    a9da:	b141      	cbz	r1, a9ee <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    a9dc:	2902      	cmp	r1, #2
    a9de:	bf0c      	ite	eq
    a9e0:	f06f 001a 	mvneq.w	r0, #26
    a9e4:	f06f 000c 	mvnne.w	r0, #12
}
    a9e8:	b003      	add	sp, #12
    a9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    a9ee:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    a9f2:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    a9f4:	2800      	cmp	r0, #0
    a9f6:	f000 80a9 	beq.w	ab4c <audio_midi_ctrl+0x180>
    a9fa:	f109 0604 	add.w	r6, r9, #4
    a9fe:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    aa00:	f04f 0804 	mov.w	r8, #4
    aa04:	4f5d      	ldr	r7, [pc, #372]	; (ab7c <audio_midi_ctrl+0x1b0>)
    aa06:	e019      	b.n	aa3c <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    aa08:	f816 3b01 	ldrb.w	r3, [r6], #1
    aa0c:	429a      	cmp	r2, r3
    aa0e:	f000 80a3 	beq.w	ab58 <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    aa12:	2bff      	cmp	r3, #255	; 0xff
    aa14:	f040 80a3 	bne.w	ab5e <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    aa18:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    aa1c:	2c01      	cmp	r4, #1
    aa1e:	d016      	beq.n	aa4e <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    aa20:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    aa22:	7818      	ldrb	r0, [r3, #0]
    aa24:	4642      	mov	r2, r8
    aa26:	6869      	ldr	r1, [r5, #4]
    aa28:	4418      	add	r0, r3
    aa2a:	47b8      	blx	r7
    aa2c:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    aa2e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    aa32:	f000 809e 	beq.w	ab72 <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    aa36:	2800      	cmp	r0, #0
    aa38:	f000 808b 	beq.w	ab52 <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    aa3c:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    aa3e:	7943      	ldrb	r3, [r0, #5]
    aa40:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    aa44:	2b01      	cmp	r3, #1
    aa46:	d0df      	beq.n	aa08 <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    aa48:	f06f 0009 	mvn.w	r0, #9
    aa4c:	e7cc      	b.n	a9e8 <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    aa4e:	2205      	movs	r2, #5
    aa50:	6869      	ldr	r1, [r5, #4]
    aa52:	4b4a      	ldr	r3, [pc, #296]	; (ab7c <audio_midi_ctrl+0x1b0>)
    aa54:	4798      	blx	r3
    aa56:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    aa58:	4e49      	ldr	r6, [pc, #292]	; (ab80 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    aa5a:	f8df 8144 	ldr.w	r8, [pc, #324]	; aba0 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    aa5e:	4f49      	ldr	r7, [pc, #292]	; (ab84 <audio_midi_ctrl+0x1b8>)
    aa60:	e01a      	b.n	aa98 <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    aa62:	4a47      	ldr	r2, [pc, #284]	; (ab80 <audio_midi_ctrl+0x1b4>)
    aa64:	7953      	ldrb	r3, [r2, #5]
    aa66:	425b      	negs	r3, r3
    aa68:	b2db      	uxtb	r3, r3
    aa6a:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    aa6c:	f06f 0013 	mvn.w	r0, #19
    aa70:	e7ba      	b.n	a9e8 <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    aa72:	f89d 0002 	ldrb.w	r0, [sp, #2]
    aa76:	b2c0      	uxtb	r0, r0
    aa78:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    aa7c:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    aa7e:	4a42      	ldr	r2, [pc, #264]	; (ab88 <audio_midi_ctrl+0x1bc>)
    aa80:	2102      	movs	r1, #2
    aa82:	f899 0006 	ldrb.w	r0, [r9, #6]
    aa86:	4b41      	ldr	r3, [pc, #260]	; (ab8c <audio_midi_ctrl+0x1c0>)
    aa88:	4798      	blx	r3
				desc->sod = ep;
    aa8a:	602c      	str	r4, [r5, #0]
    aa8c:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    aa8e:	6869      	ldr	r1, [r5, #4]
    aa90:	4420      	add	r0, r4
    aa92:	4b3f      	ldr	r3, [pc, #252]	; (ab90 <audio_midi_ctrl+0x1c4>)
    aa94:	4798      	blx	r3
    aa96:	4604      	mov	r4, r0
			while (NULL != ep) {
    aa98:	2c00      	cmp	r4, #0
    aa9a:	d063      	beq.n	ab64 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    aa9c:	78a3      	ldrb	r3, [r4, #2]
    aa9e:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    aaa2:	78e3      	ldrb	r3, [r4, #3]
    aaa4:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    aaa8:	7962      	ldrb	r2, [r4, #5]
    aaaa:	7923      	ldrb	r3, [r4, #4]
    aaac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    aab0:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    aab2:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    aab6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    aaba:	b2db      	uxtb	r3, r3
    aabc:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    aabe:	2301      	movs	r3, #1
    aac0:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    aac2:	f89d 0002 	ldrb.w	r0, [sp, #2]
    aac6:	f89d 1003 	ldrb.w	r1, [sp, #3]
    aaca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    aace:	b292      	uxth	r2, r2
    aad0:	47c0      	blx	r8
    aad2:	b2c0      	uxtb	r0, r0
    aad4:	7170      	strb	r0, [r6, #5]
    aad6:	2800      	cmp	r0, #0
    aad8:	d1c3      	bne.n	aa62 <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    aada:	f89d 3002 	ldrb.w	r3, [sp, #2]
    aade:	f013 0f80 	tst.w	r3, #128	; 0x80
    aae2:	d1c6      	bne.n	aa72 <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    aae4:	f89d 0002 	ldrb.w	r0, [sp, #2]
    aae8:	b2c0      	uxtb	r0, r0
    aaea:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    aaee:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    aaf0:	4a28      	ldr	r2, [pc, #160]	; (ab94 <audio_midi_ctrl+0x1c8>)
    aaf2:	2102      	movs	r1, #2
    aaf4:	f899 0007 	ldrb.w	r0, [r9, #7]
    aaf8:	4b24      	ldr	r3, [pc, #144]	; (ab8c <audio_midi_ctrl+0x1c0>)
    aafa:	4798      	blx	r3
    aafc:	e7c5      	b.n	aa8a <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    aafe:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    ab00:	b142      	cbz	r2, ab14 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ab02:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    ab04:	795b      	ldrb	r3, [r3, #5]
    ab06:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ab0a:	2b01      	cmp	r3, #1
    ab0c:	d002      	beq.n	ab14 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    ab0e:	f06f 0009 	mvn.w	r0, #9
    ab12:	e769      	b.n	a9e8 <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    ab14:	7923      	ldrb	r3, [r4, #4]
    ab16:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    ab18:	bf1c      	itt	ne
    ab1a:	23ff      	movne	r3, #255	; 0xff
    ab1c:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    ab1e:	7963      	ldrb	r3, [r4, #5]
    ab20:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    ab22:	bf1c      	itt	ne
    ab24:	23ff      	movne	r3, #255	; 0xff
    ab26:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    ab28:	79a0      	ldrb	r0, [r4, #6]
    ab2a:	28ff      	cmp	r0, #255	; 0xff
    ab2c:	d003      	beq.n	ab36 <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    ab2e:	4b1a      	ldr	r3, [pc, #104]	; (ab98 <audio_midi_ctrl+0x1cc>)
    ab30:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ab32:	23ff      	movs	r3, #255	; 0xff
    ab34:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    ab36:	79e0      	ldrb	r0, [r4, #7]
    ab38:	28ff      	cmp	r0, #255	; 0xff
    ab3a:	d003      	beq.n	ab44 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    ab3c:	4b16      	ldr	r3, [pc, #88]	; (ab98 <audio_midi_ctrl+0x1cc>)
    ab3e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ab40:	23ff      	movs	r3, #255	; 0xff
    ab42:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    ab44:	2000      	movs	r0, #0
    ab46:	4b15      	ldr	r3, [pc, #84]	; (ab9c <audio_midi_ctrl+0x1d0>)
    ab48:	7358      	strb	r0, [r3, #13]
    ab4a:	e74d      	b.n	a9e8 <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    ab4c:	f06f 0009 	mvn.w	r0, #9
    ab50:	e74a      	b.n	a9e8 <audio_midi_ctrl+0x1c>
    ab52:	f06f 0009 	mvn.w	r0, #9
    ab56:	e747      	b.n	a9e8 <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    ab58:	f06f 0011 	mvn.w	r0, #17
    ab5c:	e744      	b.n	a9e8 <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    ab5e:	f06f 001b 	mvn.w	r0, #27
    ab62:	e741      	b.n	a9e8 <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    ab64:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    ab66:	7818      	ldrb	r0, [r3, #0]
    ab68:	2204      	movs	r2, #4
    ab6a:	6869      	ldr	r1, [r5, #4]
    ab6c:	4418      	add	r0, r3
    ab6e:	4b03      	ldr	r3, [pc, #12]	; (ab7c <audio_midi_ctrl+0x1b0>)
    ab70:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    ab72:	2201      	movs	r2, #1
    ab74:	4b09      	ldr	r3, [pc, #36]	; (ab9c <audio_midi_ctrl+0x1d0>)
    ab76:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ab78:	2000      	movs	r0, #0
    ab7a:	e735      	b.n	a9e8 <audio_midi_ctrl+0x1c>
    ab7c:	0000b2e9 	.word	0x0000b2e9
    ab80:	20003b9c 	.word	0x20003b9c
    ab84:	00005819 	.word	0x00005819
    ab88:	0000a939 	.word	0x0000a939
    ab8c:	000059ed 	.word	0x000059ed
    ab90:	0000b323 	.word	0x0000b323
    ab94:	0000a93b 	.word	0x0000a93b
    ab98:	000057ed 	.word	0x000057ed
    ab9c:	20000eb0 	.word	0x20000eb0
    aba0:	00005785 	.word	0x00005785

0000aba4 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    aba4:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    aba6:	4b0a      	ldr	r3, [pc, #40]	; (abd0 <audiodf_midi_init+0x2c>)
    aba8:	4798      	blx	r3
    abaa:	2801      	cmp	r0, #1
    abac:	d80c      	bhi.n	abc8 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    abae:	4809      	ldr	r0, [pc, #36]	; (abd4 <audiodf_midi_init+0x30>)
    abb0:	4b09      	ldr	r3, [pc, #36]	; (abd8 <audiodf_midi_init+0x34>)
    abb2:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    abb4:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    abb6:	3010      	adds	r0, #16
    abb8:	4b08      	ldr	r3, [pc, #32]	; (abdc <audiodf_midi_init+0x38>)
    abba:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    abbc:	4908      	ldr	r1, [pc, #32]	; (abe0 <audiodf_midi_init+0x3c>)
    abbe:	2001      	movs	r0, #1
    abc0:	4b08      	ldr	r3, [pc, #32]	; (abe4 <audiodf_midi_init+0x40>)
    abc2:	4798      	blx	r3
	return ERR_NONE;
    abc4:	2000      	movs	r0, #0
    abc6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    abc8:	f06f 0010 	mvn.w	r0, #16
}
    abcc:	bd08      	pop	{r3, pc}
    abce:	bf00      	nop
    abd0:	0000b2d5 	.word	0x0000b2d5
    abd4:	20000eb0 	.word	0x20000eb0
    abd8:	0000a9cd 	.word	0x0000a9cd
    abdc:	0000b275 	.word	0x0000b275
    abe0:	200003b0 	.word	0x200003b0
    abe4:	0000b1e1 	.word	0x0000b1e1

0000abe8 <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    abe8:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    abea:	4c06      	ldr	r4, [pc, #24]	; (ac04 <audiodf_midi_xfer_packet+0x1c>)
    abec:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    abee:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    abf0:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    abf2:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    abf4:	2300      	movs	r3, #0
    abf6:	2204      	movs	r2, #4
    abf8:	f104 0109 	add.w	r1, r4, #9
    abfc:	79a0      	ldrb	r0, [r4, #6]
    abfe:	4c02      	ldr	r4, [pc, #8]	; (ac08 <audiodf_midi_xfer_packet+0x20>)
    ac00:	47a0      	blx	r4
	
	
}
    ac02:	bd10      	pop	{r4, pc}
    ac04:	20000eb0 	.word	0x20000eb0
    ac08:	0000ada5 	.word	0x0000ada5

0000ac0c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ac0c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ac0e:	4b07      	ldr	r3, [pc, #28]	; (ac2c <usbdc_unconfig+0x20>)
    ac10:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    ac12:	b14c      	cbz	r4, ac28 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ac14:	2600      	movs	r6, #0
    ac16:	2501      	movs	r5, #1
    ac18:	6863      	ldr	r3, [r4, #4]
    ac1a:	4632      	mov	r2, r6
    ac1c:	4629      	mov	r1, r5
    ac1e:	4620      	mov	r0, r4
    ac20:	4798      	blx	r3
		func = func->next;
    ac22:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    ac24:	2c00      	cmp	r4, #0
    ac26:	d1f7      	bne.n	ac18 <usbdc_unconfig+0xc>
    ac28:	bd70      	pop	{r4, r5, r6, pc}
    ac2a:	bf00      	nop
    ac2c:	20000ecc 	.word	0x20000ecc

0000ac30 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    ac30:	b570      	push	{r4, r5, r6, lr}
    ac32:	4606      	mov	r6, r0
    ac34:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ac36:	4b07      	ldr	r3, [pc, #28]	; (ac54 <usbdc_change_notify+0x24>)
    ac38:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    ac3a:	b91c      	cbnz	r4, ac44 <usbdc_change_notify+0x14>
    ac3c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    ac3e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    ac40:	2c00      	cmp	r4, #0
    ac42:	d0fb      	beq.n	ac3c <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    ac44:	6863      	ldr	r3, [r4, #4]
    ac46:	2b00      	cmp	r3, #0
    ac48:	d0f9      	beq.n	ac3e <usbdc_change_notify+0xe>
			cg->cb(change, value);
    ac4a:	4629      	mov	r1, r5
    ac4c:	4630      	mov	r0, r6
    ac4e:	4798      	blx	r3
    ac50:	e7f5      	b.n	ac3e <usbdc_change_notify+0xe>
    ac52:	bf00      	nop
    ac54:	20000ecc 	.word	0x20000ecc

0000ac58 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac5a:	4607      	mov	r7, r0
    ac5c:	460e      	mov	r6, r1
    ac5e:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ac60:	4b0c      	ldr	r3, [pc, #48]	; (ac94 <usbdc_request_handler+0x3c>)
    ac62:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    ac64:	b91c      	cbnz	r4, ac6e <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    ac66:	2000      	movs	r0, #0
    ac68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    ac6a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    ac6c:	b16c      	cbz	r4, ac8a <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    ac6e:	6863      	ldr	r3, [r4, #4]
    ac70:	2b00      	cmp	r3, #0
    ac72:	d0fa      	beq.n	ac6a <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    ac74:	462a      	mov	r2, r5
    ac76:	4631      	mov	r1, r6
    ac78:	4638      	mov	r0, r7
    ac7a:	4798      	blx	r3
			if (0 == rc) {
    ac7c:	b138      	cbz	r0, ac8e <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    ac7e:	f110 0f0a 	cmn.w	r0, #10
    ac82:	d0f2      	beq.n	ac6a <usbdc_request_handler+0x12>
				return -1;
    ac84:	f04f 30ff 	mov.w	r0, #4294967295
}
    ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    ac8a:	2000      	movs	r0, #0
    ac8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    ac8e:	2001      	movs	r0, #1
    ac90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac92:	bf00      	nop
    ac94:	20000ecc 	.word	0x20000ecc

0000ac98 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    ac98:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    ac9a:	4b06      	ldr	r3, [pc, #24]	; (acb4 <usbd_sof_cb+0x1c>)
    ac9c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    ac9e:	b91c      	cbnz	r4, aca8 <usbd_sof_cb+0x10>
    aca0:	bd10      	pop	{r4, pc}
		sof = sof->next;
    aca2:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    aca4:	2c00      	cmp	r4, #0
    aca6:	d0fb      	beq.n	aca0 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    aca8:	6863      	ldr	r3, [r4, #4]
    acaa:	2b00      	cmp	r3, #0
    acac:	d0f9      	beq.n	aca2 <usbd_sof_cb+0xa>
			sof->cb();
    acae:	4798      	blx	r3
    acb0:	e7f7      	b.n	aca2 <usbd_sof_cb+0xa>
    acb2:	bf00      	nop
    acb4:	20000ecc 	.word	0x20000ecc

0000acb8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    acb8:	b510      	push	{r4, lr}
    acba:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    acbc:	b119      	cbz	r1, acc6 <usbdc_cb_ctl_done+0xe>
    acbe:	2901      	cmp	r1, #1
    acc0:	d026      	beq.n	ad10 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    acc2:	2000      	movs	r0, #0
    acc4:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    acc6:	7813      	ldrb	r3, [r2, #0]
    acc8:	2b00      	cmp	r3, #0
    acca:	d1fa      	bne.n	acc2 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    accc:	7853      	ldrb	r3, [r2, #1]
    acce:	2b05      	cmp	r3, #5
    acd0:	d00f      	beq.n	acf2 <usbdc_cb_ctl_done+0x3a>
    acd2:	2b09      	cmp	r3, #9
    acd4:	d1f5      	bne.n	acc2 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    acd6:	8852      	ldrh	r2, [r2, #2]
    acd8:	4b10      	ldr	r3, [pc, #64]	; (ad1c <usbdc_cb_ctl_done+0x64>)
    acda:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    acdc:	8863      	ldrh	r3, [r4, #2]
    acde:	2b00      	cmp	r3, #0
    ace0:	bf14      	ite	ne
    ace2:	2104      	movne	r1, #4
    ace4:	2103      	moveq	r1, #3
    ace6:	4b0d      	ldr	r3, [pc, #52]	; (ad1c <usbdc_cb_ctl_done+0x64>)
    ace8:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    acea:	2001      	movs	r0, #1
    acec:	4b0c      	ldr	r3, [pc, #48]	; (ad20 <usbdc_cb_ctl_done+0x68>)
    acee:	4798      	blx	r3
    acf0:	e7e7      	b.n	acc2 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    acf2:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    acf4:	b2c0      	uxtb	r0, r0
    acf6:	4b0b      	ldr	r3, [pc, #44]	; (ad24 <usbdc_cb_ctl_done+0x6c>)
    acf8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    acfa:	8863      	ldrh	r3, [r4, #2]
    acfc:	2b00      	cmp	r3, #0
    acfe:	bf14      	ite	ne
    ad00:	2103      	movne	r1, #3
    ad02:	2102      	moveq	r1, #2
    ad04:	4b05      	ldr	r3, [pc, #20]	; (ad1c <usbdc_cb_ctl_done+0x64>)
    ad06:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ad08:	2001      	movs	r0, #1
    ad0a:	4b05      	ldr	r3, [pc, #20]	; (ad20 <usbdc_cb_ctl_done+0x68>)
    ad0c:	4798      	blx	r3
    ad0e:	e7d8      	b.n	acc2 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ad10:	2201      	movs	r2, #1
    ad12:	4621      	mov	r1, r4
    ad14:	2000      	movs	r0, #0
    ad16:	4b04      	ldr	r3, [pc, #16]	; (ad28 <usbdc_cb_ctl_done+0x70>)
    ad18:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    ad1a:	e7d2      	b.n	acc2 <usbdc_cb_ctl_done+0xa>
    ad1c:	20000ecc 	.word	0x20000ecc
    ad20:	0000ac31 	.word	0x0000ac31
    ad24:	00005779 	.word	0x00005779
    ad28:	0000ac59 	.word	0x0000ac59

0000ad2c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ad2c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    ad2e:	4b0d      	ldr	r3, [pc, #52]	; (ad64 <usbdc_reset+0x38>)
    ad30:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ad32:	4d0d      	ldr	r5, [pc, #52]	; (ad68 <usbdc_reset+0x3c>)
    ad34:	2602      	movs	r6, #2
    ad36:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    ad38:	2400      	movs	r4, #0
    ad3a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    ad3c:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    ad3e:	4620      	mov	r0, r4
    ad40:	4b0a      	ldr	r3, [pc, #40]	; (ad6c <usbdc_reset+0x40>)
    ad42:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ad44:	7f28      	ldrb	r0, [r5, #28]
    ad46:	4b0a      	ldr	r3, [pc, #40]	; (ad70 <usbdc_reset+0x44>)
    ad48:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ad4a:	4a0a      	ldr	r2, [pc, #40]	; (ad74 <usbdc_reset+0x48>)
    ad4c:	4621      	mov	r1, r4
    ad4e:	4620      	mov	r0, r4
    ad50:	4d09      	ldr	r5, [pc, #36]	; (ad78 <usbdc_reset+0x4c>)
    ad52:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ad54:	4a09      	ldr	r2, [pc, #36]	; (ad7c <usbdc_reset+0x50>)
    ad56:	4631      	mov	r1, r6
    ad58:	4620      	mov	r0, r4
    ad5a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    ad5c:	4620      	mov	r0, r4
    ad5e:	4b08      	ldr	r3, [pc, #32]	; (ad80 <usbdc_reset+0x54>)
    ad60:	4798      	blx	r3
    ad62:	bd70      	pop	{r4, r5, r6, pc}
    ad64:	0000ac0d 	.word	0x0000ac0d
    ad68:	20000ecc 	.word	0x20000ecc
    ad6c:	000057ed 	.word	0x000057ed
    ad70:	000057d9 	.word	0x000057d9
    ad74:	0000adc5 	.word	0x0000adc5
    ad78:	000059ed 	.word	0x000059ed
    ad7c:	0000acb9 	.word	0x0000acb9
    ad80:	00005819 	.word	0x00005819

0000ad84 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    ad84:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    ad86:	b110      	cbz	r0, ad8e <usbd_event_cb+0xa>
    ad88:	2801      	cmp	r0, #1
    ad8a:	d004      	beq.n	ad96 <usbd_event_cb+0x12>
    ad8c:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    ad8e:	2000      	movs	r0, #0
    ad90:	4b02      	ldr	r3, [pc, #8]	; (ad9c <usbd_event_cb+0x18>)
    ad92:	4798      	blx	r3
		break;
    ad94:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    ad96:	4b02      	ldr	r3, [pc, #8]	; (ada0 <usbd_event_cb+0x1c>)
    ad98:	4798      	blx	r3
    ad9a:	bd08      	pop	{r3, pc}
    ad9c:	0000ac31 	.word	0x0000ac31
    ada0:	0000ad2d 	.word	0x0000ad2d

0000ada4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ada4:	b500      	push	{lr}
    ada6:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ada8:	9101      	str	r1, [sp, #4]
    adaa:	9202      	str	r2, [sp, #8]
    adac:	f88d 000c 	strb.w	r0, [sp, #12]
    adb0:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    adb4:	a801      	add	r0, sp, #4
    adb6:	4b02      	ldr	r3, [pc, #8]	; (adc0 <usbdc_xfer+0x1c>)
    adb8:	4798      	blx	r3
}
    adba:	b005      	add	sp, #20
    adbc:	f85d fb04 	ldr.w	pc, [sp], #4
    adc0:	00005865 	.word	0x00005865

0000adc4 <usbdc_cb_ctl_req>:
{
    adc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    adc8:	b083      	sub	sp, #12
    adca:	4605      	mov	r5, r0
    adcc:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    adce:	2200      	movs	r2, #0
    add0:	4b9b      	ldr	r3, [pc, #620]	; (b040 <usbdc_cb_ctl_req+0x27c>)
    add2:	4798      	blx	r3
    add4:	f1b0 3fff 	cmp.w	r0, #4294967295
    add8:	d00b      	beq.n	adf2 <usbdc_cb_ctl_req+0x2e>
    adda:	2801      	cmp	r0, #1
    addc:	f000 81e3 	beq.w	b1a6 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ade0:	7823      	ldrb	r3, [r4, #0]
    ade2:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    ade6:	d008      	beq.n	adfa <usbdc_cb_ctl_req+0x36>
    ade8:	2a80      	cmp	r2, #128	; 0x80
    adea:	f000 80f4 	beq.w	afd6 <usbdc_cb_ctl_req+0x212>
		return false;
    adee:	2000      	movs	r0, #0
    adf0:	e000      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    adf2:	2000      	movs	r0, #0
}
    adf4:	b003      	add	sp, #12
    adf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    adfa:	7862      	ldrb	r2, [r4, #1]
    adfc:	3a01      	subs	r2, #1
    adfe:	2a0a      	cmp	r2, #10
    ae00:	f200 81d3 	bhi.w	b1aa <usbdc_cb_ctl_req+0x3e6>
    ae04:	e8df f012 	tbh	[pc, r2, lsl #1]
    ae08:	01d10060 	.word	0x01d10060
    ae0c:	01d10076 	.word	0x01d10076
    ae10:	01d1000b 	.word	0x01d1000b
    ae14:	01d101d1 	.word	0x01d101d1
    ae18:	01d10015 	.word	0x01d10015
    ae1c:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ae1e:	2301      	movs	r3, #1
    ae20:	2200      	movs	r2, #0
    ae22:	4611      	mov	r1, r2
    ae24:	4628      	mov	r0, r5
    ae26:	4c87      	ldr	r4, [pc, #540]	; (b044 <usbdc_cb_ctl_req+0x280>)
    ae28:	47a0      	blx	r4
    ae2a:	fab0 f080 	clz	r0, r0
    ae2e:	0940      	lsrs	r0, r0, #5
    ae30:	e7e0      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    ae32:	8862      	ldrh	r2, [r4, #2]
    ae34:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    ae36:	b1ca      	cbz	r2, ae6c <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ae38:	4b83      	ldr	r3, [pc, #524]	; (b048 <usbdc_cb_ctl_req+0x284>)
    ae3a:	681b      	ldr	r3, [r3, #0]
    ae3c:	6859      	ldr	r1, [r3, #4]
    ae3e:	6818      	ldr	r0, [r3, #0]
    ae40:	4b82      	ldr	r3, [pc, #520]	; (b04c <usbdc_cb_ctl_req+0x288>)
    ae42:	4798      	blx	r3
	if (NULL == cfg_desc) {
    ae44:	2800      	cmp	r0, #0
    ae46:	f000 81be 	beq.w	b1c6 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    ae4a:	78c2      	ldrb	r2, [r0, #3]
    ae4c:	7881      	ldrb	r1, [r0, #2]
    ae4e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    ae52:	fa10 f181 	uxtah	r1, r0, r1
    ae56:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ae58:	2204      	movs	r2, #4
    ae5a:	4b7d      	ldr	r3, [pc, #500]	; (b050 <usbdc_cb_ctl_req+0x28c>)
    ae5c:	4798      	blx	r3
    ae5e:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    ae60:	b130      	cbz	r0, ae70 <usbdc_cb_ctl_req+0xac>
    ae62:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ae64:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b048 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ae68:	4f79      	ldr	r7, [pc, #484]	; (b050 <usbdc_cb_ctl_req+0x28c>)
    ae6a:	e018      	b.n	ae9e <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    ae6c:	4b79      	ldr	r3, [pc, #484]	; (b054 <usbdc_cb_ctl_req+0x290>)
    ae6e:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ae70:	2301      	movs	r3, #1
    ae72:	2200      	movs	r2, #0
    ae74:	4611      	mov	r1, r2
    ae76:	4628      	mov	r0, r5
    ae78:	4c72      	ldr	r4, [pc, #456]	; (b044 <usbdc_cb_ctl_req+0x280>)
    ae7a:	47a0      	blx	r4
    ae7c:	fab0 f080 	clz	r0, r0
    ae80:	0940      	lsrs	r0, r0, #5
    ae82:	e7b7      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    ae84:	464c      	mov	r4, r9
    ae86:	e000      	b.n	ae8a <usbdc_cb_ctl_req+0xc6>
    ae88:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    ae8a:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    ae8c:	7803      	ldrb	r3, [r0, #0]
    ae8e:	4418      	add	r0, r3
    ae90:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ae92:	2204      	movs	r2, #4
    ae94:	9901      	ldr	r1, [sp, #4]
    ae96:	47b8      	blx	r7
    ae98:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    ae9a:	2800      	cmp	r0, #0
    ae9c:	d0e8      	beq.n	ae70 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ae9e:	f890 9002 	ldrb.w	r9, [r0, #2]
    aea2:	45a1      	cmp	r9, r4
    aea4:	d0f1      	beq.n	ae8a <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    aea6:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    aeaa:	2c00      	cmp	r4, #0
    aeac:	d0ea      	beq.n	ae84 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    aeae:	2600      	movs	r6, #0
    aeb0:	6863      	ldr	r3, [r4, #4]
    aeb2:	466a      	mov	r2, sp
    aeb4:	4631      	mov	r1, r6
    aeb6:	4620      	mov	r0, r4
    aeb8:	4798      	blx	r3
    aeba:	2800      	cmp	r0, #0
    aebc:	d0e4      	beq.n	ae88 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    aebe:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    aec0:	2c00      	cmp	r4, #0
    aec2:	d1f5      	bne.n	aeb0 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    aec4:	464c      	mov	r4, r9
    aec6:	e7e0      	b.n	ae8a <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    aec8:	f003 031f 	and.w	r3, r3, #31
    aecc:	2b02      	cmp	r3, #2
    aece:	f040 816e 	bne.w	b1ae <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    aed2:	88e3      	ldrh	r3, [r4, #6]
    aed4:	b10b      	cbz	r3, aeda <usbdc_cb_ctl_req+0x116>
			return false;
    aed6:	2000      	movs	r0, #0
    aed8:	e78c      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    aeda:	88a0      	ldrh	r0, [r4, #4]
    aedc:	2100      	movs	r1, #0
    aede:	b2c0      	uxtb	r0, r0
    aee0:	4b5d      	ldr	r3, [pc, #372]	; (b058 <usbdc_cb_ctl_req+0x294>)
    aee2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    aee4:	2301      	movs	r3, #1
    aee6:	2200      	movs	r2, #0
    aee8:	4611      	mov	r1, r2
    aeea:	4628      	mov	r0, r5
    aeec:	4c55      	ldr	r4, [pc, #340]	; (b044 <usbdc_cb_ctl_req+0x280>)
    aeee:	47a0      	blx	r4
		return true;
    aef0:	2001      	movs	r0, #1
    aef2:	e77f      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    aef4:	f003 031f 	and.w	r3, r3, #31
    aef8:	2b02      	cmp	r3, #2
    aefa:	f040 815a 	bne.w	b1b2 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    aefe:	88e3      	ldrh	r3, [r4, #6]
    af00:	b10b      	cbz	r3, af06 <usbdc_cb_ctl_req+0x142>
			return false;
    af02:	2000      	movs	r0, #0
    af04:	e776      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    af06:	88a0      	ldrh	r0, [r4, #4]
    af08:	2101      	movs	r1, #1
    af0a:	b2c0      	uxtb	r0, r0
    af0c:	4b52      	ldr	r3, [pc, #328]	; (b058 <usbdc_cb_ctl_req+0x294>)
    af0e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    af10:	2301      	movs	r3, #1
    af12:	2200      	movs	r2, #0
    af14:	4611      	mov	r1, r2
    af16:	4628      	mov	r0, r5
    af18:	4c4a      	ldr	r4, [pc, #296]	; (b044 <usbdc_cb_ctl_req+0x280>)
    af1a:	47a0      	blx	r4
		return true;
    af1c:	2001      	movs	r0, #1
    af1e:	e769      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    af20:	8866      	ldrh	r6, [r4, #2]
    af22:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    af24:	4a48      	ldr	r2, [pc, #288]	; (b048 <usbdc_cb_ctl_req+0x284>)
    af26:	6813      	ldr	r3, [r2, #0]
    af28:	7ed2      	ldrb	r2, [r2, #27]
    af2a:	6859      	ldr	r1, [r3, #4]
    af2c:	6818      	ldr	r0, [r3, #0]
    af2e:	4b47      	ldr	r3, [pc, #284]	; (b04c <usbdc_cb_ctl_req+0x288>)
    af30:	4798      	blx	r3
	if (NULL == ifc) {
    af32:	2800      	cmp	r0, #0
    af34:	d045      	beq.n	afc2 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    af36:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    af38:	78c2      	ldrb	r2, [r0, #3]
    af3a:	7881      	ldrb	r1, [r0, #2]
    af3c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    af40:	fa10 f181 	uxtah	r1, r0, r1
    af44:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    af46:	2204      	movs	r2, #4
    af48:	4b41      	ldr	r3, [pc, #260]	; (b050 <usbdc_cb_ctl_req+0x28c>)
    af4a:	4798      	blx	r3
    af4c:	4603      	mov	r3, r0
    af4e:	2800      	cmp	r0, #0
    af50:	d039      	beq.n	afc6 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    af52:	2704      	movs	r7, #4
    af54:	4d3e      	ldr	r5, [pc, #248]	; (b050 <usbdc_cb_ctl_req+0x28c>)
    af56:	e008      	b.n	af6a <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    af58:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    af5a:	7803      	ldrb	r3, [r0, #0]
    af5c:	4418      	add	r0, r3
    af5e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    af60:	463a      	mov	r2, r7
    af62:	9901      	ldr	r1, [sp, #4]
    af64:	47a8      	blx	r5
		if (NULL == ifc) {
    af66:	4603      	mov	r3, r0
    af68:	b378      	cbz	r0, afca <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    af6a:	789a      	ldrb	r2, [r3, #2]
    af6c:	42a2      	cmp	r2, r4
    af6e:	d1f3      	bne.n	af58 <usbdc_cb_ctl_req+0x194>
    af70:	78da      	ldrb	r2, [r3, #3]
    af72:	42b2      	cmp	r2, r6
    af74:	d1f0      	bne.n	af58 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    af76:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    af78:	4b33      	ldr	r3, [pc, #204]	; (b048 <usbdc_cb_ctl_req+0x284>)
    af7a:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    af7c:	b33d      	cbz	r5, afce <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    af7e:	2701      	movs	r7, #1
    af80:	686b      	ldr	r3, [r5, #4]
    af82:	466a      	mov	r2, sp
    af84:	4639      	mov	r1, r7
    af86:	4628      	mov	r0, r5
    af88:	4798      	blx	r3
    af8a:	b120      	cbz	r0, af96 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    af8c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    af8e:	2d00      	cmp	r5, #0
    af90:	d1f6      	bne.n	af80 <usbdc_cb_ctl_req+0x1bc>
	return false;
    af92:	2000      	movs	r0, #0
    af94:	e72e      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    af96:	686b      	ldr	r3, [r5, #4]
    af98:	466a      	mov	r2, sp
    af9a:	2100      	movs	r1, #0
    af9c:	4628      	mov	r0, r5
    af9e:	4798      	blx	r3
    afa0:	b9b8      	cbnz	r0, afd2 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    afa2:	b136      	cbz	r6, afb2 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    afa4:	4a28      	ldr	r2, [pc, #160]	; (b048 <usbdc_cb_ctl_req+0x284>)
    afa6:	2301      	movs	r3, #1
    afa8:	fa03 f404 	lsl.w	r4, r3, r4
    afac:	7f53      	ldrb	r3, [r2, #29]
    afae:	4323      	orrs	r3, r4
    afb0:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    afb2:	2300      	movs	r3, #0
    afb4:	461a      	mov	r2, r3
    afb6:	4619      	mov	r1, r3
    afb8:	4618      	mov	r0, r3
    afba:	4c22      	ldr	r4, [pc, #136]	; (b044 <usbdc_cb_ctl_req+0x280>)
    afbc:	47a0      	blx	r4
			return true;
    afbe:	2001      	movs	r0, #1
    afc0:	e718      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    afc2:	2000      	movs	r0, #0
    afc4:	e716      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    afc6:	2000      	movs	r0, #0
    afc8:	e714      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
			return false;
    afca:	2000      	movs	r0, #0
    afcc:	e712      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
	return false;
    afce:	2000      	movs	r0, #0
    afd0:	e710      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
			return false;
    afd2:	2000      	movs	r0, #0
    afd4:	e70e      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    afd6:	7862      	ldrb	r2, [r4, #1]
    afd8:	2a0a      	cmp	r2, #10
    afda:	f200 80ec 	bhi.w	b1b6 <usbdc_cb_ctl_req+0x3f2>
    afde:	e8df f012 	tbh	[pc, r2, lsl #1]
    afe2:	008e      	.short	0x008e
    afe4:	00ea00ea 	.word	0x00ea00ea
    afe8:	00ea00ea 	.word	0x00ea00ea
    afec:	000b00ea 	.word	0x000b00ea
    aff0:	008200ea 	.word	0x008200ea
    aff4:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    aff8:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    affa:	0a13      	lsrs	r3, r2, #8
    affc:	2b02      	cmp	r3, #2
    affe:	d02d      	beq.n	b05c <usbdc_cb_ctl_req+0x298>
    b000:	2b03      	cmp	r3, #3
    b002:	d050      	beq.n	b0a6 <usbdc_cb_ctl_req+0x2e2>
    b004:	2b01      	cmp	r3, #1
    b006:	d001      	beq.n	b00c <usbdc_cb_ctl_req+0x248>
	return false;
    b008:	2000      	movs	r0, #0
    b00a:	e6f3      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    b00c:	88e2      	ldrh	r2, [r4, #6]
    b00e:	2a12      	cmp	r2, #18
    b010:	bf28      	it	cs
    b012:	2212      	movcs	r2, #18
    b014:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b016:	4b0c      	ldr	r3, [pc, #48]	; (b048 <usbdc_cb_ctl_req+0x284>)
    b018:	681b      	ldr	r3, [r3, #0]
    b01a:	2201      	movs	r2, #1
    b01c:	6859      	ldr	r1, [r3, #4]
    b01e:	6818      	ldr	r0, [r3, #0]
    b020:	4b0b      	ldr	r3, [pc, #44]	; (b050 <usbdc_cb_ctl_req+0x28c>)
    b022:	4798      	blx	r3
	if (!dev_desc) {
    b024:	4601      	mov	r1, r0
    b026:	2800      	cmp	r0, #0
    b028:	f000 80c7 	beq.w	b1ba <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b02c:	2300      	movs	r3, #0
    b02e:	4622      	mov	r2, r4
    b030:	4628      	mov	r0, r5
    b032:	4c04      	ldr	r4, [pc, #16]	; (b044 <usbdc_cb_ctl_req+0x280>)
    b034:	47a0      	blx	r4
    b036:	fab0 f080 	clz	r0, r0
    b03a:	0940      	lsrs	r0, r0, #5
    b03c:	e6da      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
    b03e:	bf00      	nop
    b040:	0000ac59 	.word	0x0000ac59
    b044:	0000ada5 	.word	0x0000ada5
    b048:	20000ecc 	.word	0x20000ecc
    b04c:	0000b369 	.word	0x0000b369
    b050:	0000b2e9 	.word	0x0000b2e9
    b054:	0000ac0d 	.word	0x0000ac0d
    b058:	00005985 	.word	0x00005985
	uint16_t length   = req->wLength;
    b05c:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b05e:	4b5b      	ldr	r3, [pc, #364]	; (b1cc <usbdc_cb_ctl_req+0x408>)
    b060:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b062:	681b      	ldr	r3, [r3, #0]
    b064:	3201      	adds	r2, #1
    b066:	b2d2      	uxtb	r2, r2
    b068:	6859      	ldr	r1, [r3, #4]
    b06a:	6818      	ldr	r0, [r3, #0]
    b06c:	4b58      	ldr	r3, [pc, #352]	; (b1d0 <usbdc_cb_ctl_req+0x40c>)
    b06e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    b070:	4601      	mov	r1, r0
    b072:	2800      	cmp	r0, #0
    b074:	f000 80a3 	beq.w	b1be <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    b078:	78c3      	ldrb	r3, [r0, #3]
    b07a:	7882      	ldrb	r2, [r0, #2]
    b07c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    b080:	b292      	uxth	r2, r2
	if (length <= total_len) {
    b082:	4294      	cmp	r4, r2
    b084:	d90d      	bls.n	b0a2 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b086:	3e01      	subs	r6, #1
    b088:	4226      	tst	r6, r4
    b08a:	bf0c      	ite	eq
    b08c:	2301      	moveq	r3, #1
    b08e:	2300      	movne	r3, #0
		length = total_len;
    b090:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b092:	4622      	mov	r2, r4
    b094:	4628      	mov	r0, r5
    b096:	4c4f      	ldr	r4, [pc, #316]	; (b1d4 <usbdc_cb_ctl_req+0x410>)
    b098:	47a0      	blx	r4
    b09a:	fab0 f080 	clz	r0, r0
    b09e:	0940      	lsrs	r0, r0, #5
    b0a0:	e6a8      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b0a2:	2300      	movs	r3, #0
    b0a4:	e7f5      	b.n	b092 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    b0a6:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b0a8:	4b48      	ldr	r3, [pc, #288]	; (b1cc <usbdc_cb_ctl_req+0x408>)
    b0aa:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b0ac:	681b      	ldr	r3, [r3, #0]
    b0ae:	b2d2      	uxtb	r2, r2
    b0b0:	6859      	ldr	r1, [r3, #4]
    b0b2:	6818      	ldr	r0, [r3, #0]
    b0b4:	4b48      	ldr	r3, [pc, #288]	; (b1d8 <usbdc_cb_ctl_req+0x414>)
    b0b6:	4798      	blx	r3
	if (NULL == str_desc) {
    b0b8:	4601      	mov	r1, r0
    b0ba:	2800      	cmp	r0, #0
    b0bc:	f000 8081 	beq.w	b1c2 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    b0c0:	7802      	ldrb	r2, [r0, #0]
    b0c2:	4294      	cmp	r4, r2
    b0c4:	d90d      	bls.n	b0e2 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b0c6:	3e01      	subs	r6, #1
    b0c8:	4226      	tst	r6, r4
    b0ca:	bf0c      	ite	eq
    b0cc:	2301      	moveq	r3, #1
    b0ce:	2300      	movne	r3, #0
		length = str_desc[0];
    b0d0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b0d2:	4622      	mov	r2, r4
    b0d4:	4628      	mov	r0, r5
    b0d6:	4c3f      	ldr	r4, [pc, #252]	; (b1d4 <usbdc_cb_ctl_req+0x410>)
    b0d8:	47a0      	blx	r4
    b0da:	fab0 f080 	clz	r0, r0
    b0de:	0940      	lsrs	r0, r0, #5
    b0e0:	e688      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    b0e2:	2300      	movs	r3, #0
    b0e4:	e7f5      	b.n	b0d2 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b0e6:	4939      	ldr	r1, [pc, #228]	; (b1cc <usbdc_cb_ctl_req+0x408>)
    b0e8:	694b      	ldr	r3, [r1, #20]
    b0ea:	7eca      	ldrb	r2, [r1, #27]
    b0ec:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    b0ee:	2300      	movs	r3, #0
    b0f0:	2201      	movs	r2, #1
    b0f2:	6949      	ldr	r1, [r1, #20]
    b0f4:	4628      	mov	r0, r5
    b0f6:	4c37      	ldr	r4, [pc, #220]	; (b1d4 <usbdc_cb_ctl_req+0x410>)
    b0f8:	47a0      	blx	r4
		return true;
    b0fa:	2001      	movs	r0, #1
    b0fc:	e67a      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b0fe:	f003 031f 	and.w	r3, r3, #31
    b102:	2b01      	cmp	r3, #1
    b104:	d903      	bls.n	b10e <usbdc_cb_ctl_req+0x34a>
    b106:	2b02      	cmp	r3, #2
    b108:	d010      	beq.n	b12c <usbdc_cb_ctl_req+0x368>
		return false;
    b10a:	2000      	movs	r0, #0
    b10c:	e672      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		st = 0;
    b10e:	2300      	movs	r3, #0
    b110:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    b112:	492e      	ldr	r1, [pc, #184]	; (b1cc <usbdc_cb_ctl_req+0x408>)
    b114:	694b      	ldr	r3, [r1, #20]
    b116:	f8bd 2000 	ldrh.w	r2, [sp]
    b11a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b11c:	2300      	movs	r3, #0
    b11e:	2202      	movs	r2, #2
    b120:	6949      	ldr	r1, [r1, #20]
    b122:	4628      	mov	r0, r5
    b124:	4c2b      	ldr	r4, [pc, #172]	; (b1d4 <usbdc_cb_ctl_req+0x410>)
    b126:	47a0      	blx	r4
	return true;
    b128:	2001      	movs	r0, #1
    b12a:	e663      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b12c:	88a0      	ldrh	r0, [r4, #4]
    b12e:	2102      	movs	r1, #2
    b130:	b2c0      	uxtb	r0, r0
    b132:	4b2a      	ldr	r3, [pc, #168]	; (b1dc <usbdc_cb_ctl_req+0x418>)
    b134:	4798      	blx	r3
		if (st < 0) {
    b136:	2800      	cmp	r0, #0
    b138:	db03      	blt.n	b142 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    b13a:	f000 0001 	and.w	r0, r0, #1
    b13e:	9000      	str	r0, [sp, #0]
    b140:	e7e7      	b.n	b112 <usbdc_cb_ctl_req+0x34e>
			return false;
    b142:	2000      	movs	r0, #0
    b144:	e656      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b146:	4b21      	ldr	r3, [pc, #132]	; (b1cc <usbdc_cb_ctl_req+0x408>)
    b148:	7f5b      	ldrb	r3, [r3, #29]
    b14a:	88a2      	ldrh	r2, [r4, #4]
    b14c:	4113      	asrs	r3, r2
    b14e:	f013 0f01 	tst.w	r3, #1
    b152:	d012      	beq.n	b17a <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b154:	4b1d      	ldr	r3, [pc, #116]	; (b1cc <usbdc_cb_ctl_req+0x408>)
    b156:	691d      	ldr	r5, [r3, #16]
	return false;
    b158:	2000      	movs	r0, #0
	while (NULL != func) {
    b15a:	2d00      	cmp	r5, #0
    b15c:	f43f ae4a 	beq.w	adf4 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b160:	2602      	movs	r6, #2
    b162:	686b      	ldr	r3, [r5, #4]
    b164:	4622      	mov	r2, r4
    b166:	4631      	mov	r1, r6
    b168:	4628      	mov	r0, r5
    b16a:	4798      	blx	r3
    b16c:	2800      	cmp	r0, #0
    b16e:	da0f      	bge.n	b190 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    b170:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    b172:	2d00      	cmp	r5, #0
    b174:	d1f5      	bne.n	b162 <usbdc_cb_ctl_req+0x39e>
	return false;
    b176:	2000      	movs	r0, #0
    b178:	e63c      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    b17a:	4914      	ldr	r1, [pc, #80]	; (b1cc <usbdc_cb_ctl_req+0x408>)
    b17c:	694b      	ldr	r3, [r1, #20]
    b17e:	2000      	movs	r0, #0
    b180:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b182:	4603      	mov	r3, r0
    b184:	2201      	movs	r2, #1
    b186:	6949      	ldr	r1, [r1, #20]
    b188:	4c12      	ldr	r4, [pc, #72]	; (b1d4 <usbdc_cb_ctl_req+0x410>)
    b18a:	47a0      	blx	r4
		return true;
    b18c:	2001      	movs	r0, #1
    b18e:	e631      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b190:	490e      	ldr	r1, [pc, #56]	; (b1cc <usbdc_cb_ctl_req+0x408>)
    b192:	694b      	ldr	r3, [r1, #20]
    b194:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b196:	2300      	movs	r3, #0
    b198:	2201      	movs	r2, #1
    b19a:	6949      	ldr	r1, [r1, #20]
    b19c:	4618      	mov	r0, r3
    b19e:	4c0d      	ldr	r4, [pc, #52]	; (b1d4 <usbdc_cb_ctl_req+0x410>)
    b1a0:	47a0      	blx	r4
			return true;
    b1a2:	2001      	movs	r0, #1
    b1a4:	e626      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return true;
    b1a6:	2001      	movs	r0, #1
    b1a8:	e624      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    b1aa:	2000      	movs	r0, #0
    b1ac:	e622      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    b1ae:	2000      	movs	r0, #0
    b1b0:	e620      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    b1b2:	2000      	movs	r0, #0
    b1b4:	e61e      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    b1b6:	2000      	movs	r0, #0
    b1b8:	e61c      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    b1ba:	2000      	movs	r0, #0
    b1bc:	e61a      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    b1be:	2000      	movs	r0, #0
    b1c0:	e618      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
		return false;
    b1c2:	2000      	movs	r0, #0
    b1c4:	e616      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
			return false;
    b1c6:	2000      	movs	r0, #0
    b1c8:	e614      	b.n	adf4 <usbdc_cb_ctl_req+0x30>
    b1ca:	bf00      	nop
    b1cc:	20000ecc 	.word	0x20000ecc
    b1d0:	0000b369 	.word	0x0000b369
    b1d4:	0000ada5 	.word	0x0000ada5
    b1d8:	0000b3d1 	.word	0x0000b3d1
    b1dc:	00005985 	.word	0x00005985

0000b1e0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    b1e0:	b508      	push	{r3, lr}
	switch (type) {
    b1e2:	2801      	cmp	r0, #1
    b1e4:	d007      	beq.n	b1f6 <usbdc_register_handler+0x16>
    b1e6:	b110      	cbz	r0, b1ee <usbdc_register_handler+0xe>
    b1e8:	2802      	cmp	r0, #2
    b1ea:	d008      	beq.n	b1fe <usbdc_register_handler+0x1e>
    b1ec:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    b1ee:	4806      	ldr	r0, [pc, #24]	; (b208 <usbdc_register_handler+0x28>)
    b1f0:	4b06      	ldr	r3, [pc, #24]	; (b20c <usbdc_register_handler+0x2c>)
    b1f2:	4798      	blx	r3
		break;
    b1f4:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    b1f6:	4806      	ldr	r0, [pc, #24]	; (b210 <usbdc_register_handler+0x30>)
    b1f8:	4b04      	ldr	r3, [pc, #16]	; (b20c <usbdc_register_handler+0x2c>)
    b1fa:	4798      	blx	r3
		break;
    b1fc:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    b1fe:	4805      	ldr	r0, [pc, #20]	; (b214 <usbdc_register_handler+0x34>)
    b200:	4b02      	ldr	r3, [pc, #8]	; (b20c <usbdc_register_handler+0x2c>)
    b202:	4798      	blx	r3
    b204:	bd08      	pop	{r3, pc}
    b206:	bf00      	nop
    b208:	20000ed0 	.word	0x20000ed0
    b20c:	00005a95 	.word	0x00005a95
    b210:	20000ed4 	.word	0x20000ed4
    b214:	20000ed8 	.word	0x20000ed8

0000b218 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    b218:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    b21a:	4605      	mov	r5, r0
    b21c:	f240 3255 	movw	r2, #853	; 0x355
    b220:	490c      	ldr	r1, [pc, #48]	; (b254 <usbdc_init+0x3c>)
    b222:	3000      	adds	r0, #0
    b224:	bf18      	it	ne
    b226:	2001      	movne	r0, #1
    b228:	4b0b      	ldr	r3, [pc, #44]	; (b258 <usbdc_init+0x40>)
    b22a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    b22c:	4b0b      	ldr	r3, [pc, #44]	; (b25c <usbdc_init+0x44>)
    b22e:	4798      	blx	r3
	if (rc < 0) {
    b230:	2800      	cmp	r0, #0
    b232:	db0e      	blt.n	b252 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    b234:	4c0a      	ldr	r4, [pc, #40]	; (b260 <usbdc_init+0x48>)
    b236:	2220      	movs	r2, #32
    b238:	2100      	movs	r1, #0
    b23a:	4620      	mov	r0, r4
    b23c:	4b09      	ldr	r3, [pc, #36]	; (b264 <usbdc_init+0x4c>)
    b23e:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    b240:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    b242:	4909      	ldr	r1, [pc, #36]	; (b268 <usbdc_init+0x50>)
    b244:	2000      	movs	r0, #0
    b246:	4c09      	ldr	r4, [pc, #36]	; (b26c <usbdc_init+0x54>)
    b248:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    b24a:	4909      	ldr	r1, [pc, #36]	; (b270 <usbdc_init+0x58>)
    b24c:	2001      	movs	r0, #1
    b24e:	47a0      	blx	r4

	return 0;
    b250:	2000      	movs	r0, #0
}
    b252:	bd38      	pop	{r3, r4, r5, pc}
    b254:	0000dd3c 	.word	0x0000dd3c
    b258:	00005a39 	.word	0x00005a39
    b25c:	000056e1 	.word	0x000056e1
    b260:	20000ecc 	.word	0x20000ecc
    b264:	0000bdb7 	.word	0x0000bdb7
    b268:	0000ac99 	.word	0x0000ac99
    b26c:	00005749 	.word	0x00005749
    b270:	0000ad85 	.word	0x0000ad85

0000b274 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    b274:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    b276:	4601      	mov	r1, r0
    b278:	4801      	ldr	r0, [pc, #4]	; (b280 <usbdc_register_function+0xc>)
    b27a:	4b02      	ldr	r3, [pc, #8]	; (b284 <usbdc_register_function+0x10>)
    b27c:	4798      	blx	r3
    b27e:	bd08      	pop	{r3, pc}
    b280:	20000edc 	.word	0x20000edc
    b284:	00005a95 	.word	0x00005a95

0000b288 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    b288:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    b28a:	4b0a      	ldr	r3, [pc, #40]	; (b2b4 <usbdc_start+0x2c>)
    b28c:	7e9b      	ldrb	r3, [r3, #26]
    b28e:	b95b      	cbnz	r3, b2a8 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    b290:	b168      	cbz	r0, b2ae <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    b292:	4b08      	ldr	r3, [pc, #32]	; (b2b4 <usbdc_start+0x2c>)
    b294:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    b296:	6802      	ldr	r2, [r0, #0]
    b298:	79d2      	ldrb	r2, [r2, #7]
    b29a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    b29c:	2201      	movs	r2, #1
    b29e:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    b2a0:	4b05      	ldr	r3, [pc, #20]	; (b2b8 <usbdc_start+0x30>)
    b2a2:	4798      	blx	r3
	return ERR_NONE;
    b2a4:	2000      	movs	r0, #0
    b2a6:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    b2a8:	f06f 0003 	mvn.w	r0, #3
    b2ac:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    b2ae:	f06f 0008 	mvn.w	r0, #8
}
    b2b2:	bd08      	pop	{r3, pc}
    b2b4:	20000ecc 	.word	0x20000ecc
    b2b8:	00005755 	.word	0x00005755

0000b2bc <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    b2bc:	b508      	push	{r3, lr}
	usb_d_attach();
    b2be:	4b01      	ldr	r3, [pc, #4]	; (b2c4 <usbdc_attach+0x8>)
    b2c0:	4798      	blx	r3
    b2c2:	bd08      	pop	{r3, pc}
    b2c4:	00005761 	.word	0x00005761

0000b2c8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    b2c8:	4b01      	ldr	r3, [pc, #4]	; (b2d0 <usbdc_get_ctrl_buffer+0x8>)
    b2ca:	6958      	ldr	r0, [r3, #20]
    b2cc:	4770      	bx	lr
    b2ce:	bf00      	nop
    b2d0:	20000ecc 	.word	0x20000ecc

0000b2d4 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    b2d4:	4b03      	ldr	r3, [pc, #12]	; (b2e4 <usbdc_get_state+0x10>)
    b2d6:	7e98      	ldrb	r0, [r3, #26]
    b2d8:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    b2dc:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    b2de:	bf18      	it	ne
    b2e0:	2010      	movne	r0, #16
    b2e2:	4770      	bx	lr
    b2e4:	20000ecc 	.word	0x20000ecc

0000b2e8 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b2e8:	4288      	cmp	r0, r1
    b2ea:	d214      	bcs.n	b316 <usb_find_desc+0x2e>
	return desc[0];
    b2ec:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b2ee:	2b01      	cmp	r3, #1
    b2f0:	d913      	bls.n	b31a <usb_find_desc+0x32>
{
    b2f2:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    b2f4:	7844      	ldrb	r4, [r0, #1]
    b2f6:	4294      	cmp	r4, r2
    b2f8:	d00a      	beq.n	b310 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    b2fa:	4418      	add	r0, r3
	while (desc < eof) {
    b2fc:	4281      	cmp	r1, r0
    b2fe:	d906      	bls.n	b30e <usb_find_desc+0x26>
	return desc[0];
    b300:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b302:	2b01      	cmp	r3, #1
    b304:	d90b      	bls.n	b31e <usb_find_desc+0x36>
	return desc[1];
    b306:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    b308:	4294      	cmp	r4, r2
    b30a:	d1f6      	bne.n	b2fa <usb_find_desc+0x12>
    b30c:	e000      	b.n	b310 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b30e:	2000      	movs	r0, #0
}
    b310:	f85d 4b04 	ldr.w	r4, [sp], #4
    b314:	4770      	bx	lr
	return NULL;
    b316:	2000      	movs	r0, #0
    b318:	4770      	bx	lr
		_desc_len_check();
    b31a:	2000      	movs	r0, #0
    b31c:	4770      	bx	lr
    b31e:	2000      	movs	r0, #0
    b320:	e7f6      	b.n	b310 <usb_find_desc+0x28>

0000b322 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b322:	4288      	cmp	r0, r1
    b324:	d216      	bcs.n	b354 <usb_find_ep_desc+0x32>
	return desc[0];
    b326:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b328:	2b01      	cmp	r3, #1
    b32a:	d915      	bls.n	b358 <usb_find_ep_desc+0x36>
	return desc[1];
    b32c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b32e:	2a04      	cmp	r2, #4
    b330:	d014      	beq.n	b35c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b332:	2a05      	cmp	r2, #5
    b334:	d00b      	beq.n	b34e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    b336:	4418      	add	r0, r3
	while (desc < eof) {
    b338:	4281      	cmp	r1, r0
    b33a:	d909      	bls.n	b350 <usb_find_ep_desc+0x2e>
	return desc[0];
    b33c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b33e:	2b01      	cmp	r3, #1
    b340:	d90e      	bls.n	b360 <usb_find_ep_desc+0x3e>
	return desc[1];
    b342:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b344:	2a04      	cmp	r2, #4
    b346:	d00d      	beq.n	b364 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b348:	2a05      	cmp	r2, #5
    b34a:	d1f4      	bne.n	b336 <usb_find_ep_desc+0x14>
    b34c:	e00b      	b.n	b366 <usb_find_ep_desc+0x44>
    b34e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b350:	2000      	movs	r0, #0
    b352:	4770      	bx	lr
    b354:	2000      	movs	r0, #0
    b356:	4770      	bx	lr
		_desc_len_check();
    b358:	2000      	movs	r0, #0
    b35a:	4770      	bx	lr
	return NULL;
    b35c:	2000      	movs	r0, #0
    b35e:	4770      	bx	lr
		_desc_len_check();
    b360:	2000      	movs	r0, #0
    b362:	4770      	bx	lr
	return NULL;
    b364:	2000      	movs	r0, #0
}
    b366:	4770      	bx	lr

0000b368 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b368:	b538      	push	{r3, r4, r5, lr}
    b36a:	460c      	mov	r4, r1
    b36c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b36e:	2202      	movs	r2, #2
    b370:	4b16      	ldr	r3, [pc, #88]	; (b3cc <usb_find_cfg_desc+0x64>)
    b372:	4798      	blx	r3
	if (!desc) {
    b374:	4603      	mov	r3, r0
    b376:	b1e8      	cbz	r0, b3b4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    b378:	4284      	cmp	r4, r0
    b37a:	d91d      	bls.n	b3b8 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    b37c:	7802      	ldrb	r2, [r0, #0]
    b37e:	2a01      	cmp	r2, #1
    b380:	d91c      	bls.n	b3bc <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    b382:	7842      	ldrb	r2, [r0, #1]
    b384:	2a02      	cmp	r2, #2
    b386:	d11b      	bne.n	b3c0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    b388:	7942      	ldrb	r2, [r0, #5]
    b38a:	42aa      	cmp	r2, r5
    b38c:	d012      	beq.n	b3b4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    b38e:	78d9      	ldrb	r1, [r3, #3]
    b390:	789a      	ldrb	r2, [r3, #2]
    b392:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b396:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    b39a:	429c      	cmp	r4, r3
    b39c:	d909      	bls.n	b3b2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    b39e:	781a      	ldrb	r2, [r3, #0]
    b3a0:	2a01      	cmp	r2, #1
    b3a2:	d90f      	bls.n	b3c4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    b3a4:	785a      	ldrb	r2, [r3, #1]
    b3a6:	2a02      	cmp	r2, #2
    b3a8:	d10e      	bne.n	b3c8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    b3aa:	795a      	ldrb	r2, [r3, #5]
    b3ac:	42aa      	cmp	r2, r5
    b3ae:	d1ee      	bne.n	b38e <usb_find_cfg_desc+0x26>
    b3b0:	e000      	b.n	b3b4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    b3b2:	2300      	movs	r3, #0
}
    b3b4:	4618      	mov	r0, r3
    b3b6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    b3b8:	2300      	movs	r3, #0
    b3ba:	e7fb      	b.n	b3b4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    b3bc:	2300      	movs	r3, #0
    b3be:	e7f9      	b.n	b3b4 <usb_find_cfg_desc+0x4c>
	return NULL;
    b3c0:	2300      	movs	r3, #0
    b3c2:	e7f7      	b.n	b3b4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    b3c4:	2300      	movs	r3, #0
    b3c6:	e7f5      	b.n	b3b4 <usb_find_cfg_desc+0x4c>
	return NULL;
    b3c8:	2300      	movs	r3, #0
    b3ca:	e7f3      	b.n	b3b4 <usb_find_cfg_desc+0x4c>
    b3cc:	0000b2e9 	.word	0x0000b2e9

0000b3d0 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    b3d0:	4288      	cmp	r0, r1
    b3d2:	d217      	bcs.n	b404 <usb_find_str_desc+0x34>
{
    b3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3d8:	460d      	mov	r5, r1
    b3da:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    b3dc:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b3de:	f04f 0803 	mov.w	r8, #3
    b3e2:	4f0c      	ldr	r7, [pc, #48]	; (b414 <usb_find_str_desc+0x44>)
    b3e4:	4642      	mov	r2, r8
    b3e6:	4629      	mov	r1, r5
    b3e8:	47b8      	blx	r7
		if (desc) {
    b3ea:	4603      	mov	r3, r0
    b3ec:	b170      	cbz	r0, b40c <usb_find_str_desc+0x3c>
	return desc[0];
    b3ee:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    b3f0:	2801      	cmp	r0, #1
    b3f2:	d90a      	bls.n	b40a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    b3f4:	42a6      	cmp	r6, r4
    b3f6:	d009      	beq.n	b40c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    b3f8:	4418      	add	r0, r3
    b3fa:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    b3fc:	4285      	cmp	r5, r0
    b3fe:	d8f1      	bhi.n	b3e4 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    b400:	2300      	movs	r3, #0
    b402:	e003      	b.n	b40c <usb_find_str_desc+0x3c>
    b404:	2300      	movs	r3, #0
}
    b406:	4618      	mov	r0, r3
    b408:	4770      	bx	lr
			_desc_len_check();
    b40a:	2300      	movs	r3, #0
}
    b40c:	4618      	mov	r0, r3
    b40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b412:	bf00      	nop
    b414:	0000b2e9 	.word	0x0000b2e9

0000b418 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    b418:	4b3a      	ldr	r3, [pc, #232]	; (b504 <hiddf_demo_sof_event+0xec>)
    b41a:	791b      	ldrb	r3, [r3, #4]
    b41c:	2b0a      	cmp	r3, #10
    b41e:	d803      	bhi.n	b428 <hiddf_demo_sof_event+0x10>
    b420:	3301      	adds	r3, #1
    b422:	4a38      	ldr	r2, [pc, #224]	; (b504 <hiddf_demo_sof_event+0xec>)
    b424:	7113      	strb	r3, [r2, #4]
    b426:	4770      	bx	lr
{
    b428:	b570      	push	{r4, r5, r6, lr}
    b42a:	b084      	sub	sp, #16
		interval = 0;
    b42c:	4b35      	ldr	r3, [pc, #212]	; (b504 <hiddf_demo_sof_event+0xec>)
    b42e:	2200      	movs	r2, #0
    b430:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    b432:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    b434:	a801      	add	r0, sp, #4
    b436:	4b34      	ldr	r3, [pc, #208]	; (b508 <hiddf_demo_sof_event+0xf0>)
    b438:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b43a:	096b      	lsrs	r3, r5, #5
    b43c:	4933      	ldr	r1, [pc, #204]	; (b50c <hiddf_demo_sof_event+0xf4>)
    b43e:	01db      	lsls	r3, r3, #7
    b440:	18ca      	adds	r2, r1, r3
    b442:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b444:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b446:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b448:	405c      	eors	r4, r3
    b44a:	400c      	ands	r4, r1
    b44c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b44e:	a801      	add	r0, sp, #4
    b450:	4b2f      	ldr	r3, [pc, #188]	; (b510 <hiddf_demo_sof_event+0xf8>)
    b452:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    b454:	f005 051f 	and.w	r5, r5, #31
    b458:	2301      	movs	r3, #1
    b45a:	fa03 f505 	lsl.w	r5, r3, r5
    b45e:	4225      	tst	r5, r4
    b460:	d040      	beq.n	b4e4 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    b462:	4b28      	ldr	r3, [pc, #160]	; (b504 <hiddf_demo_sof_event+0xec>)
    b464:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    b466:	a802      	add	r0, sp, #8
    b468:	4b27      	ldr	r3, [pc, #156]	; (b508 <hiddf_demo_sof_event+0xf0>)
    b46a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b46c:	096b      	lsrs	r3, r5, #5
    b46e:	4927      	ldr	r1, [pc, #156]	; (b50c <hiddf_demo_sof_event+0xf4>)
    b470:	01db      	lsls	r3, r3, #7
    b472:	18ca      	adds	r2, r1, r3
    b474:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b476:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b478:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b47a:	405c      	eors	r4, r3
    b47c:	400c      	ands	r4, r1
    b47e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b480:	a802      	add	r0, sp, #8
    b482:	4b23      	ldr	r3, [pc, #140]	; (b510 <hiddf_demo_sof_event+0xf8>)
    b484:	4798      	blx	r3
    b486:	f005 051f 	and.w	r5, r5, #31
    b48a:	2301      	movs	r3, #1
    b48c:	fa03 f505 	lsl.w	r5, r3, r5
    b490:	4225      	tst	r5, r4
    b492:	d02d      	beq.n	b4f0 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    b494:	4d1b      	ldr	r5, [pc, #108]	; (b504 <hiddf_demo_sof_event+0xec>)
    b496:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    b498:	a803      	add	r0, sp, #12
    b49a:	4b1b      	ldr	r3, [pc, #108]	; (b508 <hiddf_demo_sof_event+0xf0>)
    b49c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b49e:	0973      	lsrs	r3, r6, #5
    b4a0:	491a      	ldr	r1, [pc, #104]	; (b50c <hiddf_demo_sof_event+0xf4>)
    b4a2:	01db      	lsls	r3, r3, #7
    b4a4:	18ca      	adds	r2, r1, r3
    b4a6:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b4a8:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b4aa:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b4ac:	405c      	eors	r4, r3
    b4ae:	400c      	ands	r4, r1
    b4b0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b4b2:	a803      	add	r0, sp, #12
    b4b4:	4b16      	ldr	r3, [pc, #88]	; (b510 <hiddf_demo_sof_event+0xf8>)
    b4b6:	4798      	blx	r3
    b4b8:	f006 061f 	and.w	r6, r6, #31
    b4bc:	2301      	movs	r3, #1
    b4be:	40b3      	lsls	r3, r6
    b4c0:	401c      	ands	r4, r3
    b4c2:	bf0c      	ite	eq
    b4c4:	2301      	moveq	r3, #1
    b4c6:	2300      	movne	r3, #0
    b4c8:	7d2a      	ldrb	r2, [r5, #20]
    b4ca:	429a      	cmp	r2, r3
    b4cc:	d008      	beq.n	b4e0 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    b4ce:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    b4d0:	b19c      	cbz	r4, b4fa <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    b4d2:	2200      	movs	r2, #0
    b4d4:	4b0f      	ldr	r3, [pc, #60]	; (b514 <hiddf_demo_sof_event+0xfc>)
    b4d6:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    b4d8:	2101      	movs	r1, #1
    b4da:	480e      	ldr	r0, [pc, #56]	; (b514 <hiddf_demo_sof_event+0xfc>)
    b4dc:	4b0e      	ldr	r3, [pc, #56]	; (b518 <hiddf_demo_sof_event+0x100>)
    b4de:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    b4e0:	b004      	add	sp, #16
    b4e2:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    b4e4:	4619      	mov	r1, r3
    b4e6:	f06f 0004 	mvn.w	r0, #4
    b4ea:	4b0c      	ldr	r3, [pc, #48]	; (b51c <hiddf_demo_sof_event+0x104>)
    b4ec:	4798      	blx	r3
    b4ee:	e7b8      	b.n	b462 <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    b4f0:	4619      	mov	r1, r3
    b4f2:	2005      	movs	r0, #5
    b4f4:	4b09      	ldr	r3, [pc, #36]	; (b51c <hiddf_demo_sof_event+0x104>)
    b4f6:	4798      	blx	r3
    b4f8:	e7cc      	b.n	b494 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    b4fa:	2201      	movs	r2, #1
    b4fc:	4b05      	ldr	r3, [pc, #20]	; (b514 <hiddf_demo_sof_event+0xfc>)
    b4fe:	709a      	strb	r2, [r3, #2]
    b500:	e7ea      	b.n	b4d8 <hiddf_demo_sof_event+0xc0>
    b502:	bf00      	nop
    b504:	20000eec 	.word	0x20000eec
    b508:	000046a1 	.word	0x000046a1
    b50c:	41008000 	.word	0x41008000
    b510:	000046af 	.word	0x000046af
    b514:	200003b8 	.word	0x200003b8
    b518:	0000a665 	.word	0x0000a665
    b51c:	0000a8f9 	.word	0x0000a8f9

0000b520 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    b520:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b522:	4805      	ldr	r0, [pc, #20]	; (b538 <composite_device_init+0x18>)
    b524:	4b05      	ldr	r3, [pc, #20]	; (b53c <composite_device_init+0x1c>)
    b526:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    b528:	4b05      	ldr	r3, [pc, #20]	; (b540 <composite_device_init+0x20>)
    b52a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    b52c:	4b05      	ldr	r3, [pc, #20]	; (b544 <composite_device_init+0x24>)
    b52e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    b530:	4b05      	ldr	r3, [pc, #20]	; (b548 <composite_device_init+0x28>)
    b532:	4798      	blx	r3
    b534:	bd08      	pop	{r3, pc}
    b536:	bf00      	nop
    b538:	20000f04 	.word	0x20000f04
    b53c:	0000b219 	.word	0x0000b219
    b540:	0000a3e1 	.word	0x0000a3e1
    b544:	0000a8b5 	.word	0x0000a8b5
    b548:	0000a621 	.word	0x0000a621

0000b54c <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    b54c:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    b54e:	4803      	ldr	r0, [pc, #12]	; (b55c <composite_device_start+0x10>)
    b550:	4b03      	ldr	r3, [pc, #12]	; (b560 <composite_device_start+0x14>)
    b552:	4798      	blx	r3
	usbdc_attach();
    b554:	4b03      	ldr	r3, [pc, #12]	; (b564 <composite_device_start+0x18>)
    b556:	4798      	blx	r3
    b558:	bd08      	pop	{r3, pc}
    b55a:	bf00      	nop
    b55c:	200003c4 	.word	0x200003c4
    b560:	0000b289 	.word	0x0000b289
    b564:	0000b2bd 	.word	0x0000b2bd

0000b568 <usb_init>:
		}
	}
}

void usb_init(void)
{
    b568:	b508      	push	{r3, lr}

	composite_device_init();
    b56a:	4b01      	ldr	r3, [pc, #4]	; (b570 <usb_init+0x8>)
    b56c:	4798      	blx	r3
    b56e:	bd08      	pop	{r3, pc}
    b570:	0000b521 	.word	0x0000b521

0000b574 <__aeabi_drsub>:
    b574:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b578:	e002      	b.n	b580 <__adddf3>
    b57a:	bf00      	nop

0000b57c <__aeabi_dsub>:
    b57c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b580 <__adddf3>:
    b580:	b530      	push	{r4, r5, lr}
    b582:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b586:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b58a:	ea94 0f05 	teq	r4, r5
    b58e:	bf08      	it	eq
    b590:	ea90 0f02 	teqeq	r0, r2
    b594:	bf1f      	itttt	ne
    b596:	ea54 0c00 	orrsne.w	ip, r4, r0
    b59a:	ea55 0c02 	orrsne.w	ip, r5, r2
    b59e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b5a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b5a6:	f000 80e2 	beq.w	b76e <__adddf3+0x1ee>
    b5aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b5ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b5b2:	bfb8      	it	lt
    b5b4:	426d      	neglt	r5, r5
    b5b6:	dd0c      	ble.n	b5d2 <__adddf3+0x52>
    b5b8:	442c      	add	r4, r5
    b5ba:	ea80 0202 	eor.w	r2, r0, r2
    b5be:	ea81 0303 	eor.w	r3, r1, r3
    b5c2:	ea82 0000 	eor.w	r0, r2, r0
    b5c6:	ea83 0101 	eor.w	r1, r3, r1
    b5ca:	ea80 0202 	eor.w	r2, r0, r2
    b5ce:	ea81 0303 	eor.w	r3, r1, r3
    b5d2:	2d36      	cmp	r5, #54	; 0x36
    b5d4:	bf88      	it	hi
    b5d6:	bd30      	pophi	{r4, r5, pc}
    b5d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b5dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b5e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b5e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b5e8:	d002      	beq.n	b5f0 <__adddf3+0x70>
    b5ea:	4240      	negs	r0, r0
    b5ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b5f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b5f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b5f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b5fc:	d002      	beq.n	b604 <__adddf3+0x84>
    b5fe:	4252      	negs	r2, r2
    b600:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b604:	ea94 0f05 	teq	r4, r5
    b608:	f000 80a7 	beq.w	b75a <__adddf3+0x1da>
    b60c:	f1a4 0401 	sub.w	r4, r4, #1
    b610:	f1d5 0e20 	rsbs	lr, r5, #32
    b614:	db0d      	blt.n	b632 <__adddf3+0xb2>
    b616:	fa02 fc0e 	lsl.w	ip, r2, lr
    b61a:	fa22 f205 	lsr.w	r2, r2, r5
    b61e:	1880      	adds	r0, r0, r2
    b620:	f141 0100 	adc.w	r1, r1, #0
    b624:	fa03 f20e 	lsl.w	r2, r3, lr
    b628:	1880      	adds	r0, r0, r2
    b62a:	fa43 f305 	asr.w	r3, r3, r5
    b62e:	4159      	adcs	r1, r3
    b630:	e00e      	b.n	b650 <__adddf3+0xd0>
    b632:	f1a5 0520 	sub.w	r5, r5, #32
    b636:	f10e 0e20 	add.w	lr, lr, #32
    b63a:	2a01      	cmp	r2, #1
    b63c:	fa03 fc0e 	lsl.w	ip, r3, lr
    b640:	bf28      	it	cs
    b642:	f04c 0c02 	orrcs.w	ip, ip, #2
    b646:	fa43 f305 	asr.w	r3, r3, r5
    b64a:	18c0      	adds	r0, r0, r3
    b64c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b654:	d507      	bpl.n	b666 <__adddf3+0xe6>
    b656:	f04f 0e00 	mov.w	lr, #0
    b65a:	f1dc 0c00 	rsbs	ip, ip, #0
    b65e:	eb7e 0000 	sbcs.w	r0, lr, r0
    b662:	eb6e 0101 	sbc.w	r1, lr, r1
    b666:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b66a:	d31b      	bcc.n	b6a4 <__adddf3+0x124>
    b66c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b670:	d30c      	bcc.n	b68c <__adddf3+0x10c>
    b672:	0849      	lsrs	r1, r1, #1
    b674:	ea5f 0030 	movs.w	r0, r0, rrx
    b678:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b67c:	f104 0401 	add.w	r4, r4, #1
    b680:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b684:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b688:	f080 809a 	bcs.w	b7c0 <__adddf3+0x240>
    b68c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b690:	bf08      	it	eq
    b692:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b696:	f150 0000 	adcs.w	r0, r0, #0
    b69a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b69e:	ea41 0105 	orr.w	r1, r1, r5
    b6a2:	bd30      	pop	{r4, r5, pc}
    b6a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b6a8:	4140      	adcs	r0, r0
    b6aa:	eb41 0101 	adc.w	r1, r1, r1
    b6ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b6b2:	f1a4 0401 	sub.w	r4, r4, #1
    b6b6:	d1e9      	bne.n	b68c <__adddf3+0x10c>
    b6b8:	f091 0f00 	teq	r1, #0
    b6bc:	bf04      	itt	eq
    b6be:	4601      	moveq	r1, r0
    b6c0:	2000      	moveq	r0, #0
    b6c2:	fab1 f381 	clz	r3, r1
    b6c6:	bf08      	it	eq
    b6c8:	3320      	addeq	r3, #32
    b6ca:	f1a3 030b 	sub.w	r3, r3, #11
    b6ce:	f1b3 0220 	subs.w	r2, r3, #32
    b6d2:	da0c      	bge.n	b6ee <__adddf3+0x16e>
    b6d4:	320c      	adds	r2, #12
    b6d6:	dd08      	ble.n	b6ea <__adddf3+0x16a>
    b6d8:	f102 0c14 	add.w	ip, r2, #20
    b6dc:	f1c2 020c 	rsb	r2, r2, #12
    b6e0:	fa01 f00c 	lsl.w	r0, r1, ip
    b6e4:	fa21 f102 	lsr.w	r1, r1, r2
    b6e8:	e00c      	b.n	b704 <__adddf3+0x184>
    b6ea:	f102 0214 	add.w	r2, r2, #20
    b6ee:	bfd8      	it	le
    b6f0:	f1c2 0c20 	rsble	ip, r2, #32
    b6f4:	fa01 f102 	lsl.w	r1, r1, r2
    b6f8:	fa20 fc0c 	lsr.w	ip, r0, ip
    b6fc:	bfdc      	itt	le
    b6fe:	ea41 010c 	orrle.w	r1, r1, ip
    b702:	4090      	lslle	r0, r2
    b704:	1ae4      	subs	r4, r4, r3
    b706:	bfa2      	ittt	ge
    b708:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b70c:	4329      	orrge	r1, r5
    b70e:	bd30      	popge	{r4, r5, pc}
    b710:	ea6f 0404 	mvn.w	r4, r4
    b714:	3c1f      	subs	r4, #31
    b716:	da1c      	bge.n	b752 <__adddf3+0x1d2>
    b718:	340c      	adds	r4, #12
    b71a:	dc0e      	bgt.n	b73a <__adddf3+0x1ba>
    b71c:	f104 0414 	add.w	r4, r4, #20
    b720:	f1c4 0220 	rsb	r2, r4, #32
    b724:	fa20 f004 	lsr.w	r0, r0, r4
    b728:	fa01 f302 	lsl.w	r3, r1, r2
    b72c:	ea40 0003 	orr.w	r0, r0, r3
    b730:	fa21 f304 	lsr.w	r3, r1, r4
    b734:	ea45 0103 	orr.w	r1, r5, r3
    b738:	bd30      	pop	{r4, r5, pc}
    b73a:	f1c4 040c 	rsb	r4, r4, #12
    b73e:	f1c4 0220 	rsb	r2, r4, #32
    b742:	fa20 f002 	lsr.w	r0, r0, r2
    b746:	fa01 f304 	lsl.w	r3, r1, r4
    b74a:	ea40 0003 	orr.w	r0, r0, r3
    b74e:	4629      	mov	r1, r5
    b750:	bd30      	pop	{r4, r5, pc}
    b752:	fa21 f004 	lsr.w	r0, r1, r4
    b756:	4629      	mov	r1, r5
    b758:	bd30      	pop	{r4, r5, pc}
    b75a:	f094 0f00 	teq	r4, #0
    b75e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b762:	bf06      	itte	eq
    b764:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b768:	3401      	addeq	r4, #1
    b76a:	3d01      	subne	r5, #1
    b76c:	e74e      	b.n	b60c <__adddf3+0x8c>
    b76e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b772:	bf18      	it	ne
    b774:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b778:	d029      	beq.n	b7ce <__adddf3+0x24e>
    b77a:	ea94 0f05 	teq	r4, r5
    b77e:	bf08      	it	eq
    b780:	ea90 0f02 	teqeq	r0, r2
    b784:	d005      	beq.n	b792 <__adddf3+0x212>
    b786:	ea54 0c00 	orrs.w	ip, r4, r0
    b78a:	bf04      	itt	eq
    b78c:	4619      	moveq	r1, r3
    b78e:	4610      	moveq	r0, r2
    b790:	bd30      	pop	{r4, r5, pc}
    b792:	ea91 0f03 	teq	r1, r3
    b796:	bf1e      	ittt	ne
    b798:	2100      	movne	r1, #0
    b79a:	2000      	movne	r0, #0
    b79c:	bd30      	popne	{r4, r5, pc}
    b79e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b7a2:	d105      	bne.n	b7b0 <__adddf3+0x230>
    b7a4:	0040      	lsls	r0, r0, #1
    b7a6:	4149      	adcs	r1, r1
    b7a8:	bf28      	it	cs
    b7aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b7ae:	bd30      	pop	{r4, r5, pc}
    b7b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b7b4:	bf3c      	itt	cc
    b7b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b7ba:	bd30      	popcc	{r4, r5, pc}
    b7bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b7c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b7c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b7c8:	f04f 0000 	mov.w	r0, #0
    b7cc:	bd30      	pop	{r4, r5, pc}
    b7ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b7d2:	bf1a      	itte	ne
    b7d4:	4619      	movne	r1, r3
    b7d6:	4610      	movne	r0, r2
    b7d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b7dc:	bf1c      	itt	ne
    b7de:	460b      	movne	r3, r1
    b7e0:	4602      	movne	r2, r0
    b7e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b7e6:	bf06      	itte	eq
    b7e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b7ec:	ea91 0f03 	teqeq	r1, r3
    b7f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b7f4:	bd30      	pop	{r4, r5, pc}
    b7f6:	bf00      	nop

0000b7f8 <__aeabi_ui2d>:
    b7f8:	f090 0f00 	teq	r0, #0
    b7fc:	bf04      	itt	eq
    b7fe:	2100      	moveq	r1, #0
    b800:	4770      	bxeq	lr
    b802:	b530      	push	{r4, r5, lr}
    b804:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b808:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b80c:	f04f 0500 	mov.w	r5, #0
    b810:	f04f 0100 	mov.w	r1, #0
    b814:	e750      	b.n	b6b8 <__adddf3+0x138>
    b816:	bf00      	nop

0000b818 <__aeabi_i2d>:
    b818:	f090 0f00 	teq	r0, #0
    b81c:	bf04      	itt	eq
    b81e:	2100      	moveq	r1, #0
    b820:	4770      	bxeq	lr
    b822:	b530      	push	{r4, r5, lr}
    b824:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b828:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b82c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b830:	bf48      	it	mi
    b832:	4240      	negmi	r0, r0
    b834:	f04f 0100 	mov.w	r1, #0
    b838:	e73e      	b.n	b6b8 <__adddf3+0x138>
    b83a:	bf00      	nop

0000b83c <__aeabi_f2d>:
    b83c:	0042      	lsls	r2, r0, #1
    b83e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b842:	ea4f 0131 	mov.w	r1, r1, rrx
    b846:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b84a:	bf1f      	itttt	ne
    b84c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b850:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b854:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b858:	4770      	bxne	lr
    b85a:	f092 0f00 	teq	r2, #0
    b85e:	bf14      	ite	ne
    b860:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b864:	4770      	bxeq	lr
    b866:	b530      	push	{r4, r5, lr}
    b868:	f44f 7460 	mov.w	r4, #896	; 0x380
    b86c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b870:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b874:	e720      	b.n	b6b8 <__adddf3+0x138>
    b876:	bf00      	nop

0000b878 <__aeabi_ul2d>:
    b878:	ea50 0201 	orrs.w	r2, r0, r1
    b87c:	bf08      	it	eq
    b87e:	4770      	bxeq	lr
    b880:	b530      	push	{r4, r5, lr}
    b882:	f04f 0500 	mov.w	r5, #0
    b886:	e00a      	b.n	b89e <__aeabi_l2d+0x16>

0000b888 <__aeabi_l2d>:
    b888:	ea50 0201 	orrs.w	r2, r0, r1
    b88c:	bf08      	it	eq
    b88e:	4770      	bxeq	lr
    b890:	b530      	push	{r4, r5, lr}
    b892:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b896:	d502      	bpl.n	b89e <__aeabi_l2d+0x16>
    b898:	4240      	negs	r0, r0
    b89a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b89e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b8a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b8a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b8aa:	f43f aedc 	beq.w	b666 <__adddf3+0xe6>
    b8ae:	f04f 0203 	mov.w	r2, #3
    b8b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b8b6:	bf18      	it	ne
    b8b8:	3203      	addne	r2, #3
    b8ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b8be:	bf18      	it	ne
    b8c0:	3203      	addne	r2, #3
    b8c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b8c6:	f1c2 0320 	rsb	r3, r2, #32
    b8ca:	fa00 fc03 	lsl.w	ip, r0, r3
    b8ce:	fa20 f002 	lsr.w	r0, r0, r2
    b8d2:	fa01 fe03 	lsl.w	lr, r1, r3
    b8d6:	ea40 000e 	orr.w	r0, r0, lr
    b8da:	fa21 f102 	lsr.w	r1, r1, r2
    b8de:	4414      	add	r4, r2
    b8e0:	e6c1      	b.n	b666 <__adddf3+0xe6>
    b8e2:	bf00      	nop

0000b8e4 <__aeabi_dmul>:
    b8e4:	b570      	push	{r4, r5, r6, lr}
    b8e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b8ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b8ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b8f2:	bf1d      	ittte	ne
    b8f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b8f8:	ea94 0f0c 	teqne	r4, ip
    b8fc:	ea95 0f0c 	teqne	r5, ip
    b900:	f000 f8de 	bleq	bac0 <__aeabi_dmul+0x1dc>
    b904:	442c      	add	r4, r5
    b906:	ea81 0603 	eor.w	r6, r1, r3
    b90a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b90e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b912:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b916:	bf18      	it	ne
    b918:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b91c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b924:	d038      	beq.n	b998 <__aeabi_dmul+0xb4>
    b926:	fba0 ce02 	umull	ip, lr, r0, r2
    b92a:	f04f 0500 	mov.w	r5, #0
    b92e:	fbe1 e502 	umlal	lr, r5, r1, r2
    b932:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b936:	fbe0 e503 	umlal	lr, r5, r0, r3
    b93a:	f04f 0600 	mov.w	r6, #0
    b93e:	fbe1 5603 	umlal	r5, r6, r1, r3
    b942:	f09c 0f00 	teq	ip, #0
    b946:	bf18      	it	ne
    b948:	f04e 0e01 	orrne.w	lr, lr, #1
    b94c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b950:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b954:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b958:	d204      	bcs.n	b964 <__aeabi_dmul+0x80>
    b95a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b95e:	416d      	adcs	r5, r5
    b960:	eb46 0606 	adc.w	r6, r6, r6
    b964:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b968:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b96c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b970:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b974:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b978:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b97c:	bf88      	it	hi
    b97e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b982:	d81e      	bhi.n	b9c2 <__aeabi_dmul+0xde>
    b984:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b988:	bf08      	it	eq
    b98a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b98e:	f150 0000 	adcs.w	r0, r0, #0
    b992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b996:	bd70      	pop	{r4, r5, r6, pc}
    b998:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b99c:	ea46 0101 	orr.w	r1, r6, r1
    b9a0:	ea40 0002 	orr.w	r0, r0, r2
    b9a4:	ea81 0103 	eor.w	r1, r1, r3
    b9a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b9ac:	bfc2      	ittt	gt
    b9ae:	ebd4 050c 	rsbsgt	r5, r4, ip
    b9b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b9b6:	bd70      	popgt	{r4, r5, r6, pc}
    b9b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b9bc:	f04f 0e00 	mov.w	lr, #0
    b9c0:	3c01      	subs	r4, #1
    b9c2:	f300 80ab 	bgt.w	bb1c <__aeabi_dmul+0x238>
    b9c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b9ca:	bfde      	ittt	le
    b9cc:	2000      	movle	r0, #0
    b9ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b9d2:	bd70      	pople	{r4, r5, r6, pc}
    b9d4:	f1c4 0400 	rsb	r4, r4, #0
    b9d8:	3c20      	subs	r4, #32
    b9da:	da35      	bge.n	ba48 <__aeabi_dmul+0x164>
    b9dc:	340c      	adds	r4, #12
    b9de:	dc1b      	bgt.n	ba18 <__aeabi_dmul+0x134>
    b9e0:	f104 0414 	add.w	r4, r4, #20
    b9e4:	f1c4 0520 	rsb	r5, r4, #32
    b9e8:	fa00 f305 	lsl.w	r3, r0, r5
    b9ec:	fa20 f004 	lsr.w	r0, r0, r4
    b9f0:	fa01 f205 	lsl.w	r2, r1, r5
    b9f4:	ea40 0002 	orr.w	r0, r0, r2
    b9f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b9fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ba00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ba04:	fa21 f604 	lsr.w	r6, r1, r4
    ba08:	eb42 0106 	adc.w	r1, r2, r6
    ba0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ba10:	bf08      	it	eq
    ba12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ba16:	bd70      	pop	{r4, r5, r6, pc}
    ba18:	f1c4 040c 	rsb	r4, r4, #12
    ba1c:	f1c4 0520 	rsb	r5, r4, #32
    ba20:	fa00 f304 	lsl.w	r3, r0, r4
    ba24:	fa20 f005 	lsr.w	r0, r0, r5
    ba28:	fa01 f204 	lsl.w	r2, r1, r4
    ba2c:	ea40 0002 	orr.w	r0, r0, r2
    ba30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ba34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ba38:	f141 0100 	adc.w	r1, r1, #0
    ba3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ba40:	bf08      	it	eq
    ba42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ba46:	bd70      	pop	{r4, r5, r6, pc}
    ba48:	f1c4 0520 	rsb	r5, r4, #32
    ba4c:	fa00 f205 	lsl.w	r2, r0, r5
    ba50:	ea4e 0e02 	orr.w	lr, lr, r2
    ba54:	fa20 f304 	lsr.w	r3, r0, r4
    ba58:	fa01 f205 	lsl.w	r2, r1, r5
    ba5c:	ea43 0302 	orr.w	r3, r3, r2
    ba60:	fa21 f004 	lsr.w	r0, r1, r4
    ba64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ba68:	fa21 f204 	lsr.w	r2, r1, r4
    ba6c:	ea20 0002 	bic.w	r0, r0, r2
    ba70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    ba74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ba78:	bf08      	it	eq
    ba7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ba7e:	bd70      	pop	{r4, r5, r6, pc}
    ba80:	f094 0f00 	teq	r4, #0
    ba84:	d10f      	bne.n	baa6 <__aeabi_dmul+0x1c2>
    ba86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    ba8a:	0040      	lsls	r0, r0, #1
    ba8c:	eb41 0101 	adc.w	r1, r1, r1
    ba90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ba94:	bf08      	it	eq
    ba96:	3c01      	subeq	r4, #1
    ba98:	d0f7      	beq.n	ba8a <__aeabi_dmul+0x1a6>
    ba9a:	ea41 0106 	orr.w	r1, r1, r6
    ba9e:	f095 0f00 	teq	r5, #0
    baa2:	bf18      	it	ne
    baa4:	4770      	bxne	lr
    baa6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    baaa:	0052      	lsls	r2, r2, #1
    baac:	eb43 0303 	adc.w	r3, r3, r3
    bab0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    bab4:	bf08      	it	eq
    bab6:	3d01      	subeq	r5, #1
    bab8:	d0f7      	beq.n	baaa <__aeabi_dmul+0x1c6>
    baba:	ea43 0306 	orr.w	r3, r3, r6
    babe:	4770      	bx	lr
    bac0:	ea94 0f0c 	teq	r4, ip
    bac4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    bac8:	bf18      	it	ne
    baca:	ea95 0f0c 	teqne	r5, ip
    bace:	d00c      	beq.n	baea <__aeabi_dmul+0x206>
    bad0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bad4:	bf18      	it	ne
    bad6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bada:	d1d1      	bne.n	ba80 <__aeabi_dmul+0x19c>
    badc:	ea81 0103 	eor.w	r1, r1, r3
    bae0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bae4:	f04f 0000 	mov.w	r0, #0
    bae8:	bd70      	pop	{r4, r5, r6, pc}
    baea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    baee:	bf06      	itte	eq
    baf0:	4610      	moveq	r0, r2
    baf2:	4619      	moveq	r1, r3
    baf4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    baf8:	d019      	beq.n	bb2e <__aeabi_dmul+0x24a>
    bafa:	ea94 0f0c 	teq	r4, ip
    bafe:	d102      	bne.n	bb06 <__aeabi_dmul+0x222>
    bb00:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    bb04:	d113      	bne.n	bb2e <__aeabi_dmul+0x24a>
    bb06:	ea95 0f0c 	teq	r5, ip
    bb0a:	d105      	bne.n	bb18 <__aeabi_dmul+0x234>
    bb0c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    bb10:	bf1c      	itt	ne
    bb12:	4610      	movne	r0, r2
    bb14:	4619      	movne	r1, r3
    bb16:	d10a      	bne.n	bb2e <__aeabi_dmul+0x24a>
    bb18:	ea81 0103 	eor.w	r1, r1, r3
    bb1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bb20:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    bb24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bb28:	f04f 0000 	mov.w	r0, #0
    bb2c:	bd70      	pop	{r4, r5, r6, pc}
    bb2e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    bb32:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    bb36:	bd70      	pop	{r4, r5, r6, pc}

0000bb38 <__aeabi_ddiv>:
    bb38:	b570      	push	{r4, r5, r6, lr}
    bb3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    bb3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    bb42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    bb46:	bf1d      	ittte	ne
    bb48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bb4c:	ea94 0f0c 	teqne	r4, ip
    bb50:	ea95 0f0c 	teqne	r5, ip
    bb54:	f000 f8a7 	bleq	bca6 <__aeabi_ddiv+0x16e>
    bb58:	eba4 0405 	sub.w	r4, r4, r5
    bb5c:	ea81 0e03 	eor.w	lr, r1, r3
    bb60:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    bb64:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bb68:	f000 8088 	beq.w	bc7c <__aeabi_ddiv+0x144>
    bb6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bb70:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    bb74:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    bb78:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    bb7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    bb80:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    bb84:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    bb88:	ea4f 2600 	mov.w	r6, r0, lsl #8
    bb8c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    bb90:	429d      	cmp	r5, r3
    bb92:	bf08      	it	eq
    bb94:	4296      	cmpeq	r6, r2
    bb96:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    bb9a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    bb9e:	d202      	bcs.n	bba6 <__aeabi_ddiv+0x6e>
    bba0:	085b      	lsrs	r3, r3, #1
    bba2:	ea4f 0232 	mov.w	r2, r2, rrx
    bba6:	1ab6      	subs	r6, r6, r2
    bba8:	eb65 0503 	sbc.w	r5, r5, r3
    bbac:	085b      	lsrs	r3, r3, #1
    bbae:	ea4f 0232 	mov.w	r2, r2, rrx
    bbb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    bbb6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    bbba:	ebb6 0e02 	subs.w	lr, r6, r2
    bbbe:	eb75 0e03 	sbcs.w	lr, r5, r3
    bbc2:	bf22      	ittt	cs
    bbc4:	1ab6      	subcs	r6, r6, r2
    bbc6:	4675      	movcs	r5, lr
    bbc8:	ea40 000c 	orrcs.w	r0, r0, ip
    bbcc:	085b      	lsrs	r3, r3, #1
    bbce:	ea4f 0232 	mov.w	r2, r2, rrx
    bbd2:	ebb6 0e02 	subs.w	lr, r6, r2
    bbd6:	eb75 0e03 	sbcs.w	lr, r5, r3
    bbda:	bf22      	ittt	cs
    bbdc:	1ab6      	subcs	r6, r6, r2
    bbde:	4675      	movcs	r5, lr
    bbe0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    bbe4:	085b      	lsrs	r3, r3, #1
    bbe6:	ea4f 0232 	mov.w	r2, r2, rrx
    bbea:	ebb6 0e02 	subs.w	lr, r6, r2
    bbee:	eb75 0e03 	sbcs.w	lr, r5, r3
    bbf2:	bf22      	ittt	cs
    bbf4:	1ab6      	subcs	r6, r6, r2
    bbf6:	4675      	movcs	r5, lr
    bbf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    bbfc:	085b      	lsrs	r3, r3, #1
    bbfe:	ea4f 0232 	mov.w	r2, r2, rrx
    bc02:	ebb6 0e02 	subs.w	lr, r6, r2
    bc06:	eb75 0e03 	sbcs.w	lr, r5, r3
    bc0a:	bf22      	ittt	cs
    bc0c:	1ab6      	subcs	r6, r6, r2
    bc0e:	4675      	movcs	r5, lr
    bc10:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    bc14:	ea55 0e06 	orrs.w	lr, r5, r6
    bc18:	d018      	beq.n	bc4c <__aeabi_ddiv+0x114>
    bc1a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    bc1e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    bc22:	ea4f 1606 	mov.w	r6, r6, lsl #4
    bc26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    bc2a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    bc2e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    bc32:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    bc36:	d1c0      	bne.n	bbba <__aeabi_ddiv+0x82>
    bc38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bc3c:	d10b      	bne.n	bc56 <__aeabi_ddiv+0x11e>
    bc3e:	ea41 0100 	orr.w	r1, r1, r0
    bc42:	f04f 0000 	mov.w	r0, #0
    bc46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    bc4a:	e7b6      	b.n	bbba <__aeabi_ddiv+0x82>
    bc4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bc50:	bf04      	itt	eq
    bc52:	4301      	orreq	r1, r0
    bc54:	2000      	moveq	r0, #0
    bc56:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    bc5a:	bf88      	it	hi
    bc5c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    bc60:	f63f aeaf 	bhi.w	b9c2 <__aeabi_dmul+0xde>
    bc64:	ebb5 0c03 	subs.w	ip, r5, r3
    bc68:	bf04      	itt	eq
    bc6a:	ebb6 0c02 	subseq.w	ip, r6, r2
    bc6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bc72:	f150 0000 	adcs.w	r0, r0, #0
    bc76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bc7a:	bd70      	pop	{r4, r5, r6, pc}
    bc7c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    bc80:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    bc84:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    bc88:	bfc2      	ittt	gt
    bc8a:	ebd4 050c 	rsbsgt	r5, r4, ip
    bc8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    bc92:	bd70      	popgt	{r4, r5, r6, pc}
    bc94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bc98:	f04f 0e00 	mov.w	lr, #0
    bc9c:	3c01      	subs	r4, #1
    bc9e:	e690      	b.n	b9c2 <__aeabi_dmul+0xde>
    bca0:	ea45 0e06 	orr.w	lr, r5, r6
    bca4:	e68d      	b.n	b9c2 <__aeabi_dmul+0xde>
    bca6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    bcaa:	ea94 0f0c 	teq	r4, ip
    bcae:	bf08      	it	eq
    bcb0:	ea95 0f0c 	teqeq	r5, ip
    bcb4:	f43f af3b 	beq.w	bb2e <__aeabi_dmul+0x24a>
    bcb8:	ea94 0f0c 	teq	r4, ip
    bcbc:	d10a      	bne.n	bcd4 <__aeabi_ddiv+0x19c>
    bcbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bcc2:	f47f af34 	bne.w	bb2e <__aeabi_dmul+0x24a>
    bcc6:	ea95 0f0c 	teq	r5, ip
    bcca:	f47f af25 	bne.w	bb18 <__aeabi_dmul+0x234>
    bcce:	4610      	mov	r0, r2
    bcd0:	4619      	mov	r1, r3
    bcd2:	e72c      	b.n	bb2e <__aeabi_dmul+0x24a>
    bcd4:	ea95 0f0c 	teq	r5, ip
    bcd8:	d106      	bne.n	bce8 <__aeabi_ddiv+0x1b0>
    bcda:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    bcde:	f43f aefd 	beq.w	badc <__aeabi_dmul+0x1f8>
    bce2:	4610      	mov	r0, r2
    bce4:	4619      	mov	r1, r3
    bce6:	e722      	b.n	bb2e <__aeabi_dmul+0x24a>
    bce8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bcec:	bf18      	it	ne
    bcee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bcf2:	f47f aec5 	bne.w	ba80 <__aeabi_dmul+0x19c>
    bcf6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    bcfa:	f47f af0d 	bne.w	bb18 <__aeabi_dmul+0x234>
    bcfe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    bd02:	f47f aeeb 	bne.w	badc <__aeabi_dmul+0x1f8>
    bd06:	e712      	b.n	bb2e <__aeabi_dmul+0x24a>

0000bd08 <__aeabi_d2uiz>:
    bd08:	004a      	lsls	r2, r1, #1
    bd0a:	d211      	bcs.n	bd30 <__aeabi_d2uiz+0x28>
    bd0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    bd10:	d211      	bcs.n	bd36 <__aeabi_d2uiz+0x2e>
    bd12:	d50d      	bpl.n	bd30 <__aeabi_d2uiz+0x28>
    bd14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    bd18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    bd1c:	d40e      	bmi.n	bd3c <__aeabi_d2uiz+0x34>
    bd1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    bd22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bd26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    bd2a:	fa23 f002 	lsr.w	r0, r3, r2
    bd2e:	4770      	bx	lr
    bd30:	f04f 0000 	mov.w	r0, #0
    bd34:	4770      	bx	lr
    bd36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    bd3a:	d102      	bne.n	bd42 <__aeabi_d2uiz+0x3a>
    bd3c:	f04f 30ff 	mov.w	r0, #4294967295
    bd40:	4770      	bx	lr
    bd42:	f04f 0000 	mov.w	r0, #0
    bd46:	4770      	bx	lr

0000bd48 <__libc_init_array>:
    bd48:	b570      	push	{r4, r5, r6, lr}
    bd4a:	4e0d      	ldr	r6, [pc, #52]	; (bd80 <__libc_init_array+0x38>)
    bd4c:	4c0d      	ldr	r4, [pc, #52]	; (bd84 <__libc_init_array+0x3c>)
    bd4e:	1ba4      	subs	r4, r4, r6
    bd50:	10a4      	asrs	r4, r4, #2
    bd52:	2500      	movs	r5, #0
    bd54:	42a5      	cmp	r5, r4
    bd56:	d109      	bne.n	bd6c <__libc_init_array+0x24>
    bd58:	4e0b      	ldr	r6, [pc, #44]	; (bd88 <__libc_init_array+0x40>)
    bd5a:	4c0c      	ldr	r4, [pc, #48]	; (bd8c <__libc_init_array+0x44>)
    bd5c:	f002 f846 	bl	ddec <_init>
    bd60:	1ba4      	subs	r4, r4, r6
    bd62:	10a4      	asrs	r4, r4, #2
    bd64:	2500      	movs	r5, #0
    bd66:	42a5      	cmp	r5, r4
    bd68:	d105      	bne.n	bd76 <__libc_init_array+0x2e>
    bd6a:	bd70      	pop	{r4, r5, r6, pc}
    bd6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    bd70:	4798      	blx	r3
    bd72:	3501      	adds	r5, #1
    bd74:	e7ee      	b.n	bd54 <__libc_init_array+0xc>
    bd76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    bd7a:	4798      	blx	r3
    bd7c:	3501      	adds	r5, #1
    bd7e:	e7f2      	b.n	bd66 <__libc_init_array+0x1e>
    bd80:	0000ddf8 	.word	0x0000ddf8
    bd84:	0000ddf8 	.word	0x0000ddf8
    bd88:	0000ddf8 	.word	0x0000ddf8
    bd8c:	0000ddfc 	.word	0x0000ddfc

0000bd90 <malloc>:
    bd90:	4b02      	ldr	r3, [pc, #8]	; (bd9c <malloc+0xc>)
    bd92:	4601      	mov	r1, r0
    bd94:	6818      	ldr	r0, [r3, #0]
    bd96:	f000 b865 	b.w	be64 <_malloc_r>
    bd9a:	bf00      	nop
    bd9c:	20000558 	.word	0x20000558

0000bda0 <memcpy>:
    bda0:	b510      	push	{r4, lr}
    bda2:	1e43      	subs	r3, r0, #1
    bda4:	440a      	add	r2, r1
    bda6:	4291      	cmp	r1, r2
    bda8:	d100      	bne.n	bdac <memcpy+0xc>
    bdaa:	bd10      	pop	{r4, pc}
    bdac:	f811 4b01 	ldrb.w	r4, [r1], #1
    bdb0:	f803 4f01 	strb.w	r4, [r3, #1]!
    bdb4:	e7f7      	b.n	bda6 <memcpy+0x6>

0000bdb6 <memset>:
    bdb6:	4402      	add	r2, r0
    bdb8:	4603      	mov	r3, r0
    bdba:	4293      	cmp	r3, r2
    bdbc:	d100      	bne.n	bdc0 <memset+0xa>
    bdbe:	4770      	bx	lr
    bdc0:	f803 1b01 	strb.w	r1, [r3], #1
    bdc4:	e7f9      	b.n	bdba <memset+0x4>
	...

0000bdc8 <_free_r>:
    bdc8:	b538      	push	{r3, r4, r5, lr}
    bdca:	4605      	mov	r5, r0
    bdcc:	2900      	cmp	r1, #0
    bdce:	d045      	beq.n	be5c <_free_r+0x94>
    bdd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bdd4:	1f0c      	subs	r4, r1, #4
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	bfb8      	it	lt
    bdda:	18e4      	addlt	r4, r4, r3
    bddc:	f000 fcae 	bl	c73c <__malloc_lock>
    bde0:	4a1f      	ldr	r2, [pc, #124]	; (be60 <_free_r+0x98>)
    bde2:	6813      	ldr	r3, [r2, #0]
    bde4:	4610      	mov	r0, r2
    bde6:	b933      	cbnz	r3, bdf6 <_free_r+0x2e>
    bde8:	6063      	str	r3, [r4, #4]
    bdea:	6014      	str	r4, [r2, #0]
    bdec:	4628      	mov	r0, r5
    bdee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bdf2:	f000 bca4 	b.w	c73e <__malloc_unlock>
    bdf6:	42a3      	cmp	r3, r4
    bdf8:	d90c      	bls.n	be14 <_free_r+0x4c>
    bdfa:	6821      	ldr	r1, [r4, #0]
    bdfc:	1862      	adds	r2, r4, r1
    bdfe:	4293      	cmp	r3, r2
    be00:	bf04      	itt	eq
    be02:	681a      	ldreq	r2, [r3, #0]
    be04:	685b      	ldreq	r3, [r3, #4]
    be06:	6063      	str	r3, [r4, #4]
    be08:	bf04      	itt	eq
    be0a:	1852      	addeq	r2, r2, r1
    be0c:	6022      	streq	r2, [r4, #0]
    be0e:	6004      	str	r4, [r0, #0]
    be10:	e7ec      	b.n	bdec <_free_r+0x24>
    be12:	4613      	mov	r3, r2
    be14:	685a      	ldr	r2, [r3, #4]
    be16:	b10a      	cbz	r2, be1c <_free_r+0x54>
    be18:	42a2      	cmp	r2, r4
    be1a:	d9fa      	bls.n	be12 <_free_r+0x4a>
    be1c:	6819      	ldr	r1, [r3, #0]
    be1e:	1858      	adds	r0, r3, r1
    be20:	42a0      	cmp	r0, r4
    be22:	d10b      	bne.n	be3c <_free_r+0x74>
    be24:	6820      	ldr	r0, [r4, #0]
    be26:	4401      	add	r1, r0
    be28:	1858      	adds	r0, r3, r1
    be2a:	4282      	cmp	r2, r0
    be2c:	6019      	str	r1, [r3, #0]
    be2e:	d1dd      	bne.n	bdec <_free_r+0x24>
    be30:	6810      	ldr	r0, [r2, #0]
    be32:	6852      	ldr	r2, [r2, #4]
    be34:	605a      	str	r2, [r3, #4]
    be36:	4401      	add	r1, r0
    be38:	6019      	str	r1, [r3, #0]
    be3a:	e7d7      	b.n	bdec <_free_r+0x24>
    be3c:	d902      	bls.n	be44 <_free_r+0x7c>
    be3e:	230c      	movs	r3, #12
    be40:	602b      	str	r3, [r5, #0]
    be42:	e7d3      	b.n	bdec <_free_r+0x24>
    be44:	6820      	ldr	r0, [r4, #0]
    be46:	1821      	adds	r1, r4, r0
    be48:	428a      	cmp	r2, r1
    be4a:	bf04      	itt	eq
    be4c:	6811      	ldreq	r1, [r2, #0]
    be4e:	6852      	ldreq	r2, [r2, #4]
    be50:	6062      	str	r2, [r4, #4]
    be52:	bf04      	itt	eq
    be54:	1809      	addeq	r1, r1, r0
    be56:	6021      	streq	r1, [r4, #0]
    be58:	605c      	str	r4, [r3, #4]
    be5a:	e7c7      	b.n	bdec <_free_r+0x24>
    be5c:	bd38      	pop	{r3, r4, r5, pc}
    be5e:	bf00      	nop
    be60:	20000f44 	.word	0x20000f44

0000be64 <_malloc_r>:
    be64:	b570      	push	{r4, r5, r6, lr}
    be66:	1ccd      	adds	r5, r1, #3
    be68:	f025 0503 	bic.w	r5, r5, #3
    be6c:	3508      	adds	r5, #8
    be6e:	2d0c      	cmp	r5, #12
    be70:	bf38      	it	cc
    be72:	250c      	movcc	r5, #12
    be74:	2d00      	cmp	r5, #0
    be76:	4606      	mov	r6, r0
    be78:	db01      	blt.n	be7e <_malloc_r+0x1a>
    be7a:	42a9      	cmp	r1, r5
    be7c:	d903      	bls.n	be86 <_malloc_r+0x22>
    be7e:	230c      	movs	r3, #12
    be80:	6033      	str	r3, [r6, #0]
    be82:	2000      	movs	r0, #0
    be84:	bd70      	pop	{r4, r5, r6, pc}
    be86:	f000 fc59 	bl	c73c <__malloc_lock>
    be8a:	4a23      	ldr	r2, [pc, #140]	; (bf18 <_malloc_r+0xb4>)
    be8c:	6814      	ldr	r4, [r2, #0]
    be8e:	4621      	mov	r1, r4
    be90:	b991      	cbnz	r1, beb8 <_malloc_r+0x54>
    be92:	4c22      	ldr	r4, [pc, #136]	; (bf1c <_malloc_r+0xb8>)
    be94:	6823      	ldr	r3, [r4, #0]
    be96:	b91b      	cbnz	r3, bea0 <_malloc_r+0x3c>
    be98:	4630      	mov	r0, r6
    be9a:	f000 f8bd 	bl	c018 <_sbrk_r>
    be9e:	6020      	str	r0, [r4, #0]
    bea0:	4629      	mov	r1, r5
    bea2:	4630      	mov	r0, r6
    bea4:	f000 f8b8 	bl	c018 <_sbrk_r>
    bea8:	1c43      	adds	r3, r0, #1
    beaa:	d126      	bne.n	befa <_malloc_r+0x96>
    beac:	230c      	movs	r3, #12
    beae:	6033      	str	r3, [r6, #0]
    beb0:	4630      	mov	r0, r6
    beb2:	f000 fc44 	bl	c73e <__malloc_unlock>
    beb6:	e7e4      	b.n	be82 <_malloc_r+0x1e>
    beb8:	680b      	ldr	r3, [r1, #0]
    beba:	1b5b      	subs	r3, r3, r5
    bebc:	d41a      	bmi.n	bef4 <_malloc_r+0x90>
    bebe:	2b0b      	cmp	r3, #11
    bec0:	d90f      	bls.n	bee2 <_malloc_r+0x7e>
    bec2:	600b      	str	r3, [r1, #0]
    bec4:	50cd      	str	r5, [r1, r3]
    bec6:	18cc      	adds	r4, r1, r3
    bec8:	4630      	mov	r0, r6
    beca:	f000 fc38 	bl	c73e <__malloc_unlock>
    bece:	f104 000b 	add.w	r0, r4, #11
    bed2:	1d23      	adds	r3, r4, #4
    bed4:	f020 0007 	bic.w	r0, r0, #7
    bed8:	1ac3      	subs	r3, r0, r3
    beda:	d01b      	beq.n	bf14 <_malloc_r+0xb0>
    bedc:	425a      	negs	r2, r3
    bede:	50e2      	str	r2, [r4, r3]
    bee0:	bd70      	pop	{r4, r5, r6, pc}
    bee2:	428c      	cmp	r4, r1
    bee4:	bf0d      	iteet	eq
    bee6:	6863      	ldreq	r3, [r4, #4]
    bee8:	684b      	ldrne	r3, [r1, #4]
    beea:	6063      	strne	r3, [r4, #4]
    beec:	6013      	streq	r3, [r2, #0]
    beee:	bf18      	it	ne
    bef0:	460c      	movne	r4, r1
    bef2:	e7e9      	b.n	bec8 <_malloc_r+0x64>
    bef4:	460c      	mov	r4, r1
    bef6:	6849      	ldr	r1, [r1, #4]
    bef8:	e7ca      	b.n	be90 <_malloc_r+0x2c>
    befa:	1cc4      	adds	r4, r0, #3
    befc:	f024 0403 	bic.w	r4, r4, #3
    bf00:	42a0      	cmp	r0, r4
    bf02:	d005      	beq.n	bf10 <_malloc_r+0xac>
    bf04:	1a21      	subs	r1, r4, r0
    bf06:	4630      	mov	r0, r6
    bf08:	f000 f886 	bl	c018 <_sbrk_r>
    bf0c:	3001      	adds	r0, #1
    bf0e:	d0cd      	beq.n	beac <_malloc_r+0x48>
    bf10:	6025      	str	r5, [r4, #0]
    bf12:	e7d9      	b.n	bec8 <_malloc_r+0x64>
    bf14:	bd70      	pop	{r4, r5, r6, pc}
    bf16:	bf00      	nop
    bf18:	20000f44 	.word	0x20000f44
    bf1c:	20000f48 	.word	0x20000f48

0000bf20 <iprintf>:
    bf20:	b40f      	push	{r0, r1, r2, r3}
    bf22:	4b0a      	ldr	r3, [pc, #40]	; (bf4c <iprintf+0x2c>)
    bf24:	b513      	push	{r0, r1, r4, lr}
    bf26:	681c      	ldr	r4, [r3, #0]
    bf28:	b124      	cbz	r4, bf34 <iprintf+0x14>
    bf2a:	69a3      	ldr	r3, [r4, #24]
    bf2c:	b913      	cbnz	r3, bf34 <iprintf+0x14>
    bf2e:	4620      	mov	r0, r4
    bf30:	f000 fb16 	bl	c560 <__sinit>
    bf34:	ab05      	add	r3, sp, #20
    bf36:	9a04      	ldr	r2, [sp, #16]
    bf38:	68a1      	ldr	r1, [r4, #8]
    bf3a:	9301      	str	r3, [sp, #4]
    bf3c:	4620      	mov	r0, r4
    bf3e:	f000 fd77 	bl	ca30 <_vfiprintf_r>
    bf42:	b002      	add	sp, #8
    bf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bf48:	b004      	add	sp, #16
    bf4a:	4770      	bx	lr
    bf4c:	20000558 	.word	0x20000558

0000bf50 <_puts_r>:
    bf50:	b570      	push	{r4, r5, r6, lr}
    bf52:	460e      	mov	r6, r1
    bf54:	4605      	mov	r5, r0
    bf56:	b118      	cbz	r0, bf60 <_puts_r+0x10>
    bf58:	6983      	ldr	r3, [r0, #24]
    bf5a:	b90b      	cbnz	r3, bf60 <_puts_r+0x10>
    bf5c:	f000 fb00 	bl	c560 <__sinit>
    bf60:	69ab      	ldr	r3, [r5, #24]
    bf62:	68ac      	ldr	r4, [r5, #8]
    bf64:	b913      	cbnz	r3, bf6c <_puts_r+0x1c>
    bf66:	4628      	mov	r0, r5
    bf68:	f000 fafa 	bl	c560 <__sinit>
    bf6c:	4b23      	ldr	r3, [pc, #140]	; (bffc <_puts_r+0xac>)
    bf6e:	429c      	cmp	r4, r3
    bf70:	d117      	bne.n	bfa2 <_puts_r+0x52>
    bf72:	686c      	ldr	r4, [r5, #4]
    bf74:	89a3      	ldrh	r3, [r4, #12]
    bf76:	071b      	lsls	r3, r3, #28
    bf78:	d51d      	bpl.n	bfb6 <_puts_r+0x66>
    bf7a:	6923      	ldr	r3, [r4, #16]
    bf7c:	b1db      	cbz	r3, bfb6 <_puts_r+0x66>
    bf7e:	3e01      	subs	r6, #1
    bf80:	68a3      	ldr	r3, [r4, #8]
    bf82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    bf86:	3b01      	subs	r3, #1
    bf88:	60a3      	str	r3, [r4, #8]
    bf8a:	b9e9      	cbnz	r1, bfc8 <_puts_r+0x78>
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	da2e      	bge.n	bfee <_puts_r+0x9e>
    bf90:	4622      	mov	r2, r4
    bf92:	210a      	movs	r1, #10
    bf94:	4628      	mov	r0, r5
    bf96:	f000 f931 	bl	c1fc <__swbuf_r>
    bf9a:	3001      	adds	r0, #1
    bf9c:	d011      	beq.n	bfc2 <_puts_r+0x72>
    bf9e:	200a      	movs	r0, #10
    bfa0:	bd70      	pop	{r4, r5, r6, pc}
    bfa2:	4b17      	ldr	r3, [pc, #92]	; (c000 <_puts_r+0xb0>)
    bfa4:	429c      	cmp	r4, r3
    bfa6:	d101      	bne.n	bfac <_puts_r+0x5c>
    bfa8:	68ac      	ldr	r4, [r5, #8]
    bfaa:	e7e3      	b.n	bf74 <_puts_r+0x24>
    bfac:	4b15      	ldr	r3, [pc, #84]	; (c004 <_puts_r+0xb4>)
    bfae:	429c      	cmp	r4, r3
    bfb0:	bf08      	it	eq
    bfb2:	68ec      	ldreq	r4, [r5, #12]
    bfb4:	e7de      	b.n	bf74 <_puts_r+0x24>
    bfb6:	4621      	mov	r1, r4
    bfb8:	4628      	mov	r0, r5
    bfba:	f000 f971 	bl	c2a0 <__swsetup_r>
    bfbe:	2800      	cmp	r0, #0
    bfc0:	d0dd      	beq.n	bf7e <_puts_r+0x2e>
    bfc2:	f04f 30ff 	mov.w	r0, #4294967295
    bfc6:	bd70      	pop	{r4, r5, r6, pc}
    bfc8:	2b00      	cmp	r3, #0
    bfca:	da04      	bge.n	bfd6 <_puts_r+0x86>
    bfcc:	69a2      	ldr	r2, [r4, #24]
    bfce:	4293      	cmp	r3, r2
    bfd0:	db06      	blt.n	bfe0 <_puts_r+0x90>
    bfd2:	290a      	cmp	r1, #10
    bfd4:	d004      	beq.n	bfe0 <_puts_r+0x90>
    bfd6:	6823      	ldr	r3, [r4, #0]
    bfd8:	1c5a      	adds	r2, r3, #1
    bfda:	6022      	str	r2, [r4, #0]
    bfdc:	7019      	strb	r1, [r3, #0]
    bfde:	e7cf      	b.n	bf80 <_puts_r+0x30>
    bfe0:	4622      	mov	r2, r4
    bfe2:	4628      	mov	r0, r5
    bfe4:	f000 f90a 	bl	c1fc <__swbuf_r>
    bfe8:	3001      	adds	r0, #1
    bfea:	d1c9      	bne.n	bf80 <_puts_r+0x30>
    bfec:	e7e9      	b.n	bfc2 <_puts_r+0x72>
    bfee:	6823      	ldr	r3, [r4, #0]
    bff0:	200a      	movs	r0, #10
    bff2:	1c5a      	adds	r2, r3, #1
    bff4:	6022      	str	r2, [r4, #0]
    bff6:	7018      	strb	r0, [r3, #0]
    bff8:	bd70      	pop	{r4, r5, r6, pc}
    bffa:	bf00      	nop
    bffc:	0000dd78 	.word	0x0000dd78
    c000:	0000dd98 	.word	0x0000dd98
    c004:	0000dd58 	.word	0x0000dd58

0000c008 <puts>:
    c008:	4b02      	ldr	r3, [pc, #8]	; (c014 <puts+0xc>)
    c00a:	4601      	mov	r1, r0
    c00c:	6818      	ldr	r0, [r3, #0]
    c00e:	f7ff bf9f 	b.w	bf50 <_puts_r>
    c012:	bf00      	nop
    c014:	20000558 	.word	0x20000558

0000c018 <_sbrk_r>:
    c018:	b538      	push	{r3, r4, r5, lr}
    c01a:	4c06      	ldr	r4, [pc, #24]	; (c034 <_sbrk_r+0x1c>)
    c01c:	2300      	movs	r3, #0
    c01e:	4605      	mov	r5, r0
    c020:	4608      	mov	r0, r1
    c022:	6023      	str	r3, [r4, #0]
    c024:	f7f9 fdd8 	bl	5bd8 <_sbrk>
    c028:	1c43      	adds	r3, r0, #1
    c02a:	d102      	bne.n	c032 <_sbrk_r+0x1a>
    c02c:	6823      	ldr	r3, [r4, #0]
    c02e:	b103      	cbz	r3, c032 <_sbrk_r+0x1a>
    c030:	602b      	str	r3, [r5, #0]
    c032:	bd38      	pop	{r3, r4, r5, pc}
    c034:	20003ba8 	.word	0x20003ba8

0000c038 <setbuf>:
    c038:	2900      	cmp	r1, #0
    c03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c03e:	bf0c      	ite	eq
    c040:	2202      	moveq	r2, #2
    c042:	2200      	movne	r2, #0
    c044:	f000 b800 	b.w	c048 <setvbuf>

0000c048 <setvbuf>:
    c048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c04c:	461d      	mov	r5, r3
    c04e:	4b51      	ldr	r3, [pc, #324]	; (c194 <setvbuf+0x14c>)
    c050:	681e      	ldr	r6, [r3, #0]
    c052:	4604      	mov	r4, r0
    c054:	460f      	mov	r7, r1
    c056:	4690      	mov	r8, r2
    c058:	b126      	cbz	r6, c064 <setvbuf+0x1c>
    c05a:	69b3      	ldr	r3, [r6, #24]
    c05c:	b913      	cbnz	r3, c064 <setvbuf+0x1c>
    c05e:	4630      	mov	r0, r6
    c060:	f000 fa7e 	bl	c560 <__sinit>
    c064:	4b4c      	ldr	r3, [pc, #304]	; (c198 <setvbuf+0x150>)
    c066:	429c      	cmp	r4, r3
    c068:	d152      	bne.n	c110 <setvbuf+0xc8>
    c06a:	6874      	ldr	r4, [r6, #4]
    c06c:	f1b8 0f02 	cmp.w	r8, #2
    c070:	d006      	beq.n	c080 <setvbuf+0x38>
    c072:	f1b8 0f01 	cmp.w	r8, #1
    c076:	f200 8089 	bhi.w	c18c <setvbuf+0x144>
    c07a:	2d00      	cmp	r5, #0
    c07c:	f2c0 8086 	blt.w	c18c <setvbuf+0x144>
    c080:	4621      	mov	r1, r4
    c082:	4630      	mov	r0, r6
    c084:	f000 fa02 	bl	c48c <_fflush_r>
    c088:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c08a:	b141      	cbz	r1, c09e <setvbuf+0x56>
    c08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c090:	4299      	cmp	r1, r3
    c092:	d002      	beq.n	c09a <setvbuf+0x52>
    c094:	4630      	mov	r0, r6
    c096:	f7ff fe97 	bl	bdc8 <_free_r>
    c09a:	2300      	movs	r3, #0
    c09c:	6363      	str	r3, [r4, #52]	; 0x34
    c09e:	2300      	movs	r3, #0
    c0a0:	61a3      	str	r3, [r4, #24]
    c0a2:	6063      	str	r3, [r4, #4]
    c0a4:	89a3      	ldrh	r3, [r4, #12]
    c0a6:	061b      	lsls	r3, r3, #24
    c0a8:	d503      	bpl.n	c0b2 <setvbuf+0x6a>
    c0aa:	6921      	ldr	r1, [r4, #16]
    c0ac:	4630      	mov	r0, r6
    c0ae:	f7ff fe8b 	bl	bdc8 <_free_r>
    c0b2:	89a3      	ldrh	r3, [r4, #12]
    c0b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    c0b8:	f023 0303 	bic.w	r3, r3, #3
    c0bc:	f1b8 0f02 	cmp.w	r8, #2
    c0c0:	81a3      	strh	r3, [r4, #12]
    c0c2:	d05d      	beq.n	c180 <setvbuf+0x138>
    c0c4:	ab01      	add	r3, sp, #4
    c0c6:	466a      	mov	r2, sp
    c0c8:	4621      	mov	r1, r4
    c0ca:	4630      	mov	r0, r6
    c0cc:	f000 fad2 	bl	c674 <__swhatbuf_r>
    c0d0:	89a3      	ldrh	r3, [r4, #12]
    c0d2:	4318      	orrs	r0, r3
    c0d4:	81a0      	strh	r0, [r4, #12]
    c0d6:	bb2d      	cbnz	r5, c124 <setvbuf+0xdc>
    c0d8:	9d00      	ldr	r5, [sp, #0]
    c0da:	4628      	mov	r0, r5
    c0dc:	f7ff fe58 	bl	bd90 <malloc>
    c0e0:	4607      	mov	r7, r0
    c0e2:	2800      	cmp	r0, #0
    c0e4:	d14e      	bne.n	c184 <setvbuf+0x13c>
    c0e6:	f8dd 9000 	ldr.w	r9, [sp]
    c0ea:	45a9      	cmp	r9, r5
    c0ec:	d13c      	bne.n	c168 <setvbuf+0x120>
    c0ee:	f04f 30ff 	mov.w	r0, #4294967295
    c0f2:	89a3      	ldrh	r3, [r4, #12]
    c0f4:	f043 0302 	orr.w	r3, r3, #2
    c0f8:	81a3      	strh	r3, [r4, #12]
    c0fa:	2300      	movs	r3, #0
    c0fc:	60a3      	str	r3, [r4, #8]
    c0fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c102:	6023      	str	r3, [r4, #0]
    c104:	6123      	str	r3, [r4, #16]
    c106:	2301      	movs	r3, #1
    c108:	6163      	str	r3, [r4, #20]
    c10a:	b003      	add	sp, #12
    c10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c110:	4b22      	ldr	r3, [pc, #136]	; (c19c <setvbuf+0x154>)
    c112:	429c      	cmp	r4, r3
    c114:	d101      	bne.n	c11a <setvbuf+0xd2>
    c116:	68b4      	ldr	r4, [r6, #8]
    c118:	e7a8      	b.n	c06c <setvbuf+0x24>
    c11a:	4b21      	ldr	r3, [pc, #132]	; (c1a0 <setvbuf+0x158>)
    c11c:	429c      	cmp	r4, r3
    c11e:	bf08      	it	eq
    c120:	68f4      	ldreq	r4, [r6, #12]
    c122:	e7a3      	b.n	c06c <setvbuf+0x24>
    c124:	2f00      	cmp	r7, #0
    c126:	d0d8      	beq.n	c0da <setvbuf+0x92>
    c128:	69b3      	ldr	r3, [r6, #24]
    c12a:	b913      	cbnz	r3, c132 <setvbuf+0xea>
    c12c:	4630      	mov	r0, r6
    c12e:	f000 fa17 	bl	c560 <__sinit>
    c132:	f1b8 0f01 	cmp.w	r8, #1
    c136:	bf08      	it	eq
    c138:	89a3      	ldrheq	r3, [r4, #12]
    c13a:	6027      	str	r7, [r4, #0]
    c13c:	bf04      	itt	eq
    c13e:	f043 0301 	orreq.w	r3, r3, #1
    c142:	81a3      	strheq	r3, [r4, #12]
    c144:	89a3      	ldrh	r3, [r4, #12]
    c146:	6127      	str	r7, [r4, #16]
    c148:	f013 0008 	ands.w	r0, r3, #8
    c14c:	6165      	str	r5, [r4, #20]
    c14e:	d01b      	beq.n	c188 <setvbuf+0x140>
    c150:	f013 0001 	ands.w	r0, r3, #1
    c154:	bf18      	it	ne
    c156:	426d      	negne	r5, r5
    c158:	f04f 0300 	mov.w	r3, #0
    c15c:	bf1d      	ittte	ne
    c15e:	60a3      	strne	r3, [r4, #8]
    c160:	61a5      	strne	r5, [r4, #24]
    c162:	4618      	movne	r0, r3
    c164:	60a5      	streq	r5, [r4, #8]
    c166:	e7d0      	b.n	c10a <setvbuf+0xc2>
    c168:	4648      	mov	r0, r9
    c16a:	f7ff fe11 	bl	bd90 <malloc>
    c16e:	4607      	mov	r7, r0
    c170:	2800      	cmp	r0, #0
    c172:	d0bc      	beq.n	c0ee <setvbuf+0xa6>
    c174:	89a3      	ldrh	r3, [r4, #12]
    c176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c17a:	81a3      	strh	r3, [r4, #12]
    c17c:	464d      	mov	r5, r9
    c17e:	e7d3      	b.n	c128 <setvbuf+0xe0>
    c180:	2000      	movs	r0, #0
    c182:	e7b6      	b.n	c0f2 <setvbuf+0xaa>
    c184:	46a9      	mov	r9, r5
    c186:	e7f5      	b.n	c174 <setvbuf+0x12c>
    c188:	60a0      	str	r0, [r4, #8]
    c18a:	e7be      	b.n	c10a <setvbuf+0xc2>
    c18c:	f04f 30ff 	mov.w	r0, #4294967295
    c190:	e7bb      	b.n	c10a <setvbuf+0xc2>
    c192:	bf00      	nop
    c194:	20000558 	.word	0x20000558
    c198:	0000dd78 	.word	0x0000dd78
    c19c:	0000dd98 	.word	0x0000dd98
    c1a0:	0000dd58 	.word	0x0000dd58

0000c1a4 <siprintf>:
    c1a4:	b40e      	push	{r1, r2, r3}
    c1a6:	b500      	push	{lr}
    c1a8:	b09c      	sub	sp, #112	; 0x70
    c1aa:	f44f 7102 	mov.w	r1, #520	; 0x208
    c1ae:	ab1d      	add	r3, sp, #116	; 0x74
    c1b0:	f8ad 1014 	strh.w	r1, [sp, #20]
    c1b4:	9002      	str	r0, [sp, #8]
    c1b6:	9006      	str	r0, [sp, #24]
    c1b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c1bc:	480a      	ldr	r0, [pc, #40]	; (c1e8 <siprintf+0x44>)
    c1be:	9104      	str	r1, [sp, #16]
    c1c0:	9107      	str	r1, [sp, #28]
    c1c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1c6:	f853 2b04 	ldr.w	r2, [r3], #4
    c1ca:	f8ad 1016 	strh.w	r1, [sp, #22]
    c1ce:	6800      	ldr	r0, [r0, #0]
    c1d0:	9301      	str	r3, [sp, #4]
    c1d2:	a902      	add	r1, sp, #8
    c1d4:	f000 fb10 	bl	c7f8 <_svfiprintf_r>
    c1d8:	9b02      	ldr	r3, [sp, #8]
    c1da:	2200      	movs	r2, #0
    c1dc:	701a      	strb	r2, [r3, #0]
    c1de:	b01c      	add	sp, #112	; 0x70
    c1e0:	f85d eb04 	ldr.w	lr, [sp], #4
    c1e4:	b003      	add	sp, #12
    c1e6:	4770      	bx	lr
    c1e8:	20000558 	.word	0x20000558

0000c1ec <strlen>:
    c1ec:	4603      	mov	r3, r0
    c1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
    c1f2:	2a00      	cmp	r2, #0
    c1f4:	d1fb      	bne.n	c1ee <strlen+0x2>
    c1f6:	1a18      	subs	r0, r3, r0
    c1f8:	3801      	subs	r0, #1
    c1fa:	4770      	bx	lr

0000c1fc <__swbuf_r>:
    c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1fe:	460e      	mov	r6, r1
    c200:	4614      	mov	r4, r2
    c202:	4605      	mov	r5, r0
    c204:	b118      	cbz	r0, c20e <__swbuf_r+0x12>
    c206:	6983      	ldr	r3, [r0, #24]
    c208:	b90b      	cbnz	r3, c20e <__swbuf_r+0x12>
    c20a:	f000 f9a9 	bl	c560 <__sinit>
    c20e:	4b21      	ldr	r3, [pc, #132]	; (c294 <__swbuf_r+0x98>)
    c210:	429c      	cmp	r4, r3
    c212:	d12a      	bne.n	c26a <__swbuf_r+0x6e>
    c214:	686c      	ldr	r4, [r5, #4]
    c216:	69a3      	ldr	r3, [r4, #24]
    c218:	60a3      	str	r3, [r4, #8]
    c21a:	89a3      	ldrh	r3, [r4, #12]
    c21c:	071a      	lsls	r2, r3, #28
    c21e:	d52e      	bpl.n	c27e <__swbuf_r+0x82>
    c220:	6923      	ldr	r3, [r4, #16]
    c222:	b363      	cbz	r3, c27e <__swbuf_r+0x82>
    c224:	6923      	ldr	r3, [r4, #16]
    c226:	6820      	ldr	r0, [r4, #0]
    c228:	1ac0      	subs	r0, r0, r3
    c22a:	6963      	ldr	r3, [r4, #20]
    c22c:	b2f6      	uxtb	r6, r6
    c22e:	4298      	cmp	r0, r3
    c230:	4637      	mov	r7, r6
    c232:	db04      	blt.n	c23e <__swbuf_r+0x42>
    c234:	4621      	mov	r1, r4
    c236:	4628      	mov	r0, r5
    c238:	f000 f928 	bl	c48c <_fflush_r>
    c23c:	bb28      	cbnz	r0, c28a <__swbuf_r+0x8e>
    c23e:	68a3      	ldr	r3, [r4, #8]
    c240:	3b01      	subs	r3, #1
    c242:	60a3      	str	r3, [r4, #8]
    c244:	6823      	ldr	r3, [r4, #0]
    c246:	1c5a      	adds	r2, r3, #1
    c248:	6022      	str	r2, [r4, #0]
    c24a:	701e      	strb	r6, [r3, #0]
    c24c:	6963      	ldr	r3, [r4, #20]
    c24e:	3001      	adds	r0, #1
    c250:	4298      	cmp	r0, r3
    c252:	d004      	beq.n	c25e <__swbuf_r+0x62>
    c254:	89a3      	ldrh	r3, [r4, #12]
    c256:	07db      	lsls	r3, r3, #31
    c258:	d519      	bpl.n	c28e <__swbuf_r+0x92>
    c25a:	2e0a      	cmp	r6, #10
    c25c:	d117      	bne.n	c28e <__swbuf_r+0x92>
    c25e:	4621      	mov	r1, r4
    c260:	4628      	mov	r0, r5
    c262:	f000 f913 	bl	c48c <_fflush_r>
    c266:	b190      	cbz	r0, c28e <__swbuf_r+0x92>
    c268:	e00f      	b.n	c28a <__swbuf_r+0x8e>
    c26a:	4b0b      	ldr	r3, [pc, #44]	; (c298 <__swbuf_r+0x9c>)
    c26c:	429c      	cmp	r4, r3
    c26e:	d101      	bne.n	c274 <__swbuf_r+0x78>
    c270:	68ac      	ldr	r4, [r5, #8]
    c272:	e7d0      	b.n	c216 <__swbuf_r+0x1a>
    c274:	4b09      	ldr	r3, [pc, #36]	; (c29c <__swbuf_r+0xa0>)
    c276:	429c      	cmp	r4, r3
    c278:	bf08      	it	eq
    c27a:	68ec      	ldreq	r4, [r5, #12]
    c27c:	e7cb      	b.n	c216 <__swbuf_r+0x1a>
    c27e:	4621      	mov	r1, r4
    c280:	4628      	mov	r0, r5
    c282:	f000 f80d 	bl	c2a0 <__swsetup_r>
    c286:	2800      	cmp	r0, #0
    c288:	d0cc      	beq.n	c224 <__swbuf_r+0x28>
    c28a:	f04f 37ff 	mov.w	r7, #4294967295
    c28e:	4638      	mov	r0, r7
    c290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c292:	bf00      	nop
    c294:	0000dd78 	.word	0x0000dd78
    c298:	0000dd98 	.word	0x0000dd98
    c29c:	0000dd58 	.word	0x0000dd58

0000c2a0 <__swsetup_r>:
    c2a0:	4b32      	ldr	r3, [pc, #200]	; (c36c <__swsetup_r+0xcc>)
    c2a2:	b570      	push	{r4, r5, r6, lr}
    c2a4:	681d      	ldr	r5, [r3, #0]
    c2a6:	4606      	mov	r6, r0
    c2a8:	460c      	mov	r4, r1
    c2aa:	b125      	cbz	r5, c2b6 <__swsetup_r+0x16>
    c2ac:	69ab      	ldr	r3, [r5, #24]
    c2ae:	b913      	cbnz	r3, c2b6 <__swsetup_r+0x16>
    c2b0:	4628      	mov	r0, r5
    c2b2:	f000 f955 	bl	c560 <__sinit>
    c2b6:	4b2e      	ldr	r3, [pc, #184]	; (c370 <__swsetup_r+0xd0>)
    c2b8:	429c      	cmp	r4, r3
    c2ba:	d10f      	bne.n	c2dc <__swsetup_r+0x3c>
    c2bc:	686c      	ldr	r4, [r5, #4]
    c2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c2c2:	b29a      	uxth	r2, r3
    c2c4:	0715      	lsls	r5, r2, #28
    c2c6:	d42c      	bmi.n	c322 <__swsetup_r+0x82>
    c2c8:	06d0      	lsls	r0, r2, #27
    c2ca:	d411      	bmi.n	c2f0 <__swsetup_r+0x50>
    c2cc:	2209      	movs	r2, #9
    c2ce:	6032      	str	r2, [r6, #0]
    c2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c2d4:	81a3      	strh	r3, [r4, #12]
    c2d6:	f04f 30ff 	mov.w	r0, #4294967295
    c2da:	bd70      	pop	{r4, r5, r6, pc}
    c2dc:	4b25      	ldr	r3, [pc, #148]	; (c374 <__swsetup_r+0xd4>)
    c2de:	429c      	cmp	r4, r3
    c2e0:	d101      	bne.n	c2e6 <__swsetup_r+0x46>
    c2e2:	68ac      	ldr	r4, [r5, #8]
    c2e4:	e7eb      	b.n	c2be <__swsetup_r+0x1e>
    c2e6:	4b24      	ldr	r3, [pc, #144]	; (c378 <__swsetup_r+0xd8>)
    c2e8:	429c      	cmp	r4, r3
    c2ea:	bf08      	it	eq
    c2ec:	68ec      	ldreq	r4, [r5, #12]
    c2ee:	e7e6      	b.n	c2be <__swsetup_r+0x1e>
    c2f0:	0751      	lsls	r1, r2, #29
    c2f2:	d512      	bpl.n	c31a <__swsetup_r+0x7a>
    c2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c2f6:	b141      	cbz	r1, c30a <__swsetup_r+0x6a>
    c2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c2fc:	4299      	cmp	r1, r3
    c2fe:	d002      	beq.n	c306 <__swsetup_r+0x66>
    c300:	4630      	mov	r0, r6
    c302:	f7ff fd61 	bl	bdc8 <_free_r>
    c306:	2300      	movs	r3, #0
    c308:	6363      	str	r3, [r4, #52]	; 0x34
    c30a:	89a3      	ldrh	r3, [r4, #12]
    c30c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c310:	81a3      	strh	r3, [r4, #12]
    c312:	2300      	movs	r3, #0
    c314:	6063      	str	r3, [r4, #4]
    c316:	6923      	ldr	r3, [r4, #16]
    c318:	6023      	str	r3, [r4, #0]
    c31a:	89a3      	ldrh	r3, [r4, #12]
    c31c:	f043 0308 	orr.w	r3, r3, #8
    c320:	81a3      	strh	r3, [r4, #12]
    c322:	6923      	ldr	r3, [r4, #16]
    c324:	b94b      	cbnz	r3, c33a <__swsetup_r+0x9a>
    c326:	89a3      	ldrh	r3, [r4, #12]
    c328:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c32c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c330:	d003      	beq.n	c33a <__swsetup_r+0x9a>
    c332:	4621      	mov	r1, r4
    c334:	4630      	mov	r0, r6
    c336:	f000 f9c1 	bl	c6bc <__smakebuf_r>
    c33a:	89a2      	ldrh	r2, [r4, #12]
    c33c:	f012 0301 	ands.w	r3, r2, #1
    c340:	d00c      	beq.n	c35c <__swsetup_r+0xbc>
    c342:	2300      	movs	r3, #0
    c344:	60a3      	str	r3, [r4, #8]
    c346:	6963      	ldr	r3, [r4, #20]
    c348:	425b      	negs	r3, r3
    c34a:	61a3      	str	r3, [r4, #24]
    c34c:	6923      	ldr	r3, [r4, #16]
    c34e:	b953      	cbnz	r3, c366 <__swsetup_r+0xc6>
    c350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c354:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    c358:	d1ba      	bne.n	c2d0 <__swsetup_r+0x30>
    c35a:	bd70      	pop	{r4, r5, r6, pc}
    c35c:	0792      	lsls	r2, r2, #30
    c35e:	bf58      	it	pl
    c360:	6963      	ldrpl	r3, [r4, #20]
    c362:	60a3      	str	r3, [r4, #8]
    c364:	e7f2      	b.n	c34c <__swsetup_r+0xac>
    c366:	2000      	movs	r0, #0
    c368:	e7f7      	b.n	c35a <__swsetup_r+0xba>
    c36a:	bf00      	nop
    c36c:	20000558 	.word	0x20000558
    c370:	0000dd78 	.word	0x0000dd78
    c374:	0000dd98 	.word	0x0000dd98
    c378:	0000dd58 	.word	0x0000dd58

0000c37c <__sflush_r>:
    c37c:	898a      	ldrh	r2, [r1, #12]
    c37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c382:	4605      	mov	r5, r0
    c384:	0710      	lsls	r0, r2, #28
    c386:	460c      	mov	r4, r1
    c388:	d45a      	bmi.n	c440 <__sflush_r+0xc4>
    c38a:	684b      	ldr	r3, [r1, #4]
    c38c:	2b00      	cmp	r3, #0
    c38e:	dc05      	bgt.n	c39c <__sflush_r+0x20>
    c390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c392:	2b00      	cmp	r3, #0
    c394:	dc02      	bgt.n	c39c <__sflush_r+0x20>
    c396:	2000      	movs	r0, #0
    c398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c39e:	2e00      	cmp	r6, #0
    c3a0:	d0f9      	beq.n	c396 <__sflush_r+0x1a>
    c3a2:	2300      	movs	r3, #0
    c3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    c3a8:	682f      	ldr	r7, [r5, #0]
    c3aa:	602b      	str	r3, [r5, #0]
    c3ac:	d033      	beq.n	c416 <__sflush_r+0x9a>
    c3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c3b0:	89a3      	ldrh	r3, [r4, #12]
    c3b2:	075a      	lsls	r2, r3, #29
    c3b4:	d505      	bpl.n	c3c2 <__sflush_r+0x46>
    c3b6:	6863      	ldr	r3, [r4, #4]
    c3b8:	1ac0      	subs	r0, r0, r3
    c3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c3bc:	b10b      	cbz	r3, c3c2 <__sflush_r+0x46>
    c3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c3c0:	1ac0      	subs	r0, r0, r3
    c3c2:	2300      	movs	r3, #0
    c3c4:	4602      	mov	r2, r0
    c3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c3c8:	6a21      	ldr	r1, [r4, #32]
    c3ca:	4628      	mov	r0, r5
    c3cc:	47b0      	blx	r6
    c3ce:	1c43      	adds	r3, r0, #1
    c3d0:	89a3      	ldrh	r3, [r4, #12]
    c3d2:	d106      	bne.n	c3e2 <__sflush_r+0x66>
    c3d4:	6829      	ldr	r1, [r5, #0]
    c3d6:	291d      	cmp	r1, #29
    c3d8:	d84b      	bhi.n	c472 <__sflush_r+0xf6>
    c3da:	4a2b      	ldr	r2, [pc, #172]	; (c488 <__sflush_r+0x10c>)
    c3dc:	40ca      	lsrs	r2, r1
    c3de:	07d6      	lsls	r6, r2, #31
    c3e0:	d547      	bpl.n	c472 <__sflush_r+0xf6>
    c3e2:	2200      	movs	r2, #0
    c3e4:	6062      	str	r2, [r4, #4]
    c3e6:	04d9      	lsls	r1, r3, #19
    c3e8:	6922      	ldr	r2, [r4, #16]
    c3ea:	6022      	str	r2, [r4, #0]
    c3ec:	d504      	bpl.n	c3f8 <__sflush_r+0x7c>
    c3ee:	1c42      	adds	r2, r0, #1
    c3f0:	d101      	bne.n	c3f6 <__sflush_r+0x7a>
    c3f2:	682b      	ldr	r3, [r5, #0]
    c3f4:	b903      	cbnz	r3, c3f8 <__sflush_r+0x7c>
    c3f6:	6560      	str	r0, [r4, #84]	; 0x54
    c3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c3fa:	602f      	str	r7, [r5, #0]
    c3fc:	2900      	cmp	r1, #0
    c3fe:	d0ca      	beq.n	c396 <__sflush_r+0x1a>
    c400:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c404:	4299      	cmp	r1, r3
    c406:	d002      	beq.n	c40e <__sflush_r+0x92>
    c408:	4628      	mov	r0, r5
    c40a:	f7ff fcdd 	bl	bdc8 <_free_r>
    c40e:	2000      	movs	r0, #0
    c410:	6360      	str	r0, [r4, #52]	; 0x34
    c412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c416:	6a21      	ldr	r1, [r4, #32]
    c418:	2301      	movs	r3, #1
    c41a:	4628      	mov	r0, r5
    c41c:	47b0      	blx	r6
    c41e:	1c41      	adds	r1, r0, #1
    c420:	d1c6      	bne.n	c3b0 <__sflush_r+0x34>
    c422:	682b      	ldr	r3, [r5, #0]
    c424:	2b00      	cmp	r3, #0
    c426:	d0c3      	beq.n	c3b0 <__sflush_r+0x34>
    c428:	2b1d      	cmp	r3, #29
    c42a:	d001      	beq.n	c430 <__sflush_r+0xb4>
    c42c:	2b16      	cmp	r3, #22
    c42e:	d101      	bne.n	c434 <__sflush_r+0xb8>
    c430:	602f      	str	r7, [r5, #0]
    c432:	e7b0      	b.n	c396 <__sflush_r+0x1a>
    c434:	89a3      	ldrh	r3, [r4, #12]
    c436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c43a:	81a3      	strh	r3, [r4, #12]
    c43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c440:	690f      	ldr	r7, [r1, #16]
    c442:	2f00      	cmp	r7, #0
    c444:	d0a7      	beq.n	c396 <__sflush_r+0x1a>
    c446:	0793      	lsls	r3, r2, #30
    c448:	680e      	ldr	r6, [r1, #0]
    c44a:	bf08      	it	eq
    c44c:	694b      	ldreq	r3, [r1, #20]
    c44e:	600f      	str	r7, [r1, #0]
    c450:	bf18      	it	ne
    c452:	2300      	movne	r3, #0
    c454:	eba6 0807 	sub.w	r8, r6, r7
    c458:	608b      	str	r3, [r1, #8]
    c45a:	f1b8 0f00 	cmp.w	r8, #0
    c45e:	dd9a      	ble.n	c396 <__sflush_r+0x1a>
    c460:	4643      	mov	r3, r8
    c462:	463a      	mov	r2, r7
    c464:	6a21      	ldr	r1, [r4, #32]
    c466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c468:	4628      	mov	r0, r5
    c46a:	47b0      	blx	r6
    c46c:	2800      	cmp	r0, #0
    c46e:	dc07      	bgt.n	c480 <__sflush_r+0x104>
    c470:	89a3      	ldrh	r3, [r4, #12]
    c472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c476:	81a3      	strh	r3, [r4, #12]
    c478:	f04f 30ff 	mov.w	r0, #4294967295
    c47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c480:	4407      	add	r7, r0
    c482:	eba8 0800 	sub.w	r8, r8, r0
    c486:	e7e8      	b.n	c45a <__sflush_r+0xde>
    c488:	20400001 	.word	0x20400001

0000c48c <_fflush_r>:
    c48c:	b538      	push	{r3, r4, r5, lr}
    c48e:	690b      	ldr	r3, [r1, #16]
    c490:	4605      	mov	r5, r0
    c492:	460c      	mov	r4, r1
    c494:	b1db      	cbz	r3, c4ce <_fflush_r+0x42>
    c496:	b118      	cbz	r0, c4a0 <_fflush_r+0x14>
    c498:	6983      	ldr	r3, [r0, #24]
    c49a:	b90b      	cbnz	r3, c4a0 <_fflush_r+0x14>
    c49c:	f000 f860 	bl	c560 <__sinit>
    c4a0:	4b0c      	ldr	r3, [pc, #48]	; (c4d4 <_fflush_r+0x48>)
    c4a2:	429c      	cmp	r4, r3
    c4a4:	d109      	bne.n	c4ba <_fflush_r+0x2e>
    c4a6:	686c      	ldr	r4, [r5, #4]
    c4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c4ac:	b17b      	cbz	r3, c4ce <_fflush_r+0x42>
    c4ae:	4621      	mov	r1, r4
    c4b0:	4628      	mov	r0, r5
    c4b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c4b6:	f7ff bf61 	b.w	c37c <__sflush_r>
    c4ba:	4b07      	ldr	r3, [pc, #28]	; (c4d8 <_fflush_r+0x4c>)
    c4bc:	429c      	cmp	r4, r3
    c4be:	d101      	bne.n	c4c4 <_fflush_r+0x38>
    c4c0:	68ac      	ldr	r4, [r5, #8]
    c4c2:	e7f1      	b.n	c4a8 <_fflush_r+0x1c>
    c4c4:	4b05      	ldr	r3, [pc, #20]	; (c4dc <_fflush_r+0x50>)
    c4c6:	429c      	cmp	r4, r3
    c4c8:	bf08      	it	eq
    c4ca:	68ec      	ldreq	r4, [r5, #12]
    c4cc:	e7ec      	b.n	c4a8 <_fflush_r+0x1c>
    c4ce:	2000      	movs	r0, #0
    c4d0:	bd38      	pop	{r3, r4, r5, pc}
    c4d2:	bf00      	nop
    c4d4:	0000dd78 	.word	0x0000dd78
    c4d8:	0000dd98 	.word	0x0000dd98
    c4dc:	0000dd58 	.word	0x0000dd58

0000c4e0 <_cleanup_r>:
    c4e0:	4901      	ldr	r1, [pc, #4]	; (c4e8 <_cleanup_r+0x8>)
    c4e2:	f000 b8a9 	b.w	c638 <_fwalk_reent>
    c4e6:	bf00      	nop
    c4e8:	0000c48d 	.word	0x0000c48d

0000c4ec <std.isra.0>:
    c4ec:	2300      	movs	r3, #0
    c4ee:	b510      	push	{r4, lr}
    c4f0:	4604      	mov	r4, r0
    c4f2:	6003      	str	r3, [r0, #0]
    c4f4:	6043      	str	r3, [r0, #4]
    c4f6:	6083      	str	r3, [r0, #8]
    c4f8:	8181      	strh	r1, [r0, #12]
    c4fa:	6643      	str	r3, [r0, #100]	; 0x64
    c4fc:	81c2      	strh	r2, [r0, #14]
    c4fe:	6103      	str	r3, [r0, #16]
    c500:	6143      	str	r3, [r0, #20]
    c502:	6183      	str	r3, [r0, #24]
    c504:	4619      	mov	r1, r3
    c506:	2208      	movs	r2, #8
    c508:	305c      	adds	r0, #92	; 0x5c
    c50a:	f7ff fc54 	bl	bdb6 <memset>
    c50e:	4b05      	ldr	r3, [pc, #20]	; (c524 <std.isra.0+0x38>)
    c510:	6263      	str	r3, [r4, #36]	; 0x24
    c512:	4b05      	ldr	r3, [pc, #20]	; (c528 <std.isra.0+0x3c>)
    c514:	62a3      	str	r3, [r4, #40]	; 0x28
    c516:	4b05      	ldr	r3, [pc, #20]	; (c52c <std.isra.0+0x40>)
    c518:	62e3      	str	r3, [r4, #44]	; 0x2c
    c51a:	4b05      	ldr	r3, [pc, #20]	; (c530 <std.isra.0+0x44>)
    c51c:	6224      	str	r4, [r4, #32]
    c51e:	6323      	str	r3, [r4, #48]	; 0x30
    c520:	bd10      	pop	{r4, pc}
    c522:	bf00      	nop
    c524:	0000cf89 	.word	0x0000cf89
    c528:	0000cfab 	.word	0x0000cfab
    c52c:	0000cfe3 	.word	0x0000cfe3
    c530:	0000d007 	.word	0x0000d007

0000c534 <__sfmoreglue>:
    c534:	b570      	push	{r4, r5, r6, lr}
    c536:	1e4a      	subs	r2, r1, #1
    c538:	2568      	movs	r5, #104	; 0x68
    c53a:	4355      	muls	r5, r2
    c53c:	460e      	mov	r6, r1
    c53e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    c542:	f7ff fc8f 	bl	be64 <_malloc_r>
    c546:	4604      	mov	r4, r0
    c548:	b140      	cbz	r0, c55c <__sfmoreglue+0x28>
    c54a:	2100      	movs	r1, #0
    c54c:	e880 0042 	stmia.w	r0, {r1, r6}
    c550:	300c      	adds	r0, #12
    c552:	60a0      	str	r0, [r4, #8]
    c554:	f105 0268 	add.w	r2, r5, #104	; 0x68
    c558:	f7ff fc2d 	bl	bdb6 <memset>
    c55c:	4620      	mov	r0, r4
    c55e:	bd70      	pop	{r4, r5, r6, pc}

0000c560 <__sinit>:
    c560:	6983      	ldr	r3, [r0, #24]
    c562:	b510      	push	{r4, lr}
    c564:	4604      	mov	r4, r0
    c566:	bb33      	cbnz	r3, c5b6 <__sinit+0x56>
    c568:	6483      	str	r3, [r0, #72]	; 0x48
    c56a:	64c3      	str	r3, [r0, #76]	; 0x4c
    c56c:	6503      	str	r3, [r0, #80]	; 0x50
    c56e:	4b12      	ldr	r3, [pc, #72]	; (c5b8 <__sinit+0x58>)
    c570:	4a12      	ldr	r2, [pc, #72]	; (c5bc <__sinit+0x5c>)
    c572:	681b      	ldr	r3, [r3, #0]
    c574:	6282      	str	r2, [r0, #40]	; 0x28
    c576:	4298      	cmp	r0, r3
    c578:	bf04      	itt	eq
    c57a:	2301      	moveq	r3, #1
    c57c:	6183      	streq	r3, [r0, #24]
    c57e:	f000 f81f 	bl	c5c0 <__sfp>
    c582:	6060      	str	r0, [r4, #4]
    c584:	4620      	mov	r0, r4
    c586:	f000 f81b 	bl	c5c0 <__sfp>
    c58a:	60a0      	str	r0, [r4, #8]
    c58c:	4620      	mov	r0, r4
    c58e:	f000 f817 	bl	c5c0 <__sfp>
    c592:	2200      	movs	r2, #0
    c594:	60e0      	str	r0, [r4, #12]
    c596:	2104      	movs	r1, #4
    c598:	6860      	ldr	r0, [r4, #4]
    c59a:	f7ff ffa7 	bl	c4ec <std.isra.0>
    c59e:	2201      	movs	r2, #1
    c5a0:	2109      	movs	r1, #9
    c5a2:	68a0      	ldr	r0, [r4, #8]
    c5a4:	f7ff ffa2 	bl	c4ec <std.isra.0>
    c5a8:	2202      	movs	r2, #2
    c5aa:	2112      	movs	r1, #18
    c5ac:	68e0      	ldr	r0, [r4, #12]
    c5ae:	f7ff ff9d 	bl	c4ec <std.isra.0>
    c5b2:	2301      	movs	r3, #1
    c5b4:	61a3      	str	r3, [r4, #24]
    c5b6:	bd10      	pop	{r4, pc}
    c5b8:	0000dd54 	.word	0x0000dd54
    c5bc:	0000c4e1 	.word	0x0000c4e1

0000c5c0 <__sfp>:
    c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5c2:	4b1c      	ldr	r3, [pc, #112]	; (c634 <__sfp+0x74>)
    c5c4:	681e      	ldr	r6, [r3, #0]
    c5c6:	69b3      	ldr	r3, [r6, #24]
    c5c8:	4607      	mov	r7, r0
    c5ca:	b913      	cbnz	r3, c5d2 <__sfp+0x12>
    c5cc:	4630      	mov	r0, r6
    c5ce:	f7ff ffc7 	bl	c560 <__sinit>
    c5d2:	3648      	adds	r6, #72	; 0x48
    c5d4:	68b4      	ldr	r4, [r6, #8]
    c5d6:	6873      	ldr	r3, [r6, #4]
    c5d8:	3b01      	subs	r3, #1
    c5da:	d503      	bpl.n	c5e4 <__sfp+0x24>
    c5dc:	6833      	ldr	r3, [r6, #0]
    c5de:	b133      	cbz	r3, c5ee <__sfp+0x2e>
    c5e0:	6836      	ldr	r6, [r6, #0]
    c5e2:	e7f7      	b.n	c5d4 <__sfp+0x14>
    c5e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    c5e8:	b16d      	cbz	r5, c606 <__sfp+0x46>
    c5ea:	3468      	adds	r4, #104	; 0x68
    c5ec:	e7f4      	b.n	c5d8 <__sfp+0x18>
    c5ee:	2104      	movs	r1, #4
    c5f0:	4638      	mov	r0, r7
    c5f2:	f7ff ff9f 	bl	c534 <__sfmoreglue>
    c5f6:	6030      	str	r0, [r6, #0]
    c5f8:	2800      	cmp	r0, #0
    c5fa:	d1f1      	bne.n	c5e0 <__sfp+0x20>
    c5fc:	230c      	movs	r3, #12
    c5fe:	603b      	str	r3, [r7, #0]
    c600:	4604      	mov	r4, r0
    c602:	4620      	mov	r0, r4
    c604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c606:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c60a:	81e3      	strh	r3, [r4, #14]
    c60c:	2301      	movs	r3, #1
    c60e:	81a3      	strh	r3, [r4, #12]
    c610:	6665      	str	r5, [r4, #100]	; 0x64
    c612:	6025      	str	r5, [r4, #0]
    c614:	60a5      	str	r5, [r4, #8]
    c616:	6065      	str	r5, [r4, #4]
    c618:	6125      	str	r5, [r4, #16]
    c61a:	6165      	str	r5, [r4, #20]
    c61c:	61a5      	str	r5, [r4, #24]
    c61e:	2208      	movs	r2, #8
    c620:	4629      	mov	r1, r5
    c622:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c626:	f7ff fbc6 	bl	bdb6 <memset>
    c62a:	6365      	str	r5, [r4, #52]	; 0x34
    c62c:	63a5      	str	r5, [r4, #56]	; 0x38
    c62e:	64a5      	str	r5, [r4, #72]	; 0x48
    c630:	64e5      	str	r5, [r4, #76]	; 0x4c
    c632:	e7e6      	b.n	c602 <__sfp+0x42>
    c634:	0000dd54 	.word	0x0000dd54

0000c638 <_fwalk_reent>:
    c638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c63c:	4680      	mov	r8, r0
    c63e:	4689      	mov	r9, r1
    c640:	f100 0448 	add.w	r4, r0, #72	; 0x48
    c644:	2600      	movs	r6, #0
    c646:	b914      	cbnz	r4, c64e <_fwalk_reent+0x16>
    c648:	4630      	mov	r0, r6
    c64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c64e:	68a5      	ldr	r5, [r4, #8]
    c650:	6867      	ldr	r7, [r4, #4]
    c652:	3f01      	subs	r7, #1
    c654:	d501      	bpl.n	c65a <_fwalk_reent+0x22>
    c656:	6824      	ldr	r4, [r4, #0]
    c658:	e7f5      	b.n	c646 <_fwalk_reent+0xe>
    c65a:	89ab      	ldrh	r3, [r5, #12]
    c65c:	2b01      	cmp	r3, #1
    c65e:	d907      	bls.n	c670 <_fwalk_reent+0x38>
    c660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c664:	3301      	adds	r3, #1
    c666:	d003      	beq.n	c670 <_fwalk_reent+0x38>
    c668:	4629      	mov	r1, r5
    c66a:	4640      	mov	r0, r8
    c66c:	47c8      	blx	r9
    c66e:	4306      	orrs	r6, r0
    c670:	3568      	adds	r5, #104	; 0x68
    c672:	e7ee      	b.n	c652 <_fwalk_reent+0x1a>

0000c674 <__swhatbuf_r>:
    c674:	b570      	push	{r4, r5, r6, lr}
    c676:	460e      	mov	r6, r1
    c678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c67c:	2900      	cmp	r1, #0
    c67e:	b090      	sub	sp, #64	; 0x40
    c680:	4614      	mov	r4, r2
    c682:	461d      	mov	r5, r3
    c684:	da07      	bge.n	c696 <__swhatbuf_r+0x22>
    c686:	2300      	movs	r3, #0
    c688:	602b      	str	r3, [r5, #0]
    c68a:	89b3      	ldrh	r3, [r6, #12]
    c68c:	061a      	lsls	r2, r3, #24
    c68e:	d410      	bmi.n	c6b2 <__swhatbuf_r+0x3e>
    c690:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c694:	e00e      	b.n	c6b4 <__swhatbuf_r+0x40>
    c696:	aa01      	add	r2, sp, #4
    c698:	f000 fcdc 	bl	d054 <_fstat_r>
    c69c:	2800      	cmp	r0, #0
    c69e:	dbf2      	blt.n	c686 <__swhatbuf_r+0x12>
    c6a0:	9a02      	ldr	r2, [sp, #8]
    c6a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    c6a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    c6aa:	425a      	negs	r2, r3
    c6ac:	415a      	adcs	r2, r3
    c6ae:	602a      	str	r2, [r5, #0]
    c6b0:	e7ee      	b.n	c690 <__swhatbuf_r+0x1c>
    c6b2:	2340      	movs	r3, #64	; 0x40
    c6b4:	2000      	movs	r0, #0
    c6b6:	6023      	str	r3, [r4, #0]
    c6b8:	b010      	add	sp, #64	; 0x40
    c6ba:	bd70      	pop	{r4, r5, r6, pc}

0000c6bc <__smakebuf_r>:
    c6bc:	898b      	ldrh	r3, [r1, #12]
    c6be:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c6c0:	079d      	lsls	r5, r3, #30
    c6c2:	4606      	mov	r6, r0
    c6c4:	460c      	mov	r4, r1
    c6c6:	d507      	bpl.n	c6d8 <__smakebuf_r+0x1c>
    c6c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c6cc:	6023      	str	r3, [r4, #0]
    c6ce:	6123      	str	r3, [r4, #16]
    c6d0:	2301      	movs	r3, #1
    c6d2:	6163      	str	r3, [r4, #20]
    c6d4:	b002      	add	sp, #8
    c6d6:	bd70      	pop	{r4, r5, r6, pc}
    c6d8:	ab01      	add	r3, sp, #4
    c6da:	466a      	mov	r2, sp
    c6dc:	f7ff ffca 	bl	c674 <__swhatbuf_r>
    c6e0:	9900      	ldr	r1, [sp, #0]
    c6e2:	4605      	mov	r5, r0
    c6e4:	4630      	mov	r0, r6
    c6e6:	f7ff fbbd 	bl	be64 <_malloc_r>
    c6ea:	b948      	cbnz	r0, c700 <__smakebuf_r+0x44>
    c6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c6f0:	059a      	lsls	r2, r3, #22
    c6f2:	d4ef      	bmi.n	c6d4 <__smakebuf_r+0x18>
    c6f4:	f023 0303 	bic.w	r3, r3, #3
    c6f8:	f043 0302 	orr.w	r3, r3, #2
    c6fc:	81a3      	strh	r3, [r4, #12]
    c6fe:	e7e3      	b.n	c6c8 <__smakebuf_r+0xc>
    c700:	4b0d      	ldr	r3, [pc, #52]	; (c738 <__smakebuf_r+0x7c>)
    c702:	62b3      	str	r3, [r6, #40]	; 0x28
    c704:	89a3      	ldrh	r3, [r4, #12]
    c706:	6020      	str	r0, [r4, #0]
    c708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c70c:	81a3      	strh	r3, [r4, #12]
    c70e:	9b00      	ldr	r3, [sp, #0]
    c710:	6163      	str	r3, [r4, #20]
    c712:	9b01      	ldr	r3, [sp, #4]
    c714:	6120      	str	r0, [r4, #16]
    c716:	b15b      	cbz	r3, c730 <__smakebuf_r+0x74>
    c718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c71c:	4630      	mov	r0, r6
    c71e:	f000 fcab 	bl	d078 <_isatty_r>
    c722:	b128      	cbz	r0, c730 <__smakebuf_r+0x74>
    c724:	89a3      	ldrh	r3, [r4, #12]
    c726:	f023 0303 	bic.w	r3, r3, #3
    c72a:	f043 0301 	orr.w	r3, r3, #1
    c72e:	81a3      	strh	r3, [r4, #12]
    c730:	89a3      	ldrh	r3, [r4, #12]
    c732:	431d      	orrs	r5, r3
    c734:	81a5      	strh	r5, [r4, #12]
    c736:	e7cd      	b.n	c6d4 <__smakebuf_r+0x18>
    c738:	0000c4e1 	.word	0x0000c4e1

0000c73c <__malloc_lock>:
    c73c:	4770      	bx	lr

0000c73e <__malloc_unlock>:
    c73e:	4770      	bx	lr

0000c740 <__ssputs_r>:
    c740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c744:	688e      	ldr	r6, [r1, #8]
    c746:	429e      	cmp	r6, r3
    c748:	4682      	mov	sl, r0
    c74a:	460c      	mov	r4, r1
    c74c:	4691      	mov	r9, r2
    c74e:	4698      	mov	r8, r3
    c750:	d835      	bhi.n	c7be <__ssputs_r+0x7e>
    c752:	898a      	ldrh	r2, [r1, #12]
    c754:	f412 6f90 	tst.w	r2, #1152	; 0x480
    c758:	d031      	beq.n	c7be <__ssputs_r+0x7e>
    c75a:	6825      	ldr	r5, [r4, #0]
    c75c:	6909      	ldr	r1, [r1, #16]
    c75e:	1a6f      	subs	r7, r5, r1
    c760:	6965      	ldr	r5, [r4, #20]
    c762:	2302      	movs	r3, #2
    c764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c768:	fb95 f5f3 	sdiv	r5, r5, r3
    c76c:	f108 0301 	add.w	r3, r8, #1
    c770:	443b      	add	r3, r7
    c772:	429d      	cmp	r5, r3
    c774:	bf38      	it	cc
    c776:	461d      	movcc	r5, r3
    c778:	0553      	lsls	r3, r2, #21
    c77a:	d531      	bpl.n	c7e0 <__ssputs_r+0xa0>
    c77c:	4629      	mov	r1, r5
    c77e:	f7ff fb71 	bl	be64 <_malloc_r>
    c782:	4606      	mov	r6, r0
    c784:	b950      	cbnz	r0, c79c <__ssputs_r+0x5c>
    c786:	230c      	movs	r3, #12
    c788:	f8ca 3000 	str.w	r3, [sl]
    c78c:	89a3      	ldrh	r3, [r4, #12]
    c78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c792:	81a3      	strh	r3, [r4, #12]
    c794:	f04f 30ff 	mov.w	r0, #4294967295
    c798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c79c:	463a      	mov	r2, r7
    c79e:	6921      	ldr	r1, [r4, #16]
    c7a0:	f7ff fafe 	bl	bda0 <memcpy>
    c7a4:	89a3      	ldrh	r3, [r4, #12]
    c7a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    c7aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c7ae:	81a3      	strh	r3, [r4, #12]
    c7b0:	6126      	str	r6, [r4, #16]
    c7b2:	6165      	str	r5, [r4, #20]
    c7b4:	443e      	add	r6, r7
    c7b6:	1bed      	subs	r5, r5, r7
    c7b8:	6026      	str	r6, [r4, #0]
    c7ba:	60a5      	str	r5, [r4, #8]
    c7bc:	4646      	mov	r6, r8
    c7be:	4546      	cmp	r6, r8
    c7c0:	bf28      	it	cs
    c7c2:	4646      	movcs	r6, r8
    c7c4:	4632      	mov	r2, r6
    c7c6:	4649      	mov	r1, r9
    c7c8:	6820      	ldr	r0, [r4, #0]
    c7ca:	f000 fcc9 	bl	d160 <memmove>
    c7ce:	68a3      	ldr	r3, [r4, #8]
    c7d0:	1b9b      	subs	r3, r3, r6
    c7d2:	60a3      	str	r3, [r4, #8]
    c7d4:	6823      	ldr	r3, [r4, #0]
    c7d6:	441e      	add	r6, r3
    c7d8:	6026      	str	r6, [r4, #0]
    c7da:	2000      	movs	r0, #0
    c7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7e0:	462a      	mov	r2, r5
    c7e2:	f000 fcd7 	bl	d194 <_realloc_r>
    c7e6:	4606      	mov	r6, r0
    c7e8:	2800      	cmp	r0, #0
    c7ea:	d1e1      	bne.n	c7b0 <__ssputs_r+0x70>
    c7ec:	6921      	ldr	r1, [r4, #16]
    c7ee:	4650      	mov	r0, sl
    c7f0:	f7ff faea 	bl	bdc8 <_free_r>
    c7f4:	e7c7      	b.n	c786 <__ssputs_r+0x46>
	...

0000c7f8 <_svfiprintf_r>:
    c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7fc:	b09d      	sub	sp, #116	; 0x74
    c7fe:	4680      	mov	r8, r0
    c800:	9303      	str	r3, [sp, #12]
    c802:	898b      	ldrh	r3, [r1, #12]
    c804:	061c      	lsls	r4, r3, #24
    c806:	460d      	mov	r5, r1
    c808:	4616      	mov	r6, r2
    c80a:	d50f      	bpl.n	c82c <_svfiprintf_r+0x34>
    c80c:	690b      	ldr	r3, [r1, #16]
    c80e:	b96b      	cbnz	r3, c82c <_svfiprintf_r+0x34>
    c810:	2140      	movs	r1, #64	; 0x40
    c812:	f7ff fb27 	bl	be64 <_malloc_r>
    c816:	6028      	str	r0, [r5, #0]
    c818:	6128      	str	r0, [r5, #16]
    c81a:	b928      	cbnz	r0, c828 <_svfiprintf_r+0x30>
    c81c:	230c      	movs	r3, #12
    c81e:	f8c8 3000 	str.w	r3, [r8]
    c822:	f04f 30ff 	mov.w	r0, #4294967295
    c826:	e0c5      	b.n	c9b4 <_svfiprintf_r+0x1bc>
    c828:	2340      	movs	r3, #64	; 0x40
    c82a:	616b      	str	r3, [r5, #20]
    c82c:	2300      	movs	r3, #0
    c82e:	9309      	str	r3, [sp, #36]	; 0x24
    c830:	2320      	movs	r3, #32
    c832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c836:	2330      	movs	r3, #48	; 0x30
    c838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c83c:	f04f 0b01 	mov.w	fp, #1
    c840:	4637      	mov	r7, r6
    c842:	463c      	mov	r4, r7
    c844:	f814 3b01 	ldrb.w	r3, [r4], #1
    c848:	2b00      	cmp	r3, #0
    c84a:	d13c      	bne.n	c8c6 <_svfiprintf_r+0xce>
    c84c:	ebb7 0a06 	subs.w	sl, r7, r6
    c850:	d00b      	beq.n	c86a <_svfiprintf_r+0x72>
    c852:	4653      	mov	r3, sl
    c854:	4632      	mov	r2, r6
    c856:	4629      	mov	r1, r5
    c858:	4640      	mov	r0, r8
    c85a:	f7ff ff71 	bl	c740 <__ssputs_r>
    c85e:	3001      	adds	r0, #1
    c860:	f000 80a3 	beq.w	c9aa <_svfiprintf_r+0x1b2>
    c864:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c866:	4453      	add	r3, sl
    c868:	9309      	str	r3, [sp, #36]	; 0x24
    c86a:	783b      	ldrb	r3, [r7, #0]
    c86c:	2b00      	cmp	r3, #0
    c86e:	f000 809c 	beq.w	c9aa <_svfiprintf_r+0x1b2>
    c872:	2300      	movs	r3, #0
    c874:	f04f 32ff 	mov.w	r2, #4294967295
    c878:	9304      	str	r3, [sp, #16]
    c87a:	9307      	str	r3, [sp, #28]
    c87c:	9205      	str	r2, [sp, #20]
    c87e:	9306      	str	r3, [sp, #24]
    c880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c884:	931a      	str	r3, [sp, #104]	; 0x68
    c886:	2205      	movs	r2, #5
    c888:	7821      	ldrb	r1, [r4, #0]
    c88a:	4850      	ldr	r0, [pc, #320]	; (c9cc <_svfiprintf_r+0x1d4>)
    c88c:	f000 fc18 	bl	d0c0 <memchr>
    c890:	1c67      	adds	r7, r4, #1
    c892:	9b04      	ldr	r3, [sp, #16]
    c894:	b9d8      	cbnz	r0, c8ce <_svfiprintf_r+0xd6>
    c896:	06d9      	lsls	r1, r3, #27
    c898:	bf44      	itt	mi
    c89a:	2220      	movmi	r2, #32
    c89c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c8a0:	071a      	lsls	r2, r3, #28
    c8a2:	bf44      	itt	mi
    c8a4:	222b      	movmi	r2, #43	; 0x2b
    c8a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c8aa:	7822      	ldrb	r2, [r4, #0]
    c8ac:	2a2a      	cmp	r2, #42	; 0x2a
    c8ae:	d016      	beq.n	c8de <_svfiprintf_r+0xe6>
    c8b0:	9a07      	ldr	r2, [sp, #28]
    c8b2:	2100      	movs	r1, #0
    c8b4:	200a      	movs	r0, #10
    c8b6:	4627      	mov	r7, r4
    c8b8:	3401      	adds	r4, #1
    c8ba:	783b      	ldrb	r3, [r7, #0]
    c8bc:	3b30      	subs	r3, #48	; 0x30
    c8be:	2b09      	cmp	r3, #9
    c8c0:	d951      	bls.n	c966 <_svfiprintf_r+0x16e>
    c8c2:	b1c9      	cbz	r1, c8f8 <_svfiprintf_r+0x100>
    c8c4:	e011      	b.n	c8ea <_svfiprintf_r+0xf2>
    c8c6:	2b25      	cmp	r3, #37	; 0x25
    c8c8:	d0c0      	beq.n	c84c <_svfiprintf_r+0x54>
    c8ca:	4627      	mov	r7, r4
    c8cc:	e7b9      	b.n	c842 <_svfiprintf_r+0x4a>
    c8ce:	4a3f      	ldr	r2, [pc, #252]	; (c9cc <_svfiprintf_r+0x1d4>)
    c8d0:	1a80      	subs	r0, r0, r2
    c8d2:	fa0b f000 	lsl.w	r0, fp, r0
    c8d6:	4318      	orrs	r0, r3
    c8d8:	9004      	str	r0, [sp, #16]
    c8da:	463c      	mov	r4, r7
    c8dc:	e7d3      	b.n	c886 <_svfiprintf_r+0x8e>
    c8de:	9a03      	ldr	r2, [sp, #12]
    c8e0:	1d11      	adds	r1, r2, #4
    c8e2:	6812      	ldr	r2, [r2, #0]
    c8e4:	9103      	str	r1, [sp, #12]
    c8e6:	2a00      	cmp	r2, #0
    c8e8:	db01      	blt.n	c8ee <_svfiprintf_r+0xf6>
    c8ea:	9207      	str	r2, [sp, #28]
    c8ec:	e004      	b.n	c8f8 <_svfiprintf_r+0x100>
    c8ee:	4252      	negs	r2, r2
    c8f0:	f043 0302 	orr.w	r3, r3, #2
    c8f4:	9207      	str	r2, [sp, #28]
    c8f6:	9304      	str	r3, [sp, #16]
    c8f8:	783b      	ldrb	r3, [r7, #0]
    c8fa:	2b2e      	cmp	r3, #46	; 0x2e
    c8fc:	d10e      	bne.n	c91c <_svfiprintf_r+0x124>
    c8fe:	787b      	ldrb	r3, [r7, #1]
    c900:	2b2a      	cmp	r3, #42	; 0x2a
    c902:	f107 0101 	add.w	r1, r7, #1
    c906:	d132      	bne.n	c96e <_svfiprintf_r+0x176>
    c908:	9b03      	ldr	r3, [sp, #12]
    c90a:	1d1a      	adds	r2, r3, #4
    c90c:	681b      	ldr	r3, [r3, #0]
    c90e:	9203      	str	r2, [sp, #12]
    c910:	2b00      	cmp	r3, #0
    c912:	bfb8      	it	lt
    c914:	f04f 33ff 	movlt.w	r3, #4294967295
    c918:	3702      	adds	r7, #2
    c91a:	9305      	str	r3, [sp, #20]
    c91c:	4c2c      	ldr	r4, [pc, #176]	; (c9d0 <_svfiprintf_r+0x1d8>)
    c91e:	7839      	ldrb	r1, [r7, #0]
    c920:	2203      	movs	r2, #3
    c922:	4620      	mov	r0, r4
    c924:	f000 fbcc 	bl	d0c0 <memchr>
    c928:	b138      	cbz	r0, c93a <_svfiprintf_r+0x142>
    c92a:	2340      	movs	r3, #64	; 0x40
    c92c:	1b00      	subs	r0, r0, r4
    c92e:	fa03 f000 	lsl.w	r0, r3, r0
    c932:	9b04      	ldr	r3, [sp, #16]
    c934:	4303      	orrs	r3, r0
    c936:	9304      	str	r3, [sp, #16]
    c938:	3701      	adds	r7, #1
    c93a:	7839      	ldrb	r1, [r7, #0]
    c93c:	4825      	ldr	r0, [pc, #148]	; (c9d4 <_svfiprintf_r+0x1dc>)
    c93e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c942:	2206      	movs	r2, #6
    c944:	1c7e      	adds	r6, r7, #1
    c946:	f000 fbbb 	bl	d0c0 <memchr>
    c94a:	2800      	cmp	r0, #0
    c94c:	d035      	beq.n	c9ba <_svfiprintf_r+0x1c2>
    c94e:	4b22      	ldr	r3, [pc, #136]	; (c9d8 <_svfiprintf_r+0x1e0>)
    c950:	b9fb      	cbnz	r3, c992 <_svfiprintf_r+0x19a>
    c952:	9b03      	ldr	r3, [sp, #12]
    c954:	3307      	adds	r3, #7
    c956:	f023 0307 	bic.w	r3, r3, #7
    c95a:	3308      	adds	r3, #8
    c95c:	9303      	str	r3, [sp, #12]
    c95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c960:	444b      	add	r3, r9
    c962:	9309      	str	r3, [sp, #36]	; 0x24
    c964:	e76c      	b.n	c840 <_svfiprintf_r+0x48>
    c966:	fb00 3202 	mla	r2, r0, r2, r3
    c96a:	2101      	movs	r1, #1
    c96c:	e7a3      	b.n	c8b6 <_svfiprintf_r+0xbe>
    c96e:	2300      	movs	r3, #0
    c970:	9305      	str	r3, [sp, #20]
    c972:	4618      	mov	r0, r3
    c974:	240a      	movs	r4, #10
    c976:	460f      	mov	r7, r1
    c978:	3101      	adds	r1, #1
    c97a:	783a      	ldrb	r2, [r7, #0]
    c97c:	3a30      	subs	r2, #48	; 0x30
    c97e:	2a09      	cmp	r2, #9
    c980:	d903      	bls.n	c98a <_svfiprintf_r+0x192>
    c982:	2b00      	cmp	r3, #0
    c984:	d0ca      	beq.n	c91c <_svfiprintf_r+0x124>
    c986:	9005      	str	r0, [sp, #20]
    c988:	e7c8      	b.n	c91c <_svfiprintf_r+0x124>
    c98a:	fb04 2000 	mla	r0, r4, r0, r2
    c98e:	2301      	movs	r3, #1
    c990:	e7f1      	b.n	c976 <_svfiprintf_r+0x17e>
    c992:	ab03      	add	r3, sp, #12
    c994:	9300      	str	r3, [sp, #0]
    c996:	462a      	mov	r2, r5
    c998:	4b10      	ldr	r3, [pc, #64]	; (c9dc <_svfiprintf_r+0x1e4>)
    c99a:	a904      	add	r1, sp, #16
    c99c:	4640      	mov	r0, r8
    c99e:	f3af 8000 	nop.w
    c9a2:	f1b0 3fff 	cmp.w	r0, #4294967295
    c9a6:	4681      	mov	r9, r0
    c9a8:	d1d9      	bne.n	c95e <_svfiprintf_r+0x166>
    c9aa:	89ab      	ldrh	r3, [r5, #12]
    c9ac:	065b      	lsls	r3, r3, #25
    c9ae:	f53f af38 	bmi.w	c822 <_svfiprintf_r+0x2a>
    c9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    c9b4:	b01d      	add	sp, #116	; 0x74
    c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9ba:	ab03      	add	r3, sp, #12
    c9bc:	9300      	str	r3, [sp, #0]
    c9be:	462a      	mov	r2, r5
    c9c0:	4b06      	ldr	r3, [pc, #24]	; (c9dc <_svfiprintf_r+0x1e4>)
    c9c2:	a904      	add	r1, sp, #16
    c9c4:	4640      	mov	r0, r8
    c9c6:	f000 f9bf 	bl	cd48 <_printf_i>
    c9ca:	e7ea      	b.n	c9a2 <_svfiprintf_r+0x1aa>
    c9cc:	0000ddb8 	.word	0x0000ddb8
    c9d0:	0000ddbe 	.word	0x0000ddbe
    c9d4:	0000ddc2 	.word	0x0000ddc2
    c9d8:	00000000 	.word	0x00000000
    c9dc:	0000c741 	.word	0x0000c741

0000c9e0 <__sfputc_r>:
    c9e0:	6893      	ldr	r3, [r2, #8]
    c9e2:	3b01      	subs	r3, #1
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	b410      	push	{r4}
    c9e8:	6093      	str	r3, [r2, #8]
    c9ea:	da08      	bge.n	c9fe <__sfputc_r+0x1e>
    c9ec:	6994      	ldr	r4, [r2, #24]
    c9ee:	42a3      	cmp	r3, r4
    c9f0:	db02      	blt.n	c9f8 <__sfputc_r+0x18>
    c9f2:	b2cb      	uxtb	r3, r1
    c9f4:	2b0a      	cmp	r3, #10
    c9f6:	d102      	bne.n	c9fe <__sfputc_r+0x1e>
    c9f8:	bc10      	pop	{r4}
    c9fa:	f7ff bbff 	b.w	c1fc <__swbuf_r>
    c9fe:	6813      	ldr	r3, [r2, #0]
    ca00:	1c58      	adds	r0, r3, #1
    ca02:	6010      	str	r0, [r2, #0]
    ca04:	7019      	strb	r1, [r3, #0]
    ca06:	b2c8      	uxtb	r0, r1
    ca08:	bc10      	pop	{r4}
    ca0a:	4770      	bx	lr

0000ca0c <__sfputs_r>:
    ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca0e:	4606      	mov	r6, r0
    ca10:	460f      	mov	r7, r1
    ca12:	4614      	mov	r4, r2
    ca14:	18d5      	adds	r5, r2, r3
    ca16:	42ac      	cmp	r4, r5
    ca18:	d101      	bne.n	ca1e <__sfputs_r+0x12>
    ca1a:	2000      	movs	r0, #0
    ca1c:	e007      	b.n	ca2e <__sfputs_r+0x22>
    ca1e:	463a      	mov	r2, r7
    ca20:	f814 1b01 	ldrb.w	r1, [r4], #1
    ca24:	4630      	mov	r0, r6
    ca26:	f7ff ffdb 	bl	c9e0 <__sfputc_r>
    ca2a:	1c43      	adds	r3, r0, #1
    ca2c:	d1f3      	bne.n	ca16 <__sfputs_r+0xa>
    ca2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ca30 <_vfiprintf_r>:
    ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca34:	b09d      	sub	sp, #116	; 0x74
    ca36:	460c      	mov	r4, r1
    ca38:	4617      	mov	r7, r2
    ca3a:	9303      	str	r3, [sp, #12]
    ca3c:	4606      	mov	r6, r0
    ca3e:	b118      	cbz	r0, ca48 <_vfiprintf_r+0x18>
    ca40:	6983      	ldr	r3, [r0, #24]
    ca42:	b90b      	cbnz	r3, ca48 <_vfiprintf_r+0x18>
    ca44:	f7ff fd8c 	bl	c560 <__sinit>
    ca48:	4b7c      	ldr	r3, [pc, #496]	; (cc3c <_vfiprintf_r+0x20c>)
    ca4a:	429c      	cmp	r4, r3
    ca4c:	d157      	bne.n	cafe <_vfiprintf_r+0xce>
    ca4e:	6874      	ldr	r4, [r6, #4]
    ca50:	89a3      	ldrh	r3, [r4, #12]
    ca52:	0718      	lsls	r0, r3, #28
    ca54:	d55d      	bpl.n	cb12 <_vfiprintf_r+0xe2>
    ca56:	6923      	ldr	r3, [r4, #16]
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d05a      	beq.n	cb12 <_vfiprintf_r+0xe2>
    ca5c:	2300      	movs	r3, #0
    ca5e:	9309      	str	r3, [sp, #36]	; 0x24
    ca60:	2320      	movs	r3, #32
    ca62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    ca66:	2330      	movs	r3, #48	; 0x30
    ca68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    ca6c:	f04f 0b01 	mov.w	fp, #1
    ca70:	46b8      	mov	r8, r7
    ca72:	4645      	mov	r5, r8
    ca74:	f815 3b01 	ldrb.w	r3, [r5], #1
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d155      	bne.n	cb28 <_vfiprintf_r+0xf8>
    ca7c:	ebb8 0a07 	subs.w	sl, r8, r7
    ca80:	d00b      	beq.n	ca9a <_vfiprintf_r+0x6a>
    ca82:	4653      	mov	r3, sl
    ca84:	463a      	mov	r2, r7
    ca86:	4621      	mov	r1, r4
    ca88:	4630      	mov	r0, r6
    ca8a:	f7ff ffbf 	bl	ca0c <__sfputs_r>
    ca8e:	3001      	adds	r0, #1
    ca90:	f000 80c4 	beq.w	cc1c <_vfiprintf_r+0x1ec>
    ca94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca96:	4453      	add	r3, sl
    ca98:	9309      	str	r3, [sp, #36]	; 0x24
    ca9a:	f898 3000 	ldrb.w	r3, [r8]
    ca9e:	2b00      	cmp	r3, #0
    caa0:	f000 80bc 	beq.w	cc1c <_vfiprintf_r+0x1ec>
    caa4:	2300      	movs	r3, #0
    caa6:	f04f 32ff 	mov.w	r2, #4294967295
    caaa:	9304      	str	r3, [sp, #16]
    caac:	9307      	str	r3, [sp, #28]
    caae:	9205      	str	r2, [sp, #20]
    cab0:	9306      	str	r3, [sp, #24]
    cab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    cab6:	931a      	str	r3, [sp, #104]	; 0x68
    cab8:	2205      	movs	r2, #5
    caba:	7829      	ldrb	r1, [r5, #0]
    cabc:	4860      	ldr	r0, [pc, #384]	; (cc40 <_vfiprintf_r+0x210>)
    cabe:	f000 faff 	bl	d0c0 <memchr>
    cac2:	f105 0801 	add.w	r8, r5, #1
    cac6:	9b04      	ldr	r3, [sp, #16]
    cac8:	2800      	cmp	r0, #0
    caca:	d131      	bne.n	cb30 <_vfiprintf_r+0x100>
    cacc:	06d9      	lsls	r1, r3, #27
    cace:	bf44      	itt	mi
    cad0:	2220      	movmi	r2, #32
    cad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cad6:	071a      	lsls	r2, r3, #28
    cad8:	bf44      	itt	mi
    cada:	222b      	movmi	r2, #43	; 0x2b
    cadc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cae0:	782a      	ldrb	r2, [r5, #0]
    cae2:	2a2a      	cmp	r2, #42	; 0x2a
    cae4:	d02c      	beq.n	cb40 <_vfiprintf_r+0x110>
    cae6:	9a07      	ldr	r2, [sp, #28]
    cae8:	2100      	movs	r1, #0
    caea:	200a      	movs	r0, #10
    caec:	46a8      	mov	r8, r5
    caee:	3501      	adds	r5, #1
    caf0:	f898 3000 	ldrb.w	r3, [r8]
    caf4:	3b30      	subs	r3, #48	; 0x30
    caf6:	2b09      	cmp	r3, #9
    caf8:	d96d      	bls.n	cbd6 <_vfiprintf_r+0x1a6>
    cafa:	b371      	cbz	r1, cb5a <_vfiprintf_r+0x12a>
    cafc:	e026      	b.n	cb4c <_vfiprintf_r+0x11c>
    cafe:	4b51      	ldr	r3, [pc, #324]	; (cc44 <_vfiprintf_r+0x214>)
    cb00:	429c      	cmp	r4, r3
    cb02:	d101      	bne.n	cb08 <_vfiprintf_r+0xd8>
    cb04:	68b4      	ldr	r4, [r6, #8]
    cb06:	e7a3      	b.n	ca50 <_vfiprintf_r+0x20>
    cb08:	4b4f      	ldr	r3, [pc, #316]	; (cc48 <_vfiprintf_r+0x218>)
    cb0a:	429c      	cmp	r4, r3
    cb0c:	bf08      	it	eq
    cb0e:	68f4      	ldreq	r4, [r6, #12]
    cb10:	e79e      	b.n	ca50 <_vfiprintf_r+0x20>
    cb12:	4621      	mov	r1, r4
    cb14:	4630      	mov	r0, r6
    cb16:	f7ff fbc3 	bl	c2a0 <__swsetup_r>
    cb1a:	2800      	cmp	r0, #0
    cb1c:	d09e      	beq.n	ca5c <_vfiprintf_r+0x2c>
    cb1e:	f04f 30ff 	mov.w	r0, #4294967295
    cb22:	b01d      	add	sp, #116	; 0x74
    cb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb28:	2b25      	cmp	r3, #37	; 0x25
    cb2a:	d0a7      	beq.n	ca7c <_vfiprintf_r+0x4c>
    cb2c:	46a8      	mov	r8, r5
    cb2e:	e7a0      	b.n	ca72 <_vfiprintf_r+0x42>
    cb30:	4a43      	ldr	r2, [pc, #268]	; (cc40 <_vfiprintf_r+0x210>)
    cb32:	1a80      	subs	r0, r0, r2
    cb34:	fa0b f000 	lsl.w	r0, fp, r0
    cb38:	4318      	orrs	r0, r3
    cb3a:	9004      	str	r0, [sp, #16]
    cb3c:	4645      	mov	r5, r8
    cb3e:	e7bb      	b.n	cab8 <_vfiprintf_r+0x88>
    cb40:	9a03      	ldr	r2, [sp, #12]
    cb42:	1d11      	adds	r1, r2, #4
    cb44:	6812      	ldr	r2, [r2, #0]
    cb46:	9103      	str	r1, [sp, #12]
    cb48:	2a00      	cmp	r2, #0
    cb4a:	db01      	blt.n	cb50 <_vfiprintf_r+0x120>
    cb4c:	9207      	str	r2, [sp, #28]
    cb4e:	e004      	b.n	cb5a <_vfiprintf_r+0x12a>
    cb50:	4252      	negs	r2, r2
    cb52:	f043 0302 	orr.w	r3, r3, #2
    cb56:	9207      	str	r2, [sp, #28]
    cb58:	9304      	str	r3, [sp, #16]
    cb5a:	f898 3000 	ldrb.w	r3, [r8]
    cb5e:	2b2e      	cmp	r3, #46	; 0x2e
    cb60:	d110      	bne.n	cb84 <_vfiprintf_r+0x154>
    cb62:	f898 3001 	ldrb.w	r3, [r8, #1]
    cb66:	2b2a      	cmp	r3, #42	; 0x2a
    cb68:	f108 0101 	add.w	r1, r8, #1
    cb6c:	d137      	bne.n	cbde <_vfiprintf_r+0x1ae>
    cb6e:	9b03      	ldr	r3, [sp, #12]
    cb70:	1d1a      	adds	r2, r3, #4
    cb72:	681b      	ldr	r3, [r3, #0]
    cb74:	9203      	str	r2, [sp, #12]
    cb76:	2b00      	cmp	r3, #0
    cb78:	bfb8      	it	lt
    cb7a:	f04f 33ff 	movlt.w	r3, #4294967295
    cb7e:	f108 0802 	add.w	r8, r8, #2
    cb82:	9305      	str	r3, [sp, #20]
    cb84:	4d31      	ldr	r5, [pc, #196]	; (cc4c <_vfiprintf_r+0x21c>)
    cb86:	f898 1000 	ldrb.w	r1, [r8]
    cb8a:	2203      	movs	r2, #3
    cb8c:	4628      	mov	r0, r5
    cb8e:	f000 fa97 	bl	d0c0 <memchr>
    cb92:	b140      	cbz	r0, cba6 <_vfiprintf_r+0x176>
    cb94:	2340      	movs	r3, #64	; 0x40
    cb96:	1b40      	subs	r0, r0, r5
    cb98:	fa03 f000 	lsl.w	r0, r3, r0
    cb9c:	9b04      	ldr	r3, [sp, #16]
    cb9e:	4303      	orrs	r3, r0
    cba0:	9304      	str	r3, [sp, #16]
    cba2:	f108 0801 	add.w	r8, r8, #1
    cba6:	f898 1000 	ldrb.w	r1, [r8]
    cbaa:	4829      	ldr	r0, [pc, #164]	; (cc50 <_vfiprintf_r+0x220>)
    cbac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    cbb0:	2206      	movs	r2, #6
    cbb2:	f108 0701 	add.w	r7, r8, #1
    cbb6:	f000 fa83 	bl	d0c0 <memchr>
    cbba:	2800      	cmp	r0, #0
    cbbc:	d034      	beq.n	cc28 <_vfiprintf_r+0x1f8>
    cbbe:	4b25      	ldr	r3, [pc, #148]	; (cc54 <_vfiprintf_r+0x224>)
    cbc0:	bb03      	cbnz	r3, cc04 <_vfiprintf_r+0x1d4>
    cbc2:	9b03      	ldr	r3, [sp, #12]
    cbc4:	3307      	adds	r3, #7
    cbc6:	f023 0307 	bic.w	r3, r3, #7
    cbca:	3308      	adds	r3, #8
    cbcc:	9303      	str	r3, [sp, #12]
    cbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbd0:	444b      	add	r3, r9
    cbd2:	9309      	str	r3, [sp, #36]	; 0x24
    cbd4:	e74c      	b.n	ca70 <_vfiprintf_r+0x40>
    cbd6:	fb00 3202 	mla	r2, r0, r2, r3
    cbda:	2101      	movs	r1, #1
    cbdc:	e786      	b.n	caec <_vfiprintf_r+0xbc>
    cbde:	2300      	movs	r3, #0
    cbe0:	9305      	str	r3, [sp, #20]
    cbe2:	4618      	mov	r0, r3
    cbe4:	250a      	movs	r5, #10
    cbe6:	4688      	mov	r8, r1
    cbe8:	3101      	adds	r1, #1
    cbea:	f898 2000 	ldrb.w	r2, [r8]
    cbee:	3a30      	subs	r2, #48	; 0x30
    cbf0:	2a09      	cmp	r2, #9
    cbf2:	d903      	bls.n	cbfc <_vfiprintf_r+0x1cc>
    cbf4:	2b00      	cmp	r3, #0
    cbf6:	d0c5      	beq.n	cb84 <_vfiprintf_r+0x154>
    cbf8:	9005      	str	r0, [sp, #20]
    cbfa:	e7c3      	b.n	cb84 <_vfiprintf_r+0x154>
    cbfc:	fb05 2000 	mla	r0, r5, r0, r2
    cc00:	2301      	movs	r3, #1
    cc02:	e7f0      	b.n	cbe6 <_vfiprintf_r+0x1b6>
    cc04:	ab03      	add	r3, sp, #12
    cc06:	9300      	str	r3, [sp, #0]
    cc08:	4622      	mov	r2, r4
    cc0a:	4b13      	ldr	r3, [pc, #76]	; (cc58 <_vfiprintf_r+0x228>)
    cc0c:	a904      	add	r1, sp, #16
    cc0e:	4630      	mov	r0, r6
    cc10:	f3af 8000 	nop.w
    cc14:	f1b0 3fff 	cmp.w	r0, #4294967295
    cc18:	4681      	mov	r9, r0
    cc1a:	d1d8      	bne.n	cbce <_vfiprintf_r+0x19e>
    cc1c:	89a3      	ldrh	r3, [r4, #12]
    cc1e:	065b      	lsls	r3, r3, #25
    cc20:	f53f af7d 	bmi.w	cb1e <_vfiprintf_r+0xee>
    cc24:	9809      	ldr	r0, [sp, #36]	; 0x24
    cc26:	e77c      	b.n	cb22 <_vfiprintf_r+0xf2>
    cc28:	ab03      	add	r3, sp, #12
    cc2a:	9300      	str	r3, [sp, #0]
    cc2c:	4622      	mov	r2, r4
    cc2e:	4b0a      	ldr	r3, [pc, #40]	; (cc58 <_vfiprintf_r+0x228>)
    cc30:	a904      	add	r1, sp, #16
    cc32:	4630      	mov	r0, r6
    cc34:	f000 f888 	bl	cd48 <_printf_i>
    cc38:	e7ec      	b.n	cc14 <_vfiprintf_r+0x1e4>
    cc3a:	bf00      	nop
    cc3c:	0000dd78 	.word	0x0000dd78
    cc40:	0000ddb8 	.word	0x0000ddb8
    cc44:	0000dd98 	.word	0x0000dd98
    cc48:	0000dd58 	.word	0x0000dd58
    cc4c:	0000ddbe 	.word	0x0000ddbe
    cc50:	0000ddc2 	.word	0x0000ddc2
    cc54:	00000000 	.word	0x00000000
    cc58:	0000ca0d 	.word	0x0000ca0d

0000cc5c <_printf_common>:
    cc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc60:	4691      	mov	r9, r2
    cc62:	461f      	mov	r7, r3
    cc64:	688a      	ldr	r2, [r1, #8]
    cc66:	690b      	ldr	r3, [r1, #16]
    cc68:	f8dd 8020 	ldr.w	r8, [sp, #32]
    cc6c:	4293      	cmp	r3, r2
    cc6e:	bfb8      	it	lt
    cc70:	4613      	movlt	r3, r2
    cc72:	f8c9 3000 	str.w	r3, [r9]
    cc76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    cc7a:	4606      	mov	r6, r0
    cc7c:	460c      	mov	r4, r1
    cc7e:	b112      	cbz	r2, cc86 <_printf_common+0x2a>
    cc80:	3301      	adds	r3, #1
    cc82:	f8c9 3000 	str.w	r3, [r9]
    cc86:	6823      	ldr	r3, [r4, #0]
    cc88:	0699      	lsls	r1, r3, #26
    cc8a:	bf42      	ittt	mi
    cc8c:	f8d9 3000 	ldrmi.w	r3, [r9]
    cc90:	3302      	addmi	r3, #2
    cc92:	f8c9 3000 	strmi.w	r3, [r9]
    cc96:	6825      	ldr	r5, [r4, #0]
    cc98:	f015 0506 	ands.w	r5, r5, #6
    cc9c:	d107      	bne.n	ccae <_printf_common+0x52>
    cc9e:	f104 0a19 	add.w	sl, r4, #25
    cca2:	68e3      	ldr	r3, [r4, #12]
    cca4:	f8d9 2000 	ldr.w	r2, [r9]
    cca8:	1a9b      	subs	r3, r3, r2
    ccaa:	429d      	cmp	r5, r3
    ccac:	db29      	blt.n	cd02 <_printf_common+0xa6>
    ccae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    ccb2:	6822      	ldr	r2, [r4, #0]
    ccb4:	3300      	adds	r3, #0
    ccb6:	bf18      	it	ne
    ccb8:	2301      	movne	r3, #1
    ccba:	0692      	lsls	r2, r2, #26
    ccbc:	d42e      	bmi.n	cd1c <_printf_common+0xc0>
    ccbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
    ccc2:	4639      	mov	r1, r7
    ccc4:	4630      	mov	r0, r6
    ccc6:	47c0      	blx	r8
    ccc8:	3001      	adds	r0, #1
    ccca:	d021      	beq.n	cd10 <_printf_common+0xb4>
    cccc:	6823      	ldr	r3, [r4, #0]
    ccce:	68e5      	ldr	r5, [r4, #12]
    ccd0:	f8d9 2000 	ldr.w	r2, [r9]
    ccd4:	f003 0306 	and.w	r3, r3, #6
    ccd8:	2b04      	cmp	r3, #4
    ccda:	bf08      	it	eq
    ccdc:	1aad      	subeq	r5, r5, r2
    ccde:	68a3      	ldr	r3, [r4, #8]
    cce0:	6922      	ldr	r2, [r4, #16]
    cce2:	bf0c      	ite	eq
    cce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    cce8:	2500      	movne	r5, #0
    ccea:	4293      	cmp	r3, r2
    ccec:	bfc4      	itt	gt
    ccee:	1a9b      	subgt	r3, r3, r2
    ccf0:	18ed      	addgt	r5, r5, r3
    ccf2:	f04f 0900 	mov.w	r9, #0
    ccf6:	341a      	adds	r4, #26
    ccf8:	454d      	cmp	r5, r9
    ccfa:	d11b      	bne.n	cd34 <_printf_common+0xd8>
    ccfc:	2000      	movs	r0, #0
    ccfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd02:	2301      	movs	r3, #1
    cd04:	4652      	mov	r2, sl
    cd06:	4639      	mov	r1, r7
    cd08:	4630      	mov	r0, r6
    cd0a:	47c0      	blx	r8
    cd0c:	3001      	adds	r0, #1
    cd0e:	d103      	bne.n	cd18 <_printf_common+0xbc>
    cd10:	f04f 30ff 	mov.w	r0, #4294967295
    cd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd18:	3501      	adds	r5, #1
    cd1a:	e7c2      	b.n	cca2 <_printf_common+0x46>
    cd1c:	18e1      	adds	r1, r4, r3
    cd1e:	1c5a      	adds	r2, r3, #1
    cd20:	2030      	movs	r0, #48	; 0x30
    cd22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    cd26:	4422      	add	r2, r4
    cd28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    cd2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    cd30:	3302      	adds	r3, #2
    cd32:	e7c4      	b.n	ccbe <_printf_common+0x62>
    cd34:	2301      	movs	r3, #1
    cd36:	4622      	mov	r2, r4
    cd38:	4639      	mov	r1, r7
    cd3a:	4630      	mov	r0, r6
    cd3c:	47c0      	blx	r8
    cd3e:	3001      	adds	r0, #1
    cd40:	d0e6      	beq.n	cd10 <_printf_common+0xb4>
    cd42:	f109 0901 	add.w	r9, r9, #1
    cd46:	e7d7      	b.n	ccf8 <_printf_common+0x9c>

0000cd48 <_printf_i>:
    cd48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cd4c:	4617      	mov	r7, r2
    cd4e:	7e0a      	ldrb	r2, [r1, #24]
    cd50:	b085      	sub	sp, #20
    cd52:	2a6e      	cmp	r2, #110	; 0x6e
    cd54:	4698      	mov	r8, r3
    cd56:	4606      	mov	r6, r0
    cd58:	460c      	mov	r4, r1
    cd5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd5c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    cd60:	f000 80bc 	beq.w	cedc <_printf_i+0x194>
    cd64:	d81a      	bhi.n	cd9c <_printf_i+0x54>
    cd66:	2a63      	cmp	r2, #99	; 0x63
    cd68:	d02e      	beq.n	cdc8 <_printf_i+0x80>
    cd6a:	d80a      	bhi.n	cd82 <_printf_i+0x3a>
    cd6c:	2a00      	cmp	r2, #0
    cd6e:	f000 80c8 	beq.w	cf02 <_printf_i+0x1ba>
    cd72:	2a58      	cmp	r2, #88	; 0x58
    cd74:	f000 808a 	beq.w	ce8c <_printf_i+0x144>
    cd78:	f104 0542 	add.w	r5, r4, #66	; 0x42
    cd7c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    cd80:	e02a      	b.n	cdd8 <_printf_i+0x90>
    cd82:	2a64      	cmp	r2, #100	; 0x64
    cd84:	d001      	beq.n	cd8a <_printf_i+0x42>
    cd86:	2a69      	cmp	r2, #105	; 0x69
    cd88:	d1f6      	bne.n	cd78 <_printf_i+0x30>
    cd8a:	6821      	ldr	r1, [r4, #0]
    cd8c:	681a      	ldr	r2, [r3, #0]
    cd8e:	f011 0f80 	tst.w	r1, #128	; 0x80
    cd92:	d023      	beq.n	cddc <_printf_i+0x94>
    cd94:	1d11      	adds	r1, r2, #4
    cd96:	6019      	str	r1, [r3, #0]
    cd98:	6813      	ldr	r3, [r2, #0]
    cd9a:	e027      	b.n	cdec <_printf_i+0xa4>
    cd9c:	2a73      	cmp	r2, #115	; 0x73
    cd9e:	f000 80b4 	beq.w	cf0a <_printf_i+0x1c2>
    cda2:	d808      	bhi.n	cdb6 <_printf_i+0x6e>
    cda4:	2a6f      	cmp	r2, #111	; 0x6f
    cda6:	d02a      	beq.n	cdfe <_printf_i+0xb6>
    cda8:	2a70      	cmp	r2, #112	; 0x70
    cdaa:	d1e5      	bne.n	cd78 <_printf_i+0x30>
    cdac:	680a      	ldr	r2, [r1, #0]
    cdae:	f042 0220 	orr.w	r2, r2, #32
    cdb2:	600a      	str	r2, [r1, #0]
    cdb4:	e003      	b.n	cdbe <_printf_i+0x76>
    cdb6:	2a75      	cmp	r2, #117	; 0x75
    cdb8:	d021      	beq.n	cdfe <_printf_i+0xb6>
    cdba:	2a78      	cmp	r2, #120	; 0x78
    cdbc:	d1dc      	bne.n	cd78 <_printf_i+0x30>
    cdbe:	2278      	movs	r2, #120	; 0x78
    cdc0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    cdc4:	496e      	ldr	r1, [pc, #440]	; (cf80 <_printf_i+0x238>)
    cdc6:	e064      	b.n	ce92 <_printf_i+0x14a>
    cdc8:	681a      	ldr	r2, [r3, #0]
    cdca:	f101 0542 	add.w	r5, r1, #66	; 0x42
    cdce:	1d11      	adds	r1, r2, #4
    cdd0:	6019      	str	r1, [r3, #0]
    cdd2:	6813      	ldr	r3, [r2, #0]
    cdd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    cdd8:	2301      	movs	r3, #1
    cdda:	e0a3      	b.n	cf24 <_printf_i+0x1dc>
    cddc:	f011 0f40 	tst.w	r1, #64	; 0x40
    cde0:	f102 0104 	add.w	r1, r2, #4
    cde4:	6019      	str	r1, [r3, #0]
    cde6:	d0d7      	beq.n	cd98 <_printf_i+0x50>
    cde8:	f9b2 3000 	ldrsh.w	r3, [r2]
    cdec:	2b00      	cmp	r3, #0
    cdee:	da03      	bge.n	cdf8 <_printf_i+0xb0>
    cdf0:	222d      	movs	r2, #45	; 0x2d
    cdf2:	425b      	negs	r3, r3
    cdf4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    cdf8:	4962      	ldr	r1, [pc, #392]	; (cf84 <_printf_i+0x23c>)
    cdfa:	220a      	movs	r2, #10
    cdfc:	e017      	b.n	ce2e <_printf_i+0xe6>
    cdfe:	6820      	ldr	r0, [r4, #0]
    ce00:	6819      	ldr	r1, [r3, #0]
    ce02:	f010 0f80 	tst.w	r0, #128	; 0x80
    ce06:	d003      	beq.n	ce10 <_printf_i+0xc8>
    ce08:	1d08      	adds	r0, r1, #4
    ce0a:	6018      	str	r0, [r3, #0]
    ce0c:	680b      	ldr	r3, [r1, #0]
    ce0e:	e006      	b.n	ce1e <_printf_i+0xd6>
    ce10:	f010 0f40 	tst.w	r0, #64	; 0x40
    ce14:	f101 0004 	add.w	r0, r1, #4
    ce18:	6018      	str	r0, [r3, #0]
    ce1a:	d0f7      	beq.n	ce0c <_printf_i+0xc4>
    ce1c:	880b      	ldrh	r3, [r1, #0]
    ce1e:	4959      	ldr	r1, [pc, #356]	; (cf84 <_printf_i+0x23c>)
    ce20:	2a6f      	cmp	r2, #111	; 0x6f
    ce22:	bf14      	ite	ne
    ce24:	220a      	movne	r2, #10
    ce26:	2208      	moveq	r2, #8
    ce28:	2000      	movs	r0, #0
    ce2a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    ce2e:	6865      	ldr	r5, [r4, #4]
    ce30:	60a5      	str	r5, [r4, #8]
    ce32:	2d00      	cmp	r5, #0
    ce34:	f2c0 809c 	blt.w	cf70 <_printf_i+0x228>
    ce38:	6820      	ldr	r0, [r4, #0]
    ce3a:	f020 0004 	bic.w	r0, r0, #4
    ce3e:	6020      	str	r0, [r4, #0]
    ce40:	2b00      	cmp	r3, #0
    ce42:	d13f      	bne.n	cec4 <_printf_i+0x17c>
    ce44:	2d00      	cmp	r5, #0
    ce46:	f040 8095 	bne.w	cf74 <_printf_i+0x22c>
    ce4a:	4675      	mov	r5, lr
    ce4c:	2a08      	cmp	r2, #8
    ce4e:	d10b      	bne.n	ce68 <_printf_i+0x120>
    ce50:	6823      	ldr	r3, [r4, #0]
    ce52:	07da      	lsls	r2, r3, #31
    ce54:	d508      	bpl.n	ce68 <_printf_i+0x120>
    ce56:	6923      	ldr	r3, [r4, #16]
    ce58:	6862      	ldr	r2, [r4, #4]
    ce5a:	429a      	cmp	r2, r3
    ce5c:	bfde      	ittt	le
    ce5e:	2330      	movle	r3, #48	; 0x30
    ce60:	f805 3c01 	strble.w	r3, [r5, #-1]
    ce64:	f105 35ff 	addle.w	r5, r5, #4294967295
    ce68:	ebae 0305 	sub.w	r3, lr, r5
    ce6c:	6123      	str	r3, [r4, #16]
    ce6e:	f8cd 8000 	str.w	r8, [sp]
    ce72:	463b      	mov	r3, r7
    ce74:	aa03      	add	r2, sp, #12
    ce76:	4621      	mov	r1, r4
    ce78:	4630      	mov	r0, r6
    ce7a:	f7ff feef 	bl	cc5c <_printf_common>
    ce7e:	3001      	adds	r0, #1
    ce80:	d155      	bne.n	cf2e <_printf_i+0x1e6>
    ce82:	f04f 30ff 	mov.w	r0, #4294967295
    ce86:	b005      	add	sp, #20
    ce88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ce8c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    ce90:	493c      	ldr	r1, [pc, #240]	; (cf84 <_printf_i+0x23c>)
    ce92:	6822      	ldr	r2, [r4, #0]
    ce94:	6818      	ldr	r0, [r3, #0]
    ce96:	f012 0f80 	tst.w	r2, #128	; 0x80
    ce9a:	f100 0504 	add.w	r5, r0, #4
    ce9e:	601d      	str	r5, [r3, #0]
    cea0:	d001      	beq.n	cea6 <_printf_i+0x15e>
    cea2:	6803      	ldr	r3, [r0, #0]
    cea4:	e002      	b.n	ceac <_printf_i+0x164>
    cea6:	0655      	lsls	r5, r2, #25
    cea8:	d5fb      	bpl.n	cea2 <_printf_i+0x15a>
    ceaa:	8803      	ldrh	r3, [r0, #0]
    ceac:	07d0      	lsls	r0, r2, #31
    ceae:	bf44      	itt	mi
    ceb0:	f042 0220 	orrmi.w	r2, r2, #32
    ceb4:	6022      	strmi	r2, [r4, #0]
    ceb6:	b91b      	cbnz	r3, cec0 <_printf_i+0x178>
    ceb8:	6822      	ldr	r2, [r4, #0]
    ceba:	f022 0220 	bic.w	r2, r2, #32
    cebe:	6022      	str	r2, [r4, #0]
    cec0:	2210      	movs	r2, #16
    cec2:	e7b1      	b.n	ce28 <_printf_i+0xe0>
    cec4:	4675      	mov	r5, lr
    cec6:	fbb3 f0f2 	udiv	r0, r3, r2
    ceca:	fb02 3310 	mls	r3, r2, r0, r3
    cece:	5ccb      	ldrb	r3, [r1, r3]
    ced0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    ced4:	4603      	mov	r3, r0
    ced6:	2800      	cmp	r0, #0
    ced8:	d1f5      	bne.n	cec6 <_printf_i+0x17e>
    ceda:	e7b7      	b.n	ce4c <_printf_i+0x104>
    cedc:	6808      	ldr	r0, [r1, #0]
    cede:	681a      	ldr	r2, [r3, #0]
    cee0:	6949      	ldr	r1, [r1, #20]
    cee2:	f010 0f80 	tst.w	r0, #128	; 0x80
    cee6:	d004      	beq.n	cef2 <_printf_i+0x1aa>
    cee8:	1d10      	adds	r0, r2, #4
    ceea:	6018      	str	r0, [r3, #0]
    ceec:	6813      	ldr	r3, [r2, #0]
    ceee:	6019      	str	r1, [r3, #0]
    cef0:	e007      	b.n	cf02 <_printf_i+0x1ba>
    cef2:	f010 0f40 	tst.w	r0, #64	; 0x40
    cef6:	f102 0004 	add.w	r0, r2, #4
    cefa:	6018      	str	r0, [r3, #0]
    cefc:	6813      	ldr	r3, [r2, #0]
    cefe:	d0f6      	beq.n	ceee <_printf_i+0x1a6>
    cf00:	8019      	strh	r1, [r3, #0]
    cf02:	2300      	movs	r3, #0
    cf04:	6123      	str	r3, [r4, #16]
    cf06:	4675      	mov	r5, lr
    cf08:	e7b1      	b.n	ce6e <_printf_i+0x126>
    cf0a:	681a      	ldr	r2, [r3, #0]
    cf0c:	1d11      	adds	r1, r2, #4
    cf0e:	6019      	str	r1, [r3, #0]
    cf10:	6815      	ldr	r5, [r2, #0]
    cf12:	6862      	ldr	r2, [r4, #4]
    cf14:	2100      	movs	r1, #0
    cf16:	4628      	mov	r0, r5
    cf18:	f000 f8d2 	bl	d0c0 <memchr>
    cf1c:	b108      	cbz	r0, cf22 <_printf_i+0x1da>
    cf1e:	1b40      	subs	r0, r0, r5
    cf20:	6060      	str	r0, [r4, #4]
    cf22:	6863      	ldr	r3, [r4, #4]
    cf24:	6123      	str	r3, [r4, #16]
    cf26:	2300      	movs	r3, #0
    cf28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    cf2c:	e79f      	b.n	ce6e <_printf_i+0x126>
    cf2e:	6923      	ldr	r3, [r4, #16]
    cf30:	462a      	mov	r2, r5
    cf32:	4639      	mov	r1, r7
    cf34:	4630      	mov	r0, r6
    cf36:	47c0      	blx	r8
    cf38:	3001      	adds	r0, #1
    cf3a:	d0a2      	beq.n	ce82 <_printf_i+0x13a>
    cf3c:	6823      	ldr	r3, [r4, #0]
    cf3e:	079b      	lsls	r3, r3, #30
    cf40:	d507      	bpl.n	cf52 <_printf_i+0x20a>
    cf42:	2500      	movs	r5, #0
    cf44:	f104 0919 	add.w	r9, r4, #25
    cf48:	68e3      	ldr	r3, [r4, #12]
    cf4a:	9a03      	ldr	r2, [sp, #12]
    cf4c:	1a9b      	subs	r3, r3, r2
    cf4e:	429d      	cmp	r5, r3
    cf50:	db05      	blt.n	cf5e <_printf_i+0x216>
    cf52:	68e0      	ldr	r0, [r4, #12]
    cf54:	9b03      	ldr	r3, [sp, #12]
    cf56:	4298      	cmp	r0, r3
    cf58:	bfb8      	it	lt
    cf5a:	4618      	movlt	r0, r3
    cf5c:	e793      	b.n	ce86 <_printf_i+0x13e>
    cf5e:	2301      	movs	r3, #1
    cf60:	464a      	mov	r2, r9
    cf62:	4639      	mov	r1, r7
    cf64:	4630      	mov	r0, r6
    cf66:	47c0      	blx	r8
    cf68:	3001      	adds	r0, #1
    cf6a:	d08a      	beq.n	ce82 <_printf_i+0x13a>
    cf6c:	3501      	adds	r5, #1
    cf6e:	e7eb      	b.n	cf48 <_printf_i+0x200>
    cf70:	2b00      	cmp	r3, #0
    cf72:	d1a7      	bne.n	cec4 <_printf_i+0x17c>
    cf74:	780b      	ldrb	r3, [r1, #0]
    cf76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    cf7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    cf7e:	e765      	b.n	ce4c <_printf_i+0x104>
    cf80:	0000ddda 	.word	0x0000ddda
    cf84:	0000ddc9 	.word	0x0000ddc9

0000cf88 <__sread>:
    cf88:	b510      	push	{r4, lr}
    cf8a:	460c      	mov	r4, r1
    cf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cf90:	f000 f926 	bl	d1e0 <_read_r>
    cf94:	2800      	cmp	r0, #0
    cf96:	bfab      	itete	ge
    cf98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    cf9a:	89a3      	ldrhlt	r3, [r4, #12]
    cf9c:	181b      	addge	r3, r3, r0
    cf9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    cfa2:	bfac      	ite	ge
    cfa4:	6563      	strge	r3, [r4, #84]	; 0x54
    cfa6:	81a3      	strhlt	r3, [r4, #12]
    cfa8:	bd10      	pop	{r4, pc}

0000cfaa <__swrite>:
    cfaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfae:	461f      	mov	r7, r3
    cfb0:	898b      	ldrh	r3, [r1, #12]
    cfb2:	05db      	lsls	r3, r3, #23
    cfb4:	4605      	mov	r5, r0
    cfb6:	460c      	mov	r4, r1
    cfb8:	4616      	mov	r6, r2
    cfba:	d505      	bpl.n	cfc8 <__swrite+0x1e>
    cfbc:	2302      	movs	r3, #2
    cfbe:	2200      	movs	r2, #0
    cfc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cfc4:	f000 f868 	bl	d098 <_lseek_r>
    cfc8:	89a3      	ldrh	r3, [r4, #12]
    cfca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cfce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    cfd2:	81a3      	strh	r3, [r4, #12]
    cfd4:	4632      	mov	r2, r6
    cfd6:	463b      	mov	r3, r7
    cfd8:	4628      	mov	r0, r5
    cfda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cfde:	f000 b817 	b.w	d010 <_write_r>

0000cfe2 <__sseek>:
    cfe2:	b510      	push	{r4, lr}
    cfe4:	460c      	mov	r4, r1
    cfe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cfea:	f000 f855 	bl	d098 <_lseek_r>
    cfee:	1c43      	adds	r3, r0, #1
    cff0:	89a3      	ldrh	r3, [r4, #12]
    cff2:	bf15      	itete	ne
    cff4:	6560      	strne	r0, [r4, #84]	; 0x54
    cff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    cffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    cffe:	81a3      	strheq	r3, [r4, #12]
    d000:	bf18      	it	ne
    d002:	81a3      	strhne	r3, [r4, #12]
    d004:	bd10      	pop	{r4, pc}

0000d006 <__sclose>:
    d006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d00a:	f000 b813 	b.w	d034 <_close_r>
	...

0000d010 <_write_r>:
    d010:	b538      	push	{r3, r4, r5, lr}
    d012:	4c07      	ldr	r4, [pc, #28]	; (d030 <_write_r+0x20>)
    d014:	4605      	mov	r5, r0
    d016:	4608      	mov	r0, r1
    d018:	4611      	mov	r1, r2
    d01a:	2200      	movs	r2, #0
    d01c:	6022      	str	r2, [r4, #0]
    d01e:	461a      	mov	r2, r3
    d020:	f7fd f852 	bl	a0c8 <_write>
    d024:	1c43      	adds	r3, r0, #1
    d026:	d102      	bne.n	d02e <_write_r+0x1e>
    d028:	6823      	ldr	r3, [r4, #0]
    d02a:	b103      	cbz	r3, d02e <_write_r+0x1e>
    d02c:	602b      	str	r3, [r5, #0]
    d02e:	bd38      	pop	{r3, r4, r5, pc}
    d030:	20003ba8 	.word	0x20003ba8

0000d034 <_close_r>:
    d034:	b538      	push	{r3, r4, r5, lr}
    d036:	4c06      	ldr	r4, [pc, #24]	; (d050 <_close_r+0x1c>)
    d038:	2300      	movs	r3, #0
    d03a:	4605      	mov	r5, r0
    d03c:	4608      	mov	r0, r1
    d03e:	6023      	str	r3, [r4, #0]
    d040:	f7f8 fddc 	bl	5bfc <_close>
    d044:	1c43      	adds	r3, r0, #1
    d046:	d102      	bne.n	d04e <_close_r+0x1a>
    d048:	6823      	ldr	r3, [r4, #0]
    d04a:	b103      	cbz	r3, d04e <_close_r+0x1a>
    d04c:	602b      	str	r3, [r5, #0]
    d04e:	bd38      	pop	{r3, r4, r5, pc}
    d050:	20003ba8 	.word	0x20003ba8

0000d054 <_fstat_r>:
    d054:	b538      	push	{r3, r4, r5, lr}
    d056:	4c07      	ldr	r4, [pc, #28]	; (d074 <_fstat_r+0x20>)
    d058:	2300      	movs	r3, #0
    d05a:	4605      	mov	r5, r0
    d05c:	4608      	mov	r0, r1
    d05e:	4611      	mov	r1, r2
    d060:	6023      	str	r3, [r4, #0]
    d062:	f7f8 fdce 	bl	5c02 <_fstat>
    d066:	1c43      	adds	r3, r0, #1
    d068:	d102      	bne.n	d070 <_fstat_r+0x1c>
    d06a:	6823      	ldr	r3, [r4, #0]
    d06c:	b103      	cbz	r3, d070 <_fstat_r+0x1c>
    d06e:	602b      	str	r3, [r5, #0]
    d070:	bd38      	pop	{r3, r4, r5, pc}
    d072:	bf00      	nop
    d074:	20003ba8 	.word	0x20003ba8

0000d078 <_isatty_r>:
    d078:	b538      	push	{r3, r4, r5, lr}
    d07a:	4c06      	ldr	r4, [pc, #24]	; (d094 <_isatty_r+0x1c>)
    d07c:	2300      	movs	r3, #0
    d07e:	4605      	mov	r5, r0
    d080:	4608      	mov	r0, r1
    d082:	6023      	str	r3, [r4, #0]
    d084:	f7f8 fdc2 	bl	5c0c <_isatty>
    d088:	1c43      	adds	r3, r0, #1
    d08a:	d102      	bne.n	d092 <_isatty_r+0x1a>
    d08c:	6823      	ldr	r3, [r4, #0]
    d08e:	b103      	cbz	r3, d092 <_isatty_r+0x1a>
    d090:	602b      	str	r3, [r5, #0]
    d092:	bd38      	pop	{r3, r4, r5, pc}
    d094:	20003ba8 	.word	0x20003ba8

0000d098 <_lseek_r>:
    d098:	b538      	push	{r3, r4, r5, lr}
    d09a:	4c07      	ldr	r4, [pc, #28]	; (d0b8 <_lseek_r+0x20>)
    d09c:	4605      	mov	r5, r0
    d09e:	4608      	mov	r0, r1
    d0a0:	4611      	mov	r1, r2
    d0a2:	2200      	movs	r2, #0
    d0a4:	6022      	str	r2, [r4, #0]
    d0a6:	461a      	mov	r2, r3
    d0a8:	f7f8 fdb2 	bl	5c10 <_lseek>
    d0ac:	1c43      	adds	r3, r0, #1
    d0ae:	d102      	bne.n	d0b6 <_lseek_r+0x1e>
    d0b0:	6823      	ldr	r3, [r4, #0]
    d0b2:	b103      	cbz	r3, d0b6 <_lseek_r+0x1e>
    d0b4:	602b      	str	r3, [r5, #0]
    d0b6:	bd38      	pop	{r3, r4, r5, pc}
    d0b8:	20003ba8 	.word	0x20003ba8
    d0bc:	00000000 	.word	0x00000000

0000d0c0 <memchr>:
    d0c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d0c4:	2a10      	cmp	r2, #16
    d0c6:	db2b      	blt.n	d120 <memchr+0x60>
    d0c8:	f010 0f07 	tst.w	r0, #7
    d0cc:	d008      	beq.n	d0e0 <memchr+0x20>
    d0ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    d0d2:	3a01      	subs	r2, #1
    d0d4:	428b      	cmp	r3, r1
    d0d6:	d02d      	beq.n	d134 <memchr+0x74>
    d0d8:	f010 0f07 	tst.w	r0, #7
    d0dc:	b342      	cbz	r2, d130 <memchr+0x70>
    d0de:	d1f6      	bne.n	d0ce <memchr+0xe>
    d0e0:	b4f0      	push	{r4, r5, r6, r7}
    d0e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d0e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d0ea:	f022 0407 	bic.w	r4, r2, #7
    d0ee:	f07f 0700 	mvns.w	r7, #0
    d0f2:	2300      	movs	r3, #0
    d0f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    d0f8:	3c08      	subs	r4, #8
    d0fa:	ea85 0501 	eor.w	r5, r5, r1
    d0fe:	ea86 0601 	eor.w	r6, r6, r1
    d102:	fa85 f547 	uadd8	r5, r5, r7
    d106:	faa3 f587 	sel	r5, r3, r7
    d10a:	fa86 f647 	uadd8	r6, r6, r7
    d10e:	faa5 f687 	sel	r6, r5, r7
    d112:	b98e      	cbnz	r6, d138 <memchr+0x78>
    d114:	d1ee      	bne.n	d0f4 <memchr+0x34>
    d116:	bcf0      	pop	{r4, r5, r6, r7}
    d118:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d11c:	f002 0207 	and.w	r2, r2, #7
    d120:	b132      	cbz	r2, d130 <memchr+0x70>
    d122:	f810 3b01 	ldrb.w	r3, [r0], #1
    d126:	3a01      	subs	r2, #1
    d128:	ea83 0301 	eor.w	r3, r3, r1
    d12c:	b113      	cbz	r3, d134 <memchr+0x74>
    d12e:	d1f8      	bne.n	d122 <memchr+0x62>
    d130:	2000      	movs	r0, #0
    d132:	4770      	bx	lr
    d134:	3801      	subs	r0, #1
    d136:	4770      	bx	lr
    d138:	2d00      	cmp	r5, #0
    d13a:	bf06      	itte	eq
    d13c:	4635      	moveq	r5, r6
    d13e:	3803      	subeq	r0, #3
    d140:	3807      	subne	r0, #7
    d142:	f015 0f01 	tst.w	r5, #1
    d146:	d107      	bne.n	d158 <memchr+0x98>
    d148:	3001      	adds	r0, #1
    d14a:	f415 7f80 	tst.w	r5, #256	; 0x100
    d14e:	bf02      	ittt	eq
    d150:	3001      	addeq	r0, #1
    d152:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    d156:	3001      	addeq	r0, #1
    d158:	bcf0      	pop	{r4, r5, r6, r7}
    d15a:	3801      	subs	r0, #1
    d15c:	4770      	bx	lr
    d15e:	bf00      	nop

0000d160 <memmove>:
    d160:	4288      	cmp	r0, r1
    d162:	b510      	push	{r4, lr}
    d164:	eb01 0302 	add.w	r3, r1, r2
    d168:	d803      	bhi.n	d172 <memmove+0x12>
    d16a:	1e42      	subs	r2, r0, #1
    d16c:	4299      	cmp	r1, r3
    d16e:	d10c      	bne.n	d18a <memmove+0x2a>
    d170:	bd10      	pop	{r4, pc}
    d172:	4298      	cmp	r0, r3
    d174:	d2f9      	bcs.n	d16a <memmove+0xa>
    d176:	1881      	adds	r1, r0, r2
    d178:	1ad2      	subs	r2, r2, r3
    d17a:	42d3      	cmn	r3, r2
    d17c:	d100      	bne.n	d180 <memmove+0x20>
    d17e:	bd10      	pop	{r4, pc}
    d180:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    d184:	f801 4d01 	strb.w	r4, [r1, #-1]!
    d188:	e7f7      	b.n	d17a <memmove+0x1a>
    d18a:	f811 4b01 	ldrb.w	r4, [r1], #1
    d18e:	f802 4f01 	strb.w	r4, [r2, #1]!
    d192:	e7eb      	b.n	d16c <memmove+0xc>

0000d194 <_realloc_r>:
    d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d196:	4607      	mov	r7, r0
    d198:	4614      	mov	r4, r2
    d19a:	460e      	mov	r6, r1
    d19c:	b921      	cbnz	r1, d1a8 <_realloc_r+0x14>
    d19e:	4611      	mov	r1, r2
    d1a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d1a4:	f7fe be5e 	b.w	be64 <_malloc_r>
    d1a8:	b922      	cbnz	r2, d1b4 <_realloc_r+0x20>
    d1aa:	f7fe fe0d 	bl	bdc8 <_free_r>
    d1ae:	4625      	mov	r5, r4
    d1b0:	4628      	mov	r0, r5
    d1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1b4:	f000 f826 	bl	d204 <_malloc_usable_size_r>
    d1b8:	4284      	cmp	r4, r0
    d1ba:	d90f      	bls.n	d1dc <_realloc_r+0x48>
    d1bc:	4621      	mov	r1, r4
    d1be:	4638      	mov	r0, r7
    d1c0:	f7fe fe50 	bl	be64 <_malloc_r>
    d1c4:	4605      	mov	r5, r0
    d1c6:	2800      	cmp	r0, #0
    d1c8:	d0f2      	beq.n	d1b0 <_realloc_r+0x1c>
    d1ca:	4631      	mov	r1, r6
    d1cc:	4622      	mov	r2, r4
    d1ce:	f7fe fde7 	bl	bda0 <memcpy>
    d1d2:	4631      	mov	r1, r6
    d1d4:	4638      	mov	r0, r7
    d1d6:	f7fe fdf7 	bl	bdc8 <_free_r>
    d1da:	e7e9      	b.n	d1b0 <_realloc_r+0x1c>
    d1dc:	4635      	mov	r5, r6
    d1de:	e7e7      	b.n	d1b0 <_realloc_r+0x1c>

0000d1e0 <_read_r>:
    d1e0:	b538      	push	{r3, r4, r5, lr}
    d1e2:	4c07      	ldr	r4, [pc, #28]	; (d200 <_read_r+0x20>)
    d1e4:	4605      	mov	r5, r0
    d1e6:	4608      	mov	r0, r1
    d1e8:	4611      	mov	r1, r2
    d1ea:	2200      	movs	r2, #0
    d1ec:	6022      	str	r2, [r4, #0]
    d1ee:	461a      	mov	r2, r3
    d1f0:	f7fc ff5a 	bl	a0a8 <_read>
    d1f4:	1c43      	adds	r3, r0, #1
    d1f6:	d102      	bne.n	d1fe <_read_r+0x1e>
    d1f8:	6823      	ldr	r3, [r4, #0]
    d1fa:	b103      	cbz	r3, d1fe <_read_r+0x1e>
    d1fc:	602b      	str	r3, [r5, #0]
    d1fe:	bd38      	pop	{r3, r4, r5, pc}
    d200:	20003ba8 	.word	0x20003ba8

0000d204 <_malloc_usable_size_r>:
    d204:	f851 0c04 	ldr.w	r0, [r1, #-4]
    d208:	2800      	cmp	r0, #0
    d20a:	f1a0 0004 	sub.w	r0, r0, #4
    d20e:	bfbc      	itt	lt
    d210:	580b      	ldrlt	r3, [r1, r0]
    d212:	18c0      	addlt	r0, r0, r3
    d214:	4770      	bx	lr
    d216:	0000      	movs	r0, r0
    d218:	682f2e2e 	.word	0x682f2e2e
    d21c:	692f6c61 	.word	0x692f6c61
    d220:	756c636e 	.word	0x756c636e
    d224:	682f6564 	.word	0x682f6564
    d228:	775f6c61 	.word	0x775f6c61
    d22c:	682e7464 	.word	0x682e7464
    d230:	00000000 	.word	0x00000000
    d234:	4952475b 	.word	0x4952475b
    d238:	25205d44 	.word	0x25205d44
    d23c:	25206433 	.word	0x25206433
    d240:	25206434 	.word	0x25206434
    d244:	25206434 	.word	0x25206434
    d248:	4d5b2064 	.word	0x4d5b2064
    d24c:	5d494449 	.word	0x5d494449
    d250:	3a684320 	.word	0x3a684320
    d254:	20642520 	.word	0x20642520
    d258:	646d4320 	.word	0x646d4320
    d25c:	6425203a 	.word	0x6425203a
    d260:	61502020 	.word	0x61502020
    d264:	316d6172 	.word	0x316d6172
    d268:	6425203a 	.word	0x6425203a
    d26c:	61502020 	.word	0x61502020
    d270:	326d6172 	.word	0x326d6172
    d274:	6425203a 	.word	0x6425203a
    d278:	0000000a 	.word	0x0000000a
    d27c:	4952475b 	.word	0x4952475b
    d280:	25205d44 	.word	0x25205d44
    d284:	25206433 	.word	0x25206433
    d288:	25206434 	.word	0x25206434
    d28c:	25206434 	.word	0x25206434
    d290:	4b5b2064 	.word	0x4b5b2064
    d294:	4f425945 	.word	0x4f425945
    d298:	5d445241 	.word	0x5d445241
    d29c:	79654b20 	.word	0x79654b20
    d2a0:	6425203a 	.word	0x6425203a
    d2a4:	646f4d20 	.word	0x646f4d20
    d2a8:	6425203a 	.word	0x6425203a
    d2ac:	646d4320 	.word	0x646d4320
    d2b0:	6425203a 	.word	0x6425203a
    d2b4:	4357480a 	.word	0x4357480a
    d2b8:	203a4746 	.word	0x203a4746
    d2bc:	78383025 	.word	0x78383025
    d2c0:	0000000a 	.word	0x0000000a
    d2c4:	4952475b 	.word	0x4952475b
    d2c8:	25205d44 	.word	0x25205d44
    d2cc:	25206433 	.word	0x25206433
    d2d0:	25206434 	.word	0x25206434
    d2d4:	25206434 	.word	0x25206434
    d2d8:	535b2064 	.word	0x535b2064
    d2dc:	205d5359 	.word	0x205d5359
    d2e0:	20643325 	.word	0x20643325
    d2e4:	20643325 	.word	0x20643325
    d2e8:	0a643325 	.word	0x0a643325
    d2ec:	00000000 	.word	0x00000000
    d2f0:	7974227b 	.word	0x7974227b
    d2f4:	3a226570 	.word	0x3a226570
    d2f8:	41454822 	.word	0x41454822
    d2fc:	45425452 	.word	0x45425452
    d300:	2c225441 	.word	0x2c225441
    d304:	61642220 	.word	0x61642220
    d308:	3a226174 	.word	0x3a226174
    d30c:	25225b20 	.word	0x25225b20
    d310:	202c2264 	.word	0x202c2264
    d314:	22642522 	.word	0x22642522
    d318:	2522202c 	.word	0x2522202c
    d31c:	7d5d2264 	.word	0x7d5d2264
    d320:	00000a0d 	.word	0x00000a0d
    d324:	4b4e555b 	.word	0x4b4e555b
    d328:	4e574f4e 	.word	0x4e574f4e
    d32c:	3e2d205d 	.word	0x3e2d205d
    d330:	6f725020 	.word	0x6f725020
    d334:	6f636f74 	.word	0x6f636f74
    d338:	25203a6c 	.word	0x25203a6c
    d33c:	00000a64 	.word	0x00000a64
    d340:	0f0e0d0c 	.word	0x0f0e0d0c
    d344:	0b0a0908 	.word	0x0b0a0908
    d348:	07060504 	.word	0x07060504
    d34c:	03020100 	.word	0x03020100
    d350:	30256325 	.word	0x30256325
    d354:	30257832 	.word	0x30257832
    d358:	30257832 	.word	0x30257832
    d35c:	30257832 	.word	0x30257832
    d360:	30257832 	.word	0x30257832
    d364:	63257832 	.word	0x63257832
    d368:	30256325 	.word	0x30256325
    d36c:	30257832 	.word	0x30257832
    d370:	30257832 	.word	0x30257832
    d374:	30257832 	.word	0x30257832
    d378:	30257832 	.word	0x30257832
    d37c:	63257832 	.word	0x63257832
    d380:	00000000 	.word	0x00000000
    d384:	78383025 	.word	0x78383025
    d388:	00000000 	.word	0x00000000
    d38c:	30256325 	.word	0x30256325
    d390:	30257832 	.word	0x30257832
    d394:	30257832 	.word	0x30257832
    d398:	30257832 	.word	0x30257832
    d39c:	63257832 	.word	0x63257832
    d3a0:	00000000 	.word	0x00000000
    d3a4:	63256325 	.word	0x63256325
    d3a8:	63256325 	.word	0x63256325
    d3ac:	78383025 	.word	0x78383025
    d3b0:	30306325 	.word	0x30306325
    d3b4:	0000000a 	.word	0x0000000a
    d3b8:	63256325 	.word	0x63256325
    d3bc:	78323025 	.word	0x78323025
    d3c0:	78323025 	.word	0x78323025
    d3c4:	78323025 	.word	0x78323025
    d3c8:	78323025 	.word	0x78323025
    d3cc:	78323025 	.word	0x78323025
    d3d0:	00006325 	.word	0x00006325
    d3d4:	78323025 	.word	0x78323025
    d3d8:	00000000 	.word	0x00000000
    d3dc:	000a3030 	.word	0x000a3030
    d3e0:	682f2e2e 	.word	0x682f2e2e
    d3e4:	732f6c61 	.word	0x732f6c61
    d3e8:	682f6372 	.word	0x682f6372
    d3ec:	615f6c61 	.word	0x615f6c61
    d3f0:	615f6364 	.word	0x615f6364
    d3f4:	636e7973 	.word	0x636e7973
    d3f8:	0000632e 	.word	0x0000632e
    d3fc:	682f2e2e 	.word	0x682f2e2e
    d400:	732f6c61 	.word	0x732f6c61
    d404:	682f6372 	.word	0x682f6372
    d408:	635f6c61 	.word	0x635f6c61
    d40c:	735f6372 	.word	0x735f6372
    d410:	2e636e79 	.word	0x2e636e79
    d414:	00000063 	.word	0x00000063
    d418:	682f2e2e 	.word	0x682f2e2e
    d41c:	732f6c61 	.word	0x732f6c61
    d420:	682f6372 	.word	0x682f6372
    d424:	665f6c61 	.word	0x665f6c61
    d428:	6873616c 	.word	0x6873616c
    d42c:	0000632e 	.word	0x0000632e
    d430:	682f2e2e 	.word	0x682f2e2e
    d434:	732f6c61 	.word	0x732f6c61
    d438:	682f6372 	.word	0x682f6372
    d43c:	695f6c61 	.word	0x695f6c61
    d440:	6d5f6332 	.word	0x6d5f6332
    d444:	7973615f 	.word	0x7973615f
    d448:	632e636e 	.word	0x632e636e
    d44c:	00000000 	.word	0x00000000
    d450:	682f2e2e 	.word	0x682f2e2e
    d454:	732f6c61 	.word	0x732f6c61
    d458:	682f6372 	.word	0x682f6372
    d45c:	695f6c61 	.word	0x695f6c61
    d460:	00632e6f 	.word	0x00632e6f
    d464:	682f2e2e 	.word	0x682f2e2e
    d468:	732f6c61 	.word	0x732f6c61
    d46c:	682f6372 	.word	0x682f6372
    d470:	715f6c61 	.word	0x715f6c61
    d474:	5f697073 	.word	0x5f697073
    d478:	2e616d64 	.word	0x2e616d64
    d47c:	00000063 	.word	0x00000063
    d480:	682f2e2e 	.word	0x682f2e2e
    d484:	732f6c61 	.word	0x732f6c61
    d488:	682f6372 	.word	0x682f6372
    d48c:	735f6c61 	.word	0x735f6c61
    d490:	6d5f6970 	.word	0x6d5f6970
    d494:	7973615f 	.word	0x7973615f
    d498:	632e636e 	.word	0x632e636e
    d49c:	00000000 	.word	0x00000000
    d4a0:	682f2e2e 	.word	0x682f2e2e
    d4a4:	732f6c61 	.word	0x732f6c61
    d4a8:	682f6372 	.word	0x682f6372
    d4ac:	735f6c61 	.word	0x735f6c61
    d4b0:	6d5f6970 	.word	0x6d5f6970
    d4b4:	616d645f 	.word	0x616d645f
    d4b8:	0000632e 	.word	0x0000632e
    d4bc:	682f2e2e 	.word	0x682f2e2e
    d4c0:	732f6c61 	.word	0x732f6c61
    d4c4:	682f6372 	.word	0x682f6372
    d4c8:	745f6c61 	.word	0x745f6c61
    d4cc:	72656d69 	.word	0x72656d69
    d4d0:	0000632e 	.word	0x0000632e
    d4d4:	682f2e2e 	.word	0x682f2e2e
    d4d8:	732f6c61 	.word	0x732f6c61
    d4dc:	682f6372 	.word	0x682f6372
    d4e0:	755f6c61 	.word	0x755f6c61
    d4e4:	74726173 	.word	0x74726173
    d4e8:	7973615f 	.word	0x7973615f
    d4ec:	632e636e 	.word	0x632e636e
    d4f0:	00000000 	.word	0x00000000
    d4f4:	682f2e2e 	.word	0x682f2e2e
    d4f8:	732f6c61 	.word	0x732f6c61
    d4fc:	682f6372 	.word	0x682f6372
    d500:	755f6c61 	.word	0x755f6c61
    d504:	74726173 	.word	0x74726173
    d508:	6e79735f 	.word	0x6e79735f
    d50c:	00632e63 	.word	0x00632e63
    d510:	682f2e2e 	.word	0x682f2e2e
    d514:	752f6c61 	.word	0x752f6c61
    d518:	736c6974 	.word	0x736c6974
    d51c:	6372732f 	.word	0x6372732f
    d520:	6974752f 	.word	0x6974752f
    d524:	6c5f736c 	.word	0x6c5f736c
    d528:	2e747369 	.word	0x2e747369
    d52c:	00000063 	.word	0x00000063
    d530:	682f2e2e 	.word	0x682f2e2e
    d534:	752f6c61 	.word	0x752f6c61
    d538:	736c6974 	.word	0x736c6974
    d53c:	6372732f 	.word	0x6372732f
    d540:	6974752f 	.word	0x6974752f
    d544:	725f736c 	.word	0x725f736c
    d548:	62676e69 	.word	0x62676e69
    d54c:	65666675 	.word	0x65666675
    d550:	00632e72 	.word	0x00632e72

0000d554 <_adcs>:
    d554:	01000000 0003000c 00041807 00000000     ................
    d564:	0014080b 00010000 000c0100 18040003     ................
    d574:	00000004 080b0000 00000014 682f2e2e     ............../h
    d584:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    d594:	00000000                                ....

0000d598 <_cfgs>:
    d598:	00200600 08068000 00200400 08068000     .. ....... .....
    d5a8:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    d5c8:	00200b00 14000003 00200a00 08000002     .. ....... .....
    d5d8:	00201300 14000003 00000000 00000000     .. .............
	...
    d688:	00005400 1c000000 00005300 0c000000     .T.......S......

0000d698 <user_mux_confs>:
	...
    d6c4:	04030201 04030201 00000000 00000000     ................
	...

0000d6dc <channel_confs>:
    d6dc:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000d71c <interrupt_cfg>:
    d71c:	00000002 00000002 00000002 00000002     ................
	...
    d79c:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    d7ac:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    d7bc:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    d7cc:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    d7dc:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    d7ec:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    d7fc:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000d80c <_usarts>:
    d80c:	00000000 40100004 00030000 00700002     .......@......p.
    d81c:	0000aaaa 00000000 00000001 40100004     ...............@
    d82c:	00030000 00700002 0000aaaa 00000000     ......p.........
    d83c:	00000002 40100004 00030000 00700002     .......@......p.
    d84c:	00005555 00000000 00000004 40100004     UU.............@
    d85c:	00030000 00700002 0000aaaa 00000000     ......p.........
    d86c:	00000006 40100004 00030000 00700002     .......@......p.
    d87c:	0000aaaa 00000000                       ........

0000d884 <_i2cms>:
    d884:	00000005 00200014 00000100 0000e6e5     ...... .........
    d894:	00d70000 02dc6c00                       .....l..

0000d89c <sercomspi_regs>:
    d89c:	3020000c 00020000 00000000 01ff0005     .. 0............
    d8ac:	20000c03 00000000 00000000 ff000600     ... ............
    d8bc:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    d8cc:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    d8dc:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    d8ec:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000d8fc <_tcs>:
    d8fc:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    d90c:	00000000 006c0001 00000308 00000021     ......l.....!...
    d91c:	00003a98 00000000 006d0002 00000308     .:........m.....
    d92c:	00000021 00003a98 00000000 006e0003     !....:........n.
    d93c:	00000308 00000021 00003a98 00000000     ....!....:......
    d94c:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    d95c:	0000632e                                .c..

0000d960 <_usb_ep_cfgs>:
    d960:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
    d978:	20000d20 00000000 00000008 20000ce0      .. ........... 
    d988:	20000cd8 00080040 00000000 00000000     ... @...........
	...
    d9a0:	20000c98 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    d9b0:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    d9c0:	7974227b 3a226570 524f5022 202c2254     {"type":"PORT", 
    d9d0:	74616422 203a2261 6954225b 756f656d     "data": ["Timeou
    d9e0:	44203a74 6f637369 63656e6e 7d5d2274     t: Disconnect"]}
    d9f0:	0000000d 7974227b 3a226570 41525422     ....{"type":"TRA
    da00:	202c2250 74616422 203a2261 5254225b     P", "data": ["TR
    da10:	22315041 000d7d5d 7974227b 3a226570     AP1"]}..{"type":
    da20:	41525422 202c2250 74616422 203a2261     "TRAP", "data": 
    da30:	5254225b 22325041 000d7d5d 7974227b     ["TRAP2"]}..{"ty
    da40:	3a226570 52524522 2c22524f 61642220     pe":"ERROR", "da
    da50:	3a226174 42225b20 65666675 764f2072     ta": ["Buffer Ov
    da60:	75727265 7d5d226e 0000000d 7974227b     errun"]}....{"ty
    da70:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    da80:	203a2261 6544225b 65646f63 0d7d5d22     a": ["Decode"]}.
    da90:	00000000 7974227b 3a226570 41572220     ....{"type": "WA
    daa0:	4e494e52 202c2247 74616422 203a2261     RNING", "data": 
    dab0:	7246225b 20656d61 72617453 664f2074     ["Frame Start Of
    dac0:	74657366 0d7d5d22 00000000 7974227b     fset"]}.....{"ty
    dad0:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    dae0:	203a2261 6f43225b 63656e6e 43203a74     a": ["Connect: C
    daf0:	656e6e6f 5d227463 00000d7d 7974227b     onnect"]}...{"ty
    db00:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    db10:	203a2261 6f43225b 63656e6e 44203a74     a": ["Connect: D
    db20:	6f637369 63656e6e 7d5d2274 0000000d     isconnect"]}....
    db30:	7974227b 3a226570 524f5022 202c2254     {"type":"PORT", 
    db40:	74616422 203a2261 6f43225b 63656e6e     "data": ["Connec
    db50:	56203a74 64696c61 22657461 000d7d5d     t: Validate"]}..
    db60:	7974227b 3a226570 52452220 22524f52     {"type": "ERROR"
    db70:	6422202c 22617461 225b203a 6d617246     , "data": ["Fram
    db80:	72452065 22726f72 000d7d5d 49505351     e Error"]}..QSPI
    db90:	6f725020 6d617267 61745320 64657472      Program Started
    dba0:	00000d0a 73616c46 72652068 20657361     ....Flash erase 
    dbb0:	63637573 66737365 0d0a6c75 00000000     successful......
    dbc0:	73616c46 72772068 20657469 63637573     Flash write succ
    dbd0:	66737365 0d0a6c75 00000000 73616c46     essful......Flas
    dbe0:	65722068 73206461 65636375 75667373     h read successfu
    dbf0:	000d0a6c 73616c46 61642068 76206174     l...Flash data v
    dc00:	66697265 74616369 206e6f69 6c696166     erification fail
    dc10:	0a2e6465 0000000d 74697257 202d2065     ed......Write - 
    dc20:	64616552 20736920 63637573 66737365     Read is successf
    dc30:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
    dc40:	6d656d20 2e79726f 00000d0a 74696e49      memory.....Init
    dc50:	696c6169 6974617a 000d6e6f 65746e45     ialization..Ente
    dc60:	676e6972 69614d20 6f4c206e 000d706f     ring Main Loop..
    dc70:	20425355 6e6e6f43 65746365 00000d64     USB Connected...
    dc80:	7974227b 3a226570 53415422 202c224b     {"type":"TASK", 
    dc90:	74616422 203a2261 0000005b 22642522     "data": [..."%d"
    dca0:	00000000 0000202c 7974227b 3a226570     ...., ..{"type":
    dcb0:	4f4f4c22 202c2250 74616422 203a2261     "LOOP", "data": 
    dcc0:	6425225b 0d7d5d22 0000000a              ["%d"]}.....

0000dccc <keyboard_report_desc>:
    dccc:	06090105 070501a1 e729e019 01250015     ..........)...%.
    dcdc:	08950175 01810281 65290019 65250015     u.........)e..%e
    dcec:	06950875 08050081 05290119 01250015     u.........)...%.
    dcfc:	05950175 03950291 00c00191              u...........

0000dd08 <mouse_report_desc>:
    dd08:	02090105 010901a1 090500a1 03290119     ..............).
    dd18:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    dd28:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    dd38:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    dd48:	73752f65 2e636462 00000063              e/usbdc.c...

0000dd54 <_global_impure_ptr>:
    dd54:	2000055c                                \.. 

0000dd58 <__sf_fake_stderr>:
	...

0000dd78 <__sf_fake_stdin>:
	...

0000dd98 <__sf_fake_stdout>:
	...
    ddb8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    ddc8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    ddd8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    dde8:	00006665                                ef..

0000ddec <_init>:
    ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddee:	bf00      	nop
    ddf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ddf2:	bc08      	pop	{r3}
    ddf4:	469e      	mov	lr, r3
    ddf6:	4770      	bx	lr

0000ddf8 <__init_array_start>:
    ddf8:	00000289 	.word	0x00000289

0000ddfc <_fini>:
    ddfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddfe:	bf00      	nop
    de00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    de02:	bc08      	pop	{r3}
    de04:	469e      	mov	lr, r3
    de06:	4770      	bx	lr

0000de08 <__fini_array_start>:
    de08:	00000265 	.word	0x00000265
