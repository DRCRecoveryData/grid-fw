
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b3b4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000580  20000000  0000b3b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020580  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020580  2**0
                  CONTENTS
  4 .bss          0000269c  20000580  0000b940  00020580  2**4
                  ALLOC
  5 .stack        00010004  20002c1c  0000dfdc  00020580  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ae  2**0
                  CONTENTS, READONLY
  8 .debug_info   00064ba4  00000000  00000000  00020607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008272  00000000  00000000  000851ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028c1f  00000000  00000000  0008d41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e38  00000000  00000000  000b603c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002b30  00000000  00000000  000b7e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003bf53  00000000  00000000  000ba9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ac65  00000000  00000000  000f68f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001185e9  00000000  00000000  0012155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000057cc  00000000  00000000  00239b48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 2c 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00      ,. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	19 32 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .2..............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e1 2e 00 00 f5 2e 00 00     ................
      bc:	19 2d 00 00 25 2d 00 00 31 2d 00 00 3d 2d 00 00     .-..%-..1-..=-..
      cc:	49 2d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     I-..............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	4d 30 00 00 19 3c 00 00 2d 3c 00 00 41 3c 00 00     M0...<..-<..A<..
     104:	55 3c 00 00 69 3c 00 00 7d 3c 00 00 91 3c 00 00     U<..i<..}<...<..
     114:	a5 3c 00 00 b9 3c 00 00 cd 3c 00 00 e1 3c 00 00     .<...<...<...<..
     124:	f5 3c 00 00 09 3d 00 00 1d 3d 00 00 31 3d 00 00     .<...=...=..1=..
     134:	45 3d 00 00 59 3d 00 00 6d 3d 00 00 81 3d 00 00     E=..Y=..m=...=..
     144:	95 3d 00 00 a9 3d 00 00 bd 3d 00 00 d1 3d 00 00     .=...=...=...=..
     154:	e5 3d 00 00 f9 3d 00 00 0d 3e 00 00 21 3e 00 00     .=...=...>..!>..
     164:	35 3e 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     5>..............
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 09 5d 00 00     .............]..
     184:	15 5d 00 00 21 5d 00 00 2d 5d 00 00 00 00 00 00     .]..!]..-]......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 1d 4a 00 00 31 4a 00 00     .........J..1J..
     1f4:	45 4a 00 00 59 4a 00 00 e5 02 00 00 e5 02 00 00     EJ..YJ..........
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 ad 29 00 00 c1 29 00 00 d5 29 00 00     .....)...)...)..
     224:	e9 29 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .)..............
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000580 	.word	0x20000580
     280:	00000000 	.word	0x00000000
     284:	0000b3b4 	.word	0x0000b3b4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000b3b4 	.word	0x0000b3b4
     2c4:	20000584 	.word	0x20000584
     2c8:	0000b3b4 	.word	0x0000b3b4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000c15 	.word	0x00000c15
     2e0:	00009a25 	.word	0x00009a25

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	0000b3b4 	.word	0x0000b3b4
     364:	20000580 	.word	0x20000580
     368:	20002c1c 	.word	0x20002c1c
     36c:	20000580 	.word	0x20000580
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	0000a205 	.word	0x0000a205
     37c:	000083f5 	.word	0x000083f5

00000380 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     384:	4a1b      	ldr	r2, [pc, #108]	; (3f4 <ADC_0_init+0x74>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     38c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     38e:	2241      	movs	r2, #65	; 0x41
     390:	4b19      	ldr	r3, [pc, #100]	; (3f8 <ADC_0_init+0x78>)
     392:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     396:	4e19      	ldr	r6, [pc, #100]	; (3fc <ADC_0_init+0x7c>)
     398:	4d19      	ldr	r5, [pc, #100]	; (400 <ADC_0_init+0x80>)
     39a:	2400      	movs	r4, #0
     39c:	9402      	str	r4, [sp, #8]
     39e:	4b19      	ldr	r3, [pc, #100]	; (404 <ADC_0_init+0x84>)
     3a0:	9301      	str	r3, [sp, #4]
     3a2:	2301      	movs	r3, #1
     3a4:	9300      	str	r3, [sp, #0]
     3a6:	4623      	mov	r3, r4
     3a8:	4632      	mov	r2, r6
     3aa:	4917      	ldr	r1, [pc, #92]	; (408 <ADC_0_init+0x88>)
     3ac:	4628      	mov	r0, r5
     3ae:	4f17      	ldr	r7, [pc, #92]	; (40c <ADC_0_init+0x8c>)
     3b0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3b2:	2310      	movs	r3, #16
     3b4:	1d32      	adds	r2, r6, #4
     3b6:	4621      	mov	r1, r4
     3b8:	4628      	mov	r0, r5
     3ba:	4c15      	ldr	r4, [pc, #84]	; (410 <ADC_0_init+0x90>)
     3bc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <ADC_0_init+0x94>)
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c8:	629a      	str	r2, [r3, #40]	; 0x28
     3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3ce:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e4:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e8:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	2000059c 	.word	0x2000059c
     400:	20001428 	.word	0x20001428
     404:	20001520 	.word	0x20001520
     408:	43001c00 	.word	0x43001c00
     40c:	00000fb5 	.word	0x00000fb5
     410:	00001059 	.word	0x00001059
     414:	41008000 	.word	0x41008000

00000418 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     41c:	4a1e      	ldr	r2, [pc, #120]	; (498 <ADC_1_init+0x80>)
     41e:	6a13      	ldr	r3, [r2, #32]
     420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     424:	6213      	str	r3, [r2, #32]
     426:	2241      	movs	r2, #65	; 0x41
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <ADC_1_init+0x84>)
     42a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     42e:	4e1c      	ldr	r6, [pc, #112]	; (4a0 <ADC_1_init+0x88>)
     430:	4d1c      	ldr	r5, [pc, #112]	; (4a4 <ADC_1_init+0x8c>)
     432:	2400      	movs	r4, #0
     434:	9402      	str	r4, [sp, #8]
     436:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <ADC_1_init+0x90>)
     438:	9301      	str	r3, [sp, #4]
     43a:	2301      	movs	r3, #1
     43c:	9300      	str	r3, [sp, #0]
     43e:	4623      	mov	r3, r4
     440:	f106 0214 	add.w	r2, r6, #20
     444:	4919      	ldr	r1, [pc, #100]	; (4ac <ADC_1_init+0x94>)
     446:	4628      	mov	r0, r5
     448:	4f19      	ldr	r7, [pc, #100]	; (4b0 <ADC_1_init+0x98>)
     44a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     44c:	2310      	movs	r3, #16
     44e:	f106 0218 	add.w	r2, r6, #24
     452:	4621      	mov	r1, r4
     454:	4628      	mov	r0, r5
     456:	4c17      	ldr	r4, [pc, #92]	; (4b4 <ADC_1_init+0x9c>)
     458:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	4b17      	ldr	r3, [pc, #92]	; (4b8 <ADC_1_init+0xa0>)
     45c:	2204      	movs	r2, #4
     45e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     462:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     466:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     46a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     472:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     492:	b005      	add	sp, #20
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	bf00      	nop
     498:	40000800 	.word	0x40000800
     49c:	40001c00 	.word	0x40001c00
     4a0:	2000059c 	.word	0x2000059c
     4a4:	200015f8 	.word	0x200015f8
     4a8:	20001380 	.word	0x20001380
     4ac:	43002000 	.word	0x43002000
     4b0:	00000fb5 	.word	0x00000fb5
     4b4:	00001059 	.word	0x00001059
     4b8:	41008000 	.word	0x41008000

000004bc <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4be:	4a05      	ldr	r2, [pc, #20]	; (4d4 <CRC_0_init+0x18>)
     4c0:	6993      	ldr	r3, [r2, #24]
     4c2:	f043 0302 	orr.w	r3, r3, #2
     4c6:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4c8:	4903      	ldr	r1, [pc, #12]	; (4d8 <CRC_0_init+0x1c>)
     4ca:	4804      	ldr	r0, [pc, #16]	; (4dc <CRC_0_init+0x20>)
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <CRC_0_init+0x24>)
     4ce:	4798      	blx	r3
     4d0:	bd08      	pop	{r3, pc}
     4d2:	bf00      	nop
     4d4:	40000800 	.word	0x40000800
     4d8:	41002000 	.word	0x41002000
     4dc:	2000137c 	.word	0x2000137c
     4e0:	000012f5 	.word	0x000012f5

000004e4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4e4:	b508      	push	{r3, lr}
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <EVENT_SYSTEM_0_init+0x28>)
     4e8:	2240      	movs	r2, #64	; 0x40
     4ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4fa:	4a05      	ldr	r2, [pc, #20]	; (510 <EVENT_SYSTEM_0_init+0x2c>)
     4fc:	6993      	ldr	r3, [r2, #24]
     4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     502:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     504:	4b03      	ldr	r3, [pc, #12]	; (514 <EVENT_SYSTEM_0_init+0x30>)
     506:	4798      	blx	r3
     508:	bd08      	pop	{r3, pc}
     50a:	bf00      	nop
     50c:	40001c00 	.word	0x40001c00
     510:	40000800 	.word	0x40000800
     514:	00001379 	.word	0x00001379

00000518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     518:	4a02      	ldr	r2, [pc, #8]	; (524 <FLASH_0_CLOCK_init+0xc>)
     51a:	6913      	ldr	r3, [r2, #16]
     51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     520:	6113      	str	r3, [r2, #16]
     522:	4770      	bx	lr
     524:	40000800 	.word	0x40000800

00000528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <FLASH_0_init+0x10>)
     52c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     52e:	4903      	ldr	r1, [pc, #12]	; (53c <FLASH_0_init+0x14>)
     530:	4803      	ldr	r0, [pc, #12]	; (540 <FLASH_0_init+0x18>)
     532:	4b04      	ldr	r3, [pc, #16]	; (544 <FLASH_0_init+0x1c>)
     534:	4798      	blx	r3
     536:	bd08      	pop	{r3, pc}
     538:	00000519 	.word	0x00000519
     53c:	41004000 	.word	0x41004000
     540:	20001360 	.word	0x20001360
     544:	00001399 	.word	0x00001399

00000548 <USART_EAST_CLOCK_init>:
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <USART_EAST_CLOCK_init+0x1c>)
     54a:	2241      	movs	r2, #65	; 0x41
     54c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     550:	2242      	movs	r2, #66	; 0x42
     552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     556:	4a04      	ldr	r2, [pc, #16]	; (568 <USART_EAST_CLOCK_init+0x20>)
     558:	6953      	ldr	r3, [r2, #20]
     55a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     55e:	6153      	str	r3, [r2, #20]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	40001c00 	.word	0x40001c00
     568:	40000800 	.word	0x40000800

0000056c <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <USART_EAST_PORT_init+0x44>)
     56e:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     582:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     586:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     5ae:	4770      	bx	lr
     5b0:	41008000 	.word	0x41008000

000005b4 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <USART_EAST_init+0x20>)
     5ba:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     5bc:	2300      	movs	r3, #0
     5be:	9300      	str	r3, [sp, #0]
     5c0:	2310      	movs	r3, #16
     5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <USART_EAST_init+0x24>)
     5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <USART_EAST_init+0x28>)
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <USART_EAST_init+0x2c>)
     5c8:	4c06      	ldr	r4, [pc, #24]	; (5e4 <USART_EAST_init+0x30>)
     5ca:	47a0      	blx	r4
	USART_EAST_PORT_init();
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <USART_EAST_init+0x34>)
     5ce:	4798      	blx	r3
}
     5d0:	b002      	add	sp, #8
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00000549 	.word	0x00000549
     5d8:	200005c4 	.word	0x200005c4
     5dc:	40003000 	.word	0x40003000
     5e0:	20001454 	.word	0x20001454
     5e4:	00001d89 	.word	0x00001d89
     5e8:	0000056d 	.word	0x0000056d

000005ec <USART_NORTH_CLOCK_init>:
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <USART_NORTH_CLOCK_init+0x1c>)
     5ee:	2241      	movs	r2, #65	; 0x41
     5f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5f4:	2242      	movs	r2, #66	; 0x42
     5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5fa:	4a04      	ldr	r2, [pc, #16]	; (60c <USART_NORTH_CLOCK_init+0x20>)
     5fc:	6953      	ldr	r3, [r2, #20]
     5fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     602:	6153      	str	r3, [r2, #20]
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40001c00 	.word	0x40001c00
     60c:	40000800 	.word	0x40000800

00000610 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <USART_NORTH_PORT_init+0x44>)
     612:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     646:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     652:	4770      	bx	lr
     654:	41008000 	.word	0x41008000

00000658 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     658:	b510      	push	{r4, lr}
     65a:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <USART_NORTH_init+0x20>)
     65e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     660:	2300      	movs	r3, #0
     662:	9300      	str	r3, [sp, #0]
     664:	2310      	movs	r3, #16
     666:	4a05      	ldr	r2, [pc, #20]	; (67c <USART_NORTH_init+0x24>)
     668:	4905      	ldr	r1, [pc, #20]	; (680 <USART_NORTH_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <USART_NORTH_init+0x2c>)
     66c:	4c06      	ldr	r4, [pc, #24]	; (688 <USART_NORTH_init+0x30>)
     66e:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <USART_NORTH_init+0x34>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	000005ed 	.word	0x000005ed
     67c:	200005d4 	.word	0x200005d4
     680:	40003400 	.word	0x40003400
     684:	200014a4 	.word	0x200014a4
     688:	00001d89 	.word	0x00001d89
     68c:	00000611 	.word	0x00000611

00000690 <GRID_AUX_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <GRID_AUX_CLOCK_init+0x1c>)
     692:	2241      	movs	r2, #65	; 0x41
     694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <GRID_AUX_CLOCK_init+0x20>)
     6a0:	6993      	ldr	r3, [r2, #24]
     6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6a6:	6193      	str	r3, [r2, #24]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <GRID_AUX_PORT_init+0x44>)
     6b6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <GRID_AUX_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GRID_AUX_init(void)
{
     6fc:	b510      	push	{r4, lr}
     6fe:	b082      	sub	sp, #8
	GRID_AUX_CLOCK_init();
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <GRID_AUX_init+0x20>)
     702:	4798      	blx	r3
	usart_async_init(&GRID_AUX, SERCOM2, GRID_AUX_buffer, GRID_AUX_BUFFER_SIZE, (void *)NULL);
     704:	2300      	movs	r3, #0
     706:	9300      	str	r3, [sp, #0]
     708:	2310      	movs	r3, #16
     70a:	4a05      	ldr	r2, [pc, #20]	; (720 <GRID_AUX_init+0x24>)
     70c:	4905      	ldr	r1, [pc, #20]	; (724 <GRID_AUX_init+0x28>)
     70e:	4806      	ldr	r0, [pc, #24]	; (728 <GRID_AUX_init+0x2c>)
     710:	4c06      	ldr	r4, [pc, #24]	; (72c <GRID_AUX_init+0x30>)
     712:	47a0      	blx	r4
	GRID_AUX_PORT_init();
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <GRID_AUX_init+0x34>)
     716:	4798      	blx	r3
}
     718:	b002      	add	sp, #8
     71a:	bd10      	pop	{r4, pc}
     71c:	00000691 	.word	0x00000691
     720:	200005e4 	.word	0x200005e4
     724:	41012000 	.word	0x41012000
     728:	200013d8 	.word	0x200013d8
     72c:	00001d89 	.word	0x00001d89
     730:	000006b5 	.word	0x000006b5

00000734 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     734:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <UI_SPI_PORT_init+0xb0>)
     736:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     73a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     746:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     74a:	4a27      	ldr	r2, [pc, #156]	; (7e8 <UI_SPI_PORT_init+0xb4>)
     74c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     780:	4a1a      	ldr	r2, [pc, #104]	; (7ec <UI_SPI_PORT_init+0xb8>)
     782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     786:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     78e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     792:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     796:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     79e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7a6:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <UI_SPI_PORT_init+0xbc>)
     7aa:	629a      	str	r2, [r3, #40]	; 0x28
     7ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     7b0:	3210      	adds	r2, #16
     7b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     7b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7d8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     7e0:	4770      	bx	lr
     7e2:	bf00      	nop
     7e4:	41008000 	.word	0x41008000
     7e8:	c0000010 	.word	0xc0000010
     7ec:	c0000020 	.word	0xc0000020
     7f0:	40020000 	.word	0x40020000

000007f4 <UI_SPI_CLOCK_init>:
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <UI_SPI_CLOCK_init+0x1c>)
     7f6:	2241      	movs	r2, #65	; 0x41
     7f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     7fc:	2243      	movs	r2, #67	; 0x43
     7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <UI_SPI_CLOCK_init+0x20>)
     804:	6993      	ldr	r3, [r2, #24]
     806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     80a:	6193      	str	r3, [r2, #24]
     80c:	4770      	bx	lr
     80e:	bf00      	nop
     810:	40001c00 	.word	0x40001c00
     814:	40000800 	.word	0x40000800

00000818 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     818:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     81a:	4b04      	ldr	r3, [pc, #16]	; (82c <UI_SPI_init+0x14>)
     81c:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     81e:	4904      	ldr	r1, [pc, #16]	; (830 <UI_SPI_init+0x18>)
     820:	4804      	ldr	r0, [pc, #16]	; (834 <UI_SPI_init+0x1c>)
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <UI_SPI_init+0x20>)
     824:	4798      	blx	r3
	UI_SPI_PORT_init();
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <UI_SPI_init+0x24>)
     828:	4798      	blx	r3
     82a:	bd08      	pop	{r3, pc}
     82c:	000007f5 	.word	0x000007f5
     830:	41014000 	.word	0x41014000
     834:	200012d8 	.word	0x200012d8
     838:	000016d5 	.word	0x000016d5
     83c:	00000735 	.word	0x00000735

00000840 <USART_WEST_CLOCK_init>:
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <USART_WEST_CLOCK_init+0x1c>)
     842:	2241      	movs	r2, #65	; 0x41
     844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     848:	2242      	movs	r2, #66	; 0x42
     84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     84e:	4a04      	ldr	r2, [pc, #16]	; (860 <USART_WEST_CLOCK_init+0x20>)
     850:	6a13      	ldr	r3, [r2, #32]
     852:	f043 0301 	orr.w	r3, r3, #1
     856:	6213      	str	r3, [r2, #32]
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	40001c00 	.word	0x40001c00
     860:	40000800 	.word	0x40000800

00000864 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	4b10      	ldr	r3, [pc, #64]	; (8a8 <USART_WEST_PORT_init+0x44>)
     866:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     86a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     872:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     876:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     886:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     88a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     88e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     892:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     896:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     89a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     89e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     8a6:	4770      	bx	lr
     8a8:	41008000 	.word	0x41008000

000008ac <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     8b0:	4b07      	ldr	r3, [pc, #28]	; (8d0 <USART_WEST_init+0x24>)
     8b2:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     8b4:	2300      	movs	r3, #0
     8b6:	9300      	str	r3, [sp, #0]
     8b8:	2310      	movs	r3, #16
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <USART_WEST_init+0x28>)
     8bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     8c0:	4805      	ldr	r0, [pc, #20]	; (8d8 <USART_WEST_init+0x2c>)
     8c2:	4c06      	ldr	r4, [pc, #24]	; (8dc <USART_WEST_init+0x30>)
     8c4:	47a0      	blx	r4
	USART_WEST_PORT_init();
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <USART_WEST_init+0x34>)
     8c8:	4798      	blx	r3
}
     8ca:	b002      	add	sp, #8
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	00000841 	.word	0x00000841
     8d4:	200005f4 	.word	0x200005f4
     8d8:	20001558 	.word	0x20001558
     8dc:	00001d89 	.word	0x00001d89
     8e0:	00000865 	.word	0x00000865

000008e4 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <SYS_I2C_PORT_init+0x5c>)
     8e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     8ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     8f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     902:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     906:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     90a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     90e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     912:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     916:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     91a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     926:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     92a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     932:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     936:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     93a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     93e:	4770      	bx	lr
     940:	41008000 	.word	0x41008000

00000944 <SYS_I2C_CLOCK_init>:
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <SYS_I2C_CLOCK_init+0x1c>)
     946:	2241      	movs	r2, #65	; 0x41
     948:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     94c:	2242      	movs	r2, #66	; 0x42
     94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     952:	4a04      	ldr	r2, [pc, #16]	; (964 <SYS_I2C_CLOCK_init+0x20>)
     954:	6a13      	ldr	r3, [r2, #32]
     956:	f043 0302 	orr.w	r3, r3, #2
     95a:	6213      	str	r3, [r2, #32]
     95c:	4770      	bx	lr
     95e:	bf00      	nop
     960:	40001c00 	.word	0x40001c00
     964:	40000800 	.word	0x40000800

00000968 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     968:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     96a:	4b04      	ldr	r3, [pc, #16]	; (97c <SYS_I2C_init+0x14>)
     96c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     96e:	4904      	ldr	r1, [pc, #16]	; (980 <SYS_I2C_init+0x18>)
     970:	4804      	ldr	r0, [pc, #16]	; (984 <SYS_I2C_init+0x1c>)
     972:	4b05      	ldr	r3, [pc, #20]	; (988 <SYS_I2C_init+0x20>)
     974:	4798      	blx	r3
	SYS_I2C_PORT_init();
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <SYS_I2C_init+0x24>)
     978:	4798      	blx	r3
     97a:	bd08      	pop	{r3, pc}
     97c:	00000945 	.word	0x00000945
     980:	43000400 	.word	0x43000400
     984:	20001398 	.word	0x20001398
     988:	00001479 	.word	0x00001479
     98c:	000008e5 	.word	0x000008e5

00000990 <USART_SOUTH_CLOCK_init>:
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <USART_SOUTH_CLOCK_init+0x1c>)
     992:	2241      	movs	r2, #65	; 0x41
     994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     998:	2242      	movs	r2, #66	; 0x42
     99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     99e:	4a04      	ldr	r2, [pc, #16]	; (9b0 <USART_SOUTH_CLOCK_init+0x20>)
     9a0:	6a13      	ldr	r3, [r2, #32]
     9a2:	f043 0304 	orr.w	r3, r3, #4
     9a6:	6213      	str	r3, [r2, #32]
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	40001c00 	.word	0x40001c00
     9b0:	40000800 	.word	0x40000800

000009b4 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b4:	4b10      	ldr	r3, [pc, #64]	; (9f8 <USART_SOUTH_PORT_init+0x44>)
     9b6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     9da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9e6:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9f2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     9f6:	4770      	bx	lr
     9f8:	41008000 	.word	0x41008000

000009fc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     a00:	4b06      	ldr	r3, [pc, #24]	; (a1c <USART_SOUTH_init+0x20>)
     a02:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     a04:	2300      	movs	r3, #0
     a06:	9300      	str	r3, [sp, #0]
     a08:	2310      	movs	r3, #16
     a0a:	4a05      	ldr	r2, [pc, #20]	; (a20 <USART_SOUTH_init+0x24>)
     a0c:	4905      	ldr	r1, [pc, #20]	; (a24 <USART_SOUTH_init+0x28>)
     a0e:	4806      	ldr	r0, [pc, #24]	; (a28 <USART_SOUTH_init+0x2c>)
     a10:	4c06      	ldr	r4, [pc, #24]	; (a2c <USART_SOUTH_init+0x30>)
     a12:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <USART_SOUTH_init+0x34>)
     a16:	4798      	blx	r3
}
     a18:	b002      	add	sp, #8
     a1a:	bd10      	pop	{r4, pc}
     a1c:	00000991 	.word	0x00000991
     a20:	20000604 	.word	0x20000604
     a24:	43000800 	.word	0x43000800
     a28:	200015a8 	.word	0x200015a8
     a2c:	00001d89 	.word	0x00001d89
     a30:	000009b5 	.word	0x000009b5

00000a34 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	4b29      	ldr	r3, [pc, #164]	; (adc <GRID_LED_PORT_init+0xa8>)
     a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a46:	4926      	ldr	r1, [pc, #152]	; (ae0 <GRID_LED_PORT_init+0xac>)
     a48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     a50:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a54:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a58:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5c:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a60:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a64:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a68:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a70:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     a7c:	4919      	ldr	r1, [pc, #100]	; (ae4 <GRID_LED_PORT_init+0xb0>)
     a7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8e:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a92:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9a:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a9e:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     aa8:	629a      	str	r2, [r3, #40]	; 0x28
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <GRID_LED_PORT_init+0xb4>)
     aac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aae:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     ab2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ab6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ada:	4770      	bx	lr
     adc:	41008000 	.word	0x41008000
     ae0:	c0004000 	.word	0xc0004000
     ae4:	c0008000 	.word	0xc0008000
     ae8:	c0024000 	.word	0xc0024000

00000aec <GRID_LED_CLOCK_init>:
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <GRID_LED_CLOCK_init+0x1c>)
     aee:	2241      	movs	r2, #65	; 0x41
     af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     af4:	2242      	movs	r2, #66	; 0x42
     af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <GRID_LED_CLOCK_init+0x20>)
     afc:	6a13      	ldr	r3, [r2, #32]
     afe:	f043 0308 	orr.w	r3, r3, #8
     b02:	6213      	str	r3, [r2, #32]
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	40001c00 	.word	0x40001c00
     b0c:	40000800 	.word	0x40000800

00000b10 <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     b10:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <GRID_LED_init+0x14>)
     b14:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     b16:	4904      	ldr	r1, [pc, #16]	; (b28 <GRID_LED_init+0x18>)
     b18:	4804      	ldr	r0, [pc, #16]	; (b2c <GRID_LED_init+0x1c>)
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <GRID_LED_init+0x20>)
     b1c:	4798      	blx	r3
	GRID_LED_PORT_init();
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <GRID_LED_init+0x24>)
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	00000aed 	.word	0x00000aed
     b28:	43000c00 	.word	0x43000c00
     b2c:	200014f4 	.word	0x200014f4
     b30:	000018fd 	.word	0x000018fd
     b34:	00000a35 	.word	0x00000a35

00000b38 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b38:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b3a:	4802      	ldr	r0, [pc, #8]	; (b44 <delay_driver_init+0xc>)
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <delay_driver_init+0x10>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	e000e010 	.word	0xe000e010
     b48:	00001325 	.word	0x00001325

00000b4c <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b58:	6299      	str	r1, [r3, #40]	; 0x28
     b5a:	481c      	ldr	r0, [pc, #112]	; (bcc <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     b5c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b74:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b84:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     b90:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	6299      	str	r1, [r3, #40]	; 0x28
     b94:	490e      	ldr	r1, [pc, #56]	; (bd0 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     b96:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b9a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bbe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     bc6:	4770      	bx	lr
     bc8:	41008000 	.word	0x41008000
     bcc:	c0000100 	.word	0xc0000100
     bd0:	c0000200 	.word	0xc0000200

00000bd4 <USB_DEVICE_INSTANCE_CLOCK_init>:
     bd4:	2241      	movs	r2, #65	; 0x41
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bdc:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     be0:	691a      	ldr	r2, [r3, #16]
     be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     be6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     be8:	699a      	ldr	r2, [r3, #24]
     bea:	f042 0201 	orr.w	r2, r2, #1
     bee:	619a      	str	r2, [r3, #24]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	40001c00 	.word	0x40001c00

00000bf8 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     bf8:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <USB_DEVICE_INSTANCE_init+0x10>)
     bfc:	4798      	blx	r3
	usb_d_init();
     bfe:	4b03      	ldr	r3, [pc, #12]	; (c0c <USB_DEVICE_INSTANCE_init+0x14>)
     c00:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <USB_DEVICE_INSTANCE_init+0x18>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	00000bd5 	.word	0x00000bd5
     c0c:	00002135 	.word	0x00002135
     c10:	00000b4d 	.word	0x00000b4d

00000c14 <system_init>:
}

void system_init(void)
{
     c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     c18:	4ba1      	ldr	r3, [pc, #644]	; (ea0 <system_init+0x28c>)
     c1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c1c:	4ba1      	ldr	r3, [pc, #644]	; (ea4 <system_init+0x290>)
     c1e:	2220      	movs	r2, #32
     c20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c28:	629a      	str	r2, [r3, #40]	; 0x28
     c2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     c2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     c34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     c40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	4e99      	ldr	r6, [pc, #612]	; (ea8 <system_init+0x294>)
     c44:	629e      	str	r6, [r3, #40]	; 0x28
     c46:	4999      	ldr	r1, [pc, #612]	; (eac <system_init+0x298>)
     c48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     c4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     c5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c62:	2180      	movs	r1, #128	; 0x80
     c64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     c6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     c70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c74:	4d8e      	ldr	r5, [pc, #568]	; (eb0 <system_init+0x29c>)
     c76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     c7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     c82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     c96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ca2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ca6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     caa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     cae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     cba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cbe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cc2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     cc6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     cca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cce:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     cd2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     cde:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce2:	4c74      	ldr	r4, [pc, #464]	; (eb4 <system_init+0x2a0>)
     ce4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ce8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     cf0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     cf4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     cfc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d04:	f44f 6400 	mov.w	r4, #2048	; 0x800
     d08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d0c:	f8df e22c 	ldr.w	lr, [pc, #556]	; f3c <system_init+0x328>
     d10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     d14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     d20:	f045 0504 	orr.w	r5, r5, #4
     d24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     d30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     d44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     d60:	4a55      	ldr	r2, [pc, #340]	; (eb8 <system_init+0x2a4>)
     d62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     d82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d92:	494a      	ldr	r1, [pc, #296]	; (ebc <system_init+0x2a8>)
     d94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     d9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     da4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     da8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     db4:	4942      	ldr	r1, [pc, #264]	; (ec0 <system_init+0x2ac>)
     db6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     dbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     dd2:	4a3c      	ldr	r2, [pc, #240]	; (ec4 <system_init+0x2b0>)
     dd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     de0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     de4:	4b38      	ldr	r3, [pc, #224]	; (ec8 <system_init+0x2b4>)
     de6:	4798      	blx	r3
	ADC_1_init();
     de8:	4b38      	ldr	r3, [pc, #224]	; (ecc <system_init+0x2b8>)
     dea:	4798      	blx	r3

	CRC_0_init();
     dec:	4b38      	ldr	r3, [pc, #224]	; (ed0 <system_init+0x2bc>)
     dee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     df0:	4b38      	ldr	r3, [pc, #224]	; (ed4 <system_init+0x2c0>)
     df2:	4798      	blx	r3

	FLASH_0_init();
     df4:	4b38      	ldr	r3, [pc, #224]	; (ed8 <system_init+0x2c4>)
     df6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     df8:	4c38      	ldr	r4, [pc, #224]	; (edc <system_init+0x2c8>)
     dfa:	6963      	ldr	r3, [r4, #20]
     dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     e00:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
     e02:	4b37      	ldr	r3, [pc, #220]	; (ee0 <system_init+0x2cc>)
     e04:	4798      	blx	r3
     e06:	4602      	mov	r2, r0
     e08:	4936      	ldr	r1, [pc, #216]	; (ee4 <system_init+0x2d0>)
     e0a:	4837      	ldr	r0, [pc, #220]	; (ee8 <system_init+0x2d4>)
     e0c:	4d37      	ldr	r5, [pc, #220]	; (eec <system_init+0x2d8>)
     e0e:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
     e10:	4b37      	ldr	r3, [pc, #220]	; (ef0 <system_init+0x2dc>)
     e12:	4798      	blx	r3
	USART_NORTH_init();
     e14:	4b37      	ldr	r3, [pc, #220]	; (ef4 <system_init+0x2e0>)
     e16:	4798      	blx	r3
	GRID_AUX_init();
     e18:	4b37      	ldr	r3, [pc, #220]	; (ef8 <system_init+0x2e4>)
     e1a:	4798      	blx	r3

	UI_SPI_init();
     e1c:	4b37      	ldr	r3, [pc, #220]	; (efc <system_init+0x2e8>)
     e1e:	4798      	blx	r3
	USART_WEST_init();
     e20:	4b37      	ldr	r3, [pc, #220]	; (f00 <system_init+0x2ec>)
     e22:	4798      	blx	r3

	SYS_I2C_init();
     e24:	4b37      	ldr	r3, [pc, #220]	; (f04 <system_init+0x2f0>)
     e26:	4798      	blx	r3
	USART_SOUTH_init();
     e28:	4b37      	ldr	r3, [pc, #220]	; (f08 <system_init+0x2f4>)
     e2a:	4798      	blx	r3

	GRID_LED_init();
     e2c:	4b37      	ldr	r3, [pc, #220]	; (f0c <system_init+0x2f8>)
     e2e:	4798      	blx	r3

	delay_driver_init();
     e30:	4b37      	ldr	r3, [pc, #220]	; (f10 <system_init+0x2fc>)
     e32:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     e34:	6963      	ldr	r3, [r4, #20]
     e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e3a:	6163      	str	r3, [r4, #20]
     e3c:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
     e40:	f04f 0840 	mov.w	r8, #64	; 0x40
     e44:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     e48:	4e32      	ldr	r6, [pc, #200]	; (f14 <system_init+0x300>)
     e4a:	47b0      	blx	r6
     e4c:	4602      	mov	r2, r0
     e4e:	4932      	ldr	r1, [pc, #200]	; (f18 <system_init+0x304>)
     e50:	4832      	ldr	r0, [pc, #200]	; (f1c <system_init+0x308>)
     e52:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     e54:	6963      	ldr	r3, [r4, #20]
     e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e5a:	6163      	str	r3, [r4, #20]
     e5c:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
     e60:	47b0      	blx	r6
     e62:	4602      	mov	r2, r0
     e64:	492e      	ldr	r1, [pc, #184]	; (f20 <system_init+0x30c>)
     e66:	482f      	ldr	r0, [pc, #188]	; (f24 <system_init+0x310>)
     e68:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     e6a:	69a3      	ldr	r3, [r4, #24]
     e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e70:	61a3      	str	r3, [r4, #24]
     e72:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
     e76:	47b0      	blx	r6
     e78:	4602      	mov	r2, r0
     e7a:	492b      	ldr	r1, [pc, #172]	; (f28 <system_init+0x314>)
     e7c:	482b      	ldr	r0, [pc, #172]	; (f2c <system_init+0x318>)
     e7e:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     e80:	69a3      	ldr	r3, [r4, #24]
     e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e86:	61a3      	str	r3, [r4, #24]
     e88:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
     e8c:	47b0      	blx	r6
     e8e:	4602      	mov	r2, r0
     e90:	4927      	ldr	r1, [pc, #156]	; (f30 <system_init+0x31c>)
     e92:	4828      	ldr	r0, [pc, #160]	; (f34 <system_init+0x320>)
     e94:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
     e96:	4b28      	ldr	r3, [pc, #160]	; (f38 <system_init+0x324>)
     e98:	4798      	blx	r3
     e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e9e:	bf00      	nop
     ea0:	00002a2d 	.word	0x00002a2d
     ea4:	41008000 	.word	0x41008000
     ea8:	40020000 	.word	0x40020000
     eac:	c0020020 	.word	0xc0020020
     eb0:	c0020000 	.word	0xc0020000
     eb4:	40028000 	.word	0x40028000
     eb8:	c0020004 	.word	0xc0020004
     ebc:	c0000008 	.word	0xc0000008
     ec0:	c0000010 	.word	0xc0000010
     ec4:	c0000020 	.word	0xc0000020
     ec8:	00000381 	.word	0x00000381
     ecc:	00000419 	.word	0x00000419
     ed0:	000004bd 	.word	0x000004bd
     ed4:	000004e5 	.word	0x000004e5
     ed8:	00000529 	.word	0x00000529
     edc:	40000800 	.word	0x40000800
     ee0:	00003211 	.word	0x00003211
     ee4:	40002400 	.word	0x40002400
     ee8:	20001320 	.word	0x20001320
     eec:	00001aa5 	.word	0x00001aa5
     ef0:	000005b5 	.word	0x000005b5
     ef4:	00000659 	.word	0x00000659
     ef8:	000006fd 	.word	0x000006fd
     efc:	00000819 	.word	0x00000819
     f00:	000008ad 	.word	0x000008ad
     f04:	00000969 	.word	0x00000969
     f08:	000009fd 	.word	0x000009fd
     f0c:	00000b11 	.word	0x00000b11
     f10:	00000b39 	.word	0x00000b39
     f14:	00004a15 	.word	0x00004a15
     f18:	40003800 	.word	0x40003800
     f1c:	20001644 	.word	0x20001644
     f20:	40003c00 	.word	0x40003c00
     f24:	20001538 	.word	0x20001538
     f28:	4101a000 	.word	0x4101a000
     f2c:	20001340 	.word	0x20001340
     f30:	4101c000 	.word	0x4101c000
     f34:	20001624 	.word	0x20001624
     f38:	00000bf9 	.word	0x00000bf9
     f3c:	40020800 	.word	0x40020800

00000f40 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     f40:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     f42:	6983      	ldr	r3, [r0, #24]
     f44:	b103      	cbz	r3, f48 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     f46:	4798      	blx	r3
     f48:	bd08      	pop	{r3, pc}

00000f4a <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     f4a:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     f4c:	69c3      	ldr	r3, [r0, #28]
     f4e:	b103      	cbz	r3, f52 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     f50:	4798      	blx	r3
     f52:	bd08      	pop	{r3, pc}

00000f54 <adc_async_channel_conversion_done>:
{
     f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f58:	4606      	mov	r6, r0
     f5a:	460f      	mov	r7, r1
     f5c:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     f5e:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     f60:	5c5c      	ldrb	r4, [r3, r1]
     f62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     f66:	00e4      	lsls	r4, r4, #3
     f68:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     f6c:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     f70:	f105 0a04 	add.w	sl, r5, #4
     f74:	b2d1      	uxtb	r1, r2
     f76:	4650      	mov	r0, sl
     f78:	4b0c      	ldr	r3, [pc, #48]	; (fac <adc_async_channel_conversion_done+0x58>)
     f7a:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     f7c:	4630      	mov	r0, r6
     f7e:	4b0c      	ldr	r3, [pc, #48]	; (fb0 <adc_async_channel_conversion_done+0x5c>)
     f80:	4798      	blx	r3
     f82:	2801      	cmp	r0, #1
     f84:	d907      	bls.n	f96 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     f86:	ea4f 2119 	mov.w	r1, r9, lsr #8
     f8a:	4650      	mov	r0, sl
     f8c:	4b07      	ldr	r3, [pc, #28]	; (fac <adc_async_channel_conversion_done+0x58>)
     f8e:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     f90:	8aab      	ldrh	r3, [r5, #20]
     f92:	3301      	adds	r3, #1
     f94:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     f96:	8aab      	ldrh	r3, [r5, #20]
     f98:	3301      	adds	r3, #1
     f9a:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     f9c:	f858 3004 	ldr.w	r3, [r8, r4]
     fa0:	b113      	cbz	r3, fa8 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     fa2:	4639      	mov	r1, r7
     fa4:	4630      	mov	r0, r6
     fa6:	4798      	blx	r3
     fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     fac:	000025bd 	.word	0x000025bd
     fb0:	00002943 	.word	0x00002943

00000fb4 <adc_async_init>:
{
     fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fb8:	4689      	mov	r9, r1
     fba:	4616      	mov	r6, r2
     fbc:	461c      	mov	r4, r3
     fbe:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     fc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     fc4:	4607      	mov	r7, r0
     fc6:	b140      	cbz	r0, fda <adc_async_init+0x26>
     fc8:	b149      	cbz	r1, fde <adc_async_init+0x2a>
     fca:	b152      	cbz	r2, fe2 <adc_async_init+0x2e>
     fcc:	f1b8 0f00 	cmp.w	r8, #0
     fd0:	d009      	beq.n	fe6 <adc_async_init+0x32>
     fd2:	1c28      	adds	r0, r5, #0
     fd4:	bf18      	it	ne
     fd6:	2001      	movne	r0, #1
     fd8:	e006      	b.n	fe8 <adc_async_init+0x34>
     fda:	2000      	movs	r0, #0
     fdc:	e004      	b.n	fe8 <adc_async_init+0x34>
     fde:	2000      	movs	r0, #0
     fe0:	e002      	b.n	fe8 <adc_async_init+0x34>
     fe2:	2000      	movs	r0, #0
     fe4:	e000      	b.n	fe8 <adc_async_init+0x34>
     fe6:	2000      	movs	r0, #0
     fe8:	f8df b064 	ldr.w	fp, [pc, #100]	; 1050 <adc_async_init+0x9c>
     fec:	223f      	movs	r2, #63	; 0x3f
     fee:	4659      	mov	r1, fp
     ff0:	f8df a060 	ldr.w	sl, [pc, #96]	; 1054 <adc_async_init+0xa0>
     ff4:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     ff6:	1c60      	adds	r0, r4, #1
     ff8:	2240      	movs	r2, #64	; 0x40
     ffa:	4659      	mov	r1, fp
     ffc:	4580      	cmp	r8, r0
     ffe:	bfcc      	ite	gt
    1000:	2000      	movgt	r0, #0
    1002:	2001      	movle	r0, #1
    1004:	47d0      	blx	sl
	device = &descr->device;
    1006:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    1008:	21ff      	movs	r1, #255	; 0xff
    100a:	b2da      	uxtb	r2, r3
    100c:	54b1      	strb	r1, [r6, r2]
    100e:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    1010:	b2da      	uxtb	r2, r3
    1012:	42a2      	cmp	r2, r4
    1014:	d9f9      	bls.n	100a <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    1016:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    1018:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    101c:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    1020:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    1022:	4649      	mov	r1, r9
    1024:	4638      	mov	r0, r7
    1026:	4b06      	ldr	r3, [pc, #24]	; (1040 <adc_async_init+0x8c>)
    1028:	4798      	blx	r3
	if (init_status) {
    102a:	4603      	mov	r3, r0
    102c:	b928      	cbnz	r0, 103a <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    102e:	4a05      	ldr	r2, [pc, #20]	; (1044 <adc_async_init+0x90>)
    1030:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    1032:	4a05      	ldr	r2, [pc, #20]	; (1048 <adc_async_init+0x94>)
    1034:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    1036:	4a05      	ldr	r2, [pc, #20]	; (104c <adc_async_init+0x98>)
    1038:	607a      	str	r2, [r7, #4]
}
    103a:	4618      	mov	r0, r3
    103c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1040:	00002811 	.word	0x00002811
    1044:	00000f55 	.word	0x00000f55
    1048:	00000f41 	.word	0x00000f41
    104c:	00000f4b 	.word	0x00000f4b
    1050:	0000ab64 	.word	0x0000ab64
    1054:	00002481 	.word	0x00002481

00001058 <adc_async_register_channel_buffer>:
{
    1058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    105c:	460e      	mov	r6, r1
    105e:	4617      	mov	r7, r2
    1060:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    1062:	4605      	mov	r5, r0
    1064:	2800      	cmp	r0, #0
    1066:	d040      	beq.n	10ea <adc_async_register_channel_buffer+0x92>
    1068:	2a00      	cmp	r2, #0
    106a:	d040      	beq.n	10ee <adc_async_register_channel_buffer+0x96>
    106c:	1c18      	adds	r0, r3, #0
    106e:	bf18      	it	ne
    1070:	2001      	movne	r0, #1
    1072:	f8df 9098 	ldr.w	r9, [pc, #152]	; 110c <adc_async_register_channel_buffer+0xb4>
    1076:	2266      	movs	r2, #102	; 0x66
    1078:	4649      	mov	r1, r9
    107a:	4c22      	ldr	r4, [pc, #136]	; (1104 <adc_async_register_channel_buffer+0xac>)
    107c:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    107e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    1082:	2267      	movs	r2, #103	; 0x67
    1084:	4649      	mov	r1, r9
    1086:	42b0      	cmp	r0, r6
    1088:	bf34      	ite	cc
    108a:	2000      	movcc	r0, #0
    108c:	2001      	movcs	r0, #1
    108e:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    1090:	6a29      	ldr	r1, [r5, #32]
    1092:	5d8b      	ldrb	r3, [r1, r6]
    1094:	2bff      	cmp	r3, #255	; 0xff
    1096:	d12c      	bne.n	10f2 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    1098:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    109c:	2300      	movs	r3, #0
    109e:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    10a0:	b2da      	uxtb	r2, r3
    10a2:	5c8a      	ldrb	r2, [r1, r2]
    10a4:	2aff      	cmp	r2, #255	; 0xff
			index++;
    10a6:	bf1c      	itt	ne
    10a8:	3401      	addne	r4, #1
    10aa:	b2e4      	uxtbne	r4, r4
    10ac:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    10ae:	b2da      	uxtb	r2, r3
    10b0:	4282      	cmp	r2, r0
    10b2:	d9f5      	bls.n	10a0 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    10b4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    10b8:	42a3      	cmp	r3, r4
    10ba:	d31d      	bcc.n	10f8 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    10bc:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    10c0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    10c4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    10c6:	4448      	add	r0, r9
    10c8:	4642      	mov	r2, r8
    10ca:	4639      	mov	r1, r7
    10cc:	3004      	adds	r0, #4
    10ce:	4b0e      	ldr	r3, [pc, #56]	; (1108 <adc_async_register_channel_buffer+0xb0>)
    10d0:	4798      	blx	r3
    10d2:	4602      	mov	r2, r0
    10d4:	b998      	cbnz	r0, 10fe <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    10d6:	6a2b      	ldr	r3, [r5, #32]
    10d8:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    10da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    10dc:	4499      	add	r9, r3
    10de:	2300      	movs	r3, #0
    10e0:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    10e4:	4610      	mov	r0, r2
    10e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    10ea:	2000      	movs	r0, #0
    10ec:	e7c1      	b.n	1072 <adc_async_register_channel_buffer+0x1a>
    10ee:	2000      	movs	r0, #0
    10f0:	e7bf      	b.n	1072 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    10f2:	f06f 020c 	mvn.w	r2, #12
    10f6:	e7f5      	b.n	10e4 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    10f8:	f06f 021b 	mvn.w	r2, #27
    10fc:	e7f2      	b.n	10e4 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    10fe:	f06f 020c 	mvn.w	r2, #12
    1102:	e7ef      	b.n	10e4 <adc_async_register_channel_buffer+0x8c>
    1104:	00002481 	.word	0x00002481
    1108:	00002529 	.word	0x00002529
    110c:	0000ab64 	.word	0x0000ab64

00001110 <adc_async_enable_channel>:
{
    1110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1112:	460d      	mov	r5, r1
	ASSERT(descr);
    1114:	4f0b      	ldr	r7, [pc, #44]	; (1144 <adc_async_enable_channel+0x34>)
    1116:	4604      	mov	r4, r0
    1118:	2283      	movs	r2, #131	; 0x83
    111a:	4639      	mov	r1, r7
    111c:	3000      	adds	r0, #0
    111e:	bf18      	it	ne
    1120:	2001      	movne	r0, #1
    1122:	4e09      	ldr	r6, [pc, #36]	; (1148 <adc_async_enable_channel+0x38>)
    1124:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    1126:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    112a:	2284      	movs	r2, #132	; 0x84
    112c:	4639      	mov	r1, r7
    112e:	42a8      	cmp	r0, r5
    1130:	bf34      	ite	cc
    1132:	2000      	movcc	r0, #0
    1134:	2001      	movcs	r0, #1
    1136:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    1138:	4629      	mov	r1, r5
    113a:	4620      	mov	r0, r4
    113c:	4b03      	ldr	r3, [pc, #12]	; (114c <adc_async_enable_channel+0x3c>)
    113e:	4798      	blx	r3
}
    1140:	2000      	movs	r0, #0
    1142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1144:	0000ab64 	.word	0x0000ab64
    1148:	00002481 	.word	0x00002481
    114c:	0000292d 	.word	0x0000292d

00001150 <adc_async_register_callback>:
{
    1150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1154:	460e      	mov	r6, r1
    1156:	4614      	mov	r4, r2
    1158:	4699      	mov	r9, r3
	ASSERT(descr);
    115a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 11cc <adc_async_register_callback+0x7c>
    115e:	4605      	mov	r5, r0
    1160:	229c      	movs	r2, #156	; 0x9c
    1162:	4641      	mov	r1, r8
    1164:	3000      	adds	r0, #0
    1166:	bf18      	it	ne
    1168:	2001      	movne	r0, #1
    116a:	4f16      	ldr	r7, [pc, #88]	; (11c4 <adc_async_register_callback+0x74>)
    116c:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    116e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    1172:	229d      	movs	r2, #157	; 0x9d
    1174:	4641      	mov	r1, r8
    1176:	42b0      	cmp	r0, r6
    1178:	bf34      	ite	cc
    117a:	2000      	movcc	r0, #0
    117c:	2001      	movcs	r0, #1
    117e:	47b8      	blx	r7
	switch (type) {
    1180:	2c01      	cmp	r4, #1
    1182:	d019      	beq.n	11b8 <adc_async_register_callback+0x68>
    1184:	b12c      	cbz	r4, 1192 <adc_async_register_callback+0x42>
    1186:	2c02      	cmp	r4, #2
    1188:	d019      	beq.n	11be <adc_async_register_callback+0x6e>
		return ERR_INVALID_ARG;
    118a:	f06f 000c 	mvn.w	r0, #12
}
    118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint8_t index = descr->channel_map[channel];
    1192:	6a2b      	ldr	r3, [r5, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    1194:	5d9b      	ldrb	r3, [r3, r6]
    1196:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    119c:	f842 9033 	str.w	r9, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    11a0:	f119 0300 	adds.w	r3, r9, #0
    11a4:	bf18      	it	ne
    11a6:	2301      	movne	r3, #1
    11a8:	4622      	mov	r2, r4
    11aa:	4631      	mov	r1, r6
    11ac:	4628      	mov	r0, r5
    11ae:	4c06      	ldr	r4, [pc, #24]	; (11c8 <adc_async_register_callback+0x78>)
    11b0:	47a0      	blx	r4
	return ERR_NONE;
    11b2:	2000      	movs	r0, #0
    11b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    11b8:	f8c5 9018 	str.w	r9, [r5, #24]
		break;
    11bc:	e7f0      	b.n	11a0 <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
    11be:	f8c5 901c 	str.w	r9, [r5, #28]
		break;
    11c2:	e7ed      	b.n	11a0 <adc_async_register_callback+0x50>
    11c4:	00002481 	.word	0x00002481
    11c8:	0000296b 	.word	0x0000296b
    11cc:	0000ab64 	.word	0x0000ab64

000011d0 <adc_async_read_channel>:
{
    11d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11d4:	b083      	sub	sp, #12
    11d6:	4688      	mov	r8, r1
    11d8:	4691      	mov	r9, r2
    11da:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    11dc:	4604      	mov	r4, r0
    11de:	2800      	cmp	r0, #0
    11e0:	d04f      	beq.n	1282 <adc_async_read_channel+0xb2>
    11e2:	2a00      	cmp	r2, #0
    11e4:	d04f      	beq.n	1286 <adc_async_read_channel+0xb6>
    11e6:	1c18      	adds	r0, r3, #0
    11e8:	bf18      	it	ne
    11ea:	2001      	movne	r0, #1
    11ec:	4f29      	ldr	r7, [pc, #164]	; (1294 <adc_async_read_channel+0xc4>)
    11ee:	22bc      	movs	r2, #188	; 0xbc
    11f0:	4639      	mov	r1, r7
    11f2:	4e29      	ldr	r6, [pc, #164]	; (1298 <adc_async_read_channel+0xc8>)
    11f4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    11f6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    11fa:	22bd      	movs	r2, #189	; 0xbd
    11fc:	4639      	mov	r1, r7
    11fe:	4540      	cmp	r0, r8
    1200:	bf34      	ite	cc
    1202:	2000      	movcc	r0, #0
    1204:	2001      	movcs	r0, #1
    1206:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    1208:	4620      	mov	r0, r4
    120a:	4b24      	ldr	r3, [pc, #144]	; (129c <adc_async_read_channel+0xcc>)
    120c:	4798      	blx	r3
	ASSERT(!(length % data_size));
    120e:	fb95 f3f0 	sdiv	r3, r5, r0
    1212:	fb03 5010 	mls	r0, r3, r0, r5
    1216:	22bf      	movs	r2, #191	; 0xbf
    1218:	4639      	mov	r1, r7
    121a:	fab0 f080 	clz	r0, r0
    121e:	0940      	lsrs	r0, r0, #5
    1220:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    1222:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    1224:	f813 b008 	ldrb.w	fp, [r3, r8]
    1228:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    122c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    122e:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    1232:	a801      	add	r0, sp, #4
    1234:	4b1a      	ldr	r3, [pc, #104]	; (12a0 <adc_async_read_channel+0xd0>)
    1236:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    1238:	f10b 0a04 	add.w	sl, fp, #4
    123c:	4650      	mov	r0, sl
    123e:	4b19      	ldr	r3, [pc, #100]	; (12a4 <adc_async_read_channel+0xd4>)
    1240:	4798      	blx	r3
    1242:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    1244:	a801      	add	r0, sp, #4
    1246:	4b18      	ldr	r3, [pc, #96]	; (12a8 <adc_async_read_channel+0xd8>)
    1248:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    124a:	f1b8 0f00 	cmp.w	r8, #0
    124e:	d01c      	beq.n	128a <adc_async_read_channel+0xba>
    1250:	b1ed      	cbz	r5, 128e <adc_async_read_channel+0xbe>
    1252:	3d01      	subs	r5, #1
    1254:	b2ad      	uxth	r5, r5
    1256:	3502      	adds	r5, #2
    1258:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    125a:	4f14      	ldr	r7, [pc, #80]	; (12ac <adc_async_read_channel+0xdc>)
    125c:	b2a6      	uxth	r6, r4
    125e:	1e61      	subs	r1, r4, #1
    1260:	4449      	add	r1, r9
    1262:	4650      	mov	r0, sl
    1264:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    1266:	4544      	cmp	r4, r8
    1268:	d002      	beq.n	1270 <adc_async_read_channel+0xa0>
    126a:	3401      	adds	r4, #1
    126c:	42ac      	cmp	r4, r5
    126e:	d1f5      	bne.n	125c <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    1270:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    1274:	1b9b      	subs	r3, r3, r6
    1276:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    127a:	4630      	mov	r0, r6
    127c:	b003      	add	sp, #12
    127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT(descr && buffer && length);
    1282:	2000      	movs	r0, #0
    1284:	e7b2      	b.n	11ec <adc_async_read_channel+0x1c>
    1286:	2000      	movs	r0, #0
    1288:	e7b0      	b.n	11ec <adc_async_read_channel+0x1c>
	uint16_t was_read = 0;
    128a:	2600      	movs	r6, #0
    128c:	e7f0      	b.n	1270 <adc_async_read_channel+0xa0>
    128e:	2600      	movs	r6, #0
    1290:	e7ee      	b.n	1270 <adc_async_read_channel+0xa0>
    1292:	bf00      	nop
    1294:	0000ab64 	.word	0x0000ab64
    1298:	00002481 	.word	0x00002481
    129c:	00002943 	.word	0x00002943
    12a0:	000012d9 	.word	0x000012d9
    12a4:	000025fd 	.word	0x000025fd
    12a8:	000012e7 	.word	0x000012e7
    12ac:	00002579 	.word	0x00002579

000012b0 <adc_async_start_conversion>:
{
    12b0:	b510      	push	{r4, lr}
	ASSERT(descr);
    12b2:	4604      	mov	r4, r0
    12b4:	22d6      	movs	r2, #214	; 0xd6
    12b6:	4905      	ldr	r1, [pc, #20]	; (12cc <adc_async_start_conversion+0x1c>)
    12b8:	3000      	adds	r0, #0
    12ba:	bf18      	it	ne
    12bc:	2001      	movne	r0, #1
    12be:	4b04      	ldr	r3, [pc, #16]	; (12d0 <adc_async_start_conversion+0x20>)
    12c0:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    12c2:	4620      	mov	r0, r4
    12c4:	4b03      	ldr	r3, [pc, #12]	; (12d4 <adc_async_start_conversion+0x24>)
    12c6:	4798      	blx	r3
}
    12c8:	2000      	movs	r0, #0
    12ca:	bd10      	pop	{r4, pc}
    12cc:	0000ab64 	.word	0x0000ab64
    12d0:	00002481 	.word	0x00002481
    12d4:	00002955 	.word	0x00002955

000012d8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    12d8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    12dc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    12de:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    12e0:	f3bf 8f5f 	dmb	sy
    12e4:	4770      	bx	lr

000012e6 <atomic_leave_critical>:
    12e6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    12ea:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    12ec:	f383 8810 	msr	PRIMASK, r3
    12f0:	4770      	bx	lr
	...

000012f4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    12f4:	b538      	push	{r3, r4, r5, lr}
    12f6:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    12f8:	4605      	mov	r5, r0
    12fa:	b158      	cbz	r0, 1314 <crc_sync_init+0x20>
    12fc:	1c08      	adds	r0, r1, #0
    12fe:	bf18      	it	ne
    1300:	2001      	movne	r0, #1
    1302:	222b      	movs	r2, #43	; 0x2b
    1304:	4904      	ldr	r1, [pc, #16]	; (1318 <crc_sync_init+0x24>)
    1306:	4b05      	ldr	r3, [pc, #20]	; (131c <crc_sync_init+0x28>)
    1308:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    130a:	4621      	mov	r1, r4
    130c:	4628      	mov	r0, r5
    130e:	4b04      	ldr	r3, [pc, #16]	; (1320 <crc_sync_init+0x2c>)
    1310:	4798      	blx	r3
}
    1312:	bd38      	pop	{r3, r4, r5, pc}
    1314:	2000      	movs	r0, #0
    1316:	e7f4      	b.n	1302 <crc_sync_init+0xe>
    1318:	0000ab80 	.word	0x0000ab80
    131c:	00002481 	.word	0x00002481
    1320:	00002d55 	.word	0x00002d55

00001324 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1324:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1326:	4b02      	ldr	r3, [pc, #8]	; (1330 <delay_init+0xc>)
    1328:	6018      	str	r0, [r3, #0]
    132a:	4b02      	ldr	r3, [pc, #8]	; (1334 <delay_init+0x10>)
    132c:	4798      	blx	r3
    132e:	bd08      	pop	{r3, pc}
    1330:	20000614 	.word	0x20000614
    1334:	00004591 	.word	0x00004591

00001338 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1338:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    133a:	4b04      	ldr	r3, [pc, #16]	; (134c <delay_us+0x14>)
    133c:	681c      	ldr	r4, [r3, #0]
    133e:	4b04      	ldr	r3, [pc, #16]	; (1350 <delay_us+0x18>)
    1340:	4798      	blx	r3
    1342:	4601      	mov	r1, r0
    1344:	4620      	mov	r0, r4
    1346:	4b03      	ldr	r3, [pc, #12]	; (1354 <delay_us+0x1c>)
    1348:	4798      	blx	r3
    134a:	bd10      	pop	{r4, pc}
    134c:	20000614 	.word	0x20000614
    1350:	00002a19 	.word	0x00002a19
    1354:	000045a5 	.word	0x000045a5

00001358 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1358:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    135a:	4b04      	ldr	r3, [pc, #16]	; (136c <delay_ms+0x14>)
    135c:	681c      	ldr	r4, [r3, #0]
    135e:	4b04      	ldr	r3, [pc, #16]	; (1370 <delay_ms+0x18>)
    1360:	4798      	blx	r3
    1362:	4601      	mov	r1, r0
    1364:	4620      	mov	r0, r4
    1366:	4b03      	ldr	r3, [pc, #12]	; (1374 <delay_ms+0x1c>)
    1368:	4798      	blx	r3
    136a:	bd10      	pop	{r4, pc}
    136c:	20000614 	.word	0x20000614
    1370:	00002a21 	.word	0x00002a21
    1374:	000045a5 	.word	0x000045a5

00001378 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1378:	b508      	push	{r3, lr}
	return _event_system_init();
    137a:	4b01      	ldr	r3, [pc, #4]	; (1380 <event_system_init+0x8>)
    137c:	4798      	blx	r3
}
    137e:	bd08      	pop	{r3, pc}
    1380:	00002d5d 	.word	0x00002d5d

00001384 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1384:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1386:	6943      	ldr	r3, [r0, #20]
    1388:	b103      	cbz	r3, 138c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    138a:	4798      	blx	r3
    138c:	bd08      	pop	{r3, pc}

0000138e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    138e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1390:	6983      	ldr	r3, [r0, #24]
    1392:	b103      	cbz	r3, 1396 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1394:	4798      	blx	r3
    1396:	bd08      	pop	{r3, pc}

00001398 <flash_init>:
{
    1398:	b538      	push	{r3, r4, r5, lr}
    139a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    139c:	4604      	mov	r4, r0
    139e:	b190      	cbz	r0, 13c6 <flash_init+0x2e>
    13a0:	1c08      	adds	r0, r1, #0
    13a2:	bf18      	it	ne
    13a4:	2001      	movne	r0, #1
    13a6:	2238      	movs	r2, #56	; 0x38
    13a8:	4908      	ldr	r1, [pc, #32]	; (13cc <flash_init+0x34>)
    13aa:	4b09      	ldr	r3, [pc, #36]	; (13d0 <flash_init+0x38>)
    13ac:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    13ae:	4629      	mov	r1, r5
    13b0:	4620      	mov	r0, r4
    13b2:	4b08      	ldr	r3, [pc, #32]	; (13d4 <flash_init+0x3c>)
    13b4:	4798      	blx	r3
	if (rc) {
    13b6:	4603      	mov	r3, r0
    13b8:	b918      	cbnz	r0, 13c2 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    13ba:	4a07      	ldr	r2, [pc, #28]	; (13d8 <flash_init+0x40>)
    13bc:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    13be:	4a07      	ldr	r2, [pc, #28]	; (13dc <flash_init+0x44>)
    13c0:	6062      	str	r2, [r4, #4]
}
    13c2:	4618      	mov	r0, r3
    13c4:	bd38      	pop	{r3, r4, r5, pc}
    13c6:	2000      	movs	r0, #0
    13c8:	e7ed      	b.n	13a6 <flash_init+0xe>
    13ca:	bf00      	nop
    13cc:	0000ab9c 	.word	0x0000ab9c
    13d0:	00002481 	.word	0x00002481
    13d4:	00002e69 	.word	0x00002e69
    13d8:	00001385 	.word	0x00001385
    13dc:	0000138f 	.word	0x0000138f

000013e0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    13e0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13e2:	8843      	ldrh	r3, [r0, #2]
    13e4:	f413 7f80 	tst.w	r3, #256	; 0x100
    13e8:	d102      	bne.n	13f0 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    13ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
    13ec:	b103      	cbz	r3, 13f0 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    13ee:	4798      	blx	r3
    13f0:	bd08      	pop	{r3, pc}

000013f2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    13f2:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    13f4:	8843      	ldrh	r3, [r0, #2]
    13f6:	f413 7f80 	tst.w	r3, #256	; 0x100
    13fa:	d102      	bne.n	1402 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    13fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    13fe:	b103      	cbz	r3, 1402 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    1400:	4798      	blx	r3
    1402:	bd08      	pop	{r3, pc}

00001404 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1404:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1406:	8843      	ldrh	r3, [r0, #2]
    1408:	f413 7f80 	tst.w	r3, #256	; 0x100
    140c:	d102      	bne.n	1414 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    140e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1410:	b103      	cbz	r3, 1414 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    1412:	4798      	blx	r3
    1414:	bd08      	pop	{r3, pc}
	...

00001418 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1418:	b510      	push	{r4, lr}
    141a:	b084      	sub	sp, #16
    141c:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    141e:	8a83      	ldrh	r3, [r0, #20]
    1420:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1424:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    142a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    142e:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1430:	a901      	add	r1, sp, #4
    1432:	3828      	subs	r0, #40	; 0x28
    1434:	4b03      	ldr	r3, [pc, #12]	; (1444 <i2c_m_async_write+0x2c>)
    1436:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    1438:	2800      	cmp	r0, #0
    143a:	bf08      	it	eq
    143c:	4620      	moveq	r0, r4
    143e:	b004      	add	sp, #16
    1440:	bd10      	pop	{r4, pc}
    1442:	bf00      	nop
    1444:	00003acd 	.word	0x00003acd

00001448 <i2c_m_async_read>:
{
    1448:	b510      	push	{r4, lr}
    144a:	b084      	sub	sp, #16
    144c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    144e:	8a83      	ldrh	r3, [r0, #20]
    1450:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1454:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1456:	f248 0301 	movw	r3, #32769	; 0x8001
    145a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    145e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1460:	a901      	add	r1, sp, #4
    1462:	3828      	subs	r0, #40	; 0x28
    1464:	4b03      	ldr	r3, [pc, #12]	; (1474 <i2c_m_async_read+0x2c>)
    1466:	4798      	blx	r3
}
    1468:	2800      	cmp	r0, #0
    146a:	bf08      	it	eq
    146c:	4620      	moveq	r0, r4
    146e:	b004      	add	sp, #16
    1470:	bd10      	pop	{r4, pc}
    1472:	bf00      	nop
    1474:	00003acd 	.word	0x00003acd

00001478 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    147c:	4604      	mov	r4, r0
    147e:	2289      	movs	r2, #137	; 0x89
    1480:	490f      	ldr	r1, [pc, #60]	; (14c0 <i2c_m_async_init+0x48>)
    1482:	3000      	adds	r0, #0
    1484:	bf18      	it	ne
    1486:	2001      	movne	r0, #1
    1488:	4b0e      	ldr	r3, [pc, #56]	; (14c4 <i2c_m_async_init+0x4c>)
    148a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    148c:	4629      	mov	r1, r5
    148e:	4620      	mov	r0, r4
    1490:	4b0d      	ldr	r3, [pc, #52]	; (14c8 <i2c_m_async_init+0x50>)
    1492:	4798      	blx	r3
	if (init_status) {
    1494:	4605      	mov	r5, r0
    1496:	b108      	cbz	r0, 149c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1498:	4628      	mov	r0, r5
    149a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    149c:	4b0b      	ldr	r3, [pc, #44]	; (14cc <i2c_m_async_init+0x54>)
    149e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    14a0:	4b0b      	ldr	r3, [pc, #44]	; (14d0 <i2c_m_async_init+0x58>)
    14a2:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    14a4:	4a0b      	ldr	r2, [pc, #44]	; (14d4 <i2c_m_async_init+0x5c>)
    14a6:	2101      	movs	r1, #1
    14a8:	4620      	mov	r0, r4
    14aa:	4e0b      	ldr	r6, [pc, #44]	; (14d8 <i2c_m_async_init+0x60>)
    14ac:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    14ae:	4a0b      	ldr	r2, [pc, #44]	; (14dc <i2c_m_async_init+0x64>)
    14b0:	2102      	movs	r1, #2
    14b2:	4620      	mov	r0, r4
    14b4:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    14b6:	4a0a      	ldr	r2, [pc, #40]	; (14e0 <i2c_m_async_init+0x68>)
    14b8:	2100      	movs	r1, #0
    14ba:	4620      	mov	r0, r4
    14bc:	47b0      	blx	r6
	return ERR_NONE;
    14be:	e7eb      	b.n	1498 <i2c_m_async_init+0x20>
    14c0:	0000abb4 	.word	0x0000abb4
    14c4:	00002481 	.word	0x00002481
    14c8:	00003a4d 	.word	0x00003a4d
    14cc:	00001449 	.word	0x00001449
    14d0:	00001419 	.word	0x00001419
    14d4:	000013e1 	.word	0x000013e1
    14d8:	00003bfd 	.word	0x00003bfd
    14dc:	000013f3 	.word	0x000013f3
    14e0:	00001405 	.word	0x00001405

000014e4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    14e4:	b570      	push	{r4, r5, r6, lr}
    14e6:	460d      	mov	r5, r1
    14e8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    14ea:	4604      	mov	r4, r0
    14ec:	b160      	cbz	r0, 1508 <io_write+0x24>
    14ee:	1c08      	adds	r0, r1, #0
    14f0:	bf18      	it	ne
    14f2:	2001      	movne	r0, #1
    14f4:	2234      	movs	r2, #52	; 0x34
    14f6:	4905      	ldr	r1, [pc, #20]	; (150c <io_write+0x28>)
    14f8:	4b05      	ldr	r3, [pc, #20]	; (1510 <io_write+0x2c>)
    14fa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    14fc:	6823      	ldr	r3, [r4, #0]
    14fe:	4632      	mov	r2, r6
    1500:	4629      	mov	r1, r5
    1502:	4620      	mov	r0, r4
    1504:	4798      	blx	r3
}
    1506:	bd70      	pop	{r4, r5, r6, pc}
    1508:	2000      	movs	r0, #0
    150a:	e7f3      	b.n	14f4 <io_write+0x10>
    150c:	0000abd4 	.word	0x0000abd4
    1510:	00002481 	.word	0x00002481

00001514 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1516:	460f      	mov	r7, r1
    1518:	4616      	mov	r6, r2
	ASSERT(io);
    151a:	4604      	mov	r4, r0
    151c:	f240 1227 	movw	r2, #295	; 0x127
    1520:	4909      	ldr	r1, [pc, #36]	; (1548 <_spi_m_async_io_write+0x34>)
    1522:	3000      	adds	r0, #0
    1524:	bf18      	it	ne
    1526:	2001      	movne	r0, #1
    1528:	4b08      	ldr	r3, [pc, #32]	; (154c <_spi_m_async_io_write+0x38>)
    152a:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    152c:	2500      	movs	r5, #0
    152e:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    1530:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    1532:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    1534:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    1536:	2310      	movs	r3, #16
    1538:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    153a:	2101      	movs	r1, #1
    153c:	f1a4 0020 	sub.w	r0, r4, #32
    1540:	4b03      	ldr	r3, [pc, #12]	; (1550 <_spi_m_async_io_write+0x3c>)
    1542:	4798      	blx	r3

	return ERR_NONE;
}
    1544:	4628      	mov	r0, r5
    1546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1548:	0000abe8 	.word	0x0000abe8
    154c:	00002481 	.word	0x00002481
    1550:	000040a5 	.word	0x000040a5

00001554 <_spi_m_async_io_read>:
{
    1554:	b570      	push	{r4, r5, r6, lr}
    1556:	460d      	mov	r5, r1
    1558:	4616      	mov	r6, r2
	ASSERT(io);
    155a:	4604      	mov	r4, r0
    155c:	f240 1205 	movw	r2, #261	; 0x105
    1560:	490c      	ldr	r1, [pc, #48]	; (1594 <_spi_m_async_io_read+0x40>)
    1562:	3000      	adds	r0, #0
    1564:	bf18      	it	ne
    1566:	2001      	movne	r0, #1
    1568:	4b0b      	ldr	r3, [pc, #44]	; (1598 <_spi_m_async_io_read+0x44>)
    156a:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    156c:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    156e:	2500      	movs	r5, #0
    1570:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    1572:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    1574:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    1576:	2310      	movs	r3, #16
    1578:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    157a:	3c20      	subs	r4, #32
    157c:	2101      	movs	r1, #1
    157e:	4620      	mov	r0, r4
    1580:	4b06      	ldr	r3, [pc, #24]	; (159c <_spi_m_async_io_read+0x48>)
    1582:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    1584:	f240 11ff 	movw	r1, #511	; 0x1ff
    1588:	4620      	mov	r0, r4
    158a:	4b05      	ldr	r3, [pc, #20]	; (15a0 <_spi_m_async_io_read+0x4c>)
    158c:	4798      	blx	r3
}
    158e:	4628      	mov	r0, r5
    1590:	bd70      	pop	{r4, r5, r6, pc}
    1592:	bf00      	nop
    1594:	0000abe8 	.word	0x0000abe8
    1598:	00002481 	.word	0x00002481
    159c:	000040d9 	.word	0x000040d9
    15a0:	00004155 	.word	0x00004155

000015a4 <_spi_dev_error>:
{
    15a4:	b570      	push	{r4, r5, r6, lr}
    15a6:	4604      	mov	r4, r0
    15a8:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    15aa:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    15ac:	2100      	movs	r1, #0
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <_spi_dev_error+0x30>)
    15b0:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    15b2:	2100      	movs	r1, #0
    15b4:	4620      	mov	r0, r4
    15b6:	4b08      	ldr	r3, [pc, #32]	; (15d8 <_spi_dev_error+0x34>)
    15b8:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    15ba:	2100      	movs	r1, #0
    15bc:	4620      	mov	r0, r4
    15be:	4b07      	ldr	r3, [pc, #28]	; (15dc <_spi_dev_error+0x38>)
    15c0:	4798      	blx	r3
	spi->stat = 0;
    15c2:	2300      	movs	r3, #0
    15c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    15c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    15ca:	b113      	cbz	r3, 15d2 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    15cc:	4631      	mov	r1, r6
    15ce:	4628      	mov	r0, r5
    15d0:	4798      	blx	r3
    15d2:	bd70      	pop	{r4, r5, r6, pc}
    15d4:	000040a5 	.word	0x000040a5
    15d8:	000040d9 	.word	0x000040d9
    15dc:	00004119 	.word	0x00004119

000015e0 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    15e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    15e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    15e4:	429a      	cmp	r2, r3
    15e6:	d200      	bcs.n	15ea <_spi_dev_complete+0xa>
    15e8:	4770      	bx	lr
{
    15ea:	b510      	push	{r4, lr}
    15ec:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    15ee:	2100      	movs	r1, #0
    15f0:	4b04      	ldr	r3, [pc, #16]	; (1604 <_spi_dev_complete+0x24>)
    15f2:	4798      	blx	r3
		spi->stat = 0;
    15f4:	2300      	movs	r3, #0
    15f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    15fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    15fc:	b10b      	cbz	r3, 1602 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    15fe:	1f20      	subs	r0, r4, #4
    1600:	4798      	blx	r3
    1602:	bd10      	pop	{r4, pc}
    1604:	00004119 	.word	0x00004119

00001608 <_spi_dev_tx>:
{
    1608:	b510      	push	{r4, lr}
    160a:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    160c:	7903      	ldrb	r3, [r0, #4]
    160e:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1610:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1612:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1614:	f103 0101 	add.w	r1, r3, #1
    1618:	6401      	str	r1, [r0, #64]	; 0x40
    161a:	bf94      	ite	ls
    161c:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    161e:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1622:	4b08      	ldr	r3, [pc, #32]	; (1644 <_spi_dev_tx+0x3c>)
    1624:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    1626:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    162a:	429a      	cmp	r2, r3
    162c:	d000      	beq.n	1630 <_spi_dev_tx+0x28>
    162e:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    1630:	2100      	movs	r1, #0
    1632:	4620      	mov	r0, r4
    1634:	4b04      	ldr	r3, [pc, #16]	; (1648 <_spi_dev_tx+0x40>)
    1636:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1638:	2101      	movs	r1, #1
    163a:	4620      	mov	r0, r4
    163c:	4b03      	ldr	r3, [pc, #12]	; (164c <_spi_dev_tx+0x44>)
    163e:	4798      	blx	r3
}
    1640:	e7f5      	b.n	162e <_spi_dev_tx+0x26>
    1642:	bf00      	nop
    1644:	00004155 	.word	0x00004155
    1648:	000040a5 	.word	0x000040a5
    164c:	00004119 	.word	0x00004119

00001650 <_spi_dev_rx>:
{
    1650:	b570      	push	{r4, r5, r6, lr}
    1652:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    1654:	6b85      	ldr	r5, [r0, #56]	; 0x38
    1656:	b305      	cbz	r5, 169a <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    1658:	7903      	ldrb	r3, [r0, #4]
    165a:	2b01      	cmp	r3, #1
    165c:	d916      	bls.n	168c <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    165e:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1660:	1c73      	adds	r3, r6, #1
    1662:	6403      	str	r3, [r0, #64]	; 0x40
    1664:	4b18      	ldr	r3, [pc, #96]	; (16c8 <_spi_dev_rx+0x78>)
    1666:	4798      	blx	r3
    1668:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    166c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    166e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1670:	4293      	cmp	r3, r2
    1672:	d21d      	bcs.n	16b0 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    1674:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1676:	b1b2      	cbz	r2, 16a6 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    1678:	7921      	ldrb	r1, [r4, #4]
    167a:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    167c:	bf94      	ite	ls
    167e:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1680:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1684:	4620      	mov	r0, r4
    1686:	4b11      	ldr	r3, [pc, #68]	; (16cc <_spi_dev_rx+0x7c>)
    1688:	4798      	blx	r3
    168a:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    168c:	6c06      	ldr	r6, [r0, #64]	; 0x40
    168e:	1c73      	adds	r3, r6, #1
    1690:	6403      	str	r3, [r0, #64]	; 0x40
    1692:	4b0d      	ldr	r3, [pc, #52]	; (16c8 <_spi_dev_rx+0x78>)
    1694:	4798      	blx	r3
    1696:	55a8      	strb	r0, [r5, r6]
    1698:	e7e8      	b.n	166c <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    169a:	4b0b      	ldr	r3, [pc, #44]	; (16c8 <_spi_dev_rx+0x78>)
    169c:	4798      	blx	r3
		spi->xfercnt++;
    169e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    16a0:	3301      	adds	r3, #1
    16a2:	6423      	str	r3, [r4, #64]	; 0x40
    16a4:	e7e2      	b.n	166c <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    16a6:	88e1      	ldrh	r1, [r4, #6]
    16a8:	4620      	mov	r0, r4
    16aa:	4b08      	ldr	r3, [pc, #32]	; (16cc <_spi_dev_rx+0x7c>)
    16ac:	4798      	blx	r3
    16ae:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    16b0:	2100      	movs	r1, #0
    16b2:	4620      	mov	r0, r4
    16b4:	4b06      	ldr	r3, [pc, #24]	; (16d0 <_spi_dev_rx+0x80>)
    16b6:	4798      	blx	r3
		spi->stat = 0;
    16b8:	2300      	movs	r3, #0
    16ba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    16be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    16c0:	b10b      	cbz	r3, 16c6 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    16c2:	1f20      	subs	r0, r4, #4
    16c4:	4798      	blx	r3
    16c6:	bd70      	pop	{r4, r5, r6, pc}
    16c8:	00004185 	.word	0x00004185
    16cc:	00004155 	.word	0x00004155
    16d0:	000040d9 	.word	0x000040d9

000016d4 <spi_m_async_init>:
{
    16d4:	b570      	push	{r4, r5, r6, lr}
    16d6:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    16d8:	4606      	mov	r6, r0
    16da:	b330      	cbz	r0, 172a <spi_m_async_init+0x56>
    16dc:	1c08      	adds	r0, r1, #0
    16de:	bf18      	it	ne
    16e0:	2001      	movne	r0, #1
    16e2:	22a5      	movs	r2, #165	; 0xa5
    16e4:	4912      	ldr	r1, [pc, #72]	; (1730 <spi_m_async_init+0x5c>)
    16e6:	4b13      	ldr	r3, [pc, #76]	; (1734 <spi_m_async_init+0x60>)
    16e8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    16ea:	4634      	mov	r4, r6
    16ec:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    16f0:	4629      	mov	r1, r5
    16f2:	4620      	mov	r0, r4
    16f4:	4b10      	ldr	r3, [pc, #64]	; (1738 <spi_m_async_init+0x64>)
    16f6:	4798      	blx	r3
	if (rc >= 0) {
    16f8:	2800      	cmp	r0, #0
    16fa:	db15      	blt.n	1728 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    16fc:	4a0f      	ldr	r2, [pc, #60]	; (173c <spi_m_async_init+0x68>)
    16fe:	2100      	movs	r1, #0
    1700:	4620      	mov	r0, r4
    1702:	4d0f      	ldr	r5, [pc, #60]	; (1740 <spi_m_async_init+0x6c>)
    1704:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1706:	4a0f      	ldr	r2, [pc, #60]	; (1744 <spi_m_async_init+0x70>)
    1708:	2101      	movs	r1, #1
    170a:	4620      	mov	r0, r4
    170c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    170e:	4a0e      	ldr	r2, [pc, #56]	; (1748 <spi_m_async_init+0x74>)
    1710:	2102      	movs	r1, #2
    1712:	4620      	mov	r0, r4
    1714:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1716:	4a0d      	ldr	r2, [pc, #52]	; (174c <spi_m_async_init+0x78>)
    1718:	2103      	movs	r1, #3
    171a:	4620      	mov	r0, r4
    171c:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    171e:	4b0c      	ldr	r3, [pc, #48]	; (1750 <spi_m_async_init+0x7c>)
    1720:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    1722:	4b0c      	ldr	r3, [pc, #48]	; (1754 <spi_m_async_init+0x80>)
    1724:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    1726:	2000      	movs	r0, #0
}
    1728:	bd70      	pop	{r4, r5, r6, pc}
    172a:	2000      	movs	r0, #0
    172c:	e7d9      	b.n	16e2 <spi_m_async_init+0xe>
    172e:	bf00      	nop
    1730:	0000abe8 	.word	0x0000abe8
    1734:	00002481 	.word	0x00002481
    1738:	00003fd9 	.word	0x00003fd9
    173c:	00001609 	.word	0x00001609
    1740:	000041b1 	.word	0x000041b1
    1744:	00001651 	.word	0x00001651
    1748:	000015e1 	.word	0x000015e1
    174c:	000015a5 	.word	0x000015a5
    1750:	00001555 	.word	0x00001555
    1754:	00001515 	.word	0x00001515

00001758 <spi_m_async_enable>:
{
    1758:	b510      	push	{r4, lr}
	ASSERT(spi);
    175a:	4604      	mov	r4, r0
    175c:	22c1      	movs	r2, #193	; 0xc1
    175e:	4905      	ldr	r1, [pc, #20]	; (1774 <spi_m_async_enable+0x1c>)
    1760:	3000      	adds	r0, #0
    1762:	bf18      	it	ne
    1764:	2001      	movne	r0, #1
    1766:	4b04      	ldr	r3, [pc, #16]	; (1778 <spi_m_async_enable+0x20>)
    1768:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    176a:	1d20      	adds	r0, r4, #4
    176c:	4b03      	ldr	r3, [pc, #12]	; (177c <spi_m_async_enable+0x24>)
    176e:	4798      	blx	r3
    1770:	bd10      	pop	{r4, pc}
    1772:	bf00      	nop
    1774:	0000abe8 	.word	0x0000abe8
    1778:	00002481 	.word	0x00002481
    177c:	00004041 	.word	0x00004041

00001780 <spi_m_async_set_mode>:
{
    1780:	b538      	push	{r3, r4, r5, lr}
    1782:	460d      	mov	r5, r1
	ASSERT(spi);
    1784:	4604      	mov	r4, r0
    1786:	22d9      	movs	r2, #217	; 0xd9
    1788:	4909      	ldr	r1, [pc, #36]	; (17b0 <spi_m_async_set_mode+0x30>)
    178a:	3000      	adds	r0, #0
    178c:	bf18      	it	ne
    178e:	2001      	movne	r0, #1
    1790:	4b08      	ldr	r3, [pc, #32]	; (17b4 <spi_m_async_set_mode+0x34>)
    1792:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    1794:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1798:	f013 0f10 	tst.w	r3, #16
    179c:	d104      	bne.n	17a8 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    179e:	4629      	mov	r1, r5
    17a0:	1d20      	adds	r0, r4, #4
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <spi_m_async_set_mode+0x38>)
    17a4:	4798      	blx	r3
    17a6:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
    17a8:	f06f 0003 	mvn.w	r0, #3
}
    17ac:	bd38      	pop	{r3, r4, r5, pc}
    17ae:	bf00      	nop
    17b0:	0000abe8 	.word	0x0000abe8
    17b4:	00002481 	.word	0x00002481
    17b8:	00004071 	.word	0x00004071

000017bc <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    17bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17be:	460d      	mov	r5, r1
    17c0:	4617      	mov	r7, r2
    17c2:	461e      	mov	r6, r3
	ASSERT(spi);
    17c4:	4604      	mov	r4, r0
    17c6:	f44f 729c 	mov.w	r2, #312	; 0x138
    17ca:	4912      	ldr	r1, [pc, #72]	; (1814 <spi_m_async_transfer+0x58>)
    17cc:	3000      	adds	r0, #0
    17ce:	bf18      	it	ne
    17d0:	2001      	movne	r0, #1
    17d2:	4b11      	ldr	r3, [pc, #68]	; (1818 <spi_m_async_transfer+0x5c>)
    17d4:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    17d6:	63e7      	str	r7, [r4, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    17d8:	63a5      	str	r5, [r4, #56]	; 0x38
	spi->xfer.size  = length;
    17da:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    17dc:	2300      	movs	r3, #0
    17de:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    17e0:	2310      	movs	r3, #16
    17e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    17e6:	1d26      	adds	r6, r4, #4
    17e8:	2101      	movs	r1, #1
    17ea:	4630      	mov	r0, r6
    17ec:	4b0b      	ldr	r3, [pc, #44]	; (181c <spi_m_async_transfer+0x60>)
    17ee:	4798      	blx	r3
	if (txbuf) {
    17f0:	b15d      	cbz	r5, 180a <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    17f2:	7a23      	ldrb	r3, [r4, #8]
    17f4:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    17f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    17f8:	bf94      	ite	ls
    17fa:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    17fc:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    1800:	4630      	mov	r0, r6
    1802:	4b07      	ldr	r3, [pc, #28]	; (1820 <spi_m_async_transfer+0x64>)
    1804:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    1806:	2000      	movs	r0, #0
    1808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    180a:	8961      	ldrh	r1, [r4, #10]
    180c:	4630      	mov	r0, r6
    180e:	4b04      	ldr	r3, [pc, #16]	; (1820 <spi_m_async_transfer+0x64>)
    1810:	4798      	blx	r3
    1812:	e7f8      	b.n	1806 <spi_m_async_transfer+0x4a>
    1814:	0000abe8 	.word	0x0000abe8
    1818:	00002481 	.word	0x00002481
    181c:	000040d9 	.word	0x000040d9
    1820:	00004155 	.word	0x00004155

00001824 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    1824:	b570      	push	{r4, r5, r6, lr}
    1826:	460c      	mov	r4, r1
    1828:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    182a:	4605      	mov	r5, r0
    182c:	b158      	cbz	r0, 1846 <spi_m_async_register_callback+0x22>
    182e:	2901      	cmp	r1, #1
    1830:	bf8c      	ite	hi
    1832:	2000      	movhi	r0, #0
    1834:	2001      	movls	r0, #1
    1836:	f240 1263 	movw	r2, #355	; 0x163
    183a:	4908      	ldr	r1, [pc, #32]	; (185c <spi_m_async_register_callback+0x38>)
    183c:	4b08      	ldr	r3, [pc, #32]	; (1860 <spi_m_async_register_callback+0x3c>)
    183e:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    1840:	b91c      	cbnz	r4, 184a <spi_m_async_register_callback+0x26>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    1842:	632e      	str	r6, [r5, #48]	; 0x30
    1844:	bd70      	pop	{r4, r5, r6, pc}
    1846:	2000      	movs	r0, #0
    1848:	e7f5      	b.n	1836 <spi_m_async_register_callback+0x12>
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    184a:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    184c:	1c32      	adds	r2, r6, #0
    184e:	bf18      	it	ne
    1850:	2201      	movne	r2, #1
    1852:	2103      	movs	r1, #3
    1854:	1d28      	adds	r0, r5, #4
    1856:	4b03      	ldr	r3, [pc, #12]	; (1864 <spi_m_async_register_callback+0x40>)
    1858:	4798      	blx	r3
    185a:	bd70      	pop	{r4, r5, r6, pc}
    185c:	0000abe8 	.word	0x0000abe8
    1860:	00002481 	.word	0x00002481
    1864:	000041e5 	.word	0x000041e5

00001868 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    1868:	b538      	push	{r3, r4, r5, lr}
    186a:	460d      	mov	r5, r1
	ASSERT(spi && io);
    186c:	4604      	mov	r4, r0
    186e:	b158      	cbz	r0, 1888 <spi_m_async_get_io_descriptor+0x20>
    1870:	1c08      	adds	r0, r1, #0
    1872:	bf18      	it	ne
    1874:	2001      	movne	r0, #1
    1876:	f240 126f 	movw	r2, #367	; 0x16f
    187a:	4904      	ldr	r1, [pc, #16]	; (188c <spi_m_async_get_io_descriptor+0x24>)
    187c:	4b04      	ldr	r3, [pc, #16]	; (1890 <spi_m_async_get_io_descriptor+0x28>)
    187e:	4798      	blx	r3
	*io = &spi->io;
    1880:	3424      	adds	r4, #36	; 0x24
    1882:	602c      	str	r4, [r5, #0]
	return 0;
}
    1884:	2000      	movs	r0, #0
    1886:	bd38      	pop	{r3, r4, r5, pc}
    1888:	2000      	movs	r0, #0
    188a:	e7f4      	b.n	1876 <spi_m_async_get_io_descriptor+0xe>
    188c:	0000abe8 	.word	0x0000abe8
    1890:	00002481 	.word	0x00002481

00001894 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1894:	b570      	push	{r4, r5, r6, lr}
    1896:	460d      	mov	r5, r1
    1898:	4616      	mov	r6, r2
	ASSERT(io);
    189a:	4604      	mov	r4, r0
    189c:	2298      	movs	r2, #152	; 0x98
    189e:	4907      	ldr	r1, [pc, #28]	; (18bc <_spi_m_dma_io_write+0x28>)
    18a0:	3000      	adds	r0, #0
    18a2:	bf18      	it	ne
    18a4:	2001      	movne	r0, #1
    18a6:	4b06      	ldr	r3, [pc, #24]	; (18c0 <_spi_m_dma_io_write+0x2c>)
    18a8:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    18aa:	4633      	mov	r3, r6
    18ac:	2200      	movs	r2, #0
    18ae:	4629      	mov	r1, r5
    18b0:	f1a4 001c 	sub.w	r0, r4, #28
    18b4:	4c03      	ldr	r4, [pc, #12]	; (18c4 <_spi_m_dma_io_write+0x30>)
    18b6:	47a0      	blx	r4
}
    18b8:	bd70      	pop	{r4, r5, r6, pc}
    18ba:	bf00      	nop
    18bc:	0000ac08 	.word	0x0000ac08
    18c0:	00002481 	.word	0x00002481
    18c4:	00004439 	.word	0x00004439

000018c8 <_spi_m_dma_io_read>:
{
    18c8:	b570      	push	{r4, r5, r6, lr}
    18ca:	460d      	mov	r5, r1
    18cc:	4616      	mov	r6, r2
	ASSERT(io);
    18ce:	4604      	mov	r4, r0
    18d0:	2281      	movs	r2, #129	; 0x81
    18d2:	4907      	ldr	r1, [pc, #28]	; (18f0 <_spi_m_dma_io_read+0x28>)
    18d4:	3000      	adds	r0, #0
    18d6:	bf18      	it	ne
    18d8:	2001      	movne	r0, #1
    18da:	4b06      	ldr	r3, [pc, #24]	; (18f4 <_spi_m_dma_io_read+0x2c>)
    18dc:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    18de:	4633      	mov	r3, r6
    18e0:	462a      	mov	r2, r5
    18e2:	2100      	movs	r1, #0
    18e4:	f1a4 001c 	sub.w	r0, r4, #28
    18e8:	4c03      	ldr	r4, [pc, #12]	; (18f8 <_spi_m_dma_io_read+0x30>)
    18ea:	47a0      	blx	r4
}
    18ec:	bd70      	pop	{r4, r5, r6, pc}
    18ee:	bf00      	nop
    18f0:	0000ac08 	.word	0x0000ac08
    18f4:	00002481 	.word	0x00002481
    18f8:	00004439 	.word	0x00004439

000018fc <spi_m_dma_init>:
{
    18fc:	b538      	push	{r3, r4, r5, lr}
    18fe:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    1900:	4605      	mov	r5, r0
    1902:	b1a0      	cbz	r0, 192e <spi_m_dma_init+0x32>
    1904:	1c08      	adds	r0, r1, #0
    1906:	bf18      	it	ne
    1908:	2001      	movne	r0, #1
    190a:	223b      	movs	r2, #59	; 0x3b
    190c:	4909      	ldr	r1, [pc, #36]	; (1934 <spi_m_dma_init+0x38>)
    190e:	4b0a      	ldr	r3, [pc, #40]	; (1938 <spi_m_dma_init+0x3c>)
    1910:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1912:	4628      	mov	r0, r5
    1914:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    1918:	4621      	mov	r1, r4
    191a:	4b08      	ldr	r3, [pc, #32]	; (193c <spi_m_dma_init+0x40>)
    191c:	4798      	blx	r3
	if (rc) {
    191e:	4603      	mov	r3, r0
    1920:	b918      	cbnz	r0, 192a <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    1922:	4a07      	ldr	r2, [pc, #28]	; (1940 <spi_m_dma_init+0x44>)
    1924:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    1926:	4a07      	ldr	r2, [pc, #28]	; (1944 <spi_m_dma_init+0x48>)
    1928:	622a      	str	r2, [r5, #32]
}
    192a:	4618      	mov	r0, r3
    192c:	bd38      	pop	{r3, r4, r5, pc}
    192e:	2000      	movs	r0, #0
    1930:	e7eb      	b.n	190a <spi_m_dma_init+0xe>
    1932:	bf00      	nop
    1934:	0000ac08 	.word	0x0000ac08
    1938:	00002481 	.word	0x00002481
    193c:	0000421d 	.word	0x0000421d
    1940:	000018c9 	.word	0x000018c9
    1944:	00001895 	.word	0x00001895

00001948 <spi_m_dma_enable>:
{
    1948:	b510      	push	{r4, lr}
	ASSERT(spi);
    194a:	4604      	mov	r4, r0
    194c:	2251      	movs	r2, #81	; 0x51
    194e:	4905      	ldr	r1, [pc, #20]	; (1964 <spi_m_dma_enable+0x1c>)
    1950:	3000      	adds	r0, #0
    1952:	bf18      	it	ne
    1954:	2001      	movne	r0, #1
    1956:	4b04      	ldr	r3, [pc, #16]	; (1968 <spi_m_dma_enable+0x20>)
    1958:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    195a:	1d20      	adds	r0, r4, #4
    195c:	4b03      	ldr	r3, [pc, #12]	; (196c <spi_m_dma_enable+0x24>)
    195e:	4798      	blx	r3
    1960:	bd10      	pop	{r4, pc}
    1962:	bf00      	nop
    1964:	0000ac08 	.word	0x0000ac08
    1968:	00002481 	.word	0x00002481
    196c:	00004399 	.word	0x00004399

00001970 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    1970:	b570      	push	{r4, r5, r6, lr}
    1972:	460d      	mov	r5, r1
    1974:	4616      	mov	r6, r2
	ASSERT(spi);
    1976:	4604      	mov	r4, r0
    1978:	22a8      	movs	r2, #168	; 0xa8
    197a:	4906      	ldr	r1, [pc, #24]	; (1994 <spi_m_dma_register_callback+0x24>)
    197c:	3000      	adds	r0, #0
    197e:	bf18      	it	ne
    1980:	2001      	movne	r0, #1
    1982:	4b05      	ldr	r3, [pc, #20]	; (1998 <spi_m_dma_register_callback+0x28>)
    1984:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    1986:	4632      	mov	r2, r6
    1988:	4629      	mov	r1, r5
    198a:	1d20      	adds	r0, r4, #4
    198c:	4b03      	ldr	r3, [pc, #12]	; (199c <spi_m_dma_register_callback+0x2c>)
    198e:	4798      	blx	r3
    1990:	bd70      	pop	{r4, r5, r6, pc}
    1992:	bf00      	nop
    1994:	0000ac08 	.word	0x0000ac08
    1998:	00002481 	.word	0x00002481
    199c:	000043c9 	.word	0x000043c9

000019a0 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    19a0:	b538      	push	{r3, r4, r5, lr}
    19a2:	460d      	mov	r5, r1
	ASSERT(spi && io);
    19a4:	4604      	mov	r4, r0
    19a6:	b150      	cbz	r0, 19be <spi_m_dma_get_io_descriptor+0x1e>
    19a8:	1c08      	adds	r0, r1, #0
    19aa:	bf18      	it	ne
    19ac:	2001      	movne	r0, #1
    19ae:	22ae      	movs	r2, #174	; 0xae
    19b0:	4904      	ldr	r1, [pc, #16]	; (19c4 <spi_m_dma_get_io_descriptor+0x24>)
    19b2:	4b05      	ldr	r3, [pc, #20]	; (19c8 <spi_m_dma_get_io_descriptor+0x28>)
    19b4:	4798      	blx	r3
	*io = &spi->io;
    19b6:	3420      	adds	r4, #32
    19b8:	602c      	str	r4, [r5, #0]

	return 0;
}
    19ba:	2000      	movs	r0, #0
    19bc:	bd38      	pop	{r3, r4, r5, pc}
    19be:	2000      	movs	r0, #0
    19c0:	e7f5      	b.n	19ae <spi_m_dma_get_io_descriptor+0xe>
    19c2:	bf00      	nop
    19c4:	0000ac08 	.word	0x0000ac08
    19c8:	00002481 	.word	0x00002481

000019cc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    19cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19ce:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    19d0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    19d2:	b12f      	cbz	r7, 19e0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    19d4:	688d      	ldr	r5, [r1, #8]
    19d6:	463c      	mov	r4, r7
    19d8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    19da:	f1c2 0e01 	rsb	lr, r2, #1
    19de:	e00b      	b.n	19f8 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    19e0:	4b0e      	ldr	r3, [pc, #56]	; (1a1c <timer_add_timer_task+0x50>)
    19e2:	4798      	blx	r3
		return;
    19e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    19e6:	4473      	add	r3, lr
    19e8:	68a0      	ldr	r0, [r4, #8]
    19ea:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    19ec:	42ab      	cmp	r3, r5
    19ee:	d20a      	bcs.n	1a06 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    19f0:	6823      	ldr	r3, [r4, #0]
    19f2:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    19f4:	b153      	cbz	r3, 1a0c <timer_add_timer_task+0x40>
    19f6:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    19f8:	6863      	ldr	r3, [r4, #4]
    19fa:	4293      	cmp	r3, r2
    19fc:	d8f3      	bhi.n	19e6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    19fe:	68a0      	ldr	r0, [r4, #8]
    1a00:	4403      	add	r3, r0
    1a02:	1a9b      	subs	r3, r3, r2
    1a04:	e7f2      	b.n	19ec <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1a06:	42a7      	cmp	r7, r4
    1a08:	d004      	beq.n	1a14 <timer_add_timer_task+0x48>
    1a0a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1a0c:	4620      	mov	r0, r4
    1a0e:	4b04      	ldr	r3, [pc, #16]	; (1a20 <timer_add_timer_task+0x54>)
    1a10:	4798      	blx	r3
    1a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1a14:	4660      	mov	r0, ip
    1a16:	4b01      	ldr	r3, [pc, #4]	; (1a1c <timer_add_timer_task+0x50>)
    1a18:	4798      	blx	r3
    1a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a1c:	000024a9 	.word	0x000024a9
    1a20:	000024d5 	.word	0x000024d5

00001a24 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1a28:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1a2a:	6907      	ldr	r7, [r0, #16]
    1a2c:	3701      	adds	r7, #1
    1a2e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1a30:	7e03      	ldrb	r3, [r0, #24]
    1a32:	f013 0f01 	tst.w	r3, #1
    1a36:	d113      	bne.n	1a60 <timer_process_counted+0x3c>
    1a38:	7e03      	ldrb	r3, [r0, #24]
    1a3a:	f013 0f02 	tst.w	r3, #2
    1a3e:	d10f      	bne.n	1a60 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1a40:	b354      	cbz	r4, 1a98 <timer_process_counted+0x74>
    1a42:	6863      	ldr	r3, [r4, #4]
    1a44:	1afb      	subs	r3, r7, r3
    1a46:	68a2      	ldr	r2, [r4, #8]
    1a48:	4293      	cmp	r3, r2
    1a4a:	d307      	bcc.n	1a5c <timer_process_counted+0x38>
    1a4c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1a4e:	f100 0814 	add.w	r8, r0, #20
    1a52:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1a9c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1a56:	f8df a048 	ldr.w	sl, [pc, #72]	; 1aa0 <timer_process_counted+0x7c>
    1a5a:	e012      	b.n	1a82 <timer_process_counted+0x5e>
    1a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1a60:	7e03      	ldrb	r3, [r0, #24]
    1a62:	f043 0302 	orr.w	r3, r3, #2
    1a66:	7603      	strb	r3, [r0, #24]
		return;
    1a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a6c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1a6e:	68e3      	ldr	r3, [r4, #12]
    1a70:	4620      	mov	r0, r4
    1a72:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1a74:	b185      	cbz	r5, 1a98 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1a76:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1a78:	686b      	ldr	r3, [r5, #4]
    1a7a:	1afb      	subs	r3, r7, r3
    1a7c:	68aa      	ldr	r2, [r5, #8]
    1a7e:	4293      	cmp	r3, r2
    1a80:	d30a      	bcc.n	1a98 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1a82:	4640      	mov	r0, r8
    1a84:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1a86:	7c23      	ldrb	r3, [r4, #16]
    1a88:	2b01      	cmp	r3, #1
    1a8a:	d1ef      	bne.n	1a6c <timer_process_counted+0x48>
			tmp->time_label = time;
    1a8c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1a8e:	463a      	mov	r2, r7
    1a90:	4621      	mov	r1, r4
    1a92:	4640      	mov	r0, r8
    1a94:	47d0      	blx	sl
    1a96:	e7e9      	b.n	1a6c <timer_process_counted+0x48>
    1a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a9c:	0000251d 	.word	0x0000251d
    1aa0:	000019cd 	.word	0x000019cd

00001aa4 <timer_init>:
{
    1aa4:	b570      	push	{r4, r5, r6, lr}
    1aa6:	460e      	mov	r6, r1
    1aa8:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1aaa:	4604      	mov	r4, r0
    1aac:	b190      	cbz	r0, 1ad4 <timer_init+0x30>
    1aae:	b199      	cbz	r1, 1ad8 <timer_init+0x34>
    1ab0:	1c10      	adds	r0, r2, #0
    1ab2:	bf18      	it	ne
    1ab4:	2001      	movne	r0, #1
    1ab6:	223b      	movs	r2, #59	; 0x3b
    1ab8:	4908      	ldr	r1, [pc, #32]	; (1adc <timer_init+0x38>)
    1aba:	4b09      	ldr	r3, [pc, #36]	; (1ae0 <timer_init+0x3c>)
    1abc:	4798      	blx	r3
	descr->func = func;
    1abe:	4620      	mov	r0, r4
    1ac0:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1ac4:	682b      	ldr	r3, [r5, #0]
    1ac6:	4631      	mov	r1, r6
    1ac8:	4798      	blx	r3
	descr->time                           = 0;
    1aca:	2000      	movs	r0, #0
    1acc:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1ace:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <timer_init+0x40>)
    1ad0:	6063      	str	r3, [r4, #4]
}
    1ad2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1ad4:	2000      	movs	r0, #0
    1ad6:	e7ee      	b.n	1ab6 <timer_init+0x12>
    1ad8:	2000      	movs	r0, #0
    1ada:	e7ec      	b.n	1ab6 <timer_init+0x12>
    1adc:	0000ac24 	.word	0x0000ac24
    1ae0:	00002481 	.word	0x00002481
    1ae4:	00001a25 	.word	0x00001a25

00001ae8 <timer_start>:
{
    1ae8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && descr->func);
    1aea:	4604      	mov	r4, r0
    1aec:	b198      	cbz	r0, 1b16 <timer_start+0x2e>
    1aee:	6800      	ldr	r0, [r0, #0]
    1af0:	3000      	adds	r0, #0
    1af2:	bf18      	it	ne
    1af4:	2001      	movne	r0, #1
    1af6:	2254      	movs	r2, #84	; 0x54
    1af8:	4909      	ldr	r1, [pc, #36]	; (1b20 <timer_start+0x38>)
    1afa:	4b0a      	ldr	r3, [pc, #40]	; (1b24 <timer_start+0x3c>)
    1afc:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    1afe:	1d25      	adds	r5, r4, #4
    1b00:	6823      	ldr	r3, [r4, #0]
    1b02:	699b      	ldr	r3, [r3, #24]
    1b04:	4628      	mov	r0, r5
    1b06:	4798      	blx	r3
    1b08:	b938      	cbnz	r0, 1b1a <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    1b0a:	6823      	ldr	r3, [r4, #0]
    1b0c:	689b      	ldr	r3, [r3, #8]
    1b0e:	4628      	mov	r0, r5
    1b10:	4798      	blx	r3
	return ERR_NONE;
    1b12:	2000      	movs	r0, #0
    1b14:	bd38      	pop	{r3, r4, r5, pc}
    1b16:	2000      	movs	r0, #0
    1b18:	e7ed      	b.n	1af6 <timer_start+0xe>
		return ERR_DENIED;
    1b1a:	f06f 0010 	mvn.w	r0, #16
}
    1b1e:	bd38      	pop	{r3, r4, r5, pc}
    1b20:	0000ac24 	.word	0x0000ac24
    1b24:	00002481 	.word	0x00002481

00001b28 <timer_add_task>:
{
    1b28:	b570      	push	{r4, r5, r6, lr}
    1b2a:	b082      	sub	sp, #8
    1b2c:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    1b2e:	4604      	mov	r4, r0
    1b30:	b328      	cbz	r0, 1b7e <timer_add_task+0x56>
    1b32:	b331      	cbz	r1, 1b82 <timer_add_task+0x5a>
    1b34:	6800      	ldr	r0, [r0, #0]
    1b36:	3000      	adds	r0, #0
    1b38:	bf18      	it	ne
    1b3a:	2001      	movne	r0, #1
    1b3c:	227b      	movs	r2, #123	; 0x7b
    1b3e:	4920      	ldr	r1, [pc, #128]	; (1bc0 <timer_add_task+0x98>)
    1b40:	4b20      	ldr	r3, [pc, #128]	; (1bc4 <timer_add_task+0x9c>)
    1b42:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1b44:	7f23      	ldrb	r3, [r4, #28]
    1b46:	f043 0301 	orr.w	r3, r3, #1
    1b4a:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    1b4c:	f104 0618 	add.w	r6, r4, #24
    1b50:	4629      	mov	r1, r5
    1b52:	4630      	mov	r0, r6
    1b54:	4b1c      	ldr	r3, [pc, #112]	; (1bc8 <timer_add_task+0xa0>)
    1b56:	4798      	blx	r3
    1b58:	b9a8      	cbnz	r0, 1b86 <timer_add_task+0x5e>
	task->time_label = descr->time;
    1b5a:	6963      	ldr	r3, [r4, #20]
    1b5c:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1b5e:	6962      	ldr	r2, [r4, #20]
    1b60:	4629      	mov	r1, r5
    1b62:	4630      	mov	r0, r6
    1b64:	4b19      	ldr	r3, [pc, #100]	; (1bcc <timer_add_task+0xa4>)
    1b66:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1b68:	7f23      	ldrb	r3, [r4, #28]
    1b6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1b6e:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1b70:	7f23      	ldrb	r3, [r4, #28]
    1b72:	f013 0f02 	tst.w	r3, #2
    1b76:	d112      	bne.n	1b9e <timer_add_task+0x76>
	return ERR_NONE;
    1b78:	2000      	movs	r0, #0
}
    1b7a:	b002      	add	sp, #8
    1b7c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task && descr->func);
    1b7e:	2000      	movs	r0, #0
    1b80:	e7dc      	b.n	1b3c <timer_add_task+0x14>
    1b82:	2000      	movs	r0, #0
    1b84:	e7da      	b.n	1b3c <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1b86:	7f23      	ldrb	r3, [r4, #28]
    1b88:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1b8c:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    1b8e:	2280      	movs	r2, #128	; 0x80
    1b90:	490b      	ldr	r1, [pc, #44]	; (1bc0 <timer_add_task+0x98>)
    1b92:	2000      	movs	r0, #0
    1b94:	4b0b      	ldr	r3, [pc, #44]	; (1bc4 <timer_add_task+0x9c>)
    1b96:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1b98:	f06f 0011 	mvn.w	r0, #17
    1b9c:	e7ed      	b.n	1b7a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    1b9e:	a801      	add	r0, sp, #4
    1ba0:	4b0b      	ldr	r3, [pc, #44]	; (1bd0 <timer_add_task+0xa8>)
    1ba2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1ba4:	7f23      	ldrb	r3, [r4, #28]
    1ba6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1baa:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    1bac:	6823      	ldr	r3, [r4, #0]
    1bae:	69db      	ldr	r3, [r3, #28]
    1bb0:	1d20      	adds	r0, r4, #4
    1bb2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1bb4:	a801      	add	r0, sp, #4
    1bb6:	4b07      	ldr	r3, [pc, #28]	; (1bd4 <timer_add_task+0xac>)
    1bb8:	4798      	blx	r3
	return ERR_NONE;
    1bba:	2000      	movs	r0, #0
    1bbc:	e7dd      	b.n	1b7a <timer_add_task+0x52>
    1bbe:	bf00      	nop
    1bc0:	0000ac24 	.word	0x0000ac24
    1bc4:	00002481 	.word	0x00002481
    1bc8:	00002487 	.word	0x00002487
    1bcc:	000019cd 	.word	0x000019cd
    1bd0:	000012d9 	.word	0x000012d9
    1bd4:	000012e7 	.word	0x000012e7

00001bd8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1bd8:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1bda:	2300      	movs	r3, #0
    1bdc:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1bde:	69c3      	ldr	r3, [r0, #28]
    1be0:	b11b      	cbz	r3, 1bea <usart_transmission_complete+0x12>
    1be2:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1be6:	4610      	mov	r0, r2
    1be8:	4798      	blx	r3
    1bea:	bd08      	pop	{r3, pc}

00001bec <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1bec:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1bee:	2300      	movs	r3, #0
    1bf0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1bf2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1bf4:	b11b      	cbz	r3, 1bfe <usart_error+0x12>
    1bf6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    1bfa:	4610      	mov	r0, r2
    1bfc:	4798      	blx	r3
    1bfe:	bd08      	pop	{r3, pc}

00001c00 <usart_fill_rx_buffer>:
{
    1c00:	b538      	push	{r3, r4, r5, lr}
    1c02:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1c04:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1c08:	302c      	adds	r0, #44	; 0x2c
    1c0a:	4b03      	ldr	r3, [pc, #12]	; (1c18 <usart_fill_rx_buffer+0x18>)
    1c0c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1c0e:	6a23      	ldr	r3, [r4, #32]
    1c10:	b10b      	cbz	r3, 1c16 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1c12:	4628      	mov	r0, r5
    1c14:	4798      	blx	r3
    1c16:	bd38      	pop	{r3, r4, r5, pc}
    1c18:	000025bd 	.word	0x000025bd

00001c1c <usart_async_write>:
{
    1c1c:	b570      	push	{r4, r5, r6, lr}
    1c1e:	460e      	mov	r6, r1
    1c20:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1c22:	4604      	mov	r4, r0
    1c24:	b1e0      	cbz	r0, 1c60 <usart_async_write+0x44>
    1c26:	b1e9      	cbz	r1, 1c64 <usart_async_write+0x48>
    1c28:	1c10      	adds	r0, r2, #0
    1c2a:	bf18      	it	ne
    1c2c:	2001      	movne	r0, #1
    1c2e:	f240 123b 	movw	r2, #315	; 0x13b
    1c32:	490f      	ldr	r1, [pc, #60]	; (1c70 <usart_async_write+0x54>)
    1c34:	4b0f      	ldr	r3, [pc, #60]	; (1c74 <usart_async_write+0x58>)
    1c36:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1c38:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1c3c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1c40:	429a      	cmp	r2, r3
    1c42:	d111      	bne.n	1c68 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1c44:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1c46:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    1c4a:	2300      	movs	r3, #0
    1c4c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1c50:	2301      	movs	r3, #1
    1c52:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1c54:	f104 0008 	add.w	r0, r4, #8
    1c58:	4b07      	ldr	r3, [pc, #28]	; (1c78 <usart_async_write+0x5c>)
    1c5a:	4798      	blx	r3
	return (int32_t)length;
    1c5c:	4628      	mov	r0, r5
    1c5e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1c60:	2000      	movs	r0, #0
    1c62:	e7e4      	b.n	1c2e <usart_async_write+0x12>
    1c64:	2000      	movs	r0, #0
    1c66:	e7e2      	b.n	1c2e <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1c68:	f06f 001b 	mvn.w	r0, #27
}
    1c6c:	bd70      	pop	{r4, r5, r6, pc}
    1c6e:	bf00      	nop
    1c70:	0000ac3c 	.word	0x0000ac3c
    1c74:	00002481 	.word	0x00002481
    1c78:	000039cf 	.word	0x000039cf

00001c7c <usart_process_byte_sent>:
{
    1c7c:	b510      	push	{r4, lr}
    1c7e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1c80:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1c82:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1c86:	429a      	cmp	r2, r3
    1c88:	d009      	beq.n	1c9e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1c8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1c8c:	1c59      	adds	r1, r3, #1
    1c8e:	8781      	strh	r1, [r0, #60]	; 0x3c
    1c90:	5cd1      	ldrb	r1, [r2, r3]
    1c92:	4b04      	ldr	r3, [pc, #16]	; (1ca4 <usart_process_byte_sent+0x28>)
    1c94:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1c96:	4620      	mov	r0, r4
    1c98:	4b03      	ldr	r3, [pc, #12]	; (1ca8 <usart_process_byte_sent+0x2c>)
    1c9a:	4798      	blx	r3
    1c9c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1c9e:	4b03      	ldr	r3, [pc, #12]	; (1cac <usart_process_byte_sent+0x30>)
    1ca0:	4798      	blx	r3
    1ca2:	bd10      	pop	{r4, pc}
    1ca4:	000039c9 	.word	0x000039c9
    1ca8:	000039cf 	.word	0x000039cf
    1cac:	000039d7 	.word	0x000039d7

00001cb0 <usart_async_read>:
{
    1cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1cb4:	b082      	sub	sp, #8
    1cb6:	460f      	mov	r7, r1
    1cb8:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    1cba:	4606      	mov	r6, r0
    1cbc:	b1a0      	cbz	r0, 1ce8 <usart_async_read+0x38>
    1cbe:	b199      	cbz	r1, 1ce8 <usart_async_read+0x38>
    1cc0:	2a00      	cmp	r2, #0
    1cc2:	d12d      	bne.n	1d20 <usart_async_read+0x70>
    1cc4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1cc8:	4929      	ldr	r1, [pc, #164]	; (1d70 <usart_async_read+0xc0>)
    1cca:	2000      	movs	r0, #0
    1ccc:	4b29      	ldr	r3, [pc, #164]	; (1d74 <usart_async_read+0xc4>)
    1cce:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1cd0:	a801      	add	r0, sp, #4
    1cd2:	4b29      	ldr	r3, [pc, #164]	; (1d78 <usart_async_read+0xc8>)
    1cd4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1cd6:	f106 0034 	add.w	r0, r6, #52	; 0x34
    1cda:	4b28      	ldr	r3, [pc, #160]	; (1d7c <usart_async_read+0xcc>)
    1cdc:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1cde:	a801      	add	r0, sp, #4
    1ce0:	4b27      	ldr	r3, [pc, #156]	; (1d80 <usart_async_read+0xd0>)
    1ce2:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1ce4:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1ce6:	e03e      	b.n	1d66 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1ce8:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1cec:	4920      	ldr	r1, [pc, #128]	; (1d70 <usart_async_read+0xc0>)
    1cee:	2000      	movs	r0, #0
    1cf0:	4b20      	ldr	r3, [pc, #128]	; (1d74 <usart_async_read+0xc4>)
    1cf2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1cf4:	a801      	add	r0, sp, #4
    1cf6:	4b20      	ldr	r3, [pc, #128]	; (1d78 <usart_async_read+0xc8>)
    1cf8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1cfa:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1cfe:	4650      	mov	r0, sl
    1d00:	4b1e      	ldr	r3, [pc, #120]	; (1d7c <usart_async_read+0xcc>)
    1d02:	4798      	blx	r3
    1d04:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1d06:	a801      	add	r0, sp, #4
    1d08:	4b1d      	ldr	r3, [pc, #116]	; (1d80 <usart_async_read+0xd0>)
    1d0a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1d0c:	f1b9 0f00 	cmp.w	r9, #0
    1d10:	d004      	beq.n	1d1c <usart_async_read+0x6c>
    1d12:	f1b8 0f00 	cmp.w	r8, #0
    1d16:	d119      	bne.n	1d4c <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1d18:	2500      	movs	r5, #0
    1d1a:	e024      	b.n	1d66 <usart_async_read+0xb6>
    1d1c:	2500      	movs	r5, #0
    1d1e:	e022      	b.n	1d66 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1d20:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1d24:	4912      	ldr	r1, [pc, #72]	; (1d70 <usart_async_read+0xc0>)
    1d26:	2001      	movs	r0, #1
    1d28:	4b12      	ldr	r3, [pc, #72]	; (1d74 <usart_async_read+0xc4>)
    1d2a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1d2c:	a801      	add	r0, sp, #4
    1d2e:	4b12      	ldr	r3, [pc, #72]	; (1d78 <usart_async_read+0xc8>)
    1d30:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1d32:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1d36:	4650      	mov	r0, sl
    1d38:	4b10      	ldr	r3, [pc, #64]	; (1d7c <usart_async_read+0xcc>)
    1d3a:	4798      	blx	r3
    1d3c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1d3e:	a801      	add	r0, sp, #4
    1d40:	4b0f      	ldr	r3, [pc, #60]	; (1d80 <usart_async_read+0xd0>)
    1d42:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1d44:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1d46:	f1b9 0f00 	cmp.w	r9, #0
    1d4a:	d00c      	beq.n	1d66 <usart_async_read+0xb6>
{
    1d4c:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1d4e:	4e0d      	ldr	r6, [pc, #52]	; (1d84 <usart_async_read+0xd4>)
    1d50:	1c60      	adds	r0, r4, #1
    1d52:	b285      	uxth	r5, r0
    1d54:	1939      	adds	r1, r7, r4
    1d56:	4650      	mov	r0, sl
    1d58:	47b0      	blx	r6
    1d5a:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1d5c:	454c      	cmp	r4, r9
    1d5e:	d202      	bcs.n	1d66 <usart_async_read+0xb6>
    1d60:	b2a3      	uxth	r3, r4
    1d62:	4598      	cmp	r8, r3
    1d64:	d8f4      	bhi.n	1d50 <usart_async_read+0xa0>
}
    1d66:	4628      	mov	r0, r5
    1d68:	b002      	add	sp, #8
    1d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d6e:	bf00      	nop
    1d70:	0000ac3c 	.word	0x0000ac3c
    1d74:	00002481 	.word	0x00002481
    1d78:	000012d9 	.word	0x000012d9
    1d7c:	000025fd 	.word	0x000025fd
    1d80:	000012e7 	.word	0x000012e7
    1d84:	00002579 	.word	0x00002579

00001d88 <usart_async_init>:
{
    1d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d8a:	460d      	mov	r5, r1
    1d8c:	4616      	mov	r6, r2
    1d8e:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1d90:	4604      	mov	r4, r0
    1d92:	b320      	cbz	r0, 1dde <usart_async_init+0x56>
    1d94:	b329      	cbz	r1, 1de2 <usart_async_init+0x5a>
    1d96:	b332      	cbz	r2, 1de6 <usart_async_init+0x5e>
    1d98:	1c18      	adds	r0, r3, #0
    1d9a:	bf18      	it	ne
    1d9c:	2001      	movne	r0, #1
    1d9e:	223a      	movs	r2, #58	; 0x3a
    1da0:	4913      	ldr	r1, [pc, #76]	; (1df0 <usart_async_init+0x68>)
    1da2:	4b14      	ldr	r3, [pc, #80]	; (1df4 <usart_async_init+0x6c>)
    1da4:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1da6:	463a      	mov	r2, r7
    1da8:	4631      	mov	r1, r6
    1daa:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1dae:	4b12      	ldr	r3, [pc, #72]	; (1df8 <usart_async_init+0x70>)
    1db0:	4798      	blx	r3
    1db2:	b9d0      	cbnz	r0, 1dea <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    1db4:	4629      	mov	r1, r5
    1db6:	f104 0008 	add.w	r0, r4, #8
    1dba:	4b10      	ldr	r3, [pc, #64]	; (1dfc <usart_async_init+0x74>)
    1dbc:	4798      	blx	r3
	if (init_status) {
    1dbe:	4603      	mov	r3, r0
    1dc0:	b958      	cbnz	r0, 1dda <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1dc2:	4a0f      	ldr	r2, [pc, #60]	; (1e00 <usart_async_init+0x78>)
    1dc4:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1dc6:	4a0f      	ldr	r2, [pc, #60]	; (1e04 <usart_async_init+0x7c>)
    1dc8:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1dca:	4a0f      	ldr	r2, [pc, #60]	; (1e08 <usart_async_init+0x80>)
    1dcc:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1dce:	4a0f      	ldr	r2, [pc, #60]	; (1e0c <usart_async_init+0x84>)
    1dd0:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1dd2:	4a0f      	ldr	r2, [pc, #60]	; (1e10 <usart_async_init+0x88>)
    1dd4:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1dd6:	4a0f      	ldr	r2, [pc, #60]	; (1e14 <usart_async_init+0x8c>)
    1dd8:	6162      	str	r2, [r4, #20]
}
    1dda:	4618      	mov	r0, r3
    1ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1dde:	2000      	movs	r0, #0
    1de0:	e7dd      	b.n	1d9e <usart_async_init+0x16>
    1de2:	2000      	movs	r0, #0
    1de4:	e7db      	b.n	1d9e <usart_async_init+0x16>
    1de6:	2000      	movs	r0, #0
    1de8:	e7d9      	b.n	1d9e <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1dea:	f06f 030c 	mvn.w	r3, #12
    1dee:	e7f4      	b.n	1dda <usart_async_init+0x52>
    1df0:	0000ac3c 	.word	0x0000ac3c
    1df4:	00002481 	.word	0x00002481
    1df8:	00002529 	.word	0x00002529
    1dfc:	00003939 	.word	0x00003939
    1e00:	00001cb1 	.word	0x00001cb1
    1e04:	00001c1d 	.word	0x00001c1d
    1e08:	00001c7d 	.word	0x00001c7d
    1e0c:	00001c01 	.word	0x00001c01
    1e10:	00001bd9 	.word	0x00001bd9
    1e14:	00001bed 	.word	0x00001bed

00001e18 <usart_async_enable>:
{
    1e18:	b510      	push	{r4, lr}
	ASSERT(descr);
    1e1a:	4604      	mov	r4, r0
    1e1c:	2261      	movs	r2, #97	; 0x61
    1e1e:	4906      	ldr	r1, [pc, #24]	; (1e38 <usart_async_enable+0x20>)
    1e20:	3000      	adds	r0, #0
    1e22:	bf18      	it	ne
    1e24:	2001      	movne	r0, #1
    1e26:	4b05      	ldr	r3, [pc, #20]	; (1e3c <usart_async_enable+0x24>)
    1e28:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1e2a:	f104 0008 	add.w	r0, r4, #8
    1e2e:	4b04      	ldr	r3, [pc, #16]	; (1e40 <usart_async_enable+0x28>)
    1e30:	4798      	blx	r3
}
    1e32:	2000      	movs	r0, #0
    1e34:	bd10      	pop	{r4, pc}
    1e36:	bf00      	nop
    1e38:	0000ac3c 	.word	0x0000ac3c
    1e3c:	00002481 	.word	0x00002481
    1e40:	000039b5 	.word	0x000039b5

00001e44 <usart_async_get_io_descriptor>:
{
    1e44:	b538      	push	{r3, r4, r5, lr}
    1e46:	460c      	mov	r4, r1
	ASSERT(descr && io);
    1e48:	4605      	mov	r5, r0
    1e4a:	b148      	cbz	r0, 1e60 <usart_async_get_io_descriptor+0x1c>
    1e4c:	1c08      	adds	r0, r1, #0
    1e4e:	bf18      	it	ne
    1e50:	2001      	movne	r0, #1
    1e52:	2277      	movs	r2, #119	; 0x77
    1e54:	4903      	ldr	r1, [pc, #12]	; (1e64 <usart_async_get_io_descriptor+0x20>)
    1e56:	4b04      	ldr	r3, [pc, #16]	; (1e68 <usart_async_get_io_descriptor+0x24>)
    1e58:	4798      	blx	r3
	*io = &descr->io;
    1e5a:	6025      	str	r5, [r4, #0]
}
    1e5c:	2000      	movs	r0, #0
    1e5e:	bd38      	pop	{r3, r4, r5, pc}
    1e60:	2000      	movs	r0, #0
    1e62:	e7f6      	b.n	1e52 <usart_async_get_io_descriptor+0xe>
    1e64:	0000ac3c 	.word	0x0000ac3c
    1e68:	00002481 	.word	0x00002481

00001e6c <usart_async_register_callback>:
{
    1e6c:	b570      	push	{r4, r5, r6, lr}
    1e6e:	460c      	mov	r4, r1
    1e70:	4616      	mov	r6, r2
	ASSERT(descr);
    1e72:	4605      	mov	r5, r0
    1e74:	2283      	movs	r2, #131	; 0x83
    1e76:	4917      	ldr	r1, [pc, #92]	; (1ed4 <usart_async_register_callback+0x68>)
    1e78:	3000      	adds	r0, #0
    1e7a:	bf18      	it	ne
    1e7c:	2001      	movne	r0, #1
    1e7e:	4b16      	ldr	r3, [pc, #88]	; (1ed8 <usart_async_register_callback+0x6c>)
    1e80:	4798      	blx	r3
	switch (type) {
    1e82:	2c01      	cmp	r4, #1
    1e84:	d010      	beq.n	1ea8 <usart_async_register_callback+0x3c>
    1e86:	b124      	cbz	r4, 1e92 <usart_async_register_callback+0x26>
    1e88:	2c02      	cmp	r4, #2
    1e8a:	d018      	beq.n	1ebe <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    1e8c:	f06f 000c 	mvn.w	r0, #12
}
    1e90:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    1e92:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1e94:	1c32      	adds	r2, r6, #0
    1e96:	bf18      	it	ne
    1e98:	2201      	movne	r2, #1
    1e9a:	2101      	movs	r1, #1
    1e9c:	f105 0008 	add.w	r0, r5, #8
    1ea0:	4b0e      	ldr	r3, [pc, #56]	; (1edc <usart_async_register_callback+0x70>)
    1ea2:	4798      	blx	r3
	return ERR_NONE;
    1ea4:	2000      	movs	r0, #0
		break;
    1ea6:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    1ea8:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1eaa:	1c32      	adds	r2, r6, #0
    1eac:	bf18      	it	ne
    1eae:	2201      	movne	r2, #1
    1eb0:	2102      	movs	r1, #2
    1eb2:	f105 0008 	add.w	r0, r5, #8
    1eb6:	4b09      	ldr	r3, [pc, #36]	; (1edc <usart_async_register_callback+0x70>)
    1eb8:	4798      	blx	r3
	return ERR_NONE;
    1eba:	2000      	movs	r0, #0
		break;
    1ebc:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    1ebe:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1ec0:	1c32      	adds	r2, r6, #0
    1ec2:	bf18      	it	ne
    1ec4:	2201      	movne	r2, #1
    1ec6:	2103      	movs	r1, #3
    1ec8:	f105 0008 	add.w	r0, r5, #8
    1ecc:	4b03      	ldr	r3, [pc, #12]	; (1edc <usart_async_register_callback+0x70>)
    1ece:	4798      	blx	r3
	return ERR_NONE;
    1ed0:	2000      	movs	r0, #0
		break;
    1ed2:	bd70      	pop	{r4, r5, r6, pc}
    1ed4:	0000ac3c 	.word	0x0000ac3c
    1ed8:	00002481 	.word	0x00002481
    1edc:	000039e1 	.word	0x000039e1

00001ee0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1ee0:	4b0f      	ldr	r3, [pc, #60]	; (1f20 <_usb_d_find_ep+0x40>)
    1ee2:	7859      	ldrb	r1, [r3, #1]
    1ee4:	4288      	cmp	r0, r1
    1ee6:	d018      	beq.n	1f1a <_usb_d_find_ep+0x3a>
{
    1ee8:	b430      	push	{r4, r5}
    1eea:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1eec:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1eee:	f000 050f 	and.w	r5, r0, #15
    1ef2:	e007      	b.n	1f04 <_usb_d_find_ep+0x24>
    1ef4:	3301      	adds	r3, #1
    1ef6:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1ef8:	2b0d      	cmp	r3, #13
    1efa:	d009      	beq.n	1f10 <_usb_d_find_ep+0x30>
    1efc:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1efe:	7851      	ldrb	r1, [r2, #1]
    1f00:	4281      	cmp	r1, r0
    1f02:	d007      	beq.n	1f14 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1f04:	7814      	ldrb	r4, [r2, #0]
    1f06:	2c00      	cmp	r4, #0
    1f08:	d1f4      	bne.n	1ef4 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1f0a:	428d      	cmp	r5, r1
    1f0c:	d1f2      	bne.n	1ef4 <_usb_d_find_ep+0x14>
    1f0e:	e001      	b.n	1f14 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1f10:	f04f 33ff 	mov.w	r3, #4294967295
}
    1f14:	4618      	mov	r0, r3
    1f16:	bc30      	pop	{r4, r5}
    1f18:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1f1a:	2300      	movs	r3, #0
}
    1f1c:	4618      	mov	r0, r3
    1f1e:	4770      	bx	lr
    1f20:	20000618 	.word	0x20000618

00001f24 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1f24:	2000      	movs	r0, #0
    1f26:	4770      	bx	lr

00001f28 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1f28:	b538      	push	{r3, r4, r5, lr}
    1f2a:	4604      	mov	r4, r0
    1f2c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f2e:	4b09      	ldr	r3, [pc, #36]	; (1f54 <usb_d_cb_trans_more+0x2c>)
    1f30:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1f32:	4b09      	ldr	r3, [pc, #36]	; (1f58 <usb_d_cb_trans_more+0x30>)
    1f34:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1f38:	789b      	ldrb	r3, [r3, #2]
    1f3a:	2b03      	cmp	r3, #3
    1f3c:	d001      	beq.n	1f42 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1f3e:	2000      	movs	r0, #0
}
    1f40:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    1f42:	4b05      	ldr	r3, [pc, #20]	; (1f58 <usb_d_cb_trans_more+0x30>)
    1f44:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1f48:	6983      	ldr	r3, [r0, #24]
    1f4a:	4629      	mov	r1, r5
    1f4c:	4620      	mov	r0, r4
    1f4e:	4798      	blx	r3
    1f50:	bd38      	pop	{r3, r4, r5, pc}
    1f52:	bf00      	nop
    1f54:	00001ee1 	.word	0x00001ee1
    1f58:	20000618 	.word	0x20000618

00001f5c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5e:	b085      	sub	sp, #20
    1f60:	4606      	mov	r6, r0
    1f62:	460d      	mov	r5, r1
    1f64:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f66:	4b4d      	ldr	r3, [pc, #308]	; (209c <_usb_d_cb_trans_done+0x140>)
    1f68:	4798      	blx	r3
    1f6a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1f6c:	2d00      	cmp	r5, #0
    1f6e:	d15b      	bne.n	2028 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1f70:	4a4b      	ldr	r2, [pc, #300]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    1f72:	0143      	lsls	r3, r0, #5
    1f74:	18d1      	adds	r1, r2, r3
    1f76:	2000      	movs	r0, #0
    1f78:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1f7a:	5cd3      	ldrb	r3, [r2, r3]
    1f7c:	b173      	cbz	r3, 1f9c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1f7e:	4b48      	ldr	r3, [pc, #288]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    1f80:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1f84:	2201      	movs	r2, #1
    1f86:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1f88:	4845      	ldr	r0, [pc, #276]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    1f8a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1f8e:	69c3      	ldr	r3, [r0, #28]
    1f90:	463a      	mov	r2, r7
    1f92:	78c1      	ldrb	r1, [r0, #3]
    1f94:	4630      	mov	r0, r6
    1f96:	4798      	blx	r3
}
    1f98:	b005      	add	sp, #20
    1f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1f9c:	788b      	ldrb	r3, [r1, #2]
    1f9e:	2b03      	cmp	r3, #3
    1fa0:	d00b      	beq.n	1fba <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1fa2:	483f      	ldr	r0, [pc, #252]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    1fa4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1fa8:	4614      	mov	r4, r2
    1faa:	69d3      	ldr	r3, [r2, #28]
    1fac:	320c      	adds	r2, #12
    1fae:	2100      	movs	r1, #0
    1fb0:	7860      	ldrb	r0, [r4, #1]
    1fb2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1fb4:	2302      	movs	r3, #2
    1fb6:	70a3      	strb	r3, [r4, #2]
    1fb8:	e7ee      	b.n	1f98 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1fba:	460b      	mov	r3, r1
    1fbc:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1fc0:	460a      	mov	r2, r1
    1fc2:	69ce      	ldr	r6, [r1, #28]
    1fc4:	320c      	adds	r2, #12
    1fc6:	2101      	movs	r1, #1
    1fc8:	7858      	ldrb	r0, [r3, #1]
    1fca:	47b0      	blx	r6
		if (err) {
    1fcc:	b1a0      	cbz	r0, 1ff8 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1fce:	4b34      	ldr	r3, [pc, #208]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    1fd0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1fd4:	2205      	movs	r2, #5
    1fd6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1fd8:	2202      	movs	r2, #2
    1fda:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1fdc:	2d00      	cmp	r5, #0
    1fde:	db09      	blt.n	1ff4 <_usb_d_cb_trans_done+0x98>
    1fe0:	482f      	ldr	r0, [pc, #188]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    1fe2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1fe6:	7840      	ldrb	r0, [r0, #1]
    1fe8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1fec:	2101      	movs	r1, #1
    1fee:	4b2d      	ldr	r3, [pc, #180]	; (20a4 <_usb_d_cb_trans_done+0x148>)
    1ff0:	4798      	blx	r3
    1ff2:	e7d1      	b.n	1f98 <_usb_d_cb_trans_done+0x3c>
    1ff4:	7858      	ldrb	r0, [r3, #1]
    1ff6:	e7f9      	b.n	1fec <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1ff8:	4829      	ldr	r0, [pc, #164]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    1ffa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1ffe:	2304      	movs	r3, #4
    2000:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2002:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    2004:	2200      	movs	r2, #0
    2006:	9201      	str	r2, [sp, #4]
    2008:	9202      	str	r2, [sp, #8]
    200a:	4295      	cmp	r5, r2
    200c:	bfac      	ite	ge
    200e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    2012:	f003 030f 	andlt.w	r3, r3, #15
    2016:	f88d 300c 	strb.w	r3, [sp, #12]
    201a:	2301      	movs	r3, #1
    201c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    2020:	a801      	add	r0, sp, #4
    2022:	4b21      	ldr	r3, [pc, #132]	; (20a8 <_usb_d_cb_trans_done+0x14c>)
    2024:	4798      	blx	r3
    2026:	e7b7      	b.n	1f98 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    2028:	2d01      	cmp	r5, #1
    202a:	d00a      	beq.n	2042 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    202c:	2d02      	cmp	r5, #2
    202e:	d01c      	beq.n	206a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    2030:	2d03      	cmp	r5, #3
    2032:	d02a      	beq.n	208a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2034:	4b1a      	ldr	r3, [pc, #104]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    2036:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    203a:	2206      	movs	r2, #6
    203c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    203e:	70da      	strb	r2, [r3, #3]
    2040:	e7a2      	b.n	1f88 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2042:	4a17      	ldr	r2, [pc, #92]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    2044:	0143      	lsls	r3, r0, #5
    2046:	18d1      	adds	r1, r2, r3
    2048:	2002      	movs	r0, #2
    204a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    204c:	5cd3      	ldrb	r3, [r2, r3]
    204e:	b12b      	cbz	r3, 205c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2050:	4b13      	ldr	r3, [pc, #76]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    2052:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2056:	2205      	movs	r2, #5
    2058:	709a      	strb	r2, [r3, #2]
    205a:	e795      	b.n	1f88 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    205c:	460b      	mov	r3, r1
    205e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2060:	2100      	movs	r1, #0
    2062:	4630      	mov	r0, r6
    2064:	4b0f      	ldr	r3, [pc, #60]	; (20a4 <_usb_d_cb_trans_done+0x148>)
    2066:	4798      	blx	r3
    2068:	e78e      	b.n	1f88 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    206a:	4a0d      	ldr	r2, [pc, #52]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    206c:	0143      	lsls	r3, r0, #5
    206e:	18d1      	adds	r1, r2, r3
    2070:	2004      	movs	r0, #4
    2072:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2074:	5cd3      	ldrb	r3, [r2, r3]
    2076:	b12b      	cbz	r3, 2084 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2078:	4b09      	ldr	r3, [pc, #36]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    207a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    207e:	2201      	movs	r2, #1
    2080:	709a      	strb	r2, [r3, #2]
    2082:	e781      	b.n	1f88 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2084:	2302      	movs	r3, #2
    2086:	708b      	strb	r3, [r1, #2]
			return;
    2088:	e786      	b.n	1f98 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    208a:	4b05      	ldr	r3, [pc, #20]	; (20a0 <_usb_d_cb_trans_done+0x144>)
    208c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    2090:	2200      	movs	r2, #0
    2092:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2094:	2205      	movs	r2, #5
    2096:	70da      	strb	r2, [r3, #3]
    2098:	e776      	b.n	1f88 <_usb_d_cb_trans_done+0x2c>
    209a:	bf00      	nop
    209c:	00001ee1 	.word	0x00001ee1
    20a0:	20000618 	.word	0x20000618
    20a4:	00005925 	.word	0x00005925
    20a8:	00005acd 	.word	0x00005acd

000020ac <usb_d_cb_trans_setup>:
{
    20ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20b0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    20b2:	4b1c      	ldr	r3, [pc, #112]	; (2124 <usb_d_cb_trans_setup+0x78>)
    20b4:	4798      	blx	r3
    20b6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    20b8:	4c1b      	ldr	r4, [pc, #108]	; (2128 <usb_d_cb_trans_setup+0x7c>)
    20ba:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    20be:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    20c0:	4621      	mov	r1, r4
    20c2:	4628      	mov	r0, r5
    20c4:	4b19      	ldr	r3, [pc, #100]	; (212c <usb_d_cb_trans_setup+0x80>)
    20c6:	4798      	blx	r3
	if (n != 8) {
    20c8:	b2c0      	uxtb	r0, r0
    20ca:	2808      	cmp	r0, #8
    20cc:	d009      	beq.n	20e2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    20ce:	2101      	movs	r1, #1
    20d0:	4628      	mov	r0, r5
    20d2:	4c17      	ldr	r4, [pc, #92]	; (2130 <usb_d_cb_trans_setup+0x84>)
    20d4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    20d6:	2101      	movs	r1, #1
    20d8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    20dc:	47a0      	blx	r4
		return;
    20de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    20e2:	2100      	movs	r1, #0
    20e4:	4628      	mov	r0, r5
    20e6:	4f12      	ldr	r7, [pc, #72]	; (2130 <usb_d_cb_trans_setup+0x84>)
    20e8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    20ea:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    20ee:	2100      	movs	r1, #0
    20f0:	4640      	mov	r0, r8
    20f2:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    20f4:	4b0c      	ldr	r3, [pc, #48]	; (2128 <usb_d_cb_trans_setup+0x7c>)
    20f6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    20fa:	2201      	movs	r2, #1
    20fc:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    20fe:	695b      	ldr	r3, [r3, #20]
    2100:	4621      	mov	r1, r4
    2102:	4628      	mov	r0, r5
    2104:	4798      	blx	r3
    2106:	b108      	cbz	r0, 210c <usb_d_cb_trans_setup+0x60>
    2108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    210c:	4b06      	ldr	r3, [pc, #24]	; (2128 <usb_d_cb_trans_setup+0x7c>)
    210e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2112:	2305      	movs	r3, #5
    2114:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2116:	2101      	movs	r1, #1
    2118:	4628      	mov	r0, r5
    211a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    211c:	2101      	movs	r1, #1
    211e:	4640      	mov	r0, r8
    2120:	47b8      	blx	r7
    2122:	e7f1      	b.n	2108 <usb_d_cb_trans_setup+0x5c>
    2124:	00001ee1 	.word	0x00001ee1
    2128:	20000618 	.word	0x20000618
    212c:	00005a6d 	.word	0x00005a6d
    2130:	00005925 	.word	0x00005925

00002134 <usb_d_init>:

int32_t usb_d_init(void)
{
    2134:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2136:	4b11      	ldr	r3, [pc, #68]	; (217c <usb_d_init+0x48>)
    2138:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    213a:	2800      	cmp	r0, #0
    213c:	db1d      	blt.n	217a <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    213e:	4c10      	ldr	r4, [pc, #64]	; (2180 <usb_d_init+0x4c>)
    2140:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    2144:	2100      	movs	r1, #0
    2146:	4620      	mov	r0, r4
    2148:	4b0e      	ldr	r3, [pc, #56]	; (2184 <usb_d_init+0x50>)
    214a:	4798      	blx	r3
    214c:	4623      	mov	r3, r4
    214e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2152:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2154:	4a0c      	ldr	r2, [pc, #48]	; (2188 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2156:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2158:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    215a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    215c:	61da      	str	r2, [r3, #28]
    215e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2160:	4283      	cmp	r3, r0
    2162:	d1f8      	bne.n	2156 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2164:	4909      	ldr	r1, [pc, #36]	; (218c <usb_d_init+0x58>)
    2166:	2000      	movs	r0, #0
    2168:	4c09      	ldr	r4, [pc, #36]	; (2190 <usb_d_init+0x5c>)
    216a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    216c:	4909      	ldr	r1, [pc, #36]	; (2194 <usb_d_init+0x60>)
    216e:	2001      	movs	r0, #1
    2170:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2172:	4909      	ldr	r1, [pc, #36]	; (2198 <usb_d_init+0x64>)
    2174:	2002      	movs	r0, #2
    2176:	47a0      	blx	r4
	return ERR_NONE;
    2178:	2000      	movs	r0, #0
}
    217a:	bd10      	pop	{r4, pc}
    217c:	000052fd 	.word	0x000052fd
    2180:	20000618 	.word	0x20000618
    2184:	0000a273 	.word	0x0000a273
    2188:	00001f25 	.word	0x00001f25
    218c:	000020ad 	.word	0x000020ad
    2190:	00005cd5 	.word	0x00005cd5
    2194:	00001f29 	.word	0x00001f29
    2198:	00001f5d 	.word	0x00001f5d

0000219c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    219c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    219e:	4b01      	ldr	r3, [pc, #4]	; (21a4 <usb_d_register_callback+0x8>)
    21a0:	4798      	blx	r3
    21a2:	bd08      	pop	{r3, pc}
    21a4:	00005cad 	.word	0x00005cad

000021a8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    21a8:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    21aa:	4b01      	ldr	r3, [pc, #4]	; (21b0 <usb_d_enable+0x8>)
    21ac:	4798      	blx	r3
}
    21ae:	bd08      	pop	{r3, pc}
    21b0:	00005405 	.word	0x00005405

000021b4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    21b4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    21b6:	4b01      	ldr	r3, [pc, #4]	; (21bc <usb_d_attach+0x8>)
    21b8:	4798      	blx	r3
    21ba:	bd08      	pop	{r3, pc}
    21bc:	00005471 	.word	0x00005471

000021c0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    21c0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    21c2:	4b01      	ldr	r3, [pc, #4]	; (21c8 <usb_d_set_address+0x8>)
    21c4:	4798      	blx	r3
    21c6:	bd08      	pop	{r3, pc}
    21c8:	00005483 	.word	0x00005483

000021cc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    21cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ce:	4606      	mov	r6, r0
    21d0:	460c      	mov	r4, r1
    21d2:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <usb_d_ep_init+0x48>)
    21d6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    21d8:	2800      	cmp	r0, #0
    21da:	da14      	bge.n	2206 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    21dc:	20ff      	movs	r0, #255	; 0xff
    21de:	4b0d      	ldr	r3, [pc, #52]	; (2214 <usb_d_ep_init+0x48>)
    21e0:	4798      	blx	r3
		if (ep_index < 0) {
    21e2:	1e05      	subs	r5, r0, #0
    21e4:	db12      	blt.n	220c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    21e6:	463a      	mov	r2, r7
    21e8:	4621      	mov	r1, r4
    21ea:	4630      	mov	r0, r6
    21ec:	4b0a      	ldr	r3, [pc, #40]	; (2218 <usb_d_ep_init+0x4c>)
    21ee:	4798      	blx	r3
	if (rc < 0) {
    21f0:	2800      	cmp	r0, #0
    21f2:	db0d      	blt.n	2210 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    21f4:	4b09      	ldr	r3, [pc, #36]	; (221c <usb_d_ep_init+0x50>)
    21f6:	0168      	lsls	r0, r5, #5
    21f8:	181a      	adds	r2, r3, r0
    21fa:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    21fc:	f004 0403 	and.w	r4, r4, #3
    2200:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    2202:	2000      	movs	r0, #0
    2204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2206:	f06f 0013 	mvn.w	r0, #19
    220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    220c:	f06f 0014 	mvn.w	r0, #20
}
    2210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2212:	bf00      	nop
    2214:	00001ee1 	.word	0x00001ee1
    2218:	00005491 	.word	0x00005491
    221c:	20000618 	.word	0x20000618

00002220 <usb_d_ep0_init>:
{
    2220:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2222:	4602      	mov	r2, r0
    2224:	2100      	movs	r1, #0
    2226:	4608      	mov	r0, r1
    2228:	4b01      	ldr	r3, [pc, #4]	; (2230 <usb_d_ep0_init+0x10>)
    222a:	4798      	blx	r3
}
    222c:	bd08      	pop	{r3, pc}
    222e:	bf00      	nop
    2230:	000021cd 	.word	0x000021cd

00002234 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2234:	b538      	push	{r3, r4, r5, lr}
    2236:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2238:	4b06      	ldr	r3, [pc, #24]	; (2254 <usb_d_ep_deinit+0x20>)
    223a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    223c:	1e04      	subs	r4, r0, #0
    223e:	db07      	blt.n	2250 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2240:	4628      	mov	r0, r5
    2242:	4b05      	ldr	r3, [pc, #20]	; (2258 <usb_d_ep_deinit+0x24>)
    2244:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2246:	4805      	ldr	r0, [pc, #20]	; (225c <usb_d_ep_deinit+0x28>)
    2248:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    224c:	23ff      	movs	r3, #255	; 0xff
    224e:	7043      	strb	r3, [r0, #1]
    2250:	bd38      	pop	{r3, r4, r5, pc}
    2252:	bf00      	nop
    2254:	00001ee1 	.word	0x00001ee1
    2258:	000055a9 	.word	0x000055a9
    225c:	20000618 	.word	0x20000618

00002260 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2260:	b538      	push	{r3, r4, r5, lr}
    2262:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2264:	4b0e      	ldr	r3, [pc, #56]	; (22a0 <usb_d_ep_enable+0x40>)
    2266:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    2268:	1e04      	subs	r4, r0, #0
    226a:	db16      	blt.n	229a <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    226c:	0163      	lsls	r3, r4, #5
    226e:	4a0d      	ldr	r2, [pc, #52]	; (22a4 <usb_d_ep_enable+0x44>)
    2270:	5cd3      	ldrb	r3, [r2, r3]
    2272:	2b00      	cmp	r3, #0
    2274:	bf0c      	ite	eq
    2276:	2202      	moveq	r2, #2
    2278:	2201      	movne	r2, #1
    227a:	4b0a      	ldr	r3, [pc, #40]	; (22a4 <usb_d_ep_enable+0x44>)
    227c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2280:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2282:	4628      	mov	r0, r5
    2284:	4b08      	ldr	r3, [pc, #32]	; (22a8 <usb_d_ep_enable+0x48>)
    2286:	4798      	blx	r3
	if (rc < 0) {
    2288:	2800      	cmp	r0, #0
    228a:	db00      	blt.n	228e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    228c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    228e:	4b05      	ldr	r3, [pc, #20]	; (22a4 <usb_d_ep_enable+0x44>)
    2290:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    2294:	2300      	movs	r3, #0
    2296:	70a3      	strb	r3, [r4, #2]
    2298:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    229a:	f06f 0011 	mvn.w	r0, #17
    229e:	e7f5      	b.n	228c <usb_d_ep_enable+0x2c>
    22a0:	00001ee1 	.word	0x00001ee1
    22a4:	20000618 	.word	0x20000618
    22a8:	0000566d 	.word	0x0000566d

000022ac <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    22ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22b0:	b086      	sub	sp, #24
    22b2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    22b4:	7a07      	ldrb	r7, [r0, #8]
    22b6:	4638      	mov	r0, r7
    22b8:	4b3f      	ldr	r3, [pc, #252]	; (23b8 <usb_d_ep_transfer+0x10c>)
    22ba:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    22bc:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    22be:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    22c2:	1e06      	subs	r6, r0, #0
    22c4:	db72      	blt.n	23ac <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    22c6:	a804      	add	r0, sp, #16
    22c8:	4b3c      	ldr	r3, [pc, #240]	; (23bc <usb_d_ep_transfer+0x110>)
    22ca:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    22cc:	4b3c      	ldr	r3, [pc, #240]	; (23c0 <usb_d_ep_transfer+0x114>)
    22ce:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    22d2:	789b      	ldrb	r3, [r3, #2]
    22d4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    22d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    22dc:	b2db      	uxtb	r3, r3
    22de:	2b01      	cmp	r3, #1
    22e0:	d011      	beq.n	2306 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    22e2:	a804      	add	r0, sp, #16
    22e4:	4b37      	ldr	r3, [pc, #220]	; (23c4 <usb_d_ep_transfer+0x118>)
    22e6:	4798      	blx	r3
		switch (state) {
    22e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    22ec:	b2db      	uxtb	r3, r3
    22ee:	2b05      	cmp	r3, #5
    22f0:	d05f      	beq.n	23b2 <usb_d_ep_transfer+0x106>
    22f2:	2b06      	cmp	r3, #6
    22f4:	d023      	beq.n	233e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    22f6:	2b00      	cmp	r3, #0
    22f8:	bf0c      	ite	eq
    22fa:	f06f 0012 	mvneq.w	r0, #18
    22fe:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    2300:	b006      	add	sp, #24
    2302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2306:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 23c0 <usb_d_ep_transfer+0x114>
    230a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    230e:	eb0a 0309 	add.w	r3, sl, r9
    2312:	2203      	movs	r2, #3
    2314:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2316:	a804      	add	r0, sp, #16
    2318:	4b2a      	ldr	r3, [pc, #168]	; (23c4 <usb_d_ep_transfer+0x118>)
    231a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    231c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    2320:	b183      	cbz	r3, 2344 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2322:	7a22      	ldrb	r2, [r4, #8]
    2324:	3500      	adds	r5, #0
    2326:	bf18      	it	ne
    2328:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    232a:	6823      	ldr	r3, [r4, #0]
    232c:	9301      	str	r3, [sp, #4]
    232e:	f8cd 8008 	str.w	r8, [sp, #8]
    2332:	f017 0f80 	tst.w	r7, #128	; 0x80
    2336:	d119      	bne.n	236c <usb_d_ep_transfer+0xc0>
    2338:	f002 030f 	and.w	r3, r2, #15
    233c:	e018      	b.n	2370 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    233e:	f06f 000f 	mvn.w	r0, #15
    2342:	e7dd      	b.n	2300 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2344:	4b1e      	ldr	r3, [pc, #120]	; (23c0 <usb_d_ep_transfer+0x114>)
    2346:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    234a:	7cda      	ldrb	r2, [r3, #19]
    234c:	7c9d      	ldrb	r5, [r3, #18]
    234e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    2352:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    2354:	b9a5      	cbnz	r5, 2380 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2356:	4b1a      	ldr	r3, [pc, #104]	; (23c0 <usb_d_ep_transfer+0x114>)
    2358:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    235c:	2304      	movs	r3, #4
    235e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    2360:	2300      	movs	r3, #0
			zlp                 = true;
    2362:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2364:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    2366:	6821      	ldr	r1, [r4, #0]
    2368:	9101      	str	r1, [sp, #4]
    236a:	9302      	str	r3, [sp, #8]
    236c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    2370:	f88d 300c 	strb.w	r3, [sp, #12]
    2374:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    2378:	a801      	add	r0, sp, #4
    237a:	4b13      	ldr	r3, [pc, #76]	; (23c8 <usb_d_ep_transfer+0x11c>)
    237c:	4798      	blx	r3
	return rc;
    237e:	e7bf      	b.n	2300 <usb_d_ep_transfer+0x54>
    2380:	4643      	mov	r3, r8
    2382:	45a8      	cmp	r8, r5
    2384:	bf28      	it	cs
    2386:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2388:	4a0d      	ldr	r2, [pc, #52]	; (23c0 <usb_d_ep_transfer+0x114>)
    238a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    238e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    2392:	2a00      	cmp	r2, #0
    2394:	db05      	blt.n	23a2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2396:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    2398:	6821      	ldr	r1, [r4, #0]
    239a:	9101      	str	r1, [sp, #4]
    239c:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    239e:	2500      	movs	r5, #0
    23a0:	e7ca      	b.n	2338 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    23a2:	429d      	cmp	r5, r3
    23a4:	bf94      	ite	ls
    23a6:	2500      	movls	r5, #0
    23a8:	2501      	movhi	r5, #1
    23aa:	e7db      	b.n	2364 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    23ac:	f06f 0011 	mvn.w	r0, #17
    23b0:	e7a6      	b.n	2300 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    23b2:	2002      	movs	r0, #2
    23b4:	e7a4      	b.n	2300 <usb_d_ep_transfer+0x54>
    23b6:	bf00      	nop
    23b8:	00001ee1 	.word	0x00001ee1
    23bc:	000012d9 	.word	0x000012d9
    23c0:	20000618 	.word	0x20000618
    23c4:	000012e7 	.word	0x000012e7
    23c8:	00005acd 	.word	0x00005acd

000023cc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    23cc:	b538      	push	{r3, r4, r5, lr}
    23ce:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    23d0:	b141      	cbz	r1, 23e4 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    23d2:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    23d4:	bf0c      	ite	eq
    23d6:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    23d8:	2102      	movne	r1, #2
    23da:	4b13      	ldr	r3, [pc, #76]	; (2428 <usb_d_ep_halt+0x5c>)
    23dc:	4798      	blx	r3
    23de:	4603      	mov	r3, r0
	}
}
    23e0:	4618      	mov	r0, r3
    23e2:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    23e4:	4b11      	ldr	r3, [pc, #68]	; (242c <usb_d_ep_halt+0x60>)
    23e6:	4798      	blx	r3
	if (ep_index < 0) {
    23e8:	1e05      	subs	r5, r0, #0
    23ea:	db19      	blt.n	2420 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    23ec:	2102      	movs	r1, #2
    23ee:	4620      	mov	r0, r4
    23f0:	4b0d      	ldr	r3, [pc, #52]	; (2428 <usb_d_ep_halt+0x5c>)
    23f2:	4798      	blx	r3
    23f4:	4603      	mov	r3, r0
    23f6:	2800      	cmp	r0, #0
    23f8:	d0f2      	beq.n	23e0 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    23fa:	2100      	movs	r1, #0
    23fc:	4620      	mov	r0, r4
    23fe:	4b0a      	ldr	r3, [pc, #40]	; (2428 <usb_d_ep_halt+0x5c>)
    2400:	4798      	blx	r3
		if (rc < 0) {
    2402:	1e03      	subs	r3, r0, #0
    2404:	dbec      	blt.n	23e0 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2406:	4b0a      	ldr	r3, [pc, #40]	; (2430 <usb_d_ep_halt+0x64>)
    2408:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    240c:	2201      	movs	r2, #1
    240e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2410:	2103      	movs	r1, #3
    2412:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2414:	69db      	ldr	r3, [r3, #28]
    2416:	2200      	movs	r2, #0
    2418:	4620      	mov	r0, r4
    241a:	4798      	blx	r3
	return ERR_NONE;
    241c:	2300      	movs	r3, #0
    241e:	e7df      	b.n	23e0 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    2420:	f06f 0311 	mvn.w	r3, #17
    2424:	e7dc      	b.n	23e0 <usb_d_ep_halt+0x14>
    2426:	bf00      	nop
    2428:	00005925 	.word	0x00005925
    242c:	00001ee1 	.word	0x00001ee1
    2430:	20000618 	.word	0x20000618

00002434 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2434:	b538      	push	{r3, r4, r5, lr}
    2436:	460d      	mov	r5, r1
    2438:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    243a:	4b0e      	ldr	r3, [pc, #56]	; (2474 <usb_d_ep_register_callback+0x40>)
    243c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    243e:	4b0e      	ldr	r3, [pc, #56]	; (2478 <usb_d_ep_register_callback+0x44>)
    2440:	2c00      	cmp	r4, #0
    2442:	bf08      	it	eq
    2444:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    2446:	2800      	cmp	r0, #0
    2448:	db13      	blt.n	2472 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    244a:	2d01      	cmp	r5, #1
    244c:	d008      	beq.n	2460 <usb_d_ep_register_callback+0x2c>
    244e:	b115      	cbz	r5, 2456 <usb_d_ep_register_callback+0x22>
    2450:	2d02      	cmp	r5, #2
    2452:	d00a      	beq.n	246a <usb_d_ep_register_callback+0x36>
    2454:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2456:	4b09      	ldr	r3, [pc, #36]	; (247c <usb_d_ep_register_callback+0x48>)
    2458:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    245c:	6144      	str	r4, [r0, #20]
		break;
    245e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2460:	4b06      	ldr	r3, [pc, #24]	; (247c <usb_d_ep_register_callback+0x48>)
    2462:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2466:	6184      	str	r4, [r0, #24]
		break;
    2468:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    246a:	4b04      	ldr	r3, [pc, #16]	; (247c <usb_d_ep_register_callback+0x48>)
    246c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2470:	61c4      	str	r4, [r0, #28]
    2472:	bd38      	pop	{r3, r4, r5, pc}
    2474:	00001ee1 	.word	0x00001ee1
    2478:	00001f25 	.word	0x00001f25
    247c:	20000618 	.word	0x20000618

00002480 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2480:	b900      	cbnz	r0, 2484 <assert+0x4>
		__asm("BKPT #0");
    2482:	be00      	bkpt	0x0000
    2484:	4770      	bx	lr

00002486 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2486:	6803      	ldr	r3, [r0, #0]
    2488:	b14b      	cbz	r3, 249e <is_list_element+0x18>
		if (it == element) {
    248a:	428b      	cmp	r3, r1
    248c:	d009      	beq.n	24a2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    248e:	681b      	ldr	r3, [r3, #0]
    2490:	b11b      	cbz	r3, 249a <is_list_element+0x14>
		if (it == element) {
    2492:	4299      	cmp	r1, r3
    2494:	d1fb      	bne.n	248e <is_list_element+0x8>
			return true;
    2496:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2498:	4770      	bx	lr
	return false;
    249a:	2000      	movs	r0, #0
    249c:	4770      	bx	lr
    249e:	2000      	movs	r0, #0
    24a0:	4770      	bx	lr
			return true;
    24a2:	2001      	movs	r0, #1
    24a4:	4770      	bx	lr
	...

000024a8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    24a8:	b538      	push	{r3, r4, r5, lr}
    24aa:	4604      	mov	r4, r0
    24ac:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    24ae:	4b06      	ldr	r3, [pc, #24]	; (24c8 <list_insert_as_head+0x20>)
    24b0:	4798      	blx	r3
    24b2:	f080 0001 	eor.w	r0, r0, #1
    24b6:	2239      	movs	r2, #57	; 0x39
    24b8:	4904      	ldr	r1, [pc, #16]	; (24cc <list_insert_as_head+0x24>)
    24ba:	b2c0      	uxtb	r0, r0
    24bc:	4b04      	ldr	r3, [pc, #16]	; (24d0 <list_insert_as_head+0x28>)
    24be:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    24c0:	6823      	ldr	r3, [r4, #0]
    24c2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    24c4:	6025      	str	r5, [r4, #0]
    24c6:	bd38      	pop	{r3, r4, r5, pc}
    24c8:	00002487 	.word	0x00002487
    24cc:	0000ac5c 	.word	0x0000ac5c
    24d0:	00002481 	.word	0x00002481

000024d4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    24d4:	6803      	ldr	r3, [r0, #0]
    24d6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    24d8:	6001      	str	r1, [r0, #0]
    24da:	4770      	bx	lr

000024dc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    24dc:	b570      	push	{r4, r5, r6, lr}
    24de:	4605      	mov	r5, r0
    24e0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    24e2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    24e4:	4b0a      	ldr	r3, [pc, #40]	; (2510 <list_insert_at_end+0x34>)
    24e6:	4798      	blx	r3
    24e8:	f080 0001 	eor.w	r0, r0, #1
    24ec:	224f      	movs	r2, #79	; 0x4f
    24ee:	4909      	ldr	r1, [pc, #36]	; (2514 <list_insert_at_end+0x38>)
    24f0:	b2c0      	uxtb	r0, r0
    24f2:	4b09      	ldr	r3, [pc, #36]	; (2518 <list_insert_at_end+0x3c>)
    24f4:	4798      	blx	r3

	if (!list->head) {
    24f6:	682b      	ldr	r3, [r5, #0]
    24f8:	b91b      	cbnz	r3, 2502 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    24fa:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    24fc:	6033      	str	r3, [r6, #0]
		return;
    24fe:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    2500:	461c      	mov	r4, r3
	while (it->next) {
    2502:	6823      	ldr	r3, [r4, #0]
    2504:	2b00      	cmp	r3, #0
    2506:	d1fb      	bne.n	2500 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    2508:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    250a:	6033      	str	r3, [r6, #0]
    250c:	bd70      	pop	{r4, r5, r6, pc}
    250e:	bf00      	nop
    2510:	00002487 	.word	0x00002487
    2514:	0000ac5c 	.word	0x0000ac5c
    2518:	00002481 	.word	0x00002481

0000251c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    251c:	6803      	ldr	r3, [r0, #0]
    251e:	b10b      	cbz	r3, 2524 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2520:	681a      	ldr	r2, [r3, #0]
    2522:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2524:	4618      	mov	r0, r3
    2526:	4770      	bx	lr

00002528 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2528:	b570      	push	{r4, r5, r6, lr}
    252a:	460e      	mov	r6, r1
    252c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    252e:	4604      	mov	r4, r0
    2530:	b178      	cbz	r0, 2552 <ringbuffer_init+0x2a>
    2532:	b181      	cbz	r1, 2556 <ringbuffer_init+0x2e>
    2534:	b1a2      	cbz	r2, 2560 <ringbuffer_init+0x38>
    2536:	2001      	movs	r0, #1
    2538:	2228      	movs	r2, #40	; 0x28
    253a:	490d      	ldr	r1, [pc, #52]	; (2570 <ringbuffer_init+0x48>)
    253c:	4b0d      	ldr	r3, [pc, #52]	; (2574 <ringbuffer_init+0x4c>)
    253e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2540:	1e6b      	subs	r3, r5, #1
    2542:	421d      	tst	r5, r3
    2544:	d109      	bne.n	255a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2546:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2548:	2000      	movs	r0, #0
    254a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    254c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    254e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    2550:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2552:	2000      	movs	r0, #0
    2554:	e7f0      	b.n	2538 <ringbuffer_init+0x10>
    2556:	2000      	movs	r0, #0
    2558:	e7ee      	b.n	2538 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    255a:	f06f 000c 	mvn.w	r0, #12
    255e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2560:	2228      	movs	r2, #40	; 0x28
    2562:	4903      	ldr	r1, [pc, #12]	; (2570 <ringbuffer_init+0x48>)
    2564:	2000      	movs	r0, #0
    2566:	4b03      	ldr	r3, [pc, #12]	; (2574 <ringbuffer_init+0x4c>)
    2568:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    256a:	1e6b      	subs	r3, r5, #1
    256c:	e7eb      	b.n	2546 <ringbuffer_init+0x1e>
    256e:	bf00      	nop
    2570:	0000ac7c 	.word	0x0000ac7c
    2574:	00002481 	.word	0x00002481

00002578 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2578:	b538      	push	{r3, r4, r5, lr}
    257a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    257c:	4604      	mov	r4, r0
    257e:	b1a0      	cbz	r0, 25aa <ringbuffer_get+0x32>
    2580:	1c08      	adds	r0, r1, #0
    2582:	bf18      	it	ne
    2584:	2001      	movne	r0, #1
    2586:	2240      	movs	r2, #64	; 0x40
    2588:	490a      	ldr	r1, [pc, #40]	; (25b4 <ringbuffer_get+0x3c>)
    258a:	4b0b      	ldr	r3, [pc, #44]	; (25b8 <ringbuffer_get+0x40>)
    258c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    258e:	68a3      	ldr	r3, [r4, #8]
    2590:	68e2      	ldr	r2, [r4, #12]
    2592:	429a      	cmp	r2, r3
    2594:	d00b      	beq.n	25ae <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    2596:	6862      	ldr	r2, [r4, #4]
    2598:	4013      	ands	r3, r2
    259a:	6822      	ldr	r2, [r4, #0]
    259c:	5cd3      	ldrb	r3, [r2, r3]
    259e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    25a0:	68a3      	ldr	r3, [r4, #8]
    25a2:	3301      	adds	r3, #1
    25a4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    25a6:	2000      	movs	r0, #0
    25a8:	bd38      	pop	{r3, r4, r5, pc}
    25aa:	2000      	movs	r0, #0
    25ac:	e7eb      	b.n	2586 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    25ae:	f06f 0009 	mvn.w	r0, #9
}
    25b2:	bd38      	pop	{r3, r4, r5, pc}
    25b4:	0000ac7c 	.word	0x0000ac7c
    25b8:	00002481 	.word	0x00002481

000025bc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    25bc:	b538      	push	{r3, r4, r5, lr}
    25be:	460d      	mov	r5, r1
	ASSERT(rb);
    25c0:	4604      	mov	r4, r0
    25c2:	2251      	movs	r2, #81	; 0x51
    25c4:	490b      	ldr	r1, [pc, #44]	; (25f4 <ringbuffer_put+0x38>)
    25c6:	3000      	adds	r0, #0
    25c8:	bf18      	it	ne
    25ca:	2001      	movne	r0, #1
    25cc:	4b0a      	ldr	r3, [pc, #40]	; (25f8 <ringbuffer_put+0x3c>)
    25ce:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    25d0:	68e3      	ldr	r3, [r4, #12]
    25d2:	6862      	ldr	r2, [r4, #4]
    25d4:	4013      	ands	r3, r2
    25d6:	6822      	ldr	r2, [r4, #0]
    25d8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    25da:	68e3      	ldr	r3, [r4, #12]
    25dc:	6861      	ldr	r1, [r4, #4]
    25de:	68a2      	ldr	r2, [r4, #8]
    25e0:	1a9a      	subs	r2, r3, r2
    25e2:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    25e4:	bf84      	itt	hi
    25e6:	1a59      	subhi	r1, r3, r1
    25e8:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    25ea:	3301      	adds	r3, #1
    25ec:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    25ee:	2000      	movs	r0, #0
    25f0:	bd38      	pop	{r3, r4, r5, pc}
    25f2:	bf00      	nop
    25f4:	0000ac7c 	.word	0x0000ac7c
    25f8:	00002481 	.word	0x00002481

000025fc <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    25fc:	b510      	push	{r4, lr}
	ASSERT(rb);
    25fe:	4604      	mov	r4, r0
    2600:	2267      	movs	r2, #103	; 0x67
    2602:	4905      	ldr	r1, [pc, #20]	; (2618 <ringbuffer_num+0x1c>)
    2604:	3000      	adds	r0, #0
    2606:	bf18      	it	ne
    2608:	2001      	movne	r0, #1
    260a:	4b04      	ldr	r3, [pc, #16]	; (261c <ringbuffer_num+0x20>)
    260c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    260e:	68e0      	ldr	r0, [r4, #12]
    2610:	68a3      	ldr	r3, [r4, #8]
}
    2612:	1ac0      	subs	r0, r0, r3
    2614:	bd10      	pop	{r4, pc}
    2616:	bf00      	nop
    2618:	0000ac7c 	.word	0x0000ac7c
    261c:	00002481 	.word	0x00002481

00002620 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2620:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2622:	4a06      	ldr	r2, [pc, #24]	; (263c <_sbrk+0x1c>)
    2624:	6812      	ldr	r2, [r2, #0]
    2626:	b122      	cbz	r2, 2632 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2628:	4a04      	ldr	r2, [pc, #16]	; (263c <_sbrk+0x1c>)
    262a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    262c:	4403      	add	r3, r0
    262e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2630:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2632:	4903      	ldr	r1, [pc, #12]	; (2640 <_sbrk+0x20>)
    2634:	4a01      	ldr	r2, [pc, #4]	; (263c <_sbrk+0x1c>)
    2636:	6011      	str	r1, [r2, #0]
    2638:	e7f6      	b.n	2628 <_sbrk+0x8>
    263a:	bf00      	nop
    263c:	200007b8 	.word	0x200007b8
    2640:	20012c20 	.word	0x20012c20

00002644 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2644:	6940      	ldr	r0, [r0, #20]
    2646:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    264a:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    264e:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    2650:	0040      	lsls	r0, r0, #1
    2652:	3076      	adds	r0, #118	; 0x76
}
    2654:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2658:	4770      	bx	lr
	...

0000265c <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    265c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    265e:	f013 0f01 	tst.w	r3, #1
    2662:	d11b      	bne.n	269c <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2664:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2666:	f013 0f03 	tst.w	r3, #3
    266a:	d1fb      	bne.n	2664 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    266c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    266e:	f013 0f02 	tst.w	r3, #2
    2672:	d00d      	beq.n	2690 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    2674:	8803      	ldrh	r3, [r0, #0]
    2676:	f023 0302 	bic.w	r3, r3, #2
    267a:	041b      	lsls	r3, r3, #16
    267c:	0c1b      	lsrs	r3, r3, #16
    267e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2680:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2682:	f013 0f03 	tst.w	r3, #3
    2686:	d1fb      	bne.n	2680 <_adc_init+0x24>
    2688:	6b03      	ldr	r3, [r0, #48]	; 0x30
    268a:	f013 0f02 	tst.w	r3, #2
    268e:	d1fb      	bne.n	2688 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    2690:	2301      	movs	r3, #1
    2692:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2694:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2696:	f013 0f03 	tst.w	r3, #3
    269a:	d1fb      	bne.n	2694 <_adc_init+0x38>
    269c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    269e:	f013 0f01 	tst.w	r3, #1
    26a2:	d1fb      	bne.n	269c <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    26a4:	2316      	movs	r3, #22
    26a6:	4a37      	ldr	r2, [pc, #220]	; (2784 <_adc_init+0x128>)
    26a8:	fb03 2301 	mla	r3, r3, r1, r2
    26ac:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    26ae:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    26b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    26b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    26b6:	2b00      	cmp	r3, #0
    26b8:	d1fa      	bne.n	26b0 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    26ba:	2316      	movs	r3, #22
    26bc:	4a31      	ldr	r2, [pc, #196]	; (2784 <_adc_init+0x128>)
    26be:	fb03 2301 	mla	r3, r3, r1, r2
    26c2:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    26c4:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    26c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    26c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    26cc:	2b00      	cmp	r3, #0
    26ce:	d1fa      	bne.n	26c6 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    26d0:	2316      	movs	r3, #22
    26d2:	4a2c      	ldr	r2, [pc, #176]	; (2784 <_adc_init+0x128>)
    26d4:	fb03 2301 	mla	r3, r3, r1, r2
    26d8:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    26da:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    26dc:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    26de:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    26e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    26e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    26e6:	2b00      	cmp	r3, #0
    26e8:	d1fa      	bne.n	26e0 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    26ea:	2316      	movs	r3, #22
    26ec:	4a25      	ldr	r2, [pc, #148]	; (2784 <_adc_init+0x128>)
    26ee:	fb03 2301 	mla	r3, r3, r1, r2
    26f2:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    26f4:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    26f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    26f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    26fc:	2b00      	cmp	r3, #0
    26fe:	d1fa      	bne.n	26f6 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2700:	2316      	movs	r3, #22
    2702:	4a20      	ldr	r2, [pc, #128]	; (2784 <_adc_init+0x128>)
    2704:	fb03 2301 	mla	r3, r3, r1, r2
    2708:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    270a:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    270c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    270e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2712:	2b00      	cmp	r3, #0
    2714:	d1fa      	bne.n	270c <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2716:	2316      	movs	r3, #22
    2718:	4a1a      	ldr	r2, [pc, #104]	; (2784 <_adc_init+0x128>)
    271a:	fb03 2301 	mla	r3, r3, r1, r2
    271e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2720:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2722:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2724:	f013 0f80 	tst.w	r3, #128	; 0x80
    2728:	d1fb      	bne.n	2722 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    272a:	2316      	movs	r3, #22
    272c:	4a15      	ldr	r2, [pc, #84]	; (2784 <_adc_init+0x128>)
    272e:	fb03 2301 	mla	r3, r3, r1, r2
    2732:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2734:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2736:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2738:	f413 7f80 	tst.w	r3, #256	; 0x100
    273c:	d1fb      	bne.n	2736 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    273e:	2316      	movs	r3, #22
    2740:	4a10      	ldr	r2, [pc, #64]	; (2784 <_adc_init+0x128>)
    2742:	fb03 2301 	mla	r3, r3, r1, r2
    2746:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2748:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    274a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    274c:	f413 7f00 	tst.w	r3, #512	; 0x200
    2750:	d1fb      	bne.n	274a <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2752:	2316      	movs	r3, #22
    2754:	4a0b      	ldr	r2, [pc, #44]	; (2784 <_adc_init+0x128>)
    2756:	fb03 2301 	mla	r3, r3, r1, r2
    275a:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    275c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    275e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2760:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2764:	d1fb      	bne.n	275e <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2766:	2216      	movs	r2, #22
    2768:	4b06      	ldr	r3, [pc, #24]	; (2784 <_adc_init+0x128>)
    276a:	fb02 3101 	mla	r1, r2, r1, r3
    276e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2770:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    2772:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    2774:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2776:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2778:	f013 0f03 	tst.w	r3, #3
    277c:	d1fb      	bne.n	2776 <_adc_init+0x11a>

	return ERR_NONE;
}
    277e:	2000      	movs	r0, #0
    2780:	4770      	bx	lr
    2782:	bf00      	nop
    2784:	0000aca0 	.word	0x0000aca0

00002788 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    2788:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    278a:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    278c:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    2790:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    2794:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    2796:	f013 0f01 	tst.w	r3, #1
    279a:	d106      	bne.n	27aa <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    279c:	f013 0f02 	tst.w	r3, #2
    27a0:	d10d      	bne.n	27be <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    27a2:	f013 0f04 	tst.w	r3, #4
    27a6:	d111      	bne.n	27cc <_adc_interrupt_handler+0x44>
    27a8:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    27aa:	2301      	movs	r3, #1
    27ac:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    27b0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    27b4:	6883      	ldr	r3, [r0, #8]
    27b6:	b292      	uxth	r2, r2
    27b8:	2100      	movs	r1, #0
    27ba:	4798      	blx	r3
    27bc:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    27be:	2302      	movs	r3, #2
    27c0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    27c4:	6843      	ldr	r3, [r0, #4]
    27c6:	2100      	movs	r1, #0
    27c8:	4798      	blx	r3
    27ca:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    27cc:	2304      	movs	r3, #4
    27ce:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    27d2:	6803      	ldr	r3, [r0, #0]
    27d4:	2100      	movs	r1, #0
    27d6:	4798      	blx	r3
	}
}
    27d8:	e7e6      	b.n	27a8 <_adc_interrupt_handler+0x20>
	...

000027dc <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    27dc:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    27e0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    27e4:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    27e8:	b148      	cbz	r0, 27fe <_adc_get_regs+0x22>
    27ea:	2801      	cmp	r0, #1
    27ec:	d009      	beq.n	2802 <_adc_get_regs+0x26>
{
    27ee:	b508      	push	{r3, lr}
	ASSERT(false);
    27f0:	228c      	movs	r2, #140	; 0x8c
    27f2:	4905      	ldr	r1, [pc, #20]	; (2808 <_adc_get_regs+0x2c>)
    27f4:	2000      	movs	r0, #0
    27f6:	4b05      	ldr	r3, [pc, #20]	; (280c <_adc_get_regs+0x30>)
    27f8:	4798      	blx	r3
	return 0;
    27fa:	2000      	movs	r0, #0
    27fc:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    27fe:	2000      	movs	r0, #0
    2800:	4770      	bx	lr
    2802:	2001      	movs	r0, #1
    2804:	4770      	bx	lr
    2806:	bf00      	nop
    2808:	0000accc 	.word	0x0000accc
    280c:	00002481 	.word	0x00002481

00002810 <_adc_async_init>:
{
    2810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2814:	460c      	mov	r4, r1
	ASSERT(device);
    2816:	4605      	mov	r5, r0
    2818:	22e6      	movs	r2, #230	; 0xe6
    281a:	493b      	ldr	r1, [pc, #236]	; (2908 <_adc_async_init+0xf8>)
    281c:	3000      	adds	r0, #0
    281e:	bf18      	it	ne
    2820:	2001      	movne	r0, #1
    2822:	4b3a      	ldr	r3, [pc, #232]	; (290c <_adc_async_init+0xfc>)
    2824:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2826:	4620      	mov	r0, r4
    2828:	4b39      	ldr	r3, [pc, #228]	; (2910 <_adc_async_init+0x100>)
    282a:	4798      	blx	r3
    282c:	4601      	mov	r1, r0
    282e:	4620      	mov	r0, r4
    2830:	4b38      	ldr	r3, [pc, #224]	; (2914 <_adc_async_init+0x104>)
    2832:	4798      	blx	r3
	if (init_status) {
    2834:	4606      	mov	r6, r0
    2836:	b110      	cbz	r0, 283e <_adc_async_init+0x2e>
}
    2838:	4630      	mov	r0, r6
    283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    283e:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    2840:	4b35      	ldr	r3, [pc, #212]	; (2918 <_adc_async_init+0x108>)
    2842:	429c      	cmp	r4, r3
    2844:	d05c      	beq.n	2900 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    2846:	4b35      	ldr	r3, [pc, #212]	; (291c <_adc_async_init+0x10c>)
    2848:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    284a:	bf04      	itt	eq
    284c:	4b34      	ldreq	r3, [pc, #208]	; (2920 <_adc_async_init+0x110>)
    284e:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    2850:	4628      	mov	r0, r5
    2852:	4f34      	ldr	r7, [pc, #208]	; (2924 <_adc_async_init+0x114>)
    2854:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2856:	0943      	lsrs	r3, r0, #5
    2858:	f000 001f 	and.w	r0, r0, #31
    285c:	2401      	movs	r4, #1
    285e:	fa04 f000 	lsl.w	r0, r4, r0
    2862:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2928 <_adc_async_init+0x118>
    2866:	3320      	adds	r3, #32
    2868:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    286c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2870:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    2874:	4628      	mov	r0, r5
    2876:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2878:	0943      	lsrs	r3, r0, #5
    287a:	f000 001f 	and.w	r0, r0, #31
    287e:	fa04 f000 	lsl.w	r0, r4, r0
    2882:	3360      	adds	r3, #96	; 0x60
    2884:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    2888:	4628      	mov	r0, r5
    288a:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    288c:	0943      	lsrs	r3, r0, #5
    288e:	f000 001f 	and.w	r0, r0, #31
    2892:	4084      	lsls	r4, r0
    2894:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    2898:	4628      	mov	r0, r5
    289a:	47b8      	blx	r7
    289c:	3001      	adds	r0, #1
    289e:	b280      	uxth	r0, r0
    28a0:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    28a2:	2b00      	cmp	r3, #0
    28a4:	dbc8      	blt.n	2838 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28a6:	095b      	lsrs	r3, r3, #5
    28a8:	f000 001f 	and.w	r0, r0, #31
    28ac:	2201      	movs	r2, #1
    28ae:	fa02 f000 	lsl.w	r0, r2, r0
    28b2:	3320      	adds	r3, #32
    28b4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    28b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28bc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    28c0:	4628      	mov	r0, r5
    28c2:	47b8      	blx	r7
    28c4:	3001      	adds	r0, #1
    28c6:	b280      	uxth	r0, r0
    28c8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    28ca:	2b00      	cmp	r3, #0
    28cc:	dbb4      	blt.n	2838 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ce:	095b      	lsrs	r3, r3, #5
    28d0:	f000 001f 	and.w	r0, r0, #31
    28d4:	2201      	movs	r2, #1
    28d6:	fa02 f000 	lsl.w	r0, r2, r0
    28da:	3360      	adds	r3, #96	; 0x60
    28dc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    28e0:	4628      	mov	r0, r5
    28e2:	47b8      	blx	r7
    28e4:	3001      	adds	r0, #1
    28e6:	b280      	uxth	r0, r0
    28e8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    28ea:	2b00      	cmp	r3, #0
    28ec:	dba4      	blt.n	2838 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ee:	095b      	lsrs	r3, r3, #5
    28f0:	f000 001f 	and.w	r0, r0, #31
    28f4:	2201      	movs	r2, #1
    28f6:	fa02 f000 	lsl.w	r0, r2, r0
    28fa:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    28fe:	e79b      	b.n	2838 <_adc_async_init+0x28>
		_adc0_dev = dev;
    2900:	4b07      	ldr	r3, [pc, #28]	; (2920 <_adc_async_init+0x110>)
    2902:	601d      	str	r5, [r3, #0]
    2904:	e7a4      	b.n	2850 <_adc_async_init+0x40>
    2906:	bf00      	nop
    2908:	0000accc 	.word	0x0000accc
    290c:	00002481 	.word	0x00002481
    2910:	000027dd 	.word	0x000027dd
    2914:	0000265d 	.word	0x0000265d
    2918:	43001c00 	.word	0x43001c00
    291c:	43002000 	.word	0x43002000
    2920:	200007bc 	.word	0x200007bc
    2924:	00002645 	.word	0x00002645
    2928:	e000e100 	.word	0xe000e100

0000292c <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    292c:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    292e:	8813      	ldrh	r3, [r2, #0]
    2930:	b29b      	uxth	r3, r3
    2932:	f043 0302 	orr.w	r3, r3, #2
    2936:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2938:	6b13      	ldr	r3, [r2, #48]	; 0x30
    293a:	f013 0f03 	tst.w	r3, #3
    293e:	d1fb      	bne.n	2938 <_adc_async_enable_channel+0xc>
}
    2940:	4770      	bx	lr

00002942 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    2942:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    2944:	88db      	ldrh	r3, [r3, #6]
    2946:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    294a:	2b03      	cmp	r3, #3
}
    294c:	bf0c      	ite	eq
    294e:	2001      	moveq	r0, #1
    2950:	2002      	movne	r0, #2
    2952:	4770      	bx	lr

00002954 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    2954:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    2956:	7d13      	ldrb	r3, [r2, #20]
    2958:	f043 0302 	orr.w	r3, r3, #2
    295c:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    295e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2960:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2964:	2b00      	cmp	r3, #0
    2966:	d1fa      	bne.n	295e <_adc_async_convert+0xa>
}
    2968:	4770      	bx	lr

0000296a <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    296a:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    296c:	2a01      	cmp	r2, #1
    296e:	d007      	beq.n	2980 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    2970:	2a02      	cmp	r2, #2
    2972:	d00e      	beq.n	2992 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    2974:	b91a      	cbnz	r2, 297e <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    2976:	b1ab      	cbz	r3, 29a4 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    2978:	2301      	movs	r3, #1
    297a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    297e:	4770      	bx	lr
	if (value == 0x0) {
    2980:	b91b      	cbnz	r3, 298a <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    2982:	2304      	movs	r3, #4
    2984:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    2988:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    298a:	2304      	movs	r3, #4
    298c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    2990:	4770      	bx	lr
	if (value == 0x0) {
    2992:	b91b      	cbnz	r3, 299c <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    2994:	2302      	movs	r3, #2
    2996:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    299a:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    299c:	2302      	movs	r3, #2
    299e:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    29a2:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    29a4:	2301      	movs	r3, #1
    29a6:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    29aa:	4770      	bx	lr

000029ac <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    29ac:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    29ae:	4b02      	ldr	r3, [pc, #8]	; (29b8 <ADC0_0_Handler+0xc>)
    29b0:	6818      	ldr	r0, [r3, #0]
    29b2:	4b02      	ldr	r3, [pc, #8]	; (29bc <ADC0_0_Handler+0x10>)
    29b4:	4798      	blx	r3
    29b6:	bd08      	pop	{r3, pc}
    29b8:	200007bc 	.word	0x200007bc
    29bc:	00002789 	.word	0x00002789

000029c0 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    29c0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    29c2:	4b02      	ldr	r3, [pc, #8]	; (29cc <ADC0_1_Handler+0xc>)
    29c4:	6818      	ldr	r0, [r3, #0]
    29c6:	4b02      	ldr	r3, [pc, #8]	; (29d0 <ADC0_1_Handler+0x10>)
    29c8:	4798      	blx	r3
    29ca:	bd08      	pop	{r3, pc}
    29cc:	200007bc 	.word	0x200007bc
    29d0:	00002789 	.word	0x00002789

000029d4 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    29d4:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    29d6:	4b02      	ldr	r3, [pc, #8]	; (29e0 <ADC1_0_Handler+0xc>)
    29d8:	6858      	ldr	r0, [r3, #4]
    29da:	4b02      	ldr	r3, [pc, #8]	; (29e4 <ADC1_0_Handler+0x10>)
    29dc:	4798      	blx	r3
    29de:	bd08      	pop	{r3, pc}
    29e0:	200007bc 	.word	0x200007bc
    29e4:	00002789 	.word	0x00002789

000029e8 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    29e8:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    29ea:	4b02      	ldr	r3, [pc, #8]	; (29f4 <ADC1_1_Handler+0xc>)
    29ec:	6858      	ldr	r0, [r3, #4]
    29ee:	4b02      	ldr	r3, [pc, #8]	; (29f8 <ADC1_1_Handler+0x10>)
    29f0:	4798      	blx	r3
    29f2:	bd08      	pop	{r3, pc}
    29f4:	200007bc 	.word	0x200007bc
    29f8:	00002789 	.word	0x00002789

000029fc <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29fc:	0943      	lsrs	r3, r0, #5
    29fe:	f000 001f 	and.w	r0, r0, #31
    2a02:	2201      	movs	r2, #1
    2a04:	fa02 f000 	lsl.w	r0, r2, r0
    2a08:	3340      	adds	r3, #64	; 0x40
    2a0a:	4a02      	ldr	r2, [pc, #8]	; (2a14 <_irq_set+0x18>)
    2a0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2a10:	4770      	bx	lr
    2a12:	bf00      	nop
    2a14:	e000e100 	.word	0xe000e100

00002a18 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    2a18:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2a1c:	00c0      	lsls	r0, r0, #3
    2a1e:	4770      	bx	lr

00002a20 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2a20:	4b01      	ldr	r3, [pc, #4]	; (2a28 <_get_cycles_for_ms+0x8>)
    2a22:	fb03 f000 	mul.w	r0, r3, r0
    2a26:	4770      	bx	lr
    2a28:	0001d4c0 	.word	0x0001d4c0

00002a2c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2a2c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2a2e:	4a0e      	ldr	r2, [pc, #56]	; (2a68 <_init_chip+0x3c>)
    2a30:	8813      	ldrh	r3, [r2, #0]
    2a32:	b29b      	uxth	r3, r3
    2a34:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    2a38:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2a3a:	4b0c      	ldr	r3, [pc, #48]	; (2a6c <_init_chip+0x40>)
    2a3c:	4798      	blx	r3
	_oscctrl_init_sources();
    2a3e:	4b0c      	ldr	r3, [pc, #48]	; (2a70 <_init_chip+0x44>)
    2a40:	4798      	blx	r3
	_mclk_init();
    2a42:	4b0c      	ldr	r3, [pc, #48]	; (2a74 <_init_chip+0x48>)
    2a44:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2a46:	2004      	movs	r0, #4
    2a48:	4c0b      	ldr	r4, [pc, #44]	; (2a78 <_init_chip+0x4c>)
    2a4a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2a4c:	4b0b      	ldr	r3, [pc, #44]	; (2a7c <_init_chip+0x50>)
    2a4e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2a50:	f640 70fb 	movw	r0, #4091	; 0xffb
    2a54:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2a56:	4a0a      	ldr	r2, [pc, #40]	; (2a80 <_init_chip+0x54>)
    2a58:	6913      	ldr	r3, [r2, #16]
    2a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2a5e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    2a60:	4b08      	ldr	r3, [pc, #32]	; (2a84 <_init_chip+0x58>)
    2a62:	4798      	blx	r3
    2a64:	bd10      	pop	{r4, pc}
    2a66:	bf00      	nop
    2a68:	41004000 	.word	0x41004000
    2a6c:	00002f09 	.word	0x00002f09
    2a70:	00002f1d 	.word	0x00002f1d
    2a74:	00002e31 	.word	0x00002e31
    2a78:	00002db9 	.word	0x00002db9
    2a7c:	00002f21 	.word	0x00002f21
    2a80:	40000800 	.word	0x40000800
    2a84:	00002afd 	.word	0x00002afd

00002a88 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2a88:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2a8a:	4a1a      	ldr	r2, [pc, #104]	; (2af4 <_dmac_handler+0x6c>)
    2a8c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    2a8e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2a92:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2a96:	4818      	ldr	r0, [pc, #96]	; (2af8 <_dmac_handler+0x70>)
    2a98:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2a9c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2aa0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2aa4:	f012 0f01 	tst.w	r2, #1
    2aa8:	d10a      	bne.n	2ac0 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2aaa:	011a      	lsls	r2, r3, #4
    2aac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2ab0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2ab4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2ab8:	f012 0f02 	tst.w	r2, #2
    2abc:	d10b      	bne.n	2ad6 <_dmac_handler+0x4e>
    2abe:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2ac0:	011a      	lsls	r2, r3, #4
    2ac2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2ac6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2aca:	2101      	movs	r1, #1
    2acc:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2ad0:	6843      	ldr	r3, [r0, #4]
    2ad2:	4798      	blx	r3
    2ad4:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2ad6:	011a      	lsls	r2, r3, #4
    2ad8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2adc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2ae0:	2102      	movs	r1, #2
    2ae2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2ae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2aea:	4a03      	ldr	r2, [pc, #12]	; (2af8 <_dmac_handler+0x70>)
    2aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2af0:	4798      	blx	r3
	}
}
    2af2:	e7e4      	b.n	2abe <_dmac_handler+0x36>
    2af4:	4100a000 	.word	0x4100a000
    2af8:	200007c4 	.word	0x200007c4

00002afc <_dma_init>:
{
    2afc:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2afe:	4a32      	ldr	r2, [pc, #200]	; (2bc8 <_dma_init+0xcc>)
    2b00:	8813      	ldrh	r3, [r2, #0]
    2b02:	f023 0302 	bic.w	r3, r3, #2
    2b06:	041b      	lsls	r3, r3, #16
    2b08:	0c1b      	lsrs	r3, r3, #16
    2b0a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2b0c:	8853      	ldrh	r3, [r2, #2]
    2b0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2b12:	041b      	lsls	r3, r3, #16
    2b14:	0c1b      	lsrs	r3, r3, #16
    2b16:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2b18:	8813      	ldrh	r3, [r2, #0]
    2b1a:	b29b      	uxth	r3, r3
    2b1c:	f043 0301 	orr.w	r3, r3, #1
    2b20:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2b22:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2b24:	f013 0f01 	tst.w	r3, #1
    2b28:	d1fb      	bne.n	2b22 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2b2a:	4b27      	ldr	r3, [pc, #156]	; (2bc8 <_dma_init+0xcc>)
    2b2c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2b30:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2b32:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    2b38:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2b3c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2b3e:	2100      	movs	r1, #0
    2b40:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2b42:	4a22      	ldr	r2, [pc, #136]	; (2bcc <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    2b44:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2b46:	4a22      	ldr	r2, [pc, #136]	; (2bd0 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    2b48:	639a      	str	r2, [r3, #56]	; 0x38
    2b4a:	4b22      	ldr	r3, [pc, #136]	; (2bd4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2b4c:	4c1f      	ldr	r4, [pc, #124]	; (2bcc <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    2b4e:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2b50:	681d      	ldr	r5, [r3, #0]
    2b52:	0108      	lsls	r0, r1, #4
    2b54:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    2b58:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2b5c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2b5e:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2b60:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2b64:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2b66:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2b6a:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2b6c:	1822      	adds	r2, r4, r0
    2b6e:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    2b70:	60d6      	str	r6, [r2, #12]
    2b72:	3101      	adds	r1, #1
    2b74:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2b76:	2920      	cmp	r1, #32
    2b78:	d1ea      	bne.n	2b50 <_dma_init+0x54>
    2b7a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b7c:	2001      	movs	r0, #1
    2b7e:	4916      	ldr	r1, [pc, #88]	; (2bd8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2b80:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2b82:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2b86:	d00b      	beq.n	2ba0 <_dma_init+0xa4>
    2b88:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2b8a:	2b24      	cmp	r3, #36	; 0x24
    2b8c:	d1f8      	bne.n	2b80 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2b8e:	4a0e      	ldr	r2, [pc, #56]	; (2bc8 <_dma_init+0xcc>)
    2b90:	8813      	ldrh	r3, [r2, #0]
    2b92:	b29b      	uxth	r3, r3
    2b94:	f043 0302 	orr.w	r3, r3, #2
    2b98:	8013      	strh	r3, [r2, #0]
}
    2b9a:	2000      	movs	r0, #0
    2b9c:	bc70      	pop	{r4, r5, r6}
    2b9e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ba0:	095c      	lsrs	r4, r3, #5
    2ba2:	f002 021f 	and.w	r2, r2, #31
    2ba6:	fa00 f202 	lsl.w	r2, r0, r2
    2baa:	f104 0520 	add.w	r5, r4, #32
    2bae:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2bb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bb6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bba:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2bbe:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bc2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2bc6:	e7df      	b.n	2b88 <_dma_init+0x8c>
    2bc8:	4100a000 	.word	0x4100a000
    2bcc:	20001670 	.word	0x20001670
    2bd0:	20001870 	.word	0x20001870
    2bd4:	0000ace4 	.word	0x0000ace4
    2bd8:	e000e100 	.word	0xe000e100

00002bdc <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    2bdc:	b991      	cbnz	r1, 2c04 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    2bde:	b942      	cbnz	r2, 2bf2 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    2be0:	0100      	lsls	r0, r0, #4
    2be2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2be6:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2bea:	2302      	movs	r3, #2
    2bec:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    2bf0:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    2bf2:	0100      	lsls	r0, r0, #4
    2bf4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2bf8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2bfc:	2302      	movs	r3, #2
    2bfe:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    2c02:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    2c04:	2901      	cmp	r1, #1
    2c06:	d000      	beq.n	2c0a <_dma_set_irq_state+0x2e>
    2c08:	4770      	bx	lr
	if (value == 0x0) {
    2c0a:	b142      	cbz	r2, 2c1e <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    2c0c:	0100      	lsls	r0, r0, #4
    2c0e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2c12:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2c16:	2301      	movs	r3, #1
    2c18:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    2c1c:	e7f4      	b.n	2c08 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    2c1e:	0100      	lsls	r0, r0, #4
    2c20:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2c24:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2c28:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    2c2c:	4770      	bx	lr
	...

00002c30 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2c30:	4b02      	ldr	r3, [pc, #8]	; (2c3c <_dma_set_destination_address+0xc>)
    2c32:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2c36:	6081      	str	r1, [r0, #8]
}
    2c38:	2000      	movs	r0, #0
    2c3a:	4770      	bx	lr
    2c3c:	20001670 	.word	0x20001670

00002c40 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2c40:	4b02      	ldr	r3, [pc, #8]	; (2c4c <_dma_set_source_address+0xc>)
    2c42:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2c46:	6041      	str	r1, [r0, #4]
}
    2c48:	2000      	movs	r0, #0
    2c4a:	4770      	bx	lr
    2c4c:	20001670 	.word	0x20001670

00002c50 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2c50:	4a05      	ldr	r2, [pc, #20]	; (2c68 <_dma_srcinc_enable+0x18>)
    2c52:	0100      	lsls	r0, r0, #4
    2c54:	5a13      	ldrh	r3, [r2, r0]
    2c56:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    2c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    2c5c:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    2c60:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    2c62:	5211      	strh	r1, [r2, r0]
}
    2c64:	2000      	movs	r0, #0
    2c66:	4770      	bx	lr
    2c68:	20001670 	.word	0x20001670

00002c6c <_dma_set_data_amount>:
{
    2c6c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    2c6e:	4c14      	ldr	r4, [pc, #80]	; (2cc0 <_dma_set_data_amount+0x54>)
    2c70:	0102      	lsls	r2, r0, #4
    2c72:	18a3      	adds	r3, r4, r2
    2c74:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2c76:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    2c78:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2c7c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2c7e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2c82:	d006      	beq.n	2c92 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2c84:	fa01 f403 	lsl.w	r4, r1, r3
    2c88:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2c8a:	4a0d      	ldr	r2, [pc, #52]	; (2cc0 <_dma_set_data_amount+0x54>)
    2c8c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2c90:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2c92:	4c0b      	ldr	r4, [pc, #44]	; (2cc0 <_dma_set_data_amount+0x54>)
    2c94:	0102      	lsls	r2, r0, #4
    2c96:	18a5      	adds	r5, r4, r2
    2c98:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2c9a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2c9c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2ca0:	d005      	beq.n	2cae <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2ca2:	fa01 f303 	lsl.w	r3, r1, r3
    2ca6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2ca8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    2cac:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2cae:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2cb0:	4b03      	ldr	r3, [pc, #12]	; (2cc0 <_dma_set_data_amount+0x54>)
    2cb2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2cb6:	8041      	strh	r1, [r0, #2]
}
    2cb8:	2000      	movs	r0, #0
    2cba:	bc30      	pop	{r4, r5}
    2cbc:	4770      	bx	lr
    2cbe:	bf00      	nop
    2cc0:	20001670 	.word	0x20001670

00002cc4 <_dma_enable_transaction>:
{
    2cc4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2cc6:	4c0d      	ldr	r4, [pc, #52]	; (2cfc <_dma_enable_transaction+0x38>)
    2cc8:	0103      	lsls	r3, r0, #4
    2cca:	5ae2      	ldrh	r2, [r4, r3]
    2ccc:	b292      	uxth	r2, r2
    2cce:	f042 0201 	orr.w	r2, r2, #1
    2cd2:	52e2      	strh	r2, [r4, r3]
    2cd4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2cd8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2cde:	f042 0202 	orr.w	r2, r2, #2
    2ce2:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2ce4:	b131      	cbz	r1, 2cf4 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2ce6:	4a06      	ldr	r2, [pc, #24]	; (2d00 <_dma_enable_transaction+0x3c>)
    2ce8:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2cea:	2301      	movs	r3, #1
    2cec:	fa03 f000 	lsl.w	r0, r3, r0
    2cf0:	4308      	orrs	r0, r1
    2cf2:	6110      	str	r0, [r2, #16]
}
    2cf4:	2000      	movs	r0, #0
    2cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
    2cfa:	4770      	bx	lr
    2cfc:	20001670 	.word	0x20001670
    2d00:	4100a000 	.word	0x4100a000

00002d04 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    2d04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2d08:	4b02      	ldr	r3, [pc, #8]	; (2d14 <_dma_get_channel_resource+0x10>)
    2d0a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2d0e:	6001      	str	r1, [r0, #0]
}
    2d10:	2000      	movs	r0, #0
    2d12:	4770      	bx	lr
    2d14:	200007c4 	.word	0x200007c4

00002d18 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2d18:	b508      	push	{r3, lr}
	_dmac_handler();
    2d1a:	4b01      	ldr	r3, [pc, #4]	; (2d20 <DMAC_0_Handler+0x8>)
    2d1c:	4798      	blx	r3
    2d1e:	bd08      	pop	{r3, pc}
    2d20:	00002a89 	.word	0x00002a89

00002d24 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2d24:	b508      	push	{r3, lr}
	_dmac_handler();
    2d26:	4b01      	ldr	r3, [pc, #4]	; (2d2c <DMAC_1_Handler+0x8>)
    2d28:	4798      	blx	r3
    2d2a:	bd08      	pop	{r3, pc}
    2d2c:	00002a89 	.word	0x00002a89

00002d30 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2d30:	b508      	push	{r3, lr}
	_dmac_handler();
    2d32:	4b01      	ldr	r3, [pc, #4]	; (2d38 <DMAC_2_Handler+0x8>)
    2d34:	4798      	blx	r3
    2d36:	bd08      	pop	{r3, pc}
    2d38:	00002a89 	.word	0x00002a89

00002d3c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2d3c:	b508      	push	{r3, lr}
	_dmac_handler();
    2d3e:	4b01      	ldr	r3, [pc, #4]	; (2d44 <DMAC_3_Handler+0x8>)
    2d40:	4798      	blx	r3
    2d42:	bd08      	pop	{r3, pc}
    2d44:	00002a89 	.word	0x00002a89

00002d48 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2d48:	b508      	push	{r3, lr}
	_dmac_handler();
    2d4a:	4b01      	ldr	r3, [pc, #4]	; (2d50 <DMAC_4_Handler+0x8>)
    2d4c:	4798      	blx	r3
    2d4e:	bd08      	pop	{r3, pc}
    2d50:	00002a89 	.word	0x00002a89

00002d54 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2d54:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2d56:	2000      	movs	r0, #0
    2d58:	4770      	bx	lr
	...

00002d5c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2d5c:	b430      	push	{r4, r5}
    2d5e:	4814      	ldr	r0, [pc, #80]	; (2db0 <_event_system_init+0x54>)
    2d60:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2d64:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2d66:	4c13      	ldr	r4, [pc, #76]	; (2db4 <_event_system_init+0x58>)
    2d68:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2d6a:	f813 1b01 	ldrb.w	r1, [r3], #1
    2d6e:	3248      	adds	r2, #72	; 0x48
    2d70:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2d74:	42ab      	cmp	r3, r5
    2d76:	d1f7      	bne.n	2d68 <_event_system_init+0xc>
    2d78:	480d      	ldr	r0, [pc, #52]	; (2db0 <_event_system_init+0x54>)
    2d7a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2d7e:	3080      	adds	r0, #128	; 0x80
    2d80:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2d82:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2d86:	00ca      	lsls	r2, r1, #3
    2d88:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2d8c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2d90:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2d92:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2d96:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2d98:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2d9c:	43db      	mvns	r3, r3
    2d9e:	b2db      	uxtb	r3, r3
    2da0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2da4:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2da6:	2920      	cmp	r1, #32
    2da8:	d1eb      	bne.n	2d82 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2daa:	2000      	movs	r0, #0
    2dac:	bc30      	pop	{r4, r5}
    2dae:	4770      	bx	lr
    2db0:	0000ade4 	.word	0x0000ade4
    2db4:	4100e000 	.word	0x4100e000

00002db8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2db8:	f010 0f01 	tst.w	r0, #1
    2dbc:	d008      	beq.n	2dd0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2dbe:	4a17      	ldr	r2, [pc, #92]	; (2e1c <_gclk_init_generators_by_fref+0x64>)
    2dc0:	4b17      	ldr	r3, [pc, #92]	; (2e20 <_gclk_init_generators_by_fref+0x68>)
    2dc2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2dc4:	4619      	mov	r1, r3
    2dc6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2dca:	684b      	ldr	r3, [r1, #4]
    2dcc:	4213      	tst	r3, r2
    2dce:	d1fc      	bne.n	2dca <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2dd0:	f010 0f02 	tst.w	r0, #2
    2dd4:	d008      	beq.n	2de8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2dd6:	4a13      	ldr	r2, [pc, #76]	; (2e24 <_gclk_init_generators_by_fref+0x6c>)
    2dd8:	4b11      	ldr	r3, [pc, #68]	; (2e20 <_gclk_init_generators_by_fref+0x68>)
    2dda:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2ddc:	4619      	mov	r1, r3
    2dde:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2de2:	684b      	ldr	r3, [r1, #4]
    2de4:	4213      	tst	r3, r2
    2de6:	d1fc      	bne.n	2de2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2de8:	f010 0f04 	tst.w	r0, #4
    2dec:	d008      	beq.n	2e00 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2dee:	4a0e      	ldr	r2, [pc, #56]	; (2e28 <_gclk_init_generators_by_fref+0x70>)
    2df0:	4b0b      	ldr	r3, [pc, #44]	; (2e20 <_gclk_init_generators_by_fref+0x68>)
    2df2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2df4:	4619      	mov	r1, r3
    2df6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2dfa:	684b      	ldr	r3, [r1, #4]
    2dfc:	4213      	tst	r3, r2
    2dfe:	d1fc      	bne.n	2dfa <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2e00:	f010 0f08 	tst.w	r0, #8
    2e04:	d008      	beq.n	2e18 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2e06:	4a09      	ldr	r2, [pc, #36]	; (2e2c <_gclk_init_generators_by_fref+0x74>)
    2e08:	4b05      	ldr	r3, [pc, #20]	; (2e20 <_gclk_init_generators_by_fref+0x68>)
    2e0a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2e0c:	4619      	mov	r1, r3
    2e0e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2e12:	684b      	ldr	r3, [r1, #4]
    2e14:	4213      	tst	r3, r2
    2e16:	d1fc      	bne.n	2e12 <_gclk_init_generators_by_fref+0x5a>
    2e18:	4770      	bx	lr
    2e1a:	bf00      	nop
    2e1c:	00010108 	.word	0x00010108
    2e20:	40001c00 	.word	0x40001c00
    2e24:	00010106 	.word	0x00010106
    2e28:	00100106 	.word	0x00100106
    2e2c:	00010104 	.word	0x00010104

00002e30 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2e30:	2201      	movs	r2, #1
    2e32:	4b01      	ldr	r3, [pc, #4]	; (2e38 <_mclk_init+0x8>)
    2e34:	715a      	strb	r2, [r3, #5]
    2e36:	4770      	bx	lr
    2e38:	40000800 	.word	0x40000800

00002e3c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2e3c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2e3e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2e40:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2e42:	f012 0f01 	tst.w	r2, #1
    2e46:	d005      	beq.n	2e54 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2e48:	2201      	movs	r2, #1
    2e4a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2e4c:	6803      	ldr	r3, [r0, #0]
    2e4e:	b153      	cbz	r3, 2e66 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2e50:	4798      	blx	r3
    2e52:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2e54:	8a1a      	ldrh	r2, [r3, #16]
    2e56:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2e58:	b12a      	cbz	r2, 2e66 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2e5a:	f240 225e 	movw	r2, #606	; 0x25e
    2e5e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2e60:	6843      	ldr	r3, [r0, #4]
    2e62:	b103      	cbz	r3, 2e66 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2e64:	4798      	blx	r3
    2e66:	bd08      	pop	{r3, pc}

00002e68 <_flash_init>:
{
    2e68:	b538      	push	{r3, r4, r5, lr}
    2e6a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2e6c:	4605      	mov	r5, r0
    2e6e:	b350      	cbz	r0, 2ec6 <_flash_init+0x5e>
    2e70:	4816      	ldr	r0, [pc, #88]	; (2ecc <_flash_init+0x64>)
    2e72:	4281      	cmp	r1, r0
    2e74:	bf14      	ite	ne
    2e76:	2000      	movne	r0, #0
    2e78:	2001      	moveq	r0, #1
    2e7a:	224b      	movs	r2, #75	; 0x4b
    2e7c:	4914      	ldr	r1, [pc, #80]	; (2ed0 <_flash_init+0x68>)
    2e7e:	4b15      	ldr	r3, [pc, #84]	; (2ed4 <_flash_init+0x6c>)
    2e80:	4798      	blx	r3
	device->hw = hw;
    2e82:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2e84:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2e86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2e8a:	049b      	lsls	r3, r3, #18
    2e8c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2e8e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2e90:	4b11      	ldr	r3, [pc, #68]	; (2ed8 <_flash_init+0x70>)
    2e92:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e94:	4b11      	ldr	r3, [pc, #68]	; (2edc <_flash_init+0x74>)
    2e96:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2e9a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2e9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ea2:	f3bf 8f6f 	isb	sy
    2ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2eae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2eb2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2eb6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2eba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ebe:	6019      	str	r1, [r3, #0]
    2ec0:	601a      	str	r2, [r3, #0]
}
    2ec2:	2000      	movs	r0, #0
    2ec4:	bd38      	pop	{r3, r4, r5, pc}
    2ec6:	2000      	movs	r0, #0
    2ec8:	e7d7      	b.n	2e7a <_flash_init+0x12>
    2eca:	bf00      	nop
    2ecc:	41004000 	.word	0x41004000
    2ed0:	0000aee8 	.word	0x0000aee8
    2ed4:	00002481 	.word	0x00002481
    2ed8:	20000944 	.word	0x20000944
    2edc:	e000e100 	.word	0xe000e100

00002ee0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2ee0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2ee2:	4b02      	ldr	r3, [pc, #8]	; (2eec <NVMCTRL_0_Handler+0xc>)
    2ee4:	6818      	ldr	r0, [r3, #0]
    2ee6:	4b02      	ldr	r3, [pc, #8]	; (2ef0 <NVMCTRL_0_Handler+0x10>)
    2ee8:	4798      	blx	r3
    2eea:	bd08      	pop	{r3, pc}
    2eec:	20000944 	.word	0x20000944
    2ef0:	00002e3d 	.word	0x00002e3d

00002ef4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    2ef4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2ef6:	4b02      	ldr	r3, [pc, #8]	; (2f00 <NVMCTRL_1_Handler+0xc>)
    2ef8:	6818      	ldr	r0, [r3, #0]
    2efa:	4b02      	ldr	r3, [pc, #8]	; (2f04 <NVMCTRL_1_Handler+0x10>)
    2efc:	4798      	blx	r3
    2efe:	bd08      	pop	{r3, pc}
    2f00:	20000944 	.word	0x20000944
    2f04:	00002e3d 	.word	0x00002e3d

00002f08 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2f08:	4b03      	ldr	r3, [pc, #12]	; (2f18 <_osc32kctrl_init_sources+0x10>)
    2f0a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2f0c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2f10:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2f12:	2201      	movs	r2, #1
    2f14:	741a      	strb	r2, [r3, #16]
    2f16:	4770      	bx	lr
    2f18:	40001400 	.word	0x40001400

00002f1c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2f1c:	4770      	bx	lr
	...

00002f20 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2f20:	4a47      	ldr	r2, [pc, #284]	; (3040 <_oscctrl_init_referenced_generators+0x120>)
    2f22:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2f24:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2f28:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2f2c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f2e:	4611      	mov	r1, r2
    2f30:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2f34:	684b      	ldr	r3, [r1, #4]
    2f36:	4213      	tst	r3, r2
    2f38:	d1fc      	bne.n	2f34 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2f3a:	4a41      	ldr	r2, [pc, #260]	; (3040 <_oscctrl_init_referenced_generators+0x120>)
    2f3c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2f3e:	f013 0f04 	tst.w	r3, #4
    2f42:	d1fb      	bne.n	2f3c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2f44:	4b3f      	ldr	r3, [pc, #252]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2f46:	2200      	movs	r2, #0
    2f48:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2f4a:	4a3f      	ldr	r2, [pc, #252]	; (3048 <_oscctrl_init_referenced_generators+0x128>)
    2f4c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2f4e:	461a      	mov	r2, r3
    2f50:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2f54:	f013 0f10 	tst.w	r3, #16
    2f58:	d1fa      	bne.n	2f50 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2f5a:	2200      	movs	r2, #0
    2f5c:	4b39      	ldr	r3, [pc, #228]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2f5e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2f62:	461a      	mov	r2, r3
    2f64:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2f68:	f013 0f04 	tst.w	r3, #4
    2f6c:	d1fa      	bne.n	2f64 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2f6e:	2202      	movs	r2, #2
    2f70:	4b34      	ldr	r3, [pc, #208]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2f72:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2f74:	461a      	mov	r2, r3
    2f76:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2f7a:	f013 0f02 	tst.w	r3, #2
    2f7e:	d1fa      	bne.n	2f76 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2f80:	4b30      	ldr	r3, [pc, #192]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2f84:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2f86:	461a      	mov	r2, r3
    2f88:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2f8c:	f013 0f08 	tst.w	r3, #8
    2f90:	d1fa      	bne.n	2f88 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2f92:	2288      	movs	r2, #136	; 0x88
    2f94:	4b2b      	ldr	r3, [pc, #172]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2f96:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2f9a:	461a      	mov	r2, r3
    2f9c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2fa0:	f013 0f04 	tst.w	r3, #4
    2fa4:	d1fa      	bne.n	2f9c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2fa6:	2242      	movs	r2, #66	; 0x42
    2fa8:	4b25      	ldr	r3, [pc, #148]	; (3040 <_oscctrl_init_referenced_generators+0x120>)
    2faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2fae:	2227      	movs	r2, #39	; 0x27
    2fb0:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    2fb4:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2fb6:	461a      	mov	r2, r3
    2fb8:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2fba:	f013 0f06 	tst.w	r3, #6
    2fbe:	d1fb      	bne.n	2fb8 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2fc0:	4b20      	ldr	r3, [pc, #128]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2fc6:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    2fc8:	2202      	movs	r2, #2
    2fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2fce:	461a      	mov	r2, r3
    2fd0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2fd2:	f013 0f02 	tst.w	r3, #2
    2fd6:	d1fb      	bne.n	2fd0 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2fd8:	4b1a      	ldr	r3, [pc, #104]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2fda:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2fde:	f013 0f01 	tst.w	r3, #1
    2fe2:	d026      	beq.n	3032 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2fe4:	4a17      	ldr	r2, [pc, #92]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2fe6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2fe8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2fec:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2ff0:	d1f9      	bne.n	2fe6 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2ff2:	4b14      	ldr	r3, [pc, #80]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    2ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    2ff6:	f012 0f01 	tst.w	r2, #1
    2ffa:	d103      	bne.n	3004 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    2ffe:	f012 0f02 	tst.w	r2, #2
    3002:	d0f7      	beq.n	2ff4 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3004:	4a0e      	ldr	r2, [pc, #56]	; (3040 <_oscctrl_init_referenced_generators+0x120>)
    3006:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3008:	2b00      	cmp	r3, #0
    300a:	d1fc      	bne.n	3006 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    300c:	4a0c      	ldr	r2, [pc, #48]	; (3040 <_oscctrl_init_referenced_generators+0x120>)
    300e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3010:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3014:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3018:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    301a:	4611      	mov	r1, r2
    301c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3020:	684b      	ldr	r3, [r1, #4]
    3022:	4213      	tst	r3, r2
    3024:	d1fc      	bne.n	3020 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    3026:	4a06      	ldr	r2, [pc, #24]	; (3040 <_oscctrl_init_referenced_generators+0x120>)
    3028:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    302a:	f013 0f04 	tst.w	r3, #4
    302e:	d1fb      	bne.n	3028 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    3030:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    3032:	4a04      	ldr	r2, [pc, #16]	; (3044 <_oscctrl_init_referenced_generators+0x124>)
    3034:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    3036:	f413 7f80 	tst.w	r3, #256	; 0x100
    303a:	d0fb      	beq.n	3034 <_oscctrl_init_referenced_generators+0x114>
    303c:	e7d9      	b.n	2ff2 <_oscctrl_init_referenced_generators+0xd2>
    303e:	bf00      	nop
    3040:	40001c00 	.word	0x40001c00
    3044:	40001000 	.word	0x40001000
    3048:	04010000 	.word	0x04010000

0000304c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    304c:	b500      	push	{lr}
    304e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    3050:	4b0d      	ldr	r3, [pc, #52]	; (3088 <RAMECC_Handler+0x3c>)
    3052:	789b      	ldrb	r3, [r3, #2]
    3054:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    3056:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    3058:	9b01      	ldr	r3, [sp, #4]
    305a:	f013 0f02 	tst.w	r3, #2
    305e:	d006      	beq.n	306e <RAMECC_Handler+0x22>
    3060:	4b0a      	ldr	r3, [pc, #40]	; (308c <RAMECC_Handler+0x40>)
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	b11b      	cbz	r3, 306e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    3066:	4a08      	ldr	r2, [pc, #32]	; (3088 <RAMECC_Handler+0x3c>)
    3068:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    306a:	4798      	blx	r3
    306c:	e009      	b.n	3082 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    306e:	9b01      	ldr	r3, [sp, #4]
    3070:	f013 0f01 	tst.w	r3, #1
    3074:	d005      	beq.n	3082 <RAMECC_Handler+0x36>
    3076:	4b05      	ldr	r3, [pc, #20]	; (308c <RAMECC_Handler+0x40>)
    3078:	685b      	ldr	r3, [r3, #4]
    307a:	b113      	cbz	r3, 3082 <RAMECC_Handler+0x36>
    307c:	4a02      	ldr	r2, [pc, #8]	; (3088 <RAMECC_Handler+0x3c>)
    307e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3080:	4798      	blx	r3
	} else {
		return;
	}
}
    3082:	b003      	add	sp, #12
    3084:	f85d fb04 	ldr.w	pc, [sp], #4
    3088:	41020000 	.word	0x41020000
    308c:	20001a70 	.word	0x20001a70

00003090 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    3090:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    3092:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3094:	6913      	ldr	r3, [r2, #16]
    3096:	f013 0f60 	tst.w	r3, #96	; 0x60
    309a:	d1fb      	bne.n	3094 <_rtc_timer_set_period+0x4>
}
    309c:	4770      	bx	lr

0000309e <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    309e:	68c2      	ldr	r2, [r0, #12]
    30a0:	6913      	ldr	r3, [r2, #16]
    30a2:	f013 0f60 	tst.w	r3, #96	; 0x60
    30a6:	d1fb      	bne.n	30a0 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    30a8:	6a10      	ldr	r0, [r2, #32]
}
    30aa:	4770      	bx	lr

000030ac <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    30ac:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    30ae:	f248 0103 	movw	r1, #32771	; 0x8003
    30b2:	6913      	ldr	r3, [r2, #16]
    30b4:	420b      	tst	r3, r1
    30b6:	d1fc      	bne.n	30b2 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    30b8:	8810      	ldrh	r0, [r2, #0]
}
    30ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
    30be:	4770      	bx	lr

000030c0 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    30c0:	4770      	bx	lr
	...

000030c4 <_rtc_timer_init>:
{
    30c4:	b538      	push	{r3, r4, r5, lr}
    30c6:	460c      	mov	r4, r1
	ASSERT(dev);
    30c8:	4605      	mov	r5, r0
    30ca:	2230      	movs	r2, #48	; 0x30
    30cc:	4914      	ldr	r1, [pc, #80]	; (3120 <_rtc_timer_init+0x5c>)
    30ce:	3000      	adds	r0, #0
    30d0:	bf18      	it	ne
    30d2:	2001      	movne	r0, #1
    30d4:	4b13      	ldr	r3, [pc, #76]	; (3124 <_rtc_timer_init+0x60>)
    30d6:	4798      	blx	r3
	dev->hw = hw;
    30d8:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    30da:	2301      	movs	r3, #1
    30dc:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    30de:	f248 0203 	movw	r2, #32771	; 0x8003
    30e2:	6923      	ldr	r3, [r4, #16]
    30e4:	4213      	tst	r3, r2
    30e6:	d1fc      	bne.n	30e2 <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    30e8:	68eb      	ldr	r3, [r5, #12]
    30ea:	691a      	ldr	r2, [r3, #16]
    30ec:	f012 0f01 	tst.w	r2, #1
    30f0:	d1fb      	bne.n	30ea <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    30f2:	f248 0280 	movw	r2, #32896	; 0x8080
    30f6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    30f8:	f248 0103 	movw	r1, #32771	; 0x8003
    30fc:	691a      	ldr	r2, [r3, #16]
    30fe:	420a      	tst	r2, r1
    3100:	d1fc      	bne.n	30fc <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    3102:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    3104:	2301      	movs	r3, #1
    3106:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3108:	6913      	ldr	r3, [r2, #16]
    310a:	f013 0f60 	tst.w	r3, #96	; 0x60
    310e:	d1fb      	bne.n	3108 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    3110:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    3112:	f44f 7280 	mov.w	r2, #256	; 0x100
    3116:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    3118:	4b03      	ldr	r3, [pc, #12]	; (3128 <_rtc_timer_init+0x64>)
    311a:	601d      	str	r5, [r3, #0]
}
    311c:	2000      	movs	r0, #0
    311e:	bd38      	pop	{r3, r4, r5, pc}
    3120:	0000af08 	.word	0x0000af08
    3124:	00002481 	.word	0x00002481
    3128:	20000948 	.word	0x20000948

0000312c <_rtc_timer_deinit>:
{
    312c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    312e:	4604      	mov	r4, r0
    3130:	b1c8      	cbz	r0, 3166 <_rtc_timer_deinit+0x3a>
    3132:	68c0      	ldr	r0, [r0, #12]
    3134:	3000      	adds	r0, #0
    3136:	bf18      	it	ne
    3138:	2001      	movne	r0, #1
    313a:	2252      	movs	r2, #82	; 0x52
    313c:	490b      	ldr	r1, [pc, #44]	; (316c <_rtc_timer_deinit+0x40>)
    313e:	4b0c      	ldr	r3, [pc, #48]	; (3170 <_rtc_timer_deinit+0x44>)
    3140:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3142:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3146:	4b0b      	ldr	r3, [pc, #44]	; (3174 <_rtc_timer_deinit+0x48>)
    3148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    314c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3150:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    3154:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    3156:	2301      	movs	r3, #1
    3158:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    315a:	f248 0103 	movw	r1, #32771	; 0x8003
    315e:	6913      	ldr	r3, [r2, #16]
    3160:	420b      	tst	r3, r1
    3162:	d1fc      	bne.n	315e <_rtc_timer_deinit+0x32>
}
    3164:	bd10      	pop	{r4, pc}
    3166:	2000      	movs	r0, #0
    3168:	e7e7      	b.n	313a <_rtc_timer_deinit+0xe>
    316a:	bf00      	nop
    316c:	0000af08 	.word	0x0000af08
    3170:	00002481 	.word	0x00002481
    3174:	e000e100 	.word	0xe000e100

00003178 <_rtc_timer_start>:
{
    3178:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    317a:	4604      	mov	r4, r0
    317c:	b310      	cbz	r0, 31c4 <_rtc_timer_start+0x4c>
    317e:	68c0      	ldr	r0, [r0, #12]
    3180:	3000      	adds	r0, #0
    3182:	bf18      	it	ne
    3184:	2001      	movne	r0, #1
    3186:	225e      	movs	r2, #94	; 0x5e
    3188:	490f      	ldr	r1, [pc, #60]	; (31c8 <_rtc_timer_start+0x50>)
    318a:	4b10      	ldr	r3, [pc, #64]	; (31cc <_rtc_timer_start+0x54>)
    318c:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    318e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3192:	4b0f      	ldr	r3, [pc, #60]	; (31d0 <_rtc_timer_start+0x58>)
    3194:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    3196:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    3198:	2300      	movs	r3, #0
    319a:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    319c:	6913      	ldr	r3, [r2, #16]
    319e:	f013 0f08 	tst.w	r3, #8
    31a2:	d1fb      	bne.n	319c <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    31a4:	68e3      	ldr	r3, [r4, #12]
    31a6:	691a      	ldr	r2, [r3, #16]
    31a8:	f012 0f08 	tst.w	r2, #8
    31ac:	d1fb      	bne.n	31a6 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    31ae:	881a      	ldrh	r2, [r3, #0]
    31b0:	b292      	uxth	r2, r2
    31b2:	f042 0202 	orr.w	r2, r2, #2
    31b6:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    31b8:	f248 0103 	movw	r1, #32771	; 0x8003
    31bc:	691a      	ldr	r2, [r3, #16]
    31be:	420a      	tst	r2, r1
    31c0:	d1fc      	bne.n	31bc <_rtc_timer_start+0x44>
}
    31c2:	bd10      	pop	{r4, pc}
    31c4:	2000      	movs	r0, #0
    31c6:	e7de      	b.n	3186 <_rtc_timer_start+0xe>
    31c8:	0000af08 	.word	0x0000af08
    31cc:	00002481 	.word	0x00002481
    31d0:	e000e100 	.word	0xe000e100

000031d4 <_rtc_timer_stop>:
{
    31d4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    31d6:	4604      	mov	r4, r0
    31d8:	b1a0      	cbz	r0, 3204 <_rtc_timer_stop+0x30>
    31da:	68c0      	ldr	r0, [r0, #12]
    31dc:	3000      	adds	r0, #0
    31de:	bf18      	it	ne
    31e0:	2001      	movne	r0, #1
    31e2:	226b      	movs	r2, #107	; 0x6b
    31e4:	4908      	ldr	r1, [pc, #32]	; (3208 <_rtc_timer_stop+0x34>)
    31e6:	4b09      	ldr	r3, [pc, #36]	; (320c <_rtc_timer_stop+0x38>)
    31e8:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    31ea:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    31ec:	8813      	ldrh	r3, [r2, #0]
    31ee:	f023 0302 	bic.w	r3, r3, #2
    31f2:	041b      	lsls	r3, r3, #16
    31f4:	0c1b      	lsrs	r3, r3, #16
    31f6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    31f8:	f248 0103 	movw	r1, #32771	; 0x8003
    31fc:	6913      	ldr	r3, [r2, #16]
    31fe:	420b      	tst	r3, r1
    3200:	d1fc      	bne.n	31fc <_rtc_timer_stop+0x28>
}
    3202:	bd10      	pop	{r4, pc}
    3204:	2000      	movs	r0, #0
    3206:	e7ec      	b.n	31e2 <_rtc_timer_stop+0xe>
    3208:	0000af08 	.word	0x0000af08
    320c:	00002481 	.word	0x00002481

00003210 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    3210:	4800      	ldr	r0, [pc, #0]	; (3214 <_rtc_get_timer+0x4>)
    3212:	4770      	bx	lr
    3214:	20000000 	.word	0x20000000

00003218 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    3218:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    321a:	4b08      	ldr	r3, [pc, #32]	; (323c <RTC_Handler+0x24>)
    321c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    321e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    3220:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    3222:	f413 7f80 	tst.w	r3, #256	; 0x100
    3226:	d007      	beq.n	3238 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    3228:	6823      	ldr	r3, [r4, #0]
    322a:	b10b      	cbz	r3, 3230 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    322c:	4620      	mov	r0, r4
    322e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    3230:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    3232:	f44f 7280 	mov.w	r2, #256	; 0x100
    3236:	819a      	strh	r2, [r3, #12]
    3238:	bd10      	pop	{r4, pc}
    323a:	bf00      	nop
    323c:	20000948 	.word	0x20000948

00003240 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3240:	b470      	push	{r4, r5, r6}
    3242:	b089      	sub	sp, #36	; 0x24
    3244:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    3246:	466c      	mov	r4, sp
    3248:	4d0d      	ldr	r5, [pc, #52]	; (3280 <_sercom_get_hardware_index+0x40>)
    324a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    324c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    324e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3256:	9b00      	ldr	r3, [sp, #0]
    3258:	42b3      	cmp	r3, r6
    325a:	d00d      	beq.n	3278 <_sercom_get_hardware_index+0x38>
    325c:	4631      	mov	r1, r6
    325e:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3260:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3262:	f853 2b04 	ldr.w	r2, [r3], #4
    3266:	428a      	cmp	r2, r1
    3268:	d007      	beq.n	327a <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    326a:	3001      	adds	r0, #1
    326c:	2808      	cmp	r0, #8
    326e:	d1f8      	bne.n	3262 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    3270:	2000      	movs	r0, #0
}
    3272:	b009      	add	sp, #36	; 0x24
    3274:	bc70      	pop	{r4, r5, r6}
    3276:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3278:	2000      	movs	r0, #0
			return i;
    327a:	b2c0      	uxtb	r0, r0
    327c:	e7f9      	b.n	3272 <_sercom_get_hardware_index+0x32>
    327e:	bf00      	nop
    3280:	0000af20 	.word	0x0000af20

00003284 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    3284:	b510      	push	{r4, lr}
	void *hw = device->hw;
    3286:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3288:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    328a:	f013 0f01 	tst.w	r3, #1
    328e:	d003      	beq.n	3298 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    3290:	7da3      	ldrb	r3, [r4, #22]
    3292:	f013 0f01 	tst.w	r3, #1
    3296:	d112      	bne.n	32be <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3298:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    329a:	f013 0f02 	tst.w	r3, #2
    329e:	d003      	beq.n	32a8 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    32a0:	7da3      	ldrb	r3, [r4, #22]
    32a2:	f013 0f02 	tst.w	r3, #2
    32a6:	d10f      	bne.n	32c8 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    32a8:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    32aa:	f013 0f04 	tst.w	r3, #4
    32ae:	d015      	beq.n	32dc <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    32b0:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    32b2:	f003 0337 	and.w	r3, r3, #55	; 0x37
    32b6:	b163      	cbz	r3, 32d2 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    32b8:	23ff      	movs	r3, #255	; 0xff
    32ba:	8363      	strh	r3, [r4, #26]
    32bc:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    32be:	2301      	movs	r3, #1
    32c0:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    32c2:	6803      	ldr	r3, [r0, #0]
    32c4:	4798      	blx	r3
    32c6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    32c8:	2302      	movs	r3, #2
    32ca:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    32cc:	6883      	ldr	r3, [r0, #8]
    32ce:	4798      	blx	r3
    32d0:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    32d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    32d4:	6843      	ldr	r3, [r0, #4]
    32d6:	b2c9      	uxtb	r1, r1
    32d8:	4798      	blx	r3
    32da:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    32dc:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    32de:	09db      	lsrs	r3, r3, #7
    32e0:	d100      	bne.n	32e4 <_sercom_usart_interrupt_handler+0x60>
    32e2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    32e4:	2380      	movs	r3, #128	; 0x80
    32e6:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    32e8:	68c3      	ldr	r3, [r0, #12]
    32ea:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    32ec:	8b63      	ldrh	r3, [r4, #26]
    32ee:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    32f0:	8363      	strh	r3, [r4, #26]
    32f2:	e7f6      	b.n	32e2 <_sercom_usart_interrupt_handler+0x5e>

000032f4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    32f4:	4b14      	ldr	r3, [pc, #80]	; (3348 <_sercom_init_irq_param+0x54>)
    32f6:	4298      	cmp	r0, r3
    32f8:	d014      	beq.n	3324 <_sercom_init_irq_param+0x30>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    32fa:	4b14      	ldr	r3, [pc, #80]	; (334c <_sercom_init_irq_param+0x58>)
    32fc:	4298      	cmp	r0, r3
    32fe:	d014      	beq.n	332a <_sercom_init_irq_param+0x36>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM2) {
    3300:	4b13      	ldr	r3, [pc, #76]	; (3350 <_sercom_init_irq_param+0x5c>)
    3302:	4298      	cmp	r0, r3
    3304:	d014      	beq.n	3330 <_sercom_init_irq_param+0x3c>
		_sercom2_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    3306:	4b13      	ldr	r3, [pc, #76]	; (3354 <_sercom_init_irq_param+0x60>)
    3308:	4298      	cmp	r0, r3
    330a:	d014      	beq.n	3336 <_sercom_init_irq_param+0x42>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    330c:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    3310:	d014      	beq.n	333c <_sercom_init_irq_param+0x48>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    3312:	4b11      	ldr	r3, [pc, #68]	; (3358 <_sercom_init_irq_param+0x64>)
    3314:	4298      	cmp	r0, r3
    3316:	d014      	beq.n	3342 <_sercom_init_irq_param+0x4e>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    3318:	4b10      	ldr	r3, [pc, #64]	; (335c <_sercom_init_irq_param+0x68>)
    331a:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    331c:	bf04      	itt	eq
    331e:	4b10      	ldreq	r3, [pc, #64]	; (3360 <_sercom_init_irq_param+0x6c>)
    3320:	6199      	streq	r1, [r3, #24]
    3322:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    3324:	4b0e      	ldr	r3, [pc, #56]	; (3360 <_sercom_init_irq_param+0x6c>)
    3326:	6019      	str	r1, [r3, #0]
    3328:	e7ed      	b.n	3306 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    332a:	4b0d      	ldr	r3, [pc, #52]	; (3360 <_sercom_init_irq_param+0x6c>)
    332c:	6059      	str	r1, [r3, #4]
    332e:	e7ed      	b.n	330c <_sercom_init_irq_param+0x18>
		_sercom2_dev = (struct _usart_async_device *)dev;
    3330:	4b0b      	ldr	r3, [pc, #44]	; (3360 <_sercom_init_irq_param+0x6c>)
    3332:	6099      	str	r1, [r3, #8]
    3334:	e7ed      	b.n	3312 <_sercom_init_irq_param+0x1e>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    3336:	4b0a      	ldr	r3, [pc, #40]	; (3360 <_sercom_init_irq_param+0x6c>)
    3338:	60d9      	str	r1, [r3, #12]
    333a:	e7ed      	b.n	3318 <_sercom_init_irq_param+0x24>
		_sercom4_dev = (struct _usart_async_device *)dev;
    333c:	4b08      	ldr	r3, [pc, #32]	; (3360 <_sercom_init_irq_param+0x6c>)
    333e:	6119      	str	r1, [r3, #16]
    3340:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    3342:	4b07      	ldr	r3, [pc, #28]	; (3360 <_sercom_init_irq_param+0x6c>)
    3344:	6159      	str	r1, [r3, #20]
    3346:	4770      	bx	lr
    3348:	40003000 	.word	0x40003000
    334c:	40003400 	.word	0x40003400
    3350:	41012000 	.word	0x41012000
    3354:	41014000 	.word	0x41014000
    3358:	43000400 	.word	0x43000400
    335c:	43000800 	.word	0x43000800
    3360:	2000094c 	.word	0x2000094c

00003364 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3364:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    3366:	4b03      	ldr	r3, [pc, #12]	; (3374 <_sercom_get_irq_num+0x10>)
    3368:	4798      	blx	r3
    336a:	0080      	lsls	r0, r0, #2
    336c:	302e      	adds	r0, #46	; 0x2e
}
    336e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3372:	bd08      	pop	{r3, pc}
    3374:	00003241 	.word	0x00003241

00003378 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3378:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    337a:	f013 0f01 	tst.w	r3, #1
    337e:	d109      	bne.n	3394 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3380:	6803      	ldr	r3, [r0, #0]
    3382:	f043 0302 	orr.w	r3, r3, #2
    3386:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3388:	69c3      	ldr	r3, [r0, #28]
    338a:	f013 0f03 	tst.w	r3, #3
    338e:	d1fb      	bne.n	3388 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    3390:	2000      	movs	r0, #0
    3392:	4770      	bx	lr
		return ERR_BUSY;
    3394:	f06f 0003 	mvn.w	r0, #3
}
    3398:	4770      	bx	lr
	...

0000339c <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    339c:	b538      	push	{r3, r4, r5, lr}
    339e:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    33a0:	4b0b      	ldr	r3, [pc, #44]	; (33d0 <_spi_async_enable+0x34>)
    33a2:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    33a4:	4620      	mov	r0, r4
    33a6:	4b0b      	ldr	r3, [pc, #44]	; (33d4 <_spi_async_enable+0x38>)
    33a8:	4798      	blx	r3
    33aa:	1d01      	adds	r1, r0, #4
    33ac:	b2c9      	uxtb	r1, r1
    33ae:	2501      	movs	r5, #1
    33b0:	4c09      	ldr	r4, [pc, #36]	; (33d8 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    33b2:	1c43      	adds	r3, r0, #1
    33b4:	b2db      	uxtb	r3, r3
    33b6:	0942      	lsrs	r2, r0, #5
    33b8:	f000 001f 	and.w	r0, r0, #31
    33bc:	fa05 f000 	lsl.w	r0, r5, r0
    33c0:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    33c4:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    33c6:	4299      	cmp	r1, r3
    33c8:	d1f3      	bne.n	33b2 <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    33ca:	2000      	movs	r0, #0
    33cc:	bd38      	pop	{r3, r4, r5, pc}
    33ce:	bf00      	nop
    33d0:	00003379 	.word	0x00003379
    33d4:	00003365 	.word	0x00003365
    33d8:	e000e100 	.word	0xe000e100

000033dc <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    33dc:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    33de:	f013 0f03 	tst.w	r3, #3
    33e2:	d111      	bne.n	3408 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    33e4:	69c3      	ldr	r3, [r0, #28]
    33e6:	f013 0f03 	tst.w	r3, #3
    33ea:	d1fb      	bne.n	33e4 <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    33ec:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    33ee:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    33f2:	0709      	lsls	r1, r1, #28
    33f4:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    33f8:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    33fa:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    33fc:	69c3      	ldr	r3, [r0, #28]
    33fe:	f013 0f03 	tst.w	r3, #3
    3402:	d1fb      	bne.n	33fc <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    3404:	2000      	movs	r0, #0
    3406:	4770      	bx	lr
		return ERR_BUSY;
    3408:	f06f 0003 	mvn.w	r0, #3
}
    340c:	4770      	bx	lr

0000340e <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    340e:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    3410:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3412:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    3414:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    3416:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    3418:	f013 0f01 	tst.w	r3, #1
    341c:	d109      	bne.n	3432 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    341e:	f013 0f04 	tst.w	r3, #4
    3422:	d109      	bne.n	3438 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    3424:	f013 0f02 	tst.w	r3, #2
    3428:	d109      	bne.n	343e <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    342a:	f013 0f80 	tst.w	r3, #128	; 0x80
    342e:	d10b      	bne.n	3448 <_spi_handler+0x3a>
    3430:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    3432:	6883      	ldr	r3, [r0, #8]
    3434:	4798      	blx	r3
    3436:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    3438:	68c3      	ldr	r3, [r0, #12]
    343a:	4798      	blx	r3
    343c:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    343e:	2302      	movs	r3, #2
    3440:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    3442:	6903      	ldr	r3, [r0, #16]
    3444:	4798      	blx	r3
    3446:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3448:	2304      	movs	r3, #4
    344a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    344c:	2380      	movs	r3, #128	; 0x80
    344e:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    3450:	6943      	ldr	r3, [r0, #20]
    3452:	f06f 0112 	mvn.w	r1, #18
    3456:	4798      	blx	r3
	}
}
    3458:	e7ea      	b.n	3430 <_spi_handler+0x22>
	...

0000345c <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    345c:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    345e:	4b03      	ldr	r3, [pc, #12]	; (346c <_spi_get_tx_dma_channel+0x10>)
    3460:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    3462:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    3464:	bf0c      	ite	eq
    3466:	2008      	moveq	r0, #8
    3468:	2000      	movne	r0, #0
    346a:	bd08      	pop	{r3, pc}
    346c:	00003241 	.word	0x00003241

00003470 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    3470:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    3472:	4b03      	ldr	r3, [pc, #12]	; (3480 <_spi_get_rx_dma_channel+0x10>)
    3474:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    3476:	2807      	cmp	r0, #7
    3478:	bf8c      	ite	hi
    347a:	2000      	movhi	r0, #0
    347c:	2001      	movls	r0, #1
    347e:	bd08      	pop	{r3, pc}
    3480:	00003241 	.word	0x00003241

00003484 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    3484:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    3486:	6883      	ldr	r3, [r0, #8]
    3488:	689b      	ldr	r3, [r3, #8]
    348a:	b103      	cbz	r3, 348e <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    348c:	4798      	blx	r3
    348e:	bd08      	pop	{r3, pc}

00003490 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    3490:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    3492:	6883      	ldr	r3, [r0, #8]
    3494:	685b      	ldr	r3, [r3, #4]
    3496:	b103      	cbz	r3, 349a <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    3498:	4798      	blx	r3
    349a:	bd08      	pop	{r3, pc}

0000349c <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    349c:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    349e:	6883      	ldr	r3, [r0, #8]
    34a0:	68db      	ldr	r3, [r3, #12]
    34a2:	b103      	cbz	r3, 34a6 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    34a4:	4798      	blx	r3
    34a6:	bd08      	pop	{r3, pc}

000034a8 <_usart_init>:
{
    34a8:	b510      	push	{r4, lr}
    34aa:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    34ac:	4b48      	ldr	r3, [pc, #288]	; (35d0 <_usart_init+0x128>)
    34ae:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    34b0:	2800      	cmp	r0, #0
    34b2:	d06a      	beq.n	358a <_usart_init+0xe2>
    34b4:	2801      	cmp	r0, #1
    34b6:	d062      	beq.n	357e <_usart_init+0xd6>
    34b8:	2802      	cmp	r0, #2
    34ba:	d062      	beq.n	3582 <_usart_init+0xda>
    34bc:	2804      	cmp	r0, #4
    34be:	d062      	beq.n	3586 <_usart_init+0xde>
    34c0:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    34c2:	bf08      	it	eq
    34c4:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    34c6:	d006      	beq.n	34d6 <_usart_init+0x2e>
	ASSERT(false);
    34c8:	f44f 721e 	mov.w	r2, #632	; 0x278
    34cc:	4941      	ldr	r1, [pc, #260]	; (35d4 <_usart_init+0x12c>)
    34ce:	2000      	movs	r0, #0
    34d0:	4b41      	ldr	r3, [pc, #260]	; (35d8 <_usart_init+0x130>)
    34d2:	4798      	blx	r3
	return 0;
    34d4:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    34d6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    34d8:	f013 0f01 	tst.w	r3, #1
    34dc:	d122      	bne.n	3524 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    34de:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    34e2:	4a3e      	ldr	r2, [pc, #248]	; (35dc <_usart_init+0x134>)
    34e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    34e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    34ea:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    34ee:	69e3      	ldr	r3, [r4, #28]
    34f0:	f013 0f03 	tst.w	r3, #3
    34f4:	d1fb      	bne.n	34ee <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    34f6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    34f8:	f013 0f02 	tst.w	r3, #2
    34fc:	d00b      	beq.n	3516 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    34fe:	6823      	ldr	r3, [r4, #0]
    3500:	f023 0302 	bic.w	r3, r3, #2
    3504:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3506:	69e3      	ldr	r3, [r4, #28]
    3508:	f013 0f03 	tst.w	r3, #3
    350c:	d1fb      	bne.n	3506 <_usart_init+0x5e>
    350e:	69e3      	ldr	r3, [r4, #28]
    3510:	f013 0f02 	tst.w	r3, #2
    3514:	d1fb      	bne.n	350e <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3516:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    351a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    351c:	69e3      	ldr	r3, [r4, #28]
    351e:	f013 0f03 	tst.w	r3, #3
    3522:	d1fb      	bne.n	351c <_usart_init+0x74>
    3524:	69e3      	ldr	r3, [r4, #28]
    3526:	f013 0f01 	tst.w	r3, #1
    352a:	d1fb      	bne.n	3524 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    352c:	460a      	mov	r2, r1
    352e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3532:	4b2a      	ldr	r3, [pc, #168]	; (35dc <_usart_init+0x134>)
    3534:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    3538:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    353a:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    353c:	69e3      	ldr	r3, [r4, #28]
    353e:	f013 0f03 	tst.w	r3, #3
    3542:	d1fb      	bne.n	353c <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3544:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3548:	4924      	ldr	r1, [pc, #144]	; (35dc <_usart_init+0x134>)
    354a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3550:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3552:	69e3      	ldr	r3, [r4, #28]
    3554:	f013 0f1f 	tst.w	r3, #31
    3558:	d1fb      	bne.n	3552 <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    355a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    355e:	491f      	ldr	r1, [pc, #124]	; (35dc <_usart_init+0x134>)
    3560:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3566:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3568:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    356c:	d10f      	bne.n	358e <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    356e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3572:	491a      	ldr	r1, [pc, #104]	; (35dc <_usart_init+0x134>)
    3574:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3578:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    357a:	81a3      	strh	r3, [r4, #12]
    357c:	e016      	b.n	35ac <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    357e:	2101      	movs	r1, #1
    3580:	e7a9      	b.n	34d6 <_usart_init+0x2e>
    3582:	2102      	movs	r1, #2
    3584:	e7a7      	b.n	34d6 <_usart_init+0x2e>
    3586:	2103      	movs	r1, #3
    3588:	e7a5      	b.n	34d6 <_usart_init+0x2e>
    358a:	2100      	movs	r1, #0
    358c:	e7a3      	b.n	34d6 <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    358e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3592:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3596:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    3598:	89a1      	ldrh	r1, [r4, #12]
    359a:	f360 010c 	bfi	r1, r0, #0, #13
    359e:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    35a0:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    35a4:	89a3      	ldrh	r3, [r4, #12]
    35a6:	f361 334f 	bfi	r3, r1, #13, #3
    35aa:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    35ac:	4b0b      	ldr	r3, [pc, #44]	; (35dc <_usart_init+0x134>)
    35ae:	0051      	lsls	r1, r2, #1
    35b0:	1888      	adds	r0, r1, r2
    35b2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    35b6:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    35ba:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    35bc:	440a      	add	r2, r1
    35be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    35c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    35c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    35ca:	2000      	movs	r0, #0
    35cc:	bd10      	pop	{r4, pc}
    35ce:	bf00      	nop
    35d0:	00003241 	.word	0x00003241
    35d4:	0000aff4 	.word	0x0000aff4
    35d8:	00002481 	.word	0x00002481
    35dc:	0000af20 	.word	0x0000af20

000035e0 <_get_i2cm_index>:
{
    35e0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    35e2:	4b07      	ldr	r3, [pc, #28]	; (3600 <_get_i2cm_index+0x20>)
    35e4:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    35e6:	2805      	cmp	r0, #5
    35e8:	d008      	beq.n	35fc <_get_i2cm_index+0x1c>
	ASSERT(false);
    35ea:	f240 32f3 	movw	r2, #1011	; 0x3f3
    35ee:	4905      	ldr	r1, [pc, #20]	; (3604 <_get_i2cm_index+0x24>)
    35f0:	2000      	movs	r0, #0
    35f2:	4b05      	ldr	r3, [pc, #20]	; (3608 <_get_i2cm_index+0x28>)
    35f4:	4798      	blx	r3
	return -1;
    35f6:	f04f 30ff 	mov.w	r0, #4294967295
}
    35fa:	bd08      	pop	{r3, pc}
			return i;
    35fc:	2000      	movs	r0, #0
    35fe:	bd08      	pop	{r3, pc}
    3600:	00003241 	.word	0x00003241
    3604:	0000aff4 	.word	0x0000aff4
    3608:	00002481 	.word	0x00002481

0000360c <_i2c_m_sync_init_impl>:
{
    360c:	b538      	push	{r3, r4, r5, lr}
    360e:	4605      	mov	r5, r0
    3610:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    3612:	4608      	mov	r0, r1
    3614:	4b34      	ldr	r3, [pc, #208]	; (36e8 <_i2c_m_sync_init_impl+0xdc>)
    3616:	4798      	blx	r3
    3618:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    361a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    361c:	f013 0f01 	tst.w	r3, #1
    3620:	d123      	bne.n	366a <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    3622:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3626:	4a31      	ldr	r2, [pc, #196]	; (36ec <_i2c_m_sync_init_impl+0xe0>)
    3628:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    362c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    3630:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3634:	69e3      	ldr	r3, [r4, #28]
    3636:	f013 0f03 	tst.w	r3, #3
    363a:	d1fb      	bne.n	3634 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    363c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    363e:	f013 0f02 	tst.w	r3, #2
    3642:	d00b      	beq.n	365c <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    3644:	6823      	ldr	r3, [r4, #0]
    3646:	f023 0302 	bic.w	r3, r3, #2
    364a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    364c:	69e3      	ldr	r3, [r4, #28]
    364e:	f013 0f03 	tst.w	r3, #3
    3652:	d1fb      	bne.n	364c <_i2c_m_sync_init_impl+0x40>
    3654:	69e3      	ldr	r3, [r4, #28]
    3656:	f013 0f02 	tst.w	r3, #2
    365a:	d1fb      	bne.n	3654 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    365c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    3660:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3662:	69e3      	ldr	r3, [r4, #28]
    3664:	f013 0f03 	tst.w	r3, #3
    3668:	d1fb      	bne.n	3662 <_i2c_m_sync_init_impl+0x56>
    366a:	69e3      	ldr	r3, [r4, #28]
    366c:	f013 0f01 	tst.w	r3, #1
    3670:	d1fb      	bne.n	366a <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    3672:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3676:	4a1d      	ldr	r2, [pc, #116]	; (36ec <_i2c_m_sync_init_impl+0xe0>)
    3678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    367c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    3680:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3682:	69e3      	ldr	r3, [r4, #28]
    3684:	f013 0f03 	tst.w	r3, #3
    3688:	d1fb      	bne.n	3682 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    368a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    368e:	4917      	ldr	r1, [pc, #92]	; (36ec <_i2c_m_sync_init_impl+0xe0>)
    3690:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3694:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    3698:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    369a:	69e3      	ldr	r3, [r4, #28]
    369c:	f013 0f04 	tst.w	r3, #4
    36a0:	d1fb      	bne.n	369a <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    36a2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    36a6:	4911      	ldr	r1, [pc, #68]	; (36ec <_i2c_m_sync_init_impl+0xe0>)
    36a8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    36ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    36b0:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    36b2:	f3c2 6301 	ubfx	r3, r2, #24, #2
    36b6:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    36b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    36ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    36be:	2b01      	cmp	r3, #1
    36c0:	bf94      	ite	ls
    36c2:	2300      	movls	r3, #0
    36c4:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    36c6:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    36ca:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    36cc:	69e3      	ldr	r3, [r4, #28]
    36ce:	f013 0f04 	tst.w	r3, #4
    36d2:	d1fb      	bne.n	36cc <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    36d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    36d8:	4b04      	ldr	r3, [pc, #16]	; (36ec <_i2c_m_sync_init_impl+0xe0>)
    36da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    36de:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    36e2:	81eb      	strh	r3, [r5, #14]
}
    36e4:	2000      	movs	r0, #0
    36e6:	bd38      	pop	{r3, r4, r5, pc}
    36e8:	000035e1 	.word	0x000035e1
    36ec:	0000af20 	.word	0x0000af20

000036f0 <_sercom_i2c_m_irq_handler>:
{
    36f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36f4:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    36f6:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    36f8:	7e26      	ldrb	r6, [r4, #24]
    36fa:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    36fc:	f8df 8234 	ldr.w	r8, [pc, #564]	; 3934 <_sercom_i2c_m_irq_handler+0x244>
    3700:	f240 4265 	movw	r2, #1125	; 0x465
    3704:	4641      	mov	r1, r8
    3706:	3000      	adds	r0, #0
    3708:	bf18      	it	ne
    370a:	2001      	movne	r0, #1
    370c:	4f88      	ldr	r7, [pc, #544]	; (3930 <_sercom_i2c_m_irq_handler+0x240>)
    370e:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    3710:	6928      	ldr	r0, [r5, #16]
    3712:	f240 4266 	movw	r2, #1126	; 0x466
    3716:	4641      	mov	r1, r8
    3718:	3000      	adds	r0, #0
    371a:	bf18      	it	ne
    371c:	2001      	movne	r0, #1
    371e:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    3720:	f016 0f80 	tst.w	r6, #128	; 0x80
    3724:	f040 80f4 	bne.w	3910 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3728:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    372a:	69e3      	ldr	r3, [r4, #28]
    372c:	f013 0f04 	tst.w	r3, #4
    3730:	d1fb      	bne.n	372a <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    3732:	8b63      	ldrh	r3, [r4, #26]
    3734:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    3736:	f016 0f01 	tst.w	r6, #1
    373a:	f000 8090 	beq.w	385e <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    373e:	f013 0f02 	tst.w	r3, #2
    3742:	d022      	beq.n	378a <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    3744:	2201      	movs	r2, #1
    3746:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    3748:	886a      	ldrh	r2, [r5, #2]
    374a:	b292      	uxth	r2, r2
    374c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3750:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    3752:	886a      	ldrh	r2, [r5, #2]
    3754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    3758:	0412      	lsls	r2, r2, #16
    375a:	0c12      	lsrs	r2, r2, #16
    375c:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    375e:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    3762:	2b00      	cmp	r3, #0
    3764:	bf14      	ite	ne
    3766:	f06f 0104 	mvnne.w	r1, #4
    376a:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    376e:	886b      	ldrh	r3, [r5, #2]
    3770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3774:	041b      	lsls	r3, r3, #16
    3776:	0c1b      	lsrs	r3, r3, #16
    3778:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    377a:	696b      	ldr	r3, [r5, #20]
    377c:	2b00      	cmp	r3, #0
    377e:	f000 80c5 	beq.w	390c <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    3782:	4628      	mov	r0, r5
    3784:	4798      	blx	r3
    3786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    378a:	f013 0f04 	tst.w	r3, #4
    378e:	d124      	bne.n	37da <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    3790:	886b      	ldrh	r3, [r5, #2]
    3792:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3796:	d03e      	beq.n	3816 <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    3798:	882b      	ldrh	r3, [r5, #0]
    379a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    379c:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37a0:	69e3      	ldr	r3, [r4, #28]
    37a2:	f013 0f04 	tst.w	r3, #4
    37a6:	d1fb      	bne.n	37a0 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    37a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    37aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    37ae:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    37b2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    37b4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37b6:	69e3      	ldr	r3, [r4, #28]
    37b8:	f013 0f04 	tst.w	r3, #4
    37bc:	d1fb      	bne.n	37b6 <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    37be:	886b      	ldrh	r3, [r5, #2]
    37c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    37c4:	041b      	lsls	r3, r3, #16
    37c6:	0c1b      	lsrs	r3, r3, #16
    37c8:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    37ca:	69ab      	ldr	r3, [r5, #24]
    37cc:	2b00      	cmp	r3, #0
    37ce:	f000 8088 	beq.w	38e2 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    37d2:	4628      	mov	r0, r5
    37d4:	4798      	blx	r3
    37d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    37da:	686b      	ldr	r3, [r5, #4]
    37dc:	2b00      	cmp	r3, #0
    37de:	dd04      	ble.n	37ea <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    37e0:	886b      	ldrh	r3, [r5, #2]
    37e2:	b29b      	uxth	r3, r3
    37e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    37e8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    37ea:	886b      	ldrh	r3, [r5, #2]
    37ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    37f0:	d108      	bne.n	3804 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    37f2:	886b      	ldrh	r3, [r5, #2]
    37f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    37f8:	041b      	lsls	r3, r3, #16
    37fa:	0c1b      	lsrs	r3, r3, #16
    37fc:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    37fe:	f06f 0101 	mvn.w	r1, #1
    3802:	e7b4      	b.n	376e <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3804:	6863      	ldr	r3, [r4, #4]
    3806:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    380a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    380c:	69e3      	ldr	r3, [r4, #28]
    380e:	f013 0f04 	tst.w	r3, #4
    3812:	d1fb      	bne.n	380c <_sercom_i2c_m_irq_handler+0x11c>
    3814:	e7ed      	b.n	37f2 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    3816:	686b      	ldr	r3, [r5, #4]
    3818:	b99b      	cbnz	r3, 3842 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    381a:	886b      	ldrh	r3, [r5, #2]
    381c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3820:	d106      	bne.n	3830 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    3822:	886b      	ldrh	r3, [r5, #2]
    3824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3828:	041b      	lsls	r3, r3, #16
    382a:	0c1b      	lsrs	r3, r3, #16
    382c:	806b      	strh	r3, [r5, #2]
    382e:	e7cc      	b.n	37ca <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3830:	6863      	ldr	r3, [r4, #4]
    3832:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3836:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3838:	69e3      	ldr	r3, [r4, #28]
    383a:	f013 0f04 	tst.w	r3, #4
    383e:	d1fb      	bne.n	3838 <_sercom_i2c_m_irq_handler+0x148>
    3840:	e7ef      	b.n	3822 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    3842:	68ab      	ldr	r3, [r5, #8]
    3844:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    3846:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3848:	69e3      	ldr	r3, [r4, #28]
    384a:	f013 0f04 	tst.w	r3, #4
    384e:	d1fb      	bne.n	3848 <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    3850:	68ab      	ldr	r3, [r5, #8]
    3852:	3301      	adds	r3, #1
    3854:	60ab      	str	r3, [r5, #8]
				msg->len--;
    3856:	686b      	ldr	r3, [r5, #4]
    3858:	3b01      	subs	r3, #1
    385a:	606b      	str	r3, [r5, #4]
    385c:	e7b5      	b.n	37ca <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    385e:	f016 0f02 	tst.w	r6, #2
    3862:	d041      	beq.n	38e8 <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    3864:	686a      	ldr	r2, [r5, #4]
    3866:	2a00      	cmp	r2, #0
    3868:	d036      	beq.n	38d8 <_sercom_i2c_m_irq_handler+0x1e8>
    386a:	f013 0f04 	tst.w	r3, #4
    386e:	d133      	bne.n	38d8 <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    3870:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    3874:	3a01      	subs	r2, #1
    3876:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3878:	2a00      	cmp	r2, #0
    387a:	d137      	bne.n	38ec <_sercom_i2c_m_irq_handler+0x1fc>
    387c:	2900      	cmp	r1, #0
    387e:	d039      	beq.n	38f4 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    3880:	886b      	ldrh	r3, [r5, #2]
    3882:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3886:	d116      	bne.n	38b6 <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    3888:	886b      	ldrh	r3, [r5, #2]
    388a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    388e:	041b      	lsls	r3, r3, #16
    3890:	0c1b      	lsrs	r3, r3, #16
    3892:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3894:	68aa      	ldr	r2, [r5, #8]
    3896:	1c53      	adds	r3, r2, #1
    3898:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    389a:	69e3      	ldr	r3, [r4, #28]
    389c:	f013 0f04 	tst.w	r3, #4
    38a0:	d1fb      	bne.n	389a <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    38a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    38a4:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    38a6:	2302      	movs	r3, #2
    38a8:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    38aa:	69eb      	ldr	r3, [r5, #28]
    38ac:	b1e3      	cbz	r3, 38e8 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    38ae:	4628      	mov	r0, r5
    38b0:	4798      	blx	r3
    38b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    38b6:	6863      	ldr	r3, [r4, #4]
    38b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    38bc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    38be:	69e3      	ldr	r3, [r4, #28]
    38c0:	f013 0f04 	tst.w	r3, #4
    38c4:	d1fb      	bne.n	38be <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    38c6:	6863      	ldr	r3, [r4, #4]
    38c8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    38cc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    38ce:	69e3      	ldr	r3, [r4, #28]
    38d0:	f013 0f04 	tst.w	r3, #4
    38d4:	d1fb      	bne.n	38ce <_sercom_i2c_m_irq_handler+0x1de>
    38d6:	e7d7      	b.n	3888 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    38d8:	2302      	movs	r3, #2
    38da:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    38dc:	f06f 0101 	mvn.w	r1, #1
    38e0:	e745      	b.n	376e <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    38e2:	f016 0f02 	tst.w	r6, #2
    38e6:	d1e0      	bne.n	38aa <_sercom_i2c_m_irq_handler+0x1ba>
    38e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    38ec:	2a01      	cmp	r2, #1
    38ee:	d1d1      	bne.n	3894 <_sercom_i2c_m_irq_handler+0x1a4>
    38f0:	2900      	cmp	r1, #0
    38f2:	d0cf      	beq.n	3894 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    38f4:	6863      	ldr	r3, [r4, #4]
    38f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    38fa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    38fc:	69e3      	ldr	r3, [r4, #28]
    38fe:	f013 0f04 	tst.w	r3, #4
    3902:	d1fb      	bne.n	38fc <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    3904:	686b      	ldr	r3, [r5, #4]
    3906:	2b00      	cmp	r3, #0
    3908:	d0ba      	beq.n	3880 <_sercom_i2c_m_irq_handler+0x190>
    390a:	e7c3      	b.n	3894 <_sercom_i2c_m_irq_handler+0x1a4>
    390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3910:	886b      	ldrh	r3, [r5, #2]
    3912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3916:	041b      	lsls	r3, r3, #16
    3918:	0c1b      	lsrs	r3, r3, #16
    391a:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    391c:	696b      	ldr	r3, [r5, #20]
    391e:	2b00      	cmp	r3, #0
    3920:	d0e2      	beq.n	38e8 <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    3922:	f06f 0104 	mvn.w	r1, #4
    3926:	4628      	mov	r0, r5
    3928:	4798      	blx	r3
    392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    392e:	bf00      	nop
    3930:	00002481 	.word	0x00002481
    3934:	0000aff4 	.word	0x0000aff4

00003938 <_usart_async_init>:
{
    3938:	b570      	push	{r4, r5, r6, lr}
    393a:	460d      	mov	r5, r1
	ASSERT(device);
    393c:	4606      	mov	r6, r0
    393e:	22d8      	movs	r2, #216	; 0xd8
    3940:	4917      	ldr	r1, [pc, #92]	; (39a0 <_usart_async_init+0x68>)
    3942:	3000      	adds	r0, #0
    3944:	bf18      	it	ne
    3946:	2001      	movne	r0, #1
    3948:	4b16      	ldr	r3, [pc, #88]	; (39a4 <_usart_async_init+0x6c>)
    394a:	4798      	blx	r3
	init_status = _usart_init(hw);
    394c:	4628      	mov	r0, r5
    394e:	4b16      	ldr	r3, [pc, #88]	; (39a8 <_usart_async_init+0x70>)
    3950:	4798      	blx	r3
	if (init_status) {
    3952:	4604      	mov	r4, r0
    3954:	b108      	cbz	r0, 395a <_usart_async_init+0x22>
}
    3956:	4620      	mov	r0, r4
    3958:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    395a:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    395c:	4631      	mov	r1, r6
    395e:	4628      	mov	r0, r5
    3960:	4b12      	ldr	r3, [pc, #72]	; (39ac <_usart_async_init+0x74>)
    3962:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    3964:	4628      	mov	r0, r5
    3966:	4b12      	ldr	r3, [pc, #72]	; (39b0 <_usart_async_init+0x78>)
    3968:	4798      	blx	r3
    396a:	1d01      	adds	r1, r0, #4
    396c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    396e:	2501      	movs	r5, #1
    3970:	f000 021f 	and.w	r2, r0, #31
    3974:	fa05 f202 	lsl.w	r2, r5, r2
    3978:	0943      	lsrs	r3, r0, #5
    397a:	009b      	lsls	r3, r3, #2
    397c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3980:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3988:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    398c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3990:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3994:	601a      	str	r2, [r3, #0]
		irq++;
    3996:	3001      	adds	r0, #1
    3998:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    399a:	4281      	cmp	r1, r0
    399c:	d1e8      	bne.n	3970 <_usart_async_init+0x38>
    399e:	e7da      	b.n	3956 <_usart_async_init+0x1e>
    39a0:	0000aff4 	.word	0x0000aff4
    39a4:	00002481 	.word	0x00002481
    39a8:	000034a9 	.word	0x000034a9
    39ac:	000032f5 	.word	0x000032f5
    39b0:	00003365 	.word	0x00003365

000039b4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    39b4:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    39b6:	6813      	ldr	r3, [r2, #0]
    39b8:	f043 0302 	orr.w	r3, r3, #2
    39bc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    39be:	69d3      	ldr	r3, [r2, #28]
    39c0:	f013 0f03 	tst.w	r3, #3
    39c4:	d1fb      	bne.n	39be <_usart_async_enable+0xa>
}
    39c6:	4770      	bx	lr

000039c8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    39c8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    39ca:	6299      	str	r1, [r3, #40]	; 0x28
    39cc:	4770      	bx	lr

000039ce <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    39ce:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    39d0:	2201      	movs	r2, #1
    39d2:	759a      	strb	r2, [r3, #22]
    39d4:	4770      	bx	lr

000039d6 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    39d6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    39d8:	2202      	movs	r2, #2
    39da:	759a      	strb	r2, [r3, #22]
    39dc:	4770      	bx	lr
	...

000039e0 <_usart_async_set_irq_state>:
{
    39e0:	b570      	push	{r4, r5, r6, lr}
    39e2:	460c      	mov	r4, r1
    39e4:	4616      	mov	r6, r2
	ASSERT(device);
    39e6:	4605      	mov	r5, r0
    39e8:	f44f 720e 	mov.w	r2, #568	; 0x238
    39ec:	4915      	ldr	r1, [pc, #84]	; (3a44 <_usart_async_set_irq_state+0x64>)
    39ee:	3000      	adds	r0, #0
    39f0:	bf18      	it	ne
    39f2:	2001      	movne	r0, #1
    39f4:	4b14      	ldr	r3, [pc, #80]	; (3a48 <_usart_async_set_irq_state+0x68>)
    39f6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    39f8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    39fc:	d10d      	bne.n	3a1a <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    39fe:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3a00:	b92e      	cbnz	r6, 3a0e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3a02:	2201      	movs	r2, #1
    3a04:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    3a06:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3a08:	2202      	movs	r2, #2
    3a0a:	751a      	strb	r2, [r3, #20]
    3a0c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3a0e:	2201      	movs	r2, #1
    3a10:	759a      	strb	r2, [r3, #22]
    3a12:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3a14:	2202      	movs	r2, #2
    3a16:	759a      	strb	r2, [r3, #22]
    3a18:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    3a1a:	2c01      	cmp	r4, #1
    3a1c:	d002      	beq.n	3a24 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    3a1e:	2c03      	cmp	r4, #3
    3a20:	d008      	beq.n	3a34 <_usart_async_set_irq_state+0x54>
    3a22:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    3a24:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3a26:	b916      	cbnz	r6, 3a2e <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    3a28:	2204      	movs	r2, #4
    3a2a:	751a      	strb	r2, [r3, #20]
    3a2c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    3a2e:	2204      	movs	r2, #4
    3a30:	759a      	strb	r2, [r3, #22]
    3a32:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    3a34:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3a36:	b116      	cbz	r6, 3a3e <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3a38:	2280      	movs	r2, #128	; 0x80
    3a3a:	759a      	strb	r2, [r3, #22]
}
    3a3c:	e7f1      	b.n	3a22 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    3a3e:	2280      	movs	r2, #128	; 0x80
    3a40:	751a      	strb	r2, [r3, #20]
    3a42:	bd70      	pop	{r4, r5, r6, pc}
    3a44:	0000aff4 	.word	0x0000aff4
    3a48:	00002481 	.word	0x00002481

00003a4c <_i2c_m_async_init>:
{
    3a4c:	b570      	push	{r4, r5, r6, lr}
    3a4e:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    3a50:	4606      	mov	r6, r0
    3a52:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
    3a56:	4918      	ldr	r1, [pc, #96]	; (3ab8 <_i2c_m_async_init+0x6c>)
    3a58:	3000      	adds	r0, #0
    3a5a:	bf18      	it	ne
    3a5c:	2001      	movne	r0, #1
    3a5e:	4b17      	ldr	r3, [pc, #92]	; (3abc <_i2c_m_async_init+0x70>)
    3a60:	4798      	blx	r3
	i2c_dev->hw = hw;
    3a62:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    3a64:	4629      	mov	r1, r5
    3a66:	4630      	mov	r0, r6
    3a68:	4b15      	ldr	r3, [pc, #84]	; (3ac0 <_i2c_m_async_init+0x74>)
    3a6a:	4798      	blx	r3
	if (init_status) {
    3a6c:	4604      	mov	r4, r0
    3a6e:	b108      	cbz	r0, 3a74 <_i2c_m_async_init+0x28>
}
    3a70:	4620      	mov	r0, r4
    3a72:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    3a74:	4631      	mov	r1, r6
    3a76:	4628      	mov	r0, r5
    3a78:	4b12      	ldr	r3, [pc, #72]	; (3ac4 <_i2c_m_async_init+0x78>)
    3a7a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    3a7c:	4628      	mov	r0, r5
    3a7e:	4b12      	ldr	r3, [pc, #72]	; (3ac8 <_i2c_m_async_init+0x7c>)
    3a80:	4798      	blx	r3
    3a82:	1d01      	adds	r1, r0, #4
    3a84:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a86:	2501      	movs	r5, #1
    3a88:	f000 021f 	and.w	r2, r0, #31
    3a8c:	fa05 f202 	lsl.w	r2, r5, r2
    3a90:	0943      	lsrs	r3, r0, #5
    3a92:	009b      	lsls	r3, r3, #2
    3a94:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3a98:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3aa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3aa4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3aa8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3aac:	601a      	str	r2, [r3, #0]
		irq++;
    3aae:	3001      	adds	r0, #1
    3ab0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3ab2:	4281      	cmp	r1, r0
    3ab4:	d1e8      	bne.n	3a88 <_i2c_m_async_init+0x3c>
    3ab6:	e7db      	b.n	3a70 <_i2c_m_async_init+0x24>
    3ab8:	0000aff4 	.word	0x0000aff4
    3abc:	00002481 	.word	0x00002481
    3ac0:	0000360d 	.word	0x0000360d
    3ac4:	000032f5 	.word	0x000032f5
    3ac8:	00003365 	.word	0x00003365

00003acc <_i2c_m_async_transfer>:
{
    3acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ad0:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    3ad2:	4605      	mov	r5, r0
    3ad4:	f110 0800 	adds.w	r8, r0, #0
    3ad8:	bf18      	it	ne
    3ada:	f04f 0801 	movne.w	r8, #1
    3ade:	4f45      	ldr	r7, [pc, #276]	; (3bf4 <_i2c_m_async_transfer+0x128>)
    3ae0:	f240 522e 	movw	r2, #1326	; 0x52e
    3ae4:	4639      	mov	r1, r7
    3ae6:	4640      	mov	r0, r8
    3ae8:	4e43      	ldr	r6, [pc, #268]	; (3bf8 <_i2c_m_async_transfer+0x12c>)
    3aea:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    3aec:	6928      	ldr	r0, [r5, #16]
    3aee:	f240 522f 	movw	r2, #1327	; 0x52f
    3af2:	4639      	mov	r1, r7
    3af4:	3000      	adds	r0, #0
    3af6:	bf18      	it	ne
    3af8:	2001      	movne	r0, #1
    3afa:	47b0      	blx	r6
	ASSERT(msg);
    3afc:	f44f 62a6 	mov.w	r2, #1328	; 0x530
    3b00:	4639      	mov	r1, r7
    3b02:	1c20      	adds	r0, r4, #0
    3b04:	bf18      	it	ne
    3b06:	2001      	movne	r0, #1
    3b08:	47b0      	blx	r6
	if (msg->len == 0) {
    3b0a:	6860      	ldr	r0, [r4, #4]
    3b0c:	2800      	cmp	r0, #0
    3b0e:	d06f      	beq.n	3bf0 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3b10:	886b      	ldrh	r3, [r5, #2]
    3b12:	f413 7f80 	tst.w	r3, #256	; 0x100
    3b16:	d169      	bne.n	3bec <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    3b18:	8863      	ldrh	r3, [r4, #2]
    3b1a:	b29b      	uxth	r3, r3
    3b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b20:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    3b22:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    3b26:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    3b2a:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    3b2c:	6853      	ldr	r3, [r2, #4]
    3b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b32:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3b34:	69d3      	ldr	r3, [r2, #28]
    3b36:	f013 0f04 	tst.w	r3, #4
    3b3a:	d1fb      	bne.n	3b34 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    3b3c:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3b3e:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    3b40:	f240 5206 	movw	r2, #1286	; 0x506
    3b44:	492b      	ldr	r1, [pc, #172]	; (3bf4 <_i2c_m_async_transfer+0x128>)
    3b46:	4640      	mov	r0, r8
    3b48:	4b2b      	ldr	r3, [pc, #172]	; (3bf8 <_i2c_m_async_transfer+0x12c>)
    3b4a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    3b4c:	686b      	ldr	r3, [r5, #4]
    3b4e:	2b01      	cmp	r3, #1
    3b50:	d02a      	beq.n	3ba8 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3b52:	6863      	ldr	r3, [r4, #4]
    3b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    3b58:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3b5a:	69e3      	ldr	r3, [r4, #28]
    3b5c:	f013 0f04 	tst.w	r3, #4
    3b60:	d1fb      	bne.n	3b5a <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    3b62:	882b      	ldrh	r3, [r5, #0]
    3b64:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3b68:	d02a      	beq.n	3bc0 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    3b6a:	886a      	ldrh	r2, [r5, #2]
    3b6c:	f012 0f01 	tst.w	r2, #1
    3b70:	d004      	beq.n	3b7c <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    3b72:	886a      	ldrh	r2, [r5, #2]
    3b74:	b292      	uxth	r2, r2
    3b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3b7a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3b7c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    3b80:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    3b84:	69e3      	ldr	r3, [r4, #28]
    3b86:	f013 0f04 	tst.w	r3, #4
    3b8a:	d1fb      	bne.n	3b84 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3b96:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3b98:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3b9a:	69e3      	ldr	r3, [r4, #28]
    3b9c:	f013 0f04 	tst.w	r3, #4
    3ba0:	d1fb      	bne.n	3b9a <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    3ba2:	2000      	movs	r0, #0
    3ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    3ba8:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    3bac:	d0d1      	beq.n	3b52 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3bae:	6863      	ldr	r3, [r4, #4]
    3bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3bb4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3bb6:	69e3      	ldr	r3, [r4, #28]
    3bb8:	f013 0f04 	tst.w	r3, #4
    3bbc:	d1fb      	bne.n	3bb6 <_i2c_m_async_transfer+0xea>
    3bbe:	e7d0      	b.n	3b62 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3bc0:	8869      	ldrh	r1, [r5, #2]
    3bc2:	005a      	lsls	r2, r3, #1
    3bc4:	b2d2      	uxtb	r2, r2
    3bc6:	f001 0301 	and.w	r3, r1, #1
    3bca:	431a      	orrs	r2, r3
    3bcc:	69e3      	ldr	r3, [r4, #28]
    3bce:	f013 0f04 	tst.w	r3, #4
    3bd2:	d1fb      	bne.n	3bcc <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3bda:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3bdc:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3bde:	69e3      	ldr	r3, [r4, #28]
    3be0:	f013 0f04 	tst.w	r3, #4
    3be4:	d1fb      	bne.n	3bde <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    3be6:	2000      	movs	r0, #0
    3be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    3bec:	f06f 0003 	mvn.w	r0, #3
}
    3bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bf4:	0000aff4 	.word	0x0000aff4
    3bf8:	00002481 	.word	0x00002481

00003bfc <_i2c_m_async_register_callback>:
	switch (type) {
    3bfc:	2901      	cmp	r1, #1
    3bfe:	d006      	beq.n	3c0e <_i2c_m_async_register_callback+0x12>
    3c00:	b119      	cbz	r1, 3c0a <_i2c_m_async_register_callback+0xe>
    3c02:	2902      	cmp	r1, #2
    3c04:	d005      	beq.n	3c12 <_i2c_m_async_register_callback+0x16>
}
    3c06:	2000      	movs	r0, #0
    3c08:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    3c0a:	6142      	str	r2, [r0, #20]
		break;
    3c0c:	e7fb      	b.n	3c06 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    3c0e:	6182      	str	r2, [r0, #24]
		break;
    3c10:	e7f9      	b.n	3c06 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    3c12:	61c2      	str	r2, [r0, #28]
		break;
    3c14:	e7f7      	b.n	3c06 <_i2c_m_async_register_callback+0xa>
	...

00003c18 <SERCOM0_0_Handler>:
{
    3c18:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3c1a:	4b02      	ldr	r3, [pc, #8]	; (3c24 <SERCOM0_0_Handler+0xc>)
    3c1c:	6818      	ldr	r0, [r3, #0]
    3c1e:	4b02      	ldr	r3, [pc, #8]	; (3c28 <SERCOM0_0_Handler+0x10>)
    3c20:	4798      	blx	r3
    3c22:	bd08      	pop	{r3, pc}
    3c24:	2000094c 	.word	0x2000094c
    3c28:	00003285 	.word	0x00003285

00003c2c <SERCOM0_1_Handler>:
{
    3c2c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3c2e:	4b02      	ldr	r3, [pc, #8]	; (3c38 <SERCOM0_1_Handler+0xc>)
    3c30:	6818      	ldr	r0, [r3, #0]
    3c32:	4b02      	ldr	r3, [pc, #8]	; (3c3c <SERCOM0_1_Handler+0x10>)
    3c34:	4798      	blx	r3
    3c36:	bd08      	pop	{r3, pc}
    3c38:	2000094c 	.word	0x2000094c
    3c3c:	00003285 	.word	0x00003285

00003c40 <SERCOM0_2_Handler>:
{
    3c40:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3c42:	4b02      	ldr	r3, [pc, #8]	; (3c4c <SERCOM0_2_Handler+0xc>)
    3c44:	6818      	ldr	r0, [r3, #0]
    3c46:	4b02      	ldr	r3, [pc, #8]	; (3c50 <SERCOM0_2_Handler+0x10>)
    3c48:	4798      	blx	r3
    3c4a:	bd08      	pop	{r3, pc}
    3c4c:	2000094c 	.word	0x2000094c
    3c50:	00003285 	.word	0x00003285

00003c54 <SERCOM0_3_Handler>:
{
    3c54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3c56:	4b02      	ldr	r3, [pc, #8]	; (3c60 <SERCOM0_3_Handler+0xc>)
    3c58:	6818      	ldr	r0, [r3, #0]
    3c5a:	4b02      	ldr	r3, [pc, #8]	; (3c64 <SERCOM0_3_Handler+0x10>)
    3c5c:	4798      	blx	r3
    3c5e:	bd08      	pop	{r3, pc}
    3c60:	2000094c 	.word	0x2000094c
    3c64:	00003285 	.word	0x00003285

00003c68 <SERCOM1_0_Handler>:
{
    3c68:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3c6a:	4b02      	ldr	r3, [pc, #8]	; (3c74 <SERCOM1_0_Handler+0xc>)
    3c6c:	6858      	ldr	r0, [r3, #4]
    3c6e:	4b02      	ldr	r3, [pc, #8]	; (3c78 <SERCOM1_0_Handler+0x10>)
    3c70:	4798      	blx	r3
    3c72:	bd08      	pop	{r3, pc}
    3c74:	2000094c 	.word	0x2000094c
    3c78:	00003285 	.word	0x00003285

00003c7c <SERCOM1_1_Handler>:
{
    3c7c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3c7e:	4b02      	ldr	r3, [pc, #8]	; (3c88 <SERCOM1_1_Handler+0xc>)
    3c80:	6858      	ldr	r0, [r3, #4]
    3c82:	4b02      	ldr	r3, [pc, #8]	; (3c8c <SERCOM1_1_Handler+0x10>)
    3c84:	4798      	blx	r3
    3c86:	bd08      	pop	{r3, pc}
    3c88:	2000094c 	.word	0x2000094c
    3c8c:	00003285 	.word	0x00003285

00003c90 <SERCOM1_2_Handler>:
{
    3c90:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3c92:	4b02      	ldr	r3, [pc, #8]	; (3c9c <SERCOM1_2_Handler+0xc>)
    3c94:	6858      	ldr	r0, [r3, #4]
    3c96:	4b02      	ldr	r3, [pc, #8]	; (3ca0 <SERCOM1_2_Handler+0x10>)
    3c98:	4798      	blx	r3
    3c9a:	bd08      	pop	{r3, pc}
    3c9c:	2000094c 	.word	0x2000094c
    3ca0:	00003285 	.word	0x00003285

00003ca4 <SERCOM1_3_Handler>:
{
    3ca4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3ca6:	4b02      	ldr	r3, [pc, #8]	; (3cb0 <SERCOM1_3_Handler+0xc>)
    3ca8:	6858      	ldr	r0, [r3, #4]
    3caa:	4b02      	ldr	r3, [pc, #8]	; (3cb4 <SERCOM1_3_Handler+0x10>)
    3cac:	4798      	blx	r3
    3cae:	bd08      	pop	{r3, pc}
    3cb0:	2000094c 	.word	0x2000094c
    3cb4:	00003285 	.word	0x00003285

00003cb8 <SERCOM2_0_Handler>:
{
    3cb8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3cba:	4b02      	ldr	r3, [pc, #8]	; (3cc4 <SERCOM2_0_Handler+0xc>)
    3cbc:	6898      	ldr	r0, [r3, #8]
    3cbe:	4b02      	ldr	r3, [pc, #8]	; (3cc8 <SERCOM2_0_Handler+0x10>)
    3cc0:	4798      	blx	r3
    3cc2:	bd08      	pop	{r3, pc}
    3cc4:	2000094c 	.word	0x2000094c
    3cc8:	00003285 	.word	0x00003285

00003ccc <SERCOM2_1_Handler>:
{
    3ccc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3cce:	4b02      	ldr	r3, [pc, #8]	; (3cd8 <SERCOM2_1_Handler+0xc>)
    3cd0:	6898      	ldr	r0, [r3, #8]
    3cd2:	4b02      	ldr	r3, [pc, #8]	; (3cdc <SERCOM2_1_Handler+0x10>)
    3cd4:	4798      	blx	r3
    3cd6:	bd08      	pop	{r3, pc}
    3cd8:	2000094c 	.word	0x2000094c
    3cdc:	00003285 	.word	0x00003285

00003ce0 <SERCOM2_2_Handler>:
{
    3ce0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3ce2:	4b02      	ldr	r3, [pc, #8]	; (3cec <SERCOM2_2_Handler+0xc>)
    3ce4:	6898      	ldr	r0, [r3, #8]
    3ce6:	4b02      	ldr	r3, [pc, #8]	; (3cf0 <SERCOM2_2_Handler+0x10>)
    3ce8:	4798      	blx	r3
    3cea:	bd08      	pop	{r3, pc}
    3cec:	2000094c 	.word	0x2000094c
    3cf0:	00003285 	.word	0x00003285

00003cf4 <SERCOM2_3_Handler>:
{
    3cf4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    3cf6:	4b02      	ldr	r3, [pc, #8]	; (3d00 <SERCOM2_3_Handler+0xc>)
    3cf8:	6898      	ldr	r0, [r3, #8]
    3cfa:	4b02      	ldr	r3, [pc, #8]	; (3d04 <SERCOM2_3_Handler+0x10>)
    3cfc:	4798      	blx	r3
    3cfe:	bd08      	pop	{r3, pc}
    3d00:	2000094c 	.word	0x2000094c
    3d04:	00003285 	.word	0x00003285

00003d08 <SERCOM3_0_Handler>:
{
    3d08:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3d0a:	4b02      	ldr	r3, [pc, #8]	; (3d14 <SERCOM3_0_Handler+0xc>)
    3d0c:	68d8      	ldr	r0, [r3, #12]
    3d0e:	4b02      	ldr	r3, [pc, #8]	; (3d18 <SERCOM3_0_Handler+0x10>)
    3d10:	4798      	blx	r3
    3d12:	bd08      	pop	{r3, pc}
    3d14:	2000094c 	.word	0x2000094c
    3d18:	0000340f 	.word	0x0000340f

00003d1c <SERCOM3_1_Handler>:
{
    3d1c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3d1e:	4b02      	ldr	r3, [pc, #8]	; (3d28 <SERCOM3_1_Handler+0xc>)
    3d20:	68d8      	ldr	r0, [r3, #12]
    3d22:	4b02      	ldr	r3, [pc, #8]	; (3d2c <SERCOM3_1_Handler+0x10>)
    3d24:	4798      	blx	r3
    3d26:	bd08      	pop	{r3, pc}
    3d28:	2000094c 	.word	0x2000094c
    3d2c:	0000340f 	.word	0x0000340f

00003d30 <SERCOM3_2_Handler>:
{
    3d30:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3d32:	4b02      	ldr	r3, [pc, #8]	; (3d3c <SERCOM3_2_Handler+0xc>)
    3d34:	68d8      	ldr	r0, [r3, #12]
    3d36:	4b02      	ldr	r3, [pc, #8]	; (3d40 <SERCOM3_2_Handler+0x10>)
    3d38:	4798      	blx	r3
    3d3a:	bd08      	pop	{r3, pc}
    3d3c:	2000094c 	.word	0x2000094c
    3d40:	0000340f 	.word	0x0000340f

00003d44 <SERCOM3_3_Handler>:
{
    3d44:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3d46:	4b02      	ldr	r3, [pc, #8]	; (3d50 <SERCOM3_3_Handler+0xc>)
    3d48:	68d8      	ldr	r0, [r3, #12]
    3d4a:	4b02      	ldr	r3, [pc, #8]	; (3d54 <SERCOM3_3_Handler+0x10>)
    3d4c:	4798      	blx	r3
    3d4e:	bd08      	pop	{r3, pc}
    3d50:	2000094c 	.word	0x2000094c
    3d54:	0000340f 	.word	0x0000340f

00003d58 <SERCOM4_0_Handler>:
{
    3d58:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3d5a:	4b02      	ldr	r3, [pc, #8]	; (3d64 <SERCOM4_0_Handler+0xc>)
    3d5c:	6918      	ldr	r0, [r3, #16]
    3d5e:	4b02      	ldr	r3, [pc, #8]	; (3d68 <SERCOM4_0_Handler+0x10>)
    3d60:	4798      	blx	r3
    3d62:	bd08      	pop	{r3, pc}
    3d64:	2000094c 	.word	0x2000094c
    3d68:	00003285 	.word	0x00003285

00003d6c <SERCOM4_1_Handler>:
{
    3d6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3d6e:	4b02      	ldr	r3, [pc, #8]	; (3d78 <SERCOM4_1_Handler+0xc>)
    3d70:	6918      	ldr	r0, [r3, #16]
    3d72:	4b02      	ldr	r3, [pc, #8]	; (3d7c <SERCOM4_1_Handler+0x10>)
    3d74:	4798      	blx	r3
    3d76:	bd08      	pop	{r3, pc}
    3d78:	2000094c 	.word	0x2000094c
    3d7c:	00003285 	.word	0x00003285

00003d80 <SERCOM4_2_Handler>:
{
    3d80:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3d82:	4b02      	ldr	r3, [pc, #8]	; (3d8c <SERCOM4_2_Handler+0xc>)
    3d84:	6918      	ldr	r0, [r3, #16]
    3d86:	4b02      	ldr	r3, [pc, #8]	; (3d90 <SERCOM4_2_Handler+0x10>)
    3d88:	4798      	blx	r3
    3d8a:	bd08      	pop	{r3, pc}
    3d8c:	2000094c 	.word	0x2000094c
    3d90:	00003285 	.word	0x00003285

00003d94 <SERCOM4_3_Handler>:
{
    3d94:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3d96:	4b02      	ldr	r3, [pc, #8]	; (3da0 <SERCOM4_3_Handler+0xc>)
    3d98:	6918      	ldr	r0, [r3, #16]
    3d9a:	4b02      	ldr	r3, [pc, #8]	; (3da4 <SERCOM4_3_Handler+0x10>)
    3d9c:	4798      	blx	r3
    3d9e:	bd08      	pop	{r3, pc}
    3da0:	2000094c 	.word	0x2000094c
    3da4:	00003285 	.word	0x00003285

00003da8 <SERCOM5_0_Handler>:
{
    3da8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3daa:	4b02      	ldr	r3, [pc, #8]	; (3db4 <SERCOM5_0_Handler+0xc>)
    3dac:	6958      	ldr	r0, [r3, #20]
    3dae:	4b02      	ldr	r3, [pc, #8]	; (3db8 <SERCOM5_0_Handler+0x10>)
    3db0:	4798      	blx	r3
    3db2:	bd08      	pop	{r3, pc}
    3db4:	2000094c 	.word	0x2000094c
    3db8:	000036f1 	.word	0x000036f1

00003dbc <SERCOM5_1_Handler>:
{
    3dbc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3dbe:	4b02      	ldr	r3, [pc, #8]	; (3dc8 <SERCOM5_1_Handler+0xc>)
    3dc0:	6958      	ldr	r0, [r3, #20]
    3dc2:	4b02      	ldr	r3, [pc, #8]	; (3dcc <SERCOM5_1_Handler+0x10>)
    3dc4:	4798      	blx	r3
    3dc6:	bd08      	pop	{r3, pc}
    3dc8:	2000094c 	.word	0x2000094c
    3dcc:	000036f1 	.word	0x000036f1

00003dd0 <SERCOM5_2_Handler>:
{
    3dd0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3dd2:	4b02      	ldr	r3, [pc, #8]	; (3ddc <SERCOM5_2_Handler+0xc>)
    3dd4:	6958      	ldr	r0, [r3, #20]
    3dd6:	4b02      	ldr	r3, [pc, #8]	; (3de0 <SERCOM5_2_Handler+0x10>)
    3dd8:	4798      	blx	r3
    3dda:	bd08      	pop	{r3, pc}
    3ddc:	2000094c 	.word	0x2000094c
    3de0:	000036f1 	.word	0x000036f1

00003de4 <SERCOM5_3_Handler>:
{
    3de4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3de6:	4b02      	ldr	r3, [pc, #8]	; (3df0 <SERCOM5_3_Handler+0xc>)
    3de8:	6958      	ldr	r0, [r3, #20]
    3dea:	4b02      	ldr	r3, [pc, #8]	; (3df4 <SERCOM5_3_Handler+0x10>)
    3dec:	4798      	blx	r3
    3dee:	bd08      	pop	{r3, pc}
    3df0:	2000094c 	.word	0x2000094c
    3df4:	000036f1 	.word	0x000036f1

00003df8 <SERCOM6_0_Handler>:
{
    3df8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3dfa:	4b02      	ldr	r3, [pc, #8]	; (3e04 <SERCOM6_0_Handler+0xc>)
    3dfc:	6998      	ldr	r0, [r3, #24]
    3dfe:	4b02      	ldr	r3, [pc, #8]	; (3e08 <SERCOM6_0_Handler+0x10>)
    3e00:	4798      	blx	r3
    3e02:	bd08      	pop	{r3, pc}
    3e04:	2000094c 	.word	0x2000094c
    3e08:	00003285 	.word	0x00003285

00003e0c <SERCOM6_1_Handler>:
{
    3e0c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3e0e:	4b02      	ldr	r3, [pc, #8]	; (3e18 <SERCOM6_1_Handler+0xc>)
    3e10:	6998      	ldr	r0, [r3, #24]
    3e12:	4b02      	ldr	r3, [pc, #8]	; (3e1c <SERCOM6_1_Handler+0x10>)
    3e14:	4798      	blx	r3
    3e16:	bd08      	pop	{r3, pc}
    3e18:	2000094c 	.word	0x2000094c
    3e1c:	00003285 	.word	0x00003285

00003e20 <SERCOM6_2_Handler>:
{
    3e20:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3e22:	4b02      	ldr	r3, [pc, #8]	; (3e2c <SERCOM6_2_Handler+0xc>)
    3e24:	6998      	ldr	r0, [r3, #24]
    3e26:	4b02      	ldr	r3, [pc, #8]	; (3e30 <SERCOM6_2_Handler+0x10>)
    3e28:	4798      	blx	r3
    3e2a:	bd08      	pop	{r3, pc}
    3e2c:	2000094c 	.word	0x2000094c
    3e30:	00003285 	.word	0x00003285

00003e34 <SERCOM6_3_Handler>:
{
    3e34:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3e36:	4b02      	ldr	r3, [pc, #8]	; (3e40 <SERCOM6_3_Handler+0xc>)
    3e38:	6998      	ldr	r0, [r3, #24]
    3e3a:	4b02      	ldr	r3, [pc, #8]	; (3e44 <SERCOM6_3_Handler+0x10>)
    3e3c:	4798      	blx	r3
    3e3e:	bd08      	pop	{r3, pc}
    3e40:	2000094c 	.word	0x2000094c
    3e44:	00003285 	.word	0x00003285

00003e48 <_spi_m_sync_init>:
{
    3e48:	b570      	push	{r4, r5, r6, lr}
    3e4a:	4606      	mov	r6, r0
    3e4c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3e4e:	4608      	mov	r0, r1
    3e50:	4b5d      	ldr	r3, [pc, #372]	; (3fc8 <_spi_m_sync_init+0x180>)
    3e52:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3e54:	2803      	cmp	r0, #3
    3e56:	d00c      	beq.n	3e72 <_spi_m_sync_init+0x2a>
    3e58:	2807      	cmp	r0, #7
    3e5a:	bf08      	it	eq
    3e5c:	2301      	moveq	r3, #1
    3e5e:	d009      	beq.n	3e74 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    3e60:	2e00      	cmp	r6, #0
    3e62:	f000 809f 	beq.w	3fa4 <_spi_m_sync_init+0x15c>
    3e66:	2c00      	cmp	r4, #0
    3e68:	f040 80a5 	bne.w	3fb6 <_spi_m_sync_init+0x16e>
	return NULL;
    3e6c:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    3e6e:	2000      	movs	r0, #0
    3e70:	e009      	b.n	3e86 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    3e72:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3e74:	4d55      	ldr	r5, [pc, #340]	; (3fcc <_spi_m_sync_init+0x184>)
    3e76:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    3e7a:	441d      	add	r5, r3
	ASSERT(dev && hw);
    3e7c:	2e00      	cmp	r6, #0
    3e7e:	d0f6      	beq.n	3e6e <_spi_m_sync_init+0x26>
    3e80:	2001      	movs	r0, #1
    3e82:	2c00      	cmp	r4, #0
    3e84:	d0f3      	beq.n	3e6e <_spi_m_sync_init+0x26>
    3e86:	f640 2291 	movw	r2, #2705	; 0xa91
    3e8a:	4951      	ldr	r1, [pc, #324]	; (3fd0 <_spi_m_sync_init+0x188>)
    3e8c:	4b51      	ldr	r3, [pc, #324]	; (3fd4 <_spi_m_sync_init+0x18c>)
    3e8e:	4798      	blx	r3
	if (regs == NULL) {
    3e90:	2d00      	cmp	r5, #0
    3e92:	f000 8084 	beq.w	3f9e <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3e96:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3e98:	f013 0f01 	tst.w	r3, #1
    3e9c:	d11d      	bne.n	3eda <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3e9e:	682b      	ldr	r3, [r5, #0]
    3ea0:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ea4:	69e3      	ldr	r3, [r4, #28]
    3ea6:	f013 0f03 	tst.w	r3, #3
    3eaa:	d1fb      	bne.n	3ea4 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3eac:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3eae:	f013 0f02 	tst.w	r3, #2
    3eb2:	d00b      	beq.n	3ecc <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3eb4:	6823      	ldr	r3, [r4, #0]
    3eb6:	f023 0302 	bic.w	r3, r3, #2
    3eba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ebc:	69e3      	ldr	r3, [r4, #28]
    3ebe:	f013 0f03 	tst.w	r3, #3
    3ec2:	d1fb      	bne.n	3ebc <_spi_m_sync_init+0x74>
    3ec4:	69e3      	ldr	r3, [r4, #28]
    3ec6:	f013 0f02 	tst.w	r3, #2
    3eca:	d1fb      	bne.n	3ec4 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3ecc:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3ed0:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ed2:	69e3      	ldr	r3, [r4, #28]
    3ed4:	f013 0f03 	tst.w	r3, #3
    3ed8:	d1fb      	bne.n	3ed2 <_spi_m_sync_init+0x8a>
    3eda:	69e3      	ldr	r3, [r4, #28]
    3edc:	f013 0f01 	tst.w	r3, #1
    3ee0:	d1fb      	bne.n	3eda <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    3ee2:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3ee4:	682b      	ldr	r3, [r5, #0]
    3ee6:	f003 031c 	and.w	r3, r3, #28
    3eea:	2b08      	cmp	r3, #8
    3eec:	d02e      	beq.n	3f4c <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    3eee:	f640 1276 	movw	r2, #2422	; 0x976
    3ef2:	4937      	ldr	r1, [pc, #220]	; (3fd0 <_spi_m_sync_init+0x188>)
    3ef4:	1c20      	adds	r0, r4, #0
    3ef6:	bf18      	it	ne
    3ef8:	2001      	movne	r0, #1
    3efa:	4b36      	ldr	r3, [pc, #216]	; (3fd4 <_spi_m_sync_init+0x18c>)
    3efc:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3efe:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3f00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3f04:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3f08:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f0a:	69e3      	ldr	r3, [r4, #28]
    3f0c:	f013 0f03 	tst.w	r3, #3
    3f10:	d1fb      	bne.n	3f0a <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    3f12:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3f14:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3f18:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3f20:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f22:	69e3      	ldr	r3, [r4, #28]
    3f24:	f013 0f17 	tst.w	r3, #23
    3f28:	d1fb      	bne.n	3f22 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3f2a:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3f2c:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3f2e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3f30:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3f34:	686b      	ldr	r3, [r5, #4]
    3f36:	f003 0307 	and.w	r3, r3, #7
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	bf0c      	ite	eq
    3f3e:	2301      	moveq	r3, #1
    3f40:	2302      	movne	r3, #2
    3f42:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    3f44:	89eb      	ldrh	r3, [r5, #14]
    3f46:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    3f48:	2000      	movs	r0, #0
    3f4a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    3f4c:	f640 128a 	movw	r2, #2442	; 0x98a
    3f50:	491f      	ldr	r1, [pc, #124]	; (3fd0 <_spi_m_sync_init+0x188>)
    3f52:	1c20      	adds	r0, r4, #0
    3f54:	bf18      	it	ne
    3f56:	2001      	movne	r0, #1
    3f58:	4b1e      	ldr	r3, [pc, #120]	; (3fd4 <_spi_m_sync_init+0x18c>)
    3f5a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3f5c:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    3f5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3f62:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3f66:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f68:	69e3      	ldr	r3, [r4, #28]
    3f6a:	f013 0f03 	tst.w	r3, #3
    3f6e:	d1fb      	bne.n	3f68 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3f70:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3f72:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    3f76:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    3f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f7e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3f82:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3f84:	69e3      	ldr	r3, [r4, #28]
    3f86:	f013 0f17 	tst.w	r3, #23
    3f8a:	d1fb      	bne.n	3f84 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3f8c:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3f8e:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3f90:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3f92:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3f96:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3f98:	2b00      	cmp	r3, #0
    3f9a:	d1fc      	bne.n	3f96 <_spi_m_sync_init+0x14e>
    3f9c:	e7ca      	b.n	3f34 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    3f9e:	f06f 000c 	mvn.w	r0, #12
    3fa2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3fa4:	f640 2291 	movw	r2, #2705	; 0xa91
    3fa8:	4909      	ldr	r1, [pc, #36]	; (3fd0 <_spi_m_sync_init+0x188>)
    3faa:	2000      	movs	r0, #0
    3fac:	4b09      	ldr	r3, [pc, #36]	; (3fd4 <_spi_m_sync_init+0x18c>)
    3fae:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3fb0:	f06f 000c 	mvn.w	r0, #12
    3fb4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3fb6:	f640 2291 	movw	r2, #2705	; 0xa91
    3fba:	4905      	ldr	r1, [pc, #20]	; (3fd0 <_spi_m_sync_init+0x188>)
    3fbc:	2001      	movs	r0, #1
    3fbe:	4b05      	ldr	r3, [pc, #20]	; (3fd4 <_spi_m_sync_init+0x18c>)
    3fc0:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3fc2:	f06f 000c 	mvn.w	r0, #12
    3fc6:	bd70      	pop	{r4, r5, r6, pc}
    3fc8:	00003241 	.word	0x00003241
    3fcc:	0000afd0 	.word	0x0000afd0
    3fd0:	0000aff4 	.word	0x0000aff4
    3fd4:	00002481 	.word	0x00002481

00003fd8 <_spi_m_async_init>:
{
    3fd8:	b538      	push	{r3, r4, r5, lr}
    3fda:	4604      	mov	r4, r0
    3fdc:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    3fde:	4b15      	ldr	r3, [pc, #84]	; (4034 <_spi_m_async_init+0x5c>)
    3fe0:	4798      	blx	r3
	if (rc < 0) {
    3fe2:	2800      	cmp	r0, #0
    3fe4:	db24      	blt.n	4030 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    3fe6:	4621      	mov	r1, r4
    3fe8:	4628      	mov	r0, r5
    3fea:	4b13      	ldr	r3, [pc, #76]	; (4038 <_spi_m_async_init+0x60>)
    3fec:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    3fee:	2300      	movs	r3, #0
    3ff0:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    3ff2:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    3ff4:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    3ff6:	4628      	mov	r0, r5
    3ff8:	4b10      	ldr	r3, [pc, #64]	; (403c <_spi_m_async_init+0x64>)
    3ffa:	4798      	blx	r3
    3ffc:	1d01      	adds	r1, r0, #4
    3ffe:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4000:	2401      	movs	r4, #1
    4002:	f000 021f 	and.w	r2, r0, #31
    4006:	fa04 f202 	lsl.w	r2, r4, r2
    400a:	0943      	lsrs	r3, r0, #5
    400c:	009b      	lsls	r3, r3, #2
    400e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4012:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    401a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    401e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4022:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    4026:	3001      	adds	r0, #1
    4028:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    402a:	4281      	cmp	r1, r0
    402c:	d1e9      	bne.n	4002 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    402e:	2000      	movs	r0, #0
}
    4030:	bd38      	pop	{r3, r4, r5, pc}
    4032:	bf00      	nop
    4034:	00003e49 	.word	0x00003e49
    4038:	000032f5 	.word	0x000032f5
    403c:	00003365 	.word	0x00003365

00004040 <_spi_m_async_enable>:
{
    4040:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    4042:	4604      	mov	r4, r0
    4044:	b160      	cbz	r0, 4060 <_spi_m_async_enable+0x20>
    4046:	6800      	ldr	r0, [r0, #0]
    4048:	3000      	adds	r0, #0
    404a:	bf18      	it	ne
    404c:	2001      	movne	r0, #1
    404e:	f640 22fe 	movw	r2, #2814	; 0xafe
    4052:	4904      	ldr	r1, [pc, #16]	; (4064 <_spi_m_async_enable+0x24>)
    4054:	4b04      	ldr	r3, [pc, #16]	; (4068 <_spi_m_async_enable+0x28>)
    4056:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
    4058:	6820      	ldr	r0, [r4, #0]
    405a:	4b04      	ldr	r3, [pc, #16]	; (406c <_spi_m_async_enable+0x2c>)
    405c:	4798      	blx	r3
}
    405e:	bd10      	pop	{r4, pc}
    4060:	2000      	movs	r0, #0
    4062:	e7f4      	b.n	404e <_spi_m_async_enable+0xe>
    4064:	0000aff4 	.word	0x0000aff4
    4068:	00002481 	.word	0x00002481
    406c:	0000339d 	.word	0x0000339d

00004070 <_spi_m_async_set_mode>:
{
    4070:	b538      	push	{r3, r4, r5, lr}
    4072:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    4074:	4604      	mov	r4, r0
    4076:	b168      	cbz	r0, 4094 <_spi_m_async_set_mode+0x24>
    4078:	6800      	ldr	r0, [r0, #0]
    407a:	3000      	adds	r0, #0
    407c:	bf18      	it	ne
    407e:	2001      	movne	r0, #1
    4080:	f640 322f 	movw	r2, #2863	; 0xb2f
    4084:	4904      	ldr	r1, [pc, #16]	; (4098 <_spi_m_async_set_mode+0x28>)
    4086:	4b05      	ldr	r3, [pc, #20]	; (409c <_spi_m_async_set_mode+0x2c>)
    4088:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
    408a:	4629      	mov	r1, r5
    408c:	6820      	ldr	r0, [r4, #0]
    408e:	4b04      	ldr	r3, [pc, #16]	; (40a0 <_spi_m_async_set_mode+0x30>)
    4090:	4798      	blx	r3
}
    4092:	bd38      	pop	{r3, r4, r5, pc}
    4094:	2000      	movs	r0, #0
    4096:	e7f3      	b.n	4080 <_spi_m_async_set_mode+0x10>
    4098:	0000aff4 	.word	0x0000aff4
    409c:	00002481 	.word	0x00002481
    40a0:	000033dd 	.word	0x000033dd

000040a4 <_spi_m_async_enable_tx>:
{
    40a4:	b538      	push	{r3, r4, r5, lr}
    40a6:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    40a8:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    40aa:	b160      	cbz	r0, 40c6 <_spi_m_async_enable_tx+0x22>
    40ac:	1c20      	adds	r0, r4, #0
    40ae:	bf18      	it	ne
    40b0:	2001      	movne	r0, #1
    40b2:	f640 4221 	movw	r2, #3105	; 0xc21
    40b6:	4906      	ldr	r1, [pc, #24]	; (40d0 <_spi_m_async_enable_tx+0x2c>)
    40b8:	4b06      	ldr	r3, [pc, #24]	; (40d4 <_spi_m_async_enable_tx+0x30>)
    40ba:	4798      	blx	r3
	if (state) {
    40bc:	b92d      	cbnz	r5, 40ca <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    40be:	2301      	movs	r3, #1
    40c0:	7523      	strb	r3, [r4, #20]
}
    40c2:	2000      	movs	r0, #0
    40c4:	bd38      	pop	{r3, r4, r5, pc}
    40c6:	2000      	movs	r0, #0
    40c8:	e7f3      	b.n	40b2 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    40ca:	2301      	movs	r3, #1
    40cc:	75a3      	strb	r3, [r4, #22]
    40ce:	e7f8      	b.n	40c2 <_spi_m_async_enable_tx+0x1e>
    40d0:	0000aff4 	.word	0x0000aff4
    40d4:	00002481 	.word	0x00002481

000040d8 <_spi_m_async_enable_rx>:
{
    40d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40da:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    40dc:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    40de:	4e0c      	ldr	r6, [pc, #48]	; (4110 <_spi_m_async_enable_rx+0x38>)
    40e0:	f640 4235 	movw	r2, #3125	; 0xc35
    40e4:	4631      	mov	r1, r6
    40e6:	3000      	adds	r0, #0
    40e8:	bf18      	it	ne
    40ea:	2001      	movne	r0, #1
    40ec:	4d09      	ldr	r5, [pc, #36]	; (4114 <_spi_m_async_enable_rx+0x3c>)
    40ee:	47a8      	blx	r5
	ASSERT(hw);
    40f0:	f640 4236 	movw	r2, #3126	; 0xc36
    40f4:	4631      	mov	r1, r6
    40f6:	1c20      	adds	r0, r4, #0
    40f8:	bf18      	it	ne
    40fa:	2001      	movne	r0, #1
    40fc:	47a8      	blx	r5
	if (state) {
    40fe:	b91f      	cbnz	r7, 4108 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    4100:	2304      	movs	r3, #4
    4102:	7523      	strb	r3, [r4, #20]
}
    4104:	2000      	movs	r0, #0
    4106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    4108:	2304      	movs	r3, #4
    410a:	75a3      	strb	r3, [r4, #22]
    410c:	e7fa      	b.n	4104 <_spi_m_async_enable_rx+0x2c>
    410e:	bf00      	nop
    4110:	0000aff4 	.word	0x0000aff4
    4114:	00002481 	.word	0x00002481

00004118 <_spi_m_async_enable_tx_complete>:
{
    4118:	b538      	push	{r3, r4, r5, lr}
    411a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    411c:	4604      	mov	r4, r0
    411e:	b170      	cbz	r0, 413e <_spi_m_async_enable_tx_complete+0x26>
    4120:	6800      	ldr	r0, [r0, #0]
    4122:	3000      	adds	r0, #0
    4124:	bf18      	it	ne
    4126:	2001      	movne	r0, #1
    4128:	f640 4248 	movw	r2, #3144	; 0xc48
    412c:	4907      	ldr	r1, [pc, #28]	; (414c <_spi_m_async_enable_tx_complete+0x34>)
    412e:	4b08      	ldr	r3, [pc, #32]	; (4150 <_spi_m_async_enable_tx_complete+0x38>)
    4130:	4798      	blx	r3
	if (state) {
    4132:	b935      	cbnz	r5, 4142 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    4134:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    4136:	2202      	movs	r2, #2
    4138:	751a      	strb	r2, [r3, #20]
}
    413a:	2000      	movs	r0, #0
    413c:	bd38      	pop	{r3, r4, r5, pc}
    413e:	2000      	movs	r0, #0
    4140:	e7f2      	b.n	4128 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    4142:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    4144:	2202      	movs	r2, #2
    4146:	759a      	strb	r2, [r3, #22]
    4148:	e7f7      	b.n	413a <_spi_m_async_enable_tx_complete+0x22>
    414a:	bf00      	nop
    414c:	0000aff4 	.word	0x0000aff4
    4150:	00002481 	.word	0x00002481

00004154 <_spi_m_async_write_one>:
{
    4154:	b538      	push	{r3, r4, r5, lr}
    4156:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    4158:	4604      	mov	r4, r0
    415a:	b160      	cbz	r0, 4176 <_spi_m_async_write_one+0x22>
    415c:	6800      	ldr	r0, [r0, #0]
    415e:	3000      	adds	r0, #0
    4160:	bf18      	it	ne
    4162:	2001      	movne	r0, #1
    4164:	f640 425a 	movw	r2, #3162	; 0xc5a
    4168:	4904      	ldr	r1, [pc, #16]	; (417c <_spi_m_async_write_one+0x28>)
    416a:	4b05      	ldr	r3, [pc, #20]	; (4180 <_spi_m_async_write_one+0x2c>)
    416c:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    416e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    4170:	629d      	str	r5, [r3, #40]	; 0x28
}
    4172:	2000      	movs	r0, #0
    4174:	bd38      	pop	{r3, r4, r5, pc}
    4176:	2000      	movs	r0, #0
    4178:	e7f4      	b.n	4164 <_spi_m_async_write_one+0x10>
    417a:	bf00      	nop
    417c:	0000aff4 	.word	0x0000aff4
    4180:	00002481 	.word	0x00002481

00004184 <_spi_m_async_read_one>:
{
    4184:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    4186:	4604      	mov	r4, r0
    4188:	b160      	cbz	r0, 41a4 <_spi_m_async_read_one+0x20>
    418a:	6800      	ldr	r0, [r0, #0]
    418c:	3000      	adds	r0, #0
    418e:	bf18      	it	ne
    4190:	2001      	movne	r0, #1
    4192:	f640 4275 	movw	r2, #3189	; 0xc75
    4196:	4904      	ldr	r1, [pc, #16]	; (41a8 <_spi_m_async_read_one+0x24>)
    4198:	4b04      	ldr	r3, [pc, #16]	; (41ac <_spi_m_async_read_one+0x28>)
    419a:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    419c:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    419e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    41a0:	b280      	uxth	r0, r0
    41a2:	bd10      	pop	{r4, pc}
    41a4:	2000      	movs	r0, #0
    41a6:	e7f4      	b.n	4192 <_spi_m_async_read_one+0xe>
    41a8:	0000aff4 	.word	0x0000aff4
    41ac:	00002481 	.word	0x00002481

000041b0 <_spi_m_async_register_callback>:
{
    41b0:	b570      	push	{r4, r5, r6, lr}
    41b2:	460d      	mov	r5, r1
    41b4:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    41b6:	4604      	mov	r4, r0
    41b8:	b168      	cbz	r0, 41d6 <_spi_m_async_register_callback+0x26>
    41ba:	2903      	cmp	r1, #3
    41bc:	bf8c      	ite	hi
    41be:	2000      	movhi	r0, #0
    41c0:	2001      	movls	r0, #1
    41c2:	f640 428e 	movw	r2, #3214	; 0xc8e
    41c6:	4905      	ldr	r1, [pc, #20]	; (41dc <_spi_m_async_register_callback+0x2c>)
    41c8:	4b05      	ldr	r3, [pc, #20]	; (41e0 <_spi_m_async_register_callback+0x30>)
    41ca:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    41cc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    41d0:	60a6      	str	r6, [r4, #8]
}
    41d2:	2000      	movs	r0, #0
    41d4:	bd70      	pop	{r4, r5, r6, pc}
    41d6:	2000      	movs	r0, #0
    41d8:	e7f3      	b.n	41c2 <_spi_m_async_register_callback+0x12>
    41da:	bf00      	nop
    41dc:	0000aff4 	.word	0x0000aff4
    41e0:	00002481 	.word	0x00002481

000041e4 <_spi_m_async_set_irq_state>:
{
    41e4:	b570      	push	{r4, r5, r6, lr}
    41e6:	460c      	mov	r4, r1
    41e8:	4615      	mov	r5, r2
	ASSERT(device);
    41ea:	4606      	mov	r6, r0
    41ec:	f640 42cf 	movw	r2, #3279	; 0xccf
    41f0:	4908      	ldr	r1, [pc, #32]	; (4214 <_spi_m_async_set_irq_state+0x30>)
    41f2:	3000      	adds	r0, #0
    41f4:	bf18      	it	ne
    41f6:	2001      	movne	r0, #1
    41f8:	4b07      	ldr	r3, [pc, #28]	; (4218 <_spi_m_async_set_irq_state+0x34>)
    41fa:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
    41fc:	2c03      	cmp	r4, #3
    41fe:	d000      	beq.n	4202 <_spi_m_async_set_irq_state+0x1e>
    4200:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    4202:	6833      	ldr	r3, [r6, #0]
	if (value == 0x0) {
    4204:	b115      	cbz	r5, 420c <_spi_m_async_set_irq_state+0x28>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    4206:	2280      	movs	r2, #128	; 0x80
    4208:	759a      	strb	r2, [r3, #22]
}
    420a:	e7f9      	b.n	4200 <_spi_m_async_set_irq_state+0x1c>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    420c:	2280      	movs	r2, #128	; 0x80
    420e:	751a      	strb	r2, [r3, #20]
    4210:	bd70      	pop	{r4, r5, r6, pc}
    4212:	bf00      	nop
    4214:	0000aff4 	.word	0x0000aff4
    4218:	00002481 	.word	0x00002481

0000421c <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4220:	4605      	mov	r5, r0
    4222:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    4224:	4608      	mov	r0, r1
    4226:	4b52      	ldr	r3, [pc, #328]	; (4370 <_spi_m_dma_init+0x154>)
    4228:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    422a:	2803      	cmp	r0, #3
    422c:	d00c      	beq.n	4248 <_spi_m_dma_init+0x2c>
    422e:	2807      	cmp	r0, #7
    4230:	bf08      	it	eq
    4232:	2301      	moveq	r3, #1
    4234:	d009      	beq.n	424a <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    4236:	2d00      	cmp	r5, #0
    4238:	f000 8086 	beq.w	4348 <_spi_m_dma_init+0x12c>
    423c:	2c00      	cmp	r4, #0
    423e:	f040 808d 	bne.w	435c <_spi_m_dma_init+0x140>
	return NULL;
    4242:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    4244:	2000      	movs	r0, #0
    4246:	e009      	b.n	425c <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    4248:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    424a:	4e4a      	ldr	r6, [pc, #296]	; (4374 <_spi_m_dma_init+0x158>)
    424c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    4250:	441e      	add	r6, r3
	ASSERT(dev && hw);
    4252:	2d00      	cmp	r5, #0
    4254:	d0f6      	beq.n	4244 <_spi_m_dma_init+0x28>
    4256:	2001      	movs	r0, #1
    4258:	2c00      	cmp	r4, #0
    425a:	d0f3      	beq.n	4244 <_spi_m_dma_init+0x28>
    425c:	f640 52c3 	movw	r2, #3523	; 0xdc3
    4260:	4945      	ldr	r1, [pc, #276]	; (4378 <_spi_m_dma_init+0x15c>)
    4262:	4b46      	ldr	r3, [pc, #280]	; (437c <_spi_m_dma_init+0x160>)
    4264:	4798      	blx	r3

	if (regs == NULL) {
    4266:	2e00      	cmp	r6, #0
    4268:	d06a      	beq.n	4340 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    426a:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    426c:	f013 0f01 	tst.w	r3, #1
    4270:	d11d      	bne.n	42ae <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    4272:	6833      	ldr	r3, [r6, #0]
    4274:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4278:	69e3      	ldr	r3, [r4, #28]
    427a:	f013 0f03 	tst.w	r3, #3
    427e:	d1fb      	bne.n	4278 <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    4280:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    4282:	f013 0f02 	tst.w	r3, #2
    4286:	d00b      	beq.n	42a0 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4288:	6823      	ldr	r3, [r4, #0]
    428a:	f023 0302 	bic.w	r3, r3, #2
    428e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4290:	69e3      	ldr	r3, [r4, #28]
    4292:	f013 0f03 	tst.w	r3, #3
    4296:	d1fb      	bne.n	4290 <_spi_m_dma_init+0x74>
    4298:	69e3      	ldr	r3, [r4, #28]
    429a:	f013 0f02 	tst.w	r3, #2
    429e:	d1fb      	bne.n	4298 <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    42a0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    42a4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    42a6:	69e3      	ldr	r3, [r4, #28]
    42a8:	f013 0f03 	tst.w	r3, #3
    42ac:	d1fb      	bne.n	42a6 <_spi_m_dma_init+0x8a>
    42ae:	69e3      	ldr	r3, [r4, #28]
    42b0:	f013 0f01 	tst.w	r3, #1
    42b4:	d1fb      	bne.n	42ae <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    42b6:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    42b8:	f640 1276 	movw	r2, #2422	; 0x976
    42bc:	492e      	ldr	r1, [pc, #184]	; (4378 <_spi_m_dma_init+0x15c>)
    42be:	1c20      	adds	r0, r4, #0
    42c0:	bf18      	it	ne
    42c2:	2001      	movne	r0, #1
    42c4:	4b2d      	ldr	r3, [pc, #180]	; (437c <_spi_m_dma_init+0x160>)
    42c6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    42c8:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    42ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    42ce:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    42d2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    42d4:	69e3      	ldr	r3, [r4, #28]
    42d6:	f013 0f03 	tst.w	r3, #3
    42da:	d1fb      	bne.n	42d4 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    42dc:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    42de:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    42e2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    42e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    42ea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    42ec:	69e3      	ldr	r3, [r4, #28]
    42ee:	f013 0f17 	tst.w	r3, #23
    42f2:	d1fb      	bne.n	42ec <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    42f4:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    42f6:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    42f8:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    42fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    42fe:	f105 0818 	add.w	r8, r5, #24
    4302:	4620      	mov	r0, r4
    4304:	4b1e      	ldr	r3, [pc, #120]	; (4380 <_spi_m_dma_init+0x164>)
    4306:	4798      	blx	r3
    4308:	4601      	mov	r1, r0
    430a:	4640      	mov	r0, r8
    430c:	4f1d      	ldr	r7, [pc, #116]	; (4384 <_spi_m_dma_init+0x168>)
    430e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    4310:	69ab      	ldr	r3, [r5, #24]
    4312:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    4314:	69ab      	ldr	r3, [r5, #24]
    4316:	4a1c      	ldr	r2, [pc, #112]	; (4388 <_spi_m_dma_init+0x16c>)
    4318:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    431a:	69ab      	ldr	r3, [r5, #24]
    431c:	4e1b      	ldr	r6, [pc, #108]	; (438c <_spi_m_dma_init+0x170>)
    431e:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    4320:	4620      	mov	r0, r4
    4322:	4b1b      	ldr	r3, [pc, #108]	; (4390 <_spi_m_dma_init+0x174>)
    4324:	4798      	blx	r3
    4326:	4601      	mov	r1, r0
    4328:	4640      	mov	r0, r8
    432a:	47b8      	blx	r7
	dev->resource->back                 = dev;
    432c:	69ab      	ldr	r3, [r5, #24]
    432e:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    4330:	69ab      	ldr	r3, [r5, #24]
    4332:	4a18      	ldr	r2, [pc, #96]	; (4394 <_spi_m_dma_init+0x178>)
    4334:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    4336:	69ab      	ldr	r3, [r5, #24]
    4338:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    433a:	2000      	movs	r0, #0
    433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    4340:	f06f 000c 	mvn.w	r0, #12
    4344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    4348:	f640 52c3 	movw	r2, #3523	; 0xdc3
    434c:	490a      	ldr	r1, [pc, #40]	; (4378 <_spi_m_dma_init+0x15c>)
    434e:	2000      	movs	r0, #0
    4350:	4b0a      	ldr	r3, [pc, #40]	; (437c <_spi_m_dma_init+0x160>)
    4352:	4798      	blx	r3
		return ERR_INVALID_ARG;
    4354:	f06f 000c 	mvn.w	r0, #12
    4358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    435c:	f640 52c3 	movw	r2, #3523	; 0xdc3
    4360:	4905      	ldr	r1, [pc, #20]	; (4378 <_spi_m_dma_init+0x15c>)
    4362:	2001      	movs	r0, #1
    4364:	4b05      	ldr	r3, [pc, #20]	; (437c <_spi_m_dma_init+0x160>)
    4366:	4798      	blx	r3
		return ERR_INVALID_ARG;
    4368:	f06f 000c 	mvn.w	r0, #12
    436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4370:	00003241 	.word	0x00003241
    4374:	0000afd0 	.word	0x0000afd0
    4378:	0000aff4 	.word	0x0000aff4
    437c:	00002481 	.word	0x00002481
    4380:	00003471 	.word	0x00003471
    4384:	00002d05 	.word	0x00002d05
    4388:	00003485 	.word	0x00003485
    438c:	0000349d 	.word	0x0000349d
    4390:	0000345d 	.word	0x0000345d
    4394:	00003491 	.word	0x00003491

00004398 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    4398:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    439a:	4604      	mov	r4, r0
    439c:	b160      	cbz	r0, 43b8 <_spi_m_dma_enable+0x20>
    439e:	6800      	ldr	r0, [r0, #0]
    43a0:	3000      	adds	r0, #0
    43a2:	bf18      	it	ne
    43a4:	2001      	movne	r0, #1
    43a6:	f640 52ec 	movw	r2, #3564	; 0xdec
    43aa:	4904      	ldr	r1, [pc, #16]	; (43bc <_spi_m_dma_enable+0x24>)
    43ac:	4b04      	ldr	r3, [pc, #16]	; (43c0 <_spi_m_dma_enable+0x28>)
    43ae:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    43b0:	6820      	ldr	r0, [r4, #0]
    43b2:	4b04      	ldr	r3, [pc, #16]	; (43c4 <_spi_m_dma_enable+0x2c>)
    43b4:	4798      	blx	r3
}
    43b6:	bd10      	pop	{r4, pc}
    43b8:	2000      	movs	r0, #0
    43ba:	e7f4      	b.n	43a6 <_spi_m_dma_enable+0xe>
    43bc:	0000aff4 	.word	0x0000aff4
    43c0:	00002481 	.word	0x00002481
    43c4:	00003379 	.word	0x00003379

000043c8 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    43c8:	b570      	push	{r4, r5, r6, lr}
    43ca:	4605      	mov	r5, r0
    43cc:	4614      	mov	r4, r2
	switch (type) {
    43ce:	2901      	cmp	r1, #1
    43d0:	d00e      	beq.n	43f0 <_spi_m_dma_register_callback+0x28>
    43d2:	b111      	cbz	r1, 43da <_spi_m_dma_register_callback+0x12>
    43d4:	2902      	cmp	r1, #2
    43d6:	d016      	beq.n	4406 <_spi_m_dma_register_callback+0x3e>
    43d8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    43da:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    43dc:	6800      	ldr	r0, [r0, #0]
    43de:	4b13      	ldr	r3, [pc, #76]	; (442c <_spi_m_dma_register_callback+0x64>)
    43e0:	4798      	blx	r3
    43e2:	1c22      	adds	r2, r4, #0
    43e4:	bf18      	it	ne
    43e6:	2201      	movne	r2, #1
    43e8:	2100      	movs	r1, #0
    43ea:	4b11      	ldr	r3, [pc, #68]	; (4430 <_spi_m_dma_register_callback+0x68>)
    43ec:	4798      	blx	r3
		break;
    43ee:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    43f0:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    43f2:	6800      	ldr	r0, [r0, #0]
    43f4:	4b0f      	ldr	r3, [pc, #60]	; (4434 <_spi_m_dma_register_callback+0x6c>)
    43f6:	4798      	blx	r3
    43f8:	1c22      	adds	r2, r4, #0
    43fa:	bf18      	it	ne
    43fc:	2201      	movne	r2, #1
    43fe:	2100      	movs	r1, #0
    4400:	4b0b      	ldr	r3, [pc, #44]	; (4430 <_spi_m_dma_register_callback+0x68>)
    4402:	4798      	blx	r3
		break;
    4404:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    4406:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    4408:	6800      	ldr	r0, [r0, #0]
    440a:	4b0a      	ldr	r3, [pc, #40]	; (4434 <_spi_m_dma_register_callback+0x6c>)
    440c:	4798      	blx	r3
    440e:	3400      	adds	r4, #0
    4410:	bf18      	it	ne
    4412:	2401      	movne	r4, #1
    4414:	4622      	mov	r2, r4
    4416:	2101      	movs	r1, #1
    4418:	4e05      	ldr	r6, [pc, #20]	; (4430 <_spi_m_dma_register_callback+0x68>)
    441a:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    441c:	6828      	ldr	r0, [r5, #0]
    441e:	4b03      	ldr	r3, [pc, #12]	; (442c <_spi_m_dma_register_callback+0x64>)
    4420:	4798      	blx	r3
    4422:	4622      	mov	r2, r4
    4424:	2101      	movs	r1, #1
    4426:	47b0      	blx	r6
    4428:	bd70      	pop	{r4, r5, r6, pc}
    442a:	bf00      	nop
    442c:	0000345d 	.word	0x0000345d
    4430:	00002bdd 	.word	0x00002bdd
    4434:	00003471 	.word	0x00003471

00004438 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    4438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    443c:	4605      	mov	r5, r0
    443e:	4689      	mov	r9, r1
    4440:	4617      	mov	r7, r2
    4442:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    4444:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    4448:	4658      	mov	r0, fp
    444a:	4b46      	ldr	r3, [pc, #280]	; (4564 <_spi_m_dma_transfer+0x12c>)
    444c:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    444e:	2803      	cmp	r0, #3
    4450:	d053      	beq.n	44fa <_spi_m_dma_transfer+0xc2>
    4452:	2807      	cmp	r0, #7
    4454:	bf08      	it	eq
    4456:	2201      	moveq	r2, #1
    4458:	d050      	beq.n	44fc <_spi_m_dma_transfer+0xc4>
	return NULL;
    445a:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    445e:	4658      	mov	r0, fp
    4460:	4b41      	ldr	r3, [pc, #260]	; (4568 <_spi_m_dma_transfer+0x130>)
    4462:	4798      	blx	r3
    4464:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    4466:	4658      	mov	r0, fp
    4468:	4b40      	ldr	r3, [pc, #256]	; (456c <_spi_m_dma_transfer+0x134>)
    446a:	4798      	blx	r3
    446c:	4604      	mov	r4, r0

	if (rxbuf) {
    446e:	2f00      	cmp	r7, #0
    4470:	d04b      	beq.n	450a <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    4472:	2d00      	cmp	r5, #0
    4474:	d047      	beq.n	4506 <_spi_m_dma_transfer+0xce>
    4476:	f11b 0000 	adds.w	r0, fp, #0
    447a:	bf18      	it	ne
    447c:	2001      	movne	r0, #1
    447e:	f640 5236 	movw	r2, #3382	; 0xd36
    4482:	493b      	ldr	r1, [pc, #236]	; (4570 <_spi_m_dma_transfer+0x138>)
    4484:	4b3b      	ldr	r3, [pc, #236]	; (4574 <_spi_m_dma_transfer+0x13c>)
    4486:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    4488:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    448a:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    448c:	f013 0f04 	tst.w	r3, #4
    4490:	d107      	bne.n	44a2 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    4492:	6853      	ldr	r3, [r2, #4]
    4494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4498:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    449a:	69d3      	ldr	r3, [r2, #28]
    449c:	f013 0f17 	tst.w	r3, #23
    44a0:	d1fb      	bne.n	449a <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    44a2:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    44a4:	3128      	adds	r1, #40	; 0x28
    44a6:	4630      	mov	r0, r6
    44a8:	4b33      	ldr	r3, [pc, #204]	; (4578 <_spi_m_dma_transfer+0x140>)
    44aa:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    44ac:	4639      	mov	r1, r7
    44ae:	4630      	mov	r0, r6
    44b0:	4b32      	ldr	r3, [pc, #200]	; (457c <_spi_m_dma_transfer+0x144>)
    44b2:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    44b4:	4641      	mov	r1, r8
    44b6:	4630      	mov	r0, r6
    44b8:	4b31      	ldr	r3, [pc, #196]	; (4580 <_spi_m_dma_transfer+0x148>)
    44ba:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    44bc:	2100      	movs	r1, #0
    44be:	4630      	mov	r0, r6
    44c0:	4b30      	ldr	r3, [pc, #192]	; (4584 <_spi_m_dma_transfer+0x14c>)
    44c2:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    44c4:	f1b9 0f00 	cmp.w	r9, #0
    44c8:	d039      	beq.n	453e <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    44ca:	4649      	mov	r1, r9
    44cc:	4620      	mov	r0, r4
    44ce:	4b2a      	ldr	r3, [pc, #168]	; (4578 <_spi_m_dma_transfer+0x140>)
    44d0:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    44d2:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    44d4:	3128      	adds	r1, #40	; 0x28
    44d6:	4620      	mov	r0, r4
    44d8:	4b28      	ldr	r3, [pc, #160]	; (457c <_spi_m_dma_transfer+0x144>)
    44da:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    44dc:	2101      	movs	r1, #1
    44de:	4620      	mov	r0, r4
    44e0:	4b29      	ldr	r3, [pc, #164]	; (4588 <_spi_m_dma_transfer+0x150>)
    44e2:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    44e4:	4641      	mov	r1, r8
    44e6:	4620      	mov	r0, r4
    44e8:	4b25      	ldr	r3, [pc, #148]	; (4580 <_spi_m_dma_transfer+0x148>)
    44ea:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    44ec:	2100      	movs	r1, #0
    44ee:	4620      	mov	r0, r4
    44f0:	4b24      	ldr	r3, [pc, #144]	; (4584 <_spi_m_dma_transfer+0x14c>)
    44f2:	4798      	blx	r3

	return ERR_NONE;
}
    44f4:	2000      	movs	r0, #0
    44f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    44fa:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    44fc:	4b23      	ldr	r3, [pc, #140]	; (458c <_spi_m_dma_transfer+0x154>)
    44fe:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    4502:	4492      	add	sl, r2
    4504:	e7ab      	b.n	445e <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    4506:	2000      	movs	r0, #0
    4508:	e7b9      	b.n	447e <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    450a:	b1b5      	cbz	r5, 453a <_spi_m_dma_transfer+0x102>
    450c:	f11b 0000 	adds.w	r0, fp, #0
    4510:	bf18      	it	ne
    4512:	2001      	movne	r0, #1
    4514:	f640 523d 	movw	r2, #3389	; 0xd3d
    4518:	4915      	ldr	r1, [pc, #84]	; (4570 <_spi_m_dma_transfer+0x138>)
    451a:	4b16      	ldr	r3, [pc, #88]	; (4574 <_spi_m_dma_transfer+0x13c>)
    451c:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    451e:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    4520:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    4522:	f013 0f04 	tst.w	r3, #4
    4526:	d1cd      	bne.n	44c4 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    4528:	6853      	ldr	r3, [r2, #4]
    452a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    452e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4530:	69d3      	ldr	r3, [r2, #28]
    4532:	f013 0f17 	tst.w	r3, #23
    4536:	d1fb      	bne.n	4530 <_spi_m_dma_transfer+0xf8>
    4538:	e7c4      	b.n	44c4 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    453a:	2000      	movs	r0, #0
    453c:	e7ea      	b.n	4514 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    453e:	f10a 010e 	add.w	r1, sl, #14
    4542:	4620      	mov	r0, r4
    4544:	4b0c      	ldr	r3, [pc, #48]	; (4578 <_spi_m_dma_transfer+0x140>)
    4546:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    4548:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    454a:	3128      	adds	r1, #40	; 0x28
    454c:	4620      	mov	r0, r4
    454e:	4b0b      	ldr	r3, [pc, #44]	; (457c <_spi_m_dma_transfer+0x144>)
    4550:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    4552:	2100      	movs	r1, #0
    4554:	4620      	mov	r0, r4
    4556:	4b0c      	ldr	r3, [pc, #48]	; (4588 <_spi_m_dma_transfer+0x150>)
    4558:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    455a:	4641      	mov	r1, r8
    455c:	4620      	mov	r0, r4
    455e:	4b08      	ldr	r3, [pc, #32]	; (4580 <_spi_m_dma_transfer+0x148>)
    4560:	4798      	blx	r3
    4562:	e7c3      	b.n	44ec <_spi_m_dma_transfer+0xb4>
    4564:	00003241 	.word	0x00003241
    4568:	00003471 	.word	0x00003471
    456c:	0000345d 	.word	0x0000345d
    4570:	0000aff4 	.word	0x0000aff4
    4574:	00002481 	.word	0x00002481
    4578:	00002c41 	.word	0x00002c41
    457c:	00002c31 	.word	0x00002c31
    4580:	00002c6d 	.word	0x00002c6d
    4584:	00002cc5 	.word	0x00002cc5
    4588:	00002c51 	.word	0x00002c51
    458c:	0000afd0 	.word	0x0000afd0

00004590 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    4590:	4b03      	ldr	r3, [pc, #12]	; (45a0 <_delay_init+0x10>)
    4592:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4596:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    4598:	2205      	movs	r2, #5
    459a:	601a      	str	r2, [r3, #0]
    459c:	4770      	bx	lr
    459e:	bf00      	nop
    45a0:	e000e010 	.word	0xe000e010

000045a4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    45a4:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    45a6:	b303      	cbz	r3, 45ea <_delay_cycles+0x46>
{
    45a8:	b430      	push	{r4, r5}
    45aa:	1e5d      	subs	r5, r3, #1
    45ac:	b2ed      	uxtb	r5, r5
	while (n--) {
    45ae:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    45b0:	4a12      	ldr	r2, [pc, #72]	; (45fc <_delay_cycles+0x58>)
    45b2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    45b6:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    45b8:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    45ba:	6813      	ldr	r3, [r2, #0]
    45bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    45c0:	d0fb      	beq.n	45ba <_delay_cycles+0x16>
	while (n--) {
    45c2:	3801      	subs	r0, #1
    45c4:	b2c0      	uxtb	r0, r0
    45c6:	28ff      	cmp	r0, #255	; 0xff
    45c8:	d1f5      	bne.n	45b6 <_delay_cycles+0x12>
    45ca:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    45ce:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    45d2:	3101      	adds	r1, #1
    45d4:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    45d6:	4b09      	ldr	r3, [pc, #36]	; (45fc <_delay_cycles+0x58>)
    45d8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    45da:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    45dc:	461a      	mov	r2, r3
    45de:	6813      	ldr	r3, [r2, #0]
    45e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    45e4:	d0fb      	beq.n	45de <_delay_cycles+0x3a>
		;
}
    45e6:	bc30      	pop	{r4, r5}
    45e8:	4770      	bx	lr
	SysTick->LOAD = buf;
    45ea:	4b04      	ldr	r3, [pc, #16]	; (45fc <_delay_cycles+0x58>)
    45ec:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    45ee:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    45f0:	461a      	mov	r2, r3
    45f2:	6813      	ldr	r3, [r2, #0]
    45f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    45f8:	d0fb      	beq.n	45f2 <_delay_cycles+0x4e>
    45fa:	4770      	bx	lr
    45fc:	e000e010 	.word	0xe000e010

00004600 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    4600:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    4602:	6813      	ldr	r3, [r2, #0]
    4604:	f043 0302 	orr.w	r3, r3, #2
    4608:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    460a:	6913      	ldr	r3, [r2, #16]
    460c:	f013 0f03 	tst.w	r3, #3
    4610:	d1fb      	bne.n	460a <_tc_timer_start+0xa>
}
    4612:	4770      	bx	lr

00004614 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    4614:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4616:	6813      	ldr	r3, [r2, #0]
    4618:	f023 0302 	bic.w	r3, r3, #2
    461c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    461e:	6913      	ldr	r3, [r2, #16]
    4620:	f013 0f03 	tst.w	r3, #3
    4624:	d1fb      	bne.n	461e <_tc_timer_stop+0xa>
}
    4626:	4770      	bx	lr

00004628 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    4628:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    462a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    462c:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4630:	2a02      	cmp	r2, #2
    4632:	d00a      	beq.n	464a <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4634:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4636:	f012 0f0c 	tst.w	r2, #12
    463a:	d10c      	bne.n	4656 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    463c:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    463e:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4640:	691a      	ldr	r2, [r3, #16]
    4642:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4646:	d1fb      	bne.n	4640 <_tc_timer_set_period+0x18>
    4648:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    464a:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    464c:	691a      	ldr	r2, [r3, #16]
    464e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4652:	d1fb      	bne.n	464c <_tc_timer_set_period+0x24>
    4654:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4656:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4658:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    465c:	2a01      	cmp	r2, #1
    465e:	d000      	beq.n	4662 <_tc_timer_set_period+0x3a>
    4660:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    4662:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    4664:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4666:	691a      	ldr	r2, [r3, #16]
    4668:	f012 0f20 	tst.w	r2, #32
    466c:	d1fb      	bne.n	4666 <_tc_timer_set_period+0x3e>
    466e:	e7f7      	b.n	4660 <_tc_timer_set_period+0x38>

00004670 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    4670:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4672:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4674:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4678:	2a02      	cmp	r2, #2
    467a:	d00a      	beq.n	4692 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    467c:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    467e:	f012 0f0c 	tst.w	r2, #12
    4682:	d10c      	bne.n	469e <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4684:	691a      	ldr	r2, [r3, #16]
    4686:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    468a:	d1fb      	bne.n	4684 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    468c:	8b98      	ldrh	r0, [r3, #28]
    468e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    4690:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4692:	691a      	ldr	r2, [r3, #16]
    4694:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4698:	d1fb      	bne.n	4692 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    469a:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    469c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    469e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    46a0:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    46a4:	2a01      	cmp	r2, #1
    46a6:	d001      	beq.n	46ac <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    46a8:	2000      	movs	r0, #0
}
    46aa:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    46ac:	691a      	ldr	r2, [r3, #16]
    46ae:	f012 0f20 	tst.w	r2, #32
    46b2:	d1fb      	bne.n	46ac <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    46b4:	7ed8      	ldrb	r0, [r3, #27]
    46b6:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    46b8:	4770      	bx	lr

000046ba <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    46ba:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    46bc:	6913      	ldr	r3, [r2, #16]
    46be:	f013 0f03 	tst.w	r3, #3
    46c2:	d1fb      	bne.n	46bc <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    46c4:	6810      	ldr	r0, [r2, #0]
}
    46c6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    46ca:	4770      	bx	lr

000046cc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    46cc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    46ce:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    46d0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    46d2:	f012 0f01 	tst.w	r2, #1
    46d6:	d100      	bne.n	46da <tc_interrupt_handler+0xe>
    46d8:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    46da:	2201      	movs	r2, #1
    46dc:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    46de:	6803      	ldr	r3, [r0, #0]
    46e0:	4798      	blx	r3
	}
}
    46e2:	e7f9      	b.n	46d8 <tc_interrupt_handler+0xc>

000046e4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    46e4:	b570      	push	{r4, r5, r6, lr}
    46e6:	b088      	sub	sp, #32
    46e8:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    46ea:	466c      	mov	r4, sp
    46ec:	4d19      	ldr	r5, [pc, #100]	; (4754 <get_tc_index+0x70>)
    46ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    46f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    46f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    46f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    46fa:	9b00      	ldr	r3, [sp, #0]
    46fc:	42b3      	cmp	r3, r6
    46fe:	d00c      	beq.n	471a <get_tc_index+0x36>
    4700:	4630      	mov	r0, r6
    4702:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4704:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    4706:	f852 1b04 	ldr.w	r1, [r2], #4
    470a:	4281      	cmp	r1, r0
    470c:	d006      	beq.n	471c <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    470e:	3301      	adds	r3, #1
    4710:	2b08      	cmp	r3, #8
    4712:	d1f8      	bne.n	4706 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4714:	2000      	movs	r0, #0
			return i;
    4716:	b240      	sxtb	r0, r0
    4718:	e013      	b.n	4742 <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    471a:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    471c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4720:	d015      	beq.n	474e <get_tc_index+0x6a>
    4722:	2b01      	cmp	r3, #1
    4724:	d00f      	beq.n	4746 <get_tc_index+0x62>
    4726:	2b02      	cmp	r3, #2
    4728:	d00f      	beq.n	474a <get_tc_index+0x66>
    472a:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    472c:	bf08      	it	eq
    472e:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    4730:	d0f1      	beq.n	4716 <get_tc_index+0x32>
	ASSERT(false);
    4732:	f240 1267 	movw	r2, #359	; 0x167
    4736:	4908      	ldr	r1, [pc, #32]	; (4758 <get_tc_index+0x74>)
    4738:	2000      	movs	r0, #0
    473a:	4b08      	ldr	r3, [pc, #32]	; (475c <get_tc_index+0x78>)
    473c:	4798      	blx	r3
	return -1;
    473e:	f04f 30ff 	mov.w	r0, #4294967295
}
    4742:	b008      	add	sp, #32
    4744:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4746:	2001      	movs	r0, #1
    4748:	e7e5      	b.n	4716 <get_tc_index+0x32>
    474a:	2002      	movs	r0, #2
    474c:	e7e3      	b.n	4716 <get_tc_index+0x32>
    474e:	2000      	movs	r0, #0
    4750:	e7e1      	b.n	4716 <get_tc_index+0x32>
    4752:	bf00      	nop
    4754:	0000b010 	.word	0x0000b010
    4758:	0000b080 	.word	0x0000b080
    475c:	00002481 	.word	0x00002481

00004760 <_tc_timer_init>:
{
    4760:	b570      	push	{r4, r5, r6, lr}
    4762:	4606      	mov	r6, r0
    4764:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    4766:	4608      	mov	r0, r1
    4768:	4b71      	ldr	r3, [pc, #452]	; (4930 <_tc_timer_init+0x1d0>)
    476a:	4798      	blx	r3
    476c:	4605      	mov	r5, r0
	device->hw = hw;
    476e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    4770:	22a0      	movs	r2, #160	; 0xa0
    4772:	4970      	ldr	r1, [pc, #448]	; (4934 <_tc_timer_init+0x1d4>)
    4774:	2001      	movs	r0, #1
    4776:	4b70      	ldr	r3, [pc, #448]	; (4938 <_tc_timer_init+0x1d8>)
    4778:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    477a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    477c:	f013 0f01 	tst.w	r3, #1
    4780:	d119      	bne.n	47b6 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4782:	6923      	ldr	r3, [r4, #16]
    4784:	f013 0f03 	tst.w	r3, #3
    4788:	d1fb      	bne.n	4782 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    478a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    478c:	f013 0f02 	tst.w	r3, #2
    4790:	d00b      	beq.n	47aa <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4792:	6823      	ldr	r3, [r4, #0]
    4794:	f023 0302 	bic.w	r3, r3, #2
    4798:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    479a:	6923      	ldr	r3, [r4, #16]
    479c:	f013 0f03 	tst.w	r3, #3
    47a0:	d1fb      	bne.n	479a <_tc_timer_init+0x3a>
    47a2:	6923      	ldr	r3, [r4, #16]
    47a4:	f013 0f02 	tst.w	r3, #2
    47a8:	d1fb      	bne.n	47a2 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    47aa:	2301      	movs	r3, #1
    47ac:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    47ae:	6923      	ldr	r3, [r4, #16]
    47b0:	f013 0f03 	tst.w	r3, #3
    47b4:	d1fb      	bne.n	47ae <_tc_timer_init+0x4e>
    47b6:	6923      	ldr	r3, [r4, #16]
    47b8:	f013 0f01 	tst.w	r3, #1
    47bc:	d1fb      	bne.n	47b6 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    47be:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    47c2:	4a5e      	ldr	r2, [pc, #376]	; (493c <_tc_timer_init+0x1dc>)
    47c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    47c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    47ca:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    47cc:	6923      	ldr	r3, [r4, #16]
    47ce:	f013 0f03 	tst.w	r3, #3
    47d2:	d1fb      	bne.n	47cc <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    47d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    47d8:	4958      	ldr	r1, [pc, #352]	; (493c <_tc_timer_init+0x1dc>)
    47da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    47de:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    47e2:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    47e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    47e6:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    47e8:	2301      	movs	r3, #1
    47ea:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    47ec:	f002 020c 	and.w	r2, r2, #12
    47f0:	2a08      	cmp	r2, #8
    47f2:	d056      	beq.n	48a2 <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    47f4:	2a00      	cmp	r2, #0
    47f6:	d16b      	bne.n	48d0 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    47f8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    47fc:	4a4f      	ldr	r2, [pc, #316]	; (493c <_tc_timer_init+0x1dc>)
    47fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4802:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4804:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4806:	6923      	ldr	r3, [r4, #16]
    4808:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    480c:	d1fb      	bne.n	4806 <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    480e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4812:	4a4a      	ldr	r2, [pc, #296]	; (493c <_tc_timer_init+0x1dc>)
    4814:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4818:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    481a:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    481c:	6923      	ldr	r3, [r4, #16]
    481e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4822:	d1fb      	bne.n	481c <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    4824:	2301      	movs	r3, #1
    4826:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    4828:	4b45      	ldr	r3, [pc, #276]	; (4940 <_tc_timer_init+0x1e0>)
    482a:	429c      	cmp	r4, r3
    482c:	d077      	beq.n	491e <_tc_timer_init+0x1be>
	if (hw == TC1) {
    482e:	4b45      	ldr	r3, [pc, #276]	; (4944 <_tc_timer_init+0x1e4>)
    4830:	429c      	cmp	r4, r3
    4832:	d077      	beq.n	4924 <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    4834:	4b44      	ldr	r3, [pc, #272]	; (4948 <_tc_timer_init+0x1e8>)
    4836:	429c      	cmp	r4, r3
    4838:	d077      	beq.n	492a <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    483a:	4b44      	ldr	r3, [pc, #272]	; (494c <_tc_timer_init+0x1ec>)
    483c:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    483e:	bf04      	itt	eq
    4840:	4b43      	ldreq	r3, [pc, #268]	; (4950 <_tc_timer_init+0x1f0>)
    4842:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    4844:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4848:	4a3c      	ldr	r2, [pc, #240]	; (493c <_tc_timer_init+0x1dc>)
    484a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    484e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4852:	2b00      	cmp	r3, #0
    4854:	db23      	blt.n	489e <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4856:	095a      	lsrs	r2, r3, #5
    4858:	f003 031f 	and.w	r3, r3, #31
    485c:	2101      	movs	r1, #1
    485e:	fa01 f303 	lsl.w	r3, r1, r3
    4862:	3220      	adds	r2, #32
    4864:	493b      	ldr	r1, [pc, #236]	; (4954 <_tc_timer_init+0x1f4>)
    4866:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    486a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    486e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4872:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4876:	4b31      	ldr	r3, [pc, #196]	; (493c <_tc_timer_init+0x1dc>)
    4878:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    487c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4880:	2b00      	cmp	r3, #0
    4882:	db0c      	blt.n	489e <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4884:	0959      	lsrs	r1, r3, #5
    4886:	f003 031f 	and.w	r3, r3, #31
    488a:	2201      	movs	r2, #1
    488c:	fa02 f303 	lsl.w	r3, r2, r3
    4890:	4a30      	ldr	r2, [pc, #192]	; (4954 <_tc_timer_init+0x1f4>)
    4892:	f101 0060 	add.w	r0, r1, #96	; 0x60
    4896:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    489a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    489e:	2000      	movs	r0, #0
    48a0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    48a2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    48a6:	4a25      	ldr	r2, [pc, #148]	; (493c <_tc_timer_init+0x1dc>)
    48a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    48ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    48ae:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    48b0:	6923      	ldr	r3, [r4, #16]
    48b2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    48b6:	d1fb      	bne.n	48b0 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    48b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    48bc:	4a1f      	ldr	r2, [pc, #124]	; (493c <_tc_timer_init+0x1dc>)
    48be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    48c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    48c4:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    48c6:	6923      	ldr	r3, [r4, #16]
    48c8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    48cc:	d1fb      	bne.n	48c6 <_tc_timer_init+0x166>
    48ce:	e7a9      	b.n	4824 <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    48d0:	2a04      	cmp	r2, #4
    48d2:	d1a7      	bne.n	4824 <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    48d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    48d8:	4a18      	ldr	r2, [pc, #96]	; (493c <_tc_timer_init+0x1dc>)
    48da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    48de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    48e2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    48e4:	6923      	ldr	r3, [r4, #16]
    48e6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    48ea:	d1fb      	bne.n	48e4 <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    48ec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    48f0:	4a12      	ldr	r2, [pc, #72]	; (493c <_tc_timer_init+0x1dc>)
    48f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    48f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    48fa:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    48fc:	6923      	ldr	r3, [r4, #16]
    48fe:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4902:	d1fb      	bne.n	48fc <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    4904:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4908:	4a0c      	ldr	r2, [pc, #48]	; (493c <_tc_timer_init+0x1dc>)
    490a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    490e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    4912:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4914:	6923      	ldr	r3, [r4, #16]
    4916:	f013 0f20 	tst.w	r3, #32
    491a:	d1fb      	bne.n	4914 <_tc_timer_init+0x1b4>
    491c:	e782      	b.n	4824 <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    491e:	4b0c      	ldr	r3, [pc, #48]	; (4950 <_tc_timer_init+0x1f0>)
    4920:	601e      	str	r6, [r3, #0]
    4922:	e78a      	b.n	483a <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    4924:	4b0a      	ldr	r3, [pc, #40]	; (4950 <_tc_timer_init+0x1f0>)
    4926:	605e      	str	r6, [r3, #4]
    4928:	e78c      	b.n	4844 <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    492a:	4b09      	ldr	r3, [pc, #36]	; (4950 <_tc_timer_init+0x1f0>)
    492c:	609e      	str	r6, [r3, #8]
    492e:	e789      	b.n	4844 <_tc_timer_init+0xe4>
    4930:	000046e5 	.word	0x000046e5
    4934:	0000b080 	.word	0x0000b080
    4938:	00002481 	.word	0x00002481
    493c:	0000b010 	.word	0x0000b010
    4940:	40003800 	.word	0x40003800
    4944:	40003c00 	.word	0x40003c00
    4948:	4101a000 	.word	0x4101a000
    494c:	4101c000 	.word	0x4101c000
    4950:	20000968 	.word	0x20000968
    4954:	e000e100 	.word	0xe000e100

00004958 <_tc_timer_deinit>:
{
    4958:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    495a:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    495c:	4620      	mov	r0, r4
    495e:	4b18      	ldr	r3, [pc, #96]	; (49c0 <_tc_timer_deinit+0x68>)
    4960:	4798      	blx	r3
    4962:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4964:	22cd      	movs	r2, #205	; 0xcd
    4966:	4917      	ldr	r1, [pc, #92]	; (49c4 <_tc_timer_deinit+0x6c>)
    4968:	2001      	movs	r0, #1
    496a:	4b17      	ldr	r3, [pc, #92]	; (49c8 <_tc_timer_deinit+0x70>)
    496c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    496e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4972:	4b16      	ldr	r3, [pc, #88]	; (49cc <_tc_timer_deinit+0x74>)
    4974:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4978:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    497c:	2b00      	cmp	r3, #0
    497e:	db0d      	blt.n	499c <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4980:	095a      	lsrs	r2, r3, #5
    4982:	f003 031f 	and.w	r3, r3, #31
    4986:	2101      	movs	r1, #1
    4988:	fa01 f303 	lsl.w	r3, r1, r3
    498c:	3220      	adds	r2, #32
    498e:	4910      	ldr	r1, [pc, #64]	; (49d0 <_tc_timer_deinit+0x78>)
    4990:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4994:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4998:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    499c:	6823      	ldr	r3, [r4, #0]
    499e:	f023 0302 	bic.w	r3, r3, #2
    49a2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    49a4:	6923      	ldr	r3, [r4, #16]
    49a6:	f013 0f03 	tst.w	r3, #3
    49aa:	d1fb      	bne.n	49a4 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    49ac:	6823      	ldr	r3, [r4, #0]
    49ae:	f043 0301 	orr.w	r3, r3, #1
    49b2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    49b4:	6923      	ldr	r3, [r4, #16]
    49b6:	f013 0f01 	tst.w	r3, #1
    49ba:	d1fb      	bne.n	49b4 <_tc_timer_deinit+0x5c>
}
    49bc:	bd38      	pop	{r3, r4, r5, pc}
    49be:	bf00      	nop
    49c0:	000046e5 	.word	0x000046e5
    49c4:	0000b080 	.word	0x0000b080
    49c8:	00002481 	.word	0x00002481
    49cc:	0000b010 	.word	0x0000b010
    49d0:	e000e100 	.word	0xe000e100

000049d4 <_tc_timer_set_irq>:
{
    49d4:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    49d6:	68c0      	ldr	r0, [r0, #12]
    49d8:	4b09      	ldr	r3, [pc, #36]	; (4a00 <_tc_timer_set_irq+0x2c>)
    49da:	4798      	blx	r3
    49dc:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    49de:	f44f 7291 	mov.w	r2, #290	; 0x122
    49e2:	4908      	ldr	r1, [pc, #32]	; (4a04 <_tc_timer_set_irq+0x30>)
    49e4:	2001      	movs	r0, #1
    49e6:	4b08      	ldr	r3, [pc, #32]	; (4a08 <_tc_timer_set_irq+0x34>)
    49e8:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    49ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    49ee:	4b07      	ldr	r3, [pc, #28]	; (4a0c <_tc_timer_set_irq+0x38>)
    49f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    49f4:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    49f8:	4b05      	ldr	r3, [pc, #20]	; (4a10 <_tc_timer_set_irq+0x3c>)
    49fa:	4798      	blx	r3
    49fc:	bd10      	pop	{r4, pc}
    49fe:	bf00      	nop
    4a00:	000046e5 	.word	0x000046e5
    4a04:	0000b080 	.word	0x0000b080
    4a08:	00002481 	.word	0x00002481
    4a0c:	0000b010 	.word	0x0000b010
    4a10:	000029fd 	.word	0x000029fd

00004a14 <_tc_get_timer>:
}
    4a14:	4800      	ldr	r0, [pc, #0]	; (4a18 <_tc_get_timer+0x4>)
    4a16:	4770      	bx	lr
    4a18:	20000020 	.word	0x20000020

00004a1c <TC0_Handler>:
{
    4a1c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    4a1e:	4b02      	ldr	r3, [pc, #8]	; (4a28 <TC0_Handler+0xc>)
    4a20:	6818      	ldr	r0, [r3, #0]
    4a22:	4b02      	ldr	r3, [pc, #8]	; (4a2c <TC0_Handler+0x10>)
    4a24:	4798      	blx	r3
    4a26:	bd08      	pop	{r3, pc}
    4a28:	20000968 	.word	0x20000968
    4a2c:	000046cd 	.word	0x000046cd

00004a30 <TC1_Handler>:
{
    4a30:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    4a32:	4b02      	ldr	r3, [pc, #8]	; (4a3c <TC1_Handler+0xc>)
    4a34:	6858      	ldr	r0, [r3, #4]
    4a36:	4b02      	ldr	r3, [pc, #8]	; (4a40 <TC1_Handler+0x10>)
    4a38:	4798      	blx	r3
    4a3a:	bd08      	pop	{r3, pc}
    4a3c:	20000968 	.word	0x20000968
    4a40:	000046cd 	.word	0x000046cd

00004a44 <TC2_Handler>:
{
    4a44:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    4a46:	4b02      	ldr	r3, [pc, #8]	; (4a50 <TC2_Handler+0xc>)
    4a48:	6898      	ldr	r0, [r3, #8]
    4a4a:	4b02      	ldr	r3, [pc, #8]	; (4a54 <TC2_Handler+0x10>)
    4a4c:	4798      	blx	r3
    4a4e:	bd08      	pop	{r3, pc}
    4a50:	20000968 	.word	0x20000968
    4a54:	000046cd 	.word	0x000046cd

00004a58 <TC3_Handler>:
{
    4a58:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    4a5a:	4b02      	ldr	r3, [pc, #8]	; (4a64 <TC3_Handler+0xc>)
    4a5c:	68d8      	ldr	r0, [r3, #12]
    4a5e:	4b02      	ldr	r3, [pc, #8]	; (4a68 <TC3_Handler+0x10>)
    4a60:	4798      	blx	r3
    4a62:	bd08      	pop	{r3, pc}
    4a64:	20000968 	.word	0x20000968
    4a68:	000046cd 	.word	0x000046cd

00004a6c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    4a6c:	2000      	movs	r0, #0
    4a6e:	4770      	bx	lr

00004a70 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    4a70:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    4a72:	7c83      	ldrb	r3, [r0, #18]
    4a74:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4a78:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    4a7a:	f002 0107 	and.w	r1, r2, #7
    4a7e:	2901      	cmp	r1, #1
    4a80:	d00b      	beq.n	4a9a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4a82:	015a      	lsls	r2, r3, #5
    4a84:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4a88:	2110      	movs	r1, #16
    4a8a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4a8e:	015b      	lsls	r3, r3, #5
    4a90:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a94:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    4a98:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    4a9a:	f012 0f40 	tst.w	r2, #64	; 0x40
    4a9e:	d00c      	beq.n	4aba <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    4aa0:	7cc2      	ldrb	r2, [r0, #19]
    4aa2:	f36f 1286 	bfc	r2, #6, #1
    4aa6:	74c2      	strb	r2, [r0, #19]
    4aa8:	015a      	lsls	r2, r3, #5
    4aaa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4aae:	2180      	movs	r1, #128	; 0x80
    4ab0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4ab4:	2140      	movs	r1, #64	; 0x40
    4ab6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    4aba:	7cc2      	ldrb	r2, [r0, #19]
    4abc:	f36f 02c3 	bfc	r2, #3, #1
    4ac0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    4ac2:	490a      	ldr	r1, [pc, #40]	; (4aec <_usb_d_dev_handle_setup+0x7c>)
    4ac4:	015a      	lsls	r2, r3, #5
    4ac6:	188c      	adds	r4, r1, r2
    4ac8:	2500      	movs	r5, #0
    4aca:	72a5      	strb	r5, [r4, #10]
    4acc:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4ace:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    4ad2:	246f      	movs	r4, #111	; 0x6f
    4ad4:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4ad8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4adc:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    4ae0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    4ae4:	7c80      	ldrb	r0, [r0, #18]
    4ae6:	4798      	blx	r3
    4ae8:	bd38      	pop	{r3, r4, r5, pc}
    4aea:	bf00      	nop
    4aec:	20000978 	.word	0x20000978

00004af0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    4af0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4af2:	2320      	movs	r3, #32
    4af4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4af8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4afa:	7c83      	ldrb	r3, [r0, #18]
    4afc:	f003 030f 	and.w	r3, r3, #15
    4b00:	015b      	lsls	r3, r3, #5
    4b02:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b06:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    4b0a:	4b04      	ldr	r3, [pc, #16]	; (4b1c <_usb_d_dev_handle_stall+0x2c>)
    4b0c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    4b10:	6882      	ldr	r2, [r0, #8]
    4b12:	2101      	movs	r1, #1
    4b14:	7c80      	ldrb	r0, [r0, #18]
    4b16:	4798      	blx	r3
    4b18:	bd08      	pop	{r3, pc}
    4b1a:	bf00      	nop
    4b1c:	20000978 	.word	0x20000978

00004b20 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    4b20:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4b22:	7c84      	ldrb	r4, [r0, #18]
    4b24:	2cff      	cmp	r4, #255	; 0xff
    4b26:	d003      	beq.n	4b30 <_usb_d_dev_trans_done+0x10>
    4b28:	7cc3      	ldrb	r3, [r0, #19]
    4b2a:	f013 0f40 	tst.w	r3, #64	; 0x40
    4b2e:	d100      	bne.n	4b32 <_usb_d_dev_trans_done+0x12>
    4b30:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    4b32:	7cc2      	ldrb	r2, [r0, #19]
    4b34:	f36f 1286 	bfc	r2, #6, #1
    4b38:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    4b3a:	4a03      	ldr	r2, [pc, #12]	; (4b48 <_usb_d_dev_trans_done+0x28>)
    4b3c:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    4b40:	6882      	ldr	r2, [r0, #8]
    4b42:	4620      	mov	r0, r4
    4b44:	47a8      	blx	r5
    4b46:	e7f3      	b.n	4b30 <_usb_d_dev_trans_done+0x10>
    4b48:	20000978 	.word	0x20000978

00004b4c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    4b4c:	b530      	push	{r4, r5, lr}
    4b4e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4b50:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    4b52:	2425      	movs	r4, #37	; 0x25
    4b54:	f88d 4004 	strb.w	r4, [sp, #4]
    4b58:	244a      	movs	r4, #74	; 0x4a
    4b5a:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4b5e:	2bff      	cmp	r3, #255	; 0xff
    4b60:	d01e      	beq.n	4ba0 <_usb_d_dev_trans_stop+0x54>
    4b62:	7cc4      	ldrb	r4, [r0, #19]
    4b64:	f014 0f40 	tst.w	r4, #64	; 0x40
    4b68:	d01a      	beq.n	4ba0 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4b6a:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    4b6e:	b1c9      	cbz	r1, 4ba4 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4b70:	0163      	lsls	r3, r4, #5
    4b72:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b76:	2580      	movs	r5, #128	; 0x80
    4b78:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    4b7c:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    4b7e:	a902      	add	r1, sp, #8
    4b80:	440b      	add	r3, r1
    4b82:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4b86:	0163      	lsls	r3, r4, #5
    4b88:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b8c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4b90:	0163      	lsls	r3, r4, #5
    4b92:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b96:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    4b9a:	4611      	mov	r1, r2
    4b9c:	4b05      	ldr	r3, [pc, #20]	; (4bb4 <_usb_d_dev_trans_stop+0x68>)
    4b9e:	4798      	blx	r3
}
    4ba0:	b003      	add	sp, #12
    4ba2:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4ba4:	0163      	lsls	r3, r4, #5
    4ba6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4baa:	2540      	movs	r5, #64	; 0x40
    4bac:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    4bb0:	e7e4      	b.n	4b7c <_usb_d_dev_trans_stop+0x30>
    4bb2:	bf00      	nop
    4bb4:	00004b21 	.word	0x00004b21

00004bb8 <_usb_d_dev_handle_trfail>:
{
    4bb8:	b530      	push	{r4, r5, lr}
    4bba:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    4bbc:	7c83      	ldrb	r3, [r0, #18]
    4bbe:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    4bc2:	2204      	movs	r2, #4
    4bc4:	f88d 2004 	strb.w	r2, [sp, #4]
    4bc8:	2208      	movs	r2, #8
    4bca:	f88d 2005 	strb.w	r2, [sp, #5]
    4bce:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    4bd0:	460c      	mov	r4, r1
    4bd2:	b391      	cbz	r1, 4c3a <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4bd4:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    4bd8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    4bdc:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    4be0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4be4:	4a32      	ldr	r2, [pc, #200]	; (4cb0 <_usb_d_dev_handle_trfail+0xf8>)
    4be6:	440a      	add	r2, r1
    4be8:	7a91      	ldrb	r1, [r2, #10]
    4bea:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    4bec:	2d02      	cmp	r5, #2
    4bee:	d02c      	beq.n	4c4a <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    4bf0:	f011 0f02 	tst.w	r1, #2
    4bf4:	d045      	beq.n	4c82 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4bf6:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    4bf8:	7a91      	ldrb	r1, [r2, #10]
    4bfa:	f36f 0141 	bfc	r1, #1, #1
    4bfe:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4c00:	aa02      	add	r2, sp, #8
    4c02:	4422      	add	r2, r4
    4c04:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4c08:	015a      	lsls	r2, r3, #5
    4c0a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4c0e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4c12:	015b      	lsls	r3, r3, #5
    4c14:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4c18:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    4c1c:	f005 0307 	and.w	r3, r5, #7
    4c20:	2b01      	cmp	r3, #1
    4c22:	d143      	bne.n	4cac <_usb_d_dev_handle_trfail+0xf4>
    4c24:	7cc3      	ldrb	r3, [r0, #19]
    4c26:	f013 0f40 	tst.w	r3, #64	; 0x40
    4c2a:	d03f      	beq.n	4cac <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    4c2c:	09d9      	lsrs	r1, r3, #7
    4c2e:	428c      	cmp	r4, r1
    4c30:	d03c      	beq.n	4cac <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    4c32:	2200      	movs	r2, #0
    4c34:	4b1f      	ldr	r3, [pc, #124]	; (4cb4 <_usb_d_dev_handle_trfail+0xfc>)
    4c36:	4798      	blx	r3
    4c38:	e038      	b.n	4cac <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4c3a:	0159      	lsls	r1, r3, #5
    4c3c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4c40:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4c44:	f005 0507 	and.w	r5, r5, #7
    4c48:	e7ca      	b.n	4be0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    4c4a:	f011 0f01 	tst.w	r1, #1
    4c4e:	d0cf      	beq.n	4bf0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    4c50:	7a91      	ldrb	r1, [r2, #10]
    4c52:	f36f 0100 	bfc	r1, #0, #1
    4c56:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4c58:	aa02      	add	r2, sp, #8
    4c5a:	4422      	add	r2, r4
    4c5c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4c60:	015a      	lsls	r2, r3, #5
    4c62:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4c66:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4c6a:	015b      	lsls	r3, r3, #5
    4c6c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4c70:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    4c74:	2204      	movs	r2, #4
    4c76:	1c21      	adds	r1, r4, #0
    4c78:	bf18      	it	ne
    4c7a:	2101      	movne	r1, #1
    4c7c:	4b0d      	ldr	r3, [pc, #52]	; (4cb4 <_usb_d_dev_handle_trfail+0xfc>)
    4c7e:	4798      	blx	r3
    4c80:	e014      	b.n	4cac <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    4c82:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    4c86:	4a0a      	ldr	r2, [pc, #40]	; (4cb0 <_usb_d_dev_handle_trfail+0xf8>)
    4c88:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    4c8c:	2100      	movs	r1, #0
    4c8e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4c90:	aa02      	add	r2, sp, #8
    4c92:	4414      	add	r4, r2
    4c94:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4c98:	015a      	lsls	r2, r3, #5
    4c9a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4c9e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4ca2:	015b      	lsls	r3, r3, #5
    4ca4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4ca8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    4cac:	b003      	add	sp, #12
    4cae:	bd30      	pop	{r4, r5, pc}
    4cb0:	20000978 	.word	0x20000978
    4cb4:	00004b4d 	.word	0x00004b4d

00004cb8 <_usb_d_dev_reset_epts>:
{
    4cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cbc:	4d0c      	ldr	r5, [pc, #48]	; (4cf0 <_usb_d_dev_reset_epts+0x38>)
    4cbe:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    4cc2:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4cc6:	f04f 0803 	mov.w	r8, #3
    4cca:	4f0a      	ldr	r7, [pc, #40]	; (4cf4 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    4ccc:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4cce:	4641      	mov	r1, r8
    4cd0:	4620      	mov	r0, r4
    4cd2:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    4cd4:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    4cd6:	2300      	movs	r3, #0
    4cd8:	74e3      	strb	r3, [r4, #19]
    4cda:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4cdc:	42ac      	cmp	r4, r5
    4cde:	d1f6      	bne.n	4cce <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    4ce0:	22c0      	movs	r2, #192	; 0xc0
    4ce2:	4619      	mov	r1, r3
    4ce4:	4802      	ldr	r0, [pc, #8]	; (4cf0 <_usb_d_dev_reset_epts+0x38>)
    4ce6:	4b04      	ldr	r3, [pc, #16]	; (4cf8 <_usb_d_dev_reset_epts+0x40>)
    4ce8:	4798      	blx	r3
    4cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4cee:	bf00      	nop
    4cf0:	20000978 	.word	0x20000978
    4cf4:	00004b21 	.word	0x00004b21
    4cf8:	0000a273 	.word	0x0000a273

00004cfc <_usb_d_dev_in_next>:
{
    4cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d00:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    4d02:	7c84      	ldrb	r4, [r0, #18]
    4d04:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    4d08:	4688      	mov	r8, r1
    4d0a:	2900      	cmp	r1, #0
    4d0c:	f000 80a0 	beq.w	4e50 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    4d10:	4b58      	ldr	r3, [pc, #352]	; (4e74 <_usb_d_dev_in_next+0x178>)
    4d12:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    4d16:	6958      	ldr	r0, [r3, #20]
    4d18:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4d1c:	8a2b      	ldrh	r3, [r5, #16]
    4d1e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4d22:	4293      	cmp	r3, r2
    4d24:	f000 808e 	beq.w	4e44 <_usb_d_dev_in_next+0x148>
    4d28:	3b01      	subs	r3, #1
    4d2a:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4d2c:	7cef      	ldrb	r7, [r5, #19]
    4d2e:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    4d32:	f1b8 0f00 	cmp.w	r8, #0
    4d36:	d005      	beq.n	4d44 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4d38:	0162      	lsls	r2, r4, #5
    4d3a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4d3e:	2302      	movs	r3, #2
    4d40:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    4d44:	68a9      	ldr	r1, [r5, #8]
    4d46:	eb0e 0301 	add.w	r3, lr, r1
    4d4a:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    4d4c:	686e      	ldr	r6, [r5, #4]
    4d4e:	42b3      	cmp	r3, r6
    4d50:	d23f      	bcs.n	4dd2 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    4d52:	1af6      	subs	r6, r6, r3
    4d54:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    4d56:	7cea      	ldrb	r2, [r5, #19]
    4d58:	f012 0f20 	tst.w	r2, #32
    4d5c:	d02d      	beq.n	4dba <_usb_d_dev_in_next+0xbe>
    4d5e:	8a2a      	ldrh	r2, [r5, #16]
    4d60:	4296      	cmp	r6, r2
    4d62:	bf28      	it	cs
    4d64:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    4d66:	6829      	ldr	r1, [r5, #0]
    4d68:	4632      	mov	r2, r6
    4d6a:	4419      	add	r1, r3
    4d6c:	68e8      	ldr	r0, [r5, #12]
    4d6e:	4b42      	ldr	r3, [pc, #264]	; (4e78 <_usb_d_dev_in_next+0x17c>)
    4d70:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4d72:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    4d74:	4b3f      	ldr	r3, [pc, #252]	; (4e74 <_usb_d_dev_in_next+0x178>)
    4d76:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d7a:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4d7c:	4b3d      	ldr	r3, [pc, #244]	; (4e74 <_usb_d_dev_in_next+0x178>)
    4d7e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d82:	695a      	ldr	r2, [r3, #20]
    4d84:	f366 020d 	bfi	r2, r6, #0, #14
    4d88:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4d8a:	695a      	ldr	r2, [r3, #20]
    4d8c:	f36f 329b 	bfc	r2, #14, #14
    4d90:	615a      	str	r2, [r3, #20]
	if (!isr) {
    4d92:	f1b8 0f00 	cmp.w	r8, #0
    4d96:	d108      	bne.n	4daa <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    4d98:	2f01      	cmp	r7, #1
    4d9a:	bf0c      	ite	eq
    4d9c:	224e      	moveq	r2, #78	; 0x4e
    4d9e:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4da0:	0163      	lsls	r3, r4, #5
    4da2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4da6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4daa:	0164      	lsls	r4, r4, #5
    4dac:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4db0:	2380      	movs	r3, #128	; 0x80
    4db2:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    4db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dba:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    4dbe:	bf28      	it	cs
    4dc0:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4dc4:	6829      	ldr	r1, [r5, #0]
    4dc6:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    4dc8:	4a2a      	ldr	r2, [pc, #168]	; (4e74 <_usb_d_dev_in_next+0x178>)
    4dca:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    4dce:	6113      	str	r3, [r2, #16]
    4dd0:	e7d4      	b.n	4d7c <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    4dd2:	7ceb      	ldrb	r3, [r5, #19]
    4dd4:	f013 0f10 	tst.w	r3, #16
    4dd8:	d00f      	beq.n	4dfa <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    4dda:	7ceb      	ldrb	r3, [r5, #19]
    4ddc:	f36f 1304 	bfc	r3, #4, #1
    4de0:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4de2:	4b24      	ldr	r3, [pc, #144]	; (4e74 <_usb_d_dev_in_next+0x178>)
    4de4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4de8:	695a      	ldr	r2, [r3, #20]
    4dea:	f36f 020d 	bfc	r2, #0, #14
    4dee:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4df0:	695a      	ldr	r2, [r3, #20]
    4df2:	f36f 329b 	bfc	r2, #14, #14
    4df6:	615a      	str	r2, [r3, #20]
    4df8:	e7cb      	b.n	4d92 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    4dfa:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4dfc:	ea4f 1444 	mov.w	r4, r4, lsl #5
    4e00:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4e04:	bf0c      	ite	eq
    4e06:	234b      	moveq	r3, #75	; 0x4b
    4e08:	234a      	movne	r3, #74	; 0x4a
    4e0a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    4e0e:	8a2a      	ldrh	r2, [r5, #16]
    4e10:	ea00 030e 	and.w	r3, r0, lr
    4e14:	429a      	cmp	r2, r3
    4e16:	d005      	beq.n	4e24 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4e18:	2100      	movs	r1, #0
    4e1a:	4628      	mov	r0, r5
    4e1c:	4b17      	ldr	r3, [pc, #92]	; (4e7c <_usb_d_dev_in_next+0x180>)
    4e1e:	4798      	blx	r3
	return;
    4e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    4e24:	7ceb      	ldrb	r3, [r5, #19]
    4e26:	f36f 1386 	bfc	r3, #6, #1
    4e2a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    4e2c:	4b11      	ldr	r3, [pc, #68]	; (4e74 <_usb_d_dev_in_next+0x178>)
    4e2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4e32:	68a9      	ldr	r1, [r5, #8]
    4e34:	7ca8      	ldrb	r0, [r5, #18]
    4e36:	4798      	blx	r3
    4e38:	b9d0      	cbnz	r0, 4e70 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    4e3a:	7ceb      	ldrb	r3, [r5, #19]
    4e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4e40:	74eb      	strb	r3, [r5, #19]
    4e42:	e7e9      	b.n	4e18 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4e44:	7cef      	ldrb	r7, [r5, #19]
    4e46:	f007 0707 	and.w	r7, r7, #7
    4e4a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4e4e:	e773      	b.n	4d38 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4e50:	8a03      	ldrh	r3, [r0, #16]
    4e52:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4e56:	4293      	cmp	r3, r2
    4e58:	d107      	bne.n	4e6a <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4e5a:	7cef      	ldrb	r7, [r5, #19]
    4e5c:	f007 0707 	and.w	r7, r7, #7
    4e60:	f04f 0e00 	mov.w	lr, #0
    4e64:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4e68:	e76c      	b.n	4d44 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4e6a:	f04f 0e00 	mov.w	lr, #0
    4e6e:	e75b      	b.n	4d28 <_usb_d_dev_in_next+0x2c>
    4e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e74:	20000978 	.word	0x20000978
    4e78:	0000a25d 	.word	0x0000a25d
    4e7c:	00004b21 	.word	0x00004b21

00004e80 <_usb_d_dev_out_next>:
{
    4e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e84:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4e86:	7c85      	ldrb	r5, [r0, #18]
    4e88:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    4e8c:	4689      	mov	r9, r1
    4e8e:	2900      	cmp	r1, #0
    4e90:	d056      	beq.n	4f40 <_usb_d_dev_out_next+0xc0>
    4e92:	4b74      	ldr	r3, [pc, #464]	; (5064 <_usb_d_dev_out_next+0x1e4>)
    4e94:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4e98:	685a      	ldr	r2, [r3, #4]
    4e9a:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    4e9e:	685f      	ldr	r7, [r3, #4]
    4ea0:	f3c7 070d 	ubfx	r7, r7, #0, #14
    4ea4:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4ea6:	8a06      	ldrh	r6, [r0, #16]
    4ea8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4eac:	429e      	cmp	r6, r3
    4eae:	f000 80ba 	beq.w	5026 <_usb_d_dev_out_next+0x1a6>
    4eb2:	3e01      	subs	r6, #1
    4eb4:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    4eb6:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4eba:	f894 8013 	ldrb.w	r8, [r4, #19]
    4ebe:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    4ec2:	f1b9 0f00 	cmp.w	r9, #0
    4ec6:	d005      	beq.n	4ed4 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4ec8:	016b      	lsls	r3, r5, #5
    4eca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4ece:	2201      	movs	r2, #1
    4ed0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    4ed4:	7ce3      	ldrb	r3, [r4, #19]
    4ed6:	f013 0f20 	tst.w	r3, #32
    4eda:	d00d      	beq.n	4ef8 <_usb_d_dev_out_next+0x78>
    4edc:	6862      	ldr	r2, [r4, #4]
    4ede:	2a00      	cmp	r2, #0
    4ee0:	d037      	beq.n	4f52 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    4ee2:	68a0      	ldr	r0, [r4, #8]
    4ee4:	1a12      	subs	r2, r2, r0
    4ee6:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    4ee8:	6823      	ldr	r3, [r4, #0]
    4eea:	42ba      	cmp	r2, r7
    4eec:	bf28      	it	cs
    4eee:	463a      	movcs	r2, r7
    4ef0:	68e1      	ldr	r1, [r4, #12]
    4ef2:	4418      	add	r0, r3
    4ef4:	4b5c      	ldr	r3, [pc, #368]	; (5068 <_usb_d_dev_out_next+0x1e8>)
    4ef6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4ef8:	6863      	ldr	r3, [r4, #4]
    4efa:	b353      	cbz	r3, 4f52 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    4efc:	f1b9 0f00 	cmp.w	r9, #0
    4f00:	d040      	beq.n	4f84 <_usb_d_dev_out_next+0x104>
    4f02:	8a22      	ldrh	r2, [r4, #16]
    4f04:	42ba      	cmp	r2, r7
    4f06:	d93d      	bls.n	4f84 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    4f08:	7ce3      	ldrb	r3, [r4, #19]
    4f0a:	f36f 1304 	bfc	r3, #4, #1
    4f0e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    4f10:	68a3      	ldr	r3, [r4, #8]
    4f12:	445b      	add	r3, fp
    4f14:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    4f16:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4f1a:	ea4f 1345 	mov.w	r3, r5, lsl #5
    4f1e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4f22:	bf0c      	ite	eq
    4f24:	222d      	moveq	r2, #45	; 0x2d
    4f26:	2225      	movne	r2, #37	; 0x25
    4f28:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    4f2c:	b915      	cbnz	r5, 4f34 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4f2e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    4f30:	4b4c      	ldr	r3, [pc, #304]	; (5064 <_usb_d_dev_out_next+0x1e4>)
    4f32:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4f34:	2100      	movs	r1, #0
    4f36:	4620      	mov	r0, r4
    4f38:	4b4c      	ldr	r3, [pc, #304]	; (506c <_usb_d_dev_out_next+0x1ec>)
    4f3a:	4798      	blx	r3
	return;
    4f3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4f40:	8a06      	ldrh	r6, [r0, #16]
    4f42:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4f46:	429e      	cmp	r6, r3
    4f48:	d07b      	beq.n	5042 <_usb_d_dev_out_next+0x1c2>
    4f4a:	f04f 0b00 	mov.w	fp, #0
    4f4e:	46da      	mov	sl, fp
    4f50:	e7af      	b.n	4eb2 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4f52:	7ce3      	ldrb	r3, [r4, #19]
    4f54:	f013 0f10 	tst.w	r3, #16
    4f58:	d06c      	beq.n	5034 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    4f5a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4f5c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4f60:	f043 0320 	orr.w	r3, r3, #32
    4f64:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4f66:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4f68:	493e      	ldr	r1, [pc, #248]	; (5064 <_usb_d_dev_out_next+0x1e4>)
    4f6a:	016a      	lsls	r2, r5, #5
    4f6c:	188b      	adds	r3, r1, r2
    4f6e:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4f70:	8a21      	ldrh	r1, [r4, #16]
    4f72:	685a      	ldr	r2, [r3, #4]
    4f74:	f361 329b 	bfi	r2, r1, #14, #14
    4f78:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4f7a:	685a      	ldr	r2, [r3, #4]
    4f7c:	f36f 020d 	bfc	r2, #0, #14
    4f80:	605a      	str	r2, [r3, #4]
    4f82:	e01d      	b.n	4fc0 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    4f84:	68a2      	ldr	r2, [r4, #8]
    4f86:	4452      	add	r2, sl
    4f88:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4f8a:	4293      	cmp	r3, r2
    4f8c:	d9c3      	bls.n	4f16 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    4f8e:	1a9b      	subs	r3, r3, r2
    4f90:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4f92:	7ce1      	ldrb	r1, [r4, #19]
    4f94:	f011 0f20 	tst.w	r1, #32
    4f98:	d026      	beq.n	4fe8 <_usb_d_dev_out_next+0x168>
    4f9a:	8a22      	ldrh	r2, [r4, #16]
    4f9c:	4293      	cmp	r3, r2
    4f9e:	bf28      	it	cs
    4fa0:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4fa2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4fa4:	016a      	lsls	r2, r5, #5
    4fa6:	492f      	ldr	r1, [pc, #188]	; (5064 <_usb_d_dev_out_next+0x1e4>)
    4fa8:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4faa:	4a2e      	ldr	r2, [pc, #184]	; (5064 <_usb_d_dev_out_next+0x1e4>)
    4fac:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    4fb0:	6851      	ldr	r1, [r2, #4]
    4fb2:	f363 319b 	bfi	r1, r3, #14, #14
    4fb6:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4fb8:	6853      	ldr	r3, [r2, #4]
    4fba:	f36f 030d 	bfc	r3, #0, #14
    4fbe:	6053      	str	r3, [r2, #4]
	if (!isr) {
    4fc0:	f1b9 0f00 	cmp.w	r9, #0
    4fc4:	d108      	bne.n	4fd8 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    4fc6:	f1b8 0f01 	cmp.w	r8, #1
    4fca:	d025      	beq.n	5018 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    4fcc:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4fce:	016b      	lsls	r3, r5, #5
    4fd0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4fd4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4fd8:	016d      	lsls	r5, r5, #5
    4fda:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    4fde:	2340      	movs	r3, #64	; 0x40
    4fe0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    4fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    4fe8:	8a21      	ldrh	r1, [r4, #16]
    4fea:	428b      	cmp	r3, r1
    4fec:	d90a      	bls.n	5004 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4ff2:	d80e      	bhi.n	5012 <_usb_d_dev_out_next+0x192>
    4ff4:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4ff8:	6821      	ldr	r1, [r4, #0]
    4ffa:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    4ffc:	0169      	lsls	r1, r5, #5
    4ffe:	4819      	ldr	r0, [pc, #100]	; (5064 <_usb_d_dev_out_next+0x1e4>)
    5000:	5042      	str	r2, [r0, r1]
    5002:	e7d2      	b.n	4faa <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    5004:	428b      	cmp	r3, r1
    5006:	d2f7      	bcs.n	4ff8 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    5008:	7ce1      	ldrb	r1, [r4, #19]
    500a:	f041 0120 	orr.w	r1, r1, #32
    500e:	74e1      	strb	r1, [r4, #19]
    5010:	e7f2      	b.n	4ff8 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    5012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5016:	e7ef      	b.n	4ff8 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    5018:	4b12      	ldr	r3, [pc, #72]	; (5064 <_usb_d_dev_out_next+0x1e4>)
    501a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    501e:	2200      	movs	r2, #0
    5020:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    5022:	222d      	movs	r2, #45	; 0x2d
    5024:	e7d3      	b.n	4fce <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    5026:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    502a:	f890 8013 	ldrb.w	r8, [r0, #19]
    502e:	f008 0807 	and.w	r8, r8, #7
    5032:	e749      	b.n	4ec8 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    5034:	f1b9 0f00 	cmp.w	r9, #0
    5038:	d10b      	bne.n	5052 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    503a:	68a3      	ldr	r3, [r4, #8]
    503c:	4453      	add	r3, sl
    503e:	60a3      	str	r3, [r4, #8]
    5040:	e769      	b.n	4f16 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    5042:	f890 8013 	ldrb.w	r8, [r0, #19]
    5046:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    504a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    504c:	46bb      	mov	fp, r7
    504e:	46ba      	mov	sl, r7
    5050:	e740      	b.n	4ed4 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    5052:	8a23      	ldrh	r3, [r4, #16]
    5054:	42bb      	cmp	r3, r7
    5056:	f63f af57 	bhi.w	4f08 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    505a:	68a3      	ldr	r3, [r4, #8]
    505c:	4453      	add	r3, sl
    505e:	60a3      	str	r3, [r4, #8]
    5060:	e759      	b.n	4f16 <_usb_d_dev_out_next+0x96>
    5062:	bf00      	nop
    5064:	20000978 	.word	0x20000978
    5068:	0000a25d 	.word	0x0000a25d
    506c:	00004b21 	.word	0x00004b21

00005070 <_usb_d_dev_handler>:
{
    5070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    5074:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5078:	8c1e      	ldrh	r6, [r3, #32]
    507a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    507c:	b146      	cbz	r6, 5090 <_usb_d_dev_handler+0x20>
    507e:	4d96      	ldr	r5, [pc, #600]	; (52d8 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    5080:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    5082:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    5086:	f8df 926c 	ldr.w	r9, [pc, #620]	; 52f4 <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    508a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 52f8 <_usb_d_dev_handler+0x288>
    508e:	e0de      	b.n	524e <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    5090:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    5092:	8b1b      	ldrh	r3, [r3, #24]
    5094:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    5096:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    5098:	f013 0f04 	tst.w	r3, #4
    509c:	d11e      	bne.n	50dc <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    509e:	f413 7f00 	tst.w	r3, #512	; 0x200
    50a2:	d125      	bne.n	50f0 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    50a4:	f013 0f80 	tst.w	r3, #128	; 0x80
    50a8:	d14f      	bne.n	514a <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    50aa:	f013 0f70 	tst.w	r3, #112	; 0x70
    50ae:	d158      	bne.n	5162 <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    50b0:	f013 0f08 	tst.w	r3, #8
    50b4:	d178      	bne.n	51a8 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    50b6:	f013 0f01 	tst.w	r3, #1
    50ba:	d0e0      	beq.n	507e <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    50bc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    50c0:	f240 2201 	movw	r2, #513	; 0x201
    50c4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    50c6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    50c8:	2270      	movs	r2, #112	; 0x70
    50ca:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    50cc:	4b83      	ldr	r3, [pc, #524]	; (52dc <_usb_d_dev_handler+0x26c>)
    50ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    50d2:	2100      	movs	r1, #0
    50d4:	2004      	movs	r0, #4
    50d6:	4798      	blx	r3
    50d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    50dc:	2204      	movs	r2, #4
    50de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    50e2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    50e4:	4b7d      	ldr	r3, [pc, #500]	; (52dc <_usb_d_dev_handler+0x26c>)
    50e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    50ea:	4798      	blx	r3
    50ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    50f4:	f240 2201 	movw	r2, #513	; 0x201
    50f8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    50fa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    50fc:	2270      	movs	r2, #112	; 0x70
    50fe:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    5100:	4b76      	ldr	r3, [pc, #472]	; (52dc <_usb_d_dev_handler+0x26c>)
    5102:	891b      	ldrh	r3, [r3, #8]
    5104:	f003 030f 	and.w	r3, r3, #15
    5108:	2b03      	cmp	r3, #3
    510a:	d014      	beq.n	5136 <_usb_d_dev_handler+0xc6>
    510c:	2301      	movs	r3, #1
    510e:	4873      	ldr	r0, [pc, #460]	; (52dc <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    5110:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    5112:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    5116:	8912      	ldrh	r2, [r2, #8]
    5118:	f002 020f 	and.w	r2, r2, #15
    511c:	2a03      	cmp	r2, #3
    511e:	d00b      	beq.n	5138 <_usb_d_dev_handler+0xc8>
    5120:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    5122:	2b05      	cmp	r3, #5
    5124:	d1f4      	bne.n	5110 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    5126:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    5128:	4b6c      	ldr	r3, [pc, #432]	; (52dc <_usb_d_dev_handler+0x26c>)
    512a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    512e:	2003      	movs	r0, #3
    5130:	4798      	blx	r3
    5132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    5136:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    5138:	4b68      	ldr	r3, [pc, #416]	; (52dc <_usb_d_dev_handler+0x26c>)
    513a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    513e:	8919      	ldrh	r1, [r3, #8]
    5140:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    5144:	2200      	movs	r2, #0
    5146:	811a      	strh	r2, [r3, #8]
    5148:	e7ee      	b.n	5128 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    514a:	2280      	movs	r2, #128	; 0x80
    514c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5150:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    5152:	4b62      	ldr	r3, [pc, #392]	; (52dc <_usb_d_dev_handler+0x26c>)
    5154:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    5158:	2100      	movs	r1, #0
    515a:	2005      	movs	r0, #5
    515c:	4798      	blx	r3
    515e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5162:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5166:	2270      	movs	r2, #112	; 0x70
    5168:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    516a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    516c:	f240 2201 	movw	r2, #513	; 0x201
    5170:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5172:	4b5b      	ldr	r3, [pc, #364]	; (52e0 <_usb_d_dev_handler+0x270>)
    5174:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    5178:	f013 0f01 	tst.w	r3, #1
    517c:	d00e      	beq.n	519c <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    517e:	4a58      	ldr	r2, [pc, #352]	; (52e0 <_usb_d_dev_handler+0x270>)
    5180:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    5182:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    5186:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    518a:	d1f9      	bne.n	5180 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    518c:	4b53      	ldr	r3, [pc, #332]	; (52dc <_usb_d_dev_handler+0x26c>)
    518e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    5192:	2100      	movs	r1, #0
    5194:	2002      	movs	r0, #2
    5196:	4798      	blx	r3
    5198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    519c:	4a50      	ldr	r2, [pc, #320]	; (52e0 <_usb_d_dev_handler+0x270>)
    519e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    51a0:	f413 7f80 	tst.w	r3, #256	; 0x100
    51a4:	d0fb      	beq.n	519e <_usb_d_dev_handler+0x12e>
    51a6:	e7f1      	b.n	518c <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    51a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    51ac:	2400      	movs	r4, #0
    51ae:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    51b2:	2208      	movs	r2, #8
    51b4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    51b6:	2270      	movs	r2, #112	; 0x70
    51b8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    51ba:	f240 2201 	movw	r2, #513	; 0x201
    51be:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    51c0:	4b48      	ldr	r3, [pc, #288]	; (52e4 <_usb_d_dev_handler+0x274>)
    51c2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    51c4:	4b45      	ldr	r3, [pc, #276]	; (52dc <_usb_d_dev_handler+0x26c>)
    51c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    51ca:	4621      	mov	r1, r4
    51cc:	2001      	movs	r0, #1
    51ce:	4798      	blx	r3
    51d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    51d4:	f011 0f10 	tst.w	r1, #16
    51d8:	d109      	bne.n	51ee <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    51da:	f011 0f40 	tst.w	r1, #64	; 0x40
    51de:	d108      	bne.n	51f2 <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    51e0:	f011 0f20 	tst.w	r1, #32
    51e4:	d02f      	beq.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    51e6:	2100      	movs	r1, #0
    51e8:	4b3f      	ldr	r3, [pc, #252]	; (52e8 <_usb_d_dev_handler+0x278>)
    51ea:	4798      	blx	r3
    51ec:	e02b      	b.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    51ee:	47c8      	blx	r9
    51f0:	e029      	b.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    51f2:	2101      	movs	r1, #1
    51f4:	4b3c      	ldr	r3, [pc, #240]	; (52e8 <_usb_d_dev_handler+0x278>)
    51f6:	4798      	blx	r3
    51f8:	e025      	b.n	5246 <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    51fa:	f011 0f40 	tst.w	r1, #64	; 0x40
    51fe:	d111      	bne.n	5224 <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    5200:	f011 0f08 	tst.w	r1, #8
    5204:	d112      	bne.n	522c <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    5206:	f011 0f02 	tst.w	r1, #2
    520a:	d112      	bne.n	5232 <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    520c:	f003 0307 	and.w	r3, r3, #7
    5210:	2b01      	cmp	r3, #1
    5212:	d118      	bne.n	5246 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    5214:	f011 0f04 	tst.w	r1, #4
    5218:	d10f      	bne.n	523a <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    521a:	f011 0f10 	tst.w	r1, #16
    521e:	d012      	beq.n	5246 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    5220:	47c8      	blx	r9
    5222:	e010      	b.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    5224:	2101      	movs	r1, #1
    5226:	4b30      	ldr	r3, [pc, #192]	; (52e8 <_usb_d_dev_handler+0x278>)
    5228:	4798      	blx	r3
    522a:	e00c      	b.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    522c:	2101      	movs	r1, #1
    522e:	47c0      	blx	r8
    5230:	e009      	b.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    5232:	2101      	movs	r1, #1
    5234:	4b2d      	ldr	r3, [pc, #180]	; (52ec <_usb_d_dev_handler+0x27c>)
    5236:	4798      	blx	r3
    5238:	e005      	b.n	5246 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    523a:	2100      	movs	r1, #0
    523c:	47c0      	blx	r8
    523e:	e002      	b.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    5240:	2100      	movs	r1, #0
    5242:	4b29      	ldr	r3, [pc, #164]	; (52e8 <_usb_d_dev_handler+0x278>)
    5244:	4798      	blx	r3
    5246:	3401      	adds	r4, #1
    5248:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    524a:	2c1b      	cmp	r4, #27
    524c:	d042      	beq.n	52d4 <_usb_d_dev_handler+0x264>
    524e:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    5250:	7cab      	ldrb	r3, [r5, #18]
    5252:	2bff      	cmp	r3, #255	; 0xff
    5254:	d0f7      	beq.n	5246 <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    5256:	f003 030f 	and.w	r3, r3, #15
    525a:	2101      	movs	r1, #1
    525c:	4099      	lsls	r1, r3
    525e:	4231      	tst	r1, r6
    5260:	d0f1      	beq.n	5246 <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    5262:	0159      	lsls	r1, r3, #5
    5264:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    5268:	f501 7180 	add.w	r1, r1, #256	; 0x100
    526c:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    526e:	015b      	lsls	r3, r3, #5
    5270:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5274:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    5278:	4019      	ands	r1, r3
    527a:	d0e4      	beq.n	5246 <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    527c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    5280:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    5284:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    5288:	f003 0247 	and.w	r2, r3, #71	; 0x47
    528c:	2a01      	cmp	r2, #1
    528e:	d0a1      	beq.n	51d4 <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    5290:	f013 0f80 	tst.w	r3, #128	; 0x80
    5294:	d1b1      	bne.n	51fa <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    5296:	f011 0f20 	tst.w	r1, #32
    529a:	d1d1      	bne.n	5240 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    529c:	f011 0f04 	tst.w	r1, #4
    52a0:	d10e      	bne.n	52c0 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    52a2:	f011 0f01 	tst.w	r1, #1
    52a6:	d10e      	bne.n	52c6 <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    52a8:	f003 0307 	and.w	r3, r3, #7
    52ac:	2b01      	cmp	r3, #1
    52ae:	d1ca      	bne.n	5246 <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    52b0:	f011 0f08 	tst.w	r1, #8
    52b4:	d10b      	bne.n	52ce <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    52b6:	f011 0f10 	tst.w	r1, #16
    52ba:	d0c4      	beq.n	5246 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    52bc:	47c8      	blx	r9
    52be:	e7c2      	b.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    52c0:	2100      	movs	r1, #0
    52c2:	47c0      	blx	r8
    52c4:	e7bf      	b.n	5246 <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    52c6:	2101      	movs	r1, #1
    52c8:	4b09      	ldr	r3, [pc, #36]	; (52f0 <_usb_d_dev_handler+0x280>)
    52ca:	4798      	blx	r3
    52cc:	e7bb      	b.n	5246 <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    52ce:	2101      	movs	r1, #1
    52d0:	47c0      	blx	r8
    52d2:	e7b8      	b.n	5246 <_usb_d_dev_handler+0x1d6>
    52d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    52d8:	20000a4c 	.word	0x20000a4c
    52dc:	20000978 	.word	0x20000978
    52e0:	40001000 	.word	0x40001000
    52e4:	00004cb9 	.word	0x00004cb9
    52e8:	00004af1 	.word	0x00004af1
    52ec:	00004cfd 	.word	0x00004cfd
    52f0:	00004e81 	.word	0x00004e81
    52f4:	00004a71 	.word	0x00004a71
    52f8:	00004bb9 	.word	0x00004bb9

000052fc <_usb_d_dev_init>:
{
    52fc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    52fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5302:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    5304:	f013 0f01 	tst.w	r3, #1
    5308:	d124      	bne.n	5354 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    530a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    530e:	7893      	ldrb	r3, [r2, #2]
    5310:	f013 0f03 	tst.w	r3, #3
    5314:	d1fb      	bne.n	530e <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    5316:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    531a:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    531c:	f013 0f02 	tst.w	r3, #2
    5320:	d00f      	beq.n	5342 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    5322:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5326:	7813      	ldrb	r3, [r2, #0]
    5328:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    532c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    532e:	7893      	ldrb	r3, [r2, #2]
    5330:	f013 0f03 	tst.w	r3, #3
    5334:	d1fb      	bne.n	532e <_usb_d_dev_init+0x32>
    5336:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    533a:	7893      	ldrb	r3, [r2, #2]
    533c:	f013 0f02 	tst.w	r3, #2
    5340:	d1fb      	bne.n	533a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    5342:	2201      	movs	r2, #1
    5344:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5348:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    534a:	461a      	mov	r2, r3
    534c:	7893      	ldrb	r3, [r2, #2]
    534e:	f013 0f03 	tst.w	r3, #3
    5352:	d1fb      	bne.n	534c <_usb_d_dev_init+0x50>
    5354:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5358:	7893      	ldrb	r3, [r2, #2]
    535a:	f013 0f01 	tst.w	r3, #1
    535e:	d1fb      	bne.n	5358 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    5360:	4b24      	ldr	r3, [pc, #144]	; (53f4 <_usb_d_dev_init+0xf8>)
    5362:	4a25      	ldr	r2, [pc, #148]	; (53f8 <_usb_d_dev_init+0xfc>)
    5364:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    5368:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    536c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    5370:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    5374:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    5378:	4b20      	ldr	r3, [pc, #128]	; (53fc <_usb_d_dev_init+0x100>)
    537a:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    537c:	4b20      	ldr	r3, [pc, #128]	; (5400 <_usb_d_dev_init+0x104>)
    537e:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    5380:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    5384:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    5388:	f011 011f 	ands.w	r1, r1, #31
    538c:	d02b      	beq.n	53e6 <_usb_d_dev_init+0xea>
		pad_transn = 9;
    538e:	291f      	cmp	r1, #31
    5390:	bf08      	it	eq
    5392:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    5394:	b34b      	cbz	r3, 53ea <_usb_d_dev_init+0xee>
		pad_transp = 25;
    5396:	2b1f      	cmp	r3, #31
    5398:	bf08      	it	eq
    539a:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    539c:	b33a      	cbz	r2, 53ee <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    539e:	2a07      	cmp	r2, #7
    53a0:	bf08      	it	eq
    53a2:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    53a4:	f003 031f 	and.w	r3, r3, #31
    53a8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    53ac:	0312      	lsls	r2, r2, #12
    53ae:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    53b2:	4313      	orrs	r3, r2
    53b4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    53b8:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    53ba:	78d3      	ldrb	r3, [r2, #3]
    53bc:	f043 0303 	orr.w	r3, r3, #3
    53c0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    53c2:	78d3      	ldrb	r3, [r2, #3]
    53c4:	f043 030c 	orr.w	r3, r3, #12
    53c8:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    53ca:	2304      	movs	r3, #4
    53cc:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    53ce:	7893      	ldrb	r3, [r2, #2]
    53d0:	f013 0f03 	tst.w	r3, #3
    53d4:	d1fb      	bne.n	53ce <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    53d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    53da:	4a06      	ldr	r2, [pc, #24]	; (53f4 <_usb_d_dev_init+0xf8>)
    53dc:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    53de:	2201      	movs	r2, #1
    53e0:	811a      	strh	r2, [r3, #8]
}
    53e2:	2000      	movs	r0, #0
    53e4:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    53e6:	2109      	movs	r1, #9
    53e8:	e7d4      	b.n	5394 <_usb_d_dev_init+0x98>
		pad_transp = 25;
    53ea:	2319      	movs	r3, #25
    53ec:	e7d6      	b.n	539c <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    53ee:	2206      	movs	r2, #6
    53f0:	e7d8      	b.n	53a4 <_usb_d_dev_init+0xa8>
    53f2:	bf00      	nop
    53f4:	20000978 	.word	0x20000978
    53f8:	00004a6d 	.word	0x00004a6d
    53fc:	00004cb9 	.word	0x00004cb9
    5400:	00800084 	.word	0x00800084

00005404 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    5404:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5408:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    540a:	f013 0f03 	tst.w	r3, #3
    540e:	d129      	bne.n	5464 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5410:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5414:	7893      	ldrb	r3, [r2, #2]
    5416:	f013 0f03 	tst.w	r3, #3
    541a:	d1fb      	bne.n	5414 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    541c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5420:	781b      	ldrb	r3, [r3, #0]
    5422:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    5424:	f013 0f02 	tst.w	r3, #2
    5428:	d108      	bne.n	543c <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    542a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    542e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5432:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5434:	7893      	ldrb	r3, [r2, #2]
    5436:	f013 0f03 	tst.w	r3, #3
    543a:	d1fb      	bne.n	5434 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    543c:	4b0b      	ldr	r3, [pc, #44]	; (546c <_usb_d_dev_enable+0x68>)
    543e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5442:	609a      	str	r2, [r3, #8]
    5444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5448:	609a      	str	r2, [r3, #8]
    544a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    544e:	609a      	str	r2, [r3, #8]
    5450:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    5454:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5456:	f240 228d 	movw	r2, #653	; 0x28d
    545a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    545e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    5460:	2000      	movs	r0, #0
    5462:	4770      	bx	lr
		return -USB_ERR_DENIED;
    5464:	f06f 0010 	mvn.w	r0, #16
}
    5468:	4770      	bx	lr
    546a:	bf00      	nop
    546c:	e000e100 	.word	0xe000e100

00005470 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    5470:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5474:	8913      	ldrh	r3, [r2, #8]
    5476:	f023 0301 	bic.w	r3, r3, #1
    547a:	041b      	lsls	r3, r3, #16
    547c:	0c1b      	lsrs	r3, r3, #16
    547e:	8113      	strh	r3, [r2, #8]
    5480:	4770      	bx	lr

00005482 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    5482:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    5486:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    548a:	7298      	strb	r0, [r3, #10]
    548c:	4770      	bx	lr
	...

00005490 <_usb_d_dev_ep_init>:
{
    5490:	b5f0      	push	{r4, r5, r6, r7, lr}
    5492:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5496:	f010 050f 	ands.w	r5, r0, #15
    549a:	d04d      	beq.n	5538 <_usb_d_dev_ep_init+0xa8>
    549c:	f1be 0f00 	cmp.w	lr, #0
    54a0:	bfb4      	ite	lt
    54a2:	1d6c      	addlt	r4, r5, #5
    54a4:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    54a6:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    54aa:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    54ac:	2d05      	cmp	r5, #5
    54ae:	d947      	bls.n	5540 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    54b0:	f06f 0011 	mvn.w	r0, #17
    54b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    54b6:	f1be 0f00 	cmp.w	lr, #0
    54ba:	db1b      	blt.n	54f4 <_usb_d_dev_ep_init+0x64>
    54bc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    54c0:	4e37      	ldr	r6, [pc, #220]	; (55a0 <_usb_d_dev_ep_init+0x110>)
    54c2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    54c6:	2d00      	cmp	r5, #0
    54c8:	d15e      	bne.n	5588 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    54ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    54ce:	4d34      	ldr	r5, [pc, #208]	; (55a0 <_usb_d_dev_ep_init+0x110>)
    54d0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    54d4:	4d33      	ldr	r5, [pc, #204]	; (55a4 <_usb_d_dev_ep_init+0x114>)
    54d6:	00a6      	lsls	r6, r4, #2
    54d8:	1933      	adds	r3, r6, r4
    54da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    54de:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    54e2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    54e6:	3101      	adds	r1, #1
    54e8:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    54ec:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    54f0:	2000      	movs	r0, #0
    54f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    54f4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    54f8:	4e29      	ldr	r6, [pc, #164]	; (55a0 <_usb_d_dev_ep_init+0x110>)
    54fa:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    54fe:	686d      	ldr	r5, [r5, #4]
    5500:	b935      	cbnz	r5, 5510 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    5502:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5506:	4d26      	ldr	r5, [pc, #152]	; (55a0 <_usb_d_dev_ep_init+0x110>)
    5508:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    550c:	685f      	ldr	r7, [r3, #4]
    550e:	e7e1      	b.n	54d4 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5510:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5514:	4e22      	ldr	r6, [pc, #136]	; (55a0 <_usb_d_dev_ep_init+0x110>)
    5516:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    551a:	896d      	ldrh	r5, [r5, #10]
    551c:	4295      	cmp	r5, r2
    551e:	daf0      	bge.n	5502 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    5520:	f06f 0012 	mvn.w	r0, #18
    5524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    5526:	f06f 0013 	mvn.w	r0, #19
    552a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    552c:	f06f 0013 	mvn.w	r0, #19
    5530:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    5532:	f06f 0012 	mvn.w	r0, #18
    5536:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    5538:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    553c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    553e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    5540:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    5544:	4f17      	ldr	r7, [pc, #92]	; (55a4 <_usb_d_dev_ep_init+0x114>)
    5546:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    554a:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    554e:	2eff      	cmp	r6, #255	; 0xff
    5550:	d1e9      	bne.n	5526 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    5552:	2900      	cmp	r1, #0
    5554:	d1af      	bne.n	54b6 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5556:	b125      	cbz	r5, 5562 <_usb_d_dev_ep_init+0xd2>
    5558:	f1be 0f00 	cmp.w	lr, #0
    555c:	bfa4      	itt	ge
    555e:	3505      	addge	r5, #5
    5560:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    5562:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    5566:	4e0f      	ldr	r6, [pc, #60]	; (55a4 <_usb_d_dev_ep_init+0x114>)
    5568:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    556c:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    5570:	2dff      	cmp	r5, #255	; 0xff
    5572:	d1db      	bne.n	552c <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    5574:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5578:	4e09      	ldr	r6, [pc, #36]	; (55a0 <_usb_d_dev_ep_init+0x110>)
    557a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    557e:	2d00      	cmp	r5, #0
    5580:	d0d7      	beq.n	5532 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5582:	f1be 0f00 	cmp.w	lr, #0
    5586:	dbb5      	blt.n	54f4 <_usb_d_dev_ep_init+0x64>
    5588:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    558c:	4e04      	ldr	r6, [pc, #16]	; (55a0 <_usb_d_dev_ep_init+0x110>)
    558e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5592:	892d      	ldrh	r5, [r5, #8]
    5594:	4295      	cmp	r5, r2
    5596:	da98      	bge.n	54ca <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    5598:	f06f 0012 	mvn.w	r0, #18
    559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    559e:	bf00      	nop
    55a0:	0000b094 	.word	0x0000b094
    55a4:	20000978 	.word	0x20000978

000055a8 <_usb_d_dev_ep_deinit>:
{
    55a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55aa:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    55ac:	f010 060f 	ands.w	r6, r0, #15
    55b0:	d00e      	beq.n	55d0 <_usb_d_dev_ep_deinit+0x28>
    55b2:	2f00      	cmp	r7, #0
    55b4:	bfb4      	ite	lt
    55b6:	1d73      	addlt	r3, r6, #5
    55b8:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    55ba:	2e05      	cmp	r6, #5
    55bc:	d900      	bls.n	55c0 <_usb_d_dev_ep_deinit+0x18>
    55be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    55c0:	461d      	mov	r5, r3
    55c2:	3301      	adds	r3, #1
    55c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    55c8:	4a24      	ldr	r2, [pc, #144]	; (565c <_usb_d_dev_ep_deinit+0xb4>)
    55ca:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    55ce:	e002      	b.n	55d6 <_usb_d_dev_ep_deinit+0x2e>
    55d0:	f8df e094 	ldr.w	lr, [pc, #148]	; 5668 <_usb_d_dev_ep_deinit+0xc0>
    55d4:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    55d6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    55da:	4a21      	ldr	r2, [pc, #132]	; (5660 <_usb_d_dev_ep_deinit+0xb8>)
    55dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    55e0:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    55e4:	2aff      	cmp	r2, #255	; 0xff
    55e6:	d0ea      	beq.n	55be <_usb_d_dev_ep_deinit+0x16>
    55e8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    55ea:	2203      	movs	r2, #3
    55ec:	0ff9      	lsrs	r1, r7, #31
    55ee:	4670      	mov	r0, lr
    55f0:	4b1c      	ldr	r3, [pc, #112]	; (5664 <_usb_d_dev_ep_deinit+0xbc>)
    55f2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    55f4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    55f8:	4a19      	ldr	r2, [pc, #100]	; (5660 <_usb_d_dev_ep_deinit+0xb8>)
    55fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    55fe:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5602:	f003 0307 	and.w	r3, r3, #7
    5606:	2b01      	cmp	r3, #1
    5608:	d016      	beq.n	5638 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    560a:	2f00      	cmp	r7, #0
    560c:	db1b      	blt.n	5646 <_usb_d_dev_ep_deinit+0x9e>
    560e:	0160      	lsls	r0, r4, #5
    5610:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    5614:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    5618:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    561c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    5620:	4b0f      	ldr	r3, [pc, #60]	; (5660 <_usb_d_dev_ep_deinit+0xb8>)
    5622:	00aa      	lsls	r2, r5, #2
    5624:	1951      	adds	r1, r2, r5
    5626:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    562a:	2000      	movs	r0, #0
    562c:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    5630:	22ff      	movs	r2, #255	; 0xff
    5632:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    5636:	e7c2      	b.n	55be <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    5638:	0160      	lsls	r0, r4, #5
    563a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    563e:	2300      	movs	r3, #0
    5640:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    5644:	e7ec      	b.n	5620 <_usb_d_dev_ep_deinit+0x78>
    5646:	0176      	lsls	r6, r6, #5
    5648:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    564c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    5650:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    5654:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    5658:	e7e2      	b.n	5620 <_usb_d_dev_ep_deinit+0x78>
    565a:	bf00      	nop
    565c:	20000a38 	.word	0x20000a38
    5660:	20000978 	.word	0x20000978
    5664:	00004b4d 	.word	0x00004b4d
    5668:	20000a4c 	.word	0x20000a4c

0000566c <_usb_d_dev_ep_enable>:
{
    566c:	b4f0      	push	{r4, r5, r6, r7}
    566e:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5670:	f010 000f 	ands.w	r0, r0, #15
    5674:	f000 80a7 	beq.w	57c6 <_usb_d_dev_ep_enable+0x15a>
    5678:	2e00      	cmp	r6, #0
    567a:	bfb4      	ite	lt
    567c:	1d43      	addlt	r3, r0, #5
    567e:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5680:	4605      	mov	r5, r0
    5682:	0142      	lsls	r2, r0, #5
    5684:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5688:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    568c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    568e:	2805      	cmp	r0, #5
    5690:	f240 80a0 	bls.w	57d4 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    5694:	f06f 0011 	mvn.w	r0, #17
    5698:	e07d      	b.n	5796 <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    569a:	f014 0f77 	tst.w	r4, #119	; 0x77
    569e:	f040 8089 	bne.w	57b4 <_usb_d_dev_ep_enable+0x148>
    56a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    56a6:	2111      	movs	r1, #17
    56a8:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    56ac:	4c9b      	ldr	r4, [pc, #620]	; (591c <_usb_d_dev_ep_enable+0x2b0>)
    56ae:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    56b2:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    56b6:	4c9a      	ldr	r4, [pc, #616]	; (5920 <_usb_d_dev_ep_enable+0x2b4>)
    56b8:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    56bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    56c0:	f200 80cd 	bhi.w	585e <_usb_d_dev_ep_enable+0x1f2>
    56c4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    56c8:	f200 8112 	bhi.w	58f0 <_usb_d_dev_ep_enable+0x284>
    56cc:	2980      	cmp	r1, #128	; 0x80
    56ce:	f200 8101 	bhi.w	58d4 <_usb_d_dev_ep_enable+0x268>
    56d2:	2940      	cmp	r1, #64	; 0x40
    56d4:	f200 8113 	bhi.w	58fe <_usb_d_dev_ep_enable+0x292>
    56d8:	2920      	cmp	r1, #32
    56da:	f200 8102 	bhi.w	58e2 <_usb_d_dev_ep_enable+0x276>
    56de:	2910      	cmp	r1, #16
    56e0:	f200 8114 	bhi.w	590c <_usb_d_dev_ep_enable+0x2a0>
    56e4:	2908      	cmp	r1, #8
    56e6:	bf94      	ite	ls
    56e8:	2600      	movls	r6, #0
    56ea:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    56ec:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    56f0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    56f2:	f3c1 010d 	ubfx	r1, r1, #0, #14
    56f6:	e0b8      	b.n	586a <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    56f8:	f014 0f70 	tst.w	r4, #112	; 0x70
    56fc:	d15d      	bne.n	57ba <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    56fe:	4e87      	ldr	r6, [pc, #540]	; (591c <_usb_d_dev_ep_enable+0x2b0>)
    5700:	009f      	lsls	r7, r3, #2
    5702:	18f9      	adds	r1, r7, r3
    5704:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    5708:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    570c:	0109      	lsls	r1, r1, #4
    570e:	f001 0170 	and.w	r1, r1, #112	; 0x70
    5712:	430c      	orrs	r4, r1
    5714:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5718:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    571c:	443b      	add	r3, r7
    571e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    5722:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    5726:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    572a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    572e:	d80f      	bhi.n	5750 <_usb_d_dev_ep_enable+0xe4>
    5730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5734:	d819      	bhi.n	576a <_usb_d_dev_ep_enable+0xfe>
    5736:	2b80      	cmp	r3, #128	; 0x80
    5738:	d819      	bhi.n	576e <_usb_d_dev_ep_enable+0x102>
    573a:	2b40      	cmp	r3, #64	; 0x40
    573c:	d819      	bhi.n	5772 <_usb_d_dev_ep_enable+0x106>
    573e:	2b20      	cmp	r3, #32
    5740:	d819      	bhi.n	5776 <_usb_d_dev_ep_enable+0x10a>
    5742:	2b10      	cmp	r3, #16
    5744:	d819      	bhi.n	577a <_usb_d_dev_ep_enable+0x10e>
    5746:	2b08      	cmp	r3, #8
    5748:	bf94      	ite	ls
    574a:	2300      	movls	r3, #0
    574c:	2301      	movhi	r3, #1
    574e:	e000      	b.n	5752 <_usb_d_dev_ep_enable+0xe6>
    5750:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5752:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    5756:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5758:	2380      	movs	r3, #128	; 0x80
    575a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    575e:	4b6f      	ldr	r3, [pc, #444]	; (591c <_usb_d_dev_ep_enable+0x2b0>)
    5760:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    5764:	2000      	movs	r0, #0
    5766:	76a8      	strb	r0, [r5, #26]
    5768:	e015      	b.n	5796 <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    576a:	2306      	movs	r3, #6
    576c:	e7f1      	b.n	5752 <_usb_d_dev_ep_enable+0xe6>
    576e:	2305      	movs	r3, #5
    5770:	e7ef      	b.n	5752 <_usb_d_dev_ep_enable+0xe6>
    5772:	2304      	movs	r3, #4
    5774:	e7ed      	b.n	5752 <_usb_d_dev_ep_enable+0xe6>
    5776:	2303      	movs	r3, #3
    5778:	e7eb      	b.n	5752 <_usb_d_dev_ep_enable+0xe6>
    577a:	2302      	movs	r3, #2
    577c:	e7e9      	b.n	5752 <_usb_d_dev_ep_enable+0xe6>
    577e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5780:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5784:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5786:	2340      	movs	r3, #64	; 0x40
    5788:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    578c:	4b63      	ldr	r3, [pc, #396]	; (591c <_usb_d_dev_ep_enable+0x2b0>)
    578e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    5792:	2000      	movs	r0, #0
    5794:	72a8      	strb	r0, [r5, #10]
}
    5796:	bcf0      	pop	{r4, r5, r6, r7}
    5798:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    579a:	2106      	movs	r1, #6
    579c:	e7f0      	b.n	5780 <_usb_d_dev_ep_enable+0x114>
    579e:	2105      	movs	r1, #5
    57a0:	e7ee      	b.n	5780 <_usb_d_dev_ep_enable+0x114>
    57a2:	2104      	movs	r1, #4
    57a4:	e7ec      	b.n	5780 <_usb_d_dev_ep_enable+0x114>
    57a6:	2103      	movs	r1, #3
    57a8:	e7ea      	b.n	5780 <_usb_d_dev_ep_enable+0x114>
    57aa:	2102      	movs	r1, #2
    57ac:	e7e8      	b.n	5780 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    57ae:	f06f 0011 	mvn.w	r0, #17
    57b2:	e7f0      	b.n	5796 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    57b4:	f06f 0013 	mvn.w	r0, #19
    57b8:	e7ed      	b.n	5796 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    57ba:	f06f 0013 	mvn.w	r0, #19
    57be:	e7ea      	b.n	5796 <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    57c0:	f06f 0013 	mvn.w	r0, #19
    57c4:	e7e7      	b.n	5796 <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    57c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    57ca:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    57ce:	b2e4      	uxtb	r4, r4
    57d0:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    57d2:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    57d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    57d8:	4950      	ldr	r1, [pc, #320]	; (591c <_usb_d_dev_ep_enable+0x2b0>)
    57da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    57de:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    57e2:	2aff      	cmp	r2, #255	; 0xff
    57e4:	d0e3      	beq.n	57ae <_usb_d_dev_ep_enable+0x142>
    57e6:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    57e8:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    57ea:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    57ee:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    57f2:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    57f6:	f001 0107 	and.w	r1, r1, #7
    57fa:	2901      	cmp	r1, #1
    57fc:	f43f af4d 	beq.w	569a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    5800:	2e00      	cmp	r6, #0
    5802:	f6ff af79 	blt.w	56f8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    5806:	f014 0f07 	tst.w	r4, #7
    580a:	d1d9      	bne.n	57c0 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    580c:	4e43      	ldr	r6, [pc, #268]	; (591c <_usb_d_dev_ep_enable+0x2b0>)
    580e:	009f      	lsls	r7, r3, #2
    5810:	18f9      	adds	r1, r7, r3
    5812:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    5816:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    581a:	f001 0107 	and.w	r1, r1, #7
    581e:	430c      	orrs	r4, r1
    5820:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5824:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5828:	443b      	add	r3, r7
    582a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    582e:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    5832:	4b3b      	ldr	r3, [pc, #236]	; (5920 <_usb_d_dev_ep_enable+0x2b4>)
    5834:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5838:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    583c:	d89f      	bhi.n	577e <_usb_d_dev_ep_enable+0x112>
    583e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5842:	d8aa      	bhi.n	579a <_usb_d_dev_ep_enable+0x12e>
    5844:	2980      	cmp	r1, #128	; 0x80
    5846:	d8aa      	bhi.n	579e <_usb_d_dev_ep_enable+0x132>
    5848:	2940      	cmp	r1, #64	; 0x40
    584a:	d8aa      	bhi.n	57a2 <_usb_d_dev_ep_enable+0x136>
    584c:	2920      	cmp	r1, #32
    584e:	d8aa      	bhi.n	57a6 <_usb_d_dev_ep_enable+0x13a>
    5850:	2910      	cmp	r1, #16
    5852:	d8aa      	bhi.n	57aa <_usb_d_dev_ep_enable+0x13e>
    5854:	2908      	cmp	r1, #8
    5856:	bf94      	ite	ls
    5858:	2100      	movls	r1, #0
    585a:	2101      	movhi	r1, #1
    585c:	e790      	b.n	5780 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    585e:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5862:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5864:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5868:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    586a:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    586e:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5870:	2640      	movs	r6, #64	; 0x40
    5872:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5876:	2180      	movs	r1, #128	; 0x80
    5878:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    587c:	4f27      	ldr	r7, [pc, #156]	; (591c <_usb_d_dev_ep_enable+0x2b0>)
    587e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    5882:	2000      	movs	r0, #0
    5884:	72a8      	strb	r0, [r5, #10]
    5886:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5888:	009c      	lsls	r4, r3, #2
    588a:	18e1      	adds	r1, r4, r3
    588c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    5890:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    5894:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5898:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    589c:	0152      	lsls	r2, r2, #5
    589e:	18b9      	adds	r1, r7, r2
    58a0:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    58a2:	4423      	add	r3, r4
    58a4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    58a8:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    58ac:	684b      	ldr	r3, [r1, #4]
    58ae:	f364 339b 	bfi	r3, r4, #14, #14
    58b2:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    58b4:	684b      	ldr	r3, [r1, #4]
    58b6:	f360 030d 	bfi	r3, r0, #0, #14
    58ba:	604b      	str	r3, [r1, #4]
    58bc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    58c0:	21b0      	movs	r1, #176	; 0xb0
    58c2:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    58c6:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    58ca:	461a      	mov	r2, r3
    58cc:	2310      	movs	r3, #16
    58ce:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    58d2:	e760      	b.n	5796 <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    58d4:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    58d8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    58da:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    58de:	2605      	movs	r6, #5
    58e0:	e7c3      	b.n	586a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    58e2:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    58e6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    58e8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    58ec:	2603      	movs	r6, #3
    58ee:	e7bc      	b.n	586a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    58f0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    58f4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    58f6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    58fa:	2606      	movs	r6, #6
    58fc:	e7b5      	b.n	586a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    58fe:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5902:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5904:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5908:	2604      	movs	r6, #4
    590a:	e7ae      	b.n	586a <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    590c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5910:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5912:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5916:	2602      	movs	r6, #2
    5918:	e7a7      	b.n	586a <_usb_d_dev_ep_enable+0x1fe>
    591a:	bf00      	nop
    591c:	20000978 	.word	0x20000978
    5920:	0fffc000 	.word	0x0fffc000

00005924 <_usb_d_dev_ep_stall>:
{
    5924:	b470      	push	{r4, r5, r6}
    5926:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    5928:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    592a:	f010 000f 	ands.w	r0, r0, #15
    592e:	d008      	beq.n	5942 <_usb_d_dev_ep_stall+0x1e>
    5930:	2b00      	cmp	r3, #0
    5932:	bfb4      	ite	lt
    5934:	1d43      	addlt	r3, r0, #5
    5936:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    5938:	2805      	cmp	r0, #5
    593a:	d903      	bls.n	5944 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    593c:	f06f 0011 	mvn.w	r0, #17
    5940:	e018      	b.n	5974 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    5942:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    5944:	2901      	cmp	r1, #1
    5946:	d017      	beq.n	5978 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    5948:	2900      	cmp	r1, #0
    594a:	d03a      	beq.n	59c2 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    594c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5950:	4a45      	ldr	r2, [pc, #276]	; (5a68 <_usb_d_dev_ep_stall+0x144>)
    5952:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5956:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    595a:	f003 030f 	and.w	r3, r3, #15
    595e:	015b      	lsls	r3, r3, #5
    5960:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5964:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5968:	2310      	movs	r3, #16
    596a:	40a3      	lsls	r3, r4
    596c:	421a      	tst	r2, r3
    596e:	bf14      	ite	ne
    5970:	2001      	movne	r0, #1
    5972:	2000      	moveq	r0, #0
}
    5974:	bc70      	pop	{r4, r5, r6}
    5976:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5978:	2510      	movs	r5, #16
    597a:	40a5      	lsls	r5, r4
    597c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    597e:	493a      	ldr	r1, [pc, #232]	; (5a68 <_usb_d_dev_ep_stall+0x144>)
    5980:	009e      	lsls	r6, r3, #2
    5982:	18f2      	adds	r2, r6, r3
    5984:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5988:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    598c:	f002 020f 	and.w	r2, r2, #15
    5990:	0150      	lsls	r0, r2, #5
    5992:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5996:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    599a:	2020      	movs	r0, #32
    599c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    59a0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    59a2:	0152      	lsls	r2, r2, #5
    59a4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    59a8:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    59ac:	4433      	add	r3, r6
    59ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    59b2:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    59b6:	f042 0208 	orr.w	r2, r2, #8
    59ba:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    59be:	2000      	movs	r0, #0
    59c0:	e7d8      	b.n	5974 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    59c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    59c6:	4928      	ldr	r1, [pc, #160]	; (5a68 <_usb_d_dev_ep_stall+0x144>)
    59c8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    59cc:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    59d0:	f002 020f 	and.w	r2, r2, #15
    59d4:	0151      	lsls	r1, r2, #5
    59d6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    59da:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    59de:	2010      	movs	r0, #16
    59e0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    59e2:	4205      	tst	r5, r0
    59e4:	d03c      	beq.n	5a60 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    59e6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    59e8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    59ec:	2020      	movs	r0, #32
    59ee:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    59f0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    59f2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    59f6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    59fa:	4202      	tst	r2, r0
    59fc:	d007      	beq.n	5a0e <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    59fe:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    5a02:	2201      	movs	r2, #1
    5a04:	fa02 f404 	lsl.w	r4, r2, r4
    5a08:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5a0a:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    5a0e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5a12:	4815      	ldr	r0, [pc, #84]	; (5a68 <_usb_d_dev_ep_stall+0x144>)
    5a14:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5a18:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    5a1c:	f002 0207 	and.w	r2, r2, #7
    5a20:	2a01      	cmp	r2, #1
    5a22:	d00c      	beq.n	5a3e <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    5a24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5a28:	4a0f      	ldr	r2, [pc, #60]	; (5a68 <_usb_d_dev_ep_stall+0x144>)
    5a2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5a2e:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5a32:	f36f 02c3 	bfc	r2, #3, #1
    5a36:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    5a3a:	2000      	movs	r0, #0
    5a3c:	e79a      	b.n	5974 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5a3e:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    5a42:	f012 0f30 	tst.w	r2, #48	; 0x30
    5a46:	d10d      	bne.n	5a64 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    5a48:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5a4c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    5a50:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    5a54:	f36f 02c3 	bfc	r2, #3, #1
    5a58:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    5a5c:	2000      	movs	r0, #0
    5a5e:	e789      	b.n	5974 <_usb_d_dev_ep_stall+0x50>
    5a60:	2000      	movs	r0, #0
    5a62:	e787      	b.n	5974 <_usb_d_dev_ep_stall+0x50>
    5a64:	2000      	movs	r0, #0
    5a66:	e785      	b.n	5974 <_usb_d_dev_ep_stall+0x50>
    5a68:	20000978 	.word	0x20000978

00005a6c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    5a6c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    5a6e:	f000 040f 	and.w	r4, r0, #15
    5a72:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    5a74:	4a14      	ldr	r2, [pc, #80]	; (5ac8 <_usb_d_dev_ep_read_req+0x5c>)
    5a76:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    5a78:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    5a7a:	6840      	ldr	r0, [r0, #4]
    5a7c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5a80:	2c05      	cmp	r4, #5
    5a82:	d817      	bhi.n	5ab4 <_usb_d_dev_ep_read_req+0x48>
    5a84:	b1c9      	cbz	r1, 5aba <_usb_d_dev_ep_read_req+0x4e>
    5a86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5a8a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    5a8e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5a90:	2a11      	cmp	r2, #17
    5a92:	d115      	bne.n	5ac0 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5a94:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    5a98:	f012 0f10 	tst.w	r2, #16
    5a9c:	d102      	bne.n	5aa4 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    5a9e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    5aa0:	bc30      	pop	{r4, r5}
    5aa2:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    5aa4:	682c      	ldr	r4, [r5, #0]
    5aa6:	686a      	ldr	r2, [r5, #4]
    5aa8:	600c      	str	r4, [r1, #0]
    5aaa:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5aac:	2210      	movs	r2, #16
    5aae:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    5ab2:	e7f5      	b.n	5aa0 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    5ab4:	f06f 0011 	mvn.w	r0, #17
    5ab8:	e7f2      	b.n	5aa0 <_usb_d_dev_ep_read_req+0x34>
    5aba:	f06f 0011 	mvn.w	r0, #17
    5abe:	e7ef      	b.n	5aa0 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    5ac0:	f06f 0012 	mvn.w	r0, #18
    5ac4:	e7ec      	b.n	5aa0 <_usb_d_dev_ep_read_req+0x34>
    5ac6:	bf00      	nop
    5ac8:	20000978 	.word	0x20000978

00005acc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    5acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ad0:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5ad2:	7a03      	ldrb	r3, [r0, #8]
    5ad4:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5ad6:	f013 030f 	ands.w	r3, r3, #15
    5ada:	f000 80c2 	beq.w	5c62 <_usb_d_dev_ep_trans+0x196>
    5ade:	2e00      	cmp	r6, #0
    5ae0:	bfb4      	ite	lt
    5ae2:	1d5a      	addlt	r2, r3, #5
    5ae4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    5ae6:	4614      	mov	r4, r2
    5ae8:	4969      	ldr	r1, [pc, #420]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5aea:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    5aee:	1c55      	adds	r5, r2, #1
    5af0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    5af4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5af8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5afc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5b00:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    5b04:	f240 31ff 	movw	r1, #1023	; 0x3ff
    5b08:	428a      	cmp	r2, r1
    5b0a:	d025      	beq.n	5b58 <_usb_d_dev_ep_trans+0x8c>
    5b0c:	1e55      	subs	r5, r2, #1
    5b0e:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    5b10:	6841      	ldr	r1, [r0, #4]
    5b12:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    5b14:	2b05      	cmp	r3, #5
    5b16:	f200 8092 	bhi.w	5c3e <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    5b1a:	6803      	ldr	r3, [r0, #0]
    5b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5b20:	d31c      	bcc.n	5b5c <_usb_d_dev_ep_trans+0x90>
    5b22:	eb03 0c01 	add.w	ip, r3, r1
    5b26:	f8df e180 	ldr.w	lr, [pc, #384]	; 5ca8 <_usb_d_dev_ep_trans+0x1dc>
    5b2a:	45f4      	cmp	ip, lr
    5b2c:	d816      	bhi.n	5b5c <_usb_d_dev_ep_trans+0x90>
    5b2e:	f013 0f03 	tst.w	r3, #3
    5b32:	d113      	bne.n	5b5c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    5b34:	2e00      	cmp	r6, #0
    5b36:	db2a      	blt.n	5b8e <_usb_d_dev_ep_trans+0xc2>
    5b38:	428a      	cmp	r2, r1
    5b3a:	f200 809c 	bhi.w	5c76 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    5b3e:	b34d      	cbz	r5, 5b94 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    5b40:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5b44:	4a52      	ldr	r2, [pc, #328]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5b46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d07b      	beq.n	5c4a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    5b52:	f04f 0800 	mov.w	r8, #0
    5b56:	e00c      	b.n	5b72 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5b58:	4615      	mov	r5, r2
    5b5a:	e7d9      	b.n	5b10 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    5b5c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5b60:	4a4b      	ldr	r2, [pc, #300]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5b62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d06a      	beq.n	5c44 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    5b6e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    5b72:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5b76:	4a46      	ldr	r2, [pc, #280]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5b78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5b7c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5b80:	f013 0f08 	tst.w	r3, #8
    5b84:	d009      	beq.n	5b9a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    5b86:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    5b88:	b003      	add	sp, #12
    5b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    5b8e:	f04f 0800 	mov.w	r8, #0
    5b92:	e7ee      	b.n	5b72 <_usb_d_dev_ep_trans+0xa6>
    5b94:	f04f 0800 	mov.w	r8, #0
    5b98:	e7eb      	b.n	5b72 <_usb_d_dev_ep_trans+0xa6>
    5b9a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    5b9c:	a801      	add	r0, sp, #4
    5b9e:	4b3d      	ldr	r3, [pc, #244]	; (5c94 <_usb_d_dev_ep_trans+0x1c8>)
    5ba0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5ba2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5ba6:	4a3a      	ldr	r2, [pc, #232]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5ba8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5bac:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5bb0:	f013 0f40 	tst.w	r3, #64	; 0x40
    5bb4:	d13c      	bne.n	5c30 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    5bb6:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    5bba:	4b35      	ldr	r3, [pc, #212]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5bbc:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5bc0:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    5bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5bc8:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    5bcc:	a801      	add	r0, sp, #4
    5bce:	4b32      	ldr	r3, [pc, #200]	; (5c98 <_usb_d_dev_ep_trans+0x1cc>)
    5bd0:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    5bd2:	f8da 3000 	ldr.w	r3, [sl]
    5bd6:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    5bda:	f8da 3004 	ldr.w	r3, [sl, #4]
    5bde:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    5be2:	2300      	movs	r3, #0
    5be4:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    5be8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    5bea:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    5bee:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    5bf2:	f368 1345 	bfi	r3, r8, #5, #1
    5bf6:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    5bfa:	f89a 3009 	ldrb.w	r3, [sl, #9]
    5bfe:	b1e3      	cbz	r3, 5c3a <_usb_d_dev_ep_trans+0x16e>
    5c00:	fab5 f585 	clz	r5, r5
    5c04:	096d      	lsrs	r5, r5, #5
    5c06:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5c0a:	4b21      	ldr	r3, [pc, #132]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5c0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5c10:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    5c14:	f365 1304 	bfi	r3, r5, #4, #1
    5c18:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    5c1c:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    5c1e:	f04f 0100 	mov.w	r1, #0
    5c22:	4638      	mov	r0, r7
    5c24:	bfb4      	ite	lt
    5c26:	4b1d      	ldrlt	r3, [pc, #116]	; (5c9c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    5c28:	4b1d      	ldrge	r3, [pc, #116]	; (5ca0 <_usb_d_dev_ep_trans+0x1d4>)
    5c2a:	4798      	blx	r3
	return ERR_NONE;
    5c2c:	2000      	movs	r0, #0
    5c2e:	e7ab      	b.n	5b88 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    5c30:	a801      	add	r0, sp, #4
    5c32:	4b19      	ldr	r3, [pc, #100]	; (5c98 <_usb_d_dev_ep_trans+0x1cc>)
    5c34:	4798      	blx	r3
		return USB_BUSY;
    5c36:	2001      	movs	r0, #1
    5c38:	e7a6      	b.n	5b88 <_usb_d_dev_ep_trans+0xbc>
    5c3a:	2500      	movs	r5, #0
    5c3c:	e7e3      	b.n	5c06 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    5c3e:	f06f 0011 	mvn.w	r0, #17
    5c42:	e7a1      	b.n	5b88 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5c44:	f06f 0012 	mvn.w	r0, #18
    5c48:	e79e      	b.n	5b88 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    5c4a:	f06f 0011 	mvn.w	r0, #17
    5c4e:	e79b      	b.n	5b88 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5c50:	f06f 0012 	mvn.w	r0, #18
    5c54:	e798      	b.n	5b88 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    5c56:	6841      	ldr	r1, [r0, #4]
    5c58:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    5c5c:	4f11      	ldr	r7, [pc, #68]	; (5ca4 <_usb_d_dev_ep_trans+0x1d8>)
    5c5e:	2400      	movs	r4, #0
    5c60:	e75b      	b.n	5b1a <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5c62:	4a0b      	ldr	r2, [pc, #44]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5c64:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    5c68:	f240 31ff 	movw	r1, #1023	; 0x3ff
    5c6c:	428a      	cmp	r2, r1
    5c6e:	d0f2      	beq.n	5c56 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    5c70:	4f0c      	ldr	r7, [pc, #48]	; (5ca4 <_usb_d_dev_ep_trans+0x1d8>)
    5c72:	2400      	movs	r4, #0
    5c74:	e74a      	b.n	5b0c <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    5c76:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5c7a:	4a05      	ldr	r2, [pc, #20]	; (5c90 <_usb_d_dev_ep_trans+0x1c4>)
    5c7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5c84:	2b00      	cmp	r3, #0
    5c86:	d0e3      	beq.n	5c50 <_usb_d_dev_ep_trans+0x184>
    5c88:	f04f 0801 	mov.w	r8, #1
    5c8c:	e771      	b.n	5b72 <_usb_d_dev_ep_trans+0xa6>
    5c8e:	bf00      	nop
    5c90:	20000978 	.word	0x20000978
    5c94:	000012d9 	.word	0x000012d9
    5c98:	000012e7 	.word	0x000012e7
    5c9c:	00004cfd 	.word	0x00004cfd
    5ca0:	00004e81 	.word	0x00004e81
    5ca4:	20000a4c 	.word	0x20000a4c
    5ca8:	20041fff 	.word	0x20041fff

00005cac <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5cac:	4b07      	ldr	r3, [pc, #28]	; (5ccc <_usb_d_dev_register_callback+0x20>)
    5cae:	2900      	cmp	r1, #0
    5cb0:	bf08      	it	eq
    5cb2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5cb4:	2801      	cmp	r0, #1
    5cb6:	d004      	beq.n	5cc2 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    5cb8:	b910      	cbnz	r0, 5cc0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    5cba:	4b05      	ldr	r3, [pc, #20]	; (5cd0 <_usb_d_dev_register_callback+0x24>)
    5cbc:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    5cc0:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5cc2:	4b03      	ldr	r3, [pc, #12]	; (5cd0 <_usb_d_dev_register_callback+0x24>)
    5cc4:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    5cc8:	4770      	bx	lr
    5cca:	bf00      	nop
    5ccc:	00004a6d 	.word	0x00004a6d
    5cd0:	20000978 	.word	0x20000978

00005cd4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5cd4:	4b0a      	ldr	r3, [pc, #40]	; (5d00 <_usb_d_dev_register_ep_callback+0x2c>)
    5cd6:	2900      	cmp	r1, #0
    5cd8:	bf08      	it	eq
    5cda:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    5cdc:	4603      	mov	r3, r0
    5cde:	b138      	cbz	r0, 5cf0 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    5ce0:	2801      	cmp	r0, #1
    5ce2:	d009      	beq.n	5cf8 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    5ce4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    5ce6:	bf04      	itt	eq
    5ce8:	4b06      	ldreq	r3, [pc, #24]	; (5d04 <_usb_d_dev_register_ep_callback+0x30>)
    5cea:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    5cee:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    5cf0:	4b04      	ldr	r3, [pc, #16]	; (5d04 <_usb_d_dev_register_ep_callback+0x30>)
    5cf2:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    5cf6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    5cf8:	4b02      	ldr	r3, [pc, #8]	; (5d04 <_usb_d_dev_register_ep_callback+0x30>)
    5cfa:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    5cfe:	4770      	bx	lr
    5d00:	00004a6d 	.word	0x00004a6d
    5d04:	20000978 	.word	0x20000978

00005d08 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    5d08:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5d0a:	4b01      	ldr	r3, [pc, #4]	; (5d10 <USB_0_Handler+0x8>)
    5d0c:	4798      	blx	r3
    5d0e:	bd08      	pop	{r3, pc}
    5d10:	00005071 	.word	0x00005071

00005d14 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    5d14:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5d16:	4b01      	ldr	r3, [pc, #4]	; (5d1c <USB_1_Handler+0x8>)
    5d18:	4798      	blx	r3
    5d1a:	bd08      	pop	{r3, pc}
    5d1c:	00005071 	.word	0x00005071

00005d20 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    5d20:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5d22:	4b01      	ldr	r3, [pc, #4]	; (5d28 <USB_2_Handler+0x8>)
    5d24:	4798      	blx	r3
    5d26:	bd08      	pop	{r3, pc}
    5d28:	00005071 	.word	0x00005071

00005d2c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    5d2c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5d2e:	4b01      	ldr	r3, [pc, #4]	; (5d34 <USB_3_Handler+0x8>)
    5d30:	4798      	blx	r3
    5d32:	bd08      	pop	{r3, pc}
    5d34:	00005071 	.word	0x00005071

00005d38 <grid_led_hardware_transfer_complete_cb>:
volatile static uint8_t grid_led_hardware_transfer_done = 0;

void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    5d38:	2201      	movs	r2, #1
    5d3a:	4b01      	ldr	r3, [pc, #4]	; (5d40 <grid_led_hardware_transfer_complete_cb+0x8>)
    5d3c:	701a      	strb	r2, [r3, #0]
    5d3e:	4770      	bx	lr
    5d40:	20000d00 	.word	0x20000d00

00005d44 <convert_cb_ADC_0>:
volatile static uint8_t ADC_0_conversion_ready = 0;
volatile static uint8_t ADC_1_conversion_ready = 0;

static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	ADC_0_conversion_ready = 1;
    5d44:	2201      	movs	r2, #1
    5d46:	4b01      	ldr	r3, [pc, #4]	; (5d4c <convert_cb_ADC_0+0x8>)
    5d48:	705a      	strb	r2, [r3, #1]
    5d4a:	4770      	bx	lr
    5d4c:	20000d00 	.word	0x20000d00

00005d50 <RTC_Scheduler_tick_cb>:

volatile uint32_t realtime = 0; 

static void RTC_Scheduler_tick_cb(const struct timer_task *const timer_task)
{
	realtime++;
    5d50:	4b05      	ldr	r3, [pc, #20]	; (5d68 <RTC_Scheduler_tick_cb+0x18>)
    5d52:	685a      	ldr	r2, [r3, #4]
    5d54:	3201      	adds	r2, #1
    5d56:	605a      	str	r2, [r3, #4]
	task_counter[task_current]++;
    5d58:	7a1a      	ldrb	r2, [r3, #8]
    5d5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5d5e:	68da      	ldr	r2, [r3, #12]
    5d60:	3201      	adds	r2, #1
    5d62:	60da      	str	r2, [r3, #12]
    5d64:	4770      	bx	lr
    5d66:	bf00      	nop
    5d68:	20000d00 	.word	0x20000d00

00005d6c <RTC_Scheduler_report_cb>:
}

 static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
 {
 if (reportflag<255) reportflag++;
    5d6c:	4b06      	ldr	r3, [pc, #24]	; (5d88 <RTC_Scheduler_report_cb+0x1c>)
    5d6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5d72:	b2db      	uxtb	r3, r3
    5d74:	2bff      	cmp	r3, #255	; 0xff
    5d76:	d006      	beq.n	5d86 <RTC_Scheduler_report_cb+0x1a>
    5d78:	4a03      	ldr	r2, [pc, #12]	; (5d88 <RTC_Scheduler_report_cb+0x1c>)
    5d7a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    5d7e:	3301      	adds	r3, #1
    5d80:	b2db      	uxtb	r3, r3
    5d82:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    5d86:	4770      	bx	lr
    5d88:	20000d00 	.word	0x20000d00

00005d8c <RTC_Scheduler_ping_cb>:
	
}

static void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{
	pingflag = 1;
    5d8c:	2201      	movs	r2, #1
    5d8e:	4b02      	ldr	r3, [pc, #8]	; (5d98 <RTC_Scheduler_ping_cb+0xc>)
    5d90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    5d94:	4770      	bx	lr
    5d96:	bf00      	nop
    5d98:	20000d00 	.word	0x20000d00

00005d9c <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint8_t led_r, uint8_t led_g, uint8_t led_b){
    5d9c:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    5d9e:	7844      	ldrb	r4, [r0, #1]
    5da0:	428c      	cmp	r4, r1
    5da2:	d802      	bhi.n	5daa <grid_led_set_color+0xe>
		return -1;		
    5da4:	20ff      	movs	r0, #255	; 0xff
}
    5da6:	bc30      	pop	{r4, r5}
    5da8:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    5daa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5dae:	0089      	lsls	r1, r1, #2
    5db0:	68c5      	ldr	r5, [r0, #12]
    5db2:	4c0a      	ldr	r4, [pc, #40]	; (5ddc <grid_led_set_color+0x40>)
    5db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    5db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5dba:	506b      	str	r3, [r5, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    5dbc:	68c3      	ldr	r3, [r0, #12]
    5dbe:	440b      	add	r3, r1
    5dc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    5dc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
    5dc6:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    5dc8:	68c3      	ldr	r3, [r0, #12]
    5dca:	4419      	add	r1, r3
    5dcc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5dd0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5dd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5dd6:	608b      	str	r3, [r1, #8]
		return 0;
    5dd8:	2000      	movs	r0, #0
    5dda:	e7e4      	b.n	5da6 <grid_led_set_color+0xa>
    5ddc:	20000d00 	.word	0x20000d00

00005de0 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    5de0:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    5de2:	4c06      	ldr	r4, [pc, #24]	; (5dfc <grid_led_hardware_init+0x1c>)
    5de4:	f100 0114 	add.w	r1, r0, #20
    5de8:	4620      	mov	r0, r4
    5dea:	4b05      	ldr	r3, [pc, #20]	; (5e00 <grid_led_hardware_init+0x20>)
    5dec:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    5dee:	4a05      	ldr	r2, [pc, #20]	; (5e04 <grid_led_hardware_init+0x24>)
    5df0:	2100      	movs	r1, #0
    5df2:	4620      	mov	r0, r4
    5df4:	4b04      	ldr	r3, [pc, #16]	; (5e08 <grid_led_hardware_init+0x28>)
    5df6:	4798      	blx	r3
    5df8:	bd10      	pop	{r4, pc}
    5dfa:	bf00      	nop
    5dfc:	200014f4 	.word	0x200014f4
    5e00:	000019a1 	.word	0x000019a1
    5e04:	00005d39 	.word	0x00005d39
    5e08:	00001971 	.word	0x00001971

00005e0c <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    5e0c:	7843      	ldrb	r3, [r0, #1]
    5e0e:	b1f3      	cbz	r3, 5e4e <grid_led_tick+0x42>
void grid_led_tick(struct grid_led_model* mod){
    5e10:	b410      	push	{r4}
	for (uint8_t j=0; j<mod->led_number; j++){
    5e12:	2300      	movs	r3, #0
					
		for(uint8_t i=0; i<2; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    5e14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    5e18:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5e1c:	6902      	ldr	r2, [r0, #16]
    5e1e:	440a      	add	r2, r1
    5e20:	7ad1      	ldrb	r1, [r2, #11]
    5e22:	7b14      	ldrb	r4, [r2, #12]
    5e24:	4421      	add	r1, r4
    5e26:	72d1      	strb	r1, [r2, #11]
    5e28:	7842      	ldrb	r2, [r0, #1]
    5e2a:	441a      	add	r2, r3
    5e2c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    5e30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5e34:	6901      	ldr	r1, [r0, #16]
    5e36:	440a      	add	r2, r1
    5e38:	7ad1      	ldrb	r1, [r2, #11]
    5e3a:	7b14      	ldrb	r4, [r2, #12]
    5e3c:	4421      	add	r1, r4
    5e3e:	72d1      	strb	r1, [r2, #11]
	for (uint8_t j=0; j<mod->led_number; j++){
    5e40:	3301      	adds	r3, #1
    5e42:	b2db      	uxtb	r3, r3
    5e44:	7842      	ldrb	r2, [r0, #1]
    5e46:	429a      	cmp	r2, r3
    5e48:	d8e4      	bhi.n	5e14 <grid_led_tick+0x8>
		}	
	}
	/** END */
	
}
    5e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    5e4e:	4770      	bx	lr

00005e50 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5e50:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    5e52:	7844      	ldrb	r4, [r0, #1]
    5e54:	fb02 1404 	mla	r4, r2, r4, r1
    5e58:	6905      	ldr	r5, [r0, #16]
    5e5a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5e5e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    5e62:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    5e64:	7843      	ldrb	r3, [r0, #1]
    5e66:	fb02 1303 	mla	r3, r2, r3, r1
    5e6a:	6904      	ldr	r4, [r0, #16]
    5e6c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5e70:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5e74:	4423      	add	r3, r4
    5e76:	f89d 400c 	ldrb.w	r4, [sp, #12]
    5e7a:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    5e7c:	7843      	ldrb	r3, [r0, #1]
    5e7e:	fb02 1203 	mla	r2, r2, r3, r1
    5e82:	6903      	ldr	r3, [r0, #16]
    5e84:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    5e88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5e8c:	441a      	add	r2, r3
    5e8e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5e92:	7093      	strb	r3, [r2, #2]
}
    5e94:	bc70      	pop	{r4, r5, r6}
    5e96:	4770      	bx	lr

00005e98 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5e98:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    5e9a:	7844      	ldrb	r4, [r0, #1]
    5e9c:	fb02 1404 	mla	r4, r2, r4, r1
    5ea0:	6905      	ldr	r5, [r0, #16]
    5ea2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5ea6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    5eaa:	442c      	add	r4, r5
    5eac:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    5eae:	7843      	ldrb	r3, [r0, #1]
    5eb0:	fb02 1303 	mla	r3, r2, r3, r1
    5eb4:	6904      	ldr	r4, [r0, #16]
    5eb6:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5eba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5ebe:	4423      	add	r3, r4
    5ec0:	f89d 400c 	ldrb.w	r4, [sp, #12]
    5ec4:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    5ec6:	7843      	ldrb	r3, [r0, #1]
    5ec8:	fb02 1203 	mla	r2, r2, r3, r1
    5ecc:	6903      	ldr	r3, [r0, #16]
    5ece:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    5ed2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5ed6:	441a      	add	r2, r3
    5ed8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5edc:	7153      	strb	r3, [r2, #5]
}
    5ede:	bc70      	pop	{r4, r5, r6}
    5ee0:	4770      	bx	lr

00005ee2 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    5ee2:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    5ee4:	7844      	ldrb	r4, [r0, #1]
    5ee6:	fb02 1404 	mla	r4, r2, r4, r1
    5eea:	6905      	ldr	r5, [r0, #16]
    5eec:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5ef0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    5ef4:	442c      	add	r4, r5
    5ef6:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    5ef8:	7843      	ldrb	r3, [r0, #1]
    5efa:	fb02 1303 	mla	r3, r2, r3, r1
    5efe:	6904      	ldr	r4, [r0, #16]
    5f00:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5f04:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5f08:	4423      	add	r3, r4
    5f0a:	f89d 400c 	ldrb.w	r4, [sp, #12]
    5f0e:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    5f10:	7843      	ldrb	r3, [r0, #1]
    5f12:	fb02 1203 	mla	r2, r2, r3, r1
    5f16:	6903      	ldr	r3, [r0, #16]
    5f18:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    5f1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5f20:	441a      	add	r2, r3
    5f22:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5f26:	7213      	strb	r3, [r2, #8]
}
    5f28:	bc70      	pop	{r4, r5, r6}
    5f2a:	4770      	bx	lr

00005f2c <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    5f2c:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    5f2e:	7844      	ldrb	r4, [r0, #1]
    5f30:	fb02 1204 	mla	r2, r2, r4, r1
    5f34:	6901      	ldr	r1, [r0, #16]
    5f36:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    5f3a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    5f3e:	440a      	add	r2, r1
    5f40:	72d3      	strb	r3, [r2, #11]
}
    5f42:	f85d 4b04 	ldr.w	r4, [sp], #4
    5f46:	4770      	bx	lr

00005f48 <grid_led_set_frequency>:

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    5f48:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    5f4a:	7844      	ldrb	r4, [r0, #1]
    5f4c:	fb02 1204 	mla	r2, r2, r4, r1
    5f50:	6901      	ldr	r1, [r0, #16]
    5f52:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    5f56:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    5f5a:	440a      	add	r2, r1
    5f5c:	7313      	strb	r3, [r2, #12]
}
    5f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5f62:	4770      	bx	lr

00005f64 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    5f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f68:	b083      	sub	sp, #12
    5f6a:	4605      	mov	r5, r0
	mod->led_number = length;
    5f6c:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    5f6e:	b2cc      	uxtb	r4, r1
    5f70:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    5f74:	0080      	lsls	r0, r0, #2
    5f76:	3090      	adds	r0, #144	; 0x90
    5f78:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    5f7a:	4e3b      	ldr	r6, [pc, #236]	; (6068 <grid_led_buffer_init+0x104>)
    5f7c:	47b0      	blx	r6
    5f7e:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    5f80:	3090      	adds	r0, #144	; 0x90
    5f82:	60e8      	str	r0, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * led_smart_buffer_layer_number * sizeof(struct LED_layer));
    5f84:	201a      	movs	r0, #26
    5f86:	fb00 f004 	mul.w	r0, r0, r4
    5f8a:	47b0      	blx	r6
    5f8c:	6128      	str	r0, [r5, #16]
    5f8e:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    5f90:	4619      	mov	r1, r3
    5f92:	68aa      	ldr	r2, [r5, #8]
    5f94:	54d1      	strb	r1, [r2, r3]
    5f96:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    5f98:	2b90      	cmp	r3, #144	; 0x90
    5f9a:	d1fa      	bne.n	5f92 <grid_led_buffer_init+0x2e>
	for (uint32_t i = 0; i<mod->led_number; i++){
    5f9c:	786b      	ldrb	r3, [r5, #1]
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d05e      	beq.n	6060 <grid_led_buffer_init+0xfc>
    5fa2:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    5fa4:	4626      	mov	r6, r4
    5fa6:	4f31      	ldr	r7, [pc, #196]	; (606c <grid_led_buffer_init+0x108>)
    5fa8:	9600      	str	r6, [sp, #0]
    5faa:	4633      	mov	r3, r6
    5fac:	4632      	mov	r2, r6
    5fae:	4621      	mov	r1, r4
    5fb0:	4628      	mov	r0, r5
    5fb2:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    5fb4:	3401      	adds	r4, #1
    5fb6:	786b      	ldrb	r3, [r5, #1]
    5fb8:	42a3      	cmp	r3, r4
    5fba:	d8f5      	bhi.n	5fa8 <grid_led_buffer_init+0x44>
	for(uint8_t i = 0; i<mod->led_number; i++){
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d04f      	beq.n	6060 <grid_led_buffer_init+0xfc>
    5fc0:	2600      	movs	r6, #0
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    5fc2:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 6074 <grid_led_buffer_init+0x110>
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    5fc6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 6078 <grid_led_buffer_init+0x114>
		grid_led_set_min(mod,i, 0, 0x00, 0x00, 0x00);
    5fca:	2400      	movs	r4, #0
    5fcc:	9401      	str	r4, [sp, #4]
    5fce:	9400      	str	r4, [sp, #0]
    5fd0:	4623      	mov	r3, r4
    5fd2:	4622      	mov	r2, r4
    5fd4:	4631      	mov	r1, r6
    5fd6:	4628      	mov	r0, r5
    5fd8:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 0, 0x00, 0x7F, 0x00);
    5fda:	9401      	str	r4, [sp, #4]
    5fdc:	237f      	movs	r3, #127	; 0x7f
    5fde:	9300      	str	r3, [sp, #0]
    5fe0:	4623      	mov	r3, r4
    5fe2:	4622      	mov	r2, r4
    5fe4:	4631      	mov	r1, r6
    5fe6:	4628      	mov	r0, r5
    5fe8:	47d0      	blx	sl
		grid_led_set_max(mod,i, 0, 0x00, 0xFF, 0x00);
    5fea:	9401      	str	r4, [sp, #4]
    5fec:	23ff      	movs	r3, #255	; 0xff
    5fee:	9300      	str	r3, [sp, #0]
    5ff0:	4623      	mov	r3, r4
    5ff2:	4622      	mov	r2, r4
    5ff4:	4631      	mov	r1, r6
    5ff6:	4628      	mov	r0, r5
    5ff8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 607c <grid_led_buffer_init+0x118>
    5ffc:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 0, 0);
    5ffe:	4623      	mov	r3, r4
    6000:	4622      	mov	r2, r4
    6002:	4631      	mov	r1, r6
    6004:	4628      	mov	r0, r5
    6006:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6080 <grid_led_buffer_init+0x11c>
    600a:	47c0      	blx	r8
		grid_led_set_phase(mod,i, 0, 0);
    600c:	4623      	mov	r3, r4
    600e:	4622      	mov	r2, r4
    6010:	4631      	mov	r1, r6
    6012:	4628      	mov	r0, r5
    6014:	4f16      	ldr	r7, [pc, #88]	; (6070 <grid_led_buffer_init+0x10c>)
    6016:	47b8      	blx	r7
		grid_led_set_min(mod,i, 1, 0x00, 0x00, 0x00);
    6018:	9401      	str	r4, [sp, #4]
    601a:	9400      	str	r4, [sp, #0]
    601c:	4623      	mov	r3, r4
    601e:	2201      	movs	r2, #1
    6020:	4631      	mov	r1, r6
    6022:	4628      	mov	r0, r5
    6024:	47d8      	blx	fp
		grid_led_set_mid(mod,i, 1, 0x00, 0x00, 0x00);
    6026:	9401      	str	r4, [sp, #4]
    6028:	9400      	str	r4, [sp, #0]
    602a:	4623      	mov	r3, r4
    602c:	2201      	movs	r2, #1
    602e:	4631      	mov	r1, r6
    6030:	4628      	mov	r0, r5
    6032:	47d0      	blx	sl
		grid_led_set_max(mod,i, 1, 0x00, 0x00, 0x00);
    6034:	9401      	str	r4, [sp, #4]
    6036:	9400      	str	r4, [sp, #0]
    6038:	4623      	mov	r3, r4
    603a:	2201      	movs	r2, #1
    603c:	4631      	mov	r1, r6
    603e:	4628      	mov	r0, r5
    6040:	47c8      	blx	r9
		grid_led_set_frequency(mod,i, 1, 0);
    6042:	4623      	mov	r3, r4
    6044:	2201      	movs	r2, #1
    6046:	4631      	mov	r1, r6
    6048:	4628      	mov	r0, r5
    604a:	47c0      	blx	r8
		grid_led_set_phase(mod, i, 1, 0);
    604c:	4623      	mov	r3, r4
    604e:	2201      	movs	r2, #1
    6050:	4631      	mov	r1, r6
    6052:	4628      	mov	r0, r5
    6054:	47b8      	blx	r7
	for(uint8_t i = 0; i<mod->led_number; i++){
    6056:	3601      	adds	r6, #1
    6058:	b2f6      	uxtb	r6, r6
    605a:	786b      	ldrb	r3, [r5, #1]
    605c:	42b3      	cmp	r3, r6
    605e:	d8b4      	bhi.n	5fca <grid_led_buffer_init+0x66>
}
    6060:	b003      	add	sp, #12
    6062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6066:	bf00      	nop
    6068:	0000a24d 	.word	0x0000a24d
    606c:	00005d9d 	.word	0x00005d9d
    6070:	00005f2d 	.word	0x00005f2d
    6074:	00005e51 	.word	0x00005e51
    6078:	00005e99 	.word	0x00005e99
    607c:	00005ee3 	.word	0x00005ee3
    6080:	00005f49 	.word	0x00005f49

00006084 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    6084:	b570      	push	{r4, r5, r6, lr}
    6086:	4604      	mov	r4, r0
    6088:	4e29      	ldr	r6, [pc, #164]	; (6130 <grid_led_init+0xac>)
    608a:	2200      	movs	r2, #0
    608c:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    608e:	f003 0001 	and.w	r0, r3, #1
    6092:	2800      	cmp	r0, #0
    6094:	bf14      	ite	ne
    6096:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    609a:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    609e:	f3c3 0540 	ubfx	r5, r3, #1, #1
    60a2:	2d00      	cmp	r5, #0
    60a4:	bf14      	ite	ne
    60a6:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    60aa:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    60ae:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    60b0:	f3c3 0080 	ubfx	r0, r3, #2, #1
    60b4:	2800      	cmp	r0, #0
    60b6:	bf14      	ite	ne
    60b8:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    60bc:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    60c0:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    60c2:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    60c6:	2d00      	cmp	r5, #0
    60c8:	bf14      	ite	ne
    60ca:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    60ce:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    60d2:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    60d4:	f3c3 1500 	ubfx	r5, r3, #4, #1
    60d8:	2d00      	cmp	r5, #0
    60da:	bf14      	ite	ne
    60dc:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    60e0:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    60e4:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    60e6:	f3c3 1040 	ubfx	r0, r3, #5, #1
    60ea:	2800      	cmp	r0, #0
    60ec:	bf14      	ite	ne
    60ee:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    60f2:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    60f6:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    60f8:	f3c3 1080 	ubfx	r0, r3, #6, #1
    60fc:	2800      	cmp	r0, #0
    60fe:	bf14      	ite	ne
    6100:	200e      	movne	r0, #14
    6102:	2008      	moveq	r0, #8
    6104:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6106:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    610a:	2b00      	cmp	r3, #0
    610c:	bf14      	ite	ne
    610e:	23e0      	movne	r3, #224	; 0xe0
    6110:	2380      	moveq	r3, #128	; 0x80
    6112:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    6114:	f846 3f04 	str.w	r3, [r6, #4]!
    6118:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    611a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    611e:	d1b5      	bne.n	608c <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    6120:	4620      	mov	r0, r4
    6122:	4b04      	ldr	r3, [pc, #16]	; (6134 <grid_led_init+0xb0>)
    6124:	4798      	blx	r3
	grid_led_hardware_init(mod);
    6126:	4620      	mov	r0, r4
    6128:	4b03      	ldr	r3, [pc, #12]	; (6138 <grid_led_init+0xb4>)
    612a:	4798      	blx	r3
}
    612c:	2000      	movs	r0, #0
    612e:	bd70      	pop	{r4, r5, r6, pc}
    6130:	20000d2c 	.word	0x20000d2c
    6134:	00005f65 	.word	0x00005f65
    6138:	00005de1 	.word	0x00005de1

0000613c <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6140:	b083      	sub	sp, #12
    6142:	f890 c001 	ldrb.w	ip, [r0, #1]
    6146:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    614a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    614e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    6152:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    6156:	6904      	ldr	r4, [r0, #16]
    6158:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<2; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    615a:	2702      	movs	r7, #2
	uint32_t mix_b = 0;
    615c:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    6160:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    6162:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6164:	f8df 8084 	ldr.w	r8, [pc, #132]	; 61ec <grid_led_render+0xb0>
    6168:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    616a:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    616e:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    6170:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    6174:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    6178:	f894 a000 	ldrb.w	sl, [r4]
    617c:	f894 b003 	ldrb.w	fp, [r4, #3]
    6180:	fb05 fb0b 	mul.w	fp, r5, fp
    6184:	fb09 bb0a 	mla	fp, r9, sl, fp
    6188:	f894 a006 	ldrb.w	sl, [r4, #6]
    618c:	fb06 ba0a 	mla	sl, r6, sl, fp
    6190:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    6192:	f894 a001 	ldrb.w	sl, [r4, #1]
    6196:	f894 b004 	ldrb.w	fp, [r4, #4]
    619a:	fb05 fb0b 	mul.w	fp, r5, fp
    619e:	fb09 bb0a 	mla	fp, r9, sl, fp
    61a2:	f894 a007 	ldrb.w	sl, [r4, #7]
    61a6:	fb06 ba0a 	mla	sl, r6, sl, fp
    61aa:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    61ac:	f894 a002 	ldrb.w	sl, [r4, #2]
    61b0:	f894 b005 	ldrb.w	fp, [r4, #5]
    61b4:	fb05 f50b 	mul.w	r5, r5, fp
    61b8:	fb09 590a 	mla	r9, r9, sl, r5
    61bc:	7a25      	ldrb	r5, [r4, #8]
    61be:	fb06 9505 	mla	r5, r6, r5, r9
    61c2:	44ae      	add	lr, r5
    61c4:	3f01      	subs	r7, #1
    61c6:	4464      	add	r4, ip
	for (uint8_t i = 0; i<2; i++){
    61c8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    61cc:	d1cc      	bne.n	6168 <grid_led_render+0x2c>

mix_r = (mix_r)/2/256;
mix_g = (mix_g)/2/256;
mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    61ce:	f3ce 2447 	ubfx	r4, lr, #9, #8
    61d2:	9400      	str	r4, [sp, #0]
    61d4:	f3c3 2347 	ubfx	r3, r3, #9, #8
    61d8:	f3c2 2247 	ubfx	r2, r2, #9, #8
    61dc:	4c02      	ldr	r4, [pc, #8]	; (61e8 <grid_led_render+0xac>)
    61de:	47a0      	blx	r4
	
}
    61e0:	b003      	add	sp, #12
    61e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61e6:	bf00      	nop
    61e8:	00005d9d 	.word	0x00005d9d
    61ec:	20000040 	.word	0x20000040

000061f0 <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    61f0:	7843      	ldrb	r3, [r0, #1]
    61f2:	b15b      	cbz	r3, 620c <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    61f4:	b570      	push	{r4, r5, r6, lr}
    61f6:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    61f8:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    61fa:	4e05      	ldr	r6, [pc, #20]	; (6210 <grid_led_render_all+0x20>)
    61fc:	4621      	mov	r1, r4
    61fe:	4628      	mov	r0, r5
    6200:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    6202:	3401      	adds	r4, #1
    6204:	786b      	ldrb	r3, [r5, #1]
    6206:	42a3      	cmp	r3, r4
    6208:	d8f8      	bhi.n	61fc <grid_led_render_all+0xc>
    620a:	bd70      	pop	{r4, r5, r6, pc}
    620c:	4770      	bx	lr
    620e:	bf00      	nop
    6210:	0000613d 	.word	0x0000613d

00006214 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    6214:	b510      	push	{r4, lr}
    6216:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    6218:	2200      	movs	r2, #0
    621a:	4b08      	ldr	r3, [pc, #32]	; (623c <grid_led_hardware_start_transfer_blocking+0x28>)
    621c:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    621e:	4808      	ldr	r0, [pc, #32]	; (6240 <grid_led_hardware_start_transfer_blocking+0x2c>)
    6220:	4b08      	ldr	r3, [pc, #32]	; (6244 <grid_led_hardware_start_transfer_blocking+0x30>)
    6222:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    6224:	88a2      	ldrh	r2, [r4, #4]
    6226:	68a1      	ldr	r1, [r4, #8]
    6228:	6960      	ldr	r0, [r4, #20]
    622a:	4b07      	ldr	r3, [pc, #28]	; (6248 <grid_led_hardware_start_transfer_blocking+0x34>)
    622c:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    622e:	4a03      	ldr	r2, [pc, #12]	; (623c <grid_led_hardware_start_transfer_blocking+0x28>)
    6230:	7813      	ldrb	r3, [r2, #0]
    6232:	b2db      	uxtb	r3, r3
    6234:	2b01      	cmp	r3, #1
    6236:	d1fb      	bne.n	6230 <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
    6238:	bd10      	pop	{r4, pc}
    623a:	bf00      	nop
    623c:	20000d00 	.word	0x20000d00
    6240:	200014f4 	.word	0x200014f4
    6244:	00001949 	.word	0x00001949
    6248:	000014e5 	.word	0x000014e5

0000624c <grid_ain_channel_init>:
static struct AIN_Channel* ain_channel_buffer;
static uint8_t ain_channel_buffer_length;
static uint8_t ain_channel_buffer_depth;


uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    624c:	b538      	push	{r3, r4, r5, lr}
    624e:	4604      	mov	r4, r0
    6250:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    6252:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    6254:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    6256:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    6258:	2300      	movs	r3, #0
    625a:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    625c:	0048      	lsls	r0, r1, #1
    625e:	4b09      	ldr	r3, [pc, #36]	; (6284 <grid_ain_channel_init+0x38>)
    6260:	4798      	blx	r3
    6262:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    6264:	b14d      	cbz	r5, 627a <grid_ain_channel_init+0x2e>
    6266:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    6268:	4619      	mov	r1, r3
    626a:	6822      	ldr	r2, [r4, #0]
    626c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    6270:	3301      	adds	r3, #1
    6272:	b2db      	uxtb	r3, r3
    6274:	7922      	ldrb	r2, [r4, #4]
    6276:	429a      	cmp	r2, r3
    6278:	d8f7      	bhi.n	626a <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    627a:	2000      	movs	r0, #0
    627c:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    627e:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    6280:	bd38      	pop	{r3, r4, r5, pc}
    6282:	bf00      	nop
    6284:	0000a24d 	.word	0x0000a24d

00006288 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    6288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    628c:	4605      	mov	r5, r0
    628e:	460e      	mov	r6, r1
    6290:	4691      	mov	r9, r2
    6292:	4698      	mov	r8, r3
	
	ain_channel_buffer_length = length;
    6294:	4c0e      	ldr	r4, [pc, #56]	; (62d0 <grid_ain_init+0x48>)
    6296:	f884 0430 	strb.w	r0, [r4, #1072]	; 0x430
	ain_channel_buffer_depth = depth;
    629a:	f884 1431 	strb.w	r1, [r4, #1073]	; 0x431
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(ain_channel_buffer_length * sizeof(struct AIN_Channel));
    629e:	0100      	lsls	r0, r0, #4
    62a0:	4b0c      	ldr	r3, [pc, #48]	; (62d4 <grid_ain_init+0x4c>)
    62a2:	4798      	blx	r3
    62a4:	f8c4 0434 	str.w	r0, [r4, #1076]	; 0x434

	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    62a8:	b175      	cbz	r5, 62c8 <grid_ain_init+0x40>
    62aa:	4604      	mov	r4, r0
    62ac:	3d01      	subs	r5, #1
    62ae:	b2ed      	uxtb	r5, r5
    62b0:	3501      	adds	r5, #1
    62b2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		grid_ain_channel_init(&ain_channel_buffer[i], ain_channel_buffer_depth, format, resolution);
    62b6:	4f08      	ldr	r7, [pc, #32]	; (62d8 <grid_ain_init+0x50>)
    62b8:	4643      	mov	r3, r8
    62ba:	464a      	mov	r2, r9
    62bc:	4631      	mov	r1, r6
    62be:	4620      	mov	r0, r4
    62c0:	47b8      	blx	r7
    62c2:	3410      	adds	r4, #16
	for (uint8_t i=0; i<ain_channel_buffer_length; i++){
    62c4:	42ac      	cmp	r4, r5
    62c6:	d1f7      	bne.n	62b8 <grid_ain_init+0x30>
	}

	return 0;
}
    62c8:	2000      	movs	r0, #0
    62ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    62ce:	bf00      	nop
    62d0:	20000d00 	.word	0x20000d00
    62d4:	0000a24d 	.word	0x0000a24d
    62d8:	0000624d 	.word	0x0000624d

000062dc <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    62dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    62e0:	0100      	lsls	r0, r0, #4
    62e2:	4b3c      	ldr	r3, [pc, #240]	; (63d4 <grid_ain_add_sample+0xf8>)
    62e4:	f8d3 a434 	ldr.w	sl, [r3, #1076]	; 0x434
    62e8:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    62ec:	f89c 6004 	ldrb.w	r6, [ip, #4]
    62f0:	2e00      	cmp	r6, #0
    62f2:	d05b      	beq.n	63ac <grid_ain_add_sample+0xd0>
    62f4:	f85a 5000 	ldr.w	r5, [sl, r0]
    62f8:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    62fa:	2200      	movs	r2, #0
    62fc:	4690      	mov	r8, r2
    62fe:	4691      	mov	r9, r2
    6300:	4696      	mov	lr, r2
    6302:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6306:	4614      	mov	r4, r2
    6308:	fa5f fb82 	uxtb.w	fp, r2
    630c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    6310:	441c      	add	r4, r3
		
		if (current > maximum){
    6312:	4573      	cmp	r3, lr
    6314:	bf84      	itt	hi
    6316:	46d8      	movhi	r8, fp
			maximum = current;
    6318:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    631a:	42bb      	cmp	r3, r7
    631c:	bf3c      	itt	cc
    631e:	46d9      	movcc	r9, fp
			minimum = current;
    6320:	461f      	movcc	r7, r3
    6322:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    6324:	b2d3      	uxtb	r3, r2
    6326:	42b3      	cmp	r3, r6
    6328:	d3ee      	bcc.n	6308 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    632a:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    632e:	b2b6      	uxth	r6, r6
    6330:	428e      	cmp	r6, r1
    6332:	d23f      	bcs.n	63b4 <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    6334:	f85a 3000 	ldr.w	r3, [sl, r0]
    6338:	440c      	add	r4, r1
    633a:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    633e:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    6340:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    6344:	f89c 3004 	ldrb.w	r3, [ip, #4]
    6348:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    634c:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    6350:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    6354:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    6356:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    635a:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    635c:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    635e:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    6360:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    6364:	b29b      	uxth	r3, r3
    6366:	408b      	lsls	r3, r1
    6368:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    636a:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    636e:	1b92      	subs	r2, r2, r6
    6370:	2a00      	cmp	r2, #0
    6372:	bfb8      	it	lt
    6374:	4252      	neglt	r2, r2
    6376:	2601      	movs	r6, #1
    6378:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    637c:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    6380:	42be      	cmp	r6, r7
    6382:	d020      	beq.n	63c6 <grid_ain_add_sample+0xea>
    6384:	4282      	cmp	r2, r0
    6386:	dc08      	bgt.n	639a <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    6388:	2201      	movs	r2, #1
    638a:	fa02 f505 	lsl.w	r5, r2, r5
    638e:	fa02 f101 	lsl.w	r1, r2, r1
    6392:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    6394:	428f      	cmp	r7, r1
    6396:	d000      	beq.n	639a <grid_ain_add_sample+0xbe>
    6398:	b9c7      	cbnz	r7, 63cc <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    639a:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    639e:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    63a2:	2001      	movs	r0, #1
    63a4:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    63a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    63ac:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    63ae:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    63b0:	2400      	movs	r4, #0
    63b2:	e7ba      	b.n	632a <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    63b4:	f85a 3000 	ldr.w	r3, [sl, r0]
    63b8:	440c      	add	r4, r1
    63ba:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    63be:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    63c0:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    63c4:	e7be      	b.n	6344 <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    63c6:	2000      	movs	r0, #0
    63c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63cc:	2000      	movs	r0, #0
	}
	
}
    63ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63d2:	bf00      	nop
    63d4:	20000d00 	.word	0x20000d00

000063d8 <convert_cb_ADC_1>:
}

static void convert_cb_ADC_1(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
    63d8:	b570      	push	{r4, r5, r6, lr}
    63da:	b082      	sub	sp, #8
	ADC_1_conversion_ready = 1;
    63dc:	2201      	movs	r2, #1
    63de:	4b49      	ldr	r3, [pc, #292]	; (6504 <convert_cb_ADC_1+0x12c>)
    63e0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		
		
	/* Make sure both results are ready */
		
	while(ADC_0_conversion_ready==0){}
    63e4:	461a      	mov	r2, r3
    63e6:	7853      	ldrb	r3, [r2, #1]
    63e8:	2b00      	cmp	r3, #0
    63ea:	d0fc      	beq.n	63e6 <convert_cb_ADC_1+0xe>
	while(ADC_1_conversion_ready==0){}
    63ec:	4a45      	ldr	r2, [pc, #276]	; (6504 <convert_cb_ADC_1+0x12c>)
    63ee:	f892 3438 	ldrb.w	r3, [r2, #1080]	; 0x438
    63f2:	2b00      	cmp	r3, #0
    63f4:	d0fb      	beq.n	63ee <convert_cb_ADC_1+0x16>
		
	/* Read conversion results */
		
	uint16_t adcresult_0 = 0;
    63f6:	2300      	movs	r3, #0
    63f8:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    63fc:	f8ad 3004 	strh.w	r3, [sp, #4]
		
	uint8_t adc_index_0 = grid_module_mux_lookup[grid_module_mux+8];
    6400:	4940      	ldr	r1, [pc, #256]	; (6504 <convert_cb_ADC_1+0x12c>)
    6402:	f891 3439 	ldrb.w	r3, [r1, #1081]	; 0x439
    6406:	4a40      	ldr	r2, [pc, #256]	; (6508 <convert_cb_ADC_1+0x130>)
    6408:	18d0      	adds	r0, r2, r3
    640a:	7a05      	ldrb	r5, [r0, #8]
	uint8_t adc_index_1 = grid_module_mux_lookup[grid_module_mux+0];
    640c:	5cd4      	ldrb	r4, [r2, r3]
	
	/* Update the multiplexer */
		
	grid_module_mux++;
    640e:	3301      	adds	r3, #1
    6410:	b2db      	uxtb	r3, r3
	grid_module_mux%=8;
    6412:	f003 0207 	and.w	r2, r3, #7
    6416:	f881 2439 	strb.w	r2, [r1, #1081]	; 0x439
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    641a:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    641e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    6422:	4b3a      	ldr	r3, [pc, #232]	; (650c <convert_cb_ADC_1+0x134>)
    6424:	bf14      	ite	ne
    6426:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    642a:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    642e:	f012 0f02 	tst.w	r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6432:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    6436:	4b35      	ldr	r3, [pc, #212]	; (650c <convert_cb_ADC_1+0x134>)
    6438:	bf14      	ite	ne
    643a:	f8c3 1118 	strne.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    643e:	f8c3 1114 	streq.w	r1, [r3, #276]	; 0x114
    6442:	0893      	lsrs	r3, r2, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6444:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    6448:	4b30      	ldr	r3, [pc, #192]	; (650c <convert_cb_ADC_1+0x134>)
    644a:	bf14      	ite	ne
    644c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6450:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_mux/2%2);
	gpio_set_pin_level(MUX_C, grid_module_mux/4%2);
		
	
		
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    6454:	2302      	movs	r3, #2
    6456:	f10d 0206 	add.w	r2, sp, #6
    645a:	2100      	movs	r1, #0
    645c:	482c      	ldr	r0, [pc, #176]	; (6510 <convert_cb_ADC_1+0x138>)
    645e:	4e2d      	ldr	r6, [pc, #180]	; (6514 <convert_cb_ADC_1+0x13c>)
    6460:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    6462:	2302      	movs	r3, #2
    6464:	aa01      	add	r2, sp, #4
    6466:	2100      	movs	r1, #0
    6468:	482b      	ldr	r0, [pc, #172]	; (6518 <convert_cb_ADC_1+0x140>)
    646a:	47b0      	blx	r6
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    646c:	4b25      	ldr	r3, [pc, #148]	; (6504 <convert_cb_ADC_1+0x12c>)
    646e:	442b      	add	r3, r5
    6470:	f993 243c 	ldrsb.w	r2, [r3, #1084]	; 0x43c
		
					
	if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_REVERSED)){
    6474:	f012 0f01 	tst.w	r2, #1
    6478:	d004      	beq.n	6484 <convert_cb_ADC_1+0xac>
		adcresult_0 = 65535 - adcresult_0;
    647a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    647e:	43db      	mvns	r3, r3
    6480:	f8ad 3006 	strh.w	r3, [sp, #6]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    6484:	4b1f      	ldr	r3, [pc, #124]	; (6504 <convert_cb_ADC_1+0x12c>)
    6486:	4423      	add	r3, r4
    6488:	f993 343c 	ldrsb.w	r3, [r3, #1084]	; 0x43c
	}		
		
	if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_REVERSED)){
    648c:	f013 0f01 	tst.w	r3, #1
    6490:	d004      	beq.n	649c <convert_cb_ADC_1+0xc4>
		adcresult_1 = 65535 - adcresult_1;
    6492:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6496:	43c9      	mvns	r1, r1
    6498:	f8ad 1004 	strh.w	r1, [sp, #4]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    649c:	f002 0202 	and.w	r2, r2, #2
	}	
		
	if (grid_adc_get_config(adc_index_0, GRID_ADC_CFG_BINARY)){
    64a0:	b252      	sxtb	r2, r2
    64a2:	b152      	cbz	r2, 64ba <convert_cb_ADC_1+0xe2>
		adcresult_0 = (adcresult_0>10000)*65535;
    64a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    64a8:	f242 7110 	movw	r1, #10000	; 0x2710
    64ac:	428a      	cmp	r2, r1
    64ae:	f04f 32ff 	mov.w	r2, #4294967295
    64b2:	bf98      	it	ls
    64b4:	2200      	movls	r2, #0
    64b6:	f8ad 2006 	strh.w	r2, [sp, #6]
	return (grid_adc_cfg[register_offset] & (1<<bit_offest));
    64ba:	f003 0302 	and.w	r3, r3, #2
	}
		
	if (grid_adc_get_config(adc_index_1, GRID_ADC_CFG_BINARY)){
    64be:	b25b      	sxtb	r3, r3
    64c0:	b153      	cbz	r3, 64d8 <convert_cb_ADC_1+0x100>
		adcresult_1 = (adcresult_1>10000)*65535;
    64c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    64c6:	f242 7210 	movw	r2, #10000	; 0x2710
    64ca:	4293      	cmp	r3, r2
    64cc:	f04f 33ff 	mov.w	r3, #4294967295
    64d0:	bf98      	it	ls
    64d2:	2300      	movls	r3, #0
    64d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	}
		
		
		
	grid_ain_add_sample(adc_index_0, adcresult_0);
    64d8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    64dc:	4628      	mov	r0, r5
    64de:	4d0f      	ldr	r5, [pc, #60]	; (651c <convert_cb_ADC_1+0x144>)
    64e0:	47a8      	blx	r5
	grid_ain_add_sample(adc_index_1, adcresult_1);
    64e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    64e6:	4620      	mov	r0, r4
    64e8:	47a8      	blx	r5
		
		
	
		
	/* Start conversion new conversion*/
	ADC_0_conversion_ready = 0;	
    64ea:	4b06      	ldr	r3, [pc, #24]	; (6504 <convert_cb_ADC_1+0x12c>)
    64ec:	2200      	movs	r2, #0
    64ee:	705a      	strb	r2, [r3, #1]
	ADC_1_conversion_ready = 0;
    64f0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		
	adc_async_start_conversion(&ADC_0);			
    64f4:	4806      	ldr	r0, [pc, #24]	; (6510 <convert_cb_ADC_1+0x138>)
    64f6:	4c0a      	ldr	r4, [pc, #40]	; (6520 <convert_cb_ADC_1+0x148>)
    64f8:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    64fa:	4807      	ldr	r0, [pc, #28]	; (6518 <convert_cb_ADC_1+0x140>)
    64fc:	47a0      	blx	r4
		
}
    64fe:	b002      	add	sp, #8
    6500:	bd70      	pop	{r4, r5, r6, pc}
    6502:	bf00      	nop
    6504:	20000d00 	.word	0x20000d00
    6508:	0000b0dc 	.word	0x0000b0dc
    650c:	41008000 	.word	0x41008000
    6510:	20001428 	.word	0x20001428
    6514:	000011d1 	.word	0x000011d1
    6518:	200015f8 	.word	0x200015f8
    651c:	000062dd 	.word	0x000062dd
    6520:	000012b1 	.word	0x000012b1

00006524 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    6524:	4b03      	ldr	r3, [pc, #12]	; (6534 <grid_ain_get_changed+0x10>)
	return instance->result_changed;
    6526:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
    652a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    652e:	7b00      	ldrb	r0, [r0, #12]
    6530:	4770      	bx	lr
    6532:	bf00      	nop
    6534:	20000d00 	.word	0x20000d00

00006538 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    6538:	4b04      	ldr	r3, [pc, #16]	; (654c <grid_ain_get_average+0x14>)
    653a:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
    653e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    6542:	2300      	movs	r3, #0
    6544:	8183      	strh	r3, [r0, #12]
	return instance->result_value;
}
    6546:	8900      	ldrh	r0, [r0, #8]
    6548:	4770      	bx	lr
    654a:	bf00      	nop
    654c:	20000d00 	.word	0x20000d00

00006550 <grid_sys_error_intensity>:
	
}

uint8_t grid_sys_error_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    6550:	7983      	ldrb	r3, [r0, #6]
    6552:	b123      	cbz	r3, 655e <grid_sys_error_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    6554:	2b01      	cmp	r3, #1
    6556:	d00f      	beq.n	6578 <grid_sys_error_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    6558:	2b02      	cmp	r3, #2
    655a:	d015      	beq.n	6588 <grid_sys_error_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    655c:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    655e:	8880      	ldrh	r0, [r0, #4]
    6560:	0840      	lsrs	r0, r0, #1
    6562:	387d      	subs	r0, #125	; 0x7d
    6564:	2800      	cmp	r0, #0
    6566:	bfb8      	it	lt
    6568:	4240      	neglt	r0, r0
    656a:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    656e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    6572:	f3c0 0047 	ubfx	r0, r0, #1, #8
    6576:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    6578:	8880      	ldrh	r0, [r0, #4]
    657a:	4b06      	ldr	r3, [pc, #24]	; (6594 <grid_sys_error_intensity+0x44>)
    657c:	fba3 3000 	umull	r3, r0, r3, r0
    6580:	f340 1000 	sbfx	r0, r0, #4, #1
    6584:	b2c0      	uxtb	r0, r0
    6586:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    6588:	8880      	ldrh	r0, [r0, #4]
    658a:	2864      	cmp	r0, #100	; 0x64
    658c:	bf8c      	ite	hi
    658e:	20ff      	movhi	r0, #255	; 0xff
    6590:	2000      	movls	r0, #0
    6592:	4770      	bx	lr
    6594:	10624dd3 	.word	0x10624dd3

00006598 <grid_sys_read_hex_char_value>:
uint8_t grid_sys_error_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}

uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    6598:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    659a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    659e:	b2d8      	uxtb	r0, r3
    65a0:	2809      	cmp	r0, #9
    65a2:	d90d      	bls.n	65c0 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    65a4:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    65a8:	b2db      	uxtb	r3, r3
    65aa:	2b05      	cmp	r3, #5
    65ac:	d903      	bls.n	65b6 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    65ae:	b131      	cbz	r1, 65be <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    65b0:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    65b2:	2000      	movs	r0, #0
    65b4:	4770      	bx	lr
		result = ascii - 97 + 10;
    65b6:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    65ba:	b2c0      	uxtb	r0, r0
    65bc:	4770      	bx	lr
	uint8_t result = 0;
    65be:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    65c0:	4770      	bx	lr
	...

000065c4 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    65c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    65c8:	b1c1      	cbz	r1, 65fc <grid_sys_read_hex_string_value+0x38>
    65ca:	4690      	mov	r8, r2
    65cc:	1e45      	subs	r5, r0, #1
    65ce:	1e4b      	subs	r3, r1, #1
    65d0:	009c      	lsls	r4, r3, #2
    65d2:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    65d6:	3f02      	subs	r7, #2
    65d8:	b2db      	uxtb	r3, r3
    65da:	1aff      	subs	r7, r7, r3
    65dc:	00bf      	lsls	r7, r7, #2
    65de:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    65e0:	f8df 901c 	ldr.w	r9, [pc, #28]	; 6600 <grid_sys_read_hex_string_value+0x3c>
    65e4:	4641      	mov	r1, r8
    65e6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    65ea:	47c8      	blx	r9
    65ec:	40a0      	lsls	r0, r4
    65ee:	4406      	add	r6, r0
    65f0:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    65f2:	42bc      	cmp	r4, r7
    65f4:	d1f6      	bne.n	65e4 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    65f6:	4630      	mov	r0, r6
    65f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    65fc:	2600      	movs	r6, #0
	return result;
    65fe:	e7fa      	b.n	65f6 <grid_sys_read_hex_string_value+0x32>
    6600:	00006599 	.word	0x00006599

00006604 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    6604:	b530      	push	{r4, r5, lr}
    6606:	b085      	sub	sp, #20
    6608:	4605      	mov	r5, r0
    660a:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    660c:	4909      	ldr	r1, [pc, #36]	; (6634 <grid_sys_write_hex_string_value+0x30>)
    660e:	a801      	add	r0, sp, #4
    6610:	4b09      	ldr	r3, [pc, #36]	; (6638 <grid_sys_write_hex_string_value+0x34>)
    6612:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    6614:	b164      	cbz	r4, 6630 <grid_sys_write_hex_string_value+0x2c>
    6616:	ab04      	add	r3, sp, #16
    6618:	1b1a      	subs	r2, r3, r4
    661a:	3a05      	subs	r2, #5
    661c:	1e6b      	subs	r3, r5, #1
    661e:	1e60      	subs	r0, r4, #1
    6620:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    6624:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    6628:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    662c:	4283      	cmp	r3, r0
    662e:	d1f9      	bne.n	6624 <grid_sys_write_hex_string_value+0x20>
	}

}
    6630:	b005      	add	sp, #20
    6632:	bd30      	pop	{r4, r5, pc}
    6634:	0000b154 	.word	0x0000b154
    6638:	0000a3fd 	.word	0x0000a3fd

0000663c <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    663c:	4b36      	ldr	r3, [pc, #216]	; (6718 <grid_sys_get_hwcfg+0xdc>)
    663e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    6642:	f1b3 3fff 	cmp.w	r3, #4294967295
    6646:	d003      	beq.n	6650 <grid_sys_get_hwcfg+0x14>
	}

	
	return grid_sys_hwfcg;

}
    6648:	4b33      	ldr	r3, [pc, #204]	; (6718 <grid_sys_get_hwcfg+0xdc>)
    664a:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    664e:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    6650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6654:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6656:	4b31      	ldr	r3, [pc, #196]	; (671c <grid_sys_get_hwcfg+0xe0>)
    6658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    665c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6660:	492f      	ldr	r1, [pc, #188]	; (6720 <grid_sys_get_hwcfg+0xe4>)
    6662:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    6666:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    666a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    666e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    6672:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6676:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    667a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    667e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    6686:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    668a:	4926      	ldr	r1, [pc, #152]	; (6724 <grid_sys_get_hwcfg+0xe8>)
    668c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    6690:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    6694:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6698:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    669c:	2001      	movs	r0, #1
    669e:	4b22      	ldr	r3, [pc, #136]	; (6728 <grid_sys_get_hwcfg+0xec>)
    66a0:	4798      	blx	r3
    66a2:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    66a4:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    66a6:	4d1d      	ldr	r5, [pc, #116]	; (671c <grid_sys_get_hwcfg+0xe0>)
    66a8:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    66ac:	4f1e      	ldr	r7, [pc, #120]	; (6728 <grid_sys_get_hwcfg+0xec>)
    66ae:	e00c      	b.n	66ca <grid_sys_get_hwcfg+0x8e>
			if(i!=7){
    66b0:	2e07      	cmp	r6, #7
    66b2:	d027      	beq.n	6704 <grid_sys_get_hwcfg+0xc8>
    66b4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    66b8:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    66bc:	2001      	movs	r0, #1
    66be:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    66c0:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    66c4:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    66c6:	2e08      	cmp	r6, #8
    66c8:	d01c      	beq.n	6704 <grid_sys_get_hwcfg+0xc8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    66ca:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    66ce:	2001      	movs	r0, #1
    66d0:	47b8      	blx	r7
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    66d2:	a801      	add	r0, sp, #4
    66d4:	4b15      	ldr	r3, [pc, #84]	; (672c <grid_sys_get_hwcfg+0xf0>)
    66d6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    66d8:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    66dc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    66e0:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    66e4:	405c      	eors	r4, r3
    66e6:	4014      	ands	r4, r2
    66e8:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    66ea:	a801      	add	r0, sp, #4
    66ec:	4b10      	ldr	r3, [pc, #64]	; (6730 <grid_sys_get_hwcfg+0xf4>)
    66ee:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    66f0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    66f4:	d0dc      	beq.n	66b0 <grid_sys_get_hwcfg+0x74>
				hwcfg_value |= (1<<i);
    66f6:	2301      	movs	r3, #1
    66f8:	40b3      	lsls	r3, r6
    66fa:	ea43 0808 	orr.w	r8, r3, r8
    66fe:	fa5f f888 	uxtb.w	r8, r8
    6702:	e7d5      	b.n	66b0 <grid_sys_get_hwcfg+0x74>
		grid_sys_hwfcg = hwcfg_value;
    6704:	4b04      	ldr	r3, [pc, #16]	; (6718 <grid_sys_get_hwcfg+0xdc>)
    6706:	f8c3 8300 	str.w	r8, [r3, #768]	; 0x300
}
    670a:	4b03      	ldr	r3, [pc, #12]	; (6718 <grid_sys_get_hwcfg+0xdc>)
    670c:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    6710:	b003      	add	sp, #12
    6712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6716:	bf00      	nop
    6718:	20000040 	.word	0x20000040
    671c:	41008000 	.word	0x41008000
    6720:	40002000 	.word	0x40002000
    6724:	40028000 	.word	0x40028000
    6728:	00001359 	.word	0x00001359
    672c:	000012d9 	.word	0x000012d9
    6730:	000012e7 	.word	0x000012e7

00006734 <tx_cb_USART_GRID>:
	tx_cb_USART_GRID(&GRID_PORT_W);
}

void tx_cb_USART_GRID(GRID_PORT_t* const por){
	
	grid_sys_tx_counter[por->direction - 0x11]++;
    6734:	7943      	ldrb	r3, [r0, #5]
    6736:	f1a3 0211 	sub.w	r2, r3, #17
    673a:	4b18      	ldr	r3, [pc, #96]	; (679c <tx_cb_USART_GRID+0x68>)
    673c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6740:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
    6744:	3201      	adds	r2, #1
    6746:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

	
	if(por->tx_double_buffer[1] == GRID_MSG_BROADCAST){
    674a:	7f43      	ldrb	r3, [r0, #29]
    674c:	2b0f      	cmp	r3, #15
    674e:	d00d      	beq.n	676c <tx_cb_USART_GRID+0x38>
			por->tx_double_buffer[i] = 0;
		}
		
		por->tx_double_buffer_status = 0;
	}
	else if (por->tx_double_buffer[1] == GRID_MSG_DIRECT){
    6750:	2b0e      	cmp	r3, #14
    6752:	d017      	beq.n	6784 <tx_cb_USART_GRID+0x50>
    6754:	f100 031b 	add.w	r3, r0, #27
    6758:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
		por->tx_double_buffer_status = 0;
	}
	else{
		//TRAP
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    675c:	2200      	movs	r2, #0
    675e:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    6762:	428b      	cmp	r3, r1
    6764:	d1fb      	bne.n	675e <tx_cb_USART_GRID+0x2a>
		}
		
		por->tx_double_buffer_status = 0;
    6766:	2300      	movs	r3, #0
    6768:	8103      	strh	r3, [r0, #8]
    676a:	4770      	bx	lr
    676c:	f100 031b 	add.w	r3, r0, #27
    6770:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    6774:	2200      	movs	r2, #0
    6776:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    677a:	428b      	cmp	r3, r1
    677c:	d1fb      	bne.n	6776 <tx_cb_USART_GRID+0x42>
		por->tx_double_buffer_status = 0;
    677e:	2300      	movs	r3, #0
    6780:	8103      	strh	r3, [r0, #8]
    6782:	4770      	bx	lr
    6784:	f100 031b 	add.w	r3, r0, #27
    6788:	f100 01e3 	add.w	r1, r0, #227	; 0xe3
			por->tx_double_buffer[i] = 0;
    678c:	2200      	movs	r2, #0
    678e:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint8_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    6792:	428b      	cmp	r3, r1
    6794:	d1fb      	bne.n	678e <tx_cb_USART_GRID+0x5a>
		por->tx_double_buffer_status = 0;
    6796:	2300      	movs	r3, #0
    6798:	8103      	strh	r3, [r0, #8]
    679a:	4770      	bx	lr
    679c:	20000d00 	.word	0x20000d00

000067a0 <tx_cb_USART_GRID_W>:
{
    67a0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    67a2:	4802      	ldr	r0, [pc, #8]	; (67ac <tx_cb_USART_GRID_W+0xc>)
    67a4:	4b02      	ldr	r3, [pc, #8]	; (67b0 <tx_cb_USART_GRID_W+0x10>)
    67a6:	4798      	blx	r3
    67a8:	bd08      	pop	{r3, pc}
    67aa:	bf00      	nop
    67ac:	20002264 	.word	0x20002264
    67b0:	00006735 	.word	0x00006735

000067b4 <tx_cb_USART_GRID_S>:
{
    67b4:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    67b6:	4802      	ldr	r0, [pc, #8]	; (67c0 <tx_cb_USART_GRID_S+0xc>)
    67b8:	4b02      	ldr	r3, [pc, #8]	; (67c4 <tx_cb_USART_GRID_S+0x10>)
    67ba:	4798      	blx	r3
    67bc:	bd08      	pop	{r3, pc}
    67be:	bf00      	nop
    67c0:	2000244c 	.word	0x2000244c
    67c4:	00006735 	.word	0x00006735

000067c8 <tx_cb_USART_GRID_E>:
{
    67c8:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    67ca:	4802      	ldr	r0, [pc, #8]	; (67d4 <tx_cb_USART_GRID_E+0xc>)
    67cc:	4b02      	ldr	r3, [pc, #8]	; (67d8 <tx_cb_USART_GRID_E+0x10>)
    67ce:	4798      	blx	r3
    67d0:	bd08      	pop	{r3, pc}
    67d2:	bf00      	nop
    67d4:	20002950 	.word	0x20002950
    67d8:	00006735 	.word	0x00006735

000067dc <tx_cb_USART_GRID_N>:
{
    67dc:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    67de:	4802      	ldr	r0, [pc, #8]	; (67e8 <tx_cb_USART_GRID_N+0xc>)
    67e0:	4b02      	ldr	r3, [pc, #8]	; (67ec <tx_cb_USART_GRID_N+0x10>)
    67e2:	4798      	blx	r3
    67e4:	bd08      	pop	{r3, pc}
    67e6:	bf00      	nop
    67e8:	20001a80 	.word	0x20001a80
    67ec:	00006735 	.word	0x00006735

000067f0 <grid_msg_get_checksum>:
}

uint8_t grid_msg_get_checksum(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    67f0:	2903      	cmp	r1, #3
    67f2:	d009      	beq.n	6808 <grid_msg_get_checksum+0x18>
    67f4:	1e43      	subs	r3, r0, #1
    67f6:	3904      	subs	r1, #4
    67f8:	4401      	add	r1, r0
    67fa:	2000      	movs	r0, #0
		checksum ^= str[i];
    67fc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6800:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    6802:	428b      	cmp	r3, r1
    6804:	d1fa      	bne.n	67fc <grid_msg_get_checksum+0xc>
    6806:	4770      	bx	lr
	uint8_t checksum = 0;
    6808:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    680a:	4770      	bx	lr

0000680c <grid_msg_set_checksum>:

uint8_t grid_msg_set_checksum(uint8_t* message, uint32_t length, uint8_t checksum){
    680c:	b530      	push	{r4, r5, lr}
    680e:	b083      	sub	sp, #12
    6810:	4604      	mov	r4, r0
    6812:	460d      	mov	r5, r1
	
	uint8_t checksum_string[4];

	sprintf(checksum_string, "%02x", checksum);
    6814:	4907      	ldr	r1, [pc, #28]	; (6834 <grid_msg_set_checksum+0x28>)
    6816:	a801      	add	r0, sp, #4
    6818:	4b07      	ldr	r3, [pc, #28]	; (6838 <grid_msg_set_checksum+0x2c>)
    681a:	4798      	blx	r3

	message[length-3] = checksum_string[0];
    681c:	1961      	adds	r1, r4, r5
    681e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6822:	f801 3c03 	strb.w	r3, [r1, #-3]
	message[length-2] = checksum_string[1];
    6826:	f89d 3005 	ldrb.w	r3, [sp, #5]
    682a:	f801 3c02 	strb.w	r3, [r1, #-2]
	
}
    682e:	b003      	add	sp, #12
    6830:	bd30      	pop	{r4, r5, pc}
    6832:	bf00      	nop
    6834:	0000b15c 	.word	0x0000b15c
    6838:	0000a3fd 	.word	0x0000a3fd

0000683c <grid_msg_get_id>:


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    683c:	b500      	push	{lr}
    683e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    6840:	aa02      	add	r2, sp, #8
    6842:	2300      	movs	r3, #0
    6844:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    6848:	2102      	movs	r1, #2
    684a:	3004      	adds	r0, #4
    684c:	4b02      	ldr	r3, [pc, #8]	; (6858 <grid_msg_get_id+0x1c>)
    684e:	4798      	blx	r3
	
}
    6850:	b2c0      	uxtb	r0, r0
    6852:	b003      	add	sp, #12
    6854:	f85d fb04 	ldr.w	pc, [sp], #4
    6858:	000065c5 	.word	0x000065c5

0000685c <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    685c:	b500      	push	{lr}
    685e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    6860:	aa02      	add	r2, sp, #8
    6862:	2300      	movs	r3, #0
    6864:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    6868:	2102      	movs	r1, #2
    686a:	3006      	adds	r0, #6
    686c:	4b02      	ldr	r3, [pc, #8]	; (6878 <grid_msg_get_dx+0x1c>)
    686e:	4798      	blx	r3
	
}
    6870:	b2c0      	uxtb	r0, r0
    6872:	b003      	add	sp, #12
    6874:	f85d fb04 	ldr.w	pc, [sp], #4
    6878:	000065c5 	.word	0x000065c5

0000687c <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    687c:	b500      	push	{lr}
    687e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    6880:	aa02      	add	r2, sp, #8
    6882:	2300      	movs	r3, #0
    6884:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    6888:	2102      	movs	r1, #2
    688a:	3008      	adds	r0, #8
    688c:	4b02      	ldr	r3, [pc, #8]	; (6898 <grid_msg_get_dy+0x1c>)
    688e:	4798      	blx	r3

}
    6890:	b2c0      	uxtb	r0, r0
    6892:	b003      	add	sp, #12
    6894:	f85d fb04 	ldr.w	pc, [sp], #4
    6898:	000065c5 	.word	0x000065c5

0000689c <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    689c:	b500      	push	{lr}
    689e:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    68a0:	aa02      	add	r2, sp, #8
    68a2:	2300      	movs	r3, #0
    68a4:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    68a8:	2102      	movs	r1, #2
    68aa:	300a      	adds	r0, #10
    68ac:	4b02      	ldr	r3, [pc, #8]	; (68b8 <grid_msg_get_age+0x1c>)
    68ae:	4798      	blx	r3
	
}
    68b0:	b2c0      	uxtb	r0, r0
    68b2:	b003      	add	sp, #12
    68b4:	f85d fb04 	ldr.w	pc, [sp], #4
    68b8:	000065c5 	.word	0x000065c5

000068bc <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    68bc:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    68be:	460a      	mov	r2, r1
    68c0:	2102      	movs	r1, #2
    68c2:	3004      	adds	r0, #4
    68c4:	4b01      	ldr	r3, [pc, #4]	; (68cc <grid_msg_set_id+0x10>)
    68c6:	4798      	blx	r3
    68c8:	bd08      	pop	{r3, pc}
    68ca:	bf00      	nop
    68cc:	00006605 	.word	0x00006605

000068d0 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    68d0:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    68d2:	460a      	mov	r2, r1
    68d4:	2102      	movs	r1, #2
    68d6:	3006      	adds	r0, #6
    68d8:	4b01      	ldr	r3, [pc, #4]	; (68e0 <grid_msg_set_dx+0x10>)
    68da:	4798      	blx	r3
    68dc:	bd08      	pop	{r3, pc}
    68de:	bf00      	nop
    68e0:	00006605 	.word	0x00006605

000068e4 <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    68e4:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    68e6:	460a      	mov	r2, r1
    68e8:	2102      	movs	r1, #2
    68ea:	3008      	adds	r0, #8
    68ec:	4b01      	ldr	r3, [pc, #4]	; (68f4 <grid_msg_set_dy+0x10>)
    68ee:	4798      	blx	r3
    68f0:	bd08      	pop	{r3, pc}
    68f2:	bf00      	nop
    68f4:	00006605 	.word	0x00006605

000068f8 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    68f8:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    68fa:	460a      	mov	r2, r1
    68fc:	2102      	movs	r1, #2
    68fe:	300a      	adds	r0, #10
    6900:	4b01      	ldr	r3, [pc, #4]	; (6908 <grid_msg_set_age+0x10>)
    6902:	4798      	blx	r3
    6904:	bd08      	pop	{r3, pc}
    6906:	bf00      	nop
    6908:	00006605 	.word	0x00006605

0000690c <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    690c:	68c3      	ldr	r3, [r0, #12]
    690e:	4299      	cmp	r1, r3
    6910:	d00e      	beq.n	6930 <grid_msg_find_recent+0x24>
    6912:	2301      	movs	r3, #1
    6914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    6918:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    691c:	68d2      	ldr	r2, [r2, #12]
    691e:	428a      	cmp	r2, r1
    6920:	d008      	beq.n	6934 <grid_msg_find_recent+0x28>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    6922:	3301      	adds	r3, #1
    6924:	b2db      	uxtb	r3, r3
    6926:	f013 0f80 	tst.w	r3, #128	; 0x80
    692a:	d0f3      	beq.n	6914 <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    692c:	2000      	movs	r0, #0
    692e:	4770      	bx	lr
			return 1;
    6930:	2001      	movs	r0, #1
    6932:	4770      	bx	lr
    6934:	2001      	movs	r0, #1
}
    6936:	4770      	bx	lr

00006938 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    6938:	f890 320c 	ldrb.w	r3, [r0, #524]	; 0x20c
    693c:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    693e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6942:	f880 320c 	strb.w	r3, [r0, #524]	; 0x20c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    6946:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    694a:	60c1      	str	r1, [r0, #12]
    694c:	4770      	bx	lr
	...

00006950 <grid_buffer_init>:
uint8_t usb_tx_double_buffer[GRID_BUFFER_TX_SIZE];
uint8_t usb_rx_double_buffer[GRID_BUFFER_RX_SIZE];



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    6950:	b538      	push	{r3, r4, r5, lr}
    6952:	4604      	mov	r4, r0
    6954:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    6956:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    6958:	2300      	movs	r3, #0
    695a:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    695c:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    695e:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    6960:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    6962:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    6964:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    6966:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    6968:	4608      	mov	r0, r1
    696a:	4b08      	ldr	r3, [pc, #32]	; (698c <grid_buffer_init+0x3c>)
    696c:	4798      	blx	r3
    696e:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    6970:	b900      	cbnz	r0, 6974 <grid_buffer_init+0x24>
    6972:	e7fe      	b.n	6972 <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    6974:	b145      	cbz	r5, 6988 <grid_buffer_init+0x38>
    6976:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    6978:	4619      	mov	r1, r3
    697a:	6862      	ldr	r2, [r4, #4]
    697c:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    697e:	3301      	adds	r3, #1
    6980:	b29b      	uxth	r3, r3
    6982:	8822      	ldrh	r2, [r4, #0]
    6984:	429a      	cmp	r2, r3
    6986:	d8f8      	bhi.n	697a <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    6988:	2001      	movs	r0, #1
    698a:	bd38      	pop	{r3, r4, r5, pc}
    698c:	0000a24d 	.word	0x0000a24d

00006990 <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    6990:	8903      	ldrh	r3, [r0, #8]
    6992:	8a02      	ldrh	r2, [r0, #16]
    6994:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    6996:	bf8f      	iteee	hi
    6998:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    699a:	8800      	ldrhls	r0, [r0, #0]
    699c:	18c0      	addls	r0, r0, r3
    699e:	1a80      	subls	r0, r0, r2
    69a0:	b280      	uxth	r0, r0

	return space;

	
	
}
    69a2:	4770      	bx	lr

000069a4 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(GRID_BUFFER_t* buf, uint16_t length){
    69a4:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    69a6:	8903      	ldrh	r3, [r0, #8]
    69a8:	8a02      	ldrh	r2, [r0, #16]
    69aa:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    69ac:	bf9c      	itt	ls
    69ae:	8804      	ldrhls	r4, [r0, #0]
    69b0:	191b      	addls	r3, r3, r4
    69b2:	1a9b      	subs	r3, r3, r2
    69b4:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    69b6:	428b      	cmp	r3, r1
    69b8:	d90a      	bls.n	69d0 <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    69ba:	440a      	add	r2, r1
    69bc:	8804      	ldrh	r4, [r0, #0]
    69be:	fb92 f3f4 	sdiv	r3, r2, r4
    69c2:	fb04 2213 	mls	r2, r4, r3, r2
    69c6:	8242      	strh	r2, [r0, #18]
		
		return length;
    69c8:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    69ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    69ce:	4770      	bx	lr
		return 0; // failed
    69d0:	2000      	movs	r0, #0
    69d2:	e7fa      	b.n	69ca <grid_buffer_write_init+0x26>

000069d4 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(GRID_BUFFER_t* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    69d4:	8a83      	ldrh	r3, [r0, #20]
    69d6:	6842      	ldr	r2, [r0, #4]
    69d8:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    69da:	8a83      	ldrh	r3, [r0, #20]
    69dc:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    69de:	b29b      	uxth	r3, r3
    69e0:	8801      	ldrh	r1, [r0, #0]
    69e2:	fbb3 f2f1 	udiv	r2, r3, r1
    69e6:	fb01 3312 	mls	r3, r1, r2, r3
    69ea:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    69ec:	2001      	movs	r0, #1
    69ee:	4770      	bx	lr

000069f0 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(GRID_BUFFER_t* buf){
	
	if (buf->write_active == buf->write_stop){
    69f0:	8a83      	ldrh	r3, [r0, #20]
    69f2:	8a42      	ldrh	r2, [r0, #18]
    69f4:	429a      	cmp	r2, r3
    69f6:	d000      	beq.n	69fa <grid_buffer_write_acknowledge+0xa>
    69f8:	e7fe      	b.n	69f8 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    69fa:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    69fc:	2001      	movs	r0, #1
    69fe:	4770      	bx	lr

00006a00 <grid_sys_ping>:
}




void grid_sys_ping(GRID_PORT_t* por){
    6a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a02:	b08b      	sub	sp, #44	; 0x2c
    6a04:	4606      	mov	r6, r0
		
	char message[20];
	uint8_t length = 0;
	
	// Create the packet
	sprintf(message, "%c%c%c%c%08x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, por->direction ,grid_sys_get_hwcfg(), GRID_MSG_END_OF_TRANSMISSION);
    6a06:	7944      	ldrb	r4, [r0, #5]
    6a08:	4b1a      	ldr	r3, [pc, #104]	; (6a74 <grid_sys_ping+0x74>)
    6a0a:	4798      	blx	r3
    6a0c:	2304      	movs	r3, #4
    6a0e:	9303      	str	r3, [sp, #12]
    6a10:	9002      	str	r0, [sp, #8]
    6a12:	9401      	str	r4, [sp, #4]
    6a14:	2307      	movs	r3, #7
    6a16:	9300      	str	r3, [sp, #0]
    6a18:	230e      	movs	r3, #14
    6a1a:	2201      	movs	r2, #1
    6a1c:	4916      	ldr	r1, [pc, #88]	; (6a78 <grid_sys_ping+0x78>)
    6a1e:	a805      	add	r0, sp, #20
    6a20:	4c16      	ldr	r4, [pc, #88]	; (6a7c <grid_sys_ping+0x7c>)
    6a22:	47a0      	blx	r4
	
	// Calculate packet length
	length = strlen(message);
    6a24:	a805      	add	r0, sp, #20
    6a26:	4b16      	ldr	r3, [pc, #88]	; (6a80 <grid_sys_ping+0x80>)
    6a28:	4798      	blx	r3
    6a2a:	b2c5      	uxtb	r5, r0

	grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    6a2c:	4629      	mov	r1, r5
    6a2e:	a805      	add	r0, sp, #20
    6a30:	4b14      	ldr	r3, [pc, #80]	; (6a84 <grid_sys_ping+0x84>)
    6a32:	4798      	blx	r3
    6a34:	4602      	mov	r2, r0
    6a36:	4629      	mov	r1, r5
    6a38:	a805      	add	r0, sp, #20
    6a3a:	4b13      	ldr	r3, [pc, #76]	; (6a88 <grid_sys_ping+0x88>)
    6a3c:	4798      	blx	r3
		
	// Put the packet into the tx_buffer
	if (grid_buffer_write_init(&por->tx_buffer, length)){
    6a3e:	f506 76d6 	add.w	r6, r6, #428	; 0x1ac
    6a42:	b2ad      	uxth	r5, r5
    6a44:	4629      	mov	r1, r5
    6a46:	4630      	mov	r0, r6
    6a48:	4b10      	ldr	r3, [pc, #64]	; (6a8c <grid_sys_ping+0x8c>)
    6a4a:	4798      	blx	r3
    6a4c:	b180      	cbz	r0, 6a70 <grid_sys_ping+0x70>
		
		for(uint16_t i = 0; i<length; i++){
    6a4e:	b165      	cbz	r5, 6a6a <grid_sys_ping+0x6a>
    6a50:	f10d 0413 	add.w	r4, sp, #19
    6a54:	3d01      	subs	r5, #1
    6a56:	ab05      	add	r3, sp, #20
    6a58:	fa13 f585 	uxtah	r5, r3, r5
			
			grid_buffer_write_character(&por->tx_buffer, message[i]);
    6a5c:	4f0c      	ldr	r7, [pc, #48]	; (6a90 <grid_sys_ping+0x90>)
    6a5e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    6a62:	4630      	mov	r0, r6
    6a64:	47b8      	blx	r7
		for(uint16_t i = 0; i<length; i++){
    6a66:	42ac      	cmp	r4, r5
    6a68:	d1f9      	bne.n	6a5e <grid_sys_ping+0x5e>
		}
		
		grid_buffer_write_acknowledge(&por->tx_buffer);
    6a6a:	4630      	mov	r0, r6
    6a6c:	4b09      	ldr	r3, [pc, #36]	; (6a94 <grid_sys_ping+0x94>)
    6a6e:	4798      	blx	r3
	}
				
	
}
    6a70:	b00b      	add	sp, #44	; 0x2c
    6a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a74:	0000663d 	.word	0x0000663d
    6a78:	0000b164 	.word	0x0000b164
    6a7c:	0000a3fd 	.word	0x0000a3fd
    6a80:	0000a445 	.word	0x0000a445
    6a84:	000067f1 	.word	0x000067f1
    6a88:	0000680d 	.word	0x0000680d
    6a8c:	000069a5 	.word	0x000069a5
    6a90:	000069d5 	.word	0x000069d5
    6a94:	000069f1 	.word	0x000069f1

00006a98 <grid_buffer_read_size>:
}


uint16_t grid_buffer_read_size(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    6a98:	8983      	ldrh	r3, [r0, #12]
    6a9a:	8942      	ldrh	r2, [r0, #10]
    6a9c:	429a      	cmp	r2, r3
    6a9e:	d000      	beq.n	6aa2 <grid_buffer_read_size+0xa>
    6aa0:	e7fe      	b.n	6aa0 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    6aa2:	8902      	ldrh	r2, [r0, #8]
    6aa4:	429a      	cmp	r2, r3
    6aa6:	d000      	beq.n	6aaa <grid_buffer_read_size+0x12>
    6aa8:	e7fe      	b.n	6aa8 <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(GRID_BUFFER_t* buf){
    6aaa:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    6aac:	8a05      	ldrh	r5, [r0, #16]
    6aae:	42ab      	cmp	r3, r5
    6ab0:	d025      	beq.n	6afe <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6ab2:	8804      	ldrh	r4, [r0, #0]
    6ab4:	b1fc      	cbz	r4, 6af6 <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6ab6:	4626      	mov	r6, r4
    6ab8:	fb93 f2f4 	sdiv	r2, r3, r4
    6abc:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    6ac0:	b291      	uxth	r1, r2
    6ac2:	428d      	cmp	r5, r1
    6ac4:	d01d      	beq.n	6b02 <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    6ac6:	6840      	ldr	r0, [r0, #4]
    6ac8:	5c42      	ldrb	r2, [r0, r1]
    6aca:	2a0a      	cmp	r2, #10
    6acc:	d114      	bne.n	6af8 <grid_buffer_read_size+0x60>
    6ace:	2300      	movs	r3, #0
						
			return i+1; // packet length
    6ad0:	3301      	adds	r3, #1
    6ad2:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    6ad4:	bcf0      	pop	{r4, r5, r6, r7}
    6ad6:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6ad8:	fb92 f1f6 	sdiv	r1, r2, r6
    6adc:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    6ae0:	b28f      	uxth	r7, r1
    6ae2:	42bd      	cmp	r5, r7
    6ae4:	d00f      	beq.n	6b06 <grid_buffer_read_size+0x6e>
    6ae6:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    6ae8:	5dc1      	ldrb	r1, [r0, r7]
    6aea:	290a      	cmp	r1, #10
    6aec:	d0f0      	beq.n	6ad0 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6aee:	3301      	adds	r3, #1
    6af0:	b29b      	uxth	r3, r3
    6af2:	42a3      	cmp	r3, r4
    6af4:	d1f0      	bne.n	6ad8 <grid_buffer_read_size+0x40>
    6af6:	e7fe      	b.n	6af6 <grid_buffer_read_size+0x5e>
    6af8:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    6afa:	2300      	movs	r3, #0
    6afc:	e7f7      	b.n	6aee <grid_buffer_read_size+0x56>
		return 0;
    6afe:	2000      	movs	r0, #0
    6b00:	e7e8      	b.n	6ad4 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    6b02:	2000      	movs	r0, #0
    6b04:	e7e6      	b.n	6ad4 <grid_buffer_read_size+0x3c>
    6b06:	2000      	movs	r0, #0
    6b08:	e7e4      	b.n	6ad4 <grid_buffer_read_size+0x3c>

00006b0a <grid_buffer_read_init>:



uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
	
	if (buf->read_active != buf->read_stop) {
    6b0a:	8982      	ldrh	r2, [r0, #12]
    6b0c:	8943      	ldrh	r3, [r0, #10]
    6b0e:	4293      	cmp	r3, r2
    6b10:	d000      	beq.n	6b14 <grid_buffer_read_init+0xa>
    6b12:	e7fe      	b.n	6b12 <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    6b14:	8903      	ldrh	r3, [r0, #8]
    6b16:	4293      	cmp	r3, r2
    6b18:	d000      	beq.n	6b1c <grid_buffer_read_init+0x12>
    6b1a:	e7fe      	b.n	6b1a <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(GRID_BUFFER_t* buf){
    6b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    6b1e:	8a05      	ldrh	r5, [r0, #16]
    6b20:	42aa      	cmp	r2, r5
    6b22:	d031      	beq.n	6b88 <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6b24:	8804      	ldrh	r4, [r0, #0]
    6b26:	b35c      	cbz	r4, 6b80 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6b28:	4626      	mov	r6, r4
    6b2a:	fb92 f3f4 	sdiv	r3, r2, r4
    6b2e:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    6b32:	b299      	uxth	r1, r3
    6b34:	428d      	cmp	r5, r1
    6b36:	d029      	beq.n	6b8c <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    6b38:	6847      	ldr	r7, [r0, #4]
    6b3a:	460b      	mov	r3, r1
    6b3c:	5c79      	ldrb	r1, [r7, r1]
    6b3e:	290a      	cmp	r1, #10
    6b40:	d11f      	bne.n	6b82 <grid_buffer_read_init+0x78>
    6b42:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    6b44:	3301      	adds	r3, #1
    6b46:	fb93 f2f4 	sdiv	r2, r3, r4
    6b4a:	fb04 3312 	mls	r3, r4, r2, r3
    6b4e:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    6b50:	1c4b      	adds	r3, r1, #1
    6b52:	b29b      	uxth	r3, r3
    6b54:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    6b56:	4618      	mov	r0, r3
    6b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    6b5a:	fb92 f3f6 	sdiv	r3, r2, r6
    6b5e:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    6b62:	fa1f fe83 	uxth.w	lr, r3
    6b66:	4575      	cmp	r5, lr
    6b68:	d012      	beq.n	6b90 <grid_buffer_read_init+0x86>
    6b6a:	4673      	mov	r3, lr
    6b6c:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    6b6e:	f817 e00e 	ldrb.w	lr, [r7, lr]
    6b72:	f1be 0f0a 	cmp.w	lr, #10
    6b76:	d0e5      	beq.n	6b44 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    6b78:	3101      	adds	r1, #1
    6b7a:	b289      	uxth	r1, r1
    6b7c:	42a1      	cmp	r1, r4
    6b7e:	d1ec      	bne.n	6b5a <grid_buffer_read_init+0x50>
    6b80:	e7fe      	b.n	6b80 <grid_buffer_read_init+0x76>
    6b82:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    6b84:	2100      	movs	r1, #0
    6b86:	e7f7      	b.n	6b78 <grid_buffer_read_init+0x6e>
		return 0;
    6b88:	2300      	movs	r3, #0
    6b8a:	e7e4      	b.n	6b56 <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    6b8c:	2300      	movs	r3, #0
    6b8e:	e7e2      	b.n	6b56 <grid_buffer_read_init+0x4c>
    6b90:	2300      	movs	r3, #0
    6b92:	e7e0      	b.n	6b56 <grid_buffer_read_init+0x4c>

00006b94 <grid_buffer_read_character>:


uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    6b94:	8983      	ldrh	r3, [r0, #12]
    6b96:	8941      	ldrh	r1, [r0, #10]
    6b98:	4299      	cmp	r1, r3
    6b9a:	d00e      	beq.n	6bba <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(GRID_BUFFER_t* buf){
    6b9c:	b410      	push	{r4}
    6b9e:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    6ba0:	6841      	ldr	r1, [r0, #4]
    6ba2:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    6ba4:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    6ba6:	b29b      	uxth	r3, r3
    6ba8:	8814      	ldrh	r4, [r2, #0]
    6baa:	fbb3 f1f4 	udiv	r1, r3, r4
    6bae:	fb04 3311 	mls	r3, r4, r1, r3
    6bb2:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    6bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    6bb8:	4770      	bx	lr
    6bba:	e7fe      	b.n	6bba <grid_buffer_read_character+0x26>

00006bbc <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(GRID_BUFFER_t* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    6bbc:	8983      	ldrh	r3, [r0, #12]
    6bbe:	8942      	ldrh	r2, [r0, #10]
    6bc0:	429a      	cmp	r2, r3
    6bc2:	d000      	beq.n	6bc6 <grid_buffer_read_acknowledge+0xa>
    6bc4:	e7fe      	b.n	6bc4 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    6bc6:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    6bc8:	2001      	movs	r0, #1
    6bca:	4770      	bx	lr

00006bcc <grid_port_init>:
	return 1;
}



void grid_port_init(GRID_PORT_t* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    6bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6bd0:	4604      	mov	r4, r0
    6bd2:	4691      	mov	r9, r2
    6bd4:	4698      	mov	r8, r3
    6bd6:	f89d 6020 	ldrb.w	r6, [sp, #32]
    6bda:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    6bde:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    6be2:	4f23      	ldr	r7, [pc, #140]	; (6c70 <grid_port_init+0xa4>)
    6be4:	47b8      	blx	r7
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    6be6:	4649      	mov	r1, r9
    6be8:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
    6bec:	47b8      	blx	r7
	
	por->dma_channel = dma;
    6bee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    6bf2:	71a3      	strb	r3, [r4, #6]
	
	por->direction = dir;
    6bf4:	7165      	strb	r5, [r4, #5]
	
	por->usart	= usart;
    6bf6:	f8c4 8000 	str.w	r8, [r4]
	por->type		= type;
    6bfa:	7126      	strb	r6, [r4, #4]
	
	por->tx_double_buffer_status	= 0;
    6bfc:	2300      	movs	r3, #0
    6bfe:	8123      	strh	r3, [r4, #8]
	por->rx_double_buffer_status	= 0;
    6c00:	82e3      	strh	r3, [r4, #22]
	
	
	por->partner_fi = 0;
    6c02:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
	
	por->partner_hwcfg = 0;
    6c06:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	por->partner_status = 1;
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    6c0a:	2e01      	cmp	r6, #1
    6c0c:	d004      	beq.n	6c18 <grid_port_init+0x4c>
	por->partner_status = 1;
    6c0e:	2301      	movs	r3, #1
    6c10:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
    6c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		
		por->partner_status = 0;
    6c18:	2300      	movs	r3, #0
    6c1a:	f884 31e3 	strb.w	r3, [r4, #483]	; 0x1e3
		por->partner_fi = 0;
		
		
		if (por->direction == GRID_MSG_NORTH){
    6c1e:	2d11      	cmp	r5, #17
    6c20:	d007      	beq.n	6c32 <grid_port_init+0x66>
			por->dx = 0;
			por->dy = 1;
		}
		else if (por->direction == GRID_MSG_EAST){
    6c22:	2d12      	cmp	r5, #18
    6c24:	d00c      	beq.n	6c40 <grid_port_init+0x74>
			por->dx = 1;
			por->dy = 0;
		}
		else if (por->direction == GRID_MSG_SOUTH){
    6c26:	2d13      	cmp	r5, #19
    6c28:	d012      	beq.n	6c50 <grid_port_init+0x84>
			por->dx = 0;
			por->dy = -1;
		}
		else if (por->direction == GRID_MSG_WEST){
    6c2a:	2d14      	cmp	r5, #20
    6c2c:	d018      	beq.n	6c60 <grid_port_init+0x94>
    6c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 0;
    6c32:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 1;
    6c36:	2301      	movs	r3, #1
    6c38:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    6c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 1;
    6c40:	2301      	movs	r3, #1
    6c42:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    6c46:	2300      	movs	r3, #0
    6c48:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    6c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = 0;
    6c50:	2300      	movs	r3, #0
    6c52:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = -1;
    6c56:	23ff      	movs	r3, #255	; 0xff
    6c58:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
    6c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			por->dx = -1;
    6c60:	23ff      	movs	r3, #255	; 0xff
    6c62:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
			por->dy = 0;
    6c66:	2300      	movs	r3, #0
    6c68:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
	}
	
}
    6c6c:	e7df      	b.n	6c2e <grid_port_init+0x62>
    6c6e:	bf00      	nop
    6c70:	00006951 	.word	0x00006951

00006c74 <grid_port_init_all>:




void grid_port_init_all(){
    6c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c78:	b084      	sub	sp, #16
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0);
    6c7a:	2600      	movs	r6, #0
    6c7c:	9602      	str	r6, [sp, #8]
    6c7e:	2311      	movs	r3, #17
    6c80:	9301      	str	r3, [sp, #4]
    6c82:	2401      	movs	r4, #1
    6c84:	9400      	str	r4, [sp, #0]
    6c86:	4b25      	ldr	r3, [pc, #148]	; (6d1c <grid_port_init_all+0xa8>)
    6c88:	f44f 7248 	mov.w	r2, #800	; 0x320
    6c8c:	4611      	mov	r1, r2
    6c8e:	4824      	ldr	r0, [pc, #144]	; (6d20 <grid_port_init_all+0xac>)
    6c90:	4d24      	ldr	r5, [pc, #144]	; (6d24 <grid_port_init_all+0xb0>)
    6c92:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1);
    6c94:	9402      	str	r4, [sp, #8]
    6c96:	2312      	movs	r3, #18
    6c98:	9301      	str	r3, [sp, #4]
    6c9a:	9400      	str	r4, [sp, #0]
    6c9c:	4b22      	ldr	r3, [pc, #136]	; (6d28 <grid_port_init_all+0xb4>)
    6c9e:	f44f 7248 	mov.w	r2, #800	; 0x320
    6ca2:	4611      	mov	r1, r2
    6ca4:	4821      	ldr	r0, [pc, #132]	; (6d2c <grid_port_init_all+0xb8>)
    6ca6:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2);
    6ca8:	f04f 0902 	mov.w	r9, #2
    6cac:	f8cd 9008 	str.w	r9, [sp, #8]
    6cb0:	2313      	movs	r3, #19
    6cb2:	9301      	str	r3, [sp, #4]
    6cb4:	9400      	str	r4, [sp, #0]
    6cb6:	4b1e      	ldr	r3, [pc, #120]	; (6d30 <grid_port_init_all+0xbc>)
    6cb8:	f44f 7248 	mov.w	r2, #800	; 0x320
    6cbc:	4611      	mov	r1, r2
    6cbe:	481d      	ldr	r0, [pc, #116]	; (6d34 <grid_port_init_all+0xc0>)
    6cc0:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3);
    6cc2:	2703      	movs	r7, #3
    6cc4:	9702      	str	r7, [sp, #8]
    6cc6:	2314      	movs	r3, #20
    6cc8:	9301      	str	r3, [sp, #4]
    6cca:	9400      	str	r4, [sp, #0]
    6ccc:	4b1a      	ldr	r3, [pc, #104]	; (6d38 <grid_port_init_all+0xc4>)
    6cce:	f44f 7248 	mov.w	r2, #800	; 0x320
    6cd2:	4611      	mov	r1, r2
    6cd4:	4819      	ldr	r0, [pc, #100]	; (6d3c <grid_port_init_all+0xc8>)
    6cd6:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_UI, 0, -1);
    6cd8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 6d44 <grid_port_init_all+0xd0>
    6cdc:	f04f 0aff 	mov.w	sl, #255	; 0xff
    6ce0:	f8cd a008 	str.w	sl, [sp, #8]
    6ce4:	9601      	str	r6, [sp, #4]
    6ce6:	9700      	str	r7, [sp, #0]
    6ce8:	4633      	mov	r3, r6
    6cea:	f44f 7248 	mov.w	r2, #800	; 0x320
    6cee:	4611      	mov	r1, r2
    6cf0:	4640      	mov	r0, r8
    6cf2:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE*4, GRID_BUFFER_RX_SIZE*4, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    6cf4:	4f12      	ldr	r7, [pc, #72]	; (6d40 <grid_port_init_all+0xcc>)
    6cf6:	f8cd a008 	str.w	sl, [sp, #8]
    6cfa:	9601      	str	r6, [sp, #4]
    6cfc:	f8cd 9000 	str.w	r9, [sp]
    6d00:	4633      	mov	r3, r6
    6d02:	f44f 7248 	mov.w	r2, #800	; 0x320
    6d06:	4611      	mov	r1, r2
    6d08:	4638      	mov	r0, r7
    6d0a:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    6d0c:	f888 41e3 	strb.w	r4, [r8, #483]	; 0x1e3
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    6d10:	f887 41e3 	strb.w	r4, [r7, #483]	; 0x1e3
	
	
}
    6d14:	b004      	add	sp, #16
    6d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d1a:	bf00      	nop
    6d1c:	200014a4 	.word	0x200014a4
    6d20:	20001a80 	.word	0x20001a80
    6d24:	00006bcd 	.word	0x00006bcd
    6d28:	20001454 	.word	0x20001454
    6d2c:	20002950 	.word	0x20002950
    6d30:	200015a8 	.word	0x200015a8
    6d34:	2000244c 	.word	0x2000244c
    6d38:	20001558 	.word	0x20001558
    6d3c:	20002264 	.word	0x20002264
    6d40:	200026fc 	.word	0x200026fc
    6d44:	20001c74 	.word	0x20001c74

00006d48 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//

uint8_t grid_port_process_inbound(GRID_PORT_t* por){
    6d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d4c:	b08f      	sub	sp, #60	; 0x3c
    6d4e:	af00      	add	r7, sp, #0
    6d50:	6078      	str	r0, [r7, #4]
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    6d52:	f500 79e2 	add.w	r9, r0, #452	; 0x1c4
    6d56:	4648      	mov	r0, r9
    6d58:	4b4f      	ldr	r3, [pc, #316]	; (6e98 <grid_port_process_inbound+0x150>)
    6d5a:	4798      	blx	r3
	
	if (!packet_size){
    6d5c:	b920      	cbnz	r0, 6d68 <grid_port_process_inbound+0x20>
    6d5e:	2000      	movs	r0, #0
		}	

		
	}
		
}
    6d60:	373c      	adds	r7, #60	; 0x3c
    6d62:	46bd      	mov	sp, r7
    6d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d68:	4680      	mov	r8, r0
	}else{
    6d6a:	f8c7 d000 	str.w	sp, [r7]
		port_array_default[0] = &GRID_PORT_N;
    6d6e:	4b4b      	ldr	r3, [pc, #300]	; (6e9c <grid_port_process_inbound+0x154>)
    6d70:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    6d72:	4b4b      	ldr	r3, [pc, #300]	; (6ea0 <grid_port_process_inbound+0x158>)
    6d74:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    6d76:	4b4b      	ldr	r3, [pc, #300]	; (6ea4 <grid_port_process_inbound+0x15c>)
    6d78:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    6d7a:	4b4b      	ldr	r3, [pc, #300]	; (6ea8 <grid_port_process_inbound+0x160>)
    6d7c:	617b      	str	r3, [r7, #20]
		port_array_default[4] = &GRID_PORT_U;
    6d7e:	4b4b      	ldr	r3, [pc, #300]	; (6eac <grid_port_process_inbound+0x164>)
    6d80:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    6d82:	4b4b      	ldr	r3, [pc, #300]	; (6eb0 <grid_port_process_inbound+0x168>)
    6d84:	61fb      	str	r3, [r7, #28]
    6d86:	f107 0308 	add.w	r3, r7, #8
    6d8a:	f107 0120 	add.w	r1, r7, #32
		uint8_t j=0;
    6d8e:	2600      	movs	r6, #0
    6d90:	e001      	b.n	6d96 <grid_port_process_inbound+0x4e>
		for(uint8_t i=0; i<port_count; i++){
    6d92:	428b      	cmp	r3, r1
    6d94:	d00e      	beq.n	6db4 <grid_port_process_inbound+0x6c>
			if (port_array_default[i]->partner_status != 0){
    6d96:	f853 2b04 	ldr.w	r2, [r3], #4
    6d9a:	f892 01e3 	ldrb.w	r0, [r2, #483]	; 0x1e3
    6d9e:	2800      	cmp	r0, #0
    6da0:	d0f7      	beq.n	6d92 <grid_port_process_inbound+0x4a>
				port_array[j] = port_array_default[i];
    6da2:	f107 0038 	add.w	r0, r7, #56	; 0x38
    6da6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    6daa:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    6dae:	3601      	adds	r6, #1
    6db0:	b2f6      	uxtb	r6, r6
    6db2:	e7ee      	b.n	6d92 <grid_port_process_inbound+0x4a>
		for (uint8_t i=0; i<port_count; i++)
    6db4:	2e00      	cmp	r6, #0
    6db6:	d05d      	beq.n	6e74 <grid_port_process_inbound+0x12c>
    6db8:	f107 0a20 	add.w	sl, r7, #32
    6dbc:	1e74      	subs	r4, r6, #1
    6dbe:	b2e4      	uxtb	r4, r4
    6dc0:	3401      	adds	r4, #1
    6dc2:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    6dc6:	4655      	mov	r5, sl
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    6dc8:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 6ec8 <grid_port_process_inbound+0x180>
    6dcc:	e001      	b.n	6dd2 <grid_port_process_inbound+0x8a>
		for (uint8_t i=0; i<port_count; i++)
    6dce:	42a5      	cmp	r5, r4
    6dd0:	d00c      	beq.n	6dec <grid_port_process_inbound+0xa4>
			if (port_array[i] != por){
    6dd2:	f855 0b04 	ldr.w	r0, [r5], #4
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	4283      	cmp	r3, r0
    6dda:	d0f8      	beq.n	6dce <grid_port_process_inbound+0x86>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    6ddc:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    6de0:	47d8      	blx	fp
    6de2:	4580      	cmp	r8, r0
    6de4:	d9f3      	bls.n	6dce <grid_port_process_inbound+0x86>
    6de6:	f8d7 d000 	ldr.w	sp, [r7]
    6dea:	e7b8      	b.n	6d5e <grid_port_process_inbound+0x16>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    6dec:	4648      	mov	r0, r9
    6dee:	4b31      	ldr	r3, [pc, #196]	; (6eb4 <grid_port_process_inbound+0x16c>)
    6df0:	4798      	blx	r3
    6df2:	4580      	cmp	r8, r0
    6df4:	d000      	beq.n	6df8 <grid_port_process_inbound+0xb0>
    6df6:	e7fe      	b.n	6df6 <grid_port_process_inbound+0xae>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    6df8:	4c2f      	ldr	r4, [pc, #188]	; (6eb8 <grid_port_process_inbound+0x170>)
    6dfa:	e001      	b.n	6e00 <grid_port_process_inbound+0xb8>
		for (uint8_t i=0; i<port_count; i++)
    6dfc:	45aa      	cmp	sl, r5
    6dfe:	d03e      	beq.n	6e7e <grid_port_process_inbound+0x136>
			if (port_array[i] != por){
    6e00:	f85a 0b04 	ldr.w	r0, [sl], #4
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	4283      	cmp	r3, r0
    6e08:	d0f8      	beq.n	6dfc <grid_port_process_inbound+0xb4>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    6e0a:	4641      	mov	r1, r8
    6e0c:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    6e10:	47a0      	blx	r4
    6e12:	e7f3      	b.n	6dfc <grid_port_process_inbound+0xb4>
			for (uint8_t i=0; i<port_count; i++){
    6e14:	42a5      	cmp	r5, r4
    6e16:	d009      	beq.n	6e2c <grid_port_process_inbound+0xe4>
				if (port_array[i] != por){
    6e18:	f854 0b04 	ldr.w	r0, [r4], #4
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	4283      	cmp	r3, r0
    6e20:	d0f8      	beq.n	6e14 <grid_port_process_inbound+0xcc>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    6e22:	6839      	ldr	r1, [r7, #0]
    6e24:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    6e28:	47d8      	blx	fp
    6e2a:	e7f3      	b.n	6e14 <grid_port_process_inbound+0xcc>
    6e2c:	f10a 0a01 	add.w	sl, sl, #1
		for (uint16_t j=0; j<packet_size; j++)
    6e30:	fa1f f38a 	uxth.w	r3, sl
    6e34:	4543      	cmp	r3, r8
    6e36:	d208      	bcs.n	6e4a <grid_port_process_inbound+0x102>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    6e38:	4648      	mov	r0, r9
    6e3a:	4b20      	ldr	r3, [pc, #128]	; (6ebc <grid_port_process_inbound+0x174>)
    6e3c:	4798      	blx	r3
    6e3e:	6038      	str	r0, [r7, #0]
			for (uint8_t i=0; i<port_count; i++){
    6e40:	2e00      	cmp	r6, #0
    6e42:	d0f3      	beq.n	6e2c <grid_port_process_inbound+0xe4>
    6e44:	f107 0420 	add.w	r4, r7, #32
    6e48:	e7e6      	b.n	6e18 <grid_port_process_inbound+0xd0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    6e4a:	4648      	mov	r0, r9
    6e4c:	4b1c      	ldr	r3, [pc, #112]	; (6ec0 <grid_port_process_inbound+0x178>)
    6e4e:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    6e50:	2e00      	cmp	r6, #0
    6e52:	d085      	beq.n	6d60 <grid_port_process_inbound+0x18>
    6e54:	f107 0420 	add.w	r4, r7, #32
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    6e58:	4e1a      	ldr	r6, [pc, #104]	; (6ec4 <grid_port_process_inbound+0x17c>)
    6e5a:	e002      	b.n	6e62 <grid_port_process_inbound+0x11a>
		for (uint8_t i=0; i<port_count; i++)
    6e5c:	42a5      	cmp	r5, r4
    6e5e:	f43f af7f 	beq.w	6d60 <grid_port_process_inbound+0x18>
			if (port_array[i] != por){
    6e62:	f854 0b04 	ldr.w	r0, [r4], #4
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	4283      	cmp	r3, r0
    6e6a:	d0f7      	beq.n	6e5c <grid_port_process_inbound+0x114>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    6e6c:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    6e70:	47b0      	blx	r6
    6e72:	e7f3      	b.n	6e5c <grid_port_process_inbound+0x114>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    6e74:	4648      	mov	r0, r9
    6e76:	4b0f      	ldr	r3, [pc, #60]	; (6eb4 <grid_port_process_inbound+0x16c>)
    6e78:	4798      	blx	r3
    6e7a:	4540      	cmp	r0, r8
    6e7c:	d1bb      	bne.n	6df6 <grid_port_process_inbound+0xae>
    6e7e:	1e75      	subs	r5, r6, #1
    6e80:	b2ed      	uxtb	r5, r5
    6e82:	f107 0338 	add.w	r3, r7, #56	; 0x38
    6e86:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6e8a:	3d14      	subs	r5, #20
		for (uint8_t i=0; i<port_count; i++)
    6e8c:	f04f 0a00 	mov.w	sl, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    6e90:	f8df b038 	ldr.w	fp, [pc, #56]	; 6ecc <grid_port_process_inbound+0x184>
    6e94:	e7d0      	b.n	6e38 <grid_port_process_inbound+0xf0>
    6e96:	bf00      	nop
    6e98:	00006a99 	.word	0x00006a99
    6e9c:	20001a80 	.word	0x20001a80
    6ea0:	20002950 	.word	0x20002950
    6ea4:	2000244c 	.word	0x2000244c
    6ea8:	20002264 	.word	0x20002264
    6eac:	20001c74 	.word	0x20001c74
    6eb0:	200026fc 	.word	0x200026fc
    6eb4:	00006b0b 	.word	0x00006b0b
    6eb8:	000069a5 	.word	0x000069a5
    6ebc:	00006b95 	.word	0x00006b95
    6ec0:	00006bbd 	.word	0x00006bbd
    6ec4:	000069f1 	.word	0x000069f1
    6ec8:	00006991 	.word	0x00006991
    6ecc:	000069d5 	.word	0x000069d5

00006ed0 <grid_port_process_outbound_usb>:

//=============================== PROCESS OUTBOUND ==============================//

volatile uint8_t temp[500];

uint8_t grid_port_process_outbound_usb(GRID_PORT_t* por){
    6ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ed4:	b097      	sub	sp, #92	; 0x5c
    6ed6:	af06      	add	r7, sp, #24
    6ed8:	6338      	str	r0, [r7, #48]	; 0x30
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    6eda:	f500 75d6 	add.w	r5, r0, #428	; 0x1ac
    6ede:	4628      	mov	r0, r5
    6ee0:	4ba2      	ldr	r3, [pc, #648]	; (716c <grid_port_process_outbound_usb+0x29c>)
    6ee2:	4798      	blx	r3
	
	if (!length){		
    6ee4:	b918      	cbnz	r0, 6eee <grid_port_process_outbound_usb+0x1e>
				
		
	}
	
	
}
    6ee6:	3744      	adds	r7, #68	; 0x44
    6ee8:	46bd      	mov	sp, r7
    6eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6eee:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    6ef0:	4628      	mov	r0, r5
    6ef2:	4b9f      	ldr	r3, [pc, #636]	; (7170 <grid_port_process_outbound_usb+0x2a0>)
    6ef4:	4798      	blx	r3
    6ef6:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    6ef8:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 71b4 <grid_port_process_outbound_usb+0x2e4>
    6efc:	f8df 8278 	ldr.w	r8, [pc, #632]	; 7178 <grid_port_process_outbound_usb+0x2a8>
    6f00:	4628      	mov	r0, r5
    6f02:	47c8      	blx	r9
    6f04:	f808 0004 	strb.w	r0, [r8, r4]
		for (uint8_t i = 0; i<length; i++){
    6f08:	3401      	adds	r4, #1
    6f0a:	b2e4      	uxtb	r4, r4
    6f0c:	b2a3      	uxth	r3, r4
    6f0e:	429e      	cmp	r6, r3
    6f10:	d8f6      	bhi.n	6f00 <grid_port_process_outbound_usb+0x30>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    6f12:	4628      	mov	r0, r5
    6f14:	4b97      	ldr	r3, [pc, #604]	; (7174 <grid_port_process_outbound_usb+0x2a4>)
    6f16:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);		
    6f18:	4c97      	ldr	r4, [pc, #604]	; (7178 <grid_port_process_outbound_usb+0x2a8>)
    6f1a:	4620      	mov	r0, r4
    6f1c:	4b97      	ldr	r3, [pc, #604]	; (717c <grid_port_process_outbound_usb+0x2ac>)
    6f1e:	4798      	blx	r3
    6f20:	62b8      	str	r0, [r7, #40]	; 0x28
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    6f22:	4620      	mov	r0, r4
    6f24:	4b96      	ldr	r3, [pc, #600]	; (7180 <grid_port_process_outbound_usb+0x2b0>)
    6f26:	4798      	blx	r3
    6f28:	387f      	subs	r0, #127	; 0x7f
    6f2a:	b243      	sxtb	r3, r0
    6f2c:	627b      	str	r3, [r7, #36]	; 0x24
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    6f2e:	4620      	mov	r0, r4
    6f30:	4b94      	ldr	r3, [pc, #592]	; (7184 <grid_port_process_outbound_usb+0x2b4>)
    6f32:	4798      	blx	r3
    6f34:	387f      	subs	r0, #127	; 0x7f
    6f36:	b243      	sxtb	r3, r0
    6f38:	623b      	str	r3, [r7, #32]
		uint8_t age = grid_msg_get_age(temp);
    6f3a:	4620      	mov	r0, r4
    6f3c:	4b92      	ldr	r3, [pc, #584]	; (7188 <grid_port_process_outbound_usb+0x2b8>)
    6f3e:	4798      	blx	r3
    6f40:	61f8      	str	r0, [r7, #28]
		uint8_t error_flag = 0;
    6f42:	2500      	movs	r5, #0
    6f44:	f887 503f 	strb.w	r5, [r7, #63]	; 0x3f
    6f48:	1e73      	subs	r3, r6, #1
    6f4a:	b29b      	uxth	r3, r3
    6f4c:	f103 0a01 	add.w	sl, r3, #1
    6f50:	46ab      	mov	fp, r5
    6f52:	637d      	str	r5, [r7, #52]	; 0x34
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    6f54:	46a1      	mov	r9, r4
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    6f56:	46d0      	mov	r8, sl
    6f58:	e006      	b.n	6f68 <grid_port_process_outbound_usb+0x98>
				current_start = i;
    6f5a:	fa5f f58b 	uxtb.w	r5, fp
    6f5e:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    6f62:	45c3      	cmp	fp, r8
    6f64:	f000 80fb 	beq.w	715e <grid_port_process_outbound_usb+0x28e>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    6f68:	f819 300b 	ldrb.w	r3, [r9, fp]
    6f6c:	b2db      	uxtb	r3, r3
    6f6e:	2b02      	cmp	r3, #2
    6f70:	d0f3      	beq.n	6f5a <grid_port_process_outbound_usb+0x8a>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    6f72:	f819 300b 	ldrb.w	r3, [r9, fp]
    6f76:	b2db      	uxtb	r3, r3
    6f78:	2b03      	cmp	r3, #3
    6f7a:	d1f0      	bne.n	6f5e <grid_port_process_outbound_usb+0x8e>
    6f7c:	2d00      	cmp	r5, #0
    6f7e:	d0ee      	beq.n	6f5e <grid_port_process_outbound_usb+0x8e>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    6f80:	462e      	mov	r6, r5
    6f82:	1c68      	adds	r0, r5, #1
    6f84:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6f88:	2102      	movs	r1, #2
    6f8a:	4448      	add	r0, r9
    6f8c:	4b7f      	ldr	r3, [pc, #508]	; (718c <grid_port_process_outbound_usb+0x2bc>)
    6f8e:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    6f90:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    6f94:	d018      	beq.n	6fc8 <grid_port_process_outbound_usb+0xf8>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    6f96:	2c01      	cmp	r4, #1
    6f98:	d058      	beq.n	704c <grid_port_process_outbound_usb+0x17c>
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    6f9a:	2c02      	cmp	r4, #2
    6f9c:	f000 80dd 	beq.w	715a <grid_port_process_outbound_usb+0x28a>
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    6fa0:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    6fa2:	f105 041c 	add.w	r4, r5, #28
    6fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6fa8:	441c      	add	r4, r3
    6faa:	b2c2      	uxtb	r2, r0
    6fac:	4978      	ldr	r1, [pc, #480]	; (7190 <grid_port_process_outbound_usb+0x2c0>)
    6fae:	4620      	mov	r0, r4
    6fb0:	4b78      	ldr	r3, [pc, #480]	; (7194 <grid_port_process_outbound_usb+0x2c4>)
    6fb2:	4798      	blx	r3
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    6fb4:	4620      	mov	r0, r4
    6fb6:	4b78      	ldr	r3, [pc, #480]	; (7198 <grid_port_process_outbound_usb+0x2c8>)
    6fb8:	4798      	blx	r3
    6fba:	eb05 0a00 	add.w	sl, r5, r0
    6fbe:	fa5f f38a 	uxtb.w	r3, sl
    6fc2:	637b      	str	r3, [r7, #52]	; 0x34
				current_start = 0;
    6fc4:	2500      	movs	r5, #0
    6fc6:	e7ca      	b.n	6f5e <grid_port_process_outbound_usb+0x8e>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    6fc8:	1ce8      	adds	r0, r5, #3
    6fca:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6fce:	2102      	movs	r1, #2
    6fd0:	4448      	add	r0, r9
    6fd2:	4b6e      	ldr	r3, [pc, #440]	; (718c <grid_port_process_outbound_usb+0x2bc>)
    6fd4:	4798      	blx	r3
    6fd6:	4682      	mov	sl, r0
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    6fd8:	1d68      	adds	r0, r5, #5
    6fda:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6fde:	2102      	movs	r1, #2
    6fe0:	4448      	add	r0, r9
    6fe2:	4b6a      	ldr	r3, [pc, #424]	; (718c <grid_port_process_outbound_usb+0x2bc>)
    6fe4:	4798      	blx	r3
    6fe6:	62f8      	str	r0, [r7, #44]	; 0x2c
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    6fe8:	1de8      	adds	r0, r5, #7
    6fea:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    6fee:	2102      	movs	r1, #2
    6ff0:	4448      	add	r0, r9
    6ff2:	4b66      	ldr	r3, [pc, #408]	; (718c <grid_port_process_outbound_usb+0x2bc>)
    6ff4:	4798      	blx	r3
    6ff6:	4606      	mov	r6, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    6ff8:	f105 0009 	add.w	r0, r5, #9
    6ffc:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    7000:	2102      	movs	r1, #2
    7002:	4448      	add	r0, r9
    7004:	4b61      	ldr	r3, [pc, #388]	; (718c <grid_port_process_outbound_usb+0x2bc>)
    7006:	4798      	blx	r3
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    7008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    700a:	f103 051c 	add.w	r5, r3, #28
    700e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    7010:	4415      	add	r5, r2
    7012:	b2c0      	uxtb	r0, r0
    7014:	9005      	str	r0, [sp, #20]
    7016:	b2f6      	uxtb	r6, r6
    7018:	9604      	str	r6, [sp, #16]
    701a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    701e:	9303      	str	r3, [sp, #12]
    7020:	fa5f f38a 	uxtb.w	r3, sl
    7024:	9302      	str	r3, [sp, #8]
    7026:	69fa      	ldr	r2, [r7, #28]
    7028:	9201      	str	r2, [sp, #4]
    702a:	6a3a      	ldr	r2, [r7, #32]
    702c:	9200      	str	r2, [sp, #0]
    702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7030:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7032:	495a      	ldr	r1, [pc, #360]	; (719c <grid_port_process_outbound_usb+0x2cc>)
    7034:	4628      	mov	r0, r5
    7036:	4e57      	ldr	r6, [pc, #348]	; (7194 <grid_port_process_outbound_usb+0x2c4>)
    7038:	47b0      	blx	r6
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    703a:	4628      	mov	r0, r5
    703c:	4b56      	ldr	r3, [pc, #344]	; (7198 <grid_port_process_outbound_usb+0x2c8>)
    703e:	4798      	blx	r3
    7040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7042:	4418      	add	r0, r3
    7044:	b2c3      	uxtb	r3, r0
    7046:	637b      	str	r3, [r7, #52]	; 0x34
				current_start = 0;
    7048:	4625      	mov	r5, r4
    704a:	e788      	b.n	6f5e <grid_port_process_outbound_usb+0x8e>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    704c:	f8c7 d014 	str.w	sp, [r7, #20]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    7050:	fa5f f38b 	uxtb.w	r3, fp
    7054:	1b5b      	subs	r3, r3, r5
    7056:	3b03      	subs	r3, #3
    7058:	4a51      	ldr	r2, [pc, #324]	; (71a0 <grid_port_process_outbound_usb+0x2d0>)
    705a:	fb82 1203 	smull	r1, r2, r2, r3
    705e:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
    7062:	b2db      	uxtb	r3, r3
    7064:	4619      	mov	r1, r3
    7066:	613b      	str	r3, [r7, #16]
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    7068:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    706c:	3307      	adds	r3, #7
    706e:	f023 0307 	bic.w	r3, r3, #7
    7072:	ebad 0d03 	sub.w	sp, sp, r3
    7076:	ab06      	add	r3, sp, #24
    7078:	461a      	mov	r2, r3
    707a:	60fb      	str	r3, [r7, #12]
					for(uint8_t j=0; j<key_array_length; j++){
    707c:	2900      	cmp	r1, #0
    707e:	d064      	beq.n	714a <grid_port_process_outbound_usb+0x27a>
    7080:	3603      	adds	r6, #3
    7082:	eb06 0a09 	add.w	sl, r6, r9
    7086:	1e4b      	subs	r3, r1, #1
    7088:	b2db      	uxtb	r3, r3
    708a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    708e:	3509      	adds	r5, #9
    7090:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    7094:	444b      	add	r3, r9
    7096:	61bb      	str	r3, [r7, #24]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    7098:	62fa      	str	r2, [r7, #44]	; 0x2c
    709a:	f8c7 b008 	str.w	fp, [r7, #8]
    709e:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
    70a2:	f8c7 8004 	str.w	r8, [r7, #4]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    70a6:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    70aa:	2102      	movs	r1, #2
    70ac:	4650      	mov	r0, sl
    70ae:	4b37      	ldr	r3, [pc, #220]	; (718c <grid_port_process_outbound_usb+0x2bc>)
    70b0:	4798      	blx	r3
    70b2:	4604      	mov	r4, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    70b4:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    70b8:	2102      	movs	r1, #2
    70ba:	eb0a 0001 	add.w	r0, sl, r1
    70be:	4b33      	ldr	r3, [pc, #204]	; (718c <grid_port_process_outbound_usb+0x2bc>)
    70c0:	4798      	blx	r3
    70c2:	4605      	mov	r5, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    70c4:	f107 023f 	add.w	r2, r7, #63	; 0x3f
    70c8:	2102      	movs	r1, #2
    70ca:	f10a 0004 	add.w	r0, sl, #4
    70ce:	4b2f      	ldr	r3, [pc, #188]	; (718c <grid_port_process_outbound_usb+0x2bc>)
    70d0:	4798      	blx	r3
    70d2:	4606      	mov	r6, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    70d4:	f10b 081c 	add.w	r8, fp, #28
    70d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    70da:	4498      	add	r8, r3
    70dc:	4b31      	ldr	r3, [pc, #196]	; (71a4 <grid_port_process_outbound_usb+0x2d4>)
    70de:	4798      	blx	r3
    70e0:	9005      	str	r0, [sp, #20]
    70e2:	b2e4      	uxtb	r4, r4
    70e4:	9404      	str	r4, [sp, #16]
    70e6:	b2ed      	uxtb	r5, r5
    70e8:	9503      	str	r5, [sp, #12]
    70ea:	637e      	str	r6, [r7, #52]	; 0x34
    70ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    70f0:	9302      	str	r3, [sp, #8]
    70f2:	69fb      	ldr	r3, [r7, #28]
    70f4:	9301      	str	r3, [sp, #4]
    70f6:	6a3b      	ldr	r3, [r7, #32]
    70f8:	9300      	str	r3, [sp, #0]
    70fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    70fe:	492a      	ldr	r1, [pc, #168]	; (71a8 <grid_port_process_outbound_usb+0x2d8>)
    7100:	4640      	mov	r0, r8
    7102:	4e24      	ldr	r6, [pc, #144]	; (7194 <grid_port_process_outbound_usb+0x2c4>)
    7104:	47b0      	blx	r6
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    7106:	4640      	mov	r0, r8
    7108:	4b23      	ldr	r3, [pc, #140]	; (7198 <grid_port_process_outbound_usb+0x2c8>)
    710a:	4798      	blx	r3
    710c:	4483      	add	fp, r0
    710e:	fa5f fb8b 	uxtb.w	fp, fp
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    7112:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    7116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    7118:	700b      	strb	r3, [r1, #0]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    711a:	2d82      	cmp	r5, #130	; 0x82
    711c:	bf14      	ite	ne
    711e:	2500      	movne	r5, #0
    7120:	2501      	moveq	r5, #1
						key_array[j] = current_key;
    7122:	460b      	mov	r3, r1
    7124:	704d      	strb	r5, [r1, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    7126:	2c80      	cmp	r4, #128	; 0x80
    7128:	bf14      	ite	ne
    712a:	2400      	movne	r4, #0
    712c:	2401      	moveq	r4, #1
    712e:	708c      	strb	r4, [r1, #2]
    7130:	f10a 0a06 	add.w	sl, sl, #6
    7134:	3303      	adds	r3, #3
    7136:	62fb      	str	r3, [r7, #44]	; 0x2c
					for(uint8_t j=0; j<key_array_length; j++){
    7138:	69bb      	ldr	r3, [r7, #24]
    713a:	459a      	cmp	sl, r3
    713c:	d1b3      	bne.n	70a6 <grid_port_process_outbound_usb+0x1d6>
    713e:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
    7142:	f8d7 b008 	ldr.w	fp, [r7, #8]
    7146:	f8d7 8004 	ldr.w	r8, [r7, #4]
					hiddf_keyboard_keys_state_change(key_array, key_array_length);
    714a:	6939      	ldr	r1, [r7, #16]
    714c:	68f8      	ldr	r0, [r7, #12]
    714e:	4b17      	ldr	r3, [pc, #92]	; (71ac <grid_port_process_outbound_usb+0x2dc>)
    7150:	4798      	blx	r3
    7152:	f8d7 d014 	ldr.w	sp, [r7, #20]
				current_start = 0;
    7156:	2500      	movs	r5, #0
    7158:	e701      	b.n	6f5e <grid_port_process_outbound_usb+0x8e>
    715a:	2500      	movs	r5, #0
    715c:	e6ff      	b.n	6f5e <grid_port_process_outbound_usb+0x8e>
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    715e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    7160:	6b38      	ldr	r0, [r7, #48]	; 0x30
    7162:	301c      	adds	r0, #28
    7164:	4b12      	ldr	r3, [pc, #72]	; (71b0 <grid_port_process_outbound_usb+0x2e0>)
    7166:	4798      	blx	r3
}
    7168:	e6bd      	b.n	6ee6 <grid_port_process_outbound_usb+0x16>
    716a:	bf00      	nop
    716c:	00006a99 	.word	0x00006a99
    7170:	00006b0b 	.word	0x00006b0b
    7174:	00006bbd 	.word	0x00006bbd
    7178:	20001e58 	.word	0x20001e58
    717c:	0000683d 	.word	0x0000683d
    7180:	0000685d 	.word	0x0000685d
    7184:	0000687d 	.word	0x0000687d
    7188:	0000689d 	.word	0x0000689d
    718c:	000065c5 	.word	0x000065c5
    7190:	0000b208 	.word	0x0000b208
    7194:	0000a3fd 	.word	0x0000a3fd
    7198:	0000a445 	.word	0x0000a445
    719c:	0000b178 	.word	0x0000b178
    71a0:	2aaaaaab 	.word	0x2aaaaaab
    71a4:	0000663d 	.word	0x0000663d
    71a8:	0000b1c0 	.word	0x0000b1c0
    71ac:	00008b79 	.word	0x00008b79
    71b0:	00008939 	.word	0x00008939
    71b4:	00006b95 	.word	0x00006b95

000071b8 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(GRID_PORT_t* por){
    71b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	// DUMMY HANDLER, DOES NOT DO ANYTHING  !!!!!!!!!!!!!!
	
	uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    71ba:	f500 75d6 	add.w	r5, r0, #428	; 0x1ac
    71be:	4628      	mov	r0, r5
    71c0:	4b0a      	ldr	r3, [pc, #40]	; (71ec <grid_port_process_outbound_ui+0x34>)
    71c2:	4798      	blx	r3
	
	if (!packet_size){
    71c4:	b900      	cbnz	r0, 71c8 <grid_port_process_outbound_ui+0x10>
		grid_buffer_read_acknowledge(&por->tx_buffer);
		
	}
	
	
}
    71c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71c8:	4606      	mov	r6, r0
		grid_buffer_read_init(&por->tx_buffer);
    71ca:	4628      	mov	r0, r5
    71cc:	4b08      	ldr	r3, [pc, #32]	; (71f0 <grid_port_process_outbound_ui+0x38>)
    71ce:	4798      	blx	r3
    71d0:	2400      	movs	r4, #0
			uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    71d2:	4f08      	ldr	r7, [pc, #32]	; (71f4 <grid_port_process_outbound_ui+0x3c>)
    71d4:	4628      	mov	r0, r5
    71d6:	47b8      	blx	r7
		for (uint8_t i = 0; i<packet_size; i++){
    71d8:	3401      	adds	r4, #1
    71da:	b2e4      	uxtb	r4, r4
    71dc:	b2a3      	uxth	r3, r4
    71de:	429e      	cmp	r6, r3
    71e0:	d8f8      	bhi.n	71d4 <grid_port_process_outbound_ui+0x1c>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    71e2:	4628      	mov	r0, r5
    71e4:	4b04      	ldr	r3, [pc, #16]	; (71f8 <grid_port_process_outbound_ui+0x40>)
    71e6:	4798      	blx	r3
}
    71e8:	e7ed      	b.n	71c6 <grid_port_process_outbound_ui+0xe>
    71ea:	bf00      	nop
    71ec:	00006a99 	.word	0x00006a99
    71f0:	00006b0b 	.word	0x00006b0b
    71f4:	00006b95 	.word	0x00006b95
    71f8:	00006bbd 	.word	0x00006bbd

000071fc <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(GRID_PORT_t* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    71fc:	8903      	ldrh	r3, [r0, #8]
    71fe:	b103      	cbz	r3, 7202 <grid_port_process_outbound_usart+0x6>
    7200:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(GRID_PORT_t* por){
    7202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7206:	4605      	mov	r5, r0
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    7208:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    720c:	4630      	mov	r0, r6
    720e:	4b10      	ldr	r3, [pc, #64]	; (7250 <grid_port_process_outbound_usart+0x54>)
    7210:	4798      	blx	r3
		
		if (!packet_size){
    7212:	4607      	mov	r7, r0
    7214:	b908      	cbnz	r0, 721a <grid_port_process_outbound_usart+0x1e>
			
		}
		
	}
	
}
    7216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			grid_buffer_read_init(&por->tx_buffer);
    721a:	4630      	mov	r0, r6
    721c:	4b0d      	ldr	r3, [pc, #52]	; (7254 <grid_port_process_outbound_usart+0x58>)
    721e:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    7220:	812f      	strh	r7, [r5, #8]
    7222:	2400      	movs	r4, #0
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    7224:	f8df 8038 	ldr.w	r8, [pc, #56]	; 7260 <grid_port_process_outbound_usart+0x64>
    7228:	4630      	mov	r0, r6
    722a:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    722c:	192b      	adds	r3, r5, r4
    722e:	7718      	strb	r0, [r3, #28]
			for (uint8_t i = 0; i<packet_size; i++){
    7230:	3401      	adds	r4, #1
    7232:	b2e4      	uxtb	r4, r4
    7234:	b2a3      	uxth	r3, r4
    7236:	429f      	cmp	r7, r3
    7238:	d8f6      	bhi.n	7228 <grid_port_process_outbound_usart+0x2c>
			grid_buffer_read_acknowledge(&por->tx_buffer);
    723a:	4630      	mov	r0, r6
    723c:	4b06      	ldr	r3, [pc, #24]	; (7258 <grid_port_process_outbound_usart+0x5c>)
    723e:	4798      	blx	r3
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    7240:	892a      	ldrh	r2, [r5, #8]
    7242:	f105 011c 	add.w	r1, r5, #28
    7246:	6828      	ldr	r0, [r5, #0]
    7248:	4b04      	ldr	r3, [pc, #16]	; (725c <grid_port_process_outbound_usart+0x60>)
    724a:	4798      	blx	r3
}
    724c:	e7e3      	b.n	7216 <grid_port_process_outbound_usart+0x1a>
    724e:	bf00      	nop
    7250:	00006a99 	.word	0x00006a99
    7254:	00006b0b 	.word	0x00006b0b
    7258:	00006bbd 	.word	0x00006bbd
    725c:	000014e5 	.word	0x000014e5
    7260:	00006b95 	.word	0x00006b95

00007264 <grid_sync_set_mode>:
	grid_sync_mode_register[sync_select - 1]  = sync_mode;
    7264:	4b28      	ldr	r3, [pc, #160]	; (7308 <grid_sync_set_mode+0xa4>)
    7266:	4403      	add	r3, r0
    7268:	f883 145f 	strb.w	r1, [r3, #1119]	; 0x45f
	if (sync_select == GRID_SYNC_1){		
    726c:	2801      	cmp	r0, #1
    726e:	d002      	beq.n	7276 <grid_sync_set_mode+0x12>
	else if (sync_select == GRID_SYNC_2){	
    7270:	2802      	cmp	r0, #2
    7272:	d023      	beq.n	72bc <grid_sync_set_mode+0x58>
    7274:	4770      	bx	lr
		if (sync_mode == GRID_SYNC_MASTER){
    7276:	2901      	cmp	r1, #1
    7278:	d011      	beq.n	729e <grid_sync_set_mode+0x3a>
		else if (sync_mode == GRID_SYNC_SLAVE){
    727a:	2902      	cmp	r1, #2
    727c:	d1fa      	bne.n	7274 <grid_sync_set_mode+0x10>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    727e:	4b23      	ldr	r3, [pc, #140]	; (730c <grid_sync_set_mode+0xa8>)
    7280:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    7284:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7288:	4921      	ldr	r1, [pc, #132]	; (7310 <grid_sync_set_mode+0xac>)
    728a:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    728e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    7292:	3104      	adds	r1, #4
    7294:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7298:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    729c:	4770      	bx	lr
    729e:	4b1b      	ldr	r3, [pc, #108]	; (730c <grid_sync_set_mode+0xa8>)
    72a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    72a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    72a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    72b0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    72b4:	4a17      	ldr	r2, [pc, #92]	; (7314 <grid_sync_set_mode+0xb0>)
    72b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    72ba:	4770      	bx	lr
		if (sync_mode == GRID_SYNC_MASTER){
    72bc:	2901      	cmp	r1, #1
    72be:	d013      	beq.n	72e8 <grid_sync_set_mode+0x84>
		else if (sync_mode == GRID_SYNC_SLAVE){
    72c0:	2902      	cmp	r1, #2
    72c2:	d1d7      	bne.n	7274 <grid_sync_set_mode+0x10>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    72c4:	4b11      	ldr	r3, [pc, #68]	; (730c <grid_sync_set_mode+0xa8>)
    72c6:	2280      	movs	r2, #128	; 0x80
    72c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    72d0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    72d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    72d8:	4a0f      	ldr	r2, [pc, #60]	; (7318 <grid_sync_set_mode+0xb4>)
    72da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    72de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    72e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
    72e6:	e7c5      	b.n	7274 <grid_sync_set_mode+0x10>
    72e8:	4b08      	ldr	r3, [pc, #32]	; (730c <grid_sync_set_mode+0xa8>)
    72ea:	2280      	movs	r2, #128	; 0x80
    72ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    72f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    72f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    72fc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    7300:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    7304:	4770      	bx	lr
    7306:	bf00      	nop
    7308:	20000d00 	.word	0x20000d00
    730c:	41008000 	.word	0x41008000
    7310:	40020000 	.word	0x40020000
    7314:	c0000004 	.word	0xc0000004
    7318:	c0020000 	.word	0xc0020000

0000731c <grid_sync_get_mode>:
	if (grid_sync_mode_register[sync_select - 1] == GRID_SYNC_MASTER){
    731c:	4b06      	ldr	r3, [pc, #24]	; (7338 <grid_sync_get_mode+0x1c>)
    731e:	4418      	add	r0, r3
    7320:	f890 345f 	ldrb.w	r3, [r0, #1119]	; 0x45f
    7324:	2b01      	cmp	r3, #1
    7326:	d004      	beq.n	7332 <grid_sync_get_mode+0x16>
		return GRID_SYNC_INITIAL;	
    7328:	2b02      	cmp	r3, #2
    732a:	bf0c      	ite	eq
    732c:	2002      	moveq	r0, #2
    732e:	2000      	movne	r0, #0
    7330:	4770      	bx	lr
		return GRID_SYNC_MASTER;
    7332:	2001      	movs	r0, #1
}
    7334:	4770      	bx	lr
    7336:	bf00      	nop
    7338:	20000d00 	.word	0x20000d00

0000733c <grid_sync_set_level>:
void grid_sync_set_level(enum grid_sync_selector sync_select, uint8_t sync_level){
    733c:	b510      	push	{r4, lr}
    733e:	460c      	mov	r4, r1
	if (sync_select == GRID_SYNC_1){
    7340:	2801      	cmp	r0, #1
    7342:	d002      	beq.n	734a <grid_sync_set_level+0xe>
	else if (sync_select == GRID_SYNC_2){
    7344:	2802      	cmp	r0, #2
    7346:	d011      	beq.n	736c <grid_sync_set_level+0x30>
    7348:	bd10      	pop	{r4, pc}
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    734a:	4b10      	ldr	r3, [pc, #64]	; (738c <grid_sync_set_level+0x50>)
    734c:	4798      	blx	r3
    734e:	2801      	cmp	r0, #1
    7350:	d1fa      	bne.n	7348 <grid_sync_set_level+0xc>
	if (level) {
    7352:	b12c      	cbz	r4, 7360 <grid_sync_set_level+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7354:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    7358:	4b0d      	ldr	r3, [pc, #52]	; (7390 <grid_sync_set_level+0x54>)
    735a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    735e:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7360:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    7364:	4b0a      	ldr	r3, [pc, #40]	; (7390 <grid_sync_set_level+0x54>)
    7366:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    736a:	bd10      	pop	{r4, pc}
		if (grid_sync_get_mode(sync_select) == GRID_SYNC_MASTER){
    736c:	4b07      	ldr	r3, [pc, #28]	; (738c <grid_sync_set_level+0x50>)
    736e:	4798      	blx	r3
    7370:	2801      	cmp	r0, #1
    7372:	d1e9      	bne.n	7348 <grid_sync_set_level+0xc>
    7374:	b924      	cbnz	r4, 7380 <grid_sync_set_level+0x44>
    7376:	2280      	movs	r2, #128	; 0x80
    7378:	4b05      	ldr	r3, [pc, #20]	; (7390 <grid_sync_set_level+0x54>)
    737a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    737e:	e7e3      	b.n	7348 <grid_sync_set_level+0xc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7380:	2280      	movs	r2, #128	; 0x80
    7382:	4b03      	ldr	r3, [pc, #12]	; (7390 <grid_sync_set_level+0x54>)
    7384:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    7388:	bd10      	pop	{r4, pc}
    738a:	bf00      	nop
    738c:	0000731d 	.word	0x0000731d
    7390:	41008000 	.word	0x41008000

00007394 <grid_sys_port_reset_dma>:
void grid_sys_port_reset_dma(GRID_PORT_t* por){
    7394:	b508      	push	{r3, lr}
    7396:	7983      	ldrb	r3, [r0, #6]
    7398:	011b      	lsls	r3, r3, #4
    739a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    739e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    73a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    73a4:	f022 0202 	bic.w	r2, r2, #2
    73a8:	641a      	str	r2, [r3, #64]	; 0x40
	_dma_enable_transaction(por->dma_channel, false);
    73aa:	2100      	movs	r1, #0
    73ac:	7980      	ldrb	r0, [r0, #6]
    73ae:	4b01      	ldr	r3, [pc, #4]	; (73b4 <grid_sys_port_reset_dma+0x20>)
    73b0:	4798      	blx	r3
    73b2:	bd08      	pop	{r3, pc}
    73b4:	00002cc5 	.word	0x00002cc5

000073b8 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    73b8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    73ba:	4802      	ldr	r0, [pc, #8]	; (73c4 <dma_transfer_complete_w_cb+0xc>)
    73bc:	4b02      	ldr	r3, [pc, #8]	; (73c8 <dma_transfer_complete_w_cb+0x10>)
    73be:	4798      	blx	r3
    73c0:	bd08      	pop	{r3, pc}
    73c2:	bf00      	nop
    73c4:	20002264 	.word	0x20002264
    73c8:	00007395 	.word	0x00007395

000073cc <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    73cc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    73ce:	4802      	ldr	r0, [pc, #8]	; (73d8 <dma_transfer_complete_s_cb+0xc>)
    73d0:	4b02      	ldr	r3, [pc, #8]	; (73dc <dma_transfer_complete_s_cb+0x10>)
    73d2:	4798      	blx	r3
    73d4:	bd08      	pop	{r3, pc}
    73d6:	bf00      	nop
    73d8:	2000244c 	.word	0x2000244c
    73dc:	00007395 	.word	0x00007395

000073e0 <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    73e0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    73e2:	4802      	ldr	r0, [pc, #8]	; (73ec <dma_transfer_complete_e_cb+0xc>)
    73e4:	4b02      	ldr	r3, [pc, #8]	; (73f0 <dma_transfer_complete_e_cb+0x10>)
    73e6:	4798      	blx	r3
    73e8:	bd08      	pop	{r3, pc}
    73ea:	bf00      	nop
    73ec:	20002950 	.word	0x20002950
    73f0:	00007395 	.word	0x00007395

000073f4 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    73f4:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    73f6:	4802      	ldr	r0, [pc, #8]	; (7400 <dma_transfer_complete_n_cb+0xc>)
    73f8:	4b02      	ldr	r3, [pc, #8]	; (7404 <dma_transfer_complete_n_cb+0x10>)
    73fa:	4798      	blx	r3
    73fc:	bd08      	pop	{r3, pc}
    73fe:	bf00      	nop
    7400:	20001a80 	.word	0x20001a80
    7404:	00007395 	.word	0x00007395

00007408 <grid_sys_uart_init>:
void grid_sys_uart_init(){
    7408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    740c:	4b2f      	ldr	r3, [pc, #188]	; (74cc <grid_sys_uart_init+0xc4>)
    740e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    7412:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    7416:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    741a:	f042 0204 	orr.w	r2, r2, #4
    741e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7422:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7426:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    742a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    742e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    7432:	f042 0204 	orr.w	r2, r2, #4
    7436:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    743a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    743e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7442:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    7446:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    744a:	f042 0204 	orr.w	r2, r2, #4
    744e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7452:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7456:	f44f 7100 	mov.w	r1, #512	; 0x200
    745a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    745e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    7462:	f042 0204 	orr.w	r2, r2, #4
    7466:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    746a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    746e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 7508 <grid_sys_uart_init+0x100>
    7472:	4a17      	ldr	r2, [pc, #92]	; (74d0 <grid_sys_uart_init+0xc8>)
    7474:	2101      	movs	r1, #1
    7476:	4640      	mov	r0, r8
    7478:	4c16      	ldr	r4, [pc, #88]	; (74d4 <grid_sys_uart_init+0xcc>)
    747a:	47a0      	blx	r4
 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    747c:	4f16      	ldr	r7, [pc, #88]	; (74d8 <grid_sys_uart_init+0xd0>)
    747e:	4a17      	ldr	r2, [pc, #92]	; (74dc <grid_sys_uart_init+0xd4>)
    7480:	2101      	movs	r1, #1
    7482:	4638      	mov	r0, r7
    7484:	47a0      	blx	r4
 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    7486:	4e16      	ldr	r6, [pc, #88]	; (74e0 <grid_sys_uart_init+0xd8>)
    7488:	4a16      	ldr	r2, [pc, #88]	; (74e4 <grid_sys_uart_init+0xdc>)
    748a:	2101      	movs	r1, #1
    748c:	4630      	mov	r0, r6
    748e:	47a0      	blx	r4
 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    7490:	4d15      	ldr	r5, [pc, #84]	; (74e8 <grid_sys_uart_init+0xe0>)
    7492:	4a16      	ldr	r2, [pc, #88]	; (74ec <grid_sys_uart_init+0xe4>)
    7494:	2101      	movs	r1, #1
    7496:	4628      	mov	r0, r5
    7498:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    749a:	4915      	ldr	r1, [pc, #84]	; (74f0 <grid_sys_uart_init+0xe8>)
    749c:	4640      	mov	r0, r8
    749e:	4c15      	ldr	r4, [pc, #84]	; (74f4 <grid_sys_uart_init+0xec>)
    74a0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    74a2:	4915      	ldr	r1, [pc, #84]	; (74f8 <grid_sys_uart_init+0xf0>)
    74a4:	4638      	mov	r0, r7
    74a6:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    74a8:	4914      	ldr	r1, [pc, #80]	; (74fc <grid_sys_uart_init+0xf4>)
    74aa:	4630      	mov	r0, r6
    74ac:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    74ae:	4914      	ldr	r1, [pc, #80]	; (7500 <grid_sys_uart_init+0xf8>)
    74b0:	4628      	mov	r0, r5
    74b2:	47a0      	blx	r4
	usart_async_enable(&USART_NORTH);
    74b4:	4640      	mov	r0, r8
    74b6:	4c13      	ldr	r4, [pc, #76]	; (7504 <grid_sys_uart_init+0xfc>)
    74b8:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    74ba:	4638      	mov	r0, r7
    74bc:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    74be:	4630      	mov	r0, r6
    74c0:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    74c2:	4628      	mov	r0, r5
    74c4:	47a0      	blx	r4
    74c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74ca:	bf00      	nop
    74cc:	41008000 	.word	0x41008000
    74d0:	000067dd 	.word	0x000067dd
    74d4:	00001e6d 	.word	0x00001e6d
    74d8:	20001454 	.word	0x20001454
    74dc:	000067c9 	.word	0x000067c9
    74e0:	200015a8 	.word	0x200015a8
    74e4:	000067b5 	.word	0x000067b5
    74e8:	20001558 	.word	0x20001558
    74ec:	000067a1 	.word	0x000067a1
    74f0:	2000204c 	.word	0x2000204c
    74f4:	00001e45 	.word	0x00001e45
    74f8:	20002448 	.word	0x20002448
    74fc:	20002630 	.word	0x20002630
    7500:	20002c14 	.word	0x20002c14
    7504:	00001e19 	.word	0x00001e19
    7508:	200014a4 	.word	0x200014a4

0000750c <grid_rx_dma_init_one>:
void grid_rx_dma_init_one(GRID_PORT_t* por, uint32_t buffer_length, void* transfer_done_cb() ){
    750c:	b5f0      	push	{r4, r5, r6, r7, lr}
    750e:	b083      	sub	sp, #12
    7510:	460f      	mov	r7, r1
    7512:	4616      	mov	r6, r2
	uint8_t dma_rx_channel = por->dma_channel;	
    7514:	7984      	ldrb	r4, [r0, #6]
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    7516:	4605      	mov	r5, r0
    7518:	f855 3be4 	ldr.w	r3, [r5], #228
    751c:	6a19      	ldr	r1, [r3, #32]
    751e:	3128      	adds	r1, #40	; 0x28
    7520:	4620      	mov	r0, r4
    7522:	4b0d      	ldr	r3, [pc, #52]	; (7558 <grid_rx_dma_init_one+0x4c>)
    7524:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    7526:	4629      	mov	r1, r5
    7528:	4620      	mov	r0, r4
    752a:	4b0c      	ldr	r3, [pc, #48]	; (755c <grid_rx_dma_init_one+0x50>)
    752c:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    752e:	4639      	mov	r1, r7
    7530:	4620      	mov	r0, r4
    7532:	4b0b      	ldr	r3, [pc, #44]	; (7560 <grid_rx_dma_init_one+0x54>)
    7534:	4798      	blx	r3
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    7536:	4621      	mov	r1, r4
    7538:	a801      	add	r0, sp, #4
    753a:	4b0a      	ldr	r3, [pc, #40]	; (7564 <grid_rx_dma_init_one+0x58>)
    753c:	4798      	blx	r3
	resource_rx->dma_cb.transfer_done = transfer_done_cb;	
    753e:	9b01      	ldr	r3, [sp, #4]
    7540:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    7542:	2201      	movs	r2, #1
    7544:	2100      	movs	r1, #0
    7546:	4620      	mov	r0, r4
    7548:	4b07      	ldr	r3, [pc, #28]	; (7568 <grid_rx_dma_init_one+0x5c>)
    754a:	4798      	blx	r3
	_dma_enable_transaction(dma_rx_channel, false);
    754c:	2100      	movs	r1, #0
    754e:	4620      	mov	r0, r4
    7550:	4b06      	ldr	r3, [pc, #24]	; (756c <grid_rx_dma_init_one+0x60>)
    7552:	4798      	blx	r3
}
    7554:	b003      	add	sp, #12
    7556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7558:	00002c41 	.word	0x00002c41
    755c:	00002c31 	.word	0x00002c31
    7560:	00002c6d 	.word	0x00002c6d
    7564:	00002d05 	.word	0x00002d05
    7568:	00002bdd 	.word	0x00002bdd
    756c:	00002cc5 	.word	0x00002cc5

00007570 <grid_rx_dma_init>:
void grid_rx_dma_init(){
    7570:	b510      	push	{r4, lr}
	grid_rx_dma_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    7572:	4a09      	ldr	r2, [pc, #36]	; (7598 <grid_rx_dma_init+0x28>)
    7574:	21c8      	movs	r1, #200	; 0xc8
    7576:	4809      	ldr	r0, [pc, #36]	; (759c <grid_rx_dma_init+0x2c>)
    7578:	4c09      	ldr	r4, [pc, #36]	; (75a0 <grid_rx_dma_init+0x30>)
    757a:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    757c:	4a09      	ldr	r2, [pc, #36]	; (75a4 <grid_rx_dma_init+0x34>)
    757e:	21c8      	movs	r1, #200	; 0xc8
    7580:	4809      	ldr	r0, [pc, #36]	; (75a8 <grid_rx_dma_init+0x38>)
    7582:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    7584:	4a09      	ldr	r2, [pc, #36]	; (75ac <grid_rx_dma_init+0x3c>)
    7586:	21c8      	movs	r1, #200	; 0xc8
    7588:	4809      	ldr	r0, [pc, #36]	; (75b0 <grid_rx_dma_init+0x40>)
    758a:	47a0      	blx	r4
	grid_rx_dma_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    758c:	4a09      	ldr	r2, [pc, #36]	; (75b4 <grid_rx_dma_init+0x44>)
    758e:	21c8      	movs	r1, #200	; 0xc8
    7590:	4809      	ldr	r0, [pc, #36]	; (75b8 <grid_rx_dma_init+0x48>)
    7592:	47a0      	blx	r4
    7594:	bd10      	pop	{r4, pc}
    7596:	bf00      	nop
    7598:	000073f5 	.word	0x000073f5
    759c:	20001a80 	.word	0x20001a80
    75a0:	0000750d 	.word	0x0000750d
    75a4:	000073e1 	.word	0x000073e1
    75a8:	20002950 	.word	0x20002950
    75ac:	000073cd 	.word	0x000073cd
    75b0:	2000244c 	.word	0x2000244c
    75b4:	000073b9 	.word	0x000073b9
    75b8:	20002264 	.word	0x20002264

000075bc <grid_port_process_ui>:


void grid_port_process_ui(GRID_PORT_t* por){
    75bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75c0:	b0cb      	sub	sp, #300	; 0x12c
	uint8_t dy = GRID_SYS_DEFAULT_POSITION;	
	uint8_t age = 0;
			
	uint8_t packetvalid = 0;
			
	sprintf(&message[length],
    75c2:	2317      	movs	r3, #23
    75c4:	9305      	str	r3, [sp, #20]
    75c6:	2300      	movs	r3, #0
    75c8:	9304      	str	r3, [sp, #16]
    75ca:	227f      	movs	r2, #127	; 0x7f
    75cc:	9203      	str	r2, [sp, #12]
    75ce:	9202      	str	r2, [sp, #8]
	uint8_t id = grid_sys_state.next_broadcast_message_id;
    75d0:	4aab      	ldr	r2, [pc, #684]	; (7880 <grid_port_process_ui+0x2c4>)
	sprintf(&message[length],
    75d2:	f892 220d 	ldrb.w	r2, [r2, #525]	; 0x20d
    75d6:	9201      	str	r2, [sp, #4]
    75d8:	9300      	str	r3, [sp, #0]
    75da:	230f      	movs	r3, #15
    75dc:	2201      	movs	r2, #1
    75de:	49a9      	ldr	r1, [pc, #676]	; (7884 <grid_port_process_ui+0x2c8>)
    75e0:	a80a      	add	r0, sp, #40	; 0x28
    75e2:	4ca9      	ldr	r4, [pc, #676]	; (7888 <grid_port_process_ui+0x2cc>)
    75e4:	47a0      	blx	r4
	GRID_MSG_BROADCAST,
	len, id, dx, dy, age,
	GRID_MSG_END_OF_BLOCK
	);
			
	length += strlen(&message[length]);
    75e6:	a80a      	add	r0, sp, #40	; 0x28
    75e8:	4ba8      	ldr	r3, [pc, #672]	; (788c <grid_port_process_ui+0x2d0>)
    75ea:	4798      	blx	r3
    75ec:	4607      	mov	r7, r0
	CRITICAL_SECTION_ENTER();
    75ee:	a807      	add	r0, sp, #28
    75f0:	4ba7      	ldr	r3, [pc, #668]	; (7890 <grid_port_process_ui+0x2d4>)
    75f2:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    75f4:	4ba7      	ldr	r3, [pc, #668]	; (7894 <grid_port_process_ui+0x2d8>)
    75f6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    75fa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    75fe:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7602:	4054      	eors	r4, r2
    7604:	400c      	ands	r4, r1
    7606:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    7608:	a807      	add	r0, sp, #28
    760a:	4ba3      	ldr	r3, [pc, #652]	; (7898 <grid_port_process_ui+0x2dc>)
    760c:	4798      	blx	r3
	
	if (grid_module_mapmode_state != gpio_get_pin_level(MAP_MODE)){
    760e:	4ba3      	ldr	r3, [pc, #652]	; (789c <grid_port_process_ui+0x2e0>)
    7610:	f893 6304 	ldrb.w	r6, [r3, #772]	; 0x304
    7614:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    7618:	42b4      	cmp	r4, r6
    761a:	d046      	beq.n	76aa <grid_port_process_ui+0xee>
	
		if (grid_module_mapmode_state == 1){		
    761c:	2e01      	cmp	r6, #1
    761e:	d02c      	beq.n	767a <grid_port_process_ui+0xbe>
			packetvalid++;
						
		}	
		else{
						
			grid_module_mapmode_state = 1;		
    7620:	2601      	movs	r6, #1
    7622:	4b9e      	ldr	r3, [pc, #632]	; (789c <grid_port_process_ui+0x2e0>)
    7624:	f883 6304 	strb.w	r6, [r3, #772]	; 0x304
			
			sprintf(&message[length], "%c%02x%02x%02x%02x%c",			
    7628:	ab0a      	add	r3, sp, #40	; 0x28
    762a:	19dc      	adds	r4, r3, r7
    762c:	2303      	movs	r3, #3
    762e:	9303      	str	r3, [sp, #12]
    7630:	2339      	movs	r3, #57	; 0x39
    7632:	9302      	str	r3, [sp, #8]
    7634:	2383      	movs	r3, #131	; 0x83
    7636:	9301      	str	r3, [sp, #4]
    7638:	2381      	movs	r3, #129	; 0x81
    763a:	9300      	str	r3, [sp, #0]
    763c:	4633      	mov	r3, r6
    763e:	2202      	movs	r2, #2
    7640:	4997      	ldr	r1, [pc, #604]	; (78a0 <grid_port_process_ui+0x2e4>)
    7642:	4620      	mov	r0, r4
    7644:	4d90      	ldr	r5, [pc, #576]	; (7888 <grid_port_process_ui+0x2cc>)
    7646:	47a8      	blx	r5
				GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYUP,
				GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_NOT_MODIFIER,
				HID_CAPS_LOCK,
				GRID_MSG_END_OF_TEXT
			);
			length += strlen(&message[length]);
    7648:	4620      	mov	r0, r4
    764a:	4b90      	ldr	r3, [pc, #576]	; (788c <grid_port_process_ui+0x2d0>)
    764c:	4798      	blx	r3
    764e:	4407      	add	r7, r0
	
	// ENCODER ROTATION READINGS FOR THE UI		
	for (uint8_t i = 0; i<16; i++)
	{
				
		if (grid_ui_encoder_array[i].rotation_changed == 1){
    7650:	4b94      	ldr	r3, [pc, #592]	; (78a4 <grid_port_process_ui+0x2e8>)
    7652:	78db      	ldrb	r3, [r3, #3]
    7654:	2b01      	cmp	r3, #1
    7656:	d02a      	beq.n	76ae <grid_port_process_ui+0xf2>
    7658:	4a92      	ldr	r2, [pc, #584]	; (78a4 <grid_port_process_ui+0x2e8>)
    765a:	2301      	movs	r3, #1
    765c:	b2dc      	uxtb	r4, r3
    765e:	4618      	mov	r0, r3
    7660:	7a91      	ldrb	r1, [r2, #10]
    7662:	2901      	cmp	r1, #1
    7664:	d025      	beq.n	76b2 <grid_port_process_ui+0xf6>
    7666:	3301      	adds	r3, #1
    7668:	3207      	adds	r2, #7
	for (uint8_t i = 0; i<16; i++)
    766a:	2b10      	cmp	r3, #16
    766c:	d1f6      	bne.n	765c <grid_port_process_ui+0xa0>
    766e:	4d8d      	ldr	r5, [pc, #564]	; (78a4 <grid_port_process_ui+0x2e8>)
    7670:	2400      	movs	r4, #0
	{
		
		if (grid_ui_encoder_array[i].button_changed == 1){
						
			
			sprintf(&message[length], "%c%02x%02x%02x%02x%02x%c",
    7672:	f8df b214 	ldr.w	fp, [pc, #532]	; 7888 <grid_port_process_ui+0x2cc>
    7676:	46b9      	mov	r9, r7
    7678:	e04a      	b.n	7710 <grid_port_process_ui+0x154>
			grid_module_mapmode_state = 0;
    767a:	2200      	movs	r2, #0
    767c:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
			sprintf(&message[length], "%c%02x%02x%02x%02x%c",			
    7680:	ab0a      	add	r3, sp, #40	; 0x28
    7682:	19dc      	adds	r4, r3, r7
    7684:	2303      	movs	r3, #3
    7686:	9303      	str	r3, [sp, #12]
    7688:	2339      	movs	r3, #57	; 0x39
    768a:	9302      	str	r3, [sp, #8]
    768c:	2383      	movs	r3, #131	; 0x83
    768e:	9301      	str	r3, [sp, #4]
    7690:	2380      	movs	r3, #128	; 0x80
    7692:	9300      	str	r3, [sp, #0]
    7694:	2301      	movs	r3, #1
    7696:	2202      	movs	r2, #2
    7698:	4981      	ldr	r1, [pc, #516]	; (78a0 <grid_port_process_ui+0x2e4>)
    769a:	4620      	mov	r0, r4
    769c:	4d7a      	ldr	r5, [pc, #488]	; (7888 <grid_port_process_ui+0x2cc>)
    769e:	47a8      	blx	r5
			length += strlen(&message[length]);
    76a0:	4620      	mov	r0, r4
    76a2:	4b7a      	ldr	r3, [pc, #488]	; (788c <grid_port_process_ui+0x2d0>)
    76a4:	4798      	blx	r3
    76a6:	4407      	add	r7, r0
    76a8:	e7d2      	b.n	7650 <grid_port_process_ui+0x94>
	uint8_t packetvalid = 0;
    76aa:	2600      	movs	r6, #0
    76ac:	e7d0      	b.n	7650 <grid_port_process_ui+0x94>
		if (grid_ui_encoder_array[i].rotation_changed == 1){
    76ae:	2000      	movs	r0, #0
	for (uint8_t i = 0; i<16; i++)
    76b0:	4604      	mov	r4, r0
			packetvalid++;			
    76b2:	3601      	adds	r6, #1
    76b4:	b2f6      	uxtb	r6, r6
			sprintf(&message[length], "%c%02x%02x%02x%02x%02x%c",
    76b6:	ab0a      	add	r3, sp, #40	; 0x28
    76b8:	eb03 0907 	add.w	r9, r3, r7
    76bc:	2303      	movs	r3, #3
    76be:	9304      	str	r3, [sp, #16]
			grid_ui_encoder_array[i].rotation_value,
    76c0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    76c4:	4d77      	ldr	r5, [pc, #476]	; (78a4 <grid_port_process_ui+0x2e8>)
    76c6:	441d      	add	r5, r3
			sprintf(&message[length], "%c%02x%02x%02x%02x%02x%c",
    76c8:	78ab      	ldrb	r3, [r5, #2]
    76ca:	9303      	str	r3, [sp, #12]
    76cc:	9002      	str	r0, [sp, #8]
    76ce:	23c8      	movs	r3, #200	; 0xc8
    76d0:	9301      	str	r3, [sp, #4]
    76d2:	f04f 0800 	mov.w	r8, #0
    76d6:	f8cd 8000 	str.w	r8, [sp]
    76da:	4643      	mov	r3, r8
    76dc:	2202      	movs	r2, #2
    76de:	4972      	ldr	r1, [pc, #456]	; (78a8 <grid_port_process_ui+0x2ec>)
    76e0:	4648      	mov	r0, r9
    76e2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7888 <grid_port_process_ui+0x2cc>
    76e6:	47d0      	blx	sl
			length += strlen(&message[length]);
    76e8:	4648      	mov	r0, r9
    76ea:	4b68      	ldr	r3, [pc, #416]	; (788c <grid_port_process_ui+0x2d0>)
    76ec:	4798      	blx	r3
    76ee:	4407      	add	r7, r0
			grid_led_set_phase(&grid_led_state, i, 0, grid_ui_encoder_array[i].rotation_value*4); // 0...255
    76f0:	78ab      	ldrb	r3, [r5, #2]
    76f2:	009b      	lsls	r3, r3, #2
    76f4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    76f8:	4642      	mov	r2, r8
    76fa:	4621      	mov	r1, r4
    76fc:	486b      	ldr	r0, [pc, #428]	; (78ac <grid_port_process_ui+0x2f0>)
    76fe:	4c6c      	ldr	r4, [pc, #432]	; (78b0 <grid_port_process_ui+0x2f4>)
    7700:	47a0      	blx	r4
			grid_ui_encoder_array[i].rotation_changed = 0; 
    7702:	f885 8003 	strb.w	r8, [r5, #3]
			break;
    7706:	e7b2      	b.n	766e <grid_port_process_ui+0xb2>
    7708:	3401      	adds	r4, #1
    770a:	3507      	adds	r5, #7
	for (uint8_t i = 0; i<16; i++)
    770c:	2c10      	cmp	r4, #16
    770e:	d028      	beq.n	7762 <grid_port_process_ui+0x1a6>
    7710:	fa5f f884 	uxtb.w	r8, r4
		if (grid_ui_encoder_array[i].button_changed == 1){
    7714:	786b      	ldrb	r3, [r5, #1]
    7716:	2b01      	cmp	r3, #1
    7718:	d1f6      	bne.n	7708 <grid_port_process_ui+0x14c>
			sprintf(&message[length], "%c%02x%02x%02x%02x%02x%c",
    771a:	ab0a      	add	r3, sp, #40	; 0x28
    771c:	eb03 0a09 	add.w	sl, r3, r9
    7720:	2303      	movs	r3, #3
    7722:	9304      	str	r3, [sp, #16]
    7724:	782b      	ldrb	r3, [r5, #0]
    7726:	9303      	str	r3, [sp, #12]
    7728:	9402      	str	r4, [sp, #8]
    772a:	23b0      	movs	r3, #176	; 0xb0
    772c:	9301      	str	r3, [sp, #4]
    772e:	2700      	movs	r7, #0
    7730:	9700      	str	r7, [sp, #0]
    7732:	463b      	mov	r3, r7
    7734:	2202      	movs	r2, #2
    7736:	495c      	ldr	r1, [pc, #368]	; (78a8 <grid_port_process_ui+0x2ec>)
    7738:	4650      	mov	r0, sl
    773a:	47d8      	blx	fp
			i,
			grid_ui_encoder_array[i].button_value,
			GRID_MSG_END_OF_TEXT
			);
			
			length += strlen(&message[length]);
    773c:	4650      	mov	r0, sl
    773e:	4b53      	ldr	r3, [pc, #332]	; (788c <grid_port_process_ui+0x2d0>)
    7740:	4798      	blx	r3
    7742:	4481      	add	r9, r0
			
			packetvalid++;
    7744:	3601      	adds	r6, #1
    7746:	b2f6      	uxtb	r6, r6
			
			// UPDATE LEDS (SHOULD USE UI_TX but whatever)

			grid_led_set_phase(&grid_led_state, i, 0, (!grid_ui_encoder_array[i].button_value)*255); // 0...255
    7748:	782b      	ldrb	r3, [r5, #0]
    774a:	42bb      	cmp	r3, r7
    774c:	bf0c      	ite	eq
    774e:	23ff      	moveq	r3, #255	; 0xff
    7750:	463b      	movne	r3, r7
    7752:	463a      	mov	r2, r7
    7754:	4641      	mov	r1, r8
    7756:	4855      	ldr	r0, [pc, #340]	; (78ac <grid_port_process_ui+0x2f0>)
    7758:	f8df 8154 	ldr.w	r8, [pc, #340]	; 78b0 <grid_port_process_ui+0x2f4>
    775c:	47c0      	blx	r8
			
			grid_ui_encoder_array[i].button_changed = 0;
    775e:	706f      	strb	r7, [r5, #1]
    7760:	e7d2      	b.n	7708 <grid_port_process_ui+0x14c>
    7762:	464f      	mov	r7, r9
    7764:	2400      	movs	r4, #0
	// PORENTIOMETER/BUTTON READINGS FOR THE UI	
	for (uint8_t i = 0; i<16; i++)
	{
				
				
		if (grid_ain_get_changed(i)){
    7766:	f8df a178 	ldr.w	sl, [pc, #376]	; 78e0 <grid_port_process_ui+0x324>
    776a:	e00d      	b.n	7788 <grid_port_process_ui+0x1cc>
					
			if (grid_sys_get_hwcfg()==64 && i>11){
				grid_led_set_phase(&grid_led_state, i-4, 0, average*2/128); // 0...255
			}
			else{
				grid_led_set_phase(&grid_led_state, i, 0, average*2/128); // 0...255
    776c:	ea5f 0348 	movs.w	r3, r8, lsl #1
    7770:	bf48      	it	mi
    7772:	337f      	addmi	r3, #127	; 0x7f
    7774:	f3c3 13c7 	ubfx	r3, r3, #7, #8
    7778:	2200      	movs	r2, #0
    777a:	4629      	mov	r1, r5
    777c:	484b      	ldr	r0, [pc, #300]	; (78ac <grid_port_process_ui+0x2f0>)
    777e:	4d4c      	ldr	r5, [pc, #304]	; (78b0 <grid_port_process_ui+0x2f4>)
    7780:	47a8      	blx	r5
    7782:	3401      	adds	r4, #1
	for (uint8_t i = 0; i<16; i++)
    7784:	2c10      	cmp	r4, #16
    7786:	d034      	beq.n	77f2 <grid_port_process_ui+0x236>
    7788:	b2e5      	uxtb	r5, r4
		if (grid_ain_get_changed(i)){
    778a:	4628      	mov	r0, r5
    778c:	47d0      	blx	sl
    778e:	2800      	cmp	r0, #0
    7790:	d0f7      	beq.n	7782 <grid_port_process_ui+0x1c6>
			packetvalid++;
    7792:	3601      	adds	r6, #1
    7794:	b2f6      	uxtb	r6, r6
			uint16_t average = grid_ain_get_average(i);
    7796:	4628      	mov	r0, r5
    7798:	4b46      	ldr	r3, [pc, #280]	; (78b4 <grid_port_process_ui+0x2f8>)
    779a:	4798      	blx	r3
    779c:	4680      	mov	r8, r0
			sprintf(&message[length], "%c%02x%02x%02x%02x%02x%c",
    779e:	ab0a      	add	r3, sp, #40	; 0x28
    77a0:	eb03 0907 	add.w	r9, r3, r7
    77a4:	2303      	movs	r3, #3
    77a6:	9304      	str	r3, [sp, #16]
    77a8:	f3c0 138f 	ubfx	r3, r0, #6, #16
    77ac:	9303      	str	r3, [sp, #12]
    77ae:	9402      	str	r4, [sp, #8]
    77b0:	23b0      	movs	r3, #176	; 0xb0
    77b2:	9301      	str	r3, [sp, #4]
    77b4:	2300      	movs	r3, #0
    77b6:	9300      	str	r3, [sp, #0]
    77b8:	2202      	movs	r2, #2
    77ba:	493b      	ldr	r1, [pc, #236]	; (78a8 <grid_port_process_ui+0x2ec>)
    77bc:	4648      	mov	r0, r9
    77be:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 7888 <grid_port_process_ui+0x2cc>
    77c2:	47d8      	blx	fp
			length += strlen(&message[length]);
    77c4:	4648      	mov	r0, r9
    77c6:	4b31      	ldr	r3, [pc, #196]	; (788c <grid_port_process_ui+0x2d0>)
    77c8:	4798      	blx	r3
    77ca:	4407      	add	r7, r0
			if (grid_sys_get_hwcfg()==64 && i>11){
    77cc:	4b3a      	ldr	r3, [pc, #232]	; (78b8 <grid_port_process_ui+0x2fc>)
    77ce:	4798      	blx	r3
    77d0:	2840      	cmp	r0, #64	; 0x40
    77d2:	d1cb      	bne.n	776c <grid_port_process_ui+0x1b0>
    77d4:	2d0b      	cmp	r5, #11
    77d6:	d9c9      	bls.n	776c <grid_port_process_ui+0x1b0>
				grid_led_set_phase(&grid_led_state, i-4, 0, average*2/128); // 0...255
    77d8:	ea5f 0348 	movs.w	r3, r8, lsl #1
    77dc:	bf48      	it	mi
    77de:	337f      	addmi	r3, #127	; 0x7f
    77e0:	1f29      	subs	r1, r5, #4
    77e2:	f3c3 13c7 	ubfx	r3, r3, #7, #8
    77e6:	2200      	movs	r2, #0
    77e8:	b2c9      	uxtb	r1, r1
    77ea:	4830      	ldr	r0, [pc, #192]	; (78ac <grid_port_process_ui+0x2f0>)
    77ec:	4d30      	ldr	r5, [pc, #192]	; (78b0 <grid_port_process_ui+0x2f4>)
    77ee:	47a8      	blx	r5
    77f0:	e7c7      	b.n	7782 <grid_port_process_ui+0x1c6>
					
		}
				
	}
			
	if (packetvalid){
    77f2:	b916      	cbnz	r6, 77fa <grid_port_process_ui+0x23e>
				
				
	}
			
	
}
    77f4:	b04b      	add	sp, #300	; 0x12c
    77f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_sys_state.next_broadcast_message_id++;
    77fa:	4a21      	ldr	r2, [pc, #132]	; (7880 <grid_port_process_ui+0x2c4>)
    77fc:	f892 320d 	ldrb.w	r3, [r2, #525]	; 0x20d
    7800:	3301      	adds	r3, #1
    7802:	f882 320d 	strb.w	r3, [r2, #525]	; 0x20d
		sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    7806:	ac0a      	add	r4, sp, #40	; 0x28
    7808:	19e5      	adds	r5, r4, r7
    780a:	2204      	movs	r2, #4
    780c:	492b      	ldr	r1, [pc, #172]	; (78bc <grid_port_process_ui+0x300>)
    780e:	4628      	mov	r0, r5
    7810:	4e1d      	ldr	r6, [pc, #116]	; (7888 <grid_port_process_ui+0x2cc>)
    7812:	47b0      	blx	r6
		length += strlen(&message[length]);
    7814:	4628      	mov	r0, r5
    7816:	4d1d      	ldr	r5, [pc, #116]	; (788c <grid_port_process_ui+0x2d0>)
    7818:	47a8      	blx	r5
    781a:	4407      	add	r7, r0
		sprintf(length_string, "%02x", length);
    781c:	463a      	mov	r2, r7
    781e:	4928      	ldr	r1, [pc, #160]	; (78c0 <grid_port_process_ui+0x304>)
    7820:	a808      	add	r0, sp, #32
    7822:	47b0      	blx	r6
		message[2] = length_string[0];
    7824:	f89d 3020 	ldrb.w	r3, [sp, #32]
    7828:	70a3      	strb	r3, [r4, #2]
		message[3] = length_string[1];
    782a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    782e:	70e3      	strb	r3, [r4, #3]
		sprintf(&message[length], "00\n");
    7830:	4b24      	ldr	r3, [pc, #144]	; (78c4 <grid_port_process_ui+0x308>)
    7832:	6818      	ldr	r0, [r3, #0]
    7834:	51e0      	str	r0, [r4, r7]
		length += strlen(&message[length]);
    7836:	19e0      	adds	r0, r4, r7
    7838:	47a8      	blx	r5
    783a:	4407      	add	r7, r0
		grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    783c:	4639      	mov	r1, r7
    783e:	4620      	mov	r0, r4
    7840:	4b21      	ldr	r3, [pc, #132]	; (78c8 <grid_port_process_ui+0x30c>)
    7842:	4798      	blx	r3
    7844:	4602      	mov	r2, r0
    7846:	4639      	mov	r1, r7
    7848:	4620      	mov	r0, r4
    784a:	4b20      	ldr	r3, [pc, #128]	; (78cc <grid_port_process_ui+0x310>)
    784c:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    784e:	b2b9      	uxth	r1, r7
    7850:	481f      	ldr	r0, [pc, #124]	; (78d0 <grid_port_process_ui+0x314>)
    7852:	4b20      	ldr	r3, [pc, #128]	; (78d4 <grid_port_process_ui+0x318>)
    7854:	4798      	blx	r3
    7856:	2800      	cmp	r0, #0
    7858:	d0cc      	beq.n	77f4 <grid_port_process_ui+0x238>
			for(uint16_t i = 0; i<length; i++){
    785a:	b167      	cbz	r7, 7876 <grid_port_process_ui+0x2ba>
    785c:	2400      	movs	r4, #0
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    785e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    7862:	4e1b      	ldr	r6, [pc, #108]	; (78d0 <grid_port_process_ui+0x314>)
    7864:	4d1c      	ldr	r5, [pc, #112]	; (78d8 <grid_port_process_ui+0x31c>)
    7866:	f818 1004 	ldrb.w	r1, [r8, r4]
    786a:	4630      	mov	r0, r6
    786c:	47a8      	blx	r5
			for(uint16_t i = 0; i<length; i++){
    786e:	3401      	adds	r4, #1
    7870:	b2a4      	uxth	r4, r4
    7872:	42a7      	cmp	r7, r4
    7874:	d8f7      	bhi.n	7866 <grid_port_process_ui+0x2aa>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    7876:	4816      	ldr	r0, [pc, #88]	; (78d0 <grid_port_process_ui+0x314>)
    7878:	4b18      	ldr	r3, [pc, #96]	; (78dc <grid_port_process_ui+0x320>)
    787a:	4798      	blx	r3
}
    787c:	e7ba      	b.n	77f4 <grid_port_process_ui+0x238>
    787e:	bf00      	nop
    7880:	20002050 	.word	0x20002050
    7884:	0000b224 	.word	0x0000b224
    7888:	0000a3fd 	.word	0x0000a3fd
    788c:	0000a445 	.word	0x0000a445
    7890:	000012d9 	.word	0x000012d9
    7894:	41008000 	.word	0x41008000
    7898:	000012e7 	.word	0x000012e7
    789c:	20000040 	.word	0x20000040
    78a0:	0000b240 	.word	0x0000b240
    78a4:	200028e0 	.word	0x200028e0
    78a8:	0000b258 	.word	0x0000b258
    78ac:	20002bfc 	.word	0x20002bfc
    78b0:	00005f2d 	.word	0x00005f2d
    78b4:	00006539 	.word	0x00006539
    78b8:	0000663d 	.word	0x0000663d
    78bc:	0000b23c 	.word	0x0000b23c
    78c0:	0000b15c 	.word	0x0000b15c
    78c4:	0000b274 	.word	0x0000b274
    78c8:	000067f1 	.word	0x000067f1
    78cc:	0000680d 	.word	0x0000680d
    78d0:	20001e38 	.word	0x20001e38
    78d4:	000069a5 	.word	0x000069a5
    78d8:	000069d5 	.word	0x000069d5
    78dc:	000069f1 	.word	0x000069f1
    78e0:	00006525 	.word	0x00006525

000078e4 <grid_module_adc_init>:





void grid_module_adc_init(void){
    78e4:	b510      	push	{r4, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    78e6:	4b06      	ldr	r3, [pc, #24]	; (7900 <grid_module_adc_init+0x1c>)
    78e8:	2200      	movs	r2, #0
    78ea:	4611      	mov	r1, r2
    78ec:	4805      	ldr	r0, [pc, #20]	; (7904 <grid_module_adc_init+0x20>)
    78ee:	4c06      	ldr	r4, [pc, #24]	; (7908 <grid_module_adc_init+0x24>)
    78f0:	47a0      	blx	r4
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_1);
    78f2:	4b06      	ldr	r3, [pc, #24]	; (790c <grid_module_adc_init+0x28>)
    78f4:	2200      	movs	r2, #0
    78f6:	4611      	mov	r1, r2
    78f8:	4805      	ldr	r0, [pc, #20]	; (7910 <grid_module_adc_init+0x2c>)
    78fa:	47a0      	blx	r4
    78fc:	bd10      	pop	{r4, pc}
    78fe:	bf00      	nop
    7900:	00005d45 	.word	0x00005d45
    7904:	20001428 	.word	0x20001428
    7908:	00001151 	.word	0x00001151
    790c:	000063d9 	.word	0x000063d9
    7910:	200015f8 	.word	0x200015f8

00007914 <grid_module_adc_start>:

}

void grid_module_adc_start(void){
    7914:	b570      	push	{r4, r5, r6, lr}
	
	adc_async_enable_channel(&ADC_0, 0);
    7916:	4c07      	ldr	r4, [pc, #28]	; (7934 <grid_module_adc_start+0x20>)
    7918:	2100      	movs	r1, #0
    791a:	4620      	mov	r0, r4
    791c:	4e06      	ldr	r6, [pc, #24]	; (7938 <grid_module_adc_start+0x24>)
    791e:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_0);
    7920:	4620      	mov	r0, r4
    7922:	4c06      	ldr	r4, [pc, #24]	; (793c <grid_module_adc_start+0x28>)
    7924:	47a0      	blx	r4
	
	adc_async_enable_channel(&ADC_1, 0);
    7926:	4d06      	ldr	r5, [pc, #24]	; (7940 <grid_module_adc_start+0x2c>)
    7928:	2100      	movs	r1, #0
    792a:	4628      	mov	r0, r5
    792c:	47b0      	blx	r6
	adc_async_start_conversion(&ADC_1);
    792e:	4628      	mov	r0, r5
    7930:	47a0      	blx	r4
    7932:	bd70      	pop	{r4, r5, r6, pc}
    7934:	20001428 	.word	0x20001428
    7938:	00001111 	.word	0x00001111
    793c:	000012b1 	.word	0x000012b1
    7940:	200015f8 	.word	0x200015f8

00007944 <grid_module_init_animation>:
	
}



void grid_module_init_animation(){
    7944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7948:	b082      	sub	sp, #8
	
	
	for (uint8_t i = 0; i<255; i++){
    794a:	2500      	movs	r5, #0
		uint8_t color_b   = i;
			
			
		for (uint8_t i=0; i<16; i++){
			//grid_led_set_color(i, 0, 255, 0);
			grid_led_set_color(&grid_led_state, i, color_r, color_g, color_b);
    794c:	4e0d      	ldr	r6, [pc, #52]	; (7984 <grid_module_init_animation+0x40>)
    794e:	4f0e      	ldr	r7, [pc, #56]	; (7988 <grid_module_init_animation+0x44>)
				
		}
			
			
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    7950:	f8df 803c 	ldr.w	r8, [pc, #60]	; 7990 <grid_module_init_animation+0x4c>
    7954:	e008      	b.n	7968 <grid_module_init_animation+0x24>
    7956:	4630      	mov	r0, r6
    7958:	47c0      	blx	r8
			
		delay_ms(1);
    795a:	2001      	movs	r0, #1
    795c:	4b0b      	ldr	r3, [pc, #44]	; (798c <grid_module_init_animation+0x48>)
    795e:	4798      	blx	r3
	for (uint8_t i = 0; i<255; i++){
    7960:	3501      	adds	r5, #1
    7962:	b2ed      	uxtb	r5, r5
    7964:	2dff      	cmp	r5, #255	; 0xff
    7966:	d00a      	beq.n	797e <grid_module_init_animation+0x3a>
void grid_module_init_animation(){
    7968:	2400      	movs	r4, #0
			grid_led_set_color(&grid_led_state, i, color_r, color_g, color_b);
    796a:	9500      	str	r5, [sp, #0]
    796c:	462b      	mov	r3, r5
    796e:	462a      	mov	r2, r5
    7970:	4621      	mov	r1, r4
    7972:	4630      	mov	r0, r6
    7974:	47b8      	blx	r7
    7976:	3401      	adds	r4, #1
		for (uint8_t i=0; i<16; i++){
    7978:	2c10      	cmp	r4, #16
    797a:	d1f6      	bne.n	796a <grid_module_init_animation+0x26>
    797c:	e7eb      	b.n	7956 <grid_module_init_animation+0x12>
			
	}
	
}
    797e:	b002      	add	sp, #8
    7980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7984:	20002bfc 	.word	0x20002bfc
    7988:	00005d9d 	.word	0x00005d9d
    798c:	00001359 	.word	0x00001359
    7990:	00006215 	.word	0x00006215

00007994 <grid_port_receive_task>:
void grid_port_receive_task(GRID_PORT_t* por){
    7994:	b538      	push	{r3, r4, r5, lr}
	if	(por->rx_double_buffer_status == 1){
    7996:	8ac3      	ldrh	r3, [r0, #22]
    7998:	2b01      	cmp	r3, #1
    799a:	d045      	beq.n	7a28 <grid_port_receive_task+0x94>
    799c:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 20000){
    799e:	8a83      	ldrh	r3, [r0, #20]
    79a0:	f644 6220 	movw	r2, #20000	; 0x4e20
    79a4:	4293      	cmp	r3, r2
    79a6:	d91d      	bls.n	79e4 <grid_port_receive_task+0x50>
		if (por->partner_status == 1){
    79a8:	f890 31e3 	ldrb.w	r3, [r0, #483]	; 0x1e3
    79ac:	2b01      	cmp	r3, #1
    79ae:	d005      	beq.n	79bc <grid_port_receive_task+0x28>
			por->rx_double_buffer_seek_start_index = 0;
    79b0:	2300      	movs	r3, #0
    79b2:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    79b4:	8343      	strh	r3, [r0, #26]
			grid_sys_port_reset_dma(por);
    79b6:	4b1d      	ldr	r3, [pc, #116]	; (7a2c <grid_port_receive_task+0x98>)
    79b8:	4798      	blx	r3
    79ba:	e015      	b.n	79e8 <grid_port_receive_task+0x54>
			por->rx_double_buffer_seek_start_index = 0;
    79bc:	2300      	movs	r3, #0
    79be:	8303      	strh	r3, [r0, #24]
			por->rx_double_buffer_read_start_index = 0;
    79c0:	8343      	strh	r3, [r0, #26]
			por->partner_status = 0;
    79c2:	f880 31e3 	strb.w	r3, [r0, #483]	; 0x1e3
			por->rx_double_buffer_timeout =0;
    79c6:	8283      	strh	r3, [r0, #20]
			grid_sys_port_reset_dma(por);
    79c8:	4b18      	ldr	r3, [pc, #96]	; (7a2c <grid_port_receive_task+0x98>)
    79ca:	4798      	blx	r3
	mod->alert_color_changed = 1;
    79cc:	4b18      	ldr	r3, [pc, #96]	; (7a30 <grid_port_receive_task+0x9c>)
    79ce:	2201      	movs	r2, #1
    79d0:	721a      	strb	r2, [r3, #8]
	mod->alert_color_red = red;
    79d2:	22ff      	movs	r2, #255	; 0xff
    79d4:	701a      	strb	r2, [r3, #0]
	mod->alert_color_green = green;
    79d6:	705a      	strb	r2, [r3, #1]
	mod->alert_color_blue = blue;
    79d8:	709a      	strb	r2, [r3, #2]
	mod->alert_state = duration;
    79da:	22c8      	movs	r2, #200	; 0xc8
    79dc:	809a      	strh	r2, [r3, #4]
	mod->alert_style = style;
    79de:	2202      	movs	r2, #2
    79e0:	719a      	strb	r2, [r3, #6]
    79e2:	e001      	b.n	79e8 <grid_port_receive_task+0x54>
		por->rx_double_buffer_timeout++;
    79e4:	3301      	adds	r3, #1
    79e6:	8283      	strh	r3, [r0, #20]
void grid_port_receive_task(GRID_PORT_t* por){
    79e8:	210a      	movs	r1, #10
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    79ea:	4d12      	ldr	r5, [pc, #72]	; (7a34 <grid_port_receive_task+0xa0>)
    79ec:	20c8      	movs	r0, #200	; 0xc8
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != '\n' && por->rx_double_buffer[por->rx_double_buffer_seek_start_index] != 0)
    79ee:	8b23      	ldrh	r3, [r4, #24]
    79f0:	18e2      	adds	r2, r4, r3
    79f2:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
    79f6:	2a0a      	cmp	r2, #10
    79f8:	d012      	beq.n	7a20 <grid_port_receive_task+0x8c>
    79fa:	b1aa      	cbz	r2, 7a28 <grid_port_receive_task+0x94>
			por->rx_double_buffer_seek_start_index++;			
    79fc:	3301      	adds	r3, #1
			por->rx_double_buffer_seek_start_index%=GRID_DOUBLE_BUFFER_RX_SIZE;
    79fe:	b29b      	uxth	r3, r3
    7a00:	fba5 e203 	umull	lr, r2, r5, r3
    7a04:	0992      	lsrs	r2, r2, #6
    7a06:	fb00 3312 	mls	r3, r0, r2, r3
    7a0a:	8323      	strh	r3, [r4, #24]
    7a0c:	3901      	subs	r1, #1
    7a0e:	b289      	uxth	r1, r1
	for(uint16_t i = 0; i<10; i++){
    7a10:	2900      	cmp	r1, #0
    7a12:	d1ec      	bne.n	79ee <grid_port_receive_task+0x5a>
	if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == '\n'){
    7a14:	b29b      	uxth	r3, r3
    7a16:	4423      	add	r3, r4
    7a18:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    7a1c:	2b0a      	cmp	r3, #10
    7a1e:	d103      	bne.n	7a28 <grid_port_receive_task+0x94>
		por->rx_double_buffer_timeout = 0;
    7a20:	2300      	movs	r3, #0
    7a22:	82a3      	strh	r3, [r4, #20]
		por->rx_double_buffer_status = 1;
    7a24:	2301      	movs	r3, #1
    7a26:	82e3      	strh	r3, [r4, #22]
    7a28:	bd38      	pop	{r3, r4, r5, pc}
    7a2a:	bf00      	nop
    7a2c:	00007395 	.word	0x00007395
    7a30:	20002050 	.word	0x20002050
    7a34:	51eb851f 	.word	0x51eb851f

00007a38 <RTC_Scheduler_rx_task_cb>:
{
    7a38:	b510      	push	{r4, lr}
	grid_port_receive_task(&GRID_PORT_N);
    7a3a:	4805      	ldr	r0, [pc, #20]	; (7a50 <RTC_Scheduler_rx_task_cb+0x18>)
    7a3c:	4c05      	ldr	r4, [pc, #20]	; (7a54 <RTC_Scheduler_rx_task_cb+0x1c>)
    7a3e:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_E);
    7a40:	4805      	ldr	r0, [pc, #20]	; (7a58 <RTC_Scheduler_rx_task_cb+0x20>)
    7a42:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_S);
    7a44:	4805      	ldr	r0, [pc, #20]	; (7a5c <RTC_Scheduler_rx_task_cb+0x24>)
    7a46:	47a0      	blx	r4
	grid_port_receive_task(&GRID_PORT_W);
    7a48:	4805      	ldr	r0, [pc, #20]	; (7a60 <RTC_Scheduler_rx_task_cb+0x28>)
    7a4a:	47a0      	blx	r4
    7a4c:	bd10      	pop	{r4, pc}
    7a4e:	bf00      	nop
    7a50:	20001a80 	.word	0x20001a80
    7a54:	00007995 	.word	0x00007995
    7a58:	20002950 	.word	0x20002950
    7a5c:	2000244c 	.word	0x2000244c
    7a60:	20002264 	.word	0x20002264

00007a64 <grid_port_receive_decode>:
void grid_port_receive_decode(GRID_PORT_t* por, uint8_t startcommand, uint8_t length){
    7a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a68:	b08b      	sub	sp, #44	; 0x2c
    7a6a:	af00      	add	r7, sp, #0
    7a6c:	4605      	mov	r5, r0
    7a6e:	4616      	mov	r6, r2
	response[0] = GRID_MSG_START_OF_HEADING;
    7a70:	2301      	movs	r3, #1
    7a72:	773b      	strb	r3, [r7, #28]
	response[1] = GRID_MSG_DIRECT;
    7a74:	230e      	movs	r3, #14
    7a76:	777b      	strb	r3, [r7, #29]
	response[2] = GRID_MSG_NACKNOWLEDGE;
    7a78:	2315      	movs	r3, #21
    7a7a:	77bb      	strb	r3, [r7, #30]
	response[3] = GRID_MSG_END_OF_TRANSMISSION;
    7a7c:	2304      	movs	r3, #4
    7a7e:	77fb      	strb	r3, [r7, #31]
	response[4] = '0'; //checksum
    7a80:	2330      	movs	r3, #48	; 0x30
    7a82:	f887 3020 	strb.w	r3, [r7, #32]
	response[5] = '0'; //checksum
    7a86:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	response[6] = '\n';
    7a8a:	230a      	movs	r3, #10
    7a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	response[7] = 0;
    7a90:	2300      	movs	r3, #0
    7a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	response[8] = 0;
    7a96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	response[9] = 0;
    7a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t error_flag = 0;
    7a9e:	76fb      	strb	r3, [r7, #27]
	uint8_t message[length];
    7aa0:	1dd3      	adds	r3, r2, #7
    7aa2:	f023 0307 	bic.w	r3, r3, #7
    7aa6:	ebad 0d03 	sub.w	sp, sp, r3
    7aaa:	46e8      	mov	r8, sp
	for (uint8_t i = 0; i<length; i++){
    7aac:	2a00      	cmp	r2, #0
    7aae:	f000 81e8 	beq.w	7e82 <grid_port_receive_decode+0x41e>
		message[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    7ab2:	8b42      	ldrh	r2, [r0, #26]
    7ab4:	f10d 39ff 	add.w	r9, sp, #4294967295
    7ab8:	1e71      	subs	r1, r6, #1
    7aba:	fa58 f181 	uxtab	r1, r8, r1
    7abe:	464c      	mov	r4, r9
    7ac0:	3201      	adds	r2, #1
    7ac2:	eba2 0208 	sub.w	r2, r2, r8
    7ac6:	f8df e31c 	ldr.w	lr, [pc, #796]	; 7de4 <grid_port_receive_decode+0x380>
    7aca:	20c8      	movs	r0, #200	; 0xc8
    7acc:	eb02 0c04 	add.w	ip, r2, r4
    7ad0:	fb8e 3a0c 	smull	r3, sl, lr, ip
    7ad4:	ea4f 73ec 	mov.w	r3, ip, asr #31
    7ad8:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
    7adc:	fb00 c313 	mls	r3, r0, r3, ip
    7ae0:	442b      	add	r3, r5
    7ae2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
    7ae6:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (uint8_t i = 0; i<length; i++){
    7aea:	428c      	cmp	r4, r1
    7aec:	d1ee      	bne.n	7acc <grid_port_receive_decode+0x68>
	if (length>5){
    7aee:	2e05      	cmp	r6, #5
    7af0:	d82f      	bhi.n	7b52 <grid_port_receive_decode+0xee>
	if (message[1] == GRID_MSG_BROADCAST){				
    7af2:	f898 3001 	ldrb.w	r3, [r8, #1]
    7af6:	2b0f      	cmp	r3, #15
    7af8:	f000 81c8 	beq.w	7e8c <grid_port_receive_decode+0x428>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    7afc:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
    7b00:	2200      	movs	r2, #0
    7b02:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 7de4 <grid_port_receive_decode+0x380>
    7b06:	24c8      	movs	r4, #200	; 0xc8
    7b08:	4610      	mov	r0, r2
    7b0a:	eb0c 0102 	add.w	r1, ip, r2
    7b0e:	fb8e 3801 	smull	r3, r8, lr, r1
    7b12:	17cb      	asrs	r3, r1, #31
    7b14:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
    7b18:	fb04 1313 	mls	r3, r4, r3, r1
    7b1c:	442b      	add	r3, r5
    7b1e:	f883 00e4 	strb.w	r0, [r3, #228]	; 0xe4
    7b22:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<length; i++){
    7b24:	b2d3      	uxtb	r3, r2
    7b26:	429e      	cmp	r6, r3
    7b28:	d8ef      	bhi.n	7b0a <grid_port_receive_decode+0xa6>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    7b2a:	8b6b      	ldrh	r3, [r5, #26]
    7b2c:	4433      	add	r3, r6
    7b2e:	4aad      	ldr	r2, [pc, #692]	; (7de4 <grid_port_receive_decode+0x380>)
    7b30:	fb82 1203 	smull	r1, r2, r2, r3
    7b34:	17de      	asrs	r6, r3, #31
    7b36:	ebc6 16a2 	rsb	r6, r6, r2, asr #6
    7b3a:	22c8      	movs	r2, #200	; 0xc8
    7b3c:	fb02 3616 	mls	r6, r2, r6, r3
    7b40:	b2b6      	uxth	r6, r6
    7b42:	836e      	strh	r6, [r5, #26]
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    7b44:	832e      	strh	r6, [r5, #24]
	por->rx_double_buffer_status = 0;
    7b46:	2300      	movs	r3, #0
    7b48:	82eb      	strh	r3, [r5, #22]
}
    7b4a:	372c      	adds	r7, #44	; 0x2c
    7b4c:	46bd      	mov	sp, r7
    7b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		checksum_received = grid_sys_read_hex_string_value(&message[length-3], 2, &error_flag);
    7b52:	1ef0      	subs	r0, r6, #3
    7b54:	f107 021b 	add.w	r2, r7, #27
    7b58:	2102      	movs	r1, #2
    7b5a:	4440      	add	r0, r8
    7b5c:	4ba2      	ldr	r3, [pc, #648]	; (7de8 <grid_port_receive_decode+0x384>)
    7b5e:	4798      	blx	r3
    7b60:	4682      	mov	sl, r0
		checksum_calculated = grid_msg_get_checksum(message, length);
    7b62:	4631      	mov	r1, r6
    7b64:	4640      	mov	r0, r8
    7b66:	4ba1      	ldr	r3, [pc, #644]	; (7dec <grid_port_receive_decode+0x388>)
    7b68:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    7b6a:	fa5f fa8a 	uxtb.w	sl, sl
    7b6e:	4582      	cmp	sl, r0
    7b70:	d00b      	beq.n	7b8a <grid_port_receive_decode+0x126>
	mod->alert_color_changed = 1;
    7b72:	4b9f      	ldr	r3, [pc, #636]	; (7df0 <grid_port_receive_decode+0x38c>)
    7b74:	2201      	movs	r2, #1
    7b76:	721a      	strb	r2, [r3, #8]
	mod->alert_color_red = red;
    7b78:	21ff      	movs	r1, #255	; 0xff
    7b7a:	7019      	strb	r1, [r3, #0]
	mod->alert_color_green = green;
    7b7c:	2000      	movs	r0, #0
    7b7e:	7058      	strb	r0, [r3, #1]
	mod->alert_color_blue = blue;
    7b80:	7099      	strb	r1, [r3, #2]
	mod->alert_state = duration;
    7b82:	21d0      	movs	r1, #208	; 0xd0
    7b84:	8099      	strh	r1, [r3, #4]
	mod->alert_style = style;
    7b86:	719a      	strb	r2, [r3, #6]
    7b88:	e7b3      	b.n	7af2 <grid_port_receive_decode+0x8e>
    7b8a:	7efb      	ldrb	r3, [r7, #27]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d1f0      	bne.n	7b72 <grid_port_receive_decode+0x10e>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    7b90:	f898 3001 	ldrb.w	r3, [r8, #1]
    7b94:	2b0f      	cmp	r3, #15
    7b96:	d00f      	beq.n	7bb8 <grid_port_receive_decode+0x154>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    7b98:	2b0e      	cmp	r3, #14
    7b9a:	f000 80a8 	beq.w	7cee <grid_port_receive_decode+0x28a>
	mod->alert_color_changed = 1;
    7b9e:	4b94      	ldr	r3, [pc, #592]	; (7df0 <grid_port_receive_decode+0x38c>)
    7ba0:	2201      	movs	r2, #1
    7ba2:	721a      	strb	r2, [r3, #8]
	mod->alert_color_red = red;
    7ba4:	22ff      	movs	r2, #255	; 0xff
    7ba6:	701a      	strb	r2, [r3, #0]
	mod->alert_color_green = green;
    7ba8:	2200      	movs	r2, #0
    7baa:	705a      	strb	r2, [r3, #1]
	mod->alert_color_blue = blue;
    7bac:	709a      	strb	r2, [r3, #2]
	mod->alert_state = duration;
    7bae:	22c8      	movs	r2, #200	; 0xc8
    7bb0:	809a      	strh	r2, [r3, #4]
	mod->alert_style = style;
    7bb2:	2202      	movs	r2, #2
    7bb4:	719a      	strb	r2, [r3, #6]
    7bb6:	e7a1      	b.n	7afc <grid_port_receive_decode+0x98>
				uint8_t received_id  = grid_msg_get_id(message);;			
    7bb8:	4640      	mov	r0, r8
    7bba:	4b8e      	ldr	r3, [pc, #568]	; (7df4 <grid_port_receive_decode+0x390>)
    7bbc:	4798      	blx	r3
    7bbe:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_age(message);
    7bc0:	4640      	mov	r0, r8
    7bc2:	4b8d      	ldr	r3, [pc, #564]	; (7df8 <grid_port_receive_decode+0x394>)
    7bc4:	4798      	blx	r3
    7bc6:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    7bc8:	4640      	mov	r0, r8
    7bca:	4b8c      	ldr	r3, [pc, #560]	; (7dfc <grid_port_receive_decode+0x398>)
    7bcc:	4798      	blx	r3
    7bce:	4683      	mov	fp, r0
    7bd0:	f1a0 0a7f 	sub.w	sl, r0, #127	; 0x7f
    7bd4:	fa4f fa8a 	sxtb.w	sl, sl
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    7bd8:	4640      	mov	r0, r8
    7bda:	4b89      	ldr	r3, [pc, #548]	; (7e00 <grid_port_receive_decode+0x39c>)
    7bdc:	4798      	blx	r3
    7bde:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    7be2:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    7be4:	f895 21e0 	ldrb.w	r2, [r5, #480]	; 0x1e0
    7be8:	b182      	cbz	r2, 7c0c <grid_port_receive_decode+0x1a8>
				else if(por->partner_fi == 1){ // 90 deg
    7bea:	2a01      	cmp	r2, #1
    7bec:	d009      	beq.n	7c02 <grid_port_receive_decode+0x19e>
				else if(por->partner_fi == 2){ // 180 deg
    7bee:	2a02      	cmp	r2, #2
    7bf0:	d064      	beq.n	7cbc <grid_port_receive_decode+0x258>
				else if(por->partner_fi == 3){ // 270 deg
    7bf2:	2a03      	cmp	r2, #3
    7bf4:	d16a      	bne.n	7ccc <grid_port_receive_decode+0x268>
					rotated_dy  -= received_dx;
    7bf6:	f1cb 0b7f 	rsb	fp, fp, #127	; 0x7f
					rotated_dx  += received_dy;
    7bfa:	469a      	mov	sl, r3
					rotated_dy  -= received_dx;
    7bfc:	fa4f f38b 	sxtb.w	r3, fp
    7c00:	e004      	b.n	7c0c <grid_port_receive_decode+0x1a8>
					rotated_dx  -= received_dy;
    7c02:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    7c06:	4653      	mov	r3, sl
					rotated_dx  -= received_dy;
    7c08:	fa4f fa80 	sxtb.w	sl, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    7c0c:	f895 b1e1 	ldrb.w	fp, [r5, #481]	; 0x1e1
    7c10:	f10b 0b7f 	add.w	fp, fp, #127	; 0x7f
    7c14:	44da      	add	sl, fp
    7c16:	fa5f fb8a 	uxtb.w	fp, sl
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    7c1a:	f895 a1e2 	ldrb.w	sl, [r5, #482]	; 0x1e2
    7c1e:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    7c22:	4453      	add	r3, sl
    7c24:	fa5f fa83 	uxtb.w	sl, r3
				uint8_t updated_age = received_age + 1;
    7c28:	683b      	ldr	r3, [r7, #0]
    7c2a:	3301      	adds	r3, #1
    7c2c:	b2db      	uxtb	r3, r3
    7c2e:	603b      	str	r3, [r7, #0]
				grid_msg_set_id(message, updated_id);
    7c30:	6879      	ldr	r1, [r7, #4]
    7c32:	4640      	mov	r0, r8
    7c34:	4b73      	ldr	r3, [pc, #460]	; (7e04 <grid_port_receive_decode+0x3a0>)
    7c36:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    7c38:	4659      	mov	r1, fp
    7c3a:	4640      	mov	r0, r8
    7c3c:	4b72      	ldr	r3, [pc, #456]	; (7e08 <grid_port_receive_decode+0x3a4>)
    7c3e:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    7c40:	4651      	mov	r1, sl
    7c42:	4640      	mov	r0, r8
    7c44:	4b71      	ldr	r3, [pc, #452]	; (7e0c <grid_port_receive_decode+0x3a8>)
    7c46:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);		
    7c48:	6839      	ldr	r1, [r7, #0]
    7c4a:	4640      	mov	r0, r8
    7c4c:	4b70      	ldr	r3, [pc, #448]	; (7e10 <grid_port_receive_decode+0x3ac>)
    7c4e:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    7c50:	687a      	ldr	r2, [r7, #4]
    7c52:	eb0b 2b02 	add.w	fp, fp, r2, lsl #8
    7c56:	eb0a 2a0b 	add.w	sl, sl, fp, lsl #8
    7c5a:	683b      	ldr	r3, [r7, #0]
    7c5c:	eb03 230a 	add.w	r3, r3, sl, lsl #8
    7c60:	607b      	str	r3, [r7, #4]
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    7c62:	4619      	mov	r1, r3
    7c64:	4862      	ldr	r0, [pc, #392]	; (7df0 <grid_port_receive_decode+0x38c>)
    7c66:	4b6b      	ldr	r3, [pc, #428]	; (7e14 <grid_port_receive_decode+0x3b0>)
    7c68:	4798      	blx	r3
    7c6a:	2800      	cmp	r0, #0
    7c6c:	d131      	bne.n	7cd2 <grid_port_receive_decode+0x26e>
					grid_msg_set_checksum(message, length, grid_msg_get_checksum(message, length));
    7c6e:	4631      	mov	r1, r6
    7c70:	4640      	mov	r0, r8
    7c72:	4b5e      	ldr	r3, [pc, #376]	; (7dec <grid_port_receive_decode+0x388>)
    7c74:	4798      	blx	r3
    7c76:	4602      	mov	r2, r0
    7c78:	4631      	mov	r1, r6
    7c7a:	4640      	mov	r0, r8
    7c7c:	4b66      	ldr	r3, [pc, #408]	; (7e18 <grid_port_receive_decode+0x3b4>)
    7c7e:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    7c80:	f505 7ae2 	add.w	sl, r5, #452	; 0x1c4
    7c84:	4631      	mov	r1, r6
    7c86:	4650      	mov	r0, sl
    7c88:	4b64      	ldr	r3, [pc, #400]	; (7e1c <grid_port_receive_decode+0x3b8>)
    7c8a:	4798      	blx	r3
    7c8c:	2800      	cmp	r0, #0
    7c8e:	f43f af30 	beq.w	7af2 <grid_port_receive_decode+0x8e>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    7c92:	f8df b198 	ldr.w	fp, [pc, #408]	; 7e2c <grid_port_receive_decode+0x3c8>
    7c96:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    7c9a:	4650      	mov	r0, sl
    7c9c:	47d8      	blx	fp
						for (uint8_t i=0; i<length; i++){
    7c9e:	45a1      	cmp	r9, r4
    7ca0:	d1f9      	bne.n	7c96 <grid_port_receive_decode+0x232>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    7ca2:	4650      	mov	r0, sl
    7ca4:	4b5e      	ldr	r3, [pc, #376]	; (7e20 <grid_port_receive_decode+0x3bc>)
    7ca6:	4798      	blx	r3
						grid_port_process_inbound(por);
    7ca8:	4628      	mov	r0, r5
    7caa:	4b5e      	ldr	r3, [pc, #376]	; (7e24 <grid_port_receive_decode+0x3c0>)
    7cac:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    7cae:	6879      	ldr	r1, [r7, #4]
    7cb0:	484f      	ldr	r0, [pc, #316]	; (7df0 <grid_port_receive_decode+0x38c>)
    7cb2:	4b5d      	ldr	r3, [pc, #372]	; (7e28 <grid_port_receive_decode+0x3c4>)
    7cb4:	4798      	blx	r3
						response[2] = GRID_MSG_ACKNOWLEDGE;
    7cb6:	2306      	movs	r3, #6
    7cb8:	77bb      	strb	r3, [r7, #30]
    7cba:	e71a      	b.n	7af2 <grid_port_receive_decode+0x8e>
					rotated_dx  -= received_dx;
    7cbc:	f1cb 0a7f 	rsb	sl, fp, #127	; 0x7f
    7cc0:	fa4f fa8a 	sxtb.w	sl, sl
					rotated_dy  -= received_dy;
    7cc4:	f1c0 037f 	rsb	r3, r0, #127	; 0x7f
    7cc8:	b25b      	sxtb	r3, r3
    7cca:	e79f      	b.n	7c0c <grid_port_receive_decode+0x1a8>
				int8_t rotated_dy = 0;
    7ccc:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    7cce:	469a      	mov	sl, r3
    7cd0:	e79c      	b.n	7c0c <grid_port_receive_decode+0x1a8>
					response[2] = GRID_MSG_ACKNOWLEDGE;							
    7cd2:	2306      	movs	r3, #6
    7cd4:	77bb      	strb	r3, [r7, #30]
	mod->alert_color_changed = 1;
    7cd6:	4b46      	ldr	r3, [pc, #280]	; (7df0 <grid_port_receive_decode+0x38c>)
    7cd8:	2201      	movs	r2, #1
    7cda:	721a      	strb	r2, [r3, #8]
	mod->alert_color_red = red;
    7cdc:	2232      	movs	r2, #50	; 0x32
    7cde:	701a      	strb	r2, [r3, #0]
	mod->alert_color_green = green;
    7ce0:	705a      	strb	r2, [r3, #1]
	mod->alert_color_blue = blue;
    7ce2:	709a      	strb	r2, [r3, #2]
	mod->alert_state = duration;
    7ce4:	22c8      	movs	r2, #200	; 0xc8
    7ce6:	809a      	strh	r2, [r3, #4]
	mod->alert_style = style;
    7ce8:	2202      	movs	r2, #2
    7cea:	719a      	strb	r2, [r3, #6]
    7cec:	e701      	b.n	7af2 <grid_port_receive_decode+0x8e>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    7cee:	f898 3002 	ldrb.w	r3, [r8, #2]
    7cf2:	2b06      	cmp	r3, #6
    7cf4:	d02b      	beq.n	7d4e <grid_port_receive_decode+0x2ea>
				else if (message[2] == GRID_MSG_BELL){
    7cf6:	2b07      	cmp	r3, #7
    7cf8:	f47f af00 	bne.w	7afc <grid_port_receive_decode+0x98>
					if (por->partner_status == 0){
    7cfc:	f895 31e3 	ldrb.w	r3, [r5, #483]	; 0x1e3
    7d00:	bb93      	cbnz	r3, 7d68 <grid_port_receive_decode+0x304>
						por->partner_fi = (message[3] - por->direction + 6)%4;
    7d02:	f898 3003 	ldrb.w	r3, [r8, #3]
    7d06:	796a      	ldrb	r2, [r5, #5]
    7d08:	1a9b      	subs	r3, r3, r2
    7d0a:	3306      	adds	r3, #6
    7d0c:	425a      	negs	r2, r3
    7d0e:	f003 0303 	and.w	r3, r3, #3
    7d12:	f002 0203 	and.w	r2, r2, #3
    7d16:	bf58      	it	pl
    7d18:	4253      	negpl	r3, r2
    7d1a:	f885 31e0 	strb.w	r3, [r5, #480]	; 0x1e0
						por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    7d1e:	f1a6 000c 	sub.w	r0, r6, #12
    7d22:	2200      	movs	r2, #0
    7d24:	2108      	movs	r1, #8
    7d26:	4440      	add	r0, r8
    7d28:	4b2f      	ldr	r3, [pc, #188]	; (7de8 <grid_port_receive_decode+0x384>)
    7d2a:	4798      	blx	r3
    7d2c:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
						por->partner_status = 1;
    7d30:	2201      	movs	r2, #1
    7d32:	f885 21e3 	strb.w	r2, [r5, #483]	; 0x1e3
	mod->alert_color_changed = 1;
    7d36:	4b2e      	ldr	r3, [pc, #184]	; (7df0 <grid_port_receive_decode+0x38c>)
    7d38:	721a      	strb	r2, [r3, #8]
	mod->alert_color_red = red;
    7d3a:	2200      	movs	r2, #0
    7d3c:	701a      	strb	r2, [r3, #0]
	mod->alert_color_green = green;
    7d3e:	21ff      	movs	r1, #255	; 0xff
    7d40:	7059      	strb	r1, [r3, #1]
	mod->alert_color_blue = blue;
    7d42:	709a      	strb	r2, [r3, #2]
	mod->alert_state = duration;
    7d44:	22c8      	movs	r2, #200	; 0xc8
    7d46:	809a      	strh	r2, [r3, #4]
	mod->alert_style = style;
    7d48:	2202      	movs	r2, #2
    7d4a:	719a      	strb	r2, [r3, #6]
    7d4c:	e6d1      	b.n	7af2 <grid_port_receive_decode+0x8e>
	mod->alert_color_changed = 1;
    7d4e:	4b28      	ldr	r3, [pc, #160]	; (7df0 <grid_port_receive_decode+0x38c>)
    7d50:	2201      	movs	r2, #1
    7d52:	721a      	strb	r2, [r3, #8]
	mod->alert_color_red = red;
    7d54:	22ff      	movs	r2, #255	; 0xff
    7d56:	701a      	strb	r2, [r3, #0]
	mod->alert_color_green = green;
    7d58:	2100      	movs	r1, #0
    7d5a:	7059      	strb	r1, [r3, #1]
	mod->alert_color_blue = blue;
    7d5c:	709a      	strb	r2, [r3, #2]
	mod->alert_state = duration;
    7d5e:	22c8      	movs	r2, #200	; 0xc8
    7d60:	809a      	strh	r2, [r3, #4]
	mod->alert_style = style;
    7d62:	2202      	movs	r2, #2
    7d64:	719a      	strb	r2, [r3, #6]
    7d66:	e6c9      	b.n	7afc <grid_port_receive_decode+0x98>
						validator &= (por->partner_fi == ((message[3] - por->direction + 6)%4));
    7d68:	f898 3003 	ldrb.w	r3, [r8, #3]
    7d6c:	796a      	ldrb	r2, [r5, #5]
    7d6e:	1a9b      	subs	r3, r3, r2
    7d70:	3306      	adds	r3, #6
    7d72:	425a      	negs	r2, r3
    7d74:	f003 0303 	and.w	r3, r3, #3
    7d78:	f002 0203 	and.w	r2, r2, #3
    7d7c:	bf58      	it	pl
    7d7e:	4253      	negpl	r3, r2
    7d80:	f895 41e0 	ldrb.w	r4, [r5, #480]	; 0x1e0
    7d84:	42a3      	cmp	r3, r4
    7d86:	bf14      	ite	ne
    7d88:	2400      	movne	r4, #0
    7d8a:	2401      	moveq	r4, #1
						volatile uint32_t debug = grid_sys_read_hex_string_value(&message[length-12], 8, error_flag);
    7d8c:	f1a6 000c 	sub.w	r0, r6, #12
    7d90:	2200      	movs	r2, #0
    7d92:	2108      	movs	r1, #8
    7d94:	4440      	add	r0, r8
    7d96:	4b14      	ldr	r3, [pc, #80]	; (7de8 <grid_port_receive_decode+0x384>)
    7d98:	4798      	blx	r3
    7d9a:	60f8      	str	r0, [r7, #12]
						volatile uint32_t debug2 = por->partner_hwcfg;
    7d9c:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
    7da0:	613b      	str	r3, [r7, #16]
						validator &= (por->partner_hwcfg == debug);									
    7da2:	68fa      	ldr	r2, [r7, #12]
						if (validator == 0){
    7da4:	4293      	cmp	r3, r2
    7da6:	d100      	bne.n	7daa <grid_port_receive_decode+0x346>
    7da8:	b974      	cbnz	r4, 7dc8 <grid_port_receive_decode+0x364>
							por->partner_status = 0;	
    7daa:	2300      	movs	r3, #0
    7dac:	f885 31e3 	strb.w	r3, [r5, #483]	; 0x1e3
	mod->alert_color_changed = 1;
    7db0:	4b0f      	ldr	r3, [pc, #60]	; (7df0 <grid_port_receive_decode+0x38c>)
    7db2:	2201      	movs	r2, #1
    7db4:	721a      	strb	r2, [r3, #8]
	mod->alert_color_red = red;
    7db6:	22ff      	movs	r2, #255	; 0xff
    7db8:	701a      	strb	r2, [r3, #0]
	mod->alert_color_green = green;
    7dba:	705a      	strb	r2, [r3, #1]
	mod->alert_color_blue = blue;
    7dbc:	709a      	strb	r2, [r3, #2]
	mod->alert_state = duration;
    7dbe:	22c8      	movs	r2, #200	; 0xc8
    7dc0:	809a      	strh	r2, [r3, #4]
	mod->alert_style = style;
    7dc2:	2202      	movs	r2, #2
    7dc4:	719a      	strb	r2, [r3, #6]
    7dc6:	e694      	b.n	7af2 <grid_port_receive_decode+0x8e>
	mod->alert_color_changed = 1;
    7dc8:	4b09      	ldr	r3, [pc, #36]	; (7df0 <grid_port_receive_decode+0x38c>)
    7dca:	2201      	movs	r2, #1
    7dcc:	721a      	strb	r2, [r3, #8]
	mod->alert_color_red = red;
    7dce:	2200      	movs	r2, #0
    7dd0:	701a      	strb	r2, [r3, #0]
	mod->alert_color_green = green;
    7dd2:	705a      	strb	r2, [r3, #1]
	mod->alert_color_blue = blue;
    7dd4:	220a      	movs	r2, #10
    7dd6:	709a      	strb	r2, [r3, #2]
	mod->alert_state = duration;
    7dd8:	22c8      	movs	r2, #200	; 0xc8
    7dda:	809a      	strh	r2, [r3, #4]
	mod->alert_style = style;
    7ddc:	2202      	movs	r2, #2
    7dde:	719a      	strb	r2, [r3, #6]
    7de0:	e687      	b.n	7af2 <grid_port_receive_decode+0x8e>
    7de2:	bf00      	nop
    7de4:	51eb851f 	.word	0x51eb851f
    7de8:	000065c5 	.word	0x000065c5
    7dec:	000067f1 	.word	0x000067f1
    7df0:	20002050 	.word	0x20002050
    7df4:	0000683d 	.word	0x0000683d
    7df8:	0000689d 	.word	0x0000689d
    7dfc:	0000685d 	.word	0x0000685d
    7e00:	0000687d 	.word	0x0000687d
    7e04:	000068bd 	.word	0x000068bd
    7e08:	000068d1 	.word	0x000068d1
    7e0c:	000068e5 	.word	0x000068e5
    7e10:	000068f9 	.word	0x000068f9
    7e14:	0000690d 	.word	0x0000690d
    7e18:	0000680d 	.word	0x0000680d
    7e1c:	000069a5 	.word	0x000069a5
    7e20:	000069f1 	.word	0x000069f1
    7e24:	00006d49 	.word	0x00006d49
    7e28:	00006939 	.word	0x00006939
    7e2c:	000069d5 	.word	0x000069d5
			sprintf(checksum, "%02x", grid_msg_get_checksum(response, response_length));
    7e30:	4641      	mov	r1, r8
    7e32:	f107 001c 	add.w	r0, r7, #28
    7e36:	4b1e      	ldr	r3, [pc, #120]	; (7eb0 <grid_port_receive_decode+0x44c>)
    7e38:	4798      	blx	r3
    7e3a:	4602      	mov	r2, r0
    7e3c:	491d      	ldr	r1, [pc, #116]	; (7eb4 <grid_port_receive_decode+0x450>)
    7e3e:	f107 0014 	add.w	r0, r7, #20
    7e42:	4b1d      	ldr	r3, [pc, #116]	; (7eb8 <grid_port_receive_decode+0x454>)
    7e44:	4798      	blx	r3
			response[4] = checksum[0];
    7e46:	7d3b      	ldrb	r3, [r7, #20]
    7e48:	f887 3020 	strb.w	r3, [r7, #32]
			response[5] = checksum[1];
    7e4c:	7d7b      	ldrb	r3, [r7, #21]
    7e4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			for (uint8_t i=0; i<response_length; i++)
    7e52:	f1b8 0f00 	cmp.w	r8, #0
    7e56:	d010      	beq.n	7e7a <grid_port_receive_decode+0x416>
    7e58:	f107 041c 	add.w	r4, r7, #28
    7e5c:	f108 38ff 	add.w	r8, r8, #4294967295
    7e60:	fa5f f888 	uxtb.w	r8, r8
    7e64:	f108 0801 	add.w	r8, r8, #1
    7e68:	44a0      	add	r8, r4
				grid_buffer_write_character(&por->tx_buffer, response[i]);
    7e6a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 7ec8 <grid_port_receive_decode+0x464>
    7e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
    7e72:	4648      	mov	r0, r9
    7e74:	47d0      	blx	sl
			for (uint8_t i=0; i<response_length; i++)
    7e76:	45a0      	cmp	r8, r4
    7e78:	d1f9      	bne.n	7e6e <grid_port_receive_decode+0x40a>
			grid_buffer_write_acknowledge(&por->tx_buffer);
    7e7a:	4648      	mov	r0, r9
    7e7c:	4b0f      	ldr	r3, [pc, #60]	; (7ebc <grid_port_receive_decode+0x458>)
    7e7e:	4798      	blx	r3
    7e80:	e012      	b.n	7ea8 <grid_port_receive_decode+0x444>
	if (message[1] == GRID_MSG_BROADCAST){				
    7e82:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7e86:	2b0f      	cmp	r3, #15
    7e88:	f47f ae4f 	bne.w	7b2a <grid_port_receive_decode+0xc6>
		uint8_t response_length = strlen(response);
    7e8c:	f107 001c 	add.w	r0, r7, #28
    7e90:	4b0b      	ldr	r3, [pc, #44]	; (7ec0 <grid_port_receive_decode+0x45c>)
    7e92:	4798      	blx	r3
    7e94:	fa5f f880 	uxtb.w	r8, r0
		if(grid_buffer_write_init(&por->tx_buffer, response_length)){
    7e98:	f505 79d6 	add.w	r9, r5, #428	; 0x1ac
    7e9c:	4641      	mov	r1, r8
    7e9e:	4648      	mov	r0, r9
    7ea0:	4b08      	ldr	r3, [pc, #32]	; (7ec4 <grid_port_receive_decode+0x460>)
    7ea2:	4798      	blx	r3
    7ea4:	2800      	cmp	r0, #0
    7ea6:	d1c3      	bne.n	7e30 <grid_port_receive_decode+0x3cc>
	for (uint8_t i = 0; i<length; i++){
    7ea8:	2e00      	cmp	r6, #0
    7eaa:	f43f ae3e 	beq.w	7b2a <grid_port_receive_decode+0xc6>
    7eae:	e625      	b.n	7afc <grid_port_receive_decode+0x98>
    7eb0:	000067f1 	.word	0x000067f1
    7eb4:	0000b15c 	.word	0x0000b15c
    7eb8:	0000a3fd 	.word	0x0000a3fd
    7ebc:	000069f1 	.word	0x000069f1
    7ec0:	0000a445 	.word	0x0000a445
    7ec4:	000069a5 	.word	0x000069a5
    7ec8:	000069d5 	.word	0x000069d5

00007ecc <grid_port_receive_complete_task>:
	if (por->rx_double_buffer_status != 1){
    7ecc:	8ac3      	ldrh	r3, [r0, #22]
    7ece:	2b01      	cmp	r3, #1
    7ed0:	d000      	beq.n	7ed4 <grid_port_receive_complete_task+0x8>
    7ed2:	4770      	bx	lr
void grid_port_receive_complete_task(GRID_PORT_t* por){
    7ed4:	b510      	push	{r4, lr}
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    7ed6:	8b41      	ldrh	r1, [r0, #26]
    7ed8:	8b03      	ldrh	r3, [r0, #24]
    7eda:	4299      	cmp	r1, r3
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    7edc:	bf34      	ite	cc
    7ede:	1c5a      	addcc	r2, r3, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    7ee0:	f1a3 0237 	subcs.w	r2, r3, #55	; 0x37
    7ee4:	1a52      	subs	r2, r2, r1
    7ee6:	b2d2      	uxtb	r2, r2
    7ee8:	4604      	mov	r4, r0
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    7eea:	b2c9      	uxtb	r1, r1
    7eec:	4b02      	ldr	r3, [pc, #8]	; (7ef8 <grid_port_receive_complete_task+0x2c>)
    7eee:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    7ef0:	2300      	movs	r3, #0
    7ef2:	82e3      	strh	r3, [r4, #22]
    7ef4:	bd10      	pop	{r4, pc}
    7ef6:	bf00      	nop
    7ef8:	00007a65 	.word	0x00007a65

00007efc <init_timer>:
}

#define RTC1SEC 16384

void init_timer(void)
{
    7efc:	b570      	push	{r4, r5, r6, lr}
	
	
	
	
	RTC_Scheduler_tick.interval = 1;
    7efe:	4c1c      	ldr	r4, [pc, #112]	; (7f70 <init_timer+0x74>)
    7f00:	2301      	movs	r3, #1
    7f02:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
	RTC_Scheduler_tick.cb       = RTC_Scheduler_tick_cb;
    7f06:	4a1b      	ldr	r2, [pc, #108]	; (7f74 <init_timer+0x78>)
    7f08:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
	RTC_Scheduler_tick.mode     = TIMER_TASK_REPEAT;
    7f0c:	f884 3474 	strb.w	r3, [r4, #1140]	; 0x474
	
	
	RTC_Scheduler_report.interval = 32768/2; //1sec
    7f10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7f14:	f8c4 2480 	str.w	r2, [r4, #1152]	; 0x480
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    7f18:	4a17      	ldr	r2, [pc, #92]	; (7f78 <init_timer+0x7c>)
    7f1a:	f8c4 2484 	str.w	r2, [r4, #1156]	; 0x484
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    7f1e:	f884 3488 	strb.w	r3, [r4, #1160]	; 0x488
	
		
	RTC_Scheduler_ping.interval = 16380/5; //1sec
    7f22:	f640 42cc 	movw	r2, #3276	; 0xccc
    7f26:	f8c4 2494 	str.w	r2, [r4, #1172]	; 0x494
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    7f2a:	4a14      	ldr	r2, [pc, #80]	; (7f7c <init_timer+0x80>)
    7f2c:	f8c4 2498 	str.w	r2, [r4, #1176]	; 0x498
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    7f30:	f884 349c 	strb.w	r3, [r4, #1180]	; 0x49c
	
	RTC_Scheduler_rx_task.interval = RTC1SEC/10000; // 100us
    7f34:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
	RTC_Scheduler_rx_task.cb       = RTC_Scheduler_rx_task_cb;
    7f38:	4a11      	ldr	r2, [pc, #68]	; (7f80 <init_timer+0x84>)
    7f3a:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
	RTC_Scheduler_rx_task.mode     = TIMER_TASK_REPEAT;
    7f3e:	f884 34b0 	strb.w	r3, [r4, #1200]	; 0x4b0

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_tick);
    7f42:	4d10      	ldr	r5, [pc, #64]	; (7f84 <init_timer+0x88>)
    7f44:	f204 4164 	addw	r1, r4, #1124	; 0x464
    7f48:	4628      	mov	r0, r5
    7f4a:	4e0f      	ldr	r6, [pc, #60]	; (7f88 <init_timer+0x8c>)
    7f4c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    7f4e:	f504 618f 	add.w	r1, r4, #1144	; 0x478
    7f52:	4628      	mov	r0, r5
    7f54:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_rx_task);
    7f56:	f504 6194 	add.w	r1, r4, #1184	; 0x4a0
    7f5a:	4628      	mov	r0, r5
    7f5c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    7f5e:	f204 418c 	addw	r1, r4, #1164	; 0x48c
    7f62:	4628      	mov	r0, r5
    7f64:	47b0      	blx	r6
	timer_start(&RTC_Scheduler);
    7f66:	4628      	mov	r0, r5
    7f68:	4b08      	ldr	r3, [pc, #32]	; (7f8c <init_timer+0x90>)
    7f6a:	4798      	blx	r3
    7f6c:	bd70      	pop	{r4, r5, r6, pc}
    7f6e:	bf00      	nop
    7f70:	20000d00 	.word	0x20000d00
    7f74:	00005d51 	.word	0x00005d51
    7f78:	00005d6d 	.word	0x00005d6d
    7f7c:	00005d8d 	.word	0x00005d8d
    7f80:	00007a39 	.word	0x00007a39
    7f84:	20001320 	.word	0x20001320
    7f88:	00001b29 	.word	0x00001b29
    7f8c:	00001ae9 	.word	0x00001ae9

00007f90 <grid_modue_UI_SPI_init>:
}

struct io_descriptor *io;

void grid_modue_UI_SPI_init(void)
{
    7f90:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7f92:	4b0c      	ldr	r3, [pc, #48]	; (7fc4 <grid_modue_UI_SPI_init+0x34>)
    7f94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7f98:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7f9a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7fa0:	629a      	str	r2, [r3, #40]	; 0x28
    7fa2:	4a09      	ldr	r2, [pc, #36]	; (7fc8 <grid_modue_UI_SPI_init+0x38>)
    7fa4:	629a      	str	r2, [r3, #40]	; 0x28
	
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);
	gpio_set_pin_direction(PIN_UI_SPI_CS0, GPIO_DIRECTION_OUT);
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    7fa6:	4c09      	ldr	r4, [pc, #36]	; (7fcc <grid_modue_UI_SPI_init+0x3c>)
    7fa8:	2103      	movs	r1, #3
    7faa:	4620      	mov	r0, r4
    7fac:	4b08      	ldr	r3, [pc, #32]	; (7fd0 <grid_modue_UI_SPI_init+0x40>)
    7fae:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &io);
    7fb0:	4908      	ldr	r1, [pc, #32]	; (7fd4 <grid_modue_UI_SPI_init+0x44>)
    7fb2:	4620      	mov	r0, r4
    7fb4:	4b08      	ldr	r3, [pc, #32]	; (7fd8 <grid_modue_UI_SPI_init+0x48>)
    7fb6:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, tx_complete_cb_UI_SPI);
    7fb8:	4a08      	ldr	r2, [pc, #32]	; (7fdc <grid_modue_UI_SPI_init+0x4c>)
    7fba:	2100      	movs	r1, #0
    7fbc:	4620      	mov	r0, r4
    7fbe:	4b08      	ldr	r3, [pc, #32]	; (7fe0 <grid_modue_UI_SPI_init+0x50>)
    7fc0:	4798      	blx	r3
    7fc2:	bd10      	pop	{r4, pc}
    7fc4:	41008000 	.word	0x41008000
    7fc8:	c0000020 	.word	0xc0000020
    7fcc:	200012d8 	.word	0x200012d8
    7fd0:	00001781 	.word	0x00001781
    7fd4:	20002260 	.word	0x20002260
    7fd8:	00001869 	.word	0x00001869
    7fdc:	0000822d 	.word	0x0000822d
    7fe0:	00001825 	.word	0x00001825

00007fe4 <grid_modue_UI_SPI_start>:

}

void grid_modue_UI_SPI_start(void)
{
    7fe4:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7fe6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7fea:	4b06      	ldr	r3, [pc, #24]	; (8004 <grid_modue_UI_SPI_start+0x20>)
    7fec:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);
	
	spi_m_async_enable(&UI_SPI);
    7fee:	4c06      	ldr	r4, [pc, #24]	; (8008 <grid_modue_UI_SPI_start+0x24>)
    7ff0:	4620      	mov	r0, r4
    7ff2:	4b06      	ldr	r3, [pc, #24]	; (800c <grid_modue_UI_SPI_start+0x28>)
    7ff4:	4798      	blx	r3
	
	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    7ff6:	2308      	movs	r3, #8
    7ff8:	4a05      	ldr	r2, [pc, #20]	; (8010 <grid_modue_UI_SPI_start+0x2c>)
    7ffa:	4906      	ldr	r1, [pc, #24]	; (8014 <grid_modue_UI_SPI_start+0x30>)
    7ffc:	4620      	mov	r0, r4
    7ffe:	4c06      	ldr	r4, [pc, #24]	; (8018 <grid_modue_UI_SPI_start+0x34>)
    8000:	47a0      	blx	r4
    8002:	bd10      	pop	{r4, pc}
    8004:	41008000 	.word	0x41008000
    8008:	200012d8 	.word	0x200012d8
    800c:	00001759 	.word	0x00001759
    8010:	200011b4 	.word	0x200011b4
    8014:	20000348 	.word	0x20000348
    8018:	000017bd 	.word	0x000017bd

0000801c <grid_module_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */
void grid_module_init(void){
    801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8020:	b085      	sub	sp, #20
		
					

	grid_port_init_all();	
    8022:	4b70      	ldr	r3, [pc, #448]	; (81e4 <grid_module_init+0x1c8>)
    8024:	4798      	blx	r3
		
		
						
	// Allocate memory for 4 analog input with the filter depth of 3 samples, 14 bit format, 10bit result resolution
	grid_ain_init(grid_module_ain_buffer_size, 5, 14, 8);		
    8026:	2308      	movs	r3, #8
    8028:	220e      	movs	r2, #14
    802a:	2105      	movs	r1, #5
    802c:	2010      	movs	r0, #16
    802e:	4c6e      	ldr	r4, [pc, #440]	; (81e8 <grid_module_init+0x1cc>)
    8030:	47a0      	blx	r4
	grid_led_init(&grid_led_state, grid_module_led_buffer_size);
    8032:	2110      	movs	r1, #16
    8034:	486d      	ldr	r0, [pc, #436]	; (81ec <grid_module_init+0x1d0>)
    8036:	4b6e      	ldr	r3, [pc, #440]	; (81f0 <grid_module_init+0x1d4>)
    8038:	4798      	blx	r3


//	grid_rx_timout_init();
	
		
	grid_sys_uart_init();
    803a:	4b6e      	ldr	r3, [pc, #440]	; (81f4 <grid_module_init+0x1d8>)
    803c:	4798      	blx	r3
	
	grid_rx_dma_init();	
    803e:	4b6e      	ldr	r3, [pc, #440]	; (81f8 <grid_module_init+0x1dc>)
    8040:	4798      	blx	r3
    8042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8046:	4b6d      	ldr	r3, [pc, #436]	; (81fc <grid_module_init+0x1e0>)
    8048:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118


	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	grid_module_init_animation();
    804c:	4b6c      	ldr	r3, [pc, #432]	; (8200 <grid_module_init+0x1e4>)
    804e:	4798      	blx	r3


	// ADC SETUP	
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){
    8050:	4b6c      	ldr	r3, [pc, #432]	; (8204 <grid_module_init+0x1e8>)
    8052:	4798      	blx	r3
    8054:	b1c0      	cbz	r0, 8088 <grid_module_init+0x6c>
						
		grid_module_adc_init();
		grid_module_adc_start();
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){
    8056:	4b6b      	ldr	r3, [pc, #428]	; (8204 <grid_module_init+0x1e8>)
    8058:	4798      	blx	r3
    805a:	2880      	cmp	r0, #128	; 0x80
    805c:	d019      	beq.n	8092 <grid_module_init+0x76>
		grid_module_adc_init();
		grid_module_adc_start();
			
	}
		
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    805e:	4b69      	ldr	r3, [pc, #420]	; (8204 <grid_module_init+0x1e8>)
    8060:	4798      	blx	r3
    8062:	2840      	cmp	r0, #64	; 0x40
    8064:	f000 8082 	beq.w	816c <grid_module_init+0x150>
		grid_module_adc_init();
		grid_module_adc_start();
					
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){
    8068:	4b66      	ldr	r3, [pc, #408]	; (8204 <grid_module_init+0x1e8>)
    806a:	4798      	blx	r3
    806c:	28c0      	cmp	r0, #192	; 0xc0
    806e:	f000 80b3 	beq.w	81d8 <grid_module_init+0x1bc>
	
	//usart_async_register_callback(&GRID_AUX, USART_ASYNC_TXC_CB, tx_cb_GRID_AUX);
	/*usart_async_register_callback(&GRID_AUX, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&GRID_AUX, USART_ASYNC_ERROR_CB, err_cb);*/
	
	usart_async_get_io_descriptor(&GRID_AUX, &io);
    8072:	4c65      	ldr	r4, [pc, #404]	; (8208 <grid_module_init+0x1ec>)
    8074:	4965      	ldr	r1, [pc, #404]	; (820c <grid_module_init+0x1f0>)
    8076:	4620      	mov	r0, r4
    8078:	4b65      	ldr	r3, [pc, #404]	; (8210 <grid_module_init+0x1f4>)
    807a:	4798      	blx	r3
	usart_async_enable(&GRID_AUX);
    807c:	4620      	mov	r0, r4
    807e:	4b65      	ldr	r3, [pc, #404]	; (8214 <grid_module_init+0x1f8>)
    8080:	4798      	blx	r3
	
		
}
    8082:	b005      	add	sp, #20
    8084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_adc_init();
    8088:	4b63      	ldr	r3, [pc, #396]	; (8218 <grid_module_init+0x1fc>)
    808a:	4798      	blx	r3
		grid_module_adc_start();
    808c:	4b63      	ldr	r3, [pc, #396]	; (821c <grid_module_init+0x200>)
    808e:	4798      	blx	r3
    8090:	e7e1      	b.n	8056 <grid_module_init+0x3a>
		grid_adc_cfg[register_offset] |= (1<<bit_offest);
    8092:	4b63      	ldr	r3, [pc, #396]	; (8220 <grid_module_init+0x204>)
    8094:	f993 a43d 	ldrsb.w	sl, [r3, #1085]	; 0x43d
    8098:	f993 943e 	ldrsb.w	r9, [r3, #1086]	; 0x43e
    809c:	f993 843f 	ldrsb.w	r8, [r3, #1087]	; 0x43f
    80a0:	f993 c440 	ldrsb.w	ip, [r3, #1088]	; 0x440
    80a4:	f993 e441 	ldrsb.w	lr, [r3, #1089]	; 0x441
    80a8:	f993 7442 	ldrsb.w	r7, [r3, #1090]	; 0x442
    80ac:	f993 6443 	ldrsb.w	r6, [r3, #1091]	; 0x443
    80b0:	f993 5444 	ldrsb.w	r5, [r3, #1092]	; 0x444
    80b4:	f993 4445 	ldrsb.w	r4, [r3, #1093]	; 0x445
    80b8:	f993 0446 	ldrsb.w	r0, [r3, #1094]	; 0x446
    80bc:	f993 1447 	ldrsb.w	r1, [r3, #1095]	; 0x447
    80c0:	f993 2448 	ldrsb.w	r2, [r3, #1096]	; 0x448
    80c4:	9203      	str	r2, [sp, #12]
    80c6:	f993 2449 	ldrsb.w	r2, [r3, #1097]	; 0x449
    80ca:	9202      	str	r2, [sp, #8]
    80cc:	f993 b44a 	ldrsb.w	fp, [r3, #1098]	; 0x44a
    80d0:	f8cd b004 	str.w	fp, [sp, #4]
    80d4:	f993 244b 	ldrsb.w	r2, [r3, #1099]	; 0x44b
    80d8:	f893 b43c 	ldrb.w	fp, [r3, #1084]	; 0x43c
    80dc:	f04b 0b03 	orr.w	fp, fp, #3
    80e0:	f883 b43c 	strb.w	fp, [r3, #1084]	; 0x43c
    80e4:	f04a 0a03 	orr.w	sl, sl, #3
    80e8:	f883 a43d 	strb.w	sl, [r3, #1085]	; 0x43d
    80ec:	f049 0903 	orr.w	r9, r9, #3
    80f0:	f883 943e 	strb.w	r9, [r3, #1086]	; 0x43e
    80f4:	f048 0803 	orr.w	r8, r8, #3
    80f8:	f883 843f 	strb.w	r8, [r3, #1087]	; 0x43f
    80fc:	f04c 0c03 	orr.w	ip, ip, #3
    8100:	f883 c440 	strb.w	ip, [r3, #1088]	; 0x440
    8104:	f04e 0e03 	orr.w	lr, lr, #3
    8108:	f883 e441 	strb.w	lr, [r3, #1089]	; 0x441
    810c:	f047 0703 	orr.w	r7, r7, #3
    8110:	f883 7442 	strb.w	r7, [r3, #1090]	; 0x442
    8114:	f046 0603 	orr.w	r6, r6, #3
    8118:	f883 6443 	strb.w	r6, [r3, #1091]	; 0x443
    811c:	f045 0503 	orr.w	r5, r5, #3
    8120:	f883 5444 	strb.w	r5, [r3, #1092]	; 0x444
    8124:	f044 0403 	orr.w	r4, r4, #3
    8128:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
    812c:	f040 0003 	orr.w	r0, r0, #3
    8130:	f883 0446 	strb.w	r0, [r3, #1094]	; 0x446
    8134:	f041 0103 	orr.w	r1, r1, #3
    8138:	f883 1447 	strb.w	r1, [r3, #1095]	; 0x447
    813c:	9903      	ldr	r1, [sp, #12]
    813e:	f041 0103 	orr.w	r1, r1, #3
    8142:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
    8146:	9902      	ldr	r1, [sp, #8]
    8148:	f041 0103 	orr.w	r1, r1, #3
    814c:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
    8150:	9901      	ldr	r1, [sp, #4]
    8152:	f041 0103 	orr.w	r1, r1, #3
    8156:	f883 144a 	strb.w	r1, [r3, #1098]	; 0x44a
    815a:	f042 0203 	orr.w	r2, r2, #3
    815e:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
		grid_module_adc_init();
    8162:	4b2d      	ldr	r3, [pc, #180]	; (8218 <grid_module_init+0x1fc>)
    8164:	4798      	blx	r3
		grid_module_adc_start();
    8166:	4b2d      	ldr	r3, [pc, #180]	; (821c <grid_module_init+0x200>)
    8168:	4798      	blx	r3
    816a:	e778      	b.n	805e <grid_module_init+0x42>
		grid_adc_cfg[register_offset] |= (1<<bit_offest);
    816c:	4b2c      	ldr	r3, [pc, #176]	; (8220 <grid_module_init+0x204>)
    816e:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
    8172:	f042 0201 	orr.w	r2, r2, #1
    8176:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    817a:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
    817e:	f042 0201 	orr.w	r2, r2, #1
    8182:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
    8186:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
    818a:	f042 0201 	orr.w	r2, r2, #1
    818e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
    8192:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
    8196:	f042 0201 	orr.w	r2, r2, #1
    819a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
    819e:	f993 0449 	ldrsb.w	r0, [r3, #1097]	; 0x449
    81a2:	f993 144a 	ldrsb.w	r1, [r3, #1098]	; 0x44a
    81a6:	f993 244b 	ldrsb.w	r2, [r3, #1099]	; 0x44b
    81aa:	f893 4448 	ldrb.w	r4, [r3, #1096]	; 0x448
    81ae:	f044 0403 	orr.w	r4, r4, #3
    81b2:	f883 4448 	strb.w	r4, [r3, #1096]	; 0x448
    81b6:	f040 0003 	orr.w	r0, r0, #3
    81ba:	f883 0449 	strb.w	r0, [r3, #1097]	; 0x449
    81be:	f041 0103 	orr.w	r1, r1, #3
    81c2:	f883 144a 	strb.w	r1, [r3, #1098]	; 0x44a
    81c6:	f042 0203 	orr.w	r2, r2, #3
    81ca:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
		grid_module_adc_init();
    81ce:	4b12      	ldr	r3, [pc, #72]	; (8218 <grid_module_init+0x1fc>)
    81d0:	4798      	blx	r3
		grid_module_adc_start();
    81d2:	4b12      	ldr	r3, [pc, #72]	; (821c <grid_module_init+0x200>)
    81d4:	4798      	blx	r3
    81d6:	e747      	b.n	8068 <grid_module_init+0x4c>
		grid_modue_UI_SPI_init();
    81d8:	4b12      	ldr	r3, [pc, #72]	; (8224 <grid_module_init+0x208>)
    81da:	4798      	blx	r3
		grid_modue_UI_SPI_start();
    81dc:	4b12      	ldr	r3, [pc, #72]	; (8228 <grid_module_init+0x20c>)
    81de:	4798      	blx	r3
    81e0:	e747      	b.n	8072 <grid_module_init+0x56>
    81e2:	bf00      	nop
    81e4:	00006c75 	.word	0x00006c75
    81e8:	00006289 	.word	0x00006289
    81ec:	20002bfc 	.word	0x20002bfc
    81f0:	00006085 	.word	0x00006085
    81f4:	00007409 	.word	0x00007409
    81f8:	00007571 	.word	0x00007571
    81fc:	41008000 	.word	0x41008000
    8200:	00007945 	.word	0x00007945
    8204:	0000663d 	.word	0x0000663d
    8208:	200013d8 	.word	0x200013d8
    820c:	20002260 	.word	0x20002260
    8210:	00001e45 	.word	0x00001e45
    8214:	00001e19 	.word	0x00001e19
    8218:	000078e5 	.word	0x000078e5
    821c:	00007915 	.word	0x00007915
    8220:	20000d00 	.word	0x20000d00
    8224:	00007f91 	.word	0x00007f91
    8228:	00007fe5 	.word	0x00007fe5

0000822c <tx_complete_cb_UI_SPI>:
{
    822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_sync_set_mode(GRID_SYNC_1, GRID_SYNC_MASTER);
    8230:	2101      	movs	r1, #1
    8232:	4608      	mov	r0, r1
    8234:	4c67      	ldr	r4, [pc, #412]	; (83d4 <tx_complete_cb_UI_SPI+0x1a8>)
    8236:	47a0      	blx	r4
	grid_sync_set_level(GRID_SYNC_1, 1);
    8238:	2101      	movs	r1, #1
    823a:	4608      	mov	r0, r1
    823c:	4b66      	ldr	r3, [pc, #408]	; (83d8 <tx_complete_cb_UI_SPI+0x1ac>)
    823e:	4798      	blx	r3
	grid_sync_set_mode(GRID_SYNC_1, GRID_SYNC_MASTER);
    8240:	2101      	movs	r1, #1
    8242:	4608      	mov	r0, r1
    8244:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8246:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    824a:	4b64      	ldr	r3, [pc, #400]	; (83dc <tx_complete_cb_UI_SPI+0x1b0>)
    824c:	615a      	str	r2, [r3, #20]
    824e:	2100      	movs	r1, #0
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    8250:	4d63      	ldr	r5, [pc, #396]	; (83e0 <tx_complete_cb_UI_SPI+0x1b4>)
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    8252:	4c64      	ldr	r4, [pc, #400]	; (83e4 <tx_complete_cb_UI_SPI+0x1b8>)
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    8254:	4f64      	ldr	r7, [pc, #400]	; (83e8 <tx_complete_cb_UI_SPI+0x1bc>)
    8256:	4865      	ldr	r0, [pc, #404]	; (83ec <tx_complete_cb_UI_SPI+0x1c0>)
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    8258:	2601      	movs	r6, #1
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    825a:	468e      	mov	lr, r1
    825c:	e067      	b.n	832e <tx_complete_cb_UI_SPI+0x102>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_a;
    825e:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
    8262:	4480      	add	r8, r0
    8264:	f1bc 0f00 	cmp.w	ip, #0
    8268:	bf0c      	ite	eq
    826a:	f04f 0c01 	moveq.w	ip, #1
    826e:	f04f 0c00 	movne.w	ip, #0
    8272:	f888 c004 	strb.w	ip, [r8, #4]
				if (phase_a && phase_b){
    8276:	f000 80a0 	beq.w	83ba <tx_complete_cb_UI_SPI+0x18e>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*2 -1;
    827a:	46c4      	mov	ip, r8
    827c:	f898 8002 	ldrb.w	r8, [r8, #2]
    8280:	f108 38ff 	add.w	r8, r8, #4294967295
    8284:	f89c 9004 	ldrb.w	r9, [ip, #4]
    8288:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    828c:	f88c 8002 	strb.w	r8, [ip, #2]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    8290:	f88c 6003 	strb.w	r6, [ip, #3]
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    8294:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
    8298:	4484      	add	ip, r0
    829a:	f89c c006 	ldrb.w	ip, [ip, #6]
    829e:	4594      	cmp	ip, r2
    82a0:	d042      	beq.n	8328 <tx_complete_cb_UI_SPI+0xfc>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    82a2:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
    82a6:	4484      	add	ip, r0
    82a8:	f88c 2006 	strb.w	r2, [ip, #6]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_b;
    82ac:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
    82b0:	4484      	add	ip, r0
    82b2:	f88c 2004 	strb.w	r2, [ip, #4]
				if (phase_a && phase_b){
    82b6:	b3ba      	cbz	r2, 8328 <tx_complete_cb_UI_SPI+0xfc>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_value += grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction*2 -1;
    82b8:	f89c 2002 	ldrb.w	r2, [ip, #2]
    82bc:	3201      	adds	r2, #1
    82be:	f88c 2002 	strb.w	r2, [ip, #2]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_changed = 1;
    82c2:	f88c 6003 	strb.w	r6, [ip, #3]
    82c6:	e02f      	b.n	8328 <tx_complete_cb_UI_SPI+0xfc>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    82c8:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
    82cc:	4480      	add	r8, r0
    82ce:	f898 8006 	ldrb.w	r8, [r8, #6]
    82d2:	4590      	cmp	r8, r2
    82d4:	d028      	beq.n	8328 <tx_complete_cb_UI_SPI+0xfc>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    82d6:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
    82da:	4480      	add	r8, r0
    82dc:	f888 2006 	strb.w	r2, [r8, #6]
				if (phase_a == 0){
    82e0:	f1bc 0f00 	cmp.w	ip, #0
    82e4:	d1e2      	bne.n	82ac <tx_complete_cb_UI_SPI+0x80>
    82e6:	e019      	b.n	831c <tx_complete_cb_UI_SPI+0xf0>
	UI_SPI_DONE = 1;
    82e8:	4a3d      	ldr	r2, [pc, #244]	; (83e0 <tx_complete_cb_UI_SPI+0x1b4>)
    82ea:	2301      	movs	r3, #1
    82ec:	f882 34c2 	strb.w	r3, [r2, #1218]	; 0x4c2
    82f0:	f202 43b3 	addw	r3, r2, #1203	; 0x4b3
    82f4:	f202 42bb 	addw	r2, r2, #1211	; 0x4bb
		UI_SPI_RX_BUFFER[i] = 0;
    82f8:	2100      	movs	r1, #0
    82fa:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (uint8_t i=0; i<8; i++){
    82fe:	4293      	cmp	r3, r2
    8300:	d1fb      	bne.n	82fa <tx_complete_cb_UI_SPI+0xce>
	grid_sync_set_level(GRID_SYNC_1, 0);
    8302:	2100      	movs	r1, #0
    8304:	2001      	movs	r0, #1
    8306:	4b34      	ldr	r3, [pc, #208]	; (83d8 <tx_complete_cb_UI_SPI+0x1ac>)
    8308:	4798      	blx	r3
	grid_modue_UI_SPI_start();
    830a:	4b39      	ldr	r3, [pc, #228]	; (83f0 <tx_complete_cb_UI_SPI+0x1c4>)
    830c:	4798      	blx	r3
}
    830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    8312:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
    8316:	4484      	add	ip, r0
    8318:	f88c e006 	strb.w	lr, [ip, #6]
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = !phase_b;
    831c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    8320:	4403      	add	r3, r0
    8322:	f082 0201 	eor.w	r2, r2, #1
    8326:	711a      	strb	r2, [r3, #4]
    8328:	3101      	adds	r1, #1
	for (uint8_t i=0; i<16; i++){
    832a:	2910      	cmp	r1, #16
    832c:	d0dc      	beq.n	82e8 <tx_complete_cb_UI_SPI+0xbc>
    832e:	b2cb      	uxtb	r3, r1
		uint8_t new_value = (UI_SPI_RX_BUFFER[i/2]>>(4*(i%2)))&0x0F;
    8330:	eb05 0253 	add.w	r2, r5, r3, lsr #1
    8334:	f892 24b4 	ldrb.w	r2, [r2, #1204]	; 0x4b4
    8338:	f003 0301 	and.w	r3, r3, #1
    833c:	009b      	lsls	r3, r3, #2
    833e:	411a      	asrs	r2, r3
    8340:	b2d2      	uxtb	r2, r2
    8342:	f002 0c0f 	and.w	ip, r2, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[i];
    8346:	5c63      	ldrb	r3, [r4, r1]
    8348:	b2db      	uxtb	r3, r3
		if (old_value != new_value){
    834a:	459c      	cmp	ip, r3
    834c:	d0ec      	beq.n	8328 <tx_complete_cb_UI_SPI+0xfc>
			uint8_t button_value = new_value>>2;	
    834e:	ea4f 089c 	mov.w	r8, ip, lsr #2
			uint8_t phase_a = (new_value>>1)&1;
    8352:	f3cc 0c40 	ubfx	ip, ip, #1, #1
			uint8_t phase_b = (new_value)&1;
    8356:	f002 0201 	and.w	r2, r2, #1
			if (button_value != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value){
    835a:	5dcb      	ldrb	r3, [r1, r7]
    835c:	ebc3 09c3 	rsb	r9, r3, r3, lsl #3
    8360:	f810 9009 	ldrb.w	r9, [r0, r9]
    8364:	45c1      	cmp	r9, r8
    8366:	d007      	beq.n	8378 <tx_complete_cb_UI_SPI+0x14c>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_changed = 1;
    8368:	ebc3 09c3 	rsb	r9, r3, r3, lsl #3
    836c:	eb00 0a09 	add.w	sl, r0, r9
    8370:	f88a 6001 	strb.w	r6, [sl, #1]
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].button_value = new_value>>2;
    8374:	f800 8009 	strb.w	r8, [r0, r9]
			if (phase_a != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous){
    8378:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
    837c:	4480      	add	r8, r0
    837e:	f898 8005 	ldrb.w	r8, [r8, #5]
    8382:	45e0      	cmp	r8, ip
    8384:	d0a0      	beq.n	82c8 <tx_complete_cb_UI_SPI+0x9c>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_a_previous = phase_a;
    8386:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
    838a:	4480      	add	r8, r0
    838c:	f888 c005 	strb.w	ip, [r8, #5]
				if (phase_b == 0){
    8390:	2a00      	cmp	r2, #0
    8392:	f47f af64 	bne.w	825e <tx_complete_cb_UI_SPI+0x32>
					grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].rotation_direction = phase_a;
    8396:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
    839a:	4480      	add	r8, r0
    839c:	f888 c004 	strb.w	ip, [r8, #4]
				if (phase_a && phase_b){
    83a0:	f1bc 0f00 	cmp.w	ip, #0
    83a4:	f47f af76 	bne.w	8294 <tx_complete_cb_UI_SPI+0x68>
			if (phase_b != grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous){
    83a8:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
    83ac:	4484      	add	ip, r0
    83ae:	f89c c006 	ldrb.w	ip, [ip, #6]
    83b2:	f1bc 0f00 	cmp.w	ip, #0
    83b6:	d1ac      	bne.n	8312 <tx_complete_cb_UI_SPI+0xe6>
    83b8:	e7b6      	b.n	8328 <tx_complete_cb_UI_SPI+0xfc>
    83ba:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
    83be:	4484      	add	ip, r0
    83c0:	f89c c006 	ldrb.w	ip, [ip, #6]
    83c4:	4594      	cmp	ip, r2
    83c6:	d0af      	beq.n	8328 <tx_complete_cb_UI_SPI+0xfc>
				grid_ui_encoder_array[UI_ENCODER_LOOKUP[i]].phase_b_previous = phase_b;
    83c8:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
    83cc:	4484      	add	ip, r0
    83ce:	f88c 2006 	strb.w	r2, [ip, #6]
    83d2:	e7a3      	b.n	831c <tx_complete_cb_UI_SPI+0xf0>
    83d4:	00007265 	.word	0x00007265
    83d8:	0000733d 	.word	0x0000733d
    83dc:	41008000 	.word	0x41008000
    83e0:	20000d00 	.word	0x20000d00
    83e4:	20001c64 	.word	0x20001c64
    83e8:	0000b0ec 	.word	0x0000b0ec
    83ec:	200028e0 	.word	0x200028e0
    83f0:	00007fe5 	.word	0x00007fe5

000083f4 <main>:




int main(void)
{
    83f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83f8:	b0bf      	sub	sp, #252	; 0xfc
	
	#include "usb/class/midi/device/audiodf_midi.h"
	

	
	atmel_start_init();	
    83fa:	4b81      	ldr	r3, [pc, #516]	; (8600 <main+0x20c>)
    83fc:	4798      	blx	r3
	
	//TIMER_0_example2();

	audiodf_midi_init();
    83fe:	4b81      	ldr	r3, [pc, #516]	; (8604 <main+0x210>)
    8400:	4798      	blx	r3



	composite_device_start();
    8402:	4b81      	ldr	r3, [pc, #516]	; (8608 <main+0x214>)
    8404:	4798      	blx	r3
	
	grid_module_init();
    8406:	4b81      	ldr	r3, [pc, #516]	; (860c <main+0x218>)
    8408:	4798      	blx	r3
	



	
	init_timer();
    840a:	4b81      	ldr	r3, [pc, #516]	; (8610 <main+0x21c>)
    840c:	4798      	blx	r3
	
	char system_report_tasks[200];
	char system_report_buffers[200];
	char system_report_grid[200];
	
	volatile uint8_t debugvar = 0;
    840e:	2300      	movs	r3, #0
    8410:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	uint32_t loopcounter = 0;
    8414:	469a      	mov	sl, r3
		}else if (loopcounter == 500){
	
		}
	
		//checktimer flags
		if (reportflag){
    8416:	f8df 9274 	ldr.w	r9, [pc, #628]	; 868c <main+0x298>
    841a:	e032      	b.n	8482 <main+0x8e>
		
		/* ========================= PING ============================= */
						
		if (pingflag){
			
			grid_sys_ping(&GRID_PORT_N);
    841c:	487d      	ldr	r0, [pc, #500]	; (8614 <main+0x220>)
    841e:	4c7e      	ldr	r4, [pc, #504]	; (8618 <main+0x224>)
    8420:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_E);
    8422:	487e      	ldr	r0, [pc, #504]	; (861c <main+0x228>)
    8424:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_S);
    8426:	487e      	ldr	r0, [pc, #504]	; (8620 <main+0x22c>)
    8428:	47a0      	blx	r4
			grid_sys_ping(&GRID_PORT_W);
    842a:	487e      	ldr	r0, [pc, #504]	; (8624 <main+0x230>)
    842c:	47a0      	blx	r4
			
			pingflag = 0;
    842e:	2300      	movs	r3, #0
    8430:	f889 302d 	strb.w	r3, [r9, #45]	; 0x2d
    8434:	e05e      	b.n	84f4 <main+0x100>
					
				}
		
			}
			
			uint8_t intensity = grid_sys_error_intensity(&grid_sys_state);
    8436:	487c      	ldr	r0, [pc, #496]	; (8628 <main+0x234>)
    8438:	4b7c      	ldr	r3, [pc, #496]	; (862c <main+0x238>)
    843a:	4798      	blx	r3
    843c:	4607      	mov	r7, r0
    843e:	2400      	movs	r4, #0
	
			for (uint8_t i=0; i<16; i++){	
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, 1, intensity);
    8440:	2601      	movs	r6, #1
    8442:	4d7b      	ldr	r5, [pc, #492]	; (8630 <main+0x23c>)
    8444:	463b      	mov	r3, r7
    8446:	4632      	mov	r2, r6
    8448:	b2e1      	uxtb	r1, r4
    844a:	487a      	ldr	r0, [pc, #488]	; (8634 <main+0x240>)
    844c:	47a8      	blx	r5
    844e:	3401      	adds	r4, #1
			for (uint8_t i=0; i<16; i++){	
    8450:	2c10      	cmp	r4, #16
    8452:	d1f7      	bne.n	8444 <main+0x50>
			
			
		}
		
		
		grid_led_hardware_start_transfer_blocking(&grid_led_state);
    8454:	4877      	ldr	r0, [pc, #476]	; (8634 <main+0x240>)
    8456:	4b78      	ldr	r3, [pc, #480]	; (8638 <main+0x244>)
    8458:	4798      	blx	r3
		

		
		
		// IDLETASK
		task_current = TASK_IDLE;
    845a:	2301      	movs	r3, #1
    845c:	f889 3008 	strb.w	r3, [r9, #8]
		while(loopstart + RTC1SEC/1000 > realtime){
    8460:	9c08      	ldr	r4, [sp, #32]
    8462:	3410      	adds	r4, #16
    8464:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8468:	429c      	cmp	r4, r3
    846a:	d907      	bls.n	847c <main+0x88>
			delay_us(10);
    846c:	260a      	movs	r6, #10
    846e:	4d73      	ldr	r5, [pc, #460]	; (863c <main+0x248>)
    8470:	4630      	mov	r0, r6
    8472:	47a8      	blx	r5
		while(loopstart + RTC1SEC/1000 > realtime){
    8474:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8478:	429c      	cmp	r4, r3
    847a:	d8f9      	bhi.n	8470 <main+0x7c>
		}
		
		task_current = TASK_UNDEFINED;
    847c:	2300      	movs	r3, #0
    847e:	f889 3008 	strb.w	r3, [r9, #8]
		if (reportflag){
    8482:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
    8486:	b33b      	cbz	r3, 84d8 <main+0xe4>
			sprintf(system_report_tasks, "LOOPTICK %02x\nREALTIME %02x\nTASK0 %02x\nTASK1 %02x\nTASK2 %02x\nTASK3 %02x\nTASK4 %02x\n\0", loopcounter, realtime, task_counter[0], task_counter[1], task_counter[2], task_counter[3], task_counter[4]);
    8488:	f8d9 3004 	ldr.w	r3, [r9, #4]
    848c:	f8d9 200c 	ldr.w	r2, [r9, #12]
    8490:	f8d9 1010 	ldr.w	r1, [r9, #16]
    8494:	f8d9 0014 	ldr.w	r0, [r9, #20]
    8498:	f8d9 4018 	ldr.w	r4, [r9, #24]
    849c:	f8d9 501c 	ldr.w	r5, [r9, #28]
    84a0:	9504      	str	r5, [sp, #16]
    84a2:	9403      	str	r4, [sp, #12]
    84a4:	9002      	str	r0, [sp, #8]
    84a6:	9101      	str	r1, [sp, #4]
    84a8:	9200      	str	r2, [sp, #0]
    84aa:	4652      	mov	r2, sl
    84ac:	4964      	ldr	r1, [pc, #400]	; (8640 <main+0x24c>)
    84ae:	a80c      	add	r0, sp, #48	; 0x30
    84b0:	4c64      	ldr	r4, [pc, #400]	; (8644 <main+0x250>)
    84b2:	47a0      	blx	r4
			realtime = 0;
    84b4:	2300      	movs	r3, #0
    84b6:	f8c9 3004 	str.w	r3, [r9, #4]
			reportflag--;
    84ba:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
    84be:	3a01      	subs	r2, #1
    84c0:	b2d2      	uxtb	r2, r2
    84c2:	f889 202c 	strb.w	r2, [r9, #44]	; 0x2c
				task_counter[i] = 0;
    84c6:	4619      	mov	r1, r3
    84c8:	eb09 0283 	add.w	r2, r9, r3, lsl #2
    84cc:	60d1      	str	r1, [r2, #12]
    84ce:	3301      	adds	r3, #1
			for (uint8_t i=0; i<8; i++)
    84d0:	2b08      	cmp	r3, #8
    84d2:	d1f9      	bne.n	84c8 <main+0xd4>
			loopcounter = 0;
    84d4:	f04f 0a00 	mov.w	sl, #0
		loopcounter++;
    84d8:	f10a 0a01 	add.w	sl, sl, #1
		loopstart = realtime;
    84dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    84e0:	9308      	str	r3, [sp, #32]
			grid_sync_set_level(GRID_SYNC_1, loopcounter%2);
    84e2:	f00a 0101 	and.w	r1, sl, #1
    84e6:	2001      	movs	r0, #1
    84e8:	4b57      	ldr	r3, [pc, #348]	; (8648 <main+0x254>)
    84ea:	4798      	blx	r3
		if (pingflag){
    84ec:	f899 302d 	ldrb.w	r3, [r9, #45]	; 0x2d
    84f0:	2b00      	cmp	r3, #0
    84f2:	d193      	bne.n	841c <main+0x28>
		grid_port_receive_complete_task(&GRID_PORT_N);
    84f4:	4847      	ldr	r0, [pc, #284]	; (8614 <main+0x220>)
    84f6:	4c55      	ldr	r4, [pc, #340]	; (864c <main+0x258>)
    84f8:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_E);
    84fa:	4848      	ldr	r0, [pc, #288]	; (861c <main+0x228>)
    84fc:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_S);
    84fe:	4848      	ldr	r0, [pc, #288]	; (8620 <main+0x22c>)
    8500:	47a0      	blx	r4
		grid_port_receive_complete_task(&GRID_PORT_W);
    8502:	4848      	ldr	r0, [pc, #288]	; (8624 <main+0x230>)
    8504:	47a0      	blx	r4
		grid_port_process_ui(&GRID_PORT_U);		
    8506:	4d52      	ldr	r5, [pc, #328]	; (8650 <main+0x25c>)
    8508:	4628      	mov	r0, r5
    850a:	4b52      	ldr	r3, [pc, #328]	; (8654 <main+0x260>)
    850c:	4798      	blx	r3
		grid_port_process_inbound(&GRID_PORT_U); // Copy data from UI_RX to HOST_TX & north TX AND STUFF
    850e:	4628      	mov	r0, r5
    8510:	4c51      	ldr	r4, [pc, #324]	; (8658 <main+0x264>)
    8512:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_N);		
    8514:	483f      	ldr	r0, [pc, #252]	; (8614 <main+0x220>)
    8516:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_E);		
    8518:	4840      	ldr	r0, [pc, #256]	; (861c <main+0x228>)
    851a:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_S);		
    851c:	4840      	ldr	r0, [pc, #256]	; (8620 <main+0x22c>)
    851e:	47a0      	blx	r4
		grid_port_process_inbound(&GRID_PORT_W);	
    8520:	4840      	ldr	r0, [pc, #256]	; (8624 <main+0x230>)
    8522:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_N);
    8524:	483b      	ldr	r0, [pc, #236]	; (8614 <main+0x220>)
    8526:	4c4d      	ldr	r4, [pc, #308]	; (865c <main+0x268>)
    8528:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_E);
    852a:	483c      	ldr	r0, [pc, #240]	; (861c <main+0x228>)
    852c:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_S);
    852e:	483c      	ldr	r0, [pc, #240]	; (8620 <main+0x22c>)
    8530:	47a0      	blx	r4
		grid_port_process_outbound_usart(&GRID_PORT_W);
    8532:	483c      	ldr	r0, [pc, #240]	; (8624 <main+0x230>)
    8534:	47a0      	blx	r4
		grid_port_process_outbound_usb(&GRID_PORT_H); // Send data from HOST_TX through USB
    8536:	484a      	ldr	r0, [pc, #296]	; (8660 <main+0x26c>)
    8538:	4b4a      	ldr	r3, [pc, #296]	; (8664 <main+0x270>)
    853a:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    853c:	4628      	mov	r0, r5
    853e:	4b4a      	ldr	r3, [pc, #296]	; (8668 <main+0x274>)
    8540:	4798      	blx	r3
			task_current = TASK_LED;
    8542:	2302      	movs	r3, #2
    8544:	f889 3008 	strb.w	r3, [r9, #8]
			grid_led_tick(&grid_led_state);		
    8548:	483a      	ldr	r0, [pc, #232]	; (8634 <main+0x240>)
    854a:	4b48      	ldr	r3, [pc, #288]	; (866c <main+0x278>)
    854c:	4798      	blx	r3
			grid_led_render_all(&grid_led_state);
    854e:	4839      	ldr	r0, [pc, #228]	; (8634 <main+0x240>)
    8550:	4b47      	ldr	r3, [pc, #284]	; (8670 <main+0x27c>)
    8552:	4798      	blx	r3
			task_current = TASK_UNDEFINED;
    8554:	2300      	movs	r3, #0
    8556:	f889 3008 	strb.w	r3, [r9, #8]
		if (grid_sys_state.alert_state){
    855a:	4b33      	ldr	r3, [pc, #204]	; (8628 <main+0x234>)
    855c:	889b      	ldrh	r3, [r3, #4]
    855e:	2b00      	cmp	r3, #0
    8560:	f43f af78 	beq.w	8454 <main+0x60>
			grid_sys_state.alert_state--;
    8564:	4a30      	ldr	r2, [pc, #192]	; (8628 <main+0x234>)
    8566:	3b01      	subs	r3, #1
    8568:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    856a:	7a13      	ldrb	r3, [r2, #8]
    856c:	2b00      	cmp	r3, #0
    856e:	f43f af62 	beq.w	8436 <main+0x42>
	mod->alert_color_changed = 0;
    8572:	4613      	mov	r3, r2
    8574:	2400      	movs	r4, #0
    8576:	7214      	strb	r4, [r2, #8]
	return mod->alert_color_red;
    8578:	7812      	ldrb	r2, [r2, #0]
    857a:	9207      	str	r2, [sp, #28]
	return mod->alert_color_green;
    857c:	785a      	ldrb	r2, [r3, #1]
	return mod->alert_color_blue;
    857e:	789b      	ldrb	r3, [r3, #2]
    8580:	9306      	str	r3, [sp, #24]
					grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    8582:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    8586:	4692      	mov	sl, r2
    8588:	b2e5      	uxtb	r5, r4
					grid_led_set_min(&grid_led_state, i, 1, color_r*0   , color_g*0   , color_b*0);
    858a:	2300      	movs	r3, #0
    858c:	9301      	str	r3, [sp, #4]
    858e:	9300      	str	r3, [sp, #0]
    8590:	2201      	movs	r2, #1
    8592:	4629      	mov	r1, r5
    8594:	4827      	ldr	r0, [pc, #156]	; (8634 <main+0x240>)
    8596:	4e37      	ldr	r6, [pc, #220]	; (8674 <main+0x280>)
    8598:	47b0      	blx	r6
					grid_led_set_mid(&grid_led_state, i, 1, color_r*0.5 , color_g*0.5 , color_b*0.5);
    859a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8690 <main+0x29c>
    859e:	9807      	ldr	r0, [sp, #28]
    85a0:	47c0      	blx	r8
    85a2:	4f35      	ldr	r7, [pc, #212]	; (8678 <main+0x284>)
    85a4:	2200      	movs	r2, #0
    85a6:	4b35      	ldr	r3, [pc, #212]	; (867c <main+0x288>)
    85a8:	47b8      	blx	r7
    85aa:	4e35      	ldr	r6, [pc, #212]	; (8680 <main+0x28c>)
    85ac:	47b0      	blx	r6
    85ae:	fa5f fb80 	uxtb.w	fp, r0
    85b2:	9806      	ldr	r0, [sp, #24]
    85b4:	47c0      	blx	r8
    85b6:	2200      	movs	r2, #0
    85b8:	4b30      	ldr	r3, [pc, #192]	; (867c <main+0x288>)
    85ba:	47b8      	blx	r7
    85bc:	47b0      	blx	r6
    85be:	b2c0      	uxtb	r0, r0
    85c0:	9001      	str	r0, [sp, #4]
    85c2:	4650      	mov	r0, sl
    85c4:	47c0      	blx	r8
    85c6:	2200      	movs	r2, #0
    85c8:	4b2c      	ldr	r3, [pc, #176]	; (867c <main+0x288>)
    85ca:	47b8      	blx	r7
    85cc:	47b0      	blx	r6
    85ce:	b2c0      	uxtb	r0, r0
    85d0:	9000      	str	r0, [sp, #0]
    85d2:	465b      	mov	r3, fp
    85d4:	2201      	movs	r2, #1
    85d6:	4629      	mov	r1, r5
    85d8:	4816      	ldr	r0, [pc, #88]	; (8634 <main+0x240>)
    85da:	4e2a      	ldr	r6, [pc, #168]	; (8684 <main+0x290>)
    85dc:	47b0      	blx	r6
					grid_led_set_max(&grid_led_state, i, 1, color_r*1   , color_g*1   , color_b*1);
    85de:	9a06      	ldr	r2, [sp, #24]
    85e0:	9201      	str	r2, [sp, #4]
    85e2:	f8cd a000 	str.w	sl, [sp]
    85e6:	9b07      	ldr	r3, [sp, #28]
    85e8:	2201      	movs	r2, #1
    85ea:	4629      	mov	r1, r5
    85ec:	4811      	ldr	r0, [pc, #68]	; (8634 <main+0x240>)
    85ee:	4d26      	ldr	r5, [pc, #152]	; (8688 <main+0x294>)
    85f0:	47a8      	blx	r5
    85f2:	3401      	adds	r4, #1
				for (uint8_t i=0; i<16; i++){
    85f4:	2c10      	cmp	r4, #16
    85f6:	d1c7      	bne.n	8588 <main+0x194>
    85f8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    85fc:	e71b      	b.n	8436 <main+0x42>
    85fe:	bf00      	nop
    8600:	000002d1 	.word	0x000002d1
    8604:	00009085 	.word	0x00009085
    8608:	00009a09 	.word	0x00009a09
    860c:	0000801d 	.word	0x0000801d
    8610:	00007efd 	.word	0x00007efd
    8614:	20001a80 	.word	0x20001a80
    8618:	00006a01 	.word	0x00006a01
    861c:	20002950 	.word	0x20002950
    8620:	2000244c 	.word	0x2000244c
    8624:	20002264 	.word	0x20002264
    8628:	20002050 	.word	0x20002050
    862c:	00006551 	.word	0x00006551
    8630:	00005f2d 	.word	0x00005f2d
    8634:	20002bfc 	.word	0x20002bfc
    8638:	00006215 	.word	0x00006215
    863c:	00001339 	.word	0x00001339
    8640:	0000b0fc 	.word	0x0000b0fc
    8644:	0000a3fd 	.word	0x0000a3fd
    8648:	0000733d 	.word	0x0000733d
    864c:	00007ecd 	.word	0x00007ecd
    8650:	20001c74 	.word	0x20001c74
    8654:	000075bd 	.word	0x000075bd
    8658:	00006d49 	.word	0x00006d49
    865c:	000071fd 	.word	0x000071fd
    8660:	200026fc 	.word	0x200026fc
    8664:	00006ed1 	.word	0x00006ed1
    8668:	000071b9 	.word	0x000071b9
    866c:	00005e0d 	.word	0x00005e0d
    8670:	000061f1 	.word	0x000061f1
    8674:	00005e51 	.word	0x00005e51
    8678:	00009da1 	.word	0x00009da1
    867c:	3fe00000 	.word	0x3fe00000
    8680:	0000a1c5 	.word	0x0000a1c5
    8684:	00005e99 	.word	0x00005e99
    8688:	00005ee3 	.word	0x00005ee3
    868c:	20000d00 	.word	0x20000d00
    8690:	00009cd5 	.word	0x00009cd5

00008694 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8694:	b5f0      	push	{r4, r5, r6, r7, lr}
    8696:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    8698:	780b      	ldrb	r3, [r1, #0]
    869a:	f3c3 1441 	ubfx	r4, r3, #5, #2
    869e:	2c01      	cmp	r4, #1
    86a0:	d15e      	bne.n	8760 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    86a2:	888c      	ldrh	r4, [r1, #4]
    86a4:	4d35      	ldr	r5, [pc, #212]	; (877c <cdcdf_acm_req+0xe8>)
    86a6:	782d      	ldrb	r5, [r5, #0]
    86a8:	42a5      	cmp	r5, r4
    86aa:	d003      	beq.n	86b4 <cdcdf_acm_req+0x20>
    86ac:	4d33      	ldr	r5, [pc, #204]	; (877c <cdcdf_acm_req+0xe8>)
    86ae:	786d      	ldrb	r5, [r5, #1]
    86b0:	42a5      	cmp	r5, r4
    86b2:	d158      	bne.n	8766 <cdcdf_acm_req+0xd2>
    86b4:	4616      	mov	r6, r2
    86b6:	460c      	mov	r4, r1
    86b8:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    86ba:	f013 0f80 	tst.w	r3, #128	; 0x80
    86be:	d10c      	bne.n	86da <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    86c0:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    86c2:	4b2f      	ldr	r3, [pc, #188]	; (8780 <cdcdf_acm_req+0xec>)
    86c4:	4798      	blx	r3
    86c6:	4601      	mov	r1, r0
	switch (req->bRequest) {
    86c8:	7863      	ldrb	r3, [r4, #1]
    86ca:	2b20      	cmp	r3, #32
    86cc:	d013      	beq.n	86f6 <cdcdf_acm_req+0x62>
    86ce:	2b22      	cmp	r3, #34	; 0x22
    86d0:	d032      	beq.n	8738 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    86d2:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    86d6:	b003      	add	sp, #12
    86d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    86da:	2a01      	cmp	r2, #1
    86dc:	d046      	beq.n	876c <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    86de:	784b      	ldrb	r3, [r1, #1]
    86e0:	2b21      	cmp	r3, #33	; 0x21
    86e2:	d145      	bne.n	8770 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    86e4:	88cb      	ldrh	r3, [r1, #6]
    86e6:	2b07      	cmp	r3, #7
    86e8:	d145      	bne.n	8776 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    86ea:	2300      	movs	r3, #0
    86ec:	2207      	movs	r2, #7
    86ee:	4925      	ldr	r1, [pc, #148]	; (8784 <cdcdf_acm_req+0xf0>)
    86f0:	4c25      	ldr	r4, [pc, #148]	; (8788 <cdcdf_acm_req+0xf4>)
    86f2:	47a0      	blx	r4
    86f4:	e7ef      	b.n	86d6 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    86f6:	2f07      	cmp	r7, #7
    86f8:	d12b      	bne.n	8752 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    86fa:	b1be      	cbz	r6, 872c <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    86fc:	6800      	ldr	r0, [r0, #0]
    86fe:	9000      	str	r0, [sp, #0]
    8700:	888a      	ldrh	r2, [r1, #4]
    8702:	798b      	ldrb	r3, [r1, #6]
    8704:	f8ad 2004 	strh.w	r2, [sp, #4]
    8708:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    870c:	4b1b      	ldr	r3, [pc, #108]	; (877c <cdcdf_acm_req+0xe8>)
    870e:	691b      	ldr	r3, [r3, #16]
    8710:	b113      	cbz	r3, 8718 <cdcdf_acm_req+0x84>
    8712:	4668      	mov	r0, sp
    8714:	4798      	blx	r3
    8716:	b1f8      	cbz	r0, 8758 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    8718:	4b18      	ldr	r3, [pc, #96]	; (877c <cdcdf_acm_req+0xe8>)
    871a:	aa02      	add	r2, sp, #8
    871c:	e912 0003 	ldmdb	r2, {r0, r1}
    8720:	6098      	str	r0, [r3, #8]
    8722:	8199      	strh	r1, [r3, #12]
    8724:	0c09      	lsrs	r1, r1, #16
    8726:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    8728:	2000      	movs	r0, #0
    872a:	e7d4      	b.n	86d6 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    872c:	2300      	movs	r3, #0
    872e:	2207      	movs	r2, #7
    8730:	4628      	mov	r0, r5
    8732:	4c15      	ldr	r4, [pc, #84]	; (8788 <cdcdf_acm_req+0xf4>)
    8734:	47a0      	blx	r4
    8736:	e7ce      	b.n	86d6 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    8738:	2300      	movs	r3, #0
    873a:	461a      	mov	r2, r3
    873c:	4619      	mov	r1, r3
    873e:	4618      	mov	r0, r3
    8740:	4d11      	ldr	r5, [pc, #68]	; (8788 <cdcdf_acm_req+0xf4>)
    8742:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    8744:	4b0d      	ldr	r3, [pc, #52]	; (877c <cdcdf_acm_req+0xe8>)
    8746:	695b      	ldr	r3, [r3, #20]
    8748:	b143      	cbz	r3, 875c <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    874a:	8860      	ldrh	r0, [r4, #2]
    874c:	4798      	blx	r3
		return ERR_NONE;
    874e:	2000      	movs	r0, #0
    8750:	e7c1      	b.n	86d6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    8752:	f04f 30ff 	mov.w	r0, #4294967295
    8756:	e7be      	b.n	86d6 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    8758:	2000      	movs	r0, #0
    875a:	e7bc      	b.n	86d6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    875c:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    875e:	e7ba      	b.n	86d6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    8760:	f06f 0009 	mvn.w	r0, #9
    8764:	e7b7      	b.n	86d6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    8766:	f06f 0009 	mvn.w	r0, #9
    876a:	e7b4      	b.n	86d6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    876c:	2000      	movs	r0, #0
    876e:	e7b2      	b.n	86d6 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    8770:	f06f 000c 	mvn.w	r0, #12
    8774:	e7af      	b.n	86d6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    8776:	f04f 30ff 	mov.w	r0, #4294967295
    877a:	e7ac      	b.n	86d6 <cdcdf_acm_req+0x42>
    877c:	200011e0 	.word	0x200011e0
    8780:	00009785 	.word	0x00009785
    8784:	200011e8 	.word	0x200011e8
    8788:	00009261 	.word	0x00009261

0000878c <cdcdf_acm_ctrl>:
{
    878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8790:	b083      	sub	sp, #12
    8792:	4616      	mov	r6, r2
	switch (ctrl) {
    8794:	2901      	cmp	r1, #1
    8796:	d066      	beq.n	8866 <cdcdf_acm_ctrl+0xda>
    8798:	b141      	cbz	r1, 87ac <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    879a:	2902      	cmp	r1, #2
    879c:	bf0c      	ite	eq
    879e:	f06f 001a 	mvneq.w	r0, #26
    87a2:	f06f 000c 	mvnne.w	r0, #12
}
    87a6:	b003      	add	sp, #12
    87a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    87ac:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    87b0:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    87b2:	2800      	cmp	r0, #0
    87b4:	f000 8085 	beq.w	88c2 <cdcdf_acm_ctrl+0x136>
    87b8:	f10a 3bff 	add.w	fp, sl, #4294967295
    87bc:	f10a 0301 	add.w	r3, sl, #1
    87c0:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    87c2:	4f46      	ldr	r7, [pc, #280]	; (88dc <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    87c4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 88ec <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    87c8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 88f0 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    87cc:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    87ce:	7943      	ldrb	r3, [r0, #5]
    87d0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    87d4:	2b02      	cmp	r3, #2
    87d6:	d002      	beq.n	87de <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    87d8:	f06f 0009 	mvn.w	r0, #9
    87dc:	e7e3      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
    87de:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    87e2:	f89b 3000 	ldrb.w	r3, [fp]
    87e6:	429a      	cmp	r2, r3
    87e8:	d06e      	beq.n	88c8 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    87ea:	2bff      	cmp	r3, #255	; 0xff
    87ec:	d16f      	bne.n	88ce <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    87ee:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    87f2:	2205      	movs	r2, #5
    87f4:	6871      	ldr	r1, [r6, #4]
    87f6:	4b3a      	ldr	r3, [pc, #232]	; (88e0 <cdcdf_acm_ctrl+0x154>)
    87f8:	4798      	blx	r3
		while (NULL != ep) {
    87fa:	4604      	mov	r4, r0
    87fc:	b1f8      	cbz	r0, 883e <cdcdf_acm_ctrl+0xb2>
    87fe:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    8802:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    8804:	7963      	ldrb	r3, [r4, #5]
    8806:	7922      	ldrb	r2, [r4, #4]
    8808:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    880c:	b292      	uxth	r2, r2
    880e:	78e1      	ldrb	r1, [r4, #3]
    8810:	4628      	mov	r0, r5
    8812:	47b8      	blx	r7
    8814:	2800      	cmp	r0, #0
    8816:	d15d      	bne.n	88d4 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8818:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    881c:	bf14      	ite	ne
    881e:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    8822:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    8826:	4628      	mov	r0, r5
    8828:	47c8      	blx	r9
			desc->sod = ep;
    882a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    882c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    882e:	6871      	ldr	r1, [r6, #4]
    8830:	4420      	add	r0, r4
    8832:	47c0      	blx	r8
		while (NULL != ep) {
    8834:	4604      	mov	r4, r0
    8836:	2800      	cmp	r0, #0
    8838:	d1e3      	bne.n	8802 <cdcdf_acm_ctrl+0x76>
    883a:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    883e:	6833      	ldr	r3, [r6, #0]
    8840:	7818      	ldrb	r0, [r3, #0]
    8842:	2204      	movs	r2, #4
    8844:	6871      	ldr	r1, [r6, #4]
    8846:	4418      	add	r0, r3
    8848:	4b25      	ldr	r3, [pc, #148]	; (88e0 <cdcdf_acm_ctrl+0x154>)
    884a:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    884c:	9b00      	ldr	r3, [sp, #0]
    884e:	459b      	cmp	fp, r3
    8850:	d004      	beq.n	885c <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    8852:	2800      	cmp	r0, #0
    8854:	d1ba      	bne.n	87cc <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    8856:	f06f 0009 	mvn.w	r0, #9
    885a:	e7a4      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    885c:	2201      	movs	r2, #1
    885e:	4b21      	ldr	r3, [pc, #132]	; (88e4 <cdcdf_acm_ctrl+0x158>)
    8860:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    8862:	2000      	movs	r0, #0
    8864:	e79f      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    8866:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    8868:	b142      	cbz	r2, 887c <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    886a:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    886c:	795b      	ldrb	r3, [r3, #5]
    886e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    8872:	2b02      	cmp	r3, #2
    8874:	d002      	beq.n	887c <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    8876:	f06f 0009 	mvn.w	r0, #9
    887a:	e794      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    887c:	7823      	ldrb	r3, [r4, #0]
    887e:	2bff      	cmp	r3, #255	; 0xff
    8880:	d008      	beq.n	8894 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    8882:	23ff      	movs	r3, #255	; 0xff
    8884:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    8886:	78a0      	ldrb	r0, [r4, #2]
    8888:	4298      	cmp	r0, r3
    888a:	d003      	beq.n	8894 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    888c:	4b16      	ldr	r3, [pc, #88]	; (88e8 <cdcdf_acm_ctrl+0x15c>)
    888e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    8890:	23ff      	movs	r3, #255	; 0xff
    8892:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    8894:	7863      	ldrb	r3, [r4, #1]
    8896:	2bff      	cmp	r3, #255	; 0xff
    8898:	d008      	beq.n	88ac <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    889a:	23ff      	movs	r3, #255	; 0xff
    889c:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    889e:	78e0      	ldrb	r0, [r4, #3]
    88a0:	4298      	cmp	r0, r3
    88a2:	d003      	beq.n	88ac <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    88a4:	4b10      	ldr	r3, [pc, #64]	; (88e8 <cdcdf_acm_ctrl+0x15c>)
    88a6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    88a8:	23ff      	movs	r3, #255	; 0xff
    88aa:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    88ac:	7920      	ldrb	r0, [r4, #4]
    88ae:	28ff      	cmp	r0, #255	; 0xff
    88b0:	d003      	beq.n	88ba <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    88b2:	4b0d      	ldr	r3, [pc, #52]	; (88e8 <cdcdf_acm_ctrl+0x15c>)
    88b4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    88b6:	23ff      	movs	r3, #255	; 0xff
    88b8:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    88ba:	2000      	movs	r0, #0
    88bc:	4b09      	ldr	r3, [pc, #36]	; (88e4 <cdcdf_acm_ctrl+0x158>)
    88be:	7158      	strb	r0, [r3, #5]
    88c0:	e771      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    88c2:	f06f 0009 	mvn.w	r0, #9
    88c6:	e76e      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    88c8:	f06f 0011 	mvn.w	r0, #17
    88cc:	e76b      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    88ce:	f06f 001b 	mvn.w	r0, #27
    88d2:	e768      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    88d4:	f06f 0013 	mvn.w	r0, #19
    88d8:	e765      	b.n	87a6 <cdcdf_acm_ctrl+0x1a>
    88da:	bf00      	nop
    88dc:	000021cd 	.word	0x000021cd
    88e0:	000097a5 	.word	0x000097a5
    88e4:	200011e0 	.word	0x200011e0
    88e8:	00002235 	.word	0x00002235
    88ec:	00002261 	.word	0x00002261
    88f0:	000097df 	.word	0x000097df

000088f4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    88f4:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    88f6:	4b0a      	ldr	r3, [pc, #40]	; (8920 <cdcdf_acm_init+0x2c>)
    88f8:	4798      	blx	r3
    88fa:	2801      	cmp	r0, #1
    88fc:	d80c      	bhi.n	8918 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    88fe:	4809      	ldr	r0, [pc, #36]	; (8924 <cdcdf_acm_init+0x30>)
    8900:	4b09      	ldr	r3, [pc, #36]	; (8928 <cdcdf_acm_init+0x34>)
    8902:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    8904:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    8906:	3018      	adds	r0, #24
    8908:	4b08      	ldr	r3, [pc, #32]	; (892c <cdcdf_acm_init+0x38>)
    890a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    890c:	4908      	ldr	r1, [pc, #32]	; (8930 <cdcdf_acm_init+0x3c>)
    890e:	2001      	movs	r0, #1
    8910:	4b08      	ldr	r3, [pc, #32]	; (8934 <cdcdf_acm_init+0x40>)
    8912:	4798      	blx	r3
	return ERR_NONE;
    8914:	2000      	movs	r0, #0
    8916:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    8918:	f06f 0010 	mvn.w	r0, #16
}
    891c:	bd08      	pop	{r3, pc}
    891e:	bf00      	nop
    8920:	00009791 	.word	0x00009791
    8924:	200011e0 	.word	0x200011e0
    8928:	0000878d 	.word	0x0000878d
    892c:	00009731 	.word	0x00009731
    8930:	2000035c 	.word	0x2000035c
    8934:	0000969d 	.word	0x0000969d

00008938 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    8938:	4b07      	ldr	r3, [pc, #28]	; (8958 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    893a:	795b      	ldrb	r3, [r3, #5]
    893c:	b143      	cbz	r3, 8950 <cdcdf_acm_write+0x18>
{
    893e:	b510      	push	{r4, lr}
    8940:	460a      	mov	r2, r1
    8942:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    8944:	2301      	movs	r3, #1
    8946:	4804      	ldr	r0, [pc, #16]	; (8958 <cdcdf_acm_write+0x20>)
    8948:	78c0      	ldrb	r0, [r0, #3]
    894a:	4c04      	ldr	r4, [pc, #16]	; (895c <cdcdf_acm_write+0x24>)
    894c:	47a0      	blx	r4
    894e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    8950:	f06f 0010 	mvn.w	r0, #16
    8954:	4770      	bx	lr
    8956:	bf00      	nop
    8958:	200011e0 	.word	0x200011e0
    895c:	00009261 	.word	0x00009261

00008960 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8960:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    8962:	780b      	ldrb	r3, [r1, #0]
    8964:	2b81      	cmp	r3, #129	; 0x81
    8966:	d010      	beq.n	898a <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    8968:	f3c3 1341 	ubfx	r3, r3, #5, #2
    896c:	2b01      	cmp	r3, #1
    896e:	d13f      	bne.n	89f0 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    8970:	888a      	ldrh	r2, [r1, #4]
    8972:	4b22      	ldr	r3, [pc, #136]	; (89fc <hid_keyboard_req+0x9c>)
    8974:	7b1b      	ldrb	r3, [r3, #12]
    8976:	429a      	cmp	r2, r3
    8978:	d13d      	bne.n	89f6 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    897a:	784b      	ldrb	r3, [r1, #1]
    897c:	2b03      	cmp	r3, #3
    897e:	d028      	beq.n	89d2 <hid_keyboard_req+0x72>
    8980:	2b0b      	cmp	r3, #11
    8982:	d02c      	beq.n	89de <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    8984:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    8988:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    898a:	784b      	ldrb	r3, [r1, #1]
    898c:	2b06      	cmp	r3, #6
    898e:	d002      	beq.n	8996 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    8990:	f06f 0009 	mvn.w	r0, #9
    8994:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    8996:	888a      	ldrh	r2, [r1, #4]
    8998:	4b18      	ldr	r3, [pc, #96]	; (89fc <hid_keyboard_req+0x9c>)
    899a:	7b1b      	ldrb	r3, [r3, #12]
    899c:	429a      	cmp	r2, r3
    899e:	d002      	beq.n	89a6 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    89a0:	f06f 0009 	mvn.w	r0, #9
    89a4:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    89a6:	884b      	ldrh	r3, [r1, #2]
    89a8:	0a1b      	lsrs	r3, r3, #8
    89aa:	2b21      	cmp	r3, #33	; 0x21
    89ac:	d004      	beq.n	89b8 <hid_keyboard_req+0x58>
    89ae:	2b22      	cmp	r3, #34	; 0x22
    89b0:	d009      	beq.n	89c6 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    89b2:	f06f 000c 	mvn.w	r0, #12
    89b6:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    89b8:	4b10      	ldr	r3, [pc, #64]	; (89fc <hid_keyboard_req+0x9c>)
    89ba:	6819      	ldr	r1, [r3, #0]
    89bc:	2300      	movs	r3, #0
    89be:	780a      	ldrb	r2, [r1, #0]
    89c0:	4c0f      	ldr	r4, [pc, #60]	; (8a00 <hid_keyboard_req+0xa0>)
    89c2:	47a0      	blx	r4
    89c4:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    89c6:	2300      	movs	r3, #0
    89c8:	223b      	movs	r2, #59	; 0x3b
    89ca:	490e      	ldr	r1, [pc, #56]	; (8a04 <hid_keyboard_req+0xa4>)
    89cc:	4c0c      	ldr	r4, [pc, #48]	; (8a00 <hid_keyboard_req+0xa0>)
    89ce:	47a0      	blx	r4
    89d0:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    89d2:	2300      	movs	r3, #0
    89d4:	2201      	movs	r2, #1
    89d6:	490c      	ldr	r1, [pc, #48]	; (8a08 <hid_keyboard_req+0xa8>)
    89d8:	4c09      	ldr	r4, [pc, #36]	; (8a00 <hid_keyboard_req+0xa0>)
    89da:	47a0      	blx	r4
    89dc:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    89de:	884a      	ldrh	r2, [r1, #2]
    89e0:	4b06      	ldr	r3, [pc, #24]	; (89fc <hid_keyboard_req+0x9c>)
    89e2:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    89e4:	2300      	movs	r3, #0
    89e6:	461a      	mov	r2, r3
    89e8:	4619      	mov	r1, r3
    89ea:	4c05      	ldr	r4, [pc, #20]	; (8a00 <hid_keyboard_req+0xa0>)
    89ec:	47a0      	blx	r4
    89ee:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    89f0:	f06f 0009 	mvn.w	r0, #9
    89f4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    89f6:	f06f 0009 	mvn.w	r0, #9
    89fa:	bd10      	pop	{r4, pc}
    89fc:	20001204 	.word	0x20001204
    8a00:	00009261 	.word	0x00009261
    8a04:	0000b278 	.word	0x0000b278
    8a08:	20001213 	.word	0x20001213

00008a0c <hid_keyboard_ctrl>:
{
    8a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a10:	4614      	mov	r4, r2
	switch (ctrl) {
    8a12:	2901      	cmp	r1, #1
    8a14:	d050      	beq.n	8ab8 <hid_keyboard_ctrl+0xac>
    8a16:	b141      	cbz	r1, 8a2a <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    8a18:	2902      	cmp	r1, #2
    8a1a:	bf0c      	ite	eq
    8a1c:	f06f 051a 	mvneq.w	r5, #26
    8a20:	f06f 050c 	mvnne.w	r5, #12
}
    8a24:	4628      	mov	r0, r5
    8a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    8a2a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    8a2e:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    8a30:	2b00      	cmp	r3, #0
    8a32:	d05e      	beq.n	8af2 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    8a34:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    8a36:	795b      	ldrb	r3, [r3, #5]
    8a38:	2b03      	cmp	r3, #3
    8a3a:	d15d      	bne.n	8af8 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    8a3c:	f898 300c 	ldrb.w	r3, [r8, #12]
    8a40:	429a      	cmp	r2, r3
    8a42:	d05c      	beq.n	8afe <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    8a44:	2bff      	cmp	r3, #255	; 0xff
    8a46:	d15d      	bne.n	8b04 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    8a48:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    8a4c:	6823      	ldr	r3, [r4, #0]
    8a4e:	7818      	ldrb	r0, [r3, #0]
    8a50:	2221      	movs	r2, #33	; 0x21
    8a52:	6861      	ldr	r1, [r4, #4]
    8a54:	4418      	add	r0, r3
    8a56:	4b31      	ldr	r3, [pc, #196]	; (8b1c <hid_keyboard_ctrl+0x110>)
    8a58:	4798      	blx	r3
    8a5a:	4b31      	ldr	r3, [pc, #196]	; (8b20 <hid_keyboard_ctrl+0x114>)
    8a5c:	6018      	str	r0, [r3, #0]
    8a5e:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8a60:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8b28 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8a64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8b2c <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    8a68:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8b30 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8a6c:	6823      	ldr	r3, [r4, #0]
    8a6e:	7818      	ldrb	r0, [r3, #0]
    8a70:	6861      	ldr	r1, [r4, #4]
    8a72:	4418      	add	r0, r3
    8a74:	47c8      	blx	r9
		desc->sod = ep;
    8a76:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    8a78:	2800      	cmp	r0, #0
    8a7a:	d046      	beq.n	8b0a <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    8a7c:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    8a7e:	7943      	ldrb	r3, [r0, #5]
    8a80:	7902      	ldrb	r2, [r0, #4]
    8a82:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8a86:	b292      	uxth	r2, r2
    8a88:	78c1      	ldrb	r1, [r0, #3]
    8a8a:	4638      	mov	r0, r7
    8a8c:	47d0      	blx	sl
    8a8e:	4605      	mov	r5, r0
    8a90:	2800      	cmp	r0, #0
    8a92:	d13d      	bne.n	8b10 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8a94:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    8a98:	bf14      	ite	ne
    8a9a:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    8a9e:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    8aa2:	4638      	mov	r0, r7
    8aa4:	47d8      	blx	fp
    8aa6:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    8aa8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    8aac:	d1de      	bne.n	8a6c <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    8aae:	4b1c      	ldr	r3, [pc, #112]	; (8b20 <hid_keyboard_ctrl+0x114>)
    8ab0:	2201      	movs	r2, #1
    8ab2:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    8ab4:	741a      	strb	r2, [r3, #16]
    8ab6:	e7b5      	b.n	8a24 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    8ab8:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    8aba:	b11a      	cbz	r2, 8ac4 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    8abc:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    8abe:	795b      	ldrb	r3, [r3, #5]
    8ac0:	2b03      	cmp	r3, #3
    8ac2:	d128      	bne.n	8b16 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    8ac4:	7b2b      	ldrb	r3, [r5, #12]
    8ac6:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    8ac8:	bf1c      	itt	ne
    8aca:	23ff      	movne	r3, #255	; 0xff
    8acc:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    8ace:	7b68      	ldrb	r0, [r5, #13]
    8ad0:	28ff      	cmp	r0, #255	; 0xff
    8ad2:	d003      	beq.n	8adc <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    8ad4:	4b13      	ldr	r3, [pc, #76]	; (8b24 <hid_keyboard_ctrl+0x118>)
    8ad6:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    8ad8:	23ff      	movs	r3, #255	; 0xff
    8ada:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    8adc:	7ba8      	ldrb	r0, [r5, #14]
    8ade:	28ff      	cmp	r0, #255	; 0xff
    8ae0:	d003      	beq.n	8aea <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    8ae2:	4b10      	ldr	r3, [pc, #64]	; (8b24 <hid_keyboard_ctrl+0x118>)
    8ae4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    8ae6:	23ff      	movs	r3, #255	; 0xff
    8ae8:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    8aea:	2500      	movs	r5, #0
    8aec:	4b0c      	ldr	r3, [pc, #48]	; (8b20 <hid_keyboard_ctrl+0x114>)
    8aee:	741d      	strb	r5, [r3, #16]
    8af0:	e798      	b.n	8a24 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    8af2:	f06f 0509 	mvn.w	r5, #9
    8af6:	e795      	b.n	8a24 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    8af8:	f06f 0509 	mvn.w	r5, #9
    8afc:	e792      	b.n	8a24 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    8afe:	f06f 0511 	mvn.w	r5, #17
    8b02:	e78f      	b.n	8a24 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    8b04:	f06f 051b 	mvn.w	r5, #27
    8b08:	e78c      	b.n	8a24 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    8b0a:	f06f 0509 	mvn.w	r5, #9
    8b0e:	e789      	b.n	8a24 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    8b10:	f06f 0513 	mvn.w	r5, #19
    8b14:	e786      	b.n	8a24 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    8b16:	f06f 0509 	mvn.w	r5, #9
    8b1a:	e783      	b.n	8a24 <hid_keyboard_ctrl+0x18>
    8b1c:	000097a5 	.word	0x000097a5
    8b20:	20001204 	.word	0x20001204
    8b24:	00002235 	.word	0x00002235
    8b28:	000097df 	.word	0x000097df
    8b2c:	000021cd 	.word	0x000021cd
    8b30:	00002261 	.word	0x00002261

00008b34 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    8b34:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    8b36:	4b0a      	ldr	r3, [pc, #40]	; (8b60 <hiddf_keyboard_init+0x2c>)
    8b38:	4798      	blx	r3
    8b3a:	2801      	cmp	r0, #1
    8b3c:	d80c      	bhi.n	8b58 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    8b3e:	4809      	ldr	r0, [pc, #36]	; (8b64 <hiddf_keyboard_init+0x30>)
    8b40:	4b09      	ldr	r3, [pc, #36]	; (8b68 <hiddf_keyboard_init+0x34>)
    8b42:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    8b44:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    8b46:	3014      	adds	r0, #20
    8b48:	4b08      	ldr	r3, [pc, #32]	; (8b6c <hiddf_keyboard_init+0x38>)
    8b4a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    8b4c:	4908      	ldr	r1, [pc, #32]	; (8b70 <hiddf_keyboard_init+0x3c>)
    8b4e:	2001      	movs	r0, #1
    8b50:	4b08      	ldr	r3, [pc, #32]	; (8b74 <hiddf_keyboard_init+0x40>)
    8b52:	4798      	blx	r3
	return ERR_NONE;
    8b54:	2000      	movs	r0, #0
    8b56:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    8b58:	f06f 0010 	mvn.w	r0, #16
}
    8b5c:	bd08      	pop	{r3, pc}
    8b5e:	bf00      	nop
    8b60:	00009791 	.word	0x00009791
    8b64:	20001204 	.word	0x20001204
    8b68:	00008a0d 	.word	0x00008a0d
    8b6c:	00009731 	.word	0x00009731
    8b70:	20000364 	.word	0x20000364
    8b74:	0000969d 	.word	0x0000969d

00008b78 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    8b78:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    8b7a:	4b26      	ldr	r3, [pc, #152]	; (8c14 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    8b7c:	7c1b      	ldrb	r3, [r3, #16]
    8b7e:	2b00      	cmp	r3, #0
    8b80:	d045      	beq.n	8c0e <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    8b82:	4a24      	ldr	r2, [pc, #144]	; (8c14 <hiddf_keyboard_keys_state_change+0x9c>)
    8b84:	2300      	movs	r3, #0
    8b86:	6053      	str	r3, [r2, #4]
    8b88:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    8b8a:	b329      	cbz	r1, 8bd8 <hiddf_keyboard_keys_state_change+0x60>
    8b8c:	4603      	mov	r3, r0
    8b8e:	1e4d      	subs	r5, r1, #1
    8b90:	b2ed      	uxtb	r5, r5
    8b92:	3501      	adds	r5, #1
    8b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    8b98:	4405      	add	r5, r0
    8b9a:	2200      	movs	r2, #0
    8b9c:	e002      	b.n	8ba4 <hiddf_keyboard_keys_state_change+0x2c>
    8b9e:	3303      	adds	r3, #3
    8ba0:	42ab      	cmp	r3, r5
    8ba2:	d005      	beq.n	8bb0 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    8ba4:	785c      	ldrb	r4, [r3, #1]
    8ba6:	2c00      	cmp	r4, #0
    8ba8:	d0f9      	beq.n	8b9e <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    8baa:	3201      	adds	r2, #1
    8bac:	b2d2      	uxtb	r2, r2
    8bae:	e7f6      	b.n	8b9e <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    8bb0:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    8bb2:	b2d2      	uxtb	r2, r2
    8bb4:	2a06      	cmp	r2, #6
    8bb6:	d809      	bhi.n	8bcc <hiddf_keyboard_keys_state_change+0x54>
    8bb8:	4603      	mov	r3, r0
    8bba:	1e4a      	subs	r2, r1, #1
    8bbc:	b2d2      	uxtb	r2, r2
    8bbe:	3201      	adds	r2, #1
    8bc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8bc4:	4410      	add	r0, r2
    8bc6:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    8bc8:	4d12      	ldr	r5, [pc, #72]	; (8c14 <hiddf_keyboard_keys_state_change+0x9c>)
    8bca:	e015      	b.n	8bf8 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    8bcc:	4b11      	ldr	r3, [pc, #68]	; (8c14 <hiddf_keyboard_keys_state_change+0x9c>)
    8bce:	f04f 32ff 	mov.w	r2, #4294967295
    8bd2:	f8c3 2006 	str.w	r2, [r3, #6]
    8bd6:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    8bd8:	480e      	ldr	r0, [pc, #56]	; (8c14 <hiddf_keyboard_keys_state_change+0x9c>)
    8bda:	2300      	movs	r3, #0
    8bdc:	2208      	movs	r2, #8
    8bde:	1d01      	adds	r1, r0, #4
    8be0:	7b40      	ldrb	r0, [r0, #13]
    8be2:	4c0d      	ldr	r4, [pc, #52]	; (8c18 <hiddf_keyboard_keys_state_change+0xa0>)
    8be4:	47a0      	blx	r4
    8be6:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    8be8:	1c62      	adds	r2, r4, #1
    8bea:	7819      	ldrb	r1, [r3, #0]
    8bec:	442c      	add	r4, r5
    8bee:	7121      	strb	r1, [r4, #4]
    8bf0:	b2d4      	uxtb	r4, r2
    8bf2:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    8bf4:	4283      	cmp	r3, r0
    8bf6:	d0ef      	beq.n	8bd8 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    8bf8:	789a      	ldrb	r2, [r3, #2]
    8bfa:	2a01      	cmp	r2, #1
    8bfc:	d1f9      	bne.n	8bf2 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    8bfe:	785a      	ldrb	r2, [r3, #1]
    8c00:	2a00      	cmp	r2, #0
    8c02:	d0f1      	beq.n	8be8 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    8c04:	792a      	ldrb	r2, [r5, #4]
    8c06:	7819      	ldrb	r1, [r3, #0]
    8c08:	430a      	orrs	r2, r1
    8c0a:	712a      	strb	r2, [r5, #4]
    8c0c:	e7f1      	b.n	8bf2 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    8c0e:	f06f 0010 	mvn.w	r0, #16
}
    8c12:	bd38      	pop	{r3, r4, r5, pc}
    8c14:	20001204 	.word	0x20001204
    8c18:	00009261 	.word	0x00009261

00008c1c <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8c1c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    8c1e:	780b      	ldrb	r3, [r1, #0]
    8c20:	2b81      	cmp	r3, #129	; 0x81
    8c22:	d010      	beq.n	8c46 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    8c24:	f3c3 1341 	ubfx	r3, r3, #5, #2
    8c28:	2b01      	cmp	r3, #1
    8c2a:	d13f      	bne.n	8cac <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    8c2c:	888a      	ldrh	r2, [r1, #4]
    8c2e:	4b22      	ldr	r3, [pc, #136]	; (8cb8 <hid_mouse_req+0x9c>)
    8c30:	7a1b      	ldrb	r3, [r3, #8]
    8c32:	429a      	cmp	r2, r3
    8c34:	d13d      	bne.n	8cb2 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    8c36:	784b      	ldrb	r3, [r1, #1]
    8c38:	2b03      	cmp	r3, #3
    8c3a:	d028      	beq.n	8c8e <hid_mouse_req+0x72>
    8c3c:	2b0b      	cmp	r3, #11
    8c3e:	d02c      	beq.n	8c9a <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    8c40:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    8c44:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    8c46:	784b      	ldrb	r3, [r1, #1]
    8c48:	2b06      	cmp	r3, #6
    8c4a:	d002      	beq.n	8c52 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    8c4c:	f06f 0009 	mvn.w	r0, #9
    8c50:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    8c52:	888a      	ldrh	r2, [r1, #4]
    8c54:	4b18      	ldr	r3, [pc, #96]	; (8cb8 <hid_mouse_req+0x9c>)
    8c56:	7a1b      	ldrb	r3, [r3, #8]
    8c58:	429a      	cmp	r2, r3
    8c5a:	d002      	beq.n	8c62 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    8c5c:	f06f 0009 	mvn.w	r0, #9
    8c60:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    8c62:	884b      	ldrh	r3, [r1, #2]
    8c64:	0a1b      	lsrs	r3, r3, #8
    8c66:	2b21      	cmp	r3, #33	; 0x21
    8c68:	d004      	beq.n	8c74 <hid_mouse_req+0x58>
    8c6a:	2b22      	cmp	r3, #34	; 0x22
    8c6c:	d009      	beq.n	8c82 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    8c6e:	f06f 000c 	mvn.w	r0, #12
    8c72:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    8c74:	4b10      	ldr	r3, [pc, #64]	; (8cb8 <hid_mouse_req+0x9c>)
    8c76:	6819      	ldr	r1, [r3, #0]
    8c78:	2300      	movs	r3, #0
    8c7a:	780a      	ldrb	r2, [r1, #0]
    8c7c:	4c0f      	ldr	r4, [pc, #60]	; (8cbc <hid_mouse_req+0xa0>)
    8c7e:	47a0      	blx	r4
    8c80:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    8c82:	2300      	movs	r3, #0
    8c84:	2234      	movs	r2, #52	; 0x34
    8c86:	490e      	ldr	r1, [pc, #56]	; (8cc0 <hid_mouse_req+0xa4>)
    8c88:	4c0c      	ldr	r4, [pc, #48]	; (8cbc <hid_mouse_req+0xa0>)
    8c8a:	47a0      	blx	r4
    8c8c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    8c8e:	2300      	movs	r3, #0
    8c90:	2201      	movs	r2, #1
    8c92:	490c      	ldr	r1, [pc, #48]	; (8cc4 <hid_mouse_req+0xa8>)
    8c94:	4c09      	ldr	r4, [pc, #36]	; (8cbc <hid_mouse_req+0xa0>)
    8c96:	47a0      	blx	r4
    8c98:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    8c9a:	884a      	ldrh	r2, [r1, #2]
    8c9c:	4b06      	ldr	r3, [pc, #24]	; (8cb8 <hid_mouse_req+0x9c>)
    8c9e:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    8ca0:	2300      	movs	r3, #0
    8ca2:	461a      	mov	r2, r3
    8ca4:	4619      	mov	r1, r3
    8ca6:	4c05      	ldr	r4, [pc, #20]	; (8cbc <hid_mouse_req+0xa0>)
    8ca8:	47a0      	blx	r4
    8caa:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8cac:	f06f 0009 	mvn.w	r0, #9
    8cb0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8cb2:	f06f 0009 	mvn.w	r0, #9
    8cb6:	bd10      	pop	{r4, pc}
    8cb8:	20001224 	.word	0x20001224
    8cbc:	00009261 	.word	0x00009261
    8cc0:	0000b2b4 	.word	0x0000b2b4
    8cc4:	2000122e 	.word	0x2000122e

00008cc8 <hid_mouse_ctrl>:
{
    8cc8:	b570      	push	{r4, r5, r6, lr}
    8cca:	4614      	mov	r4, r2
	switch (ctrl) {
    8ccc:	2901      	cmp	r1, #1
    8cce:	d040      	beq.n	8d52 <hid_mouse_ctrl+0x8a>
    8cd0:	b139      	cbz	r1, 8ce2 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    8cd2:	2902      	cmp	r1, #2
    8cd4:	bf0c      	ite	eq
    8cd6:	f06f 041a 	mvneq.w	r4, #26
    8cda:	f06f 040c 	mvnne.w	r4, #12
}
    8cde:	4620      	mov	r0, r4
    8ce0:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    8ce2:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    8ce4:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d049      	beq.n	8d7e <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    8cea:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    8cec:	795b      	ldrb	r3, [r3, #5]
    8cee:	2b03      	cmp	r3, #3
    8cf0:	d148      	bne.n	8d84 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    8cf2:	7a2b      	ldrb	r3, [r5, #8]
    8cf4:	429a      	cmp	r2, r3
    8cf6:	d048      	beq.n	8d8a <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    8cf8:	2bff      	cmp	r3, #255	; 0xff
    8cfa:	d149      	bne.n	8d90 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    8cfc:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    8cfe:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    8d00:	7818      	ldrb	r0, [r3, #0]
    8d02:	2221      	movs	r2, #33	; 0x21
    8d04:	6861      	ldr	r1, [r4, #4]
    8d06:	4418      	add	r0, r3
    8d08:	4b29      	ldr	r3, [pc, #164]	; (8db0 <hid_mouse_ctrl+0xe8>)
    8d0a:	4798      	blx	r3
    8d0c:	4b29      	ldr	r3, [pc, #164]	; (8db4 <hid_mouse_ctrl+0xec>)
    8d0e:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8d10:	6823      	ldr	r3, [r4, #0]
    8d12:	7818      	ldrb	r0, [r3, #0]
    8d14:	6861      	ldr	r1, [r4, #4]
    8d16:	4418      	add	r0, r3
    8d18:	4b27      	ldr	r3, [pc, #156]	; (8db8 <hid_mouse_ctrl+0xf0>)
    8d1a:	4798      	blx	r3
	desc->sod = ep;
    8d1c:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    8d1e:	2800      	cmp	r0, #0
    8d20:	d039      	beq.n	8d96 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    8d22:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    8d24:	7943      	ldrb	r3, [r0, #5]
    8d26:	7902      	ldrb	r2, [r0, #4]
    8d28:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8d2c:	b292      	uxth	r2, r2
    8d2e:	78c1      	ldrb	r1, [r0, #3]
    8d30:	4630      	mov	r0, r6
    8d32:	4b22      	ldr	r3, [pc, #136]	; (8dbc <hid_mouse_ctrl+0xf4>)
    8d34:	4798      	blx	r3
    8d36:	4604      	mov	r4, r0
    8d38:	bb80      	cbnz	r0, 8d9c <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8d3a:	f016 0f80 	tst.w	r6, #128	; 0x80
    8d3e:	d030      	beq.n	8da2 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    8d40:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    8d42:	4630      	mov	r0, r6
    8d44:	4b1e      	ldr	r3, [pc, #120]	; (8dc0 <hid_mouse_ctrl+0xf8>)
    8d46:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    8d48:	4b1a      	ldr	r3, [pc, #104]	; (8db4 <hid_mouse_ctrl+0xec>)
    8d4a:	2201      	movs	r2, #1
    8d4c:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    8d4e:	72da      	strb	r2, [r3, #11]
    8d50:	e7c5      	b.n	8cde <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    8d52:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    8d54:	b11a      	cbz	r2, 8d5e <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    8d56:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    8d58:	795b      	ldrb	r3, [r3, #5]
    8d5a:	2b03      	cmp	r3, #3
    8d5c:	d124      	bne.n	8da8 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    8d5e:	7a2b      	ldrb	r3, [r5, #8]
    8d60:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    8d62:	bf1c      	itt	ne
    8d64:	23ff      	movne	r3, #255	; 0xff
    8d66:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    8d68:	7a68      	ldrb	r0, [r5, #9]
    8d6a:	28ff      	cmp	r0, #255	; 0xff
    8d6c:	d003      	beq.n	8d76 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    8d6e:	4b15      	ldr	r3, [pc, #84]	; (8dc4 <hid_mouse_ctrl+0xfc>)
    8d70:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    8d72:	23ff      	movs	r3, #255	; 0xff
    8d74:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    8d76:	2400      	movs	r4, #0
    8d78:	4b0e      	ldr	r3, [pc, #56]	; (8db4 <hid_mouse_ctrl+0xec>)
    8d7a:	72dc      	strb	r4, [r3, #11]
    8d7c:	e7af      	b.n	8cde <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8d7e:	f06f 0409 	mvn.w	r4, #9
    8d82:	e7ac      	b.n	8cde <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8d84:	f06f 0409 	mvn.w	r4, #9
    8d88:	e7a9      	b.n	8cde <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    8d8a:	f06f 0411 	mvn.w	r4, #17
    8d8e:	e7a6      	b.n	8cde <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    8d90:	f06f 041b 	mvn.w	r4, #27
    8d94:	e7a3      	b.n	8cde <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    8d96:	f06f 0409 	mvn.w	r4, #9
    8d9a:	e7a0      	b.n	8cde <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    8d9c:	f06f 0413 	mvn.w	r4, #19
    8da0:	e79d      	b.n	8cde <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    8da2:	f04f 34ff 	mov.w	r4, #4294967295
    8da6:	e79a      	b.n	8cde <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    8da8:	f06f 0409 	mvn.w	r4, #9
    8dac:	e797      	b.n	8cde <hid_mouse_ctrl+0x16>
    8dae:	bf00      	nop
    8db0:	000097a5 	.word	0x000097a5
    8db4:	20001224 	.word	0x20001224
    8db8:	000097df 	.word	0x000097df
    8dbc:	000021cd 	.word	0x000021cd
    8dc0:	00002261 	.word	0x00002261
    8dc4:	00002235 	.word	0x00002235

00008dc8 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    8dc8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    8dca:	4b0a      	ldr	r3, [pc, #40]	; (8df4 <hiddf_mouse_init+0x2c>)
    8dcc:	4798      	blx	r3
    8dce:	2801      	cmp	r0, #1
    8dd0:	d80c      	bhi.n	8dec <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    8dd2:	4809      	ldr	r0, [pc, #36]	; (8df8 <hiddf_mouse_init+0x30>)
    8dd4:	4b09      	ldr	r3, [pc, #36]	; (8dfc <hiddf_mouse_init+0x34>)
    8dd6:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    8dd8:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    8dda:	300c      	adds	r0, #12
    8ddc:	4b08      	ldr	r3, [pc, #32]	; (8e00 <hiddf_mouse_init+0x38>)
    8dde:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    8de0:	4908      	ldr	r1, [pc, #32]	; (8e04 <hiddf_mouse_init+0x3c>)
    8de2:	2001      	movs	r0, #1
    8de4:	4b08      	ldr	r3, [pc, #32]	; (8e08 <hiddf_mouse_init+0x40>)
    8de6:	4798      	blx	r3
	return ERR_NONE;
    8de8:	2000      	movs	r0, #0
    8dea:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    8dec:	f06f 0010 	mvn.w	r0, #16
}
    8df0:	bd08      	pop	{r3, pc}
    8df2:	bf00      	nop
    8df4:	00009791 	.word	0x00009791
    8df8:	20001224 	.word	0x20001224
    8dfc:	00008cc9 	.word	0x00008cc9
    8e00:	00009731 	.word	0x00009731
    8e04:	2000036c 	.word	0x2000036c
    8e08:	0000969d 	.word	0x0000969d

00008e0c <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    8e0c:	2200      	movs	r2, #0
    8e0e:	4b0d      	ldr	r3, [pc, #52]	; (8e44 <hiddf_mouse_move+0x38>)
    8e10:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    8e12:	2901      	cmp	r1, #1
    8e14:	d00e      	beq.n	8e34 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    8e16:	2902      	cmp	r1, #2
    8e18:	d00e      	beq.n	8e38 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    8e1a:	2903      	cmp	r1, #3
    8e1c:	d10f      	bne.n	8e3e <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    8e1e:	4b09      	ldr	r3, [pc, #36]	; (8e44 <hiddf_mouse_move+0x38>)
    8e20:	71d8      	strb	r0, [r3, #7]
{
    8e22:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    8e24:	4807      	ldr	r0, [pc, #28]	; (8e44 <hiddf_mouse_move+0x38>)
    8e26:	2300      	movs	r3, #0
    8e28:	2204      	movs	r2, #4
    8e2a:	1881      	adds	r1, r0, r2
    8e2c:	7a40      	ldrb	r0, [r0, #9]
    8e2e:	4c06      	ldr	r4, [pc, #24]	; (8e48 <hiddf_mouse_move+0x3c>)
    8e30:	47a0      	blx	r4
    8e32:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    8e34:	7158      	strb	r0, [r3, #5]
    8e36:	e7f4      	b.n	8e22 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    8e38:	4b02      	ldr	r3, [pc, #8]	; (8e44 <hiddf_mouse_move+0x38>)
    8e3a:	7198      	strb	r0, [r3, #6]
    8e3c:	e7f1      	b.n	8e22 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    8e3e:	f06f 000c 	mvn.w	r0, #12
    8e42:	4770      	bx	lr
    8e44:	20001224 	.word	0x20001224
    8e48:	00009261 	.word	0x00009261

00008e4c <midi_cb_ep_bulk_in>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    8e4c:	e7fe      	b.n	8e4c <midi_cb_ep_bulk_in>

00008e4e <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    8e4e:	e7fe      	b.n	8e4e <midi_cb_ep_bulk_out>

00008e50 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    8e50:	b510      	push	{r4, lr}
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    8e52:	780b      	ldrb	r3, [r1, #0]
    8e54:	2b81      	cmp	r3, #129	; 0x81
    8e56:	d014      	beq.n	8e82 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    8e58:	f3c3 1341 	ubfx	r3, r3, #5, #2
    8e5c:	2b01      	cmp	r3, #1
    8e5e:	d132      	bne.n	8ec6 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    8e60:	888b      	ldrh	r3, [r1, #4]
    8e62:	4a1c      	ldr	r2, [pc, #112]	; (8ed4 <audio_midi_req+0x84>)
    8e64:	7912      	ldrb	r2, [r2, #4]
    8e66:	429a      	cmp	r2, r3
    8e68:	d003      	beq.n	8e72 <audio_midi_req+0x22>
    8e6a:	4a1a      	ldr	r2, [pc, #104]	; (8ed4 <audio_midi_req+0x84>)
    8e6c:	7952      	ldrb	r2, [r2, #5]
    8e6e:	429a      	cmp	r2, r3
    8e70:	d12c      	bne.n	8ecc <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    8e72:	784b      	ldrb	r3, [r1, #1]
    8e74:	2b03      	cmp	r3, #3
    8e76:	d017      	beq.n	8ea8 <audio_midi_req+0x58>
    8e78:	2b0b      	cmp	r3, #11
    8e7a:	d01b      	beq.n	8eb4 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    8e7c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    8e80:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    8e82:	888b      	ldrh	r3, [r1, #4]
    8e84:	4a13      	ldr	r2, [pc, #76]	; (8ed4 <audio_midi_req+0x84>)
    8e86:	7912      	ldrb	r2, [r2, #4]
    8e88:	429a      	cmp	r2, r3
    8e8a:	d006      	beq.n	8e9a <audio_midi_req+0x4a>
    8e8c:	4a11      	ldr	r2, [pc, #68]	; (8ed4 <audio_midi_req+0x84>)
    8e8e:	7952      	ldrb	r2, [r2, #5]
    8e90:	429a      	cmp	r2, r3
    8e92:	d002      	beq.n	8e9a <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    8e94:	f06f 0009 	mvn.w	r0, #9
    8e98:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    8e9a:	4b0e      	ldr	r3, [pc, #56]	; (8ed4 <audio_midi_req+0x84>)
    8e9c:	6819      	ldr	r1, [r3, #0]
    8e9e:	2300      	movs	r3, #0
    8ea0:	780a      	ldrb	r2, [r1, #0]
    8ea2:	4c0d      	ldr	r4, [pc, #52]	; (8ed8 <audio_midi_req+0x88>)
    8ea4:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    8ea6:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    8ea8:	2300      	movs	r3, #0
    8eaa:	2201      	movs	r2, #1
    8eac:	490b      	ldr	r1, [pc, #44]	; (8edc <audio_midi_req+0x8c>)
    8eae:	4c0a      	ldr	r4, [pc, #40]	; (8ed8 <audio_midi_req+0x88>)
    8eb0:	47a0      	blx	r4
    8eb2:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    8eb4:	884a      	ldrh	r2, [r1, #2]
    8eb6:	4b07      	ldr	r3, [pc, #28]	; (8ed4 <audio_midi_req+0x84>)
    8eb8:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    8eba:	2300      	movs	r3, #0
    8ebc:	461a      	mov	r2, r3
    8ebe:	4619      	mov	r1, r3
    8ec0:	4c05      	ldr	r4, [pc, #20]	; (8ed8 <audio_midi_req+0x88>)
    8ec2:	47a0      	blx	r4
    8ec4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    8ec6:	f06f 0009 	mvn.w	r0, #9
    8eca:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    8ecc:	f06f 0009 	mvn.w	r0, #9
    8ed0:	bd10      	pop	{r4, pc}
    8ed2:	bf00      	nop
    8ed4:	2000123c 	.word	0x2000123c
    8ed8:	00009261 	.word	0x00009261
    8edc:	20001244 	.word	0x20001244

00008ee0 <audio_midi_ctrl>:
{
    8ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ee4:	4615      	mov	r5, r2
	switch (ctrl) {
    8ee6:	2901      	cmp	r1, #1
    8ee8:	d06f      	beq.n	8fca <audio_midi_ctrl+0xea>
    8eea:	b139      	cbz	r1, 8efc <audio_midi_ctrl+0x1c>
		return ERR_INVALID_ARG;
    8eec:	2902      	cmp	r1, #2
    8eee:	bf0c      	ite	eq
    8ef0:	f06f 001a 	mvneq.w	r0, #26
    8ef4:	f06f 000c 	mvnne.w	r0, #12
    8ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    8efc:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    8f00:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    8f02:	2800      	cmp	r0, #0
    8f04:	f000 808a 	beq.w	901c <audio_midi_ctrl+0x13c>
    8f08:	f109 0604 	add.w	r6, r9, #4
    8f0c:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    8f0e:	f04f 0804 	mov.w	r8, #4
    8f12:	4f53      	ldr	r7, [pc, #332]	; (9060 <audio_midi_ctrl+0x180>)
    8f14:	e018      	b.n	8f48 <audio_midi_ctrl+0x68>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    8f16:	f816 3b01 	ldrb.w	r3, [r6], #1
    8f1a:	429a      	cmp	r2, r3
    8f1c:	f000 8086 	beq.w	902c <audio_midi_ctrl+0x14c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    8f20:	2bff      	cmp	r3, #255	; 0xff
    8f22:	f040 8087 	bne.w	9034 <audio_midi_ctrl+0x154>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    8f26:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    8f2a:	2c01      	cmp	r4, #1
    8f2c:	d016      	beq.n	8f5c <audio_midi_ctrl+0x7c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    8f2e:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    8f30:	7818      	ldrb	r0, [r3, #0]
    8f32:	4642      	mov	r2, r8
    8f34:	6869      	ldr	r1, [r5, #4]
    8f36:	4418      	add	r0, r3
    8f38:	47b8      	blx	r7
    8f3a:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    8f3c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8f40:	f000 8087 	beq.w	9052 <audio_midi_ctrl+0x172>
		if (NULL == ifc) {
    8f44:	2800      	cmp	r0, #0
    8f46:	d06d      	beq.n	9024 <audio_midi_ctrl+0x144>
		ifc_desc.bInterfaceNumber = ifc[2];
    8f48:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    8f4a:	7943      	ldrb	r3, [r0, #5]
    8f4c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8f50:	2b01      	cmp	r3, #1
    8f52:	d0e0      	beq.n	8f16 <audio_midi_ctrl+0x36>
			return ERR_NOT_FOUND;
    8f54:	f06f 0009 	mvn.w	r0, #9
    8f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    8f5c:	2205      	movs	r2, #5
    8f5e:	6869      	ldr	r1, [r5, #4]
    8f60:	4b3f      	ldr	r3, [pc, #252]	; (9060 <audio_midi_ctrl+0x180>)
    8f62:	4798      	blx	r3
    8f64:	4604      	mov	r4, r0
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8f66:	f8df a114 	ldr.w	sl, [pc, #276]	; 907c <audio_midi_ctrl+0x19c>
					usb_d_ep_enable(func_data->func_ep_out);
    8f6a:	4f3e      	ldr	r7, [pc, #248]	; (9064 <audio_midi_ctrl+0x184>)
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    8f6c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 9080 <audio_midi_ctrl+0x1a0>
    8f70:	e010      	b.n	8f94 <audio_midi_ctrl+0xb4>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    8f72:	f889 6006 	strb.w	r6, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    8f76:	4630      	mov	r0, r6
    8f78:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    8f7a:	4a3b      	ldr	r2, [pc, #236]	; (9068 <audio_midi_ctrl+0x188>)
    8f7c:	2102      	movs	r1, #2
    8f7e:	f899 0006 	ldrb.w	r0, [r9, #6]
    8f82:	4b3a      	ldr	r3, [pc, #232]	; (906c <audio_midi_ctrl+0x18c>)
    8f84:	4798      	blx	r3
				desc->sod = ep;
    8f86:	602c      	str	r4, [r5, #0]
    8f88:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    8f8a:	6869      	ldr	r1, [r5, #4]
    8f8c:	4420      	add	r0, r4
    8f8e:	4b38      	ldr	r3, [pc, #224]	; (9070 <audio_midi_ctrl+0x190>)
    8f90:	4798      	blx	r3
    8f92:	4604      	mov	r4, r0
			while (NULL != ep) {
    8f94:	2c00      	cmp	r4, #0
    8f96:	d055      	beq.n	9044 <audio_midi_ctrl+0x164>
				ep_desc.bEndpointAddress = ep[2];
    8f98:	78a6      	ldrb	r6, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    8f9a:	7963      	ldrb	r3, [r4, #5]
    8f9c:	7922      	ldrb	r2, [r4, #4]
    8f9e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    8fa2:	b292      	uxth	r2, r2
    8fa4:	78e1      	ldrb	r1, [r4, #3]
    8fa6:	4630      	mov	r0, r6
    8fa8:	47d0      	blx	sl
    8faa:	2800      	cmp	r0, #0
    8fac:	d146      	bne.n	903c <audio_midi_ctrl+0x15c>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    8fae:	f016 0f80 	tst.w	r6, #128	; 0x80
    8fb2:	d1de      	bne.n	8f72 <audio_midi_ctrl+0x92>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    8fb4:	f889 6007 	strb.w	r6, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    8fb8:	4630      	mov	r0, r6
    8fba:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    8fbc:	4642      	mov	r2, r8
    8fbe:	2102      	movs	r1, #2
    8fc0:	f899 0007 	ldrb.w	r0, [r9, #7]
    8fc4:	4b29      	ldr	r3, [pc, #164]	; (906c <audio_midi_ctrl+0x18c>)
    8fc6:	4798      	blx	r3
    8fc8:	e7dd      	b.n	8f86 <audio_midi_ctrl+0xa6>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    8fca:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    8fcc:	b14a      	cbz	r2, 8fe2 <audio_midi_ctrl+0x102>
		ifc_desc.bInterfaceClass = desc->sod[5];
    8fce:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    8fd0:	795b      	ldrb	r3, [r3, #5]
    8fd2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8fd6:	2b01      	cmp	r3, #1
    8fd8:	d003      	beq.n	8fe2 <audio_midi_ctrl+0x102>
			return ERR_NOT_FOUND;
    8fda:	f06f 0009 	mvn.w	r0, #9
    8fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (func_data->func_iface[0] != 0xFF) {
    8fe2:	7923      	ldrb	r3, [r4, #4]
    8fe4:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    8fe6:	bf1c      	itt	ne
    8fe8:	23ff      	movne	r3, #255	; 0xff
    8fea:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    8fec:	7963      	ldrb	r3, [r4, #5]
    8fee:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    8ff0:	bf1c      	itt	ne
    8ff2:	23ff      	movne	r3, #255	; 0xff
    8ff4:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    8ff6:	79a0      	ldrb	r0, [r4, #6]
    8ff8:	28ff      	cmp	r0, #255	; 0xff
    8ffa:	d003      	beq.n	9004 <audio_midi_ctrl+0x124>
		usb_d_ep_deinit(func_data->func_ep_in);
    8ffc:	4b1d      	ldr	r3, [pc, #116]	; (9074 <audio_midi_ctrl+0x194>)
    8ffe:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    9000:	23ff      	movs	r3, #255	; 0xff
    9002:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    9004:	79e0      	ldrb	r0, [r4, #7]
    9006:	28ff      	cmp	r0, #255	; 0xff
    9008:	d003      	beq.n	9012 <audio_midi_ctrl+0x132>
		usb_d_ep_deinit(func_data->func_ep_out);
    900a:	4b1a      	ldr	r3, [pc, #104]	; (9074 <audio_midi_ctrl+0x194>)
    900c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    900e:	23ff      	movs	r3, #255	; 0xff
    9010:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    9012:	2000      	movs	r0, #0
    9014:	4b18      	ldr	r3, [pc, #96]	; (9078 <audio_midi_ctrl+0x198>)
    9016:	7358      	strb	r0, [r3, #13]
    9018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return ERR_NOT_FOUND;
    901c:	f06f 0009 	mvn.w	r0, #9
    9020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9024:	f06f 0009 	mvn.w	r0, #9
    9028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return ERR_ALREADY_INITIALIZED;
    902c:	f06f 0011 	mvn.w	r0, #17
    9030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return ERR_NO_RESOURCE;
    9034:	f06f 001b 	mvn.w	r0, #27
    9038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					return ERR_NOT_INITIALIZED;
    903c:	f06f 0013 	mvn.w	r0, #19
    9040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    9044:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    9046:	7818      	ldrb	r0, [r3, #0]
    9048:	2204      	movs	r2, #4
    904a:	6869      	ldr	r1, [r5, #4]
    904c:	4418      	add	r0, r3
    904e:	4b04      	ldr	r3, [pc, #16]	; (9060 <audio_midi_ctrl+0x180>)
    9050:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    9052:	2201      	movs	r2, #1
    9054:	4b08      	ldr	r3, [pc, #32]	; (9078 <audio_midi_ctrl+0x198>)
    9056:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    9058:	2000      	movs	r0, #0
    905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    905e:	bf00      	nop
    9060:	000097a5 	.word	0x000097a5
    9064:	00002261 	.word	0x00002261
    9068:	00008e4d 	.word	0x00008e4d
    906c:	00002435 	.word	0x00002435
    9070:	000097df 	.word	0x000097df
    9074:	00002235 	.word	0x00002235
    9078:	2000123c 	.word	0x2000123c
    907c:	000021cd 	.word	0x000021cd
    9080:	00008e4f 	.word	0x00008e4f

00009084 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    9084:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    9086:	4b0a      	ldr	r3, [pc, #40]	; (90b0 <audiodf_midi_init+0x2c>)
    9088:	4798      	blx	r3
    908a:	2801      	cmp	r0, #1
    908c:	d80c      	bhi.n	90a8 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    908e:	4809      	ldr	r0, [pc, #36]	; (90b4 <audiodf_midi_init+0x30>)
    9090:	4b09      	ldr	r3, [pc, #36]	; (90b8 <audiodf_midi_init+0x34>)
    9092:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    9094:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    9096:	3010      	adds	r0, #16
    9098:	4b08      	ldr	r3, [pc, #32]	; (90bc <audiodf_midi_init+0x38>)
    909a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    909c:	4908      	ldr	r1, [pc, #32]	; (90c0 <audiodf_midi_init+0x3c>)
    909e:	2001      	movs	r0, #1
    90a0:	4b08      	ldr	r3, [pc, #32]	; (90c4 <audiodf_midi_init+0x40>)
    90a2:	4798      	blx	r3
	return ERR_NONE;
    90a4:	2000      	movs	r0, #0
    90a6:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    90a8:	f06f 0010 	mvn.w	r0, #16
}
    90ac:	bd08      	pop	{r3, pc}
    90ae:	bf00      	nop
    90b0:	00009791 	.word	0x00009791
    90b4:	2000123c 	.word	0x2000123c
    90b8:	00008ee1 	.word	0x00008ee1
    90bc:	00009731 	.word	0x00009731
    90c0:	20000374 	.word	0x20000374
    90c4:	0000969d 	.word	0x0000969d

000090c8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    90c8:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    90ca:	4b07      	ldr	r3, [pc, #28]	; (90e8 <usbdc_unconfig+0x20>)
    90cc:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    90ce:	b14c      	cbz	r4, 90e4 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    90d0:	2600      	movs	r6, #0
    90d2:	2501      	movs	r5, #1
    90d4:	6863      	ldr	r3, [r4, #4]
    90d6:	4632      	mov	r2, r6
    90d8:	4629      	mov	r1, r5
    90da:	4620      	mov	r0, r4
    90dc:	4798      	blx	r3
		func = func->next;
    90de:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    90e0:	2c00      	cmp	r4, #0
    90e2:	d1f7      	bne.n	90d4 <usbdc_unconfig+0xc>
    90e4:	bd70      	pop	{r4, r5, r6, pc}
    90e6:	bf00      	nop
    90e8:	20001258 	.word	0x20001258

000090ec <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    90ec:	b570      	push	{r4, r5, r6, lr}
    90ee:	4606      	mov	r6, r0
    90f0:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    90f2:	4b07      	ldr	r3, [pc, #28]	; (9110 <usbdc_change_notify+0x24>)
    90f4:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    90f6:	b91c      	cbnz	r4, 9100 <usbdc_change_notify+0x14>
    90f8:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    90fa:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    90fc:	2c00      	cmp	r4, #0
    90fe:	d0fb      	beq.n	90f8 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    9100:	6863      	ldr	r3, [r4, #4]
    9102:	2b00      	cmp	r3, #0
    9104:	d0f9      	beq.n	90fa <usbdc_change_notify+0xe>
			cg->cb(change, value);
    9106:	4629      	mov	r1, r5
    9108:	4630      	mov	r0, r6
    910a:	4798      	blx	r3
    910c:	e7f5      	b.n	90fa <usbdc_change_notify+0xe>
    910e:	bf00      	nop
    9110:	20001258 	.word	0x20001258

00009114 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    9114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9116:	4607      	mov	r7, r0
    9118:	460e      	mov	r6, r1
    911a:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    911c:	4b0c      	ldr	r3, [pc, #48]	; (9150 <usbdc_request_handler+0x3c>)
    911e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    9120:	b91c      	cbnz	r4, 912a <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    9122:	2000      	movs	r0, #0
    9124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    9126:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    9128:	b16c      	cbz	r4, 9146 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    912a:	6863      	ldr	r3, [r4, #4]
    912c:	2b00      	cmp	r3, #0
    912e:	d0fa      	beq.n	9126 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    9130:	462a      	mov	r2, r5
    9132:	4631      	mov	r1, r6
    9134:	4638      	mov	r0, r7
    9136:	4798      	blx	r3
			if (0 == rc) {
    9138:	b138      	cbz	r0, 914a <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    913a:	f110 0f0a 	cmn.w	r0, #10
    913e:	d0f2      	beq.n	9126 <usbdc_request_handler+0x12>
				return -1;
    9140:	f04f 30ff 	mov.w	r0, #4294967295
}
    9144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    9146:	2000      	movs	r0, #0
    9148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    914a:	2001      	movs	r0, #1
    914c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    914e:	bf00      	nop
    9150:	20001258 	.word	0x20001258

00009154 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    9154:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    9156:	4b06      	ldr	r3, [pc, #24]	; (9170 <usbd_sof_cb+0x1c>)
    9158:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    915a:	b91c      	cbnz	r4, 9164 <usbd_sof_cb+0x10>
    915c:	bd10      	pop	{r4, pc}
		sof = sof->next;
    915e:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    9160:	2c00      	cmp	r4, #0
    9162:	d0fb      	beq.n	915c <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    9164:	6863      	ldr	r3, [r4, #4]
    9166:	2b00      	cmp	r3, #0
    9168:	d0f9      	beq.n	915e <usbd_sof_cb+0xa>
			sof->cb();
    916a:	4798      	blx	r3
    916c:	e7f7      	b.n	915e <usbd_sof_cb+0xa>
    916e:	bf00      	nop
    9170:	20001258 	.word	0x20001258

00009174 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    9174:	b510      	push	{r4, lr}
    9176:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    9178:	b119      	cbz	r1, 9182 <usbdc_cb_ctl_done+0xe>
    917a:	2901      	cmp	r1, #1
    917c:	d026      	beq.n	91cc <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    917e:	2000      	movs	r0, #0
    9180:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    9182:	7813      	ldrb	r3, [r2, #0]
    9184:	2b00      	cmp	r3, #0
    9186:	d1fa      	bne.n	917e <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    9188:	7853      	ldrb	r3, [r2, #1]
    918a:	2b05      	cmp	r3, #5
    918c:	d00f      	beq.n	91ae <usbdc_cb_ctl_done+0x3a>
    918e:	2b09      	cmp	r3, #9
    9190:	d1f5      	bne.n	917e <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    9192:	8852      	ldrh	r2, [r2, #2]
    9194:	4b10      	ldr	r3, [pc, #64]	; (91d8 <usbdc_cb_ctl_done+0x64>)
    9196:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    9198:	8863      	ldrh	r3, [r4, #2]
    919a:	2b00      	cmp	r3, #0
    919c:	bf14      	ite	ne
    919e:	2104      	movne	r1, #4
    91a0:	2103      	moveq	r1, #3
    91a2:	4b0d      	ldr	r3, [pc, #52]	; (91d8 <usbdc_cb_ctl_done+0x64>)
    91a4:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    91a6:	2001      	movs	r0, #1
    91a8:	4b0c      	ldr	r3, [pc, #48]	; (91dc <usbdc_cb_ctl_done+0x68>)
    91aa:	4798      	blx	r3
    91ac:	e7e7      	b.n	917e <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    91ae:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    91b0:	b2c0      	uxtb	r0, r0
    91b2:	4b0b      	ldr	r3, [pc, #44]	; (91e0 <usbdc_cb_ctl_done+0x6c>)
    91b4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    91b6:	8863      	ldrh	r3, [r4, #2]
    91b8:	2b00      	cmp	r3, #0
    91ba:	bf14      	ite	ne
    91bc:	2103      	movne	r1, #3
    91be:	2102      	moveq	r1, #2
    91c0:	4b05      	ldr	r3, [pc, #20]	; (91d8 <usbdc_cb_ctl_done+0x64>)
    91c2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    91c4:	2001      	movs	r0, #1
    91c6:	4b05      	ldr	r3, [pc, #20]	; (91dc <usbdc_cb_ctl_done+0x68>)
    91c8:	4798      	blx	r3
    91ca:	e7d8      	b.n	917e <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    91cc:	2201      	movs	r2, #1
    91ce:	4621      	mov	r1, r4
    91d0:	2000      	movs	r0, #0
    91d2:	4b04      	ldr	r3, [pc, #16]	; (91e4 <usbdc_cb_ctl_done+0x70>)
    91d4:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    91d6:	e7d2      	b.n	917e <usbdc_cb_ctl_done+0xa>
    91d8:	20001258 	.word	0x20001258
    91dc:	000090ed 	.word	0x000090ed
    91e0:	000021c1 	.word	0x000021c1
    91e4:	00009115 	.word	0x00009115

000091e8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    91e8:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    91ea:	4b0d      	ldr	r3, [pc, #52]	; (9220 <usbdc_reset+0x38>)
    91ec:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    91ee:	4d0d      	ldr	r5, [pc, #52]	; (9224 <usbdc_reset+0x3c>)
    91f0:	2602      	movs	r6, #2
    91f2:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    91f4:	2400      	movs	r4, #0
    91f6:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    91f8:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    91fa:	4620      	mov	r0, r4
    91fc:	4b0a      	ldr	r3, [pc, #40]	; (9228 <usbdc_reset+0x40>)
    91fe:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    9200:	7f28      	ldrb	r0, [r5, #28]
    9202:	4b0a      	ldr	r3, [pc, #40]	; (922c <usbdc_reset+0x44>)
    9204:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    9206:	4a0a      	ldr	r2, [pc, #40]	; (9230 <usbdc_reset+0x48>)
    9208:	4621      	mov	r1, r4
    920a:	4620      	mov	r0, r4
    920c:	4d09      	ldr	r5, [pc, #36]	; (9234 <usbdc_reset+0x4c>)
    920e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    9210:	4a09      	ldr	r2, [pc, #36]	; (9238 <usbdc_reset+0x50>)
    9212:	4631      	mov	r1, r6
    9214:	4620      	mov	r0, r4
    9216:	47a8      	blx	r5
	usb_d_ep_enable(0);
    9218:	4620      	mov	r0, r4
    921a:	4b08      	ldr	r3, [pc, #32]	; (923c <usbdc_reset+0x54>)
    921c:	4798      	blx	r3
    921e:	bd70      	pop	{r4, r5, r6, pc}
    9220:	000090c9 	.word	0x000090c9
    9224:	20001258 	.word	0x20001258
    9228:	00002235 	.word	0x00002235
    922c:	00002221 	.word	0x00002221
    9230:	00009281 	.word	0x00009281
    9234:	00002435 	.word	0x00002435
    9238:	00009175 	.word	0x00009175
    923c:	00002261 	.word	0x00002261

00009240 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    9240:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    9242:	b110      	cbz	r0, 924a <usbd_event_cb+0xa>
    9244:	2801      	cmp	r0, #1
    9246:	d004      	beq.n	9252 <usbd_event_cb+0x12>
    9248:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    924a:	2000      	movs	r0, #0
    924c:	4b02      	ldr	r3, [pc, #8]	; (9258 <usbd_event_cb+0x18>)
    924e:	4798      	blx	r3
		break;
    9250:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    9252:	4b02      	ldr	r3, [pc, #8]	; (925c <usbd_event_cb+0x1c>)
    9254:	4798      	blx	r3
    9256:	bd08      	pop	{r3, pc}
    9258:	000090ed 	.word	0x000090ed
    925c:	000091e9 	.word	0x000091e9

00009260 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    9260:	b500      	push	{lr}
    9262:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    9264:	9101      	str	r1, [sp, #4]
    9266:	9202      	str	r2, [sp, #8]
    9268:	f88d 000c 	strb.w	r0, [sp, #12]
    926c:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    9270:	a801      	add	r0, sp, #4
    9272:	4b02      	ldr	r3, [pc, #8]	; (927c <usbdc_xfer+0x1c>)
    9274:	4798      	blx	r3
}
    9276:	b005      	add	sp, #20
    9278:	f85d fb04 	ldr.w	pc, [sp], #4
    927c:	000022ad 	.word	0x000022ad

00009280 <usbdc_cb_ctl_req>:
{
    9280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9284:	b083      	sub	sp, #12
    9286:	4605      	mov	r5, r0
    9288:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    928a:	2200      	movs	r2, #0
    928c:	4b9b      	ldr	r3, [pc, #620]	; (94fc <usbdc_cb_ctl_req+0x27c>)
    928e:	4798      	blx	r3
    9290:	f1b0 3fff 	cmp.w	r0, #4294967295
    9294:	d00b      	beq.n	92ae <usbdc_cb_ctl_req+0x2e>
    9296:	2801      	cmp	r0, #1
    9298:	f000 81e3 	beq.w	9662 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    929c:	7823      	ldrb	r3, [r4, #0]
    929e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    92a2:	d008      	beq.n	92b6 <usbdc_cb_ctl_req+0x36>
    92a4:	2a80      	cmp	r2, #128	; 0x80
    92a6:	f000 80f4 	beq.w	9492 <usbdc_cb_ctl_req+0x212>
		return false;
    92aa:	2000      	movs	r0, #0
    92ac:	e000      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    92ae:	2000      	movs	r0, #0
}
    92b0:	b003      	add	sp, #12
    92b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    92b6:	7862      	ldrb	r2, [r4, #1]
    92b8:	3a01      	subs	r2, #1
    92ba:	2a0a      	cmp	r2, #10
    92bc:	f200 81d3 	bhi.w	9666 <usbdc_cb_ctl_req+0x3e6>
    92c0:	e8df f012 	tbh	[pc, r2, lsl #1]
    92c4:	01d10060 	.word	0x01d10060
    92c8:	01d10076 	.word	0x01d10076
    92cc:	01d1000b 	.word	0x01d1000b
    92d0:	01d101d1 	.word	0x01d101d1
    92d4:	01d10015 	.word	0x01d10015
    92d8:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    92da:	2301      	movs	r3, #1
    92dc:	2200      	movs	r2, #0
    92de:	4611      	mov	r1, r2
    92e0:	4628      	mov	r0, r5
    92e2:	4c87      	ldr	r4, [pc, #540]	; (9500 <usbdc_cb_ctl_req+0x280>)
    92e4:	47a0      	blx	r4
    92e6:	fab0 f080 	clz	r0, r0
    92ea:	0940      	lsrs	r0, r0, #5
    92ec:	e7e0      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    92ee:	8862      	ldrh	r2, [r4, #2]
    92f0:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    92f2:	b1ca      	cbz	r2, 9328 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    92f4:	4b83      	ldr	r3, [pc, #524]	; (9504 <usbdc_cb_ctl_req+0x284>)
    92f6:	681b      	ldr	r3, [r3, #0]
    92f8:	6859      	ldr	r1, [r3, #4]
    92fa:	6818      	ldr	r0, [r3, #0]
    92fc:	4b82      	ldr	r3, [pc, #520]	; (9508 <usbdc_cb_ctl_req+0x288>)
    92fe:	4798      	blx	r3
	if (NULL == cfg_desc) {
    9300:	2800      	cmp	r0, #0
    9302:	f000 81be 	beq.w	9682 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    9306:	78c2      	ldrb	r2, [r0, #3]
    9308:	7881      	ldrb	r1, [r0, #2]
    930a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    930e:	fa10 f181 	uxtah	r1, r0, r1
    9312:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    9314:	2204      	movs	r2, #4
    9316:	4b7d      	ldr	r3, [pc, #500]	; (950c <usbdc_cb_ctl_req+0x28c>)
    9318:	4798      	blx	r3
    931a:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    931c:	b130      	cbz	r0, 932c <usbdc_cb_ctl_req+0xac>
    931e:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    9320:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 9504 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    9324:	4f79      	ldr	r7, [pc, #484]	; (950c <usbdc_cb_ctl_req+0x28c>)
    9326:	e018      	b.n	935a <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    9328:	4b79      	ldr	r3, [pc, #484]	; (9510 <usbdc_cb_ctl_req+0x290>)
    932a:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    932c:	2301      	movs	r3, #1
    932e:	2200      	movs	r2, #0
    9330:	4611      	mov	r1, r2
    9332:	4628      	mov	r0, r5
    9334:	4c72      	ldr	r4, [pc, #456]	; (9500 <usbdc_cb_ctl_req+0x280>)
    9336:	47a0      	blx	r4
    9338:	fab0 f080 	clz	r0, r0
    933c:	0940      	lsrs	r0, r0, #5
    933e:	e7b7      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    9340:	464c      	mov	r4, r9
    9342:	e000      	b.n	9346 <usbdc_cb_ctl_req+0xc6>
    9344:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    9346:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    9348:	7803      	ldrb	r3, [r0, #0]
    934a:	4418      	add	r0, r3
    934c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    934e:	2204      	movs	r2, #4
    9350:	9901      	ldr	r1, [sp, #4]
    9352:	47b8      	blx	r7
    9354:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    9356:	2800      	cmp	r0, #0
    9358:	d0e8      	beq.n	932c <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    935a:	f890 9002 	ldrb.w	r9, [r0, #2]
    935e:	45a1      	cmp	r9, r4
    9360:	d0f1      	beq.n	9346 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    9362:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    9366:	2c00      	cmp	r4, #0
    9368:	d0ea      	beq.n	9340 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    936a:	2600      	movs	r6, #0
    936c:	6863      	ldr	r3, [r4, #4]
    936e:	466a      	mov	r2, sp
    9370:	4631      	mov	r1, r6
    9372:	4620      	mov	r0, r4
    9374:	4798      	blx	r3
    9376:	2800      	cmp	r0, #0
    9378:	d0e4      	beq.n	9344 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    937a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    937c:	2c00      	cmp	r4, #0
    937e:	d1f5      	bne.n	936c <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    9380:	464c      	mov	r4, r9
    9382:	e7e0      	b.n	9346 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    9384:	f003 031f 	and.w	r3, r3, #31
    9388:	2b02      	cmp	r3, #2
    938a:	f040 816e 	bne.w	966a <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    938e:	88e3      	ldrh	r3, [r4, #6]
    9390:	b10b      	cbz	r3, 9396 <usbdc_cb_ctl_req+0x116>
			return false;
    9392:	2000      	movs	r0, #0
    9394:	e78c      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    9396:	88a0      	ldrh	r0, [r4, #4]
    9398:	2100      	movs	r1, #0
    939a:	b2c0      	uxtb	r0, r0
    939c:	4b5d      	ldr	r3, [pc, #372]	; (9514 <usbdc_cb_ctl_req+0x294>)
    939e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    93a0:	2301      	movs	r3, #1
    93a2:	2200      	movs	r2, #0
    93a4:	4611      	mov	r1, r2
    93a6:	4628      	mov	r0, r5
    93a8:	4c55      	ldr	r4, [pc, #340]	; (9500 <usbdc_cb_ctl_req+0x280>)
    93aa:	47a0      	blx	r4
		return true;
    93ac:	2001      	movs	r0, #1
    93ae:	e77f      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    93b0:	f003 031f 	and.w	r3, r3, #31
    93b4:	2b02      	cmp	r3, #2
    93b6:	f040 815a 	bne.w	966e <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    93ba:	88e3      	ldrh	r3, [r4, #6]
    93bc:	b10b      	cbz	r3, 93c2 <usbdc_cb_ctl_req+0x142>
			return false;
    93be:	2000      	movs	r0, #0
    93c0:	e776      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    93c2:	88a0      	ldrh	r0, [r4, #4]
    93c4:	2101      	movs	r1, #1
    93c6:	b2c0      	uxtb	r0, r0
    93c8:	4b52      	ldr	r3, [pc, #328]	; (9514 <usbdc_cb_ctl_req+0x294>)
    93ca:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    93cc:	2301      	movs	r3, #1
    93ce:	2200      	movs	r2, #0
    93d0:	4611      	mov	r1, r2
    93d2:	4628      	mov	r0, r5
    93d4:	4c4a      	ldr	r4, [pc, #296]	; (9500 <usbdc_cb_ctl_req+0x280>)
    93d6:	47a0      	blx	r4
		return true;
    93d8:	2001      	movs	r0, #1
    93da:	e769      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    93dc:	8866      	ldrh	r6, [r4, #2]
    93de:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    93e0:	4a48      	ldr	r2, [pc, #288]	; (9504 <usbdc_cb_ctl_req+0x284>)
    93e2:	6813      	ldr	r3, [r2, #0]
    93e4:	7ed2      	ldrb	r2, [r2, #27]
    93e6:	6859      	ldr	r1, [r3, #4]
    93e8:	6818      	ldr	r0, [r3, #0]
    93ea:	4b47      	ldr	r3, [pc, #284]	; (9508 <usbdc_cb_ctl_req+0x288>)
    93ec:	4798      	blx	r3
	if (NULL == ifc) {
    93ee:	2800      	cmp	r0, #0
    93f0:	d045      	beq.n	947e <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    93f2:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    93f4:	78c2      	ldrb	r2, [r0, #3]
    93f6:	7881      	ldrb	r1, [r0, #2]
    93f8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    93fc:	fa10 f181 	uxtah	r1, r0, r1
    9400:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    9402:	2204      	movs	r2, #4
    9404:	4b41      	ldr	r3, [pc, #260]	; (950c <usbdc_cb_ctl_req+0x28c>)
    9406:	4798      	blx	r3
    9408:	4603      	mov	r3, r0
    940a:	2800      	cmp	r0, #0
    940c:	d039      	beq.n	9482 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    940e:	2704      	movs	r7, #4
    9410:	4d3e      	ldr	r5, [pc, #248]	; (950c <usbdc_cb_ctl_req+0x28c>)
    9412:	e008      	b.n	9426 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    9414:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    9416:	7803      	ldrb	r3, [r0, #0]
    9418:	4418      	add	r0, r3
    941a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    941c:	463a      	mov	r2, r7
    941e:	9901      	ldr	r1, [sp, #4]
    9420:	47a8      	blx	r5
		if (NULL == ifc) {
    9422:	4603      	mov	r3, r0
    9424:	b378      	cbz	r0, 9486 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    9426:	789a      	ldrb	r2, [r3, #2]
    9428:	42a2      	cmp	r2, r4
    942a:	d1f3      	bne.n	9414 <usbdc_cb_ctl_req+0x194>
    942c:	78da      	ldrb	r2, [r3, #3]
    942e:	42b2      	cmp	r2, r6
    9430:	d1f0      	bne.n	9414 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    9432:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    9434:	4b33      	ldr	r3, [pc, #204]	; (9504 <usbdc_cb_ctl_req+0x284>)
    9436:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    9438:	b33d      	cbz	r5, 948a <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    943a:	2701      	movs	r7, #1
    943c:	686b      	ldr	r3, [r5, #4]
    943e:	466a      	mov	r2, sp
    9440:	4639      	mov	r1, r7
    9442:	4628      	mov	r0, r5
    9444:	4798      	blx	r3
    9446:	b120      	cbz	r0, 9452 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    9448:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    944a:	2d00      	cmp	r5, #0
    944c:	d1f6      	bne.n	943c <usbdc_cb_ctl_req+0x1bc>
	return false;
    944e:	2000      	movs	r0, #0
    9450:	e72e      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    9452:	686b      	ldr	r3, [r5, #4]
    9454:	466a      	mov	r2, sp
    9456:	2100      	movs	r1, #0
    9458:	4628      	mov	r0, r5
    945a:	4798      	blx	r3
    945c:	b9b8      	cbnz	r0, 948e <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    945e:	b136      	cbz	r6, 946e <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    9460:	4a28      	ldr	r2, [pc, #160]	; (9504 <usbdc_cb_ctl_req+0x284>)
    9462:	2301      	movs	r3, #1
    9464:	fa03 f404 	lsl.w	r4, r3, r4
    9468:	7f53      	ldrb	r3, [r2, #29]
    946a:	4323      	orrs	r3, r4
    946c:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    946e:	2300      	movs	r3, #0
    9470:	461a      	mov	r2, r3
    9472:	4619      	mov	r1, r3
    9474:	4618      	mov	r0, r3
    9476:	4c22      	ldr	r4, [pc, #136]	; (9500 <usbdc_cb_ctl_req+0x280>)
    9478:	47a0      	blx	r4
			return true;
    947a:	2001      	movs	r0, #1
    947c:	e718      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    947e:	2000      	movs	r0, #0
    9480:	e716      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    9482:	2000      	movs	r0, #0
    9484:	e714      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
			return false;
    9486:	2000      	movs	r0, #0
    9488:	e712      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
	return false;
    948a:	2000      	movs	r0, #0
    948c:	e710      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
			return false;
    948e:	2000      	movs	r0, #0
    9490:	e70e      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    9492:	7862      	ldrb	r2, [r4, #1]
    9494:	2a0a      	cmp	r2, #10
    9496:	f200 80ec 	bhi.w	9672 <usbdc_cb_ctl_req+0x3f2>
    949a:	e8df f012 	tbh	[pc, r2, lsl #1]
    949e:	008e      	.short	0x008e
    94a0:	00ea00ea 	.word	0x00ea00ea
    94a4:	00ea00ea 	.word	0x00ea00ea
    94a8:	000b00ea 	.word	0x000b00ea
    94ac:	008200ea 	.word	0x008200ea
    94b0:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    94b4:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    94b6:	0a13      	lsrs	r3, r2, #8
    94b8:	2b02      	cmp	r3, #2
    94ba:	d02d      	beq.n	9518 <usbdc_cb_ctl_req+0x298>
    94bc:	2b03      	cmp	r3, #3
    94be:	d050      	beq.n	9562 <usbdc_cb_ctl_req+0x2e2>
    94c0:	2b01      	cmp	r3, #1
    94c2:	d001      	beq.n	94c8 <usbdc_cb_ctl_req+0x248>
	return false;
    94c4:	2000      	movs	r0, #0
    94c6:	e6f3      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    94c8:	88e2      	ldrh	r2, [r4, #6]
    94ca:	2a12      	cmp	r2, #18
    94cc:	bf28      	it	cs
    94ce:	2212      	movcs	r2, #18
    94d0:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    94d2:	4b0c      	ldr	r3, [pc, #48]	; (9504 <usbdc_cb_ctl_req+0x284>)
    94d4:	681b      	ldr	r3, [r3, #0]
    94d6:	2201      	movs	r2, #1
    94d8:	6859      	ldr	r1, [r3, #4]
    94da:	6818      	ldr	r0, [r3, #0]
    94dc:	4b0b      	ldr	r3, [pc, #44]	; (950c <usbdc_cb_ctl_req+0x28c>)
    94de:	4798      	blx	r3
	if (!dev_desc) {
    94e0:	4601      	mov	r1, r0
    94e2:	2800      	cmp	r0, #0
    94e4:	f000 80c7 	beq.w	9676 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    94e8:	2300      	movs	r3, #0
    94ea:	4622      	mov	r2, r4
    94ec:	4628      	mov	r0, r5
    94ee:	4c04      	ldr	r4, [pc, #16]	; (9500 <usbdc_cb_ctl_req+0x280>)
    94f0:	47a0      	blx	r4
    94f2:	fab0 f080 	clz	r0, r0
    94f6:	0940      	lsrs	r0, r0, #5
    94f8:	e6da      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
    94fa:	bf00      	nop
    94fc:	00009115 	.word	0x00009115
    9500:	00009261 	.word	0x00009261
    9504:	20001258 	.word	0x20001258
    9508:	00009825 	.word	0x00009825
    950c:	000097a5 	.word	0x000097a5
    9510:	000090c9 	.word	0x000090c9
    9514:	000023cd 	.word	0x000023cd
	uint16_t length   = req->wLength;
    9518:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    951a:	4b5b      	ldr	r3, [pc, #364]	; (9688 <usbdc_cb_ctl_req+0x408>)
    951c:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    951e:	681b      	ldr	r3, [r3, #0]
    9520:	3201      	adds	r2, #1
    9522:	b2d2      	uxtb	r2, r2
    9524:	6859      	ldr	r1, [r3, #4]
    9526:	6818      	ldr	r0, [r3, #0]
    9528:	4b58      	ldr	r3, [pc, #352]	; (968c <usbdc_cb_ctl_req+0x40c>)
    952a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    952c:	4601      	mov	r1, r0
    952e:	2800      	cmp	r0, #0
    9530:	f000 80a3 	beq.w	967a <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    9534:	78c3      	ldrb	r3, [r0, #3]
    9536:	7882      	ldrb	r2, [r0, #2]
    9538:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    953c:	b292      	uxth	r2, r2
	if (length <= total_len) {
    953e:	4294      	cmp	r4, r2
    9540:	d90d      	bls.n	955e <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    9542:	3e01      	subs	r6, #1
    9544:	4226      	tst	r6, r4
    9546:	bf0c      	ite	eq
    9548:	2301      	moveq	r3, #1
    954a:	2300      	movne	r3, #0
		length = total_len;
    954c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    954e:	4622      	mov	r2, r4
    9550:	4628      	mov	r0, r5
    9552:	4c4f      	ldr	r4, [pc, #316]	; (9690 <usbdc_cb_ctl_req+0x410>)
    9554:	47a0      	blx	r4
    9556:	fab0 f080 	clz	r0, r0
    955a:	0940      	lsrs	r0, r0, #5
    955c:	e6a8      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    955e:	2300      	movs	r3, #0
    9560:	e7f5      	b.n	954e <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    9562:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    9564:	4b48      	ldr	r3, [pc, #288]	; (9688 <usbdc_cb_ctl_req+0x408>)
    9566:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    9568:	681b      	ldr	r3, [r3, #0]
    956a:	b2d2      	uxtb	r2, r2
    956c:	6859      	ldr	r1, [r3, #4]
    956e:	6818      	ldr	r0, [r3, #0]
    9570:	4b48      	ldr	r3, [pc, #288]	; (9694 <usbdc_cb_ctl_req+0x414>)
    9572:	4798      	blx	r3
	if (NULL == str_desc) {
    9574:	4601      	mov	r1, r0
    9576:	2800      	cmp	r0, #0
    9578:	f000 8081 	beq.w	967e <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    957c:	7802      	ldrb	r2, [r0, #0]
    957e:	4294      	cmp	r4, r2
    9580:	d90d      	bls.n	959e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    9582:	3e01      	subs	r6, #1
    9584:	4226      	tst	r6, r4
    9586:	bf0c      	ite	eq
    9588:	2301      	moveq	r3, #1
    958a:	2300      	movne	r3, #0
		length = str_desc[0];
    958c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    958e:	4622      	mov	r2, r4
    9590:	4628      	mov	r0, r5
    9592:	4c3f      	ldr	r4, [pc, #252]	; (9690 <usbdc_cb_ctl_req+0x410>)
    9594:	47a0      	blx	r4
    9596:	fab0 f080 	clz	r0, r0
    959a:	0940      	lsrs	r0, r0, #5
    959c:	e688      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    959e:	2300      	movs	r3, #0
    95a0:	e7f5      	b.n	958e <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    95a2:	4939      	ldr	r1, [pc, #228]	; (9688 <usbdc_cb_ctl_req+0x408>)
    95a4:	694b      	ldr	r3, [r1, #20]
    95a6:	7eca      	ldrb	r2, [r1, #27]
    95a8:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    95aa:	2300      	movs	r3, #0
    95ac:	2201      	movs	r2, #1
    95ae:	6949      	ldr	r1, [r1, #20]
    95b0:	4628      	mov	r0, r5
    95b2:	4c37      	ldr	r4, [pc, #220]	; (9690 <usbdc_cb_ctl_req+0x410>)
    95b4:	47a0      	blx	r4
		return true;
    95b6:	2001      	movs	r0, #1
    95b8:	e67a      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    95ba:	f003 031f 	and.w	r3, r3, #31
    95be:	2b01      	cmp	r3, #1
    95c0:	d903      	bls.n	95ca <usbdc_cb_ctl_req+0x34a>
    95c2:	2b02      	cmp	r3, #2
    95c4:	d010      	beq.n	95e8 <usbdc_cb_ctl_req+0x368>
		return false;
    95c6:	2000      	movs	r0, #0
    95c8:	e672      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		st = 0;
    95ca:	2300      	movs	r3, #0
    95cc:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    95ce:	492e      	ldr	r1, [pc, #184]	; (9688 <usbdc_cb_ctl_req+0x408>)
    95d0:	694b      	ldr	r3, [r1, #20]
    95d2:	f8bd 2000 	ldrh.w	r2, [sp]
    95d6:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    95d8:	2300      	movs	r3, #0
    95da:	2202      	movs	r2, #2
    95dc:	6949      	ldr	r1, [r1, #20]
    95de:	4628      	mov	r0, r5
    95e0:	4c2b      	ldr	r4, [pc, #172]	; (9690 <usbdc_cb_ctl_req+0x410>)
    95e2:	47a0      	blx	r4
	return true;
    95e4:	2001      	movs	r0, #1
    95e6:	e663      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    95e8:	88a0      	ldrh	r0, [r4, #4]
    95ea:	2102      	movs	r1, #2
    95ec:	b2c0      	uxtb	r0, r0
    95ee:	4b2a      	ldr	r3, [pc, #168]	; (9698 <usbdc_cb_ctl_req+0x418>)
    95f0:	4798      	blx	r3
		if (st < 0) {
    95f2:	2800      	cmp	r0, #0
    95f4:	db03      	blt.n	95fe <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    95f6:	f000 0001 	and.w	r0, r0, #1
    95fa:	9000      	str	r0, [sp, #0]
    95fc:	e7e7      	b.n	95ce <usbdc_cb_ctl_req+0x34e>
			return false;
    95fe:	2000      	movs	r0, #0
    9600:	e656      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    9602:	4b21      	ldr	r3, [pc, #132]	; (9688 <usbdc_cb_ctl_req+0x408>)
    9604:	7f5b      	ldrb	r3, [r3, #29]
    9606:	88a2      	ldrh	r2, [r4, #4]
    9608:	4113      	asrs	r3, r2
    960a:	f013 0f01 	tst.w	r3, #1
    960e:	d012      	beq.n	9636 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    9610:	4b1d      	ldr	r3, [pc, #116]	; (9688 <usbdc_cb_ctl_req+0x408>)
    9612:	691d      	ldr	r5, [r3, #16]
	return false;
    9614:	2000      	movs	r0, #0
	while (NULL != func) {
    9616:	2d00      	cmp	r5, #0
    9618:	f43f ae4a 	beq.w	92b0 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    961c:	2602      	movs	r6, #2
    961e:	686b      	ldr	r3, [r5, #4]
    9620:	4622      	mov	r2, r4
    9622:	4631      	mov	r1, r6
    9624:	4628      	mov	r0, r5
    9626:	4798      	blx	r3
    9628:	2800      	cmp	r0, #0
    962a:	da0f      	bge.n	964c <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    962c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    962e:	2d00      	cmp	r5, #0
    9630:	d1f5      	bne.n	961e <usbdc_cb_ctl_req+0x39e>
	return false;
    9632:	2000      	movs	r0, #0
    9634:	e63c      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    9636:	4914      	ldr	r1, [pc, #80]	; (9688 <usbdc_cb_ctl_req+0x408>)
    9638:	694b      	ldr	r3, [r1, #20]
    963a:	2000      	movs	r0, #0
    963c:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    963e:	4603      	mov	r3, r0
    9640:	2201      	movs	r2, #1
    9642:	6949      	ldr	r1, [r1, #20]
    9644:	4c12      	ldr	r4, [pc, #72]	; (9690 <usbdc_cb_ctl_req+0x410>)
    9646:	47a0      	blx	r4
		return true;
    9648:	2001      	movs	r0, #1
    964a:	e631      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    964c:	490e      	ldr	r1, [pc, #56]	; (9688 <usbdc_cb_ctl_req+0x408>)
    964e:	694b      	ldr	r3, [r1, #20]
    9650:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    9652:	2300      	movs	r3, #0
    9654:	2201      	movs	r2, #1
    9656:	6949      	ldr	r1, [r1, #20]
    9658:	4618      	mov	r0, r3
    965a:	4c0d      	ldr	r4, [pc, #52]	; (9690 <usbdc_cb_ctl_req+0x410>)
    965c:	47a0      	blx	r4
			return true;
    965e:	2001      	movs	r0, #1
    9660:	e626      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return true;
    9662:	2001      	movs	r0, #1
    9664:	e624      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    9666:	2000      	movs	r0, #0
    9668:	e622      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    966a:	2000      	movs	r0, #0
    966c:	e620      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    966e:	2000      	movs	r0, #0
    9670:	e61e      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    9672:	2000      	movs	r0, #0
    9674:	e61c      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    9676:	2000      	movs	r0, #0
    9678:	e61a      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    967a:	2000      	movs	r0, #0
    967c:	e618      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
		return false;
    967e:	2000      	movs	r0, #0
    9680:	e616      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
			return false;
    9682:	2000      	movs	r0, #0
    9684:	e614      	b.n	92b0 <usbdc_cb_ctl_req+0x30>
    9686:	bf00      	nop
    9688:	20001258 	.word	0x20001258
    968c:	00009825 	.word	0x00009825
    9690:	00009261 	.word	0x00009261
    9694:	0000988d 	.word	0x0000988d
    9698:	000023cd 	.word	0x000023cd

0000969c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    969c:	b508      	push	{r3, lr}
	switch (type) {
    969e:	2801      	cmp	r0, #1
    96a0:	d007      	beq.n	96b2 <usbdc_register_handler+0x16>
    96a2:	b110      	cbz	r0, 96aa <usbdc_register_handler+0xe>
    96a4:	2802      	cmp	r0, #2
    96a6:	d008      	beq.n	96ba <usbdc_register_handler+0x1e>
    96a8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    96aa:	4806      	ldr	r0, [pc, #24]	; (96c4 <usbdc_register_handler+0x28>)
    96ac:	4b06      	ldr	r3, [pc, #24]	; (96c8 <usbdc_register_handler+0x2c>)
    96ae:	4798      	blx	r3
		break;
    96b0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    96b2:	4806      	ldr	r0, [pc, #24]	; (96cc <usbdc_register_handler+0x30>)
    96b4:	4b04      	ldr	r3, [pc, #16]	; (96c8 <usbdc_register_handler+0x2c>)
    96b6:	4798      	blx	r3
		break;
    96b8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    96ba:	4805      	ldr	r0, [pc, #20]	; (96d0 <usbdc_register_handler+0x34>)
    96bc:	4b02      	ldr	r3, [pc, #8]	; (96c8 <usbdc_register_handler+0x2c>)
    96be:	4798      	blx	r3
    96c0:	bd08      	pop	{r3, pc}
    96c2:	bf00      	nop
    96c4:	2000125c 	.word	0x2000125c
    96c8:	000024dd 	.word	0x000024dd
    96cc:	20001260 	.word	0x20001260
    96d0:	20001264 	.word	0x20001264

000096d4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    96d4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    96d6:	4605      	mov	r5, r0
    96d8:	f240 3255 	movw	r2, #853	; 0x355
    96dc:	490c      	ldr	r1, [pc, #48]	; (9710 <usbdc_init+0x3c>)
    96de:	3000      	adds	r0, #0
    96e0:	bf18      	it	ne
    96e2:	2001      	movne	r0, #1
    96e4:	4b0b      	ldr	r3, [pc, #44]	; (9714 <usbdc_init+0x40>)
    96e6:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    96e8:	4b0b      	ldr	r3, [pc, #44]	; (9718 <usbdc_init+0x44>)
    96ea:	4798      	blx	r3
	if (rc < 0) {
    96ec:	2800      	cmp	r0, #0
    96ee:	db0e      	blt.n	970e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    96f0:	4c0a      	ldr	r4, [pc, #40]	; (971c <usbdc_init+0x48>)
    96f2:	2220      	movs	r2, #32
    96f4:	2100      	movs	r1, #0
    96f6:	4620      	mov	r0, r4
    96f8:	4b09      	ldr	r3, [pc, #36]	; (9720 <usbdc_init+0x4c>)
    96fa:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    96fc:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    96fe:	4909      	ldr	r1, [pc, #36]	; (9724 <usbdc_init+0x50>)
    9700:	2000      	movs	r0, #0
    9702:	4c09      	ldr	r4, [pc, #36]	; (9728 <usbdc_init+0x54>)
    9704:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    9706:	4909      	ldr	r1, [pc, #36]	; (972c <usbdc_init+0x58>)
    9708:	2001      	movs	r0, #1
    970a:	47a0      	blx	r4

	return 0;
    970c:	2000      	movs	r0, #0
}
    970e:	bd38      	pop	{r3, r4, r5, pc}
    9710:	0000b2e8 	.word	0x0000b2e8
    9714:	00002481 	.word	0x00002481
    9718:	00002135 	.word	0x00002135
    971c:	20001258 	.word	0x20001258
    9720:	0000a273 	.word	0x0000a273
    9724:	00009155 	.word	0x00009155
    9728:	0000219d 	.word	0x0000219d
    972c:	00009241 	.word	0x00009241

00009730 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    9730:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    9732:	4601      	mov	r1, r0
    9734:	4801      	ldr	r0, [pc, #4]	; (973c <usbdc_register_function+0xc>)
    9736:	4b02      	ldr	r3, [pc, #8]	; (9740 <usbdc_register_function+0x10>)
    9738:	4798      	blx	r3
    973a:	bd08      	pop	{r3, pc}
    973c:	20001268 	.word	0x20001268
    9740:	000024dd 	.word	0x000024dd

00009744 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    9744:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    9746:	4b0a      	ldr	r3, [pc, #40]	; (9770 <usbdc_start+0x2c>)
    9748:	7e9b      	ldrb	r3, [r3, #26]
    974a:	b95b      	cbnz	r3, 9764 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    974c:	b168      	cbz	r0, 976a <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    974e:	4b08      	ldr	r3, [pc, #32]	; (9770 <usbdc_start+0x2c>)
    9750:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    9752:	6802      	ldr	r2, [r0, #0]
    9754:	79d2      	ldrb	r2, [r2, #7]
    9756:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    9758:	2201      	movs	r2, #1
    975a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    975c:	4b05      	ldr	r3, [pc, #20]	; (9774 <usbdc_start+0x30>)
    975e:	4798      	blx	r3
	return ERR_NONE;
    9760:	2000      	movs	r0, #0
    9762:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    9764:	f06f 0003 	mvn.w	r0, #3
    9768:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    976a:	f06f 0008 	mvn.w	r0, #8
}
    976e:	bd08      	pop	{r3, pc}
    9770:	20001258 	.word	0x20001258
    9774:	000021a9 	.word	0x000021a9

00009778 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    9778:	b508      	push	{r3, lr}
	usb_d_attach();
    977a:	4b01      	ldr	r3, [pc, #4]	; (9780 <usbdc_attach+0x8>)
    977c:	4798      	blx	r3
    977e:	bd08      	pop	{r3, pc}
    9780:	000021b5 	.word	0x000021b5

00009784 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    9784:	4b01      	ldr	r3, [pc, #4]	; (978c <usbdc_get_ctrl_buffer+0x8>)
    9786:	6958      	ldr	r0, [r3, #20]
    9788:	4770      	bx	lr
    978a:	bf00      	nop
    978c:	20001258 	.word	0x20001258

00009790 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    9790:	4b03      	ldr	r3, [pc, #12]	; (97a0 <usbdc_get_state+0x10>)
    9792:	7e98      	ldrb	r0, [r3, #26]
    9794:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    9798:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    979a:	bf18      	it	ne
    979c:	2010      	movne	r0, #16
    979e:	4770      	bx	lr
    97a0:	20001258 	.word	0x20001258

000097a4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    97a4:	4288      	cmp	r0, r1
    97a6:	d214      	bcs.n	97d2 <usb_find_desc+0x2e>
	return desc[0];
    97a8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    97aa:	2b01      	cmp	r3, #1
    97ac:	d913      	bls.n	97d6 <usb_find_desc+0x32>
{
    97ae:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    97b0:	7844      	ldrb	r4, [r0, #1]
    97b2:	4294      	cmp	r4, r2
    97b4:	d00a      	beq.n	97cc <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    97b6:	4418      	add	r0, r3
	while (desc < eof) {
    97b8:	4281      	cmp	r1, r0
    97ba:	d906      	bls.n	97ca <usb_find_desc+0x26>
	return desc[0];
    97bc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    97be:	2b01      	cmp	r3, #1
    97c0:	d90b      	bls.n	97da <usb_find_desc+0x36>
	return desc[1];
    97c2:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    97c4:	4294      	cmp	r4, r2
    97c6:	d1f6      	bne.n	97b6 <usb_find_desc+0x12>
    97c8:	e000      	b.n	97cc <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    97ca:	2000      	movs	r0, #0
}
    97cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    97d0:	4770      	bx	lr
	return NULL;
    97d2:	2000      	movs	r0, #0
    97d4:	4770      	bx	lr
		_desc_len_check();
    97d6:	2000      	movs	r0, #0
    97d8:	4770      	bx	lr
    97da:	2000      	movs	r0, #0
    97dc:	e7f6      	b.n	97cc <usb_find_desc+0x28>

000097de <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    97de:	4288      	cmp	r0, r1
    97e0:	d216      	bcs.n	9810 <usb_find_ep_desc+0x32>
	return desc[0];
    97e2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    97e4:	2b01      	cmp	r3, #1
    97e6:	d915      	bls.n	9814 <usb_find_ep_desc+0x36>
	return desc[1];
    97e8:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    97ea:	2a04      	cmp	r2, #4
    97ec:	d014      	beq.n	9818 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    97ee:	2a05      	cmp	r2, #5
    97f0:	d00b      	beq.n	980a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    97f2:	4418      	add	r0, r3
	while (desc < eof) {
    97f4:	4281      	cmp	r1, r0
    97f6:	d909      	bls.n	980c <usb_find_ep_desc+0x2e>
	return desc[0];
    97f8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    97fa:	2b01      	cmp	r3, #1
    97fc:	d90e      	bls.n	981c <usb_find_ep_desc+0x3e>
	return desc[1];
    97fe:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    9800:	2a04      	cmp	r2, #4
    9802:	d00d      	beq.n	9820 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    9804:	2a05      	cmp	r2, #5
    9806:	d1f4      	bne.n	97f2 <usb_find_ep_desc+0x14>
    9808:	e00b      	b.n	9822 <usb_find_ep_desc+0x44>
    980a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    980c:	2000      	movs	r0, #0
    980e:	4770      	bx	lr
    9810:	2000      	movs	r0, #0
    9812:	4770      	bx	lr
		_desc_len_check();
    9814:	2000      	movs	r0, #0
    9816:	4770      	bx	lr
	return NULL;
    9818:	2000      	movs	r0, #0
    981a:	4770      	bx	lr
		_desc_len_check();
    981c:	2000      	movs	r0, #0
    981e:	4770      	bx	lr
	return NULL;
    9820:	2000      	movs	r0, #0
}
    9822:	4770      	bx	lr

00009824 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    9824:	b538      	push	{r3, r4, r5, lr}
    9826:	460c      	mov	r4, r1
    9828:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    982a:	2202      	movs	r2, #2
    982c:	4b16      	ldr	r3, [pc, #88]	; (9888 <usb_find_cfg_desc+0x64>)
    982e:	4798      	blx	r3
	if (!desc) {
    9830:	4603      	mov	r3, r0
    9832:	b1e8      	cbz	r0, 9870 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    9834:	4284      	cmp	r4, r0
    9836:	d91d      	bls.n	9874 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    9838:	7802      	ldrb	r2, [r0, #0]
    983a:	2a01      	cmp	r2, #1
    983c:	d91c      	bls.n	9878 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    983e:	7842      	ldrb	r2, [r0, #1]
    9840:	2a02      	cmp	r2, #2
    9842:	d11b      	bne.n	987c <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    9844:	7942      	ldrb	r2, [r0, #5]
    9846:	42aa      	cmp	r2, r5
    9848:	d012      	beq.n	9870 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    984a:	78d9      	ldrb	r1, [r3, #3]
    984c:	789a      	ldrb	r2, [r3, #2]
    984e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    9852:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    9856:	429c      	cmp	r4, r3
    9858:	d909      	bls.n	986e <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    985a:	781a      	ldrb	r2, [r3, #0]
    985c:	2a01      	cmp	r2, #1
    985e:	d90f      	bls.n	9880 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    9860:	785a      	ldrb	r2, [r3, #1]
    9862:	2a02      	cmp	r2, #2
    9864:	d10e      	bne.n	9884 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    9866:	795a      	ldrb	r2, [r3, #5]
    9868:	42aa      	cmp	r2, r5
    986a:	d1ee      	bne.n	984a <usb_find_cfg_desc+0x26>
    986c:	e000      	b.n	9870 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    986e:	2300      	movs	r3, #0
}
    9870:	4618      	mov	r0, r3
    9872:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    9874:	2300      	movs	r3, #0
    9876:	e7fb      	b.n	9870 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    9878:	2300      	movs	r3, #0
    987a:	e7f9      	b.n	9870 <usb_find_cfg_desc+0x4c>
	return NULL;
    987c:	2300      	movs	r3, #0
    987e:	e7f7      	b.n	9870 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    9880:	2300      	movs	r3, #0
    9882:	e7f5      	b.n	9870 <usb_find_cfg_desc+0x4c>
	return NULL;
    9884:	2300      	movs	r3, #0
    9886:	e7f3      	b.n	9870 <usb_find_cfg_desc+0x4c>
    9888:	000097a5 	.word	0x000097a5

0000988c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    988c:	4288      	cmp	r0, r1
    988e:	d217      	bcs.n	98c0 <usb_find_str_desc+0x34>
{
    9890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9894:	460d      	mov	r5, r1
    9896:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    9898:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    989a:	f04f 0803 	mov.w	r8, #3
    989e:	4f0c      	ldr	r7, [pc, #48]	; (98d0 <usb_find_str_desc+0x44>)
    98a0:	4642      	mov	r2, r8
    98a2:	4629      	mov	r1, r5
    98a4:	47b8      	blx	r7
		if (desc) {
    98a6:	4603      	mov	r3, r0
    98a8:	b170      	cbz	r0, 98c8 <usb_find_str_desc+0x3c>
	return desc[0];
    98aa:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    98ac:	2801      	cmp	r0, #1
    98ae:	d90a      	bls.n	98c6 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    98b0:	42a6      	cmp	r6, r4
    98b2:	d009      	beq.n	98c8 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    98b4:	4418      	add	r0, r3
    98b6:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    98b8:	4285      	cmp	r5, r0
    98ba:	d8f1      	bhi.n	98a0 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    98bc:	2300      	movs	r3, #0
    98be:	e003      	b.n	98c8 <usb_find_str_desc+0x3c>
    98c0:	2300      	movs	r3, #0
}
    98c2:	4618      	mov	r0, r3
    98c4:	4770      	bx	lr
			_desc_len_check();
    98c6:	2300      	movs	r3, #0
}
    98c8:	4618      	mov	r0, r3
    98ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98ce:	bf00      	nop
    98d0:	000097a5 	.word	0x000097a5

000098d4 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    98d4:	4b3a      	ldr	r3, [pc, #232]	; (99c0 <hiddf_demo_sof_event+0xec>)
    98d6:	791b      	ldrb	r3, [r3, #4]
    98d8:	2b0a      	cmp	r3, #10
    98da:	d803      	bhi.n	98e4 <hiddf_demo_sof_event+0x10>
    98dc:	3301      	adds	r3, #1
    98de:	4a38      	ldr	r2, [pc, #224]	; (99c0 <hiddf_demo_sof_event+0xec>)
    98e0:	7113      	strb	r3, [r2, #4]
    98e2:	4770      	bx	lr
{
    98e4:	b570      	push	{r4, r5, r6, lr}
    98e6:	b084      	sub	sp, #16
		interval = 0;
    98e8:	4b35      	ldr	r3, [pc, #212]	; (99c0 <hiddf_demo_sof_event+0xec>)
    98ea:	2200      	movs	r2, #0
    98ec:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    98ee:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    98f0:	a801      	add	r0, sp, #4
    98f2:	4b34      	ldr	r3, [pc, #208]	; (99c4 <hiddf_demo_sof_event+0xf0>)
    98f4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    98f6:	096b      	lsrs	r3, r5, #5
    98f8:	4933      	ldr	r1, [pc, #204]	; (99c8 <hiddf_demo_sof_event+0xf4>)
    98fa:	01db      	lsls	r3, r3, #7
    98fc:	18ca      	adds	r2, r1, r3
    98fe:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9900:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9902:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9904:	405c      	eors	r4, r3
    9906:	400c      	ands	r4, r1
    9908:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    990a:	a801      	add	r0, sp, #4
    990c:	4b2f      	ldr	r3, [pc, #188]	; (99cc <hiddf_demo_sof_event+0xf8>)
    990e:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    9910:	f005 051f 	and.w	r5, r5, #31
    9914:	2301      	movs	r3, #1
    9916:	fa03 f505 	lsl.w	r5, r3, r5
    991a:	4225      	tst	r5, r4
    991c:	d040      	beq.n	99a0 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    991e:	4b28      	ldr	r3, [pc, #160]	; (99c0 <hiddf_demo_sof_event+0xec>)
    9920:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    9922:	a802      	add	r0, sp, #8
    9924:	4b27      	ldr	r3, [pc, #156]	; (99c4 <hiddf_demo_sof_event+0xf0>)
    9926:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9928:	096b      	lsrs	r3, r5, #5
    992a:	4927      	ldr	r1, [pc, #156]	; (99c8 <hiddf_demo_sof_event+0xf4>)
    992c:	01db      	lsls	r3, r3, #7
    992e:	18ca      	adds	r2, r1, r3
    9930:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9932:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9934:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9936:	405c      	eors	r4, r3
    9938:	400c      	ands	r4, r1
    993a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    993c:	a802      	add	r0, sp, #8
    993e:	4b23      	ldr	r3, [pc, #140]	; (99cc <hiddf_demo_sof_event+0xf8>)
    9940:	4798      	blx	r3
    9942:	f005 051f 	and.w	r5, r5, #31
    9946:	2301      	movs	r3, #1
    9948:	fa03 f505 	lsl.w	r5, r3, r5
    994c:	4225      	tst	r5, r4
    994e:	d02d      	beq.n	99ac <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    9950:	4d1b      	ldr	r5, [pc, #108]	; (99c0 <hiddf_demo_sof_event+0xec>)
    9952:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    9954:	a803      	add	r0, sp, #12
    9956:	4b1b      	ldr	r3, [pc, #108]	; (99c4 <hiddf_demo_sof_event+0xf0>)
    9958:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    995a:	0973      	lsrs	r3, r6, #5
    995c:	491a      	ldr	r1, [pc, #104]	; (99c8 <hiddf_demo_sof_event+0xf4>)
    995e:	01db      	lsls	r3, r3, #7
    9960:	18ca      	adds	r2, r1, r3
    9962:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9964:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9966:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9968:	405c      	eors	r4, r3
    996a:	400c      	ands	r4, r1
    996c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    996e:	a803      	add	r0, sp, #12
    9970:	4b16      	ldr	r3, [pc, #88]	; (99cc <hiddf_demo_sof_event+0xf8>)
    9972:	4798      	blx	r3
    9974:	f006 061f 	and.w	r6, r6, #31
    9978:	2301      	movs	r3, #1
    997a:	40b3      	lsls	r3, r6
    997c:	401c      	ands	r4, r3
    997e:	bf0c      	ite	eq
    9980:	2301      	moveq	r3, #1
    9982:	2300      	movne	r3, #0
    9984:	7d2a      	ldrb	r2, [r5, #20]
    9986:	429a      	cmp	r2, r3
    9988:	d008      	beq.n	999c <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    998a:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    998c:	b19c      	cbz	r4, 99b6 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    998e:	2200      	movs	r2, #0
    9990:	4b0f      	ldr	r3, [pc, #60]	; (99d0 <hiddf_demo_sof_event+0xfc>)
    9992:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    9994:	2101      	movs	r1, #1
    9996:	480e      	ldr	r0, [pc, #56]	; (99d0 <hiddf_demo_sof_event+0xfc>)
    9998:	4b0e      	ldr	r3, [pc, #56]	; (99d4 <hiddf_demo_sof_event+0x100>)
    999a:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    999c:	b004      	add	sp, #16
    999e:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    99a0:	4619      	mov	r1, r3
    99a2:	f06f 0004 	mvn.w	r0, #4
    99a6:	4b0c      	ldr	r3, [pc, #48]	; (99d8 <hiddf_demo_sof_event+0x104>)
    99a8:	4798      	blx	r3
    99aa:	e7b8      	b.n	991e <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    99ac:	4619      	mov	r1, r3
    99ae:	2005      	movs	r0, #5
    99b0:	4b09      	ldr	r3, [pc, #36]	; (99d8 <hiddf_demo_sof_event+0x104>)
    99b2:	4798      	blx	r3
    99b4:	e7cc      	b.n	9950 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    99b6:	2201      	movs	r2, #1
    99b8:	4b05      	ldr	r3, [pc, #20]	; (99d0 <hiddf_demo_sof_event+0xfc>)
    99ba:	709a      	strb	r2, [r3, #2]
    99bc:	e7ea      	b.n	9994 <hiddf_demo_sof_event+0xc0>
    99be:	bf00      	nop
    99c0:	20001278 	.word	0x20001278
    99c4:	000012d9 	.word	0x000012d9
    99c8:	41008000 	.word	0x41008000
    99cc:	000012e7 	.word	0x000012e7
    99d0:	2000037c 	.word	0x2000037c
    99d4:	00008b79 	.word	0x00008b79
    99d8:	00008e0d 	.word	0x00008e0d

000099dc <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    99dc:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    99de:	4805      	ldr	r0, [pc, #20]	; (99f4 <composite_device_init+0x18>)
    99e0:	4b05      	ldr	r3, [pc, #20]	; (99f8 <composite_device_init+0x1c>)
    99e2:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    99e4:	4b05      	ldr	r3, [pc, #20]	; (99fc <composite_device_init+0x20>)
    99e6:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    99e8:	4b05      	ldr	r3, [pc, #20]	; (9a00 <composite_device_init+0x24>)
    99ea:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    99ec:	4b05      	ldr	r3, [pc, #20]	; (9a04 <composite_device_init+0x28>)
    99ee:	4798      	blx	r3
    99f0:	bd08      	pop	{r3, pc}
    99f2:	bf00      	nop
    99f4:	20001290 	.word	0x20001290
    99f8:	000096d5 	.word	0x000096d5
    99fc:	000088f5 	.word	0x000088f5
    9a00:	00008dc9 	.word	0x00008dc9
    9a04:	00008b35 	.word	0x00008b35

00009a08 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    9a08:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    9a0a:	4803      	ldr	r0, [pc, #12]	; (9a18 <composite_device_start+0x10>)
    9a0c:	4b03      	ldr	r3, [pc, #12]	; (9a1c <composite_device_start+0x14>)
    9a0e:	4798      	blx	r3
	usbdc_attach();
    9a10:	4b03      	ldr	r3, [pc, #12]	; (9a20 <composite_device_start+0x18>)
    9a12:	4798      	blx	r3
    9a14:	bd08      	pop	{r3, pc}
    9a16:	bf00      	nop
    9a18:	20000388 	.word	0x20000388
    9a1c:	00009745 	.word	0x00009745
    9a20:	00009779 	.word	0x00009779

00009a24 <usb_init>:
		}
	}
}

void usb_init(void)
{
    9a24:	b508      	push	{r3, lr}

	composite_device_init();
    9a26:	4b01      	ldr	r3, [pc, #4]	; (9a2c <usb_init+0x8>)
    9a28:	4798      	blx	r3
    9a2a:	bd08      	pop	{r3, pc}
    9a2c:	000099dd 	.word	0x000099dd

00009a30 <__aeabi_drsub>:
    9a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    9a34:	e002      	b.n	9a3c <__adddf3>
    9a36:	bf00      	nop

00009a38 <__aeabi_dsub>:
    9a38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00009a3c <__adddf3>:
    9a3c:	b530      	push	{r4, r5, lr}
    9a3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    9a42:	ea4f 0543 	mov.w	r5, r3, lsl #1
    9a46:	ea94 0f05 	teq	r4, r5
    9a4a:	bf08      	it	eq
    9a4c:	ea90 0f02 	teqeq	r0, r2
    9a50:	bf1f      	itttt	ne
    9a52:	ea54 0c00 	orrsne.w	ip, r4, r0
    9a56:	ea55 0c02 	orrsne.w	ip, r5, r2
    9a5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    9a5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    9a62:	f000 80e2 	beq.w	9c2a <__adddf3+0x1ee>
    9a66:	ea4f 5454 	mov.w	r4, r4, lsr #21
    9a6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    9a6e:	bfb8      	it	lt
    9a70:	426d      	neglt	r5, r5
    9a72:	dd0c      	ble.n	9a8e <__adddf3+0x52>
    9a74:	442c      	add	r4, r5
    9a76:	ea80 0202 	eor.w	r2, r0, r2
    9a7a:	ea81 0303 	eor.w	r3, r1, r3
    9a7e:	ea82 0000 	eor.w	r0, r2, r0
    9a82:	ea83 0101 	eor.w	r1, r3, r1
    9a86:	ea80 0202 	eor.w	r2, r0, r2
    9a8a:	ea81 0303 	eor.w	r3, r1, r3
    9a8e:	2d36      	cmp	r5, #54	; 0x36
    9a90:	bf88      	it	hi
    9a92:	bd30      	pophi	{r4, r5, pc}
    9a94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9a98:	ea4f 3101 	mov.w	r1, r1, lsl #12
    9a9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    9aa0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    9aa4:	d002      	beq.n	9aac <__adddf3+0x70>
    9aa6:	4240      	negs	r0, r0
    9aa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9aac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    9ab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    9ab4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    9ab8:	d002      	beq.n	9ac0 <__adddf3+0x84>
    9aba:	4252      	negs	r2, r2
    9abc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    9ac0:	ea94 0f05 	teq	r4, r5
    9ac4:	f000 80a7 	beq.w	9c16 <__adddf3+0x1da>
    9ac8:	f1a4 0401 	sub.w	r4, r4, #1
    9acc:	f1d5 0e20 	rsbs	lr, r5, #32
    9ad0:	db0d      	blt.n	9aee <__adddf3+0xb2>
    9ad2:	fa02 fc0e 	lsl.w	ip, r2, lr
    9ad6:	fa22 f205 	lsr.w	r2, r2, r5
    9ada:	1880      	adds	r0, r0, r2
    9adc:	f141 0100 	adc.w	r1, r1, #0
    9ae0:	fa03 f20e 	lsl.w	r2, r3, lr
    9ae4:	1880      	adds	r0, r0, r2
    9ae6:	fa43 f305 	asr.w	r3, r3, r5
    9aea:	4159      	adcs	r1, r3
    9aec:	e00e      	b.n	9b0c <__adddf3+0xd0>
    9aee:	f1a5 0520 	sub.w	r5, r5, #32
    9af2:	f10e 0e20 	add.w	lr, lr, #32
    9af6:	2a01      	cmp	r2, #1
    9af8:	fa03 fc0e 	lsl.w	ip, r3, lr
    9afc:	bf28      	it	cs
    9afe:	f04c 0c02 	orrcs.w	ip, ip, #2
    9b02:	fa43 f305 	asr.w	r3, r3, r5
    9b06:	18c0      	adds	r0, r0, r3
    9b08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    9b0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9b10:	d507      	bpl.n	9b22 <__adddf3+0xe6>
    9b12:	f04f 0e00 	mov.w	lr, #0
    9b16:	f1dc 0c00 	rsbs	ip, ip, #0
    9b1a:	eb7e 0000 	sbcs.w	r0, lr, r0
    9b1e:	eb6e 0101 	sbc.w	r1, lr, r1
    9b22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    9b26:	d31b      	bcc.n	9b60 <__adddf3+0x124>
    9b28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    9b2c:	d30c      	bcc.n	9b48 <__adddf3+0x10c>
    9b2e:	0849      	lsrs	r1, r1, #1
    9b30:	ea5f 0030 	movs.w	r0, r0, rrx
    9b34:	ea4f 0c3c 	mov.w	ip, ip, rrx
    9b38:	f104 0401 	add.w	r4, r4, #1
    9b3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    9b40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    9b44:	f080 809a 	bcs.w	9c7c <__adddf3+0x240>
    9b48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    9b4c:	bf08      	it	eq
    9b4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    9b52:	f150 0000 	adcs.w	r0, r0, #0
    9b56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9b5a:	ea41 0105 	orr.w	r1, r1, r5
    9b5e:	bd30      	pop	{r4, r5, pc}
    9b60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    9b64:	4140      	adcs	r0, r0
    9b66:	eb41 0101 	adc.w	r1, r1, r1
    9b6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9b6e:	f1a4 0401 	sub.w	r4, r4, #1
    9b72:	d1e9      	bne.n	9b48 <__adddf3+0x10c>
    9b74:	f091 0f00 	teq	r1, #0
    9b78:	bf04      	itt	eq
    9b7a:	4601      	moveq	r1, r0
    9b7c:	2000      	moveq	r0, #0
    9b7e:	fab1 f381 	clz	r3, r1
    9b82:	bf08      	it	eq
    9b84:	3320      	addeq	r3, #32
    9b86:	f1a3 030b 	sub.w	r3, r3, #11
    9b8a:	f1b3 0220 	subs.w	r2, r3, #32
    9b8e:	da0c      	bge.n	9baa <__adddf3+0x16e>
    9b90:	320c      	adds	r2, #12
    9b92:	dd08      	ble.n	9ba6 <__adddf3+0x16a>
    9b94:	f102 0c14 	add.w	ip, r2, #20
    9b98:	f1c2 020c 	rsb	r2, r2, #12
    9b9c:	fa01 f00c 	lsl.w	r0, r1, ip
    9ba0:	fa21 f102 	lsr.w	r1, r1, r2
    9ba4:	e00c      	b.n	9bc0 <__adddf3+0x184>
    9ba6:	f102 0214 	add.w	r2, r2, #20
    9baa:	bfd8      	it	le
    9bac:	f1c2 0c20 	rsble	ip, r2, #32
    9bb0:	fa01 f102 	lsl.w	r1, r1, r2
    9bb4:	fa20 fc0c 	lsr.w	ip, r0, ip
    9bb8:	bfdc      	itt	le
    9bba:	ea41 010c 	orrle.w	r1, r1, ip
    9bbe:	4090      	lslle	r0, r2
    9bc0:	1ae4      	subs	r4, r4, r3
    9bc2:	bfa2      	ittt	ge
    9bc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    9bc8:	4329      	orrge	r1, r5
    9bca:	bd30      	popge	{r4, r5, pc}
    9bcc:	ea6f 0404 	mvn.w	r4, r4
    9bd0:	3c1f      	subs	r4, #31
    9bd2:	da1c      	bge.n	9c0e <__adddf3+0x1d2>
    9bd4:	340c      	adds	r4, #12
    9bd6:	dc0e      	bgt.n	9bf6 <__adddf3+0x1ba>
    9bd8:	f104 0414 	add.w	r4, r4, #20
    9bdc:	f1c4 0220 	rsb	r2, r4, #32
    9be0:	fa20 f004 	lsr.w	r0, r0, r4
    9be4:	fa01 f302 	lsl.w	r3, r1, r2
    9be8:	ea40 0003 	orr.w	r0, r0, r3
    9bec:	fa21 f304 	lsr.w	r3, r1, r4
    9bf0:	ea45 0103 	orr.w	r1, r5, r3
    9bf4:	bd30      	pop	{r4, r5, pc}
    9bf6:	f1c4 040c 	rsb	r4, r4, #12
    9bfa:	f1c4 0220 	rsb	r2, r4, #32
    9bfe:	fa20 f002 	lsr.w	r0, r0, r2
    9c02:	fa01 f304 	lsl.w	r3, r1, r4
    9c06:	ea40 0003 	orr.w	r0, r0, r3
    9c0a:	4629      	mov	r1, r5
    9c0c:	bd30      	pop	{r4, r5, pc}
    9c0e:	fa21 f004 	lsr.w	r0, r1, r4
    9c12:	4629      	mov	r1, r5
    9c14:	bd30      	pop	{r4, r5, pc}
    9c16:	f094 0f00 	teq	r4, #0
    9c1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    9c1e:	bf06      	itte	eq
    9c20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    9c24:	3401      	addeq	r4, #1
    9c26:	3d01      	subne	r5, #1
    9c28:	e74e      	b.n	9ac8 <__adddf3+0x8c>
    9c2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    9c2e:	bf18      	it	ne
    9c30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    9c34:	d029      	beq.n	9c8a <__adddf3+0x24e>
    9c36:	ea94 0f05 	teq	r4, r5
    9c3a:	bf08      	it	eq
    9c3c:	ea90 0f02 	teqeq	r0, r2
    9c40:	d005      	beq.n	9c4e <__adddf3+0x212>
    9c42:	ea54 0c00 	orrs.w	ip, r4, r0
    9c46:	bf04      	itt	eq
    9c48:	4619      	moveq	r1, r3
    9c4a:	4610      	moveq	r0, r2
    9c4c:	bd30      	pop	{r4, r5, pc}
    9c4e:	ea91 0f03 	teq	r1, r3
    9c52:	bf1e      	ittt	ne
    9c54:	2100      	movne	r1, #0
    9c56:	2000      	movne	r0, #0
    9c58:	bd30      	popne	{r4, r5, pc}
    9c5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    9c5e:	d105      	bne.n	9c6c <__adddf3+0x230>
    9c60:	0040      	lsls	r0, r0, #1
    9c62:	4149      	adcs	r1, r1
    9c64:	bf28      	it	cs
    9c66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    9c6a:	bd30      	pop	{r4, r5, pc}
    9c6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    9c70:	bf3c      	itt	cc
    9c72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    9c76:	bd30      	popcc	{r4, r5, pc}
    9c78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9c7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    9c80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9c84:	f04f 0000 	mov.w	r0, #0
    9c88:	bd30      	pop	{r4, r5, pc}
    9c8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    9c8e:	bf1a      	itte	ne
    9c90:	4619      	movne	r1, r3
    9c92:	4610      	movne	r0, r2
    9c94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    9c98:	bf1c      	itt	ne
    9c9a:	460b      	movne	r3, r1
    9c9c:	4602      	movne	r2, r0
    9c9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    9ca2:	bf06      	itte	eq
    9ca4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    9ca8:	ea91 0f03 	teqeq	r1, r3
    9cac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    9cb0:	bd30      	pop	{r4, r5, pc}
    9cb2:	bf00      	nop

00009cb4 <__aeabi_ui2d>:
    9cb4:	f090 0f00 	teq	r0, #0
    9cb8:	bf04      	itt	eq
    9cba:	2100      	moveq	r1, #0
    9cbc:	4770      	bxeq	lr
    9cbe:	b530      	push	{r4, r5, lr}
    9cc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9cc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9cc8:	f04f 0500 	mov.w	r5, #0
    9ccc:	f04f 0100 	mov.w	r1, #0
    9cd0:	e750      	b.n	9b74 <__adddf3+0x138>
    9cd2:	bf00      	nop

00009cd4 <__aeabi_i2d>:
    9cd4:	f090 0f00 	teq	r0, #0
    9cd8:	bf04      	itt	eq
    9cda:	2100      	moveq	r1, #0
    9cdc:	4770      	bxeq	lr
    9cde:	b530      	push	{r4, r5, lr}
    9ce0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9ce4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9ce8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    9cec:	bf48      	it	mi
    9cee:	4240      	negmi	r0, r0
    9cf0:	f04f 0100 	mov.w	r1, #0
    9cf4:	e73e      	b.n	9b74 <__adddf3+0x138>
    9cf6:	bf00      	nop

00009cf8 <__aeabi_f2d>:
    9cf8:	0042      	lsls	r2, r0, #1
    9cfa:	ea4f 01e2 	mov.w	r1, r2, asr #3
    9cfe:	ea4f 0131 	mov.w	r1, r1, rrx
    9d02:	ea4f 7002 	mov.w	r0, r2, lsl #28
    9d06:	bf1f      	itttt	ne
    9d08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    9d0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    9d10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    9d14:	4770      	bxne	lr
    9d16:	f092 0f00 	teq	r2, #0
    9d1a:	bf14      	ite	ne
    9d1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    9d20:	4770      	bxeq	lr
    9d22:	b530      	push	{r4, r5, lr}
    9d24:	f44f 7460 	mov.w	r4, #896	; 0x380
    9d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9d2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9d30:	e720      	b.n	9b74 <__adddf3+0x138>
    9d32:	bf00      	nop

00009d34 <__aeabi_ul2d>:
    9d34:	ea50 0201 	orrs.w	r2, r0, r1
    9d38:	bf08      	it	eq
    9d3a:	4770      	bxeq	lr
    9d3c:	b530      	push	{r4, r5, lr}
    9d3e:	f04f 0500 	mov.w	r5, #0
    9d42:	e00a      	b.n	9d5a <__aeabi_l2d+0x16>

00009d44 <__aeabi_l2d>:
    9d44:	ea50 0201 	orrs.w	r2, r0, r1
    9d48:	bf08      	it	eq
    9d4a:	4770      	bxeq	lr
    9d4c:	b530      	push	{r4, r5, lr}
    9d4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    9d52:	d502      	bpl.n	9d5a <__aeabi_l2d+0x16>
    9d54:	4240      	negs	r0, r0
    9d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9d5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9d5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9d62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    9d66:	f43f aedc 	beq.w	9b22 <__adddf3+0xe6>
    9d6a:	f04f 0203 	mov.w	r2, #3
    9d6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    9d72:	bf18      	it	ne
    9d74:	3203      	addne	r2, #3
    9d76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    9d7a:	bf18      	it	ne
    9d7c:	3203      	addne	r2, #3
    9d7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    9d82:	f1c2 0320 	rsb	r3, r2, #32
    9d86:	fa00 fc03 	lsl.w	ip, r0, r3
    9d8a:	fa20 f002 	lsr.w	r0, r0, r2
    9d8e:	fa01 fe03 	lsl.w	lr, r1, r3
    9d92:	ea40 000e 	orr.w	r0, r0, lr
    9d96:	fa21 f102 	lsr.w	r1, r1, r2
    9d9a:	4414      	add	r4, r2
    9d9c:	e6c1      	b.n	9b22 <__adddf3+0xe6>
    9d9e:	bf00      	nop

00009da0 <__aeabi_dmul>:
    9da0:	b570      	push	{r4, r5, r6, lr}
    9da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    9da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    9daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    9dae:	bf1d      	ittte	ne
    9db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    9db4:	ea94 0f0c 	teqne	r4, ip
    9db8:	ea95 0f0c 	teqne	r5, ip
    9dbc:	f000 f8de 	bleq	9f7c <__aeabi_dmul+0x1dc>
    9dc0:	442c      	add	r4, r5
    9dc2:	ea81 0603 	eor.w	r6, r1, r3
    9dc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    9dca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    9dce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    9dd2:	bf18      	it	ne
    9dd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    9dd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9de0:	d038      	beq.n	9e54 <__aeabi_dmul+0xb4>
    9de2:	fba0 ce02 	umull	ip, lr, r0, r2
    9de6:	f04f 0500 	mov.w	r5, #0
    9dea:	fbe1 e502 	umlal	lr, r5, r1, r2
    9dee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    9df2:	fbe0 e503 	umlal	lr, r5, r0, r3
    9df6:	f04f 0600 	mov.w	r6, #0
    9dfa:	fbe1 5603 	umlal	r5, r6, r1, r3
    9dfe:	f09c 0f00 	teq	ip, #0
    9e02:	bf18      	it	ne
    9e04:	f04e 0e01 	orrne.w	lr, lr, #1
    9e08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    9e0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    9e10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    9e14:	d204      	bcs.n	9e20 <__aeabi_dmul+0x80>
    9e16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    9e1a:	416d      	adcs	r5, r5
    9e1c:	eb46 0606 	adc.w	r6, r6, r6
    9e20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    9e24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    9e28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    9e2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    9e30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    9e34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    9e38:	bf88      	it	hi
    9e3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    9e3e:	d81e      	bhi.n	9e7e <__aeabi_dmul+0xde>
    9e40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    9e44:	bf08      	it	eq
    9e46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    9e4a:	f150 0000 	adcs.w	r0, r0, #0
    9e4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9e52:	bd70      	pop	{r4, r5, r6, pc}
    9e54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    9e58:	ea46 0101 	orr.w	r1, r6, r1
    9e5c:	ea40 0002 	orr.w	r0, r0, r2
    9e60:	ea81 0103 	eor.w	r1, r1, r3
    9e64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    9e68:	bfc2      	ittt	gt
    9e6a:	ebd4 050c 	rsbsgt	r5, r4, ip
    9e6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    9e72:	bd70      	popgt	{r4, r5, r6, pc}
    9e74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9e78:	f04f 0e00 	mov.w	lr, #0
    9e7c:	3c01      	subs	r4, #1
    9e7e:	f300 80ab 	bgt.w	9fd8 <__aeabi_dmul+0x238>
    9e82:	f114 0f36 	cmn.w	r4, #54	; 0x36
    9e86:	bfde      	ittt	le
    9e88:	2000      	movle	r0, #0
    9e8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    9e8e:	bd70      	pople	{r4, r5, r6, pc}
    9e90:	f1c4 0400 	rsb	r4, r4, #0
    9e94:	3c20      	subs	r4, #32
    9e96:	da35      	bge.n	9f04 <__aeabi_dmul+0x164>
    9e98:	340c      	adds	r4, #12
    9e9a:	dc1b      	bgt.n	9ed4 <__aeabi_dmul+0x134>
    9e9c:	f104 0414 	add.w	r4, r4, #20
    9ea0:	f1c4 0520 	rsb	r5, r4, #32
    9ea4:	fa00 f305 	lsl.w	r3, r0, r5
    9ea8:	fa20 f004 	lsr.w	r0, r0, r4
    9eac:	fa01 f205 	lsl.w	r2, r1, r5
    9eb0:	ea40 0002 	orr.w	r0, r0, r2
    9eb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    9eb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9ebc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    9ec0:	fa21 f604 	lsr.w	r6, r1, r4
    9ec4:	eb42 0106 	adc.w	r1, r2, r6
    9ec8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9ecc:	bf08      	it	eq
    9ece:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9ed2:	bd70      	pop	{r4, r5, r6, pc}
    9ed4:	f1c4 040c 	rsb	r4, r4, #12
    9ed8:	f1c4 0520 	rsb	r5, r4, #32
    9edc:	fa00 f304 	lsl.w	r3, r0, r4
    9ee0:	fa20 f005 	lsr.w	r0, r0, r5
    9ee4:	fa01 f204 	lsl.w	r2, r1, r4
    9ee8:	ea40 0002 	orr.w	r0, r0, r2
    9eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9ef0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    9ef4:	f141 0100 	adc.w	r1, r1, #0
    9ef8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9efc:	bf08      	it	eq
    9efe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9f02:	bd70      	pop	{r4, r5, r6, pc}
    9f04:	f1c4 0520 	rsb	r5, r4, #32
    9f08:	fa00 f205 	lsl.w	r2, r0, r5
    9f0c:	ea4e 0e02 	orr.w	lr, lr, r2
    9f10:	fa20 f304 	lsr.w	r3, r0, r4
    9f14:	fa01 f205 	lsl.w	r2, r1, r5
    9f18:	ea43 0302 	orr.w	r3, r3, r2
    9f1c:	fa21 f004 	lsr.w	r0, r1, r4
    9f20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9f24:	fa21 f204 	lsr.w	r2, r1, r4
    9f28:	ea20 0002 	bic.w	r0, r0, r2
    9f2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    9f30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9f34:	bf08      	it	eq
    9f36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9f3a:	bd70      	pop	{r4, r5, r6, pc}
    9f3c:	f094 0f00 	teq	r4, #0
    9f40:	d10f      	bne.n	9f62 <__aeabi_dmul+0x1c2>
    9f42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    9f46:	0040      	lsls	r0, r0, #1
    9f48:	eb41 0101 	adc.w	r1, r1, r1
    9f4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9f50:	bf08      	it	eq
    9f52:	3c01      	subeq	r4, #1
    9f54:	d0f7      	beq.n	9f46 <__aeabi_dmul+0x1a6>
    9f56:	ea41 0106 	orr.w	r1, r1, r6
    9f5a:	f095 0f00 	teq	r5, #0
    9f5e:	bf18      	it	ne
    9f60:	4770      	bxne	lr
    9f62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    9f66:	0052      	lsls	r2, r2, #1
    9f68:	eb43 0303 	adc.w	r3, r3, r3
    9f6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    9f70:	bf08      	it	eq
    9f72:	3d01      	subeq	r5, #1
    9f74:	d0f7      	beq.n	9f66 <__aeabi_dmul+0x1c6>
    9f76:	ea43 0306 	orr.w	r3, r3, r6
    9f7a:	4770      	bx	lr
    9f7c:	ea94 0f0c 	teq	r4, ip
    9f80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    9f84:	bf18      	it	ne
    9f86:	ea95 0f0c 	teqne	r5, ip
    9f8a:	d00c      	beq.n	9fa6 <__aeabi_dmul+0x206>
    9f8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    9f90:	bf18      	it	ne
    9f92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    9f96:	d1d1      	bne.n	9f3c <__aeabi_dmul+0x19c>
    9f98:	ea81 0103 	eor.w	r1, r1, r3
    9f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9fa0:	f04f 0000 	mov.w	r0, #0
    9fa4:	bd70      	pop	{r4, r5, r6, pc}
    9fa6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    9faa:	bf06      	itte	eq
    9fac:	4610      	moveq	r0, r2
    9fae:	4619      	moveq	r1, r3
    9fb0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    9fb4:	d019      	beq.n	9fea <__aeabi_dmul+0x24a>
    9fb6:	ea94 0f0c 	teq	r4, ip
    9fba:	d102      	bne.n	9fc2 <__aeabi_dmul+0x222>
    9fbc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    9fc0:	d113      	bne.n	9fea <__aeabi_dmul+0x24a>
    9fc2:	ea95 0f0c 	teq	r5, ip
    9fc6:	d105      	bne.n	9fd4 <__aeabi_dmul+0x234>
    9fc8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    9fcc:	bf1c      	itt	ne
    9fce:	4610      	movne	r0, r2
    9fd0:	4619      	movne	r1, r3
    9fd2:	d10a      	bne.n	9fea <__aeabi_dmul+0x24a>
    9fd4:	ea81 0103 	eor.w	r1, r1, r3
    9fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9fdc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    9fe0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9fe4:	f04f 0000 	mov.w	r0, #0
    9fe8:	bd70      	pop	{r4, r5, r6, pc}
    9fea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    9fee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    9ff2:	bd70      	pop	{r4, r5, r6, pc}

00009ff4 <__aeabi_ddiv>:
    9ff4:	b570      	push	{r4, r5, r6, lr}
    9ff6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    9ffa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    9ffe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    a002:	bf1d      	ittte	ne
    a004:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    a008:	ea94 0f0c 	teqne	r4, ip
    a00c:	ea95 0f0c 	teqne	r5, ip
    a010:	f000 f8a7 	bleq	a162 <__aeabi_ddiv+0x16e>
    a014:	eba4 0405 	sub.w	r4, r4, r5
    a018:	ea81 0e03 	eor.w	lr, r1, r3
    a01c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    a020:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a024:	f000 8088 	beq.w	a138 <__aeabi_ddiv+0x144>
    a028:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a02c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    a030:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    a034:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    a038:	ea4f 2202 	mov.w	r2, r2, lsl #8
    a03c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    a040:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    a044:	ea4f 2600 	mov.w	r6, r0, lsl #8
    a048:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    a04c:	429d      	cmp	r5, r3
    a04e:	bf08      	it	eq
    a050:	4296      	cmpeq	r6, r2
    a052:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    a056:	f504 7440 	add.w	r4, r4, #768	; 0x300
    a05a:	d202      	bcs.n	a062 <__aeabi_ddiv+0x6e>
    a05c:	085b      	lsrs	r3, r3, #1
    a05e:	ea4f 0232 	mov.w	r2, r2, rrx
    a062:	1ab6      	subs	r6, r6, r2
    a064:	eb65 0503 	sbc.w	r5, r5, r3
    a068:	085b      	lsrs	r3, r3, #1
    a06a:	ea4f 0232 	mov.w	r2, r2, rrx
    a06e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a072:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    a076:	ebb6 0e02 	subs.w	lr, r6, r2
    a07a:	eb75 0e03 	sbcs.w	lr, r5, r3
    a07e:	bf22      	ittt	cs
    a080:	1ab6      	subcs	r6, r6, r2
    a082:	4675      	movcs	r5, lr
    a084:	ea40 000c 	orrcs.w	r0, r0, ip
    a088:	085b      	lsrs	r3, r3, #1
    a08a:	ea4f 0232 	mov.w	r2, r2, rrx
    a08e:	ebb6 0e02 	subs.w	lr, r6, r2
    a092:	eb75 0e03 	sbcs.w	lr, r5, r3
    a096:	bf22      	ittt	cs
    a098:	1ab6      	subcs	r6, r6, r2
    a09a:	4675      	movcs	r5, lr
    a09c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    a0a0:	085b      	lsrs	r3, r3, #1
    a0a2:	ea4f 0232 	mov.w	r2, r2, rrx
    a0a6:	ebb6 0e02 	subs.w	lr, r6, r2
    a0aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    a0ae:	bf22      	ittt	cs
    a0b0:	1ab6      	subcs	r6, r6, r2
    a0b2:	4675      	movcs	r5, lr
    a0b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    a0b8:	085b      	lsrs	r3, r3, #1
    a0ba:	ea4f 0232 	mov.w	r2, r2, rrx
    a0be:	ebb6 0e02 	subs.w	lr, r6, r2
    a0c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    a0c6:	bf22      	ittt	cs
    a0c8:	1ab6      	subcs	r6, r6, r2
    a0ca:	4675      	movcs	r5, lr
    a0cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    a0d0:	ea55 0e06 	orrs.w	lr, r5, r6
    a0d4:	d018      	beq.n	a108 <__aeabi_ddiv+0x114>
    a0d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    a0da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    a0de:	ea4f 1606 	mov.w	r6, r6, lsl #4
    a0e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    a0e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    a0ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    a0ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    a0f2:	d1c0      	bne.n	a076 <__aeabi_ddiv+0x82>
    a0f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a0f8:	d10b      	bne.n	a112 <__aeabi_ddiv+0x11e>
    a0fa:	ea41 0100 	orr.w	r1, r1, r0
    a0fe:	f04f 0000 	mov.w	r0, #0
    a102:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    a106:	e7b6      	b.n	a076 <__aeabi_ddiv+0x82>
    a108:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a10c:	bf04      	itt	eq
    a10e:	4301      	orreq	r1, r0
    a110:	2000      	moveq	r0, #0
    a112:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    a116:	bf88      	it	hi
    a118:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    a11c:	f63f aeaf 	bhi.w	9e7e <__aeabi_dmul+0xde>
    a120:	ebb5 0c03 	subs.w	ip, r5, r3
    a124:	bf04      	itt	eq
    a126:	ebb6 0c02 	subseq.w	ip, r6, r2
    a12a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a12e:	f150 0000 	adcs.w	r0, r0, #0
    a132:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a136:	bd70      	pop	{r4, r5, r6, pc}
    a138:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    a13c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    a140:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    a144:	bfc2      	ittt	gt
    a146:	ebd4 050c 	rsbsgt	r5, r4, ip
    a14a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    a14e:	bd70      	popgt	{r4, r5, r6, pc}
    a150:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a154:	f04f 0e00 	mov.w	lr, #0
    a158:	3c01      	subs	r4, #1
    a15a:	e690      	b.n	9e7e <__aeabi_dmul+0xde>
    a15c:	ea45 0e06 	orr.w	lr, r5, r6
    a160:	e68d      	b.n	9e7e <__aeabi_dmul+0xde>
    a162:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    a166:	ea94 0f0c 	teq	r4, ip
    a16a:	bf08      	it	eq
    a16c:	ea95 0f0c 	teqeq	r5, ip
    a170:	f43f af3b 	beq.w	9fea <__aeabi_dmul+0x24a>
    a174:	ea94 0f0c 	teq	r4, ip
    a178:	d10a      	bne.n	a190 <__aeabi_ddiv+0x19c>
    a17a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a17e:	f47f af34 	bne.w	9fea <__aeabi_dmul+0x24a>
    a182:	ea95 0f0c 	teq	r5, ip
    a186:	f47f af25 	bne.w	9fd4 <__aeabi_dmul+0x234>
    a18a:	4610      	mov	r0, r2
    a18c:	4619      	mov	r1, r3
    a18e:	e72c      	b.n	9fea <__aeabi_dmul+0x24a>
    a190:	ea95 0f0c 	teq	r5, ip
    a194:	d106      	bne.n	a1a4 <__aeabi_ddiv+0x1b0>
    a196:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    a19a:	f43f aefd 	beq.w	9f98 <__aeabi_dmul+0x1f8>
    a19e:	4610      	mov	r0, r2
    a1a0:	4619      	mov	r1, r3
    a1a2:	e722      	b.n	9fea <__aeabi_dmul+0x24a>
    a1a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    a1a8:	bf18      	it	ne
    a1aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    a1ae:	f47f aec5 	bne.w	9f3c <__aeabi_dmul+0x19c>
    a1b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    a1b6:	f47f af0d 	bne.w	9fd4 <__aeabi_dmul+0x234>
    a1ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    a1be:	f47f aeeb 	bne.w	9f98 <__aeabi_dmul+0x1f8>
    a1c2:	e712      	b.n	9fea <__aeabi_dmul+0x24a>

0000a1c4 <__aeabi_d2uiz>:
    a1c4:	004a      	lsls	r2, r1, #1
    a1c6:	d211      	bcs.n	a1ec <__aeabi_d2uiz+0x28>
    a1c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    a1cc:	d211      	bcs.n	a1f2 <__aeabi_d2uiz+0x2e>
    a1ce:	d50d      	bpl.n	a1ec <__aeabi_d2uiz+0x28>
    a1d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    a1d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    a1d8:	d40e      	bmi.n	a1f8 <__aeabi_d2uiz+0x34>
    a1da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    a1de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a1e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    a1e6:	fa23 f002 	lsr.w	r0, r3, r2
    a1ea:	4770      	bx	lr
    a1ec:	f04f 0000 	mov.w	r0, #0
    a1f0:	4770      	bx	lr
    a1f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    a1f6:	d102      	bne.n	a1fe <__aeabi_d2uiz+0x3a>
    a1f8:	f04f 30ff 	mov.w	r0, #4294967295
    a1fc:	4770      	bx	lr
    a1fe:	f04f 0000 	mov.w	r0, #0
    a202:	4770      	bx	lr

0000a204 <__libc_init_array>:
    a204:	b570      	push	{r4, r5, r6, lr}
    a206:	4e0d      	ldr	r6, [pc, #52]	; (a23c <__libc_init_array+0x38>)
    a208:	4c0d      	ldr	r4, [pc, #52]	; (a240 <__libc_init_array+0x3c>)
    a20a:	1ba4      	subs	r4, r4, r6
    a20c:	10a4      	asrs	r4, r4, #2
    a20e:	2500      	movs	r5, #0
    a210:	42a5      	cmp	r5, r4
    a212:	d109      	bne.n	a228 <__libc_init_array+0x24>
    a214:	4e0b      	ldr	r6, [pc, #44]	; (a244 <__libc_init_array+0x40>)
    a216:	4c0c      	ldr	r4, [pc, #48]	; (a248 <__libc_init_array+0x44>)
    a218:	f001 f8bc 	bl	b394 <_init>
    a21c:	1ba4      	subs	r4, r4, r6
    a21e:	10a4      	asrs	r4, r4, #2
    a220:	2500      	movs	r5, #0
    a222:	42a5      	cmp	r5, r4
    a224:	d105      	bne.n	a232 <__libc_init_array+0x2e>
    a226:	bd70      	pop	{r4, r5, r6, pc}
    a228:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    a22c:	4798      	blx	r3
    a22e:	3501      	adds	r5, #1
    a230:	e7ee      	b.n	a210 <__libc_init_array+0xc>
    a232:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    a236:	4798      	blx	r3
    a238:	3501      	adds	r5, #1
    a23a:	e7f2      	b.n	a222 <__libc_init_array+0x1e>
    a23c:	0000b3a0 	.word	0x0000b3a0
    a240:	0000b3a0 	.word	0x0000b3a0
    a244:	0000b3a0 	.word	0x0000b3a0
    a248:	0000b3a4 	.word	0x0000b3a4

0000a24c <malloc>:
    a24c:	4b02      	ldr	r3, [pc, #8]	; (a258 <malloc+0xc>)
    a24e:	4601      	mov	r1, r0
    a250:	6818      	ldr	r0, [r3, #0]
    a252:	f000 b865 	b.w	a320 <_malloc_r>
    a256:	bf00      	nop
    a258:	2000051c 	.word	0x2000051c

0000a25c <memcpy>:
    a25c:	b510      	push	{r4, lr}
    a25e:	1e43      	subs	r3, r0, #1
    a260:	440a      	add	r2, r1
    a262:	4291      	cmp	r1, r2
    a264:	d100      	bne.n	a268 <memcpy+0xc>
    a266:	bd10      	pop	{r4, pc}
    a268:	f811 4b01 	ldrb.w	r4, [r1], #1
    a26c:	f803 4f01 	strb.w	r4, [r3, #1]!
    a270:	e7f7      	b.n	a262 <memcpy+0x6>

0000a272 <memset>:
    a272:	4402      	add	r2, r0
    a274:	4603      	mov	r3, r0
    a276:	4293      	cmp	r3, r2
    a278:	d100      	bne.n	a27c <memset+0xa>
    a27a:	4770      	bx	lr
    a27c:	f803 1b01 	strb.w	r1, [r3], #1
    a280:	e7f9      	b.n	a276 <memset+0x4>
	...

0000a284 <_free_r>:
    a284:	b538      	push	{r3, r4, r5, lr}
    a286:	4605      	mov	r5, r0
    a288:	2900      	cmp	r1, #0
    a28a:	d045      	beq.n	a318 <_free_r+0x94>
    a28c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    a290:	1f0c      	subs	r4, r1, #4
    a292:	2b00      	cmp	r3, #0
    a294:	bfb8      	it	lt
    a296:	18e4      	addlt	r4, r4, r3
    a298:	f000 f8dc 	bl	a454 <__malloc_lock>
    a29c:	4a1f      	ldr	r2, [pc, #124]	; (a31c <_free_r+0x98>)
    a29e:	6813      	ldr	r3, [r2, #0]
    a2a0:	4610      	mov	r0, r2
    a2a2:	b933      	cbnz	r3, a2b2 <_free_r+0x2e>
    a2a4:	6063      	str	r3, [r4, #4]
    a2a6:	6014      	str	r4, [r2, #0]
    a2a8:	4628      	mov	r0, r5
    a2aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a2ae:	f000 b8d2 	b.w	a456 <__malloc_unlock>
    a2b2:	42a3      	cmp	r3, r4
    a2b4:	d90c      	bls.n	a2d0 <_free_r+0x4c>
    a2b6:	6821      	ldr	r1, [r4, #0]
    a2b8:	1862      	adds	r2, r4, r1
    a2ba:	4293      	cmp	r3, r2
    a2bc:	bf04      	itt	eq
    a2be:	681a      	ldreq	r2, [r3, #0]
    a2c0:	685b      	ldreq	r3, [r3, #4]
    a2c2:	6063      	str	r3, [r4, #4]
    a2c4:	bf04      	itt	eq
    a2c6:	1852      	addeq	r2, r2, r1
    a2c8:	6022      	streq	r2, [r4, #0]
    a2ca:	6004      	str	r4, [r0, #0]
    a2cc:	e7ec      	b.n	a2a8 <_free_r+0x24>
    a2ce:	4613      	mov	r3, r2
    a2d0:	685a      	ldr	r2, [r3, #4]
    a2d2:	b10a      	cbz	r2, a2d8 <_free_r+0x54>
    a2d4:	42a2      	cmp	r2, r4
    a2d6:	d9fa      	bls.n	a2ce <_free_r+0x4a>
    a2d8:	6819      	ldr	r1, [r3, #0]
    a2da:	1858      	adds	r0, r3, r1
    a2dc:	42a0      	cmp	r0, r4
    a2de:	d10b      	bne.n	a2f8 <_free_r+0x74>
    a2e0:	6820      	ldr	r0, [r4, #0]
    a2e2:	4401      	add	r1, r0
    a2e4:	1858      	adds	r0, r3, r1
    a2e6:	4282      	cmp	r2, r0
    a2e8:	6019      	str	r1, [r3, #0]
    a2ea:	d1dd      	bne.n	a2a8 <_free_r+0x24>
    a2ec:	6810      	ldr	r0, [r2, #0]
    a2ee:	6852      	ldr	r2, [r2, #4]
    a2f0:	605a      	str	r2, [r3, #4]
    a2f2:	4401      	add	r1, r0
    a2f4:	6019      	str	r1, [r3, #0]
    a2f6:	e7d7      	b.n	a2a8 <_free_r+0x24>
    a2f8:	d902      	bls.n	a300 <_free_r+0x7c>
    a2fa:	230c      	movs	r3, #12
    a2fc:	602b      	str	r3, [r5, #0]
    a2fe:	e7d3      	b.n	a2a8 <_free_r+0x24>
    a300:	6820      	ldr	r0, [r4, #0]
    a302:	1821      	adds	r1, r4, r0
    a304:	428a      	cmp	r2, r1
    a306:	bf04      	itt	eq
    a308:	6811      	ldreq	r1, [r2, #0]
    a30a:	6852      	ldreq	r2, [r2, #4]
    a30c:	6062      	str	r2, [r4, #4]
    a30e:	bf04      	itt	eq
    a310:	1809      	addeq	r1, r1, r0
    a312:	6021      	streq	r1, [r4, #0]
    a314:	605c      	str	r4, [r3, #4]
    a316:	e7c7      	b.n	a2a8 <_free_r+0x24>
    a318:	bd38      	pop	{r3, r4, r5, pc}
    a31a:	bf00      	nop
    a31c:	200012d0 	.word	0x200012d0

0000a320 <_malloc_r>:
    a320:	b570      	push	{r4, r5, r6, lr}
    a322:	1ccd      	adds	r5, r1, #3
    a324:	f025 0503 	bic.w	r5, r5, #3
    a328:	3508      	adds	r5, #8
    a32a:	2d0c      	cmp	r5, #12
    a32c:	bf38      	it	cc
    a32e:	250c      	movcc	r5, #12
    a330:	2d00      	cmp	r5, #0
    a332:	4606      	mov	r6, r0
    a334:	db01      	blt.n	a33a <_malloc_r+0x1a>
    a336:	42a9      	cmp	r1, r5
    a338:	d903      	bls.n	a342 <_malloc_r+0x22>
    a33a:	230c      	movs	r3, #12
    a33c:	6033      	str	r3, [r6, #0]
    a33e:	2000      	movs	r0, #0
    a340:	bd70      	pop	{r4, r5, r6, pc}
    a342:	f000 f887 	bl	a454 <__malloc_lock>
    a346:	4a23      	ldr	r2, [pc, #140]	; (a3d4 <_malloc_r+0xb4>)
    a348:	6814      	ldr	r4, [r2, #0]
    a34a:	4621      	mov	r1, r4
    a34c:	b991      	cbnz	r1, a374 <_malloc_r+0x54>
    a34e:	4c22      	ldr	r4, [pc, #136]	; (a3d8 <_malloc_r+0xb8>)
    a350:	6823      	ldr	r3, [r4, #0]
    a352:	b91b      	cbnz	r3, a35c <_malloc_r+0x3c>
    a354:	4630      	mov	r0, r6
    a356:	f000 f841 	bl	a3dc <_sbrk_r>
    a35a:	6020      	str	r0, [r4, #0]
    a35c:	4629      	mov	r1, r5
    a35e:	4630      	mov	r0, r6
    a360:	f000 f83c 	bl	a3dc <_sbrk_r>
    a364:	1c43      	adds	r3, r0, #1
    a366:	d126      	bne.n	a3b6 <_malloc_r+0x96>
    a368:	230c      	movs	r3, #12
    a36a:	6033      	str	r3, [r6, #0]
    a36c:	4630      	mov	r0, r6
    a36e:	f000 f872 	bl	a456 <__malloc_unlock>
    a372:	e7e4      	b.n	a33e <_malloc_r+0x1e>
    a374:	680b      	ldr	r3, [r1, #0]
    a376:	1b5b      	subs	r3, r3, r5
    a378:	d41a      	bmi.n	a3b0 <_malloc_r+0x90>
    a37a:	2b0b      	cmp	r3, #11
    a37c:	d90f      	bls.n	a39e <_malloc_r+0x7e>
    a37e:	600b      	str	r3, [r1, #0]
    a380:	50cd      	str	r5, [r1, r3]
    a382:	18cc      	adds	r4, r1, r3
    a384:	4630      	mov	r0, r6
    a386:	f000 f866 	bl	a456 <__malloc_unlock>
    a38a:	f104 000b 	add.w	r0, r4, #11
    a38e:	1d23      	adds	r3, r4, #4
    a390:	f020 0007 	bic.w	r0, r0, #7
    a394:	1ac3      	subs	r3, r0, r3
    a396:	d01b      	beq.n	a3d0 <_malloc_r+0xb0>
    a398:	425a      	negs	r2, r3
    a39a:	50e2      	str	r2, [r4, r3]
    a39c:	bd70      	pop	{r4, r5, r6, pc}
    a39e:	428c      	cmp	r4, r1
    a3a0:	bf0d      	iteet	eq
    a3a2:	6863      	ldreq	r3, [r4, #4]
    a3a4:	684b      	ldrne	r3, [r1, #4]
    a3a6:	6063      	strne	r3, [r4, #4]
    a3a8:	6013      	streq	r3, [r2, #0]
    a3aa:	bf18      	it	ne
    a3ac:	460c      	movne	r4, r1
    a3ae:	e7e9      	b.n	a384 <_malloc_r+0x64>
    a3b0:	460c      	mov	r4, r1
    a3b2:	6849      	ldr	r1, [r1, #4]
    a3b4:	e7ca      	b.n	a34c <_malloc_r+0x2c>
    a3b6:	1cc4      	adds	r4, r0, #3
    a3b8:	f024 0403 	bic.w	r4, r4, #3
    a3bc:	42a0      	cmp	r0, r4
    a3be:	d005      	beq.n	a3cc <_malloc_r+0xac>
    a3c0:	1a21      	subs	r1, r4, r0
    a3c2:	4630      	mov	r0, r6
    a3c4:	f000 f80a 	bl	a3dc <_sbrk_r>
    a3c8:	3001      	adds	r0, #1
    a3ca:	d0cd      	beq.n	a368 <_malloc_r+0x48>
    a3cc:	6025      	str	r5, [r4, #0]
    a3ce:	e7d9      	b.n	a384 <_malloc_r+0x64>
    a3d0:	bd70      	pop	{r4, r5, r6, pc}
    a3d2:	bf00      	nop
    a3d4:	200012d0 	.word	0x200012d0
    a3d8:	200012d4 	.word	0x200012d4

0000a3dc <_sbrk_r>:
    a3dc:	b538      	push	{r3, r4, r5, lr}
    a3de:	4c06      	ldr	r4, [pc, #24]	; (a3f8 <_sbrk_r+0x1c>)
    a3e0:	2300      	movs	r3, #0
    a3e2:	4605      	mov	r5, r0
    a3e4:	4608      	mov	r0, r1
    a3e6:	6023      	str	r3, [r4, #0]
    a3e8:	f7f8 f91a 	bl	2620 <_sbrk>
    a3ec:	1c43      	adds	r3, r0, #1
    a3ee:	d102      	bne.n	a3f6 <_sbrk_r+0x1a>
    a3f0:	6823      	ldr	r3, [r4, #0]
    a3f2:	b103      	cbz	r3, a3f6 <_sbrk_r+0x1a>
    a3f4:	602b      	str	r3, [r5, #0]
    a3f6:	bd38      	pop	{r3, r4, r5, pc}
    a3f8:	20002c18 	.word	0x20002c18

0000a3fc <siprintf>:
    a3fc:	b40e      	push	{r1, r2, r3}
    a3fe:	b500      	push	{lr}
    a400:	b09c      	sub	sp, #112	; 0x70
    a402:	f44f 7102 	mov.w	r1, #520	; 0x208
    a406:	ab1d      	add	r3, sp, #116	; 0x74
    a408:	f8ad 1014 	strh.w	r1, [sp, #20]
    a40c:	9002      	str	r0, [sp, #8]
    a40e:	9006      	str	r0, [sp, #24]
    a410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a414:	480a      	ldr	r0, [pc, #40]	; (a440 <siprintf+0x44>)
    a416:	9104      	str	r1, [sp, #16]
    a418:	9107      	str	r1, [sp, #28]
    a41a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a41e:	f853 2b04 	ldr.w	r2, [r3], #4
    a422:	f8ad 1016 	strh.w	r1, [sp, #22]
    a426:	6800      	ldr	r0, [r0, #0]
    a428:	9301      	str	r3, [sp, #4]
    a42a:	a902      	add	r1, sp, #8
    a42c:	f000 f870 	bl	a510 <_svfiprintf_r>
    a430:	9b02      	ldr	r3, [sp, #8]
    a432:	2200      	movs	r2, #0
    a434:	701a      	strb	r2, [r3, #0]
    a436:	b01c      	add	sp, #112	; 0x70
    a438:	f85d eb04 	ldr.w	lr, [sp], #4
    a43c:	b003      	add	sp, #12
    a43e:	4770      	bx	lr
    a440:	2000051c 	.word	0x2000051c

0000a444 <strlen>:
    a444:	4603      	mov	r3, r0
    a446:	f813 2b01 	ldrb.w	r2, [r3], #1
    a44a:	2a00      	cmp	r2, #0
    a44c:	d1fb      	bne.n	a446 <strlen+0x2>
    a44e:	1a18      	subs	r0, r3, r0
    a450:	3801      	subs	r0, #1
    a452:	4770      	bx	lr

0000a454 <__malloc_lock>:
    a454:	4770      	bx	lr

0000a456 <__malloc_unlock>:
    a456:	4770      	bx	lr

0000a458 <__ssputs_r>:
    a458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a45c:	688e      	ldr	r6, [r1, #8]
    a45e:	429e      	cmp	r6, r3
    a460:	4682      	mov	sl, r0
    a462:	460c      	mov	r4, r1
    a464:	4691      	mov	r9, r2
    a466:	4698      	mov	r8, r3
    a468:	d835      	bhi.n	a4d6 <__ssputs_r+0x7e>
    a46a:	898a      	ldrh	r2, [r1, #12]
    a46c:	f412 6f90 	tst.w	r2, #1152	; 0x480
    a470:	d031      	beq.n	a4d6 <__ssputs_r+0x7e>
    a472:	6825      	ldr	r5, [r4, #0]
    a474:	6909      	ldr	r1, [r1, #16]
    a476:	1a6f      	subs	r7, r5, r1
    a478:	6965      	ldr	r5, [r4, #20]
    a47a:	2302      	movs	r3, #2
    a47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a480:	fb95 f5f3 	sdiv	r5, r5, r3
    a484:	f108 0301 	add.w	r3, r8, #1
    a488:	443b      	add	r3, r7
    a48a:	429d      	cmp	r5, r3
    a48c:	bf38      	it	cc
    a48e:	461d      	movcc	r5, r3
    a490:	0553      	lsls	r3, r2, #21
    a492:	d531      	bpl.n	a4f8 <__ssputs_r+0xa0>
    a494:	4629      	mov	r1, r5
    a496:	f7ff ff43 	bl	a320 <_malloc_r>
    a49a:	4606      	mov	r6, r0
    a49c:	b950      	cbnz	r0, a4b4 <__ssputs_r+0x5c>
    a49e:	230c      	movs	r3, #12
    a4a0:	f8ca 3000 	str.w	r3, [sl]
    a4a4:	89a3      	ldrh	r3, [r4, #12]
    a4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a4aa:	81a3      	strh	r3, [r4, #12]
    a4ac:	f04f 30ff 	mov.w	r0, #4294967295
    a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a4b4:	463a      	mov	r2, r7
    a4b6:	6921      	ldr	r1, [r4, #16]
    a4b8:	f7ff fed0 	bl	a25c <memcpy>
    a4bc:	89a3      	ldrh	r3, [r4, #12]
    a4be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    a4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a4c6:	81a3      	strh	r3, [r4, #12]
    a4c8:	6126      	str	r6, [r4, #16]
    a4ca:	6165      	str	r5, [r4, #20]
    a4cc:	443e      	add	r6, r7
    a4ce:	1bed      	subs	r5, r5, r7
    a4d0:	6026      	str	r6, [r4, #0]
    a4d2:	60a5      	str	r5, [r4, #8]
    a4d4:	4646      	mov	r6, r8
    a4d6:	4546      	cmp	r6, r8
    a4d8:	bf28      	it	cs
    a4da:	4646      	movcs	r6, r8
    a4dc:	4632      	mov	r2, r6
    a4de:	4649      	mov	r1, r9
    a4e0:	6820      	ldr	r0, [r4, #0]
    a4e2:	f000 faf5 	bl	aad0 <memmove>
    a4e6:	68a3      	ldr	r3, [r4, #8]
    a4e8:	1b9b      	subs	r3, r3, r6
    a4ea:	60a3      	str	r3, [r4, #8]
    a4ec:	6823      	ldr	r3, [r4, #0]
    a4ee:	441e      	add	r6, r3
    a4f0:	6026      	str	r6, [r4, #0]
    a4f2:	2000      	movs	r0, #0
    a4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a4f8:	462a      	mov	r2, r5
    a4fa:	f000 fb03 	bl	ab04 <_realloc_r>
    a4fe:	4606      	mov	r6, r0
    a500:	2800      	cmp	r0, #0
    a502:	d1e1      	bne.n	a4c8 <__ssputs_r+0x70>
    a504:	6921      	ldr	r1, [r4, #16]
    a506:	4650      	mov	r0, sl
    a508:	f7ff febc 	bl	a284 <_free_r>
    a50c:	e7c7      	b.n	a49e <__ssputs_r+0x46>
	...

0000a510 <_svfiprintf_r>:
    a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a514:	b09d      	sub	sp, #116	; 0x74
    a516:	4680      	mov	r8, r0
    a518:	9303      	str	r3, [sp, #12]
    a51a:	898b      	ldrh	r3, [r1, #12]
    a51c:	061c      	lsls	r4, r3, #24
    a51e:	460d      	mov	r5, r1
    a520:	4616      	mov	r6, r2
    a522:	d50f      	bpl.n	a544 <_svfiprintf_r+0x34>
    a524:	690b      	ldr	r3, [r1, #16]
    a526:	b96b      	cbnz	r3, a544 <_svfiprintf_r+0x34>
    a528:	2140      	movs	r1, #64	; 0x40
    a52a:	f7ff fef9 	bl	a320 <_malloc_r>
    a52e:	6028      	str	r0, [r5, #0]
    a530:	6128      	str	r0, [r5, #16]
    a532:	b928      	cbnz	r0, a540 <_svfiprintf_r+0x30>
    a534:	230c      	movs	r3, #12
    a536:	f8c8 3000 	str.w	r3, [r8]
    a53a:	f04f 30ff 	mov.w	r0, #4294967295
    a53e:	e0c5      	b.n	a6cc <_svfiprintf_r+0x1bc>
    a540:	2340      	movs	r3, #64	; 0x40
    a542:	616b      	str	r3, [r5, #20]
    a544:	2300      	movs	r3, #0
    a546:	9309      	str	r3, [sp, #36]	; 0x24
    a548:	2320      	movs	r3, #32
    a54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    a54e:	2330      	movs	r3, #48	; 0x30
    a550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    a554:	f04f 0b01 	mov.w	fp, #1
    a558:	4637      	mov	r7, r6
    a55a:	463c      	mov	r4, r7
    a55c:	f814 3b01 	ldrb.w	r3, [r4], #1
    a560:	2b00      	cmp	r3, #0
    a562:	d13c      	bne.n	a5de <_svfiprintf_r+0xce>
    a564:	ebb7 0a06 	subs.w	sl, r7, r6
    a568:	d00b      	beq.n	a582 <_svfiprintf_r+0x72>
    a56a:	4653      	mov	r3, sl
    a56c:	4632      	mov	r2, r6
    a56e:	4629      	mov	r1, r5
    a570:	4640      	mov	r0, r8
    a572:	f7ff ff71 	bl	a458 <__ssputs_r>
    a576:	3001      	adds	r0, #1
    a578:	f000 80a3 	beq.w	a6c2 <_svfiprintf_r+0x1b2>
    a57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a57e:	4453      	add	r3, sl
    a580:	9309      	str	r3, [sp, #36]	; 0x24
    a582:	783b      	ldrb	r3, [r7, #0]
    a584:	2b00      	cmp	r3, #0
    a586:	f000 809c 	beq.w	a6c2 <_svfiprintf_r+0x1b2>
    a58a:	2300      	movs	r3, #0
    a58c:	f04f 32ff 	mov.w	r2, #4294967295
    a590:	9304      	str	r3, [sp, #16]
    a592:	9307      	str	r3, [sp, #28]
    a594:	9205      	str	r2, [sp, #20]
    a596:	9306      	str	r3, [sp, #24]
    a598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    a59c:	931a      	str	r3, [sp, #104]	; 0x68
    a59e:	2205      	movs	r2, #5
    a5a0:	7821      	ldrb	r1, [r4, #0]
    a5a2:	4850      	ldr	r0, [pc, #320]	; (a6e4 <_svfiprintf_r+0x1d4>)
    a5a4:	f000 fa44 	bl	aa30 <memchr>
    a5a8:	1c67      	adds	r7, r4, #1
    a5aa:	9b04      	ldr	r3, [sp, #16]
    a5ac:	b9d8      	cbnz	r0, a5e6 <_svfiprintf_r+0xd6>
    a5ae:	06d9      	lsls	r1, r3, #27
    a5b0:	bf44      	itt	mi
    a5b2:	2220      	movmi	r2, #32
    a5b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a5b8:	071a      	lsls	r2, r3, #28
    a5ba:	bf44      	itt	mi
    a5bc:	222b      	movmi	r2, #43	; 0x2b
    a5be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a5c2:	7822      	ldrb	r2, [r4, #0]
    a5c4:	2a2a      	cmp	r2, #42	; 0x2a
    a5c6:	d016      	beq.n	a5f6 <_svfiprintf_r+0xe6>
    a5c8:	9a07      	ldr	r2, [sp, #28]
    a5ca:	2100      	movs	r1, #0
    a5cc:	200a      	movs	r0, #10
    a5ce:	4627      	mov	r7, r4
    a5d0:	3401      	adds	r4, #1
    a5d2:	783b      	ldrb	r3, [r7, #0]
    a5d4:	3b30      	subs	r3, #48	; 0x30
    a5d6:	2b09      	cmp	r3, #9
    a5d8:	d951      	bls.n	a67e <_svfiprintf_r+0x16e>
    a5da:	b1c9      	cbz	r1, a610 <_svfiprintf_r+0x100>
    a5dc:	e011      	b.n	a602 <_svfiprintf_r+0xf2>
    a5de:	2b25      	cmp	r3, #37	; 0x25
    a5e0:	d0c0      	beq.n	a564 <_svfiprintf_r+0x54>
    a5e2:	4627      	mov	r7, r4
    a5e4:	e7b9      	b.n	a55a <_svfiprintf_r+0x4a>
    a5e6:	4a3f      	ldr	r2, [pc, #252]	; (a6e4 <_svfiprintf_r+0x1d4>)
    a5e8:	1a80      	subs	r0, r0, r2
    a5ea:	fa0b f000 	lsl.w	r0, fp, r0
    a5ee:	4318      	orrs	r0, r3
    a5f0:	9004      	str	r0, [sp, #16]
    a5f2:	463c      	mov	r4, r7
    a5f4:	e7d3      	b.n	a59e <_svfiprintf_r+0x8e>
    a5f6:	9a03      	ldr	r2, [sp, #12]
    a5f8:	1d11      	adds	r1, r2, #4
    a5fa:	6812      	ldr	r2, [r2, #0]
    a5fc:	9103      	str	r1, [sp, #12]
    a5fe:	2a00      	cmp	r2, #0
    a600:	db01      	blt.n	a606 <_svfiprintf_r+0xf6>
    a602:	9207      	str	r2, [sp, #28]
    a604:	e004      	b.n	a610 <_svfiprintf_r+0x100>
    a606:	4252      	negs	r2, r2
    a608:	f043 0302 	orr.w	r3, r3, #2
    a60c:	9207      	str	r2, [sp, #28]
    a60e:	9304      	str	r3, [sp, #16]
    a610:	783b      	ldrb	r3, [r7, #0]
    a612:	2b2e      	cmp	r3, #46	; 0x2e
    a614:	d10e      	bne.n	a634 <_svfiprintf_r+0x124>
    a616:	787b      	ldrb	r3, [r7, #1]
    a618:	2b2a      	cmp	r3, #42	; 0x2a
    a61a:	f107 0101 	add.w	r1, r7, #1
    a61e:	d132      	bne.n	a686 <_svfiprintf_r+0x176>
    a620:	9b03      	ldr	r3, [sp, #12]
    a622:	1d1a      	adds	r2, r3, #4
    a624:	681b      	ldr	r3, [r3, #0]
    a626:	9203      	str	r2, [sp, #12]
    a628:	2b00      	cmp	r3, #0
    a62a:	bfb8      	it	lt
    a62c:	f04f 33ff 	movlt.w	r3, #4294967295
    a630:	3702      	adds	r7, #2
    a632:	9305      	str	r3, [sp, #20]
    a634:	4c2c      	ldr	r4, [pc, #176]	; (a6e8 <_svfiprintf_r+0x1d8>)
    a636:	7839      	ldrb	r1, [r7, #0]
    a638:	2203      	movs	r2, #3
    a63a:	4620      	mov	r0, r4
    a63c:	f000 f9f8 	bl	aa30 <memchr>
    a640:	b138      	cbz	r0, a652 <_svfiprintf_r+0x142>
    a642:	2340      	movs	r3, #64	; 0x40
    a644:	1b00      	subs	r0, r0, r4
    a646:	fa03 f000 	lsl.w	r0, r3, r0
    a64a:	9b04      	ldr	r3, [sp, #16]
    a64c:	4303      	orrs	r3, r0
    a64e:	9304      	str	r3, [sp, #16]
    a650:	3701      	adds	r7, #1
    a652:	7839      	ldrb	r1, [r7, #0]
    a654:	4825      	ldr	r0, [pc, #148]	; (a6ec <_svfiprintf_r+0x1dc>)
    a656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    a65a:	2206      	movs	r2, #6
    a65c:	1c7e      	adds	r6, r7, #1
    a65e:	f000 f9e7 	bl	aa30 <memchr>
    a662:	2800      	cmp	r0, #0
    a664:	d035      	beq.n	a6d2 <_svfiprintf_r+0x1c2>
    a666:	4b22      	ldr	r3, [pc, #136]	; (a6f0 <_svfiprintf_r+0x1e0>)
    a668:	b9fb      	cbnz	r3, a6aa <_svfiprintf_r+0x19a>
    a66a:	9b03      	ldr	r3, [sp, #12]
    a66c:	3307      	adds	r3, #7
    a66e:	f023 0307 	bic.w	r3, r3, #7
    a672:	3308      	adds	r3, #8
    a674:	9303      	str	r3, [sp, #12]
    a676:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a678:	444b      	add	r3, r9
    a67a:	9309      	str	r3, [sp, #36]	; 0x24
    a67c:	e76c      	b.n	a558 <_svfiprintf_r+0x48>
    a67e:	fb00 3202 	mla	r2, r0, r2, r3
    a682:	2101      	movs	r1, #1
    a684:	e7a3      	b.n	a5ce <_svfiprintf_r+0xbe>
    a686:	2300      	movs	r3, #0
    a688:	9305      	str	r3, [sp, #20]
    a68a:	4618      	mov	r0, r3
    a68c:	240a      	movs	r4, #10
    a68e:	460f      	mov	r7, r1
    a690:	3101      	adds	r1, #1
    a692:	783a      	ldrb	r2, [r7, #0]
    a694:	3a30      	subs	r2, #48	; 0x30
    a696:	2a09      	cmp	r2, #9
    a698:	d903      	bls.n	a6a2 <_svfiprintf_r+0x192>
    a69a:	2b00      	cmp	r3, #0
    a69c:	d0ca      	beq.n	a634 <_svfiprintf_r+0x124>
    a69e:	9005      	str	r0, [sp, #20]
    a6a0:	e7c8      	b.n	a634 <_svfiprintf_r+0x124>
    a6a2:	fb04 2000 	mla	r0, r4, r0, r2
    a6a6:	2301      	movs	r3, #1
    a6a8:	e7f1      	b.n	a68e <_svfiprintf_r+0x17e>
    a6aa:	ab03      	add	r3, sp, #12
    a6ac:	9300      	str	r3, [sp, #0]
    a6ae:	462a      	mov	r2, r5
    a6b0:	4b10      	ldr	r3, [pc, #64]	; (a6f4 <_svfiprintf_r+0x1e4>)
    a6b2:	a904      	add	r1, sp, #16
    a6b4:	4640      	mov	r0, r8
    a6b6:	f3af 8000 	nop.w
    a6ba:	f1b0 3fff 	cmp.w	r0, #4294967295
    a6be:	4681      	mov	r9, r0
    a6c0:	d1d9      	bne.n	a676 <_svfiprintf_r+0x166>
    a6c2:	89ab      	ldrh	r3, [r5, #12]
    a6c4:	065b      	lsls	r3, r3, #25
    a6c6:	f53f af38 	bmi.w	a53a <_svfiprintf_r+0x2a>
    a6ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    a6cc:	b01d      	add	sp, #116	; 0x74
    a6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6d2:	ab03      	add	r3, sp, #12
    a6d4:	9300      	str	r3, [sp, #0]
    a6d6:	462a      	mov	r2, r5
    a6d8:	4b06      	ldr	r3, [pc, #24]	; (a6f4 <_svfiprintf_r+0x1e4>)
    a6da:	a904      	add	r1, sp, #16
    a6dc:	4640      	mov	r0, r8
    a6de:	f000 f881 	bl	a7e4 <_printf_i>
    a6e2:	e7ea      	b.n	a6ba <_svfiprintf_r+0x1aa>
    a6e4:	0000b360 	.word	0x0000b360
    a6e8:	0000b366 	.word	0x0000b366
    a6ec:	0000b36a 	.word	0x0000b36a
    a6f0:	00000000 	.word	0x00000000
    a6f4:	0000a459 	.word	0x0000a459

0000a6f8 <_printf_common>:
    a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6fc:	4691      	mov	r9, r2
    a6fe:	461f      	mov	r7, r3
    a700:	688a      	ldr	r2, [r1, #8]
    a702:	690b      	ldr	r3, [r1, #16]
    a704:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a708:	4293      	cmp	r3, r2
    a70a:	bfb8      	it	lt
    a70c:	4613      	movlt	r3, r2
    a70e:	f8c9 3000 	str.w	r3, [r9]
    a712:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    a716:	4606      	mov	r6, r0
    a718:	460c      	mov	r4, r1
    a71a:	b112      	cbz	r2, a722 <_printf_common+0x2a>
    a71c:	3301      	adds	r3, #1
    a71e:	f8c9 3000 	str.w	r3, [r9]
    a722:	6823      	ldr	r3, [r4, #0]
    a724:	0699      	lsls	r1, r3, #26
    a726:	bf42      	ittt	mi
    a728:	f8d9 3000 	ldrmi.w	r3, [r9]
    a72c:	3302      	addmi	r3, #2
    a72e:	f8c9 3000 	strmi.w	r3, [r9]
    a732:	6825      	ldr	r5, [r4, #0]
    a734:	f015 0506 	ands.w	r5, r5, #6
    a738:	d107      	bne.n	a74a <_printf_common+0x52>
    a73a:	f104 0a19 	add.w	sl, r4, #25
    a73e:	68e3      	ldr	r3, [r4, #12]
    a740:	f8d9 2000 	ldr.w	r2, [r9]
    a744:	1a9b      	subs	r3, r3, r2
    a746:	429d      	cmp	r5, r3
    a748:	db29      	blt.n	a79e <_printf_common+0xa6>
    a74a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    a74e:	6822      	ldr	r2, [r4, #0]
    a750:	3300      	adds	r3, #0
    a752:	bf18      	it	ne
    a754:	2301      	movne	r3, #1
    a756:	0692      	lsls	r2, r2, #26
    a758:	d42e      	bmi.n	a7b8 <_printf_common+0xc0>
    a75a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    a75e:	4639      	mov	r1, r7
    a760:	4630      	mov	r0, r6
    a762:	47c0      	blx	r8
    a764:	3001      	adds	r0, #1
    a766:	d021      	beq.n	a7ac <_printf_common+0xb4>
    a768:	6823      	ldr	r3, [r4, #0]
    a76a:	68e5      	ldr	r5, [r4, #12]
    a76c:	f8d9 2000 	ldr.w	r2, [r9]
    a770:	f003 0306 	and.w	r3, r3, #6
    a774:	2b04      	cmp	r3, #4
    a776:	bf08      	it	eq
    a778:	1aad      	subeq	r5, r5, r2
    a77a:	68a3      	ldr	r3, [r4, #8]
    a77c:	6922      	ldr	r2, [r4, #16]
    a77e:	bf0c      	ite	eq
    a780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    a784:	2500      	movne	r5, #0
    a786:	4293      	cmp	r3, r2
    a788:	bfc4      	itt	gt
    a78a:	1a9b      	subgt	r3, r3, r2
    a78c:	18ed      	addgt	r5, r5, r3
    a78e:	f04f 0900 	mov.w	r9, #0
    a792:	341a      	adds	r4, #26
    a794:	454d      	cmp	r5, r9
    a796:	d11b      	bne.n	a7d0 <_printf_common+0xd8>
    a798:	2000      	movs	r0, #0
    a79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a79e:	2301      	movs	r3, #1
    a7a0:	4652      	mov	r2, sl
    a7a2:	4639      	mov	r1, r7
    a7a4:	4630      	mov	r0, r6
    a7a6:	47c0      	blx	r8
    a7a8:	3001      	adds	r0, #1
    a7aa:	d103      	bne.n	a7b4 <_printf_common+0xbc>
    a7ac:	f04f 30ff 	mov.w	r0, #4294967295
    a7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7b4:	3501      	adds	r5, #1
    a7b6:	e7c2      	b.n	a73e <_printf_common+0x46>
    a7b8:	18e1      	adds	r1, r4, r3
    a7ba:	1c5a      	adds	r2, r3, #1
    a7bc:	2030      	movs	r0, #48	; 0x30
    a7be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    a7c2:	4422      	add	r2, r4
    a7c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    a7c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    a7cc:	3302      	adds	r3, #2
    a7ce:	e7c4      	b.n	a75a <_printf_common+0x62>
    a7d0:	2301      	movs	r3, #1
    a7d2:	4622      	mov	r2, r4
    a7d4:	4639      	mov	r1, r7
    a7d6:	4630      	mov	r0, r6
    a7d8:	47c0      	blx	r8
    a7da:	3001      	adds	r0, #1
    a7dc:	d0e6      	beq.n	a7ac <_printf_common+0xb4>
    a7de:	f109 0901 	add.w	r9, r9, #1
    a7e2:	e7d7      	b.n	a794 <_printf_common+0x9c>

0000a7e4 <_printf_i>:
    a7e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a7e8:	4617      	mov	r7, r2
    a7ea:	7e0a      	ldrb	r2, [r1, #24]
    a7ec:	b085      	sub	sp, #20
    a7ee:	2a6e      	cmp	r2, #110	; 0x6e
    a7f0:	4698      	mov	r8, r3
    a7f2:	4606      	mov	r6, r0
    a7f4:	460c      	mov	r4, r1
    a7f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a7f8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    a7fc:	f000 80bc 	beq.w	a978 <_printf_i+0x194>
    a800:	d81a      	bhi.n	a838 <_printf_i+0x54>
    a802:	2a63      	cmp	r2, #99	; 0x63
    a804:	d02e      	beq.n	a864 <_printf_i+0x80>
    a806:	d80a      	bhi.n	a81e <_printf_i+0x3a>
    a808:	2a00      	cmp	r2, #0
    a80a:	f000 80c8 	beq.w	a99e <_printf_i+0x1ba>
    a80e:	2a58      	cmp	r2, #88	; 0x58
    a810:	f000 808a 	beq.w	a928 <_printf_i+0x144>
    a814:	f104 0542 	add.w	r5, r4, #66	; 0x42
    a818:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    a81c:	e02a      	b.n	a874 <_printf_i+0x90>
    a81e:	2a64      	cmp	r2, #100	; 0x64
    a820:	d001      	beq.n	a826 <_printf_i+0x42>
    a822:	2a69      	cmp	r2, #105	; 0x69
    a824:	d1f6      	bne.n	a814 <_printf_i+0x30>
    a826:	6821      	ldr	r1, [r4, #0]
    a828:	681a      	ldr	r2, [r3, #0]
    a82a:	f011 0f80 	tst.w	r1, #128	; 0x80
    a82e:	d023      	beq.n	a878 <_printf_i+0x94>
    a830:	1d11      	adds	r1, r2, #4
    a832:	6019      	str	r1, [r3, #0]
    a834:	6813      	ldr	r3, [r2, #0]
    a836:	e027      	b.n	a888 <_printf_i+0xa4>
    a838:	2a73      	cmp	r2, #115	; 0x73
    a83a:	f000 80b4 	beq.w	a9a6 <_printf_i+0x1c2>
    a83e:	d808      	bhi.n	a852 <_printf_i+0x6e>
    a840:	2a6f      	cmp	r2, #111	; 0x6f
    a842:	d02a      	beq.n	a89a <_printf_i+0xb6>
    a844:	2a70      	cmp	r2, #112	; 0x70
    a846:	d1e5      	bne.n	a814 <_printf_i+0x30>
    a848:	680a      	ldr	r2, [r1, #0]
    a84a:	f042 0220 	orr.w	r2, r2, #32
    a84e:	600a      	str	r2, [r1, #0]
    a850:	e003      	b.n	a85a <_printf_i+0x76>
    a852:	2a75      	cmp	r2, #117	; 0x75
    a854:	d021      	beq.n	a89a <_printf_i+0xb6>
    a856:	2a78      	cmp	r2, #120	; 0x78
    a858:	d1dc      	bne.n	a814 <_printf_i+0x30>
    a85a:	2278      	movs	r2, #120	; 0x78
    a85c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    a860:	496e      	ldr	r1, [pc, #440]	; (aa1c <_printf_i+0x238>)
    a862:	e064      	b.n	a92e <_printf_i+0x14a>
    a864:	681a      	ldr	r2, [r3, #0]
    a866:	f101 0542 	add.w	r5, r1, #66	; 0x42
    a86a:	1d11      	adds	r1, r2, #4
    a86c:	6019      	str	r1, [r3, #0]
    a86e:	6813      	ldr	r3, [r2, #0]
    a870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    a874:	2301      	movs	r3, #1
    a876:	e0a3      	b.n	a9c0 <_printf_i+0x1dc>
    a878:	f011 0f40 	tst.w	r1, #64	; 0x40
    a87c:	f102 0104 	add.w	r1, r2, #4
    a880:	6019      	str	r1, [r3, #0]
    a882:	d0d7      	beq.n	a834 <_printf_i+0x50>
    a884:	f9b2 3000 	ldrsh.w	r3, [r2]
    a888:	2b00      	cmp	r3, #0
    a88a:	da03      	bge.n	a894 <_printf_i+0xb0>
    a88c:	222d      	movs	r2, #45	; 0x2d
    a88e:	425b      	negs	r3, r3
    a890:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    a894:	4962      	ldr	r1, [pc, #392]	; (aa20 <_printf_i+0x23c>)
    a896:	220a      	movs	r2, #10
    a898:	e017      	b.n	a8ca <_printf_i+0xe6>
    a89a:	6820      	ldr	r0, [r4, #0]
    a89c:	6819      	ldr	r1, [r3, #0]
    a89e:	f010 0f80 	tst.w	r0, #128	; 0x80
    a8a2:	d003      	beq.n	a8ac <_printf_i+0xc8>
    a8a4:	1d08      	adds	r0, r1, #4
    a8a6:	6018      	str	r0, [r3, #0]
    a8a8:	680b      	ldr	r3, [r1, #0]
    a8aa:	e006      	b.n	a8ba <_printf_i+0xd6>
    a8ac:	f010 0f40 	tst.w	r0, #64	; 0x40
    a8b0:	f101 0004 	add.w	r0, r1, #4
    a8b4:	6018      	str	r0, [r3, #0]
    a8b6:	d0f7      	beq.n	a8a8 <_printf_i+0xc4>
    a8b8:	880b      	ldrh	r3, [r1, #0]
    a8ba:	4959      	ldr	r1, [pc, #356]	; (aa20 <_printf_i+0x23c>)
    a8bc:	2a6f      	cmp	r2, #111	; 0x6f
    a8be:	bf14      	ite	ne
    a8c0:	220a      	movne	r2, #10
    a8c2:	2208      	moveq	r2, #8
    a8c4:	2000      	movs	r0, #0
    a8c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    a8ca:	6865      	ldr	r5, [r4, #4]
    a8cc:	60a5      	str	r5, [r4, #8]
    a8ce:	2d00      	cmp	r5, #0
    a8d0:	f2c0 809c 	blt.w	aa0c <_printf_i+0x228>
    a8d4:	6820      	ldr	r0, [r4, #0]
    a8d6:	f020 0004 	bic.w	r0, r0, #4
    a8da:	6020      	str	r0, [r4, #0]
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d13f      	bne.n	a960 <_printf_i+0x17c>
    a8e0:	2d00      	cmp	r5, #0
    a8e2:	f040 8095 	bne.w	aa10 <_printf_i+0x22c>
    a8e6:	4675      	mov	r5, lr
    a8e8:	2a08      	cmp	r2, #8
    a8ea:	d10b      	bne.n	a904 <_printf_i+0x120>
    a8ec:	6823      	ldr	r3, [r4, #0]
    a8ee:	07da      	lsls	r2, r3, #31
    a8f0:	d508      	bpl.n	a904 <_printf_i+0x120>
    a8f2:	6923      	ldr	r3, [r4, #16]
    a8f4:	6862      	ldr	r2, [r4, #4]
    a8f6:	429a      	cmp	r2, r3
    a8f8:	bfde      	ittt	le
    a8fa:	2330      	movle	r3, #48	; 0x30
    a8fc:	f805 3c01 	strble.w	r3, [r5, #-1]
    a900:	f105 35ff 	addle.w	r5, r5, #4294967295
    a904:	ebae 0305 	sub.w	r3, lr, r5
    a908:	6123      	str	r3, [r4, #16]
    a90a:	f8cd 8000 	str.w	r8, [sp]
    a90e:	463b      	mov	r3, r7
    a910:	aa03      	add	r2, sp, #12
    a912:	4621      	mov	r1, r4
    a914:	4630      	mov	r0, r6
    a916:	f7ff feef 	bl	a6f8 <_printf_common>
    a91a:	3001      	adds	r0, #1
    a91c:	d155      	bne.n	a9ca <_printf_i+0x1e6>
    a91e:	f04f 30ff 	mov.w	r0, #4294967295
    a922:	b005      	add	sp, #20
    a924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a928:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    a92c:	493c      	ldr	r1, [pc, #240]	; (aa20 <_printf_i+0x23c>)
    a92e:	6822      	ldr	r2, [r4, #0]
    a930:	6818      	ldr	r0, [r3, #0]
    a932:	f012 0f80 	tst.w	r2, #128	; 0x80
    a936:	f100 0504 	add.w	r5, r0, #4
    a93a:	601d      	str	r5, [r3, #0]
    a93c:	d001      	beq.n	a942 <_printf_i+0x15e>
    a93e:	6803      	ldr	r3, [r0, #0]
    a940:	e002      	b.n	a948 <_printf_i+0x164>
    a942:	0655      	lsls	r5, r2, #25
    a944:	d5fb      	bpl.n	a93e <_printf_i+0x15a>
    a946:	8803      	ldrh	r3, [r0, #0]
    a948:	07d0      	lsls	r0, r2, #31
    a94a:	bf44      	itt	mi
    a94c:	f042 0220 	orrmi.w	r2, r2, #32
    a950:	6022      	strmi	r2, [r4, #0]
    a952:	b91b      	cbnz	r3, a95c <_printf_i+0x178>
    a954:	6822      	ldr	r2, [r4, #0]
    a956:	f022 0220 	bic.w	r2, r2, #32
    a95a:	6022      	str	r2, [r4, #0]
    a95c:	2210      	movs	r2, #16
    a95e:	e7b1      	b.n	a8c4 <_printf_i+0xe0>
    a960:	4675      	mov	r5, lr
    a962:	fbb3 f0f2 	udiv	r0, r3, r2
    a966:	fb02 3310 	mls	r3, r2, r0, r3
    a96a:	5ccb      	ldrb	r3, [r1, r3]
    a96c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    a970:	4603      	mov	r3, r0
    a972:	2800      	cmp	r0, #0
    a974:	d1f5      	bne.n	a962 <_printf_i+0x17e>
    a976:	e7b7      	b.n	a8e8 <_printf_i+0x104>
    a978:	6808      	ldr	r0, [r1, #0]
    a97a:	681a      	ldr	r2, [r3, #0]
    a97c:	6949      	ldr	r1, [r1, #20]
    a97e:	f010 0f80 	tst.w	r0, #128	; 0x80
    a982:	d004      	beq.n	a98e <_printf_i+0x1aa>
    a984:	1d10      	adds	r0, r2, #4
    a986:	6018      	str	r0, [r3, #0]
    a988:	6813      	ldr	r3, [r2, #0]
    a98a:	6019      	str	r1, [r3, #0]
    a98c:	e007      	b.n	a99e <_printf_i+0x1ba>
    a98e:	f010 0f40 	tst.w	r0, #64	; 0x40
    a992:	f102 0004 	add.w	r0, r2, #4
    a996:	6018      	str	r0, [r3, #0]
    a998:	6813      	ldr	r3, [r2, #0]
    a99a:	d0f6      	beq.n	a98a <_printf_i+0x1a6>
    a99c:	8019      	strh	r1, [r3, #0]
    a99e:	2300      	movs	r3, #0
    a9a0:	6123      	str	r3, [r4, #16]
    a9a2:	4675      	mov	r5, lr
    a9a4:	e7b1      	b.n	a90a <_printf_i+0x126>
    a9a6:	681a      	ldr	r2, [r3, #0]
    a9a8:	1d11      	adds	r1, r2, #4
    a9aa:	6019      	str	r1, [r3, #0]
    a9ac:	6815      	ldr	r5, [r2, #0]
    a9ae:	6862      	ldr	r2, [r4, #4]
    a9b0:	2100      	movs	r1, #0
    a9b2:	4628      	mov	r0, r5
    a9b4:	f000 f83c 	bl	aa30 <memchr>
    a9b8:	b108      	cbz	r0, a9be <_printf_i+0x1da>
    a9ba:	1b40      	subs	r0, r0, r5
    a9bc:	6060      	str	r0, [r4, #4]
    a9be:	6863      	ldr	r3, [r4, #4]
    a9c0:	6123      	str	r3, [r4, #16]
    a9c2:	2300      	movs	r3, #0
    a9c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    a9c8:	e79f      	b.n	a90a <_printf_i+0x126>
    a9ca:	6923      	ldr	r3, [r4, #16]
    a9cc:	462a      	mov	r2, r5
    a9ce:	4639      	mov	r1, r7
    a9d0:	4630      	mov	r0, r6
    a9d2:	47c0      	blx	r8
    a9d4:	3001      	adds	r0, #1
    a9d6:	d0a2      	beq.n	a91e <_printf_i+0x13a>
    a9d8:	6823      	ldr	r3, [r4, #0]
    a9da:	079b      	lsls	r3, r3, #30
    a9dc:	d507      	bpl.n	a9ee <_printf_i+0x20a>
    a9de:	2500      	movs	r5, #0
    a9e0:	f104 0919 	add.w	r9, r4, #25
    a9e4:	68e3      	ldr	r3, [r4, #12]
    a9e6:	9a03      	ldr	r2, [sp, #12]
    a9e8:	1a9b      	subs	r3, r3, r2
    a9ea:	429d      	cmp	r5, r3
    a9ec:	db05      	blt.n	a9fa <_printf_i+0x216>
    a9ee:	68e0      	ldr	r0, [r4, #12]
    a9f0:	9b03      	ldr	r3, [sp, #12]
    a9f2:	4298      	cmp	r0, r3
    a9f4:	bfb8      	it	lt
    a9f6:	4618      	movlt	r0, r3
    a9f8:	e793      	b.n	a922 <_printf_i+0x13e>
    a9fa:	2301      	movs	r3, #1
    a9fc:	464a      	mov	r2, r9
    a9fe:	4639      	mov	r1, r7
    aa00:	4630      	mov	r0, r6
    aa02:	47c0      	blx	r8
    aa04:	3001      	adds	r0, #1
    aa06:	d08a      	beq.n	a91e <_printf_i+0x13a>
    aa08:	3501      	adds	r5, #1
    aa0a:	e7eb      	b.n	a9e4 <_printf_i+0x200>
    aa0c:	2b00      	cmp	r3, #0
    aa0e:	d1a7      	bne.n	a960 <_printf_i+0x17c>
    aa10:	780b      	ldrb	r3, [r1, #0]
    aa12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    aa16:	f104 0542 	add.w	r5, r4, #66	; 0x42
    aa1a:	e765      	b.n	a8e8 <_printf_i+0x104>
    aa1c:	0000b382 	.word	0x0000b382
    aa20:	0000b371 	.word	0x0000b371
	...

0000aa30 <memchr>:
    aa30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    aa34:	2a10      	cmp	r2, #16
    aa36:	db2b      	blt.n	aa90 <memchr+0x60>
    aa38:	f010 0f07 	tst.w	r0, #7
    aa3c:	d008      	beq.n	aa50 <memchr+0x20>
    aa3e:	f810 3b01 	ldrb.w	r3, [r0], #1
    aa42:	3a01      	subs	r2, #1
    aa44:	428b      	cmp	r3, r1
    aa46:	d02d      	beq.n	aaa4 <memchr+0x74>
    aa48:	f010 0f07 	tst.w	r0, #7
    aa4c:	b342      	cbz	r2, aaa0 <memchr+0x70>
    aa4e:	d1f6      	bne.n	aa3e <memchr+0xe>
    aa50:	b4f0      	push	{r4, r5, r6, r7}
    aa52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    aa56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    aa5a:	f022 0407 	bic.w	r4, r2, #7
    aa5e:	f07f 0700 	mvns.w	r7, #0
    aa62:	2300      	movs	r3, #0
    aa64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    aa68:	3c08      	subs	r4, #8
    aa6a:	ea85 0501 	eor.w	r5, r5, r1
    aa6e:	ea86 0601 	eor.w	r6, r6, r1
    aa72:	fa85 f547 	uadd8	r5, r5, r7
    aa76:	faa3 f587 	sel	r5, r3, r7
    aa7a:	fa86 f647 	uadd8	r6, r6, r7
    aa7e:	faa5 f687 	sel	r6, r5, r7
    aa82:	b98e      	cbnz	r6, aaa8 <memchr+0x78>
    aa84:	d1ee      	bne.n	aa64 <memchr+0x34>
    aa86:	bcf0      	pop	{r4, r5, r6, r7}
    aa88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    aa8c:	f002 0207 	and.w	r2, r2, #7
    aa90:	b132      	cbz	r2, aaa0 <memchr+0x70>
    aa92:	f810 3b01 	ldrb.w	r3, [r0], #1
    aa96:	3a01      	subs	r2, #1
    aa98:	ea83 0301 	eor.w	r3, r3, r1
    aa9c:	b113      	cbz	r3, aaa4 <memchr+0x74>
    aa9e:	d1f8      	bne.n	aa92 <memchr+0x62>
    aaa0:	2000      	movs	r0, #0
    aaa2:	4770      	bx	lr
    aaa4:	3801      	subs	r0, #1
    aaa6:	4770      	bx	lr
    aaa8:	2d00      	cmp	r5, #0
    aaaa:	bf06      	itte	eq
    aaac:	4635      	moveq	r5, r6
    aaae:	3803      	subeq	r0, #3
    aab0:	3807      	subne	r0, #7
    aab2:	f015 0f01 	tst.w	r5, #1
    aab6:	d107      	bne.n	aac8 <memchr+0x98>
    aab8:	3001      	adds	r0, #1
    aaba:	f415 7f80 	tst.w	r5, #256	; 0x100
    aabe:	bf02      	ittt	eq
    aac0:	3001      	addeq	r0, #1
    aac2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    aac6:	3001      	addeq	r0, #1
    aac8:	bcf0      	pop	{r4, r5, r6, r7}
    aaca:	3801      	subs	r0, #1
    aacc:	4770      	bx	lr
    aace:	bf00      	nop

0000aad0 <memmove>:
    aad0:	4288      	cmp	r0, r1
    aad2:	b510      	push	{r4, lr}
    aad4:	eb01 0302 	add.w	r3, r1, r2
    aad8:	d803      	bhi.n	aae2 <memmove+0x12>
    aada:	1e42      	subs	r2, r0, #1
    aadc:	4299      	cmp	r1, r3
    aade:	d10c      	bne.n	aafa <memmove+0x2a>
    aae0:	bd10      	pop	{r4, pc}
    aae2:	4298      	cmp	r0, r3
    aae4:	d2f9      	bcs.n	aada <memmove+0xa>
    aae6:	1881      	adds	r1, r0, r2
    aae8:	1ad2      	subs	r2, r2, r3
    aaea:	42d3      	cmn	r3, r2
    aaec:	d100      	bne.n	aaf0 <memmove+0x20>
    aaee:	bd10      	pop	{r4, pc}
    aaf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    aaf4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    aaf8:	e7f7      	b.n	aaea <memmove+0x1a>
    aafa:	f811 4b01 	ldrb.w	r4, [r1], #1
    aafe:	f802 4f01 	strb.w	r4, [r2, #1]!
    ab02:	e7eb      	b.n	aadc <memmove+0xc>

0000ab04 <_realloc_r>:
    ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab06:	4607      	mov	r7, r0
    ab08:	4614      	mov	r4, r2
    ab0a:	460e      	mov	r6, r1
    ab0c:	b921      	cbnz	r1, ab18 <_realloc_r+0x14>
    ab0e:	4611      	mov	r1, r2
    ab10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ab14:	f7ff bc04 	b.w	a320 <_malloc_r>
    ab18:	b922      	cbnz	r2, ab24 <_realloc_r+0x20>
    ab1a:	f7ff fbb3 	bl	a284 <_free_r>
    ab1e:	4625      	mov	r5, r4
    ab20:	4628      	mov	r0, r5
    ab22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab24:	f000 f814 	bl	ab50 <_malloc_usable_size_r>
    ab28:	4284      	cmp	r4, r0
    ab2a:	d90f      	bls.n	ab4c <_realloc_r+0x48>
    ab2c:	4621      	mov	r1, r4
    ab2e:	4638      	mov	r0, r7
    ab30:	f7ff fbf6 	bl	a320 <_malloc_r>
    ab34:	4605      	mov	r5, r0
    ab36:	2800      	cmp	r0, #0
    ab38:	d0f2      	beq.n	ab20 <_realloc_r+0x1c>
    ab3a:	4631      	mov	r1, r6
    ab3c:	4622      	mov	r2, r4
    ab3e:	f7ff fb8d 	bl	a25c <memcpy>
    ab42:	4631      	mov	r1, r6
    ab44:	4638      	mov	r0, r7
    ab46:	f7ff fb9d 	bl	a284 <_free_r>
    ab4a:	e7e9      	b.n	ab20 <_realloc_r+0x1c>
    ab4c:	4635      	mov	r5, r6
    ab4e:	e7e7      	b.n	ab20 <_realloc_r+0x1c>

0000ab50 <_malloc_usable_size_r>:
    ab50:	f851 0c04 	ldr.w	r0, [r1, #-4]
    ab54:	2800      	cmp	r0, #0
    ab56:	f1a0 0004 	sub.w	r0, r0, #4
    ab5a:	bfbc      	itt	lt
    ab5c:	580b      	ldrlt	r3, [r1, r0]
    ab5e:	18c0      	addlt	r0, r0, r3
    ab60:	4770      	bx	lr
    ab62:	0000      	movs	r0, r0
    ab64:	682f2e2e 	.word	0x682f2e2e
    ab68:	732f6c61 	.word	0x732f6c61
    ab6c:	682f6372 	.word	0x682f6372
    ab70:	615f6c61 	.word	0x615f6c61
    ab74:	615f6364 	.word	0x615f6364
    ab78:	636e7973 	.word	0x636e7973
    ab7c:	0000632e 	.word	0x0000632e
    ab80:	682f2e2e 	.word	0x682f2e2e
    ab84:	732f6c61 	.word	0x732f6c61
    ab88:	682f6372 	.word	0x682f6372
    ab8c:	635f6c61 	.word	0x635f6c61
    ab90:	735f6372 	.word	0x735f6372
    ab94:	2e636e79 	.word	0x2e636e79
    ab98:	00000063 	.word	0x00000063
    ab9c:	682f2e2e 	.word	0x682f2e2e
    aba0:	732f6c61 	.word	0x732f6c61
    aba4:	682f6372 	.word	0x682f6372
    aba8:	665f6c61 	.word	0x665f6c61
    abac:	6873616c 	.word	0x6873616c
    abb0:	0000632e 	.word	0x0000632e
    abb4:	682f2e2e 	.word	0x682f2e2e
    abb8:	732f6c61 	.word	0x732f6c61
    abbc:	682f6372 	.word	0x682f6372
    abc0:	695f6c61 	.word	0x695f6c61
    abc4:	6d5f6332 	.word	0x6d5f6332
    abc8:	7973615f 	.word	0x7973615f
    abcc:	632e636e 	.word	0x632e636e
    abd0:	00000000 	.word	0x00000000
    abd4:	682f2e2e 	.word	0x682f2e2e
    abd8:	732f6c61 	.word	0x732f6c61
    abdc:	682f6372 	.word	0x682f6372
    abe0:	695f6c61 	.word	0x695f6c61
    abe4:	00632e6f 	.word	0x00632e6f
    abe8:	682f2e2e 	.word	0x682f2e2e
    abec:	732f6c61 	.word	0x732f6c61
    abf0:	682f6372 	.word	0x682f6372
    abf4:	735f6c61 	.word	0x735f6c61
    abf8:	6d5f6970 	.word	0x6d5f6970
    abfc:	7973615f 	.word	0x7973615f
    ac00:	632e636e 	.word	0x632e636e
    ac04:	00000000 	.word	0x00000000
    ac08:	682f2e2e 	.word	0x682f2e2e
    ac0c:	732f6c61 	.word	0x732f6c61
    ac10:	682f6372 	.word	0x682f6372
    ac14:	735f6c61 	.word	0x735f6c61
    ac18:	6d5f6970 	.word	0x6d5f6970
    ac1c:	616d645f 	.word	0x616d645f
    ac20:	0000632e 	.word	0x0000632e
    ac24:	682f2e2e 	.word	0x682f2e2e
    ac28:	732f6c61 	.word	0x732f6c61
    ac2c:	682f6372 	.word	0x682f6372
    ac30:	745f6c61 	.word	0x745f6c61
    ac34:	72656d69 	.word	0x72656d69
    ac38:	0000632e 	.word	0x0000632e
    ac3c:	682f2e2e 	.word	0x682f2e2e
    ac40:	732f6c61 	.word	0x732f6c61
    ac44:	682f6372 	.word	0x682f6372
    ac48:	755f6c61 	.word	0x755f6c61
    ac4c:	74726173 	.word	0x74726173
    ac50:	7973615f 	.word	0x7973615f
    ac54:	632e636e 	.word	0x632e636e
    ac58:	00000000 	.word	0x00000000
    ac5c:	682f2e2e 	.word	0x682f2e2e
    ac60:	752f6c61 	.word	0x752f6c61
    ac64:	736c6974 	.word	0x736c6974
    ac68:	6372732f 	.word	0x6372732f
    ac6c:	6974752f 	.word	0x6974752f
    ac70:	6c5f736c 	.word	0x6c5f736c
    ac74:	2e747369 	.word	0x2e747369
    ac78:	00000063 	.word	0x00000063
    ac7c:	682f2e2e 	.word	0x682f2e2e
    ac80:	752f6c61 	.word	0x752f6c61
    ac84:	736c6974 	.word	0x736c6974
    ac88:	6372732f 	.word	0x6372732f
    ac8c:	6974752f 	.word	0x6974752f
    ac90:	725f736c 	.word	0x725f736c
    ac94:	62676e69 	.word	0x62676e69
    ac98:	65666675 	.word	0x65666675
    ac9c:	00632e72 	.word	0x00632e72

0000aca0 <_adcs>:
    aca0:	01000000 0003000c 00041807 00000000     ................
    acb0:	0014080b 00010000 000c0100 18040003     ................
    acc0:	00000004 080b0000 00000014 682f2e2e     ............../h
    acd0:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    ace0:	00000000                                ....

0000ace4 <_cfgs>:
    ace4:	00200600 08068000 00200400 08068000     .. ....... .....
    acf4:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    ad14:	00200b00 14000003 00200a00 08000002     .. ....... .....
    ad24:	00201300 14000003 00000000 00000000     .. .............
	...

0000ade4 <user_mux_confs>:
	...
    ae10:	04030201 04030201 00000000 00000000     ................
	...

0000ae28 <channel_confs>:
    ae28:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0000ae68 <interrupt_cfg>:
    ae68:	00000002 00000002 00000002 00000002     ................
	...
    aee8:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    aef8:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    af08:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    af18:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    af28:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    af38:	43000800 43000c00                       ...C...C

0000af40 <_usarts>:
    af40:	00000000 40100004 00030000 00700002     .......@......p.
    af50:	0000aaaa 00000000 00000001 40100004     ...............@
    af60:	00030000 00700002 0000aaaa 00000000     ......p.........
    af70:	00000002 40100004 00030000 00700002     .......@......p.
    af80:	0000f62b 00000000 00000004 40100004     +..............@
    af90:	00030000 00700002 0000aaaa 00000000     ......p.........
    afa0:	00000006 40100004 00030000 00700002     .......@......p.
    afb0:	0000aaaa 00000000                       ........

0000afb8 <_i2cms>:
    afb8:	00000005 00200014 00000100 0000e6e5     ...... .........
    afc8:	00d70000 02dc6c00                       .....l..

0000afd0 <sercomspi_regs>:
    afd0:	3020000c 00020000 00000000 01ff0005     .. 0............
    afe0:	20000c03 00000000 00000000 ff000600     ... ............
    aff0:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    b000:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    b010:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    b020:	42001400 42001800 43001400 43001800     ...B...B...C...C

0000b030 <_tcs>:
    b030:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    b040:	00000000 006c0001 00000308 00000021     ......l.....!...
    b050:	00003a98 00000000 006d0002 00000308     .:........m.....
    b060:	00000021 00003a98 00000000 006e0003     !....:........n.
    b070:	00000308 00000021 00003a98 00000000     ....!....:......
    b080:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    b090:	0000632e                                .c..

0000b094 <_usb_ep_cfgs>:
    b094:	20000cc0 00000000 00000040 00000000     ... ....@.......
	...
    b0ac:	20000cb8 00000000 00000008 20000c78     ... ........x.. 
    b0bc:	20000c70 00080040 00000000 00000000     p.. @...........
	...
    b0d4:	20000c68 00080000                       h.. ....

0000b0dc <grid_module_mux_lookup>:
    b0dc:	05040100 0d0c0908 07060302 0f0e0b0a     ................

0000b0ec <UI_ENCODER_LOOKUP>:
    b0ec:	0b0a0f0e 03020706 09080d0c 01000504     ................
    b0fc:	504f4f4c 4b434954 32302520 45520a78     LOOPTICK %02x.RE
    b10c:	49544c41 2520454d 0a783230 4b534154     ALTIME %02x.TASK
    b11c:	30252030 540a7832 314b5341 32302520     0 %02x.TASK1 %02
    b12c:	41540a78 20324b53 78323025 5341540a     x.TASK2 %02x.TAS
    b13c:	2520334b 0a783230 4b534154 30252034     K3 %02x.TASK4 %0
    b14c:	000a7832 10100000                                2x...

0000b151 <grid_module_din_buffer_size>:
	...

0000b152 <grid_module_ain_buffer_size>:
    b152:	30251010                                         .

0000b153 <grid_module_led_buffer_size>:
    b153:	38302510 00000078 32302500 00000078     .%08x....%02x...
    b163:	25632500 25632563 38302563 30632578     .%c%c%c%c%08x%c0
    b173:	00000a30 52475b00 205d4449 20643325     0....[GRID] %3d 
    b183:	20643425 20643425 5b206425 4944494d     %4d %4d %d [MIDI
    b193:	6843205d 6425203a 6d432020 25203a64     ] Ch: %d  Cmd: %
    b1a3:	50202064 6d617261 25203a31 50202064     d  Param1: %d  P
    b1b3:	6d617261 25203a32 00000a64 52475b00     aram2: %d....[GR
    b1c3:	205d4449 20643325 20643425 20643425     ID] %3d %4d %4d 
    b1d3:	5b206425 4259454b 4452414f 654b205d     %d [KEYBOARD] Ke
    b1e3:	25203a79 6f4d2064 25203a64 6d432064     y: %d Mod: %d Cm
    b1f3:	25203a64 57480a64 3a474643 38302520     d: %d.HWCFG: %08
    b203:	00000a78 4e555b00 574f4e4b 2d205d4e     x....[UNKNOWN] -
    b213:	7250203e 636f746f 203a6c6f 000a6425     > Protocol: %d..
    b223:	25632500 32302563 32302578 32302578     .%c%c%02x%02x%02
    b233:	32302578 32302578 00632578 25632500     x%02x%02x%c..%c%
    b243:	25783230 25783230 25783230 25783230     02x%02x%02x%02x%
    b253:	00000063 25632500 25783230 25783230     c....%c%02x%02x%
    b263:	25783230 25783230 25783230 00000063     02x%02x%02x%c...
    b273:	0a303000 09010500                                .00..

0000b278 <keyboard_report_desc>:
    b278:	06090105 070501a1 e729e019 01250015     ..........)...%.
    b288:	08950175 01810281 65290019 65250015     u.........)e..%e
    b298:	06950875 08050081 05290119 01250015     u.........)...%.
    b2a8:	05950175 03950291 00c00191              u...........

0000b2b4 <mouse_report_desc>:
    b2b4:	02090105 010901a1 090500a1 03290119     ..............).
    b2c4:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    b2d4:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    b2e4:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    b2f4:	73752f65 2e636462 00000063              e/usbdc.c...

0000b300 <__sf_fake_stderr>:
	...

0000b320 <__sf_fake_stdin>:
	...

0000b340 <__sf_fake_stdout>:
	...
    b360:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    b370:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    b380:	31300046 35343332 39383736 64636261     F.0123456789abcd
    b390:	00006665                                ef..

0000b394 <_init>:
    b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b396:	bf00      	nop
    b398:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b39a:	bc08      	pop	{r3}
    b39c:	469e      	mov	lr, r3
    b39e:	4770      	bx	lr

0000b3a0 <__init_array_start>:
    b3a0:	00000289 	.word	0x00000289

0000b3a4 <_fini>:
    b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3a6:	bf00      	nop
    b3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b3aa:	bc08      	pop	{r3}
    b3ac:	469e      	mov	lr, r3
    b3ae:	4770      	bx	lr

0000b3b0 <__fini_array_start>:
    b3b0:	00000265 	.word	0x00000265
